uint64_t sub_100AF6134()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  id v8;
  NSURL *v9;
  void *v10;
  void *v11;
  void *v12;
  Class isa;
  uint64_t v14;

  v0 = sub_10001A9A8(&qword_1010FBA40);
  __chkstk_darwin(v0);
  v2 = (char *)&v14 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for URL(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  URL.init(string:)(0xD000000000000028, 0x8000000100EEE6F0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3) == 1)
    return sub_100004048((uint64_t)v2, &qword_1010FBA40);
  (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v6, v2, v3);
  v8 = objc_msgSend((id)objc_opt_self(LSApplicationWorkspace), "defaultWorkspace");
  if (v8)
  {
    v10 = v8;
    URL._bridgeToObjectiveC()(v9);
    v12 = v11;
    sub_1006B8B10((uint64_t)_swiftEmptyArrayStorage);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v10, "openSensitiveURL:withOptions:", v12, isa);

  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_100AF62DC(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return swift_task_switch(sub_100AF62F4, 0, 0);
}

uint64_t sub_100AF62F4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  unint64_t v4;
  char *v5;
  uint64_t v6;
  void (*v7)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v8;

  v1 = v0[2];
  v2 = type metadata accessor for AnalyticsEvent(0);
  v3 = (char *)swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  v0[3] = v3;
  swift_defaultActor_initialize(v3);
  v4 = sub_1006B8B38((uint64_t)_swiftEmptyArrayStorage);
  *((_QWORD *)v3 + 14) = v4;
  UUID.init()(v4);
  v5 = &v3[OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_startTime];
  v6 = type metadata accessor for DispatchTime(0);
  v7 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56);
  v7(v5, 1, 1, v6);
  v7(&v3[OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_endTime], 1, 1, v6);
  *((_QWORD *)v3 + 15) = 0xD000000000000034;
  *((_QWORD *)v3 + 16) = 0x8000000100EEE690;
  v8 = swift_task_alloc(32);
  v0[4] = v8;
  *(_QWORD *)(v8 + 16) = v1;
  return swift_task_switch(sub_100AF6404, v3, 0);
}

uint64_t sub_100AF6404()
{
  uint64_t v0;

  sub_100CCC4A0((uint64_t (*)(uint64_t))sub_100AF8DAC);
  swift_task_dealloc(*(_QWORD *)(v0 + 32));
  return swift_task_switch(sub_100569ACC, 0, 0);
}

unint64_t sub_100AF6480(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  int *v5;
  uint64_t v6;
  char *v7;
  int *v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  Swift::String v12;
  Swift::String v13;
  _BOOL8 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t inited;
  NSString v25;
  unint64_t v26;
  _QWORD v28[2];
  _BYTE v29[164];
  int v30;
  _QWORD v31[3];

  v2 = type metadata accessor for Endianness(0);
  __chkstk_darwin(v2);
  v4 = (char *)v28 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = (int *)type metadata accessor for BluetoothManagerDevice(0);
  __chkstk_darwin(v5);
  v7 = (char *)v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = (int *)type metadata accessor for PrivacyAlertSupport.AlertInfo(0);
  sub_10005972C(a1 + v8[6], (uint64_t)v7, type metadata accessor for BluetoothManagerDevice);
  v9 = &v7[v5[9]];
  v10 = *((_QWORD *)v9 + 1);
  if (v10 >> 60 == 15)
  {
    v30 = *(_DWORD *)&v7[v5[6]];
    v31[0] = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt32, &protocol witness table for UInt32);
    v31[1] = v11;
    v12._countAndFlagsBits = 45;
    v12._object = (void *)0xE100000000000000;
    String.append(_:)(v12);
    v30 = *(_DWORD *)&v7[v5[8]];
    v13._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt32, &protocol witness table for UInt32);
    String.append(_:)(v13);
    swift_bridgeObjectRelease();
    v14 = 0;
  }
  else
  {
    v15 = *(_QWORD *)v9;
    sub_10001BBBC(*(_QWORD *)v9, *((_QWORD *)v9 + 1));
    v28[1] = sub_1001EDC48(v15, v10);
    sub_1001EDA78(v15, v10);
    v17 = v16;
    v18 = sub_1001EDBAC(v15, v10);
    v20 = v19;
    static Endianness.current.getter(v18);
    sub_10007D5A4();
    FixedWidthInteger.init(data:ofEndianness:)(v31, v18, v20, v4);
    if (BYTE4(v31[0]))
      v21 = 0;
    else
      v21 = SLODWORD(v31[0]);
    v22 = sub_100A2D38C(v17, v21);
    sub_10001EF3C(v15, v10);
    v14 = v22;
  }
  v23 = sub_10001A9A8(&qword_1010EEBD0);
  inited = swift_initStackObject(v23, v29);
  *(_OWORD *)(inited + 16) = xmmword_100E26E00;
  *(_QWORD *)(inited + 32) = 0xD000000000000017;
  *(_QWORD *)(inited + 40) = 0x8000000100EEE6D0;
  *(_QWORD *)(inited + 48) = (*(_BYTE *)(a1 + v8[7]) & 1) == 0;
  *(_BYTE *)(inited + 56) = 1;
  strcpy((char *)(inited + 64), "isFamilyBeacon");
  *(_BYTE *)(inited + 79) = -18;
  *(_QWORD *)(inited + 80) = *(_QWORD *)(a1 + v8[8] + 8) != 0;
  *(_BYTE *)(inited + 88) = 1;
  *(_QWORD *)(inited + 96) = 0x7954656369766564;
  *(_QWORD *)(inited + 104) = 0xEA00000000006570;
  v25 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  *(_QWORD *)(inited + 112) = v25;
  *(_BYTE *)(inited + 120) = 0;
  *(_QWORD *)(inited + 128) = 0xD000000000000015;
  *(_QWORD *)(inited + 136) = 0x8000000100ED97D0;
  *(_QWORD *)(inited + 144) = v14;
  *(_BYTE *)(inited + 152) = 1;
  v26 = sub_1006B9444(inited);
  sub_1000126B0((uint64_t)v7, type metadata accessor for BluetoothManagerDevice);
  return v26;
}

uint64_t sub_100AF67B8(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  __n128 v19;
  uint64_t v21;

  v3 = v2;
  v6 = type metadata accessor for DispatchPredicate(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (uint64_t *)((char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = *(void **)(v3 + 24);
  *v9 = v10;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v7 + 104))(v9, enum case for DispatchPredicate.onQueue(_:), v6);
  v11 = v10;
  LOBYTE(v10) = _dispatchPreconditionTest(_:)(v9);
  (*(void (**)(_QWORD *, uint64_t))(v7 + 8))(v9, v6);
  if ((v10 & 1) != 0)
  {
    if (qword_1010EA1A0 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_1010EA1A0, sub_100AEF424);
LABEL_3:
  v12 = type metadata accessor for Logger(0);
  sub_10001A9E8(v12, (uint64_t)qword_1011B7C10);
  v13 = sub_10001BBBC(a1, a2);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.info.getter(v14);
  if (os_log_type_enabled(v14, v15))
  {
    *(_DWORD *)swift_slowAlloc(12, -1) = 134217984;
    __asm { BR              X10 }
  }
  sub_10001BC14(a1, a2);

  v16 = swift_allocObject(&unk_1010AB058, 24, 7);
  swift_weakInit(v16 + 16, v3);
  v17 = (_QWORD *)swift_allocObject(&unk_1010AB0A8, 40, 7);
  v17[2] = v16;
  v17[3] = a1;
  v17[4] = a2;
  v18 = sub_10001A9A8(&qword_1010EEC28);
  swift_allocObject(v18, *(unsigned int *)(v18 + 48), *(unsigned __int16 *)(v18 + 52));
  sub_10001BBBC(a1, a2);
  return Future.init(_:)(sub_100AF8B1C, v17, v19);
}

uint64_t sub_100AF6A54(void (*a1)(__int128 *), uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t Strong;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  __int128 v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  _BOOL4 v35;
  uint8_t *v36;
  uint8_t *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint8_t *v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  __int16 v53;
  __int16 v54;
  uint64_t v55;
  void (**v56)(uint64_t, unint64_t, uint64_t);
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  _BYTE *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  NSObject *v66;
  os_log_type_t v67;
  uint8_t *v68;
  char *v69;
  void (**v70)(uint64_t, unint64_t, uint64_t);
  uint64_t v71;
  int v72;
  char *v73;
  void (*v74)(uint64_t, unint64_t, uint64_t);
  uint64_t v75;
  char *v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  NSObject *v81;
  os_log_type_t v82;
  uint8_t *v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  __int128 v94;
  __int128 v95;
  char v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  double v100;
  uint8_t *v102;
  uint8_t *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  char *v115;
  void (**v116)(uint64_t, unint64_t, uint64_t);
  char *v117;
  void (*v118)(__int128 *);
  char v119[24];
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  __int128 v124;
  __int128 v125;
  unint64_t v126;
  unint64_t v127;
  char v128;
  char v129[8];

  v118 = a1;
  v9 = type metadata accessor for BinaryDecodingError(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v102 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for BinaryDecoder(0);
  v108 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v109 = (char *)&v102 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_10001A9A8(&qword_1010EEC30);
  __chkstk_darwin(v15);
  v115 = (char *)&v102 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for Bit(0);
  v116 = *(void (***)(uint64_t, unint64_t, uint64_t))(v17 - 8);
  v18 = __chkstk_darwin(v17);
  v111 = (char *)&v102 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v117 = (char *)&v102 - v20;
  a3 += 16;
  swift_beginAccess(a3, v129, 0, 0);
  Strong = swift_weakLoadStrong(a3);
  if (!Strong)
  {
    v126 = 0;
    v124 = 0u;
    v125 = 0u;
    LOBYTE(v127) = 11;
    v128 = 1;
    v118(&v124);
    return sub_100004048((uint64_t)&v124, &qword_1010EEC38);
  }
  v22 = (char *)Strong;
  v105 = v13;
  v114 = v17;
  v113 = v12;
  v107 = v10;
  v23 = *(_QWORD *)(Strong + 80);
  v24 = *((_QWORD *)v22 + 11);
  if (v24 >> 60 == 15)
    v25 = 0;
  else
    v25 = v23;
  v26 = 0xC000000000000000;
  if (v24 >> 60 != 15)
    v26 = *((_QWORD *)v22 + 11);
  v122 = v25;
  v123 = v26;
  sub_10001BD08(v23, v24);
  sub_10001BBBC(a4, a5);
  sub_100AEF294(1, a4, a5);
  v27 = v124;
  Data.append(_:)(v124, *((_QWORD *)&v124 + 1));
  sub_10001BC14(v27, *((unint64_t *)&v27 + 1));
  v28 = v122;
  v29 = v123;
  v30 = *((_QWORD *)v22 + 10);
  v31 = *((_QWORD *)v22 + 11);
  *((_QWORD *)v22 + 10) = v122;
  *((_QWORD *)v22 + 11) = v29;
  sub_10001BBBC(v28, v29);
  sub_10001EF3C(v30, v31);
  if (qword_1010EA1A0 != -1)
    swift_once(&qword_1010EA1A0, sub_100AEF424);
  v32 = type metadata accessor for Logger(0);
  v112 = sub_10001A9E8(v32, (uint64_t)qword_1011B7C10);
  v33 = Logger.logObject.getter(v112);
  v34 = static os_log_type_t.info.getter(v33);
  v35 = os_log_type_enabled(v33, v34);
  v110 = a2;
  if (v35)
  {
    v36 = (uint8_t *)swift_slowAlloc(12, -1);
    v104 = swift_slowAlloc(32, -1);
    *(_QWORD *)&v124 = v104;
    v103 = v36;
    *(_DWORD *)v36 = 136315138;
    v37 = v36 + 12;
    v102 = v36 + 4;
    swift_beginAccess(&v122, v119, 0, 0);
    v38 = a4;
    v39 = v22;
    v40 = v122;
    v41 = v123;
    sub_10001BBBC(v122, v123);
    v42 = a5;
    v43 = Data.description.getter(v40, v41);
    v106 = v9;
    v45 = v44;
    v46 = v41;
    v22 = v39;
    a4 = v38;
    sub_10001BC14(v40, v46);
    v47 = v43;
    a5 = v42;
    v120 = sub_100016940(v47, v45, (uint64_t *)&v124);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v120, &v121, v102, v37);
    v9 = v106;
    swift_bridgeObjectRelease();
    v48 = v103;
    _os_log_impl((void *)&_mh_execute_header, v33, v34, "localReadBuffer %s", v103, 0xCu);
    v49 = v104;
    swift_arrayDestroy(v104, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v49, -1, -1);
    swift_slowDealloc(v48, -1, -1);
  }

  v50 = v113;
  v51 = v117;
  v52 = (uint64_t)v115;
  sub_10001BBBC(a4, a5);
  sub_1000FC3EC(a4, a5);
  v54 = v53;
  sub_10001BC14(a4, a5);
  v55 = v114;
  v56 = v116;
  if ((v54 & 0x100) != 0)
    goto LABEL_18;
  LOBYTE(v124) = v54;
  v57 = sub_100059570();
  v58 = FixedWidthInteger.bits()(&type metadata for UInt8, v57);
  if (*(_QWORD *)(v58 + 16))
  {
    v56[2](v52, v58 + ((*((unsigned __int8 *)v56 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v56 + 80)), v55);
    v59 = 0;
  }
  else
  {
    v59 = 1;
  }
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v56[7])(v52, v59, 1, v55);
  swift_bridgeObjectRelease();
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v56[6])(v52, 1, v55) == 1)
  {
    sub_100004048(v52, &qword_1010EEC30);
LABEL_18:
    v60 = sub_100AF8B28();
    v61 = swift_allocError(&type metadata for PrivacyAlertSupport.PrivacyAlertSupportError, v60, 0, 0);
    *v62 = 1;
    swift_willThrow(v61);
    goto LABEL_19;
  }
  v106 = v9;
  v56[4]((uint64_t)v51, v52, v55);
  v69 = v111;
  v56[13]((uint64_t)v111, enum case for Bit.one(_:), v55);
  v70 = v56;
  v71 = sub_100006204((unint64_t *)&qword_1010EDCA0, (uint64_t (*)(uint64_t))&type metadata accessor for Bit, (uint64_t)&protocol conformance descriptor for Bit);
  dispatch thunk of RawRepresentable.rawValue.getter(&v124, v55, v71);
  dispatch thunk of RawRepresentable.rawValue.getter(&v120, v55, v71);
  LODWORD(v71) = v124;
  v72 = v120;
  v73 = v69;
  v74 = v70[1];
  v75 = ((uint64_t (*)(char *, uint64_t))v74)(v73, v55);
  if ((_DWORD)v71 == v72)
  {
    v116 = (void (**)(uint64_t, unint64_t, uint64_t))v74;
    v76 = v109;
    BinaryDecoder.init()(v75);
    swift_beginAccess(&v122, &v120, 0, 0);
    v77 = v122;
    v78 = v123;
    sub_10001BBBC(v122, v123);
    v79 = sub_100AF8B6C();
    BinaryDecoder.decode<A>(_:from:)(&type metadata for AccessoryOwnerCommand, v77, v78, &type metadata for AccessoryOwnerCommand, v79);
    sub_10001BC14(v77, v78);
    v94 = v124;
    v95 = v125;
    v96 = v126;
    v97 = *((_QWORD *)v22 + 10);
    v98 = *((_QWORD *)v22 + 11);
    *((_OWORD *)v22 + 5) = xmmword_100E22B20;
    sub_10001EF3C(v97, v98);
    *((_QWORD *)&v125 + 1) = &type metadata for AccessoryOwnerCommand;
    v126 = v79;
    v127 = sub_1009F7FC8();
    v99 = swift_allocObject(&unk_1010AB0D0, 49, 7);
    *(_QWORD *)&v124 = v99;
    *(_OWORD *)(v99 + 16) = v94;
    *(_OWORD *)(v99 + 32) = v95;
    *(_BYTE *)(v99 + 48) = v96;
    v128 = 0;
    v100 = sub_100439BC4(v94, *((unint64_t *)&v94 + 1), v95, *((unint64_t *)&v95 + 1), v96);
    ((void (*)(__int128 *, double))v118)(&v124, v100);
    swift_release();
    sub_100439C44(v94, *((unint64_t *)&v94 + 1), v95, *((unint64_t *)&v95 + 1), v96);
    (*(void (**)(char *, uint64_t))(v108 + 8))(v76, v105);
    ((void (*)(char *, uint64_t))v116)(v117, v114);
    sub_100004048((uint64_t)&v124, &qword_1010EEC38);
    return sub_10001BC14(v122, v123);
  }
  v90 = sub_100006204((unint64_t *)&qword_1010EC010, (uint64_t (*)(uint64_t))&type metadata accessor for BinaryDecodingError, (uint64_t)&protocol conformance descriptor for BinaryDecodingError);
  v91 = v106;
  v61 = swift_allocError(v106, v90, 0, 0);
  v93 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v107 + 104))(v92, enum case for BinaryDecodingError.insufficientData(_:), v91);
  swift_willThrow(v93);
  ((void (*)(char *, uint64_t))v74)(v51, v55);
  v9 = v91;
LABEL_19:
  sub_10001BC14(v122, v123);
  *(_QWORD *)&v124 = v61;
  swift_errorRetain(v61);
  v63 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
  if (!swift_dynamicCast(v50, &v124, v63, v9, 0))
  {
LABEL_26:
    swift_errorRelease(v124);
    sub_10001BBBC(a4, a5);
    v80 = sub_10001BBBC(a4, a5);
    v81 = Logger.logObject.getter(v80);
    v82 = static os_log_type_t.info.getter(v81);
    if (os_log_type_enabled(v81, v82))
    {
      v117 = v22;
      v83 = (uint8_t *)swift_slowAlloc(12, -1);
      v84 = swift_slowAlloc(32, -1);
      *(_QWORD *)&v124 = v84;
      *(_DWORD *)v83 = 136315138;
      v116 = (void (**)(uint64_t, unint64_t, uint64_t))(v83 + 4);
      sub_10001BBBC(a4, a5);
      v85 = Data.description.getter(a4, a5);
      v87 = v86;
      sub_10001BC14(a4, a5);
      v122 = sub_100016940(v85, v87, (uint64_t *)&v124);
      v22 = v117;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v122, &v123, v116, v83 + 12);
      swift_bridgeObjectRelease();
      sub_10001BC14(a4, a5);
      sub_10001BC14(a4, a5);
      _os_log_impl((void *)&_mh_execute_header, v81, v82, "Failed to decode data %s", v83, 0xCu);
      swift_arrayDestroy(v84, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v84, -1, -1);
      swift_slowDealloc(v83, -1, -1);
    }
    else
    {
      sub_10001BC14(a4, a5);
      sub_10001BC14(a4, a5);
    }

    v88 = *((_QWORD *)v22 + 10);
    v89 = *((_QWORD *)v22 + 11);
    *((_OWORD *)v22 + 5) = xmmword_100E22B20;
    sub_10001EF3C(v88, v89);
    *(_QWORD *)&v124 = v61;
    LOBYTE(v127) = 10;
    v128 = 1;
    swift_errorRetain(v61);
    v118(&v124);
    swift_release();
    swift_errorRelease(v61);
    return sub_100004048((uint64_t)&v124, &qword_1010EEC38);
  }
  v64 = v107;
  if ((*(unsigned int (**)(char *, uint64_t))(v107 + 88))(v50, v9) != enum case for BinaryDecodingError.insufficientData(_:))
  {
    (*(void (**)(char *, uint64_t))(v64 + 8))(v50, v9);
    goto LABEL_26;
  }
  v65 = swift_errorRelease(v61);
  v66 = Logger.logObject.getter(v65);
  v67 = static os_log_type_t.info.getter(v66);
  if (os_log_type_enabled(v66, v67))
  {
    v68 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v68 = 0;
    _os_log_impl((void *)&_mh_execute_header, v66, v67, "insufficientData. Keep reading...", v68, 2u);
    swift_slowDealloc(v68, -1, -1);
    swift_release();

  }
  else
  {

    swift_release();
  }
  return swift_errorRelease(v124);
}

uint64_t sub_100AF75E0(__int128 *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  void *v9;
  id v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;

  v5 = type metadata accessor for DispatchPredicate(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (uint64_t *)((char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = *(void **)(v2 + 24);
  *v8 = v9;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v6 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v5);
  v10 = v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)(v8);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v6 + 8))(v8, v5);
  if ((v9 & 1) != 0)
  {
    v12 = swift_allocObject(&unk_1010AB058, 24, 7);
    swift_weakInit(v12 + 16, v2);
    v13 = swift_allocObject(&unk_1010AB080, 72, 7);
    *(_QWORD *)(v13 + 16) = v12;
    sub_100439EF4(a1, v13 + 24);
    *(_QWORD *)(v13 + 64) = a2;
    v14 = sub_10001A9A8(&qword_101109328);
    swift_allocObject(v14, *(unsigned int *)(v14 + 48), *(unsigned __int16 *)(v14 + 52));
    sub_100244534((uint64_t)a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100439BC4);
    swift_retain();
    return Future.init(_:)(sub_100AF8964, v13, v15);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100AF7738(void (*a1)(_OWORD *), uint64_t a2, uint64_t a3, __int128 *a4, char *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t Strong;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v26;
  uint64_t v27;
  _OWORD v28[2];
  uint64_t v29;
  __int16 v30;
  _BYTE v31[24];

  v10 = type metadata accessor for BinaryEncoder(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  a3 += 16;
  swift_beginAccess(a3, v31, 0, 0);
  Strong = swift_weakLoadStrong(a3);
  if (Strong)
  {
    v15 = Strong;
    v27 = v11;
    v16 = *(_QWORD *)(Strong + 56);
    v17 = *(_QWORD *)(Strong + 64);
    *(_QWORD *)(Strong + 56) = a1;
    *(_QWORD *)(Strong + 64) = a2;
    swift_retain();
    v18 = sub_10001D8A8(v16, v17);
    BinaryEncoder.init()(v18);
    sub_100439EF4(a4, (uint64_t)v28);
    v19 = sub_1009F7FC8();
    v20 = BinaryEncoder.encode<A>(_:)(v28, &type metadata for AccessoryOwnerCommand, v19);
    v22 = v21;
    v23 = Data.chunked(into:)(255, v20, v21);
    v24 = sub_1000F7B84(v23);
    swift_bridgeObjectRelease();
    swift_beginAccess(v15 + 72, v28, 33, 0);
    sub_10030294C((uint64_t)v24);
    swift_endAccess(v28);
    sub_100AF7AE0(a5);
    sub_10001BC14(v20, v22);
    swift_release();
    return (*(uint64_t (**)(char *, uint64_t))(v27 + 8))(v13, v10);
  }
  else
  {
    v29 = 0;
    memset(v28, 0, sizeof(v28));
    v30 = 267;
    a1(v28);
    return sub_100004048((uint64_t)v28, &qword_1010EEBF8);
  }
}

void sub_100AF7AE0(char *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  void *v14;
  id v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  void (*v33)(uint64_t *);
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  uint64_t v39;
  NSObject *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  void (*isa)(char *, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  NSObject *v50;
  os_log_type_t v51;
  uint8_t *v52;
  uint64_t v53;
  NSObject *v54;
  os_log_type_t v55;
  uint8_t *v56;
  uint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  NSObject *v67;
  os_log_type_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void (*v77)(uint64_t *);
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  char *v83;
  uint64_t v84;
  char *v85;
  NSObject *v86;
  uint64_t v87;
  unint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  _WORD v92[20];
  uint64_t v93;
  _BYTE v94[40];
  uint64_t v95[5];
  char v96;
  char v97[24];
  char v98[16];

  v2 = v1;
  v89 = a1;
  v3 = type metadata accessor for DispatchTime(0);
  v4 = *(NSObject **)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = (char *)&v82 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v82 - v8;
  v10 = type metadata accessor for DispatchPredicate(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (_QWORD **)((char *)&v82 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v14 = (void *)v2[3];
  *v13 = v14;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v11 + 104))(v13, enum case for DispatchPredicate.onQueue(_:), v10);
  v15 = v14;
  LOBYTE(v14) = _dispatchPreconditionTest(_:)(v13);
  (*(void (**)(_QWORD *, uint64_t))(v11 + 8))(v13, v10);
  if ((v14 & 1) == 0)
  {
    __break(1u);
    goto LABEL_29;
  }
  v16 = v2 + 9;
  swift_beginAccess(v2 + 9, v98, 0, 0);
  if (*(_QWORD *)(v2[9] + 16))
  {
    swift_beginAccess(v2 + 9, v95, 33, 0);
    v17 = *v16;
    if (*(_QWORD *)(*v16 + 16))
    {
      v85 = v7;
      v83 = v9;
      v87 = v3;
      v7 = *(char **)(v17 + 32);
      v88 = *(_QWORD *)(v17 + 40);
      sub_10001BBBC((uint64_t)v7, v88);
      sub_100779578(0, 1);
      swift_endAccess(v95);
      if (qword_1010EA1A0 == -1)
        goto LABEL_5;
      goto LABEL_30;
    }
LABEL_29:
    __break(1u);
LABEL_30:
    swift_once(&qword_1010EA1A0, sub_100AEF424);
LABEL_5:
    v86 = v4;
    v18 = type metadata accessor for Logger(0);
    v19 = sub_10001A9E8(v18, (uint64_t)qword_1011B7C10);
    v20 = v88;
    sub_10001BBBC((uint64_t)v7, v88);
    swift_retain();
    sub_10001BBBC((uint64_t)v7, v20);
    v21 = swift_retain();
    v84 = v19;
    v22 = Logger.logObject.getter(v21);
    v23 = static os_log_type_t.default.getter(v22);
    if (os_log_type_enabled(v22, v23))
    {
      v24 = swift_slowAlloc(22, -1);
      v25 = swift_slowAlloc(64, -1);
      v95[0] = v25;
      *(_DWORD *)v24 = 136315394;
      v26 = v88;
      v27 = Data.hexString.getter(v7, v88);
      v82 = v2;
      v91 = sub_100016940(v27, v28, v95);
      v29 = v89;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v91, v92, v24 + 4, v24 + 12);
      swift_bridgeObjectRelease();
      sub_10001BC14((uint64_t)v7, v26);
      sub_10001BC14((uint64_t)v7, v26);
      *(_WORD *)(v24 + 12) = 2082;
      swift_retain();
      v30 = sub_1007C6C74();
      v32 = v31;
      swift_release();
      v91 = sub_100016940(v30, v32, v95);
      v2 = v82;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v91, v92, v24 + 14, v24 + 22);
      swift_release_n(v29, 2);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "processQueuedUpdates: writing %s. Characteristic %{public}s.", (uint8_t *)v24, 0x16u);
      swift_arrayDestroy(v25, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v25, -1, -1);
      swift_slowDealloc(v24, -1, -1);

    }
    else
    {
      v35 = v88;
      sub_10001BC14((uint64_t)v7, v88);
      sub_10001BC14((uint64_t)v7, v35);

      swift_release_n(v89, 2);
    }
    v36 = swift_allocObject(&unk_1010AB008, 58, 7);
    *(_OWORD *)(v36 + 16) = 0u;
    v37 = v36 + 16;
    *(_OWORD *)(v36 + 32) = 0u;
    *(_QWORD *)(v36 + 48) = 0;
    *(_WORD *)(v36 + 56) = 267;
    v38 = dispatch_group_create();
    dispatch_group_enter(v38);
    v95[0] = sub_1007C5C3C((uint64_t)v7, v88);
    v39 = swift_allocObject(&unk_1010AB030, 32, 7);
    *(_QWORD *)(v39 + 16) = v36;
    *(_QWORD *)(v39 + 24) = v38;
    swift_retain();
    v40 = v38;
    v41 = sub_10001A9A8(&qword_1010EEBE8);
    v42 = sub_1000193A4(&qword_1010EEBF0, &qword_1010EEBE8, (const char *)&protocol conformance descriptor for AnyPublisher<A, B>);
    Publisher.oneshot(_:)(sub_100244198, v39, v41, v42);
    swift_release();
    v43 = swift_release();
    v44 = v85;
    static DispatchTime.now()(v43);
    v45 = v83;
    + infix(_:_:)(v44, 30.0);
    isa = (void (*)(char *, uint64_t))v86[1].isa;
    v47 = v87;
    isa(v44, v87);
    v86 = v40;
    v48 = OS_dispatch_group.wait(timeout:)(v45) & 1;
    isa(v45, v47);
    v49 = static DispatchTimeoutResult.== infix(_:_:)(v48, 1);
    if ((v49 & 1) != 0)
    {
      v50 = Logger.logObject.getter(v49);
      v51 = static os_log_type_t.error.getter(v50);
      if (os_log_type_enabled(v50, v51))
      {
        v52 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v52 = 0;
        _os_log_impl((void *)&_mh_execute_header, v50, v51, "Timed out waiting for writeFuture", v52, 2u);
        swift_slowDealloc(v52, -1, -1);
      }

    }
    swift_beginAccess(v37, v97, 0, 0);
    sub_10000F9B8(v37, (uint64_t)v95, &qword_1010EEBF8);
    if ((v96 & 1) != 0)
    {
      sub_100059244((uint64_t)v95, (uint64_t)&v93);
      v53 = sub_100059280(&v93, (uint64_t)&v91);
      v54 = Logger.logObject.getter(v53);
      v55 = static os_log_type_t.error.getter(v54);
      if (os_log_type_enabled(v54, v55))
      {
        v56 = (uint8_t *)swift_slowAlloc(12, -1);
        v57 = swift_slowAlloc(8, -1);
        v89 = v7;
        v58 = v2;
        v59 = (_QWORD *)v57;
        *(_DWORD *)v56 = 138543362;
        v60 = sub_100059390();
        v61 = swift_allocError(&type metadata for CentralManager.Error, v60, 0, 0);
        sub_100059280(&v91, v62);
        v63 = _swift_stdlib_bridgeErrorToNSError(v61);
        v90 = v63;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v90, &v91, v56 + 4, v56 + 12);
        *v59 = v63;
        sub_1000593D4(&v91);
        _os_log_impl((void *)&_mh_execute_header, v54, v55, "writeFuture error: %{public}@", v56, 0xCu);
        v64 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
        swift_arrayDestroy(v59, 1, v64);
        v65 = v59;
        v2 = v58;
        v7 = v89;
        swift_slowDealloc(v65, -1, -1);
        swift_slowDealloc(v56, -1, -1);
      }
      else
      {
        sub_1000593D4(&v91);
      }

      v77 = (void (*)(uint64_t *))v2[7];
      if (v77)
      {
        v78 = v2[8];
        v79 = sub_100059390();
        v80 = swift_allocError(&type metadata for CentralManager.Error, v79, 0, 0);
        sub_100059280(&v93, v81);
        v91 = v80;
        v92[16] = 256;
        swift_retain();
        v77(&v91);
        sub_10001D8A8((uint64_t)v77, v78);

        sub_10001BC14((uint64_t)v7, v88);
        sub_100004048((uint64_t)&v91, &qword_1010EEBF8);
        sub_1000593D4(&v93);
LABEL_26:
        swift_release();
        return;
      }
      sub_1000593D4(&v93);
    }
    else
    {
      v66 = swift_retain_n(v2, 2);
      v67 = Logger.logObject.getter(v66);
      v68 = static os_log_type_t.info.getter(v67);
      if (os_log_type_enabled(v67, v68))
      {
        v69 = swift_slowAlloc(22, -1);
        v87 = swift_slowAlloc(32, -1);
        v91 = v87;
        *(_DWORD *)v69 = 134218242;
        v93 = *(_QWORD *)(v2[9] + 16);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v93, v94, v69 + 4, v69 + 12);
        *(_WORD *)(v69 + 12) = 2080;
        v85 = (char *)(v69 + 14);
        swift_bridgeObjectRetain(v2[9]);
        v71 = v7;
        v72 = Array.description.getter(v70, &type metadata for Data);
        v74 = v73;
        swift_bridgeObjectRelease();
        v75 = v72;
        v7 = v71;
        v93 = sub_100016940(v75, v74, &v91);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v93, v94, v85, v69 + 22);
        swift_release_n(v2, 2);
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v67, v68, "writeFuture success. writeQueue [%ld] %s", (uint8_t *)v69, 0x16u);
        v76 = v87;
        swift_arrayDestroy(v87, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v76, -1, -1);
        swift_slowDealloc(v69, -1, -1);

      }
      else
      {

        swift_release_n(v2, 2);
      }
      sub_100AF7AE0(v89);
    }

    sub_10001BC14((uint64_t)v7, v88);
    goto LABEL_26;
  }
  v33 = (void (*)(uint64_t *))v2[7];
  if (v33)
  {
    v34 = v2[8];
    v96 = 0;
    swift_retain();
    v33(v95);
    sub_10001D8A8((uint64_t)v33, v34);
    sub_100004048((uint64_t)v95, &qword_1010EEBF8);
  }
}

uint64_t sub_100AF84E4()
{
  uint64_t v0;

  swift_release();

  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  sub_10001D8A8(*(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64));
  swift_bridgeObjectRelease();
  sub_10001EF3C(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88));
  swift_release();
  swift_release();
  return v0;
}

uint64_t sub_100AF8548()
{
  uint64_t v0;

  sub_100AF84E4();
  return swift_deallocClassInstance(v0, 121, 7);
}

uint64_t type metadata accessor for PrivacyAlertSupport()
{
  return objc_opt_self(_TtC12searchpartyd19PrivacyAlertSupport);
}

uint64_t storeEnumTagSinglePayload for PrivacyAlertSupport.PrivacyAlertState(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_100AF85D4 + 4 * byte_100E5D69C[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_100AF8608 + 4 * byte_100E5D697[v4]))();
}

uint64_t sub_100AF8608(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100AF8610(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100AF8618);
  return result;
}

uint64_t sub_100AF8624(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100AF862CLL);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_100AF8630(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100AF8638(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PrivacyAlertSupport.PrivacyAlertState()
{
  return &type metadata for PrivacyAlertSupport.PrivacyAlertState;
}

uint64_t *initializeBufferWithCopyOfBuffer for PrivacyAlertSupport.PairingAction(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = *a2;
  if ((unint64_t)*a2 >= 0xFFFFFFFF)
    v3 = swift_bridgeObjectRetain(v3);
  *a1 = v3;
  return a1;
}

unint64_t destroy for PrivacyAlertSupport.PairingAction(unint64_t *a1)
{
  unint64_t result;

  result = *a1;
  if (result >= 0xFFFFFFFF)
    return swift_bridgeObjectRelease(result);
  return result;
}

unint64_t *assignWithCopy for PrivacyAlertSupport.PairingAction(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;
  unint64_t v4;

  v3 = *a1;
  v4 = *a2;
  if (v3 < 0xFFFFFFFF)
  {
    *a1 = v4;
    if (v4 >= 0xFFFFFFFF)
      swift_bridgeObjectRetain(v4);
  }
  else if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease(v3);
    *a1 = *a2;
  }
  else
  {
    *a1 = v4;
    swift_bridgeObjectRetain(v4);
    swift_bridgeObjectRelease(v3);
  }
  return a1;
}

unint64_t *assignWithTake for PrivacyAlertSupport.PairingAction(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;
  unint64_t v4;

  v3 = *a1;
  v4 = *a2;
  if (v3 < 0xFFFFFFFF)
    goto LABEL_5;
  if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease(v3);
LABEL_5:
    *a1 = v4;
    return a1;
  }
  *a1 = v4;
  swift_bridgeObjectRelease(v3);
  return a1;
}

ValueMetadata *type metadata accessor for PrivacyAlertSupport.PairingAction()
{
  return &type metadata for PrivacyAlertSupport.PairingAction;
}

unint64_t sub_100AF879C()
{
  unint64_t result;

  result = qword_101113BE8;
  if (!qword_101113BE8)
  {
    result = swift_getWitnessTable(aI_46, &type metadata for PrivacyAlertSupport.PrivacyAlertState);
    atomic_store(result, (unint64_t *)&qword_101113BE8);
  }
  return result;
}

uint64_t sub_100AF87E0(uint64_t a1)
{
  if ((unint64_t)(a1 + 1) < 7)
    return a1 + 1;
  else
    return 7;
}

unint64_t sub_100AF87F4()
{
  unint64_t result;

  result = qword_101113BF0;
  if (!qword_101113BF0)
  {
    result = swift_getWitnessTable(byte_100E5D830, &type metadata for PrivacyAlertSupport.PrivacyAlertState);
    atomic_store(result, (unint64_t *)&qword_101113BF0);
  }
  return result;
}

uint64_t sub_100AF8838()
{
  uint64_t v0;
  id *v1;
  id v2;

  if (*(_BYTE *)(v0 + 57) == 1)
  {
    v1 = (id *)(v0 + 16);
    switch(*(_BYTE *)(v0 + 56))
    {
      case 0:
      case 7:
      case 0xA:
        v2 = *v1;
        goto LABEL_10;
      case 1:
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
        return swift_deallocObject(v0, 58, 7);
      case 2:

        goto LABEL_9;
      case 3:

        return swift_deallocObject(v0, 58, 7);
      case 4:
      case 5:
      case 6:
        swift_release();
        return swift_deallocObject(v0, 58, 7);
      case 8:
        swift_release();
LABEL_9:
        v2 = *(id *)(v0 + 24);
LABEL_10:
        swift_errorRelease(v2);
        break;
      case 9:
        swift_bridgeObjectRelease();
        break;
      default:
        return swift_deallocObject(v0, 58, 7);
    }
  }
  return swift_deallocObject(v0, 58, 7);
}

uint64_t sub_100AF88D8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100AF8904()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100AF8928()
{
  uint64_t v0;

  swift_release();
  sub_100439C44(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_BYTE *)(v0 + 56));
  swift_release();
  return swift_deallocObject(v0, 72, 7);
}

uint64_t sub_100AF8964(void (*a1)(_OWORD *), uint64_t a2)
{
  uint64_t v2;

  return sub_100AF7738(a1, a2, *(_QWORD *)(v2 + 16), (__int128 *)(v2 + 24), *(char **)(v2 + 64));
}

uint64_t sub_100AF8974(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  void *v8;
  uint64_t v9;
  void (*v10)(_QWORD *, uint64_t, uint64_t);
  id v11;
  char v12;
  uint64_t (*v13)(_QWORD *, uint64_t);
  uint64_t result;
  id v15;
  char v16;
  uint64_t v17;
  _BYTE v18[16];

  v3 = *v1;
  v4 = type metadata accessor for DispatchPredicate(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = &v18[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = (void *)v1[3];
  *v7 = v8;
  v9 = enum case for DispatchPredicate.onQueue(_:);
  v10 = *(void (**)(_QWORD *, uint64_t, uint64_t))(v5 + 104);
  v10(v7, enum case for DispatchPredicate.onQueue(_:), v4);
  v11 = v8;
  v12 = _dispatchPreconditionTest(_:)(v7);
  v13 = *(uint64_t (**)(_QWORD *, uint64_t))(v5 + 8);
  result = v13(v7, v4);
  if ((v12 & 1) != 0)
  {
    *v7 = v11;
    v10(v7, v9, v4);
    v15 = v11;
    v16 = _dispatchPreconditionTest(_:)(v7);
    result = v13(v7, v4);
    if ((v16 & 1) != 0)
    {
      *((_BYTE *)v1 + 120) = 1;
      v17 = type metadata accessor for Transaction(0);
      __chkstk_darwin(v17);
      *(_QWORD *)&v18[-32] = v1;
      *(_QWORD *)&v18[-24] = a1;
      *(_QWORD *)&v18[-16] = v3;
      return static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd.PrivacyAlertSupport.primaryKey", 60, 2, sub_100AF90A4, &v18[-48], &type metadata for () + 1);
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_100AF8AF0()
{
  uint64_t v0;

  swift_release();
  sub_10001BC14(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100AF8B1C(void (*a1)(__int128 *), uint64_t a2)
{
  uint64_t v2;

  return sub_100AF6A54(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32));
}

unint64_t sub_100AF8B28()
{
  unint64_t result;

  result = qword_101113BF8;
  if (!qword_101113BF8)
  {
    result = swift_getWitnessTable(aM_40, &type metadata for PrivacyAlertSupport.PrivacyAlertSupportError);
    atomic_store(result, (unint64_t *)&qword_101113BF8);
  }
  return result;
}

unint64_t sub_100AF8B6C()
{
  unint64_t result;

  result = qword_101113C00;
  if (!qword_101113C00)
  {
    result = swift_getWitnessTable(byte_100E3DDA8, &type metadata for AccessoryOwnerCommand);
    atomic_store(result, &qword_101113C00);
  }
  return result;
}

uint64_t sub_100AF8BB0()
{
  uint64_t v0;

  sub_100439C44(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_BYTE *)(v0 + 48));
  return swift_deallocObject(v0, 49, 7);
}

uint64_t type metadata accessor for PrivacyAlertSupport.AlertInfo(uint64_t a1)
{
  uint64_t result;

  result = qword_101113D18;
  if (!qword_101113D18)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for PrivacyAlertSupport.AlertInfo);
  return result;
}

uint64_t sub_100AF8C18()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  unint64_t v12;

  v1 = type metadata accessor for PrivacyAlertSupport.AlertInfo(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_bridgeObjectRelease();
  v6 = v0 + v4 + *(int *)(v1 + 20);
  v7 = type metadata accessor for MACAddress(0);
  v8 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8);
  v8(v6, v7);
  v9 = v0 + v4 + *(int *)(v1 + 24);
  v8(v9, v7);
  v10 = type metadata accessor for BluetoothManagerDevice(0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v11 = (uint64_t *)(v9 + *(int *)(v10 + 36));
  v12 = v11[1];
  if (v12 >> 60 != 15)
    sub_10001BC14(*v11, v12);

  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_100AF8D34()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for PrivacyAlertSupport.AlertInfo(0) - 8) + 80);
  v3 = v0 + ((v2 + 16) & ~v2);
  v4 = (_QWORD *)swift_task_alloc(dword_101113C0C);
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_100004C28;
  v4[2] = v3;
  return swift_task_switch(sub_100AF62F4, 0, 0);
}

unint64_t sub_100AF8DAC()
{
  uint64_t v0;

  return sub_100AF6480(*(_QWORD *)(v0 + 16));
}

unint64_t sub_100AF8DB4()
{
  unint64_t result;

  result = qword_101113C18;
  if (!qword_101113C18)
  {
    result = swift_getWitnessTable(byte_100E2BBDC, &type metadata for VerifyFindMyNetworkIdResponseV2Payload.FindMyNetworkIdPairingStatus);
    atomic_store(result, (unint64_t *)&qword_101113C18);
  }
  return result;
}

uint64_t sub_100AF8DF8()
{
  uint64_t v0;
  id *v1;
  id v2;

  v1 = (id *)(v0 + 16);
  switch(*(_BYTE *)(v0 + 56))
  {
    case 0:
    case 7:
    case 0xA:
      v2 = *v1;
      goto LABEL_9;
    case 1:
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
      return swift_deallocObject(v0, 57, 7);
    case 2:

      goto LABEL_8;
    case 3:

      return swift_deallocObject(v0, 57, 7);
    case 4:
    case 5:
    case 6:
      swift_release();
      return swift_deallocObject(v0, 57, 7);
    case 8:
      swift_release();
LABEL_8:
      v2 = *(id *)(v0 + 24);
LABEL_9:
      swift_errorRelease(v2);
      break;
    case 9:
      swift_bridgeObjectRelease();
      break;
    default:
      return swift_deallocObject(v0, 57, 7);
  }
  return swift_deallocObject(v0, 57, 7);
}

uint64_t sub_100AF8E8C(void (*a1)(_QWORD *), uint64_t a2)
{
  uint64_t v2;

  return sub_100AF201C(a1, a2, (_QWORD *)(v2 + 16));
}

uint64_t sub_100AF8E94(uint64_t a1)
{
  uint64_t v1;

  return sub_100AF1034(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(void **)(v1 + 40), *(unsigned __int8 *)(v1 + 48));
}

uint64_t sub_100AF8EB8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = sub_100AF67B8(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  *a2 = result;
  return result;
}

uint64_t sub_100AF8EE4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  unint64_t v9;

  v1 = type metadata accessor for BluetoothManagerDevice(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_release();
  v6 = type metadata accessor for MACAddress(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v0 + v4, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v7 = (uint64_t *)(v0 + v4 + *(int *)(v1 + 36));
  v8 = v7[1];
  if (v8 >> 60 != 15)
    sub_10001BC14(*v7, v8);
  v9 = (v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8;

  return swift_deallocObject(v0, v9 + 9, v3 | 7);
}

void sub_100AF8FC8(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  v5 = *(_QWORD *)(type metadata accessor for BluetoothManagerDevice(0) - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = v2 + ((*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  sub_100AF209C(a1, v2 + v6, *(_QWORD *)v7, *(unsigned __int8 *)(v7 + 8), a2);
}

uint64_t sub_100AF903C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100AF9068@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = sub_100AF1CC8(a1, *(_QWORD *)(v2 + 24));
  *a2 = result;
  return result;
}

_QWORD *sub_100AF9098(uint64_t a1)
{
  uint64_t *v1;

  return sub_100AF1A68(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_100AF90A4(uint64_t a1)
{
  uint64_t v1;

  return sub_100AF06B0(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

unint64_t sub_100AF90C0()
{
  unint64_t result;

  result = qword_101113CA0;
  if (!qword_101113CA0)
  {
    result = swift_getWitnessTable(byte_100E6200C, &type metadata for GetPrimaryKeyPayload);
    atomic_store(result, (unint64_t *)&qword_101113CA0);
  }
  return result;
}

uint64_t sub_100AF9108(uint64_t a1)
{
  uint64_t *v1;

  return sub_100AF0C80(a1, v1[2], v1[3], v1[4]);
}

_QWORD *sub_100AF9114(_QWORD *a1, _QWORD *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t, __n128);
  __n128 v13;
  uint64_t v14;
  char *v15;
  char *v16;
  int *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  id v38;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v30 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v30 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for MACAddress(0);
    v12 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v11 - 8) + 16);
    v13 = swift_bridgeObjectRetain(v7);
    v12(v9, v10, v11, v13);
    v14 = a3[6];
    v15 = (char *)v4 + v14;
    v16 = (char *)a2 + v14;
    ((void (*)(char *, char *, uint64_t))v12)((char *)v4 + v14, (char *)a2 + v14, v11);
    v17 = (int *)type metadata accessor for BluetoothManagerDevice(0);
    v18 = v17[5];
    v19 = &v15[v18];
    v20 = &v16[v18];
    v21 = *((_QWORD *)v20 + 1);
    *(_QWORD *)v19 = *(_QWORD *)v20;
    *((_QWORD *)v19 + 1) = v21;
    *(_DWORD *)&v15[v17[6]] = *(_DWORD *)&v16[v17[6]];
    v22 = v17[7];
    v23 = &v15[v22];
    v24 = &v16[v22];
    v25 = *((_QWORD *)v24 + 1);
    *(_QWORD *)v23 = *(_QWORD *)v24;
    *((_QWORD *)v23 + 1) = v25;
    *(_DWORD *)&v15[v17[8]] = *(_DWORD *)&v16[v17[8]];
    v26 = v17[9];
    v27 = &v15[v26];
    v28 = (uint64_t *)&v16[v26];
    v29 = *(_QWORD *)&v16[v26 + 8];
    swift_bridgeObjectRetain(v21);
    swift_bridgeObjectRetain(v25);
    if (v29 >> 60 == 15)
    {
      *(_OWORD *)v27 = *(_OWORD *)v28;
    }
    else
    {
      v31 = *v28;
      sub_10001BBBC(*v28, v29);
      *(_QWORD *)v27 = v31;
      *((_QWORD *)v27 + 1) = v29;
    }
    v32 = v17[10];
    v33 = *(void **)&v16[v32];
    *(_QWORD *)&v15[v32] = v33;
    v34 = a3[8];
    *((_BYTE *)v4 + a3[7]) = *((_BYTE *)a2 + a3[7]);
    v35 = (_QWORD *)((char *)v4 + v34);
    v36 = (_QWORD *)((char *)a2 + v34);
    v37 = v36[1];
    *v35 = *v36;
    v35[1] = v37;
    v38 = v33;
    swift_bridgeObjectRetain(v37);
  }
  return v4;
}

uint64_t sub_100AF92AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  unint64_t v10;

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for MACAddress(0);
  v6 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v6(v4, v5);
  v7 = a1 + *(int *)(a2 + 24);
  v6(v7, v5);
  v8 = type metadata accessor for BluetoothManagerDevice(0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v9 = (uint64_t *)(v7 + *(int *)(v8 + 36));
  v10 = v9[1];
  if (v10 >> 60 != 15)
    sub_10001BC14(*v9, v10);

  return swift_bridgeObjectRelease();
}

_QWORD *sub_100AF9384(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t, __n128);
  __n128 v12;
  uint64_t v13;
  char *v14;
  char *v15;
  int *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  id v36;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a3[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for MACAddress(0);
  v11 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v10 - 8) + 16);
  v12 = swift_bridgeObjectRetain(v6);
  v11(v8, v9, v10, v12);
  v13 = a3[6];
  v14 = (char *)a1 + v13;
  v15 = (char *)a2 + v13;
  ((void (*)(char *, char *, uint64_t))v11)((char *)a1 + v13, (char *)a2 + v13, v10);
  v16 = (int *)type metadata accessor for BluetoothManagerDevice(0);
  v17 = v16[5];
  v18 = &v14[v17];
  v19 = &v15[v17];
  v20 = *((_QWORD *)v19 + 1);
  *(_QWORD *)v18 = *(_QWORD *)v19;
  *((_QWORD *)v18 + 1) = v20;
  *(_DWORD *)&v14[v16[6]] = *(_DWORD *)&v15[v16[6]];
  v21 = v16[7];
  v22 = &v14[v21];
  v23 = &v15[v21];
  v24 = *((_QWORD *)v23 + 1);
  *(_QWORD *)v22 = *(_QWORD *)v23;
  *((_QWORD *)v22 + 1) = v24;
  *(_DWORD *)&v14[v16[8]] = *(_DWORD *)&v15[v16[8]];
  v25 = v16[9];
  v26 = &v14[v25];
  v27 = (uint64_t *)&v15[v25];
  v28 = *(_QWORD *)&v15[v25 + 8];
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRetain(v24);
  if (v28 >> 60 == 15)
  {
    *(_OWORD *)v26 = *(_OWORD *)v27;
  }
  else
  {
    v29 = *v27;
    sub_10001BBBC(*v27, v28);
    *(_QWORD *)v26 = v29;
    *((_QWORD *)v26 + 1) = v28;
  }
  v30 = v16[10];
  v31 = *(void **)&v15[v30];
  *(_QWORD *)&v14[v30] = v31;
  v32 = a3[8];
  *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
  v33 = (_QWORD *)((char *)a1 + v32);
  v34 = (_QWORD *)((char *)a2 + v32);
  v35 = v34[1];
  *v33 = *v34;
  v33[1] = v35;
  v36 = v31;
  swift_bridgeObjectRetain(v35);
  return a1;
}

char *sub_100AF94F0(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  char *v13;
  char *v14;
  int *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  void *v33;
  void *v34;
  id v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = *((_QWORD *)a2 + 1);
  *((_QWORD *)a1 + 1) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease();
  v7 = a3[5];
  v8 = &a1[v7];
  v9 = &a2[v7];
  v10 = type metadata accessor for MACAddress(0);
  v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 24);
  v11(v8, v9, v10);
  v12 = a3[6];
  v13 = &a1[v12];
  v14 = &a2[v12];
  v11(&a1[v12], &a2[v12], v10);
  v15 = (int *)type metadata accessor for BluetoothManagerDevice(0);
  v16 = v15[5];
  v17 = &v13[v16];
  v18 = &v14[v16];
  *(_QWORD *)v17 = *(_QWORD *)v18;
  v19 = *((_QWORD *)v18 + 1);
  *((_QWORD *)v17 + 1) = v19;
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRelease();
  *(_DWORD *)&v13[v15[6]] = *(_DWORD *)&v14[v15[6]];
  v20 = v15[7];
  v21 = &v13[v20];
  v22 = &v14[v20];
  *(_QWORD *)v21 = *(_QWORD *)v22;
  v23 = *((_QWORD *)v22 + 1);
  *((_QWORD *)v21 + 1) = v23;
  swift_bridgeObjectRetain(v23);
  swift_bridgeObjectRelease();
  *(_DWORD *)&v13[v15[8]] = *(_DWORD *)&v14[v15[8]];
  v24 = v15[9];
  v25 = (uint64_t *)&v13[v24];
  v26 = (uint64_t *)&v14[v24];
  v27 = *(_QWORD *)&v14[v24 + 8];
  if (*(_QWORD *)&v13[v24 + 8] >> 60 != 15)
  {
    if (v27 >> 60 != 15)
    {
      v29 = *v26;
      sub_10001BBBC(v29, v27);
      v30 = *v25;
      v31 = v25[1];
      *v25 = v29;
      v25[1] = v27;
      sub_10001BC14(v30, v31);
      goto LABEL_8;
    }
    sub_10015B504((uint64_t)v25);
    goto LABEL_6;
  }
  if (v27 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)v25 = *(_OWORD *)v26;
    goto LABEL_8;
  }
  v28 = *v26;
  sub_10001BBBC(v28, v27);
  *v25 = v28;
  v25[1] = v27;
LABEL_8:
  v32 = v15[10];
  v33 = *(void **)&v13[v32];
  v34 = *(void **)&v14[v32];
  *(_QWORD *)&v13[v32] = v34;
  v35 = v34;

  a1[a3[7]] = a2[a3[7]];
  v36 = a3[8];
  v37 = &a1[v36];
  v38 = &a2[v36];
  *(_QWORD *)v37 = *(_QWORD *)v38;
  v39 = *((_QWORD *)v38 + 1);
  *((_QWORD *)v37 + 1) = v39;
  swift_bridgeObjectRetain(v39);
  swift_bridgeObjectRelease();
  return a1;
}

char *sub_100AF96F0(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  char *v12;
  char *v13;
  int *v14;
  uint64_t v15;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for MACAddress(0);
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v11 = a3[6];
  v12 = &a1[v11];
  v13 = &a2[v11];
  v10(&a1[v11], &a2[v11], v9);
  v14 = (int *)type metadata accessor for BluetoothManagerDevice(0);
  *(_OWORD *)&v12[v14[5]] = *(_OWORD *)&v13[v14[5]];
  *(_DWORD *)&v12[v14[6]] = *(_DWORD *)&v13[v14[6]];
  *(_OWORD *)&v12[v14[7]] = *(_OWORD *)&v13[v14[7]];
  *(_DWORD *)&v12[v14[8]] = *(_DWORD *)&v13[v14[8]];
  *(_OWORD *)&v12[v14[9]] = *(_OWORD *)&v13[v14[9]];
  *(_QWORD *)&v12[v14[10]] = *(_QWORD *)&v13[v14[10]];
  v15 = a3[8];
  a1[a3[7]] = a2[a3[7]];
  *(_OWORD *)&a1[v15] = *(_OWORD *)&a2[v15];
  return a1;
}

char *sub_100AF97E8(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  char *v13;
  char *v14;
  int *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  char *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;

  v6 = *((_QWORD *)a2 + 1);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *((_QWORD *)a1 + 1) = v6;
  swift_bridgeObjectRelease();
  v7 = a3[5];
  v8 = &a1[v7];
  v9 = &a2[v7];
  v10 = type metadata accessor for MACAddress(0);
  v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 40);
  v11(v8, v9, v10);
  v12 = a3[6];
  v13 = &a1[v12];
  v14 = &a2[v12];
  v11(&a1[v12], &a2[v12], v10);
  v15 = (int *)type metadata accessor for BluetoothManagerDevice(0);
  v16 = v15[5];
  v17 = &v13[v16];
  v18 = &v14[v16];
  v20 = *(_QWORD *)v18;
  v19 = *((_QWORD *)v18 + 1);
  *(_QWORD *)v17 = v20;
  *((_QWORD *)v17 + 1) = v19;
  swift_bridgeObjectRelease();
  *(_DWORD *)&v13[v15[6]] = *(_DWORD *)&v14[v15[6]];
  v21 = v15[7];
  v22 = &v13[v21];
  v23 = &v14[v21];
  v25 = *(_QWORD *)v23;
  v24 = *((_QWORD *)v23 + 1);
  *(_QWORD *)v22 = v25;
  *((_QWORD *)v22 + 1) = v24;
  swift_bridgeObjectRelease();
  *(_DWORD *)&v13[v15[8]] = *(_DWORD *)&v14[v15[8]];
  v26 = v15[9];
  v27 = (uint64_t *)&v13[v26];
  v28 = (uint64_t *)&v14[v26];
  v29 = *(_QWORD *)&v13[v26 + 8];
  if (v29 >> 60 != 15)
  {
    v30 = v28[1];
    if (v30 >> 60 != 15)
    {
      v31 = *v27;
      *v27 = *v28;
      v27[1] = v30;
      sub_10001BC14(v31, v29);
      goto LABEL_6;
    }
    sub_10015B504((uint64_t)v27);
  }
  *(_OWORD *)v27 = *(_OWORD *)v28;
LABEL_6:
  v32 = v15[10];
  v33 = *(void **)&v13[v32];
  *(_QWORD *)&v13[v32] = *(_QWORD *)&v14[v32];

  v34 = a3[8];
  a1[a3[7]] = a2[a3[7]];
  v35 = &a1[v34];
  v36 = (uint64_t *)&a2[v34];
  v38 = *v36;
  v37 = v36[1];
  *(_QWORD *)v35 = v38;
  *((_QWORD *)v35 + 1) = v37;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100AF9968(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100AF9974);
}

uint64_t sub_100AF9974(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for MACAddress(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 20);
    }
    else
    {
      v10 = type metadata accessor for BluetoothManagerDevice(0);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 24);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t sub_100AF9A14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100AF9A20);
}

uint64_t sub_100AF9A20(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 8) = (a2 - 1);
  }
  else
  {
    v8 = type metadata accessor for MACAddress(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 20);
    }
    else
    {
      v10 = type metadata accessor for BluetoothManagerDevice(0);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 24);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

uint64_t sub_100AF9ABC(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[5];

  v5[0] = &unk_100E5D8E0;
  result = type metadata accessor for MACAddress(319);
  if (v3 <= 0x3F)
  {
    v5[1] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for BluetoothManagerDevice(319);
    if (v4 <= 0x3F)
    {
      v5[2] = *(_QWORD *)(result - 8) + 64;
      v5[3] = &unk_100E5D8F8;
      v5[4] = &unk_100E5D910;
      swift_initStructMetadata(a1, 256, 5, v5, a1 + 16);
      return 0;
    }
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for PrivacyAlertSupport.PrivacyAlertSupportError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_100AF9BAC + 4 * byte_100E5D6BC[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100AF9BE0 + 4 * byte_100E5D6B7[v4]))();
}

uint64_t sub_100AF9BE0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100AF9BE8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100AF9BF0);
  return result;
}

uint64_t sub_100AF9BFC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100AF9C04);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_100AF9C08(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100AF9C10(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PrivacyAlertSupport.PrivacyAlertSupportError()
{
  return &type metadata for PrivacyAlertSupport.PrivacyAlertSupportError;
}

unint64_t sub_100AF9C30()
{
  unint64_t result;

  result = qword_101113D60;
  if (!qword_101113D60)
  {
    result = swift_getWitnessTable(byte_100E5D98C, &type metadata for PrivacyAlertSupport.PrivacyAlertSupportError);
    atomic_store(result, (unint64_t *)&qword_101113D60);
  }
  return result;
}

uint64_t sub_100AF9C78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100AF9C84);
}

uint64_t sub_100AF9C84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_100AF9D00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100AF9D0C);
}

uint64_t sub_100AF9D0C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for FindMyAccessoryFamilyKeyEnvelope(uint64_t a1)
{
  uint64_t result;

  result = qword_101113DC0;
  if (!qword_101113DC0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for FindMyAccessoryFamilyKeyEnvelope);
  return result;
}

uint64_t sub_100AF9DC0(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t MyAccessoryFamilyKeyEnvelope;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  char v19;
  uint64_t v20;

  v3 = v1;
  v5 = sub_10001A9A8(&qword_101113E10);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  v11 = sub_100AFA340();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for FindMyAccessoryFamilyKeyEnvelope.CodingKeys, &type metadata for FindMyAccessoryFamilyKeyEnvelope.CodingKeys, v11, v9, v10);
  LOBYTE(v20) = 0;
  v12 = type metadata accessor for UUID(0);
  v13 = sub_100006204(&qword_1010EDAC0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v3, &v20, v5, v12, v13);
  if (!v2)
  {
    MyAccessoryFamilyKeyEnvelope = type metadata accessor for FindMyAccessoryFamilyKeyEnvelope(0);
    v20 = *(_QWORD *)(v3 + *(int *)(MyAccessoryFamilyKeyEnvelope + 20));
    v19 = 1;
    v15 = sub_10001A9A8(&qword_1010FB020);
    v16 = sub_1003EF044(&qword_1010FB028, &qword_1010FB030, (uint64_t)&unk_100E487E0, (const char *)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v20, &v19, v5, v15, v16);
    v20 = *(_QWORD *)(v3 + *(int *)(MyAccessoryFamilyKeyEnvelope + 24));
    v19 = 2;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v20, &v19, v5, v15, v16);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100AF9FA0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t MyAccessoryFamilyKeyEnvelope;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  char *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, _QWORD *, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  char v36;
  uint64_t v37;

  v30 = a2;
  v31 = type metadata accessor for UUID(0);
  v3 = *(_QWORD *)(v31 - 8);
  __chkstk_darwin(v31);
  v32 = (uint64_t *)((char *)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v33 = sub_10001A9A8(&qword_101113E00);
  v5 = *(_QWORD *)(v33 - 8);
  __chkstk_darwin(v33);
  v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MyAccessoryFamilyKeyEnvelope = type metadata accessor for FindMyAccessoryFamilyKeyEnvelope(0);
  __chkstk_darwin(MyAccessoryFamilyKeyEnvelope);
  v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v11 = a1[4];
  sub_10001AA44(a1, v12);
  v13 = sub_100AFA340();
  v34 = v7;
  v14 = v35;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for FindMyAccessoryFamilyKeyEnvelope.CodingKeys, &type metadata for FindMyAccessoryFamilyKeyEnvelope.CodingKeys, v13, v12, v11);
  if (v14)
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  v35 = MyAccessoryFamilyKeyEnvelope;
  v15 = a1;
  v16 = v10;
  LOBYTE(v37) = 0;
  v17 = sub_100006204((unint64_t *)&qword_1010EDA90, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v19 = v31;
  v18 = v32;
  v20 = v33;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v32, v31, &v37, v33, v31, v17);
  v29 = v3;
  v21 = *(void (**)(char *, _QWORD *, uint64_t))(v3 + 32);
  v22 = (uint64_t)v16;
  v21(v16, v18, v19);
  v23 = sub_10001A9A8(&qword_1010FB020);
  v36 = 1;
  v24 = sub_1003EF044(&qword_1010FB078, &qword_1010FB080, (uint64_t)&unk_100E48808, (const char *)&protocol conformance descriptor for <A> [A]);
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v37, v23, &v36, v20, v23, v24);
  v25 = v24;
  v26 = v35;
  *(_QWORD *)(v22 + *(int *)(v35 + 20)) = v37;
  v36 = 2;
  v27 = v34;
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v37, v23, &v36, v20, v23, v25);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v27, v33);
  *(_QWORD *)(v22 + *(int *)(v26 + 24)) = v37;
  sub_100AFA384(v22, v30);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v15);
  return sub_100AFA3C8(v22);
}

uint64_t sub_100AFA2C8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100AFA340();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100AFA2F0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100AFA340();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100AFA318@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100AF9FA0(a1, a2);
}

uint64_t sub_100AFA32C(_QWORD *a1)
{
  return sub_100AF9DC0(a1);
}

unint64_t sub_100AFA340()
{
  unint64_t result;

  result = qword_101113E08;
  if (!qword_101113E08)
  {
    result = swift_getWitnessTable(byte_100E5DB58, &type metadata for FindMyAccessoryFamilyKeyEnvelope.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101113E08);
  }
  return result;
}

uint64_t sub_100AFA384(uint64_t a1, uint64_t a2)
{
  uint64_t MyAccessoryFamilyKeyEnvelope;

  MyAccessoryFamilyKeyEnvelope = type metadata accessor for FindMyAccessoryFamilyKeyEnvelope(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(MyAccessoryFamilyKeyEnvelope - 8) + 16))(a2, a1, MyAccessoryFamilyKeyEnvelope);
  return a2;
}

uint64_t sub_100AFA3C8(uint64_t a1)
{
  uint64_t MyAccessoryFamilyKeyEnvelope;

  MyAccessoryFamilyKeyEnvelope = type metadata accessor for FindMyAccessoryFamilyKeyEnvelope(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(MyAccessoryFamilyKeyEnvelope - 8) + 8))(a1, MyAccessoryFamilyKeyEnvelope);
  return a1;
}

uint64_t storeEnumTagSinglePayload for FindMyAccessoryFamilyKeyEnvelope.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_100AFA450 + 4 * byte_100E5DA15[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_100AFA484 + 4 * byte_100E5DA10[v4]))();
}

uint64_t sub_100AFA484(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100AFA48C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100AFA494);
  return result;
}

uint64_t sub_100AFA4A0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100AFA4A8);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_100AFA4AC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100AFA4B4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FindMyAccessoryFamilyKeyEnvelope.CodingKeys()
{
  return &type metadata for FindMyAccessoryFamilyKeyEnvelope.CodingKeys;
}

unint64_t sub_100AFA4D4()
{
  unint64_t result;

  result = qword_101113E18;
  if (!qword_101113E18)
  {
    result = swift_getWitnessTable(byte_100E5DB30, &type metadata for FindMyAccessoryFamilyKeyEnvelope.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101113E18);
  }
  return result;
}

unint64_t sub_100AFA51C()
{
  unint64_t result;

  result = qword_101113E20;
  if (!qword_101113E20)
  {
    result = swift_getWitnessTable(aY_71, &type metadata for FindMyAccessoryFamilyKeyEnvelope.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101113E20);
  }
  return result;
}

unint64_t sub_100AFA564()
{
  unint64_t result;

  result = qword_101113E28;
  if (!qword_101113E28)
  {
    result = swift_getWitnessTable(aA_54, &type metadata for FindMyAccessoryFamilyKeyEnvelope.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101113E28);
  }
  return result;
}

uint64_t sub_100AFA5A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_1000234D8(v0, qword_1011B7C28);
  v1 = sub_10001A9E8(v0, (uint64_t)qword_1011B7C28);
  if (qword_1010EA620 != -1)
    swift_once(&qword_1010EA620, sub_100DC7BE8);
  v2 = sub_10001A9E8(v0, (uint64_t)qword_1011B8520);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_100AFA638()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  unint64_t v3;

  v1[5] = v0;
  v2 = sub_10001A9A8(&qword_1010F46C0);
  v1[6] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = (*(_QWORD *)(*(_QWORD *)(sub_10001A9A8((uint64_t *)&unk_101107EF0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[7] = swift_task_alloc(v3);
  v1[8] = swift_task_alloc(v3);
  return swift_task_switch(sub_100AFA6C8, v0, 0);
}

uint64_t sub_100AFA6C8()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v2 = (_QWORD *)swift_task_alloc(v1);
  v0[9] = v2;
  v3 = sub_10001A9A8(&qword_1010FAA80);
  v0[10] = v3;
  *v2 = v0;
  v2[1] = sub_100AFA744;
  return unsafeBlocking<A>(_:)(v0[8], sub_100AFC2F4, v0[5], v3);
}

uint64_t sub_100AFA744()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 40);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 72));
  swift_release();
  return swift_task_switch(sub_100AFA7A4, v1, 0);
}

uint64_t sub_100AFA7A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v1 = *(_QWORD *)(v0 + 56);
  v2 = *(_QWORD *)(v0 + 64);
  v4 = *(_QWORD *)(v0 + 40);
  v3 = *(_QWORD *)(v0 + 48);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(*(_QWORD *)(v0 + 80) - 8) + 56))(v2, 0, 1);
  sub_100AFC2FC(v2, v1);
  v5 = v4 + OBJC_IVAR____TtC12searchpartyd31OwnDevicePublishActivityService_configurationSubscription;
  swift_beginAccess(v4 + OBJC_IVAR____TtC12searchpartyd31OwnDevicePublishActivityService_configurationSubscription, v0 + 16, 33, 0);
  sub_10013934C(v1, v5);
  swift_endAccess(v0 + 16);
  v6 = type metadata accessor for TaskPriority(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v3, 1, 1, v6);
  v7 = sub_100006204(&qword_101113F68, type metadata accessor for OwnDevicePublishActivityService, (uint64_t)&unk_100E5DC64);
  v8 = (_QWORD *)swift_allocObject(&unk_1010AB540, 40, 7);
  v8[2] = v4;
  v8[3] = v7;
  v8[4] = v4;
  swift_retain_n(v4, 2);
  sub_100691AC0(v3, (uint64_t)&unk_101113F88, (uint64_t)v8);
  swift_release();
  swift_task_dealloc(v2);
  swift_task_dealloc(v1);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100AFA8E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD v5[5];

  if (qword_1010E9D08 != -1)
    swift_once(&qword_1010E9D08, sub_10059A6E0);
  v5[3] = type metadata accessor for OwnDevicePublishActivityService(0);
  v5[4] = &off_1010AB488;
  v5[0] = a1;
  swift_retain();
  sub_1000995F8((uint64_t)v5, a2);
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v5);
}

uint64_t sub_100AFA978(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v4;
  uint64_t v6;

  v4[2] = a4;
  v4[3] = *a4;
  v6 = type metadata accessor for DispatchQoS(0);
  v4[4] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100AFA9DC, a4, 0);
}

uint64_t sub_100AFA9DC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v1 = v0[3];
  v2 = v0[2];
  v3 = type metadata accessor for XPCActivity(0);
  static DispatchQoS.background.getter(v3);
  v4 = swift_allocObject(&unk_1010AB568, 24, 7);
  *(_QWORD *)(v4 + 16) = v1;
  v5 = swift_allocObject(&unk_1010AB590, 32, 7);
  *(_QWORD *)(v5 + 16) = v2;
  *(_QWORD *)(v5 + 24) = v1;
  v6 = async function pointer to XPCActivity.__allocating_init(name:qos:criteriaBlock:handler:)[1];
  swift_retain();
  v7 = (_QWORD *)swift_task_alloc(v6);
  v0[5] = v7;
  *v7 = v0;
  v7[1] = sub_100AFAAC8;
  return XPCActivity.__allocating_init(name:qos:criteriaBlock:handler:)(0xD000000000000027, 0x8000000100EEE840, v0[4], &unk_101113F98, v4, &unk_101113FA8, v5);
}

uint64_t sub_100AFAAC8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 40);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  *(_QWORD *)(*(_QWORD *)v1 + 48) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100AFAB28, v3, 0);
}

uint64_t sub_100AFAB28()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 32);
  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v2 + OBJC_IVAR____TtC12searchpartyd31OwnDevicePublishActivityService_activity);
  *(_QWORD *)(v2 + OBJC_IVAR____TtC12searchpartyd31OwnDevicePublishActivityService_activity) = *(_QWORD *)(v0 + 48);
  swift_release(v3);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100AFAB78(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2[4] = a1;
  v2[5] = a2;
  v3 = type metadata accessor for XPCActivity.Criteria.Options(0);
  v2[6] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[7] = v4;
  v2[8] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for XPCActivity.Priority(0);
  v2[9] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v2[10] = v6;
  v2[11] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10001A9A8(&qword_1010FDCF8);
  v2[12] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for XPCActivity.Criteria(0);
  v2[13] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v2[14] = v9;
  v2[15] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100AFAC4C, 0, 0);
}

uint64_t sub_100AFAC4C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  if (qword_1010E9D08 != -1)
    swift_once(&qword_1010E9D08, sub_10059A6E0);
  v1 = qword_1011B71A8;
  *(_QWORD *)(v0 + 128) = qword_1011B71A8;
  v2 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v3 = (_QWORD *)swift_task_alloc(v2);
  *(_QWORD *)(v0 + 136) = v3;
  *v3 = v0;
  v3[1] = sub_100AFACFC;
  return unsafeBlocking<A>(_:)(v0 + 16, sub_100033264, v1, &type metadata for Configuration);
}

uint64_t sub_100AFACFC()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 136));
  swift_release();
  return swift_task_switch(sub_100AFAD58, 0, 0);
}

uint64_t sub_100AFAD58()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  double v24;
  double v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(uint64_t, uint64_t, uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v49;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = (void *)sub_100C1B0B8(v1);
  v3 = SPServiceStateEnabled;
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  v6 = v5;
  v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
  if (v4 == v7 && v6 == v8)
  {
    swift_bridgeObjectRelease_n(v6, 2);

LABEL_11:
    v17 = *(_QWORD *)(v0 + 104);
    v18 = *(_QWORD *)(v0 + 112);
    v19 = *(_QWORD *)(v0 + 96);
    sub_10000F9B8(*(_QWORD *)(v0 + 40), v19, &qword_1010FDCF8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))(v19, 1, v17) != 1)
    {
      v39 = *(_QWORD *)(v0 + 112);
      v38 = *(_QWORD *)(v0 + 120);
      v41 = *(_QWORD *)(v0 + 96);
      v40 = *(_QWORD *)(v0 + 104);
      v42 = *(_QWORD *)(v0 + 32);
      swift_bridgeObjectRelease();
      v43 = *(void (**)(uint64_t, uint64_t, uint64_t))(v39 + 32);
      v43(v38, v41, v40);
      v43(v42, v38, v40);
      goto LABEL_20;
    }
    v20 = *(_QWORD *)(v0 + 88);
    v21 = *(_QWORD *)(v0 + 72);
    v22 = *(_QWORD *)(v0 + 80);
    sub_100004048(*(_QWORD *)(v0 + 96), &qword_1010FDCF8);
    sub_100C1BD9C(v1);
    v24 = v23;
    sub_100C1BD90(v1);
    v26 = v25;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v22 + 104))(v20, enum case for XPCActivity.Priority.utility(_:), v21);
    if (v24 <= -9.22337204e18)
    {
      __break(1u);
    }
    else if (v24 < 9.22337204e18)
    {
      if ((*(_QWORD *)&v24 & 0x7FF0000000000000) != 0x7FF0000000000000
        && (*(_QWORD *)&v26 & 0x7FF0000000000000) != 0x7FF0000000000000)
      {
        if (v26 > -9.22337204e18)
        {
          if (v26 < 9.22337204e18)
          {
            v49 = *(_QWORD *)(v0 + 88);
            v28 = *(_QWORD *)(v0 + 56);
            v27 = *(_QWORD *)(v0 + 64);
            v29 = *(_QWORD *)(v0 + 48);
            v30 = sub_10001A9A8(&qword_1010FDD00);
            v31 = swift_allocObject(v30, ((*(unsigned __int8 *)(v28 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v28 + 80))+ 4 * *(_QWORD *)(v28 + 72), *(unsigned __int8 *)(v28 + 80) | 7);
            *(_OWORD *)(v31 + 16) = xmmword_100E26E00;
            v32 = static XPCActivity.Criteria.Options.allowBattery.getter(v31);
            v33 = static XPCActivity.Criteria.Options.requiresClassC.getter(v32);
            v34 = static XPCActivity.Criteria.Options.requiresNetwork.getter(v33);
            static XPCActivity.Criteria.Options.preventDeviceSleep.getter(v34);
            *(_QWORD *)(v0 + 24) = v31;
            v35 = sub_100006204(&qword_1010EBEB8, (uint64_t (*)(uint64_t))&type metadata accessor for XPCActivity.Criteria.Options, (uint64_t)&protocol conformance descriptor for XPCActivity.Criteria.Options);
            v36 = sub_10001A9A8(&qword_1010FDD08);
            v37 = sub_1004EF218();
            dispatch thunk of SetAlgebra.init<A>(_:)(v0 + 24, v36, v37, v29, v35);
            XPCActivity.Criteria.init(priority:repeating:delay:gracePeriod:interval:options:)(v49, 1, 0, (uint64_t)v24, (uint64_t)v26, v27);
LABEL_20:
            v16 = 0;
            goto LABEL_21;
          }
LABEL_26:
          __break(1u);
          goto LABEL_27;
        }
LABEL_25:
        __break(1u);
        goto LABEL_26;
      }
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    __break(1u);
    goto LABEL_24;
  }
  v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v6, v7, v8, 0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  if ((v10 & 1) != 0)
    goto LABEL_11;
  swift_bridgeObjectRelease();
  if (qword_1010EA1B0 != -1)
LABEL_27:
    swift_once(&qword_1010EA1B0, sub_100AFA5A8);
  v11 = type metadata accessor for Logger(0);
  v12 = sub_10001A9E8(v11, (uint64_t)qword_1011B7C28);
  v13 = Logger.logObject.getter(v12);
  v14 = static os_log_type_t.default.getter(v13);
  if (os_log_type_enabled(v13, v14))
  {
    v15 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v15 = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Service disabled, not registering own device publish activity.", v15, 2u);
    swift_slowDealloc(v15, -1, -1);
  }

  v16 = 1;
LABEL_21:
  v44 = *(_QWORD *)(v0 + 120);
  v45 = *(_QWORD *)(v0 + 96);
  v46 = *(_QWORD *)(v0 + 88);
  v47 = *(_QWORD *)(v0 + 64);
  (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 112) + 56))(*(_QWORD *)(v0 + 32), v16, 1, *(_QWORD *)(v0 + 104));
  swift_task_dealloc(v44);
  swift_task_dealloc(v45);
  swift_task_dealloc(v46);
  swift_task_dealloc(v47);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100AFB168(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v3[18] = a2;
  v3[19] = a3;
  v3[17] = a1;
  v5 = sub_10001A9A8(&qword_1010FDD38);
  v3[20] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for XPCActivity.State(0);
  v3[21] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[22] = v7;
  v8 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[23] = swift_task_alloc(v8);
  v3[24] = swift_task_alloc(v8);
  return swift_task_switch(sub_100AFB204, a3, 0);
}

uint64_t sub_100AFB204()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  _BOOL4 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  void (*v19)(uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t result;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(uint64_t, uint64_t, uint64_t);
  uint64_t (__cdecl *v34)();
  uint64_t v35;

  if (qword_1010EA1B0 != -1)
    swift_once(&qword_1010EA1B0, sub_100AFA5A8);
  v1 = *(_QWORD *)(v0 + 192);
  v2 = *(_QWORD *)(v0 + 168);
  v3 = *(_QWORD *)(v0 + 176);
  v4 = *(_QWORD *)(v0 + 144);
  v5 = type metadata accessor for Logger(0);
  sub_10001A9E8(v5, (uint64_t)qword_1011B7C28);
  v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v7 = v6(v1, v4, v2);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter(v8);
  v10 = os_log_type_enabled(v8, v9);
  v11 = *(_QWORD *)(v0 + 192);
  v12 = *(_QWORD *)(v0 + 168);
  v13 = *(_QWORD *)(v0 + 176);
  if (v10)
  {
    v14 = (uint8_t *)swift_slowAlloc(12, -1);
    v33 = v6;
    v35 = swift_slowAlloc(32, -1);
    v15 = v35;
    *(_DWORD *)v14 = 136315138;
    v16 = sub_100006204(&qword_1010EBE98, (uint64_t (*)(uint64_t))&type metadata accessor for XPCActivity.State, (uint64_t)&protocol conformance descriptor for XPCActivity.State);
    v17 = dispatch thunk of CustomStringConvertible.description.getter(v12, v16);
    *(_QWORD *)(v0 + 128) = sub_100016940(v17, v18, &v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 128, v0 + 136, v14 + 4, v14 + 12);
    swift_bridgeObjectRelease();
    v19 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
    v19(v11, v12);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Own device publish activity state: %s.", v14, 0xCu);
    swift_arrayDestroy(v15, 1, (char *)&type metadata for Any + 8);
    v20 = v15;
    v6 = v33;
    swift_slowDealloc(v20, -1, -1);
    swift_slowDealloc(v14, -1, -1);
  }
  else
  {
    v19 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
    v19(*(_QWORD *)(v0 + 192), *(_QWORD *)(v0 + 168));
  }

  v22 = *(_QWORD *)(v0 + 176);
  v21 = *(_QWORD *)(v0 + 184);
  v23 = *(_QWORD *)(v0 + 168);
  v6(v21, *(_QWORD *)(v0 + 144), v23);
  v24 = (*(uint64_t (**)(uint64_t, uint64_t))(v22 + 88))(v21, v23);
  if (v24 == enum case for XPCActivity.State.checkIn(_:) || v24 == enum case for XPCActivity.State.wait(_:))
  {
LABEL_19:
    v31 = *(_QWORD *)(v0 + 184);
    v32 = *(_QWORD *)(v0 + 160);
    swift_task_dealloc(*(_QWORD *)(v0 + 192));
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  if (v24 != enum case for XPCActivity.State.run(_:))
  {
    if (v24 == enum case for XPCActivity.State.defer(_:))
    {
      v27 = type metadata accessor for XPCActivity(0);
      v28 = sub_100006204(&qword_1010EBE90, (uint64_t (*)(uint64_t))&type metadata accessor for XPCActivity, (uint64_t)&protocol conformance descriptor for XPCActivity);
      v29 = dispatch thunk of Actor.unownedExecutor.getter(v27, v28);
      return swift_task_switch(sub_100AFB624, v29, v30);
    }
    if (v24 != enum case for XPCActivity.State.continue(_:)
      && v24 != enum case for XPCActivity.State.done(_:)
      && v24 != enum case for XPCActivity.State.invalidated(_:))
    {
      v19(*(_QWORD *)(v0 + 184), *(_QWORD *)(v0 + 168));
    }
    goto LABEL_19;
  }
  if (qword_1010EA5B0 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v0 + 96, 0, 0);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 56, &qword_1010EE220);
  if (*(_QWORD *)(v0 + 80))
  {
    sub_10000F9FC((__int128 *)(v0 + 56), v0 + 16);
    sub_10001AA44((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
    v34 = (uint64_t (__cdecl *)())((char *)&dword_1010EBCE8 + dword_1010EBCE8);
    v26 = (_QWORD *)swift_task_alloc(unk_1010EBCEC);
    *(_QWORD *)(v0 + 200) = v26;
    *v26 = v0;
    v26[1] = sub_100AFB664;
    return v34();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100AFB624()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 152);
  dispatch thunk of XPCActivity.defer()();
  return swift_task_switch(sub_100AFC4BC, v1, 0);
}

uint64_t sub_100AFB664(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 200);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 152);
  *(_QWORD *)(*(_QWORD *)v1 + 208) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100AFB6C4, v3, 0);
}

uint64_t sub_100AFB6C4()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;

  v1 = v0 + 2;
  if (v0[26])
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    v2 = (_QWORD *)swift_task_alloc(dword_10110181C);
    v0[27] = v2;
    *v2 = v0;
    v2[1] = sub_100AFB770;
    return sub_10061A894();
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    if (qword_1010E9D08 != -1)
      swift_once(&qword_1010E9D08, sub_10059A6E0);
    v0[28] = qword_1011B71A8;
    return swift_task_switch(sub_100AFB7EC, 0, 0);
  }
}

uint64_t sub_100AFB770()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  swift_task_dealloc(*(_QWORD *)(*v1 + 216));
  swift_release();
  v3 = *(_QWORD *)(v2 + 152);
  if (v0)
  {
    swift_errorRelease(v0);
    v4 = sub_100AFBC14;
  }
  else
  {
    v4 = sub_100AFC4B8;
  }
  return swift_task_switch(v4, v3, 0);
}

uint64_t sub_100AFB7EC()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v2 = (_QWORD *)swift_task_alloc(v1);
  *(_QWORD *)(v0 + 232) = v2;
  *v2 = v0;
  v2[1] = sub_100AFB860;
  return unsafeBlocking<A>(_:)(v0 + 120, sub_100033264, *(_QWORD *)(v0 + 224), &type metadata for Configuration);
}

uint64_t sub_100AFB860()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 232));
  swift_release();
  return swift_task_switch(sub_100AFB8BC, 0, 0);
}

uint64_t sub_100AFB8BC()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[19];
  v0[30] = v0[15];
  return swift_task_switch(sub_100AFB8D8, v1, 0);
}

uint64_t sub_100AFB8D8()
{
  _QWORD *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(_QWORD);

  v1 = (void *)sub_100C1B0B8(v0[30]);
  swift_bridgeObjectRelease();
  v2 = SPServiceStateDisabled;
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);
  v5 = v4;
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  if (v3 == v6 && v5 == v7)
  {
    swift_bridgeObjectRelease_n(v5, 2);

  }
  else
  {
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    if ((v9 & 1) == 0)
      goto LABEL_11;
  }
  v10 = *(_QWORD *)(v0[19] + OBJC_IVAR____TtC12searchpartyd31OwnDevicePublishActivityService_activity);
  v0[31] = v10;
  if (v10)
  {
    v11 = *((unsigned int *)&async function pointer to dispatch thunk of XPCActivity.updateCriteria() + 1);
    v19 = (uint64_t (*)(_QWORD))((char *)&async function pointer to dispatch thunk of XPCActivity.updateCriteria()
                                         + async function pointer to dispatch thunk of XPCActivity.updateCriteria());
    swift_retain();
    v12 = (_QWORD *)swift_task_alloc(v11);
    v0[32] = v12;
    *v12 = v0;
    v12[1] = sub_100AFBA90;
    return v19(v0[20]);
  }
  v14 = v0[20];
  (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD))(v0[22] + 56))(v14, 1, 1, v0[21]);
  sub_100004048(v14, &qword_1010FDD38);
LABEL_11:
  v15 = type metadata accessor for XPCActivity(0);
  v16 = sub_100006204(&qword_1010EBE90, (uint64_t (*)(uint64_t))&type metadata accessor for XPCActivity, (uint64_t)&protocol conformance descriptor for XPCActivity);
  v17 = dispatch thunk of Actor.unownedExecutor.getter(v15, v16);
  return swift_task_switch(sub_100AFBB90, v17, v18);
}

uint64_t sub_100AFBA90()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 152);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 256));
  swift_release();
  return swift_task_switch(sub_100AFBAF0, v1, 0);
}

uint64_t sub_100AFBAF0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = v0[20];
  (*(void (**)(uint64_t, _QWORD, uint64_t, _QWORD))(v0[22] + 56))(v1, 0, 1, v0[21]);
  sub_100004048(v1, &qword_1010FDD38);
  v2 = type metadata accessor for XPCActivity(0);
  v3 = sub_100006204(&qword_1010EBE90, (uint64_t (*)(uint64_t))&type metadata accessor for XPCActivity, (uint64_t)&protocol conformance descriptor for XPCActivity);
  v4 = dispatch thunk of Actor.unownedExecutor.getter(v2, v3);
  return swift_task_switch(sub_100AFBB90, v4, v5);
}

uint64_t sub_100AFBB90()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 152);
  dispatch thunk of XPCActivity.done()();
  return swift_task_switch(sub_100AFBBD0, v1, 0);
}

uint64_t sub_100AFBBD0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 184);
  v2 = *(_QWORD *)(v0 + 160);
  swift_task_dealloc(*(_QWORD *)(v0 + 192));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100AFBC14()
{
  uint64_t v0;

  if (qword_1010E9D08 != -1)
    swift_once(&qword_1010E9D08, sub_10059A6E0);
  *(_QWORD *)(v0 + 224) = qword_1011B71A8;
  return swift_task_switch(sub_100AFB7EC, 0, 0);
}

uint64_t sub_100AFBC7C()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  sub_100004048(v0 + OBJC_IVAR____TtC12searchpartyd31OwnDevicePublishActivityService_configurationSubscription, (uint64_t *)&unk_101107EF0);
  swift_release();
  swift_defaultActor_destroy(v0);
  return swift_defaultActor_deallocate(v0);
}

uint64_t sub_100AFBCC8()
{
  return type metadata accessor for OwnDevicePublishActivityService(0);
}

uint64_t type metadata accessor for OwnDevicePublishActivityService(uint64_t a1)
{
  uint64_t result;

  result = qword_101113E68;
  if (!qword_101113E68)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for OwnDevicePublishActivityService);
  return result;
}

void sub_100AFBD0C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[4];

  v4[1] = &unk_100E5DBF8;
  sub_100138FE0(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(v2 - 8) + 64;
    v4[3] = &unk_100E5DC10;
    swift_updateClassMetadata2(a1, 256, 4, v4, a1 + 80);
  }
}

uint64_t sub_100AFBD94()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_101113E7C);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_100004A74;
  return sub_100AFA638();
}

void sub_100AFBDD8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t KeyPath;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;

  v3 = v2;
  v6 = sub_10001A9A8(&qword_1010F46C0);
  __chkstk_darwin(v6);
  v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for AnyKeyPath(0);
  KeyPath = swift_getKeyPath(&unk_100E5DC90);
  LOBYTE(a2) = static AnyKeyPath.== infix(_:_:)(a2, KeyPath);
  swift_release();
  if ((a2 & 1) != 0)
  {
    if (qword_1010EA1B0 != -1)
      swift_once(&qword_1010EA1B0, sub_100AFA5A8);
    v10 = type metadata accessor for Logger(0);
    v11 = sub_10001A9E8(v10, (uint64_t)qword_1011B7C28);
    v12 = Logger.logObject.getter(v11);
    v13 = static os_log_type_t.default.getter(v12);
    if (os_log_type_enabled(v12, v13))
    {
      v14 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "service state changed. Reevaluating xpc activity.", v14, 2u);
      swift_slowDealloc(v14, -1, -1);
    }

    v15 = (void *)sub_100C1B0B8(a1);
    v16 = SPServiceStateEnabled;
    v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
    v19 = v18;
    v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
    if (v17 == v21 && v19 == v20)
    {
      swift_bridgeObjectRelease_n(v19, 2);

    }
    else
    {
      v22 = _stringCompareWithSmolCheck(_:_:expecting:)(v17, v19, v21, v20, 0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      if ((v22 & 1) == 0)
        return;
    }
    v23 = type metadata accessor for TaskPriority(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v8, 1, 1, v23);
    v24 = (_QWORD *)swift_allocObject(&unk_1010AB518, 40, 7);
    v24[2] = 0;
    v24[3] = 0;
    v24[4] = v3;
    swift_retain();
    sub_100691AC0((uint64_t)v8, (uint64_t)&unk_101113F78, (uint64_t)v24);
    swift_release();
  }
}

uint64_t sub_100AFC01C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;

  *(_QWORD *)(v4 + 16) = a4;
  v6 = sub_10001A9A8(&qword_1010FDD38);
  *(_QWORD *)(v4 + 24) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100AFC07C, a4, 0);
}

uint64_t sub_100AFC07C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(_QWORD);

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 16) + OBJC_IVAR____TtC12searchpartyd31OwnDevicePublishActivityService_activity);
  *(_QWORD *)(v0 + 32) = v1;
  if (v1)
  {
    v2 = *((unsigned int *)&async function pointer to dispatch thunk of XPCActivity.updateCriteria() + 1);
    v7 = (uint64_t (*)(_QWORD))((char *)&async function pointer to dispatch thunk of XPCActivity.updateCriteria()
                                        + async function pointer to dispatch thunk of XPCActivity.updateCriteria());
    swift_retain();
    v3 = (_QWORD *)swift_task_alloc(v2);
    *(_QWORD *)(v0 + 40) = v3;
    *v3 = v0;
    v3[1] = sub_100AFC15C;
    return v7(*(_QWORD *)(v0 + 24));
  }
  else
  {
    v5 = *(_QWORD *)(v0 + 24);
    v6 = type metadata accessor for XPCActivity.State(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
    sub_100004048(v5, &qword_1010FDD38);
    swift_task_dealloc(v5);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100AFC15C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 16);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 40));
  swift_release();
  return swift_task_switch(sub_100AFC1BC, v1, 0);
}

uint64_t sub_100AFC1BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 24);
  v2 = type metadata accessor for XPCActivity.State(0);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 0, 1, v2);
  sub_100004048(v1, &qword_1010FDD38);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_100AFC224(uint64_t a1, uint64_t a2)
{
  sub_100AFBDD8(a1, a2);
}

uint64_t sub_100AFC244(uint64_t a1)
{
  uint64_t result;

  result = sub_100006204(&qword_101113F68, type metadata accessor for OwnDevicePublishActivityService, (uint64_t)&unk_100E5DC64);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_100AFC288(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_101113F74);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_100004A74;
  return sub_100AFC01C(a1, v4, v5, v6);
}

uint64_t sub_100AFC2F4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100AFA8E4(v1, a1);
}

uint64_t sub_100AFC2FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001A9A8((uint64_t *)&unk_101107EF0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100AFC348(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = (_QWORD *)v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_101113F84);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_100004A74;
  return sub_100AFA978(a1, v4, v5, v6);
}

uint64_t sub_100AFC3B4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100AFC3C4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc(dword_101113F94);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_100004C28;
  return sub_100AFAB78(a1, a2);
}

uint64_t sub_100AFC42C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100AFC450(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  _QWORD *v7;

  v6 = *(_QWORD *)(v2 + 16);
  v7 = (_QWORD *)swift_task_alloc(dword_101113FA4);
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_100004A74;
  return sub_100AFB168(a1, a2, v6);
}

uint64_t sub_100AFC4C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v6;

  v0 = type metadata accessor for URL(0);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = __chkstk_darwin(v0);
  v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000234D8(v2, qword_1011B7C40);
  sub_10001A9E8(v0, (uint64_t)qword_1011B7C40);
  type metadata accessor for BeaconStore(0);
  sub_1007EC9B8((uint64_t)v4);
  URL.appendingPathComponent(_:isDirectory:)(0x52636E795379654BLL, 0xED000064726F6365, 1);
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v4, v0);
}

void sub_100AFC598(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  int *v5;
  uint64_t v6;
  Swift::UInt64 v7;
  Swift::UInt64 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  Swift::UInt64 v12;
  uint64_t v13;
  Swift::UInt v14;
  uint64_t v15;
  Swift::UInt v16;

  v3 = type metadata accessor for UUID(0);
  v4 = sub_100006204(&qword_1010F98B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(a1, v3, v4);
  v5 = (int *)type metadata accessor for KeySyncRecord(0);
  Hasher._combine(_:)(*(_QWORD *)(v1 + v5[5]));
  v6 = v1 + v5[6];
  if (*(_BYTE *)(v6 + 8) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v7 = *(_QWORD *)v6;
    Hasher._combine(_:)(1u);
    if ((v7 & 0x7FFFFFFFFFFFFFFFLL) != 0)
      v8 = v7;
    else
      v8 = 0;
    Hasher._combine(_:)(v8);
  }
  v9 = type metadata accessor for Date(0);
  v10 = sub_100006204((unint64_t *)&unk_1010ED800, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  dispatch thunk of Hashable.hash(into:)(a1, v9, v10);
  v11 = v1 + v5[8];
  if (*(_BYTE *)(v11 + 8) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v12 = *(_QWORD *)v11;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v12);
  }
  v13 = v1 + v5[9];
  if (*(_BYTE *)(v13 + 8) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v14 = *(_QWORD *)v13;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v14);
  }
  Hasher._combine(_:)(*(_QWORD *)(v1 + v5[10]));
  v15 = v1 + v5[11];
  if (*(_BYTE *)(v15 + 8) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v16 = *(_QWORD *)v15;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v16);
  }
}

uint64_t sub_100AFC760(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100AFC798 + 4 * byte_100E5DCB8[a1]))(0x696669746E656469, 0xEA00000000007265);
}

unint64_t sub_100AFC798()
{
  return 0xD000000000000011;
}

uint64_t sub_100AFC828()
{
  return 0x496C6C6F5279656BLL;
}

uint64_t sub_100AFC84C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  char v34;
  char v35;
  char v36;
  char v37;
  char v38;
  char v39;
  char v40;
  char v41;

  v3 = v1;
  v5 = sub_10001A9A8(&qword_101114060);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  v11 = sub_100AFD8CC();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for KeySyncRecord.CodingKeys, &type metadata for KeySyncRecord.CodingKeys, v11, v9, v10);
  v41 = 0;
  v12 = type metadata accessor for UUID(0);
  v13 = sub_100006204(&qword_1010EDAC0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v3, &v41, v5, v12, v13);
  if (!v2)
  {
    v14 = (int *)type metadata accessor for KeySyncRecord(0);
    v15 = *(_QWORD *)(v3 + v14[5]);
    v40 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v15, &v40, v5);
    v16 = (uint64_t *)(v3 + v14[6]);
    v17 = *v16;
    v18 = *((unsigned __int8 *)v16 + 8);
    v39 = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v17, v18, &v39, v5);
    v19 = v3 + v14[7];
    v38 = 3;
    v20 = type metadata accessor for Date(0);
    v21 = sub_100006204((unint64_t *)&unk_1010ED6F0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v19, &v38, v5, v20, v21);
    v22 = (uint64_t *)(v3 + v14[8]);
    v23 = *v22;
    v24 = *((unsigned __int8 *)v22 + 8);
    v37 = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v23, v24, &v37, v5);
    v25 = (uint64_t *)(v3 + v14[9]);
    v26 = *v25;
    v27 = *((unsigned __int8 *)v25 + 8);
    v36 = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v26, v27, &v36, v5);
    v28 = *(_QWORD *)(v3 + v14[10]);
    v35 = 6;
    KeyedEncodingContainer.encode(_:forKey:)(v28, &v35, v5);
    v29 = (uint64_t *)(v3 + v14[11]);
    v30 = *v29;
    v31 = *((unsigned __int8 *)v29 + 8);
    v34 = 7;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v30, v31, &v34, v5);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100AFCAFC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  char v31;
  uint64_t v32;
  uint64_t *v33;
  char v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v42;
  _QWORD *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  char *v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  _QWORD *v57;
  char v58;
  char v59;
  char v60;
  char v61;
  char v62;
  char v63;
  char v64;
  char v65;

  v45 = a2;
  v50 = type metadata accessor for Date(0);
  v46 = *(_QWORD *)(v50 - 8);
  __chkstk_darwin(v50);
  v49 = (char *)&v42 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = type metadata accessor for UUID(0);
  v48 = *(_QWORD *)(v51 - 8);
  __chkstk_darwin(v51);
  v52 = (uint64_t *)((char *)&v42 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v54 = sub_10001A9A8(&qword_101114070);
  v47 = *(_QWORD *)(v54 - 8);
  __chkstk_darwin(v54);
  v6 = (char *)&v42 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for KeySyncRecord(0);
  v8 = (int *)__chkstk_darwin(v7);
  v10 = (char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = &v10[v8[6]];
  *(_QWORD *)v11 = 0;
  v11[8] = 1;
  v12 = &v10[v8[8]];
  *(_QWORD *)v12 = 0;
  v12[8] = 1;
  v13 = &v10[v8[9]];
  *(_QWORD *)v13 = 0;
  v13[8] = 1;
  v14 = &v10[v8[11]];
  *(_QWORD *)v14 = 0;
  v14[8] = 1;
  v57 = a1;
  v15 = a1[3];
  v55 = (uint64_t *)a1[4];
  sub_10001AA44(a1, v15);
  v16 = sub_100AFD8CC();
  v53 = v6;
  v17 = v56;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for KeySyncRecord.CodingKeys, &type metadata for KeySyncRecord.CodingKeys, v16, v15, v55);
  if (v17)
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v57);
  v18 = v11;
  v55 = (uint64_t *)v12;
  v56 = v7;
  v43 = v14;
  v44 = (uint64_t *)v13;
  v20 = v49;
  v19 = v50;
  v22 = v47;
  v21 = v48;
  v65 = 0;
  v23 = sub_100006204((unint64_t *)&qword_1010EDA90, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v24 = v51;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v52, v51, &v65, v54, v51, v23);
  (*(void (**)(char *, _QWORD *, uint64_t))(v21 + 32))(v10, v52, v24);
  v64 = 1;
  v25 = KeyedDecodingContainer.decode(_:forKey:)(&v64, v54);
  v26 = v56;
  *(_QWORD *)&v10[*(int *)(v56 + 20)] = v25;
  v63 = 2;
  *(_QWORD *)v18 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v63, v54);
  v18[8] = v27 & 1;
  v62 = 3;
  v28 = sub_100006204(&qword_1010ED6D0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  KeyedDecodingContainer.decode<A>(_:forKey:)(v20, v19, &v62, v54, v19, v28);
  (*(void (**)(char *, _QWORD *, uint64_t))(v46 + 32))(&v10[*(int *)(v26 + 28)], v20, v19);
  v61 = 4;
  v29 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v61, v54);
  v30 = v55;
  *v55 = v29;
  *((_BYTE *)v30 + 8) = v31 & 1;
  v60 = 5;
  v32 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v60, v54);
  v33 = v44;
  *v44 = v32;
  *((_BYTE *)v33 + 8) = v34 & 1;
  v59 = 6;
  v35 = KeyedDecodingContainer.decode(_:forKey:)(&v59, v54);
  v36 = v57;
  *(_QWORD *)&v10[*(int *)(v56 + 40)] = v35;
  v58 = 7;
  v37 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v58, v54);
  LODWORD(v55) = v38;
  v39 = v37;
  (*(void (**)(char *, uint64_t))(v22 + 8))(v53, v54);
  v40 = v43;
  *v43 = v39;
  *((_BYTE *)v40 + 8) = v55 & 1;
  sub_100AFD910((uint64_t)v10, v45);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v36);
  return sub_100AFD954((uint64_t)v10);
}

uint64_t sub_100AFCFA0()
{
  unsigned __int8 *v0;

  return sub_100AFC760(*v0);
}

uint64_t sub_100AFCFA8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100AFDC84(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100AFCFCC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100AFD8CC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100AFCFF4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100AFD8CC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t *sub_100AFD01C(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v24 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v24 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v24);
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[6];
    *(uint64_t *)((char *)a1 + a3[5]) = *(uint64_t *)((char *)a2 + a3[5]);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    *(_QWORD *)v9 = *(_QWORD *)v10;
    v9[8] = v10[8];
    v11 = a3[7];
    v12 = (char *)a1 + v11;
    v13 = (char *)a2 + v11;
    v14 = type metadata accessor for Date(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
    v15 = a3[8];
    v16 = a3[9];
    v17 = (char *)a1 + v15;
    v18 = (char *)a2 + v15;
    *(_QWORD *)v17 = *(_QWORD *)v18;
    v17[8] = v18[8];
    v19 = (char *)a1 + v16;
    v20 = (char *)a2 + v16;
    *(_QWORD *)v19 = *(_QWORD *)v20;
    v19[8] = v20[8];
    v21 = a3[11];
    *(uint64_t *)((char *)a1 + a3[10]) = *(uint64_t *)((char *)a2 + a3[10]);
    v22 = (char *)a1 + v21;
    v23 = (char *)a2 + v21;
    *(_QWORD *)v22 = *(_QWORD *)v23;
    v22[8] = v23[8];
  }
  return a1;
}

uint64_t sub_100AFD148(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + *(int *)(a2 + 28);
  v6 = type metadata accessor for Date(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
}

uint64_t sub_100AFD1A4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[6];
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_QWORD *)v8 = *(_QWORD *)v9;
  *(_BYTE *)(v8 + 8) = *(_BYTE *)(v9 + 8);
  v10 = a3[7];
  v11 = a1 + v10;
  v12 = a2 + v10;
  v13 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v11, v12, v13);
  v14 = a3[8];
  v15 = a3[9];
  v16 = a1 + v14;
  v17 = a2 + v14;
  *(_QWORD *)v16 = *(_QWORD *)v17;
  *(_BYTE *)(v16 + 8) = *(_BYTE *)(v17 + 8);
  v18 = a1 + v15;
  v19 = a2 + v15;
  *(_QWORD *)v18 = *(_QWORD *)v19;
  *(_BYTE *)(v18 + 8) = *(_BYTE *)(v19 + 8);
  v20 = a3[11];
  *(_QWORD *)(a1 + a3[10]) = *(_QWORD *)(a2 + a3[10]);
  v21 = a1 + v20;
  v22 = a2 + v20;
  *(_QWORD *)v21 = *(_QWORD *)v22;
  *(_BYTE *)(v21 + 8) = *(_BYTE *)(v22 + 8);
  return a1;
}

uint64_t sub_100AFD2A4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  v7 = a3[6];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = *(_BYTE *)(v9 + 8);
  *(_QWORD *)v8 = *(_QWORD *)v9;
  *(_BYTE *)(v8 + 8) = v10;
  v11 = a3[7];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 24))(v12, v13, v14);
  v15 = a3[8];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = *(_BYTE *)(v17 + 8);
  *(_QWORD *)v16 = *(_QWORD *)v17;
  *(_BYTE *)(v16 + 8) = v18;
  v19 = a3[9];
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = *(_BYTE *)(v21 + 8);
  *(_QWORD *)v20 = *(_QWORD *)v21;
  *(_BYTE *)(v20 + 8) = v22;
  *(_QWORD *)(a1 + a3[10]) = *(_QWORD *)(a2 + a3[10]);
  v23 = a3[11];
  v24 = a1 + v23;
  v25 = a2 + v23;
  v26 = *(_BYTE *)(v25 + 8);
  *(_QWORD *)v24 = *(_QWORD *)v25;
  *(_BYTE *)(v24 + 8) = v26;
  return a1;
}

uint64_t sub_100AFD3B0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_QWORD *)v8 = *(_QWORD *)v9;
  *(_BYTE *)(v8 + 8) = *(_BYTE *)(v9 + 8);
  v10 = a3[7];
  v11 = a1 + v10;
  v12 = a2 + v10;
  v13 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v11, v12, v13);
  v14 = a3[8];
  v15 = a3[9];
  v16 = a1 + v14;
  v17 = a2 + v14;
  *(_QWORD *)v16 = *(_QWORD *)v17;
  *(_BYTE *)(v16 + 8) = *(_BYTE *)(v17 + 8);
  v18 = a1 + v15;
  v19 = a2 + v15;
  *(_QWORD *)v18 = *(_QWORD *)v19;
  *(_BYTE *)(v18 + 8) = *(_BYTE *)(v19 + 8);
  v20 = a3[11];
  *(_QWORD *)(a1 + a3[10]) = *(_QWORD *)(a2 + a3[10]);
  v21 = a1 + v20;
  v22 = a2 + v20;
  *(_QWORD *)v21 = *(_QWORD *)v22;
  *(_BYTE *)(v21 + 8) = *(_BYTE *)(v22 + 8);
  return a1;
}

uint64_t sub_100AFD4B0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[6];
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_QWORD *)v8 = *(_QWORD *)v9;
  *(_BYTE *)(v8 + 8) = *(_BYTE *)(v9 + 8);
  v10 = a3[7];
  v11 = a1 + v10;
  v12 = a2 + v10;
  v13 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 40))(v11, v12, v13);
  v14 = a3[8];
  v15 = a3[9];
  v16 = a1 + v14;
  v17 = a2 + v14;
  *(_QWORD *)v16 = *(_QWORD *)v17;
  *(_BYTE *)(v16 + 8) = *(_BYTE *)(v17 + 8);
  v18 = a1 + v15;
  v19 = a2 + v15;
  *(_QWORD *)v18 = *(_QWORD *)v19;
  *(_BYTE *)(v18 + 8) = *(_BYTE *)(v19 + 8);
  v20 = a3[11];
  *(_QWORD *)(a1 + a3[10]) = *(_QWORD *)(a2 + a3[10]);
  v21 = a1 + v20;
  v22 = a2 + v20;
  *(_QWORD *)v21 = *(_QWORD *)v22;
  *(_BYTE *)(v21 + 8) = *(_BYTE *)(v22 + 8);
  return a1;
}

uint64_t sub_100AFD5B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100AFD5BC);
}

uint64_t sub_100AFD5BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v8 = type metadata accessor for Date(0);
    v10 = a1 + *(int *)(a3 + 28);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t sub_100AFD630(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100AFD63C);
}

uint64_t sub_100AFD63C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v10 = type metadata accessor for Date(0);
    v12 = a1 + *(int *)(a4 + 28);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t type metadata accessor for KeySyncRecord(uint64_t a1)
{
  uint64_t result;

  result = qword_101114008;
  if (!qword_101114008)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for KeySyncRecord);
  return result;
}

uint64_t sub_100AFD6F4(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[8];

  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v5[0] = *(_QWORD *)(result - 8) + 64;
    v5[1] = (char *)&value witness table for Builtin.Int64 + 64;
    v5[2] = "\t";
    result = type metadata accessor for Date(319);
    if (v4 <= 0x3F)
    {
      v5[3] = *(_QWORD *)(result - 8) + 64;
      v5[4] = "\t";
      v5[5] = "\t";
      v5[6] = (char *)&value witness table for Builtin.Int64 + 64;
      v5[7] = "\t";
      swift_initStructMetadata(a1, 256, 8, v5, a1 + 16);
      return 0;
    }
  }
  return result;
}

Swift::Int sub_100AFD7A0()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  sub_100AFC598((uint64_t)v1);
  return Hasher._finalize()();
}

Swift::Int sub_100AFD7E0()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  sub_100AFC598((uint64_t)v1);
  return Hasher._finalize()();
}

uint64_t sub_100AFD818@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100AFCAFC(a1, a2);
}

uint64_t sub_100AFD82C(_QWORD *a1)
{
  return sub_100AFC84C(a1);
}

uint64_t sub_100AFD844()
{
  return sub_100006204(&qword_101114058, type metadata accessor for KeySyncRecord, (uint64_t)&unk_100E5DCF8);
}

uint64_t sub_100AFD870(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_100006204(&qword_101111BA8, type metadata accessor for KeySyncRecord, (uint64_t)&unk_100E5DD60);
  result = sub_100006204(&qword_101108220, type metadata accessor for KeySyncRecord, (uint64_t)&unk_100E5DDA4);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_100AFD8CC()
{
  unint64_t result;

  result = qword_101114068;
  if (!qword_101114068)
  {
    result = swift_getWitnessTable(byte_100E5DE90, &type metadata for KeySyncRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101114068);
  }
  return result;
}

uint64_t sub_100AFD910(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for KeySyncRecord(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100AFD954(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for KeySyncRecord(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

BOOL sub_100AFD990(uint64_t a1, uint64_t a2)
{
  int *v4;
  int *v5;
  uint64_t v6;
  double *v7;
  char v8;
  double *v9;
  int v10;
  uint64_t v11;
  _QWORD *v12;
  char v13;
  _QWORD *v14;
  int v15;
  uint64_t v16;
  _QWORD *v17;
  char v18;
  _QWORD *v19;
  int v20;
  uint64_t v21;
  _QWORD *v22;
  char v23;
  _QWORD *v24;
  char v25;

  if ((static UUID.== infix(_:_:)(a1, a2) & 1) == 0)
    return 0;
  v4 = (int *)type metadata accessor for KeySyncRecord(0);
  if (*(_QWORD *)(a1 + v4[5]) != *(_QWORD *)(a2 + v4[5]))
    return 0;
  v5 = v4;
  v6 = v4[6];
  v7 = (double *)(a1 + v6);
  v8 = *(_BYTE *)(a1 + v6 + 8);
  v9 = (double *)(a2 + v6);
  v10 = *(unsigned __int8 *)(a2 + v6 + 8);
  if ((v8 & 1) != 0)
  {
    if (!v10)
      return 0;
  }
  else
  {
    if (*v7 != *v9)
      LOBYTE(v10) = 1;
    if ((v10 & 1) != 0)
      return 0;
  }
  if ((static Date.== infix(_:_:)(a1 + v4[7], a2 + v4[7]) & 1) != 0)
  {
    v11 = v5[8];
    v12 = (_QWORD *)(a1 + v11);
    v13 = *(_BYTE *)(a1 + v11 + 8);
    v14 = (_QWORD *)(a2 + v11);
    v15 = *(unsigned __int8 *)(a2 + v11 + 8);
    if ((v13 & 1) != 0)
    {
      if (!v15)
        return 0;
    }
    else
    {
      if (*v12 != *v14)
        LOBYTE(v15) = 1;
      if ((v15 & 1) != 0)
        return 0;
    }
    v16 = v5[9];
    v17 = (_QWORD *)(a1 + v16);
    v18 = *(_BYTE *)(a1 + v16 + 8);
    v19 = (_QWORD *)(a2 + v16);
    v20 = *(unsigned __int8 *)(a2 + v16 + 8);
    if ((v18 & 1) != 0)
    {
      if (!v20)
        return 0;
    }
    else
    {
      if (*v17 != *v19)
        LOBYTE(v20) = 1;
      if ((v20 & 1) != 0)
        return 0;
    }
    if (*(_QWORD *)(a1 + v5[10]) == *(_QWORD *)(a2 + v5[10]))
    {
      v21 = v5[11];
      v22 = (_QWORD *)(a1 + v21);
      v23 = *(_BYTE *)(a1 + v21 + 8);
      v24 = (_QWORD *)(a2 + v21);
      v25 = *(_BYTE *)(a2 + v21 + 8);
      if ((v23 & 1) == 0)
      {
        if (*v22 != *v24)
          v25 = 1;
        return (v25 & 1) == 0;
      }
      if ((v25 & 1) != 0)
        return 1;
    }
  }
  return 0;
}

uint64_t storeEnumTagSinglePayload for KeySyncRecord.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_100AFDB2C + 4 * byte_100E5DCC5[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_100AFDB60 + 4 * byte_100E5DCC0[v4]))();
}

uint64_t sub_100AFDB60(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100AFDB68(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100AFDB70);
  return result;
}

uint64_t sub_100AFDB7C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100AFDB84);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_100AFDB88(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100AFDB90(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for KeySyncRecord.CodingKeys()
{
  return &type metadata for KeySyncRecord.CodingKeys;
}

unint64_t sub_100AFDBB0()
{
  unint64_t result;

  result = qword_101114078;
  if (!qword_101114078)
  {
    result = swift_getWitnessTable(a1_31, &type metadata for KeySyncRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101114078);
  }
  return result;
}

unint64_t sub_100AFDBF8()
{
  unint64_t result;

  result = qword_101114080;
  if (!qword_101114080)
  {
    result = swift_getWitnessTable(asc_100E5DDD8, &type metadata for KeySyncRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101114080);
  }
  return result;
}

unint64_t sub_100AFDC40()
{
  unint64_t result;

  result = qword_101114088;
  if (!qword_101114088)
  {
    result = swift_getWitnessTable(asc_100E5DE00, &type metadata for KeySyncRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101114088);
  }
  return result;
}

uint64_t sub_100AFDC84(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char v13;

  if (a1 == 0x696669746E656469 && a2 == 0xEA00000000007265)
  {
    v5 = 0xEA00000000007265;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x696669746E656469, 0xEA00000000007265, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0xD000000000000011)
  {
    v7 = 0x8000000100EC7560;
    if (a2 == 0x8000000100EC7560)
      goto LABEL_13;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x8000000100EC7560, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
LABEL_13:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if (a1 == 0xD000000000000017 && a2 == 0x8000000100EEE870)
  {
    v8 = 0x8000000100EEE870;
LABEL_19:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000017, 0x8000000100EEE870, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_19;
  }
  if (a1 == 0xD000000000000018 && a2 == 0x8000000100EC7580)
  {
    v9 = 0x8000000100EC7580;
LABEL_25:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000018, 0x8000000100EC7580, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_25;
  }
  if (a1 == 0x65646E49646C6977 && a2 == 0xED00006573614278)
  {
    v10 = 0xED00006573614278;
LABEL_31:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x65646E49646C6977, 0xED00006573614278, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_31;
  }
  if (a1 == 0xD000000000000011)
  {
    v11 = 0x8000000100EEE890;
    if (a2 == 0x8000000100EEE890)
      goto LABEL_36;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x8000000100EEE890, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
LABEL_36:
    swift_bridgeObjectRelease(v11);
    return 5;
  }
  if (a1 == 0xD000000000000011)
  {
    v12 = 0x8000000100EEE8B0;
    if (a2 == 0x8000000100EEE8B0)
      goto LABEL_41;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x8000000100EEE8B0, a1, a2, 0) & 1) != 0)
  {
    v12 = a2;
LABEL_41:
    swift_bridgeObjectRelease(v12);
    return 6;
  }
  if (a1 == 0x496C6C6F5279656BLL && a2 == 0xEF6C61767265746ELL)
  {
    swift_bridgeObjectRelease(0xEF6C61767265746ELL);
    return 7;
  }
  else
  {
    v13 = _stringCompareWithSmolCheck(_:_:expecting:)(0x496C6C6F5279656BLL, 0xEF6C61767265746ELL, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v13 & 1) != 0)
      return 7;
    else
      return 8;
  }
}

ValueMetadata *type metadata accessor for NotifyMeResponse()
{
  return &type metadata for NotifyMeResponse;
}

uint64_t sub_100AFDFF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100AFE004);
}

uint64_t sub_100AFE004(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v9;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 3)
    return v9 - 2;
  else
    return 0;
}

uint64_t sub_100AFE07C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100AFE088);
}

uint64_t sub_100AFE088(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_BYTE *)(a1 + *(int *)(a4 + 20)) = a2 + 2;
  return result;
}

uint64_t type metadata accessor for NotifyMeResponseResult(uint64_t a1)
{
  uint64_t result;

  result = qword_1011140E8;
  if (!qword_1011140E8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for NotifyMeResponseResult);
  return result;
}

uint64_t sub_100AFE13C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_100E5DF38;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_100AFE1AC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;

  v25 = a2;
  v29 = type metadata accessor for UUID(0);
  v26 = *(_QWORD *)(v29 - 8);
  __chkstk_darwin(v29);
  v27 = (uint64_t *)((char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v28 = sub_10001A9A8(&qword_101114148);
  v5 = *(_QWORD *)(v28 - 8);
  __chkstk_darwin(v28);
  v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for NotifyMeResponseResult(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v11 = a1[4];
  sub_10001AA44(a1, v12);
  v13 = sub_100AFEC24();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for NotifyMeResponseResult.CodingKeys, &type metadata for NotifyMeResponseResult.CodingKeys, v13, v12, v11);
  if (v2)
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  v23 = a1;
  v24 = v5;
  v14 = (uint64_t)v10;
  v15 = v26;
  BYTE1(v31) = 0;
  v16 = sub_100006204((unint64_t *)&qword_1010EDA90, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v18 = v27;
  v17 = v28;
  v19 = v29;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v27, v29, (char *)&v31 + 1, v28, v29, v16);
  (*(void (**)(uint64_t, _QWORD *, uint64_t))(v15 + 32))(v14, v18, v19);
  v30 = 1;
  v20 = sub_100AFEC68();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v31, &type metadata for NotifyMeResponseResult.StatusCode, &v30, v17, &type metadata for NotifyMeResponseResult.StatusCode, v20);
  (*(void (**)(char *, uint64_t))(v24 + 8))(v7, v17);
  *(_BYTE *)(v14 + *(int *)(v8 + 20)) = v31;
  sub_100AFECAC(v14, v25);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v23);
  return sub_100AFECF0(v14);
}

uint64_t sub_100AFE434()
{
  return 0x73746C75736572;
}

uint64_t sub_100AFE44C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v6;
  uint64_t result;
  char v8;

  if (a1 == 0x73746C75736572 && a2 == 0xE700000000000000)
  {
    result = swift_bridgeObjectRelease(0xE700000000000000);
    v8 = 0;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x73746C75736572, 0xE700000000000000, a1, a2, 0);
    result = swift_bridgeObjectRelease(a2);
    v8 = v6 ^ 1;
  }
  *a3 = v8 & 1;
  return result;
}

uint64_t sub_100AFE4E0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100AFEB64();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100AFE508(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100AFEB64();
  return CodingKey.debugDescription.getter(a1, v2);
}

_QWORD *sub_100AFE530@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;

  result = sub_100AFEA38(a1);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t sub_100AFE558(char *a1, char *a2)
{
  return sub_100513058(*a1, *a2);
}

Swift::Int sub_100AFE564()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5);
  if (v1)
    v2 = 0x6F43737574617473;
  else
    v2 = 0x7069726373627573;
  if (v1)
    v3 = 0xEA00000000006564;
  else
    v3 = 0xEE0064496E6F6974;
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_100AFE5F4(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  if (*v1)
    v2 = 0x6F43737574617473;
  else
    v2 = 0x7069726373627573;
  if (*v1)
    v3 = 0xEA00000000006564;
  else
    v3 = 0xEE0064496E6F6974;
  String.hash(into:)(a1, v2, v3);
  return swift_bridgeObjectRelease(v3);
}

Swift::Int sub_100AFE660()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5);
  if (v1)
    v2 = 0x6F43737574617473;
  else
    v2 = 0x7069726373627573;
  if (v1)
    v3 = 0xEA00000000006564;
  else
    v3 = 0xEE0064496E6F6974;
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_100AFE6EC@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  Swift::String v3;
  void *v4;
  Swift::Int v5;
  uint64_t result;
  char v7;

  v3._countAndFlagsBits = *a1;
  v4 = (void *)a1[1];
  v3._object = v4;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10104CFB0, v3);
  result = swift_bridgeObjectRelease(v4);
  if (v5 == 1)
    v7 = 1;
  else
    v7 = 2;
  if (!v5)
    v7 = 0;
  *a2 = v7;
  return result;
}

void sub_100AFE748(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 0x7069726373627573;
  if (*v1)
    v2 = 0x6F43737574617473;
  v3 = 0xEE0064496E6F6974;
  if (*v1)
    v3 = 0xEA00000000006564;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_100AFE798()
{
  _BYTE *v0;

  if (*v0)
    return 0x6F43737574617473;
  else
    return 0x7069726373627573;
}

uint64_t sub_100AFE7E4@<X0>(Swift::String string@<0:X0, 8:X1>, char *a2@<X8>)
{
  void *object;
  Swift::String v3;
  Swift::Int v5;
  uint64_t result;
  char v7;

  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10104CFB0, v3);
  result = swift_bridgeObjectRelease(object);
  if (v5 == 1)
    v7 = 1;
  else
    v7 = 2;
  if (!v5)
    v7 = 0;
  *a2 = v7;
  return result;
}

uint64_t sub_100AFE844(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100AFEC24();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100AFE86C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100AFEC24();
  return CodingKey.debugDescription.getter(a1, v2);
}

BOOL sub_100AFE894(char *a1, char *a2)
{
  return qword_100E5E2D0[*a1] == qword_100E5E2D0[*a2];
}

Swift::Int sub_100AFE8B8()
{
  char *v0;
  uint64_t v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(qword_100E5E2D0[v1]);
  return Hasher._finalize()();
}

void sub_100AFE904()
{
  char *v0;

  Hasher._combine(_:)(qword_100E5E2D0[*v0]);
}

Swift::Int sub_100AFE938()
{
  char *v0;
  uint64_t v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(qword_100E5E2D0[v1]);
  return Hasher._finalize()();
}

uint64_t *sub_100AFE980@<X0>(uint64_t *result@<X0>, char *a2@<X8>)
{
  uint64_t v2;
  char v3;
  char v4;
  char v5;

  v2 = *result;
  if (*result == 200)
    v3 = 0;
  else
    v3 = 3;
  if (v2 == 204)
    v4 = 1;
  else
    v4 = v3;
  if (v2 == 500)
    v5 = 2;
  else
    v5 = v4;
  *a2 = v5;
  return result;
}

void sub_100AFE9B0(_QWORD *a1@<X8>)
{
  char *v1;

  *a1 = qword_100E5E2D0[*v1];
}

uint64_t sub_100AFE9C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100AFF158();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_100AFEA24@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100AFE1AC(a1, a2);
}

_QWORD *sub_100AFEA38(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;
  _QWORD *v16;

  v3 = sub_10001A9A8(&qword_101114120);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  v9 = sub_10001AA44(a1, v7);
  v10 = sub_100AFEB64();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for NotifyMeResponse.CodingKeys, &type metadata for NotifyMeResponse.CodingKeys, v10, v7, v8);
  if (v1)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  }
  else
  {
    v11 = sub_10001A9A8(&qword_101114130);
    v12 = sub_100AFEBA8();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v16, v11, v13, v3, v11, v12);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    v9 = v16;
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  }
  return v9;
}

unint64_t sub_100AFEB64()
{
  unint64_t result;

  result = qword_101114128;
  if (!qword_101114128)
  {
    result = swift_getWitnessTable(a9_21, &type metadata for NotifyMeResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101114128);
  }
  return result;
}

unint64_t sub_100AFEBA8()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_101114138;
  if (!qword_101114138)
  {
    v1 = sub_10001F784(&qword_101114130);
    v2 = sub_100006204(&qword_101114140, type metadata accessor for NotifyMeResponseResult, (uint64_t)&unk_100E5DF50);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <A> [A], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_101114138);
  }
  return result;
}

unint64_t sub_100AFEC24()
{
  unint64_t result;

  result = qword_101114150;
  if (!qword_101114150)
  {
    result = swift_getWitnessTable(byte_100E5E228, &type metadata for NotifyMeResponseResult.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101114150);
  }
  return result;
}

unint64_t sub_100AFEC68()
{
  unint64_t result;

  result = qword_101114158;
  if (!qword_101114158)
  {
    result = swift_getWitnessTable(asc_100E5E200, &type metadata for NotifyMeResponseResult.StatusCode);
    atomic_store(result, (unint64_t *)&qword_101114158);
  }
  return result;
}

uint64_t sub_100AFECAC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for NotifyMeResponseResult(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100AFECF0(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for NotifyMeResponseResult(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t storeEnumTagSinglePayload for NotifyMeResponseResult.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_100AFED78 + 4 * byte_100E5DEE5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100AFEDAC + 4 * byte_100E5DEE0[v4]))();
}

uint64_t sub_100AFEDAC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100AFEDB4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100AFEDBCLL);
  return result;
}

uint64_t sub_100AFEDC8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100AFEDD0);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_100AFEDD4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100AFEDDC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for NotifyMeResponseResult.CodingKeys()
{
  return &type metadata for NotifyMeResponseResult.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for NotifyMeResponse.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_100AFEE38 + 4 * byte_100E5DEEA[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_100AFEE58 + 4 * byte_100E5DEEF[v4]))();
}

_BYTE *sub_100AFEE38(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_100AFEE58(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100AFEE60(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100AFEE68(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100AFEE70(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100AFEE78(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for NotifyMeResponse.CodingKeys()
{
  return &type metadata for NotifyMeResponse.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for NotifyMeResponseResult.StatusCode(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_100AFEEE0 + 4 * byte_100E5DEF9[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_100AFEF14 + 4 * byte_100E5DEF4[v4]))();
}

uint64_t sub_100AFEF14(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100AFEF1C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100AFEF24);
  return result;
}

uint64_t sub_100AFEF30(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100AFEF38);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_100AFEF3C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100AFEF44(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for NotifyMeResponseResult.StatusCode()
{
  return &type metadata for NotifyMeResponseResult.StatusCode;
}

unint64_t sub_100AFEF64()
{
  unint64_t result;

  result = qword_101114160;
  if (!qword_101114160)
  {
    result = swift_getWitnessTable(aQ_39, &type metadata for NotifyMeResponseResult.StatusCode);
    atomic_store(result, (unint64_t *)&qword_101114160);
  }
  return result;
}

unint64_t sub_100AFEFAC()
{
  unint64_t result;

  result = qword_101114168;
  if (!qword_101114168)
  {
    result = swift_getWitnessTable(byte_100E5E0E8, &type metadata for NotifyMeResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101114168);
  }
  return result;
}

unint64_t sub_100AFEFF4()
{
  unint64_t result;

  result = qword_101114170;
  if (!qword_101114170)
  {
    result = swift_getWitnessTable(byte_100E5E1D8, &type metadata for NotifyMeResponseResult.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101114170);
  }
  return result;
}

unint64_t sub_100AFF03C()
{
  unint64_t result;

  result = qword_101114178;
  if (!qword_101114178)
  {
    result = swift_getWitnessTable(byte_100E5E110, &type metadata for NotifyMeResponseResult.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101114178);
  }
  return result;
}

unint64_t sub_100AFF084()
{
  unint64_t result;

  result = qword_101114180;
  if (!qword_101114180)
  {
    result = swift_getWitnessTable(aI_47, &type metadata for NotifyMeResponseResult.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101114180);
  }
  return result;
}

unint64_t sub_100AFF0CC()
{
  unint64_t result;

  result = qword_101114188;
  if (!qword_101114188)
  {
    result = swift_getWitnessTable(a9_22, &type metadata for NotifyMeResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101114188);
  }
  return result;
}

unint64_t sub_100AFF114()
{
  unint64_t result;

  result = qword_101114190;
  if (!qword_101114190)
  {
    result = swift_getWitnessTable(asc_100E5E080, &type metadata for NotifyMeResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101114190);
  }
  return result;
}

unint64_t sub_100AFF158()
{
  unint64_t result;

  result = qword_101114198;
  if (!qword_101114198)
  {
    result = swift_getWitnessTable(byte_100E5DFB8, &type metadata for NotifyMeResponseResult.StatusCode);
    atomic_store(result, (unint64_t *)&qword_101114198);
  }
  return result;
}

void sub_100AFF19C(void *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  id v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int (*v28)(char *, uint64_t, uint64_t);
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  _BYTE *v32;
  NSString v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  NSString v39;
  _QWORD *v40;
  uint64_t v41;
  NSString v42;
  id v43;
  id v44;
  NSString v45;
  id v46;
  id v47;
  NSString v48;
  id v49;
  char v50;
  _QWORD *v51;
  id v52;
  _QWORD *v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  id v59;
  void *v60;
  unint64_t v61;
  uint64_t v62;
  _BYTE *v63;
  unint64_t v64;
  _BYTE *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  id v79;
  void *v80;
  unint64_t v81;
  uint64_t v82;
  _BYTE *v83;
  char v84;
  int *v85;
  char v86;
  int *v87;
  uint64_t v88;
  uint64_t *v89;
  char v90;
  id v91;
  id v92;
  id v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  void (*v101)(char *, char *, uint64_t);
  _QWORD *v102;
  unint64_t v103;
  unint64_t v104;
  _QWORD *v105;
  unint64_t v106;
  uint64_t v107;
  int *v108;
  _QWORD *v109;
  _QWORD *v110;
  uint64_t v111;
  int *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  _QWORD *v116;
  void (*v117)(char *, char *, uint64_t);
  _QWORD *v118;
  _QWORD *v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  id v123;
  _QWORD v124[2];
  _QWORD *v125;

  v118 = a2;
  v3 = sub_10001A9A8(&qword_1010ED860);
  v4 = __chkstk_darwin(v3);
  v6 = (char *)&v111 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v111 - v7;
  v122 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v122 - 8);
  v10 = __chkstk_darwin(v122);
  v12 = (char *)&v111 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v10);
  v15 = (char *)&v111 - v14;
  __chkstk_darwin(v13);
  v120 = (char *)&v111 - v16;
  v123 = objc_msgSend(a1, "encryptedValues");
  v17 = CKRecord.recordType.getter(v123);
  v19 = v18;
  if (v17 == 0x61636F4C65666153 && v18 == 0xEC0000006E6F6974)
  {
    swift_bridgeObjectRelease(0xEC0000006E6F6974);
  }
  else
  {
    v20 = _stringCompareWithSmolCheck(_:_:expecting:)(v17, v18, 0x61636F4C65666153, 0xEC0000006E6F6974, 0);
    swift_bridgeObjectRelease(v19);
    if ((v20 & 1) == 0)
    {
      v64 = sub_100B024F8();
      v31 = swift_allocError(&type metadata for SafeLocation.SafeLocationConversionError, v64, 0, 0);
      *v65 = 0;
      goto LABEL_21;
    }
  }
  v21 = objc_msgSend(a1, "recordID");
  v22 = objc_msgSend(v21, "recordName");

  v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
  v121 = v9;
  v25 = v24;

  UUID.init(uuidString:)(v23, v25);
  v26 = v25;
  v27 = v121;
  swift_bridgeObjectRelease(v26);
  v28 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48);
  v29 = v122;
  if (v28(v8, 1, v122) == 1)
  {
    sub_1001C0844((uint64_t)v8);
    v30 = sub_100B024F8();
    v31 = swift_allocError(&type metadata for SafeLocation.SafeLocationConversionError, v30, 0, 0);
    *v32 = 1;
LABEL_21:
    swift_willThrow(v31);
    swift_unknownObjectRelease(v123);

    return;
  }
  v117 = *(void (**)(char *, char *, uint64_t))(v27 + 32);
  v117(v120, v8, v29);
  v33 = String._bridgeToObjectiveC()();
  v34 = objc_msgSend(v123, "objectForKeyedSubscript:", v33);

  if (!v34
    || (v124[0] = v34,
        v36 = sub_10001A9A8((uint64_t *)&unk_1010ED8D0),
        v37 = sub_10001A9A8(&qword_1011063B0),
        v35 = swift_dynamicCast(&v125, v124, v36, v37, 6),
        (v35 & 1) == 0))
  {
    v56 = static os_log_type_t.error.getter(v35);
    v57 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v58 = swift_allocObject(v57, 112, 7);
    *(_OWORD *)(v58 + 16) = xmmword_100E22B10;
    *(_QWORD *)(v58 + 56) = &type metadata for String;
    *(_QWORD *)(v58 + 64) = sub_10001AA00();
    *(_QWORD *)(v58 + 32) = 0xD000000000000011;
    *(_QWORD *)(v58 + 40) = 0x8000000100EE13B0;
    *(_QWORD *)(v58 + 96) = sub_10000F4A0(0, (unint64_t *)&qword_1010ED8E0, CKRecord_ptr);
    *(_QWORD *)(v58 + 104) = sub_100088600();
    *(_QWORD *)(v58 + 72) = a1;
    sub_10000F4A0(0, (unint64_t *)&qword_1010ED8F0, OS_os_log_ptr);
    v59 = a1;
    v60 = (void *)static OS_os_log.default.getter(v59);
    os_log(_:dso:log:_:_:)(v56, &_mh_execute_header, v60, "Failed to decode value for key: %@ from %@", 42, 2, v58);
    swift_bridgeObjectRelease(v58);

    v61 = sub_100B024F8();
    v62 = swift_allocError(&type metadata for SafeLocation.SafeLocationConversionError, v61, 0, 0);
    *v63 = 2;
    swift_willThrow(v62);
    swift_unknownObjectRelease(v123);

    goto LABEL_33;
  }
  v38 = v125;
  v39 = String._bridgeToObjectiveC()();
  v40 = objc_msgSend(v123, "objectForKeyedSubscript:", v39);

  if (!v40)
  {
    v66 = swift_bridgeObjectRelease(v38);
LABEL_24:
    v67 = static os_log_type_t.error.getter(v66);
    v68 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v69 = swift_allocObject(v68, 112, 7);
    *(_OWORD *)(v69 + 16) = xmmword_100E22B10;
    *(_QWORD *)(v69 + 56) = &type metadata for String;
    *(_QWORD *)(v69 + 64) = sub_10001AA00();
    v70 = 0xE400000000000000;
    *(_QWORD *)(v69 + 32) = 1701667182;
LABEL_32:
    *(_QWORD *)(v69 + 40) = v70;
    *(_QWORD *)(v69 + 96) = sub_10000F4A0(0, (unint64_t *)&qword_1010ED8E0, CKRecord_ptr);
    *(_QWORD *)(v69 + 104) = sub_100088600();
    *(_QWORD *)(v69 + 72) = a1;
    sub_10000F4A0(0, (unint64_t *)&qword_1010ED8F0, OS_os_log_ptr);
    v79 = a1;
    v80 = (void *)static OS_os_log.default.getter(v79);
    os_log(_:dso:log:_:_:)(v67, &_mh_execute_header, v80, "Failed to decode value for key: %@ from %@", 42, 2, v69);
    swift_bridgeObjectRelease(v69);

    v81 = sub_100B024F8();
    v82 = swift_allocError(&type metadata for SafeLocation.SafeLocationConversionError, v81, 0, 0);
    *v83 = 2;
    swift_willThrow(v82);
    swift_unknownObjectRelease(v123);

    goto LABEL_33;
  }
  v116 = v38;
  v125 = v40;
  if ((swift_dynamicCast(v124, &v125, v36, &type metadata for String, 6) & 1) == 0)
  {
    v66 = swift_bridgeObjectRelease(v116);
    goto LABEL_24;
  }
  v41 = v124[1];
  v114 = v124[0];
  v42 = String._bridgeToObjectiveC()();
  v43 = objc_msgSend(v123, "objectForKeyedSubscript:", v42);

  if (!v43)
  {
    v71 = v41;
LABEL_27:
    swift_bridgeObjectRelease(v71);
    v72 = swift_bridgeObjectRelease(v116);
    v67 = static os_log_type_t.error.getter(v72);
    v73 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v69 = swift_allocObject(v73, 112, 7);
    *(_OWORD *)(v69 + 16) = xmmword_100E22B10;
    *(_QWORD *)(v69 + 56) = &type metadata for String;
    *(_QWORD *)(v69 + 64) = sub_10001AA00();
    v70 = 0xE800000000000000;
    *(_QWORD *)(v69 + 32) = 0x656475746974616CLL;
    goto LABEL_32;
  }
  v115 = v41;
  v124[0] = v43;
  if ((swift_dynamicCast(&v125, v124, v36, &type metadata for Double, 6) & 1) == 0)
  {
    v71 = v115;
    goto LABEL_27;
  }
  v44 = v125;
  v45 = String._bridgeToObjectiveC()();
  v46 = objc_msgSend(v123, "objectForKeyedSubscript:", v45);

  if (!v46 || (v124[0] = v46, (swift_dynamicCast(&v125, v124, v36, &type metadata for Double, 6) & 1) == 0))
  {
    swift_bridgeObjectRelease(v115);
    v74 = swift_bridgeObjectRelease(v116);
    v67 = static os_log_type_t.error.getter(v74);
    v75 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v69 = swift_allocObject(v75, 112, 7);
    *(_OWORD *)(v69 + 16) = xmmword_100E22B10;
    *(_QWORD *)(v69 + 56) = &type metadata for String;
    *(_QWORD *)(v69 + 64) = sub_10001AA00();
    *(_QWORD *)(v69 + 32) = 0x64757469676E6F6CLL;
    v70 = 0xE900000000000065;
    goto LABEL_32;
  }
  v47 = v125;
  v48 = String._bridgeToObjectiveC()();
  v49 = objc_msgSend(v123, "objectForKeyedSubscript:", v48);

  if (!v49)
  {
    swift_bridgeObjectRelease(v115);
    v76 = v116;
LABEL_31:
    v77 = swift_bridgeObjectRelease(v76);
    v67 = static os_log_type_t.error.getter(v77);
    v78 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v69 = swift_allocObject(v78, 112, 7);
    *(_OWORD *)(v69 + 16) = xmmword_100E22B10;
    *(_QWORD *)(v69 + 56) = &type metadata for String;
    *(_QWORD *)(v69 + 64) = sub_10001AA00();
    v70 = 0xE600000000000000;
    *(_QWORD *)(v69 + 32) = 0x737569646172;
    goto LABEL_32;
  }
  v124[0] = v49;
  v50 = swift_dynamicCast(&v125, v124, v36, &type metadata for Double, 6);
  v51 = v116;
  if ((v50 & 1) == 0)
  {
    swift_bridgeObjectRelease(v115);
    v76 = v51;
    goto LABEL_31;
  }
  v52 = v125;
  v53 = v119;
  sub_100B008E0(6, a1);
  v55 = v115;
  if (v53)
  {

    swift_bridgeObjectRelease(v55);
    swift_bridgeObjectRelease(v51);
    swift_unknownObjectRelease(v123);
LABEL_33:
    (*(void (**)(char *, uint64_t))(v121 + 8))(v120, v122);
    return;
  }
  v84 = v54;
  v85 = (int *)type metadata accessor for SafeLocation(0);
  *((_BYTE *)v118 + v85[12]) = v84;
  sub_100B00CB8(5, a1);
  *((_BYTE *)v118 + v85[11]) = v86;
  sub_100B01090(0, a1);
  v87 = v85;
  v88 = v85[6];
  v89 = v118;
  *((_BYTE *)v118 + v88) = v90;
  v119 = objc_autoreleasePoolPush();
  v91 = objc_msgSend(objc_allocWithZone((Class)NSKeyedArchiver), "initRequiringSecureCoding:", 1);
  objc_msgSend(a1, "encodeSystemFieldsWithCoder:", v91);
  objc_msgSend(v91, "finishEncoding");
  v92 = objc_msgSend(v91, "encodedData");
  v112 = v87;
  v93 = v92;
  v113 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v92);
  v111 = v94;

  objc_autoreleasePoolPop(v119);
  v95 = v111;
  *v89 = v113;
  v89[1] = v95;
  (*(void (**)(char *, char *, uint64_t))(v121 + 16))((char *)v89 + v112[5], v120, v122);
  if (v116[2])
  {
    v96 = v116[2];
    v97 = (_QWORD *)(swift_bridgeObjectRetain(v116) + 40);
    v119 = _swiftEmptyArrayStorage;
    do
    {
      v98 = *(v97 - 1);
      v99 = *v97;
      swift_bridgeObjectRetain(*v97);
      UUID.init(uuidString:)(v98, v99);
      swift_bridgeObjectRelease(v99);
      v100 = v122;
      if (v28(v6, 1, v122) == 1)
      {
        sub_1001C0844((uint64_t)v6);
      }
      else
      {
        v113 = v96;
        v101 = v117;
        v117(v15, v6, v100);
        v101(v12, v15, v100);
        v102 = v119;
        if ((swift_isUniquelyReferenced_nonNull_native(v119) & 1) == 0)
          v102 = (_QWORD *)sub_1007C84F8(0, v102[2] + 1, 1, (unint64_t)v102);
        v104 = v102[2];
        v103 = v102[3];
        v105 = (_QWORD *)(v104 + 1);
        if (v104 >= v103 >> 1)
        {
          v119 = (_QWORD *)(v104 + 1);
          v107 = sub_1007C84F8(v103 > 1, v104 + 1, 1, (unint64_t)v102);
          v105 = v119;
          v102 = (_QWORD *)v107;
        }
        v102[2] = v105;
        v106 = (*(unsigned __int8 *)(v121 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v121 + 80);
        v119 = v102;
        v117((char *)v102 + v106 + *(_QWORD *)(v121 + 72) * v104, v12, v122);
        v96 = v113;
      }
      v97 += 2;
      --v96;
    }
    while (v96);
    swift_unknownObjectRelease(v123);

    swift_bridgeObjectRelease(v116);
  }
  else
  {
    swift_unknownObjectRelease(v123);

    v119 = _swiftEmptyArrayStorage;
  }
  (*(void (**)(char *, uint64_t))(v121 + 8))(v120, v122);
  swift_bridgeObjectRelease(v116);
  v108 = v112;
  v109 = v118;
  *(_QWORD *)((char *)v118 + v112[13]) = v119;
  v110 = (_QWORD *)((char *)v109 + v108[7]);
  *v110 = v114;
  v110[1] = v115;
  *(_QWORD *)((char *)v109 + v108[8]) = v44;
  *(_QWORD *)((char *)v109 + v108[9]) = v47;
  *(_QWORD *)((char *)v109 + v108[10]) = v52;
}

uint64_t sub_100AFFDBC@<X0>(void *a1@<X0>, char *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  id v8;
  char v9;
  id v10;
  void *v11;
  uint64_t v12;
  unint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  unsigned int v24;
  id v25;
  char v26;
  char v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  int *v32;
  uint64_t result;
  uint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;

  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = objc_msgSend(a1, "identifier");
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v8);

  v9 = 1;
  switch((unint64_t)objc_msgSend(a1, "type"))
  {
    case 0uLL:
      break;
    case 1uLL:
      v9 = 2;
      break;
    case 2uLL:
      v9 = 3;
      break;
    case 3uLL:
      v9 = 4;
      break;
    case 4uLL:
      v9 = 5;
      break;
    default:
      v9 = 0;
      break;
  }
  v10 = objc_msgSend(a1, "name");
  if (v10)
  {
    v11 = v10;
    v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
    v36 = v13;
    v37 = v12;

  }
  else
  {
    v36 = 0xE000000000000000;
    v37 = 0;
  }
  v14 = objc_msgSend(a1, "location", v36, v37);
  objc_msgSend(v14, "coordinate");
  v16 = v15;

  v17 = objc_msgSend(a1, "location");
  objc_msgSend(v17, "coordinate");
  v19 = v18;

  v20 = objc_msgSend(a1, "location");
  objc_msgSend(v20, "horizontalAccuracy");
  v22 = v21;

  v23 = objc_msgSend(a1, "location");
  v24 = objc_msgSend(v23, "referenceFrame");

  v25 = objc_msgSend(a1, "approvalState");
  if ((unint64_t)v25 >= 4)
    v26 = 0;
  else
    v26 = (char)v25;
  if (v24 == 1)
    v27 = 1;
  else
    v27 = 2 * (v24 == 2);
  v28 = objc_msgSend(a1, "associatedBeacons");
  v29 = sub_100006204(&qword_1010F98B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v30 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v28, v4, v29);

  v31 = sub_100508DAC(v30);
  swift_bridgeObjectRelease();
  *(_OWORD *)a2 = xmmword_100E22FC0;
  v32 = (int *)type metadata accessor for SafeLocation(0);
  result = (*(uint64_t (**)(char *, char *, uint64_t))(v5 + 32))(&a2[v32[5]], v7, v4);
  a2[v32[6]] = v9;
  v34 = (uint64_t *)&a2[v32[7]];
  v35 = v36;
  *v34 = v37;
  v34[1] = v35;
  *(_QWORD *)&a2[v32[8]] = v16;
  *(_QWORD *)&a2[v32[9]] = v19;
  *(_QWORD *)&a2[v32[10]] = v22;
  a2[v32[11]] = v27;
  a2[v32[12]] = v26;
  *(_QWORD *)&a2[v32[13]] = v31;
  return result;
}

uint64_t sub_100B000E0@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, int a6@<W5>, char *a7@<X8>)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  char v24;
  int *v25;
  uint64_t result;
  char *v27;
  uint64_t v28;
  int v29;

  v29 = a6;
  v13 = type metadata accessor for UUID(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v28 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, a1, v13);
  objc_msgSend(a2, "coordinate");
  v18 = v17;
  objc_msgSend(a2, "coordinate");
  v20 = v19;
  objc_msgSend(a2, "horizontalAccuracy");
  v22 = v21;
  v23 = objc_msgSend(a2, "referenceFrame");

  if (v23 == 1)
    v24 = 1;
  else
    v24 = 2 * (v23 == 2);
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(a1, v13);
  *(_OWORD *)a7 = xmmword_100E22FC0;
  v25 = (int *)type metadata accessor for SafeLocation(0);
  result = (*(uint64_t (**)(char *, char *, uint64_t))(v14 + 32))(&a7[v25[5]], v16, v13);
  a7[v25[6]] = a5;
  v27 = &a7[v25[7]];
  *(_QWORD *)v27 = a3;
  *((_QWORD *)v27 + 1) = a4;
  *(_QWORD *)&a7[v25[8]] = v18;
  *(_QWORD *)&a7[v25[9]] = v20;
  *(_QWORD *)&a7[v25[10]] = v22;
  a7[v25[11]] = v24;
  a7[v25[12]] = v29;
  *(_QWORD *)&a7[v25[13]] = _swiftEmptyArrayStorage;
  return result;
}

uint64_t sub_100B0028C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100B03F68();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_100B002E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100B03F68();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_100B00334(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100B03EE0();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_100B00390(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100B03EE0();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

void sub_100B003DC(_QWORD *a1@<X8>)
{
  *a1 = &off_10104DF00;
}

uint64_t sub_100B003EC(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  unint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  Swift::UInt64 v12;
  Swift::UInt64 v13;
  Swift::UInt64 v14;
  uint64_t v15;

  v2 = v1;
  v4 = *v1;
  v5 = v2[1];
  sub_10001BBBC(v4, v5);
  Data.hash(into:)(a1, v4, v5);
  sub_10001BC14(v4, v5);
  v6 = (int *)type metadata accessor for SafeLocation(0);
  v7 = type metadata accessor for UUID(0);
  v8 = sub_100006204(&qword_1010F98B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(a1, v7, v8);
  Hasher._combine(_:)(*((unsigned __int8 *)v2 + v6[6]));
  v9 = (uint64_t *)((char *)v2 + v6[7]);
  v10 = *v9;
  v11 = v9[1];
  swift_bridgeObjectRetain(v11);
  String.hash(into:)(a1, v10, v11);
  swift_bridgeObjectRelease();
  if ((*(uint64_t *)((char *)v2 + v6[8]) & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v12 = *(uint64_t *)((char *)v2 + v6[8]);
  else
    v12 = 0;
  Hasher._combine(_:)(v12);
  if ((*(uint64_t *)((char *)v2 + v6[9]) & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v13 = *(uint64_t *)((char *)v2 + v6[9]);
  else
    v13 = 0;
  Hasher._combine(_:)(v13);
  if ((*(uint64_t *)((char *)v2 + v6[10]) & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v14 = *(uint64_t *)((char *)v2 + v6[10]);
  else
    v14 = 0;
  Hasher._combine(_:)(v14);
  Hasher._combine(_:)(*((unsigned __int8 *)v2 + v6[11]));
  Hasher._combine(_:)(*((unsigned __int8 *)v2 + v6[12]));
  v15 = *(uint64_t *)((char *)v2 + v6[13]);
  swift_bridgeObjectRetain(v15);
  sub_10096994C(a1, v15);
  return swift_bridgeObjectRelease();
}

uint64_t sub_100B0054C(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_100B00584 + 4 * byte_100E5E2F0[a1]))(0xD000000000000010, 0x8000000100EC2FE0);
}

uint64_t sub_100B00584()
{
  return 0x696669746E656469;
}

uint64_t sub_100B005A0()
{
  return 1701869940;
}

uint64_t sub_100B005B0()
{
  return 1701667182;
}

uint64_t sub_100B005C0()
{
  return 0x656475746974616CLL;
}

uint64_t sub_100B005D8()
{
  return 0x64757469676E6F6CLL;
}

uint64_t sub_100B005F4()
{
  return 0x737569646172;
}

uint64_t sub_100B00608()
{
  return 0x636E657265666572;
}

uint64_t sub_100B0062C()
{
  return 0x6C61766F72707061;
}

uint64_t sub_100B00650(uint64_t a1)
{
  return a1 + 1;
}

uint64_t sub_100B00668(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100B03F24();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_100B006C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100B03F24();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_100B00710()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v6;

  v0 = type metadata accessor for URL(0);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = __chkstk_darwin(v0);
  v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000234D8(v2, qword_1011B7C58);
  sub_10001A9E8(v0, (uint64_t)qword_1011B7C58);
  type metadata accessor for BeaconStore(0);
  sub_1007EC9B8((uint64_t)v4);
  URL.appendingPathComponent(_:isDirectory:)(0x61636F4C65666153, 0xED0000736E6F6974, 1);
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v4, v0);
}

uint64_t sub_100B007E8()
{
  unsigned __int8 *v0;

  return sub_100B0054C(*v0);
}

uint64_t sub_100B007F0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100B03AA0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100B00814(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100B028A0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100B0083C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100B028A0();
  return CodingKey.debugDescription.getter(a1, v2);
}

Swift::Int sub_100B00864()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  sub_100B003EC((uint64_t)v1);
  return Hasher._finalize()();
}

Swift::Int sub_100B008A4()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  sub_100B003EC((uint64_t)v1);
  return Hasher._finalize()();
}

void sub_100B008E0(char a1, id a2)
{
  id v3;

  v3 = objc_msgSend(a2, "encryptedValues");
  __asm { BR              X10 }
}

uint64_t sub_100B00958()
{
  void *v1;
  NSString v2;
  id v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  unint64_t v7;
  id v8;

  v2 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  v3 = objc_msgSend(v1, "objectForKeyedSubscript:", v2);
  swift_unknownObjectRelease(v1);

  v8 = v3;
  v4 = sub_10001A9A8(&qword_1011141C0);
  result = swift_dynamicCast(&v7, &v8, v4, &type metadata for Int, 6);
  if (!(_DWORD)result || (result = v7, v7 >= 4))
  {
    static os_log_type_t.error.getter(result);
    v6 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    *(_OWORD *)(swift_allocObject(v6, 112, 7) + 16) = xmmword_100E22B10;
    __asm { BR              X10 }
  }
  return result;
}

void sub_100B00CB8(char a1, id a2)
{
  id v3;

  v3 = objc_msgSend(a2, "encryptedValues");
  __asm { BR              X10 }
}

uint64_t sub_100B00D30()
{
  void *v1;
  NSString v2;
  id v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  unint64_t v7;
  id v8;

  v2 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  v3 = objc_msgSend(v1, "objectForKeyedSubscript:", v2);
  swift_unknownObjectRelease(v1);

  v8 = v3;
  v4 = sub_10001A9A8(&qword_1011141C0);
  result = swift_dynamicCast(&v7, &v8, v4, &type metadata for Int, 6);
  if (!(_DWORD)result || (result = v7, v7 >= 3))
  {
    static os_log_type_t.error.getter(result);
    v6 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    *(_OWORD *)(swift_allocObject(v6, 112, 7) + 16) = xmmword_100E22B10;
    __asm { BR              X10 }
  }
  return result;
}

void sub_100B01090(char a1, id a2)
{
  id v3;

  v3 = objc_msgSend(a2, "encryptedValues");
  __asm { BR              X10 }
}

uint64_t sub_100B01108()
{
  void *v1;
  NSString v2;
  id v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  unint64_t v7;
  id v8;

  v2 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  v3 = objc_msgSend(v1, "objectForKeyedSubscript:", v2);
  swift_unknownObjectRelease(v1);

  v8 = v3;
  v4 = sub_10001A9A8(&qword_1011141C0);
  result = swift_dynamicCast(&v7, &v8, v4, &type metadata for Int, 6);
  if (!(_DWORD)result || (result = v7, v7 >= 6))
  {
    static os_log_type_t.error.getter(result);
    v6 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    *(_OWORD *)(swift_allocObject(v6, 112, 7) + 16) = xmmword_100E22B10;
    __asm { BR              X10 }
  }
  return result;
}

void sub_100B01468(id *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t ObjectType;
  uint64_t v9;
  double v10;
  int *v11;
  _QWORD *v12;
  double v13;
  uint64_t v14;
  char v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  uint64_t v23;
  int64_t v24;
  double v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v29)(char *, uint64_t, uint64_t);
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  char v43;
  Class isa;
  NSString v45;
  uint64_t v46;
  id v47;
  id *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  double v53;
  uint64_t v54;
  void *v55;
  void *v56;

  v2 = v1;
  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  v50 = v4;
  v51 = v5;
  __chkstk_darwin(v4);
  v48 = a1;
  v49 = (char *)&v46 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = objc_msgSend(*a1, "encryptedValues");
  ObjectType = swift_getObjectType(v7);
  CKRecordKeyValueSetting.subscript.getter(&v53, 1701667182, 0xE400000000000000, ObjectType, &type metadata for String);
  v10 = v53;
  v9 = v54;
  v11 = (int *)type metadata accessor for SafeLocation(0);
  v12 = (_QWORD *)(v2 + v11[7]);
  v13 = *(double *)v12;
  v14 = v12[1];
  if (!v9)
    goto LABEL_7;
  if (*(_QWORD *)&v10 == *(_QWORD *)&v13 && v9 == v14)
  {
    swift_bridgeObjectRelease(v9);
    goto LABEL_9;
  }
  v16 = _stringCompareWithSmolCheck(_:_:expecting:)(*(_QWORD *)&v10, v9, *v12, v12[1], 0);
  swift_bridgeObjectRelease(v9);
  if ((v16 & 1) == 0)
  {
LABEL_7:
    v55 = &type metadata for String;
    v56 = &protocol witness table for String;
    v53 = v13;
    v54 = v14;
    swift_bridgeObjectRetain(v14);
    CKRecordKeyValueSetting.subscript.setter(&v53, 1701667182, 0xE400000000000000, ObjectType);
  }
LABEL_9:
  CKRecordKeyValueSetting.subscript.getter(&v53, 0x656475746974616CLL, 0xE800000000000000, ObjectType, &type metadata for Double);
  v17 = *(double *)(v2 + v11[8]);
  if ((v54 & 1) != 0 || v53 != v17)
  {
    v55 = &type metadata for Double;
    v56 = &protocol witness table for Double;
    v53 = v17;
    CKRecordKeyValueSetting.subscript.setter(&v53, 0x656475746974616CLL, 0xE800000000000000, ObjectType);
  }
  CKRecordKeyValueSetting.subscript.getter(&v53, 0x64757469676E6F6CLL, 0xE900000000000065, ObjectType, &type metadata for Double);
  v18 = *(double *)(v2 + v11[9]);
  if ((v54 & 1) != 0 || v53 != v18)
  {
    v55 = &type metadata for Double;
    v56 = &protocol witness table for Double;
    v53 = v18;
    CKRecordKeyValueSetting.subscript.setter(&v53, 0x64757469676E6F6CLL, 0xE900000000000065, ObjectType);
  }
  CKRecordKeyValueSetting.subscript.getter(&v53, 0x737569646172, 0xE600000000000000, ObjectType, &type metadata for Double);
  v19 = *(double *)(v2 + v11[10]);
  if ((v54 & 1) != 0 || v53 != v19)
  {
    v55 = &type metadata for Double;
    v56 = &protocol witness table for Double;
    v53 = v19;
    CKRecordKeyValueSetting.subscript.setter(&v53, 0x737569646172, 0xE600000000000000, ObjectType);
  }
  CKRecordKeyValueSetting.subscript.getter(&v53, 0x636E657265666572, 0xEE00656D61724665, ObjectType, &type metadata for Int);
  *(_QWORD *)&v20 = *(unsigned __int8 *)(v2 + v11[11]);
  if ((v54 & 1) != 0 || *(_QWORD *)&v53 != *(_QWORD *)&v20)
  {
    v55 = &type metadata for Int;
    v56 = &protocol witness table for Int;
    v53 = v20;
    CKRecordKeyValueSetting.subscript.setter(&v53, 0x636E657265666572, 0xEE00656D61724665, ObjectType);
  }
  CKRecordKeyValueSetting.subscript.getter(&v53, 0x6C61766F72707061, 0xED00006574617453, ObjectType, &type metadata for Int);
  *(_QWORD *)&v21 = *(unsigned __int8 *)(v2 + v11[12]);
  if ((v54 & 1) != 0 || *(_QWORD *)&v53 != *(_QWORD *)&v21)
  {
    v55 = &type metadata for Int;
    v56 = &protocol witness table for Int;
    v53 = v21;
    CKRecordKeyValueSetting.subscript.setter(&v53, 0x6C61766F72707061, 0xED00006574617453, ObjectType);
  }
  CKRecordKeyValueSetting.subscript.getter(&v53, 1701869940, 0xE400000000000000, ObjectType, &type metadata for Int);
  *(_QWORD *)&v22 = *(unsigned __int8 *)(v2 + v11[6]);
  if ((v54 & 1) != 0 || *(_QWORD *)&v53 != *(_QWORD *)&v22)
  {
    v55 = &type metadata for Int;
    v56 = &protocol witness table for Int;
    v53 = v22;
    CKRecordKeyValueSetting.subscript.setter(&v53, 1701869940, 0xE400000000000000, ObjectType);
  }
  CKRecordKeyValueSetting.subscript.getter(&v53, 0x6C61766F72707061, 0xED00006574617453, ObjectType, &type metadata for Int);
  if ((v54 & 1) != 0 || *(_QWORD *)&v53 != *(_QWORD *)&v21)
  {
    v55 = &type metadata for Int;
    v56 = &protocol witness table for Int;
    v53 = v21;
    CKRecordKeyValueSetting.subscript.setter(&v53, 0x6C61766F72707061, 0xED00006574617453, ObjectType);
  }
  v23 = *(_QWORD *)(v2 + v11[13]);
  v24 = *(_QWORD *)(v23 + 16);
  v25 = COERCE_DOUBLE(_swiftEmptyArrayStorage);
  if (v24)
  {
    v47 = v7;
    v53 = COERCE_DOUBLE(_swiftEmptyArrayStorage);
    swift_bridgeObjectRetain(v23);
    sub_10009A2F4(0, v24, 0);
    v26 = (*(unsigned __int8 *)(v51 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v51 + 80);
    v46 = v23;
    v27 = v23 + v26;
    v28 = *(_QWORD *)(v51 + 72);
    v29 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v51 + 16);
    do
    {
      v30 = v49;
      v31 = v50;
      v32 = v29(v49, v27, v50);
      v33 = UUID.uuidString.getter(v32);
      v35 = v34;
      (*(void (**)(char *, uint64_t))(v51 + 8))(v30, v31);
      v25 = v53;
      if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)&v53) & 1) == 0)
      {
        sub_10009A2F4(0, *(_QWORD *)(*(_QWORD *)&v25 + 16) + 1, 1);
        v25 = v53;
      }
      v37 = *(_QWORD *)(*(_QWORD *)&v25 + 16);
      v36 = *(_QWORD *)(*(_QWORD *)&v25 + 24);
      if (v37 >= v36 >> 1)
      {
        sub_10009A2F4(v36 > 1, v37 + 1, 1);
        v25 = v53;
      }
      *(_QWORD *)(*(_QWORD *)&v25 + 16) = v37 + 1;
      v38 = (_QWORD *)(*(_QWORD *)&v25 + 16 * v37);
      v38[4] = v33;
      v38[5] = v35;
      v27 += v28;
      --v24;
    }
    while (v24);
    swift_bridgeObjectRelease(v46);
    v7 = v47;
  }
  *(double *)&v39 = COERCE_DOUBLE(CKRecord.subscript.getter(0xD000000000000011, 0x8000000100EE13B0));
  if (*(double *)&v39 != 0.0
    && (v53 = *(double *)&v39,
        v40 = sub_10001A9A8((uint64_t *)&unk_1010ED8D0),
        v41 = sub_10001A9A8(&qword_1011063B0),
        (swift_dynamicCast(&v52, &v53, v40, v41, 6) & 1) != 0)
    && (v42 = v52, v43 = sub_1002478F4(v52, *(_QWORD **)&v25), swift_bridgeObjectRelease(v42), (v43 & 1) != 0))
  {
    swift_unknownObjectRelease(v7);
    swift_bridgeObjectRelease(*(_QWORD *)&v25);
  }
  else
  {
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(*(_QWORD *)&v25);
    v45 = String._bridgeToObjectiveC()();
    objc_msgSend(v7, "setObject:forKeyedSubscript:", isa, v45);
    swift_unknownObjectRelease(v7);

  }
}

uint64_t sub_100B01B80(_QWORD *a1)
{
  _OWORD *v1;
  uint64_t v2;
  _OWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  double v22;
  double v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  char v30;
  __int128 v31;

  v3 = v1;
  v5 = sub_10001A9A8(&qword_1011141F0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  v11 = sub_100B028A0();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for SafeLocation.CodingKeys, &type metadata for SafeLocation.CodingKeys, v11, v9, v10);
  v31 = *v3;
  v30 = 0;
  v12 = sub_100036A58();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v31, &v30, v5, &type metadata for Data, v12);
  if (!v2)
  {
    v13 = (int *)type metadata accessor for SafeLocation(0);
    v14 = (char *)v3 + v13[5];
    LOBYTE(v31) = 1;
    v15 = type metadata accessor for UUID(0);
    v16 = sub_100006204(&qword_1010EDAC0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v14, &v31, v5, v15, v16);
    LOBYTE(v31) = *((_BYTE *)v3 + v13[6]);
    v30 = 2;
    v17 = sub_100B02A30();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v31, &v30, v5, &type metadata for SafeLocationType, v17);
    v18 = (uint64_t *)((char *)v3 + v13[7]);
    v19 = *v18;
    v20 = v18[1];
    LOBYTE(v31) = 3;
    KeyedEncodingContainer.encode(_:forKey:)(v19, v20, &v31, v5);
    v21 = *(double *)((char *)v3 + v13[8]);
    LOBYTE(v31) = 4;
    KeyedEncodingContainer.encode(_:forKey:)(&v31, v5, v21);
    v22 = *(double *)((char *)v3 + v13[9]);
    LOBYTE(v31) = 5;
    KeyedEncodingContainer.encode(_:forKey:)(&v31, v5, v22);
    v23 = *(double *)((char *)v3 + v13[10]);
    LOBYTE(v31) = 6;
    KeyedEncodingContainer.encode(_:forKey:)(&v31, v5, v23);
    LOBYTE(v31) = *((_BYTE *)v3 + v13[11]);
    v30 = 7;
    v24 = sub_100B02A74();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v31, &v30, v5, &type metadata for SafeLocationReferenceFrame, v24);
    LOBYTE(v31) = *((_BYTE *)v3 + v13[12]);
    v30 = 8;
    v25 = sub_100B02AB8();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v31, &v30, v5, &type metadata for SafeLocationApprovalState, v25);
    *(_QWORD *)&v31 = *(_QWORD *)((char *)v3 + v13[13]);
    v30 = 9;
    v26 = sub_10001A9A8((uint64_t *)&unk_1010F7730);
    v27 = sub_10035B44C((unint64_t *)&qword_101114210, &qword_1010EDAC0, (uint64_t)&protocol conformance descriptor for UUID, (const char *)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v31, &v30, v5, v26, v27);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100B01EE0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  __int128 v39;
  char v40;

  v5 = type metadata accessor for UUID(0);
  v35 = *(_QWORD *)(v5 - 8);
  v36 = v5;
  __chkstk_darwin(v5);
  v7 = (uint64_t *)((char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v34 = sub_10001A9A8(&qword_1011141C8);
  v8 = *(_QWORD *)(v34 - 8);
  __chkstk_darwin(v34);
  v10 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = type metadata accessor for SafeLocation(0);
  __chkstk_darwin(v38);
  v37 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v13 = a1[4];
  sub_10001AA44(a1, v12);
  v14 = sub_100B028A0();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for SafeLocation.CodingKeys, &type metadata for SafeLocation.CodingKeys, v14, v12, v13);
  if (v2)
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  v32 = a2;
  v33 = v8;
  v40 = 0;
  v15 = sub_100036994();
  v16 = v34;
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v39, &type metadata for Data, &v40, v34, &type metadata for Data, v15);
  v17 = v37;
  *(_OWORD *)v37 = v39;
  LOBYTE(v39) = 1;
  v18 = sub_100006204((unint64_t *)&qword_1010EDA90, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v19 = v36;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v7, v36, &v39, v16, v36, v18);
  v20 = (int *)v38;
  (*(void (**)(char *, _QWORD *, uint64_t))(v35 + 32))(&v17[*(int *)(v38 + 20)], v7, v19);
  v40 = 2;
  v21 = sub_100B028E4();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v39, &type metadata for SafeLocationType, &v40, v16, &type metadata for SafeLocationType, v21);
  v17[v20[6]] = v39;
  LOBYTE(v39) = 3;
  v22 = KeyedDecodingContainer.decode(_:forKey:)(&v39, v16);
  v23 = (uint64_t *)&v17[v20[7]];
  *v23 = v22;
  v23[1] = v24;
  LOBYTE(v39) = 4;
  *(double *)&v17[v20[8]] = KeyedDecodingContainer.decode(_:forKey:)(&v39, v16);
  LOBYTE(v39) = 5;
  *(double *)&v17[v20[9]] = KeyedDecodingContainer.decode(_:forKey:)(&v39, v16);
  LOBYTE(v39) = 6;
  *(double *)&v17[v20[10]] = KeyedDecodingContainer.decode(_:forKey:)(&v39, v16);
  v40 = 7;
  v25 = sub_100B02928();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v39, &type metadata for SafeLocationReferenceFrame, &v40, v16, &type metadata for SafeLocationReferenceFrame, v25);
  v17[v20[11]] = v39;
  v40 = 8;
  v26 = sub_100B0296C();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v39, &type metadata for SafeLocationApprovalState, &v40, v16, &type metadata for SafeLocationApprovalState, v26);
  v17[v20[12]] = v39;
  v27 = sub_10001A9A8((uint64_t *)&unk_1010F7730);
  v40 = 9;
  v28 = sub_10035B44C((unint64_t *)&qword_10111F690, (unint64_t *)&qword_1010EDA90, (uint64_t)&protocol conformance descriptor for UUID, (const char *)&protocol conformance descriptor for <A> [A]);
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v39, v27, &v40, v16, v27, v28);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v10, v34);
  v29 = (uint64_t)v37;
  *(_QWORD *)&v37[*(int *)(v38 + 52)] = v39;
  sub_100B029B0(v29, v32);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  return sub_100B029F4(v29);
}

uint64_t sub_100B02438@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100B01EE0(a1, a2);
}

uint64_t sub_100B0244C(_QWORD *a1)
{
  return sub_100B01B80(a1);
}

uint64_t sub_100B02460(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_100006204((unint64_t *)&unk_1011141A0, type metadata accessor for SafeLocation, (uint64_t)&unk_100E5E354);
  result = sub_100006204(&qword_101108098, type metadata accessor for SafeLocation, (uint64_t)&unk_100E5E32C);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t sub_100B024BC(uint64_t a1)
{
  uint64_t result;

  result = sub_100006204((unint64_t *)&unk_1011080A0, type metadata accessor for SafeLocation, (uint64_t)&unk_100E5E37C);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100B024F8()
{
  unint64_t result;

  result = qword_1011141B0;
  if (!qword_1011141B0)
  {
    result = swift_getWitnessTable(byte_100E5E9A8, &type metadata for SafeLocation.SafeLocationConversionError);
    atomic_store(result, (unint64_t *)&qword_1011141B0);
  }
  return result;
}

double sub_100B0253C(void *a1)
{
  void *v1;
  void *v2;
  double v4;
  double v5;
  double v6;
  id v7;
  double v8;
  double v9;
  double v10;
  id v11;
  double v12;
  double v13;

  v2 = v1;
  objc_msgSend(v1, "center");
  v5 = v4;
  objc_msgSend(v1, "center");
  v7 = objc_msgSend(objc_allocWithZone((Class)CLLocation), "initWithLatitude:longitude:", v5, v6);
  objc_msgSend(v7, "setReferenceFrame:", objc_msgSend(v2, "geoReferenceFrame"));
  objc_msgSend(a1, "center");
  v9 = v8;
  objc_msgSend(a1, "center");
  v11 = objc_msgSend(objc_allocWithZone((Class)CLLocation), "initWithLatitude:longitude:", v9, v10);
  objc_msgSend(v11, "setReferenceFrame:", objc_msgSend(a1, "geoReferenceFrame"));
  objc_msgSend(v7, "distanceFromLocation:", v11);
  v13 = v12;

  return v13;
}

void sub_100B02664(void *a1)
{
  void *v1;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  long double v10;
  long double v11;
  long double v12;

  v3 = sub_100B0253C(a1);
  objc_msgSend(v1, "radius");
  v5 = v4;
  objc_msgSend(a1, "radius");
  v7 = v6;
  if (v5 + v6 >= v3)
  {
    v8 = v5 * v5;
    v9 = v6 * v6;
    if (v3 > vabdd_f64(v6, v5))
    {
      v10 = acos((v3 * v3 + v8 - v9) / (v3 * (v5 + v5)));
      v11 = v10 + v10;
      v12 = acos((v3 * v3 + v9 - v8) / (v3 * (v7 + v7)));
      sin(v12 + v12);
      sin(v11);
    }
  }
}

uint64_t sub_100B02780(uint64_t *a1, uint64_t a2)
{
  char v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  BOOL v11;

  _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(*a1, a1[1]);
  if ((v4 & 1) != 0
    && (v5 = (int *)type metadata accessor for SafeLocation(0),
        (static UUID.== infix(_:_:)((char *)a1 + v5[5], a2 + v5[5]) & 1) != 0)
    && *((unsigned __int8 *)a1 + v5[6]) == *(unsigned __int8 *)(a2 + v5[6])
    && ((v6 = v5[7],
         v7 = *(uint64_t *)((char *)a1 + v6),
         v8 = *(uint64_t *)((char *)a1 + v6 + 8),
         v9 = (_QWORD *)(a2 + v6),
         v10 = v9[1],
         v7 == *v9)
      ? (v11 = v8 == v10)
      : (v11 = 0),
        (v11 || (_stringCompareWithSmolCheck(_:_:expecting:)(v7, v8, *v9, v10, 0) & 1) != 0)
     && *(double *)((char *)a1 + v5[8]) == *(double *)(a2 + v5[8])
     && *(double *)((char *)a1 + v5[9]) == *(double *)(a2 + v5[9])
     && *(double *)((char *)a1 + v5[10]) == *(double *)(a2 + v5[10])
     && *((unsigned __int8 *)a1 + v5[11]) == *(unsigned __int8 *)(a2 + v5[11])
     && *((unsigned __int8 *)a1 + v5[12]) == *(unsigned __int8 *)(a2 + v5[12])))
  {
    return sub_10024A41C(*(uint64_t *)((char *)a1 + v5[13]), *(_QWORD *)(a2 + v5[13]));
  }
  else
  {
    return 0;
  }
}

unint64_t sub_100B028A0()
{
  unint64_t result;

  result = qword_1011141D0;
  if (!qword_1011141D0)
  {
    result = swift_getWitnessTable(byte_100E5E958, &type metadata for SafeLocation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1011141D0);
  }
  return result;
}

unint64_t sub_100B028E4()
{
  unint64_t result;

  result = qword_1011141D8;
  if (!qword_1011141D8)
  {
    result = swift_getWitnessTable(asc_100E5E930, &type metadata for SafeLocationType);
    atomic_store(result, (unint64_t *)&qword_1011141D8);
  }
  return result;
}

unint64_t sub_100B02928()
{
  unint64_t result;

  result = qword_1011141E0;
  if (!qword_1011141E0)
  {
    result = swift_getWitnessTable(a1_32, &type metadata for SafeLocationReferenceFrame);
    atomic_store(result, (unint64_t *)&qword_1011141E0);
  }
  return result;
}

unint64_t sub_100B0296C()
{
  unint64_t result;

  result = qword_1011141E8;
  if (!qword_1011141E8)
  {
    result = swift_getWitnessTable(aY_72, &type metadata for SafeLocationApprovalState);
    atomic_store(result, (unint64_t *)&qword_1011141E8);
  }
  return result;
}

uint64_t sub_100B029B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SafeLocation(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100B029F4(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for SafeLocation(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_100B02A30()
{
  unint64_t result;

  result = qword_1011141F8;
  if (!qword_1011141F8)
  {
    result = swift_getWitnessTable(aQ_40, &type metadata for SafeLocationType);
    atomic_store(result, (unint64_t *)&qword_1011141F8);
  }
  return result;
}

unint64_t sub_100B02A74()
{
  unint64_t result;

  result = qword_101114200;
  if (!qword_101114200)
  {
    result = swift_getWitnessTable(byte_100E5E890, &type metadata for SafeLocationReferenceFrame);
    atomic_store(result, (unint64_t *)&qword_101114200);
  }
  return result;
}

unint64_t sub_100B02AB8()
{
  unint64_t result;

  result = qword_101114208;
  if (!qword_101114208)
  {
    result = swift_getWitnessTable(byte_100E5E868, &type metadata for SafeLocationApprovalState);
    atomic_store(result, (unint64_t *)&qword_101114208);
  }
  return result;
}

_QWORD *sub_100B02AFC()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;

  if ((swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage) & 1) == 0)
    sub_10009B424(0, _swiftEmptyArrayStorage[2] + 1, 1);
  v1 = _swiftEmptyArrayStorage[2];
  v0 = _swiftEmptyArrayStorage[3];
  if (v1 >= v0 >> 1)
    sub_10009B424(v0 > 1, v1 + 1, 1);
  _swiftEmptyArrayStorage[2] = v1 + 1;
  *((_BYTE *)&_swiftEmptyArrayStorage[4] + v1) = 2;
  if ((swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage) & 1) == 0)
    sub_10009B424(0, _swiftEmptyArrayStorage[2] + 1, 1);
  v3 = _swiftEmptyArrayStorage[2];
  v2 = _swiftEmptyArrayStorage[3];
  if (v3 >= v2 >> 1)
    sub_10009B424(v2 > 1, v3 + 1, 1);
  _swiftEmptyArrayStorage[2] = v3 + 1;
  *((_BYTE *)&_swiftEmptyArrayStorage[4] + v3) = 3;
  if ((swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage) & 1) == 0)
    sub_10009B424(0, _swiftEmptyArrayStorage[2] + 1, 1);
  v5 = _swiftEmptyArrayStorage[2];
  v4 = _swiftEmptyArrayStorage[3];
  if (v5 >= v4 >> 1)
    sub_10009B424(v4 > 1, v5 + 1, 1);
  _swiftEmptyArrayStorage[2] = v5 + 1;
  *((_BYTE *)&_swiftEmptyArrayStorage[4] + v5) = 4;
  if ((swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage) & 1) == 0)
    sub_10009B424(0, _swiftEmptyArrayStorage[2] + 1, 1);
  v7 = _swiftEmptyArrayStorage[2];
  v6 = _swiftEmptyArrayStorage[3];
  if (v7 >= v6 >> 1)
    sub_10009B424(v6 > 1, v7 + 1, 1);
  _swiftEmptyArrayStorage[2] = v7 + 1;
  *((_BYTE *)&_swiftEmptyArrayStorage[4] + v7) = 5;
  return _swiftEmptyArrayStorage;
}

uint64_t storeEnumTagSinglePayload for SafeLocationApprovalState(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_100B02E5C + 4 * byte_100E5E307[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_100B02E90 + 4 * byte_100E5E302[v4]))();
}

uint64_t sub_100B02E90(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100B02E98(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100B02EA0);
  return result;
}

uint64_t sub_100B02EAC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100B02EB4);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_100B02EB8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100B02EC0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SafeLocationApprovalState()
{
  return &type metadata for SafeLocationApprovalState;
}

ValueMetadata *type metadata accessor for SafeLocationReferenceFrame()
{
  return &type metadata for SafeLocationReferenceFrame;
}

uint64_t storeEnumTagSinglePayload for SafeLocationType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_100B02F3C + 4 * byte_100E5E311[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_100B02F70 + 4 * byte_100E5E30C[v4]))();
}

uint64_t sub_100B02F70(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100B02F78(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100B02F80);
  return result;
}

uint64_t sub_100B02F8C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100B02F94);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_100B02F98(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100B02FA0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SafeLocationType()
{
  return &type metadata for SafeLocationType;
}

uint64_t storeEnumTagSinglePayload for SafeLocation.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 9 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 9) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF7)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF6)
    return ((uint64_t (*)(void))((char *)&loc_100B03008 + 4 * byte_100E5E31B[v4]))();
  *a1 = a2 + 9;
  return ((uint64_t (*)(void))((char *)sub_100B0303C + 4 * byte_100E5E316[v4]))();
}

uint64_t sub_100B0303C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100B03044(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100B0304CLL);
  return result;
}

uint64_t sub_100B03058(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100B03060);
  *(_BYTE *)result = a2 + 9;
  return result;
}

uint64_t sub_100B03064(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100B0306C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SafeLocation.CodingKeys()
{
  return &type metadata for SafeLocation.CodingKeys;
}

uint64_t _s12searchpartyd26SafeLocationReferenceFrameOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_100B030D4 + 4 * byte_100E5E325[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_100B03108 + 4 * byte_100E5E320[v4]))();
}

uint64_t sub_100B03108(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100B03110(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100B03118);
  return result;
}

uint64_t sub_100B03124(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100B0312CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_100B03130(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100B03138(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SafeLocation.SafeLocationConversionError()
{
  return &type metadata for SafeLocation.SafeLocationConversionError;
}

uint64_t *sub_100B03154(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v21 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v21 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = *a2;
    v8 = a2[1];
    sub_10001BBBC(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    v9 = a3[5];
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for UUID(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
    v13 = a3[7];
    *((_BYTE *)a1 + a3[6]) = *((_BYTE *)a2 + a3[6]);
    v14 = (uint64_t *)((char *)a1 + v13);
    v15 = (uint64_t *)((char *)a2 + v13);
    v16 = v15[1];
    *v14 = *v15;
    v14[1] = v16;
    v17 = a3[9];
    *(uint64_t *)((char *)a1 + a3[8]) = *(uint64_t *)((char *)a2 + a3[8]);
    *(uint64_t *)((char *)a1 + v17) = *(uint64_t *)((char *)a2 + v17);
    v18 = a3[11];
    *(uint64_t *)((char *)a1 + a3[10]) = *(uint64_t *)((char *)a2 + a3[10]);
    *((_BYTE *)a1 + v18) = *((_BYTE *)a2 + v18);
    v19 = a3[13];
    *((_BYTE *)a1 + a3[12]) = *((_BYTE *)a2 + a3[12]);
    v20 = *(uint64_t *)((char *)a2 + v19);
    *(uint64_t *)((char *)a1 + v19) = v20;
    swift_bridgeObjectRetain(v16);
    swift_bridgeObjectRetain(v20);
  }
  return a1;
}

uint64_t sub_100B0325C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  sub_10001BC14(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t *sub_100B032CC(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v6 = *a2;
  v7 = a2[1];
  sub_10001BBBC(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  v8 = a3[5];
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for UUID(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
  v12 = a3[7];
  *((_BYTE *)a1 + a3[6]) = *((_BYTE *)a2 + a3[6]);
  v13 = (uint64_t *)((char *)a1 + v12);
  v14 = (uint64_t *)((char *)a2 + v12);
  v15 = v14[1];
  *v13 = *v14;
  v13[1] = v15;
  v16 = a3[9];
  *(uint64_t *)((char *)a1 + a3[8]) = *(uint64_t *)((char *)a2 + a3[8]);
  *(uint64_t *)((char *)a1 + v16) = *(uint64_t *)((char *)a2 + v16);
  v17 = a3[11];
  *(uint64_t *)((char *)a1 + a3[10]) = *(uint64_t *)((char *)a2 + a3[10]);
  *((_BYTE *)a1 + v17) = *((_BYTE *)a2 + v17);
  v18 = a3[13];
  *((_BYTE *)a1 + a3[12]) = *((_BYTE *)a2 + a3[12]);
  v19 = *(uint64_t *)((char *)a2 + v18);
  *(uint64_t *)((char *)a1 + v18) = v19;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRetain(v19);
  return a1;
}

uint64_t *sub_100B033A8(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v6 = *a2;
  v7 = a2[1];
  sub_10001BBBC(*a2, v7);
  v8 = *a1;
  v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  sub_10001BC14(v8, v9);
  v10 = a3[5];
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for UUID(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 24))(v11, v12, v13);
  *((_BYTE *)a1 + a3[6]) = *((_BYTE *)a2 + a3[6]);
  v14 = a3[7];
  v15 = (uint64_t *)((char *)a1 + v14);
  v16 = (uint64_t *)((char *)a2 + v14);
  *v15 = *v16;
  v17 = v16[1];
  v15[1] = v17;
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRelease();
  *(uint64_t *)((char *)a1 + a3[8]) = *(uint64_t *)((char *)a2 + a3[8]);
  *(uint64_t *)((char *)a1 + a3[9]) = *(uint64_t *)((char *)a2 + a3[9]);
  *(uint64_t *)((char *)a1 + a3[10]) = *(uint64_t *)((char *)a2 + a3[10]);
  *((_BYTE *)a1 + a3[11]) = *((_BYTE *)a2 + a3[11]);
  *((_BYTE *)a1 + a3[12]) = *((_BYTE *)a2 + a3[12]);
  v18 = a3[13];
  v19 = *(uint64_t *)((char *)a2 + v18);
  *(uint64_t *)((char *)a1 + v18) = v19;
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *sub_100B034B8(_OWORD *a1, _OWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UUID(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = a3[7];
  *((_BYTE *)a1 + a3[6]) = *((_BYTE *)a2 + a3[6]);
  *(_OWORD *)((char *)a1 + v10) = *(_OWORD *)((char *)a2 + v10);
  v11 = a3[9];
  *(_QWORD *)((char *)a1 + a3[8]) = *(_QWORD *)((char *)a2 + a3[8]);
  *(_QWORD *)((char *)a1 + v11) = *(_QWORD *)((char *)a2 + v11);
  v12 = a3[11];
  *(_QWORD *)((char *)a1 + a3[10]) = *(_QWORD *)((char *)a2 + a3[10]);
  *((_BYTE *)a1 + v12) = *((_BYTE *)a2 + v12);
  v13 = a3[13];
  *((_BYTE *)a1 + a3[12]) = *((_BYTE *)a2 + a3[12]);
  *(_QWORD *)((char *)a1 + v13) = *(_QWORD *)((char *)a2 + v13);
  return a1;
}

uint64_t *sub_100B03574(uint64_t *a1, _OWORD *a2, int *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v6 = *a1;
  v7 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_10001BC14(v6, v7);
  v8 = a3[5];
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for UUID(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  v12 = a3[7];
  *((_BYTE *)a1 + a3[6]) = *((_BYTE *)a2 + a3[6]);
  v13 = (uint64_t *)((char *)a1 + v12);
  v14 = (uint64_t *)((char *)a2 + v12);
  v16 = *v14;
  v15 = v14[1];
  *v13 = v16;
  v13[1] = v15;
  swift_bridgeObjectRelease();
  v17 = a3[9];
  *(uint64_t *)((char *)a1 + a3[8]) = *(_QWORD *)((char *)a2 + a3[8]);
  *(uint64_t *)((char *)a1 + v17) = *(_QWORD *)((char *)a2 + v17);
  v18 = a3[11];
  *(uint64_t *)((char *)a1 + a3[10]) = *(_QWORD *)((char *)a2 + a3[10]);
  *((_BYTE *)a1 + v18) = *((_BYTE *)a2 + v18);
  v19 = a3[13];
  *((_BYTE *)a1 + a3[12]) = *((_BYTE *)a2 + a3[12]);
  *(uint64_t *)((char *)a1 + v19) = *(_QWORD *)((char *)a2 + v19);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100B03654(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100B03660);
}

uint64_t sub_100B03660(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + *(int *)(a3 + 20), a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 28) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_100B036E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100B036F0);
}

uint64_t sub_100B036F0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + *(int *)(a4 + 20), a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 28) + 8) = (a2 - 1);
  return result;
}

uint64_t sub_100B03770(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[10];

  v4[0] = &unk_100E5E450;
  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    v4[2] = &unk_100E5E468;
    v4[3] = &unk_100E5E480;
    v4[4] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[5] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[6] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[7] = &unk_100E5E498;
    v4[8] = &unk_100E5E4B0;
    v4[9] = (char *)&value witness table for Builtin.BridgeObject + 64;
    swift_initStructMetadata(a1, 256, 10, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_100B0382C()
{
  return sub_100006204(&qword_1011142D0, type metadata accessor for SafeLocation, (uint64_t)&unk_100E5E4C8);
}

unint64_t sub_100B0385C()
{
  unint64_t result;

  result = qword_1011142D8;
  if (!qword_1011142D8)
  {
    result = swift_getWitnessTable(byte_100E5E570, &type metadata for SafeLocation.SafeLocationConversionError);
    atomic_store(result, (unint64_t *)&qword_1011142D8);
  }
  return result;
}

unint64_t sub_100B038A4()
{
  unint64_t result;

  result = qword_1011142E0;
  if (!qword_1011142E0)
  {
    result = swift_getWitnessTable(a1_33, &type metadata for SafeLocation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1011142E0);
  }
  return result;
}

unint64_t sub_100B038EC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1011142E8;
  if (!qword_1011142E8)
  {
    v1 = sub_10001F784(&qword_1011142F0);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_1011142E8);
  }
  return result;
}

unint64_t sub_100B0393C()
{
  unint64_t result;

  result = qword_1011142F8;
  if (!qword_1011142F8)
  {
    result = swift_getWitnessTable(aY_73, &type metadata for SafeLocationType);
    atomic_store(result, (unint64_t *)&qword_1011142F8);
  }
  return result;
}

unint64_t sub_100B03984()
{
  unint64_t result;

  result = qword_101114300;
  if (!qword_101114300)
  {
    result = swift_getWitnessTable(byte_100E5E7A0, &type metadata for SafeLocationReferenceFrame);
    atomic_store(result, (unint64_t *)&qword_101114300);
  }
  return result;
}

unint64_t sub_100B039CC()
{
  unint64_t result;

  result = qword_101114308;
  if (!qword_101114308)
  {
    result = swift_getWitnessTable(byte_100E5E840, &type metadata for SafeLocationApprovalState);
    atomic_store(result, (unint64_t *)&qword_101114308);
  }
  return result;
}

unint64_t sub_100B03A14()
{
  unint64_t result;

  result = qword_101114310;
  if (!qword_101114310)
  {
    result = swift_getWitnessTable(byte_100E5E598, &type metadata for SafeLocation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101114310);
  }
  return result;
}

unint64_t sub_100B03A5C()
{
  unint64_t result;

  result = qword_101114318;
  if (!qword_101114318)
  {
    result = swift_getWitnessTable(byte_100E5E5C0, &type metadata for SafeLocation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101114318);
  }
  return result;
}

uint64_t sub_100B03AA0(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char v14;

  if (a1 == 0xD000000000000010)
  {
    v4 = 0x8000000100EC2FE0;
    if (a2 == 0x8000000100EC2FE0)
      goto LABEL_5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x8000000100EC2FE0, a1, a2, 0) & 1) != 0)
  {
    v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  if (a1 == 0x696669746E656469 && a2 == 0xEA00000000007265)
  {
    v6 = 0xEA00000000007265;
LABEL_11:
    swift_bridgeObjectRelease(v6);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x696669746E656469, 0xEA00000000007265, a1, a2, 0) & 1) != 0)
  {
    v6 = a2;
    goto LABEL_11;
  }
  if (a1 == 1701869940 && a2 == 0xE400000000000000)
  {
    v7 = 0xE400000000000000;
LABEL_17:
    swift_bridgeObjectRelease(v7);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1701869940, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_17;
  }
  if (a1 == 1701667182 && a2 == 0xE400000000000000)
  {
    v8 = 0xE400000000000000;
LABEL_23:
    swift_bridgeObjectRelease(v8);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1701667182, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_23;
  }
  if (a1 == 0x656475746974616CLL && a2 == 0xE800000000000000)
  {
    v9 = 0xE800000000000000;
LABEL_29:
    swift_bridgeObjectRelease(v9);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x656475746974616CLL, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_29;
  }
  if (a1 == 0x64757469676E6F6CLL && a2 == 0xE900000000000065)
  {
    v10 = 0xE900000000000065;
LABEL_35:
    swift_bridgeObjectRelease(v10);
    return 5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x64757469676E6F6CLL, 0xE900000000000065, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_35;
  }
  if (a1 == 0x737569646172 && a2 == 0xE600000000000000)
  {
    v11 = 0xE600000000000000;
LABEL_41:
    swift_bridgeObjectRelease(v11);
    return 6;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x737569646172, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
    goto LABEL_41;
  }
  if (a1 == 0x636E657265666572 && a2 == 0xEE00656D61724665)
  {
    v12 = 0xEE00656D61724665;
LABEL_47:
    swift_bridgeObjectRelease(v12);
    return 7;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x636E657265666572, 0xEE00656D61724665, a1, a2, 0) & 1) != 0)
  {
    v12 = a2;
    goto LABEL_47;
  }
  if (a1 == 0x6C61766F72707061 && a2 == 0xED00006574617453)
  {
    v13 = 0xED00006574617453;
LABEL_53:
    swift_bridgeObjectRelease(v13);
    return 8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6C61766F72707061, 0xED00006574617453, a1, a2, 0) & 1) != 0)
  {
    v13 = a2;
    goto LABEL_53;
  }
  if (a1 == 0xD000000000000011 && a2 == 0x8000000100EE13B0)
  {
    swift_bridgeObjectRelease(0x8000000100EE13B0);
    return 9;
  }
  else
  {
    v14 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x8000000100EE13B0, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v14 & 1) != 0)
      return 9;
    else
      return 10;
  }
}

unint64_t sub_100B03EE0()
{
  unint64_t result;

  result = qword_101114320;
  if (!qword_101114320)
  {
    result = swift_getWitnessTable(aI_48, &type metadata for SafeLocationType);
    atomic_store(result, (unint64_t *)&qword_101114320);
  }
  return result;
}

unint64_t sub_100B03F24()
{
  unint64_t result;

  result = qword_101114328;
  if (!qword_101114328)
  {
    result = swift_getWitnessTable(byte_100E5E728, &type metadata for SafeLocationReferenceFrame);
    atomic_store(result, (unint64_t *)&qword_101114328);
  }
  return result;
}

unint64_t sub_100B03F68()
{
  unint64_t result;

  result = qword_101114330;
  if (!qword_101114330)
  {
    result = swift_getWitnessTable(asc_100E5E7C8, &type metadata for SafeLocationApprovalState);
    atomic_store(result, (unint64_t *)&qword_101114330);
  }
  return result;
}

unint64_t sub_100B03FB0()
{
  Swift::String v0;
  void *object;
  Swift::String v2;

  v0._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt64, &protocol witness table for UInt64);
  object = v0._object;
  String.append(_:)(v0);
  swift_bridgeObjectRelease(object);
  v2._countAndFlagsBits = 41;
  v2._object = (void *)0xE100000000000000;
  String.append(_:)(v2);
  return 0xD000000000000012;
}

ValueMetadata *type metadata accessor for SecureLocationsIndex()
{
  return &type metadata for SecureLocationsIndex;
}

unint64_t sub_100B04048()
{
  unint64_t result;

  result = qword_101114340;
  if (!qword_101114340)
  {
    result = swift_getWitnessTable(asc_100E5EBB0, &type metadata for SecureLocationsIndex);
    atomic_store(result, (unint64_t *)&qword_101114340);
  }
  return result;
}

unint64_t sub_100B04090()
{
  unint64_t result;

  result = qword_101114348;
  if (!qword_101114348)
  {
    result = swift_getWitnessTable(byte_100E5EA58, &type metadata for SecureLocationsIndex);
    atomic_store(result, (unint64_t *)&qword_101114348);
  }
  return result;
}

unint64_t sub_100B040D4(_QWORD *a1)
{
  unint64_t result;

  a1[1] = sub_100B04130();
  a1[2] = sub_100B04174();
  a1[3] = sub_1008BC8D4();
  a1[4] = sub_1008BC918();
  a1[5] = sub_100B041B8();
  a1[6] = sub_100B041FC();
  a1[7] = sub_100B04240();
  result = sub_100B04284();
  a1[8] = result;
  return result;
}

unint64_t sub_100B04130()
{
  unint64_t result;

  result = qword_101114350;
  if (!qword_101114350)
  {
    result = swift_getWitnessTable(byte_100E5EBF8, &type metadata for SecureLocationsIndex);
    atomic_store(result, (unint64_t *)&qword_101114350);
  }
  return result;
}

unint64_t sub_100B04174()
{
  unint64_t result;

  result = qword_101114358;
  if (!qword_101114358)
  {
    result = swift_getWitnessTable(asc_100E5EB88, &type metadata for SecureLocationsIndex);
    atomic_store(result, (unint64_t *)&qword_101114358);
  }
  return result;
}

unint64_t sub_100B041B8()
{
  unint64_t result;

  result = qword_101114360;
  if (!qword_101114360)
  {
    result = swift_getWitnessTable(aQ_41, &type metadata for SecureLocationsIndex);
    atomic_store(result, (unint64_t *)&qword_101114360);
  }
  return result;
}

unint64_t sub_100B041FC()
{
  unint64_t result;

  result = qword_101114368;
  if (!qword_101114368)
  {
    result = swift_getWitnessTable(a9_23, &type metadata for SecureLocationsIndex);
    atomic_store(result, (unint64_t *)&qword_101114368);
  }
  return result;
}

unint64_t sub_100B04240()
{
  unint64_t result;

  result = qword_101114370;
  if (!qword_101114370)
  {
    result = swift_getWitnessTable(aI_49, &type metadata for SecureLocationsIndex);
    atomic_store(result, (unint64_t *)&qword_101114370);
  }
  return result;
}

unint64_t sub_100B04284()
{
  unint64_t result;

  result = qword_101114378;
  if (!qword_101114378)
  {
    result = swift_getWitnessTable(byte_100E5EA80, &type metadata for SecureLocationsIndex);
    atomic_store(result, (unint64_t *)&qword_101114378);
  }
  return result;
}

id sub_100B042C8()
{
  id *v0;
  id v1;
  id v2;

  v1 = *v0;
  v2 = *v0;
  return v1;
}

uint64_t sub_100B042EC()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + 8));
}

uint64_t sub_100B042F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_10000F9B8(v2 + *(int *)(a1 + 24), a2, &qword_1010ED860);
}

uint64_t sub_100B0431C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_10000F9B8(v2 + *(int *)(a1 + 28), a2, (uint64_t *)&unk_1010EA690);
}

uint64_t sub_100B04344(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 32));
}

uint64_t sub_100B04358@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_10000F9B8(v2 + *(int *)(a1 + 36), a2, (uint64_t *)&unk_1010EA690);
}

void sub_100B04380(void *a1)
{
  uint64_t v1;
  int *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v12;
  id v13;
  NSString v14;
  uint64_t v15;
  id v16;
  id v17;
  char *v18;
  uint64_t v19;
  char v20;
  char v21;
  id v22;
  NSString v23;
  unsigned __int8 v24;
  char *v25;
  uint64_t v26;
  id v27;

  v27 = a1;
  v2 = (int *)type metadata accessor for ServiceStateConfigurationLayer(0);
  __chkstk_darwin(v2);
  v4 = (uint64_t *)((char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = SPServiceStateDisabled;
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
  v8 = v7;
  v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
  if (v6 == v9 && v8 == v10)
    v12 = 1;
  else
    v12 = _stringCompareWithSmolCheck(_:_:expecting:)(v6, v8, v9, v10, 0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((sub_100B063D4(2u, 2u, v12 & 1) & 1) != 0)
  {
    v13 = sub_100013BD0();
    static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
    v14 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    v15 = SPSettingsServiceStateKey;
    objc_msgSend(v13, "setObject:forKey:", v14, SPSettingsServiceStateKey);

    v16 = sub_100013BD0();
    v17 = objc_msgSend(v16, "stringForKey:", v15);

    if (!v17)
    {
      if (qword_1010E9E60 != -1)
        swift_once(&qword_1010E9E60, sub_1006C5904);
      v17 = (id)qword_1011B7490;
    }
    v18 = sub_100B04EDC();
    sub_100B05350((uint64_t)v4 + v2[6]);
    sub_100B05AE4((uint64_t)v4 + v2[7]);
    v19 = sub_100B05B04();
    v21 = v20;
    sub_100B05DF4((uint64_t)v4 + v2[9]);
    v22 = sub_100013BD0();
    v23 = String._bridgeToObjectiveC()();
    v24 = objc_msgSend(v22, "BOOLForKey:", v23);

    *v4 = v17;
    v4[1] = v18;
    v25 = (char *)v4 + v2[8];
    *(_QWORD *)v25 = v19;
    v25[8] = v21 & 1;
    *((_BYTE *)v4 + v2[10]) = v24;
    sub_100B07260((uint64_t)v4, v1);

    sub_100B07514((uint64_t)v4);
  }
  else
  {

  }
}

_QWORD *sub_100B045F8()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  Swift::String v17;
  uint64_t v18;
  _QWORD *result;
  void *v20;
  id v21;
  uint64_t v22;
  void *v23;
  void *v24;
  Swift::String v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  void *v37;
  void *v38;
  id v39;
  _QWORD *v40;
  uint64_t v41;

  v1 = v0;
  v2 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v40 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v5);
  v7 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v1[2] = _swiftEmptyArrayStorage;
  sub_10001F6FC();
  v12 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v9 + 104))(v11, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v8);
  static DispatchQoS.unspecified.getter(v12);
  v40 = _swiftEmptyArrayStorage;
  v13 = sub_100006C64((unint64_t *)&qword_1010F0E20, 255, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v14 = sub_10001A9A8((uint64_t *)&unk_1010EA6B0);
  v15 = sub_1000193A4((unint64_t *)&qword_1010F0E30, (uint64_t *)&unk_1010EA6B0, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v40, v14, v15, v2, v13);
  v1[3] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD00000000000003FLL, 0x8000000100ED1D30, v7, v4, v11, 0);
  v1[4] = 0;
  v1[5] = 0;
  v1[6] = 0xD000000000000014;
  v1[7] = 0x8000000100EE0F40;
  v40 = (_QWORD *)static String._unconditionallyBridgeFromObjectiveC(_:)(SPSelfBeaconUUIDKeyBase);
  v41 = v16;
  v17._countAndFlagsBits = 45;
  v17._object = (void *)0xE100000000000000;
  String.append(_:)(v17);
  result = (id)MobileGestalt_get_current_device(v18);
  if (result)
  {
    v20 = result;
    v21 = (id)MobileGestalt_copy_uniqueDeviceID_obj();

    if (v21)
    {
      v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
      v24 = v23;

    }
    else
    {
      v22 = 0;
      v24 = (void *)0xE000000000000000;
    }
    v25._countAndFlagsBits = v22;
    v25._object = v24;
    String.append(_:)(v25);
    swift_bridgeObjectRelease(v24);
    v26 = v40;
    v27 = v41;
    v28 = sub_10001A9A8(&qword_101106C20);
    v29 = swift_allocObject(v28, 128, 7);
    *(_OWORD *)(v29 + 16) = xmmword_100E26E10;
    *(_QWORD *)(v29 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(SPSettingsServiceStateKey);
    *(_QWORD *)(v29 + 40) = v30;
    *(_QWORD *)(v29 + 48) = static String._unconditionallyBridgeFromObjectiveC(_:)(SPSettingsServiceDisabledReasonsKey);
    *(_QWORD *)(v29 + 56) = v31;
    *(_QWORD *)(v29 + 64) = v26;
    *(_QWORD *)(v29 + 72) = v27;
    *(_QWORD *)(v29 + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)(SPBeaconZoneCreationDateKey);
    *(_QWORD *)(v29 + 88) = v32;
    *(_QWORD *)(v29 + 96) = static String._unconditionallyBridgeFromObjectiveC(_:)(SPBeaconZoneCreationErrorCodeKey);
    *(_QWORD *)(v29 + 104) = v33;
    *(_QWORD *)(v29 + 112) = static String._unconditionallyBridgeFromObjectiveC(_:)(SPLastKeyRollDateKey);
    *(_QWORD *)(v29 + 120) = v34;
    v35 = sub_100013BD0();
    objc_allocWithZone((Class)type metadata accessor for UserDefaultsObserver(0));
    swift_retain(v1);
    v36 = UserDefaultsObserver.init(keys:defaults:notificationBlock:)(v29, v35, sub_100B07688, v1);
    v37 = (void *)v1[5];
    v1[5] = v36;

    v38 = (void *)v1[5];
    if (v38)
    {
      v39 = v38;
      dispatch thunk of UserDefaultsObserver.start()();

    }
    return v1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100B0496C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int *v4;
  uint64_t v5;
  _QWORD *v6;
  id v7;
  id v8;
  char *v9;
  uint64_t v10;
  char v11;
  char v12;
  id v13;
  NSString v14;
  unsigned __int8 v15;
  char *v16;
  uint64_t v18;

  v4 = (int *)type metadata accessor for ServiceStateConfigurationLayer(0);
  __chkstk_darwin(v4);
  v6 = (uint64_t *)((char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = sub_100013BD0();
  v8 = objc_msgSend(v7, "stringForKey:", SPSettingsServiceStateKey);

  if (!v8)
  {
    if (qword_1010E9E60 != -1)
      swift_once(&qword_1010E9E60, sub_1006C5904);
    v8 = (id)qword_1011B7490;
  }
  v9 = sub_100B04EDC();
  sub_100B05350((uint64_t)v6 + v4[6]);
  sub_100B05AE4((uint64_t)v6 + v4[7]);
  v10 = sub_100B05B04();
  v12 = v11;
  sub_100B05DF4((uint64_t)v6 + v4[9]);
  v13 = sub_100013BD0();
  v14 = String._bridgeToObjectiveC()();
  v15 = objc_msgSend(v13, "BOOLForKey:", v14);

  *v6 = v8;
  v6[1] = v9;
  v16 = (char *)v6 + v4[8];
  *(_QWORD *)v16 = v10;
  v16[8] = v12 & 1;
  *((_BYTE *)v6 + v4[10]) = v15;
  sub_100B07260((uint64_t)v6, a3);
  return sub_100B07514((uint64_t)v6);
}

uint64_t sub_100B04AF0()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  _QWORD *v3;
  id v4;
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  id v10;
  char *v11;
  uint64_t v12;
  char v13;
  char v14;
  id v15;
  NSString v16;
  unsigned __int8 v17;
  char *v18;
  uint64_t v20;

  v1 = (int *)type metadata accessor for ServiceStateConfigurationLayer(0);
  __chkstk_darwin(v1);
  v3 = (uint64_t *)((char *)&v20 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1010E9E60 != -1)
    swift_once(&qword_1010E9E60, sub_1006C5904);
  sub_100B04380((id)qword_1011B7490);
  v4 = sub_100013BD0();
  objc_msgSend(v4, "removeObjectForKey:", SPBeaconZoneCreationDateKey);

  v5 = sub_100013BD0();
  objc_msgSend(v5, "removeObjectForKey:", SPBeaconZoneCreationErrorCodeKey);

  v6 = sub_100013BD0();
  objc_msgSend(v6, "removeObjectForKey:", SPLastKeyRollDateKey);

  v8 = static os_log_type_t.default.getter(v7);
  if (qword_1010EA2D0 != -1)
    swift_once(&qword_1010EA2D0, sub_100B5DFA4);
  os_log(_:dso:log:_:_:)(v8, &_mh_execute_header, qword_1011B7DB0, "ServiceStateProvider reset to default settings.", 47, 2, _swiftEmptyArrayStorage);
  v9 = sub_100013BD0();
  v10 = objc_msgSend(v9, "stringForKey:", SPSettingsServiceStateKey);

  if (!v10)
    v10 = (id)qword_1011B7490;
  v11 = sub_100B04EDC();
  sub_100B05350((uint64_t)v3 + v1[6]);
  sub_100B05AE4((uint64_t)v3 + v1[7]);
  v12 = sub_100B05B04();
  v14 = v13;
  sub_100B05DF4((uint64_t)v3 + v1[9]);
  v15 = sub_100013BD0();
  v16 = String._bridgeToObjectiveC()();
  v17 = objc_msgSend(v15, "BOOLForKey:", v16);

  *v3 = v10;
  v3[1] = v11;
  v18 = (char *)v3 + v1[8];
  *(_QWORD *)v18 = v12;
  v18[8] = v14 & 1;
  *((_BYTE *)v3 + v1[10]) = v17;
  sub_100B07260((uint64_t)v3, v0);
  return sub_100B07514((uint64_t)v3);
}

uint64_t sub_100B04D40(char a1, char a2)
{
  uint64_t v2;
  int *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t result;
  id v9;
  id v10;
  char *v11;
  uint64_t v12;
  char v13;
  char v14;
  id v15;
  NSString v16;
  unsigned __int8 v17;
  char *v18;
  uint64_t v19;

  v5 = (int *)type metadata accessor for ServiceStateConfigurationLayer(0);
  __chkstk_darwin(v5);
  v7 = (uint64_t *)((char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  result = sub_100B063D4(a1 & 1, a2 & 1, 2u);
  if ((result & 1) != 0)
  {
    v9 = sub_100013BD0();
    v10 = objc_msgSend(v9, "stringForKey:", SPSettingsServiceStateKey);

    if (!v10)
    {
      if (qword_1010E9E60 != -1)
        swift_once(&qword_1010E9E60, sub_1006C5904);
      v10 = (id)qword_1011B7490;
    }
    v11 = sub_100B04EDC();
    sub_100B05350((uint64_t)v7 + v5[6]);
    sub_100B05AE4((uint64_t)v7 + v5[7]);
    v12 = sub_100B05B04();
    v14 = v13;
    sub_100B05DF4((uint64_t)v7 + v5[9]);
    v15 = sub_100013BD0();
    v16 = String._bridgeToObjectiveC()();
    v17 = objc_msgSend(v15, "BOOLForKey:", v16);

    *v7 = v10;
    v7[1] = v11;
    v18 = (char *)v7 + v5[8];
    *(_QWORD *)v18 = v12;
    v18[8] = v14 & 1;
    *((_BYTE *)v7 + v5[10]) = v17;
    sub_100B07260((uint64_t)v7, v2);
    return sub_100B07514((uint64_t)v7);
  }
  return result;
}

char *sub_100B04EDC()
{
  id v0;
  id v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  char *v6;
  uint64_t v7;
  NSString v8;
  unint64_t v9;
  unint64_t v10;

  v0 = sub_100013BD0();
  v1 = objc_msgSend(v0, "arrayForKey:", SPSettingsServiceDisabledReasonsKey);

  if (!v1)
    return 0;
  v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v1, (char *)&type metadata for Any + 8);

  v3 = sub_1003626B0(v2);
  swift_bridgeObjectRelease(v2);
  if (!v3)
    return 0;
  v4 = v3[2];
  if (v4)
  {
    swift_bridgeObjectRetain(v3);
    v5 = v3 + 5;
    v6 = (char *)&_swiftEmptyArrayStorage;
    do
    {
      v7 = *v5;
      swift_bridgeObjectRetain(*v5);
      v8 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v7);
      if ((swift_isUniquelyReferenced_nonNull_native(v6) & 1) == 0)
        v6 = sub_1007C8534(0, *((_QWORD *)v6 + 2) + 1, 1, v6);
      v10 = *((_QWORD *)v6 + 2);
      v9 = *((_QWORD *)v6 + 3);
      if (v10 >= v9 >> 1)
        v6 = sub_1007C8534((char *)(v9 > 1), v10 + 1, 1, v6);
      v5 += 2;
      *((_QWORD *)v6 + 2) = v10 + 1;
      *(_QWORD *)&v6[8 * v10 + 32] = v8;
      --v4;
    }
    while (v4);
    swift_bridgeObjectRelease(v3);
  }
  else
  {
    v6 = (char *)&_swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRelease(v3);
  return v6;
}

void sub_100B05054(uint64_t a1)
{
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  id v10;
  Class isa;

  if (a1)
  {
    v2 = *(_QWORD *)(a1 + 16);
    if (v2)
    {
      sub_10009A2F4(0, v2, 0);
      v3 = 0;
      do
      {
        v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(a1 + 8 * v3 + 32));
        v6 = v5;
        v8 = _swiftEmptyArrayStorage[2];
        v7 = _swiftEmptyArrayStorage[3];
        if (v8 >= v7 >> 1)
          sub_10009A2F4(v7 > 1, v8 + 1, 1);
        ++v3;
        _swiftEmptyArrayStorage[2] = v8 + 1;
        v9 = &_swiftEmptyArrayStorage[2 * v8];
        v9[4] = v4;
        v9[5] = v6;
      }
      while (v2 != v3);
    }
    swift_bridgeObjectRelease(a1);
  }
  v10 = sub_100013BD0();
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
  objc_msgSend(v10, "setObject:forKey:", isa, SPSettingsServiceDisabledReasonsKey);

}

uint64_t sub_100B0518C(char a1)
{
  uint64_t v1;
  int *v3;
  uint64_t v4;
  _QWORD *v5;
  id v6;
  NSString v7;
  id v8;
  id v9;
  char *v10;
  uint64_t v11;
  char v12;
  char v13;
  id v14;
  NSString v15;
  unsigned __int8 v16;
  char *v17;
  uint64_t v19;

  v3 = (int *)type metadata accessor for ServiceStateConfigurationLayer(0);
  __chkstk_darwin(v3);
  v5 = (uint64_t *)((char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = sub_100013BD0();
  v7 = String._bridgeToObjectiveC()();
  objc_msgSend(v6, "setBool:forKey:", a1 & 1, v7);

  v8 = sub_100013BD0();
  v9 = objc_msgSend(v8, "stringForKey:", SPSettingsServiceStateKey);

  if (!v9)
  {
    if (qword_1010E9E60 != -1)
      swift_once(&qword_1010E9E60, sub_1006C5904);
    v9 = (id)qword_1011B7490;
  }
  v10 = sub_100B04EDC();
  sub_100B05350((uint64_t)v5 + v3[6]);
  sub_100B05AE4((uint64_t)v5 + v3[7]);
  v11 = sub_100B05B04();
  v13 = v12;
  sub_100B05DF4((uint64_t)v5 + v3[9]);
  v14 = sub_100013BD0();
  v15 = String._bridgeToObjectiveC()();
  v16 = objc_msgSend(v14, "BOOLForKey:", v15);

  *v5 = v9;
  v5[1] = v10;
  v17 = (char *)v5 + v3[8];
  *(_QWORD *)v17 = v11;
  v17[8] = v13 & 1;
  *((_BYTE *)v5 + v3[10]) = v16;
  sub_100B07260((uint64_t)v5, v1);
  return sub_100B07514((uint64_t)v5);
}

id sub_100B05350@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  Swift::String v6;
  uint64_t v7;
  id result;
  void *v9;
  id v10;
  uint64_t v11;
  void *v12;
  void *v13;
  Swift::String v14;
  uint64_t v15;
  id v16;
  NSString v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v2 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v2);
  v4 = (char *)&v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(SPSelfBeaconUUIDKeyBase);
  v26 = v5;
  v6._countAndFlagsBits = 45;
  v6._object = (void *)0xE100000000000000;
  String.append(_:)(v6);
  result = (id)MobileGestalt_get_current_device(v7);
  if (result)
  {
    v9 = result;
    v10 = (id)MobileGestalt_copy_uniqueDeviceID_obj();

    if (v10)
    {
      v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
      v13 = v12;

    }
    else
    {
      v11 = 0;
      v13 = (void *)0xE000000000000000;
    }
    v14._countAndFlagsBits = v11;
    v14._object = v13;
    String.append(_:)(v14);
    swift_bridgeObjectRelease(v13);
    v15 = v26;
    v16 = sub_100013BD0();
    v17 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v15);
    v18 = objc_msgSend(v16, "stringForKey:", v17);

    if (!v18)
      goto LABEL_8;
    v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
    v21 = v20;

    UUID.init(uuidString:)(v19, v21);
    swift_bridgeObjectRelease(v21);
    v22 = type metadata accessor for UUID(0);
    v23 = *(_QWORD *)(v22 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v4, 1, v22) == 1)
    {
      sub_100004048((uint64_t)v4, &qword_1010ED860);
LABEL_8:
      v24 = type metadata accessor for UUID(0);
      return (id)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(a1, 1, 1, v24);
    }
    (*(void (**)(uint64_t, char *, uint64_t))(v23 + 32))(a1, v4, v22);
    return (id)(*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v23 + 56))(a1, 0, 1, v22);
  }
  else
  {
    __break(1u);
  }
  return result;
}

id sub_100B05560(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  unsigned int (*v20)(uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  Swift::String v24;
  uint64_t v25;
  id result;
  void *v27;
  id v28;
  uint64_t v29;
  void *v30;
  void *v31;
  uint64_t v32;
  char v33;
  void (*v34)(char *, uint64_t);
  Swift::String v35;
  id v36;
  uint64_t v37;
  NSString v38;
  NSString v39;
  id v40;
  id v41;
  char *v42;
  _QWORD *v43;
  int *v44;
  uint64_t v45;
  char v46;
  char v47;
  id v48;
  NSString v49;
  unsigned __int8 v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  v53 = type metadata accessor for ServiceStateConfigurationLayer(0);
  __chkstk_darwin(v53);
  v54 = (char *)&v52 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v52 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A9A8((uint64_t *)&unk_10110EE90);
  __chkstk_darwin(v8);
  v10 = (char *)&v52 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10001A9A8(&qword_1010ED860);
  v12 = __chkstk_darwin(v11);
  v55 = (char *)&v52 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v12);
  v16 = (char *)&v52 - v15;
  __chkstk_darwin(v14);
  v18 = (char *)&v52 - v17;
  v56 = v1;
  sub_100B05350((uint64_t)&v52 - v17);
  v19 = (uint64_t)&v10[*(int *)(v8 + 48)];
  v57 = a1;
  sub_10000F9B8(a1, (uint64_t)v10, &qword_1010ED860);
  sub_10000F9B8((uint64_t)v18, v19, &qword_1010ED860);
  v20 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (v20((uint64_t)v10, 1, v4) == 1)
  {
    sub_100004048((uint64_t)v18, &qword_1010ED860);
    if (v20(v19, 1, v4) == 1)
    {
      sub_100004048((uint64_t)v10, &qword_1010ED860);
      return (id)sub_100004048(v57, &qword_1010ED860);
    }
    goto LABEL_6;
  }
  sub_10000F9B8((uint64_t)v10, (uint64_t)v16, &qword_1010ED860);
  if (v20(v19, 1, v4) == 1)
  {
    sub_100004048((uint64_t)v18, &qword_1010ED860);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v16, v4);
LABEL_6:
    sub_100004048((uint64_t)v10, (uint64_t *)&unk_10110EE90);
    v22 = (uint64_t)v55;
    v21 = v56;
    goto LABEL_7;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 32))(v7, v19, v4);
  v32 = sub_100006C64(&qword_1010EE520, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v33 = dispatch thunk of static Equatable.== infix(_:_:)(v16, v7, v4, v32);
  v34 = *(void (**)(char *, uint64_t))(v5 + 8);
  v34(v7, v4);
  sub_100004048((uint64_t)v18, &qword_1010ED860);
  v34(v16, v4);
  sub_100004048((uint64_t)v10, &qword_1010ED860);
  v22 = (uint64_t)v55;
  v21 = v56;
  if ((v33 & 1) != 0)
    return (id)sub_100004048(v57, &qword_1010ED860);
LABEL_7:
  v58 = static String._unconditionallyBridgeFromObjectiveC(_:)(SPSelfBeaconUUIDKeyBase);
  v59 = v23;
  v24._countAndFlagsBits = 45;
  v24._object = (void *)0xE100000000000000;
  String.append(_:)(v24);
  result = (id)MobileGestalt_get_current_device(v25);
  if (result)
  {
    v27 = result;
    v28 = (id)MobileGestalt_copy_uniqueDeviceID_obj();

    if (v28)
    {
      v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(v28);
      v31 = v30;

    }
    else
    {
      v29 = 0;
      v31 = (void *)0xE000000000000000;
    }
    v35._countAndFlagsBits = v29;
    v35._object = v31;
    String.append(_:)(v35);
    swift_bridgeObjectRelease();
    v36 = sub_100013BD0();
    sub_10000F9B8(v57, v22, &qword_1010ED860);
    v37 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v20)(v22, 1, v4);
    if ((_DWORD)v37 == 1)
    {
      sub_100004048(v22, &qword_1010ED860);
    }
    else
    {
      UUID.uuidString.getter(v37);
      (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v22, v4);
    }
    v38 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    v39 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    objc_msgSend(v36, "setObject:forKey:", v38, v39);

    v40 = sub_100013BD0();
    v41 = objc_msgSend(v40, "stringForKey:", SPSettingsServiceStateKey);

    if (!v41)
    {
      if (qword_1010E9E60 != -1)
        swift_once(&qword_1010E9E60, sub_1006C5904);
      v41 = (id)qword_1011B7490;
    }
    v42 = sub_100B04EDC();
    v44 = (int *)v53;
    v43 = v54;
    sub_100B05350((uint64_t)&v54[*(int *)(v53 + 24)]);
    sub_100B05AE4((uint64_t)v43 + v44[7]);
    v45 = sub_100B05B04();
    v47 = v46;
    sub_100B05DF4((uint64_t)v43 + v44[9]);
    v48 = sub_100013BD0();
    v49 = String._bridgeToObjectiveC()();
    v50 = objc_msgSend(v48, "BOOLForKey:", v49);

    *v43 = v41;
    v43[1] = v42;
    v51 = (char *)v43 + v44[8];
    *(_QWORD *)v51 = v45;
    v51[8] = v47 & 1;
    *((_BYTE *)v43 + v44[10]) = v50;
    sub_100B07260((uint64_t)v43, v21);
    sub_100004048(v57, &qword_1010ED860);
    return (id)sub_100B07514((uint64_t)v43);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100B05AE4@<X0>(uint64_t a1@<X8>)
{
  return sub_100B05E00(&SPBeaconZoneCreationDateKey, a1);
}

uint64_t sub_100B05AF0(uint64_t a1)
{
  return sub_100B05F20(a1, (void (*)(uint64_t))sub_100B05AE4, &SPBeaconZoneCreationDateKey);
}

uint64_t sub_100B05B04()
{
  id v0;
  id v1;
  uint64_t v3;
  _OWORD v4[2];
  _BYTE v5[24];
  uint64_t v6;

  v0 = sub_100013BD0();
  v1 = objc_msgSend(v0, "objectForKey:", SPBeaconZoneCreationErrorCodeKey);

  if (v1)
  {
    _bridgeAnyObjectToAny(_:)(v4, v1);
    swift_unknownObjectRelease(v1);
  }
  else
  {
    memset(v4, 0, sizeof(v4));
  }
  sub_100147814((uint64_t)v4, (uint64_t)v5);
  if (v6)
  {
    if (swift_dynamicCast(&v3, v5, (char *)&type metadata for Any + 8, &type metadata for Int, 6))
      return v3;
    else
      return 0;
  }
  else
  {
    sub_100004048((uint64_t)v5, (uint64_t *)&unk_1010F6390);
    return 0;
  }
}

uint64_t sub_100B05BE0(uint64_t a1, char a2)
{
  uint64_t v2;
  int *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t result;
  char v9;
  id v10;
  id v11;
  id v12;
  id v13;
  char *v14;
  uint64_t v15;
  char v16;
  char v17;
  id v18;
  NSString v19;
  unsigned __int8 v20;
  char *v21;
  uint64_t v22;

  v5 = (int *)type metadata accessor for ServiceStateConfigurationLayer(0);
  __chkstk_darwin(v5);
  v7 = (uint64_t *)((char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  result = sub_100B05B04();
  if ((a2 & 1) != 0)
  {
    if ((v9 & 1) != 0)
      return result;
    v11 = sub_100013BD0();
    objc_msgSend(v11, "removeObjectForKey:", SPBeaconZoneCreationErrorCodeKey);
  }
  else
  {
    if ((v9 & 1) == 0 && result == a1)
      return result;
    v10 = sub_100013BD0();
    v11 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithInteger:", a1);
    objc_msgSend(v10, "setObject:forKey:", v11, SPBeaconZoneCreationErrorCodeKey);

  }
  v12 = sub_100013BD0();
  v13 = objc_msgSend(v12, "stringForKey:", SPSettingsServiceStateKey);

  if (!v13)
  {
    if (qword_1010E9E60 != -1)
      swift_once(&qword_1010E9E60, sub_1006C5904);
    v13 = (id)qword_1011B7490;
  }
  v14 = sub_100B04EDC();
  sub_100B05350((uint64_t)v7 + v5[6]);
  sub_100B05AE4((uint64_t)v7 + v5[7]);
  v15 = sub_100B05B04();
  v17 = v16;
  sub_100B05DF4((uint64_t)v7 + v5[9]);
  v18 = sub_100013BD0();
  v19 = String._bridgeToObjectiveC()();
  v20 = objc_msgSend(v18, "BOOLForKey:", v19);

  *v7 = v13;
  v7[1] = v14;
  v21 = (char *)v7 + v5[8];
  *(_QWORD *)v21 = v15;
  v21[8] = v17 & 1;
  *((_BYTE *)v7 + v5[10]) = v20;
  sub_100B07260((uint64_t)v7, v2);
  return sub_100B07514((uint64_t)v7);
}

uint64_t sub_100B05DF4@<X0>(uint64_t a1@<X8>)
{
  return sub_100B05E00(&SPLastKeyRollDateKey, a1);
}

uint64_t sub_100B05E00@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  id v4;
  id v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  _OWORD v10[2];
  _BYTE v11[24];
  uint64_t v12;

  v4 = sub_100013BD0();
  v5 = objc_msgSend(v4, "objectForKey:", *a1);

  if (v5)
  {
    _bridgeAnyObjectToAny(_:)(v10, v5);
    swift_unknownObjectRelease(v5);
  }
  else
  {
    memset(v10, 0, sizeof(v10));
  }
  sub_100147814((uint64_t)v10, (uint64_t)v11);
  if (v12)
  {
    v6 = type metadata accessor for Date(0);
    v7 = swift_dynamicCast(a2, v11, (char *)&type metadata for Any + 8, v6, 6);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(a2, v7 ^ 1u, 1, v6);
  }
  else
  {
    sub_100004048((uint64_t)v11, (uint64_t *)&unk_1010F6390);
    v9 = type metadata accessor for Date(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(a2, 1, 1, v9);
  }
}

uint64_t sub_100B05F0C(uint64_t a1)
{
  return sub_100B05F20(a1, (void (*)(uint64_t))sub_100B05DF4, &SPLastKeyRollDateKey);
}

uint64_t sub_100B05F20(uint64_t a1, void (*a2)(uint64_t), _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  unsigned int (*v23)(uint64_t, uint64_t, uint64_t);
  id v24;
  uint64_t v25;
  Class isa;
  id v27;
  id v28;
  char *v29;
  _QWORD *v30;
  int *v31;
  uint64_t v32;
  char v33;
  char v34;
  id v35;
  NSString v36;
  unsigned __int8 v37;
  char *v38;
  uint64_t v40;
  char v41;
  void (*v42)(char *, uint64_t);
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  char *v46;
  void (*v47)(uint64_t);
  uint64_t v48;

  v44 = a3;
  v47 = a2;
  v48 = a1;
  v4 = v3;
  v45 = type metadata accessor for ServiceStateConfigurationLayer(0);
  __chkstk_darwin(v45);
  v46 = (char *)&v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v43 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10001A9A8(&qword_1010ED570);
  __chkstk_darwin(v10);
  v12 = (char *)&v43 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  v14 = __chkstk_darwin(v13);
  v43 = (uint64_t)&v43 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v14);
  v18 = (char *)&v43 - v17;
  v19 = __chkstk_darwin(v16);
  v21 = (char *)&v43 - v20;
  v47(v19);
  v22 = (uint64_t)&v12[*(int *)(v10 + 48)];
  sub_10000F9B8(v48, (uint64_t)v12, (uint64_t *)&unk_1010EA690);
  sub_10000F9B8((uint64_t)v21, v22, (uint64_t *)&unk_1010EA690);
  v23 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  if (v23((uint64_t)v12, 1, v6) == 1)
  {
    sub_100004048((uint64_t)v21, (uint64_t *)&unk_1010EA690);
    if (v23(v22, 1, v6) == 1)
    {
      sub_100004048((uint64_t)v12, (uint64_t *)&unk_1010EA690);
      return sub_100004048(v48, (uint64_t *)&unk_1010EA690);
    }
    goto LABEL_6;
  }
  sub_10000F9B8((uint64_t)v12, (uint64_t)v18, (uint64_t *)&unk_1010EA690);
  if (v23(v22, 1, v6) == 1)
  {
    sub_100004048((uint64_t)v21, (uint64_t *)&unk_1010EA690);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v18, v6);
LABEL_6:
    sub_100004048((uint64_t)v12, &qword_1010ED570);
    goto LABEL_7;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 32))(v9, v22, v6);
  v40 = sub_100006C64(&qword_1010EDA20, 255, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  v41 = dispatch thunk of static Equatable.== infix(_:_:)(v18, v9, v6, v40);
  v42 = *(void (**)(char *, uint64_t))(v7 + 8);
  v42(v9, v6);
  sub_100004048((uint64_t)v21, (uint64_t *)&unk_1010EA690);
  v42(v18, v6);
  sub_100004048((uint64_t)v12, (uint64_t *)&unk_1010EA690);
  if ((v41 & 1) != 0)
    return sub_100004048(v48, (uint64_t *)&unk_1010EA690);
LABEL_7:
  v24 = sub_100013BD0();
  v25 = v43;
  sub_10000F9B8(v48, v43, (uint64_t *)&unk_1010EA690);
  if (v23(v25, 1, v6) == 1)
  {
    isa = 0;
  }
  else
  {
    isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v25, v6);
  }
  objc_msgSend(v24, "setObject:forKey:", isa, *v44);

  swift_unknownObjectRelease(isa);
  v27 = sub_100013BD0();
  v28 = objc_msgSend(v27, "stringForKey:", SPSettingsServiceStateKey);

  if (!v28)
  {
    if (qword_1010E9E60 != -1)
      swift_once(&qword_1010E9E60, sub_1006C5904);
    v28 = (id)qword_1011B7490;
  }
  v29 = sub_100B04EDC();
  v31 = (int *)v45;
  v30 = v46;
  sub_100B05350((uint64_t)&v46[*(int *)(v45 + 24)]);
  sub_100B05AE4((uint64_t)v30 + v31[7]);
  v32 = sub_100B05B04();
  v34 = v33;
  sub_100B05DF4((uint64_t)v30 + v31[9]);
  v35 = sub_100013BD0();
  v36 = String._bridgeToObjectiveC()();
  v37 = objc_msgSend(v35, "BOOLForKey:", v36);

  *v30 = v28;
  v30[1] = v29;
  v38 = (char *)v30 + v31[8];
  *(_QWORD *)v38 = v32;
  v38[8] = v34 & 1;
  *((_BYTE *)v30 + v31[10]) = v37;
  sub_100B07260((uint64_t)v30, v4);
  sub_100004048(v48, (uint64_t *)&unk_1010EA690);
  return sub_100B07514((uint64_t)v30);
}

uint64_t sub_100B063D4(unsigned __int8 a1, unsigned __int8 a2, unsigned __int8 a3)
{
  int v5;
  char *v6;
  char *v7;
  void *v8;
  int v9;
  char v10;
  id v11;
  void *v12;
  id v13;
  void *v14;
  int v15;
  id *v16;
  char v17;
  id v18;
  void *v19;
  id v20;
  void *v21;
  char v22;
  uint64_t v23;
  _QWORD *v24;
  id v26;
  uint64_t v27;

  v5 = a2;
  v6 = sub_100B04EDC();
  if (v6)
  {
    v7 = v6;
    v8 = (void *)sub_100CA7F1C((uint64_t)v6);
    swift_bridgeObjectRelease(v7);
  }
  else
  {
    v8 = &_swiftEmptySetSingleton;
  }
  v9 = a1;
  v27 = (uint64_t)v8;
  if (v5 == 2)
  {
    v10 = 0;
  }
  else if ((v5 & 1) != 0)
  {
    v11 = SPDisabledReasonLowAccountSecurity;
    v12 = (void *)sub_100C80EDC((uint64_t)v11);

    v13 = SPDisabledReasoniCloudSignedOut;
    v14 = (void *)sub_100C80EDC((uint64_t)v13);

    if (v12)
    {

      v10 = 1;
    }
    else
    {
      v10 = v14 != 0;

    }
  }
  else
  {
    v10 = sub_100A0A1E0(&v26, SPDisabledReasonLowAccountSecurity);

  }
  v15 = a3;
  if (v9 != 2)
  {
    v16 = (id *)&SPDisabledReasoniCloudSignedOut;
    if ((v9 & 1) == 0)
    {
      v17 = sub_100A0A1E0(&v26, SPDisabledReasoniCloudSignedOut);

      v10 |= v17;
      v16 = (id *)&SPDisabledReasonLowAccountSecurity;
    }
    v18 = *v16;
    v19 = (void *)sub_100C80EDC((uint64_t)v18);

    v10 |= v19 != 0;
  }
  if (v15 != 2)
  {
    if ((v15 & 1) != 0)
    {
      v22 = sub_100A0A1E0(&v26, SPDisabledReasonUserOptOut);

      v10 |= v22;
    }
    else
    {
      v20 = SPDisabledReasonUserOptOut;
      v21 = (void *)sub_100C80EDC((uint64_t)v20);

      if ((v10 & 1) != 0)
      {

        v10 = 1;
      }
      else
      {
        v10 = v21 != 0;

      }
    }
  }
  v23 = v27;
  v24 = sub_100508C74(v27);
  swift_bridgeObjectRelease(v23);
  sub_100B05054((uint64_t)v24);
  return v10 & 1;
}

uint64_t sub_100B065FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  char isEscapingClosureAtFileLocation;
  uint64_t result;
  _QWORD aBlock[6];

  v5 = sub_10001A9A8(&qword_1010ED378);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  __chkstk_darwin(v5);
  sub_100030784(a1, (uint64_t)aBlock);
  v8 = swift_allocObject(&unk_1010AC150, 24, 7);
  swift_weakInit(v8 + 16, v2);
  v9 = sub_10001A9A8(&qword_1011054C0);
  Subscription.init(subscriber:unsubscribeBlock:)(aBlock, sub_100B07234, v8, v9);
  v10 = *(NSObject **)(v2 + 24);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)aBlock - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), a2, v5);
  v11 = *(unsigned __int8 *)(v6 + 80);
  v12 = (v11 + 24) & ~v11;
  v13 = swift_allocObject(&unk_1010AC178, v12 + v7, v11 | 7);
  *(_QWORD *)(v13 + 16) = v2;
  (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(v13 + v12, (char *)aBlock - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
  v14 = swift_allocObject(&unk_1010AC1A0, 32, 7);
  *(_QWORD *)(v14 + 16) = sub_100710510;
  *(_QWORD *)(v14 + 24) = v13;
  aBlock[4] = sub_10005CBA4;
  aBlock[5] = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10001D8B8;
  aBlock[3] = &unk_1010AC1B8;
  v15 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v10, v15);
  _Block_release(v15);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v14, "", 113, 294, 32, 1);
  swift_release();
  result = swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    __break(1u);
  return result;
}

uint64_t sub_100B067F8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  _BYTE v5[24];

  v3 = a2 + 16;
  swift_beginAccess(a2 + 16, v5, 0, 0);
  result = swift_weakLoadStrong(v3);
  if (result)
  {
    sub_100B06878(a1);
    return swift_release();
  }
  return result;
}

uint64_t sub_100B06878(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  char isEscapingClosureAtFileLocation;
  uint64_t result;
  _QWORD aBlock[6];

  v3 = sub_10001A9A8(&qword_1010ED378);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  __chkstk_darwin(v3);
  v6 = *(NSObject **)(v1 + 24);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))((char *)aBlock - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v3);
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = (v7 + 24) & ~v7;
  v9 = swift_allocObject(&unk_1010AC0D8, v8 + v5, v7 | 7);
  *(_QWORD *)(v9 + 16) = v1;
  (*(void (**)(uint64_t, char *, uint64_t))(v4 + 32))(v9 + v8, (char *)aBlock - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
  v10 = swift_allocObject(&unk_1010AC100, 32, 7);
  *(_QWORD *)(v10 + 16) = sub_1007104BC;
  *(_QWORD *)(v10 + 24) = v9;
  aBlock[4] = sub_10001D850;
  aBlock[5] = v10;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10001D8B8;
  aBlock[3] = &unk_1010AC118;
  v11 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v6, v11);
  _Block_release(v11);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v10, "", 113, 302, 32, 1);
  swift_release();
  result = swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    __break(1u);
  return result;
}

uint64_t sub_100B06A28(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, char *, uint64_t);
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  void *v41;
  const void *v42;
  uint64_t v43;
  void (*v44)(char *, uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unsigned int v52;
  void (*v53)(char *, char *, uint64_t);
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  _QWORD *v70;
  _QWORD aBlock[5];
  uint64_t v72;
  __int128 v73;
  char v74[8];
  char v75[8];

  v60 = a2;
  v3 = type metadata accessor for DispatchWorkItemFlags(0);
  v59 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v5 = (char *)&v47 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v47 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS.QoSClass(0);
  v63 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v62 = (char *)&v47 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v69 = sub_10001A9A8(&qword_1010ED378);
  v65 = *(_QWORD *)(v69 - 8);
  v12 = *(_QWORD *)(v65 + 64);
  v13 = __chkstk_darwin(v69);
  v61 = (char *)&v47 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v67 = (char *)&v47 - v14;
  a1 += 16;
  swift_beginAccess(a1, v75, 0, 0);
  result = swift_weakLoadStrong(a1);
  if (result)
  {
    v16 = result;
    v64 = v9;
    v17 = v3;
    swift_beginAccess(result + 16, v74, 0, 0);
    v18 = *(_QWORD *)(v16 + 16);
    swift_bridgeObjectRetain(v18);
    swift_release(v16);
    v19 = *(_QWORD *)(v18 + 16);
    if (v19)
    {
      v57 = sub_10001F6FC();
      v20 = *(unsigned __int8 *)(v65 + 80);
      v47 = v18;
      v21 = (char *)(v18 + ((v20 + 32) & ~v20));
      v56 = *(_QWORD *)(v65 + 72);
      v54 = v20 | 7;
      v53 = *(void (**)(char *, char *, uint64_t))(v65 + 16);
      v55 = (v20 + 16) & ~v20;
      v52 = enum case for DispatchQoS.QoSClass.default(_:);
      v51 = (v12 + v55 + 7) & 0xFFFFFFFFFFFFFFF8;
      v50 = v51 + 40;
      v49 = v17;
      v48 = v5;
      v22 = v65;
      v23 = v69;
      v58 = v7;
      do
      {
        v68 = v21;
        v66 = v19;
        v24 = v67;
        v25 = v53;
        v53(v67, v21, v23);
        v26 = v63;
        v27 = v62;
        (*(void (**)(char *, _QWORD, uint64_t))(v63 + 104))(v62, v52, v10);
        v28 = static OS_dispatch_queue.global(qos:)(v27);
        (*(void (**)(char *, uint64_t))(v26 + 8))(v27, v10);
        v29 = v61;
        v25(v61, v24, v69);
        sub_100030784(v60, (uint64_t)&v73);
        v30 = swift_allocObject(&unk_1010AC240, v50, v54);
        (*(void (**)(uint64_t, char *, uint64_t))(v22 + 32))(v30 + v55, v29, v69);
        sub_10000F9FC(&v73, v30 + v51);
        aBlock[4] = sub_100B07644;
        v72 = v30;
        aBlock[0] = _NSConcreteStackBlock;
        aBlock[1] = 1107296256;
        aBlock[2] = sub_100016FB8;
        aBlock[3] = &unk_1010AC258;
        v31 = v10;
        v32 = _Block_copy(aBlock);
        static DispatchQoS.unspecified.getter(v32);
        v70 = _swiftEmptyArrayStorage;
        v33 = v6;
        v34 = sub_100006C64((unint64_t *)&qword_1010F0E50, 255, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
        v35 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
        v36 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
        v37 = v48;
        v38 = v49;
        v39 = v59;
        v40 = v64;
        dispatch thunk of SetAlgebra.init<A>(_:)(&v70, v35, v36, v49, v34);
        v41 = (void *)v28;
        OS_dispatch_queue.async(group:qos:flags:execute:)(0, v40, v37, v32);
        v23 = v69;
        v42 = v32;
        v10 = v31;
        v22 = v65;
        _Block_release(v42);

        v43 = v58;
        (*(void (**)(char *, uint64_t))(v39 + 8))(v37, v38);
        v44 = *(void (**)(char *, uint64_t))(v43 + 8);
        v45 = v66;
        v6 = v33;
        v44(v40, v33);
        (*(void (**)(char *, uint64_t))(v22 + 8))(v67, v23);
        swift_release(v72);
        v21 = &v68[v56];
        v19 = v45 - 1;
      }
      while (v19);
      v46 = v47;
    }
    else
    {
      v46 = v18;
    }
    return swift_bridgeObjectRelease(v46);
  }
  return result;
}

uint64_t sub_100B06F70(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD v9[5];

  v3 = sub_10001A9A8(&qword_1010ED378);
  Subscription.subscriber.getter(v9, v3);
  v4 = *sub_10001AA44(v9, v9[3]);
  v5 = a2[3];
  v6 = a2[4];
  v7 = sub_10001AA44(a2, v5);
  sub_10009F640((uint64_t)v7, 4, 1, 0, 0, v4, v5, v6);
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v9);
}

uint64_t sub_100B06FFC()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 56));
  return swift_deallocClassInstance(v0, 64, 7);
}

uint64_t type metadata accessor for ServiceStateProvider()
{
  return objc_opt_self(_TtC12searchpartyd20ServiceStateProvider);
}

uint64_t sub_100B07060@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100B065FC(a1, a2);
}

uint64_t sub_100B07080(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = sub_100006C64(&qword_101114588, a2, (uint64_t (*)(uint64_t))type metadata accessor for ServiceStateProvider, (uint64_t)&unk_100E5ECD8);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_100B070BC()
{
  uint64_t result;

  result = sub_100B070D8();
  qword_1011B7C70 = result;
  return result;
}

uint64_t sub_100B070D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  NSString v4;
  id v5;
  uint64_t result;
  Swift::String v7;
  void *object;

  v0 = SPSettingsSharedSuiteName;
  static String._unconditionallyBridgeFromObjectiveC(_:)(SPSettingsSharedSuiteName);
  v2 = v1;
  v3 = objc_allocWithZone((Class)NSUserDefaults);
  v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v2);
  v5 = objc_msgSend(v3, "initWithSuiteName:", v4);

  if (v5)
    return (uint64_t)v5;
  _StringGuts.grow(_:)(49);
  swift_bridgeObjectRelease(0xE000000000000000);
  v7._countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)(v0);
  object = v7._object;
  String.append(_:)(v7);
  swift_bridgeObjectRelease(object);
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD00000000000002FLL, 0x8000000100EEE9C0, "searchpartyd/ServiceStateProvider.swift", 39, 2, 353, 0);
  __break(1u);
  return result;
}

uint64_t sub_100B07200()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100B07210()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100B07234(uint64_t a1)
{
  uint64_t v1;

  return sub_100B067F8(a1, v1);
}

uint64_t sub_100B07250()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100B07260(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD aBlock[5];
  uint64_t v25;
  __int128 v26[2];
  _QWORD v27[6];

  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v22 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27[3] = type metadata accessor for ServiceStateConfigurationLayer(0);
  v27[4] = &off_1010AC280;
  v11 = sub_100018F08(v27);
  sub_100B07550(a1, (uint64_t)v11);
  v21 = *(_QWORD *)(a2 + 24);
  v12 = swift_allocObject(&unk_1010AC150, 24, 7);
  swift_weakInit(v12 + 16, a2);
  sub_100030784((uint64_t)v27, (uint64_t)v26);
  v13 = swift_allocObject(&unk_1010AC1F0, 64, 7);
  *(_QWORD *)(v13 + 16) = v12;
  sub_10000F9FC(v26, v13 + 24);
  aBlock[4] = sub_100B075C0;
  v25 = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_1010AC208;
  v14 = _Block_copy(aBlock);
  v15 = swift_retain(v12);
  static DispatchQoS.unspecified.getter(v15);
  v23 = _swiftEmptyArrayStorage;
  v16 = sub_100006C64((unint64_t *)&qword_1010F0E50, 255, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v17 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v18 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v23, v17, v18, v4, v16);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v10, v6, v14);
  _Block_release(v14);
  (*(void (**)(char *, uint64_t))(v22 + 8))(v6, v4);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  v19 = v25;
  swift_release(v12);
  swift_release(v19);
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v27);
}

uint64_t type metadata accessor for ServiceStateConfigurationLayer(uint64_t a1)
{
  uint64_t result;

  result = qword_1011145E8;
  if (!qword_1011145E8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ServiceStateConfigurationLayer);
  return result;
}

uint64_t sub_100B07514(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for ServiceStateConfigurationLayer(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100B07550(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ServiceStateConfigurationLayer(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100B07594()
{
  uint64_t v0;

  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_100B075C0()
{
  uint64_t v0;

  return sub_100B06A28(*(_QWORD *)(v0 + 16), v0 + 24);
}

uint64_t sub_100B075CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = sub_10001A9A8(&qword_1010ED378);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + v6));
  return swift_deallocObject(v0, v6 + 40, v5);
}

uint64_t sub_100B07644()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  v1 = *(_QWORD *)(sub_10001A9A8(&qword_1010ED378) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  return sub_100B06F70(v0 + v2, (_QWORD *)(v0 + ((*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8)));
}

uint64_t sub_100B07688(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_100B0496C(a1, a2, v2);
}

char *sub_100B07690(char *a1, char **a2, int *a3)
{
  int v3;
  char *v4;
  char *v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int (*v14)(char *, uint64_t, uint64_t, __n128);
  char *v15;
  __n128 v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int (*v23)(char *, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;

  v3 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v4 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = &v4[(v3 + 16) & ~(unint64_t)v3];
    swift_retain();
  }
  else
  {
    v7 = a1;
    v8 = a2[1];
    *((_QWORD *)a1 + 1) = v8;
    v9 = a3[6];
    v10 = &a1[v9];
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for UUID(0);
    v13 = *(_QWORD *)(v12 - 8);
    v14 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v13 + 48);
    v15 = v4;
    v16 = swift_bridgeObjectRetain(v8);
    if (v14(v11, 1, v12, v16))
    {
      v17 = sub_10001A9A8(&qword_1010ED860);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v10, v11, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
    }
    v18 = a3[7];
    v19 = &v7[v18];
    v20 = (char *)a2 + v18;
    v21 = type metadata accessor for Date(0);
    v22 = *(_QWORD *)(v21 - 8);
    v23 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48);
    if (v23(v20, 1, v21))
    {
      v24 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
      memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v22 + 16))(v19, v20, v21);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
    }
    v25 = a3[8];
    v26 = a3[9];
    v27 = &v7[v25];
    v28 = (uint64_t)a2 + v25;
    *(_QWORD *)v27 = *(_QWORD *)v28;
    v27[8] = *(_BYTE *)(v28 + 8);
    v29 = &v7[v26];
    v30 = (char *)a2 + v26;
    if (v23((char *)a2 + v26, 1, v21))
    {
      v31 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
      memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v22 + 16))(v29, v30, v21);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v29, 0, 1, v21);
    }
    v7[a3[10]] = *((_BYTE *)a2 + a3[10]);
  }
  return v7;
}

uint64_t sub_100B078B8(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t result;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  v4 = a1 + a2[6];
  v5 = type metadata accessor for UUID(0);
  v6 = *(_QWORD *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  v7 = a1 + a2[7];
  v8 = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (!v10(v7, 1, v8))
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
  v11 = a1 + a2[9];
  result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v10)(v11, 1, v8);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 8))(v11, v8);
  return result;
}

_QWORD *sub_100B079B4(_QWORD *a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void *v7;
  uint64_t v8;
  char *v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(const void *, uint64_t, uint64_t, __n128);
  id v14;
  __n128 v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  const void *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int (*v22)(const void *, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  const void *v29;
  uint64_t v30;

  v7 = *(void **)a2;
  v6 = *(_QWORD *)(a2 + 8);
  *a1 = *(_QWORD *)a2;
  a1[1] = v6;
  v8 = a3[6];
  v9 = (char *)a1 + v8;
  v10 = (const void *)(a2 + v8);
  v11 = type metadata accessor for UUID(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(unsigned int (**)(const void *, uint64_t, uint64_t, __n128))(v12 + 48);
  v14 = v7;
  v15 = swift_bridgeObjectRetain(v6);
  if (v13(v10, 1, v11, v15))
  {
    v16 = sub_10001A9A8(&qword_1010ED860);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, const void *, uint64_t))(v12 + 16))(v9, v10, v11);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  v17 = a3[7];
  v18 = (char *)a1 + v17;
  v19 = (const void *)(a2 + v17);
  v20 = type metadata accessor for Date(0);
  v21 = *(_QWORD *)(v20 - 8);
  v22 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v21 + 48);
  if (v22(v19, 1, v20))
  {
    v23 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, const void *, uint64_t))(v21 + 16))(v18, v19, v20);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
  }
  v24 = a3[8];
  v25 = a3[9];
  v26 = (char *)a1 + v24;
  v27 = a2 + v24;
  *(_QWORD *)v26 = *(_QWORD *)v27;
  v26[8] = *(_BYTE *)(v27 + 8);
  v28 = (char *)a1 + v25;
  v29 = (const void *)(a2 + v25);
  if (v22((const void *)(a2 + v25), 1, v20))
  {
    v30 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
    memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, const void *, uint64_t))(v21 + 16))(v28, v29, v20);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v28, 0, 1, v20);
  }
  *((_BYTE *)a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  return a1;
}

uint64_t sub_100B07BAC(uint64_t a1, uint64_t a2, int *a3)
{
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(void *, uint64_t, uint64_t);
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(void *, uint64_t, uint64_t);
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  void *v34;
  int v35;
  int v36;
  uint64_t v37;

  v6 = *(void **)a1;
  v7 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v8 = v7;

  v9 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease();
  v10 = a3[6];
  v11 = (void *)(a1 + v10);
  v12 = (void *)(a2 + v10);
  v13 = type metadata accessor for UUID(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v14 + 48);
  v16 = v15(v11, 1, v13);
  v17 = v15(v12, 1, v13);
  if (v16)
  {
    if (!v17)
    {
      (*(void (**)(void *, void *, uint64_t))(v14 + 16))(v11, v12, v13);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v17)
  {
    (*(void (**)(void *, uint64_t))(v14 + 8))(v11, v13);
LABEL_6:
    v18 = sub_10001A9A8(&qword_1010ED860);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v14 + 24))(v11, v12, v13);
LABEL_7:
  v19 = a3[7];
  v20 = (void *)(a1 + v19);
  v21 = (void *)(a2 + v19);
  v22 = type metadata accessor for Date(0);
  v23 = *(_QWORD *)(v22 - 8);
  v24 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v23 + 48);
  v25 = v24(v20, 1, v22);
  v26 = v24(v21, 1, v22);
  if (v25)
  {
    if (!v26)
    {
      (*(void (**)(void *, void *, uint64_t))(v23 + 16))(v20, v21, v22);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v26)
  {
    (*(void (**)(void *, uint64_t))(v23 + 8))(v20, v22);
LABEL_12:
    v27 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, void *, uint64_t))(v23 + 24))(v20, v21, v22);
LABEL_13:
  v28 = a3[8];
  v29 = a1 + v28;
  v30 = (uint64_t *)(a2 + v28);
  v31 = *v30;
  *(_BYTE *)(v29 + 8) = *((_BYTE *)v30 + 8);
  *(_QWORD *)v29 = v31;
  v32 = a3[9];
  v33 = (void *)(a1 + v32);
  v34 = (void *)(a2 + v32);
  v35 = v24((void *)(a1 + v32), 1, v22);
  v36 = v24(v34, 1, v22);
  if (!v35)
  {
    if (!v36)
    {
      (*(void (**)(void *, void *, uint64_t))(v23 + 24))(v33, v34, v22);
      goto LABEL_19;
    }
    (*(void (**)(void *, uint64_t))(v23 + 8))(v33, v22);
    goto LABEL_18;
  }
  if (v36)
  {
LABEL_18:
    v37 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
    memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(void *, void *, uint64_t))(v23 + 16))(v33, v34, v22);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v33, 0, 1, v22);
LABEL_19:
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  return a1;
}

_OWORD *sub_100B07E8C(_OWORD *a1, char *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int (*v17)(char *, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;

  *a1 = *(_OWORD *)a2;
  v6 = a3[6];
  v7 = (char *)a1 + v6;
  v8 = &a2[v6];
  v9 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    v11 = sub_10001A9A8(&qword_1010ED860);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  v12 = a3[7];
  v13 = (char *)a1 + v12;
  v14 = &a2[v12];
  v15 = type metadata accessor for Date(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48);
  if (v17(v14, 1, v15))
  {
    v18 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v13, v14, v15);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  }
  v19 = a3[8];
  v20 = a3[9];
  v21 = (char *)a1 + v19;
  v22 = &a2[v19];
  *(_QWORD *)v21 = *(_QWORD *)v22;
  v21[8] = v22[8];
  v23 = (char *)a1 + v20;
  v24 = &a2[v20];
  if (v17(&a2[v20], 1, v15))
  {
    v25 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
    memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v23, v24, v15);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v23, 0, 1, v15);
  }
  *((_BYTE *)a1 + a3[10]) = a2[a3[10]];
  return a1;
}

uint64_t sub_100B08070(uint64_t a1, _QWORD *a2, int *a3)
{
  void *v6;
  uint64_t v7;
  void *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(void *, uint64_t, uint64_t);
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(void *, uint64_t, uint64_t);
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  void *v29;
  char *v30;
  int v31;
  int v32;
  uint64_t v33;

  v6 = *(void **)a1;
  *(_QWORD *)a1 = *a2;

  *(_QWORD *)(a1 + 8) = a2[1];
  swift_bridgeObjectRelease();
  v7 = a3[6];
  v8 = (void *)(a1 + v7);
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for UUID(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v11 + 48);
  v13 = v12(v8, 1, v10);
  v14 = v12(v9, 1, v10);
  if (v13)
  {
    if (!v14)
    {
      (*(void (**)(void *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    (*(void (**)(void *, uint64_t))(v11 + 8))(v8, v10);
LABEL_6:
    v15 = sub_10001A9A8(&qword_1010ED860);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, char *, uint64_t))(v11 + 40))(v8, v9, v10);
LABEL_7:
  v16 = a3[7];
  v17 = (void *)(a1 + v16);
  v18 = (char *)a2 + v16;
  v19 = type metadata accessor for Date(0);
  v20 = *(_QWORD *)(v19 - 8);
  v21 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v20 + 48);
  v22 = v21(v17, 1, v19);
  v23 = v21(v18, 1, v19);
  if (v22)
  {
    if (!v23)
    {
      (*(void (**)(void *, char *, uint64_t))(v20 + 32))(v17, v18, v19);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v23)
  {
    (*(void (**)(void *, uint64_t))(v20 + 8))(v17, v19);
LABEL_12:
    v24 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(void *, char *, uint64_t))(v20 + 40))(v17, v18, v19);
LABEL_13:
  v25 = a3[8];
  v26 = a3[9];
  v27 = a1 + v25;
  v28 = (char *)a2 + v25;
  *(_QWORD *)v27 = *(_QWORD *)v28;
  *(_BYTE *)(v27 + 8) = v28[8];
  v29 = (void *)(a1 + v26);
  v30 = (char *)a2 + v26;
  v31 = v21((void *)(a1 + v26), 1, v19);
  v32 = v21(v30, 1, v19);
  if (!v31)
  {
    if (!v32)
    {
      (*(void (**)(void *, char *, uint64_t))(v20 + 40))(v29, v30, v19);
      goto LABEL_19;
    }
    (*(void (**)(void *, uint64_t))(v20 + 8))(v29, v19);
    goto LABEL_18;
  }
  if (v32)
  {
LABEL_18:
    v33 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
    memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(void *, char *, uint64_t))(v20 + 32))(v29, v30, v19);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v29, 0, 1, v19);
LABEL_19:
  *(_BYTE *)(a1 + a3[10]) = *((_BYTE *)a2 + a3[10]);
  return a1;
}

uint64_t sub_100B08340(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100B0834C);
}

uint64_t sub_100B0834C(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  int v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if ((_DWORD)a2 == 2147483646)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    v5 = v4 - 1;
    if (v5 < 0)
      v5 = -1;
    return (v5 + 1);
  }
  else
  {
    v9 = sub_10001A9A8(&qword_1010ED860);
    v10 = *(_QWORD *)(v9 - 8);
    if (*(_DWORD *)(v10 + 84) == (_DWORD)a2)
    {
      v11 = v9;
      v12 = *(int *)(a3 + 24);
    }
    else
    {
      v11 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
      v10 = *(_QWORD *)(v11 - 8);
      v12 = *(int *)(a3 + 28);
    }
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48))(&a1[v12], a2, v11);
  }
}

uint64_t sub_100B08400(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100B0840C);
}

char *sub_100B0840C(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 2147483646)
  {
    *(_QWORD *)result = a2;
  }
  else
  {
    v8 = sub_10001A9A8(&qword_1010ED860);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 24);
    }
    else
    {
      v10 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 28);
    }
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(&v5[v11], a2, a2, v10);
  }
  return result;
}

void sub_100B084B0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[3];
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;

  v6[0] = "\b";
  v6[1] = "\b";
  sub_100149C5C(319, (unint64_t *)&qword_101107400, (uint64_t (*)(uint64_t))&type metadata accessor for UUID);
  if (v3 <= 0x3F)
  {
    v6[2] = *(_QWORD *)(v2 - 8) + 64;
    sub_100149C5C(319, (unint64_t *)&qword_10110D930, (uint64_t (*)(uint64_t))&type metadata accessor for Date);
    if (v5 <= 0x3F)
    {
      v7 = *(_QWORD *)(v4 - 8) + 64;
      v8 = &unk_100E5ED88;
      v9 = v7;
      v10 = &unk_100E5EDA0;
      swift_initStructMetadata(a1, 256, 7, v6, a1 + 16);
    }
  }
}

uint64_t sub_100B08584(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100B08590);
}

uint64_t sub_100B08590(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for URLComponents(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t sub_100B085CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100B085D8);
}

uint64_t sub_100B085D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for URLComponents(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata accessor for MetricsEndpoint(uint64_t a1)
{
  uint64_t result;

  result = qword_101114690;
  if (!qword_101114690)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for MetricsEndpoint);
  return result;
}

_QWORD *sub_100B08654(uint64_t a1, uint64_t *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, uint64_t, uint64_t);
  uint64_t v31;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v18 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_QWORD *)a1 = *a2;
    *(_WORD *)(a1 + 8) = *((_WORD *)a2 + 4);
    v7 = a3[6];
    v8 = a1 + v7;
    v9 = (uint64_t)a2 + v7;
    v10 = type metadata accessor for Date(0);
    v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16);
    v11(v8, v9, v10);
    v12 = a3[7];
    v13 = (_QWORD *)((char *)v4 + v12);
    v14 = (uint64_t *)((char *)a2 + v12);
    v15 = type metadata accessor for DeviceEvent.Location(0);
    v16 = *(_QWORD *)(v15 - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
    {
      v17 = sub_10001A9A8(&qword_1011003F0);
      memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    }
    else
    {
      *(_OWORD *)v13 = *(_OWORD *)v14;
      v13[2] = v14[2];
      v11((uint64_t)v13 + *(int *)(v15 + 28), (uint64_t)v14 + *(int *)(v15 + 28), v10);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
    }
    v19 = a3[8];
    v20 = (char *)v4 + v19;
    v21 = (char *)a2 + v19;
    v22 = type metadata accessor for DeviceEvent.AttachmentInfo(0);
    v23 = *(_QWORD *)(v22 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
    {
      v24 = sub_10001A9A8(&qword_1010EF480);
      memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    }
    else
    {
      v25 = type metadata accessor for UUID(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v25 - 8) + 16))(v20, v21, v25);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
    }
    v26 = a3[9];
    v27 = (char *)v4 + v26;
    v28 = (uint64_t)a2 + v26;
    v29 = type metadata accessor for UUID(0);
    v30 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 16);
    v30(v27, v28, v29);
    v31 = type metadata accessor for BeaconIdentifier(0);
    v30(&v27[*(int *)(v31 + 20)], v28 + *(int *)(v31 + 20), v29);
    v11((uint64_t)v4 + a3[10], (uint64_t)a2 + a3[10], v10);
  }
  return v4;
}

uint64_t type metadata accessor for DeviceEvent.Location(uint64_t a1)
{
  return sub_10001B630(a1, qword_101114868, (uint64_t)&nominal type descriptor for DeviceEvent.Location);
}

uint64_t type metadata accessor for DeviceEvent.AttachmentInfo(uint64_t a1)
{
  return sub_10001B630(a1, qword_1011147D8, (uint64_t)&nominal type descriptor for DeviceEvent.AttachmentInfo);
}

uint64_t sub_100B088B4(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  void (*v16)(uint64_t, uint64_t);

  v4 = a1 + a2[6];
  v5 = type metadata accessor for Date(0);
  v16 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v16(v4, v5);
  v6 = a1 + a2[7];
  v7 = type metadata accessor for DeviceEvent.Location(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7))
    v16(v6 + *(int *)(v7 + 28), v5);
  v8 = a1 + a2[8];
  v9 = type metadata accessor for DeviceEvent.AttachmentInfo(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v8, 1, v9))
  {
    v10 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v8, v10);
  }
  v11 = a1 + a2[9];
  v12 = type metadata accessor for UUID(0);
  v13 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8);
  v13(v11, v12);
  v14 = type metadata accessor for BeaconIdentifier(0);
  v13(v11 + *(int *)(v14 + 20), v12);
  return ((uint64_t (*)(uint64_t, uint64_t))v16)(a1 + a2[10], v5);
}

uint64_t sub_100B089F4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  const void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t, uint64_t, uint64_t);
  uint64_t v29;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  v6 = a3[6];
  v7 = (char *)(a1 + v6);
  v8 = (char *)(a2 + v6);
  v9 = type metadata accessor for Date(0);
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
  v10(v7, v8, v9);
  v11 = a3[7];
  v12 = (_QWORD *)(a1 + v11);
  v13 = (_QWORD *)(a2 + v11);
  v14 = type metadata accessor for DeviceEvent.Location(0);
  v15 = *(_QWORD *)(v14 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    v16 = sub_10001A9A8(&qword_1011003F0);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    *(_OWORD *)v12 = *(_OWORD *)v13;
    v12[2] = v13[2];
    v10((char *)v12 + *(int *)(v14 + 28), (char *)v13 + *(int *)(v14 + 28), v9);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  v17 = a3[8];
  v18 = (void *)(a1 + v17);
  v19 = (const void *)(a2 + v17);
  v20 = type metadata accessor for DeviceEvent.AttachmentInfo(0);
  v21 = *(_QWORD *)(v20 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
  {
    v22 = sub_10001A9A8(&qword_1010EF480);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
  }
  else
  {
    v23 = type metadata accessor for UUID(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v18, v19, v23);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
  }
  v24 = a3[9];
  v25 = a1 + v24;
  v26 = a2 + v24;
  v27 = type metadata accessor for UUID(0);
  v28 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 16);
  v28(v25, v26, v27);
  v29 = type metadata accessor for BeaconIdentifier(0);
  v28(v25 + *(int *)(v29 + 20), v26 + *(int *)(v29 + 20), v27);
  v10((char *)(a1 + a3[10]), (char *)(a2 + a3[10]), v9);
  return a1;
}

uint64_t sub_100B08C00(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(_QWORD *, uint64_t, uint64_t);
  int v18;
  int v19;
  uint64_t v20;
  char *v21;
  char *v22;
  void (*v23)(char *, char *, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)(void *, uint64_t, uint64_t);
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(uint64_t, uint64_t, uint64_t);
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(uint64_t, uint64_t);

  v6 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = v6;
  *(_BYTE *)(a1 + 9) = *((_BYTE *)a2 + 9);
  v7 = a3[6];
  v8 = a1 + v7;
  v9 = (uint64_t)a2 + v7;
  v10 = type metadata accessor for Date(0);
  v11 = *(_QWORD *)(v10 - 8);
  v44 = v10;
  v45 = *(void (**)(uint64_t, uint64_t))(v11 + 24);
  v45(v8, v9);
  v12 = a3[7];
  v13 = (_QWORD *)(a1 + v12);
  v14 = (uint64_t *)((char *)a2 + v12);
  v15 = type metadata accessor for DeviceEvent.Location(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v16 + 48);
  v18 = v17(v13, 1, v15);
  v19 = v17(v14, 1, v15);
  if (v18)
  {
    if (!v19)
    {
      *v13 = *v14;
      v13[1] = v14[1];
      v13[2] = v14[2];
      v20 = *(int *)(v15 + 28);
      v21 = (char *)v13 + v20;
      v22 = (char *)v14 + v20;
      v23 = *(void (**)(char *, char *, uint64_t))(v11 + 16);
      v24 = v44;
      v23(v21, v22, v44);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v19)
  {
    sub_1000126B0((uint64_t)v13, type metadata accessor for DeviceEvent.Location);
LABEL_6:
    v25 = sub_10001A9A8(&qword_1011003F0);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    v24 = v44;
    goto LABEL_7;
  }
  *v13 = *v14;
  v13[1] = v14[1];
  v13[2] = v14[2];
  v24 = v44;
  ((void (*)(char *, char *, uint64_t))v45)((char *)v13 + *(int *)(v15 + 28), (char *)v14 + *(int *)(v15 + 28), v44);
LABEL_7:
  v26 = a3[8];
  v27 = (void *)(a1 + v26);
  v28 = (char *)a2 + v26;
  v29 = type metadata accessor for DeviceEvent.AttachmentInfo(0);
  v30 = *(_QWORD *)(v29 - 8);
  v31 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v30 + 48);
  v32 = v31(v27, 1, v29);
  v33 = v31(v28, 1, v29);
  if (!v32)
  {
    if (!v33)
    {
      v43 = type metadata accessor for UUID(0);
      (*(void (**)(void *, char *, uint64_t))(*(_QWORD *)(v43 - 8) + 24))(v27, v28, v43);
      goto LABEL_13;
    }
    sub_1000126B0((uint64_t)v27, type metadata accessor for DeviceEvent.AttachmentInfo);
    goto LABEL_12;
  }
  if (v33)
  {
LABEL_12:
    v35 = sub_10001A9A8(&qword_1010EF480);
    memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
    goto LABEL_13;
  }
  v34 = type metadata accessor for UUID(0);
  (*(void (**)(void *, char *, uint64_t))(*(_QWORD *)(v34 - 8) + 16))(v27, v28, v34);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v27, 0, 1, v29);
LABEL_13:
  v36 = a3[9];
  v37 = a1 + v36;
  v38 = (uint64_t)a2 + v36;
  v39 = type metadata accessor for UUID(0);
  v40 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 24);
  v40(v37, v38, v39);
  v41 = type metadata accessor for BeaconIdentifier(0);
  v40(v37 + *(int *)(v41 + 20), v38 + *(int *)(v41 + 20), v39);
  ((void (*)(uint64_t, char *, uint64_t))v45)(a1 + a3[10], (char *)a2 + a3[10], v24);
  return a1;
}

uint64_t sub_100B08EE4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  const void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t, uint64_t, uint64_t);
  uint64_t v29;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  v6 = a3[6];
  v7 = (char *)(a1 + v6);
  v8 = (char *)(a2 + v6);
  v9 = type metadata accessor for Date(0);
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v11 = a3[7];
  v12 = (_QWORD *)(a1 + v11);
  v13 = (_QWORD *)(a2 + v11);
  v14 = type metadata accessor for DeviceEvent.Location(0);
  v15 = *(_QWORD *)(v14 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    v16 = sub_10001A9A8(&qword_1011003F0);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    *(_OWORD *)v12 = *(_OWORD *)v13;
    v12[2] = v13[2];
    v10((char *)v12 + *(int *)(v14 + 28), (char *)v13 + *(int *)(v14 + 28), v9);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  v17 = a3[8];
  v18 = (void *)(a1 + v17);
  v19 = (const void *)(a2 + v17);
  v20 = type metadata accessor for DeviceEvent.AttachmentInfo(0);
  v21 = *(_QWORD *)(v20 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
  {
    v22 = sub_10001A9A8(&qword_1010EF480);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
  }
  else
  {
    v23 = type metadata accessor for UUID(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v23 - 8) + 32))(v18, v19, v23);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
  }
  v24 = a3[9];
  v25 = a1 + v24;
  v26 = a2 + v24;
  v27 = type metadata accessor for UUID(0);
  v28 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 32);
  v28(v25, v26, v27);
  v29 = type metadata accessor for BeaconIdentifier(0);
  v28(v25 + *(int *)(v29 + 20), v26 + *(int *)(v29 + 20), v27);
  v10((char *)(a1 + a3[10]), (char *)(a2 + a3[10]), v9);
  return a1;
}

uint64_t sub_100B090F0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(_QWORD *, uint64_t, uint64_t);
  int v17;
  int v18;
  uint64_t v19;
  char *v20;
  char *v21;
  void (*v22)(char *, char *, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v30)(void *, uint64_t, uint64_t);
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(uint64_t, uint64_t, uint64_t);
  uint64_t v40;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(uint64_t, uint64_t);

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  v6 = a3[6];
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for Date(0);
  v10 = *(_QWORD *)(v9 - 8);
  v43 = v9;
  v44 = *(void (**)(uint64_t, uint64_t))(v10 + 40);
  v44(v7, v8);
  v11 = a3[7];
  v12 = (_QWORD *)(a1 + v11);
  v13 = (_QWORD *)(a2 + v11);
  v14 = type metadata accessor for DeviceEvent.Location(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v15 + 48);
  v17 = v16(v12, 1, v14);
  v18 = v16(v13, 1, v14);
  if (v17)
  {
    if (!v18)
    {
      *(_OWORD *)v12 = *(_OWORD *)v13;
      v12[2] = v13[2];
      v19 = *(int *)(v14 + 28);
      v20 = (char *)v12 + v19;
      v21 = (char *)v13 + v19;
      v22 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
      v23 = v43;
      v22(v20, v21, v43);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v18)
  {
    sub_1000126B0((uint64_t)v12, type metadata accessor for DeviceEvent.Location);
LABEL_6:
    v24 = sub_10001A9A8(&qword_1011003F0);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    v23 = v43;
    goto LABEL_7;
  }
  *(_OWORD *)v12 = *(_OWORD *)v13;
  v12[2] = v13[2];
  v23 = v43;
  ((void (*)(char *, char *, uint64_t))v44)((char *)v12 + *(int *)(v14 + 28), (char *)v13 + *(int *)(v14 + 28), v43);
LABEL_7:
  v25 = a3[8];
  v26 = (void *)(a1 + v25);
  v27 = (void *)(a2 + v25);
  v28 = type metadata accessor for DeviceEvent.AttachmentInfo(0);
  v29 = *(_QWORD *)(v28 - 8);
  v30 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v29 + 48);
  v31 = v30(v26, 1, v28);
  v32 = v30(v27, 1, v28);
  if (!v31)
  {
    if (!v32)
    {
      v42 = type metadata accessor for UUID(0);
      (*(void (**)(void *, void *, uint64_t))(*(_QWORD *)(v42 - 8) + 40))(v26, v27, v42);
      goto LABEL_13;
    }
    sub_1000126B0((uint64_t)v26, type metadata accessor for DeviceEvent.AttachmentInfo);
    goto LABEL_12;
  }
  if (v32)
  {
LABEL_12:
    v34 = sub_10001A9A8(&qword_1010EF480);
    memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
    goto LABEL_13;
  }
  v33 = type metadata accessor for UUID(0);
  (*(void (**)(void *, void *, uint64_t))(*(_QWORD *)(v33 - 8) + 32))(v26, v27, v33);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
LABEL_13:
  v35 = a3[9];
  v36 = a1 + v35;
  v37 = a2 + v35;
  v38 = type metadata accessor for UUID(0);
  v39 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 40);
  v39(v36, v37, v38);
  v40 = type metadata accessor for BeaconIdentifier(0);
  v39(v36 + *(int *)(v40 + 20), v37 + *(int *)(v40 + 20), v38);
  ((void (*)(uint64_t, uint64_t, uint64_t))v44)(a1 + a3[10], a2 + a3[10], v23);
  return a1;
}

uint64_t sub_100B093BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100B093C8);
}

uint64_t sub_100B093C8(uint64_t a1, uint64_t a2, int *a3)
{
  unsigned int v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if ((_DWORD)a2 == 248)
  {
    v4 = *(unsigned __int8 *)(a1 + 9);
    if (v4 >= 8)
      return v4 - 7;
    else
      return 0;
  }
  else
  {
    v8 = type metadata accessor for Date(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = a3[6];
    }
    else
    {
      v12 = sub_10001A9A8(&qword_1011003F0);
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
      {
        v10 = v12;
        v11 = a3[7];
      }
      else
      {
        v13 = sub_10001A9A8(&qword_1010EF480);
        v9 = *(_QWORD *)(v13 - 8);
        if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
        {
          v10 = v13;
          v11 = a3[8];
        }
        else
        {
          v10 = type metadata accessor for BeaconIdentifier(0);
          v9 = *(_QWORD *)(v10 - 8);
          v11 = a3[9];
        }
      }
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t sub_100B094B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100B094BC);
}

uint64_t sub_100B094BC(uint64_t result, uint64_t a2, int a3, int *a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v5 = result;
  if (a3 == 248)
  {
    *(_BYTE *)(result + 9) = a2 + 7;
  }
  else
  {
    v8 = type metadata accessor for Date(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = a4[6];
    }
    else
    {
      v12 = sub_10001A9A8(&qword_1011003F0);
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == a3)
      {
        v10 = v12;
        v11 = a4[7];
      }
      else
      {
        v13 = sub_10001A9A8(&qword_1010EF480);
        v9 = *(_QWORD *)(v13 - 8);
        if (*(_DWORD *)(v9 + 84) == a3)
        {
          v10 = v13;
          v11 = a4[8];
        }
        else
        {
          v10 = type metadata accessor for BeaconIdentifier(0);
          v9 = *(_QWORD *)(v10 - 8);
          v11 = a4[9];
        }
      }
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

uint64_t type metadata accessor for DeviceEvent(uint64_t a1)
{
  return sub_10001B630(a1, (uint64_t *)&unk_101114720, (uint64_t)&nominal type descriptor for DeviceEvent);
}

void sub_100B095B8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD v11[7];

  v11[0] = "\t";
  v11[1] = &unk_100E5EE78;
  v2 = type metadata accessor for Date(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(v2 - 8) + 64;
    v11[2] = v4;
    sub_100149C5C(319, &qword_101114730, type metadata accessor for DeviceEvent.Location);
    if (v6 <= 0x3F)
    {
      v11[3] = *(_QWORD *)(v5 - 8) + 64;
      sub_100149C5C(319, (unint64_t *)&unk_101114738, type metadata accessor for DeviceEvent.AttachmentInfo);
      if (v8 <= 0x3F)
      {
        v11[4] = *(_QWORD *)(v7 - 8) + 64;
        v9 = type metadata accessor for BeaconIdentifier(319);
        if (v10 <= 0x3F)
        {
          v11[5] = *(_QWORD *)(v9 - 8) + 64;
          v11[6] = v4;
          swift_initStructMetadata(a1, 256, 7, v11, a1 + 16);
        }
      }
    }
  }
}

uint64_t sub_100B096A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100B096B4);
}

uint64_t sub_100B096B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UUID(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t sub_100B096F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100B096FC);
}

uint64_t sub_100B096FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UUID(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t sub_100B0973C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100B09748);
}

uint64_t sub_100B09748(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a1 + *(int *)(a3 + 28);
  v5 = type metadata accessor for Date(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, a2, v5);
}

uint64_t sub_100B09788(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100B09794);
}

uint64_t sub_100B09794(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = a1 + *(int *)(a4 + 28);
  v6 = type metadata accessor for Date(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, a2, a2, v6);
}

uint64_t sub_100B097D8(_QWORD *a1)
{
  double *v1;
  uint64_t v2;
  double *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  double v12;
  double v13;
  double v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  char v20;
  char v21;
  char v22;
  char v23;

  v3 = v1;
  v5 = sub_10001A9A8(&qword_101114938);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  v11 = sub_100B0C188();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for DeviceEvent.Location.CodingKeys, &type metadata for DeviceEvent.Location.CodingKeys, v11, v9, v10);
  v12 = *v3;
  v23 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(&v23, v5, v12);
  if (!v2)
  {
    v13 = v3[1];
    v22 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(&v22, v5, v13);
    v14 = v3[2];
    v21 = 2;
    KeyedEncodingContainer.encode(_:forKey:)(&v21, v5, v14);
    v15 = (char *)v3 + *(int *)(type metadata accessor for DeviceEvent.Location(0) + 28);
    v20 = 3;
    v16 = type metadata accessor for Date(0);
    v17 = sub_100006204((unint64_t *)&unk_1010ED6F0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v15, &v20, v5, v16, v17);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

Swift::Int sub_100B0997C()
{
  Swift::UInt64 *v0;
  Swift::UInt64 v1;
  Swift::UInt64 v2;
  Swift::UInt64 v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[9];

  Hasher.init(_seed:)(v7);
  if ((*v0 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v1 = *v0;
  else
    v1 = 0;
  Hasher._combine(_:)(v1);
  if ((v0[1] & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v2 = v0[1];
  else
    v2 = 0;
  Hasher._combine(_:)(v2);
  if ((v0[2] & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v3 = v0[2];
  else
    v3 = 0;
  Hasher._combine(_:)(v3);
  type metadata accessor for DeviceEvent.Location(0);
  v4 = type metadata accessor for Date(0);
  v5 = sub_100006204((unint64_t *)&unk_1010ED800, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  dispatch thunk of Hashable.hash(into:)(v7, v4, v5);
  return Hasher._finalize()();
}

uint64_t sub_100B09A38@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  double *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  char v28;
  char v29;
  char v30;

  v21 = a2;
  v24 = type metadata accessor for Date(0);
  v22 = *(_QWORD *)(v24 - 8);
  __chkstk_darwin(v24);
  v23 = (char *)&v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = sub_10001A9A8(&qword_101114928);
  v4 = *(_QWORD *)(v25 - 8);
  __chkstk_darwin(v25);
  v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DeviceEvent.Location(0);
  __chkstk_darwin(v7);
  v9 = (double *)((char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = a1[3];
  v11 = a1[4];
  sub_10001AA44(a1, v10);
  v12 = sub_100B0C188();
  v13 = v26;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for DeviceEvent.Location.CodingKeys, &type metadata for DeviceEvent.Location.CodingKeys, v12, v10, v11);
  if (!v13)
  {
    v26 = v7;
    v14 = v4;
    v16 = v23;
    v15 = v24;
    v30 = 0;
    v17 = v25;
    *v9 = KeyedDecodingContainer.decode(_:forKey:)(&v30, v25);
    v29 = 1;
    v9[1] = KeyedDecodingContainer.decode(_:forKey:)(&v29, v17);
    v28 = 2;
    v9[2] = KeyedDecodingContainer.decode(_:forKey:)(&v28, v17);
    v27 = 3;
    v19 = sub_100006204(&qword_1010ED6D0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v16, v15, &v27, v17, v15, v19);
    (*(void (**)(char *, uint64_t))(v14 + 8))(v6, v17);
    v20 = v21;
    (*(void (**)(char *, _QWORD *, uint64_t))(v22 + 32))((char *)v9 + *(int *)(v26 + 28), v16, v15);
    sub_1000126EC((uint64_t)v9, v20, type metadata accessor for DeviceEvent.Location);
  }
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
}

uint64_t sub_100B09CB8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;

  v20 = a2;
  v22 = type metadata accessor for UUID(0);
  v19 = *(_QWORD *)(v22 - 8);
  __chkstk_darwin(v22);
  v21 = (uint64_t *)((char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = sub_10001A9A8(&qword_101114910);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DeviceEvent.AttachmentInfo(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v13 = a1[4];
  sub_10001AA44(a1, v12);
  v14 = sub_100B0C144();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for DeviceEvent.AttachmentInfo.CodingKeys, &type metadata for DeviceEvent.AttachmentInfo.CodingKeys, v14, v12, v13);
  if (!v2)
  {
    v15 = sub_100006204((unint64_t *)&qword_1010EDA90, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v21, v22, v16, v5, v22, v15);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    (*(void (**)(char *, _QWORD *, uint64_t))(v19 + 32))(v11, v21, v22);
    sub_1000126EC((uint64_t)v11, v20, type metadata accessor for DeviceEvent.AttachmentInfo);
  }
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
}

uint64_t sub_100B09E84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100B0CAAC();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_100B09EE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100B0CAAC();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_100B09F2C()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100B09F5C + 4 * byte_100E5EE10[*v0]))(0x656475746974616CLL, 0xE800000000000000);
}

uint64_t sub_100B09F5C()
{
  return 0x64757469676E6F6CLL;
}

unint64_t sub_100B09F78()
{
  return 0xD000000000000012;
}

uint64_t sub_100B09F94()
{
  return 0x6D617473656D6974;
}

uint64_t sub_100B09FB4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100B0C188();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100B09FDC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100B0C188();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100B0A004@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100B09A38(a1, a2);
}

uint64_t sub_100B0A018(_QWORD *a1)
{
  return sub_100B097D8(a1);
}

uint64_t sub_100B0A034()
{
  return sub_100006204(&qword_1011148A8, type metadata accessor for DeviceEvent.Location, (uint64_t)&unk_100E5EEA8);
}

uint64_t sub_100B0A060(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100B0C144();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100B0A088(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100B0C144();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100B0A0B0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100B09CB8(a1, a2);
}

uint64_t sub_100B0A0C4(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v2 = v1;
  v4 = sub_10001A9A8(&qword_101114920);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a1[3];
  v9 = a1[4];
  sub_10001AA44(a1, v8);
  v10 = sub_100B0C144();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for DeviceEvent.AttachmentInfo.CodingKeys, &type metadata for DeviceEvent.AttachmentInfo.CodingKeys, v10, v8, v9);
  v11 = type metadata accessor for UUID(0);
  v12 = sub_100006204(&qword_1010EDAC0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v2, v13, v4, v11, v12);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_100B0A1D8()
{
  return sub_100006204(&qword_1011148B0, type metadata accessor for DeviceEvent.AttachmentInfo, (uint64_t)&unk_100E5EF60);
}

uint64_t sub_100B0A204()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  Swift::String v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  Swift::String v11;
  Swift::String v12;
  Swift::String v13;
  Swift::String v14;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  _BYTE v19[15];
  char v20;
  _QWORD v21[2];

  v1 = sub_10001A9A8(&qword_1010EF480);
  __chkstk_darwin(v1);
  v3 = &v19[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v4 = sub_10001A9A8(&qword_1011003F0);
  __chkstk_darwin(v4);
  v6 = &v19[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v21[0] = 0;
  v21[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(64);
  v7._countAndFlagsBits = 0x456563697665443CLL;
  v7._object = (void *)0xEF40203A746E6576;
  String.append(_:)(v7);
  v8 = type metadata accessor for DeviceEvent(0);
  v9 = type metadata accessor for Date(0);
  v10 = sub_100006204(&qword_1010EE0F0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  v11._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v9, v10);
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  v12._countAndFlagsBits = 0x656372756F73202CLL;
  v12._object = (void *)0xEA0000000000203ALL;
  String.append(_:)(v12);
  v20 = *(_BYTE *)(v0 + 9);
  _print_unlocked<A, B>(_:_:)(&v20, v21, &type metadata for DeviceEventSource, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v13._countAndFlagsBits = 0x697461636F6C202CLL;
  v13._object = (void *)0xEC000000203A6E6FLL;
  String.append(_:)(v13);
  sub_10000F9B8(v0 + *(int *)(v8 + 28), (uint64_t)v6, &qword_1011003F0);
  v14._countAndFlagsBits = String.init<A>(describing:)(v6, v4);
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  v15._object = (void *)0x8000000100EEEA20;
  v15._countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v15);
  sub_10000F9B8(v0 + *(int *)(v8 + 32), (uint64_t)v3, &qword_1010EF480);
  v16._countAndFlagsBits = String.init<A>(describing:)(v3, v1);
  String.append(_:)(v16);
  swift_bridgeObjectRelease();
  v17._countAndFlagsBits = 62;
  v17._object = (void *)0xE100000000000000;
  String.append(_:)(v17);
  return v21[0];
}

uint64_t sub_100B0A458(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100B0A48C + 4 * byte_100E5EE14[a1]))(0x6449746E657665, 0xE700000000000000);
}

uint64_t sub_100B0A48C()
{
  return 0x656372756F73;
}

uint64_t sub_100B0A4A0()
{
  return 0x6D617473656D6974;
}

uint64_t sub_100B0A4BC()
{
  return 0x6E6F697461636F6CLL;
}

uint64_t sub_100B0A4D4()
{
  return 0x656D686361747461;
}

unint64_t sub_100B0A4F8()
{
  return 0xD000000000000010;
}

uint64_t sub_100B0A514()
{
  return 0x6144657461647075;
}

uint64_t sub_100B0A530(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  char v32;
  char v33;
  char v34;
  char v35;
  char v36;
  char v37;
  char v38;
  char v39;

  v3 = v1;
  v5 = sub_10001A9A8(&qword_1011148E0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  v11 = sub_100B0C034();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for DeviceEvent.CodingKeys, &type metadata for DeviceEvent.CodingKeys, v11, v9, v10);
  v12 = *v3;
  v13 = *((unsigned __int8 *)v3 + 8);
  v39 = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v12, v13, &v39, v5);
  if (!v2)
  {
    v38 = *((_BYTE *)v3 + 9);
    v37 = 1;
    v14 = sub_100B0C100();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v38, &v37, v5, &type metadata for DeviceEventSource, v14);
    v15 = (int *)type metadata accessor for DeviceEvent(0);
    v16 = (uint64_t)v3 + v15[6];
    v36 = 2;
    v17 = type metadata accessor for Date(0);
    v18 = sub_100006204((unint64_t *)&unk_1010ED6F0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v16, &v36, v5, v17, v18);
    v31 = v17;
    v19 = (uint64_t)v3 + v15[7];
    v35 = 3;
    v20 = type metadata accessor for DeviceEvent.Location(0);
    v21 = sub_100006204(&qword_1011148F0, type metadata accessor for DeviceEvent.Location, (uint64_t)&unk_100E5EF10);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v19, &v35, v5, v20, v21);
    v22 = (uint64_t)v3 + v15[8];
    v34 = 4;
    v23 = type metadata accessor for DeviceEvent.AttachmentInfo(0);
    v24 = sub_100006204(&qword_1011148F8, type metadata accessor for DeviceEvent.AttachmentInfo, (uint64_t)&unk_100E5EFC8);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v22, &v34, v5, v23, v24);
    v25 = (uint64_t)v3 + v15[9];
    v33 = 5;
    v26 = type metadata accessor for BeaconIdentifier(0);
    v27 = sub_100006204(&qword_1010FF010, type metadata accessor for BeaconIdentifier, (uint64_t)&unk_100E45CF4);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v25, &v33, v5, v26, v27);
    v28 = (uint64_t)v3 + v15[10];
    v32 = 6;
    KeyedEncodingContainer.encode<A>(_:forKey:)(v28, &v32, v5, v31, v18);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

Swift::Int sub_100B0A830()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  Swift::UInt64 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v18[9];

  v1 = type metadata accessor for DeviceEvent.AttachmentInfo(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v18[-1] - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10001A9A8(&qword_1010EF480);
  __chkstk_darwin(v5);
  v7 = (char *)&v18[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  Hasher.init(_seed:)(v18);
  if (*(_BYTE *)(v0 + 8) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v8 = *(_QWORD *)v0;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v8);
  }
  Hasher._combine(_:)(*(unsigned __int8 *)(v0 + 9));
  v9 = type metadata accessor for DeviceEvent(0);
  v10 = type metadata accessor for Date(0);
  v11 = sub_100006204((unint64_t *)&unk_1010ED800, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  dispatch thunk of Hashable.hash(into:)(v18, v10, v11);
  sub_100B0B75C((uint64_t)v18, type metadata accessor for DeviceEvent.Location, &qword_1011003F0);
  sub_10000F9B8(v0 + *(int *)(v9 + 32), (uint64_t)v7, &qword_1010EF480);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v2 + 48))(v7, 1, v1) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    sub_1000126EC((uint64_t)v7, (uint64_t)v4, type metadata accessor for DeviceEvent.AttachmentInfo);
    Hasher._combine(_:)(1u);
    v12 = type metadata accessor for UUID(0);
    v13 = sub_100006204(&qword_1010F98B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    dispatch thunk of Hashable.hash(into:)(v18, v12, v13);
    sub_1000126B0((uint64_t)v4, type metadata accessor for DeviceEvent.AttachmentInfo);
  }
  v14 = type metadata accessor for UUID(0);
  v15 = sub_100006204(&qword_1010F98B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(v18, v14, v15);
  type metadata accessor for BeaconIdentifier(0);
  dispatch thunk of Hashable.hash(into:)(v18, v14, v15);
  dispatch thunk of Hashable.hash(into:)(v18, v10, v11);
  return Hasher._finalize()();
}

uint64_t sub_100B0AAD0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  unint64_t v26;
  uint64_t v27;
  char *v28;
  _QWORD *v29;
  uint64_t v30;
  int *v31;
  void (*v32)(uint64_t, char *, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  char *v41;
  uint64_t v43;
  void (*v44)(uint64_t, char *, uint64_t);
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  char *v58;
  char v59;
  char v60;
  char v61;
  char v62;
  char v63;
  char v64;
  uint64_t v65;

  v48 = a2;
  v50 = type metadata accessor for BeaconIdentifier(0);
  __chkstk_darwin(v50);
  v49 = (uint64_t *)((char *)&v43 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v4 = sub_10001A9A8(&qword_1010EF480);
  __chkstk_darwin(v4);
  v51 = (char *)&v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10001A9A8(&qword_1011003F0);
  __chkstk_darwin(v6);
  v8 = (char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = type metadata accessor for Date(0);
  v53 = *(_QWORD *)(v56 - 8);
  v9 = __chkstk_darwin(v56);
  v11 = (char *)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)&v43 - v12;
  v52 = sub_10001A9A8(&qword_1011148B8);
  v14 = *(_QWORD *)(v52 - 8);
  __chkstk_darwin(v52);
  v16 = (char *)&v43 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v55 = type metadata accessor for DeviceEvent(0);
  __chkstk_darwin(v55);
  v57 = (uint64_t *)((char *)&v43 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  v19 = a1[3];
  v18 = a1[4];
  v54 = a1;
  sub_10001AA44(a1, v19);
  v20 = sub_100B0C034();
  v21 = v58;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for DeviceEvent.CodingKeys, &type metadata for DeviceEvent.CodingKeys, v20, v19, v18);
  if (v21)
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v54);
  v58 = v8;
  v47 = v11;
  BYTE1(v65) = 0;
  v22 = v52;
  v23 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)((char *)&v65 + 1, v52);
  v24 = (uint64_t)v57;
  *v57 = v23;
  *(_BYTE *)(v24 + 8) = v25 & 1;
  v64 = 1;
  v26 = sub_100B0C078();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v65, &type metadata for DeviceEventSource, &v64, v22, &type metadata for DeviceEventSource, v26);
  *(_BYTE *)(v24 + 9) = v65;
  v63 = 2;
  v27 = sub_100006204(&qword_1010ED6D0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  v28 = v13;
  v29 = v13;
  v30 = v56;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v29, v56, &v63, v22, v56, v27);
  v45 = v27;
  v46 = v14;
  v31 = (int *)v55;
  v32 = *(void (**)(uint64_t, char *, uint64_t))(v53 + 32);
  v32(v24 + *(int *)(v55 + 24), v28, v30);
  v33 = type metadata accessor for DeviceEvent.Location(0);
  v62 = 3;
  v34 = sub_100006204(&qword_1011148D0, type metadata accessor for DeviceEvent.Location, (uint64_t)&unk_100E5EF38);
  v35 = (uint64_t)v58;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v33, &v62, v52, v33, v34);
  v44 = v32;
  sub_100005CF0(v35, v24 + v31[7], &qword_1011003F0);
  v36 = type metadata accessor for DeviceEvent.AttachmentInfo(0);
  v61 = 4;
  v37 = sub_100006204(&qword_1011148D8, type metadata accessor for DeviceEvent.AttachmentInfo, (uint64_t)&unk_100E5EFF0);
  v38 = (uint64_t)v51;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v36, &v61, v52, v36, v37);
  sub_100005CF0(v38, v24 + v31[8], &qword_1010EF480);
  v60 = 5;
  v39 = sub_100006204(&qword_101106CE8, type metadata accessor for BeaconIdentifier, (uint64_t)&unk_100E45D1C);
  v40 = v49;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v49, v50, &v60, v52, v50, v39);
  sub_1000126EC((uint64_t)v40, v24 + v31[9], type metadata accessor for BeaconIdentifier);
  v59 = 6;
  v41 = v47;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v47, v30, &v59, v52, v30, v45);
  (*(void (**)(char *, uint64_t))(v46 + 8))(v16, v52);
  v44(v24 + v31[10], v41, v30);
  sub_100B0C0BC(v24, v48);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v54);
  return sub_1000126B0(v24, type metadata accessor for DeviceEvent);
}

uint64_t sub_100B0B148()
{
  unsigned __int8 *v0;

  return sub_100B0A458(*v0);
}

uint64_t sub_100B0B150@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100B0C79C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100B0B174(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100B0C034();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100B0B19C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100B0C034();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100B0B1C4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100B0AAD0(a1, a2);
}

uint64_t sub_100B0B1D8(_QWORD *a1)
{
  return sub_100B0A530(a1);
}

uint64_t sub_100B0B1F4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  Swift::UInt64 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;

  v5 = type metadata accessor for DeviceEvent.AttachmentInfo(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10001A9A8(&qword_1010EF480);
  __chkstk_darwin(v9);
  v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_BYTE *)(v2 + 8) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v12 = *(_QWORD *)v2;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v12);
  }
  Hasher._combine(_:)(*(unsigned __int8 *)(v2 + 9));
  v13 = type metadata accessor for Date(0);
  v14 = sub_100006204((unint64_t *)&unk_1010ED800, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  dispatch thunk of Hashable.hash(into:)(a1, v13, v14);
  sub_100B0B75C(a1, type metadata accessor for DeviceEvent.Location, &qword_1011003F0);
  sub_10000F9B8(v2 + *(int *)(a2 + 32), (uint64_t)v11, &qword_1010EF480);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v11, 1, v5) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    sub_1000126EC((uint64_t)v11, (uint64_t)v8, type metadata accessor for DeviceEvent.AttachmentInfo);
    Hasher._combine(_:)(1u);
    v15 = type metadata accessor for UUID(0);
    v16 = sub_100006204(&qword_1010F98B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    dispatch thunk of Hashable.hash(into:)(a1, v15, v16);
    sub_1000126B0((uint64_t)v8, type metadata accessor for DeviceEvent.AttachmentInfo);
  }
  v17 = type metadata accessor for UUID(0);
  v18 = sub_100006204(&qword_1010F98B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(a1, v17, v18);
  type metadata accessor for BeaconIdentifier(0);
  dispatch thunk of Hashable.hash(into:)(a1, v17, v18);
  return dispatch thunk of Hashable.hash(into:)(a1, v13, v14);
}

Swift::Int sub_100B0B47C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  Swift::UInt64 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v20[9];

  v4 = type metadata accessor for DeviceEvent.AttachmentInfo(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v20[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A9A8(&qword_1010EF480);
  __chkstk_darwin(v8);
  v10 = (char *)&v20[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  Hasher.init(_seed:)(v20);
  if (*(_BYTE *)(v2 + 8) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v11 = *(_QWORD *)v2;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v11);
  }
  Hasher._combine(_:)(*(unsigned __int8 *)(v2 + 9));
  v12 = type metadata accessor for Date(0);
  v13 = sub_100006204((unint64_t *)&unk_1010ED800, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  dispatch thunk of Hashable.hash(into:)(v20, v12, v13);
  sub_100B0B75C((uint64_t)v20, type metadata accessor for DeviceEvent.Location, &qword_1011003F0);
  sub_10000F9B8(v2 + *(int *)(a2 + 32), (uint64_t)v10, &qword_1010EF480);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v10, 1, v4) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    sub_1000126EC((uint64_t)v10, (uint64_t)v7, type metadata accessor for DeviceEvent.AttachmentInfo);
    Hasher._combine(_:)(1u);
    v14 = type metadata accessor for UUID(0);
    v15 = sub_100006204(&qword_1010F98B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    dispatch thunk of Hashable.hash(into:)(v20, v14, v15);
    sub_1000126B0((uint64_t)v7, type metadata accessor for DeviceEvent.AttachmentInfo);
  }
  v16 = type metadata accessor for UUID(0);
  v17 = sub_100006204(&qword_1010F98B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(v20, v16, v17);
  type metadata accessor for BeaconIdentifier(0);
  dispatch thunk of Hashable.hash(into:)(v20, v16, v17);
  dispatch thunk of Hashable.hash(into:)(v20, v12, v13);
  return Hasher._finalize()();
}

uint64_t sub_100B0B71C()
{
  return sub_100006204(&qword_10110C070, type metadata accessor for DeviceEvent, (uint64_t)&unk_100E5F018);
}

void sub_100B0B748(uint64_t a1)
{
  sub_100B0B75C(a1, type metadata accessor for ObservedAdvertisement.Location, (uint64_t *)&unk_101100320);
}

void sub_100B0B75C(uint64_t a1, uint64_t (*a2)(_QWORD), uint64_t *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  Swift::UInt64 *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  Swift::UInt64 v15;
  Swift::UInt64 v16;
  Swift::UInt64 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v6 = v3;
  v8 = a2(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (Swift::UInt64 *)((char *)&v20 - v10);
  v12 = sub_10001A9A8(a3);
  __chkstk_darwin(v12);
  v14 = (char *)&v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000F9B8(v6, (uint64_t)v14, a3);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v14, 1, v8) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    sub_1000126EC((uint64_t)v14, (uint64_t)v11, a2);
    Hasher._combine(_:)(1u);
    if ((*v11 & 0x7FFFFFFFFFFFFFFFLL) != 0)
      v15 = *v11;
    else
      v15 = 0;
    Hasher._combine(_:)(v15);
    if ((v11[1] & 0x7FFFFFFFFFFFFFFFLL) != 0)
      v16 = v11[1];
    else
      v16 = 0;
    Hasher._combine(_:)(v16);
    if ((v11[2] & 0x7FFFFFFFFFFFFFFFLL) != 0)
      v17 = v11[2];
    else
      v17 = 0;
    Hasher._combine(_:)(v17);
    v18 = type metadata accessor for Date(0);
    v19 = sub_100006204((unint64_t *)&unk_1010ED800, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    dispatch thunk of Hashable.hash(into:)(a1, v18, v19);
    sub_1000126B0((uint64_t)v11, a2);
  }
}

uint64_t sub_100B0B8D8(double *a1, double *a2)
{
  uint64_t v4;

  if (*a1 != *a2 || a1[1] != a2[1] || a1[2] != a2[2])
    return 0;
  v4 = *(int *)(type metadata accessor for DeviceEvent.Location(0) + 28);
  return static Date.== infix(_:_:)((char *)a1 + v4, (char *)a2 + v4);
}

uint64_t sub_100B0B94C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int (*v34)(uint64_t, uint64_t, uint64_t);
  uint64_t v35;
  int *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int (*v42)(uint64_t, uint64_t, uint64_t);
  uint64_t v43;
  uint64_t v44;
  double *v45;
  uint64_t *v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  char v50;
  uint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  int *v60;
  uint64_t v61;
  uint64_t v62;
  double *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;

  v69 = type metadata accessor for DeviceEvent.AttachmentInfo(0);
  v66 = *(_QWORD *)(v69 - 8);
  __chkstk_darwin(v69);
  v64 = (uint64_t)&v59 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10001A9A8(&qword_101114900);
  __chkstk_darwin(v5);
  v70 = (uint64_t)&v59 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10001A9A8(&qword_1010EF480);
  v8 = __chkstk_darwin(v7);
  v65 = (uint64_t)&v59 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v8);
  v67 = (uint64_t)&v59 - v11;
  __chkstk_darwin(v10);
  v68 = (uint64_t)&v59 - v12;
  v13 = type metadata accessor for DeviceEvent.Location(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (double *)((char *)&v59 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  v17 = sub_10001A9A8(&qword_101114908);
  __chkstk_darwin(v17);
  v19 = (char *)&v59 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_10001A9A8(&qword_1011003F0);
  v21 = __chkstk_darwin(v20);
  v22 = __chkstk_darwin(v21);
  v24 = (char *)&v59 - v23;
  __chkstk_darwin(v22);
  v27 = (char *)&v59 - v26;
  v28 = *(_BYTE *)(a2 + 8);
  if ((*(_BYTE *)(a1 + 8) & 1) != 0)
  {
    if (!*(_BYTE *)(a2 + 8))
      goto LABEL_28;
  }
  else
  {
    if (*(_QWORD *)a1 != *(_QWORD *)a2)
      v28 = 1;
    if ((v28 & 1) != 0)
      goto LABEL_28;
  }
  if (*(unsigned __int8 *)(a1 + 9) != *(unsigned __int8 *)(a2 + 9))
    goto LABEL_28;
  v62 = v5;
  v63 = (double *)v25;
  v29 = a2;
  v30 = type metadata accessor for DeviceEvent(0);
  if ((static Date.== infix(_:_:)(a1 + *(int *)(v30 + 24), v29 + *(int *)(v30 + 24)) & 1) == 0)
    goto LABEL_28;
  v31 = *(int *)(v30 + 28);
  v61 = a1;
  sub_10000F9B8(a1 + v31, (uint64_t)v27, &qword_1011003F0);
  v60 = (int *)v30;
  sub_10000F9B8(v29 + *(int *)(v30 + 28), (uint64_t)v24, &qword_1011003F0);
  v32 = (uint64_t)v19;
  v33 = (uint64_t)&v19[*(int *)(v17 + 48)];
  sub_10000F9B8((uint64_t)v27, (uint64_t)v19, &qword_1011003F0);
  sub_10000F9B8((uint64_t)v24, v33, &qword_1011003F0);
  v34 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48);
  if (v34((uint64_t)v19, 1, v13) == 1)
  {
    sub_100004048((uint64_t)v24, &qword_1011003F0);
    sub_100004048((uint64_t)v27, &qword_1011003F0);
    if (v34(v33, 1, v13) == 1)
    {
      sub_100004048((uint64_t)v19, &qword_1011003F0);
      goto LABEL_12;
    }
    goto LABEL_17;
  }
  v44 = (uint64_t)v19;
  v45 = v63;
  sub_10000F9B8(v44, (uint64_t)v63, &qword_1011003F0);
  if (v34(v33, 1, v13) == 1)
  {
    sub_100004048((uint64_t)v24, &qword_1011003F0);
    sub_100004048((uint64_t)v27, &qword_1011003F0);
    sub_1000126B0((uint64_t)v45, type metadata accessor for DeviceEvent.Location);
LABEL_17:
    v46 = &qword_101114908;
    v47 = v32;
LABEL_27:
    sub_100004048(v47, v46);
    goto LABEL_28;
  }
  sub_1000126EC(v33, (uint64_t)v16, type metadata accessor for DeviceEvent.Location);
  if (*v45 != *v16 || v45[1] != v16[1] || v45[2] != v16[2])
  {
    sub_1000126B0((uint64_t)v16, type metadata accessor for DeviceEvent.Location);
    sub_100004048((uint64_t)v24, &qword_1011003F0);
    sub_100004048((uint64_t)v27, &qword_1011003F0);
    sub_1000126B0((uint64_t)v45, type metadata accessor for DeviceEvent.Location);
    v47 = v32;
    v46 = &qword_1011003F0;
    goto LABEL_27;
  }
  v48 = static Date.== infix(_:_:)((char *)v45 + *(int *)(v13 + 28), (char *)v16 + *(int *)(v13 + 28));
  sub_1000126B0((uint64_t)v16, type metadata accessor for DeviceEvent.Location);
  sub_100004048((uint64_t)v24, &qword_1011003F0);
  sub_100004048((uint64_t)v27, &qword_1011003F0);
  sub_1000126B0((uint64_t)v45, type metadata accessor for DeviceEvent.Location);
  sub_100004048(v32, &qword_1011003F0);
  if ((v48 & 1) == 0)
    goto LABEL_28;
LABEL_12:
  v35 = v29;
  v36 = v60;
  v37 = v68;
  sub_10000F9B8(v61 + v60[8], v68, &qword_1010EF480);
  v38 = v36[8];
  v63 = (double *)v35;
  v39 = v67;
  sub_10000F9B8(v35 + v38, v67, &qword_1010EF480);
  v40 = v70;
  v41 = v70 + *(int *)(v62 + 48);
  sub_10000F9B8(v37, v70, &qword_1010EF480);
  sub_10000F9B8(v39, v41, &qword_1010EF480);
  v42 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v66 + 48);
  v43 = v69;
  if (v42(v40, 1, v69) != 1)
  {
    v49 = v65;
    sub_10000F9B8(v40, v65, &qword_1010EF480);
    if (v42(v41, 1, v43) != 1)
    {
      v52 = v64;
      sub_1000126EC(v41, v64, type metadata accessor for DeviceEvent.AttachmentInfo);
      v53 = static UUID.== infix(_:_:)(v49, v52);
      sub_1000126B0(v52, type metadata accessor for DeviceEvent.AttachmentInfo);
      sub_100004048(v39, &qword_1010EF480);
      sub_100004048(v37, &qword_1010EF480);
      sub_1000126B0(v49, type metadata accessor for DeviceEvent.AttachmentInfo);
      sub_100004048(v40, &qword_1010EF480);
      v36 = v60;
      if ((v53 & 1) == 0)
        goto LABEL_28;
      goto LABEL_31;
    }
    sub_100004048(v39, &qword_1010EF480);
    sub_100004048(v37, &qword_1010EF480);
    sub_1000126B0(v49, type metadata accessor for DeviceEvent.AttachmentInfo);
    goto LABEL_26;
  }
  sub_100004048(v39, &qword_1010EF480);
  sub_100004048(v37, &qword_1010EF480);
  if (v42(v41, 1, v43) != 1)
  {
LABEL_26:
    v46 = &qword_101114900;
    v47 = v40;
    goto LABEL_27;
  }
  sub_100004048(v40, &qword_1010EF480);
LABEL_31:
  v54 = v36[9];
  v55 = v61;
  v56 = v61 + v54;
  v57 = (char *)v63 + v54;
  if ((static UUID.== infix(_:_:)(v61 + v54, (char *)v63 + v54) & 1) != 0)
  {
    v58 = type metadata accessor for BeaconIdentifier(0);
    if ((static UUID.== infix(_:_:)(v56 + *(int *)(v58 + 20), &v57[*(int *)(v58 + 20)]) & 1) != 0)
    {
      v50 = static Date.== infix(_:_:)(v55 + v36[10], (char *)v63 + v36[10]);
      return v50 & 1;
    }
  }
LABEL_28:
  v50 = 0;
  return v50 & 1;
}

unint64_t sub_100B0C034()
{
  unint64_t result;

  result = qword_1011148C0;
  if (!qword_1011148C0)
  {
    result = swift_getWitnessTable(a5_19, &type metadata for DeviceEvent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1011148C0);
  }
  return result;
}

unint64_t sub_100B0C078()
{
  unint64_t result;

  result = qword_1011148C8;
  if (!qword_1011148C8)
  {
    result = swift_getWitnessTable(asc_100E5F4B4, &type metadata for DeviceEventSource);
    atomic_store(result, (unint64_t *)&qword_1011148C8);
  }
  return result;
}

uint64_t sub_100B0C0BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for DeviceEvent(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_100B0C100()
{
  unint64_t result;

  result = qword_1011148E8;
  if (!qword_1011148E8)
  {
    result = swift_getWitnessTable(asc_100E5F48C, &type metadata for DeviceEventSource);
    atomic_store(result, (unint64_t *)&qword_1011148E8);
  }
  return result;
}

unint64_t sub_100B0C144()
{
  unint64_t result;

  result = qword_101114918;
  if (!qword_101114918)
  {
    result = swift_getWitnessTable(byte_100E5F43C, &type metadata for DeviceEvent.AttachmentInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101114918);
  }
  return result;
}

unint64_t sub_100B0C188()
{
  unint64_t result;

  result = qword_101114930;
  if (!qword_101114930)
  {
    result = swift_getWitnessTable(asc_100E5F3EC, &type metadata for DeviceEvent.Location.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101114930);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for DeviceEvent.Location.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_100B0C218 + 4 * byte_100E5EE20[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_100B0C24C + 4 * byte_100E5EE1B[v4]))();
}

uint64_t sub_100B0C24C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100B0C254(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100B0C25CLL);
  return result;
}

uint64_t sub_100B0C268(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100B0C270);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_100B0C274(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100B0C27C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DeviceEvent.Location.CodingKeys()
{
  return &type metadata for DeviceEvent.Location.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for DeviceEvent.AttachmentInfo.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_100B0C2D8 + 4 * byte_100E5EE25[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_100B0C2F8 + 4 * byte_100E5EE2A[v4]))();
}

_BYTE *sub_100B0C2D8(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_100B0C2F8(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100B0C300(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100B0C308(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100B0C310(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100B0C318(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for DeviceEvent.AttachmentInfo.CodingKeys()
{
  return &type metadata for DeviceEvent.AttachmentInfo.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for DeviceEvent.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_100B0C380 + 4 * byte_100E5EE34[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_100B0C3B4 + 4 * byte_100E5EE2F[v4]))();
}

uint64_t sub_100B0C3B4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100B0C3BC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100B0C3C4);
  return result;
}

uint64_t sub_100B0C3D0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100B0C3D8);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_100B0C3DC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100B0C3E4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DeviceEvent.CodingKeys()
{
  return &type metadata for DeviceEvent.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for DeviceEventSource(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_100B0C44C + 4 * byte_100E5EE3E[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_100B0C480 + 4 * byte_100E5EE39[v4]))();
}

uint64_t sub_100B0C480(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100B0C488(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100B0C490);
  return result;
}

uint64_t sub_100B0C49C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100B0C4A4);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_100B0C4A8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100B0C4B0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DeviceEventSource()
{
  return &type metadata for DeviceEventSource;
}

unint64_t sub_100B0C4D0()
{
  unint64_t result;

  result = qword_101114940;
  if (!qword_101114940)
  {
    result = swift_getWitnessTable(byte_100E5F19C, &type metadata for DeviceEventSource);
    atomic_store(result, (unint64_t *)&qword_101114940);
  }
  return result;
}

unint64_t sub_100B0C518()
{
  unint64_t result;

  result = qword_101114948;
  if (!qword_101114948)
  {
    result = swift_getWitnessTable(asc_100E5F254, &type metadata for DeviceEvent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101114948);
  }
  return result;
}

unint64_t sub_100B0C560()
{
  unint64_t result;

  result = qword_101114950;
  if (!qword_101114950)
  {
    result = swift_getWitnessTable(aM_41, &type metadata for DeviceEvent.AttachmentInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101114950);
  }
  return result;
}

unint64_t sub_100B0C5A8()
{
  unint64_t result;

  result = qword_101114958;
  if (!qword_101114958)
  {
    result = swift_getWitnessTable(byte_100E5F3C4, &type metadata for DeviceEvent.Location.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101114958);
  }
  return result;
}

unint64_t sub_100B0C5F0()
{
  unint64_t result;

  result = qword_101114960;
  if (!qword_101114960)
  {
    result = swift_getWitnessTable(byte_100E5F334, &type metadata for DeviceEvent.Location.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101114960);
  }
  return result;
}

unint64_t sub_100B0C638()
{
  unint64_t result;

  result = qword_101114968;
  if (!qword_101114968)
  {
    result = swift_getWitnessTable(aU_37, &type metadata for DeviceEvent.Location.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101114968);
  }
  return result;
}

unint64_t sub_100B0C680()
{
  unint64_t result;

  result = qword_101114970;
  if (!qword_101114970)
  {
    result = swift_getWitnessTable(byte_100E5F27C, &type metadata for DeviceEvent.AttachmentInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101114970);
  }
  return result;
}

unint64_t sub_100B0C6C8()
{
  unint64_t result;

  result = qword_101114978;
  if (!qword_101114978)
  {
    result = swift_getWitnessTable(asc_100E5F2A4, &type metadata for DeviceEvent.AttachmentInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101114978);
  }
  return result;
}

unint64_t sub_100B0C710()
{
  unint64_t result;

  result = qword_101114980;
  if (!qword_101114980)
  {
    result = swift_getWitnessTable(asc_100E5F1C4, &type metadata for DeviceEvent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101114980);
  }
  return result;
}

unint64_t sub_100B0C758()
{
  unint64_t result;

  result = qword_101114988;
  if (!qword_101114988)
  {
    result = swift_getWitnessTable(byte_100E5F1EC, &type metadata for DeviceEvent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101114988);
  }
  return result;
}

uint64_t sub_100B0C79C(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char v12;

  if (a1 == 0x6449746E657665 && a2 == 0xE700000000000000)
  {
    v5 = 0xE700000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6449746E657665, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x656372756F73 && a2 == 0xE600000000000000)
  {
    v7 = 0xE600000000000000;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x656372756F73, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x6D617473656D6974 && a2 == 0xE900000000000070)
  {
    v8 = 0xE900000000000070;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6D617473656D6974, 0xE900000000000070, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0x6E6F697461636F6CLL && a2 == 0xE800000000000000)
  {
    v9 = 0xE800000000000000;
LABEL_26:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E6F697461636F6CLL, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_26;
  }
  if (a1 == 0x656D686361747461 && a2 == 0xEE006F666E49746ELL)
  {
    v10 = 0xEE006F666E49746ELL;
LABEL_32:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x656D686361747461, 0xEE006F666E49746ELL, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_32;
  }
  if (a1 == 0xD000000000000010)
  {
    v11 = 0x8000000100EC28D0;
    if (a2 == 0x8000000100EC28D0)
      goto LABEL_37;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x8000000100EC28D0, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
LABEL_37:
    swift_bridgeObjectRelease(v11);
    return 5;
  }
  if (a1 == 0x6144657461647075 && a2 == 0xEA00000000006574)
  {
    swift_bridgeObjectRelease(0xEA00000000006574);
    return 6;
  }
  else
  {
    v12 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6144657461647075, 0xEA00000000006574, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v12 & 1) != 0)
      return 6;
    else
      return 7;
  }
}

unint64_t sub_100B0CAAC()
{
  unint64_t result;

  result = qword_101114990;
  if (!qword_101114990)
  {
    result = swift_getWitnessTable(byte_100E5F124, &type metadata for DeviceEventSource);
    atomic_store(result, (unint64_t *)&qword_101114990);
  }
  return result;
}

uint64_t sub_100B0CAF0(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100B0CB2C + 4 * byte_100E5F530[a1]))(0x4E6E6F6973736573, 0xEC00000065636E6FLL);
}

uint64_t sub_100B0CB2C()
{
  return 0x737574617473;
}

uint64_t sub_100B0CB40()
{
  return 0x636E6F4E68747561;
}

uint64_t sub_100B0CB60()
{
  return 0x754E6C6169726573;
}

uint64_t sub_100B0CB80()
{
  return 0x6169726553746C61;
}

uint64_t sub_100B0CBA4()
{
  return 0x7461747365747461;
}

uint64_t sub_100B0CC70()
{
  return 0x657261776D726966;
}

uint64_t sub_100B0CCB0()
{
  return 0x6449726F646E6576;
}

uint64_t sub_100B0CCC8(_QWORD *a1)
{
  __int128 *v1;
  uint64_t v2;
  __int128 *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  char v30;
  __int128 v31;

  v3 = v1;
  v5 = sub_10001A9A8(&qword_1011149A8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  v11 = sub_100B0F780();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for AirPodsSWPairingLockAckRequestContent.CodingKeys, &type metadata for AirPodsSWPairingLockAckRequestContent.CodingKeys, v11, v9, v10);
  v31 = *v3;
  v30 = 0;
  v12 = sub_100036A58();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v31, &v30, v5, &type metadata for Data, v12);
  if (!v2)
  {
    v13 = *((_QWORD *)v3 + 2);
    LOBYTE(v31) = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v13, &v31, v5);
    v31 = *(__int128 *)((char *)v3 + 24);
    v30 = 2;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v31, &v30, v5, &type metadata for Data, v12);
    v31 = *(__int128 *)((char *)v3 + 40);
    v30 = 3;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v31, &v30, v5, &type metadata for Data, v12);
    v31 = *(__int128 *)((char *)v3 + 56);
    v30 = 4;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v31, &v30, v5, &type metadata for Data, v12);
    v31 = *(__int128 *)((char *)v3 + 72);
    v30 = 5;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v31, &v30, v5, &type metadata for Data, v12);
    v31 = *(__int128 *)((char *)v3 + 88);
    v30 = 6;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v31, &v30, v5, &type metadata for Data, v12);
    v31 = *(__int128 *)((char *)v3 + 104);
    v30 = 7;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v31, &v30, v5, &type metadata for Data, v12);
    v31 = *(__int128 *)((char *)v3 + 120);
    v30 = 8;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v31, &v30, v5, &type metadata for Data, v12);
    v14 = *((_QWORD *)v3 + 17);
    v15 = *((_QWORD *)v3 + 18);
    LOBYTE(v31) = 9;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v14, v15, &v31, v5);
    v16 = *((_QWORD *)v3 + 19);
    v17 = *((_QWORD *)v3 + 20);
    LOBYTE(v31) = 10;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v16, v17, &v31, v5);
    v18 = *((_QWORD *)v3 + 21);
    v19 = *((_QWORD *)v3 + 22);
    LOBYTE(v31) = 11;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v18, v19, &v31, v5);
    v20 = *((_QWORD *)v3 + 23);
    v21 = *((_QWORD *)v3 + 24);
    LOBYTE(v31) = 12;
    KeyedEncodingContainer.encode(_:forKey:)(v20, v21, &v31, v5);
    v22 = *((_QWORD *)v3 + 25);
    v23 = *((_QWORD *)v3 + 26);
    LOBYTE(v31) = 13;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v22, v23, &v31, v5);
    v24 = *((_QWORD *)v3 + 27);
    v25 = *((_QWORD *)v3 + 28);
    LOBYTE(v31) = 14;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v24, v25, &v31, v5);
    v26 = *((_QWORD *)v3 + 29);
    v27 = *((_QWORD *)v3 + 30);
    LOBYTE(v31) = 15;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v26, v27, &v31, v5);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100B0D0B4()
{
  unsigned __int8 *v0;

  return sub_100B0CAF0(*v0);
}

uint64_t sub_100B0D0BC@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100B0F968(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100B0D0E0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100B0F780();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100B0D108(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100B0F780();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100B0D130(_QWORD *a1)
{
  return sub_100B0CCC8(a1);
}

uint64_t sub_100B0D1A0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _OWORD v37[2];

  v4 = *(_QWORD *)(a1 + 64);
  v6 = *(_QWORD *)(a1 + 80);
  v5 = *(_QWORD *)(a1 + 88);
  v7 = *(_QWORD *)(a1 + 104);
  v29 = *(_QWORD *)(a1 + 96);
  v8 = *(_QWORD *)(a1 + 112);
  v27 = *(_QWORD *)(a1 + 72);
  v28 = *(_QWORD *)(a1 + 120);
  v10 = *(_QWORD *)(a1 + 48);
  v9 = *(_QWORD *)(a1 + 56);
  v11 = *(_QWORD *)(a1 + 152);
  v33 = *(_QWORD *)(a1 + 160);
  v34 = *(_QWORD *)(a1 + 144);
  v31 = *(_QWORD *)(a1 + 168);
  v24 = *(_QWORD *)(a1 + 32);
  v36 = *(_QWORD *)(a1 + 40);
  v23 = *(_QWORD *)a1;
  v35 = *(_QWORD *)(a1 + 8);
  v21 = *(_QWORD *)(a1 + 128);
  v22 = *(_QWORD *)(a1 + 16);
  v30 = *(_QWORD *)(a1 + 24);
  v25 = *(_QWORD *)(a1 + 192);
  v32 = *(_QWORD *)(a1 + 200);
  v18 = *(_QWORD *)(a1 + 208);
  v26 = *(_QWORD *)(a1 + 216);
  v20 = *(_QWORD *)(a1 + 136);
  sub_10001BBBC(v21, v20);
  sub_10001BBBC(v4, v27);
  sub_10001BBBC(v6, v5);
  sub_10001BBBC(v29, v7);
  sub_10001BBBC(v8, v28);
  v19 = v9;
  sub_10001BBBC(v10, v9);
  sub_10001BBBC(v34, v11);
  sub_10001BBBC(v33, v31);
  swift_bridgeObjectRetain(v32);
  swift_bridgeObjectRetain(v36);
  swift_bridgeObjectRetain(v35);
  swift_bridgeObjectRetain(v30);
  if (v26 >> 60 != 15)
  {
    v12 = sub_1001EDBAC(v18, v26);
    v14 = v13;
    Data.hexString.getter(v12, v13);
    sub_10001BC14(v12, v14);
    __asm { BR              X11 }
  }
  v37[0] = *(_OWORD *)(a1 + 176);
  sub_100059DE8((uint64_t)v37);
  v15 = sub_100035530();
  v16 = DataProtocol.intValue.getter(&type metadata for Data, v15);
  sub_100B0F020((_QWORD *)a1);
  result = sub_1000ADA04((uint64_t)v37);
  *a2 = v21;
  a2[1] = v20;
  a2[2] = v16;
  a2[3] = v10;
  a2[4] = v19;
  a2[5] = v4;
  a2[6] = v27;
  a2[7] = v6;
  a2[8] = v5;
  a2[9] = v34;
  a2[10] = v11;
  a2[11] = v33;
  a2[12] = v31;
  a2[13] = v29;
  a2[14] = v7;
  a2[15] = v8;
  a2[16] = v28;
  a2[17] = v24;
  a2[18] = v36;
  a2[19] = v23;
  a2[20] = v35;
  a2[21] = v22;
  a2[22] = v30;
  a2[23] = 0x302E302E33;
  a2[24] = 0xE500000000000000;
  a2[25] = v25;
  a2[26] = v32;
  a2[27] = 0;
  a2[28] = 0;
  a2[29] = 0;
  a2[30] = 0;
  return result;
}

uint64_t sub_100B0D4F0(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2[134] = a2;
  v2[133] = a1;
  v3 = type metadata accessor for HashAlgorithm(0);
  v2[135] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[136] = v4;
  v2[137] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Locale(0);
  v2[138] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v2[139] = v6;
  v2[140] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Date(0);
  v2[141] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v2[142] = v8;
  v2[143] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100B0D5A4, 0, 0);
}

void sub_100B0D5A4()
{
  uint64_t v0;
  unint64_t v1;
  char isUniquelyReferenced_nonNull_native;
  id v3;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  unint64_t v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  unint64_t v37;
  void *v38;
  id v39;
  unsigned int v40;
  NSString v41;
  unsigned int v42;
  char v43;
  _QWORD *v44;
  uint64_t v45;
  __n128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void (__cdecl *v63)();

  v1 = sub_1006B8DC4((uint64_t)_swiftEmptyArrayStorage);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v1);
  sub_100109D28(1702195828, 0xE400000000000000, 0xD00000000000001BLL, 0x8000000100ECA2A0, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease();
  v3 = objc_msgSend((id)objc_opt_self(AKDevice), "currentDevice");
  if (!v3)
  {
    __break(1u);
    goto LABEL_10;
  }
  v4 = v3;
  v5 = objc_msgSend(v3, "serverFriendlyDescription");

  if (!v5)
  {
LABEL_10:
    __break(1u);
    return;
  }
  v6 = *(_QWORD *)(v0 + 1144);
  v7 = *(_QWORD *)(v0 + 1136);
  v8 = *(_QWORD *)(v0 + 1128);
  v60 = *(_QWORD *)(v0 + 1120);
  v61 = *(_QWORD *)(v0 + 1112);
  v62 = *(_QWORD *)(v0 + 1104);
  v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
  v11 = v10;

  v12 = swift_isUniquelyReferenced_nonNull_native(v1);
  sub_100109D28(v9, v11, 0xD000000000000011, 0x8000000100ECA2C0, v12);
  v13 = v1;
  v14 = swift_bridgeObjectRelease();
  v15 = Date.init()(v14);
  v16 = Date.epoch.getter(v15);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  *(_QWORD *)(v0 + 1040) = v16;
  v17 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int64, &protocol witness table for Int64);
  v19 = v18;
  v20 = swift_isUniquelyReferenced_nonNull_native(v13);
  sub_100109D28(v17, v19, 0xD000000000000015, 0x8000000100ECA2E0, v20);
  v21 = v13;
  swift_bridgeObjectRelease();
  *(_QWORD *)(v0 + 1032) = 1;
  v22 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  v24 = v23;
  v25 = swift_isUniquelyReferenced_nonNull_native(v21);
  sub_100109D28(v22, v24, 0xD000000000000013, 0x8000000100ECA300, v25);
  v26 = v21;
  swift_bridgeObjectRelease();
  v27 = sub_100AC2EB8();
  v29 = v28;
  v30 = swift_isUniquelyReferenced_nonNull_native(v26);
  sub_100109D28((uint64_t)v27, v29, 0x6567412D72657355, 0xEA0000000000746ELL, v30);
  v31 = swift_bridgeObjectRelease();
  v32 = static Locale.current.getter(v31);
  v33 = Locale.acceptLanguageCode.getter(v32);
  v35 = v34;
  (*(void (**)(uint64_t, uint64_t))(v61 + 8))(v60, v62);
  v36 = swift_isUniquelyReferenced_nonNull_native(v26);
  sub_100109D28(v33, v35, 0x4C2D747065636341, 0xEF65676175676E61, v36);
  v37 = v26;
  swift_bridgeObjectRelease();
  if (qword_1010EA198 != -1)
    swift_once(&qword_1010EA198, sub_100ACDE4C);
  v38 = (void *)qword_1011B7C08;
  v39 = objc_msgSend((id)objc_opt_self(FMSystemInfo), "sharedInstance");
  v40 = objc_msgSend(v39, "isInternalBuild");

  if (v40)
  {
    v41 = String._bridgeToObjectiveC()();
    v42 = objc_msgSend(v38, "BOOLForKey:", v41);

    if (v42)
    {
      v43 = swift_isUniquelyReferenced_nonNull_native(v37);
      sub_100109D28(0x7465722C6C616572, 0xEF302D726F727245, 0xD000000000000012, 0x8000000100ECA340, v43);
      swift_bridgeObjectRelease();
    }
  }
  *(_QWORD *)(v0 + 1152) = v37;
  v44 = *(_QWORD **)(v0 + 1064);
  sub_100705A7C(v44);
  sub_100B0D1A0((uint64_t)v44, (uint64_t *)(v0 + 16));
  v45 = type metadata accessor for JSONEncoder(0);
  swift_allocObject(v45, *(unsigned int *)(v45 + 48), *(unsigned __int16 *)(v45 + 52));
  JSONEncoder.init()(v46);
  v47 = *(_OWORD *)(v0 + 224);
  *(_OWORD *)(v0 + 704) = *(_OWORD *)(v0 + 208);
  *(_OWORD *)(v0 + 720) = v47;
  *(_OWORD *)(v0 + 736) = *(_OWORD *)(v0 + 240);
  *(_QWORD *)(v0 + 752) = *(_QWORD *)(v0 + 256);
  v48 = *(_OWORD *)(v0 + 160);
  *(_OWORD *)(v0 + 640) = *(_OWORD *)(v0 + 144);
  *(_OWORD *)(v0 + 656) = v48;
  v49 = *(_OWORD *)(v0 + 192);
  *(_OWORD *)(v0 + 672) = *(_OWORD *)(v0 + 176);
  *(_OWORD *)(v0 + 688) = v49;
  v50 = *(_OWORD *)(v0 + 96);
  *(_OWORD *)(v0 + 576) = *(_OWORD *)(v0 + 80);
  *(_OWORD *)(v0 + 592) = v50;
  v51 = *(_OWORD *)(v0 + 128);
  *(_OWORD *)(v0 + 608) = *(_OWORD *)(v0 + 112);
  *(_OWORD *)(v0 + 624) = v51;
  v52 = *(_OWORD *)(v0 + 32);
  *(_OWORD *)(v0 + 512) = *(_OWORD *)(v0 + 16);
  *(_OWORD *)(v0 + 528) = v52;
  v53 = *(_OWORD *)(v0 + 64);
  *(_OWORD *)(v0 + 544) = *(_OWORD *)(v0 + 48);
  *(_OWORD *)(v0 + 560) = v53;
  v54 = sub_100B0ED78();
  v55 = dispatch thunk of JSONEncoder.encode<A>(_:)(v0 + 512, &type metadata for AirPodsSWPairingLockAckRequestContent, v54);
  *(_QWORD *)(v0 + 1160) = v55;
  *(_QWORD *)(v0 + 1168) = v56;
  v57 = v55;
  v58 = v56;
  swift_release();
  sub_10001BBBC(v57, v58);
  v63 = (void (__cdecl *)())((char *)&dword_101115390 + dword_101115390);
  v59 = (_QWORD *)swift_task_alloc(unk_101115394);
  *(_QWORD *)(v0 + 1176) = v59;
  *v59 = v0;
  v59[1] = sub_100B0DD50;
  v63();
}

uint64_t sub_100B0DD50(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 1176);
  *(_QWORD *)(v3 + 1184) = a1;
  *(_QWORD *)(v3 + 1192) = a2;
  swift_task_dealloc(v4);
  return swift_task_switch(sub_100B0DDB0, 0, 0);
}

uint64_t sub_100B0DDB0()
{
  _QWORD *v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  char *v15;

  v1 = v0[149];
  v2 = v0[148];
  v3 = v0[146];
  v4 = v0[145];
  v5 = v0[137];
  v6 = v0[136];
  v7 = v0[135];
  v0[126] = v2;
  v0[127] = v1;
  sub_10001BBBC(v4, v3);
  sub_10001BBBC(v2, v1);
  sub_10078E27C(v4, v3);
  sub_10001BC14(v4, v3);
  sub_10001BC14(v2, v1);
  v8 = v0[126];
  v0[150] = v8;
  v9 = v0[127];
  v0[151] = v9;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v6 + 104))(v5, enum case for HashAlgorithm.sha256(_:), v7);
  v10 = Data.hash(algorithm:)(v5, v8, v9);
  v12 = v11;
  v0[152] = v10;
  v0[153] = v11;
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  v15 = (char *)&dword_101115388 + dword_101115388;
  v13 = (_QWORD *)swift_task_alloc(unk_10111538C);
  v0[154] = v13;
  *v13 = v0;
  v13[1] = sub_100B0DEF0;
  return ((uint64_t (*)(uint64_t, uint64_t, _QWORD))v15)(v10, v12, v0[134]);
}

uint64_t sub_100B0DEF0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t (*v6)();
  unint64_t v7;
  uint64_t v8;

  v4 = *(_QWORD **)v2;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 1232);
  *(_QWORD *)(*(_QWORD *)v2 + 1240) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = sub_100B0E5D4;
  }
  else
  {
    v7 = v4[153];
    v8 = v4[152];
    v4[156] = a1;
    sub_10001BC14(v8, v7);
    v6 = sub_100B0DF70;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_100B0DF70()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  int64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  NSObject *v38;
  os_log_type_t v39;
  BOOL v40;
  unint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint8_t *v44;
  uint64_t v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  uint64_t *v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  int64_t v65;
  uint64_t v66;
  uint64_t v67[2];

  v1 = v0[156];
  v2 = v0[155];
  v3 = v0[144];
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v3);
  v67[0] = v3;
  sub_1001664D0(v1, (uint64_t)sub_100B27BE4, 0, isUniquelyReferenced_nonNull_native, v67);
  if (v2)
    return swift_bridgeObjectRelease();
  v6 = v0[151];
  v7 = v0[150];
  v8 = v67[0];
  swift_bridgeObjectRelease();
  sub_10001BC14(v7, v6);
  if (qword_1010EA328 == -1)
    goto LABEL_4;
  while (1)
  {
    swift_once(&qword_1010EA328, sub_100B5E37C);
LABEL_4:
    v60 = v0 + 131;
    v9 = type metadata accessor for Logger(0);
    v66 = sub_10001A9E8(v9, (uint64_t)qword_1011B7E28);
    v10 = Logger.logObject.getter(v66);
    v11 = static os_log_type_t.debug.getter(v10);
    if (os_log_type_enabled(v10, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Pairing lock header:", v12, 2u);
      swift_slowDealloc(v12, -1, -1);
    }
    v61 = v0 + 2;
    v62 = v0;
    v59 = v0 + 33;

    v64 = v8 + 64;
    v13 = -1;
    v14 = -1 << *(_BYTE *)(v8 + 32);
    if (-v14 < 64)
      v13 = ~(-1 << -(char)v14);
    v15 = v13 & *(_QWORD *)(v8 + 64);
    v65 = (unint64_t)(63 - v14) >> 6;
    swift_bridgeObjectRetain(v8);
    v16 = 0;
    v63 = v8;
    while (v15)
    {
      while (1)
      {
        v17 = __clz(__rbit64(v15));
        v15 &= v15 - 1;
        v18 = v17 | (v16 << 6);
LABEL_26:
        v22 = 16 * v18;
        v23 = (uint64_t *)(*(_QWORD *)(v8 + 48) + v22);
        v25 = *v23;
        v24 = v23[1];
        v26 = (uint64_t *)(*(_QWORD *)(v8 + 56) + v22);
        v27 = *v26;
        v28 = v26[1];
        swift_bridgeObjectRetain_n(v24, 2);
        swift_bridgeObjectRetain_n(v28, 2);
        v30 = Logger.logObject.getter(v29);
        v31 = static os_log_type_t.debug.getter(v30);
        v0 = (_QWORD *)v31;
        if (os_log_type_enabled(v30, v31))
          break;
        swift_bridgeObjectRelease_n(v24, 2);
        swift_bridgeObjectRelease_n(v28, 2);

        if (!v15)
          goto LABEL_12;
      }
      v32 = v16;
      v33 = swift_slowAlloc(22, -1);
      v34 = swift_slowAlloc(64, -1);
      v67[0] = v34;
      *(_DWORD *)v33 = 136315394;
      swift_bridgeObjectRetain(v24);
      *(_QWORD *)(v33 + 4) = sub_100016940(v25, v24, v67);
      swift_bridgeObjectRelease_n(v24, 3);
      *(_WORD *)(v33 + 12) = 2080;
      swift_bridgeObjectRetain(v28);
      *(_QWORD *)(v33 + 14) = sub_100016940(v27, v28, v67);
      swift_bridgeObjectRelease_n(v28, 3);
      _os_log_impl((void *)&_mh_execute_header, v30, (os_log_type_t)v0, "%s: %s", (uint8_t *)v33, 0x16u);
      swift_arrayDestroy(v34, 2, (char *)&type metadata for Any + 8);
      v35 = v34;
      v8 = v63;
      swift_slowDealloc(v35, -1, -1);
      v36 = v33;
      v16 = v32;
      swift_slowDealloc(v36, -1, -1);

    }
LABEL_12:
    v19 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
      __break(1u);
      goto LABEL_34;
    }
    v0 = v62;
    if (v19 >= v65)
      break;
    v20 = *(_QWORD *)(v64 + 8 * v19);
    ++v16;
    if (v20)
      goto LABEL_25;
    v16 = v19 + 1;
    if (v19 + 1 >= v65)
      break;
    v20 = *(_QWORD *)(v64 + 8 * v16);
    if (v20)
      goto LABEL_25;
    v16 = v19 + 2;
    if (v19 + 2 >= v65)
      break;
    v20 = *(_QWORD *)(v64 + 8 * v16);
    if (v20)
      goto LABEL_25;
    v21 = v19 + 3;
    if (v21 >= v65)
      break;
    v20 = *(_QWORD *)(v64 + 8 * v21);
    if (v20)
    {
      v16 = v21;
LABEL_25:
      v15 = (v20 - 1) & v20;
      v18 = __clz(__rbit64(v20)) + (v16 << 6);
      goto LABEL_26;
    }
    while (1)
    {
      v16 = v21 + 1;
      if (__OFADD__(v21, 1))
        break;
      if (v16 >= v65)
        goto LABEL_29;
      v20 = *(_QWORD *)(v64 + 8 * v16);
      ++v21;
      if (v20)
        goto LABEL_25;
    }
LABEL_34:
    __break(1u);
  }
LABEL_29:
  swift_release();
  sub_100B0EDBC(v61);
  v37 = sub_100B0EDBC(v61);
  v38 = Logger.logObject.getter(v37);
  v39 = static os_log_type_t.debug.getter(v38);
  v40 = os_log_type_enabled(v38, v39);
  v41 = v62[146];
  v42 = v62[145];
  v43 = (_QWORD *)v62[133];
  if (v40)
  {
    v44 = (uint8_t *)swift_slowAlloc(12, -1);
    v45 = swift_slowAlloc(32, -1);
    v67[0] = v45;
    *(_DWORD *)v44 = 136315138;
    v0 = v62;
    v46 = *((_OWORD *)v61 + 13);
    *((_OWORD *)v59 + 12) = *((_OWORD *)v61 + 12);
    *((_OWORD *)v59 + 13) = v46;
    *((_OWORD *)v59 + 14) = *((_OWORD *)v61 + 14);
    v59[30] = v61[30];
    v47 = *((_OWORD *)v61 + 9);
    *((_OWORD *)v59 + 8) = *((_OWORD *)v61 + 8);
    *((_OWORD *)v59 + 9) = v47;
    v48 = *((_OWORD *)v61 + 11);
    *((_OWORD *)v59 + 10) = *((_OWORD *)v61 + 10);
    *((_OWORD *)v59 + 11) = v48;
    v49 = *((_OWORD *)v61 + 5);
    *((_OWORD *)v59 + 4) = *((_OWORD *)v61 + 4);
    *((_OWORD *)v59 + 5) = v49;
    v50 = *((_OWORD *)v61 + 7);
    *((_OWORD *)v59 + 6) = *((_OWORD *)v61 + 6);
    *((_OWORD *)v59 + 7) = v50;
    v51 = *((_OWORD *)v61 + 1);
    *(_OWORD *)v59 = *(_OWORD *)v61;
    *((_OWORD *)v59 + 1) = v51;
    v52 = *((_OWORD *)v61 + 3);
    *((_OWORD *)v59 + 2) = *((_OWORD *)v61 + 2);
    *((_OWORD *)v59 + 3) = v52;
    sub_100B0EDBC(v61);
    v53 = String.init<A>(describing:)(v59, &type metadata for AirPodsSWPairingLockAckRequestContent);
    v62[131] = sub_100016940(v53, v54, v67);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v60, v62 + 132, v44 + 4, v44 + 12);
    swift_bridgeObjectRelease();
    sub_100B0EEF0(v61);
    sub_100B0EEF0(v61);
    _os_log_impl((void *)&_mh_execute_header, v38, v39, "Pairing lock body %s", v44, 0xCu);
    swift_arrayDestroy(v45, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v45, -1, -1);
    swift_slowDealloc(v44, -1, -1);
    swift_release();
    sub_100B0F020(v43);

    sub_10001BC14(v42, v41);
    sub_100B0EEF0(v61);
  }
  else
  {
    sub_100B0EEF0(v61);
    sub_10001BC14(v42, v41);
    sub_100B0EEF0(v61);
    sub_100B0EEF0(v61);
    swift_release();
    sub_100B0F020(v43);

  }
  v55 = v0[146];
  v56 = v0[145];
  v57 = v0[140];
  v58 = v0[137];
  swift_task_dealloc(v0[143]);
  swift_task_dealloc(v57);
  swift_task_dealloc(v58);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v0[1])(v63, v56, v55);
}

uint64_t sub_100B0E5D4()
{
  _QWORD *v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  BOOL v9;
  uint64_t v10;
  unint64_t v11;
  uint8_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint8_t *v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  int64_t v23;
  unint64_t v24;
  unint64_t v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;
  uint64_t v29;
  uint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  int64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  NSObject *v45;
  os_log_type_t v46;
  BOOL v47;
  unint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint8_t *v51;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v67;
  uint64_t *v68;
  _QWORD *v69;
  unint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  int64_t v74;
  uint64_t v75;
  uint64_t v76;

  v69 = v0 + 132;
  v1 = v0[151];
  v2 = v0[150];
  sub_10001BC14(v0[152], v0[153]);
  sub_10001BC14(v2, v1);
  v3 = (unint64_t)&qword_1010EA000;
  if (qword_1010EA328 == -1)
    goto LABEL_2;
  while (1)
  {
    swift_once(&qword_1010EA328, sub_100B5E37C);
LABEL_2:
    v4 = v0[155];
    v5 = type metadata accessor for Logger(0);
    sub_10001A9E8(v5, (uint64_t)qword_1011B7E28);
    swift_errorRetain(v4);
    v6 = swift_errorRetain(v4);
    v7 = Logger.logObject.getter(v6);
    v8 = static os_log_type_t.error.getter(v7);
    v9 = os_log_type_enabled(v7, v8);
    v10 = v0[155];
    v71 = v0;
    if (v9)
    {
      v11 = v3;
      v12 = (uint8_t *)swift_slowAlloc(12, -1);
      v13 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v12 = 138543362;
      swift_errorRetain(v10);
      v14 = _swift_stdlib_bridgeErrorToNSError(v10);
      v71[132] = v14;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v69, v71 + 133, v12 + 4, v12 + 12);
      *v13 = v14;
      swift_errorRelease(v10);
      swift_errorRelease(v10);
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Failed to generate attestation header: %{public}@.", v12, 0xCu);
      v15 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
      swift_arrayDestroy(v13, 1, v15);
      swift_slowDealloc(v13, -1, -1);
      v16 = v12;
      v3 = v11;
      v0 = v71;
      swift_slowDealloc(v16, -1, -1);

      swift_errorRelease(v10);
    }
    else
    {
      swift_errorRelease(v10);
      swift_errorRelease(v10);
      swift_errorRelease(v10);

    }
    v17 = v0[144];
    if (*(_QWORD *)(v3 + 808) != -1)
      swift_once(&qword_1010EA328, sub_100B5E37C);
    v75 = sub_10001A9E8(v5, (uint64_t)qword_1011B7E28);
    v18 = Logger.logObject.getter(v75);
    v19 = static os_log_type_t.debug.getter(v18);
    if (os_log_type_enabled(v18, v19))
    {
      v20 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v20 = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Pairing lock header:", v20, 2u);
      swift_slowDealloc(v20, -1, -1);
    }
    v70 = (unint64_t)(v0 + 2);
    v67 = v0 + 33;
    v68 = v0 + 131;

    v73 = v17 + 64;
    v21 = -1;
    v22 = -1 << *(_BYTE *)(v17 + 32);
    if (-v22 < 64)
      v21 = ~(-1 << -(char)v22);
    v3 = v21 & *(_QWORD *)(v17 + 64);
    v74 = (unint64_t)(63 - v22) >> 6;
    swift_bridgeObjectRetain(v17);
    v23 = 0;
    v72 = v17;
    while (v3)
    {
      while (1)
      {
        v24 = __clz(__rbit64(v3));
        v3 &= v3 - 1;
        v25 = v24 | (v23 << 6);
LABEL_29:
        v29 = 16 * v25;
        v30 = (uint64_t *)(*(_QWORD *)(v17 + 48) + v29);
        v32 = *v30;
        v31 = v30[1];
        v33 = (uint64_t *)(*(_QWORD *)(v17 + 56) + v29);
        v35 = *v33;
        v34 = v33[1];
        swift_bridgeObjectRetain_n(v31, 2);
        swift_bridgeObjectRetain_n(v34, 2);
        v37 = Logger.logObject.getter(v36);
        v38 = static os_log_type_t.debug.getter(v37);
        v0 = (_QWORD *)v38;
        if (os_log_type_enabled(v37, v38))
          break;
        swift_bridgeObjectRelease_n(v31, 2);
        swift_bridgeObjectRelease_n(v34, 2);

        if (!v3)
          goto LABEL_15;
      }
      v39 = v23;
      v40 = swift_slowAlloc(22, -1);
      v41 = swift_slowAlloc(64, -1);
      v76 = v41;
      *(_DWORD *)v40 = 136315394;
      swift_bridgeObjectRetain(v31);
      *(_QWORD *)(v40 + 4) = sub_100016940(v32, v31, &v76);
      swift_bridgeObjectRelease_n(v31, 3);
      *(_WORD *)(v40 + 12) = 2080;
      swift_bridgeObjectRetain(v34);
      *(_QWORD *)(v40 + 14) = sub_100016940(v35, v34, &v76);
      swift_bridgeObjectRelease_n(v34, 3);
      _os_log_impl((void *)&_mh_execute_header, v37, (os_log_type_t)v0, "%s: %s", (uint8_t *)v40, 0x16u);
      swift_arrayDestroy(v41, 2, (char *)&type metadata for Any + 8);
      v42 = v41;
      v17 = v72;
      swift_slowDealloc(v42, -1, -1);
      v43 = v40;
      v23 = v39;
      swift_slowDealloc(v43, -1, -1);

    }
LABEL_15:
    v26 = v23 + 1;
    if (__OFADD__(v23, 1))
    {
      __break(1u);
      goto LABEL_37;
    }
    v3 = v70;
    v0 = v71;
    if (v26 >= v74)
      break;
    v27 = *(_QWORD *)(v73 + 8 * v26);
    ++v23;
    if (v27)
      goto LABEL_28;
    v23 = v26 + 1;
    if (v26 + 1 >= v74)
      break;
    v27 = *(_QWORD *)(v73 + 8 * v23);
    if (v27)
      goto LABEL_28;
    v23 = v26 + 2;
    if (v26 + 2 >= v74)
      break;
    v27 = *(_QWORD *)(v73 + 8 * v23);
    if (v27)
      goto LABEL_28;
    v28 = v26 + 3;
    if (v28 >= v74)
      break;
    v27 = *(_QWORD *)(v73 + 8 * v28);
    if (v27)
    {
      v23 = v28;
LABEL_28:
      v3 = (v27 - 1) & v27;
      v25 = __clz(__rbit64(v27)) + (v23 << 6);
      goto LABEL_29;
    }
    while (1)
    {
      v23 = v28 + 1;
      if (__OFADD__(v28, 1))
        break;
      if (v23 >= v74)
        goto LABEL_32;
      v27 = *(_QWORD *)(v73 + 8 * v23);
      ++v28;
      if (v27)
        goto LABEL_28;
    }
LABEL_37:
    __break(1u);
  }
LABEL_32:
  swift_release();
  sub_100B0EDBC((uint64_t *)v70);
  v44 = sub_100B0EDBC((uint64_t *)v70);
  v45 = Logger.logObject.getter(v44);
  v46 = static os_log_type_t.debug.getter(v45);
  v47 = os_log_type_enabled(v45, v46);
  v48 = v71[146];
  v49 = v71[145];
  v50 = (_QWORD *)v71[133];
  if (v47)
  {
    v51 = (uint8_t *)swift_slowAlloc(12, -1);
    v52 = swift_slowAlloc(32, -1);
    v76 = v52;
    *(_DWORD *)v51 = 136315138;
    v0 = v71;
    v53 = *(_OWORD *)(v70 + 208);
    *((_OWORD *)v67 + 12) = *(_OWORD *)(v70 + 192);
    *((_OWORD *)v67 + 13) = v53;
    *((_OWORD *)v67 + 14) = *(_OWORD *)(v70 + 224);
    v67[30] = *(_QWORD *)(v70 + 240);
    v54 = *(_OWORD *)(v70 + 144);
    *((_OWORD *)v67 + 8) = *(_OWORD *)(v70 + 128);
    *((_OWORD *)v67 + 9) = v54;
    v55 = *(_OWORD *)(v70 + 176);
    *((_OWORD *)v67 + 10) = *(_OWORD *)(v70 + 160);
    *((_OWORD *)v67 + 11) = v55;
    v56 = *(_OWORD *)(v70 + 80);
    *((_OWORD *)v67 + 4) = *(_OWORD *)(v70 + 64);
    *((_OWORD *)v67 + 5) = v56;
    v57 = *(_OWORD *)(v70 + 112);
    *((_OWORD *)v67 + 6) = *(_OWORD *)(v70 + 96);
    *((_OWORD *)v67 + 7) = v57;
    v58 = *(_OWORD *)(v70 + 16);
    *(_OWORD *)v67 = *(_OWORD *)v70;
    *((_OWORD *)v67 + 1) = v58;
    v59 = *(_OWORD *)(v70 + 48);
    *((_OWORD *)v67 + 2) = *(_OWORD *)(v70 + 32);
    *((_OWORD *)v67 + 3) = v59;
    sub_100B0EDBC((uint64_t *)v70);
    v60 = String.init<A>(describing:)(v67, &type metadata for AirPodsSWPairingLockAckRequestContent);
    *v68 = sub_100016940(v60, v61, &v76);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v68, v69, v51 + 4, v51 + 12);
    swift_bridgeObjectRelease();
    sub_100B0EEF0((uint64_t *)v70);
    sub_100B0EEF0((uint64_t *)v70);
    _os_log_impl((void *)&_mh_execute_header, v45, v46, "Pairing lock body %s", v51, 0xCu);
    swift_arrayDestroy(v52, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v52, -1, -1);
    swift_slowDealloc(v51, -1, -1);
    swift_release();
    sub_100B0F020(v50);

    sub_10001BC14(v49, v48);
    sub_100B0EEF0((uint64_t *)v70);
  }
  else
  {
    sub_100B0EEF0((uint64_t *)v70);
    sub_10001BC14(v49, v48);
    sub_100B0EEF0((uint64_t *)v70);
    sub_100B0EEF0((uint64_t *)v70);
    swift_release();
    sub_100B0F020(v50);

  }
  v62 = v0[146];
  v63 = v0[145];
  v64 = v0[140];
  v65 = v0[137];
  swift_task_dealloc(v0[143]);
  swift_task_dealloc(v64);
  swift_task_dealloc(v65);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v0[1])(v72, v63, v62);
}

unint64_t sub_100B0ED78()
{
  unint64_t result;

  result = qword_1011149A0;
  if (!qword_1011149A0)
  {
    result = swift_getWitnessTable(byte_100E5F5B0, &type metadata for AirPodsSWPairingLockAckRequestContent);
    atomic_store(result, (unint64_t *)&qword_1011149A0);
  }
  return result;
}

uint64_t *sub_100B0EDBC(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v2 = a1[3];
  v3 = a1[4];
  v4 = a1[5];
  v5 = a1[6];
  v6 = a1[7];
  v7 = a1[8];
  v8 = a1[9];
  v9 = a1[10];
  v10 = a1[11];
  v12 = a1[12];
  v14 = a1[14];
  v15 = a1[13];
  v16 = a1[16];
  v17 = a1[15];
  v18 = a1[18];
  v19 = a1[20];
  v20 = a1[22];
  v21 = a1[24];
  v22 = a1[26];
  v23 = a1[28];
  v13 = a1[30];
  sub_10001BBBC(*a1, a1[1]);
  sub_10001BBBC(v2, v3);
  sub_10001BBBC(v4, v5);
  sub_10001BBBC(v6, v7);
  sub_10001BBBC(v8, v9);
  sub_10001BBBC(v10, v12);
  sub_10001BBBC(v15, v14);
  sub_10001BBBC(v17, v16);
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRetain(v21);
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRetain(v23);
  return a1;
}

uint64_t *sub_100B0EEF0(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;

  v2 = a1[3];
  v3 = a1[4];
  v4 = a1[5];
  v5 = a1[6];
  v6 = a1[7];
  v7 = a1[8];
  v8 = a1[9];
  v9 = a1[10];
  v10 = a1[11];
  v12 = a1[12];
  v13 = a1[14];
  v15 = a1[16];
  v16 = a1[15];
  v14 = a1[13];
  sub_10001BC14(*a1, a1[1]);
  sub_10001BC14(v2, v3);
  sub_10001BC14(v4, v5);
  sub_10001BC14(v6, v7);
  sub_10001BC14(v8, v9);
  sub_10001BC14(v10, v12);
  sub_10001BC14(v14, v13);
  sub_10001BC14(v16, v15);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *sub_100B0F020(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;

  v2 = a1[6];
  v3 = a1[7];
  v4 = a1[8];
  v6 = a1[9];
  v5 = a1[10];
  v7 = a1[11];
  v8 = a1[12];
  v10 = a1[13];
  v11 = a1[15];
  v12 = a1[14];
  v13 = a1[17];
  v14 = a1[16];
  v15 = a1[19];
  v16 = a1[18];
  v17 = a1[21];
  v18 = a1[20];
  v19 = a1[23];
  v20 = a1[22];
  v22 = a1[26];
  v21 = a1[27];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10001BC14(v2, v3);
  sub_10001BC14(v4, v6);
  sub_10001BC14(v5, v7);
  sub_10001BC14(v8, v10);
  sub_10001BC14(v12, v11);
  sub_10001BC14(v14, v13);
  sub_10001BC14(v16, v15);
  sub_10001BC14(v18, v17);
  sub_10001BC14(v20, v19);
  swift_bridgeObjectRelease();
  sub_10001EF3C(v22, v21);
  return a1;
}

uint64_t destroy for AirPodsSWPairingLockAckRequestContent(uint64_t a1)
{
  sub_10001BC14(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  sub_10001BC14(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32));
  sub_10001BC14(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
  sub_10001BC14(*(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64));
  sub_10001BC14(*(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80));
  sub_10001BC14(*(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96));
  sub_10001BC14(*(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112));
  sub_10001BC14(*(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t *initializeWithCopy for AirPodsSWPairingLockAckRequestContent(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v4 = *a2;
  v5 = a2[1];
  sub_10001BBBC(*a2, v5);
  *a1 = v4;
  a1[1] = v5;
  v6 = a2[3];
  a1[2] = a2[2];
  v7 = a2[4];
  sub_10001BBBC(v6, v7);
  a1[3] = v6;
  a1[4] = v7;
  v8 = a2[5];
  v9 = a2[6];
  sub_10001BBBC(v8, v9);
  a1[5] = v8;
  a1[6] = v9;
  v10 = a2[7];
  v11 = a2[8];
  sub_10001BBBC(v10, v11);
  a1[7] = v10;
  a1[8] = v11;
  v12 = a2[9];
  v13 = a2[10];
  sub_10001BBBC(v12, v13);
  a1[9] = v12;
  a1[10] = v13;
  v14 = a2[11];
  v15 = a2[12];
  sub_10001BBBC(v14, v15);
  a1[11] = v14;
  a1[12] = v15;
  v16 = a2[13];
  v17 = a2[14];
  sub_10001BBBC(v16, v17);
  a1[13] = v16;
  a1[14] = v17;
  v18 = a2[15];
  v19 = a2[16];
  sub_10001BBBC(v18, v19);
  a1[15] = v18;
  a1[16] = v19;
  v20 = a2[18];
  a1[17] = a2[17];
  a1[18] = v20;
  v21 = a2[20];
  a1[19] = a2[19];
  a1[20] = v21;
  v22 = a2[22];
  a1[21] = a2[21];
  a1[22] = v22;
  v23 = a2[24];
  a1[23] = a2[23];
  a1[24] = v23;
  v24 = a2[26];
  a1[25] = a2[25];
  a1[26] = v24;
  v25 = a2[28];
  a1[27] = a2[27];
  a1[28] = v25;
  v26 = a2[29];
  v27 = a2[30];
  a1[29] = v26;
  a1[30] = v27;
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRetain(v21);
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRetain(v23);
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRetain(v25);
  swift_bridgeObjectRetain(v27);
  return a1;
}

uint64_t *assignWithCopy for AirPodsSWPairingLockAckRequestContent(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v4 = *a2;
  v5 = a2[1];
  sub_10001BBBC(*a2, v5);
  v6 = *a1;
  v7 = a1[1];
  *a1 = v4;
  a1[1] = v5;
  sub_10001BC14(v6, v7);
  a1[2] = a2[2];
  v8 = a2[3];
  v9 = a2[4];
  sub_10001BBBC(v8, v9);
  v10 = a1[3];
  v11 = a1[4];
  a1[3] = v8;
  a1[4] = v9;
  sub_10001BC14(v10, v11);
  v12 = a2[5];
  v13 = a2[6];
  sub_10001BBBC(v12, v13);
  v14 = a1[5];
  v15 = a1[6];
  a1[5] = v12;
  a1[6] = v13;
  sub_10001BC14(v14, v15);
  v16 = a2[7];
  v17 = a2[8];
  sub_10001BBBC(v16, v17);
  v18 = a1[7];
  v19 = a1[8];
  a1[7] = v16;
  a1[8] = v17;
  sub_10001BC14(v18, v19);
  v20 = a2[9];
  v21 = a2[10];
  sub_10001BBBC(v20, v21);
  v22 = a1[9];
  v23 = a1[10];
  a1[9] = v20;
  a1[10] = v21;
  sub_10001BC14(v22, v23);
  v24 = a2[11];
  v25 = a2[12];
  sub_10001BBBC(v24, v25);
  v26 = a1[11];
  v27 = a1[12];
  a1[11] = v24;
  a1[12] = v25;
  sub_10001BC14(v26, v27);
  v28 = a2[13];
  v29 = a2[14];
  sub_10001BBBC(v28, v29);
  v30 = a1[13];
  v31 = a1[14];
  a1[13] = v28;
  a1[14] = v29;
  sub_10001BC14(v30, v31);
  v32 = a2[15];
  v33 = a2[16];
  sub_10001BBBC(v32, v33);
  v34 = a1[15];
  v35 = a1[16];
  a1[15] = v32;
  a1[16] = v33;
  sub_10001BC14(v34, v35);
  a1[17] = a2[17];
  v36 = a2[18];
  a1[18] = v36;
  swift_bridgeObjectRetain(v36);
  swift_bridgeObjectRelease();
  a1[19] = a2[19];
  v37 = a2[20];
  a1[20] = v37;
  swift_bridgeObjectRetain(v37);
  swift_bridgeObjectRelease();
  a1[21] = a2[21];
  v38 = a2[22];
  a1[22] = v38;
  swift_bridgeObjectRetain(v38);
  swift_bridgeObjectRelease();
  a1[23] = a2[23];
  v39 = a2[24];
  a1[24] = v39;
  swift_bridgeObjectRetain(v39);
  swift_bridgeObjectRelease();
  a1[25] = a2[25];
  v40 = a2[26];
  a1[26] = v40;
  swift_bridgeObjectRetain(v40);
  swift_bridgeObjectRelease();
  a1[27] = a2[27];
  v41 = a2[28];
  a1[28] = v41;
  swift_bridgeObjectRetain(v41);
  swift_bridgeObjectRelease();
  a1[29] = a2[29];
  v42 = a2[30];
  a1[30] = v42;
  swift_bridgeObjectRetain(v42);
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for AirPodsSWPairingLockAckRequestContent(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __n128 result;
  __int128 v12;
  __int128 v13;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  v5 = a2[4];
  v6 = a2[5];
  v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  v8 = a2[8];
  v9 = a2[9];
  v10 = a2[11];
  *(_OWORD *)(a1 + 160) = a2[10];
  *(_OWORD *)(a1 + 176) = v10;
  *(_OWORD *)(a1 + 128) = v8;
  *(_OWORD *)(a1 + 144) = v9;
  result = (__n128)a2[12];
  v12 = a2[13];
  v13 = a2[14];
  *(_QWORD *)(a1 + 240) = *((_QWORD *)a2 + 30);
  *(_OWORD *)(a1 + 208) = v12;
  *(_OWORD *)(a1 + 224) = v13;
  *(__n128 *)(a1 + 192) = result;
  return result;
}

uint64_t assignWithTake for AirPodsSWPairingLockAckRequestContent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_10001BC14(v4, v5);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(_QWORD *)(a1 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  sub_10001BC14(v6, v7);
  v8 = *(_QWORD *)(a1 + 40);
  v9 = *(_QWORD *)(a1 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  sub_10001BC14(v8, v9);
  v10 = *(_QWORD *)(a1 + 56);
  v11 = *(_QWORD *)(a1 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  sub_10001BC14(v10, v11);
  v12 = *(_QWORD *)(a1 + 72);
  v13 = *(_QWORD *)(a1 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  sub_10001BC14(v12, v13);
  v14 = *(_QWORD *)(a1 + 88);
  v15 = *(_QWORD *)(a1 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  sub_10001BC14(v14, v15);
  v16 = *(_QWORD *)(a1 + 104);
  v17 = *(_QWORD *)(a1 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  sub_10001BC14(v16, v17);
  v18 = *(_QWORD *)(a1 + 120);
  v19 = *(_QWORD *)(a1 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  sub_10001BC14(v18, v19);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  swift_bridgeObjectRelease();
  v20 = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = v20;
  swift_bridgeObjectRelease();
  v21 = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 176) = v21;
  swift_bridgeObjectRelease();
  v22 = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 192) = v22;
  swift_bridgeObjectRelease();
  v23 = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 208) = v23;
  swift_bridgeObjectRelease();
  v24 = *(_QWORD *)(a2 + 224);
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(a1 + 224) = v24;
  swift_bridgeObjectRelease();
  v25 = *(_QWORD *)(a2 + 240);
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
  *(_QWORD *)(a1 + 240) = v25;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AirPodsSWPairingLockAckRequestContent(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 248))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 192);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AirPodsSWPairingLockAckRequestContent(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 248) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 192) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 248) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AirPodsSWPairingLockAckRequestContent()
{
  return &type metadata for AirPodsSWPairingLockAckRequestContent;
}

ValueMetadata *type metadata accessor for AirPodsSWPairingLockAckRequest()
{
  return &type metadata for AirPodsSWPairingLockAckRequest;
}

unint64_t sub_100B0F780()
{
  unint64_t result;

  result = qword_1011149B0;
  if (!qword_1011149B0)
  {
    result = swift_getWitnessTable(byte_100E5F6F4, &type metadata for AirPodsSWPairingLockAckRequestContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1011149B0);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for AirPodsSWPairingLockAckRequestContent.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 15 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 15) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF1)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF0)
    return ((uint64_t (*)(void))((char *)&loc_100B0F810 + 4 * byte_100E5F545[v4]))();
  *a1 = a2 + 15;
  return ((uint64_t (*)(void))((char *)sub_100B0F844 + 4 * byte_100E5F540[v4]))();
}

uint64_t sub_100B0F844(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100B0F84C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100B0F854);
  return result;
}

uint64_t sub_100B0F860(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100B0F868);
  *(_BYTE *)result = a2 + 15;
  return result;
}

uint64_t sub_100B0F86C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100B0F874(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AirPodsSWPairingLockAckRequestContent.CodingKeys()
{
  return &type metadata for AirPodsSWPairingLockAckRequestContent.CodingKeys;
}

unint64_t sub_100B0F894()
{
  unint64_t result;

  result = qword_1011149B8;
  if (!qword_1011149B8)
  {
    result = swift_getWitnessTable(byte_100E5F6CC, &type metadata for AirPodsSWPairingLockAckRequestContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1011149B8);
  }
  return result;
}

unint64_t sub_100B0F8DC()
{
  unint64_t result;

  result = qword_1011149C0;
  if (!qword_1011149C0)
  {
    result = swift_getWitnessTable(aM_42, &type metadata for AirPodsSWPairingLockAckRequestContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1011149C0);
  }
  return result;
}

unint64_t sub_100B0F924()
{
  unint64_t result;

  result = qword_1011149C8;
  if (!qword_1011149C8)
  {
    result = swift_getWitnessTable(a5_20, &type metadata for AirPodsSWPairingLockAckRequestContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1011149C8);
  }
  return result;
}

uint64_t sub_100B0F968(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char v21;

  if (a1 == 0x4E6E6F6973736573 && a2 == 0xEC00000065636E6FLL)
  {
    v5 = 0xEC00000065636E6FLL;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x4E6E6F6973736573, 0xEC00000065636E6FLL, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x737574617473 && a2 == 0xE600000000000000)
  {
    v7 = 0xE600000000000000;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x737574617473, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x636E6F4E68747561 && a2 == 0xE900000000000065)
  {
    v8 = 0xE900000000000065;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x636E6F4E68747561, 0xE900000000000065, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0x754E6C6169726573 && a2 == 0xEC0000007265626DLL)
  {
    v9 = 0xEC0000007265626DLL;
LABEL_26:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x754E6C6169726573, 0xEC0000007265626DLL, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_26;
  }
  if (a1 == 0x6169726553746C61 && a2 == 0xEF7265626D754E6CLL)
  {
    v10 = 0xEF7265626D754E6CLL;
LABEL_32:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6169726553746C61, 0xEF7265626D754E6CLL, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_32;
  }
  if (a1 == 0x7461747365747461 && a2 == 0xEB000000006E6F69)
  {
    v11 = 0xEB000000006E6F69;
LABEL_38:
    swift_bridgeObjectRelease(v11);
    return 5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7461747365747461, 0xEB000000006E6F69, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
    goto LABEL_38;
  }
  if (a1 == 0x726F737365636361 && a2 == 0xED00006E67695379)
  {
    v12 = 0xED00006E67695379;
LABEL_44:
    swift_bridgeObjectRelease(v12);
    return 6;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x726F737365636361, 0xED00006E67695379, a1, a2, 0) & 1) != 0)
  {
    v12 = a2;
    goto LABEL_44;
  }
  if (a1 == 0x7374726563 && a2 == 0xE500000000000000)
  {
    v13 = 0xE500000000000000;
LABEL_50:
    swift_bridgeObjectRelease(v13);
    return 7;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7374726563, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    v13 = a2;
    goto LABEL_50;
  }
  if (a1 == 7500643 && a2 == 0xE300000000000000)
  {
    v14 = 0xE300000000000000;
LABEL_56:
    swift_bridgeObjectRelease(v14);
    return 8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(7500643, 0xE300000000000000, a1, a2, 0) & 1) != 0)
  {
    v14 = a2;
    goto LABEL_56;
  }
  if (a1 == 0xD000000000000011)
  {
    v15 = 0x8000000100ECA360;
    if (a2 == 0x8000000100ECA360)
      goto LABEL_61;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x8000000100ECA360, a1, a2, 0) & 1) != 0)
  {
    v15 = a2;
LABEL_61:
    swift_bridgeObjectRelease(v15);
    return 9;
  }
  if (a1 == 0x69634572656E776FLL && a2 == 0xE900000000000064)
  {
    v16 = 0xE900000000000064;
LABEL_67:
    swift_bridgeObjectRelease(v16);
    return 10;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x69634572656E776FLL, 0xE900000000000064, a1, a2, 0) & 1) != 0)
  {
    v16 = a2;
    goto LABEL_67;
  }
  if (a1 == 0x69684372656E776FLL && a2 == 0xEB00000000644970)
  {
    v17 = 0xEB00000000644970;
LABEL_73:
    swift_bridgeObjectRelease(v17);
    return 11;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x69684372656E776FLL, 0xEB00000000644970, a1, a2, 0) & 1) != 0)
  {
    v17 = a2;
    goto LABEL_73;
  }
  if (a1 == 0x7372655663657073 && a2 == 0xEB000000006E6F69)
  {
    v18 = 0xEB000000006E6F69;
LABEL_79:
    swift_bridgeObjectRelease(v18);
    return 12;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7372655663657073, 0xEB000000006E6F69, a1, a2, 0) & 1) != 0)
  {
    v18 = a2;
    goto LABEL_79;
  }
  if (a1 == 0x657261776D726966 && a2 == 0xEF6E6F6973726556)
  {
    v19 = 0xEF6E6F6973726556;
LABEL_85:
    swift_bridgeObjectRelease(v19);
    return 13;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x657261776D726966, 0xEF6E6F6973726556, a1, a2, 0) & 1) != 0)
  {
    v19 = a2;
    goto LABEL_85;
  }
  if (a1 == 0x49746375646F7270 && a2 == 0xE900000000000064)
  {
    v20 = 0xE900000000000064;
LABEL_91:
    swift_bridgeObjectRelease(v20);
    return 14;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x49746375646F7270, 0xE900000000000064, a1, a2, 0) & 1) != 0)
  {
    v20 = a2;
    goto LABEL_91;
  }
  if (a1 == 0x6449726F646E6576 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease(0xE800000000000000);
    return 15;
  }
  else
  {
    v21 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6449726F646E6576, 0xE800000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v21 & 1) != 0)
      return 15;
    else
      return 16;
  }
}

uint64_t *sub_100B10098(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v4;
  int v5;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  const void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v8 = *(_QWORD *)a2;
    *v4 = *(_QWORD *)a2;
    v4 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = *(_QWORD *)(a2 + 8);
    if (v7 >> 60 == 15)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
    }
    else
    {
      v9 = *(_QWORD *)a2;
      sub_10001BBBC(*(_QWORD *)a2, *(_QWORD *)(a2 + 8));
      *v4 = v9;
      v4[1] = v7;
    }
    v10 = *(int *)(a3 + 20);
    v11 = (char *)v4 + v10;
    v12 = (const void *)(a2 + v10);
    v13 = type metadata accessor for UUID(0);
    v14 = *(_QWORD *)(v13 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
    {
      v15 = sub_10001A9A8(&qword_1010ED860);
      memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, const void *, uint64_t))(v14 + 16))(v11, v12, v13);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
    }
  }
  return v4;
}

uint64_t sub_100B101B0(uint64_t *a1, uint64_t a2)
{
  unint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v4 = a1[1];
  if (v4 >> 60 != 15)
    sub_10001BC14(*a1, v4);
  v5 = (char *)a1 + *(int *)(a2 + 20);
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v5, v6);
  return result;
}

uint64_t sub_100B1023C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = a2[1];
  if (v6 >> 60 == 15)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    v7 = *a2;
    sub_10001BBBC(*a2, a2[1]);
    *(_QWORD *)a1 = v7;
    *(_QWORD *)(a1 + 8) = v6;
  }
  v8 = *(int *)(a3 + 20);
  v9 = (void *)(a1 + v8);
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for UUID(0);
  v12 = *(_QWORD *)(v11 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
  {
    v13 = sub_10001A9A8(&qword_1010ED860);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  return a1;
}

uint64_t *sub_100B10328(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(char *, uint64_t, uint64_t);
  int v17;
  int v18;
  uint64_t v19;

  v6 = *(_QWORD *)(a2 + 8);
  if ((unint64_t)a1[1] >> 60 == 15)
  {
    if (v6 >> 60 != 15)
    {
      v7 = *(_QWORD *)a2;
      sub_10001BBBC(*(_QWORD *)a2, *(_QWORD *)(a2 + 8));
      *a1 = v7;
      a1[1] = v6;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v6 >> 60 == 15)
  {
    sub_1000DC964((uint64_t)a1);
LABEL_6:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_8;
  }
  v8 = *(_QWORD *)a2;
  sub_10001BBBC(*(_QWORD *)a2, *(_QWORD *)(a2 + 8));
  v9 = *a1;
  v10 = a1[1];
  *a1 = v8;
  a1[1] = v6;
  sub_10001BC14(v9, v10);
LABEL_8:
  v11 = *(int *)(a3 + 20);
  v12 = (char *)a1 + v11;
  v13 = (char *)(a2 + v11);
  v14 = type metadata accessor for UUID(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 48);
  v17 = v16(v12, 1, v14);
  v18 = v16(v13, 1, v14);
  if (!v17)
  {
    if (!v18)
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 24))(v12, v13, v14);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v15 + 8))(v12, v14);
    goto LABEL_13;
  }
  if (v18)
  {
LABEL_13:
    v19 = sub_10001A9A8(&qword_1010ED860);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v12, v13, v14);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  return a1;
}

_OWORD *sub_100B104A4(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7))
  {
    v9 = sub_10001A9A8(&qword_1010ED860);
    memcpy(v5, v6, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v5, v6, v7);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v5, 0, 1, v7);
  }
  return a1;
}

uint64_t sub_100B10560(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(void *, uint64_t, uint64_t);
  int v15;
  int v16;
  uint64_t v17;

  v6 = *(_QWORD *)(a1 + 8);
  if (v6 >> 60 == 15)
    goto LABEL_4;
  v7 = *(_QWORD *)(a2 + 8);
  if (v7 >> 60 == 15)
  {
    sub_1000DC964(a1);
LABEL_4:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_6;
  }
  v8 = *(_QWORD *)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v7;
  sub_10001BC14(v8, v6);
LABEL_6:
  v9 = *(int *)(a3 + 20);
  v10 = (void *)(a1 + v9);
  v11 = (void *)(a2 + v9);
  v12 = type metadata accessor for UUID(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v13 + 48);
  v15 = v14(v10, 1, v12);
  v16 = v14(v11, 1, v12);
  if (!v15)
  {
    if (!v16)
    {
      (*(void (**)(void *, void *, uint64_t))(v13 + 40))(v10, v11, v12);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v13 + 8))(v10, v12);
    goto LABEL_11;
  }
  if (v16)
  {
LABEL_11:
    v17 = sub_10001A9A8(&qword_1010ED860);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v13 + 32))(v10, v11, v12);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
  return a1;
}

uint64_t sub_100B106AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100B106B8);
}

uint64_t sub_100B106B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  BOOL v5;
  unsigned int v6;
  uint64_t v10;

  if ((_DWORD)a2 == 11)
  {
    v4 = *(_QWORD *)(a1 + 8) >> 60;
    v5 = ((4 * (_DWORD)v4) & 0xC) == 0;
    v6 = ((4 * v4) & 0xC | (v4 >> 2)) ^ 0xF;
    if (v5)
      return 0;
    else
      return v6;
  }
  else
  {
    v10 = sub_10001A9A8(&qword_1010ED860);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(a1 + *(int *)(a3 + 20), a2, v10);
  }
}

uint64_t sub_100B1073C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100B10748);
}

char *sub_100B10748(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 11)
  {
    *(_QWORD *)result = 0;
    *((_QWORD *)result + 1) = (unint64_t)((~(_DWORD)a2 >> 2) & 3 | (4 * ~(_DWORD)a2)) << 60;
  }
  else
  {
    v7 = sub_10001A9A8(&qword_1010ED860);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 20)], a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for PencilPairingLockAckResponse(uint64_t a1)
{
  uint64_t result;

  result = qword_101114A28;
  if (!qword_101114A28)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for PencilPairingLockAckResponse);
  return result;
}

void sub_100B10804(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = &unk_100E5F780;
  sub_100252558(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(v2 - 8) + 64;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
  }
}

uint64_t sub_100B10878@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _OWORD *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  __int128 v26;
  char v27;

  v23 = a2;
  v4 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v4);
  v24 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = sub_10001A9A8(&qword_101114A60);
  v6 = *(_QWORD *)(v25 - 8);
  __chkstk_darwin(v25);
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for PencilPairingLockAckResponse(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v13 = a1[4];
  sub_10001AA44(a1, v12);
  v14 = sub_100B10B94();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for PencilPairingLockAckResponse.CodingKeys, &type metadata for PencilPairingLockAckResponse.CodingKeys, v14, v12, v13);
  if (v2)
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  v22 = a1;
  v15 = v11;
  v16 = (uint64_t)v24;
  v27 = 0;
  v17 = sub_100036994();
  v18 = v25;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&type metadata for Data, &v27, v25, &type metadata for Data, v17);
  *v15 = v26;
  v19 = type metadata accessor for UUID(0);
  LOBYTE(v26) = 1;
  v20 = sub_100252A08();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v19, &v26, v18, v19, v20);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v18);
  sub_1001C0884(v16, (uint64_t)v15 + *(int *)(v9 + 20));
  sub_100B10BD8((uint64_t)v15, v23);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v22);
  return sub_100B10C1C((uint64_t)v15);
}

uint64_t sub_100B10ACC()
{
  _BYTE *v0;

  if (*v0)
    return 0x6449616E6D66;
  else
    return 0x754E6C6169726573;
}

uint64_t sub_100B10B0C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100B10DFC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100B10B30(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100B10B94();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100B10B58(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100B10B94();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100B10B80@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100B10878(a1, a2);
}

unint64_t sub_100B10B94()
{
  unint64_t result;

  result = qword_101114A68;
  if (!qword_101114A68)
  {
    result = swift_getWitnessTable(byte_100E5F884, &type metadata for PencilPairingLockAckResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101114A68);
  }
  return result;
}

uint64_t sub_100B10BD8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PencilPairingLockAckResponse(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100B10C1C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for PencilPairingLockAckResponse(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t storeEnumTagSinglePayload for PencilPairingLockAckResponse.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_100B10CA4 + 4 * byte_100E5F755[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100B10CD8 + 4 * byte_100E5F750[v4]))();
}

uint64_t sub_100B10CD8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100B10CE0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100B10CE8);
  return result;
}

uint64_t sub_100B10CF4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100B10CFCLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_100B10D00(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100B10D08(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PencilPairingLockAckResponse.CodingKeys()
{
  return &type metadata for PencilPairingLockAckResponse.CodingKeys;
}

unint64_t sub_100B10D28()
{
  unint64_t result;

  result = qword_101114A70;
  if (!qword_101114A70)
  {
    result = swift_getWitnessTable(byte_100E5F85C, &type metadata for PencilPairingLockAckResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101114A70);
  }
  return result;
}

unint64_t sub_100B10D70()
{
  unint64_t result;

  result = qword_101114A78;
  if (!qword_101114A78)
  {
    result = swift_getWitnessTable(byte_100E5F7CC, &type metadata for PencilPairingLockAckResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101114A78);
  }
  return result;
}

unint64_t sub_100B10DB8()
{
  unint64_t result;

  result = qword_101114A80;
  if (!qword_101114A80)
  {
    result = swift_getWitnessTable(byte_100E5F7F4, &type metadata for PencilPairingLockAckResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101114A80);
  }
  return result;
}

uint64_t sub_100B10DFC(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 0x754E6C6169726573 && a2 == 0xEC0000007265626DLL)
  {
    v5 = 0xEC0000007265626DLL;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x754E6C6169726573, 0xEC0000007265626DLL, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6449616E6D66 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease(0xE600000000000000);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6449616E6D66, 0xE600000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

ValueMetadata *type metadata accessor for SystemInfo()
{
  return &type metadata for SystemInfo;
}

id sub_100B10F0C(uint64_t a1, uint64_t a2)
{
  return sub_100B10F30(a1, a2, (uint64_t (*)(void))&_MobileGestalt_copy_productType_obj);
}

id sub_100B10F18(uint64_t a1, uint64_t a2)
{
  return sub_100B10F30(a1, a2, (uint64_t (*)(void))&_MobileGestalt_copy_productVersion_obj);
}

id sub_100B10F24(uint64_t a1, uint64_t a2)
{
  return sub_100B10F30(a1, a2, (uint64_t (*)(void))&_MobileGestalt_copy_uniqueDeviceID_obj);
}

id sub_100B10F30(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  id result;
  void *v5;
  id v6;
  uint64_t v7;

  result = (id)MobileGestalt_get_current_device();
  if (result)
  {
    v5 = result;
    v6 = (id)a3();

    if (!v6)
      return 0;
    v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);

    return (id)v7;
  }
  else
  {
    __break(1u);
  }
  return result;
}

id sub_100B10FB0()
{
  id v0;
  id v1;

  v0 = objc_msgSend((id)objc_opt_self(FMSystemInfo), "sharedInstance");
  v1 = objc_msgSend(v0, "isInternalBuild");

  return v1;
}

id sub_100B11004@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  id result;
  void *v4;
  id v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t *, uint64_t, uint64_t, uint64_t);
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  result = (id)MobileGestalt_get_current_device(a1);
  if (result)
  {
    v4 = result;
    v5 = (id)MobileGestalt_copy_uniqueDeviceID_obj();

    if (v5)
    {
      v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
      v8 = v7;

    }
    else
    {
      v6 = 0;
      v8 = 0xE000000000000000;
    }
    v9 = HIBYTE(v8) & 0xF;
    if ((v8 & 0x2000000000000000) == 0)
      v9 = v6 & 0xFFFFFFFFFFFFLL;
    if (v9)
    {
      *a2 = v6;
      a2[1] = v8;
      v10 = type metadata accessor for StableIdentifier(0);
      swift_storeEnumTagMultiPayload(a2, v10, 0);
      v11 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
      v12 = a2;
      v13 = 0;
      v14 = v10;
    }
    else
    {
      v15 = swift_bridgeObjectRelease();
      v16 = static os_log_type_t.error.getter(v15);
      if (qword_1010EA248 != -1)
        swift_once(&qword_1010EA248, sub_100B5D8FC);
      os_log(_:dso:log:_:_:)(v16, &_mh_execute_header, qword_1011B7D28, "Local uniqueDeviceID not found.", 31, 2, _swiftEmptyArrayStorage);
      v14 = type metadata accessor for StableIdentifier(0);
      v11 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56);
      v12 = a2;
      v13 = 1;
    }
    return (id)v11(v12, v13, 1, v14);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100B11150@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  size_t v26;

  v2 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v2);
  v4 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for String.Encoding(0);
  __chkstk_darwin(v5);
  v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = 37;
  v8 = static Array._allocateBufferUninitialized(minimumCapacity:)(37, &type metadata for Int8);
  *(_QWORD *)(v8 + 16) = 37;
  *(_OWORD *)(v8 + 48) = 0u;
  *(_QWORD *)(v8 + 61) = 0;
  *(_OWORD *)(v8 + 32) = 0u;
  if (sysctlbyname("kern.bootsessionuuid", (void *)(v8 + 32), &v26, 0, 0))
  {
    v15 = errno.getter();
    if (!strerror(v15))
      __break(1u);
    goto LABEL_10;
  }
  v9 = swift_bridgeObjectRetain(v8);
  static String.Encoding.ascii.getter(v9);
  v10 = sub_100B11484(v8, v7);
  if (!v11)
  {
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000023, 0x8000000100EEEB20, "searchpartyd/SystemInfo.swift", 29, 2, 48, 0);
    goto LABEL_9;
  }
  UUID.init(uuidString:)(v10, v11);
  swift_bridgeObjectRelease();
  v12 = type metadata accessor for UUID(0);
  v13 = *(_QWORD *)(v12 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v4, 1, v12) == 1)
  {
    sub_1001C0844((uint64_t)v4);
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000023, 0x8000000100EEEB20, "searchpartyd/SystemInfo.swift", 29, 2, 52, 0);
    while (1)
    {
LABEL_9:
      __break(1u);
LABEL_10:
      v16 = String.init(utf8String:)();
      if (v17)
        v18 = v16;
      else
        v18 = 0x6E776F6E6B6E55;
      if (v17)
        v19 = v17;
      else
        v19 = 0xE700000000000000;
      v20 = static os_log_type_t.error.getter(v16);
      v21 = sub_100253E58();
      v22 = (void *)static OS_os_log.default.getter(v21);
      v23 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
      v24 = swift_allocObject(v23, 112, 7);
      *(_OWORD *)(v24 + 16) = xmmword_100E22B10;
      *(_QWORD *)(v24 + 56) = &type metadata for String;
      *(_QWORD *)(v24 + 64) = sub_10001AA00();
      *(_QWORD *)(v24 + 32) = v18;
      *(_QWORD *)(v24 + 40) = v19;
      v25 = errno.getter();
      *(_QWORD *)(v24 + 96) = &type metadata for Int32;
      *(_QWORD *)(v24 + 104) = &protocol witness table for Int32;
      *(_DWORD *)(v24 + 72) = v25;
      os_log(_:dso:log:_:_:)(v20, &_mh_execute_header, v22, "Error from sysctlbyname: %@ (%d)", 32, 2, v24);

      swift_bridgeObjectRelease();
      _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000023, 0x8000000100EEEB20, "searchpartyd/SystemInfo.swift", 29, 2, 44, 0);
    }
  }
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v13 + 32))(a1, v4, v12);
}

uint64_t sub_100B11444()
{
  uint64_t v0;
  uint64_t result;

  v0 = sub_10001A9A8(&qword_101114A90);
  swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  result = SynchronousCache.init()();
  qword_101114A88 = result;
  return result;
}

uint64_t sub_100B11484(uint64_t a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char v12;
  void (*v13)(char *, uint64_t);
  __n128 v14;
  char v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  char v27;
  id v28;
  uint64_t result;
  uint64_t v30;

  v4 = type metadata accessor for String.Encoding(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v6);
  v11 = (char *)&v30 - v10;
  static String.Encoding.utf8.getter(v9);
  v12 = static String.Encoding.== infix(_:_:)(a2, v11);
  v13 = *(void (**)(char *, uint64_t))(v5 + 8);
  v13(v11, v4);
  (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v8, a2, v4);
  if ((v12 & 1) != 0)
  {
    v13(v8, v4);
    goto LABEL_4;
  }
  static String.Encoding.ascii.getter(v14);
  v15 = static String.Encoding.== infix(_:_:)(v8, v11);
  v13(v11, v4);
  v13(v8, v4);
  if ((v15 & 1) != 0)
  {
LABEL_4:
    v16 = sub_100B11848(0, a1);
    if ((v17 & 1) == 0)
    {
      if ((v16 & 0x8000000000000000) == 0)
      {
        v18 = *(_QWORD *)(a1 + 16);
        if (v18 >= v16)
          v18 = v16;
        if (v16)
          v19 = v18;
        else
          v19 = 0;
        v20 = swift_bridgeObjectRetain(a1);
        v21 = static String._tryFromUTF8(_:)(a1 + 32, v19, v20);
        v23 = v22;
        v24 = swift_unknownObjectRelease(a1);
        if (v23)
        {
          static String.Encoding.utf8.getter(v24);
          v25 = static String.Encoding.== infix(_:_:)(a2, v11);
          v13(v11, v4);
          if ((v25 & 1) != 0 || (_StringGuts._isContiguousASCII.getter(v21, v23) & 1) != 0)
          {
            swift_bridgeObjectRelease();
LABEL_20:
            v13(a2, v4);
            return v21;
          }
          swift_bridgeObjectRelease();
        }
        goto LABEL_16;
      }
      __break(1u);
    }
    __break(1u);
    goto LABEL_23;
  }
LABEL_16:
  v26 = sub_100B11848(0, a1);
  if ((v27 & 1) == 0)
  {
    v28 = objc_msgSend(objc_allocWithZone((Class)NSString), "initWithBytes:length:encoding:", a1 + 32, v26, String.Encoding.rawValue.getter());
    swift_bridgeObjectRelease();
    if (v28)
    {
      v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v28);

    }
    else
    {
      v21 = 0;
    }
    goto LABEL_20;
  }
LABEL_23:
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD00000000000003FLL, 0x8000000100EEEB90, "Foundation/arm64-apple-ios.private.swiftinterface", 49, 2, 11726, 0);
  __break(1u);
  return result;
}

void sub_100B1171C(char *a1@<X8>)
{
  id v2;
  unsigned int v3;
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;

  v2 = objc_msgSend((id)objc_opt_self(FMSystemInfo), "sharedInstance");
  v3 = objc_msgSend(v2, "isInternalBuild");

  if (v3)
  {
    v4 = objc_msgSend((id)objc_opt_self(NSProcessInfo), "processInfo");
    v5 = objc_msgSend(v4, "environment");

    v6 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v5, &type metadata for String, &type metadata for String, &protocol witness table for String);
    if (*(_QWORD *)(v6 + 16) && (v7 = sub_100518DA0(0x45545F5245444E55, 0xEA00000000005453), (v8 & 1) != 0))
    {
      swift_bridgeObjectRetain(*(_QWORD *)(*(_QWORD *)(v6 + 56) + 16 * v7 + 8));
      v9 = 1;
    }
    else
    {
      v9 = 0;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    v9 = 0;
  }
  *a1 = v9;
}

uint64_t sub_100B11848(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v2 = *(_QWORD *)(a2 + 16);
  if (!v2)
    return 0;
  if (*(unsigned __int8 *)(a2 + 32) == a1)
    return 0;
  if (v2 == 1)
    return 0;
  if (*(unsigned __int8 *)(a2 + 33) == a1)
    return 1;
  v4 = 0;
  v5 = v2 - 2;
  while (v5 != v4)
  {
    v6 = *(unsigned __int8 *)(a2 + 34 + v4++);
    if (v6 == a1)
      return v4 + 1;
  }
  return 0;
}

id sub_100B118D0()
{
  id v0;
  id v1;
  id result;
  void *v3;
  uint64_t v4;

  v0 = objc_msgSend((id)objc_opt_self(FMSystemInfo), "sharedInstance");
  v1 = objc_msgSend(v0, "serialNumber");

  if (v1)
    goto LABEL_4;
  result = (id)MobileGestalt_get_current_device();
  if (result)
  {
    v3 = result;
    v1 = (id)MobileGestalt_copy_serialNumber_obj();

    if (!v1)
      return 0;
LABEL_4:
    v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);

    return (id)v4;
  }
  __break(1u);
  return result;
}

id sub_100B1198C()
{
  id v0;
  void *v1;
  _QWORD v3[2];
  uint64_t v4;

  if (qword_1010EA1D0 != -1)
    swift_once(&qword_1010EA1D0, sub_100B11444);
  v3[0] = 0x7365547265646E75;
  v3[1] = 0xE900000000000074;
  SynchronousCache.cachedValue<A>(key:computeBlock:)(&v4, v3, sub_10001F628, 0, &type metadata for Bool);
  swift_bridgeObjectRelease();
  if ((v4 & 1) != 0)
    return 0;
  v1 = objc_autoreleasePoolPush();
  v0 = objc_msgSend((id)objc_opt_self(CLLocationManager), "locationServicesEnabled");
  objc_autoreleasePoolPop(v1);
  return v0;
}

id sub_100B11A60(uint64_t a1)
{
  id result;
  void *v2;
  id v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;

  result = (id)MobileGestalt_get_current_device(a1);
  if (result)
  {
    v2 = result;
    v3 = (id)MobileGestalt_copy_lowPowerExpressModesSupported_obj();

    if (!v3
      || (v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v3, (char *)&type metadata for Any + 8),
          v3,
          v5 = sub_1003626B0(v4),
          swift_bridgeObjectRelease(),
          !v5))
    {
      swift_bridgeObjectRelease();
      v5 = _swiftEmptyArrayStorage;
    }
    v6 = sub_100CA7D78((uint64_t)v5);
    swift_bridgeObjectRelease();
    v7 = sub_100A06590(0x616873696C61, 0xE600000000000000, v6);
    v8 = v7 & 1;
    if ((sub_100A06590(0x796D2D646E6966, 0xE700000000000000, v6) & 1) != 0)
      v8 = v7 & 1 | 2;
    v9 = sub_100A06590(0x727078652D63666ELL, 0xEB00000000737365, v6);
    swift_bridgeObjectRelease();
    if ((v9 & 1) != 0)
      return (id)(v8 | 4);
    else
      return (id)v8;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100B11B90()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_1000234D8(v0, qword_1011B7C78);
  sub_10001A9E8(v0, (uint64_t)qword_1011B7C78);
  return Logger.init(subsystem:category:)(0xD00000000000001DLL, 0x8000000100EC5D30, 0x7465447466656874, 0xEF65636E65727265);
}

uint64_t SPBluetoothPowerState.description.getter(uint64_t a1)
{
  Swift::String v2;
  void *object;

  switch(a1)
  {
    case 0:
      return 6710895;
    case 2:
      return 0x7265776F50776F6CLL;
    case 1:
      return 28271;
  }
  v2._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  object = v2._object;
  String.append(_:)(v2);
  swift_bridgeObjectRelease(object);
  return 0x286E776F6E6B6E75;
}

uint64_t sub_100B11CCC()
{
  uint64_t *v0;

  return SPBluetoothPowerState.description.getter(*v0);
}

uint64_t sub_100B11CD4@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  char *v7;
  unint64_t v8;
  uint64_t v9;
  void *v10;
  Class isa;
  id v12;
  id v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  int v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24[4];

  v4 = sub_10001A9A8(&qword_1010F4AD8);
  result = __chkstk_darwin(v4);
  v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a1[1];
  if (v8 >> 60 != 15)
  {
    v9 = *a1;
    v10 = (void *)objc_opt_self(NSPropertyListSerialization);
    sub_10001BBBC(v9, v8);
    isa = Data._bridgeToObjectiveC()().super.isa;
    v24[0] = 0;
    v12 = objc_msgSend(v10, "propertyListWithData:options:format:error:", isa, 0, 0, v24);

    v13 = v24[0];
    if (v12)
    {
      v14 = v24[0];
      _bridgeAnyObjectToAny(_:)(v24, v12);
      swift_unknownObjectRelease(v12);
      v15 = sub_10001A9A8((uint64_t *)&unk_1010FBF20);
      if ((swift_dynamicCast(&v23, v24, (char *)&type metadata for Any + 8, v15, 6) & 1) != 0)
      {
        sub_1008ED660(v23, (uint64_t)v7);
        sub_10001EF3C(v9, v8);
        v16 = type metadata accessor for OfflineFindingInfo(0);
        v17 = 1;
        v18 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 48))(v7, 1, v16);
        result = sub_100004048((uint64_t)v7, &qword_1010F4AD8);
        if (v18 != 1)
          goto LABEL_9;
      }
      else
      {
        result = sub_10001EF3C(v9, v8);
      }
    }
    else
    {
      v19 = v24[0];
      v20 = _convertNSErrorToError(_:)(v13);

      swift_willThrow(v21);
      sub_10001EF3C(v9, v8);
      result = swift_errorRelease(v20);
    }
  }
  v17 = 0;
LABEL_9:
  *a2 = v17;
  return result;
}

id sub_100B11EDC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __n128 v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  uint64_t v31;
  uint8_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t My;
  uint64_t v38;
  _QWORD *v39;
  void (*v40)(_QWORD *, _QWORD, uint64_t);
  _QWORD *v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  NSObject *v45;
  os_log_type_t v46;
  uint8_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  NSObject *v51;
  os_log_type_t v52;
  uint8_t *v53;
  uint64_t v54;
  id result;
  void *v56;
  id v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  NSObject *v63;
  os_log_type_t v64;
  uint8_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  Swift::String v70;
  Swift::String v71;
  Swift::String v72;
  Swift::String v73;
  _BYTE v74[4];
  unsigned int v75;
  uint64_t (*v76)(_BYTE *);
  uint64_t v77;
  uint64_t v78;
  _BYTE *v79;
  uint64_t v80;
  uint8_t *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;

  v1 = v0;
  v2 = sub_10001A9A8(&qword_101114DC8);
  v80 = *(_QWORD *)(v2 - 8);
  v81 = (uint8_t *)v2;
  __chkstk_darwin(v2);
  v79 = &v74[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v78 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v78);
  v5 = &v74[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v6);
  v8 = &v74[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v10 = *(_QWORD *)(v9 - 8);
  v77 = v9;
  __chkstk_darwin(v9);
  v12 = &v74[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = sub_10001A9A8(&qword_1010FAAF0);
  v14 = swift_allocObject(v13, 20, 7);
  *(_DWORD *)(v14 + 16) = 0;
  *(_QWORD *)(v0 + 16) = v14;
  *(_QWORD *)(v0 + 24) = &_swiftEmptySetSingleton;
  v15 = sub_10001A9A8(&qword_101106C20);
  v16 = swift_allocObject(v15, 48, 7);
  *(_OWORD *)(v16 + 16) = xmmword_100E22B00;
  *(_QWORD *)(v16 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(kFMDLocalActivationLockInfoChangedNotification);
  *(_QWORD *)(v16 + 40) = v17;
  v18 = type metadata accessor for DarwinNotificationHelper(0);
  swift_allocObject(v18, *(unsigned int *)(v18 + 48), *(unsigned __int16 *)(v18 + 52));
  *(_QWORD *)(v1 + 32) = DarwinNotificationHelper.init(subscribedToNames:)(v16, v19);
  v20 = objc_allocWithZone((Class)type metadata accessor for CurrentLocationMonitor());
  *(_QWORD *)(v1 + 40) = CurrentLocationMonitor.init(mode:desiredAccuracy:)(0, 0x412E848000000000, 0);
  sub_10000F4A0(0, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr);
  *(_OWORD *)(v1 + 48) = 0u;
  *(_OWORD *)(v1 + 64) = 0u;
  *(_QWORD *)(v1 + 80) = 0;
  v75 = enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:);
  v76 = *(uint64_t (**)(_BYTE *))(v10 + 104);
  v21 = v76(v12);
  static DispatchQoS.unspecified.getter(v21);
  v84 = (uint64_t)_swiftEmptyArrayStorage;
  v22 = sub_100006C64((unint64_t *)&qword_1010F0E20, 255, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v23 = sub_10001A9A8((uint64_t *)&unk_1010EA6B0);
  v24 = sub_1000193A4((unint64_t *)&qword_1010F0E30, (uint64_t *)&unk_1010EA6B0, (const char *)&protocol conformance descriptor for [A]);
  v25 = v5;
  v26 = v78;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v84, v23, v24, v78, v22);
  *(_QWORD *)(v1 + 88) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000021, 0x8000000100EEEEA0, v8, v25, v12, 0);
  *(_QWORD *)(v1 + 96) = 0;
  v27 = ((uint64_t (*)(_BYTE *, _QWORD, uint64_t))v76)(v12, v75, v77);
  static DispatchQoS.unspecified.getter(v27);
  v84 = (uint64_t)_swiftEmptyArrayStorage;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v84, v23, v24, v26, v22);
  *(_QWORD *)(v1 + 104) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD00000000000001ALL, 0x8000000100EEEED0, v8, v25, v12, 0);
  if (qword_1010EA3B0 != -1)
    swift_once(&qword_1010EA3B0, sub_100BDE304);
  v84 = qword_1011B7EA8;
  swift_retain();
  v28 = sub_10001A9A8(&qword_101114DD0);
  v29 = sub_1000193A4(&qword_101114DD8, &qword_101114DD0, (const char *)&protocol conformance descriptor for AnyPublisher<A, B>);
  v30 = v79;
  Publisher.map<A>(_:)(sub_100B11CD4, 0, v28, &type metadata for Bool, v29);
  swift_release();
  v31 = sub_1000193A4(&qword_101114DE0, &qword_101114DC8, (const char *)&protocol conformance descriptor for Publishers.Map<A, B>);
  v32 = v81;
  v33 = Publisher.eraseToAnyPublisher()(v81, v31);
  (*(void (**)(_BYTE *, uint8_t *))(v80 + 8))(v30, v32);
  *(_QWORD *)(v1 + 120) = 0;
  *(_QWORD *)(v1 + 128) = 0;
  *(_QWORD *)(v1 + 112) = v33;
  v34 = sub_10001A9A8(&qword_1010F6870);
  swift_allocObject(v34, *(unsigned int *)(v34 + 48), *(unsigned __int16 *)(v34 + 52));
  v35 = PassthroughSubject.init()();
  *(_QWORD *)(v1 + 136) = v35;
  *(_BYTE *)(v1 + 152) = 0;
  v84 = v35;
  v36 = sub_1000193A4(&qword_10110E888, &qword_1010F6870, (const char *)&protocol conformance descriptor for PassthroughSubject<A, B>);
  *(_QWORD *)(v1 + 144) = Publisher.eraseToAnyPublisher()(v34, v36);
  My = type metadata accessor for Feature.FindMy(0);
  v86 = My;
  v38 = sub_100006C64((unint64_t *)&qword_1010EE1B0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for Feature.FindMy, (uint64_t)&protocol conformance descriptor for Feature.FindMy);
  v87 = v38;
  v39 = sub_100018F08(&v84);
  v40 = *(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(My - 8) + 104);
  v40(v39, enum case for Feature.FindMy.baLPEM(_:), My);
  LOBYTE(v33) = isFeatureEnabled(_:)(&v84);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v84);
  if ((v33 & 1) == 0)
  {
    v86 = My;
    v87 = v38;
    v41 = sub_100018F08(&v84);
    v40(v41, enum case for Feature.FindMy.baPowerOff(_:), My);
    v42 = isFeatureEnabled(_:)(&v84);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v84);
    if ((v42 & 1) == 0)
      return (id)v1;
  }
  if ((sub_100B179F0() & 1) != 0)
  {
    if (qword_1010EA1D8 != -1)
      swift_once(&qword_1010EA1D8, sub_100B11B90);
    v43 = type metadata accessor for Logger(0);
    v44 = sub_10001A9E8(v43, (uint64_t)qword_1011B7C78);
    v45 = Logger.logObject.getter(v44);
    v46 = static os_log_type_t.default.getter(v45);
    if (os_log_type_enabled(v45, v46))
    {
      v47 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v47 = 0;
      _os_log_impl((void *)&_mh_execute_header, v45, v46, "LPEM supported.", v47, 2u);
      swift_slowDealloc(v47, -1, -1);
    }

    v48 = swift_allocObject(&unk_1010ACFC0, 24, 7);
    swift_weakInit(v48 + 16, v1);
    swift_retain();
    sub_100B12E7C((uint64_t)sub_100B17DE4, v48);
    swift_release_n(v48, 2);
    goto LABEL_20;
  }
  if (qword_1010EA1D8 != -1)
    swift_once(&qword_1010EA1D8, sub_100B11B90);
  v49 = type metadata accessor for Logger(0);
  v50 = sub_10001A9E8(v49, (uint64_t)qword_1011B7C78);
  v51 = Logger.logObject.getter(v50);
  v52 = static os_log_type_t.default.getter(v51);
  if (!os_log_type_enabled(v51, v52))
  {
LABEL_19:

LABEL_20:
    if (qword_1010EA1D8 != -1)
      swift_once(&qword_1010EA1D8, sub_100B11B90);
    v61 = type metadata accessor for Logger(0);
    sub_10001A9E8(v61, (uint64_t)qword_1011B7C78);
    swift_retain_n(v1, 2);
    v63 = Logger.logObject.getter(v62);
    v64 = static os_log_type_t.default.getter(v63);
    if (os_log_type_enabled(v63, v64))
    {
      v65 = (uint8_t *)swift_slowAlloc(12, -1);
      v66 = swift_slowAlloc(32, -1);
      *(_DWORD *)v65 = 136446210;
      v81 = v65 + 4;
      v82 = v1;
      v83 = v66;
      v84 = 60;
      v85 = 0xE100000000000000;
      v67 = type metadata accessor for TheftDeterrenceStateManager();
      v69 = sub_100006C64(&qword_101114D28, v68, (uint64_t (*)(uint64_t))type metadata accessor for TheftDeterrenceStateManager, (uint64_t)&unk_100E5F9FC);
      swift_retain();
      v70._countAndFlagsBits = CustomStringConvertible.typeDescription.getter(v67, v69);
      String.append(_:)(v70);
      swift_bridgeObjectRelease();
      v71._countAndFlagsBits = 32;
      v71._object = (void *)0xE100000000000000;
      String.append(_:)(v71);
      v72._countAndFlagsBits = CustomStringConvertible<>.addressDescription.getter(v67, v69);
      String.append(_:)(v72);
      swift_bridgeObjectRelease();
      v73._countAndFlagsBits = 62;
      v73._object = (void *)0xE100000000000000;
      String.append(_:)(v73);
      swift_release();
      v84 = sub_100016940(v84, v85, &v83);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v84, &v85, v81, v65 + 12);
      swift_release_n(v1, 2);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v63, v64, "Created %{public}s", v65, 0xCu);
      swift_arrayDestroy(v66, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v66, -1, -1);
      swift_slowDealloc(v65, -1, -1);

    }
    else
    {

      swift_release_n(v1, 2);
    }
    return (id)v1;
  }
  v53 = (uint8_t *)swift_slowAlloc(12, -1);
  v54 = swift_slowAlloc(32, -1);
  v84 = v54;
  *(_DWORD *)v53 = 136315138;
  result = (id)MobileGestalt_get_current_device(v54);
  if (result)
  {
    v56 = result;
    v57 = (id)MobileGestalt_copy_hwModelStr_obj();

    if (v57)
    {
      v58 = static String._unconditionallyBridgeFromObjectiveC(_:)(v57);
      v60 = v59;

    }
    else
    {
      v58 = 0;
      v60 = 0xE000000000000000;
    }
    v83 = sub_100016940(v58, v60, &v84);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v83, &v84, v53 + 4, v53 + 12);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v51, v52, "LPEM not supported [%s].", v53, 0xCu);
    swift_arrayDestroy(v54, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v54, -1, -1);
    swift_slowDealloc(v53, -1, -1);
    goto LABEL_19;
  }
  __break(1u);
  return result;
}

uint64_t sub_100B128C4(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  _BYTE v3[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v3, 0, 0);
  result = swift_weakLoadStrong(v1);
  if (result)
  {
    sub_100B13C78();
    return swift_release();
  }
  return result;
}

uint64_t sub_100B12918()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Swift::String v10;
  Swift::String v11;
  Swift::String v12;
  Swift::String v13;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;

  if (qword_1010EA1D8 != -1)
    swift_once(&qword_1010EA1D8, sub_100B11B90);
  v1 = type metadata accessor for Logger(0);
  sub_10001A9E8(v1, (uint64_t)qword_1011B7C78);
  v2 = swift_retain_n(v0, 2);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = swift_slowAlloc(32, -1);
    *(_DWORD *)v5 = 136315138;
    v16 = 0xE100000000000000;
    v17 = v6;
    v7 = type metadata accessor for TheftDeterrenceStateManager();
    v9 = sub_100006C64(&qword_101114D28, v8, (uint64_t (*)(uint64_t))type metadata accessor for TheftDeterrenceStateManager, (uint64_t)&unk_100E5F9FC);
    swift_retain();
    v10._countAndFlagsBits = CustomStringConvertible.typeDescription.getter(v7, v9);
    String.append(_:)(v10);
    swift_bridgeObjectRelease();
    v11._countAndFlagsBits = 32;
    v11._object = (void *)0xE100000000000000;
    String.append(_:)(v11);
    v12._countAndFlagsBits = CustomStringConvertible<>.addressDescription.getter(v7, v9);
    String.append(_:)(v12);
    swift_bridgeObjectRelease();
    v13._countAndFlagsBits = 62;
    v13._object = (void *)0xE100000000000000;
    String.append(_:)(v13);
    swift_release();
    v15 = sub_100016940(60, 0xE100000000000000, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, &v16, v5 + 4, v5 + 12);
    swift_release_n(v0, 2);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "%s: firstLaunchSinceReboot()", v5, 0xCu);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);

  }
  else
  {

    swift_release_n(v0, 2);
  }
  return sub_100B1538C();
}

void sub_100B12B70(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  Swift::String v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v2 = v1;
  if (qword_1010EA1D8 != -1)
    swift_once(&qword_1010EA1D8, sub_100B11B90);
  v4 = type metadata accessor for Logger(0);
  v5 = sub_10001A9E8(v4, (uint64_t)qword_1011B7C78);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.default.getter(v6);
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = swift_slowAlloc(32, -1);
    v15 = v9;
    *(_DWORD *)v8 = 136315138;
    if (a1)
    {
      if (a1 == 2)
      {
        v10 = 0xEC00000065646F4DLL;
        v11 = 0x7265776F50776F6CLL;
      }
      else if (a1 == 1)
      {
        v10 = 0xE200000000000000;
        v11 = 28271;
      }
      else
      {
        v14 = 0xE800000000000000;
        v12._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
        String.append(_:)(v12);
        swift_bridgeObjectRelease();
        v11 = 0x286E776F6E6B6E75;
        v10 = 0xE800000000000000;
      }
    }
    else
    {
      v10 = 0xE300000000000000;
      v11 = 6710895;
    }
    v13 = sub_100016940(v11, v10, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v13, &v14, v8 + 4, v8 + 12);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Received bluetoothPowerStateUpdate: %s", v8, 0xCu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }

  if (*(_QWORD *)(v2 + 48))
  {
    v13 = a1;
    swift_retain();
    CurrentValueSubject.send(_:)(&v13);
    swift_release();
  }
}

uint64_t sub_100B12D94@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *(_BYTE *)(result + 152);
  return result;
}

uint64_t sub_100B12DA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  v7 = (_QWORD *)swift_allocObject(&unk_1010ACF98, 40, 7);
  v7[2] = a1;
  v7[3] = a3;
  v7[4] = a4;
  swift_retain();
  swift_retain();
  swift_retain();
  v8 = sub_10001A9A8(&qword_1010F2080);
  v9 = sub_1000193A4(&qword_1010F2088, &qword_1010F2080, (const char *)&protocol conformance descriptor for AnyPublisher<A, B>);
  Publisher.oneshot(_:)(sub_1004D4804, v7, v8, v9);
  swift_release();
  return swift_release();
}

uint64_t sub_100B12E7C(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int EnumCaseMultiPayload;
  BOOL v16;
  BOOL v17;
  _BOOL8 v18;
  id v19;
  unsigned __int8 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __n128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE v29[16];
  uint64_t v30;
  _QWORD v31[2];

  v3 = v2;
  v6 = sub_10001A9A8(&qword_101108350);
  v7 = __chkstk_darwin(v6);
  v9 = &v29[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v7);
  v11 = &v29[-v10];
  type metadata accessor for DarwinNotificationManager(0);
  LOBYTE(v31[0]) = 1;
  v12 = static DarwinNotificationManager.currentValue(name:token:)(0xD000000000000019, 0x8000000100EC9B30, 0x100000000);
  v30 = v2[5];
  type metadata accessor for CLAuthorizationStatus(0);
  OS_dispatch_queue.sync<A>(execute:)(sub_1001C786C, v29, v13);
  v14 = v31[0];
  sub_100BDCE40(v11);
  sub_100B17AF8((uint64_t)v11, (uint64_t)v9);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v9, v6);
  if (EnumCaseMultiPayload == 1)
  {
    if (!*v9)
      sub_100B17188();
    v9 = v11;
  }
  else
  {
    sub_100004048((uint64_t)v11, &qword_101108350);
  }
  v16 = EnumCaseMultiPayload != 1;
  sub_100004048((uint64_t)v9, &qword_101108350);
  v17 = v14 == 3;
  v18 = v12 == 1;
  v19 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v20 = objc_msgSend(v19, "userHasAcknowledgedFindMy");

  v31[0] = v18;
  v21 = sub_10001A9A8(&qword_101114D80);
  swift_allocObject(v21, *(unsigned int *)(v21 + 48), *(unsigned __int16 *)(v21 + 52));
  v3[6] = CurrentValueSubject.init(_:)(v31);
  swift_release();
  LOBYTE(v31[0]) = v17;
  v22 = sub_10001A9A8(&qword_101108C08);
  swift_allocObject(v22, *(unsigned int *)(v22 + 48), *(unsigned __int16 *)(v22 + 52));
  v3[9] = CurrentValueSubject.init(_:)(v31);
  swift_release();
  LOBYTE(v31[0]) = v16;
  swift_allocObject(v22, *(unsigned int *)(v22 + 48), *(unsigned __int16 *)(v22 + 52));
  v3[10] = CurrentValueSubject.init(_:)(v31);
  swift_release();
  LOBYTE(v31[0]) = v20;
  swift_allocObject(v22, *(unsigned int *)(v22 + 48), *(unsigned __int16 *)(v22 + 52));
  v3[15] = CurrentValueSubject.init(_:)(v31);
  swift_release();
  LOBYTE(v31[0]) = 0;
  swift_allocObject(v22, *(unsigned int *)(v22 + 48), *(unsigned __int16 *)(v22 + 52));
  v3[16] = CurrentValueSubject.init(_:)(v31);
  swift_release();
  v23 = sub_10001A9A8(&qword_101114DB8);
  swift_allocObject(v23, *(unsigned int *)(v23 + 48), *(unsigned __int16 *)(v23 + 52));
  v31[0] = Future.init(_:)(sub_100B16FAC, 0, v24);
  v25 = swift_allocObject(&unk_1010ACFC0, 24, 7);
  swift_weakInit(v25 + 16, v3);
  v26 = swift_allocObject(&unk_1010AD240, 64, 7);
  *(_QWORD *)(v26 + 16) = v25;
  *(_BYTE *)(v26 + 24) = v18;
  *(_QWORD *)(v26 + 32) = v18;
  *(_BYTE *)(v26 + 40) = v17;
  *(_BYTE *)(v26 + 41) = v16;
  *(_BYTE *)(v26 + 42) = v20;
  *(_QWORD *)(v26 + 48) = a1;
  *(_QWORD *)(v26 + 56) = a2;
  v27 = sub_1000193A4(&qword_101114DC0, &qword_101114DB8, (const char *)&protocol conformance descriptor for Future<A, B>);
  swift_retain();
  Publisher.oneshot(_:)(sub_100B17DA8, v26, v23, v27);
  swift_release();
  return swift_release();
}

void sub_100B13238(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5, int a6, int a7, void (*a8)(void))
{
  void *v14;
  char v15;
  uint64_t v16;
  uint64_t Strong;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  void *v27;
  char v28;
  id v29;
  _BOOL4 v30;
  id v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  uint8_t *v41;
  uint64_t v42;
  NSObject *v43;
  os_log_type_t v44;
  uint8_t *v45;
  id v46;
  NSObject *v47;
  os_log_type_t v48;
  uint8_t *v49;
  uint64_t v50;
  NSObject *v51;
  os_log_type_t v52;
  uint8_t *v53;
  uint64_t v54;
  char v55;
  unint64_t v56;
  uint64_t v57;
  Swift::String v58;
  uint64_t v59;
  NSObject *v60;
  os_log_type_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  NSObject *v68;
  os_log_type_t v69;
  uint8_t *v70;
  uint64_t v71;
  NSObject *v72;
  os_log_type_t v73;
  uint8_t *v74;
  uint64_t v75;
  NSObject *v76;
  os_log_type_t v77;
  _BOOL4 v78;
  void *v79;
  uint8_t *v80;
  _QWORD v81[4];
  uint64_t v82;
  int v83;
  int v84;
  void (*v85)(void);
  void *v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  _QWORD v91[3];
  _BYTE v92[8];
  _BYTE v93[24];

  v14 = *(void **)a1;
  v15 = *(_BYTE *)(a1 + 8);
  v16 = a2 + 16;
  swift_beginAccess(a2 + 16, v93, 0, 0);
  Strong = swift_weakLoadStrong(v16);
  if (Strong)
  {
    v18 = Strong;
    if ((v15 & 1) != 0)
    {
      swift_errorRetain(v14);
      if (qword_1010EA1D8 != -1)
        swift_once(&qword_1010EA1D8, sub_100B11B90);
      v19 = type metadata accessor for Logger(0);
      sub_10001A9E8(v19, (uint64_t)qword_1011B7C78);
      swift_errorRetain(v14);
      v20 = swift_errorRetain(v14);
      v21 = Logger.logObject.getter(v20);
      v22 = static os_log_type_t.error.getter(v21);
      if (!os_log_type_enabled(v21, v22))
      {
        swift_release();
        sub_10010F93C(v14, 1);
        sub_10010F93C(v14, 1);
        swift_errorRelease(v14);

        return;
      }
      v23 = (uint8_t *)swift_slowAlloc(12, -1);
      v24 = swift_slowAlloc(32, -1);
      v88 = v24;
      *(_DWORD *)v23 = 136315138;
      swift_getErrorValue(v14, v92, v91);
      v25 = Error.localizedDescription.getter(v91[1], v91[2]);
      v90 = sub_100016940(v25, v26, &v88);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v90, v91, v23 + 4, v23 + 12);
      swift_bridgeObjectRelease();
      sub_10010F93C(v14, 1);
      sub_10010F93C(v14, 1);
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "activationLockInfoFuture error: %s", v23, 0xCu);
      swift_arrayDestroy(v24, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v24, -1, -1);
      swift_slowDealloc(v23, -1, -1);
      swift_release();

      v27 = v14;
      v28 = 1;
    }
    else
    {
      v82 = a4;
      v29 = v14;
      v85 = a8;
      v84 = a6;
      if ((objc_msgSend(v29, "isActivationLocked") & 1) != 0)
      {
        v30 = 1;
      }
      else
      {
        v31 = objc_msgSend(v29, "maskedAppleID");
        v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(v31);
        v34 = v33;

        swift_bridgeObjectRelease();
        v35 = HIBYTE(v34) & 0xF;
        if ((v34 & 0x2000000000000000) == 0)
          v35 = v32 & 0xFFFFFFFFFFFFLL;
        v30 = v35 != 0;
      }
      v83 = a7;
      LOBYTE(v88) = v30;
      v36 = sub_10001A9A8(&qword_101108C08);
      swift_allocObject(v36, *(unsigned int *)(v36 + 48), *(unsigned __int16 *)(v36 + 52));
      *(_QWORD *)(v18 + 56) = CurrentValueSubject.init(_:)(&v88);
      swift_release();
      LOBYTE(v88) = objc_msgSend(v29, "isOfflineFindingEnabled");
      swift_allocObject(v36, *(unsigned int *)(v36 + 48), *(unsigned __int16 *)(v36 + 52));
      *(_QWORD *)(v18 + 64) = CurrentValueSubject.init(_:)(&v88);
      swift_release();
      if (qword_1010EA1D8 != -1)
        swift_once(&qword_1010EA1D8, sub_100B11B90);
      v37 = type metadata accessor for Logger(0);
      v38 = sub_10001A9E8(v37, (uint64_t)qword_1011B7C78);
      v39 = Logger.logObject.getter(v38);
      v40 = static os_log_type_t.default.getter(v39);
      if (os_log_type_enabled(v39, v40))
      {
        v41 = (uint8_t *)swift_slowAlloc(8, -1);
        *(_DWORD *)v41 = 67109120;
        LODWORD(v88) = a3 & 1;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v88, (char *)&v88 + 4, v41 + 4, v41 + 8);
        _os_log_impl((void *)&_mh_execute_header, v39, v40, "initialBluetoothState     : %{BOOL}d", v41, 8u);
        swift_slowDealloc(v41, -1, -1);
      }

      v43 = Logger.logObject.getter(v42);
      v44 = static os_log_type_t.default.getter(v43);
      if (os_log_type_enabled(v43, v44))
      {
        v45 = (uint8_t *)swift_slowAlloc(8, -1);
        *(_DWORD *)v45 = 67109120;
        LODWORD(v88) = v30;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v88, (char *)&v88 + 4, v45 + 4, v45 + 8);
        _os_log_impl((void *)&_mh_execute_header, v43, v44, "initialFMIPState          : %{BOOL}d", v45, 8u);
        swift_slowDealloc(v45, -1, -1);
      }

      v46 = v29;
      v47 = Logger.logObject.getter(v46);
      v48 = static os_log_type_t.default.getter(v47);
      if (os_log_type_enabled(v47, v48))
      {
        v49 = (uint8_t *)swift_slowAlloc(8, -1);
        *(_DWORD *)v49 = 67109120;
        LODWORD(v88) = objc_msgSend(v46, "isOfflineFindingEnabled");
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v88, (char *)&v88 + 4, v49 + 4, v49 + 8);
        sub_10010F93C(v14, 0);
        _os_log_impl((void *)&_mh_execute_header, v47, v48, "initialOfflineFindingState: %{BOOL}d", v49, 8u);
        swift_slowDealloc(v49, -1, -1);
      }
      else
      {
        sub_10010F93C(v14, 0);
      }

      v51 = Logger.logObject.getter(v50);
      v52 = static os_log_type_t.default.getter(v51);
      if (os_log_type_enabled(v51, v52))
      {
        v53 = (uint8_t *)swift_slowAlloc(12, -1);
        v54 = swift_slowAlloc(32, -1);
        v90 = v54;
        *(_DWORD *)v53 = 136446210;
        if (v82)
        {
          v55 = a5;
          if (v82 == 2)
          {
            v56 = 0xEC00000065646F4DLL;
            v57 = 0x7265776F50776F6CLL;
          }
          else if (v82 == 1)
          {
            v56 = 0xE200000000000000;
            v57 = 28271;
          }
          else
          {
            v88 = 0x286E776F6E6B6E75;
            v89 = 0xE800000000000000;
            v87 = v82;
            v58._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
            String.append(_:)(v58);
            swift_bridgeObjectRelease();
            v57 = v88;
            v56 = v89;
          }
        }
        else
        {
          v55 = a5;
          v56 = 0xE300000000000000;
          v57 = 6710895;
        }
        v88 = sub_100016940(v57, v56, &v90);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v88, &v89, v53 + 4, v53 + 12);
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v51, v52, "initialBluetoothPowerState: %{public}s", v53, 0xCu);
        swift_arrayDestroy(v54, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v54, -1, -1);
        swift_slowDealloc(v53, -1, -1);

        a5 = v55;
      }
      else
      {

      }
      v59 = swift_retain();
      v60 = Logger.logObject.getter(v59);
      v61 = static os_log_type_t.default.getter(v60);
      v86 = v14;
      if (os_log_type_enabled(v60, v61))
      {
        v62 = swift_slowAlloc(14, -1);
        *(_DWORD *)v62 = 67109376;
        LODWORD(v88) = a5 & 1;
        v63 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v88, (char *)&v88 + 4, v62 + 4, v62 + 8);
        *(_WORD *)(v62 + 8) = 1024;
        __chkstk_darwin(v63);
        v81[2] = v64;
        type metadata accessor for CLAuthorizationStatus(0);
        OS_dispatch_queue.sync<A>(execute:)(sub_100AEF178, v81, v65);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v88, (char *)&v88 + 4, v62 + 10, v62 + 14);
        swift_release();
        _os_log_impl((void *)&_mh_execute_header, v60, v61, "initialLocServicesState   : %{BOOL}d [%d]", (uint8_t *)v62, 0xEu);
        swift_slowDealloc(v62, -1, -1);

      }
      else
      {

        v66 = swift_release();
      }
      v67 = v84;
      v68 = Logger.logObject.getter(v66);
      v69 = static os_log_type_t.default.getter(v68);
      if (os_log_type_enabled(v68, v69))
      {
        v70 = (uint8_t *)swift_slowAlloc(8, -1);
        *(_DWORD *)v70 = 67109120;
        LODWORD(v88) = v67 & 1;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v88, (char *)&v88 + 4, v70 + 4, v70 + 8);
        _os_log_impl((void *)&_mh_execute_header, v68, v69, "initialNVRAMState         : %{BOOL}d", v70, 8u);
        swift_slowDealloc(v70, -1, -1);
      }

      v72 = Logger.logObject.getter(v71);
      v73 = static os_log_type_t.default.getter(v72);
      if (os_log_type_enabled(v72, v73))
      {
        v74 = (uint8_t *)swift_slowAlloc(8, -1);
        *(_DWORD *)v74 = 67109120;
        LODWORD(v88) = v83 & 1;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v88, (char *)&v88 + 4, v74 + 4, v74 + 8);
        _os_log_impl((void *)&_mh_execute_header, v72, v73, "initialUserAck            : %{BOOL}d", v74, 8u);
        swift_slowDealloc(v74, -1, -1);
      }

      v76 = Logger.logObject.getter(v75);
      v77 = static os_log_type_t.default.getter(v76);
      v78 = os_log_type_enabled(v76, v77);
      v79 = v86;
      if (v78)
      {
        v80 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v80 = 0;
        _os_log_impl((void *)&_mh_execute_header, v76, v77, "suppressLPEM              : false", v80, 2u);
        swift_slowDealloc(v80, -1, -1);
      }

      v85();
      swift_release();
      v27 = v79;
      v28 = 0;
    }
    sub_10010F93C(v27, v28);
  }
}

uint64_t sub_100B13C78()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  id v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t result;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD v82[4];

  v1 = v0;
  v66 = sub_10001A9A8(&qword_101114D38);
  v65 = *(_QWORD *)(v66 - 8);
  __chkstk_darwin(v66);
  v64 = (char *)&v57 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_10001A9A8(&qword_101114D40);
  v68 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v67 = (char *)&v57 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v73 = sub_10001A9A8(&qword_101114D48);
  v71 = *(_QWORD *)(v73 - 8);
  __chkstk_darwin(v73);
  v6 = (char *)&v57 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v63 = sub_10001A9A8(&qword_101114D50);
  v62 = *(_QWORD *)(v63 - 8);
  __chkstk_darwin(v63);
  v61 = (char *)&v57 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v60 = sub_10001A9A8(&qword_101114D58);
  v59 = *(_QWORD *)(v60 - 8);
  __chkstk_darwin(v60);
  v58 = (char *)&v57 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v76 = v0[6];
  if (v76
    && (v77 = v0[7]) != 0
    && (v78 = v0[8]) != 0
    && (v9 = v0[9]) != 0
    && (v10 = v0[10]) != 0
    && (v11 = v0[15]) != 0
    && (v12 = v0[16]) != 0)
  {
    v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(kFMDLocalActivationLockInfoChangedNotification);
    v15 = v14;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    v16 = dispatch thunk of DarwinNotificationHelper.publisher(name:)(v13, v15);
    v72 = v6;
    v74 = v10;
    v75 = v9;
    v69 = v3;
    v70 = v12;
    v17 = v16;
    swift_bridgeObjectRelease();
    v82[0] = v17;
    v18 = swift_allocObject(&unk_1010ACFC0, 24, 7);
    swift_weakInit(v18 + 16, v1);
    v19 = (_QWORD *)swift_allocObject(&unk_1010AD178, 48, 7);
    v19[2] = v18;
    v20 = v78;
    v19[3] = v77;
    v19[4] = v20;
    v19[5] = v10;
    swift_retain();
    swift_retain();
    swift_retain();
    v21 = sub_10001A9A8(&qword_101112B50);
    v22 = sub_1000193A4(&qword_101112B58, &qword_101112B50, (const char *)&protocol conformance descriptor for AnyPublisher<A, B>);
    Publisher<>.sink(receiveValue:)(sub_100B17D4C, v19, v21, v22);
    swift_release();
    swift_release();
    swift_beginAccess(v1 + 3, v82, 33, 0);
    AnyCancellable.store(in:)(v1 + 3);
    swift_endAccess(v82);
    swift_release();
    v82[0] = *(_QWORD *)(v1[5] + OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor_authorizationStatusPublisher);
    swift_retain();
    v23 = sub_10001A9A8(&qword_101114D60);
    v24 = sub_1000193A4(&qword_101114D68, &qword_101114D60, (const char *)&protocol conformance descriptor for AnyPublisher<A, B>);
    v25 = v58;
    Publisher.map<A>(_:)(sub_100B14E34, 0, v23, &type metadata for Bool, v24);
    swift_release();
    v26 = sub_1000193A4(&qword_101114D70, &qword_101114D58, (const char *)&protocol conformance descriptor for Publishers.Map<A, B>);
    v27 = v75;
    swift_retain();
    v28 = v60;
    Publisher<>.sink(receiveValue:)(sub_100B17C28, v27, v60, v26);
    swift_release();
    (*(void (**)(char *, uint64_t))(v59 + 8))(v25, v28);
    v29 = v1 + 3;
    swift_beginAccess(v1 + 3, v82, 33, 0);
    AnyCancellable.store(in:)(v1 + 3);
    swift_endAccess(v82);
    swift_release();
    v30 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
    swift_getKeyPath(&unk_100E5FA50);
    v31 = v61;
    _KeyValueCodingAndObservingPublishing<>.publisher<A>(for:options:)();

    swift_release();
    v32 = sub_1000193A4(&qword_101114D78, &qword_101114D50, (const char *)&protocol conformance descriptor for NSObject.KeyValueObservingPublisher<A, B>);
    swift_retain();
    v33 = v63;
    Publisher<>.sink(receiveValue:)(sub_100B17C28, v11, v63, v32);
    swift_release();
    (*(void (**)(char *, uint64_t))(v62 + 8))(v31, v33);
    swift_beginAccess(v1 + 3, v82, 33, 0);
    AnyCancellable.store(in:)(v1 + 3);
    swift_endAccess(v82);
    swift_release();
    v82[0] = v1[14];
    swift_retain();
    swift_retain();
    v34 = sub_10001A9A8(&qword_1010F2080);
    v35 = sub_1000193A4(&qword_1010F2088, &qword_1010F2080, (const char *)&protocol conformance descriptor for AnyPublisher<A, B>);
    Publisher<>.sink(receiveValue:)(sub_100B17C28, v10, v34, v35);
    swift_release();
    swift_release();
    swift_beginAccess(v1 + 3, v82, 33, 0);
    AnyCancellable.store(in:)(v1 + 3);
    swift_endAccess(v82);
    swift_release();
    v81 = v77;
    v82[0] = v76;
    v63 = (uint64_t)v1;
    v36 = v10;
    v79 = v75;
    v80 = v78;
    v37 = sub_10001A9A8(&qword_101114D80);
    v38 = sub_10001A9A8(&qword_101108C08);
    v39 = sub_1000193A4(&qword_101114D88, &qword_101114D80, (const char *)&protocol conformance descriptor for CurrentValueSubject<A, B>);
    v40 = sub_1000193A4(&qword_101114D90, &qword_101108C08, (const char *)&protocol conformance descriptor for CurrentValueSubject<A, B>);
    v41 = v64;
    Publisher.combineLatest<A, B, C>(_:_:_:)(&v81, &v80, &v79, v37, v38, v38, v38, v39, v40, v40, v40);
    v81 = v11;
    v82[0] = v36;
    v80 = v70;
    v42 = sub_1000193A4(&qword_101114D98, &qword_101114D38, (const char *)&protocol conformance descriptor for Publishers.CombineLatest4<A, B, C, D>);
    v55 = v40;
    v56 = v40;
    v54 = v40;
    v43 = v67;
    v44 = v66;
    Publisher.combineLatest<A, B, C>(_:_:_:)(v82, &v81, &v80, v66, v38, v38, v38, v42, v54, v55, v56);
    (*(void (**)(char *, uint64_t))(v65 + 8))(v41, v44);
    v45 = sub_10001A9A8(&qword_101114DA0);
    v46 = sub_1000193A4(&qword_101114DA8, &qword_101114D40, (const char *)&protocol conformance descriptor for Publishers.CombineLatest4<A, B, C, D>);
    v47 = v72;
    v48 = v69;
    Publisher.map<A>(_:)(sub_100B14F4C, 0, v69, v45, v46);
    (*(void (**)(char *, uint64_t))(v68 + 8))(v43, v48);
    v49 = swift_allocObject(&unk_1010ACFC0, 24, 7);
    swift_weakInit(v49 + 16, v63);
    v50 = swift_allocObject(&unk_1010AD150, 32, 7);
    *(_QWORD *)(v50 + 16) = sub_100B17CA4;
    *(_QWORD *)(v50 + 24) = v49;
    v51 = sub_1000193A4(&qword_101114DB0, &qword_101114D48, (const char *)&protocol conformance descriptor for Publishers.Map<A, B>);
    v52 = v73;
    Publisher<>.sink(receiveValue:)(sub_100B17CD0, v50, v73, v51);
    swift_release();
    (*(void (**)(char *, uint64_t))(v71 + 8))(v47, v52);
    swift_beginAccess(v29, v82, 33, 0);
    AnyCancellable.store(in:)(v29);
    swift_endAccess(v82);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    return swift_release();
  }
  else
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD00000000000001ELL, 0x8000000100EEEE50, "searchpartyd/TheftDeterrenceStateManager.swift", 46, 2, 182, 0);
    __break(1u);
  }
  return result;
}

uint64_t sub_100B1476C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  uint64_t v24;
  int EnumCaseMultiPayload;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint64_t v29;
  _QWORD v30[2];
  uint64_t v31;
  _BYTE v32[24];

  v9 = sub_10001A9A8(&qword_101108350);
  v10 = __chkstk_darwin(v9);
  v12 = (char *)v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)v30 - v13;
  a2 += 16;
  swift_beginAccess(a2, v32, 0, 0);
  result = swift_weakLoadStrong(a2);
  if (result)
  {
    v30[0] = result;
    v30[1] = a5;
    if (qword_1010EA1D8 != -1)
      swift_once(&qword_1010EA1D8, sub_100B11B90);
    v16 = type metadata accessor for Logger(0);
    v17 = sub_10001A9E8(v16, (uint64_t)qword_1011B7C78);
    v18 = Logger.logObject.getter(v17);
    v19 = static os_log_type_t.default.getter(v18);
    if (os_log_type_enabled(v18, v19))
    {
      v20 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v20 = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Received fmdLocalActivationLockInfoChanged notification", v20, 2u);
      swift_slowDealloc(v20, -1, -1);
    }

    v21 = sub_10001A9A8(&qword_101114DB8);
    swift_allocObject(v21, *(unsigned int *)(v21 + 48), *(unsigned __int16 *)(v21 + 52));
    v31 = Future.init(_:)(sub_100B16FAC, 0, v22);
    v23 = swift_allocObject(&unk_1010AD1A0, 32, 7);
    *(_QWORD *)(v23 + 16) = a3;
    *(_QWORD *)(v23 + 24) = a4;
    v24 = sub_1000193A4(&qword_101114DC0, &qword_101114DB8, (const char *)&protocol conformance descriptor for Future<A, B>);
    swift_retain();
    swift_retain();
    Publisher.oneshot(_:)(sub_100B17D5C, v23, v21, v24);
    swift_release();
    swift_release();
    sub_100BDCE40(v14);
    sub_100B17AF8((uint64_t)v14, (uint64_t)v12);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v12, v9);
    if (EnumCaseMultiPayload == 1)
    {
      if (!*v12)
        sub_100B17188();
      v12 = v14;
    }
    else
    {
      sub_100004048((uint64_t)v14, &qword_101108350);
    }
    sub_100004048((uint64_t)v12, &qword_101108350);
    v26 = swift_retain();
    v27 = Logger.logObject.getter(v26);
    v28 = static os_log_type_t.default.getter(v27);
    if (os_log_type_enabled(v27, v28))
    {
      v29 = swift_slowAlloc(14, -1);
      *(_DWORD *)v29 = 67109376;
      LODWORD(v31) = EnumCaseMultiPayload != 1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, (char *)&v31 + 4, v29 + 4, v29 + 8);
      *(_WORD *)(v29 + 8) = 1024;
      CurrentValueSubject.value.getter(&v31);
      LODWORD(v31) = v31;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, (char *)&v31 + 4, v29 + 10, v29 + 14);
      swift_release();
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "Reloaded NVRAM state %{BOOL}d existing %{BOOL}d", (uint8_t *)v29, 0xEu);
      swift_slowDealloc(v29, -1, -1);

    }
    else
    {

      swift_release();
    }
    CurrentValueSubject.value.getter(&v31);
    if ((EnumCaseMultiPayload != 1) != v31)
    {
      LOBYTE(v31) = EnumCaseMultiPayload != 1;
      CurrentValueSubject.send(_:)(&v31);
    }
    return swift_release();
  }
  return result;
}

void sub_100B14B34(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  void *v9;
  char v10;
  id v11;
  int v12;
  id v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  os_log_t oslog;
  uint64_t v20;
  _QWORD v21[3];
  _BYTE v22[8];
  uint64_t v23;

  v1 = *(void **)a1;
  if ((*(_BYTE *)(a1 + 8) & 1) == 0)
  {
    v11 = v1;
    if (objc_msgSend(v11, "isActivationLocked"))
    {
      CurrentValueSubject.value.getter(&v23);
      if ((v23 & 1) != 0)
      {
LABEL_14:
        CurrentValueSubject.value.getter(&v23);
        v18 = v23;
        if (v18 != objc_msgSend(v11, "isOfflineFindingEnabled"))
        {
          LOBYTE(v23) = objc_msgSend(v11, "isOfflineFindingEnabled");
          CurrentValueSubject.send(_:)(&v23);
        }
        v9 = v1;
        v10 = 0;
        goto LABEL_17;
      }
      LOBYTE(v12) = 1;
    }
    else
    {
      v13 = objc_msgSend(v11, "maskedAppleID");
      v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
      v16 = v15;

      swift_bridgeObjectRelease();
      v17 = HIBYTE(v16) & 0xF;
      if ((v16 & 0x2000000000000000) == 0)
        v17 = v14 & 0xFFFFFFFFFFFFLL;
      v12 = v17 != 0;
      CurrentValueSubject.value.getter(&v23);
      if (v23 == v12)
        goto LABEL_14;
    }
    LOBYTE(v23) = v12;
    CurrentValueSubject.send(_:)(&v23);
    goto LABEL_14;
  }
  swift_errorRetain(*(_QWORD *)a1);
  if (qword_1010EA1D8 != -1)
    swift_once(&qword_1010EA1D8, sub_100B11B90);
  v2 = type metadata accessor for Logger(0);
  sub_10001A9E8(v2, (uint64_t)qword_1011B7C78);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  oslog = (os_log_t)Logger.logObject.getter(v3);
  v4 = static os_log_type_t.error.getter(oslog);
  if (!os_log_type_enabled(oslog, v4))
  {
    sub_10010F93C(v1, 1);
    sub_10010F93C(v1, 1);
    swift_errorRelease(v1);

    return;
  }
  v5 = (uint8_t *)swift_slowAlloc(12, -1);
  v6 = swift_slowAlloc(32, -1);
  v23 = v6;
  *(_DWORD *)v5 = 136315138;
  swift_getErrorValue(v1, v22, v21);
  v7 = Error.localizedDescription.getter(v21[1], v21[2]);
  v20 = sub_100016940(v7, v8, &v23);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, v21, v5 + 4, v5 + 12);
  swift_bridgeObjectRelease();
  sub_10010F93C(v1, 1);
  sub_10010F93C(v1, 1);
  _os_log_impl((void *)&_mh_execute_header, oslog, v4, "activationLockInfoFuture error: %s", v5, 0xCu);
  swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v6, -1, -1);
  swift_slowDealloc(v5, -1, -1);

  v9 = v1;
  v10 = 1;
LABEL_17:
  sub_10010F93C(v9, v10);
}

void sub_100B14E34(int *a1@<X0>, BOOL *a2@<X8>)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  int v9;
  uint64_t v10;

  v3 = *a1;
  if (qword_1010EA1D8 != -1)
    swift_once(&qword_1010EA1D8, sub_100B11B90);
  v4 = type metadata accessor for Logger(0);
  v5 = sub_10001A9E8(v4, (uint64_t)qword_1011B7C78);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.default.getter(v6);
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v8 = 67109120;
    v9 = v3;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v9, &v10, v8 + 4, v8 + 8);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "LocServices authorizationStatus changed to %d", v8, 8u);
    swift_slowDealloc(v8, -1, -1);
  }

  *a2 = v3 == 3;
}

uint64_t sub_100B14F4C@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  char v2;
  char v3;
  char v4;
  char v5;
  char v6;
  char v7;

  v2 = *(_BYTE *)(result + 8);
  v3 = *(_BYTE *)(result + 9);
  v4 = *(_BYTE *)(result + 10);
  v5 = *(_BYTE *)(result + 11);
  v6 = *(_BYTE *)(result + 12);
  v7 = *(_BYTE *)(result + 13);
  *(_QWORD *)a2 = *(_QWORD *)result;
  *(_BYTE *)(a2 + 8) = v2;
  *(_BYTE *)(a2 + 9) = v3;
  *(_BYTE *)(a2 + 10) = v4;
  *(_BYTE *)(a2 + 11) = v5;
  *(_BYTE *)(a2 + 12) = v6;
  *(_BYTE *)(a2 + 13) = v7;
  return result;
}

uint64_t sub_100B14F88(uint64_t a1, char a2, int a3, int a4, int a5, int a6, int a7, uint64_t a8)
{
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  Swift::String v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  _QWORD v28[3];
  char v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  _BYTE v39[24];

  v33 = a4;
  v34 = a3;
  v13 = a8 + 16;
  swift_beginAccess(a8 + 16, v39, 0, 0);
  result = swift_weakLoadStrong(v13);
  if (!result)
    return result;
  v15 = result;
  if (qword_1010EA1D8 != -1)
    swift_once(&qword_1010EA1D8, sub_100B11B90);
  v16 = type metadata accessor for Logger(0);
  v17 = sub_10001A9E8(v16, (uint64_t)qword_1011B7C78);
  v18 = Logger.logObject.getter(v17);
  v19 = static os_log_type_t.default.getter(v18);
  v32 = a5;
  if (os_log_type_enabled(v18, v19))
  {
    v20 = swift_slowAlloc(48, -1);
    v21 = swift_slowAlloc(32, -1);
    v38 = v21;
    *(_DWORD *)v20 = 136447746;
    v30 = a7;
    v31 = a6;
    if (a1)
    {
      if (a1 == 2)
      {
        v22 = 0xEC00000065646F4DLL;
        v23 = 0x7265776F50776F6CLL;
      }
      else if (a1 == 1)
      {
        v22 = 0xE200000000000000;
        v23 = 28271;
      }
      else
      {
        v37 = 0xE800000000000000;
        v35 = a1;
        v24._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
        String.append(_:)(v24);
        swift_bridgeObjectRelease();
        v23 = 0x286E776F6E6B6E75;
        v22 = 0xE800000000000000;
      }
    }
    else
    {
      v22 = 0xE300000000000000;
      v23 = 6710895;
    }
    v36 = sub_100016940(v23, v22, &v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, &v37, v20 + 4, v20 + 12);
    swift_bridgeObjectRelease();
    *(_WORD *)(v20 + 12) = 1024;
    LODWORD(v36) = a2 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, (char *)&v36 + 4, v20 + 14, v20 + 18);
    *(_WORD *)(v20 + 18) = 1024;
    LODWORD(v36) = v34 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, (char *)&v36 + 4, v20 + 20, v20 + 24);
    *(_WORD *)(v20 + 24) = 1024;
    LODWORD(v36) = v33 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, (char *)&v36 + 4, v20 + 26, v20 + 30);
    *(_WORD *)(v20 + 30) = 1024;
    LODWORD(v36) = v32 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, (char *)&v36 + 4, v20 + 32, v20 + 36);
    *(_WORD *)(v20 + 36) = 1024;
    LOBYTE(a6) = v31;
    LODWORD(v36) = v31 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, (char *)&v36 + 4, v20 + 38, v20 + 42);
    *(_WORD *)(v20 + 42) = 1024;
    LOBYTE(a7) = v30;
    LODWORD(v36) = v30 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, (char *)&v36 + 4, v20 + 44, v20 + 48);
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "TheftDeterrence state changed: BT: %{public}s FMIP: %{BOOL}d OF: %{BOOL}d locServices: %{BOOL}d NVRAM: %{BOOL}d userACK: %{BOOL}d suppress: %{BOOL}d", (uint8_t *)v20, 0x30u);
    swift_arrayDestroy(v21, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v21, -1, -1);
    swift_slowDealloc(v20, -1, -1);
  }

  if (a1 != 1)
  {
    v26 = 0;
    if (a1 != 2 || (a2 & 1) == 0)
      goto LABEL_23;
LABEL_18:
    if ((v34 & 1) != 0)
    {
      if ((v33 & 1) != 0 || (v25 = inPostEraseSetupAssistant(), (_DWORD)v25))
        v26 = v32 & (a7 ^ 1);
      else
        v26 = 0;
    }
    goto LABEL_23;
  }
  v26 = 0;
  if ((a2 & 1) != 0)
    goto LABEL_18;
LABEL_23:
  v27 = *(_QWORD *)(v15 + 16);
  __chkstk_darwin(v25);
  v28[2] = v15;
  v29 = v26 & 1;
  swift_retain();
  OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_100B17D6C, v28, v27, &type metadata for () + 1, &type metadata for () + 1);
  swift_release();
  if ((v26 & 1) != 0 && (a6 & 1) != 0)
    sub_100B16574();
  else
    sub_100B167F4();
  return swift_release();
}

uint64_t sub_100B1538C()
{
  uint64_t v0;
  id v1;
  uint64_t v2;
  void *v3;
  void *v4;
  id v5;
  _QWORD aBlock[5];
  uint64_t v8;
  id v9;

  v1 = objc_msgSend((id)objc_opt_self(NFHardwareManager), "sharedHardwareManager");
  v9 = v1;
  v2 = sub_10000F4A0(0, &qword_101114D30, NFHardwareManager_ptr);
  deoptionalize<A>(_:)(&v9, v2);

  v3 = (void *)aBlock[0];
  aBlock[4] = sub_100B17C20;
  v8 = v0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000270FC;
  aBlock[3] = &unk_1010AD118;
  v4 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  v5 = objc_msgSend(v3, "startLPEMConfigSession:", v4);
  _Block_release(v4);

  return swift_unknownObjectRelease(v5);
}

void sub_100B15498(void *a1, uint64_t a2, uint64_t a3)
{
  void *v4;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  Swift::String v16;
  Swift::String v17;
  uint64_t v18;
  Swift::String v19;
  Swift::String v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  Swift::String v33;
  Swift::String v34;
  Swift::String v35;
  Swift::String v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  uint8_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  Swift::String v46;
  Swift::String v47;
  Swift::String v48;
  Swift::String v49;
  uint64_t v50;
  NSObject *v51;
  os_log_type_t v52;
  uint8_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  Swift::String v57;
  Swift::String v58;
  Swift::String v59;
  Swift::String v60;
  void *v61;
  unsigned int v62;
  id v63;
  id v64;
  uint64_t v65;
  NSObject *v66;
  os_log_type_t v67;
  uint8_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  Swift::String v72;
  Swift::String v73;
  uint64_t v74;
  Swift::String v75;
  Swift::String v76;
  id v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  NSObject *v81;
  os_log_type_t v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  Swift::String v88;
  Swift::String v89;
  Swift::String v90;
  Swift::String v91;
  uint64_t v92;
  uint64_t v93;
  id v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  void *v100;
  void *v101;
  void *v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;

  v4 = a1;
  if (a2)
  {
    swift_errorRetain(a2);
    if (qword_1010EA1D8 != -1)
      swift_once(&qword_1010EA1D8, sub_100B11B90);
    v6 = type metadata accessor for Logger(0);
    sub_10001A9E8(v6, (uint64_t)qword_1011B7C78);
    swift_errorRetain(a2);
    swift_retain();
    swift_errorRetain(a2);
    v7 = swift_retain();
    v8 = Logger.logObject.getter(v7);
    v9 = static os_log_type_t.error.getter(v8);
    if (os_log_type_enabled(v8, v9))
    {
      v10 = swift_slowAlloc(22, -1);
      v11 = (uint64_t *)swift_slowAlloc(8, -1);
      v99 = swift_slowAlloc(32, -1);
      *(_DWORD *)v10 = 136315394;
      v104 = 0xE100000000000000;
      v105 = v99;
      v101 = v4;
      v12 = type metadata accessor for TheftDeterrenceStateManager();
      v14 = a3;
      v15 = sub_100006C64(&qword_101114D28, v13, (uint64_t (*)(uint64_t))type metadata accessor for TheftDeterrenceStateManager, (uint64_t)&unk_100E5F9FC);
      swift_retain();
      v16._countAndFlagsBits = CustomStringConvertible.typeDescription.getter(v12, v15);
      String.append(_:)(v16);
      swift_bridgeObjectRelease();
      v17._countAndFlagsBits = 32;
      v17._object = (void *)0xE100000000000000;
      String.append(_:)(v17);
      v18 = v15;
      a3 = v14;
      v19._countAndFlagsBits = CustomStringConvertible<>.addressDescription.getter(v12, v18);
      String.append(_:)(v19);
      swift_bridgeObjectRelease();
      v20._countAndFlagsBits = 62;
      v20._object = (void *)0xE100000000000000;
      String.append(_:)(v20);
      swift_release();
      v103 = sub_100016940(60, 0xE100000000000000, &v105);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v103, &v104, v10 + 4, v10 + 12);
      swift_release_n(v14, 2);
      swift_bridgeObjectRelease();
      *(_WORD *)(v10 + 12) = 2112;
      v21 = _convertErrorToNSError(_:)(a2);
      v103 = v21;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v103, &v104, v10 + 14, v10 + 22);
      *v11 = v21;
      v4 = v101;
      swift_errorRelease(a2);
      swift_errorRelease(a2);
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "%s: startLPEMConfigSession error: %@", (uint8_t *)v10, 0x16u);
      v22 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
      swift_arrayDestroy(v11, 1, v22);
      swift_slowDealloc(v11, -1, -1);
      swift_arrayDestroy(v99, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v99, -1, -1);
      swift_slowDealloc(v10, -1, -1);

      swift_errorRelease(a2);
    }
    else
    {
      swift_errorRelease(a2);
      swift_release_n(a3, 2);
      swift_errorRelease(a2);
      swift_errorRelease(a2);

    }
  }
  else if (a1)
  {
    v23 = qword_1010EA1D8;
    v24 = a1;
    if (v23 != -1)
      swift_once(&qword_1010EA1D8, sub_100B11B90);
    v25 = type metadata accessor for Logger(0);
    sub_10001A9E8(v25, (uint64_t)qword_1011B7C78);
    v26 = swift_retain_n(a3, 2);
    v27 = Logger.logObject.getter(v26);
    v28 = static os_log_type_t.default.getter(v27);
    v100 = v24;
    v102 = v4;
    if (os_log_type_enabled(v27, v28))
    {
      v29 = (uint8_t *)swift_slowAlloc(12, -1);
      v95 = swift_slowAlloc(32, -1);
      *(_DWORD *)v29 = 136315138;
      v104 = 0xE100000000000000;
      v105 = v95;
      v30 = type metadata accessor for TheftDeterrenceStateManager();
      v32 = sub_100006C64(&qword_101114D28, v31, (uint64_t (*)(uint64_t))type metadata accessor for TheftDeterrenceStateManager, (uint64_t)&unk_100E5F9FC);
      swift_retain();
      v33._countAndFlagsBits = CustomStringConvertible.typeDescription.getter(v30, v32);
      String.append(_:)(v33);
      swift_bridgeObjectRelease();
      v34._countAndFlagsBits = 32;
      v34._object = (void *)0xE100000000000000;
      String.append(_:)(v34);
      v35._countAndFlagsBits = CustomStringConvertible<>.addressDescription.getter(v30, v32);
      String.append(_:)(v35);
      swift_bridgeObjectRelease();
      v36._countAndFlagsBits = 62;
      v36._object = (void *)0xE100000000000000;
      String.append(_:)(v36);
      swift_release();
      v103 = sub_100016940(60, 0xE100000000000000, &v105);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v103, &v104, v29 + 4, v29 + 12);
      swift_release_n(a3, 2);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "%s: Start LPEMConfigSession", v29, 0xCu);
      swift_arrayDestroy(v95, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v95, -1, -1);
      swift_slowDealloc(v29, -1, -1);

    }
    else
    {

      swift_release_n(a3, 2);
    }
    v50 = swift_retain_n(a3, 2);
    v51 = Logger.logObject.getter(v50);
    v52 = static os_log_type_t.default.getter(v51);
    if (os_log_type_enabled(v51, v52))
    {
      v53 = (uint8_t *)swift_slowAlloc(12, -1);
      v96 = swift_slowAlloc(32, -1);
      *(_DWORD *)v53 = 136315138;
      v103 = 60;
      v104 = 0xE100000000000000;
      v105 = v96;
      v54 = type metadata accessor for TheftDeterrenceStateManager();
      v56 = sub_100006C64(&qword_101114D28, v55, (uint64_t (*)(uint64_t))type metadata accessor for TheftDeterrenceStateManager, (uint64_t)&unk_100E5F9FC);
      swift_retain();
      v57._countAndFlagsBits = CustomStringConvertible.typeDescription.getter(v54, v56);
      String.append(_:)(v57);
      swift_bridgeObjectRelease();
      v58._countAndFlagsBits = 32;
      v58._object = (void *)0xE100000000000000;
      String.append(_:)(v58);
      v59._countAndFlagsBits = CustomStringConvertible<>.addressDescription.getter(v54, v56);
      String.append(_:)(v59);
      swift_bridgeObjectRelease();
      v60._countAndFlagsBits = 62;
      v60._object = (void *)0xE100000000000000;
      String.append(_:)(v60);
      swift_release();
      v103 = sub_100016940(v103, v104, &v105);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v103, &v104, v53 + 4, v53 + 12);
      swift_release_n(a3, 2);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v51, v52, "%s: configureHardwareForLPEM()", v53, 0xCu);
      swift_arrayDestroy(v96, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v96, -1, -1);
      swift_slowDealloc(v53, -1, -1);

    }
    else
    {

      swift_release_n(a3, 2);
    }
    v61 = v100;
    v4 = v102;
    v103 = 0;
    v62 = objc_msgSend(v100, "configureHardwareForLPEMWithError:", &v103);
    v63 = (id)v103;
    if (v62)
    {
      if (*(_QWORD *)(a3 + 56))
      {
        swift_retain_n(a3, 2);
        v64 = v63;
        v65 = swift_retain();
        v66 = Logger.logObject.getter(v65);
        v67 = static os_log_type_t.default.getter(v66);
        if (os_log_type_enabled(v66, v67))
        {
          v68 = (uint8_t *)swift_slowAlloc(12, -1);
          v97 = swift_slowAlloc(32, -1);
          *(_DWORD *)v68 = 136315138;
          v103 = 60;
          v104 = 0xE100000000000000;
          v105 = v97;
          v69 = type metadata accessor for TheftDeterrenceStateManager();
          v71 = sub_100006C64(&qword_101114D28, v70, (uint64_t (*)(uint64_t))type metadata accessor for TheftDeterrenceStateManager, (uint64_t)&unk_100E5F9FC);
          swift_retain();
          v72._countAndFlagsBits = CustomStringConvertible.typeDescription.getter(v69, v71);
          String.append(_:)(v72);
          v61 = v100;
          swift_bridgeObjectRelease();
          v73._countAndFlagsBits = 32;
          v73._object = (void *)0xE100000000000000;
          String.append(_:)(v73);
          v74 = v71;
          v4 = v102;
          v75._countAndFlagsBits = CustomStringConvertible<>.addressDescription.getter(v69, v74);
          String.append(_:)(v75);
          swift_bridgeObjectRelease();
          v76._countAndFlagsBits = 62;
          v76._object = (void *)0xE100000000000000;
          String.append(_:)(v76);
          swift_release();
          v103 = sub_100016940(v103, v104, &v105);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v103, &v104, v68 + 4, v68 + 12);
          swift_release_n(a3, 2);
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v66, v67, "%s: Triggering state re-evaluation.", v68, 0xCu);
          swift_arrayDestroy(v97, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v97, -1, -1);
          swift_slowDealloc(v68, -1, -1);

        }
        else
        {

          swift_release_n(a3, 2);
        }
        CurrentValueSubject.value.getter(&v103);
        LOBYTE(v105) = v103;
        CurrentValueSubject.send(_:)(&v105);

        swift_release();
      }
      else
      {
        v94 = (id)v103;

      }
    }
    else
    {
      v77 = (id)v103;
      v78 = _convertNSErrorToError(_:)(v63);

      swift_willThrow(v79);
      swift_retain();
      swift_errorRetain(v78);
      swift_retain();
      v80 = swift_errorRetain(v78);
      v81 = Logger.logObject.getter(v80);
      v82 = static os_log_type_t.error.getter(v81);
      if (os_log_type_enabled(v81, v82))
      {
        v83 = swift_slowAlloc(22, -1);
        v84 = (uint64_t *)swift_slowAlloc(8, -1);
        v98 = swift_slowAlloc(32, -1);
        *(_DWORD *)v83 = 136315394;
        v103 = 60;
        v104 = 0xE100000000000000;
        v105 = v98;
        v85 = type metadata accessor for TheftDeterrenceStateManager();
        v87 = sub_100006C64(&qword_101114D28, v86, (uint64_t (*)(uint64_t))type metadata accessor for TheftDeterrenceStateManager, (uint64_t)&unk_100E5F9FC);
        swift_retain();
        v88._countAndFlagsBits = CustomStringConvertible.typeDescription.getter(v85, v87);
        String.append(_:)(v88);
        swift_bridgeObjectRelease();
        v89._countAndFlagsBits = 32;
        v89._object = (void *)0xE100000000000000;
        String.append(_:)(v89);
        v90._countAndFlagsBits = CustomStringConvertible<>.addressDescription.getter(v85, v87);
        String.append(_:)(v90);
        swift_bridgeObjectRelease();
        v91._countAndFlagsBits = 62;
        v91._object = (void *)0xE100000000000000;
        String.append(_:)(v91);
        swift_release();
        v103 = sub_100016940(v103, v104, &v105);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v103, &v104, v83 + 4, v83 + 12);
        swift_release_n(a3, 2);
        swift_bridgeObjectRelease();
        *(_WORD *)(v83 + 12) = 2112;
        v92 = _convertErrorToNSError(_:)(v78);
        v103 = v92;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v103, &v104, v83 + 14, v83 + 22);
        *v84 = v92;
        v4 = v102;
        swift_errorRelease(v78);
        swift_errorRelease(v78);
        _os_log_impl((void *)&_mh_execute_header, v81, v82, "%s: configureHardwareForLPEM error: %@", (uint8_t *)v83, 0x16u);
        v93 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
        swift_arrayDestroy(v84, 1, v93);
        swift_slowDealloc(v84, -1, -1);
        swift_arrayDestroy(v98, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v98, -1, -1);
        swift_slowDealloc(v83, -1, -1);

        swift_errorRelease(v78);
      }
      else
      {

        swift_errorRelease(v78);
        swift_release_n(a3, 2);
        swift_errorRelease(v78);
        swift_errorRelease(v78);

      }
    }
  }
  else
  {
    if (qword_1010EA1D8 != -1)
      swift_once(&qword_1010EA1D8, sub_100B11B90);
    v37 = type metadata accessor for Logger(0);
    sub_10001A9E8(v37, (uint64_t)qword_1011B7C78);
    v38 = swift_retain_n(a3, 2);
    v39 = Logger.logObject.getter(v38);
    v40 = static os_log_type_t.error.getter(v39);
    if (os_log_type_enabled(v39, v40))
    {
      v41 = (uint8_t *)swift_slowAlloc(12, -1);
      v42 = swift_slowAlloc(32, -1);
      *(_DWORD *)v41 = 136315138;
      v104 = 0xE100000000000000;
      v105 = v42;
      v43 = type metadata accessor for TheftDeterrenceStateManager();
      v45 = sub_100006C64(&qword_101114D28, v44, (uint64_t (*)(uint64_t))type metadata accessor for TheftDeterrenceStateManager, (uint64_t)&unk_100E5F9FC);
      swift_retain();
      v46._countAndFlagsBits = CustomStringConvertible.typeDescription.getter(v43, v45);
      String.append(_:)(v46);
      swift_bridgeObjectRelease();
      v47._countAndFlagsBits = 32;
      v47._object = (void *)0xE100000000000000;
      String.append(_:)(v47);
      v48._countAndFlagsBits = CustomStringConvertible<>.addressDescription.getter(v43, v45);
      String.append(_:)(v48);
      swift_bridgeObjectRelease();
      v49._countAndFlagsBits = 62;
      v49._object = (void *)0xE100000000000000;
      String.append(_:)(v49);
      swift_release();
      v103 = sub_100016940(60, 0xE100000000000000, &v105);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v103, &v104, v41 + 4, v41 + 12);
      swift_release_n(a3, 2);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v39, v40, "%s: Missing NFLPEMConfigSession!", v41, 0xCu);
      swift_arrayDestroy(v42, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v42, -1, -1);
      swift_slowDealloc(v41, -1, -1);

    }
    else
    {

      swift_release_n(a3, 2);
    }
    v4 = 0;
  }
  sub_100B16314(v4, a3);
}

void sub_100B16314(void *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  Swift::String v12;
  Swift::String v13;
  Swift::String v14;
  Swift::String v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;

  if (a1)
    objc_msgSend(a1, "endSession");
  if (qword_1010EA1D8 != -1)
    swift_once(&qword_1010EA1D8, sub_100B11B90);
  v3 = type metadata accessor for Logger(0);
  sub_10001A9E8(v3, (uint64_t)qword_1011B7C78);
  v4 = swift_retain_n(a2, 2);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.default.getter(v5);
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(12, -1);
    v8 = swift_slowAlloc(32, -1);
    *(_DWORD *)v7 = 136315138;
    v17 = 0xE100000000000000;
    v18 = v8;
    v9 = type metadata accessor for TheftDeterrenceStateManager();
    v11 = sub_100006C64(&qword_101114D28, v10, (uint64_t (*)(uint64_t))type metadata accessor for TheftDeterrenceStateManager, (uint64_t)&unk_100E5F9FC);
    swift_retain();
    v12._countAndFlagsBits = CustomStringConvertible.typeDescription.getter(v9, v11);
    String.append(_:)(v12);
    swift_bridgeObjectRelease();
    v13._countAndFlagsBits = 32;
    v13._object = (void *)0xE100000000000000;
    String.append(_:)(v13);
    v14._countAndFlagsBits = CustomStringConvertible<>.addressDescription.getter(v9, v11);
    String.append(_:)(v14);
    swift_bridgeObjectRelease();
    v15._countAndFlagsBits = 62;
    v15._object = (void *)0xE100000000000000;
    String.append(_:)(v15);
    swift_release();
    v16 = sub_100016940(60, 0xE100000000000000, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v16, &v17, v7 + 4, v7 + 12);
    swift_release_n(a2, 2);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "%s: Stop LPEMConfigSession", v7, 0xCu);
    swift_arrayDestroy(v8, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v7, -1, -1);

  }
  else
  {

    swift_release_n(a2, 2);
  }
}

uint64_t sub_100B16574()
{
  return sub_100B1680C((uint64_t)"setTheftDeterranceEnabled", 25, (uint64_t)sub_100B17BB0);
}

uint64_t sub_100B1658C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  void *v13;
  _QWORD *v14;
  void *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD aBlock[6];
  _QWORD *v25;

  v5 = type metadata accessor for DispatchWorkItemFlags(0);
  v23 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for DispatchQoS(0);
  v8 = *(_QWORD *)(v22 - 8);
  __chkstk_darwin(v22);
  v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = objc_msgSend((id)objc_opt_self(NFHardwareManager), "sharedHardwareManager");
  v25 = v11;
  v12 = sub_10000F4A0(0, &qword_101114D30, NFHardwareManager_ptr);
  deoptionalize<A>(_:)(&v25, v12);

  v13 = (void *)aBlock[0];
  v14 = (_QWORD *)swift_allocObject(&unk_1010AD0D8, 40, 7);
  v14[2] = a3;
  v14[3] = a2;
  v14[4] = v13;
  aBlock[4] = sub_100B17BF0;
  aBlock[5] = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_1010AD0F0;
  v15 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  v16 = v13;
  static DispatchQoS.unspecified.getter(v16);
  v25 = _swiftEmptyArrayStorage;
  v17 = sub_100006C64((unint64_t *)&qword_1010F0E50, 255, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v18 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v19 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v25, v18, v19, v5, v17);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v10, v7, v15);
  _Block_release(v15);

  (*(void (**)(char *, uint64_t))(v23 + 8))(v7, v5);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v22);
  return swift_release();
}

uint64_t sub_100B167F4()
{
  return sub_100B1680C((uint64_t)"setTheftDeterranceDisabled", 26, (uint64_t)sub_100B17B40);
}

uint64_t sub_100B1680C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t My;
  uint64_t v8;
  _QWORD *v9;
  void (*v10)(_QWORD *, _QWORD, uint64_t);
  char v11;
  _QWORD *v12;
  char v13;
  uint64_t result;
  _QWORD v15[3];
  uint64_t v16;
  uint64_t v17;

  My = type metadata accessor for Feature.FindMy(0);
  v16 = My;
  v8 = sub_100006C64((unint64_t *)&qword_1010EE1B0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for Feature.FindMy, (uint64_t)&protocol conformance descriptor for Feature.FindMy);
  v17 = v8;
  v9 = sub_100018F08(v15);
  v10 = *(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(My - 8) + 104);
  v10(v9, enum case for Feature.FindMy.baLPEM(_:), My);
  v11 = isFeatureEnabled(_:)(v15);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v15);
  if ((v11 & 1) != 0
    || (v16 = My,
        v17 = v8,
        v12 = sub_100018F08(v15),
        v10(v12, enum case for Feature.FindMy.baPowerOff(_:), My),
        v13 = isFeatureEnabled(_:)(v15),
        result = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v15),
        (v13 & 1) != 0))
  {
    type metadata accessor for Transaction(0);
    return static Transaction.named<A>(_:with:)(a1, a2, 2, a3, v3, &type metadata for () + 1);
  }
  return result;
}

void sub_100B16934(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v10;
  uint64_t v11;
  void *v12;
  _QWORD v13[6];

  v10 = (void *)objc_opt_self(NFHardwareManager);
  v11 = swift_allocObject(a3, 32, 7);
  *(_QWORD *)(v11 + 16) = a2;
  *(_QWORD *)(v11 + 24) = a1;
  v13[4] = a4;
  v13[5] = v11;
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 1107296256;
  v13[2] = sub_100555E2C;
  v13[3] = a5;
  v12 = _Block_copy(v13);
  swift_retain();
  swift_retain();
  swift_release();
  objc_msgSend(v10, "sharedHardwareManager:", v12);
  _Block_release(v12);
}

void sub_100B16A18(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  void *v15;
  const void *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  _QWORD *v29;
  _QWORD aBlock[6];

  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    v28 = *(NSObject **)(a2 + 104);
    v14 = (_QWORD *)swift_allocObject(&unk_1010AD038, 40, 7);
    v14[2] = a3;
    v14[3] = a2;
    v14[4] = a1;
    aBlock[4] = sub_100B17B80;
    aBlock[5] = v14;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100016FB8;
    aBlock[3] = &unk_1010AD050;
    v15 = _Block_copy(aBlock);
    v27 = v7;
    v16 = v15;
    v17 = a1;
    swift_retain();
    v18 = swift_retain();
    static DispatchQoS.unspecified.getter(v18);
    v29 = _swiftEmptyArrayStorage;
    v19 = sub_100006C64((unint64_t *)&qword_1010F0E50, 255, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v20 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v21 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v29, v20, v21, v6, v19);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v13, v9, v16);
    _Block_release(v16);

    (*(void (**)(char *, uint64_t))(v27 + 8))(v9, v6);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    swift_release();
  }
  else
  {
    if (qword_1010EA1D8 != -1)
      swift_once(&qword_1010EA1D8, sub_100B11B90);
    v22 = type metadata accessor for Logger(0);
    v23 = sub_10001A9E8(v22, (uint64_t)qword_1011B7C78);
    v28 = Logger.logObject.getter(v23);
    v24 = static os_log_type_t.fault.getter(v28);
    if (os_log_type_enabled(v28, v24))
    {
      v25 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v25 = 0;
      _os_log_impl((void *)&_mh_execute_header, v28, v24, "NFHardwareManager.sharedHardwareManager gave us a nil hardwareManager!", v25, 2u);
      swift_slowDealloc(v25, -1, -1);
    }

  }
}

uint64_t sub_100B16D00(uint64_t a1, uint64_t a2, void *a3, char *a4, SEL *a5, char a6)
{
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  SEL *v18;
  uint64_t v19;
  Swift::String v20;
  Swift::String v21;
  uint64_t v22;
  Swift::String v23;
  Swift::String v24;
  char *format;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;

  Transaction.capture()();
  if (qword_1010EA1D8 != -1)
    swift_once(&qword_1010EA1D8, sub_100B11B90);
  v11 = type metadata accessor for Logger(0);
  sub_10001A9E8(v11, (uint64_t)qword_1011B7C78);
  swift_retain_n(a2, 2);
  v13 = Logger.logObject.getter(v12);
  v14 = static os_log_type_t.default.getter(v13);
  if (os_log_type_enabled(v13, v14))
  {
    v15 = (uint8_t *)swift_slowAlloc(12, -1);
    v27 = swift_slowAlloc(32, -1);
    *(_DWORD *)v15 = 136315138;
    v29 = 0xE100000000000000;
    v30 = v27;
    v16 = type metadata accessor for TheftDeterrenceStateManager();
    format = a4;
    v18 = a5;
    v19 = sub_100006C64(&qword_101114D28, v17, (uint64_t (*)(uint64_t))type metadata accessor for TheftDeterrenceStateManager, (uint64_t)&unk_100E5F9FC);
    swift_retain();
    v20._countAndFlagsBits = CustomStringConvertible.typeDescription.getter(v16, v19);
    String.append(_:)(v20);
    swift_bridgeObjectRelease();
    v21._countAndFlagsBits = 32;
    v21._object = (void *)0xE100000000000000;
    String.append(_:)(v21);
    v22 = v19;
    a5 = v18;
    v23._countAndFlagsBits = CustomStringConvertible<>.addressDescription.getter(v16, v22);
    String.append(_:)(v23);
    swift_bridgeObjectRelease();
    v24._countAndFlagsBits = 62;
    v24._object = (void *)0xE100000000000000;
    String.append(_:)(v24);
    swift_release();
    v28 = sub_100016940(60, 0xE100000000000000, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29, v15 + 4, v15 + 12);
    swift_release_n(a2, 2);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v13, v14, format, v15, 0xCu);
    swift_arrayDestroy(v27, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v27, -1, -1);
    swift_slowDealloc(v15, -1, -1);

  }
  else
  {

    swift_release_n(a2, 2);
  }

  LOBYTE(v28) = a6;
  return PassthroughSubject.send(_:)(&v28);
}

void sub_100B16FAC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  id v6;
  uint64_t v7;
  void *v8;
  _QWORD v9[6];

  v4 = swift_allocObject(&unk_1010AD1C8, 32, 7);
  *(_QWORD *)(v4 + 16) = a1;
  *(_QWORD *)(v4 + 24) = a2;
  v5 = (void *)objc_opt_self(FMDFMIPManager);
  swift_retain();
  v6 = objc_msgSend(v5, "sharedInstance");
  v7 = swift_allocObject(&unk_1010AD1F0, 32, 7);
  *(_QWORD *)(v7 + 16) = sub_1002939C0;
  *(_QWORD *)(v7 + 24) = v4;
  v9[4] = sub_100B17D64;
  v9[5] = v7;
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 1107296256;
  v9[2] = sub_100B17114;
  v9[3] = &unk_1010AD208;
  v8 = _Block_copy(v9);
  swift_release();
  objc_msgSend(v6, "activationLockInfoFromDeviceWithCompletion:", v8);
  _Block_release(v8);

}

uint64_t sub_100B170B8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  if (!a2)
    return a3();
  swift_errorRetain(a2);
  ((void (*)(uint64_t, uint64_t))a3)(a2, 1);
  return swift_errorRelease(a2);
}

void sub_100B17114(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5;
  void (*v6)(id, void *);
  id v7;
  id v8;

  v6 = *(void (**)(id, void *))(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  swift_retain(v5);
  v8 = a2;
  v7 = a3;
  v6(v8, a3);
  swift_release(v5);

}

void sub_100B17188()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v1 = v0;
  if (*(_QWORD *)(v0 + 96))
  {
    swift_retain();
    DispatchTimer.cancel()();
    swift_release();
    *(_QWORD *)(v0 + 96) = 0;
    swift_release();
  }
  v2 = *(void **)(v0 + 88);
  v3 = swift_allocObject(&unk_1010ACFC0, 24, 7);
  swift_weakInit(v3 + 16, v1);
  v4 = type metadata accessor for DispatchTimer(0);
  swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  v5 = v2;
  *(_QWORD *)(v1 + 96) = DispatchTimer.init(deadline:repeating:leeway:queue:block:)(v2, sub_100B17AF0, v3, 120.0, 0.0, 30.0);
  swift_release();
  if (*(_QWORD *)(v1 + 96))
  {
    swift_retain();
    DispatchTimer.resume()();
    swift_release();
  }
  if (qword_1010EA1D8 != -1)
    swift_once(&qword_1010EA1D8, sub_100B11B90);
  v6 = type metadata accessor for Logger(0);
  sub_10001A9E8(v6, (uint64_t)qword_1011B7C78);
  swift_retain_n(v1, 2);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter(v8);
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(12, -1);
    v11 = swift_slowAlloc(32, -1);
    v16 = v11;
    *(_DWORD *)v10 = 136315138;
    v15 = *(_QWORD *)(v1 + 96);
    swift_retain();
    v12 = sub_10001A9A8(&qword_101114D18);
    v13 = String.init<A>(describing:)(&v15, v12);
    v15 = sub_100016940(v13, v14, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, &v16, v10 + 4, v10 + 12);
    swift_release_n(v1, 2);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Scheduled a retryTimer to fetch offlineFindingInfo from nvram %s", v10, 0xCu);
    swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v11, -1, -1);
    swift_slowDealloc(v10, -1, -1);

  }
  else
  {

    swift_release_n(v1, 2);
  }
}

uint64_t sub_100B17408(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t result;
  int EnumCaseMultiPayload;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t Strong;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE v29[12];
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35[24];
  uint64_t v36[3];
  char v37[24];

  v2 = sub_10001A9A8(&qword_101108350);
  v3 = __chkstk_darwin(v2);
  v5 = &v29[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v3);
  v7 = &v29[-v6];
  swift_beginAccess(a1 + 16, v37, 0, 0);
  result = swift_weakLoadStrong(a1 + 16);
  if (result)
  {
    sub_100BDCE40(v7);
    sub_100B17AF8((uint64_t)v7, (uint64_t)v5);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v5, v2);
    sub_100004048((uint64_t)v7, &qword_101108350);
    if (EnumCaseMultiPayload != 1)
      sub_100004048((uint64_t)v5, &qword_101108350);
    swift_release();
    if (qword_1010EA1D8 != -1)
      swift_once(&qword_1010EA1D8, sub_100B11B90);
    v10 = type metadata accessor for Logger(0);
    sub_10001A9E8(v10, (uint64_t)qword_1011B7C78);
    swift_retain_n(a1, 4);
    v12 = Logger.logObject.getter(v11);
    v13 = static os_log_type_t.default.getter(v12);
    if (os_log_type_enabled(v12, v13))
    {
      v14 = swift_slowAlloc(28, -1);
      v15 = swift_slowAlloc(64, -1);
      v36[0] = v15;
      *(_DWORD *)v14 = 136315650;
      swift_beginAccess(a1 + 16, v35, 0, 0);
      Strong = swift_weakLoadStrong(a1 + 16);
      v31 = v15;
      if (Strong)
      {
        v17 = *(_QWORD *)(Strong + 80);
        swift_retain();
        swift_release();
      }
      else
      {
        v17 = 0;
      }
      v30 = EnumCaseMultiPayload;
      v33 = v17;
      v18 = sub_10001A9A8(&qword_101114D20);
      v19 = String.init<A>(describing:)(&v33, v18);
      v33 = sub_100016940(v19, v20, v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, &v34, v14 + 4, v14 + 12);
      v21 = 2;
      swift_release_n(a1, 2);
      swift_bridgeObjectRelease();
      *(_WORD *)(v14 + 12) = 1024;
      LODWORD(v33) = EnumCaseMultiPayload != 1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, (char *)&v33 + 4, v14 + 14, v14 + 18);
      *(_WORD *)(v14 + 18) = 2080;
      swift_beginAccess(a1 + 16, &v33, 0, 0);
      v22 = swift_weakLoadStrong(a1 + 16);
      if (v22)
      {
        v23 = *(_QWORD *)(v22 + 80);
        swift_retain();
        swift_release();
        if (v23)
        {
          CurrentValueSubject.value.getter(&v32);
          swift_release();
          v21 = v32;
        }
      }
      EnumCaseMultiPayload = v30;
      LOBYTE(v32) = v21;
      v24 = sub_10001A9A8(&qword_1010FBAA0);
      v25 = String.init<A>(describing:)(&v32, v24);
      v32 = sub_100016940(v25, v26, v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, &v33, v14 + 20, v14 + 28);
      swift_release_n(a1, 2);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Reloaded NVRAM state after retry timer. Subject %s. New state %{BOOL}d existing %s", (uint8_t *)v14, 0x1Cu);
      v27 = v31;
      swift_arrayDestroy(v31, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v27, -1, -1);
      swift_slowDealloc(v14, -1, -1);

    }
    else
    {

      swift_release_n(a1, 4);
    }
    swift_beginAccess(a1 + 16, v36, 0, 0);
    result = swift_weakLoadStrong(a1 + 16);
    if (result)
    {
      v28 = *(_QWORD *)(result + 80);
      swift_retain();
      result = swift_release();
      if (v28)
      {
        CurrentValueSubject.value.getter(&v32);
        if ((EnumCaseMultiPayload != 1) != v32)
        {
          LOBYTE(v32) = EnumCaseMultiPayload != 1;
          CurrentValueSubject.send(_:)(&v32);
        }
        return swift_release();
      }
    }
  }
  return result;
}

uint64_t sub_100B17830()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 32));

  swift_release(*(_QWORD *)(v0 + 48));
  swift_release(*(_QWORD *)(v0 + 56));
  swift_release(*(_QWORD *)(v0 + 64));
  swift_release(*(_QWORD *)(v0 + 72));
  swift_release(*(_QWORD *)(v0 + 80));

  swift_release(*(_QWORD *)(v0 + 96));
  swift_release(*(_QWORD *)(v0 + 112));
  swift_release(*(_QWORD *)(v0 + 120));
  swift_release(*(_QWORD *)(v0 + 128));
  swift_release(*(_QWORD *)(v0 + 136));
  swift_release(*(_QWORD *)(v0 + 144));
  return v0;
}

uint64_t sub_100B178CC()
{
  uint64_t v0;

  sub_100B17830();
  return swift_deallocClassInstance(v0, 153, 7);
}

uint64_t type metadata accessor for TheftDeterrenceStateManager()
{
  return objc_opt_self(_TtC12searchpartyd27TheftDeterrenceStateManager);
}

uint64_t sub_100B1790C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  Swift::String v4;
  Swift::String v5;
  Swift::String v6;
  Swift::String v7;

  v3 = type metadata accessor for TheftDeterrenceStateManager();
  v4._countAndFlagsBits = CustomStringConvertible.typeDescription.getter(v3, a2);
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = 32;
  v5._object = (void *)0xE100000000000000;
  String.append(_:)(v5);
  v6._countAndFlagsBits = CustomStringConvertible<>.addressDescription.getter(v3, a2);
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._countAndFlagsBits = 62;
  v7._object = (void *)0xE100000000000000;
  String.append(_:)(v7);
  return 60;
}

uint64_t sub_100B179C4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

unint64_t sub_100B179F0()
{
  void *v0;
  id v1;
  unsigned int v2;
  uint64_t v3;
  NSString v4;
  unsigned __int8 v5;

  if (qword_1010EA198 != -1)
    swift_once(&qword_1010EA198, sub_100ACDE4C);
  v0 = (void *)qword_1011B7C08;
  v1 = objc_msgSend((id)objc_opt_self(FMSystemInfo), "sharedInstance");
  v2 = objc_msgSend(v1, "isInternalBuild");

  if (v2
    && (v4 = String._bridgeToObjectiveC()(),
        v5 = objc_msgSend(v0, "BOOLForKey:", v4),
        v4,
        (v5 & 1) != 0))
  {
    return 1;
  }
  else
  {
    return ((unint64_t)sub_100B11A60(v3) >> 1) & 1;
  }
}

uint64_t sub_100B17ACC()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100B17AF0()
{
  uint64_t v0;

  return sub_100B17408(v0);
}

uint64_t sub_100B17AF8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001A9A8(&qword_101108350);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_100B17B40(uint64_t a1)
{
  uint64_t v1;

  sub_100B16934(a1, v1, (uint64_t)&unk_1010ACFE8, (uint64_t)sub_100B17B74, (uint64_t)&unk_1010AD000);
}

void sub_100B17B74(void *a1)
{
  uint64_t v1;

  sub_100B16A18(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_100B17B80()
{
  uint64_t v0;

  return sub_100B16D00(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(void **)(v0 + 32), "%s: Disabling NFHeadlessModeFeatureFindMy", (SEL *)&selRef_disableLPEMFeature_, 0);
}

void sub_100B17BB0(uint64_t a1)
{
  uint64_t v1;

  sub_100B16934(a1, v1, (uint64_t)&unk_1010AD088, (uint64_t)sub_100B17BE4, (uint64_t)&unk_1010AD0A0);
}

uint64_t sub_100B17BE4(uint64_t a1)
{
  uint64_t v1;

  return sub_100B1658C(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_100B17BF0()
{
  uint64_t v0;

  return sub_100B16D00(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(void **)(v0 + 32), "%s: Enabling NFHeadlessModeFeatureFindMy", (SEL *)&selRef_enableLPEMFeature_, 1);
}

void sub_100B17C20(void *a1, uint64_t a2)
{
  uint64_t v2;

  sub_100B15498(a1, a2, v2);
}

const char *sub_100B17C2C()
{
  return "userHasAcknowledgedFindMy";
}

id sub_100B17C38@<X0>(id *a1@<X0>, _BYTE *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "userHasAcknowledgedFindMy");
  *a2 = (_BYTE)result;
  return result;
}

id sub_100B17C68(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, "setUserHasAcknowledgedFindMy:", *a1);
}

uint64_t sub_100B17C7C(char *a1)
{
  char v2;

  v2 = *a1;
  return CurrentValueSubject.send(_:)(&v2);
}

uint64_t sub_100B17CA4(uint64_t a1, char a2, int a3, int a4, int a5, int a6, int a7)
{
  uint64_t v7;

  return sub_100B14F88(a1, a2, a3, a4, a5, a6, a7, v7);
}

uint64_t sub_100B17CAC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100B17CD0(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(v1 + 16))(*(_QWORD *)a1, *(unsigned __int8 *)(a1 + 8), *(unsigned __int8 *)(a1 + 9), *(unsigned __int8 *)(a1 + 10), *(unsigned __int8 *)(a1 + 11), *(unsigned __int8 *)(a1 + 12), *(unsigned __int8 *)(a1 + 13));
}

uint64_t sub_100B17D10()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[3]);
  swift_release(v0[4]);
  swift_release(v0[5]);
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100B17D4C(uint64_t a1)
{
  uint64_t *v1;

  return sub_100B1476C(a1, v1[2], v1[3], v1[4], v1[5]);
}

void sub_100B17D5C(uint64_t a1)
{
  sub_100B14B34(a1);
}

uint64_t sub_100B17D64(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_100B170B8(a1, a2, *(uint64_t (**)(void))(v2 + 16));
}

void sub_100B17D6C()
{
  uint64_t v0;

  *(_BYTE *)(*(_QWORD *)(v0 + 16) + 152) = *(_BYTE *)(v0 + 24);
}

uint64_t sub_100B17D7C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 56));
  return swift_deallocObject(v0, 64, 7);
}

void sub_100B17DA8(uint64_t a1)
{
  uint64_t v1;

  sub_100B13238(a1, *(_QWORD *)(v1 + 16), *(_BYTE *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_BYTE *)(v1 + 40), *(unsigned __int8 *)(v1 + 41), *(unsigned __int8 *)(v1 + 42), *(void (**)(void))(v1 + 48));
}

uint64_t sub_100B17DE4()
{
  uint64_t v0;

  return sub_100B128C4(v0);
}

uint64_t sub_100B17E18(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[2];
  char v22;

  v20 = a4;
  v8 = sub_10001A9A8(&qword_101114EC0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v13 = a1[4];
  sub_10001AA44(a1, v12);
  v14 = sub_100B195F4();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for LostModeRequest.CodingKeys, &type metadata for LostModeRequest.CodingKeys, v14, v12, v13);
  v21[0] = a2;
  v22 = 0;
  v15 = sub_10001A9A8(&qword_101103CB8);
  v16 = sub_10069CCD8((unint64_t *)&qword_101103CD0, (uint64_t)&protocol witness table for String, (const char *)&protocol conformance descriptor for <> [A : B]);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v21, &v22, v8, v15, v16);
  if (!v4)
  {
    v21[0] = a3;
    v21[1] = v20;
    v22 = 1;
    v17 = sub_100036A58();
    KeyedEncodingContainer.encode<A>(_:forKey:)(v21, &v22, v8, &type metadata for Data, v17);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t sub_100B17F8C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100B195F4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100B17FB4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100B195F4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100B17FDC@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  result = sub_100B193F8(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
  }
  return result;
}

uint64_t sub_100B18008(_QWORD *a1)
{
  uint64_t *v1;

  return sub_100B17E18(a1, *v1, v1[1], v1[2]);
}

uint64_t sub_100B18024(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100B18054 + 4 * byte_100E5FA80[a1]))(0x646975756162, 0xE600000000000000);
}

uint64_t sub_100B18054()
{
  return 1684628325;
}

uint64_t sub_100B18064()
{
  return 0x644970696863;
}

uint64_t sub_100B18074()
{
  return 0x754E6C6169726573;
}

uint64_t sub_100B18094()
{
  return 0x656C746974;
}

uint64_t sub_100B180A8()
{
  return 1954047348;
}

uint64_t sub_100B180B8()
{
  return 0x6C69616D65;
}

uint64_t sub_100B180CC()
{
  return 0x72624E72656E776FLL;
}

uint64_t sub_100B180E4()
{
  return 0x747865746E6F63;
}

uint64_t sub_100B180FC()
{
  return 0x65646F4D74736F6CLL;
}

uint64_t sub_100B18120(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  char v42;
  char v43;
  char v44;
  char v45;
  char v46;
  char v47;
  char v48;
  char v49;

  v3 = v1;
  v5 = sub_10001A9A8(&qword_101114EA0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  v11 = sub_100B193B4();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for LostModeRequestContent.CodingKeys, &type metadata for LostModeRequestContent.CodingKeys, v11, v9, v10);
  v49 = 0;
  v12 = type metadata accessor for UUID(0);
  v13 = sub_100006204(&qword_1010EDAC0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v3, &v49, v5, v12, v13);
  if (!v2)
  {
    v14 = (int *)type metadata accessor for LostModeRequestContent(0);
    v15 = (uint64_t *)(v3 + v14[5]);
    v16 = *v15;
    v17 = v15[1];
    v48 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v16, v17, &v48, v5);
    v18 = (uint64_t *)(v3 + v14[6]);
    v19 = *v18;
    v20 = v18[1];
    v47 = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v19, v20, &v47, v5);
    v21 = (uint64_t *)(v3 + v14[7]);
    v22 = *v21;
    v23 = v21[1];
    v46 = 3;
    KeyedEncodingContainer.encode(_:forKey:)(v22, v23, &v46, v5);
    v24 = (uint64_t *)(v3 + v14[8]);
    v25 = *v24;
    v26 = v24[1];
    v45 = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v25, v26, &v45, v5);
    v27 = (uint64_t *)(v3 + v14[9]);
    v28 = *v27;
    v29 = v27[1];
    v44 = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v28, v29, &v44, v5);
    v30 = (uint64_t *)(v3 + v14[10]);
    v31 = *v30;
    v32 = v30[1];
    v43 = 6;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v31, v32, &v43, v5);
    v33 = (uint64_t *)(v3 + v14[11]);
    v34 = *v33;
    v35 = v33[1];
    v42 = 7;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v34, v35, &v42, v5);
    v36 = (uint64_t *)(v3 + v14[12]);
    v37 = *v36;
    v38 = v36[1];
    HIBYTE(v41) = 8;
    KeyedEncodingContainer.encode(_:forKey:)(v37, v38, (char *)&v41 + 7, v5);
    v39 = *(unsigned __int8 *)(v3 + v14[13]);
    BYTE6(v41) = 9;
    KeyedEncodingContainer.encode(_:forKey:)(v39, (char *)&v41 + 6, v5);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100B183F4()
{
  unsigned __int8 *v0;

  return sub_100B18024(*v0);
}

uint64_t sub_100B183FC@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100B19980(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100B18420(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100B193B4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100B18448(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100B193B4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100B18470(_QWORD *a1)
{
  return sub_100B18120(a1);
}

void sub_100B18484(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, unsigned __int8 a16)
{
  int *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  unint64_t v26;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v28;
  id v29;
  void *v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  id v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  __n128 v73;
  uint64_t v74;
  _QWORD v75[2];
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;

  v89 = a7;
  v90 = a8;
  v87 = a5;
  v88 = a6;
  v85 = a3;
  v86 = a4;
  v84 = a2;
  v17 = (int *)type metadata accessor for LostModeRequestContent(0);
  v18 = __chkstk_darwin(v17);
  v75[1] = (char *)v75 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v21 = (char *)v75 - v20;
  v22 = type metadata accessor for Date(0);
  v23 = *(_QWORD *)(v22 - 8);
  __chkstk_darwin(v22);
  v25 = (char *)v75 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = sub_1006B8DC4((uint64_t)_swiftEmptyArrayStorage);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v26);
  v91 = v26;
  sub_100109D28(1702195828, 0xE400000000000000, 0xD00000000000001BLL, 0x8000000100ECA2A0, isUniquelyReferenced_nonNull_native);
  v28 = v91;
  swift_bridgeObjectRelease();
  v29 = objc_msgSend((id)objc_opt_self(AKDevice), "currentDevice");
  if (v29)
  {
    v30 = v29;
    v31 = a1;
    v32 = objc_msgSend(v29, "serverFriendlyDescription");

    if (v32)
    {
      v83 = a16;
      v81 = a14;
      v82 = a15;
      v79 = a12;
      v80 = a13;
      v77 = a10;
      v78 = a11;
      v76 = a9;
      v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(v32);
      v35 = v34;

      v36 = swift_isUniquelyReferenced_nonNull_native(v28);
      v91 = v28;
      sub_100109D28(v33, v35, 0xD000000000000011, 0x8000000100ECA2C0, v36);
      v37 = v91;
      v38 = swift_bridgeObjectRelease();
      v39 = Date.init()(v38);
      v40 = Date.epoch.getter(v39);
      (*(void (**)(char *, uint64_t))(v23 + 8))(v25, v22);
      v91 = v40;
      v41 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int64, &protocol witness table for Int64);
      v43 = v42;
      v44 = swift_isUniquelyReferenced_nonNull_native(v37);
      v91 = v37;
      sub_100109D28(v41, v43, 0xD000000000000015, 0x8000000100ECA2E0, v44);
      v45 = v91;
      swift_bridgeObjectRelease();
      v91 = 1;
      v46 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
      v48 = v47;
      v49 = swift_isUniquelyReferenced_nonNull_native(v45);
      v91 = v45;
      sub_100109D28(v46, v48, 0xD000000000000013, 0x8000000100ECA300, v49);
      v50 = v91;
      swift_bridgeObjectRelease();
      v51 = sub_10069BB84();
      v53 = v52;
      v54 = swift_isUniquelyReferenced_nonNull_native(v50);
      v91 = v50;
      sub_100109D28((uint64_t)v51, v53, 0x6567412D72657355, 0xEA0000000000746ELL, v54);
      swift_bridgeObjectRelease();
      v55 = type metadata accessor for UUID(0);
      v56 = *(_QWORD *)(v55 - 8);
      (*(void (**)(char *, uint64_t, uint64_t))(v56 + 16))(v21, v31, v55);
      v57 = &v21[v17[5]];
      v58 = v85;
      *(_QWORD *)v57 = v84;
      *((_QWORD *)v57 + 1) = v58;
      v59 = &v21[v17[6]];
      v60 = v87;
      *(_QWORD *)v59 = v86;
      *((_QWORD *)v59 + 1) = v60;
      v61 = &v21[v17[7]];
      v62 = v89;
      *(_QWORD *)v61 = v88;
      *((_QWORD *)v61 + 1) = v62;
      v63 = &v21[v17[8]];
      v64 = v76;
      *(_QWORD *)v63 = v90;
      *((_QWORD *)v63 + 1) = v64;
      v65 = &v21[v17[9]];
      v66 = v78;
      *(_QWORD *)v65 = v77;
      *((_QWORD *)v65 + 1) = v66;
      v67 = &v21[v17[10]];
      v68 = v80;
      *(_QWORD *)v67 = v79;
      *((_QWORD *)v67 + 1) = v68;
      v69 = &v21[v17[11]];
      v70 = v82;
      *(_QWORD *)v69 = v81;
      *((_QWORD *)v69 + 1) = v70;
      v71 = &v21[v17[12]];
      *(_QWORD *)v71 = 0x746C7561666564;
      *((_QWORD *)v71 + 1) = 0xE700000000000000;
      v21[v17[13]] = v83 & 1;
      v72 = type metadata accessor for JSONEncoder(0);
      swift_allocObject(v72, *(unsigned int *)(v72 + 48), *(unsigned __int16 *)(v72 + 52));
      JSONEncoder.init()(v73);
      v74 = sub_100006204(&qword_101114DE8, type metadata accessor for LostModeRequestContent, (uint64_t)&unk_100E5FB60);
      dispatch thunk of JSONEncoder.encode<A>(_:)(v21, v17, v74);
      swift_release();
      (*(void (**)(uint64_t, uint64_t))(v56 + 8))(v31, v55);
      sub_100B18ABC((uint64_t)v21);
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

uint64_t type metadata accessor for LostModeRequestContent(uint64_t a1)
{
  uint64_t result;

  result = qword_101114E48;
  if (!qword_101114E48)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for LostModeRequestContent);
  return result;
}

uint64_t sub_100B18A78(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for LostModeRequestContent(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100B18ABC(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for LostModeRequestContent(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

_QWORD *sub_100B18AF8(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v40 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v40 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v40);
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = a3[6];
    v10 = (_QWORD *)((char *)a1 + v8);
    v11 = (_QWORD *)((char *)a2 + v8);
    v12 = v11[1];
    *v10 = *v11;
    v10[1] = v12;
    v13 = (_QWORD *)((char *)a1 + v9);
    v14 = (_QWORD *)((char *)a2 + v9);
    v15 = v14[1];
    *v13 = *v14;
    v13[1] = v15;
    v16 = a3[7];
    v17 = a3[8];
    v18 = (_QWORD *)((char *)a1 + v16);
    v19 = (_QWORD *)((char *)a2 + v16);
    v20 = v19[1];
    *v18 = *v19;
    v18[1] = v20;
    v21 = (_QWORD *)((char *)a1 + v17);
    v22 = (_QWORD *)((char *)a2 + v17);
    v23 = v22[1];
    *v21 = *v22;
    v21[1] = v23;
    v24 = a3[9];
    v25 = a3[10];
    v26 = (_QWORD *)((char *)a1 + v24);
    v27 = (_QWORD *)((char *)a2 + v24);
    v28 = v27[1];
    *v26 = *v27;
    v26[1] = v28;
    v29 = (_QWORD *)((char *)a1 + v25);
    v30 = (_QWORD *)((char *)a2 + v25);
    v31 = v30[1];
    *v29 = *v30;
    v29[1] = v31;
    v32 = a3[11];
    v33 = a3[12];
    v34 = (_QWORD *)((char *)a1 + v32);
    v35 = (_QWORD *)((char *)a2 + v32);
    v36 = v35[1];
    *v34 = *v35;
    v34[1] = v36;
    v37 = (_QWORD *)((char *)a1 + v33);
    v38 = (_QWORD *)((char *)a2 + v33);
    v39 = v38[1];
    *v37 = *v38;
    v37[1] = v39;
    *((_BYTE *)a1 + a3[13]) = *((_BYTE *)a2 + a3[13]);
    swift_bridgeObjectRetain(v12);
    swift_bridgeObjectRetain(v15);
    swift_bridgeObjectRetain(v20);
    swift_bridgeObjectRetain(v23);
    swift_bridgeObjectRetain(v28);
    swift_bridgeObjectRetain(v31);
    swift_bridgeObjectRetain(v36);
    swift_bridgeObjectRetain(v39);
  }
  return a1;
}

uint64_t sub_100B18C64(uint64_t a1, int *a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[5] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[6] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[7] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[8] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[9] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[10] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[11] + 8));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[12] + 8));
}

uint64_t sub_100B18D1C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = (_QWORD *)(a1 + v7);
  v10 = (_QWORD *)(a2 + v7);
  v11 = v10[1];
  *v9 = *v10;
  v9[1] = v11;
  v12 = (_QWORD *)(a1 + v8);
  v13 = (_QWORD *)(a2 + v8);
  v14 = v13[1];
  *v12 = *v13;
  v12[1] = v14;
  v15 = a3[7];
  v16 = a3[8];
  v17 = (_QWORD *)(a1 + v15);
  v18 = (_QWORD *)(a2 + v15);
  v19 = v18[1];
  *v17 = *v18;
  v17[1] = v19;
  v20 = (_QWORD *)(a1 + v16);
  v21 = (_QWORD *)(a2 + v16);
  v22 = v21[1];
  *v20 = *v21;
  v20[1] = v22;
  v23 = a3[9];
  v24 = a3[10];
  v25 = (_QWORD *)(a1 + v23);
  v26 = (_QWORD *)(a2 + v23);
  v27 = v26[1];
  *v25 = *v26;
  v25[1] = v27;
  v28 = (_QWORD *)(a1 + v24);
  v29 = (_QWORD *)(a2 + v24);
  v30 = v29[1];
  *v28 = *v29;
  v28[1] = v30;
  v31 = a3[11];
  v32 = a3[12];
  v33 = (_QWORD *)(a1 + v31);
  v34 = (_QWORD *)(a2 + v31);
  v35 = v34[1];
  *v33 = *v34;
  v33[1] = v35;
  v36 = (_QWORD *)(a1 + v32);
  v37 = (_QWORD *)(a2 + v32);
  v38 = v37[1];
  *v36 = *v37;
  v36[1] = v38;
  *(_BYTE *)(a1 + a3[13]) = *(_BYTE *)(a2 + a3[13]);
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRetain(v27);
  swift_bridgeObjectRetain(v30);
  swift_bridgeObjectRetain(v35);
  swift_bridgeObjectRetain(v38);
  return a1;
}

uint64_t sub_100B18E5C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  *v8 = *v9;
  v10 = v9[1];
  v11 = v8[1];
  v8[1] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  v12 = a3[6];
  v13 = (_QWORD *)(a1 + v12);
  v14 = (_QWORD *)(a2 + v12);
  *v13 = *v14;
  v15 = v14[1];
  v16 = v13[1];
  v13[1] = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease(v16);
  v17 = a3[7];
  v18 = (_QWORD *)(a1 + v17);
  v19 = (_QWORD *)(a2 + v17);
  *v18 = *v19;
  v20 = v19[1];
  v21 = v18[1];
  v18[1] = v20;
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRelease(v21);
  v22 = a3[8];
  v23 = (_QWORD *)(a1 + v22);
  v24 = (_QWORD *)(a2 + v22);
  *v23 = *v24;
  v25 = v24[1];
  v26 = v23[1];
  v23[1] = v25;
  swift_bridgeObjectRetain(v25);
  swift_bridgeObjectRelease(v26);
  v27 = a3[9];
  v28 = (_QWORD *)(a1 + v27);
  v29 = (_QWORD *)(a2 + v27);
  *v28 = *v29;
  v30 = v29[1];
  v31 = v28[1];
  v28[1] = v30;
  swift_bridgeObjectRetain(v30);
  swift_bridgeObjectRelease(v31);
  v32 = a3[10];
  v33 = (_QWORD *)(a1 + v32);
  v34 = (_QWORD *)(a2 + v32);
  *v33 = *v34;
  v35 = v34[1];
  v36 = v33[1];
  v33[1] = v35;
  swift_bridgeObjectRetain(v35);
  swift_bridgeObjectRelease(v36);
  v37 = a3[11];
  v38 = (_QWORD *)(a1 + v37);
  v39 = (_QWORD *)(a2 + v37);
  *v38 = *v39;
  v40 = v39[1];
  v41 = v38[1];
  v38[1] = v40;
  swift_bridgeObjectRetain(v40);
  swift_bridgeObjectRelease(v41);
  v42 = a3[12];
  v43 = (_QWORD *)(a1 + v42);
  v44 = (_QWORD *)(a2 + v42);
  *v43 = *v44;
  v45 = v44[1];
  v46 = v43[1];
  v43[1] = v45;
  swift_bridgeObjectRetain(v45);
  swift_bridgeObjectRelease(v46);
  *(_BYTE *)(a1 + a3[13]) = *(_BYTE *)(a2 + a3[13]);
  return a1;
}

uint64_t sub_100B19018(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  v8 = a3[8];
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  *(_OWORD *)(a1 + v8) = *(_OWORD *)(a2 + v8);
  v9 = a3[10];
  *(_OWORD *)(a1 + a3[9]) = *(_OWORD *)(a2 + a3[9]);
  *(_OWORD *)(a1 + v9) = *(_OWORD *)(a2 + v9);
  v10 = a3[12];
  *(_OWORD *)(a1 + a3[11]) = *(_OWORD *)(a2 + a3[11]);
  *(_OWORD *)(a1 + v10) = *(_OWORD *)(a2 + v10);
  *(_BYTE *)(a1 + a3[13]) = *(_BYTE *)(a2 + a3[13]);
  return a1;
}

uint64_t sub_100B190C4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = (_QWORD *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v11 = *v9;
  v10 = v9[1];
  v12 = v8[1];
  *v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease(v12);
  v13 = a3[6];
  v14 = (_QWORD *)(a1 + v13);
  v15 = (uint64_t *)(a2 + v13);
  v17 = *v15;
  v16 = v15[1];
  v18 = v14[1];
  *v14 = v17;
  v14[1] = v16;
  swift_bridgeObjectRelease(v18);
  v19 = a3[7];
  v20 = (_QWORD *)(a1 + v19);
  v21 = (uint64_t *)(a2 + v19);
  v23 = *v21;
  v22 = v21[1];
  v24 = v20[1];
  *v20 = v23;
  v20[1] = v22;
  swift_bridgeObjectRelease(v24);
  v25 = a3[8];
  v26 = (_QWORD *)(a1 + v25);
  v27 = (uint64_t *)(a2 + v25);
  v29 = *v27;
  v28 = v27[1];
  v30 = v26[1];
  *v26 = v29;
  v26[1] = v28;
  swift_bridgeObjectRelease(v30);
  v31 = a3[9];
  v32 = (_QWORD *)(a1 + v31);
  v33 = (uint64_t *)(a2 + v31);
  v35 = *v33;
  v34 = v33[1];
  v36 = v32[1];
  *v32 = v35;
  v32[1] = v34;
  swift_bridgeObjectRelease(v36);
  v37 = a3[10];
  v38 = (_QWORD *)(a1 + v37);
  v39 = (uint64_t *)(a2 + v37);
  v41 = *v39;
  v40 = v39[1];
  v42 = v38[1];
  *v38 = v41;
  v38[1] = v40;
  swift_bridgeObjectRelease(v42);
  v43 = a3[11];
  v44 = (_QWORD *)(a1 + v43);
  v45 = (uint64_t *)(a2 + v43);
  v47 = *v45;
  v46 = v45[1];
  v48 = v44[1];
  *v44 = v47;
  v44[1] = v46;
  swift_bridgeObjectRelease(v48);
  v49 = a3[12];
  v50 = (_QWORD *)(a1 + v49);
  v51 = (uint64_t *)(a2 + v49);
  v53 = *v51;
  v52 = v51[1];
  v54 = v50[1];
  *v50 = v53;
  v50[1] = v52;
  swift_bridgeObjectRelease(v54);
  *(_BYTE *)(a1 + a3[13]) = *(_BYTE *)(a2 + a3[13]);
  return a1;
}

uint64_t sub_100B19200(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100B1920C);
}

uint64_t sub_100B1920C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_100B1928C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100B19298);
}

uint64_t sub_100B19298(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  return result;
}

uint64_t sub_100B19314(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[10];

  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_100E5FAB8;
    v4[2] = &unk_100E5FAB8;
    v4[3] = &unk_100E5FAB8;
    v4[4] = &unk_100E5FAD0;
    v4[5] = &unk_100E5FAD0;
    v4[6] = &unk_100E5FAD0;
    v4[7] = &unk_100E5FAD0;
    v4[8] = &unk_100E5FAB8;
    v4[9] = &unk_100E5FAE8;
    swift_initStructMetadata(a1, 256, 10, v4, a1 + 16);
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for LostModeRequest()
{
  return &type metadata for LostModeRequest;
}

unint64_t sub_100B193B4()
{
  unint64_t result;

  result = qword_101114EA8;
  if (!qword_101114EA8)
  {
    result = swift_getWitnessTable(byte_100E5FDAC, &type metadata for LostModeRequestContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101114EA8);
  }
  return result;
}

uint64_t sub_100B193F8(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD v17[2];
  char v18;

  v3 = sub_10001A9A8(&qword_101114EB0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v17[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  sub_10001AA44(a1, v7);
  v9 = sub_100B195F4();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for LostModeRequest.CodingKeys, &type metadata for LostModeRequest.CodingKeys, v9, v7, v8);
  if (v1)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  }
  else
  {
    v10 = sub_10001A9A8(&qword_101103CB8);
    v18 = 0;
    v11 = sub_10069CCD8(&qword_101103CC0, (uint64_t)&protocol witness table for String, (const char *)&protocol conformance descriptor for <> [A : B]);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v17, v10, &v18, v3, v10, v11);
    v7 = v17[0];
    v18 = 1;
    v13 = sub_100036994();
    swift_bridgeObjectRetain(v7);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v17, &type metadata for Data, &v18, v3, &type metadata for Data, v13);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    v14 = v17[0];
    v15 = v17[1];
    swift_bridgeObjectRetain(v7);
    sub_10001BBBC(v14, v15);
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
    swift_bridgeObjectRelease();
    sub_10001BC14(v14, v15);
  }
  return v7;
}

unint64_t sub_100B195F4()
{
  unint64_t result;

  result = qword_101114EB8;
  if (!qword_101114EB8)
  {
    result = swift_getWitnessTable(aE_44, &type metadata for LostModeRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101114EB8);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for LostModeRequest.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_100B19684 + 4 * byte_100E5FA8F[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100B196B8 + 4 * byte_100E5FA8A[v4]))();
}

uint64_t sub_100B196B8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100B196C0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100B196C8);
  return result;
}

uint64_t sub_100B196D4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100B196DCLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_100B196E0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100B196E8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for LostModeRequest.CodingKeys()
{
  return &type metadata for LostModeRequest.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for LostModeRequestContent.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 9 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 9) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF7)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF6)
    return ((uint64_t (*)(void))((char *)&loc_100B19750 + 4 * byte_100E5FA99[v4]))();
  *a1 = a2 + 9;
  return ((uint64_t (*)(void))((char *)sub_100B19784 + 4 * byte_100E5FA94[v4]))();
}

uint64_t sub_100B19784(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100B1978C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100B19794);
  return result;
}

uint64_t sub_100B197A0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100B197A8);
  *(_BYTE *)result = a2 + 9;
  return result;
}

uint64_t sub_100B197AC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100B197B4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for LostModeRequestContent.CodingKeys()
{
  return &type metadata for LostModeRequestContent.CodingKeys;
}

unint64_t sub_100B197D4()
{
  unint64_t result;

  result = qword_101114EC8;
  if (!qword_101114EC8)
  {
    result = swift_getWitnessTable(a5_21, &type metadata for LostModeRequestContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101114EC8);
  }
  return result;
}

unint64_t sub_100B1981C()
{
  unint64_t result;

  result = qword_101114ED0;
  if (!qword_101114ED0)
  {
    result = swift_getWitnessTable(asc_100E5FD34, &type metadata for LostModeRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101114ED0);
  }
  return result;
}

unint64_t sub_100B19864()
{
  unint64_t result;

  result = qword_101114ED8;
  if (!qword_101114ED8)
  {
    result = swift_getWitnessTable(byte_100E5FCA4, &type metadata for LostModeRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101114ED8);
  }
  return result;
}

unint64_t sub_100B198AC()
{
  unint64_t result;

  result = qword_101114EE0;
  if (!qword_101114EE0)
  {
    result = swift_getWitnessTable(byte_100E5FCCC, &type metadata for LostModeRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101114EE0);
  }
  return result;
}

unint64_t sub_100B198F4()
{
  unint64_t result;

  result = qword_101114EE8;
  if (!qword_101114EE8)
  {
    result = swift_getWitnessTable(asc_100E5FBEC, &type metadata for LostModeRequestContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101114EE8);
  }
  return result;
}

unint64_t sub_100B1993C()
{
  unint64_t result;

  result = qword_101114EF0;
  if (!qword_101114EF0)
  {
    result = swift_getWitnessTable(aE_45, &type metadata for LostModeRequestContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101114EF0);
  }
  return result;
}

uint64_t sub_100B19980(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char v15;

  if (a1 == 0x646975756162 && a2 == 0xE600000000000000)
  {
    v5 = 0xE600000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x646975756162, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 1684628325 && a2 == 0xE400000000000000)
  {
    v7 = 0xE400000000000000;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1684628325, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x644970696863 && a2 == 0xE600000000000000)
  {
    v8 = 0xE600000000000000;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x644970696863, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0x754E6C6169726573 && a2 == 0xEC0000007265626DLL)
  {
    v9 = 0xEC0000007265626DLL;
LABEL_26:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x754E6C6169726573, 0xEC0000007265626DLL, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_26;
  }
  if (a1 == 0x656C746974 && a2 == 0xE500000000000000)
  {
    v10 = 0xE500000000000000;
LABEL_32:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x656C746974, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_32;
  }
  if (a1 == 1954047348 && a2 == 0xE400000000000000)
  {
    v11 = 0xE400000000000000;
LABEL_38:
    swift_bridgeObjectRelease(v11);
    return 5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1954047348, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
    goto LABEL_38;
  }
  if (a1 == 0x6C69616D65 && a2 == 0xE500000000000000)
  {
    v12 = 0xE500000000000000;
LABEL_44:
    swift_bridgeObjectRelease(v12);
    return 6;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6C69616D65, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    v12 = a2;
    goto LABEL_44;
  }
  if (a1 == 0x72624E72656E776FLL && a2 == 0xE800000000000000)
  {
    v13 = 0xE800000000000000;
LABEL_50:
    swift_bridgeObjectRelease(v13);
    return 7;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x72624E72656E776FLL, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v13 = a2;
    goto LABEL_50;
  }
  if (a1 == 0x747865746E6F63 && a2 == 0xE700000000000000)
  {
    v14 = 0xE700000000000000;
LABEL_56:
    swift_bridgeObjectRelease(v14);
    return 8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x747865746E6F63, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v14 = a2;
    goto LABEL_56;
  }
  if (a1 == 0x65646F4D74736F6CLL && a2 == 0xEF64656C62616E45)
  {
    swift_bridgeObjectRelease(0xEF64656C62616E45);
    return 9;
  }
  else
  {
    v15 = _stringCompareWithSmolCheck(_:_:expecting:)(0x65646F4D74736F6CLL, 0xEF64656C62616E45, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v15 & 1) != 0)
      return 9;
    else
      return 10;
  }
}

uint64_t sub_100B19D8C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v2 = enum case for FMNAccountType.pairingLock(_:);
  v3 = type metadata accessor for FMNAccountType(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
  v4 = type metadata accessor for UnpairEndPoint(0);
  URLComponents.init()(v4);
  URLComponents.scheme.setter(0x7370747468, 0xE500000000000000);
  URLComponents.path.setter();
  if (qword_1010E9D08 != -1)
    swift_once(&qword_1010E9D08, sub_10059A6E0);
  OS_dispatch_queue.sync<A>(execute:)(sub_100003D88, qword_1011B71A8, &type metadata for Configuration);
  sub_100C1B4E0(v6);
  swift_bridgeObjectRelease();
  return URLComponents.host.setter();
}

uint64_t type metadata accessor for UnpairEndPoint(uint64_t a1)
{
  uint64_t result;

  result = qword_101114F50;
  if (!qword_101114F50)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for UnpairEndPoint);
  return result;
}

uint64_t sub_100B19EE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100B19EF4);
}

uint64_t sub_100B19EF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  v6 = type metadata accessor for FMNAccountType(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v8 = type metadata accessor for URLComponents(0);
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t sub_100B19F68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100B19F74);
}

uint64_t sub_100B19F74(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v8 = type metadata accessor for FMNAccountType(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v10 = type metadata accessor for URLComponents(0);
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t *sub_100B19FF0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    *v9 = *v10;
    v11 = *((_QWORD *)v10 + 2);
    *((_QWORD *)v9 + 1) = *((_QWORD *)v10 + 1);
    *((_QWORD *)v9 + 2) = v11;
    swift_bridgeObjectRetain(v11);
  }
  return a1;
}

uint64_t sub_100B1A08C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(a2 + 20) + 16));
}

uint64_t sub_100B1A0D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_BYTE *)v8 = *(_BYTE *)v9;
  v10 = *(_QWORD *)(v9 + 16);
  *(_QWORD *)(v8 + 8) = *(_QWORD *)(v9 + 8);
  *(_QWORD *)(v8 + 16) = v10;
  swift_bridgeObjectRetain(v10);
  return a1;
}

uint64_t sub_100B1A144(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_BYTE *)v8 = *(_BYTE *)v9;
  *(_QWORD *)(v8 + 8) = *(_QWORD *)(v9 + 8);
  v10 = *(_QWORD *)(v9 + 16);
  v11 = *(_QWORD *)(v8 + 16);
  *(_QWORD *)(v8 + 16) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  return a1;
}

uint64_t sub_100B1A1C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_OWORD *)v8 = *(_OWORD *)v9;
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(v9 + 16);
  return a1;
}

uint64_t sub_100B1A234(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_BYTE *)v8 = *(_BYTE *)v9;
  v11 = *(_QWORD *)(v9 + 8);
  v10 = *(_QWORD *)(v9 + 16);
  v12 = *(_QWORD *)(v8 + 16);
  *(_QWORD *)(v8 + 8) = v11;
  *(_QWORD *)(v8 + 16) = v10;
  swift_bridgeObjectRelease(v12);
  return a1;
}

uint64_t sub_100B1A2A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100B1A2B4);
}

uint64_t sub_100B1A2B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 16);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_100B1A334(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100B1A340);
}

uint64_t sub_100B1A340(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20) + 16) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for KeyRequestEnvelope(uint64_t a1)
{
  uint64_t result;

  result = qword_101114FE0;
  if (!qword_101114FE0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for KeyRequestEnvelope);
  return result;
}

uint64_t sub_100B1A3F8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_100E5FE68;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_100B1A468(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v20;
  _BYTE v21[8];
  uint64_t v22;
  uint64_t v23;

  v3 = v1;
  v5 = sub_10001A9A8(&qword_101115018);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = &v21[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  v11 = sub_100B1A93C();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for KeyRequestEnvelope.CodingKeys, &type metadata for KeyRequestEnvelope.CodingKeys, v11, v9, v10);
  v21[0] = 0;
  v12 = type metadata accessor for UUID(0);
  v13 = sub_10001AA68(&qword_1010EDAC0, (uint64_t)&protocol conformance descriptor for UUID);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v3, v21, v5, v12, v13);
  if (!v2)
  {
    v14 = (char *)(v3 + *(int *)(type metadata accessor for KeyRequestEnvelope(0) + 20));
    v15 = *v14;
    v17 = *((_QWORD *)v14 + 1);
    v16 = *((_QWORD *)v14 + 2);
    v21[0] = v15;
    v22 = v17;
    v23 = v16;
    HIBYTE(v20) = 1;
    v18 = sub_1000A82E0();
    KeyedEncodingContainer.encode<A>(_:forKey:)(v21, (char *)&v20 + 7, v5, &type metadata for MessagingDestination, v18);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100B1A5D4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD v32[3];
  char v33;

  v27 = a2;
  v31 = type metadata accessor for UUID(0);
  v28 = *(_QWORD *)(v31 - 8);
  __chkstk_darwin(v31);
  v29 = (_QWORD **)((char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v30 = sub_10001A9A8(&qword_101115028);
  v5 = *(_QWORD *)(v30 - 8);
  __chkstk_darwin(v30);
  v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for KeyRequestEnvelope(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v11 = a1[4];
  sub_10001AA44(a1, v12);
  v13 = sub_100B1A93C();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for KeyRequestEnvelope.CodingKeys, &type metadata for KeyRequestEnvelope.CodingKeys, v13, v12, v11);
  if (v2)
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  v25 = a1;
  v26 = v5;
  v14 = (uint64_t)v10;
  v15 = v28;
  LOBYTE(v32[0]) = 0;
  v16 = sub_10001AA68((unint64_t *)&qword_1010EDA90, (uint64_t)&protocol conformance descriptor for UUID);
  v18 = v29;
  v17 = v30;
  v19 = v31;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v29, v31, v32, v30, v31, v16);
  (*(void (**)(uint64_t, _QWORD *, uint64_t))(v15 + 32))(v14, v18, v19);
  v33 = 1;
  v20 = sub_1000A8368();
  KeyedDecodingContainer.decode<A>(_:forKey:)(v32, &type metadata for MessagingDestination, &v33, v17, &type metadata for MessagingDestination, v20);
  (*(void (**)(char *, uint64_t))(v26 + 8))(v7, v17);
  v21 = v32[1];
  v22 = v32[2];
  v23 = v14 + *(int *)(v8 + 20);
  *(_BYTE *)v23 = v32[0];
  *(_QWORD *)(v23 + 8) = v21;
  *(_QWORD *)(v23 + 16) = v22;
  sub_100B1A980(v14, v27);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v25);
  return sub_100B1A9C4(v14);
}

uint64_t sub_100B1A860()
{
  _BYTE *v0;

  if (*v0)
    return 0x4449656C707061;
  else
    return 0xD000000000000010;
}

uint64_t sub_100B1A8A0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100B1ABA4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100B1A8C4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100B1A93C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100B1A8EC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100B1A93C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100B1A914@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100B1A5D4(a1, a2);
}

uint64_t sub_100B1A928(_QWORD *a1)
{
  return sub_100B1A468(a1);
}

unint64_t sub_100B1A93C()
{
  unint64_t result;

  result = qword_101115020;
  if (!qword_101115020)
  {
    result = swift_getWitnessTable(byte_100E5FF94, &type metadata for KeyRequestEnvelope.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101115020);
  }
  return result;
}

uint64_t sub_100B1A980(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for KeyRequestEnvelope(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100B1A9C4(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for KeyRequestEnvelope(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t storeEnumTagSinglePayload for KeyRequestEnvelope.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_100B1AA4C + 4 * byte_100E5FE45[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100B1AA80 + 4 * byte_100E5FE40[v4]))();
}

uint64_t sub_100B1AA80(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100B1AA88(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100B1AA90);
  return result;
}

uint64_t sub_100B1AA9C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100B1AAA4);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_100B1AAA8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100B1AAB0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for KeyRequestEnvelope.CodingKeys()
{
  return &type metadata for KeyRequestEnvelope.CodingKeys;
}

unint64_t sub_100B1AAD0()
{
  unint64_t result;

  result = qword_101115030;
  if (!qword_101115030)
  {
    result = swift_getWitnessTable(byte_100E5FF6C, &type metadata for KeyRequestEnvelope.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101115030);
  }
  return result;
}

unint64_t sub_100B1AB18()
{
  unint64_t result;

  result = qword_101115038;
  if (!qword_101115038)
  {
    result = swift_getWitnessTable(byte_100E5FEDC, &type metadata for KeyRequestEnvelope.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101115038);
  }
  return result;
}

unint64_t sub_100B1AB60()
{
  unint64_t result;

  result = qword_101115040;
  if (!qword_101115040)
  {
    result = swift_getWitnessTable(byte_100E5FF04, &type metadata for KeyRequestEnvelope.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101115040);
  }
  return result;
}

uint64_t sub_100B1ABA4(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  char v6;

  if (a1 == 0xD000000000000010)
  {
    v4 = 0x8000000100EC28D0;
    if (a2 == 0x8000000100EC28D0)
      goto LABEL_5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x8000000100EC28D0, a1, a2, 0) & 1) != 0)
  {
    v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  if (a1 == 0x4449656C707061 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease(0xE700000000000000);
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x4449656C707061, 0xE700000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_100B1AC94()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(char *);
  uint64_t v16;
  uint64_t v17;
  _QWORD v19[2];
  unsigned int v20;
  uint64_t (*v21)(char *);
  uint64_t v22;
  _QWORD *v23;

  v0 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v0);
  v2 = (char *)v19 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v3);
  v5 = (char *)v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19[1] = sub_10001F6FC();
  v20 = enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:);
  v21 = *(uint64_t (**)(char *))(v7 + 104);
  v10 = v21(v9);
  static DispatchQoS.unspecified.getter(v10);
  v23 = _swiftEmptyArrayStorage;
  v11 = sub_100006C64((unint64_t *)&qword_1010F0E20, 255, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v12 = sub_10001A9A8((uint64_t *)&unk_1010EA6B0);
  v13 = sub_1000193A4((unint64_t *)&qword_1010F0E30, (uint64_t *)&unk_1010EA6B0, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v23, v12, v13, v0, v11);
  v14 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000035, 0x8000000100EEEFB0, v5, v2, v9, 0);
  v15 = v21;
  v16 = v22;
  *(_QWORD *)(v22 + 16) = v14;
  v17 = ((uint64_t (*)(char *, _QWORD, uint64_t))v15)(v9, v20, v6);
  static DispatchQoS.unspecified.getter(v17);
  v23 = _swiftEmptyArrayStorage;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v23, v12, v13, v0, v11);
  *(_QWORD *)(v16 + 24) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD00000000000003BLL, 0x8000000100EEEFF0, v5, v2, v9, 0);
  *(_QWORD *)(v16 + 32) = &_swiftEmptySetSingleton;
  return v16;
}

uint64_t sub_100B1AEFC()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_1000234D8(v0, qword_1011B7C90);
  sub_10001A9E8(v0, (uint64_t)qword_1011B7C90);
  return Logger.init(subsystem:category:)(0xD00000000000001DLL, 0x8000000100EC5D30, 0xD000000000000026, 0x8000000100EEEF80);
}

Swift::Int sub_100B1AF78()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  String.hash(into:)(v1, 0xD000000000000044, 0x8000000100EC54B0);
  return Hasher._finalize()();
}

uint64_t sub_100B1AFCC(uint64_t a1)
{
  return String.hash(into:)(a1, 0xD000000000000044, 0x8000000100EC54B0);
}

Swift::Int sub_100B1AFE8()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  String.hash(into:)(v1, 0xD000000000000044, 0x8000000100EC54B0);
  return Hasher._finalize()();
}

uint64_t sub_100B1B038@<X0>(uint64_t *a1@<X0>, BOOL *a2@<X8>)
{
  Swift::String v3;
  void *v4;
  Swift::Int v5;
  uint64_t result;

  v3._countAndFlagsBits = *a1;
  v4 = (void *)a1[1];
  v3._object = v4;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10104D940, v3);
  result = swift_bridgeObjectRelease(v4);
  *a2 = v5 != 0;
  return result;
}

void sub_100B1B088(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000044;
  a1[1] = 0x8000000100EC54B0;
}

id sub_100B1B0A8()
{
  uint64_t v0;
  void *v1;
  id v2;
  objc_class *v3;
  char *v4;
  id v5;
  void *v6;
  id v7;
  objc_super v9;

  v1 = *(void **)(v0 + 144);
  if (v1)
  {
    v2 = *(id *)(v0 + 144);
  }
  else
  {
    v3 = (objc_class *)type metadata accessor for LocalFindableConnectionMaterialTrampoline();
    v4 = (char *)objc_allocWithZone(v3);
    *(_QWORD *)&v4[OBJC_IVAR____TtC12searchpartyd41LocalFindableConnectionMaterialTrampoline_implementation] = v0;
    v9.receiver = v4;
    v9.super_class = v3;
    swift_retain();
    v5 = objc_msgSendSuper2(&v9, "init");
    v6 = *(void **)(v0 + 144);
    *(_QWORD *)(v0 + 144) = v5;
    v2 = v5;

    v1 = 0;
  }
  v7 = v1;
  return v2;
}

uint64_t sub_100B1B140()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  _QWORD *v17;

  v1 = v0;
  v2 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  v3 = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for DispatchQoS(0);
  v5 = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_defaultActor_initialize(v1);
  v1[14] = 0xD000000000000026;
  v1[15] = 0x8000000100E60010;
  sub_10001F6FC();
  v9 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v7 + 104))(v8, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v6);
  static DispatchQoS.unspecified.getter(v9);
  v17 = _swiftEmptyArrayStorage;
  v10 = sub_100006C64((unint64_t *)&qword_1010F0E20, 255, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v11 = sub_10001A9A8((uint64_t *)&unk_1010EA6B0);
  v12 = sub_1000193A4((unint64_t *)&qword_1010F0E30, (uint64_t *)&unk_1010EA6B0, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v17, v11, v12, v2, v10);
  v1[16] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD00000000000004CLL, 0x8000000100EEF080, v5, v3, v8, 0);
  v13 = type metadata accessor for XPCSessionManager(0);
  swift_allocObject(v13, *(unsigned int *)(v13 + 48), *(unsigned __int16 *)(v13 + 52));
  v14 = XPCSessionManager.init(name:)(0xD000000000000028, 0x8000000100EEF0D0);
  v1[18] = 0;
  v1[19] = 0;
  v1[17] = v14;
  swift_task_dealloc(v8);
  swift_task_dealloc(v5);
  swift_task_dealloc(v3);
  return sub_1005AC9B0(*(uint64_t (**)(uint64_t))(v16 + 8), v16, (uint64_t)v1);
}

uint64_t sub_100B1B350()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 64) = v0;
  return swift_task_switch(sub_100B1B368, v0, 0);
}

uint64_t sub_100B1B368()
{
  _QWORD *v0;
  uint64_t v1;
  NSObject *v2;
  uint64_t v3;
  void *v4;
  uint64_t result;

  v1 = v0[8];
  v2 = *(NSObject **)(v1 + 128);
  v3 = swift_allocObject(&unk_1010AD8B0, 32, 7);
  v0[2] = _NSConcreteStackBlock;
  *(_QWORD *)(v3 + 16) = sub_100B1CF54;
  *(_QWORD *)(v3 + 24) = v1;
  v0[6] = sub_10005CBA4;
  v0[7] = v3;
  v0[3] = 1107296256;
  v0[4] = sub_10001D8B8;
  v0[5] = &unk_1010AD8C8;
  v4 = _Block_copy(v0 + 2);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v2, v4);
  _Block_release(v4);
  LOBYTE(v2) = swift_isEscapingClosureAtFileLocation(v3, "", 127, 36, 27, 1);
  swift_release();
  result = swift_release();
  if ((v2 & 1) == 0)
    return ((uint64_t (*)(void))v0[1])();
  __break(1u);
  return result;
}

uint64_t sub_100B1B480(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  void *v16;
  id v17;
  void *v18;
  void *v19;
  id v20;
  id v21;
  uint64_t v23;
  uint64_t v24;

  v2 = type metadata accessor for XPCServiceDescription(0);
  v23 = *(_QWORD *)(v2 - 8);
  v24 = v2;
  __chkstk_darwin(v2);
  v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for MachServiceName(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v23 - v10;
  v12 = (_QWORD *)type metadata accessor for DispatchPredicate(0);
  v13 = *(v12 - 1);
  __chkstk_darwin(v12);
  v15 = (uint64_t *)((char *)&v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v16 = *(void **)(a1 + 128);
  *v15 = v16;
  (*(void (**)(_QWORD *, _QWORD, _QWORD *))(v13 + 104))(v15, enum case for DispatchPredicate.onQueue(_:), v12);
  v17 = v16;
  LOBYTE(v16) = _dispatchPreconditionTest(_:)(v15);
  (*(void (**)(_QWORD *, _QWORD *))(v13 + 8))(v15, v12);
  if ((v16 & 1) == 0)
  {
    __break(1u);
    goto LABEL_5;
  }
  MachServiceName.init(_:)(0xD000000000000044, 0x8000000100EEF030);
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v9, v11, v5);
  v12 = sub_100B1B0A8();
  if (qword_1010EA1E8 != -1)
LABEL_5:
    swift_once(&qword_1010EA1E8, sub_100B1B700);
  v18 = (void *)qword_101115050;
  v19 = (void *)objc_opt_self(NSXPCInterface);
  v20 = v18;
  v21 = objc_msgSend(v19, "interfaceWithProtocol:", &OBJC_PROTOCOL___SPLocalFindableConnectionMaterialMonitoringXPCClientProtocol);
  swift_retain_n(a1, 3);
  XPCServiceDescription.init(name:options:exportedObject:exportedInterface:remoteObjectInterface:shouldAccept:interruptionHandler:invalidationHandler:)(v9, 0, v12, v20, v21, sub_100B1CF6C, a1, sub_100B1CF70, a1, sub_100B1CF74, a1);
  XPCSessionManager.register(service:)(v4);
  (*(void (**)(char *, uint64_t))(v23 + 8))(v4, v24);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v11, v5);
}

id sub_100B1B700()
{
  id result;

  result = objc_msgSend((id)objc_opt_self(NSXPCInterface), "interfaceWithProtocol:", &OBJC_PROTOCOL___SPLocalFindableConnectionMaterialMonitoringXPCProtocol);
  qword_101115050 = (uint64_t)result;
  return result;
}

uint64_t sub_100B1B74C(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  void **v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  void ***v9;
  void **v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void **v16;
  char isEscapingClosureAtFileLocation;
  uint64_t result;
  void **v19;
  _QWORD v20[5];

  v2 = v1;
  if (qword_1010EA1E0 != -1)
    swift_once(&qword_1010EA1E0, sub_100B1AEFC);
  v4 = type metadata accessor for Logger(0);
  sub_10001A9E8(v4, (uint64_t)qword_1011B7C90);
  v5 = a1;
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.default.getter(v6);
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = (void ***)swift_slowAlloc(8, -1);
    *(_DWORD *)v8 = 138412290;
    v19 = v5;
    v10 = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, v20, v8 + 4, v8 + 12);
    *v9 = v5;

    _os_log_impl((void *)&_mh_execute_header, v6, v7, "invalidationHandler: %@", v8, 0xCu);
    v11 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v9, 1, v11);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

  }
  else
  {

  }
  v12 = *(NSObject **)(v2 + 128);
  v13 = swift_allocObject(&unk_1010AD838, 32, 7);
  *(_QWORD *)(v13 + 16) = v2;
  *(_QWORD *)(v13 + 24) = v5;
  v14 = swift_allocObject(&unk_1010AD860, 32, 7);
  *(_QWORD *)(v14 + 16) = sub_100B1D3D0;
  *(_QWORD *)(v14 + 24) = v13;
  v20[3] = sub_10005CBA4;
  v20[4] = v14;
  v19 = _NSConcreteStackBlock;
  v20[0] = 1107296256;
  v20[1] = sub_10001D8B8;
  v20[2] = &unk_1010AD878;
  v15 = _Block_copy(&v19);
  v16 = v5;
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v12, v15);
  _Block_release(v15);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v14, "", 127, 83, 27, 1);
  swift_release();
  result = swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    __break(1u);
  return result;
}

uint64_t sub_100B1B9DC(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  void **v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  void ***v9;
  void **v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void **v16;
  char isEscapingClosureAtFileLocation;
  uint64_t result;
  void **v19;
  _QWORD v20[5];

  v2 = v1;
  if (qword_1010EA1E0 != -1)
    swift_once(&qword_1010EA1E0, sub_100B1AEFC);
  v4 = type metadata accessor for Logger(0);
  sub_10001A9E8(v4, (uint64_t)qword_1011B7C90);
  v5 = a1;
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.default.getter(v6);
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = (void ***)swift_slowAlloc(8, -1);
    *(_DWORD *)v8 = 138412290;
    v19 = v5;
    v10 = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, v20, v8 + 4, v8 + 12);
    *v9 = v5;

    _os_log_impl((void *)&_mh_execute_header, v6, v7, "interruptionHandler: %@", v8, 0xCu);
    v11 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v9, 1, v11);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

  }
  else
  {

  }
  v12 = *(NSObject **)(v2 + 128);
  v13 = swift_allocObject(&unk_1010AD7C0, 32, 7);
  *(_QWORD *)(v13 + 16) = v2;
  *(_QWORD *)(v13 + 24) = v5;
  v14 = swift_allocObject(&unk_1010AD7E8, 32, 7);
  *(_QWORD *)(v14 + 16) = sub_100B1CF0C;
  *(_QWORD *)(v14 + 24) = v13;
  v20[3] = sub_10005CBA4;
  v20[4] = v14;
  v19 = _NSConcreteStackBlock;
  v20[0] = 1107296256;
  v20[1] = sub_10001D8B8;
  v20[2] = &unk_1010AD800;
  v15 = _Block_copy(&v19);
  v16 = v5;
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v12, v15);
  _Block_release(v15);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v14, "", 127, 89, 27, 1);
  swift_release();
  result = swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    __break(1u);
  return result;
}

uint64_t sub_100B1BC6C(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  Swift::String v14;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;

  v4 = *(_QWORD *)(a1 + 152);
  if (v4)
  {
    v5 = v4;
  }
  else
  {
    v6 = type metadata accessor for LocalFindableConnectionMaterialMonitoringSession(0);
    *(_QWORD *)(swift_allocObject(v6, 48, 7) + 40) = 0;
    v5 = sub_100B1AC94();
    if (qword_1010EA1E0 != -1)
      swift_once(&qword_1010EA1E0, sub_100B1AEFC);
    v7 = type metadata accessor for Logger(0);
    sub_10001A9E8(v7, (uint64_t)qword_1011B7C90);
    v8 = swift_retain_n(v5, 2);
    v9 = Logger.logObject.getter(v8);
    v10 = static os_log_type_t.default.getter(v9);
    if (os_log_type_enabled(v9, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc(12, -1);
      v19 = swift_slowAlloc(32, -1);
      *(_DWORD *)v11 = 136315138;
      v21 = 0xE100000000000000;
      v22 = v19;
      swift_retain();
      v12 = sub_10001A9A8(&qword_1010F78C8);
      v13 = sub_1000193A4(&qword_1010F78D0, &qword_1010F78C8, aQ_54);
      v14._countAndFlagsBits = CustomStringConvertible.typeDescription.getter(v12, v13);
      String.append(_:)(v14);
      swift_bridgeObjectRelease();
      v15._countAndFlagsBits = 8250;
      v15._object = (void *)0xE200000000000000;
      String.append(_:)(v15);
      v16._countAndFlagsBits = CustomStringConvertible<>.addressDescription.getter(v12, v13);
      String.append(_:)(v16);
      swift_bridgeObjectRelease();
      v17._countAndFlagsBits = 62;
      v17._object = (void *)0xE100000000000000;
      String.append(_:)(v17);
      swift_release();
      v20 = sub_100016940(60, 0xE100000000000000, &v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, &v21, v11 + 4, v11 + 12);
      swift_release_n(v5, 2);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Created new LocalFindableConnectionMaterialSession: %s", v11, 0xCu);
      swift_arrayDestroy(v19, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v19, -1, -1);
      swift_slowDealloc(v11, -1, -1);

    }
    else
    {

      swift_release_n(v5, 2);
    }
    *(_QWORD *)(a1 + 152) = v5;
    swift_retain();
    swift_release();
  }
  swift_retain();
  swift_retain();
  sub_100308498(a2);
  swift_release_n(v5, 2);
  return swift_release();
}

uint64_t sub_100B1BF4C(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  void *v8;
  id v9;
  uint64_t result;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  id v15;
  char isEscapingClosureAtFileLocation;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  _QWORD aBlock[6];

  v2 = v1;
  v4 = type metadata accessor for DispatchPredicate(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (_QWORD *)((char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = *(void **)(v2 + 128);
  *v7 = v8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v5 + 104))(v7, enum case for DispatchPredicate.onQueue(_:), v4);
  v9 = v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)(v7);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v5 + 8))(v7, v4);
  if ((v8 & 1) == 0)
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v7 = *(_QWORD **)(v2 + 152);
  if (!v7)
    return result;
  v11 = v7[2];
  v12 = swift_allocObject(&unk_1010AD748, 32, 7);
  *(_QWORD *)(v12 + 16) = v7;
  *(_QWORD *)(v12 + 24) = a1;
  v13 = swift_allocObject(&unk_1010AD770, 32, 7);
  *(_QWORD *)(v13 + 16) = sub_100B1CEF0;
  *(_QWORD *)(v13 + 24) = v12;
  aBlock[4] = sub_10005CBA4;
  aBlock[5] = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10001D8B8;
  aBlock[3] = &unk_1010AD788;
  v14 = _Block_copy(aBlock);
  swift_retain_n(v7, 2);
  v15 = a1;
  swift_retain();
  swift_release();
  dispatch_sync(v11, v14);
  _Block_release(v14);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v13, "", 110, 87, 27, 1);
  swift_release();
  swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    goto LABEL_14;
  swift_retain();
  OS_dispatch_queue.sync<A>(execute:)(sub_100750FD8, v7, &type metadata for Bool);
  swift_release();
  if (LOBYTE(aBlock[0]) == 1)
  {
    if (qword_1010E9F50 == -1)
    {
LABEL_6:
      v17 = type metadata accessor for Logger(0);
      v18 = sub_10001A9E8(v17, (uint64_t)qword_1011B77A8);
      v19 = Logger.logObject.getter(v18);
      v20 = static os_log_type_t.default.getter(v19);
      if (os_log_type_enabled(v19, v20))
      {
        v21 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v21 = 0;
        _os_log_impl((void *)&_mh_execute_header, v19, v20, "TRACE: stopMonitoring()", v21, 2u);
        swift_slowDealloc(v21, -1, -1);
      }

      if (v7[5])
      {
        swift_retain();
        sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
        Task.cancel()();
        swift_release();
      }
      swift_release();
      *(_QWORD *)(v2 + 152) = 0;
      return swift_release();
    }
LABEL_15:
    swift_once(&qword_1010E9F50, sub_1007C1C00);
    goto LABEL_6;
  }
  return swift_release();
}

uint64_t sub_100B1C264(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 72) = a1;
  *(_QWORD *)(v2 + 80) = v1;
  return swift_task_switch(sub_100B1C27C, v1, 0);
}

uint64_t sub_100B1C27C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  void *v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;

  if (qword_1010EA1E0 != -1)
    swift_once(&qword_1010EA1E0, sub_100B1AEFC);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_10001A9E8(v1, (uint64_t)qword_1011B7C90);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "LocalFindableConnectionMaterialService.startCharacteristicsMonitoring", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v7 = (void *)v0[9];
  v6 = v0[10];

  v8 = *(NSObject **)(v6 + 128);
  v9 = swift_allocObject(&unk_1010AD6D0, 32, 7);
  *(_QWORD *)(v9 + 16) = v6;
  *(_QWORD *)(v9 + 24) = v7;
  v10 = swift_allocObject(&unk_1010AD6F8, 32, 7);
  *(_QWORD *)(v10 + 16) = sub_100B1CED4;
  *(_QWORD *)(v10 + 24) = v9;
  v0[6] = sub_10001D850;
  v0[7] = v10;
  v0[2] = _NSConcreteStackBlock;
  v0[3] = 1107296256;
  v0[4] = sub_10001D8B8;
  v0[5] = &unk_1010AD710;
  v11 = _Block_copy(v0 + 2);
  swift_retain();
  v12 = v7;
  swift_retain();
  swift_release();
  dispatch_sync(v8, v11);
  _Block_release(v11);
  LOBYTE(v8) = swift_isEscapingClosureAtFileLocation(v10, "", 127, 95, 27, 1);
  swift_release();
  result = swift_release();
  if ((v8 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    if (*(_QWORD *)(v0[10] + 152))
    {
      swift_retain();
      sub_1007C1C90();
      swift_release();
    }
    else
    {
      type metadata accessor for SPLocalFindableConnectionMaterialMonitoringSessionError(0);
      v15 = v14;
      v0[8] = 1;
      v16 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
      v17 = sub_100006C64((unint64_t *)&qword_1010EB240, 255, (uint64_t (*)(uint64_t))type metadata accessor for SPLocalFindableConnectionMaterialMonitoringSessionError, (uint64_t)&unk_100E20D8C);
      v18 = _BridgedStoredNSError.init(_:userInfo:)(v0 + 2, v0 + 8, v16, v15, v17);
      swift_willThrow(v18);
    }
    return ((uint64_t (*)(void))v0[1])();
  }
  return result;
}

uint64_t sub_100B1C50C()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 32) = v0;
  return swift_task_switch(sub_100B1C524, v0, 0);
}

uint64_t sub_100B1C524()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t (*v13)(void);
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;

  if (qword_1010EA1E0 != -1)
    swift_once(&qword_1010EA1E0, sub_100B1AEFC);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_10001A9E8(v1, (uint64_t)qword_1011B7C90);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "AccessoryDiscoveryService.stopCharacteristicsMonitoring", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v6 = v0[4];

  v7 = *(_QWORD *)(v6 + 152);
  if (v7)
  {
    v8 = qword_1010E9F50;
    swift_retain();
    if (v8 != -1)
      swift_once(&qword_1010E9F50, sub_1007C1C00);
    v9 = sub_10001A9E8(v1, (uint64_t)qword_1011B77A8);
    v10 = Logger.logObject.getter(v9);
    v11 = static os_log_type_t.default.getter(v10);
    if (os_log_type_enabled(v10, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "TRACE: stopMonitoring()", v12, 2u);
      swift_slowDealloc(v12, -1, -1);
    }

    if (*(_QWORD *)(v7 + 40))
    {
      swift_retain();
      sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
      Task.cancel()();
      swift_release();
    }
    swift_release();
    v13 = (uint64_t (*)(void))v0[1];
  }
  else
  {
    type metadata accessor for SPLocalFindableConnectionMaterialMonitoringSessionError(0);
    v15 = v14;
    v0[3] = 1;
    v16 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
    v17 = sub_100006C64((unint64_t *)&qword_1010EB240, 255, (uint64_t (*)(uint64_t))type metadata accessor for SPLocalFindableConnectionMaterialMonitoringSessionError, (uint64_t)aE_60);
    v18 = _BridgedStoredNSError.init(_:userInfo:)(v0 + 2, v0 + 3, v16, v15, v17);
    swift_willThrow(v18);
    v13 = (uint64_t (*)(void))v0[1];
  }
  return v13();
}

uint64_t sub_100B1C79C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2[17] = a1;
  v2[18] = v1;
  v3 = sub_10001A9A8((uint64_t *)&unk_1010EDC50);
  v2[19] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for LocalFindableAccessoryRecord(0);
  v2[20] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v2[21] = v5;
  v2[22] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100B1C820, v1, 0);
}

uint64_t sub_100B1C820()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  _QWORD *v3;
  uint64_t (__cdecl *v4)();

  v1 = qword_1010EA5B0;
  swift_retain();
  if (v1 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v0 + 96, 0, 0);
  result = sub_10008180C((uint64_t)&xmmword_10111E6C0, v0 + 56);
  if (*(_QWORD *)(v0 + 80))
  {
    sub_10000F9FC((__int128 *)(v0 + 56), v0 + 16);
    swift_release();
    sub_10001AA44((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
    v4 = (uint64_t (__cdecl *)())((char *)&dword_1010EBC30 + dword_1010EBC30);
    v3 = (_QWORD *)swift_task_alloc(unk_1010EBC34);
    *(_QWORD *)(v0 + 184) = v3;
    *v3 = v0;
    v3[1] = sub_100B1C918;
    return v4();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100B1C918(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 184);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 144);
  *(_QWORD *)(*(_QWORD *)v1 + 192) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100B1C978, v3, 0);
}

uint64_t sub_100B1C978()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 192);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
  if (v1)
    return swift_task_switch(sub_100B1CA40, *(_QWORD *)(v0 + 192), 0);
  v3 = sub_100033220();
  v4 = swift_allocError(&type metadata for DaemonError, v3, 0, 0);
  *v5 = 0xD000000000000013;
  v5[1] = 0x8000000100ED7110;
  swift_willThrow(v4);
  v6 = *(_QWORD *)(v0 + 152);
  swift_task_dealloc(*(_QWORD *)(v0 + 176));
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v4, 1);
}

uint64_t sub_100B1CA40()
{
  uint64_t *v0;
  uint64_t **v1;

  v1 = (uint64_t **)swift_task_alloc(dword_10110CD9C);
  v0[25] = (uint64_t)v1;
  *v1 = v0;
  v1[1] = (uint64_t *)sub_100B1CA98;
  return sub_1008FBBC8(v0[19], v0[17]);
}

uint64_t sub_100B1CA98()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 200);
  *(_QWORD *)(*v1 + 208) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_100B1CCFC;
  else
    v4 = sub_100B1CAFC;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 144), 0);
}

uint64_t sub_100B1CAFC()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  Class isa;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  Class v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  Class v19;
  _BOOL8 v20;
  uint64_t v21;

  v1 = *(_QWORD *)(v0 + 152);
  v2 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 168) + 48))(v1, 1, *(_QWORD *)(v0 + 160));
  if (v2 == 1)
  {
    sub_100B1CE4C(v1);
    type metadata accessor for SPOwnerSessionError(0);
    v4 = v3;
    *(_QWORD *)(v0 + 128) = 2;
    v5 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
    v6 = sub_100006C64(&qword_1010EB250, 255, (uint64_t (*)(uint64_t))type metadata accessor for SPOwnerSessionError, (uint64_t)&unk_100E21DB4);
    _BridgedStoredNSError.init(_:userInfo:)((_QWORD *)(v0 + 120), v0 + 128, v5, v4, v6);
    swift_release();
    v7 = *(id *)(v0 + 120);
  }
  else
  {
    v8 = *(_QWORD *)(v0 + 176);
    sub_100B1CE8C(v1, v8);
    v7 = objc_msgSend(objc_allocWithZone((Class)SPPeripheralConnectionMaterial), "init");
    type metadata accessor for PeripheralConnectionMaterial(0);
    isa = Data._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v7, "setIrkData:", isa);

    v11 = MACAddress.data.getter(v10);
    v13 = v12;
    v14 = Data._bridgeToObjectiveC()().super.isa;
    sub_10001BC14(v11, v13);
    objc_msgSend(v7, "setBtAddressData:", v14);

    v16 = MACAddress.bluetoothAddressWithType.getter(v15);
    v18 = v17;
    v19 = Data._bridgeToObjectiveC()().super.isa;
    sub_10001BC14(v16, v18);
    objc_msgSend(v7, "setBtAddressWithTypeData:", v19);

    swift_release();
    sub_1007C340C(v8);
  }
  v20 = v2 == 1;
  v21 = *(_QWORD *)(v0 + 152);
  swift_task_dealloc(*(_QWORD *)(v0 + 176));
  swift_task_dealloc(v21);
  return (*(uint64_t (**)(id, _BOOL8))(v0 + 8))(v7, v20);
}

uint64_t sub_100B1CCFC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_release(*(_QWORD *)(v0 + 192));
  v1 = *(_QWORD *)(v0 + 208);
  v2 = *(_QWORD *)(v0 + 152);
  swift_task_dealloc(*(_QWORD *)(v0 + 176));
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v1, 1);
}

uint64_t sub_100B1CD50()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 120));

  swift_release(*(_QWORD *)(v0 + 136));
  swift_release(*(_QWORD *)(v0 + 152));
  swift_defaultActor_destroy(v0);
  return swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for LocalFindableConnectionMaterialService()
{
  return objc_opt_self(_TtC12searchpartyd38LocalFindableConnectionMaterialService);
}

uint64_t sub_100B1CDB4()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v2 = (_QWORD *)swift_task_alloc(dword_101115084);
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = sub_100004C28;
  v2[8] = v0;
  return swift_task_switch(sub_100B1B368, v0, 0);
}

uint64_t sub_100B1CE10(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = sub_100006C64((unint64_t *)&unk_1011151D0, a2, (uint64_t (*)(uint64_t))type metadata accessor for LocalFindableConnectionMaterialService, (uint64_t)&unk_100E60084);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_100B1CE4C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10001A9A8((uint64_t *)&unk_1010EDC50);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100B1CE8C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for LocalFindableAccessoryRecord(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100B1CED4()
{
  uint64_t v0;

  return sub_100B1BC6C(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_100B1CEDC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

void sub_100B1CEF0()
{
  uint64_t v0;

  sub_10032A780(*(uint64_t **)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_100B1CEF8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100B1CF0C()
{
  uint64_t v0;

  return sub_100B1BF4C(*(void **)(v0 + 24));
}

uint64_t sub_100B1CF30()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100B1CF44()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100B1CF54()
{
  uint64_t v0;

  return sub_100B1B480(v0);
}

uint64_t sub_100B1CF5C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100B1CF78(void *a1)
{
  uint64_t v2;
  NSObject *v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  NSObject **v7;
  NSObject *v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  NSObject *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  NSObject **v16;
  NSObject *v17;
  uint64_t v18;
  NSObject *v20;
  uint64_t v21;

  if (qword_1010EA1E0 != -1)
    swift_once(&qword_1010EA1E0, sub_100B1AEFC);
  v2 = type metadata accessor for Logger(0);
  sub_10001A9E8(v2, (uint64_t)qword_1011B7C90);
  v3 = a1;
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = (NSObject **)swift_slowAlloc(8, -1);
    *(_DWORD *)v6 = 138412290;
    v20 = v3;
    v8 = v3;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, &v21, v6 + 4, v6 + 12);
    *v7 = v3;

    _os_log_impl((void *)&_mh_execute_header, v4, v5, "shouldAccept: %@", v6, 0xCu);
    v9 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v7, 1, v9);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);

  }
  else
  {

  }
  v10 = sub_100B1D240();
  v11 = NSXPCConnection.hasEntitlement<A>(_:)(v10, &type metadata for LocalFindableConnectionMaterialEntitlement, v10);
  if ((v11 & 1) == 0)
  {
    v12 = v3;
    v13 = Logger.logObject.getter(v12);
    v14 = static os_log_type_t.error.getter(v13);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = (uint8_t *)swift_slowAlloc(12, -1);
      v16 = (NSObject **)swift_slowAlloc(8, -1);
      *(_DWORD *)v15 = 138412290;
      v20 = v12;
      v17 = v12;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, &v21, v15 + 4, v15 + 12);
      *v16 = v12;

      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Missing entitlement: %@", v15, 0xCu);
      v18 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
      swift_arrayDestroy(v16, 1, v18);
      swift_slowDealloc(v16, -1, -1);
      swift_slowDealloc(v15, -1, -1);
    }
    else
    {

      v13 = v12;
    }

  }
  return v11 & 1;
}

unint64_t sub_100B1D240()
{
  unint64_t result;

  result = qword_1011151E0;
  if (!qword_1011151E0)
  {
    result = swift_getWitnessTable(byte_100E6017C, &type metadata for LocalFindableConnectionMaterialEntitlement);
    atomic_store(result, &qword_1011151E0);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for LocalFindableConnectionMaterialEntitlement(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_100B1D2C4 + 4 * byte_100E5FFF0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_100B1D2E4 + 4 * byte_100E5FFF5[v4]))();
}

_BYTE *sub_100B1D2C4(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_100B1D2E4(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100B1D2EC(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100B1D2F4(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100B1D2FC(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100B1D304(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for LocalFindableConnectionMaterialEntitlement()
{
  return &type metadata for LocalFindableConnectionMaterialEntitlement;
}

unint64_t sub_100B1D324()
{
  unint64_t result;

  result = qword_1011151F0;
  if (!qword_1011151F0)
  {
    result = swift_getWitnessTable(byte_100E60154, &type metadata for LocalFindableConnectionMaterialEntitlement);
    atomic_store(result, (unint64_t *)&qword_1011151F0);
  }
  return result;
}

unint64_t sub_100B1D36C()
{
  unint64_t result;

  result = qword_1011151F8;
  if (!qword_1011151F8)
  {
    result = swift_getWitnessTable(byte_100E600DC, &type metadata for LocalFindableConnectionMaterialEntitlement);
    atomic_store(result, (unint64_t *)&qword_1011151F8);
  }
  return result;
}

uint64_t sub_100B1D3D4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v1 = type metadata accessor for String.Encoding(0);
  v0[5] = v1;
  v2 = *(_QWORD *)(v1 - 8);
  v0[6] = v2;
  v0[7] = swift_task_alloc((*(_QWORD *)(v2 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_10001A9A8(&qword_101115228);
  v4 = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v0[8] = v4;
  v5 = type metadata accessor for SearchpartyAccount(0);
  v0[9] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v0[10] = v6;
  v0[11] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (_QWORD *)swift_task_alloc(async function pointer to static AppleAccount.searchpartyAccount.getter[1]);
  v0[12] = v7;
  *v7 = v0;
  v7[1] = sub_100B1D49C;
  return static AppleAccount.searchpartyAccount.getter(v4);
}

uint64_t sub_100B1D49C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 96);
  *(_QWORD *)(*(_QWORD *)v1 + 104) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_100B1D7EC;
  else
    v3 = sub_100B1D500;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_100B1D500()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;

  v1 = *(_QWORD *)(v0 + 72);
  v2 = *(_QWORD *)(v0 + 80);
  v3 = *(_QWORD *)(v0 + 64);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_100004048(v3, &qword_101115228);
  }
  else
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v2 + 32))(*(_QWORD *)(v0 + 88), v3, v1);
    v4 = RequestCredential.authHeaders.getter(v1, &protocol witness table for SearchpartyAccount);
    if (*(_QWORD *)(v4 + 16) && (v5 = sub_100518DA0(0x7A69726F68747541, 0xED00006E6F697461), (v6 & 1) != 0))
    {
      v8 = *(_QWORD *)(v0 + 80);
      v7 = *(_QWORD *)(v0 + 88);
      v9 = *(_QWORD *)(v0 + 72);
      v11 = *(_QWORD *)(v0 + 48);
      v10 = *(_QWORD *)(v0 + 56);
      v12 = *(_QWORD *)(v0 + 40);
      v13 = (uint64_t *)(*(_QWORD *)(v4 + 56) + 16 * v5);
      v14 = *v13;
      v15 = v13[1];
      swift_bridgeObjectRetain(v15);
      v16 = swift_bridgeObjectRelease();
      static String.Encoding.utf8.getter(v16);
      v17 = String.data(using:allowLossyConversion:)(v10, 0, v14, v15);
      v19 = v18;
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
      (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
      if (v19 >> 60 != 15)
        goto LABEL_13;
    }
    else
    {
      v21 = *(_QWORD *)(v0 + 80);
      v20 = *(_QWORD *)(v0 + 88);
      v22 = *(_QWORD *)(v0 + 72);
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v20, v22);
    }
  }
  if (qword_1010EA3F0 != -1)
    swift_once(&qword_1010EA3F0, sub_100C24310);
  v23 = type metadata accessor for Logger(0);
  v24 = sub_10001A9E8(v23, (uint64_t)qword_1011B7EF8);
  v25 = Logger.logObject.getter(v24);
  v26 = static os_log_type_t.error.getter(v25);
  if (os_log_type_enabled(v25, v26))
  {
    v27 = (uint8_t *)swift_slowAlloc(12, -1);
    v28 = swift_slowAlloc(32, -1);
    v32 = v28;
    *(_DWORD *)v27 = 136446210;
    *(_QWORD *)(v0 + 32) = sub_100016940(0xD000000000000010, 0x8000000100EEF250, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v27 + 4, v27 + 12);
    _os_log_impl((void *)&_mh_execute_header, v25, v26, "%{public}s Could not read credential data.", v27, 0xCu);
    swift_arrayDestroy(v28, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v28, -1, -1);
    swift_slowDealloc(v27, -1, -1);
  }

  v17 = 0;
  v19 = 0xC000000000000000;
LABEL_13:
  v30 = *(_QWORD *)(v0 + 56);
  v29 = *(_QWORD *)(v0 + 64);
  swift_task_dealloc(*(_QWORD *)(v0 + 88));
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  return (*(uint64_t (**)(uint64_t, unint64_t))(v0 + 8))(v17, v19);
}

uint64_t sub_100B1D7EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  if (qword_1010EA3F0 != -1)
    swift_once(&qword_1010EA3F0, sub_100C24310);
  v1 = *(_QWORD *)(v0 + 104);
  v2 = type metadata accessor for Logger(0);
  sub_10001A9E8(v2, (uint64_t)qword_1011B7EF8);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter(v4);
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 104);
  if (v6)
  {
    v8 = swift_slowAlloc(22, -1);
    v9 = (uint64_t *)swift_slowAlloc(8, -1);
    v10 = swift_slowAlloc(32, -1);
    v16 = v10;
    *(_DWORD *)v8 = 136446466;
    *(_QWORD *)(v0 + 16) = sub_100016940(0xD000000000000010, 0x8000000100EEF250, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v8 + 4, v8 + 12);
    *(_WORD *)(v8 + 12) = 2114;
    swift_errorRetain(v7);
    v11 = _swift_stdlib_bridgeErrorToNSError(v7);
    *(_QWORD *)(v0 + 24) = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v8 + 14, v8 + 22);
    *v9 = v11;
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "%{public}s Cannot get authorization header %{public}@.", (uint8_t *)v8, 0x16u);
    v12 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v9, 1, v12);
    swift_slowDealloc(v9, -1, -1);
    swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 104));
    swift_errorRelease(v7);
  }

  swift_errorRelease(v7);
  v13 = *(_QWORD *)(v0 + 56);
  v14 = *(_QWORD *)(v0 + 64);
  swift_task_dealloc(*(_QWORD *)(v0 + 88));
  swift_task_dealloc(v14);
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(_QWORD, unint64_t))(v0 + 8))(0, 0xC000000000000000);
}

uint64_t sub_100B1DA4C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v1 = type metadata accessor for String.Encoding(0);
  v0[5] = v1;
  v2 = *(_QWORD *)(v1 - 8);
  v0[6] = v2;
  v0[7] = swift_task_alloc((*(_QWORD *)(v2 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_10001A9A8(&qword_101115228);
  v4 = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v0[8] = v4;
  v5 = type metadata accessor for SearchpartyAccount(0);
  v0[9] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v0[10] = v6;
  v0[11] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (_QWORD *)swift_task_alloc(async function pointer to static AppleAccount.searchpartyAccount.getter[1]);
  v0[12] = v7;
  *v7 = v0;
  v7[1] = sub_100B1DB14;
  return static AppleAccount.searchpartyAccount.getter(v4);
}

uint64_t sub_100B1DB14()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 96);
  *(_QWORD *)(*(_QWORD *)v1 + 104) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_100B1DE64;
  else
    v3 = sub_100B1DB78;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_100B1DB78()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;

  v1 = *(_QWORD *)(v0 + 72);
  v2 = *(_QWORD *)(v0 + 80);
  v3 = *(_QWORD *)(v0 + 64);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_100004048(v3, &qword_101115228);
  }
  else
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v2 + 32))(*(_QWORD *)(v0 + 88), v3, v1);
    v4 = RequestCredential.authHeaders.getter(v1, &protocol witness table for SearchpartyAccount);
    if (*(_QWORD *)(v4 + 16) && (v5 = sub_100518DA0(0x7A69726F68747541, 0xED00006E6F697461), (v6 & 1) != 0))
    {
      v8 = *(_QWORD *)(v0 + 80);
      v7 = *(_QWORD *)(v0 + 88);
      v9 = *(_QWORD *)(v0 + 72);
      v11 = *(_QWORD *)(v0 + 48);
      v10 = *(_QWORD *)(v0 + 56);
      v12 = *(_QWORD *)(v0 + 40);
      v13 = (uint64_t *)(*(_QWORD *)(v4 + 56) + 16 * v5);
      v14 = *v13;
      v15 = v13[1];
      swift_bridgeObjectRetain(v15);
      v16 = swift_bridgeObjectRelease();
      static String.Encoding.utf8.getter(v16);
      v17 = String.data(using:allowLossyConversion:)(v10, 0, v14, v15);
      v19 = v18;
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
      (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
      if (v19 >> 60 != 15)
        goto LABEL_13;
    }
    else
    {
      v21 = *(_QWORD *)(v0 + 80);
      v20 = *(_QWORD *)(v0 + 88);
      v22 = *(_QWORD *)(v0 + 72);
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v20, v22);
    }
  }
  if (qword_1010EA3F0 != -1)
    swift_once(&qword_1010EA3F0, sub_100C24310);
  v23 = type metadata accessor for Logger(0);
  v24 = sub_10001A9E8(v23, (uint64_t)qword_1011B7EF8);
  v25 = Logger.logObject.getter(v24);
  v26 = static os_log_type_t.error.getter(v25);
  if (os_log_type_enabled(v25, v26))
  {
    v27 = (uint8_t *)swift_slowAlloc(12, -1);
    v28 = swift_slowAlloc(32, -1);
    v32 = v28;
    *(_DWORD *)v27 = 136446210;
    *(_QWORD *)(v0 + 32) = sub_100016940(0xD00000000000001ELL, 0x8000000100EEF2E0, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v27 + 4, v27 + 12);
    _os_log_impl((void *)&_mh_execute_header, v25, v26, "%{public}s Could not read credential data.", v27, 0xCu);
    swift_arrayDestroy(v28, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v28, -1, -1);
    swift_slowDealloc(v27, -1, -1);
  }

  v17 = 0;
  v19 = 0xC000000000000000;
LABEL_13:
  v30 = *(_QWORD *)(v0 + 56);
  v29 = *(_QWORD *)(v0 + 64);
  swift_task_dealloc(*(_QWORD *)(v0 + 88));
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  return (*(uint64_t (**)(uint64_t, unint64_t))(v0 + 8))(v17, v19);
}

uint64_t sub_100B1DE64()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  if (qword_1010EA3F0 != -1)
    swift_once(&qword_1010EA3F0, sub_100C24310);
  v1 = *(_QWORD *)(v0 + 104);
  v2 = type metadata accessor for Logger(0);
  sub_10001A9E8(v2, (uint64_t)qword_1011B7EF8);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter(v4);
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 104);
  if (v6)
  {
    v8 = swift_slowAlloc(22, -1);
    v9 = (uint64_t *)swift_slowAlloc(8, -1);
    v10 = swift_slowAlloc(32, -1);
    v16 = v10;
    *(_DWORD *)v8 = 136446466;
    *(_QWORD *)(v0 + 16) = sub_100016940(0xD00000000000001ELL, 0x8000000100EEF2E0, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v8 + 4, v8 + 12);
    *(_WORD *)(v8 + 12) = 2114;
    swift_errorRetain(v7);
    v11 = _swift_stdlib_bridgeErrorToNSError(v7);
    *(_QWORD *)(v0 + 24) = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v8 + 14, v8 + 22);
    *v9 = v11;
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "%{public}s Cannot get authorization header %{public}@.", (uint8_t *)v8, 0x16u);
    v12 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v9, 1, v12);
    swift_slowDealloc(v9, -1, -1);
    swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 104));
    swift_errorRelease(v7);
  }

  swift_errorRelease(v7);
  v13 = *(_QWORD *)(v0 + 56);
  v14 = *(_QWORD *)(v0 + 64);
  swift_task_dealloc(*(_QWORD *)(v0 + 88));
  swift_task_dealloc(v14);
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(_QWORD, unint64_t))(v0 + 8))(0, 0xC000000000000000);
}

uint64_t sub_100B1E0C4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v1 = type metadata accessor for String.Encoding(0);
  v0[5] = v1;
  v2 = *(_QWORD *)(v1 - 8);
  v0[6] = v2;
  v0[7] = swift_task_alloc((*(_QWORD *)(v2 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_10001A9A8(&qword_101115228);
  v4 = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v0[8] = v4;
  v5 = type metadata accessor for SearchpartyAccount(0);
  v0[9] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v0[10] = v6;
  v0[11] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (_QWORD *)swift_task_alloc(async function pointer to static AppleAccount.searchpartyAccount.getter[1]);
  v0[12] = v7;
  *v7 = v0;
  v7[1] = sub_100B1E18C;
  return static AppleAccount.searchpartyAccount.getter(v4);
}

uint64_t sub_100B1E18C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 96);
  *(_QWORD *)(*(_QWORD *)v1 + 104) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_100B1E4DC;
  else
    v3 = sub_100B1E1F0;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_100B1E1F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;

  v1 = *(_QWORD *)(v0 + 72);
  v2 = *(_QWORD *)(v0 + 80);
  v3 = *(_QWORD *)(v0 + 64);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_100004048(v3, &qword_101115228);
  }
  else
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v2 + 32))(*(_QWORD *)(v0 + 88), v3, v1);
    v4 = RequestCredential.authHeaders.getter(v1, &protocol witness table for SearchpartyAccount);
    if (*(_QWORD *)(v4 + 16) && (v5 = sub_100518DA0(0x7A69726F68747541, 0xED00006E6F697461), (v6 & 1) != 0))
    {
      v8 = *(_QWORD *)(v0 + 80);
      v7 = *(_QWORD *)(v0 + 88);
      v9 = *(_QWORD *)(v0 + 72);
      v11 = *(_QWORD *)(v0 + 48);
      v10 = *(_QWORD *)(v0 + 56);
      v12 = *(_QWORD *)(v0 + 40);
      v13 = (uint64_t *)(*(_QWORD *)(v4 + 56) + 16 * v5);
      v14 = *v13;
      v15 = v13[1];
      swift_bridgeObjectRetain(v15);
      v16 = swift_bridgeObjectRelease();
      static String.Encoding.utf8.getter(v16);
      v17 = String.data(using:allowLossyConversion:)(v10, 0, v14, v15);
      v19 = v18;
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
      (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
      if (v19 >> 60 != 15)
        goto LABEL_13;
    }
    else
    {
      v21 = *(_QWORD *)(v0 + 80);
      v20 = *(_QWORD *)(v0 + 88);
      v22 = *(_QWORD *)(v0 + 72);
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v20, v22);
    }
  }
  if (qword_1010EA3F0 != -1)
    swift_once(&qword_1010EA3F0, sub_100C24310);
  v23 = type metadata accessor for Logger(0);
  v24 = sub_10001A9E8(v23, (uint64_t)qword_1011B7EF8);
  v25 = Logger.logObject.getter(v24);
  v26 = static os_log_type_t.error.getter(v25);
  if (os_log_type_enabled(v25, v26))
  {
    v27 = (uint8_t *)swift_slowAlloc(12, -1);
    v28 = swift_slowAlloc(32, -1);
    v32 = v28;
    *(_DWORD *)v27 = 136446210;
    *(_QWORD *)(v0 + 32) = sub_100016940(0xD000000000000013, 0x8000000100E601C0, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v27 + 4, v27 + 12);
    _os_log_impl((void *)&_mh_execute_header, v25, v26, "%{public}s Could not read credential data.", v27, 0xCu);
    swift_arrayDestroy(v28, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v28, -1, -1);
    swift_slowDealloc(v27, -1, -1);
  }

  v17 = 0;
  v19 = 0xC000000000000000;
LABEL_13:
  v30 = *(_QWORD *)(v0 + 56);
  v29 = *(_QWORD *)(v0 + 64);
  swift_task_dealloc(*(_QWORD *)(v0 + 88));
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  return (*(uint64_t (**)(uint64_t, unint64_t))(v0 + 8))(v17, v19);
}

uint64_t sub_100B1E4DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  if (qword_1010EA3F0 != -1)
    swift_once(&qword_1010EA3F0, sub_100C24310);
  v1 = *(_QWORD *)(v0 + 104);
  v2 = type metadata accessor for Logger(0);
  sub_10001A9E8(v2, (uint64_t)qword_1011B7EF8);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter(v4);
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 104);
  if (v6)
  {
    v8 = swift_slowAlloc(22, -1);
    v9 = (uint64_t *)swift_slowAlloc(8, -1);
    v10 = swift_slowAlloc(32, -1);
    v16 = v10;
    *(_DWORD *)v8 = 136446466;
    *(_QWORD *)(v0 + 16) = sub_100016940(0xD000000000000013, 0x8000000100E601C0, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v8 + 4, v8 + 12);
    *(_WORD *)(v8 + 12) = 2114;
    swift_errorRetain(v7);
    v11 = _swift_stdlib_bridgeErrorToNSError(v7);
    *(_QWORD *)(v0 + 24) = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v8 + 14, v8 + 22);
    *v9 = v11;
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "%{public}s Cannot get authorization header %{public}@.", (uint8_t *)v8, 0x16u);
    v12 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v9, 1, v12);
    swift_slowDealloc(v9, -1, -1);
    swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 104));
    swift_errorRelease(v7);
  }

  swift_errorRelease(v7);
  v13 = *(_QWORD *)(v0 + 56);
  v14 = *(_QWORD *)(v0 + 64);
  swift_task_dealloc(*(_QWORD *)(v0 + 88));
  swift_task_dealloc(v14);
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(_QWORD, unint64_t))(v0 + 8))(0, 0xC000000000000000);
}

uint64_t sub_100B1E73C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v1 = type metadata accessor for String.Encoding(0);
  v0[5] = v1;
  v2 = *(_QWORD *)(v1 - 8);
  v0[6] = v2;
  v0[7] = swift_task_alloc((*(_QWORD *)(v2 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_10001A9A8(&qword_101115228);
  v4 = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v0[8] = v4;
  v5 = type metadata accessor for SearchpartyAccount(0);
  v0[9] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v0[10] = v6;
  v0[11] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (_QWORD *)swift_task_alloc(async function pointer to static AppleAccount.searchpartyAccount.getter[1]);
  v0[12] = v7;
  *v7 = v0;
  v7[1] = sub_100B1E804;
  return static AppleAccount.searchpartyAccount.getter(v4);
}

uint64_t sub_100B1E804()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 96);
  *(_QWORD *)(*(_QWORD *)v1 + 104) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_100B1EB54;
  else
    v3 = sub_100B1E868;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_100B1E868()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;

  v1 = *(_QWORD *)(v0 + 72);
  v2 = *(_QWORD *)(v0 + 80);
  v3 = *(_QWORD *)(v0 + 64);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_100004048(v3, &qword_101115228);
  }
  else
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v2 + 32))(*(_QWORD *)(v0 + 88), v3, v1);
    v4 = RequestCredential.authHeaders.getter(v1, &protocol witness table for SearchpartyAccount);
    if (*(_QWORD *)(v4 + 16) && (v5 = sub_100518DA0(0x7A69726F68747541, 0xED00006E6F697461), (v6 & 1) != 0))
    {
      v8 = *(_QWORD *)(v0 + 80);
      v7 = *(_QWORD *)(v0 + 88);
      v9 = *(_QWORD *)(v0 + 72);
      v11 = *(_QWORD *)(v0 + 48);
      v10 = *(_QWORD *)(v0 + 56);
      v12 = *(_QWORD *)(v0 + 40);
      v13 = (uint64_t *)(*(_QWORD *)(v4 + 56) + 16 * v5);
      v14 = *v13;
      v15 = v13[1];
      swift_bridgeObjectRetain(v15);
      v16 = swift_bridgeObjectRelease();
      static String.Encoding.utf8.getter(v16);
      v17 = String.data(using:allowLossyConversion:)(v10, 0, v14, v15);
      v19 = v18;
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
      (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
      if (v19 >> 60 != 15)
        goto LABEL_13;
    }
    else
    {
      v21 = *(_QWORD *)(v0 + 80);
      v20 = *(_QWORD *)(v0 + 88);
      v22 = *(_QWORD *)(v0 + 72);
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v20, v22);
    }
  }
  if (qword_1010EA3F0 != -1)
    swift_once(&qword_1010EA3F0, sub_100C24310);
  v23 = type metadata accessor for Logger(0);
  v24 = sub_10001A9E8(v23, (uint64_t)qword_1011B7EF8);
  v25 = Logger.logObject.getter(v24);
  v26 = static os_log_type_t.error.getter(v25);
  if (os_log_type_enabled(v25, v26))
  {
    v27 = (uint8_t *)swift_slowAlloc(12, -1);
    v28 = swift_slowAlloc(32, -1);
    v32 = v28;
    *(_DWORD *)v27 = 136446210;
    *(_QWORD *)(v0 + 32) = sub_100016940(0xD00000000000001DLL, 0x8000000100EEF140, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v27 + 4, v27 + 12);
    _os_log_impl((void *)&_mh_execute_header, v25, v26, "%{public}s Could not read credential data.", v27, 0xCu);
    swift_arrayDestroy(v28, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v28, -1, -1);
    swift_slowDealloc(v27, -1, -1);
  }

  v17 = 0;
  v19 = 0xC000000000000000;
LABEL_13:
  v30 = *(_QWORD *)(v0 + 56);
  v29 = *(_QWORD *)(v0 + 64);
  swift_task_dealloc(*(_QWORD *)(v0 + 88));
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  return (*(uint64_t (**)(uint64_t, unint64_t))(v0 + 8))(v17, v19);
}

uint64_t sub_100B1EB54()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  if (qword_1010EA3F0 != -1)
    swift_once(&qword_1010EA3F0, sub_100C24310);
  v1 = *(_QWORD *)(v0 + 104);
  v2 = type metadata accessor for Logger(0);
  sub_10001A9E8(v2, (uint64_t)qword_1011B7EF8);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter(v4);
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 104);
  if (v6)
  {
    v8 = swift_slowAlloc(22, -1);
    v9 = (uint64_t *)swift_slowAlloc(8, -1);
    v10 = swift_slowAlloc(32, -1);
    v16 = v10;
    *(_DWORD *)v8 = 136446466;
    *(_QWORD *)(v0 + 16) = sub_100016940(0xD00000000000001DLL, 0x8000000100EEF140, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v8 + 4, v8 + 12);
    *(_WORD *)(v8 + 12) = 2114;
    swift_errorRetain(v7);
    v11 = _swift_stdlib_bridgeErrorToNSError(v7);
    *(_QWORD *)(v0 + 24) = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v8 + 14, v8 + 22);
    *v9 = v11;
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "%{public}s Cannot get authorization header %{public}@.", (uint8_t *)v8, 0x16u);
    v12 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v9, 1, v12);
    swift_slowDealloc(v9, -1, -1);
    swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 104));
    swift_errorRelease(v7);
  }

  swift_errorRelease(v7);
  v13 = *(_QWORD *)(v0 + 56);
  v14 = *(_QWORD *)(v0 + 64);
  swift_task_dealloc(*(_QWORD *)(v0 + 88));
  swift_task_dealloc(v14);
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(_QWORD, unint64_t))(v0 + 8))(0, 0xC000000000000000);
}

uint64_t sub_100B1EDB4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v1 = type metadata accessor for String.Encoding(0);
  v0[5] = v1;
  v2 = *(_QWORD *)(v1 - 8);
  v0[6] = v2;
  v0[7] = swift_task_alloc((*(_QWORD *)(v2 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_10001A9A8(&qword_101115228);
  v4 = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v0[8] = v4;
  v5 = type metadata accessor for SearchpartyAccount(0);
  v0[9] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v0[10] = v6;
  v0[11] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (_QWORD *)swift_task_alloc(async function pointer to static AppleAccount.searchpartyAccount.getter[1]);
  v0[12] = v7;
  *v7 = v0;
  v7[1] = sub_100B1EE7C;
  return static AppleAccount.searchpartyAccount.getter(v4);
}

uint64_t sub_100B1EE7C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 96);
  *(_QWORD *)(*(_QWORD *)v1 + 104) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_100B1F1D4;
  else
    v3 = sub_100B1EEE0;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_100B1EEE0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;

  v1 = *(_QWORD *)(v0 + 72);
  v2 = *(_QWORD *)(v0 + 80);
  v3 = *(_QWORD *)(v0 + 64);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_100004048(v3, &qword_101115228);
  }
  else
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v2 + 32))(*(_QWORD *)(v0 + 88), v3, v1);
    v4 = RequestCredential.authHeaders.getter(v1, &protocol witness table for SearchpartyAccount);
    if (*(_QWORD *)(v4 + 16) && (v5 = sub_100518DA0(0x7A69726F68747541, 0xED00006E6F697461), (v6 & 1) != 0))
    {
      v8 = *(_QWORD *)(v0 + 80);
      v7 = *(_QWORD *)(v0 + 88);
      v9 = *(_QWORD *)(v0 + 72);
      v11 = *(_QWORD *)(v0 + 48);
      v10 = *(_QWORD *)(v0 + 56);
      v12 = *(_QWORD *)(v0 + 40);
      v13 = (uint64_t *)(*(_QWORD *)(v4 + 56) + 16 * v5);
      v14 = *v13;
      v15 = v13[1];
      swift_bridgeObjectRetain(v15);
      v16 = swift_bridgeObjectRelease();
      static String.Encoding.utf8.getter(v16);
      v17 = String.data(using:allowLossyConversion:)(v10, 0, v14, v15);
      v19 = v18;
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
      (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
      if (v19 >> 60 != 15)
        goto LABEL_13;
    }
    else
    {
      v21 = *(_QWORD *)(v0 + 80);
      v20 = *(_QWORD *)(v0 + 88);
      v22 = *(_QWORD *)(v0 + 72);
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v20, v22);
    }
  }
  if (qword_1010EA3F0 != -1)
    swift_once(&qword_1010EA3F0, sub_100C24310);
  v23 = type metadata accessor for Logger(0);
  v24 = sub_10001A9E8(v23, (uint64_t)qword_1011B7EF8);
  v25 = Logger.logObject.getter(v24);
  v26 = static os_log_type_t.error.getter(v25);
  if (os_log_type_enabled(v25, v26))
  {
    v27 = (uint8_t *)swift_slowAlloc(12, -1);
    v28 = swift_slowAlloc(32, -1);
    v32 = v28;
    *(_DWORD *)v27 = 136446210;
    *(_QWORD *)(v0 + 32) = sub_100016940(0x654D796669746F4ELL, 0xEF74736575716552, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v27 + 4, v27 + 12);
    _os_log_impl((void *)&_mh_execute_header, v25, v26, "%{public}s Could not read credential data.", v27, 0xCu);
    swift_arrayDestroy(v28, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v28, -1, -1);
    swift_slowDealloc(v27, -1, -1);
  }

  v17 = 0;
  v19 = 0xC000000000000000;
LABEL_13:
  v30 = *(_QWORD *)(v0 + 56);
  v29 = *(_QWORD *)(v0 + 64);
  swift_task_dealloc(*(_QWORD *)(v0 + 88));
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  return (*(uint64_t (**)(uint64_t, unint64_t))(v0 + 8))(v17, v19);
}

uint64_t sub_100B1F1D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  if (qword_1010EA3F0 != -1)
    swift_once(&qword_1010EA3F0, sub_100C24310);
  v1 = *(_QWORD *)(v0 + 104);
  v2 = type metadata accessor for Logger(0);
  sub_10001A9E8(v2, (uint64_t)qword_1011B7EF8);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter(v4);
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 104);
  if (v6)
  {
    v8 = swift_slowAlloc(22, -1);
    v9 = (uint64_t *)swift_slowAlloc(8, -1);
    v10 = swift_slowAlloc(32, -1);
    v16 = v10;
    *(_DWORD *)v8 = 136446466;
    *(_QWORD *)(v0 + 16) = sub_100016940(0x654D796669746F4ELL, 0xEF74736575716552, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v8 + 4, v8 + 12);
    *(_WORD *)(v8 + 12) = 2114;
    swift_errorRetain(v7);
    v11 = _swift_stdlib_bridgeErrorToNSError(v7);
    *(_QWORD *)(v0 + 24) = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v8 + 14, v8 + 22);
    *v9 = v11;
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "%{public}s Cannot get authorization header %{public}@.", (uint8_t *)v8, 0x16u);
    v12 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v9, 1, v12);
    swift_slowDealloc(v9, -1, -1);
    swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 104));
    swift_errorRelease(v7);
  }

  swift_errorRelease(v7);
  v13 = *(_QWORD *)(v0 + 56);
  v14 = *(_QWORD *)(v0 + 64);
  swift_task_dealloc(*(_QWORD *)(v0 + 88));
  swift_task_dealloc(v14);
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(_QWORD, unint64_t))(v0 + 8))(0, 0xC000000000000000);
}

uint64_t sub_100B1F43C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v1 = type metadata accessor for String.Encoding(0);
  v0[5] = v1;
  v2 = *(_QWORD *)(v1 - 8);
  v0[6] = v2;
  v0[7] = swift_task_alloc((*(_QWORD *)(v2 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_10001A9A8(&qword_101115228);
  v4 = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v0[8] = v4;
  v5 = type metadata accessor for SearchpartyAccount(0);
  v0[9] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v0[10] = v6;
  v0[11] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (_QWORD *)swift_task_alloc(async function pointer to static AppleAccount.searchpartyAccount.getter[1]);
  v0[12] = v7;
  *v7 = v0;
  v7[1] = sub_100B1F504;
  return static AppleAccount.searchpartyAccount.getter(v4);
}

uint64_t sub_100B1F504()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 96);
  *(_QWORD *)(*(_QWORD *)v1 + 104) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_100B1F854;
  else
    v3 = sub_100B1F568;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_100B1F568()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;

  v1 = *(_QWORD *)(v0 + 72);
  v2 = *(_QWORD *)(v0 + 80);
  v3 = *(_QWORD *)(v0 + 64);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_100004048(v3, &qword_101115228);
  }
  else
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v2 + 32))(*(_QWORD *)(v0 + 88), v3, v1);
    v4 = RequestCredential.authHeaders.getter(v1, &protocol witness table for SearchpartyAccount);
    if (*(_QWORD *)(v4 + 16) && (v5 = sub_100518DA0(0x7A69726F68747541, 0xED00006E6F697461), (v6 & 1) != 0))
    {
      v8 = *(_QWORD *)(v0 + 80);
      v7 = *(_QWORD *)(v0 + 88);
      v9 = *(_QWORD *)(v0 + 72);
      v11 = *(_QWORD *)(v0 + 48);
      v10 = *(_QWORD *)(v0 + 56);
      v12 = *(_QWORD *)(v0 + 40);
      v13 = (uint64_t *)(*(_QWORD *)(v4 + 56) + 16 * v5);
      v14 = *v13;
      v15 = v13[1];
      swift_bridgeObjectRetain(v15);
      v16 = swift_bridgeObjectRelease();
      static String.Encoding.utf8.getter(v16);
      v17 = String.data(using:allowLossyConversion:)(v10, 0, v14, v15);
      v19 = v18;
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
      (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
      if (v19 >> 60 != 15)
        goto LABEL_13;
    }
    else
    {
      v21 = *(_QWORD *)(v0 + 80);
      v20 = *(_QWORD *)(v0 + 88);
      v22 = *(_QWORD *)(v0 + 72);
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v20, v22);
    }
  }
  if (qword_1010EA3F0 != -1)
    swift_once(&qword_1010EA3F0, sub_100C24310);
  v23 = type metadata accessor for Logger(0);
  v24 = sub_10001A9E8(v23, (uint64_t)qword_1011B7EF8);
  v25 = Logger.logObject.getter(v24);
  v26 = static os_log_type_t.error.getter(v25);
  if (os_log_type_enabled(v25, v26))
  {
    v27 = (uint8_t *)swift_slowAlloc(12, -1);
    v28 = swift_slowAlloc(32, -1);
    v32 = v28;
    *(_DWORD *)v27 = 136446210;
    *(_QWORD *)(v0 + 32) = sub_100016940(0xD00000000000001CLL, 0x8000000100EEF230, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v27 + 4, v27 + 12);
    _os_log_impl((void *)&_mh_execute_header, v25, v26, "%{public}s Could not read credential data.", v27, 0xCu);
    swift_arrayDestroy(v28, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v28, -1, -1);
    swift_slowDealloc(v27, -1, -1);
  }

  v17 = 0;
  v19 = 0xC000000000000000;
LABEL_13:
  v30 = *(_QWORD *)(v0 + 56);
  v29 = *(_QWORD *)(v0 + 64);
  swift_task_dealloc(*(_QWORD *)(v0 + 88));
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  return (*(uint64_t (**)(uint64_t, unint64_t))(v0 + 8))(v17, v19);
}

uint64_t sub_100B1F854()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  if (qword_1010EA3F0 != -1)
    swift_once(&qword_1010EA3F0, sub_100C24310);
  v1 = *(_QWORD *)(v0 + 104);
  v2 = type metadata accessor for Logger(0);
  sub_10001A9E8(v2, (uint64_t)qword_1011B7EF8);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter(v4);
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 104);
  if (v6)
  {
    v8 = swift_slowAlloc(22, -1);
    v9 = (uint64_t *)swift_slowAlloc(8, -1);
    v10 = swift_slowAlloc(32, -1);
    v16 = v10;
    *(_DWORD *)v8 = 136446466;
    *(_QWORD *)(v0 + 16) = sub_100016940(0xD00000000000001CLL, 0x8000000100EEF230, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v8 + 4, v8 + 12);
    *(_WORD *)(v8 + 12) = 2114;
    swift_errorRetain(v7);
    v11 = _swift_stdlib_bridgeErrorToNSError(v7);
    *(_QWORD *)(v0 + 24) = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v8 + 14, v8 + 22);
    *v9 = v11;
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "%{public}s Cannot get authorization header %{public}@.", (uint8_t *)v8, 0x16u);
    v12 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v9, 1, v12);
    swift_slowDealloc(v9, -1, -1);
    swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 104));
    swift_errorRelease(v7);
  }

  swift_errorRelease(v7);
  v13 = *(_QWORD *)(v0 + 56);
  v14 = *(_QWORD *)(v0 + 64);
  swift_task_dealloc(*(_QWORD *)(v0 + 88));
  swift_task_dealloc(v14);
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(_QWORD, unint64_t))(v0 + 8))(0, 0xC000000000000000);
}

uint64_t sub_100B1FAB4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v1 = type metadata accessor for String.Encoding(0);
  v0[5] = v1;
  v2 = *(_QWORD *)(v1 - 8);
  v0[6] = v2;
  v0[7] = swift_task_alloc((*(_QWORD *)(v2 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_10001A9A8(&qword_101115228);
  v4 = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v0[8] = v4;
  v5 = type metadata accessor for SearchpartyAccount(0);
  v0[9] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v0[10] = v6;
  v0[11] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (_QWORD *)swift_task_alloc(async function pointer to static AppleAccount.searchpartyAccount.getter[1]);
  v0[12] = v7;
  *v7 = v0;
  v7[1] = sub_100B1FB7C;
  return static AppleAccount.searchpartyAccount.getter(v4);
}

uint64_t sub_100B1FB7C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 96);
  *(_QWORD *)(*(_QWORD *)v1 + 104) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_100B1FECC;
  else
    v3 = sub_100B1FBE0;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_100B1FBE0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;

  v1 = *(_QWORD *)(v0 + 72);
  v2 = *(_QWORD *)(v0 + 80);
  v3 = *(_QWORD *)(v0 + 64);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_100004048(v3, &qword_101115228);
  }
  else
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v2 + 32))(*(_QWORD *)(v0 + 88), v3, v1);
    v4 = RequestCredential.authHeaders.getter(v1, &protocol witness table for SearchpartyAccount);
    if (*(_QWORD *)(v4 + 16) && (v5 = sub_100518DA0(0x7A69726F68747541, 0xED00006E6F697461), (v6 & 1) != 0))
    {
      v8 = *(_QWORD *)(v0 + 80);
      v7 = *(_QWORD *)(v0 + 88);
      v9 = *(_QWORD *)(v0 + 72);
      v11 = *(_QWORD *)(v0 + 48);
      v10 = *(_QWORD *)(v0 + 56);
      v12 = *(_QWORD *)(v0 + 40);
      v13 = (uint64_t *)(*(_QWORD *)(v4 + 56) + 16 * v5);
      v14 = *v13;
      v15 = v13[1];
      swift_bridgeObjectRetain(v15);
      v16 = swift_bridgeObjectRelease();
      static String.Encoding.utf8.getter(v16);
      v17 = String.data(using:allowLossyConversion:)(v10, 0, v14, v15);
      v19 = v18;
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
      (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
      if (v19 >> 60 != 15)
        goto LABEL_13;
    }
    else
    {
      v21 = *(_QWORD *)(v0 + 80);
      v20 = *(_QWORD *)(v0 + 88);
      v22 = *(_QWORD *)(v0 + 72);
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v20, v22);
    }
  }
  if (qword_1010EA3F0 != -1)
    swift_once(&qword_1010EA3F0, sub_100C24310);
  v23 = type metadata accessor for Logger(0);
  v24 = sub_10001A9E8(v23, (uint64_t)qword_1011B7EF8);
  v25 = Logger.logObject.getter(v24);
  v26 = static os_log_type_t.error.getter(v25);
  if (os_log_type_enabled(v25, v26))
  {
    v27 = (uint8_t *)swift_slowAlloc(12, -1);
    v28 = swift_slowAlloc(32, -1);
    v32 = v28;
    *(_DWORD *)v27 = 136446210;
    *(_QWORD *)(v0 + 32) = sub_100016940(0xD000000000000016, 0x8000000100EEF290, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v27 + 4, v27 + 12);
    _os_log_impl((void *)&_mh_execute_header, v25, v26, "%{public}s Could not read credential data.", v27, 0xCu);
    swift_arrayDestroy(v28, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v28, -1, -1);
    swift_slowDealloc(v27, -1, -1);
  }

  v17 = 0;
  v19 = 0xC000000000000000;
LABEL_13:
  v30 = *(_QWORD *)(v0 + 56);
  v29 = *(_QWORD *)(v0 + 64);
  swift_task_dealloc(*(_QWORD *)(v0 + 88));
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  return (*(uint64_t (**)(uint64_t, unint64_t))(v0 + 8))(v17, v19);
}

uint64_t sub_100B1FECC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  if (qword_1010EA3F0 != -1)
    swift_once(&qword_1010EA3F0, sub_100C24310);
  v1 = *(_QWORD *)(v0 + 104);
  v2 = type metadata accessor for Logger(0);
  sub_10001A9E8(v2, (uint64_t)qword_1011B7EF8);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter(v4);
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 104);
  if (v6)
  {
    v8 = swift_slowAlloc(22, -1);
    v9 = (uint64_t *)swift_slowAlloc(8, -1);
    v10 = swift_slowAlloc(32, -1);
    v16 = v10;
    *(_DWORD *)v8 = 136446466;
    *(_QWORD *)(v0 + 16) = sub_100016940(0xD000000000000016, 0x8000000100EEF290, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v8 + 4, v8 + 12);
    *(_WORD *)(v8 + 12) = 2114;
    swift_errorRetain(v7);
    v11 = _swift_stdlib_bridgeErrorToNSError(v7);
    *(_QWORD *)(v0 + 24) = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v8 + 14, v8 + 22);
    *v9 = v11;
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "%{public}s Cannot get authorization header %{public}@.", (uint8_t *)v8, 0x16u);
    v12 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v9, 1, v12);
    swift_slowDealloc(v9, -1, -1);
    swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 104));
    swift_errorRelease(v7);
  }

  swift_errorRelease(v7);
  v13 = *(_QWORD *)(v0 + 56);
  v14 = *(_QWORD *)(v0 + 64);
  swift_task_dealloc(*(_QWORD *)(v0 + 88));
  swift_task_dealloc(v14);
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(_QWORD, unint64_t))(v0 + 8))(0, 0xC000000000000000);
}

uint64_t sub_100B2012C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v1 = type metadata accessor for String.Encoding(0);
  v0[5] = v1;
  v2 = *(_QWORD *)(v1 - 8);
  v0[6] = v2;
  v0[7] = swift_task_alloc((*(_QWORD *)(v2 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_10001A9A8(&qword_101115228);
  v4 = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v0[8] = v4;
  v5 = type metadata accessor for SearchpartyAccount(0);
  v0[9] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v0[10] = v6;
  v0[11] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (_QWORD *)swift_task_alloc(async function pointer to static AppleAccount.searchpartyAccount.getter[1]);
  v0[12] = v7;
  *v7 = v0;
  v7[1] = sub_100B201F4;
  return static AppleAccount.searchpartyAccount.getter(v4);
}

uint64_t sub_100B201F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 96);
  *(_QWORD *)(*(_QWORD *)v1 + 104) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_100B20544;
  else
    v3 = sub_100B20258;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_100B20258()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;

  v1 = *(_QWORD *)(v0 + 72);
  v2 = *(_QWORD *)(v0 + 80);
  v3 = *(_QWORD *)(v0 + 64);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_100004048(v3, &qword_101115228);
  }
  else
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v2 + 32))(*(_QWORD *)(v0 + 88), v3, v1);
    v4 = RequestCredential.authHeaders.getter(v1, &protocol witness table for SearchpartyAccount);
    if (*(_QWORD *)(v4 + 16) && (v5 = sub_100518DA0(0x7A69726F68747541, 0xED00006E6F697461), (v6 & 1) != 0))
    {
      v8 = *(_QWORD *)(v0 + 80);
      v7 = *(_QWORD *)(v0 + 88);
      v9 = *(_QWORD *)(v0 + 72);
      v11 = *(_QWORD *)(v0 + 48);
      v10 = *(_QWORD *)(v0 + 56);
      v12 = *(_QWORD *)(v0 + 40);
      v13 = (uint64_t *)(*(_QWORD *)(v4 + 56) + 16 * v5);
      v14 = *v13;
      v15 = v13[1];
      swift_bridgeObjectRetain(v15);
      v16 = swift_bridgeObjectRelease();
      static String.Encoding.utf8.getter(v16);
      v17 = String.data(using:allowLossyConversion:)(v10, 0, v14, v15);
      v19 = v18;
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
      (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
      if (v19 >> 60 != 15)
        goto LABEL_13;
    }
    else
    {
      v21 = *(_QWORD *)(v0 + 80);
      v20 = *(_QWORD *)(v0 + 88);
      v22 = *(_QWORD *)(v0 + 72);
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v20, v22);
    }
  }
  if (qword_1010EA3F0 != -1)
    swift_once(&qword_1010EA3F0, sub_100C24310);
  v23 = type metadata accessor for Logger(0);
  v24 = sub_10001A9E8(v23, (uint64_t)qword_1011B7EF8);
  v25 = Logger.logObject.getter(v24);
  v26 = static os_log_type_t.error.getter(v25);
  if (os_log_type_enabled(v25, v26))
  {
    v27 = (uint8_t *)swift_slowAlloc(12, -1);
    v28 = swift_slowAlloc(32, -1);
    v32 = v28;
    *(_DWORD *)v27 = 136446210;
    *(_QWORD *)(v0 + 32) = sub_100016940(0xD000000000000020, 0x8000000100EEF2B0, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v27 + 4, v27 + 12);
    _os_log_impl((void *)&_mh_execute_header, v25, v26, "%{public}s Could not read credential data.", v27, 0xCu);
    swift_arrayDestroy(v28, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v28, -1, -1);
    swift_slowDealloc(v27, -1, -1);
  }

  v17 = 0;
  v19 = 0xC000000000000000;
LABEL_13:
  v30 = *(_QWORD *)(v0 + 56);
  v29 = *(_QWORD *)(v0 + 64);
  swift_task_dealloc(*(_QWORD *)(v0 + 88));
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  return (*(uint64_t (**)(uint64_t, unint64_t))(v0 + 8))(v17, v19);
}

uint64_t sub_100B20544()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  if (qword_1010EA3F0 != -1)
    swift_once(&qword_1010EA3F0, sub_100C24310);
  v1 = *(_QWORD *)(v0 + 104);
  v2 = type metadata accessor for Logger(0);
  sub_10001A9E8(v2, (uint64_t)qword_1011B7EF8);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter(v4);
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 104);
  if (v6)
  {
    v8 = swift_slowAlloc(22, -1);
    v9 = (uint64_t *)swift_slowAlloc(8, -1);
    v10 = swift_slowAlloc(32, -1);
    v16 = v10;
    *(_DWORD *)v8 = 136446466;
    *(_QWORD *)(v0 + 16) = sub_100016940(0xD000000000000020, 0x8000000100EEF2B0, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v8 + 4, v8 + 12);
    *(_WORD *)(v8 + 12) = 2114;
    swift_errorRetain(v7);
    v11 = _swift_stdlib_bridgeErrorToNSError(v7);
    *(_QWORD *)(v0 + 24) = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v8 + 14, v8 + 22);
    *v9 = v11;
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "%{public}s Cannot get authorization header %{public}@.", (uint8_t *)v8, 0x16u);
    v12 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v9, 1, v12);
    swift_slowDealloc(v9, -1, -1);
    swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 104));
    swift_errorRelease(v7);
  }

  swift_errorRelease(v7);
  v13 = *(_QWORD *)(v0 + 56);
  v14 = *(_QWORD *)(v0 + 64);
  swift_task_dealloc(*(_QWORD *)(v0 + 88));
  swift_task_dealloc(v14);
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(_QWORD, unint64_t))(v0 + 8))(0, 0xC000000000000000);
}

uint64_t sub_100B207A4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v1 = type metadata accessor for String.Encoding(0);
  v0[5] = v1;
  v2 = *(_QWORD *)(v1 - 8);
  v0[6] = v2;
  v0[7] = swift_task_alloc((*(_QWORD *)(v2 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_10001A9A8(&qword_101115228);
  v4 = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v0[8] = v4;
  v5 = type metadata accessor for SearchpartyAccount(0);
  v0[9] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v0[10] = v6;
  v0[11] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (_QWORD *)swift_task_alloc(async function pointer to static AppleAccount.searchpartyAccount.getter[1]);
  v0[12] = v7;
  *v7 = v0;
  v7[1] = sub_100B2086C;
  return static AppleAccount.searchpartyAccount.getter(v4);
}

uint64_t sub_100B2086C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 96);
  *(_QWORD *)(*(_QWORD *)v1 + 104) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_100B20BBC;
  else
    v3 = sub_100B208D0;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_100B208D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;

  v1 = *(_QWORD *)(v0 + 72);
  v2 = *(_QWORD *)(v0 + 80);
  v3 = *(_QWORD *)(v0 + 64);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_100004048(v3, &qword_101115228);
  }
  else
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v2 + 32))(*(_QWORD *)(v0 + 88), v3, v1);
    v4 = RequestCredential.authHeaders.getter(v1, &protocol witness table for SearchpartyAccount);
    if (*(_QWORD *)(v4 + 16) && (v5 = sub_100518DA0(0x7A69726F68747541, 0xED00006E6F697461), (v6 & 1) != 0))
    {
      v8 = *(_QWORD *)(v0 + 80);
      v7 = *(_QWORD *)(v0 + 88);
      v9 = *(_QWORD *)(v0 + 72);
      v11 = *(_QWORD *)(v0 + 48);
      v10 = *(_QWORD *)(v0 + 56);
      v12 = *(_QWORD *)(v0 + 40);
      v13 = (uint64_t *)(*(_QWORD *)(v4 + 56) + 16 * v5);
      v14 = *v13;
      v15 = v13[1];
      swift_bridgeObjectRetain(v15);
      v16 = swift_bridgeObjectRelease();
      static String.Encoding.utf8.getter(v16);
      v17 = String.data(using:allowLossyConversion:)(v10, 0, v14, v15);
      v19 = v18;
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
      (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
      if (v19 >> 60 != 15)
        goto LABEL_13;
    }
    else
    {
      v21 = *(_QWORD *)(v0 + 80);
      v20 = *(_QWORD *)(v0 + 88);
      v22 = *(_QWORD *)(v0 + 72);
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v20, v22);
    }
  }
  if (qword_1010EA3F0 != -1)
    swift_once(&qword_1010EA3F0, sub_100C24310);
  v23 = type metadata accessor for Logger(0);
  v24 = sub_10001A9E8(v23, (uint64_t)qword_1011B7EF8);
  v25 = Logger.logObject.getter(v24);
  v26 = static os_log_type_t.error.getter(v25);
  if (os_log_type_enabled(v25, v26))
  {
    v27 = (uint8_t *)swift_slowAlloc(12, -1);
    v28 = swift_slowAlloc(32, -1);
    v32 = v28;
    *(_DWORD *)v27 = 136446210;
    *(_QWORD *)(v0 + 32) = sub_100016940(0xD00000000000001ELL, 0x8000000100EEF270, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v27 + 4, v27 + 12);
    _os_log_impl((void *)&_mh_execute_header, v25, v26, "%{public}s Could not read credential data.", v27, 0xCu);
    swift_arrayDestroy(v28, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v28, -1, -1);
    swift_slowDealloc(v27, -1, -1);
  }

  v17 = 0;
  v19 = 0xC000000000000000;
LABEL_13:
  v30 = *(_QWORD *)(v0 + 56);
  v29 = *(_QWORD *)(v0 + 64);
  swift_task_dealloc(*(_QWORD *)(v0 + 88));
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  return (*(uint64_t (**)(uint64_t, unint64_t))(v0 + 8))(v17, v19);
}

uint64_t sub_100B20BBC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  if (qword_1010EA3F0 != -1)
    swift_once(&qword_1010EA3F0, sub_100C24310);
  v1 = *(_QWORD *)(v0 + 104);
  v2 = type metadata accessor for Logger(0);
  sub_10001A9E8(v2, (uint64_t)qword_1011B7EF8);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter(v4);
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 104);
  if (v6)
  {
    v8 = swift_slowAlloc(22, -1);
    v9 = (uint64_t *)swift_slowAlloc(8, -1);
    v10 = swift_slowAlloc(32, -1);
    v16 = v10;
    *(_DWORD *)v8 = 136446466;
    *(_QWORD *)(v0 + 16) = sub_100016940(0xD00000000000001ELL, 0x8000000100EEF270, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v8 + 4, v8 + 12);
    *(_WORD *)(v8 + 12) = 2114;
    swift_errorRetain(v7);
    v11 = _swift_stdlib_bridgeErrorToNSError(v7);
    *(_QWORD *)(v0 + 24) = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v8 + 14, v8 + 22);
    *v9 = v11;
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "%{public}s Cannot get authorization header %{public}@.", (uint8_t *)v8, 0x16u);
    v12 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v9, 1, v12);
    swift_slowDealloc(v9, -1, -1);
    swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 104));
    swift_errorRelease(v7);
  }

  swift_errorRelease(v7);
  v13 = *(_QWORD *)(v0 + 56);
  v14 = *(_QWORD *)(v0 + 64);
  swift_task_dealloc(*(_QWORD *)(v0 + 88));
  swift_task_dealloc(v14);
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(_QWORD, unint64_t))(v0 + 8))(0, 0xC000000000000000);
}

uint64_t sub_100B20E1C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v1 = type metadata accessor for String.Encoding(0);
  v0[5] = v1;
  v2 = *(_QWORD *)(v1 - 8);
  v0[6] = v2;
  v0[7] = swift_task_alloc((*(_QWORD *)(v2 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_10001A9A8(&qword_101115228);
  v4 = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v0[8] = v4;
  v5 = type metadata accessor for SearchpartyAccount(0);
  v0[9] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v0[10] = v6;
  v0[11] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (_QWORD *)swift_task_alloc(async function pointer to static AppleAccount.searchpartyAccount.getter[1]);
  v0[12] = v7;
  *v7 = v0;
  v7[1] = sub_100B20EE4;
  return static AppleAccount.searchpartyAccount.getter(v4);
}

uint64_t sub_100B20EE4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 96);
  *(_QWORD *)(*(_QWORD *)v1 + 104) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_100B21234;
  else
    v3 = sub_100B20F48;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_100B20F48()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;

  v1 = *(_QWORD *)(v0 + 72);
  v2 = *(_QWORD *)(v0 + 80);
  v3 = *(_QWORD *)(v0 + 64);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_100004048(v3, &qword_101115228);
  }
  else
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v2 + 32))(*(_QWORD *)(v0 + 88), v3, v1);
    v4 = RequestCredential.authHeaders.getter(v1, &protocol witness table for SearchpartyAccount);
    if (*(_QWORD *)(v4 + 16) && (v5 = sub_100518DA0(0x7A69726F68747541, 0xED00006E6F697461), (v6 & 1) != 0))
    {
      v8 = *(_QWORD *)(v0 + 80);
      v7 = *(_QWORD *)(v0 + 88);
      v9 = *(_QWORD *)(v0 + 72);
      v11 = *(_QWORD *)(v0 + 48);
      v10 = *(_QWORD *)(v0 + 56);
      v12 = *(_QWORD *)(v0 + 40);
      v13 = (uint64_t *)(*(_QWORD *)(v4 + 56) + 16 * v5);
      v14 = *v13;
      v15 = v13[1];
      swift_bridgeObjectRetain(v15);
      v16 = swift_bridgeObjectRelease();
      static String.Encoding.utf8.getter(v16);
      v17 = String.data(using:allowLossyConversion:)(v10, 0, v14, v15);
      v19 = v18;
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
      (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
      if (v19 >> 60 != 15)
        goto LABEL_13;
    }
    else
    {
      v21 = *(_QWORD *)(v0 + 80);
      v20 = *(_QWORD *)(v0 + 88);
      v22 = *(_QWORD *)(v0 + 72);
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v20, v22);
    }
  }
  if (qword_1010EA3F0 != -1)
    swift_once(&qword_1010EA3F0, sub_100C24310);
  v23 = type metadata accessor for Logger(0);
  v24 = sub_10001A9E8(v23, (uint64_t)qword_1011B7EF8);
  v25 = Logger.logObject.getter(v24);
  v26 = static os_log_type_t.error.getter(v25);
  if (os_log_type_enabled(v25, v26))
  {
    v27 = (uint8_t *)swift_slowAlloc(12, -1);
    v28 = swift_slowAlloc(32, -1);
    v32 = v28;
    *(_DWORD *)v27 = 136446210;
    *(_QWORD *)(v0 + 32) = sub_100016940(0xD00000000000001BLL, 0x8000000100EEF120, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v27 + 4, v27 + 12);
    _os_log_impl((void *)&_mh_execute_header, v25, v26, "%{public}s Could not read credential data.", v27, 0xCu);
    swift_arrayDestroy(v28, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v28, -1, -1);
    swift_slowDealloc(v27, -1, -1);
  }

  v17 = 0;
  v19 = 0xC000000000000000;
LABEL_13:
  v30 = *(_QWORD *)(v0 + 56);
  v29 = *(_QWORD *)(v0 + 64);
  swift_task_dealloc(*(_QWORD *)(v0 + 88));
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  return (*(uint64_t (**)(uint64_t, unint64_t))(v0 + 8))(v17, v19);
}

uint64_t sub_100B21234()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  if (qword_1010EA3F0 != -1)
    swift_once(&qword_1010EA3F0, sub_100C24310);
  v1 = *(_QWORD *)(v0 + 104);
  v2 = type metadata accessor for Logger(0);
  sub_10001A9E8(v2, (uint64_t)qword_1011B7EF8);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter(v4);
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 104);
  if (v6)
  {
    v8 = swift_slowAlloc(22, -1);
    v9 = (uint64_t *)swift_slowAlloc(8, -1);
    v10 = swift_slowAlloc(32, -1);
    v16 = v10;
    *(_DWORD *)v8 = 136446466;
    *(_QWORD *)(v0 + 16) = sub_100016940(0xD00000000000001BLL, 0x8000000100EEF120, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v8 + 4, v8 + 12);
    *(_WORD *)(v8 + 12) = 2114;
    swift_errorRetain(v7);
    v11 = _swift_stdlib_bridgeErrorToNSError(v7);
    *(_QWORD *)(v0 + 24) = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v8 + 14, v8 + 22);
    *v9 = v11;
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "%{public}s Cannot get authorization header %{public}@.", (uint8_t *)v8, 0x16u);
    v12 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v9, 1, v12);
    swift_slowDealloc(v9, -1, -1);
    swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 104));
    swift_errorRelease(v7);
  }

  swift_errorRelease(v7);
  v13 = *(_QWORD *)(v0 + 56);
  v14 = *(_QWORD *)(v0 + 64);
  swift_task_dealloc(*(_QWORD *)(v0 + 88));
  swift_task_dealloc(v14);
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(_QWORD, unint64_t))(v0 + 8))(0, 0xC000000000000000);
}

uint64_t sub_100B21494()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v1 = type metadata accessor for String.Encoding(0);
  v0[5] = v1;
  v2 = *(_QWORD *)(v1 - 8);
  v0[6] = v2;
  v0[7] = swift_task_alloc((*(_QWORD *)(v2 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_10001A9A8(&qword_101115228);
  v4 = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v0[8] = v4;
  v5 = type metadata accessor for SearchpartyAccount(0);
  v0[9] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v0[10] = v6;
  v0[11] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (_QWORD *)swift_task_alloc(async function pointer to static AppleAccount.searchpartyAccount.getter[1]);
  v0[12] = v7;
  *v7 = v0;
  v7[1] = sub_100B2155C;
  return static AppleAccount.searchpartyAccount.getter(v4);
}

uint64_t sub_100B2155C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 96);
  *(_QWORD *)(*(_QWORD *)v1 + 104) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_100B218AC;
  else
    v3 = sub_100B215C0;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_100B215C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;

  v1 = *(_QWORD *)(v0 + 72);
  v2 = *(_QWORD *)(v0 + 80);
  v3 = *(_QWORD *)(v0 + 64);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_100004048(v3, &qword_101115228);
  }
  else
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v2 + 32))(*(_QWORD *)(v0 + 88), v3, v1);
    v4 = RequestCredential.authHeaders.getter(v1, &protocol witness table for SearchpartyAccount);
    if (*(_QWORD *)(v4 + 16) && (v5 = sub_100518DA0(0x7A69726F68747541, 0xED00006E6F697461), (v6 & 1) != 0))
    {
      v8 = *(_QWORD *)(v0 + 80);
      v7 = *(_QWORD *)(v0 + 88);
      v9 = *(_QWORD *)(v0 + 72);
      v11 = *(_QWORD *)(v0 + 48);
      v10 = *(_QWORD *)(v0 + 56);
      v12 = *(_QWORD *)(v0 + 40);
      v13 = (uint64_t *)(*(_QWORD *)(v4 + 56) + 16 * v5);
      v14 = *v13;
      v15 = v13[1];
      swift_bridgeObjectRetain(v15);
      v16 = swift_bridgeObjectRelease();
      static String.Encoding.utf8.getter(v16);
      v17 = String.data(using:allowLossyConversion:)(v10, 0, v14, v15);
      v19 = v18;
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
      (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
      if (v19 >> 60 != 15)
        goto LABEL_13;
    }
    else
    {
      v21 = *(_QWORD *)(v0 + 80);
      v20 = *(_QWORD *)(v0 + 88);
      v22 = *(_QWORD *)(v0 + 72);
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v20, v22);
    }
  }
  if (qword_1010EA3F0 != -1)
    swift_once(&qword_1010EA3F0, sub_100C24310);
  v23 = type metadata accessor for Logger(0);
  v24 = sub_10001A9E8(v23, (uint64_t)qword_1011B7EF8);
  v25 = Logger.logObject.getter(v24);
  v26 = static os_log_type_t.error.getter(v25);
  if (os_log_type_enabled(v25, v26))
  {
    v27 = (uint8_t *)swift_slowAlloc(12, -1);
    v28 = swift_slowAlloc(32, -1);
    v32 = v28;
    *(_DWORD *)v27 = 136446210;
    *(_QWORD *)(v0 + 32) = sub_100016940(0xD000000000000013, 0x8000000100EEF100, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v27 + 4, v27 + 12);
    _os_log_impl((void *)&_mh_execute_header, v25, v26, "%{public}s Could not read credential data.", v27, 0xCu);
    swift_arrayDestroy(v28, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v28, -1, -1);
    swift_slowDealloc(v27, -1, -1);
  }

  v17 = 0;
  v19 = 0xC000000000000000;
LABEL_13:
  v30 = *(_QWORD *)(v0 + 56);
  v29 = *(_QWORD *)(v0 + 64);
  swift_task_dealloc(*(_QWORD *)(v0 + 88));
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  return (*(uint64_t (**)(uint64_t, unint64_t))(v0 + 8))(v17, v19);
}

uint64_t sub_100B218AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  if (qword_1010EA3F0 != -1)
    swift_once(&qword_1010EA3F0, sub_100C24310);
  v1 = *(_QWORD *)(v0 + 104);
  v2 = type metadata accessor for Logger(0);
  sub_10001A9E8(v2, (uint64_t)qword_1011B7EF8);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter(v4);
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 104);
  if (v6)
  {
    v8 = swift_slowAlloc(22, -1);
    v9 = (uint64_t *)swift_slowAlloc(8, -1);
    v10 = swift_slowAlloc(32, -1);
    v16 = v10;
    *(_DWORD *)v8 = 136446466;
    *(_QWORD *)(v0 + 16) = sub_100016940(0xD000000000000013, 0x8000000100EEF100, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v8 + 4, v8 + 12);
    *(_WORD *)(v8 + 12) = 2114;
    swift_errorRetain(v7);
    v11 = _swift_stdlib_bridgeErrorToNSError(v7);
    *(_QWORD *)(v0 + 24) = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v8 + 14, v8 + 22);
    *v9 = v11;
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "%{public}s Cannot get authorization header %{public}@.", (uint8_t *)v8, 0x16u);
    v12 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v9, 1, v12);
    swift_slowDealloc(v9, -1, -1);
    swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 104));
    swift_errorRelease(v7);
  }

  swift_errorRelease(v7);
  v13 = *(_QWORD *)(v0 + 56);
  v14 = *(_QWORD *)(v0 + 64);
  swift_task_dealloc(*(_QWORD *)(v0 + 88));
  swift_task_dealloc(v14);
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(_QWORD, unint64_t))(v0 + 8))(0, 0xC000000000000000);
}

uint64_t sub_100B21B0C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v1 = type metadata accessor for String.Encoding(0);
  v0[5] = v1;
  v2 = *(_QWORD *)(v1 - 8);
  v0[6] = v2;
  v0[7] = swift_task_alloc((*(_QWORD *)(v2 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_10001A9A8(&qword_101115228);
  v4 = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v0[8] = v4;
  v5 = type metadata accessor for SearchpartyAccount(0);
  v0[9] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v0[10] = v6;
  v0[11] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (_QWORD *)swift_task_alloc(async function pointer to static AppleAccount.searchpartyAccount.getter[1]);
  v0[12] = v7;
  *v7 = v0;
  v7[1] = sub_100B21BD4;
  return static AppleAccount.searchpartyAccount.getter(v4);
}

uint64_t sub_100B21BD4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 96);
  *(_QWORD *)(*(_QWORD *)v1 + 104) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_100B21F24;
  else
    v3 = sub_100B21C38;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_100B21C38()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;

  v1 = *(_QWORD *)(v0 + 72);
  v2 = *(_QWORD *)(v0 + 80);
  v3 = *(_QWORD *)(v0 + 64);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_100004048(v3, &qword_101115228);
  }
  else
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v2 + 32))(*(_QWORD *)(v0 + 88), v3, v1);
    v4 = RequestCredential.authHeaders.getter(v1, &protocol witness table for SearchpartyAccount);
    if (*(_QWORD *)(v4 + 16) && (v5 = sub_100518DA0(0x7A69726F68747541, 0xED00006E6F697461), (v6 & 1) != 0))
    {
      v8 = *(_QWORD *)(v0 + 80);
      v7 = *(_QWORD *)(v0 + 88);
      v9 = *(_QWORD *)(v0 + 72);
      v11 = *(_QWORD *)(v0 + 48);
      v10 = *(_QWORD *)(v0 + 56);
      v12 = *(_QWORD *)(v0 + 40);
      v13 = (uint64_t *)(*(_QWORD *)(v4 + 56) + 16 * v5);
      v14 = *v13;
      v15 = v13[1];
      swift_bridgeObjectRetain(v15);
      v16 = swift_bridgeObjectRelease();
      static String.Encoding.utf8.getter(v16);
      v17 = String.data(using:allowLossyConversion:)(v10, 0, v14, v15);
      v19 = v18;
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
      (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
      if (v19 >> 60 != 15)
        goto LABEL_13;
    }
    else
    {
      v21 = *(_QWORD *)(v0 + 80);
      v20 = *(_QWORD *)(v0 + 88);
      v22 = *(_QWORD *)(v0 + 72);
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v20, v22);
    }
  }
  if (qword_1010EA3F0 != -1)
    swift_once(&qword_1010EA3F0, sub_100C24310);
  v23 = type metadata accessor for Logger(0);
  v24 = sub_10001A9E8(v23, (uint64_t)qword_1011B7EF8);
  v25 = Logger.logObject.getter(v24);
  v26 = static os_log_type_t.error.getter(v25);
  if (os_log_type_enabled(v25, v26))
  {
    v27 = (uint8_t *)swift_slowAlloc(12, -1);
    v28 = swift_slowAlloc(32, -1);
    v32 = v28;
    *(_DWORD *)v27 = 136446210;
    *(_QWORD *)(v0 + 32) = sub_100016940(0xD00000000000001BLL, 0x8000000100EEF210, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v27 + 4, v27 + 12);
    _os_log_impl((void *)&_mh_execute_header, v25, v26, "%{public}s Could not read credential data.", v27, 0xCu);
    swift_arrayDestroy(v28, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v28, -1, -1);
    swift_slowDealloc(v27, -1, -1);
  }

  v17 = 0;
  v19 = 0xC000000000000000;
LABEL_13:
  v30 = *(_QWORD *)(v0 + 56);
  v29 = *(_QWORD *)(v0 + 64);
  swift_task_dealloc(*(_QWORD *)(v0 + 88));
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  return (*(uint64_t (**)(uint64_t, unint64_t))(v0 + 8))(v17, v19);
}

uint64_t sub_100B21F24()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  if (qword_1010EA3F0 != -1)
    swift_once(&qword_1010EA3F0, sub_100C24310);
  v1 = *(_QWORD *)(v0 + 104);
  v2 = type metadata accessor for Logger(0);
  sub_10001A9E8(v2, (uint64_t)qword_1011B7EF8);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter(v4);
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 104);
  if (v6)
  {
    v8 = swift_slowAlloc(22, -1);
    v9 = (uint64_t *)swift_slowAlloc(8, -1);
    v10 = swift_slowAlloc(32, -1);
    v16 = v10;
    *(_DWORD *)v8 = 136446466;
    *(_QWORD *)(v0 + 16) = sub_100016940(0xD00000000000001BLL, 0x8000000100EEF210, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v8 + 4, v8 + 12);
    *(_WORD *)(v8 + 12) = 2114;
    swift_errorRetain(v7);
    v11 = _swift_stdlib_bridgeErrorToNSError(v7);
    *(_QWORD *)(v0 + 24) = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v8 + 14, v8 + 22);
    *v9 = v11;
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "%{public}s Cannot get authorization header %{public}@.", (uint8_t *)v8, 0x16u);
    v12 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v9, 1, v12);
    swift_slowDealloc(v9, -1, -1);
    swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 104));
    swift_errorRelease(v7);
  }

  swift_errorRelease(v7);
  v13 = *(_QWORD *)(v0 + 56);
  v14 = *(_QWORD *)(v0 + 64);
  swift_task_dealloc(*(_QWORD *)(v0 + 88));
  swift_task_dealloc(v14);
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(_QWORD, unint64_t))(v0 + 8))(0, 0xC000000000000000);
}

uint64_t sub_100B22184()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v1 = type metadata accessor for String.Encoding(0);
  v0[5] = v1;
  v2 = *(_QWORD *)(v1 - 8);
  v0[6] = v2;
  v0[7] = swift_task_alloc((*(_QWORD *)(v2 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_10001A9A8(&qword_101115228);
  v4 = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v0[8] = v4;
  v5 = type metadata accessor for SearchpartyAccount(0);
  v0[9] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v0[10] = v6;
  v0[11] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (_QWORD *)swift_task_alloc(async function pointer to static AppleAccount.searchpartyAccount.getter[1]);
  v0[12] = v7;
  *v7 = v0;
  v7[1] = sub_100B2224C;
  return static AppleAccount.searchpartyAccount.getter(v4);
}

uint64_t sub_100B2224C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 96);
  *(_QWORD *)(*(_QWORD *)v1 + 104) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_100B2259C;
  else
    v3 = sub_100B222B0;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_100B222B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;

  v1 = *(_QWORD *)(v0 + 72);
  v2 = *(_QWORD *)(v0 + 80);
  v3 = *(_QWORD *)(v0 + 64);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_100004048(v3, &qword_101115228);
  }
  else
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v2 + 32))(*(_QWORD *)(v0 + 88), v3, v1);
    v4 = RequestCredential.authHeaders.getter(v1, &protocol witness table for SearchpartyAccount);
    if (*(_QWORD *)(v4 + 16) && (v5 = sub_100518DA0(0x7A69726F68747541, 0xED00006E6F697461), (v6 & 1) != 0))
    {
      v8 = *(_QWORD *)(v0 + 80);
      v7 = *(_QWORD *)(v0 + 88);
      v9 = *(_QWORD *)(v0 + 72);
      v11 = *(_QWORD *)(v0 + 48);
      v10 = *(_QWORD *)(v0 + 56);
      v12 = *(_QWORD *)(v0 + 40);
      v13 = (uint64_t *)(*(_QWORD *)(v4 + 56) + 16 * v5);
      v14 = *v13;
      v15 = v13[1];
      swift_bridgeObjectRetain(v15);
      v16 = swift_bridgeObjectRelease();
      static String.Encoding.utf8.getter(v16);
      v17 = String.data(using:allowLossyConversion:)(v10, 0, v14, v15);
      v19 = v18;
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
      (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
      if (v19 >> 60 != 15)
        goto LABEL_13;
    }
    else
    {
      v21 = *(_QWORD *)(v0 + 80);
      v20 = *(_QWORD *)(v0 + 88);
      v22 = *(_QWORD *)(v0 + 72);
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v20, v22);
    }
  }
  if (qword_1010EA3F0 != -1)
    swift_once(&qword_1010EA3F0, sub_100C24310);
  v23 = type metadata accessor for Logger(0);
  v24 = sub_10001A9E8(v23, (uint64_t)qword_1011B7EF8);
  v25 = Logger.logObject.getter(v24);
  v26 = static os_log_type_t.error.getter(v25);
  if (os_log_type_enabled(v25, v26))
  {
    v27 = (uint8_t *)swift_slowAlloc(12, -1);
    v28 = swift_slowAlloc(32, -1);
    v32 = v28;
    *(_DWORD *)v27 = 136446210;
    *(_QWORD *)(v0 + 32) = sub_100016940(0xD000000000000021, 0x8000000100EEF1E0, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v27 + 4, v27 + 12);
    _os_log_impl((void *)&_mh_execute_header, v25, v26, "%{public}s Could not read credential data.", v27, 0xCu);
    swift_arrayDestroy(v28, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v28, -1, -1);
    swift_slowDealloc(v27, -1, -1);
  }

  v17 = 0;
  v19 = 0xC000000000000000;
LABEL_13:
  v30 = *(_QWORD *)(v0 + 56);
  v29 = *(_QWORD *)(v0 + 64);
  swift_task_dealloc(*(_QWORD *)(v0 + 88));
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  return (*(uint64_t (**)(uint64_t, unint64_t))(v0 + 8))(v17, v19);
}

uint64_t sub_100B2259C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  if (qword_1010EA3F0 != -1)
    swift_once(&qword_1010EA3F0, sub_100C24310);
  v1 = *(_QWORD *)(v0 + 104);
  v2 = type metadata accessor for Logger(0);
  sub_10001A9E8(v2, (uint64_t)qword_1011B7EF8);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter(v4);
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 104);
  if (v6)
  {
    v8 = swift_slowAlloc(22, -1);
    v9 = (uint64_t *)swift_slowAlloc(8, -1);
    v10 = swift_slowAlloc(32, -1);
    v16 = v10;
    *(_DWORD *)v8 = 136446466;
    *(_QWORD *)(v0 + 16) = sub_100016940(0xD000000000000021, 0x8000000100EEF1E0, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v8 + 4, v8 + 12);
    *(_WORD *)(v8 + 12) = 2114;
    swift_errorRetain(v7);
    v11 = _swift_stdlib_bridgeErrorToNSError(v7);
    *(_QWORD *)(v0 + 24) = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v8 + 14, v8 + 22);
    *v9 = v11;
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "%{public}s Cannot get authorization header %{public}@.", (uint8_t *)v8, 0x16u);
    v12 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v9, 1, v12);
    swift_slowDealloc(v9, -1, -1);
    swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 104));
    swift_errorRelease(v7);
  }

  swift_errorRelease(v7);
  v13 = *(_QWORD *)(v0 + 56);
  v14 = *(_QWORD *)(v0 + 64);
  swift_task_dealloc(*(_QWORD *)(v0 + 88));
  swift_task_dealloc(v14);
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(_QWORD, unint64_t))(v0 + 8))(0, 0xC000000000000000);
}

uint64_t sub_100B227FC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v1 = type metadata accessor for String.Encoding(0);
  v0[5] = v1;
  v2 = *(_QWORD *)(v1 - 8);
  v0[6] = v2;
  v0[7] = swift_task_alloc((*(_QWORD *)(v2 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_10001A9A8(&qword_101115228);
  v4 = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v0[8] = v4;
  v5 = type metadata accessor for SearchpartyAccount(0);
  v0[9] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v0[10] = v6;
  v0[11] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (_QWORD *)swift_task_alloc(async function pointer to static AppleAccount.searchpartyAccount.getter[1]);
  v0[12] = v7;
  *v7 = v0;
  v7[1] = sub_100B228C4;
  return static AppleAccount.searchpartyAccount.getter(v4);
}

uint64_t sub_100B228C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 96);
  *(_QWORD *)(*(_QWORD *)v1 + 104) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_100B22C18;
  else
    v3 = sub_100B22928;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_100B22928()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;

  v1 = *(_QWORD *)(v0 + 72);
  v2 = *(_QWORD *)(v0 + 80);
  v3 = *(_QWORD *)(v0 + 64);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_100004048(v3, &qword_101115228);
  }
  else
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v2 + 32))(*(_QWORD *)(v0 + 88), v3, v1);
    v4 = RequestCredential.authHeaders.getter(v1, &protocol witness table for SearchpartyAccount);
    if (*(_QWORD *)(v4 + 16) && (v5 = sub_100518DA0(0x7A69726F68747541, 0xED00006E6F697461), (v6 & 1) != 0))
    {
      v8 = *(_QWORD *)(v0 + 80);
      v7 = *(_QWORD *)(v0 + 88);
      v9 = *(_QWORD *)(v0 + 72);
      v11 = *(_QWORD *)(v0 + 48);
      v10 = *(_QWORD *)(v0 + 56);
      v12 = *(_QWORD *)(v0 + 40);
      v13 = (uint64_t *)(*(_QWORD *)(v4 + 56) + 16 * v5);
      v14 = *v13;
      v15 = v13[1];
      swift_bridgeObjectRetain(v15);
      v16 = swift_bridgeObjectRelease();
      static String.Encoding.utf8.getter(v16);
      v17 = String.data(using:allowLossyConversion:)(v10, 0, v14, v15);
      v19 = v18;
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
      (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
      if (v19 >> 60 != 15)
        goto LABEL_13;
    }
    else
    {
      v21 = *(_QWORD *)(v0 + 80);
      v20 = *(_QWORD *)(v0 + 88);
      v22 = *(_QWORD *)(v0 + 72);
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v20, v22);
    }
  }
  if (qword_1010EA3F0 != -1)
    swift_once(&qword_1010EA3F0, sub_100C24310);
  v23 = type metadata accessor for Logger(0);
  v24 = sub_10001A9E8(v23, (uint64_t)qword_1011B7EF8);
  v25 = Logger.logObject.getter(v24);
  v26 = static os_log_type_t.error.getter(v25);
  if (os_log_type_enabled(v25, v26))
  {
    v27 = (uint8_t *)swift_slowAlloc(12, -1);
    v28 = swift_slowAlloc(32, -1);
    v32 = v28;
    *(_DWORD *)v27 = 136446210;
    *(_QWORD *)(v0 + 32) = sub_100016940(0x7165526863746546, 0xEC00000074736575, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v27 + 4, v27 + 12);
    _os_log_impl((void *)&_mh_execute_header, v25, v26, "%{public}s Could not read credential data.", v27, 0xCu);
    swift_arrayDestroy(v28, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v28, -1, -1);
    swift_slowDealloc(v27, -1, -1);
  }

  v17 = 0;
  v19 = 0xC000000000000000;
LABEL_13:
  v30 = *(_QWORD *)(v0 + 56);
  v29 = *(_QWORD *)(v0 + 64);
  swift_task_dealloc(*(_QWORD *)(v0 + 88));
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  return (*(uint64_t (**)(uint64_t, unint64_t))(v0 + 8))(v17, v19);
}

uint64_t sub_100B22C18()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  if (qword_1010EA3F0 != -1)
    swift_once(&qword_1010EA3F0, sub_100C24310);
  v1 = *(_QWORD *)(v0 + 104);
  v2 = type metadata accessor for Logger(0);
  sub_10001A9E8(v2, (uint64_t)qword_1011B7EF8);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter(v4);
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 104);
  if (v6)
  {
    v8 = swift_slowAlloc(22, -1);
    v9 = (uint64_t *)swift_slowAlloc(8, -1);
    v10 = swift_slowAlloc(32, -1);
    v16 = v10;
    *(_DWORD *)v8 = 136446466;
    *(_QWORD *)(v0 + 16) = sub_100016940(0x7165526863746546, 0xEC00000074736575, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v8 + 4, v8 + 12);
    *(_WORD *)(v8 + 12) = 2114;
    swift_errorRetain(v7);
    v11 = _swift_stdlib_bridgeErrorToNSError(v7);
    *(_QWORD *)(v0 + 24) = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v8 + 14, v8 + 22);
    *v9 = v11;
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "%{public}s Cannot get authorization header %{public}@.", (uint8_t *)v8, 0x16u);
    v12 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v9, 1, v12);
    swift_slowDealloc(v9, -1, -1);
    swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 104));
    swift_errorRelease(v7);
  }

  swift_errorRelease(v7);
  v13 = *(_QWORD *)(v0 + 56);
  v14 = *(_QWORD *)(v0 + 64);
  swift_task_dealloc(*(_QWORD *)(v0 + 88));
  swift_task_dealloc(v14);
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(_QWORD, unint64_t))(v0 + 8))(0, 0xC000000000000000);
}

uint64_t sub_100B22E7C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v1 = type metadata accessor for String.Encoding(0);
  v0[5] = v1;
  v2 = *(_QWORD *)(v1 - 8);
  v0[6] = v2;
  v0[7] = swift_task_alloc((*(_QWORD *)(v2 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_10001A9A8(&qword_101115228);
  v4 = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v0[8] = v4;
  v5 = type metadata accessor for SearchpartyAccount(0);
  v0[9] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v0[10] = v6;
  v0[11] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (_QWORD *)swift_task_alloc(async function pointer to static AppleAccount.searchpartyAccount.getter[1]);
  v0[12] = v7;
  *v7 = v0;
  v7[1] = sub_100B22F44;
  return static AppleAccount.searchpartyAccount.getter(v4);
}

uint64_t sub_100B22F44()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 96);
  *(_QWORD *)(*(_QWORD *)v1 + 104) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_100B23294;
  else
    v3 = sub_100B22FA8;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_100B22FA8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;

  v1 = *(_QWORD *)(v0 + 72);
  v2 = *(_QWORD *)(v0 + 80);
  v3 = *(_QWORD *)(v0 + 64);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_100004048(v3, &qword_101115228);
  }
  else
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v2 + 32))(*(_QWORD *)(v0 + 88), v3, v1);
    v4 = RequestCredential.authHeaders.getter(v1, &protocol witness table for SearchpartyAccount);
    if (*(_QWORD *)(v4 + 16) && (v5 = sub_100518DA0(0x7A69726F68747541, 0xED00006E6F697461), (v6 & 1) != 0))
    {
      v8 = *(_QWORD *)(v0 + 80);
      v7 = *(_QWORD *)(v0 + 88);
      v9 = *(_QWORD *)(v0 + 72);
      v11 = *(_QWORD *)(v0 + 48);
      v10 = *(_QWORD *)(v0 + 56);
      v12 = *(_QWORD *)(v0 + 40);
      v13 = (uint64_t *)(*(_QWORD *)(v4 + 56) + 16 * v5);
      v14 = *v13;
      v15 = v13[1];
      swift_bridgeObjectRetain(v15);
      v16 = swift_bridgeObjectRelease();
      static String.Encoding.utf8.getter(v16);
      v17 = String.data(using:allowLossyConversion:)(v10, 0, v14, v15);
      v19 = v18;
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
      (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
      if (v19 >> 60 != 15)
        goto LABEL_13;
    }
    else
    {
      v21 = *(_QWORD *)(v0 + 80);
      v20 = *(_QWORD *)(v0 + 88);
      v22 = *(_QWORD *)(v0 + 72);
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v20, v22);
    }
  }
  if (qword_1010EA3F0 != -1)
    swift_once(&qword_1010EA3F0, sub_100C24310);
  v23 = type metadata accessor for Logger(0);
  v24 = sub_10001A9E8(v23, (uint64_t)qword_1011B7EF8);
  v25 = Logger.logObject.getter(v24);
  v26 = static os_log_type_t.error.getter(v25);
  if (os_log_type_enabled(v25, v26))
  {
    v27 = (uint8_t *)swift_slowAlloc(12, -1);
    v28 = swift_slowAlloc(32, -1);
    v32 = v28;
    *(_DWORD *)v27 = 136446210;
    *(_QWORD *)(v0 + 32) = sub_100016940(0xD00000000000001ELL, 0x8000000100EEF1C0, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v27 + 4, v27 + 12);
    _os_log_impl((void *)&_mh_execute_header, v25, v26, "%{public}s Could not read credential data.", v27, 0xCu);
    swift_arrayDestroy(v28, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v28, -1, -1);
    swift_slowDealloc(v27, -1, -1);
  }

  v17 = 0;
  v19 = 0xC000000000000000;
LABEL_13:
  v30 = *(_QWORD *)(v0 + 56);
  v29 = *(_QWORD *)(v0 + 64);
  swift_task_dealloc(*(_QWORD *)(v0 + 88));
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  return (*(uint64_t (**)(uint64_t, unint64_t))(v0 + 8))(v17, v19);
}

uint64_t sub_100B23294()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  if (qword_1010EA3F0 != -1)
    swift_once(&qword_1010EA3F0, sub_100C24310);
  v1 = *(_QWORD *)(v0 + 104);
  v2 = type metadata accessor for Logger(0);
  sub_10001A9E8(v2, (uint64_t)qword_1011B7EF8);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter(v4);
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 104);
  if (v6)
  {
    v8 = swift_slowAlloc(22, -1);
    v9 = (uint64_t *)swift_slowAlloc(8, -1);
    v10 = swift_slowAlloc(32, -1);
    v16 = v10;
    *(_DWORD *)v8 = 136446466;
    *(_QWORD *)(v0 + 16) = sub_100016940(0xD00000000000001ELL, 0x8000000100EEF1C0, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v8 + 4, v8 + 12);
    *(_WORD *)(v8 + 12) = 2114;
    swift_errorRetain(v7);
    v11 = _swift_stdlib_bridgeErrorToNSError(v7);
    *(_QWORD *)(v0 + 24) = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v8 + 14, v8 + 22);
    *v9 = v11;
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "%{public}s Cannot get authorization header %{public}@.", (uint8_t *)v8, 0x16u);
    v12 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v9, 1, v12);
    swift_slowDealloc(v9, -1, -1);
    swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 104));
    swift_errorRelease(v7);
  }

  swift_errorRelease(v7);
  v13 = *(_QWORD *)(v0 + 56);
  v14 = *(_QWORD *)(v0 + 64);
  swift_task_dealloc(*(_QWORD *)(v0 + 88));
  swift_task_dealloc(v14);
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(_QWORD, unint64_t))(v0 + 8))(0, 0xC000000000000000);
}

uint64_t sub_100B234F4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v1 = type metadata accessor for String.Encoding(0);
  v0[5] = v1;
  v2 = *(_QWORD *)(v1 - 8);
  v0[6] = v2;
  v0[7] = swift_task_alloc((*(_QWORD *)(v2 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_10001A9A8(&qword_101115228);
  v4 = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v0[8] = v4;
  v5 = type metadata accessor for SearchpartyAccount(0);
  v0[9] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v0[10] = v6;
  v0[11] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (_QWORD *)swift_task_alloc(async function pointer to static AppleAccount.searchpartyAccount.getter[1]);
  v0[12] = v7;
  *v7 = v0;
  v7[1] = sub_100B235BC;
  return static AppleAccount.searchpartyAccount.getter(v4);
}

uint64_t sub_100B235BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 96);
  *(_QWORD *)(*(_QWORD *)v1 + 104) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_100B2390C;
  else
    v3 = sub_100B23620;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_100B23620()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;

  v1 = *(_QWORD *)(v0 + 72);
  v2 = *(_QWORD *)(v0 + 80);
  v3 = *(_QWORD *)(v0 + 64);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_100004048(v3, &qword_101115228);
  }
  else
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v2 + 32))(*(_QWORD *)(v0 + 88), v3, v1);
    v4 = RequestCredential.authHeaders.getter(v1, &protocol witness table for SearchpartyAccount);
    if (*(_QWORD *)(v4 + 16) && (v5 = sub_100518DA0(0x7A69726F68747541, 0xED00006E6F697461), (v6 & 1) != 0))
    {
      v8 = *(_QWORD *)(v0 + 80);
      v7 = *(_QWORD *)(v0 + 88);
      v9 = *(_QWORD *)(v0 + 72);
      v11 = *(_QWORD *)(v0 + 48);
      v10 = *(_QWORD *)(v0 + 56);
      v12 = *(_QWORD *)(v0 + 40);
      v13 = (uint64_t *)(*(_QWORD *)(v4 + 56) + 16 * v5);
      v14 = *v13;
      v15 = v13[1];
      swift_bridgeObjectRetain(v15);
      v16 = swift_bridgeObjectRelease();
      static String.Encoding.utf8.getter(v16);
      v17 = String.data(using:allowLossyConversion:)(v10, 0, v14, v15);
      v19 = v18;
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
      (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
      if (v19 >> 60 != 15)
        goto LABEL_13;
    }
    else
    {
      v21 = *(_QWORD *)(v0 + 80);
      v20 = *(_QWORD *)(v0 + 88);
      v22 = *(_QWORD *)(v0 + 72);
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v20, v22);
    }
  }
  if (qword_1010EA3F0 != -1)
    swift_once(&qword_1010EA3F0, sub_100C24310);
  v23 = type metadata accessor for Logger(0);
  v24 = sub_10001A9E8(v23, (uint64_t)qword_1011B7EF8);
  v25 = Logger.logObject.getter(v24);
  v26 = static os_log_type_t.error.getter(v25);
  if (os_log_type_enabled(v25, v26))
  {
    v27 = (uint8_t *)swift_slowAlloc(12, -1);
    v28 = swift_slowAlloc(32, -1);
    v32 = v28;
    *(_DWORD *)v27 = 136446210;
    *(_QWORD *)(v0 + 32) = sub_100016940(0xD000000000000014, 0x8000000100EEF180, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v27 + 4, v27 + 12);
    _os_log_impl((void *)&_mh_execute_header, v25, v26, "%{public}s Could not read credential data.", v27, 0xCu);
    swift_arrayDestroy(v28, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v28, -1, -1);
    swift_slowDealloc(v27, -1, -1);
  }

  v17 = 0;
  v19 = 0xC000000000000000;
LABEL_13:
  v30 = *(_QWORD *)(v0 + 56);
  v29 = *(_QWORD *)(v0 + 64);
  swift_task_dealloc(*(_QWORD *)(v0 + 88));
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  return (*(uint64_t (**)(uint64_t, unint64_t))(v0 + 8))(v17, v19);
}

uint64_t sub_100B2390C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  if (qword_1010EA3F0 != -1)
    swift_once(&qword_1010EA3F0, sub_100C24310);
  v1 = *(_QWORD *)(v0 + 104);
  v2 = type metadata accessor for Logger(0);
  sub_10001A9E8(v2, (uint64_t)qword_1011B7EF8);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter(v4);
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 104);
  if (v6)
  {
    v8 = swift_slowAlloc(22, -1);
    v9 = (uint64_t *)swift_slowAlloc(8, -1);
    v10 = swift_slowAlloc(32, -1);
    v16 = v10;
    *(_DWORD *)v8 = 136446466;
    *(_QWORD *)(v0 + 16) = sub_100016940(0xD000000000000014, 0x8000000100EEF180, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v8 + 4, v8 + 12);
    *(_WORD *)(v8 + 12) = 2114;
    swift_errorRetain(v7);
    v11 = _swift_stdlib_bridgeErrorToNSError(v7);
    *(_QWORD *)(v0 + 24) = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v8 + 14, v8 + 22);
    *v9 = v11;
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "%{public}s Cannot get authorization header %{public}@.", (uint8_t *)v8, 0x16u);
    v12 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v9, 1, v12);
    swift_slowDealloc(v9, -1, -1);
    swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 104));
    swift_errorRelease(v7);
  }

  swift_errorRelease(v7);
  v13 = *(_QWORD *)(v0 + 56);
  v14 = *(_QWORD *)(v0 + 64);
  swift_task_dealloc(*(_QWORD *)(v0 + 88));
  swift_task_dealloc(v14);
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(_QWORD, unint64_t))(v0 + 8))(0, 0xC000000000000000);
}

uint64_t sub_100B23B6C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v1 = type metadata accessor for String.Encoding(0);
  v0[5] = v1;
  v2 = *(_QWORD *)(v1 - 8);
  v0[6] = v2;
  v0[7] = swift_task_alloc((*(_QWORD *)(v2 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_10001A9A8(&qword_101115228);
  v4 = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v0[8] = v4;
  v5 = type metadata accessor for SearchpartyAccount(0);
  v0[9] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v0[10] = v6;
  v0[11] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (_QWORD *)swift_task_alloc(async function pointer to static AppleAccount.searchpartyAccount.getter[1]);
  v0[12] = v7;
  *v7 = v0;
  v7[1] = sub_100B23C34;
  return static AppleAccount.searchpartyAccount.getter(v4);
}

uint64_t sub_100B23C34()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 96);
  *(_QWORD *)(*(_QWORD *)v1 + 104) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_100B23F84;
  else
    v3 = sub_100B23C98;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_100B23C98()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;

  v1 = *(_QWORD *)(v0 + 72);
  v2 = *(_QWORD *)(v0 + 80);
  v3 = *(_QWORD *)(v0 + 64);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_100004048(v3, &qword_101115228);
  }
  else
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v2 + 32))(*(_QWORD *)(v0 + 88), v3, v1);
    v4 = RequestCredential.authHeaders.getter(v1, &protocol witness table for SearchpartyAccount);
    if (*(_QWORD *)(v4 + 16) && (v5 = sub_100518DA0(0x7A69726F68747541, 0xED00006E6F697461), (v6 & 1) != 0))
    {
      v8 = *(_QWORD *)(v0 + 80);
      v7 = *(_QWORD *)(v0 + 88);
      v9 = *(_QWORD *)(v0 + 72);
      v11 = *(_QWORD *)(v0 + 48);
      v10 = *(_QWORD *)(v0 + 56);
      v12 = *(_QWORD *)(v0 + 40);
      v13 = (uint64_t *)(*(_QWORD *)(v4 + 56) + 16 * v5);
      v14 = *v13;
      v15 = v13[1];
      swift_bridgeObjectRetain(v15);
      v16 = swift_bridgeObjectRelease();
      static String.Encoding.utf8.getter(v16);
      v17 = String.data(using:allowLossyConversion:)(v10, 0, v14, v15);
      v19 = v18;
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
      (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
      if (v19 >> 60 != 15)
        goto LABEL_13;
    }
    else
    {
      v21 = *(_QWORD *)(v0 + 80);
      v20 = *(_QWORD *)(v0 + 88);
      v22 = *(_QWORD *)(v0 + 72);
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v20, v22);
    }
  }
  if (qword_1010EA3F0 != -1)
    swift_once(&qword_1010EA3F0, sub_100C24310);
  v23 = type metadata accessor for Logger(0);
  v24 = sub_10001A9E8(v23, (uint64_t)qword_1011B7EF8);
  v25 = Logger.logObject.getter(v24);
  v26 = static os_log_type_t.error.getter(v25);
  if (os_log_type_enabled(v25, v26))
  {
    v27 = (uint8_t *)swift_slowAlloc(12, -1);
    v28 = swift_slowAlloc(32, -1);
    v32 = v28;
    *(_DWORD *)v27 = 136446210;
    *(_QWORD *)(v0 + 32) = sub_100016940(0xD000000000000020, 0x8000000100EEF300, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v27 + 4, v27 + 12);
    _os_log_impl((void *)&_mh_execute_header, v25, v26, "%{public}s Could not read credential data.", v27, 0xCu);
    swift_arrayDestroy(v28, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v28, -1, -1);
    swift_slowDealloc(v27, -1, -1);
  }

  v17 = 0;
  v19 = 0xC000000000000000;
LABEL_13:
  v30 = *(_QWORD *)(v0 + 56);
  v29 = *(_QWORD *)(v0 + 64);
  swift_task_dealloc(*(_QWORD *)(v0 + 88));
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  return (*(uint64_t (**)(uint64_t, unint64_t))(v0 + 8))(v17, v19);
}

uint64_t sub_100B23F84()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  if (qword_1010EA3F0 != -1)
    swift_once(&qword_1010EA3F0, sub_100C24310);
  v1 = *(_QWORD *)(v0 + 104);
  v2 = type metadata accessor for Logger(0);
  sub_10001A9E8(v2, (uint64_t)qword_1011B7EF8);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter(v4);
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 104);
  if (v6)
  {
    v8 = swift_slowAlloc(22, -1);
    v9 = (uint64_t *)swift_slowAlloc(8, -1);
    v10 = swift_slowAlloc(32, -1);
    v16 = v10;
    *(_DWORD *)v8 = 136446466;
    *(_QWORD *)(v0 + 16) = sub_100016940(0xD000000000000020, 0x8000000100EEF300, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v8 + 4, v8 + 12);
    *(_WORD *)(v8 + 12) = 2114;
    swift_errorRetain(v7);
    v11 = _swift_stdlib_bridgeErrorToNSError(v7);
    *(_QWORD *)(v0 + 24) = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v8 + 14, v8 + 22);
    *v9 = v11;
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "%{public}s Cannot get authorization header %{public}@.", (uint8_t *)v8, 0x16u);
    v12 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v9, 1, v12);
    swift_slowDealloc(v9, -1, -1);
    swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 104));
    swift_errorRelease(v7);
  }

  swift_errorRelease(v7);
  v13 = *(_QWORD *)(v0 + 56);
  v14 = *(_QWORD *)(v0 + 64);
  swift_task_dealloc(*(_QWORD *)(v0 + 88));
  swift_task_dealloc(v14);
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(_QWORD, unint64_t))(v0 + 8))(0, 0xC000000000000000);
}

uint64_t sub_100B241E4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v1 = type metadata accessor for String.Encoding(0);
  v0[5] = v1;
  v2 = *(_QWORD *)(v1 - 8);
  v0[6] = v2;
  v0[7] = swift_task_alloc((*(_QWORD *)(v2 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_10001A9A8(&qword_101115228);
  v4 = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v0[8] = v4;
  v5 = type metadata accessor for SearchpartyAccount(0);
  v0[9] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v0[10] = v6;
  v0[11] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (_QWORD *)swift_task_alloc(async function pointer to static AppleAccount.searchpartyAccount.getter[1]);
  v0[12] = v7;
  *v7 = v0;
  v7[1] = sub_100B242AC;
  return static AppleAccount.searchpartyAccount.getter(v4);
}

uint64_t sub_100B242AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 96);
  *(_QWORD *)(*(_QWORD *)v1 + 104) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_100B245FC;
  else
    v3 = sub_100B24310;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_100B24310()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;

  v1 = *(_QWORD *)(v0 + 72);
  v2 = *(_QWORD *)(v0 + 80);
  v3 = *(_QWORD *)(v0 + 64);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_100004048(v3, &qword_101115228);
  }
  else
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v2 + 32))(*(_QWORD *)(v0 + 88), v3, v1);
    v4 = RequestCredential.authHeaders.getter(v1, &protocol witness table for SearchpartyAccount);
    if (*(_QWORD *)(v4 + 16) && (v5 = sub_100518DA0(0x7A69726F68747541, 0xED00006E6F697461), (v6 & 1) != 0))
    {
      v8 = *(_QWORD *)(v0 + 80);
      v7 = *(_QWORD *)(v0 + 88);
      v9 = *(_QWORD *)(v0 + 72);
      v11 = *(_QWORD *)(v0 + 48);
      v10 = *(_QWORD *)(v0 + 56);
      v12 = *(_QWORD *)(v0 + 40);
      v13 = (uint64_t *)(*(_QWORD *)(v4 + 56) + 16 * v5);
      v14 = *v13;
      v15 = v13[1];
      swift_bridgeObjectRetain(v15);
      v16 = swift_bridgeObjectRelease();
      static String.Encoding.utf8.getter(v16);
      v17 = String.data(using:allowLossyConversion:)(v10, 0, v14, v15);
      v19 = v18;
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
      (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
      if (v19 >> 60 != 15)
        goto LABEL_13;
    }
    else
    {
      v21 = *(_QWORD *)(v0 + 80);
      v20 = *(_QWORD *)(v0 + 88);
      v22 = *(_QWORD *)(v0 + 72);
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v20, v22);
    }
  }
  if (qword_1010EA3F0 != -1)
    swift_once(&qword_1010EA3F0, sub_100C24310);
  v23 = type metadata accessor for Logger(0);
  v24 = sub_10001A9E8(v23, (uint64_t)qword_1011B7EF8);
  v25 = Logger.logObject.getter(v24);
  v26 = static os_log_type_t.error.getter(v25);
  if (os_log_type_enabled(v25, v26))
  {
    v27 = (uint8_t *)swift_slowAlloc(12, -1);
    v28 = swift_slowAlloc(32, -1);
    v32 = v28;
    *(_DWORD *)v27 = 136446210;
    *(_QWORD *)(v0 + 32) = sub_100016940(0xD000000000000020, 0x8000000100EEF350, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v27 + 4, v27 + 12);
    _os_log_impl((void *)&_mh_execute_header, v25, v26, "%{public}s Could not read credential data.", v27, 0xCu);
    swift_arrayDestroy(v28, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v28, -1, -1);
    swift_slowDealloc(v27, -1, -1);
  }

  v17 = 0;
  v19 = 0xC000000000000000;
LABEL_13:
  v30 = *(_QWORD *)(v0 + 56);
  v29 = *(_QWORD *)(v0 + 64);
  swift_task_dealloc(*(_QWORD *)(v0 + 88));
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  return (*(uint64_t (**)(uint64_t, unint64_t))(v0 + 8))(v17, v19);
}

uint64_t sub_100B245FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  if (qword_1010EA3F0 != -1)
    swift_once(&qword_1010EA3F0, sub_100C24310);
  v1 = *(_QWORD *)(v0 + 104);
  v2 = type metadata accessor for Logger(0);
  sub_10001A9E8(v2, (uint64_t)qword_1011B7EF8);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter(v4);
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 104);
  if (v6)
  {
    v8 = swift_slowAlloc(22, -1);
    v9 = (uint64_t *)swift_slowAlloc(8, -1);
    v10 = swift_slowAlloc(32, -1);
    v16 = v10;
    *(_DWORD *)v8 = 136446466;
    *(_QWORD *)(v0 + 16) = sub_100016940(0xD000000000000020, 0x8000000100EEF350, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v8 + 4, v8 + 12);
    *(_WORD *)(v8 + 12) = 2114;
    swift_errorRetain(v7);
    v11 = _swift_stdlib_bridgeErrorToNSError(v7);
    *(_QWORD *)(v0 + 24) = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v8 + 14, v8 + 22);
    *v9 = v11;
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "%{public}s Cannot get authorization header %{public}@.", (uint8_t *)v8, 0x16u);
    v12 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v9, 1, v12);
    swift_slowDealloc(v9, -1, -1);
    swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 104));
    swift_errorRelease(v7);
  }

  swift_errorRelease(v7);
  v13 = *(_QWORD *)(v0 + 56);
  v14 = *(_QWORD *)(v0 + 64);
  swift_task_dealloc(*(_QWORD *)(v0 + 88));
  swift_task_dealloc(v14);
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(_QWORD, unint64_t))(v0 + 8))(0, 0xC000000000000000);
}

uint64_t sub_100B2485C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v1 = type metadata accessor for String.Encoding(0);
  v0[5] = v1;
  v2 = *(_QWORD *)(v1 - 8);
  v0[6] = v2;
  v0[7] = swift_task_alloc((*(_QWORD *)(v2 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_10001A9A8(&qword_101115228);
  v4 = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v0[8] = v4;
  v5 = type metadata accessor for SearchpartyAccount(0);
  v0[9] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v0[10] = v6;
  v0[11] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (_QWORD *)swift_task_alloc(async function pointer to static AppleAccount.searchpartyAccount.getter[1]);
  v0[12] = v7;
  *v7 = v0;
  v7[1] = sub_100B24924;
  return static AppleAccount.searchpartyAccount.getter(v4);
}

uint64_t sub_100B24924()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 96);
  *(_QWORD *)(*(_QWORD *)v1 + 104) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_100B24C74;
  else
    v3 = sub_100B24988;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_100B24988()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;

  v1 = *(_QWORD *)(v0 + 72);
  v2 = *(_QWORD *)(v0 + 80);
  v3 = *(_QWORD *)(v0 + 64);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_100004048(v3, &qword_101115228);
  }
  else
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v2 + 32))(*(_QWORD *)(v0 + 88), v3, v1);
    v4 = RequestCredential.authHeaders.getter(v1, &protocol witness table for SearchpartyAccount);
    if (*(_QWORD *)(v4 + 16) && (v5 = sub_100518DA0(0x7A69726F68747541, 0xED00006E6F697461), (v6 & 1) != 0))
    {
      v8 = *(_QWORD *)(v0 + 80);
      v7 = *(_QWORD *)(v0 + 88);
      v9 = *(_QWORD *)(v0 + 72);
      v11 = *(_QWORD *)(v0 + 48);
      v10 = *(_QWORD *)(v0 + 56);
      v12 = *(_QWORD *)(v0 + 40);
      v13 = (uint64_t *)(*(_QWORD *)(v4 + 56) + 16 * v5);
      v14 = *v13;
      v15 = v13[1];
      swift_bridgeObjectRetain(v15);
      v16 = swift_bridgeObjectRelease();
      static String.Encoding.utf8.getter(v16);
      v17 = String.data(using:allowLossyConversion:)(v10, 0, v14, v15);
      v19 = v18;
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
      (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
      if (v19 >> 60 != 15)
        goto LABEL_13;
    }
    else
    {
      v21 = *(_QWORD *)(v0 + 80);
      v20 = *(_QWORD *)(v0 + 88);
      v22 = *(_QWORD *)(v0 + 72);
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v20, v22);
    }
  }
  if (qword_1010EA3F0 != -1)
    swift_once(&qword_1010EA3F0, sub_100C24310);
  v23 = type metadata accessor for Logger(0);
  v24 = sub_10001A9E8(v23, (uint64_t)qword_1011B7EF8);
  v25 = Logger.logObject.getter(v24);
  v26 = static os_log_type_t.error.getter(v25);
  if (os_log_type_enabled(v25, v26))
  {
    v27 = (uint8_t *)swift_slowAlloc(12, -1);
    v28 = swift_slowAlloc(32, -1);
    v32 = v28;
    *(_DWORD *)v27 = 136446210;
    *(_QWORD *)(v0 + 32) = sub_100016940(0xD00000000000001CLL, 0x8000000100EEF1A0, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v27 + 4, v27 + 12);
    _os_log_impl((void *)&_mh_execute_header, v25, v26, "%{public}s Could not read credential data.", v27, 0xCu);
    swift_arrayDestroy(v28, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v28, -1, -1);
    swift_slowDealloc(v27, -1, -1);
  }

  v17 = 0;
  v19 = 0xC000000000000000;
LABEL_13:
  v30 = *(_QWORD *)(v0 + 56);
  v29 = *(_QWORD *)(v0 + 64);
  swift_task_dealloc(*(_QWORD *)(v0 + 88));
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  return (*(uint64_t (**)(uint64_t, unint64_t))(v0 + 8))(v17, v19);
}

uint64_t sub_100B24C74()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  if (qword_1010EA3F0 != -1)
    swift_once(&qword_1010EA3F0, sub_100C24310);
  v1 = *(_QWORD *)(v0 + 104);
  v2 = type metadata accessor for Logger(0);
  sub_10001A9E8(v2, (uint64_t)qword_1011B7EF8);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter(v4);
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 104);
  if (v6)
  {
    v8 = swift_slowAlloc(22, -1);
    v9 = (uint64_t *)swift_slowAlloc(8, -1);
    v10 = swift_slowAlloc(32, -1);
    v16 = v10;
    *(_DWORD *)v8 = 136446466;
    *(_QWORD *)(v0 + 16) = sub_100016940(0xD00000000000001CLL, 0x8000000100EEF1A0, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v8 + 4, v8 + 12);
    *(_WORD *)(v8 + 12) = 2114;
    swift_errorRetain(v7);
    v11 = _swift_stdlib_bridgeErrorToNSError(v7);
    *(_QWORD *)(v0 + 24) = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v8 + 14, v8 + 22);
    *v9 = v11;
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "%{public}s Cannot get authorization header %{public}@.", (uint8_t *)v8, 0x16u);
    v12 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v9, 1, v12);
    swift_slowDealloc(v9, -1, -1);
    swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 104));
    swift_errorRelease(v7);
  }

  swift_errorRelease(v7);
  v13 = *(_QWORD *)(v0 + 56);
  v14 = *(_QWORD *)(v0 + 64);
  swift_task_dealloc(*(_QWORD *)(v0 + 88));
  swift_task_dealloc(v14);
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(_QWORD, unint64_t))(v0 + 8))(0, 0xC000000000000000);
}

uint64_t sub_100B24ED4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v1 = type metadata accessor for String.Encoding(0);
  v0[5] = v1;
  v2 = *(_QWORD *)(v1 - 8);
  v0[6] = v2;
  v0[7] = swift_task_alloc((*(_QWORD *)(v2 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_10001A9A8(&qword_101115228);
  v4 = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v0[8] = v4;
  v5 = type metadata accessor for SearchpartyAccount(0);
  v0[9] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v0[10] = v6;
  v0[11] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (_QWORD *)swift_task_alloc(async function pointer to static AppleAccount.searchpartyAccount.getter[1]);
  v0[12] = v7;
  *v7 = v0;
  v7[1] = sub_100B24F9C;
  return static AppleAccount.searchpartyAccount.getter(v4);
}

uint64_t sub_100B24F9C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 96);
  *(_QWORD *)(*(_QWORD *)v1 + 104) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_100B252EC;
  else
    v3 = sub_100B25000;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_100B25000()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;

  v1 = *(_QWORD *)(v0 + 72);
  v2 = *(_QWORD *)(v0 + 80);
  v3 = *(_QWORD *)(v0 + 64);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_100004048(v3, &qword_101115228);
  }
  else
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v2 + 32))(*(_QWORD *)(v0 + 88), v3, v1);
    v4 = RequestCredential.authHeaders.getter(v1, &protocol witness table for SearchpartyAccount);
    if (*(_QWORD *)(v4 + 16) && (v5 = sub_100518DA0(0x7A69726F68747541, 0xED00006E6F697461), (v6 & 1) != 0))
    {
      v8 = *(_QWORD *)(v0 + 80);
      v7 = *(_QWORD *)(v0 + 88);
      v9 = *(_QWORD *)(v0 + 72);
      v11 = *(_QWORD *)(v0 + 48);
      v10 = *(_QWORD *)(v0 + 56);
      v12 = *(_QWORD *)(v0 + 40);
      v13 = (uint64_t *)(*(_QWORD *)(v4 + 56) + 16 * v5);
      v14 = *v13;
      v15 = v13[1];
      swift_bridgeObjectRetain(v15);
      v16 = swift_bridgeObjectRelease();
      static String.Encoding.utf8.getter(v16);
      v17 = String.data(using:allowLossyConversion:)(v10, 0, v14, v15);
      v19 = v18;
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
      (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
      if (v19 >> 60 != 15)
        goto LABEL_13;
    }
    else
    {
      v21 = *(_QWORD *)(v0 + 80);
      v20 = *(_QWORD *)(v0 + 88);
      v22 = *(_QWORD *)(v0 + 72);
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v20, v22);
    }
  }
  if (qword_1010EA3F0 != -1)
    swift_once(&qword_1010EA3F0, sub_100C24310);
  v23 = type metadata accessor for Logger(0);
  v24 = sub_10001A9E8(v23, (uint64_t)qword_1011B7EF8);
  v25 = Logger.logObject.getter(v24);
  v26 = static os_log_type_t.error.getter(v25);
  if (os_log_type_enabled(v25, v26))
  {
    v27 = (uint8_t *)swift_slowAlloc(12, -1);
    v28 = swift_slowAlloc(32, -1);
    v32 = v28;
    *(_DWORD *)v27 = 136446210;
    *(_QWORD *)(v0 + 32) = sub_100016940(0xD00000000000001ELL, 0x8000000100EEF330, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v27 + 4, v27 + 12);
    _os_log_impl((void *)&_mh_execute_header, v25, v26, "%{public}s Could not read credential data.", v27, 0xCu);
    swift_arrayDestroy(v28, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v28, -1, -1);
    swift_slowDealloc(v27, -1, -1);
  }

  v17 = 0;
  v19 = 0xC000000000000000;
LABEL_13:
  v30 = *(_QWORD *)(v0 + 56);
  v29 = *(_QWORD *)(v0 + 64);
  swift_task_dealloc(*(_QWORD *)(v0 + 88));
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  return (*(uint64_t (**)(uint64_t, unint64_t))(v0 + 8))(v17, v19);
}

uint64_t sub_100B252EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  if (qword_1010EA3F0 != -1)
    swift_once(&qword_1010EA3F0, sub_100C24310);
  v1 = *(_QWORD *)(v0 + 104);
  v2 = type metadata accessor for Logger(0);
  sub_10001A9E8(v2, (uint64_t)qword_1011B7EF8);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter(v4);
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 104);
  if (v6)
  {
    v8 = swift_slowAlloc(22, -1);
    v9 = (uint64_t *)swift_slowAlloc(8, -1);
    v10 = swift_slowAlloc(32, -1);
    v16 = v10;
    *(_DWORD *)v8 = 136446466;
    *(_QWORD *)(v0 + 16) = sub_100016940(0xD00000000000001ELL, 0x8000000100EEF330, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v8 + 4, v8 + 12);
    *(_WORD *)(v8 + 12) = 2114;
    swift_errorRetain(v7);
    v11 = _swift_stdlib_bridgeErrorToNSError(v7);
    *(_QWORD *)(v0 + 24) = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v8 + 14, v8 + 22);
    *v9 = v11;
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "%{public}s Cannot get authorization header %{public}@.", (uint8_t *)v8, 0x16u);
    v12 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v9, 1, v12);
    swift_slowDealloc(v9, -1, -1);
    swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 104));
    swift_errorRelease(v7);
  }

  swift_errorRelease(v7);
  v13 = *(_QWORD *)(v0 + 56);
  v14 = *(_QWORD *)(v0 + 64);
  swift_task_dealloc(*(_QWORD *)(v0 + 88));
  swift_task_dealloc(v14);
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(_QWORD, unint64_t))(v0 + 8))(0, 0xC000000000000000);
}

uint64_t sub_100B2554C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v1 = type metadata accessor for String.Encoding(0);
  v0[5] = v1;
  v2 = *(_QWORD *)(v1 - 8);
  v0[6] = v2;
  v0[7] = swift_task_alloc((*(_QWORD *)(v2 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_10001A9A8(&qword_101115228);
  v4 = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v0[8] = v4;
  v5 = type metadata accessor for SearchpartyAccount(0);
  v0[9] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v0[10] = v6;
  v0[11] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (_QWORD *)swift_task_alloc(async function pointer to static AppleAccount.searchpartyAccount.getter[1]);
  v0[12] = v7;
  *v7 = v0;
  v7[1] = sub_100B25614;
  return static AppleAccount.searchpartyAccount.getter(v4);
}

uint64_t sub_100B25614()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 96);
  *(_QWORD *)(*(_QWORD *)v1 + 104) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_100B25964;
  else
    v3 = sub_100B25678;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_100B25678()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;

  v1 = *(_QWORD *)(v0 + 72);
  v2 = *(_QWORD *)(v0 + 80);
  v3 = *(_QWORD *)(v0 + 64);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_100004048(v3, &qword_101115228);
  }
  else
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v2 + 32))(*(_QWORD *)(v0 + 88), v3, v1);
    v4 = RequestCredential.authHeaders.getter(v1, &protocol witness table for SearchpartyAccount);
    if (*(_QWORD *)(v4 + 16) && (v5 = sub_100518DA0(0x7A69726F68747541, 0xED00006E6F697461), (v6 & 1) != 0))
    {
      v8 = *(_QWORD *)(v0 + 80);
      v7 = *(_QWORD *)(v0 + 88);
      v9 = *(_QWORD *)(v0 + 72);
      v11 = *(_QWORD *)(v0 + 48);
      v10 = *(_QWORD *)(v0 + 56);
      v12 = *(_QWORD *)(v0 + 40);
      v13 = (uint64_t *)(*(_QWORD *)(v4 + 56) + 16 * v5);
      v14 = *v13;
      v15 = v13[1];
      swift_bridgeObjectRetain(v15);
      v16 = swift_bridgeObjectRelease();
      static String.Encoding.utf8.getter(v16);
      v17 = String.data(using:allowLossyConversion:)(v10, 0, v14, v15);
      v19 = v18;
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
      (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
      if (v19 >> 60 != 15)
        goto LABEL_13;
    }
    else
    {
      v21 = *(_QWORD *)(v0 + 80);
      v20 = *(_QWORD *)(v0 + 88);
      v22 = *(_QWORD *)(v0 + 72);
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v20, v22);
    }
  }
  if (qword_1010EA3F0 != -1)
    swift_once(&qword_1010EA3F0, sub_100C24310);
  v23 = type metadata accessor for Logger(0);
  v24 = sub_10001A9E8(v23, (uint64_t)qword_1011B7EF8);
  v25 = Logger.logObject.getter(v24);
  v26 = static os_log_type_t.error.getter(v25);
  if (os_log_type_enabled(v25, v26))
  {
    v27 = (uint8_t *)swift_slowAlloc(12, -1);
    v28 = swift_slowAlloc(32, -1);
    v32 = v28;
    *(_DWORD *)v27 = 136446210;
    *(_QWORD *)(v0 + 32) = sub_100016940(0xD000000000000013, 0x8000000100EEF160, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v27 + 4, v27 + 12);
    _os_log_impl((void *)&_mh_execute_header, v25, v26, "%{public}s Could not read credential data.", v27, 0xCu);
    swift_arrayDestroy(v28, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v28, -1, -1);
    swift_slowDealloc(v27, -1, -1);
  }

  v17 = 0;
  v19 = 0xC000000000000000;
LABEL_13:
  v30 = *(_QWORD *)(v0 + 56);
  v29 = *(_QWORD *)(v0 + 64);
  swift_task_dealloc(*(_QWORD *)(v0 + 88));
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  return (*(uint64_t (**)(uint64_t, unint64_t))(v0 + 8))(v17, v19);
}

uint64_t sub_100B25964()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  if (qword_1010EA3F0 != -1)
    swift_once(&qword_1010EA3F0, sub_100C24310);
  v1 = *(_QWORD *)(v0 + 104);
  v2 = type metadata accessor for Logger(0);
  sub_10001A9E8(v2, (uint64_t)qword_1011B7EF8);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter(v4);
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 104);
  if (v6)
  {
    v8 = swift_slowAlloc(22, -1);
    v9 = (uint64_t *)swift_slowAlloc(8, -1);
    v10 = swift_slowAlloc(32, -1);
    v16 = v10;
    *(_DWORD *)v8 = 136446466;
    *(_QWORD *)(v0 + 16) = sub_100016940(0xD000000000000013, 0x8000000100EEF160, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v8 + 4, v8 + 12);
    *(_WORD *)(v8 + 12) = 2114;
    swift_errorRetain(v7);
    v11 = _swift_stdlib_bridgeErrorToNSError(v7);
    *(_QWORD *)(v0 + 24) = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v8 + 14, v8 + 22);
    *v9 = v11;
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "%{public}s Cannot get authorization header %{public}@.", (uint8_t *)v8, 0x16u);
    v12 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v9, 1, v12);
    swift_slowDealloc(v9, -1, -1);
    swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 104));
    swift_errorRelease(v7);
  }

  swift_errorRelease(v7);
  v13 = *(_QWORD *)(v0 + 56);
  v14 = *(_QWORD *)(v0 + 64);
  swift_task_dealloc(*(_QWORD *)(v0 + 88));
  swift_task_dealloc(v14);
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(_QWORD, unint64_t))(v0 + 8))(0, 0xC000000000000000);
}

uint64_t sub_100B25BC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3[60] = a2;
  v3[61] = a3;
  v3[59] = a1;
  v4 = type metadata accessor for HashAlgorithm(0);
  v3[62] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[63] = v5;
  v3[64] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100B25C28, 0, 0);
}

uint64_t sub_100B25C28()
{
  uint64_t v0;
  void *v1;
  id v2;
  unsigned int v3;
  NSString v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;

  if (qword_1010EA198 != -1)
    swift_once(&qword_1010EA198, sub_100ACDE4C);
  v1 = (void *)qword_1011B7C08;
  v2 = objc_msgSend((id)objc_opt_self(FMSystemInfo), "sharedInstance");
  v3 = objc_msgSend(v2, "isInternalBuild");

  if (!v3)
    return swift_task_switch(sub_100B25DF0, *(_QWORD *)(v0 + 488), 0);
  v4 = String._bridgeToObjectiveC()();
  v5 = objc_msgSend(v1, "BOOLForKey:", v4);

  if (!v5)
    return swift_task_switch(sub_100B25DF0, *(_QWORD *)(v0 + 488), 0);
  if (qword_1010EA3F0 != -1)
    swift_once(&qword_1010EA3F0, sub_100C24310);
  v6 = type metadata accessor for Logger(0);
  v7 = sub_10001A9E8(v6, (uint64_t)qword_1011B7EF8);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter(v8);
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "ExcludeBAACerts defaults is enabled. Skipping BAA", v10, 2u);
    swift_slowDealloc(v10, -1, -1);
  }

  swift_task_dealloc(*(_QWORD *)(v0 + 512));
  return (*(uint64_t (**)(_QWORD *))(v0 + 8))(_swiftEmptyDictionarySingleton);
}

uint64_t sub_100B25DF0()
{
  uint64_t v0;
  char v1;
  _QWORD *v2;

  v1 = *(_BYTE *)(*(_QWORD *)(v0 + 488) + OBJC_IVAR____TtC12searchpartyd21DeviceIdentityUtility_signingType);
  v2 = (_QWORD *)swift_task_alloc(dword_1010F9C3C);
  *(_QWORD *)(v0 + 520) = v2;
  *v2 = v0;
  v2[1] = sub_100B25E54;
  return sub_1003772D4(v0 + 304, v1);
}

uint64_t sub_100B25E54()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v10;

  v1 = *v0;
  v10 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 520));
  v2 = *(_QWORD *)(v1 + 328);
  v3 = *(_QWORD *)(v1 + 336);
  v4 = *(_BYTE *)(v1 + 344);
  v5 = *(_QWORD *)(v1 + 304);
  v6 = *(_QWORD *)(v1 + 312);
  v7 = *(_QWORD *)(v1 + 320);
  v8 = (_QWORD *)swift_task_alloc(dword_101119D6C);
  *(_QWORD *)(v1 + 528) = v8;
  *v8 = v10;
  v8[1] = sub_100B25EF8;
  return sub_100C2490C(v3, v4, v5, v6, v7, v2);
}

uint64_t sub_100B25EF8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t **v3;
  uint64_t v6;
  uint64_t *v7;
  uint64_t **v9;

  v6 = (*v3)[66];
  v7 = *v3;
  v7[67] = a1;
  v7[68] = a2;
  v7[69] = v2;
  swift_task_dealloc(v6);
  if (v2)
    return swift_task_switch(sub_100B2B9EC, v7[61], 0);
  sub_100B299CC((uint64_t)(v7 + 38));
  v9 = (uint64_t **)swift_task_alloc(dword_101119D74);
  v7[70] = (uint64_t)v9;
  *v9 = v7;
  v9[1] = (uint64_t *)sub_100B25FCC;
  return sub_100C25C98((uint64_t)(v7 + 30), v7[59], v7[60], a1, a2);
}

uint64_t sub_100B25FCC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 560);
  *(_QWORD *)(*v1 + 568) = v0;
  swift_task_dealloc(v3);
  v4 = *(_QWORD *)(v2 + 488);
  swift_bridgeObjectRelease();
  if (v0)
    v5 = sub_100B2B9F0;
  else
    v5 = sub_100B2603C;
  return swift_task_switch(v5, v4, 0);
}

uint64_t sub_100B2603C()
{
  uint64_t v0;

  return swift_task_switch(sub_100B2B9F4, 0, 0);
}

uint64_t sub_100B26078(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3[60] = a2;
  v3[61] = a3;
  v3[59] = a1;
  v4 = type metadata accessor for HashAlgorithm(0);
  v3[62] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[63] = v5;
  v3[64] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100B260DC, 0, 0);
}

uint64_t sub_100B260DC()
{
  uint64_t v0;
  void *v1;
  id v2;
  unsigned int v3;
  NSString v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;

  if (qword_1010EA198 != -1)
    swift_once(&qword_1010EA198, sub_100ACDE4C);
  v1 = (void *)qword_1011B7C08;
  v2 = objc_msgSend((id)objc_opt_self(FMSystemInfo), "sharedInstance");
  v3 = objc_msgSend(v2, "isInternalBuild");

  if (!v3)
    return swift_task_switch(sub_100B262A4, *(_QWORD *)(v0 + 488), 0);
  v4 = String._bridgeToObjectiveC()();
  v5 = objc_msgSend(v1, "BOOLForKey:", v4);

  if (!v5)
    return swift_task_switch(sub_100B262A4, *(_QWORD *)(v0 + 488), 0);
  if (qword_1010EA3F0 != -1)
    swift_once(&qword_1010EA3F0, sub_100C24310);
  v6 = type metadata accessor for Logger(0);
  v7 = sub_10001A9E8(v6, (uint64_t)qword_1011B7EF8);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter(v8);
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "ExcludeBAACerts defaults is enabled. Skipping BAA", v10, 2u);
    swift_slowDealloc(v10, -1, -1);
  }

  swift_task_dealloc(*(_QWORD *)(v0 + 512));
  return (*(uint64_t (**)(_QWORD *))(v0 + 8))(_swiftEmptyDictionarySingleton);
}

uint64_t sub_100B262A4()
{
  uint64_t v0;
  char v1;
  _QWORD *v2;

  v1 = *(_BYTE *)(*(_QWORD *)(v0 + 488) + OBJC_IVAR____TtC12searchpartyd21DeviceIdentityUtility_signingType);
  v2 = (_QWORD *)swift_task_alloc(dword_1010F9C3C);
  *(_QWORD *)(v0 + 520) = v2;
  *v2 = v0;
  v2[1] = sub_100B26308;
  return sub_1003772D4(v0 + 304, v1);
}

uint64_t sub_100B26308()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v10;

  v1 = *v0;
  v10 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 520));
  v2 = *(_QWORD *)(v1 + 328);
  v3 = *(_QWORD *)(v1 + 336);
  v4 = *(_BYTE *)(v1 + 344);
  v5 = *(_QWORD *)(v1 + 304);
  v6 = *(_QWORD *)(v1 + 312);
  v7 = *(_QWORD *)(v1 + 320);
  v8 = (_QWORD *)swift_task_alloc(dword_101119D6C);
  *(_QWORD *)(v1 + 528) = v8;
  *v8 = v10;
  v8[1] = sub_100B263AC;
  return sub_100C2490C(v3, v4, v5, v6, v7, v2);
}

uint64_t sub_100B263AC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t **v3;
  uint64_t v6;
  uint64_t *v7;
  uint64_t **v9;

  v6 = (*v3)[66];
  v7 = *v3;
  v7[67] = a1;
  v7[68] = a2;
  v7[69] = v2;
  swift_task_dealloc(v6);
  if (v2)
    return swift_task_switch(sub_100B264F0, v7[61], 0);
  sub_100B299CC((uint64_t)(v7 + 38));
  v9 = (uint64_t **)swift_task_alloc(dword_101119D74);
  v7[70] = (uint64_t)v9;
  *v9 = v7;
  v9[1] = (uint64_t *)sub_100B26480;
  return sub_100C25C98((uint64_t)(v7 + 30), v7[59], v7[60], a1, a2);
}

uint64_t sub_100B26480()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 560);
  *(_QWORD *)(*v1 + 568) = v0;
  swift_task_dealloc(v3);
  v4 = *(_QWORD *)(v2 + 488);
  swift_bridgeObjectRelease();
  if (v0)
    v5 = sub_100B26B80;
  else
    v5 = sub_100B2652C;
  return swift_task_switch(v5, v4, 0);
}

uint64_t sub_100B264F0()
{
  uint64_t v0;

  sub_100B299CC(v0 + 304);
  swift_task_dealloc(*(_QWORD *)(v0 + 512));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100B2652C()
{
  uint64_t v0;

  return swift_task_switch(sub_100B26568, 0, 0);
}

uint64_t sub_100B26568()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  BOOL v11;
  uint64_t v12;
  unint64_t v13;
  uint8_t *v14;
  uint64_t v15;
  unint64_t v16;
  uint8_t *v17;
  Swift::String v18;
  uint64_t countAndFlagsBits;
  void *object;
  void *v21;
  Swift::String v22;
  uint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  void (*v35)(uint64_t, uint64_t);
  Swift::String v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t inited;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  NSObject *v46;
  os_log_type_t v47;
  uint8_t *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *context;
  uint64_t v53;
  uint64_t v54;

  v1 = v0 + 352;
  v2 = v0 + 368;
  if (qword_1010EA3F0 != -1)
    swift_once(&qword_1010EA3F0, sub_100C24310);
  v3 = v0 + 384;
  v4 = v0 + 448;
  v6 = *(_QWORD *)(v0 + 472);
  v5 = *(_QWORD *)(v0 + 480);
  v7 = type metadata accessor for Logger(0);
  sub_10001A9E8(v7, (uint64_t)qword_1011B7EF8);
  sub_10001BBBC(v6, v5);
  v8 = sub_10001BBBC(v6, v5);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.default.getter(v9);
  v11 = os_log_type_enabled(v9, v10);
  v12 = *(_QWORD *)(v0 + 472);
  v13 = *(_QWORD *)(v0 + 480);
  if (v11)
  {
    v14 = (uint8_t *)swift_slowAlloc(12, -1);
    v51 = swift_slowAlloc(32, -1);
    v54 = v51;
    *(_DWORD *)v14 = 136315138;
    v15 = Data.hexString.getter(v12, v13);
    *(_QWORD *)(v0 + 464) = sub_100016940(v15, v16, &v54);
    v4 = v0 + 448;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 464, v0 + 472, v14 + 4, v14 + 12);
    v3 = v0 + 384;
    swift_bridgeObjectRelease();
    sub_10001BC14(v12, v13);
    sub_10001BC14(v12, v13);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Successfully signed request: %s.", v14, 0xCu);
    swift_arrayDestroy(v51, 1, (char *)&type metadata for Any + 8);
    v1 = v0 + 352;
    swift_slowDealloc(v51, -1, -1);
    v17 = v14;
    v2 = v0 + 368;
    swift_slowDealloc(v17, -1, -1);
  }
  else
  {
    sub_10001BC14(*(_QWORD *)(v0 + 472), *(_QWORD *)(v0 + 480));
    sub_10001BC14(v12, v13);
  }

  context = objc_autoreleasePoolPush();
  v18 = Data.base64EncodedString(options:)(0);
  countAndFlagsBits = v18._countAndFlagsBits;
  object = v18._object;
  sub_100005CF0(v0 + 288, v1, &qword_1010F6350);
  sub_100005CF0(v0 + 256, v2, &qword_1011194A0);
  sub_100005CF0(v2, v0 + 432, &qword_1011194A0);
  if (*(_QWORD *)(v0 + 440) >> 60 == 15)
  {
    sub_100004A78(v1);
    v53 = 0;
    v21 = 0;
  }
  else
  {
    sub_100004A78(v1);
    v22 = Data.base64EncodedString(options:)(0);
    v53 = v22._countAndFlagsBits;
    v21 = v22._object;
  }
  v23 = (uint64_t *)(v0 + 240);
  sub_100005CF0(v0 + 272, v3, &qword_1011194A0);
  sub_100005CF0(v3, v4, &qword_1011194A0);
  v24 = *(_QWORD *)(v0 + 456);
  if (v24 >> 60 == 15)
  {
    v25 = 0;
    v26 = 0;
  }
  else
  {
    v27 = v1;
    v29 = *(_QWORD *)(v0 + 504);
    v28 = *(_QWORD *)(v0 + 512);
    v30 = *(_QWORD *)(v0 + 496);
    v31 = *(_QWORD *)(v0 + 448);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v29 + 104))(v28, enum case for HashAlgorithm.sha256(_:), v30);
    v32 = Data.hash(algorithm:)(v28, v31, v24);
    v34 = v33;
    v35 = *(void (**)(uint64_t, uint64_t))(v29 + 8);
    v1 = v27;
    v35(v28, v30);
    v36 = Data.base64EncodedString(options:)(0);
    v25 = v36._countAndFlagsBits;
    v26 = v36._object;
    v37 = v32;
    countAndFlagsBits = v18._countAndFlagsBits;
    v38 = v34;
    object = v18._object;
    v23 = (uint64_t *)(v0 + 240);
    sub_10001BC14(v37, v38);
  }
  objc_autoreleasePoolPop(context);
  if (v21 && v26)
  {
    v39 = sub_10001A9A8((uint64_t *)&unk_1010F49C0);
    inited = swift_initStackObject(v39, v0 + 16);
    *(_OWORD *)(inited + 16) = xmmword_100E221E0;
    strcpy((char *)(inited + 32), "X-Apple-Sign1");
    *(_WORD *)(inited + 46) = -4864;
    *(_QWORD *)(inited + 48) = v53;
    *(_QWORD *)(inited + 56) = v21;
    strcpy((char *)(inited + 64), "X-Apple-Sign2");
    *(_WORD *)(inited + 78) = -4864;
    *(_QWORD *)(inited + 80) = v25;
    *(_QWORD *)(inited + 88) = v26;
    strcpy((char *)(inited + 96), "X-Apple-Sign3");
    *(_WORD *)(inited + 110) = -4864;
    *(_QWORD *)(inited + 112) = countAndFlagsBits;
    *(_QWORD *)(inited + 120) = object;
    swift_bridgeObjectRetain(object);
    swift_bridgeObjectRetain(v21);
    v41 = v26;
LABEL_17:
    swift_bridgeObjectRetain(v41);
    v44 = sub_1006B8DC4(inited);
    sub_100B29A44(v23);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_100B29AAC(v1);
    swift_task_dealloc(*(_QWORD *)(v0 + 512));
    return (*(uint64_t (**)(unint64_t))(v0 + 8))(v44);
  }
  v42 = sub_100005CF0(v1, v0 + 400, &qword_1010F6350);
  if (*(_QWORD *)(v0 + 408))
  {
    *(_OWORD *)(v0 + 416) = *(_OWORD *)(v0 + 400);
    v43 = sub_10001A9A8((uint64_t *)&unk_1010F49C0);
    inited = swift_initStackObject(v43, v0 + 144);
    *(_OWORD *)(inited + 16) = xmmword_100E22B10;
    strcpy((char *)(inited + 32), "X-Apple-Sign");
    *(_BYTE *)(inited + 45) = 0;
    *(_WORD *)(inited + 46) = -5120;
    *(_QWORD *)(inited + 48) = countAndFlagsBits;
    *(_QWORD *)(inited + 56) = object;
    strcpy((char *)(inited + 64), "X-Apple-Cert");
    *(_BYTE *)(inited + 77) = 0;
    *(_WORD *)(inited + 78) = -5120;
    *(_OWORD *)(inited + 80) = *(_OWORD *)(v0 + 416);
    sub_100004A78(v1);
    v41 = object;
    goto LABEL_17;
  }
  v46 = Logger.logObject.getter(v42);
  v47 = static os_log_type_t.error.getter(v46);
  if (os_log_type_enabled(v46, v47))
  {
    v48 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v48 = 0;
    _os_log_impl((void *)&_mh_execute_header, v46, v47, "Could not get certs for attestation.", v48, 2u);
    swift_slowDealloc(v48, -1, -1);
  }

  v49 = sub_100B29A00();
  v50 = swift_allocError(&type metadata for IdentitySigningHeaderError, v49, 0, 0);
  swift_willThrow(v50);
  sub_100B29A44(v23);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc(*(_QWORD *)(v0 + 512));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100B26B80()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(v0 + 512));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_100B26BC0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v5;
  id v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;

  v0 = type metadata accessor for Date(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v31 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  v32 = (uint64_t)_swiftEmptyDictionarySingleton;
  sub_100109D28(1702195828, 0xE400000000000000, 0xD00000000000001BLL, 0x8000000100ECA2A0, isUniquelyReferenced_nonNull_native);
  v5 = v32;
  swift_bridgeObjectRelease();
  v6 = objc_msgSend((id)objc_opt_self(AKDevice), "currentDevice");
  if (v6)
  {
    v7 = v6;
    v8 = objc_msgSend(v6, "serverFriendlyDescription");

    if (v8)
    {
      v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
      v11 = v10;

      v12 = swift_isUniquelyReferenced_nonNull_native(v5);
      v32 = v5;
      sub_100109D28(v9, v11, 0xD000000000000011, 0x8000000100ECA2C0, v12);
      v13 = v32;
      v14 = swift_bridgeObjectRelease();
      v15 = Date.init()(v14);
      v16 = Date.epoch.getter(v15);
      (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
      v32 = v16;
      v17 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int64, &protocol witness table for Int64);
      v19 = v18;
      v20 = swift_isUniquelyReferenced_nonNull_native(v13);
      v32 = v13;
      sub_100109D28(v17, v19, 0xD000000000000015, 0x8000000100ECA2E0, v20);
      v21 = v32;
      swift_bridgeObjectRelease();
      v32 = 1;
      v22 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
      v24 = v23;
      v25 = swift_isUniquelyReferenced_nonNull_native(v21);
      v32 = v21;
      sub_100109D28(v22, v24, 0xD000000000000013, 0x8000000100ECA300, v25);
      v26 = v32;
      swift_bridgeObjectRelease();
      v27 = sub_10069BB84();
      v29 = v28;
      v30 = swift_isUniquelyReferenced_nonNull_native(v26);
      v32 = v26;
      sub_100109D28((uint64_t)v27, v29, 0x6567412D72657355, 0xEA0000000000746ELL, v30);
      swift_bridgeObjectRelease();
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

uint64_t sub_100B26E64(_QWORD *a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[3];
  char v24;

  v21 = a5;
  v10 = sub_10001A9A8(&qword_1011154F0);
  v22 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1[3];
  v13 = a1[4];
  sub_10001AA44(a1, v14);
  v15 = sub_100B2AB2C();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for KeyDropFetchRequest.KeyDropFetchContent.CodingKeys, &type metadata for KeyDropFetchRequest.KeyDropFetchContent.CodingKeys, v15, v14, v13);
  LOBYTE(v23[0]) = a2;
  v23[1] = a3;
  v23[2] = a4;
  v24 = 0;
  v16 = sub_100ACC338();
  KeyedEncodingContainer.encode<A>(_:forKey:)(v23, &v24, v10, &type metadata for FetchRequestContext, v16);
  if (!v5)
  {
    v23[0] = v21;
    v24 = 1;
    v17 = sub_10001A9A8(&qword_101115500);
    v18 = sub_100B2AB70();
    KeyedEncodingContainer.encode<A>(_:forKey:)(v23, &v24, v10, v17, v18);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v22 + 8))(v12, v10);
}

uint64_t sub_100B26FD0(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *Item;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v22;
  char v23;

  v3 = v1;
  v5 = sub_10001A9A8(&qword_101115568);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  v11 = sub_100B2B434();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for KeyDropFetchRequest.SharedFetchItem.CodingKeys, &type metadata for KeyDropFetchRequest.SharedFetchItem.CodingKeys, v11, v9, v10);
  LOBYTE(v22) = 0;
  v12 = type metadata accessor for UUID(0);
  v13 = sub_100006204(&qword_1010EDAC0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v3, &v22, v5, v12, v13);
  if (!v2)
  {
    Item = (int *)type metadata accessor for KeyDropFetchRequest.SharedFetchItem(0);
    LOBYTE(v22) = *(_BYTE *)(v3 + Item[5]);
    v23 = 1;
    v15 = sub_100435994();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v22, &v23, v5, &type metadata for OwnSubmitPayloadTypes.ShareType, v15);
    v22 = *(_OWORD *)(v3 + Item[6]);
    v23 = 2;
    v16 = sub_100036A58();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v22, &v23, v5, &type metadata for Data, v16);
    *(_QWORD *)&v22 = *(_QWORD *)(v3 + Item[7]);
    v23 = 3;
    v17 = sub_10001A9A8((uint64_t *)&unk_1010FF7C0);
    v18 = sub_100365CCC((unint64_t *)&qword_1010F19E0, (uint64_t *)&unk_1010FF7C0, (uint64_t (*)(void))sub_100036A58, (const char *)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v22, &v23, v5, v17, v18);
    *(_QWORD *)&v22 = *(_QWORD *)(v3 + Item[8]);
    v23 = 4;
    v19 = sub_10001A9A8(&qword_101115550);
    v20 = sub_100365CCC(&qword_101115570, &qword_101115550, (uint64_t (*)(void))sub_100B2B4BC, (const char *)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v22, &v23, v5, v19, v20);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100B27260@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t Item;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  char *v31;
  _QWORD *v32;
  __int128 v33;
  char v34;

  v27 = a2;
  v28 = type metadata accessor for UUID(0);
  v3 = *(_QWORD *)(v28 - 8);
  __chkstk_darwin(v28);
  v30 = (uint64_t *)((char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v29 = sub_10001A9A8(&qword_101115540);
  v5 = *(_QWORD *)(v29 - 8);
  __chkstk_darwin(v29);
  v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  Item = type metadata accessor for KeyDropFetchRequest.SharedFetchItem(0);
  __chkstk_darwin(Item);
  v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v11 = a1[4];
  sub_10001AA44(a1, v12);
  v13 = sub_100B2B434();
  v31 = v7;
  v14 = v32;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for KeyDropFetchRequest.SharedFetchItem.CodingKeys, &type metadata for KeyDropFetchRequest.SharedFetchItem.CodingKeys, v13, v12, v11);
  if (v14)
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  v32 = a1;
  v15 = (uint64_t)v10;
  LOBYTE(v33) = 0;
  v16 = sub_100006204((unint64_t *)&qword_1010EDA90, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v17 = v29;
  v18 = v28;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v30, v28, &v33, v29, v28, v16);
  (*(void (**)(uint64_t, _QWORD *, uint64_t))(v3 + 32))(v15, v30, v18);
  v34 = 1;
  v19 = sub_1004359D8();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v33, &type metadata for OwnSubmitPayloadTypes.ShareType, &v34, v17, &type metadata for OwnSubmitPayloadTypes.ShareType, v19);
  v20 = Item;
  *(_BYTE *)(v15 + *(int *)(Item + 20)) = v33;
  v34 = 2;
  v21 = sub_100036994();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&type metadata for Data, &v34, v17, &type metadata for Data, v21);
  *(_OWORD *)(v15 + *(int *)(Item + 24)) = v33;
  v22 = sub_10001A9A8((uint64_t *)&unk_1010FF7C0);
  v34 = 3;
  v23 = sub_100365CCC((unint64_t *)&qword_1010F4C30, (uint64_t *)&unk_1010FF7C0, (uint64_t (*)(void))sub_100036994, (const char *)&protocol conformance descriptor for <A> [A]);
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v33, v22, &v34, v17, v22, v23);
  *(_QWORD *)(v15 + *(int *)(v20 + 28)) = v33;
  v24 = sub_10001A9A8(&qword_101115550);
  v34 = 4;
  v25 = sub_100365CCC(&qword_101115558, &qword_101115550, (uint64_t (*)(void))sub_100B2B478, (const char *)&protocol conformance descriptor for <A> [A]);
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v33, v24, &v34, v17, v24, v25);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v31, v17);
  *(_QWORD *)(v15 + *(int *)(v20 + 32)) = v33;
  sub_10005972C(v15, v27, type metadata accessor for KeyDropFetchRequest.SharedFetchItem);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v32);
  return sub_1000126B0(v15, type metadata accessor for KeyDropFetchRequest.SharedFetchItem);
}

uint64_t sub_100B276A8(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  __int128 v16;
  char v17;

  v3 = v1;
  v5 = sub_10001A9A8(&qword_101115530);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  v11 = sub_100B2B368();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for KeyDropFetchRequest.BundleDecryption.CodingKeys, &type metadata for KeyDropFetchRequest.BundleDecryption.CodingKeys, v11, v9, v10);
  *(_QWORD *)&v16 = *(_QWORD *)v3;
  v17 = 0;
  v12 = sub_100ACD660();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v16, &v17, v5, &type metadata for SecondaryIndex, v12);
  if (!v2)
  {
    *(_QWORD *)&v16 = *(_QWORD *)(v3 + 8);
    v17 = 1;
    v13 = sub_100B2B3F0();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v16, &v17, v5, &type metadata for PrimaryIndex, v13);
    *(_QWORD *)&v16 = *(_QWORD *)(v3 + 16);
    v17 = 2;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v16, &v17, v5, &type metadata for PrimaryIndex, v13);
    v16 = *(_OWORD *)(v3 + 24);
    v17 = 3;
    v14 = sub_100036A58();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v16, &v17, v5, &type metadata for Data, v14);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100B2786C()
{
  _BYTE *v0;

  if (*v0)
    return 0x6546646572616873;
  else
    return 0x6F43746E65696C63;
}

uint64_t sub_100B278BC@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100B2ABEC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100B278E0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100B2AB2C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100B27908(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100B2AB2C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100B27930(_QWORD *a1)
{
  uint64_t v1;

  return sub_100B26E64(a1, *(_BYTE *)v1, *(_QWORD *)(v1 + 8), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_100B27950()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100B27980 + 4 * byte_100E601B0[*v0]))(0x64496572616873, 0xE700000000000000);
}

uint64_t sub_100B27980()
{
  return 1701869940;
}

uint64_t sub_100B27990()
{
  return 0x6F547265626D656DLL;
}

uint64_t sub_100B279B0()
{
  return 0x76654464656E776FLL;
}

uint64_t sub_100B279D4()
{
  return 0x6E75426572616873;
}

uint64_t sub_100B279F4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100B2AD18(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100B27A18(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100B2B434();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100B27A40(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100B2B434();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100B27A68@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100B27260(a1, a2);
}

uint64_t sub_100B27A7C(_QWORD *a1)
{
  return sub_100B26FD0(a1);
}

uint64_t sub_100B27A90()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100B27AC8 + 4 * byte_100E601B5[*v0]))(0x6E49656C646E7562, 0xEB00000000786564);
}

uint64_t sub_100B27AC8()
{
  return 0x646E497472617473;
}

uint64_t sub_100B27AE4()
{
  return 0x7865646E49646E65;
}

unint64_t sub_100B27AFC()
{
  return 0xD000000000000013;
}

uint64_t sub_100B27B18@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100B2AF78(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100B27B3C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100B2B368();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100B27B64(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100B2B368();
  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_100B27B8C@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  _OWORD v6[2];
  uint64_t v7;

  sub_100B2B150(a1, v6);
  if (!v2)
  {
    result = *(double *)v6;
    v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    *(_QWORD *)(a2 + 32) = v7;
  }
  return result;
}

uint64_t sub_100B27BD0(_QWORD *a1)
{
  return sub_100B276A8(a1);
}

uint64_t sub_100B27BE4@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = a1[1];
  v3 = a1[2];
  v4 = a1[3];
  *a2 = *a1;
  a2[1] = v2;
  a2[2] = v3;
  a2[3] = v4;
  swift_bridgeObjectRetain(v2);
  return swift_bridgeObjectRetain(v4);
}

uint64_t sub_100B27C18()
{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;
  int64_t v3;
  int64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t *__return_ptr, _QWORD *);
  uint64_t result;
  int64_t v16;
  int64_t v17;
  uint64_t v18;
  unint64_t v19;
  int64_t v20;
  int64_t v21;
  uint64_t v22;
  _QWORD v23[4];

  v1 = *v0;
  v3 = v0[3];
  v2 = v0[4];
  v4 = v3;
  if (v2)
  {
    v5 = (v2 - 1) & v2;
    v6 = __clz(__rbit64(v2)) | (v3 << 6);
LABEL_3:
    v7 = 16 * v6;
    v8 = (uint64_t *)(*(_QWORD *)(v1 + 48) + 16 * v6);
    v9 = *v8;
    v10 = v8[1];
    v11 = (uint64_t *)(*(_QWORD *)(v1 + 56) + v7);
    v12 = *v11;
    v13 = v11[1];
    v0[3] = v4;
    v0[4] = v5;
    v14 = (void (*)(uint64_t *__return_ptr, _QWORD *))v0[5];
    v23[0] = v9;
    v23[1] = v10;
    v23[2] = v12;
    v23[3] = v13;
    swift_bridgeObjectRetain(v10);
    swift_bridgeObjectRetain(v13);
    v14(&v22, v23);
    swift_bridgeObjectRelease(v13);
    swift_bridgeObjectRelease(v10);
    return v22;
  }
  v16 = v3 + 1;
  if (__OFADD__(v3, 1))
  {
    __break(1u);
  }
  else
  {
    v17 = (unint64_t)(v0[2] + 64) >> 6;
    if (v16 < v17)
    {
      v18 = v0[1];
      v19 = *(_QWORD *)(v18 + 8 * v16);
      if (v19)
      {
LABEL_7:
        v5 = (v19 - 1) & v19;
        v6 = __clz(__rbit64(v19)) + (v16 << 6);
        v4 = v16;
        goto LABEL_3;
      }
      v20 = v3 + 2;
      v4 = v3 + 1;
      if (v3 + 2 < v17)
      {
        v19 = *(_QWORD *)(v18 + 8 * v20);
        if (v19)
        {
LABEL_10:
          v16 = v20;
          goto LABEL_7;
        }
        v4 = v3 + 2;
        if (v3 + 3 < v17)
        {
          v19 = *(_QWORD *)(v18 + 8 * (v3 + 3));
          if (v19)
          {
            v16 = v3 + 3;
            goto LABEL_7;
          }
          v20 = v3 + 4;
          v4 = v3 + 3;
          if (v3 + 4 < v17)
          {
            v19 = *(_QWORD *)(v18 + 8 * v20);
            if (v19)
              goto LABEL_10;
            v16 = v3 + 5;
            v4 = v3 + 4;
            if (v3 + 5 < v17)
            {
              v19 = *(_QWORD *)(v18 + 8 * v16);
              if (v19)
                goto LABEL_7;
              v4 = v17 - 1;
              v21 = v3 + 6;
              while (v17 != v21)
              {
                v19 = *(_QWORD *)(v18 + 8 * v21++);
                if (v19)
                {
                  v16 = v21 - 1;
                  goto LABEL_7;
                }
              }
            }
          }
        }
      }
    }
    result = 0;
    v0[3] = v4;
    v0[4] = 0;
  }
  return result;
}

uint64_t sub_100B27DB4@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t result;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  int64_t v26;
  void (*v27)(uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int64_t v32;
  int64_t v33;
  unint64_t v34;
  int64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  int64_t v41;
  uint64_t v42;

  v42 = a1;
  v2 = sub_10001A9A8(&qword_10110D508);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10001A9A8(&qword_1011152C8);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = __chkstk_darwin(v7);
  v12 = (char *)&v37 - v11;
  v14 = *v1;
  v13 = v1[1];
  v16 = v1[2];
  v15 = v1[3];
  v17 = v1[4];
  v37 = v5;
  if (v17)
  {
    v39 = v16;
    v40 = v13;
    v18 = v2;
    v38 = v9;
    v19 = v3;
    v20 = (v17 - 1) & v17;
    v41 = v15;
    v21 = __clz(__rbit64(v17)) | (v15 << 6);
LABEL_3:
    v22 = *(_QWORD *)(v14 + 56);
    v23 = *(_BYTE *)(*(_QWORD *)(v14 + 48) + v21);
    v24 = v22 + *(_QWORD *)(*(_QWORD *)(type metadata accessor for BookmarkMetaData(0) - 8) + 72) * v21;
    v2 = v18;
    sub_10005972C(v24, (uint64_t)&v12[*(int *)(v18 + 48)], type metadata accessor for BookmarkMetaData);
    v25 = 0;
    *v12 = v23;
    v3 = v19;
    v9 = v38;
    v16 = v39;
    v13 = v40;
    goto LABEL_4;
  }
  v32 = v15 + 1;
  if (__OFADD__(v15, 1))
  {
    __break(1u);
    return result;
  }
  v33 = (unint64_t)(v16 + 64) >> 6;
  if (v32 >= v33)
  {
    v41 = v15;
    v20 = 0;
    v25 = 1;
    goto LABEL_4;
  }
  v34 = *(_QWORD *)(v13 + 8 * v32);
  if (v34)
  {
LABEL_11:
    v39 = v16;
    v40 = v13;
    v18 = v2;
    v38 = v9;
    v19 = v3;
    v20 = (v34 - 1) & v34;
    v21 = __clz(__rbit64(v34)) + (v32 << 6);
    v41 = v32;
    goto LABEL_3;
  }
  v35 = v15 + 2;
  if (v15 + 2 >= v33)
    goto LABEL_27;
  v34 = *(_QWORD *)(v13 + 8 * v35);
  if (v34)
  {
LABEL_15:
    v32 = v35;
    goto LABEL_11;
  }
  if (v15 + 3 >= v33)
    goto LABEL_28;
  v34 = *(_QWORD *)(v13 + 8 * (v15 + 3));
  if (v34)
  {
    v32 = v15 + 3;
    goto LABEL_11;
  }
  v35 = v15 + 4;
  if (v15 + 4 < v33)
  {
    v34 = *(_QWORD *)(v13 + 8 * v35);
    if (v34)
      goto LABEL_15;
    v32 = v15 + 5;
    if (v15 + 5 < v33)
    {
      v34 = *(_QWORD *)(v13 + 8 * v32);
      if (v34)
        goto LABEL_11;
      v32 = v33 - 1;
      v36 = v15 + 6;
      while (v33 != v36)
      {
        v34 = *(_QWORD *)(v13 + 8 * v36++);
        if (v34)
        {
          v32 = v36 - 1;
          goto LABEL_11;
        }
      }
LABEL_27:
      v20 = 0;
      v25 = 1;
      v41 = v32;
      goto LABEL_4;
    }
LABEL_28:
    v20 = 0;
    v25 = 1;
    v41 = v35;
    goto LABEL_4;
  }
  v20 = 0;
  v25 = 1;
  v41 = v15 + 3;
LABEL_4:
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v3 + 56))(v12, v25, 1, v2);
  *v1 = v14;
  v1[1] = v13;
  v26 = v41;
  v1[2] = v16;
  v1[3] = v26;
  v1[4] = v20;
  v27 = (void (*)(uint64_t))v1[5];
  sub_100005CF0((uint64_t)v12, (uint64_t)v9, &qword_1011152C8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v9, 1, v2) == 1)
  {
    v28 = sub_10001A9A8(&qword_101104210);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(v42, 1, 1, v28);
  }
  else
  {
    v29 = (uint64_t)v37;
    sub_100005CF0((uint64_t)v9, (uint64_t)v37, &qword_10110D508);
    v30 = v42;
    v27(v29);
    sub_100004048(v29, &qword_10110D508);
    v31 = sub_10001A9A8(&qword_101104210);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(v30, 0, 1, v31);
  }
}

uint64_t sub_100B280FC@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t result;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int64_t v28;
  void (*v29)(uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  int64_t v35;
  unint64_t v36;
  int64_t v37;
  uint64_t v38;
  char *v39;
  int64_t v40;
  uint64_t v41;
  uint64_t v42;

  v41 = sub_10001A9A8(&qword_1010F2B78);
  v3 = *(_QWORD *)(v41 - 8);
  __chkstk_darwin(v41);
  v5 = (char *)&v39 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10001A9A8((uint64_t *)&unk_1010F7820);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = __chkstk_darwin(v7);
  v12 = (char *)&v39 - v11;
  v14 = *v1;
  v13 = v1[1];
  v15 = v1[2];
  v16 = v1[3];
  v17 = v1[4];
  v39 = v5;
  v42 = v15;
  if (v17)
  {
    v18 = v13;
    v19 = v3;
    v20 = a1;
    v21 = (v17 - 1) & v17;
    v40 = v16;
    v22 = __clz(__rbit64(v17)) | (v16 << 6);
LABEL_3:
    v23 = *(_QWORD *)(v14 + 48);
    v24 = type metadata accessor for UUID(0);
    (*(void (**)(char *, unint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 16))(v12, v23 + *(_QWORD *)(*(_QWORD *)(v24 - 8) + 72) * v22, v24);
    v25 = 0;
    v26 = v41;
    v12[*(int *)(v41 + 48)] = *(_BYTE *)(*(_QWORD *)(v14 + 56) + v22);
    a1 = v20;
    v3 = v19;
    v13 = v18;
    goto LABEL_4;
  }
  v34 = v16 + 1;
  if (__OFADD__(v16, 1))
  {
    __break(1u);
    return result;
  }
  v35 = (unint64_t)(v15 + 64) >> 6;
  if (v34 >= v35)
  {
    v40 = v16;
    v21 = 0;
    v25 = 1;
    v26 = v41;
    goto LABEL_4;
  }
  v36 = *(_QWORD *)(v13 + 8 * v34);
  if (v36)
  {
LABEL_11:
    v18 = v13;
    v19 = v3;
    v20 = a1;
    v21 = (v36 - 1) & v36;
    v22 = __clz(__rbit64(v36)) + (v34 << 6);
    v40 = v34;
    goto LABEL_3;
  }
  v37 = v16 + 2;
  if (v16 + 2 >= v35)
    goto LABEL_27;
  v36 = *(_QWORD *)(v13 + 8 * v37);
  if (v36)
  {
LABEL_15:
    v34 = v37;
    goto LABEL_11;
  }
  if (v16 + 3 >= v35)
    goto LABEL_28;
  v36 = *(_QWORD *)(v13 + 8 * (v16 + 3));
  if (v36)
  {
    v34 = v16 + 3;
    goto LABEL_11;
  }
  v37 = v16 + 4;
  if (v16 + 4 < v35)
  {
    v36 = *(_QWORD *)(v13 + 8 * v37);
    if (v36)
      goto LABEL_15;
    v34 = v16 + 5;
    if (v16 + 5 < v35)
    {
      v36 = *(_QWORD *)(v13 + 8 * v34);
      if (v36)
        goto LABEL_11;
      v34 = v35 - 1;
      v38 = v16 + 6;
      while (v35 != v38)
      {
        v36 = *(_QWORD *)(v13 + 8 * v38++);
        if (v36)
        {
          v34 = v38 - 1;
          goto LABEL_11;
        }
      }
LABEL_27:
      v21 = 0;
      v25 = 1;
      v40 = v34;
      v26 = v41;
      goto LABEL_4;
    }
LABEL_28:
    v21 = 0;
    v25 = 1;
    v40 = v37;
    v26 = v41;
    goto LABEL_4;
  }
  v21 = 0;
  v25 = 1;
  v40 = v16 + 3;
  v26 = v41;
LABEL_4:
  v27 = v26;
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 56))(v12, v25, 1);
  *v1 = v14;
  v1[1] = v13;
  v28 = v40;
  v1[2] = v42;
  v1[3] = v28;
  v1[4] = v21;
  v29 = (void (*)(uint64_t))v1[5];
  sub_100005CF0((uint64_t)v12, (uint64_t)v9, (uint64_t *)&unk_1010F7820);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v9, 1, v27) == 1)
  {
    v30 = sub_10001A9A8(&qword_1010F2B70);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(a1, 1, 1, v30);
  }
  else
  {
    v31 = (uint64_t)v9;
    v32 = (uint64_t)v39;
    sub_100005CF0(v31, (uint64_t)v39, &qword_1010F2B78);
    v29(v32);
    sub_100004048(v32, &qword_1010F2B78);
    v33 = sub_10001A9A8(&qword_1010F2B70);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 56))(a1, 0, 1, v33);
  }
}

uint64_t sub_100B28454@<X0>(uint64_t a1@<X8>)
{
  return sub_100B28670(&qword_1010F7880, &qword_1010F7878, &qword_1011152A0, a1);
}

uint64_t sub_100B28470@<X0>(_OWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  int64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  int64_t v18;
  void (*v19)(_OWORD *);
  uint64_t result;
  _OWORD v21[3];
  _OWORD v22[3];
  __int128 v23;
  _OWORD v24[2];

  v3 = *v1;
  v4 = v1[1];
  v6 = v1[2];
  v5 = v1[3];
  v7 = v5;
  v8 = v1[4];
  if (v8)
  {
    v9 = (v8 - 1) & v8;
    v10 = __clz(__rbit64(v8)) | (v5 << 6);
LABEL_3:
    v11 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v10);
    v13 = *v11;
    v12 = v11[1];
    sub_100016A30(*(_QWORD *)(v3 + 56) + 32 * v10, (uint64_t)v24);
    *(_QWORD *)&v23 = v13;
    *((_QWORD *)&v23 + 1) = v12;
    swift_bridgeObjectRetain(v12);
    goto LABEL_23;
  }
  v14 = v5 + 1;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
    return result;
  }
  v15 = (unint64_t)(v6 + 64) >> 6;
  if (v14 < v15)
  {
    v16 = *(_QWORD *)(v4 + 8 * v14);
    if (v16)
    {
LABEL_7:
      v9 = (v16 - 1) & v16;
      v10 = __clz(__rbit64(v16)) + (v14 << 6);
      v7 = v14;
      goto LABEL_3;
    }
    v17 = v5 + 2;
    v7 = v5 + 1;
    if (v5 + 2 < v15)
    {
      v16 = *(_QWORD *)(v4 + 8 * v17);
      if (v16)
      {
LABEL_10:
        v14 = v17;
        goto LABEL_7;
      }
      v7 = v5 + 2;
      if (v5 + 3 < v15)
      {
        v16 = *(_QWORD *)(v4 + 8 * (v5 + 3));
        if (v16)
        {
          v14 = v5 + 3;
          goto LABEL_7;
        }
        v17 = v5 + 4;
        v7 = v5 + 3;
        if (v5 + 4 < v15)
        {
          v16 = *(_QWORD *)(v4 + 8 * v17);
          if (v16)
            goto LABEL_10;
          v14 = v5 + 5;
          v7 = v5 + 4;
          if (v5 + 5 < v15)
          {
            v16 = *(_QWORD *)(v4 + 8 * v14);
            if (v16)
              goto LABEL_7;
            v7 = v15 - 1;
            v18 = v5 + 6;
            while (v15 != v18)
            {
              v16 = *(_QWORD *)(v4 + 8 * v18++);
              if (v16)
              {
                v14 = v18 - 1;
                goto LABEL_7;
              }
            }
          }
        }
      }
    }
  }
  v9 = 0;
  memset(v24, 0, sizeof(v24));
  v23 = 0u;
LABEL_23:
  *v1 = v3;
  v1[1] = v4;
  v1[2] = v6;
  v1[3] = v7;
  v1[4] = v9;
  v19 = (void (*)(_OWORD *))v1[5];
  result = sub_100005CF0((uint64_t)&v23, (uint64_t)v22, &qword_101107468);
  if (*((_QWORD *)&v22[0] + 1))
  {
    v21[0] = v22[0];
    v21[1] = v22[1];
    v21[2] = v22[2];
    v19(v21);
    return sub_100004048((uint64_t)v21, &qword_101115320);
  }
  else
  {
    a1[1] = 0u;
    a1[2] = 0u;
    *a1 = 0u;
  }
  return result;
}

uint64_t sub_100B28654@<X0>(uint64_t a1@<X8>)
{
  return sub_100B28670(&qword_1010F7808, &qword_1010FB1F8, &qword_1010FB2C8, a1);
}

uint64_t sub_100B28670@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  uint64_t v21;
  int64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int64_t v31;
  int64_t v32;
  unint64_t v33;
  int64_t v34;
  int64_t v35;
  void (*v36)(uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t *v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;

  v49 = a3;
  v8 = sub_10001A9A8(a1);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10001A9A8(a2);
  v13 = __chkstk_darwin(v12);
  v50 = (uint64_t)&v43 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = __chkstk_darwin(v13);
  v17 = (char *)&v43 - v16;
  v18 = *v4;
  v19 = v4[1];
  v21 = v4[2];
  v20 = v4[3];
  v22 = v20;
  v23 = v4[4];
  v44 = v11;
  v45 = a1;
  v48 = v21;
  if (v23)
  {
    v46 = a2;
    v47 = v19;
    v24 = a4;
    v25 = (v23 - 1) & v23;
    v26 = __clz(__rbit64(v23)) | (v20 << 6);
LABEL_3:
    v27 = *(_QWORD *)(v18 + 48);
    v28 = v18;
    v29 = type metadata accessor for UUID(0);
    (*(void (**)(char *, unint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 16))(v17, v27 + *(_QWORD *)(*(_QWORD *)(v29 - 8) + 72) * v26, v29);
    v30 = *(_QWORD *)(*(_QWORD *)(v28 + 56) + 8 * v26);
    *(_QWORD *)&v17[*(int *)(v8 + 48)] = v30;
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v17, 0, 1, v8);
    swift_bridgeObjectRetain(v30);
    a4 = v24;
    a2 = v46;
    v19 = v47;
    goto LABEL_23;
  }
  v31 = v20 + 1;
  if (__OFADD__(v20, 1))
  {
    __break(1u);
    return result;
  }
  v32 = (unint64_t)(v21 + 64) >> 6;
  if (v31 < v32)
  {
    v33 = *(_QWORD *)(v19 + 8 * v31);
    if (v33)
    {
LABEL_7:
      v46 = a2;
      v47 = v19;
      v24 = a4;
      v25 = (v33 - 1) & v33;
      v26 = __clz(__rbit64(v33)) + (v31 << 6);
      v22 = v31;
      goto LABEL_3;
    }
    v34 = v20 + 2;
    v22 = v20 + 1;
    if (v20 + 2 < v32)
    {
      v33 = *(_QWORD *)(v19 + 8 * v34);
      if (v33)
      {
LABEL_10:
        v31 = v34;
        goto LABEL_7;
      }
      v22 = v20 + 2;
      if (v20 + 3 < v32)
      {
        v33 = *(_QWORD *)(v19 + 8 * (v20 + 3));
        if (v33)
        {
          v31 = v20 + 3;
          goto LABEL_7;
        }
        v34 = v20 + 4;
        v22 = v20 + 3;
        if (v20 + 4 < v32)
        {
          v33 = *(_QWORD *)(v19 + 8 * v34);
          if (v33)
            goto LABEL_10;
          v31 = v20 + 5;
          v22 = v20 + 4;
          if (v20 + 5 < v32)
          {
            v33 = *(_QWORD *)(v19 + 8 * v31);
            if (v33)
              goto LABEL_7;
            v22 = v32 - 1;
            v35 = v20 + 6;
            while (v32 != v35)
            {
              v33 = *(_QWORD *)(v19 + 8 * v35++);
              if (v33)
              {
                v31 = v35 - 1;
                goto LABEL_7;
              }
            }
          }
        }
      }
    }
  }
  v28 = v18;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v17, 1, 1, v8);
  v25 = 0;
LABEL_23:
  *v4 = v28;
  v4[1] = v19;
  v4[2] = v48;
  v4[3] = v22;
  v4[4] = v25;
  v36 = (void (*)(uint64_t))v4[5];
  v37 = v50;
  sub_100005CF0((uint64_t)v17, v50, a2);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v37, 1, v8) == 1)
  {
    v38 = sub_10001A9A8(v49);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 56))(a4, 1, 1, v38);
  }
  else
  {
    v39 = v37;
    v41 = (uint64_t)v44;
    v40 = v45;
    sub_100005CF0(v39, (uint64_t)v44, v45);
    v36(v41);
    sub_100004048(v41, v40);
    v42 = sub_10001A9A8(v49);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 56))(a4, 0, 1, v42);
  }
}

uint64_t sub_100B28998@<X0>(uint64_t a1@<X8>)
{
  return sub_100B28670(&qword_1010FB1A0, &qword_101115230, &qword_1010FB190, a1);
}

uint64_t sub_100B289B4@<X0>(_OWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  unint64_t v4;
  int64_t v5;
  int64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  void (*v17)(_QWORD *);
  uint64_t result;
  int64_t v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  int64_t v23;
  int64_t v24;
  _QWORD v25[6];

  v3 = *v1;
  v5 = v1[3];
  v4 = v1[4];
  v6 = v5;
  if (v4)
  {
    v7 = (v4 - 1) & v4;
    v8 = __clz(__rbit64(v4)) | (v5 << 6);
LABEL_3:
    v9 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v8);
    v10 = *v9;
    v11 = v9[1];
    v12 = (uint64_t *)(*(_QWORD *)(v3 + 56) + 32 * v8);
    v13 = *v12;
    v14 = v12[1];
    v15 = v12[2];
    v16 = v12[3];
    v1[3] = v6;
    v1[4] = v7;
    v17 = (void (*)(_QWORD *))v1[5];
    v25[0] = v10;
    v25[1] = v11;
    v25[2] = v13;
    v25[3] = v14;
    v25[4] = v15;
    v25[5] = v16;
    sub_10001BBBC(v10, v11);
    sub_10001BBBC(v13, v14);
    sub_10001BBBC(v15, v16);
    v17(v25);
    sub_10001BC14(v10, v11);
    sub_10001BC14(v13, v14);
    return sub_10001BC14(v15, v16);
  }
  v19 = v5 + 1;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
  }
  else
  {
    v20 = (unint64_t)(v1[2] + 64) >> 6;
    if (v19 < v20)
    {
      v21 = v1[1];
      v22 = *(_QWORD *)(v21 + 8 * v19);
      if (v22)
      {
LABEL_7:
        v7 = (v22 - 1) & v22;
        v8 = __clz(__rbit64(v22)) + (v19 << 6);
        v6 = v19;
        goto LABEL_3;
      }
      v23 = v5 + 2;
      v6 = v5 + 1;
      if (v5 + 2 < v20)
      {
        v22 = *(_QWORD *)(v21 + 8 * v23);
        if (v22)
        {
LABEL_10:
          v19 = v23;
          goto LABEL_7;
        }
        v6 = v5 + 2;
        if (v5 + 3 < v20)
        {
          v22 = *(_QWORD *)(v21 + 8 * (v5 + 3));
          if (v22)
          {
            v19 = v5 + 3;
            goto LABEL_7;
          }
          v23 = v5 + 4;
          v6 = v5 + 3;
          if (v5 + 4 < v20)
          {
            v22 = *(_QWORD *)(v21 + 8 * v23);
            if (v22)
              goto LABEL_10;
            v19 = v5 + 5;
            v6 = v5 + 4;
            if (v5 + 5 < v20)
            {
              v22 = *(_QWORD *)(v21 + 8 * v19);
              if (v22)
                goto LABEL_7;
              v6 = v20 - 1;
              v24 = v5 + 6;
              while (v20 != v24)
              {
                v22 = *(_QWORD *)(v21 + 8 * v24++);
                if (v22)
                {
                  v19 = v24 - 1;
                  goto LABEL_7;
                }
              }
            }
          }
        }
      }
    }
    v1[3] = v6;
    v1[4] = 0;
    *a1 = xmmword_100E22B20;
    a1[1] = 0u;
    a1[2] = 0u;
  }
  return result;
}

uint64_t sub_100B28BAC@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  unint64_t v4;
  int64_t v5;
  int64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(_QWORD *);
  uint64_t result;
  int64_t v17;
  int64_t v18;
  uint64_t v19;
  unint64_t v20;
  int64_t v21;
  int64_t v22;
  _QWORD v23[3];
  char v24;

  v3 = *v1;
  v5 = v1[3];
  v4 = v1[4];
  v6 = v5;
  if (v4)
  {
    v7 = (v4 - 1) & v4;
    v8 = __clz(__rbit64(v4)) | (v5 << 6);
LABEL_3:
    v9 = 16 * v8;
    v10 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v8);
    v11 = *v10;
    v12 = v10[1];
    v13 = *(_QWORD *)(v3 + 56) + v9;
    v14 = *(_QWORD *)v13;
    LOBYTE(v13) = *(_BYTE *)(v13 + 8);
    v1[3] = v6;
    v1[4] = v7;
    v15 = (void (*)(_QWORD *))v1[5];
    v23[0] = v11;
    v23[1] = v12;
    v23[2] = v14;
    v24 = v13;
    sub_10001BBBC(v11, v12);
    v15(v23);
    return sub_10001BC14(v11, v12);
  }
  v17 = v5 + 1;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
  }
  else
  {
    v18 = (unint64_t)(v1[2] + 64) >> 6;
    if (v17 < v18)
    {
      v19 = v1[1];
      v20 = *(_QWORD *)(v19 + 8 * v17);
      if (v20)
      {
LABEL_7:
        v7 = (v20 - 1) & v20;
        v8 = __clz(__rbit64(v20)) + (v17 << 6);
        v6 = v17;
        goto LABEL_3;
      }
      v21 = v5 + 2;
      v6 = v5 + 1;
      if (v5 + 2 < v18)
      {
        v20 = *(_QWORD *)(v19 + 8 * v21);
        if (v20)
        {
LABEL_10:
          v17 = v21;
          goto LABEL_7;
        }
        v6 = v5 + 2;
        if (v5 + 3 < v18)
        {
          v20 = *(_QWORD *)(v19 + 8 * (v5 + 3));
          if (v20)
          {
            v17 = v5 + 3;
            goto LABEL_7;
          }
          v21 = v5 + 4;
          v6 = v5 + 3;
          if (v5 + 4 < v18)
          {
            v20 = *(_QWORD *)(v19 + 8 * v21);
            if (v20)
              goto LABEL_10;
            v17 = v5 + 5;
            v6 = v5 + 4;
            if (v5 + 5 < v18)
            {
              v20 = *(_QWORD *)(v19 + 8 * v17);
              if (v20)
                goto LABEL_7;
              v6 = v18 - 1;
              v22 = v5 + 6;
              while (v18 != v22)
              {
                v20 = *(_QWORD *)(v19 + 8 * v22++);
                if (v20)
                {
                  v17 = v22 - 1;
                  goto LABEL_7;
                }
              }
            }
          }
        }
      }
    }
    v1[3] = v6;
    v1[4] = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    *(_BYTE *)(a1 + 24) = 3;
  }
  return result;
}

uint64_t sub_100B28D4C(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t Item;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  *(_QWORD *)(v5 + 96) = a4;
  *(_QWORD *)(v5 + 104) = a5;
  *(_BYTE *)(v5 + 400) = a2;
  *(_QWORD *)(v5 + 80) = a1;
  *(_QWORD *)(v5 + 88) = a3;
  v6 = type metadata accessor for HashAlgorithm(0);
  *(_QWORD *)(v5 + 112) = v6;
  v7 = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v5 + 120) = v7;
  *(_QWORD *)(v5 + 128) = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for P256.Signing.PublicKey(0);
  *(_QWORD *)(v5 + 136) = v8;
  v9 = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(v5 + 144) = v9;
  *(_QWORD *)(v5 + 152) = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for P256.Signing.PrivateKey(0);
  *(_QWORD *)(v5 + 160) = v10;
  v11 = *(_QWORD *)(v10 - 8);
  *(_QWORD *)(v5 + 168) = v11;
  *(_QWORD *)(v5 + 176) = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for UUID(0);
  *(_QWORD *)(v5 + 184) = v12;
  v13 = *(_QWORD *)(v12 - 8);
  *(_QWORD *)(v5 + 192) = v13;
  *(_QWORD *)(v5 + 200) = swift_task_alloc((*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  Item = type metadata accessor for KeyDropFetchRequest.SharedFetchItem(0);
  *(_QWORD *)(v5 + 208) = Item;
  v15 = *(_QWORD *)(Item - 8);
  *(_QWORD *)(v5 + 216) = v15;
  *(_QWORD *)(v5 + 224) = swift_task_alloc((*(_QWORD *)(v15 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for JSONEncoder.DateEncodingStrategy(0);
  *(_QWORD *)(v5 + 232) = v16;
  v17 = *(_QWORD *)(v16 - 8);
  *(_QWORD *)(v5 + 240) = v17;
  *(_QWORD *)(v5 + 248) = swift_task_alloc((*(_QWORD *)(v17 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for KeyDropFetchItem(0);
  *(_QWORD *)(v5 + 256) = v18;
  v19 = *(_QWORD *)(v18 - 8);
  *(_QWORD *)(v5 + 264) = v19;
  *(_QWORD *)(v5 + 272) = swift_task_alloc((*(_QWORD *)(v19 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100B28EA4, 0, 0);
}

uint64_t sub_100B28EA4()
{
  _QWORD *v0;
  uint64_t result;
  unint64_t v2;
  int *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  int64_t v7;
  unint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int64_t v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  __n128 v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  int *v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  char v65;
  int *v66;
  _QWORD *v67;
  unint64_t v68;
  uint64_t v69;
  __int128 v70;
  uint64_t v71;
  uint64_t (*v72)(void);

  result = v0[10];
  v64 = *(_QWORD *)(result + 16);
  if (v64)
  {
    v2 = 0;
    v3 = (int *)v0[32];
    v58 = (int *)v0[26];
    v59 = v0[27];
    v69 = v0[24];
    v56 = v0[18];
    v57 = v0[21];
    v62 = v0[33];
    v63 = v0 + 6;
    v61 = result + ((*(unsigned __int8 *)(v62 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v62 + 80));
    v4 = _swiftEmptyArrayStorage;
    v60 = v0[10];
    while (v2 < *(_QWORD *)(result + 16))
    {
      v5 = v0[34];
      sub_10005972C(v61 + *(_QWORD *)(v62 + 72) * v2, v5, type metadata accessor for KeyDropFetchItem);
      v6 = *(_QWORD *)(v5 + v3[7]);
      v7 = *(_QWORD *)(v6 + 16);
      v68 = v2;
      if (v7)
      {
        swift_bridgeObjectRetain(v6);
        sub_10009ABD0(0, v7, 0);
        v8 = (unint64_t *)(v6 + 64);
        do
        {
          v70 = *((_OWORD *)v8 - 2);
          v10 = *(v8 - 2);
          v9 = *(v8 - 1);
          v11 = *v8;
          sub_10001BBBC(v9, *v8);
          v13 = _swiftEmptyArrayStorage[2];
          v12 = _swiftEmptyArrayStorage[3];
          if (v13 >= v12 >> 1)
            sub_10009ABD0(v12 > 1, v13 + 1, 1);
          _swiftEmptyArrayStorage[2] = v13 + 1;
          v14 = &_swiftEmptyArrayStorage[5 * v13];
          *((_OWORD *)v14 + 2) = v70;
          v8 += 5;
          v14[6] = v10;
          v14[7] = v9;
          v14[8] = v11;
          --v7;
        }
        while (v7);
        swift_bridgeObjectRelease();
        v3 = v66;
        v0 = v67;
      }
      v15 = v0[34];
      (*(void (**)(_QWORD, uint64_t, _QWORD))(v69 + 16))(v0[25], v15, v0[23]);
      v16 = *(_BYTE *)(v15 + v3[5]);
      v17 = v15 + v3[8];
      v18 = (uint64_t *)(v17 + *(int *)(type metadata accessor for KeyDropJoinToken(0) + 20));
      v19 = *v18;
      v20 = v18[1];
      v0[6] = *v18;
      v0[7] = v20;
      sub_10001BBBC(v19, v20);
      v21 = P256.Signing.PrivateKey.init<A>(rawRepresentation:)(v63, &type metadata for Data, &protocol witness table for Data);
      v22 = v0[34];
      v23 = v0[22];
      v25 = v0[19];
      v24 = v0[20];
      v26 = v0[17];
      P256.Signing.PrivateKey.publicKey.getter(v21);
      v27 = (*(uint64_t (**)(uint64_t, uint64_t))(v57 + 8))(v23, v24);
      v28 = P256.Signing.PublicKey.compressedRepresentation.getter(v27);
      v71 = v29;
      (*(void (**)(uint64_t, uint64_t))(v56 + 8))(v25, v26);
      v30 = *(_QWORD *)(v22 + v3[6]);
      v31 = *(_QWORD *)(v30 + 16);
      if (v31)
      {
        v65 = v16;
        swift_bridgeObjectRetain(v30);
        sub_10009A92C(0, v31, 0);
        v32 = (unint64_t *)(v30 + 40);
        do
        {
          v34 = *(v32 - 1);
          v33 = *v32;
          sub_10001BBBC(v34, *v32);
          v36 = _swiftEmptyArrayStorage[2];
          v35 = _swiftEmptyArrayStorage[3];
          if (v36 >= v35 >> 1)
            sub_10009A92C(v35 > 1, v36 + 1, 1);
          v32 += 2;
          _swiftEmptyArrayStorage[2] = v36 + 1;
          v37 = &_swiftEmptyArrayStorage[2 * v36];
          v37[4] = v34;
          v37[5] = v33;
          --v31;
        }
        while (v31);
        swift_bridgeObjectRelease();
        v16 = v65;
      }
      v0 = v67;
      v38 = v67[28];
      (*(void (**)(uint64_t, _QWORD, _QWORD))(v69 + 32))(v38, v67[25], v67[23]);
      *(_BYTE *)(v38 + v58[5]) = v16;
      v39 = (uint64_t *)(v38 + v58[6]);
      *v39 = v28;
      v39[1] = v71;
      *(_QWORD *)(v38 + v58[7]) = _swiftEmptyArrayStorage;
      *(_QWORD *)(v38 + v58[8]) = _swiftEmptyArrayStorage;
      v3 = v66;
      if ((swift_isUniquelyReferenced_nonNull_native(v4) & 1) == 0)
        v4 = (_QWORD *)sub_1007C8C7C(0, v4[2] + 1, 1, (unint64_t)v4);
      v41 = v4[2];
      v40 = v4[3];
      if (v41 >= v40 >> 1)
        v4 = (_QWORD *)sub_1007C8C7C(v40 > 1, v41 + 1, 1, (unint64_t)v4);
      v2 = v68 + 1;
      v42 = v67[34];
      v43 = v67[28];
      v4[2] = v41 + 1;
      sub_100B29944(v43, (uint64_t)v4+ ((*(unsigned __int8 *)(v59 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v59 + 80))+ *(_QWORD *)(v59 + 72) * v41);
      sub_1000126B0(v42, type metadata accessor for KeyDropFetchItem);
      result = v60;
      if (v68 + 1 == v64)
      {
        swift_bridgeObjectRelease();
        goto LABEL_23;
      }
    }
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease();
    v4 = _swiftEmptyArrayStorage;
LABEL_23:
    v0[35] = v4;
    v45 = v0[30];
    v44 = (_QWORD *)v0[31];
    v46 = v0[29];
    v48 = v0[11];
    v47 = v0[12];
    v49 = *((_BYTE *)v0 + 400);
    v50 = type metadata accessor for JSONEncoder(0);
    swift_allocObject(v50, *(unsigned int *)(v50 + 48), *(unsigned __int16 *)(v50 + 52));
    v0[36] = JSONEncoder.init()(v51);
    *v44 = sub_1002994E8;
    v44[1] = 0;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v45 + 104))(v44, enum case for JSONEncoder.DateEncodingStrategy.custom(_:), v46);
    dispatch thunk of JSONEncoder.dateEncodingStrategy.setter(v44);
    *((_BYTE *)v0 + 16) = v49;
    v0[3] = v48;
    v0[4] = v47;
    v0[5] = v4;
    v52 = sub_100B29988();
    swift_bridgeObjectRetain(v4);
    v0[37] = dispatch thunk of JSONEncoder.encode<A>(_:)(v0 + 2, &type metadata for KeyDropFetchRequest.KeyDropFetchContent, v52);
    v0[38] = v53;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_100B26BC0();
    v0[39] = v54;
    v72 = (uint64_t (*)(void))((char *)&dword_101115210 + dword_101115210);
    v55 = (_QWORD *)swift_task_alloc(unk_101115214);
    v0[40] = v55;
    *v55 = v0;
    v55[1] = sub_100B294F0;
    return v72();
  }
  return result;
}

uint64_t sub_100B294F0(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 320);
  *(_QWORD *)(v3 + 328) = a1;
  *(_QWORD *)(v3 + 336) = a2;
  swift_task_dealloc(v4);
  return swift_task_switch(sub_100B2954C, 0, 0);
}

uint64_t sub_100B2954C()
{
  _QWORD *v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  char *v15;

  v2 = v0[41];
  v1 = v0[42];
  v4 = v0[37];
  v3 = v0[38];
  v6 = v0[15];
  v5 = v0[16];
  v7 = v0[14];
  v0[8] = v2;
  v0[9] = v1;
  sub_10001BBBC(v2, v1);
  sub_10001BBBC(v4, v3);
  sub_10078E27C(v4, v3);
  sub_10001BC14(v4, v3);
  sub_10001BC14(v2, v1);
  v8 = v0[8];
  v9 = v0[9];
  v0[43] = v8;
  v0[44] = v9;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v6 + 104))(v5, enum case for HashAlgorithm.sha256(_:), v7);
  v10 = Data.hash(algorithm:)(v5, v8, v9);
  v12 = v11;
  v0[45] = v10;
  v0[46] = v11;
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  v15 = (char *)&dword_101115218 + dword_101115218;
  v13 = (_QWORD *)swift_task_alloc(unk_10111521C);
  v0[47] = v13;
  *v13 = v0;
  v13[1] = sub_100B29678;
  return ((uint64_t (*)(uint64_t, uint64_t, _QWORD))v15)(v10, v12, v0[13]);
}

uint64_t sub_100B29678(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t (*v8)();

  v4 = *(_QWORD **)v2;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 376);
  *(_QWORD *)(*(_QWORD *)v2 + 384) = v1;
  swift_task_dealloc(v5);
  v6 = v4[45];
  v7 = v4[46];
  if (v1)
  {
    sub_10001BC14(v6, v7);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v8 = sub_100B29854;
  }
  else
  {
    v4[49] = a1;
    sub_10001BC14(v6, v7);
    v8 = sub_100B29710;
  }
  return swift_task_switch(v8, 0, 0);
}

uint64_t sub_100B29710()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *(_QWORD *)(v0 + 384);
  v1 = *(_QWORD *)(v0 + 392);
  v3 = *(_QWORD *)(v0 + 312);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v3);
  v16 = v3;
  sub_1001664D0(v1, (uint64_t)sub_100B27BE4, 0, isUniquelyReferenced_nonNull_native, &v16);
  if (v2)
    return swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(v0 + 344);
  v7 = *(_QWORD *)(v0 + 352);
  v8 = *(_QWORD *)(v0 + 272);
  v9 = *(_QWORD *)(v0 + 248);
  v10 = *(_QWORD *)(v0 + 224);
  v11 = *(_QWORD *)(v0 + 200);
  v12 = *(_QWORD *)(v0 + 176);
  v13 = *(_QWORD *)(v0 + 152);
  v14 = *(_QWORD *)(v0 + 128);
  v15 = v16;
  swift_bridgeObjectRelease();
  sub_10001BC14(v6, v7);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  return (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(v0 + 8))(v15, *(_QWORD *)(v0 + 296), *(_QWORD *)(v0 + 304));
}

uint64_t sub_100B29854()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = *(_QWORD *)(v0 + 344);
  v2 = *(_QWORD *)(v0 + 352);
  v4 = *(_QWORD *)(v0 + 296);
  v3 = *(_QWORD *)(v0 + 304);
  swift_release();
  sub_10001BC14(v4, v3);
  swift_release();
  sub_10001BC14(v1, v2);
  v5 = *(_QWORD *)(v0 + 248);
  v6 = *(_QWORD *)(v0 + 224);
  v7 = *(_QWORD *)(v0 + 200);
  v8 = *(_QWORD *)(v0 + 176);
  v9 = *(_QWORD *)(v0 + 152);
  v10 = *(_QWORD *)(v0 + 128);
  swift_task_dealloc(*(_QWORD *)(v0 + 272));
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t type metadata accessor for KeyDropFetchRequest.SharedFetchItem(uint64_t a1)
{
  return sub_10001B630(a1, qword_1011154A0, (uint64_t)&nominal type descriptor for KeyDropFetchRequest.SharedFetchItem);
}

uint64_t type metadata accessor for KeyDropFetchItem(uint64_t a1)
{
  return sub_10001B630(a1, qword_101115400, (uint64_t)&nominal type descriptor for KeyDropFetchItem);
}

uint64_t sub_100B29944(uint64_t a1, uint64_t a2)
{
  uint64_t Item;

  Item = type metadata accessor for KeyDropFetchRequest.SharedFetchItem(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Item - 8) + 32))(a2, a1, Item);
  return a2;
}

unint64_t sub_100B29988()
{
  unint64_t result;

  result = qword_101115208;
  if (!qword_101115208)
  {
    result = swift_getWitnessTable(byte_100E603C0, &type metadata for KeyDropFetchRequest.KeyDropFetchContent);
    atomic_store(result, (unint64_t *)&qword_101115208);
  }
  return result;
}

uint64_t sub_100B299CC(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
  swift_bridgeObjectRelease(v2);
  return a1;
}

unint64_t sub_100B29A00()
{
  unint64_t result;

  result = qword_101115220;
  if (!qword_101115220)
  {
    result = swift_getWitnessTable(byte_100E3B934, &type metadata for IdentitySigningHeaderError);
    atomic_store(result, (unint64_t *)&qword_101115220);
  }
  return result;
}

uint64_t *sub_100B29A44(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v2 = a1[2];
  v3 = a1[3];
  v4 = a1[4];
  v5 = a1[5];
  sub_10001BC14(*a1, a1[1]);
  sub_10001EF3C(v2, v3);
  sub_10001EF3C(v4, v5);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100B29AAC(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  return a1;
}

uint64_t initializeWithCopy for KeyDropDecryptionRange(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v3 = *(_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 32);
  sub_10001BBBC(v3, v4);
  *(_QWORD *)(a1 + 24) = v3;
  *(_QWORD *)(a1 + 32) = v4;
  return a1;
}

ValueMetadata *type metadata accessor for KeyDropDecryptionRange()
{
  return &type metadata for KeyDropDecryptionRange;
}

uint64_t destroy for KeyDropFetchRequest.BundleDecryption(uint64_t a1)
{
  return sub_10001BC14(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32));
}

uint64_t initializeWithCopy for KeyDropFetchRequest.BundleDecryption(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 32);
  sub_10001BBBC(v3, v4);
  *(_QWORD *)(a1 + 24) = v3;
  *(_QWORD *)(a1 + 32) = v4;
  return a1;
}

_QWORD *_s12searchpartyd22KeyDropDecryptionRangeVwca_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  v3 = a2[3];
  v4 = a2[4];
  sub_10001BBBC(v3, v4);
  v5 = a1[3];
  v6 = a1[4];
  a1[3] = v3;
  a1[4] = v4;
  sub_10001BC14(v5, v6);
  return a1;
}

uint64_t _s12searchpartyd22KeyDropDecryptionRangeVwta_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  __int128 v6;

  v3 = *(_QWORD *)(a2 + 32);
  v4 = *(_QWORD *)(a1 + 24);
  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 32) = v3;
  sub_10001BC14(v4, v5);
  return a1;
}

uint64_t _s12searchpartyd22KeyDropDecryptionRangeVwet_0(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xD && *(_BYTE *)(a1 + 40))
    return (*(_DWORD *)a1 + 13);
  v3 = (((*(_QWORD *)(a1 + 32) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(_QWORD *)(a1 + 32) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC)
    v3 = -1;
  return v3 + 1;
}

uint64_t _s12searchpartyd22KeyDropDecryptionRangeVwst_0(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 - 13;
    if (a3 >= 0xD)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if (a3 >= 0xD)
      *(_BYTE *)(result + 40) = 0;
    if (a2)
    {
      *(_QWORD *)(result + 24) = 0;
      *(_QWORD *)(result + 32) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for KeyDropFetchRequest.BundleDecryption()
{
  return &type metadata for KeyDropFetchRequest.BundleDecryption;
}

uint64_t initializeWithCopy for KeyDropFetchRequest.KeyDropFetchContent(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v4;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

uint64_t assignWithCopy for KeyDropFetchRequest.KeyDropFetchContent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

uint64_t assignWithTake for KeyDropFetchRequest.KeyDropFetchContent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 16));
  v4 = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRelease(v4);
  return a1;
}

ValueMetadata *type metadata accessor for KeyDropFetchRequest.KeyDropFetchContent()
{
  return &type metadata for KeyDropFetchRequest.KeyDropFetchContent;
}

_QWORD *sub_100B29DFC(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(char *, char *, uint64_t, __n128);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  __n128 v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v22 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v22 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    v8 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v7 - 8) + 16);
    ((void (*)(_QWORD *, _QWORD *, uint64_t))v8)(a1, a2, v7);
    v9 = a3[6];
    *((_BYTE *)a1 + a3[5]) = *((_BYTE *)a2 + a3[5]);
    v10 = *(_QWORD *)((char *)a2 + v9);
    *(_QWORD *)((char *)a1 + v9) = v10;
    v11 = a3[7];
    v12 = a3[8];
    v13 = *(_QWORD *)((char *)a2 + v11);
    *(_QWORD *)((char *)a1 + v11) = v13;
    v14 = (char *)a1 + v12;
    v15 = (char *)a2 + v12;
    swift_bridgeObjectRetain(v10);
    v16 = swift_bridgeObjectRetain(v13);
    v8(v14, v15, v7, v16);
    v17 = *(int *)(type metadata accessor for KeyDropJoinToken(0) + 20);
    v18 = (uint64_t *)&v14[v17];
    v19 = (uint64_t *)&v15[v17];
    v20 = *v19;
    v21 = v19[1];
    sub_10001BBBC(*v19, v21);
    *v18 = v20;
    v18[1] = v21;
  }
  return a1;
}

uint64_t sub_100B29EF0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;

  v4 = type metadata accessor for UUID(0);
  v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v5(a1, v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v6 = a1 + *(int *)(a2 + 32);
  v5(v6, v4);
  v7 = v6 + *(int *)(type metadata accessor for KeyDropJoinToken(0) + 20);
  return sub_10001BC14(*(_QWORD *)v7, *(_QWORD *)(v7 + 8));
}

uint64_t sub_100B29F78(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  unint64_t v20;

  v6 = type metadata accessor for UUID(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v8 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  v9 = *(_QWORD *)(a2 + v8);
  *(_QWORD *)(a1 + v8) = v9;
  v10 = a3[7];
  v11 = a3[8];
  v12 = *(_QWORD *)(a2 + v10);
  *(_QWORD *)(a1 + v10) = v12;
  v13 = a1 + v11;
  v14 = a2 + v11;
  swift_bridgeObjectRetain(v9);
  v15 = swift_bridgeObjectRetain(v12);
  ((void (*)(uint64_t, uint64_t, uint64_t, __n128))v7)(v13, v14, v6, v15);
  v16 = *(int *)(type metadata accessor for KeyDropJoinToken(0) + 20);
  v17 = (uint64_t *)(v13 + v16);
  v18 = (uint64_t *)(v14 + v16);
  v19 = *v18;
  v20 = v18[1];
  sub_10001BBBC(*v18, v20);
  *v17 = v19;
  v17[1] = v20;
  return a1;
}

uint64_t sub_100B2A040(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;

  v6 = type metadata accessor for UUID(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24);
  v7(a1, a2, v6);
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  v8 = a3[6];
  v9 = *(_QWORD *)(a2 + v8);
  *(_QWORD *)(a1 + v8) = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease();
  v10 = a3[7];
  v11 = *(_QWORD *)(a2 + v10);
  *(_QWORD *)(a1 + v10) = v11;
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRelease();
  v12 = a3[8];
  v13 = a1 + v12;
  v14 = a2 + v12;
  v7(a1 + v12, v14, v6);
  v15 = *(int *)(type metadata accessor for KeyDropJoinToken(0) + 20);
  v16 = (uint64_t *)(v13 + v15);
  v17 = (uint64_t *)(v14 + v15);
  v18 = *v17;
  v19 = v17[1];
  sub_10001BBBC(*v17, v19);
  v20 = *v16;
  v21 = v16[1];
  *v16 = v18;
  v16[1] = v19;
  sub_10001BC14(v20, v21);
  return a1;
}

uint64_t sub_100B2A12C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = type metadata accessor for UUID(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v8 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  *(_QWORD *)(a1 + v8) = *(_QWORD *)(a2 + v8);
  v9 = a3[8];
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  v10 = a1 + v9;
  v11 = a2 + v9;
  v7(a1 + v9, v11, v6);
  v12 = type metadata accessor for KeyDropJoinToken(0);
  *(_OWORD *)(v10 + *(int *)(v12 + 20)) = *(_OWORD *)(v11 + *(int *)(v12 + 20));
  return a1;
}

uint64_t sub_100B2A1D4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;

  v6 = type metadata accessor for UUID(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40);
  v7(a1, a2, v6);
  v8 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  *(_QWORD *)(a1 + v8) = *(_QWORD *)(a2 + v8);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  swift_bridgeObjectRelease();
  v9 = a3[8];
  v10 = a1 + v9;
  v11 = a2 + v9;
  v7(a1 + v9, v11, v6);
  v12 = *(int *)(type metadata accessor for KeyDropJoinToken(0) + 20);
  v13 = *(_QWORD *)(v10 + v12);
  v14 = *(_QWORD *)(v10 + v12 + 8);
  *(_OWORD *)(v10 + v12) = *(_OWORD *)(v11 + v12);
  sub_10001BC14(v13, v14);
  return a1;
}

uint64_t sub_100B2A29C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100B2A2A8);
}

uint64_t sub_100B2A2A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  unint64_t v11;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    v8 = type metadata accessor for KeyDropJoinToken(0);
    v10 = a1 + *(int *)(a3 + 32);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
    return v9(v10, a2, v8);
  }
  v11 = *(_QWORD *)(a1 + *(int *)(a3 + 24));
  if (v11 >= 0xFFFFFFFF)
    LODWORD(v11) = -1;
  return (v11 + 1);
}

uint64_t sub_100B2A350(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100B2A35C);
}

uint64_t sub_100B2A35C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  result = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    if (a3 == 0x7FFFFFFF)
    {
      *(_QWORD *)(a1 + *(int *)(a4 + 24)) = (a2 - 1);
      return result;
    }
    v10 = type metadata accessor for KeyDropJoinToken(0);
    v12 = a1 + *(int *)(a4 + 32);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t sub_100B2A400(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[5];

  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v5[0] = *(_QWORD *)(result - 8) + 64;
    v5[1] = &unk_100E60278;
    v5[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v5[3] = (char *)&value witness table for Builtin.BridgeObject + 64;
    result = type metadata accessor for KeyDropJoinToken(319);
    if (v4 <= 0x3F)
    {
      v5[4] = *(_QWORD *)(result - 8) + 64;
      swift_initStructMetadata(a1, 256, 5, v5, a1 + 16);
      return 0;
    }
  }
  return result;
}

_QWORD *sub_100B2A49C(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[6];
    *((_BYTE *)a1 + a3[5]) = *((_BYTE *)a2 + a3[5]);
    v9 = (char *)a1 + v8;
    v10 = (_QWORD *)((char *)a2 + v8);
    v11 = *(_QWORD *)((char *)a2 + v8 + 8);
    if (v11 >> 60 == 15)
    {
      *(_OWORD *)v9 = *(_OWORD *)v10;
    }
    else
    {
      v13 = *v10;
      sub_10001BBBC(*v10, v11);
      *(_QWORD *)v9 = v13;
      *((_QWORD *)v9 + 1) = v11;
    }
    v14 = a3[7];
    v15 = a3[8];
    v16 = *(_QWORD *)((char *)a2 + v14);
    *(_QWORD *)((char *)a1 + v14) = v16;
    v17 = *(_QWORD *)((char *)a2 + v15);
    *(_QWORD *)((char *)a1 + v15) = v17;
    swift_bridgeObjectRetain(v16);
    swift_bridgeObjectRetain(v17);
  }
  return a1;
}

uint64_t sub_100B2A584(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;
  unint64_t v6;

  v4 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = (uint64_t *)(a1 + *(int *)(a2 + 24));
  v6 = v5[1];
  if (v6 >> 60 != 15)
    sub_10001BC14(*v5, v6);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_100B2A5F4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  v8 = a1 + v7;
  v9 = (uint64_t *)(a2 + v7);
  v10 = *(_QWORD *)(a2 + v7 + 8);
  if (v10 >> 60 == 15)
  {
    *(_OWORD *)v8 = *(_OWORD *)v9;
  }
  else
  {
    v11 = *v9;
    sub_10001BBBC(*v9, v10);
    *(_QWORD *)v8 = v11;
    *(_QWORD *)(v8 + 8) = v10;
  }
  v12 = a3[7];
  v13 = a3[8];
  v14 = *(_QWORD *)(a2 + v12);
  *(_QWORD *)(a1 + v12) = v14;
  v15 = *(_QWORD *)(a2 + v13);
  *(_QWORD *)(a1 + v13) = v15;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRetain(v15);
  return a1;
}

uint64_t sub_100B2A6B0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  v7 = a3[6];
  v8 = (uint64_t *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v10 = *(_QWORD *)(a2 + v7 + 8);
  if (*(_QWORD *)(a1 + v7 + 8) >> 60 != 15)
  {
    if (v10 >> 60 != 15)
    {
      v12 = *v9;
      sub_10001BBBC(v12, v10);
      v13 = *v8;
      v14 = v8[1];
      *v8 = v12;
      v8[1] = v10;
      sub_10001BC14(v13, v14);
      goto LABEL_8;
    }
    sub_1000DC964((uint64_t)v8);
    goto LABEL_6;
  }
  if (v10 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)v8 = *(_OWORD *)v9;
    goto LABEL_8;
  }
  v11 = *v9;
  sub_10001BBBC(v11, v10);
  *v8 = v11;
  v8[1] = v10;
LABEL_8:
  v15 = a3[7];
  v16 = *(_QWORD *)(a2 + v15);
  *(_QWORD *)(a1 + v15) = v16;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRelease();
  v17 = a3[8];
  v18 = *(_QWORD *)(a2 + v17);
  *(_QWORD *)(a1 + v17) = v18;
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100B2A7CC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  v8 = a3[8];
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  *(_QWORD *)(a1 + v8) = *(_QWORD *)(a2 + v8);
  return a1;
}

uint64_t sub_100B2A844(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  v8 = (uint64_t *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v10 = *(_QWORD *)(a1 + v7 + 8);
  if (v10 >> 60 != 15)
  {
    v11 = v9[1];
    if (v11 >> 60 != 15)
    {
      v12 = *v8;
      *v8 = *v9;
      v8[1] = v11;
      sub_10001BC14(v12, v10);
      goto LABEL_6;
    }
    sub_1000DC964((uint64_t)v8);
  }
  *(_OWORD *)v8 = *(_OWORD *)v9;
LABEL_6:
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + a3[8]) = *(_QWORD *)(a2 + a3[8]);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100B2A91C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100B2A928);
}

uint64_t sub_100B2A928(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 28));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_100B2A9A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100B2A9B0);
}

uint64_t sub_100B2A9B0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 28)) = (a2 - 1);
  return result;
}

uint64_t sub_100B2AA28(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[5];

  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_100E60278;
    v4[2] = &unk_100E602A0;
    v4[3] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[4] = (char *)&value witness table for Builtin.BridgeObject + 64;
    swift_initStructMetadata(a1, 256, 5, v4, a1 + 16);
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for KeyDropFetchRequest()
{
  return &type metadata for KeyDropFetchRequest;
}

unint64_t sub_100B2AAC4(uint64_t a1)
{
  unint64_t result;

  result = sub_100B2AAE8();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100B2AAE8()
{
  unint64_t result;

  result = qword_1011154E8;
  if (!qword_1011154E8)
  {
    result = swift_getWitnessTable(aI_50, &type metadata for KeyDropFetchRequest);
    atomic_store(result, (unint64_t *)&qword_1011154E8);
  }
  return result;
}

unint64_t sub_100B2AB2C()
{
  unint64_t result;

  result = qword_1011154F8;
  if (!qword_1011154F8)
  {
    result = swift_getWitnessTable(byte_100E606D8, &type metadata for KeyDropFetchRequest.KeyDropFetchContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1011154F8);
  }
  return result;
}

unint64_t sub_100B2AB70()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_101115508;
  if (!qword_101115508)
  {
    v1 = sub_10001F784(&qword_101115500);
    v2 = sub_100006204(&qword_101115510, type metadata accessor for KeyDropFetchRequest.SharedFetchItem, (uint64_t)&unk_100E60320);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <A> [A], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_101115508);
  }
  return result;
}

uint64_t sub_100B2ABEC(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 0x6F43746E65696C63 && a2 == 0xED0000747865746ELL)
  {
    v5 = 0xED0000747865746ELL;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6F43746E65696C63, 0xED0000747865746ELL, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6546646572616873 && a2 == 0xEB00000000686374)
  {
    swift_bridgeObjectRelease(0xEB00000000686374);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6546646572616873, 0xEB00000000686374, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_100B2AD18(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char v10;

  if (a1 == 0x64496572616873 && a2 == 0xE700000000000000)
  {
    v5 = 0xE700000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x64496572616873, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 1701869940 && a2 == 0xE400000000000000)
  {
    v7 = 0xE400000000000000;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1701869940, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x6F547265626D656DLL && a2 == 0xEB000000006E656BLL)
  {
    v8 = 0xEB000000006E656BLL;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6F547265626D656DLL, 0xEB000000006E656BLL, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0x76654464656E776FLL && a2 == 0xEE00736449656369)
  {
    v9 = 0xEE00736449656369;
LABEL_26:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x76654464656E776FLL, 0xEE00736449656369, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_26;
  }
  if (a1 == 0x6E75426572616873 && a2 == 0xEC00000073656C64)
  {
    swift_bridgeObjectRelease(0xEC00000073656C64);
    return 4;
  }
  else
  {
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6E75426572616873, 0xEC00000073656C64, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v10 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

uint64_t sub_100B2AF78(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  char v9;

  if (a1 == 0x6E49656C646E7562 && a2 == 0xEB00000000786564)
  {
    v5 = 0xEB00000000786564;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E49656C646E7562, 0xEB00000000786564, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x646E497472617473 && a2 == 0xEA00000000007865)
  {
    v7 = 0xEA00000000007865;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x646E497472617473, 0xEA00000000007865, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x7865646E49646E65 && a2 == 0xE800000000000000)
  {
    v8 = 0xE800000000000000;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7865646E49646E65, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0xD000000000000013 && a2 == 0x8000000100EEF380)
  {
    swift_bridgeObjectRelease(0x8000000100EEF380);
    return 3;
  }
  else
  {
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013, 0x8000000100EEF380, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v9 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t sub_100B2B150@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[2];
  char v25;

  v5 = sub_10001A9A8(&qword_101115518);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  v11 = sub_100B2B368();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for KeyDropFetchRequest.BundleDecryption.CodingKeys, &type metadata for KeyDropFetchRequest.BundleDecryption.CodingKeys, v11, v9, v10);
  if (v2)
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  v25 = 0;
  v12 = sub_100ACD61C();
  KeyedDecodingContainer.decode<A>(_:forKey:)(v24, &type metadata for SecondaryIndex, &v25, v5, &type metadata for SecondaryIndex, v12);
  v13 = v24[0];
  v25 = 1;
  v14 = sub_100B2B3AC();
  KeyedDecodingContainer.decode<A>(_:forKey:)(v24, &type metadata for PrimaryIndex, &v25, v5, &type metadata for PrimaryIndex, v14);
  v23 = v13;
  v15 = v24[0];
  v25 = 2;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v24, &type metadata for PrimaryIndex, &v25, v5, &type metadata for PrimaryIndex, v14);
  v16 = v15;
  v17 = v24[0];
  v25 = 3;
  v18 = sub_100036994();
  KeyedDecodingContainer.decode<A>(_:forKey:)(v24, &type metadata for Data, &v25, v5, &type metadata for Data, v18);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v19 = v24[0];
  v20 = v24[1];
  result = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  *a2 = v23;
  a2[1] = v16;
  a2[2] = v17;
  a2[3] = v19;
  a2[4] = v20;
  return result;
}

unint64_t sub_100B2B368()
{
  unint64_t result;

  result = qword_101115520;
  if (!qword_101115520)
  {
    result = swift_getWitnessTable(aI_51, &type metadata for KeyDropFetchRequest.BundleDecryption.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101115520);
  }
  return result;
}

unint64_t sub_100B2B3AC()
{
  unint64_t result;

  result = qword_101115528;
  if (!qword_101115528)
  {
    result = swift_getWitnessTable(aE_46, &type metadata for PrimaryIndex);
    atomic_store(result, (unint64_t *)&qword_101115528);
  }
  return result;
}

unint64_t sub_100B2B3F0()
{
  unint64_t result;

  result = qword_101115538;
  if (!qword_101115538)
  {
    result = swift_getWitnessTable(asc_100E6D6A4, &type metadata for PrimaryIndex);
    atomic_store(result, (unint64_t *)&qword_101115538);
  }
  return result;
}

unint64_t sub_100B2B434()
{
  unint64_t result;

  result = qword_101115548;
  if (!qword_101115548)
  {
    result = swift_getWitnessTable(byte_100E60638, &type metadata for KeyDropFetchRequest.SharedFetchItem.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101115548);
  }
  return result;
}

unint64_t sub_100B2B478()
{
  unint64_t result;

  result = qword_101115560;
  if (!qword_101115560)
  {
    result = swift_getWitnessTable(byte_100E60398, &type metadata for KeyDropFetchRequest.BundleDecryption);
    atomic_store(result, (unint64_t *)&qword_101115560);
  }
  return result;
}

unint64_t sub_100B2B4BC()
{
  unint64_t result;

  result = qword_101115578;
  if (!qword_101115578)
  {
    result = swift_getWitnessTable(byte_100E60370, &type metadata for KeyDropFetchRequest.BundleDecryption);
    atomic_store(result, (unint64_t *)&qword_101115578);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for KeyDropFetchRequest.SharedFetchItem.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_100B2B54C + 4 * byte_100E601BE[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_100B2B580 + 4 * byte_100E601B9[v4]))();
}

uint64_t sub_100B2B580(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100B2B588(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100B2B590);
  return result;
}

uint64_t sub_100B2B59C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100B2B5A4);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_100B2B5A8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100B2B5B0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for KeyDropFetchRequest.SharedFetchItem.CodingKeys()
{
  return &type metadata for KeyDropFetchRequest.SharedFetchItem.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for KeyDropFetchRequest.BundleDecryption.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_100B2B618 + 4 * byte_100E601C8[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_100B2B64C + 4 * byte_100E601C3[v4]))();
}

uint64_t sub_100B2B64C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100B2B654(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100B2B65CLL);
  return result;
}

uint64_t sub_100B2B668(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100B2B670);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_100B2B674(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100B2B67C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for KeyDropFetchRequest.BundleDecryption.CodingKeys()
{
  return &type metadata for KeyDropFetchRequest.BundleDecryption.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for KeyDropFetchRequest.KeyDropFetchContent.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_100B2B6E4 + 4 * byte_100E601D2[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100B2B718 + 4 * byte_100E601CD[v4]))();
}

uint64_t sub_100B2B718(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100B2B720(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100B2B728);
  return result;
}

uint64_t sub_100B2B734(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100B2B73CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_100B2B740(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100B2B748(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for KeyDropFetchRequest.KeyDropFetchContent.CodingKeys()
{
  return &type metadata for KeyDropFetchRequest.KeyDropFetchContent.CodingKeys;
}

unint64_t sub_100B2B768()
{
  unint64_t result;

  result = qword_101115580;
  if (!qword_101115580)
  {
    result = swift_getWitnessTable(asc_100E604A0, &type metadata for KeyDropFetchRequest.KeyDropFetchContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101115580);
  }
  return result;
}

unint64_t sub_100B2B7B0()
{
  unint64_t result;

  result = qword_101115588;
  if (!qword_101115588)
  {
    result = swift_getWitnessTable(aI_52, &type metadata for KeyDropFetchRequest.BundleDecryption.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101115588);
  }
  return result;
}

unint64_t sub_100B2B7F8()
{
  unint64_t result;

  result = qword_101115590;
  if (!qword_101115590)
  {
    result = swift_getWitnessTable(byte_100E60610, &type metadata for KeyDropFetchRequest.SharedFetchItem.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101115590);
  }
  return result;
}

unint64_t sub_100B2B840()
{
  unint64_t result;

  result = qword_101115598;
  if (!qword_101115598)
  {
    result = swift_getWitnessTable(byte_100E60580, &type metadata for KeyDropFetchRequest.SharedFetchItem.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101115598);
  }
  return result;
}

unint64_t sub_100B2B888()
{
  unint64_t result;

  result = qword_1011155A0;
  if (!qword_1011155A0)
  {
    result = swift_getWitnessTable(byte_100E605A8, &type metadata for KeyDropFetchRequest.SharedFetchItem.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1011155A0);
  }
  return result;
}

unint64_t sub_100B2B8D0()
{
  unint64_t result;

  result = qword_1011155A8;
  if (!qword_1011155A8)
  {
    result = swift_getWitnessTable(byte_100E604C8, &type metadata for KeyDropFetchRequest.BundleDecryption.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1011155A8);
  }
  return result;
}

unint64_t sub_100B2B918()
{
  unint64_t result;

  result = qword_1011155B0;
  if (!qword_1011155B0)
  {
    result = swift_getWitnessTable(byte_100E604F0, &type metadata for KeyDropFetchRequest.BundleDecryption.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1011155B0);
  }
  return result;
}

unint64_t sub_100B2B960()
{
  unint64_t result;

  result = qword_1011155B8;
  if (!qword_1011155B8)
  {
    result = swift_getWitnessTable(aI_53, &type metadata for KeyDropFetchRequest.KeyDropFetchContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1011155B8);
  }
  return result;
}

unint64_t sub_100B2B9A8()
{
  unint64_t result;

  result = qword_1011155C0;
  if (!qword_1011155C0)
  {
    result = swift_getWitnessTable(aQ_42, &type metadata for KeyDropFetchRequest.KeyDropFetchContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1011155C0);
  }
  return result;
}

_QWORD *sub_100B2B9FC(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int (*v14)(const void *, uint64_t, uint64_t, __n128);
  __n128 v15;
  uint64_t v16;
  uint64_t v17;

  v3 = (_QWORD *)a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v17 = *a2;
    *v3 = *a2;
    v3 = (_QWORD *)(v17 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    v5 = a2[1];
    *(_QWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 8) = v5;
    *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
    v6 = a2[4];
    *(_QWORD *)(a1 + 24) = a2[3];
    *(_QWORD *)(a1 + 32) = v6;
    v7 = a2[6];
    *(_QWORD *)(a1 + 40) = a2[5];
    *(_QWORD *)(a1 + 48) = v7;
    v8 = a2[8];
    v9 = *(int *)(a3 + 36);
    v10 = (char *)a2 + v9;
    v11 = (void *)(a1 + v9);
    *(_QWORD *)(a1 + 56) = a2[7];
    *(_QWORD *)(a1 + 64) = v8;
    v12 = type metadata accessor for URL(0);
    v13 = *(_QWORD *)(v12 - 8);
    v14 = *(unsigned int (**)(const void *, uint64_t, uint64_t, __n128))(v13 + 48);
    swift_bridgeObjectRetain(v5);
    swift_bridgeObjectRetain(v6);
    swift_bridgeObjectRetain(v7);
    v15 = swift_bridgeObjectRetain(v8);
    if (v14(v10, 1, v12, v15))
    {
      v16 = sub_10001A9A8(&qword_1010FBA40);
      memcpy(v11, v10, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v13 + 16))(v11, v10, v12);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v11, 0, 1, v12);
    }
  }
  return v3;
}

uint64_t sub_100B2BB34(_QWORD *a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[4]);
  swift_bridgeObjectRelease(a1[6]);
  swift_bridgeObjectRelease(a1[8]);
  v4 = (char *)a1 + *(int *)(a2 + 36);
  v5 = type metadata accessor for URL(0);
  v6 = *(_QWORD *)(v5 - 8);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v4, v5);
  return result;
}

uint64_t sub_100B2BBC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(const void *, uint64_t, uint64_t, __n128);
  __n128 v14;
  uint64_t v15;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v5;
  v6 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v6;
  v7 = *(_QWORD *)(a2 + 64);
  v8 = *(int *)(a3 + 36);
  v9 = (const void *)(a2 + v8);
  v10 = (void *)(a1 + v8);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v7;
  v11 = type metadata accessor for URL(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(unsigned int (**)(const void *, uint64_t, uint64_t, __n128))(v12 + 48);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  v14 = swift_bridgeObjectRetain(v7);
  if (v13(v9, 1, v11, v14))
  {
    v15 = sub_10001A9A8(&qword_1010FBA40);
    memcpy(v10, v9, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v12 + 16))(v10, v9, v11);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v10, 0, 1, v11);
  }
  return a1;
}

uint64_t sub_100B2BCD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(void *, uint64_t, uint64_t);
  int v16;
  int v17;
  uint64_t v18;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 32) = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v8 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 48) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  v9 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 64) = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease();
  v10 = *(int *)(a3 + 36);
  v11 = (void *)(a1 + v10);
  v12 = (void *)(a2 + v10);
  v13 = type metadata accessor for URL(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v14 + 48);
  v16 = v15(v11, 1, v13);
  v17 = v15(v12, 1, v13);
  if (!v16)
  {
    if (!v17)
    {
      (*(void (**)(void *, void *, uint64_t))(v14 + 24))(v11, v12, v13);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v14 + 8))(v11, v13);
    goto LABEL_6;
  }
  if (v17)
  {
LABEL_6:
    v18 = sub_10001A9A8(&qword_1010FBA40);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v14 + 16))(v11, v12, v13);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
  return a1;
}

uint64_t sub_100B2BE64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  void *v5;
  const void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  v4 = *(int *)(a3 + 36);
  v5 = (void *)(a1 + v4);
  v6 = (const void *)(a2 + v4);
  v7 = type metadata accessor for URL(0);
  v8 = *(_QWORD *)(v7 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7))
  {
    v9 = sub_10001A9A8(&qword_1010FBA40);
    memcpy(v5, v6, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v8 + 32))(v5, v6, v7);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v5, 0, 1, v7);
  }
  return a1;
}

uint64_t sub_100B2BF40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(void *, uint64_t, uint64_t);
  int v16;
  int v17;
  uint64_t v18;

  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v7;
  swift_bridgeObjectRelease();
  v8 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v8;
  swift_bridgeObjectRelease();
  v9 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v9;
  swift_bridgeObjectRelease();
  v10 = *(int *)(a3 + 36);
  v11 = (void *)(a1 + v10);
  v12 = (void *)(a2 + v10);
  v13 = type metadata accessor for URL(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v14 + 48);
  v16 = v15(v11, 1, v13);
  v17 = v15(v12, 1, v13);
  if (!v16)
  {
    if (!v17)
    {
      (*(void (**)(void *, void *, uint64_t))(v14 + 40))(v11, v12, v13);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v14 + 8))(v11, v13);
    goto LABEL_6;
  }
  if (v17)
  {
LABEL_6:
    v18 = sub_10001A9A8(&qword_1010FBA40);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v14 + 32))(v11, v12, v13);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
  return a1;
}

uint64_t sub_100B2C090(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100B2C09C);
}

uint64_t sub_100B2C09C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  int v5;
  uint64_t v9;

  if ((_DWORD)a2 == 2147483646)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    v5 = v4 - 1;
    if (v5 < 0)
      v5 = -1;
    return (v5 + 1);
  }
  else
  {
    v9 = sub_10001A9A8(&qword_1010FBA40);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(a1 + *(int *)(a3 + 36), a2, v9);
  }
}

uint64_t sub_100B2C128(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100B2C134);
}

uint64_t sub_100B2C134(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 2147483646)
  {
    *(_QWORD *)(result + 8) = a2;
  }
  else
  {
    v7 = sub_10001A9A8(&qword_1010FBA40);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 36), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for OfflineLostModeInfoLookupResponse(uint64_t a1)
{
  uint64_t result;

  result = qword_101115620;
  if (!qword_101115620)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for OfflineLostModeInfoLookupResponse);
  return result;
}

void sub_100B2C1E8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[6];

  v4[0] = &unk_100E60768;
  v4[1] = &unk_100E60780;
  v4[2] = &unk_100E60768;
  v4[3] = &unk_100E60768;
  v4[4] = &unk_100E60768;
  sub_100472828(319);
  if (v3 <= 0x3F)
  {
    v4[5] = *(_QWORD *)(v2 - 8) + 64;
    swift_initStructMetadata(a1, 256, 6, v4, a1 + 16);
  }
}

uint64_t sub_100B2C26C(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  char v26;
  char v27;
  char v28;
  char v29;
  char v30;
  char v31;

  v3 = v1;
  v5 = sub_10001A9A8(&qword_101115678);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  v11 = sub_100B2C940();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for OfflineLostModeInfoLookupResponse.CodingKeys, &type metadata for OfflineLostModeInfoLookupResponse.CodingKeys, v11, v9, v10);
  v12 = *v3;
  v13 = v3[1];
  v31 = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v12, v13, &v31, v5);
  if (!v2)
  {
    v14 = *((unsigned __int8 *)v3 + 16);
    v30 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v14, &v30, v5);
    v15 = v3[3];
    v16 = v3[4];
    v29 = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v15, v16, &v29, v5);
    v17 = v3[5];
    v18 = v3[6];
    v28 = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v17, v18, &v28, v5);
    v19 = v3[7];
    v20 = v3[8];
    v27 = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v19, v20, &v27, v5);
    v21 = (uint64_t)v3 + *(int *)(type metadata accessor for OfflineLostModeInfoLookupResponse(0) + 36);
    v26 = 5;
    v22 = type metadata accessor for URL(0);
    v23 = sub_100B2CA04(&qword_1010FE330, (const char *)&protocol conformance descriptor for URL);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v21, &v26, v5, v22, v23);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100B2C458@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  char v29;
  char v30;
  char v31;
  char v32;
  char v33;
  char v34;

  v26 = a2;
  v4 = sub_10001A9A8(&qword_1010FBA40);
  __chkstk_darwin(v4);
  v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = sub_10001A9A8(&qword_101115668);
  v7 = *(_QWORD *)(v27 - 8);
  __chkstk_darwin(v27);
  v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for OfflineLostModeInfoLookupResponse(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1[3];
  v13 = a1[4];
  v28 = a1;
  sub_10001AA44(a1, v14);
  v15 = sub_100B2C940();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for OfflineLostModeInfoLookupResponse.CodingKeys, &type metadata for OfflineLostModeInfoLookupResponse.CodingKeys, v15, v14, v13);
  if (v2)
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v28);
  v16 = (uint64_t)v6;
  v34 = 0;
  v17 = v27;
  *(_QWORD *)v12 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v34, v27);
  *((_QWORD *)v12 + 1) = v18;
  v33 = 1;
  v12[16] = KeyedDecodingContainer.decode(_:forKey:)(&v33, v17) & 1;
  v32 = 2;
  *((_QWORD *)v12 + 3) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v32, v17);
  *((_QWORD *)v12 + 4) = v19;
  v31 = 3;
  *((_QWORD *)v12 + 5) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v31, v17);
  *((_QWORD *)v12 + 6) = v20;
  v30 = 4;
  v25 = 0;
  *((_QWORD *)v12 + 7) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v30, v17);
  *((_QWORD *)v12 + 8) = v21;
  v22 = type metadata accessor for URL(0);
  v29 = 5;
  v23 = sub_100B2CA04(&qword_1010FE320, (const char *)&protocol conformance descriptor for URL);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v22, &v29, v17, v22, v23);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v17);
  sub_100027D20(v16, (uint64_t)&v12[*(int *)(v10 + 36)]);
  sub_100B2C984((uint64_t)v12, v26);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v28);
  return sub_100B2C9C8((uint64_t)v12);
}

uint64_t sub_100B2C7D8()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100B2C810 + 4 * byte_100E60730[*v0]))(0x6D754E656E6F6870, 0xEB00000000726562);
}

uint64_t sub_100B2C810()
{
  return 0x6F4D74736F4C6E69;
}

uint64_t sub_100B2C82C()
{
  return 0x6C69616D65;
}

unint64_t sub_100B2C840()
{
  return 0xD000000000000010;
}

uint64_t sub_100B2C85C()
{
  return 0x7373654D74736F6CLL;
}

uint64_t sub_100B2C880()
{
  return 0x48746C7561666564;
}

uint64_t sub_100B2C8A4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100B2CBE8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100B2C8C8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100B2C940();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100B2C8F0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100B2C940();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100B2C918@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100B2C458(a1, a2);
}

uint64_t sub_100B2C92C(_QWORD *a1)
{
  return sub_100B2C26C(a1);
}

unint64_t sub_100B2C940()
{
  unint64_t result;

  result = qword_101115670;
  if (!qword_101115670)
  {
    result = swift_getWitnessTable(aE_47, &type metadata for OfflineLostModeInfoLookupResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101115670);
  }
  return result;
}

uint64_t sub_100B2C984(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for OfflineLostModeInfoLookupResponse(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100B2C9C8(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for OfflineLostModeInfoLookupResponse(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100B2CA04(unint64_t *a1, const char *a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for URL(255);
    result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for OfflineLostModeInfoLookupResponse.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_100B2CA90 + 4 * byte_100E6073B[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_100B2CAC4 + 4 * byte_100E60736[v4]))();
}

uint64_t sub_100B2CAC4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100B2CACC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100B2CAD4);
  return result;
}

uint64_t sub_100B2CAE0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100B2CAE8);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_100B2CAEC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100B2CAF4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for OfflineLostModeInfoLookupResponse.CodingKeys()
{
  return &type metadata for OfflineLostModeInfoLookupResponse.CodingKeys;
}

unint64_t sub_100B2CB14()
{
  unint64_t result;

  result = qword_101115680;
  if (!qword_101115680)
  {
    result = swift_getWitnessTable(asc_100E60884, &type metadata for OfflineLostModeInfoLookupResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101115680);
  }
  return result;
}

unint64_t sub_100B2CB5C()
{
  unint64_t result;

  result = qword_101115688;
  if (!qword_101115688)
  {
    result = swift_getWitnessTable(byte_100E607F4, &type metadata for OfflineLostModeInfoLookupResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101115688);
  }
  return result;
}

unint64_t sub_100B2CBA4()
{
  unint64_t result;

  result = qword_101115690;
  if (!qword_101115690)
  {
    result = swift_getWitnessTable(byte_100E6081C, &type metadata for OfflineLostModeInfoLookupResponse.CodingKeys);
    atomic_store(result, &qword_101115690);
  }
  return result;
}

uint64_t sub_100B2CBE8(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char v11;

  if (a1 == 0x6D754E656E6F6870 && a2 == 0xEB00000000726562)
  {
    v5 = 0xEB00000000726562;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6D754E656E6F6870, 0xEB00000000726562, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6F4D74736F4C6E69 && a2 == 0xEA00000000006564)
  {
    v7 = 0xEA00000000006564;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6F4D74736F4C6E69, 0xEA00000000006564, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x6C69616D65 && a2 == 0xE500000000000000)
  {
    v8 = 0xE500000000000000;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6C69616D65, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0xD000000000000010)
  {
    v9 = 0x8000000100EEF3A0;
    if (a2 == 0x8000000100EEF3A0)
      goto LABEL_25;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x8000000100EEF3A0, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
LABEL_25:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if (a1 == 0x7373654D74736F6CLL && a2 == 0xEF74786554656761)
  {
    v10 = 0xEF74786554656761;
LABEL_31:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7373654D74736F6CLL, 0xEF74786554656761, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_31;
  }
  if (a1 == 0x48746C7561666564 && a2 == 0xEF6E6F63496F7265)
  {
    swift_bridgeObjectRelease(0xEF6E6F63496F7265);
    return 5;
  }
  else
  {
    v11 = _stringCompareWithSmolCheck(_:_:expecting:)(0x48746C7561666564, 0xEF6E6F63496F7265, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v11 & 1) != 0)
      return 5;
    else
      return 6;
  }
}

uint64_t sub_100B2CEC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  v4[10] = a3;
  v4[11] = v3;
  v4[8] = a1;
  v4[9] = a2;
  v5 = type metadata accessor for String.Encoding(0);
  v4[12] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100B2CF20, v3, 0);
}

uint64_t sub_100B2CF20()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v38;
  uint64_t (*v39)(uint64_t, char);
  uint64_t v40;

  if (qword_1010EA5F0 != -1)
    swift_once(&qword_1010EA5F0, sub_100D79F3C);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_10001A9E8(v1, (uint64_t)qword_1011B84B0);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Fetch request", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v6 = v0[8];
  v8 = v0[9];
  v7 = v0[10];

  swift_bridgeObjectRetain(v6);
  sub_10001BBBC(v8, v7);
  swift_bridgeObjectRetain(v6);
  v9 = sub_10001BBBC(v8, v7);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.debug.getter(v10);
  if (os_log_type_enabled(v10, v11))
  {
    v12 = v0[12];
    v13 = v0[9];
    v14 = v0[10];
    v15 = v0[8];
    v16 = (uint8_t *)swift_slowAlloc(12, -1);
    v38 = swift_slowAlloc(32, -1);
    v40 = v38;
    *(_DWORD *)v16 = 136315138;
    swift_bridgeObjectRetain(v15);
    sub_10001BBBC(v13, v14);
    v17 = sub_10001BBBC(v13, v14);
    static String.Encoding.utf8.getter(v17);
    v18 = String.init(data:encoding:)(v13, v14, v12);
    if (v19)
    {
      v20 = v18;
      v21 = v19;
      v23 = v0[9];
      v22 = v0[10];
      sub_10001BC14(v23, v22);
      swift_bridgeObjectRelease();
      sub_10001BC14(v23, v22);
    }
    else
    {
      v26 = Logger.logObject.getter(v18);
      v27 = static os_log_type_t.error.getter(v26);
      if (os_log_type_enabled(v26, v27))
      {
        v28 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v28 = 0;
        _os_log_impl((void *)&_mh_execute_header, v26, v27, "Empty description for request body.", v28, 2u);
        swift_slowDealloc(v28, -1, -1);
      }
      v30 = v0[9];
      v29 = v0[10];

      sub_10001BC14(v30, v29);
      swift_bridgeObjectRelease();
      sub_10001BC14(v30, v29);
      v21 = 0xE300000000000000;
      v20 = 7104878;
    }
    v32 = v0[9];
    v31 = v0[10];
    v0[7] = sub_100016940(v20, v21, &v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 7, v0 + 8, v16 + 4, v16 + 12);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10001BC14(v32, v31);
    swift_bridgeObjectRelease();
    sub_10001BC14(v32, v31);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "KeyDropFetchRequest: %s", v16, 0xCu);
    swift_arrayDestroy(v38, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v38, -1, -1);
    swift_slowDealloc(v16, -1, -1);
  }
  else
  {
    v25 = v0[9];
    v24 = v0[10];
    swift_bridgeObjectRelease();
    sub_10001BC14(v25, v24);
    swift_bridgeObjectRelease();
    sub_10001BC14(v25, v24);
  }

  v33 = v0[9];
  v34 = v0[10];
  v35 = v0[8];
  v0[5] = &type metadata for KeyDropFetchRequest;
  v0[6] = sub_100B2EE1C();
  v0[2] = v35;
  v0[3] = v33;
  v0[4] = v34;
  swift_bridgeObjectRetain(v35);
  sub_10001BBBC(v33, v34);
  v39 = (uint64_t (*)(uint64_t, char))((char *)&dword_1011156A8 + dword_1011156A8);
  v36 = (_QWORD *)swift_task_alloc(unk_1011156AC);
  v0[13] = v36;
  *v36 = v0;
  v36[1] = sub_100B2D338;
  return v39((uint64_t)(v0 + 2), 4);
}

uint64_t sub_100B2D338(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v10 = *(_QWORD *)(*v5 + 104);
  v11 = *v5;
  *(_QWORD *)(v11 + 112) = v4;
  swift_task_dealloc(v10);
  if (v4)
    return swift_task_switch(sub_100B2D3F4, *(_QWORD *)(v11 + 88), 0);
  v13 = *(_QWORD *)(v11 + 96);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v11 + 16));
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 8))(a1, a2, a3, a4);
}

uint64_t sub_100B2D3F4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 96);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100B2D434(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  *(_QWORD *)(v4 + 104) = a2;
  *(_QWORD *)(v4 + 112) = v3;
  *(_BYTE *)(v4 + 200) = a3;
  *(_QWORD *)(v4 + 96) = a1;
  v5 = type metadata accessor for FMNServerInteractionController.FMNResponseFields(0);
  *(_QWORD *)(v4 + 120) = v5;
  v6 = *(_QWORD *)(v5 - 8);
  *(_QWORD *)(v4 + 128) = v6;
  v7 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v4 + 136) = swift_task_alloc(v7);
  *(_QWORD *)(v4 + 144) = swift_task_alloc(v7);
  *(_QWORD *)(v4 + 152) = swift_task_alloc(v7);
  return swift_task_switch(sub_100B2D4B8, v3, 0);
}

uint64_t sub_100B2D4B8()
{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v10;

  v1 = *(uint64_t (**)(void))(*(_QWORD *)(v0 + 112) + 112);
  if (v1 && (v2 = v1()) != 0)
  {
    *(_QWORD *)(v0 + 160) = v2;
    v3 = *(_QWORD **)(v0 + 104);
    v4 = v3[3];
    v5 = v3[4];
    v6 = sub_10001AA44(v3, v4);
    *(_QWORD *)(v0 + 40) = v4;
    *(_QWORD *)(v0 + 48) = *(_QWORD *)(v5 + 8);
    v7 = sub_100018F08((_QWORD *)(v0 + 16));
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(v7, v6, v4);
    v8 = (_QWORD *)swift_task_alloc(dword_1010F7D04);
    *(_QWORD *)(v0 + 168) = v8;
    *v8 = v0;
    v8[1] = sub_100B2D5BC;
    return sub_100338A60(*(_QWORD *)(v0 + 152), v0 + 16);
  }
  else
  {
    v10 = (_QWORD *)swift_task_alloc(dword_10111F794);
    *(_QWORD *)(v0 + 184) = v10;
    *v10 = v0;
    v10[1] = sub_100B2DBD4;
    return sub_100D7C1F0(*(_BYTE *)(v0 + 200));
  }
}

uint64_t sub_100B2D5BC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 168);
  *(_QWORD *)(*v1 + 176) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = *(_QWORD *)(v2 + 112);
    v5 = sub_100B2DB70;
  }
  else
  {
    v6 = *(_QWORD *)(v2 + 112);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v2 + 16));
    v5 = sub_100B2D630;
    v4 = v6;
  }
  return swift_task_switch(v5, v4, 0);
}

uint64_t sub_100B2D630()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  void (*v18)(uint64_t, uint64_t);
  void (*v19)(uint64_t, uint64_t);
  uint8_t *v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t (*v55)(uint64_t, uint64_t, uint64_t);
  void (*v56)(uint64_t, uint64_t);
  uint64_t v57;
  uint64_t v58[2];

  if (qword_1010EA5F8 != -1)
    swift_once(&qword_1010EA5F8, sub_100D7B7E4);
  v57 = v0 + 88;
  if (qword_1010EA5F0 != -1)
    swift_once(&qword_1010EA5F0, sub_100D79F3C);
  v1 = *(_QWORD *)(v0 + 144);
  v2 = *(_QWORD *)(v0 + 152);
  v4 = *(_QWORD *)(v0 + 120);
  v3 = *(_QWORD *)(v0 + 128);
  v5 = type metadata accessor for Logger(0);
  sub_10001A9E8(v5, (uint64_t)qword_1011B84B0);
  v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v7 = v6(v1, v2, v4);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter(v8);
  v10 = os_log_type_enabled(v8, v9);
  v11 = *(_QWORD *)(v0 + 144);
  v13 = *(_QWORD *)(v0 + 120);
  v12 = *(_QWORD *)(v0 + 128);
  if (v10)
  {
    v55 = v6;
    v14 = (uint8_t *)swift_slowAlloc(12, -1);
    v54 = swift_slowAlloc(32, -1);
    v58[0] = v54;
    *(_DWORD *)v14 = 136315138;
    v15 = sub_100006204((unint64_t *)&qword_1010FBA30, (uint64_t (*)(uint64_t))&type metadata accessor for FMNServerInteractionController.FMNResponseFields, (uint64_t)&protocol conformance descriptor for FMNServerInteractionController.FMNResponseFields);
    v16 = dispatch thunk of CustomStringConvertible.description.getter(v13, v15);
    *(_QWORD *)(v0 + 88) = sub_100016940(v16, v17, v58);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v57, v0 + 96, v14 + 4, v14 + 12);
    swift_bridgeObjectRelease();
    v18 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
    v18(v11, v13);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Response value is %s", v14, 0xCu);
    swift_arrayDestroy(v54, 1, (char *)&type metadata for Any + 8);
    v19 = v18;
    swift_slowDealloc(v54, -1, -1);
    v20 = v14;
    v6 = v55;
    swift_slowDealloc(v20, -1, -1);
  }
  else
  {
    v19 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
    v19(*(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 120));
  }

  v21 = v6(*(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 120));
  v22 = Logger.logObject.getter(v21);
  v23 = static os_log_type_t.info.getter(v22);
  if (os_log_type_enabled(v22, v23))
  {
    v24 = swift_slowAlloc(22, -1);
    v25 = swift_slowAlloc(64, -1);
    v58[0] = v25;
    *(_DWORD *)v24 = 136446466;
    *(_QWORD *)(v0 + 72) = sub_100016940(0xD000000000000017, 0x8000000100EEF400, v58);
    v26 = UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 72, v0 + 80, v24 + 4, v24 + 12);
    *(_WORD *)(v24 + 12) = 2082;
    v27 = FMNServerInteractionController.FMNResponseFields.responseHeaders.getter(v26);
    v56 = v19;
    if (*(_QWORD *)(v27 + 16) && (v28 = sub_100518DA0(0xD000000000000014, 0x8000000100EE0BF0), (v29 & 1) != 0))
    {
      v30 = (uint64_t *)(*(_QWORD *)(v27 + 56) + 16 * v28);
      v32 = *v30;
      v31 = v30[1];
      swift_bridgeObjectRetain(v31);
    }
    else
    {
      v32 = 0;
      v31 = 0;
    }
    v33 = *(_QWORD *)(v0 + 136);
    v34 = *(_QWORD *)(v0 + 120);
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 56) = v32;
    *(_QWORD *)(v0 + 64) = v31;
    v35 = sub_10001A9A8(&qword_1010F6350);
    v36 = String.init<A>(describing:)(v0 + 56, v35);
    *(_QWORD *)(v0 + 80) = sub_100016940(v36, v37, v58);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 80, v57, v24 + 14, v24 + 22);
    swift_bridgeObjectRelease();
    v38 = v34;
    v19 = v56;
    v56(v33, v38);
    swift_arrayDestroy(v25, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v25, -1, -1);
    swift_slowDealloc(v24, -1, -1);
  }
  else
  {
    v19(*(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 120));
  }

  v39 = *(_QWORD *)(v0 + 176);
  sub_100D7CA5C(*(_QWORD *)(v0 + 152));
  if (v39)
  {
    v40 = *(_QWORD *)(v0 + 152);
    v41 = *(_QWORD *)(v0 + 120);
    swift_release();
    v19(v40, v41);
    v48 = *(_QWORD *)(v0 + 144);
    v49 = *(_QWORD *)(v0 + 136);
    swift_task_dealloc(*(_QWORD *)(v0 + 152));
    swift_task_dealloc(v48);
    swift_task_dealloc(v49);
  }
  else
  {
    v42 = type metadata accessor for KeyDropDownloadResponse(0);
    v43 = FMNServerInteractionController.FMNResponseFields.data.getter(v42);
    v45 = v44;
    v46 = sub_100006204(&qword_1011156D0, type metadata accessor for KeyDropDownloadResponse, (uint64_t)&unk_100E6EA70);
    dispatch thunk of JSONDecoder.decode<A>(_:from:)(v42, v43, v45, v42, v46);
    v47 = *(_QWORD *)(v0 + 152);
    v52 = *(_QWORD *)(v0 + 136);
    v51 = *(_QWORD *)(v0 + 144);
    v53 = *(_QWORD *)(v0 + 120);
    swift_release();
    sub_10001BC14(v43, v45);
    v19(v47, v53);
    swift_task_dealloc(v47);
    swift_task_dealloc(v51);
    swift_task_dealloc(v52);
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100B2DB70()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
  v1 = *(_QWORD *)(v0 + 144);
  v2 = *(_QWORD *)(v0 + 136);
  swift_task_dealloc(*(_QWORD *)(v0 + 152));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100B2DBD4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 184);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 112);
  *(_QWORD *)(*(_QWORD *)v1 + 192) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100B2DC34, v3, 0);
}

uint64_t sub_100B2DC34()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;

  v0[20] = v0[24];
  v1 = (_QWORD *)v0[13];
  v2 = v1[3];
  v3 = v1[4];
  v4 = sub_10001AA44(v1, v2);
  v0[5] = v2;
  v0[6] = *(_QWORD *)(v3 + 8);
  v5 = sub_100018F08(v0 + 2);
  (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(v5, v4, v2);
  v6 = (_QWORD *)swift_task_alloc(dword_1010F7D04);
  v0[21] = v6;
  *v6 = v0;
  v6[1] = sub_100B2D5BC;
  return sub_100338A60(v0[19], (uint64_t)(v0 + 2));
}

uint64_t sub_100B2DCDC(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  *(_BYTE *)(v3 + 193) = a2;
  *(_QWORD *)(v3 + 96) = a1;
  *(_QWORD *)(v3 + 104) = v2;
  v4 = type metadata accessor for FMNServerInteractionController.FMNResponseFields(0);
  *(_QWORD *)(v3 + 112) = v4;
  v5 = *(_QWORD *)(v4 - 8);
  *(_QWORD *)(v3 + 120) = v5;
  v6 = (*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v3 + 128) = swift_task_alloc(v6);
  *(_QWORD *)(v3 + 136) = swift_task_alloc(v6);
  *(_QWORD *)(v3 + 144) = swift_task_alloc(v6);
  return swift_task_switch(sub_100B2DD5C, v2, 0);
}

uint64_t sub_100B2DD5C()
{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v10;

  v1 = *(uint64_t (**)(void))(*(_QWORD *)(v0 + 104) + 112);
  if (v1 && (v2 = v1()) != 0)
  {
    *(_QWORD *)(v0 + 152) = v2;
    v3 = *(_QWORD **)(v0 + 96);
    v4 = v3[3];
    v5 = v3[4];
    v6 = sub_10001AA44(v3, v4);
    *(_QWORD *)(v0 + 40) = v4;
    *(_QWORD *)(v0 + 48) = *(_QWORD *)(v5 + 8);
    v7 = sub_100018F08((_QWORD *)(v0 + 16));
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(v7, v6, v4);
    v8 = (_QWORD *)swift_task_alloc(dword_1010F7D04);
    *(_QWORD *)(v0 + 160) = v8;
    *v8 = v0;
    v8[1] = sub_100B2DE60;
    return sub_100338A60(*(_QWORD *)(v0 + 144), v0 + 16);
  }
  else
  {
    v10 = (_QWORD *)swift_task_alloc(dword_10111F794);
    *(_QWORD *)(v0 + 176) = v10;
    *v10 = v0;
    v10[1] = sub_100B2E460;
    return sub_100D7C1F0(*(_BYTE *)(v0 + 193));
  }
}

uint64_t sub_100B2DE60()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 160);
  *(_QWORD *)(*v1 + 168) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = *(_QWORD *)(v2 + 104);
    v5 = sub_100B2E3F8;
  }
  else
  {
    v6 = *(_QWORD *)(v2 + 104);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v2 + 16));
    v5 = sub_100B2DED4;
    v4 = v6;
  }
  return swift_task_switch(v5, v4, 0);
}

uint64_t sub_100B2DED4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  void (*v18)(uint64_t, uint64_t);
  void (*v19)(uint64_t, uint64_t);
  uint8_t *v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t (*v55)(uint64_t, uint64_t, uint64_t);
  uint64_t v56;
  uint64_t v57;
  uint64_t v58[2];

  if (qword_1010EA5F8 != -1)
    swift_once(&qword_1010EA5F8, sub_100D7B7E4);
  v57 = v0 + 88;
  if (qword_1010EA5F0 != -1)
    swift_once(&qword_1010EA5F0, sub_100D79F3C);
  v1 = *(_QWORD *)(v0 + 136);
  v2 = *(_QWORD *)(v0 + 144);
  v4 = *(_QWORD *)(v0 + 112);
  v3 = *(_QWORD *)(v0 + 120);
  v5 = type metadata accessor for Logger(0);
  sub_10001A9E8(v5, (uint64_t)qword_1011B84B0);
  v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v7 = v6(v1, v2, v4);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter(v8);
  v10 = os_log_type_enabled(v8, v9);
  v11 = *(_QWORD *)(v0 + 136);
  v13 = *(_QWORD *)(v0 + 112);
  v12 = *(_QWORD *)(v0 + 120);
  if (v10)
  {
    v55 = v6;
    v14 = (uint8_t *)swift_slowAlloc(12, -1);
    v54 = swift_slowAlloc(32, -1);
    v58[0] = v54;
    *(_DWORD *)v14 = 136315138;
    v15 = sub_100006204((unint64_t *)&qword_1010FBA30, (uint64_t (*)(uint64_t))&type metadata accessor for FMNServerInteractionController.FMNResponseFields, (uint64_t)&protocol conformance descriptor for FMNServerInteractionController.FMNResponseFields);
    v16 = dispatch thunk of CustomStringConvertible.description.getter(v13, v15);
    *(_QWORD *)(v0 + 88) = sub_100016940(v16, v17, v58);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v57, v0 + 96, v14 + 4, v14 + 12);
    swift_bridgeObjectRelease();
    v18 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
    v18(v11, v13);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Response value is %s", v14, 0xCu);
    swift_arrayDestroy(v54, 1, (char *)&type metadata for Any + 8);
    v19 = v18;
    swift_slowDealloc(v54, -1, -1);
    v20 = v14;
    v6 = v55;
    swift_slowDealloc(v20, -1, -1);
  }
  else
  {
    v19 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
    v19(*(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 112));
  }

  v21 = v6(*(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 112));
  v22 = Logger.logObject.getter(v21);
  v23 = static os_log_type_t.info.getter(v22);
  if (os_log_type_enabled(v22, v23))
  {
    v24 = swift_slowAlloc(22, -1);
    v25 = swift_slowAlloc(64, -1);
    v58[0] = v25;
    *(_DWORD *)v24 = 136446466;
    *(_QWORD *)(v0 + 72) = sub_100016940(0xD000000000000015, 0x8000000100EEF3E0, v58);
    v26 = UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 72, v0 + 80, v24 + 4, v24 + 12);
    *(_WORD *)(v24 + 12) = 2082;
    v27 = FMNServerInteractionController.FMNResponseFields.responseHeaders.getter(v26);
    v56 = v25;
    if (*(_QWORD *)(v27 + 16) && (v28 = sub_100518DA0(0xD000000000000014, 0x8000000100EE0BF0), (v29 & 1) != 0))
    {
      v30 = (uint64_t *)(*(_QWORD *)(v27 + 56) + 16 * v28);
      v32 = *v30;
      v31 = v30[1];
      swift_bridgeObjectRetain(v31);
    }
    else
    {
      v32 = 0;
      v31 = 0;
    }
    v33 = *(_QWORD *)(v0 + 128);
    v34 = *(_QWORD *)(v0 + 112);
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 56) = v32;
    *(_QWORD *)(v0 + 64) = v31;
    v35 = sub_10001A9A8(&qword_1010F6350);
    v36 = String.init<A>(describing:)(v0 + 56, v35);
    *(_QWORD *)(v0 + 80) = sub_100016940(v36, v37, v58);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 80, v57, v24 + 14, v24 + 22);
    swift_bridgeObjectRelease();
    v19(v33, v34);
    swift_arrayDestroy(v56, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v56, -1, -1);
    swift_slowDealloc(v24, -1, -1);
  }
  else
  {
    v19(*(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 112));
  }

  v38 = *(_QWORD *)(v0 + 168);
  v39 = sub_100D7CA5C(*(_QWORD *)(v0 + 144));
  if (v38)
  {
    v40 = *(_QWORD *)(v0 + 144);
    v41 = *(_QWORD *)(v0 + 112);
    swift_release();
    v19(v40, v41);
    v47 = *(_QWORD *)(v0 + 136);
    v48 = *(_QWORD *)(v0 + 128);
    swift_task_dealloc(*(_QWORD *)(v0 + 144));
    swift_task_dealloc(v47);
    swift_task_dealloc(v48);
    return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
  }
  else
  {
    v42 = FMNServerInteractionController.FMNResponseFields.data.getter(v39);
    v44 = v43;
    v45 = sub_100B2EEA4();
    dispatch thunk of JSONDecoder.decode<A>(_:from:)(&type metadata for KeyDropDeleteResponse, v42, v44, &type metadata for KeyDropDeleteResponse, v45);
    v46 = *(_QWORD *)(v0 + 144);
    v51 = *(_QWORD *)(v0 + 128);
    v50 = *(_QWORD *)(v0 + 136);
    v52 = *(_QWORD *)(v0 + 112);
    swift_release();
    sub_10001BC14(v42, v44);
    v19(v46, v52);
    v53 = *(unsigned __int8 *)(v0 + 192);
    swift_task_dealloc(v46);
    swift_task_dealloc(v50);
    swift_task_dealloc(v51);
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v53);
  }
}

uint64_t sub_100B2E3F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
  v1 = *(_QWORD *)(v0 + 136);
  v2 = *(_QWORD *)(v0 + 128);
  swift_task_dealloc(*(_QWORD *)(v0 + 144));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

uint64_t sub_100B2E460(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 176);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 104);
  *(_QWORD *)(*(_QWORD *)v1 + 184) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100B2E4C0, v3, 0);
}

uint64_t sub_100B2E4C0()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;

  v0[19] = v0[23];
  v1 = (_QWORD *)v0[12];
  v2 = v1[3];
  v3 = v1[4];
  v4 = sub_10001AA44(v1, v2);
  v0[5] = v2;
  v0[6] = *(_QWORD *)(v3 + 8);
  v5 = sub_100018F08(v0 + 2);
  (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(v5, v4, v2);
  v6 = (_QWORD *)swift_task_alloc(dword_1010F7D04);
  v0[20] = v6;
  *v6 = v0;
  v6[1] = sub_100B2DE60;
  return sub_100338A60(v0[18], (uint64_t)(v0 + 2));
}

uint64_t sub_100B2E568(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  *(_BYTE *)(v3 + 224) = a2;
  *(_QWORD *)(v3 + 128) = a1;
  *(_QWORD *)(v3 + 136) = v2;
  v4 = type metadata accessor for FMNServerInteractionController.FMNResponseFields(0);
  *(_QWORD *)(v3 + 144) = v4;
  v5 = *(_QWORD *)(v4 - 8);
  *(_QWORD *)(v3 + 152) = v5;
  v6 = (*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v3 + 160) = swift_task_alloc(v6);
  *(_QWORD *)(v3 + 168) = swift_task_alloc(v6);
  *(_QWORD *)(v3 + 176) = swift_task_alloc(v6);
  return swift_task_switch(sub_100B2E5E8, v2, 0);
}

uint64_t sub_100B2E5E8()
{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v10;

  v1 = *(uint64_t (**)(void))(*(_QWORD *)(v0 + 136) + 112);
  if (v1 && (v2 = v1()) != 0)
  {
    *(_QWORD *)(v0 + 184) = v2;
    v3 = *(_QWORD **)(v0 + 128);
    v4 = v3[3];
    v5 = v3[4];
    v6 = sub_10001AA44(v3, v4);
    *(_QWORD *)(v0 + 40) = v4;
    *(_QWORD *)(v0 + 48) = *(_QWORD *)(v5 + 8);
    v7 = sub_100018F08((_QWORD *)(v0 + 16));
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(v7, v6, v4);
    v8 = (_QWORD *)swift_task_alloc(dword_1010F7D04);
    *(_QWORD *)(v0 + 192) = v8;
    *v8 = v0;
    v8[1] = sub_100B2E6EC;
    return sub_100338A60(*(_QWORD *)(v0 + 176), v0 + 16);
  }
  else
  {
    v10 = (_QWORD *)swift_task_alloc(dword_10111F794);
    *(_QWORD *)(v0 + 208) = v10;
    *v10 = v0;
    v10[1] = sub_100B2ED14;
    return sub_100D7C1F0(*(_BYTE *)(v0 + 224));
  }
}

uint64_t sub_100B2E6EC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 192);
  *(_QWORD *)(*v1 + 200) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = *(_QWORD *)(v2 + 136);
    v5 = sub_100B2ECB0;
  }
  else
  {
    v6 = *(_QWORD *)(v2 + 136);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v2 + 16));
    v5 = sub_100B2E760;
    v4 = v6;
  }
  return swift_task_switch(v5, v4, 0);
}

uint64_t sub_100B2E760()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t);
  uint8_t *v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t (*v59)(uint64_t, uint64_t, uint64_t);
  uint64_t v60;
  void (*v61)(uint64_t, uint64_t);
  uint64_t v62;
  uint64_t v63[2];

  if (qword_1010EA5F8 != -1)
    swift_once(&qword_1010EA5F8, sub_100D7B7E4);
  v62 = v0 + 120;
  if (qword_1010EA5F0 != -1)
    swift_once(&qword_1010EA5F0, sub_100D79F3C);
  v1 = *(_QWORD *)(v0 + 168);
  v2 = *(_QWORD *)(v0 + 176);
  v4 = *(_QWORD *)(v0 + 144);
  v3 = *(_QWORD *)(v0 + 152);
  v5 = type metadata accessor for Logger(0);
  sub_10001A9E8(v5, (uint64_t)qword_1011B84B0);
  v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v7 = v6(v1, v2, v4);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter(v8);
  v10 = os_log_type_enabled(v8, v9);
  v11 = *(_QWORD *)(v0 + 168);
  v13 = *(_QWORD *)(v0 + 144);
  v12 = *(_QWORD *)(v0 + 152);
  if (v10)
  {
    v59 = v6;
    v14 = (uint8_t *)swift_slowAlloc(12, -1);
    v58 = swift_slowAlloc(32, -1);
    v63[0] = v58;
    *(_DWORD *)v14 = 136315138;
    v15 = sub_100006204((unint64_t *)&qword_1010FBA30, (uint64_t (*)(uint64_t))&type metadata accessor for FMNServerInteractionController.FMNResponseFields, (uint64_t)&protocol conformance descriptor for FMNServerInteractionController.FMNResponseFields);
    v16 = dispatch thunk of CustomStringConvertible.description.getter(v13, v15);
    *(_QWORD *)(v0 + 120) = sub_100016940(v16, v17, v63);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v62, v0 + 128, v14 + 4, v14 + 12);
    swift_bridgeObjectRelease();
    v18 = v13;
    v19 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
    v19(v11, v18);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Response value is %s", v14, 0xCu);
    swift_arrayDestroy(v58, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v58, -1, -1);
    v20 = v14;
    v6 = v59;
    swift_slowDealloc(v20, -1, -1);
  }
  else
  {
    v19 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
    v19(*(_QWORD *)(v0 + 168), *(_QWORD *)(v0 + 144));
  }

  v21 = v6(*(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 176), *(_QWORD *)(v0 + 144));
  v22 = Logger.logObject.getter(v21);
  v23 = static os_log_type_t.info.getter(v22);
  if (os_log_type_enabled(v22, v23))
  {
    v24 = swift_slowAlloc(22, -1);
    v25 = swift_slowAlloc(64, -1);
    v63[0] = v25;
    *(_DWORD *)v24 = 136446466;
    *(_QWORD *)(v0 + 104) = sub_100016940(0xD000000000000014, 0x8000000100EEF3C0, v63);
    v26 = UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 104, v0 + 112, v24 + 4, v24 + 12);
    *(_WORD *)(v24 + 12) = 2082;
    v27 = FMNServerInteractionController.FMNResponseFields.responseHeaders.getter(v26);
    v60 = v25;
    v61 = v19;
    if (*(_QWORD *)(v27 + 16) && (v28 = sub_100518DA0(0xD000000000000014, 0x8000000100EE0BF0), (v29 & 1) != 0))
    {
      v30 = v0 + 112;
      v31 = (uint64_t *)(*(_QWORD *)(v27 + 56) + 16 * v28);
      v33 = *v31;
      v32 = v31[1];
      swift_bridgeObjectRetain(v32);
    }
    else
    {
      v30 = v0 + 112;
      v33 = 0;
      v32 = 0;
    }
    v34 = *(_QWORD *)(v0 + 160);
    v35 = *(_QWORD *)(v0 + 144);
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 88) = v33;
    *(_QWORD *)(v0 + 96) = v32;
    v36 = sub_10001A9A8(&qword_1010F6350);
    v37 = String.init<A>(describing:)(v0 + 88, v36);
    *(_QWORD *)(v0 + 112) = sub_100016940(v37, v38, v63);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v30, v62, v24 + 14, v24 + 22);
    swift_bridgeObjectRelease();
    v19 = v61;
    v61(v34, v35);
    swift_arrayDestroy(v60, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v60, -1, -1);
    swift_slowDealloc(v24, -1, -1);
  }
  else
  {
    v19(*(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 144));
  }

  v39 = *(_QWORD *)(v0 + 200);
  v40 = sub_100D7CA5C(*(_QWORD *)(v0 + 176));
  if (v39)
  {
    v41 = *(_QWORD *)(v0 + 176);
    v42 = *(_QWORD *)(v0 + 144);
    swift_release();
    v19(v41, v42);
    v48 = *(_QWORD *)(v0 + 168);
    v49 = *(_QWORD *)(v0 + 160);
    swift_task_dealloc(*(_QWORD *)(v0 + 176));
    swift_task_dealloc(v48);
    swift_task_dealloc(v49);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v43 = FMNServerInteractionController.FMNResponseFields.data.getter(v40);
    v45 = v44;
    v46 = sub_100B2EE60();
    dispatch thunk of JSONDecoder.decode<A>(_:from:)(&type metadata for KeyDropFetchResponse, v43, v45, &type metadata for KeyDropFetchResponse, v46);
    v47 = *(_QWORD *)(v0 + 176);
    v52 = *(_QWORD *)(v0 + 160);
    v51 = *(_QWORD *)(v0 + 168);
    v53 = *(_QWORD *)(v0 + 144);
    swift_release();
    sub_10001BC14(v43, v45);
    v19(v47, v53);
    v54 = *(_QWORD *)(v0 + 56);
    v55 = *(_QWORD *)(v0 + 64);
    v56 = *(_QWORD *)(v0 + 72);
    v57 = *(_QWORD *)(v0 + 80);
    swift_task_dealloc(v47);
    swift_task_dealloc(v51);
    swift_task_dealloc(v52);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v0 + 8))(v54, v55, v56, v57);
  }
}

uint64_t sub_100B2ECB0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
  v1 = *(_QWORD *)(v0 + 168);
  v2 = *(_QWORD *)(v0 + 160);
  swift_task_dealloc(*(_QWORD *)(v0 + 176));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100B2ED14(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 208);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 136);
  *(_QWORD *)(*(_QWORD *)v1 + 216) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100B2ED74, v3, 0);
}

uint64_t sub_100B2ED74()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;

  v0[23] = v0[27];
  v1 = (_QWORD *)v0[16];
  v2 = v1[3];
  v3 = v1[4];
  v4 = sub_10001AA44(v1, v2);
  v0[5] = v2;
  v0[6] = *(_QWORD *)(v3 + 8);
  v5 = sub_100018F08(v0 + 2);
  (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(v5, v4, v2);
  v6 = (_QWORD *)swift_task_alloc(dword_1010F7D04);
  v0[24] = v6;
  *v6 = v0;
  v6[1] = sub_100B2E6EC;
  return sub_100338A60(v0[22], (uint64_t)(v0 + 2));
}

unint64_t sub_100B2EE1C()
{
  unint64_t result;

  result = qword_1011156A0;
  if (!qword_1011156A0)
  {
    result = swift_getWitnessTable(byte_100E603E8, &type metadata for KeyDropFetchRequest);
    atomic_store(result, (unint64_t *)&qword_1011156A0);
  }
  return result;
}

unint64_t sub_100B2EE60()
{
  unint64_t result;

  result = qword_1011156B0;
  if (!qword_1011156B0)
  {
    result = swift_getWitnessTable(byte_100E6BCBC, &type metadata for KeyDropFetchResponse);
    atomic_store(result, (unint64_t *)&qword_1011156B0);
  }
  return result;
}

unint64_t sub_100B2EEA4()
{
  unint64_t result;

  result = qword_1011156C0;
  if (!qword_1011156C0)
  {
    result = swift_getWitnessTable("َ#", &type metadata for KeyDropDeleteResponse);
    atomic_store(result, (unint64_t *)&qword_1011156C0);
  }
  return result;
}

uint64_t sub_100B2EEE8(uint64_t a1, char a2, id a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int last_index;
  uint64_t v13;
  uint64_t v14;

  v7 = sp_key_subsequence_create_from_file_descriptor(objc_msgSend(a3, "fileDescriptor"));
  if (v7)
  {
    v8 = v7;
    v9 = v3 + OBJC_IVAR____TtC12searchpartyd20BeaconKeySubsequence_beaconIdentifier;
    v10 = type metadata accessor for UUID(0);
    v11 = *(_QWORD *)(v10 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(v9, a1, v10);
    *(_BYTE *)(v3 + OBJC_IVAR____TtC12searchpartyd20BeaconKeySubsequence_sequence) = a2;
    *(_QWORD *)(v3 + OBJC_IVAR____TtC12searchpartyd20BeaconKeySubsequence_subsequenceHandle) = v8;
    *(_DWORD *)(v3 + OBJC_IVAR____TtC12searchpartyd20BeaconKeySubsequence_firstIndex) = sp_key_subsequence_map_get_first_index(v8);
    last_index = sp_key_subsequence_map_get_last_index(v8);

    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(a1, v10);
    *(_DWORD *)(v3 + OBJC_IVAR____TtC12searchpartyd20BeaconKeySubsequence_lastIndex) = last_index;
  }
  else
  {

    v13 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(a1, v13);
    v14 = type metadata accessor for BeaconKeySubsequence(0);
    swift_deallocPartialClassInstance(v3, v14, *(unsigned int *)(*(_QWORD *)v3 + 48), *(unsigned __int16 *)(*(_QWORD *)v3 + 52));
    return 0;
  }
  return v3;
}

uint64_t sub_100B2F014()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sp_key_subsequence_destroy(*(_QWORD *)(v0 + OBJC_IVAR____TtC12searchpartyd20BeaconKeySubsequence_subsequenceHandle));
  v1 = v0 + OBJC_IVAR____TtC12searchpartyd20BeaconKeySubsequence_beaconIdentifier;
  v2 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_100B2F074()
{
  return type metadata accessor for BeaconKeySubsequence(0);
}

uint64_t type metadata accessor for BeaconKeySubsequence(uint64_t a1)
{
  uint64_t result;

  result = qword_101115708;
  if (!qword_101115708)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for BeaconKeySubsequence);
  return result;
}

uint64_t sub_100B2F0B8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[5];

  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_100E60918;
    v4[2] = (char *)&value witness table for Builtin.Int32 + 64;
    v4[3] = (char *)&value witness table for Builtin.Int32 + 64;
    v4[4] = (char *)&value witness table for Builtin.RawPointer + 64;
    result = swift_updateClassMetadata2(a1, 256, 5, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_100B2F14C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t result;
  id v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  char v23;
  uint64_t v24;
  unint64_t v25;
  id v26;
  void *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  int v39;
  id v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  id v59;
  void *v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  int v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t record_for_index;

  v9 = type metadata accessor for CryptoError(0);
  v10 = __chkstk_darwin(v9);
  __chkstk_darwin(v10);
  if (*(_DWORD *)(a2 + OBJC_IVAR____TtC12searchpartyd20BeaconKeySubsequence_firstIndex) > a1
    || *(_DWORD *)(a2 + OBJC_IVAR____TtC12searchpartyd20BeaconKeySubsequence_lastIndex) < a1)
  {
    v11 = sub_1004D4940();
    v12 = swift_allocError(&type metadata for BeaconKeyManager.Error, v11, 0, 0);
    *v13 = 4;
    return swift_willThrow(v12);
  }
  v68 = a4;
  v69 = a3;
  record_for_index = sp_key_subsequence_get_record_for_index(*(_QWORD *)(a2 + OBJC_IVAR____TtC12searchpartyd20BeaconKeySubsequence_subsequenceHandle), a1);
  v15 = (id)sp_key_record_copy_intermediate_key();
  if (!v15)
  {
    __break(1u);
    goto LABEL_30;
  }
  v16 = v15;
  v17 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v15);
  v19 = v18;

  sub_1002F702C(v17, v19);
  if (!v4)
  {
    v21 = type metadata accessor for __DataStorage(0);
    swift_allocObject(v21, *(unsigned int *)(v21 + 48), *(unsigned __int16 *)(v21 + 52));
    __DataStorage.init(length:)(32);
    sub_10001BBBC(v70, v71);
    _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v70, v71);
    v23 = v22;
    sub_10001BC14(v70, v71);
    swift_release();
    if ((v23 & 1) != 0)
    {
      v24 = 0;
      v25 = 0xF000000000000000;
    }
    else
    {
      sub_10001BBBC(v70, v71);
      v24 = v70;
      v25 = v71;
    }
    v66 = v24;
    v67 = v25;
    sub_10005CB9C(v24, v25);
    v26 = (id)sp_key_record_copy_public_key(record_for_index);
    if (v26)
    {
      v27 = v26;
      v28 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v26);
      v30 = v29;

      v36 = sub_1002FB6C8(v28, v30);
      v38 = v37;
      sub_10001BC14(v70, v71);
      if (!record_for_index)
        goto LABEL_20;
      v39 = *(unsigned __int8 *)(record_for_index + 32);
      if (v39 != 1)
      {
        if (v39 == 2)
        {
          if (v69)
          {
            sub_10001BBBC(v36, v38);
            swift_retain();
            v40 = (id)sp_key_record_copy_private_encrypted_key(record_for_index);
            if (v40)
            {
              v41 = v40;
              static Data._unconditionallyBridgeFromObjectiveC(_:)(v40);
              v43 = v42;

              __asm { BR              X10 }
            }
LABEL_32:
            __break(1u);
            JUMPOUT(0x100B2FADCLL);
          }
          goto LABEL_24;
        }
LABEL_20:
        if (v69)
        {
          v44 = sub_10001BBBC(v36, v38);
          v45 = static os_log_type_t.default.getter(v44);
          v46 = v38;
          v47 = v36;
          if (qword_1010E9DF8 != -1)
            swift_once(&qword_1010E9DF8, sub_100654FE4);
          v48 = qword_1011B73B8;
          v49 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
          v50 = swift_allocObject(v49, 112, 7);
          *(_OWORD *)(v50 + 16) = xmmword_100E22B10;
          *(_QWORD *)(v50 + 56) = &type metadata for UInt32;
          *(_QWORD *)(v50 + 64) = &protocol witness table for UInt32;
          *(_DWORD *)(v50 + 32) = a1;
          v70 = v69;
          swift_retain();
          v51 = sub_10001A9A8(&qword_1011157C0);
          v52 = String.init<A>(describing:)(&v70, v51);
          v54 = v53;
          *(_QWORD *)(v50 + 96) = &type metadata for String;
          *(_QWORD *)(v50 + 104) = sub_10001AA00();
          *(_QWORD *)(v50 + 72) = v52;
          *(_QWORD *)(v50 + 80) = v54;
          os_log(_:dso:log:_:_:)(v45, &_mh_execute_header, v48, "Skipped private encrypted key for index %u. Cryptor: %{public}@", 63, 2, v50);
          swift_bridgeObjectRelease();
          sub_10001BC14(v47, v46);
          v56 = v66;
          v55 = v67;
          result = sub_1000FC25C(v66, v67);
          goto LABEL_25;
        }
LABEL_24:
        v46 = v38;
        v56 = v66;
        v55 = v67;
        result = sub_1000FC25C(v66, v67);
        v47 = v36;
LABEL_25:
        v57 = 0;
        v58 = 0xF000000000000000;
LABEL_26:
        *v68 = v56;
        v68[1] = v55;
        v68[2] = v47;
        v68[3] = v46;
        v68[4] = v57;
        v68[5] = v58;
        return result;
      }
      v47 = v36;
      sub_10001BBBC(v36, v38);
      v59 = (id)sp_key_record_copy_private_key(record_for_index);
      if (v59)
      {
        v60 = v59;
        v61 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v59);
        v63 = v62;

        v57 = sub_1002FB3AC(v61, v63);
        v58 = v64;
        sub_10001BC14(v47, v38);
        v46 = v38;
        v56 = v66;
        v55 = v67;
        result = sub_1000FC25C(v66, v67);
        goto LABEL_26;
      }
LABEL_31:
      __break(1u);
      goto LABEL_32;
    }
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  v31 = static os_log_type_t.error.getter(v20);
  if (qword_1010E9DF8 != -1)
    swift_once(&qword_1010E9DF8, sub_100654FE4);
  v32 = qword_1011B73B8;
  v33 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v34 = swift_allocObject(v33, 72, 7);
  *(_OWORD *)(v34 + 16) = xmmword_100E22B00;
  *(_QWORD *)(v34 + 56) = &type metadata for UInt32;
  *(_QWORD *)(v34 + 64) = &protocol witness table for UInt32;
  *(_DWORD *)(v34 + 32) = a1;
  os_log(_:dso:log:_:_:)(v31, &_mh_execute_header, v32, "Failed to read intermediate and public keys for index %u", v65);
  v35 = swift_bridgeObjectRelease();
  return swift_willThrow(v35);
}

uint64_t sub_100B2FAF0()
{
  uint64_t v0;
  uint64_t v1;
  Swift::String v2;
  Swift::String v3;
  void *object;
  Swift::String v5;
  Swift::String v6;
  void *v7;
  Swift::String v8;
  void *v9;
  Swift::String v10;
  Swift::String v11;
  _BYTE v13[12];

  v1 = 0xD000000000000010;
  *(_DWORD *)&v13[8] = 0;
  _StringGuts.grow(_:)(55);
  v2._countAndFlagsBits = 0xD00000000000001DLL;
  v2._object = (void *)0x8000000100EEF550;
  String.append(_:)(v2);
  v3._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt32, &protocol witness table for UInt32);
  object = v3._object;
  String.append(_:)(v3);
  swift_bridgeObjectRelease(object);
  v5._countAndFlagsBits = 0x203A646E65202CLL;
  v5._object = (void *)0xE700000000000000;
  String.append(_:)(v5);
  *(_QWORD *)v13 = *(unsigned int *)(v0 + OBJC_IVAR____TtC12searchpartyd20BeaconKeySubsequence_lastIndex);
  v6._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt32, &protocol witness table for UInt32);
  v7 = v6._object;
  String.append(_:)(v6);
  swift_bridgeObjectRelease(v7);
  v8._countAndFlagsBits = 0x6E6575716573202CLL;
  v8._object = (void *)0xEC000000203A6563;
  String.append(_:)(v8);
  if (*(_BYTE *)(v0 + OBJC_IVAR____TtC12searchpartyd20BeaconKeySubsequence_sequence))
  {
    if (*(_BYTE *)(v0 + OBJC_IVAR____TtC12searchpartyd20BeaconKeySubsequence_sequence) == 1)
    {
      v9 = (void *)0xEA00000000007972;
      v1 = 0x61646E6F6365732ELL;
    }
    else
    {
      v9 = (void *)0x8000000100EC6940;
    }
  }
  else
  {
    v9 = (void *)0xE800000000000000;
    v1 = 0x7972616D6972702ELL;
  }
  v10._countAndFlagsBits = v1;
  v10._object = v9;
  String.append(_:)(v10);
  swift_bridgeObjectRelease(v9);
  v11._countAndFlagsBits = 93;
  v11._object = (void *)0xE100000000000000;
  String.append(_:)(v11);
  return *(_QWORD *)&v13[4];
}

uint64_t sub_100B2FCA8()
{
  return sub_100B2FAF0();
}

unint64_t sub_100B2FCC8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_101111450;
  if (!qword_101111450)
  {
    v1 = type metadata accessor for CryptoError(255);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for CryptoError, v1);
    atomic_store(result, (unint64_t *)&qword_101111450);
  }
  return result;
}

uint64_t sub_100B2FD10(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  char v26;
  char v27[2];
  _BYTE v28[2];
  char v29;
  char v30;
  char v31;

  v3 = v1;
  v5 = sub_10001A9A8(&qword_101115838);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  v11 = sub_100B318E0();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for AccessoryInfoRequestInfo.FirmwareData.CodingKeys, &type metadata for AccessoryInfoRequestInfo.FirmwareData.CodingKeys, v11, v9, v10);
  v12 = *v3;
  v13 = v3[1];
  v31 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v12, v13, &v31, v5);
  if (!v2)
  {
    v14 = v3[2];
    v15 = *((unsigned __int8 *)v3 + 24);
    v30 = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v14, v15, &v30, v5);
    v16 = *((unsigned int *)v3 + 7);
    v17 = *((_BYTE *)v3 + 32);
    v29 = 2;
    v28[1] = v17;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v16 | ((unint64_t)v17 << 32), &v29, v5);
    v18 = *((unsigned __int8 *)v3 + 33);
    v19 = *((unsigned __int8 *)v3 + 34);
    v28[0] = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v18 | (v19 << 8), v28, v5);
    v20 = v3[5];
    v21 = v3[6];
    v27[0] = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v20, v21, v27, v5);
    v22 = v3[7];
    v23 = v3[8];
    v26 = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v22, v23, &v26, v5);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100B2FEE0()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100B2FF1C + 4 * byte_100E60960[*v0]))(0x657261776D726966, 0xEF6E6F6973726556);
}

uint64_t sub_100B2FF1C()
{
  return 0x79726F6765746163;
}

uint64_t sub_100B2FF34()
{
  return 0x696C696261706163;
}

uint64_t sub_100B2FF54()
{
  return 0x5479726574746162;
}

unint64_t sub_100B2FF74()
{
  return 0xD000000000000010;
}

uint64_t sub_100B2FF90()
{
  return 0x6D614E6C65646F6DLL;
}

uint64_t sub_100B2FFAC@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100B31380(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100B2FFD0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100B318E0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100B2FFF8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100B318E0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100B30020(_QWORD *a1)
{
  return sub_100B2FD10(a1);
}

uint64_t sub_100B30034(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  char v24;
  _OWORD v25[4];
  uint64_t v26;

  v3 = v1;
  v5 = sub_10001A9A8(&qword_1011157F0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  v11 = sub_100B30DF4();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for AccessoryInfoRequestInfo.CodingKeys, &type metadata for AccessoryInfoRequestInfo.CodingKeys, v11, v9, v10);
  v12 = *v3;
  v13 = v3[1];
  LOBYTE(v25[0]) = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v12, v13, v25, v5);
  if (!v2)
  {
    v14 = v3[2];
    v15 = v3[3];
    LOBYTE(v25[0]) = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v14, v15, v25, v5);
    v16 = *((_OWORD *)v3 + 5);
    v25[2] = *((_OWORD *)v3 + 4);
    v25[3] = v16;
    v26 = v3[12];
    v17 = *((_OWORD *)v3 + 3);
    v25[0] = *((_OWORD *)v3 + 2);
    v25[1] = v17;
    v24 = 2;
    v18 = sub_100B30E38();
    KeyedEncodingContainer.encode<A>(_:forKey:)(v25, &v24, v5, &type metadata for AccessoryInfoRequestInfo.FirmwareData, v18);
    v19 = v3[13];
    LOBYTE(v25[0]) = 3;
    KeyedEncodingContainer.encode(_:forKey:)(v19, v25, v5);
    v20 = v3[14];
    v21 = v3[15];
    LOBYTE(v25[0]) = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v20, v21, v25, v5);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100B301E8(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v4 = sub_10001A9A8(&qword_1011157C8);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a1[3];
  v9 = a1[4];
  sub_10001AA44(a1, v8);
  v10 = sub_100B30D08();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for AccessoryInfoRequestContent.CodingKeys, &type metadata for AccessoryInfoRequestContent.CodingKeys, v10, v8, v9);
  v16 = a2;
  v11 = sub_10001A9A8(&qword_1011157D8);
  v12 = sub_100B30D4C();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v16, v13, v4, v11, v12);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_100B302EC()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100B30328 + 4 * byte_100E60966[*v0]))(0x7250796D646E6966, 0xEF6449746375646FLL);
}

uint64_t sub_100B30328()
{
  return 0x56746E6572727563;
}

uint64_t sub_100B3034C()
{
  return 0x657261776D726966;
}

uint64_t sub_100B3036C()
{
  return 0x747865746E6F63;
}

uint64_t sub_100B30384()
{
  return 0x496B726F7774656ELL;
}

uint64_t sub_100B303A0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100B31658(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100B303C4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100B30DF4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100B303EC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100B30DF4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100B30414(_QWORD *a1)
{
  return sub_100B30034(a1);
}

uint64_t sub_100B30428(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100B30D08();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100B30450(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100B30D08();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100B30478(_QWORD *a1)
{
  uint64_t *v1;

  return sub_100B301E8(a1, *v1);
}

uint64_t sub_100B30490@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  Swift::String v12;
  Swift::String v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  BOOL v19;
  char v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t result;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v4 = (int *)type metadata accessor for AccessoryMetadata(0);
  v5 = a1 + v4[10];
  if ((*(_BYTE *)(v5 + 16) & 1) != 0)
  {
    v6 = sub_10072CDE0();
    v29 = v7;
    v30 = v6;
  }
  else
  {
    v9 = *(_QWORD *)v5;
    v8 = *(_QWORD *)(v5 + 8);
    v10 = sub_100134DCC();
    v31 = CustomStringConvertible.typeDescription.getter(&type metadata for LocalFindableAccessoryFirmwareVersionNumber, v10);
    v32 = v11;
    v12._countAndFlagsBits = 32;
    v12._object = (void *)0xE100000000000000;
    String.append(_:)(v12);
    v13._countAndFlagsBits = sub_1008C3554(v9, v8);
    String.append(_:)(v13);
    swift_bridgeObjectRelease();
    v29 = v32;
    v30 = v31;
  }
  v14 = a1 + v4[11];
  v15 = *(_QWORD *)v14;
  v28 = *(_BYTE *)(v14 + 8);
  v16 = a1 + v4[12];
  if ((*(_BYTE *)(v16 + 4) & 1) != 0)
    v17 = 0;
  else
    v17 = sub_100C6CFB0(*(_DWORD *)v16);
  v18 = *(unsigned __int8 *)(a1 + v4[13]);
  v19 = v18 == 4;
  if (v18 == 4)
    v20 = 0;
  else
    v20 = *(_BYTE *)(a1 + v4[13]);
  v21 = v4[7];
  v22 = (uint64_t *)(a1 + v4[6]);
  v24 = *v22;
  v23 = v22[1];
  v26 = *(_QWORD *)(a1 + v21);
  v25 = *(_QWORD *)(a1 + v21 + 8);
  swift_bridgeObjectRetain(v25);
  swift_bridgeObjectRetain(v23);
  result = sub_100AEE45C(a1);
  *(_QWORD *)a2 = v30;
  *(_QWORD *)(a2 + 8) = v29;
  *(_QWORD *)(a2 + 16) = v15;
  *(_BYTE *)(a2 + 24) = v28;
  *(_DWORD *)(a2 + 28) = v17;
  *(_BYTE *)(a2 + 32) = 0;
  *(_BYTE *)(a2 + 33) = v20;
  *(_BYTE *)(a2 + 34) = v19;
  *(_QWORD *)(a2 + 40) = v24;
  *(_QWORD *)(a2 + 48) = v23;
  *(_QWORD *)(a2 + 56) = v26;
  *(_QWORD *)(a2 + 64) = v25;
  return result;
}

uint64_t sub_100B30618@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  _BYTE *v13;
  void *v14;
  id v15;
  unsigned int v16;
  NSString v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t result;
  char v45;
  char v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  _BYTE v50[12];
  int v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  int v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  __int128 v65;
  uint64_t v66;
  unsigned __int8 v67;
  int v68;
  unsigned __int8 v69;
  unsigned __int8 v70;
  unsigned __int8 v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;

  v8 = type metadata accessor for AccessoryMetadata(0);
  v9 = __chkstk_darwin(v8);
  v11 = &v50[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v9);
  v13 = &v50[-v12];
  if (qword_1010EA198 != -1)
    swift_once(&qword_1010EA198, sub_100ACDE4C);
  v14 = (void *)qword_1011B7C08;
  v15 = objc_msgSend((id)objc_opt_self(FMSystemInfo), "sharedInstance");
  v16 = objc_msgSend(v15, "isInternalBuild");

  v62 = a2;
  if (v16
    && (v17 = String._bridgeToObjectiveC()(),
        v18 = objc_msgSend(v14, "stringForKey:", v17),
        v17,
        v18))
  {
    v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
    v21 = v20;

    sub_100AEE418(a1, (uint64_t)v13);
    if (v21)
    {
      v52 = v21;
      v53 = v19;
      goto LABEL_9;
    }
  }
  else
  {
    sub_100AEE418(a1, (uint64_t)v13);
  }
  v65 = *(_OWORD *)&v13[*(int *)(v8 + 20)];
  v22 = sub_100133250();
  v53 = RawRepresentable<>.hexString.getter(&type metadata for AccessoryProductData, v22);
  v52 = v23;
LABEL_9:
  sub_100AEE45C((uint64_t)v13);
  v24 = (uint64_t *)(a1 + *(int *)(v8 + 60));
  v26 = *v24;
  v25 = v24[1];
  v63 = a1;
  sub_100AEE418(a1, (uint64_t)v11);
  swift_bridgeObjectRetain(v25);
  sub_100B30490((uint64_t)v11, (uint64_t)&v65);
  v27 = *((_QWORD *)&v65 + 1);
  v28 = v65;
  v29 = v66;
  v30 = v68;
  v55 = v69;
  v56 = v67;
  v61 = v70;
  v54 = v71;
  v59 = v73;
  v60 = v72;
  v57 = v74;
  v58 = v75;
  if (a3 == 3)
  {
    v31 = 0;
    v32 = 0;
  }
  else
  {
    v64 = a3;
    v33 = sub_100059570();
    v34 = FixedWidthInteger.data.getter(&type metadata for UInt8, v33);
    v51 = v30;
    v35 = v29;
    v36 = v27;
    v37 = v28;
    v38 = v26;
    v40 = v39;
    v31 = Data.hexString.getter(v34, v39);
    v32 = v41;
    v42 = v40;
    v26 = v38;
    v28 = v37;
    v27 = v36;
    v29 = v35;
    v30 = v51;
    sub_10001BC14(v34, v42);
  }
  v43 = v62;
  result = sub_100AEE45C(v63);
  v45 = v56 & 1;
  v46 = v55 & 1;
  v47 = v54 & 1;
  *(_QWORD *)a4 = v53;
  *(_QWORD *)(a4 + 8) = v52;
  *(_QWORD *)(a4 + 16) = v26;
  *(_QWORD *)(a4 + 24) = v25;
  *(_QWORD *)(a4 + 32) = v28;
  *(_QWORD *)(a4 + 40) = v27;
  *(_QWORD *)(a4 + 48) = v29;
  *(_BYTE *)(a4 + 56) = v45;
  *(_DWORD *)(a4 + 60) = v30;
  *(_BYTE *)(a4 + 64) = v46;
  *(_BYTE *)(a4 + 65) = v61;
  *(_BYTE *)(a4 + 66) = v47;
  v48 = v59;
  *(_QWORD *)(a4 + 72) = v60;
  *(_QWORD *)(a4 + 80) = v48;
  v49 = v58;
  *(_QWORD *)(a4 + 88) = v57;
  *(_QWORD *)(a4 + 96) = v49;
  *(_QWORD *)(a4 + 104) = v43;
  *(_QWORD *)(a4 + 112) = v31;
  *(_QWORD *)(a4 + 120) = v32;
  return result;
}

uint64_t destroy for AccessoryInfoRequestInfo(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[5]);
  swift_bridgeObjectRelease(a1[10]);
  swift_bridgeObjectRelease(a1[12]);
  return swift_bridgeObjectRelease(a1[15]);
}

uint64_t initializeWithCopy for AccessoryInfoRequestInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v6 = *(_DWORD *)(a2 + 60);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_DWORD *)(a1 + 60) = v6;
  *(_WORD *)(a1 + 65) = *(_WORD *)(a2 + 65);
  v7 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v7;
  v8 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v8;
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  v9 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 120) = v9;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  return a1;
}

uint64_t assignWithCopy for AccessoryInfoRequestInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  v10 = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = v10;
  LODWORD(v10) = *(_DWORD *)(a2 + 60);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_DWORD *)(a1 + 60) = v10;
  *(_WORD *)(a1 + 65) = *(_WORD *)(a2 + 65);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  v11 = *(_QWORD *)(a2 + 80);
  v12 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = v11;
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRelease(v12);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  v13 = *(_QWORD *)(a2 + 96);
  v14 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 96) = v13;
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRelease(v14);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  v15 = *(_QWORD *)(a2 + 120);
  v16 = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 120) = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease(v16);
  return a1;
}

uint64_t assignWithTake for AccessoryInfoRequestInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v8;
  swift_bridgeObjectRelease(v9);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_WORD *)(a1 + 65) = *(_WORD *)(a2 + 65);
  v10 = *(_QWORD *)(a2 + 80);
  v11 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v10;
  swift_bridgeObjectRelease(v11);
  v12 = *(_QWORD *)(a2 + 96);
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v12;
  swift_bridgeObjectRelease(v13);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  v14 = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  swift_bridgeObjectRelease(v14);
  return a1;
}

uint64_t getEnumTagSinglePayload for AccessoryInfoRequestInfo(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 128))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AccessoryInfoRequestInfo(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 120) = 0;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 128) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 128) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessoryInfoRequestInfo()
{
  return &type metadata for AccessoryInfoRequestInfo;
}

ValueMetadata *type metadata accessor for AccessoryInfoRequestContent()
{
  return &type metadata for AccessoryInfoRequestContent;
}

unint64_t sub_100B30D08()
{
  unint64_t result;

  result = qword_1011157D0;
  if (!qword_1011157D0)
  {
    result = swift_getWitnessTable(byte_100E60C1C, &type metadata for AccessoryInfoRequestContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1011157D0);
  }
  return result;
}

unint64_t sub_100B30D4C()
{
  unint64_t result;
  uint64_t v1;
  unint64_t v2;

  result = qword_1011157E0;
  if (!qword_1011157E0)
  {
    v1 = sub_10001F784(&qword_1011157D8);
    v2 = sub_100B30DB0();
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <A> [A], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_1011157E0);
  }
  return result;
}

unint64_t sub_100B30DB0()
{
  unint64_t result;

  result = qword_1011157E8;
  if (!qword_1011157E8)
  {
    result = swift_getWitnessTable(byte_100E609CC, &type metadata for AccessoryInfoRequestInfo);
    atomic_store(result, (unint64_t *)&qword_1011157E8);
  }
  return result;
}

unint64_t sub_100B30DF4()
{
  unint64_t result;

  result = qword_1011157F8;
  if (!qword_1011157F8)
  {
    result = swift_getWitnessTable(byte_100E60BCC, &type metadata for AccessoryInfoRequestInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1011157F8);
  }
  return result;
}

unint64_t sub_100B30E38()
{
  unint64_t result;

  result = qword_101115800;
  if (!qword_101115800)
  {
    result = swift_getWitnessTable(byte_100E60BA4, &type metadata for AccessoryInfoRequestInfo.FirmwareData);
    atomic_store(result, (unint64_t *)&qword_101115800);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for AccessoryInfoRequestInfo.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_100B30EC8 + 4 * byte_100E60970[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_100B30EFC + 4 * byte_100E6096B[v4]))();
}

uint64_t sub_100B30EFC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100B30F04(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100B30F0CLL);
  return result;
}

uint64_t sub_100B30F18(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100B30F20);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_100B30F24(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100B30F2C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AccessoryInfoRequestInfo.CodingKeys()
{
  return &type metadata for AccessoryInfoRequestInfo.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for AccessoryInfoRequestContent.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_100B30F88 + 4 * byte_100E60975[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_100B30FA8 + 4 * byte_100E6097A[v4]))();
}

_BYTE *sub_100B30F88(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_100B30FA8(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100B30FB0(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100B30FB8(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100B30FC0(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100B30FC8(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for AccessoryInfoRequestContent.CodingKeys()
{
  return &type metadata for AccessoryInfoRequestContent.CodingKeys;
}

uint64_t destroy for AccessoryInfoRequestInfo.FirmwareData(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[6]);
  return swift_bridgeObjectRelease(a1[8]);
}

uint64_t initializeWithCopy for AccessoryInfoRequestInfo.FirmwareData(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_WORD *)(a1 + 33) = *(_WORD *)(a2 + 33);
  v4 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v4;
  v5 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v5;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  return a1;
}

uint64_t assignWithCopy for AccessoryInfoRequestInfo.FirmwareData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v6;
  LODWORD(v6) = *(_DWORD *)(a2 + 28);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_DWORD *)(a1 + 28) = v6;
  *(_WORD *)(a1 + 33) = *(_WORD *)(a2 + 33);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v7 = *(_QWORD *)(a2 + 48);
  v8 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease(v8);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  v9 = *(_QWORD *)(a2 + 64);
  v10 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease(v10);
  return a1;
}

uint64_t assignWithTake for AccessoryInfoRequestInfo.FirmwareData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_WORD *)(a1 + 33) = *(_WORD *)(a2 + 33);
  v6 = *(_QWORD *)(a2 + 48);
  v7 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 64);
  v9 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v8;
  swift_bridgeObjectRelease(v9);
  return a1;
}

ValueMetadata *type metadata accessor for AccessoryInfoRequestInfo.FirmwareData()
{
  return &type metadata for AccessoryInfoRequestInfo.FirmwareData;
}

unint64_t sub_100B311D4()
{
  unint64_t result;

  result = qword_101115808;
  if (!qword_101115808)
  {
    result = swift_getWitnessTable(byte_100E60AC4, &type metadata for AccessoryInfoRequestContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101115808);
  }
  return result;
}

unint64_t sub_100B3121C()
{
  unint64_t result;

  result = qword_101115810;
  if (!qword_101115810)
  {
    result = swift_getWitnessTable(asc_100E60B7C, &type metadata for AccessoryInfoRequestInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101115810);
  }
  return result;
}

unint64_t sub_100B31264()
{
  unint64_t result;

  result = qword_101115818;
  if (!qword_101115818)
  {
    result = swift_getWitnessTable(aU_38, &type metadata for AccessoryInfoRequestInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101115818);
  }
  return result;
}

unint64_t sub_100B312AC()
{
  unint64_t result;

  result = qword_101115820;
  if (!qword_101115820)
  {
    result = swift_getWitnessTable(asc_100E60B14, &type metadata for AccessoryInfoRequestInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101115820);
  }
  return result;
}

unint64_t sub_100B312F4()
{
  unint64_t result;

  result = qword_101115828;
  if (!qword_101115828)
  {
    result = swift_getWitnessTable(asc_100E60A34, &type metadata for AccessoryInfoRequestContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101115828);
  }
  return result;
}

unint64_t sub_100B3133C()
{
  unint64_t result;

  result = qword_101115830;
  if (!qword_101115830)
  {
    result = swift_getWitnessTable(byte_100E60A5C, &type metadata for AccessoryInfoRequestContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101115830);
  }
  return result;
}

uint64_t sub_100B31380(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char v11;

  if (a1 == 0x657261776D726966 && a2 == 0xEF6E6F6973726556)
  {
    v5 = 0xEF6E6F6973726556;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x657261776D726966, 0xEF6E6F6973726556, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x79726F6765746163 && a2 == 0xE800000000000000)
  {
    v7 = 0xE800000000000000;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x79726F6765746163, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x696C696261706163 && a2 == 0xEC00000073656974)
  {
    v8 = 0xEC00000073656974;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x696C696261706163, 0xEC00000073656974, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0x5479726574746162 && a2 == 0xEB00000000657079)
  {
    v9 = 0xEB00000000657079;
LABEL_26:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x5479726574746162, 0xEB00000000657079, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_26;
  }
  if (a1 == 0xD000000000000010)
  {
    v10 = 0x8000000100EC83B0;
    if (a2 == 0x8000000100EC83B0)
      goto LABEL_31;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x8000000100EC83B0, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
LABEL_31:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if (a1 == 0x6D614E6C65646F6DLL && a2 == 0xE900000000000065)
  {
    swift_bridgeObjectRelease(0xE900000000000065);
    return 5;
  }
  else
  {
    v11 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6D614E6C65646F6DLL, 0xE900000000000065, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v11 & 1) != 0)
      return 5;
    else
      return 6;
  }
}

uint64_t sub_100B31658(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char v10;

  if (a1 == 0x7250796D646E6966 && a2 == 0xEF6449746375646FLL)
  {
    v5 = 0xEF6449746375646FLL;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7250796D646E6966, 0xEF6449746375646FLL, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x56746E6572727563 && a2 == 0xEE006E6F69737265)
  {
    v7 = 0xEE006E6F69737265;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x56746E6572727563, 0xEE006E6F69737265, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x657261776D726966 && a2 == 0xEC00000061746144)
  {
    v8 = 0xEC00000061746144;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x657261776D726966, 0xEC00000061746144, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0x747865746E6F63 && a2 == 0xE700000000000000)
  {
    v9 = 0xE700000000000000;
LABEL_26:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x747865746E6F63, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_26;
  }
  if (a1 == 0x496B726F7774656ELL && a2 == 0xE900000000000064)
  {
    swift_bridgeObjectRelease(0xE900000000000064);
    return 4;
  }
  else
  {
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(0x496B726F7774656ELL, 0xE900000000000064, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v10 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

unint64_t sub_100B318E0()
{
  unint64_t result;

  result = qword_101115840;
  if (!qword_101115840)
  {
    result = swift_getWitnessTable(byte_100E60D24, &type metadata for AccessoryInfoRequestInfo.FirmwareData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101115840);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for AccessoryInfoRequestInfo.FirmwareData.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_100B31970 + 4 * byte_100E60984[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_100B319A4 + 4 * byte_100E6097F[v4]))();
}

uint64_t sub_100B319A4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100B319AC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100B319B4);
  return result;
}

uint64_t sub_100B319C0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100B319C8);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_100B319CC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100B319D4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AccessoryInfoRequestInfo.FirmwareData.CodingKeys()
{
  return &type metadata for AccessoryInfoRequestInfo.FirmwareData.CodingKeys;
}

unint64_t sub_100B319F4()
{
  unint64_t result;

  result = qword_101115848;
  if (!qword_101115848)
  {
    result = swift_getWitnessTable(byte_100E60CFC, &type metadata for AccessoryInfoRequestInfo.FirmwareData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101115848);
  }
  return result;
}

unint64_t sub_100B31A3C()
{
  unint64_t result;

  result = qword_101115850;
  if (!qword_101115850)
  {
    result = swift_getWitnessTable(byte_100E60C6C, &type metadata for AccessoryInfoRequestInfo.FirmwareData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101115850);
  }
  return result;
}

unint64_t sub_100B31A84()
{
  unint64_t result;

  result = qword_101115858;
  if (!qword_101115858)
  {
    result = swift_getWitnessTable(byte_100E60C94, &type metadata for AccessoryInfoRequestInfo.FirmwareData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101115858);
  }
  return result;
}

uint64_t sub_100B31AC8(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[2];
  char v22;

  v20 = a4;
  v8 = sub_10001A9A8(&qword_101115928);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v13 = a1[4];
  sub_10001AA44(a1, v12);
  v14 = sub_100B32E1C();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for AccessoryLostModeRequest.CodingKeys, &type metadata for AccessoryLostModeRequest.CodingKeys, v14, v12, v13);
  v21[0] = a2;
  v22 = 0;
  v15 = sub_10001A9A8(&qword_101103CB8);
  v16 = sub_10069CCD8((unint64_t *)&qword_101103CD0, (uint64_t)&protocol witness table for String, (const char *)&protocol conformance descriptor for <> [A : B]);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v21, &v22, v8, v15, v16);
  if (!v4)
  {
    v21[0] = a3;
    v21[1] = v20;
    v22 = 1;
    v17 = sub_100036A58();
    KeyedEncodingContainer.encode<A>(_:forKey:)(v21, &v22, v8, &type metadata for Data, v17);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t sub_100B31C3C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  char v30;
  char v31;
  char v32;
  char v33;
  char v34;
  char v35;

  v3 = v1;
  v5 = sub_10001A9A8(&qword_101115908);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  v11 = sub_100B32BDC();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for AccessoryLostModeRequestContent.CodingKeys, &type metadata for AccessoryLostModeRequestContent.CodingKeys, v11, v9, v10);
  v35 = 0;
  v12 = type metadata accessor for UUID(0);
  v13 = sub_100006204(&qword_1010EDAC0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v3, &v35, v5, v12, v13);
  if (!v2)
  {
    v14 = (int *)type metadata accessor for AccessoryLostModeRequestContent(0);
    v15 = (uint64_t *)(v3 + v14[5]);
    v16 = *v15;
    v17 = v15[1];
    v34 = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v16, v17, &v34, v5);
    v18 = (uint64_t *)(v3 + v14[6]);
    v19 = *v18;
    v20 = v18[1];
    v33 = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v19, v20, &v33, v5);
    v21 = (uint64_t *)(v3 + v14[7]);
    v22 = *v21;
    v23 = v21[1];
    v32 = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v22, v23, &v32, v5);
    v24 = (uint64_t *)(v3 + v14[8]);
    v25 = *v24;
    v26 = v24[1];
    v31 = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v25, v26, &v31, v5);
    v27 = *(unsigned __int8 *)(v3 + v14[9]);
    v30 = 5;
    KeyedEncodingContainer.encode(_:forKey:)(v27, &v30, v5);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100B31E50(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100B32E1C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100B31E78(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100B32E1C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100B31EA0@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  result = sub_100B32C20(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
  }
  return result;
}

uint64_t sub_100B31ECC(_QWORD *a1)
{
  uint64_t *v1;

  return sub_100B31AC8(a1, *v1, v1[1], v1[2]);
}

uint64_t sub_100B31EE8()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100B31F14 + 4 * byte_100E60D80[*v0]))(0x6449616E6D66, 0xE600000000000000);
}

uint64_t sub_100B31F14()
{
  return 0x656C746974;
}

uint64_t sub_100B31F28()
{
  return 0x6567617373656DLL;
}

uint64_t sub_100B31F40()
{
  return 0x6C69616D65;
}

uint64_t sub_100B31F54()
{
  return 0x6D754E72656E776FLL;
}

uint64_t sub_100B31F74()
{
  return 0x65646F4D74736F6CLL;
}

uint64_t sub_100B31F98@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100B331A8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100B31FBC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100B32BDC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100B31FE4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100B32BDC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100B3200C(_QWORD *a1)
{
  return sub_100B31C3C(a1);
}

void sub_100B32020(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  int *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v23;
  id v24;
  void *v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  __n128 v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;

  v70 = a7;
  v71 = a8;
  v68 = a5;
  v69 = a6;
  v66 = a3;
  v67 = a4;
  v65 = a2;
  v11 = (int *)type metadata accessor for AccessoryLostModeRequestContent(0);
  v12 = __chkstk_darwin(v11);
  v14 = (char *)&v62 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v16 = (char *)&v62 - v15;
  v17 = type metadata accessor for Date(0);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v20 = (char *)&v62 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_1006B8DC4((uint64_t)_swiftEmptyArrayStorage);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v21);
  v72 = v21;
  sub_100109D28(1702195828, 0xE400000000000000, 0xD00000000000001BLL, 0x8000000100ECA2A0, isUniquelyReferenced_nonNull_native);
  v23 = v72;
  swift_bridgeObjectRelease();
  v24 = objc_msgSend((id)objc_opt_self(AKDevice), "currentDevice");
  if (v24)
  {
    v25 = v24;
    v26 = objc_msgSend(v24, "serverFriendlyDescription", v14);

    if (v26)
    {
      v64 = a10;
      v63 = a9;
      v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
      v29 = v28;

      v30 = swift_isUniquelyReferenced_nonNull_native(v23);
      v72 = v23;
      sub_100109D28(v27, v29, 0xD000000000000011, 0x8000000100ECA2C0, v30);
      v31 = v72;
      v32 = swift_bridgeObjectRelease();
      v33 = Date.init()(v32);
      v34 = Date.epoch.getter(v33);
      (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
      v72 = v34;
      v35 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int64, &protocol witness table for Int64);
      v37 = v36;
      v38 = swift_isUniquelyReferenced_nonNull_native(v31);
      v72 = v31;
      sub_100109D28(v35, v37, 0xD000000000000015, 0x8000000100ECA2E0, v38);
      v39 = v72;
      swift_bridgeObjectRelease();
      v72 = 1;
      v40 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
      v42 = v41;
      v43 = swift_isUniquelyReferenced_nonNull_native(v39);
      v72 = v39;
      sub_100109D28(v40, v42, 0xD000000000000013, 0x8000000100ECA300, v43);
      v44 = v72;
      swift_bridgeObjectRelease();
      v45 = sub_10069BB84();
      v47 = v46;
      v48 = swift_isUniquelyReferenced_nonNull_native(v44);
      v72 = v44;
      sub_100109D28((uint64_t)v45, v47, 0x6567412D72657355, 0xEA0000000000746ELL, v48);
      swift_bridgeObjectRelease();
      v49 = type metadata accessor for UUID(0);
      v50 = *(_QWORD *)(v49 - 8);
      (*(void (**)(char *, uint64_t, uint64_t))(v50 + 16))(v16, a1, v49);
      v51 = &v16[v11[5]];
      v52 = v66;
      *(_QWORD *)v51 = v65;
      *((_QWORD *)v51 + 1) = v52;
      v53 = &v16[v11[6]];
      v54 = v68;
      *(_QWORD *)v53 = v67;
      *((_QWORD *)v53 + 1) = v54;
      v55 = &v16[v11[7]];
      v56 = v70;
      *(_QWORD *)v55 = v69;
      *((_QWORD *)v55 + 1) = v56;
      v57 = &v16[v11[8]];
      v58 = v63;
      *(_QWORD *)v57 = v71;
      *((_QWORD *)v57 + 1) = v58;
      v16[v11[9]] = v64 & 1;
      v59 = type metadata accessor for JSONEncoder(0);
      swift_allocObject(v59, *(unsigned int *)(v59 + 48), *(unsigned __int16 *)(v59 + 52));
      JSONEncoder.init()(v60);
      v61 = sub_100006204(&qword_101115860, type metadata accessor for AccessoryLostModeRequestContent, (uint64_t)&unk_100E60E5C);
      dispatch thunk of JSONEncoder.encode<A>(_:)(v16, v11, v61);
      swift_release();
      (*(void (**)(uint64_t, uint64_t))(v50 + 8))(a1, v49);
      sub_100B325D8((uint64_t)v16);
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

uint64_t type metadata accessor for AccessoryLostModeRequestContent(uint64_t a1)
{
  uint64_t result;

  result = qword_1011158C0;
  if (!qword_1011158C0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AccessoryLostModeRequestContent);
  return result;
}

uint64_t sub_100B32594(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AccessoryLostModeRequestContent(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100B325D8(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for AccessoryLostModeRequestContent(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

_QWORD *sub_100B32614(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v24 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v24 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v24);
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = a3[6];
    v10 = (_QWORD *)((char *)a1 + v8);
    v11 = (_QWORD *)((char *)a2 + v8);
    v12 = v11[1];
    *v10 = *v11;
    v10[1] = v12;
    v13 = (_QWORD *)((char *)a1 + v9);
    v14 = (_QWORD *)((char *)a2 + v9);
    v15 = v14[1];
    *v13 = *v14;
    v13[1] = v15;
    v16 = a3[7];
    v17 = a3[8];
    v18 = (_QWORD *)((char *)a1 + v16);
    v19 = (_QWORD *)((char *)a2 + v16);
    v20 = v19[1];
    *v18 = *v19;
    v18[1] = v20;
    v21 = (_QWORD *)((char *)a1 + v17);
    v22 = (_QWORD *)((char *)a2 + v17);
    v23 = v22[1];
    *v21 = *v22;
    v21[1] = v23;
    *((_BYTE *)a1 + a3[9]) = *((_BYTE *)a2 + a3[9]);
    swift_bridgeObjectRetain(v12);
    swift_bridgeObjectRetain(v15);
    swift_bridgeObjectRetain(v20);
    swift_bridgeObjectRetain(v23);
  }
  return a1;
}

uint64_t sub_100B32708(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = (_QWORD *)(a1 + v7);
  v10 = (_QWORD *)(a2 + v7);
  v11 = v10[1];
  *v9 = *v10;
  v9[1] = v11;
  v12 = (_QWORD *)(a1 + v8);
  v13 = (_QWORD *)(a2 + v8);
  v14 = v13[1];
  *v12 = *v13;
  v12[1] = v14;
  v15 = a3[7];
  v16 = a3[8];
  v17 = (_QWORD *)(a1 + v15);
  v18 = (_QWORD *)(a2 + v15);
  v19 = v18[1];
  *v17 = *v18;
  v17[1] = v19;
  v20 = (_QWORD *)(a1 + v16);
  v21 = (_QWORD *)(a2 + v16);
  v22 = v21[1];
  *v20 = *v21;
  v20[1] = v22;
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRetain(v22);
  return a1;
}

uint64_t sub_100B327D0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  *v8 = *v9;
  v10 = v9[1];
  v11 = v8[1];
  v8[1] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  v12 = a3[6];
  v13 = (_QWORD *)(a1 + v12);
  v14 = (_QWORD *)(a2 + v12);
  *v13 = *v14;
  v15 = v14[1];
  v16 = v13[1];
  v13[1] = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease(v16);
  v17 = a3[7];
  v18 = (_QWORD *)(a1 + v17);
  v19 = (_QWORD *)(a2 + v17);
  *v18 = *v19;
  v20 = v19[1];
  v21 = v18[1];
  v18[1] = v20;
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRelease(v21);
  v22 = a3[8];
  v23 = (_QWORD *)(a1 + v22);
  v24 = (_QWORD *)(a2 + v22);
  *v23 = *v24;
  v25 = v24[1];
  v26 = v23[1];
  v23[1] = v25;
  swift_bridgeObjectRetain(v25);
  swift_bridgeObjectRelease(v26);
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_100B328DC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  v8 = a3[8];
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  *(_OWORD *)(a1 + v8) = *(_OWORD *)(a2 + v8);
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_100B32960(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = (_QWORD *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v11 = *v9;
  v10 = v9[1];
  v12 = v8[1];
  *v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease(v12);
  v13 = a3[6];
  v14 = (_QWORD *)(a1 + v13);
  v15 = (uint64_t *)(a2 + v13);
  v17 = *v15;
  v16 = v15[1];
  v18 = v14[1];
  *v14 = v17;
  v14[1] = v16;
  swift_bridgeObjectRelease(v18);
  v19 = a3[7];
  v20 = (_QWORD *)(a1 + v19);
  v21 = (uint64_t *)(a2 + v19);
  v23 = *v21;
  v22 = v21[1];
  v24 = v20[1];
  *v20 = v23;
  v20[1] = v22;
  swift_bridgeObjectRelease(v24);
  v25 = a3[8];
  v26 = (_QWORD *)(a1 + v25);
  v27 = (uint64_t *)(a2 + v25);
  v29 = *v27;
  v28 = v27[1];
  v30 = v26[1];
  *v26 = v29;
  v26[1] = v28;
  swift_bridgeObjectRelease(v30);
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_100B32A2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100B32A38);
}

uint64_t sub_100B32A38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  int v10;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  v10 = v9 - 1;
  if (v10 < 0)
    v10 = -1;
  return (v10 + 1);
}

uint64_t sub_100B32AC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100B32AD0);
}

uint64_t sub_100B32AD0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20) + 8) = a2;
  return result;
}

uint64_t sub_100B32B4C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[6];

  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_100E60DC0;
    v4[2] = &unk_100E60DC0;
    v4[3] = &unk_100E60DC0;
    v4[4] = &unk_100E60DC0;
    v4[5] = &unk_100E60DD8;
    swift_initStructMetadata(a1, 256, 6, v4, a1 + 16);
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessoryLostModeRequest()
{
  return &type metadata for AccessoryLostModeRequest;
}

unint64_t sub_100B32BDC()
{
  unint64_t result;

  result = qword_101115910;
  if (!qword_101115910)
  {
    result = swift_getWitnessTable(byte_100E610A8, &type metadata for AccessoryLostModeRequestContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101115910);
  }
  return result;
}

uint64_t sub_100B32C20(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD v17[2];
  char v18;

  v3 = sub_10001A9A8(&qword_101115918);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v17[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  sub_10001AA44(a1, v7);
  v9 = sub_100B32E1C();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for AccessoryLostModeRequest.CodingKeys, &type metadata for AccessoryLostModeRequest.CodingKeys, v9, v7, v8);
  if (v1)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  }
  else
  {
    v10 = sub_10001A9A8(&qword_101103CB8);
    v18 = 0;
    v11 = sub_10069CCD8(&qword_101103CC0, (uint64_t)&protocol witness table for String, (const char *)&protocol conformance descriptor for <> [A : B]);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v17, v10, &v18, v3, v10, v11);
    v7 = v17[0];
    v18 = 1;
    v13 = sub_100036994();
    swift_bridgeObjectRetain(v7);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v17, &type metadata for Data, &v18, v3, &type metadata for Data, v13);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    v14 = v17[0];
    v15 = v17[1];
    swift_bridgeObjectRetain(v7);
    sub_10001BBBC(v14, v15);
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
    swift_bridgeObjectRelease();
    sub_10001BC14(v14, v15);
  }
  return v7;
}

unint64_t sub_100B32E1C()
{
  unint64_t result;

  result = qword_101115920;
  if (!qword_101115920)
  {
    result = swift_getWitnessTable(byte_100E61058, &type metadata for AccessoryLostModeRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101115920);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for AccessoryLostModeRequest.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_100B32EAC + 4 * byte_100E60D8B[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100B32EE0 + 4 * byte_100E60D86[v4]))();
}

uint64_t sub_100B32EE0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100B32EE8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100B32EF0);
  return result;
}

uint64_t sub_100B32EFC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100B32F04);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_100B32F08(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100B32F10(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AccessoryLostModeRequest.CodingKeys()
{
  return &type metadata for AccessoryLostModeRequest.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for AccessoryLostModeRequestContent.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_100B32F78 + 4 * byte_100E60D95[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_100B32FAC + 4 * byte_100E60D90[v4]))();
}

uint64_t sub_100B32FAC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100B32FB4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100B32FBCLL);
  return result;
}

uint64_t sub_100B32FC8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100B32FD0);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_100B32FD4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100B32FDC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AccessoryLostModeRequestContent.CodingKeys()
{
  return &type metadata for AccessoryLostModeRequestContent.CodingKeys;
}

unint64_t sub_100B32FFC()
{
  unint64_t result;

  result = qword_101115930;
  if (!qword_101115930)
  {
    result = swift_getWitnessTable(byte_100E60F78, &type metadata for AccessoryLostModeRequestContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101115930);
  }
  return result;
}

unint64_t sub_100B33044()
{
  unint64_t result;

  result = qword_101115938;
  if (!qword_101115938)
  {
    result = swift_getWitnessTable(asc_100E61030, &type metadata for AccessoryLostModeRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101115938);
  }
  return result;
}

unint64_t sub_100B3308C()
{
  unint64_t result;

  result = qword_101115940;
  if (!qword_101115940)
  {
    result = swift_getWitnessTable(aQ_43, &type metadata for AccessoryLostModeRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101115940);
  }
  return result;
}

unint64_t sub_100B330D4()
{
  unint64_t result;

  result = qword_101115948;
  if (!qword_101115948)
  {
    result = swift_getWitnessTable(a9_24, &type metadata for AccessoryLostModeRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101115948);
  }
  return result;
}

unint64_t sub_100B3311C()
{
  unint64_t result;

  result = qword_101115950;
  if (!qword_101115950)
  {
    result = swift_getWitnessTable(asc_100E60EE8, &type metadata for AccessoryLostModeRequestContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101115950);
  }
  return result;
}

unint64_t sub_100B33164()
{
  unint64_t result;

  result = qword_101115958;
  if (!qword_101115958)
  {
    result = swift_getWitnessTable(byte_100E60F10, &type metadata for AccessoryLostModeRequestContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101115958);
  }
  return result;
}

uint64_t sub_100B331A8(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char v11;

  if (a1 == 0x6449616E6D66 && a2 == 0xE600000000000000)
  {
    v5 = 0xE600000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6449616E6D66, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x656C746974 && a2 == 0xE500000000000000)
  {
    v7 = 0xE500000000000000;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x656C746974, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x6567617373656DLL && a2 == 0xE700000000000000)
  {
    v8 = 0xE700000000000000;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6567617373656DLL, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0x6C69616D65 && a2 == 0xE500000000000000)
  {
    v9 = 0xE500000000000000;
LABEL_26:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6C69616D65, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_26;
  }
  if (a1 == 0x6D754E72656E776FLL && a2 == 0xEB00000000726562)
  {
    v10 = 0xEB00000000726562;
LABEL_32:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6D754E72656E776FLL, 0xEB00000000726562, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_32;
  }
  if (a1 == 0x65646F4D74736F6CLL && a2 == 0xEF64656C62616E45)
  {
    swift_bridgeObjectRelease(0xEF64656C62616E45);
    return 5;
  }
  else
  {
    v11 = _stringCompareWithSmolCheck(_:_:expecting:)(0x65646F4D74736F6CLL, 0xEF64656C62616E45, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v11 & 1) != 0)
      return 5;
    else
      return 6;
  }
}

uint64_t *sub_100B3344C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  void (*v18)(char *, char *, uint64_t, __n128);
  __n128 v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v24 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v24 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = *a2;
    v8 = a2[1];
    sub_10001BBBC(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    v9 = a2[2];
    v10 = a2[3];
    sub_10001BBBC(v9, v10);
    a1[2] = v9;
    a1[3] = v10;
    v11 = a2[4];
    v12 = a2[5];
    sub_10001BBBC(v11, v12);
    a1[4] = v11;
    a1[5] = v12;
    v13 = a2[7];
    a1[6] = a2[6];
    a1[7] = v13;
    v14 = *(int *)(a3 + 32);
    v15 = (char *)a1 + v14;
    v16 = (char *)a2 + v14;
    v17 = type metadata accessor for UUID(0);
    v18 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v17 - 8) + 16);
    v19 = swift_bridgeObjectRetain(v13);
    v18(v15, v16, v17, v19);
    v20 = *(int *)(a3 + 36);
    v21 = (uint64_t *)((char *)a1 + v20);
    v22 = (uint64_t *)((char *)a2 + v20);
    v23 = v22[1];
    *v21 = *v22;
    v21[1] = v23;
    swift_bridgeObjectRetain(v23);
  }
  return a1;
}

uint64_t sub_100B3354C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  sub_10001BC14(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  sub_10001BC14(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
  sub_10001BC14(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 32);
  v5 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  return swift_bridgeObjectRelease();
}

uint64_t *sub_100B335C8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  void (*v17)(char *, char *, uint64_t, __n128);
  __n128 v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;

  v6 = *a2;
  v7 = a2[1];
  sub_10001BBBC(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  v8 = a2[2];
  v9 = a2[3];
  sub_10001BBBC(v8, v9);
  a1[2] = v8;
  a1[3] = v9;
  v10 = a2[4];
  v11 = a2[5];
  sub_10001BBBC(v10, v11);
  a1[4] = v10;
  a1[5] = v11;
  v12 = a2[7];
  a1[6] = a2[6];
  a1[7] = v12;
  v13 = *(int *)(a3 + 32);
  v14 = (char *)a1 + v13;
  v15 = (char *)a2 + v13;
  v16 = type metadata accessor for UUID(0);
  v17 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v16 - 8) + 16);
  v18 = swift_bridgeObjectRetain(v12);
  v17(v14, v15, v16, v18);
  v19 = *(int *)(a3 + 36);
  v20 = (uint64_t *)((char *)a1 + v19);
  v21 = (uint64_t *)((char *)a2 + v19);
  v22 = v21[1];
  *v20 = *v21;
  v20[1] = v22;
  swift_bridgeObjectRetain(v22);
  return a1;
}

uint64_t *sub_100B3369C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;

  v6 = *a2;
  v7 = a2[1];
  sub_10001BBBC(*a2, v7);
  v8 = *a1;
  v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  sub_10001BC14(v8, v9);
  v10 = a2[2];
  v11 = a2[3];
  sub_10001BBBC(v10, v11);
  v12 = a1[2];
  v13 = a1[3];
  a1[2] = v10;
  a1[3] = v11;
  sub_10001BC14(v12, v13);
  v14 = a2[4];
  v15 = a2[5];
  sub_10001BBBC(v14, v15);
  v16 = a1[4];
  v17 = a1[5];
  a1[4] = v14;
  a1[5] = v15;
  sub_10001BC14(v16, v17);
  a1[6] = a2[6];
  v18 = a2[7];
  a1[7] = v18;
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRelease();
  v19 = *(int *)(a3 + 32);
  v20 = (char *)a1 + v19;
  v21 = (char *)a2 + v19;
  v22 = type metadata accessor for UUID(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 24))(v20, v21, v22);
  v23 = *(int *)(a3 + 36);
  v24 = (uint64_t *)((char *)a1 + v23);
  v25 = (uint64_t *)((char *)a2 + v23);
  *v24 = *v25;
  v26 = v25[1];
  v24[1] = v26;
  swift_bridgeObjectRetain(v26);
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *sub_100B337A0(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  v8 = *(int *)(a3 + 32);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for UUID(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
  *(_OWORD *)((char *)a1 + *(int *)(a3 + 36)) = *(_OWORD *)((char *)a2 + *(int *)(a3 + 36));
  return a1;
}

uint64_t *sub_100B33820(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;

  v6 = *a1;
  v7 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_10001BC14(v6, v7);
  v8 = a1[2];
  v9 = a1[3];
  *((_OWORD *)a1 + 1) = *(_OWORD *)(a2 + 16);
  sub_10001BC14(v8, v9);
  v10 = a1[4];
  v11 = a1[5];
  *((_OWORD *)a1 + 2) = *(_OWORD *)(a2 + 32);
  sub_10001BC14(v10, v11);
  v12 = *(_QWORD *)(a2 + 56);
  a1[6] = *(_QWORD *)(a2 + 48);
  a1[7] = v12;
  swift_bridgeObjectRelease();
  v13 = *(int *)(a3 + 32);
  v14 = (char *)a1 + v13;
  v15 = a2 + v13;
  v16 = type metadata accessor for UUID(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 40))(v14, v15, v16);
  v17 = *(int *)(a3 + 36);
  v18 = (uint64_t *)((char *)a1 + v17);
  v19 = (uint64_t *)(a2 + v17);
  v21 = *v19;
  v20 = v19[1];
  *v18 = v21;
  v18[1] = v20;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100B338E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100B338F0);
}

uint64_t sub_100B338F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 56);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for UUID(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 32), a2, v8);
  }
}

uint64_t sub_100B3396C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100B33978);
}

uint64_t sub_100B33978(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 56) = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 32), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for AccessoryPairingLockCheckResponse(uint64_t a1)
{
  uint64_t result;

  result = qword_1011159B8;
  if (!qword_1011159B8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AccessoryPairingLockCheckResponse);
  return result;
}

uint64_t sub_100B33A28(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[6];

  v4[0] = &unk_100E61148;
  v4[1] = &unk_100E61148;
  v4[2] = &unk_100E61148;
  v4[3] = &unk_100E61160;
  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v4[4] = *(_QWORD *)(result - 8) + 64;
    v4[5] = &unk_100E61160;
    swift_initStructMetadata(a1, 256, 6, v4, a1 + 16);
    return 0;
  }
  return result;
}

void sub_100B33AA8(char *a1)
{
  sub_10051111C(*a1);
}

void sub_100B33AB4()
{
  char *v0;

  sub_10051FE94(*v0);
}

void sub_100B33ABC(uint64_t a1)
{
  char *v1;

  sub_100514F88(a1, *v1);
}

void sub_100B33AC4(uint64_t a1)
{
  char *v1;

  sub_100516170(a1, *v1);
}

unint64_t sub_100B33ACC@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_100B34380(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_100B33AF8()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_100B33B24 + 4 * byte_100E61100[*v0]))();
}

void sub_100B33B24(_QWORD *a1@<X8>)
{
  *a1 = 0x6953726576726573;
  a1[1] = 0xEA00000000006E67;
}

void sub_100B33B44(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = 0x6E656B6F74;
  a1[1] = v1;
}

void sub_100B33B58(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000010;
  a1[1] = 0x8000000100EC5420;
}

void sub_100B33B78(_QWORD *a1@<X8>)
{
  *a1 = 0x6449616E6D66;
  a1[1] = 0xE600000000000000;
}

void sub_100B33B90(uint64_t a1@<X8>)
{
  strcpy((char *)a1, "maskedAppleId");
  *(_WORD *)(a1 + 14) = -4864;
}

uint64_t sub_100B33BB8()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100B33BE4 + 4 * byte_100E61106[*v0]))(0x5364656573, 0xE500000000000000);
}

uint64_t sub_100B33BE4()
{
  return 0x6953726576726573;
}

uint64_t sub_100B33C00()
{
  return 0x6E656B6F74;
}

unint64_t sub_100B33C10()
{
  return 0xD000000000000010;
}

uint64_t sub_100B33C2C()
{
  return 0x6449616E6D66;
}

uint64_t sub_100B33C40()
{
  return 0x704164656B73616DLL;
}

unint64_t sub_100B33C64@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_100B34380(a1);
  *a2 = result;
  return result;
}

uint64_t sub_100B33C88(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100B34118();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100B33CB0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100B34118();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100B33CD8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  _QWORD v32[2];
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  __int128 v41;
  char v42;

  v35 = a2;
  v36 = type metadata accessor for UUID(0);
  v3 = *(_QWORD *)(v36 - 8);
  __chkstk_darwin(v36);
  v5 = (_QWORD *)((char *)v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v38 = sub_10001A9A8(&qword_101115A00);
  v6 = *(_QWORD *)(v38 - 8);
  __chkstk_darwin(v38);
  v8 = (char *)v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for AccessoryPairingLockCheckResponse(0);
  __chkstk_darwin(v9);
  v11 = (char *)v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v13 = a1[4];
  v39 = a1;
  sub_10001AA44(a1, v12);
  v14 = sub_100B34118();
  v37 = v8;
  v15 = v40;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for AccessoryPairingLockCheckResponse.CodingKeys, &type metadata for AccessoryPairingLockCheckResponse.CodingKeys, v14, v12, v13);
  if (v15)
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v39);
  v33 = v5;
  v34 = v3;
  v40 = v6;
  v16 = v11;
  v17 = v36;
  v42 = 0;
  v18 = sub_100036994();
  v19 = v37;
  v20 = v38;
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v41, &type metadata for Data, &v42, v38, &type metadata for Data, v18);
  v21 = (uint64_t)v16;
  v22 = *((_QWORD *)&v41 + 1);
  *(_QWORD *)v21 = v41;
  *(_QWORD *)(v21 + 8) = v22;
  v42 = 1;
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v41, &type metadata for Data, &v42, v20, &type metadata for Data, v18);
  *(_OWORD *)(v21 + 16) = v41;
  v42 = 2;
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v41, &type metadata for Data, &v42, v20, &type metadata for Data, v18);
  *(_OWORD *)(v21 + 32) = v41;
  LOBYTE(v41) = 3;
  v23 = KeyedDecodingContainer.decode(_:forKey:)(&v41, v20);
  v32[1] = 0;
  *(_QWORD *)(v21 + 48) = v23;
  *(_QWORD *)(v21 + 56) = v24;
  LOBYTE(v41) = 4;
  v25 = sub_100252A08();
  v26 = v33;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v33, v17, &v41, v20, v17, v25);
  (*(void (**)(uint64_t, _QWORD *, uint64_t))(v34 + 32))(v21 + *(int *)(v9 + 32), v26, v17);
  LOBYTE(v41) = 5;
  v27 = KeyedDecodingContainer.decode(_:forKey:)(&v41, v20);
  v29 = v28;
  (*(void (**)(char *, uint64_t))(v40 + 8))(v19, v20);
  v30 = (uint64_t *)(v21 + *(int *)(v9 + 36));
  *v30 = v27;
  v30[1] = v29;
  sub_100B3415C(v21, v35);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v39);
  return sub_100B341A0(v21);
}

uint64_t sub_100B34104@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100B33CD8(a1, a2);
}

unint64_t sub_100B34118()
{
  unint64_t result;

  result = qword_101115A08;
  if (!qword_101115A08)
  {
    result = swift_getWitnessTable(byte_100E6129C, &type metadata for AccessoryPairingLockCheckResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101115A08);
  }
  return result;
}

uint64_t sub_100B3415C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AccessoryPairingLockCheckResponse(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100B341A0(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for AccessoryPairingLockCheckResponse(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t storeEnumTagSinglePayload for AccessoryPairingLockCheckResponse.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_100B34228 + 4 * byte_100E61111[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_100B3425C + 4 * byte_100E6110C[v4]))();
}

uint64_t sub_100B3425C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100B34264(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100B3426CLL);
  return result;
}

uint64_t sub_100B34278(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100B34280);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_100B34284(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100B3428C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AccessoryPairingLockCheckResponse.CodingKeys()
{
  return &type metadata for AccessoryPairingLockCheckResponse.CodingKeys;
}

unint64_t sub_100B342AC()
{
  unint64_t result;

  result = qword_101115A10;
  if (!qword_101115A10)
  {
    result = swift_getWitnessTable(byte_100E61274, &type metadata for AccessoryPairingLockCheckResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101115A10);
  }
  return result;
}

unint64_t sub_100B342F4()
{
  unint64_t result;

  result = qword_101115A18;
  if (!qword_101115A18)
  {
    result = swift_getWitnessTable(aU_39, &type metadata for AccessoryPairingLockCheckResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101115A18);
  }
  return result;
}

unint64_t sub_100B3433C()
{
  unint64_t result;

  result = qword_101115A20;
  if (!qword_101115A20)
  {
    result = swift_getWitnessTable(asc_100E611D4, &type metadata for AccessoryPairingLockCheckResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101115A20);
  }
  return result;
}

unint64_t sub_100B34380(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10104D568, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 6)
    return 6;
  else
    return v3;
}

_QWORD *sub_100B343C8(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  objc_class *v9;
  char *v10;
  id v11;
  char *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  char *v16;
  id v17;
  uint64_t KeyPath;
  uint64_t v19;
  char *v20;
  id v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  objc_super v36;
  id v37;

  v2 = v1;
  v4 = sub_10001A9A8(&qword_1010F6988);
  v5 = *(_QWORD *)(v4 - 8);
  v34 = v4;
  v35 = v5;
  __chkstk_darwin(v4);
  v7 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v1[4] = 0;
  v8 = sub_10001A9A8(&qword_101115B60);
  swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52));
  v1[5] = PassthroughSubject.init()();
  v1[2] = a1;
  v9 = (objc_class *)type metadata accessor for KVOHelperNWDatagramConnection();
  v10 = (char *)objc_allocWithZone(v9);
  *(_QWORD *)&v10[OBJC_IVAR____TtC12searchpartydP33_6037248B8C5D968AAFEBF5992F3E761329KVOHelperNWDatagramConnection_observation] = 0;
  *(_QWORD *)&v10[OBJC_IVAR____TtC12searchpartydP33_6037248B8C5D968AAFEBF5992F3E761329KVOHelperNWDatagramConnection_observee] = a1;
  v11 = a1;
  v12 = v10;
  v37 = objc_msgSend(v11, "connectionState");
  v13 = sub_10001A9A8(&qword_101115B68);
  swift_allocObject(v13, *(unsigned int *)(v13 + 48), *(unsigned __int16 *)(v13 + 52));
  v14 = (void *)CurrentValueSubject.init(_:)(&v37);
  *(_QWORD *)&v12[OBJC_IVAR____TtC12searchpartydP33_6037248B8C5D968AAFEBF5992F3E761329KVOHelperNWDatagramConnection_subject] = v14;
  v37 = v14;
  v15 = sub_1000193A4(&qword_101115B70, &qword_101115B68, (const char *)&protocol conformance descriptor for CurrentValueSubject<A, B>);
  *(_QWORD *)&v12[OBJC_IVAR____TtC12searchpartydP33_6037248B8C5D968AAFEBF5992F3E761329KVOHelperNWDatagramConnection_publisher] = Publisher.eraseToAnyPublisher()(v13, v15);

  v36.receiver = v12;
  v36.super_class = v9;
  v16 = (char *)objc_msgSendSuper2(&v36, "init");
  v37 = *(id *)&v16[OBJC_IVAR____TtC12searchpartydP33_6037248B8C5D968AAFEBF5992F3E761329KVOHelperNWDatagramConnection_observee];
  v17 = v37;
  KeyPath = swift_getKeyPath(&unk_100E613D8);
  v19 = swift_allocObject(&unk_1010AE7E0, 24, 7);
  swift_unknownObjectWeakInit(v19 + 16, v16);
  v20 = v16;
  v21 = v17;
  v22 = _KeyValueCodingAndObserving.observe<A>(_:options:changeHandler:)(KeyPath, 0, sub_100B35468, v19, &protocol witness table for NSObject);

  swift_release();
  swift_release();

  v23 = *(void **)&v20[OBJC_IVAR____TtC12searchpartydP33_6037248B8C5D968AAFEBF5992F3E761329KVOHelperNWDatagramConnection_observation];
  *(_QWORD *)&v20[OBJC_IVAR____TtC12searchpartydP33_6037248B8C5D968AAFEBF5992F3E761329KVOHelperNWDatagramConnection_observation] = v22;

  v2[3] = v20;
  v37 = (id)v2[5];
  v24 = sub_1000193A4(&qword_101115B78, &qword_101115B60, (const char *)&protocol conformance descriptor for PassthroughSubject<A, B>);
  v2[7] = Publisher.eraseToAnyPublisher()(v8, v24);
  v25 = *(void **)&v20[OBJC_IVAR____TtC12searchpartydP33_6037248B8C5D968AAFEBF5992F3E761329KVOHelperNWDatagramConnection_publisher];
  v2[6] = v25;
  v37 = v25;
  swift_retain_n(v25, 2);
  v26 = sub_10001A9A8(&qword_1010F6990);
  v27 = sub_1000193A4(&qword_1010F6998, &qword_1010F6990, (const char *)&protocol conformance descriptor for AnyPublisher<A, B>);
  Publisher.first(where:)(sub_1002F5888, 0, v26, v27);
  swift_release();
  v28 = swift_allocObject(&unk_1010AE808, 24, 7);
  swift_weakInit(v28 + 16, v2);
  v29 = sub_1000193A4(&qword_1010F69A0, &qword_1010F6988, (const char *)&protocol conformance descriptor for Publishers.FirstWhere<A>);
  v30 = v34;
  v31 = Publisher<>.sink(receiveValue:)(sub_100B35494, v28, v34, v29);

  swift_release();
  (*(void (**)(char *, uint64_t))(v35 + 8))(v7, v30);
  v2[4] = v31;
  swift_release();
  return v2;
}

uint64_t sub_100B3474C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t Strong;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t result;
  _QWORD aBlock[6];
  _BYTE v10[24];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v10, 0, 0);
  Strong = swift_weakLoadStrong(v2);
  if (Strong)
  {
    v4 = Strong;
    v5 = *(void **)(Strong + 16);
    v6 = swift_allocObject(&unk_1010AE808, 24, 7);
    swift_weakInit(v6 + 16, v4);
    aBlock[4] = sub_100B3549C;
    aBlock[5] = v6;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100B34BE8;
    aBlock[3] = &unk_1010AE820;
    v7 = _Block_copy(aBlock);
    swift_release();
    objc_msgSend(v5, "readDatagramsWithMinimumCount:maximumCount:completionHandler:", 1, 1, v7);
    _Block_release(v7);
    swift_release();
  }
  swift_beginAccess(v2, aBlock, 0, 0);
  result = swift_weakLoadStrong(v2);
  if (result)
  {
    *(_QWORD *)(result + 32) = 0;
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t sub_100B34870()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 16);
  objc_msgSend(v1, "cancel");

  swift_release(*(_QWORD *)(v0 + 32));
  swift_release(*(_QWORD *)(v0 + 40));
  swift_release(*(_QWORD *)(v0 + 48));
  swift_release(*(_QWORD *)(v0 + 56));
  return swift_deallocClassInstance(v0, 64, 7);
}

uint64_t sub_100B348D4(_QWORD *a1, void **a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  void ***v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  void *v23;
  void **aBlock;
  _QWORD v25[5];
  char v26[24];

  v5 = a3 + 16;
  swift_beginAccess(a3 + 16, v26, 0, 0);
  result = swift_weakLoadStrong(v5);
  if (result)
  {
    v7 = result;
    if (a2)
    {
      swift_errorRetain(a2);
      swift_errorRetain(a2);
      if (qword_1010EA3C8 != -1)
        swift_once(&qword_1010EA3C8, sub_100BECC74);
      v8 = type metadata accessor for Logger(0);
      sub_10001A9E8(v8, (uint64_t)qword_1011B7EC8);
      swift_errorRetain(a2);
      v9 = swift_errorRetain(a2);
      v10 = Logger.logObject.getter(v9);
      v11 = static os_log_type_t.error.getter(v10);
      if (os_log_type_enabled(v10, v11))
      {
        v12 = (uint8_t *)swift_slowAlloc(12, -1);
        v13 = (uint64_t *)swift_slowAlloc(8, -1);
        *(_DWORD *)v12 = 138412290;
        v14 = sub_1000FE094();
        v15 = swift_allocError(&type metadata for MessagingError, v14, 0, 0);
        *v16 = a2;
        swift_errorRetain(a2);
        v17 = _swift_stdlib_bridgeErrorToNSError(v15);
        aBlock = (void **)v17;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v25, v12 + 4, v12 + 12);
        *v13 = v17;
        swift_errorRelease(a2);
        swift_errorRelease(a2);
        _os_log_impl((void *)&_mh_execute_header, v10, v11, "MessagingDatagramConnection read error: %@", v12, 0xCu);
        v18 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
        swift_arrayDestroy(v13, 1, v18);
        swift_slowDealloc(v13, -1, -1);
        swift_slowDealloc(v12, -1, -1);
      }
      else
      {
        swift_errorRelease(a2);
        swift_errorRelease(a2);
      }

      aBlock = a2;
      swift_errorRetain(a2);
      PassthroughSubject.send(completion:)(&aBlock);
      swift_errorRelease(a2);
      swift_errorRelease(a2);
      swift_errorRelease(a2);
    }
    else if (a1[2])
    {
      v19 = a1[4];
      v20 = a1[5];
      aBlock = (void **)v19;
      v25[0] = v20;
      sub_10001BBBC(v19, v20);
      PassthroughSubject.send(_:)(&aBlock);
      sub_10001BC14(v19, v20);
      v21 = *(void **)(v7 + 16);
      v22 = swift_allocObject(&unk_1010AE808, 24, 7);
      swift_weakInit(v22 + 16, v7);
      v25[3] = sub_100B3549C;
      v25[4] = v22;
      aBlock = _NSConcreteStackBlock;
      v25[0] = 1107296256;
      v25[1] = sub_100B34BE8;
      v25[2] = &unk_1010AE848;
      v23 = _Block_copy(&aBlock);
      swift_release();
      objc_msgSend(v21, "readDatagramsWithMinimumCount:maximumCount:completionHandler:", 1, 1, v23);
      _Block_release(v23);
    }
    return swift_release();
  }
  return result;
}

void sub_100B34BE8(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4;
  void (*v5)(uint64_t, void *);
  uint64_t v6;
  id v7;

  v5 = *(void (**)(uint64_t, void *))(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)(a2, &type metadata for Data);
  swift_retain(v4);
  v7 = a3;
  v5(v6, a3);
  swift_release(v4);
  swift_bridgeObjectRelease(v6);

}

void sub_100B34C60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v10;
  uint64_t Strong;
  void *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  Class isa;
  uint64_t v17;
  void *v18;
  _QWORD aBlock[6];
  _BYTE v20[24];

  v10 = swift_allocObject(&unk_1010AE880, 32, 7);
  *(_QWORD *)(v10 + 16) = a1;
  *(_QWORD *)(v10 + 24) = a2;
  a3 += 16;
  swift_beginAccess(a3, v20, 0, 0);
  Strong = swift_weakLoadStrong(a3);
  if (Strong)
  {
    v12 = *(void **)(Strong + 16);
    swift_retain();
    v13 = v12;
    swift_release();
    v14 = sub_10001A9A8(&qword_1010F4A30);
    v15 = swift_allocObject(v14, 48, 7);
    *(_OWORD *)(v15 + 16) = xmmword_100E22B00;
    *(_QWORD *)(v15 + 32) = a4;
    *(_QWORD *)(v15 + 40) = a5;
    sub_10001BBBC(a4, a5);
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v17 = swift_allocObject(&unk_1010AE8A8, 32, 7);
    *(_QWORD *)(v17 + 16) = sub_1002939C0;
    *(_QWORD *)(v17 + 24) = v10;
    aBlock[4] = sub_100B354C8;
    aBlock[5] = v17;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100555E2C;
    aBlock[3] = &unk_1010AE8C0;
    v18 = _Block_copy(aBlock);
    swift_release();
    objc_msgSend(v13, "writeDatagrams:completionHandler:", isa, v18);
    _Block_release(v18);

  }
  else
  {
    swift_retain();
    swift_release();
  }
}

uint64_t sub_100B34E00(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  if (!a1)
    return a2(0, 0);
  swift_errorRetain(a1);
  swift_errorRetain(a1);
  if (qword_1010EA3C8 != -1)
    swift_once(&qword_1010EA3C8, sub_100BECC74);
  v4 = type metadata accessor for Logger(0);
  sub_10001A9E8(v4, (uint64_t)qword_1011B7EC8);
  swift_errorRetain(a1);
  v5 = swift_errorRetain(a1);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.error.getter(v6);
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v8 = 138412290;
    v10 = sub_1000FE094();
    v11 = swift_allocError(&type metadata for MessagingError, v10, 0, 0);
    *v12 = a1;
    swift_errorRetain(a1);
    v13 = _swift_stdlib_bridgeErrorToNSError(v11);
    v16 = v13;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v16, &v17, v8 + 4, v8 + 12);
    *v9 = v13;
    swift_errorRelease(a1);
    swift_errorRelease(a1);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "MessagingDatagramConnection send error: %@", v8, 0xCu);
    v14 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v9, 1, v14);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }
  else
  {
    swift_errorRelease(a1);
    swift_errorRelease(a1);
  }

  swift_errorRetain(a1);
  a2(a1, 1);
  swift_errorRelease(a1);
  swift_errorRelease(a1);
  return swift_errorRelease(a1);
}

uint64_t sub_100B35024(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  Swift::String v4;
  Swift::String v5;
  Swift::String v6;
  Swift::String v7;

  v3 = type metadata accessor for MessagingDatagramConnection();
  v4._countAndFlagsBits = CustomStringConvertible.typeDescription.getter(v3, a2);
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = 8250;
  v5._object = (void *)0xE200000000000000;
  String.append(_:)(v5);
  v6._countAndFlagsBits = CustomStringConvertible<>.addressDescription.getter(v3, a2);
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._countAndFlagsBits = 62;
  v7._object = (void *)0xE100000000000000;
  String.append(_:)(v7);
  return 60;
}

uint64_t sub_100B350DC(void **a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  uint64_t v4;
  uint64_t result;
  void *v6;
  uint64_t v7;
  id v8;
  _BYTE v9[24];

  v3 = *a1;
  v4 = a3 + 16;
  swift_beginAccess(a3 + 16, v9, 0, 0);
  result = swift_unknownObjectWeakLoadStrong(v4);
  if (result)
  {
    v6 = (void *)result;
    v7 = *(_QWORD *)(result
                   + OBJC_IVAR____TtC12searchpartydP33_6037248B8C5D968AAFEBF5992F3E761329KVOHelperNWDatagramConnection_subject);
    swift_retain(v7);

    v8 = objc_msgSend(v3, "connectionState");
    CurrentValueSubject.send(_:)(&v8);
    return swift_release(v7);
  }
  return result;
}

id sub_100B3519C()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for KVOHelperNWDatagramConnection();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t NWConnectionState.description.getter(uint64_t a1)
{
  uint64_t result;

  result = 0x64696C61766E692ELL;
  switch(a1)
  {
    case 0:
      return result;
    case 1:
      result = 0x676E69746961772ELL;
      break;
    case 2:
      result = 0x697261706572702ELL;
      break;
    case 3:
      result = 0x79646165722ELL;
      break;
    case 4:
      result = 0x64656C6961662ELL;
      break;
    case 5:
      result = 0x6C6C65636E61632ELL;
      break;
    default:
      result = 0x4E574F4E4B4E553CLL;
      break;
  }
  return result;
}

uint64_t sub_100B352F8()
{
  _QWORD *v0;
  uint64_t result;

  result = 0x64696C61766E692ELL;
  switch(*v0)
  {
    case 0:
      return result;
    case 1:
      result = 0x676E69746961772ELL;
      break;
    case 2:
      result = 0x697261706572702ELL;
      break;
    case 3:
      result = 0x79646165722ELL;
      break;
    case 4:
      result = 0x64656C6961662ELL;
      break;
    case 5:
      result = 0x6C6C65636E61632ELL;
      break;
    default:
      result = 0x4E574F4E4B4E553CLL;
      break;
  }
  return result;
}

uint64_t type metadata accessor for MessagingDatagramConnection()
{
  return objc_opt_self(_TtC12searchpartyd27MessagingDatagramConnection);
}

uint64_t type metadata accessor for KVOHelperNWDatagramConnection()
{
  return objc_opt_self(_TtC12searchpartydP33_6037248B8C5D968AAFEBF5992F3E761329KVOHelperNWDatagramConnection);
}

const char *sub_100B35408()
{
  return "connectionState";
}

id sub_100B35414@<X0>(id *a1@<X0>, _QWORD *a2@<X8>)
{
  id result;

  result = objc_msgSend(*a1, "connectionState");
  *a2 = result;
  return result;
}

uint64_t sub_100B35444()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100B35468(void **a1, uint64_t a2)
{
  uint64_t v2;

  return sub_100B350DC(a1, a2, v2);
}

uint64_t sub_100B35470()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100B35494(uint64_t a1)
{
  uint64_t v1;

  return sub_100B3474C(a1, v1);
}

uint64_t sub_100B3549C(_QWORD *a1, void **a2)
{
  uint64_t v2;

  return sub_100B348D4(a1, a2, v2);
}

uint64_t sub_100B354A4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100B354C8(uint64_t a1)
{
  uint64_t v1;

  return sub_100B34E00(a1, *(uint64_t (**)(uint64_t, uint64_t))(v1 + 16));
}

uint64_t sub_100B354E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  void (*v9)(char *);
  uint64_t v11;

  v4 = type metadata accessor for Notification(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(void (**)(char *))(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  static Notification._unconditionallyBridgeFromObjectiveC(_:)(a2);
  swift_retain(v8);
  v9(v7);
  swift_release(v8);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_100B35588()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_1000234D8(v0, qword_101115B80);
  v1 = sub_10001A9E8(v0, (uint64_t)qword_101115B80);
  if (qword_1010EA218 != -1)
    swift_once(&qword_1010EA218, sub_100B362B8);
  v2 = sub_10001A9E8(v0, (uint64_t)qword_1011B7CC8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_100B35618()
{
  uint64_t v0;
  uint64_t result;

  v0 = sub_10001A9A8(&qword_1010FAAF0);
  result = swift_allocObject(v0, 20, 7);
  *(_DWORD *)(result + 16) = 0;
  qword_101115B98 = result;
  return result;
}

uint64_t sub_100B3564C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  v0 = type metadata accessor for ReferenceClock.IsolationDomain();
  v1 = swift_allocObject(v0, 112, 15);
  result = swift_defaultActor_initialize(v1);
  qword_101115BA0 = v1;
  return result;
}

uint64_t sub_100B35688()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  double v6;
  uint64_t result;
  uint64_t v8;

  v0 = type metadata accessor for Date(0);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = __chkstk_darwin(v0);
  v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = static Date.distantPast.getter(v2);
  v6 = Date.timeIntervalSinceReferenceDate.getter(v5);
  result = (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v4, v0);
  qword_101115BA8 = *(_QWORD *)&v6;
  return result;
}

double sub_100B35714()
{
  double result;

  if (qword_1010EA208 != -1)
    swift_once(&qword_1010EA208, sub_100B35688);
  result = *(double *)&qword_101115BA8;
  qword_101115BC8 = qword_101115BA8;
  return result;
}

BOOL sub_100B3575C()
{
  uint64_t v0;
  uint64_t v1;
  double v2;
  id v3;
  void *v4;
  id v5;
  double v6;
  void **aBlock;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t);
  void *v11;
  void (*v12)();
  uint64_t v13;

  if (qword_1010EA1F8 != -1)
    swift_once(&qword_1010EA1F8, sub_100B35618);
  v0 = qword_101115B98;
  v1 = sub_10001A9A8(&qword_1010EBE40);
  OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_100B361D8, 0, v0, (char *)&type metadata for () + 8, v1);
  v2 = *(double *)&v9;
  if ((aBlock & 1) == 0)
  {
    v3 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
    v12 = sub_100B36244;
    v13 = 0;
    aBlock = _NSConcreteStackBlock;
    v9 = 1107296256;
    v10 = sub_100B354E4;
    v11 = &unk_1010AE8F8;
    v4 = _Block_copy(&aBlock);
    swift_release(v13);
    v5 = objc_msgSend(v3, "addObserverForName:object:queue:usingBlock:", NSSystemClockDidChangeNotification, 0, 0, v4);
    _Block_release(v4);

    swift_unknownObjectRelease(v5);
  }
  if (qword_1010EA208 != -1)
    swift_once(&qword_1010EA208, sub_100B35688);
  v6 = *(double *)&qword_101115BA8;
  if (*(double *)&qword_101115BA8 >= v2)
    sub_100B35B90(0);
  return v6 < v2;
}

double sub_100B35904()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  double Current;
  uint64_t v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v11[4];

  v0 = sub_10001A9A8(&qword_1010F46C0);
  __chkstk_darwin(v0);
  v2 = (char *)v11 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100B3575C();
  Current = CFAbsoluteTimeGetCurrent();
  if (qword_1010EA1F8 != -1)
    swift_once(&qword_1010EA1F8, sub_100B35618);
  v4 = qword_101115B98;
  v5 = sub_10001A9A8(&qword_1010EBE48);
  OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_100B35A78, 0, v4, (char *)&type metadata for () + 8, v5);
  v6 = Current - v11[2];
  if (v6 - v11[3] > 86400.0)
  {
    OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_100B35ADC, 0, qword_101115B98, (char *)&type metadata for () + 8, (char *)&type metadata for () + 8);
    v7 = type metadata accessor for TaskPriority(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v2, 1, 1, v7);
    v8 = swift_allocObject(&unk_1010AE930, 32, 7);
    *(_QWORD *)(v8 + 16) = 0;
    *(_QWORD *)(v8 + 24) = 0;
    v9 = sub_100691AC0((uint64_t)v2, (uint64_t)&unk_1010EBE50, v8);
    swift_release(v9);
  }
  return v6;
}

double sub_100B35A78@<D0>(_QWORD *a1@<X8>)
{
  double result;

  *a1 = qword_101115BB8;
  if (qword_1010EA210 != -1)
    swift_once(&qword_1010EA210, sub_100B35714);
  result = *(double *)&qword_101115BC8;
  a1[1] = qword_101115BC8;
  return result;
}

void sub_100B35ADC()
{
  byte_101115BD0 = 1;
}

uint64_t sub_100B35AEC()
{
  return swift_task_switch(sub_100B35B00, 0, 0);
}

uint64_t sub_100B35B00()
{
  if (qword_1010EA200 != -1)
    swift_once(&qword_1010EA200, sub_100B3564C);
  return swift_task_switch(sub_100B35B60, qword_101115BA0, 0);
}

uint64_t sub_100B35B60()
{
  uint64_t v0;

  sub_100B35B90(1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_100B35B90(char a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  double v31;
  double v32;
  uint64_t v33;
  double Current;
  NSObject *v35;
  os_log_type_t v36;
  _DWORD *v37;
  _DWORD *v38;
  _DWORD *v39;
  double v40;
  uint64_t v41;
  uint64_t v42;
  os_log_type_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  v2 = type metadata accessor for Date(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v52 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a1 & 1) == 0)
    goto LABEL_29;
  if (qword_1010EA1F8 != -1)
    swift_once(&qword_1010EA1F8, sub_100B35618);
  v4 = OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_100B36448, 0, qword_101115B98, (char *)&type metadata for () + 8, &type metadata for Bool);
  if (v54 == 1)
  {
LABEL_29:
    if (TMIsAutomaticTimeEnabled(v4))
    {
      if (qword_1010EA1F8 != -1)
        swift_once(&qword_1010EA1F8, sub_100B35618);
      OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_100B36338, 0, qword_101115B98, (char *)&type metadata for () + 8, (char *)&type metadata for () + 8);
      if (qword_1010EA1F0 != -1)
        swift_once(&qword_1010EA1F0, sub_100B35588);
      v7 = type metadata accessor for Logger(0);
      v8 = sub_10001A9E8(v7, (uint64_t)qword_101115B80);
      v9 = Logger.logObject.getter(v8);
      v10 = static os_log_type_t.default.getter(v9);
      if (!os_log_type_enabled(v9, v10))
        goto LABEL_26;
      v11 = (uint8_t *)swift_slowAlloc(12, -1);
      v12 = swift_slowAlloc(32, -1);
      v54 = v12;
      *(_DWORD *)v11 = 136446210;
      v13 = sub_100B35904();
      Date.init(timeIntervalSinceReferenceDate:)(v13);
      v14 = sub_1008834C4();
      v15 = dispatch thunk of CustomStringConvertible.description.getter(v2, v14);
      v16 = v3;
      v18 = v17;
      (*(void (**)(char *, uint64_t))(v16 + 8))(v6, v2);
      v53 = sub_100016940(v15, v18, &v54);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, &v54, v11 + 4, v11 + 12);
      swift_bridgeObjectRelease(v18);
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "ReferenceClock calibrated: %{public}s delta: 0.0 uncertainty: 0.0", v11, 0xCu);
      swift_arrayDestroy(v12, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v12, -1, -1);
      v19 = (uint64_t)v11;
LABEL_25:
      swift_slowDealloc(v19, -1, -1);
LABEL_26:

      return;
    }
    if (qword_1010EA1F0 != -1)
      swift_once(&qword_1010EA1F0, sub_100B35588);
    v20 = type metadata accessor for Logger(0);
    v21 = sub_10001A9E8(v20, (uint64_t)qword_101115B80);
    v22 = Logger.logObject.getter(v21);
    v23 = static os_log_type_t.default.getter(v22);
    if (os_log_type_enabled(v22, v23))
    {
      v24 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v24 = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "Automatic time is DISABLED", v24, 2u);
      swift_slowDealloc(v24, -1, -1);
    }

    *(double *)&v25 = COERCE_DOUBLE(sub_100B3634C());
    if ((v27 & 0x100000000) == 0)
    {
      v28 = v25;
      v29 = *(_QWORD *)&v26;
      v30 = v27;
      v31 = *(double *)&v25;
      v32 = v26;
      Current = CFAbsoluteTimeGetCurrent();
      if (v32 > 1.0)
      {
        v35 = Logger.logObject.getter(v33);
        v36 = static os_log_type_t.error.getter(v35);
        if (os_log_type_enabled(v35, v36))
        {
          v37 = (_DWORD *)swift_slowAlloc(18, -1);
          v52 = v3;
          v38 = v37;
          *v37 = 134218240;
          v54 = v29;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, &v55, v37 + 1, v37 + 3);
          *((_WORD *)v38 + 6) = 1024;
          LODWORD(v54) = v30;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, (char *)&v54 + 4, (char *)v38 + 14, (char *)v38 + 18);
          _os_log_impl((void *)&_mh_execute_header, v35, v36, "TMGMReferenceTime reports high uncertainty: %f (reliability: %d", (uint8_t *)v38, 0x12u);
          v39 = v38;
          v3 = v52;
          swift_slowDealloc(v39, -1, -1);
        }

      }
      v40 = Current - v31;
      if (qword_1010EA1F8 != -1)
        v33 = swift_once(&qword_1010EA1F8, sub_100B35618);
      __chkstk_darwin(v33);
      *((double *)&v52 - 4) = v40;
      *(&v52 - 3) = v29;
      *(&v52 - 2) = v28;
      v42 = OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_100B363D0, &v52 - 6, v41, (char *)&type metadata for () + 8, (char *)&type metadata for () + 8);
      v9 = Logger.logObject.getter(v42);
      v43 = static os_log_type_t.default.getter(v9);
      if (!os_log_type_enabled(v9, v43))
        goto LABEL_26;
      v44 = swift_slowAlloc(32, -1);
      v45 = swift_slowAlloc(32, -1);
      v54 = v45;
      *(_DWORD *)v44 = 136446722;
      v46 = sub_100B35904();
      Date.init(timeIntervalSinceReferenceDate:)(v46);
      v47 = sub_1008834C4();
      v48 = dispatch thunk of CustomStringConvertible.description.getter(v2, v47);
      v49 = v3;
      v51 = v50;
      (*(void (**)(char *, uint64_t))(v49 + 8))(v6, v2);
      v53 = sub_100016940(v48, v51, &v54);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, &v54, v44 + 4, v44 + 12);
      swift_bridgeObjectRelease(v51);
      *(_WORD *)(v44 + 12) = 2048;
      v53 = *(_QWORD *)&v40;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, &v54, v44 + 14, v44 + 22);
      *(_WORD *)(v44 + 22) = 2048;
      v53 = v29;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, &v54, v44 + 24, v44 + 32);
      _os_log_impl((void *)&_mh_execute_header, v9, v43, "ReferenceClock calibrated: %{public}s delta: %f uncertainty: %f", (uint8_t *)v44, 0x20u);
      swift_arrayDestroy(v45, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v45, -1, -1);
      v19 = v44;
      goto LABEL_25;
    }
  }
}

uint64_t type metadata accessor for ReferenceClock.IsolationDomain()
{
  return objc_opt_self(_TtCO12searchpartyd14ReferenceClockP33_5ACD48FA55D094E43274665487F80A2E15IsolationDomain);
}

double sub_100B361D8@<D0>(uint64_t a1@<X8>)
{
  char v2;
  double result;

  v2 = byte_101115BB0;
  byte_101115BB0 = 1;
  *(_BYTE *)a1 = v2;
  if (qword_1010EA210 != -1)
    swift_once(&qword_1010EA210, sub_100B35714);
  result = *(double *)&qword_101115BC8;
  *(_QWORD *)(a1 + 8) = qword_101115BC8;
  return result;
}

void sub_100B36244()
{
  sub_100B35B90(0);
}

void sub_100B3624C()
{
  qword_101115BB8 = 0;
  qword_101115BC0 = 0;
  if (qword_1010EA210 != -1)
    swift_once(&qword_1010EA210, sub_100B35714);
  qword_101115BC8 = CFAbsoluteTimeGetCurrent();
  byte_101115BD0 = 0;
}

uint64_t sub_100B362B8()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_1000234D8(v0, qword_1011B7CC8);
  sub_10001A9E8(v0, (uint64_t)qword_1011B7CC8);
  return Logger.init(subsystem:category:)(0xD00000000000001DLL, 0x8000000100EC5D30, 0x636E657265666552, 0xEE006B636F6C4365);
}

void sub_100B36338()
{
  sub_100B3624C();
}

uint64_t sub_100B3634C()
{
  int v1;
  uint64_t v2;
  uint64_t v3;

  v2 = 0;
  v3 = 0;
  v1 = 0;
  if (TMGetReferenceTime(&v3, &v2, &v1))
    return v3;
  else
    return 0;
}

uint64_t sub_100B363D0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  v1 = v0[3];
  v2 = v0[4];
  qword_101115BB8 = v0[2];
  qword_101115BC0 = v1;
  if (qword_1010EA210 != -1)
    result = swift_once(&qword_1010EA210, sub_100B35714);
  qword_101115BC8 = v2;
  byte_101115BD0 = 0;
  return result;
}

void sub_100B36448(_BYTE *a1@<X8>)
{
  *a1 = byte_101115BD0;
}

uint64_t sub_100B36458()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 32, 7);
}

ValueMetadata *type metadata accessor for SearchpartyCredential()
{
  return &type metadata for SearchpartyCredential;
}

uint64_t sub_100B3648C()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain(v0[1]);
  return v1;
}

uint64_t sub_100B364BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4[12] = a3;
  v4[13] = v3;
  v4[10] = a1;
  v4[11] = a2;
  v5 = sub_10001A9A8(&qword_1010EF358);
  v4[14] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[15] = v6;
  v7 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[16] = swift_task_alloc(v7);
  v4[17] = swift_task_alloc(v7);
  v4[18] = swift_task_alloc(v7);
  v4[19] = swift_task_alloc(v7);
  v4[20] = swift_task_alloc(v7);
  v8 = type metadata accessor for Table(0);
  v4[21] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v4[22] = v9;
  v4[23] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100B36580, v3, 0);
}

uint64_t sub_100B36580()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;

  if (*(_QWORD *)(*(_QWORD *)(v0 + 104) + 112))
  {
    v1 = qword_1010E9A30;
    swift_retain();
    if (v1 != -1)
      swift_once(&qword_1010E9A30, sub_1001F524C);
    v2 = *(_QWORD *)(v0 + 80);
    v3 = sub_10001A9A8(&qword_1010EF3B8);
    v4 = sub_10001A9E8(v3, (uint64_t)qword_1011B6AA8);
    v5 = type metadata accessor for UUID(0);
    == infix<A>(_:_:)(v4, v2, v5, &protocol witness table for UUID, &protocol witness table for String);
    if (qword_1010E9A38 != -1)
      swift_once(&qword_1010E9A38, sub_1001F52E8);
    v6 = *(_QWORD *)(v0 + 136);
    v7 = *(_QWORD *)(v0 + 120);
    v8 = *(_QWORD *)(v0 + 128);
    v9 = *(_QWORD *)(v0 + 112);
    v10 = *(_QWORD *)(v0 + 88);
    v11 = sub_10001A9E8(v3, (uint64_t)qword_1011B6AC0);
    == infix<A>(_:_:)(v11, v10, v5, &protocol witness table for UUID, &protocol witness table for String);
    && infix(_:_:)(v6, v8);
    v12 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
    v12(v8, v9);
    v12(v6, v9);
    if (qword_1010E9A48 != -1)
      swift_once(&qword_1010E9A48, sub_1001F5408);
    v52 = (_QWORD *)(v0 + 16);
    v13 = *(_QWORD *)(v0 + 144);
    v14 = *(_QWORD *)(v0 + 136);
    v15 = *(_QWORD *)(v0 + 112);
    v16 = sub_10001A9A8(&qword_1010EF3E8);
    v17 = sub_10001A9E8(v16, (uint64_t)qword_1011B6AF0);
    *(_BYTE *)(v0 + 192) = 0;
    v18 = sub_10012C49C();
    == infix<A>(_:_:)(v17, v0 + 192, &type metadata for UInt8, v18, &protocol witness table for Int64);
    && infix(_:_:)(v13, v14);
    v12(v14, v15);
    v12(v13, v15);
    if (qword_1010E9A40 != -1)
      swift_once(&qword_1010E9A40, sub_1001F537C);
    v19 = *(_QWORD *)(v0 + 184);
    v21 = *(_QWORD *)(v0 + 160);
    v20 = *(_QWORD *)(v0 + 168);
    v23 = *(_QWORD *)(v0 + 144);
    v22 = *(_QWORD *)(v0 + 152);
    v24 = *(_QWORD *)(v0 + 112);
    v49 = *(_QWORD *)(v0 + 176);
    v25 = *(_QWORD *)(v0 + 96);
    v26 = sub_10001A9A8(&qword_1010EF430);
    v27 = sub_10001A9E8(v26, (uint64_t)qword_1011B6AD8);
    *(_QWORD *)(v0 + 72) = v25;
    v28 = sub_10012C5BC();
    == infix<A>(_:_:)(v27, v0 + 72, &type metadata for UInt64, v28, &protocol witness table for Int64);
    && infix(_:_:)(v22, v23);
    v12(v23, v24);
    v12(v22, v24);
    QueryType.filter(_:)(v21, v20, &protocol witness table for Table);
    v12(v21, v24);
    *(_QWORD *)(v0 + 40) = v20;
    *(_QWORD *)(v0 + 48) = &protocol witness table for Table;
    v29 = sub_100018F08(v52);
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(v49 + 16))(v29, v19, v20);
    sub_1004775F8((uint64_t)v52);
    v30 = *(_QWORD *)(v0 + 176);
    v31 = *(_QWORD *)(v0 + 184);
    v32 = *(_QWORD *)(v0 + 168);
    v42 = *(_QWORD *)(v0 + 152);
    v41 = *(_QWORD *)(v0 + 160);
    v43 = *(_QWORD *)(v0 + 144);
    v50 = *(_QWORD *)(v0 + 136);
    v51 = *(_QWORD *)(v0 + 128);
    v44 = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v52);
    dispatch thunk of _AnySequenceBox._makeIterator()(v44);
    v45 = swift_release();
    dispatch thunk of _AnyIteratorBoxBase.next()(v45);
    swift_release();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v31, v32);
    v47 = *(_QWORD *)(v0 + 56);
    v46 = *(_QWORD *)(v0 + 64);
    swift_task_dealloc(v31);
    swift_task_dealloc(v41);
    swift_task_dealloc(v42);
    swift_task_dealloc(v43);
    swift_task_dealloc(v50);
    swift_task_dealloc(v51);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v47, v46);
  }
  else
  {
    v33 = sub_10012C434();
    v34 = swift_allocError(&type metadata for DatabaseError, v33, 0, 0);
    *(_DWORD *)v35 = 2;
    *(_BYTE *)(v35 + 4) = 1;
    swift_willThrow(v34);
    v37 = *(_QWORD *)(v0 + 152);
    v36 = *(_QWORD *)(v0 + 160);
    v39 = *(_QWORD *)(v0 + 136);
    v38 = *(_QWORD *)(v0 + 144);
    v40 = *(_QWORD *)(v0 + 128);
    swift_task_dealloc(*(_QWORD *)(v0 + 184));
    swift_task_dealloc(v36);
    swift_task_dealloc(v37);
    swift_task_dealloc(v38);
    swift_task_dealloc(v39);
    swift_task_dealloc(v40);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100B36A38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4[12] = a3;
  v4[13] = v3;
  v4[10] = a1;
  v4[11] = a2;
  v5 = sub_10001A9A8(&qword_1010EF358);
  v4[14] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[15] = v6;
  v7 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[16] = swift_task_alloc(v7);
  v4[17] = swift_task_alloc(v7);
  v4[18] = swift_task_alloc(v7);
  v4[19] = swift_task_alloc(v7);
  v4[20] = swift_task_alloc(v7);
  v8 = type metadata accessor for Table(0);
  v4[21] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v4[22] = v9;
  v4[23] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100B36AFC, v3, 0);
}

uint64_t sub_100B36AFC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;

  if (*(_QWORD *)(*(_QWORD *)(v0 + 104) + 112))
  {
    v1 = qword_1010E9A30;
    swift_retain();
    if (v1 != -1)
      swift_once(&qword_1010E9A30, sub_1001F524C);
    v2 = *(_QWORD *)(v0 + 80);
    v3 = sub_10001A9A8(&qword_1010EF3B8);
    v4 = sub_10001A9E8(v3, (uint64_t)qword_1011B6AA8);
    v5 = type metadata accessor for UUID(0);
    == infix<A>(_:_:)(v4, v2, v5, &protocol witness table for UUID, &protocol witness table for String);
    if (qword_1010E9A38 != -1)
      swift_once(&qword_1010E9A38, sub_1001F52E8);
    v6 = *(_QWORD *)(v0 + 136);
    v7 = *(_QWORD *)(v0 + 120);
    v8 = *(_QWORD *)(v0 + 128);
    v9 = *(_QWORD *)(v0 + 112);
    v10 = *(_QWORD *)(v0 + 88);
    v11 = sub_10001A9E8(v3, (uint64_t)qword_1011B6AC0);
    == infix<A>(_:_:)(v11, v10, v5, &protocol witness table for UUID, &protocol witness table for String);
    && infix(_:_:)(v6, v8);
    v12 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
    v12(v8, v9);
    v12(v6, v9);
    if (qword_1010E9A48 != -1)
      swift_once(&qword_1010E9A48, sub_1001F5408);
    v52 = (_QWORD *)(v0 + 16);
    v13 = *(_QWORD *)(v0 + 144);
    v14 = *(_QWORD *)(v0 + 136);
    v15 = *(_QWORD *)(v0 + 112);
    v16 = sub_10001A9A8(&qword_1010EF3E8);
    v17 = sub_10001A9E8(v16, (uint64_t)qword_1011B6AF0);
    *(_BYTE *)(v0 + 192) = 1;
    v18 = sub_10012C49C();
    == infix<A>(_:_:)(v17, v0 + 192, &type metadata for UInt8, v18, &protocol witness table for Int64);
    && infix(_:_:)(v13, v14);
    v12(v14, v15);
    v12(v13, v15);
    if (qword_1010E9A40 != -1)
      swift_once(&qword_1010E9A40, sub_1001F537C);
    v19 = *(_QWORD *)(v0 + 184);
    v21 = *(_QWORD *)(v0 + 160);
    v20 = *(_QWORD *)(v0 + 168);
    v23 = *(_QWORD *)(v0 + 144);
    v22 = *(_QWORD *)(v0 + 152);
    v24 = *(_QWORD *)(v0 + 112);
    v49 = *(_QWORD *)(v0 + 176);
    v25 = *(_QWORD *)(v0 + 96);
    v26 = sub_10001A9A8(&qword_1010EF430);
    v27 = sub_10001A9E8(v26, (uint64_t)qword_1011B6AD8);
    *(_QWORD *)(v0 + 72) = v25;
    v28 = sub_10012C5BC();
    == infix<A>(_:_:)(v27, v0 + 72, &type metadata for UInt64, v28, &protocol witness table for Int64);
    && infix(_:_:)(v22, v23);
    v12(v23, v24);
    v12(v22, v24);
    QueryType.filter(_:)(v21, v20, &protocol witness table for Table);
    v12(v21, v24);
    *(_QWORD *)(v0 + 40) = v20;
    *(_QWORD *)(v0 + 48) = &protocol witness table for Table;
    v29 = sub_100018F08(v52);
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(v49 + 16))(v29, v19, v20);
    sub_1004775F8((uint64_t)v52);
    v30 = *(_QWORD *)(v0 + 176);
    v31 = *(_QWORD *)(v0 + 184);
    v32 = *(_QWORD *)(v0 + 168);
    v42 = *(_QWORD *)(v0 + 152);
    v41 = *(_QWORD *)(v0 + 160);
    v43 = *(_QWORD *)(v0 + 144);
    v50 = *(_QWORD *)(v0 + 136);
    v51 = *(_QWORD *)(v0 + 128);
    v44 = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v52);
    dispatch thunk of _AnySequenceBox._makeIterator()(v44);
    v45 = swift_release();
    dispatch thunk of _AnyIteratorBoxBase.next()(v45);
    swift_release();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v31, v32);
    v47 = *(_QWORD *)(v0 + 56);
    v46 = *(_QWORD *)(v0 + 64);
    swift_task_dealloc(v31);
    swift_task_dealloc(v41);
    swift_task_dealloc(v42);
    swift_task_dealloc(v43);
    swift_task_dealloc(v50);
    swift_task_dealloc(v51);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v47, v46);
  }
  else
  {
    v33 = sub_10012C434();
    v34 = swift_allocError(&type metadata for DatabaseError, v33, 0, 0);
    *(_DWORD *)v35 = 2;
    *(_BYTE *)(v35 + 4) = 1;
    swift_willThrow(v34);
    v37 = *(_QWORD *)(v0 + 152);
    v36 = *(_QWORD *)(v0 + 160);
    v39 = *(_QWORD *)(v0 + 136);
    v38 = *(_QWORD *)(v0 + 144);
    v40 = *(_QWORD *)(v0 + 128);
    swift_task_dealloc(*(_QWORD *)(v0 + 184));
    swift_task_dealloc(v36);
    swift_task_dealloc(v37);
    swift_task_dealloc(v38);
    swift_task_dealloc(v39);
    swift_task_dealloc(v40);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100B36FB8()
{
  type metadata accessor for OwnedBeaconRecord(0);
  return sub_100C6F9A8() & 1;
}

uint64_t sub_100B36FEC(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD), const char *a4)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;

  v7 = a3(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v21 - v8;
  if (qword_1010E9F38 != -1)
    swift_once(&qword_1010E9F38, sub_1007A03F4);
  v10 = type metadata accessor for Logger(0);
  sub_10001A9E8(v10, (uint64_t)qword_1011B7660);
  v11 = sub_10005972C(a1, (uint64_t)v9, a3);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.default.getter(v12);
  if (os_log_type_enabled(v12, v13))
  {
    v14 = swift_slowAlloc(22, -1);
    v15 = swift_slowAlloc(32, -1);
    *(_DWORD *)v14 = 141558275;
    v23 = 1752392040;
    v24 = v15;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, &v24, v14 + 4, v14 + 12);
    *(_WORD *)(v14 + 12) = 2081;
    v22 = a4;
    v16 = type metadata accessor for UUID(0);
    v17 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v18 = dispatch thunk of CustomStringConvertible.description.getter(v16, v17);
    v23 = sub_100016940(v18, v19, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, &v24, v14 + 14, v14 + 22);
    swift_bridgeObjectRelease();
    sub_1000126B0((uint64_t)v9, a3);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, v22, (uint8_t *)v14, 0x16u);
    swift_arrayDestroy(v15, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v15, -1, -1);
    swift_slowDealloc(v14, -1, -1);
  }
  else
  {
    sub_1000126B0((uint64_t)v9, a3);
  }

  return sub_10085A268();
}

uint64_t sub_100B37228(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;

  v3[33] = a2;
  v3[34] = a3;
  v3[32] = a1;
  v4 = type metadata accessor for Endianness(0);
  v3[35] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Date(0);
  v3[36] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v3[37] = v6;
  v3[38] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10001A9A8(&qword_1010ED860);
  v3[39] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for UUID(0);
  v3[40] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v3[41] = v9;
  v10 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[42] = swift_task_alloc(v10);
  v3[43] = swift_task_alloc(v10);
  v11 = type metadata accessor for StandaloneBeacon(0);
  v3[44] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v3[45] = v12;
  v3[46] = swift_task_alloc((*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for ManagedCBPeripheralBeaconInfo(0);
  v3[47] = v13;
  v14 = *(_QWORD *)(v13 - 8);
  v3[48] = v14;
  v3[49] = swift_task_alloc((*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for SharedBeaconRecord(0);
  v3[50] = v15;
  v16 = *(_QWORD *)(v15 - 8);
  v3[51] = v16;
  v17 = (*(_QWORD *)(v16 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[52] = swift_task_alloc(v17);
  v3[53] = swift_task_alloc(v17);
  v3[54] = swift_task_alloc(v17);
  v3[55] = swift_task_alloc(v17);
  v3[56] = swift_task_alloc(v17);
  return swift_task_switch(sub_100B373B4, 0, 0);
}

uint64_t sub_100B373B4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  v2 = v0[33];
  v1 = v0[34];
  v3 = v0[32];
  v0[26] = _swiftEmptyArrayStorage;
  v4 = (_QWORD *)swift_allocObject(&unk_1010AEA80, 40, 7);
  v0[57] = v4;
  v4[2] = v3;
  v4[3] = v2;
  v4[4] = v1;
  v5 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  swift_retain();
  swift_retain();
  v6 = (_QWORD *)swift_task_alloc(v5);
  v0[58] = v6;
  v7 = sub_10001A9A8(&qword_1010EE190);
  v0[59] = v7;
  *v6 = v0;
  v6[1] = sub_100B3748C;
  return unsafeBlocking<A>(_:)(v0 + 28, sub_100B4B010, v4, v7);
}

uint64_t sub_100B3748C()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  v1 = *(_QWORD **)v0;
  v2 = *(_QWORD **)v0;
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 464));
  swift_release();
  v3 = v1[28];
  v1[27] = v3;
  v1 += 27;
  v1[33] = v3;
  v4 = (_QWORD *)swift_task_alloc(async function pointer to Sequence.asyncFilter(_:)[1]);
  v1[34] = v4;
  v5 = sub_1000193A4((unint64_t *)&unk_1010F48D8, &qword_1010EE190, (const char *)&protocol conformance descriptor for [A]);
  v1[35] = v5;
  *v4 = v2;
  v4[1] = sub_100B37540;
  return Sequence.asyncFilter(_:)(&unk_101115CE8, 0, v1[32], v5);
}

uint64_t sub_100B37540(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 488);
  *(_QWORD *)(*(_QWORD *)v1 + 504) = a1;
  swift_task_dealloc(v2);
  swift_bridgeObjectRelease();
  return swift_task_switch(sub_100B375A4, 0, 0);
}

uint64_t sub_100B375A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  __int128 v5;

  v1 = *(_QWORD *)(v0 + 272);
  v5 = *(_OWORD *)(v0 + 256);
  *(_QWORD *)(v0 + 200) = *(_QWORD *)(v0 + 504);
  v2 = swift_task_alloc(48);
  *(_QWORD *)(v0 + 512) = v2;
  *(_OWORD *)(v2 + 16) = v5;
  *(_QWORD *)(v2 + 32) = v1;
  v3 = (_QWORD *)swift_task_alloc(async function pointer to Sequence.asyncCompactMap<A>(_:)[1]);
  *(_QWORD *)(v0 + 520) = v3;
  *v3 = v0;
  v3[1] = sub_100B37644;
  return Sequence.asyncCompactMap<A>(_:)(&unk_101115CF8, v2, *(_QWORD *)(v0 + 472), *(_QWORD *)(v0 + 376), *(_QWORD *)(v0 + 496));
}

uint64_t sub_100B37644(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 520);
  v5 = *(_QWORD *)(*v2 + 512);
  *(_QWORD *)(v3 + 528) = a1;
  *(_QWORD *)(v3 + 536) = v1;
  swift_task_dealloc(v4);
  swift_bridgeObjectRelease();
  swift_task_dealloc(v5);
  return swift_task_switch(sub_100B376C0, 0, 0);
}

uint64_t sub_100B376C0()
{
  uint64_t v0;
  uint64_t My;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t result;
  _QWORD *v11;
  uint64_t (*v12)(void);

  sub_100304A84(*(_QWORD *)(v0 + 528));
  My = type metadata accessor for Feature.FindMy(0);
  *(_QWORD *)(v0 + 160) = My;
  *(_QWORD *)(v0 + 168) = sub_100006204((unint64_t *)&qword_1010EE1B0, (uint64_t (*)(uint64_t))&type metadata accessor for Feature.FindMy, (uint64_t)&protocol conformance descriptor for Feature.FindMy);
  v2 = sub_100018F08((_QWORD *)(v0 + 136));
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(My - 8) + 104))(v2, enum case for Feature.FindMy.spPlaySoundAll(_:), My);
  LOBYTE(My) = isFeatureEnabled(_:)(v0 + 136);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 136));
  if ((My & 1) != 0)
  {
    v4 = *(_QWORD *)(v0 + 264);
    v3 = *(_QWORD *)(v0 + 272);
    v5 = *(_QWORD *)(v0 + 256);
    v6 = (_QWORD *)swift_allocObject(&unk_1010AEAA8, 40, 7);
    *(_QWORD *)(v0 + 544) = v6;
    v6[2] = v5;
    v6[3] = v4;
    v6[4] = v3;
    v7 = async function pointer to unsafeBlocking<A>(_:)[1];
    swift_retain();
    swift_retain();
    swift_retain();
    v8 = (_QWORD *)swift_task_alloc(v7);
    *(_QWORD *)(v0 + 552) = v8;
    v9 = sub_10001A9A8(&qword_1010ECA48);
    *(_QWORD *)(v0 + 560) = v9;
    *v8 = v0;
    v8[1] = sub_100B378F0;
    return unsafeBlocking<A>(_:)(v0 + 240, sub_100B4B0B8, v6, v9);
  }
  else
  {
    *(_QWORD *)(v0 + 608) = *(_QWORD *)(v0 + 536);
    if (qword_1010EA5B0 != -1)
      swift_once(&qword_1010EA5B0, sub_100D37418);
    swift_beginAccess(&xmmword_10111E6C0, v0 + 176, 0, 0);
    result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 56, &qword_1010EE220);
    if (*(_QWORD *)(v0 + 80))
    {
      sub_10000F9FC((__int128 *)(v0 + 56), v0 + 96);
      sub_10001AA44((_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 120));
      v12 = (uint64_t (*)(void))((char *)&dword_1010EBC70 + dword_1010EBC70);
      v11 = (_QWORD *)swift_task_alloc(unk_1010EBC74);
      *(_QWORD *)(v0 + 616) = v11;
      *v11 = v0;
      v11[1] = sub_100B37F9C;
      return v12();
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

uint64_t sub_100B378F0()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 552));
  swift_release();
  return swift_task_switch(sub_100B37950, 0, 0);
}

uint64_t sub_100B37950()
{
  uint64_t v0;
  uint64_t result;
  _QWORD *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50[2];

  result = *(_QWORD *)(v0 + 240);
  v2 = _swiftEmptyArrayStorage;
  v45 = *(_QWORD *)(result + 16);
  if (!v45)
  {
LABEL_31:
    *(_QWORD *)(v0 + 568) = v2;
    v39 = *(_QWORD *)(v0 + 272);
    v48 = *(_OWORD *)(v0 + 256);
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 232) = v2;
    v40 = swift_task_alloc(48);
    *(_QWORD *)(v0 + 576) = v40;
    *(_OWORD *)(v40 + 16) = v48;
    *(_QWORD *)(v40 + 32) = v39;
    v41 = (_QWORD *)swift_task_alloc(async function pointer to Sequence.asyncCompactMap<A>(_:)[1]);
    *(_QWORD *)(v0 + 584) = v41;
    v42 = sub_1000193A4(&qword_101115D10, &qword_1010ECA48, (const char *)&protocol conformance descriptor for [A]);
    *v41 = v0;
    v41[1] = sub_100B37E1C;
    return Sequence.asyncCompactMap<A>(_:)(&unk_101115D08, v40, *(_QWORD *)(v0 + 560), *(_QWORD *)(v0 + 376), v42);
  }
  v3 = 0;
  v4 = *(_QWORD *)(v0 + 400);
  v44 = *(_QWORD *)(v0 + 408);
  v46 = v4;
  v43 = *(_QWORD *)(v0 + 240);
  while (v3 < *(_QWORD *)(result + 16))
  {
    v47 = v2;
    v9 = *(_QWORD *)(v0 + 440);
    v8 = *(_QWORD *)(v0 + 448);
    v10 = (*(unsigned __int8 *)(v44 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v44 + 80);
    v11 = *(_QWORD *)(v44 + 72);
    sub_10005972C(result + v10 + v11 * v3, v8, type metadata accessor for SharedBeaconRecord);
    v12 = *(_QWORD *)(v8 + *(int *)(v4 + 44));
    sub_10005972C(v8, v9, type metadata accessor for SharedBeaconRecord);
    if (v12 == 76)
    {
      v13 = *(_QWORD *)(v0 + 440);
      v14 = *(_QWORD *)(v13 + *(int *)(v4 + 44));
      sub_10005972C(v13, *(_QWORD *)(v0 + 432), type metadata accessor for SharedBeaconRecord);
      if (v14 != 76)
        goto LABEL_3;
      if (qword_1010EA5C0 != -1)
        swift_once(&qword_1010EA5C0, sub_100D3ADF0);
      v15 = qword_1011B8460;
      if (*(_QWORD *)(qword_1011B8460 + 16))
      {
        v16 = *(_QWORD *)(*(_QWORD *)(v0 + 432) + *(int *)(v4 + 48));
        v17 = static Hasher._hash(seed:_:)(*(_QWORD *)(qword_1011B8460 + 40), v16);
        v18 = -1 << *(_BYTE *)(v15 + 32);
        v19 = v17 & ~v18;
        if (((*(_QWORD *)(v15 + 56 + ((v19 >> 3) & 0xFFFFFFFFFFFFF8)) >> v19) & 1) != 0)
        {
          v20 = *(_QWORD *)(v15 + 48);
          if (*(_QWORD *)(v20 + 8 * v19) == v16)
          {
LABEL_3:
            v6 = *(_QWORD *)(v0 + 440);
            v5 = *(_QWORD *)(v0 + 448);
            v7 = *(_QWORD *)(v0 + 424);
            sub_1000126B0(*(_QWORD *)(v0 + 432), type metadata accessor for SharedBeaconRecord);
            sub_1000126B0(v6, type metadata accessor for SharedBeaconRecord);
            sub_10005972C(v5, v7, type metadata accessor for SharedBeaconRecord);
            sub_1000126B0(*(_QWORD *)(v0 + 424), type metadata accessor for SharedBeaconRecord);
            goto LABEL_4;
          }
          v21 = ~v18;
          while (1)
          {
            v19 = (v19 + 1) & v21;
            if (((*(_QWORD *)(v15 + 56 + ((v19 >> 3) & 0xFFFFFFFFFFFFF8)) >> v19) & 1) == 0)
              break;
            if (*(_QWORD *)(v20 + 8 * v19) == v16)
              goto LABEL_3;
          }
        }
      }
      v27 = *(_QWORD *)(v0 + 440);
      v26 = *(_QWORD *)(v0 + 448);
      v28 = *(_QWORD *)(v0 + 424);
      sub_1000126B0(*(_QWORD *)(v0 + 432), type metadata accessor for SharedBeaconRecord);
      sub_1000126B0(v27, type metadata accessor for SharedBeaconRecord);
      v24 = v26;
      v25 = v28;
      v4 = v46;
    }
    else
    {
      v22 = *(_QWORD *)(v0 + 448);
      v23 = *(_QWORD *)(v0 + 424);
      sub_1000126B0(*(_QWORD *)(v0 + 440), type metadata accessor for SharedBeaconRecord);
      v24 = v22;
      v25 = v23;
    }
    sub_10005972C(v24, v25, type metadata accessor for SharedBeaconRecord);
    v29 = *(_QWORD *)(v0 + 424);
    v30 = *(_QWORD *)(v29 + *(int *)(v4 + 44));
    v31 = *(_QWORD *)(v29 + *(int *)(v4 + 48));
    if (qword_1010E9D08 != -1)
      swift_once(&qword_1010E9D08, sub_10059A6E0);
    OS_dispatch_queue.sync<A>(execute:)(sub_100003D88, qword_1011B71A8, &type metadata for Configuration);
    v32 = sub_100C1B8B8(*(_QWORD *)(v0 + 248));
    swift_bridgeObjectRelease();
    v33 = sub_100CA7F40(v32);
    swift_bridgeObjectRelease();
    v49 = v33;
    sub_100A0A1F4(v50, 8212);
    sub_100A0A1F4(v50, 8213);
    sub_100A0A1F4(v50, 8216);
    sub_100A0A1F4(v50, 8219);
    sub_100A0A1F4(v50, 8220);
    sub_100A0A1F4(v50, 8223);
    v34 = *(_QWORD *)(v0 + 424);
    if (v30 != 76)
    {
      swift_bridgeObjectRelease();
      sub_1000126B0(v34, type metadata accessor for SharedBeaconRecord);
LABEL_26:
      sub_1000126EC(*(_QWORD *)(v0 + 448), *(_QWORD *)(v0 + 416), type metadata accessor for SharedBeaconRecord);
      v2 = v47;
      if ((swift_isUniquelyReferenced_nonNull_native(v47) & 1) == 0)
      {
        sub_10009A654(0, v47[2] + 1, 1);
        v2 = _swiftEmptyArrayStorage;
      }
      v37 = v2[2];
      v36 = v2[3];
      v4 = v46;
      if (v37 >= v36 >> 1)
      {
        sub_10009A654(v36 > 1, v37 + 1, 1);
        v2 = _swiftEmptyArrayStorage;
      }
      v38 = *(_QWORD *)(v0 + 416);
      v2[2] = v37 + 1;
      sub_1000126EC(v38, (uint64_t)v2 + v10 + v37 * v11, type metadata accessor for SharedBeaconRecord);
      goto LABEL_5;
    }
    v35 = sub_100A07598(v31, v49);
    swift_bridgeObjectRelease();
    sub_1000126B0(v34, type metadata accessor for SharedBeaconRecord);
    if (!v35)
      goto LABEL_26;
LABEL_4:
    v4 = v46;
    v2 = v47;
    sub_1000126B0(*(_QWORD *)(v0 + 448), type metadata accessor for SharedBeaconRecord);
LABEL_5:
    result = v43;
    if (++v3 == v45)
      goto LABEL_31;
  }
  __break(1u);
  return result;
}

uint64_t sub_100B37E1C(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 584);
  v5 = *(_QWORD *)(*v2 + 576);
  *(_QWORD *)(v3 + 592) = a1;
  *(_QWORD *)(v3 + 600) = v1;
  swift_task_dealloc(v4);
  swift_release();
  swift_task_dealloc(v5);
  return swift_task_switch(sub_100B37E9C, 0, 0);
}

uint64_t sub_100B37E9C()
{
  uint64_t v0;
  uint64_t result;
  _QWORD *v2;
  uint64_t (__cdecl *v3)();

  sub_100304A84(*(_QWORD *)(v0 + 592));
  *(_QWORD *)(v0 + 608) = *(_QWORD *)(v0 + 600);
  if (qword_1010EA5B0 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v0 + 176, 0, 0);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 56, &qword_1010EE220);
  if (*(_QWORD *)(v0 + 80))
  {
    sub_10000F9FC((__int128 *)(v0 + 56), v0 + 96);
    sub_10001AA44((_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 120));
    v3 = (uint64_t (__cdecl *)())((char *)&dword_1010EBC70 + dword_1010EBC70);
    v2 = (_QWORD *)swift_task_alloc(unk_1010EBC74);
    *(_QWORD *)(v0 + 616) = v2;
    *v2 = v0;
    v2[1] = sub_100B37F9C;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100B37F9C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 616);
  *(_QWORD *)(*(_QWORD *)v1 + 624) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100B37FF8, 0, 0);
}

uint64_t sub_100B37FF8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v1 = *(_QWORD *)(v0 + 624);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 96));
  if (v1)
    return swift_task_switch(sub_100B381B8, *(_QWORD *)(v0 + 624), 0);
  if (qword_1010E9F38 != -1)
    swift_once(&qword_1010E9F38, sub_1007A03F4);
  v3 = type metadata accessor for Logger(0);
  v4 = sub_10001A9E8(v3, (uint64_t)qword_1011B7660);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.error.getter(v5);
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "No StandaloneBeaconService available!", v7, 2u);
    swift_slowDealloc(v7, -1, -1);
  }

  v8 = *(_QWORD *)(v0 + 440);
  v10 = *(_QWORD *)(v0 + 424);
  v9 = *(_QWORD *)(v0 + 432);
  v11 = *(_QWORD *)(v0 + 416);
  v12 = *(_QWORD *)(v0 + 392);
  v13 = *(_QWORD *)(v0 + 368);
  v15 = *(_QWORD *)(v0 + 336);
  v14 = *(_QWORD *)(v0 + 344);
  v16 = *(_QWORD *)(v0 + 312);
  v17 = *(_QWORD *)(v0 + 304);
  v18 = *(_QWORD *)(v0 + 280);
  v19 = *(_QWORD *)(v0 + 208);
  swift_task_dealloc(*(_QWORD *)(v0 + 448));
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v19);
}

uint64_t sub_100B381B8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t (*v7)();

  v1 = v0[76];
  v2 = *(_QWORD *)(v0[78] + 128);
  v3 = v2 + OBJC_IVAR____TtC12searchpartyd24StandaloneBeaconDatabase_standaloneBeacon;
  v4 = type metadata accessor for Table(0);
  v0[5] = v4;
  v0[6] = &protocol witness table for Table;
  v5 = sub_100018F08(v0 + 2);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(v5, v3, v4);
  sub_100B8B834((uint64_t)(v0 + 2), v2);
  v0[79] = v1;
  v6 = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2);
  if (v1)
  {
    v7 = sub_100B38764;
  }
  else
  {
    v0[80] = dispatch thunk of _AnySequenceBox.__copyToContiguousArray()(v6);
    swift_release();
    v7 = sub_100B3828C;
  }
  return swift_task_switch(v7, 0, 0);
}

uint64_t sub_100B3828C()
{
  uint64_t v0;
  uint64_t v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uid_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v1 = *(_QWORD *)(v0 + 640);
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v3 = *(_QWORD *)(v0 + 360);
    v24 = *(_QWORD *)(v0 + 328);
    v26 = *(_QWORD *)(v0 + 352);
    v22 = *(_QWORD *)(v0 + 296);
    sub_10009B3DC(0, v2, 0);
    v4 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v5 = *(_QWORD *)(v0 + 368);
    v6 = *(_QWORD *)(v0 + 336);
    v7 = *(_QWORD *)(v0 + 312);
    v8 = *(_QWORD *)(v0 + 320);
    v9 = *(_QWORD *)(v0 + 304);
    v10 = *(_QWORD *)(v0 + 288);
    sub_10005972C(v4, v5, type metadata accessor for StandaloneBeacon);
    v11 = getuid();
    sub_100A06500(v11);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 16))(v6, v5, v8);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v24 + 56))(v7, 1, 1, v8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v22 + 16))(v9, v5 + *(int *)(v26 + 32), v10);
    __asm { BR              X10 }
  }
  swift_release();
  sub_100304A84((uint64_t)_swiftEmptyArrayStorage);
  swift_release();
  v12 = *(_QWORD *)(v0 + 440);
  v14 = *(_QWORD *)(v0 + 424);
  v13 = *(_QWORD *)(v0 + 432);
  v15 = *(_QWORD *)(v0 + 416);
  v16 = *(_QWORD *)(v0 + 392);
  v17 = *(_QWORD *)(v0 + 368);
  v19 = *(_QWORD *)(v0 + 336);
  v18 = *(_QWORD *)(v0 + 344);
  v20 = *(_QWORD *)(v0 + 312);
  v23 = *(_QWORD *)(v0 + 304);
  v25 = *(_QWORD *)(v0 + 280);
  v27 = *(_QWORD *)(v0 + 208);
  swift_task_dealloc(*(_QWORD *)(v0 + 448));
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v23);
  swift_task_dealloc(v25);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v27);
}

uint64_t sub_100B38764()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v1 = *(_QWORD *)(v0 + 632);
  swift_release(*(_QWORD *)(v0 + 624));
  swift_errorRelease(v1);
  v2 = *(_QWORD *)(v0 + 440);
  v4 = *(_QWORD *)(v0 + 424);
  v3 = *(_QWORD *)(v0 + 432);
  v5 = *(_QWORD *)(v0 + 416);
  v6 = *(_QWORD *)(v0 + 392);
  v7 = *(_QWORD *)(v0 + 368);
  v9 = *(_QWORD *)(v0 + 336);
  v8 = *(_QWORD *)(v0 + 344);
  v10 = *(_QWORD *)(v0 + 312);
  v12 = *(_QWORD *)(v0 + 304);
  v13 = *(_QWORD *)(v0 + 280);
  v14 = *(_QWORD *)(v0 + 208);
  swift_task_dealloc(*(_QWORD *)(v0 + 448));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v14);
}

uint64_t sub_100B3884C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;

  v5[17] = a4;
  v5[18] = a5;
  v5[15] = a2;
  v5[16] = a3;
  v5[14] = a1;
  v6 = type metadata accessor for Date(0);
  v5[19] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[20] = v7;
  v5[21] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for OwnedBeaconRecord(0);
  v5[22] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v5[23] = v9;
  v10 = *(_QWORD *)(v9 + 64);
  v5[24] = v10;
  v5[25] = swift_task_alloc((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10001A9A8((uint64_t *)&unk_1010FF7F0);
  v5[26] = v11;
  v5[27] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v11 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for OwnedBeaconGroup(0);
  v5[28] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v5[29] = v13;
  v5[30] = swift_task_alloc((*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = (*(_QWORD *)(*(_QWORD *)(sub_10001A9A8(&qword_1010ED860) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[31] = swift_task_alloc(v14);
  v5[32] = swift_task_alloc(v14);
  v15 = type metadata accessor for UUID(0);
  v5[33] = v15;
  v16 = *(_QWORD *)(v15 - 8);
  v5[34] = v16;
  v17 = *(_QWORD *)(v16 + 64);
  v5[35] = v17;
  v18 = (v17 + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[36] = swift_task_alloc(v18);
  v5[37] = swift_task_alloc(v18);
  v5[38] = swift_task_alloc(v18);
  v19 = type metadata accessor for StableIdentifier(0);
  v5[39] = v19;
  v20 = (*(_QWORD *)(*(_QWORD *)(v19 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[40] = swift_task_alloc(v20);
  v5[41] = swift_task_alloc(v20);
  v5[42] = swift_task_alloc(v20);
  return swift_task_switch(sub_100B389EC, 0, 0);
}

void sub_100B389EC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;

  v2 = v0[41];
  v1 = v0[42];
  v3 = v0[39];
  sub_10005972C(v0[15] + *(int *)(v0[22] + 24), v1, type metadata accessor for StableIdentifier);
  sub_10005972C(v1, v2, type metadata accessor for StableIdentifier);
  v4 = (char *)sub_100B38A84 + 4 * byte_100E614A0[swift_getEnumCaseMultiPayload(v2, v3)];
  __asm { BR              X10 }
}

uint64_t sub_100B38A84()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;

  v1 = *(_QWORD *)(v0 + 112);
  sub_1000126B0(*(_QWORD *)(v0 + 336), type metadata accessor for StableIdentifier);
  swift_bridgeObjectRelease();
  v2 = type metadata accessor for ManagedCBPeripheralBeaconInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
  v3 = *(_QWORD *)(v0 + 328);
  v4 = *(_QWORD *)(v0 + 320);
  v6 = *(_QWORD *)(v0 + 296);
  v5 = *(_QWORD *)(v0 + 304);
  v7 = *(_QWORD *)(v0 + 288);
  v9 = *(_QWORD *)(v0 + 248);
  v8 = *(_QWORD *)(v0 + 256);
  v10 = *(_QWORD *)(v0 + 240);
  v11 = *(_QWORD *)(v0 + 216);
  v13 = *(_QWORD *)(v0 + 200);
  v14 = *(_QWORD *)(v0 + 168);
  swift_task_dealloc(*(_QWORD *)(v0 + 336));
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100B39150()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 368));
  swift_release();
  return swift_task_switch(sub_100B391AC, 0, 0);
}

uint64_t sub_100B391AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uid_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(uint64_t, uint64_t, uint64_t);
  int *v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  uint64_t v60;

  v1 = *(_QWORD *)(v0 + 224);
  v2 = *(_QWORD *)(v0 + 232);
  v3 = *(_QWORD *)(v0 + 216);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 272) + 8))(*(_QWORD *)(v0 + 304), *(_QWORD *)(v0 + 264));
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_100004048(*(_QWORD *)(v0 + 216), (uint64_t *)&unk_1010FF7F0);
    v5 = *(_QWORD *)(v0 + 136);
    v4 = *(_QWORD *)(v0 + 144);
    v7 = *(_QWORD *)(v0 + 192);
    v6 = *(_QWORD *)(v0 + 200);
    v8 = *(_QWORD *)(v0 + 184);
    v9 = *(_QWORD *)(v0 + 128);
    sub_10005972C(*(_QWORD *)(v0 + 120), v6, type metadata accessor for OwnedBeaconRecord);
    v10 = *(unsigned __int8 *)(v8 + 80);
    v11 = (v10 + 40) & ~v10;
    v12 = (_QWORD *)swift_allocObject(&unk_1010AEAF8, v11 + v7, v10 | 7);
    *(_QWORD *)(v0 + 376) = v12;
    v12[2] = v9;
    v12[3] = v5;
    v12[4] = v4;
    sub_1000126EC(v6, (uint64_t)v12 + v11, type metadata accessor for OwnedBeaconRecord);
    v13 = async function pointer to unsafeBlocking<A>(_:)[1];
    swift_retain();
    swift_retain();
    swift_retain();
    v14 = (_QWORD *)swift_task_alloc(v13);
    *(_QWORD *)(v0 + 384) = v14;
    v15 = sub_10001A9A8(&qword_1010F6350);
    *v14 = v0;
    v14[1] = sub_100B39584;
    return unsafeBlocking<A>(_:)(v0 + 80, sub_100B4B5C8, v12, v15);
  }
  v17 = *(_QWORD *)(v0 + 240);
  v18 = *(_QWORD *)(v0 + 224);
  sub_1000126EC(*(_QWORD *)(v0 + 216), v17, type metadata accessor for OwnedBeaconGroup);
  v19 = (uint64_t *)(v17 + *(int *)(v18 + 36));
  v53 = *v19;
  v54 = v19[1];
  swift_bridgeObjectRetain(v54);
  sub_1000126B0(v17, type metadata accessor for OwnedBeaconGroup);
  v20 = *(_QWORD *)(v0 + 288);
  v22 = *(_QWORD *)(v0 + 264);
  v21 = *(_QWORD *)(v0 + 272);
  v23 = *(_QWORD *)(v0 + 248);
  v24 = *(int **)(v0 + 176);
  v25 = *(_QWORD *)(v0 + 120);
  v26 = v25 + *(int *)(v0 + 392);
  v27 = *(_QWORD *)(v0 + 160);
  v55 = *(_QWORD *)(v0 + 152);
  v58 = *(_QWORD *)(v0 + 168);
  v28 = getuid();
  sub_100A06500(v28);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 16))(v20, v25 + v24[5], v22);
  sub_10000F9B8(v26, v23, &qword_1010ED860);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v27 + 16))(v58, v25 + v24[8], v55);
  v29 = *(_QWORD *)(v25 + v24[16]);
  if (v29 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (v29 <= 0x7FFFFFFF)
  {
    v59 = *(_BYTE *)(v0 + 396);
    v56 = *(_QWORD *)(v0 + 352);
    v31 = *(_QWORD *)(v0 + 288);
    v30 = *(_QWORD *)(v0 + 296);
    v33 = *(_QWORD *)(v0 + 264);
    v32 = *(_QWORD *)(v0 + 272);
    v34 = *(_QWORD *)(v0 + 248);
    v35 = *(_QWORD *)(v0 + 160);
    v51 = *(_QWORD *)(v0 + 168);
    v52 = *(_QWORD *)(v0 + 344);
    v36 = *(_QWORD *)(v0 + 152);
    v37 = *(_QWORD *)(v0 + 112);
    sub_1000126B0(*(_QWORD *)(v0 + 336), type metadata accessor for StableIdentifier);
    v38 = *(void (**)(uint64_t, uint64_t, uint64_t))(v32 + 32);
    v38(v37, v30, v33);
    v39 = (int *)type metadata accessor for ManagedCBPeripheralBeaconInfo(0);
    v38(v37 + v39[5], v31, v33);
    sub_100005CF0(v34, v37 + v39[6], &qword_1010ED860);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v35 + 32))(v37 + v39[7], v51, v36);
    v40 = (_QWORD *)(v37 + v39[8]);
    *v40 = v53;
    v40[1] = v54;
    *(_DWORD *)(v37 + v39[9]) = v29;
    v41 = (_QWORD *)(v37 + v39[10]);
    *v41 = v52;
    v41[1] = v56;
    *(_BYTE *)(v37 + v39[11]) = 1;
    *(_BYTE *)(v37 + v39[12]) = v59;
    (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(*((_QWORD *)v39 - 1) + 56))(v37, 0, 1, v39);
    v42 = *(_QWORD *)(v0 + 328);
    v43 = *(_QWORD *)(v0 + 320);
    v45 = *(_QWORD *)(v0 + 296);
    v44 = *(_QWORD *)(v0 + 304);
    v46 = *(_QWORD *)(v0 + 288);
    v48 = *(_QWORD *)(v0 + 248);
    v47 = *(_QWORD *)(v0 + 256);
    v49 = *(_QWORD *)(v0 + 240);
    v50 = *(_QWORD *)(v0 + 216);
    v57 = *(_QWORD *)(v0 + 200);
    v60 = *(_QWORD *)(v0 + 168);
    swift_task_dealloc(*(_QWORD *)(v0 + 336));
    swift_task_dealloc(v42);
    swift_task_dealloc(v43);
    swift_task_dealloc(v44);
    swift_task_dealloc(v45);
    swift_task_dealloc(v46);
    swift_task_dealloc(v47);
    swift_task_dealloc(v48);
    swift_task_dealloc(v49);
    swift_task_dealloc(v50);
    swift_task_dealloc(v57);
    swift_task_dealloc(v60);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  __break(1u);
  return result;
}

uint64_t sub_100B39584()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 384));
  swift_release();
  return swift_task_switch(sub_100B395E0, 0, 0);
}

uint64_t sub_100B395E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uid_t v9;
  uint64_t result;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t, uint64_t);
  int *v23;
  uint64_t *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;

  v37 = *(_QWORD *)(v0 + 80);
  v39 = *(_QWORD *)(v0 + 88);
  v1 = *(_QWORD *)(v0 + 288);
  v2 = *(_QWORD *)(v0 + 264);
  v3 = *(_QWORD *)(v0 + 272);
  v4 = *(_QWORD *)(v0 + 248);
  v5 = *(int **)(v0 + 176);
  v6 = *(_QWORD *)(v0 + 120);
  v7 = v6 + *(int *)(v0 + 392);
  v8 = *(_QWORD *)(v0 + 160);
  v41 = *(_QWORD *)(v0 + 152);
  v44 = *(_QWORD *)(v0 + 168);
  v9 = getuid();
  sub_100A06500(v9);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v1, v6 + v5[5], v2);
  sub_10000F9B8(v7, v4, &qword_1010ED860);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v44, v6 + v5[8], v41);
  v11 = *(_QWORD *)(v6 + v5[16]);
  if (v11 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_10;
  }
  if (v11 > 0x7FFFFFFF)
  {
LABEL_10:
    __break(1u);
    return result;
  }
  v45 = *(_BYTE *)(v0 + 396);
  if (v39)
    v12 = v39;
  else
    v12 = 0xE700000000000000;
  v13 = 0x6E776F6E6B6E55;
  if (v39)
    v13 = v37;
  v36 = v12;
  v38 = v13;
  v40 = *(_QWORD *)(v0 + 344);
  v42 = *(_QWORD *)(v0 + 352);
  v15 = *(_QWORD *)(v0 + 288);
  v14 = *(_QWORD *)(v0 + 296);
  v16 = *(_QWORD *)(v0 + 264);
  v17 = *(_QWORD *)(v0 + 272);
  v18 = *(_QWORD *)(v0 + 248);
  v19 = *(_QWORD *)(v0 + 160);
  v35 = *(_QWORD *)(v0 + 168);
  v20 = *(_QWORD *)(v0 + 152);
  v21 = *(_QWORD *)(v0 + 112);
  sub_1000126B0(*(_QWORD *)(v0 + 336), type metadata accessor for StableIdentifier);
  v22 = *(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 32);
  v22(v21, v14, v16);
  v23 = (int *)type metadata accessor for ManagedCBPeripheralBeaconInfo(0);
  v22(v21 + v23[5], v15, v16);
  sub_100005CF0(v18, v21 + v23[6], &qword_1010ED860);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 32))(v21 + v23[7], v35, v20);
  v24 = (uint64_t *)(v21 + v23[8]);
  *v24 = v38;
  v24[1] = v36;
  *(_DWORD *)(v21 + v23[9]) = v11;
  v25 = (_QWORD *)(v21 + v23[10]);
  *v25 = v40;
  v25[1] = v42;
  *(_BYTE *)(v21 + v23[11]) = 1;
  *(_BYTE *)(v21 + v23[12]) = v45;
  (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(*((_QWORD *)v23 - 1) + 56))(v21, 0, 1, v23);
  v26 = *(_QWORD *)(v0 + 328);
  v27 = *(_QWORD *)(v0 + 320);
  v29 = *(_QWORD *)(v0 + 296);
  v28 = *(_QWORD *)(v0 + 304);
  v30 = *(_QWORD *)(v0 + 288);
  v32 = *(_QWORD *)(v0 + 248);
  v31 = *(_QWORD *)(v0 + 256);
  v33 = *(_QWORD *)(v0 + 240);
  v34 = *(_QWORD *)(v0 + 216);
  v43 = *(_QWORD *)(v0 + 200);
  v46 = *(_QWORD *)(v0 + 168);
  swift_task_dealloc(*(_QWORD *)(v0 + 336));
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v43);
  swift_task_dealloc(v46);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100B39884(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5[7] = a4;
  v5[8] = a5;
  v5[5] = a2;
  v5[6] = a3;
  v5[4] = a1;
  v6 = type metadata accessor for SharedBeaconRecord(0);
  v5[9] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[10] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v5[11] = v8;
  v5[12] = swift_task_alloc((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100B398F0, 0, 0);
}

uint64_t sub_100B398F0()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t **v11;
  uint64_t v12;

  v2 = v0[11];
  v1 = v0[12];
  v3 = v0[10];
  v5 = v0[7];
  v4 = v0[8];
  v6 = v0[6];
  sub_10005972C(v0[5], v1, type metadata accessor for SharedBeaconRecord);
  v7 = *(unsigned __int8 *)(v3 + 80);
  v8 = (v7 + 40) & ~v7;
  v9 = (_QWORD *)swift_allocObject(&unk_1010AEAD0, v8 + v2, v7 | 7);
  v0[13] = (uint64_t)v9;
  v9[2] = v6;
  v9[3] = v5;
  v9[4] = v4;
  sub_1000126EC(v1, (uint64_t)v9 + v8, type metadata accessor for SharedBeaconRecord);
  v10 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  swift_retain();
  swift_retain();
  v11 = (uint64_t **)swift_task_alloc(v10);
  v0[14] = (uint64_t)v11;
  v12 = sub_10001A9A8(&qword_1010F6350);
  *v11 = v0;
  v11[1] = (uint64_t *)sub_100B399F8;
  return unsafeBlocking<A>(_:)(v0 + 2, sub_100B4B304, v9, v12);
}

uint64_t sub_100B399F8()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 112));
  swift_release();
  return swift_task_switch(sub_100B39A54, 0, 0);
}

uint64_t sub_100B39A54()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uid_t v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;

  v1 = *(_QWORD *)(v0 + 72);
  v3 = *(_QWORD *)(v0 + 32);
  v2 = *(_QWORD *)(v0 + 40);
  v4 = *(_QWORD *)(v0 + 24);
  v21 = *(_QWORD *)(v0 + 16);
  v5 = getuid();
  sub_100A06500(v5);
  v6 = v2 + *(int *)(v1 + 20);
  v7 = (int *)type metadata accessor for ManagedCBPeripheralBeaconInfo(0);
  v8 = v3 + v7[5];
  v9 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v9 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(v8, v6, v9);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56))(v3 + v7[6], 1, 1, v9);
  result = sub_100D3A990(v3 + v7[7]);
  v12 = *(_QWORD *)(v2 + *(int *)(v1 + 44));
  if (v12 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_11;
  }
  if (v12 > 0x7FFFFFFF)
  {
LABEL_11:
    __break(1u);
    return result;
  }
  v13 = *(_QWORD *)(v0 + 96);
  v14 = *(_QWORD *)(v0 + 32);
  if (v4)
    v15 = v4;
  else
    v15 = 0xE700000000000000;
  if (v4)
    v16 = v21;
  else
    v16 = 0x6E776F6E6B6E55;
  v17 = UUID.uuidString.getter(result);
  v18 = (uint64_t *)(v14 + v7[8]);
  *v18 = v16;
  v18[1] = v15;
  *(_DWORD *)(v14 + v7[9]) = v12;
  v19 = (uint64_t *)(v14 + v7[10]);
  *v19 = v17;
  v19[1] = v20;
  *(_BYTE *)(v14 + v7[11]) = 1;
  *(_BYTE *)(v14 + v7[12]) = 0;
  (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(*((_QWORD *)v7 - 1) + 56))(v14, 0, 1, v7);
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100B39BD8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t (*a3)(_QWORD)@<X4>, uint64_t a4@<X5>, _QWORD *a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  _BYTE v19[16];
  uint64_t v20;
  uint64_t v21;

  v10 = sub_10001A9A8((uint64_t *)&unk_101105880);
  __chkstk_darwin(v10);
  v12 = &v19[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = a2 + *(int *)(a3(0) + 20);
  v20 = a1;
  v21 = v13;
  QueueSynchronizer.conditionalSync<A>(_:)(a4);
  v14 = type metadata accessor for BeaconNamingRecord(0);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 48))(v12, 1, v14) == 1)
  {
    result = sub_100004048((uint64_t)v12, (uint64_t *)&unk_101105880);
    v16 = 0;
    v17 = 0;
  }
  else
  {
    v18 = (uint64_t *)&v12[*(int *)(v14 + 32)];
    v16 = *v18;
    v17 = v18[1];
    swift_bridgeObjectRetain(v17);
    result = sub_1000126B0((uint64_t)v12, type metadata accessor for BeaconNamingRecord);
  }
  *a5 = v16;
  a5[1] = v17;
  return result;
}

uint64_t sub_100B39D08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v5[22] = a4;
  v5[23] = a5;
  v5[20] = a2;
  v5[21] = a3;
  v5[19] = a1;
  v6 = type metadata accessor for Date(0);
  v5[24] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[25] = v7;
  v5[26] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for BeaconIdentifier(0);
  v5[27] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v5[28] = v9;
  v10 = *(_QWORD *)(v9 + 64);
  v5[29] = v10;
  v11 = (v10 + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[30] = swift_task_alloc(v11);
  v5[31] = swift_task_alloc(v11);
  v5[32] = swift_task_alloc(v11);
  v5[33] = swift_task_alloc(v11);
  v12 = sub_10001A9A8((uint64_t *)&unk_1010F47C0);
  v5[34] = v12;
  v5[35] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v12 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for OwnedBeaconRecord(0);
  v5[36] = v13;
  v14 = *(_QWORD *)(v13 - 8);
  v5[37] = v14;
  v5[38] = swift_task_alloc((*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100B39E14, 0, 0);
}

uint64_t sub_100B39E14()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t **v11;

  v1 = v0[33];
  v3 = v0[28];
  v2 = v0[29];
  v5 = v0[22];
  v4 = v0[23];
  v6 = v0[21];
  sub_10005972C(v0[20], v1, type metadata accessor for BeaconIdentifier);
  v7 = *(unsigned __int8 *)(v3 + 80);
  v8 = (v7 + 40) & ~v7;
  v9 = (_QWORD *)swift_allocObject(&unk_1010AEA08, v8 + v2, v7 | 7);
  v0[39] = (uint64_t)v9;
  v9[2] = v6;
  v9[3] = v5;
  v9[4] = v4;
  sub_1000126EC(v1, (uint64_t)v9 + v8, type metadata accessor for BeaconIdentifier);
  v10 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  swift_retain();
  swift_retain();
  v11 = (uint64_t **)swift_task_alloc(v10);
  v0[40] = (uint64_t)v11;
  *v11 = v0;
  v11[1] = (uint64_t *)sub_100B39F08;
  return unsafeBlocking<A>(_:)(v0[35], sub_100B4AC90, v9, v0[34]);
}

uint64_t sub_100B39F08()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 320));
  swift_release();
  return swift_task_switch(sub_100B39F64, 0, 0);
}

uint64_t sub_100B39F64()
{
  _QWORD *v0;
  uint64_t v1;
  __int128 *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  _BOOL4 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  Swift::String v17;
  uint64_t v18;
  Swift::String v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  _BOOL4 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  Swift::String v34;
  Swift::String v35;
  uint64_t result;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t (__cdecl *v39)();
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;

  v1 = v0[35];
  if ((*(unsigned int (**)(uint64_t, uint64_t, _QWORD))(v0[37] + 48))(v1, 1, v0[36]) == 1)
  {
    sub_100004048(v1, (uint64_t *)&unk_1010F47C0);
    if (qword_1010E9F38 != -1)
      swift_once(&qword_1010E9F38, sub_1007A03F4);
    v2 = (__int128 *)(v0 + 7);
    v3 = v0 + 12;
    v4 = v0[30];
    v5 = v0[20];
    v6 = type metadata accessor for Logger(0);
    v0[42] = sub_10001A9E8(v6, (uint64_t)qword_1011B7660);
    v7 = sub_10005972C(v5, v4, type metadata accessor for BeaconIdentifier);
    v8 = Logger.logObject.getter(v7);
    v9 = static os_log_type_t.default.getter(v8);
    v10 = os_log_type_enabled(v8, v9);
    v11 = v0[30];
    if (v10)
    {
      v12 = swift_slowAlloc(22, -1);
      v13 = swift_slowAlloc(32, -1);
      v40 = v13;
      *(_DWORD *)v12 = 141558275;
      v0[15] = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 15, v0 + 16, v12 + 4, v12 + 12);
      *(_WORD *)(v12 + 12) = 2081;
      v14 = type metadata accessor for UUID(0);
      v15 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v41 = dispatch thunk of CustomStringConvertible.description.getter(v14, v15);
      v42 = v16;
      v17._countAndFlagsBits = 47;
      v17._object = (void *)0xE100000000000000;
      String.append(_:)(v17);
      v18 = v15;
      v2 = (__int128 *)(v0 + 7);
      v19._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v14, v18);
      String.append(_:)(v19);
      swift_bridgeObjectRelease();
      v0[16] = sub_100016940(v41, v42, &v40);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 17, v12 + 14, v12 + 22);
      swift_bridgeObjectRelease();
      sub_1000126B0(v11, type metadata accessor for BeaconIdentifier);
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "beaconInfo: no beacon record for %{private,mask.hash}s. Looking up standalone beacons...", (uint8_t *)v12, 0x16u);
      swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v13, -1, -1);
      v20 = v12;
      v3 = v0 + 12;
      swift_slowDealloc(v20, -1, -1);
    }
    else
    {
      sub_1000126B0(v0[30], type metadata accessor for BeaconIdentifier);
    }

    if (qword_1010EA5B0 != -1)
      swift_once(&qword_1010EA5B0, sub_100D37418);
    swift_beginAccess(&xmmword_10111E6C0, v3, 0, 0);
    result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, (uint64_t)v2, &qword_1010EE220);
    if (v0[10])
    {
      sub_10000F9FC(v2, (uint64_t)(v0 + 2));
      sub_10001AA44(v0 + 2, v0[5]);
      v39 = (uint64_t (__cdecl *)())((char *)&dword_1010EBC58 + dword_1010EBC58);
      v37 = (_QWORD *)swift_task_alloc(unk_1010EBC5C);
      v0[43] = v37;
      *v37 = v0;
      v37[1] = sub_100B3A760;
      return v39();
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    sub_1000126EC(v1, v0[38], type metadata accessor for OwnedBeaconRecord);
    if (qword_1010E9F38 != -1)
      swift_once(&qword_1010E9F38, sub_1007A03F4);
    v21 = v0[32];
    v22 = v0[20];
    v23 = type metadata accessor for Logger(0);
    sub_10001A9E8(v23, (uint64_t)qword_1011B7660);
    v24 = sub_10005972C(v22, v21, type metadata accessor for BeaconIdentifier);
    v25 = Logger.logObject.getter(v24);
    v26 = static os_log_type_t.default.getter(v25);
    v27 = os_log_type_enabled(v25, v26);
    v28 = v0[32];
    if (v27)
    {
      v29 = swift_slowAlloc(22, -1);
      v30 = swift_slowAlloc(32, -1);
      v40 = v30;
      *(_DWORD *)v29 = 141558275;
      v0[17] = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 17, v0 + 18, v29 + 4, v29 + 12);
      *(_WORD *)(v29 + 12) = 2081;
      v31 = type metadata accessor for UUID(0);
      v32 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v41 = dispatch thunk of CustomStringConvertible.description.getter(v31, v32);
      v42 = v33;
      v34._countAndFlagsBits = 47;
      v34._object = (void *)0xE100000000000000;
      String.append(_:)(v34);
      v35._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v31, v32);
      String.append(_:)(v35);
      swift_bridgeObjectRelease();
      v0[18] = sub_100016940(v41, v42, &v40);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 18, v0 + 19, v29 + 14, v29 + 22);
      swift_bridgeObjectRelease();
      sub_1000126B0(v28, type metadata accessor for BeaconIdentifier);
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "beaconInfo: found beacon record for %{private,mask.hash}s!", (uint8_t *)v29, 0x16u);
      swift_arrayDestroy(v30, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v30, -1, -1);
      swift_slowDealloc(v29, -1, -1);
    }
    else
    {
      sub_1000126B0(v0[32], type metadata accessor for BeaconIdentifier);
    }

    v38 = (_QWORD *)swift_task_alloc(dword_10110EEA4);
    v0[41] = v38;
    *v38 = v0;
    v38[1] = sub_100B3A54C;
    return sub_1009A1F44();
  }
  return result;
}

uint64_t sub_100B3A54C(char a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 328);
  *(_BYTE *)(*(_QWORD *)v1 + 368) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100B3A5A8, 0, 0);
}

uint64_t sub_100B3A5A8()
{
  uint64_t v0;
  uint64_t v1;
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  int *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;

  v29 = *(unsigned __int8 *)(v0 + 368);
  v1 = *(_QWORD *)(v0 + 304);
  v2 = *(int **)(v0 + 288);
  v3 = *(_QWORD *)(v0 + 248);
  v5 = *(_QWORD *)(v0 + 200);
  v4 = *(_QWORD *)(v0 + 208);
  v30 = v4;
  v6 = *(_QWORD *)(v0 + 192);
  v27 = v5;
  v28 = v6;
  v7 = *(_QWORD *)(v0 + 152);
  sub_10005972C(*(_QWORD *)(v0 + 160), v3, type metadata accessor for BeaconIdentifier);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v4, v1 + v2[8], v6);
  v8 = (uint64_t *)(v1 + v2[12]);
  v9 = *v8;
  v10 = v8[1];
  v11 = v2[10];
  v12 = (uint64_t *)(v1 + v2[9]);
  v14 = *v12;
  v13 = v12[1];
  v15 = *(_QWORD *)(v1 + v11);
  v16 = *(_QWORD *)(v1 + v11 + 8);
  sub_10001BBBC(v9, v10);
  sub_10001BBBC(v14, v13);
  sub_10001BD08(v15, v16);
  sub_1000126B0(v1, type metadata accessor for OwnedBeaconRecord);
  if (v29)
    v17 = 2;
  else
    v17 = 0;
  sub_1000126EC(v3, v7, type metadata accessor for BeaconIdentifier);
  v18 = (int *)type metadata accessor for KeyGenerationBeaconInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v27 + 32))(v7 + v18[5], v30, v28);
  v19 = (uint64_t *)(v7 + v18[6]);
  *v19 = v9;
  v19[1] = v10;
  v19[2] = v14;
  v19[3] = v13;
  v19[4] = v15;
  v19[5] = v16;
  *(_BYTE *)(v7 + v18[7]) = v17;
  (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(*((_QWORD *)v18 - 1) + 56))(v7, 0, 1, v18);
  v20 = *(_QWORD *)(v0 + 280);
  v22 = *(_QWORD *)(v0 + 256);
  v21 = *(_QWORD *)(v0 + 264);
  v24 = *(_QWORD *)(v0 + 240);
  v23 = *(_QWORD *)(v0 + 248);
  v25 = *(_QWORD *)(v0 + 208);
  swift_task_dealloc(*(_QWORD *)(v0 + 304));
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100B3A760(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 344);
  *(_QWORD *)(*(_QWORD *)v1 + 352) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100B3A7BC, 0, 0);
}

uint64_t sub_100B3A7BC()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  unint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v1 = (_QWORD *)(v0 + 16);
  if (*(_QWORD *)(v0 + 352))
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    return swift_task_switch(sub_100B3A924, *(_QWORD *)(v0 + 352), 0);
  }
  else
  {
    v3 = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    v4 = Logger.logObject.getter(v3);
    v5 = static os_log_type_t.error.getter(v4);
    if (os_log_type_enabled(v4, v5))
    {
      v6 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "No BeaconKeyService available!", v6, 2u);
      swift_slowDealloc(v6, -1, -1);
    }

    v7 = sub_100B4AB9C();
    v8 = swift_allocError(&type metadata for ManagedCBPeripheralError, v7, 0, 0);
    *v9 = 1;
    swift_willThrow(v8);
    v10 = *(_QWORD *)(v0 + 280);
    v12 = *(_QWORD *)(v0 + 256);
    v11 = *(_QWORD *)(v0 + 264);
    v14 = *(_QWORD *)(v0 + 240);
    v13 = *(_QWORD *)(v0 + 248);
    v15 = *(_QWORD *)(v0 + 208);
    swift_task_dealloc(*(_QWORD *)(v0 + 304));
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

void sub_100B3A924()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0[44] + 128);
  if (v1)
  {
    sub_1007548FC(v0[20], v1, v0[19]);
    v0[45] = 0;
    swift_task_switch(sub_100B3A990, 0, 0);
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_100B3A990()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  swift_release(*(_QWORD *)(v0 + 352));
  v1 = *(_QWORD *)(v0 + 280);
  v3 = *(_QWORD *)(v0 + 256);
  v2 = *(_QWORD *)(v0 + 264);
  v5 = *(_QWORD *)(v0 + 240);
  v4 = *(_QWORD *)(v0 + 248);
  v6 = *(_QWORD *)(v0 + 208);
  swift_task_dealloc(*(_QWORD *)(v0 + 304));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100B3AA1C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  swift_release(*(_QWORD *)(v0 + 352));
  v1 = *(_QWORD *)(v0 + 280);
  v3 = *(_QWORD *)(v0 + 256);
  v2 = *(_QWORD *)(v0 + 264);
  v5 = *(_QWORD *)(v0 + 240);
  v4 = *(_QWORD *)(v0 + 248);
  v6 = *(_QWORD *)(v0 + 208);
  swift_task_dealloc(*(_QWORD *)(v0 + 304));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100B3AAB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v4[6] = a3;
  v4[7] = a4;
  v4[4] = a1;
  v4[5] = a2;
  v9 = type metadata accessor for BeaconIdentifier(0);
  v4[8] = v9;
  v4[9] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10001A9A8(&qword_10110B4C8);
  v11 = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4[10] = v11;
  v12 = type metadata accessor for KeyGenerationBeaconInfo(0);
  v4[11] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v4[12] = v13;
  v4[13] = swift_task_alloc((*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = (_QWORD *)swift_task_alloc(dword_101115C94);
  v4[14] = v14;
  *v14 = v4;
  v14[1] = sub_100B3ABA8;
  return sub_100B39D08(v11, a1, a2, a3, a4);
}

uint64_t sub_100B3ABA8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 112);
  *(_QWORD *)(*(_QWORD *)v1 + 120) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_100B3B158;
  else
    v3 = sub_100B3AC0C;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_100B3AC0C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  _BOOL4 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  Swift::String v16;
  Swift::String v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;

  v1 = *(_QWORD *)(v0 + 88);
  v2 = *(_QWORD *)(v0 + 80);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 96) + 48))(v2, 1, v1) == 1)
  {
    sub_100004048(v2, &qword_10110B4C8);
    if (qword_1010E9F38 != -1)
      swift_once(&qword_1010E9F38, sub_1007A03F4);
    v3 = *(_QWORD *)(v0 + 32);
    v4 = *(_QWORD *)(v0 + 72);
    v5 = type metadata accessor for Logger(0);
    sub_10001A9E8(v5, (uint64_t)qword_1011B7660);
    v6 = sub_10005972C(v3, v4, type metadata accessor for BeaconIdentifier);
    v7 = Logger.logObject.getter(v6);
    v8 = static os_log_type_t.error.getter(v7);
    v9 = os_log_type_enabled(v7, v8);
    v10 = *(_QWORD *)(v0 + 72);
    if (v9)
    {
      v11 = swift_slowAlloc(22, -1);
      v12 = swift_slowAlloc(32, -1);
      v24 = v12;
      *(_DWORD *)v11 = 141558275;
      *(_QWORD *)(v0 + 16) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v11 + 4, v11 + 12);
      *(_WORD *)(v11 + 12) = 2081;
      v13 = type metadata accessor for UUID(0);
      v14 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v25 = dispatch thunk of CustomStringConvertible.description.getter(v13, v14);
      v26 = v15;
      v16._countAndFlagsBits = 47;
      v16._object = (void *)0xE100000000000000;
      String.append(_:)(v16);
      v17._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v13, v14);
      String.append(_:)(v17);
      swift_bridgeObjectRelease();
      *(_QWORD *)(v0 + 24) = sub_100016940(v25, v26, &v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v11 + 14, v11 + 22);
      swift_bridgeObjectRelease();
      sub_1000126B0(v10, type metadata accessor for BeaconIdentifier);
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "No KeyGenerationBeaconInfo for %{private,mask.hash}s!", (uint8_t *)v11, 0x16u);
      swift_arrayDestroy(v12, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v12, -1, -1);
      swift_slowDealloc(v11, -1, -1);
    }
    else
    {
      sub_1000126B0(*(_QWORD *)(v0 + 72), type metadata accessor for BeaconIdentifier);
    }

    v21 = *(_QWORD *)(v0 + 72);
    v22 = *(_QWORD *)(v0 + 80);
    swift_task_dealloc(*(_QWORD *)(v0 + 104));
    swift_task_dealloc(v22);
    swift_task_dealloc(v21);
    return (*(uint64_t (**)(_QWORD *))(v0 + 8))(_swiftEmptyArrayStorage);
  }
  else
  {
    v18 = *(_QWORD *)(v0 + 104);
    sub_1000126EC(v2, v18, type metadata accessor for KeyGenerationBeaconInfo);
    if (*(_QWORD *)(v18 + *(int *)(v1 + 24) + 8) >> 60 == 15)
    {
      v19 = (_QWORD *)swift_task_alloc(dword_101115CAC);
      *(_QWORD *)(v0 + 136) = v19;
      *v19 = v0;
      v19[1] = sub_100B3B01C;
      return sub_100B43BE0(*(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56));
    }
    else
    {
      v23 = (_QWORD *)swift_task_alloc(dword_101115CB4);
      *(_QWORD *)(v0 + 128) = v23;
      *v23 = v0;
      v23[1] = sub_100B3AFA8;
      return sub_100B3BF48(*(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56));
    }
  }
}

uint64_t sub_100B3AFA8(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t (*v5)();

  v4 = *v2;
  swift_task_dealloc(*(_QWORD *)(*v2 + 128));
  if (v1)
  {
    *(_QWORD *)(v4 + 152) = v1;
    v5 = sub_100B3B0F8;
  }
  else
  {
    *(_QWORD *)(v4 + 144) = a1;
    v5 = sub_100B3B090;
  }
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_100B3B01C(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t (*v5)();

  v4 = *v2;
  swift_task_dealloc(*(_QWORD *)(*v2 + 136));
  if (v1)
  {
    *(_QWORD *)(v4 + 152) = v1;
    v5 = sub_100B3B0F8;
  }
  else
  {
    *(_QWORD *)(v4 + 144) = a1;
    v5 = sub_100B3B090;
  }
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_100B3B090()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_1000126B0(*(_QWORD *)(v0 + 104), type metadata accessor for KeyGenerationBeaconInfo);
  v1 = *(_QWORD *)(v0 + 144);
  v3 = *(_QWORD *)(v0 + 72);
  v2 = *(_QWORD *)(v0 + 80);
  swift_task_dealloc(*(_QWORD *)(v0 + 104));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v1);
}

uint64_t sub_100B3B0F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_1000126B0(*(_QWORD *)(v0 + 104), type metadata accessor for KeyGenerationBeaconInfo);
  v2 = *(_QWORD *)(v0 + 72);
  v1 = *(_QWORD *)(v0 + 80);
  swift_task_dealloc(*(_QWORD *)(v0 + 104));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100B3B158()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 72);
  v1 = *(_QWORD *)(v0 + 80);
  swift_task_dealloc(*(_QWORD *)(v0 + 104));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100B3B1A8(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;

  *(_QWORD *)(v7 + 288) = a2;
  *(_QWORD *)(v7 + 296) = a4;
  *(_BYTE *)(v7 + 544) = a3;
  *(_QWORD *)(v7 + 280) = a1;
  v12 = type metadata accessor for BeaconIdentifier(0);
  *(_QWORD *)(v7 + 304) = v12;
  *(_QWORD *)(v7 + 312) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v12 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_10001A9A8(&qword_10110B4C8);
  v14 = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v13 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(v7 + 320) = v14;
  v15 = type metadata accessor for KeyGenerationBeaconInfo(0);
  *(_QWORD *)(v7 + 328) = v15;
  v16 = *(_QWORD *)(v15 - 8);
  *(_QWORD *)(v7 + 336) = v16;
  *(_QWORD *)(v7 + 344) = swift_task_alloc((*(_QWORD *)(v16 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = (_QWORD *)swift_task_alloc(dword_101115C94);
  *(_QWORD *)(v7 + 352) = v17;
  *v17 = v7;
  v17[1] = sub_100B3B2A4;
  return sub_100B39D08(v14, a2, a5, a6, a7);
}

uint64_t sub_100B3B2A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 352);
  *(_QWORD *)(*(_QWORD *)v1 + 360) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_100B3BE84;
  else
    v3 = sub_100B3B308;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_100B3B308()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  _BOOL4 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  Swift::String v15;
  Swift::String v16;
  uint64_t result;
  _QWORD *v18;
  uint64_t (*v19)(void);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(void);
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;

  v1 = *(_QWORD *)(v0 + 320);
  if ((*(unsigned int (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 336) + 48))(v1, 1, *(_QWORD *)(v0 + 328)) == 1)
  {
    sub_100004048(v1, &qword_10110B4C8);
    if (qword_1010E9F38 != -1)
      swift_once(&qword_1010E9F38, sub_1007A03F4);
    v2 = *(_QWORD *)(v0 + 312);
    v3 = *(_QWORD *)(v0 + 288);
    v4 = type metadata accessor for Logger(0);
    sub_10001A9E8(v4, (uint64_t)qword_1011B7660);
    v5 = sub_10005972C(v3, v2, type metadata accessor for BeaconIdentifier);
    v6 = Logger.logObject.getter(v5);
    v7 = static os_log_type_t.error.getter(v6);
    v8 = os_log_type_enabled(v6, v7);
    v9 = *(_QWORD *)(v0 + 312);
    if (v8)
    {
      v10 = swift_slowAlloc(22, -1);
      v11 = swift_slowAlloc(32, -1);
      v24 = v11;
      *(_DWORD *)v10 = 141558275;
      *(_QWORD *)(v0 + 264) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 264, v0 + 272, v10 + 4, v10 + 12);
      *(_WORD *)(v10 + 12) = 2081;
      v12 = type metadata accessor for UUID(0);
      v13 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v25 = dispatch thunk of CustomStringConvertible.description.getter(v12, v13);
      v26 = v14;
      v15._countAndFlagsBits = 47;
      v15._object = (void *)0xE100000000000000;
      String.append(_:)(v15);
      v16._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v12, v13);
      String.append(_:)(v16);
      swift_bridgeObjectRelease();
      *(_QWORD *)(v0 + 272) = sub_100016940(v25, v26, &v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 272, v0 + 280, v10 + 14, v10 + 22);
      swift_bridgeObjectRelease();
      sub_1000126B0(v9, type metadata accessor for BeaconIdentifier);
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "No KeyGenerationBeaconInfo for %{private,mask.hash}s!", (uint8_t *)v10, 0x16u);
      swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v11, -1, -1);
      swift_slowDealloc(v10, -1, -1);
    }
    else
    {
      sub_1000126B0(*(_QWORD *)(v0 + 312), type metadata accessor for BeaconIdentifier);
    }

    v20 = *(_QWORD *)(v0 + 312);
    v21 = *(_QWORD *)(v0 + 320);
    v22 = *(_QWORD *)(v0 + 280);
    swift_task_dealloc(*(_QWORD *)(v0 + 344));
    swift_task_dealloc(v21);
    swift_task_dealloc(v20);
    *(_QWORD *)v22 = 3;
    *(_OWORD *)(v22 + 8) = 0u;
    *(_OWORD *)(v22 + 24) = 0u;
    *(_QWORD *)(v22 + 40) = 0;
    v19 = *(uint64_t (**)(void))(v0 + 8);
    return v19();
  }
  sub_1000126EC(v1, *(_QWORD *)(v0 + 344), type metadata accessor for KeyGenerationBeaconInfo);
  if (qword_1010EA5B0 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v0 + 240, 0, 0);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 160, &qword_1010EE220);
  if (*(_QWORD *)(v0 + 184))
  {
    sub_10000F9FC((__int128 *)(v0 + 160), v0 + 200);
    sub_10001AA44((_QWORD *)(v0 + 200), *(_QWORD *)(v0 + 224));
    v23 = (uint64_t (*)(void))((char *)&dword_1010EBC58 + dword_1010EBC58);
    v18 = (_QWORD *)swift_task_alloc(unk_1010EBC5C);
    *(_QWORD *)(v0 + 368) = v18;
    *v18 = v0;
    v18[1] = sub_100B3B6B8;
    v19 = v23;
    return v19();
  }
  __break(1u);
  return result;
}

uint64_t sub_100B3B6B8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 368);
  *(_QWORD *)(*(_QWORD *)v1 + 376) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100B3B714, 0, 0);
}

uint64_t sub_100B3B714()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;

  v1 = *(_QWORD *)(v0 + 376);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 200));
  if (v1)
    return swift_task_switch(sub_100B3B884, *(_QWORD *)(v0 + 376), 0);
  if (qword_1010E9F38 != -1)
    swift_once(&qword_1010E9F38, sub_1007A03F4);
  v3 = type metadata accessor for Logger(0);
  v4 = sub_10001A9E8(v3, (uint64_t)qword_1011B7660);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.error.getter(v5);
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Missing BeaconKeyService!", v7, 2u);
    swift_slowDealloc(v7, -1, -1);
  }
  v8 = *(_QWORD *)(v0 + 344);

  v9 = sub_100B4AB9C();
  v10 = swift_allocError(&type metadata for ManagedCBPeripheralError, v9, 0, 0);
  *v11 = 1;
  swift_willThrow(v10);
  sub_1000126B0(v8, type metadata accessor for KeyGenerationBeaconInfo);
  v13 = *(_QWORD *)(v0 + 312);
  v12 = *(_QWORD *)(v0 + 320);
  swift_task_dealloc(*(_QWORD *)(v0 + 344));
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100B3B884()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 376) + 128);
  *(_QWORD *)(v0 + 384) = v1;
  if (v1)
  {
    swift_retain();
    v2 = sub_100B3B8D8;
  }
  else
  {
    v2 = sub_100B3BD34;
  }
  return swift_task_switch(v2, 0, 0);
}

uint64_t sub_100B3B8D8()
{
  uint64_t v0;
  uint64_t *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v23;

  v1 = (uint64_t *)(*(_QWORD *)(v0 + 344) + *(int *)(*(_QWORD *)(v0 + 328) + 24));
  v2 = v1[1];
  if (v2 >> 60 == 15)
  {
    v3 = 0;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v2 = 0;
    v10 = 0;
    v11 = 0;
    v12 = 0xF000000000000000;
    v13 = 0xF000000000000000;
  }
  else
  {
    v9 = *v1;
    v10 = v1[2];
    v11 = v1[3];
    v6 = v1[4];
    v7 = v1[5];
    sub_10001BBBC(*v1, v1[1]);
    sub_10001BBBC(v10, v11);
    sub_10001BD08(v6, v7);
    PrivateKey.publicKey.getter(v9, v2);
    v23 = v14;
    v16 = v15;
    sub_10001BBBC(v9, v2);
    sub_10001BBBC(v10, v11);
    sub_100758808(v9, v2, v10, v11, v6, v7, (void (*)(void))sub_10001BC14, (uint64_t (*)(uint64_t, uint64_t))sub_1000FC25C);
    if (v7 >> 60 == 15)
    {
      v3 = 0;
      v4 = 0;
      v5 = 0;
      v6 = 0;
      v7 = 0;
      v12 = 0xF000000000000000;
    }
    else
    {
      sub_100758808(v9, v2, v10, v11, v6, v7, (void (*)(void))sub_10001BBBC, sub_10005CB9C);
      sub_10001BD08(v6, v7);
      PrivateKey.publicKey.getter(v9, v2);
      v3 = v17;
      v12 = v18;
      sub_10001BBBC(v9, v2);
      sub_100758808(v9, v2, v10, v11, v6, v7, (void (*)(void))sub_10001BC14, (uint64_t (*)(uint64_t, uint64_t))sub_1000FC25C);
      v4 = v9;
      v5 = v2;
    }
    v8 = v23;
    v13 = v16;
  }
  *(_QWORD *)(v0 + 472) = v10;
  *(_QWORD *)(v0 + 480) = v11;
  *(_QWORD *)(v0 + 456) = v9;
  *(_QWORD *)(v0 + 464) = v2;
  *(_QWORD *)(v0 + 440) = v8;
  *(_QWORD *)(v0 + 448) = v13;
  *(_QWORD *)(v0 + 424) = v6;
  *(_QWORD *)(v0 + 432) = v7;
  *(_QWORD *)(v0 + 408) = v4;
  *(_QWORD *)(v0 + 416) = v5;
  *(_QWORD *)(v0 + 392) = v3;
  *(_QWORD *)(v0 + 400) = v12;
  v19 = v10;
  v20 = *(_QWORD *)(v0 + 384);
  *(_QWORD *)(v0 + 16) = v3;
  *(_QWORD *)(v0 + 24) = v12;
  *(_QWORD *)(v0 + 32) = v4;
  *(_QWORD *)(v0 + 40) = v5;
  *(_QWORD *)(v0 + 48) = v6;
  *(_QWORD *)(v0 + 56) = v7;
  *(_QWORD *)(v0 + 64) = v8;
  *(_QWORD *)(v0 + 72) = v13;
  *(_QWORD *)(v0 + 80) = v9;
  *(_QWORD *)(v0 + 88) = v2;
  *(_QWORD *)(v0 + 96) = v19;
  *(_QWORD *)(v0 + 104) = v11;
  v21 = (_QWORD *)swift_task_alloc(dword_1010F551C);
  *(_QWORD *)(v0 + 488) = v21;
  *v21 = v0;
  v21[1] = sub_100B3BB44;
  return sub_1002ADDB8(v0 + 112, *(_QWORD *)(v0 + 288), v0 + 64, v0 + 16, *(_BYTE *)(v0 + 544), *(_QWORD *)(v0 + 296), v20, 4000);
}

uint64_t sub_100B3BB44()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t (*v10)();
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  __int128 v23;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 488);
  *(_QWORD *)(*v1 + 496) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = *(_QWORD *)(v2 + 472);
    v5 = *(_QWORD *)(v2 + 480);
    v7 = *(_QWORD *)(v2 + 456);
    v6 = *(_QWORD *)(v2 + 464);
    v9 = *(_QWORD *)(v2 + 440);
    v8 = *(_QWORD *)(v2 + 448);
    sub_100758808(*(_QWORD *)(v2 + 392), *(_QWORD *)(v2 + 400), *(_QWORD *)(v2 + 408), *(_QWORD *)(v2 + 416), *(_QWORD *)(v2 + 424), *(_QWORD *)(v2 + 432), (void (*)(void))sub_10001BC14, (uint64_t (*)(uint64_t, uint64_t))sub_10001BC14);
    sub_100758808(v9, v8, v7, v6, v4, v5, (void (*)(void))sub_10001BC14, (uint64_t (*)(uint64_t, uint64_t))sub_10001BC14);
    v10 = sub_100B3BED4;
  }
  else
  {
    v11 = *(_QWORD *)(v2 + 472);
    v12 = *(_QWORD *)(v2 + 480);
    v14 = *(_QWORD *)(v2 + 456);
    v13 = *(_QWORD *)(v2 + 464);
    v16 = *(_QWORD *)(v2 + 440);
    v15 = *(_QWORD *)(v2 + 448);
    v17 = *(_QWORD *)(v2 + 424);
    v18 = *(_QWORD *)(v2 + 432);
    v19 = *(_QWORD *)(v2 + 408);
    v20 = *(_QWORD *)(v2 + 416);
    v21 = *(_QWORD *)(v2 + 392);
    v22 = *(_QWORD *)(v2 + 400);
    *(_BYTE *)(v2 + 545) = *(_BYTE *)(v2 + 112);
    v23 = *(_OWORD *)(v2 + 136);
    *(_OWORD *)(v2 + 504) = *(_OWORD *)(v2 + 120);
    *(_OWORD *)(v2 + 520) = v23;
    *(_QWORD *)(v2 + 536) = *(_QWORD *)(v2 + 152);
    sub_100758808(v21, v22, v19, v20, v17, v18, (void (*)(void))sub_10001BC14, (uint64_t (*)(uint64_t, uint64_t))sub_10001BC14);
    sub_100758808(v16, v15, v14, v13, v11, v12, (void (*)(void))sub_10001BC14, (uint64_t (*)(uint64_t, uint64_t))sub_10001BC14);
    v10 = sub_100B3BC80;
  }
  return swift_task_switch(v10, 0, 0);
}

uint64_t sub_100B3BC80()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v8;
  __int128 v9;

  v1 = *(unsigned __int8 *)(v0 + 545);
  v2 = *(_QWORD *)(v0 + 344);
  swift_release();
  swift_release();
  sub_1000126B0(v2, type metadata accessor for KeyGenerationBeaconInfo);
  v3 = *(_QWORD *)(v0 + 536);
  v8 = *(_OWORD *)(v0 + 504);
  v9 = *(_OWORD *)(v0 + 520);
  v4 = *(_QWORD *)(v0 + 312);
  v5 = *(_QWORD *)(v0 + 320);
  v6 = *(_QWORD *)(v0 + 280);
  swift_task_dealloc(*(_QWORD *)(v0 + 344));
  swift_task_dealloc(v5);
  swift_task_dealloc(v4);
  *(_QWORD *)v6 = v1;
  *(_OWORD *)(v6 + 8) = v8;
  *(_OWORD *)(v6 + 24) = v9;
  *(_QWORD *)(v6 + 40) = v3;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100B3BD34()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;

  if (qword_1010E9F38 != -1)
    swift_once(&qword_1010E9F38, sub_1007A03F4);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_10001A9E8(v1, (uint64_t)qword_1011B7660);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Missing LTKGenerator!", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v6 = *(_QWORD *)(v0 + 344);

  v7 = sub_100B4AB9C();
  v8 = swift_allocError(&type metadata for ManagedCBPeripheralError, v7, 0, 0);
  *v9 = 1;
  swift_willThrow(v8);
  swift_release();
  sub_1000126B0(v6, type metadata accessor for KeyGenerationBeaconInfo);
  v11 = *(_QWORD *)(v0 + 312);
  v10 = *(_QWORD *)(v0 + 320);
  swift_task_dealloc(*(_QWORD *)(v0 + 344));
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100B3BE84()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 312);
  v1 = *(_QWORD *)(v0 + 320);
  swift_task_dealloc(*(_QWORD *)(v0 + 344));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100B3BED4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 344);
  swift_release();
  swift_release();
  sub_1000126B0(v1, type metadata accessor for KeyGenerationBeaconInfo);
  v3 = *(_QWORD *)(v0 + 312);
  v2 = *(_QWORD *)(v0 + 320);
  swift_task_dealloc(*(_QWORD *)(v0 + 344));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100B3BF48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;

  v4[117] = a4;
  v4[116] = a3;
  v4[115] = a2;
  v4[114] = a1;
  v5 = type metadata accessor for UUID(0);
  v4[118] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[119] = v6;
  v4[120] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10001A9A8(&qword_1010F5E90);
  v4[121] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Date(0);
  v4[122] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v4[123] = v9;
  v10 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[124] = swift_task_alloc(v10);
  v4[125] = swift_task_alloc(v10);
  v4[126] = swift_task_alloc(v10);
  v11 = sub_10001A9A8(&qword_1010EF3F8);
  v4[127] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v11 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for ObservedAdvertisement.BeaconIndexInformation(0);
  v4[128] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v4[129] = v13;
  v14 = (*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[130] = swift_task_alloc(v14);
  v4[131] = swift_task_alloc(v14);
  v4[132] = swift_task_alloc(v14);
  v4[133] = swift_task_alloc(v14);
  v4[134] = swift_task_alloc(v14);
  v4[135] = swift_task_alloc(v14);
  v4[136] = swift_task_alloc(v14);
  v15 = sub_10001A9A8(&qword_1010F0F00);
  v4[137] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v15 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for ObservedAdvertisement(0);
  v4[138] = v16;
  v17 = *(_QWORD *)(v16 - 8);
  v4[139] = v17;
  v18 = (*(_QWORD *)(v17 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[140] = swift_task_alloc(v18);
  v4[141] = swift_task_alloc(v18);
  v4[142] = swift_task_alloc(v18);
  v4[143] = swift_task_alloc(v18);
  v4[144] = swift_task_alloc(v18);
  v19 = type metadata accessor for BeaconIdentifier(0);
  v4[145] = v19;
  v20 = (*(_QWORD *)(*(_QWORD *)(v19 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[146] = swift_task_alloc(v20);
  v4[147] = swift_task_alloc(v20);
  v4[148] = swift_task_alloc(v20);
  v4[149] = swift_task_alloc(v20);
  v4[150] = swift_task_alloc(v20);
  v4[151] = swift_task_alloc(v20);
  v4[152] = swift_task_alloc(v20);
  v4[153] = swift_task_alloc(v20);
  return swift_task_switch(sub_100B3C1B0, 0, 0);
}

uint64_t sub_100B3C1B0()
{
  uint64_t v0;
  uint64_t result;
  _QWORD *v2;
  uint64_t (__cdecl *v3)();

  sub_10005972C(*(_QWORD *)(v0 + 912), *(_QWORD *)(v0 + 1224), type metadata accessor for BeaconIdentifier);
  if (qword_1010EA5B0 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v0 + 640, 0, 0);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 480, &qword_1010EE220);
  if (*(_QWORD *)(v0 + 504))
  {
    sub_10000F9FC((__int128 *)(v0 + 480), v0 + 400);
    sub_10001AA44((_QWORD *)(v0 + 400), *(_QWORD *)(v0 + 424));
    v3 = (uint64_t (__cdecl *)())((char *)&dword_1010EBC00 + dword_1010EBC00);
    v2 = (_QWORD *)swift_task_alloc(unk_1010EBC04);
    *(_QWORD *)(v0 + 1232) = v2;
    *v2 = v0;
    v2[1] = sub_100B3C2B0;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100B3C2B0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 1232);
  *(_QWORD *)(*(_QWORD *)v1 + 1240) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100B3C30C, 0, 0);
}

uint64_t sub_100B3C30C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  unint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t (*v38)(void);
  uint64_t v39;

  v1 = *(_QWORD *)(v0 + 1240);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 400));
  if (v1)
  {
    result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 560, &qword_1010EE220);
    if (*(_QWORD *)(v0 + 584))
    {
      sub_10000F9FC((__int128 *)(v0 + 560), v0 + 520);
      sub_10001AA44((_QWORD *)(v0 + 520), *(_QWORD *)(v0 + 544));
      v38 = (uint64_t (*)(void))((char *)&dword_1010EBC58 + dword_1010EBC58);
      v3 = (_QWORD *)swift_task_alloc(unk_1010EBC5C);
      *(_QWORD *)(v0 + 1248) = v3;
      *v3 = v0;
      v3[1] = sub_100B3C65C;
      return v38();
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    if (qword_1010E9F38 != -1)
      swift_once(&qword_1010E9F38, sub_1007A03F4);
    v4 = type metadata accessor for Logger(0);
    v5 = sub_10001A9E8(v4, (uint64_t)qword_1011B7660);
    v6 = Logger.logObject.getter(v5);
    v7 = static os_log_type_t.error.getter(v6);
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "No ObservationStoreService available!", v8, 2u);
      swift_slowDealloc(v8, -1, -1);
    }

    v9 = sub_100B4AB9C();
    v39 = swift_allocError(&type metadata for ManagedCBPeripheralError, v9, 0, 0);
    *v10 = 1;
    swift_willThrow(v39);
    v11 = *(_QWORD *)(v0 + 1224);
    v12 = *(_QWORD *)(v0 + 1216);
    v13 = *(_QWORD *)(v0 + 1208);
    v14 = *(_QWORD *)(v0 + 1200);
    v15 = *(_QWORD *)(v0 + 1192);
    v16 = *(_QWORD *)(v0 + 1184);
    v17 = *(_QWORD *)(v0 + 1176);
    v18 = *(_QWORD *)(v0 + 1168);
    v19 = *(_QWORD *)(v0 + 1152);
    v20 = *(_QWORD *)(v0 + 1144);
    v21 = *(_QWORD *)(v0 + 1136);
    v22 = *(_QWORD *)(v0 + 1128);
    v23 = *(_QWORD *)(v0 + 1120);
    v24 = *(_QWORD *)(v0 + 1096);
    v25 = *(_QWORD *)(v0 + 1088);
    v26 = *(_QWORD *)(v0 + 1080);
    v27 = *(_QWORD *)(v0 + 1072);
    v28 = *(_QWORD *)(v0 + 1064);
    v29 = *(_QWORD *)(v0 + 1056);
    v30 = *(_QWORD *)(v0 + 1048);
    v31 = *(_QWORD *)(v0 + 1040);
    v32 = *(_QWORD *)(v0 + 1016);
    v33 = *(_QWORD *)(v0 + 1008);
    v34 = *(_QWORD *)(v0 + 1000);
    v35 = *(_QWORD *)(v0 + 992);
    v36 = *(_QWORD *)(v0 + 968);
    v37 = *(_QWORD *)(v0 + 960);
    sub_1000126B0(v11, type metadata accessor for BeaconIdentifier);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    swift_task_dealloc(v36);
    swift_task_dealloc(v37);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  return result;
}

uint64_t sub_100B3C65C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 1248);
  *(_QWORD *)(*(_QWORD *)v1 + 1256) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100B3C6B8, 0, 0);
}

uint64_t sub_100B3C6B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  unint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v1 = *(_QWORD *)(v0 + 1256);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 520));
  if (v1)
    return swift_task_switch(sub_100B3C9A8, *(_QWORD *)(v0 + 1256), 0);
  if (qword_1010E9F38 != -1)
    swift_once(&qword_1010E9F38, sub_1007A03F4);
  v3 = type metadata accessor for Logger(0);
  v4 = sub_10001A9E8(v3, (uint64_t)qword_1011B7660);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.error.getter(v5);
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Missing BeaconKeyService!", v7, 2u);
    swift_slowDealloc(v7, -1, -1);
  }

  v8 = sub_100B4AB9C();
  v37 = swift_allocError(&type metadata for ManagedCBPeripheralError, v8, 0, 0);
  *v9 = 1;
  swift_willThrow(v37);
  swift_release();
  v10 = *(_QWORD *)(v0 + 1224);
  v11 = *(_QWORD *)(v0 + 1216);
  v12 = *(_QWORD *)(v0 + 1208);
  v13 = *(_QWORD *)(v0 + 1200);
  v14 = *(_QWORD *)(v0 + 1192);
  v15 = *(_QWORD *)(v0 + 1184);
  v16 = *(_QWORD *)(v0 + 1176);
  v17 = *(_QWORD *)(v0 + 1168);
  v18 = *(_QWORD *)(v0 + 1152);
  v19 = *(_QWORD *)(v0 + 1144);
  v20 = *(_QWORD *)(v0 + 1136);
  v21 = *(_QWORD *)(v0 + 1128);
  v22 = *(_QWORD *)(v0 + 1120);
  v23 = *(_QWORD *)(v0 + 1096);
  v24 = *(_QWORD *)(v0 + 1088);
  v25 = *(_QWORD *)(v0 + 1080);
  v26 = *(_QWORD *)(v0 + 1072);
  v27 = *(_QWORD *)(v0 + 1064);
  v28 = *(_QWORD *)(v0 + 1056);
  v29 = *(_QWORD *)(v0 + 1048);
  v30 = *(_QWORD *)(v0 + 1040);
  v31 = *(_QWORD *)(v0 + 1016);
  v32 = *(_QWORD *)(v0 + 1008);
  v33 = *(_QWORD *)(v0 + 1000);
  v34 = *(_QWORD *)(v0 + 992);
  v35 = *(_QWORD *)(v0 + 968);
  v36 = *(_QWORD *)(v0 + 960);
  sub_1000126B0(v10, type metadata accessor for BeaconIdentifier);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100B3C9A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 1256) + 128);
  *(_QWORD *)(v0 + 1264) = v1;
  if (v1)
  {
    swift_retain();
    v2 = sub_100B3C9FC;
  }
  else
  {
    v2 = sub_100B3CFB4;
  }
  return swift_task_switch(v2, 0, 0);
}

uint64_t sub_100B3C9FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  Swift::String v22;
  Swift::String v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  _BYTE *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;

  v1 = *(_QWORD *)(v0 + 912);
  v2 = (uint64_t *)(v1 + *(int *)(type metadata accessor for KeyGenerationBeaconInfo(0) + 24));
  v3 = *v2;
  *(_QWORD *)(v0 + 1272) = *v2;
  v4 = v2[1];
  *(_QWORD *)(v0 + 1280) = v4;
  v5 = v2[2];
  *(_QWORD *)(v0 + 1288) = v5;
  v6 = v2[3];
  *(_QWORD *)(v0 + 1296) = v6;
  v7 = v2[4];
  *(_QWORD *)(v0 + 1304) = v7;
  v8 = v2[5];
  *(_QWORD *)(v0 + 1312) = v8;
  if (v4 >> 60 == 15)
  {
    if (qword_1010E9F38 != -1)
      swift_once(&qword_1010E9F38, sub_1007A03F4);
    v9 = *(_QWORD *)(v0 + 1224);
    v10 = *(_QWORD *)(v0 + 1216);
    v11 = type metadata accessor for Logger(0);
    sub_10001A9E8(v11, (uint64_t)qword_1011B7660);
    v12 = sub_10005972C(v9, v10, type metadata accessor for BeaconIdentifier);
    v13 = Logger.logObject.getter(v12);
    v14 = static os_log_type_t.error.getter(v13);
    v15 = os_log_type_enabled(v13, v14);
    v16 = *(_QWORD *)(v0 + 1216);
    if (v15)
    {
      v17 = *(_QWORD *)(v0 + 944);
      v18 = swift_slowAlloc(22, -1);
      v19 = swift_slowAlloc(32, -1);
      v62 = v19;
      *(_DWORD *)v18 = 141558275;
      *(_QWORD *)(v0 + 712) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 712, v0 + 720, v18 + 4, v18 + 12);
      *(_WORD *)(v18 + 12) = 2081;
      v20 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v63 = dispatch thunk of CustomStringConvertible.description.getter(v17, v20);
      v64 = v21;
      v22._countAndFlagsBits = 47;
      v22._object = (void *)0xE100000000000000;
      String.append(_:)(v22);
      v23._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v17, v20);
      String.append(_:)(v23);
      swift_bridgeObjectRelease();
      *(_QWORD *)(v0 + 704) = sub_100016940(v63, v64, &v62);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 704, v0 + 712, v18 + 14, v18 + 22);
      swift_bridgeObjectRelease();
      sub_1000126B0(v16, type metadata accessor for BeaconIdentifier);
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Missing keys from %{private,mask.hash}s", (uint8_t *)v18, 0x16u);
      swift_arrayDestroy(v19, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v19, -1, -1);
      swift_slowDealloc(v18, -1, -1);
    }
    else
    {
      sub_1000126B0(*(_QWORD *)(v0 + 1216), type metadata accessor for BeaconIdentifier);
    }

    v30 = sub_100B4AB9C();
    v61 = swift_allocError(&type metadata for ManagedCBPeripheralError, v30, 0, 0);
    *v31 = 2;
    swift_willThrow(v61);
    swift_release();
    swift_release();
    swift_release();
    v32 = *(_QWORD *)(v0 + 1224);
    v33 = *(_QWORD *)(v0 + 1216);
    v34 = *(_QWORD *)(v0 + 1208);
    v35 = *(_QWORD *)(v0 + 1200);
    v36 = *(_QWORD *)(v0 + 1192);
    v37 = *(_QWORD *)(v0 + 1184);
    v38 = *(_QWORD *)(v0 + 1176);
    v39 = *(_QWORD *)(v0 + 1168);
    v40 = *(_QWORD *)(v0 + 1152);
    v43 = *(_QWORD *)(v0 + 1144);
    v44 = *(_QWORD *)(v0 + 1136);
    v45 = *(_QWORD *)(v0 + 1128);
    v46 = *(_QWORD *)(v0 + 1120);
    v47 = *(_QWORD *)(v0 + 1096);
    v48 = *(_QWORD *)(v0 + 1088);
    v49 = *(_QWORD *)(v0 + 1080);
    v50 = *(_QWORD *)(v0 + 1072);
    v51 = *(_QWORD *)(v0 + 1064);
    v52 = *(_QWORD *)(v0 + 1056);
    v53 = *(_QWORD *)(v0 + 1048);
    v54 = *(_QWORD *)(v0 + 1040);
    v55 = *(_QWORD *)(v0 + 1016);
    v56 = *(_QWORD *)(v0 + 1008);
    v57 = *(_QWORD *)(v0 + 1000);
    v58 = *(_QWORD *)(v0 + 992);
    v59 = *(_QWORD *)(v0 + 968);
    v60 = *(_QWORD *)(v0 + 960);
    sub_1000126B0(v32, type metadata accessor for BeaconIdentifier);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    swift_task_dealloc(v36);
    swift_task_dealloc(v37);
    swift_task_dealloc(v38);
    swift_task_dealloc(v39);
    swift_task_dealloc(v40);
    swift_task_dealloc(v43);
    swift_task_dealloc(v44);
    swift_task_dealloc(v45);
    swift_task_dealloc(v46);
    swift_task_dealloc(v47);
    swift_task_dealloc(v48);
    swift_task_dealloc(v49);
    swift_task_dealloc(v50);
    swift_task_dealloc(v51);
    swift_task_dealloc(v52);
    swift_task_dealloc(v53);
    swift_task_dealloc(v54);
    swift_task_dealloc(v55);
    swift_task_dealloc(v56);
    swift_task_dealloc(v57);
    swift_task_dealloc(v58);
    swift_task_dealloc(v59);
    swift_task_dealloc(v60);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    sub_10001BBBC(v3, v4);
    sub_10001BBBC(v5, v6);
    sub_10001BD08(v7, v8);
    PrivateKey.publicKey.getter(v3, v4);
    *(_QWORD *)(v0 + 1320) = v24;
    *(_QWORD *)(v0 + 1328) = v25;
    *(_QWORD *)(v0 + 208) = v24;
    *(_QWORD *)(v0 + 216) = v25;
    *(_QWORD *)(v0 + 224) = v3;
    *(_QWORD *)(v0 + 232) = v4;
    *(_QWORD *)(v0 + 240) = v5;
    *(_QWORD *)(v0 + 248) = v6;
    if (v8 >> 60 == 15)
    {
      sub_10001BBBC(v5, v6);
      v26 = 0;
      v27 = 0;
      v28 = 0;
      v7 = 0;
      v8 = 0;
      v29 = 0xF000000000000000;
    }
    else
    {
      sub_10001BBBC(v3, v4);
      sub_10001BBBC(v5, v6);
      sub_10001BD08(v7, v8);
      PrivateKey.publicKey.getter(v3, v4);
      v27 = v3;
      v28 = v4;
    }
    *(_QWORD *)(v0 + 1376) = v8;
    *(_QWORD *)(v0 + 1368) = v7;
    *(_QWORD *)(v0 + 1360) = v28;
    *(_QWORD *)(v0 + 1352) = v27;
    *(_QWORD *)(v0 + 1344) = v29;
    *(_QWORD *)(v0 + 1336) = v26;
    *(_QWORD *)(v0 + 160) = v26;
    *(_QWORD *)(v0 + 168) = v29;
    *(_QWORD *)(v0 + 176) = v27;
    *(_QWORD *)(v0 + 184) = v28;
    *(_QWORD *)(v0 + 192) = v7;
    *(_QWORD *)(v0 + 200) = v8;
    sub_10001BBBC(v3, v4);
    v42 = (_QWORD *)swift_task_alloc(dword_10111BAF4);
    *(_QWORD *)(v0 + 1384) = v42;
    *v42 = v0;
    v42[1] = sub_100B3D270;
    return sub_100C654F4(*(_QWORD *)(v0 + 1096), *(_QWORD *)(v0 + 1224));
  }
}

uint64_t sub_100B3CFB4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  unint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  if (qword_1010E9F38 != -1)
    swift_once(&qword_1010E9F38, sub_1007A03F4);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_10001A9E8(v1, (uint64_t)qword_1011B7660);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Missing LTKGenerator!", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }

  v6 = sub_100B4AB9C();
  v36 = swift_allocError(&type metadata for ManagedCBPeripheralError, v6, 0, 0);
  *v7 = 1;
  swift_willThrow(v36);
  swift_release();
  swift_release();
  v8 = *(_QWORD *)(v0 + 1224);
  v9 = *(_QWORD *)(v0 + 1216);
  v10 = *(_QWORD *)(v0 + 1208);
  v11 = *(_QWORD *)(v0 + 1200);
  v12 = *(_QWORD *)(v0 + 1192);
  v13 = *(_QWORD *)(v0 + 1184);
  v14 = *(_QWORD *)(v0 + 1176);
  v15 = *(_QWORD *)(v0 + 1168);
  v16 = *(_QWORD *)(v0 + 1152);
  v18 = *(_QWORD *)(v0 + 1144);
  v19 = *(_QWORD *)(v0 + 1136);
  v20 = *(_QWORD *)(v0 + 1128);
  v21 = *(_QWORD *)(v0 + 1120);
  v22 = *(_QWORD *)(v0 + 1096);
  v23 = *(_QWORD *)(v0 + 1088);
  v24 = *(_QWORD *)(v0 + 1080);
  v25 = *(_QWORD *)(v0 + 1072);
  v26 = *(_QWORD *)(v0 + 1064);
  v27 = *(_QWORD *)(v0 + 1056);
  v28 = *(_QWORD *)(v0 + 1048);
  v29 = *(_QWORD *)(v0 + 1040);
  v30 = *(_QWORD *)(v0 + 1016);
  v31 = *(_QWORD *)(v0 + 1008);
  v32 = *(_QWORD *)(v0 + 1000);
  v33 = *(_QWORD *)(v0 + 992);
  v34 = *(_QWORD *)(v0 + 968);
  v35 = *(_QWORD *)(v0 + 960);
  sub_1000126B0(v8, type metadata accessor for BeaconIdentifier);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100B3D270()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 1384);
  *(_QWORD *)(*(_QWORD *)v1 + 1392) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_100B3E6D0;
  else
    v3 = sub_100B3D2D4;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_100B3D2D4()
{
  uint64_t v0;
  uint64_t v1;
  __int128 *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  Swift::String v16;
  Swift::String v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  Swift::String v47;
  Swift::String v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  NSObject *v56;
  os_log_type_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  __int128 *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  NSObject *v89;
  os_log_type_t v90;
  BOOL v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  Swift::String v99;
  Swift::String v100;
  uint64_t v101;
  NSObject *v102;
  os_log_type_t v103;
  BOOL v104;
  uint64_t v105;
  uint8_t *v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  char v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  unint64_t v116;
  uint64_t v117;
  NSObject *v118;
  os_log_type_t v119;
  BOOL v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  Swift::String v125;
  Swift::String v126;
  unint64_t v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  _QWORD *v138;
  unint64_t v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  char v149;
  _QWORD *v150;
  uint64_t v151;
  _QWORD *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  os_log_type_t v157;
  NSObject *log;
  os_log_t loga;
  os_log_t logb;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  char v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  unint64_t v172;

  v1 = v0 + 160;
  v2 = (__int128 *)(v0 + 208);
  v3 = *(_QWORD *)(v0 + 1096);
  if ((*(unsigned int (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 1112) + 48))(v3, 1, *(_QWORD *)(v0 + 1104)) == 1)
  {
    sub_100004048(v3, &qword_1010F0F00);
    if (qword_1010E9F38 != -1)
      swift_once(&qword_1010E9F38, sub_1007A03F4);
    v4 = *(_QWORD *)(v0 + 1224);
    v5 = *(_QWORD *)(v0 + 1208);
    v6 = type metadata accessor for Logger(0);
    sub_10001A9E8(v6, (uint64_t)qword_1011B7660);
    v7 = sub_10005972C(v4, v5, type metadata accessor for BeaconIdentifier);
    v8 = Logger.logObject.getter(v7);
    v9 = static os_log_type_t.default.getter(v8);
    v10 = os_log_type_enabled(v8, v9);
    v11 = *(_QWORD *)(v0 + 1208);
    if (v10)
    {
      v12 = *(_QWORD *)(v0 + 944);
      v13 = swift_slowAlloc(22, -1);
      v162 = swift_slowAlloc(32, -1);
      v170 = v162;
      *(_DWORD *)v13 = 141558275;
      *(_QWORD *)(v0 + 664) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 664, v0 + 672, v13 + 4, v13 + 12);
      *(_WORD *)(v13 + 12) = 2081;
      v14 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v171 = dispatch thunk of CustomStringConvertible.description.getter(v12, v14);
      v172 = v15;
      v16._countAndFlagsBits = 47;
      v16._object = (void *)0xE100000000000000;
      String.append(_:)(v16);
      v17._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v12, v14);
      String.append(_:)(v17);
      v1 = v0 + 160;
      v2 = (__int128 *)(v0 + 208);
      swift_bridgeObjectRelease();
      *(_QWORD *)(v0 + 672) = sub_100016940(v171, v172, &v170);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 672, v0 + 680, v13 + 14, v13 + 22);
      swift_bridgeObjectRelease();
      sub_1000126B0(v11, type metadata accessor for BeaconIdentifier);
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "No observed advertisement for beacon %{private,mask.hash}s.", (uint8_t *)v13, 0x16u);
      swift_arrayDestroy(v162, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v162, -1, -1);
      swift_slowDealloc(v13, -1, -1);
    }
    else
    {
      sub_1000126B0(*(_QWORD *)(v0 + 1208), type metadata accessor for BeaconIdentifier);
    }

    v30 = (_QWORD *)swift_task_alloc(dword_101115CBC);
    *(_QWORD *)(v0 + 1704) = v30;
    *v30 = v0;
    v30[1] = sub_100B43640;
    return sub_100B46DE8(*(_QWORD *)(v0 + 912), v2, v1, *(_QWORD *)(v0 + 920), *(_QWORD *)(v0 + 928), *(_QWORD *)(v0 + 936));
  }
  else
  {
    sub_1000126EC(v3, *(_QWORD *)(v0 + 1152), type metadata accessor for ObservedAdvertisement);
    if (qword_1010E9F38 != -1)
      swift_once(&qword_1010E9F38, sub_1007A03F4);
    v163 = v0 + 696;
    v18 = *(_QWORD *)(v0 + 1152);
    v19 = *(_QWORD *)(v0 + 1144);
    v20 = type metadata accessor for Logger(0);
    *(_QWORD *)(v0 + 1400) = sub_10001A9E8(v20, (uint64_t)qword_1011B7660);
    v21 = sub_10005972C(v18, v19, type metadata accessor for ObservedAdvertisement);
    v22 = Logger.logObject.getter(v21);
    v23 = static os_log_type_t.default.getter(v22);
    v24 = os_log_type_enabled(v22, v23);
    v25 = *(_QWORD *)(v0 + 1144);
    v166 = v0 + 160;
    if (v24)
    {
      v26 = swift_slowAlloc(22, -1);
      v27 = swift_slowAlloc(32, -1);
      v171 = v27;
      *(_DWORD *)v26 = 141558275;
      *(_QWORD *)(v0 + 896) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 896, v0 + 904, v26 + 4, v26 + 12);
      *(_WORD *)(v26 + 12) = 2081;
      sub_10016E3E4();
      *(_QWORD *)(v0 + 904) = sub_100016940(v28, v29, &v171);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 904, v0 + 912, v26 + 14, v26 + 22);
      swift_bridgeObjectRelease();
      sub_1000126B0(v25, type metadata accessor for ObservedAdvertisement);
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "Found observed advertisement %{private,mask.hash}s.", (uint8_t *)v26, 0x16u);
      swift_arrayDestroy(v27, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v27, -1, -1);
      swift_slowDealloc(v26, -1, -1);
    }
    else
    {
      sub_1000126B0(v25, type metadata accessor for ObservedAdvertisement);
    }

    v32 = *(_QWORD *)(v0 + 1032);
    v33 = *(_QWORD *)(v0 + 1024);
    v34 = *(_QWORD *)(v0 + 1016);
    sub_10000F9B8(*(_QWORD *)(v0 + 1152) + *(int *)(*(_QWORD *)(v0 + 1104) + 52), v34, &qword_1010EF3F8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v32 + 48))(v34, 1, v33) == 1)
    {
      v35 = *(_QWORD *)(v0 + 1224);
      v36 = *(_QWORD *)(v0 + 1200);
      sub_100004048(*(_QWORD *)(v0 + 1016), &qword_1010EF3F8);
      v37 = sub_10005972C(v35, v36, type metadata accessor for BeaconIdentifier);
      v38 = Logger.logObject.getter(v37);
      v39 = static os_log_type_t.error.getter(v38);
      v40 = os_log_type_enabled(v38, v39);
      v41 = *(_QWORD *)(v0 + 1200);
      if (v40)
      {
        v42 = *(_QWORD *)(v0 + 944);
        v43 = swift_slowAlloc(22, -1);
        v44 = swift_slowAlloc(32, -1);
        v170 = v44;
        *(_DWORD *)v43 = 141558275;
        *(_QWORD *)(v0 + 680) = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 680, v0 + 688, v43 + 4, v43 + 12);
        *(_WORD *)(v43 + 12) = 2081;
        v45 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v171 = dispatch thunk of CustomStringConvertible.description.getter(v42, v45);
        v172 = v46;
        v47._countAndFlagsBits = 47;
        v47._object = (void *)0xE100000000000000;
        String.append(_:)(v47);
        v48._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v42, v45);
        String.append(_:)(v48);
        swift_bridgeObjectRelease();
        *(_QWORD *)(v0 + 688) = sub_100016940(v171, v172, &v170);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 688, v163, v43 + 14, v43 + 22);
        swift_bridgeObjectRelease();
        sub_1000126B0(v41, type metadata accessor for BeaconIdentifier);
        _os_log_impl((void *)&_mh_execute_header, v38, v39, "Missing beaconIndexInformation for %{private,mask.hash}s!", (uint8_t *)v43, 0x16u);
        swift_arrayDestroy(v44, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v44, -1, -1);
        swift_slowDealloc(v43, -1, -1);
      }
      else
      {
        sub_1000126B0(*(_QWORD *)(v0 + 1200), type metadata accessor for BeaconIdentifier);
      }

      v69 = (_QWORD *)swift_task_alloc(dword_101115CBC);
      *(_QWORD *)(v0 + 1680) = v69;
      *v69 = v0;
      v69[1] = sub_100B43058;
      return sub_100B46DE8(*(_QWORD *)(v0 + 912), (__int128 *)(v0 + 208), v166, *(_QWORD *)(v0 + 920), *(_QWORD *)(v0 + 928), *(_QWORD *)(v0 + 936));
    }
    else
    {
      v49 = *(_QWORD *)(v0 + 1152);
      v50 = *(_QWORD *)(v0 + 1136);
      v51 = *(_QWORD *)(v0 + 1088);
      v52 = *(_QWORD *)(v0 + 1080);
      v53 = *(_QWORD *)(v0 + 1072);
      v54 = *(_QWORD *)(v0 + 1064);
      sub_1000126EC(*(_QWORD *)(v0 + 1016), v51, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
      sub_10005972C(v51, v52, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
      sub_10005972C(v51, v53, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
      sub_10005972C(v51, v54, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
      v55 = sub_10005972C(v49, v50, type metadata accessor for ObservedAdvertisement);
      v56 = Logger.logObject.getter(v55);
      v57 = static os_log_type_t.default.getter(v56);
      if (os_log_type_enabled(v56, v57))
      {
        v157 = v57;
        log = v56;
        v58 = *(_QWORD *)(v0 + 1080);
        v59 = *(_QWORD *)(v0 + 1072);
        v154 = v0 + 880;
        v155 = v0 + 888;
        v153 = *(_QWORD *)(v0 + 1064);
        v60 = *(_QWORD *)(v0 + 1024);
        v61 = *(_QWORD *)(v0 + 944);
        v62 = swift_slowAlloc(62, -1);
        v156 = swift_slowAlloc(96, -1);
        v171 = v156;
        *(_DWORD *)v62 = 141559299;
        *(_QWORD *)(v0 + 848) = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 848, v0 + 856, v62 + 4, v62 + 12);
        *(_WORD *)(v62 + 12) = 2081;
        v63 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v64 = dispatch thunk of CustomStringConvertible.description.getter(v61, v63);
        *(_QWORD *)(v0 + 856) = sub_100016940(v64, v65, &v171);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 856, v0 + 864, v62 + 14, v62 + 22);
        swift_bridgeObjectRelease();
        sub_1000126B0(v58, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
        *(_WORD *)(v62 + 22) = 2048;
        v66 = *(_QWORD *)(v59 + *(int *)(v60 + 24));
        sub_1000126B0(v59, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
        *(_QWORD *)(v0 + 864) = v66;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 864, v0 + 872, v62 + 24, v62 + 32);
        *(_WORD *)(v62 + 32) = 2082;
        if (*(_BYTE *)(v153 + *(int *)(v60 + 20)))
        {
          if (*(_BYTE *)(v153 + *(int *)(v60 + 20)) == 1)
          {
            v67 = 0x61646E6F6365732ELL;
            v68 = 0xEA00000000007972;
          }
          else
          {
            v68 = 0x8000000100EC6940;
            v67 = 0xD000000000000010;
          }
        }
        else
        {
          v67 = 0x7972616D6972702ELL;
          v68 = 0xE800000000000000;
        }
        v74 = *(_QWORD *)(v0 + 1136);
        v75 = *(_QWORD *)(v0 + 1064);
        *(_QWORD *)(v0 + 872) = sub_100016940(v67, v68, &v171);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 872, v154, v62 + 34, v62 + 42);
        swift_bridgeObjectRelease();
        sub_1000126B0(v75, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
        *(_WORD *)(v62 + 42) = 2160;
        *(_QWORD *)(v0 + 880) = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v154, v155, v62 + 44, v62 + 52);
        *(_WORD *)(v62 + 52) = 2081;
        v76 = *(_QWORD *)(v74 + 16);
        v77 = *(_QWORD *)(v74 + 24);
        sub_10012C644(v76, v77);
        v78 = sub_1001B495C(v76, v77);
        v80 = v79;
        sub_10012C494(v76, v77);
        *(_QWORD *)(v0 + 888) = sub_100016940(v78, v80, &v171);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v155, v0 + 896, v62 + 54, v62 + 62);
        swift_bridgeObjectRelease();
        sub_1000126B0(v74, type metadata accessor for ObservedAdvertisement);
        _os_log_impl((void *)&_mh_execute_header, log, v157, "Last observed beacon: %{private,mask.hash}s, index: %llu, sequence: %{public}s, advertisement: %{private,mask.hash}s.", (uint8_t *)v62, 0x3Eu);
        swift_arrayDestroy(v156, 3, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v156, -1, -1);
        swift_slowDealloc(v62, -1, -1);

        v73 = (__int128 *)(v0 + 208);
      }
      else
      {
        v70 = *(_QWORD *)(v0 + 1136);
        v71 = *(_QWORD *)(v0 + 1080);
        v72 = *(_QWORD *)(v0 + 1064);
        sub_1000126B0(*(_QWORD *)(v0 + 1072), type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
        sub_1000126B0(v71, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
        sub_1000126B0(v72, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
        sub_1000126B0(v70, type metadata accessor for ObservedAdvertisement);

        v73 = (__int128 *)(v0 + 208);
      }
      v81 = *(_QWORD *)(v0 + 1088);
      v82 = *(_QWORD *)(v0 + 1024);
      v83 = *(int *)(v82 + 20);
      *(_DWORD *)(v0 + 1728) = v83;
      v84 = *(unsigned __int8 *)(v81 + v83);
      if (*(_BYTE *)(v81 + v83) && v84 != 1)
      {
        v101 = sub_10005972C(v81, *(_QWORD *)(v0 + 1056), type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
        v102 = Logger.logObject.getter(v101);
        v103 = static os_log_type_t.error.getter(v102);
        v104 = os_log_type_enabled(v102, v103);
        v105 = *(_QWORD *)(v0 + 1056);
        if (v104)
        {
          v106 = (uint8_t *)swift_slowAlloc(12, -1);
          v107 = swift_slowAlloc(32, -1);
          v171 = v107;
          *(_DWORD *)v106 = 136446210;
          if (*(_BYTE *)(v105 + *(int *)(v82 + 20)))
          {
            if (*(_BYTE *)(v105 + *(int *)(v82 + 20)) == 1)
            {
              v108 = 0x61646E6F6365732ELL;
              v109 = 0xEA00000000007972;
            }
            else
            {
              v109 = 0x8000000100EC6940;
              v108 = 0xD000000000000010;
            }
          }
          else
          {
            v108 = 0x7972616D6972702ELL;
            v109 = 0xE800000000000000;
          }
          v151 = *(_QWORD *)(v0 + 1056);
          *(_QWORD *)(v0 + 696) = sub_100016940(v108, v109, &v171);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v163, v0 + 704, v106 + 4, v106 + 12);
          swift_bridgeObjectRelease();
          sub_1000126B0(v151, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
          _os_log_impl((void *)&_mh_execute_header, v102, v103, "Invalid key sequence %{public}s", v106, 0xCu);
          swift_arrayDestroy(v107, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v107, -1, -1);
          swift_slowDealloc(v106, -1, -1);
        }
        else
        {
          sub_1000126B0(*(_QWORD *)(v0 + 1056), type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
        }

        v152 = (_QWORD *)swift_task_alloc(dword_101115CBC);
        *(_QWORD *)(v0 + 1656) = v152;
        *v152 = v0;
        v152[1] = sub_100B42A28;
        return sub_100B46DE8(*(_QWORD *)(v0 + 912), v73, v166, *(_QWORD *)(v0 + 920), *(_QWORD *)(v0 + 928), *(_QWORD *)(v0 + 936));
      }
      else
      {
        v169 = v83;
        *(_BYTE *)(v0 + 1736) = v84;
        v85 = *(_QWORD *)(v0 + 1152);
        v86 = *(_QWORD *)(v0 + 1224);
        if ((*(_BYTE *)(v85 + 35) & 1) != 0)
        {
          v87 = *(_QWORD *)(v0 + 1184);
          v168 = v81;
          sub_10005972C(v81, *(_QWORD *)(v0 + 1048), type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
          v88 = sub_10005972C(v86, v87, type metadata accessor for BeaconIdentifier);
          v89 = Logger.logObject.getter(v88);
          v90 = static os_log_type_t.info.getter(v89);
          v91 = os_log_type_enabled(v89, v90);
          v92 = *(_QWORD *)(v0 + 1184);
          if (v91)
          {
            v93 = *(_QWORD *)(v0 + 1048);
            v94 = *(_QWORD *)(v0 + 1024);
            loga = *(os_log_t *)(v0 + 944);
            v95 = swift_slowAlloc(32, -1);
            v164 = swift_slowAlloc(32, -1);
            v170 = v164;
            *(_DWORD *)v95 = 134218499;
            v96 = *(_QWORD *)(v93 + *(int *)(v94 + 24));
            sub_1000126B0(v93, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
            *(_QWORD *)(v0 + 800) = v96;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 800, v0 + 808, v95 + 4, v95 + 12);
            *(_WORD *)(v95 + 12) = 2160;
            *(_QWORD *)(v0 + 808) = 1752392040;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 808, v0 + 816, v95 + 14, v95 + 22);
            *(_WORD *)(v95 + 22) = 2081;
            v97 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
            v171 = dispatch thunk of CustomStringConvertible.description.getter(loga, v97);
            v172 = v98;
            v99._countAndFlagsBits = 47;
            v99._object = (void *)0xE100000000000000;
            String.append(_:)(v99);
            v100._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(loga, v97);
            String.append(_:)(v100);
            swift_bridgeObjectRelease();
            *(_QWORD *)(v0 + 816) = sub_100016940(v171, v172, &v170);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 816, v0 + 824, v95 + 24, v95 + 32);
            swift_bridgeObjectRelease();
            sub_1000126B0(v92, type metadata accessor for BeaconIdentifier);
            _os_log_impl((void *)&_mh_execute_header, v89, v90, "Using last observed index %llu for beacon %{private,mask.hash}s", (uint8_t *)v95, 0x20u);
            swift_arrayDestroy(v164, 1, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v164, -1, -1);
            swift_slowDealloc(v95, -1, -1);
          }
          else
          {
            sub_1000126B0(*(_QWORD *)(v0 + 1048), type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
            sub_1000126B0(v92, type metadata accessor for BeaconIdentifier);
          }

          v127 = *(_QWORD *)(v0 + 1328);
          v128 = *(_QWORD *)(v0 + 1320);
          v129 = *(_QWORD *)(v0 + 1296);
          v130 = *(_QWORD *)(v0 + 1288);
          v131 = *(_QWORD *)(v0 + 1280);
          v132 = *(_QWORD *)(v0 + 1272);
          v161 = *(_QWORD *)(v0 + 1264);
          v133 = *(_QWORD *)(v0 + 1088);
          v134 = *(_QWORD *)(v0 + 1024);
          v135 = sub_10001A9A8((uint64_t *)&unk_101108FF0);
          v136 = swift_allocObject(v135, 80, 7);
          *(_QWORD *)(v0 + 1608) = v136;
          *(_OWORD *)(v136 + 16) = xmmword_100E22B00;
          *(_QWORD *)(v0 + 16) = v128;
          *(_QWORD *)(v0 + 24) = v127;
          *(_QWORD *)(v0 + 32) = v132;
          *(_QWORD *)(v0 + 40) = v131;
          *(_QWORD *)(v0 + 48) = v130;
          *(_QWORD *)(v0 + 56) = v129;
          v137 = *(_QWORD *)(v133 + *(int *)(v134 + 24));
          LOBYTE(v134) = *(_BYTE *)(v168 + v169);
          sub_10001BBBC(v128, v127);
          sub_10001BBBC(v132, v131);
          sub_10001BBBC(v130, v129);
          v138 = (_QWORD *)swift_task_alloc(dword_1010F551C);
          *(_QWORD *)(v0 + 1616) = v138;
          *v138 = v0;
          v138[1] = sub_100B41998;
          return sub_1002ADDB8(v0 + 256, *(_QWORD *)(v0 + 1224), v0 + 16, v166, v134, v137, v161, 4000);
        }
        else
        {
          v110 = *(_BYTE *)(v85 + 34);
          v111 = *(_QWORD *)(v0 + 1192);
          v112 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
          v113 = swift_allocObject(v112, 72, 7);
          *(_OWORD *)(v113 + 16) = xmmword_100E22B00;
          *(_QWORD *)(v113 + 56) = &type metadata for UInt8;
          *(_QWORD *)(v113 + 64) = &protocol witness table for UInt8;
          v167 = v110;
          *(_BYTE *)(v113 + 32) = v110;
          v114 = String.init(format:_:)(1479684133, 0xE400000000000000, v113);
          v116 = v115;
          sub_10005972C(v86, v111, type metadata accessor for BeaconIdentifier);
          swift_bridgeObjectRetain(v116);
          v118 = Logger.logObject.getter(v117);
          v119 = static os_log_type_t.info.getter(v118);
          v120 = os_log_type_enabled(v118, v119);
          v121 = *(_QWORD *)(v0 + 1192);
          if (v120)
          {
            logb = *(os_log_t *)(v0 + 944);
            v122 = swift_slowAlloc(32, -1);
            v165 = swift_slowAlloc(64, -1);
            v170 = v165;
            *(_DWORD *)v122 = 136446723;
            swift_bridgeObjectRetain(v116);
            *(_QWORD *)(v0 + 824) = sub_100016940(v114, v116, &v170);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 824, v0 + 832, v122 + 4, v122 + 12);
            swift_bridgeObjectRelease_n(v116, 3);
            *(_WORD *)(v122 + 12) = 2160;
            *(_QWORD *)(v0 + 832) = 1752392040;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 832, v0 + 840, v122 + 14, v122 + 22);
            *(_WORD *)(v122 + 22) = 2081;
            v123 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
            v171 = dispatch thunk of CustomStringConvertible.description.getter(logb, v123);
            v172 = v124;
            v125._countAndFlagsBits = 47;
            v125._object = (void *)0xE100000000000000;
            String.append(_:)(v125);
            v126._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(logb, v123);
            String.append(_:)(v126);
            swift_bridgeObjectRelease();
            *(_QWORD *)(v0 + 840) = sub_100016940(v171, v172, &v170);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 840, v0 + 848, v122 + 24, v122 + 32);
            swift_bridgeObjectRelease();
            sub_1000126B0(v121, type metadata accessor for BeaconIdentifier);
            _os_log_impl((void *)&_mh_execute_header, v118, v119, "Hint %{public}s is available for %{private,mask.hash}s", (uint8_t *)v122, 0x20u);
            swift_arrayDestroy(v165, 2, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v165, -1, -1);
            swift_slowDealloc(v122, -1, -1);
          }
          else
          {
            swift_bridgeObjectRelease_n(v116, 2);
            sub_1000126B0(v121, type metadata accessor for BeaconIdentifier);
          }

          v139 = *(_QWORD *)(v0 + 1328);
          v140 = *(_QWORD *)(v0 + 1320);
          v141 = *(_QWORD *)(v0 + 1296);
          v142 = *(_QWORD *)(v0 + 1288);
          v143 = *(_QWORD *)(v0 + 1280);
          v144 = *(_QWORD *)(v0 + 1272);
          v145 = *(_QWORD *)(v0 + 1264);
          v146 = *(_QWORD *)(v0 + 1088);
          v147 = *(_QWORD *)(v0 + 1024);
          *(_QWORD *)(v0 + 64) = v140;
          *(_QWORD *)(v0 + 72) = v139;
          *(_QWORD *)(v0 + 80) = v144;
          *(_QWORD *)(v0 + 88) = v143;
          *(_QWORD *)(v0 + 96) = v142;
          *(_QWORD *)(v0 + 104) = v141;
          v148 = *(_QWORD *)(v146 + *(int *)(v147 + 24));
          v149 = *(_BYTE *)(v81 + v169);
          sub_10001BBBC(v140, v139);
          sub_10001BBBC(v144, v143);
          sub_10001BBBC(v142, v141);
          v150 = (_QWORD *)swift_task_alloc(dword_1010F5534);
          *(_QWORD *)(v0 + 1408) = v150;
          *v150 = v0;
          v150[1] = sub_100B3E964;
          return sub_1002AF3A0(*(_QWORD *)(v0 + 1224), v0 + 64, v149, v148, v167, v145, 4000);
        }
      }
    }
  }
}

uint64_t sub_100B3E6D0()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v1 = *(_QWORD *)(v0 + 1328);
  v2 = *(_QWORD *)(v0 + 1320);
  v33 = *(_QWORD *)(v0 + 1304);
  v3 = *(_QWORD *)(v0 + 1296);
  v4 = *(_QWORD *)(v0 + 1288);
  v5 = *(_QWORD *)(v0 + 1280);
  v6 = *(_QWORD *)(v0 + 1272);
  v36 = *(_QWORD *)(v0 + 1312);
  sub_100758808(*(_QWORD *)(v0 + 1336), *(_QWORD *)(v0 + 1344), *(_QWORD *)(v0 + 1352), *(_QWORD *)(v0 + 1360), *(_QWORD *)(v0 + 1368), *(_QWORD *)(v0 + 1376), (void (*)(void))sub_10001BC14, (uint64_t (*)(uint64_t, uint64_t))sub_10001BC14);
  sub_10001BC14(v2, v1);
  sub_10001BC14(v6, v5);
  sub_10001BC14(v4, v3);
  swift_release();
  swift_release();
  sub_100758808(v6, v5, v4, v3, v33, v36, (void (*)(void))sub_10001BC14, (uint64_t (*)(uint64_t, uint64_t))sub_1000FC25C);
  swift_release();
  v7 = *(_QWORD *)(v0 + 1224);
  v8 = *(_QWORD *)(v0 + 1216);
  v9 = *(_QWORD *)(v0 + 1208);
  v10 = *(_QWORD *)(v0 + 1200);
  v11 = *(_QWORD *)(v0 + 1192);
  v12 = *(_QWORD *)(v0 + 1184);
  v13 = *(_QWORD *)(v0 + 1176);
  v14 = *(_QWORD *)(v0 + 1168);
  v15 = *(_QWORD *)(v0 + 1152);
  v17 = *(_QWORD *)(v0 + 1144);
  v18 = *(_QWORD *)(v0 + 1136);
  v19 = *(_QWORD *)(v0 + 1128);
  v20 = *(_QWORD *)(v0 + 1120);
  v21 = *(_QWORD *)(v0 + 1096);
  v22 = *(_QWORD *)(v0 + 1088);
  v23 = *(_QWORD *)(v0 + 1080);
  v24 = *(_QWORD *)(v0 + 1072);
  v25 = *(_QWORD *)(v0 + 1064);
  v26 = *(_QWORD *)(v0 + 1056);
  v27 = *(_QWORD *)(v0 + 1048);
  v28 = *(_QWORD *)(v0 + 1040);
  v29 = *(_QWORD *)(v0 + 1016);
  v30 = *(_QWORD *)(v0 + 1008);
  v31 = *(_QWORD *)(v0 + 1000);
  v32 = *(_QWORD *)(v0 + 992);
  v34 = *(_QWORD *)(v0 + 968);
  v35 = *(_QWORD *)(v0 + 960);
  sub_1000126B0(v7, type metadata accessor for BeaconIdentifier);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100B3E964(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t (*v12)();

  v4 = *(_QWORD **)v2;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 1408);
  *(_QWORD *)(*(_QWORD *)v2 + 1416) = v1;
  swift_task_dealloc(v5);
  v6 = v4[166];
  v7 = v4[165];
  v8 = v4[162];
  v9 = v4[161];
  v10 = v4[160];
  v11 = v4[159];
  if (v1)
  {
    sub_10001BC14(v7, v6);
    sub_10001BC14(v11, v10);
    sub_10001BC14(v9, v8);
    v12 = sub_100B3EB3C;
  }
  else
  {
    v4[178] = a1;
    sub_10001BC14(v7, v6);
    sub_10001BC14(v11, v10);
    sub_10001BC14(v9, v8);
    v12 = sub_100B3EA38;
  }
  return swift_task_switch(v12, 0, 0);
}

uint64_t sub_100B3EA38()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  _QWORD *v14;

  *(_QWORD *)(v0 + 1432) = *(_QWORD *)(v0 + 1424);
  v1 = *(int *)(v0 + 1728);
  v2 = *(_QWORD *)(v0 + 1328);
  v3 = *(_QWORD *)(v0 + 1320);
  v4 = *(_QWORD *)(v0 + 1296);
  v5 = *(_QWORD *)(v0 + 1288);
  v6 = *(_QWORD *)(v0 + 1280);
  v7 = *(_QWORD *)(v0 + 1272);
  v8 = *(_QWORD *)(v0 + 1264);
  v9 = *(_QWORD *)(v0 + 1088);
  *(_QWORD *)(v0 + 112) = v3;
  v10 = *(_QWORD *)(v0 + 1024);
  *(_QWORD *)(v0 + 120) = v2;
  *(_QWORD *)(v0 + 128) = v7;
  *(_QWORD *)(v0 + 136) = v6;
  *(_QWORD *)(v0 + 144) = v5;
  *(_QWORD *)(v0 + 152) = v4;
  v11 = *(int *)(v10 + 24);
  v12 = *(_BYTE *)(v9 + v1);
  *(_DWORD *)(v0 + 1732) = v11;
  v13 = *(_QWORD *)(v9 + v11);
  sub_10001BBBC(v3, v2);
  sub_10001BBBC(v7, v6);
  sub_10001BBBC(v5, v4);
  v14 = (_QWORD *)swift_task_alloc(dword_1010F551C);
  *(_QWORD *)(v0 + 1440) = v14;
  *v14 = v0;
  v14[1] = sub_100B3EE18;
  return sub_1002ADDB8(v0 + 352, *(_QWORD *)(v0 + 1224), v0 + 112, v0 + 160, v12, v13, v8, 4000);
}

uint64_t sub_100B3EB3C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v42 = *(_QWORD *)(v0 + 1368);
  v44 = *(_QWORD *)(v0 + 1376);
  v40 = *(_QWORD *)(v0 + 1360);
  v34 = *(_QWORD *)(v0 + 1344);
  v36 = *(_QWORD *)(v0 + 1352);
  v32 = *(_QWORD *)(v0 + 1336);
  v28 = *(_QWORD *)(v0 + 1328);
  v1 = *(_QWORD *)(v0 + 1320);
  v2 = *(_QWORD *)(v0 + 1312);
  v3 = *(_QWORD *)(v0 + 1304);
  v4 = *(_QWORD *)(v0 + 1296);
  v5 = *(_QWORD *)(v0 + 1288);
  v6 = *(_QWORD *)(v0 + 1280);
  v7 = *(_QWORD *)(v0 + 1272);
  v38 = *(_QWORD *)(v0 + 1152);
  v30 = *(_QWORD *)(v0 + 1088);
  swift_release();
  swift_release();
  swift_release();
  sub_100758808(v7, v6, v5, v4, v3, v2, (void (*)(void))sub_10001BC14, (uint64_t (*)(uint64_t, uint64_t))sub_1000FC25C);
  sub_10001BC14(v1, v28);
  sub_10001BC14(v7, v6);
  sub_10001BC14(v5, v4);
  sub_100758808(v32, v34, v36, v40, v42, v44, (void (*)(void))sub_10001BC14, (uint64_t (*)(uint64_t, uint64_t))sub_10001BC14);
  sub_1000126B0(v30, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
  sub_1000126B0(v38, type metadata accessor for ObservedAdvertisement);
  v8 = *(_QWORD *)(v0 + 1224);
  v9 = *(_QWORD *)(v0 + 1216);
  v10 = *(_QWORD *)(v0 + 1208);
  v11 = *(_QWORD *)(v0 + 1200);
  v12 = *(_QWORD *)(v0 + 1192);
  v13 = *(_QWORD *)(v0 + 1184);
  v14 = *(_QWORD *)(v0 + 1176);
  v15 = *(_QWORD *)(v0 + 1168);
  v16 = *(_QWORD *)(v0 + 1152);
  v18 = *(_QWORD *)(v0 + 1144);
  v19 = *(_QWORD *)(v0 + 1136);
  v20 = *(_QWORD *)(v0 + 1128);
  v21 = *(_QWORD *)(v0 + 1120);
  v22 = *(_QWORD *)(v0 + 1096);
  v23 = *(_QWORD *)(v0 + 1088);
  v24 = *(_QWORD *)(v0 + 1080);
  v25 = *(_QWORD *)(v0 + 1072);
  v26 = *(_QWORD *)(v0 + 1064);
  v27 = *(_QWORD *)(v0 + 1056);
  v29 = *(_QWORD *)(v0 + 1048);
  v31 = *(_QWORD *)(v0 + 1040);
  v33 = *(_QWORD *)(v0 + 1016);
  v35 = *(_QWORD *)(v0 + 1008);
  v37 = *(_QWORD *)(v0 + 1000);
  v39 = *(_QWORD *)(v0 + 992);
  v41 = *(_QWORD *)(v0 + 968);
  v43 = *(_QWORD *)(v0 + 960);
  sub_1000126B0(v8, type metadata accessor for BeaconIdentifier);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v29);
  swift_task_dealloc(v31);
  swift_task_dealloc(v33);
  swift_task_dealloc(v35);
  swift_task_dealloc(v37);
  swift_task_dealloc(v39);
  swift_task_dealloc(v41);
  swift_task_dealloc(v43);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100B3EE18()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t (*v10)();
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 1440);
  *(_QWORD *)(*(_QWORD *)v1 + 1448) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = v2[166];
    v5 = v2[165];
    v6 = v2[162];
    v7 = v2[161];
    v8 = v2[160];
    v9 = v2[159];
    swift_bridgeObjectRelease();
    sub_10001BC14(v5, v4);
    sub_10001BC14(v9, v8);
    sub_10001BC14(v7, v6);
    v10 = sub_100B3F044;
  }
  else
  {
    v11 = v2[162];
    v12 = v2[161];
    v13 = v2[160];
    v14 = v2[159];
    sub_10001BC14(v2[165], v2[166]);
    sub_10001BC14(v14, v13);
    sub_10001BC14(v12, v11);
    v10 = sub_100B3EF04;
  }
  return swift_task_switch(v10, 0, 0);
}

uint64_t sub_100B3EF04()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t **v4;

  v1 = v0[179];
  v2 = v0[153];
  v3 = swift_task_alloc(32);
  *(_QWORD *)(v3 + 16) = v2;
  *(_QWORD *)(v3 + 24) = v0 + 44;
  swift_bridgeObjectRetain(v1);
  v0[182] = (uint64_t)sub_100A7721C((void (*)(uint64_t *__return_ptr, _BYTE *))sub_100B4ACE0, v3, v1);
  swift_bridgeObjectRelease();
  swift_task_dealloc(v3);
  v4 = (uint64_t **)swift_task_alloc(dword_101115CC4);
  v0[183] = (uint64_t)v4;
  *v4 = v0;
  v4[1] = (uint64_t *)sub_100B3EFC0;
  return sub_100B48908(v0[126], v0[114]);
}

uint64_t sub_100B3EFC0(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 1464);
  *(_QWORD *)(v3 + 1472) = a1;
  *(_QWORD *)(v3 + 1480) = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v5 = sub_100B3FE68;
  }
  else
  {
    v5 = sub_100B3F320;
  }
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_100B3F044()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v42 = *(_QWORD *)(v0 + 1368);
  v44 = *(_QWORD *)(v0 + 1376);
  v40 = *(_QWORD *)(v0 + 1360);
  v34 = *(_QWORD *)(v0 + 1344);
  v36 = *(_QWORD *)(v0 + 1352);
  v32 = *(_QWORD *)(v0 + 1336);
  v28 = *(_QWORD *)(v0 + 1328);
  v1 = *(_QWORD *)(v0 + 1320);
  v2 = *(_QWORD *)(v0 + 1312);
  v3 = *(_QWORD *)(v0 + 1304);
  v4 = *(_QWORD *)(v0 + 1296);
  v5 = *(_QWORD *)(v0 + 1288);
  v6 = *(_QWORD *)(v0 + 1280);
  v7 = *(_QWORD *)(v0 + 1272);
  v38 = *(_QWORD *)(v0 + 1152);
  v30 = *(_QWORD *)(v0 + 1088);
  swift_release();
  swift_release();
  swift_release();
  sub_100758808(v7, v6, v5, v4, v3, v2, (void (*)(void))sub_10001BC14, (uint64_t (*)(uint64_t, uint64_t))sub_1000FC25C);
  sub_10001BC14(v1, v28);
  sub_10001BC14(v7, v6);
  sub_10001BC14(v5, v4);
  sub_100758808(v32, v34, v36, v40, v42, v44, (void (*)(void))sub_10001BC14, (uint64_t (*)(uint64_t, uint64_t))sub_10001BC14);
  sub_1000126B0(v30, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
  sub_1000126B0(v38, type metadata accessor for ObservedAdvertisement);
  v8 = *(_QWORD *)(v0 + 1224);
  v9 = *(_QWORD *)(v0 + 1216);
  v10 = *(_QWORD *)(v0 + 1208);
  v11 = *(_QWORD *)(v0 + 1200);
  v12 = *(_QWORD *)(v0 + 1192);
  v13 = *(_QWORD *)(v0 + 1184);
  v14 = *(_QWORD *)(v0 + 1176);
  v15 = *(_QWORD *)(v0 + 1168);
  v16 = *(_QWORD *)(v0 + 1152);
  v18 = *(_QWORD *)(v0 + 1144);
  v19 = *(_QWORD *)(v0 + 1136);
  v20 = *(_QWORD *)(v0 + 1128);
  v21 = *(_QWORD *)(v0 + 1120);
  v22 = *(_QWORD *)(v0 + 1096);
  v23 = *(_QWORD *)(v0 + 1088);
  v24 = *(_QWORD *)(v0 + 1080);
  v25 = *(_QWORD *)(v0 + 1072);
  v26 = *(_QWORD *)(v0 + 1064);
  v27 = *(_QWORD *)(v0 + 1056);
  v29 = *(_QWORD *)(v0 + 1048);
  v31 = *(_QWORD *)(v0 + 1040);
  v33 = *(_QWORD *)(v0 + 1016);
  v35 = *(_QWORD *)(v0 + 1008);
  v37 = *(_QWORD *)(v0 + 1000);
  v39 = *(_QWORD *)(v0 + 992);
  v41 = *(_QWORD *)(v0 + 968);
  v43 = *(_QWORD *)(v0 + 960);
  sub_1000126B0(v8, type metadata accessor for BeaconIdentifier);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v29);
  swift_task_dealloc(v31);
  swift_task_dealloc(v33);
  swift_task_dealloc(v35);
  swift_task_dealloc(v37);
  swift_task_dealloc(v39);
  swift_task_dealloc(v41);
  swift_task_dealloc(v43);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100B3F320()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  _QWORD *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  void (*v39)(uint64_t, uint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  void (*v45)(uint64_t, uint64_t);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  NSObject *v54;
  os_log_type_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  Swift::String v69;
  Swift::String v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  _QWORD *v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  os_log_t log;
  os_log_t loga;
  os_log_t logb;
  NSObject *logc;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  os_log_type_t v128;
  _QWORD *v129;
  char v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;

  v1 = v0 + 160;
  v2 = *(_QWORD *)(v0 + 1432);
  if (*(_QWORD *)(v2 + 16))
  {
    v3 = *(_BYTE *)(v0 + 1736);
    v130 = *(_BYTE *)(v2 + 32);
    v4 = *(_QWORD *)(v2 + 40);
    *(_QWORD *)(v0 + 1488) = v4;
    v5 = *(_QWORD *)(v2 + 48);
    *(_QWORD *)(v0 + 1496) = v5;
    v6 = *(_QWORD *)(v2 + 56);
    *(_QWORD *)(v0 + 1504) = v6;
    v7 = *(_QWORD *)(v2 + 64);
    *(_QWORD *)(v0 + 1512) = v7;
    v8 = *(_QWORD *)(v2 + 72);
    *(_QWORD *)(v0 + 1520) = v8;
    sub_10001BBBC(v5, v6);
    sub_10001BBBC(v7, v8);
    swift_bridgeObjectRelease();
    if ((v3 & 1) != 0)
    {
      v9 = *(_QWORD *)(v0 + 1456);
      sub_10001BBBC(v5, v6);
      sub_10001BBBC(v7, v8);
      sub_10001BBBC(v5, v6);
      sub_10001BBBC(v7, v8);
      swift_bridgeObjectRetain(v9);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v10);
      v12 = *(_QWORD **)(v0 + 1456);
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        v12 = sub_1007C8FFC(0, v12[2] + 1, 1, v12);
      v14 = v12[2];
      v13 = v12[3];
      v15 = v14 + 1;
      if (v14 >= v13 >> 1)
      {
        v84 = sub_1007C8FFC((_QWORD *)(v13 > 1), v14 + 1, 1, v12);
        v15 = v14 + 1;
        v12 = v84;
      }
      v129 = v12;
      log = *(os_log_t *)(v0 + 1368);
      v122 = *(_QWORD *)(v0 + 1376);
      v116 = *(_QWORD *)(v0 + 1360);
      v108 = *(_QWORD *)(v0 + 1344);
      v111 = *(_QWORD *)(v0 + 1352);
      v106 = *(_QWORD *)(v0 + 1336);
      v94 = *(_QWORD *)(v0 + 1320);
      v96 = *(_QWORD *)(v0 + 1328);
      v90 = *(_QWORD *)(v0 + 1304);
      v92 = *(_QWORD *)(v0 + 1312);
      v86 = *(_QWORD *)(v0 + 1288);
      v88 = *(_QWORD *)(v0 + 1296);
      v85 = *(_QWORD *)(v0 + 1280);
      v16 = *(_QWORD *)(v0 + 1272);
      v126 = *(_QWORD *)(v0 + 1152);
      v114 = *(_QWORD *)(v0 + 1088);
      v99 = *(_QWORD *)(v0 + 984);
      v101 = *(_QWORD *)(v0 + 976);
      v104 = *(_QWORD *)(v0 + 1008);
      v12[2] = v15;
      v17 = &v12[6 * v14];
      *((_BYTE *)v17 + 32) = v130;
      v17[5] = v4;
      v17[6] = v5;
      v17[7] = v6;
      v17[8] = v7;
      v17[9] = v8;
      swift_release();
      swift_release();
      swift_release();
      sub_100B4AD98((_QWORD *)(v0 + 352), (void (*)(uint64_t, uint64_t))sub_10001BC14);
      swift_bridgeObjectRelease();
      sub_10001BC14(v5, v6);
      sub_10001BC14(v7, v8);
      sub_100758808(v16, v85, v86, v88, v90, v92, (void (*)(void))sub_10001BC14, (uint64_t (*)(uint64_t, uint64_t))sub_1000FC25C);
      sub_10001BC14(v5, v6);
      sub_10001BC14(v7, v8);
      sub_10001BC14(v94, v96);
      sub_10001BC14(v16, v85);
      sub_10001BC14(v86, v88);
      sub_100758808(v106, v108, v111, v116, (uint64_t)log, v122, (void (*)(void))sub_10001BC14, (uint64_t (*)(uint64_t, uint64_t))sub_10001BC14);
      (*(void (**)(uint64_t, uint64_t))(v99 + 8))(v104, v101);
      sub_1000126B0(v114, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
      sub_1000126B0(v126, type metadata accessor for ObservedAdvertisement);
      v18 = *(_QWORD *)(v0 + 1224);
      v19 = *(_QWORD *)(v0 + 1216);
      v20 = *(_QWORD *)(v0 + 1208);
      v21 = *(_QWORD *)(v0 + 1200);
      v22 = *(_QWORD *)(v0 + 1192);
      v23 = *(_QWORD *)(v0 + 1184);
      v24 = *(_QWORD *)(v0 + 1176);
      v25 = *(_QWORD *)(v0 + 1168);
      v26 = *(_QWORD *)(v0 + 1152);
      v87 = *(_QWORD *)(v0 + 1144);
      v89 = *(_QWORD *)(v0 + 1136);
      v91 = *(_QWORD *)(v0 + 1128);
      v93 = *(_QWORD *)(v0 + 1120);
      v95 = *(_QWORD *)(v0 + 1096);
      v97 = *(_QWORD *)(v0 + 1088);
      v100 = *(_QWORD *)(v0 + 1080);
      v102 = *(_QWORD *)(v0 + 1072);
      v105 = *(_QWORD *)(v0 + 1064);
      v107 = *(_QWORD *)(v0 + 1056);
      v109 = *(_QWORD *)(v0 + 1048);
      v112 = *(_QWORD *)(v0 + 1040);
      v115 = *(_QWORD *)(v0 + 1016);
      v117 = *(_QWORD *)(v0 + 1008);
      loga = *(os_log_t *)(v0 + 1000);
      v123 = *(_QWORD *)(v0 + 992);
      v127 = *(_QWORD *)(v0 + 968);
      v131 = *(_QWORD *)(v0 + 960);
      sub_1000126B0(v18, type metadata accessor for BeaconIdentifier);
      swift_task_dealloc(v18);
      swift_task_dealloc(v19);
      swift_task_dealloc(v20);
      swift_task_dealloc(v21);
      swift_task_dealloc(v22);
      swift_task_dealloc(v23);
      swift_task_dealloc(v24);
      swift_task_dealloc(v25);
      swift_task_dealloc(v26);
      swift_task_dealloc(v87);
      swift_task_dealloc(v89);
      swift_task_dealloc(v91);
      swift_task_dealloc(v93);
      swift_task_dealloc(v95);
      swift_task_dealloc(v97);
      swift_task_dealloc(v100);
      swift_task_dealloc(v102);
      swift_task_dealloc(v105);
      swift_task_dealloc(v107);
      swift_task_dealloc(v109);
      swift_task_dealloc(v112);
      swift_task_dealloc(v115);
      swift_task_dealloc(v117);
      swift_task_dealloc(loga);
      swift_task_dealloc(v123);
      swift_task_dealloc(v127);
      swift_task_dealloc(v131);
      return (*(uint64_t (**)(_QWORD *))(v0 + 8))(v129);
    }
    else
    {
      v33 = *(_QWORD *)(v0 + 1472);
      v34 = *(_QWORD *)(v0 + 1008);
      v35 = *(_QWORD *)(v0 + 1000);
      v36 = *(_QWORD *)(v0 + 984);
      v37 = *(_QWORD *)(v0 + 976);
      v38 = *(_QWORD *)(*(_QWORD *)(v0 + 1088) + *(int *)(v0 + 1732));
      sub_10005972C(*(_QWORD *)(v0 + 1152), *(_QWORD *)(v0 + 1128), type metadata accessor for ObservedAdvertisement);
      v39 = *(void (**)(uint64_t, uint64_t, uint64_t))(v36 + 16);
      v39(v35, v34, v37);
      v40 = *(_QWORD *)(v0 + 1128);
      if (v38 >= v33)
      {
        v45 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 984) + 8);
        v45(*(_QWORD *)(v0 + 1000), *(_QWORD *)(v0 + 976));
        sub_1000126B0(v40, type metadata accessor for ObservedAdvertisement);
      }
      else
      {
        v41 = *(_QWORD *)(v0 + 1000);
        v42 = *(_QWORD *)(v0 + 984);
        v43 = *(_QWORD *)(v0 + 976);
        v44 = static Date.> infix(_:_:)(v40 + *(int *)(*(_QWORD *)(v0 + 1104) + 44), v41);
        v45 = *(void (**)(uint64_t, uint64_t))(v42 + 8);
        *(_QWORD *)(v0 + 1552) = v45;
        v45(v41, v43);
        sub_1000126B0(v40, type metadata accessor for ObservedAdvertisement);
        if ((v44 & 1) == 0)
        {
          logb = *(os_log_t *)(v0 + 1176);
          v124 = *(_QWORD *)(v0 + 1224);
          v46 = *(_QWORD *)(v0 + 1152);
          v47 = *(_QWORD *)(v0 + 1120);
          v48 = *(_QWORD *)(v0 + 1088);
          v49 = *(_QWORD *)(v0 + 1040);
          v50 = *(_QWORD *)(v0 + 1008);
          v51 = *(_QWORD *)(v0 + 992);
          v52 = *(_QWORD *)(v0 + 976);
          swift_bridgeObjectRelease();
          sub_10005972C(v48, v49, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
          sub_10005972C(v46, v47, type metadata accessor for ObservedAdvertisement);
          v39(v51, v50, v52);
          v53 = sub_10005972C(v124, (uint64_t)logb, type metadata accessor for BeaconIdentifier);
          v54 = Logger.logObject.getter(v53);
          v55 = static os_log_type_t.default.getter(v54);
          if (os_log_type_enabled(v54, v55))
          {
            v56 = *(_QWORD *)(v0 + 1472);
            v113 = *(_QWORD *)(v0 + 1176);
            v98 = *(_QWORD *)(v0 + 1120);
            v57 = *(_QWORD *)(v0 + 1040);
            v128 = v55;
            v58 = *(_QWORD *)(v0 + 1024);
            v103 = *(_QWORD *)(v0 + 992);
            v59 = *(_QWORD *)(v0 + 976);
            v110 = *(_QWORD *)(v0 + 944);
            logc = v54;
            v60 = swift_slowAlloc(62, -1);
            v125 = swift_slowAlloc(96, -1);
            v132 = v125;
            *(_DWORD *)v60 = 134219267;
            v61 = *(_QWORD *)(v57 + *(int *)(v58 + 24));
            sub_1000126B0(v57, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
            *(_QWORD *)(v0 + 736) = v61;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 736, v0 + 744, v60 + 4, v60 + 12);
            *(_WORD *)(v60 + 12) = 2048;
            *(_QWORD *)(v0 + 744) = v56;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 744, v0 + 752, v60 + 14, v60 + 22);
            *(_WORD *)(v60 + 22) = 2082;
            v62 = sub_100006204(&qword_1010EE0F0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
            v63 = dispatch thunk of CustomStringConvertible.description.getter(v59, v62);
            *(_QWORD *)(v0 + 752) = sub_100016940(v63, v64, &v132);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 752, v0 + 760, v60 + 24, v60 + 32);
            swift_bridgeObjectRelease();
            sub_1000126B0(v98, type metadata accessor for ObservedAdvertisement);
            *(_WORD *)(v60 + 32) = 2082;
            v65 = dispatch thunk of CustomStringConvertible.description.getter(v59, v62);
            *(_QWORD *)(v0 + 760) = sub_100016940(v65, v66, &v132);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 760, v0 + 768, v60 + 34, v60 + 42);
            swift_bridgeObjectRelease();
            v45(v103, v59);
            *(_WORD *)(v60 + 42) = 2160;
            *(_QWORD *)(v0 + 768) = 1752392040;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 768, v0 + 776, v60 + 44, v60 + 52);
            *(_WORD *)(v60 + 52) = 2081;
            v67 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
            v133 = dispatch thunk of CustomStringConvertible.description.getter(v110, v67);
            v134 = v68;
            v69._countAndFlagsBits = 47;
            v69._object = (void *)0xE100000000000000;
            String.append(_:)(v69);
            v70._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v110, v67);
            String.append(_:)(v70);
            swift_bridgeObjectRelease();
            *(_QWORD *)(v0 + 776) = sub_100016940(v133, v134, &v132);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 776, v0 + 784, v60 + 54, v60 + 62);
            swift_bridgeObjectRelease();
            sub_1000126B0(v113, type metadata accessor for BeaconIdentifier);
            _os_log_impl((void *)&_mh_execute_header, logc, v128, "Ignoring matched index %llu < lastObservedIndex %llu, scanDate: %{public}s, lastObservedDate: %{public}s, for beacon %{private,mask.hash}s.", (uint8_t *)v60, 0x3Eu);
            swift_arrayDestroy(v125, 3, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v125, -1, -1);
            swift_slowDealloc(v60, -1, -1);

          }
          else
          {
            v79 = *(_QWORD *)(v0 + 1176);
            v80 = *(_QWORD *)(v0 + 1120);
            v81 = *(_QWORD *)(v0 + 992);
            v82 = *(_QWORD *)(v0 + 976);
            sub_1000126B0(*(_QWORD *)(v0 + 1040), type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
            sub_1000126B0(v80, type metadata accessor for ObservedAdvertisement);
            v45(v81, v82);
            sub_1000126B0(v79, type metadata accessor for BeaconIdentifier);

          }
          v83 = (_QWORD *)swift_task_alloc(dword_101115CBC);
          *(_QWORD *)(v0 + 1584) = v83;
          *v83 = v0;
          v83[1] = sub_100B412B0;
          return sub_100B46DE8(*(_QWORD *)(v0 + 912), (__int128 *)(v0 + 208), v0 + 160, *(_QWORD *)(v0 + 920), *(_QWORD *)(v0 + 928), *(_QWORD *)(v0 + 936));
        }
      }
      *(_QWORD *)(v0 + 1560) = v45;
      v71 = *(_QWORD *)(*(_QWORD *)(v0 + 1088) + *(int *)(v0 + 1732));
      if (v71)
        v72 = v71 / 0x60 + 1;
      else
        v72 = 0;
      v73 = *(_QWORD *)(v0 + 1296);
      v74 = *(_QWORD *)(v0 + 1288);
      v75 = *(_QWORD *)(v0 + 1280);
      v76 = *(_QWORD *)(v0 + 1272);
      v77 = *(_QWORD *)(v0 + 1264);
      sub_10001BBBC(*(_QWORD *)(v0 + 1320), *(_QWORD *)(v0 + 1328));
      sub_10001BBBC(v76, v75);
      sub_10001BBBC(v74, v73);
      v78 = (_QWORD *)swift_task_alloc(dword_1010F551C);
      *(_QWORD *)(v0 + 1568) = v78;
      *v78 = v0;
      v78[1] = sub_100B407E0;
      return sub_1002ADDB8(v0 + 304, *(_QWORD *)(v0 + 1224), v0 + 112, v1, 1, v72, v77, 4000);
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    v28 = swift_bridgeObjectRelease();
    v29 = Logger.logObject.getter(v28);
    v30 = static os_log_type_t.error.getter(v29);
    if (os_log_type_enabled(v29, v30))
    {
      v31 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v31 = 0;
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "LTK keys should never be empty!", v31, 2u);
      swift_slowDealloc(v31, -1, -1);
    }

    v32 = (_QWORD *)swift_task_alloc(dword_101115CBC);
    *(_QWORD *)(v0 + 1528) = v32;
    *v32 = v0;
    v32[1] = sub_100B40150;
    return sub_100B46DE8(*(_QWORD *)(v0 + 912), (__int128 *)(v0 + 208), v1, *(_QWORD *)(v0 + 920), *(_QWORD *)(v0 + 928), *(_QWORD *)(v0 + 936));
  }
}

uint64_t sub_100B3FE68()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v42 = *(_QWORD *)(v0 + 1368);
  v44 = *(_QWORD *)(v0 + 1376);
  v40 = *(_QWORD *)(v0 + 1360);
  v34 = *(_QWORD *)(v0 + 1344);
  v36 = *(_QWORD *)(v0 + 1352);
  v32 = *(_QWORD *)(v0 + 1336);
  v26 = *(_QWORD *)(v0 + 1320);
  v28 = *(_QWORD *)(v0 + 1328);
  v1 = *(_QWORD *)(v0 + 1312);
  v2 = *(_QWORD *)(v0 + 1304);
  v3 = *(_QWORD *)(v0 + 1296);
  v4 = *(_QWORD *)(v0 + 1288);
  v5 = *(_QWORD *)(v0 + 1280);
  v6 = *(_QWORD *)(v0 + 1272);
  v38 = *(_QWORD *)(v0 + 1152);
  v30 = *(_QWORD *)(v0 + 1088);
  swift_release();
  swift_release();
  swift_release();
  sub_100B4AD98((_QWORD *)(v0 + 352), (void (*)(uint64_t, uint64_t))sub_10001BC14);
  sub_100758808(v6, v5, v4, v3, v2, v1, (void (*)(void))sub_10001BC14, (uint64_t (*)(uint64_t, uint64_t))sub_1000FC25C);
  sub_10001BC14(v26, v28);
  sub_10001BC14(v6, v5);
  sub_10001BC14(v4, v3);
  sub_100758808(v32, v34, v36, v40, v42, v44, (void (*)(void))sub_10001BC14, (uint64_t (*)(uint64_t, uint64_t))sub_10001BC14);
  sub_1000126B0(v30, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
  sub_1000126B0(v38, type metadata accessor for ObservedAdvertisement);
  v7 = *(_QWORD *)(v0 + 1224);
  v8 = *(_QWORD *)(v0 + 1216);
  v9 = *(_QWORD *)(v0 + 1208);
  v10 = *(_QWORD *)(v0 + 1200);
  v11 = *(_QWORD *)(v0 + 1192);
  v12 = *(_QWORD *)(v0 + 1184);
  v13 = *(_QWORD *)(v0 + 1176);
  v14 = *(_QWORD *)(v0 + 1168);
  v15 = *(_QWORD *)(v0 + 1152);
  v17 = *(_QWORD *)(v0 + 1144);
  v18 = *(_QWORD *)(v0 + 1136);
  v19 = *(_QWORD *)(v0 + 1128);
  v20 = *(_QWORD *)(v0 + 1120);
  v21 = *(_QWORD *)(v0 + 1096);
  v22 = *(_QWORD *)(v0 + 1088);
  v23 = *(_QWORD *)(v0 + 1080);
  v24 = *(_QWORD *)(v0 + 1072);
  v25 = *(_QWORD *)(v0 + 1064);
  v27 = *(_QWORD *)(v0 + 1056);
  v29 = *(_QWORD *)(v0 + 1048);
  v31 = *(_QWORD *)(v0 + 1040);
  v33 = *(_QWORD *)(v0 + 1016);
  v35 = *(_QWORD *)(v0 + 1008);
  v37 = *(_QWORD *)(v0 + 1000);
  v39 = *(_QWORD *)(v0 + 992);
  v41 = *(_QWORD *)(v0 + 968);
  v43 = *(_QWORD *)(v0 + 960);
  sub_1000126B0(v7, type metadata accessor for BeaconIdentifier);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v27);
  swift_task_dealloc(v29);
  swift_task_dealloc(v31);
  swift_task_dealloc(v33);
  swift_task_dealloc(v35);
  swift_task_dealloc(v37);
  swift_task_dealloc(v39);
  swift_task_dealloc(v41);
  swift_task_dealloc(v43);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100B40150(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 1528);
  *(_QWORD *)(*v2 + 1536) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = sub_100B404D4;
  }
  else
  {
    *(_QWORD *)(v4 + 1544) = a1;
    v6 = sub_100B401C4;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_100B401C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v43 = *(_QWORD *)(v0 + 1368);
  v45 = *(_QWORD *)(v0 + 1376);
  v41 = *(_QWORD *)(v0 + 1360);
  v35 = *(_QWORD *)(v0 + 1344);
  v37 = *(_QWORD *)(v0 + 1352);
  v33 = *(_QWORD *)(v0 + 1336);
  v23 = *(_QWORD *)(v0 + 1320);
  v25 = *(_QWORD *)(v0 + 1328);
  v1 = *(_QWORD *)(v0 + 1312);
  v2 = *(_QWORD *)(v0 + 1304);
  v3 = *(_QWORD *)(v0 + 1296);
  v4 = *(_QWORD *)(v0 + 1288);
  v5 = *(_QWORD *)(v0 + 1280);
  v6 = *(_QWORD *)(v0 + 1272);
  v47 = *(_QWORD *)(v0 + 1152);
  v39 = *(_QWORD *)(v0 + 1088);
  v27 = *(_QWORD *)(v0 + 984);
  v29 = *(_QWORD *)(v0 + 976);
  v31 = *(_QWORD *)(v0 + 1008);
  swift_release();
  swift_release();
  swift_release();
  sub_100B4AD98((_QWORD *)(v0 + 352), (void (*)(uint64_t, uint64_t))sub_10001BC14);
  sub_100758808(v6, v5, v4, v3, v2, v1, (void (*)(void))sub_10001BC14, (uint64_t (*)(uint64_t, uint64_t))sub_1000FC25C);
  sub_10001BC14(v23, v25);
  sub_10001BC14(v6, v5);
  sub_10001BC14(v4, v3);
  sub_100758808(v33, v35, v37, v41, v43, v45, (void (*)(void))sub_10001BC14, (uint64_t (*)(uint64_t, uint64_t))sub_10001BC14);
  (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v31, v29);
  sub_1000126B0(v39, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
  sub_1000126B0(v47, type metadata accessor for ObservedAdvertisement);
  v48 = *(_QWORD *)(v0 + 1544);
  v7 = *(_QWORD *)(v0 + 1224);
  v8 = *(_QWORD *)(v0 + 1216);
  v9 = *(_QWORD *)(v0 + 1208);
  v10 = *(_QWORD *)(v0 + 1200);
  v11 = *(_QWORD *)(v0 + 1192);
  v12 = *(_QWORD *)(v0 + 1184);
  v13 = *(_QWORD *)(v0 + 1176);
  v14 = *(_QWORD *)(v0 + 1168);
  v15 = *(_QWORD *)(v0 + 1152);
  v17 = *(_QWORD *)(v0 + 1144);
  v18 = *(_QWORD *)(v0 + 1136);
  v19 = *(_QWORD *)(v0 + 1128);
  v20 = *(_QWORD *)(v0 + 1120);
  v21 = *(_QWORD *)(v0 + 1096);
  v22 = *(_QWORD *)(v0 + 1088);
  v24 = *(_QWORD *)(v0 + 1080);
  v26 = *(_QWORD *)(v0 + 1072);
  v28 = *(_QWORD *)(v0 + 1064);
  v30 = *(_QWORD *)(v0 + 1056);
  v32 = *(_QWORD *)(v0 + 1048);
  v34 = *(_QWORD *)(v0 + 1040);
  v36 = *(_QWORD *)(v0 + 1016);
  v38 = *(_QWORD *)(v0 + 1008);
  v40 = *(_QWORD *)(v0 + 1000);
  v42 = *(_QWORD *)(v0 + 992);
  v44 = *(_QWORD *)(v0 + 968);
  v46 = *(_QWORD *)(v0 + 960);
  sub_1000126B0(v7, type metadata accessor for BeaconIdentifier);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v24);
  swift_task_dealloc(v26);
  swift_task_dealloc(v28);
  swift_task_dealloc(v30);
  swift_task_dealloc(v32);
  swift_task_dealloc(v34);
  swift_task_dealloc(v36);
  swift_task_dealloc(v38);
  swift_task_dealloc(v40);
  swift_task_dealloc(v42);
  swift_task_dealloc(v44);
  swift_task_dealloc(v46);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v48);
}

uint64_t sub_100B404D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v43 = *(_QWORD *)(v0 + 1368);
  v45 = *(_QWORD *)(v0 + 1376);
  v41 = *(_QWORD *)(v0 + 1360);
  v35 = *(_QWORD *)(v0 + 1344);
  v37 = *(_QWORD *)(v0 + 1352);
  v33 = *(_QWORD *)(v0 + 1336);
  v23 = *(_QWORD *)(v0 + 1320);
  v25 = *(_QWORD *)(v0 + 1328);
  v1 = *(_QWORD *)(v0 + 1312);
  v2 = *(_QWORD *)(v0 + 1304);
  v3 = *(_QWORD *)(v0 + 1296);
  v4 = *(_QWORD *)(v0 + 1288);
  v5 = *(_QWORD *)(v0 + 1280);
  v6 = *(_QWORD *)(v0 + 1272);
  v47 = *(_QWORD *)(v0 + 1152);
  v39 = *(_QWORD *)(v0 + 1088);
  v27 = *(_QWORD *)(v0 + 984);
  v29 = *(_QWORD *)(v0 + 976);
  v31 = *(_QWORD *)(v0 + 1008);
  swift_release();
  swift_release();
  swift_release();
  sub_100B4AD98((_QWORD *)(v0 + 352), (void (*)(uint64_t, uint64_t))sub_10001BC14);
  sub_100758808(v6, v5, v4, v3, v2, v1, (void (*)(void))sub_10001BC14, (uint64_t (*)(uint64_t, uint64_t))sub_1000FC25C);
  sub_10001BC14(v23, v25);
  sub_10001BC14(v6, v5);
  sub_10001BC14(v4, v3);
  sub_100758808(v33, v35, v37, v41, v43, v45, (void (*)(void))sub_10001BC14, (uint64_t (*)(uint64_t, uint64_t))sub_10001BC14);
  (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v31, v29);
  sub_1000126B0(v39, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
  sub_1000126B0(v47, type metadata accessor for ObservedAdvertisement);
  v7 = *(_QWORD *)(v0 + 1224);
  v8 = *(_QWORD *)(v0 + 1216);
  v9 = *(_QWORD *)(v0 + 1208);
  v10 = *(_QWORD *)(v0 + 1200);
  v11 = *(_QWORD *)(v0 + 1192);
  v12 = *(_QWORD *)(v0 + 1184);
  v13 = *(_QWORD *)(v0 + 1176);
  v14 = *(_QWORD *)(v0 + 1168);
  v15 = *(_QWORD *)(v0 + 1152);
  v17 = *(_QWORD *)(v0 + 1144);
  v18 = *(_QWORD *)(v0 + 1136);
  v19 = *(_QWORD *)(v0 + 1128);
  v20 = *(_QWORD *)(v0 + 1120);
  v21 = *(_QWORD *)(v0 + 1096);
  v22 = *(_QWORD *)(v0 + 1088);
  v24 = *(_QWORD *)(v0 + 1080);
  v26 = *(_QWORD *)(v0 + 1072);
  v28 = *(_QWORD *)(v0 + 1064);
  v30 = *(_QWORD *)(v0 + 1056);
  v32 = *(_QWORD *)(v0 + 1048);
  v34 = *(_QWORD *)(v0 + 1040);
  v36 = *(_QWORD *)(v0 + 1016);
  v38 = *(_QWORD *)(v0 + 1008);
  v40 = *(_QWORD *)(v0 + 1000);
  v42 = *(_QWORD *)(v0 + 992);
  v44 = *(_QWORD *)(v0 + 968);
  v46 = *(_QWORD *)(v0 + 960);
  sub_1000126B0(v7, type metadata accessor for BeaconIdentifier);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v24);
  swift_task_dealloc(v26);
  swift_task_dealloc(v28);
  swift_task_dealloc(v30);
  swift_task_dealloc(v32);
  swift_task_dealloc(v34);
  swift_task_dealloc(v36);
  swift_task_dealloc(v38);
  swift_task_dealloc(v40);
  swift_task_dealloc(v42);
  swift_task_dealloc(v44);
  swift_task_dealloc(v46);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100B407E0()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t (*v10)();

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 1568);
  *(_QWORD *)(*(_QWORD *)v1 + 1576) = v0;
  swift_task_dealloc(v3);
  v4 = v2[166];
  v5 = v2[165];
  v6 = v2[162];
  v7 = v2[161];
  v8 = v2[160];
  v9 = v2[159];
  sub_10001BC14(v5, v4);
  sub_10001BC14(v9, v8);
  sub_10001BC14(v7, v6);
  if (v0)
    v10 = sub_100B40CCC;
  else
    v10 = sub_100B40888;
  return swift_task_switch(v10, 0, 0);
}

uint64_t sub_100B40888()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void (*v61)(uint64_t, uint64_t);
  uint64_t v62;
  _QWORD *v63;

  v1 = *(_QWORD *)(v0 + 1520);
  v2 = *(_QWORD *)(v0 + 1512);
  v3 = *(_QWORD *)(v0 + 1456);
  v4 = *(_QWORD *)(v0 + 320);
  v5 = *(_QWORD *)(v0 + 328);
  swift_bridgeObjectRetain(v3);
  sub_10001BBBC(v4, v5);
  sub_10001BBBC(v2, v1);
  sub_10001BBBC(v4, v5);
  sub_10001BBBC(v2, v1);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v3);
  v7 = *(_QWORD **)(v0 + 1456);
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    v7 = sub_1007C8FFC(0, v7[2] + 1, 1, v7);
  v9 = v7[2];
  v8 = v7[3];
  if (v9 >= v8 >> 1)
    v7 = sub_1007C8FFC((_QWORD *)(v8 > 1), v9 + 1, 1, v7);
  v61 = *(void (**)(uint64_t, uint64_t))(v0 + 1560);
  v63 = v7;
  v10 = *(_QWORD *)(v0 + 1520);
  v11 = *(_QWORD *)(v0 + 1512);
  v39 = *(_QWORD *)(v0 + 1504);
  v35 = *(_QWORD *)(v0 + 1496);
  v12 = *(_QWORD *)(v0 + 1488);
  v55 = *(_QWORD *)(v0 + 1368);
  v57 = *(_QWORD *)(v0 + 1376);
  v53 = *(_QWORD *)(v0 + 1360);
  v51 = *(_QWORD *)(v0 + 1352);
  v45 = *(_QWORD *)(v0 + 1336);
  v47 = *(_QWORD *)(v0 + 1344);
  v37 = *(_QWORD *)(v0 + 1328);
  v31 = *(_QWORD *)(v0 + 1312);
  v33 = *(_QWORD *)(v0 + 1320);
  v27 = *(_QWORD *)(v0 + 1296);
  v29 = *(_QWORD *)(v0 + 1304);
  v25 = *(_QWORD *)(v0 + 1280);
  v26 = *(_QWORD *)(v0 + 1288);
  v13 = *(_QWORD *)(v0 + 1272);
  v59 = *(_QWORD *)(v0 + 1152);
  v49 = *(_QWORD *)(v0 + 1088);
  v41 = *(_QWORD *)(v0 + 976);
  v43 = *(_QWORD *)(v0 + 1008);
  v7[2] = v9 + 1;
  v14 = &v7[6 * v9];
  *((_BYTE *)v14 + 32) = 1;
  v14[5] = v12;
  v14[6] = v4;
  v14[7] = v5;
  v14[8] = v11;
  v14[9] = v10;
  swift_release();
  swift_release();
  swift_release();
  sub_100B4AD98((_QWORD *)(v0 + 352), (void (*)(uint64_t, uint64_t))sub_10001BC14);
  sub_10001BC14(v4, v5);
  sub_10001BC14(v11, v10);
  swift_bridgeObjectRelease();
  sub_100B4AD98((_QWORD *)(v0 + 304), (void (*)(uint64_t, uint64_t))sub_10001BC14);
  sub_100758808(v13, v25, v26, v27, v29, v31, (void (*)(void))sub_10001BC14, (uint64_t (*)(uint64_t, uint64_t))sub_1000FC25C);
  sub_10001BC14(v35, v39);
  sub_10001BC14(v11, v10);
  sub_10001BC14(v33, v37);
  sub_10001BC14(v13, v25);
  sub_10001BC14(v26, v27);
  sub_100758808(v45, v47, v51, v53, v55, v57, (void (*)(void))sub_10001BC14, (uint64_t (*)(uint64_t, uint64_t))sub_10001BC14);
  v61(v43, v41);
  sub_1000126B0(v49, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
  sub_1000126B0(v59, type metadata accessor for ObservedAdvertisement);
  v15 = *(_QWORD *)(v0 + 1224);
  v16 = *(_QWORD *)(v0 + 1216);
  v17 = *(_QWORD *)(v0 + 1208);
  v18 = *(_QWORD *)(v0 + 1200);
  v19 = *(_QWORD *)(v0 + 1192);
  v20 = *(_QWORD *)(v0 + 1184);
  v21 = *(_QWORD *)(v0 + 1176);
  v22 = *(_QWORD *)(v0 + 1168);
  v23 = *(_QWORD *)(v0 + 1152);
  v28 = *(_QWORD *)(v0 + 1144);
  v30 = *(_QWORD *)(v0 + 1136);
  v32 = *(_QWORD *)(v0 + 1128);
  v34 = *(_QWORD *)(v0 + 1120);
  v36 = *(_QWORD *)(v0 + 1096);
  v38 = *(_QWORD *)(v0 + 1088);
  v40 = *(_QWORD *)(v0 + 1080);
  v42 = *(_QWORD *)(v0 + 1072);
  v44 = *(_QWORD *)(v0 + 1064);
  v46 = *(_QWORD *)(v0 + 1056);
  v48 = *(_QWORD *)(v0 + 1048);
  v50 = *(_QWORD *)(v0 + 1040);
  v52 = *(_QWORD *)(v0 + 1016);
  v54 = *(_QWORD *)(v0 + 1008);
  v56 = *(_QWORD *)(v0 + 1000);
  v58 = *(_QWORD *)(v0 + 992);
  v60 = *(_QWORD *)(v0 + 968);
  v62 = *(_QWORD *)(v0 + 960);
  sub_1000126B0(v15, type metadata accessor for BeaconIdentifier);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v28);
  swift_task_dealloc(v30);
  swift_task_dealloc(v32);
  swift_task_dealloc(v34);
  swift_task_dealloc(v36);
  swift_task_dealloc(v38);
  swift_task_dealloc(v40);
  swift_task_dealloc(v42);
  swift_task_dealloc(v44);
  swift_task_dealloc(v46);
  swift_task_dealloc(v48);
  swift_task_dealloc(v50);
  swift_task_dealloc(v52);
  swift_task_dealloc(v54);
  swift_task_dealloc(v56);
  swift_task_dealloc(v58);
  swift_task_dealloc(v60);
  swift_task_dealloc(v62);
  return (*(uint64_t (**)(_QWORD *))(v0 + 8))(v63);
}

uint64_t sub_100B40CCC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void (*v75)(uint64_t, uint64_t);
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;

  v77 = (_QWORD *)(v0 + 352);
  v1 = *(_QWORD *)(v0 + 1576);
  swift_errorRetain(v1);
  v2 = swift_errorRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = *(_QWORD *)(v0 + 1576);
    v75 = *(void (**)(uint64_t, uint64_t))(v0 + 1560);
    v49 = *(_QWORD *)(v0 + 1512);
    v52 = *(_QWORD *)(v0 + 1520);
    v43 = *(_QWORD *)(v0 + 1504);
    v37 = *(_QWORD *)(v0 + 1496);
    v69 = *(_QWORD *)(v0 + 1368);
    v71 = *(_QWORD *)(v0 + 1376);
    v65 = *(_QWORD *)(v0 + 1352);
    v67 = *(_QWORD *)(v0 + 1360);
    v59 = *(_QWORD *)(v0 + 1336);
    v61 = *(_QWORD *)(v0 + 1344);
    v46 = *(_QWORD *)(v0 + 1328);
    v40 = *(_QWORD *)(v0 + 1320);
    v33 = *(_QWORD *)(v0 + 1304);
    v34 = *(_QWORD *)(v0 + 1312);
    v31 = *(_QWORD *)(v0 + 1288);
    v32 = *(_QWORD *)(v0 + 1296);
    v29 = *(_QWORD *)(v0 + 1272);
    v30 = *(_QWORD *)(v0 + 1280);
    v73 = *(_QWORD *)(v0 + 1152);
    v63 = *(_QWORD *)(v0 + 1088);
    v55 = *(_QWORD *)(v0 + 976);
    v57 = *(_QWORD *)(v0 + 1008);
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    v79 = v7;
    *(_DWORD *)v6 = 136446210;
    *(_QWORD *)(v0 + 720) = v5;
    swift_errorRetain(v5);
    v8 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
    v9 = String.init<A>(describing:)(v0 + 720, v8);
    *(_QWORD *)(v0 + 728) = sub_100016940(v9, v10, &v79);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 728, v0 + 736, v6 + 4, v6 + 12);
    swift_bridgeObjectRelease();
    swift_errorRelease(v5);
    swift_errorRelease(v5);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Failed to generate secondary keys due to: %{public}s", v6, 0xCu);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);
    swift_release();
    swift_release();
    swift_release();
    sub_100B4AD98(v77, (void (*)(uint64_t, uint64_t))sub_10001BC14);

    sub_100758808(v29, v30, v31, v32, v33, v34, (void (*)(void))sub_10001BC14, (uint64_t (*)(uint64_t, uint64_t))sub_1000FC25C);
    swift_errorRelease(v5);
    sub_10001BC14(v37, v43);
    sub_10001BC14(v49, v52);
    sub_10001BC14(v40, v46);
    sub_10001BC14(v29, v30);
    v11 = v31;
    v12 = v32;
  }
  else
  {
    v13 = *(_QWORD *)(v0 + 1576);
    v75 = *(void (**)(uint64_t, uint64_t))(v0 + 1560);
    v50 = *(_QWORD *)(v0 + 1512);
    v53 = *(_QWORD *)(v0 + 1520);
    v44 = *(_QWORD *)(v0 + 1504);
    v38 = *(_QWORD *)(v0 + 1496);
    v69 = *(_QWORD *)(v0 + 1368);
    v71 = *(_QWORD *)(v0 + 1376);
    v65 = *(_QWORD *)(v0 + 1352);
    v67 = *(_QWORD *)(v0 + 1360);
    v59 = *(_QWORD *)(v0 + 1336);
    v61 = *(_QWORD *)(v0 + 1344);
    v47 = *(_QWORD *)(v0 + 1328);
    v41 = *(_QWORD *)(v0 + 1320);
    v35 = *(_QWORD *)(v0 + 1312);
    v14 = *(_QWORD *)(v0 + 1304);
    v15 = *(_QWORD *)(v0 + 1296);
    v16 = *(_QWORD *)(v0 + 1288);
    v17 = *(_QWORD *)(v0 + 1280);
    v18 = *(_QWORD *)(v0 + 1272);
    v73 = *(_QWORD *)(v0 + 1152);
    v63 = *(_QWORD *)(v0 + 1088);
    v55 = *(_QWORD *)(v0 + 976);
    v57 = *(_QWORD *)(v0 + 1008);
    swift_release();
    swift_release();
    swift_release();
    sub_100B4AD98(v77, (void (*)(uint64_t, uint64_t))sub_10001BC14);

    sub_100758808(v18, v17, v16, v15, v14, v35, (void (*)(void))sub_10001BC14, (uint64_t (*)(uint64_t, uint64_t))sub_1000FC25C);
    swift_errorRelease(v13);
    swift_errorRelease(v13);
    swift_errorRelease(v13);
    sub_10001BC14(v38, v44);
    sub_10001BC14(v50, v53);
    sub_10001BC14(v41, v47);
    sub_10001BC14(v18, v17);
    v11 = v16;
    v12 = v15;
  }
  sub_10001BC14(v11, v12);
  sub_100758808(v59, v61, v65, v67, v69, v71, (void (*)(void))sub_10001BC14, (uint64_t (*)(uint64_t, uint64_t))sub_10001BC14);
  v75(v57, v55);
  sub_1000126B0(v63, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
  sub_1000126B0(v73, type metadata accessor for ObservedAdvertisement);
  v78 = *(_QWORD *)(v0 + 1456);
  v19 = *(_QWORD *)(v0 + 1224);
  v20 = *(_QWORD *)(v0 + 1216);
  v21 = *(_QWORD *)(v0 + 1208);
  v22 = *(_QWORD *)(v0 + 1200);
  v23 = *(_QWORD *)(v0 + 1192);
  v24 = *(_QWORD *)(v0 + 1184);
  v25 = *(_QWORD *)(v0 + 1176);
  v26 = *(_QWORD *)(v0 + 1168);
  v27 = *(_QWORD *)(v0 + 1152);
  v36 = *(_QWORD *)(v0 + 1144);
  v39 = *(_QWORD *)(v0 + 1136);
  v42 = *(_QWORD *)(v0 + 1128);
  v45 = *(_QWORD *)(v0 + 1120);
  v48 = *(_QWORD *)(v0 + 1096);
  v51 = *(_QWORD *)(v0 + 1088);
  v54 = *(_QWORD *)(v0 + 1080);
  v56 = *(_QWORD *)(v0 + 1072);
  v58 = *(_QWORD *)(v0 + 1064);
  v60 = *(_QWORD *)(v0 + 1056);
  v62 = *(_QWORD *)(v0 + 1048);
  v64 = *(_QWORD *)(v0 + 1040);
  v66 = *(_QWORD *)(v0 + 1016);
  v68 = *(_QWORD *)(v0 + 1008);
  v70 = *(_QWORD *)(v0 + 1000);
  v72 = *(_QWORD *)(v0 + 992);
  v74 = *(_QWORD *)(v0 + 968);
  v76 = *(_QWORD *)(v0 + 960);
  sub_1000126B0(v19, type metadata accessor for BeaconIdentifier);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v36);
  swift_task_dealloc(v39);
  swift_task_dealloc(v42);
  swift_task_dealloc(v45);
  swift_task_dealloc(v48);
  swift_task_dealloc(v51);
  swift_task_dealloc(v54);
  swift_task_dealloc(v56);
  swift_task_dealloc(v58);
  swift_task_dealloc(v60);
  swift_task_dealloc(v62);
  swift_task_dealloc(v64);
  swift_task_dealloc(v66);
  swift_task_dealloc(v68);
  swift_task_dealloc(v70);
  swift_task_dealloc(v72);
  swift_task_dealloc(v74);
  swift_task_dealloc(v76);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v78);
}

uint64_t sub_100B412B0(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 1584);
  *(_QWORD *)(*v2 + 1592) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = sub_100B41660;
  }
  else
  {
    *(_QWORD *)(v4 + 1600) = a1;
    v6 = sub_100B41324;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_100B41324()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(uint64_t, uint64_t);
  uint64_t v52;

  v51 = *(void (**)(uint64_t, uint64_t))(v0 + 1552);
  v27 = *(_QWORD *)(v0 + 1512);
  v29 = *(_QWORD *)(v0 + 1520);
  v23 = *(_QWORD *)(v0 + 1504);
  v19 = *(_QWORD *)(v0 + 1496);
  v45 = *(_QWORD *)(v0 + 1368);
  v47 = *(_QWORD *)(v0 + 1376);
  v41 = *(_QWORD *)(v0 + 1352);
  v43 = *(_QWORD *)(v0 + 1360);
  v35 = *(_QWORD *)(v0 + 1336);
  v37 = *(_QWORD *)(v0 + 1344);
  v25 = *(_QWORD *)(v0 + 1328);
  v21 = *(_QWORD *)(v0 + 1320);
  v1 = *(_QWORD *)(v0 + 1312);
  v2 = *(_QWORD *)(v0 + 1304);
  v3 = *(_QWORD *)(v0 + 1296);
  v4 = *(_QWORD *)(v0 + 1288);
  v5 = *(_QWORD *)(v0 + 1280);
  v6 = *(_QWORD *)(v0 + 1272);
  v49 = *(_QWORD *)(v0 + 1152);
  v39 = *(_QWORD *)(v0 + 1088);
  v31 = *(_QWORD *)(v0 + 976);
  v33 = *(_QWORD *)(v0 + 1008);
  swift_release();
  swift_release();
  swift_release();
  sub_100B4AD98((_QWORD *)(v0 + 352), (void (*)(uint64_t, uint64_t))sub_10001BC14);
  sub_100758808(v6, v5, v4, v3, v2, v1, (void (*)(void))sub_10001BC14, (uint64_t (*)(uint64_t, uint64_t))sub_1000FC25C);
  sub_10001BC14(v19, v23);
  sub_10001BC14(v27, v29);
  sub_10001BC14(v21, v25);
  sub_10001BC14(v6, v5);
  sub_10001BC14(v4, v3);
  sub_100758808(v35, v37, v41, v43, v45, v47, (void (*)(void))sub_10001BC14, (uint64_t (*)(uint64_t, uint64_t))sub_10001BC14);
  v51(v33, v31);
  sub_1000126B0(v39, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
  sub_1000126B0(v49, type metadata accessor for ObservedAdvertisement);
  v52 = *(_QWORD *)(v0 + 1600);
  v7 = *(_QWORD *)(v0 + 1224);
  v8 = *(_QWORD *)(v0 + 1216);
  v9 = *(_QWORD *)(v0 + 1208);
  v10 = *(_QWORD *)(v0 + 1200);
  v11 = *(_QWORD *)(v0 + 1192);
  v12 = *(_QWORD *)(v0 + 1184);
  v13 = *(_QWORD *)(v0 + 1176);
  v14 = *(_QWORD *)(v0 + 1168);
  v15 = *(_QWORD *)(v0 + 1152);
  v17 = *(_QWORD *)(v0 + 1144);
  v18 = *(_QWORD *)(v0 + 1136);
  v20 = *(_QWORD *)(v0 + 1128);
  v22 = *(_QWORD *)(v0 + 1120);
  v24 = *(_QWORD *)(v0 + 1096);
  v26 = *(_QWORD *)(v0 + 1088);
  v28 = *(_QWORD *)(v0 + 1080);
  v30 = *(_QWORD *)(v0 + 1072);
  v32 = *(_QWORD *)(v0 + 1064);
  v34 = *(_QWORD *)(v0 + 1056);
  v36 = *(_QWORD *)(v0 + 1048);
  v38 = *(_QWORD *)(v0 + 1040);
  v40 = *(_QWORD *)(v0 + 1016);
  v42 = *(_QWORD *)(v0 + 1008);
  v44 = *(_QWORD *)(v0 + 1000);
  v46 = *(_QWORD *)(v0 + 992);
  v48 = *(_QWORD *)(v0 + 968);
  v50 = *(_QWORD *)(v0 + 960);
  sub_1000126B0(v7, type metadata accessor for BeaconIdentifier);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v20);
  swift_task_dealloc(v22);
  swift_task_dealloc(v24);
  swift_task_dealloc(v26);
  swift_task_dealloc(v28);
  swift_task_dealloc(v30);
  swift_task_dealloc(v32);
  swift_task_dealloc(v34);
  swift_task_dealloc(v36);
  swift_task_dealloc(v38);
  swift_task_dealloc(v40);
  swift_task_dealloc(v42);
  swift_task_dealloc(v44);
  swift_task_dealloc(v46);
  swift_task_dealloc(v48);
  swift_task_dealloc(v50);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v52);
}

uint64_t sub_100B41660()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(uint64_t, uint64_t);

  v51 = *(void (**)(uint64_t, uint64_t))(v0 + 1552);
  v27 = *(_QWORD *)(v0 + 1512);
  v29 = *(_QWORD *)(v0 + 1520);
  v23 = *(_QWORD *)(v0 + 1504);
  v19 = *(_QWORD *)(v0 + 1496);
  v45 = *(_QWORD *)(v0 + 1368);
  v47 = *(_QWORD *)(v0 + 1376);
  v41 = *(_QWORD *)(v0 + 1352);
  v43 = *(_QWORD *)(v0 + 1360);
  v35 = *(_QWORD *)(v0 + 1336);
  v37 = *(_QWORD *)(v0 + 1344);
  v25 = *(_QWORD *)(v0 + 1328);
  v21 = *(_QWORD *)(v0 + 1320);
  v1 = *(_QWORD *)(v0 + 1312);
  v2 = *(_QWORD *)(v0 + 1304);
  v3 = *(_QWORD *)(v0 + 1296);
  v4 = *(_QWORD *)(v0 + 1288);
  v5 = *(_QWORD *)(v0 + 1280);
  v6 = *(_QWORD *)(v0 + 1272);
  v49 = *(_QWORD *)(v0 + 1152);
  v39 = *(_QWORD *)(v0 + 1088);
  v31 = *(_QWORD *)(v0 + 976);
  v33 = *(_QWORD *)(v0 + 1008);
  swift_release();
  swift_release();
  swift_release();
  sub_100B4AD98((_QWORD *)(v0 + 352), (void (*)(uint64_t, uint64_t))sub_10001BC14);
  sub_100758808(v6, v5, v4, v3, v2, v1, (void (*)(void))sub_10001BC14, (uint64_t (*)(uint64_t, uint64_t))sub_1000FC25C);
  sub_10001BC14(v19, v23);
  sub_10001BC14(v27, v29);
  sub_10001BC14(v21, v25);
  sub_10001BC14(v6, v5);
  sub_10001BC14(v4, v3);
  sub_100758808(v35, v37, v41, v43, v45, v47, (void (*)(void))sub_10001BC14, (uint64_t (*)(uint64_t, uint64_t))sub_10001BC14);
  v51(v33, v31);
  sub_1000126B0(v39, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
  sub_1000126B0(v49, type metadata accessor for ObservedAdvertisement);
  v7 = *(_QWORD *)(v0 + 1224);
  v8 = *(_QWORD *)(v0 + 1216);
  v9 = *(_QWORD *)(v0 + 1208);
  v10 = *(_QWORD *)(v0 + 1200);
  v11 = *(_QWORD *)(v0 + 1192);
  v12 = *(_QWORD *)(v0 + 1184);
  v13 = *(_QWORD *)(v0 + 1176);
  v14 = *(_QWORD *)(v0 + 1168);
  v15 = *(_QWORD *)(v0 + 1152);
  v17 = *(_QWORD *)(v0 + 1144);
  v18 = *(_QWORD *)(v0 + 1136);
  v20 = *(_QWORD *)(v0 + 1128);
  v22 = *(_QWORD *)(v0 + 1120);
  v24 = *(_QWORD *)(v0 + 1096);
  v26 = *(_QWORD *)(v0 + 1088);
  v28 = *(_QWORD *)(v0 + 1080);
  v30 = *(_QWORD *)(v0 + 1072);
  v32 = *(_QWORD *)(v0 + 1064);
  v34 = *(_QWORD *)(v0 + 1056);
  v36 = *(_QWORD *)(v0 + 1048);
  v38 = *(_QWORD *)(v0 + 1040);
  v40 = *(_QWORD *)(v0 + 1016);
  v42 = *(_QWORD *)(v0 + 1008);
  v44 = *(_QWORD *)(v0 + 1000);
  v46 = *(_QWORD *)(v0 + 992);
  v48 = *(_QWORD *)(v0 + 968);
  v50 = *(_QWORD *)(v0 + 960);
  sub_1000126B0(v7, type metadata accessor for BeaconIdentifier);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v20);
  swift_task_dealloc(v22);
  swift_task_dealloc(v24);
  swift_task_dealloc(v26);
  swift_task_dealloc(v28);
  swift_task_dealloc(v30);
  swift_task_dealloc(v32);
  swift_task_dealloc(v34);
  swift_task_dealloc(v36);
  swift_task_dealloc(v38);
  swift_task_dealloc(v40);
  swift_task_dealloc(v42);
  swift_task_dealloc(v44);
  swift_task_dealloc(v46);
  swift_task_dealloc(v48);
  swift_task_dealloc(v50);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100B41998()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t (*v4)();
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 1616);
  *(_QWORD *)(*(_QWORD *)v1 + 1624) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_100B41AF0;
  }
  else
  {
    v5 = v2[166];
    v6 = v2[165];
    v7 = v2[162];
    v8 = v2[161];
    v9 = v2[160];
    v10 = v2[159];
    sub_10001BC14(v6, v5);
    sub_10001BC14(v10, v9);
    sub_10001BC14(v8, v7);
    v4 = sub_100B41A38;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_100B41A38()
{
  uint64_t v0;
  _OWORD *v1;
  __int128 v2;
  __int128 v3;
  uint64_t result;
  _QWORD *v5;
  uint64_t (*v6)(void);

  v1 = *(_OWORD **)(v0 + 1608);
  v2 = *(_OWORD *)(v0 + 256);
  v3 = *(_OWORD *)(v0 + 288);
  v1[3] = *(_OWORD *)(v0 + 272);
  v1[4] = v3;
  v1[2] = v2;
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 600, &qword_1010EE220);
  if (*(_QWORD *)(v0 + 624))
  {
    sub_10000F9FC((__int128 *)(v0 + 600), v0 + 440);
    sub_10001AA44((_QWORD *)(v0 + 440), *(_QWORD *)(v0 + 464));
    v6 = (uint64_t (*)(void))((char *)&dword_1010EBC70 + dword_1010EBC70);
    v5 = (_QWORD *)swift_task_alloc(unk_1010EBC74);
    *(_QWORD *)(v0 + 1632) = v5;
    *v5 = v0;
    v5[1] = sub_100B41E04;
    return v6();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100B41AF0()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v1 = *(_QWORD *)(v0 + 1608);
  v43 = *(_QWORD *)(v0 + 1368);
  v45 = *(_QWORD *)(v0 + 1376);
  v41 = *(_QWORD *)(v0 + 1360);
  v35 = *(_QWORD *)(v0 + 1344);
  v37 = *(_QWORD *)(v0 + 1352);
  v33 = *(_QWORD *)(v0 + 1336);
  v2 = *(_QWORD *)(v0 + 1328);
  v3 = *(_QWORD *)(v0 + 1320);
  v27 = *(_QWORD *)(v0 + 1304);
  v29 = *(_QWORD *)(v0 + 1312);
  v4 = *(_QWORD *)(v0 + 1296);
  v5 = *(_QWORD *)(v0 + 1288);
  v6 = *(_QWORD *)(v0 + 1280);
  v7 = *(_QWORD *)(v0 + 1272);
  v39 = *(_QWORD *)(v0 + 1152);
  v31 = *(_QWORD *)(v0 + 1088);
  sub_10001BC14(v3, v2);
  sub_10001BC14(v7, v6);
  sub_10001BC14(v5, v4);
  *(_QWORD *)(v1 + 16) = 0;
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  sub_100758808(v7, v6, v5, v4, v27, v29, (void (*)(void))sub_10001BC14, (uint64_t (*)(uint64_t, uint64_t))sub_1000FC25C);
  sub_10001BC14(v3, v2);
  sub_10001BC14(v7, v6);
  sub_10001BC14(v5, v4);
  sub_100758808(v33, v35, v37, v41, v43, v45, (void (*)(void))sub_10001BC14, (uint64_t (*)(uint64_t, uint64_t))sub_10001BC14);
  sub_1000126B0(v31, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
  sub_1000126B0(v39, type metadata accessor for ObservedAdvertisement);
  v8 = *(_QWORD *)(v0 + 1224);
  v9 = *(_QWORD *)(v0 + 1216);
  v10 = *(_QWORD *)(v0 + 1208);
  v11 = *(_QWORD *)(v0 + 1200);
  v12 = *(_QWORD *)(v0 + 1192);
  v13 = *(_QWORD *)(v0 + 1184);
  v14 = *(_QWORD *)(v0 + 1176);
  v15 = *(_QWORD *)(v0 + 1168);
  v16 = *(_QWORD *)(v0 + 1152);
  v18 = *(_QWORD *)(v0 + 1144);
  v19 = *(_QWORD *)(v0 + 1136);
  v20 = *(_QWORD *)(v0 + 1128);
  v21 = *(_QWORD *)(v0 + 1120);
  v22 = *(_QWORD *)(v0 + 1096);
  v23 = *(_QWORD *)(v0 + 1088);
  v24 = *(_QWORD *)(v0 + 1080);
  v25 = *(_QWORD *)(v0 + 1072);
  v26 = *(_QWORD *)(v0 + 1064);
  v28 = *(_QWORD *)(v0 + 1056);
  v30 = *(_QWORD *)(v0 + 1048);
  v32 = *(_QWORD *)(v0 + 1040);
  v34 = *(_QWORD *)(v0 + 1016);
  v36 = *(_QWORD *)(v0 + 1008);
  v38 = *(_QWORD *)(v0 + 1000);
  v40 = *(_QWORD *)(v0 + 992);
  v42 = *(_QWORD *)(v0 + 968);
  v44 = *(_QWORD *)(v0 + 960);
  sub_1000126B0(v8, type metadata accessor for BeaconIdentifier);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v28);
  swift_task_dealloc(v30);
  swift_task_dealloc(v32);
  swift_task_dealloc(v34);
  swift_task_dealloc(v36);
  swift_task_dealloc(v38);
  swift_task_dealloc(v40);
  swift_task_dealloc(v42);
  swift_task_dealloc(v44);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100B41E04(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 1632);
  *(_QWORD *)(*(_QWORD *)v1 + 1640) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100B41E60, 0, 0);
}

uint64_t sub_100B41E60()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  _QWORD *v21;

  v1 = (_QWORD *)(v0 + 440);
  if (*(_QWORD *)(v0 + 1640))
  {
    v2 = *(_QWORD *)(v0 + 1224);
    v3 = *(_QWORD *)(v0 + 1160);
    v4 = *(_QWORD *)(v0 + 960);
    v5 = *(_QWORD *)(v0 + 952);
    v6 = *(_QWORD *)(v0 + 944);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v4, v2 + *(int *)(v3 + 20), v6);
    return swift_task_switch(sub_100B41FD4, *(_QWORD *)(v0 + 1640), 0);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    *(_QWORD *)(v0 + 1432) = *(_QWORD *)(v0 + 1608);
    v8 = *(int *)(v0 + 1728);
    v9 = *(_QWORD *)(v0 + 1328);
    v10 = *(_QWORD *)(v0 + 1320);
    v11 = *(_QWORD *)(v0 + 1296);
    v12 = *(_QWORD *)(v0 + 1288);
    v13 = *(_QWORD *)(v0 + 1280);
    v14 = *(_QWORD *)(v0 + 1272);
    v15 = *(_QWORD *)(v0 + 1264);
    v16 = *(_QWORD *)(v0 + 1088);
    *(_QWORD *)(v0 + 112) = v10;
    v17 = *(_QWORD *)(v0 + 1024);
    *(_QWORD *)(v0 + 120) = v9;
    *(_QWORD *)(v0 + 128) = v14;
    *(_QWORD *)(v0 + 136) = v13;
    *(_QWORD *)(v0 + 144) = v12;
    *(_QWORD *)(v0 + 152) = v11;
    v18 = *(int *)(v17 + 24);
    v19 = *(_BYTE *)(v16 + v8);
    *(_DWORD *)(v0 + 1732) = v18;
    v20 = *(_QWORD *)(v16 + v18);
    sub_10001BBBC(v10, v9);
    sub_10001BBBC(v14, v13);
    sub_10001BBBC(v12, v11);
    v21 = (_QWORD *)swift_task_alloc(dword_1010F551C);
    *(_QWORD *)(v0 + 1440) = v21;
    *v21 = v0;
    v21[1] = sub_100B3EE18;
    return sub_1002ADDB8(v0 + 352, *(_QWORD *)(v0 + 1224), v0 + 112, v0 + 160, v19, v20, v15, 4000);
  }
}

uint64_t sub_100B41FD4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t (*v2)();

  v1 = v0[203];
  sub_100B8AAF4(v0[120], *(_QWORD *)(v0[205] + 128), v0[121]);
  v0[206] = v1;
  (*(void (**)(_QWORD, _QWORD))(v0[119] + 8))(v0[120], v0[118]);
  if (v1)
  {
    swift_bridgeObjectRelease();
    v2 = sub_100B42744;
  }
  else
  {
    v2 = sub_100B42070;
  }
  return swift_task_switch(v2, 0, 0);
}

uint64_t sub_100B42070()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  Swift::String v34;
  Swift::String v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;

  v1 = *(_QWORD *)(v0 + 968);
  v2 = type metadata accessor for StandaloneBeacon(0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(v1, 1, v2) == 1)
  {
    swift_release();
    sub_100004048(v1, &qword_1010F5E90);
    *(_QWORD *)(v0 + 1432) = *(_QWORD *)(v0 + 1608);
    v3 = *(int *)(v0 + 1728);
    v4 = *(_QWORD *)(v0 + 1328);
    v5 = *(_QWORD *)(v0 + 1320);
    v6 = *(_QWORD *)(v0 + 1296);
    v7 = *(_QWORD *)(v0 + 1288);
    v8 = *(_QWORD *)(v0 + 1280);
    v9 = *(_QWORD *)(v0 + 1272);
    v10 = *(_QWORD *)(v0 + 1264);
    v11 = *(_QWORD *)(v0 + 1088);
    v12 = *(_QWORD *)(v0 + 1024);
    *(_QWORD *)(v0 + 112) = v5;
    *(_QWORD *)(v0 + 120) = v4;
    *(_QWORD *)(v0 + 128) = v9;
    *(_QWORD *)(v0 + 136) = v8;
    *(_QWORD *)(v0 + 144) = v7;
    *(_QWORD *)(v0 + 152) = v6;
    v13 = *(int *)(v12 + 24);
    v14 = *(_BYTE *)(v11 + v3);
    *(_DWORD *)(v0 + 1732) = v13;
    v15 = *(_QWORD *)(v11 + v13);
    sub_10001BBBC(v5, v4);
    sub_10001BBBC(v9, v8);
    sub_10001BBBC(v7, v6);
    v16 = (_QWORD *)swift_task_alloc(dword_1010F551C);
    *(_QWORD *)(v0 + 1440) = v16;
    *v16 = v0;
    v16[1] = sub_100B3EE18;
    return sub_1002ADDB8(v0 + 352, *(_QWORD *)(v0 + 1224), v0 + 112, v0 + 160, v14, v15, v10, 4000);
  }
  else
  {
    v18 = *(_QWORD *)(v0 + 1224);
    v19 = *(_QWORD *)(v0 + 1168);
    sub_100004048(v1, &qword_1010F5E90);
    v20 = sub_10005972C(v18, v19, type metadata accessor for BeaconIdentifier);
    v21 = Logger.logObject.getter(v20);
    v22 = static os_log_type_t.default.getter(v21);
    v23 = os_log_type_enabled(v21, v22);
    v24 = *(_QWORD *)(v0 + 1376);
    v25 = *(_QWORD *)(v0 + 1368);
    v26 = *(_QWORD *)(v0 + 1360);
    v80 = *(_QWORD *)(v0 + 1344);
    v82 = *(_QWORD *)(v0 + 1352);
    v78 = *(_QWORD *)(v0 + 1336);
    v72 = *(_QWORD *)(v0 + 1328);
    v66 = *(_QWORD *)(v0 + 1312);
    v68 = *(_QWORD *)(v0 + 1320);
    v64 = *(_QWORD *)(v0 + 1304);
    v76 = *(_QWORD *)(v0 + 1296);
    v74 = *(_QWORD *)(v0 + 1288);
    v70 = *(_QWORD *)(v0 + 1280);
    v27 = *(_QWORD *)(v0 + 1272);
    v28 = *(_QWORD *)(v0 + 1168);
    v58 = *(_QWORD *)(v0 + 1088);
    v60 = *(_QWORD *)(v0 + 1152);
    if (v23)
    {
      v29 = *(_QWORD *)(v0 + 944);
      v30 = swift_slowAlloc(22, -1);
      v55 = v25;
      v31 = swift_slowAlloc(32, -1);
      v84 = v31;
      *(_DWORD *)v30 = 141558275;
      *(_QWORD *)(v0 + 784) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 784, v0 + 792, v30 + 4, v30 + 12);
      *(_WORD *)(v30 + 12) = 2081;
      v51 = v24;
      v32 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v85 = dispatch thunk of CustomStringConvertible.description.getter(v29, v32);
      v86 = v33;
      v34._countAndFlagsBits = 47;
      v34._object = (void *)0xE100000000000000;
      String.append(_:)(v34);
      v35._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v29, v32);
      String.append(_:)(v35);
      swift_bridgeObjectRelease();
      *(_QWORD *)(v0 + 792) = sub_100016940(v85, v86, &v84);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 792, v0 + 800, v30 + 14, v30 + 22);
      swift_bridgeObjectRelease();
      sub_1000126B0(v28, type metadata accessor for BeaconIdentifier);
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Skipping secondary keys for standalone beacon %{private,mask.hash}s", (uint8_t *)v30, 0x16u);
      swift_arrayDestroy(v31, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v31, -1, -1);
      swift_slowDealloc(v30, -1, -1);

      swift_release();
      swift_release();
      swift_release();
      swift_release();
      sub_100758808(v27, v70, v74, v76, v64, v66, (void (*)(void))sub_10001BC14, (uint64_t (*)(uint64_t, uint64_t))sub_1000FC25C);
      sub_10001BC14(v68, v72);
      sub_10001BC14(v27, v70);
      sub_10001BC14(v74, v76);
      v36 = v78;
      v37 = v80;
      v38 = v82;
      v40 = v55;
      v39 = v26;
      v41 = v51;
    }
    else
    {

      swift_release();
      swift_release();
      swift_release();
      swift_release();
      sub_100758808(v27, v70, v74, v76, v64, v66, (void (*)(void))sub_10001BC14, (uint64_t (*)(uint64_t, uint64_t))sub_1000FC25C);
      sub_1000126B0(v28, type metadata accessor for BeaconIdentifier);
      sub_10001BC14(v68, v72);
      sub_10001BC14(v27, v70);
      sub_10001BC14(v74, v76);
      v36 = v78;
      v37 = v80;
      v38 = v82;
      v39 = v26;
      v40 = v25;
      v41 = v24;
    }
    sub_100758808(v36, v37, v38, v39, v40, v41, (void (*)(void))sub_10001BC14, (uint64_t (*)(uint64_t, uint64_t))sub_10001BC14);
    sub_1000126B0(v58, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
    sub_1000126B0(v60, type metadata accessor for ObservedAdvertisement);
    v83 = *(_QWORD *)(v0 + 1608);
    v42 = *(_QWORD *)(v0 + 1224);
    v43 = *(_QWORD *)(v0 + 1216);
    v44 = *(_QWORD *)(v0 + 1208);
    v45 = *(_QWORD *)(v0 + 1200);
    v46 = *(_QWORD *)(v0 + 1192);
    v47 = *(_QWORD *)(v0 + 1184);
    v48 = *(_QWORD *)(v0 + 1176);
    v49 = *(_QWORD *)(v0 + 1168);
    v50 = *(_QWORD *)(v0 + 1152);
    v52 = *(_QWORD *)(v0 + 1144);
    v53 = *(_QWORD *)(v0 + 1136);
    v54 = *(_QWORD *)(v0 + 1128);
    v56 = *(_QWORD *)(v0 + 1120);
    v57 = *(_QWORD *)(v0 + 1096);
    v59 = *(_QWORD *)(v0 + 1088);
    v61 = *(_QWORD *)(v0 + 1080);
    v62 = *(_QWORD *)(v0 + 1072);
    v63 = *(_QWORD *)(v0 + 1064);
    v65 = *(_QWORD *)(v0 + 1056);
    v67 = *(_QWORD *)(v0 + 1048);
    v69 = *(_QWORD *)(v0 + 1040);
    v71 = *(_QWORD *)(v0 + 1016);
    v73 = *(_QWORD *)(v0 + 1008);
    v75 = *(_QWORD *)(v0 + 1000);
    v77 = *(_QWORD *)(v0 + 992);
    v79 = *(_QWORD *)(v0 + 968);
    v81 = *(_QWORD *)(v0 + 960);
    sub_1000126B0(v42, type metadata accessor for BeaconIdentifier);
    swift_task_dealloc(v42);
    swift_task_dealloc(v43);
    swift_task_dealloc(v44);
    swift_task_dealloc(v45);
    swift_task_dealloc(v46);
    swift_task_dealloc(v47);
    swift_task_dealloc(v48);
    swift_task_dealloc(v49);
    swift_task_dealloc(v50);
    swift_task_dealloc(v52);
    swift_task_dealloc(v53);
    swift_task_dealloc(v54);
    swift_task_dealloc(v56);
    swift_task_dealloc(v57);
    swift_task_dealloc(v59);
    swift_task_dealloc(v61);
    swift_task_dealloc(v62);
    swift_task_dealloc(v63);
    swift_task_dealloc(v65);
    swift_task_dealloc(v67);
    swift_task_dealloc(v69);
    swift_task_dealloc(v71);
    swift_task_dealloc(v73);
    swift_task_dealloc(v75);
    swift_task_dealloc(v77);
    swift_task_dealloc(v79);
    swift_task_dealloc(v81);
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v83);
  }
}

uint64_t sub_100B42744()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v42 = *(_QWORD *)(v0 + 1368);
  v44 = *(_QWORD *)(v0 + 1376);
  v40 = *(_QWORD *)(v0 + 1360);
  v34 = *(_QWORD *)(v0 + 1344);
  v36 = *(_QWORD *)(v0 + 1352);
  v32 = *(_QWORD *)(v0 + 1336);
  v26 = *(_QWORD *)(v0 + 1320);
  v28 = *(_QWORD *)(v0 + 1328);
  v1 = *(_QWORD *)(v0 + 1312);
  v2 = *(_QWORD *)(v0 + 1304);
  v3 = *(_QWORD *)(v0 + 1296);
  v4 = *(_QWORD *)(v0 + 1288);
  v5 = *(_QWORD *)(v0 + 1280);
  v6 = *(_QWORD *)(v0 + 1272);
  v38 = *(_QWORD *)(v0 + 1152);
  v30 = *(_QWORD *)(v0 + 1088);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  sub_100758808(v6, v5, v4, v3, v2, v1, (void (*)(void))sub_10001BC14, (uint64_t (*)(uint64_t, uint64_t))sub_1000FC25C);
  sub_10001BC14(v26, v28);
  sub_10001BC14(v6, v5);
  sub_10001BC14(v4, v3);
  sub_100758808(v32, v34, v36, v40, v42, v44, (void (*)(void))sub_10001BC14, (uint64_t (*)(uint64_t, uint64_t))sub_10001BC14);
  sub_1000126B0(v30, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
  sub_1000126B0(v38, type metadata accessor for ObservedAdvertisement);
  v7 = *(_QWORD *)(v0 + 1224);
  v8 = *(_QWORD *)(v0 + 1216);
  v9 = *(_QWORD *)(v0 + 1208);
  v10 = *(_QWORD *)(v0 + 1200);
  v11 = *(_QWORD *)(v0 + 1192);
  v12 = *(_QWORD *)(v0 + 1184);
  v13 = *(_QWORD *)(v0 + 1176);
  v14 = *(_QWORD *)(v0 + 1168);
  v15 = *(_QWORD *)(v0 + 1152);
  v17 = *(_QWORD *)(v0 + 1144);
  v18 = *(_QWORD *)(v0 + 1136);
  v19 = *(_QWORD *)(v0 + 1128);
  v20 = *(_QWORD *)(v0 + 1120);
  v21 = *(_QWORD *)(v0 + 1096);
  v22 = *(_QWORD *)(v0 + 1088);
  v23 = *(_QWORD *)(v0 + 1080);
  v24 = *(_QWORD *)(v0 + 1072);
  v25 = *(_QWORD *)(v0 + 1064);
  v27 = *(_QWORD *)(v0 + 1056);
  v29 = *(_QWORD *)(v0 + 1048);
  v31 = *(_QWORD *)(v0 + 1040);
  v33 = *(_QWORD *)(v0 + 1016);
  v35 = *(_QWORD *)(v0 + 1008);
  v37 = *(_QWORD *)(v0 + 1000);
  v39 = *(_QWORD *)(v0 + 992);
  v41 = *(_QWORD *)(v0 + 968);
  v43 = *(_QWORD *)(v0 + 960);
  sub_1000126B0(v7, type metadata accessor for BeaconIdentifier);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v27);
  swift_task_dealloc(v29);
  swift_task_dealloc(v31);
  swift_task_dealloc(v33);
  swift_task_dealloc(v35);
  swift_task_dealloc(v37);
  swift_task_dealloc(v39);
  swift_task_dealloc(v41);
  swift_task_dealloc(v43);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100B42A28(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 1656);
  *(_QWORD *)(*v2 + 1664) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = sub_100B42D7C;
  }
  else
  {
    *(_QWORD *)(v4 + 1672) = a1;
    v6 = sub_100B42A9C;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_100B42A9C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v42 = *(_QWORD *)(v0 + 1368);
  v44 = *(_QWORD *)(v0 + 1376);
  v40 = *(_QWORD *)(v0 + 1360);
  v34 = *(_QWORD *)(v0 + 1344);
  v36 = *(_QWORD *)(v0 + 1352);
  v32 = *(_QWORD *)(v0 + 1336);
  v28 = *(_QWORD *)(v0 + 1328);
  v1 = *(_QWORD *)(v0 + 1320);
  v2 = *(_QWORD *)(v0 + 1312);
  v3 = *(_QWORD *)(v0 + 1304);
  v4 = *(_QWORD *)(v0 + 1296);
  v5 = *(_QWORD *)(v0 + 1288);
  v6 = *(_QWORD *)(v0 + 1280);
  v7 = *(_QWORD *)(v0 + 1272);
  v38 = *(_QWORD *)(v0 + 1152);
  v30 = *(_QWORD *)(v0 + 1088);
  swift_release();
  swift_release();
  swift_release();
  sub_100758808(v7, v6, v5, v4, v3, v2, (void (*)(void))sub_10001BC14, (uint64_t (*)(uint64_t, uint64_t))sub_1000FC25C);
  sub_10001BC14(v1, v28);
  sub_10001BC14(v7, v6);
  sub_10001BC14(v5, v4);
  sub_100758808(v32, v34, v36, v40, v42, v44, (void (*)(void))sub_10001BC14, (uint64_t (*)(uint64_t, uint64_t))sub_10001BC14);
  sub_1000126B0(v30, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
  sub_1000126B0(v38, type metadata accessor for ObservedAdvertisement);
  v45 = *(_QWORD *)(v0 + 1672);
  v8 = *(_QWORD *)(v0 + 1224);
  v9 = *(_QWORD *)(v0 + 1216);
  v10 = *(_QWORD *)(v0 + 1208);
  v11 = *(_QWORD *)(v0 + 1200);
  v12 = *(_QWORD *)(v0 + 1192);
  v13 = *(_QWORD *)(v0 + 1184);
  v14 = *(_QWORD *)(v0 + 1176);
  v15 = *(_QWORD *)(v0 + 1168);
  v16 = *(_QWORD *)(v0 + 1152);
  v18 = *(_QWORD *)(v0 + 1144);
  v19 = *(_QWORD *)(v0 + 1136);
  v20 = *(_QWORD *)(v0 + 1128);
  v21 = *(_QWORD *)(v0 + 1120);
  v22 = *(_QWORD *)(v0 + 1096);
  v23 = *(_QWORD *)(v0 + 1088);
  v24 = *(_QWORD *)(v0 + 1080);
  v25 = *(_QWORD *)(v0 + 1072);
  v26 = *(_QWORD *)(v0 + 1064);
  v27 = *(_QWORD *)(v0 + 1056);
  v29 = *(_QWORD *)(v0 + 1048);
  v31 = *(_QWORD *)(v0 + 1040);
  v33 = *(_QWORD *)(v0 + 1016);
  v35 = *(_QWORD *)(v0 + 1008);
  v37 = *(_QWORD *)(v0 + 1000);
  v39 = *(_QWORD *)(v0 + 992);
  v41 = *(_QWORD *)(v0 + 968);
  v43 = *(_QWORD *)(v0 + 960);
  sub_1000126B0(v8, type metadata accessor for BeaconIdentifier);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v29);
  swift_task_dealloc(v31);
  swift_task_dealloc(v33);
  swift_task_dealloc(v35);
  swift_task_dealloc(v37);
  swift_task_dealloc(v39);
  swift_task_dealloc(v41);
  swift_task_dealloc(v43);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v45);
}

uint64_t sub_100B42D7C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v42 = *(_QWORD *)(v0 + 1368);
  v44 = *(_QWORD *)(v0 + 1376);
  v40 = *(_QWORD *)(v0 + 1360);
  v34 = *(_QWORD *)(v0 + 1344);
  v36 = *(_QWORD *)(v0 + 1352);
  v32 = *(_QWORD *)(v0 + 1336);
  v28 = *(_QWORD *)(v0 + 1328);
  v1 = *(_QWORD *)(v0 + 1320);
  v2 = *(_QWORD *)(v0 + 1312);
  v3 = *(_QWORD *)(v0 + 1304);
  v4 = *(_QWORD *)(v0 + 1296);
  v5 = *(_QWORD *)(v0 + 1288);
  v6 = *(_QWORD *)(v0 + 1280);
  v7 = *(_QWORD *)(v0 + 1272);
  v38 = *(_QWORD *)(v0 + 1152);
  v30 = *(_QWORD *)(v0 + 1088);
  swift_release();
  swift_release();
  swift_release();
  sub_100758808(v7, v6, v5, v4, v3, v2, (void (*)(void))sub_10001BC14, (uint64_t (*)(uint64_t, uint64_t))sub_1000FC25C);
  sub_10001BC14(v1, v28);
  sub_10001BC14(v7, v6);
  sub_10001BC14(v5, v4);
  sub_100758808(v32, v34, v36, v40, v42, v44, (void (*)(void))sub_10001BC14, (uint64_t (*)(uint64_t, uint64_t))sub_10001BC14);
  sub_1000126B0(v30, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
  sub_1000126B0(v38, type metadata accessor for ObservedAdvertisement);
  v8 = *(_QWORD *)(v0 + 1224);
  v9 = *(_QWORD *)(v0 + 1216);
  v10 = *(_QWORD *)(v0 + 1208);
  v11 = *(_QWORD *)(v0 + 1200);
  v12 = *(_QWORD *)(v0 + 1192);
  v13 = *(_QWORD *)(v0 + 1184);
  v14 = *(_QWORD *)(v0 + 1176);
  v15 = *(_QWORD *)(v0 + 1168);
  v16 = *(_QWORD *)(v0 + 1152);
  v18 = *(_QWORD *)(v0 + 1144);
  v19 = *(_QWORD *)(v0 + 1136);
  v20 = *(_QWORD *)(v0 + 1128);
  v21 = *(_QWORD *)(v0 + 1120);
  v22 = *(_QWORD *)(v0 + 1096);
  v23 = *(_QWORD *)(v0 + 1088);
  v24 = *(_QWORD *)(v0 + 1080);
  v25 = *(_QWORD *)(v0 + 1072);
  v26 = *(_QWORD *)(v0 + 1064);
  v27 = *(_QWORD *)(v0 + 1056);
  v29 = *(_QWORD *)(v0 + 1048);
  v31 = *(_QWORD *)(v0 + 1040);
  v33 = *(_QWORD *)(v0 + 1016);
  v35 = *(_QWORD *)(v0 + 1008);
  v37 = *(_QWORD *)(v0 + 1000);
  v39 = *(_QWORD *)(v0 + 992);
  v41 = *(_QWORD *)(v0 + 968);
  v43 = *(_QWORD *)(v0 + 960);
  sub_1000126B0(v8, type metadata accessor for BeaconIdentifier);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v29);
  swift_task_dealloc(v31);
  swift_task_dealloc(v33);
  swift_task_dealloc(v35);
  swift_task_dealloc(v37);
  swift_task_dealloc(v39);
  swift_task_dealloc(v41);
  swift_task_dealloc(v43);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100B43058(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 1680);
  *(_QWORD *)(*v2 + 1688) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = sub_100B43388;
  }
  else
  {
    *(_QWORD *)(v4 + 1696) = a1;
    v6 = sub_100B430CC;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_100B430CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v41 = *(_QWORD *)(v0 + 1368);
  v43 = *(_QWORD *)(v0 + 1376);
  v37 = *(_QWORD *)(v0 + 1352);
  v39 = *(_QWORD *)(v0 + 1360);
  v33 = *(_QWORD *)(v0 + 1336);
  v35 = *(_QWORD *)(v0 + 1344);
  v1 = *(_QWORD *)(v0 + 1320);
  v2 = *(_QWORD *)(v0 + 1312);
  v3 = *(_QWORD *)(v0 + 1304);
  v4 = *(_QWORD *)(v0 + 1296);
  v5 = *(_QWORD *)(v0 + 1288);
  v6 = *(_QWORD *)(v0 + 1280);
  v7 = *(_QWORD *)(v0 + 1272);
  v29 = *(_QWORD *)(v0 + 1328);
  v31 = *(_QWORD *)(v0 + 1152);
  swift_release();
  swift_release();
  swift_release();
  sub_100758808(v7, v6, v5, v4, v3, v2, (void (*)(void))sub_10001BC14, (uint64_t (*)(uint64_t, uint64_t))sub_1000FC25C);
  sub_10001BC14(v1, v29);
  sub_10001BC14(v7, v6);
  sub_10001BC14(v5, v4);
  sub_100758808(v33, v35, v37, v39, v41, v43, (void (*)(void))sub_10001BC14, (uint64_t (*)(uint64_t, uint64_t))sub_10001BC14);
  sub_1000126B0(v31, type metadata accessor for ObservedAdvertisement);
  v44 = *(_QWORD *)(v0 + 1696);
  v8 = *(_QWORD *)(v0 + 1224);
  v9 = *(_QWORD *)(v0 + 1216);
  v10 = *(_QWORD *)(v0 + 1208);
  v11 = *(_QWORD *)(v0 + 1200);
  v12 = *(_QWORD *)(v0 + 1192);
  v13 = *(_QWORD *)(v0 + 1184);
  v14 = *(_QWORD *)(v0 + 1176);
  v15 = *(_QWORD *)(v0 + 1168);
  v16 = *(_QWORD *)(v0 + 1152);
  v18 = *(_QWORD *)(v0 + 1144);
  v19 = *(_QWORD *)(v0 + 1136);
  v20 = *(_QWORD *)(v0 + 1128);
  v21 = *(_QWORD *)(v0 + 1120);
  v22 = *(_QWORD *)(v0 + 1096);
  v23 = *(_QWORD *)(v0 + 1088);
  v24 = *(_QWORD *)(v0 + 1080);
  v25 = *(_QWORD *)(v0 + 1072);
  v26 = *(_QWORD *)(v0 + 1064);
  v27 = *(_QWORD *)(v0 + 1056);
  v28 = *(_QWORD *)(v0 + 1048);
  v30 = *(_QWORD *)(v0 + 1040);
  v32 = *(_QWORD *)(v0 + 1016);
  v34 = *(_QWORD *)(v0 + 1008);
  v36 = *(_QWORD *)(v0 + 1000);
  v38 = *(_QWORD *)(v0 + 992);
  v40 = *(_QWORD *)(v0 + 968);
  v42 = *(_QWORD *)(v0 + 960);
  sub_1000126B0(v8, type metadata accessor for BeaconIdentifier);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v30);
  swift_task_dealloc(v32);
  swift_task_dealloc(v34);
  swift_task_dealloc(v36);
  swift_task_dealloc(v38);
  swift_task_dealloc(v40);
  swift_task_dealloc(v42);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v44);
}

uint64_t sub_100B43388()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v41 = *(_QWORD *)(v0 + 1368);
  v43 = *(_QWORD *)(v0 + 1376);
  v37 = *(_QWORD *)(v0 + 1352);
  v39 = *(_QWORD *)(v0 + 1360);
  v33 = *(_QWORD *)(v0 + 1336);
  v35 = *(_QWORD *)(v0 + 1344);
  v1 = *(_QWORD *)(v0 + 1320);
  v2 = *(_QWORD *)(v0 + 1312);
  v3 = *(_QWORD *)(v0 + 1304);
  v4 = *(_QWORD *)(v0 + 1296);
  v5 = *(_QWORD *)(v0 + 1288);
  v6 = *(_QWORD *)(v0 + 1280);
  v7 = *(_QWORD *)(v0 + 1272);
  v29 = *(_QWORD *)(v0 + 1328);
  v31 = *(_QWORD *)(v0 + 1152);
  swift_release();
  swift_release();
  swift_release();
  sub_100758808(v7, v6, v5, v4, v3, v2, (void (*)(void))sub_10001BC14, (uint64_t (*)(uint64_t, uint64_t))sub_1000FC25C);
  sub_10001BC14(v1, v29);
  sub_10001BC14(v7, v6);
  sub_10001BC14(v5, v4);
  sub_100758808(v33, v35, v37, v39, v41, v43, (void (*)(void))sub_10001BC14, (uint64_t (*)(uint64_t, uint64_t))sub_10001BC14);
  sub_1000126B0(v31, type metadata accessor for ObservedAdvertisement);
  v8 = *(_QWORD *)(v0 + 1224);
  v9 = *(_QWORD *)(v0 + 1216);
  v10 = *(_QWORD *)(v0 + 1208);
  v11 = *(_QWORD *)(v0 + 1200);
  v12 = *(_QWORD *)(v0 + 1192);
  v13 = *(_QWORD *)(v0 + 1184);
  v14 = *(_QWORD *)(v0 + 1176);
  v15 = *(_QWORD *)(v0 + 1168);
  v16 = *(_QWORD *)(v0 + 1152);
  v18 = *(_QWORD *)(v0 + 1144);
  v19 = *(_QWORD *)(v0 + 1136);
  v20 = *(_QWORD *)(v0 + 1128);
  v21 = *(_QWORD *)(v0 + 1120);
  v22 = *(_QWORD *)(v0 + 1096);
  v23 = *(_QWORD *)(v0 + 1088);
  v24 = *(_QWORD *)(v0 + 1080);
  v25 = *(_QWORD *)(v0 + 1072);
  v26 = *(_QWORD *)(v0 + 1064);
  v27 = *(_QWORD *)(v0 + 1056);
  v28 = *(_QWORD *)(v0 + 1048);
  v30 = *(_QWORD *)(v0 + 1040);
  v32 = *(_QWORD *)(v0 + 1016);
  v34 = *(_QWORD *)(v0 + 1008);
  v36 = *(_QWORD *)(v0 + 1000);
  v38 = *(_QWORD *)(v0 + 992);
  v40 = *(_QWORD *)(v0 + 968);
  v42 = *(_QWORD *)(v0 + 960);
  sub_1000126B0(v8, type metadata accessor for BeaconIdentifier);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v30);
  swift_task_dealloc(v32);
  swift_task_dealloc(v34);
  swift_task_dealloc(v36);
  swift_task_dealloc(v38);
  swift_task_dealloc(v40);
  swift_task_dealloc(v42);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100B43640(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 1704);
  *(_QWORD *)(*v2 + 1712) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = sub_100B4394C;
  }
  else
  {
    *(_QWORD *)(v4 + 1720) = a1;
    v6 = sub_100B436B4;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_100B436B4()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v1 = *(_QWORD *)(v0 + 1328);
  v2 = *(_QWORD *)(v0 + 1320);
  v33 = *(_QWORD *)(v0 + 1304);
  v3 = *(_QWORD *)(v0 + 1296);
  v4 = *(_QWORD *)(v0 + 1288);
  v5 = *(_QWORD *)(v0 + 1280);
  v6 = *(_QWORD *)(v0 + 1272);
  v36 = *(_QWORD *)(v0 + 1312);
  sub_100758808(*(_QWORD *)(v0 + 1336), *(_QWORD *)(v0 + 1344), *(_QWORD *)(v0 + 1352), *(_QWORD *)(v0 + 1360), *(_QWORD *)(v0 + 1368), *(_QWORD *)(v0 + 1376), (void (*)(void))sub_10001BC14, (uint64_t (*)(uint64_t, uint64_t))sub_10001BC14);
  sub_10001BC14(v2, v1);
  sub_10001BC14(v6, v5);
  sub_10001BC14(v4, v3);
  swift_release();
  swift_release();
  sub_100758808(v6, v5, v4, v3, v33, v36, (void (*)(void))sub_10001BC14, (uint64_t (*)(uint64_t, uint64_t))sub_1000FC25C);
  swift_release();
  v37 = *(_QWORD *)(v0 + 1720);
  v7 = *(_QWORD *)(v0 + 1224);
  v8 = *(_QWORD *)(v0 + 1216);
  v9 = *(_QWORD *)(v0 + 1208);
  v10 = *(_QWORD *)(v0 + 1200);
  v11 = *(_QWORD *)(v0 + 1192);
  v12 = *(_QWORD *)(v0 + 1184);
  v13 = *(_QWORD *)(v0 + 1176);
  v14 = *(_QWORD *)(v0 + 1168);
  v15 = *(_QWORD *)(v0 + 1152);
  v17 = *(_QWORD *)(v0 + 1144);
  v18 = *(_QWORD *)(v0 + 1136);
  v19 = *(_QWORD *)(v0 + 1128);
  v20 = *(_QWORD *)(v0 + 1120);
  v21 = *(_QWORD *)(v0 + 1096);
  v22 = *(_QWORD *)(v0 + 1088);
  v23 = *(_QWORD *)(v0 + 1080);
  v24 = *(_QWORD *)(v0 + 1072);
  v25 = *(_QWORD *)(v0 + 1064);
  v26 = *(_QWORD *)(v0 + 1056);
  v27 = *(_QWORD *)(v0 + 1048);
  v28 = *(_QWORD *)(v0 + 1040);
  v29 = *(_QWORD *)(v0 + 1016);
  v30 = *(_QWORD *)(v0 + 1008);
  v31 = *(_QWORD *)(v0 + 1000);
  v32 = *(_QWORD *)(v0 + 992);
  v34 = *(_QWORD *)(v0 + 968);
  v35 = *(_QWORD *)(v0 + 960);
  sub_1000126B0(v7, type metadata accessor for BeaconIdentifier);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v37);
}

uint64_t sub_100B4394C()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v1 = *(_QWORD *)(v0 + 1328);
  v2 = *(_QWORD *)(v0 + 1320);
  v33 = *(_QWORD *)(v0 + 1304);
  v3 = *(_QWORD *)(v0 + 1296);
  v4 = *(_QWORD *)(v0 + 1288);
  v5 = *(_QWORD *)(v0 + 1280);
  v6 = *(_QWORD *)(v0 + 1272);
  v36 = *(_QWORD *)(v0 + 1312);
  sub_100758808(*(_QWORD *)(v0 + 1336), *(_QWORD *)(v0 + 1344), *(_QWORD *)(v0 + 1352), *(_QWORD *)(v0 + 1360), *(_QWORD *)(v0 + 1368), *(_QWORD *)(v0 + 1376), (void (*)(void))sub_10001BC14, (uint64_t (*)(uint64_t, uint64_t))sub_10001BC14);
  sub_10001BC14(v2, v1);
  sub_10001BC14(v6, v5);
  sub_10001BC14(v4, v3);
  swift_release();
  swift_release();
  sub_100758808(v6, v5, v4, v3, v33, v36, (void (*)(void))sub_10001BC14, (uint64_t (*)(uint64_t, uint64_t))sub_1000FC25C);
  swift_release();
  v7 = *(_QWORD *)(v0 + 1224);
  v8 = *(_QWORD *)(v0 + 1216);
  v9 = *(_QWORD *)(v0 + 1208);
  v10 = *(_QWORD *)(v0 + 1200);
  v11 = *(_QWORD *)(v0 + 1192);
  v12 = *(_QWORD *)(v0 + 1184);
  v13 = *(_QWORD *)(v0 + 1176);
  v14 = *(_QWORD *)(v0 + 1168);
  v15 = *(_QWORD *)(v0 + 1152);
  v17 = *(_QWORD *)(v0 + 1144);
  v18 = *(_QWORD *)(v0 + 1136);
  v19 = *(_QWORD *)(v0 + 1128);
  v20 = *(_QWORD *)(v0 + 1120);
  v21 = *(_QWORD *)(v0 + 1096);
  v22 = *(_QWORD *)(v0 + 1088);
  v23 = *(_QWORD *)(v0 + 1080);
  v24 = *(_QWORD *)(v0 + 1072);
  v25 = *(_QWORD *)(v0 + 1064);
  v26 = *(_QWORD *)(v0 + 1056);
  v27 = *(_QWORD *)(v0 + 1048);
  v28 = *(_QWORD *)(v0 + 1040);
  v29 = *(_QWORD *)(v0 + 1016);
  v30 = *(_QWORD *)(v0 + 1008);
  v31 = *(_QWORD *)(v0 + 1000);
  v32 = *(_QWORD *)(v0 + 992);
  v34 = *(_QWORD *)(v0 + 968);
  v35 = *(_QWORD *)(v0 + 960);
  sub_1000126B0(v7, type metadata accessor for BeaconIdentifier);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100B43BE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;

  v4[33] = a3;
  v4[34] = a4;
  v4[31] = a1;
  v4[32] = a2;
  v5 = type metadata accessor for UUID(0);
  v4[35] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[36] = v6;
  v7 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[37] = swift_task_alloc(v7);
  v4[38] = swift_task_alloc(v7);
  v8 = sub_10001A9A8(&qword_1010EF3F8);
  v4[39] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for ObservedAdvertisement.BeaconIndexInformation(0);
  v4[40] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v4[41] = v10;
  v11 = (*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[42] = swift_task_alloc(v11);
  v4[43] = swift_task_alloc(v11);
  v12 = sub_10001A9A8(&qword_1010F0F00);
  v4[44] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v12 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for ObservedAdvertisement(0);
  v4[45] = v13;
  v14 = *(_QWORD *)(v13 - 8);
  v4[46] = v14;
  v15 = (*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[47] = swift_task_alloc(v15);
  v4[48] = swift_task_alloc(v15);
  v16 = type metadata accessor for BeaconIdentifier(0);
  v4[49] = v16;
  v17 = (*(_QWORD *)(*(_QWORD *)(v16 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[50] = swift_task_alloc(v17);
  v4[51] = swift_task_alloc(v17);
  v4[52] = swift_task_alloc(v17);
  v4[53] = swift_task_alloc(v17);
  return swift_task_switch(sub_100B43D58, 0, 0);
}

uint64_t sub_100B43D58()
{
  uint64_t v0;
  uint64_t result;
  _QWORD *v2;
  uint64_t (__cdecl *v3)();

  sub_10005972C(*(_QWORD *)(v0 + 248), *(_QWORD *)(v0 + 424), type metadata accessor for BeaconIdentifier);
  if (qword_1010EA5B0 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v0 + 96, 0, 0);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 56, &qword_1010EE220);
  if (*(_QWORD *)(v0 + 80))
  {
    sub_10000F9FC((__int128 *)(v0 + 56), v0 + 16);
    sub_10001AA44((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
    v3 = (uint64_t (__cdecl *)())((char *)&dword_1010EBC00 + dword_1010EBC00);
    v2 = (_QWORD *)swift_task_alloc(unk_1010EBC04);
    *(_QWORD *)(v0 + 432) = v2;
    *v2 = v0;
    v2[1] = sub_100B43E58;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100B43E58(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 432);
  *(_QWORD *)(*(_QWORD *)v1 + 440) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100B43EB4, 0, 0);
}

uint64_t sub_100B43EB4()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  unint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (__cdecl *v23)();
  uint64_t v24;

  v1 = *(_QWORD *)(v0 + 440);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
  if (v1)
  {
    v23 = (uint64_t (__cdecl *)())((char *)&dword_101121648 + dword_101121648);
    v2 = (_QWORD *)swift_task_alloc(unk_10112164C);
    *(_QWORD *)(v0 + 448) = v2;
    *v2 = v0;
    v2[1] = sub_100B440D8;
    return v23();
  }
  else
  {
    if (qword_1010E9F38 != -1)
      swift_once(&qword_1010E9F38, sub_1007A03F4);
    v4 = type metadata accessor for Logger(0);
    v5 = sub_10001A9E8(v4, (uint64_t)qword_1011B7660);
    v6 = Logger.logObject.getter(v5);
    v7 = static os_log_type_t.error.getter(v6);
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "No ObservationStoreService available!", v8, 2u);
      swift_slowDealloc(v8, -1, -1);
    }

    v9 = sub_100B4AB9C();
    v24 = swift_allocError(&type metadata for ManagedCBPeripheralError, v9, 0, 0);
    *v10 = 1;
    swift_willThrow(v24);
    v12 = *(_QWORD *)(v0 + 416);
    v11 = *(_QWORD *)(v0 + 424);
    v14 = *(_QWORD *)(v0 + 400);
    v13 = *(_QWORD *)(v0 + 408);
    v16 = *(_QWORD *)(v0 + 376);
    v15 = *(_QWORD *)(v0 + 384);
    v18 = *(_QWORD *)(v0 + 344);
    v17 = *(_QWORD *)(v0 + 352);
    v19 = *(_QWORD *)(v0 + 336);
    v20 = *(_QWORD *)(v0 + 312);
    v21 = *(_QWORD *)(v0 + 304);
    v22 = *(_QWORD *)(v0 + 296);
    sub_1000126B0(v11, type metadata accessor for BeaconIdentifier);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100B440D8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 448);
  *(_QWORD *)(*(_QWORD *)v1 + 456) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100B44134, 0, 0);
}

uint64_t sub_100B44134()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  unint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  if (*(_QWORD *)(v0 + 456))
  {
    v1 = (_QWORD *)swift_task_alloc(dword_10111BAF4);
    *(_QWORD *)(v0 + 464) = v1;
    *v1 = v0;
    v1[1] = sub_100B44358;
    return sub_100C654F4(*(_QWORD *)(v0 + 352), *(_QWORD *)(v0 + 424));
  }
  else
  {
    if (qword_1010E9F38 != -1)
      swift_once(&qword_1010E9F38, sub_1007A03F4);
    v3 = type metadata accessor for Logger(0);
    v4 = sub_10001A9E8(v3, (uint64_t)qword_1011B7660);
    v5 = Logger.logObject.getter(v4);
    v6 = static os_log_type_t.error.getter(v5);
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Missing ItemSharingKeyStore!", v7, 2u);
      swift_slowDealloc(v7, -1, -1);
    }

    v8 = sub_100B4AB9C();
    v22 = swift_allocError(&type metadata for ManagedCBPeripheralError, v8, 0, 0);
    *v9 = 1;
    swift_willThrow(v22);
    swift_release();
    v11 = *(_QWORD *)(v0 + 416);
    v10 = *(_QWORD *)(v0 + 424);
    v13 = *(_QWORD *)(v0 + 400);
    v12 = *(_QWORD *)(v0 + 408);
    v15 = *(_QWORD *)(v0 + 376);
    v14 = *(_QWORD *)(v0 + 384);
    v17 = *(_QWORD *)(v0 + 344);
    v16 = *(_QWORD *)(v0 + 352);
    v18 = *(_QWORD *)(v0 + 336);
    v19 = *(_QWORD *)(v0 + 312);
    v20 = *(_QWORD *)(v0 + 304);
    v21 = *(_QWORD *)(v0 + 296);
    sub_1000126B0(v10, type metadata accessor for BeaconIdentifier);
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100B44358()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 464);
  *(_QWORD *)(*(_QWORD *)v1 + 472) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_100B453E8;
  else
    v3 = sub_100B443BC;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_100B443BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  Swift::String v15;
  Swift::String v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  Swift::String v47;
  Swift::String v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t (*v59)(uint64_t, uint64_t, uint64_t);
  uint64_t v60;
  NSObject *v61;
  os_log_type_t v62;
  uint8_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  _BYTE *v70;
  void (*v71)(uint64_t, uint64_t);
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  NSObject *v82;
  os_log_type_t v83;
  uint64_t v84;
  uint8_t *v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  char v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  NSObject *v101;
  os_log_type_t v102;
  BOOL v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  Swift::String v108;
  Swift::String v109;
  uint64_t v110;
  uint64_t v111;
  _QWORD *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  _QWORD *v118;
  _QWORD *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  char v143;
  uint64_t (*v144)(uint64_t, uint64_t, uint64_t);
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;

  v1 = *(_QWORD *)(v0 + 352);
  if ((*(unsigned int (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 368) + 48))(v1, 1, *(_QWORD *)(v0 + 360)) == 1)
  {
    sub_100004048(v1, &qword_1010F0F00);
    if (qword_1010E9F38 != -1)
      swift_once(&qword_1010E9F38, sub_1007A03F4);
    v2 = *(_QWORD *)(v0 + 416);
    v3 = *(_QWORD *)(v0 + 424);
    v4 = type metadata accessor for Logger(0);
    sub_10001A9E8(v4, (uint64_t)qword_1011B7660);
    v5 = sub_10005972C(v3, v2, type metadata accessor for BeaconIdentifier);
    v6 = Logger.logObject.getter(v5);
    v7 = static os_log_type_t.default.getter(v6);
    v8 = os_log_type_enabled(v6, v7);
    v9 = *(_QWORD *)(v0 + 416);
    if (v8)
    {
      v10 = *(_QWORD *)(v0 + 280);
      v11 = swift_slowAlloc(22, -1);
      v12 = swift_slowAlloc(32, -1);
      v147 = v12;
      *(_DWORD *)v11 = 141558275;
      *(_QWORD *)(v0 + 168) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 168, v0 + 176, v11 + 4, v11 + 12);
      *(_WORD *)(v11 + 12) = 2081;
      v13 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v148 = dispatch thunk of CustomStringConvertible.description.getter(v10, v13);
      v149 = v14;
      v15._countAndFlagsBits = 47;
      v15._object = (void *)0xE100000000000000;
      String.append(_:)(v15);
      v16._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v10, v13);
      String.append(_:)(v16);
      swift_bridgeObjectRelease();
      *(_QWORD *)(v0 + 176) = sub_100016940(v148, v149, &v147);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 176, v0 + 184, v11 + 14, v11 + 22);
      swift_bridgeObjectRelease();
      sub_1000126B0(v9, type metadata accessor for BeaconIdentifier);
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "No observed advertisement for beacon %{private,mask.hash}s.", (uint8_t *)v11, 0x16u);
      swift_arrayDestroy(v12, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v12, -1, -1);
      swift_slowDealloc(v11, -1, -1);
    }
    else
    {
      sub_1000126B0(*(_QWORD *)(v0 + 416), type metadata accessor for BeaconIdentifier);
    }

    v29 = (_QWORD *)swift_task_alloc(dword_101115CCC);
    *(_QWORD *)(v0 + 616) = v29;
    *v29 = v0;
    v29[1] = sub_100B46B7C;
    return sub_100B49328(*(_QWORD *)(v0 + 248), *(_QWORD *)(v0 + 256), *(_QWORD *)(v0 + 264), *(_QWORD *)(v0 + 272));
  }
  sub_1000126EC(v1, *(_QWORD *)(v0 + 384), type metadata accessor for ObservedAdvertisement);
  if (qword_1010E9F38 != -1)
    swift_once(&qword_1010E9F38, sub_1007A03F4);
  v17 = *(_QWORD *)(v0 + 376);
  v18 = *(_QWORD *)(v0 + 384);
  v19 = type metadata accessor for Logger(0);
  sub_10001A9E8(v19, (uint64_t)qword_1011B7660);
  v20 = sub_10005972C(v18, v17, type metadata accessor for ObservedAdvertisement);
  v21 = Logger.logObject.getter(v20);
  v22 = static os_log_type_t.default.getter(v21);
  v23 = os_log_type_enabled(v21, v22);
  v24 = *(_QWORD *)(v0 + 376);
  if (v23)
  {
    v25 = swift_slowAlloc(22, -1);
    v26 = swift_slowAlloc(32, -1);
    v148 = v26;
    *(_DWORD *)v25 = 141558275;
    *(_QWORD *)(v0 + 232) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 232, v0 + 240, v25 + 4, v25 + 12);
    *(_WORD *)(v25 + 12) = 2081;
    sub_10016E3E4();
    *(_QWORD *)(v0 + 240) = sub_100016940(v27, v28, &v148);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 240, v0 + 248, v25 + 14, v25 + 22);
    swift_bridgeObjectRelease();
    sub_1000126B0(v24, type metadata accessor for ObservedAdvertisement);
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "Found observed advertisement %{private,mask.hash}s.", (uint8_t *)v25, 0x16u);
    swift_arrayDestroy(v26, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v26, -1, -1);
    swift_slowDealloc(v25, -1, -1);
  }
  else
  {
    sub_1000126B0(v24, type metadata accessor for ObservedAdvertisement);
  }

  v31 = *(_QWORD *)(v0 + 320);
  v32 = *(_QWORD *)(v0 + 328);
  v33 = *(_QWORD *)(v0 + 312);
  sub_10000F9B8(*(_QWORD *)(v0 + 384) + *(int *)(*(_QWORD *)(v0 + 360) + 52), v33, &qword_1010EF3F8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v32 + 48))(v33, 1, v31) == 1)
  {
    v34 = *(_QWORD *)(v0 + 424);
    v35 = *(_QWORD *)(v0 + 408);
    sub_100004048(*(_QWORD *)(v0 + 312), &qword_1010EF3F8);
    v36 = sub_10005972C(v34, v35, type metadata accessor for BeaconIdentifier);
    v37 = Logger.logObject.getter(v36);
    v38 = static os_log_type_t.error.getter(v37);
    v39 = os_log_type_enabled(v37, v38);
    v40 = *(_QWORD *)(v0 + 424);
    v41 = *(_QWORD *)(v0 + 408);
    if (v39)
    {
      v136 = *(_QWORD *)(v0 + 384);
      v42 = *(_QWORD *)(v0 + 280);
      v43 = swift_slowAlloc(22, -1);
      v132 = v40;
      v44 = swift_slowAlloc(32, -1);
      v147 = v44;
      *(_DWORD *)v43 = 141558275;
      *(_QWORD *)(v0 + 184) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 184, v0 + 192, v43 + 4, v43 + 12);
      *(_WORD *)(v43 + 12) = 2081;
      v45 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v148 = dispatch thunk of CustomStringConvertible.description.getter(v42, v45);
      v149 = v46;
      v47._countAndFlagsBits = 47;
      v47._object = (void *)0xE100000000000000;
      String.append(_:)(v47);
      v48._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v42, v45);
      String.append(_:)(v48);
      swift_bridgeObjectRelease();
      *(_QWORD *)(v0 + 192) = sub_100016940(v148, v149, &v147);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 192, v0 + 200, v43 + 14, v43 + 22);
      swift_bridgeObjectRelease();
      sub_1000126B0(v41, type metadata accessor for BeaconIdentifier);
      _os_log_impl((void *)&_mh_execute_header, v37, v38, "Missing beaconIndexInformation for %{private,mask.hash}s!", (uint8_t *)v43, 0x16u);
      swift_arrayDestroy(v44, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v44, -1, -1);
      swift_slowDealloc(v43, -1, -1);
      swift_release();
      swift_release();

      sub_1000126B0(v136, type metadata accessor for ObservedAdvertisement);
      v49 = v132;
    }
    else
    {
      v53 = *(_QWORD *)(v0 + 384);

      swift_release();
      swift_release();
      sub_1000126B0(v41, type metadata accessor for BeaconIdentifier);
      sub_1000126B0(v53, type metadata accessor for ObservedAdvertisement);
      v49 = v40;
    }
LABEL_41:
    sub_1000126B0(v49, type metadata accessor for BeaconIdentifier);
    v121 = *(_QWORD *)(v0 + 416);
    v123 = *(_QWORD *)(v0 + 400);
    v122 = *(_QWORD *)(v0 + 408);
    v125 = *(_QWORD *)(v0 + 376);
    v124 = *(_QWORD *)(v0 + 384);
    v127 = *(_QWORD *)(v0 + 344);
    v126 = *(_QWORD *)(v0 + 352);
    v128 = *(_QWORD *)(v0 + 336);
    v129 = *(_QWORD *)(v0 + 312);
    v141 = *(_QWORD *)(v0 + 304);
    v146 = *(_QWORD *)(v0 + 296);
    swift_task_dealloc(*(_QWORD *)(v0 + 424));
    swift_task_dealloc(v121);
    swift_task_dealloc(v122);
    swift_task_dealloc(v123);
    swift_task_dealloc(v124);
    swift_task_dealloc(v125);
    swift_task_dealloc(v126);
    swift_task_dealloc(v127);
    swift_task_dealloc(v128);
    swift_task_dealloc(v129);
    swift_task_dealloc(v141);
    swift_task_dealloc(v146);
    return (*(uint64_t (**)(_QWORD *))(v0 + 8))(_swiftEmptyArrayStorage);
  }
  v50 = *(_QWORD *)(v0 + 344);
  v51 = *(_QWORD *)(v0 + 320);
  sub_1000126EC(*(_QWORD *)(v0 + 312), v50, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
  if (*(_BYTE *)(v50 + *(int *)(v51 + 20)))
  {
    if (*(_BYTE *)(v50 + *(int *)(v51 + 20)) != 1)
    {
      v81 = sub_10005972C(*(_QWORD *)(v0 + 344), *(_QWORD *)(v0 + 336), type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
      v82 = Logger.logObject.getter(v81);
      v83 = static os_log_type_t.error.getter(v82);
      if (os_log_type_enabled(v82, v83))
      {
        v84 = *(_QWORD *)(v0 + 336);
        v85 = (uint8_t *)swift_slowAlloc(12, -1);
        v86 = swift_slowAlloc(32, -1);
        v148 = v86;
        *(_DWORD *)v85 = 136446210;
        v87 = *(unsigned __int8 *)(v84 + *(int *)(v51 + 20));
        if (*(_BYTE *)(v84 + *(int *)(v51 + 20)))
        {
          v88 = v0 + 200;
          v89 = v0 + 208;
          if (v87 == 1)
          {
            v90 = 0xEA00000000007972;
            v91 = 0x61646E6F6365732ELL;
          }
          else
          {
            v90 = 0x8000000100EC6940;
            v91 = 0xD000000000000010;
          }
        }
        else
        {
          v89 = v0 + 208;
          v90 = 0xE800000000000000;
          v91 = 0x7972616D6972702ELL;
          v88 = v0 + 200;
        }
        v145 = *(_QWORD *)(v0 + 424);
        v120 = *(_QWORD *)(v0 + 336);
        v135 = *(_QWORD *)(v0 + 344);
        v138 = *(_QWORD *)(v0 + 384);
        *(_QWORD *)(v0 + 200) = sub_100016940(v91, v90, &v148);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v88, v89, v85 + 4, v85 + 12);
        swift_bridgeObjectRelease();
        sub_1000126B0(v120, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
        _os_log_impl((void *)&_mh_execute_header, v82, v83, "Invalid key sequence %{public}s", v85, 0xCu);
        swift_arrayDestroy(v86, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v86, -1, -1);
        swift_slowDealloc(v85, -1, -1);
        swift_release();
        swift_release();

        sub_1000126B0(v135, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
        sub_1000126B0(v138, type metadata accessor for ObservedAdvertisement);
        v49 = v145;
      }
      else
      {
        v113 = *(_QWORD *)(v0 + 424);
        v114 = *(_QWORD *)(v0 + 384);
        v116 = *(_QWORD *)(v0 + 336);
        v115 = *(_QWORD *)(v0 + 344);

        swift_release();
        swift_release();
        sub_1000126B0(v116, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
        sub_1000126B0(v115, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
        sub_1000126B0(v114, type metadata accessor for ObservedAdvertisement);
        v49 = v113;
      }
      goto LABEL_41;
    }
    v52 = 1;
  }
  else
  {
    v52 = 0;
  }
  v54 = *(_QWORD *)(v0 + 424);
  v55 = *(_QWORD *)(v0 + 384);
  v56 = *(_QWORD *)(v0 + 392);
  v57 = *(_QWORD *)(v0 + 296);
  v58 = *(_QWORD *)(v0 + 280);
  v59 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 288) + 16);
  v59(*(_QWORD *)(v0 + 304), v54, v58);
  v60 = v59(v57, v54 + *(int *)(v56 + 20), v58);
  if ((*(_BYTE *)(v55 + 35) & 1) != 0)
  {
    if ((v52 & 1) != 0)
    {
      v61 = Logger.logObject.getter(v60);
      v62 = static os_log_type_t.fault.getter(v61);
      if (os_log_type_enabled(v61, v62))
      {
        v63 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v63 = 0;
        _os_log_impl((void *)&_mh_execute_header, v61, v62, "Should be impossible to be in secondary sequence without a hint!", v63, 2u);
        swift_slowDealloc(v63, -1, -1);
      }
      v139 = *(_QWORD *)(v0 + 384);
      v64 = *(_QWORD *)(v0 + 344);
      v66 = *(_QWORD *)(v0 + 296);
      v65 = *(_QWORD *)(v0 + 304);
      v68 = *(_QWORD *)(v0 + 280);
      v67 = *(_QWORD *)(v0 + 288);

      v69 = sub_100B4AB9C();
      v142 = swift_allocError(&type metadata for ManagedCBPeripheralError, v69, 0, 0);
      *v70 = 2;
      swift_willThrow(v142);
      swift_release();
      swift_release();
      v71 = *(void (**)(uint64_t, uint64_t))(v67 + 8);
      v71(v66, v68);
      v71(v65, v68);
      sub_1000126B0(v64, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
      sub_1000126B0(v139, type metadata accessor for ObservedAdvertisement);
      v73 = *(_QWORD *)(v0 + 416);
      v72 = *(_QWORD *)(v0 + 424);
      v75 = *(_QWORD *)(v0 + 400);
      v74 = *(_QWORD *)(v0 + 408);
      v77 = *(_QWORD *)(v0 + 376);
      v76 = *(_QWORD *)(v0 + 384);
      v79 = *(_QWORD *)(v0 + 344);
      v78 = *(_QWORD *)(v0 + 352);
      v80 = *(_QWORD *)(v0 + 336);
      v133 = *(_QWORD *)(v0 + 312);
      v137 = *(_QWORD *)(v0 + 304);
      v140 = *(_QWORD *)(v0 + 296);
      sub_1000126B0(v72, type metadata accessor for BeaconIdentifier);
      swift_task_dealloc(v72);
      swift_task_dealloc(v73);
      swift_task_dealloc(v74);
      swift_task_dealloc(v75);
      swift_task_dealloc(v76);
      swift_task_dealloc(v77);
      swift_task_dealloc(v78);
      swift_task_dealloc(v79);
      swift_task_dealloc(v80);
      swift_task_dealloc(v133);
      swift_task_dealloc(v137);
      swift_task_dealloc(v140);
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
    else
    {
      v111 = *(_QWORD *)(*(_QWORD *)(v0 + 344) + *(int *)(*(_QWORD *)(v0 + 320) + 24));
      *(_QWORD *)(v0 + 512) = v111;
      v144 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_101115CD0 + dword_101115CD0);
      v112 = (_QWORD *)swift_task_alloc(unk_101115CD4);
      *(_QWORD *)(v0 + 520) = v112;
      *v112 = v0;
      v112[1] = sub_100B45F84;
      return v144(*(_QWORD *)(v0 + 304), *(_QWORD *)(v0 + 296), v111);
    }
  }
  else
  {
    v143 = v52;
    v92 = *(_BYTE *)(v55 + 34);
    v93 = *(_QWORD *)(v0 + 424);
    v94 = *(_QWORD *)(v0 + 400);
    v95 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v96 = swift_allocObject(v95, 72, 7);
    *(_OWORD *)(v96 + 16) = xmmword_100E22B00;
    *(_QWORD *)(v96 + 56) = &type metadata for UInt8;
    *(_QWORD *)(v96 + 64) = &protocol witness table for UInt8;
    *(_BYTE *)(v96 + 32) = v92;
    v97 = String.init(format:_:)(1479684133, 0xE400000000000000, v96);
    v99 = v98;
    sub_10005972C(v93, v94, type metadata accessor for BeaconIdentifier);
    swift_bridgeObjectRetain(v99);
    v101 = Logger.logObject.getter(v100);
    v102 = static os_log_type_t.info.getter(v101);
    v103 = os_log_type_enabled(v101, v102);
    v104 = *(_QWORD *)(v0 + 400);
    if (v103)
    {
      v130 = *(_QWORD *)(v0 + 280);
      v134 = v92;
      v105 = swift_slowAlloc(32, -1);
      v131 = swift_slowAlloc(64, -1);
      v147 = v131;
      *(_DWORD *)v105 = 136446723;
      swift_bridgeObjectRetain(v99);
      *(_QWORD *)(v0 + 208) = sub_100016940(v97, v99, &v147);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 208, v0 + 216, v105 + 4, v105 + 12);
      swift_bridgeObjectRelease_n(v99, 3);
      *(_WORD *)(v105 + 12) = 2160;
      *(_QWORD *)(v0 + 216) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 216, v0 + 224, v105 + 14, v105 + 22);
      *(_WORD *)(v105 + 22) = 2081;
      v106 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v148 = dispatch thunk of CustomStringConvertible.description.getter(v130, v106);
      v149 = v107;
      v108._countAndFlagsBits = 47;
      v108._object = (void *)0xE100000000000000;
      String.append(_:)(v108);
      v109._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v130, v106);
      String.append(_:)(v109);
      swift_bridgeObjectRelease();
      *(_QWORD *)(v0 + 224) = sub_100016940(v148, v149, &v147);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 224, v0 + 232, v105 + 24, v105 + 32);
      swift_bridgeObjectRelease();
      sub_1000126B0(v104, type metadata accessor for BeaconIdentifier);
      _os_log_impl((void *)&_mh_execute_header, v101, v102, "Hint %{public}s is available for %{private,mask.hash}s", (uint8_t *)v105, 0x20u);
      swift_arrayDestroy(v131, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v131, -1, -1);
      v110 = v105;
      v92 = v134;
      swift_slowDealloc(v110, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n(v99, 2);
      sub_1000126B0(v104, type metadata accessor for BeaconIdentifier);
    }

    v117 = *(_QWORD *)(*(_QWORD *)(v0 + 344) + *(int *)(*(_QWORD *)(v0 + 320) + 24));
    if ((v143 & 1) != 0)
    {
      v118 = (_QWORD *)swift_task_alloc(dword_1010FCEB4);
      *(_QWORD *)(v0 + 496) = v118;
      *v118 = v0;
      v118[1] = sub_100B45550;
      return sub_100476B3C(*(_QWORD *)(v0 + 304), *(_QWORD *)(v0 + 296), v117, v92);
    }
    else
    {
      v119 = (_QWORD *)swift_task_alloc(dword_1010FCEAC);
      *(_QWORD *)(v0 + 480) = v119;
      *v119 = v0;
      v119[1] = sub_100B454E4;
      return sub_100476650(*(_QWORD *)(v0 + 304), *(_QWORD *)(v0 + 296), v117, v92);
    }
  }
}

uint64_t sub_100B453E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  swift_release();
  swift_release();
  v2 = *(_QWORD *)(v0 + 416);
  v1 = *(_QWORD *)(v0 + 424);
  v4 = *(_QWORD *)(v0 + 400);
  v3 = *(_QWORD *)(v0 + 408);
  v6 = *(_QWORD *)(v0 + 376);
  v5 = *(_QWORD *)(v0 + 384);
  v8 = *(_QWORD *)(v0 + 344);
  v7 = *(_QWORD *)(v0 + 352);
  v9 = *(_QWORD *)(v0 + 336);
  v11 = *(_QWORD *)(v0 + 312);
  v12 = *(_QWORD *)(v0 + 304);
  v13 = *(_QWORD *)(v0 + 296);
  sub_1000126B0(v1, type metadata accessor for BeaconIdentifier);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100B454E4(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;

  v3 = (_QWORD *)*v2;
  v3[15] = v2;
  v3[16] = a1;
  v3[17] = v1;
  v4 = v3[60];
  v3[61] = v1;
  swift_task_dealloc(v4);
  if (v1)
    v5 = sub_100B45958;
  else
    v5 = sub_100B455BC;
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_100B45550(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;

  v3 = (_QWORD *)*v2;
  v3[18] = v2;
  v3[19] = a1;
  v3[20] = v1;
  v4 = v3[62];
  v3[63] = v1;
  swift_task_dealloc(v4);
  if (v1)
    v5 = sub_100B45E3C;
  else
    v5 = sub_100B45AA0;
  return swift_task_switch(v5, 0, 0);
}

void sub_100B455BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t i;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;

  v42 = *(_QWORD *)(v0 + 128);
  v1 = *(_QWORD *)(v0 + 384);
  v3 = *(_QWORD *)(v1 + 16);
  v2 = *(_QWORD *)(v1 + 24);
  if ((v2 & 0x2000000000000000) != 0)
  {
    v4 = v2 & 0xDFFFFFFFFFFFFFFFLL;
    sub_10001BBBC(*(_QWORD *)(v1 + 16), v2 & 0xDFFFFFFFFFFFFFFFLL);
  }
  else
  {
    sub_10001BBBC(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
    sub_1002F7C0C(6, v3, v2);
    v3 = v44;
    v4 = v45;
  }
  v5 = 0;
  v6 = *(_QWORD *)(v42 + 64);
  v38 = v42 + 64;
  v7 = -1;
  v8 = -1 << *(_BYTE *)(v42 + 32);
  if (-v8 < 64)
    v7 = ~(-1 << -(char)v8);
  v9 = v7 & v6;
  v40 = (unint64_t)(63 - v8) >> 6;
  v10 = _swiftEmptyArrayStorage;
  if ((v7 & v6) == 0)
    goto LABEL_8;
LABEL_7:
  v11 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  for (i = v11 | (v5 << 6); ; i = __clz(__rbit64(v14)) + (v5 << 6))
  {
    v16 = *(_QWORD *)(*(_QWORD *)(v42 + 48) + 8 * i);
    v17 = (uint64_t *)(*(_QWORD *)(v42 + 56) + 16 * i);
    v18 = *v17;
    v19 = v17[1];
    sub_10001BBBC(*v17, v19);
    sub_10001BBBC(v3, v4);
    if ((swift_isUniquelyReferenced_nonNull_native(v10) & 1) == 0)
      v10 = sub_1007C8FFC(0, v10[2] + 1, 1, v10);
    v21 = v10[2];
    v20 = v10[3];
    if (v21 >= v20 >> 1)
      v10 = sub_1007C8FFC((_QWORD *)(v20 > 1), v21 + 1, 1, v10);
    v10[2] = v21 + 1;
    v22 = &v10[6 * v21];
    *((_BYTE *)v22 + 32) = 0;
    v22[5] = v16;
    v22[6] = v3;
    v22[7] = v4;
    v22[8] = v18;
    v22[9] = v19;
    if (v9)
      goto LABEL_7;
LABEL_8:
    v13 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v13 >= v40)
      goto LABEL_30;
    v14 = *(_QWORD *)(v38 + 8 * v13);
    ++v5;
    if (!v14)
    {
      v5 = v13 + 1;
      if (v13 + 1 >= v40)
        goto LABEL_30;
      v14 = *(_QWORD *)(v38 + 8 * v5);
      if (!v14)
      {
        v5 = v13 + 2;
        if (v13 + 2 >= v40)
          goto LABEL_30;
        v14 = *(_QWORD *)(v38 + 8 * v5);
        if (!v14)
        {
          v5 = v13 + 3;
          if (v13 + 3 >= v40)
            goto LABEL_30;
          v14 = *(_QWORD *)(v38 + 8 * v5);
          if (!v14)
            break;
        }
      }
    }
LABEL_23:
    v9 = (v14 - 1) & v14;
  }
  v15 = v13 + 4;
  if (v15 >= v40)
  {
LABEL_30:
    sub_10001BC14(v3, v4);
    swift_release();
    swift_release();
    swift_release();
    v23 = *(_QWORD *)(v37 + 424);
    v24 = *(_QWORD *)(v37 + 384);
    v25 = *(_QWORD *)(v37 + 344);
    v26 = *(_QWORD *)(v37 + 304);
    v27 = *(_QWORD *)(v37 + 280);
    v28 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v37 + 288) + 8);
    v28(*(_QWORD *)(v37 + 296), v27);
    v28(v26, v27);
    sub_1000126B0(v25, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
    sub_1000126B0(v24, type metadata accessor for ObservedAdvertisement);
    sub_1000126B0(v23, type metadata accessor for BeaconIdentifier);
    v29 = *(_QWORD *)(v37 + 416);
    v31 = *(_QWORD *)(v37 + 400);
    v30 = *(_QWORD *)(v37 + 408);
    v33 = *(_QWORD *)(v37 + 376);
    v32 = *(_QWORD *)(v37 + 384);
    v35 = *(_QWORD *)(v37 + 344);
    v34 = *(_QWORD *)(v37 + 352);
    v36 = *(_QWORD *)(v37 + 336);
    v39 = *(_QWORD *)(v37 + 312);
    v41 = *(_QWORD *)(v37 + 304);
    v43 = *(_QWORD *)(v37 + 296);
    swift_task_dealloc(*(_QWORD *)(v37 + 424));
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    swift_task_dealloc(v36);
    swift_task_dealloc(v39);
    swift_task_dealloc(v41);
    swift_task_dealloc(v43);
    (*(void (**)(_QWORD *))(v37 + 8))(v10);
    return;
  }
  v14 = *(_QWORD *)(v38 + 8 * v15);
  if (v14)
  {
    v5 = v15;
    goto LABEL_23;
  }
  while (1)
  {
    v5 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v5 >= v40)
      goto LABEL_30;
    v14 = *(_QWORD *)(v38 + 8 * v5);
    ++v15;
    if (v14)
      goto LABEL_23;
  }
LABEL_32:
  __break(1u);
}

uint64_t sub_100B45958()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v1 = *(_QWORD *)(v0 + 384);
  v2 = *(_QWORD *)(v0 + 344);
  v4 = *(_QWORD *)(v0 + 296);
  v3 = *(_QWORD *)(v0 + 304);
  v5 = *(_QWORD *)(v0 + 280);
  v6 = *(_QWORD *)(v0 + 288);
  swift_release();
  swift_release();
  v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v7(v4, v5);
  v7(v3, v5);
  sub_1000126B0(v2, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
  sub_1000126B0(v1, type metadata accessor for ObservedAdvertisement);
  v9 = *(_QWORD *)(v0 + 416);
  v8 = *(_QWORD *)(v0 + 424);
  v11 = *(_QWORD *)(v0 + 400);
  v10 = *(_QWORD *)(v0 + 408);
  v13 = *(_QWORD *)(v0 + 376);
  v12 = *(_QWORD *)(v0 + 384);
  v15 = *(_QWORD *)(v0 + 344);
  v14 = *(_QWORD *)(v0 + 352);
  v16 = *(_QWORD *)(v0 + 336);
  v18 = *(_QWORD *)(v0 + 312);
  v19 = *(_QWORD *)(v0 + 304);
  v20 = *(_QWORD *)(v0 + 296);
  sub_1000126B0(v8, type metadata accessor for BeaconIdentifier);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_100B45AA0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t i;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;

  v42 = *(_QWORD *)(v0 + 152);
  v1 = *(_QWORD *)(v0 + 384);
  v3 = *(_QWORD *)(v1 + 16);
  v2 = *(_QWORD *)(v1 + 24);
  if ((v2 & 0x2000000000000000) != 0)
  {
    v4 = v2 & 0xDFFFFFFFFFFFFFFFLL;
    sub_10001BBBC(*(_QWORD *)(v1 + 16), v2 & 0xDFFFFFFFFFFFFFFFLL);
  }
  else
  {
    sub_10001BBBC(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
    sub_1002F7C0C(6, v3, v2);
    v3 = v44;
    v4 = v45;
  }
  v5 = 0;
  v6 = *(_QWORD *)(v42 + 64);
  v38 = v42 + 64;
  v7 = -1;
  v8 = -1 << *(_BYTE *)(v42 + 32);
  if (-v8 < 64)
    v7 = ~(-1 << -(char)v8);
  v9 = v7 & v6;
  v40 = (unint64_t)(63 - v8) >> 6;
  v10 = _swiftEmptyArrayStorage;
  if ((v7 & v6) == 0)
    goto LABEL_8;
LABEL_7:
  v11 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  for (i = v11 | (v5 << 6); ; i = __clz(__rbit64(v14)) + (v5 << 6))
  {
    v16 = *(_QWORD *)(*(_QWORD *)(v42 + 48) + 8 * i);
    v17 = (uint64_t *)(*(_QWORD *)(v42 + 56) + 16 * i);
    v18 = *v17;
    v19 = v17[1];
    sub_10001BBBC(*v17, v19);
    sub_10001BBBC(v3, v4);
    if ((swift_isUniquelyReferenced_nonNull_native(v10) & 1) == 0)
      v10 = sub_1007C8FFC(0, v10[2] + 1, 1, v10);
    v21 = v10[2];
    v20 = v10[3];
    if (v21 >= v20 >> 1)
      v10 = sub_1007C8FFC((_QWORD *)(v20 > 1), v21 + 1, 1, v10);
    v10[2] = v21 + 1;
    v22 = &v10[6 * v21];
    *((_BYTE *)v22 + 32) = 0;
    v22[5] = v16;
    v22[6] = v3;
    v22[7] = v4;
    v22[8] = v18;
    v22[9] = v19;
    if (v9)
      goto LABEL_7;
LABEL_8:
    v13 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v13 >= v40)
      goto LABEL_30;
    v14 = *(_QWORD *)(v38 + 8 * v13);
    ++v5;
    if (!v14)
    {
      v5 = v13 + 1;
      if (v13 + 1 >= v40)
        goto LABEL_30;
      v14 = *(_QWORD *)(v38 + 8 * v5);
      if (!v14)
      {
        v5 = v13 + 2;
        if (v13 + 2 >= v40)
          goto LABEL_30;
        v14 = *(_QWORD *)(v38 + 8 * v5);
        if (!v14)
        {
          v5 = v13 + 3;
          if (v13 + 3 >= v40)
            goto LABEL_30;
          v14 = *(_QWORD *)(v38 + 8 * v5);
          if (!v14)
            break;
        }
      }
    }
LABEL_23:
    v9 = (v14 - 1) & v14;
  }
  v15 = v13 + 4;
  if (v15 >= v40)
  {
LABEL_30:
    sub_10001BC14(v3, v4);
    swift_release();
    swift_release();
    swift_release();
    v23 = *(_QWORD *)(v37 + 424);
    v24 = *(_QWORD *)(v37 + 384);
    v25 = *(_QWORD *)(v37 + 344);
    v26 = *(_QWORD *)(v37 + 304);
    v27 = *(_QWORD *)(v37 + 280);
    v28 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v37 + 288) + 8);
    v28(*(_QWORD *)(v37 + 296), v27);
    v28(v26, v27);
    sub_1000126B0(v25, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
    sub_1000126B0(v24, type metadata accessor for ObservedAdvertisement);
    sub_1000126B0(v23, type metadata accessor for BeaconIdentifier);
    v29 = *(_QWORD *)(v37 + 416);
    v31 = *(_QWORD *)(v37 + 400);
    v30 = *(_QWORD *)(v37 + 408);
    v33 = *(_QWORD *)(v37 + 376);
    v32 = *(_QWORD *)(v37 + 384);
    v35 = *(_QWORD *)(v37 + 344);
    v34 = *(_QWORD *)(v37 + 352);
    v36 = *(_QWORD *)(v37 + 336);
    v39 = *(_QWORD *)(v37 + 312);
    v41 = *(_QWORD *)(v37 + 304);
    v43 = *(_QWORD *)(v37 + 296);
    swift_task_dealloc(*(_QWORD *)(v37 + 424));
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    swift_task_dealloc(v36);
    swift_task_dealloc(v39);
    swift_task_dealloc(v41);
    swift_task_dealloc(v43);
    (*(void (**)(_QWORD *))(v37 + 8))(v10);
    return;
  }
  v14 = *(_QWORD *)(v38 + 8 * v15);
  if (v14)
  {
    v5 = v15;
    goto LABEL_23;
  }
  while (1)
  {
    v5 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v5 >= v40)
      goto LABEL_30;
    v14 = *(_QWORD *)(v38 + 8 * v5);
    ++v15;
    if (v14)
      goto LABEL_23;
  }
LABEL_32:
  __break(1u);
}

uint64_t sub_100B45E3C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v1 = *(_QWORD *)(v0 + 384);
  v2 = *(_QWORD *)(v0 + 344);
  v4 = *(_QWORD *)(v0 + 296);
  v3 = *(_QWORD *)(v0 + 304);
  v5 = *(_QWORD *)(v0 + 280);
  v6 = *(_QWORD *)(v0 + 288);
  swift_release();
  swift_release();
  v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v7(v4, v5);
  v7(v3, v5);
  sub_1000126B0(v2, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
  sub_1000126B0(v1, type metadata accessor for ObservedAdvertisement);
  v9 = *(_QWORD *)(v0 + 416);
  v8 = *(_QWORD *)(v0 + 424);
  v11 = *(_QWORD *)(v0 + 400);
  v10 = *(_QWORD *)(v0 + 408);
  v13 = *(_QWORD *)(v0 + 376);
  v12 = *(_QWORD *)(v0 + 384);
  v15 = *(_QWORD *)(v0 + 344);
  v14 = *(_QWORD *)(v0 + 352);
  v16 = *(_QWORD *)(v0 + 336);
  v18 = *(_QWORD *)(v0 + 312);
  v19 = *(_QWORD *)(v0 + 304);
  v20 = *(_QWORD *)(v0 + 296);
  sub_1000126B0(v8, type metadata accessor for BeaconIdentifier);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100B45F84(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *(_QWORD **)v3;
  v5 = *(_QWORD *)(*(_QWORD *)v3 + 520);
  v4[66] = a1;
  v4[67] = a2;
  v4[68] = v2;
  swift_task_dealloc(v5);
  if (v2)
    v6 = sub_100B461C8;
  else
    v6 = sub_100B45FF8;
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_100B45FF8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(uint64_t, uint64_t, uint64_t);

  if (*(_QWORD *)(v0 + 536) >> 60 == 15)
  {
    swift_release();
    swift_release();
    v1 = *(_QWORD *)(v0 + 424);
    v2 = *(_QWORD *)(v0 + 384);
    v3 = *(_QWORD *)(v0 + 344);
    v4 = *(_QWORD *)(v0 + 304);
    v5 = *(_QWORD *)(v0 + 280);
    v6 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 288) + 8);
    v6(*(_QWORD *)(v0 + 296), v5);
    v6(v4, v5);
    sub_1000126B0(v3, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
    sub_1000126B0(v2, type metadata accessor for ObservedAdvertisement);
    sub_1000126B0(v1, type metadata accessor for BeaconIdentifier);
    v7 = *(_QWORD *)(v0 + 416);
    v9 = *(_QWORD *)(v0 + 400);
    v8 = *(_QWORD *)(v0 + 408);
    v11 = *(_QWORD *)(v0 + 376);
    v10 = *(_QWORD *)(v0 + 384);
    v13 = *(_QWORD *)(v0 + 344);
    v12 = *(_QWORD *)(v0 + 352);
    v14 = *(_QWORD *)(v0 + 336);
    v15 = *(_QWORD *)(v0 + 312);
    v20 = *(_QWORD *)(v0 + 304);
    v21 = *(_QWORD *)(v0 + 296);
    swift_task_dealloc(*(_QWORD *)(v0 + 424));
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    return (*(uint64_t (**)(_QWORD *))(v0 + 8))(_swiftEmptyArrayStorage);
  }
  else
  {
    v17 = *(_QWORD *)(v0 + 512);
    if (v17)
      v18 = v17 / 0x60 + 1;
    else
      v18 = 0;
    v22 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_101115CD8 + dword_101115CD8);
    v19 = (_QWORD *)swift_task_alloc(unk_101115CDC);
    *(_QWORD *)(v0 + 552) = v19;
    *v19 = v0;
    v19[1] = sub_100B46310;
    return v22(*(_QWORD *)(v0 + 304), *(_QWORD *)(v0 + 296), v18);
  }
}

uint64_t sub_100B461C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v1 = *(_QWORD *)(v0 + 384);
  v2 = *(_QWORD *)(v0 + 344);
  v4 = *(_QWORD *)(v0 + 296);
  v3 = *(_QWORD *)(v0 + 304);
  v5 = *(_QWORD *)(v0 + 280);
  v6 = *(_QWORD *)(v0 + 288);
  swift_release();
  swift_release();
  v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v7(v4, v5);
  v7(v3, v5);
  sub_1000126B0(v2, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
  sub_1000126B0(v1, type metadata accessor for ObservedAdvertisement);
  v9 = *(_QWORD *)(v0 + 416);
  v8 = *(_QWORD *)(v0 + 424);
  v11 = *(_QWORD *)(v0 + 400);
  v10 = *(_QWORD *)(v0 + 408);
  v13 = *(_QWORD *)(v0 + 376);
  v12 = *(_QWORD *)(v0 + 384);
  v15 = *(_QWORD *)(v0 + 344);
  v14 = *(_QWORD *)(v0 + 352);
  v16 = *(_QWORD *)(v0 + 336);
  v18 = *(_QWORD *)(v0 + 312);
  v19 = *(_QWORD *)(v0 + 304);
  v20 = *(_QWORD *)(v0 + 296);
  sub_1000126B0(v8, type metadata accessor for BeaconIdentifier);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100B46310(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *(_QWORD **)v3;
  v5 = *(_QWORD *)(*(_QWORD *)v3 + 552);
  v4[70] = a1;
  v4[71] = a2;
  v4[72] = v2;
  swift_task_dealloc(v5);
  if (v2)
    v6 = sub_100B46538;
  else
    v6 = sub_100B46384;
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_100B46384()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;

  if (*(_QWORD *)(v0 + 568) >> 60 == 15)
  {
    v1 = *(_QWORD *)(v0 + 536);
    v2 = *(_QWORD *)(v0 + 528);
    swift_release();
    swift_release();
    sub_10001EF3C(v2, v1);
    v3 = *(_QWORD *)(v0 + 424);
    v4 = *(_QWORD *)(v0 + 384);
    v5 = *(_QWORD *)(v0 + 344);
    v6 = *(_QWORD *)(v0 + 304);
    v7 = *(_QWORD *)(v0 + 280);
    v8 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 288) + 8);
    v8(*(_QWORD *)(v0 + 296), v7);
    v8(v6, v7);
    sub_1000126B0(v5, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
    sub_1000126B0(v4, type metadata accessor for ObservedAdvertisement);
    sub_1000126B0(v3, type metadata accessor for BeaconIdentifier);
    v9 = *(_QWORD *)(v0 + 416);
    v11 = *(_QWORD *)(v0 + 400);
    v10 = *(_QWORD *)(v0 + 408);
    v13 = *(_QWORD *)(v0 + 376);
    v12 = *(_QWORD *)(v0 + 384);
    v15 = *(_QWORD *)(v0 + 344);
    v14 = *(_QWORD *)(v0 + 352);
    v16 = *(_QWORD *)(v0 + 336);
    v17 = *(_QWORD *)(v0 + 312);
    v20 = *(_QWORD *)(v0 + 304);
    v21 = *(_QWORD *)(v0 + 296);
    swift_task_dealloc(*(_QWORD *)(v0 + 424));
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    return (*(uint64_t (**)(_QWORD *))(v0 + 8))(_swiftEmptyArrayStorage);
  }
  else
  {
    v19 = (_QWORD *)swift_task_alloc(dword_1010FCECC);
    *(_QWORD *)(v0 + 584) = v19;
    *v19 = v0;
    v19[1] = sub_100B46694;
    return sub_100477D48(*(_QWORD *)(v0 + 304), *(_QWORD *)(v0 + 296), *(_QWORD *)(v0 + 512));
  }
}

uint64_t sub_100B46538()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v1 = *(_QWORD *)(v0 + 536);
  v2 = *(_QWORD *)(v0 + 528);
  v3 = *(_QWORD *)(v0 + 384);
  v4 = *(_QWORD *)(v0 + 344);
  v6 = *(_QWORD *)(v0 + 296);
  v5 = *(_QWORD *)(v0 + 304);
  v7 = *(_QWORD *)(v0 + 280);
  v8 = *(_QWORD *)(v0 + 288);
  swift_release();
  swift_release();
  sub_10001EF3C(v2, v1);
  v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v9(v6, v7);
  v9(v5, v7);
  sub_1000126B0(v4, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
  sub_1000126B0(v3, type metadata accessor for ObservedAdvertisement);
  v11 = *(_QWORD *)(v0 + 416);
  v10 = *(_QWORD *)(v0 + 424);
  v13 = *(_QWORD *)(v0 + 400);
  v12 = *(_QWORD *)(v0 + 408);
  v15 = *(_QWORD *)(v0 + 376);
  v14 = *(_QWORD *)(v0 + 384);
  v17 = *(_QWORD *)(v0 + 344);
  v16 = *(_QWORD *)(v0 + 352);
  v18 = *(_QWORD *)(v0 + 336);
  v20 = *(_QWORD *)(v0 + 312);
  v21 = *(_QWORD *)(v0 + 304);
  v22 = *(_QWORD *)(v0 + 296);
  sub_1000126B0(v10, type metadata accessor for BeaconIdentifier);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100B46694(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *(_QWORD **)v3;
  v5 = *(_QWORD *)(*(_QWORD *)v3 + 584);
  v4[74] = a1;
  v4[75] = a2;
  v4[76] = v2;
  swift_task_dealloc(v5);
  if (v2)
    v6 = sub_100B46A08;
  else
    v6 = sub_100B46708;
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_100B46708()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  __int128 v12;
  __int128 v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  _QWORD *v46;

  v1 = *(_QWORD *)(v0 + 600);
  if (v1 >> 60 == 15)
  {
    v2 = *(_QWORD *)(v0 + 568);
    v3 = *(_QWORD *)(v0 + 560);
    v4 = *(_QWORD *)(v0 + 536);
    v5 = *(_QWORD *)(v0 + 528);
    swift_release();
    swift_release();
    sub_10001EF3C(v3, v2);
    sub_10001EF3C(v5, v4);
    v46 = _swiftEmptyArrayStorage;
  }
  else
  {
    v6 = *(_QWORD *)(v0 + 592);
    sub_10001BD08(*(_QWORD *)(v0 + 528), *(_QWORD *)(v0 + 536));
    sub_10001BD08(v6, v1);
    v7 = sub_1007C8FFC(0, 1, 1, _swiftEmptyArrayStorage);
    v9 = v7[2];
    v8 = v7[3];
    if (v9 >= v8 >> 1)
      v7 = sub_1007C8FFC((_QWORD *)(v8 > 1), v9 + 1, 1, v7);
    v10 = *(_QWORD *)(v0 + 512);
    v11 = &v7[6 * v9];
    v12 = *(_OWORD *)(v0 + 528);
    v13 = *(_OWORD *)(v0 + 592);
    v7[2] = v9 + 1;
    *((_BYTE *)v11 + 32) = 0;
    v11[5] = v10;
    *((_OWORD *)v11 + 3) = v12;
    *((_OWORD *)v11 + 4) = v13;
    v14 = v7;
    if (v10)
      v44 = *(_QWORD *)(v0 + 512) / 0x60uLL + 1;
    else
      v44 = 0;
    v15 = *(_QWORD *)(v0 + 568);
    v16 = *(_QWORD *)(v0 + 560);
    sub_10001BD08(*(_QWORD *)(v0 + 592), *(_QWORD *)(v0 + 600));
    sub_10001BD08(v16, v15);
    v17 = v14;
    v19 = v14[2];
    v18 = v14[3];
    if (v19 >= v18 >> 1)
      v17 = sub_1007C8FFC((_QWORD *)(v18 > 1), v19 + 1, 1, v14);
    v46 = v17;
    v20 = *(_QWORD *)(v0 + 600);
    v21 = *(_QWORD *)(v0 + 592);
    v22 = *(_QWORD *)(v0 + 568);
    v23 = *(_QWORD *)(v0 + 560);
    v24 = *(_QWORD *)(v0 + 536);
    v25 = *(_QWORD *)(v0 + 528);
    v17[2] = v19 + 1;
    v26 = &v17[6 * v19];
    *((_BYTE *)v26 + 32) = 1;
    v26[5] = v44;
    v26[6] = v23;
    v26[7] = v22;
    v26[8] = v21;
    v26[9] = v20;
    swift_release();
    swift_release();
    sub_10001EF3C(v23, v22);
    sub_10001EF3C(v21, v20);
    sub_10001EF3C(v25, v24);
  }
  v27 = *(_QWORD *)(v0 + 424);
  v28 = *(_QWORD *)(v0 + 384);
  v29 = *(_QWORD *)(v0 + 344);
  v30 = *(_QWORD *)(v0 + 304);
  v31 = *(_QWORD *)(v0 + 280);
  v32 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 288) + 8);
  v32(*(_QWORD *)(v0 + 296), v31);
  v32(v30, v31);
  sub_1000126B0(v29, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
  sub_1000126B0(v28, type metadata accessor for ObservedAdvertisement);
  sub_1000126B0(v27, type metadata accessor for BeaconIdentifier);
  v33 = *(_QWORD *)(v0 + 416);
  v35 = *(_QWORD *)(v0 + 400);
  v34 = *(_QWORD *)(v0 + 408);
  v37 = *(_QWORD *)(v0 + 376);
  v36 = *(_QWORD *)(v0 + 384);
  v39 = *(_QWORD *)(v0 + 344);
  v38 = *(_QWORD *)(v0 + 352);
  v40 = *(_QWORD *)(v0 + 336);
  v41 = *(_QWORD *)(v0 + 312);
  v43 = *(_QWORD *)(v0 + 304);
  v45 = *(_QWORD *)(v0 + 296);
  swift_task_dealloc(*(_QWORD *)(v0 + 424));
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  swift_task_dealloc(v40);
  swift_task_dealloc(v41);
  swift_task_dealloc(v43);
  swift_task_dealloc(v45);
  return (*(uint64_t (**)(_QWORD *))(v0 + 8))(v46);
}

uint64_t sub_100B46A08()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v1 = *(_QWORD *)(v0 + 568);
  v2 = *(_QWORD *)(v0 + 560);
  v3 = *(_QWORD *)(v0 + 536);
  v4 = *(_QWORD *)(v0 + 528);
  v22 = *(_QWORD *)(v0 + 344);
  v24 = *(_QWORD *)(v0 + 384);
  v6 = *(_QWORD *)(v0 + 296);
  v5 = *(_QWORD *)(v0 + 304);
  v7 = *(_QWORD *)(v0 + 280);
  v8 = *(_QWORD *)(v0 + 288);
  swift_release();
  swift_release();
  sub_10001EF3C(v2, v1);
  sub_10001EF3C(v4, v3);
  v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v9(v6, v7);
  v9(v5, v7);
  sub_1000126B0(v22, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
  sub_1000126B0(v24, type metadata accessor for ObservedAdvertisement);
  v11 = *(_QWORD *)(v0 + 416);
  v10 = *(_QWORD *)(v0 + 424);
  v13 = *(_QWORD *)(v0 + 400);
  v12 = *(_QWORD *)(v0 + 408);
  v15 = *(_QWORD *)(v0 + 376);
  v14 = *(_QWORD *)(v0 + 384);
  v17 = *(_QWORD *)(v0 + 344);
  v16 = *(_QWORD *)(v0 + 352);
  v18 = *(_QWORD *)(v0 + 336);
  v20 = *(_QWORD *)(v0 + 312);
  v21 = *(_QWORD *)(v0 + 304);
  v23 = *(_QWORD *)(v0 + 296);
  sub_1000126B0(v10, type metadata accessor for BeaconIdentifier);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v23);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100B46B7C(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 616);
  *(_QWORD *)(*v2 + 624) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = sub_100B46CEC;
  }
  else
  {
    *(_QWORD *)(v4 + 632) = a1;
    v6 = sub_100B46BF0;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_100B46BF0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v1 = *(_QWORD *)(v0 + 424);
  swift_release();
  swift_release();
  sub_1000126B0(v1, type metadata accessor for BeaconIdentifier);
  v2 = *(_QWORD *)(v0 + 416);
  v4 = *(_QWORD *)(v0 + 400);
  v3 = *(_QWORD *)(v0 + 408);
  v6 = *(_QWORD *)(v0 + 376);
  v5 = *(_QWORD *)(v0 + 384);
  v8 = *(_QWORD *)(v0 + 344);
  v7 = *(_QWORD *)(v0 + 352);
  v9 = *(_QWORD *)(v0 + 336);
  v10 = *(_QWORD *)(v0 + 312);
  v12 = *(_QWORD *)(v0 + 304);
  v13 = *(_QWORD *)(v0 + 296);
  v14 = *(_QWORD *)(v0 + 632);
  swift_task_dealloc(*(_QWORD *)(v0 + 424));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v14);
}

uint64_t sub_100B46CEC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  swift_release();
  swift_release();
  v2 = *(_QWORD *)(v0 + 416);
  v1 = *(_QWORD *)(v0 + 424);
  v4 = *(_QWORD *)(v0 + 400);
  v3 = *(_QWORD *)(v0 + 408);
  v6 = *(_QWORD *)(v0 + 376);
  v5 = *(_QWORD *)(v0 + 384);
  v8 = *(_QWORD *)(v0 + 344);
  v7 = *(_QWORD *)(v0 + 352);
  v9 = *(_QWORD *)(v0 + 336);
  v11 = *(_QWORD *)(v0 + 312);
  v12 = *(_QWORD *)(v0 + 304);
  v13 = *(_QWORD *)(v0 + 296);
  sub_1000126B0(v1, type metadata accessor for BeaconIdentifier);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100B46DE8(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;

  *(_QWORD *)(v6 + 576) = a6;
  *(_QWORD *)(v6 + 568) = a5;
  *(_QWORD *)(v6 + 560) = a4;
  *(_QWORD *)(v6 + 552) = a3;
  *(_QWORD *)(v6 + 544) = a1;
  sub_100005CF0(a3, v6 + 160, &qword_1010F5520);
  v8 = *(_OWORD *)(v6 + 176);
  *(_OWORD *)(v6 + 584) = *(_OWORD *)(v6 + 160);
  *(_OWORD *)(v6 + 600) = v8;
  v9 = *a2;
  v10 = a2[1];
  *(_OWORD *)(v6 + 616) = *(_OWORD *)(v6 + 192);
  *(_OWORD *)(v6 + 632) = v9;
  v11 = a2[2];
  *(_OWORD *)(v6 + 648) = v10;
  *(_OWORD *)(v6 + 664) = v11;
  v12 = type metadata accessor for UUID(0);
  *(_QWORD *)(v6 + 680) = v12;
  v13 = *(_QWORD *)(v12 - 8);
  *(_QWORD *)(v6 + 688) = v13;
  *(_QWORD *)(v6 + 696) = swift_task_alloc((*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_10001A9A8(&qword_1010F5E90);
  *(_QWORD *)(v6 + 704) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v14 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for Date(0);
  *(_QWORD *)(v6 + 712) = v15;
  v16 = *(_QWORD *)(v15 - 8);
  *(_QWORD *)(v6 + 720) = v16;
  *(_QWORD *)(v6 + 728) = swift_task_alloc((*(_QWORD *)(v16 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for BeaconIdentifier(0);
  *(_QWORD *)(v6 + 736) = v17;
  v18 = (*(_QWORD *)(*(_QWORD *)(v17 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v6 + 744) = swift_task_alloc(v18);
  *(_QWORD *)(v6 + 752) = swift_task_alloc(v18);
  *(_QWORD *)(v6 + 760) = swift_task_alloc(v18);
  *(_QWORD *)(v6 + 768) = swift_task_alloc(v18);
  return swift_task_switch(sub_100B46F2C, 0, 0);
}

uint64_t sub_100B46F2C()
{
  uint64_t *v0;
  uint64_t **v1;

  sub_10005972C(v0[68], v0[96], type metadata accessor for BeaconIdentifier);
  v1 = (uint64_t **)swift_task_alloc(dword_101115CC4);
  v0[97] = (uint64_t)v1;
  *v1 = v0;
  v1[1] = (uint64_t *)sub_100B46F9C;
  return sub_100B48908(v0[91], v0[68]);
}

uint64_t sub_100B46F9C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t (*v5)();

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 776);
  v3[98] = a1;
  v3[99] = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    v5 = sub_100B4710C;
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v3[90] + 8))(v3[91], v3[89]);
    v5 = sub_100B47020;
  }
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_100B47020()
{
  uint64_t v0;
  uint64_t result;
  _QWORD *v2;
  uint64_t (__cdecl *v3)();

  if (qword_1010EA5B0 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v0 + 464, 0, 0);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 344, &qword_1010EE220);
  if (*(_QWORD *)(v0 + 368))
  {
    sub_10000F9FC((__int128 *)(v0 + 344), v0 + 304);
    sub_10001AA44((_QWORD *)(v0 + 304), *(_QWORD *)(v0 + 328));
    v3 = (uint64_t (__cdecl *)())((char *)&dword_1010EBC58 + dword_1010EBC58);
    v2 = (_QWORD *)swift_task_alloc(unk_1010EBC5C);
    *(_QWORD *)(v0 + 800) = v2;
    *v2 = v0;
    v2[1] = sub_100B471B4;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100B4710C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)(v0 + 768);
  v2 = *(_QWORD *)(v0 + 760);
  v3 = *(_QWORD *)(v0 + 752);
  v4 = *(_QWORD *)(v0 + 744);
  v5 = *(_QWORD *)(v0 + 728);
  v6 = *(_QWORD *)(v0 + 704);
  v7 = *(_QWORD *)(v0 + 696);
  sub_1000126B0(v1, type metadata accessor for BeaconIdentifier);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100B471B4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 800);
  *(_QWORD *)(*(_QWORD *)v1 + 808) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100B47210, 0, 0);
}

uint64_t sub_100B47210()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  unint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v1 = *(_QWORD *)(v0 + 808);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 304));
  if (v1)
    return swift_task_switch(sub_100B473D8, *(_QWORD *)(v0 + 808), 0);
  if (qword_1010E9F38 != -1)
    swift_once(&qword_1010E9F38, sub_1007A03F4);
  v3 = type metadata accessor for Logger(0);
  v4 = sub_10001A9E8(v3, (uint64_t)qword_1011B7660);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.error.getter(v5);
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Missing BeaconKeyService!", v7, 2u);
    swift_slowDealloc(v7, -1, -1);
  }

  v8 = sub_100B4AB9C();
  v9 = swift_allocError(&type metadata for ManagedCBPeripheralError, v8, 0, 0);
  *v10 = 1;
  swift_willThrow(v9);
  v11 = *(_QWORD *)(v0 + 768);
  v12 = *(_QWORD *)(v0 + 760);
  v13 = *(_QWORD *)(v0 + 752);
  v14 = *(_QWORD *)(v0 + 744);
  v15 = *(_QWORD *)(v0 + 728);
  v16 = *(_QWORD *)(v0 + 704);
  v17 = *(_QWORD *)(v0 + 696);
  sub_1000126B0(v11, type metadata accessor for BeaconIdentifier);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100B473D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 808) + 128);
  *(_QWORD *)(v0 + 816) = v1;
  if (v1)
  {
    swift_retain();
    v2 = sub_100B4742C;
  }
  else
  {
    v2 = sub_100B47720;
  }
  return swift_task_switch(v2, 0, 0);
}

uint64_t sub_100B4742C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  Swift::String v12;
  Swift::String v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  _QWORD *v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;

  if (qword_1010E9F38 != -1)
    swift_once(&qword_1010E9F38, sub_1007A03F4);
  v1 = *(_QWORD *)(v0 + 768);
  v2 = *(_QWORD *)(v0 + 760);
  v3 = type metadata accessor for Logger(0);
  *(_QWORD *)(v0 + 824) = sub_10001A9E8(v3, (uint64_t)qword_1011B7660);
  v4 = sub_10005972C(v1, v2, type metadata accessor for BeaconIdentifier);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.default.getter(v5);
  if (os_log_type_enabled(v5, v6))
  {
    v7 = *(_QWORD *)(v0 + 784);
    v19 = *(_QWORD *)(v0 + 760);
    v8 = *(_QWORD *)(v0 + 680);
    v9 = swift_slowAlloc(32, -1);
    v20 = swift_slowAlloc(32, -1);
    v21 = v20;
    *(_DWORD *)v9 = 134218499;
    *(_QWORD *)(v0 + 520) = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 520, v0 + 528, v9 + 4, v9 + 12);
    *(_WORD *)(v9 + 12) = 2160;
    *(_QWORD *)(v0 + 528) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 528, v0 + 536, v9 + 14, v9 + 22);
    *(_WORD *)(v9 + 22) = 2081;
    v10 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v22 = dispatch thunk of CustomStringConvertible.description.getter(v8, v10);
    v23 = v11;
    v12._countAndFlagsBits = 47;
    v12._object = (void *)0xE100000000000000;
    String.append(_:)(v12);
    v13._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v8, v10);
    String.append(_:)(v13);
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 536) = sub_100016940(v22, v23, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 536, v0 + 544, v9 + 24, v9 + 32);
    swift_bridgeObjectRelease();
    sub_1000126B0(v19, type metadata accessor for BeaconIdentifier);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Best effort lastObservedIndex %llu for %{private,mask.hash}s", (uint8_t *)v9, 0x20u);
    swift_arrayDestroy(v20, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v20, -1, -1);
    swift_slowDealloc(v9, -1, -1);
  }
  else
  {
    sub_1000126B0(*(_QWORD *)(v0 + 760), type metadata accessor for BeaconIdentifier);
  }

  v14 = *(_OWORD *)(v0 + 648);
  *(_OWORD *)(v0 + 64) = *(_OWORD *)(v0 + 632);
  v15 = *(_QWORD *)(v0 + 816);
  v16 = *(_OWORD *)(v0 + 664);
  *(_OWORD *)(v0 + 80) = v14;
  *(_OWORD *)(v0 + 96) = v16;
  v17 = (_QWORD *)swift_task_alloc(dword_1010F551C);
  *(_QWORD *)(v0 + 832) = v17;
  *v17 = v0;
  v17[1] = sub_100B478B4;
  return sub_1002ADDB8(v0 + 256, *(_QWORD *)(v0 + 768), v0 + 64, *(_QWORD *)(v0 + 552), 0, *(_QWORD *)(v0 + 784), v15, 4000);
}

uint64_t sub_100B47720()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  unint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (qword_1010E9F38 != -1)
    swift_once(&qword_1010E9F38, sub_1007A03F4);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_10001A9E8(v1, (uint64_t)qword_1011B7660);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Missing LTKGenerator!", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }

  v6 = sub_100B4AB9C();
  v7 = swift_allocError(&type metadata for ManagedCBPeripheralError, v6, 0, 0);
  *v8 = 1;
  swift_willThrow(v7);
  swift_release();
  v9 = *(_QWORD *)(v0 + 768);
  v10 = *(_QWORD *)(v0 + 760);
  v11 = *(_QWORD *)(v0 + 752);
  v12 = *(_QWORD *)(v0 + 744);
  v13 = *(_QWORD *)(v0 + 728);
  v14 = *(_QWORD *)(v0 + 704);
  v15 = *(_QWORD *)(v0 + 696);
  sub_1000126B0(v9, type metadata accessor for BeaconIdentifier);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100B478B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 832);
  *(_QWORD *)(*(_QWORD *)v1 + 840) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_100B47A40;
  else
    v3 = sub_100B47918;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_100B47918()
{
  uint64_t v0;
  _QWORD *v1;
  unint64_t v2;
  unint64_t v3;
  _OWORD *v4;
  __int128 v5;
  __int128 v6;
  uint64_t result;
  _QWORD *v8;
  uint64_t (*v9)(void);

  sub_100B4AD98((_QWORD *)(v0 + 256), (void (*)(uint64_t, uint64_t))sub_10001BBBC);
  v1 = sub_1007C8FFC(0, 1, 1, _swiftEmptyArrayStorage);
  v3 = v1[2];
  v2 = v1[3];
  if (v3 >= v2 >> 1)
    v1 = sub_1007C8FFC((_QWORD *)(v2 > 1), v3 + 1, 1, v1);
  *(_QWORD *)(v0 + 848) = v1;
  v1[2] = v3 + 1;
  v4 = &v1[6 * v3];
  v5 = *(_OWORD *)(v0 + 256);
  v6 = *(_OWORD *)(v0 + 288);
  v4[3] = *(_OWORD *)(v0 + 272);
  v4[4] = v6;
  v4[2] = v5;
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 424, &qword_1010EE220);
  if (*(_QWORD *)(v0 + 448))
  {
    sub_10000F9FC((__int128 *)(v0 + 424), v0 + 384);
    sub_10001AA44((_QWORD *)(v0 + 384), *(_QWORD *)(v0 + 408));
    v9 = (uint64_t (*)(void))((char *)&dword_1010EBC70 + dword_1010EBC70);
    v8 = (_QWORD *)swift_task_alloc(unk_1010EBC74);
    *(_QWORD *)(v0 + 856) = v8;
    *v8 = v0;
    v8[1] = sub_100B47AFC;
    return v9();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100B47A40()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  swift_release();
  swift_release();
  v1 = *(_QWORD *)(v0 + 768);
  v2 = *(_QWORD *)(v0 + 760);
  v3 = *(_QWORD *)(v0 + 752);
  v4 = *(_QWORD *)(v0 + 744);
  v5 = *(_QWORD *)(v0 + 728);
  v6 = *(_QWORD *)(v0 + 704);
  v7 = *(_QWORD *)(v0 + 696);
  sub_1000126B0(v1, type metadata accessor for BeaconIdentifier);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100B47AFC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 856);
  *(_QWORD *)(*(_QWORD *)v1 + 864) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100B47B58, 0, 0);
}

uint64_t sub_100B47B58()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;

  v1 = (_QWORD *)(v0 + 384);
  if (*(_QWORD *)(v0 + 864))
  {
    v2 = *(_QWORD *)(v0 + 768);
    v3 = *(_QWORD *)(v0 + 736);
    v4 = *(_QWORD *)(v0 + 696);
    v5 = *(_QWORD *)(v0 + 688);
    v6 = *(_QWORD *)(v0 + 680);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v4, v2 + *(int *)(v3 + 20), v6);
    return swift_task_switch(sub_100B47DD0, *(_QWORD *)(v0 + 864), 0);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    sub_100005CF0(*(_QWORD *)(v0 + 552), v0 + 112, &qword_1010F5520);
    v8 = *(_QWORD *)(v0 + 120);
    if (v8 >> 60 == 15)
    {
      sub_1000126B0(*(_QWORD *)(v0 + 768), type metadata accessor for BeaconIdentifier);
      swift_release();
      sub_100B4AD98((_QWORD *)(v0 + 256), (void (*)(uint64_t, uint64_t))sub_10001BC14);
      swift_release();
      v9 = *(_QWORD *)(v0 + 848);
      v10 = *(_QWORD *)(v0 + 760);
      v11 = *(_QWORD *)(v0 + 752);
      v12 = *(_QWORD *)(v0 + 744);
      v13 = *(_QWORD *)(v0 + 728);
      v14 = *(_QWORD *)(v0 + 704);
      v15 = *(_QWORD *)(v0 + 696);
      swift_task_dealloc(*(_QWORD *)(v0 + 768));
      swift_task_dealloc(v10);
      swift_task_dealloc(v11);
      swift_task_dealloc(v12);
      swift_task_dealloc(v13);
      swift_task_dealloc(v14);
      swift_task_dealloc(v15);
      return (*(uint64_t (**)(uint64_t))(v0 + 8))(v9);
    }
    else
    {
      v16 = *(_QWORD *)(v0 + 784);
      v17 = *(_OWORD *)(v0 + 128);
      v18 = *(_OWORD *)(v0 + 144);
      if (v16)
        v19 = v16 / 0x60 + 1;
      else
        v19 = 0;
      v20 = *(_QWORD *)(v0 + 816);
      v21 = *(_QWORD *)(v0 + 624);
      v22 = *(_QWORD *)(v0 + 616);
      v23 = *(_QWORD *)(v0 + 608);
      v24 = *(_QWORD *)(v0 + 600);
      v25 = *(_QWORD *)(v0 + 592);
      v26 = *(_QWORD *)(v0 + 584);
      *(_QWORD *)(v0 + 16) = *(_QWORD *)(v0 + 112);
      *(_QWORD *)(v0 + 24) = v8;
      *(_OWORD *)(v0 + 32) = v17;
      *(_OWORD *)(v0 + 48) = v18;
      sub_10001BBBC(v26, v25);
      sub_10001BBBC(v24, v23);
      sub_10001BBBC(v22, v21);
      sub_10001BBBC(v26, v25);
      sub_10001BBBC(v24, v23);
      sub_10001BBBC(v22, v21);
      v27 = (_QWORD *)swift_task_alloc(dword_1010F551C);
      *(_QWORD *)(v0 + 880) = v27;
      *v27 = v0;
      v27[1] = sub_100B48410;
      return sub_1002ADDB8(v0 + 208, *(_QWORD *)(v0 + 768), v0 + 64, v0 + 16, 1, v19, v20, 4000);
    }
  }
}

uint64_t sub_100B47DD0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t (*v2)();

  v1 = v0[105];
  sub_100B8AAF4(v0[87], *(_QWORD *)(v0[108] + 128), v0[88]);
  v0[109] = v1;
  (*(void (**)(_QWORD, _QWORD))(v0[86] + 8))(v0[87], v0[85]);
  if (v1)
  {
    swift_bridgeObjectRelease();
    v2 = sub_100B48334;
  }
  else
  {
    v2 = sub_100B47E6C;
  }
  return swift_task_switch(v2, 0, 0);
}

uint64_t sub_100B47E6C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  Swift::String v17;
  Swift::String v18;
  uint64_t v19;
  unint64_t v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;

  v1 = *(_QWORD *)(v0 + 704);
  v2 = type metadata accessor for StandaloneBeacon(0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(v1, 1, v2) != 1)
  {
    v4 = *(_QWORD *)(v0 + 768);
    v5 = *(_QWORD *)(v0 + 752);
    sub_100004048(v1, &qword_1010F5E90);
    v6 = sub_10005972C(v4, v5, type metadata accessor for BeaconIdentifier);
    v7 = Logger.logObject.getter(v6);
    v8 = static os_log_type_t.default.getter(v7);
    v9 = os_log_type_enabled(v7, v8);
    v10 = *(_QWORD *)(v0 + 768);
    v11 = *(_QWORD *)(v0 + 752);
    if (v9)
    {
      v12 = *(_QWORD *)(v0 + 680);
      v13 = swift_slowAlloc(22, -1);
      v14 = swift_slowAlloc(32, -1);
      v41 = v14;
      *(_DWORD *)v13 = 141558275;
      *(_QWORD *)(v0 + 504) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 504, v0 + 512, v13 + 4, v13 + 12);
      *(_WORD *)(v13 + 12) = 2081;
      v40 = v10;
      v15 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v42 = dispatch thunk of CustomStringConvertible.description.getter(v12, v15);
      v43 = v16;
      v17._countAndFlagsBits = 47;
      v17._object = (void *)0xE100000000000000;
      String.append(_:)(v17);
      v18._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v12, v15);
      String.append(_:)(v18);
      swift_bridgeObjectRelease();
      *(_QWORD *)(v0 + 512) = sub_100016940(v42, v43, &v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 512, v0 + 520, v13 + 14, v13 + 22);
      swift_bridgeObjectRelease();
      sub_1000126B0(v11, type metadata accessor for BeaconIdentifier);
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Skipping secondary keys for standalone beacon %{private,mask.hash}s", (uint8_t *)v13, 0x16u);
      swift_arrayDestroy(v14, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v14, -1, -1);
      swift_slowDealloc(v13, -1, -1);
      swift_release();
      swift_release();
      swift_release();

      sub_100B4AD98((_QWORD *)(v0 + 256), (void (*)(uint64_t, uint64_t))sub_10001BC14);
      v19 = v40;
    }
    else
    {

      swift_release();
      swift_release();
      swift_release();
      sub_1000126B0(v11, type metadata accessor for BeaconIdentifier);
      sub_100B4AD98((_QWORD *)(v0 + 256), (void (*)(uint64_t, uint64_t))sub_10001BC14);
      v19 = v10;
    }
    sub_1000126B0(v19, type metadata accessor for BeaconIdentifier);
    goto LABEL_12;
  }
  swift_release();
  sub_100004048(v1, &qword_1010F5E90);
  sub_100005CF0(*(_QWORD *)(v0 + 552), v0 + 112, &qword_1010F5520);
  v3 = *(_QWORD *)(v0 + 120);
  if (v3 >> 60 == 15)
  {
    sub_1000126B0(*(_QWORD *)(v0 + 768), type metadata accessor for BeaconIdentifier);
    swift_release();
    sub_100B4AD98((_QWORD *)(v0 + 256), (void (*)(uint64_t, uint64_t))sub_10001BC14);
    swift_release();
LABEL_12:
    v33 = *(_QWORD *)(v0 + 848);
    v34 = *(_QWORD *)(v0 + 760);
    v35 = *(_QWORD *)(v0 + 752);
    v36 = *(_QWORD *)(v0 + 744);
    v37 = *(_QWORD *)(v0 + 728);
    v38 = *(_QWORD *)(v0 + 704);
    v39 = *(_QWORD *)(v0 + 696);
    swift_task_dealloc(*(_QWORD *)(v0 + 768));
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    swift_task_dealloc(v36);
    swift_task_dealloc(v37);
    swift_task_dealloc(v38);
    swift_task_dealloc(v39);
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v33);
  }
  v20 = *(_QWORD *)(v0 + 784);
  v21 = *(_OWORD *)(v0 + 128);
  v22 = *(_OWORD *)(v0 + 144);
  if (v20)
    v23 = v20 / 0x60 + 1;
  else
    v23 = 0;
  v24 = *(_QWORD *)(v0 + 816);
  v25 = *(_QWORD *)(v0 + 624);
  v26 = *(_QWORD *)(v0 + 616);
  v27 = *(_QWORD *)(v0 + 608);
  v28 = *(_QWORD *)(v0 + 600);
  v29 = *(_QWORD *)(v0 + 592);
  v30 = *(_QWORD *)(v0 + 584);
  *(_QWORD *)(v0 + 16) = *(_QWORD *)(v0 + 112);
  *(_QWORD *)(v0 + 24) = v3;
  *(_OWORD *)(v0 + 32) = v21;
  *(_OWORD *)(v0 + 48) = v22;
  sub_10001BBBC(v30, v29);
  sub_10001BBBC(v28, v27);
  sub_10001BBBC(v26, v25);
  sub_10001BBBC(v30, v29);
  sub_10001BBBC(v28, v27);
  sub_10001BBBC(v26, v25);
  v31 = (_QWORD *)swift_task_alloc(dword_1010F551C);
  *(_QWORD *)(v0 + 880) = v31;
  *v31 = v0;
  v31[1] = sub_100B48410;
  return sub_1002ADDB8(v0 + 208, *(_QWORD *)(v0 + 768), v0 + 64, v0 + 16, 1, v23, v24, 4000);
}

uint64_t sub_100B48334()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  swift_release();
  swift_release();
  swift_release();
  sub_100B4AD98((_QWORD *)(v0 + 256), (void (*)(uint64_t, uint64_t))sub_10001BC14);
  v1 = *(_QWORD *)(v0 + 768);
  v2 = *(_QWORD *)(v0 + 760);
  v3 = *(_QWORD *)(v0 + 752);
  v4 = *(_QWORD *)(v0 + 744);
  v5 = *(_QWORD *)(v0 + 728);
  v6 = *(_QWORD *)(v0 + 704);
  v7 = *(_QWORD *)(v0 + 696);
  sub_1000126B0(v1, type metadata accessor for BeaconIdentifier);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100B48410()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 880);
  *(_QWORD *)(*v1 + 888) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = *(_QWORD *)(v2 + 552);
    swift_bridgeObjectRelease();
    sub_100B4ADE0(v4);
    v5 = sub_100B4882C;
  }
  else
  {
    sub_100B4ADE0(*(_QWORD *)(v2 + 552));
    v5 = sub_100B48490;
  }
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_100B48490()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  Swift::String v13;
  uint64_t v14;
  Swift::String v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;

  v34 = *(_QWORD *)(v0 + 264);
  v2 = *(_QWORD *)(v0 + 224);
  v1 = *(_QWORD *)(v0 + 232);
  v3 = *(_QWORD *)(v0 + 288);
  v4 = *(_QWORD *)(v0 + 296);
  sub_10005972C(*(_QWORD *)(v0 + 768), *(_QWORD *)(v0 + 744), type metadata accessor for BeaconIdentifier);
  v35 = v1;
  sub_10001BBBC(v2, v1);
  v5 = sub_10001BBBC(v3, v4);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.debug.getter(v6);
  if (os_log_type_enabled(v6, v7))
  {
    v8 = *(_QWORD *)(v0 + 744);
    v30 = v3;
    v9 = *(_QWORD *)(v0 + 680);
    v10 = swift_slowAlloc(22, -1);
    v32 = swift_slowAlloc(32, -1);
    v36 = v32;
    *(_DWORD *)v10 = 141558275;
    *(_QWORD *)(v0 + 488) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 488, v0 + 496, v10 + 4, v10 + 12);
    *(_WORD *)(v10 + 12) = 2081;
    v11 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v37 = dispatch thunk of CustomStringConvertible.description.getter(v9, v11);
    v38 = v12;
    v13._countAndFlagsBits = 47;
    v13._object = (void *)0xE100000000000000;
    String.append(_:)(v13);
    v14 = v9;
    v3 = v30;
    v15._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v14, v11);
    String.append(_:)(v15);
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 496) = sub_100016940(v37, v38, &v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 496, v0 + 504, v10 + 14, v10 + 22);
    swift_bridgeObjectRelease();
    sub_1000126B0(v8, type metadata accessor for BeaconIdentifier);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Got secondary key for %{private,mask.hash}s!", (uint8_t *)v10, 0x16u);
    swift_arrayDestroy(v32, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v32, -1, -1);
    swift_slowDealloc(v10, -1, -1);
  }
  else
  {
    sub_1000126B0(*(_QWORD *)(v0 + 744), type metadata accessor for BeaconIdentifier);
  }

  v16 = *(_QWORD *)(v0 + 848);
  v17 = v2;
  sub_10001BBBC(v2, v35);
  sub_10001BBBC(v3, v4);
  v19 = *(_QWORD *)(v16 + 16);
  v18 = *(_QWORD *)(v16 + 24);
  v20 = *(_QWORD **)(v0 + 848);
  if (v19 >= v18 >> 1)
    v20 = sub_1007C8FFC((_QWORD *)(v18 > 1), v19 + 1, 1, v20);
  v31 = *(_QWORD *)(v0 + 768);
  v33 = v20;
  v21 = *(_QWORD *)(v0 + 552);
  v20[2] = v19 + 1;
  v22 = &v20[6 * v19];
  *((_BYTE *)v22 + 32) = 1;
  v22[5] = v34;
  v22[6] = v17;
  v22[7] = v35;
  v22[8] = v3;
  v22[9] = v4;
  swift_release();
  swift_release();
  sub_100B4AD98((_QWORD *)(v0 + 208), (void (*)(uint64_t, uint64_t))sub_10001BC14);
  sub_10001BC14(v17, v35);
  sub_10001BC14(v3, v4);
  sub_100B4ADE0(v21);
  sub_100B4AD98((_QWORD *)(v0 + 256), (void (*)(uint64_t, uint64_t))sub_10001BC14);
  sub_1000126B0(v31, type metadata accessor for BeaconIdentifier);
  v23 = *(_QWORD *)(v0 + 760);
  v24 = *(_QWORD *)(v0 + 752);
  v25 = *(_QWORD *)(v0 + 744);
  v26 = *(_QWORD *)(v0 + 728);
  v27 = *(_QWORD *)(v0 + 704);
  v28 = *(_QWORD *)(v0 + 696);
  swift_task_dealloc(*(_QWORD *)(v0 + 768));
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  return (*(uint64_t (**)(_QWORD *))(v0 + 8))(v33);
}

uint64_t sub_100B4882C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(_QWORD *)(v0 + 552);
  swift_release();
  swift_release();
  sub_100B4ADE0(v1);
  sub_100B4AD98((_QWORD *)(v0 + 256), (void (*)(uint64_t, uint64_t))sub_10001BC14);
  v2 = *(_QWORD *)(v0 + 768);
  v3 = *(_QWORD *)(v0 + 760);
  v4 = *(_QWORD *)(v0 + 752);
  v5 = *(_QWORD *)(v0 + 744);
  v6 = *(_QWORD *)(v0 + 728);
  v7 = *(_QWORD *)(v0 + 704);
  v8 = *(_QWORD *)(v0 + 696);
  sub_1000126B0(v2, type metadata accessor for BeaconIdentifier);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100B48908(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v2[32] = a1;
  v2[33] = a2;
  v3 = sub_10001A9A8(&qword_1010FD558);
  v2[34] = v3;
  v2[35] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for UUID(0);
  v2[36] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v2[37] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v2[38] = v6;
  v2[39] = swift_task_alloc((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for BeaconIdentifier(0);
  v2[40] = v7;
  v8 = (*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[41] = swift_task_alloc(v8);
  v2[42] = swift_task_alloc(v8);
  return swift_task_switch(sub_100B489C8, 0, 0);
}

uint64_t sub_100B489C8()
{
  uint64_t v0;
  uint64_t result;
  _QWORD *v2;
  uint64_t (__cdecl *v3)();

  sub_10005972C(*(_QWORD *)(v0 + 264), *(_QWORD *)(v0 + 336), type metadata accessor for BeaconIdentifier);
  if (qword_1010EA5B0 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v0 + 216, 0, 0);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 96, &qword_1010EE220);
  if (*(_QWORD *)(v0 + 120))
  {
    sub_10000F9FC((__int128 *)(v0 + 96), v0 + 16);
    sub_10001AA44((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
    v3 = (uint64_t (__cdecl *)())((char *)&dword_1010EBB40 + dword_1010EBB40);
    v2 = (_QWORD *)swift_task_alloc(unk_1010EBB44);
    *(_QWORD *)(v0 + 344) = v2;
    *v2 = v0;
    v2[1] = sub_100B48AC8;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100B48AC8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 344);
  *(_QWORD *)(*(_QWORD *)v1 + 352) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100B48B24, 0, 0);
}

uint64_t sub_100B48B24()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _BYTE *v15;

  v1 = (_QWORD *)(v0 + 16);
  if (*(_QWORD *)(v0 + 352))
  {
    v2 = *(_QWORD *)(v0 + 320);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    *(_DWORD *)(v0 + 400) = *(_DWORD *)(v2 + 20);
    return swift_task_switch(sub_100B48CC8, *(_QWORD *)(v0 + 352), 0);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    if (qword_1010E9F38 != -1)
      swift_once(&qword_1010E9F38, sub_1007A03F4);
    v4 = type metadata accessor for Logger(0);
    v5 = sub_10001A9E8(v4, (uint64_t)qword_1011B7660);
    v6 = Logger.logObject.getter(v5);
    v7 = static os_log_type_t.error.getter(v6);
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Missing BeaconStore to retrieve lastObservedIndex!", v8, 2u);
      swift_slowDealloc(v8, -1, -1);
    }
    v10 = *(_QWORD *)(v0 + 328);
    v9 = *(_QWORD *)(v0 + 336);
    v11 = *(_QWORD *)(v0 + 312);
    v12 = *(_QWORD *)(v0 + 280);

    v13 = sub_100B4AB9C();
    v14 = swift_allocError(&type metadata for ManagedCBPeripheralError, v13, 0, 0);
    *v15 = 1;
    swift_willThrow(v14);
    sub_1000126B0(v9, type metadata accessor for BeaconIdentifier);
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100B48CC8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  v1 = *(_QWORD *)(v0 + 352);
  v3 = *(_QWORD *)(v0 + 304);
  v2 = *(_QWORD *)(v0 + 312);
  v4 = *(_QWORD *)(v0 + 288);
  v5 = *(_QWORD *)(v0 + 296);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v5 + 16))(v2, *(_QWORD *)(v0 + 264) + *(int *)(v0 + 400), v4);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (v6 + 24) & ~v6;
  v8 = swift_allocObject(&unk_1010AEA30, v7 + v3, v6 | 7);
  *(_QWORD *)(v0 + 360) = v8;
  *(_QWORD *)(v8 + 16) = v1;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(v8 + v7, v2, v4);
  v9 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v10 = (_QWORD *)swift_task_alloc(v9);
  *(_QWORD *)(v0 + 368) = v10;
  v11 = sub_10001A9A8((uint64_t *)&unk_1010EE310);
  *v10 = v0;
  v10[1] = sub_100B48DC4;
  return unsafeBlocking<A>(_:)(v0 + 176, sub_1000D9638, v8, v11);
}

uint64_t sub_100B48DC4()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 368));
  swift_release();
  return swift_task_switch(sub_100B48E20, 0, 0);
}

uint64_t sub_100B48E20()
{
  uint64_t v0;
  __int128 *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  Swift::String v16;
  Swift::String v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;

  v1 = (__int128 *)(v0 + 176);
  if (*(_QWORD *)(v0 + 200))
  {
    sub_10000F9FC(v1, v0 + 136);
    return swift_task_switch(sub_100B49128, *(_QWORD *)(v0 + 352), 0);
  }
  else
  {
    sub_100004048((uint64_t)v1, (uint64_t *)&unk_1010EE310);
    if (qword_1010E9F38 != -1)
      swift_once(&qword_1010E9F38, sub_1007A03F4);
    v3 = *(_QWORD *)(v0 + 328);
    v4 = *(_QWORD *)(v0 + 336);
    v5 = type metadata accessor for Logger(0);
    sub_10001A9E8(v5, (uint64_t)qword_1011B7660);
    v6 = sub_10005972C(v4, v3, type metadata accessor for BeaconIdentifier);
    v7 = Logger.logObject.getter(v6);
    v8 = static os_log_type_t.error.getter(v7);
    v9 = os_log_type_enabled(v7, v8);
    v10 = *(_QWORD *)(v0 + 328);
    if (v9)
    {
      v11 = *(_QWORD *)(v0 + 288);
      v12 = swift_slowAlloc(22, -1);
      v13 = swift_slowAlloc(32, -1);
      v22 = v13;
      *(_DWORD *)v12 = 141558275;
      *(_QWORD *)(v0 + 240) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 240, v0 + 248, v12 + 4, v12 + 12);
      *(_WORD *)(v12 + 12) = 2081;
      v14 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v23 = dispatch thunk of CustomStringConvertible.description.getter(v11, v14);
      v24 = v15;
      v16._countAndFlagsBits = 47;
      v16._object = (void *)0xE100000000000000;
      String.append(_:)(v16);
      v17._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v11, v14);
      String.append(_:)(v17);
      swift_bridgeObjectRelease();
      *(_QWORD *)(v0 + 248) = sub_100016940(v23, v24, &v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 248, v0 + 256, v12 + 14, v12 + 22);
      swift_bridgeObjectRelease();
      sub_1000126B0(v10, type metadata accessor for BeaconIdentifier);
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "No beacon record for beacon %{private,mask.hash}s", (uint8_t *)v12, 0x16u);
      swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v13, -1, -1);
      swift_slowDealloc(v12, -1, -1);
    }
    else
    {
      sub_1000126B0(*(_QWORD *)(v0 + 328), type metadata accessor for BeaconIdentifier);
    }

    v18 = *(_QWORD *)(v0 + 336);
    static Date.trustedNow.getter(*(_QWORD *)(v0 + 256));
    swift_release();
    sub_1000126B0(v18, type metadata accessor for BeaconIdentifier);
    v19 = *(_QWORD *)(v0 + 328);
    v20 = *(_QWORD *)(v0 + 312);
    v21 = *(_QWORD *)(v0 + 280);
    swift_task_dealloc(*(_QWORD *)(v0 + 336));
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(1);
  }
}

uint64_t sub_100B49128()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = *(_QWORD *)(v0 + 352);
  sub_100030784(v0 + 136, v0 + 56);
  v2 = swift_allocObject(&unk_1010AEA58, 64, 7);
  *(_QWORD *)(v0 + 376) = v2;
  *(_QWORD *)(v2 + 16) = v1;
  sub_10000F9FC((__int128 *)(v0 + 56), v2 + 24);
  v3 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v4 = (_QWORD *)swift_task_alloc(v3);
  *(_QWORD *)(v0 + 384) = v4;
  *v4 = v0;
  v4[1] = sub_100B491D8;
  return unsafeBlocking<A>(_:)(*(_QWORD *)(v0 + 280), sub_100960538, v2, *(_QWORD *)(v0 + 272));
}

uint64_t sub_100B491D8()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 384));
  swift_release();
  return swift_task_switch(sub_100B49230, *(_QWORD *)(v1 + 352), 0);
}

uint64_t sub_100B49230()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;

  v2 = v0[34];
  v1 = (_QWORD *)v0[35];
  v3 = v0[32];
  v0[49] = *v1;
  v4 = (char *)v1 + *(int *)(v2 + 48);
  v5 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(v3, v4, v5);
  return swift_task_switch(sub_100B4929C, 0, 0);
}

uint64_t sub_100B4929C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 336);
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 136));
  sub_1000126B0(v1, type metadata accessor for BeaconIdentifier);
  v2 = *(_QWORD *)(v0 + 392);
  v3 = *(_QWORD *)(v0 + 328);
  v4 = *(_QWORD *)(v0 + 312);
  v5 = *(_QWORD *)(v0 + 280);
  swift_task_dealloc(*(_QWORD *)(v0 + 336));
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v2);
}

uint64_t sub_100B49328(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t (__cdecl *v14)();

  v4[12] = a3;
  v4[13] = a4;
  v4[10] = a1;
  v4[11] = a2;
  v5 = type metadata accessor for Date(0);
  v4[14] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[15] = v6;
  v4[16] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for UUID(0);
  v4[17] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v4[18] = v8;
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[19] = swift_task_alloc(v9);
  v4[20] = swift_task_alloc(v9);
  v10 = type metadata accessor for BeaconIdentifier(0);
  v4[21] = v10;
  v11 = (*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[22] = swift_task_alloc(v11);
  v4[23] = swift_task_alloc(v11);
  v4[24] = swift_task_alloc(v11);
  v14 = (uint64_t (__cdecl *)())((char *)&dword_101121648 + dword_101121648);
  v12 = (_QWORD *)swift_task_alloc(unk_10112164C);
  v4[25] = v12;
  *v12 = v4;
  v12[1] = sub_100B49428;
  return v14();
}

uint64_t sub_100B49428(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 200);
  *(_QWORD *)(*(_QWORD *)v1 + 208) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100B49484, 0, 0);
}

uint64_t sub_100B49484()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  _QWORD *v9;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  if (*(_QWORD *)(v0 + 208))
  {
    v1 = *(_QWORD *)(v0 + 192);
    v2 = *(_QWORD *)(v0 + 160);
    v3 = *(_QWORD *)(v0 + 168);
    v5 = *(_QWORD *)(v0 + 144);
    v4 = *(_QWORD *)(v0 + 152);
    v6 = *(_QWORD *)(v0 + 136);
    sub_10005972C(*(_QWORD *)(v0 + 80), v1, type metadata accessor for BeaconIdentifier);
    v7 = v1 + *(int *)(v3 + 20);
    v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    v8(v2, v7, v6);
    v8(v4, v1, v6);
    v9 = (_QWORD *)swift_task_alloc(dword_101115CC4);
    *(_QWORD *)(v0 + 216) = v9;
    *v9 = v0;
    v9[1] = sub_100B49708;
    return sub_100B48908(*(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 80));
  }
  else
  {
    if (qword_1010E9F38 != -1)
      swift_once(&qword_1010E9F38, sub_1007A03F4);
    v11 = type metadata accessor for Logger(0);
    v12 = sub_10001A9E8(v11, (uint64_t)qword_1011B7660);
    v13 = Logger.logObject.getter(v12);
    v14 = static os_log_type_t.error.getter(v13);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = (uint8_t *)swift_slowAlloc(12, -1);
      v16 = swift_slowAlloc(32, -1);
      v25 = v16;
      *(_DWORD *)v15 = 136315138;
      *(_QWORD *)(v0 + 16) = sub_100016940(0xD000000000000032, 0x8000000100EEF700, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v15 + 4, v15 + 12);
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%s Missing ItemSharingKeyStore!", v15, 0xCu);
      swift_arrayDestroy(v16, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v16, -1, -1);
      swift_slowDealloc(v15, -1, -1);
    }

    v17 = sub_100B4AB9C();
    v18 = swift_allocError(&type metadata for ManagedCBPeripheralError, v17, 0, 0);
    *v19 = 1;
    swift_willThrow(v18);
    v20 = *(_QWORD *)(v0 + 184);
    v21 = *(_QWORD *)(v0 + 176);
    v23 = *(_QWORD *)(v0 + 152);
    v22 = *(_QWORD *)(v0 + 160);
    v24 = *(_QWORD *)(v0 + 128);
    swift_task_dealloc(*(_QWORD *)(v0 + 192));
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100B49708(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t (*v5)();

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 216);
  v3[28] = a1;
  v3[29] = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    v5 = sub_100B49AA0;
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v3[15] + 8))(v3[16], v3[14]);
    v5 = sub_100B49784;
  }
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_100B49784()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  Swift::String v12;
  Swift::String v13;
  _QWORD *v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;

  if (qword_1010E9F38 != -1)
    swift_once(&qword_1010E9F38, sub_1007A03F4);
  v1 = v0[23];
  v2 = v0[24];
  v3 = type metadata accessor for Logger(0);
  v0[30] = sub_10001A9E8(v3, (uint64_t)qword_1011B7660);
  v4 = sub_10005972C(v2, v1, type metadata accessor for BeaconIdentifier);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.default.getter(v5);
  if (os_log_type_enabled(v5, v6))
  {
    v7 = v0[28];
    v8 = v0[23];
    v16 = v0[17];
    v9 = swift_slowAlloc(42, -1);
    v17 = swift_slowAlloc(64, -1);
    v19 = v17;
    *(_DWORD *)v9 = 136315907;
    v0[6] = sub_100016940(0xD000000000000032, 0x8000000100EEF700, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 6, v0 + 7, v9 + 4, v9 + 12);
    *(_WORD *)(v9 + 12) = 2048;
    v0[7] = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 7, v0 + 8, v9 + 14, v9 + 22);
    *(_WORD *)(v9 + 22) = 2160;
    v0[8] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 8, v0 + 9, v9 + 24, v9 + 32);
    *(_WORD *)(v9 + 32) = 2081;
    v10 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v20 = dispatch thunk of CustomStringConvertible.description.getter(v16, v10);
    v21 = v11;
    v12._countAndFlagsBits = 47;
    v12._object = (void *)0xE100000000000000;
    String.append(_:)(v12);
    v13._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v16, v10);
    String.append(_:)(v13);
    swift_bridgeObjectRelease();
    v0[9] = sub_100016940(v20, v21, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 9, v0 + 10, v9 + 34, v9 + 42);
    swift_bridgeObjectRelease();
    sub_1000126B0(v8, type metadata accessor for BeaconIdentifier);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "%s Best effort lastObservedIndex %llu for %{private,mask.hash}s", (uint8_t *)v9, 0x2Au);
    swift_arrayDestroy(v17, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v17, -1, -1);
    swift_slowDealloc(v9, -1, -1);
  }
  else
  {
    sub_1000126B0(v0[23], type metadata accessor for BeaconIdentifier);
  }

  v18 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_101115CD0 + dword_101115CD0);
  v14 = (_QWORD *)swift_task_alloc(unk_101115CD4);
  v0[31] = v14;
  *v14 = v0;
  v14[1] = sub_100B49B58;
  return v18(v0[19], v0[20], v0[28]);
}

uint64_t sub_100B49AA0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = *(_QWORD *)(v0 + 192);
  v3 = *(_QWORD *)(v0 + 152);
  v2 = *(_QWORD *)(v0 + 160);
  v4 = *(_QWORD *)(v0 + 136);
  v5 = *(_QWORD *)(v0 + 144);
  swift_release();
  v6 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v6(v3, v4);
  v6(v2, v4);
  sub_1000126B0(v1, type metadata accessor for BeaconIdentifier);
  v7 = *(_QWORD *)(v0 + 184);
  v8 = *(_QWORD *)(v0 + 176);
  v10 = *(_QWORD *)(v0 + 152);
  v9 = *(_QWORD *)(v0 + 160);
  v11 = *(_QWORD *)(v0 + 128);
  swift_task_dealloc(*(_QWORD *)(v0 + 192));
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100B49B58(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *(_QWORD **)v3;
  v5 = *(_QWORD *)(*(_QWORD *)v3 + 248);
  v4[32] = a1;
  v4[33] = a2;
  v4[34] = v2;
  swift_task_dealloc(v5);
  if (v2)
    v6 = sub_100B49F98;
  else
    v6 = sub_100B49BC8;
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_100B49BC8()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  Swift::String v12;
  Swift::String v13;
  void (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t (*v34)(uint64_t, uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;

  if (*(_QWORD *)(v0 + 264) >> 60 == 15)
  {
    v1 = sub_10005972C(*(_QWORD *)(v0 + 192), *(_QWORD *)(v0 + 176), type metadata accessor for BeaconIdentifier);
    v2 = Logger.logObject.getter(v1);
    v3 = static os_log_type_t.error.getter(v2);
    v4 = os_log_type_enabled(v2, v3);
    v5 = *(_QWORD *)(v0 + 192);
    v6 = *(_QWORD *)(v0 + 176);
    if (v4)
    {
      v31 = *(_QWORD *)(v0 + 152);
      v32 = *(_QWORD *)(v0 + 160);
      v30 = *(_QWORD *)(v0 + 144);
      v33 = *(_QWORD *)(v0 + 192);
      v7 = *(_QWORD *)(v0 + 136);
      v8 = swift_slowAlloc(32, -1);
      v9 = swift_slowAlloc(64, -1);
      v35 = v9;
      *(_DWORD *)v8 = 136315651;
      *(_QWORD *)(v0 + 24) = sub_100016940(0xD000000000000032, 0x8000000100EEF700, &v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v8 + 4, v8 + 12);
      *(_WORD *)(v8 + 12) = 2160;
      *(_QWORD *)(v0 + 32) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v8 + 14, v8 + 22);
      *(_WORD *)(v8 + 22) = 2081;
      v10 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v36 = dispatch thunk of CustomStringConvertible.description.getter(v7, v10);
      v37 = v11;
      v12._countAndFlagsBits = 47;
      v12._object = (void *)0xE100000000000000;
      String.append(_:)(v12);
      v13._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v7, v10);
      String.append(_:)(v13);
      swift_bridgeObjectRelease();
      *(_QWORD *)(v0 + 40) = sub_100016940(v36, v37, &v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v8 + 24, v8 + 32);
      swift_bridgeObjectRelease();
      sub_1000126B0(v6, type metadata accessor for BeaconIdentifier);
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "%s Missing info to compute connection keys for %{private,mask.hash}s!", (uint8_t *)v8, 0x20u);
      swift_arrayDestroy(v9, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v9, -1, -1);
      swift_slowDealloc(v8, -1, -1);
      swift_release();

      v14 = *(void (**)(uint64_t, uint64_t))(v30 + 8);
      v14(v31, v7);
      v14(v32, v7);
      v15 = v33;
    }
    else
    {
      v20 = *(_QWORD *)(v0 + 152);
      v21 = *(_QWORD *)(v0 + 160);
      v22 = *(_QWORD *)(v0 + 136);
      v23 = *(_QWORD *)(v0 + 144);

      swift_release();
      sub_1000126B0(v6, type metadata accessor for BeaconIdentifier);
      v24 = *(void (**)(uint64_t, uint64_t))(v23 + 8);
      v24(v20, v22);
      v24(v21, v22);
      v15 = v5;
    }
    sub_1000126B0(v15, type metadata accessor for BeaconIdentifier);
    v25 = *(_QWORD *)(v0 + 184);
    v26 = *(_QWORD *)(v0 + 176);
    v28 = *(_QWORD *)(v0 + 152);
    v27 = *(_QWORD *)(v0 + 160);
    v29 = *(_QWORD *)(v0 + 128);
    swift_task_dealloc(*(_QWORD *)(v0 + 192));
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    return (*(uint64_t (**)(_QWORD *))(v0 + 8))(_swiftEmptyArrayStorage);
  }
  else
  {
    v16 = *(_QWORD *)(v0 + 224);
    if (v16)
      v17 = v16 / 0x60 + 1;
    else
      v17 = 0;
    v34 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_101115CD8 + dword_101115CD8);
    v18 = (_QWORD *)swift_task_alloc(unk_101115CDC);
    *(_QWORD *)(v0 + 280) = v18;
    *v18 = v0;
    v18[1] = sub_100B4A050;
    return v34(*(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 160), v17);
  }
}

uint64_t sub_100B49F98()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = *(_QWORD *)(v0 + 192);
  v3 = *(_QWORD *)(v0 + 152);
  v2 = *(_QWORD *)(v0 + 160);
  v4 = *(_QWORD *)(v0 + 136);
  v5 = *(_QWORD *)(v0 + 144);
  swift_release();
  v6 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v6(v3, v4);
  v6(v2, v4);
  sub_1000126B0(v1, type metadata accessor for BeaconIdentifier);
  v7 = *(_QWORD *)(v0 + 184);
  v8 = *(_QWORD *)(v0 + 176);
  v10 = *(_QWORD *)(v0 + 152);
  v9 = *(_QWORD *)(v0 + 160);
  v11 = *(_QWORD *)(v0 + 128);
  swift_task_dealloc(*(_QWORD *)(v0 + 192));
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100B4A050(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *(_QWORD **)v3;
  v5 = *(_QWORD *)(*(_QWORD *)v3 + 280);
  v4[36] = a1;
  v4[37] = a2;
  v4[38] = v2;
  swift_task_dealloc(v5);
  if (v2)
    v6 = sub_100B4A468;
  else
    v6 = sub_100B4A0C0;
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_100B4A0C0()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  Swift::String v12;
  Swift::String v13;
  void (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  _QWORD *v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;

  if (*(_QWORD *)(v0 + 296) >> 60 == 15)
  {
    sub_10001EF3C(*(_QWORD *)(v0 + 256), *(_QWORD *)(v0 + 264));
    v1 = sub_10005972C(*(_QWORD *)(v0 + 192), *(_QWORD *)(v0 + 176), type metadata accessor for BeaconIdentifier);
    v2 = Logger.logObject.getter(v1);
    v3 = static os_log_type_t.error.getter(v2);
    v4 = os_log_type_enabled(v2, v3);
    v5 = *(_QWORD *)(v0 + 192);
    v6 = *(_QWORD *)(v0 + 176);
    if (v4)
    {
      v29 = *(_QWORD *)(v0 + 152);
      v30 = *(_QWORD *)(v0 + 160);
      v28 = *(_QWORD *)(v0 + 144);
      v31 = *(_QWORD *)(v0 + 192);
      v7 = *(_QWORD *)(v0 + 136);
      v8 = swift_slowAlloc(32, -1);
      v9 = swift_slowAlloc(64, -1);
      v32 = v9;
      *(_DWORD *)v8 = 136315651;
      *(_QWORD *)(v0 + 24) = sub_100016940(0xD000000000000032, 0x8000000100EEF700, &v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v8 + 4, v8 + 12);
      *(_WORD *)(v8 + 12) = 2160;
      *(_QWORD *)(v0 + 32) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v8 + 14, v8 + 22);
      *(_WORD *)(v8 + 22) = 2081;
      v10 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v33 = dispatch thunk of CustomStringConvertible.description.getter(v7, v10);
      v34 = v11;
      v12._countAndFlagsBits = 47;
      v12._object = (void *)0xE100000000000000;
      String.append(_:)(v12);
      v13._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v7, v10);
      String.append(_:)(v13);
      swift_bridgeObjectRelease();
      *(_QWORD *)(v0 + 40) = sub_100016940(v33, v34, &v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v8 + 24, v8 + 32);
      swift_bridgeObjectRelease();
      sub_1000126B0(v6, type metadata accessor for BeaconIdentifier);
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "%s Missing info to compute connection keys for %{private,mask.hash}s!", (uint8_t *)v8, 0x20u);
      swift_arrayDestroy(v9, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v9, -1, -1);
      swift_slowDealloc(v8, -1, -1);
      swift_release();

      v14 = *(void (**)(uint64_t, uint64_t))(v28 + 8);
      v14(v29, v7);
      v14(v30, v7);
      v15 = v31;
    }
    else
    {
      v18 = *(_QWORD *)(v0 + 152);
      v19 = *(_QWORD *)(v0 + 160);
      v20 = *(_QWORD *)(v0 + 136);
      v21 = *(_QWORD *)(v0 + 144);

      swift_release();
      sub_1000126B0(v6, type metadata accessor for BeaconIdentifier);
      v22 = *(void (**)(uint64_t, uint64_t))(v21 + 8);
      v22(v18, v20);
      v22(v19, v20);
      v15 = v5;
    }
    sub_1000126B0(v15, type metadata accessor for BeaconIdentifier);
    v23 = *(_QWORD *)(v0 + 184);
    v24 = *(_QWORD *)(v0 + 176);
    v26 = *(_QWORD *)(v0 + 152);
    v25 = *(_QWORD *)(v0 + 160);
    v27 = *(_QWORD *)(v0 + 128);
    swift_task_dealloc(*(_QWORD *)(v0 + 192));
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    return (*(uint64_t (**)(_QWORD *))(v0 + 8))(_swiftEmptyArrayStorage);
  }
  else
  {
    v16 = (_QWORD *)swift_task_alloc(dword_1010FCECC);
    *(_QWORD *)(v0 + 312) = v16;
    *v16 = v0;
    v16[1] = sub_100B4A538;
    return sub_100477D48(*(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 224));
  }
}

uint64_t sub_100B4A468()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v1 = *(_QWORD *)(v0 + 256);
  v2 = *(_QWORD *)(v0 + 264);
  v3 = *(_QWORD *)(v0 + 192);
  v5 = *(_QWORD *)(v0 + 152);
  v4 = *(_QWORD *)(v0 + 160);
  v6 = *(_QWORD *)(v0 + 136);
  v7 = *(_QWORD *)(v0 + 144);
  swift_release();
  sub_10001EF3C(v1, v2);
  v8 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v8(v5, v6);
  v8(v4, v6);
  sub_1000126B0(v3, type metadata accessor for BeaconIdentifier);
  v9 = *(_QWORD *)(v0 + 184);
  v10 = *(_QWORD *)(v0 + 176);
  v12 = *(_QWORD *)(v0 + 152);
  v11 = *(_QWORD *)(v0 + 160);
  v13 = *(_QWORD *)(v0 + 128);
  swift_task_dealloc(*(_QWORD *)(v0 + 192));
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100B4A538(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *(_QWORD **)v3;
  v5 = *(_QWORD *)(*(_QWORD *)v3 + 312);
  v4[40] = a1;
  v4[41] = a2;
  v4[42] = v2;
  swift_task_dealloc(v5);
  if (v2)
    v6 = sub_100B4AAB4;
  else
    v6 = sub_100B4A5A8;
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_100B4A5A8()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  Swift::String v13;
  Swift::String v14;
  void (*v15)(uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, uint64_t);
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  void (*v43)(uint64_t, uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;

  v1 = *(_QWORD *)(v0 + 328);
  if (v1 >> 60 == 15)
  {
    sub_10001EF3C(*(_QWORD *)(v0 + 288), *(_QWORD *)(v0 + 296));
    sub_10001EF3C(*(_QWORD *)(v0 + 256), *(_QWORD *)(v0 + 264));
    v2 = sub_10005972C(*(_QWORD *)(v0 + 192), *(_QWORD *)(v0 + 176), type metadata accessor for BeaconIdentifier);
    v3 = Logger.logObject.getter(v2);
    v4 = static os_log_type_t.error.getter(v3);
    v5 = os_log_type_enabled(v3, v4);
    v6 = *(_QWORD *)(v0 + 192);
    v7 = *(_QWORD *)(v0 + 176);
    if (v5)
    {
      v54 = *(_QWORD *)(v0 + 152);
      v56 = *(_QWORD *)(v0 + 160);
      v52 = *(_QWORD *)(v0 + 144);
      v58 = *(_QWORD *)(v0 + 192);
      v8 = *(_QWORD *)(v0 + 136);
      v9 = swift_slowAlloc(32, -1);
      v10 = swift_slowAlloc(64, -1);
      v60 = v10;
      *(_DWORD *)v9 = 136315651;
      *(_QWORD *)(v0 + 24) = sub_100016940(0xD000000000000032, 0x8000000100EEF700, &v60);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v9 + 4, v9 + 12);
      *(_WORD *)(v9 + 12) = 2160;
      *(_QWORD *)(v0 + 32) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v9 + 14, v9 + 22);
      *(_WORD *)(v9 + 22) = 2081;
      v11 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v61 = dispatch thunk of CustomStringConvertible.description.getter(v8, v11);
      v62 = v12;
      v13._countAndFlagsBits = 47;
      v13._object = (void *)0xE100000000000000;
      String.append(_:)(v13);
      v14._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v8, v11);
      String.append(_:)(v14);
      swift_bridgeObjectRelease();
      *(_QWORD *)(v0 + 40) = sub_100016940(v61, v62, &v60);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v9 + 24, v9 + 32);
      swift_bridgeObjectRelease();
      sub_1000126B0(v7, type metadata accessor for BeaconIdentifier);
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "%s Missing info to compute connection keys for %{private,mask.hash}s!", (uint8_t *)v9, 0x20u);
      swift_arrayDestroy(v10, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v10, -1, -1);
      swift_slowDealloc(v9, -1, -1);
      swift_release();

      v15 = *(void (**)(uint64_t, uint64_t))(v52 + 8);
      v15(v54, v8);
      v15(v56, v8);
      v16 = v58;
    }
    else
    {
      v25 = *(_QWORD *)(v0 + 152);
      v26 = *(_QWORD *)(v0 + 160);
      v27 = *(_QWORD *)(v0 + 136);
      v28 = *(_QWORD *)(v0 + 144);

      swift_release();
      sub_1000126B0(v7, type metadata accessor for BeaconIdentifier);
      v29 = *(void (**)(uint64_t, uint64_t))(v28 + 8);
      v29(v25, v27);
      v29(v26, v27);
      v16 = v6;
    }
    sub_1000126B0(v16, type metadata accessor for BeaconIdentifier);
    v18 = _swiftEmptyArrayStorage;
  }
  else
  {
    v17 = *(_QWORD *)(v0 + 320);
    sub_10001BD08(*(_QWORD *)(v0 + 256), *(_QWORD *)(v0 + 264));
    sub_10001BD08(v17, v1);
    v18 = sub_1007C8FFC(0, 1, 1, _swiftEmptyArrayStorage);
    v20 = v18[2];
    v19 = v18[3];
    if (v20 >= v19 >> 1)
      v18 = sub_1007C8FFC((_QWORD *)(v19 > 1), v20 + 1, 1, v18);
    v21 = *(_QWORD *)(v0 + 224);
    v22 = &v18[6 * v20];
    v23 = *(_OWORD *)(v0 + 256);
    v24 = *(_OWORD *)(v0 + 320);
    v18[2] = v20 + 1;
    *((_BYTE *)v22 + 32) = 0;
    v22[5] = v21;
    *((_OWORD *)v22 + 3) = v23;
    *((_OWORD *)v22 + 4) = v24;
    if (v21)
      v59 = *(_QWORD *)(v0 + 224) / 0x60uLL + 1;
    else
      v59 = 0;
    v31 = *(_QWORD *)(v0 + 288);
    v30 = *(_QWORD *)(v0 + 296);
    sub_10001BD08(*(_QWORD *)(v0 + 320), *(_QWORD *)(v0 + 328));
    sub_10001BD08(v31, v30);
    v33 = v18[2];
    v32 = v18[3];
    v34 = v33 + 1;
    if (v33 >= v32 >> 1)
    {
      v50 = sub_1007C8FFC((_QWORD *)(v32 > 1), v33 + 1, 1, v18);
      v34 = v33 + 1;
      v18 = v50;
    }
    v36 = *(_QWORD *)(v0 + 320);
    v35 = *(_QWORD *)(v0 + 328);
    v38 = *(_QWORD *)(v0 + 288);
    v37 = *(_QWORD *)(v0 + 296);
    v39 = *(_QWORD *)(v0 + 256);
    v57 = *(_QWORD *)(v0 + 192);
    v53 = *(_QWORD *)(v0 + 264);
    v55 = *(_QWORD *)(v0 + 160);
    v40 = *(_QWORD *)(v0 + 144);
    v51 = *(_QWORD *)(v0 + 152);
    v41 = *(_QWORD *)(v0 + 136);
    v18[2] = v34;
    v42 = &v18[6 * v33];
    *((_BYTE *)v42 + 32) = 1;
    v42[5] = v59;
    v42[6] = v38;
    v42[7] = v37;
    v42[8] = v36;
    v42[9] = v35;
    swift_release();
    sub_10001EF3C(v38, v37);
    sub_10001EF3C(v36, v35);
    sub_10001EF3C(v39, v53);
    v43 = *(void (**)(uint64_t, uint64_t))(v40 + 8);
    v43(v51, v41);
    v43(v55, v41);
    sub_1000126B0(v57, type metadata accessor for BeaconIdentifier);
  }
  v44 = *(_QWORD *)(v0 + 184);
  v45 = *(_QWORD *)(v0 + 176);
  v47 = *(_QWORD *)(v0 + 152);
  v46 = *(_QWORD *)(v0 + 160);
  v48 = *(_QWORD *)(v0 + 128);
  swift_task_dealloc(*(_QWORD *)(v0 + 192));
  swift_task_dealloc(v44);
  swift_task_dealloc(v45);
  swift_task_dealloc(v46);
  swift_task_dealloc(v47);
  swift_task_dealloc(v48);
  return (*(uint64_t (**)(_QWORD *))(v0 + 8))(v18);
}

uint64_t sub_100B4AAB4()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v1 = *(_QWORD *)(v0 + 288);
  v2 = *(_QWORD *)(v0 + 296);
  v4 = *(_QWORD *)(v0 + 256);
  v3 = *(_QWORD *)(v0 + 264);
  v5 = *(_QWORD *)(v0 + 192);
  v7 = *(_QWORD *)(v0 + 152);
  v6 = *(_QWORD *)(v0 + 160);
  v8 = *(_QWORD *)(v0 + 136);
  v9 = *(_QWORD *)(v0 + 144);
  swift_release();
  sub_10001EF3C(v1, v2);
  sub_10001EF3C(v4, v3);
  v10 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v10(v7, v8);
  v10(v6, v8);
  sub_1000126B0(v5, type metadata accessor for BeaconIdentifier);
  v11 = *(_QWORD *)(v0 + 184);
  v12 = *(_QWORD *)(v0 + 176);
  v14 = *(_QWORD *)(v0 + 152);
  v13 = *(_QWORD *)(v0 + 160);
  v15 = *(_QWORD *)(v0 + 128);
  swift_task_dealloc(*(_QWORD *)(v0 + 192));
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

unint64_t sub_100B4AB9C()
{
  unint64_t result;

  result = qword_101115C98;
  if (!qword_101115C98)
  {
    result = swift_getWitnessTable(byte_100E6CF88, &type metadata for ManagedCBPeripheralError);
    atomic_store(result, &qword_101115C98);
  }
  return result;
}

uint64_t sub_100B4ABE0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);

  v1 = type metadata accessor for BeaconIdentifier(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_release();
  swift_release();
  swift_release();
  v7 = v0 + v4;
  v8 = type metadata accessor for UUID(0);
  v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8);
  v9(v7, v8);
  v9(v7 + *(int *)(v1 + 20), v8);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100B4AC90@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = type metadata accessor for BeaconIdentifier(0);
  v4 = *(unsigned __int8 *)(*(_QWORD *)(v3 - 8) + 80);
  return sub_10080B950(v1 + *(int *)(v3 + 20) + ((v4 + 40) & ~v4), a1);
}

uint64_t sub_100B4ACE0@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  return sub_100E000F4(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a2);
}

uint64_t sub_100B4ACF8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_release(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100B4AD6C()
{
  uint64_t v0;

  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 64, 7);
}

_QWORD *sub_100B4AD98(_QWORD *a1, void (*a2)(uint64_t, uint64_t))
{
  uint64_t v4;
  uint64_t v5;

  v4 = a1[4];
  v5 = a1[5];
  a2(a1[2], a1[3]);
  a2(v4, v5);
  return a1;
}

uint64_t sub_100B4ADE0(uint64_t a1)
{
  sub_100758808(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), (void (*)(void))sub_10001BC14, (uint64_t (*)(uint64_t, uint64_t))sub_10001BC14);
  return a1;
}

uint64_t sub_100B4AE20(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2 = sub_10001A9A8(&qword_101115D18);
  v3 = *(_QWORD *)(v2 - 8);
  result = __chkstk_darwin(v2);
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(a1 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_instructionEventCoalescer);
  if (v7)
  {
    v14 = *(_QWORD *)(v7 + 64);
    swift_retain();
    swift_retain();
    v8 = sub_10001A9A8(&qword_1010FAB70);
    v9 = sub_1000193A4(&qword_1010FAB78, &qword_1010FAB70, (const char *)&protocol conformance descriptor for AnyPublisher<A, B>);
    Publisher.filter(_:)(sub_100B36FB8, 0, v8, v9);
    swift_release();
    v10 = sub_1000193A4((unint64_t *)&unk_101115D20, &qword_101115D18, (const char *)&protocol conformance descriptor for Publishers.Filter<A>);
    swift_retain();
    Publisher<>.sink(receiveValue:)(sub_100B4B708, a1, v2, v10);
    swift_release();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
    swift_retain();
    v14 = sub_1007FE340();
    swift_retain();
    v11 = sub_10001A9A8(&qword_1010FA048);
    v12 = sub_1000193A4(&qword_1010FA050, &qword_1010FA048, (const char *)&protocol conformance descriptor for AnyPublisher<A, B>);
    Publisher<>.sink(receiveValue:)(sub_100B4B730, a1, v11, v12);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    return a1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

char *sub_100B4B010@<X0>(char **a1@<X8>)
{
  char *result;

  result = sub_1000188D0();
  *a1 = result;
  return result;
}

uint64_t sub_100B4B038(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v6 = v2[2];
  v7 = v2[3];
  v8 = v2[4];
  v9 = (_QWORD *)swift_task_alloc(dword_101115CF4);
  *(_QWORD *)(v3 + 16) = v9;
  *v9 = v3;
  v9[1] = sub_100004C28;
  return sub_100B3884C(a1, a2, v6, v7, v8);
}

char *sub_100B4B0B8@<X0>(char **a1@<X8>)
{
  char *result;

  result = sub_1000181C8();
  *a1 = result;
  return result;
}

uint64_t sub_100B4B0E0(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v6 = v2[2];
  v7 = v2[3];
  v8 = v2[4];
  v9 = (_QWORD *)swift_task_alloc(dword_101115D04);
  *(_QWORD *)(v3 + 16) = v9;
  *v9 = v3;
  v9[1] = sub_100004A74;
  return sub_100B39884(a1, a2, v6, v7, v8);
}

uint64_t sub_100B4B15C()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v1 = (int *)type metadata accessor for SharedBeaconRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_release();
  swift_release();
  swift_release();
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v6 = v0 + v4 + v1[5];
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v9(v6, v7);
  v9(v0 + v4 + v1[6], v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v10 = v0 + v4 + v1[18];
  v11 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
  v12 = v0 + v4 + v1[19];
  v13 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
  if (!v13(v12, 1, v7))
    v9(v12, v7);
  v14 = v0 + v4 + v1[20];
  v15 = type metadata accessor for SharedBeaconRecord.PropertyListContent(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 48))(v14, 1, v15))
  {
    v16 = v14 + *(int *)(v15 + 20);
    if (!v13(v16, 1, v7))
      v9(v16, v7);
  }
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_100B4B304@<X0>(_QWORD *a1@<X8>)
{
  return sub_100B4B5DC(type metadata accessor for SharedBeaconRecord, (uint64_t)sub_10029183C, a1);
}

uint64_t sub_100B4B318()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t v21;

  v1 = (int *)type metadata accessor for OwnedBeaconRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_release();
  swift_release();
  swift_release();
  v6 = v0 + v4;
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v7 = v0 + v4 + v1[5];
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v10(v7, v8);
  v11 = v0 + v4 + v1[6];
  v12 = type metadata accessor for StableIdentifier(0);
  switch(swift_getEnumCaseMultiPayload(v11, v12))
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v10(v11, v8);
      v21 = v5;
      sub_10001A9A8(&qword_101106F40);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v10(v11, v8);
      v21 = v5;
      sub_10001A9A8((uint64_t *)&unk_1010F46F0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      v5 = v21;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }
  v13 = v6 + v1[7];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v13, 1, v8))
    v10(v13, v8);
  v14 = v6 + v1[8];
  v15 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v14, v15);
  sub_10001BC14(*(_QWORD *)(v6 + v1[9]), *(_QWORD *)(v6 + v1[9] + 8));
  v16 = (uint64_t *)(v6 + v1[10]);
  v17 = v16[1];
  if (v17 >> 60 != 15)
    sub_10001BC14(*v16, v17);
  v18 = (uint64_t *)(v6 + v1[11]);
  v19 = v18[1];
  if (v19 >> 60 != 15)
    sub_10001BC14(*v18, v19);
  sub_10001BC14(*(_QWORD *)(v6 + v1[12]), *(_QWORD *)(v6 + v1[12] + 8));
  sub_10001BC14(*(_QWORD *)(v6 + v1[13]), *(_QWORD *)(v6 + v1[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_100B4B5C8@<X0>(_QWORD *a1@<X8>)
{
  return sub_100B4B5DC(type metadata accessor for OwnedBeaconRecord, (uint64_t)sub_10029826C, a1);
}

uint64_t sub_100B4B5DC@<X0>(uint64_t (*a1)(_QWORD)@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;

  v7 = *(unsigned __int8 *)(*(_QWORD *)(a1(0) - 8) + 80);
  return sub_100B39BD8(*(_QWORD *)(v3 + 16), v3 + ((v7 + 40) & ~v7), a1, a2, a3);
}

uint64_t sub_100B4B63C()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_release(*((_QWORD *)v0 + 2));
  swift_release(*((_QWORD *)v0 + 3));
  swift_release(*((_QWORD *)v0 + 4));
  (*(void (**)(char *, uint64_t))(v2 + 8))(&v0[v4], v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100B4B6C0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for UUID(0) - 8) + 80);
  return sub_10081EDA8(v1 + ((v3 + 40) & ~v3), a1);
}

uint64_t sub_100B4B708(uint64_t a1)
{
  uint64_t v1;

  return sub_100B36FEC(a1, v1, type metadata accessor for OwnedBeaconRecord, "Key generation complete for: %{private,mask.hash}s.");
}

uint64_t sub_100B4B730(uint64_t a1)
{
  uint64_t v1;

  return sub_100B36FEC(a1, v1, type metadata accessor for SharedBeaconRecord, "Finished downloading keys for: %{private,mask.hash}s.");
}

uint64_t destroy for SingleUserAdapter(_QWORD *a1)
{
  swift_release(*a1);
  swift_release(a1[1]);
  return swift_release(a1[2]);
}

uint64_t *_s12searchpartyd17SingleUserAdapterVwCP_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *a2;
  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2[2];
  a1[2] = v5;
  swift_retain(v3);
  swift_retain(v4);
  swift_retain(v5);
  return a1;
}

uint64_t *assignWithCopy for SingleUserAdapter(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_retain(v4);
  swift_release(v5);
  v6 = a1[1];
  v7 = a2[1];
  a1[1] = v7;
  swift_retain(v7);
  swift_release(v6);
  v8 = a1[2];
  v9 = a2[2];
  a1[2] = v9;
  swift_retain(v9);
  swift_release(v8);
  return a1;
}

_QWORD *assignWithTake for SingleUserAdapter(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_release(*a1);
  v4 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release(v4);
  v5 = a1[2];
  a1[2] = *(_QWORD *)(a2 + 16);
  swift_release(v5);
  return a1;
}

ValueMetadata *type metadata accessor for SingleUserAdapter()
{
  return &type metadata for SingleUserAdapter;
}

uint64_t sub_100B4B8A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_1000234D8(v0, qword_1011B7CE0);
  v1 = sub_10001A9E8(v0, (uint64_t)qword_1011B7CE0);
  if (qword_1010E9F18 != -1)
    swift_once(&qword_1010E9F18, sub_100791C18);
  v2 = sub_10001A9E8(v0, (uint64_t)qword_1011B7630);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_100B4B938(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v3[17] = a2;
  v3[18] = v2;
  v3[16] = a1;
  v4 = sub_10001A9A8((uint64_t *)&unk_101116060);
  v5 = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v3[19] = v5;
  swift_defaultActor_initialize(v2);
  *(_QWORD *)(v2 + 144) = _swiftEmptyDictionarySingleton;
  *(_QWORD *)(v2 + 152) = 0;
  type metadata accessor for CentralManager(0);
  v6 = sub_10001A9A8((uint64_t *)&unk_101117280);
  v7 = type metadata accessor for CentralManager.Options(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = swift_allocObject(v6, ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))+ *(_QWORD *)(v8 + 72), *(unsigned __int8 *)(v8 + 80) | 7);
  *(_OWORD *)(v9 + 16) = xmmword_100E22B00;
  static CentralManager.Options.allowDuplicates.getter(v9);
  v3[15] = v9;
  v10 = sub_100006C64((unint64_t *)&unk_101116070, 255, (uint64_t (*)(uint64_t))&type metadata accessor for CentralManager.Options, (uint64_t)&protocol conformance descriptor for CentralManager.Options);
  v11 = sub_10001A9A8((uint64_t *)&unk_101117290);
  v12 = sub_1000193A4((unint64_t *)&unk_101116080, (uint64_t *)&unk_101117290, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(v3 + 15, v11, v12, v7, v10);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v8 + 56))(v5, 0, 1, v7);
  v13 = (_QWORD *)swift_task_alloc(async function pointer to CentralManager.__allocating_init(options:)[1]);
  v3[20] = v13;
  *v13 = v3;
  v13[1] = sub_100B4BAD8;
  return CentralManager.__allocating_init(options:)(v5);
}

uint64_t sub_100B4BAD8(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  _QWORD *v9;
  uint64_t (__cdecl *v10)();

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 144);
  v5 = *(_QWORD *)(*v1 + 128);
  v6 = *v1;
  swift_task_dealloc(*(_QWORD *)(*v1 + 160));
  *(_QWORD *)(v4 + 128) = a1;
  *(_QWORD *)(v4 + 136) = v5;
  v7 = qword_1010EA5B0;
  swift_retain();
  if (v7 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v3 + 96, 0, 0);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v3 + 56, &qword_1010EE220);
  if (*(_QWORD *)(v3 + 80))
  {
    sub_10000F9FC((__int128 *)(v3 + 56), v3 + 16);
    sub_10001AA44((_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 40));
    v10 = (uint64_t (__cdecl *)())((char *)&dword_1010EBC58 + dword_1010EBC58);
    v9 = (_QWORD *)swift_task_alloc(unk_1010EBC5C);
    *(_QWORD *)(v3 + 168) = v9;
    *v9 = v6;
    v9[1] = sub_100B4BC08;
    return v10();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100B4BC08(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v3 = (_QWORD *)(*v1 + 16);
  v4 = *(_QWORD *)(*v1 + 168);
  v5 = *v1;
  *(_QWORD *)(v5 + 176) = a1;
  swift_task_dealloc(v4);
  if (a1)
  {
    v7 = *(_QWORD *)(v5 + 136);
    v6 = *(_QWORD *)(v5 + 144);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v3);
    *(_QWORD *)(v6 + 112) = a1;
    *(_QWORD *)(v6 + 120) = v7;
    swift_retain();
    return swift_task_switch(sub_100B4BE4C, v6, 0);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v5 + 16));
    if (qword_1010EA220 != -1)
      swift_once(&qword_1010EA220, sub_100B4B8A8);
    v9 = type metadata accessor for Logger(0);
    v10 = sub_10001A9E8(v9, (uint64_t)qword_1011B7CE0);
    v11 = Logger.logObject.getter(v10);
    v12 = static os_log_type_t.fault.getter(v11);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Missing BeaconKeyService!", v13, 2u);
      swift_slowDealloc(v13, -1, -1);
    }
    v14 = *(_QWORD *)(v5 + 144);
    v15 = *(_QWORD *)(v5 + 152);

    v16 = type metadata accessor for BeaconScanner.Error(0);
    v17 = sub_100006C64(&qword_101115F48, 255, type metadata accessor for BeaconScanner.Error, (uint64_t)&unk_100E61570);
    swift_allocError(v16, v17, 0, 0);
    v19 = v18;
    v20 = sub_10001A9A8((uint64_t *)&unk_101115F50);
    v21 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v19, 2, 2, v20);
    swift_willThrow(v21);
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    v22 = type metadata accessor for BeaconScanner();
    swift_defaultActor_destroy(v14);
    swift_release();
    swift_release();
    swift_deallocPartialClassInstance(v14, v22, 160, 15);
    swift_task_dealloc(v15);
    return (*(uint64_t (**)(void))(v5 + 8))();
  }
}

uint64_t sub_100B4BE4C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 176);
  v2 = *(_QWORD *)(v0 + 152);
  swift_release(*(_QWORD *)(v0 + 128));
  swift_release(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 144));
}

uint64_t sub_100B4BE9C(char a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)(v2 + 24) = v1;
  *(_BYTE *)(v2 + 232) = a1;
  *(_QWORD *)(v2 + 32) = *v1;
  v3 = sub_10001A9A8(&qword_1010F46C0);
  *(_QWORD *)(v2 + 40) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_10001A9A8((uint64_t *)&unk_101117020);
  *(_QWORD *)(v2 + 48) = v4;
  v5 = *(_QWORD *)(v4 - 8);
  *(_QWORD *)(v2 + 56) = v5;
  v6 = *(_QWORD *)(v5 + 64);
  *(_QWORD *)(v2 + 64) = v6;
  v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v2 + 72) = swift_task_alloc(v7);
  *(_QWORD *)(v2 + 80) = swift_task_alloc(v7);
  v8 = type metadata accessor for ScanMode(0);
  *(_QWORD *)(v2 + 88) = v8;
  v9 = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(v2 + 96) = v9;
  *(_QWORD *)(v2 + 104) = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10001A9A8(&qword_101115F40);
  *(_QWORD *)(v2 + 112) = v10;
  v11 = *(_QWORD *)(v10 - 8);
  *(_QWORD *)(v2 + 120) = v11;
  v12 = (*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v2 + 128) = swift_task_alloc(v12);
  *(_QWORD *)(v2 + 136) = swift_task_alloc(v12);
  v13 = type metadata accessor for CentralManager.State(0);
  *(_QWORD *)(v2 + 144) = v13;
  v14 = *(_QWORD *)(v13 - 8);
  *(_QWORD *)(v2 + 152) = v14;
  *(_QWORD *)(v2 + 160) = swift_task_alloc((*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100B4BFD0, v1, 0);
}

uint64_t sub_100B4BFD0()
{
  uint64_t v0;
  uint64_t v1;
  __int128 v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = swift_allocObject(&unk_1010AEC58, 32, 7);
  v2 = *(_OWORD *)(v0 + 24);
  *(_QWORD *)(v0 + 168) = v1;
  *(_OWORD *)(v1 + 16) = v2;
  v3 = async function pointer to XPCSession.proxy(errorHandler:)[1];
  swift_retain();
  v4 = (_QWORD *)swift_task_alloc(v3);
  *(_QWORD *)(v0 + 176) = v4;
  *v4 = v0;
  v4[1] = sub_100B4C06C;
  return XPCSession.proxy(errorHandler:)(v0 + 16, sub_100B55FBC, v1);
}

uint64_t sub_100B4C06C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 24);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 176));
  swift_release();
  return swift_task_switch(sub_100B4C0CC, v1, 0);
}

uint64_t sub_100B4C0CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v1 = *(_QWORD *)(v0 + 16);
  *(_QWORD *)(v0 + 184) = v1;
  if (v1)
  {
    v3 = *(_QWORD *)(v0 + 152);
    v2 = *(_QWORD *)(v0 + 160);
    v4 = *(_QWORD *)(v0 + 144);
    *(_QWORD *)(v0 + 192) = *(_QWORD *)(*(_QWORD *)(v0 + 24) + 128);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v3 + 104))(v2, enum case for CentralManager.State.poweredOn(_:), v4);
    v5 = (_QWORD *)swift_task_alloc(async function pointer to CentralManagerProtocol.await(state:)[1]);
    *(_QWORD *)(v0 + 200) = v5;
    v6 = type metadata accessor for CentralManager(0);
    v7 = sub_100006C64(&qword_1010EC468, 255, (uint64_t (*)(uint64_t))&type metadata accessor for CentralManager, (uint64_t)&protocol conformance descriptor for CentralManager);
    *v5 = v0;
    v5[1] = sub_100B4C280;
    return CentralManagerProtocol.await(state:)(*(_QWORD *)(v0 + 160), v6, v7);
  }
  else
  {
    v9 = type metadata accessor for BeaconScanner.Error(0);
    v10 = sub_100006C64(&qword_101115F48, 255, type metadata accessor for BeaconScanner.Error, (uint64_t)&unk_100E61570);
    swift_allocError(v9, v10, 0, 0);
    v12 = v11;
    v13 = sub_10001A9A8((uint64_t *)&unk_101115F50);
    v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v12, 1, 2, v13);
    swift_willThrow(v14);
    v16 = *(_QWORD *)(v0 + 128);
    v15 = *(_QWORD *)(v0 + 136);
    v17 = *(_QWORD *)(v0 + 104);
    v19 = *(_QWORD *)(v0 + 72);
    v18 = *(_QWORD *)(v0 + 80);
    v20 = *(_QWORD *)(v0 + 40);
    swift_task_dealloc(*(_QWORD *)(v0 + 160));
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100B4C280()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)();

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 200);
  *(_QWORD *)(*(_QWORD *)v1 + 208) = v0;
  swift_task_dealloc(v3);
  v5 = v2[19];
  v4 = v2[20];
  v6 = v2[18];
  v7 = v2[3];
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  if (v0)
    v8 = sub_100B4C6B0;
  else
    v8 = sub_100B4C2F8;
  return swift_task_switch(v8, v7, 0);
}

uint64_t sub_100B4C2F8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  char *v8;

  v2 = v0[12];
  v1 = v0[13];
  v3 = v0[11];
  v4 = enum case for ScanUseCase.beaconScan(_:);
  v5 = type metadata accessor for ScanUseCase(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 104))(v1, v4, v5);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v2 + 104))(v1, enum case for ScanMode.useCase(_:), v3);
  v8 = (char *)&async function pointer to dispatch thunk of CentralManager.scanForPeripherals(scanMode:garbageCollectInterval:)
     + async function pointer to dispatch thunk of CentralManager.scanForPeripherals(scanMode:garbageCollectInterval:);
  v6 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of CentralManager.scanForPeripherals(scanMode:garbageCollectInterval:)
                                  + 1));
  v0[27] = v6;
  *v6 = v0;
  v6[1] = sub_100B4C3CC;
  return ((uint64_t (*)(_QWORD, _QWORD, unint64_t, _QWORD))v8)(v0[17], v0[13], 0xD02AB486CEDC0000, 0);
}

uint64_t sub_100B4C3CC()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)();

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 216);
  *(_QWORD *)(*(_QWORD *)v1 + 224) = v0;
  swift_task_dealloc(v3);
  v5 = v2[12];
  v4 = v2[13];
  v6 = v2[11];
  v7 = v2[3];
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  if (v0)
    v8 = sub_100B4C744;
  else
    v8 = sub_100B4C444;
  return swift_task_switch(v8, v7, 0);
}

uint64_t sub_100B4C444()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v30 = *(_QWORD *)(v0 + 184);
  v1 = *(_QWORD *)(v0 + 128);
  v31 = *(_QWORD *)(v0 + 136);
  v2 = *(_QWORD *)(v0 + 112);
  v32 = *(_QWORD *)(v0 + 120);
  v33 = *(_QWORD *)(v0 + 160);
  v34 = *(_QWORD *)(v0 + 104);
  v4 = *(_QWORD *)(v0 + 72);
  v3 = *(_QWORD *)(v0 + 80);
  v5 = *(_QWORD *)(v0 + 56);
  v7 = *(_QWORD *)(v0 + 40);
  v6 = *(_QWORD *)(v0 + 48);
  v23 = v6;
  v25 = v7;
  v26 = *(_QWORD *)(v0 + 64);
  v8 = *(_QWORD *)(v0 + 24);
  v29 = *(_QWORD *)(v0 + 32);
  v28 = *(_BYTE *)(v0 + 232);
  v27 = v2;
  (*(void (**)(uint64_t))(v32 + 16))(v1);
  v9 = type metadata accessor for Peripheral(0);
  v10 = sub_1000193A4(&qword_1010EC668, &qword_101115F40, (const char *)&protocol conformance descriptor for AsyncThrowingStream<A, B>);
  v24 = v3;
  AsyncCompactMapSequence.init(_:transform:)(v1, &unk_101115F60, 0, v2, v9, v10);
  v11 = type metadata accessor for TaskPriority(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v7, 1, 1, v11);
  v12 = v4;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v4, v3, v6);
  v14 = sub_100006C64(&qword_101115F78, v13, (uint64_t (*)(uint64_t))type metadata accessor for BeaconScanner, (uint64_t)&unk_100E61540);
  v15 = *(unsigned __int8 *)(v5 + 80);
  v16 = (v15 + 32) & ~v15;
  v17 = (v16 + v26 + 23) & 0xFFFFFFFFFFFFFFF8;
  v18 = (v17 + 15) & 0xFFFFFFFFFFFFFFF8;
  v19 = swift_allocObject(&unk_1010AEC80, v18 + 8, v15 | 7);
  *(_QWORD *)(v19 + 16) = v8;
  *(_QWORD *)(v19 + 24) = v14;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(v19 + v16, v12, v23);
  v20 = v19 + ((v16 + v26 + 7) & 0xFFFFFFFFFFFFFFF8);
  *(_QWORD *)v20 = v8;
  *(_BYTE *)(v20 + 8) = v28;
  *(_QWORD *)(v19 + v17) = v30;
  *(_QWORD *)(v19 + v18) = v29;
  swift_retain_n(v8, 2);
  v21 = sub_100626BC4(v25, (uint64_t)&unk_101115F80, v19);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v24, v23);
  (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v31, v27);
  *(_QWORD *)(v8 + 152) = v21;
  swift_release();
  swift_task_dealloc(v33);
  swift_task_dealloc(v31);
  swift_task_dealloc(v1);
  swift_task_dealloc(v34);
  swift_task_dealloc(v24);
  swift_task_dealloc(v12);
  swift_task_dealloc(v25);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100B4C6B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 184));
  v2 = *(_QWORD *)(v0 + 128);
  v1 = *(_QWORD *)(v0 + 136);
  v3 = *(_QWORD *)(v0 + 104);
  v5 = *(_QWORD *)(v0 + 72);
  v4 = *(_QWORD *)(v0 + 80);
  v6 = *(_QWORD *)(v0 + 40);
  swift_task_dealloc(*(_QWORD *)(v0 + 160));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100B4C744()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 184));
  v2 = *(_QWORD *)(v0 + 128);
  v1 = *(_QWORD *)(v0 + 136);
  v3 = *(_QWORD *)(v0 + 104);
  v5 = *(_QWORD *)(v0 + 72);
  v4 = *(_QWORD *)(v0 + 80);
  v6 = *(_QWORD *)(v0 + 40);
  swift_task_dealloc(*(_QWORD *)(v0 + 160));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100B4C7D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v4 = sub_10001A9A8(&qword_1010F46C0);
  __chkstk_darwin(v4);
  v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1010EA220 != -1)
    swift_once(&qword_1010EA220, sub_100B4B8A8);
  v7 = type metadata accessor for Logger(0);
  sub_10001A9E8(v7, (uint64_t)qword_1011B7CE0);
  v8 = swift_errorRetain(a1);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.error.getter(v9);
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc(12, -1);
    v12 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v11 = 138543362;
    v13 = _convertErrorToNSError(_:)(a1);
    v19 = v13;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, &v20, v11 + 4, v11 + 12);
    *v12 = v13;
    swift_errorRelease(a1);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "XPC error: %{public}@!", v11, 0xCu);
    v14 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v12, 1, v14);
    swift_slowDealloc(v12, -1, -1);
    swift_slowDealloc(v11, -1, -1);
  }
  else
  {
    swift_errorRelease(a1);
  }

  v15 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v6, 1, 1, v15);
  v16 = (_QWORD *)swift_allocObject(&unk_1010AED38, 40, 7);
  v16[2] = 0;
  v16[3] = 0;
  v16[4] = a2;
  swift_retain();
  sub_100691AC0((uint64_t)v6, (uint64_t)&unk_101116050, (uint64_t)v16);
  return swift_release();
}

uint64_t sub_100B4CA00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 16) = a4;
  return swift_task_switch(sub_100B4CA18, a4, 0);
}

uint64_t sub_100B4CA18()
{
  uint64_t v0;

  sub_100B4F530();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100B4CA48(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v3 = *a2;
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = v3;
  *(_BYTE *)(v2 + 32) = *((_BYTE *)a2 + 8);
  return swift_task_switch(sub_100B4CA6C, 0, 0);
}

uint64_t sub_100B4CA6C()
{
  uint64_t v0;
  uint64_t v1;

  if ((*(_BYTE *)(v0 + 32) & 1) != 0)
    v1 = 0;
  else
    v1 = swift_retain(*(_QWORD *)(v0 + 24));
  **(_QWORD **)(v0 + 16) = v1;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100B4CAB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  *(_QWORD *)(v7 + 56) = a5;
  *(_QWORD *)(v7 + 64) = a7;
  *(_BYTE *)(v7 + 416) = a6;
  *(_QWORD *)(v7 + 48) = a4;
  v9 = sub_10001A9A8(&qword_1010EF7C0);
  *(_QWORD *)(v7 + 72) = v9;
  v10 = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(v7 + 80) = v10;
  *(_QWORD *)(v7 + 88) = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DetailedDiscoveredObject(0);
  *(_QWORD *)(v7 + 96) = v11;
  *(_QWORD *)(v7 + 104) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v11 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10001A9A8((uint64_t *)&unk_101115F90);
  *(_QWORD *)(v7 + 112) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v12 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_10001A9A8(&qword_1010EC448);
  *(_QWORD *)(v7 + 120) = v13;
  v14 = *(_QWORD *)(v13 - 8);
  *(_QWORD *)(v7 + 128) = v14;
  *(_QWORD *)(v7 + 136) = swift_task_alloc((*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = (*(_QWORD *)(*(_QWORD *)(sub_10001A9A8(&qword_101115E60) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v7 + 144) = swift_task_alloc(v15);
  *(_QWORD *)(v7 + 152) = swift_task_alloc(v15);
  v16 = (*(_QWORD *)(*(_QWORD *)(sub_10001A9A8((uint64_t *)&unk_101115FA0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v7 + 160) = swift_task_alloc(v16);
  *(_QWORD *)(v7 + 168) = swift_task_alloc(v16);
  v17 = sub_10001A9A8(&qword_1010EF330);
  *(_QWORD *)(v7 + 176) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v17 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for DiscoveredObject(0);
  *(_QWORD *)(v7 + 184) = v18;
  v19 = *(_QWORD *)(v18 - 8);
  *(_QWORD *)(v7 + 192) = v19;
  *(_QWORD *)(v7 + 200) = swift_task_alloc((*(_QWORD *)(v19 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_10001A9A8(&qword_101115F40);
  *(_QWORD *)(v7 + 208) = v20;
  *(_QWORD *)(v7 + 216) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v20 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_10001A9A8(&qword_101115FB0);
  *(_QWORD *)(v7 + 224) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v21 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_10001A9A8(&qword_1010EC648);
  *(_QWORD *)(v7 + 232) = v22;
  v23 = *(_QWORD *)(v22 - 8);
  *(_QWORD *)(v7 + 240) = v23;
  *(_QWORD *)(v7 + 248) = swift_task_alloc((*(_QWORD *)(v23 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100B4CCC4, a5, 0);
}

uint64_t sub_100B4CCC4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t (*v14)(uint64_t, uint64_t);

  v1 = v0[28];
  v2 = v0[26];
  v3 = v0[7];
  v4 = sub_10001A9A8((uint64_t *)&unk_101117020);
  AsyncCompactMapSequence.base.getter(v4);
  v5 = sub_1000193A4(&qword_1010EC668, &qword_101115F40, (const char *)&protocol conformance descriptor for AsyncThrowingStream<A, B>);
  dispatch thunk of AsyncSequence.makeAsyncIterator()(v2, v5);
  v6 = AsyncCompactMapSequence.transform.getter(v4);
  v8 = v7;
  v9 = type metadata accessor for Peripheral(0);
  v0[32] = v9;
  AsyncCompactMapSequence.Iterator.init(_:transform:)(v1, v6, v8, v2, v9, v5);
  v11 = sub_100006C64(&qword_101115F78, v10, (uint64_t (*)(uint64_t))type metadata accessor for BeaconScanner, (uint64_t)&unk_100E61540);
  v0[33] = v11;
  v14 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_101117050 + dword_101117050);
  v12 = (_QWORD *)swift_task_alloc(unk_101117054);
  v0[34] = v12;
  *v12 = v0;
  v12[1] = sub_100B4CE0C;
  return v14(v3, v11);
}

uint64_t sub_100B4CE0C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *(_QWORD **)v2;
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v2 + 272));
  if (v1)
  {
    v4[51] = v1;
    v5 = v4[7];
    v6 = sub_100B4DF8C;
  }
  else
  {
    v5 = v4[7];
    v4[35] = a1;
    v6 = sub_100B4CE84;
  }
  return swift_task_switch(v6, v5, 0);
}

uint64_t sub_100B4CE84()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  if (v0[35])
  {
    if ((static Task<>.isCancelled.getter() & 1) == 0)
    {
      v16 = v0[32];
      v17 = sub_100006C64(&qword_10110F938, 255, (uint64_t (*)(uint64_t))&type metadata accessor for Peripheral, (uint64_t)&protocol conformance descriptor for Peripheral);
      v18 = dispatch thunk of Actor.unownedExecutor.getter(v16, v17);
      v0[36] = v18;
      v0[37] = v19;
      return swift_task_switch(sub_100B4D114, v18, v19);
    }
    if (qword_1010EA220 != -1)
      swift_once(&qword_1010EA220, sub_100B4B8A8);
    v1 = type metadata accessor for Logger(0);
    v2 = sub_10001A9E8(v1, (uint64_t)qword_1011B7CE0);
    v3 = Logger.logObject.getter(v2);
    v4 = static os_log_type_t.error.getter(v3);
    if (os_log_type_enabled(v3, v4))
    {
      v5 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "Task cancelled!", v5, 2u);
      swift_slowDealloc(v5, -1, -1);
    }
    swift_release();

  }
  (*(void (**)(_QWORD, _QWORD))(v0[30] + 8))(v0[31], v0[29]);
  if (qword_1010EA220 != -1)
    swift_once(&qword_1010EA220, sub_100B4B8A8);
  v6 = type metadata accessor for Logger(0);
  v7 = sub_10001A9E8(v6, (uint64_t)qword_1011B7CE0);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.info.getter(v8);
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Done scanning", v10, 2u);
    swift_slowDealloc(v10, -1, -1);
  }
  v11 = v0[8];

  v12 = swift_allocObject(&unk_1010AECA8, 24, 7);
  v0[48] = v12;
  *(_QWORD *)(v12 + 16) = v11;
  v13 = async function pointer to withTimeout<A>(_:block:)[1];
  swift_unknownObjectRetain(v11);
  v14 = (_QWORD *)swift_task_alloc(v13);
  v0[49] = v14;
  *v14 = v0;
  v14[1] = sub_100B4DE3C;
  return withTimeout<A>(_:block:)(v14, 1000000000000000000, 0, &unk_101115FC0, v12, &type metadata for () + 1);
}

uint64_t sub_100B4D114()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 56);
  *(_QWORD *)(v0 + 304) = dispatch thunk of Peripheral.advertisementData.getter();
  return swift_task_switch(sub_100B4D158, v1, 0);
}

uint64_t sub_100B4D158()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  _BOOL4 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, uint64_t);
  uint64_t v24;

  v1 = v0[38];
  if (v1)
  {
    sub_10047C2A8(v1);
    v0[39] = v2;
    return swift_task_switch(sub_100B4D3F8, v0[36], v0[37]);
  }
  else
  {
    if (qword_1010EA220 != -1)
      swift_once(&qword_1010EA220, sub_100B4B8A8);
    v4 = v0[35];
    v5 = type metadata accessor for Logger(0);
    sub_10001A9E8(v5, (uint64_t)qword_1011B7CE0);
    v6 = swift_retain_n(v4, 2);
    v7 = Logger.logObject.getter(v6);
    v8 = static os_log_type_t.error.getter(v7);
    v9 = os_log_type_enabled(v7, v8);
    v10 = v0[35];
    if (v9)
    {
      v11 = v0[11];
      v21 = v0[10];
      v12 = v0[9];
      v13 = (uint8_t *)swift_slowAlloc(12, -1);
      v22 = swift_slowAlloc(32, -1);
      v24 = v22;
      *(_DWORD *)v13 = 136446210;
      Peripheral.id.getter(v22);
      v14 = sub_1000193A4(&qword_1010EE1D0, &qword_1010EF7C0, (const char *)&protocol conformance descriptor for Identifier<A>);
      v15 = dispatch thunk of CustomStringConvertible.description.getter(v12, v14);
      v17 = v16;
      (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v11, v12);
      v0[3] = sub_100016940(v15, v17, &v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 3, v0 + 4, v13 + 4, v13 + 12);
      swift_release_n(v10, 2);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Missing advertisementData for %{public}s!", v13, 0xCu);
      swift_arrayDestroy(v22, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v22, -1, -1);
      swift_slowDealloc(v13, -1, -1);
      swift_release();

    }
    else
    {

      swift_release_n(v10, 3);
    }
    v18 = v0[33];
    v19 = v0[7];
    v23 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_101117050 + dword_101117050);
    v20 = (_QWORD *)swift_task_alloc(unk_101117054);
    v0[47] = v20;
    *v20 = v0;
    v20[1] = sub_100B4DDC4;
    return v23(v19, v18);
  }
}

uint64_t sub_100B4D3F8()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  v1 = *(_QWORD *)(v0 + 56);
  *(_QWORD *)(v0 + 320) = dispatch thunk of Peripheral.rssi.getter();
  *(_BYTE *)(v0 + 417) = v2;
  return swift_task_switch(sub_100B4D440, v1, 0);
}

uint64_t sub_100B4D440()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  os_log_type_t type;
  uint64_t v38;
  uint64_t (*v39)(uint64_t, uint64_t);
  uint64_t v40;

  if ((*(_BYTE *)(v0 + 417) & 1) != 0)
    v1 = 0;
  else
    v1 = *(_QWORD *)(v0 + 320);
  if (v1 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_14;
  }
  if (v1 > 0x7FFFFFFF)
  {
LABEL_14:
    __break(1u);
LABEL_15:
    swift_once(&qword_1010EA220, sub_100B4B8A8);
    goto LABEL_8;
  }
  v2 = *(_QWORD *)(v0 + 184);
  v3 = *(_QWORD *)(v0 + 192);
  v4 = *(_QWORD *)(v0 + 176);
  sub_1001B28B0(*(_QWORD *)(v0 + 312), v1, v4);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v4, 1, v2) != 1)
  {
    v25 = *(_QWORD *)(v0 + 200);
    v26 = *(_QWORD *)(v0 + 176);
    v27 = *(_QWORD *)(v0 + 184);
    swift_bridgeObjectRelease();
    sub_1000126EC(v26, v25, type metadata accessor for DiscoveredObject);
    v28 = (uint64_t *)(v25 + *(int *)(v27 + 36));
    v29 = *v28;
    *(_QWORD *)(v0 + 328) = *v28;
    v30 = v28[1];
    *(_QWORD *)(v0 + 336) = v30;
    sub_10012C644(v29, v30);
    v31 = (_QWORD *)swift_task_alloc(dword_101115D64);
    *(_QWORD *)(v0 + 344) = v31;
    *v31 = v0;
    v31[1] = sub_100B4D858;
    return sub_100B4FB80(*(_QWORD *)(v0 + 168), v29, v30);
  }
  sub_100004048(*(_QWORD *)(v0 + 176), &qword_1010EF330);
  if (qword_1010EA220 != -1)
    goto LABEL_15;
LABEL_8:
  v5 = *(_QWORD *)(v0 + 304);
  v6 = *(_QWORD *)(v0 + 280);
  v7 = type metadata accessor for Logger(0);
  sub_10001A9E8(v7, (uint64_t)qword_1011B7CE0);
  swift_retain_n(v6, 2);
  swift_bridgeObjectRetain(v5);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.error.getter(v9);
  v11 = os_log_type_enabled(v9, v10);
  v12 = *(_QWORD *)(v0 + 304);
  v13 = *(_QWORD *)(v0 + 280);
  if (v11)
  {
    v14 = *(_QWORD *)(v0 + 88);
    v36 = *(_QWORD *)(v0 + 80);
    v15 = *(_QWORD *)(v0 + 72);
    v16 = swift_slowAlloc(22, -1);
    v38 = swift_slowAlloc(64, -1);
    v40 = v38;
    *(_DWORD *)v16 = 136446466;
    type = v10;
    Peripheral.id.getter(v38);
    v17 = sub_1000193A4(&qword_1010EE1D0, &qword_1010EF7C0, (const char *)&protocol conformance descriptor for Identifier<A>);
    v18 = dispatch thunk of CustomStringConvertible.description.getter(v15, v17);
    v20 = v19;
    (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v14, v15);
    *(_QWORD *)(v0 + 32) = sub_100016940(v18, v20, &v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v16 + 4, v16 + 12);
    swift_release_n(v13, 2);
    swift_bridgeObjectRelease();
    *(_WORD *)(v16 + 12) = 2080;
    swift_bridgeObjectRetain(v12);
    v21 = sub_10001A9A8(&qword_101103A80);
    v22 = Dictionary.description.getter(v12, &type metadata for String, v21, &protocol witness table for String);
    v24 = v23;
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 40) = sub_100016940(v22, v24, &v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v16 + 14, v16 + 22);
    swift_bridgeObjectRelease_n(v12, 2);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v9, type, "Could not parse advertisementData for %{public}s: %s", (uint8_t *)v16, 0x16u);
    swift_arrayDestroy(v38, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v38, -1, -1);
    swift_slowDealloc(v16, -1, -1);
    swift_release();

  }
  else
  {

    swift_bridgeObjectRelease_n(v12, 2);
    swift_release_n(v13, 3);
  }
  v33 = *(_QWORD *)(v0 + 264);
  v34 = *(_QWORD *)(v0 + 56);
  v39 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_101117050 + dword_101117050);
  v35 = (_QWORD *)swift_task_alloc(unk_101117054);
  *(_QWORD *)(v0 + 376) = v35;
  *v35 = v0;
  v35[1] = sub_100B4DDC4;
  return v39(v34, v33);
}

uint64_t sub_100B4D858()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 344);
  *(_QWORD *)(*(_QWORD *)v1 + 352) = v0;
  swift_task_dealloc(v3);
  v4 = v2[41];
  v5 = v2[42];
  v6 = v2[7];
  sub_10012C494(v4, v5);
  if (v0)
    v7 = sub_100B4E1D4;
  else
    v7 = sub_100B4D8C8;
  return swift_task_switch(v7, v6, 0);
}

uint64_t sub_100B4D8C8()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  void *v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t (*v29)(uint64_t, uint64_t);

  v1 = *(unsigned __int8 *)(v0 + 416);
  sub_10000F9B8(*(_QWORD *)(v0 + 168), *(_QWORD *)(v0 + 160), (uint64_t *)&unk_101115FA0);
  v2 = *(_QWORD *)(v0 + 160);
  if (v1 != 1)
  {
    v12 = (uint64_t *)&unk_101115FA0;
    v13 = *(_QWORD *)(v0 + 160);
LABEL_12:
    sub_100004048(v13, v12);
    goto LABEL_13;
  }
  v3 = type metadata accessor for BeaconDetails(0);
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 48))(v2, 1, v3);
  sub_100004048(v2, (uint64_t *)&unk_101115FA0);
  if (v4 == 1)
  {
    v5 = (*(unsigned __int8 *)(*(_QWORD *)(v0 + 200) + *(int *)(*(_QWORD *)(v0 + 184) + 44)) >> 4) & 3;
    if (v5 == 2)
    {
      v6 = *(_QWORD *)(v0 + 120);
      v7 = *(_QWORD *)(v0 + 128);
      v8 = *(_QWORD *)(v0 + 112);
      v9 = type metadata accessor for Service(0);
      v10 = "87290102-3C51-43B1-A1A9-11B9DC38478B";
      v11 = 36;
    }
    else
    {
      if (v5 != 3)
      {
        (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 128) + 56))(*(_QWORD *)(v0 + 112), 1, 1, *(_QWORD *)(v0 + 120));
LABEL_11:
        v13 = *(_QWORD *)(v0 + 112);
        v12 = (uint64_t *)&unk_101115F90;
        goto LABEL_12;
      }
      v6 = *(_QWORD *)(v0 + 120);
      v7 = *(_QWORD *)(v0 + 128);
      v8 = *(_QWORD *)(v0 + 112);
      v9 = type metadata accessor for Service(0);
      v10 = "FD44";
      v11 = 4;
    }
    Identifier.init(stringLiteral:)(v10, v11, 2, v9);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v7 + 56))(v8, 0, 1, v6);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v8, 1, v6) != 1)
    {
      v14 = *(_QWORD *)(v0 + 280);
      (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 128) + 32))(*(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 120));
      v15 = (_QWORD *)swift_task_alloc(dword_101115FD4);
      *(_QWORD *)(v0 + 360) = v15;
      *v15 = v0;
      v15[1] = sub_100B4DBE8;
      return sub_100B4E918(*(_QWORD *)(v0 + 144), v14, *(_QWORD *)(v0 + 136));
    }
    goto LABEL_11;
  }
LABEL_13:
  v17 = *(_QWORD *)(v0 + 152);
  v18 = type metadata accessor for AccessoryMetadata(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v17, 1, 1, v18);
  v19 = *(_QWORD *)(v0 + 200);
  v20 = *(_QWORD *)(v0 + 168);
  v21 = *(_QWORD *)(v0 + 152);
  v22 = *(_QWORD *)(v0 + 96);
  v23 = *(char **)(v0 + 104);
  v24 = *(void **)(v0 + 64);
  sub_10005972C(v19, (uint64_t)v23, type metadata accessor for DiscoveredObject);
  sub_10000F9B8(v21, (uint64_t)&v23[*(int *)(v22 + 24)], &qword_101115E60);
  sub_10000F9B8(v20, (uint64_t)&v23[*(int *)(v22 + 20)], (uint64_t *)&unk_101115FA0);
  v25 = sub_100B561E4(v23);
  objc_msgSend(v24, "discoveredObject:", v25);
  swift_release();

  sub_1000126B0((uint64_t)v23, type metadata accessor for DetailedDiscoveredObject);
  sub_100004048(v21, &qword_101115E60);
  sub_100004048(v20, (uint64_t *)&unk_101115FA0);
  sub_1000126B0(v19, type metadata accessor for DiscoveredObject);
  v26 = *(_QWORD *)(v0 + 264);
  v27 = *(_QWORD *)(v0 + 56);
  v29 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_101117050 + dword_101117050);
  v28 = (_QWORD *)swift_task_alloc(unk_101117054);
  *(_QWORD *)(v0 + 376) = v28;
  *v28 = v0;
  v28[1] = sub_100B4DDC4;
  return v29(v27, v26);
}

uint64_t sub_100B4DBE8()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 360);
  *(_QWORD *)(*v1 + 368) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_100B4E440;
  else
    v4 = sub_100B4DC4C;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 56), 0);
}

uint64_t sub_100B4DC4C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t (*v14)(uint64_t, uint64_t);

  v2 = v0[18];
  v1 = v0[19];
  (*(void (**)(_QWORD, _QWORD))(v0[16] + 8))(v0[17], v0[15]);
  sub_100005CF0(v2, v1, &qword_101115E60);
  v3 = v0[25];
  v4 = v0[21];
  v5 = v0[19];
  v6 = v0[12];
  v7 = (char *)v0[13];
  v8 = (void *)v0[8];
  sub_10005972C(v3, (uint64_t)v7, type metadata accessor for DiscoveredObject);
  sub_10000F9B8(v5, (uint64_t)&v7[*(int *)(v6 + 24)], &qword_101115E60);
  sub_10000F9B8(v4, (uint64_t)&v7[*(int *)(v6 + 20)], (uint64_t *)&unk_101115FA0);
  v9 = sub_100B561E4(v7);
  objc_msgSend(v8, "discoveredObject:", v9);
  swift_release();

  sub_1000126B0((uint64_t)v7, type metadata accessor for DetailedDiscoveredObject);
  sub_100004048(v5, &qword_101115E60);
  sub_100004048(v4, (uint64_t *)&unk_101115FA0);
  sub_1000126B0(v3, type metadata accessor for DiscoveredObject);
  v10 = v0[33];
  v11 = v0[7];
  v14 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_101117050 + dword_101117050);
  v12 = (_QWORD *)swift_task_alloc(unk_101117054);
  v0[47] = v12;
  *v12 = v0;
  v12[1] = sub_100B4DDC4;
  return v14(v11, v10);
}

uint64_t sub_100B4DDC4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *(_QWORD **)v2;
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v2 + 376));
  if (v1)
  {
    v4[51] = v1;
    v5 = v4[7];
    v6 = sub_100B4DF8C;
  }
  else
  {
    v5 = v4[7];
    v4[35] = a1;
    v6 = sub_100B4CE84;
  }
  return swift_task_switch(v6, v5, 0);
}

uint64_t sub_100B4DE3C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 392);
  *(_QWORD *)(*v1 + 400) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = *(_QWORD *)(v2 + 56);
    v5 = sub_100B4E6D8;
  }
  else
  {
    v6 = *(_QWORD *)(v2 + 56);
    swift_release();
    v5 = sub_100B4DEB0;
    v4 = v6;
  }
  return swift_task_switch(v5, v4, 0);
}

uint64_t sub_100B4DEB0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v1 = *(_QWORD *)(v0 + 216);
  v2 = *(_QWORD *)(v0 + 224);
  v3 = *(_QWORD *)(v0 + 200);
  v5 = *(_QWORD *)(v0 + 168);
  v4 = *(_QWORD *)(v0 + 176);
  v7 = *(_QWORD *)(v0 + 152);
  v6 = *(_QWORD *)(v0 + 160);
  v9 = *(_QWORD *)(v0 + 136);
  v8 = *(_QWORD *)(v0 + 144);
  v11 = *(_QWORD *)(v0 + 112);
  v12 = *(_QWORD *)(v0 + 104);
  v13 = *(_QWORD *)(v0 + 88);
  swift_task_dealloc(*(_QWORD *)(v0 + 248));
  swift_task_dealloc(v2);
  swift_task_dealloc(v1);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100B4DF8C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 240) + 8))(*(_QWORD *)(v0 + 248), *(_QWORD *)(v0 + 232));
  v1 = *(_QWORD *)(v0 + 408);
  if (qword_1010EA220 != -1)
    swift_once(&qword_1010EA220, sub_100B4B8A8);
  v2 = type metadata accessor for Logger(0);
  sub_10001A9E8(v2, (uint64_t)qword_1011B7CE0);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v6 = 138543362;
    v8 = _convertErrorToNSError(_:)(v1);
    *(_QWORD *)(v0 + 16) = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v6 + 4, v6 + 12);
    *v7 = v8;
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Error during scan: %{public}@", v6, 0xCu);
    v9 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v7, 1, v9);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);

    swift_errorRelease(v1);
  }
  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);

  }
  v10 = *(_QWORD *)(v0 + 216);
  v11 = *(_QWORD *)(v0 + 224);
  v12 = *(_QWORD *)(v0 + 200);
  v14 = *(_QWORD *)(v0 + 168);
  v13 = *(_QWORD *)(v0 + 176);
  v16 = *(_QWORD *)(v0 + 152);
  v15 = *(_QWORD *)(v0 + 160);
  v18 = *(_QWORD *)(v0 + 136);
  v17 = *(_QWORD *)(v0 + 144);
  v20 = *(_QWORD *)(v0 + 112);
  v21 = *(_QWORD *)(v0 + 104);
  v22 = *(_QWORD *)(v0 + 88);
  swift_task_dealloc(*(_QWORD *)(v0 + 248));
  swift_task_dealloc(v11);
  swift_task_dealloc(v10);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100B4E1D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v2 = *(_QWORD *)(v0 + 240);
  v1 = *(_QWORD *)(v0 + 248);
  v3 = *(_QWORD *)(v0 + 232);
  v4 = *(_QWORD *)(v0 + 200);
  swift_release();
  sub_1000126B0(v4, type metadata accessor for DiscoveredObject);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v5 = *(_QWORD *)(v0 + 352);
  if (qword_1010EA220 != -1)
    swift_once(&qword_1010EA220, sub_100B4B8A8);
  v6 = type metadata accessor for Logger(0);
  sub_10001A9E8(v6, (uint64_t)qword_1011B7CE0);
  v7 = swift_errorRetain(v5);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.error.getter(v8);
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(12, -1);
    v11 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v10 = 138543362;
    v12 = _convertErrorToNSError(_:)(v5);
    *(_QWORD *)(v0 + 16) = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v10 + 4, v10 + 12);
    *v11 = v12;
    swift_errorRelease(v5);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Error during scan: %{public}@", v10, 0xCu);
    v13 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v11, 1, v13);
    swift_slowDealloc(v11, -1, -1);
    swift_slowDealloc(v10, -1, -1);

    swift_errorRelease(v5);
  }
  else
  {
    swift_errorRelease(v5);
    swift_errorRelease(v5);

  }
  v14 = *(_QWORD *)(v0 + 216);
  v15 = *(_QWORD *)(v0 + 224);
  v16 = *(_QWORD *)(v0 + 200);
  v18 = *(_QWORD *)(v0 + 168);
  v17 = *(_QWORD *)(v0 + 176);
  v20 = *(_QWORD *)(v0 + 152);
  v19 = *(_QWORD *)(v0 + 160);
  v22 = *(_QWORD *)(v0 + 136);
  v21 = *(_QWORD *)(v0 + 144);
  v24 = *(_QWORD *)(v0 + 112);
  v25 = *(_QWORD *)(v0 + 104);
  v26 = *(_QWORD *)(v0 + 88);
  swift_task_dealloc(*(_QWORD *)(v0 + 248));
  swift_task_dealloc(v15);
  swift_task_dealloc(v14);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100B4E440()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v2 = *(_QWORD *)(v0 + 240);
  v1 = *(_QWORD *)(v0 + 248);
  v3 = *(_QWORD *)(v0 + 232);
  v4 = *(_QWORD *)(v0 + 200);
  v5 = *(_QWORD *)(v0 + 168);
  v7 = *(_QWORD *)(v0 + 128);
  v6 = *(_QWORD *)(v0 + 136);
  v8 = *(_QWORD *)(v0 + 120);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  sub_100004048(v5, (uint64_t *)&unk_101115FA0);
  sub_1000126B0(v4, type metadata accessor for DiscoveredObject);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v9 = *(_QWORD *)(v0 + 368);
  if (qword_1010EA220 != -1)
    swift_once(&qword_1010EA220, sub_100B4B8A8);
  v10 = type metadata accessor for Logger(0);
  sub_10001A9E8(v10, (uint64_t)qword_1011B7CE0);
  v11 = swift_errorRetain(v9);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.error.getter(v12);
  if (os_log_type_enabled(v12, v13))
  {
    v14 = (uint8_t *)swift_slowAlloc(12, -1);
    v15 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v14 = 138543362;
    v16 = _convertErrorToNSError(_:)(v9);
    *(_QWORD *)(v0 + 16) = v16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v14 + 4, v14 + 12);
    *v15 = v16;
    swift_errorRelease(v9);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "Error during scan: %{public}@", v14, 0xCu);
    v17 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v15, 1, v17);
    swift_slowDealloc(v15, -1, -1);
    swift_slowDealloc(v14, -1, -1);

    swift_errorRelease(v9);
  }
  else
  {
    swift_errorRelease(v9);
    swift_errorRelease(v9);

  }
  v18 = *(_QWORD *)(v0 + 216);
  v19 = *(_QWORD *)(v0 + 224);
  v20 = *(_QWORD *)(v0 + 200);
  v22 = *(_QWORD *)(v0 + 168);
  v21 = *(_QWORD *)(v0 + 176);
  v24 = *(_QWORD *)(v0 + 152);
  v23 = *(_QWORD *)(v0 + 160);
  v26 = *(_QWORD *)(v0 + 136);
  v25 = *(_QWORD *)(v0 + 144);
  v28 = *(_QWORD *)(v0 + 112);
  v29 = *(_QWORD *)(v0 + 104);
  v30 = *(_QWORD *)(v0 + 88);
  swift_task_dealloc(*(_QWORD *)(v0 + 248));
  swift_task_dealloc(v19);
  swift_task_dealloc(v18);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100B4E6D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  swift_release();
  v1 = *(_QWORD *)(v0 + 400);
  if (qword_1010EA220 != -1)
    swift_once(&qword_1010EA220, sub_100B4B8A8);
  v2 = type metadata accessor for Logger(0);
  sub_10001A9E8(v2, (uint64_t)qword_1011B7CE0);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v6 = 138543362;
    v8 = _convertErrorToNSError(_:)(v1);
    *(_QWORD *)(v0 + 16) = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v6 + 4, v6 + 12);
    *v7 = v8;
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Error during scan: %{public}@", v6, 0xCu);
    v9 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v7, 1, v9);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);

    swift_errorRelease(v1);
  }
  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);

  }
  v10 = *(_QWORD *)(v0 + 216);
  v11 = *(_QWORD *)(v0 + 224);
  v12 = *(_QWORD *)(v0 + 200);
  v14 = *(_QWORD *)(v0 + 168);
  v13 = *(_QWORD *)(v0 + 176);
  v16 = *(_QWORD *)(v0 + 152);
  v15 = *(_QWORD *)(v0 + 160);
  v18 = *(_QWORD *)(v0 + 136);
  v17 = *(_QWORD *)(v0 + 144);
  v20 = *(_QWORD *)(v0 + 112);
  v21 = *(_QWORD *)(v0 + 104);
  v22 = *(_QWORD *)(v0 + 88);
  swift_task_dealloc(*(_QWORD *)(v0 + 248));
  swift_task_dealloc(v11);
  swift_task_dealloc(v10);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100B4E918(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v4[8] = a3;
  v4[9] = v3;
  v4[6] = a1;
  v4[7] = a2;
  v4[10] = *v3;
  v5 = sub_10001A9A8(&qword_101115E60);
  v4[11] = v5;
  v6 = (*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[12] = swift_task_alloc(v6);
  v4[13] = swift_task_alloc(v6);
  v4[14] = swift_task_alloc(v6);
  v7 = sub_10001A9A8(&qword_1010EF1A8);
  v4[15] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A9A8(&qword_1010EF7C0);
  v4[16] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v4[17] = v9;
  v4[18] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for BeaconScanner.AISLookupState(0);
  v4[19] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v4[20] = v11;
  v12 = (*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[21] = swift_task_alloc(v12);
  v4[22] = swift_task_alloc(v12);
  v13 = type metadata accessor for Peripheral(0);
  v14 = sub_100006C64(&qword_10110F938, 255, (uint64_t (*)(uint64_t))&type metadata accessor for Peripheral, (uint64_t)&protocol conformance descriptor for Peripheral);
  v15 = dispatch thunk of Actor.unownedExecutor.getter(v13, v14);
  return swift_task_switch(sub_100B4EA78, v15, v16);
}

uint64_t sub_100B4EA78()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 72);
  *(_BYTE *)(v0 + 240) = Peripheral.isConnectable.getter() & 1;
  return swift_task_switch(sub_100B4EAC0, v1, 0);
}

uint64_t sub_100B4EAC0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  __n128 v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v29)(uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v44;
  uint64_t v45;
  NSObject *v46;
  os_log_type_t v47;
  uint8_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  __int128 v54;

  if (*(_BYTE *)(v1 + 240) != 1)
  {
    if (qword_1010EA220 != -1)
      swift_once(&qword_1010EA220, sub_100B4B8A8);
    v11 = type metadata accessor for Logger(0);
    v12 = sub_10001A9E8(v11, (uint64_t)qword_1011B7CE0);
    v13 = Logger.logObject.getter(v12);
    v14 = static os_log_type_t.error.getter(v13);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Skipping metadata read since not connectable", v15, 2u);
      swift_slowDealloc(v15, -1, -1);
    }
    v16 = *(_QWORD *)(v1 + 48);

    v17 = type metadata accessor for AccessoryMetadata(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v16, 1, 1, v17);
    goto LABEL_17;
  }
  v2 = *(_QWORD *)(v1 + 72);
  Peripheral.id.getter(a1);
  v3 = swift_beginAccess(v2 + 144, v1 + 16, 0, 0);
  v4 = *(_QWORD *)(v2 + 144);
  if (*(_QWORD *)(v4 + 16))
  {
    v5 = *(_QWORD *)(v1 + 144);
    swift_bridgeObjectRetain(*(_QWORD *)(v2 + 144));
    v6 = sub_100519C70(v5);
    v7 = *(_QWORD *)(v1 + 152);
    v8 = *(_QWORD *)(v1 + 160);
    v9 = *(_QWORD *)(v1 + 120);
    if ((v10 & 1) != 0)
    {
      sub_10005972C(*(_QWORD *)(v4 + 56) + *(_QWORD *)(v8 + 72) * v6, *(_QWORD *)(v1 + 120), type metadata accessor for BeaconScanner.AISLookupState);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v8 + 56))(v9, 0, 1, v7);
    }
    else
    {
      (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(v8 + 56))(*(_QWORD *)(v1 + 120), 1, 1, v7);
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD, __n128))(*(_QWORD *)(v1 + 160) + 56))(*(_QWORD *)(v1 + 120), 1, 1, *(_QWORD *)(v1 + 152), v3);
  }
  v18 = *(_QWORD *)(v1 + 152);
  v19 = *(_QWORD *)(v1 + 160);
  v20 = *(_QWORD *)(v1 + 120);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v1 + 136) + 8))(*(_QWORD *)(v1 + 144), *(_QWORD *)(v1 + 128));
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v19 + 48))(v20, 1, v18) != 1)
  {
    v32 = *(_QWORD *)(v1 + 168);
    v33 = *(_QWORD *)(v1 + 176);
    v34 = *(_QWORD *)(v1 + 152);
    sub_1000126EC(*(_QWORD *)(v1 + 120), v33, type metadata accessor for BeaconScanner.AISLookupState);
    sub_10005972C(v33, v32, type metadata accessor for BeaconScanner.AISLookupState);
    if (swift_getEnumCaseMultiPayload(v32, v34) != 1)
    {
      swift_bridgeObjectRelease();
      if (qword_1010EA220 != -1)
        swift_once(&qword_1010EA220, sub_100B4B8A8);
      v44 = type metadata accessor for Logger(0);
      v45 = sub_10001A9E8(v44, (uint64_t)qword_1011B7CE0);
      *(_QWORD *)(v1 + 184) = v45;
      v46 = Logger.logObject.getter(v45);
      v47 = static os_log_type_t.debug.getter(v46);
      if (os_log_type_enabled(v46, v47))
      {
        v48 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v48 = 0;
        _os_log_impl((void *)&_mh_execute_header, v46, v47, "Already pending -- waiting for continuation", v48, 2u);
        swift_slowDealloc(v48, -1, -1);
      }
      v49 = *(_QWORD *)(v1 + 72);
      v50 = *(_QWORD *)(v1 + 56);

      v52 = sub_100006C64(&qword_101115F78, v51, (uint64_t (*)(uint64_t))type metadata accessor for BeaconScanner, (uint64_t)&unk_100E61540);
      v25 = (_QWORD *)swift_task_alloc(32);
      *(_QWORD *)(v1 + 192) = v25;
      v25[2] = v49;
      v25[3] = v50;
      v53 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
      *(_QWORD *)(v1 + 200) = v53;
      *v53 = v1;
      v53[1] = sub_100B4EFA4;
      v28 = *(_QWORD *)(v1 + 112);
      v27 = *(_QWORD *)(v1 + 88);
      v29 = sub_100B565C8;
      v30 = v49;
      v31 = v52;
      return withCheckedThrowingContinuation<A>(isolation:function:_:)(v28, v30, v31, 0xD000000000000028, 0x8000000100EEF7F0, v29, v25, v27);
    }
    v35 = *(_QWORD *)(v1 + 168);
    v36 = *(_QWORD *)(v1 + 48);
    sub_1000126B0(*(_QWORD *)(v1 + 176), type metadata accessor for BeaconScanner.AISLookupState);
    sub_100005CF0(v35, v36, &qword_101115E60);
LABEL_17:
    v37 = *(_QWORD *)(v1 + 168);
    v38 = *(_QWORD *)(v1 + 144);
    v40 = *(_QWORD *)(v1 + 112);
    v39 = *(_QWORD *)(v1 + 120);
    v42 = *(_QWORD *)(v1 + 96);
    v41 = *(_QWORD *)(v1 + 104);
    swift_task_dealloc(*(_QWORD *)(v1 + 176));
    swift_task_dealloc(v37);
    swift_task_dealloc(v38);
    swift_task_dealloc(v39);
    swift_task_dealloc(v40);
    swift_task_dealloc(v41);
    swift_task_dealloc(v42);
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
  v21 = *(_QWORD *)(v1 + 72);
  v22 = *(_QWORD *)(v1 + 80);
  v54 = *(_OWORD *)(v1 + 56);
  sub_100004048(*(_QWORD *)(v1 + 120), &qword_1010EF1A8);
  v24 = sub_100006C64(&qword_101115F78, v23, (uint64_t (*)(uint64_t))type metadata accessor for BeaconScanner, (uint64_t)&unk_100E61540);
  v25 = (_QWORD *)swift_task_alloc(48);
  *(_QWORD *)(v1 + 216) = v25;
  v25[2] = v21;
  *(_OWORD *)(v25 + 3) = v54;
  v25[5] = v22;
  v26 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v1 + 224) = v26;
  *v26 = v1;
  v26[1] = sub_100B4F238;
  v27 = *(_QWORD *)(v1 + 88);
  v28 = *(_QWORD *)(v1 + 48);
  v29 = sub_100B565BC;
  v30 = v21;
  v31 = v24;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v28, v30, v31, 0xD000000000000028, 0x8000000100EEF7F0, v29, v25, v27);
}

uint64_t sub_100B4EFA4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  v2 = *v1;
  v4 = *(_QWORD *)(*v1 + 192);
  v3 = *(_QWORD *)(*v1 + 200);
  *(_QWORD *)(*v1 + 208) = v0;
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  if (v0)
    v5 = sub_100B4F30C;
  else
    v5 = sub_100B4F018;
  return swift_task_switch(v5, *(_QWORD *)(v2 + 72), 0);
}

uint64_t sub_100B4F018()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;

  v1 = sub_10000F9B8(*(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 104), &qword_101115E60);
  v2 = Logger.logObject.getter(v1);
  v3 = static os_log_type_t.debug.getter(v2);
  if (os_log_type_enabled(v2, v3))
  {
    v21 = *(_QWORD *)(v0 + 176);
    v5 = *(_QWORD *)(v0 + 96);
    v4 = *(_QWORD *)(v0 + 104);
    v6 = *(_QWORD *)(v0 + 88);
    v7 = (uint8_t *)swift_slowAlloc(12, -1);
    v8 = swift_slowAlloc(32, -1);
    v22 = v8;
    *(_DWORD *)v7 = 136315138;
    sub_10000F9B8(v4, v5, &qword_101115E60);
    v9 = String.init<A>(describing:)(v5, v6);
    *(_QWORD *)(v0 + 40) = sub_100016940(v9, v10, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v7 + 4, v7 + 12);
    swift_bridgeObjectRelease();
    sub_100004048(v4, &qword_101115E60);
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Continuation for pending resumed -- %s", v7, 0xCu);
    swift_arrayDestroy(v8, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v7, -1, -1);

    v11 = v21;
  }
  else
  {
    v12 = *(_QWORD *)(v0 + 176);
    v13 = *(_QWORD *)(v0 + 104);

    sub_100004048(v13, &qword_101115E60);
    v11 = v12;
  }
  sub_1000126B0(v11, type metadata accessor for BeaconScanner.AISLookupState);
  sub_100005CF0(*(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 48), &qword_101115E60);
  v14 = *(_QWORD *)(v0 + 168);
  v15 = *(_QWORD *)(v0 + 144);
  v17 = *(_QWORD *)(v0 + 112);
  v16 = *(_QWORD *)(v0 + 120);
  v19 = *(_QWORD *)(v0 + 96);
  v18 = *(_QWORD *)(v0 + 104);
  swift_task_dealloc(*(_QWORD *)(v0 + 176));
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100B4F238()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(_QWORD *)(*v1 + 224);
  v3 = *v1;
  *(_QWORD *)(v3 + 232) = v0;
  swift_task_dealloc(v2);
  if (v0)
    return swift_task_switch(sub_100B4F3A4, *(_QWORD *)(v3 + 72), 0);
  swift_task_dealloc(*(_QWORD *)(v3 + 216));
  v5 = *(_QWORD *)(v3 + 168);
  v6 = *(_QWORD *)(v3 + 144);
  v8 = *(_QWORD *)(v3 + 112);
  v7 = *(_QWORD *)(v3 + 120);
  v10 = *(_QWORD *)(v3 + 96);
  v9 = *(_QWORD *)(v3 + 104);
  swift_task_dealloc(*(_QWORD *)(v3 + 176));
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_100B4F30C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_1000126B0(*(_QWORD *)(v0 + 176), type metadata accessor for BeaconScanner.AISLookupState);
  v1 = *(_QWORD *)(v0 + 168);
  v2 = *(_QWORD *)(v0 + 144);
  v4 = *(_QWORD *)(v0 + 112);
  v3 = *(_QWORD *)(v0 + 120);
  v6 = *(_QWORD *)(v0 + 96);
  v5 = *(_QWORD *)(v0 + 104);
  swift_task_dealloc(*(_QWORD *)(v0 + 176));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100B4F3A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  swift_task_dealloc(*(_QWORD *)(v0 + 216));
  v1 = *(_QWORD *)(v0 + 168);
  v2 = *(_QWORD *)(v0 + 144);
  v4 = *(_QWORD *)(v0 + 112);
  v3 = *(_QWORD *)(v0 + 120);
  v6 = *(_QWORD *)(v0 + 96);
  v5 = *(_QWORD *)(v0 + 104);
  swift_task_dealloc(*(_QWORD *)(v0 + 176));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100B4F434(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 120) = a2;
  return swift_task_switch(sub_100B4F44C, 0, 0);
}

uint64_t sub_100B4F44C()
{
  _QWORD *v0;
  _QWORD *v1;
  void *v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = v0 + 2;
  v2 = (void *)v0[15];
  v0[2] = v0;
  v0[3] = sub_100B4F4DC;
  v3 = swift_continuation_init(v0 + 2, 0);
  v0[10] = _NSConcreteStackBlock;
  v4 = v0 + 10;
  v4[1] = 0x40000000;
  v4[2] = sub_100B4F528;
  v4[3] = &unk_1010AED10;
  v4[4] = v3;
  objc_msgSend(v2, "discoveryFinished:completion:", 0, v4);
  return swift_continuation_await(v1);
}

uint64_t sub_100B4F4DC()
{
  return swift_task_switch(sub_10055AA5C, 0, 0);
}

uint64_t sub_100B4F528(uint64_t a1)
{
  return swift_continuation_resume(*(_QWORD *)(a1 + 32));
}

uint64_t sub_100B4F530()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;

  v1 = v0;
  if (qword_1010EA220 != -1)
    swift_once(&qword_1010EA220, sub_100B4B8A8);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_10001A9E8(v2, (uint64_t)qword_1011B7CE0);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Invalidating scanTask because client session was invalidated", v6, 2u);
    swift_slowDealloc(v6, -1, -1);
  }

  if (*(_QWORD *)(v1 + 152))
  {
    swift_retain();
    sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
    Task.cancel()();
    swift_release();
  }
  *(_QWORD *)(v1 + 152) = 0;
  return swift_release();
}

id sub_100B4F654(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  id v16;
  Class isa;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v22;
  uint64_t v23;

  v3 = sub_10001A9A8((uint64_t *)&unk_101115FA0);
  __chkstk_darwin(v3);
  v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for BeaconDetails(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DetailedDiscoveredObject(0);
  sub_10000F9B8(a1 + *(int *)(v10 + 20), (uint64_t)v5, (uint64_t *)&unk_101115FA0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    sub_1000126B0(a1, type metadata accessor for DetailedDiscoveredObject);
    sub_100004048((uint64_t)v5, (uint64_t *)&unk_101115FA0);
    return 0;
  }
  sub_1000126EC((uint64_t)v5, (uint64_t)v9, type metadata accessor for BeaconDetails);
  v11 = &v9[*(int *)(type metadata accessor for BeaconKeyManager.IndexInformation(0) + 20)];
  v12 = *((_QWORD *)v11 + 3);
  v13 = *((_QWORD *)v11 + 4);
  sub_10001AA44(v11, v12);
  v14 = sub_100ABA6B0(v12, v13);
  if (v14)
  {
    if (v14 != 1)
    {
      sub_1000126B0(a1, type metadata accessor for DetailedDiscoveredObject);
      sub_1000126B0((uint64_t)v9, type metadata accessor for BeaconDetails);
      return 0;
    }
    v15 = 2;
  }
  else
  {
    v15 = 1;
  }
  v16 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v1));
  isa = UUID._bridgeToObjectiveC()().super.isa;
  v19 = *((_QWORD *)v11 + 3);
  v18 = *((_QWORD *)v11 + 4);
  sub_10001AA44(v11, v19);
  dispatch thunk of RawRepresentable.rawValue.getter(&v23, v19, *(_QWORD *)(v18 + 56));
  v20 = objc_msgSend(v16, "initWithBeaconIdentifier:sequence:index:", isa, v15, v23);

  sub_1000126B0(a1, type metadata accessor for DetailedDiscoveredObject);
  sub_1000126B0((uint64_t)v9, type metadata accessor for BeaconDetails);
  return v20;
}

id sub_100B4F86C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  id v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  Class isa;
  NSString v16;
  NSString v17;
  NSString v18;
  char v19;
  Class v20;
  NSString v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  int v26;
  int v27;
  uint64_t v28;
  char v29;
  char v30;
  id v31;
  Class v32;
  Class v33;
  void *v34;
  uint64_t v36;
  NSString v37;
  uint64_t v38;

  v3 = sub_10001A9A8(&qword_101115E60);
  __chkstk_darwin(v3);
  v5 = (char *)&v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = (int *)type metadata accessor for AccessoryMetadata(0);
  v7 = *((_QWORD *)v6 - 1);
  __chkstk_darwin(v6);
  v9 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DetailedDiscoveredObject(0);
  sub_10000F9B8(a1 + *(int *)(v10 + 24), (uint64_t)v5, &qword_101115E60);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v7 + 48))(v5, 1, v6) == 1)
  {
    sub_1000126B0(a1, type metadata accessor for DetailedDiscoveredObject);
    sub_100004048((uint64_t)v5, &qword_101115E60);
    return 0;
  }
  else
  {
    sub_1000126EC((uint64_t)v5, (uint64_t)v9, type metadata accessor for AccessoryMetadata);
    v12 = (uint64_t *)&v9[v6[5]];
    v13 = *v12;
    v14 = v12[1];
    sub_10001BBBC(*v12, v14);
    isa = Data._bridgeToObjectiveC()().super.isa;
    sub_10001BC14(v13, v14);
    swift_bridgeObjectRetain(*(_QWORD *)&v9[v6[6] + 8]);
    v16 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain(*(_QWORD *)&v9[v6[7] + 8]);
    v17 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    sub_10072CDE0();
    v18 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    v19 = v9[v6[9] + 4];
    v37 = v16;
    v38 = a1;
    v20 = isa;
    if ((v19 & 1) == 0)
      sub_10072CDE0();
    v21 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    v22 = v6[12];
    v23 = &v9[v6[11]];
    if (v23[8])
      v24 = 0;
    else
      v24 = *(_QWORD *)v23;
    v25 = &v9[v22];
    v26 = *(_DWORD *)&v9[v22];
    if (v25[4])
      v27 = 0;
    else
      v27 = v26;
    v28 = v6[14];
    if (v9[v6[13]] == 4)
      v29 = 0;
    else
      v29 = v9[v6[13]];
    if (v9[v28] == 5)
      v30 = 0;
    else
      v30 = v9[v28];
    v31 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v1));
    BYTE5(v36) = v30;
    BYTE4(v36) = v29;
    LODWORD(v36) = v27;
    v32 = v20;
    v33 = v20;
    v34 = v37;
    v11 = objc_msgSend(v31, "initWithProductData:manufacturerName:modelName:firmwareVersion:protocolVersion:accessoryCategory:accessoryCapabilities:batteryType:batteryState:", v33, v37, v17, v18, v21, v24, v36);

    sub_1000126B0(v38, type metadata accessor for DetailedDiscoveredObject);
    sub_1000126B0((uint64_t)v9, type metadata accessor for AccessoryMetadata);
  }
  return v11;
}

uint64_t sub_100B4FB80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v4[5] = a3;
  v4[6] = v3;
  v4[3] = a1;
  v4[4] = a2;
  v5 = sub_10001A9A8(&qword_1011091A0);
  v4[7] = v5;
  v6 = (*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[8] = swift_task_alloc(v6);
  v4[9] = swift_task_alloc(v6);
  v4[10] = swift_task_alloc(v6);
  v4[11] = swift_task_alloc(v6);
  v4[12] = swift_task_alloc(v6);
  v7 = type metadata accessor for BeaconKeyManager.IndexInformation(0);
  v4[13] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v4[14] = v8;
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[15] = swift_task_alloc(v9);
  v4[16] = swift_task_alloc(v9);
  v4[17] = swift_task_alloc(v9);
  return swift_task_switch(sub_100B4FC5C, 0, 0);
}

uint64_t sub_100B4FC5C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 48) + 112);
  *(_QWORD *)(v0 + 144) = v1;
  return swift_task_switch(sub_100B4FC78, v1, 0);
}

uint64_t sub_100B4FC78()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 144) + 136);
  *(_QWORD *)(v0 + 152) = v1;
  if (v1)
    return swift_task_switch(sub_100B4FC9C, v1, 0);
  __break(1u);
  return result;
}

uint64_t sub_100B4FC9C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;

  v1 = v0[19];
  v3 = v0[4];
  v2 = v0[5];
  v4 = sub_10001A9A8((uint64_t *)&unk_101115F20);
  v5 = sub_100006C64(&qword_101103E00, 255, type metadata accessor for BeaconKeyServiceBuilder, (uint64_t)&unk_100E46668);
  v6 = (_QWORD *)swift_task_alloc(48);
  v0[20] = v6;
  v6[2] = v1;
  v6[3] = v3;
  v6[4] = v2;
  v7 = (_QWORD *)swift_task_alloc(async function pointer to withTaskGroup<A, B>(of:returning:isolation:body:)[1]);
  v0[21] = v7;
  *v7 = v0;
  v7[1] = sub_100B4FD80;
  return withTaskGroup<A, B>(of:returning:isolation:body:)(v0 + 2, v0[7], v4, v0[19], v5, &unk_101115F30, v6, v0[7]);
}

uint64_t sub_100B4FD80()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 160);
  swift_task_dealloc(*(_QWORD *)(*v0 + 168));
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100B4FDD8, *(_QWORD *)(v1 + 152), 0);
}

uint64_t sub_100B4FDD8()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 176) = *(_QWORD *)(v0 + 16);
  return swift_task_switch(sub_100B4FDF4, 0, 0);
}

uint64_t sub_100B4FDF4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)@<X0>(uint64_t@<X8>);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  _QWORD *v32;

  v1 = *(_QWORD *)(v0 + 176);
  if (*(_QWORD *)(v1 + 16))
  {
    v2 = *(unsigned __int8 *)(*(_QWORD *)(v0 + 112) + 80);
    sub_10005972C(v1 + ((v2 + 32) & ~v2), *(_QWORD *)(v0 + 96), type metadata accessor for BeaconKeyManager.IndexInformation);
    v3 = 0;
  }
  else
  {
    v3 = 1;
  }
  v4 = *(_QWORD *)(v0 + 104);
  v5 = *(_QWORD *)(v0 + 112);
  v6 = *(_QWORD *)(v0 + 96);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 56))(v6, v3, 1, v4);
  swift_bridgeObjectRelease();
  v7 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  *(_QWORD *)(v0 + 184) = v7;
  if (v7(v6, 1, v4) == 1)
  {
    v8 = *(_QWORD *)(v0 + 40);
    sub_100004048(*(_QWORD *)(v0 + 96), &qword_1011091A0);
    v9 = *(_QWORD *)(v0 + 40);
    v10 = *(_QWORD *)(v0 + 48);
    v11 = *(_QWORD *)(v0 + 32);
    if ((v8 & 0x2000000000000000) != 0)
    {
      v12 = (_QWORD *)swift_allocObject(&unk_1010AEC08, 40, 7);
      *(_QWORD *)(v0 + 192) = v12;
      v12[2] = v10;
      v12[3] = v11;
      v12[4] = v9 & 0xDFFFFFFFFFFFFFFFLL;
      sub_10012C644(v11, v9);
      sub_10012C644(v11, v9);
      v31 = async function pointer to unsafeBlocking<A>(_:)[1];
      swift_retain();
      v32 = (_QWORD *)swift_task_alloc(v31);
      *(_QWORD *)(v0 + 200) = v32;
      *v32 = v0;
      v32[1] = sub_100B500B8;
      v15 = *(_QWORD *)(v0 + 72);
      v16 = *(_QWORD *)(v0 + 56);
      v17 = sub_100B51138;
    }
    else
    {
      v12 = (_QWORD *)swift_allocObject(&unk_1010AEC30, 40, 7);
      *(_QWORD *)(v0 + 208) = v12;
      v12[2] = v10;
      v12[3] = v11;
      v12[4] = v9;
      sub_10012C644(v11, v9);
      sub_10012C644(v11, v9);
      v13 = async function pointer to unsafeBlocking<A>(_:)[1];
      swift_retain();
      v14 = (_QWORD *)swift_task_alloc(v13);
      *(_QWORD *)(v0 + 216) = v14;
      *v14 = v0;
      v14[1] = sub_100B5026C;
      v15 = *(_QWORD *)(v0 + 88);
      v16 = *(_QWORD *)(v0 + 56);
      v17 = sub_100B51148;
    }
    return unsafeBlocking<A>(_:)(v15, v17, v12, v16);
  }
  else
  {
    v18 = *(_QWORD *)(v0 + 136);
    v19 = *(_QWORD *)(v0 + 24);
    sub_1000126EC(*(_QWORD *)(v0 + 96), v18, type metadata accessor for BeaconKeyManager.IndexInformation);
    sub_1000126EC(v18, v19, type metadata accessor for BeaconKeyManager.IndexInformation);
    v20 = *(_QWORD *)(v0 + 128);
    v21 = *(_QWORD *)(v0 + 136);
    v22 = *(_QWORD *)(v0 + 120);
    v24 = *(_QWORD *)(v0 + 88);
    v23 = *(_QWORD *)(v0 + 96);
    v26 = *(_QWORD *)(v0 + 72);
    v25 = *(_QWORD *)(v0 + 80);
    v27 = *(_QWORD *)(v0 + 64);
    v28 = *(_QWORD *)(v0 + 24);
    v29 = type metadata accessor for BeaconDetails(0);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v28, 0, 1, v29);
    swift_task_dealloc(v21);
    swift_task_dealloc(v20);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100B500B8()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 200));
  swift_release();
  return swift_task_switch(sub_100B50114, 0, 0);
}

uint64_t sub_100B50114()
{
  uint64_t v0;
  unsigned int (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  v1 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 184);
  v2 = *(_QWORD *)(v0 + 104);
  v4 = *(_QWORD *)(v0 + 64);
  v3 = *(_QWORD *)(v0 + 72);
  sub_10012C494(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
  sub_100005CF0(v3, v4, &qword_1011091A0);
  if (v1(v4, 1, v2) == 1)
  {
    sub_100004048(*(_QWORD *)(v0 + 64), &qword_1011091A0);
    v5 = 1;
  }
  else
  {
    v6 = *(_QWORD *)(v0 + 120);
    v7 = *(_QWORD *)(v0 + 24);
    sub_1000126EC(*(_QWORD *)(v0 + 64), v6, type metadata accessor for BeaconKeyManager.IndexInformation);
    sub_1000126EC(v6, v7, type metadata accessor for BeaconKeyManager.IndexInformation);
    v5 = 0;
  }
  v9 = *(_QWORD *)(v0 + 128);
  v8 = *(_QWORD *)(v0 + 136);
  v10 = *(_QWORD *)(v0 + 120);
  v12 = *(_QWORD *)(v0 + 88);
  v11 = *(_QWORD *)(v0 + 96);
  v14 = *(_QWORD *)(v0 + 72);
  v13 = *(_QWORD *)(v0 + 80);
  v18 = *(_QWORD *)(v0 + 64);
  v15 = *(_QWORD *)(v0 + 24);
  v16 = type metadata accessor for BeaconDetails(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v15, v5, 1, v16);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v18);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100B5026C()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 216));
  swift_release();
  return swift_task_switch(sub_100B502C8, 0, 0);
}

uint64_t sub_100B502C8()
{
  uint64_t v0;
  unsigned int (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  v1 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 184);
  v2 = *(_QWORD *)(v0 + 104);
  v4 = *(_QWORD *)(v0 + 80);
  v3 = *(_QWORD *)(v0 + 88);
  sub_10012C494(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
  sub_100005CF0(v3, v4, &qword_1011091A0);
  if (v1(v4, 1, v2) == 1)
  {
    sub_100004048(*(_QWORD *)(v0 + 80), &qword_1011091A0);
    v5 = 1;
  }
  else
  {
    v6 = *(_QWORD *)(v0 + 128);
    v7 = *(_QWORD *)(v0 + 24);
    sub_1000126EC(*(_QWORD *)(v0 + 80), v6, type metadata accessor for BeaconKeyManager.IndexInformation);
    sub_1000126EC(v6, v7, type metadata accessor for BeaconKeyManager.IndexInformation);
    v5 = 0;
  }
  v9 = *(_QWORD *)(v0 + 128);
  v8 = *(_QWORD *)(v0 + 136);
  v10 = *(_QWORD *)(v0 + 120);
  v12 = *(_QWORD *)(v0 + 88);
  v11 = *(_QWORD *)(v0 + 96);
  v14 = *(_QWORD *)(v0 + 72);
  v13 = *(_QWORD *)(v0 + 80);
  v18 = *(_QWORD *)(v0 + 64);
  v15 = *(_QWORD *)(v0 + 24);
  v16 = type metadata accessor for BeaconDetails(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v15, v5, 1, v16);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v18);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100B50420@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[7];
  uint64_t v13;

  v12[2] = *(_QWORD *)(a1 + 120);
  v12[3] = a2;
  v12[4] = a3;
  v5 = sub_10001A9A8((uint64_t *)&unk_101115F20);
  OS_dispatch_queue.sync<A>(execute:)(sub_1006ADC3C, v12, v5);
  v6 = v13;
  v7 = *(_QWORD *)(v13 + 16);
  v8 = type metadata accessor for BeaconKeyManager.IndexInformation(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (v7)
  {
    sub_10005972C(v6 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80)), a4, type metadata accessor for BeaconKeyManager.IndexInformation);
    v10 = 0;
  }
  else
  {
    v10 = 1;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a4, v10, 1, v8);
  return swift_bridgeObjectRelease();
}

uint64_t sub_100B504F0()
{
  _QWORD *v0;

  swift_release(v0[14]);
  swift_release(v0[15]);
  swift_release(v0[16]);
  swift_release(v0[17]);
  swift_bridgeObjectRelease(v0[18]);
  swift_release(v0[19]);
  swift_defaultActor_destroy(v0);
  return swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for BeaconScanner()
{
  return objc_opt_self(_TtC12searchpartyd13BeaconScanner);
}

uint64_t *sub_100B5055C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  void (*v45)(uint64_t *, _QWORD, uint64_t, int *, __n128);
  __n128 v46;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
    {
      v7 = (int *)type metadata accessor for AccessoryMetadata(0);
      v8 = *((_QWORD *)v7 - 1);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, int *))(v8 + 48))(a2, 1, v7))
      {
        v9 = sub_10001A9A8(&qword_101115E60);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
      }
      else
      {
        v15 = type metadata accessor for UUID(0);
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(a1, a2, v15);
        v16 = v7[5];
        v17 = (uint64_t *)((char *)a1 + v16);
        v18 = (uint64_t *)((char *)a2 + v16);
        v19 = *v18;
        v20 = v18[1];
        sub_10001BBBC(*v18, v20);
        *v17 = v19;
        v17[1] = v20;
        v21 = v7[6];
        v22 = (uint64_t *)((char *)a1 + v21);
        v23 = (uint64_t *)((char *)a2 + v21);
        v24 = v23[1];
        *v22 = *v23;
        v22[1] = v24;
        v25 = v7[7];
        v26 = (uint64_t *)((char *)a1 + v25);
        v27 = (uint64_t *)((char *)a2 + v25);
        v28 = v27[1];
        *v26 = *v27;
        v26[1] = v28;
        *(_DWORD *)((char *)a1 + v7[8]) = *(_DWORD *)((char *)a2 + v7[8]);
        v29 = v7[9];
        v30 = (char *)a1 + v29;
        v31 = (char *)a2 + v29;
        *(_DWORD *)v30 = *(_DWORD *)v31;
        v30[4] = v31[4];
        v32 = v7[10];
        v33 = (char *)a1 + v32;
        v34 = (char *)a2 + v32;
        *(_OWORD *)v33 = *(_OWORD *)v34;
        v33[16] = v34[16];
        v35 = v7[11];
        v36 = (char *)a1 + v35;
        v37 = (char *)a2 + v35;
        v36[8] = v37[8];
        *(_QWORD *)v36 = *(_QWORD *)v37;
        v38 = v7[12];
        v39 = (char *)a1 + v38;
        v40 = (char *)a2 + v38;
        *(_DWORD *)v39 = *(_DWORD *)v40;
        v39[4] = v40[4];
        *((_BYTE *)a1 + v7[13]) = *((_BYTE *)a2 + v7[13]);
        *((_BYTE *)a1 + v7[14]) = *((_BYTE *)a2 + v7[14]);
        v41 = v7[15];
        v42 = (uint64_t *)((char *)a1 + v41);
        v43 = (uint64_t *)((char *)a2 + v41);
        v44 = v43[1];
        *v42 = *v43;
        v42[1] = v44;
        v45 = *(void (**)(uint64_t *, _QWORD, uint64_t, int *, __n128))(v8 + 56);
        swift_bridgeObjectRetain(v24);
        swift_bridgeObjectRetain(v28);
        v46 = swift_bridgeObjectRetain(v44);
        v45(a1, 0, 1, v7, v46);
      }
      v12 = a1;
      v13 = a3;
      v14 = 1;
    }
    else
    {
      v11 = *a2;
      *a1 = *a2;
      swift_bridgeObjectRetain(v11);
      v12 = a1;
      v13 = a3;
      v14 = 0;
    }
    swift_storeEnumTagMultiPayload(v12, v13, v14);
  }
  return a1;
}

uint64_t sub_100B50790(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  if (swift_getEnumCaseMultiPayload(a1, a2) == 1)
  {
    v3 = type metadata accessor for AccessoryMetadata(0);
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 48))(a1, 1, v3);
    if ((_DWORD)result)
      return result;
    v5 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
    sub_10001BC14(*(_QWORD *)(a1 + *(int *)(v3 + 20)), *(_QWORD *)(a1 + *(int *)(v3 + 20) + 8));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

uint64_t *sub_100B50848(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  void (*v43)(uint64_t *, _QWORD, uint64_t, int *, __n128);
  __n128 v44;

  if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
  {
    v6 = (int *)type metadata accessor for AccessoryMetadata(0);
    v7 = *((_QWORD *)v6 - 1);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, int *))(v7 + 48))(a2, 1, v6))
    {
      v8 = sub_10001A9A8(&qword_101115E60);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
    }
    else
    {
      v13 = type metadata accessor for UUID(0);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(a1, a2, v13);
      v14 = v6[5];
      v15 = (uint64_t *)((char *)a1 + v14);
      v16 = (uint64_t *)((char *)a2 + v14);
      v17 = *v16;
      v18 = v16[1];
      sub_10001BBBC(*v16, v18);
      *v15 = v17;
      v15[1] = v18;
      v19 = v6[6];
      v20 = (uint64_t *)((char *)a1 + v19);
      v21 = (uint64_t *)((char *)a2 + v19);
      v22 = v21[1];
      *v20 = *v21;
      v20[1] = v22;
      v23 = v6[7];
      v24 = (uint64_t *)((char *)a1 + v23);
      v25 = (uint64_t *)((char *)a2 + v23);
      v26 = v25[1];
      *v24 = *v25;
      v24[1] = v26;
      *(_DWORD *)((char *)a1 + v6[8]) = *(_DWORD *)((char *)a2 + v6[8]);
      v27 = v6[9];
      v28 = (char *)a1 + v27;
      v29 = (char *)a2 + v27;
      *(_DWORD *)v28 = *(_DWORD *)v29;
      v28[4] = v29[4];
      v30 = v6[10];
      v31 = (char *)a1 + v30;
      v32 = (char *)a2 + v30;
      *(_OWORD *)v31 = *(_OWORD *)v32;
      v31[16] = v32[16];
      v33 = v6[11];
      v34 = (char *)a1 + v33;
      v35 = (char *)a2 + v33;
      v34[8] = v35[8];
      *(_QWORD *)v34 = *(_QWORD *)v35;
      v36 = v6[12];
      v37 = (char *)a1 + v36;
      v38 = (char *)a2 + v36;
      *(_DWORD *)v37 = *(_DWORD *)v38;
      v37[4] = v38[4];
      *((_BYTE *)a1 + v6[13]) = *((_BYTE *)a2 + v6[13]);
      *((_BYTE *)a1 + v6[14]) = *((_BYTE *)a2 + v6[14]);
      v39 = v6[15];
      v40 = (uint64_t *)((char *)a1 + v39);
      v41 = (uint64_t *)((char *)a2 + v39);
      v42 = v41[1];
      *v40 = *v41;
      v40[1] = v42;
      v43 = *(void (**)(uint64_t *, _QWORD, uint64_t, int *, __n128))(v7 + 56);
      swift_bridgeObjectRetain(v22);
      swift_bridgeObjectRetain(v26);
      v44 = swift_bridgeObjectRetain(v42);
      v43(a1, 0, 1, v6, v44);
    }
    v10 = a1;
    v11 = a3;
    v12 = 1;
  }
  else
  {
    v9 = *a2;
    *a1 = *a2;
    swift_bridgeObjectRetain(v9);
    v10 = a1;
    v11 = a3;
    v12 = 0;
  }
  swift_storeEnumTagMultiPayload(v10, v11, v12);
  return a1;
}

uint64_t *sub_100B50A50(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  int v30;
  uint64_t v31;
  char *v32;
  char *v33;
  __int128 v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  void (*v46)(uint64_t *, _QWORD, uint64_t, int *, __n128);
  __n128 v47;

  if (a1 != a2)
  {
    sub_1000126B0((uint64_t)a1, type metadata accessor for BeaconScanner.AISLookupState);
    if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
    {
      v6 = (int *)type metadata accessor for AccessoryMetadata(0);
      v7 = *((_QWORD *)v6 - 1);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, int *))(v7 + 48))(a2, 1, v6))
      {
        v8 = sub_10001A9A8(&qword_101115E60);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
      }
      else
      {
        v13 = type metadata accessor for UUID(0);
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(a1, a2, v13);
        v14 = v6[5];
        v15 = (uint64_t *)((char *)a1 + v14);
        v16 = (uint64_t *)((char *)a2 + v14);
        v17 = *v16;
        v18 = v16[1];
        sub_10001BBBC(*v16, v18);
        *v15 = v17;
        v15[1] = v18;
        v19 = v6[6];
        v20 = (uint64_t *)((char *)a1 + v19);
        v21 = (uint64_t *)((char *)a2 + v19);
        *v20 = *v21;
        v22 = v21[1];
        v20[1] = v22;
        v23 = v6[7];
        v24 = (uint64_t *)((char *)a1 + v23);
        v25 = (uint64_t *)((char *)a2 + v23);
        *v24 = *v25;
        v26 = v25[1];
        v24[1] = v26;
        *(_DWORD *)((char *)a1 + v6[8]) = *(_DWORD *)((char *)a2 + v6[8]);
        v27 = v6[9];
        v28 = (char *)a1 + v27;
        v29 = (char *)a2 + v27;
        v30 = *(_DWORD *)v29;
        v28[4] = v29[4];
        *(_DWORD *)v28 = v30;
        v31 = v6[10];
        v32 = (char *)a1 + v31;
        v33 = (char *)a2 + v31;
        v34 = *(_OWORD *)v33;
        v32[16] = v33[16];
        *(_OWORD *)v32 = v34;
        v35 = v6[11];
        v36 = (char *)a1 + v35;
        v37 = (char *)a2 + v35;
        v38 = *(_QWORD *)v37;
        v36[8] = v37[8];
        *(_QWORD *)v36 = v38;
        v39 = v6[12];
        v40 = (char *)a1 + v39;
        v41 = (char *)a2 + v39;
        LODWORD(v38) = *(_DWORD *)v41;
        v40[4] = v41[4];
        *(_DWORD *)v40 = v38;
        *((_BYTE *)a1 + v6[13]) = *((_BYTE *)a2 + v6[13]);
        *((_BYTE *)a1 + v6[14]) = *((_BYTE *)a2 + v6[14]);
        v42 = v6[15];
        v43 = (uint64_t *)((char *)a1 + v42);
        v44 = (uint64_t *)((char *)a2 + v42);
        *v43 = *v44;
        v45 = v44[1];
        v43[1] = v45;
        v46 = *(void (**)(uint64_t *, _QWORD, uint64_t, int *, __n128))(v7 + 56);
        swift_bridgeObjectRetain(v22);
        swift_bridgeObjectRetain(v26);
        v47 = swift_bridgeObjectRetain(v45);
        v46(a1, 0, 1, v6, v47);
      }
      v10 = a1;
      v11 = a3;
      v12 = 1;
    }
    else
    {
      v9 = *a2;
      *a1 = *a2;
      swift_bridgeObjectRetain(v9);
      v10 = a1;
      v11 = a3;
      v12 = 0;
    }
    swift_storeEnumTagMultiPayload(v10, v11, v12);
  }
  return a1;
}

uint64_t type metadata accessor for BeaconScanner.AISLookupState(uint64_t a1)
{
  return sub_10001B630(a1, qword_101115ED8, (uint64_t)&nominal type descriptor for BeaconScanner.AISLookupState);
}

char *sub_100B50C9C(char *a1, char *a2, uint64_t a3)
{
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;

  if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
  {
    v6 = (int *)type metadata accessor for AccessoryMetadata(0);
    v7 = *((_QWORD *)v6 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v7 + 48))(a2, 1, v6))
    {
      v8 = sub_10001A9A8(&qword_101115E60);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
    }
    else
    {
      v9 = type metadata accessor for UUID(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(a1, a2, v9);
      *(_OWORD *)&a1[v6[5]] = *(_OWORD *)&a2[v6[5]];
      *(_OWORD *)&a1[v6[6]] = *(_OWORD *)&a2[v6[6]];
      *(_OWORD *)&a1[v6[7]] = *(_OWORD *)&a2[v6[7]];
      *(_DWORD *)&a1[v6[8]] = *(_DWORD *)&a2[v6[8]];
      v10 = v6[9];
      v11 = &a1[v10];
      v12 = &a2[v10];
      *(_DWORD *)v11 = *(_DWORD *)v12;
      v11[4] = v12[4];
      v13 = v6[10];
      v14 = &a1[v13];
      v15 = &a2[v13];
      *(_OWORD *)v14 = *(_OWORD *)v15;
      v14[16] = v15[16];
      v16 = v6[11];
      v17 = &a1[v16];
      v18 = &a2[v16];
      v17[8] = v18[8];
      *(_QWORD *)v17 = *(_QWORD *)v18;
      v19 = v6[12];
      v20 = &a1[v19];
      v21 = &a2[v19];
      *(_DWORD *)v20 = *(_DWORD *)v21;
      v20[4] = v21[4];
      a1[v6[13]] = a2[v6[13]];
      a1[v6[14]] = a2[v6[14]];
      *(_OWORD *)&a1[v6[15]] = *(_OWORD *)&a2[v6[15]];
      (*(void (**)(char *, _QWORD, uint64_t, int *))(v7 + 56))(a1, 0, 1, v6);
    }
    swift_storeEnumTagMultiPayload(a1, a3, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

char *sub_100B50E58(char *a1, char *a2, uint64_t a3)
{
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;

  if (a1 != a2)
  {
    sub_1000126B0((uint64_t)a1, type metadata accessor for BeaconScanner.AISLookupState);
    if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
    {
      v6 = (int *)type metadata accessor for AccessoryMetadata(0);
      v7 = *((_QWORD *)v6 - 1);
      if ((*(unsigned int (**)(char *, uint64_t, int *))(v7 + 48))(a2, 1, v6))
      {
        v8 = sub_10001A9A8(&qword_101115E60);
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
      }
      else
      {
        v9 = type metadata accessor for UUID(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(a1, a2, v9);
        *(_OWORD *)&a1[v6[5]] = *(_OWORD *)&a2[v6[5]];
        *(_OWORD *)&a1[v6[6]] = *(_OWORD *)&a2[v6[6]];
        *(_OWORD *)&a1[v6[7]] = *(_OWORD *)&a2[v6[7]];
        *(_DWORD *)&a1[v6[8]] = *(_DWORD *)&a2[v6[8]];
        v10 = v6[9];
        v11 = &a1[v10];
        v12 = &a2[v10];
        *(_DWORD *)v11 = *(_DWORD *)v12;
        v11[4] = v12[4];
        v13 = v6[10];
        v14 = &a1[v13];
        v15 = &a2[v13];
        *(_OWORD *)v14 = *(_OWORD *)v15;
        v14[16] = v15[16];
        v16 = v6[11];
        v17 = &a1[v16];
        v18 = &a2[v16];
        v17[8] = v18[8];
        *(_QWORD *)v17 = *(_QWORD *)v18;
        v19 = v6[12];
        v20 = &a1[v19];
        v21 = &a2[v19];
        *(_DWORD *)v20 = *(_DWORD *)v21;
        v20[4] = v21[4];
        a1[v6[13]] = a2[v6[13]];
        a1[v6[14]] = a2[v6[14]];
        *(_OWORD *)&a1[v6[15]] = *(_OWORD *)&a2[v6[15]];
        (*(void (**)(char *, _QWORD, uint64_t, int *))(v7 + 56))(a1, 0, 1, v6);
      }
      swift_storeEnumTagMultiPayload(a1, a3, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

void sub_100B5102C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  sub_100B56EFC(319, (unint64_t *)&unk_1010F1B78, type metadata accessor for AccessoryMetadata, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(v2 - 8) + 64;
    swift_initEnumMetadataMultiPayload(a1, 256, 2, v4);
  }
}

uint64_t sub_100B510B8(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v6 = v2[2];
  v7 = v2[3];
  v8 = v2[4];
  v9 = (_QWORD *)swift_task_alloc(dword_1011020BC);
  *(_QWORD *)(v3 + 16) = v9;
  *v9 = v3;
  v9[1] = sub_100004A74;
  return sub_10062CA10(a1, a2, v6, v7, v8);
}

uint64_t sub_100B51138@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_100B50420(v1[2], v1[3], v1[4], a1);
}

uint64_t sub_100B51148@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100DCF760(*(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), a1);
}

uint64_t sub_100B51170(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;

  v2 = sub_10001A9A8(&qword_1010EF7C0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  Peripheral.id.getter(v4);
  sub_100B5120C(a1, (uint64_t)v6);
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v6, v2);
}

uint64_t sub_100B5120C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  uint64_t v20;
  char *v21;
  _QWORD *v22;
  __n128 v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  void (*v28)(char *, uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  uint8_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v47;
  uint64_t v48;
  unint64_t *v49;
  int EnumCaseMultiPayload;
  unint64_t v51;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  unint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD v65[3];
  _BYTE v66[24];

  v63 = a1;
  v64 = sub_10001A9A8(&qword_101115FE0);
  v58 = *(_QWORD *)(v64 - 8);
  __chkstk_darwin(v64);
  v57 = (char *)&v55 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for BeaconScanner.AISLookupState(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v59 = (unint64_t *)((char *)&v55 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v7);
  v60 = (uint64_t)&v55 - v9;
  v10 = sub_10001A9A8(&qword_1010EF7C0);
  v61 = *(_QWORD *)(v10 - 8);
  v62 = v10;
  __chkstk_darwin(v10);
  v12 = (char *)&v55 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_10001A9A8(&qword_1010EF1A8);
  v14 = __chkstk_darwin(v13);
  v16 = (char *)&v55 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v14);
  v19 = (unint64_t *)((char *)&v55 - v18);
  __chkstk_darwin(v17);
  v21 = (char *)&v55 - v20;
  v22 = (_QWORD *)(v2 + 144);
  v23 = swift_beginAccess(v2 + 144, v66, 0, 0);
  v24 = *(_QWORD *)(v2 + 144);
  if (!*(_QWORD *)(v24 + 16))
  {
    v25 = a2;
    v28 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v6 + 56);
    v28(v21, 1, 1, v5, v23);
LABEL_7:
    sub_100004048((uint64_t)v21, &qword_1010EF1A8);
    v29 = v25;
    (*(void (**)(char *, uint64_t, uint64_t))(v61 + 16))(v12, v25, v62);
    *v19 = (unint64_t)_swiftEmptyArrayStorage;
    swift_storeEnumTagMultiPayload(v19, v5, 0);
    ((void (*)(unint64_t *, _QWORD, uint64_t, uint64_t))v28)(v19, 0, 1, v5);
    swift_beginAccess(v22, v65, 33, 0);
    sub_100100828((uint64_t)v19, (uint64_t)v12);
    swift_endAccess(v65);
    goto LABEL_9;
  }
  swift_bridgeObjectRetain(v24);
  v25 = a2;
  v26 = sub_100519C70(a2);
  if ((v27 & 1) != 0)
  {
    sub_10005972C(*(_QWORD *)(v24 + 56) + *(_QWORD *)(v6 + 72) * v26, (uint64_t)v21, type metadata accessor for BeaconScanner.AISLookupState);
    v28 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v6 + 56);
    ((void (*)(char *, _QWORD, uint64_t, uint64_t))v28)(v21, 0, 1, v5);
  }
  else
  {
    v28 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v6 + 56);
    ((void (*)(char *, uint64_t, uint64_t, uint64_t))v28)(v21, 1, 1, v5);
  }
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v21, 1, v5) == 1)
    goto LABEL_7;
  sub_100004048((uint64_t)v21, &qword_1010EF1A8);
  v29 = v25;
LABEL_9:
  v30 = *v22;
  if (!*(_QWORD *)(*v22 + 16))
  {
    ((void (*)(char *, uint64_t, uint64_t, uint64_t))v28)(v16, 1, 1, v5);
LABEL_15:
    sub_100004048((uint64_t)v16, &qword_1010EF1A8);
    v34 = v64;
LABEL_16:
    if (qword_1010EA220 != -1)
      swift_once(&qword_1010EA220, sub_100B4B8A8);
    v35 = type metadata accessor for Logger(0);
    v36 = sub_10001A9E8(v35, (uint64_t)qword_1011B7CE0);
    v37 = Logger.logObject.getter(v36);
    v38 = static os_log_type_t.fault.getter(v37);
    if (os_log_type_enabled(v37, v38))
    {
      v39 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v39 = 0;
      _os_log_impl((void *)&_mh_execute_header, v37, v38, "Expected to be in .pending state!", v39, 2u);
      swift_slowDealloc(v39, -1, -1);
    }

    v40 = type metadata accessor for BeaconScanner.Error(0);
    v41 = sub_100006C64(&qword_101115F48, 255, type metadata accessor for BeaconScanner.Error, (uint64_t)&unk_100E61570);
    v42 = swift_allocError(v40, v41, 0, 0);
    v44 = v43;
    v45 = sub_10001A9A8((uint64_t *)&unk_101115F50);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 56))(v44, 1, 2, v45);
    v65[0] = v42;
    return CheckedContinuation.resume(throwing:)(v65, v34);
  }
  swift_bridgeObjectRetain(*v22);
  v31 = sub_100519C70(v29);
  if ((v32 & 1) != 0)
  {
    sub_10005972C(*(_QWORD *)(v30 + 56) + *(_QWORD *)(v6 + 72) * v31, (uint64_t)v16, type metadata accessor for BeaconScanner.AISLookupState);
    v33 = 0;
  }
  else
  {
    v33 = 1;
  }
  ((void (*)(char *, uint64_t, uint64_t, uint64_t))v28)(v16, v33, 1, v5);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v16, 1, v5) == 1)
    goto LABEL_15;
  v47 = (uint64_t)v16;
  v48 = v60;
  sub_1000126EC(v47, v60, type metadata accessor for BeaconScanner.AISLookupState);
  v49 = v59;
  sub_10005972C(v48, (uint64_t)v59, type metadata accessor for BeaconScanner.AISLookupState);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v49, v5);
  v34 = v64;
  if (EnumCaseMultiPayload == 1)
  {
    sub_1000126B0(v48, type metadata accessor for BeaconScanner.AISLookupState);
    sub_1000126B0((uint64_t)v49, type metadata accessor for BeaconScanner.AISLookupState);
    goto LABEL_16;
  }
  v51 = *v49;
  (*(void (**)(char *, uint64_t, uint64_t))(v58 + 16))(v57, v63, v64);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v51);
  v56 = v29;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    v51 = sub_1007CA994(0, *(_QWORD *)(v51 + 16) + 1, 1, v51);
  v54 = *(_QWORD *)(v51 + 16);
  v53 = *(_QWORD *)(v51 + 24);
  if (v54 >= v53 >> 1)
    v51 = sub_1007CA994(v53 > 1, v54 + 1, 1, v51);
  *(_QWORD *)(v51 + 16) = v54 + 1;
  (*(void (**)(unint64_t, char *, uint64_t))(v58 + 32))(v51+ ((*(unsigned __int8 *)(v58 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v58 + 80))+ *(_QWORD *)(v58 + 72) * v54, v57, v34);
  (*(void (**)(char *, uint64_t, uint64_t))(v61 + 16))(v12, v56, v62);
  *v19 = v51;
  swift_storeEnumTagMultiPayload(v19, v5, 0);
  ((void (*)(unint64_t *, _QWORD, uint64_t, uint64_t))v28)(v19, 0, 1, v5);
  swift_beginAccess(v22, v65, 33, 0);
  sub_100100828((uint64_t)v19, (uint64_t)v12);
  swift_endAccess(v65);
  return sub_1000126B0(v48, type metadata accessor for BeaconScanner.AISLookupState);
}

uint64_t sub_100B5185C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v29 = a4;
  v30 = a5;
  v27 = a1;
  v28 = a3;
  v6 = sub_10001A9A8(&qword_1010EC448);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  __chkstk_darwin(v6);
  v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10001A9A8(&qword_1010F46C0);
  __chkstk_darwin(v10);
  v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_10001A9A8(&qword_1010EF7C0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = __chkstk_darwin(v13);
  v17 = (char *)&v27 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  Peripheral.id.getter(v15);
  sub_100B5120C(v27, (uint64_t)v17);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v13);
  v18 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v12, 1, 1, v18);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v29, v6);
  v20 = sub_100006C64(&qword_101115F78, v19, (uint64_t (*)(uint64_t))type metadata accessor for BeaconScanner, (uint64_t)&unk_100E61540);
  v21 = *(unsigned __int8 *)(v7 + 80);
  v22 = (v21 + 48) & ~v21;
  v23 = (v8 + v22 + 7) & 0xFFFFFFFFFFFFFFF8;
  v24 = (char *)swift_allocObject(&unk_1010AECD0, v23 + 8, v21 | 7);
  *((_QWORD *)v24 + 2) = a2;
  *((_QWORD *)v24 + 3) = v20;
  v25 = v28;
  *((_QWORD *)v24 + 4) = a2;
  *((_QWORD *)v24 + 5) = v25;
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(&v24[v22], v9, v6);
  *(_QWORD *)&v24[v23] = v30;
  swift_retain_n(a2, 2);
  swift_retain();
  sub_100691AC0((uint64_t)v12, (uint64_t)&unk_101115FF0, (uint64_t)v24);
  return swift_release();
}

uint64_t sub_100B51A60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;

  v7[20] = a6;
  v7[21] = a7;
  v7[18] = a4;
  v7[19] = a5;
  v9 = type metadata accessor for TimeoutError(0);
  v7[22] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v7[23] = v10;
  v7[24] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10001A9A8(&qword_101115FE0);
  v7[25] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v7[26] = v12;
  v7[27] = swift_task_alloc((*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_10001A9A8(&qword_101115E60);
  v7[28] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v13 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = (*(_QWORD *)(*(_QWORD *)(sub_10001A9A8(&qword_1010EF1A8) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v7[29] = swift_task_alloc(v14);
  v7[30] = swift_task_alloc(v14);
  v15 = sub_10001A9A8(&qword_1010EF7C0);
  v7[31] = v15;
  v16 = *(_QWORD *)(v15 - 8);
  v7[32] = v16;
  v17 = (*(_QWORD *)(v16 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v7[33] = swift_task_alloc(v17);
  v7[34] = swift_task_alloc(v17);
  v18 = type metadata accessor for BeaconScanner.AISLookupState(0);
  v7[35] = v18;
  v19 = *(_QWORD *)(v18 - 8);
  v7[36] = v19;
  v20 = (*(_QWORD *)(v19 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v7[37] = swift_task_alloc(v20);
  v7[38] = swift_task_alloc(v20);
  v21 = sub_10001A9A8(&qword_1010EC448);
  v7[39] = v21;
  v22 = *(_QWORD *)(v21 - 8);
  v7[40] = v22;
  v23 = *(_QWORD *)(v22 + 64);
  v7[41] = v23;
  v7[42] = swift_task_alloc((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = sub_10001A9A8(&qword_101115FF8);
  v7[43] = v24;
  v25 = (*(_QWORD *)(*(_QWORD *)(v24 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v7[44] = swift_task_alloc(v25);
  v7[45] = swift_task_alloc(v25);
  v7[46] = swift_task_alloc(v25);
  v7[47] = swift_task_alloc(v25);
  return swift_task_switch(sub_100B51C40, a4, 0);
}

uint64_t sub_100B51C40()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v2 = v0[41];
  v1 = v0[42];
  v3 = v0[39];
  v4 = v0[40];
  v5 = v0[21];
  v7 = v0[18];
  v6 = v0[19];
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v4 + 16))(v1, v0[20], v3);
  v8 = *(unsigned __int8 *)(v4 + 80);
  v9 = (v8 + 32) & ~v8;
  v10 = (v2 + v9 + 7) & 0xFFFFFFFFFFFFFFF8;
  v11 = swift_allocObject(&unk_1010AECF8, v10 + 8, v8 | 7);
  v0[48] = v11;
  *(_QWORD *)(v11 + 16) = v7;
  *(_QWORD *)(v11 + 24) = v6;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v11 + v9, v1, v3);
  *(_QWORD *)(v11 + v10) = v5;
  v12 = async function pointer to withTimeout<A>(_:block:)[1];
  swift_retain();
  swift_retain();
  v13 = (_QWORD *)swift_task_alloc(v12);
  v0[49] = v13;
  *v13 = v0;
  v13[1] = sub_100B51D54;
  return withTimeout<A>(_:block:)(v0[46], 0xA055690D9DB80000, 1, &unk_101116008, v11, v0[43]);
}

uint64_t sub_100B51D54()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 392);
  *(_QWORD *)(*v1 + 400) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = *(_QWORD *)(v2 + 144);
    v5 = sub_100B525FC;
  }
  else
  {
    v6 = *(_QWORD *)(v2 + 144);
    swift_release();
    v5 = sub_100B51DC8;
    v4 = v6;
  }
  return swift_task_switch(v5, v4, 0);
}

uint64_t sub_100B51DC8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  void (*v12)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int EnumCaseMultiPayload;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(_QWORD, uint64_t, _QWORD);
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v80;
  NSObject *log;
  uint64_t *v82;
  uint64_t v83;
  os_log_type_t type;
  os_log_type_t typea[8];
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;

  v1 = sub_100005CF0(*(_QWORD *)(v0 + 368), *(_QWORD *)(v0 + 376), &qword_101115FF8);
  v2 = *(_QWORD *)(v0 + 144);
  Peripheral.id.getter(v1);
  v3 = v2 + 144;
  v4 = swift_beginAccess(v2 + 144, v0 + 40, 0, 0);
  v5 = *(_QWORD *)(v2 + 144);
  if (*(_QWORD *)(v5 + 16))
  {
    v6 = *(_QWORD *)(v0 + 272);
    swift_bridgeObjectRetain(*(_QWORD *)(v2 + 144));
    v7 = sub_100519C70(v6);
    v8 = *(_QWORD *)(v0 + 280);
    v9 = *(_QWORD *)(v0 + 288);
    v10 = *(_QWORD *)(v0 + 240);
    if ((v11 & 1) != 0)
    {
      sub_10005972C(*(_QWORD *)(v5 + 56) + *(_QWORD *)(v9 + 72) * v7, *(_QWORD *)(v0 + 240), type metadata accessor for BeaconScanner.AISLookupState);
      v12 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
      v12(v10, 0, 1, v8);
    }
    else
    {
      v12 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
      v12(*(_QWORD *)(v0 + 240), 1, 1, v8);
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    v12 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 288) + 56);
    ((void (*)(_QWORD, uint64_t, uint64_t, _QWORD, __n128))v12)(*(_QWORD *)(v0 + 240), 1, 1, *(_QWORD *)(v0 + 280), v4);
  }
  v13 = *(_QWORD *)(v0 + 280);
  v14 = *(_QWORD *)(v0 + 288);
  v15 = *(_QWORD *)(v0 + 240);
  v16 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 256) + 8);
  v16(*(_QWORD *)(v0 + 272), *(_QWORD *)(v0 + 248));
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v15, 1, v13) != 1)
  {
    v18 = *(_QWORD *)(v0 + 296);
    v17 = *(_QWORD *)(v0 + 304);
    v19 = *(_QWORD *)(v0 + 280);
    sub_1000126EC(*(_QWORD *)(v0 + 240), v17, type metadata accessor for BeaconScanner.AISLookupState);
    sub_10005972C(v17, v18, type metadata accessor for BeaconScanner.AISLookupState);
    if (swift_getEnumCaseMultiPayload(v18, v19) == 1)
    {
      v20 = *(_QWORD *)(v0 + 296);
      sub_1000126B0(*(_QWORD *)(v0 + 304), type metadata accessor for BeaconScanner.AISLookupState);
      sub_1000126B0(v20, type metadata accessor for BeaconScanner.AISLookupState);
      goto LABEL_11;
    }
    v26 = *(_QWORD *)(v0 + 360);
    v27 = *(_QWORD *)(v0 + 344);
    v28 = **(_QWORD **)(v0 + 296);
    sub_10000F9B8(*(_QWORD *)(v0 + 376), v26, &qword_101115FF8);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v26, v27);
    v30 = *(uint64_t **)(v0 + 360);
    v88 = v28;
    if (EnumCaseMultiPayload == 1)
    {
      v90 = v0 + 64;
      v31 = *v30;
      if (qword_1010EA220 != -1)
        swift_once(&qword_1010EA220, sub_100B4B8A8);
      v32 = type metadata accessor for Logger(0);
      sub_10001A9E8(v32, (uint64_t)qword_1011B7CE0);
      swift_retain();
      swift_errorRetain(v31);
      swift_retain();
      v33 = swift_errorRetain(v31);
      v34 = Logger.logObject.getter(v33);
      v35 = static os_log_type_t.error.getter(v34);
      if (os_log_type_enabled(v34, v35))
      {
        v36 = *(_QWORD *)(v0 + 264);
        type = v35;
        v37 = *(_QWORD *)(v0 + 248);
        v80 = *(_QWORD *)(v0 + 152);
        v38 = swift_slowAlloc(22, -1);
        v82 = (uint64_t *)swift_slowAlloc(8, -1);
        v86 = swift_slowAlloc(32, -1);
        v92 = v86;
        *(_DWORD *)v38 = 136315394;
        log = v34;
        Peripheral.id.getter(v86);
        v39 = sub_1000193A4(&qword_1010EE1D0, &qword_1010EF7C0, (const char *)&protocol conformance descriptor for Identifier<A>);
        v40 = dispatch thunk of CustomStringConvertible.description.getter(v37, v39);
        v42 = v41;
        v16(v36, v37);
        *(_QWORD *)(v0 + 96) = sub_100016940(v40, v42, &v92);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 96, v0 + 104, v38 + 4, v38 + 12);
        swift_release_n(v80, 2);
        swift_bridgeObjectRelease();
        *(_WORD *)(v38 + 12) = 2112;
        swift_errorRetain(v31);
        v43 = _swift_stdlib_bridgeErrorToNSError(v31);
        *(_QWORD *)(v0 + 104) = v43;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 104, v0 + 112, v38 + 14, v38 + 22);
        *v82 = v43;
        swift_errorRelease(v31);
        swift_errorRelease(v31);
        _os_log_impl((void *)&_mh_execute_header, log, type, "Failure reading metadata for %s: %@", (uint8_t *)v38, 0x16u);
        v44 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
        swift_arrayDestroy(v82, 1, v44);
        swift_slowDealloc(v82, -1, -1);
        swift_arrayDestroy(v86, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v86, -1, -1);
        v45 = v38;
        v28 = v88;
        swift_slowDealloc(v45, -1, -1);

      }
      else
      {
        swift_release_n(*(_QWORD *)(v0 + 152), 2);
        swift_errorRelease(v31);
        swift_errorRelease(v31);

      }
      v66 = *(_QWORD *)(v0 + 280);
      v67 = *(_QWORD *)(v0 + 264);
      v68 = *(_QWORD *)(v0 + 232);
      Peripheral.id.getter(v46);
      v69 = type metadata accessor for AccessoryMetadata(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v69 - 8) + 56))(v68, 1, 1, v69);
      swift_storeEnumTagMultiPayload(v68, v66, 1);
      v12(v68, 0, 1, v66);
      swift_beginAccess(v3, v90, 33, 0);
      sub_100100828(v68, v67);
      swift_endAccess(v90);
      swift_errorRelease(v31);
      v53 = *(_QWORD *)(v28 + 16);
      if (!v53)
        goto LABEL_30;
    }
    else
    {
      v47 = *(_QWORD *)(v0 + 280);
      v48 = *(_QWORD *)(v0 + 264);
      v50 = *(_QWORD *)(v0 + 224);
      v49 = *(_QWORD *)(v0 + 232);
      v51 = sub_100005CF0((uint64_t)v30, v50, &qword_101115E60);
      Peripheral.id.getter(v51);
      sub_10000F9B8(v50, v49, &qword_101115E60);
      swift_storeEnumTagMultiPayload(v49, v47, 1);
      v12(v49, 0, 1, v47);
      swift_beginAccess(v3, v0 + 16, 33, 0);
      sub_100100828(v49, v48);
      swift_endAccess(v0 + 16);
      v52 = v50;
      v28 = v88;
      sub_100004048(v52, &qword_101115E60);
      v53 = *(_QWORD *)(v88 + 16);
      if (!v53)
      {
LABEL_30:
        swift_bridgeObjectRelease();
        sub_1000126B0(*(_QWORD *)(v0 + 304), type metadata accessor for BeaconScanner.AISLookupState);
        goto LABEL_31;
      }
    }
    v54 = *(_QWORD *)(v0 + 208);
    v55 = v28 + ((*(unsigned __int8 *)(v54 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v54 + 80));
    v56 = *(_QWORD *)(v54 + 72);
    v57 = *(void (**)(_QWORD, uint64_t, _QWORD))(v54 + 16);
    do
    {
      v59 = *(_QWORD *)(v0 + 376);
      v61 = *(_QWORD *)(v0 + 344);
      v60 = *(_QWORD *)(v0 + 352);
      v57(*(_QWORD *)(v0 + 216), v55, *(_QWORD *)(v0 + 200));
      sub_10000F9B8(v59, v60, &qword_101115FF8);
      v62 = swift_getEnumCaseMultiPayload(v60, v61);
      v63 = *(_QWORD **)(v0 + 352);
      if (v62 == 1)
      {
        v58 = *(_QWORD *)(v0 + 200);
        *(_QWORD *)(v0 + 88) = *v63;
        CheckedContinuation.resume(throwing:)(v0 + 88, v58);
      }
      else
      {
        v64 = *(_QWORD *)(v0 + 224);
        v65 = *(_QWORD *)(v0 + 200);
        sub_100005CF0((uint64_t)v63, v64, &qword_101115E60);
        CheckedContinuation.resume(returning:)(v64, v65);
      }
      (*(void (**)(_QWORD, _QWORD))(v54 + 8))(*(_QWORD *)(v0 + 216), *(_QWORD *)(v0 + 200));
      v55 += v56;
      --v53;
    }
    while (v53);
    goto LABEL_30;
  }
  sub_100004048(*(_QWORD *)(v0 + 240), &qword_1010EF1A8);
LABEL_11:
  if (qword_1010EA220 != -1)
    swift_once(&qword_1010EA220, sub_100B4B8A8);
  v21 = type metadata accessor for Logger(0);
  v22 = sub_10001A9E8(v21, (uint64_t)qword_1011B7CE0);
  v23 = Logger.logObject.getter(v22);
  v24 = static os_log_type_t.fault.getter(v23);
  if (os_log_type_enabled(v23, v24))
  {
    v25 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v25 = 0;
    _os_log_impl((void *)&_mh_execute_header, v23, v24, "Expected to be in pending state", v25, 2u);
    swift_slowDealloc(v25, -1, -1);
  }

LABEL_31:
  v71 = *(_QWORD *)(v0 + 368);
  v70 = *(_QWORD *)(v0 + 376);
  v73 = *(_QWORD *)(v0 + 352);
  v72 = *(_QWORD *)(v0 + 360);
  v74 = *(_QWORD *)(v0 + 336);
  v76 = *(_QWORD *)(v0 + 296);
  v75 = *(_QWORD *)(v0 + 304);
  v77 = *(_QWORD *)(v0 + 264);
  v78 = *(_QWORD *)(v0 + 272);
  v83 = *(_QWORD *)(v0 + 240);
  *(_QWORD *)typea = *(_QWORD *)(v0 + 232);
  v87 = *(_QWORD *)(v0 + 224);
  v89 = *(_QWORD *)(v0 + 216);
  v91 = *(_QWORD *)(v0 + 192);
  sub_100004048(v70, &qword_101115FF8);
  swift_task_dealloc(v70);
  swift_task_dealloc(v71);
  swift_task_dealloc(v72);
  swift_task_dealloc(v73);
  swift_task_dealloc(v74);
  swift_task_dealloc(v75);
  swift_task_dealloc(v76);
  swift_task_dealloc(v78);
  swift_task_dealloc(v77);
  swift_task_dealloc(v83);
  swift_task_dealloc(*(_QWORD *)typea);
  swift_task_dealloc(v87);
  swift_task_dealloc(v89);
  swift_task_dealloc(v91);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100B525FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint64_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  _BOOL4 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __n128 v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  void (*v60)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void (*v64)(uint64_t, uint64_t);
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  NSObject *v71;
  os_log_type_t v72;
  uint8_t *v73;
  uint64_t v74;
  uint64_t v75;
  int EnumCaseMultiPayload;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  NSObject *v81;
  os_log_type_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  void (*v109)(_QWORD, uint64_t, _QWORD);
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  int v114;
  _QWORD *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  _QWORD *v131;
  uint64_t v132;
  _QWORD *v133;
  NSObject *log;
  uint64_t *v135;
  uint64_t v136;
  uint64_t *v137;
  uint64_t v138;
  uint64_t v139;
  os_log_type_t type[8];
  uint64_t typea;
  os_log_type_t typeb;
  os_log_type_t typec[8];
  uint64_t v144;
  uint64_t v145;
  _QWORD *v146;
  uint64_t v147;
  _QWORD *v148;
  uint64_t v149;
  uint64_t v150;

  v1 = *(_QWORD *)(v0 + 400);
  v2 = *(_QWORD *)(v0 + 192);
  v3 = *(_QWORD *)(v0 + 176);
  swift_release();
  *(_QWORD *)(v0 + 112) = v1;
  v4 = (_QWORD *)(v0 + 112);
  swift_errorRetain(v1);
  v5 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
  v6 = &qword_1010EA000;
  if ((swift_dynamicCast(v2, v0 + 112, v5, v3, 0) & 1) != 0)
  {
    swift_errorRelease(*(_QWORD *)(v0 + 400));
    if (qword_1010EA220 != -1)
      swift_once(&qword_1010EA220, sub_100B4B8A8);
    v7 = *(_QWORD *)(v0 + 152);
    v8 = type metadata accessor for Logger(0);
    sub_10001A9E8(v8, (uint64_t)qword_1011B7CE0);
    v9 = swift_retain_n(v7, 2);
    v10 = Logger.logObject.getter(v9);
    v11 = static os_log_type_t.error.getter(v10);
    if (os_log_type_enabled(v10, v11))
    {
      v12 = *(_QWORD *)(v0 + 264);
      v13 = *(_QWORD *)(v0 + 248);
      v136 = *(_QWORD *)(v0 + 152);
      *(_QWORD *)type = *(_QWORD *)(v0 + 256);
      v14 = (uint8_t *)swift_slowAlloc(12, -1);
      v15 = swift_slowAlloc(32, -1);
      v150 = v15;
      *(_DWORD *)v14 = 136446210;
      Peripheral.id.getter(v15);
      v16 = sub_1000193A4(&qword_1010EE1D0, &qword_1010EF7C0, (const char *)&protocol conformance descriptor for Identifier<A>);
      v17 = dispatch thunk of CustomStringConvertible.description.getter(v13, v16);
      v19 = v18;
      v20 = v13;
      v6 = &qword_1010EA000;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)type + 8))(v12, v20);
      *(_QWORD *)(v0 + 136) = sub_100016940(v17, v19, &v150);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 136, v0 + 144, v14 + 4, v14 + 12);
      swift_release_n(v136, 2);
      v4 = (_QWORD *)(v0 + 112);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Timeout reading metadata for %{public}s!", v14, 0xCu);
      swift_arrayDestroy(v15, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v15, -1, -1);
      swift_slowDealloc(v14, -1, -1);

    }
    else
    {
      v38 = *(_QWORD *)(v0 + 152);

      swift_release_n(v38, 2);
    }
    v39 = *(_QWORD *)(v0 + 376);
    v40 = *(_QWORD *)(v0 + 344);
    v42 = *(_QWORD *)(v0 + 184);
    v41 = *(_QWORD *)(v0 + 192);
    v43 = *(_QWORD *)(v0 + 176);
    v44 = type metadata accessor for AccessoryMetadata(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v44 - 8) + 56))(v39, 1, 1, v44);
    swift_storeEnumTagMultiPayload(v39, v40, 0);
    (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v41, v43);
    v45 = swift_errorRelease(*(_QWORD *)(v0 + 112));
  }
  else
  {
    swift_errorRelease(*v4);
    if (qword_1010EA220 != -1)
      swift_once(&qword_1010EA220, sub_100B4B8A8);
    v21 = *(_QWORD *)(v0 + 400);
    v22 = type metadata accessor for Logger(0);
    sub_10001A9E8(v22, (uint64_t)qword_1011B7CE0);
    swift_retain();
    swift_errorRetain(v21);
    swift_retain();
    v23 = swift_errorRetain(v21);
    v24 = Logger.logObject.getter(v23);
    v25 = static os_log_type_t.error.getter(v24);
    v26 = os_log_type_enabled(v24, v25);
    v27 = *(_QWORD *)(v0 + 400);
    if (v26)
    {
      v28 = *(_QWORD *)(v0 + 264);
      v29 = *(_QWORD *)(v0 + 248);
      v130 = *(_QWORD *)(v0 + 152);
      v132 = *(_QWORD *)(v0 + 256);
      v30 = swift_slowAlloc(22, -1);
      v137 = (uint64_t *)swift_slowAlloc(8, -1);
      typea = swift_slowAlloc(32, -1);
      v150 = typea;
      *(_DWORD *)v30 = 136446466;
      Peripheral.id.getter(typea);
      v31 = sub_1000193A4(&qword_1010EE1D0, &qword_1010EF7C0, (const char *)&protocol conformance descriptor for Identifier<A>);
      v32 = dispatch thunk of CustomStringConvertible.description.getter(v29, v31);
      v34 = v33;
      (*(void (**)(uint64_t, uint64_t))(v132 + 8))(v28, v29);
      *(_QWORD *)(v0 + 120) = sub_100016940(v32, v34, &v150);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 120, v0 + 128, v30 + 4, v30 + 12);
      swift_release_n(v130, 2);
      swift_bridgeObjectRelease();
      *(_WORD *)(v30 + 12) = 2114;
      v35 = _convertErrorToNSError(_:)(v27);
      *(_QWORD *)(v0 + 128) = v35;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 128, v0 + 136, v30 + 14, v30 + 22);
      *v137 = v35;
      swift_errorRelease(v27);
      swift_errorRelease(v27);
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "Error reading metadata for %{public}s: %{public}@", (uint8_t *)v30, 0x16u);
      v36 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
      swift_arrayDestroy(v137, 1, v36);
      swift_slowDealloc(v137, -1, -1);
      swift_arrayDestroy(typea, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(typea, -1, -1);
      v37 = v30;
      v4 = (_QWORD *)(v0 + 112);
      swift_slowDealloc(v37, -1, -1);

      swift_errorRelease(v27);
    }
    else
    {
      v46 = *(_QWORD *)(v0 + 152);
      swift_errorRelease(*(_QWORD *)(v0 + 400));
      swift_release_n(v46, 2);
      swift_errorRelease(v27);
      swift_errorRelease(v27);

    }
    v47 = *(_QWORD *)(v0 + 376);
    v48 = *(_QWORD *)(v0 + 344);
    v49 = type metadata accessor for AccessoryMetadata(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 56))(v47, 1, 1, v49);
    v45 = swift_storeEnumTagMultiPayload(v47, v48, 0);
    v6 = &qword_1010EA000;
  }
  v50 = *(_QWORD *)(v0 + 144);
  Peripheral.id.getter(v45);
  v51 = v50 + 144;
  v52 = swift_beginAccess(v50 + 144, v0 + 40, 0, 0);
  v53 = *(_QWORD *)(v50 + 144);
  if (*(_QWORD *)(v53 + 16))
  {
    v54 = *(_QWORD *)(v0 + 272);
    swift_bridgeObjectRetain(v53);
    v55 = sub_100519C70(v54);
    v56 = *(_QWORD *)(v0 + 280);
    v57 = *(_QWORD *)(v0 + 288);
    v58 = *(_QWORD *)(v0 + 240);
    if ((v59 & 1) != 0)
    {
      sub_10005972C(*(_QWORD *)(v53 + 56) + *(_QWORD *)(v57 + 72) * v55, *(_QWORD *)(v0 + 240), type metadata accessor for BeaconScanner.AISLookupState);
      v60 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v57 + 56);
      v60(v58, 0, 1, v56);
    }
    else
    {
      v60 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v57 + 56);
      v60(*(_QWORD *)(v0 + 240), 1, 1, v56);
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    v60 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 288) + 56);
    ((void (*)(_QWORD, uint64_t, uint64_t, _QWORD, __n128))v60)(*(_QWORD *)(v0 + 240), 1, 1, *(_QWORD *)(v0 + 280), v52);
  }
  v61 = *(_QWORD *)(v0 + 280);
  v62 = *(_QWORD *)(v0 + 288);
  v63 = *(_QWORD *)(v0 + 240);
  v64 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 256) + 8);
  v64(*(_QWORD *)(v0 + 272), *(_QWORD *)(v0 + 248));
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v62 + 48))(v63, 1, v61) == 1)
  {
    sub_100004048(*(_QWORD *)(v0 + 240), &qword_1010EF1A8);
LABEL_24:
    if (v6[68] != -1)
      swift_once(&qword_1010EA220, sub_100B4B8A8);
    v69 = type metadata accessor for Logger(0);
    v70 = sub_10001A9E8(v69, (uint64_t)qword_1011B7CE0);
    v71 = Logger.logObject.getter(v70);
    v72 = static os_log_type_t.fault.getter(v71);
    if (os_log_type_enabled(v71, v72))
    {
      v73 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v73 = 0;
      _os_log_impl((void *)&_mh_execute_header, v71, v72, "Expected to be in pending state", v73, 2u);
      swift_slowDealloc(v73, -1, -1);
    }

    goto LABEL_44;
  }
  v65 = *(_QWORD *)(v0 + 296);
  v66 = *(_QWORD *)(v0 + 304);
  v67 = *(_QWORD *)(v0 + 280);
  sub_1000126EC(*(_QWORD *)(v0 + 240), v66, type metadata accessor for BeaconScanner.AISLookupState);
  sub_10005972C(v66, v65, type metadata accessor for BeaconScanner.AISLookupState);
  if (swift_getEnumCaseMultiPayload(v65, v67) == 1)
  {
    v68 = *(_QWORD *)(v0 + 296);
    sub_1000126B0(*(_QWORD *)(v0 + 304), type metadata accessor for BeaconScanner.AISLookupState);
    sub_1000126B0(v68, type metadata accessor for BeaconScanner.AISLookupState);
    goto LABEL_24;
  }
  v74 = *(_QWORD *)(v0 + 360);
  v75 = *(_QWORD *)(v0 + 344);
  v144 = **(_QWORD **)(v0 + 296);
  sub_10000F9B8(*(_QWORD *)(v0 + 376), v74, &qword_101115FF8);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v74, v75);
  v77 = *(uint64_t **)(v0 + 360);
  v146 = v4;
  if (EnumCaseMultiPayload == 1)
  {
    v148 = v4 - 6;
    v78 = *v77;
    if (v6[68] != -1)
      swift_once(&qword_1010EA220, sub_100B4B8A8);
    v79 = type metadata accessor for Logger(0);
    sub_10001A9E8(v79, (uint64_t)qword_1011B7CE0);
    swift_retain();
    swift_errorRetain(v78);
    swift_retain();
    v80 = swift_errorRetain(v78);
    v81 = Logger.logObject.getter(v80);
    v82 = static os_log_type_t.error.getter(v81);
    if (os_log_type_enabled(v81, v82))
    {
      v131 = v4 - 1;
      v133 = v4 - 2;
      typeb = v82;
      v83 = *(_QWORD *)(v0 + 264);
      v129 = v78;
      v84 = *(_QWORD *)(v0 + 248);
      v128 = *(_QWORD *)(v0 + 152);
      v85 = swift_slowAlloc(22, -1);
      v135 = (uint64_t *)swift_slowAlloc(8, -1);
      v138 = swift_slowAlloc(32, -1);
      v150 = v138;
      *(_DWORD *)v85 = 136315394;
      log = v81;
      Peripheral.id.getter(v138);
      v86 = sub_1000193A4(&qword_1010EE1D0, &qword_1010EF7C0, (const char *)&protocol conformance descriptor for Identifier<A>);
      v87 = dispatch thunk of CustomStringConvertible.description.getter(v84, v86);
      v88 = v4;
      v90 = v89;
      v91 = v84;
      v78 = v129;
      v64(v83, v91);
      *(_QWORD *)(v0 + 96) = sub_100016940(v87, v90, &v150);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v133, v131, v85 + 4, v85 + 12);
      swift_release_n(v128, 2);
      swift_bridgeObjectRelease();
      *(_WORD *)(v85 + 12) = 2112;
      swift_errorRetain(v129);
      v92 = _swift_stdlib_bridgeErrorToNSError(v129);
      *(_QWORD *)(v0 + 104) = v92;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v131, v88, v85 + 14, v85 + 22);
      *v135 = v92;
      swift_errorRelease(v129);
      swift_errorRelease(v129);
      _os_log_impl((void *)&_mh_execute_header, log, typeb, "Failure reading metadata for %s: %@", (uint8_t *)v85, 0x16u);
      v93 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
      swift_arrayDestroy(v135, 1, v93);
      swift_slowDealloc(v135, -1, -1);
      swift_arrayDestroy(v138, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v138, -1, -1);
      swift_slowDealloc(v85, -1, -1);

    }
    else
    {
      swift_release_n(*(_QWORD *)(v0 + 152), 2);
      swift_errorRelease(v78);
      swift_errorRelease(v78);

    }
    v101 = *(_QWORD *)(v0 + 280);
    v102 = *(_QWORD *)(v0 + 264);
    v103 = *(_QWORD *)(v0 + 232);
    Peripheral.id.getter(v94);
    v104 = type metadata accessor for AccessoryMetadata(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v104 - 8) + 56))(v103, 1, 1, v104);
    swift_storeEnumTagMultiPayload(v103, v101, 1);
    v60(v103, 0, 1, v101);
    swift_beginAccess(v51, v148, 33, 0);
    sub_100100828(v103, v102);
    swift_endAccess(v148);
    swift_errorRelease(v78);
  }
  else
  {
    v95 = v4 - 12;
    v96 = *(_QWORD *)(v0 + 280);
    v97 = *(_QWORD *)(v0 + 264);
    v99 = *(_QWORD *)(v0 + 224);
    v98 = *(_QWORD *)(v0 + 232);
    v100 = sub_100005CF0((uint64_t)v77, v99, &qword_101115E60);
    Peripheral.id.getter(v100);
    sub_10000F9B8(v99, v98, &qword_101115E60);
    swift_storeEnumTagMultiPayload(v98, v96, 1);
    v60(v98, 0, 1, v96);
    swift_beginAccess(v51, v95, 33, 0);
    sub_100100828(v98, v97);
    swift_endAccess(v95);
    sub_100004048(v99, &qword_101115E60);
  }
  v105 = *(_QWORD *)(v144 + 16);
  if (v105)
  {
    v106 = *(_QWORD *)(v0 + 208);
    v107 = v144 + ((*(unsigned __int8 *)(v106 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v106 + 80));
    v108 = *(_QWORD *)(v106 + 72);
    v109 = *(void (**)(_QWORD, uint64_t, _QWORD))(v106 + 16);
    do
    {
      v111 = *(_QWORD *)(v0 + 376);
      v113 = *(_QWORD *)(v0 + 344);
      v112 = *(_QWORD *)(v0 + 352);
      v109(*(_QWORD *)(v0 + 216), v107, *(_QWORD *)(v0 + 200));
      sub_10000F9B8(v111, v112, &qword_101115FF8);
      v114 = swift_getEnumCaseMultiPayload(v112, v113);
      v115 = *(_QWORD **)(v0 + 352);
      if (v114 == 1)
      {
        v110 = *(_QWORD *)(v0 + 200);
        *(_QWORD *)(v0 + 88) = *v115;
        CheckedContinuation.resume(throwing:)(v146 - 3, v110);
      }
      else
      {
        v116 = *(_QWORD *)(v0 + 224);
        v117 = *(_QWORD *)(v0 + 200);
        sub_100005CF0((uint64_t)v115, v116, &qword_101115E60);
        CheckedContinuation.resume(returning:)(v116, v117);
      }
      (*(void (**)(_QWORD, _QWORD))(v106 + 8))(*(_QWORD *)(v0 + 216), *(_QWORD *)(v0 + 200));
      v107 += v108;
      --v105;
    }
    while (v105);
  }
  swift_bridgeObjectRelease();
  sub_1000126B0(*(_QWORD *)(v0 + 304), type metadata accessor for BeaconScanner.AISLookupState);
LABEL_44:
  v119 = *(_QWORD *)(v0 + 368);
  v118 = *(_QWORD *)(v0 + 376);
  v121 = *(_QWORD *)(v0 + 352);
  v120 = *(_QWORD *)(v0 + 360);
  v122 = *(_QWORD *)(v0 + 336);
  v124 = *(_QWORD *)(v0 + 296);
  v123 = *(_QWORD *)(v0 + 304);
  v125 = *(_QWORD *)(v0 + 264);
  v126 = *(_QWORD *)(v0 + 272);
  v139 = *(_QWORD *)(v0 + 240);
  *(_QWORD *)typec = *(_QWORD *)(v0 + 232);
  v145 = *(_QWORD *)(v0 + 224);
  v147 = *(_QWORD *)(v0 + 216);
  v149 = *(_QWORD *)(v0 + 192);
  sub_100004048(v118, &qword_101115FF8);
  swift_task_dealloc(v118);
  swift_task_dealloc(v119);
  swift_task_dealloc(v120);
  swift_task_dealloc(v121);
  swift_task_dealloc(v122);
  swift_task_dealloc(v123);
  swift_task_dealloc(v124);
  swift_task_dealloc(v126);
  swift_task_dealloc(v125);
  swift_task_dealloc(v139);
  swift_task_dealloc(*(_QWORD *)typec);
  swift_task_dealloc(v145);
  swift_task_dealloc(v147);
  swift_task_dealloc(v149);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100B5338C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v4[4] = a1;
  v4[5] = a3;
  v7 = sub_10001A9A8(&qword_1010EF7C0);
  v4[6] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v4[7] = v8;
  v4[8] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for AccessoryMetadata(0);
  v4[9] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v4[10] = v10;
  v11 = (*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[11] = swift_task_alloc(v11);
  v12 = swift_task_alloc(v11);
  v4[12] = v12;
  v13 = (_QWORD *)swift_task_alloc(dword_101116014);
  v4[13] = v13;
  *v13 = v4;
  v13[1] = sub_100B53464;
  return sub_100B5380C(v12, a3, a4);
}

uint64_t sub_100B53464()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 104);
  *(_QWORD *)(*(_QWORD *)v1 + 112) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_100B537C4;
  else
    v3 = sub_100B534C8;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_100B534C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  _BOOL4 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  if (qword_1010EA220 != -1)
    swift_once(&qword_1010EA220, sub_100B4B8A8);
  v1 = *(_QWORD *)(v0 + 88);
  v2 = *(_QWORD *)(v0 + 96);
  v3 = *(_QWORD *)(v0 + 40);
  v4 = type metadata accessor for Logger(0);
  sub_10001A9E8(v4, (uint64_t)qword_1011B7CE0);
  sub_10005972C(v2, v1, type metadata accessor for AccessoryMetadata);
  v5 = swift_retain_n(v3, 2);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.default.getter(v6);
  v8 = os_log_type_enabled(v6, v7);
  v9 = *(_QWORD *)(v0 + 88);
  if (v8)
  {
    v10 = *(_QWORD *)(v0 + 64);
    v28 = *(_QWORD *)(v0 + 56);
    v12 = *(_QWORD *)(v0 + 40);
    v11 = *(_QWORD *)(v0 + 48);
    v13 = swift_slowAlloc(22, -1);
    v29 = swift_slowAlloc(64, -1);
    v30 = v29;
    *(_DWORD *)v13 = 136315394;
    Peripheral.id.getter(v29);
    v14 = sub_1000193A4(&qword_1010EE1D0, &qword_1010EF7C0, (const char *)&protocol conformance descriptor for Identifier<A>);
    v15 = dispatch thunk of CustomStringConvertible.description.getter(v11, v14);
    v17 = v16;
    (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v10, v11);
    *(_QWORD *)(v0 + 16) = sub_100016940(v15, v17, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v13 + 4, v13 + 12);
    swift_bridgeObjectRelease();
    swift_release_n(v12, 2);
    *(_WORD *)(v13 + 12) = 2080;
    v18 = sub_100132D48();
    *(_QWORD *)(v0 + 24) = sub_100016940(v18, v19, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v13 + 14, v13 + 22);
    swift_bridgeObjectRelease();
    sub_1000126B0(v9, type metadata accessor for AccessoryMetadata);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Read metadata for %s: %s", (uint8_t *)v13, 0x16u);
    swift_arrayDestroy(v29, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v29, -1, -1);
    swift_slowDealloc(v13, -1, -1);
  }
  else
  {
    swift_release_n(*(_QWORD *)(v0 + 40), 2);
    sub_1000126B0(v9, type metadata accessor for AccessoryMetadata);
  }

  v20 = *(_QWORD *)(v0 + 88);
  v21 = *(_QWORD *)(v0 + 96);
  v22 = *(_QWORD *)(v0 + 72);
  v23 = *(_QWORD *)(v0 + 80);
  v24 = *(_QWORD *)(v0 + 64);
  v25 = *(_QWORD *)(v0 + 32);
  sub_1000126EC(v21, v25, type metadata accessor for AccessoryMetadata);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v23 + 56))(v25, 0, 1, v22);
  v26 = sub_10001A9A8(&qword_101115FF8);
  swift_storeEnumTagMultiPayload(v25, v26, 0);
  swift_task_dealloc(v21);
  swift_task_dealloc(v20);
  swift_task_dealloc(v24);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100B537C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 88);
  v2 = *(_QWORD *)(v0 + 64);
  swift_task_dealloc(*(_QWORD *)(v0 + 96));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100B5380C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v4[16] = a3;
  v4[17] = v3;
  v4[14] = a1;
  v4[15] = a2;
  v5 = type metadata accessor for UUID(0);
  v4[18] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[19] = v6;
  v4[20] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10001A9A8(&qword_1010EF7C0);
  v4[21] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v4[22] = v8;
  v4[23] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Duration.UnitsFormatStyle.Unit(0);
  v4[24] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v4[25] = v10;
  v4[26] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Logger(0);
  v4[27] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v4[28] = v12;
  v4[29] = swift_task_alloc((*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_10001A9A8(&qword_1010EC638);
  v4[30] = v13;
  v14 = *(_QWORD *)(v13 - 8);
  v4[31] = v14;
  v15 = (*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[32] = swift_task_alloc(v15);
  v4[33] = swift_task_alloc(v15);
  v4[34] = swift_task_alloc(v15);
  v16 = sub_10001A9A8((uint64_t *)&unk_101115F50);
  v4[35] = v16;
  v17 = *(_QWORD *)(v16 - 8);
  v4[36] = v17;
  v18 = (*(_QWORD *)(v17 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[37] = swift_task_alloc(v18);
  v4[38] = swift_task_alloc(v18);
  v4[39] = swift_task_alloc(v18);
  v4[40] = swift_task_alloc(v18);
  v19 = type metadata accessor for ContinuousClock.Instant(0);
  v4[41] = v19;
  v20 = *(_QWORD *)(v19 - 8);
  v4[42] = v20;
  v21 = (*(_QWORD *)(v20 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[43] = swift_task_alloc(v21);
  v4[44] = swift_task_alloc(v21);
  v4[45] = swift_task_alloc(v21);
  v4[46] = swift_task_alloc(v21);
  v22 = type metadata accessor for ContinuousClock(0);
  v4[47] = v22;
  v23 = *(_QWORD *)(v22 - 8);
  v4[48] = v23;
  v4[49] = swift_task_alloc((*(_QWORD *)(v23 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100B53A00, v3, 0);
}

uint64_t sub_100B53A00(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v6)(void);

  v2 = ContinuousClock.init()(a1);
  v3 = static Task<>.checkCancellation()(v2);
  ContinuousClock.now.getter(v3);
  v6 = (uint64_t (*)(void))((char *)&async function pointer to dispatch thunk of Peripheral.connect()
                         + async function pointer to dispatch thunk of Peripheral.connect());
  v4 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of Peripheral.connect() + 1));
  *(_QWORD *)(v1 + 400) = v4;
  *v4 = v1;
  v4[1] = sub_100B53AB4;
  return v6();
}

uint64_t sub_100B53AB4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v5;
  uint64_t (*v6)(_QWORD);

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 400);
  v3 = *(_QWORD **)v1;
  v3[51] = v0;
  swift_task_dealloc(v2);
  if (v0)
    return swift_task_switch(sub_100B55504, v3[17], 0);
  v6 = (uint64_t (*)(_QWORD))((char *)&async function pointer to dispatch thunk of Peripheral.subscript.getter
                                      + async function pointer to dispatch thunk of Peripheral.subscript.getter);
  v5 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of Peripheral.subscript.getter
                                  + 1));
  v3[52] = v5;
  *v5 = v3;
  v5[1] = sub_100B53B60;
  return v6(v3[16]);
}

uint64_t sub_100B53B60(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 416);
  v3[53] = a1;
  v3[54] = v1;
  swift_task_dealloc(v4);
  if (v1)
    v5 = sub_100B55578;
  else
    v5 = sub_100B53BCC;
  return swift_task_switch(v5, v3[17], 0);
}

uint64_t sub_100B53BCC(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t (*v5)(void);

  v2 = v1[54];
  static Task<>.checkCancellation()(a1);
  if (!v2)
  {
    sub_10009A380(0, 11, 0);
    __asm { BR              X9 }
  }
  (*(void (**)(_QWORD, _QWORD))(v1[42] + 8))(v1[46], v1[41]);
  swift_release();
  v1[90] = v2;
  v5 = (uint64_t (*)(void))((char *)&async function pointer to dispatch thunk of Peripheral.cancelConnection()
                         + async function pointer to dispatch thunk of Peripheral.cancelConnection());
  v3 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of Peripheral.cancelConnection()
                                  + 1));
  v1[91] = v3;
  *v3 = v1;
  v3[1] = sub_100B55370;
  return v5();
}

uint64_t sub_100B53F2C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 448);
  *(_QWORD *)(*v1 + 456) = v0;
  swift_task_dealloc(v3);
  v4 = *(_QWORD *)(v2 + 136);
  swift_bridgeObjectRelease();
  if (v0)
  {
    v5 = sub_100B555EC;
  }
  else
  {
    swift_bridgeObjectRelease();
    v5 = sub_100B53FB0;
  }
  return swift_task_switch(v5, v4, 0);
}

uint64_t sub_100B53FB0(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  _QWORD *v6;
  uint64_t (*v7)(void);
  uint64_t (*v8)(_QWORD);

  v2 = v1[57];
  static Task<>.checkCancellation()(a1);
  if (v2)
  {
    (*(void (**)(_QWORD, _QWORD))(v1[42] + 8))(v1[46], v1[41]);
    swift_release();
    v1[90] = v2;
    v7 = (uint64_t (*)(void))((char *)&async function pointer to dispatch thunk of Peripheral.cancelConnection()
                           + async function pointer to dispatch thunk of Peripheral.cancelConnection());
    v3 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of Peripheral.cancelConnection()
                                    + 1));
    v1[91] = v3;
    *v3 = v1;
    v3[1] = sub_100B55370;
    return v7();
  }
  else
  {
    v5 = type metadata accessor for Characteristic(0);
    v1[58] = v5;
    Identifier.init(stringLiteral:)("6AA50001-6352-4D57-A7B4-003A416FBB0B", 36, 2, v5);
    v8 = (uint64_t (*)(_QWORD))((char *)&async function pointer to dispatch thunk of Service.subscript.getter
                                        + async function pointer to dispatch thunk of Service.subscript.getter);
    v6 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of Service.subscript.getter
                                    + 1));
    v1[59] = v6;
    *v6 = v1;
    v6[1] = sub_100B540C0;
    return v8(v1[39]);
  }
}

uint64_t sub_100B540C0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v11)(uint64_t, uint64_t);
  _QWORD *v12;
  uint64_t (*v13)(_QWORD);

  v4 = *(_QWORD *)(*(_QWORD *)v2 + 472);
  v5 = *(_QWORD **)v2;
  v5[60] = a1;
  v5[61] = v1;
  swift_task_dealloc(v4);
  v6 = v5[39];
  v7 = v5[35];
  v8 = v5[36];
  if (v1)
  {
    v9 = v5[17];
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
    return swift_task_switch(sub_100B55678, v9, 0);
  }
  else
  {
    v11 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
    v5[62] = v11;
    v11(v6, v7);
    v13 = (uint64_t (*)(_QWORD))((char *)&async function pointer to dispatch thunk of Characteristic.read()
                                         + async function pointer to dispatch thunk of Characteristic.read());
    v12 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of Characteristic.read()
                                     + 1));
    v5[63] = v12;
    *v12 = v5;
    v12[1] = sub_100B54198;
    return v13(v5[34]);
  }
}

uint64_t sub_100B54198()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v6;
  uint64_t v7;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 504);
  v3 = *(_QWORD **)v1;
  v3[64] = v0;
  swift_task_dealloc(v2);
  if (v0)
  {
    v4 = v3[17];
    swift_release();
    return swift_task_switch(sub_100B55704, v4, 0);
  }
  else
  {
    swift_release();
    v6 = (_QWORD *)swift_task_alloc(async function pointer to AsyncSequence.first()[1]);
    v3[65] = v6;
    v7 = sub_1000193A4((unint64_t *)&unk_101116020, &qword_1010EC638, (const char *)&protocol conformance descriptor for AsyncThrowingStream<A, B>);
    v3[66] = v7;
    *v6 = v3;
    v6[1] = sub_100B5427C;
    return AsyncSequence.first()(v3 + 2, v3[30], v7);
  }
}

uint64_t sub_100B5427C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  uint64_t (*v8)();

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 520);
  *(_QWORD *)(*(_QWORD *)v1 + 536) = v0;
  swift_task_dealloc(v3);
  v4 = v2[34];
  v5 = v2[30];
  v6 = v2[17];
  v7 = *(void (**)(uint64_t, uint64_t))(v2[31] + 8);
  if (v0)
  {
    v7(v4, v5);
    v8 = sub_100B55790;
  }
  else
  {
    v2[68] = v7;
    v7(v4, v5);
    v8 = sub_100B54304;
  }
  return swift_task_switch(v8, v6, 0);
}

uint64_t sub_100B54304()
{
  _QWORD *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t (*v23)(void);
  uint64_t (*v24)(_QWORD);

  v1 = v0[2];
  v2 = v0[3];
  v0[69] = v1;
  v0[70] = v2;
  if (v2 >> 60 == 15)
    goto LABEL_4;
  sub_10001BBBC(v1, v2);
  sub_1001EE65C(v1, v2);
  v0[71] = v3;
  v0[72] = v4;
  if (v4 >> 60 == 15)
  {
    sub_10001EF3C(v1, v2);
LABEL_4:
    v5 = v0[58];
    v6 = v0[46];
    v7 = v0[41];
    v8 = v0[42];
    v9 = v0[35];
    v10 = v0[36];
    v11 = type metadata accessor for BeaconScanner.Error(0);
    v12 = sub_100006C64(&qword_101115F48, 255, type metadata accessor for BeaconScanner.Error, (uint64_t)&unk_100E61570);
    v13 = swift_allocError(v11, v12, 0, 0);
    v15 = v14;
    Identifier.init(stringLiteral:)("6AA50001-6352-4D57-A7B4-003A416FBB0B", 36, 2, v5);
    v16 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v10 + 56))(v15, 0, 2, v9);
    swift_willThrow(v16);
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
LABEL_5:
    v0[90] = v13;
    v23 = (uint64_t (*)(void))((char *)&async function pointer to dispatch thunk of Peripheral.cancelConnection()
                            + async function pointer to dispatch thunk of Peripheral.cancelConnection());
    v17 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of Peripheral.cancelConnection()
                                     + 1));
    v0[91] = v17;
    *v17 = v0;
    v17[1] = sub_100B55370;
    return v23();
  }
  v19 = v3;
  v20 = v4;
  v21 = v0[67];
  static Task<>.checkCancellation()(v3);
  if (v21)
  {
    v13 = v21;
    (*(void (**)(_QWORD, _QWORD))(v0[42] + 8))(v0[46], v0[41]);
    sub_10001EF3C(v19, v20);
    sub_10001EF3C(v1, v2);
    swift_release();
    goto LABEL_5;
  }
  Identifier.init(stringLiteral:)("6AA50002-6352-4D57-A7B4-003A416FBB0B", 36, 2, v0[58]);
  v24 = (uint64_t (*)(_QWORD))((char *)&async function pointer to dispatch thunk of Service.subscript.getter
                                       + async function pointer to dispatch thunk of Service.subscript.getter);
  v22 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of Service.subscript.getter
                                   + 1));
  v0[73] = v22;
  *v22 = v0;
  v22[1] = sub_100B54550;
  return v24(v0[38]);
}

uint64_t sub_100B54550(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v11;
  uint64_t (*v12)(_QWORD);

  v4 = *(_QWORD *)(*(_QWORD *)v2 + 584);
  v5 = *(_QWORD **)v2;
  v5[74] = a1;
  v5[75] = v1;
  swift_task_dealloc(v4);
  v6 = (void (*)(uint64_t, uint64_t))v5[62];
  v7 = v5[38];
  v8 = v5[35];
  if (v1)
  {
    v9 = v5[17];
    v6(v7, v8);
    return swift_task_switch(sub_100B5581C, v9, 0);
  }
  else
  {
    v6(v7, v8);
    v12 = (uint64_t (*)(_QWORD))((char *)&async function pointer to dispatch thunk of Characteristic.read()
                                         + async function pointer to dispatch thunk of Characteristic.read());
    v11 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of Characteristic.read()
                                     + 1));
    v5[76] = v11;
    *v11 = v5;
    v11[1] = sub_100B54624;
    return v12(v5[33]);
  }
}

uint64_t sub_100B54624()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v6;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 608);
  v3 = *(_QWORD **)v1;
  v3[77] = v0;
  swift_task_dealloc(v2);
  if (v0)
  {
    v4 = v3[17];
    swift_release();
    return swift_task_switch(sub_100B558E0, v4, 0);
  }
  else
  {
    swift_release();
    v6 = (_QWORD *)swift_task_alloc(async function pointer to AsyncSequence.first()[1]);
    v3[78] = v6;
    *v6 = v3;
    v6[1] = sub_100B546E8;
    return AsyncSequence.first()(v3 + 4, v3[30], v3[66]);
  }
}

uint64_t sub_100B546E8()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)();

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 624);
  *(_QWORD *)(*(_QWORD *)v1 + 632) = v0;
  swift_task_dealloc(v3);
  v4 = (void (*)(uint64_t, uint64_t))v2[68];
  v5 = v2[33];
  v6 = v2[30];
  v7 = v2[17];
  v4(v5, v6);
  if (v0)
    v8 = sub_100B559A4;
  else
    v8 = sub_100B54760;
  return swift_task_switch(v8, v7, 0);
}

uint64_t sub_100B54760()
{
  _QWORD *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t (*v29)(void);
  uint64_t (*v30)(_QWORD);

  v1 = v0[4];
  v2 = v0[5];
  v0[80] = v1;
  v0[81] = v2;
  if (v2 >> 60 == 15)
    goto LABEL_6;
  v0[6] = v1;
  v0[7] = v2;
  sub_100035530();
  v3 = DataProtocol.nullTerminatedUTF8String.getter(&type metadata for Data);
  v0[10] = v3;
  v0[11] = v4;
  v0[82] = v4;
  if (!v4)
  {
    sub_10001EF3C(v1, v2);
LABEL_6:
    v11 = v0[72];
    v12 = v0[71];
    v13 = v0[69];
    v14 = v0[58];
    v27 = v0[70];
    v28 = v0[46];
    v25 = v0[42];
    v26 = v0[41];
    v15 = v0[35];
    v16 = v0[36];
    v17 = type metadata accessor for BeaconScanner.Error(0);
    v18 = sub_100006C64(&qword_101115F48, 255, type metadata accessor for BeaconScanner.Error, (uint64_t)&unk_100E61570);
    v6 = swift_allocError(v17, v18, 0, 0);
    v20 = v19;
    Identifier.init(stringLiteral:)("6AA50002-6352-4D57-A7B4-003A416FBB0B", 36, 2, v14);
    v21 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v16 + 56))(v20, 0, 2, v15);
    swift_willThrow(v21);
    swift_release();
    sub_10001EF3C(v12, v11);
    sub_10001EF3C(v13, v27);
    (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v28, v26);
    goto LABEL_7;
  }
  v5 = v0[79];
  static Task<>.checkCancellation()(v3);
  if (v5)
  {
    v6 = v5;
    v7 = v0[72];
    v8 = v0[71];
    v9 = v0[70];
    v10 = v0[69];
    (*(void (**)(_QWORD, _QWORD))(v0[42] + 8))(v0[46], v0[41]);
    swift_bridgeObjectRelease();
    sub_10001EF3C(v1, v2);
    sub_10001EF3C(v8, v7);
    sub_10001EF3C(v10, v9);
    swift_release();
LABEL_7:
    v0[90] = v6;
    v29 = (uint64_t (*)(void))((char *)&async function pointer to dispatch thunk of Peripheral.cancelConnection()
                            + async function pointer to dispatch thunk of Peripheral.cancelConnection());
    v22 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of Peripheral.cancelConnection()
                                     + 1));
    v0[91] = v22;
    *v22 = v0;
    v22[1] = sub_100B55370;
    return v29();
  }
  Identifier.init(stringLiteral:)("6AA50007-6352-4D57-A7B4-003A416FBB0B", 36, 2, v0[58]);
  v30 = (uint64_t (*)(_QWORD))((char *)&async function pointer to dispatch thunk of Service.subscript.getter
                                       + async function pointer to dispatch thunk of Service.subscript.getter);
  v24 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of Service.subscript.getter
                                   + 1));
  v0[83] = v24;
  *v24 = v0;
  v24[1] = sub_100B549FC;
  return v30(v0[37]);
}

uint64_t sub_100B549FC(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v8;
  uint64_t (*v9)(_QWORD);

  v4 = *(_QWORD *)(*v2 + 664);
  v5 = *v2;
  *(_QWORD *)(v5 + 672) = a1;
  *(_QWORD *)(v5 + 680) = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    v6 = *(_QWORD *)(v5 + 136);
    (*(void (**)(_QWORD, _QWORD))(v5 + 496))(*(_QWORD *)(v5 + 296), *(_QWORD *)(v5 + 280));
    swift_bridgeObjectRelease();
    return swift_task_switch(sub_100B55A68, v6, 0);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v5 + 496))(*(_QWORD *)(v5 + 296), *(_QWORD *)(v5 + 280));
    v9 = (uint64_t (*)(_QWORD))((char *)&async function pointer to dispatch thunk of Characteristic.read()
                                        + async function pointer to dispatch thunk of Characteristic.read());
    v8 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of Characteristic.read()
                                    + 1));
    *(_QWORD *)(v5 + 688) = v8;
    *v8 = v5;
    v8[1] = sub_100B54AE8;
    return v9(*(_QWORD *)(v5 + 256));
  }
}

uint64_t sub_100B54AE8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v6;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 688);
  v3 = *(_QWORD **)v1;
  v3[87] = v0;
  swift_task_dealloc(v2);
  if (v0)
  {
    v4 = v3[17];
    swift_release();
    swift_bridgeObjectRelease();
    return swift_task_switch(sub_100B55B48, v4, 0);
  }
  else
  {
    swift_release();
    v6 = (_QWORD *)swift_task_alloc(async function pointer to AsyncSequence.first()[1]);
    v3[88] = v6;
    *v6 = v3;
    v6[1] = sub_100B54BB8;
    return AsyncSequence.first()(v3 + 8, v3[30], v3[66]);
  }
}

uint64_t sub_100B54BB8()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)();
  uint64_t v9;
  uint64_t v10;

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 704);
  *(_QWORD *)(*(_QWORD *)v1 + 712) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = (void (*)(uint64_t, uint64_t))v2[68];
    v5 = v2[32];
    v6 = v2[30];
    v7 = v2[17];
    v4(v5, v6);
    swift_bridgeObjectRelease();
    v8 = sub_100B55C28;
    v9 = v7;
  }
  else
  {
    v10 = v2[17];
    ((void (*)(_QWORD, _QWORD))v2[68])(v2[32], v2[30]);
    v8 = sub_100B54C54;
    v9 = v10;
  }
  return swift_task_switch(v8, v9, 0);
}

uint64_t sub_100B54C54()
{
  _QWORD *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  _BOOL4 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  void (*v31)(uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t (*v46)(void);
  void (*v47)(uint64_t, uint64_t);
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int *v54;
  _QWORD *v55;
  _QWORD *v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  void (*v86)(uint64_t, uint64_t);
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  NSObject *v91;
  uint64_t v92;
  os_log_type_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;
  int v106;
  uint64_t v107;
  uint64_t (*v108)(void);
  uint64_t v109[3];

  v1 = v0[8];
  v2 = v0[9];
  if (v2 >> 60 == 15)
  {
    swift_bridgeObjectRelease();
LABEL_9:
    v33 = v0[80];
    v34 = v0[72];
    v35 = v0[71];
    v96 = v0[69];
    v100 = v0[81];
    v36 = v0[58];
    v105 = v0[70];
    v107 = v0[46];
    v94 = v0[42];
    v103 = v0[41];
    v37 = v0[35];
    v38 = v0[36];
    v39 = type metadata accessor for BeaconScanner.Error(0);
    v40 = sub_100006C64(&qword_101115F48, 255, type metadata accessor for BeaconScanner.Error, (uint64_t)&unk_100E61570);
    v41 = swift_allocError(v39, v40, 0, 0);
    v43 = v42;
    Identifier.init(stringLiteral:)("6AA50007-6352-4D57-A7B4-003A416FBB0B", 36, 2, v36);
    v44 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v38 + 56))(v43, 0, 2, v37);
    swift_willThrow(v44);
    swift_release();
    sub_10001EF3C(v35, v34);
    sub_10001EF3C(v33, v100);
    sub_10001EF3C(v96, v105);
    (*(void (**)(uint64_t, uint64_t))(v94 + 8))(v107, v103);
    v0[90] = v41;
    v108 = (uint64_t (*)(void))((char *)&async function pointer to dispatch thunk of Peripheral.cancelConnection()
                             + async function pointer to dispatch thunk of Peripheral.cancelConnection());
    v45 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of Peripheral.cancelConnection()
                                     + 1));
    v0[91] = v45;
    *v45 = v0;
    v45[1] = sub_100B55370;
    v46 = v108;
    return v46();
  }
  sub_10001BBBC(v0[8], v0[9]);
  sub_10072D548(v1, v2);
  if ((v3 & 0x100000000) != 0)
  {
    swift_bridgeObjectRelease();
    sub_10001EF3C(v1, v2);
    goto LABEL_9;
  }
  v102 = v1;
  v104 = v2;
  v106 = v3;
  ContinuousClock.now.getter(v3);
  if (qword_1010EA220 != -1)
    swift_once(&qword_1010EA220, sub_100B4B8A8);
  v4 = v0[46];
  v98 = v0[45];
  v6 = v0[43];
  v5 = v0[44];
  v8 = v0[41];
  v7 = v0[42];
  v9 = v0[28];
  v10 = v0[29];
  v11 = v0[27];
  v12 = sub_10001A9E8(v11, (uint64_t)qword_1011B7CE0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v10, v12, v11);
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16);
  v13(v5, v4, v8);
  v14 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v13)(v6, v98, v8);
  v15 = Logger.logObject.getter(v14);
  v16 = static os_log_type_t.default.getter(v15);
  v17 = os_log_type_enabled(v15, v16);
  v18 = v0[43];
  v19 = v0[44];
  v20 = v0[41];
  v22 = v0[28];
  v21 = v0[29];
  v23 = v0[27];
  if (v17)
  {
    v99 = v0[27];
    v93 = v16;
    v24 = v0[25];
    v25 = v0[26];
    v82 = v0[24];
    v91 = v15;
    v84 = v0[42];
    v26 = (uint8_t *)swift_slowAlloc(12, -1);
    v89 = swift_slowAlloc(32, -1);
    v109[0] = v89;
    *(_DWORD *)v26 = 136446210;
    static Duration.UnitsFormatStyle.Unit.milliseconds.getter(v89);
    v27 = sub_100006C64(&qword_101116030, 255, (uint64_t (*)(uint64_t))&type metadata accessor for ContinuousClock.Instant, (uint64_t)&protocol conformance descriptor for ContinuousClock.Instant);
    v28 = static Duration.description<A>(_:_:units:)(v19, v18, v25, v20, v27);
    v87 = v22;
    v30 = v29;
    (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v25, v82);
    v0[13] = sub_100016940(v28, v30, v109);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 13, v0 + 14, v26 + 4, v26 + 12);
    swift_bridgeObjectRelease();
    v31 = *(void (**)(uint64_t, uint64_t))(v84 + 8);
    v31(v19, v20);
    v86 = v31;
    v31(v18, v20);
    _os_log_impl((void *)&_mh_execute_header, v91, v93, "Metadata read time: %{public}s", v26, 0xCu);
    swift_arrayDestroy(v89, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v89, -1, -1);
    swift_slowDealloc(v26, -1, -1);

    v32 = (*(uint64_t (**)(uint64_t, uint64_t))(v87 + 8))(v21, v99);
  }
  else
  {
    v47 = *(void (**)(uint64_t, uint64_t))(v0[42] + 8);
    v47(v0[44], v0[41]);
    v86 = v47;
    v47(v18, v20);

    v32 = (*(uint64_t (**)(uint64_t, uint64_t))(v22 + 8))(v21, v23);
  }
  v77 = v0[10];
  v78 = v0[82];
  v75 = v0[71];
  v76 = v0[72];
  v69 = v0[81];
  v70 = v0[70];
  v68 = v0[69];
  v73 = v0[47];
  v74 = v0[49];
  v71 = v0[46];
  v72 = v0[48];
  v65 = v0[45];
  v66 = v0[80];
  v79 = v0[44];
  v80 = v0[43];
  v48 = v0[41];
  v81 = v0[40];
  v83 = v0[39];
  v85 = v0[38];
  v88 = v0[37];
  v90 = v0[34];
  v92 = v0[33];
  v95 = v0[32];
  v97 = v0[29];
  v101 = v0[26];
  v49 = v0[22];
  v50 = v0[23];
  v51 = v0[20];
  v52 = v0[21];
  v64 = v0[19];
  v67 = v0[18];
  v53 = v0[14];
  Peripheral.id.getter(v32);
  Identifier.id.getter(v52);
  (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v50, v52);
  swift_release();
  sub_10001EF3C(v102, v104);
  sub_10001EF3C(v66, v69);
  sub_10001EF3C(v68, v70);
  v86(v65, v48);
  v86(v71, v48);
  (*(void (**)(uint64_t, uint64_t))(v72 + 8))(v74, v73);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v64 + 32))(v53, v51, v67);
  v54 = (int *)type metadata accessor for AccessoryMetadata(0);
  v55 = (_QWORD *)(v53 + v54[5]);
  *v55 = v75;
  v55[1] = v76;
  v56 = (_QWORD *)(v53 + v54[6]);
  *v56 = v77;
  v56[1] = v78;
  v57 = (_QWORD *)(v53 + v54[7]);
  *v57 = 0;
  v57[1] = 0;
  *(_DWORD *)(v53 + v54[8]) = v106;
  v58 = v53 + v54[9];
  *(_DWORD *)v58 = 0;
  *(_BYTE *)(v58 + 4) = 1;
  v59 = v53 + v54[10];
  *(_QWORD *)v59 = 0;
  *(_QWORD *)(v59 + 8) = 0;
  *(_BYTE *)(v59 + 16) = 1;
  v60 = v53 + v54[11];
  *(_QWORD *)v60 = 0;
  *(_BYTE *)(v60 + 8) = 1;
  v61 = v53 + v54[12];
  *(_DWORD *)v61 = 0;
  *(_BYTE *)(v61 + 4) = 1;
  *(_BYTE *)(v53 + v54[13]) = 4;
  *(_BYTE *)(v53 + v54[14]) = 5;
  v62 = (_QWORD *)(v53 + v54[15]);
  *v62 = 0;
  v62[1] = 0xE000000000000000;
  swift_task_dealloc(v74);
  swift_task_dealloc(v71);
  swift_task_dealloc(v65);
  swift_task_dealloc(v79);
  swift_task_dealloc(v80);
  swift_task_dealloc(v81);
  swift_task_dealloc(v83);
  swift_task_dealloc(v85);
  swift_task_dealloc(v88);
  swift_task_dealloc(v90);
  swift_task_dealloc(v92);
  swift_task_dealloc(v95);
  swift_task_dealloc(v97);
  swift_task_dealloc(v101);
  swift_task_dealloc(v50);
  swift_task_dealloc(v51);
  v46 = (uint64_t (*)(void))v0[1];
  return v46();
}

uint64_t sub_100B55370()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 728);
  *(_QWORD *)(*v1 + 736) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_100B55D08;
  else
    v4 = sub_100B553D4;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 136), 0);
}

uint64_t sub_100B553D4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v2 = *(_QWORD *)(v1 + 384);
  v3 = *(_QWORD *)(v1 + 392);
  v5 = *(_QWORD *)(v1 + 368);
  v4 = *(_QWORD *)(v1 + 376);
  v6 = *(_QWORD *)(v1 + 352);
  v7 = *(_QWORD *)(v1 + 360);
  v8 = *(_QWORD *)(v1 + 344);
  v9 = *(_QWORD *)(v1 + 320);
  v11 = *(_QWORD *)(v1 + 312);
  v12 = *(_QWORD *)(v1 + 304);
  v13 = *(_QWORD *)(v1 + 296);
  v14 = *(_QWORD *)(v1 + 272);
  v15 = *(_QWORD *)(v1 + 264);
  v16 = *(_QWORD *)(v1 + 256);
  v17 = *(_QWORD *)(v1 + 232);
  v18 = *(_QWORD *)(v1 + 208);
  v19 = *(_QWORD *)(v1 + 184);
  v20 = *(_QWORD *)(v1 + 160);
  swift_willThrow(a1);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v3, v4);
  swift_task_dealloc(v3);
  swift_task_dealloc(v5);
  swift_task_dealloc(v7);
  swift_task_dealloc(v6);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_100B55504()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t (*v3)(void);

  (*(void (**)(_QWORD, _QWORD))(v0[42] + 8))(v0[46], v0[41]);
  v0[90] = v0[51];
  v3 = (uint64_t (*)(void))((char *)&async function pointer to dispatch thunk of Peripheral.cancelConnection()
                         + async function pointer to dispatch thunk of Peripheral.cancelConnection());
  v1 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of Peripheral.cancelConnection()
                                  + 1));
  v0[91] = v1;
  *v1 = v0;
  v1[1] = sub_100B55370;
  return v3();
}

uint64_t sub_100B55578()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t (*v3)(void);

  (*(void (**)(_QWORD, _QWORD))(v0[42] + 8))(v0[46], v0[41]);
  v0[90] = v0[54];
  v3 = (uint64_t (*)(void))((char *)&async function pointer to dispatch thunk of Peripheral.cancelConnection()
                         + async function pointer to dispatch thunk of Peripheral.cancelConnection());
  v1 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of Peripheral.cancelConnection()
                                  + 1));
  v0[91] = v1;
  *v1 = v0;
  v1[1] = sub_100B55370;
  return v3();
}

uint64_t sub_100B555EC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v6)(void);

  v1 = v0[46];
  v2 = v0[41];
  v3 = v0[42];
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  v0[90] = v0[57];
  v6 = (uint64_t (*)(void))((char *)&async function pointer to dispatch thunk of Peripheral.cancelConnection()
                         + async function pointer to dispatch thunk of Peripheral.cancelConnection());
  v4 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of Peripheral.cancelConnection()
                                  + 1));
  v0[91] = v4;
  *v4 = v0;
  v4[1] = sub_100B55370;
  return v6();
}

uint64_t sub_100B55678()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v6)(void);

  v1 = v0[46];
  v2 = v0[41];
  v3 = v0[42];
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  v0[90] = v0[61];
  v6 = (uint64_t (*)(void))((char *)&async function pointer to dispatch thunk of Peripheral.cancelConnection()
                         + async function pointer to dispatch thunk of Peripheral.cancelConnection());
  v4 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of Peripheral.cancelConnection()
                                  + 1));
  v0[91] = v4;
  *v4 = v0;
  v4[1] = sub_100B55370;
  return v6();
}

uint64_t sub_100B55704()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v6)(void);

  v1 = v0[46];
  v2 = v0[41];
  v3 = v0[42];
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  v0[90] = v0[64];
  v6 = (uint64_t (*)(void))((char *)&async function pointer to dispatch thunk of Peripheral.cancelConnection()
                         + async function pointer to dispatch thunk of Peripheral.cancelConnection());
  v4 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of Peripheral.cancelConnection()
                                  + 1));
  v0[91] = v4;
  *v4 = v0;
  v4[1] = sub_100B55370;
  return v6();
}

uint64_t sub_100B55790()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v6)(void);

  v1 = v0[46];
  v2 = v0[41];
  v3 = v0[42];
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  v0[90] = v0[67];
  v6 = (uint64_t (*)(void))((char *)&async function pointer to dispatch thunk of Peripheral.cancelConnection()
                         + async function pointer to dispatch thunk of Peripheral.cancelConnection());
  v4 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of Peripheral.cancelConnection()
                                  + 1));
  v0[91] = v4;
  *v4 = v0;
  v4[1] = sub_100B55370;
  return v6();
}

uint64_t sub_100B5581C()
{
  _QWORD *v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t (*v10)(void);

  v1 = v0[72];
  v2 = v0[71];
  v3 = v0[70];
  v4 = v0[69];
  v5 = v0[46];
  v6 = v0[41];
  v7 = v0[42];
  swift_release();
  sub_10001EF3C(v2, v1);
  sub_10001EF3C(v4, v3);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  v0[90] = v0[75];
  v10 = (uint64_t (*)(void))((char *)&async function pointer to dispatch thunk of Peripheral.cancelConnection()
                          + async function pointer to dispatch thunk of Peripheral.cancelConnection());
  v8 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of Peripheral.cancelConnection()
                                  + 1));
  v0[91] = v8;
  *v8 = v0;
  v8[1] = sub_100B55370;
  return v10();
}

uint64_t sub_100B558E0()
{
  _QWORD *v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t (*v10)(void);

  v1 = v0[72];
  v2 = v0[71];
  v3 = v0[70];
  v4 = v0[69];
  v5 = v0[46];
  v6 = v0[41];
  v7 = v0[42];
  swift_release();
  sub_10001EF3C(v2, v1);
  sub_10001EF3C(v4, v3);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  v0[90] = v0[77];
  v10 = (uint64_t (*)(void))((char *)&async function pointer to dispatch thunk of Peripheral.cancelConnection()
                          + async function pointer to dispatch thunk of Peripheral.cancelConnection());
  v8 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of Peripheral.cancelConnection()
                                  + 1));
  v0[91] = v8;
  *v8 = v0;
  v8[1] = sub_100B55370;
  return v10();
}

uint64_t sub_100B559A4()
{
  _QWORD *v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t (*v10)(void);

  v1 = v0[72];
  v2 = v0[71];
  v3 = v0[70];
  v4 = v0[69];
  v5 = v0[46];
  v6 = v0[41];
  v7 = v0[42];
  swift_release();
  sub_10001EF3C(v2, v1);
  sub_10001EF3C(v4, v3);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  v0[90] = v0[79];
  v10 = (uint64_t (*)(void))((char *)&async function pointer to dispatch thunk of Peripheral.cancelConnection()
                          + async function pointer to dispatch thunk of Peripheral.cancelConnection());
  v8 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of Peripheral.cancelConnection()
                                  + 1));
  v0[91] = v8;
  *v8 = v0;
  v8[1] = sub_100B55370;
  return v10();
}

uint64_t sub_100B55A68()
{
  _QWORD *v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t (*v12)(void);

  v1 = v0[81];
  v2 = v0[80];
  v3 = v0[72];
  v4 = v0[71];
  v5 = v0[70];
  v6 = v0[69];
  v7 = v0[46];
  v8 = v0[41];
  v9 = v0[42];
  swift_release();
  sub_10001EF3C(v4, v3);
  sub_10001EF3C(v2, v1);
  sub_10001EF3C(v6, v5);
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
  v0[90] = v0[85];
  v12 = (uint64_t (*)(void))((char *)&async function pointer to dispatch thunk of Peripheral.cancelConnection()
                          + async function pointer to dispatch thunk of Peripheral.cancelConnection());
  v10 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of Peripheral.cancelConnection()
                                   + 1));
  v0[91] = v10;
  *v10 = v0;
  v10[1] = sub_100B55370;
  return v12();
}

uint64_t sub_100B55B48()
{
  _QWORD *v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t (*v12)(void);

  v1 = v0[81];
  v2 = v0[80];
  v3 = v0[72];
  v4 = v0[71];
  v5 = v0[70];
  v6 = v0[69];
  v7 = v0[46];
  v8 = v0[41];
  v9 = v0[42];
  swift_release();
  sub_10001EF3C(v4, v3);
  sub_10001EF3C(v2, v1);
  sub_10001EF3C(v6, v5);
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
  v0[90] = v0[87];
  v12 = (uint64_t (*)(void))((char *)&async function pointer to dispatch thunk of Peripheral.cancelConnection()
                          + async function pointer to dispatch thunk of Peripheral.cancelConnection());
  v10 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of Peripheral.cancelConnection()
                                   + 1));
  v0[91] = v10;
  *v10 = v0;
  v10[1] = sub_100B55370;
  return v12();
}

uint64_t sub_100B55C28()
{
  _QWORD *v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t (*v12)(void);

  v1 = v0[81];
  v2 = v0[80];
  v3 = v0[72];
  v4 = v0[71];
  v5 = v0[70];
  v6 = v0[69];
  v7 = v0[46];
  v8 = v0[41];
  v9 = v0[42];
  swift_release();
  sub_10001EF3C(v4, v3);
  sub_10001EF3C(v2, v1);
  sub_10001EF3C(v6, v5);
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
  v0[90] = v0[89];
  v12 = (uint64_t (*)(void))((char *)&async function pointer to dispatch thunk of Peripheral.cancelConnection()
                          + async function pointer to dispatch thunk of Peripheral.cancelConnection());
  v10 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of Peripheral.cancelConnection()
                                   + 1));
  v0[91] = v10;
  *v10 = v0;
  v10[1] = sub_100B55370;
  return v12();
}

uint64_t sub_100B55D08()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  _BOOL4 v5;
  uint64_t v6;
  uint8_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  if (qword_1010EA220 != -1)
    swift_once(&qword_1010EA220, sub_100B4B8A8);
  v1 = *(_QWORD *)(v0 + 736);
  sub_10001A9E8(*(_QWORD *)(v0 + 216), (uint64_t)qword_1011B7CE0);
  v2 = swift_errorRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter(v3);
  v5 = os_log_type_enabled(v3, v4);
  v6 = *(_QWORD *)(v0 + 736);
  if (v5)
  {
    v7 = (uint8_t *)swift_slowAlloc(12, -1);
    v8 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v7 = 138543362;
    v9 = _convertErrorToNSError(_:)(v6);
    *(_QWORD *)(v0 + 96) = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 96, v0 + 104, v7 + 4, v7 + 12);
    *v8 = v9;
    swift_errorRelease(v6);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "cancelConnection error in _readAccessoryMetadata() catch block: %{public}@", v7, 0xCu);
    v10 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v8, 1, v10);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v7, -1, -1);

    v11 = swift_errorRelease(v6);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 736));
    swift_errorRelease(v6);

  }
  v12 = *(_QWORD *)(v0 + 384);
  v13 = *(_QWORD *)(v0 + 392);
  v15 = *(_QWORD *)(v0 + 368);
  v14 = *(_QWORD *)(v0 + 376);
  v16 = *(_QWORD *)(v0 + 352);
  v17 = *(_QWORD *)(v0 + 360);
  v18 = *(_QWORD *)(v0 + 344);
  v19 = *(_QWORD *)(v0 + 320);
  v21 = *(_QWORD *)(v0 + 312);
  v22 = *(_QWORD *)(v0 + 304);
  v23 = *(_QWORD *)(v0 + 296);
  v24 = *(_QWORD *)(v0 + 272);
  v25 = *(_QWORD *)(v0 + 264);
  v26 = *(_QWORD *)(v0 + 256);
  v27 = *(_QWORD *)(v0 + 232);
  v28 = *(_QWORD *)(v0 + 208);
  v29 = *(_QWORD *)(v0 + 184);
  v30 = *(_QWORD *)(v0 + 160);
  swift_willThrow(v11);
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v13, v14);
  swift_task_dealloc(v13);
  swift_task_dealloc(v15);
  swift_task_dealloc(v17);
  swift_task_dealloc(v16);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100B55F98()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100B55FBC(uint64_t a1)
{
  uint64_t v1;

  return sub_100B4C7D8(a1, *(_QWORD *)(v1 + 16));
}

uint64_t type metadata accessor for BeaconScanner.Error(uint64_t a1)
{
  return sub_10001B630(a1, (uint64_t *)&unk_101116100, (uint64_t)&nominal type descriptor for BeaconScanner.Error);
}

uint64_t sub_100B55FD8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = sub_10001A9A8((uint64_t *)&unk_101117020);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = v3 | 7;
  v6 = (v4 + *(_QWORD *)(v2 + 64) + 23) & 0xFFFFFFFFFFFFFFF8;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();
  swift_unknownObjectRelease(*(_QWORD *)(v0 + v6));
  return swift_deallocObject(v0, ((v6 + 15) & 0xFFFFFFFFFFFFFFF8) + 8, v5);
}

uint64_t sub_100B56084(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  _QWORD *v14;

  v4 = *(_QWORD *)(sub_10001A9A8((uint64_t *)&unk_101117020) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = v5 + *(_QWORD *)(v4 + 64);
  v7 = (v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  v8 = *(_QWORD *)(v1 + 16);
  v9 = *(_QWORD *)(v1 + 24);
  v10 = v1 + v5;
  v11 = *(_QWORD *)(v1 + v7);
  v12 = *(_BYTE *)(v1 + v7 + 8);
  v13 = *(_QWORD *)(v1 + ((v6 + 23) & 0xFFFFFFFFFFFFFFF8));
  v14 = (_QWORD *)swift_task_alloc(dword_101115F74);
  *(_QWORD *)(v2 + 16) = v14;
  *v14 = v2;
  v14[1] = sub_100004A74;
  return sub_100B4CAB4(a1, v8, v9, v10, v11, v12, v13);
}

uint64_t sub_100B56160()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100B56184()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v2 = *(_QWORD *)(v0 + 16);
  v3 = (_QWORD *)swift_task_alloc(dword_101115FBC);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_100004A74;
  v3[15] = v2;
  return swift_task_switch(sub_100B4F44C, 0, 0);
}

id sub_100B561E4(char *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int *v8;
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t (*v11)(_QWORD);
  id v12;
  unsigned int v13;
  int v14;
  uint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  unsigned __int8 v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  Class v31;
  id v32;
  char *v33;
  Class v34;
  Class v35;
  unint64_t v36;
  Class v37;
  void *v38;
  Class v39;
  id v40;
  uint64_t *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  id v47;
  uint64_t v48;
  unsigned int v49;
  unint64_t v50;
  Class isa;
  uint64_t v52;
  int v53;
  int v54;
  unsigned int v55;
  id v56;
  id v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  char *v62;

  v2 = type metadata accessor for Date(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v62 = (char *)&v48 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DetailedDiscoveredObject(0);
  __chkstk_darwin(v5);
  v7 = (char *)&v48 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = (int *)type metadata accessor for DiscoveredObject(0);
  __chkstk_darwin(v8);
  v10 = (unsigned __int8 *)&v48 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10005972C((uint64_t)a1, (uint64_t)v10, v11);
  sub_10000F4A0(0, &qword_101116038, SPIndexInformation_ptr);
  sub_10005972C((uint64_t)a1, (uint64_t)v7, type metadata accessor for DetailedDiscoveredObject);
  v12 = sub_100B4F654((uint64_t)v7);
  v13 = *v10;
  v14 = v10[1];
  v56 = a1;
  v57 = v12;
  if (v14 != 1)
  {
    if (v13 == 1)
    {
      v16 = (uint64_t *)&a1[v8[9]];
      v18 = *v16;
      v17 = v16[1];
      v60 = *v16;
      if ((v17 & 0x2000000000000000) != 0)
        v17 &= ~0x2000000000000000uLL;
      v50 = v17;
      sub_10001BBBC(v18, v17);
      v49 = 1;
    }
    else
    {
      v49 = v13;
      v60 = 0;
      v50 = 0xC000000000000000;
    }
    v15 = 2;
    goto LABEL_10;
  }
  if (v13)
  {
    v60 = 0;
    v49 = 0;
    v50 = 0xC000000000000000;
    v15 = 1;
LABEL_10:
    v48 = v15;
    goto LABEL_11;
  }
  v42 = (uint64_t *)&a1[v8[9]];
  v43 = *v42;
  v44 = v42[1];
  v60 = *v42;
  if ((v44 & 0x2000000000000000) != 0)
    v44 &= ~0x2000000000000000uLL;
  v50 = v44;
  sub_10001BBBC(v43, v44);
  v49 = 0;
  v48 = 0;
LABEL_11:
  v19 = v10[2];
  v21 = *((_QWORD *)v10 + 1);
  v20 = *((_QWORD *)v10 + 2);
  (*(void (**)(char *, unsigned __int8 *, uint64_t))(v3 + 16))(v62, &v10[v8[7]], v2);
  v22 = sub_10001BD08(v21, v20);
  v23 = MACAddress.data.getter(v22);
  v24 = v10[v8[11]];
  v25 = v10[v8[12]];
  v26 = v10[v8[13] + 1];
  v58 = v3;
  v59 = v2;
  v54 = v24;
  v55 = v19;
  v53 = v25;
  v61 = v27;
  v28 = v23;
  if ((v26 & 1) != 0)
    isa = 0;
  else
    isa = UInt8._bridgeToObjectiveC()().super.super.isa;
  v29 = *(int *)&v10[v8[15]];
  sub_10000F4A0(0, &qword_101116040, SPAccessoryInformation_ptr);
  sub_10005972C((uint64_t)v56, (uint64_t)v7, type metadata accessor for DetailedDiscoveredObject);
  v30 = sub_100B4F86C((uint64_t)v7);
  v31 = 0;
  if (v20 >> 60 != 15)
  {
    v31 = Data._bridgeToObjectiveC()().super.isa;
    sub_10001EF3C(v21, v20);
  }
  v32 = objc_allocWithZone((Class)SPScannedObject);
  v33 = v62;
  v34 = Date._bridgeToObjectiveC()().super.isa;
  v52 = v28;
  v35 = Data._bridgeToObjectiveC()().super.isa;
  v36 = v50;
  v37 = Data._bridgeToObjectiveC()().super.isa;
  v47 = v30;
  v56 = v30;
  v38 = v57;
  v46 = v29;
  v39 = isa;
  BYTE1(v45) = v53;
  LOBYTE(v45) = v54;
  v40 = objc_msgSend(v32, "initWithAdvertisementType:poshNetwork:nearOwner:vendorPayload:scanDate:address:advertisement:status:ek:hint:rssi:indexInformation:acccessoryInformation:", v48, v49, v55, v31, v34, v35, v37, v45, isa, v46, v57, v47);

  (*(void (**)(char *, uint64_t))(v58 + 8))(v33, v59);
  sub_10001BC14(v60, v36);
  sub_10001BC14(v52, v61);
  sub_1000126B0((uint64_t)v10, type metadata accessor for DiscoveredObject);
  return v40;
}

uint64_t sub_100B565BC(uint64_t a1)
{
  uint64_t *v1;

  return sub_100B5185C(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t sub_100B565C8(uint64_t a1)
{
  return sub_100B51170(a1);
}

uint64_t sub_100B565D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = sub_10001A9A8(&qword_1010EC448);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 48) & ~v3;
  v5 = v3 | 7;
  v6 = ((*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v6, v5);
}

uint64_t sub_100B56664(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v4 = *(_QWORD *)(sub_10001A9A8(&qword_1010EC448) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = v1[2];
  v7 = v1[3];
  v8 = v1[4];
  v9 = v1[5];
  v10 = (uint64_t)v1 + v5;
  v11 = *(_QWORD *)((char *)v1 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFF8));
  v12 = (_QWORD *)swift_task_alloc(dword_101115FEC);
  *(_QWORD *)(v2 + 16) = v12;
  *v12 = v2;
  v12[1] = sub_100004C28;
  return sub_100B51A60(a1, v6, v7, v8, v9, v10, v11);
}

uint64_t sub_100B56720()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = sub_10001A9A8(&qword_1010EC448);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = v3 | 7;
  v6 = ((*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v6, v5);
}

uint64_t sub_100B567AC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = *(_QWORD *)(sub_10001A9A8(&qword_1010EC448) - 8);
  v5 = *(_QWORD *)(v1 + 16);
  v6 = *(_QWORD *)(v1 + 24);
  v7 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  v8 = (_QWORD *)swift_task_alloc(dword_101116004);
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_100004C28;
  return sub_100B5338C(a1, v5, v6, v7);
}

uint64_t sub_100B56854()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100B56880()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v2 = *(_QWORD *)(v0 + 32);
  v3 = (_QWORD *)swift_task_alloc(dword_10111604C);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_100004A74;
  v3[2] = v2;
  return swift_task_switch(sub_100B4CA18, v2, 0);
}

uint64_t *sub_100B568E0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else
  {
    v7 = sub_10001A9A8((uint64_t *)&unk_101115F50);
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 2, v7))
    {
      memcpy(a1, a2, *(_QWORD *)(v5 + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 2, v7);
    }
  }
  return a1;
}

uint64_t sub_100B569AC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = sub_10001A9A8((uint64_t *)&unk_101115F50);
  v3 = *(_QWORD *)(v2 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(a1, 2, v2);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
  return result;
}

void *sub_100B56A18(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = sub_10001A9A8((uint64_t *)&unk_101115F50);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 2, v6))
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 2, v6);
  }
  return a1;
}

void *sub_100B56AC0(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void *, uint64_t, uint64_t);
  int v9;
  int v10;

  v6 = sub_10001A9A8((uint64_t *)&unk_101115F50);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 2, v6);
  v10 = v8(a2, 2, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 24))(a1, a2, v6);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v7 + 16))(a1, a2, v6);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 2, v6);
  return a1;
}

void *sub_100B56BB4(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = sub_10001A9A8((uint64_t *)&unk_101115F50);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 2, v6))
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 2, v6);
  }
  return a1;
}

void *sub_100B56C5C(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void *, uint64_t, uint64_t);
  int v9;
  int v10;

  v6 = sub_10001A9A8((uint64_t *)&unk_101115F50);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 2, v6);
  v10 = v8(a2, 2, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 40))(a1, a2, v6);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v7 + 32))(a1, a2, v6);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 2, v6);
  return a1;
}

uint64_t sub_100B56D50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100B56D5C);
}

uint64_t sub_100B56D5C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;

  v4 = sub_10001A9A8((uint64_t *)&unk_101115F50);
  v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
  if (v5 >= 3)
    return v5 - 2;
  else
    return 0;
}

uint64_t sub_100B56DAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100B56DB8);
}

uint64_t sub_100B56DB8(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  if (a2)
    v5 = (a2 + 2);
  else
    v5 = 0;
  v6 = sub_10001A9A8((uint64_t *)&unk_101115F50);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(a1, v5, a3, v6);
}

uint64_t sub_100B56E10(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10001A9A8((uint64_t *)&unk_101115F50);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(a1, 2, v2);
}

uint64_t sub_100B56E4C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001A9A8((uint64_t *)&unk_101115F50);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, 2, v4);
}

void sub_100B56E90(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;

  sub_100B56EFC(319, (unint64_t *)&unk_101116110, (uint64_t (*)(uint64_t))&type metadata accessor for Characteristic, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Identifier);
  if (v3 <= 0x3F)
    swift_initEnumMetadataSinglePayload(a1, 256, *(_QWORD *)(v2 - 8) + 64, 2);
}

void sub_100B56EFC(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  if (!*a2)
  {
    v7 = a3(255);
    v8 = a4(a1, v7);
    if (!v9)
      atomic_store(v8, a2);
  }
}

uint64_t sub_100B56F54(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100B56F90 + 4 * byte_100E615B0[a1]))(0x4E6E6F6973736573, 0xEC00000065636E6FLL);
}

uint64_t sub_100B56F90()
{
  return 0x737574617473;
}

uint64_t sub_100B56FA4()
{
  return 0x69634572656E776FLL;
}

uint64_t sub_100B57134()
{
  return 0x6449726F646E6576;
}

uint64_t sub_100B5714C(_QWORD *a1)
{
  __int128 *v1;
  uint64_t v2;
  __int128 *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  char v30;
  __int128 v31;
  _BYTE v32[16];

  v3 = v1;
  v5 = sub_10001A9A8(&qword_101116130);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  v11 = sub_100B59BBC();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for PencilPairingLockAckRequestContent.CodingKeys, &type metadata for PencilPairingLockAckRequestContent.CodingKeys, v11, v9, v10);
  v31 = *v3;
  v30 = 0;
  v12 = sub_100036A58();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v31, &v30, v5, &type metadata for Data, v12);
  if (!v2)
  {
    v13 = *((_QWORD *)v3 + 2);
    LOBYTE(v31) = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v13, &v31, v5);
    v14 = *((_QWORD *)v3 + 3);
    v15 = *((_QWORD *)v3 + 4);
    LOBYTE(v31) = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v14, v15, &v31, v5);
    v16 = *((_QWORD *)v3 + 5);
    v17 = *((_QWORD *)v3 + 6);
    LOBYTE(v31) = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v16, v17, &v31, v5);
    v18 = *((_QWORD *)v3 + 7);
    v19 = *((_QWORD *)v3 + 8);
    LOBYTE(v31) = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v18, v19, &v31, v5);
    v31 = *(__int128 *)((char *)v3 + 72);
    v30 = 5;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v31, &v30, v5, &type metadata for Data, v12);
    v31 = *(__int128 *)((char *)v3 + 88);
    v30 = 6;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v31, &v30, v5, &type metadata for Data, v12);
    v31 = *(__int128 *)((char *)v3 + 104);
    v30 = 7;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v31, &v30, v5, &type metadata for Data, v12);
    v31 = *(__int128 *)((char *)v3 + 120);
    v30 = 8;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v31, &v30, v5, &type metadata for Data, v12);
    v31 = *(__int128 *)((char *)v3 + 136);
    v30 = 9;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v31, &v30, v5, &type metadata for Data, v12);
    v31 = *(__int128 *)((char *)v3 + 152);
    v30 = 10;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v31, &v30, v5, &type metadata for Data, v12);
    v31 = *(__int128 *)((char *)v3 + 168);
    v30 = 11;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v31, &v30, v5, &type metadata for Data, v12);
    sub_10016924C((uint64_t)v3 + 184, (uint64_t)v32);
    sub_10016924C((uint64_t)v32, (uint64_t)&v31);
    v30 = 12;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v31, &v30, v5, &type metadata for Data, v12);
    v20 = *((_QWORD *)v3 + 25);
    v21 = *((_QWORD *)v3 + 26);
    LOBYTE(v31) = 13;
    KeyedEncodingContainer.encode(_:forKey:)(v20, v21, &v31, v5);
    v22 = *((_QWORD *)v3 + 27);
    v23 = *((_QWORD *)v3 + 28);
    LOBYTE(v31) = 14;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v22, v23, &v31, v5);
    v24 = *((_QWORD *)v3 + 29);
    v25 = *((_QWORD *)v3 + 30);
    LOBYTE(v31) = 15;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v24, v25, &v31, v5);
    v26 = *((_QWORD *)v3 + 31);
    v27 = *((_QWORD *)v3 + 32);
    LOBYTE(v31) = 16;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v26, v27, &v31, v5);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100B57584()
{
  unsigned __int8 *v0;

  return sub_100B56F54(*v0);
}

uint64_t sub_100B5758C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100B59DA4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100B575B0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100B59BBC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100B575D8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100B59BBC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100B57600(_QWORD *a1)
{
  const void *v1;
  _BYTE __dst[264];

  memcpy(__dst, v1, sizeof(__dst));
  return sub_100B5714C(a1);
}

_QWORD *sub_100B57650@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *result;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;

  v4 = a1[22];
  v5 = a1[23];
  v28 = a1[7];
  v29 = a1[6];
  sub_10001BBBC(v29, v28);
  v26 = v5;
  v27 = v4;
  sub_10001BBBC(v4, v5);
  v6 = sub_100035530();
  v24 = DataProtocol.intValue.getter(&type metadata for Data, v6);
  v7 = a1[1];
  v8 = a1[3];
  v21 = a1[2];
  v22 = *a1;
  v20 = a1[4];
  v9 = a1[8];
  v11 = a1[10];
  v10 = a1[11];
  v12 = a1[18];
  v13 = a1[19];
  v30 = a1[9];
  v31 = a1[16];
  v38 = a1[17];
  v39 = a1[14];
  v33 = a1[15];
  v35 = a1[13];
  v36 = a1[12];
  v37 = a1[20];
  v32 = a1[21];
  v25 = a1[26];
  v34 = a1[27];
  v14 = a1[29];
  v19 = a1[28];
  v23 = a1[5];
  swift_bridgeObjectRetain(v23);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  sub_10001BBBC(v9, v30);
  sub_10001BBBC(v11, v10);
  sub_10001BBBC(v12, v13);
  sub_10001BBBC(v31, v38);
  sub_10001BBBC(v39, v33);
  sub_10001BBBC(v36, v35);
  sub_10001BD08(v37, v32);
  swift_bridgeObjectRetain(v34);
  if (v14 >> 60 != 15)
  {
    v16 = sub_1001EDBAC(v19, v14);
    v18 = v17;
    Data.hexString.getter(v16, v17);
    sub_10001BC14(v16, v18);
    __asm { BR              X11 }
  }
  result = sub_100B59444(a1);
  *a2 = v27;
  a2[1] = v26;
  a2[2] = v24;
  a2[3] = v22;
  a2[4] = v7;
  a2[5] = v21;
  a2[6] = v8;
  a2[7] = v20;
  a2[8] = v23;
  a2[9] = v29;
  a2[10] = v28;
  a2[11] = v9;
  a2[12] = v30;
  a2[13] = v11;
  a2[14] = v10;
  a2[15] = v12;
  a2[16] = v13;
  a2[17] = v31;
  a2[18] = v38;
  a2[19] = v36;
  a2[20] = v35;
  a2[21] = v39;
  a2[22] = v33;
  a2[23] = v37;
  a2[24] = v32;
  a2[25] = 0x302E302E32;
  a2[26] = 0xE500000000000000;
  a2[27] = v25;
  a2[28] = v34;
  a2[29] = 0;
  a2[30] = 0;
  a2[31] = 0;
  a2[32] = 0;
  return result;
}

uint64_t sub_100B579C8(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2[142] = a2;
  v2[141] = a1;
  v3 = type metadata accessor for HashAlgorithm(0);
  v2[143] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[144] = v4;
  v2[145] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Locale(0);
  v2[146] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v2[147] = v6;
  v2[148] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Date(0);
  v2[149] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v2[150] = v8;
  v2[151] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100B57A7C, 0, 0);
}

void sub_100B57A7C()
{
  _QWORD *v0;
  unint64_t v1;
  char isUniquelyReferenced_nonNull_native;
  id v3;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  unint64_t v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  unint64_t v36;
  void *v37;
  id v38;
  unsigned int v39;
  NSString v40;
  unsigned int v41;
  char v42;
  uint64_t *v43;
  uint64_t v44;
  __n128 v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  _QWORD *v51;
  void *v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void (__cdecl *v57)();

  v1 = sub_1006B8DC4((uint64_t)_swiftEmptyArrayStorage);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v1);
  sub_100109D28(1702195828, 0xE400000000000000, 0xD00000000000001BLL, 0x8000000100ECA2A0, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease();
  v3 = objc_msgSend((id)objc_opt_self(AKDevice), "currentDevice");
  if (!v3)
  {
    __break(1u);
    goto LABEL_10;
  }
  v4 = v3;
  v5 = objc_msgSend(v3, "serverFriendlyDescription");

  if (!v5)
  {
LABEL_10:
    __break(1u);
    return;
  }
  v52 = v0 + 68;
  v53 = v0 + 2;
  v6 = v0[151];
  v7 = v0[150];
  v8 = v0[149];
  v54 = v0[148];
  v55 = v0[147];
  v56 = v0[146];
  v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
  v11 = v10;

  v12 = swift_isUniquelyReferenced_nonNull_native(v1);
  sub_100109D28(v9, v11, 0xD000000000000011, 0x8000000100ECA2C0, v12);
  v13 = v1;
  v14 = swift_bridgeObjectRelease();
  v15 = Date.init()(v14);
  v16 = Date.epoch.getter(v15);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  v0[138] = v16;
  v17 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int64, &protocol witness table for Int64);
  v19 = v18;
  v20 = swift_isUniquelyReferenced_nonNull_native(v13);
  sub_100109D28(v17, v19, 0xD000000000000015, 0x8000000100ECA2E0, v20);
  swift_bridgeObjectRelease();
  v0[137] = 1;
  v21 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  v23 = v22;
  v24 = swift_isUniquelyReferenced_nonNull_native(v13);
  sub_100109D28(v21, v23, 0xD000000000000013, 0x8000000100ECA300, v24);
  v25 = v13;
  swift_bridgeObjectRelease();
  v26 = sub_100AC2EB8();
  v28 = v27;
  v29 = swift_isUniquelyReferenced_nonNull_native(v25);
  sub_100109D28((uint64_t)v26, v28, 0x6567412D72657355, 0xEA0000000000746ELL, v29);
  v30 = swift_bridgeObjectRelease();
  v31 = static Locale.current.getter(v30);
  v32 = Locale.acceptLanguageCode.getter(v31);
  v34 = v33;
  (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v54, v56);
  v35 = swift_isUniquelyReferenced_nonNull_native(v25);
  sub_100109D28(v32, v34, 0x4C2D747065636341, 0xEF65676175676E61, v35);
  v36 = v25;
  swift_bridgeObjectRelease();
  if (qword_1010EA198 != -1)
    swift_once(&qword_1010EA198, sub_100ACDE4C);
  v37 = (void *)qword_1011B7C08;
  v38 = objc_msgSend((id)objc_opt_self(FMSystemInfo), "sharedInstance");
  v39 = objc_msgSend(v38, "isInternalBuild");

  if (v39)
  {
    v40 = String._bridgeToObjectiveC()();
    v41 = objc_msgSend(v37, "BOOLForKey:", v40);

    if (v41)
    {
      v42 = swift_isUniquelyReferenced_nonNull_native(v36);
      sub_100109D28(0x7465722C6C616572, 0xEF302D726F727245, 0xD000000000000012, 0x8000000100ECA340, v42);
      swift_bridgeObjectRelease();
    }
  }
  v0[152] = v36;
  v43 = (uint64_t *)v0[141];
  sub_100350D10(v43);
  sub_100B57650(v43, v53);
  v44 = type metadata accessor for JSONEncoder(0);
  swift_allocObject(v44, *(unsigned int *)(v44 + 48), *(unsigned __int16 *)(v44 + 52));
  JSONEncoder.init()(v45);
  memcpy(v52, v53, 0x108uLL);
  v46 = sub_100B59178();
  v47 = dispatch thunk of JSONEncoder.encode<A>(_:)(v52, &type metadata for PencilPairingLockAckRequestContent, v46);
  v0[153] = v47;
  v0[154] = v48;
  v49 = v47;
  v50 = v48;
  swift_release();
  sub_10001BBBC(v49, v50);
  v57 = (void (__cdecl *)())((char *)&dword_101115260 + dword_101115260);
  v51 = (_QWORD *)swift_task_alloc(unk_101115264);
  v0[155] = v51;
  *v51 = v0;
  v51[1] = sub_100B581C0;
  v57();
}

uint64_t sub_100B581C0(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 1240);
  *(_QWORD *)(v3 + 1248) = a1;
  *(_QWORD *)(v3 + 1256) = a2;
  swift_task_dealloc(v4);
  return swift_task_switch(sub_100B58220, 0, 0);
}

uint64_t sub_100B58220()
{
  _QWORD *v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  char *v15;

  v1 = v0[157];
  v2 = v0[156];
  v3 = v0[154];
  v4 = v0[153];
  v5 = v0[145];
  v6 = v0[144];
  v7 = v0[143];
  v0[134] = v2;
  v0[135] = v1;
  sub_10001BBBC(v4, v3);
  sub_10001BBBC(v2, v1);
  sub_10078E27C(v4, v3);
  sub_10001BC14(v4, v3);
  sub_10001BC14(v2, v1);
  v8 = v0[134];
  v0[158] = v8;
  v9 = v0[135];
  v0[159] = v9;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v6 + 104))(v5, enum case for HashAlgorithm.sha256(_:), v7);
  v10 = Data.hash(algorithm:)(v5, v8, v9);
  v12 = v11;
  v0[160] = v10;
  v0[161] = v11;
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  v15 = (char *)&dword_101115258 + dword_101115258;
  v13 = (_QWORD *)swift_task_alloc(unk_10111525C);
  v0[162] = v13;
  *v13 = v0;
  v13[1] = sub_100B58360;
  return ((uint64_t (*)(uint64_t, uint64_t, _QWORD))v15)(v10, v12, v0[142]);
}

uint64_t sub_100B58360(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t (*v6)();
  unint64_t v7;
  uint64_t v8;

  v4 = *(_QWORD **)v2;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 1296);
  *(_QWORD *)(*(_QWORD *)v2 + 1304) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = sub_100B58A0C;
  }
  else
  {
    v7 = v4[161];
    v8 = v4[160];
    v4[164] = a1;
    sub_10001BC14(v8, v7);
    v6 = sub_100B583E0;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_100B583E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int64_t i;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  NSObject *v36;
  os_log_type_t v37;
  BOOL v38;
  unint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint8_t *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *__dst;
  uint64_t v51;
  uint64_t *v52;
  _QWORD *v53;
  uint64_t v54;
  int64_t v55;
  uint64_t v56;
  _QWORD *v57;
  int64_t v58;
  uint64_t v59[2];

  v1 = *(_QWORD *)(v0 + 1312);
  v2 = *(_QWORD *)(v0 + 1304);
  v3 = *(_QWORD *)(v0 + 1216);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v3);
  v59[0] = v3;
  sub_1001664D0(v1, (uint64_t)sub_100B27BE4, 0, isUniquelyReferenced_nonNull_native, v59);
  if (v2)
    return swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(v0 + 1272);
  v7 = *(_QWORD *)(v0 + 1264);
  v8 = v59[0];
  swift_bridgeObjectRelease();
  sub_10001BC14(v7, v6);
  if (qword_1010EA0F8 != -1)
LABEL_35:
    swift_once(&qword_1010EA0F8, sub_1009B4438);
  v52 = (uint64_t *)(v0 + 16);
  v53 = (_QWORD *)v0;
  __dst = (void *)(v0 + 280);
  v51 = v0 + 1112;
  v9 = type metadata accessor for Logger(0);
  v56 = sub_10001A9E8(v9, (uint64_t)qword_1011B7AE0);
  v0 = Logger.logObject.getter(v56);
  v10 = static os_log_type_t.debug.getter(v0);
  if (os_log_type_enabled((os_log_t)v0, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)v0, v10, "Pairing lock header:", v11, 2u);
    swift_slowDealloc(v11, -1, -1);
  }

  v54 = v8 + 64;
  v12 = -1;
  v13 = -1 << *(_BYTE *)(v8 + 32);
  if (-v13 < 64)
    v12 = ~(-1 << -(char)v13);
  v14 = v12 & *(_QWORD *)(v8 + 64);
  v55 = (unint64_t)(63 - v13) >> 6;
  swift_bridgeObjectRetain(v8);
  for (i = 0; ; i = v58)
  {
    if (v14)
    {
      v16 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v58 = i;
      v17 = v16 | (i << 6);
      goto LABEL_27;
    }
    v18 = i + 1;
    if (__OFADD__(i, 1))
    {
      __break(1u);
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }
    v0 = (uint64_t)v53;
    if (v18 >= v55)
      goto LABEL_29;
    v19 = *(_QWORD *)(v54 + 8 * v18);
    v20 = i + 1;
    if (!v19)
    {
      v20 = i + 2;
      if (i + 2 >= v55)
        goto LABEL_29;
      v19 = *(_QWORD *)(v54 + 8 * v20);
      if (!v19)
      {
        v20 = i + 3;
        if (i + 3 >= v55)
          goto LABEL_29;
        v19 = *(_QWORD *)(v54 + 8 * v20);
        if (!v19)
          break;
      }
    }
LABEL_26:
    v14 = (v19 - 1) & v19;
    v58 = v20;
    v17 = __clz(__rbit64(v19)) + (v20 << 6);
LABEL_27:
    v22 = 16 * v17;
    v23 = (uint64_t *)(*(_QWORD *)(v8 + 48) + v22);
    v25 = *v23;
    v24 = v23[1];
    v26 = (uint64_t *)(*(_QWORD *)(v8 + 56) + v22);
    v27 = *v26;
    v28 = v26[1];
    swift_bridgeObjectRetain_n(v24, 2);
    swift_bridgeObjectRetain_n(v28, 2);
    v30 = Logger.logObject.getter(v29);
    v31 = static os_log_type_t.debug.getter(v30);
    if (os_log_type_enabled(v30, v31))
    {
      v32 = v8;
      v33 = swift_slowAlloc(22, -1);
      v0 = swift_slowAlloc(64, -1);
      v59[0] = v0;
      *(_DWORD *)v33 = 136315394;
      swift_bridgeObjectRetain(v24);
      *(_QWORD *)(v33 + 4) = sub_100016940(v25, v24, v59);
      swift_bridgeObjectRelease_n(v24, 3);
      *(_WORD *)(v33 + 12) = 2080;
      swift_bridgeObjectRetain(v28);
      *(_QWORD *)(v33 + 14) = sub_100016940(v27, v28, v59);
      swift_bridgeObjectRelease_n(v28, 3);
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "%s: %s", (uint8_t *)v33, 0x16u);
      swift_arrayDestroy(v0, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v0, -1, -1);
      v34 = v33;
      v8 = v32;
      swift_slowDealloc(v34, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n(v24, 2);
      swift_bridgeObjectRelease_n(v28, 2);
    }

  }
  v21 = i + 4;
  if (i + 4 < v55)
  {
    v19 = *(_QWORD *)(v54 + 8 * v21);
    if (!v19)
    {
      while (1)
      {
        v20 = v21 + 1;
        if (__OFADD__(v21, 1))
          goto LABEL_34;
        if (v20 >= v55)
          goto LABEL_29;
        v19 = *(_QWORD *)(v54 + 8 * v20);
        ++v21;
        if (v19)
          goto LABEL_26;
      }
    }
    v20 = i + 4;
    goto LABEL_26;
  }
LABEL_29:
  swift_release();
  sub_100B591BC(v52);
  v35 = sub_100B591BC(v52);
  v36 = Logger.logObject.getter(v35);
  v37 = static os_log_type_t.debug.getter(v36);
  v38 = os_log_type_enabled(v36, v37);
  v39 = v53[154];
  v40 = v53[153];
  v41 = (_QWORD *)v53[141];
  if (v38)
  {
    v42 = (uint8_t *)swift_slowAlloc(12, -1);
    v57 = v41;
    v43 = swift_slowAlloc(32, -1);
    v59[0] = v43;
    *(_DWORD *)v42 = 136315138;
    v0 = (uint64_t)v53;
    memcpy(__dst, v52, 0x108uLL);
    sub_100B591BC(v52);
    v44 = String.init<A>(describing:)(__dst, &type metadata for PencilPairingLockAckRequestContent);
    v53[139] = sub_100016940(v44, v45, v59);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v51, v53 + 140, v42 + 4, v42 + 12);
    swift_bridgeObjectRelease();
    sub_100B59300(v52);
    sub_100B59300(v52);
    _os_log_impl((void *)&_mh_execute_header, v36, v37, "Pairing ack body %s", v42, 0xCu);
    swift_arrayDestroy(v43, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v43, -1, -1);
    swift_slowDealloc(v42, -1, -1);
    swift_release();
    sub_100B59444(v57);

    sub_10001BC14(v40, v39);
    sub_100B59300(v52);
  }
  else
  {
    sub_100B59300(v52);
    sub_10001BC14(v40, v39);
    sub_100B59300(v52);
    sub_100B59300(v52);
    swift_release();
    sub_100B59444(v41);

  }
  v46 = *(_QWORD *)(v0 + 1232);
  v47 = *(_QWORD *)(v0 + 1224);
  v48 = *(_QWORD *)(v0 + 1184);
  v49 = *(_QWORD *)(v0 + 1160);
  swift_task_dealloc(*(_QWORD *)(v0 + 1208));
  swift_task_dealloc(v48);
  swift_task_dealloc(v49);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 8))(v8, v47, v46);
}

uint64_t sub_100B58A0C()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  BOOL v8;
  uint64_t v9;
  uint8_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  int64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  NSObject *v42;
  os_log_type_t v43;
  BOOL v44;
  unint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint8_t *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v57;
  void *__dst;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  int64_t v64;
  unint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;

  v59 = v0 + 1120;
  v1 = *(_QWORD *)(v0 + 1272);
  v2 = *(_QWORD *)(v0 + 1264);
  sub_10001BC14(*(_QWORD *)(v0 + 1280), *(_QWORD *)(v0 + 1288));
  sub_10001BC14(v2, v1);
  if (qword_1010EA328 == -1)
    goto LABEL_2;
  while (1)
  {
    swift_once(&qword_1010EA328, sub_100B5E37C);
LABEL_2:
    v3 = *(_QWORD *)(v0 + 1304);
    v4 = type metadata accessor for Logger(0);
    sub_10001A9E8(v4, (uint64_t)qword_1011B7E28);
    swift_errorRetain(v3);
    v5 = swift_errorRetain(v3);
    v6 = Logger.logObject.getter(v5);
    v7 = static os_log_type_t.error.getter(v6);
    v8 = os_log_type_enabled(v6, v7);
    v9 = *(_QWORD *)(v0 + 1304);
    if (v8)
    {
      v10 = (uint8_t *)swift_slowAlloc(12, -1);
      v11 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v10 = 138543362;
      swift_errorRetain(v9);
      v12 = _swift_stdlib_bridgeErrorToNSError(v9);
      *(_QWORD *)(v0 + 1120) = v12;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v59, v0 + 1128, v10 + 4, v10 + 12);
      *v11 = v12;
      swift_errorRelease(v9);
      swift_errorRelease(v9);
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Failed to generate attestation header: %{public}@.", v10, 0xCu);
      v13 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
      swift_arrayDestroy(v11, 1, v13);
      swift_slowDealloc(v11, -1, -1);
      swift_slowDealloc(v10, -1, -1);

      swift_errorRelease(v9);
    }
    else
    {
      swift_errorRelease(*(_QWORD *)(v0 + 1304));
      swift_errorRelease(v9);
      swift_errorRelease(v9);

    }
    v14 = *(_QWORD *)(v0 + 1216);
    if (qword_1010EA0F8 != -1)
      swift_once(&qword_1010EA0F8, sub_1009B4438);
    v60 = v0;
    v61 = (uint64_t *)(v0 + 16);
    __dst = (void *)(v0 + 280);
    v66 = sub_10001A9E8(v4, (uint64_t)qword_1011B7AE0);
    v0 = Logger.logObject.getter(v66);
    v15 = static os_log_type_t.debug.getter(v0);
    if (os_log_type_enabled((os_log_t)v0, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)v0, v15, "Pairing lock header:", v16, 2u);
      swift_slowDealloc(v16, -1, -1);
    }
    v57 = (uint64_t *)(v60 + 1112);

    v63 = v14 + 64;
    v17 = -1;
    v18 = -1 << *(_BYTE *)(v14 + 32);
    if (-v18 < 64)
      v17 = ~(-1 << -(char)v18);
    v19 = v17 & *(_QWORD *)(v14 + 64);
    v64 = (unint64_t)(63 - v18) >> 6;
    swift_bridgeObjectRetain(v14);
    v20 = 0;
    v62 = v14;
    while (v19)
    {
      while (1)
      {
        v21 = __clz(__rbit64(v19));
        v19 &= v19 - 1;
        v22 = v21 | (v20 << 6);
LABEL_29:
        v26 = 16 * v22;
        v27 = (uint64_t *)(*(_QWORD *)(v14 + 48) + v26);
        v29 = *v27;
        v28 = v27[1];
        v30 = (uint64_t *)(*(_QWORD *)(v14 + 56) + v26);
        v31 = *v30;
        v32 = v30[1];
        swift_bridgeObjectRetain_n(v28, 2);
        swift_bridgeObjectRetain_n(v32, 2);
        v34 = Logger.logObject.getter(v33);
        v35 = static os_log_type_t.debug.getter(v34);
        v0 = v35;
        if (os_log_type_enabled(v34, v35))
          break;
        swift_bridgeObjectRelease_n(v28, 2);
        swift_bridgeObjectRelease_n(v32, 2);

        if (!v19)
          goto LABEL_15;
      }
      v36 = v20;
      v37 = swift_slowAlloc(22, -1);
      v38 = swift_slowAlloc(64, -1);
      v68 = v38;
      *(_DWORD *)v37 = 136315394;
      swift_bridgeObjectRetain(v28);
      *(_QWORD *)(v37 + 4) = sub_100016940(v29, v28, &v68);
      swift_bridgeObjectRelease_n(v28, 3);
      *(_WORD *)(v37 + 12) = 2080;
      swift_bridgeObjectRetain(v32);
      *(_QWORD *)(v37 + 14) = sub_100016940(v31, v32, &v68);
      swift_bridgeObjectRelease_n(v32, 3);
      _os_log_impl((void *)&_mh_execute_header, v34, (os_log_type_t)v0, "%s: %s", (uint8_t *)v37, 0x16u);
      swift_arrayDestroy(v38, 2, (char *)&type metadata for Any + 8);
      v39 = v38;
      v14 = v62;
      swift_slowDealloc(v39, -1, -1);
      v40 = v37;
      v20 = v36;
      swift_slowDealloc(v40, -1, -1);

    }
LABEL_15:
    v23 = v20 + 1;
    if (__OFADD__(v20, 1))
    {
      __break(1u);
      goto LABEL_37;
    }
    v0 = (uint64_t)v61;
    if (v23 >= v64)
      break;
    v24 = *(_QWORD *)(v63 + 8 * v23);
    ++v20;
    if (v24)
      goto LABEL_28;
    v20 = v23 + 1;
    if (v23 + 1 >= v64)
      break;
    v24 = *(_QWORD *)(v63 + 8 * v20);
    if (v24)
      goto LABEL_28;
    v20 = v23 + 2;
    if (v23 + 2 >= v64)
      break;
    v24 = *(_QWORD *)(v63 + 8 * v20);
    if (v24)
      goto LABEL_28;
    v25 = v23 + 3;
    if (v25 >= v64)
      break;
    v24 = *(_QWORD *)(v63 + 8 * v25);
    if (v24)
    {
      v20 = v25;
LABEL_28:
      v19 = (v24 - 1) & v24;
      v22 = __clz(__rbit64(v24)) + (v20 << 6);
      goto LABEL_29;
    }
    while (1)
    {
      v20 = v25 + 1;
      if (__OFADD__(v25, 1))
        break;
      if (v20 >= v64)
        goto LABEL_32;
      v24 = *(_QWORD *)(v63 + 8 * v20);
      ++v25;
      if (v24)
        goto LABEL_28;
    }
LABEL_37:
    __break(1u);
  }
LABEL_32:
  swift_release();
  sub_100B591BC(v61);
  v41 = sub_100B591BC(v61);
  v42 = Logger.logObject.getter(v41);
  v43 = static os_log_type_t.debug.getter(v42);
  v44 = os_log_type_enabled(v42, v43);
  v45 = *(_QWORD *)(v60 + 1232);
  v46 = *(_QWORD *)(v60 + 1224);
  v47 = *(_QWORD **)(v60 + 1128);
  if (v44)
  {
    v67 = *(_QWORD **)(v60 + 1128);
    v48 = (uint8_t *)swift_slowAlloc(12, -1);
    v65 = v45;
    v49 = swift_slowAlloc(32, -1);
    v68 = v49;
    *(_DWORD *)v48 = 136315138;
    memcpy(__dst, v61, 0x108uLL);
    sub_100B591BC(v61);
    v50 = String.init<A>(describing:)(__dst, &type metadata for PencilPairingLockAckRequestContent);
    *v57 = sub_100016940(v50, v51, &v68);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v57, v59, v48 + 4, v48 + 12);
    swift_bridgeObjectRelease();
    sub_100B59300(v61);
    sub_100B59300(v61);
    _os_log_impl((void *)&_mh_execute_header, v42, v43, "Pairing ack body %s", v48, 0xCu);
    swift_arrayDestroy(v49, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v49, -1, -1);
    swift_slowDealloc(v48, -1, -1);
    swift_release();
    sub_100B59444(v67);

    sub_10001BC14(v46, v65);
    sub_100B59300(v61);
  }
  else
  {
    sub_100B59300(v61);
    sub_10001BC14(v46, v45);
    sub_100B59300(v61);
    sub_100B59300(v61);
    swift_release();
    sub_100B59444(v47);

  }
  v52 = *(_QWORD *)(v60 + 1232);
  v53 = *(_QWORD *)(v60 + 1224);
  v54 = *(_QWORD *)(v60 + 1184);
  v55 = *(_QWORD *)(v60 + 1160);
  swift_task_dealloc(*(_QWORD *)(v60 + 1208));
  swift_task_dealloc(v54);
  swift_task_dealloc(v55);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v60 + 8))(v62, v53, v52);
}

unint64_t sub_100B59178()
{
  unint64_t result;

  result = qword_101116128;
  if (!qword_101116128)
  {
    result = swift_getWitnessTable(asc_100E6162C, &type metadata for PencilPairingLockAckRequestContent);
    atomic_store(result, (unint64_t *)&qword_101116128);
  }
  return result;
}

uint64_t *sub_100B591BC(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v2 = a1[4];
  v3 = a1[6];
  v5 = a1[8];
  v4 = a1[9];
  v6 = a1[10];
  v7 = a1[11];
  v8 = a1[12];
  v9 = a1[13];
  v10 = a1[14];
  v12 = a1[16];
  v13 = a1[15];
  v14 = a1[18];
  v15 = a1[17];
  v16 = a1[20];
  v17 = a1[19];
  v18 = a1[22];
  v19 = a1[21];
  v21 = a1[24];
  v22 = a1[23];
  v23 = a1[26];
  v24 = a1[28];
  v25 = a1[30];
  v20 = a1[32];
  sub_10001BBBC(*a1, a1[1]);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  sub_10001BBBC(v4, v6);
  sub_10001BBBC(v7, v8);
  sub_10001BBBC(v9, v10);
  sub_10001BBBC(v13, v12);
  sub_10001BBBC(v15, v14);
  sub_10001BBBC(v17, v16);
  sub_10001BBBC(v19, v18);
  sub_10001BD08(v22, v21);
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRetain(v23);
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRetain(v25);
  return a1;
}

uint64_t *sub_100B59300(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;

  v2 = a1[9];
  v3 = a1[10];
  v4 = a1[11];
  v5 = a1[12];
  v6 = a1[13];
  v7 = a1[14];
  v9 = a1[16];
  v10 = a1[15];
  v11 = a1[18];
  v12 = a1[17];
  v13 = a1[20];
  v14 = a1[19];
  v15 = a1[22];
  v16 = a1[21];
  v17 = a1[24];
  v18 = a1[23];
  sub_10001BC14(*a1, a1[1]);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10001BC14(v2, v3);
  sub_10001BC14(v4, v5);
  sub_10001BC14(v6, v7);
  sub_10001BC14(v10, v9);
  sub_10001BC14(v12, v11);
  sub_10001BC14(v14, v13);
  sub_10001BC14(v16, v15);
  sub_10001EF3C(v18, v17);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *sub_100B59444(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;

  v2 = a1[6];
  v3 = a1[7];
  v4 = a1[8];
  v5 = a1[9];
  v6 = a1[10];
  v7 = a1[11];
  v8 = a1[12];
  v10 = a1[13];
  v11 = a1[15];
  v12 = a1[14];
  v13 = a1[17];
  v14 = a1[16];
  v15 = a1[19];
  v16 = a1[18];
  v17 = a1[21];
  v18 = a1[20];
  v19 = a1[23];
  v20 = a1[22];
  v21 = a1[25];
  v22 = a1[24];
  v23 = a1[29];
  v24 = a1[28];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10001BC14(v2, v3);
  sub_10001BC14(v4, v5);
  sub_10001BC14(v6, v7);
  sub_10001BC14(v8, v10);
  sub_10001BC14(v12, v11);
  sub_10001BC14(v14, v13);
  sub_10001BC14(v16, v15);
  sub_10001EF3C(v18, v17);
  sub_10001BC14(v20, v19);
  sub_10001BC14(v22, v21);
  swift_bridgeObjectRelease();
  sub_10001EF3C(v24, v23);
  return a1;
}

uint64_t destroy for PencilPairingLockAckRequestContent(uint64_t *a1)
{
  unint64_t v2;

  sub_10001BC14(*a1, a1[1]);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10001BC14(a1[9], a1[10]);
  sub_10001BC14(a1[11], a1[12]);
  sub_10001BC14(a1[13], a1[14]);
  sub_10001BC14(a1[15], a1[16]);
  sub_10001BC14(a1[17], a1[18]);
  sub_10001BC14(a1[19], a1[20]);
  sub_10001BC14(a1[21], a1[22]);
  v2 = a1[24];
  if (v2 >> 60 != 15)
    sub_10001BC14(a1[23], v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for PencilPairingLockAckRequestContent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  sub_10001BBBC(*(_QWORD *)a2, v5);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 32);
  v7 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = v7;
  v9 = *(_QWORD *)(a2 + 48);
  v8 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = v9;
  *(_QWORD *)(a1 + 56) = v8;
  v10 = *(_QWORD *)(a2 + 64);
  v11 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = v10;
  v12 = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v10);
  sub_10001BBBC(v11, v12);
  *(_QWORD *)(a1 + 72) = v11;
  *(_QWORD *)(a1 + 80) = v12;
  v13 = *(_QWORD *)(a2 + 88);
  v14 = *(_QWORD *)(a2 + 96);
  sub_10001BBBC(v13, v14);
  *(_QWORD *)(a1 + 88) = v13;
  *(_QWORD *)(a1 + 96) = v14;
  v15 = *(_QWORD *)(a2 + 104);
  v16 = *(_QWORD *)(a2 + 112);
  sub_10001BBBC(v15, v16);
  *(_QWORD *)(a1 + 104) = v15;
  *(_QWORD *)(a1 + 112) = v16;
  v17 = *(_QWORD *)(a2 + 120);
  v18 = *(_QWORD *)(a2 + 128);
  sub_10001BBBC(v17, v18);
  *(_QWORD *)(a1 + 120) = v17;
  *(_QWORD *)(a1 + 128) = v18;
  v19 = *(_QWORD *)(a2 + 136);
  v20 = *(_QWORD *)(a2 + 144);
  sub_10001BBBC(v19, v20);
  *(_QWORD *)(a1 + 136) = v19;
  *(_QWORD *)(a1 + 144) = v20;
  v21 = *(_QWORD *)(a2 + 152);
  v22 = *(_QWORD *)(a2 + 160);
  sub_10001BBBC(v21, v22);
  *(_QWORD *)(a1 + 152) = v21;
  *(_QWORD *)(a1 + 160) = v22;
  v23 = *(_QWORD *)(a2 + 168);
  v24 = *(_QWORD *)(a2 + 176);
  sub_10001BBBC(v23, v24);
  *(_QWORD *)(a1 + 168) = v23;
  *(_QWORD *)(a1 + 176) = v24;
  v25 = (uint64_t *)(a2 + 184);
  v26 = *(_QWORD *)(a2 + 192);
  if (v26 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 184) = *(_OWORD *)v25;
  }
  else
  {
    v27 = *v25;
    sub_10001BBBC(*v25, *(_QWORD *)(a2 + 192));
    *(_QWORD *)(a1 + 184) = v27;
    *(_QWORD *)(a1 + 192) = v26;
  }
  v28 = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 208) = v28;
  v29 = *(_QWORD *)(a2 + 224);
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(a1 + 224) = v29;
  v30 = *(_QWORD *)(a2 + 240);
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
  *(_QWORD *)(a1 + 240) = v30;
  v31 = *(_QWORD *)(a2 + 248);
  v32 = *(_QWORD *)(a2 + 256);
  *(_QWORD *)(a1 + 248) = v31;
  *(_QWORD *)(a1 + 256) = v32;
  swift_bridgeObjectRetain(v28);
  swift_bridgeObjectRetain(v29);
  swift_bridgeObjectRetain(v30);
  swift_bridgeObjectRetain(v32);
  return a1;
}

uint64_t *assignWithCopy for PencilPairingLockAckRequestContent(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v4 = *a2;
  v5 = a2[1];
  sub_10001BBBC(*a2, v5);
  v6 = *a1;
  v7 = a1[1];
  *a1 = v4;
  a1[1] = v5;
  sub_10001BC14(v6, v7);
  a1[2] = a2[2];
  a1[3] = a2[3];
  v8 = a2[4];
  a1[4] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  v9 = a2[6];
  a1[6] = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease();
  a1[7] = a2[7];
  v10 = a2[8];
  a1[8] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease();
  v11 = a2[9];
  v12 = a2[10];
  sub_10001BBBC(v11, v12);
  v13 = a1[9];
  v14 = a1[10];
  a1[9] = v11;
  a1[10] = v12;
  sub_10001BC14(v13, v14);
  v15 = a2[11];
  v16 = a2[12];
  sub_10001BBBC(v15, v16);
  v17 = a1[11];
  v18 = a1[12];
  a1[11] = v15;
  a1[12] = v16;
  sub_10001BC14(v17, v18);
  v19 = a2[13];
  v20 = a2[14];
  sub_10001BBBC(v19, v20);
  v21 = a1[13];
  v22 = a1[14];
  a1[13] = v19;
  a1[14] = v20;
  sub_10001BC14(v21, v22);
  v23 = a2[15];
  v24 = a2[16];
  sub_10001BBBC(v23, v24);
  v25 = a1[15];
  v26 = a1[16];
  a1[15] = v23;
  a1[16] = v24;
  sub_10001BC14(v25, v26);
  v27 = a2[17];
  v28 = a2[18];
  sub_10001BBBC(v27, v28);
  v29 = a1[17];
  v30 = a1[18];
  a1[17] = v27;
  a1[18] = v28;
  sub_10001BC14(v29, v30);
  v31 = a2[19];
  v32 = a2[20];
  sub_10001BBBC(v31, v32);
  v33 = a1[19];
  v34 = a1[20];
  a1[19] = v31;
  a1[20] = v32;
  sub_10001BC14(v33, v34);
  v35 = a2[21];
  v36 = a2[22];
  sub_10001BBBC(v35, v36);
  v37 = a1[21];
  v38 = a1[22];
  a1[21] = v35;
  a1[22] = v36;
  sub_10001BC14(v37, v38);
  v39 = a2 + 23;
  v40 = a2[24];
  if ((unint64_t)a1[24] >> 60 != 15)
  {
    if (v40 >> 60 != 15)
    {
      v42 = *v39;
      sub_10001BBBC(*v39, a2[24]);
      v43 = a1[23];
      v44 = a1[24];
      a1[23] = v42;
      a1[24] = v40;
      sub_10001BC14(v43, v44);
      goto LABEL_8;
    }
    sub_1000DC964((uint64_t)(a1 + 23));
    goto LABEL_6;
  }
  if (v40 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)(a1 + 23) = *(_OWORD *)v39;
    goto LABEL_8;
  }
  v41 = *v39;
  sub_10001BBBC(*v39, a2[24]);
  a1[23] = v41;
  a1[24] = v40;
LABEL_8:
  a1[25] = a2[25];
  v45 = a2[26];
  a1[26] = v45;
  swift_bridgeObjectRetain(v45);
  swift_bridgeObjectRelease();
  a1[27] = a2[27];
  v46 = a2[28];
  a1[28] = v46;
  swift_bridgeObjectRetain(v46);
  swift_bridgeObjectRelease();
  a1[29] = a2[29];
  v47 = a2[30];
  a1[30] = v47;
  swift_bridgeObjectRetain(v47);
  swift_bridgeObjectRelease();
  a1[31] = a2[31];
  v48 = a2[32];
  a1[32] = v48;
  swift_bridgeObjectRetain(v48);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for PencilPairingLockAckRequestContent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_10001BC14(v4, v5);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v6;
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v7;
  swift_bridgeObjectRelease();
  v8 = *(_QWORD *)(a1 + 72);
  v9 = *(_QWORD *)(a1 + 80);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  sub_10001BC14(v8, v9);
  v10 = *(_QWORD *)(a1 + 88);
  v11 = *(_QWORD *)(a1 + 96);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  sub_10001BC14(v10, v11);
  v12 = *(_QWORD *)(a1 + 104);
  v13 = *(_QWORD *)(a1 + 112);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  sub_10001BC14(v12, v13);
  v14 = *(_QWORD *)(a1 + 120);
  v15 = *(_QWORD *)(a1 + 128);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  sub_10001BC14(v14, v15);
  v16 = *(_QWORD *)(a1 + 136);
  v17 = *(_QWORD *)(a1 + 144);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  sub_10001BC14(v16, v17);
  v18 = *(_QWORD *)(a1 + 152);
  v19 = *(_QWORD *)(a1 + 160);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  sub_10001BC14(v18, v19);
  v20 = *(_QWORD *)(a1 + 168);
  v21 = *(_QWORD *)(a1 + 176);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  sub_10001BC14(v20, v21);
  v22 = (_QWORD *)(a2 + 184);
  v23 = *(_QWORD *)(a1 + 192);
  if (v23 >> 60 != 15)
  {
    v24 = *(_QWORD *)(a2 + 192);
    if (v24 >> 60 != 15)
    {
      v25 = *(_QWORD *)(a1 + 184);
      *(_QWORD *)(a1 + 184) = *v22;
      *(_QWORD *)(a1 + 192) = v24;
      sub_10001BC14(v25, v23);
      goto LABEL_6;
    }
    sub_1000DC964(a1 + 184);
  }
  *(_OWORD *)(a1 + 184) = *(_OWORD *)v22;
LABEL_6:
  v26 = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 208) = v26;
  swift_bridgeObjectRelease();
  v27 = *(_QWORD *)(a2 + 224);
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(a1 + 224) = v27;
  swift_bridgeObjectRelease();
  v28 = *(_QWORD *)(a2 + 240);
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
  *(_QWORD *)(a1 + 240) = v28;
  swift_bridgeObjectRelease();
  v29 = *(_QWORD *)(a2 + 256);
  *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
  *(_QWORD *)(a1 + 256) = v29;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for PencilPairingLockAckRequestContent()
{
  return &type metadata for PencilPairingLockAckRequestContent;
}

ValueMetadata *type metadata accessor for PencilPairingLockAckRequest()
{
  return &type metadata for PencilPairingLockAckRequest;
}

unint64_t sub_100B59BBC()
{
  unint64_t result;

  result = qword_101116138;
  if (!qword_101116138)
  {
    result = swift_getWitnessTable(byte_100E61770, &type metadata for PencilPairingLockAckRequestContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101116138);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for PencilPairingLockAckRequestContent.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 16 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 16) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF0)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xEF)
    return ((uint64_t (*)(void))((char *)&loc_100B59C4C + 4 * byte_100E615C6[v4]))();
  *a1 = a2 + 16;
  return ((uint64_t (*)(void))((char *)sub_100B59C80 + 4 * byte_100E615C1[v4]))();
}

uint64_t sub_100B59C80(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100B59C88(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100B59C90);
  return result;
}

uint64_t sub_100B59C9C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100B59CA4);
  *(_BYTE *)result = a2 + 16;
  return result;
}

uint64_t sub_100B59CA8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100B59CB0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PencilPairingLockAckRequestContent.CodingKeys()
{
  return &type metadata for PencilPairingLockAckRequestContent.CodingKeys;
}

unint64_t sub_100B59CD0()
{
  unint64_t result;

  result = qword_101116140;
  if (!qword_101116140)
  {
    result = swift_getWitnessTable(byte_100E61748, &type metadata for PencilPairingLockAckRequestContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101116140);
  }
  return result;
}

unint64_t sub_100B59D18()
{
  unint64_t result;

  result = qword_101116148;
  if (!qword_101116148)
  {
    result = swift_getWitnessTable(aA_56, &type metadata for PencilPairingLockAckRequestContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101116148);
  }
  return result;
}

unint64_t sub_100B59D60()
{
  unint64_t result;

  result = qword_101116150;
  if (!qword_101116150)
  {
    result = swift_getWitnessTable(asc_100E616E0, &type metadata for PencilPairingLockAckRequestContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101116150);
  }
  return result;
}

uint64_t sub_100B59DA4(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;

  if (a1 == 0x4E6E6F6973736573 && a2 == 0xEC00000065636E6FLL)
  {
    v5 = 0xEC00000065636E6FLL;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x4E6E6F6973736573, 0xEC00000065636E6FLL, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x737574617473 && a2 == 0xE600000000000000)
  {
    v7 = 0xE600000000000000;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x737574617473, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x69634572656E776FLL && a2 == 0xE900000000000064)
  {
    v8 = 0xE900000000000064;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x69634572656E776FLL, 0xE900000000000064, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0x69684372656E776FLL && a2 == 0xEB00000000644970)
  {
    v9 = 0xEB00000000644970;
LABEL_26:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x69684372656E776FLL, 0xEB00000000644970, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_26;
  }
  if (a1 == 0xD000000000000011)
  {
    v10 = 0x8000000100ECA360;
    if (a2 == 0x8000000100ECA360)
      goto LABEL_31;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x8000000100ECA360, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
LABEL_31:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if (a1 == 0x636E6F4E68747561 && a2 == 0xE900000000000065)
  {
    v11 = 0xE900000000000065;
LABEL_37:
    swift_bridgeObjectRelease(v11);
    return 5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x636E6F4E68747561, 0xE900000000000065, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
    goto LABEL_37;
  }
  if (a1 == 0x754E6C6169726573 && a2 == 0xEC0000007265626DLL)
  {
    v12 = 0xEC0000007265626DLL;
LABEL_43:
    swift_bridgeObjectRelease(v12);
    return 6;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x754E6C6169726573, 0xEC0000007265626DLL, a1, a2, 0) & 1) != 0)
  {
    v12 = a2;
    goto LABEL_43;
  }
  if (a1 == 0x6169726553746C61 && a2 == 0xEF7265626D754E6CLL)
  {
    v13 = 0xEF7265626D754E6CLL;
LABEL_49:
    swift_bridgeObjectRelease(v13);
    return 7;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6169726553746C61, 0xEF7265626D754E6CLL, a1, a2, 0) & 1) != 0)
  {
    v13 = a2;
    goto LABEL_49;
  }
  if (a1 == 0x7461747365747461 && a2 == 0xEB000000006E6F69)
  {
    v14 = 0xEB000000006E6F69;
LABEL_55:
    swift_bridgeObjectRelease(v14);
    return 8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7461747365747461, 0xEB000000006E6F69, a1, a2, 0) & 1) != 0)
  {
    v14 = a2;
    goto LABEL_55;
  }
  if (a1 == 0x726F737365636361 && a2 == 0xED00006E67695379)
  {
    v15 = 0xED00006E67695379;
LABEL_61:
    swift_bridgeObjectRelease(v15);
    return 9;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x726F737365636361, 0xED00006E67695379, a1, a2, 0) & 1) != 0)
  {
    v15 = a2;
    goto LABEL_61;
  }
  if (a1 == 0x7374726563 && a2 == 0xE500000000000000)
  {
    v16 = 0xE500000000000000;
LABEL_67:
    swift_bridgeObjectRelease(v16);
    return 10;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7374726563, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    v16 = a2;
    goto LABEL_67;
  }
  if (a1 == 7500643 && a2 == 0xE300000000000000)
  {
    v17 = 0xE300000000000000;
LABEL_73:
    swift_bridgeObjectRelease(v17);
    return 11;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(7500643, 0xE300000000000000, a1, a2, 0) & 1) != 0)
  {
    v17 = a2;
    goto LABEL_73;
  }
  if (a1 == 0xD000000000000013 && a2 == 0x8000000100EC3110)
  {
    v18 = 0x8000000100EC3110;
LABEL_79:
    swift_bridgeObjectRelease(v18);
    return 12;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013, 0x8000000100EC3110, a1, a2, 0) & 1) != 0)
  {
    v18 = a2;
    goto LABEL_79;
  }
  if (a1 == 0x7372655663657073 && a2 == 0xEB000000006E6F69)
  {
    v19 = 0xEB000000006E6F69;
LABEL_85:
    swift_bridgeObjectRelease(v19);
    return 13;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7372655663657073, 0xEB000000006E6F69, a1, a2, 0) & 1) != 0)
  {
    v19 = a2;
    goto LABEL_85;
  }
  if (a1 == 0x657261776D726966 && a2 == 0xEF6E6F6973726556)
  {
    v20 = 0xEF6E6F6973726556;
LABEL_91:
    swift_bridgeObjectRelease(v20);
    return 14;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x657261776D726966, 0xEF6E6F6973726556, a1, a2, 0) & 1) != 0)
  {
    v20 = a2;
    goto LABEL_91;
  }
  if (a1 == 0x49746375646F7270 && a2 == 0xE900000000000064)
  {
    v21 = 0xE900000000000064;
LABEL_97:
    swift_bridgeObjectRelease(v21);
    return 15;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x49746375646F7270, 0xE900000000000064, a1, a2, 0) & 1) != 0)
  {
    v21 = a2;
    goto LABEL_97;
  }
  if (a1 == 0x6449726F646E6576 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease(0xE800000000000000);
    return 16;
  }
  else
  {
    v22 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6449726F646E6576, 0xE800000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v22 & 1) != 0)
      return 16;
    else
      return 17;
  }
}

uint64_t destroy for AccessoryNonOwnerCommand(uint64_t a1)
{
  return sub_1002442EC(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
}

uint64_t initializeWithCopy for AccessoryNonOwnerCommand(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_BYTE *)(a2 + 32);
  sub_1002441DC(*(_QWORD *)a2, v4, v5, v6, v7);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 32) = v7;
  return a1;
}

uint64_t assignWithCopy for AccessoryNonOwnerCommand(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_BYTE *)(a2 + 32);
  sub_1002441DC(*(_QWORD *)a2, v4, v5, v6, v7);
  v8 = *(_QWORD *)a1;
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(_QWORD *)(a1 + 24);
  v12 = *(_BYTE *)(a1 + 32);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 32) = v7;
  sub_1002442EC(v8, v9, v10, v11, v12);
  return a1;
}

uint64_t assignWithTake for AccessoryNonOwnerCommand(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  __int128 v9;

  v3 = *(_BYTE *)(a2 + 32);
  v4 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_BYTE *)(a1 + 32);
  v9 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v9;
  *(_BYTE *)(a1 + 32) = v3;
  sub_1002442EC(v4, v6, v5, v7, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for AccessoryNonOwnerCommand(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x3FA && *(_BYTE *)(a1 + 33))
    return (*(_DWORD *)a1 + 1018);
  v3 = ((*(_QWORD *)(a1 + 24) >> 60) & 3 | (4 * *(unsigned __int8 *)(a1 + 32))) ^ 0x3FF;
  if (v3 >= 0x3F9)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for AccessoryNonOwnerCommand(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x3F9)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = a2 - 1018;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x3FA)
      *(_BYTE *)(result + 33) = 1;
  }
  else
  {
    if (a3 >= 0x3FA)
      *(_BYTE *)(result + 33) = 0;
    if (a2)
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = 0;
      *(_QWORD *)(result + 16) = 0;
      *(_QWORD *)(result + 24) = (-a2 & 3) << 60;
      *(_BYTE *)(result + 32) = -a2 >> 2;
    }
  }
  return result;
}

uint64_t sub_100B5A708(uint64_t a1)
{
  int v1;
  unsigned int v2;

  if (*(_BYTE *)(a1 + 32))
    v1 = 4;
  else
    v1 = 0;
  v2 = (*(_QWORD *)(a1 + 24) >> 60) & 3 | v1;
  if (v2 <= 5)
    return v2;
  else
    return (*(_DWORD *)a1 + 6);
}

uint64_t sub_100B5A738(uint64_t result, unsigned int a2)
{
  if (a2 < 6)
  {
    *(_QWORD *)(result + 24) = *(_QWORD *)(result + 24) & 0xCFFFFFFFFFFFFFFFLL | ((unint64_t)(a2 & 3) << 60);
    *(_BYTE *)(result + 32) = (a2 & 4) != 0;
  }
  else
  {
    *(_QWORD *)result = a2 - 6;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0x2000000000000000;
    *(_BYTE *)(result + 32) = 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessoryNonOwnerCommand()
{
  return &type metadata for AccessoryNonOwnerCommand;
}

void sub_100B5A784(char a1)
{
  __asm { BR              X10 }
}

ValueMetadata *sub_100B5A7AC()
{
  sub_10005A334();
  return &type metadata for AccessoryGenericPayload;
}

void sub_100B5A7CC()
{
  sub_1001E9D38();
  JUMPOUT(0x100B5A7B8);
}

void sub_100B5A7DC()
{
  sub_1001E9CF4();
  JUMPOUT(0x100B5A7B8);
}

void sub_100B5A7EC()
{
  sub_1003ECBD4();
  JUMPOUT(0x100B5A7B8);
}

void sub_100B5A7FC()
{
  sub_1003ECA80();
  JUMPOUT(0x100B5A7B8);
}

void sub_100B5A80C()
{
  sub_1003EC9F8();
  JUMPOUT(0x100B5A7B8);
}

void sub_100B5A81C()
{
  sub_1003ECB4C();
  JUMPOUT(0x100B5A7B8);
}

uint64_t sub_100B5A82C(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_100B5A864 + 4 * byte_100E617CB[a1]))(0xD000000000000010, 0x8000000100ECB7F0);
}

uint64_t sub_100B5A864(uint64_t a1)
{
  return a1 + 11;
}

void sub_100B5A934()
{
  uint64_t v0;
  int v1;
  _QWORD v2[4];
  char v3;

  sub_1002441A0(v0, (uint64_t)v2);
  if (v3)
    v1 = 4;
  else
    v1 = 0;
  __asm { BR              X11 }
}

uint64_t sub_100B5A984()
{
  return 1;
}

void sub_100B5AA28()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  _QWORD v3[4];
  char v4;

  sub_1002441A0(v0, (uint64_t)&v2);
  sub_1002441A0(v0, (uint64_t)v3);
  if (v4)
    v1 = 4;
  else
    v1 = 0;
  __asm { BR              X11 }
}

uint64_t sub_100B5AAA8@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v10;
  uint64_t v11;

  v7 = a1 & 0xCFFFFFFFFFFFFFFFLL;
  v1[3] = &type metadata for AccessoryCommandResponsePayload;
  v1[4] = sub_1001E9D38();
  v8 = (_QWORD *)swift_allocObject(&unk_1010AF128, 48, 7);
  *v1 = v8;
  v8[2] = v6;
  v8[3] = v10;
  v8[4] = v11;
  v8[5] = v7;
  sub_10001BBBC(v3, v2);
  return sub_10001BBBC(v4, v5);
}

uint64_t sub_100B5AC40(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[3];
  uint64_t v18;
  uint64_t v19;

  v3 = type metadata accessor for Endianness(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  sub_10001AA44(a1, v7);
  dispatch thunk of BinaryEncoding.container()(v17, v7, v8);
  sub_100B5A934();
  v10 = v9;
  LOWORD(v15) = word_100E6191E[v9];
  static Endianness.current.getter(v9);
  v11 = sub_100112060();
  FixedWidthInteger.convert(to:)(&v16, v6, &type metadata for UInt16, v11);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  LOWORD(v15) = v16;
  v12 = v18;
  v13 = v19;
  sub_10009F5D0((uint64_t)v17, v18);
  dispatch thunk of BinaryEncodingContaining.encode<A>(_:)(&v15, &type metadata for UInt16, v11, v12, v13);
  if (!v1)
    __asm { BR              X10 }
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v17);
}

uint64_t sub_100B5B13C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  _BYTE v5[40];

  result = sub_100B5B6B8(a1, (uint64_t)v5);
  if (!v2)
    return sub_1002441A0((uint64_t)v5, a2);
  return result;
}

uint64_t sub_100B5B180(_QWORD *a1)
{
  uint64_t v1;
  _BYTE v4[40];

  sub_1002441A0(v1, (uint64_t)v4);
  return sub_100B5AC40(a1);
}

uint64_t sub_100B5B1CC(__int16 a1)
{
  if ((unsigned __int16)(a1 - 770) > 0x19u)
    return 11;
  else
    return byte_100E61934[(__int16)(a1 - 770)];
}

void sub_100B5B1F8(char a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t DynamicType;
  _QWORD v8[3];
  uint64_t v9;

  sub_100030784(a2, (uint64_t)v8);
  sub_100B5A784(a1);
  v4 = v3;
  v5 = v9;
  v6 = sub_10001AA44(v8, v9);
  DynamicType = swift_getDynamicType(v6, v5, 1);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v8);
  if (v4 == DynamicType)
    __asm { BR              X10 }
  __break(1u);
  JUMPOUT(0x100B5B68CLL);
}

uint64_t sub_100B5B6B8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  _QWORD v26[5];
  _QWORD v27[5];
  _QWORD v28[3];
  uint64_t v29;
  uint64_t v30;
  char v31[48];
  __int16 v32;

  v25 = a2;
  v4 = type metadata accessor for Endianness(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v26[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a1[3];
  v9 = a1[4];
  sub_10001AA44(a1, v8);
  dispatch thunk of BinaryDecoding.container()(v28, v8, v9);
  v10 = v29;
  v11 = v30;
  sub_10009F5D0((uint64_t)v28, v29);
  v12 = sub_100112060();
  v13 = dispatch thunk of BinaryDecodingContaining.decode<A>(_:)(v26, &type metadata for UInt16, &type metadata for UInt16, v12, v10, v11);
  if (!v2)
  {
    v14 = v25;
    v32 = v26[0];
    static Endianness.current.getter(v13);
    FixedWidthInteger.convert(to:)(v27, v7, &type metadata for UInt16, v12);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    v15 = sub_100B5B1CC(v27[0]);
    if (v15 != 11)
    {
      v19 = v15;
      sub_100B5A784(v15);
      v21 = v20;
      v23 = v22;
      sub_100030784((uint64_t)a1, (uint64_t)v26);
      v27[3] = v21;
      v27[4] = v23;
      sub_100018F08(v27);
      dispatch thunk of BinaryDecodable.init(from:)(v26, v21, *(_QWORD *)(v23 + 8));
      sub_100030784((uint64_t)v27, (uint64_t)v26);
      sub_100B5B1F8(v19, (uint64_t)v26);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v27);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v28);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
      return sub_1002441A0((uint64_t)v31, v14);
    }
    v16 = sub_100B5B8E4();
    v17 = swift_allocError(&type metadata for AccessoryNonOwnerCommand.Error, v16, 0, 0);
    *v18 = 1;
    swift_willThrow(v17);
  }
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v28);
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
}

unint64_t sub_100B5B8E4()
{
  unint64_t result;

  result = qword_101116158;
  if (!qword_101116158)
  {
    result = swift_getWitnessTable(aM_43, &type metadata for AccessoryNonOwnerCommand.Error);
    atomic_store(result, (unint64_t *)&qword_101116158);
  }
  return result;
}

uint64_t sub_100B5B928()
{
  uint64_t v0;

  sub_10001BC14(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
  sub_10001BC14(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t storeEnumTagSinglePayload for AccessoryNonOwnerCommand.Error(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_100B5B9A0 + 4 * byte_100E617F4[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100B5B9D4 + 4 * byte_100E617EF[v4]))();
}

uint64_t sub_100B5B9D4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100B5B9DC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100B5B9E4);
  return result;
}

uint64_t sub_100B5B9F0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100B5B9F8);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_100B5B9FC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100B5BA04(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AccessoryNonOwnerCommand.Error()
{
  return &type metadata for AccessoryNonOwnerCommand.Error;
}

unint64_t sub_100B5BA24()
{
  unint64_t result;

  result = qword_101116160;
  if (!qword_101116160)
  {
    result = swift_getWitnessTable(aE_48, &type metadata for AccessoryNonOwnerCommand.Error);
    atomic_store(result, (unint64_t *)&qword_101116160);
  }
  return result;
}

void sub_100B5BA68()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD v2[11];

  sub_1007D9D58(v0, (uint64_t)&v1);
  sub_1007D9D58(v0, (uint64_t)v2);
  __asm { BR              X12 }
}

uint64_t sub_100B5BAFC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v10;
  uint64_t v11;
  unint64_t v12;

  *(_QWORD *)(v6 - 112) = a1 & 0xDFFFFFFFFFFFFFFFLL;
  *(_QWORD *)(v6 - 96) = v1 & 0xCFFFFFFFFFFFFFFFLL;
  v10 = *(_OWORD *)(v6 - 160);
  v7 = *(_QWORD *)(v6 - 144);
  v2[3] = (uint64_t)&type metadata for InitiatePairingCommandPayload;
  v2[4] = sub_100B5BF08();
  v8 = swift_allocObject(&unk_1010AF2D8, 48, 7);
  *v2 = v8;
  *(_QWORD *)(v8 + 16) = v5;
  *(_OWORD *)(v8 + 24) = v10;
  *(_QWORD *)(v8 + 40) = v7;
  sub_10001BBBC(v11, v12);
  return sub_10001BBBC(v4, v3);
}

unint64_t sub_100B5BD7C()
{
  unint64_t result;

  result = qword_101116168;
  if (!qword_101116168)
  {
    result = swift_getWitnessTable("Qk#", &type metadata for PairingCompleteCommandPayload);
    atomic_store(result, (unint64_t *)&qword_101116168);
  }
  return result;
}

unint64_t sub_100B5BDC0()
{
  unint64_t result;

  result = qword_101116170;
  if (!qword_101116170)
  {
    result = swift_getWitnessTable(a1_34, &type metadata for SendPairingStatusCommandPayload);
    atomic_store(result, (unint64_t *)&qword_101116170);
  }
  return result;
}

uint64_t sub_100B5BE04()
{
  uint64_t v0;

  sub_10001BC14(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
  sub_10001BC14(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
  sub_10001BC14(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56));
  return swift_deallocObject(v0, 64, 7);
}

unint64_t sub_100B5BE38()
{
  unint64_t result;

  result = qword_101116178;
  if (!qword_101116178)
  {
    result = swift_getWitnessTable(aQ_44, &type metadata for FinalizePairingCommandPayload);
    atomic_store(result, (unint64_t *)&qword_101116178);
  }
  return result;
}

uint64_t sub_100B5BE7C()
{
  uint64_t v0;

  sub_10001BC14(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
  sub_10001BC14(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
  sub_10001BC14(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56));
  sub_10001BC14(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72));
  sub_10001BC14(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88));
  return swift_deallocObject(v0, 96, 7);
}

unint64_t sub_100B5BEC0()
{
  unint64_t result;

  result = qword_101116180;
  if (!qword_101116180)
  {
    result = swift_getWitnessTable(byte_100E47AE0, &type metadata for SendPairingDataCommandPayload);
    atomic_store(result, (unint64_t *)&qword_101116180);
  }
  return result;
}

unint64_t sub_100B5BF08()
{
  unint64_t result;

  result = qword_101116188;
  if (!qword_101116188)
  {
    result = swift_getWitnessTable(byte_100E57520, &type metadata for InitiatePairingCommandPayload);
    atomic_store(result, (unint64_t *)&qword_101116188);
  }
  return result;
}

void destroy for AccessoryPairingCommand(uint64_t a1)
{
  sub_100B5BF94(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), (void (*)(void))sub_10001BC14);
}

void sub_100B5BF94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unint64_t a10, void (*a11)(void))
{
  unint64_t v16;

  switch((a10 >> 59) & 6 | ((a8 & 0x2000000000000000) != 0))
  {
    case 0uLL:
    case 1uLL:
      a11();
      ((void (*)(uint64_t, uint64_t))a11)(a3, a4);
      break;
    case 2uLL:
      v16 = a8 & 0xDFFFFFFFFFFFFFFFLL;
      a11();
      ((void (*)(uint64_t, uint64_t))a11)(a3, a4);
      ((void (*)(uint64_t, uint64_t))a11)(a5, a6);
      ((void (*)(uint64_t, unint64_t))a11)(a7, v16);
      ((void (*)(uint64_t, unint64_t))a11)(a9, a10 & 0xCFFFFFFFFFFFFFFFLL);
      break;
    case 3uLL:
      a11();
      ((void (*)(uint64_t, uint64_t))a11)(a3, a4);
      ((void (*)(uint64_t, uint64_t))a11)(a5, a6);
      break;
    default:
      return;
  }
}

uint64_t *initializeWithCopy for AccessoryPairingCommand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v13;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = a2[3];
  v7 = a2[4];
  v8 = a2[5];
  v9 = a2[6];
  v10 = a2[7];
  v11 = a2[8];
  v13 = a2[9];
  sub_100B5BF94(*a2, v4, v5, v6, v7, v8, v9, v10, v11, v13, (void (*)(void))sub_10001BBBC);
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v7;
  a1[5] = v8;
  a1[6] = v9;
  a1[7] = v10;
  a1[8] = v11;
  a1[9] = v13;
  return a1;
}

uint64_t *assignWithCopy for AccessoryPairingCommand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v23;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = a2[3];
  v7 = a2[4];
  v8 = a2[5];
  v9 = a2[6];
  v10 = a2[7];
  v11 = a2[8];
  v23 = a2[9];
  sub_100B5BF94(*a2, v4, v5, v6, v7, v8, v9, v10, v11, v23, (void (*)(void))sub_10001BBBC);
  v12 = *a1;
  v13 = a1[1];
  v14 = a1[2];
  v15 = a1[3];
  v16 = a1[4];
  v17 = a1[5];
  v18 = a1[6];
  v19 = a1[7];
  v20 = a1[8];
  v21 = a1[9];
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v7;
  a1[5] = v8;
  a1[6] = v9;
  a1[7] = v10;
  a1[8] = v11;
  a1[9] = v23;
  sub_100B5BF94(v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, (void (*)(void))sub_10001BC14);
  return a1;
}

uint64_t *assignWithTake for AccessoryPairingCommand(uint64_t *a1, _OWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  __int128 v13;
  __int128 v14;

  v3 = *a1;
  v5 = a1[1];
  v4 = a1[2];
  v6 = a1[3];
  v7 = a1[4];
  v8 = a1[5];
  v9 = a1[6];
  v10 = a1[7];
  v11 = a1[8];
  v12 = a1[9];
  v13 = a2[1];
  *(_OWORD *)a1 = *a2;
  *((_OWORD *)a1 + 1) = v13;
  v14 = a2[3];
  *((_OWORD *)a1 + 2) = a2[2];
  *((_OWORD *)a1 + 3) = v14;
  *((_OWORD *)a1 + 4) = a2[4];
  sub_100B5BF94(v3, v5, v4, v6, v7, v8, v9, v10, v11, v12, (void (*)(void))sub_10001BC14);
  return a1;
}

uint64_t getEnumTagSinglePayload for AccessoryPairingCommand(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x3FC && *(_BYTE *)(a1 + 80))
    return (*(_DWORD *)a1 + 1020);
  v3 = ((((*(_QWORD *)(a1 + 72) >> 52) & 0x300 | (*(_QWORD *)(a1 + 56) >> 54) & 0xC0) >> 7) & 0xFFFFFC07 | (8 * ((*(_QWORD *)(a1 + 24) >> 58) & 0xC | (*(_QWORD *)(a1 + 8) >> 60) & 3 | *(_BYTE *)(a1 + 47) & 0x30 | (*(_QWORD *)(a1 + 56) >> 54) & 0x40))) ^ 0x3FF;
  if (v3 >= 0x3FB)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for AccessoryPairingCommand(uint64_t result, unsigned int a2, unsigned int a3)
{
  uint64_t v3;

  if (a2 > 0x3FB)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 1020;
    if (a3 >= 0x3FC)
      *(_BYTE *)(result + 80) = 1;
  }
  else
  {
    if (a3 >= 0x3FC)
      *(_BYTE *)(result + 80) = 0;
    if (a2)
    {
      v3 = (-a2 >> 3) & 0x7F | ((-a2 & 0x3FF) << 7);
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = (unint64_t)((-a2 >> 3) & 3) << 60;
      *(_QWORD *)(result + 16) = 0;
      *(_QWORD *)(result + 24) = (v3 << 58) & 0x3000000000000000;
      *(_QWORD *)(result + 32) = 0;
      *(_QWORD *)(result + 40) = (v3 << 56) & 0x3000000000000000;
      *(_QWORD *)(result + 48) = 0;
      *(_QWORD *)(result + 56) = (v3 << 54) & 0x3000000000000000;
      *(_QWORD *)(result + 64) = 0;
      *(_QWORD *)(result + 72) = (v3 << 52) & 0x3000000000000000;
    }
  }
  return result;
}

uint64_t sub_100B5C3CC(uint64_t a1)
{
  unsigned int v1;

  v1 = (*(_QWORD *)(a1 + 72) >> 59) & 6 | ((*(_QWORD *)(a1 + 56) & 0x2000000000000000) != 0);
  if (v1 <= 3)
    return v1;
  else
    return (*(_DWORD *)a1 + 4);
}

uint64_t sub_100B5C3F8(uint64_t result)
{
  unint64_t v1;

  v1 = *(_QWORD *)(result + 72) & 0xCFFFFFFFFFFFFFFFLL;
  *(_QWORD *)(result + 56) &= ~0x2000000000000000uLL;
  *(_QWORD *)(result + 72) = v1;
  return result;
}

_QWORD *sub_100B5C414(_QWORD *result, unsigned int a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;

  if (a2 < 4)
  {
    v2 = result[3] & 0xCFFFFFFFFFFFFFFFLL;
    v3 = result[5] & 0xCFFFFFFFFFFFFFFFLL;
    v4 = result[7] & 0xCFFFFFFFFFFFFFFFLL | ((unint64_t)(a2 & 1) << 61);
    v5 = result[9] & 0xCFFFFFFFFFFFFFFFLL | ((((unint64_t)a2 >> 1) & 3) << 60);
    result[1] &= 0xCFFFFFFFFFFFFFFFLL;
    result[3] = v2;
    result[5] = v3;
    result[7] = v4;
    result[9] = v5;
  }
  else
  {
    *result = a2 - 4;
    *(_OWORD *)(result + 1) = 0u;
    *(_OWORD *)(result + 3) = 0u;
    *(_OWORD *)(result + 5) = 0u;
    *(_OWORD *)(result + 7) = 0u;
    result[9] = 0x2000000000000000;
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessoryPairingCommand()
{
  return &type metadata for AccessoryPairingCommand;
}

void sub_100B5C49C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[15];
  _BYTE v8[56];

  v2 = v1;
  v4 = type metadata accessor for Endianness(0);
  __chkstk_darwin(v4);
  v5 = a1[3];
  v6 = a1[4];
  sub_10001AA44(a1, v5);
  dispatch thunk of BinaryEncoding.container()(v7, v5, v6);
  sub_1007D9D58(v2, (uint64_t)v8);
  __asm { BR              X12 }
}

uint64_t sub_100B5C564@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)(v9 - 112) = v2 & 0xDFFFFFFFFFFFFFFFLL;
  *(_QWORD *)(v9 - 96) = a2 & 0xCFFFFFFFFFFFFFFFLL;
  *(_WORD *)(v3 + 120) = 256;
  static Endianness.current.getter(a1);
  v10 = sub_100112060();
  FixedWidthInteger.convert(to:)((_QWORD *)(v3 + 40), v7, &type metadata for UInt16, v10);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v6);
  *(_WORD *)(v3 + 120) = *(_WORD *)(v3 + 40);
  v11 = *(_QWORD *)(v3 + 184);
  v12 = *(_QWORD *)(v3 + 192);
  sub_10009F5D0(v3 + 160, v11);
  dispatch thunk of BinaryEncodingContaining.encode<A>(_:)(v3 + 120, &type metadata for UInt16, v10, v11, v12);
  if (!v4)
  {
    sub_1007D9D58(v5, v3 + 200);
    __asm { BR              X13 }
  }
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v3 + 160));
}

uint64_t sub_100B5CB2C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  _BYTE v5[80];

  result = sub_100B5D04C(a1, (uint64_t)v5);
  if (!v2)
    return sub_1007D9D58((uint64_t)v5, a2);
  return result;
}

void sub_100B5CB70(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;

  sub_1007D9D58(v1, (uint64_t)&v3);
  sub_100B5C49C(a1);
}

unint64_t sub_100B5CBBC()
{
  unint64_t result;

  result = qword_101116190;
  if (!qword_101116190)
  {
    result = swift_getWitnessTable(byte_100E61A98, &type metadata for AccessoryPairingCommand.AccessoryPairingCommandError);
    atomic_store(result, (unint64_t *)&qword_101116190);
  }
  return result;
}

uint64_t sub_100B5CC00(unsigned __int16 a1)
{
  int v1;
  uint64_t result;

  v1 = a1;
  result = 1;
  switch(v1)
  {
    case 256:
      result = 0;
      break;
    case 257:
      return result;
    case 258:
      result = 2;
      break;
    case 259:
      result = 3;
      break;
    case 260:
      result = 4;
      break;
    default:
      if (v1 == 516)
        result = 5;
      else
        result = 6;
      break;
  }
  return result;
}

void sub_100B5CC60(char a1, uint64_t a2)
{
  _BYTE v3[40];

  sub_100030784(a2, (uint64_t)v3);
  __asm { BR              X10 }
}

void sub_100B5CCB8()
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  ValueMetadata *DynamicType;

  sub_100B5BF08();
  v2 = *(_QWORD *)(v1 - 80);
  v3 = sub_10001AA44((_QWORD *)(v1 - 104), v2);
  DynamicType = (ValueMetadata *)swift_getDynamicType(v3, v2, 1);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v1 - 104));
  if (&type metadata for InitiatePairingCommandPayload == DynamicType)
    __asm { BR              X10 }
  __break(1u);
  JUMPOUT(0x100B5D01CLL);
}

uint64_t sub_100B5D04C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  _QWORD v19[2];
  _QWORD v20[5];
  _QWORD v21[3];
  _QWORD v22[3];
  uint64_t v23;
  uint64_t v24;
  __int16 v25;

  v19[1] = a2;
  v4 = type metadata accessor for Endianness(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a1[3];
  v9 = a1[4];
  sub_10001AA44(a1, v8);
  dispatch thunk of BinaryDecoding.container()(v22, v8, v9);
  v10 = v23;
  v11 = v24;
  sub_10009F5D0((uint64_t)v22, v23);
  v12 = sub_100112060();
  v13 = dispatch thunk of BinaryDecodingContaining.decode<A>(_:)(v20, &type metadata for UInt16, &type metadata for UInt16, v12, v10, v11);
  if (!v2)
  {
    v25 = v20[0];
    static Endianness.current.getter(v13);
    FixedWidthInteger.convert(to:)(v21, v7, &type metadata for UInt16, v12);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    v14 = sub_100B5CC00(v21[0]);
    if (v14 != 6)
      __asm { BR              X10 }
    v15 = sub_100B5CBBC();
    v16 = swift_allocError(&type metadata for AccessoryPairingCommand.AccessoryPairingCommandError, v15, 0, 0);
    *v17 = 1;
    swift_willThrow(v16);
  }
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v22);
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
}

uint64_t storeEnumTagSinglePayload for AccessoryPairingCommand.AccessoryPairingCommandError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_100B5D344 + 4 * byte_100E61973[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100B5D378 + 4 * byte_100E6196E[v4]))();
}

uint64_t sub_100B5D378(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100B5D380(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100B5D388);
  return result;
}

uint64_t sub_100B5D394(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100B5D39CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_100B5D3A0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100B5D3A8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AccessoryPairingCommand.AccessoryPairingCommandError()
{
  return &type metadata for AccessoryPairingCommand.AccessoryPairingCommandError;
}

unint64_t sub_100B5D3C8()
{
  unint64_t result;

  result = qword_101116198;
  if (!qword_101116198)
  {
    result = swift_getWitnessTable(byte_100E61A70, &type metadata for AccessoryPairingCommand.AccessoryPairingCommandError);
    atomic_store(result, (unint64_t *)&qword_101116198);
  }
  return result;
}

uint64_t sub_100B5D40C()
{
  return sub_100B5D444(&qword_1010EA318, (uint64_t)qword_1011B7DF8, (uint64_t)sub_100B5E330);
}

uint64_t sub_100B5D428()
{
  return sub_100B5D444(&qword_1010EA328, (uint64_t)qword_1011B7E28, (uint64_t)sub_100B5E37C);
}

uint64_t sub_100B5D444(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  if (*a1 != -1)
    swift_once(a1, a3);
  v4 = type metadata accessor for Logger(0);
  return sub_10001A9E8(v4, a2);
}

uint64_t sub_100B5D484@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  NSString *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  id v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  void (*v21)(char *, char *, uint64_t);
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;

  v2 = sub_10001A9A8(&qword_1010FBA40);
  __chkstk_darwin(v2);
  v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for URL(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v22 - v10;
  if (qword_1010EA1D0 != -1)
    swift_once(&qword_1010EA1D0, sub_100B11444);
  v23 = 0x7365547265646E75;
  v24 = 0xE900000000000074;
  SynchronousCache.cachedValue<A>(key:computeBlock:)(&v25, &v23, sub_10001F628, 0, &type metadata for Bool);
  swift_bridgeObjectRelease(v24);
  if ((v25 & 1) != 0)
  {
    v12 = NSTemporaryDirectory();
    v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
    v15 = v14;

    URL.init(fileURLWithPath:isDirectory:)(v13, v15, 1);
    return swift_bridgeObjectRelease(v15);
  }
  else
  {
    v17 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
    v18 = 1;
    v19 = objc_msgSend(v17, "URLsForDirectory:inDomains:", 5, 1);

    v20 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v19, v5);
    if (*(_QWORD *)(v20 + 16))
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v4, v20 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80)), v5);
      v18 = 0;
    }
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v4, v18, 1, v5);
    swift_bridgeObjectRelease(v20);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
    {
      sub_100027CE0((uint64_t)v4);
      result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000038, 0x8000000100EEF8F0, "searchpartyd/searchpartydConstants.swift", 40, 2, 41, 0);
      __break(1u);
    }
    else
    {
      v21 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
      v21(v11, v4, v5);
      URL.appendingPathComponent(_:isDirectory:)(0xD00000000000001DLL, 0x8000000100EC5D30, 1);
      (*(void (**)(char *, uint64_t))(v6 + 8))(v11, v5);
      return ((uint64_t (*)(uint64_t, char *, uint64_t))v21)(a1, v9, v5);
    }
  }
  return result;
}

uint64_t *sub_100B5D794()
{
  if (qword_1010EA2D0 != -1)
    swift_once(&qword_1010EA2D0, sub_100B5DFA4);
  return &qword_1011B7DB0;
}

uint64_t sub_100B5D7D4()
{
  uint64_t result;

  sub_100253E58();
  result = OS_os_log.init(subsystem:category:)(0xD00000000000001DLL, 0x8000000100EC5D30, 95, 0xE100000000000000);
  qword_1011B7CF8 = result;
  return result;
}

uint64_t sub_100B5D824(uint64_t a1)
{
  return sub_100308818(a1, qword_1011B7D00, 95, 0xE100000000000000);
}

uint64_t sub_100B5D838()
{
  uint64_t result;

  sub_100253E58();
  result = OS_os_log.init(subsystem:category:)(0xD00000000000001DLL, 0x8000000100EC5D30, 0xD000000000000012, 0x8000000100EC9B80);
  qword_1011B7D18 = result;
  return result;
}

uint64_t sub_100B5D89C()
{
  uint64_t result;

  sub_100253E58();
  result = OS_os_log.init(subsystem:category:)(0xD00000000000001DLL, 0x8000000100EC5D30, 0x636974796C616E61, 0xE900000000000073);
  qword_1011B7D20 = result;
  return result;
}

uint64_t sub_100B5D8FC()
{
  uint64_t result;

  sub_100253E58();
  result = OS_os_log.init(subsystem:category:)(0xD00000000000001DLL, 0x8000000100EC5D30, 0xD000000000000014, 0x8000000100EE4240);
  qword_1011B7D28 = result;
  return result;
}

uint64_t sub_100B5D964()
{
  uint64_t result;

  sub_100253E58();
  result = OS_os_log.init(subsystem:category:)(0xD00000000000001DLL, 0x8000000100EC5D30, 0xD000000000000014, 0x8000000100ECF3D0);
  qword_1011B7D30 = result;
  return result;
}

uint64_t sub_100B5D9CC()
{
  uint64_t result;

  sub_100253E58();
  result = OS_os_log.init(subsystem:category:)(0xD00000000000001DLL, 0x8000000100EC5D30, 0x74536E6F63616562, 0xEB0000000065726FLL);
  qword_1011B7D38 = result;
  return result;
}

uint64_t sub_100B5DA30()
{
  uint64_t result;

  sub_100253E58();
  result = OS_os_log.init(subsystem:category:)(0xD00000000000001DLL, 0x8000000100EC5D30, 0x74694B64756F6C63, 0xE800000000000000);
  qword_1011B7D40 = result;
  return result;
}

uint64_t sub_100B5DA8C()
{
  uint64_t result;

  sub_100253E58();
  result = OS_os_log.init(subsystem:category:)(0xD00000000000001DLL, 0x8000000100EC5D30, 0xD000000000000015, 0x8000000100EEF950);
  qword_1011B7D48 = result;
  return result;
}

uint64_t sub_100B5DAF0()
{
  uint64_t result;

  sub_100253E58();
  result = OS_os_log.init(subsystem:category:)(0xD00000000000001DLL, 0x8000000100EC5D30, 0x646E616D6D6F63, 0xE700000000000000);
  qword_1011B7D50 = result;
  return result;
}

uint64_t sub_100B5DB4C()
{
  uint64_t result;

  sub_100253E58();
  result = OS_os_log.init(subsystem:category:)(0xD00000000000001DLL, 0x8000000100EC5D30, 0x6943796C696D6166, 0xEC000000656C6372);
  qword_1011B7D58 = result;
  return result;
}

uint64_t sub_100B5DBB0()
{
  uint64_t result;

  sub_100253E58();
  result = OS_os_log.init(subsystem:category:)(0xD00000000000001DLL, 0x8000000100EC5D30, 0xD000000000000012, 0x8000000100EEF9D0);
  qword_1011B7D60 = result;
  return result;
}

uint64_t sub_100B5DC14()
{
  uint64_t result;

  sub_100253E58();
  result = OS_os_log.init(subsystem:category:)(0xD00000000000001DLL, 0x8000000100EC5D30, 0x6353746E65746E69, 0xEF72656C75646568);
  qword_1011B7D68 = result;
  return result;
}

uint64_t sub_100B5DC7C()
{
  uint64_t result;

  sub_100253E58();
  result = OS_os_log.init(subsystem:category:)(0xD00000000000001DLL, 0x8000000100EC5D30, 0x6148746E65746E69, 0xED000072656C646ELL);
  qword_1011B7D70 = result;
  return result;
}

uint64_t sub_100B5DCE4()
{
  uint64_t result;

  sub_100253E58();
  result = OS_os_log.init(subsystem:category:)(0xD00000000000001DLL, 0x8000000100EC5D30, 0xD000000000000010, 0x8000000100EEE010);
  qword_1011B7D78 = result;
  return result;
}

uint64_t sub_100B5DD4C()
{
  uint64_t result;

  sub_100253E58();
  result = OS_os_log.init(subsystem:category:)(0xD00000000000001DLL, 0x8000000100EC5D30, 0x6857796669746F6ELL, 0xEF646E756F466E65);
  qword_1011B7D80 = result;
  return result;
}

uint64_t sub_100B5DDB4()
{
  uint64_t result;

  sub_100253E58();
  result = OS_os_log.init(subsystem:category:)(0xD00000000000001DLL, 0x8000000100EC5D30, 0x676E6972696170, 0xE700000000000000);
  qword_1011B7D88 = result;
  return result;
}

uint64_t sub_100B5DE10()
{
  uint64_t result;

  sub_100253E58();
  result = OS_os_log.init(subsystem:category:)(0xD00000000000001DLL, 0x8000000100EC5D30, 0xD000000000000010, 0x8000000100EC5D50);
  qword_1011B7D90 = result;
  return result;
}

uint64_t sub_100B5DE78()
{
  uint64_t result;

  sub_100253E58();
  result = OS_os_log.init(subsystem:category:)(0xD00000000000001DLL, 0x8000000100EC5D30, 0x6465686353637078, 0xEC00000072656C75);
  qword_1011B7D98 = result;
  return result;
}

uint64_t sub_100B5DEDC()
{
  uint64_t result;

  sub_100253E58();
  result = OS_os_log.init(subsystem:category:)(0xD00000000000001DLL, 0x8000000100EC5D30, 0xD000000000000012, 0x8000000100EEF9B0);
  qword_1011B7DA0 = result;
  return result;
}

uint64_t sub_100B5DF40()
{
  uint64_t result;

  sub_100253E58();
  result = OS_os_log.init(subsystem:category:)(0xD00000000000001DLL, 0x8000000100EC5D30, 0xD000000000000017, 0x8000000100EEF990);
  qword_1011B7DA8 = result;
  return result;
}

uint64_t sub_100B5DFA4()
{
  uint64_t result;

  sub_100253E58();
  result = OS_os_log.init(subsystem:category:)(0xD00000000000001DLL, 0x8000000100EC5D30, 0x72756769666E6F63, 0xED00006E6F697461);
  qword_1011B7DB0 = result;
  return result;
}

uint64_t sub_100B5E00C()
{
  uint64_t result;

  sub_100253E58();
  result = OS_os_log.init(subsystem:category:)(0xD00000000000001DLL, 0x8000000100EC5D30, 0x7275446873657246, 0xEB000000006E6169);
  qword_1011B7DB8 = result;
  return result;
}

uint64_t sub_100B5E070()
{
  uint64_t result;

  sub_100253E58();
  result = OS_os_log.init(subsystem:category:)(0xD00000000000001DLL, 0x8000000100EC5D30, 0x65736142656D6974, 0xED00007379654B64);
  qword_1011B7DC0 = result;
  return result;
}

uint64_t sub_100B5E0D8()
{
  uint64_t result;

  sub_100253E58();
  result = OS_os_log.init(subsystem:category:)(0xD00000000000001DLL, 0x8000000100EC5D30, 0x65646F4D74736F6CLL, 0xE800000000000000);
  qword_1011B7DC8 = result;
  return result;
}

uint64_t sub_100B5E134()
{
  uint64_t result;

  sub_100253E58();
  result = OS_os_log.init(subsystem:category:)(0xD00000000000001DLL, 0x8000000100EC5D30, 0x5379726574746162, 0xED00007375746174);
  qword_1011B7DD0 = result;
  return result;
}

uint64_t sub_100B5E19C()
{
  uint64_t result;

  sub_100253E58();
  result = OS_os_log.init(subsystem:category:)(0xD00000000000001DLL, 0x8000000100EC5D30, 0xD000000000000014, 0x8000000100EDB410);
  qword_1011B7DD8 = result;
  return result;
}

uint64_t sub_100B5E204()
{
  uint64_t result;

  sub_100253E58();
  result = OS_os_log.init(subsystem:category:)(0xD00000000000001DLL, 0x8000000100EC5D30, 0x657261776D726966, 0xEE00657461647055);
  qword_1011B7DE0 = result;
  return result;
}

uint64_t sub_100B5E26C()
{
  uint64_t result;

  sub_100253E58();
  result = OS_os_log.init(subsystem:category:)(0xD00000000000001DLL, 0x8000000100EC5D30, 0x6F666E4963666ELL, 0xE700000000000000);
  qword_1011B7DE8 = result;
  return result;
}

uint64_t sub_100B5E2C8()
{
  uint64_t result;

  sub_100253E58();
  result = OS_os_log.init(subsystem:category:)(0xD00000000000001DLL, 0x8000000100EC5D30, 0xD000000000000010, 0x8000000100EEF930);
  qword_1011B7DF0 = result;
  return result;
}

uint64_t sub_100B5E330(uint64_t a1)
{
  return sub_100308818(a1, qword_1011B7DF8, 0x4D676E6972696170, 0xEE00726567616E61);
}

uint64_t sub_100B5E35C(uint64_t a1)
{
  return sub_100308818(a1, qword_1011B7E10, 0x646E616D6D6F63, 0xE700000000000000);
}

uint64_t sub_100B5E37C(uint64_t a1)
{
  return sub_100308818(a1, qword_1011B7E28, 0xD000000000000010, 0x8000000100EEF970);
}

uint64_t sub_100B5E3A0(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  char v19;
  char v20;
  char v21;

  v3 = v1;
  v5 = sub_10001A9A8(&qword_1011161B8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  v11 = sub_100B5EAB0();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for FetchDevicesRequest.Body.CodingKeys, &type metadata for FetchDevicesRequest.Body.CodingKeys, v11, v9, v10);
  v12 = *v3;
  v13 = v3[1];
  v21 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v12, v13, &v21, v5);
  if (!v2)
  {
    v14 = v3[2];
    v20 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v14, &v20, v5);
    v15 = v3[3];
    v16 = v3[4];
    v19 = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v15, v16, &v19, v5);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100B5E4E4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000825A4();
  return RequestContentRepresentable.description.getter(a1, v2);
}

uint64_t sub_100B5E50C()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x6D617473656D6974;
  if (*v0 != 1)
    v1 = 1684628597;
  if (*v0)
    return v1;
  else
    return 0x656372756F73;
}

uint64_t sub_100B5E560@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100B5ED34(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100B5E584(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100B5EAB0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100B5E5AC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100B5EAB0();
  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_100B5E5D4@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  _OWORD v6[2];
  uint64_t v7;

  sub_100B5EE7C(a1, (uint64_t *)v6);
  if (!v2)
  {
    result = *(double *)v6;
    v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    *(_QWORD *)(a2 + 32) = v7;
  }
  return result;
}

uint64_t sub_100B5E618(_QWORD *a1)
{
  return sub_100B5E3A0(a1);
}

uint64_t sub_100B5E650()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  id v5;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __n128 v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  _QWORD v28[5];

  v1 = type metadata accessor for Date(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v28[-1] - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = objc_msgSend((id)objc_opt_self(AKDevice), "currentDevice");
  if (v5
    && (v6 = v5,
        v7 = objc_msgSend(v5, "uniqueDeviceIdentifier"),
        v6,
        v7))
  {
    v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
    v10 = v9;

    v11 = objc_msgSend(objc_allocWithZone((Class)NSProcessInfo), "init");
    v12 = objc_msgSend(v11, "processName");

    v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
    v15 = v14;

    v16 = static Date.trustedNow.getter((uint64_t)v4);
    v17 = Date.epoch.getter(v16);
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
    v18 = type metadata accessor for JSONEncoder(0);
    swift_allocObject(v18, *(unsigned int *)(v18 + 48), *(unsigned __int16 *)(v18 + 52));
    JSONEncoder.init()(v19);
    v28[0] = v13;
    v28[1] = v15;
    v28[2] = v17;
    v28[3] = v8;
    v28[4] = v10;
    v20 = sub_100B5E8B8();
    v21 = dispatch thunk of JSONEncoder.encode<A>(_:)(v28, &type metadata for FetchDevicesRequest.Body, v20);
    if (v0)
    {
      swift_errorRelease(v0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      return 0;
    }
    else
    {
      v1 = v21;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
    }
  }
  else
  {
    v22 = type metadata accessor for GenericError(0);
    v23 = sub_1007802AC();
    swift_allocError(v22, v23, 0, 0);
    strcpy(v24, "Missing UDID!");
    *((_WORD *)v24 + 7) = -4864;
    v25 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(*(_QWORD *)(v22 - 8) + 104))(v24, enum case for GenericError.error(_:), v22);
    swift_willThrow(v25);
  }
  return v1;
}

unint64_t sub_100B5E8B8()
{
  unint64_t result;

  result = qword_1011161A0;
  if (!qword_1011161A0)
  {
    result = swift_getWitnessTable(byte_100E61B8C, &type metadata for FetchDevicesRequest.Body);
    atomic_store(result, (unint64_t *)&qword_1011161A0);
  }
  return result;
}

uint64_t initializeWithCopy for FetchDevicesRequest.Body(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 32) = v4;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

_QWORD *assignWithCopy for FetchDevicesRequest.Body(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  a1[3] = a2[3];
  v6 = a2[4];
  v7 = a1[4];
  a1[4] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

uint64_t assignWithTake for FetchDevicesRequest.Body(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease(v6);
  return a1;
}

ValueMetadata *type metadata accessor for FetchDevicesRequest.Body()
{
  return &type metadata for FetchDevicesRequest.Body;
}

ValueMetadata *type metadata accessor for FetchDevicesRequest()
{
  return &type metadata for FetchDevicesRequest;
}

unint64_t sub_100B5EA24()
{
  unint64_t result;

  result = qword_1011161A8;
  if (!qword_1011161A8)
  {
    result = swift_getWitnessTable(asc_100E61B04, &type metadata for FetchDevicesRequest);
    atomic_store(result, (unint64_t *)&qword_1011161A8);
  }
  return result;
}

unint64_t sub_100B5EA6C()
{
  unint64_t result;

  result = qword_1011161B0;
  if (!qword_1011161B0)
  {
    result = swift_getWitnessTable(asc_100E61B2C, &type metadata for FetchDevicesRequest);
    atomic_store(result, (unint64_t *)&qword_1011161B0);
  }
  return result;
}

unint64_t sub_100B5EAB0()
{
  unint64_t result;

  result = qword_1011161C0;
  if (!qword_1011161C0)
  {
    result = swift_getWitnessTable(a1_35, &type metadata for FetchDevicesRequest.Body.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1011161C0);
  }
  return result;
}

id sub_100B5EAF4()
{
  return sub_100B5EB00((uint64_t)sub_100003D88);
}

id sub_100B5EB00(uint64_t a1)
{
  unint64_t v2;
  char v3;
  char isUniquelyReferenced_nonNull_native;
  id result;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;

  v2 = sub_1006B8DC4((uint64_t)_swiftEmptyArrayStorage);
  if (qword_1010E9D08 != -1)
    swift_once(&qword_1010E9D08, sub_10059A6E0);
  OS_dispatch_queue.sync<A>(execute:)(a1, qword_1011B71A8, &type metadata for Configuration);
  v3 = sub_100C1ADC8(v12);
  swift_bridgeObjectRelease();
  if ((v3 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v2);
    sub_100109D28(1702195828, 0xE400000000000000, 0xD000000000000018, 0x8000000100ED1B90, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
  }
  result = objc_msgSend((id)objc_opt_self(AKDevice), "currentDevice");
  if (result)
  {
    v6 = result;
    v7 = objc_msgSend(result, "serverFriendlyDescription");

    if (v7)
    {
      v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
      v10 = v9;

      v11 = swift_isUniquelyReferenced_nonNull_native(v2);
      sub_100109D28(v8, v10, 0xD000000000000011, 0x8000000100ECA2C0, v11);
      swift_bridgeObjectRelease();
    }
    return (id)v2;
  }
  else
  {
    __break(1u);
  }
  return result;
}

unint64_t sub_100B5ECA0()
{
  unint64_t v0;
  id v1;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v3;
  unint64_t v5;

  v0 = sub_1006B8DC4((uint64_t)&off_10104DF28);
  v1 = sub_100B5EB00((uint64_t)sub_100003D88);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v0);
  v5 = v0;
  sub_1001664D0((uint64_t)v1, (uint64_t)sub_100B27BE4, 0, isUniquelyReferenced_nonNull_native, &v5);
  v3 = v5;
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t sub_100B5ED34(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  char v8;

  if (a1 == 0x656372756F73 && a2 == 0xE600000000000000)
  {
    v5 = 0xE600000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x656372756F73, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6D617473656D6974 && a2 == 0xE900000000000070)
  {
    v7 = 0xE900000000000070;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6D617473656D6974, 0xE900000000000070, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 1684628597 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease(0xE400000000000000);
    return 2;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(1684628597, 0xE400000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_100B5EE7C@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t);
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  char v23;
  char v24;
  char v25;

  v5 = sub_10001A9A8(&qword_1011161C8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  v11 = sub_100B5EAB0();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for FetchDevicesRequest.Body.CodingKeys, &type metadata for FetchDevicesRequest.Body.CodingKeys, v11, v9, v10);
  if (v2)
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  v25 = 0;
  v12 = KeyedDecodingContainer.decode(_:forKey:)(&v25, v5);
  v14 = v13;
  v24 = 1;
  swift_bridgeObjectRetain(v13);
  v22 = KeyedDecodingContainer.decode(_:forKey:)(&v24, v5);
  v23 = 2;
  v15 = KeyedDecodingContainer.decode(_:forKey:)(&v23, v5);
  v17 = v16;
  v18 = *(void (**)(char *, uint64_t))(v6 + 8);
  v19 = v15;
  v18(v8, v5);
  swift_bridgeObjectRetain(v17);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *a2 = v12;
  a2[1] = v14;
  a2[2] = v22;
  a2[3] = v19;
  a2[4] = v17;
  return result;
}

uint64_t storeEnumTagSinglePayload for FetchDevicesRequest.Body.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_100B5F0A4 + 4 * byte_100E61AE5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_100B5F0D8 + 4 * byte_100E61AE0[v4]))();
}

uint64_t sub_100B5F0D8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100B5F0E0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100B5F0E8);
  return result;
}

uint64_t sub_100B5F0F4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100B5F0FCLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_100B5F100(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100B5F108(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FetchDevicesRequest.Body.CodingKeys()
{
  return &type metadata for FetchDevicesRequest.Body.CodingKeys;
}

unint64_t sub_100B5F128()
{
  unint64_t result;

  result = qword_1011161D0;
  if (!qword_1011161D0)
  {
    result = swift_getWitnessTable(aI_54, &type metadata for FetchDevicesRequest.Body.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1011161D0);
  }
  return result;
}

unint64_t sub_100B5F170()
{
  unint64_t result;

  result = qword_1011161D8;
  if (!qword_1011161D8)
  {
    result = swift_getWitnessTable(byte_100E61BF0, &type metadata for FetchDevicesRequest.Body.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1011161D8);
  }
  return result;
}

unint64_t sub_100B5F1B8()
{
  unint64_t result;

  result = qword_1011161E0;
  if (!qword_1011161E0)
  {
    result = swift_getWitnessTable(byte_100E61C18, &type metadata for FetchDevicesRequest.Body.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1011161E0);
  }
  return result;
}

uint64_t *sub_100B5F1FC(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v38 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v38 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = *a2;
    v8 = a2[1];
    sub_10001BBBC(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    v9 = a2[2];
    v10 = a2[3];
    sub_10001BBBC(v9, v10);
    a1[2] = v9;
    a1[3] = v10;
    v11 = a2[4];
    v12 = a2[5];
    sub_10001BBBC(v11, v12);
    a1[4] = v11;
    a1[5] = v12;
    v13 = a2[6];
    v14 = a2[7];
    sub_10001BBBC(v13, v14);
    a1[6] = v13;
    a1[7] = v14;
    v15 = a2[8];
    v16 = a2[9];
    sub_10001BBBC(v15, v16);
    a1[8] = v15;
    a1[9] = v16;
    v17 = a3[9];
    v18 = (char *)a1 + v17;
    v19 = (char *)a2 + v17;
    v20 = type metadata accessor for UUID(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v18, v19, v20);
    v21 = a3[10];
    v22 = a3[11];
    v23 = (uint64_t *)((char *)a1 + v21);
    v24 = (uint64_t *)((char *)a2 + v21);
    v25 = v24[1];
    *v23 = *v24;
    v23[1] = v25;
    v26 = (uint64_t *)((char *)a1 + v22);
    v27 = *(uint64_t *)((char *)a2 + v22);
    v28 = *(uint64_t *)((char *)a2 + v22 + 8);
    swift_bridgeObjectRetain(v25);
    sub_10001BBBC(v27, v28);
    *v26 = v27;
    v26[1] = v28;
    v29 = a3[12];
    v30 = (uint64_t *)((char *)a1 + v29);
    v31 = (uint64_t *)((char *)a2 + v29);
    v32 = *v31;
    v33 = v31[1];
    sub_10001BBBC(*v31, v33);
    *v30 = v32;
    v30[1] = v33;
    v34 = a3[13];
    v35 = (char *)a1 + v34;
    v36 = (char *)a2 + v34;
    v37 = *((_QWORD *)v36 + 1);
    if (v37 >> 60 == 15)
    {
      *(_OWORD *)v35 = *(_OWORD *)v36;
    }
    else
    {
      v39 = *(_QWORD *)v36;
      sub_10001BBBC(*(_QWORD *)v36, *((_QWORD *)v36 + 1));
      *(_QWORD *)v35 = v39;
      *((_QWORD *)v35 + 1) = v37;
    }
    *(uint64_t *)((char *)a1 + a3[14]) = *(uint64_t *)((char *)a2 + a3[14]);
  }
  return a1;
}

uint64_t sub_100B5F38C(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t *v7;
  unint64_t v8;

  sub_10001BC14(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  sub_10001BC14(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
  sub_10001BC14(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
  sub_10001BC14(*(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
  sub_10001BC14(*(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72));
  v4 = a1 + a2[9];
  v5 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  swift_bridgeObjectRelease();
  sub_10001BC14(*(_QWORD *)(a1 + a2[11]), *(_QWORD *)(a1 + a2[11] + 8));
  result = sub_10001BC14(*(_QWORD *)(a1 + a2[12]), *(_QWORD *)(a1 + a2[12] + 8));
  v7 = (uint64_t *)(a1 + a2[13]);
  v8 = v7[1];
  if (v8 >> 60 != 15)
    return sub_10001BC14(*v7, v8);
  return result;
}

uint64_t *sub_100B5F460(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  unint64_t v36;
  uint64_t v37;

  v6 = *a2;
  v7 = a2[1];
  sub_10001BBBC(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  v8 = a2[2];
  v9 = a2[3];
  sub_10001BBBC(v8, v9);
  a1[2] = v8;
  a1[3] = v9;
  v10 = a2[4];
  v11 = a2[5];
  sub_10001BBBC(v10, v11);
  a1[4] = v10;
  a1[5] = v11;
  v12 = a2[6];
  v13 = a2[7];
  sub_10001BBBC(v12, v13);
  a1[6] = v12;
  a1[7] = v13;
  v14 = a2[8];
  v15 = a2[9];
  sub_10001BBBC(v14, v15);
  a1[8] = v14;
  a1[9] = v15;
  v16 = a3[9];
  v17 = (char *)a1 + v16;
  v18 = (char *)a2 + v16;
  v19 = type metadata accessor for UUID(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v17, v18, v19);
  v20 = a3[10];
  v21 = a3[11];
  v22 = (uint64_t *)((char *)a1 + v20);
  v23 = (uint64_t *)((char *)a2 + v20);
  v24 = v23[1];
  *v22 = *v23;
  v22[1] = v24;
  v25 = (uint64_t *)((char *)a1 + v21);
  v26 = *(uint64_t *)((char *)a2 + v21);
  v27 = *(uint64_t *)((char *)a2 + v21 + 8);
  swift_bridgeObjectRetain(v24);
  sub_10001BBBC(v26, v27);
  *v25 = v26;
  v25[1] = v27;
  v28 = a3[12];
  v29 = (uint64_t *)((char *)a1 + v28);
  v30 = (uint64_t *)((char *)a2 + v28);
  v31 = *v30;
  v32 = v30[1];
  sub_10001BBBC(*v30, v32);
  *v29 = v31;
  v29[1] = v32;
  v33 = a3[13];
  v34 = (char *)a1 + v33;
  v35 = (char *)a2 + v33;
  v36 = *((_QWORD *)v35 + 1);
  if (v36 >> 60 == 15)
  {
    *(_OWORD *)v34 = *(_OWORD *)v35;
  }
  else
  {
    v37 = *(_QWORD *)v35;
    sub_10001BBBC(*(_QWORD *)v35, *((_QWORD *)v35 + 1));
    *(_QWORD *)v34 = v37;
    *((_QWORD *)v34 + 1) = v36;
  }
  *(uint64_t *)((char *)a1 + a3[14]) = *(uint64_t *)((char *)a2 + a3[14]);
  return a1;
}

uint64_t *sub_100B5F5C4(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;

  v6 = *a2;
  v7 = a2[1];
  sub_10001BBBC(*a2, v7);
  v8 = *a1;
  v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  sub_10001BC14(v8, v9);
  v10 = a2[2];
  v11 = a2[3];
  sub_10001BBBC(v10, v11);
  v12 = a1[2];
  v13 = a1[3];
  a1[2] = v10;
  a1[3] = v11;
  sub_10001BC14(v12, v13);
  v14 = a2[4];
  v15 = a2[5];
  sub_10001BBBC(v14, v15);
  v16 = a1[4];
  v17 = a1[5];
  a1[4] = v14;
  a1[5] = v15;
  sub_10001BC14(v16, v17);
  v18 = a2[6];
  v19 = a2[7];
  sub_10001BBBC(v18, v19);
  v20 = a1[6];
  v21 = a1[7];
  a1[6] = v18;
  a1[7] = v19;
  sub_10001BC14(v20, v21);
  v22 = a2[8];
  v23 = a2[9];
  sub_10001BBBC(v22, v23);
  v24 = a1[8];
  v25 = a1[9];
  a1[8] = v22;
  a1[9] = v23;
  sub_10001BC14(v24, v25);
  v26 = a3[9];
  v27 = (char *)a1 + v26;
  v28 = (char *)a2 + v26;
  v29 = type metadata accessor for UUID(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v29 - 8) + 24))(v27, v28, v29);
  v30 = a3[10];
  v31 = (uint64_t *)((char *)a1 + v30);
  v32 = (uint64_t *)((char *)a2 + v30);
  *v31 = *v32;
  v33 = v32[1];
  v31[1] = v33;
  swift_bridgeObjectRetain(v33);
  swift_bridgeObjectRelease();
  v34 = a3[11];
  v35 = (uint64_t *)((char *)a1 + v34);
  v36 = (uint64_t *)((char *)a2 + v34);
  v37 = *v36;
  v38 = v36[1];
  sub_10001BBBC(*v36, v38);
  v39 = *v35;
  v40 = v35[1];
  *v35 = v37;
  v35[1] = v38;
  sub_10001BC14(v39, v40);
  v41 = a3[12];
  v42 = (uint64_t *)((char *)a1 + v41);
  v43 = (uint64_t *)((char *)a2 + v41);
  v44 = *v43;
  v45 = v43[1];
  sub_10001BBBC(*v43, v45);
  v46 = *v42;
  v47 = v42[1];
  *v42 = v44;
  v42[1] = v45;
  sub_10001BC14(v46, v47);
  v48 = a3[13];
  v49 = (uint64_t *)((char *)a1 + v48);
  v50 = (uint64_t *)((char *)a2 + v48);
  v51 = *(uint64_t *)((char *)a2 + v48 + 8);
  if (*(unint64_t *)((char *)a1 + v48 + 8) >> 60 != 15)
  {
    if (v51 >> 60 != 15)
    {
      v53 = *v50;
      sub_10001BBBC(v53, v51);
      v54 = *v49;
      v55 = v49[1];
      *v49 = v53;
      v49[1] = v51;
      sub_10001BC14(v54, v55);
      goto LABEL_8;
    }
    sub_1000DC964((uint64_t)v49);
    goto LABEL_6;
  }
  if (v51 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)v49 = *(_OWORD *)v50;
    goto LABEL_8;
  }
  v52 = *v50;
  sub_10001BBBC(v52, v51);
  *v49 = v52;
  v49[1] = v51;
LABEL_8:
  *(uint64_t *)((char *)a1 + a3[14]) = *(uint64_t *)((char *)a2 + a3[14]);
  return a1;
}

_OWORD *sub_100B5F7BC(_OWORD *a1, _OWORD *a2, int *a3)
{
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  a1[4] = a2[4];
  v8 = a3[9];
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for UUID(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
  v12 = a3[11];
  *(_OWORD *)((char *)a1 + a3[10]) = *(_OWORD *)((char *)a2 + a3[10]);
  *(_OWORD *)((char *)a1 + v12) = *(_OWORD *)((char *)a2 + v12);
  v13 = a3[13];
  *(_OWORD *)((char *)a1 + a3[12]) = *(_OWORD *)((char *)a2 + a3[12]);
  *(_OWORD *)((char *)a1 + v13) = *(_OWORD *)((char *)a2 + v13);
  *(_QWORD *)((char *)a1 + a3[14]) = *(_QWORD *)((char *)a2 + a3[14]);
  return a1;
}

uint64_t *sub_100B5F86C(uint64_t *a1, _OWORD *a2, int *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;

  v6 = *a1;
  v7 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_10001BC14(v6, v7);
  v8 = a1[2];
  v9 = a1[3];
  *((_OWORD *)a1 + 1) = a2[1];
  sub_10001BC14(v8, v9);
  v10 = a1[4];
  v11 = a1[5];
  *((_OWORD *)a1 + 2) = a2[2];
  sub_10001BC14(v10, v11);
  v12 = a1[6];
  v13 = a1[7];
  *((_OWORD *)a1 + 3) = a2[3];
  sub_10001BC14(v12, v13);
  v14 = a1[8];
  v15 = a1[9];
  *((_OWORD *)a1 + 4) = a2[4];
  sub_10001BC14(v14, v15);
  v16 = a3[9];
  v17 = (char *)a1 + v16;
  v18 = (char *)a2 + v16;
  v19 = type metadata accessor for UUID(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 40))(v17, v18, v19);
  v20 = a3[10];
  v21 = (uint64_t *)((char *)a1 + v20);
  v22 = (uint64_t *)((char *)a2 + v20);
  v24 = *v22;
  v23 = v22[1];
  *v21 = v24;
  v21[1] = v23;
  swift_bridgeObjectRelease();
  v25 = a3[11];
  v26 = *(uint64_t *)((char *)a1 + v25);
  v27 = *(uint64_t *)((char *)a1 + v25 + 8);
  *(_OWORD *)((char *)a1 + v25) = *(_OWORD *)((char *)a2 + v25);
  sub_10001BC14(v26, v27);
  v28 = a3[12];
  v29 = *(uint64_t *)((char *)a1 + v28);
  v30 = *(uint64_t *)((char *)a1 + v28 + 8);
  *(_OWORD *)((char *)a1 + v28) = *(_OWORD *)((char *)a2 + v28);
  sub_10001BC14(v29, v30);
  v31 = a3[13];
  v32 = (uint64_t *)((char *)a1 + v31);
  v33 = (uint64_t *)((char *)a2 + v31);
  v34 = *(uint64_t *)((char *)a1 + v31 + 8);
  if (v34 >> 60 != 15)
  {
    v35 = v33[1];
    if (v35 >> 60 != 15)
    {
      v36 = *v32;
      *v32 = *v33;
      v32[1] = v35;
      sub_10001BC14(v36, v34);
      goto LABEL_6;
    }
    sub_1000DC964((uint64_t)v32);
  }
  *(_OWORD *)v32 = *(_OWORD *)v33;
LABEL_6:
  *(uint64_t *)((char *)a1 + a3[14]) = *(_QWORD *)((char *)a2 + a3[14]);
  return a1;
}

uint64_t sub_100B5F9CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100B5F9D8);
}

uint64_t sub_100B5F9D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  int v10;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + *(int *)(a3 + 36), a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 40) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  v10 = v9 - 1;
  if (v10 < 0)
    v10 = -1;
  return (v10 + 1);
}

uint64_t sub_100B5FA68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100B5FA74);
}

uint64_t sub_100B5FA74(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + *(int *)(a4 + 36), a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 40) + 8) = a2;
  return result;
}

uint64_t type metadata accessor for AirPodsLEPairingLockCheckResponse(uint64_t a1)
{
  uint64_t result;

  result = qword_101116240;
  if (!qword_101116240)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AirPodsLEPairingLockCheckResponse);
  return result;
}

uint64_t sub_100B5FB30(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[11];

  v4[0] = &unk_100E61D48;
  v4[1] = &unk_100E61D48;
  v4[2] = &unk_100E61D48;
  v4[3] = &unk_100E61D48;
  v4[4] = &unk_100E61D48;
  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v4[5] = *(_QWORD *)(result - 8) + 64;
    v4[6] = &unk_100E61D60;
    v4[7] = &unk_100E61D48;
    v4[8] = &unk_100E61D48;
    v4[9] = &unk_100E61D78;
    v4[10] = (char *)&value witness table for Builtin.Int64 + 64;
    swift_initStructMetadata(a1, 256, 11, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_100B5FBD0(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100B5FBFC + 4 * byte_100E61D00[a1]))(1684628325, 0xE400000000000000);
}

uint64_t sub_100B5FBFC()
{
  return 0x644970696863;
}

uint64_t sub_100B5FC10()
{
  return 0x754E6C6169726573;
}

uint64_t sub_100B5FC30()
{
  return 0x5364656573;
}

uint64_t sub_100B5FC44()
{
  return 0x6953726576726573;
}

uint64_t sub_100B5FC60()
{
  return 0x6449616E6D66;
}

uint64_t sub_100B5FC74()
{
  return 0x704164656B73616DLL;
}

uint64_t sub_100B5FC98()
{
  return 0x654C636341616162;
}

uint64_t sub_100B5FCBC()
{
  return 0x6E49636341616162;
}

unint64_t sub_100B5FCDC()
{
  return 0xD000000000000013;
}

uint64_t sub_100B5FCF8(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100B5FD24 + 4 * byte_100E61D0A[a1]))(1684628325, 0xE400000000000000);
}

uint64_t sub_100B5FD24()
{
  return 0x644970696863;
}

uint64_t sub_100B5FD38()
{
  return 0x754E6C6169726573;
}

uint64_t sub_100B5FD58()
{
  return 0x5364656573;
}

uint64_t sub_100B5FD6C()
{
  return 0x6953726576726573;
}

uint64_t sub_100B5FD88()
{
  return 0x6449616E6D66;
}

uint64_t sub_100B5FD9C()
{
  return 0x704164656B73616DLL;
}

uint64_t sub_100B5FDC0()
{
  return 0x654C636341616162;
}

uint64_t sub_100B5FDE4()
{
  return 0x6E49636341616162;
}

unint64_t sub_100B5FE04()
{
  return 0xD000000000000013;
}

uint64_t sub_100B5FE20@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char *v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  _QWORD *v40;
  uint64_t v41;
  char *v42;
  __int128 v43;
  char v44;

  v37 = a2;
  v3 = type metadata accessor for UUID(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (uint64_t *)((char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v38 = sub_10001A9A8(&qword_1011162A0);
  v7 = *(_QWORD *)(v38 - 8);
  __chkstk_darwin(v38);
  v9 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = (int *)type metadata accessor for AirPodsLEPairingLockCheckResponse(0);
  v11 = __chkstk_darwin(v10);
  v13 = (char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(int *)(v11 + 56);
  v42 = v13;
  *(_QWORD *)&v13[v14] = 0;
  v16 = a1[3];
  v15 = a1[4];
  v40 = a1;
  sub_10001AA44(a1, v16);
  v17 = sub_100B606D8();
  v39 = v9;
  v18 = v41;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for AirPodsLEPairingLockCheckResponse.CodingKeys, &type metadata for AirPodsLEPairingLockCheckResponse.CodingKeys, v17, v16, v15);
  if (v18)
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v40);
  v35 = v4;
  v36 = v6;
  v19 = v7;
  v20 = v37;
  v41 = v3;
  v44 = 0;
  v21 = sub_100036994();
  v22 = v38;
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v43, &type metadata for Data, &v44, v38, &type metadata for Data, v21);
  v23 = v42;
  *(_OWORD *)v42 = v43;
  v44 = 1;
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v43, &type metadata for Data, &v44, v22, &type metadata for Data, v21);
  *((_OWORD *)v23 + 1) = v43;
  v44 = 2;
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v43, &type metadata for Data, &v44, v22, &type metadata for Data, v21);
  *((_OWORD *)v23 + 2) = v43;
  v44 = 3;
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v43, &type metadata for Data, &v44, v22, &type metadata for Data, v21);
  *((_OWORD *)v23 + 3) = v43;
  v44 = 4;
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v43, &type metadata for Data, &v44, v22, &type metadata for Data, v21);
  v34 = v21;
  *((_OWORD *)v23 + 4) = v43;
  LOBYTE(v43) = 5;
  v24 = sub_100252A08();
  v25 = v36;
  v26 = v41;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v36, v41, &v43, v22, v41, v24);
  (*(void (**)(char *, _QWORD *, uint64_t))(v35 + 32))(&v23[v10[9]], v25, v26);
  LOBYTE(v43) = 6;
  v27 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v43, v22);
  v28 = (uint64_t *)&v23[v10[10]];
  *v28 = v27;
  v28[1] = v29;
  v44 = 7;
  v30 = v34;
  v36 = 0;
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v43, &type metadata for Data, &v44, v22, &type metadata for Data, v34);
  v33 = v19;
  *(_OWORD *)&v23[v10[11]] = v43;
  v44 = 8;
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v43, &type metadata for Data, &v44, v22, &type metadata for Data, v30);
  *(_OWORD *)&v23[v10[12]] = v43;
  v44 = 9;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&type metadata for Data, &v44, v22, &type metadata for Data, v30);
  (*(void (**)(char *, uint64_t))(v19 + 8))(v39, v38);
  v31 = (uint64_t)v42;
  *(_OWORD *)&v42[v10[13]] = v43;
  sub_100B6071C(v31, v20);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v40);
  return sub_100B60760(v31);
}

uint64_t sub_100B60470(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v9;

  v2 = *a2;
  v3 = sub_100B5FBD0(*a1);
  v5 = v4;
  v6 = sub_100B5FBD0(v2);
  if (v3 == v6 && v5 == v7)
    v9 = 1;
  else
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v9 & 1;
}

Swift::Int sub_100B604F8()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5);
  v2 = sub_100B5FBD0(v1);
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t sub_100B60558(uint64_t a1)
{
  unsigned __int8 *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = sub_100B5FBD0(*v1);
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease();
}

Swift::Int sub_100B60598()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5);
  v2 = sub_100B5FBD0(v1);
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

unint64_t sub_100B605F4@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_100B60940(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_100B60620@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_100B5FBD0(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_100B60648()
{
  unsigned __int8 *v0;

  return sub_100B5FCF8(*v0);
}

unint64_t sub_100B60650@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_100B60940(a1);
  *a2 = result;
  return result;
}

uint64_t sub_100B60674(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100B606D8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100B6069C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100B606D8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100B606C4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100B5FE20(a1, a2);
}

unint64_t sub_100B606D8()
{
  unint64_t result;

  result = qword_1011162A8;
  if (!qword_1011162A8)
  {
    result = swift_getWitnessTable(byte_100E61EC4, &type metadata for AirPodsLEPairingLockCheckResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1011162A8);
  }
  return result;
}

uint64_t sub_100B6071C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AirPodsLEPairingLockCheckResponse(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100B60760(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for AirPodsLEPairingLockCheckResponse(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t storeEnumTagSinglePayload for AirPodsLEPairingLockCheckResponse.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 9 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 9) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF7)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF6)
    return ((uint64_t (*)(void))((char *)&loc_100B607E8 + 4 * byte_100E61D19[v4]))();
  *a1 = a2 + 9;
  return ((uint64_t (*)(void))((char *)sub_100B6081C + 4 * byte_100E61D14[v4]))();
}

uint64_t sub_100B6081C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100B60824(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100B6082CLL);
  return result;
}

uint64_t sub_100B60838(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100B60840);
  *(_BYTE *)result = a2 + 9;
  return result;
}

uint64_t sub_100B60844(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100B6084C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AirPodsLEPairingLockCheckResponse.CodingKeys()
{
  return &type metadata for AirPodsLEPairingLockCheckResponse.CodingKeys;
}

unint64_t sub_100B6086C()
{
  unint64_t result;

  result = qword_1011162B0;
  if (!qword_1011162B0)
  {
    result = swift_getWitnessTable(byte_100E61E9C, &type metadata for AirPodsLEPairingLockCheckResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1011162B0);
  }
  return result;
}

unint64_t sub_100B608B4()
{
  unint64_t result;

  result = qword_1011162B8;
  if (!qword_1011162B8)
  {
    result = swift_getWitnessTable(asc_100E61DD4, &type metadata for AirPodsLEPairingLockCheckResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1011162B8);
  }
  return result;
}

unint64_t sub_100B608FC()
{
  unint64_t result;

  result = qword_1011162C0;
  if (!qword_1011162C0)
  {
    result = swift_getWitnessTable(byte_100E61DFC, &type metadata for AirPodsLEPairingLockCheckResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1011162C0);
  }
  return result;
}

unint64_t sub_100B60940(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10104D618, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 0xA)
    return 10;
  else
    return v3;
}

uint64_t sub_100B60988(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  _BOOL4 v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  id v19;
  void *v20;
  uint64_t v21;
  unint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  id v26;
  void *v27;
  id v28;
  void *v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint8_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  unint64_t v43;
  uint8_t *v44;
  uint8_t *v45;
  unint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  NSObject *v57;
  os_log_type_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  char *v66;
  unint64_t v67;
  uint64_t v68;
  NSObject *v69;
  os_log_type_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  void *v81;
  uint64_t result;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  id v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;

  v92 = type metadata accessor for HashAlgorithm(0);
  v94 = *(_QWORD *)(v92 - 8);
  __chkstk_darwin(v92);
  v93 = (char *)&v88 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = (_QWORD *)type metadata accessor for String.Encoding(0);
  v6 = *(v5 - 1);
  __chkstk_darwin(v5);
  v95 = (char *)&v88 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1010EA318 != -1)
    swift_once(&qword_1010EA318, sub_100B5E330);
  v8 = type metadata accessor for Logger(0);
  v9 = sub_10001A9E8(v8, (uint64_t)qword_1011B7DF8);
  sub_10001BD08(a1, a2);
  v10 = sub_10001BD08(a1, a2);
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.info.getter(v11);
  v13 = os_log_type_enabled(v11, v12);
  v96 = v6;
  v97 = v5;
  if (v13)
  {
    v14 = (uint8_t *)swift_slowAlloc(12, -1);
    v15 = swift_slowAlloc(32, -1);
    v98 = v15;
    *(_DWORD *)v14 = 136315138;
    if (a2 >> 60 == 15)
    {
      v16 = 0;
      v17 = 0xE000000000000000;
    }
    else
    {
      v16 = Data.hexString.getter(a1, a2);
      v17 = v18;
    }
    v100 = sub_100016940(v16, v17, &v98);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v100, &v101, v14 + 4, v14 + 12);
    swift_bridgeObjectRelease();
    sub_10001EF3C(a1, a2);
    sub_10001EF3C(a1, a2);
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "E1 encryption key from server: %s", v14, 0xCu);
    swift_arrayDestroy(v15, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v15, -1, -1);
    swift_slowDealloc(v14, -1, -1);
  }
  else
  {
    sub_10001EF3C(a1, a2);
    sub_10001EF3C(a1, a2);
  }

  v19 = objc_msgSend((id)objc_opt_self(ACAccountStore), "defaultStore");
  if (v19)
  {
    v20 = v19;
    v21 = a1;
    v22 = a2;
    if (a2 >> 60 == 15)
    {
      if (qword_1010EA330 != -1)
        v19 = (id)swift_once(&qword_1010EA330, sub_100B64278);
      v22 = qword_1011162D0;
      if ((unint64_t)qword_1011162D0 >> 60 == 15)
      {
        v23 = Logger.logObject.getter(v19);
        v24 = static os_log_type_t.error.getter(v23);
        if (os_log_type_enabled(v23, v24))
        {
          v25 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v25 = 0;
          _os_log_impl((void *)&_mh_execute_header, v23, v24, "Invalid server public key.", v25, 2u);
          swift_slowDealloc(v25, -1, -1);
        }

        goto LABEL_37;
      }
      v21 = qword_1011162C8;
      sub_10001BBBC(qword_1011162C8, qword_1011162D0);
    }
    sub_10001BD08(a1, a2);
    v26 = objc_msgSend(v20, "aa_primaryAppleAccount");
    v91 = v9;
    if (v26)
    {
      v27 = v26;
      v28 = objc_msgSend(v26, "aa_personID");
      if (v28)
      {
        v29 = v28;
        v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(v28);
        v32 = v31;

        v33 = swift_bridgeObjectRetain_n(v32, 2);
        v34 = Logger.logObject.getter(v33);
        v35 = static os_log_type_t.debug.getter(v34);
        if (os_log_type_enabled(v34, v35))
        {
          v89 = v22;
          v36 = (uint8_t *)swift_slowAlloc(12, -1);
          v37 = swift_slowAlloc(32, -1);
          v88 = v21;
          v38 = v37;
          v98 = v37;
          *(_DWORD *)v36 = 136315138;
          swift_bridgeObjectRetain(v32);
          v100 = sub_100016940(v30, v32, &v98);
          v22 = v89;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v100, &v101, v36 + 4, v36 + 12);
          swift_bridgeObjectRelease_n(v32, 3);
          _os_log_impl((void *)&_mh_execute_header, v34, v35, "DSID: %s", v36, 0xCu);
          swift_arrayDestroy(v38, 1, (char *)&type metadata for Any + 8);
          v39 = v38;
          v21 = v88;
          swift_slowDealloc(v39, -1, -1);
          swift_slowDealloc(v36, -1, -1);

        }
        else
        {

          v40 = swift_bridgeObjectRelease_n(v32, 2);
        }
        v66 = v95;
        static String.Encoding.utf8.getter(v40);
        v50 = String.data(using:allowLossyConversion:)(v66, 0, v30, v32);
        v52 = v67;
        (*(void (**)(char *, id))(v96 + 8))(v66, v97);
        v62 = v92;
        if (v52 >> 60 == 15)
        {
          swift_bridgeObjectRetain(v32);
          v69 = Logger.logObject.getter(v68);
          v70 = static os_log_type_t.error.getter(v69);
          if (os_log_type_enabled(v69, v70))
          {
            v71 = swift_slowAlloc(22, -1);
            v72 = swift_slowAlloc(32, -1);
            v88 = v21;
            v73 = v72;
            v98 = v72;
            *(_DWORD *)v71 = 141558275;
            v100 = 1752392040;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v100, &v101, v71 + 4, v71 + 12);
            *(_WORD *)(v71 + 12) = 2081;
            v89 = v22;
            swift_bridgeObjectRetain(v32);
            v100 = sub_100016940(v30, v32, &v98);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v100, &v101, v71 + 14, v71 + 22);
            swift_bridgeObjectRelease_n(v32, 3);
            _os_log_impl((void *)&_mh_execute_header, v69, v70, "Invalid DSID %{private,mask.hash}s", (uint8_t *)v71, 0x16u);
            swift_arrayDestroy(v73, 1, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v73, -1, -1);
            swift_slowDealloc(v71, -1, -1);

            sub_10001BC14(v88, v89);
            return 0;
          }
          swift_bridgeObjectRelease_n(v32, 2);

          sub_10001BC14(v21, v22);
          goto LABEL_37;
        }
        v97 = v20;
        swift_bridgeObjectRelease();
        v54 = v94;
        v74 = v27;
        v53 = v93;
        (*(void (**)(char *, _QWORD, uint64_t))(v94 + 104))(v93, enum case for HashAlgorithm.sha256(_:), v62);
        v63 = Data.hash(algorithm:)(v53, v50, v52);
        v76 = v75;

        v65 = v76;
        goto LABEL_34;
      }

    }
    v41 = Logger.logObject.getter(v26);
    v42 = static os_log_type_t.error.getter(v41);
    if (os_log_type_enabled(v41, v42))
    {
      v43 = v22;
      v44 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v44 = 0;
      _os_log_impl((void *)&_mh_execute_header, v41, v42, "Failed to obtain DSID from account. Using device serial number instead to support account signed out.", v44, 2u);
      v45 = v44;
      v22 = v43;
      swift_slowDealloc(v45, -1, -1);
    }

    v47 = *(_QWORD *)(v90 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_serialNumber);
    v46 = *(_QWORD *)(v90 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_serialNumber + 8);
    swift_bridgeObjectRetain(v46);
    v48 = v95;
    static String.Encoding.utf8.getter(v49);
    v50 = String.data(using:allowLossyConversion:)(v48, 0, v47, v46);
    v52 = v51;
    (*(void (**)(char *, id))(v96 + 8))(v48, v97);
    v53 = v93;
    v54 = v94;
    if (v52 >> 60 == 15)
    {
      v55 = v21;
      swift_bridgeObjectRetain(v46);
      v57 = Logger.logObject.getter(v56);
      v58 = static os_log_type_t.error.getter(v57);
      if (os_log_type_enabled(v57, v58))
      {
        v59 = swift_slowAlloc(22, -1);
        v60 = swift_slowAlloc(32, -1);
        v97 = v20;
        v98 = v60;
        v61 = v60;
        *(_DWORD *)v59 = 141558275;
        v100 = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v100, &v101, v59 + 4, v59 + 12);
        *(_WORD *)(v59 + 12) = 2081;
        swift_bridgeObjectRetain(v46);
        v100 = sub_100016940(v47, v46, &v98);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v100, &v101, v59 + 14, v59 + 22);
        swift_bridgeObjectRelease_n(v46, 3);
        _os_log_impl((void *)&_mh_execute_header, v57, v58, "Invalid serial number %{private,mask.hash}s", (uint8_t *)v59, 0x16u);
        swift_arrayDestroy(v61, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v61, -1, -1);
        swift_slowDealloc(v59, -1, -1);

        sub_10001BC14(v55, v22);
        return 0;
      }
      sub_10001BC14(v55, v22);

      swift_bridgeObjectRelease_n(v46, 2);
LABEL_37:

      return 0;
    }
    v97 = v20;
    swift_bridgeObjectRelease();
    v62 = v92;
    (*(void (**)(char *, _QWORD, uint64_t))(v54 + 104))(v53, enum case for HashAlgorithm.sha256(_:), v92);
    v63 = Data.hash(algorithm:)(v53, v50, v52);
    v65 = v64;
LABEL_34:
    sub_10001EF3C(v50, v52);
    (*(void (**)(char *, uint64_t))(v54 + 8))(v53, v62);
    sub_10001BBBC(v21, v22);
    v77 = v21;
    v78 = sub_1002FB894(v21, v22);
    v80 = v79;
    sub_10001BBBC(v78, v79);
    v81 = objc_autoreleasePoolPush();
    sub_1007E5D00(&v98);
    objc_autoreleasePoolPop(v81);
    sub_10001BC14(v78, v80);
    sub_1002F7040(v98, v99);
    sub_10001BC14(v63, v65);
    sub_10001BC14(v77, v22);

    sub_10001BC14(v78, v80);
    v83 = v98;
    v84 = v99;
    v85 = v90;
    v86 = *(_QWORD *)(v90 + 40);
    v87 = *(_QWORD *)(v90 + 48);
    *(_QWORD *)(v90 + 40) = v98;
    *(_QWORD *)(v85 + 48) = v84;
    sub_10001BBBC(v83, v84);
    sub_10001EF3C(v86, v87);
    return v83;
  }
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000040, 0x8000000100EEBBD0, "searchpartyd/AirPodsPairingInfo.swift", 37, 2, 76, 0);
  __break(1u);
  return result;
}

uint64_t sub_100B6153C@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  _BYTE v63[232];

  v3 = *(_QWORD *)((char *)v1 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_payloadSignatureS4 + 8);
  if (v3 >> 60 == 15
    || (v4 = *(_QWORD *)((char *)v1 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_scrtAttestation + 8),
        v4 >> 60 == 15)
    || (v5 = *(_QWORD *)((char *)v1 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessoryCerts + 8),
        v5 >> 60 == 15)
    || (v6 = *(_QWORD *)((char *)v1 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_csr + 8), v6 >> 60 == 15)
    || (v7 = *(_QWORD *)((char *)v1 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_authNonce + 8), v7 >> 60 == 15)
    || (v8 = *(_QWORD *)((char *)v1 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_alternateSerialNumber + 8),
        v8 >> 60 == 15)
    || (v9 = *(_QWORD *)((char *)v1 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessorySerialNumber + 8),
        v9 >> 60 == 15)
    || (v10 = *(_QWORD *)((char *)v1 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_status + 8), v10 >> 60 == 15))
  {
    if (qword_1010EA328 != -1)
      swift_once(&qword_1010EA328, sub_100B5E37C);
    v11 = type metadata accessor for Logger(0);
    v12 = sub_10001A9E8(v11, (uint64_t)qword_1011B7E28);
    v13 = Logger.logObject.getter(v12);
    v14 = static os_log_type_t.error.getter(v13);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Missing info to generate AirPodsPairingAckData!", v15, 2u);
      swift_slowDealloc(v15, -1, -1);
    }

    sub_100B65D48(&v36);
  }
  else
  {
    v17 = *(_QWORD *)((char *)v1 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_scrtAttestation);
    v21 = *(_QWORD *)((char *)v1 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessoryCerts);
    v22 = *(_QWORD *)((char *)v1 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_csr);
    v24 = *(_QWORD *)((char *)v1 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_authNonce);
    v25 = *(_QWORD *)((char *)v1 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_alternateSerialNumber);
    v26 = *(_QWORD *)((char *)v1 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessorySerialNumber);
    v27 = *(_QWORD *)((char *)v1 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_payloadSignatureS4);
    v23 = *(_QWORD *)((char *)v1 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_status);
    v35 = *(_QWORD *)((char *)v1 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_ecid + 8);
    v18 = *(_QWORD *)((char *)v1 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_chipId);
    v33 = *(_QWORD *)((char *)v1 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_chipId + 8);
    v19 = *(_QWORD *)((char *)v1 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_serialNumber);
    v34 = *(_QWORD *)((char *)v1 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_serialNumber + 8);
    v31 = v1[3];
    v32 = v1[2];
    v20 = v1[11];
    v30 = v1[13];
    v28 = v1[12];
    v29 = v1[14];
    *(_QWORD *)&v36 = *(_QWORD *)((char *)v1 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_ecid);
    *((_QWORD *)&v36 + 1) = v35;
    v37 = v18;
    v38 = v33;
    v39 = v19;
    v40 = v34;
    v41 = v24;
    v42 = v7;
    v43 = v26;
    v44 = v9;
    v45 = v25;
    v46 = v8;
    v47 = v21;
    v48 = v5;
    v49 = v22;
    v50 = v6;
    v51 = v32;
    v52 = v31;
    v53 = v17;
    v54 = v4;
    v55 = v27;
    v56 = v3;
    v57 = v23;
    v58 = v10;
    v59 = v20;
    v60 = v28;
    v61 = v30;
    v62 = v29;
    SharingCircleWildAdvertisementKey.init(key:)(&v36);
    sub_10001BD08(v27, v3);
    sub_10001BD08(v17, v4);
    sub_10001BD08(v21, v5);
    sub_10001BD08(v22, v6);
    sub_10001BD08(v24, v7);
    sub_10001BD08(v25, v8);
    sub_10001BD08(v26, v9);
    sub_10001BD08(v23, v10);
    swift_bridgeObjectRetain(v33);
    swift_bridgeObjectRetain(v34);
    swift_bridgeObjectRetain(v35);
    sub_10001BBBC(v32, v31);
    swift_bridgeObjectRetain(v28);
    sub_10001BD08(v30, v29);
  }
  sub_100005CF0((uint64_t)&v36, (uint64_t)v63, &qword_1010EC518);
  return sub_100005CF0((uint64_t)v63, a1, &qword_1010EC518);
}

uint64_t sub_100B618C4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint8_t *v36;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  uint8_t *v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint8_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  NSObject *v51;
  os_log_type_t v52;
  uint8_t *v53;
  uint8_t *v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  uint8_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint8_t *v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint8_t *v90;
  uint8_t *v91;
  uint64_t v92;
  NSObject *v93;
  id v94;
  uint64_t v95;
  uint8_t *v96;
  uint64_t v97;
  unint64_t v98;
  uint8_t *v99;
  unint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t v114;
  unint64_t v115;
  unint64_t v116;
  uint64_t v117;
  unint64_t v118;
  unint64_t v119;
  char v120;
  __int128 v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  unint64_t v125;
  char v126;
  uint64_t v127;
  uint8_t *v128;
  id v129;
  uint64_t v130;
  NSObject *v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  unint64_t v138;
  uint8_t *v139;
  char v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t v146;
  unint64_t v147;
  uint64_t v148;
  unint64_t v149;
  uint64_t v150;
  unint64_t v151;
  uint8_t *v152;
  uint8_t *v153;
  uint64_t v154;
  unint64_t v155;
  uint64_t v156;
  unint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  unint64_t v161;
  uint64_t v162[43];

  v7 = v6;
  v119 = a2;
  v13 = sub_10001A9A8(&qword_1010EF198);
  __chkstk_darwin(v13);
  v15 = (char *)&v86 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = v6[6];
  if (v16 >> 60 == 15)
    goto LABEL_13;
  v17 = *(_QWORD *)((char *)v6 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_baaSignatureS2 + 8);
  if (v17 >> 60 == 15)
    goto LABEL_13;
  if ((*((_BYTE *)v6 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessoryPartId + 1) & 1) != 0)
    goto LABEL_13;
  v18 = *(_QWORD *)((char *)v6 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessoryCerts + 8);
  if (v18 >> 60 == 15)
    goto LABEL_13;
  v19 = *(_QWORD *)((char *)v7 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_csr + 8);
  if (v19 >> 60 == 15)
    goto LABEL_13;
  v20 = *(_QWORD *)((char *)v7 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessorySerialNumber + 8);
  if (v20 >> 60 == 15)
    goto LABEL_13;
  v21 = *(_QWORD *)((char *)v7 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_seedK1 + 8);
  if (v21 >> 60 == 15)
    goto LABEL_13;
  v22 = *(_QWORD *)((char *)v7 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_scrtAttestation + 8);
  if (v22 >> 60 == 15)
    goto LABEL_13;
  v23 = *(_QWORD *)((char *)v7 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_authNonce + 8);
  if (v23 >> 60 == 15)
    goto LABEL_13;
  v24 = *(_QWORD *)((char *)v7 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_alternateSerialNumber + 8);
  if (v24 >> 60 == 15)
    goto LABEL_13;
  v114 = v7[5];
  v106 = *(_QWORD *)((char *)v7 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_baaSignatureS2);
  LODWORD(v95) = *((unsigned __int8 *)v7 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessoryPartId);
  v25 = *(_QWORD *)((char *)v7 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessoryCerts);
  v110 = *(_QWORD *)((char *)v7 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_csr);
  v111 = v25;
  v26 = *(_QWORD *)((char *)v7 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessorySerialNumber);
  v27 = *(_QWORD *)((char *)v7 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_seedK1);
  v107 = *(_QWORD *)((char *)v7 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_scrtAttestation);
  v108 = v27;
  v28 = *(_QWORD *)((char *)v7 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_authNonce);
  v103 = *(_QWORD *)((char *)v7 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_alternateSerialNumber);
  v104 = v28;
  v116 = v19;
  v117 = v26;
  v162[0] = v26;
  v162[1] = v20;
  v115 = v17;
  v118 = v20;
  v112 = v22;
  v113 = v21;
  v109 = v23;
  v105 = v24;
  sub_10001BD08(v26, v20);
  sub_10001BD08(v117, v118);
  sub_10001BD08(v114, v16);
  sub_10001BD08(v106, v115);
  sub_10001BD08(v111, v18);
  sub_10001BD08(v110, v116);
  sub_10001BD08(v108, v113);
  sub_10001BD08(v107, v112);
  sub_10001BD08(v104, v109);
  sub_10001BD08(v103, v105);
  v29 = sub_100035530();
  v100 = v18;
  if ((DataProtocol.isNull.getter(&type metadata for Data, v29) & 1) == 0)
  {
    v38 = v117;
    v97 = Data.trimmed.getter(v117, v118);
    v98 = v39;
    sub_10001EF3C(v38, v118);
    if (qword_1010EA328 != -1)
      swift_once(&qword_1010EA328, sub_100B5E37C);
    v40 = type metadata accessor for Logger(0);
    v96 = (uint8_t *)sub_10001A9E8(v40, (uint64_t)qword_1011B7E28);
    v102 = a3;
    sub_10001BD08(a3, a4);
    v101 = a4;
    v41 = sub_10001BD08(v102, a4);
    v42 = Logger.logObject.getter(v41);
    LODWORD(v93) = static os_log_type_t.default.getter(v42);
    if (os_log_type_enabled(v42, (os_log_type_t)v93))
    {
      v94 = v42;
      v43 = (uint8_t *)swift_slowAlloc(12, -1);
      v92 = swift_slowAlloc(32, -1);
      v162[0] = v92;
      v99 = v43;
      *(_DWORD *)v43 = 136446210;
      if (v101 >> 60 == 15)
      {
        v44 = 0;
        v45 = 0xE000000000000000;
      }
      else
      {
        v44 = Data.hexString.getter(a3, v101);
        v45 = v46;
      }
      v90 = (uint8_t *)v45;
      v91 = v99 + 4;
      v47 = v99;
      *(_QWORD *)&v121 = sub_100016940(v44, v45, v162);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v121, (char *)&v121 + 8, v91, v47 + 12);
      swift_bridgeObjectRelease();
      v48 = v102;
      sub_10001EF3C(v102, v101);
      sub_10001EF3C(v48, v101);
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)v94, (os_log_type_t)v93, "Pairing token: %{public}s", v99, 0xCu);
      v49 = v92;
      swift_arrayDestroy(v92, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v49, -1, -1);
      swift_slowDealloc(v99, -1, -1);

    }
    else
    {
      sub_10001EF3C(v102, v101);
      sub_10001EF3C(v102, v101);

    }
    v99 = (uint8_t *)sub_100B642B4(a5);
    v50 = swift_bridgeObjectRetain_n(v99, 2);
    v51 = Logger.logObject.getter(v50);
    v52 = static os_log_type_t.default.getter(v51);
    LODWORD(v94) = v52;
    if (os_log_type_enabled(v51, v52))
    {
      v96 = (uint8_t *)swift_slowAlloc(22, -1);
      v92 = swift_slowAlloc(32, -1);
      v162[0] = v92;
      v53 = v96;
      *(_DWORD *)v96 = 141558275;
      *(_QWORD *)&v121 = 1752392040;
      v91 = (uint8_t *)&v121 + 8;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v121, (char *)&v121 + 8, v53 + 4, v53 + 12);
      v54 = v96;
      *((_WORD *)v96 + 6) = 2081;
      v90 = v54 + 14;
      v89 = type metadata accessor for MultipartAccessoryPairingInfo(0);
      v88 = sub_100059BCC();
      v93 = v51;
      swift_bridgeObjectRetain(v99);
      v89 = Dictionary.description.getter(v55, &type metadata for OwnedBeaconGroup.SerialNumber, v89, v88);
      v57 = v56;
      swift_bridgeObjectRelease();
      *(_QWORD *)&v121 = sub_100016940(v89, v57, v162);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v121, v91, v90, v96 + 22);
      swift_bridgeObjectRelease_n(v99, 2);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v93, (os_log_type_t)v94, "otherSerialNumbersAndPartIds: %{private,mask.hash}s", v96, 0x16u);
      v58 = v92;
      swift_arrayDestroy(v92, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v58, -1, -1);
      swift_slowDealloc(v96, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v99, 2);
    }
    v96 = (uint8_t *)OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_otherSerialNumbersAndPartIds;
    *(_QWORD *)((char *)v7 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_otherSerialNumbersAndPartIds) = v99;
    swift_bridgeObjectRelease();
    if (*(_QWORD *)(a5 + 16))
    {
      v59 = v97;
      sub_10001BBBC(v97, v98);
      v60 = (void *)sub_100518E4C(v59, v98);
      if ((v61 & 1) != 0)
      {
        v99 = *(uint8_t **)(a5 + 56);
        v94 = v60;
        v62 = type metadata accessor for OwnedBeaconGroup.PairingState(0);
        v63 = *(_QWORD *)(v62 - 8);
        sub_100B65C70((uint64_t)&v99[*(_QWORD *)(v63 + 72) * (_QWORD)v94], (uint64_t)v15);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v63 + 56))(v15, 0, 1, v62);
      }
      else
      {
        v62 = type metadata accessor for OwnedBeaconGroup.PairingState(0);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v62 - 8) + 56))(v15, 1, 1, v62);
      }
      v65 = v95;
      sub_10001BC14(v97, v98);
      type metadata accessor for OwnedBeaconGroup.PairingState(0);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v62 - 8) + 48))(v15, 1, v62) != 1)
      {
        if (swift_getEnumCaseMultiPayload(v15, v62) == 1)
        {
          v83 = sub_10001A9A8(&qword_1010F5DC0);
          v84 = (uint64_t)&v15[*(int *)(v83 + 48)];
          sub_10001EF3C(*(_QWORD *)&v15[*(int *)(v83 + 64)], *(_QWORD *)&v15[*(int *)(v83 + 64) + 8]);
          sub_100004048(v84, (uint64_t *)&unk_1010F9890);
          v85 = type metadata accessor for UUID(0);
          (*(void (**)(char *, uint64_t))(*(_QWORD *)(v85 - 8) + 8))(v15, v85);
          HIDWORD(v86) = 1;
          goto LABEL_38;
        }
        sub_100B65C34((uint64_t)v15);
LABEL_37:
        HIDWORD(v86) = 0;
LABEL_38:
        v66 = *(uint8_t **)((char *)v7 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_ecid + 8);
        v95 = *(_QWORD *)((char *)v7 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_ecid);
        v91 = v66;
        v67 = *(_QWORD *)((char *)v7 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_chipId + 8);
        v94 = *(id *)((char *)v7 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_chipId);
        v89 = v67;
        v68 = *(_QWORD *)((char *)v7 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_serialNumber + 8);
        v93 = *(NSObject **)((char *)v7 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_serialNumber);
        v87 = v68;
        v99 = *(uint8_t **)((char *)v7 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_numBeacons);
        v92 = *(_QWORD *)((char *)v7 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_otherSerialNumbers);
        v69 = v92;
        v88 = *(_QWORD *)&v96[(_QWORD)v7];
        LOBYTE(v162[0]) = v65;
        sub_10001BD08(v102, a4);
        v70 = a1;
        v71 = a1;
        v72 = v119;
        sub_10001BBBC(v71, v119);
        v73 = sub_100059570();
        swift_bridgeObjectRetain(v66);
        swift_bridgeObjectRetain(v67);
        v74 = v87;
        swift_bridgeObjectRetain(v87);
        swift_bridgeObjectRetain(v69);
        v75 = v88;
        swift_bridgeObjectRetain(v88);
        v96 = (uint8_t *)FixedWidthInteger.data.getter(&type metadata for UInt8, v73);
        v90 = v76;
        sub_10001BC14(v97, v98);
        *(_QWORD *)&v121 = v70;
        *((_QWORD *)&v121 + 1) = v72;
        v122 = v106;
        v123 = v115;
        v124 = v102;
        v125 = v101;
        v77 = v7[2];
        v78 = v7[3];
        v126 = BYTE4(v86);
        v79 = v7[11];
        v80 = v7[12];
        v127 = v95;
        v128 = v91;
        v81 = v7[13];
        v82 = v7[14];
        v120 = 0;
        v129 = v94;
        v130 = v89;
        v131 = v93;
        v132 = v74;
        v133 = v104;
        v134 = v109;
        v135 = v117;
        v136 = v118;
        v137 = v103;
        v138 = v105;
        v139 = v99;
        v140 = 0;
        v141 = v92;
        v142 = v75;
        v143 = 0;
        v144 = v108;
        v145 = v113;
        v146 = v111;
        v147 = v100;
        v148 = v110;
        v149 = v116;
        v150 = v107;
        v151 = v112;
        v152 = v96;
        v153 = v90;
        v154 = v77;
        v155 = v78;
        v156 = v114;
        v157 = v16;
        v158 = v79;
        v159 = v80;
        v160 = v81;
        v161 = v82;
        SharingCircleWildAdvertisementKey.init(key:)(&v121);
        sub_10001BBBC(v77, v78);
        swift_bridgeObjectRetain(v80);
        sub_10001BD08(v81, v82);
        goto LABEL_18;
      }
    }
    else
    {
      v64 = type metadata accessor for OwnedBeaconGroup.PairingState(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v64 - 8) + 56))(v15, 1, 1, v64);
      v65 = v95;
    }
    sub_100004048((uint64_t)v15, &qword_1010EF198);
    goto LABEL_37;
  }
  v30 = v117;
  v31 = v118;
  sub_10001EF3C(v117, v118);
  sub_10001EF3C(v103, v105);
  sub_10001EF3C(v104, v109);
  sub_10001EF3C(v107, v112);
  sub_10001EF3C(v108, v113);
  sub_10001EF3C(v30, v31);
  sub_10001EF3C(v110, v116);
  sub_10001EF3C(v111, v100);
  sub_10001EF3C(v106, v115);
  sub_10001EF3C(v114, v16);
LABEL_13:
  if (qword_1010EA328 != -1)
    swift_once(&qword_1010EA328, sub_100B5E37C);
  v32 = type metadata accessor for Logger(0);
  v33 = sub_10001A9E8(v32, (uint64_t)qword_1011B7E28);
  v34 = Logger.logObject.getter(v33);
  v35 = static os_log_type_t.error.getter(v34);
  if (os_log_type_enabled(v34, v35))
  {
    v36 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v36 = 0;
    _os_log_impl((void *)&_mh_execute_header, v34, v35, "Missing info to generate AirPodsLEPairingCheckData!", v36, 2u);
    swift_slowDealloc(v36, -1, -1);
  }

  sub_100B65D74(&v121);
LABEL_18:
  sub_100005CF0((uint64_t)&v121, (uint64_t)v162, &qword_1010EC5A0);
  return sub_100005CF0((uint64_t)v162, a6, &qword_1010EC5A0);
}

uint64_t sub_100B62420@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v3;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  _BYTE v78[280];

  v5 = *(_QWORD *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_payloadSignatureS4 + 8);
  if (v5 >> 60 == 15)
    goto LABEL_11;
  v6 = *(_QWORD *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessoryEcid + 8);
  if (v6 >> 60 == 15)
    goto LABEL_11;
  v7 = *(_QWORD *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_scrtAttestation + 8);
  if (v7 >> 60 == 15)
    goto LABEL_11;
  v8 = *(_QWORD *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_baaAccLeafCert + 8);
  if (v8 >> 60 == 15)
    goto LABEL_11;
  v9 = *(_QWORD *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_baaAccIntCA1 + 8);
  if (v9 >> 60 == 15
    || (v10 = *(_QWORD *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_systemPublicKey + 8),
        v10 >> 60 == 15)
    || (v12 = *(_QWORD *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_refPublicKey + 8),
        v12 >> 60 == 15)
    || (v13 = *(_QWORD *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessoryChipId + 8),
        v13 >> 60 == 15)
    || (v14 = *(_QWORD *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessorySerialNumber + 8),
        v14 >> 60 == 15)
    || (v15 = a1,
        v16 = *(_QWORD *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_status + 8),
        a1 = v16 >> 60,
        v16 >> 60 == 15))
  {
LABEL_11:
    v17 = static os_log_type_t.error.getter(a1);
    if (qword_1010EA310 != -1)
      swift_once(&qword_1010EA310, sub_100B5E2C8);
    os_log(_:dso:log:_:_:)(v17, &_mh_execute_header, qword_1011B7DF0, "Missing info to generate AirPodsPairingAckData!", 47, 2, _swiftEmptyArrayStorage);
    sub_100B65D14(&v45);
  }
  else
  {
    v41 = *(_QWORD *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_payloadSignatureS4);
    v43 = *(_QWORD *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessoryEcid);
    v42 = *(_QWORD *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_scrtAttestation);
    v44 = *(_QWORD *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_baaAccLeafCert);
    v23 = *(_QWORD *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_systemPublicKey);
    v25 = *(_QWORD *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_refPublicKey);
    v26 = *(_QWORD *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_baaAccIntCA1);
    v30 = *(_QWORD *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessoryChipId);
    v31 = *(_QWORD *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessorySerialNumber);
    v32 = *(_QWORD *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_status);
    v39 = *(_QWORD *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_ecid + 8);
    v19 = *(_QWORD *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_chipId);
    v33 = *(_QWORD *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_chipId + 8);
    v21 = *(_QWORD *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_serialNumber);
    v20 = *(_QWORD *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_serialNumber + 8);
    *(_QWORD *)&v45 = *(_QWORD *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_ecid);
    *((_QWORD *)&v45 + 1) = v39;
    v22 = v3[2];
    v38 = v3[3];
    v46 = v19;
    v47 = v33;
    v48 = v21;
    v49 = v20;
    v40 = v3[12];
    v74 = v3[11];
    v34 = v20;
    v35 = v3[13];
    v36 = v22;
    v37 = v3[14];
    v50 = v44;
    v51 = v8;
    v52 = v26;
    v53 = v9;
    v54 = v43;
    v55 = v6;
    v56 = v30;
    v57 = v13;
    v58 = v31;
    v59 = v14;
    v60 = v22;
    v61 = v38;
    v62 = v42;
    v63 = v7;
    v64 = v41;
    v65 = v5;
    v66 = v32;
    v67 = v16;
    v68 = v15;
    v69 = a2;
    v70 = v23;
    v71 = v10;
    v72 = v25;
    v73 = v12;
    v75 = v40;
    v76 = v35;
    v77 = v37;
    v24 = v12;
    v27 = v13;
    v28 = v14;
    v29 = v16;
    SharingCircleWildAdvertisementKey.init(key:)(&v45);
    sub_10001BD08(v41, v5);
    sub_10001BD08(v43, v6);
    sub_10001BD08(v42, v7);
    sub_10001BD08(v44, v8);
    sub_10001BD08(v26, v9);
    sub_10001BD08(v23, v10);
    sub_10001BD08(v25, v24);
    sub_10001BD08(v30, v27);
    sub_10001BD08(v31, v28);
    sub_10001BD08(v32, v29);
    swift_bridgeObjectRetain(v33);
    swift_bridgeObjectRetain(v34);
    swift_bridgeObjectRetain(v39);
    sub_10001BBBC(v36, v38);
    sub_10001BD08(v15, a2);
    swift_bridgeObjectRetain(v40);
    sub_10001BD08(v35, v37);
  }
  sub_100005CF0((uint64_t)&v45, (uint64_t)v78, &qword_1010EEC88);
  return sub_100005CF0((uint64_t)v78, a3, &qword_1010EEC88);
}

uint64_t sub_100B62808@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint8_t *v37;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  NSObject *v44;
  uint8_t *v45;
  uint64_t v46;
  unint64_t v47;
  uint8_t *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  NSObject *v52;
  os_log_type_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint8_t *v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint8_t *v66;
  uint8_t *v67;
  uint8_t *v68;
  uint64_t v69;
  NSObject *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _BYTE v92[12];
  int v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint8_t *v98;
  uint64_t v99;
  NSObject *v100;
  NSObject *v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint8_t *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  unint64_t v124;
  uint64_t v125;
  unint64_t v126;
  char v127;
  uint64_t v128;
  __int128 v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  unint64_t v133;
  char v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint8_t *v138;
  unint64_t v139;
  uint8_t *v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;
  unint64_t v144;
  uint64_t v145;
  unint64_t v146;
  NSObject *v147;
  char v148;
  uint64_t v149;
  NSObject *v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  uint64_t v154;
  unint64_t v155;
  unint64_t v156;
  uint64_t v157;
  uint64_t v158;
  unint64_t v159;
  uint64_t v160;
  unint64_t v161;
  unint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  uint64_t v168;
  unint64_t v169;
  uint64_t v170;
  unint64_t v171;
  uint64_t v172[45];

  v7 = v6;
  v125 = a1;
  v126 = a4;
  v12 = sub_10001A9A8((uint64_t *)&unk_10111C0A0);
  __chkstk_darwin(v12);
  v14 = &v92[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v15 = sub_10001A9A8(&qword_1010EF198);
  __chkstk_darwin(v15);
  v17 = &v92[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v18 = v7[6];
  if (v18 >> 60 == 15)
    goto LABEL_13;
  v19 = *(_QWORD *)((char *)v7 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_baaSignatureS2 + 8);
  if (v19 >> 60 == 15)
    goto LABEL_13;
  v20 = *(_QWORD *)((char *)v7 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_systemPublicKey + 8);
  if (v20 >> 60 == 15)
    goto LABEL_13;
  v21 = *(_QWORD *)((char *)v7 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_refPublicKey + 8);
  if (v21 >> 60 == 15)
    goto LABEL_13;
  v22 = *(_QWORD *)((char *)v7 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessoryEcid + 8);
  if (v22 >> 60 == 15)
    goto LABEL_13;
  v23 = *(_QWORD *)((char *)v7 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessoryChipId + 8);
  if (v23 >> 60 == 15)
    goto LABEL_13;
  if ((*((_BYTE *)v7 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessoryPartId + 1) & 1) != 0)
    goto LABEL_13;
  v24 = *(_QWORD *)((char *)v7 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessorySerialNumber + 8);
  if (v24 >> 60 == 15)
    goto LABEL_13;
  v25 = *(_QWORD *)((char *)v7 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_seedK1 + 8);
  if (v25 >> 60 == 15)
    goto LABEL_13;
  v26 = *(_QWORD *)((char *)v7 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_scrtAttestation + 8);
  if (v26 >> 60 == 15)
    goto LABEL_13;
  v104 = a2;
  v120 = v7[5];
  v113 = *(_QWORD *)((char *)v7 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_baaSignatureS2);
  v118 = *(_QWORD *)((char *)v7 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_systemPublicKey);
  v119 = v23;
  v27 = *(_QWORD *)((char *)v7 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_refPublicKey);
  v116 = v25;
  v117 = v27;
  v114 = *(_QWORD *)((char *)v7 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessoryEcid);
  v115 = v26;
  v28 = *(_QWORD *)((char *)v7 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessoryChipId);
  LODWORD(v103) = *((unsigned __int8 *)v7 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessoryPartId);
  v29 = *(_QWORD *)((char *)v7 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessorySerialNumber);
  v111 = *(_QWORD *)((char *)v7 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_seedK1);
  v112 = v28;
  v110 = *(_QWORD *)((char *)v7 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_scrtAttestation);
  v172[0] = v29;
  v172[1] = v24;
  v122 = v21;
  v123 = v20;
  v121 = v22;
  v124 = v24;
  sub_10001BD08(v29, v24);
  v109 = v29;
  sub_10001BD08(v29, v124);
  sub_10001BD08(v120, v18);
  sub_10001BD08(v113, v19);
  sub_10001BD08(v118, v123);
  sub_10001BD08(v117, v122);
  sub_10001BD08(v114, v121);
  sub_10001BD08(v112, v119);
  sub_10001BD08(v111, v116);
  sub_10001BD08(v110, v115);
  v30 = sub_100035530();
  if ((DataProtocol.isNull.getter(&type metadata for Data, v30) & 1) == 0)
  {
    v39 = v109;
    v105 = Data.trimmed.getter(v109, v124);
    v106 = v40;
    sub_10001EF3C(v39, v124);
    if (qword_1010EA328 != -1)
      swift_once(&qword_1010EA328, sub_100B5E37C);
    v41 = type metadata accessor for Logger(0);
    v102 = sub_10001A9E8(v41, (uint64_t)qword_1011B7E28);
    v108 = a3;
    v42 = v126;
    sub_10001BD08(a3, v126);
    v43 = sub_10001BD08(v108, v42);
    v44 = Logger.logObject.getter(v43);
    LODWORD(v100) = static os_log_type_t.default.getter(v44);
    if (os_log_type_enabled(v44, (os_log_type_t)v100))
    {
      v101 = v44;
      v45 = (uint8_t *)swift_slowAlloc(12, -1);
      v99 = swift_slowAlloc(32, -1);
      v172[0] = v99;
      v107 = v45;
      *(_DWORD *)v45 = 136446210;
      if (v126 >> 60 == 15)
      {
        v46 = 0;
        v47 = 0xE000000000000000;
      }
      else
      {
        v46 = Data.hexString.getter(a3, v126);
      }
      v97 = v47;
      v98 = v107 + 4;
      v48 = v107;
      *(_QWORD *)&v129 = sub_100016940(v46, v47, v172);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v129, (char *)&v129 + 8, v98, v48 + 12);
      swift_bridgeObjectRelease();
      v49 = v126;
      sub_10001EF3C(v108, v126);
      sub_10001EF3C(v108, v49);
      _os_log_impl((void *)&_mh_execute_header, v101, (os_log_type_t)v100, "Pairing token: %{public}s", v107, 0xCu);
      v50 = v99;
      swift_arrayDestroy(v99, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v50, -1, -1);
      swift_slowDealloc(v107, -1, -1);

    }
    else
    {
      sub_10001EF3C(v108, v126);
      sub_10001EF3C(v108, v126);

    }
    v107 = (uint8_t *)sub_100B642B4(a5);
    swift_bridgeObjectRetain_n(v107, 2);
    v52 = Logger.logObject.getter(v51);
    v53 = static os_log_type_t.default.getter(v52);
    LODWORD(v101) = v53;
    if (os_log_type_enabled(v52, v53))
    {
      v102 = swift_slowAlloc(22, -1);
      v99 = swift_slowAlloc(32, -1);
      v172[0] = v99;
      v54 = v102;
      *(_DWORD *)v102 = 141558275;
      *(_QWORD *)&v129 = 1752392040;
      v98 = (uint8_t *)&v129 + 8;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v129, (char *)&v129 + 8, v54 + 4, v54 + 12);
      v55 = v102;
      *(_WORD *)(v102 + 12) = 2081;
      v97 = v55 + 14;
      v96 = type metadata accessor for MultipartAccessoryPairingInfo(0);
      v95 = sub_100059BCC();
      v100 = v52;
      swift_bridgeObjectRetain(v107);
      v96 = Dictionary.description.getter(v56, &type metadata for OwnedBeaconGroup.SerialNumber, v96, v95);
      v58 = v57;
      swift_bridgeObjectRelease();
      *(_QWORD *)&v129 = sub_100016940(v96, v58, v172);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v129, v98, v97, v102 + 22);
      swift_bridgeObjectRelease_n(v107, 2);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v100, (os_log_type_t)v101, "otherSerialNumbersAndPartIds: %{private,mask.hash}s", (uint8_t *)v102, 0x16u);
      v59 = v99;
      swift_arrayDestroy(v99, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v59, -1, -1);
      swift_slowDealloc(v102, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v107, 2);
    }
    v101 = OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_otherSerialNumbersAndPartIds;
    *(_QWORD *)((char *)v7 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_otherSerialNumbersAndPartIds) = v107;
    swift_bridgeObjectRelease();
    if (*(_QWORD *)(a5 + 16))
    {
      v60 = v105;
      sub_10001BBBC(v105, v106);
      v61 = (uint8_t *)sub_100518E4C(v60, v106);
      if ((v62 & 1) != 0)
      {
        v107 = *(uint8_t **)(a5 + 56);
        v102 = (uint64_t)v61;
        v63 = type metadata accessor for OwnedBeaconGroup.PairingState(0);
        v64 = *(_QWORD *)(v63 - 8);
        sub_100B65C70((uint64_t)&v107[*(_QWORD *)(v64 + 72) * v102], (uint64_t)v17);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v64 + 56))(v17, 0, 1, v63);
      }
      else
      {
        v63 = type metadata accessor for OwnedBeaconGroup.PairingState(0);
        (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v63 - 8) + 56))(v17, 1, 1, v63);
      }
      sub_10001BC14(v105, v106);
      type metadata accessor for OwnedBeaconGroup.PairingState(0);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v63 - 8) + 48))(v17, 1, v63) != 1)
      {
        if (swift_getEnumCaseMultiPayload(v17, v63) == 1)
        {
          v89 = sub_10001A9A8(&qword_1010F5DC0);
          v90 = (uint64_t)&v17[*(int *)(v89 + 48)];
          sub_10001EF3C(*(_QWORD *)&v17[*(int *)(v89 + 64)], *(_QWORD *)&v17[*(int *)(v89 + 64) + 8]);
          sub_100004048(v90, (uint64_t *)&unk_1010F9890);
          v91 = type metadata accessor for UUID(0);
          (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)(v91 - 8) + 8))(v17, v91);
          v93 = 1;
          goto LABEL_38;
        }
        sub_100B65C34((uint64_t)v17);
LABEL_37:
        v93 = 0;
LABEL_38:
        v66 = *(uint8_t **)((char *)v7 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_ecid + 8);
        v96 = *(_QWORD *)((char *)v7 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_ecid);
        v102 = (uint64_t)v66;
        v67 = *(uint8_t **)((char *)v7 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_chipId + 8);
        v99 = *(_QWORD *)((char *)v7 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_chipId);
        v107 = v67;
        v68 = *(uint8_t **)((char *)v7 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_serialNumber + 8);
        v97 = *(_QWORD *)((char *)v7 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_serialNumber);
        v100 = *(NSObject **)((char *)v7 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_numBeacons);
        v69 = *(_QWORD *)((char *)v7 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_otherSerialNumbers);
        v70 = *(NSObject **)((char *)&v101->isa + (_QWORD)v7);
        LOBYTE(v172[0]) = v103;
        v95 = sub_100059570();
        swift_bridgeObjectRetain(v102);
        swift_bridgeObjectRetain(v107);
        v98 = v68;
        swift_bridgeObjectRetain(v68);
        v103 = v69;
        swift_bridgeObjectRetain(v69);
        v101 = v70;
        swift_bridgeObjectRetain(v70);
        v71 = FixedWidthInteger.data.getter(&type metadata for UInt8, v95);
        v94 = v72;
        v95 = v71;
        sub_10001BC14(v105, v106);
        v73 = v7[2];
        v74 = v7[3];
        v75 = (uint64_t)v7 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_productInfo;
        swift_beginAccess((char *)v7 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_productInfo, &v128, 0, 0);
        sub_10000F9B8(v75, (uint64_t)v14, (uint64_t *)&unk_10111C0A0);
        v76 = type metadata accessor for AccessoryProductInfo(0);
        if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v76 - 8) + 48))(v14, 1, v76))
        {
          v105 = 0xF000000000000000;
          v106 = 0;
        }
        else
        {
          v77 = (uint64_t *)&v14[*(int *)(v76 + 96)];
          v78 = *v77;
          v105 = v77[1];
          v106 = v78;
          sub_10001BD08(v78, v105);
        }
        v79 = a3;
        sub_10001BBBC(v73, v74);
        sub_100004048((uint64_t)v14, (uint64_t *)&unk_10111C0A0);
        v130 = v113;
        v131 = v19;
        v134 = v93;
        v135 = v96;
        v136 = v102;
        v80 = v7[11];
        v81 = v7[12];
        v137 = v99;
        v138 = v107;
        v82 = v7[13];
        v83 = v7[14];
        v127 = 0;
        v84 = v125;
        v85 = v74;
        v86 = v104;
        *(_QWORD *)&v129 = v125;
        *((_QWORD *)&v129 + 1) = v104;
        v87 = v73;
        v88 = v126;
        v132 = v79;
        v133 = v126;
        v139 = v97;
        v140 = v98;
        v141 = v114;
        v142 = v121;
        v143 = v112;
        v144 = v119;
        v145 = v109;
        v146 = v124;
        v147 = v100;
        v148 = 0;
        v149 = v103;
        v150 = v101;
        v151 = 0;
        v152 = v111;
        v153 = v116;
        v154 = v110;
        v155 = v115;
        v156 = v95;
        v157 = v94;
        v158 = v87;
        v159 = v85;
        v160 = v120;
        v161 = v18;
        v162 = v106;
        v163 = v105;
        v164 = v80;
        v165 = v81;
        v166 = v82;
        v167 = v83;
        v168 = v118;
        v169 = v123;
        v170 = v117;
        v171 = v122;
        SharingCircleWildAdvertisementKey.init(key:)(&v129);
        sub_10001BD08(v79, v88);
        swift_bridgeObjectRetain(v81);
        sub_10001BD08(v82, v83);
        sub_10001BBBC(v84, v86);
        goto LABEL_18;
      }
    }
    else
    {
      v65 = type metadata accessor for OwnedBeaconGroup.PairingState(0);
      (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v65 - 8) + 56))(v17, 1, 1, v65);
    }
    sub_100004048((uint64_t)v17, &qword_1010EF198);
    goto LABEL_37;
  }
  v31 = v109;
  v32 = v124;
  sub_10001EF3C(v109, v124);
  sub_10001EF3C(v110, v115);
  sub_10001EF3C(v111, v116);
  sub_10001EF3C(v31, v32);
  sub_10001EF3C(v112, v119);
  sub_10001EF3C(v114, v121);
  sub_10001EF3C(v117, v122);
  sub_10001EF3C(v118, v123);
  sub_10001EF3C(v113, v19);
  sub_10001EF3C(v120, v18);
LABEL_13:
  if (qword_1010EA328 != -1)
    swift_once(&qword_1010EA328, sub_100B5E37C);
  v33 = type metadata accessor for Logger(0);
  v34 = sub_10001A9E8(v33, (uint64_t)qword_1011B7E28);
  v35 = Logger.logObject.getter(v34);
  v36 = static os_log_type_t.error.getter(v35);
  if (os_log_type_enabled(v35, v36))
  {
    v37 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v37 = 0;
    _os_log_impl((void *)&_mh_execute_header, v35, v36, "Missing info to generate AirPodsLEPairingCheckData!", v37, 2u);
    swift_slowDealloc(v37, -1, -1);
  }

  sub_100B65CE0(&v129);
LABEL_18:
  sub_100005CF0((uint64_t)&v129, (uint64_t)v172, &qword_1010EEC80);
  return sub_100005CF0((uint64_t)v172, a6, &qword_1010EEC80);
}

uint64_t sub_100B63464@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v3;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  _BYTE v58[216];

  v5 = *(_QWORD *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_payloadSignatureS4 + 8);
  if (v5 >> 60 == 15
    || (v6 = *(_QWORD *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessoryEcid + 8),
        v6 >> 60 == 15)
    || (v7 = *(_QWORD *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_acrtCerts + 8), v7 >> 60 == 15)
    || (v8 = *(_QWORD *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessoryChipId + 8),
        v8 >> 60 == 15)
    || (v9 = *(_QWORD *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessorySerialNumber + 8),
        v9 >> 60 == 15)
    || (v10 = *(_QWORD *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_status + 8), v10 >> 60 == 15))
  {
    v11 = static os_log_type_t.error.getter(a1);
    if (qword_1010EA310 != -1)
      swift_once(&qword_1010EA310, sub_100B5E2C8);
    os_log(_:dso:log:_:_:)(v11, &_mh_execute_header, qword_1011B7DF0, "Missing info to generate AirPodsPairingAckData!", 47, 2, _swiftEmptyArrayStorage);
    sub_100B65CB4(&v33);
  }
  else
  {
    v15 = *(_QWORD *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_payloadSignatureS4);
    v20 = *(_QWORD *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_acrtCerts);
    v21 = *(_QWORD *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessoryEcid);
    v24 = *(_QWORD *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessorySerialNumber);
    v22 = *(_QWORD *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessoryChipId);
    v23 = *(_QWORD *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_status);
    v32 = *(_QWORD *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_ecid + 8);
    v16 = *(_QWORD *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_chipId);
    v25 = *(_QWORD *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_chipId + 8);
    v17 = *(_QWORD *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_serialNumber);
    v27 = v3[2];
    v28 = *(_QWORD *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_serialNumber + 8);
    v26 = v3[3];
    v18 = v3[11];
    v31 = v3[13];
    v29 = v3[12];
    v30 = v3[14];
    *(_QWORD *)&v33 = *(_QWORD *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_ecid);
    *((_QWORD *)&v33 + 1) = v32;
    v34 = v16;
    v35 = v25;
    v36 = v17;
    v37 = v28;
    v38 = v21;
    v39 = v6;
    v40 = v22;
    v41 = v8;
    v42 = v24;
    v43 = v9;
    v44 = v20;
    v45 = v7;
    v46 = v27;
    v47 = v26;
    v48 = v15;
    v49 = v5;
    v19 = v15;
    v50 = v23;
    v51 = v10;
    v52 = a1;
    v53 = a2;
    v54 = v18;
    v55 = v29;
    v56 = v31;
    v57 = v30;
    SharingCircleWildAdvertisementKey.init(key:)(&v33);
    sub_10001BD08(v19, v5);
    sub_10001BD08(v21, v6);
    sub_10001BD08(v20, v7);
    sub_10001BD08(v22, v8);
    sub_10001BD08(v24, v9);
    sub_10001BD08(v23, v10);
    swift_bridgeObjectRetain(v25);
    swift_bridgeObjectRetain(v28);
    swift_bridgeObjectRetain(v32);
    sub_10001BBBC(v27, v26);
    sub_10001BD08(a1, a2);
    swift_bridgeObjectRetain(v29);
    sub_10001BD08(v31, v30);
  }
  sub_100005CF0((uint64_t)&v33, (uint64_t)v58, &qword_101110F00);
  return sub_100005CF0((uint64_t)v58, a3, &qword_101110F00);
}

uint64_t sub_100B6374C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  NSObject *v39;
  uint8_t *v40;
  uint64_t v41;
  unint64_t v42;
  uint8_t *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  NSObject *v47;
  os_log_type_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint8_t *v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint8_t *v61;
  uint8_t *v62;
  unint64_t v63;
  uint64_t v64;
  NSObject *v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _BYTE v84[4];
  int v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint8_t *v90;
  uint64_t v91;
  NSObject *v92;
  NSObject *v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint8_t *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  uint64_t v108;
  unint64_t v109;
  unint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  char v114;
  uint64_t v115;
  __int128 v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  unint64_t v120;
  char v121;
  NSObject *v122;
  uint8_t *v123;
  uint8_t *v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  char v135;
  uint64_t v136;
  NSObject *v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t v140;
  uint64_t v141;
  unint64_t v142;
  unint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  uint64_t v147;
  unint64_t v148;
  unint64_t v149;
  unint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155[41];

  v7 = v6;
  v112 = a4;
  v113 = a3;
  v12 = sub_10001A9A8((uint64_t *)&unk_10111C0A0);
  __chkstk_darwin(v12);
  v14 = &v84[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v15 = sub_10001A9A8(&qword_1010EF198);
  v16 = __chkstk_darwin(v15);
  v18 = &v84[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v19 = v7[6];
  if (v19 >> 60 == 15)
    goto LABEL_11;
  v20 = *(_QWORD *)((char *)v7 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_payloadSignatureS1 + 8);
  if (v20 >> 60 == 15)
    goto LABEL_11;
  v21 = *(_QWORD *)((char *)v7 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessoryEcid + 8);
  if (v21 >> 60 == 15)
    goto LABEL_11;
  v22 = *(_QWORD *)((char *)v7 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessoryChipId + 8);
  if (v22 >> 60 == 15)
    goto LABEL_11;
  v23 = *(_QWORD *)((char *)v7 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessorySerialNumber + 8);
  if (v23 >> 60 == 15)
    goto LABEL_11;
  if ((*((_BYTE *)v7 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessoryPartId + 1) & 1) != 0)
    goto LABEL_11;
  v24 = *(_QWORD *)((char *)v7 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_seedK1 + 8);
  if (v24 >> 60 == 15)
    goto LABEL_11;
  v25 = *(_QWORD *)((char *)v7 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_acrtCerts + 8);
  if (v25 >> 60 == 15)
    goto LABEL_11;
  v95 = a2;
  v108 = v7[5];
  v109 = v22;
  v103 = *(_QWORD *)((char *)v7 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_payloadSignatureS1);
  v104 = *(_QWORD *)((char *)v7 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessoryEcid);
  v105 = v25;
  v26 = *(_QWORD *)((char *)v7 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessoryChipId);
  v27 = *(_QWORD *)((char *)v7 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessorySerialNumber);
  LODWORD(v94) = *((unsigned __int8 *)v7 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessoryPartId);
  v101 = *(_QWORD *)((char *)v7 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_seedK1);
  v102 = v26;
  v100 = *(_QWORD *)((char *)v7 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_acrtCerts);
  v110 = v21;
  v111 = v27;
  v155[0] = v27;
  v155[1] = v23;
  v28 = v23;
  v106 = v24;
  sub_10001BD08(v27, v23);
  v107 = v28;
  sub_10001BD08(v111, v28);
  sub_10001BD08(v108, v19);
  sub_10001BD08(v103, v20);
  sub_10001BD08(v104, v110);
  sub_10001BD08(v102, v109);
  sub_10001BD08(v101, v106);
  sub_10001BD08(v100, v105);
  v29 = sub_100035530();
  if ((DataProtocol.isNull.getter(&type metadata for Data, v29) & 1) == 0)
  {
    v34 = v111;
    v97 = Data.trimmed.getter(v111, v107);
    v98 = v35;
    sub_10001EF3C(v34, v107);
    if (qword_1010EA318 != -1)
      swift_once(&qword_1010EA318, sub_100B5E330);
    v36 = type metadata accessor for Logger(0);
    v96 = sub_10001A9E8(v36, (uint64_t)qword_1011B7DF8);
    v37 = v112;
    sub_10001BD08(v113, v112);
    v38 = sub_10001BD08(v113, v37);
    v39 = Logger.logObject.getter(v38);
    LODWORD(v92) = static os_log_type_t.default.getter(v39);
    if (os_log_type_enabled(v39, (os_log_type_t)v92))
    {
      v93 = v39;
      v40 = (uint8_t *)swift_slowAlloc(12, -1);
      v91 = swift_slowAlloc(32, -1);
      v155[0] = v91;
      v99 = v40;
      *(_DWORD *)v40 = 136446210;
      if (v112 >> 60 == 15)
      {
        v41 = 0;
        v42 = 0xE000000000000000;
      }
      else
      {
        v41 = Data.hexString.getter(v113, v112);
      }
      v89 = v42;
      v90 = v99 + 4;
      v43 = v99;
      *(_QWORD *)&v116 = sub_100016940(v41, v42, v155);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v116, (char *)&v116 + 8, v90, v43 + 12);
      swift_bridgeObjectRelease();
      v44 = v112;
      sub_10001EF3C(v113, v112);
      sub_10001EF3C(v113, v44);
      _os_log_impl((void *)&_mh_execute_header, v93, (os_log_type_t)v92, "Pairing token: %{public}s", v99, 0xCu);
      v45 = v91;
      swift_arrayDestroy(v91, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v45, -1, -1);
      swift_slowDealloc(v99, -1, -1);

    }
    else
    {
      sub_10001EF3C(v113, v112);
      sub_10001EF3C(v113, v112);

    }
    v99 = (uint8_t *)sub_100B642B4(a5);
    swift_bridgeObjectRetain_n(v99, 2);
    v47 = Logger.logObject.getter(v46);
    v48 = static os_log_type_t.default.getter(v47);
    LODWORD(v93) = v48;
    if (os_log_type_enabled(v47, v48))
    {
      v96 = swift_slowAlloc(22, -1);
      v91 = swift_slowAlloc(32, -1);
      v155[0] = v91;
      v49 = v96;
      *(_DWORD *)v96 = 141558275;
      *(_QWORD *)&v116 = 1752392040;
      v90 = (uint8_t *)&v116 + 8;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v116, (char *)&v116 + 8, v49 + 4, v49 + 12);
      v50 = v96;
      *(_WORD *)(v96 + 12) = 2081;
      v89 = v50 + 14;
      v88 = type metadata accessor for MultipartAccessoryPairingInfo(0);
      v87 = sub_100059BCC();
      v92 = v47;
      swift_bridgeObjectRetain(v99);
      v88 = Dictionary.description.getter(v51, &type metadata for OwnedBeaconGroup.SerialNumber, v88, v87);
      v53 = v52;
      swift_bridgeObjectRelease();
      *(_QWORD *)&v116 = sub_100016940(v88, v53, v155);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v116, v90, v89, v96 + 22);
      swift_bridgeObjectRelease_n(v99, 2);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v92, (os_log_type_t)v93, "otherSerialNumbersAndPartIds: %{private,mask.hash}s", (uint8_t *)v96, 0x16u);
      v54 = v91;
      swift_arrayDestroy(v91, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v54, -1, -1);
      swift_slowDealloc(v96, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v99, 2);
    }
    v93 = OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_otherSerialNumbersAndPartIds;
    *(_QWORD *)((char *)v7 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_otherSerialNumbersAndPartIds) = v99;
    swift_bridgeObjectRelease();
    if (*(_QWORD *)(a5 + 16))
    {
      v55 = v97;
      sub_10001BBBC(v97, v98);
      v56 = (uint8_t *)sub_100518E4C(v55, v98);
      if ((v57 & 1) != 0)
      {
        v99 = *(uint8_t **)(a5 + 56);
        v96 = (uint64_t)v56;
        v58 = type metadata accessor for OwnedBeaconGroup.PairingState(0);
        v59 = *(_QWORD *)(v58 - 8);
        sub_100B65C70((uint64_t)&v99[*(_QWORD *)(v59 + 72) * v96], (uint64_t)v18);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v59 + 56))(v18, 0, 1, v58);
      }
      else
      {
        v58 = type metadata accessor for OwnedBeaconGroup.PairingState(0);
        (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v58 - 8) + 56))(v18, 1, 1, v58);
      }
      sub_10001BC14(v97, v98);
      type metadata accessor for OwnedBeaconGroup.PairingState(0);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v58 - 8) + 48))(v18, 1, v58) != 1)
      {
        if (swift_getEnumCaseMultiPayload(v18, v58) == 1)
        {
          v81 = sub_10001A9A8(&qword_1010F5DC0);
          v82 = (uint64_t)&v18[*(int *)(v81 + 48)];
          sub_10001EF3C(*(_QWORD *)&v18[*(int *)(v81 + 64)], *(_QWORD *)&v18[*(int *)(v81 + 64) + 8]);
          sub_100004048(v82, (uint64_t *)&unk_1010F9890);
          v83 = type metadata accessor for UUID(0);
          (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)(v83 - 8) + 8))(v18, v83);
          v85 = 1;
          goto LABEL_34;
        }
        sub_100B65C34((uint64_t)v18);
LABEL_33:
        v85 = 0;
LABEL_34:
        v61 = *(uint8_t **)((char *)v7 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_ecid + 8);
        v92 = *(NSObject **)((char *)v7 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_ecid);
        v99 = v61;
        v62 = *(uint8_t **)((char *)v7 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_chipId + 8);
        v90 = *(uint8_t **)((char *)v7 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_chipId);
        v96 = (uint64_t)v62;
        v63 = *(_QWORD *)((char *)v7 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_serialNumber + 8);
        v88 = *(_QWORD *)((char *)v7 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_serialNumber);
        v91 = *(_QWORD *)((char *)v7 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_numBeacons);
        v64 = *(_QWORD *)((char *)v7 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_otherSerialNumbers);
        v65 = *(NSObject **)((char *)&v93->isa + (_QWORD)v7);
        LOBYTE(v155[0]) = v94;
        v87 = sub_100059570();
        swift_bridgeObjectRetain(v99);
        swift_bridgeObjectRetain(v96);
        v89 = v63;
        swift_bridgeObjectRetain(v63);
        v94 = v64;
        swift_bridgeObjectRetain(v64);
        v93 = v65;
        swift_bridgeObjectRetain(v65);
        v66 = FixedWidthInteger.data.getter(&type metadata for UInt8, v87);
        v86 = v67;
        v87 = v66;
        sub_10001BC14(v97, v98);
        v69 = v7[2];
        v68 = v7[3];
        v70 = (uint64_t)v7 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_productInfo;
        swift_beginAccess((char *)v7 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_productInfo, &v115, 0, 0);
        sub_10000F9B8(v70, (uint64_t)v14, (uint64_t *)&unk_10111C0A0);
        v71 = type metadata accessor for AccessoryProductInfo(0);
        if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v71 - 8) + 48))(v14, 1, v71))
        {
          v98 = 0;
          v72 = 0xF000000000000000;
        }
        else
        {
          v73 = (unint64_t *)&v14[*(int *)(v71 + 96)];
          v72 = v73[1];
          v98 = *v73;
          sub_10001BD08(v98, v72);
        }
        sub_10001BBBC(v69, v68);
        sub_100004048((uint64_t)v14, (uint64_t *)&unk_10111C0A0);
        v117 = v103;
        v118 = v20;
        v121 = v85;
        v122 = v92;
        v123 = v99;
        v124 = v90;
        v125 = v96;
        v126 = v88;
        v127 = v89;
        v128 = v104;
        v129 = v110;
        v130 = v102;
        v131 = v109;
        v132 = v111;
        v133 = v107;
        v114 = 0;
        v134 = v91;
        v135 = 0;
        v136 = v94;
        v137 = v93;
        v139 = v101;
        v140 = v106;
        v141 = v100;
        v142 = v105;
        v143 = v87;
        v144 = v86;
        v145 = v69;
        v146 = v68;
        v147 = v108;
        v148 = v19;
        v149 = v98;
        v74 = v7[11];
        v75 = v7[12];
        v150 = v72;
        v138 = 0;
        v151 = v74;
        v76 = v7[13];
        v77 = v7[14];
        v78 = v95;
        *(_QWORD *)&v116 = a1;
        *((_QWORD *)&v116 + 1) = v95;
        v79 = v112;
        v80 = v113;
        v119 = v113;
        v120 = v112;
        v152 = v75;
        v153 = v76;
        v154 = v77;
        SharingCircleWildAdvertisementKey.init(key:)(&v116);
        sub_10001BD08(v80, v79);
        swift_bridgeObjectRetain(v75);
        sub_10001BD08(v76, v77);
        sub_10001BBBC(a1, v78);
        goto LABEL_14;
      }
    }
    else
    {
      v60 = type metadata accessor for OwnedBeaconGroup.PairingState(0);
      (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v60 - 8) + 56))(v18, 1, 1, v60);
    }
    sub_100004048((uint64_t)v18, &qword_1010EF198);
    goto LABEL_33;
  }
  v30 = v111;
  v31 = v107;
  sub_10001EF3C(v111, v107);
  sub_10001EF3C(v100, v105);
  sub_10001EF3C(v101, v106);
  sub_10001EF3C(v30, v31);
  sub_10001EF3C(v102, v109);
  sub_10001EF3C(v104, v110);
  sub_10001EF3C(v103, v20);
  v16 = sub_10001EF3C(v108, v19);
LABEL_11:
  v32 = static os_log_type_t.error.getter(v16);
  if (qword_1010EA310 != -1)
    swift_once(&qword_1010EA310, sub_100B5E2C8);
  os_log(_:dso:log:_:_:)(v32, &_mh_execute_header, qword_1011B7DF0, "Missing info to generate AirPodsPairingCheckData!", 49, 2, _swiftEmptyArrayStorage);
  sub_100B65C04(&v116);
LABEL_14:
  sub_100005CF0((uint64_t)&v116, (uint64_t)v155, &qword_101110EF0);
  return sub_100005CF0((uint64_t)v155, a6, &qword_101110EF0);
}

uint64_t sub_100B64278()
{
  uint64_t result;
  uint64_t v1;

  result = Data.init(base64Encoded:options:)(0xD000000000000058, 0x8000000100EEBC20, 0);
  qword_1011162C8 = result;
  qword_1011162D0 = v1;
  return result;
}

uint64_t sub_100B642B4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  __n128 v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  void (*v66)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  NSObject *v71;
  os_log_type_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int EnumCaseMultiPayload;
  int *v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  char v91;
  int v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  char v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v101;
  unint64_t v102;
  uint64_t v103;
  _BOOL8 v104;
  uint64_t v105;
  char v106;
  uint64_t v107;
  char v108;
  uint64_t v109;
  char *v110;
  char v111;
  int v112;
  int v113;
  uint64_t v114;
  uint64_t v115;
  char v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char v121;
  unint64_t v122;
  uint64_t v123;
  _BOOL8 v124;
  uint64_t v125;
  char v126;
  uint64_t v127;
  char v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  NSObject *v133;
  os_log_type_t v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t v138;
  unint64_t v139;
  _QWORD *v140;
  _QWORD *v141;
  uint64_t *v142;
  uint64_t v143;
  BOOL v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t *v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t v151;
  char *v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  unint64_t v156;
  uint64_t v157;
  _WORD *v158;
  char *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  char v163;
  unint64_t v164;
  uint64_t v165;
  _BOOL8 v166;
  uint64_t v167;
  char v168;
  uint64_t v169;
  char v170;
  _QWORD *v171;
  uint64_t *v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  NSObject *v177;
  os_log_type_t v178;
  uint64_t v179;
  uint64_t v180;
  void *v181;
  unint64_t v182;
  uint64_t v183;
  uint64_t v184;
  unint64_t v185;
  unint64_t v186;
  uint64_t result;
  uint64_t v188;
  unint64_t v189;
  unint64_t v190;
  uint64_t v191;
  __n128 v192;
  uint64_t v193;
  uint64_t v194;
  char *v195;
  char *v196;
  char *v197;
  uint64_t v198;
  unint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  char *v209;
  __n128 v210;
  char *v211;
  int64_t v212;
  uint64_t v213;
  uint64_t v214;
  char *v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t *v218;
  uint64_t *v219;
  uint64_t v220;
  uint64_t v221;
  unint64_t v222;
  unint64_t v223;
  uint64_t v224;
  uint64_t v225;
  char v226[8];
  _QWORD *v227;
  void *v228;

  v3 = type metadata accessor for String.Encoding(0);
  __chkstk_darwin(v3);
  v211 = (char *)&v188 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v208 = type metadata accessor for MultipartAccessoryPairingInfo(0);
  v207 = *(_QWORD *)(v208 - 8);
  v5 = __chkstk_darwin(v208);
  v205 = (uint64_t)&v188 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v5);
  v197 = (char *)&v188 - v8;
  v9 = __chkstk_darwin(v7);
  v204 = (uint64_t)&v188 - v10;
  v11 = __chkstk_darwin(v9);
  v196 = (char *)&v188 - v12;
  v13 = __chkstk_darwin(v11);
  v203 = (uint64_t)&v188 - v14;
  __chkstk_darwin(v13);
  v195 = (char *)&v188 - v15;
  v16 = sub_10001A9A8((uint64_t *)&unk_1010F9890);
  v216 = *(_QWORD *)(v16 - 8);
  v17 = __chkstk_darwin(v16);
  v194 = (uint64_t)&v188 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __chkstk_darwin(v17);
  v202 = (uint64_t)&v188 - v20;
  v21 = __chkstk_darwin(v19);
  v193 = (uint64_t)&v188 - v22;
  __chkstk_darwin(v21);
  v201 = (uint64_t)&v188 - v23;
  v24 = sub_10001A9A8(&qword_1010EF198);
  __chkstk_darwin(v24);
  v26 = (char *)&v188 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = type metadata accessor for OwnedBeaconGroup.PairingState(0);
  v220 = *(_QWORD *)(v27 - 8);
  v221 = v27;
  v28 = __chkstk_darwin(v27);
  v214 = (uint64_t)&v188 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v28);
  v213 = (uint64_t)&v188 - v30;
  v31 = sub_10001A9A8(&qword_101110F20);
  v32 = __chkstk_darwin(v31);
  v34 = (uint64_t *)((char *)&v188 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v32);
  v36 = (uint64_t *)((char *)&v188 - v35);
  v37 = *(_QWORD *)(v1 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessorySerialNumber);
  v38 = *(_QWORD *)(v1 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessorySerialNumber + 8);
  v39 = *(_QWORD *)(v1 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_otherSerialNumbersAndMACAddresses);
  v228 = &_swiftEmptyDictionarySingleton;
  v40 = *(_QWORD *)(v39 + 64);
  v206 = v39 + 64;
  v41 = 1 << *(_BYTE *)(v39 + 32);
  v42 = -1;
  if (v41 < 64)
    v42 = ~(-1 << v41);
  v223 = v42 & v40;
  v198 = v37;
  v199 = v38;
  sub_10001BD08(v37, v38);
  v43 = (unint64_t)(v41 + 63) >> 6;
  v189 = v43 - 1;
  v44 = swift_bridgeObjectRetain(v39);
  v45 = 0;
  v212 = v43;
  v190 = v43 - 5;
  v217 = v39;
  v191 = v39 + 104;
  v44.n128_u64[0] = 141558275;
  v210 = v44;
  v209 = (char *)&type metadata for Any + 8;
  v44.n128_u64[0] = 141558787;
  v192 = v44;
  v215 = v26;
  v218 = v36;
  v219 = v34;
  while (1)
  {
    if (v223)
    {
      v46 = __clz(__rbit64(v223));
      v222 = v45;
      v223 &= v223 - 1;
      v47 = v46 | (v45 << 6);
LABEL_8:
      v48 = *(_QWORD *)(v217 + 56);
      v49 = (uint64_t *)(*(_QWORD *)(v217 + 48) + 16 * v47);
      v50 = *v49;
      v51 = v49[1];
      *v34 = *v49;
      v34[1] = v51;
      v52 = v48 + *(_QWORD *)(v216 + 72) * v47;
      v53 = sub_10001A9A8(&qword_101110F28);
      sub_10000F9B8(v52, (uint64_t)v34 + *(int *)(v53 + 48), (uint64_t *)&unk_1010F9890);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v53 - 8) + 56))(v34, 0, 1, v53);
      sub_10001BBBC(v50, v51);
      goto LABEL_15;
    }
    v54 = v45 + 1;
    if (__OFADD__(v45, 1))
    {
      __break(1u);
LABEL_101:
      __break(1u);
LABEL_102:
      __break(1u);
LABEL_103:
      __break(1u);
LABEL_104:
      __break(1u);
LABEL_105:
      __break(1u);
LABEL_106:
      __break(1u);
      goto LABEL_107;
    }
    if (v54 >= v212)
    {
      v56 = v45;
    }
    else
    {
      v55 = *(_QWORD *)(v206 + 8 * v54);
      if (v55)
        goto LABEL_12;
      v56 = v45 + 1;
      if ((uint64_t)(v45 + 2) < v212)
      {
        v55 = *(_QWORD *)(v206 + 8 * (v45 + 2));
        if (v55)
        {
          v54 = v45 + 2;
LABEL_12:
          v222 = v54;
          v223 = (v55 - 1) & v55;
          v47 = __clz(__rbit64(v55)) + (v54 << 6);
          goto LABEL_8;
        }
        v56 = v45 + 2;
        if ((uint64_t)(v45 + 3) < v212)
        {
          v55 = *(_QWORD *)(v206 + 8 * (v45 + 3));
          if (v55)
          {
            v54 = v45 + 3;
            goto LABEL_12;
          }
          v54 = v45 + 4;
          v56 = v45 + 3;
          if ((uint64_t)(v45 + 4) < v212)
          {
            v55 = *(_QWORD *)(v206 + 8 * v54);
            if (v55)
              goto LABEL_12;
            while (v190 != v45)
            {
              v55 = *(_QWORD *)(v191 + 8 * v45++);
              if (v55)
              {
                v54 = v45 + 4;
                goto LABEL_12;
              }
            }
            v56 = v189;
          }
        }
      }
    }
    v57 = sub_10001A9A8(&qword_101110F28);
    (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v57 - 8) + 56))(v34, 1, 1, v57);
    v222 = v56;
    v223 = 0;
LABEL_15:
    sub_100005CF0((uint64_t)v34, (uint64_t)v36, &qword_101110F20);
    v58 = sub_10001A9A8(&qword_101110F28);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v58 - 8) + 48))(v36, 1, v58) == 1)
      break;
    v59 = *v36;
    v60 = v36[1];
    v61 = *(int *)(v58 + 48);
    if (!*(_QWORD *)(a1 + 16))
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v220 + 56))(v26, 1, 1, v221);
LABEL_22:
      sub_100004048((uint64_t)v26, &qword_1010EF198);
      if (qword_1010EA318 != -1)
        swift_once(&qword_1010EA318, sub_100B5E330);
      v69 = type metadata accessor for Logger(0);
      sub_10001A9E8(v69, (uint64_t)qword_1011B7DF8);
      sub_10001BBBC(v59, v60);
      v70 = sub_10001BBBC(v59, v60);
      v71 = Logger.logObject.getter(v70);
      v72 = static os_log_type_t.error.getter(v71);
      if (os_log_type_enabled(v71, v72))
      {
        v73 = a1;
        v74 = swift_slowAlloc(22, -1);
        v75 = swift_slowAlloc(32, -1);
        v227 = (_QWORD *)v75;
        *(_DWORD *)v74 = v210.n128_u32[0];
        *(_QWORD *)(v74 + 4) = 1752392040;
        *(_WORD *)(v74 + 12) = 2081;
        v76 = sub_10001BBBC(v59, v60);
        v77 = v211;
        static String.Encoding.utf8.getter(v76);
        v78 = String.init(data:encoding:)(v59, v60, v77);
        if (!v79)
          v78 = Data.hexString.getter(v59, v60);
        v80 = v78;
        v81 = v79;
        sub_10001BC14(v59, v60);
        *(_QWORD *)(v74 + 14) = sub_100016940(v80, v81, (uint64_t *)&v227);
        swift_bridgeObjectRelease();
        sub_10001BC14(v59, v60);
        sub_10001BC14(v59, v60);
        _os_log_impl((void *)&_mh_execute_header, v71, v72, "%{private,mask.hash}s is missing from beaconMap!", (uint8_t *)v74, 0x16u);
        swift_arrayDestroy(v75, 1, v209);
        swift_slowDealloc(v75, -1, -1);
        swift_slowDealloc(v74, -1, -1);

        sub_10001BC14(v59, v60);
        a1 = v73;
        v26 = v215;
      }
      else
      {
        sub_10001BC14(v59, v60);
        sub_10001BC14(v59, v60);
        sub_10001BC14(v59, v60);

      }
      goto LABEL_5;
    }
    sub_10001BBBC(v59, v60);
    v62 = sub_100518E4C(v59, v60);
    if ((v63 & 1) != 0)
    {
      v64 = v220;
      sub_100B65C70(*(_QWORD *)(a1 + 56) + *(_QWORD *)(v220 + 72) * v62, (uint64_t)v26);
      v65 = 0;
    }
    else
    {
      v65 = 1;
      v64 = v220;
    }
    v66 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v64 + 56);
    v67 = v64;
    v68 = v221;
    v66(v26, v65, 1, v221);
    sub_10001BC14(v59, v60);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v67 + 48))(v26, 1, v68) == 1)
      goto LABEL_22;
    v82 = (uint64_t)v26;
    v83 = v213;
    sub_1000126EC(v82, v213, type metadata accessor for OwnedBeaconGroup.PairingState);
    v84 = v83;
    v85 = v214;
    sub_100B65C70(v84, v214);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v85, v221);
    if (EnumCaseMultiPayload)
    {
      if (EnumCaseMultiPayload == 1)
      {
        v87 = (int *)sub_10001A9A8(&qword_1010F5DC0);
        v88 = v214;
        v89 = v214 + v87[12];
        sub_10001EF3C(*(_QWORD *)(v214 + v87[16]), *(_QWORD *)(v214 + v87[16] + 8));
        v90 = (char *)(v88 + v87[24]);
        v91 = *v90;
        v92 = v90[1];
        v93 = v90[2];
        v94 = v202;
        sub_100005CF0(v89, v202, (uint64_t *)&unk_1010F9890);
        if (v92)
          v91 = -1;
        v95 = v194;
        sub_10000F9B8(v94, v194, (uint64_t *)&unk_1010F9890);
        if (v93 == 3)
          v96 = 0;
        else
          v96 = v93;
        v97 = (uint64_t)v196;
        *v196 = v91;
        *(_BYTE *)(v97 + 1) = 1;
        v98 = v208;
        sub_100005CF0(v95, v97 + *(int *)(v208 + 24), (uint64_t *)&unk_1010F9890);
        *(_BYTE *)(v97 + *(int *)(v98 + 28)) = v96;
        sub_1000126EC(v97, v204, type metadata accessor for MultipartAccessoryPairingInfo);
        sub_10001BBBC(v59, v60);
        v99 = (uint64_t)v228;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v228);
        v227 = (_QWORD *)v99;
        v102 = sub_100518E4C(v59, v60);
        v103 = *(_QWORD *)(v99 + 16);
        v104 = (v101 & 1) == 0;
        v105 = v103 + v104;
        if (__OFADD__(v103, v104))
          goto LABEL_101;
        v106 = v101;
        if (*(_QWORD *)(v99 + 24) >= v105)
        {
          v26 = v215;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            sub_100A99950();
        }
        else
        {
          sub_100A84704(v105, isUniquelyReferenced_nonNull_native);
          v107 = sub_100518E4C(v59, v60);
          v26 = v215;
          if ((v106 & 1) != (v108 & 1))
            goto LABEL_108;
          v102 = v107;
        }
        v140 = v227;
        if ((v106 & 1) != 0)
        {
          sub_1006003D0(v204, v227[7] + *(_QWORD *)(v207 + 72) * v102);
        }
        else
        {
          v227[(v102 >> 6) + 8] |= 1 << v102;
          v142 = (uint64_t *)(v140[6] + 16 * v102);
          *v142 = v59;
          v142[1] = v60;
          sub_1000126EC(v204, v140[7] + *(_QWORD *)(v207 + 72) * v102, type metadata accessor for MultipartAccessoryPairingInfo);
          v143 = v140[2];
          v144 = __OFADD__(v143, 1);
          v145 = v143 + 1;
          if (v144)
            goto LABEL_105;
          v140[2] = v145;
          sub_10001BBBC(v59, v60);
        }
        v228 = v140;
        swift_bridgeObjectRelease();
        sub_10001BC14(v59, v60);
        sub_10001BC14(v59, v60);
        sub_100004048(v202, (uint64_t *)&unk_1010F9890);
        sub_100B65C34(v213);
        v146 = type metadata accessor for UUID(0);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v146 - 8) + 8))(v214, v146);
      }
      else
      {
        if (qword_1010EA318 != -1)
          swift_once(&qword_1010EA318, sub_100B5E330);
        v200 = v61;
        v129 = type metadata accessor for Logger(0);
        sub_10001A9E8(v129, (uint64_t)qword_1011B7DF8);
        v130 = v198;
        v131 = v199;
        sub_10001BD08(v198, v199);
        sub_10001BBBC(v59, v60);
        sub_10001BD08(v130, v131);
        v132 = sub_10001BBBC(v59, v60);
        v133 = Logger.logObject.getter(v132);
        v134 = static os_log_type_t.error.getter(v133);
        if (os_log_type_enabled(v133, v134))
        {
          v135 = swift_slowAlloc(42, -1);
          v136 = swift_slowAlloc(64, -1);
          v227 = (_QWORD *)v136;
          *(_DWORD *)v135 = v192.n128_u32[0];
          *(_QWORD *)(v135 + 4) = 1752392040;
          *(_WORD *)(v135 + 12) = 2081;
          v137 = v131;
          if (v131 >> 60 == 15)
          {
            v138 = 0;
            v139 = 0xE000000000000000;
          }
          else
          {
            v138 = Data.hexString.getter(v130, v131);
            v139 = v150;
          }
          *(_QWORD *)(v135 + 14) = sub_100016940(v138, v139, (uint64_t *)&v227);
          swift_bridgeObjectRelease();
          sub_10001EF3C(v130, v137);
          sub_10001EF3C(v130, v137);
          *(_WORD *)(v135 + 22) = 2160;
          *(_QWORD *)(v135 + 24) = 1752392040;
          *(_WORD *)(v135 + 32) = 2081;
          v151 = sub_10001BBBC(v59, v60);
          v152 = v211;
          static String.Encoding.utf8.getter(v151);
          v153 = String.init(data:encoding:)(v59, v60, v152);
          if (!v154)
            v153 = Data.hexString.getter(v59, v60);
          v155 = v153;
          v156 = v154;
          sub_10001BC14(v59, v60);
          *(_QWORD *)(v135 + 34) = sub_100016940(v155, v156, (uint64_t *)&v227);
          swift_bridgeObjectRelease();
          sub_10001BC14(v59, v60);
          sub_10001BC14(v59, v60);
          _os_log_impl((void *)&_mh_execute_header, v133, v134, "Why are we pairing %{private,mask.hash}s, when %{private,mask.hash}s is pairing locked to another iCloud account?", (uint8_t *)v135, 0x2Au);
          swift_arrayDestroy(v136, 2, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v136, -1, -1);
          swift_slowDealloc(v135, -1, -1);

        }
        else
        {
          sub_10001EF3C(v130, v131);
          sub_10001EF3C(v130, v131);
          sub_10001BC14(v59, v60);
          sub_10001BC14(v59, v60);

        }
        v157 = v208;
        v158 = v197;
        v159 = &v197[*(int *)(v208 + 24)];
        v160 = type metadata accessor for MACAddress(0);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v160 - 8) + 56))(v159, 1, 1, v160);
        *v158 = 767;
        *((_BYTE *)v158 + *(int *)(v157 + 28)) = 0;
        sub_1000126EC((uint64_t)v158, v205, type metadata accessor for MultipartAccessoryPairingInfo);
        sub_10001BBBC(v59, v60);
        v161 = (uint64_t)v228;
        v162 = swift_isUniquelyReferenced_nonNull_native(v228);
        v227 = (_QWORD *)v161;
        v164 = sub_100518E4C(v59, v60);
        v165 = *(_QWORD *)(v161 + 16);
        v166 = (v163 & 1) == 0;
        v167 = v165 + v166;
        if (__OFADD__(v165, v166))
          goto LABEL_102;
        v168 = v163;
        if (*(_QWORD *)(v161 + 24) >= v167)
        {
          v26 = v215;
          if ((v162 & 1) == 0)
            sub_100A99950();
        }
        else
        {
          sub_100A84704(v167, v162);
          v169 = sub_100518E4C(v59, v60);
          v26 = v215;
          if ((v168 & 1) != (v170 & 1))
          {
LABEL_108:
            result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for OwnedBeaconGroup.SerialNumber);
            __break(1u);
            return result;
          }
          v164 = v169;
        }
        v171 = v227;
        if ((v168 & 1) != 0)
        {
          sub_1006003D0(v205, v227[7] + *(_QWORD *)(v207 + 72) * v164);
        }
        else
        {
          v227[(v164 >> 6) + 8] |= 1 << v164;
          v172 = (uint64_t *)(v171[6] + 16 * v164);
          *v172 = v59;
          v172[1] = v60;
          sub_1000126EC(v205, v171[7] + *(_QWORD *)(v207 + 72) * v164, type metadata accessor for MultipartAccessoryPairingInfo);
          v173 = v171[2];
          v144 = __OFADD__(v173, 1);
          v174 = v173 + 1;
          if (v144)
            goto LABEL_104;
          v171[2] = v174;
          sub_10001BBBC(v59, v60);
        }
        v228 = v171;
        swift_bridgeObjectRelease();
        sub_10001BC14(v59, v60);
        sub_10001BC14(v59, v60);
        sub_100B65C34(v213);
        v61 = v200;
      }
    }
    else
    {
      v109 = sub_10001A9A8((uint64_t *)&unk_1010F98D0);
      v110 = (char *)(v214 + *(int *)(v109 + 48));
      v111 = *v110;
      v112 = v110[1];
      v113 = v110[2];
      v114 = v201;
      sub_100005CF0(v214, v201, (uint64_t *)&unk_1010F9890);
      if (v112)
        v111 = -1;
      v115 = v193;
      sub_10000F9B8(v114, v193, (uint64_t *)&unk_1010F9890);
      if (v113 == 3)
        v116 = 0;
      else
        v116 = v113;
      v117 = (uint64_t)v195;
      *v195 = v111;
      *(_BYTE *)(v117 + 1) = 0;
      v118 = v208;
      sub_100005CF0(v115, v117 + *(int *)(v208 + 24), (uint64_t *)&unk_1010F9890);
      *(_BYTE *)(v117 + *(int *)(v118 + 28)) = v116;
      sub_1000126EC(v117, v203, type metadata accessor for MultipartAccessoryPairingInfo);
      sub_10001BBBC(v59, v60);
      v119 = (uint64_t)v228;
      v120 = swift_isUniquelyReferenced_nonNull_native(v228);
      v227 = (_QWORD *)v119;
      v122 = sub_100518E4C(v59, v60);
      v123 = *(_QWORD *)(v119 + 16);
      v124 = (v121 & 1) == 0;
      v125 = v123 + v124;
      if (__OFADD__(v123, v124))
        goto LABEL_103;
      v126 = v121;
      if (*(_QWORD *)(v119 + 24) >= v125)
      {
        v26 = v215;
        if ((v120 & 1) == 0)
          sub_100A99950();
      }
      else
      {
        sub_100A84704(v125, v120);
        v127 = sub_100518E4C(v59, v60);
        v26 = v215;
        if ((v126 & 1) != (v128 & 1))
          goto LABEL_108;
        v122 = v127;
      }
      v141 = v227;
      if ((v126 & 1) != 0)
      {
        sub_1006003D0(v203, v227[7] + *(_QWORD *)(v207 + 72) * v122);
      }
      else
      {
        v227[(v122 >> 6) + 8] |= 1 << v122;
        v147 = (uint64_t *)(v141[6] + 16 * v122);
        *v147 = v59;
        v147[1] = v60;
        sub_1000126EC(v203, v141[7] + *(_QWORD *)(v207 + 72) * v122, type metadata accessor for MultipartAccessoryPairingInfo);
        v148 = v141[2];
        v144 = __OFADD__(v148, 1);
        v149 = v148 + 1;
        if (v144)
          goto LABEL_106;
        v141[2] = v149;
        sub_10001BBBC(v59, v60);
      }
      v228 = v141;
      swift_bridgeObjectRelease();
      sub_10001BC14(v59, v60);
      sub_10001BC14(v59, v60);
      sub_100004048(v201, (uint64_t *)&unk_1010F9890);
      sub_100B65C34(v213);
    }
LABEL_5:
    v36 = v218;
    sub_100004048((uint64_t)v218 + v61, (uint64_t *)&unk_1010F9890);
    v34 = v219;
    v45 = v222;
  }
  swift_release(v217);
  if (qword_1010EA318 == -1)
    goto LABEL_96;
LABEL_107:
  swift_once(&qword_1010EA318, sub_100B5E330);
LABEL_96:
  v175 = type metadata accessor for Logger(0);
  v176 = sub_10001A9E8(v175, (uint64_t)qword_1011B7DF8);
  v177 = Logger.logObject.getter(v176);
  v178 = static os_log_type_t.default.getter(v177);
  if (os_log_type_enabled(v177, v178))
  {
    v179 = swift_slowAlloc(22, -1);
    v180 = swift_slowAlloc(32, -1);
    v227 = (_QWORD *)v180;
    *(_DWORD *)v179 = v210.n128_u32[0];
    v225 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v225, v226, v179 + 4, v179 + 12);
    *(_WORD *)(v179 + 12) = 2081;
    swift_beginAccess(&v228, &v225, 0, 0);
    v181 = v228;
    v182 = sub_100059BCC();
    swift_bridgeObjectRetain(v181);
    v184 = Dictionary.description.getter(v183, &type metadata for OwnedBeaconGroup.SerialNumber, v208, v182);
    v186 = v185;
    swift_bridgeObjectRelease();
    v224 = sub_100016940(v184, v186, (uint64_t *)&v227);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v224, &v225, v179 + 14, v179 + 22);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v177, v178, "otherAccessoryPairingInfo: %{private,mask.hash}s", (uint8_t *)v179, 0x16u);
    swift_arrayDestroy(v180, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v180, -1, -1);
    swift_slowDealloc(v179, -1, -1);

    sub_10001EF3C(v198, v199);
  }
  else
  {
    sub_10001EF3C(v198, v199);

  }
  swift_beginAccess(&v228, &v227, 0, 0);
  return (uint64_t)v228;
}

uint64_t sub_100B656E4()
{
  id v0;
  void *v1;
  id v2;
  void *v3;
  uint64_t v4;
  id v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  id v10;
  void *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t result;
  uint64_t v28;
  uint64_t v29[2];

  v0 = objc_msgSend((id)objc_opt_self(ACAccountStore), "defaultStore");
  if (v0)
  {
    v1 = v0;
    v2 = objc_msgSend(v0, "aa_primaryAppleAccount");
    if (v2)
    {
      v3 = v2;
      if (qword_1010EA318 != -1)
        swift_once(&qword_1010EA318, sub_100B5E330);
      v4 = type metadata accessor for Logger(0);
      sub_10001A9E8(v4, (uint64_t)qword_1011B7DF8);
      v5 = v3;
      v6 = Logger.logObject.getter(v5);
      v7 = static os_log_type_t.debug.getter(v6);
      if (os_log_type_enabled(v6, v7))
      {
        v8 = (uint8_t *)swift_slowAlloc(12, -1);
        v9 = swift_slowAlloc(32, -1);
        v29[0] = v9;
        *(_DWORD *)v8 = 136315138;
        v10 = objc_msgSend(v5, "aa_altDSID");
        if (v10)
        {
          v11 = v10;
          v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
          v14 = v13;

        }
        else
        {
          v12 = 0;
          v14 = 0xE000000000000000;
        }
        v28 = sub_100016940(v12, v14, v29);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, v29, v8 + 4, v8 + 12);

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v6, v7, "Alt_DSID: %s", v8, 0xCu);
        swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v9, -1, -1);
        swift_slowDealloc(v8, -1, -1);

      }
      else
      {

      }
      v23 = objc_msgSend(v5, "aa_altDSID");
      if (v23)
      {
        v24 = v23;
        v20 = (id)static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
        v22 = v25;

      }
      else
      {

        v20 = 0;
        v22 = 0xE000000000000000;
      }
    }
    else
    {
      if (qword_1010EA318 != -1)
        swift_once(&qword_1010EA318, sub_100B5E330);
      v15 = type metadata accessor for Logger(0);
      v16 = sub_10001A9E8(v15, (uint64_t)qword_1011B7DF8);
      v17 = Logger.logObject.getter(v16);
      v18 = static os_log_type_t.error.getter(v17);
      if (os_log_type_enabled(v17, v18))
      {
        v19 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v19 = 0;
        _os_log_impl((void *)&_mh_execute_header, v17, v18, "Failed to obtain Alt_DSID from account. Using device serial number instead to support account signed out.", v19, 2u);
        swift_slowDealloc(v19, -1, -1);
      }

      v20 = sub_100B118D0();
      v22 = v21;
    }
    v26 = sub_1002FBA84((uint64_t)v20, v22);

    return v26;
  }
  else
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000042, 0x8000000100EEFA20, "searchpartyd/AirPodsPairingInfo.swift", 37, 2, 16, 0);
    __break(1u);
  }
  return result;
}

double sub_100B65C04(_OWORD *a1)
{
  double result;

  result = 0.0;
  a1[18] = 0u;
  a1[19] = 0u;
  a1[16] = 0u;
  a1[17] = 0u;
  a1[14] = 0u;
  a1[15] = 0u;
  a1[12] = 0u;
  a1[13] = 0u;
  a1[10] = 0u;
  a1[11] = 0u;
  a1[8] = 0u;
  a1[9] = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

uint64_t sub_100B65C34(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for OwnedBeaconGroup.PairingState(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100B65C70(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for OwnedBeaconGroup.PairingState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

double sub_100B65CB4(_OWORD *a1)
{
  double result;

  result = 0.0;
  *a1 = xmmword_100E2C1E0;
  a1[1] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[8] = 0u;
  a1[9] = 0u;
  a1[10] = 0u;
  a1[11] = 0u;
  a1[12] = 0u;
  return result;
}

double sub_100B65CE0(_OWORD *a1)
{
  double result;

  result = 0.0;
  a1[20] = 0u;
  a1[21] = 0u;
  a1[18] = 0u;
  a1[19] = 0u;
  a1[16] = 0u;
  a1[17] = 0u;
  a1[14] = 0u;
  a1[15] = 0u;
  a1[12] = 0u;
  a1[13] = 0u;
  a1[10] = 0u;
  a1[11] = 0u;
  a1[8] = 0u;
  a1[9] = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

double sub_100B65D14(_OWORD *a1)
{
  double result;

  result = 0.0;
  *a1 = xmmword_100E2C1E0;
  a1[1] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[8] = 0u;
  a1[9] = 0u;
  a1[10] = 0u;
  a1[11] = 0u;
  a1[12] = 0u;
  a1[13] = 0u;
  a1[14] = 0u;
  a1[15] = 0u;
  a1[16] = 0u;
  return result;
}

double sub_100B65D48(_OWORD *a1)
{
  double result;

  result = 0.0;
  *a1 = xmmword_100E2C1E0;
  a1[1] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[8] = 0u;
  a1[9] = 0u;
  a1[10] = 0u;
  a1[11] = 0u;
  a1[12] = 0u;
  a1[13] = 0u;
  return result;
}

double sub_100B65D74(_OWORD *a1)
{
  double result;

  result = 0.0;
  a1[19] = 0u;
  a1[20] = 0u;
  a1[17] = 0u;
  a1[18] = 0u;
  a1[15] = 0u;
  a1[16] = 0u;
  a1[13] = 0u;
  a1[14] = 0u;
  a1[11] = 0u;
  a1[12] = 0u;
  a1[9] = 0u;
  a1[10] = 0u;
  a1[7] = 0u;
  a1[8] = 0u;
  a1[5] = 0u;
  a1[6] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  return result;
}

id sub_100B65DA8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  int *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  id v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  void *v29;
  void *v30;
  Swift::String v31;
  uint64_t v32;
  id result;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  NSObject *v56;
  os_log_type_t v57;
  BOOL v58;
  uint8_t *v59;
  const char *v60;
  uint64_t v61;
  char *v62;
  char *v63;
  id v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  void (*v74)(char *, char *, uint64_t);
  void *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  id v80;
  uint64_t v81;
  void *v82;
  void (*v83)(char *, char *, uint64_t);
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  id v89;
  uint64_t v90;
  void *v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  int *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;

  v4 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  __chkstk_darwin(v4);
  v108 = (char *)&v96 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v109 = type metadata accessor for Date(0);
  v106 = *(_QWORD *)(v109 - 8);
  v6 = __chkstk_darwin(v109);
  v8 = (char *)&v96 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v107 = (char *)&v96 - v9;
  v10 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v10);
  v12 = (char *)&v96 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for UUID(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v96 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = (int *)type metadata accessor for MessagingMessageContext(0);
  v18 = *((_QWORD *)v17 - 1);
  __chkstk_darwin(v17);
  v20 = (char *)&v96 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((sub_100B674BC(a1) & 1) == 0)
    goto LABEL_24;
  v102 = v16;
  v21 = objc_msgSend(a1, "toID");
  if (v21)
  {
    v22 = v21;
    v103 = v17;
    v104 = v18;
    v105 = a2;
    v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
    v25 = v24;

  }
  else
  {
    v26 = IDSCopyLocalDeviceUniqueID();
    if (!v26)
    {
      if (qword_1010EA3C8 != -1)
        swift_once(&qword_1010EA3C8, sub_100BECC74);
      v71 = type metadata accessor for Logger(0);
      v72 = sub_10001A9E8(v71, (uint64_t)qword_1011B7EC8);
      v56 = Logger.logObject.getter(v72);
      v57 = static os_log_type_t.error.getter(v56);
      if (!os_log_type_enabled(v56, v57))
        goto LABEL_23;
      v59 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v59 = 0;
      v60 = "Ignoring IDSCopyLocalDeviceUniqueID() failed to return a value!";
      goto LABEL_22;
    }
    v27 = (void *)v26;
    v103 = v17;
    v104 = v18;
    v105 = a2;
    v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
    v30 = v29;

    v110 = 0x3A656369766564;
    v111 = 0xE700000000000000;
    v31._countAndFlagsBits = v28;
    v31._object = v30;
    String.append(_:)(v31);
    swift_bridgeObjectRelease();
    v23 = v110;
    v25 = v111;
  }
  v101 = v14;
  v32 = v13;
  result = objc_msgSend(a1, "fromID");
  if (!result)
  {
    __break(1u);
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  v34 = result;
  v35 = static String._unconditionallyBridgeFromObjectiveC(_:)(result);
  v37 = v36;

  v38 = _s12searchpartyd20MessagingDestinationV20stringRepresentationACSgSS_tcfC_0(v35, v37);
  if (!v40
    || (v41 = v38,
        v42 = v39,
        v43 = v40,
        v44 = _s12searchpartyd20MessagingDestinationV20stringRepresentationACSgSS_tcfC_0(v23, v25),
        !v46))
  {
    swift_bridgeObjectRelease();

    v61 = 1;
    v18 = v104;
    a2 = v105;
    v17 = v103;
    return (id)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *))(v18 + 56))(a2, v61, 1, v17);
  }
  v47 = v46;
  v97 = v45;
  v98 = v44;
  v99 = v42;
  v100 = v41;
  result = objc_msgSend(a1, "outgoingResponseIdentifier");
  if (!result)
    goto LABEL_38;
  v48 = result;
  v49 = static String._unconditionallyBridgeFromObjectiveC(_:)(result);
  v51 = v50;

  UUID.init(uuidString:)(v49, v51);
  swift_bridgeObjectRelease();
  v52 = v101;
  v53 = v32;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v101 + 48))(v12, 1, v32) == 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_100004048((uint64_t)v12, &qword_1010ED860);
    v17 = v103;
    if (qword_1010EA3C8 != -1)
      swift_once(&qword_1010EA3C8, sub_100BECC74);
    v54 = type metadata accessor for Logger(0);
    v55 = sub_10001A9E8(v54, (uint64_t)qword_1011B7EC8);
    v56 = Logger.logObject.getter(v55);
    v57 = static os_log_type_t.error.getter(v56);
    v58 = os_log_type_enabled(v56, v57);
    v18 = v104;
    a2 = v105;
    if (!v58)
      goto LABEL_23;
    v59 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v59 = 0;
    v60 = "could not convert outgoingResponseIdentifier to UUID!";
LABEL_22:
    _os_log_impl((void *)&_mh_execute_header, v56, v57, v60, v59, 2u);
    swift_slowDealloc(v59, -1, -1);
LABEL_23:

LABEL_24:
    v61 = 1;
    return (id)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *))(v18 + 56))(a2, v61, 1, v17);
  }
  (*(void (**)(char *, char *, uint64_t))(v52 + 32))(v102, v12, v32);
  v17 = v103;
  v62 = &v20[v103[6]];
  *v62 = v100;
  *((_QWORD *)v62 + 1) = v99;
  *((_QWORD *)v62 + 2) = v43;
  v63 = &v20[v17[7]];
  *v63 = v98;
  *((_QWORD *)v63 + 1) = v97;
  *((_QWORD *)v63 + 2) = v47;
  v64 = objc_msgSend(a1, "incomingResponseIdentifier");
  if (v64)
  {
    v65 = v64;
    v66 = v53;
    v67 = static String._unconditionallyBridgeFromObjectiveC(_:)(v64);
    v69 = v68;

    v70 = v67;
    v53 = v66;
    UUID.init(uuidString:)(v70, v69);
    swift_bridgeObjectRelease();
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v52 + 56))(v20, 1, 1, v53);
  }
  v18 = v104;
  a2 = v105;
  v73 = &v20[v17[5]];
  v74 = *(void (**)(char *, char *, uint64_t))(v52 + 16);
  v105 = v53;
  v74(v73, v102, v53);
  result = objc_msgSend(a1, "serviceIdentifier");
  if (result)
  {
    v75 = result;
    v76 = static String._unconditionallyBridgeFromObjectiveC(_:)(result);
    v78 = v77;

    v79 = (uint64_t *)&v20[v17[8]];
    *v79 = v76;
    v79[1] = v78;
    v20[v17[9]] = objc_msgSend(a1, "expectsPeerResponse");
    v20[v17[10]] = objc_msgSend(a1, "fromServerStorage");
    v80 = objc_msgSend(a1, "serverReceivedTime");
    v81 = v106;
    if (v80)
    {
      v82 = v80;
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v80);

      v83 = *(void (**)(char *, char *, uint64_t))(v81 + 32);
      v84 = (uint64_t)v108;
      v85 = v8;
      v86 = v109;
      v83(v108, v85, v109);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v81 + 56))(v84, 0, 1, v86);
      v87 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v81 + 48))(v84, 1, v86);
      v88 = v107;
      if ((_DWORD)v87 != 1)
      {
        v83(v107, (char *)v84, v86);
LABEL_33:
        v83(&v20[v17[11]], v88, v86);
        v89 = objc_msgSend(a1, "senderCorrelationIdentifier");
        v90 = v105;
        if (v89)
        {
          v91 = v89;
          v92 = static String._unconditionallyBridgeFromObjectiveC(_:)(v89);
          v94 = v93;

        }
        else
        {

          v92 = 0;
          v94 = 0xE000000000000000;
        }
        (*(void (**)(char *, uint64_t))(v101 + 8))(v102, v90);
        v95 = (uint64_t *)&v20[v17[12]];
        *v95 = v92;
        v95[1] = v94;
        sub_1002EAACC((uint64_t)v20, a2);
        v61 = 0;
        return (id)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *))(v18 + 56))(a2, v61, 1, v17);
      }
    }
    else
    {
      v84 = (uint64_t)v108;
      v86 = v109;
      v87 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v106 + 56))(v108, 1, 1, v109);
      v88 = v107;
    }
    static Date.distantPast.getter(v87);
    sub_100004048(v84, (uint64_t *)&unk_1010EA690);
    v83 = *(void (**)(char *, char *, uint64_t))(v81 + 32);
    goto LABEL_33;
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t MessagingMessageContext.incomingResponseIdentifier.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1002A380C(v1, a1);
}

uint64_t MessagingMessageContext.outgoingResponseIdentifier.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for MessagingMessageContext(0) + 20);
  v4 = type metadata accessor for UUID(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for MessagingMessageContext(uint64_t a1)
{
  uint64_t result;

  result = qword_101116338;
  if (!qword_101116338)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for MessagingMessageContext);
  return result;
}

uint64_t MessagingMessageContext.fromID.getter()
{
  uint64_t v0;
  unsigned __int8 *v1;
  uint64_t v2;

  v1 = (unsigned __int8 *)(v0 + *(int *)(type metadata accessor for MessagingMessageContext(0) + 24));
  v2 = *v1;
  swift_bridgeObjectRetain(*((_QWORD *)v1 + 2));
  return v2;
}

uint64_t MessagingMessageContext.toID.getter()
{
  uint64_t v0;
  unsigned __int8 *v1;
  uint64_t v2;

  v1 = (unsigned __int8 *)(v0 + *(int *)(type metadata accessor for MessagingMessageContext(0) + 28));
  v2 = *v1;
  swift_bridgeObjectRetain(*((_QWORD *)v1 + 2));
  return v2;
}

uint64_t MessagingMessageContext.serviceIdentifier.getter()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for MessagingMessageContext(0) + 32));
  v2 = *v1;
  swift_bridgeObjectRetain(v1[1]);
  return v2;
}

uint64_t MessagingMessageContext.expectsPeerResponse.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for MessagingMessageContext(0) + 36));
}

uint64_t MessagingMessageContext.fromServerStorage.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for MessagingMessageContext(0) + 40));
}

uint64_t MessagingMessageContext.serverReceivedTime.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for MessagingMessageContext(0) + 44);
  v4 = type metadata accessor for Date(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t MessagingMessageContext.senderCorrelationIdentifier.getter()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(v0 + *(int *)(type metadata accessor for MessagingMessageContext(0) + 48));
  v2 = *v1;
  swift_bridgeObjectRetain(v1[1]);
  return v2;
}

uint64_t MessagingMessageContext.description.getter()
{
  uint64_t v0;
  int *v1;
  unint64_t v2;
  Swift::String v3;
  Swift::String v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  Swift::String v8;
  Swift::String v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  Swift::String v13;
  Swift::String v14;
  uint64_t *v15;
  uint64_t v16;
  void *v17;
  Swift::String v18;
  Swift::String v19;

  _StringGuts.grow(_:)(33);
  swift_bridgeObjectRelease();
  v1 = (int *)type metadata accessor for MessagingMessageContext(0);
  v2 = sub_100B6689C();
  v3._countAndFlagsBits = CustomStringConvertible.typeDescription.getter(v1, v2);
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = 0x3A44496D6F726620;
  v4._object = (void *)0xE800000000000000;
  String.append(_:)(v4);
  v5 = v0 + v1[6];
  v6 = *(_QWORD *)(v5 + 8);
  v7 = *(void **)(v5 + 16);
  swift_bridgeObjectRetain(v7);
  v8._countAndFlagsBits = v6;
  v8._object = v7;
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._countAndFlagsBits = 0x3A44496F7420;
  v9._object = (void *)0xE600000000000000;
  String.append(_:)(v9);
  v10 = v0 + v1[7];
  v11 = *(_QWORD *)(v10 + 8);
  v12 = *(void **)(v10 + 16);
  swift_bridgeObjectRetain(v12);
  v13._countAndFlagsBits = v11;
  v13._object = v12;
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  v14._countAndFlagsBits = 0x6563697672657320;
  v14._object = (void *)0xE90000000000003ALL;
  String.append(_:)(v14);
  v15 = (uint64_t *)(v0 + v1[8]);
  v16 = *v15;
  v17 = (void *)v15[1];
  swift_bridgeObjectRetain(v17);
  v18._countAndFlagsBits = v16;
  v18._object = v17;
  String.append(_:)(v18);
  swift_bridgeObjectRelease();
  v19._countAndFlagsBits = 62;
  v19._object = (void *)0xE100000000000000;
  String.append(_:)(v19);
  return 60;
}

unint64_t sub_100B6689C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1011162D8;
  if (!qword_1011162D8)
  {
    v1 = type metadata accessor for MessagingMessageContext(255);
    result = swift_getWitnessTable(protocol conformance descriptor for MessagingMessageContext, v1);
    atomic_store(result, (unint64_t *)&qword_1011162D8);
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for MessagingMessageContext(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  void (*v29)(char *, char *, uint64_t, __n128);
  __n128 v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      v9 = sub_10001A9A8(&qword_1010ED860);
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
      (*(void (**)(char *, char *, uint64_t))(v8 + 16))((char *)a1 + a3[5], (char *)a2 + a3[5], v7);
    }
    else
    {
      v11 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16);
      v11(a1, a2, v7);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
      v11((uint64_t *)((char *)a1 + a3[5]), (uint64_t *)((char *)a2 + a3[5]), v7);
    }
    v12 = a3[6];
    v13 = a3[7];
    v14 = (char *)a1 + v12;
    v15 = (char *)a2 + v12;
    *v14 = *v15;
    v16 = *((_QWORD *)v15 + 2);
    *((_QWORD *)v14 + 1) = *((_QWORD *)v15 + 1);
    *((_QWORD *)v14 + 2) = v16;
    v17 = (char *)a1 + v13;
    v18 = (char *)a2 + v13;
    *v17 = *v18;
    v19 = *((_QWORD *)v18 + 2);
    *((_QWORD *)v17 + 1) = *((_QWORD *)v18 + 1);
    *((_QWORD *)v17 + 2) = v19;
    v20 = a3[8];
    v21 = a3[9];
    v22 = (uint64_t *)((char *)a1 + v20);
    v23 = (uint64_t *)((char *)a2 + v20);
    v24 = v23[1];
    *v22 = *v23;
    v22[1] = v24;
    *((_BYTE *)a1 + v21) = *((_BYTE *)a2 + v21);
    v25 = a3[11];
    *((_BYTE *)a1 + a3[10]) = *((_BYTE *)a2 + a3[10]);
    v26 = (char *)a1 + v25;
    v27 = (char *)a2 + v25;
    v28 = type metadata accessor for Date(0);
    v29 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v28 - 8) + 16);
    swift_bridgeObjectRetain(v16);
    swift_bridgeObjectRetain(v19);
    v30 = swift_bridgeObjectRetain(v24);
    v29(v26, v27, v28, v30);
    v31 = a3[12];
    v32 = (uint64_t *)((char *)a1 + v31);
    v33 = (uint64_t *)((char *)a2 + v31);
    v34 = v33[1];
    *v32 = *v33;
    v32[1] = v34;
    swift_bridgeObjectRetain(v34);
  }
  return a1;
}

uint64_t destroy for MessagingMessageContext(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  void (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;

  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 1, v4);
  v7 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  if (!v6)
    v7(a1, v4);
  v7(a1 + a2[5], v4);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[6] + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[7] + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[8] + 8));
  v8 = a1 + a2[11];
  v9 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[12] + 8));
}

char *initializeWithCopy for MessagingMessageContext(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(char *, char *, uint64_t);
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  void (*v27)(char *, char *, uint64_t, __n128);
  __n128 v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = sub_10001A9A8(&qword_1010ED860);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(&a1[a3[5]], &a2[a3[5]], v6);
  }
  else
  {
    v9 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
    v9(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
    v9(&a1[a3[5]], &a2[a3[5]], v6);
  }
  v10 = a3[6];
  v11 = a3[7];
  v12 = &a1[v10];
  v13 = &a2[v10];
  *v12 = *v13;
  v14 = *((_QWORD *)v13 + 2);
  *((_QWORD *)v12 + 1) = *((_QWORD *)v13 + 1);
  *((_QWORD *)v12 + 2) = v14;
  v15 = &a1[v11];
  v16 = &a2[v11];
  *v15 = *v16;
  v17 = *((_QWORD *)v16 + 2);
  *((_QWORD *)v15 + 1) = *((_QWORD *)v16 + 1);
  *((_QWORD *)v15 + 2) = v17;
  v18 = a3[8];
  v19 = a3[9];
  v20 = &a1[v18];
  v21 = &a2[v18];
  v22 = *((_QWORD *)v21 + 1);
  *(_QWORD *)v20 = *(_QWORD *)v21;
  *((_QWORD *)v20 + 1) = v22;
  a1[v19] = a2[v19];
  v23 = a3[11];
  a1[a3[10]] = a2[a3[10]];
  v24 = &a1[v23];
  v25 = &a2[v23];
  v26 = type metadata accessor for Date(0);
  v27 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v26 - 8) + 16);
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRetain(v17);
  v28 = swift_bridgeObjectRetain(v22);
  v27(v24, v25, v26, v28);
  v29 = a3[12];
  v30 = &a1[v29];
  v31 = &a2[v29];
  v32 = *((_QWORD *)v31 + 1);
  *(_QWORD *)v30 = *(_QWORD *)v31;
  *((_QWORD *)v30 + 1) = v32;
  swift_bridgeObjectRetain(v32);
  return a1;
}

char *assignWithCopy for MessagingMessageContext(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 24))(a1, a2, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    v11 = sub_10001A9A8(&qword_1010ED860);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
LABEL_7:
  (*(void (**)(char *, char *, uint64_t))(v7 + 24))(&a1[a3[5]], &a2[a3[5]], v6);
  v12 = a3[6];
  v13 = &a1[v12];
  v14 = &a2[v12];
  *v13 = *v14;
  *((_QWORD *)v13 + 1) = *((_QWORD *)v14 + 1);
  v15 = *((_QWORD *)v14 + 2);
  *((_QWORD *)v13 + 2) = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease();
  v16 = a3[7];
  v17 = &a1[v16];
  v18 = &a2[v16];
  *v17 = *v18;
  *((_QWORD *)v17 + 1) = *((_QWORD *)v18 + 1);
  v19 = *((_QWORD *)v18 + 2);
  *((_QWORD *)v17 + 2) = v19;
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRelease();
  v20 = a3[8];
  v21 = &a1[v20];
  v22 = &a2[v20];
  *(_QWORD *)v21 = *(_QWORD *)v22;
  v23 = *((_QWORD *)v22 + 1);
  *((_QWORD *)v21 + 1) = v23;
  swift_bridgeObjectRetain(v23);
  swift_bridgeObjectRelease();
  a1[a3[9]] = a2[a3[9]];
  a1[a3[10]] = a2[a3[10]];
  v24 = a3[11];
  v25 = &a1[v24];
  v26 = &a2[v24];
  v27 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v27 - 8) + 24))(v25, v26, v27);
  v28 = a3[12];
  v29 = &a1[v28];
  v30 = &a2[v28];
  *(_QWORD *)v29 = *(_QWORD *)v30;
  v31 = *((_QWORD *)v30 + 1);
  *((_QWORD *)v29 + 1) = v31;
  swift_bridgeObjectRetain(v31);
  swift_bridgeObjectRelease();
  return a1;
}

char *initializeWithTake for MessagingMessageContext(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(char *, char *, uint64_t);
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = sub_10001A9A8(&qword_1010ED860);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(&a1[a3[5]], &a2[a3[5]], v6);
  }
  else
  {
    v9 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
    v9(a1, a2, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
    v9(&a1[a3[5]], &a2[a3[5]], v6);
  }
  v10 = a3[6];
  v11 = a3[7];
  v12 = &a1[v10];
  v13 = &a2[v10];
  *(_OWORD *)v12 = *(_OWORD *)v13;
  *((_QWORD *)v12 + 2) = *((_QWORD *)v13 + 2);
  v14 = &a1[v11];
  v15 = &a2[v11];
  *(_OWORD *)v14 = *(_OWORD *)v15;
  *((_QWORD *)v14 + 2) = *((_QWORD *)v15 + 2);
  v16 = a3[9];
  *(_OWORD *)&a1[a3[8]] = *(_OWORD *)&a2[a3[8]];
  a1[v16] = a2[v16];
  v17 = a3[11];
  a1[a3[10]] = a2[a3[10]];
  v18 = &a1[v17];
  v19 = &a2[v17];
  v20 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v18, v19, v20);
  *(_OWORD *)&a1[a3[12]] = *(_OWORD *)&a2[a3[12]];
  return a1;
}

char *assignWithTake for MessagingMessageContext(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(char *, uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 40))(a1, a2, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    v11 = sub_10001A9A8(&qword_1010ED860);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
LABEL_7:
  (*(void (**)(char *, char *, uint64_t))(v7 + 40))(&a1[a3[5]], &a2[a3[5]], v6);
  v12 = a3[6];
  v13 = &a1[v12];
  v14 = &a2[v12];
  *v13 = *v14;
  v16 = *((_QWORD *)v14 + 1);
  v15 = *((_QWORD *)v14 + 2);
  *((_QWORD *)v13 + 1) = v16;
  *((_QWORD *)v13 + 2) = v15;
  swift_bridgeObjectRelease();
  v17 = a3[7];
  v18 = &a1[v17];
  v19 = &a2[v17];
  *v18 = *v19;
  v21 = *((_QWORD *)v19 + 1);
  v20 = *((_QWORD *)v19 + 2);
  *((_QWORD *)v18 + 1) = v21;
  *((_QWORD *)v18 + 2) = v20;
  swift_bridgeObjectRelease();
  v22 = a3[8];
  v23 = &a1[v22];
  v24 = &a2[v22];
  v26 = *(_QWORD *)v24;
  v25 = *((_QWORD *)v24 + 1);
  *(_QWORD *)v23 = v26;
  *((_QWORD *)v23 + 1) = v25;
  swift_bridgeObjectRelease();
  v27 = a3[10];
  a1[a3[9]] = a2[a3[9]];
  a1[v27] = a2[v27];
  v28 = a3[11];
  v29 = &a1[v28];
  v30 = &a2[v28];
  v31 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v31 - 8) + 40))(v29, v30, v31);
  v32 = a3[12];
  v33 = &a1[v32];
  v34 = &a2[v32];
  v36 = *(_QWORD *)v34;
  v35 = *((_QWORD *)v34 + 1);
  *(_QWORD *)v33 = v36;
  *((_QWORD *)v33 + 1) = v35;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for MessagingMessageContext(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100B6724C);
}

uint64_t sub_100B6724C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;

  v6 = sub_10001A9A8(&qword_1010ED860);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = type metadata accessor for UUID(0);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v13 = a3[5];
LABEL_10:
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    v8 = type metadata accessor for Date(0);
    v12 = *(_QWORD *)(v8 - 8);
    v13 = a3[11];
    goto LABEL_10;
  }
  v14 = *(_QWORD *)(a1 + a3[6] + 16);
  if (v14 >= 0xFFFFFFFF)
    LODWORD(v14) = -1;
  return (v14 + 1);
}

uint64_t storeEnumTagSinglePayload for MessagingMessageContext(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100B6732C);
}

uint64_t sub_100B6732C(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;

  v8 = sub_10001A9A8(&qword_1010ED860);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    result = type metadata accessor for UUID(0);
    v14 = *(_QWORD *)(result - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = result;
      v15 = a4[5];
    }
    else
    {
      if (a3 == 0x7FFFFFFF)
      {
        *(_QWORD *)(a1 + a4[6] + 16) = (a2 - 1);
        return result;
      }
      v10 = type metadata accessor for Date(0);
      v14 = *(_QWORD *)(v10 - 8);
      v15 = a4[11];
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_100B673FC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[9];

  sub_100252558(319);
  if (v3 <= 0x3F)
  {
    v8[0] = *(_QWORD *)(v2 - 8) + 64;
    v4 = type metadata accessor for UUID(319);
    if (v5 <= 0x3F)
    {
      v8[1] = *(_QWORD *)(v4 - 8) + 64;
      v8[2] = &unk_100E61F68;
      v8[3] = &unk_100E61F68;
      v8[4] = &unk_100E61F80;
      v8[5] = &unk_100E61F98;
      v8[6] = &unk_100E61F98;
      v6 = type metadata accessor for Date(319);
      if (v7 <= 0x3F)
      {
        v8[7] = *(_QWORD *)(v6 - 8) + 64;
        v8[8] = &unk_100E61F80;
        swift_initStructMetadata(a1, 256, 9, v8, a1 + 16);
      }
    }
  }
}

uint64_t sub_100B674BC(void *a1)
{
  id v2;
  void *v3;
  Swift::String v4;
  uint64_t v6;
  id v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  _QWORD *v11;
  id v12;
  const char *v13;
  id v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  id v18;
  uint64_t v19;

  v2 = objc_msgSend(a1, "fromID");
  if (v2)
  {
    v3 = v2;
    static String._unconditionallyBridgeFromObjectiveC(_:)(v2);

    v4._countAndFlagsBits = 0x3A656369766564;
    v4._object = (void *)0xE700000000000000;
    LOBYTE(v3) = String.hasPrefix(_:)(v4);
    swift_bridgeObjectRelease();
    if ((v3 & 1) != 0)
      return 1;
    v14 = objc_msgSend(a1, "senderCorrelationIdentifier");
    if (v14)
    {

      return 1;
    }
    if (qword_1010EA3C8 != -1)
      swift_once(&qword_1010EA3C8, sub_100BECC74);
    v15 = type metadata accessor for Logger(0);
    sub_10001A9E8(v15, (uint64_t)qword_1011B7EC8);
    v7 = a1;
    v8 = Logger.logObject.getter(v7);
    v9 = static os_log_type_t.error.getter(v8);
    if (os_log_type_enabled(v8, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc(12, -1);
      v11 = (_QWORD *)swift_slowAlloc(8, -1);
      *(_DWORD *)v10 = 138412290;
      v18 = v7;
      v16 = v7;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19, v10 + 4, v10 + 12);
      *v11 = v7;

      v13 = "Ignoring IDSMessageContext without a correlationIdentifier: %@";
      goto LABEL_14;
    }
LABEL_15:

    return 0;
  }
  if (qword_1010EA3C8 != -1)
    swift_once(&qword_1010EA3C8, sub_100BECC74);
  v6 = type metadata accessor for Logger(0);
  sub_10001A9E8(v6, (uint64_t)qword_1011B7EC8);
  v7 = a1;
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.error.getter(v8);
  if (!os_log_type_enabled(v8, v9))
    goto LABEL_15;
  v10 = (uint8_t *)swift_slowAlloc(12, -1);
  v11 = (_QWORD *)swift_slowAlloc(8, -1);
  *(_DWORD *)v10 = 138412290;
  v18 = v7;
  v12 = v7;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19, v10 + 4, v10 + 12);
  *v11 = v7;

  v13 = "Ignoring IDSMessageContext without a fromID: %@";
LABEL_14:
  _os_log_impl((void *)&_mh_execute_header, v8, v9, v13, v10, 0xCu);
  v17 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
  swift_arrayDestroy(v11, 1, v17);
  swift_slowDealloc(v11, -1, -1);
  swift_slowDealloc(v10, -1, -1);

  return 0;
}

ValueMetadata *type metadata accessor for GetPrimaryKeyPayload()
{
  return &type metadata for GetPrimaryKeyPayload;
}

unint64_t sub_100B677D8(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = sub_100AF90C0();
  result = sub_10043A0E8();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t sub_100B67804(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v18;
  unint64_t v19;
  uint64_t v20;
  _BOOL8 v21;
  uint64_t v22;
  char v23;
  unint64_t v24;
  char v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t result;
  _QWORD v30[2];
  uint64_t v31;
  uint64_t v32;
  void (*v33)(uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v34;
  _QWORD *v35;

  v31 = type metadata accessor for SharedBeaconRecord(0);
  v5 = *(_QWORD *)(v31 - 8);
  __chkstk_darwin(v31);
  v7 = (char *)v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v32 - 8);
  __chkstk_darwin(v32);
  v34 = (uint64_t)v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(a2 + 16);
  if (!v10)
    return (uint64_t)a1;
  v30[0] = a2;
  v30[1] = v2;
  v11 = a2 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
  v12 = *(_QWORD *)(v5 + 72);
  v33 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v8 + 16);
  v13 = swift_bridgeObjectRetain(a2);
  v14 = v32;
  v15 = v34;
  while (1)
  {
    v33(v15, v11 + *(int *)(v31 + 20), v14, v13);
    v16 = (uint64_t)v7;
    sub_10005972C(v11, (uint64_t)v7, type metadata accessor for SharedBeaconRecord);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(a1);
    v35 = a1;
    v19 = sub_100003FB0(v15);
    v20 = a1[2];
    v21 = (v18 & 1) == 0;
    v22 = v20 + v21;
    if (__OFADD__(v20, v21))
      break;
    v23 = v18;
    if (a1[3] >= v22)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        sub_100AA2120();
    }
    else
    {
      sub_100A954A8(v22, isUniquelyReferenced_nonNull_native);
      v24 = sub_100003FB0(v34);
      if ((v23 & 1) != (v25 & 1))
        goto LABEL_18;
      v19 = v24;
    }
    v7 = (char *)v16;
    a1 = v35;
    if ((v23 & 1) != 0)
    {
      sub_100B8610C(v16, v35[7] + v19 * v12);
      v14 = v32;
    }
    else
    {
      v35[(v19 >> 6) + 8] |= 1 << v19;
      v14 = v32;
      ((void (*)(unint64_t, uint64_t, uint64_t))v33)(a1[6] + *(_QWORD *)(v8 + 72) * v19, v34, v32);
      sub_1000126EC(v16, a1[7] + v19 * v12, type metadata accessor for SharedBeaconRecord);
      v26 = a1[2];
      v27 = __OFADD__(v26, 1);
      v28 = v26 + 1;
      if (v27)
        goto LABEL_17;
      a1[2] = v28;
      a1 = v35;
    }
    swift_bridgeObjectRelease();
    v15 = v34;
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v34, v14);
    v11 += v12;
    if (!--v10)
    {
      swift_bridgeObjectRelease();
      return (uint64_t)a1;
    }
  }
  __break(1u);
LABEL_17:
  __break(1u);
LABEL_18:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v32);
  __break(1u);
  return result;
}

void *sub_100B67A8C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Swift::Int v7;

  v2 = a2;
  v3 = a1;
  if ((a1 & 0xC000000000000001) == 0)
  {
    v4 = *(_QWORD *)(a1 + 16);
    if ((a2 & 0xC000000000000001) != 0)
      goto LABEL_5;
LABEL_11:
    if (v4 > *(_QWORD *)(v2 + 16) >> 3)
      return sub_10063F7C4(v3, v2);
    goto LABEL_13;
  }
  if (a1 >= 0)
    a1 &= 0xFFFFFFFFFFFFFF8uLL;
  v4 = __CocoaSet.count.getter(a1);
  if ((v2 & 0xC000000000000001) == 0)
    goto LABEL_11;
LABEL_5:
  if (v2 < 0)
    v5 = v2;
  else
    v5 = v2 & 0xFFFFFFFFFFFFFF8;
  if (v4 > __CocoaSet.count.getter(v5) / 8)
  {
    swift_bridgeObjectRetain(v2);
    v6 = __CocoaSet.count.getter(v5);
    v7 = sub_100C7FD48(v5, v6);
    swift_bridgeObjectRelease();
    v2 = v7;
    return sub_10063F7C4(v3, v2);
  }
LABEL_13:
  sub_10063B3C4(v3);
  return (void *)v2;
}

uint64_t sub_100B67B80(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v4 + 40) = a2;
  *(_QWORD *)(v4 + 48) = v3;
  *(_BYTE *)(v4 + 120) = a3;
  *(_QWORD *)(v4 + 32) = a1;
  v5 = type metadata accessor for OwnerSharingCircle(0);
  *(_QWORD *)(v4 + 56) = v5;
  v6 = *(_QWORD *)(v5 - 8);
  *(_QWORD *)(v4 + 64) = v6;
  *(_QWORD *)(v4 + 72) = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100B67BE8, v3, 0);
}

uint64_t sub_100B67BE8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  if (*(_BYTE *)(v0 + 120))
  {
    v1 = *(_QWORD *)(v0 + 40);
    v2 = *(_QWORD *)(v0 + 72);
    swift_bridgeObjectRetain(v1);
    swift_task_dealloc(v2);
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v1);
  }
  else
  {
    v4 = *(_QWORD *)(*(_QWORD *)(v0 + 48) + 160);
    *(_QWORD *)(v0 + 80) = v4;
    return swift_task_switch(sub_100B67C5C, v4, 0);
  }
}

uint64_t sub_100B67C5C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v2 = (_QWORD *)swift_task_alloc(v1);
  *(_QWORD *)(v0 + 88) = v2;
  v3 = sub_10001A9A8(&qword_1010EE100);
  *v2 = v0;
  v2[1] = sub_100B67CD8;
  return unsafeBlocking<A>(_:)(v0 + 16, sub_100068004, *(_QWORD *)(v0 + 80), v3);
}

uint64_t sub_100B67CD8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 80);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 88));
  swift_release();
  return swift_task_switch(sub_100B67D34, v1, 0);
}

uint64_t sub_100B67D34()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[6];
  v0[12] = v0[2];
  return swift_task_switch(sub_100B67D50, v1, 0);
}

uint64_t sub_100B67D50()
{
  _QWORD *v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;

  v1 = v0[12];
  v2 = v0[4];
  v3 = (unint64_t *)swift_task_alloc(32);
  v3[2] = v2;
  v4 = sub_10008B4C0((uint64_t (*)(char *))sub_100B864E0, v3, v1);
  swift_task_dealloc(v3);
  v5 = *(_QWORD *)(v4 + 16);
  if (v5)
  {
    v7 = v0[7];
    v6 = v0[8];
    v8 = v4 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
    v9 = *(_QWORD *)(v6 + 72);
    swift_bridgeObjectRetain(v4);
    do
    {
      v10 = v0[9];
      sub_10005972C(v8, v10, type metadata accessor for OwnerSharingCircle);
      v11 = *(_QWORD *)(v10 + *(int *)(v7 + 32));
      swift_bridgeObjectRetain(v11);
      sub_1000126B0(v10, type metadata accessor for OwnerSharingCircle);
      sub_100302F24(v11);
      v8 += v9;
      --v5;
    }
    while (v5);
    swift_bridgeObjectRelease_n(v4, 2);
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  v12 = sub_10001B664((uint64_t)_swiftEmptyArrayStorage);
  swift_bridgeObjectRelease();
  v0[3] = v12;
  v13 = (_QWORD *)swift_task_alloc(async function pointer to Sequence.asyncCompactMap<A>(_:)[1]);
  v0[13] = v13;
  v14 = sub_10001A9A8((uint64_t *)&unk_1010F7790);
  v15 = sub_100B86560();
  v16 = sub_1000193A4((unint64_t *)&unk_1011058F0, (uint64_t *)&unk_1010F7790, (const char *)&protocol conformance descriptor for Set<A>);
  *v13 = v0;
  v13[1] = sub_100B67F0C;
  return Sequence.asyncCompactMap<A>(_:)(&unk_101116578, v0[6], v14, v15, v16);
}

uint64_t sub_100B67F0C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 104);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 48);
  *(_QWORD *)(*(_QWORD *)v1 + 112) = a1;
  swift_task_dealloc(v2);
  swift_bridgeObjectRelease();
  return swift_task_switch(sub_100B67F74, v3, 0);
}

uint64_t sub_100B67F74()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v1 = *(_QWORD *)(v0 + 112);
  v2 = *(_QWORD *)(v0 + 40);
  swift_bridgeObjectRetain(v2);
  v3 = sub_100CA827C(v1);
  swift_bridgeObjectRelease();
  v4 = sub_100B67A8C(v3, v2);
  swift_bridgeObjectRelease();
  swift_task_dealloc(*(_QWORD *)(v0 + 72));
  return (*(uint64_t (**)(void *))(v0 + 8))(v4);
}

BOOL sub_100B67FEC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  _BOOL8 v8;
  uint64_t v10;

  v4 = type metadata accessor for OwnerSharingCircle(0);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  LOBYTE(a2) = static UUID.== infix(_:_:)(a1 + *(int *)(v5 + 24), a2);
  sub_10005972C(a1, (uint64_t)v7, type metadata accessor for OwnerSharingCircle);
  v8 = (a2 & 1) != 0 && v7[*(int *)(v4 + 28)] == 2;
  sub_1000126B0((uint64_t)v7, type metadata accessor for OwnerSharingCircle);
  return v8;
}

uint64_t sub_100B680BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  v4 = type metadata accessor for UUID(0);
  v3[5] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[6] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[7] = v6;
  v3[8] = swift_task_alloc((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10001A9A8((uint64_t *)&unk_1010EE160);
  v3[9] = v7;
  v3[10] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for OwnerPeerTrust(0);
  v3[11] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v3[12] = v9;
  v3[13] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100B68174, 0, 0);
}

uint64_t sub_100B68174()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 32) + 160);
  *(_QWORD *)(v0 + 112) = v1;
  return swift_task_switch(sub_100B68190, v1, 0);
}

uint64_t sub_100B68190()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v1 = v0[14];
  v3 = v0[7];
  v2 = v0[8];
  v4 = v0[5];
  v5 = v0[6];
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v5 + 16))(v2, v0[3], v4);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (v6 + 24) & ~v6;
  v8 = swift_allocObject(&unk_1010AFC00, v7 + v3, v6 | 7);
  v0[15] = v8;
  *(_QWORD *)(v8 + 16) = v1;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(v8 + v7, v2, v4);
  v9 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v10 = (_QWORD *)swift_task_alloc(v9);
  v0[16] = v10;
  *v10 = v0;
  v10[1] = sub_100B68268;
  return unsafeBlocking<A>(_:)(v0[10], sub_100B861D0, v8, v0[9]);
}

uint64_t sub_100B68268()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 128));
  swift_release();
  return swift_task_switch(sub_100B682C4, 0, 0);
}

uint64_t sub_100B682C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t (*v10)(uint64_t);

  v1 = *(_QWORD *)(v0 + 88);
  v2 = *(_QWORD *)(v0 + 80);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 96) + 48))(v2, 1, v1) == 1)
  {
    sub_100004048(v2, (uint64_t *)&unk_1010EE160);
    v3 = *(_QWORD *)(v0 + 104);
    v4 = *(_QWORD *)(v0 + 80);
    v5 = *(_QWORD *)(v0 + 64);
    **(_QWORD **)(v0 + 16) = 0;
    swift_task_dealloc(v3);
    swift_task_dealloc(v4);
    swift_task_dealloc(v5);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v7 = *(_QWORD *)(v0 + 104);
    sub_1000126EC(v2, v7, type metadata accessor for OwnerPeerTrust);
    v8 = v7 + *(int *)(v1 + 28);
    v10 = (uint64_t (*)(uint64_t))((char *)&dword_101112238 + dword_101112238);
    v9 = (_QWORD *)swift_task_alloc(unk_10111223C);
    *(_QWORD *)(v0 + 136) = v9;
    *v9 = v0;
    v9[1] = sub_100B683C0;
    return v10(v8);
  }
}

uint64_t sub_100B683C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t (*v7)();

  v5 = *(_QWORD **)v4;
  v6 = *(_QWORD *)(*(_QWORD *)v4 + 136);
  v5[18] = a1;
  v5[19] = a2;
  v5[20] = a3;
  swift_task_dealloc(v6);
  if (v3)
  {
    swift_errorRelease(v3);
    v7 = sub_100B684E4;
  }
  else
  {
    v7 = sub_100B68438;
  }
  return swift_task_switch(v7, 0, 0);
}

uint64_t sub_100B68438()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (*(_QWORD *)(v0 + 160))
  {
    v1 = *(_QWORD *)(v0 + 104);
    v2 = sub_100ACD7B4(*(_BYTE *)(v0 + 144), *(_QWORD *)(v0 + 152), *(void **)(v0 + 160));
    swift_bridgeObjectRelease();
    sub_1000126B0(v1, type metadata accessor for OwnerPeerTrust);
  }
  else
  {
    sub_1000126B0(*(_QWORD *)(v0 + 104), type metadata accessor for OwnerPeerTrust);
    v2 = 0;
  }
  v3 = *(_QWORD *)(v0 + 104);
  v4 = *(_QWORD *)(v0 + 80);
  v5 = *(_QWORD *)(v0 + 64);
  **(_QWORD **)(v0 + 16) = v2;
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100B684E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_1000126B0(*(_QWORD *)(v0 + 104), type metadata accessor for OwnerPeerTrust);
  v1 = *(_QWORD *)(v0 + 104);
  v2 = *(_QWORD *)(v0 + 80);
  v3 = *(_QWORD *)(v0 + 64);
  **(_QWORD **)(v0 + 16) = 0;
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100B68548(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  *(_QWORD *)(v4 + 328) = a2;
  *(_QWORD *)(v4 + 336) = v3;
  *(_BYTE *)(v4 + 884) = a3;
  *(_QWORD *)(v4 + 320) = a1;
  v5 = sub_10001A9A8(&qword_1010ED860);
  *(_QWORD *)(v4 + 344) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for OwnerSharingCircle(0);
  *(_QWORD *)(v4 + 352) = v6;
  v7 = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v4 + 360) = v7;
  *(_QWORD *)(v4 + 368) = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for ShareCreateUseCase.ShareCreationData(0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v4 + 376) = swift_task_alloc(v8);
  *(_QWORD *)(v4 + 384) = swift_task_alloc(v8);
  return swift_task_switch(sub_100B68604, v3, 0);
}

uint64_t sub_100B68604()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v15;

  if (*(_BYTE *)(v0 + 884) == 2 && (sub_100AB3A40() & 1) != 0)
  {
    if (qword_1010E9938 != -1)
      swift_once(&qword_1010E9938, sub_1000AFBB0);
    v1 = type metadata accessor for Logger(0);
    v2 = sub_10001A9E8(v1, (uint64_t)qword_1011B6748);
    v3 = Logger.logObject.getter(v2);
    v4 = static os_log_type_t.error.getter(v3);
    if (os_log_type_enabled(v3, v4))
    {
      v5 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "Failure on share create by underage account. Operation is not allowed.", v5, 2u);
      swift_slowDealloc(v5, -1, -1);
    }

    type metadata accessor for SPBeaconSharingError(0);
    v7 = v6;
    *(_QWORD *)(v0 + 312) = 8;
    v8 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
    v9 = sub_100006204((unint64_t *)&qword_1010EB490, (uint64_t (*)(uint64_t))type metadata accessor for SPBeaconSharingError, (uint64_t)&unk_100E21930);
    v10 = _BridgedStoredNSError.init(_:userInfo:)((_QWORD *)(v0 + 304), v0 + 312, v8, v7, v9);
    swift_willThrow(v10);
    v11 = *(_QWORD *)(v0 + 376);
    v12 = *(_QWORD *)(v0 + 368);
    v13 = *(_QWORD *)(v0 + 344);
    swift_task_dealloc(*(_QWORD *)(v0 + 384));
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v15 = (_QWORD *)swift_task_alloc(dword_1011163BC);
    *(_QWORD *)(v0 + 392) = v15;
    *v15 = v0;
    v15[1] = sub_100B687E0;
    return sub_100B67B80(*(_QWORD *)(v0 + 320), *(_QWORD *)(v0 + 328), *(_BYTE *)(v0 + 884));
  }
}

uint64_t sub_100B687E0(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 392);
  v5 = *v1;
  *(_QWORD *)(*v1 + 400) = a1;
  swift_task_dealloc(v4);
  v6 = (_QWORD *)swift_task_alloc(dword_1011164FC);
  *(_QWORD *)(v3 + 408) = v6;
  *v6 = v5;
  v6[1] = sub_100B68864;
  return sub_100B6B238(*(_QWORD *)(v3 + 376), *(_QWORD *)(v3 + 320), a1, *(_BYTE *)(v3 + 884));
}

uint64_t sub_100B68864()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 408);
  *(_QWORD *)(*v1 + 416) = v0;
  swift_task_dealloc(v3);
  v4 = *(_QWORD *)(v2 + 336);
  swift_bridgeObjectRelease();
  if (v0)
    v5 = sub_100B69828;
  else
    v5 = sub_100B688D4;
  return swift_task_switch(v5, v4, 0);
}

uint64_t sub_100B688D4()
{
  uint64_t *v0;
  uint64_t **v1;

  sub_1000126EC(v0[47], v0[48], type metadata accessor for ShareCreateUseCase.ShareCreationData);
  v1 = (uint64_t **)swift_task_alloc(dword_101116504);
  v0[53] = (uint64_t)v1;
  *v1 = v0;
  v1[1] = (uint64_t *)sub_100B68934;
  return sub_100B6CD5C(v0[48]);
}

uint64_t sub_100B68934()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 424);
  *(_QWORD *)(*v1 + 432) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_100B69EA4;
  else
    v4 = sub_100B68998;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 336), 0);
}

uint64_t sub_100B68998()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  __int128 v7;

  v1 = *(_QWORD *)(v0 + 336);
  v2 = *(_QWORD *)(*(_QWORD *)(v0 + 384) + 24);
  *(_QWORD *)(v0 + 440) = v2;
  v7 = *(_OWORD *)(v1 + 136);
  v3 = *(_QWORD *)(v1 + 136);
  v4 = sub_10001AA44((_QWORD *)(v1 + 112), v3);
  *(_OWORD *)(v0 + 40) = v7;
  v5 = sub_100018F08((_QWORD *)(v0 + 16));
  (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(v5, v4, v3);
  swift_bridgeObjectRetain(v2);
  return swift_task_switch(sub_100B68A38, 0, 0);
}

uint64_t sub_100B68A38()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v10;

  v1 = *(_QWORD *)(v0 + 440);
  v2 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v0 + 448) = v2;
  if (v2)
  {
    v3 = *(_QWORD *)(v0 + 360);
    v4 = *(_DWORD *)(v3 + 80);
    *(_DWORD *)(v0 + 872) = v4;
    *(_QWORD *)(v0 + 456) = *(_QWORD *)(v3 + 72);
    *(_QWORD *)(v0 + 464) = 0;
    v5 = *(_QWORD *)(v0 + 336);
    v6 = v1 + ((v4 + 32) & ~(unint64_t)v4);
    v7 = dword_101120684;
    swift_bridgeObjectRetain(v1);
    v8 = (_QWORD *)swift_task_alloc(v7);
    *(_QWORD *)(v0 + 472) = v8;
    *v8 = v0;
    v8[1] = sub_100B68C90;
    return sub_100DC2FB4(v6, v5 + 248, v0 + 16);
  }
  else
  {
    swift_bridgeObjectRelease();
    v10 = *(_QWORD *)(v0 + 336);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
    return swift_task_switch(sub_100B68B08, v10, 0);
  }
}

uint64_t sub_100B68B08()
{
  uint64_t v0;
  id v1;
  NSString v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t (*v16)();
  uint64_t v17;
  uint64_t v18;

  if (!*(_BYTE *)(v0 + 884))
  {
    v1 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
    v2 = String._bridgeToObjectiveC()();
    objc_msgSend(v1, "setBool:forKey:", 1, v2);

  }
  v3 = *(_QWORD *)(v0 + 384);
  v4 = *(_QWORD *)(v3 + 16);
  *(_QWORD *)(v0 + 488) = v4;
  v5 = *(_QWORD *)(v4 + 16);
  *(_QWORD *)(v0 + 496) = v5;
  if (v5)
  {
    v7 = *(_QWORD *)(v0 + 352);
    v6 = *(_QWORD *)(v0 + 360);
    v8 = *(_DWORD *)(v6 + 80);
    *(_DWORD *)(v0 + 876) = v8;
    *(_QWORD *)(v0 + 504) = *(_QWORD *)(v6 + 72);
    *(_QWORD *)(v0 + 512) = 0;
    v9 = *(_QWORD *)(v0 + 368);
    v10 = v4 + ((v8 + 32) & ~(unint64_t)v8);
    swift_bridgeObjectRetain(v4);
    sub_10005972C(v10, v9, type metadata accessor for OwnerSharingCircle);
    *(_BYTE *)(v0 + 885) = 0x201u >> (8 * *(_BYTE *)(v9 + *(int *)(v7 + 28)));
    v11 = *(_QWORD **)(v0 + 336);
    *(_DWORD *)(v0 + 880) = *(_DWORD *)(*(_QWORD *)(v0 + 352) + 20);
    v12 = v11[17];
    v13 = v11[19];
    v14 = sub_10001AA44(v11 + 14, v12);
    *(_QWORD *)(v0 + 80) = v12;
    *(_QWORD *)(v0 + 88) = v13;
    v15 = sub_100018F08((_QWORD *)(v0 + 56));
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v15, v14, v12);
    v16 = sub_100B6902C;
  }
  else
  {
    v17 = *(_QWORD *)(v0 + 336);
    v18 = *(_QWORD *)(v3 + 24);
    *(_QWORD *)(v0 + 528) = v18;
    *(_QWORD *)(v0 + 536) = *(_QWORD *)(v17 + 160);
    swift_bridgeObjectRetain(v18);
    v16 = sub_100B692D8;
  }
  return swift_task_switch(v16, 0, 0);
}

uint64_t sub_100B68C90()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 472);
  *(_QWORD *)(*(_QWORD *)v1 + 480) = v0;
  swift_task_dealloc(v2);
  if (v0)
  {
    swift_bridgeObjectRelease();
    v3 = sub_100B68DCC;
  }
  else
  {
    v3 = sub_100B68CFC;
  }
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_100B68CFC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v1 = *(_QWORD *)(v0 + 464) + 1;
  if (v1 == *(_QWORD *)(v0 + 448))
  {
    swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 440), 2);
    v2 = *(_QWORD *)(v0 + 336);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
    return swift_task_switch(sub_100B68B08, v2, 0);
  }
  else
  {
    *(_QWORD *)(v0 + 464) = v1;
    v4 = *(_QWORD *)(v0 + 336);
    v5 = *(_QWORD *)(v0 + 440)
       + ((*(unsigned __int8 *)(v0 + 872) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 872))
       + *(_QWORD *)(v0 + 456) * v1;
    v6 = (_QWORD *)swift_task_alloc(dword_101120684);
    *(_QWORD *)(v0 + 472) = v6;
    *v6 = v0;
    v6[1] = sub_100B68C90;
    return sub_100DC2FB4(v5, v4 + 248, v0 + 16);
  }
}

uint64_t sub_100B68DCC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 336);
  swift_bridgeObjectRelease();
  return swift_task_switch(sub_100B68E0C, v1, 0);
}

uint64_t sub_100B68E0C()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  _BOOL4 v7;
  uint64_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v15;

  v1 = *(unsigned __int8 *)(v0 + 884);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
  if (!v1)
    sub_100DC3068(*(_QWORD *)(v0 + 480));
  if (qword_1010E9938 != -1)
    swift_once(&qword_1010E9938, sub_1000AFBB0);
  v2 = *(_QWORD *)(v0 + 480);
  v3 = type metadata accessor for Logger(0);
  *(_QWORD *)(v0 + 728) = sub_10001A9E8(v3, (uint64_t)qword_1011B6748);
  swift_errorRetain(v2);
  v4 = swift_errorRetain(v2);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.error.getter(v5);
  v7 = os_log_type_enabled(v5, v6);
  v8 = *(_QWORD *)(v0 + 480);
  if (v7)
  {
    v9 = (uint8_t *)swift_slowAlloc(12, -1);
    v10 = swift_slowAlloc(32, -1);
    v15 = v10;
    *(_DWORD *)v9 = 136315138;
    swift_getErrorValue(v8, v0 + 256, v0 + 144);
    v11 = Error.localizedDescription.getter(*(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 160));
    *(_QWORD *)(v0 + 272) = sub_100016940(v11, v12, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 272, v0 + 280, v9 + 4, v9 + 12);
    swift_bridgeObjectRelease();
    swift_errorRelease(v8);
    swift_errorRelease(v8);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Failure on share create, server share creation: %s", v9, 0xCu);
    swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v9, -1, -1);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 480));
    swift_errorRelease(v8);
  }

  v13 = (_QWORD *)swift_task_alloc(dword_10111650C);
  *(_QWORD *)(v0 + 736) = v13;
  *v13 = v0;
  v13[1] = sub_100B6A4DC;
  return sub_100B6E210(*(_QWORD *)(v0 + 384));
}

uint64_t sub_100B6902C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = *(int *)(v0 + 880);
  v2 = *(_QWORD *)(v0 + 368);
  sub_10001AA44((_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 80));
  v3 = (_QWORD *)swift_task_alloc(dword_1010FBB04);
  *(_QWORD *)(v0 + 520) = v3;
  *v3 = v0;
  v3[1] = sub_100B6909C;
  return sub_100434AD0(v2 + v1, *(_BYTE *)(v0 + 885));
}

uint64_t sub_100B6909C(char a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *v2;
  swift_task_dealloc(*(_QWORD *)(*v2 + 520));
  if (v1)
  {
    *(_QWORD *)(v4 + 864) = v1;
    v5 = *(_QWORD *)(v4 + 336);
    v6 = sub_100B6AF70;
  }
  else
  {
    *(_BYTE *)(v4 + 886) = a1 & 1;
    v6 = sub_100B69118;
    v5 = 0;
  }
  return swift_task_switch(v6, v5, 0);
}

uint64_t sub_100B69118()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _BYTE *v6;

  if (*(_BYTE *)(v0 + 886) == 1)
  {
    v1 = *(_QWORD *)(v0 + 336);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 56));
    v2 = sub_100B691AC;
    v3 = v1;
  }
  else
  {
    v4 = sub_10006808C();
    v5 = swift_allocError(&type metadata for BeaconServiceError, v4, 0, 0);
    *v6 = 0;
    swift_willThrow(v5);
    *(_QWORD *)(v0 + 864) = v5;
    v3 = *(_QWORD *)(v0 + 336);
    v2 = sub_100B6AF70;
  }
  return swift_task_switch(v2, v3, 0);
}

uint64_t sub_100B691AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;

  sub_1000126B0(*(_QWORD *)(v0 + 368), type metadata accessor for OwnerSharingCircle);
  v1 = *(_QWORD *)(v0 + 512) + 1;
  if (v1 == *(_QWORD *)(v0 + 496))
  {
    swift_bridgeObjectRelease();
    v2 = *(_QWORD *)(v0 + 336);
    v3 = *(_QWORD *)(*(_QWORD *)(v0 + 384) + 24);
    *(_QWORD *)(v0 + 528) = v3;
    *(_QWORD *)(v0 + 536) = *(_QWORD *)(v2 + 160);
    swift_bridgeObjectRetain(v3);
    v4 = sub_100B692D8;
  }
  else
  {
    *(_QWORD *)(v0 + 512) = v1;
    v5 = *(_QWORD *)(v0 + 368);
    v6 = *(_QWORD *)(v0 + 352);
    sub_10005972C(*(_QWORD *)(v0 + 488)+ ((*(unsigned __int8 *)(v0 + 876) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 876))+ *(_QWORD *)(v0 + 504) * v1, v5, type metadata accessor for OwnerSharingCircle);
    *(_BYTE *)(v0 + 885) = 0x201u >> (8 * *(_BYTE *)(v5 + *(int *)(v6 + 28)));
    v7 = *(_QWORD **)(v0 + 336);
    *(_DWORD *)(v0 + 880) = *(_DWORD *)(*(_QWORD *)(v0 + 352) + 20);
    v8 = v7[17];
    v9 = v7[19];
    v10 = sub_10001AA44(v7 + 14, v8);
    *(_QWORD *)(v0 + 80) = v8;
    *(_QWORD *)(v0 + 88) = v9;
    v11 = sub_100018F08((_QWORD *)(v0 + 56));
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v11, v10, v8);
    v4 = sub_100B6902C;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_100B692D8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  char *v6;

  v1 = v0[42];
  v2 = v0[43];
  v3 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v2, 1, 1, v3);
  v6 = (char *)&dword_101120660 + dword_101120660;
  v4 = (_QWORD *)swift_task_alloc(unk_101120664);
  v0[68] = v4;
  *v4 = v0;
  v4[1] = sub_100B69378;
  return ((uint64_t (*)(_QWORD, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t))v6)(v0[66], v0[43], v0[67], v1 + 168, v1 + 208, v1 + 248);
}

uint64_t sub_100B69378()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  char *v6;

  v2 = *(_QWORD *)(*v1 + 544);
  v3 = *v1;
  *(_QWORD *)(v3 + 552) = v0;
  swift_task_dealloc(v2);
  sub_100004048(*(_QWORD *)(v3 + 344), &qword_1010ED860);
  if (v0)
    return swift_task_switch(sub_100B69440, 0, 0);
  swift_bridgeObjectRelease();
  v6 = (char *)&dword_101116510 + dword_101116510;
  v5 = (_QWORD *)swift_task_alloc(unk_101116514);
  *(_QWORD *)(v3 + 560) = v5;
  *v5 = v3;
  v5[1] = sub_100B694B4;
  return ((uint64_t (*)(_QWORD, _QWORD))v6)(*(_QWORD *)(v3 + 320), *(unsigned __int8 *)(v3 + 884));
}

uint64_t sub_100B69440()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t (*v3)(uint64_t, char);

  swift_errorRelease(*(_QWORD *)(v0 + 552));
  swift_bridgeObjectRelease();
  v3 = (uint64_t (*)(uint64_t, char))((char *)&dword_101116510 + dword_101116510);
  v1 = (_QWORD *)swift_task_alloc(unk_101116514);
  *(_QWORD *)(v0 + 560) = v1;
  *v1 = v0;
  v1[1] = sub_100B694B4;
  return v3(*(_QWORD *)(v0 + 320), *(_BYTE *)(v0 + 884));
}

uint64_t sub_100B694B4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 336);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 560));
  return swift_task_switch(sub_100B6950C, v1, 0);
}

uint64_t sub_100B6950C()
{
  uint64_t v0;
  uint64_t v1;

  swift_bridgeObjectRetain(*(_QWORD *)(*(_QWORD *)(v0 + 336) + 384));
  *(_QWORD *)(v0 + 568) = sub_100508C68(v1);
  swift_bridgeObjectRelease();
  return swift_task_switch(sub_100B69560, 0, 0);
}

uint64_t sub_100B69560()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;

  v1 = v0[71];
  if ((v1 & 0x8000000000000000) == 0 && (v1 & 0x4000000000000000) == 0)
  {
    v2 = *(_QWORD *)(v1 + 16);
    result = swift_retain();
    v0[72] = v2;
    if (v2)
      goto LABEL_4;
LABEL_10:
    v10 = v0[42];
    swift_release_n(v0[71], 2);
    return swift_task_switch(sub_100B69668, v10, 0);
  }
  v9 = swift_retain();
  result = _CocoaArrayWrapper.endIndex.getter(v9);
  v2 = result;
  v0[72] = result;
  if (!result)
    goto LABEL_10;
LABEL_4:
  if (v2 < 1)
  {
    __break(1u);
  }
  else
  {
    v4 = v0[71];
    v0[73] = 0;
    if ((v4 & 0xC000000000000001) != 0)
    {
      v5 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, v4);
    }
    else
    {
      v5 = *(_QWORD *)(v4 + 32);
      swift_retain();
    }
    v0[74] = v5;
    v6 = type metadata accessor for AnalyticsPublisher();
    v7 = swift_allocObject(v6, 112, 15);
    v0[75] = v7;
    swift_defaultActor_initialize(v7);
    v8 = (_QWORD *)swift_task_alloc(dword_10111D22C);
    v0[76] = v8;
    *v8 = v0;
    v8[1] = sub_100B696D8;
    return sub_100CD63AC(v5);
  }
  return result;
}

uint64_t sub_100B69668()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 376);
  v2 = *(_QWORD *)(v0 + 384);
  v3 = *(_QWORD *)(v0 + 368);
  v4 = *(_QWORD *)(v0 + 344);
  sub_1000126B0(v2, type metadata accessor for ShareCreateUseCase.ShareCreationData);
  swift_task_dealloc(v2);
  swift_task_dealloc(v1);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100B696D8()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 608));
  swift_release();
  return swift_task_switch(sub_100B69738, 0, 0);
}

uint64_t sub_100B69738()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v1 = v0[73];
  v2 = v0[72];
  swift_release();
  if (v1 + 1 == v2)
  {
    v3 = v0[42];
    swift_release_n(v0[71], 2);
    return swift_task_switch(sub_100B69668, v3, 0);
  }
  else
  {
    v5 = v0[73] + 1;
    v0[73] = v5;
    v6 = v0[71];
    if ((v6 & 0xC000000000000001) != 0)
    {
      v7 = specialized _ArrayBuffer._getElementSlowPath(_:)(v5, v6);
    }
    else
    {
      v7 = *(_QWORD *)(v6 + 8 * v5 + 32);
      swift_retain();
    }
    v0[74] = v7;
    v8 = type metadata accessor for AnalyticsPublisher();
    v9 = swift_allocObject(v8, 112, 15);
    v0[75] = v9;
    swift_defaultActor_initialize(v9);
    v10 = (_QWORD *)swift_task_alloc(dword_10111D22C);
    v0[76] = v10;
    *v10 = v0;
    v10[1] = sub_100B696D8;
    return sub_100CD63AC(v7);
  }
}

uint64_t sub_100B69828()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  if (qword_1010E9938 != -1)
    swift_once(&qword_1010E9938, sub_1000AFBB0);
  v1 = v0[52];
  v2 = type metadata accessor for Logger(0);
  sub_10001A9E8(v2, (uint64_t)qword_1011B6748);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter(v4);
  v6 = os_log_type_enabled(v4, v5);
  v7 = v0[52];
  if (v6)
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = swift_slowAlloc(32, -1);
    v15 = v9;
    *(_DWORD *)v8 = 136315138;
    swift_getErrorValue(v7, v0 + 35, v0 + 15);
    v10 = Error.localizedDescription.getter(v0[16], v0[17]);
    v0[33] = sub_100016940(v10, v11, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 33, v0 + 34, v8 + 4, v8 + 12);
    swift_bridgeObjectRelease();
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Failure on share create, data preparing: %s", v8, 0xCu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }
  else
  {
    swift_errorRelease(v0[52]);
    swift_errorRelease(v7);
  }

  v12 = v0[52];
  swift_bridgeObjectRetain(*(_QWORD *)(v0[42] + 384));
  v0[77] = sub_100508C68(v13);
  swift_bridgeObjectRelease();
  swift_errorRetain(v12);
  return swift_task_switch(sub_100B69A3C, 0, 0);
}

uint64_t sub_100B69A3C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t);

  v1 = v0[77];
  if ((v1 & 0x8000000000000000) == 0 && (v1 & 0x4000000000000000) == 0)
  {
    v2 = *(_QWORD *)(v1 + 16);
    result = swift_retain();
    v0[78] = v2;
    if (v2)
      goto LABEL_4;
LABEL_10:
    v8 = v0[52];
    v9 = v0[42];
    swift_release();
    swift_errorRelease(v8);
    swift_release();
    return swift_task_switch(sub_100B69B60, v9, 0);
  }
  v7 = swift_retain();
  result = _CocoaArrayWrapper.endIndex.getter(v7);
  v2 = result;
  v0[78] = result;
  if (!result)
    goto LABEL_10;
LABEL_4:
  if (v2 < 1)
  {
    __break(1u);
  }
  else
  {
    v4 = v0[77];
    v0[79] = 0;
    if ((v4 & 0xC000000000000001) != 0)
    {
      v5 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, v4);
    }
    else
    {
      v5 = *(_QWORD *)(v4 + 32);
      swift_retain();
    }
    v0[80] = v5;
    swift_errorRetain(v0[52]);
    v10 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_10111D598 + dword_10111D598);
    v6 = (_QWORD *)swift_task_alloc(unk_10111D59C);
    v0[81] = v6;
    *v6 = v0;
    v6[1] = sub_100B69C58;
    return v10(v5, v0[52]);
  }
  return result;
}

uint64_t sub_100B69B60()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = *(_QWORD *)(v0 + 416);
  *(_QWORD *)(v0 + 240) = v1;
  swift_errorRetain(v1);
  v2 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
  type metadata accessor for SPBeaconSharingError(0);
  v4 = swift_dynamicCast(v0 + 296, v0 + 240, v2, v3, 6);
  v5 = *(_QWORD *)(v0 + 416);
  if (v4)
  {

    swift_willThrow(v6);
  }
  else
  {
    v7 = sub_100067D98();
    v8 = swift_allocError(&type metadata for BeaconSharingFlowError, v7, 0, 0);
    *v9 = 0;
    swift_willThrow(v8);
    swift_errorRelease(v5);
  }
  v10 = *(_QWORD *)(v0 + 376);
  v11 = *(_QWORD *)(v0 + 368);
  v12 = *(_QWORD *)(v0 + 344);
  swift_task_dealloc(*(_QWORD *)(v0 + 384));
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100B69C58()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v1 + 648));
  if (v0)
  {
    swift_errorRelease(v0);
    v2 = sub_100B88564;
  }
  else
  {
    v2 = sub_100B69CC4;
  }
  return swift_task_switch(v2, 0, 0);
}

uint64_t sub_100B69CC4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  swift_errorRelease(v0[52]);
  v1 = type metadata accessor for AnalyticsPublisher();
  v2 = swift_allocObject(v1, 112, 15);
  v0[82] = v2;
  swift_defaultActor_initialize(v2);
  v3 = (_QWORD *)swift_task_alloc(dword_10111D22C);
  v0[83] = v3;
  *v3 = v0;
  v3[1] = sub_100B69D38;
  return sub_100CD63AC(v0[80]);
}

uint64_t sub_100B69D38()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 664));
  swift_release();
  return swift_task_switch(sub_100B69D98, 0, 0);
}

uint64_t sub_100B69D98()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t (*v10)(uint64_t, uint64_t);

  v1 = v0[79];
  v2 = v0[78];
  swift_release();
  if (v1 + 1 == v2)
  {
    v3 = v0[52];
    v4 = v0[42];
    swift_release();
    swift_errorRelease(v3);
    swift_release();
    return swift_task_switch(sub_100B69B60, v4, 0);
  }
  else
  {
    v6 = v0[79] + 1;
    v0[79] = v6;
    v7 = v0[77];
    if ((v7 & 0xC000000000000001) != 0)
    {
      v8 = specialized _ArrayBuffer._getElementSlowPath(_:)(v6, v7);
    }
    else
    {
      v8 = *(_QWORD *)(v7 + 8 * v6 + 32);
      swift_retain();
    }
    v0[80] = v8;
    swift_errorRetain(v0[52]);
    v10 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_10111D598 + dword_10111D598);
    v9 = (_QWORD *)swift_task_alloc(unk_10111D59C);
    v0[81] = v9;
    *v9 = v0;
    v9[1] = sub_100B69C58;
    return v10(v8, v0[52]);
  }
}

uint64_t sub_100B69EA4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  if (qword_1010E9938 != -1)
    swift_once(&qword_1010E9938, sub_1000AFBB0);
  v1 = v0[54];
  v2 = type metadata accessor for Logger(0);
  sub_10001A9E8(v2, (uint64_t)qword_1011B6748);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter(v4);
  v6 = os_log_type_enabled(v4, v5);
  v7 = v0[54];
  if (v6)
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = swift_slowAlloc(32, -1);
    v15 = v9;
    *(_DWORD *)v8 = 136315138;
    swift_getErrorValue(v7, v0 + 28, v0 + 24);
    v10 = Error.localizedDescription.getter(v0[25], v0[26]);
    v0[27] = sub_100016940(v10, v11, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 27, v0 + 28, v8 + 4, v8 + 12);
    swift_bridgeObjectRelease();
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Failure on share create, iCloud data update: %s", v8, 0xCu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }
  else
  {
    swift_errorRelease(v0[54]);
    swift_errorRelease(v7);
  }

  v12 = v0[54];
  swift_bridgeObjectRetain(*(_QWORD *)(v0[42] + 384));
  v0[84] = sub_100508C68(v13);
  swift_bridgeObjectRelease();
  swift_errorRetain(v12);
  return swift_task_switch(sub_100B6A0B8, 0, 0);
}

uint64_t sub_100B6A0B8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t);

  v1 = v0[84];
  if ((v1 & 0x8000000000000000) == 0 && (v1 & 0x4000000000000000) == 0)
  {
    v2 = *(_QWORD *)(v1 + 16);
    result = swift_retain();
    v0[85] = v2;
    if (v2)
      goto LABEL_4;
LABEL_10:
    v8 = v0[54];
    v9 = v0[42];
    swift_release();
    swift_errorRelease(v8);
    swift_release();
    return swift_task_switch(sub_100B6A1DC, v9, 0);
  }
  v7 = swift_retain();
  result = _CocoaArrayWrapper.endIndex.getter(v7);
  v2 = result;
  v0[85] = result;
  if (!result)
    goto LABEL_10;
LABEL_4:
  if (v2 < 1)
  {
    __break(1u);
  }
  else
  {
    v4 = v0[84];
    v0[86] = 0;
    if ((v4 & 0xC000000000000001) != 0)
    {
      v5 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, v4);
    }
    else
    {
      v5 = *(_QWORD *)(v4 + 32);
      swift_retain();
    }
    v0[87] = v5;
    swift_errorRetain(v0[54]);
    v10 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_10111D598 + dword_10111D598);
    v6 = (_QWORD *)swift_task_alloc(unk_10111D59C);
    v0[88] = v6;
    *v6 = v0;
    v6[1] = sub_100B6A290;
    return v10(v5, v0[54]);
  }
  return result;
}

uint64_t sub_100B6A1DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(_QWORD *)(v0 + 432);
  v2 = *(_QWORD *)(v0 + 384);
  v3 = sub_100067D98();
  v4 = swift_allocError(&type metadata for BeaconSharingFlowError, v3, 0, 0);
  *v5 = 1;
  swift_willThrow(v4);
  swift_errorRelease(v1);
  sub_1000126B0(v2, type metadata accessor for ShareCreateUseCase.ShareCreationData);
  v6 = *(_QWORD *)(v0 + 376);
  v7 = *(_QWORD *)(v0 + 368);
  v8 = *(_QWORD *)(v0 + 344);
  swift_task_dealloc(*(_QWORD *)(v0 + 384));
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100B6A290()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v1 + 704));
  if (v0)
  {
    swift_errorRelease(v0);
    v2 = sub_100B88568;
  }
  else
  {
    v2 = sub_100B6A2FC;
  }
  return swift_task_switch(v2, 0, 0);
}

uint64_t sub_100B6A2FC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  swift_errorRelease(v0[54]);
  v1 = type metadata accessor for AnalyticsPublisher();
  v2 = swift_allocObject(v1, 112, 15);
  v0[89] = v2;
  swift_defaultActor_initialize(v2);
  v3 = (_QWORD *)swift_task_alloc(dword_10111D22C);
  v0[90] = v3;
  *v3 = v0;
  v3[1] = sub_100B6A370;
  return sub_100CD63AC(v0[87]);
}

uint64_t sub_100B6A370()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 720));
  swift_release();
  return swift_task_switch(sub_100B6A3D0, 0, 0);
}

uint64_t sub_100B6A3D0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t (*v10)(uint64_t, uint64_t);

  v1 = v0[86];
  v2 = v0[85];
  swift_release();
  if (v1 + 1 == v2)
  {
    v3 = v0[54];
    v4 = v0[42];
    swift_release();
    swift_errorRelease(v3);
    swift_release();
    return swift_task_switch(sub_100B6A1DC, v4, 0);
  }
  else
  {
    v6 = v0[86] + 1;
    v0[86] = v6;
    v7 = v0[84];
    if ((v7 & 0xC000000000000001) != 0)
    {
      v8 = specialized _ArrayBuffer._getElementSlowPath(_:)(v6, v7);
    }
    else
    {
      v8 = *(_QWORD *)(v7 + 8 * v6 + 32);
      swift_retain();
    }
    v0[87] = v8;
    swift_errorRetain(v0[54]);
    v10 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_10111D598 + dword_10111D598);
    v9 = (_QWORD *)swift_task_alloc(unk_10111D59C);
    v0[88] = v9;
    *v9 = v0;
    v9[1] = sub_100B6A290;
    return v10(v8, v0[54]);
  }
}

uint64_t sub_100B6A4DC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 736);
  *(_QWORD *)(*v1 + 744) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_100B6A9C4;
  else
    v4 = sub_100B6A540;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 336), 0);
}

uint64_t sub_100B6A540()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[60];
  swift_bridgeObjectRetain(*(_QWORD *)(v0[42] + 384));
  v0[94] = sub_100508C68(v2);
  swift_bridgeObjectRelease();
  swift_errorRetain(v1);
  return swift_task_switch(sub_100B6A5A0, 0, 0);
}

uint64_t sub_100B6A5A0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t);

  v1 = v0[94];
  if ((v1 & 0x8000000000000000) == 0 && (v1 & 0x4000000000000000) == 0)
  {
    v2 = *(_QWORD *)(v1 + 16);
    result = swift_retain();
    v0[95] = v2;
    if (v2)
      goto LABEL_4;
LABEL_10:
    v8 = v0[60];
    v9 = v0[42];
    swift_release();
    swift_errorRelease(v8);
    swift_release();
    return swift_task_switch(sub_100B6A6C4, v9, 0);
  }
  v7 = swift_retain();
  result = _CocoaArrayWrapper.endIndex.getter(v7);
  v2 = result;
  v0[95] = result;
  if (!result)
    goto LABEL_10;
LABEL_4:
  if (v2 < 1)
  {
    __break(1u);
  }
  else
  {
    v4 = v0[94];
    v0[96] = 0;
    if ((v4 & 0xC000000000000001) != 0)
    {
      v5 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, v4);
    }
    else
    {
      v5 = *(_QWORD *)(v4 + 32);
      swift_retain();
    }
    v0[97] = v5;
    swift_errorRetain(v0[60]);
    v10 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_10111D598 + dword_10111D598);
    v6 = (_QWORD *)swift_task_alloc(unk_10111D59C);
    v0[98] = v6;
    *v6 = v0;
    v6[1] = sub_100B6A778;
    return v10(v5, v0[60]);
  }
  return result;
}

uint64_t sub_100B6A6C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(_QWORD *)(v0 + 480);
  v2 = *(_QWORD *)(v0 + 384);
  v3 = sub_100067D98();
  v4 = swift_allocError(&type metadata for BeaconSharingFlowError, v3, 0, 0);
  *v5 = 2;
  swift_willThrow(v4);
  swift_errorRelease(v1);
  sub_1000126B0(v2, type metadata accessor for ShareCreateUseCase.ShareCreationData);
  v6 = *(_QWORD *)(v0 + 376);
  v7 = *(_QWORD *)(v0 + 368);
  v8 = *(_QWORD *)(v0 + 344);
  swift_task_dealloc(*(_QWORD *)(v0 + 384));
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100B6A778()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v1 + 784));
  if (v0)
  {
    swift_errorRelease(v0);
    v2 = sub_100B8856C;
  }
  else
  {
    v2 = sub_100B6A7E4;
  }
  return swift_task_switch(v2, 0, 0);
}

uint64_t sub_100B6A7E4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  swift_errorRelease(v0[60]);
  v1 = type metadata accessor for AnalyticsPublisher();
  v2 = swift_allocObject(v1, 112, 15);
  v0[99] = v2;
  swift_defaultActor_initialize(v2);
  v3 = (_QWORD *)swift_task_alloc(dword_10111D22C);
  v0[100] = v3;
  *v3 = v0;
  v3[1] = sub_100B6A858;
  return sub_100CD63AC(v0[97]);
}

uint64_t sub_100B6A858()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 800));
  swift_release();
  return swift_task_switch(sub_100B6A8B8, 0, 0);
}

uint64_t sub_100B6A8B8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t (*v10)(uint64_t, uint64_t);

  v1 = v0[96];
  v2 = v0[95];
  swift_release();
  if (v1 + 1 == v2)
  {
    v3 = v0[60];
    v4 = v0[42];
    swift_release();
    swift_errorRelease(v3);
    swift_release();
    return swift_task_switch(sub_100B6A6C4, v4, 0);
  }
  else
  {
    v6 = v0[96] + 1;
    v0[96] = v6;
    v7 = v0[94];
    if ((v7 & 0xC000000000000001) != 0)
    {
      v8 = specialized _ArrayBuffer._getElementSlowPath(_:)(v6, v7);
    }
    else
    {
      v8 = *(_QWORD *)(v7 + 8 * v6 + 32);
      swift_retain();
    }
    v0[97] = v8;
    swift_errorRetain(v0[60]);
    v10 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_10111D598 + dword_10111D598);
    v9 = (_QWORD *)swift_task_alloc(unk_10111D59C);
    v0[98] = v9;
    *v9 = v0;
    v9[1] = sub_100B6A778;
    return v10(v8, v0[60]);
  }
}

uint64_t sub_100B6A9C4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v1 = v0[93];
  swift_errorRetain(v1);
  v2 = swift_errorRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = v0[93];
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    v14 = v7;
    *(_DWORD *)v6 = 136315138;
    swift_getErrorValue(v5, v0 + 29, v0 + 21);
    v8 = Error.localizedDescription.getter(v0[22], v0[23]);
    v0[31] = sub_100016940(v8, v9, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 31, v0 + 32, v6 + 4, v6 + 12);
    swift_bridgeObjectRelease();
    swift_errorRelease(v5);
    swift_errorRelease(v5);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Failure on share create, iCloud data rollback on share creation failure: %s", v6, 0xCu);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);
  }
  else
  {
    v10 = v0[93];
    swift_errorRelease(v10);
    swift_errorRelease(v10);
  }

  v11 = v0[93];
  swift_bridgeObjectRetain(*(_QWORD *)(v0[42] + 384));
  v0[101] = sub_100508C68(v12);
  swift_bridgeObjectRelease();
  swift_errorRetain(v11);
  return swift_task_switch(sub_100B6AB98, 0, 0);
}

uint64_t sub_100B6AB98()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t);

  v1 = v0[101];
  if ((v1 & 0x8000000000000000) == 0 && (v1 & 0x4000000000000000) == 0)
  {
    v2 = *(_QWORD *)(v1 + 16);
    result = swift_retain();
    v0[102] = v2;
    if (v2)
      goto LABEL_4;
LABEL_10:
    v8 = v0[93];
    v9 = v0[42];
    swift_release();
    swift_errorRelease(v8);
    swift_release();
    return swift_task_switch(sub_100B6ACBC, v9, 0);
  }
  v7 = swift_retain();
  result = _CocoaArrayWrapper.endIndex.getter(v7);
  v2 = result;
  v0[102] = result;
  if (!result)
    goto LABEL_10;
LABEL_4:
  if (v2 < 1)
  {
    __break(1u);
  }
  else
  {
    v4 = v0[101];
    v0[103] = 0;
    if ((v4 & 0xC000000000000001) != 0)
    {
      v5 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, v4);
    }
    else
    {
      v5 = *(_QWORD *)(v4 + 32);
      swift_retain();
    }
    v0[104] = v5;
    swift_errorRetain(v0[93]);
    v10 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_10111D598 + dword_10111D598);
    v6 = (_QWORD *)swift_task_alloc(unk_10111D59C);
    v0[105] = v6;
    *v6 = v0;
    v6[1] = sub_100B6AD24;
    return v10(v5, v0[93]);
  }
  return result;
}

uint64_t sub_100B6ACBC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  swift_errorRelease(v0[93]);
  v1 = v0[60];
  swift_bridgeObjectRetain(*(_QWORD *)(v0[42] + 384));
  v0[94] = sub_100508C68(v2);
  swift_bridgeObjectRelease();
  swift_errorRetain(v1);
  return swift_task_switch(sub_100B6A5A0, 0, 0);
}

uint64_t sub_100B6AD24()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v1 + 840));
  if (v0)
  {
    swift_errorRelease(v0);
    v2 = sub_100B88570;
  }
  else
  {
    v2 = sub_100B6AD90;
  }
  return swift_task_switch(v2, 0, 0);
}

uint64_t sub_100B6AD90()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  swift_errorRelease(v0[93]);
  v1 = type metadata accessor for AnalyticsPublisher();
  v2 = swift_allocObject(v1, 112, 15);
  v0[106] = v2;
  swift_defaultActor_initialize(v2);
  v3 = (_QWORD *)swift_task_alloc(dword_10111D22C);
  v0[107] = v3;
  *v3 = v0;
  v3[1] = sub_100B6AE04;
  return sub_100CD63AC(v0[104]);
}

uint64_t sub_100B6AE04()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 856));
  swift_release();
  return swift_task_switch(sub_100B6AE64, 0, 0);
}

uint64_t sub_100B6AE64()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t (*v10)(uint64_t, uint64_t);

  v1 = v0[103];
  v2 = v0[102];
  swift_release();
  if (v1 + 1 == v2)
  {
    v3 = v0[93];
    v4 = v0[42];
    swift_release();
    swift_errorRelease(v3);
    swift_release();
    return swift_task_switch(sub_100B6ACBC, v4, 0);
  }
  else
  {
    v6 = v0[103] + 1;
    v0[103] = v6;
    v7 = v0[101];
    if ((v7 & 0xC000000000000001) != 0)
    {
      v8 = specialized _ArrayBuffer._getElementSlowPath(_:)(v6, v7);
    }
    else
    {
      v8 = *(_QWORD *)(v7 + 8 * v6 + 32);
      swift_retain();
    }
    v0[104] = v8;
    swift_errorRetain(v0[93]);
    v10 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_10111D598 + dword_10111D598);
    v9 = (_QWORD *)swift_task_alloc(unk_10111D59C);
    v0[105] = v9;
    *v9 = v0;
    v9[1] = sub_100B6AD24;
    return v10(v8, v0[93]);
  }
}

uint64_t sub_100B6AF70()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)();
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v25;

  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 56));
  if (qword_1010E9938 != -1)
    swift_once(&qword_1010E9938, sub_1000AFBB0);
  v1 = *(_QWORD *)(v0 + 864);
  v2 = type metadata accessor for Logger(0);
  sub_10001A9E8(v2, (uint64_t)qword_1011B6748);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter(v4);
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 864);
  v8 = *(_QWORD *)(v0 + 368);
  if (v6)
  {
    v9 = swift_slowAlloc(12, -1);
    v10 = swift_slowAlloc(32, -1);
    v25 = v10;
    *(_DWORD *)v9 = 136315138;
    swift_getErrorValue(v7, v0 + 288, v0 + 96);
    v11 = Error.localizedDescription.getter(*(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 112));
    *(_QWORD *)(v9 + 4) = sub_100016940(v11, v12, &v25);
    swift_bridgeObjectRelease();
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Failure on share create, server share deletion: %s", (uint8_t *)v9, 0xCu);
    swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v9, -1, -1);

  }
  else
  {

    swift_errorRelease(v7);
    swift_errorRelease(v7);
  }
  swift_errorRelease(v7);
  sub_1000126B0(v8, type metadata accessor for OwnerSharingCircle);
  v13 = *(_QWORD *)(v0 + 512) + 1;
  if (v13 == *(_QWORD *)(v0 + 496))
  {
    swift_bridgeObjectRelease();
    v14 = *(_QWORD *)(v0 + 336);
    v15 = *(_QWORD *)(*(_QWORD *)(v0 + 384) + 24);
    *(_QWORD *)(v0 + 528) = v15;
    *(_QWORD *)(v0 + 536) = *(_QWORD *)(v14 + 160);
    swift_bridgeObjectRetain(v15);
    v16 = sub_100B692D8;
  }
  else
  {
    *(_QWORD *)(v0 + 512) = v13;
    v17 = *(_QWORD *)(v0 + 368);
    v18 = *(_QWORD *)(v0 + 352);
    sub_10005972C(*(_QWORD *)(v0 + 488)+ ((*(unsigned __int8 *)(v0 + 876) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 876))+ *(_QWORD *)(v0 + 504) * v13, v17, type metadata accessor for OwnerSharingCircle);
    *(_BYTE *)(v0 + 885) = 0x201u >> (8 * *(_BYTE *)(v17 + *(int *)(v18 + 28)));
    v19 = *(_QWORD **)(v0 + 336);
    *(_DWORD *)(v0 + 880) = *(_DWORD *)(*(_QWORD *)(v0 + 352) + 20);
    v20 = v19[17];
    v21 = v19[19];
    v22 = sub_10001AA44(v19 + 14, v20);
    *(_QWORD *)(v0 + 80) = v20;
    *(_QWORD *)(v0 + 88) = v21;
    v23 = sub_100018F08((_QWORD *)(v0 + 56));
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v23, v22, v20);
    v16 = sub_100B6902C;
  }
  return swift_task_switch(v16, 0, 0);
}

uint64_t sub_100B6B238(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  *(_BYTE *)(v5 + 550) = a4;
  *(_QWORD *)(v5 + 136) = a3;
  *(_QWORD *)(v5 + 144) = v4;
  *(_QWORD *)(v5 + 120) = a1;
  *(_QWORD *)(v5 + 128) = a2;
  v6 = type metadata accessor for OwnerSharingCircle(0);
  *(_QWORD *)(v5 + 152) = v6;
  v7 = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v5 + 160) = v7;
  *(_QWORD *)(v5 + 168) = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for OwnerPeerTrust(0);
  *(_QWORD *)(v5 + 176) = v8;
  v9 = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(v5 + 184) = v9;
  *(_QWORD *)(v5 + 192) = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10001A9A8((uint64_t *)&unk_101105880);
  *(_QWORD *)(v5 + 200) = v10;
  *(_QWORD *)(v5 + 208) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for BeaconNamingRecord(0);
  *(_QWORD *)(v5 + 216) = v11;
  v12 = *(_QWORD *)(v11 - 8);
  *(_QWORD *)(v5 + 224) = v12;
  *(_QWORD *)(v5 + 232) = swift_task_alloc((*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for UUID(0);
  *(_QWORD *)(v5 + 240) = v13;
  v14 = *(_QWORD *)(v13 - 8);
  *(_QWORD *)(v5 + 248) = v14;
  v15 = *(_QWORD *)(v14 + 64);
  *(_QWORD *)(v5 + 256) = v15;
  v16 = (v15 + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v5 + 264) = swift_task_alloc(v16);
  *(_QWORD *)(v5 + 272) = swift_task_alloc(v16);
  *(_QWORD *)(v5 + 280) = swift_task_alloc(v16);
  *(_QWORD *)(v5 + 288) = swift_task_alloc(v16);
  v17 = sub_10001A9A8((uint64_t *)&unk_1010F47C0);
  *(_QWORD *)(v5 + 296) = v17;
  *(_QWORD *)(v5 + 304) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v17 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for OwnedBeaconRecord(0);
  *(_QWORD *)(v5 + 312) = v18;
  v19 = *(_QWORD *)(v18 - 8);
  *(_QWORD *)(v5 + 320) = v19;
  *(_QWORD *)(v5 + 328) = swift_task_alloc((*(_QWORD *)(v19 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100B6B3BC, v4, 0);
}

uint64_t sub_100B6B3BC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 144) + 160);
  *(_QWORD *)(v0 + 336) = v1;
  return swift_task_switch(sub_100B6B3D8, v1, 0);
}

uint64_t sub_100B6B3D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  _QWORD *v13;

  v1 = *(_QWORD *)(v0 + 336);
  v2 = *(_QWORD *)(v0 + 288);
  v4 = *(_QWORD *)(v0 + 248);
  v3 = *(_QWORD *)(v0 + 256);
  v5 = *(_QWORD *)(v0 + 240);
  v6 = *(_QWORD *)(v0 + 128);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  *(_QWORD *)(v0 + 344) = v7;
  v7(v2, v6, v5);
  LODWORD(v8) = *(_DWORD *)(v4 + 80);
  *(_DWORD *)(v0 + 544) = v8;
  v8 = v8;
  v9 = (v8 + 24) & ~v8;
  v10 = swift_allocObject(&unk_1010AFB38, v9 + v3, v8 | 7);
  *(_QWORD *)(v0 + 352) = v10;
  *(_QWORD *)(v10 + 16) = v1;
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32);
  *(_QWORD *)(v0 + 360) = v11;
  v11(v10 + v9, v2, v5);
  v12 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v13 = (_QWORD *)swift_task_alloc(v12);
  *(_QWORD *)(v0 + 368) = v13;
  *v13 = v0;
  v13[1] = sub_100B6B4C4;
  return unsafeBlocking<A>(_:)(*(_QWORD *)(v0 + 304), sub_100B862A8, v10, *(_QWORD *)(v0 + 296));
}

uint64_t sub_100B6B4C4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 144);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 368));
  swift_release();
  return swift_task_switch(sub_100B6B528, v1, 0);
}

uint64_t sub_100B6B528()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  v1 = *(_QWORD *)(v0 + 304);
  if ((*(unsigned int (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 320) + 48))(v1, 1, *(_QWORD *)(v0 + 312)) == 1)
  {
    sub_100004048(v1, (uint64_t *)&unk_1010F47C0);
    type metadata accessor for SPBeaconSharingError(0);
    v3 = v2;
    *(_QWORD *)(v0 + 24) = 0;
    v4 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
    v5 = sub_100006204((unint64_t *)&qword_1010EB490, (uint64_t (*)(uint64_t))type metadata accessor for SPBeaconSharingError, (uint64_t)&unk_100E21930);
    v6 = _BridgedStoredNSError.init(_:userInfo:)((_QWORD *)(v0 + 16), v0 + 24, v4, v3, v5);
    swift_willThrow(v6);
    v7 = *(_QWORD *)(v0 + 304);
    v9 = *(_QWORD *)(v0 + 280);
    v8 = *(_QWORD *)(v0 + 288);
    v11 = *(_QWORD *)(v0 + 264);
    v10 = *(_QWORD *)(v0 + 272);
    v12 = *(_QWORD *)(v0 + 232);
    v13 = *(_QWORD *)(v0 + 208);
    v14 = *(_QWORD *)(v0 + 192);
    v17 = *(_QWORD *)(v0 + 168);
    swift_task_dealloc(*(_QWORD *)(v0 + 328));
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v17);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v16 = *(_QWORD *)(v0 + 336);
    sub_1000126EC(v1, *(_QWORD *)(v0 + 328), type metadata accessor for OwnedBeaconRecord);
    return swift_task_switch(sub_100B6B6C0, v16, 0);
  }
}

uint64_t sub_100B6B6C0()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 360);
  v2 = *(unsigned __int8 *)(v0 + 544);
  v3 = *(_QWORD *)(v0 + 336);
  v4 = *(_QWORD *)(v0 + 288);
  v5 = *(_QWORD *)(v0 + 240);
  v6 = (v2 + 24) & ~v2;
  v7 = v6 + *(_QWORD *)(v0 + 256);
  v8 = v2 | 7;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v0 + 344))(v4, *(_QWORD *)(v0 + 128), v5);
  v9 = swift_allocObject(&unk_1010AFB60, v7, v8);
  *(_QWORD *)(v0 + 376) = v9;
  *(_QWORD *)(v9 + 16) = v3;
  v1(v9 + v6, v4, v5);
  v10 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v11 = (_QWORD *)swift_task_alloc(v10);
  *(_QWORD *)(v0 + 384) = v11;
  *v11 = v0;
  v11[1] = sub_100B6B7A8;
  return unsafeBlocking<A>(_:)(*(_QWORD *)(v0 + 208), sub_100B862C0, v9, *(_QWORD *)(v0 + 200));
}

uint64_t sub_100B6B7A8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 144);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 384));
  swift_release();
  return swift_task_switch(sub_100B6B808, v1, 0);
}

uint64_t sub_100B6B808()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v1 = *(_QWORD *)(v0 + 208);
  if ((*(unsigned int (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 224) + 48))(v1, 1, *(_QWORD *)(v0 + 216)) == 1)
  {
    sub_1000126B0(*(_QWORD *)(v0 + 328), type metadata accessor for OwnedBeaconRecord);
    sub_100004048(v1, (uint64_t *)&unk_101105880);
    type metadata accessor for SPBeaconSharingError(0);
    v3 = v2;
    *(_QWORD *)(v0 + 24) = 0;
    v4 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
    v5 = sub_100006204((unint64_t *)&qword_1010EB490, (uint64_t (*)(uint64_t))type metadata accessor for SPBeaconSharingError, (uint64_t)&unk_100E21930);
    v6 = _BridgedStoredNSError.init(_:userInfo:)((_QWORD *)(v0 + 16), v0 + 24, v4, v3, v5);
    swift_willThrow(v6);
    v7 = *(_QWORD *)(v0 + 304);
    v9 = *(_QWORD *)(v0 + 280);
    v8 = *(_QWORD *)(v0 + 288);
    v11 = *(_QWORD *)(v0 + 264);
    v10 = *(_QWORD *)(v0 + 272);
    v12 = *(_QWORD *)(v0 + 232);
    v13 = *(_QWORD *)(v0 + 208);
    v14 = *(_QWORD *)(v0 + 192);
    v24 = *(_QWORD *)(v0 + 168);
    swift_task_dealloc(*(_QWORD *)(v0 + 328));
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v24);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v16 = *(_QWORD *)(v0 + 136);
    v17 = *(_QWORD *)(v0 + 144);
    v18 = *(_BYTE *)(v0 + 550);
    v19 = *(_QWORD *)(v0 + 128);
    sub_1000126EC(v1, *(_QWORD *)(v0 + 232), type metadata accessor for BeaconNamingRecord);
    *(_QWORD *)(v0 + 32) = v16;
    v20 = swift_task_alloc(48);
    *(_QWORD *)(v0 + 392) = v20;
    *(_BYTE *)(v20 + 16) = v18;
    *(_QWORD *)(v20 + 24) = v17;
    *(_QWORD *)(v20 + 32) = v19;
    v21 = (_QWORD *)swift_task_alloc(async function pointer to Sequence.asyncCompactMap<A>(_:)[1]);
    *(_QWORD *)(v0 + 400) = v21;
    v22 = sub_10001A9A8(&qword_101116538);
    v23 = sub_1000193A4(&qword_101116540, &qword_101116538, (const char *)&protocol conformance descriptor for Set<A>);
    *v21 = v0;
    v21[1] = sub_100B6BA38;
    return Sequence.asyncCompactMap<A>(_:)(&unk_101116530, v20, v22, *(_QWORD *)(v0 + 176), v23);
  }
}

uint64_t sub_100B6BA38(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 400);
  v3[51] = a1;
  v3[52] = v1;
  swift_task_dealloc(v4);
  v5 = v3[49];
  v6 = v3[18];
  swift_task_dealloc(v5);
  if (v1)
    v7 = sub_100B6CC78;
  else
    v7 = sub_100B6BAB0;
  return swift_task_switch(v7, v6, 0);
}

uint64_t sub_100B6BAB0()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v0[5] = v0[51];
  v1 = (_QWORD *)swift_task_alloc(async function pointer to Sequence.asyncFilter(_:)[1]);
  v0[53] = v1;
  v2 = sub_10001A9A8(&qword_1010EC918);
  v3 = sub_1000193A4(&qword_1010FA348, &qword_1010EC918, (const char *)&protocol conformance descriptor for [A]);
  *v1 = v0;
  v1[1] = sub_100B6BB50;
  return Sequence.asyncFilter(_:)(&unk_101116550, v0[18], v2, v3);
}

uint64_t sub_100B6BB50(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 424);
  v5 = *(_QWORD *)(*v2 + 336);
  *(_QWORD *)(v3 + 432) = a1;
  *(_QWORD *)(v3 + 440) = v1;
  swift_task_dealloc(v4);
  return swift_task_switch(sub_100B6BBB0, v5, 0);
}

uint64_t sub_100B6BBB0()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;

  v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 360);
  v2 = *(unsigned __int8 *)(v0 + 544);
  v3 = *(_QWORD *)(v0 + 336);
  v4 = *(_QWORD *)(v0 + 288);
  v5 = *(_QWORD *)(v0 + 256);
  v6 = *(_QWORD *)(v0 + 240);
  v7 = v2 | 7;
  v8 = (v2 + 24) & ~v2;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v0 + 344))(v4, *(_QWORD *)(v0 + 128), v6);
  v9 = (v5 + v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  v10 = swift_allocObject(&unk_1010AFB88, v9 + 8, v7);
  *(_QWORD *)(v0 + 448) = v10;
  *(_QWORD *)(v10 + 16) = v3;
  v1(v10 + v8, v4, v6);
  *(_QWORD *)(v10 + v9) = 0;
  v11 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v12 = (_QWORD *)swift_task_alloc(v11);
  *(_QWORD *)(v0 + 456) = v12;
  v13 = sub_10001A9A8(&qword_1010EE100);
  *v12 = v0;
  v12[1] = sub_100B6BCB8;
  return unsafeBlocking<A>(_:)(v0 + 48, sub_1000DAC7C, v10, v13);
}

uint64_t sub_100B6BCB8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 336);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 456));
  swift_release();
  return swift_task_switch(sub_100B6BD18, v1, 0);
}

uint64_t sub_100B6BD18()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[18];
  v0[58] = v0[6];
  return swift_task_switch(sub_100B6BD34, v1, 0);
}

uint64_t sub_100B6BD34()
{
  uint64_t v0;
  uint64_t v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  void (*v14)(char *, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t (*v54)(char, uint64_t);
  char *v55;

  v1 = *(_QWORD *)(v0 + 408);
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v3 = *(unsigned __int8 *)(v0 + 544);
    v4 = *(_QWORD *)(v0 + 184);
    v51 = *(_QWORD *)(v0 + 176);
    v52 = *(_QWORD *)(v0 + 248);
    v55 = (char *)_swiftEmptyArrayStorage;
    sub_10009A578(0, v2, 0);
    v5 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    v50 = *(_QWORD *)(v4 + 72);
    v6 = (v3 + 32) & ~v3;
    v7 = (char *)_swiftEmptyArrayStorage;
    do
    {
      v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 344);
      v9 = *(_QWORD *)(v0 + 280);
      v10 = *(_QWORD *)(v0 + 240);
      v11 = *(_QWORD *)(v0 + 192);
      sub_10005972C(v5, v11, type metadata accessor for OwnerPeerTrust);
      v8(v9, v11 + *(int *)(v51 + 20), v10);
      sub_1000126B0(v11, type metadata accessor for OwnerPeerTrust);
      if ((swift_isUniquelyReferenced_nonNull_native(v7) & 1) == 0)
      {
        sub_10009A578(0, *((_QWORD *)v7 + 2) + 1, 1);
        v7 = v55;
      }
      v13 = *((_QWORD *)v7 + 2);
      v12 = *((_QWORD *)v7 + 3);
      if (v13 >= v12 >> 1)
      {
        sub_10009A578(v12 > 1, v13 + 1, 1);
        v7 = v55;
      }
      v14 = *(void (**)(char *, uint64_t, uint64_t))(v0 + 360);
      v15 = *(_QWORD *)(v0 + 280);
      v16 = *(_QWORD *)(v0 + 240);
      *((_QWORD *)v7 + 2) = v13 + 1;
      v14(&v7[v6 + *(_QWORD *)(v52 + 72) * v13], v15, v16);
      v55 = v7;
      v5 += v50;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    v7 = (char *)_swiftEmptyArrayStorage;
  }
  v17 = *(unsigned __int8 *)(v0 + 550);
  v18 = sub_10001B664((uint64_t)v7);
  swift_bridgeObjectRelease();
  if (!v17)
  {
    if (*(_QWORD *)(v18 + 16))
    {
      v22 = *(_QWORD *)(v0 + 464);
      v23 = *(_QWORD *)(v0 + 440);
      v24 = *(_QWORD *)(v0 + 128);
      v25 = v18;
      v26 = 0;
      v27 = 2;
      v28 = 0;
      goto LABEL_17;
    }
LABEL_19:
    v35 = *(_QWORD *)(v0 + 240);
    v36 = *(_QWORD *)(v0 + 248);
    v37 = type metadata accessor for BeaconSharingCircleTransformer.Error(0);
    v38 = sub_100006204(&qword_1010EC8F0, type metadata accessor for BeaconSharingCircleTransformer.Error, (uint64_t)&unk_100E2DAE0);
    swift_allocError(v37, v38, 0, 0);
    v40 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v36 + 56))(v39, 1, 1, v35);
    swift_willThrow(v40);
LABEL_20:
    v19 = *(_QWORD *)(v0 + 328);
    v20 = *(_QWORD *)(v0 + 232);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_21;
  }
  if (v17 != 1)
  {
    if (*(_QWORD *)(v18 + 16))
    {
      v22 = *(_QWORD *)(v0 + 464);
      v23 = *(_QWORD *)(v0 + 440);
      v24 = *(_QWORD *)(v0 + 128);
      v25 = v18;
      v26 = 3;
      v27 = 0;
      v28 = 2;
LABEL_17:
      v29 = sub_1001EFBE8(v24, v25, v26, v22, v27, v28, 1);
      if (!v23)
      {
        v31 = v29;
        v32 = v30;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        *(_QWORD *)(v0 + 472) = v31;
        *(_QWORD *)(v0 + 480) = v32;
        v54 = (uint64_t (*)(char, uint64_t))((char *)&dword_101120688 + dword_101120688);
        v33 = (_QWORD *)swift_task_alloc(unk_10112068C);
        *(_QWORD *)(v0 + 488) = v33;
        *v33 = v0;
        v33[1] = sub_100B6C14C;
        return v54(*(_BYTE *)(v0 + 550), *(_QWORD *)(v0 + 336));
      }
      goto LABEL_20;
    }
    goto LABEL_19;
  }
  v19 = *(_QWORD *)(v0 + 328);
  v20 = *(_QWORD *)(v0 + 232);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v21 = sub_100B86430();
  v53 = swift_allocError(&type metadata for ShareCreateUseCaseError, v21, 0, 0);
  swift_willThrow(v53);
LABEL_21:
  sub_1000126B0(v20, type metadata accessor for BeaconNamingRecord);
  sub_1000126B0(v19, type metadata accessor for OwnedBeaconRecord);
  v41 = *(_QWORD *)(v0 + 304);
  v43 = *(_QWORD *)(v0 + 280);
  v42 = *(_QWORD *)(v0 + 288);
  v45 = *(_QWORD *)(v0 + 264);
  v44 = *(_QWORD *)(v0 + 272);
  v46 = *(_QWORD *)(v0 + 232);
  v47 = *(_QWORD *)(v0 + 208);
  v48 = *(_QWORD *)(v0 + 192);
  v49 = *(_QWORD *)(v0 + 168);
  swift_task_dealloc(*(_QWORD *)(v0 + 328));
  swift_task_dealloc(v41);
  swift_task_dealloc(v42);
  swift_task_dealloc(v43);
  swift_task_dealloc(v44);
  swift_task_dealloc(v45);
  swift_task_dealloc(v46);
  swift_task_dealloc(v47);
  swift_task_dealloc(v48);
  swift_task_dealloc(v49);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100B6C14C(__int16 a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 488);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 144);
  *(_WORD *)(*(_QWORD *)v1 + 548) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100B6C1AC, v3, 0);
}

uint64_t sub_100B6C1AC()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  _BOOL4 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  _BOOL4 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63[2];

  v1 = (_QWORD *)(v0 + 88);
  if ((*(_WORD *)(v0 + 548) & 1) != 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (qword_1010E9938 != -1)
      swift_once(&qword_1010E9938, sub_1000AFBB0);
    v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 344);
    v7 = *(_QWORD *)(v0 + 264);
    v8 = *(_QWORD *)(v0 + 240);
    v9 = *(_QWORD *)(v0 + 128);
    v10 = type metadata accessor for Logger(0);
    sub_10001A9E8(v10, (uint64_t)qword_1011B6748);
    v11 = v6(v7, v9, v8);
    v12 = Logger.logObject.getter(v11);
    v13 = static os_log_type_t.error.getter(v12);
    v14 = os_log_type_enabled(v12, v13);
    v15 = *(_QWORD *)(v0 + 264);
    v16 = *(_QWORD *)(v0 + 240);
    v17 = *(_QWORD *)(v0 + 248);
    if (v14)
    {
      v18 = swift_slowAlloc(22, -1);
      v19 = swift_slowAlloc(32, -1);
      v63[0] = v19;
      *(_DWORD *)v18 = 141558275;
      *(_QWORD *)(v0 + 104) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 104, v0 + 112, v18 + 4, v18 + 12);
      *(_WORD *)(v18 + 12) = 2081;
      v20 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v21 = dispatch thunk of CustomStringConvertible.description.getter(v16, v20);
      *(_QWORD *)(v0 + 112) = sub_100016940(v21, v22, v63);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 112, v0 + 120, v18 + 14, v18 + 22);
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v15, v16);
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "BeaconSharingService: cannot create new circle - offerLimitReached. BeaconIdentifier: %{private,mask.hash}s.", (uint8_t *)v18, 0x16u);
      swift_arrayDestroy(v19, 1, (char *)&type metadata for Any + 8);
      v23 = v19;
      v1 = (_QWORD *)(v0 + 88);
      swift_slowDealloc(v23, -1, -1);
      swift_slowDealloc(v18, -1, -1);
    }
    else
    {
      (*(void (**)(_QWORD, _QWORD))(v17 + 8))(*(_QWORD *)(v0 + 264), *(_QWORD *)(v0 + 240));
    }

    v42 = *(_QWORD *)(v0 + 328);
    v43 = *(_QWORD *)(v0 + 232);
    type metadata accessor for SPBeaconSharingError(0);
    v45 = v44;
    *(_QWORD *)(v0 + 96) = 11;
    v46 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
    v47 = sub_100006204((unint64_t *)&qword_1010EB490, (uint64_t (*)(uint64_t))type metadata accessor for SPBeaconSharingError, (uint64_t)&unk_100E21930);
    v48 = _BridgedStoredNSError.init(_:userInfo:)(v1, v0 + 96, v46, v45, v47);
  }
  else
  {
    if ((*(_WORD *)(v0 + 548) & 0x100) == 0)
    {
      v2 = (_QWORD *)swift_task_alloc(async function pointer to Array.asyncFlatMap<A>(_:)[1]);
      *(_QWORD *)(v0 + 496) = v2;
      v3 = sub_10001A9A8(&qword_1010EC8C8);
      v4 = sub_1000193A4(&qword_1010EC8D0, &qword_1010EC8C8, (const char *)&protocol conformance descriptor for [A]);
      *v2 = v0;
      v2[1] = sub_100B6C7F4;
      return Array.asyncFlatMap<A>(_:)(&unk_101116568, *(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 480), *(_QWORD *)(v0 + 152), v3, v4);
    }
    v24 = v0 + 64;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (qword_1010E9938 != -1)
      swift_once(&qword_1010E9938, sub_1000AFBB0);
    v25 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 344);
    v26 = *(_QWORD *)(v0 + 272);
    v27 = *(_QWORD *)(v0 + 240);
    v28 = *(_QWORD *)(v0 + 128);
    v29 = type metadata accessor for Logger(0);
    sub_10001A9E8(v29, (uint64_t)qword_1011B6748);
    v30 = v25(v26, v28, v27);
    v31 = Logger.logObject.getter(v30);
    v32 = static os_log_type_t.error.getter(v31);
    v33 = os_log_type_enabled(v31, v32);
    v34 = *(_QWORD *)(v0 + 272);
    v36 = *(_QWORD *)(v0 + 240);
    v35 = *(_QWORD *)(v0 + 248);
    if (v33)
    {
      v37 = swift_slowAlloc(22, -1);
      v62 = swift_slowAlloc(32, -1);
      v63[0] = v62;
      *(_DWORD *)v37 = 141558275;
      *(_QWORD *)(v0 + 72) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 72, v0 + 80, v37 + 4, v37 + 12);
      *(_WORD *)(v37 + 12) = 2081;
      v38 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v39 = dispatch thunk of CustomStringConvertible.description.getter(v36, v38);
      *(_QWORD *)(v0 + 80) = sub_100016940(v39, v40, v63);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 80, v0 + 88, v37 + 14, v37 + 22);
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v34, v36);
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "Total shared item limit reached. cannot create new circle - sharedItemsCountLimitReached. BeaconIdentifier: %{private,mask.hash}s.", (uint8_t *)v37, 0x16u);
      swift_arrayDestroy(v62, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v62, -1, -1);
      v41 = v37;
      v24 = v0 + 64;
      swift_slowDealloc(v41, -1, -1);
    }
    else
    {
      (*(void (**)(_QWORD, _QWORD))(v35 + 8))(*(_QWORD *)(v0 + 272), *(_QWORD *)(v0 + 240));
    }

    v42 = *(_QWORD *)(v0 + 328);
    v43 = *(_QWORD *)(v0 + 232);
    type metadata accessor for SPBeaconSharingError(0);
    v50 = v49;
    *(_QWORD *)(v0 + 64) = 7;
    v51 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
    v52 = sub_100006204((unint64_t *)&qword_1010EB490, (uint64_t (*)(uint64_t))type metadata accessor for SPBeaconSharingError, (uint64_t)&unk_100E21930);
    v48 = _BridgedStoredNSError.init(_:userInfo:)((_QWORD *)(v0 + 56), v24, v51, v50, v52);
  }
  swift_willThrow(v48);
  sub_1000126B0(v43, type metadata accessor for BeaconNamingRecord);
  sub_1000126B0(v42, type metadata accessor for OwnedBeaconRecord);
  v53 = *(_QWORD *)(v0 + 304);
  v55 = *(_QWORD *)(v0 + 280);
  v54 = *(_QWORD *)(v0 + 288);
  v57 = *(_QWORD *)(v0 + 264);
  v56 = *(_QWORD *)(v0 + 272);
  v58 = *(_QWORD *)(v0 + 232);
  v59 = *(_QWORD *)(v0 + 208);
  v60 = *(_QWORD *)(v0 + 192);
  v61 = *(_QWORD *)(v0 + 168);
  swift_task_dealloc(*(_QWORD *)(v0 + 328));
  swift_task_dealloc(v53);
  swift_task_dealloc(v54);
  swift_task_dealloc(v55);
  swift_task_dealloc(v56);
  swift_task_dealloc(v57);
  swift_task_dealloc(v58);
  swift_task_dealloc(v59);
  swift_task_dealloc(v60);
  swift_task_dealloc(v61);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100B6C7F4(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 496);
  v5 = *(_QWORD *)(*v2 + 144);
  *(_QWORD *)(v3 + 504) = a1;
  *(_QWORD *)(v3 + 512) = v1;
  swift_task_dealloc(v4);
  return swift_task_switch(sub_100B6C854, v5, 0);
}

uint64_t sub_100B6C854()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t (*v27)(uint64_t);

  v1 = *(_QWORD *)(v0 + 472);
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v3 = *(_QWORD *)(v0 + 160);
    v4 = *(_QWORD *)(v0 + 168);
    v5 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
    v6 = *(_QWORD *)(v3 + 72);
    v7 = *(_QWORD *)(v0 + 512);
    swift_bridgeObjectRetain(v1);
    sub_10005972C(v1 + v5, v4, type metadata accessor for OwnerSharingCircle);
    v8 = sub_10044DA04();
    if (v7)
    {
      v9 = *(_QWORD *)(v0 + 472);
      v10 = *(_QWORD *)(v0 + 328);
      v11 = *(_QWORD *)(v0 + 232);
      sub_1000126B0(*(_QWORD *)(v0 + 168), type metadata accessor for OwnerSharingCircle);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n(v9, 2);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1000126B0(v11, type metadata accessor for BeaconNamingRecord);
      sub_1000126B0(v10, type metadata accessor for OwnedBeaconRecord);
      v12 = *(_QWORD *)(v0 + 304);
      v14 = *(_QWORD *)(v0 + 280);
      v13 = *(_QWORD *)(v0 + 288);
      v16 = *(_QWORD *)(v0 + 264);
      v15 = *(_QWORD *)(v0 + 272);
      v17 = *(_QWORD *)(v0 + 232);
      v18 = *(_QWORD *)(v0 + 208);
      v19 = *(_QWORD *)(v0 + 192);
      v26 = *(_QWORD *)(v0 + 168);
      swift_task_dealloc(*(_QWORD *)(v0 + 328));
      swift_task_dealloc(v12);
      swift_task_dealloc(v13);
      swift_task_dealloc(v14);
      swift_task_dealloc(v15);
      swift_task_dealloc(v16);
      swift_task_dealloc(v17);
      swift_task_dealloc(v18);
      swift_task_dealloc(v19);
      swift_task_dealloc(v26);
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
    v21 = v8;
    sub_1000126B0(*(_QWORD *)(v0 + 168), type metadata accessor for OwnerSharingCircle);
    sub_1003028BC(v21);
    v22 = v2 - 1;
    if (v2 != 1)
    {
      v23 = v1 + v6 + v5;
      do
      {
        sub_10005972C(v23, *(_QWORD *)(v0 + 168), type metadata accessor for OwnerSharingCircle);
        v24 = sub_10044DA04();
        sub_1000126B0(*(_QWORD *)(v0 + 168), type metadata accessor for OwnerSharingCircle);
        sub_1003028BC(v24);
        v23 += v6;
        --v22;
      }
      while (v22);
    }
    swift_bridgeObjectRelease();
  }
  *(_QWORD *)(v0 + 520) = _swiftEmptyArrayStorage;
  v27 = (uint64_t (*)(uint64_t))((char *)&dword_101113580 + dword_101113580);
  v25 = (_QWORD *)swift_task_alloc(unk_101113584);
  *(_QWORD *)(v0 + 528) = v25;
  *v25 = v0;
  v25[1] = sub_100B6CAD4;
  return v27(*(_QWORD *)(v0 + 472));
}

uint64_t sub_100B6CAD4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 528);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 144);
  *(_QWORD *)(*(_QWORD *)v1 + 536) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100B6CB34, v3, 0);
}

uint64_t sub_100B6CB34()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t Use;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v1 = *(_QWORD *)(v0 + 520);
  v2 = *(_QWORD *)(v0 + 504);
  v3 = *(_QWORD *)(v0 + 472);
  v4 = *(_QWORD *)(v0 + 480);
  v5 = *(_QWORD *)(v0 + 432);
  v6 = *(_QWORD *)(v0 + 328);
  v11 = *(_QWORD *)(v0 + 304);
  v12 = *(_QWORD *)(v0 + 288);
  v13 = *(_QWORD *)(v0 + 280);
  v14 = *(_QWORD *)(v0 + 272);
  v7 = *(_QWORD *)(v0 + 232);
  v15 = *(_QWORD *)(v0 + 264);
  v16 = *(_QWORD *)(v0 + 208);
  v17 = *(_QWORD *)(v0 + 192);
  v18 = *(_QWORD *)(v0 + 168);
  v8 = *(_QWORD **)(v0 + 120);
  *(_QWORD *)(*(_QWORD *)(v0 + 144) + 384) = *(_QWORD *)(v0 + 536);
  swift_bridgeObjectRelease();
  Use = type metadata accessor for ShareCreateUseCase.ShareCreationData(0);
  sub_1000126EC(v6, (uint64_t)v8 + *(int *)(Use + 36), type metadata accessor for OwnedBeaconRecord);
  sub_1000126EC(v7, (uint64_t)v8 + *(int *)(Use + 40), type metadata accessor for BeaconNamingRecord);
  *v8 = v2;
  v8[1] = v1;
  v8[2] = v4;
  v8[3] = v3;
  v8[4] = v5;
  swift_task_dealloc(v6);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v7);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100B6CC78()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = *(_QWORD *)(v0 + 328);
  sub_1000126B0(*(_QWORD *)(v0 + 232), type metadata accessor for BeaconNamingRecord);
  sub_1000126B0(v1, type metadata accessor for OwnedBeaconRecord);
  v2 = *(_QWORD *)(v0 + 304);
  v4 = *(_QWORD *)(v0 + 280);
  v3 = *(_QWORD *)(v0 + 288);
  v6 = *(_QWORD *)(v0 + 264);
  v5 = *(_QWORD *)(v0 + 272);
  v7 = *(_QWORD *)(v0 + 232);
  v8 = *(_QWORD *)(v0 + 208);
  v9 = *(_QWORD *)(v0 + 192);
  v10 = *(_QWORD *)(v0 + 168);
  swift_task_dealloc(*(_QWORD *)(v0 + 328));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100B6CD5C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  v2[4] = a1;
  v2[5] = v1;
  v3 = type metadata accessor for MemberPeerTrust(0);
  v2[6] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[7] = v4;
  v5 = (*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[8] = swift_task_alloc(v5);
  v2[9] = swift_task_alloc(v5);
  v6 = type metadata accessor for OwnerPeerTrust(0);
  v2[10] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v2[11] = v7;
  v8 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[12] = swift_task_alloc(v8);
  v2[13] = swift_task_alloc(v8);
  v2[14] = swift_task_alloc(v8);
  v2[15] = swift_task_alloc(v8);
  v9 = type metadata accessor for OwnerSharingCircle(0);
  v2[16] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v2[17] = v10;
  v11 = (*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[18] = swift_task_alloc(v11);
  v2[19] = swift_task_alloc(v11);
  v2[20] = swift_task_alloc(v11);
  v2[21] = swift_task_alloc(v11);
  v12 = sub_10001A9A8(&qword_1010EC870);
  v2[22] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v12 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100B6CE90, v1, 0);
}

uint64_t sub_100B6CE90()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 40) + 160);
  *(_QWORD *)(v0 + 184) = v1;
  return swift_task_switch(sub_100B6CEAC, v1, 0);
}

uint64_t sub_100B6CEAC()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 192) = *(_QWORD *)(*(_QWORD *)(v0 + 184) + 128);
  return swift_task_switch(sub_100B6CECC, 0, 0);
}

uint64_t sub_100B6CECC()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v0 + 200) = v1;
  *v1 = v0;
  v1[1] = sub_100B6CF54;
  return withCheckedContinuation<A>(isolation:function:_:)(v1, 0, 0, 0x696176416E656877, 0xEF2928656C62616CLL, sub_100068180, *(_QWORD *)(v0 + 192), (char *)&type metadata for () + 8);
}

uint64_t sub_100B6CF54()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 200));
  return swift_task_switch(sub_100B6CFA8, 0, 0);
}

uint64_t sub_100B6CFA8()
{
  uint64_t v0;

  return swift_task_switch(sub_100B6CFBC, *(_QWORD *)(v0 + 184), 0);
}

uint64_t sub_100B6CFBC()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v2 = (_QWORD *)swift_task_alloc(v1);
  *(_QWORD *)(v0 + 208) = v2;
  v3 = sub_10001A9A8(&qword_1010EC910);
  *v2 = v0;
  v2[1] = sub_100B6D038;
  return unsafeBlocking<A>(_:)(v0 + 16, sub_100068188, *(_QWORD *)(v0 + 184), v3);
}

uint64_t sub_100B6D038()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 184);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 208));
  swift_release();
  return swift_task_switch(sub_100B6D098, v1, 0);
}

uint64_t sub_100B6D098()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[23];
  v0[27] = v0[2];
  return swift_task_switch(sub_100B6D0B4, v1, 0);
}

uint64_t sub_100B6D0B4()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v2 = (_QWORD *)swift_task_alloc(v1);
  *(_QWORD *)(v0 + 224) = v2;
  v3 = sub_10001A9A8(&qword_1010EC918);
  *v2 = v0;
  v2[1] = sub_100B6D130;
  return unsafeBlocking<A>(_:)(v0 + 24, sub_100068190, *(_QWORD *)(v0 + 184), v3);
}

uint64_t sub_100B6D130()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 184);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 224));
  swift_release();
  return swift_task_switch(sub_100B6D190, v1, 0);
}

uint64_t sub_100B6D190()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[5];
  v0[29] = v0[3];
  return swift_task_switch(sub_100B6D1AC, v1, 0);
}

uint64_t sub_100B6D1AC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v1 = v0[29];
  v2 = v0[27];
  v3 = v0[22];
  v4 = v0[4];
  v5 = (_QWORD *)swift_task_alloc(48);
  v5[2] = v4;
  v5[3] = v2;
  v5[4] = v1;
  sub_100ADB304((void (*)(uint64_t, _UNKNOWN **))sub_100B86288, v3);
  v6 = v0[23];
  swift_task_dealloc(v5);
  return swift_task_switch(sub_100B6D304, v6, 0);
}

uint64_t sub_100B6D304()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 240) = *(_QWORD *)(*(_QWORD *)(v0 + 184) + 128);
  return swift_task_switch(sub_100B6D324, 0, 0);
}

uint64_t sub_100B6D324()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = v0[30];
  v2 = v0[22];
  v3 = swift_task_alloc(32);
  v0[31] = v3;
  *(_QWORD *)(v3 + 16) = v1;
  *(_QWORD *)(v3 + 24) = v2;
  v4 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  v0[32] = v4;
  *v4 = v0;
  v4[1] = sub_100B6D3C8;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v4, 0, 0, 0xD000000000000011, 0x8000000100EC6890, sub_1000682F8, v3, (char *)&type metadata for () + 8);
}

uint64_t sub_100B6D3C8()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 256);
  *(_QWORD *)(*v1 + 264) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_100B6E0B4;
  }
  else
  {
    swift_task_dealloc(*(_QWORD *)(v2 + 248));
    v4 = sub_100B6D434;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_100B6D434()
{
  uint64_t v0;

  return swift_task_switch(sub_100B6D448, *(_QWORD *)(v0 + 40), 0);
}

uint64_t sub_100B6D448()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t (*v14)(uint64_t);
  os_log_type_t v15;
  _BOOL4 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)(uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  uint64_t (*v37)(uint64_t);
  os_log_type_t v38;
  _BOOL4 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t (*v54)(uint64_t);
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  NSObject *v59;
  uint64_t (*v60)(uint64_t);
  os_log_type_t v61;
  _BOOL4 v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t (*v77)(uint64_t);
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  NSObject *v82;
  os_log_type_t v83;
  _BOOL4 v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t (*v87)(uint64_t);
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t (*v99)(uint64_t);
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  NSObject *v104;
  os_log_type_t v105;
  _BOOL4 v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t (*v109)(uint64_t);
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  int v128;
  int v129;
  int v130;
  int v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;

  v1 = *(_QWORD **)(v0 + 32);
  v2 = v1[3];
  v3 = *(_QWORD *)(v2 + 16);
  v4 = "Code";
  if (v3)
  {
    v5 = *(_QWORD *)(v140 + 136);
    v6 = v2 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    v7 = *(_QWORD *)(v5 + 72);
    v125 = v2;
    swift_bridgeObjectRetain_n(v2, 2);
    v8 = type metadata accessor for OwnerSharingCircle;
    v133 = v7;
    do
    {
      sub_10005972C(v6, *(_QWORD *)(v140 + 168), v8);
      if (qword_1010E9938 != -1)
        swift_once(&qword_1010E9938, sub_1000AFBB0);
      v9 = *(_QWORD *)(v140 + 160);
      v10 = *(_QWORD *)(v140 + 168);
      v11 = type metadata accessor for Logger(0);
      sub_10001A9E8(v11, (uint64_t)qword_1011B6748);
      v12 = sub_10005972C(v10, v9, v8);
      v13 = Logger.logObject.getter(v12);
      v14 = v8;
      v15 = static os_log_type_t.default.getter(v13);
      v16 = os_log_type_enabled(v13, v15);
      v17 = *(_QWORD *)(v140 + 160);
      if (v16)
      {
        v18 = swift_slowAlloc(22, -1);
        v19 = swift_slowAlloc(32, -1);
        v141 = v19;
        *(_DWORD *)v18 = 141558275;
        *(_QWORD *)(v18 + 4) = 1752392040;
        *(_WORD *)(v18 + 12) = 2081;
        v20 = type metadata accessor for UUID(0);
        v21 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v22 = v20;
        v4 = "Code";
        v23 = dispatch thunk of CustomStringConvertible.description.getter(v22, v21);
        *(_QWORD *)(v18 + 14) = sub_100016940(v23, v24, &v141);
        swift_bridgeObjectRelease();
        sub_1000126B0(v17, v14);
        _os_log_impl((void *)&_mh_execute_header, v13, v15, "Data update on share creation. Create %{private,mask.hash}s", (uint8_t *)v18, 0x16u);
        swift_arrayDestroy(v19, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v19, -1, -1);
        v25 = v18;
        v7 = v133;
        swift_slowDealloc(v25, -1, -1);
      }
      else
      {
        sub_1000126B0(*(_QWORD *)(v140 + 160), v14);
      }

      v8 = v14;
      sub_1000126B0(*(_QWORD *)(v140 + 168), v14);
      v6 += v7;
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease_n(v125, 2);
    v1 = *(_QWORD **)(v140 + 32);
  }
  v26 = v1[2];
  v27 = *(_QWORD *)(v26 + 16);
  if (v27)
  {
    v28 = *(_QWORD *)(v140 + 136);
    v29 = v26 + ((*(unsigned __int8 *)(v28 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v28 + 80));
    v30 = *(_QWORD *)(v28 + 72);
    v126 = v26;
    swift_bridgeObjectRetain_n(v26, 2);
    v31 = type metadata accessor for OwnerSharingCircle;
    v128 = *((_QWORD *)v4 + 154);
    v134 = v30;
    do
    {
      sub_10005972C(v29, *(_QWORD *)(v140 + 152), v31);
      if (qword_1010E9938 != -1)
        swift_once(&qword_1010E9938, sub_1000AFBB0);
      v32 = *(_QWORD *)(v140 + 144);
      v33 = *(_QWORD *)(v140 + 152);
      v34 = type metadata accessor for Logger(0);
      sub_10001A9E8(v34, (uint64_t)qword_1011B6748);
      v35 = sub_10005972C(v33, v32, v31);
      v36 = Logger.logObject.getter(v35);
      v37 = v31;
      v38 = static os_log_type_t.default.getter(v36);
      v39 = os_log_type_enabled(v36, v38);
      v40 = *(_QWORD *)(v140 + 144);
      if (v39)
      {
        v41 = swift_slowAlloc(22, -1);
        v42 = swift_slowAlloc(32, -1);
        v141 = v42;
        *(_DWORD *)v41 = v128;
        *(_QWORD *)(v41 + 4) = 1752392040;
        *(_WORD *)(v41 + 12) = 2081;
        v43 = type metadata accessor for UUID(0);
        v44 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v45 = v43;
        v4 = "Code";
        v46 = dispatch thunk of CustomStringConvertible.description.getter(v45, v44);
        *(_QWORD *)(v41 + 14) = sub_100016940(v46, v47, &v141);
        swift_bridgeObjectRelease();
        sub_1000126B0(v40, v37);
        _os_log_impl((void *)&_mh_execute_header, v36, v38, "Data update on share creation. Delete %{private,mask.hash}s", (uint8_t *)v41, 0x16u);
        swift_arrayDestroy(v42, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v42, -1, -1);
        v48 = v41;
        v30 = v134;
        swift_slowDealloc(v48, -1, -1);
      }
      else
      {
        sub_1000126B0(*(_QWORD *)(v140 + 144), v37);
      }

      v31 = v37;
      sub_1000126B0(*(_QWORD *)(v140 + 152), v37);
      v29 += v30;
      --v27;
    }
    while (v27);
    swift_bridgeObjectRelease_n(v126, 2);
    v1 = *(_QWORD **)(v140 + 32);
  }
  v49 = v1[4];
  v50 = *(_QWORD *)(v49 + 16);
  if (v50)
  {
    v51 = *(_QWORD *)(v140 + 88);
    v52 = v49 + ((*(unsigned __int8 *)(v51 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v51 + 80));
    v53 = *(_QWORD *)(v51 + 72);
    v127 = v49;
    swift_bridgeObjectRetain_n(v49, 2);
    v54 = type metadata accessor for OwnerPeerTrust;
    v129 = *((_QWORD *)v4 + 154);
    v135 = v53;
    do
    {
      sub_10005972C(v52, *(_QWORD *)(v140 + 120), v54);
      if (qword_1010E9938 != -1)
        swift_once(&qword_1010E9938, sub_1000AFBB0);
      v55 = *(_QWORD *)(v140 + 112);
      v56 = *(_QWORD *)(v140 + 120);
      v57 = type metadata accessor for Logger(0);
      sub_10001A9E8(v57, (uint64_t)qword_1011B6748);
      v58 = sub_10005972C(v56, v55, v54);
      v59 = Logger.logObject.getter(v58);
      v60 = v54;
      v61 = static os_log_type_t.default.getter(v59);
      v62 = os_log_type_enabled(v59, v61);
      v63 = *(_QWORD *)(v140 + 112);
      if (v62)
      {
        v64 = swift_slowAlloc(22, -1);
        v65 = swift_slowAlloc(32, -1);
        v141 = v65;
        *(_DWORD *)v64 = v129;
        *(_QWORD *)(v64 + 4) = 1752392040;
        *(_WORD *)(v64 + 12) = 2081;
        v66 = type metadata accessor for UUID(0);
        v67 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v68 = v66;
        v4 = "Code";
        v69 = dispatch thunk of CustomStringConvertible.description.getter(v68, v67);
        *(_QWORD *)(v64 + 14) = sub_100016940(v69, v70, &v141);
        swift_bridgeObjectRelease();
        sub_1000126B0(v63, v60);
        _os_log_impl((void *)&_mh_execute_header, v59, v61, "Data update on peer trust creation. Create %{private,mask.hash}s", (uint8_t *)v64, 0x16u);
        swift_arrayDestroy(v65, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v65, -1, -1);
        v71 = v64;
        v53 = v135;
        swift_slowDealloc(v71, -1, -1);
      }
      else
      {
        sub_1000126B0(*(_QWORD *)(v140 + 112), v60);
      }

      v54 = v60;
      sub_1000126B0(*(_QWORD *)(v140 + 120), v60);
      v52 += v53;
      --v50;
    }
    while (v50);
    swift_bridgeObjectRelease_n(v127, 2);
  }
  v72 = *(_QWORD *)(v140 + 216);
  v73 = *(_QWORD *)(v72 + 16);
  if (v73)
  {
    v74 = *(_QWORD *)(v140 + 56);
    v75 = v72 + ((*(unsigned __int8 *)(v74 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v74 + 80));
    v76 = *(_QWORD *)(v74 + 72);
    swift_bridgeObjectRetain(v72);
    v77 = type metadata accessor for MemberPeerTrust;
    v130 = *((_QWORD *)v4 + 154);
    do
    {
      sub_10005972C(v75, *(_QWORD *)(v140 + 72), v77);
      if (qword_1010E9938 != -1)
        swift_once(&qword_1010E9938, sub_1000AFBB0);
      v79 = *(_QWORD *)(v140 + 64);
      v78 = *(_QWORD *)(v140 + 72);
      v80 = type metadata accessor for Logger(0);
      sub_10001A9E8(v80, (uint64_t)qword_1011B6748);
      v81 = sub_10005972C(v78, v79, v77);
      v82 = Logger.logObject.getter(v81);
      v83 = static os_log_type_t.default.getter(v82);
      v84 = os_log_type_enabled(v82, v83);
      v85 = *(_QWORD *)(v140 + 64);
      if (v84)
      {
        v86 = swift_slowAlloc(22, -1);
        v137 = swift_slowAlloc(32, -1);
        v141 = v137;
        *(_DWORD *)v86 = v130;
        *(_QWORD *)(v86 + 4) = 1752392040;
        *(_WORD *)(v86 + 12) = 2081;
        v87 = v77;
        v88 = v76;
        v89 = type metadata accessor for UUID(0);
        v90 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v91 = v89;
        v76 = v88;
        v77 = v87;
        v92 = dispatch thunk of CustomStringConvertible.description.getter(v91, v90);
        *(_QWORD *)(v86 + 14) = sub_100016940(v92, v93, &v141);
        swift_bridgeObjectRelease();
        sub_1000126B0(v85, v87);
        _os_log_impl((void *)&_mh_execute_header, v82, v83, "Orphaned Member Peer Trust to Cleanup %{private,mask.hash}s", (uint8_t *)v86, 0x16u);
        swift_arrayDestroy(v137, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v137, -1, -1);
        swift_slowDealloc(v86, -1, -1);
      }
      else
      {
        sub_1000126B0(*(_QWORD *)(v140 + 64), v77);
      }

      sub_1000126B0(*(_QWORD *)(v140 + 72), v77);
      v75 += v76;
      --v73;
      v4 = "Code";
    }
    while (v73);
    swift_bridgeObjectRelease_n(*(_QWORD *)(v140 + 216), 2);
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  v94 = *(_QWORD *)(v140 + 232);
  v95 = *(_QWORD *)(v94 + 16);
  if (v95)
  {
    v96 = *(_QWORD *)(v140 + 88);
    v97 = v94 + ((*(unsigned __int8 *)(v96 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v96 + 80));
    v98 = *(_QWORD *)(v96 + 72);
    swift_bridgeObjectRetain(v94);
    v99 = type metadata accessor for OwnerPeerTrust;
    v131 = *((_QWORD *)v4 + 154);
    do
    {
      sub_10005972C(v97, *(_QWORD *)(v140 + 104), v99);
      if (qword_1010E9938 != -1)
        swift_once(&qword_1010E9938, sub_1000AFBB0);
      v101 = *(_QWORD *)(v140 + 96);
      v100 = *(_QWORD *)(v140 + 104);
      v102 = type metadata accessor for Logger(0);
      sub_10001A9E8(v102, (uint64_t)qword_1011B6748);
      v103 = sub_10005972C(v100, v101, v99);
      v104 = Logger.logObject.getter(v103);
      v105 = static os_log_type_t.default.getter(v104);
      v106 = os_log_type_enabled(v104, v105);
      v107 = *(_QWORD *)(v140 + 96);
      if (v106)
      {
        v108 = swift_slowAlloc(22, -1);
        v138 = swift_slowAlloc(32, -1);
        v141 = v138;
        *(_DWORD *)v108 = v131;
        *(_QWORD *)(v108 + 4) = 1752392040;
        *(_WORD *)(v108 + 12) = 2081;
        v109 = v99;
        v110 = v98;
        v111 = type metadata accessor for UUID(0);
        v112 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v113 = v111;
        v98 = v110;
        v99 = v109;
        v114 = dispatch thunk of CustomStringConvertible.description.getter(v113, v112);
        *(_QWORD *)(v108 + 14) = sub_100016940(v114, v115, &v141);
        swift_bridgeObjectRelease();
        sub_1000126B0(v107, v109);
        _os_log_impl((void *)&_mh_execute_header, v104, v105, "Orphaned Owner Peer Trust to Cleanup %{private,mask.hash}s", (uint8_t *)v108, 0x16u);
        swift_arrayDestroy(v138, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v138, -1, -1);
        swift_slowDealloc(v108, -1, -1);
      }
      else
      {
        sub_1000126B0(*(_QWORD *)(v140 + 96), v99);
      }

      sub_1000126B0(*(_QWORD *)(v140 + 104), v99);
      v97 += v98;
      --v95;
    }
    while (v95);
    swift_bridgeObjectRelease();
  }
  v117 = *(_QWORD *)(v140 + 168);
  v116 = *(_QWORD *)(v140 + 176);
  v119 = *(_QWORD *)(v140 + 152);
  v118 = *(_QWORD *)(v140 + 160);
  v120 = *(_QWORD *)(v140 + 144);
  v122 = *(_QWORD *)(v140 + 112);
  v121 = *(_QWORD *)(v140 + 120);
  v123 = *(_QWORD *)(v140 + 104);
  v132 = *(_QWORD *)(v140 + 96);
  v136 = *(_QWORD *)(v140 + 72);
  v139 = *(_QWORD *)(v140 + 64);
  sub_100004048(v116, &qword_1010EC870);
  swift_bridgeObjectRelease();
  swift_task_dealloc(v116);
  swift_task_dealloc(v117);
  swift_task_dealloc(v118);
  swift_task_dealloc(v119);
  swift_task_dealloc(v120);
  swift_task_dealloc(v121);
  swift_task_dealloc(v122);
  swift_task_dealloc(v123);
  swift_task_dealloc(v132);
  swift_task_dealloc(v136);
  swift_task_dealloc(v139);
  return (*(uint64_t (**)(void))(v140 + 8))();
}

uint64_t sub_100B6E0B4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 184);
  swift_task_dealloc(*(_QWORD *)(v0 + 248));
  return swift_task_switch(sub_100B6E0F4, v1, 0);
}

uint64_t sub_100B6E0F4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 40);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_task_switch(sub_100B6E140, v1, 0);
}

uint64_t sub_100B6E140()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  sub_100004048(*(_QWORD *)(v0 + 176), &qword_1010EC870);
  v1 = *(_QWORD *)(v0 + 168);
  v3 = *(_QWORD *)(v0 + 152);
  v2 = *(_QWORD *)(v0 + 160);
  v4 = *(_QWORD *)(v0 + 144);
  v6 = *(_QWORD *)(v0 + 112);
  v5 = *(_QWORD *)(v0 + 120);
  v8 = *(_QWORD *)(v0 + 96);
  v7 = *(_QWORD *)(v0 + 104);
  v9 = *(_QWORD *)(v0 + 72);
  v11 = *(_QWORD *)(v0 + 64);
  swift_task_dealloc(*(_QWORD *)(v0 + 176));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v11);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100B6E210(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;

  v2[6] = a1;
  v2[7] = v1;
  v3 = type metadata accessor for KeyDropJoinToken(0);
  v2[8] = v3;
  v2[9] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_10001A9A8(&qword_10110F130);
  v2[10] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for SharingCircleSecretValue(0);
  v2[11] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v2[12] = v6;
  v7 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[13] = swift_task_alloc(v7);
  v2[14] = swift_task_alloc(v7);
  v2[15] = swift_task_alloc(v7);
  v8 = type metadata accessor for SharingCircleSecret(0);
  v2[16] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v2[17] = v9;
  v10 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[18] = swift_task_alloc(v10);
  v2[19] = swift_task_alloc(v10);
  v2[20] = swift_task_alloc(v10);
  v2[21] = swift_task_alloc(v10);
  v11 = sub_10001A9A8(&qword_1010EC870);
  v2[22] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v11 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for OwnerSharingCircle(0);
  v2[23] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v2[24] = v13;
  v14 = (*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[25] = swift_task_alloc(v14);
  v2[26] = swift_task_alloc(v14);
  v15 = type metadata accessor for OwnerPeerTrust(0);
  v2[27] = v15;
  v16 = *(_QWORD *)(v15 - 8);
  v2[28] = v16;
  v2[29] = swift_task_alloc((*(_QWORD *)(v16 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for UUID(0);
  v2[30] = v17;
  v18 = *(_QWORD *)(v17 - 8);
  v2[31] = v18;
  v19 = (*(_QWORD *)(v18 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[32] = swift_task_alloc(v19);
  v2[33] = swift_task_alloc(v19);
  v2[34] = swift_task_alloc(v19);
  v2[35] = swift_task_alloc(v19);
  return swift_task_switch(sub_100B6E3F8, v1, 0);
}

uint64_t sub_100B6E3F8()
{
  _QWORD *v0;
  uint64_t v1;
  int64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  _QWORD *v19;

  v1 = *(_QWORD *)(v0[6] + 32);
  v2 = *(_QWORD *)(v1 + 16);
  v3 = _swiftEmptyArrayStorage;
  if (v2)
  {
    v4 = v0[31];
    v5 = v0[28];
    v18 = v0[27];
    v19 = _swiftEmptyArrayStorage;
    swift_bridgeObjectRetain(v1);
    sub_10009A578(0, v2, 0);
    v6 = v1 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    v7 = *(_QWORD *)(v5 + 72);
    v3 = _swiftEmptyArrayStorage;
    do
    {
      v8 = v0[35];
      v10 = v0[29];
      v9 = v0[30];
      sub_10005972C(v6, v10, type metadata accessor for OwnerPeerTrust);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v8, v10 + *(int *)(v18 + 20), v9);
      sub_1000126B0(v10, type metadata accessor for OwnerPeerTrust);
      if ((swift_isUniquelyReferenced_nonNull_native(v3) & 1) == 0)
      {
        sub_10009A578(0, v3[2] + 1, 1);
        v3 = v19;
      }
      v12 = v3[2];
      v11 = v3[3];
      if (v12 >= v11 >> 1)
      {
        sub_10009A578(v11 > 1, v12 + 1, 1);
        v3 = v19;
      }
      v13 = v0[35];
      v14 = v0[30];
      v3[2] = v12 + 1;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v4 + 32))((unint64_t)v3+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(_QWORD *)(v4 + 72) * v12, v13, v14);
      v19 = v3;
      v6 += v7;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease();
  }
  v15 = v0[7];
  v0[36] = sub_10001B664((uint64_t)v3);
  swift_bridgeObjectRelease();
  v16 = *(_QWORD *)(v15 + 160);
  v0[37] = v16;
  return swift_task_switch(sub_100B6E5AC, v16, 0);
}

uint64_t sub_100B6E5AC()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v2 = (_QWORD *)swift_task_alloc(v1);
  *(_QWORD *)(v0 + 304) = v2;
  v3 = sub_10001A9A8(&qword_1010EC918);
  *v2 = v0;
  v2[1] = sub_100B6E628;
  return unsafeBlocking<A>(_:)(v0 + 32, sub_10007AC64, *(_QWORD *)(v0 + 296), v3);
}

uint64_t sub_100B6E628()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 296);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 304));
  swift_release();
  return swift_task_switch(sub_100B6E684, v1, 0);
}

uint64_t sub_100B6E684()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[7];
  v0[39] = v0[4];
  return swift_task_switch(sub_100B6E6A0, v1, 0);
}

uint64_t sub_100B6E6A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  _QWORD *v19;

  v1 = *(_QWORD *)(v0 + 48);
  *(_QWORD *)(v0 + 320) = sub_100B85BC4(*(_QWORD *)(v0 + 312), *(_QWORD **)(v0 + 288), type metadata accessor for OwnerPeerTrust, (void (*)(BOOL, uint64_t, uint64_t))sub_10009A7FC);
  *(_QWORD *)(v0 + 328) = 0;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v2 = *(_QWORD *)(v1 + 24);
  v3 = *(_QWORD *)(v2 + 16);
  v4 = _swiftEmptyArrayStorage;
  if (v3)
  {
    v5 = *(_QWORD *)(v0 + 248);
    v6 = *(_QWORD *)(v0 + 192);
    v18 = *(_QWORD *)(v0 + 184);
    v19 = _swiftEmptyArrayStorage;
    swift_bridgeObjectRetain(v2);
    sub_10009A578(0, v3, 0);
    v7 = v2 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
    v8 = *(_QWORD *)(v6 + 72);
    v4 = _swiftEmptyArrayStorage;
    do
    {
      v9 = *(_QWORD *)(v0 + 272);
      v10 = *(_QWORD *)(v0 + 240);
      v11 = *(_QWORD *)(v0 + 208);
      sub_10005972C(v7, v11, type metadata accessor for OwnerSharingCircle);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v9, v11 + *(int *)(v18 + 20), v10);
      sub_1000126B0(v11, type metadata accessor for OwnerSharingCircle);
      if ((swift_isUniquelyReferenced_nonNull_native(v4) & 1) == 0)
      {
        sub_10009A578(0, v4[2] + 1, 1);
        v4 = v19;
      }
      v13 = v4[2];
      v12 = v4[3];
      if (v13 >= v12 >> 1)
      {
        sub_10009A578(v12 > 1, v13 + 1, 1);
        v4 = v19;
      }
      v14 = *(_QWORD *)(v0 + 272);
      v15 = *(_QWORD *)(v0 + 240);
      v4[2] = v13 + 1;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v5 + 32))((unint64_t)v4+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(_QWORD *)(v5 + 72) * v13, v14, v15);
      v19 = v4;
      v7 += v8;
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease();
  }
  v16 = *(_QWORD *)(v0 + 296);
  *(_QWORD *)(v0 + 336) = sub_10001B664((uint64_t)v4);
  swift_bridgeObjectRelease();
  return swift_task_switch(sub_100B6E890, v16, 0);
}

uint64_t sub_100B6E890()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v2 = (_QWORD *)swift_task_alloc(v1);
  *(_QWORD *)(v0 + 344) = v2;
  v3 = sub_10001A9A8(&qword_1010EE100);
  *v2 = v0;
  v2[1] = sub_100B6E90C;
  return unsafeBlocking<A>(_:)(v0 + 40, sub_100068004, *(_QWORD *)(v0 + 296), v3);
}

uint64_t sub_100B6E90C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 296);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 344));
  swift_release();
  return swift_task_switch(sub_100B6E96C, v1, 0);
}

uint64_t sub_100B6E96C()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[7];
  v0[44] = v0[5];
  return swift_task_switch(sub_100B6E988, v1, 0);
}

uint64_t sub_100B6E988()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v1 = sub_100B85BC4(*(_QWORD *)(v0 + 352), *(_QWORD **)(v0 + 336), type metadata accessor for OwnerSharingCircle, (void (*)(BOOL, uint64_t, uint64_t))sub_10009A520);
  *(_QWORD *)(v0 + 360) = v1;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v2 = (_QWORD *)swift_task_alloc(async function pointer to Array.asyncFlatMap<A>(_:)[1]);
  *(_QWORD *)(v0 + 368) = v2;
  v3 = sub_10001A9A8(&qword_1010EC8C8);
  v4 = sub_1000193A4(&qword_1010EC8D0, &qword_1010EC8C8, (const char *)&protocol conformance descriptor for [A]);
  *v2 = v0;
  v2[1] = sub_100B6EA68;
  return Array.asyncFlatMap<A>(_:)(&unk_101116520, *(_QWORD *)(v0 + 56), v1, *(_QWORD *)(v0 + 184), v3, v4);
}

uint64_t sub_100B6EA68(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 368);
  v5 = *(_QWORD *)(*v2 + 56);
  *(_QWORD *)(v3 + 376) = a1;
  *(_QWORD *)(v3 + 384) = v1;
  swift_task_dealloc(v4);
  return swift_task_switch(sub_100B6EAC8, v5, 0);
}

uint64_t sub_100B6EAC8()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  int64_t v3;
  uint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t);
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t (*v11)(uint64_t);
  void (*v12)(char *, uint64_t, uint64_t);
  char v13;
  uint64_t v14;
  char v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  uint64_t v21;
  int *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  int *v46;
  uint64_t *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;

  v1 = *(_QWORD **)(v0 + 48);
  v2 = v1[2];
  v3 = *(_QWORD *)(v2 + 16);
  if (v3)
  {
    v4 = *(_QWORD *)(v0 + 192);
    v80 = *(_QWORD *)(v0 + 200);
    v83 = *(_QWORD *)(v0 + 248);
    v5 = *(int **)(v0 + 184);
    swift_bridgeObjectRetain(v2);
    sub_10009A520(0, v3, 0);
    v78 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
    v6 = v2 + v78;
    v76 = *(_QWORD *)(v4 + 72);
    v7 = type metadata accessor for OwnerSharingCircle;
    do
    {
      v8 = *(_QWORD *)(v0 + 240);
      v10 = *(char **)(v0 + 200);
      v9 = *(_QWORD *)(v0 + 208);
      sub_10005972C(v6, v9, v7);
      v11 = v7;
      v12 = *(void (**)(char *, uint64_t, uint64_t))(v83 + 16);
      v12(&v10[v5[5]], v9 + v5[5], v8);
      v12(&v10[v5[6]], v9 + v5[6], v8);
      v7 = v11;
      v13 = *(_BYTE *)(v9 + v5[7]);
      v14 = *(_QWORD *)(v9 + v5[8]);
      v15 = *(_BYTE *)(v9 + v5[9]);
      *(_QWORD *)v10 = 0;
      *(_QWORD *)(v80 + 8) = 0xC000000000000000;
      v10[v5[7]] = v13;
      *(_QWORD *)&v10[v5[8]] = v14;
      v10[v5[9]] = v15;
      swift_bridgeObjectRetain(v14);
      sub_1000126B0(v9, v11);
      if ((swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage) & 1) == 0)
        sub_10009A520(0, _swiftEmptyArrayStorage[2] + 1, 1);
      v17 = _swiftEmptyArrayStorage[2];
      v16 = _swiftEmptyArrayStorage[3];
      if (v17 >= v16 >> 1)
        sub_10009A520(v16 > 1, v17 + 1, 1);
      v18 = *(_QWORD *)(v0 + 200);
      _swiftEmptyArrayStorage[2] = v17 + 1;
      sub_1000126EC(v18, (uint64_t)_swiftEmptyArrayStorage + v78 + v17 * v76, v11);
      v6 += v76;
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease();
    v1 = *(_QWORD **)(v0 + 48);
  }
  v19 = *v1;
  v20 = *(_QWORD *)(*v1 + 16);
  if (v20)
  {
    v81 = *(_QWORD *)(v0 + 248);
    v21 = *(_QWORD *)(v0 + 136);
    v22 = *(int **)(v0 + 128);
    v69 = *(_QWORD *)(v0 + 120);
    v71 = *(_QWORD *)(v0 + 96);
    v73 = *(_QWORD *)(v0 + 144);
    swift_bridgeObjectRetain(v19);
    sub_10009A6F4(0, v20, 0);
    v23 = v19 + ((*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80));
    v24 = *(_QWORD *)(v0 + 384);
    v26 = *(_QWORD *)(v0 + 256);
    v25 = *(_QWORD *)(v0 + 264);
    v27 = *(_QWORD *)(v0 + 240);
    v28 = *(_QWORD *)(v0 + 160);
    sub_10005972C(v23, v28, type metadata accessor for SharingCircleSecret);
    v29 = *(void (**)(uint64_t, uint64_t, uint64_t))(v81 + 16);
    v29(v25, v28 + v22[5], v27);
    v29(v26, v28 + v22[6], v27);
    v30 = v22[7];
    v31 = (uint64_t *)(v28 + v22[8]);
    v32 = *v31;
    v33 = v31[1];
    v34 = *(_QWORD *)(v28 + v30);
    v35 = *(void **)(v28 + v30 + 8);
    sub_10001BBBC(*v31, v33);
    swift_bridgeObjectRetain(v35);
    sub_100DFE068(v32, v33, v34, v35);
    if (v24)
    {
      swift_errorRelease(v24);
      v36 = 1;
    }
    else
    {
      v36 = 0;
    }
    v38 = *(_QWORD *)(v0 + 152);
    v37 = *(_QWORD *)(v0 + 160);
    v40 = *(_QWORD *)(v0 + 80);
    v39 = *(_QWORD *)(v0 + 88);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v71 + 56))(v40, v36, 1, v39);
    sub_10005972C(v37, v38, type metadata accessor for SharingCircleSecret);
    v41 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v71 + 48))(v40, 1, v39);
    v42 = *(_QWORD *)(v0 + 152);
    v43 = *(uint64_t **)(v0 + 120);
    if (v41 == 1)
    {
      v45 = *(_QWORD *)(v0 + 80);
      v44 = *(_QWORD *)(v0 + 88);
      v46 = v22;
      v47 = (uint64_t *)(v42 + v22[8]);
      v48 = *v47;
      v49 = v47[1];
      sub_10001BBBC(*v47, v49);
      sub_1000126B0(v42, type metadata accessor for SharingCircleSecret);
      *v43 = v48;
      *(_QWORD *)(v69 + 8) = v49;
      swift_storeEnumTagMultiPayload(v43, v44, 0);
      sub_100004048(v45, &qword_10110F130);
    }
    else
    {
      v50 = *(_QWORD *)(v0 + 80);
      sub_1000126B0(*(_QWORD *)(v0 + 152), type metadata accessor for SharingCircleSecret);
      sub_1000126EC(v50, (uint64_t)v43, type metadata accessor for SharingCircleSecretValue);
      v46 = v22;
    }
    v52 = *(_QWORD *)(v0 + 256);
    v51 = *(_QWORD *)(v0 + 264);
    v53 = *(_QWORD *)(v0 + 240);
    v54 = *(_QWORD **)(v0 + 144);
    v56 = *(_QWORD *)(v0 + 112);
    v55 = *(_QWORD *)(v0 + 120);
    v57 = *(_QWORD *)(v0 + 88);
    *v54 = 0;
    *(_QWORD *)(v73 + 8) = 0xC000000000000000;
    v29((uint64_t)v54 + v46[5], v51, v53);
    v29((uint64_t)v54 + v46[6], v52, v53);
    sub_10005972C(v55, v56, type metadata accessor for SharingCircleSecretValue);
    v58 = (char *)&loc_100B6EF78 + 4 * byte_100E62040[swift_getEnumCaseMultiPayload(v56, v57)];
    __asm { BR              X9 }
  }
  v59 = *(_QWORD *)(v0 + 384);
  sub_100ADA708((uint64_t)_swiftEmptyArrayStorage, (uint64_t)_swiftEmptyArrayStorage, *(_QWORD *)(v0 + 320), *(_QWORD *)(v0 + 360), *(void (**)(uint64_t, _UNKNOWN **, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(v0 + 376), *(_QWORD *)(v0 + 176));
  if (!v59)
    return swift_task_switch(sub_100B6F470, *(_QWORD *)(v0 + 296), 0);
  v60 = *(_QWORD *)(v0 + 272);
  v62 = *(_QWORD *)(v0 + 256);
  v61 = *(_QWORD *)(v0 + 264);
  v63 = *(_QWORD *)(v0 + 232);
  v64 = *(_QWORD *)(v0 + 200);
  v65 = *(_QWORD *)(v0 + 208);
  v67 = *(_QWORD *)(v0 + 168);
  v66 = *(_QWORD *)(v0 + 176);
  v70 = *(_QWORD *)(v0 + 160);
  v72 = *(_QWORD *)(v0 + 152);
  v74 = *(_QWORD *)(v0 + 144);
  v75 = *(_QWORD *)(v0 + 120);
  v77 = *(_QWORD *)(v0 + 112);
  v79 = *(_QWORD *)(v0 + 104);
  v82 = *(_QWORD *)(v0 + 80);
  v84 = *(_QWORD *)(v0 + 72);
  swift_task_dealloc(*(_QWORD *)(v0 + 280));
  swift_task_dealloc(v60);
  swift_task_dealloc(v61);
  swift_task_dealloc(v62);
  swift_task_dealloc(v63);
  swift_task_dealloc(v65);
  swift_task_dealloc(v64);
  swift_task_dealloc(v66);
  swift_task_dealloc(v67);
  swift_task_dealloc(v70);
  swift_task_dealloc(v72);
  swift_task_dealloc(v74);
  swift_task_dealloc(v75);
  swift_task_dealloc(v77);
  swift_task_dealloc(v79);
  swift_task_dealloc(v82);
  swift_task_dealloc(v84);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100B6F470()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 392) = *(_QWORD *)(*(_QWORD *)(v0 + 296) + 128);
  return swift_task_switch(sub_100B6F490, 0, 0);
}

uint64_t sub_100B6F490()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = v0[49];
  v2 = v0[22];
  v3 = swift_task_alloc(32);
  v0[50] = v3;
  *(_QWORD *)(v3 + 16) = v1;
  *(_QWORD *)(v3 + 24) = v2;
  v4 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  v0[51] = v4;
  *v4 = v0;
  v4[1] = sub_100B6F534;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v4, 0, 0, 0xD000000000000011, 0x8000000100EC6890, sub_100067DDC, v3, (char *)&type metadata for () + 8);
}

uint64_t sub_100B6F534()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 408);
  *(_QWORD *)(*v1 + 416) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_100B6F6DC;
  }
  else
  {
    swift_task_dealloc(*(_QWORD *)(v2 + 400));
    v4 = sub_100B6F5A0;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_100B6F5A0()
{
  uint64_t v0;

  return swift_task_switch(sub_100B6F5B4, *(_QWORD *)(v0 + 56), 0);
}

uint64_t sub_100B6F5B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v2 = *(_QWORD *)(v0 + 272);
  v1 = *(_QWORD *)(v0 + 280);
  v4 = *(_QWORD *)(v0 + 256);
  v3 = *(_QWORD *)(v0 + 264);
  v5 = *(_QWORD *)(v0 + 232);
  v7 = *(_QWORD *)(v0 + 200);
  v6 = *(_QWORD *)(v0 + 208);
  v9 = *(_QWORD *)(v0 + 168);
  v8 = *(_QWORD *)(v0 + 176);
  v11 = *(_QWORD *)(v0 + 160);
  v12 = *(_QWORD *)(v0 + 152);
  v13 = *(_QWORD *)(v0 + 144);
  v14 = *(_QWORD *)(v0 + 120);
  v15 = *(_QWORD *)(v0 + 112);
  v16 = *(_QWORD *)(v0 + 104);
  v17 = *(_QWORD *)(v0 + 80);
  v18 = *(_QWORD *)(v0 + 72);
  sub_100004048(v8, &qword_1010EC870);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100B6F6DC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 56);
  swift_task_dealloc(*(_QWORD *)(v0 + 400));
  return swift_task_switch(sub_100B6F71C, v1, 0);
}

uint64_t sub_100B6F71C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  sub_100004048(*(_QWORD *)(v0 + 176), &qword_1010EC870);
  v1 = *(_QWORD *)(v0 + 272);
  v3 = *(_QWORD *)(v0 + 256);
  v2 = *(_QWORD *)(v0 + 264);
  v4 = *(_QWORD *)(v0 + 232);
  v5 = *(_QWORD *)(v0 + 200);
  v6 = *(_QWORD *)(v0 + 208);
  v8 = *(_QWORD *)(v0 + 168);
  v7 = *(_QWORD *)(v0 + 176);
  v9 = *(_QWORD *)(v0 + 160);
  v11 = *(_QWORD *)(v0 + 152);
  v12 = *(_QWORD *)(v0 + 144);
  v13 = *(_QWORD *)(v0 + 120);
  v14 = *(_QWORD *)(v0 + 112);
  v15 = *(_QWORD *)(v0 + 104);
  v16 = *(_QWORD *)(v0 + 80);
  v17 = *(_QWORD *)(v0 + 72);
  swift_task_dealloc(*(_QWORD *)(v0 + 280));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v6);
  swift_task_dealloc(v5);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100B6F844(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2[5] = a1;
  v2[6] = v1;
  v3 = type metadata accessor for OwnerPeerTrust(0);
  v2[7] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[8] = v4;
  v2[9] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for UUID(0);
  v2[10] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v2[11] = v6;
  v7 = *(_QWORD *)(v6 + 64);
  v2[12] = v7;
  v8 = (v7 + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[13] = swift_task_alloc(v8);
  v2[14] = swift_task_alloc(v8);
  v9 = sub_10001A9A8(&qword_1010EE0E0);
  v2[15] = v9;
  v2[16] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for OwnerSharingCircle(0);
  v2[17] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v2[18] = v11;
  v2[19] = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100B6F930, v1, 0);
}

uint64_t sub_100B6F930()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 48) + 160);
  *(_QWORD *)(v0 + 160) = v1;
  return swift_task_switch(sub_100B6F94C, v1, 0);
}

uint64_t sub_100B6F94C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v1 = v0[20];
  v2 = v0[14];
  v4 = v0[11];
  v3 = v0[12];
  v5 = v0[10];
  v6 = v0[5];
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v0[21] = v7;
  v7(v2, v6, v5);
  v8 = *(unsigned __int8 *)(v4 + 80);
  v9 = (v8 + 24) & ~v8;
  v10 = swift_allocObject(&unk_1010AFAC0, v9 + v3, v8 | 7);
  v0[22] = v10;
  *(_QWORD *)(v10 + 16) = v1;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v10 + v9, v2, v5);
  v11 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v12 = (_QWORD *)swift_task_alloc(v11);
  v0[23] = v12;
  *v12 = v0;
  v12[1] = sub_100B6FA2C;
  return unsafeBlocking<A>(_:)(v0[16], sub_100B86154, v10, v0[15]);
}

uint64_t sub_100B6FA2C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 184));
  swift_release();
  return swift_task_switch(sub_100B6FA8C, v1, 0);
}

uint64_t sub_100B6FA8C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  _BOOL4 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  __n128 v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v27;
  uint64_t v28;
  _BYTE *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v1 = *(_QWORD *)(v0 + 136);
  v2 = *(_QWORD *)(v0 + 128);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 144) + 48))(v2, 1, v1) == 1)
  {
    sub_100004048(v2, &qword_1010EE0E0);
    if (qword_1010E9938 != -1)
      swift_once(&qword_1010E9938, sub_1000AFBB0);
    v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 168);
    v4 = *(_QWORD *)(v0 + 104);
    v5 = *(_QWORD *)(v0 + 80);
    v6 = *(_QWORD *)(v0 + 40);
    v7 = type metadata accessor for Logger(0);
    sub_10001A9E8(v7, (uint64_t)qword_1011B6748);
    v8 = v3(v4, v6, v5);
    v9 = Logger.logObject.getter(v8);
    v10 = static os_log_type_t.error.getter(v9);
    v11 = os_log_type_enabled(v9, v10);
    v12 = *(_QWORD *)(v0 + 104);
    v13 = *(_QWORD *)(v0 + 80);
    v14 = *(_QWORD *)(v0 + 88);
    if (v11)
    {
      v15 = swift_slowAlloc(22, -1);
      v16 = swift_slowAlloc(32, -1);
      v34 = v16;
      *(_DWORD *)v15 = 141558275;
      *(_QWORD *)(v0 + 16) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v15 + 4, v15 + 12);
      *(_WORD *)(v15 + 12) = 2081;
      v17 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v18 = dispatch thunk of CustomStringConvertible.description.getter(v13, v17);
      *(_QWORD *)(v0 + 24) = sub_100016940(v18, v19, &v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v15 + 14, v15 + 22);
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v12, v13);
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Failure on share re-create, share for %{private,mask.hash}s doesn't exist.", (uint8_t *)v15, 0x16u);
      swift_arrayDestroy(v16, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v16, -1, -1);
      swift_slowDealloc(v15, -1, -1);
    }
    else
    {
      (*(void (**)(_QWORD, _QWORD))(v14 + 8))(*(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 80));
    }

    v27 = sub_100067D98();
    v28 = swift_allocError(&type metadata for BeaconSharingFlowError, v27, 0, 0);
    *v29 = 4;
    swift_willThrow(v28);
    v30 = *(_QWORD *)(v0 + 128);
    v32 = *(_QWORD *)(v0 + 104);
    v31 = *(_QWORD *)(v0 + 112);
    v33 = *(_QWORD *)(v0 + 72);
    swift_task_dealloc(*(_QWORD *)(v0 + 152));
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v20 = *(_QWORD *)(v0 + 152);
    sub_1000126EC(v2, v20, type metadata accessor for OwnerSharingCircle);
    v21 = swift_bridgeObjectRetain(*(_QWORD *)(v20 + *(int *)(v1 + 32)));
    v22 = sub_100508A54(v21);
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 32) = v22;
    v23 = (_QWORD *)swift_task_alloc(async function pointer to Sequence.asyncCompactMap<A>(_:)[1]);
    *(_QWORD *)(v0 + 192) = v23;
    v24 = sub_10001A9A8((uint64_t *)&unk_1010F7730);
    v25 = sub_1000193A4((unint64_t *)&qword_1010F1DF8, (uint64_t *)&unk_1010F7730, (const char *)&protocol conformance descriptor for [A]);
    *v23 = v0;
    v23[1] = sub_100B6FE00;
    return Sequence.asyncCompactMap<A>(_:)(&unk_1011164F0, *(_QWORD *)(v0 + 48), v24, *(_QWORD *)(v0 + 56), v25);
  }
}

uint64_t sub_100B6FE00(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 192);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 48);
  *(_QWORD *)(*(_QWORD *)v1 + 200) = a1;
  swift_task_dealloc(v2);
  swift_bridgeObjectRelease();
  return swift_task_switch(sub_100B6FE68, v3, 0);
}

uint64_t sub_100B6FE68()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSString v9;
  id v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  _QWORD *v19;
  uint64_t v21;

  v1 = v0[25];
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v3 = v0[8];
    v21 = v0[7];
    v4 = (void *)objc_opt_self(SPHandle);
    v5 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v6 = *(_QWORD *)(v3 + 72);
    swift_bridgeObjectRetain(v1);
    do
    {
      v8 = v0[9];
      sub_10005972C(v5, v8, type metadata accessor for OwnerPeerTrust);
      swift_bridgeObjectRetain(*(_QWORD *)(v8 + *(int *)(v21 + 32) + 8));
      v9 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      v10 = objc_msgSend(v4, "handleWithString:", v9);

      v11 = sub_1000126B0(v8, type metadata accessor for OwnerPeerTrust);
      if (v10)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v11);
        v13 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10);
        v12 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (v13 >= v12 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1, v13 + 1, 1);
        v7 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v13, v10);
        specialized Array._endMutation()(v7);
      }
      v5 += v6;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease();
  }
  v14 = v0[19];
  v15 = v0[17];
  swift_bridgeObjectRelease();
  v16 = v14 + *(int *)(v15 + 24);
  v17 = sub_100CA827C((uint64_t)_swiftEmptyArrayStorage);
  v0[26] = v17;
  swift_bridgeObjectRelease();
  v18 = *(_BYTE *)(v14 + *(int *)(v15 + 28));
  v19 = (_QWORD *)swift_task_alloc(dword_1011163C4);
  v0[27] = v19;
  *v19 = v0;
  v19[1] = sub_100B70050;
  return sub_100B68548(v16, v17, v18);
}

uint64_t sub_100B70050()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 216);
  *(_QWORD *)(*v1 + 224) = v0;
  swift_task_dealloc(v3);
  v4 = *(_QWORD *)(v2 + 48);
  swift_bridgeObjectRelease();
  if (v0)
    v5 = sub_100B70144;
  else
    v5 = sub_100B700C0;
  return swift_task_switch(v5, v4, 0);
}

uint64_t sub_100B700C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 152);
  v2 = *(_QWORD *)(v0 + 128);
  v4 = *(_QWORD *)(v0 + 104);
  v3 = *(_QWORD *)(v0 + 112);
  v5 = *(_QWORD *)(v0 + 72);
  sub_1000126B0(v1, type metadata accessor for OwnerSharingCircle);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100B70144()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  sub_1000126B0(*(_QWORD *)(v0 + 152), type metadata accessor for OwnerSharingCircle);
  v1 = *(_QWORD *)(v0 + 128);
  v3 = *(_QWORD *)(v0 + 104);
  v2 = *(_QWORD *)(v0 + 112);
  v4 = *(_QWORD *)(v0 + 72);
  swift_task_dealloc(*(_QWORD *)(v0 + 152));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100B701C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  v4 = type metadata accessor for UUID(0);
  v3[5] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[6] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[7] = v6;
  v3[8] = swift_task_alloc((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100B7022C, 0, 0);
}

uint64_t sub_100B7022C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 32) + 160);
  *(_QWORD *)(v0 + 72) = v1;
  return swift_task_switch(sub_100B70248, v1, 0);
}

uint64_t sub_100B70248()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  v1 = v0[8];
  v2 = v0[9];
  v4 = v0[6];
  v3 = v0[7];
  v5 = v0[5];
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v4 + 16))(v1, v0[3], v5);
  v6 = *(unsigned __int8 *)(v4 + 80);
  v7 = (v6 + 24) & ~v6;
  v8 = swift_allocObject(&unk_1010AFAE8, v7 + v3, v6 | 7);
  v0[10] = v8;
  *(_QWORD *)(v8 + 16) = v2;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v8 + v7, v1, v5);
  v9 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v10 = (_QWORD *)swift_task_alloc(v9);
  v0[11] = v10;
  v11 = sub_10001A9A8((uint64_t *)&unk_1010EE160);
  *v10 = v0;
  v10[1] = sub_100899CE8;
  return unsafeBlocking<A>(_:)(v0[2], sub_100B861D0, v8, v11);
}

uint64_t sub_100B70330(uint64_t a1, char a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  int *v42;
  unint64_t v43;
  uint64_t v44;
  int *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  void (*v56)(void);
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  __int128 v94;
  uint64_t v95;
  uint64_t v96;

  *(_QWORD *)(v9 + 888) = v8;
  *(_QWORD *)(v9 + 880) = v96;
  *(_QWORD *)(v9 + 872) = v95;
  *(_OWORD *)(v9 + 856) = v94;
  v10 = type metadata accessor for CircleTrustAckEnvelopeV1(0);
  *(_QWORD *)(v9 + 896) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchWorkItemFlags(0);
  *(_QWORD *)(v9 + 904) = v11;
  v12 = *(_QWORD *)(v11 - 8);
  *(_QWORD *)(v9 + 912) = v12;
  *(_QWORD *)(v9 + 920) = swift_task_alloc((*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_10001A9A8(&qword_1010EC870);
  *(_QWORD *)(v9 + 928) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v13 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_10001A9A8((uint64_t *)&unk_1010EE180);
  *(_QWORD *)(v9 + 936) = v14;
  v15 = (*(_QWORD *)(*(_QWORD *)(v14 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v9 + 944) = swift_task_alloc(v15);
  *(_QWORD *)(v9 + 952) = swift_task_alloc(v15);
  v16 = type metadata accessor for Date(0);
  *(_QWORD *)(v9 + 960) = v16;
  v17 = *(_QWORD *)(v16 - 8);
  *(_QWORD *)(v9 + 968) = v17;
  *(_QWORD *)(v9 + 976) = swift_task_alloc((*(_QWORD *)(v17 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_10001A9A8((uint64_t *)&unk_101109120);
  *(_QWORD *)(v9 + 984) = v18;
  v19 = *(_QWORD *)(v18 - 8);
  *(_QWORD *)(v9 + 992) = v19;
  v20 = (*(_QWORD *)(v19 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v9 + 1000) = swift_task_alloc(v20);
  *(_QWORD *)(v9 + 1008) = swift_task_alloc(v20);
  *(_QWORD *)(v9 + 1016) = swift_task_alloc(v20);
  *(_QWORD *)(v9 + 1024) = swift_task_alloc(v20);
  v75 = type metadata accessor for UUID(0);
  *(_QWORD *)(v9 + 1032) = v75;
  v21 = *(_QWORD *)(v75 - 8);
  *(_QWORD *)(v9 + 1040) = v21;
  v22 = *(_QWORD *)(v21 + 64);
  *(_QWORD *)(v9 + 1048) = v22;
  v23 = (v22 + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v9 + 1056) = swift_task_alloc(v23);
  *(_QWORD *)(v9 + 1064) = swift_task_alloc(v23);
  *(_QWORD *)(v9 + 1072) = swift_task_alloc(v23);
  *(_QWORD *)(v9 + 1080) = swift_task_alloc(v23);
  *(_QWORD *)(v9 + 1088) = swift_task_alloc(v23);
  *(_QWORD *)(v9 + 1096) = swift_task_alloc(v23);
  *(_QWORD *)(v9 + 1104) = swift_task_alloc(v23);
  *(_QWORD *)(v9 + 1112) = swift_task_alloc(v23);
  *(_QWORD *)(v9 + 1120) = swift_task_alloc(v23);
  v24 = sub_10001A9A8(&qword_1010ED300);
  *(_QWORD *)(v9 + 1128) = v24;
  v25 = *(_QWORD *)(v24 - 8);
  *(_QWORD *)(v9 + 1136) = v25;
  v26 = (*(_QWORD *)(v25 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v9 + 1144) = swift_task_alloc(v26);
  *(_QWORD *)(v9 + 1152) = swift_task_alloc(v26);
  *(_QWORD *)(v9 + 1160) = swift_task_alloc(v26);
  *(_QWORD *)(v9 + 1168) = swift_task_alloc(v26);
  v27 = (*(_QWORD *)(*(_QWORD *)(sub_10001A9A8(&qword_1010EC868) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v9 + 1176) = swift_task_alloc(v27);
  *(_QWORD *)(v9 + 1184) = swift_task_alloc(v27);
  *(_QWORD *)(v9 + 1192) = swift_task_alloc(v27);
  *(_QWORD *)(v9 + 1200) = swift_task_alloc(v27);
  v28 = type metadata accessor for SharedBeaconRecord(0);
  *(_QWORD *)(v9 + 1208) = v28;
  v29 = *(_QWORD *)(v28 - 8);
  *(_QWORD *)(v9 + 1216) = v29;
  v30 = *(_QWORD *)(v29 + 64);
  *(_QWORD *)(v9 + 1224) = v30;
  v31 = (v30 + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v9 + 1232) = swift_task_alloc(v31);
  *(_QWORD *)(v9 + 1240) = swift_task_alloc(v31);
  *(_QWORD *)(v9 + 1248) = swift_task_alloc(v31);
  *(_QWORD *)(v9 + 1256) = swift_task_alloc(v31);
  *(_QWORD *)(v9 + 1264) = swift_task_alloc(v31);
  v32 = type metadata accessor for MemberPeerTrust(0);
  *(_QWORD *)(v9 + 1272) = v32;
  v33 = *(_QWORD *)(v32 - 8);
  *(_QWORD *)(v9 + 1280) = v33;
  v34 = (*(_QWORD *)(v33 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v9 + 1288) = swift_task_alloc(v34);
  *(_QWORD *)(v9 + 1296) = swift_task_alloc(v34);
  *(_QWORD *)(v9 + 1304) = swift_task_alloc(v34);
  *(_QWORD *)(v9 + 1312) = swift_task_alloc(v34);
  *(_QWORD *)(v9 + 1320) = swift_task_alloc(v34);
  *(_QWORD *)(v9 + 1328) = swift_task_alloc(v34);
  *(_QWORD *)(v9 + 1336) = swift_task_alloc(v34);
  *(_QWORD *)(v9 + 1344) = swift_task_alloc(v34);
  v35 = type metadata accessor for MemberSharingCircle(0);
  *(_QWORD *)(v9 + 1352) = v35;
  v36 = *(_QWORD *)(v35 - 8);
  *(_QWORD *)(v9 + 1360) = v36;
  v37 = *(_QWORD *)(v36 + 64);
  *(_QWORD *)(v9 + 1368) = v37;
  v38 = (v37 + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v9 + 1376) = swift_task_alloc(v38);
  *(_QWORD *)(v9 + 1384) = swift_task_alloc(v38);
  *(_QWORD *)(v9 + 1392) = swift_task_alloc(v38);
  *(_QWORD *)(v9 + 1400) = swift_task_alloc(v38);
  *(_QWORD *)(v9 + 1408) = swift_task_alloc(v38);
  *(_QWORD *)(v9 + 1416) = swift_task_alloc(v38);
  v39 = type metadata accessor for Logger(0);
  *(_QWORD *)(v9 + 1424) = v39;
  v40 = *(_QWORD *)(v39 - 8);
  *(_QWORD *)(v9 + 1432) = v40;
  v41 = (*(_QWORD *)(v40 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v9 + 1440) = swift_task_alloc(v41);
  *(_QWORD *)(v9 + 1448) = swift_task_alloc(v41);
  *(_QWORD *)(v9 + 1456) = swift_task_alloc(v41);
  *(_QWORD *)(v9 + 1464) = swift_task_alloc(v41);
  *(_QWORD *)(v9 + 1472) = swift_task_alloc(v41);
  *(_QWORD *)(v9 + 1480) = swift_task_alloc(v41);
  *(_QWORD *)(v9 + 1488) = swift_task_alloc(v41);
  *(_QWORD *)(v9 + 1496) = swift_task_alloc(v41);
  *(_QWORD *)(v9 + 1504) = swift_task_alloc(v41);
  *(_QWORD *)(v9 + 1512) = swift_task_alloc(v41);
  *(_QWORD *)(v9 + 1520) = swift_task_alloc(v41);
  *(_QWORD *)(v9 + 1528) = swift_task_alloc(v41);
  *(_QWORD *)(v9 + 1536) = swift_task_alloc(v41);
  *(_QWORD *)(v9 + 1544) = swift_task_alloc(v41);
  v42 = (int *)sub_10001A9A8(&qword_1010EE1E0);
  *(_QWORD *)(v9 + 1552) = v42;
  v43 = (*(_QWORD *)(*((_QWORD *)v42 - 1) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v9 + 1560) = swift_task_alloc(v43);
  *(_QWORD *)(v9 + 1568) = swift_task_alloc(v43);
  *(_QWORD *)(v9 + 1576) = swift_task_alloc(v43);
  *(_QWORD *)(v9 + 1584) = swift_task_alloc(v43);
  *(_QWORD *)(v9 + 1592) = swift_task_alloc(v43);
  *(_QWORD *)(v9 + 1600) = swift_task_alloc(v43);
  *(_QWORD *)(v9 + 1608) = swift_task_alloc(v43);
  *(_QWORD *)(v9 + 1616) = swift_task_alloc(v43);
  *(_QWORD *)(v9 + 1624) = swift_task_alloc(v43);
  *(_QWORD *)(v9 + 1632) = swift_task_alloc(v43);
  *(_QWORD *)(v9 + 1640) = swift_task_alloc(v43);
  *(_QWORD *)(v9 + 1648) = swift_task_alloc(v43);
  *(_QWORD *)(v9 + 1656) = swift_task_alloc(v43);
  *(_QWORD *)(v9 + 1664) = swift_task_alloc(v43);
  *(_QWORD *)(v9 + 1672) = swift_task_alloc(v43);
  *(_QWORD *)(v9 + 1680) = swift_task_alloc(v43);
  *(_QWORD *)(v9 + 1688) = swift_task_alloc(v43);
  *(_QWORD *)(v9 + 1696) = swift_task_alloc(v43);
  v44 = swift_task_alloc(v43);
  *(_QWORD *)(v9 + 1704) = v44;
  v45 = (int *)sub_10001A9A8(&qword_1010EE1E8);
  *(_QWORD *)(v9 + 1712) = v45;
  v46 = (*(_QWORD *)(*((_QWORD *)v45 - 1) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v9 + 1720) = swift_task_alloc(v46);
  *(_QWORD *)(v9 + 1728) = swift_task_alloc(v46);
  *(_QWORD *)(v9 + 1736) = swift_task_alloc(v46);
  *(_QWORD *)(v9 + 1744) = swift_task_alloc(v46);
  *(_QWORD *)(v9 + 1752) = swift_task_alloc(v46);
  *(_QWORD *)(v9 + 1760) = swift_task_alloc(v46);
  *(_QWORD *)(v9 + 1768) = swift_task_alloc(v46);
  *(_QWORD *)(v9 + 1776) = swift_task_alloc(v46);
  *(_QWORD *)(v9 + 1784) = swift_task_alloc(v46);
  *(_QWORD *)(v9 + 1792) = swift_task_alloc(v46);
  *(_QWORD *)(v9 + 1800) = swift_task_alloc(v46);
  *(_QWORD *)(v9 + 1808) = swift_task_alloc(v46);
  *(_QWORD *)(v9 + 1816) = swift_task_alloc(v46);
  v47 = swift_task_alloc(v46);
  *(_QWORD *)(v9 + 1824) = v47;
  v48 = v45[12];
  *(_DWORD *)(v9 + 2768) = v48;
  v49 = v45[16];
  *(_DWORD *)(v9 + 2772) = v49;
  v50 = v47 + v49;
  v51 = v45[20];
  *(_DWORD *)(v9 + 2776) = v51;
  v52 = (_QWORD *)(v47 + v51);
  v53 = v45[24];
  *(_DWORD *)(v9 + 2780) = v53;
  v54 = v45[28];
  *(_DWORD *)(v9 + 2784) = v54;
  v55 = (uint64_t *)(v47 + v54);
  v56 = *(void (**)(void))(v21 + 16);
  *(_QWORD *)(v9 + 1832) = v56;
  v56();
  *(_BYTE *)(v47 + v48) = a2;
  *(_BYTE *)v50 = a3;
  *(_QWORD *)(v50 + 8) = a4;
  *(_QWORD *)(v50 + 16) = a5;
  *v52 = a6;
  v52[1] = a7;
  *(_QWORD *)(v47 + v53) = a8;
  *v55 = v79;
  v55[1] = v80;
  v57 = v42[12];
  *(_DWORD *)(v9 + 2788) = v57;
  v58 = v44 + v57;
  v59 = v42[16];
  *(_DWORD *)(v9 + 2792) = v59;
  v60 = (_QWORD *)(v44 + v59);
  v61 = v42[20];
  *(_DWORD *)(v9 + 2796) = v61;
  v74 = (_QWORD *)(v44 + v61);
  v62 = v42[24];
  *(_DWORD *)(v9 + 2800) = v62;
  v63 = (_QWORD *)(v44 + v62);
  v64 = v42[28];
  *(_DWORD *)(v9 + 2804) = v64;
  v65 = v42[32];
  *(_DWORD *)(v9 + 2808) = v65;
  v66 = v42[36];
  *(_DWORD *)(v9 + 2812) = v66;
  v67 = v42[40];
  *(_DWORD *)(v9 + 2816) = v67;
  v68 = (_QWORD *)(v44 + v67);
  ((void (*)(uint64_t, uint64_t, uint64_t))v56)(v44, v81, v75);
  sub_10000F9B8(v82, v58, &qword_1010ED860);
  *v60 = v83;
  v60[1] = v84;
  *v74 = v85;
  v74[1] = v86;
  *v63 = v87;
  v63[1] = v88;
  *(_DWORD *)(v44 + v64) = v89;
  *(_DWORD *)(v44 + v65) = v90;
  *(_QWORD *)(v44 + v66) = v91;
  *v68 = v92;
  v68[1] = v93;
  ((void (*)())swift_bridgeObjectRetain)();
  ((void (*)())swift_bridgeObjectRetain)();
  ((void (*)())swift_bridgeObjectRetain)();
  ((void (*)())swift_bridgeObjectRetain)();
  ((void (*)())swift_bridgeObjectRetain)();
  ((void (*)())swift_bridgeObjectRetain)();
  sub_10001BBBC(v79, v80);
  ((void (*)())swift_bridgeObjectRetain)();
  return ((uint64_t (*)(uint64_t (*)(), _QWORD))swift_task_switch)(sub_100B70BF0, 0);
}

uint64_t sub_100B70BF0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int *v4;
  _QWORD *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSString v15;
  id v16;
  void (*v17)(uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  _BOOL4 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;

  v131 = *(int *)(v0 + 2780);
  v133 = *(int *)(v0 + 2784);
  v1 = *(int *)(v0 + 2768);
  v2 = *(_QWORD *)(v0 + 1824);
  v3 = *(_QWORD *)(v0 + 1816);
  v4 = *(int **)(v0 + 1712);
  v135 = *(_QWORD *)(v0 + 1032);
  v137 = *(_QWORD *)(v0 + 1040);
  v5 = (_QWORD *)(v2 + *(int *)(v0 + 2776));
  v6 = (char *)(v2 + *(int *)(v0 + 2772));
  v7 = v4[12];
  v8 = v3 + v4[16];
  v9 = (_QWORD *)(v3 + v4[20]);
  v10 = v4[24];
  v129 = v4[28];
  (*(void (**)(uint64_t, uint64_t))(v0 + 1832))(v3, v2);
  *(_BYTE *)(v3 + v7) = *(_BYTE *)(v2 + v1);
  v11 = *v6;
  v12 = *((_QWORD *)v6 + 1);
  v13 = *((_QWORD *)v6 + 2);
  *(_BYTE *)v8 = v11;
  *(_QWORD *)(v8 + 8) = v12;
  *(_QWORD *)(v8 + 16) = v13;
  v14 = v5[1];
  *v9 = *v5;
  v9[1] = v14;
  *(_QWORD *)(v3 + v10) = *(_QWORD *)(v2 + v131);
  *(_OWORD *)(v3 + v129) = *(_OWORD *)(v2 + v133);
  swift_bridgeObjectRetain(v13);
  v15 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  v16 = objc_msgSend(v15, "_stripPotentialTokenURIWithToken:", 0);

  v17 = *(void (**)(uint64_t, uint64_t))(v137 + 8);
  *(_QWORD *)(v0 + 1840) = v17;
  v17(v3, v135);
  if (!v16)
    goto LABEL_5;
  v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
  v20 = v19;

  _s12searchpartyd20MessagingDestinationV6stringACSgSS_tcfC_0(v18, v20);
  if (!v23)
    goto LABEL_5;
  v24 = v22;
  v25 = (unint64_t)v23;
  if ((sub_1008A4F38(v21, v22, v23) & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_5:
    v26 = *(_QWORD *)(*(_QWORD *)(v0 + 888) + 160);
    *(_QWORD *)(v0 + 1848) = v26;
    return swift_task_switch(sub_100B714A8, v26, 0);
  }
  if (qword_1010E9938 != -1)
    swift_once(&qword_1010E9938, sub_1000AFBB0);
  v28 = *(_QWORD *)(v0 + 1544);
  v29 = *(_QWORD *)(v0 + 1432);
  v30 = *(_QWORD *)(v0 + 1424);
  v31 = sub_10001A9E8(v30, (uint64_t)qword_1011B6748);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v29 + 16))(v28, v31, v30);
  swift_bridgeObjectRetain(v25);
  v33 = Logger.logObject.getter(v32);
  v34 = static os_log_type_t.default.getter(v33);
  v35 = os_log_type_enabled(v33, v34);
  v36 = *(_QWORD *)(v0 + 1544);
  v37 = *(_QWORD *)(v0 + 1432);
  v38 = *(_QWORD *)(v0 + 1424);
  if (v35)
  {
    v138 = *(_QWORD *)(v0 + 1544);
    v39 = swift_slowAlloc(22, -1);
    v40 = swift_slowAlloc(32, -1);
    v140 = v40;
    *(_DWORD *)v39 = 141558275;
    *(_QWORD *)(v0 + 848) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 848, v0 + 856, v39 + 4, v39 + 12);
    *(_WORD *)(v39 + 12) = 2081;
    swift_bridgeObjectRetain(v25);
    *(_QWORD *)(v0 + 592) = sub_100016940(v24, v25, &v140);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 592, v0 + 600, v39 + 14, v39 + 22);
    swift_bridgeObjectRelease_n(v25, 2);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v33, v34, "Got a share suggestion from a blocked contact with handle %{private,mask.hash}s. Ignore it.", (uint8_t *)v39, 0x16u);
    swift_arrayDestroy(v40, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v40, -1, -1);
    swift_slowDealloc(v39, -1, -1);

    (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v138, v38);
  }
  else
  {
    swift_bridgeObjectRelease_n(v25, 2);

    (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v36, v38);
  }
  v41 = *(_QWORD *)(v0 + 1824);
  v42 = *(_QWORD *)(v0 + 1816);
  v43 = *(_QWORD *)(v0 + 1808);
  v44 = *(_QWORD *)(v0 + 1800);
  v45 = *(_QWORD *)(v0 + 1792);
  v46 = *(_QWORD *)(v0 + 1784);
  v47 = *(_QWORD *)(v0 + 1776);
  v48 = *(_QWORD *)(v0 + 1768);
  v50 = *(_QWORD *)(v0 + 1760);
  v51 = *(_QWORD *)(v0 + 1752);
  v52 = *(_QWORD *)(v0 + 1744);
  v53 = *(_QWORD *)(v0 + 1736);
  v54 = *(_QWORD *)(v0 + 1728);
  v55 = *(_QWORD *)(v0 + 1720);
  v49 = *(_QWORD *)(v0 + 1704);
  v56 = *(_QWORD *)(v0 + 1696);
  v57 = *(_QWORD *)(v0 + 1688);
  v58 = *(_QWORD *)(v0 + 1680);
  v59 = *(_QWORD *)(v0 + 1672);
  v60 = *(_QWORD *)(v0 + 1664);
  v61 = *(_QWORD *)(v0 + 1656);
  v62 = *(_QWORD *)(v0 + 1648);
  v63 = *(_QWORD *)(v0 + 1640);
  v64 = *(_QWORD *)(v0 + 1632);
  v65 = *(_QWORD *)(v0 + 1624);
  v66 = *(_QWORD *)(v0 + 1616);
  v67 = *(_QWORD *)(v0 + 1608);
  v68 = *(_QWORD *)(v0 + 1600);
  v69 = *(_QWORD *)(v0 + 1592);
  v70 = *(_QWORD *)(v0 + 1584);
  v71 = *(_QWORD *)(v0 + 1576);
  v72 = *(_QWORD *)(v0 + 1568);
  v73 = *(_QWORD *)(v0 + 1560);
  v74 = *(_QWORD *)(v0 + 1544);
  v75 = *(_QWORD *)(v0 + 1536);
  v76 = *(_QWORD *)(v0 + 1528);
  v77 = *(_QWORD *)(v0 + 1520);
  v78 = *(_QWORD *)(v0 + 1512);
  v79 = *(_QWORD *)(v0 + 1504);
  v80 = *(_QWORD *)(v0 + 1496);
  v81 = *(_QWORD *)(v0 + 1488);
  v82 = *(_QWORD *)(v0 + 1480);
  v83 = *(_QWORD *)(v0 + 1472);
  v84 = *(_QWORD *)(v0 + 1464);
  v85 = *(_QWORD *)(v0 + 1456);
  v86 = *(_QWORD *)(v0 + 1448);
  v87 = *(_QWORD *)(v0 + 1440);
  v88 = *(_QWORD *)(v0 + 1416);
  v89 = *(_QWORD *)(v0 + 1408);
  v90 = *(_QWORD *)(v0 + 1400);
  v91 = *(_QWORD *)(v0 + 1392);
  v92 = *(_QWORD *)(v0 + 1384);
  v93 = *(_QWORD *)(v0 + 1376);
  v94 = *(_QWORD *)(v0 + 1344);
  v95 = *(_QWORD *)(v0 + 1336);
  v96 = *(_QWORD *)(v0 + 1328);
  v97 = *(_QWORD *)(v0 + 1320);
  v98 = *(_QWORD *)(v0 + 1312);
  v99 = *(_QWORD *)(v0 + 1304);
  v100 = *(_QWORD *)(v0 + 1296);
  v101 = *(_QWORD *)(v0 + 1288);
  v102 = *(_QWORD *)(v0 + 1264);
  v103 = *(_QWORD *)(v0 + 1256);
  v104 = *(_QWORD *)(v0 + 1248);
  v105 = *(_QWORD *)(v0 + 1240);
  v106 = *(_QWORD *)(v0 + 1232);
  v107 = *(_QWORD *)(v0 + 1200);
  v108 = *(_QWORD *)(v0 + 1192);
  v109 = *(_QWORD *)(v0 + 1184);
  v110 = *(_QWORD *)(v0 + 1176);
  v111 = *(_QWORD *)(v0 + 1168);
  v112 = *(_QWORD *)(v0 + 1160);
  v113 = *(_QWORD *)(v0 + 1152);
  v114 = *(_QWORD *)(v0 + 1144);
  v115 = *(_QWORD *)(v0 + 1120);
  v116 = *(_QWORD *)(v0 + 1112);
  v117 = *(_QWORD *)(v0 + 1104);
  v118 = *(_QWORD *)(v0 + 1096);
  v119 = *(_QWORD *)(v0 + 1088);
  v120 = *(_QWORD *)(v0 + 1080);
  v121 = *(_QWORD *)(v0 + 1072);
  v122 = *(_QWORD *)(v0 + 1064);
  v123 = *(_QWORD *)(v0 + 1056);
  v124 = *(_QWORD *)(v0 + 1024);
  v125 = *(_QWORD *)(v0 + 1016);
  v126 = *(_QWORD *)(v0 + 1008);
  v127 = *(_QWORD *)(v0 + 1000);
  v128 = *(_QWORD *)(v0 + 976);
  v130 = *(_QWORD *)(v0 + 952);
  v132 = *(_QWORD *)(v0 + 944);
  v134 = *(_QWORD *)(v0 + 928);
  v136 = *(_QWORD *)(v0 + 920);
  v139 = *(_QWORD *)(v0 + 896);
  sub_100004048(v49, &qword_1010EE1E0);
  sub_100004048(v41, &qword_1010EE1E8);
  swift_task_dealloc(v41);
  swift_task_dealloc(v42);
  swift_task_dealloc(v43);
  swift_task_dealloc(v44);
  swift_task_dealloc(v45);
  swift_task_dealloc(v46);
  swift_task_dealloc(v47);
  swift_task_dealloc(v48);
  swift_task_dealloc(v50);
  swift_task_dealloc(v51);
  swift_task_dealloc(v52);
  swift_task_dealloc(v53);
  swift_task_dealloc(v54);
  swift_task_dealloc(v55);
  swift_task_dealloc(v49);
  swift_task_dealloc(v56);
  swift_task_dealloc(v57);
  swift_task_dealloc(v58);
  swift_task_dealloc(v59);
  swift_task_dealloc(v60);
  swift_task_dealloc(v61);
  swift_task_dealloc(v62);
  swift_task_dealloc(v63);
  swift_task_dealloc(v64);
  swift_task_dealloc(v65);
  swift_task_dealloc(v66);
  swift_task_dealloc(v67);
  swift_task_dealloc(v68);
  swift_task_dealloc(v69);
  swift_task_dealloc(v70);
  swift_task_dealloc(v71);
  swift_task_dealloc(v72);
  swift_task_dealloc(v73);
  swift_task_dealloc(v74);
  swift_task_dealloc(v75);
  swift_task_dealloc(v76);
  swift_task_dealloc(v77);
  swift_task_dealloc(v78);
  swift_task_dealloc(v79);
  swift_task_dealloc(v80);
  swift_task_dealloc(v81);
  swift_task_dealloc(v82);
  swift_task_dealloc(v83);
  swift_task_dealloc(v84);
  swift_task_dealloc(v85);
  swift_task_dealloc(v86);
  swift_task_dealloc(v87);
  swift_task_dealloc(v88);
  swift_task_dealloc(v89);
  swift_task_dealloc(v90);
  swift_task_dealloc(v91);
  swift_task_dealloc(v92);
  swift_task_dealloc(v93);
  swift_task_dealloc(v94);
  swift_task_dealloc(v95);
  swift_task_dealloc(v96);
  swift_task_dealloc(v97);
  swift_task_dealloc(v98);
  swift_task_dealloc(v99);
  swift_task_dealloc(v100);
  swift_task_dealloc(v101);
  swift_task_dealloc(v102);
  swift_task_dealloc(v103);
  swift_task_dealloc(v104);
  swift_task_dealloc(v105);
  swift_task_dealloc(v106);
  swift_task_dealloc(v107);
  swift_task_dealloc(v108);
  swift_task_dealloc(v109);
  swift_task_dealloc(v110);
  swift_task_dealloc(v111);
  swift_task_dealloc(v112);
  swift_task_dealloc(v113);
  swift_task_dealloc(v114);
  swift_task_dealloc(v115);
  swift_task_dealloc(v116);
  swift_task_dealloc(v117);
  swift_task_dealloc(v118);
  swift_task_dealloc(v119);
  swift_task_dealloc(v120);
  swift_task_dealloc(v121);
  swift_task_dealloc(v122);
  swift_task_dealloc(v123);
  swift_task_dealloc(v124);
  swift_task_dealloc(v125);
  swift_task_dealloc(v126);
  swift_task_dealloc(v127);
  swift_task_dealloc(v128);
  swift_task_dealloc(v130);
  swift_task_dealloc(v132);
  swift_task_dealloc(v134);
  swift_task_dealloc(v136);
  swift_task_dealloc(v139);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100B714A8()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 1856) = *(_QWORD *)(*(_QWORD *)(v0 + 1848) + 128);
  return swift_task_switch(sub_100B714C8, 0, 0);
}

uint64_t sub_100B714C8()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v0 + 1864) = v1;
  *v1 = v0;
  v1[1] = sub_100B71550;
  return withCheckedContinuation<A>(isolation:function:_:)(v1, 0, 0, 0x696176416E656877, 0xEF2928656C62616CLL, sub_100068180, *(_QWORD *)(v0 + 1856), &type metadata for () + 1);
}

uint64_t sub_100B71550()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 1864));
  return swift_task_switch(sub_100B715A4, 0, 0);
}

uint64_t sub_100B715A4()
{
  uint64_t v0;

  return swift_task_switch(sub_100B715B8, *(_QWORD *)(v0 + 888), 0);
}

uint64_t sub_100B715B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int (*v46)(uint64_t, uint64_t, uint64_t);
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  _BYTE *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  NSObject *v56;
  os_log_type_t v57;
  _BOOL4 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint8_t *v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int *v72;
  uint64_t v73;
  uint64_t v74;
  int *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void (*v80)(uint64_t, uint64_t, uint64_t);
  uint64_t v81;
  _QWORD *v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  _QWORD *v88;
  _QWORD *v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  NSObject *v97;
  os_log_type_t v98;
  void (*v99)(uint64_t, uint64_t, uint64_t);
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  int *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  _QWORD *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  _QWORD *v116;
  _QWORD *v117;
  _QWORD *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  _QWORD *v203;
  uint64_t v204;
  uint64_t *v205;
  _QWORD *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  void (*v223)(uint64_t, uint64_t, uint64_t);
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  _QWORD *v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  unint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  void (*v239)(uint64_t, uint64_t, uint64_t);
  uint64_t v240;
  _QWORD *v241;
  uint64_t v242;
  uint64_t v243;
  _QWORD *v244;
  os_log_type_t v245;
  uint64_t v246;
  _QWORD *v247;
  uint64_t v248;
  uint64_t v249;
  _QWORD *v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  NSObject *v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  void (*v269)(uint64_t, uint64_t, uint64_t);
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t *v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  void (*v282)(uint64_t, uint64_t);
  uint64_t v283;
  void (*v284)(uint64_t, uint64_t, __n128);
  uint64_t v285;
  void (*v286)(uint64_t, uint64_t, uint64_t);
  uint64_t v287;
  uint64_t v288[16];

  v278 = *(int *)(v0 + 2784);
  v284 = *(void (**)(uint64_t, uint64_t, __n128))(v0 + 1840);
  v269 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1832);
  v275 = *(int *)(v0 + 2780);
  v264 = *(int *)(v0 + 2768);
  v1 = *(_QWORD *)(v0 + 1824);
  v2 = *(_QWORD *)(v0 + 1816);
  v3 = *(int **)(v0 + 1712);
  v4 = *(_QWORD *)(v0 + 1272);
  v5 = *(_QWORD *)(v0 + 1200);
  v6 = *(_QWORD *)(v0 + 1032);
  v7 = (_QWORD *)(v1 + *(int *)(v0 + 2776));
  v8 = v1 + *(int *)(v0 + 2772);
  v9 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 1280) + 56);
  *(_QWORD *)(v0 + 1872) = v9;
  v9(v5, 1, 1, v4);
  v10 = v3[12];
  v11 = v2 + v3[16];
  v12 = (_QWORD *)(v2 + v3[20]);
  v259 = v3[24];
  v13 = v3[28];
  v269(v2, v1, v6);
  *(_BYTE *)(v2 + v10) = *(_BYTE *)(v1 + v264);
  v14 = *(_QWORD *)(v8 + 8);
  v15 = *(_QWORD *)(v8 + 16);
  *(_BYTE *)v11 = *(_BYTE *)v8;
  *(_QWORD *)(v11 + 8) = v14;
  *(_QWORD *)(v11 + 16) = v15;
  v16 = v7[1];
  *v12 = *v7;
  v12[1] = v16;
  v17 = *(_QWORD *)(v1 + v275);
  *(_QWORD *)(v0 + 1880) = v17;
  *(_QWORD *)(v2 + v259) = v17;
  *(_OWORD *)(v2 + v13) = *(_OWORD *)(v1 + v278);
  v18 = swift_bridgeObjectRetain(v17);
  v284(v2, v6, v18);
  v19 = *(_QWORD *)(v17 + 16);
  *(_QWORD *)(v0 + 1888) = v19;
  if (v19)
  {
    v20 = *(_QWORD *)(v0 + 1168);
    v21 = *(_QWORD *)(v0 + 1136);
    v22 = *(_QWORD *)(v0 + 1128);
    v285 = *(_QWORD *)(v0 + 1040);
    v23 = *(_QWORD *)(v0 + 888);
    v24 = *(int *)(v22 + 48);
    *(_DWORD *)(v0 + 2820) = v24;
    v25 = (uint64_t *)(v20 + v24);
    v26 = *(int *)(v22 + 64);
    *(_DWORD *)(v0 + 2824) = v26;
    v276 = (uint64_t *)(v20 + v26);
    *(_QWORD *)(v0 + 1896) = *(_QWORD *)(v23 + 288);
    LODWORD(v23) = *(_DWORD *)(v21 + 80);
    *(_DWORD *)(v0 + 2828) = v23;
    *(_QWORD *)(v0 + 1904) = *(_QWORD *)(v21 + 72);
    *(_QWORD *)(v0 + 1928) = _swiftEmptyArrayStorage;
    *(_QWORD *)(v0 + 1920) = 0;
    *(_QWORD *)(v0 + 1912) = _swiftEmptyDictionarySingleton;
    v279 = *(int *)(v0 + 2768);
    v270 = *(_QWORD *)(v0 + 1824);
    v27 = *(_QWORD *)(v0 + 1160);
    v260 = *(_QWORD *)(v0 + 1032);
    v28 = v270 + *(int *)(v0 + 2772);
    sub_10000F9B8(*(_QWORD *)(v0 + 1880) + ((v23 + 32) & ~(unint64_t)v23), v20, &qword_1010ED300);
    v29 = *(int *)(v22 + 48);
    *(_DWORD *)(v0 + 2832) = v29;
    v30 = (uint64_t *)(v27 + v29);
    v31 = *(int *)(v22 + 64);
    *(_DWORD *)(v0 + 2836) = v31;
    v32 = (uint64_t *)(v27 + v31);
    v33 = *v25;
    v34 = v25[1];
    v265 = *v25;
    v35 = *v276;
    v36 = v276[1];
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v285 + 32))(v27, v20, v260);
    *v30 = v33;
    v30[1] = v34;
    *v32 = v35;
    v32[1] = v36;
    v38 = *(_QWORD *)(v28 + 8);
    v37 = *(_QWORD *)(v28 + 16);
    LOBYTE(v30) = *(_BYTE *)(v270 + v279);
    v39 = (_QWORD *)swift_task_alloc(dword_101112084);
    *(_QWORD *)(v0 + 1936) = v39;
    *v39 = v0;
    v39[1] = sub_100B72830;
    v40 = *(_QWORD *)(v0 + 1336);
    v41 = *(_QWORD *)(v0 + 1160);
    v288[14] = v38;
    v288[15] = v37;
    return sub_100AADCC8(v40, (char)v30, v41, v265, v34, v35, v36);
  }
  else
  {
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 1960) = _swiftEmptyArrayStorage;
    *(_QWORD *)(v0 + 1952) = _swiftEmptyDictionarySingleton;
    v43 = *(_QWORD *)(v0 + 1280);
    v44 = *(_QWORD *)(v0 + 1272);
    v45 = *(_QWORD *)(v0 + 1184);
    sub_10000F9B8(*(_QWORD *)(v0 + 1200), v45, &qword_1010EC868);
    v46 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v43 + 48);
    *(_QWORD *)(v0 + 1968) = v46;
    if (v46(v45, 1, v44) == 1)
    {
      v47 = *(_QWORD *)(v0 + 1184);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_100004048(v47, &qword_1010EC868);
      v48 = sub_100986460();
      v49 = swift_allocError(&type metadata for CircleTrustServiceError, v48, 0, 0);
      *v50 = 4;
      swift_willThrow(v49);
      if (qword_1010E9938 != -1)
        swift_once(&qword_1010E9938, sub_1000AFBB0);
      v51 = *(_QWORD *)(v0 + 1472);
      v52 = *(_QWORD *)(v0 + 1432);
      v53 = *(_QWORD *)(v0 + 1424);
      v54 = sub_10001A9E8(v53, (uint64_t)qword_1011B6748);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v52 + 16))(v51, v54, v53);
      swift_errorRetain(v49);
      v55 = swift_errorRetain(v49);
      v56 = Logger.logObject.getter(v55);
      v57 = static os_log_type_t.error.getter(v56);
      v58 = os_log_type_enabled(v56, v57);
      v59 = *(_QWORD *)(v0 + 1472);
      v60 = *(_QWORD *)(v0 + 1432);
      v61 = *(_QWORD *)(v0 + 1424);
      v62 = *(_QWORD *)(v0 + 1200);
      if (v58)
      {
        v280 = *(_QWORD *)(v0 + 1424);
        v271 = *(_QWORD *)(v0 + 1432);
        v63 = (uint8_t *)swift_slowAlloc(12, -1);
        v64 = swift_slowAlloc(32, -1);
        v288[0] = v64;
        *(_DWORD *)v63 = 136315138;
        swift_getErrorValue(v49, v0 + 800, v0 + 392);
        v65 = Error.localizedDescription.getter(*(_QWORD *)(v0 + 400), *(_QWORD *)(v0 + 408));
        *(_QWORD *)(v0 + 688) = sub_100016940(v65, v66, v288);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 688, v0 + 696, v63 + 4, v63 + 12);
        swift_bridgeObjectRelease();
        swift_errorRelease(v49);
        swift_errorRelease(v49);
        _os_log_impl((void *)&_mh_execute_header, v56, v57, "Failure on handleCircleTrust, preparing initial data: %s", v63, 0xCu);
        swift_arrayDestroy(v64, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v64, -1, -1);
        swift_slowDealloc(v63, -1, -1);

        swift_errorRelease(v49);
        (*(void (**)(uint64_t, uint64_t))(v271 + 8))(v59, v280);
      }
      else
      {

        swift_errorRelease(v49);
        swift_errorRelease(v49);
        swift_errorRelease(v49);
        (*(void (**)(uint64_t, uint64_t))(v60 + 8))(v59, v61);
      }
      sub_100004048(v62, &qword_1010EC868);
      v125 = *(_QWORD *)(v0 + 1824);
      v126 = *(_QWORD *)(v0 + 1816);
      v127 = *(_QWORD *)(v0 + 1808);
      v128 = *(_QWORD *)(v0 + 1800);
      v129 = *(_QWORD *)(v0 + 1792);
      v130 = *(_QWORD *)(v0 + 1784);
      v131 = *(_QWORD *)(v0 + 1776);
      v132 = *(_QWORD *)(v0 + 1768);
      v140 = *(_QWORD *)(v0 + 1760);
      v141 = *(_QWORD *)(v0 + 1752);
      v142 = *(_QWORD *)(v0 + 1744);
      v143 = *(_QWORD *)(v0 + 1736);
      v144 = *(_QWORD *)(v0 + 1728);
      v145 = *(_QWORD *)(v0 + 1720);
      v133 = *(_QWORD *)(v0 + 1704);
      v146 = *(_QWORD *)(v0 + 1696);
      v147 = *(_QWORD *)(v0 + 1688);
      v148 = *(_QWORD *)(v0 + 1680);
      v149 = *(_QWORD *)(v0 + 1672);
      v150 = *(_QWORD *)(v0 + 1664);
      v151 = *(_QWORD *)(v0 + 1656);
      v152 = *(_QWORD *)(v0 + 1648);
      v153 = *(_QWORD *)(v0 + 1640);
      v154 = *(_QWORD *)(v0 + 1632);
      v155 = *(_QWORD *)(v0 + 1624);
      v156 = *(_QWORD *)(v0 + 1616);
      v157 = *(_QWORD *)(v0 + 1608);
      v158 = *(_QWORD *)(v0 + 1600);
      v159 = *(_QWORD *)(v0 + 1592);
      v160 = *(_QWORD *)(v0 + 1584);
      v161 = *(_QWORD *)(v0 + 1576);
      v162 = *(_QWORD *)(v0 + 1568);
      v163 = *(_QWORD *)(v0 + 1560);
      v164 = *(_QWORD *)(v0 + 1544);
      v165 = *(_QWORD *)(v0 + 1536);
      v166 = *(_QWORD *)(v0 + 1528);
      v167 = *(_QWORD *)(v0 + 1520);
      v168 = *(_QWORD *)(v0 + 1512);
      v169 = *(_QWORD *)(v0 + 1504);
      v170 = *(_QWORD *)(v0 + 1496);
      v171 = *(_QWORD *)(v0 + 1488);
      v172 = *(_QWORD *)(v0 + 1480);
      v173 = *(_QWORD *)(v0 + 1472);
      v174 = *(_QWORD *)(v0 + 1464);
      v175 = *(_QWORD *)(v0 + 1456);
      v176 = *(_QWORD *)(v0 + 1448);
      v177 = *(_QWORD *)(v0 + 1440);
      v178 = *(_QWORD *)(v0 + 1416);
      v179 = *(_QWORD *)(v0 + 1408);
      v180 = *(_QWORD *)(v0 + 1400);
      v181 = *(_QWORD *)(v0 + 1392);
      v182 = *(_QWORD *)(v0 + 1384);
      v183 = *(_QWORD *)(v0 + 1376);
      v184 = *(_QWORD *)(v0 + 1344);
      v185 = *(_QWORD *)(v0 + 1336);
      v186 = *(_QWORD *)(v0 + 1328);
      v187 = *(_QWORD *)(v0 + 1320);
      v188 = *(_QWORD *)(v0 + 1312);
      v189 = *(_QWORD *)(v0 + 1304);
      v190 = *(_QWORD *)(v0 + 1296);
      v191 = *(_QWORD *)(v0 + 1288);
      v192 = *(_QWORD *)(v0 + 1264);
      v193 = *(_QWORD *)(v0 + 1256);
      v194 = *(_QWORD *)(v0 + 1248);
      v195 = *(_QWORD *)(v0 + 1240);
      v196 = *(_QWORD *)(v0 + 1232);
      v197 = *(_QWORD *)(v0 + 1200);
      v198 = *(_QWORD *)(v0 + 1192);
      v199 = *(_QWORD *)(v0 + 1184);
      v200 = *(_QWORD *)(v0 + 1176);
      v201 = *(_QWORD *)(v0 + 1168);
      v204 = *(_QWORD *)(v0 + 1160);
      v207 = *(_QWORD *)(v0 + 1152);
      v211 = *(_QWORD *)(v0 + 1144);
      v215 = *(_QWORD *)(v0 + 1120);
      v219 = *(_QWORD *)(v0 + 1112);
      v224 = *(_QWORD *)(v0 + 1104);
      v227 = *(_QWORD *)(v0 + 1096);
      v231 = *(_QWORD *)(v0 + 1088);
      v235 = *(_QWORD *)(v0 + 1080);
      v240 = *(_QWORD *)(v0 + 1072);
      v243 = *(_QWORD *)(v0 + 1064);
      v246 = *(_QWORD *)(v0 + 1056);
      v249 = *(_QWORD *)(v0 + 1024);
      v252 = *(_QWORD *)(v0 + 1016);
      v255 = *(_QWORD *)(v0 + 1008);
      v258 = *(_QWORD *)(v0 + 1000);
      v263 = *(_QWORD *)(v0 + 976);
      v268 = *(_QWORD *)(v0 + 952);
      v274 = *(_QWORD *)(v0 + 944);
      v277 = *(_QWORD *)(v0 + 928);
      v283 = *(_QWORD *)(v0 + 920);
      v287 = *(_QWORD *)(v0 + 896);
      sub_100004048(v133, &qword_1010EE1E0);
      sub_100004048(v125, &qword_1010EE1E8);
      swift_task_dealloc(v125);
      swift_task_dealloc(v126);
      swift_task_dealloc(v127);
      swift_task_dealloc(v128);
      swift_task_dealloc(v129);
      swift_task_dealloc(v130);
      swift_task_dealloc(v131);
      swift_task_dealloc(v132);
      swift_task_dealloc(v140);
      swift_task_dealloc(v141);
      swift_task_dealloc(v142);
      swift_task_dealloc(v143);
      swift_task_dealloc(v144);
      swift_task_dealloc(v145);
      swift_task_dealloc(v133);
      swift_task_dealloc(v146);
      swift_task_dealloc(v147);
      swift_task_dealloc(v148);
      swift_task_dealloc(v149);
      swift_task_dealloc(v150);
      swift_task_dealloc(v151);
      swift_task_dealloc(v152);
      swift_task_dealloc(v153);
      swift_task_dealloc(v154);
      swift_task_dealloc(v155);
      swift_task_dealloc(v156);
      swift_task_dealloc(v157);
      swift_task_dealloc(v158);
      swift_task_dealloc(v159);
      swift_task_dealloc(v160);
      swift_task_dealloc(v161);
      swift_task_dealloc(v162);
      swift_task_dealloc(v163);
      swift_task_dealloc(v164);
      swift_task_dealloc(v165);
      swift_task_dealloc(v166);
      swift_task_dealloc(v167);
      swift_task_dealloc(v168);
      swift_task_dealloc(v169);
      swift_task_dealloc(v170);
      swift_task_dealloc(v171);
      swift_task_dealloc(v172);
      swift_task_dealloc(v173);
      swift_task_dealloc(v174);
      swift_task_dealloc(v175);
      swift_task_dealloc(v176);
      swift_task_dealloc(v177);
      swift_task_dealloc(v178);
      swift_task_dealloc(v179);
      swift_task_dealloc(v180);
      swift_task_dealloc(v181);
      swift_task_dealloc(v182);
      swift_task_dealloc(v183);
      swift_task_dealloc(v184);
      swift_task_dealloc(v185);
      swift_task_dealloc(v186);
      swift_task_dealloc(v187);
      swift_task_dealloc(v188);
      swift_task_dealloc(v189);
      swift_task_dealloc(v190);
      swift_task_dealloc(v191);
      swift_task_dealloc(v192);
      swift_task_dealloc(v193);
      swift_task_dealloc(v194);
      swift_task_dealloc(v195);
      swift_task_dealloc(v196);
      swift_task_dealloc(v197);
      swift_task_dealloc(v198);
      swift_task_dealloc(v199);
      swift_task_dealloc(v200);
      swift_task_dealloc(v201);
      swift_task_dealloc(v204);
      swift_task_dealloc(v207);
      swift_task_dealloc(v211);
      swift_task_dealloc(v215);
      swift_task_dealloc(v219);
      swift_task_dealloc(v224);
      swift_task_dealloc(v227);
      swift_task_dealloc(v231);
      swift_task_dealloc(v235);
      swift_task_dealloc(v240);
      swift_task_dealloc(v243);
      swift_task_dealloc(v246);
      swift_task_dealloc(v249);
      swift_task_dealloc(v252);
      swift_task_dealloc(v255);
      swift_task_dealloc(v258);
      swift_task_dealloc(v263);
      swift_task_dealloc(v268);
      swift_task_dealloc(v274);
      swift_task_dealloc(v277);
      swift_task_dealloc(v283);
      swift_task_dealloc(v287);
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
    else
    {
      v67 = *(_QWORD *)(v0 + 1344);
      v68 = *(_QWORD *)(v0 + 1320);
      sub_1000126EC(*(_QWORD *)(v0 + 1184), v68, type metadata accessor for MemberPeerTrust);
      sub_10005972C(v68, v67, type metadata accessor for MemberPeerTrust);
      v69 = qword_1010E9938;
      swift_bridgeObjectRetain_n(_swiftEmptyArrayStorage, 2);
      if (v69 != -1)
        swift_once(&qword_1010E9938, sub_1000AFBB0);
      v266 = *(int *)(v0 + 2808);
      v272 = *(int *)(v0 + 2812);
      v261 = *(int *)(v0 + 2804);
      v286 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1832);
      v236 = *(int *)(v0 + 2780);
      v232 = *(int *)(v0 + 2768);
      v70 = *(_QWORD *)(v0 + 1824);
      v71 = *(_QWORD *)(v0 + 1808);
      v208 = *(_QWORD *)(v0 + 1800);
      v212 = *(_QWORD *)(v0 + 1792);
      v72 = *(int **)(v0 + 1712);
      v73 = *(_QWORD *)(v0 + 1704);
      v74 = *(_QWORD *)(v0 + 1696);
      v253 = *(_QWORD *)(v0 + 1688);
      v256 = *(_QWORD *)(v0 + 1680);
      v75 = *(int **)(v0 + 1552);
      v250 = (_QWORD *)(v73 + *(int *)(v0 + 2816));
      v76 = *(_QWORD *)(v0 + 1536);
      v247 = (_QWORD *)(v73 + *(int *)(v0 + 2800));
      v244 = (_QWORD *)(v73 + *(int *)(v0 + 2796));
      v241 = (_QWORD *)(v73 + *(int *)(v0 + 2792));
      v220 = *(_QWORD *)(v0 + 1432);
      v225 = v73 + *(int *)(v0 + 2788);
      v77 = *(_QWORD *)(v0 + 1424);
      v205 = (uint64_t *)(v70 + *(int *)(v0 + 2784));
      v228 = (_QWORD *)(v70 + *(int *)(v0 + 2776));
      v78 = v70 + *(int *)(v0 + 2772);
      v281 = *(_QWORD *)(v0 + 1032);
      v79 = sub_10001A9E8(v77, (uint64_t)qword_1011B6748);
      *(_QWORD *)(v0 + 1976) = v79;
      v80 = *(void (**)(uint64_t, uint64_t, uint64_t))(v220 + 16);
      *(_QWORD *)(v0 + 1984) = v80;
      v80(v76, v79, v77);
      v221 = v72[12];
      v81 = v71 + v72[16];
      v82 = (_QWORD *)(v71 + v72[20]);
      v202 = v72[24];
      v83 = (uint64_t *)(v71 + v72[28]);
      v286(v71, v70, v281);
      *(_BYTE *)(v71 + v221) = *(_BYTE *)(v70 + v232);
      v84 = *(_QWORD *)(v78 + 8);
      v85 = *(_QWORD *)(v78 + 16);
      *(_BYTE *)v81 = *(_BYTE *)v78;
      *(_QWORD *)(v81 + 8) = v84;
      *(_QWORD *)(v81 + 16) = v85;
      v216 = v228[1];
      v222 = v85;
      *v82 = *v228;
      v82[1] = v216;
      v229 = *(_QWORD *)(v70 + v236);
      *(_QWORD *)(v71 + v202) = v229;
      v233 = v205[1];
      v237 = *v205;
      *v83 = *v205;
      v83[1] = v233;
      sub_10000F9B8(v71, v208, &qword_1010EE1E8);
      sub_100005CF0(v71, v212, &qword_1010EE1E8);
      v86 = v74 + v75[12];
      v87 = (_QWORD *)(v74 + v75[16]);
      v88 = (_QWORD *)(v74 + v75[20]);
      v89 = (_QWORD *)(v74 + v75[24]);
      v90 = v75[28];
      v209 = v75[32];
      v213 = v75[36];
      v91 = (_QWORD *)(v74 + v75[40]);
      v286(v74, v73, v281);
      sub_10000F9B8(v225, v86, &qword_1010ED860);
      v92 = v241[1];
      *v87 = *v241;
      v87[1] = v92;
      v93 = v244[1];
      *v88 = *v244;
      v88[1] = v93;
      v94 = v247[1];
      *v89 = *v247;
      v89[1] = v94;
      *(_DWORD *)(v74 + v90) = *(_DWORD *)(v73 + v261);
      *(_DWORD *)(v74 + v209) = *(_DWORD *)(v73 + v266);
      *(_QWORD *)(v74 + v213) = *(_QWORD *)(v73 + v272);
      v95 = v250[1];
      *v91 = *v250;
      v91[1] = v95;
      sub_10000F9B8(v74, v253, &qword_1010EE1E0);
      sub_100005CF0(v74, v256, &qword_1010EE1E0);
      swift_bridgeObjectRetain(v222);
      swift_bridgeObjectRetain(v216);
      swift_bridgeObjectRetain(v229);
      sub_10001BBBC(v237, v233);
      swift_bridgeObjectRetain(v95);
      swift_bridgeObjectRetain(v92);
      swift_bridgeObjectRetain(v93);
      swift_bridgeObjectRetain(v94);
      v97 = Logger.logObject.getter(v96);
      v98 = static os_log_type_t.default.getter(v97);
      if (os_log_type_enabled(v97, v98))
      {
        v99 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1832);
        v223 = v99;
        v282 = *(void (**)(uint64_t, uint64_t))(v0 + 1840);
        v254 = v97;
        v100 = *(_QWORD *)(v0 + 1816);
        v101 = *(_QWORD *)(v0 + 1800);
        v217 = v101;
        v230 = *(_QWORD *)(v0 + 1792);
        v242 = *(_QWORD *)(v0 + 1688);
        v251 = *(_QWORD *)(v0 + 1680);
        v102 = *(_QWORD *)(v0 + 1672);
        v103 = *(int **)(v0 + 1552);
        v257 = *(_QWORD *)(v0 + 1432);
        v262 = *(_QWORD *)(v0 + 1424);
        v267 = *(_QWORD *)(v0 + 1536);
        v273 = *(_QWORD *)(v0 + 1120);
        v238 = *(_QWORD *)(v0 + 1040);
        v104 = *(_QWORD *)(v0 + 1032);
        v105 = swift_slowAlloc(42, -1);
        v248 = swift_slowAlloc(64, -1);
        v288[0] = v248;
        *(_DWORD *)v105 = 141558787;
        *(_QWORD *)(v0 + 816) = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 816, v0 + 824, v105 + 4, v105 + 12);
        *(_WORD *)(v105 + 12) = 2081;
        v99(v100, v101, v104);
        v239 = *(void (**)(uint64_t, uint64_t, uint64_t))(v238 + 32);
        v239(v273, v100, v104);
        v234 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v245 = v98;
        v106 = dispatch thunk of CustomStringConvertible.description.getter(v104, v234);
        v108 = v107;
        v282(v273, v104);
        *(_QWORD *)(v0 + 824) = sub_100016940(v106, v108, v288);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 824, v0 + 832, v105 + 14, v105 + 22);
        swift_bridgeObjectRelease();
        sub_100004048(v230, &qword_1010EE1E8);
        sub_100004048(v217, &qword_1010EE1E8);
        *(_WORD *)(v105 + 22) = 2160;
        *(_QWORD *)(v0 + 832) = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 832, v0 + 840, v105 + 24, v105 + 32);
        *(_WORD *)(v105 + 32) = 2081;
        v109 = v103[12];
        v110 = v102 + v109;
        v111 = v103[16];
        v112 = (_QWORD *)(v102 + v111);
        v113 = v103[20];
        v203 = (_QWORD *)(v102 + v113);
        v114 = v103[24];
        v206 = (_QWORD *)(v102 + v114);
        v210 = v103[28];
        v214 = v103[32];
        v218 = v103[36];
        v226 = v103[40];
        v115 = v242 + v109;
        v116 = (_QWORD *)(v242 + v111);
        v117 = (_QWORD *)(v242 + v113);
        v118 = (_QWORD *)(v242 + v114);
        v223(v102, v242, v104);
        sub_10000F9B8(v115, v110, &qword_1010ED860);
        v119 = v116[1];
        *v112 = *v116;
        v112[1] = v119;
        v120 = v117[1];
        *v203 = *v117;
        v203[1] = v120;
        v121 = v118[1];
        *v206 = *v118;
        v206[1] = v121;
        *(_DWORD *)(v102 + v210) = *(_DWORD *)(v242 + v210);
        *(_DWORD *)(v102 + v214) = *(_DWORD *)(v242 + v214);
        *(_QWORD *)(v102 + v218) = *(_QWORD *)(v242 + v218);
        *(_OWORD *)(v102 + v226) = *(_OWORD *)(v242 + v226);
        v239(v273, v102, v104);
        sub_100004048(v110, &qword_1010ED860);
        v122 = dispatch thunk of CustomStringConvertible.description.getter(v104, v234);
        v124 = v123;
        v282(v273, v104);
        *(_QWORD *)(v0 + 840) = sub_100016940(v122, v124, v288);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 840, v0 + 848, v105 + 34, v105 + 42);
        swift_bridgeObjectRelease();
        sub_100004048(v251, &qword_1010EE1E0);
        sub_100004048(v242, &qword_1010EE1E0);
        _os_log_impl((void *)&_mh_execute_header, v254, v245, "Update beacon attributes for shareId: %{private,mask.hash}s, beaconID: %{private,mask.hash}s.", (uint8_t *)v105, 0x2Au);
        swift_arrayDestroy(v248, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v248, -1, -1);
        swift_slowDealloc(v105, -1, -1);

        (*(void (**)(uint64_t, uint64_t))(v257 + 8))(v267, v262);
      }
      else
      {
        v134 = *(_QWORD *)(v0 + 1800);
        v135 = *(_QWORD *)(v0 + 1688);
        v136 = *(_QWORD *)(v0 + 1680);
        v137 = *(_QWORD *)(v0 + 1536);
        v138 = *(_QWORD *)(v0 + 1432);
        v139 = *(_QWORD *)(v0 + 1424);
        sub_100004048(*(_QWORD *)(v0 + 1792), &qword_1010EE1E8);
        sub_100004048(v134, &qword_1010EE1E8);
        sub_100004048(v136, &qword_1010EE1E0);
        sub_100004048(v135, &qword_1010EE1E0);

        (*(void (**)(uint64_t, uint64_t))(v138 + 8))(v137, v139);
      }
      return swift_task_switch(sub_100B74520, *(_QWORD *)(v0 + 1848), 0);
    }
  }
}

uint64_t sub_100B72830()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 1936);
  *(_QWORD *)(*v1 + 1944) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = *(_QWORD *)(v2 + 888);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v5 = sub_100B73D88;
    v6 = v4;
  }
  else
  {
    v6 = *(_QWORD *)(v2 + 888);
    v5 = sub_100B728C4;
  }
  return swift_task_switch(v5, v6, 0);
}

uint64_t sub_100B728C4()
{
  uint64_t v0;
  uint64_t v1;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  void (*v19)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int (*v47)(uint64_t, uint64_t, uint64_t);
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  _BYTE *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  NSObject *v57;
  os_log_type_t v58;
  _BOOL4 v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint8_t *v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  int *v94;
  uint64_t v95;
  uint64_t v96;
  int *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  void (*v102)(uint64_t, uint64_t, uint64_t);
  uint64_t v103;
  _QWORD *v104;
  uint64_t *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  _QWORD *v109;
  _QWORD *v110;
  _QWORD *v111;
  uint64_t v112;
  _QWORD *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  NSObject *v119;
  os_log_type_t v120;
  void (*v121)(uint64_t, uint64_t, uint64_t);
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  int *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  _QWORD *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  _QWORD *v138;
  _QWORD *v139;
  _QWORD *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  unint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  _QWORD *v225;
  uint64_t v226;
  uint64_t *v227;
  _QWORD *v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  void (*v245)(uint64_t, uint64_t, uint64_t);
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  _QWORD *v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  unint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  void (*v261)(uint64_t, uint64_t, uint64_t);
  uint64_t v262;
  _QWORD *v263;
  uint64_t v264;
  uint64_t v265;
  _QWORD *v266;
  os_log_type_t v267;
  uint64_t v268;
  _QWORD *v269;
  uint64_t v270;
  uint64_t v271;
  _QWORD *v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  NSObject *v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  unsigned int v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  void (*v301)(uint64_t, uint64_t);
  uint64_t v302;
  unint64_t v303;
  uint64_t v304;
  void (*v305)(uint64_t, uint64_t, uint64_t);
  uint64_t v306;
  uint64_t v307[16];

  v1 = *(_QWORD *)(v0 + 1928);
  sub_10005972C(*(_QWORD *)(v0 + 1336), *(_QWORD *)(v0 + 1328), type metadata accessor for MemberPeerTrust);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v1);
  v3 = *(_QWORD *)(v0 + 1928);
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    v3 = sub_1007C8874(0, *(_QWORD *)(v3 + 16) + 1, 1, *(_QWORD *)(v0 + 1928));
  v5 = *(_QWORD *)(v3 + 16);
  v4 = *(_QWORD *)(v3 + 24);
  if (v5 >= v4 >> 1)
    v3 = sub_1007C8874(v4 > 1, v5 + 1, 1, v3);
  v6 = *(_QWORD *)(v0 + 1328);
  v7 = *(_QWORD *)(v0 + 1280);
  v8 = (uint64_t *)(*(_QWORD *)(v0 + 1160) + *(int *)(v0 + 2832));
  *(_QWORD *)(v3 + 16) = v5 + 1;
  sub_1000126EC(v6, v3+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(_QWORD *)(v7 + 72) * v5, type metadata accessor for MemberPeerTrust);
  v9 = *v8;
  v10 = v8[1];
  if (qword_1010E9A00 != -1)
    swift_once(&qword_1010E9A00, sub_1001EB16C);
  v303 = v3;
  v11 = v9 == qword_1011B6A68 && v10 == qword_1011B6A70;
  if (v11 || (_stringCompareWithSmolCheck(_:_:expecting:)(v9, v10, qword_1011B6A68, qword_1011B6A70, 0) & 1) != 0)
  {
    v12 = *(_QWORD *)(v0 + 1280);
    v13 = *(_QWORD *)(v0 + 1272);
    v14 = *(_QWORD *)(v0 + 1192);
    sub_10000F9B8(*(_QWORD *)(v0 + 1200), v14, &qword_1010EC868);
    LODWORD(v13) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v14, 1, v13);
    sub_100004048(v14, &qword_1010EC868);
    if ((_DWORD)v13 != 1)
    {
      if (qword_1010E9938 != -1)
        swift_once(&qword_1010E9938, sub_1000AFBB0);
      v15 = sub_10001A9E8(*(_QWORD *)(v0 + 1424), (uint64_t)qword_1011B6748);
      v16 = Logger.logObject.getter(v15);
      v17 = static os_log_type_t.error.getter(v16);
      if (os_log_type_enabled(v16, v17))
      {
        v18 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v18 = 0;
        _os_log_impl((void *)&_mh_execute_header, v16, v17, "Several peer trusts with owner account description!", v18, 2u);
        swift_slowDealloc(v18, -1, -1);
      }

    }
    v19 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v0 + 1872);
    v20 = *(_QWORD *)(v0 + 1336);
    v21 = *(_QWORD *)(v0 + 1272);
    v22 = *(_QWORD *)(v0 + 1200);
    sub_100004048(v22, &qword_1010EC868);
    sub_10005972C(v20, v22, type metadata accessor for MemberPeerTrust);
    v294 = 1;
    v19(v22, 0, 1, v21);
  }
  else
  {
    v23 = *(int *)(v0 + 2836);
    v24 = *(void (**)(uint64_t, uint64_t))(v0 + 1840);
    v25 = *(_QWORD *)(v0 + 1160);
    v26 = *(_QWORD *)(v0 + 1152);
    v27 = *(_QWORD *)(v0 + 1128);
    v28 = *(_QWORD *)(v0 + 1032);
    v29 = (_QWORD *)(v26 + *(int *)(v27 + 48));
    v30 = *(int *)(v27 + 64);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1832))(v26, v25, v28);
    *v29 = v9;
    v29[1] = v10;
    *(_OWORD *)(v26 + v30) = *(_OWORD *)(v25 + v23);
    v31 = HIBYTE(v10) & 0xF;
    if ((v10 & 0x2000000000000000) == 0)
      v31 = v9 & 0xFFFFFFFFFFFFLL;
    v294 = v31 != 0;
    v24(v26, v28);
  }
  v32 = *(int *)(v0 + 2836);
  v33 = *(_QWORD *)(v0 + 1912);
  v297 = *(_QWORD *)(v0 + 1888);
  v34 = *(void (**)(uint64_t, uint64_t))(v0 + 1840);
  v284 = *(_QWORD *)(v0 + 1336);
  v35 = *(_QWORD *)(v0 + 1160);
  v36 = *(_QWORD *)(v0 + 1144);
  v37 = *(_QWORD *)(v0 + 1128);
  v38 = *(_QWORD *)(v0 + 1032);
  v39 = (_QWORD *)(v35 + *(int *)(v0 + 2832));
  v288 = *(_QWORD *)(v0 + 1920) + 1;
  v40 = (_QWORD *)(v36 + *(int *)(v37 + 48));
  v41 = *(int *)(v37 + 64);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1832))(v36, v35, v38);
  v42 = v39[1];
  *v40 = *v39;
  v40[1] = v42;
  *(_OWORD *)(v36 + v41) = *(_OWORD *)(v35 + v32);
  v43 = swift_isUniquelyReferenced_nonNull_native(v33);
  v307[0] = v33;
  sub_10010AFEC(v294, v36, v43);
  swift_bridgeObjectRelease();
  v34(v36, v38);
  sub_1000126B0(v284, type metadata accessor for MemberPeerTrust);
  sub_100004048(v35, &qword_1010ED300);
  if (v288 == v297)
  {
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 1960) = v303;
    *(_QWORD *)(v0 + 1952) = v33;
    v44 = *(_QWORD *)(v0 + 1280);
    v45 = *(_QWORD *)(v0 + 1272);
    v46 = *(_QWORD *)(v0 + 1184);
    sub_10000F9B8(*(_QWORD *)(v0 + 1200), v46, &qword_1010EC868);
    v47 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v44 + 48);
    *(_QWORD *)(v0 + 1968) = v47;
    if (v47(v46, 1, v45) == 1)
    {
      v48 = *(_QWORD *)(v0 + 1184);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_100004048(v48, &qword_1010EC868);
      v49 = sub_100986460();
      v50 = swift_allocError(&type metadata for CircleTrustServiceError, v49, 0, 0);
      *v51 = 4;
      swift_willThrow(v50);
      if (qword_1010E9938 != -1)
        swift_once(&qword_1010E9938, sub_1000AFBB0);
      v52 = *(_QWORD *)(v0 + 1472);
      v53 = *(_QWORD *)(v0 + 1432);
      v54 = *(_QWORD *)(v0 + 1424);
      v55 = sub_10001A9E8(v54, (uint64_t)qword_1011B6748);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v53 + 16))(v52, v55, v54);
      swift_errorRetain(v50);
      v56 = swift_errorRetain(v50);
      v57 = Logger.logObject.getter(v56);
      v58 = static os_log_type_t.error.getter(v57);
      v59 = os_log_type_enabled(v57, v58);
      v60 = *(_QWORD *)(v0 + 1472);
      v61 = *(_QWORD *)(v0 + 1432);
      v62 = *(_QWORD *)(v0 + 1424);
      v63 = *(_QWORD *)(v0 + 1200);
      if (v59)
      {
        v298 = *(_QWORD *)(v0 + 1424);
        v289 = *(_QWORD *)(v0 + 1432);
        v64 = (uint8_t *)swift_slowAlloc(12, -1);
        v65 = swift_slowAlloc(32, -1);
        v307[0] = v65;
        *(_DWORD *)v64 = 136315138;
        swift_getErrorValue(v50, v0 + 800, v0 + 392);
        v66 = Error.localizedDescription.getter(*(_QWORD *)(v0 + 400), *(_QWORD *)(v0 + 408));
        *(_QWORD *)(v0 + 688) = sub_100016940(v66, v67, v307);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 688, v0 + 696, v64 + 4, v64 + 12);
        swift_bridgeObjectRelease();
        swift_errorRelease(v50);
        swift_errorRelease(v50);
        _os_log_impl((void *)&_mh_execute_header, v57, v58, "Failure on handleCircleTrust, preparing initial data: %s", v64, 0xCu);
        swift_arrayDestroy(v65, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v65, -1, -1);
        swift_slowDealloc(v64, -1, -1);

        swift_errorRelease(v50);
        (*(void (**)(uint64_t, uint64_t))(v289 + 8))(v60, v298);
      }
      else
      {

        swift_errorRelease(v50);
        swift_errorRelease(v50);
        swift_errorRelease(v50);
        (*(void (**)(uint64_t, uint64_t))(v61 + 8))(v60, v62);
      }
      sub_100004048(v63, &qword_1010EC868);
      v147 = *(_QWORD *)(v0 + 1824);
      v148 = *(_QWORD *)(v0 + 1816);
      v149 = *(_QWORD *)(v0 + 1808);
      v150 = *(_QWORD *)(v0 + 1800);
      v151 = *(_QWORD *)(v0 + 1792);
      v152 = *(_QWORD *)(v0 + 1784);
      v153 = *(_QWORD *)(v0 + 1776);
      v154 = *(_QWORD *)(v0 + 1768);
      v162 = *(_QWORD *)(v0 + 1760);
      v163 = *(_QWORD *)(v0 + 1752);
      v164 = *(_QWORD *)(v0 + 1744);
      v165 = *(_QWORD *)(v0 + 1736);
      v166 = *(_QWORD *)(v0 + 1728);
      v167 = *(_QWORD *)(v0 + 1720);
      v155 = *(_QWORD *)(v0 + 1704);
      v168 = *(_QWORD *)(v0 + 1696);
      v169 = *(_QWORD *)(v0 + 1688);
      v170 = *(_QWORD *)(v0 + 1680);
      v171 = *(_QWORD *)(v0 + 1672);
      v172 = *(_QWORD *)(v0 + 1664);
      v173 = *(_QWORD *)(v0 + 1656);
      v174 = *(_QWORD *)(v0 + 1648);
      v175 = *(_QWORD *)(v0 + 1640);
      v176 = *(_QWORD *)(v0 + 1632);
      v177 = *(_QWORD *)(v0 + 1624);
      v178 = *(_QWORD *)(v0 + 1616);
      v179 = *(_QWORD *)(v0 + 1608);
      v180 = *(_QWORD *)(v0 + 1600);
      v181 = *(_QWORD *)(v0 + 1592);
      v182 = *(_QWORD *)(v0 + 1584);
      v183 = *(_QWORD *)(v0 + 1576);
      v184 = *(_QWORD *)(v0 + 1568);
      v185 = *(_QWORD *)(v0 + 1560);
      v186 = *(_QWORD *)(v0 + 1544);
      v187 = *(_QWORD *)(v0 + 1536);
      v188 = *(_QWORD *)(v0 + 1528);
      v189 = *(_QWORD *)(v0 + 1520);
      v190 = *(_QWORD *)(v0 + 1512);
      v191 = *(_QWORD *)(v0 + 1504);
      v192 = *(_QWORD *)(v0 + 1496);
      v193 = *(_QWORD *)(v0 + 1488);
      v194 = *(_QWORD *)(v0 + 1480);
      v195 = *(_QWORD *)(v0 + 1472);
      v196 = *(_QWORD *)(v0 + 1464);
      v197 = *(_QWORD *)(v0 + 1456);
      v198 = *(_QWORD *)(v0 + 1448);
      v199 = *(_QWORD *)(v0 + 1440);
      v200 = *(_QWORD *)(v0 + 1416);
      v201 = *(_QWORD *)(v0 + 1408);
      v202 = *(_QWORD *)(v0 + 1400);
      v203 = *(_QWORD *)(v0 + 1392);
      v204 = *(_QWORD *)(v0 + 1384);
      v205 = *(_QWORD *)(v0 + 1376);
      v206 = *(_QWORD *)(v0 + 1344);
      v207 = *(_QWORD *)(v0 + 1336);
      v208 = *(_QWORD *)(v0 + 1328);
      v209 = *(_QWORD *)(v0 + 1320);
      v210 = *(_QWORD *)(v0 + 1312);
      v211 = *(_QWORD *)(v0 + 1304);
      v212 = *(_QWORD *)(v0 + 1296);
      v213 = *(_QWORD *)(v0 + 1288);
      v214 = *(_QWORD *)(v0 + 1264);
      v215 = *(_QWORD *)(v0 + 1256);
      v216 = *(_QWORD *)(v0 + 1248);
      v217 = *(_QWORD *)(v0 + 1240);
      v218 = *(_QWORD *)(v0 + 1232);
      v219 = *(_QWORD *)(v0 + 1200);
      v220 = *(_QWORD *)(v0 + 1192);
      v221 = *(_QWORD *)(v0 + 1184);
      v222 = *(_QWORD *)(v0 + 1176);
      v223 = *(_QWORD *)(v0 + 1168);
      v226 = *(_QWORD *)(v0 + 1160);
      v229 = *(_QWORD *)(v0 + 1152);
      v233 = *(_QWORD *)(v0 + 1144);
      v237 = *(_QWORD *)(v0 + 1120);
      v241 = *(_QWORD *)(v0 + 1112);
      v246 = *(_QWORD *)(v0 + 1104);
      v249 = *(_QWORD *)(v0 + 1096);
      v253 = *(_QWORD *)(v0 + 1088);
      v257 = *(_QWORD *)(v0 + 1080);
      v262 = *(_QWORD *)(v0 + 1072);
      v265 = *(_QWORD *)(v0 + 1064);
      v268 = *(_QWORD *)(v0 + 1056);
      v271 = *(_QWORD *)(v0 + 1024);
      v274 = *(_QWORD *)(v0 + 1016);
      v277 = *(_QWORD *)(v0 + 1008);
      v280 = *(_QWORD *)(v0 + 1000);
      v283 = *(_QWORD *)(v0 + 976);
      v287 = *(_QWORD *)(v0 + 952);
      v293 = *(_QWORD *)(v0 + 944);
      v296 = *(_QWORD *)(v0 + 928);
      v302 = *(_QWORD *)(v0 + 920);
      v306 = *(_QWORD *)(v0 + 896);
      sub_100004048(v155, &qword_1010EE1E0);
      sub_100004048(v147, &qword_1010EE1E8);
      swift_task_dealloc(v147);
      swift_task_dealloc(v148);
      swift_task_dealloc(v149);
      swift_task_dealloc(v150);
      swift_task_dealloc(v151);
      swift_task_dealloc(v152);
      swift_task_dealloc(v153);
      swift_task_dealloc(v154);
      swift_task_dealloc(v162);
      swift_task_dealloc(v163);
      swift_task_dealloc(v164);
      swift_task_dealloc(v165);
      swift_task_dealloc(v166);
      swift_task_dealloc(v167);
      swift_task_dealloc(v155);
      swift_task_dealloc(v168);
      swift_task_dealloc(v169);
      swift_task_dealloc(v170);
      swift_task_dealloc(v171);
      swift_task_dealloc(v172);
      swift_task_dealloc(v173);
      swift_task_dealloc(v174);
      swift_task_dealloc(v175);
      swift_task_dealloc(v176);
      swift_task_dealloc(v177);
      swift_task_dealloc(v178);
      swift_task_dealloc(v179);
      swift_task_dealloc(v180);
      swift_task_dealloc(v181);
      swift_task_dealloc(v182);
      swift_task_dealloc(v183);
      swift_task_dealloc(v184);
      swift_task_dealloc(v185);
      swift_task_dealloc(v186);
      swift_task_dealloc(v187);
      swift_task_dealloc(v188);
      swift_task_dealloc(v189);
      swift_task_dealloc(v190);
      swift_task_dealloc(v191);
      swift_task_dealloc(v192);
      swift_task_dealloc(v193);
      swift_task_dealloc(v194);
      swift_task_dealloc(v195);
      swift_task_dealloc(v196);
      swift_task_dealloc(v197);
      swift_task_dealloc(v198);
      swift_task_dealloc(v199);
      swift_task_dealloc(v200);
      swift_task_dealloc(v201);
      swift_task_dealloc(v202);
      swift_task_dealloc(v203);
      swift_task_dealloc(v204);
      swift_task_dealloc(v205);
      swift_task_dealloc(v206);
      swift_task_dealloc(v207);
      swift_task_dealloc(v208);
      swift_task_dealloc(v209);
      swift_task_dealloc(v210);
      swift_task_dealloc(v211);
      swift_task_dealloc(v212);
      swift_task_dealloc(v213);
      swift_task_dealloc(v214);
      swift_task_dealloc(v215);
      swift_task_dealloc(v216);
      swift_task_dealloc(v217);
      swift_task_dealloc(v218);
      swift_task_dealloc(v219);
      swift_task_dealloc(v220);
      swift_task_dealloc(v221);
      swift_task_dealloc(v222);
      swift_task_dealloc(v223);
      swift_task_dealloc(v226);
      swift_task_dealloc(v229);
      swift_task_dealloc(v233);
      swift_task_dealloc(v237);
      swift_task_dealloc(v241);
      swift_task_dealloc(v246);
      swift_task_dealloc(v249);
      swift_task_dealloc(v253);
      swift_task_dealloc(v257);
      swift_task_dealloc(v262);
      swift_task_dealloc(v265);
      swift_task_dealloc(v268);
      swift_task_dealloc(v271);
      swift_task_dealloc(v274);
      swift_task_dealloc(v277);
      swift_task_dealloc(v280);
      swift_task_dealloc(v283);
      swift_task_dealloc(v287);
      swift_task_dealloc(v293);
      swift_task_dealloc(v296);
      swift_task_dealloc(v302);
      swift_task_dealloc(v306);
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
    else
    {
      v89 = *(_QWORD *)(v0 + 1344);
      v90 = *(_QWORD *)(v0 + 1320);
      sub_1000126EC(*(_QWORD *)(v0 + 1184), v90, type metadata accessor for MemberPeerTrust);
      sub_10005972C(v90, v89, type metadata accessor for MemberPeerTrust);
      v91 = qword_1010E9938;
      swift_bridgeObjectRetain_n(v303, 2);
      if (v91 != -1)
        swift_once(&qword_1010E9938, sub_1000AFBB0);
      v285 = *(int *)(v0 + 2808);
      v291 = *(int *)(v0 + 2812);
      v281 = *(int *)(v0 + 2804);
      v305 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1832);
      v258 = *(int *)(v0 + 2780);
      v254 = *(int *)(v0 + 2768);
      v92 = *(_QWORD *)(v0 + 1824);
      v93 = *(_QWORD *)(v0 + 1808);
      v230 = *(_QWORD *)(v0 + 1800);
      v234 = *(_QWORD *)(v0 + 1792);
      v94 = *(int **)(v0 + 1712);
      v95 = *(_QWORD *)(v0 + 1704);
      v96 = *(_QWORD *)(v0 + 1696);
      v275 = *(_QWORD *)(v0 + 1688);
      v278 = *(_QWORD *)(v0 + 1680);
      v97 = *(int **)(v0 + 1552);
      v272 = (_QWORD *)(v95 + *(int *)(v0 + 2816));
      v98 = *(_QWORD *)(v0 + 1536);
      v269 = (_QWORD *)(v95 + *(int *)(v0 + 2800));
      v266 = (_QWORD *)(v95 + *(int *)(v0 + 2796));
      v263 = (_QWORD *)(v95 + *(int *)(v0 + 2792));
      v242 = *(_QWORD *)(v0 + 1432);
      v247 = v95 + *(int *)(v0 + 2788);
      v99 = *(_QWORD *)(v0 + 1424);
      v227 = (uint64_t *)(v92 + *(int *)(v0 + 2784));
      v250 = (_QWORD *)(v92 + *(int *)(v0 + 2776));
      v100 = v92 + *(int *)(v0 + 2772);
      v300 = *(_QWORD *)(v0 + 1032);
      v101 = sub_10001A9E8(v99, (uint64_t)qword_1011B6748);
      *(_QWORD *)(v0 + 1976) = v101;
      v102 = *(void (**)(uint64_t, uint64_t, uint64_t))(v242 + 16);
      *(_QWORD *)(v0 + 1984) = v102;
      v102(v98, v101, v99);
      v243 = v94[12];
      v103 = v93 + v94[16];
      v104 = (_QWORD *)(v93 + v94[20]);
      v224 = v94[24];
      v105 = (uint64_t *)(v93 + v94[28]);
      v305(v93, v92, v300);
      *(_BYTE *)(v93 + v243) = *(_BYTE *)(v92 + v254);
      v106 = *(_QWORD *)(v100 + 8);
      v107 = *(_QWORD *)(v100 + 16);
      *(_BYTE *)v103 = *(_BYTE *)v100;
      *(_QWORD *)(v103 + 8) = v106;
      *(_QWORD *)(v103 + 16) = v107;
      v238 = v250[1];
      v244 = v107;
      *v104 = *v250;
      v104[1] = v238;
      v251 = *(_QWORD *)(v92 + v258);
      *(_QWORD *)(v93 + v224) = v251;
      v255 = v227[1];
      v259 = *v227;
      *v105 = *v227;
      v105[1] = v255;
      sub_10000F9B8(v93, v230, &qword_1010EE1E8);
      sub_100005CF0(v93, v234, &qword_1010EE1E8);
      v108 = v96 + v97[12];
      v109 = (_QWORD *)(v96 + v97[16]);
      v110 = (_QWORD *)(v96 + v97[20]);
      v111 = (_QWORD *)(v96 + v97[24]);
      v112 = v97[28];
      v231 = v97[32];
      v235 = v97[36];
      v113 = (_QWORD *)(v96 + v97[40]);
      v305(v96, v95, v300);
      sub_10000F9B8(v247, v108, &qword_1010ED860);
      v114 = v263[1];
      *v109 = *v263;
      v109[1] = v114;
      v115 = v266[1];
      *v110 = *v266;
      v110[1] = v115;
      v116 = v269[1];
      *v111 = *v269;
      v111[1] = v116;
      *(_DWORD *)(v96 + v112) = *(_DWORD *)(v95 + v281);
      *(_DWORD *)(v96 + v231) = *(_DWORD *)(v95 + v285);
      *(_QWORD *)(v96 + v235) = *(_QWORD *)(v95 + v291);
      v117 = v272[1];
      *v113 = *v272;
      v113[1] = v117;
      sub_10000F9B8(v96, v275, &qword_1010EE1E0);
      sub_100005CF0(v96, v278, &qword_1010EE1E0);
      swift_bridgeObjectRetain(v244);
      swift_bridgeObjectRetain(v238);
      swift_bridgeObjectRetain(v251);
      sub_10001BBBC(v259, v255);
      swift_bridgeObjectRetain(v117);
      swift_bridgeObjectRetain(v114);
      swift_bridgeObjectRetain(v115);
      swift_bridgeObjectRetain(v116);
      v119 = Logger.logObject.getter(v118);
      v120 = static os_log_type_t.default.getter(v119);
      if (os_log_type_enabled(v119, v120))
      {
        v121 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1832);
        v245 = v121;
        v301 = *(void (**)(uint64_t, uint64_t))(v0 + 1840);
        v276 = v119;
        v122 = *(_QWORD *)(v0 + 1816);
        v123 = *(_QWORD *)(v0 + 1800);
        v239 = v123;
        v252 = *(_QWORD *)(v0 + 1792);
        v264 = *(_QWORD *)(v0 + 1688);
        v273 = *(_QWORD *)(v0 + 1680);
        v124 = *(_QWORD *)(v0 + 1672);
        v125 = *(int **)(v0 + 1552);
        v279 = *(_QWORD *)(v0 + 1432);
        v282 = *(_QWORD *)(v0 + 1424);
        v286 = *(_QWORD *)(v0 + 1536);
        v292 = *(_QWORD *)(v0 + 1120);
        v260 = *(_QWORD *)(v0 + 1040);
        v126 = *(_QWORD *)(v0 + 1032);
        v127 = swift_slowAlloc(42, -1);
        v270 = swift_slowAlloc(64, -1);
        v307[0] = v270;
        *(_DWORD *)v127 = 141558787;
        *(_QWORD *)(v0 + 816) = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 816, v0 + 824, v127 + 4, v127 + 12);
        *(_WORD *)(v127 + 12) = 2081;
        v121(v122, v123, v126);
        v261 = *(void (**)(uint64_t, uint64_t, uint64_t))(v260 + 32);
        v261(v292, v122, v126);
        v256 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v267 = v120;
        v128 = dispatch thunk of CustomStringConvertible.description.getter(v126, v256);
        v130 = v129;
        v301(v292, v126);
        *(_QWORD *)(v0 + 824) = sub_100016940(v128, v130, v307);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 824, v0 + 832, v127 + 14, v127 + 22);
        swift_bridgeObjectRelease();
        sub_100004048(v252, &qword_1010EE1E8);
        sub_100004048(v239, &qword_1010EE1E8);
        *(_WORD *)(v127 + 22) = 2160;
        *(_QWORD *)(v0 + 832) = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 832, v0 + 840, v127 + 24, v127 + 32);
        *(_WORD *)(v127 + 32) = 2081;
        v131 = v125[12];
        v132 = v124 + v131;
        v133 = v125[16];
        v134 = (_QWORD *)(v124 + v133);
        v135 = v125[20];
        v225 = (_QWORD *)(v124 + v135);
        v136 = v125[24];
        v228 = (_QWORD *)(v124 + v136);
        v232 = v125[28];
        v236 = v125[32];
        v240 = v125[36];
        v248 = v125[40];
        v137 = v264 + v131;
        v138 = (_QWORD *)(v264 + v133);
        v139 = (_QWORD *)(v264 + v135);
        v140 = (_QWORD *)(v264 + v136);
        v245(v124, v264, v126);
        sub_10000F9B8(v137, v132, &qword_1010ED860);
        v141 = v138[1];
        *v134 = *v138;
        v134[1] = v141;
        v142 = v139[1];
        *v225 = *v139;
        v225[1] = v142;
        v143 = v140[1];
        *v228 = *v140;
        v228[1] = v143;
        *(_DWORD *)(v124 + v232) = *(_DWORD *)(v264 + v232);
        *(_DWORD *)(v124 + v236) = *(_DWORD *)(v264 + v236);
        *(_QWORD *)(v124 + v240) = *(_QWORD *)(v264 + v240);
        *(_OWORD *)(v124 + v248) = *(_OWORD *)(v264 + v248);
        v261(v292, v124, v126);
        sub_100004048(v132, &qword_1010ED860);
        v144 = dispatch thunk of CustomStringConvertible.description.getter(v126, v256);
        v146 = v145;
        v301(v292, v126);
        *(_QWORD *)(v0 + 840) = sub_100016940(v144, v146, v307);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 840, v0 + 848, v127 + 34, v127 + 42);
        swift_bridgeObjectRelease();
        sub_100004048(v273, &qword_1010EE1E0);
        sub_100004048(v264, &qword_1010EE1E0);
        _os_log_impl((void *)&_mh_execute_header, v276, v267, "Update beacon attributes for shareId: %{private,mask.hash}s, beaconID: %{private,mask.hash}s.", (uint8_t *)v127, 0x2Au);
        swift_arrayDestroy(v270, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v270, -1, -1);
        swift_slowDealloc(v127, -1, -1);

        (*(void (**)(uint64_t, uint64_t))(v279 + 8))(v286, v282);
      }
      else
      {
        v156 = *(_QWORD *)(v0 + 1800);
        v157 = *(_QWORD *)(v0 + 1688);
        v158 = *(_QWORD *)(v0 + 1680);
        v159 = *(_QWORD *)(v0 + 1536);
        v160 = *(_QWORD *)(v0 + 1432);
        v161 = *(_QWORD *)(v0 + 1424);
        sub_100004048(*(_QWORD *)(v0 + 1792), &qword_1010EE1E8);
        sub_100004048(v156, &qword_1010EE1E8);
        sub_100004048(v158, &qword_1010EE1E0);
        sub_100004048(v157, &qword_1010EE1E0);

        (*(void (**)(uint64_t, uint64_t))(v160 + 8))(v159, v161);
      }
      return swift_task_switch(sub_100B74520, *(_QWORD *)(v0 + 1848), 0);
    }
  }
  else
  {
    v68 = *(_QWORD *)(v0 + 1920) + 1;
    *(_QWORD *)(v0 + 1928) = v303;
    *(_QWORD *)(v0 + 1920) = v68;
    *(_QWORD *)(v0 + 1912) = v33;
    v304 = *(int *)(v0 + 2768);
    v69 = *(_QWORD *)(v0 + 1168);
    v70 = *(_QWORD *)(v0 + 1160);
    v71 = (uint64_t *)(v69 + *(int *)(v0 + 2824));
    v72 = (uint64_t *)(v69 + *(int *)(v0 + 2820));
    v73 = *(_QWORD *)(v0 + 1128);
    v295 = *(_QWORD *)(v0 + 1040);
    v299 = *(_QWORD *)(v0 + 1824);
    v74 = v299 + *(int *)(v0 + 2772);
    v290 = *(_QWORD *)(v0 + 1032);
    sub_10000F9B8(*(_QWORD *)(v0 + 1880)+ ((*(unsigned __int8 *)(v0 + 2828) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 2828))+ *(_QWORD *)(v0 + 1904) * v68, v69, &qword_1010ED300);
    v75 = *(int *)(v73 + 48);
    *(_DWORD *)(v0 + 2832) = v75;
    v76 = (uint64_t *)(v70 + v75);
    v77 = *(int *)(v73 + 64);
    *(_DWORD *)(v0 + 2836) = v77;
    v78 = (uint64_t *)(v70 + v77);
    v79 = *v72;
    v80 = v72[1];
    v81 = *v71;
    v82 = v71[1];
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v295 + 32))(v70, v69, v290);
    *v76 = v79;
    v76[1] = v80;
    *v78 = v81;
    v78[1] = v82;
    v84 = *(_QWORD *)(v74 + 8);
    v83 = *(_QWORD *)(v74 + 16);
    LOBYTE(v78) = *(_BYTE *)(v299 + v304);
    v85 = (_QWORD *)swift_task_alloc(dword_101112084);
    *(_QWORD *)(v0 + 1936) = v85;
    *v85 = v0;
    v85[1] = sub_100B72830;
    v86 = *(_QWORD *)(v0 + 1336);
    v87 = *(_QWORD *)(v0 + 1160);
    v307[14] = v84;
    v307[15] = v83;
    return sub_100AADCC8(v86, (char)v78, v87, v79, v80, v81, v82);
  }
}

uint64_t sub_100B73D88()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  _BOOL4 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;

  sub_100004048(*(_QWORD *)(v0 + 1160), &qword_1010ED300);
  v1 = *(_QWORD *)(v0 + 1944);
  if (qword_1010E9938 != -1)
    swift_once(&qword_1010E9938, sub_1000AFBB0);
  v2 = *(_QWORD *)(v0 + 1472);
  v3 = *(_QWORD *)(v0 + 1432);
  v4 = *(_QWORD *)(v0 + 1424);
  v5 = sub_10001A9E8(v4, (uint64_t)qword_1011B6748);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v5, v4);
  swift_errorRetain(v1);
  v6 = swift_errorRetain(v1);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.error.getter(v7);
  v9 = os_log_type_enabled(v7, v8);
  v10 = *(_QWORD *)(v0 + 1472);
  v11 = *(_QWORD *)(v0 + 1432);
  v12 = *(_QWORD *)(v0 + 1424);
  v13 = *(_QWORD *)(v0 + 1200);
  if (v9)
  {
    v108 = *(_QWORD *)(v0 + 1432);
    v14 = (uint8_t *)swift_slowAlloc(12, -1);
    v15 = swift_slowAlloc(32, -1);
    v113 = v15;
    *(_DWORD *)v14 = 136315138;
    swift_getErrorValue(v1, v0 + 800, v0 + 392);
    v16 = Error.localizedDescription.getter(*(_QWORD *)(v0 + 400), *(_QWORD *)(v0 + 408));
    *(_QWORD *)(v0 + 688) = sub_100016940(v16, v17, &v113);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 688, v0 + 696, v14 + 4, v14 + 12);
    swift_bridgeObjectRelease();
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Failure on handleCircleTrust, preparing initial data: %s", v14, 0xCu);
    swift_arrayDestroy(v15, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v15, -1, -1);
    swift_slowDealloc(v14, -1, -1);

    swift_errorRelease(v1);
    (*(void (**)(uint64_t, uint64_t))(v108 + 8))(v10, v12);
  }
  else
  {

    swift_errorRelease(v1);
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
  }
  sub_100004048(v13, &qword_1010EC868);
  v18 = *(_QWORD *)(v0 + 1824);
  v19 = *(_QWORD *)(v0 + 1816);
  v20 = *(_QWORD *)(v0 + 1808);
  v21 = *(_QWORD *)(v0 + 1800);
  v22 = *(_QWORD *)(v0 + 1792);
  v23 = *(_QWORD *)(v0 + 1784);
  v24 = *(_QWORD *)(v0 + 1776);
  v25 = *(_QWORD *)(v0 + 1768);
  v28 = *(_QWORD *)(v0 + 1760);
  v29 = *(_QWORD *)(v0 + 1752);
  v30 = *(_QWORD *)(v0 + 1744);
  v31 = *(_QWORD *)(v0 + 1736);
  v32 = *(_QWORD *)(v0 + 1728);
  v33 = *(_QWORD *)(v0 + 1720);
  v26 = *(_QWORD *)(v0 + 1704);
  v34 = *(_QWORD *)(v0 + 1696);
  v35 = *(_QWORD *)(v0 + 1688);
  v36 = *(_QWORD *)(v0 + 1680);
  v37 = *(_QWORD *)(v0 + 1672);
  v38 = *(_QWORD *)(v0 + 1664);
  v39 = *(_QWORD *)(v0 + 1656);
  v40 = *(_QWORD *)(v0 + 1648);
  v41 = *(_QWORD *)(v0 + 1640);
  v42 = *(_QWORD *)(v0 + 1632);
  v43 = *(_QWORD *)(v0 + 1624);
  v44 = *(_QWORD *)(v0 + 1616);
  v45 = *(_QWORD *)(v0 + 1608);
  v46 = *(_QWORD *)(v0 + 1600);
  v47 = *(_QWORD *)(v0 + 1592);
  v48 = *(_QWORD *)(v0 + 1584);
  v49 = *(_QWORD *)(v0 + 1576);
  v50 = *(_QWORD *)(v0 + 1568);
  v51 = *(_QWORD *)(v0 + 1560);
  v52 = *(_QWORD *)(v0 + 1544);
  v53 = *(_QWORD *)(v0 + 1536);
  v54 = *(_QWORD *)(v0 + 1528);
  v55 = *(_QWORD *)(v0 + 1520);
  v56 = *(_QWORD *)(v0 + 1512);
  v57 = *(_QWORD *)(v0 + 1504);
  v58 = *(_QWORD *)(v0 + 1496);
  v59 = *(_QWORD *)(v0 + 1488);
  v60 = *(_QWORD *)(v0 + 1480);
  v61 = *(_QWORD *)(v0 + 1472);
  v62 = *(_QWORD *)(v0 + 1464);
  v63 = *(_QWORD *)(v0 + 1456);
  v64 = *(_QWORD *)(v0 + 1448);
  v65 = *(_QWORD *)(v0 + 1440);
  v66 = *(_QWORD *)(v0 + 1416);
  v67 = *(_QWORD *)(v0 + 1408);
  v68 = *(_QWORD *)(v0 + 1400);
  v69 = *(_QWORD *)(v0 + 1392);
  v70 = *(_QWORD *)(v0 + 1384);
  v71 = *(_QWORD *)(v0 + 1376);
  v72 = *(_QWORD *)(v0 + 1344);
  v73 = *(_QWORD *)(v0 + 1336);
  v74 = *(_QWORD *)(v0 + 1328);
  v75 = *(_QWORD *)(v0 + 1320);
  v76 = *(_QWORD *)(v0 + 1312);
  v77 = *(_QWORD *)(v0 + 1304);
  v78 = *(_QWORD *)(v0 + 1296);
  v79 = *(_QWORD *)(v0 + 1288);
  v80 = *(_QWORD *)(v0 + 1264);
  v81 = *(_QWORD *)(v0 + 1256);
  v82 = *(_QWORD *)(v0 + 1248);
  v83 = *(_QWORD *)(v0 + 1240);
  v84 = *(_QWORD *)(v0 + 1232);
  v85 = *(_QWORD *)(v0 + 1200);
  v86 = *(_QWORD *)(v0 + 1192);
  v87 = *(_QWORD *)(v0 + 1184);
  v88 = *(_QWORD *)(v0 + 1176);
  v89 = *(_QWORD *)(v0 + 1168);
  v90 = *(_QWORD *)(v0 + 1160);
  v91 = *(_QWORD *)(v0 + 1152);
  v92 = *(_QWORD *)(v0 + 1144);
  v93 = *(_QWORD *)(v0 + 1120);
  v94 = *(_QWORD *)(v0 + 1112);
  v95 = *(_QWORD *)(v0 + 1104);
  v96 = *(_QWORD *)(v0 + 1096);
  v97 = *(_QWORD *)(v0 + 1088);
  v98 = *(_QWORD *)(v0 + 1080);
  v99 = *(_QWORD *)(v0 + 1072);
  v100 = *(_QWORD *)(v0 + 1064);
  v101 = *(_QWORD *)(v0 + 1056);
  v102 = *(_QWORD *)(v0 + 1024);
  v103 = *(_QWORD *)(v0 + 1016);
  v104 = *(_QWORD *)(v0 + 1008);
  v105 = *(_QWORD *)(v0 + 1000);
  v106 = *(_QWORD *)(v0 + 976);
  v107 = *(_QWORD *)(v0 + 952);
  v109 = *(_QWORD *)(v0 + 944);
  v110 = *(_QWORD *)(v0 + 928);
  v111 = *(_QWORD *)(v0 + 920);
  v112 = *(_QWORD *)(v0 + 896);
  sub_100004048(v26, &qword_1010EE1E0);
  sub_100004048(v18, &qword_1010EE1E8);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v26);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  swift_task_dealloc(v40);
  swift_task_dealloc(v41);
  swift_task_dealloc(v42);
  swift_task_dealloc(v43);
  swift_task_dealloc(v44);
  swift_task_dealloc(v45);
  swift_task_dealloc(v46);
  swift_task_dealloc(v47);
  swift_task_dealloc(v48);
  swift_task_dealloc(v49);
  swift_task_dealloc(v50);
  swift_task_dealloc(v51);
  swift_task_dealloc(v52);
  swift_task_dealloc(v53);
  swift_task_dealloc(v54);
  swift_task_dealloc(v55);
  swift_task_dealloc(v56);
  swift_task_dealloc(v57);
  swift_task_dealloc(v58);
  swift_task_dealloc(v59);
  swift_task_dealloc(v60);
  swift_task_dealloc(v61);
  swift_task_dealloc(v62);
  swift_task_dealloc(v63);
  swift_task_dealloc(v64);
  swift_task_dealloc(v65);
  swift_task_dealloc(v66);
  swift_task_dealloc(v67);
  swift_task_dealloc(v68);
  swift_task_dealloc(v69);
  swift_task_dealloc(v70);
  swift_task_dealloc(v71);
  swift_task_dealloc(v72);
  swift_task_dealloc(v73);
  swift_task_dealloc(v74);
  swift_task_dealloc(v75);
  swift_task_dealloc(v76);
  swift_task_dealloc(v77);
  swift_task_dealloc(v78);
  swift_task_dealloc(v79);
  swift_task_dealloc(v80);
  swift_task_dealloc(v81);
  swift_task_dealloc(v82);
  swift_task_dealloc(v83);
  swift_task_dealloc(v84);
  swift_task_dealloc(v85);
  swift_task_dealloc(v86);
  swift_task_dealloc(v87);
  swift_task_dealloc(v88);
  swift_task_dealloc(v89);
  swift_task_dealloc(v90);
  swift_task_dealloc(v91);
  swift_task_dealloc(v92);
  swift_task_dealloc(v93);
  swift_task_dealloc(v94);
  swift_task_dealloc(v95);
  swift_task_dealloc(v96);
  swift_task_dealloc(v97);
  swift_task_dealloc(v98);
  swift_task_dealloc(v99);
  swift_task_dealloc(v100);
  swift_task_dealloc(v101);
  swift_task_dealloc(v102);
  swift_task_dealloc(v103);
  swift_task_dealloc(v104);
  swift_task_dealloc(v105);
  swift_task_dealloc(v106);
  swift_task_dealloc(v107);
  swift_task_dealloc(v109);
  swift_task_dealloc(v110);
  swift_task_dealloc(v111);
  swift_task_dealloc(v112);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100B74520()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v2 = (_QWORD *)swift_task_alloc(v1);
  *(_QWORD *)(v0 + 1992) = v2;
  v3 = type metadata accessor for BeaconKeyManager(0);
  *v2 = v0;
  v2[1] = sub_100B74598;
  return unsafeBlocking<A>(_:)(v0 + 672, sub_10007C6FC, *(_QWORD *)(v0 + 1848), v3);
}

uint64_t sub_100B74598()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 1848);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 1992));
  swift_release();
  return swift_task_switch(sub_100B745F8, v1, 0);
}

uint64_t sub_100B745F8()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[111];
  v0[250] = v0[84];
  return swift_task_switch(sub_100B74614, v1, 0);
}

uint64_t sub_100B74614()
{
  uint64_t v0;
  uint64_t v1;
  int *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uid_t v25;
  _QWORD *v26;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(uint64_t, uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void (*v55)(void);
  uint64_t v56;
  uint64_t v57;

  v40 = *(void (**)(uint64_t, uint64_t))(v0 + 1840);
  v44 = *(int *)(v0 + 2812);
  v46 = *(int *)(v0 + 2808);
  v47 = *(int *)(v0 + 2804);
  v55 = *(void (**)(void))(v0 + 1832);
  v1 = *(_QWORD *)(v0 + 1704);
  v57 = *(_QWORD *)(v0 + 1664);
  v2 = *(int **)(v0 + 1552);
  v41 = *(_QWORD *)(v0 + 1032);
  v37 = (uint64_t *)(v1 + *(int *)(v0 + 2816));
  v38 = *(_QWORD *)(v0 + 1656);
  v48 = (uint64_t *)(v1 + *(int *)(v0 + 2800));
  v3 = (uint64_t *)(v1 + *(int *)(v0 + 2796));
  v4 = (uint64_t *)(v1 + *(int *)(v0 + 2792));
  v5 = v1 + *(int *)(v0 + 2788);
  v56 = *(_QWORD *)(v0 + 1672);
  v6 = v56 + v2[12];
  v39 = v6;
  v7 = (_QWORD *)(v56 + v2[16]);
  v8 = (_QWORD *)(v56 + v2[20]);
  v9 = (_QWORD *)(v56 + v2[24]);
  v42 = v2[32];
  v28 = (_QWORD *)(v56 + v2[40]);
  v31 = v2[36];
  v34 = v2[28];
  v55();
  sub_10000F9B8(v5, v6, &qword_1010ED860);
  v10 = *v4;
  v53 = *v4;
  v54 = v4[1];
  *(_QWORD *)(v0 + 2008) = v54;
  *v7 = v10;
  v7[1] = v54;
  v51 = *v3;
  v11 = *v3;
  v52 = v3[1];
  *(_QWORD *)(v0 + 2016) = v52;
  *v8 = v11;
  v8[1] = v52;
  v12 = *v48;
  v49 = v48[1];
  v50 = v12;
  *v9 = v12;
  v9[1] = v49;
  LODWORD(v47) = *(_DWORD *)(v1 + v47);
  *(_DWORD *)(v56 + v34) = v47;
  LODWORD(v46) = *(_DWORD *)(v1 + v46);
  *(_DWORD *)(v56 + v42) = v46;
  v45 = *(_QWORD *)(v1 + v44);
  *(_QWORD *)(v56 + v31) = v45;
  v14 = v37[1];
  v43 = *v37;
  v13 = *v37;
  *(_QWORD *)(v0 + 2024) = v14;
  *v28 = v13;
  v28[1] = v14;
  v15 = v57 + v2[12];
  v16 = (_QWORD *)(v57 + v2[16]);
  v17 = (_QWORD *)(v57 + v2[20]);
  v18 = (_QWORD *)(v57 + v2[24]);
  v35 = v2[28];
  v29 = v2[36];
  v32 = v2[32];
  v19 = (_QWORD *)(v57 + v2[40]);
  v55();
  sub_10000F9B8(v5, v15, &qword_1010ED860);
  *v16 = v53;
  v16[1] = v54;
  *v17 = v51;
  v17[1] = v52;
  *v18 = v50;
  v18[1] = v49;
  *(_DWORD *)(v57 + v35) = v47;
  *(_DWORD *)(v57 + v32) = v46;
  *(_QWORD *)(v57 + v29) = v45;
  *v19 = v43;
  v19[1] = v14;
  v30 = v38 + v2[12];
  v20 = (_QWORD *)(v38 + v2[16]);
  v21 = (_QWORD *)(v38 + v2[20]);
  v22 = (_QWORD *)(v38 + v2[24]);
  v33 = v2[32];
  v36 = v2[28];
  v23 = (_QWORD *)(v38 + v2[40]);
  v24 = v2[36];
  ((void (*)(uint64_t, uint64_t, uint64_t))v55)(v38, v1, v41);
  sub_10000F9B8(v5, v30, &qword_1010ED860);
  *v20 = v53;
  v20[1] = v54;
  *v21 = v51;
  v21[1] = v52;
  *v22 = v50;
  v22[1] = v49;
  *(_DWORD *)(v38 + v36) = v47;
  *(_DWORD *)(v38 + v33) = v46;
  *(_QWORD *)(v38 + v24) = v45;
  *v23 = v43;
  v23[1] = v14;
  *(_QWORD *)(v0 + 16) = v53;
  *(_QWORD *)(v0 + 24) = v54;
  *(_QWORD *)(v0 + 32) = v45;
  *(_QWORD *)(v0 + 40) = v43;
  *(_QWORD *)(v0 + 48) = v14;
  *(_QWORD *)(v0 + 56) = v51;
  *(_QWORD *)(v0 + 64) = v52;
  *(_QWORD *)(v0 + 72) = 0;
  *(_QWORD *)(v0 + 80) = 0;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRetain(v52);
  swift_bridgeObjectRetain(v54);
  sub_100004048(v30, &qword_1010ED860);
  v40(v38, v41);
  sub_100004048(v15, &qword_1010ED860);
  v40(v57, v41);
  sub_100004048(v39, &qword_1010ED860);
  v40(v56, v41);
  v25 = getuid();
  sub_100A06500(v25);
  v26 = (_QWORD *)swift_task_alloc(dword_10112082C);
  *(_QWORD *)(v0 + 2032) = v26;
  *v26 = v0;
  v26[1] = sub_100B749F4;
  return sub_100DCDAF8(v0 + 16, *(_QWORD *)(v0 + 1704), *(_QWORD *)(v0 + 1112));
}

uint64_t sub_100B749F4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 2032);
  *(_QWORD *)(*v1 + 2040) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = *(_QWORD *)(v2 + 888);
    (*(void (**)(_QWORD, _QWORD))(v2 + 1840))(*(_QWORD *)(v2 + 1112), *(_QWORD *)(v2 + 1032));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    v5 = sub_100B80D18;
  }
  else
  {
    v4 = *(_QWORD *)(v2 + 1848);
    (*(void (**)(_QWORD, _QWORD))(v2 + 1840))(*(_QWORD *)(v2 + 1112), *(_QWORD *)(v2 + 1032));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    v5 = sub_100B74AF0;
  }
  return swift_task_switch(v5, v4, 0);
}

uint64_t sub_100B74AF0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = v0[231];
  v2 = swift_allocObject(&unk_1010AFA70, 25, 7);
  v0[256] = v2;
  *(_QWORD *)(v2 + 16) = v1;
  *(_BYTE *)(v2 + 24) = 15;
  v3 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v4 = (_QWORD *)swift_task_alloc(v3);
  v0[257] = v4;
  *v4 = v0;
  v4[1] = sub_100B74B90;
  return unsafeBlocking<A>(_:)(v4, sub_100B88584, v2, &type metadata for () + 1);
}

uint64_t sub_100B74B90()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 1848);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 2056));
  swift_release();
  return swift_task_switch(sub_100B74BF4, v1, 0);
}

uint64_t sub_100B74BF4()
{
  _QWORD *v0;

  v0[258] = v0[255];
  return swift_task_switch(sub_100B74C10, v0[231], 0);
}

uint64_t sub_100B74C10()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;

  v1 = *(_QWORD *)(v0 + 1848);
  v2 = *(_QWORD *)(v0 + 1120);
  v3 = *(_QWORD *)(v0 + 1048);
  v4 = *(_QWORD *)(v0 + 1040);
  v5 = *(_QWORD *)(v0 + 1032);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v0 + 1832))(v2, *(_QWORD *)(v0 + 1704), v5);
  LODWORD(v6) = *(_DWORD *)(v4 + 80);
  *(_DWORD *)(v0 + 2840) = v6;
  v6 = v6;
  v7 = (v6 + 24) & ~v6;
  v8 = swift_allocObject(&unk_1010AF980, v7 + v3, v6 | 7);
  *(_QWORD *)(v0 + 2072) = v8;
  *(_QWORD *)(v8 + 16) = v1;
  v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32);
  *(_QWORD *)(v0 + 2080) = v9;
  v9(v8 + v7, v2, v5);
  v10 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v11 = (_QWORD *)swift_task_alloc(v10);
  *(_QWORD *)(v0 + 2088) = v11;
  v12 = sub_10001A9A8(&qword_1010EC840);
  *(_QWORD *)(v0 + 2096) = v12;
  *v11 = v0;
  v11[1] = sub_100B74D1C;
  return unsafeBlocking<A>(_:)(v0 + 656, sub_1000D9288, v8, v12);
}

uint64_t sub_100B74D1C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 1848);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 2088));
  swift_release();
  return swift_task_switch(sub_100B74D80, v1, 0);
}

uint64_t sub_100B74D80()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[111];
  v0[263] = v0[82];
  return swift_task_switch(sub_100B74D9C, v1, 0);
}

uint64_t sub_100B74D9C()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  int *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int (*v15)(uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t (*v35)();
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(uint64_t, uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _DWORD *v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  v60 = *(int *)(v0 + 2812);
  v61 = *(int *)(v0 + 2816);
  v58 = *(int *)(v0 + 2804);
  v59 = *(int *)(v0 + 2808);
  v1 = *(void (**)(uint64_t, uint64_t))(v0 + 1832);
  v2 = *(_QWORD *)(v0 + 1704);
  v3 = *(_QWORD *)(v0 + 1648);
  v4 = *(int **)(v0 + 1552);
  v56 = *(_QWORD *)(v0 + 1032);
  v57 = *(_QWORD *)(v0 + 1040);
  v5 = (_QWORD *)(v2 + *(int *)(v0 + 2800));
  v6 = (_QWORD *)(v2 + *(int *)(v0 + 2796));
  v7 = (_QWORD *)(v2 + *(int *)(v0 + 2792));
  v51 = v2 + *(int *)(v0 + 2788);
  *(_QWORD *)(v0 + 648) = _swiftEmptyArrayStorage;
  v8 = v3 + v4[12];
  v9 = (_QWORD *)(v3 + v4[16]);
  v10 = (_QWORD *)(v3 + v4[20]);
  v11 = (_QWORD *)(v3 + v4[24]);
  v52 = v4[28];
  v53 = v4[32];
  v54 = v4[36];
  v55 = v4[40];
  v1(v3, v2);
  sub_10000F9B8(v51, v8, &qword_1010ED860);
  v12 = v7[1];
  *v9 = *v7;
  v9[1] = v12;
  v13 = v6[1];
  *v10 = *v6;
  v10[1] = v13;
  v14 = v5[1];
  *v11 = *v5;
  v11[1] = v14;
  *(_DWORD *)(v3 + v52) = *(_DWORD *)(v2 + v58);
  *(_DWORD *)(v3 + v53) = *(_DWORD *)(v2 + v59);
  *(_QWORD *)(v3 + v54) = *(_QWORD *)(v2 + v60);
  *(_OWORD *)(v3 + v55) = *(_OWORD *)(v2 + v61);
  v15 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v57 + 48);
  *(_QWORD *)(v0 + 2112) = v15;
  if (v15(v8, 1, v56) == 1)
  {
    v16 = v0 + 320;
    v17 = v0 + 648;
    v18 = *(void (**)(uint64_t, uint64_t))(v0 + 1840);
    v19 = *(_QWORD *)(v0 + 1648);
    v20 = *(_QWORD *)(v0 + 1032);
    sub_100004048(v8, &qword_1010ED860);
    v18(v19, v20);
    *(_QWORD *)(v0 + 2200) = *(_QWORD *)(v0 + 2064);
    v21 = *(_QWORD *)(v0 + 2104);
    (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 1984))(*(_QWORD *)(v0 + 1528), *(_QWORD *)(v0 + 1976), *(_QWORD *)(v0 + 1424));
    v22 = *(_QWORD *)(v0 + 648);
    swift_bridgeObjectRetain_n(v21, 2);
    swift_bridgeObjectRetain_n(v22, 2);
    v24 = Logger.logObject.getter(v23);
    v25 = static os_log_type_t.default.getter(v24);
    v26 = os_log_type_enabled(v24, v25);
    v27 = *(_QWORD *)(v0 + 2104);
    if (v26)
    {
      v28 = swift_slowAlloc(22, -1);
      *(_DWORD *)v28 = 134218240;
      v29 = *(_QWORD *)(v27 + 16);
      swift_bridgeObjectRelease();
      *(_QWORD *)(v0 + 728) = v29;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 728, v0 + 736, v28 + 4, v28 + 12);
      swift_bridgeObjectRelease();
      *(_WORD *)(v28 + 12) = 2048;
      v30 = *(_QWORD *)(v22 + 16);
      swift_bridgeObjectRelease();
      *(_QWORD *)(v0 + 736) = v30;
      v17 = v0 + 648;
      v16 = v0 + 320;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 736, v0 + 744, v28 + 14, v28 + 22);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "Existing member circles for beacon %ld, by owner beacon id: %ld.", (uint8_t *)v28, 0x16u);
      swift_slowDealloc(v28, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n(v22, 2);
      swift_bridgeObjectRelease_n(v27, 2);
    }

    v37 = *(_QWORD *)(v0 + 2104);
    v38 = *(_QWORD *)(v0 + 1528);
    v39 = *(_QWORD *)(v0 + 1424);
    v40 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 1432) + 8);
    *(_QWORD *)(v0 + 2208) = v40;
    v40(v38, v39);
    swift_beginAccess(v17, v16, 0, 0);
    swift_bridgeObjectRetain(*(_QWORD *)(v0 + 648));
    sub_1003036C4(v41);
    v42 = v37;
    *(_QWORD *)(v0 + 2216) = v37;
    v43 = *(_QWORD *)(v37 + 16);
    *(_QWORD *)(v0 + 2224) = v43;
    if (v43)
    {
      v44 = *(_QWORD *)(v0 + 1360);
      v45 = *(_DWORD **)(v0 + 984);
      v46 = *(_DWORD *)(v44 + 80);
      *(_DWORD *)(v0 + 2852) = v46;
      *(_QWORD *)(v0 + 2232) = *(_QWORD *)(v44 + 72);
      *(_QWORD *)(v0 + 2248) = _swiftEmptyArrayStorage;
      *(_QWORD *)(v0 + 2240) = 0;
      v47 = *(_QWORD *)(v0 + 1848);
      v48 = *(_QWORD *)(v0 + 1408);
      v49 = v42 + ((v46 + 32) & ~(unint64_t)v46);
      swift_bridgeObjectRetain(v42);
      sub_10005972C(v49, v48, type metadata accessor for MemberSharingCircle);
      *(_DWORD *)(v0 + 2856) = v45[12];
      *(_DWORD *)(v0 + 2860) = v45[16];
      *(_DWORD *)(v0 + 2864) = v45[20];
      *(_DWORD *)(v0 + 2868) = v45[24];
      v35 = sub_100B75CA0;
    }
    else
    {
      *(_QWORD *)(v0 + 2288) = _swiftEmptyArrayStorage;
      v47 = *(_QWORD *)(v0 + 1848);
      swift_bridgeObjectRetain(_swiftEmptyArrayStorage);
      v35 = sub_100B76160;
    }
    v36 = v47;
  }
  else
  {
    v31 = *(_QWORD *)(v0 + 1848);
    v32 = *(void (**)(uint64_t, uint64_t))(v0 + 1840);
    v33 = *(_QWORD *)(v0 + 1648);
    v34 = *(_QWORD *)(v0 + 1032);
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v0 + 2080))(*(_QWORD *)(v0 + 1104), v8, v34);
    v32(v33, v34);
    v35 = sub_100B751D0;
    v36 = v31;
  }
  return swift_task_switch(v35, v36, 0);
}

uint64_t sub_100B751D0()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v2 = (_QWORD *)swift_task_alloc(v1);
  *(_QWORD *)(v0 + 2120) = v2;
  v3 = sub_10001A9A8(&qword_1010ECA48);
  *v2 = v0;
  v2[1] = sub_100B7524C;
  return unsafeBlocking<A>(_:)(v0 + 744, sub_10007C3B8, *(_QWORD *)(v0 + 1848), v3);
}

uint64_t sub_100B7524C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 1848);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 2120));
  swift_release();
  return swift_task_switch(sub_100B752AC, v1, 0);
}

uint64_t sub_100B752AC()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[111];
  v0[266] = v0[93];
  return swift_task_switch(sub_100B752C8, v1, 0);
}

uint64_t sub_100B752C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int *v3;
  uint64_t *v4;
  _QWORD *v5;
  uint64_t *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  void (*v25)(uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v29)();
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  _BOOL4 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _DWORD *v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;

  v67 = *(_QWORD *)(v0 + 2128);
  v68 = *(_QWORD *)(v0 + 2064);
  v64 = *(int *)(v0 + 2808);
  v65 = *(int *)(v0 + 2812);
  v63 = *(int *)(v0 + 2804);
  v1 = *(_QWORD *)(v0 + 1704);
  v2 = *(_QWORD *)(v0 + 1640);
  v3 = *(int **)(v0 + 1552);
  v66 = *(_QWORD *)(v0 + 1104);
  v62 = (_QWORD *)(v1 + *(int *)(v0 + 2816));
  v4 = (uint64_t *)(v1 + *(int *)(v0 + 2800));
  v5 = (_QWORD *)(v1 + *(int *)(v0 + 2796));
  v6 = (uint64_t *)(v1 + *(int *)(v0 + 2792));
  v58 = v1 + *(int *)(v0 + 2788);
  v57 = v2 + v3[12];
  v7 = (_QWORD *)(v2 + v3[16]);
  v8 = (_QWORD *)(v2 + v3[20]);
  v9 = (_QWORD *)(v2 + v3[24]);
  v60 = v3[28];
  v61 = v3[32];
  v10 = (_QWORD *)(v2 + v3[40]);
  v59 = v3[36];
  (*(void (**)(uint64_t, uint64_t, _QWORD))(v0 + 1832))(v2, v1, *(_QWORD *)(v0 + 1032));
  sub_10000F9B8(v58, v57, &qword_1010ED860);
  v11 = *v6;
  v12 = v6[1];
  *v7 = v11;
  v7[1] = v12;
  v13 = v5[1];
  *v8 = *v5;
  v8[1] = v13;
  v14 = *v4;
  v15 = v4[1];
  *v9 = v14;
  v9[1] = v15;
  *(_DWORD *)(v2 + v60) = *(_DWORD *)(v1 + v63);
  *(_DWORD *)(v2 + v61) = *(_DWORD *)(v1 + v64);
  *(_QWORD *)(v2 + v59) = *(_QWORD *)(v1 + v65);
  v16 = v62[1];
  *v10 = *v62;
  v10[1] = v16;
  v17 = (unint64_t *)swift_task_alloc(32);
  v17[2] = v2;
  v17[3] = v66;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRetain(v15);
  v18 = sub_10008B574((uint64_t (*)(char *))sub_100B860E0, v17, v67);
  *(_QWORD *)(v0 + 2136) = v18;
  *(_QWORD *)(v0 + 2144) = v68;
  swift_task_dealloc(v17);
  sub_100004048(v2, &qword_1010EE1E0);
  v19 = *(_QWORD *)(v18 + 16);
  *(_QWORD *)(v0 + 2152) = v19;
  if (v19)
  {
    v20 = *(_QWORD *)(v0 + 1256);
    v21 = *(_QWORD *)(v0 + 1216);
    v22 = *(int *)(*(_QWORD *)(v0 + 1208) + 20);
    *(_DWORD *)(v0 + 2844) = v22;
    v23 = *(_DWORD *)(v21 + 80);
    *(_DWORD *)(v0 + 2848) = v23;
    *(_QWORD *)(v0 + 2160) = *(_QWORD *)(v21 + 72);
    *(_QWORD *)(v0 + 2168) = 0;
    v24 = *(_QWORD *)(v0 + 1848);
    v25 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1832);
    v26 = *(_QWORD *)(v0 + 1120);
    v27 = *(_QWORD *)(v0 + 1032);
    v28 = v20 + v22;
    sub_10005972C(*(_QWORD *)(v0 + 2136) + ((v23 + 32) & ~(unint64_t)v23), v20, type metadata accessor for SharedBeaconRecord);
    v25(v26, v28, v27);
    sub_1000126B0(v20, type metadata accessor for SharedBeaconRecord);
    v29 = sub_100B757A0;
    v30 = v24;
  }
  else
  {
    v31 = v0 + 320;
    v32 = v0 + 648;
    swift_bridgeObjectRelease();
    (*(void (**)(_QWORD, _QWORD))(v0 + 1840))(*(_QWORD *)(v0 + 1104), *(_QWORD *)(v0 + 1032));
    *(_QWORD *)(v0 + 2200) = *(_QWORD *)(v0 + 2144);
    v33 = *(_QWORD *)(v0 + 2104);
    (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 1984))(*(_QWORD *)(v0 + 1528), *(_QWORD *)(v0 + 1976), *(_QWORD *)(v0 + 1424));
    v34 = *(_QWORD *)(v0 + 648);
    swift_bridgeObjectRetain_n(v33, 2);
    swift_bridgeObjectRetain_n(v34, 2);
    v36 = Logger.logObject.getter(v35);
    v37 = static os_log_type_t.default.getter(v36);
    v38 = os_log_type_enabled(v36, v37);
    v39 = *(_QWORD *)(v0 + 2104);
    if (v38)
    {
      v40 = swift_slowAlloc(22, -1);
      *(_DWORD *)v40 = 134218240;
      v41 = *(_QWORD *)(v39 + 16);
      swift_bridgeObjectRelease();
      *(_QWORD *)(v0 + 728) = v41;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 728, v0 + 736, v40 + 4, v40 + 12);
      swift_bridgeObjectRelease();
      *(_WORD *)(v40 + 12) = 2048;
      v42 = *(_QWORD *)(v34 + 16);
      swift_bridgeObjectRelease();
      *(_QWORD *)(v0 + 736) = v42;
      v32 = v0 + 648;
      v31 = v0 + 320;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 736, v0 + 744, v40 + 14, v40 + 22);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v36, v37, "Existing member circles for beacon %ld, by owner beacon id: %ld.", (uint8_t *)v40, 0x16u);
      swift_slowDealloc(v40, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n(v34, 2);
      swift_bridgeObjectRelease_n(v39, 2);
    }

    v43 = *(_QWORD *)(v0 + 2104);
    v44 = *(_QWORD *)(v0 + 1528);
    v45 = *(_QWORD *)(v0 + 1424);
    v46 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 1432) + 8);
    *(_QWORD *)(v0 + 2208) = v46;
    v46(v44, v45);
    swift_beginAccess(v32, v31, 0, 0);
    swift_bridgeObjectRetain(*(_QWORD *)(v0 + 648));
    sub_1003036C4(v47);
    v48 = v43;
    *(_QWORD *)(v0 + 2216) = v43;
    v49 = *(_QWORD *)(v43 + 16);
    *(_QWORD *)(v0 + 2224) = v49;
    if (v49)
    {
      v50 = *(_QWORD *)(v0 + 1360);
      v51 = *(_DWORD **)(v0 + 984);
      v52 = *(_DWORD *)(v50 + 80);
      *(_DWORD *)(v0 + 2852) = v52;
      *(_QWORD *)(v0 + 2232) = *(_QWORD *)(v50 + 72);
      *(_QWORD *)(v0 + 2248) = _swiftEmptyArrayStorage;
      *(_QWORD *)(v0 + 2240) = 0;
      v53 = *(_QWORD *)(v0 + 1848);
      v54 = *(_QWORD *)(v0 + 1408);
      v55 = v48 + ((v52 + 32) & ~(unint64_t)v52);
      swift_bridgeObjectRetain(v48);
      sub_10005972C(v55, v54, type metadata accessor for MemberSharingCircle);
      *(_DWORD *)(v0 + 2856) = v51[12];
      *(_DWORD *)(v0 + 2860) = v51[16];
      *(_DWORD *)(v0 + 2864) = v51[20];
      *(_DWORD *)(v0 + 2868) = v51[24];
      v29 = sub_100B75CA0;
    }
    else
    {
      *(_QWORD *)(v0 + 2288) = _swiftEmptyArrayStorage;
      v53 = *(_QWORD *)(v0 + 1848);
      swift_bridgeObjectRetain(_swiftEmptyArrayStorage);
      v29 = sub_100B76160;
    }
    v30 = v53;
  }
  return swift_task_switch(v29, v30, 0);
}

uint64_t sub_100B757A0()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 2080);
  v2 = *(unsigned __int8 *)(v0 + 2840);
  v3 = *(_QWORD *)(v0 + 1848);
  v4 = *(_QWORD *)(v0 + 1096);
  v5 = *(_QWORD *)(v0 + 1032);
  v6 = (v2 + 24) & ~v2;
  v7 = *(_QWORD *)(v0 + 1048) + v6;
  v8 = v2 | 7;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v0 + 1832))(v4, *(_QWORD *)(v0 + 1120), v5);
  v9 = swift_allocObject(&unk_1010AFA48, v7, v8);
  *(_QWORD *)(v0 + 2176) = v9;
  *(_QWORD *)(v9 + 16) = v3;
  v1(v9 + v6, v4, v5);
  v10 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v11 = (_QWORD *)swift_task_alloc(v10);
  *(_QWORD *)(v0 + 2184) = v11;
  *v11 = v0;
  v11[1] = sub_100B75894;
  return unsafeBlocking<A>(_:)(v0 + 752, sub_1000D9288, v9, *(_QWORD *)(v0 + 2096));
}

uint64_t sub_100B75894()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 1848);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 2184));
  swift_release();
  return swift_task_switch(sub_100B758F8, v1, 0);
}

uint64_t sub_100B758F8()
{
  _QWORD *v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = (void (*)(uint64_t, uint64_t))v0[230];
  v2 = v0[140];
  v3 = v0[129];
  v4 = v0[111];
  v0[274] = v0[94];
  v1(v2, v3);
  return swift_task_switch(sub_100B75948, v4, 0);
}

uint64_t sub_100B75948()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  _BOOL4 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)();
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _DWORD *v30;
  int v31;
  uint64_t v32;
  uint64_t v33;

  v1 = *(_QWORD *)(v0 + 2152);
  v2 = *(_QWORD *)(v0 + 2168) + 1;
  sub_1003036C4(*(_QWORD *)(v0 + 2192));
  if (v2 == v1)
  {
    v3 = v0 + 320;
    swift_bridgeObjectRelease();
    (*(void (**)(_QWORD, _QWORD))(v0 + 1840))(*(_QWORD *)(v0 + 1104), *(_QWORD *)(v0 + 1032));
    *(_QWORD *)(v0 + 2200) = *(_QWORD *)(v0 + 2144);
    v4 = *(_QWORD *)(v0 + 2104);
    (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 1984))(*(_QWORD *)(v0 + 1528), *(_QWORD *)(v0 + 1976), *(_QWORD *)(v0 + 1424));
    v5 = *(_QWORD *)(v0 + 648);
    swift_bridgeObjectRetain_n(v4, 2);
    swift_bridgeObjectRetain_n(v5, 2);
    v7 = Logger.logObject.getter(v6);
    v8 = static os_log_type_t.default.getter(v7);
    v9 = os_log_type_enabled(v7, v8);
    v10 = *(_QWORD *)(v0 + 2104);
    if (v9)
    {
      v11 = swift_slowAlloc(22, -1);
      *(_DWORD *)v11 = 134218240;
      v12 = *(_QWORD *)(v10 + 16);
      swift_bridgeObjectRelease();
      *(_QWORD *)(v0 + 728) = v12;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 728, v0 + 736, v11 + 4, v11 + 12);
      swift_bridgeObjectRelease();
      *(_WORD *)(v11 + 12) = 2048;
      v13 = *(_QWORD *)(v5 + 16);
      swift_bridgeObjectRelease();
      *(_QWORD *)(v0 + 736) = v13;
      v3 = v0 + 320;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 736, v0 + 744, v11 + 14, v11 + 22);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Existing member circles for beacon %ld, by owner beacon id: %ld.", (uint8_t *)v11, 0x16u);
      swift_slowDealloc(v11, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n(v5, 2);
      swift_bridgeObjectRelease_n(v10, 2);
    }

    v22 = *(_QWORD *)(v0 + 2104);
    v23 = *(_QWORD *)(v0 + 1528);
    v24 = *(_QWORD *)(v0 + 1424);
    v25 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 1432) + 8);
    *(_QWORD *)(v0 + 2208) = v25;
    v25(v23, v24);
    swift_beginAccess(v0 + 648, v3, 0, 0);
    swift_bridgeObjectRetain(*(_QWORD *)(v0 + 648));
    sub_1003036C4(v26);
    v27 = v22;
    *(_QWORD *)(v0 + 2216) = v22;
    v28 = *(_QWORD *)(v22 + 16);
    *(_QWORD *)(v0 + 2224) = v28;
    if (v28)
    {
      v29 = *(_QWORD *)(v0 + 1360);
      v30 = *(_DWORD **)(v0 + 984);
      v31 = *(_DWORD *)(v29 + 80);
      *(_DWORD *)(v0 + 2852) = v31;
      *(_QWORD *)(v0 + 2232) = *(_QWORD *)(v29 + 72);
      *(_QWORD *)(v0 + 2248) = _swiftEmptyArrayStorage;
      *(_QWORD *)(v0 + 2240) = 0;
      v15 = *(_QWORD *)(v0 + 1848);
      v32 = *(_QWORD *)(v0 + 1408);
      v33 = v27 + ((v31 + 32) & ~(unint64_t)v31);
      swift_bridgeObjectRetain(v27);
      sub_10005972C(v33, v32, type metadata accessor for MemberSharingCircle);
      *(_DWORD *)(v0 + 2856) = v30[12];
      *(_DWORD *)(v0 + 2860) = v30[16];
      *(_DWORD *)(v0 + 2864) = v30[20];
      *(_DWORD *)(v0 + 2868) = v30[24];
      v21 = sub_100B75CA0;
    }
    else
    {
      *(_QWORD *)(v0 + 2288) = _swiftEmptyArrayStorage;
      v15 = *(_QWORD *)(v0 + 1848);
      swift_bridgeObjectRetain(_swiftEmptyArrayStorage);
      v21 = sub_100B76160;
    }
  }
  else
  {
    v14 = *(_QWORD *)(v0 + 2168) + 1;
    *(_QWORD *)(v0 + 2168) = v14;
    v15 = *(_QWORD *)(v0 + 1848);
    v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1832);
    v17 = *(_QWORD *)(v0 + 1256);
    v18 = *(_QWORD *)(v0 + 1120);
    v19 = *(_QWORD *)(v0 + 1032);
    v20 = v17 + *(int *)(v0 + 2844);
    sub_10005972C(*(_QWORD *)(v0 + 2136)+ ((*(unsigned __int8 *)(v0 + 2848) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 2848))+ *(_QWORD *)(v0 + 2160) * v14, v17, type metadata accessor for SharedBeaconRecord);
    v16(v18, v20, v19);
    sub_1000126B0(v17, type metadata accessor for SharedBeaconRecord);
    v21 = sub_100B757A0;
  }
  return swift_task_switch(v21, v15, 0);
}

uint64_t sub_100B75CA0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v1 = *(unsigned __int8 *)(v0 + 2852);
  v2 = *(_QWORD *)(v0 + 1848);
  v3 = *(_QWORD *)(v0 + 1400);
  v4 = (v1 + 24) & ~v1;
  v5 = v4 + *(_QWORD *)(v0 + 1368);
  v6 = v1 | 7;
  sub_10005972C(*(_QWORD *)(v0 + 1408), v3, type metadata accessor for MemberSharingCircle);
  v7 = swift_allocObject(&unk_1010AF9A8, v5, v6);
  *(_QWORD *)(v0 + 2256) = v7;
  *(_QWORD *)(v7 + 16) = v2;
  sub_1000126EC(v3, v7 + v4, type metadata accessor for MemberSharingCircle);
  v8 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v9 = (_QWORD *)swift_task_alloc(v8);
  *(_QWORD *)(v0 + 2264) = v9;
  *v9 = v0;
  v9[1] = sub_100B75D84;
  return unsafeBlocking<A>(_:)(*(_QWORD *)(v0 + 1016), sub_100142AA0, v7, *(_QWORD *)(v0 + 984));
}

uint64_t sub_100B75D84()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 1848);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 2264));
  swift_release();
  return swift_task_switch(sub_100B75DE8, v1, 0);
}

uint64_t sub_100B75DE8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(_QWORD *)(v0 + 1024);
  v2 = *(_QWORD *)(v0 + 1016);
  v3 = *(int **)(v0 + 984);
  v4 = *(_QWORD *)(v0 + 888);
  v5 = v1 + *(int *)(v0 + 2860);
  v6 = v1 + *(int *)(v0 + 2856);
  v7 = v2 + v3[12];
  v8 = v2 + v3[16];
  *(_QWORD *)(v0 + 2272) = *(_QWORD *)(v2 + v3[20]);
  *(_QWORD *)(v0 + 2280) = *(_QWORD *)(v2 + v3[24]);
  sub_1000126EC(v2, v1, type metadata accessor for MemberSharingCircle);
  sub_100005CF0(v7, v6, (uint64_t *)&unk_1010EE180);
  sub_100005CF0(v8, v5, (uint64_t *)&unk_101105880);
  return swift_task_switch(sub_100B75EA8, v4, 0);
}

uint64_t sub_100B75EA8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t (*v27)();
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _DWORD *v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v1 = *(_QWORD *)(v0 + 2280);
  v2 = *(_QWORD *)(v0 + 2272);
  v3 = *(int *)(v0 + 2868);
  v4 = *(_QWORD *)(v0 + 1024);
  v5 = *(_QWORD *)(v0 + 1008);
  v6 = *(_QWORD *)(v0 + 1000);
  v7 = *(int **)(v0 + 984);
  v35 = v4 + *(int *)(v0 + 2860);
  v36 = *(_QWORD *)(v0 + 2248);
  v8 = v4 + *(int *)(v0 + 2856);
  *(_QWORD *)(v4 + *(int *)(v0 + 2864)) = v2;
  *(_QWORD *)(v4 + v3) = v1;
  v9 = v5 + v7[12];
  v10 = v5 + v7[16];
  v33 = v7[20];
  v34 = v10;
  v11 = v7[24];
  sub_10005972C(v4, v5, type metadata accessor for MemberSharingCircle);
  sub_10000F9B8(v8, v9, (uint64_t *)&unk_1010EE180);
  sub_10000F9B8(v35, v10, (uint64_t *)&unk_101105880);
  *(_QWORD *)(v5 + v33) = v2;
  *(_QWORD *)(v5 + v11) = v1;
  v12 = v6 + v7[12];
  v13 = v6 + v7[16];
  v14 = v7[20];
  v15 = v7[24];
  sub_1000126EC(v5, v6, type metadata accessor for MemberSharingCircle);
  sub_100005CF0(v9, v12, (uint64_t *)&unk_1010EE180);
  sub_100005CF0(v34, v13, (uint64_t *)&unk_101105880);
  *(_QWORD *)(v6 + v14) = v2;
  *(_QWORD *)(v6 + v15) = v1;
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v1);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v36);
  v17 = *(_QWORD *)(v0 + 2248);
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    v17 = sub_1007C7D54(0, *(_QWORD *)(v17 + 16) + 1, 1, *(_QWORD *)(v0 + 2248));
  v19 = *(_QWORD *)(v17 + 16);
  v18 = *(_QWORD *)(v17 + 24);
  if (v19 >= v18 >> 1)
    v17 = sub_1007C7D54(v18 > 1, v19 + 1, 1, v17);
  v20 = *(_QWORD *)(v0 + 2224);
  v21 = *(_QWORD *)(v0 + 1408);
  v22 = *(_QWORD *)(v0 + 1024);
  v23 = *(_QWORD *)(v0 + 1000);
  v24 = *(_QWORD *)(v0 + 992);
  v25 = *(_QWORD *)(v0 + 2240) + 1;
  *(_QWORD *)(v17 + 16) = v19 + 1;
  sub_100005CF0(v23, v17+ ((*(unsigned __int8 *)(v24 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80))+ *(_QWORD *)(v24 + 72) * v19, (uint64_t *)&unk_101109120);
  sub_100004048(v22, (uint64_t *)&unk_101109120);
  sub_1000126B0(v21, type metadata accessor for MemberSharingCircle);
  if (v25 == v20)
  {
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 2288) = v17;
    v26 = *(_QWORD *)(v0 + 1848);
    swift_bridgeObjectRetain(v17);
    v27 = sub_100B76160;
    v28 = v26;
  }
  else
  {
    v29 = *(_QWORD *)(v0 + 2240) + 1;
    *(_QWORD *)(v0 + 2248) = v17;
    *(_QWORD *)(v0 + 2240) = v29;
    v30 = *(_QWORD *)(v0 + 1848);
    v31 = *(_DWORD **)(v0 + 984);
    sub_10005972C(*(_QWORD *)(v0 + 2216)+ ((*(unsigned __int8 *)(v0 + 2852) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 2852))+ *(_QWORD *)(v0 + 2232) * v29, *(_QWORD *)(v0 + 1408), type metadata accessor for MemberSharingCircle);
    *(_DWORD *)(v0 + 2856) = v31[12];
    *(_DWORD *)(v0 + 2860) = v31[16];
    *(_DWORD *)(v0 + 2864) = v31[20];
    *(_DWORD *)(v0 + 2868) = v31[24];
    v27 = sub_100B75CA0;
    v28 = v30;
  }
  return swift_task_switch(v27, v28, 0);
}

uint64_t sub_100B76160()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v2 = (_QWORD *)swift_task_alloc(v1);
  *(_QWORD *)(v0 + 2296) = v2;
  v3 = sub_10001A9A8(&qword_1010ECA48);
  *v2 = v0;
  v2[1] = sub_100B761DC;
  return unsafeBlocking<A>(_:)(v0 + 632, sub_10007C3B8, *(_QWORD *)(v0 + 1848), v3);
}

uint64_t sub_100B761DC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 1848);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 2296));
  swift_release();
  return swift_task_switch(sub_100B7623C, v1, 0);
}

uint64_t sub_100B7623C()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[111];
  v0[288] = v0[79];
  return swift_task_switch(sub_100B76258, v1, 0);
}

uint64_t sub_100B76258()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t);

  v1 = *(_QWORD *)(v0 + 2216);
  v2 = sub_100B67804(_swiftEmptyDictionarySingleton, *(_QWORD *)(v0 + 2304));
  swift_bridgeObjectRelease();
  v3 = *(_QWORD *)(v1 + 16);
  v4 = *(_QWORD *)(v0 + 2216);
  if (v3)
  {
    v5 = *(_QWORD *)(v0 + 1360);
    v6 = v4 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    v7 = *(_QWORD *)(v5 + 72);
    swift_bridgeObjectRetain(v4);
    swift_bridgeObjectRetain(v2);
    while (!sub_100B82150(v6, v2))
    {
      v6 += v7;
      if (!--v3)
      {
        swift_bridgeObjectRelease_n(v2, 2);
        goto LABEL_6;
      }
    }
    v12 = *(int *)(v0 + 2768);
    v13 = *(_QWORD *)(v0 + 1824);
    swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 2216), 2);
    swift_bridgeObjectRelease_n(v2, 2);
    v14 = *(unsigned __int8 *)(v13 + v12);
    v10 = 1;
    if (v14 != 4)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      *(_BYTE *)(v0 + 2882) = 1;
      v22 = *(_QWORD *)(v0 + 1320);
      v23 = *(_QWORD *)(v0 + 1272);
      *(_QWORD *)(v0 + 2432) = *(_QWORD *)(*(_QWORD *)(v0 + 888) + 288);
      v19 = v22 + *(int *)(v23 + 28);
      v24 = (uint64_t (*)(uint64_t))((char *)&dword_101112238 + dword_101112238);
      v20 = (_QWORD *)swift_task_alloc(unk_10111223C);
      *(_QWORD *)(v0 + 2440) = v20;
      v21 = sub_100B790D8;
      goto LABEL_12;
    }
  }
  else
  {
LABEL_6:
    v8 = *(int *)(v0 + 2768);
    v9 = *(_QWORD *)(v0 + 1824);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (*(_BYTE *)(v9 + v8) != 4)
      return swift_task_switch(sub_100B77F5C, *(_QWORD *)(v0 + 1848), 0);
    v10 = 0;
  }
  *(_BYTE *)(v0 + 2881) = v10;
  v15 = *(_QWORD *)(v0 + 1344);
  v16 = *(_QWORD *)(v0 + 1272);
  v17 = *(_QWORD *)(v0 + 888);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v18 = sub_10001AA44((_QWORD *)(v17 + 168), *(_QWORD *)(v17 + 192));
  v19 = v15 + *(int *)(v16 + 28);
  *(_QWORD *)(v0 + 2312) = *v18;
  v24 = (uint64_t (*)(uint64_t))((char *)&dword_101112238 + dword_101112238);
  v20 = (_QWORD *)swift_task_alloc(unk_10111223C);
  *(_QWORD *)(v0 + 2320) = v20;
  v21 = sub_100B7648C;
LABEL_12:
  *v20 = v0;
  v20[1] = v21;
  return v24(v19);
}

uint64_t sub_100B7648C(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t (*v11)();
  uint64_t v12;
  _QWORD *v14;
  uint64_t (*v15)(char, uint64_t, uint64_t);

  v8 = *(_QWORD *)(*(_QWORD *)v4 + 2320);
  v9 = *(_QWORD **)v4;
  v9[291] = a3;
  swift_task_dealloc(v8);
  if (v3)
  {
    v9[295] = v3;
    v10 = v9[111];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v11 = sub_100B76F74;
    v12 = v10;
    return swift_task_switch(v11, v12, 0);
  }
  if (!a3)
  {
    v12 = v9[111];
    v11 = sub_100B77748;
    return swift_task_switch(v11, v12, 0);
  }
  v15 = (uint64_t (*)(char, uint64_t, uint64_t))((char *)&dword_10110E0E8 + dword_10110E0E8);
  v14 = (_QWORD *)swift_task_alloc(unk_10110E0EC);
  v9[292] = v14;
  *v14 = v9;
  v14[1] = sub_100B76588;
  return v15(a1, a2, a3);
}

uint64_t sub_100B76588(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)();
  uint64_t v9;

  v5 = *v3;
  v6 = *(_QWORD *)(*v3 + 2336);
  *(_QWORD *)(*v3 + 2344) = v2;
  swift_task_dealloc(v6);
  if (v2)
  {
    v7 = *(_QWORD *)(v5 + 2312);
    v8 = sub_100B7665C;
  }
  else
  {
    v9 = *(_QWORD *)(v5 + 2312);
    swift_bridgeObjectRelease();
    *(_QWORD *)(v5 + 2352) = a2;
    v8 = sub_100B7660C;
    v7 = v9;
  }
  return swift_task_switch(v8, v7, 0);
}

uint64_t sub_100B7660C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();

  v1 = *(_QWORD *)(v0 + 2352);
  swift_bridgeObjectRelease();
  if (v1)
    v2 = sub_100B766B8;
  else
    v2 = sub_100B77748;
  return swift_task_switch(v2, *(_QWORD *)(v0 + 888), 0);
}

uint64_t sub_100B7665C()
{
  _QWORD *v0;
  uint64_t v1;

  swift_bridgeObjectRelease();
  v0[295] = v0[293];
  v1 = v0[111];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_task_switch(sub_100B76F74, v1, 0);
}

uint64_t sub_100B766B8()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  _BOOL4 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t (*v121)(uint64_t);
  uint64_t v122;
  uint64_t v123[3];

  if ((*(unsigned int (**)(_QWORD, uint64_t, _QWORD))(v0 + 2112))(*(_QWORD *)(v0 + 1704) + *(int *)(v0 + 2788), 1, *(_QWORD *)(v0 + 1032)) == 1)
  {
    v1 = *(_QWORD *)(v0 + 1320);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v2 = sub_100986460();
    v3 = swift_allocError(&type metadata for CircleTrustServiceError, v2, 0, 0);
    *v4 = 6;
    swift_willThrow(v3);
    sub_1000126B0(v1, type metadata accessor for MemberPeerTrust);
    if (qword_1010E9938 != -1)
      swift_once(&qword_1010E9938, sub_1000AFBB0);
    v5 = *(_QWORD *)(v0 + 1472);
    v6 = *(_QWORD *)(v0 + 1432);
    v7 = *(_QWORD *)(v0 + 1424);
    v8 = sub_10001A9E8(v7, (uint64_t)qword_1011B6748);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v5, v8, v7);
    swift_errorRetain(v3);
    v9 = swift_errorRetain(v3);
    v10 = Logger.logObject.getter(v9);
    v11 = static os_log_type_t.error.getter(v10);
    v12 = os_log_type_enabled(v10, v11);
    v13 = *(_QWORD *)(v0 + 1472);
    v14 = *(_QWORD *)(v0 + 1432);
    v15 = *(_QWORD *)(v0 + 1424);
    v16 = *(_QWORD *)(v0 + 1200);
    if (v12)
    {
      v118 = *(_QWORD *)(v0 + 1432);
      v17 = (uint8_t *)swift_slowAlloc(12, -1);
      v116 = v15;
      v18 = swift_slowAlloc(32, -1);
      v123[0] = v18;
      *(_DWORD *)v17 = 136315138;
      swift_getErrorValue(v3, v0 + 800, v0 + 392);
      v19 = Error.localizedDescription.getter(*(_QWORD *)(v0 + 400), *(_QWORD *)(v0 + 408));
      *(_QWORD *)(v0 + 688) = sub_100016940(v19, v20, v123);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 688, v0 + 696, v17 + 4, v17 + 12);
      swift_bridgeObjectRelease();
      swift_errorRelease(v3);
      swift_errorRelease(v3);
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Failure on handleCircleTrust, preparing initial data: %s", v17, 0xCu);
      swift_arrayDestroy(v18, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v18, -1, -1);
      swift_slowDealloc(v17, -1, -1);

      swift_errorRelease(v3);
      (*(void (**)(uint64_t, uint64_t))(v118 + 8))(v13, v116);
    }
    else
    {

      swift_errorRelease(v3);
      swift_errorRelease(v3);
      swift_errorRelease(v3);
      (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v13, v15);
    }
    sub_100004048(v16, &qword_1010EC868);
    v26 = *(_QWORD *)(v0 + 1344);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000126B0(v26, type metadata accessor for MemberPeerTrust);
    v27 = *(_QWORD *)(v0 + 1824);
    v28 = *(_QWORD *)(v0 + 1816);
    v29 = *(_QWORD *)(v0 + 1808);
    v30 = *(_QWORD *)(v0 + 1800);
    v31 = *(_QWORD *)(v0 + 1792);
    v32 = *(_QWORD *)(v0 + 1784);
    v33 = *(_QWORD *)(v0 + 1776);
    v34 = *(_QWORD *)(v0 + 1768);
    v36 = *(_QWORD *)(v0 + 1760);
    v37 = *(_QWORD *)(v0 + 1752);
    v38 = *(_QWORD *)(v0 + 1744);
    v39 = *(_QWORD *)(v0 + 1736);
    v40 = *(_QWORD *)(v0 + 1728);
    v41 = *(_QWORD *)(v0 + 1720);
    v35 = *(_QWORD *)(v0 + 1704);
    v42 = *(_QWORD *)(v0 + 1696);
    v43 = *(_QWORD *)(v0 + 1688);
    v44 = *(_QWORD *)(v0 + 1680);
    v45 = *(_QWORD *)(v0 + 1672);
    v46 = *(_QWORD *)(v0 + 1664);
    v47 = *(_QWORD *)(v0 + 1656);
    v48 = *(_QWORD *)(v0 + 1648);
    v49 = *(_QWORD *)(v0 + 1640);
    v50 = *(_QWORD *)(v0 + 1632);
    v51 = *(_QWORD *)(v0 + 1624);
    v52 = *(_QWORD *)(v0 + 1616);
    v53 = *(_QWORD *)(v0 + 1608);
    v54 = *(_QWORD *)(v0 + 1600);
    v55 = *(_QWORD *)(v0 + 1592);
    v56 = *(_QWORD *)(v0 + 1584);
    v57 = *(_QWORD *)(v0 + 1576);
    v58 = *(_QWORD *)(v0 + 1568);
    v59 = *(_QWORD *)(v0 + 1560);
    v60 = *(_QWORD *)(v0 + 1544);
    v61 = *(_QWORD *)(v0 + 1536);
    v62 = *(_QWORD *)(v0 + 1528);
    v63 = *(_QWORD *)(v0 + 1520);
    v64 = *(_QWORD *)(v0 + 1512);
    v65 = *(_QWORD *)(v0 + 1504);
    v66 = *(_QWORD *)(v0 + 1496);
    v67 = *(_QWORD *)(v0 + 1488);
    v68 = *(_QWORD *)(v0 + 1480);
    v69 = *(_QWORD *)(v0 + 1472);
    v70 = *(_QWORD *)(v0 + 1464);
    v71 = *(_QWORD *)(v0 + 1456);
    v72 = *(_QWORD *)(v0 + 1448);
    v73 = *(_QWORD *)(v0 + 1440);
    v74 = *(_QWORD *)(v0 + 1416);
    v75 = *(_QWORD *)(v0 + 1408);
    v76 = *(_QWORD *)(v0 + 1400);
    v77 = *(_QWORD *)(v0 + 1392);
    v78 = *(_QWORD *)(v0 + 1384);
    v79 = *(_QWORD *)(v0 + 1376);
    v80 = *(_QWORD *)(v0 + 1344);
    v81 = *(_QWORD *)(v0 + 1336);
    v82 = *(_QWORD *)(v0 + 1328);
    v83 = *(_QWORD *)(v0 + 1320);
    v84 = *(_QWORD *)(v0 + 1312);
    v85 = *(_QWORD *)(v0 + 1304);
    v86 = *(_QWORD *)(v0 + 1296);
    v87 = *(_QWORD *)(v0 + 1288);
    v88 = *(_QWORD *)(v0 + 1264);
    v89 = *(_QWORD *)(v0 + 1256);
    v90 = *(_QWORD *)(v0 + 1248);
    v91 = *(_QWORD *)(v0 + 1240);
    v92 = *(_QWORD *)(v0 + 1232);
    v93 = *(_QWORD *)(v0 + 1200);
    v94 = *(_QWORD *)(v0 + 1192);
    v95 = *(_QWORD *)(v0 + 1184);
    v96 = *(_QWORD *)(v0 + 1176);
    v97 = *(_QWORD *)(v0 + 1168);
    v98 = *(_QWORD *)(v0 + 1160);
    v99 = *(_QWORD *)(v0 + 1152);
    v100 = *(_QWORD *)(v0 + 1144);
    v101 = *(_QWORD *)(v0 + 1120);
    v102 = *(_QWORD *)(v0 + 1112);
    v103 = *(_QWORD *)(v0 + 1104);
    v104 = *(_QWORD *)(v0 + 1096);
    v105 = *(_QWORD *)(v0 + 1088);
    v106 = *(_QWORD *)(v0 + 1080);
    v107 = *(_QWORD *)(v0 + 1072);
    v108 = *(_QWORD *)(v0 + 1064);
    v109 = *(_QWORD *)(v0 + 1056);
    v110 = *(_QWORD *)(v0 + 1024);
    v111 = *(_QWORD *)(v0 + 1016);
    v112 = *(_QWORD *)(v0 + 1008);
    v113 = *(_QWORD *)(v0 + 1000);
    v114 = *(_QWORD *)(v0 + 976);
    v115 = *(_QWORD *)(v0 + 952);
    v117 = *(_QWORD *)(v0 + 944);
    v119 = *(_QWORD *)(v0 + 928);
    v120 = *(_QWORD *)(v0 + 920);
    v122 = *(_QWORD *)(v0 + 896);
    sub_100004048(v35, &qword_1010EE1E0);
    sub_100004048(v27, &qword_1010EE1E8);
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    swift_task_dealloc(v36);
    swift_task_dealloc(v37);
    swift_task_dealloc(v38);
    swift_task_dealloc(v39);
    swift_task_dealloc(v40);
    swift_task_dealloc(v41);
    swift_task_dealloc(v35);
    swift_task_dealloc(v42);
    swift_task_dealloc(v43);
    swift_task_dealloc(v44);
    swift_task_dealloc(v45);
    swift_task_dealloc(v46);
    swift_task_dealloc(v47);
    swift_task_dealloc(v48);
    swift_task_dealloc(v49);
    swift_task_dealloc(v50);
    swift_task_dealloc(v51);
    swift_task_dealloc(v52);
    swift_task_dealloc(v53);
    swift_task_dealloc(v54);
    swift_task_dealloc(v55);
    swift_task_dealloc(v56);
    swift_task_dealloc(v57);
    swift_task_dealloc(v58);
    swift_task_dealloc(v59);
    swift_task_dealloc(v60);
    swift_task_dealloc(v61);
    swift_task_dealloc(v62);
    swift_task_dealloc(v63);
    swift_task_dealloc(v64);
    swift_task_dealloc(v65);
    swift_task_dealloc(v66);
    swift_task_dealloc(v67);
    swift_task_dealloc(v68);
    swift_task_dealloc(v69);
    swift_task_dealloc(v70);
    swift_task_dealloc(v71);
    swift_task_dealloc(v72);
    swift_task_dealloc(v73);
    swift_task_dealloc(v74);
    swift_task_dealloc(v75);
    swift_task_dealloc(v76);
    swift_task_dealloc(v77);
    swift_task_dealloc(v78);
    swift_task_dealloc(v79);
    swift_task_dealloc(v80);
    swift_task_dealloc(v81);
    swift_task_dealloc(v82);
    swift_task_dealloc(v83);
    swift_task_dealloc(v84);
    swift_task_dealloc(v85);
    swift_task_dealloc(v86);
    swift_task_dealloc(v87);
    swift_task_dealloc(v88);
    swift_task_dealloc(v89);
    swift_task_dealloc(v90);
    swift_task_dealloc(v91);
    swift_task_dealloc(v92);
    swift_task_dealloc(v93);
    swift_task_dealloc(v94);
    swift_task_dealloc(v95);
    swift_task_dealloc(v96);
    swift_task_dealloc(v97);
    swift_task_dealloc(v98);
    swift_task_dealloc(v99);
    swift_task_dealloc(v100);
    swift_task_dealloc(v101);
    swift_task_dealloc(v102);
    swift_task_dealloc(v103);
    swift_task_dealloc(v104);
    swift_task_dealloc(v105);
    swift_task_dealloc(v106);
    swift_task_dealloc(v107);
    swift_task_dealloc(v108);
    swift_task_dealloc(v109);
    swift_task_dealloc(v110);
    swift_task_dealloc(v111);
    swift_task_dealloc(v112);
    swift_task_dealloc(v113);
    swift_task_dealloc(v114);
    swift_task_dealloc(v115);
    swift_task_dealloc(v117);
    swift_task_dealloc(v119);
    swift_task_dealloc(v120);
    swift_task_dealloc(v122);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    *(_BYTE *)(v0 + 2882) = *(_BYTE *)(v0 + 2881);
    v21 = *(_QWORD *)(v0 + 1320);
    v22 = *(_QWORD *)(v0 + 1272);
    *(_QWORD *)(v0 + 2432) = *(_QWORD *)(*(_QWORD *)(v0 + 888) + 288);
    v23 = v21 + *(int *)(v22 + 28);
    v121 = (uint64_t (*)(uint64_t))((char *)&dword_101112238 + dword_101112238);
    v24 = (_QWORD *)swift_task_alloc(unk_10111223C);
    *(_QWORD *)(v0 + 2440) = v24;
    *v24 = v0;
    v24[1] = sub_100B790D8;
    return v121(v23);
  }
}

uint64_t sub_100B76F74()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  _BOOL4 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;

  sub_1000126B0(*(_QWORD *)(v0 + 1320), type metadata accessor for MemberPeerTrust);
  v1 = *(_QWORD *)(v0 + 2360);
  if (qword_1010E9938 != -1)
    swift_once(&qword_1010E9938, sub_1000AFBB0);
  v2 = *(_QWORD *)(v0 + 1472);
  v3 = *(_QWORD *)(v0 + 1432);
  v4 = *(_QWORD *)(v0 + 1424);
  v5 = sub_10001A9E8(v4, (uint64_t)qword_1011B6748);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v5, v4);
  swift_errorRetain(v1);
  v6 = swift_errorRetain(v1);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.error.getter(v7);
  v9 = os_log_type_enabled(v7, v8);
  v10 = *(_QWORD *)(v0 + 1472);
  v11 = *(_QWORD *)(v0 + 1432);
  v12 = *(_QWORD *)(v0 + 1424);
  v13 = *(_QWORD *)(v0 + 1200);
  if (v9)
  {
    v111 = *(_QWORD *)(v0 + 1432);
    v14 = (uint8_t *)swift_slowAlloc(12, -1);
    v109 = v12;
    v15 = swift_slowAlloc(32, -1);
    v115 = v15;
    *(_DWORD *)v14 = 136315138;
    swift_getErrorValue(v1, v0 + 800, v0 + 392);
    v16 = Error.localizedDescription.getter(*(_QWORD *)(v0 + 400), *(_QWORD *)(v0 + 408));
    *(_QWORD *)(v0 + 688) = sub_100016940(v16, v17, &v115);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 688, v0 + 696, v14 + 4, v14 + 12);
    swift_bridgeObjectRelease();
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Failure on handleCircleTrust, preparing initial data: %s", v14, 0xCu);
    swift_arrayDestroy(v15, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v15, -1, -1);
    swift_slowDealloc(v14, -1, -1);

    swift_errorRelease(v1);
    (*(void (**)(uint64_t, uint64_t))(v111 + 8))(v10, v109);
  }
  else
  {

    swift_errorRelease(v1);
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
  }
  sub_100004048(v13, &qword_1010EC868);
  v18 = *(_QWORD *)(v0 + 1344);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1000126B0(v18, type metadata accessor for MemberPeerTrust);
  v19 = *(_QWORD *)(v0 + 1824);
  v20 = *(_QWORD *)(v0 + 1816);
  v21 = *(_QWORD *)(v0 + 1808);
  v22 = *(_QWORD *)(v0 + 1800);
  v23 = *(_QWORD *)(v0 + 1792);
  v24 = *(_QWORD *)(v0 + 1784);
  v25 = *(_QWORD *)(v0 + 1776);
  v26 = *(_QWORD *)(v0 + 1768);
  v29 = *(_QWORD *)(v0 + 1760);
  v30 = *(_QWORD *)(v0 + 1752);
  v31 = *(_QWORD *)(v0 + 1744);
  v32 = *(_QWORD *)(v0 + 1736);
  v33 = *(_QWORD *)(v0 + 1728);
  v34 = *(_QWORD *)(v0 + 1720);
  v27 = *(_QWORD *)(v0 + 1704);
  v35 = *(_QWORD *)(v0 + 1696);
  v36 = *(_QWORD *)(v0 + 1688);
  v37 = *(_QWORD *)(v0 + 1680);
  v38 = *(_QWORD *)(v0 + 1672);
  v39 = *(_QWORD *)(v0 + 1664);
  v40 = *(_QWORD *)(v0 + 1656);
  v41 = *(_QWORD *)(v0 + 1648);
  v42 = *(_QWORD *)(v0 + 1640);
  v43 = *(_QWORD *)(v0 + 1632);
  v44 = *(_QWORD *)(v0 + 1624);
  v45 = *(_QWORD *)(v0 + 1616);
  v46 = *(_QWORD *)(v0 + 1608);
  v47 = *(_QWORD *)(v0 + 1600);
  v48 = *(_QWORD *)(v0 + 1592);
  v49 = *(_QWORD *)(v0 + 1584);
  v50 = *(_QWORD *)(v0 + 1576);
  v51 = *(_QWORD *)(v0 + 1568);
  v52 = *(_QWORD *)(v0 + 1560);
  v53 = *(_QWORD *)(v0 + 1544);
  v54 = *(_QWORD *)(v0 + 1536);
  v55 = *(_QWORD *)(v0 + 1528);
  v56 = *(_QWORD *)(v0 + 1520);
  v57 = *(_QWORD *)(v0 + 1512);
  v58 = *(_QWORD *)(v0 + 1504);
  v59 = *(_QWORD *)(v0 + 1496);
  v60 = *(_QWORD *)(v0 + 1488);
  v61 = *(_QWORD *)(v0 + 1480);
  v62 = *(_QWORD *)(v0 + 1472);
  v63 = *(_QWORD *)(v0 + 1464);
  v64 = *(_QWORD *)(v0 + 1456);
  v65 = *(_QWORD *)(v0 + 1448);
  v66 = *(_QWORD *)(v0 + 1440);
  v67 = *(_QWORD *)(v0 + 1416);
  v68 = *(_QWORD *)(v0 + 1408);
  v69 = *(_QWORD *)(v0 + 1400);
  v70 = *(_QWORD *)(v0 + 1392);
  v71 = *(_QWORD *)(v0 + 1384);
  v72 = *(_QWORD *)(v0 + 1376);
  v73 = *(_QWORD *)(v0 + 1344);
  v74 = *(_QWORD *)(v0 + 1336);
  v75 = *(_QWORD *)(v0 + 1328);
  v76 = *(_QWORD *)(v0 + 1320);
  v77 = *(_QWORD *)(v0 + 1312);
  v78 = *(_QWORD *)(v0 + 1304);
  v79 = *(_QWORD *)(v0 + 1296);
  v80 = *(_QWORD *)(v0 + 1288);
  v81 = *(_QWORD *)(v0 + 1264);
  v82 = *(_QWORD *)(v0 + 1256);
  v83 = *(_QWORD *)(v0 + 1248);
  v84 = *(_QWORD *)(v0 + 1240);
  v85 = *(_QWORD *)(v0 + 1232);
  v86 = *(_QWORD *)(v0 + 1200);
  v87 = *(_QWORD *)(v0 + 1192);
  v88 = *(_QWORD *)(v0 + 1184);
  v89 = *(_QWORD *)(v0 + 1176);
  v90 = *(_QWORD *)(v0 + 1168);
  v91 = *(_QWORD *)(v0 + 1160);
  v92 = *(_QWORD *)(v0 + 1152);
  v93 = *(_QWORD *)(v0 + 1144);
  v94 = *(_QWORD *)(v0 + 1120);
  v95 = *(_QWORD *)(v0 + 1112);
  v96 = *(_QWORD *)(v0 + 1104);
  v97 = *(_QWORD *)(v0 + 1096);
  v98 = *(_QWORD *)(v0 + 1088);
  v99 = *(_QWORD *)(v0 + 1080);
  v100 = *(_QWORD *)(v0 + 1072);
  v101 = *(_QWORD *)(v0 + 1064);
  v102 = *(_QWORD *)(v0 + 1056);
  v103 = *(_QWORD *)(v0 + 1024);
  v104 = *(_QWORD *)(v0 + 1016);
  v105 = *(_QWORD *)(v0 + 1008);
  v106 = *(_QWORD *)(v0 + 1000);
  v107 = *(_QWORD *)(v0 + 976);
  v108 = *(_QWORD *)(v0 + 952);
  v110 = *(_QWORD *)(v0 + 944);
  v112 = *(_QWORD *)(v0 + 928);
  v113 = *(_QWORD *)(v0 + 920);
  v114 = *(_QWORD *)(v0 + 896);
  sub_100004048(v27, &qword_1010EE1E0);
  sub_100004048(v19, &qword_1010EE1E8);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v27);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  swift_task_dealloc(v40);
  swift_task_dealloc(v41);
  swift_task_dealloc(v42);
  swift_task_dealloc(v43);
  swift_task_dealloc(v44);
  swift_task_dealloc(v45);
  swift_task_dealloc(v46);
  swift_task_dealloc(v47);
  swift_task_dealloc(v48);
  swift_task_dealloc(v49);
  swift_task_dealloc(v50);
  swift_task_dealloc(v51);
  swift_task_dealloc(v52);
  swift_task_dealloc(v53);
  swift_task_dealloc(v54);
  swift_task_dealloc(v55);
  swift_task_dealloc(v56);
  swift_task_dealloc(v57);
  swift_task_dealloc(v58);
  swift_task_dealloc(v59);
  swift_task_dealloc(v60);
  swift_task_dealloc(v61);
  swift_task_dealloc(v62);
  swift_task_dealloc(v63);
  swift_task_dealloc(v64);
  swift_task_dealloc(v65);
  swift_task_dealloc(v66);
  swift_task_dealloc(v67);
  swift_task_dealloc(v68);
  swift_task_dealloc(v69);
  swift_task_dealloc(v70);
  swift_task_dealloc(v71);
  swift_task_dealloc(v72);
  swift_task_dealloc(v73);
  swift_task_dealloc(v74);
  swift_task_dealloc(v75);
  swift_task_dealloc(v76);
  swift_task_dealloc(v77);
  swift_task_dealloc(v78);
  swift_task_dealloc(v79);
  swift_task_dealloc(v80);
  swift_task_dealloc(v81);
  swift_task_dealloc(v82);
  swift_task_dealloc(v83);
  swift_task_dealloc(v84);
  swift_task_dealloc(v85);
  swift_task_dealloc(v86);
  swift_task_dealloc(v87);
  swift_task_dealloc(v88);
  swift_task_dealloc(v89);
  swift_task_dealloc(v90);
  swift_task_dealloc(v91);
  swift_task_dealloc(v92);
  swift_task_dealloc(v93);
  swift_task_dealloc(v94);
  swift_task_dealloc(v95);
  swift_task_dealloc(v96);
  swift_task_dealloc(v97);
  swift_task_dealloc(v98);
  swift_task_dealloc(v99);
  swift_task_dealloc(v100);
  swift_task_dealloc(v101);
  swift_task_dealloc(v102);
  swift_task_dealloc(v103);
  swift_task_dealloc(v104);
  swift_task_dealloc(v105);
  swift_task_dealloc(v106);
  swift_task_dealloc(v107);
  swift_task_dealloc(v108);
  swift_task_dealloc(v110);
  swift_task_dealloc(v112);
  swift_task_dealloc(v113);
  swift_task_dealloc(v114);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100B77748()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  _BOOL4 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118[3];

  v1 = *(_QWORD *)(v0 + 1320);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v2 = sub_100986460();
  v3 = swift_allocError(&type metadata for CircleTrustServiceError, v2, 0, 0);
  *v4 = 6;
  swift_willThrow(v3);
  sub_1000126B0(v1, type metadata accessor for MemberPeerTrust);
  if (qword_1010E9938 != -1)
    swift_once(&qword_1010E9938, sub_1000AFBB0);
  v5 = *(_QWORD *)(v0 + 1472);
  v6 = *(_QWORD *)(v0 + 1432);
  v7 = *(_QWORD *)(v0 + 1424);
  v8 = sub_10001A9E8(v7, (uint64_t)qword_1011B6748);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v5, v8, v7);
  swift_errorRetain(v3);
  v9 = swift_errorRetain(v3);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.error.getter(v10);
  v12 = os_log_type_enabled(v10, v11);
  v13 = *(_QWORD *)(v0 + 1472);
  v14 = *(_QWORD *)(v0 + 1432);
  v15 = *(_QWORD *)(v0 + 1424);
  v16 = *(_QWORD *)(v0 + 1200);
  if (v12)
  {
    v114 = *(_QWORD *)(v0 + 1432);
    v17 = (uint8_t *)swift_slowAlloc(12, -1);
    v112 = v15;
    v18 = swift_slowAlloc(32, -1);
    v118[0] = v18;
    *(_DWORD *)v17 = 136315138;
    swift_getErrorValue(v3, v0 + 800, v0 + 392);
    v19 = Error.localizedDescription.getter(*(_QWORD *)(v0 + 400), *(_QWORD *)(v0 + 408));
    *(_QWORD *)(v0 + 688) = sub_100016940(v19, v20, v118);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 688, v0 + 696, v17 + 4, v17 + 12);
    swift_bridgeObjectRelease();
    swift_errorRelease(v3);
    swift_errorRelease(v3);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Failure on handleCircleTrust, preparing initial data: %s", v17, 0xCu);
    swift_arrayDestroy(v18, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v18, -1, -1);
    swift_slowDealloc(v17, -1, -1);

    swift_errorRelease(v3);
    (*(void (**)(uint64_t, uint64_t))(v114 + 8))(v13, v112);
  }
  else
  {

    swift_errorRelease(v3);
    swift_errorRelease(v3);
    swift_errorRelease(v3);
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v13, v15);
  }
  sub_100004048(v16, &qword_1010EC868);
  v21 = *(_QWORD *)(v0 + 1344);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1000126B0(v21, type metadata accessor for MemberPeerTrust);
  v22 = *(_QWORD *)(v0 + 1824);
  v23 = *(_QWORD *)(v0 + 1816);
  v24 = *(_QWORD *)(v0 + 1808);
  v25 = *(_QWORD *)(v0 + 1800);
  v26 = *(_QWORD *)(v0 + 1792);
  v27 = *(_QWORD *)(v0 + 1784);
  v28 = *(_QWORD *)(v0 + 1776);
  v29 = *(_QWORD *)(v0 + 1768);
  v32 = *(_QWORD *)(v0 + 1760);
  v33 = *(_QWORD *)(v0 + 1752);
  v34 = *(_QWORD *)(v0 + 1744);
  v35 = *(_QWORD *)(v0 + 1736);
  v36 = *(_QWORD *)(v0 + 1728);
  v37 = *(_QWORD *)(v0 + 1720);
  v30 = *(_QWORD *)(v0 + 1704);
  v38 = *(_QWORD *)(v0 + 1696);
  v39 = *(_QWORD *)(v0 + 1688);
  v40 = *(_QWORD *)(v0 + 1680);
  v41 = *(_QWORD *)(v0 + 1672);
  v42 = *(_QWORD *)(v0 + 1664);
  v43 = *(_QWORD *)(v0 + 1656);
  v44 = *(_QWORD *)(v0 + 1648);
  v45 = *(_QWORD *)(v0 + 1640);
  v46 = *(_QWORD *)(v0 + 1632);
  v47 = *(_QWORD *)(v0 + 1624);
  v48 = *(_QWORD *)(v0 + 1616);
  v49 = *(_QWORD *)(v0 + 1608);
  v50 = *(_QWORD *)(v0 + 1600);
  v51 = *(_QWORD *)(v0 + 1592);
  v52 = *(_QWORD *)(v0 + 1584);
  v53 = *(_QWORD *)(v0 + 1576);
  v54 = *(_QWORD *)(v0 + 1568);
  v55 = *(_QWORD *)(v0 + 1560);
  v56 = *(_QWORD *)(v0 + 1544);
  v57 = *(_QWORD *)(v0 + 1536);
  v58 = *(_QWORD *)(v0 + 1528);
  v59 = *(_QWORD *)(v0 + 1520);
  v60 = *(_QWORD *)(v0 + 1512);
  v61 = *(_QWORD *)(v0 + 1504);
  v62 = *(_QWORD *)(v0 + 1496);
  v63 = *(_QWORD *)(v0 + 1488);
  v64 = *(_QWORD *)(v0 + 1480);
  v65 = *(_QWORD *)(v0 + 1472);
  v66 = *(_QWORD *)(v0 + 1464);
  v67 = *(_QWORD *)(v0 + 1456);
  v68 = *(_QWORD *)(v0 + 1448);
  v69 = *(_QWORD *)(v0 + 1440);
  v70 = *(_QWORD *)(v0 + 1416);
  v71 = *(_QWORD *)(v0 + 1408);
  v72 = *(_QWORD *)(v0 + 1400);
  v73 = *(_QWORD *)(v0 + 1392);
  v74 = *(_QWORD *)(v0 + 1384);
  v75 = *(_QWORD *)(v0 + 1376);
  v76 = *(_QWORD *)(v0 + 1344);
  v77 = *(_QWORD *)(v0 + 1336);
  v78 = *(_QWORD *)(v0 + 1328);
  v79 = *(_QWORD *)(v0 + 1320);
  v80 = *(_QWORD *)(v0 + 1312);
  v81 = *(_QWORD *)(v0 + 1304);
  v82 = *(_QWORD *)(v0 + 1296);
  v83 = *(_QWORD *)(v0 + 1288);
  v84 = *(_QWORD *)(v0 + 1264);
  v85 = *(_QWORD *)(v0 + 1256);
  v86 = *(_QWORD *)(v0 + 1248);
  v87 = *(_QWORD *)(v0 + 1240);
  v88 = *(_QWORD *)(v0 + 1232);
  v89 = *(_QWORD *)(v0 + 1200);
  v90 = *(_QWORD *)(v0 + 1192);
  v91 = *(_QWORD *)(v0 + 1184);
  v92 = *(_QWORD *)(v0 + 1176);
  v93 = *(_QWORD *)(v0 + 1168);
  v94 = *(_QWORD *)(v0 + 1160);
  v95 = *(_QWORD *)(v0 + 1152);
  v96 = *(_QWORD *)(v0 + 1144);
  v97 = *(_QWORD *)(v0 + 1120);
  v98 = *(_QWORD *)(v0 + 1112);
  v99 = *(_QWORD *)(v0 + 1104);
  v100 = *(_QWORD *)(v0 + 1096);
  v101 = *(_QWORD *)(v0 + 1088);
  v102 = *(_QWORD *)(v0 + 1080);
  v103 = *(_QWORD *)(v0 + 1072);
  v104 = *(_QWORD *)(v0 + 1064);
  v105 = *(_QWORD *)(v0 + 1056);
  v106 = *(_QWORD *)(v0 + 1024);
  v107 = *(_QWORD *)(v0 + 1016);
  v108 = *(_QWORD *)(v0 + 1008);
  v109 = *(_QWORD *)(v0 + 1000);
  v110 = *(_QWORD *)(v0 + 976);
  v111 = *(_QWORD *)(v0 + 952);
  v113 = *(_QWORD *)(v0 + 944);
  v115 = *(_QWORD *)(v0 + 928);
  v116 = *(_QWORD *)(v0 + 920);
  v117 = *(_QWORD *)(v0 + 896);
  sub_100004048(v30, &qword_1010EE1E0);
  sub_100004048(v22, &qword_1010EE1E8);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v30);
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  swift_task_dealloc(v40);
  swift_task_dealloc(v41);
  swift_task_dealloc(v42);
  swift_task_dealloc(v43);
  swift_task_dealloc(v44);
  swift_task_dealloc(v45);
  swift_task_dealloc(v46);
  swift_task_dealloc(v47);
  swift_task_dealloc(v48);
  swift_task_dealloc(v49);
  swift_task_dealloc(v50);
  swift_task_dealloc(v51);
  swift_task_dealloc(v52);
  swift_task_dealloc(v53);
  swift_task_dealloc(v54);
  swift_task_dealloc(v55);
  swift_task_dealloc(v56);
  swift_task_dealloc(v57);
  swift_task_dealloc(v58);
  swift_task_dealloc(v59);
  swift_task_dealloc(v60);
  swift_task_dealloc(v61);
  swift_task_dealloc(v62);
  swift_task_dealloc(v63);
  swift_task_dealloc(v64);
  swift_task_dealloc(v65);
  swift_task_dealloc(v66);
  swift_task_dealloc(v67);
  swift_task_dealloc(v68);
  swift_task_dealloc(v69);
  swift_task_dealloc(v70);
  swift_task_dealloc(v71);
  swift_task_dealloc(v72);
  swift_task_dealloc(v73);
  swift_task_dealloc(v74);
  swift_task_dealloc(v75);
  swift_task_dealloc(v76);
  swift_task_dealloc(v77);
  swift_task_dealloc(v78);
  swift_task_dealloc(v79);
  swift_task_dealloc(v80);
  swift_task_dealloc(v81);
  swift_task_dealloc(v82);
  swift_task_dealloc(v83);
  swift_task_dealloc(v84);
  swift_task_dealloc(v85);
  swift_task_dealloc(v86);
  swift_task_dealloc(v87);
  swift_task_dealloc(v88);
  swift_task_dealloc(v89);
  swift_task_dealloc(v90);
  swift_task_dealloc(v91);
  swift_task_dealloc(v92);
  swift_task_dealloc(v93);
  swift_task_dealloc(v94);
  swift_task_dealloc(v95);
  swift_task_dealloc(v96);
  swift_task_dealloc(v97);
  swift_task_dealloc(v98);
  swift_task_dealloc(v99);
  swift_task_dealloc(v100);
  swift_task_dealloc(v101);
  swift_task_dealloc(v102);
  swift_task_dealloc(v103);
  swift_task_dealloc(v104);
  swift_task_dealloc(v105);
  swift_task_dealloc(v106);
  swift_task_dealloc(v107);
  swift_task_dealloc(v108);
  swift_task_dealloc(v109);
  swift_task_dealloc(v110);
  swift_task_dealloc(v111);
  swift_task_dealloc(v113);
  swift_task_dealloc(v115);
  swift_task_dealloc(v116);
  swift_task_dealloc(v117);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100B77F5C()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v2 = (_QWORD *)swift_task_alloc(v1);
  v0[296] = v2;
  *v2 = v0;
  v2[1] = sub_100B77FCC;
  return unsafeBlocking<A>(_:)(v0 + 76, sub_10001ED30, v0[231], v0[262]);
}

uint64_t sub_100B77FCC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 1848);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 2368));
  swift_release();
  return swift_task_switch(sub_100B7802C, v1, 0);
}

uint64_t sub_100B7802C()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[111];
  v0[297] = v0[76];
  return swift_task_switch(sub_100B78048, v1, 0);
}

uint64_t sub_100B78048()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;

  v0[73] = v0[297];
  v1 = (_QWORD *)swift_task_alloc(async function pointer to Sequence.asyncFilter(_:)[1]);
  v0[298] = v1;
  v2 = sub_1000193A4(&qword_1010EC8B0, &qword_1010EC840, (const char *)&protocol conformance descriptor for [A]);
  *v1 = v0;
  v1[1] = sub_100B780D0;
  return Sequence.asyncFilter(_:)(&unk_1011164E0, v0[111], v0[262], v2);
}

uint64_t sub_100B780D0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 2384);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 888);
  *(_QWORD *)(*(_QWORD *)v1 + 2392) = a1;
  swift_task_dealloc(v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_task_switch(sub_100B78160, v3, 0);
}

uint64_t sub_100B78160()
{
  _QWORD *v0;

  v0[300] = *(_QWORD *)(v0[299] + 16);
  swift_bridgeObjectRelease();
  if (qword_1010E9D08 != -1)
    swift_once(&qword_1010E9D08, sub_10059A6E0);
  v0[301] = qword_1011B71A8;
  return swift_task_switch(sub_100B781D8, 0, 0);
}

uint64_t sub_100B781D8()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v2 = (_QWORD *)swift_task_alloc(v1);
  *(_QWORD *)(v0 + 2416) = v2;
  *v2 = v0;
  v2[1] = sub_100B7824C;
  return unsafeBlocking<A>(_:)(v0 + 576, sub_100033264, *(_QWORD *)(v0 + 2408), &type metadata for Configuration);
}

uint64_t sub_100B7824C()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 2416));
  swift_release();
  return swift_task_switch(sub_100B782AC, 0, 0);
}

uint64_t sub_100B782AC()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[111];
  v0[303] = v0[72];
  return swift_task_switch(sub_100B782C8, v1, 0);
}

uint64_t sub_100B782C8()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  void (*v54)(uint64_t, uint64_t);
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  NSObject *v70;
  os_log_type_t v71;
  _BOOL4 v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint8_t *v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  _QWORD *v153;
  uint64_t v154;
  _QWORD *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  unint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  void (*v167)(uint64_t, uint64_t, uint64_t);
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  void (*v177)(uint64_t, uint64_t, uint64_t);
  uint64_t v178;
  void (*v179)(uint64_t, uint64_t, uint64_t);
  uint64_t v180;
  _QWORD *v181;
  void (*v182)(uint64_t, uint64_t);
  uint64_t v183;
  void (*v184)(uint64_t, uint64_t, uint64_t);
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  _QWORD *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  os_log_type_t v192;
  uint64_t v193;
  uint64_t v194;
  NSObject *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  void (*v205)(uint64_t, uint64_t);
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t (*v211)(uint64_t);
  uint64_t v212;
  uint64_t v213;
  uint64_t v214[3];

  v1 = *(_QWORD *)(v0 + 2400);
  v2 = sub_100C1BA78(*(_QWORD *)(v0 + 2424));
  swift_bridgeObjectRelease();
  if (v1 >= v2)
  {
    v163 = v2;
    v171 = *(_QWORD *)(v0 + 1976);
    v177 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1984);
    v194 = *(int *)(v0 + 2808);
    v187 = *(int *)(v0 + 2816);
    v191 = *(int *)(v0 + 2804);
    v8 = *(int *)(v0 + 2800);
    v9 = *(int *)(v0 + 2796);
    v10 = *(int *)(v0 + 2792);
    v11 = *(int *)(v0 + 2788);
    v184 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1832);
    v12 = *(_QWORD *)(v0 + 1704);
    v13 = *(_QWORD *)(v0 + 1632);
    v197 = *(_QWORD *)(v0 + 1624);
    v200 = *(int *)(v0 + 2812);
    v14 = *(int **)(v0 + 1552);
    v15 = *(_QWORD *)(v0 + 1520);
    v204 = *(_QWORD *)(v0 + 1616);
    v16 = *(_QWORD *)(v0 + 1424);
    v174 = *(_QWORD *)(v0 + 1032);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v188 = (_QWORD *)(v12 + v187);
    v181 = (_QWORD *)(v12 + v8);
    v17 = (_QWORD *)(v12 + v9);
    v18 = (uint64_t *)(v12 + v10);
    v166 = v12 + v11;
    v177(v15, v171, v16);
    v19 = v13 + v14[12];
    v20 = (_QWORD *)(v13 + v14[16]);
    v21 = (_QWORD *)(v13 + v14[20]);
    v22 = (_QWORD *)(v13 + v14[24]);
    v169 = v14[28];
    v172 = v14[32];
    v178 = v14[36];
    v23 = (_QWORD *)(v13 + v14[40]);
    v184(v13, v12, v174);
    sub_10000F9B8(v166, v19, &qword_1010ED860);
    v24 = *v18;
    v25 = v18[1];
    *v20 = v24;
    v20[1] = v25;
    v26 = v17[1];
    *v21 = *v17;
    v21[1] = v26;
    v27 = v181[1];
    *v22 = *v181;
    v22[1] = v27;
    *(_DWORD *)(v13 + v169) = *(_DWORD *)(v12 + v191);
    *(_DWORD *)(v13 + v172) = *(_DWORD *)(v12 + v194);
    *(_QWORD *)(v13 + v178) = *(_QWORD *)(v12 + v200);
    v28 = v188[1];
    *v23 = *v188;
    v23[1] = v28;
    sub_10000F9B8(v13, v197, &qword_1010EE1E0);
    sub_100005CF0(v13, v204, &qword_1010EE1E0);
    swift_bridgeObjectRetain(v28);
    swift_bridgeObjectRetain(v25);
    swift_bridgeObjectRetain(v26);
    swift_bridgeObjectRetain(v27);
    v30 = Logger.logObject.getter(v29);
    v31 = static os_log_type_t.error.getter(v30);
    if (os_log_type_enabled(v30, v31))
    {
      v195 = v30;
      v32 = *(_QWORD *)(v0 + 2400);
      v179 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 2080);
      v182 = *(void (**)(uint64_t, uint64_t))(v0 + 1840);
      v167 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1832);
      v33 = *(_QWORD *)(v0 + 1672);
      v34 = *(_QWORD *)(v0 + 1624);
      v189 = *(_QWORD *)(v0 + 1616);
      v192 = v31;
      v35 = *(int **)(v0 + 1552);
      v201 = *(_QWORD *)(v0 + 1520);
      v205 = *(void (**)(uint64_t, uint64_t))(v0 + 2208);
      v198 = *(_QWORD *)(v0 + 1424);
      v175 = *(_QWORD *)(v0 + 1120);
      v208 = *(_QWORD *)(v0 + 1032);
      v36 = swift_slowAlloc(42, -1);
      v185 = swift_slowAlloc(32, -1);
      v214[0] = v185;
      *(_DWORD *)v36 = 134218755;
      *(_QWORD *)(v0 + 488) = v32;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 488, v0 + 496, v36 + 4, v36 + 12);
      *(_WORD *)(v36 + 12) = 2048;
      *(_QWORD *)(v0 + 496) = v163;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 496, v0 + 504, v36 + 14, v36 + 22);
      *(_WORD *)(v36 + 22) = 2160;
      *(_QWORD *)(v0 + 504) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 504, v0 + 512, v36 + 24, v36 + 32);
      *(_WORD *)(v36 + 32) = 2081;
      v37 = v35[12];
      v38 = v33 + v37;
      v39 = v35[16];
      v40 = (_QWORD *)(v33 + v39);
      v41 = v35[20];
      v153 = (_QWORD *)(v33 + v41);
      v42 = v35[24];
      v155 = (_QWORD *)(v33 + v42);
      v157 = v35[28];
      v159 = v35[32];
      v161 = v35[36];
      v164 = v35[40];
      v43 = v34 + v37;
      v44 = (_QWORD *)(v34 + v39);
      v45 = (_QWORD *)(v34 + v41);
      v46 = (_QWORD *)(v34 + v42);
      v167(v33, v34, v208);
      sub_10000F9B8(v43, v38, &qword_1010ED860);
      v47 = v44[1];
      *v40 = *v44;
      v40[1] = v47;
      v48 = v45[1];
      *v153 = *v45;
      v153[1] = v48;
      v49 = v46[1];
      *v155 = *v46;
      v155[1] = v49;
      *(_DWORD *)(v33 + v157) = *(_DWORD *)(v34 + v157);
      *(_DWORD *)(v33 + v159) = *(_DWORD *)(v34 + v159);
      *(_QWORD *)(v33 + v161) = *(_QWORD *)(v34 + v161);
      *(_OWORD *)(v33 + v164) = *(_OWORD *)(v34 + v164);
      v179(v175, v33, v208);
      sub_100004048(v38, &qword_1010ED860);
      v50 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v51 = dispatch thunk of CustomStringConvertible.description.getter(v208, v50);
      v53 = v52;
      v182(v175, v208);
      *(_QWORD *)(v0 + 512) = sub_100016940(v51, v53, v214);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 512, v0 + 520, v36 + 34, v36 + 42);
      swift_bridgeObjectRelease();
      sub_100004048(v189, &qword_1010EE1E0);
      sub_100004048(v34, &qword_1010EE1E0);
      _os_log_impl((void *)&_mh_execute_header, v195, v192, "Cannot store pending circle offer,\npendingExplicitOffers: %ld >= maxPendingSharedItemOffers: %lu.\nBeaconIdentifier: %{private,mask.hash}s.", (uint8_t *)v36, 0x2Au);
      swift_arrayDestroy(v185, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v185, -1, -1);
      swift_slowDealloc(v36, -1, -1);

      v205(v201, v198);
    }
    else
    {
      v54 = *(void (**)(uint64_t, uint64_t))(v0 + 2208);
      v55 = *(_QWORD *)(v0 + 1624);
      v56 = *(_QWORD *)(v0 + 1520);
      v57 = *(_QWORD *)(v0 + 1424);
      sub_100004048(*(_QWORD *)(v0 + 1616), &qword_1010EE1E0);
      sub_100004048(v55, &qword_1010EE1E0);

      v54(v56, v57);
    }
    v58 = *(_QWORD *)(v0 + 1320);
    type metadata accessor for SPBeaconSharingError(0);
    v60 = v59;
    *(_QWORD *)(v0 + 544) = 11;
    v61 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
    v62 = sub_100006204((unint64_t *)&qword_1010EB490, (uint64_t (*)(uint64_t))type metadata accessor for SPBeaconSharingError, (uint64_t)byte_100E21930);
    v63 = _BridgedStoredNSError.init(_:userInfo:)((_QWORD *)(v0 + 568), v0 + 544, v61, v60, v62);
    v64 = *(_QWORD *)(v0 + 568);
    swift_willThrow(v63);
    sub_1000126B0(v58, type metadata accessor for MemberPeerTrust);
    if (qword_1010E9938 != -1)
      swift_once(&qword_1010E9938, sub_1000AFBB0);
    v65 = *(_QWORD *)(v0 + 1472);
    v66 = *(_QWORD *)(v0 + 1432);
    v67 = *(_QWORD *)(v0 + 1424);
    v68 = sub_10001A9E8(v67, (uint64_t)qword_1011B6748);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v66 + 16))(v65, v68, v67);
    swift_errorRetain(v64);
    v69 = swift_errorRetain(v64);
    v70 = Logger.logObject.getter(v69);
    v71 = static os_log_type_t.error.getter(v70);
    v72 = os_log_type_enabled(v70, v71);
    v73 = *(_QWORD *)(v0 + 1472);
    v212 = *(_QWORD *)(v0 + 1432);
    v74 = *(_QWORD *)(v0 + 1424);
    v75 = *(_QWORD *)(v0 + 1200);
    if (v72)
    {
      v206 = *(_QWORD *)(v0 + 1200);
      v76 = (uint8_t *)swift_slowAlloc(12, -1);
      v202 = v74;
      v77 = swift_slowAlloc(32, -1);
      v214[0] = v77;
      *(_DWORD *)v76 = 136315138;
      swift_getErrorValue(v64, v0 + 800, v0 + 392);
      v78 = Error.localizedDescription.getter(*(_QWORD *)(v0 + 400), *(_QWORD *)(v0 + 408));
      *(_QWORD *)(v0 + 688) = sub_100016940(v78, v79, v214);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 688, v0 + 696, v76 + 4, v76 + 12);
      swift_bridgeObjectRelease();
      swift_errorRelease(v64);
      swift_errorRelease(v64);
      _os_log_impl((void *)&_mh_execute_header, v70, v71, "Failure on handleCircleTrust, preparing initial data: %s", v76, 0xCu);
      swift_arrayDestroy(v77, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v77, -1, -1);
      swift_slowDealloc(v76, -1, -1);

      swift_errorRelease(v64);
      (*(void (**)(uint64_t, uint64_t))(v212 + 8))(v73, v202);
      v80 = v206;
    }
    else
    {

      swift_errorRelease(v64);
      swift_errorRelease(v64);
      swift_errorRelease(v64);
      (*(void (**)(uint64_t, uint64_t))(v212 + 8))(v73, v74);
      v80 = v75;
    }
    sub_100004048(v80, &qword_1010EC868);
    v81 = *(_QWORD *)(v0 + 1344);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1000126B0(v81, type metadata accessor for MemberPeerTrust);
    v82 = *(_QWORD *)(v0 + 1824);
    v83 = *(_QWORD *)(v0 + 1816);
    v84 = *(_QWORD *)(v0 + 1808);
    v85 = *(_QWORD *)(v0 + 1800);
    v86 = *(_QWORD *)(v0 + 1792);
    v87 = *(_QWORD *)(v0 + 1784);
    v88 = *(_QWORD *)(v0 + 1776);
    v89 = *(_QWORD *)(v0 + 1768);
    v91 = *(_QWORD *)(v0 + 1760);
    v92 = *(_QWORD *)(v0 + 1752);
    v93 = *(_QWORD *)(v0 + 1744);
    v94 = *(_QWORD *)(v0 + 1736);
    v95 = *(_QWORD *)(v0 + 1728);
    v96 = *(_QWORD *)(v0 + 1720);
    v90 = *(_QWORD *)(v0 + 1704);
    v97 = *(_QWORD *)(v0 + 1696);
    v98 = *(_QWORD *)(v0 + 1688);
    v99 = *(_QWORD *)(v0 + 1680);
    v100 = *(_QWORD *)(v0 + 1672);
    v101 = *(_QWORD *)(v0 + 1664);
    v102 = *(_QWORD *)(v0 + 1656);
    v103 = *(_QWORD *)(v0 + 1648);
    v104 = *(_QWORD *)(v0 + 1640);
    v105 = *(_QWORD *)(v0 + 1632);
    v106 = *(_QWORD *)(v0 + 1624);
    v107 = *(_QWORD *)(v0 + 1616);
    v108 = *(_QWORD *)(v0 + 1608);
    v109 = *(_QWORD *)(v0 + 1600);
    v110 = *(_QWORD *)(v0 + 1592);
    v111 = *(_QWORD *)(v0 + 1584);
    v112 = *(_QWORD *)(v0 + 1576);
    v113 = *(_QWORD *)(v0 + 1568);
    v114 = *(_QWORD *)(v0 + 1560);
    v115 = *(_QWORD *)(v0 + 1544);
    v116 = *(_QWORD *)(v0 + 1536);
    v117 = *(_QWORD *)(v0 + 1528);
    v118 = *(_QWORD *)(v0 + 1520);
    v119 = *(_QWORD *)(v0 + 1512);
    v120 = *(_QWORD *)(v0 + 1504);
    v121 = *(_QWORD *)(v0 + 1496);
    v122 = *(_QWORD *)(v0 + 1488);
    v123 = *(_QWORD *)(v0 + 1480);
    v124 = *(_QWORD *)(v0 + 1472);
    v125 = *(_QWORD *)(v0 + 1464);
    v126 = *(_QWORD *)(v0 + 1456);
    v127 = *(_QWORD *)(v0 + 1448);
    v128 = *(_QWORD *)(v0 + 1440);
    v129 = *(_QWORD *)(v0 + 1416);
    v130 = *(_QWORD *)(v0 + 1408);
    v131 = *(_QWORD *)(v0 + 1400);
    v132 = *(_QWORD *)(v0 + 1392);
    v133 = *(_QWORD *)(v0 + 1384);
    v134 = *(_QWORD *)(v0 + 1376);
    v135 = *(_QWORD *)(v0 + 1344);
    v136 = *(_QWORD *)(v0 + 1336);
    v137 = *(_QWORD *)(v0 + 1328);
    v138 = *(_QWORD *)(v0 + 1320);
    v139 = *(_QWORD *)(v0 + 1312);
    v140 = *(_QWORD *)(v0 + 1304);
    v141 = *(_QWORD *)(v0 + 1296);
    v142 = *(_QWORD *)(v0 + 1288);
    v143 = *(_QWORD *)(v0 + 1264);
    v144 = *(_QWORD *)(v0 + 1256);
    v145 = *(_QWORD *)(v0 + 1248);
    v146 = *(_QWORD *)(v0 + 1240);
    v147 = *(_QWORD *)(v0 + 1232);
    v148 = *(_QWORD *)(v0 + 1200);
    v149 = *(_QWORD *)(v0 + 1192);
    v150 = *(_QWORD *)(v0 + 1184);
    v151 = *(_QWORD *)(v0 + 1176);
    v152 = *(_QWORD *)(v0 + 1168);
    v154 = *(_QWORD *)(v0 + 1160);
    v156 = *(_QWORD *)(v0 + 1152);
    v158 = *(_QWORD *)(v0 + 1144);
    v160 = *(_QWORD *)(v0 + 1120);
    v162 = *(_QWORD *)(v0 + 1112);
    v165 = *(_QWORD *)(v0 + 1104);
    v168 = *(_QWORD *)(v0 + 1096);
    v170 = *(_QWORD *)(v0 + 1088);
    v173 = *(_QWORD *)(v0 + 1080);
    v176 = *(_QWORD *)(v0 + 1072);
    v180 = *(_QWORD *)(v0 + 1064);
    v183 = *(_QWORD *)(v0 + 1056);
    v186 = *(_QWORD *)(v0 + 1024);
    v190 = *(_QWORD *)(v0 + 1016);
    v193 = *(_QWORD *)(v0 + 1008);
    v196 = *(_QWORD *)(v0 + 1000);
    v199 = *(_QWORD *)(v0 + 976);
    v203 = *(_QWORD *)(v0 + 952);
    v207 = *(_QWORD *)(v0 + 944);
    v209 = *(_QWORD *)(v0 + 928);
    v210 = *(_QWORD *)(v0 + 920);
    v213 = *(_QWORD *)(v0 + 896);
    sub_100004048(v90, &qword_1010EE1E0);
    sub_100004048(v82, &qword_1010EE1E8);
    swift_task_dealloc(v82);
    swift_task_dealloc(v83);
    swift_task_dealloc(v84);
    swift_task_dealloc(v85);
    swift_task_dealloc(v86);
    swift_task_dealloc(v87);
    swift_task_dealloc(v88);
    swift_task_dealloc(v89);
    swift_task_dealloc(v91);
    swift_task_dealloc(v92);
    swift_task_dealloc(v93);
    swift_task_dealloc(v94);
    swift_task_dealloc(v95);
    swift_task_dealloc(v96);
    swift_task_dealloc(v90);
    swift_task_dealloc(v97);
    swift_task_dealloc(v98);
    swift_task_dealloc(v99);
    swift_task_dealloc(v100);
    swift_task_dealloc(v101);
    swift_task_dealloc(v102);
    swift_task_dealloc(v103);
    swift_task_dealloc(v104);
    swift_task_dealloc(v105);
    swift_task_dealloc(v106);
    swift_task_dealloc(v107);
    swift_task_dealloc(v108);
    swift_task_dealloc(v109);
    swift_task_dealloc(v110);
    swift_task_dealloc(v111);
    swift_task_dealloc(v112);
    swift_task_dealloc(v113);
    swift_task_dealloc(v114);
    swift_task_dealloc(v115);
    swift_task_dealloc(v116);
    swift_task_dealloc(v117);
    swift_task_dealloc(v118);
    swift_task_dealloc(v119);
    swift_task_dealloc(v120);
    swift_task_dealloc(v121);
    swift_task_dealloc(v122);
    swift_task_dealloc(v123);
    swift_task_dealloc(v124);
    swift_task_dealloc(v125);
    swift_task_dealloc(v126);
    swift_task_dealloc(v127);
    swift_task_dealloc(v128);
    swift_task_dealloc(v129);
    swift_task_dealloc(v130);
    swift_task_dealloc(v131);
    swift_task_dealloc(v132);
    swift_task_dealloc(v133);
    swift_task_dealloc(v134);
    swift_task_dealloc(v135);
    swift_task_dealloc(v136);
    swift_task_dealloc(v137);
    swift_task_dealloc(v138);
    swift_task_dealloc(v139);
    swift_task_dealloc(v140);
    swift_task_dealloc(v141);
    swift_task_dealloc(v142);
    swift_task_dealloc(v143);
    swift_task_dealloc(v144);
    swift_task_dealloc(v145);
    swift_task_dealloc(v146);
    swift_task_dealloc(v147);
    swift_task_dealloc(v148);
    swift_task_dealloc(v149);
    swift_task_dealloc(v150);
    swift_task_dealloc(v151);
    swift_task_dealloc(v152);
    swift_task_dealloc(v154);
    swift_task_dealloc(v156);
    swift_task_dealloc(v158);
    swift_task_dealloc(v160);
    swift_task_dealloc(v162);
    swift_task_dealloc(v165);
    swift_task_dealloc(v168);
    swift_task_dealloc(v170);
    swift_task_dealloc(v173);
    swift_task_dealloc(v176);
    swift_task_dealloc(v180);
    swift_task_dealloc(v183);
    swift_task_dealloc(v186);
    swift_task_dealloc(v190);
    swift_task_dealloc(v193);
    swift_task_dealloc(v196);
    swift_task_dealloc(v199);
    swift_task_dealloc(v203);
    swift_task_dealloc(v207);
    swift_task_dealloc(v209);
    swift_task_dealloc(v210);
    swift_task_dealloc(v213);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    *(_BYTE *)(v0 + 2882) = 0;
    v3 = *(_QWORD *)(v0 + 1320);
    v4 = *(_QWORD *)(v0 + 1272);
    *(_QWORD *)(v0 + 2432) = *(_QWORD *)(*(_QWORD *)(v0 + 888) + 288);
    v5 = v3 + *(int *)(v4 + 28);
    v211 = (uint64_t (*)(uint64_t))((char *)&dword_101112238 + dword_101112238);
    v6 = (_QWORD *)swift_task_alloc(unk_10111223C);
    *(_QWORD *)(v0 + 2440) = v6;
    *v6 = v0;
    v6[1] = sub_100B790D8;
    return v211(v5);
  }
}

uint64_t sub_100B790D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;

  v5 = *(_QWORD **)v4;
  v6 = *(_QWORD *)(*(_QWORD *)v4 + 2440);
  v5[306] = a1;
  v5[307] = a2;
  v5[308] = a3;
  v5[309] = v3;
  swift_task_dealloc(v6);
  if (v3)
  {
    v7 = v5[111];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v8 = sub_100B7A720;
    v9 = v7;
  }
  else
  {
    v9 = v5[111];
    v8 = sub_100B7916C;
  }
  return swift_task_switch(v8, v9, 0);
}

void sub_100B7916C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  int *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  void *v45;
  void (*v46)(uint64_t, uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  NSObject *v54;
  os_log_type_t v55;
  _BOOL4 v56;
  void (*v57)(uint64_t, uint64_t);
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  int *v67;
  char *v68;
  int *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  _QWORD *v74;
  _QWORD *v75;
  _QWORD *v76;
  char *v77;
  uint64_t v78;
  void (*v79)(char *, uint64_t, uint64_t, uint64_t);
  char *v80;
  char *v81;
  char *v82;
  char *v83;
  uint64_t v84;
  char v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  void (*v148)(uint64_t, uint64_t, uint64_t);
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  void (*v154)(char *, uint64_t, uint64_t);
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  int *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  char v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  _QWORD *v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t *v209;
  uint64_t v210;
  uint64_t v211;
  void (*v212)(uint64_t, uint64_t);
  uint64_t v213;
  uint64_t *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  int *v229;
  int *v230;
  int v231;
  int *v232;
  uint64_t v233;
  int v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  void (*v245)(char *, uint64_t, uint64_t);
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  char v256;
  uint64_t v257;
  uint64_t v258;
  _QWORD *v259;
  uint64_t v260;
  uint64_t v261;
  _QWORD *v262;
  uint64_t v263;
  uint64_t v264;
  _QWORD *v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  void (*v272)(uint64_t, uint64_t, uint64_t);
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283[3];

  if (*(_QWORD *)(v0 + 2464))
  {
    v194 = *(_QWORD *)(v0 + 2472);
    v256 = *(_BYTE *)(v0 + 2882);
    v245 = *(void (**)(char *, uint64_t, uint64_t))(v0 + 2080);
    v249 = *(_QWORD *)(v0 + 1952);
    v239 = *(int *)(v0 + 2808);
    v242 = *(int *)(v0 + 2812);
    v236 = *(int *)(v0 + 2804);
    v220 = *(int *)(v0 + 2780);
    v253 = *(int *)(v0 + 2768);
    v1 = *(_QWORD *)(v0 + 1824);
    v2 = *(_QWORD *)(v0 + 1784);
    v233 = *(_QWORD *)(v0 + 1776);
    v182 = *(_QWORD *)(v0 + 1768);
    v185 = *(_QWORD *)(v0 + 1760);
    v3 = *(_QWORD *)(v0 + 1608);
    v179 = *(_QWORD *)(v0 + 1600);
    v188 = *(_QWORD *)(v0 + 1592);
    v190 = *(_QWORD *)(v0 + 1584);
    v276 = *(_QWORD *)(v0 + 1704);
    v209 = (uint64_t *)(v276 + *(int *)(v0 + 2816));
    v259 = (_QWORD *)(v276 + *(int *)(v0 + 2800));
    v262 = (_QWORD *)(v276 + *(int *)(v0 + 2796));
    v265 = (_QWORD *)(v276 + *(int *)(v0 + 2792));
    v269 = v276 + *(int *)(v0 + 2788);
    v214 = (uint64_t *)(v1 + *(int *)(v0 + 2784));
    v205 = (_QWORD *)(v1 + *(int *)(v0 + 2776));
    v201 = v1 + *(int *)(v0 + 2772);
    v176 = *(int **)(v0 + 1712);
    v4 = v2 + v176[16];
    v5 = (_QWORD *)(v2 + v176[20]);
    v6 = *(int **)(v0 + 1552);
    v7 = *(char **)(v0 + 1392);
    v226 = *(_QWORD *)(v0 + 1416);
    v229 = *(int **)(v0 + 1352);
    v161 = *(_QWORD *)(v0 + 1272);
    v163 = *(_QWORD *)(v0 + 1344);
    v166 = *(_QWORD *)(v0 + 1088);
    v279 = *(_QWORD *)(v0 + 1032);
    v8 = v176[12];
    v156 = v176[24];
    v171 = v176[28];
    v272 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1832);
    v272(v2, v1, v279);
    v198 = v1;
    *(_BYTE *)(v2 + v8) = *(_BYTE *)(v1 + v253);
    v9 = *(_QWORD *)(v201 + 8);
    v10 = *(_QWORD *)(v201 + 16);
    *(_BYTE *)v4 = *(_BYTE *)v201;
    *(_QWORD *)(v4 + 8) = v9;
    *(_QWORD *)(v4 + 16) = v10;
    v11 = v205[1];
    *v5 = *v205;
    v5[1] = v11;
    *(_QWORD *)(v2 + v156) = *(_QWORD *)(v1 + v220);
    *(_OWORD *)(v2 + v171) = *(_OWORD *)v214;
    v12 = v3 + v6[12];
    v13 = (_QWORD *)(v3 + v6[16]);
    v14 = (_QWORD *)(v3 + v6[20]);
    v15 = (_QWORD *)(v3 + v6[24]);
    v147 = v6[28];
    v150 = v6[32];
    v153 = v6[36];
    v157 = v6[40];
    v272(v3, v276, v279);
    sub_10000F9B8(v269, v12, &qword_1010ED860);
    v16 = v265[1];
    *v13 = *v265;
    v13[1] = v16;
    v17 = v262[1];
    *v14 = *v262;
    v14[1] = v17;
    v18 = v259[1];
    *v15 = *v259;
    v15[1] = v18;
    *(_DWORD *)(v3 + v147) = *(_DWORD *)(v276 + v236);
    *(_DWORD *)(v3 + v150) = *(_DWORD *)(v276 + v239);
    *(_QWORD *)(v3 + v153) = *(_QWORD *)(v276 + v242);
    *(_OWORD *)(v3 + v157) = *(_OWORD *)v209;
    v272(v233, v198, v279);
    v272(v166, v163 + *(int *)(v161 + 20), v279);
    *(_OWORD *)v7 = xmmword_100E22FC0;
    v245(&v7[v229[5]], v2, v279);
    v245(&v7[v229[6]], v3, v279);
    v245(&v7[v229[7]], v233, v279);
    v245(&v7[v229[8]], v166, v279);
    *(_QWORD *)&v7[v229[9]] = v249;
    v7[v229[10]] = v256;
    sub_100004048(v12, &qword_1010ED860);
    sub_1000126EC((uint64_t)v7, v226, type metadata accessor for MemberSharingCircle);
    v19 = v179 + v6[12];
    v20 = (_QWORD *)(v179 + v6[16]);
    v21 = (_QWORD *)(v179 + v6[20]);
    v22 = (_QWORD *)(v179 + v6[24]);
    v230 = (int *)v6[28];
    v167 = v6[32];
    v172 = v6[36];
    v23 = (_QWORD *)(v179 + v6[40]);
    v272(v179, v276, v279);
    v164 = v19;
    sub_10000F9B8(v269, v19, &qword_1010ED860);
    v246 = v265[1];
    v250 = *v265;
    *v20 = *v265;
    v20[1] = v246;
    v24 = *v262;
    v263 = v262[1];
    v266 = v24;
    *v21 = v24;
    v21[1] = v263;
    v257 = *v259;
    v260 = v259[1];
    *v22 = v257;
    v22[1] = v260;
    v234 = *(_DWORD *)(v276 + v236);
    *(int *)((char *)v230 + v179) = v234;
    v231 = *(_DWORD *)(v276 + v239);
    *(_DWORD *)(v179 + v167) = v231;
    v243 = *(_QWORD *)(v276 + v242);
    *(_QWORD *)(v179 + v172) = v243;
    v237 = v209[1];
    v240 = *v209;
    *v23 = *v209;
    v23[1] = v237;
    v25 = v176[12];
    v26 = v182 + v176[16];
    v27 = (_QWORD *)(v182 + v176[20]);
    v168 = v176[24];
    v28 = (_QWORD *)(v182 + v176[28]);
    v272(v182, v198, v279);
    LOBYTE(v3) = *(_BYTE *)(v198 + v253);
    *(_BYTE *)(v182 + v25) = v3;
    LOBYTE(v179) = *(_BYTE *)v201;
    v173 = *(_QWORD *)(v201 + 8);
    v210 = *(_QWORD *)(v201 + 16);
    *(_BYTE *)v26 = *(_BYTE *)v201;
    *(_QWORD *)(v26 + 8) = v173;
    *(_QWORD *)(v26 + 16) = v210;
    v29 = *v205;
    v254 = v205[1];
    *v27 = *v205;
    v27[1] = v254;
    v221 = *(_QWORD *)(v198 + v220);
    *(_QWORD *)(v182 + v168) = v221;
    v30 = *v214;
    v215 = v214[1];
    *v28 = v30;
    v28[1] = v215;
    v202 = v176[12];
    v31 = v185 + v176[16];
    v32 = (_QWORD *)(v185 + v176[20]);
    v206 = v176[24];
    v33 = (_QWORD *)(v185 + v176[28]);
    ((void (*)(uint64_t))v272)(v185);
    v199 = v3;
    *(_BYTE *)(v185 + v202) = v3;
    *(_BYTE *)v31 = v179;
    *(_QWORD *)(v31 + 8) = v173;
    *(_QWORD *)(v31 + 16) = v210;
    v203 = v29;
    *v32 = v29;
    v32[1] = v254;
    *(_QWORD *)(v185 + v206) = v221;
    *v33 = v30;
    v33[1] = v215;
    v34 = v188 + v6[12];
    v35 = (_QWORD *)(v188 + v6[16]);
    v36 = (_QWORD *)(v188 + v6[20]);
    v37 = (_QWORD *)(v188 + v6[24]);
    v216 = v6[32];
    v222 = v6[28];
    v38 = (_QWORD *)(v188 + v6[40]);
    v211 = v6[36];
    v272(v188, v276, v279);
    v207 = v34;
    sub_10000F9B8(v269, v34, &qword_1010ED860);
    *v35 = v250;
    v35[1] = v246;
    *v36 = v266;
    v36[1] = v263;
    *v37 = v257;
    v37[1] = v260;
    *(_DWORD *)(v188 + v222) = v234;
    *(_DWORD *)(v188 + v216) = v231;
    *(_QWORD *)(v188 + v211) = v243;
    *v38 = v240;
    v38[1] = v237;
    v39 = v190 + v6[12];
    v40 = (_QWORD *)(v190 + v6[16]);
    v41 = (_QWORD *)(v190 + v6[20]);
    v42 = (_QWORD *)(v190 + v6[24]);
    v217 = v6[32];
    v223 = v6[28];
    v43 = (_QWORD *)(v190 + v6[40]);
    v44 = v6[36];
    ((void (*)(void))v272)();
    v280 = v39;
    sub_10000F9B8(v269, v39, &qword_1010ED860);
    *v40 = v250;
    v40[1] = v246;
    *v41 = v266;
    v41[1] = v263;
    *v42 = v257;
    v42[1] = v260;
    *(_DWORD *)(v190 + v223) = v234;
    *(_DWORD *)(v190 + v217) = v231;
    *(_QWORD *)(v190 + v44) = v243;
    *v43 = v240;
    v43[1] = v237;
    swift_bridgeObjectRetain(v254);
    swift_bridgeObjectRetain(v260);
    swift_bridgeObjectRetain(v263);
    v45 = objc_autoreleasePoolPush();
    sub_10084EE10(v226);
    if (v194)
    {
      objc_autoreleasePoolPop(v45);
    }
    else
    {
      v174 = *(_QWORD *)(v0 + 2456);
      v177 = *(_QWORD *)(v0 + 2464);
      v169 = *(_QWORD *)(v0 + 2448);
      v154 = *(void (**)(char *, uint64_t, uint64_t))(v0 + 2080);
      v212 = *(void (**)(uint64_t, uint64_t))(v0 + 1840);
      v148 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1832);
      v274 = *(_QWORD *)(v0 + 1824);
      v277 = *(int *)(v0 + 2768);
      v159 = *(_QWORD *)(v0 + 1768);
      v224 = *(_QWORD *)(v0 + 1760);
      v143 = *(_QWORD *)(v0 + 1704);
      v66 = *(_QWORD *)(v0 + 1672);
      v151 = *(_QWORD *)(v0 + 1600);
      v218 = *(_QWORD *)(v0 + 1592);
      v67 = *(int **)(v0 + 1552);
      v192 = *(_QWORD *)(v0 + 1320);
      v195 = *(_QWORD *)(v0 + 1584);
      v227 = *(_QWORD *)(v0 + 1264);
      v68 = *(char **)(v0 + 1248);
      v270 = *(_QWORD *)(v0 + 1240);
      v69 = *(int **)(v0 + 1208);
      v70 = *(_QWORD *)(v0 + 1040);
      v71 = *(_QWORD *)(v0 + 1032);
      v180 = *(_QWORD *)(v0 + 968);
      v145 = v143 + *(int *)(v0 + 2788);
      v183 = *(_QWORD *)(v0 + 960);
      v186 = *(_QWORD *)(v0 + 976);
      objc_autoreleasePoolPop(v45);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v70 + 56))(&v68[v69[19]], 1, 1, v71);
      v72 = v66 + v67[12];
      v73 = (_QWORD *)(v66 + v67[16]);
      v74 = (_QWORD *)(v66 + v67[20]);
      v75 = (_QWORD *)(v66 + v67[24]);
      v139 = v67[32];
      v141 = v67[28];
      v137 = v67[36];
      v76 = (_QWORD *)(v66 + v67[40]);
      v148(v66, v143, v71);
      sub_10000F9B8(v145, v72, &qword_1010ED860);
      *v73 = v250;
      v73[1] = v246;
      *v74 = v266;
      v74[1] = v263;
      *v75 = v257;
      v75[1] = v260;
      *(_DWORD *)(v66 + v141) = v234;
      *(_DWORD *)(v66 + v139) = v231;
      *(_QWORD *)(v66 + v137) = v243;
      *v76 = v240;
      v76[1] = v237;
      v77 = &v68[v69[20]];
      v247 = v69[14];
      v251 = v69[15];
      v78 = type metadata accessor for SharedBeaconRecord.PropertyListContent(0);
      v79 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v78 - 8) + 56);
      v79(v77, 1, 1, v78);
      *(_OWORD *)v68 = xmmword_100E22FC0;
      v154(&v68[v69[5]], v151, v71);
      v154(&v68[v69[6]], v159, v71);
      v80 = &v68[v69[7]];
      *v80 = v169;
      *((_QWORD *)v80 + 1) = v174;
      *((_QWORD *)v80 + 2) = v177;
      v81 = &v68[v69[8]];
      *(_QWORD *)v81 = v203;
      *((_QWORD *)v81 + 1) = v254;
      v82 = &v68[v69[9]];
      *(_QWORD *)v82 = v257;
      *((_QWORD *)v82 + 1) = v260;
      v83 = &v68[v69[10]];
      *(_QWORD *)v83 = v266;
      *((_QWORD *)v83 + 1) = v263;
      *(_QWORD *)&v68[v69[11]] = v234;
      *(_QWORD *)&v68[v69[12]] = v231;
      v68[v69[13]] = 1;
      v68[v247] = 3;
      *(_QWORD *)&v68[v251] = -1;
      v68[v69[16]] = v199;
      *(_QWORD *)&v68[v69[17]] = 1;
      (*(void (**)(char *, uint64_t, uint64_t))(v180 + 32))(&v68[v69[18]], v186, v183);
      sub_100004048((uint64_t)v77, (uint64_t *)&unk_1010F47B0);
      *(_DWORD *)v77 = 1;
      sub_100005CF0(v72, (uint64_t)&v77[*(int *)(v78 + 20)], &qword_1010ED860);
      v79(v77, 0, 1, v78);
      sub_1000126B0(v192, type metadata accessor for MemberPeerTrust);
      v212(v66, v71);
      sub_100004048(v280, &qword_1010ED860);
      v212(v195, v71);
      sub_100004048(v207, &qword_1010ED860);
      v212(v218, v71);
      v212(v224, v71);
      sub_100004048(v164, &qword_1010ED860);
      sub_1000126EC((uint64_t)v68, v227, type metadata accessor for SharedBeaconRecord);
      LOBYTE(v78) = *(_BYTE *)(v274 + v277);
      sub_10005972C(v227, v270, type metadata accessor for SharedBeaconRecord);
      sub_1000126B0(*(_QWORD *)(v0 + 1240), type metadata accessor for SharedBeaconRecord);
      sub_1006678DC(v78);
      LOBYTE(v77) = v85;
      v86 = (uint64_t *)(*(_QWORD *)(v0 + 1824) + *(int *)(v0 + 2784));
      sub_10001AA44((_QWORD *)(*(_QWORD *)(v0 + 888) + 248), *(_QWORD *)(*(_QWORD *)(v0 + 888) + 272));
      v87 = *v86;
      v88 = v86[1];
      v89 = (_QWORD *)swift_task_alloc(dword_10110D14C);
      *(_QWORD *)(v0 + 2480) = v89;
      *v89 = v0;
      v89[1] = sub_100B7AEF4;
      sub_100909A9C(v87, v88, *(_QWORD *)(v0 + 1416), *(_QWORD *)(v0 + 1344), (char)v77);
    }
  }
  else
  {
    v46 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1984);
    v47 = *(_QWORD *)(v0 + 1976);
    v48 = *(_QWORD *)(v0 + 1480);
    v49 = *(_QWORD *)(v0 + 1424);
    v50 = *(_QWORD *)(v0 + 1320);
    v51 = *(_QWORD *)(v0 + 1296);
    v52 = *(_QWORD *)(v0 + 1288);
    swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 1960), 2);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v46(v48, v47, v49);
    sub_10005972C(v50, v51, type metadata accessor for MemberPeerTrust);
    sub_10005972C(v51, v52, type metadata accessor for MemberPeerTrust);
    v53 = sub_1000126B0(v51, type metadata accessor for MemberPeerTrust);
    v54 = Logger.logObject.getter(v53);
    v55 = static os_log_type_t.error.getter(v54);
    v56 = os_log_type_enabled(v54, v55);
    v57 = *(void (**)(uint64_t, uint64_t))(v0 + 2208);
    v58 = *(_QWORD *)(v0 + 1480);
    v281 = *(_QWORD *)(v0 + 1424);
    v59 = *(_QWORD *)(v0 + 1344);
    v60 = *(_QWORD *)(v0 + 1320);
    v61 = *(_QWORD *)(v0 + 1288);
    if (v56)
    {
      v273 = *(_QWORD *)(v0 + 1200);
      v267 = *(_QWORD *)(v0 + 1480);
      v62 = swift_slowAlloc(22, -1);
      v63 = swift_slowAlloc(32, -1);
      v283[0] = v63;
      *(_DWORD *)v62 = 141558275;
      *(_QWORD *)(v0 + 520) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 520, v0 + 528, v62 + 4, v62 + 12);
      *(_WORD *)(v62 + 12) = 2081;
      sub_100728868();
      *(_QWORD *)(v0 + 528) = sub_100016940(v64, v65, v283);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 528, v0 + 536, v62 + 14, v62 + 22);
      swift_bridgeObjectRelease();
      sub_1000126B0(v61, type metadata accessor for MemberPeerTrust);
      _os_log_impl((void *)&_mh_execute_header, v54, v55, "Failure on handleCircleTrust, can't get owner handle for : %{private,mask.hash}s", (uint8_t *)v62, 0x16u);
      swift_arrayDestroy(v63, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v63, -1, -1);
      swift_slowDealloc(v62, -1, -1);

      v57(v267, v281);
      sub_1000126B0(v60, type metadata accessor for MemberPeerTrust);
      sub_100004048(v273, &qword_1010EC868);
    }
    else
    {
      v84 = *(_QWORD *)(v0 + 1200);

      sub_1000126B0(v61, type metadata accessor for MemberPeerTrust);
      v57(v58, v281);
      sub_1000126B0(v60, type metadata accessor for MemberPeerTrust);
      sub_100004048(v84, &qword_1010EC868);
    }
    sub_1000126B0(v59, type metadata accessor for MemberPeerTrust);
    v90 = *(_QWORD *)(v0 + 1824);
    v91 = *(_QWORD *)(v0 + 1816);
    v92 = *(_QWORD *)(v0 + 1808);
    v93 = *(_QWORD *)(v0 + 1800);
    v94 = *(_QWORD *)(v0 + 1792);
    v95 = *(_QWORD *)(v0 + 1784);
    v96 = *(_QWORD *)(v0 + 1776);
    v97 = *(_QWORD *)(v0 + 1768);
    v99 = *(_QWORD *)(v0 + 1760);
    v100 = *(_QWORD *)(v0 + 1752);
    v101 = *(_QWORD *)(v0 + 1744);
    v102 = *(_QWORD *)(v0 + 1736);
    v103 = *(_QWORD *)(v0 + 1728);
    v104 = *(_QWORD *)(v0 + 1720);
    v98 = *(_QWORD *)(v0 + 1704);
    v105 = *(_QWORD *)(v0 + 1696);
    v106 = *(_QWORD *)(v0 + 1688);
    v107 = *(_QWORD *)(v0 + 1680);
    v108 = *(_QWORD *)(v0 + 1672);
    v109 = *(_QWORD *)(v0 + 1664);
    v110 = *(_QWORD *)(v0 + 1656);
    v111 = *(_QWORD *)(v0 + 1648);
    v112 = *(_QWORD *)(v0 + 1640);
    v113 = *(_QWORD *)(v0 + 1632);
    v114 = *(_QWORD *)(v0 + 1624);
    v115 = *(_QWORD *)(v0 + 1616);
    v116 = *(_QWORD *)(v0 + 1608);
    v117 = *(_QWORD *)(v0 + 1600);
    v118 = *(_QWORD *)(v0 + 1592);
    v119 = *(_QWORD *)(v0 + 1584);
    v120 = *(_QWORD *)(v0 + 1576);
    v121 = *(_QWORD *)(v0 + 1568);
    v122 = *(_QWORD *)(v0 + 1560);
    v123 = *(_QWORD *)(v0 + 1544);
    v124 = *(_QWORD *)(v0 + 1536);
    v125 = *(_QWORD *)(v0 + 1528);
    v126 = *(_QWORD *)(v0 + 1520);
    v127 = *(_QWORD *)(v0 + 1512);
    v128 = *(_QWORD *)(v0 + 1504);
    v129 = *(_QWORD *)(v0 + 1496);
    v130 = *(_QWORD *)(v0 + 1488);
    v131 = *(_QWORD *)(v0 + 1480);
    v132 = *(_QWORD *)(v0 + 1472);
    v133 = *(_QWORD *)(v0 + 1464);
    v134 = *(_QWORD *)(v0 + 1456);
    v135 = *(_QWORD *)(v0 + 1448);
    v136 = *(_QWORD *)(v0 + 1440);
    v138 = *(_QWORD *)(v0 + 1416);
    v140 = *(_QWORD *)(v0 + 1408);
    v142 = *(_QWORD *)(v0 + 1400);
    v144 = *(_QWORD *)(v0 + 1392);
    v146 = *(_QWORD *)(v0 + 1384);
    v149 = *(_QWORD *)(v0 + 1376);
    v152 = *(_QWORD *)(v0 + 1344);
    v155 = *(_QWORD *)(v0 + 1336);
    v158 = *(_QWORD *)(v0 + 1328);
    v160 = *(_QWORD *)(v0 + 1320);
    v162 = *(_QWORD *)(v0 + 1312);
    v165 = *(_QWORD *)(v0 + 1304);
    v170 = *(_QWORD *)(v0 + 1296);
    v175 = *(_QWORD *)(v0 + 1288);
    v178 = *(_QWORD *)(v0 + 1264);
    v181 = *(_QWORD *)(v0 + 1256);
    v184 = *(_QWORD *)(v0 + 1248);
    v187 = *(_QWORD *)(v0 + 1240);
    v189 = *(_QWORD *)(v0 + 1232);
    v191 = *(_QWORD *)(v0 + 1200);
    v193 = *(_QWORD *)(v0 + 1192);
    v196 = *(_QWORD *)(v0 + 1184);
    v197 = *(_QWORD *)(v0 + 1176);
    v200 = *(_QWORD *)(v0 + 1168);
    v204 = *(_QWORD *)(v0 + 1160);
    v208 = *(_QWORD *)(v0 + 1152);
    v213 = *(_QWORD *)(v0 + 1144);
    v219 = *(_QWORD *)(v0 + 1120);
    v225 = *(_QWORD *)(v0 + 1112);
    v228 = *(_QWORD *)(v0 + 1104);
    v232 = *(int **)(v0 + 1096);
    v235 = *(_QWORD *)(v0 + 1088);
    v238 = *(_QWORD *)(v0 + 1080);
    v241 = *(_QWORD *)(v0 + 1072);
    v244 = *(_QWORD *)(v0 + 1064);
    v248 = *(_QWORD *)(v0 + 1056);
    v252 = *(_QWORD *)(v0 + 1024);
    v255 = *(_QWORD *)(v0 + 1016);
    v258 = *(_QWORD *)(v0 + 1008);
    v261 = *(_QWORD *)(v0 + 1000);
    v264 = *(_QWORD *)(v0 + 976);
    v268 = *(_QWORD *)(v0 + 952);
    v271 = *(_QWORD *)(v0 + 944);
    v275 = *(_QWORD *)(v0 + 928);
    v278 = *(_QWORD *)(v0 + 920);
    v282 = *(_QWORD *)(v0 + 896);
    sub_100004048(v98, &qword_1010EE1E0);
    sub_100004048(v90, &qword_1010EE1E8);
    swift_task_dealloc(v90);
    swift_task_dealloc(v91);
    swift_task_dealloc(v92);
    swift_task_dealloc(v93);
    swift_task_dealloc(v94);
    swift_task_dealloc(v95);
    swift_task_dealloc(v96);
    swift_task_dealloc(v97);
    swift_task_dealloc(v99);
    swift_task_dealloc(v100);
    swift_task_dealloc(v101);
    swift_task_dealloc(v102);
    swift_task_dealloc(v103);
    swift_task_dealloc(v104);
    swift_task_dealloc(v98);
    swift_task_dealloc(v105);
    swift_task_dealloc(v106);
    swift_task_dealloc(v107);
    swift_task_dealloc(v108);
    swift_task_dealloc(v109);
    swift_task_dealloc(v110);
    swift_task_dealloc(v111);
    swift_task_dealloc(v112);
    swift_task_dealloc(v113);
    swift_task_dealloc(v114);
    swift_task_dealloc(v115);
    swift_task_dealloc(v116);
    swift_task_dealloc(v117);
    swift_task_dealloc(v118);
    swift_task_dealloc(v119);
    swift_task_dealloc(v120);
    swift_task_dealloc(v121);
    swift_task_dealloc(v122);
    swift_task_dealloc(v123);
    swift_task_dealloc(v124);
    swift_task_dealloc(v125);
    swift_task_dealloc(v126);
    swift_task_dealloc(v127);
    swift_task_dealloc(v128);
    swift_task_dealloc(v129);
    swift_task_dealloc(v130);
    swift_task_dealloc(v131);
    swift_task_dealloc(v132);
    swift_task_dealloc(v133);
    swift_task_dealloc(v134);
    swift_task_dealloc(v135);
    swift_task_dealloc(v136);
    swift_task_dealloc(v138);
    swift_task_dealloc(v140);
    swift_task_dealloc(v142);
    swift_task_dealloc(v144);
    swift_task_dealloc(v146);
    swift_task_dealloc(v149);
    swift_task_dealloc(v152);
    swift_task_dealloc(v155);
    swift_task_dealloc(v158);
    swift_task_dealloc(v160);
    swift_task_dealloc(v162);
    swift_task_dealloc(v165);
    swift_task_dealloc(v170);
    swift_task_dealloc(v175);
    swift_task_dealloc(v178);
    swift_task_dealloc(v181);
    swift_task_dealloc(v184);
    swift_task_dealloc(v187);
    swift_task_dealloc(v189);
    swift_task_dealloc(v191);
    swift_task_dealloc(v193);
    swift_task_dealloc(v196);
    swift_task_dealloc(v197);
    swift_task_dealloc(v200);
    swift_task_dealloc(v204);
    swift_task_dealloc(v208);
    swift_task_dealloc(v213);
    swift_task_dealloc(v219);
    swift_task_dealloc(v225);
    swift_task_dealloc(v228);
    swift_task_dealloc(v232);
    swift_task_dealloc(v235);
    swift_task_dealloc(v238);
    swift_task_dealloc(v241);
    swift_task_dealloc(v244);
    swift_task_dealloc(v248);
    swift_task_dealloc(v252);
    swift_task_dealloc(v255);
    swift_task_dealloc(v258);
    swift_task_dealloc(v261);
    swift_task_dealloc(v264);
    swift_task_dealloc(v268);
    swift_task_dealloc(v271);
    swift_task_dealloc(v275);
    swift_task_dealloc(v278);
    swift_task_dealloc(v282);
    (*(void (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100B7A720()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  _BOOL4 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;

  sub_1000126B0(*(_QWORD *)(v0 + 1320), type metadata accessor for MemberPeerTrust);
  v1 = *(_QWORD *)(v0 + 2472);
  if (qword_1010E9938 != -1)
    swift_once(&qword_1010E9938, sub_1000AFBB0);
  v2 = *(_QWORD *)(v0 + 1472);
  v3 = *(_QWORD *)(v0 + 1432);
  v4 = *(_QWORD *)(v0 + 1424);
  v5 = sub_10001A9E8(v4, (uint64_t)qword_1011B6748);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v5, v4);
  swift_errorRetain(v1);
  v6 = swift_errorRetain(v1);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.error.getter(v7);
  v9 = os_log_type_enabled(v7, v8);
  v10 = *(_QWORD *)(v0 + 1472);
  v11 = *(_QWORD *)(v0 + 1432);
  v12 = *(_QWORD *)(v0 + 1424);
  v13 = *(_QWORD *)(v0 + 1200);
  if (v9)
  {
    v111 = *(_QWORD *)(v0 + 1432);
    v14 = (uint8_t *)swift_slowAlloc(12, -1);
    v109 = v12;
    v15 = swift_slowAlloc(32, -1);
    v115 = v15;
    *(_DWORD *)v14 = 136315138;
    swift_getErrorValue(v1, v0 + 800, v0 + 392);
    v16 = Error.localizedDescription.getter(*(_QWORD *)(v0 + 400), *(_QWORD *)(v0 + 408));
    *(_QWORD *)(v0 + 688) = sub_100016940(v16, v17, &v115);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 688, v0 + 696, v14 + 4, v14 + 12);
    swift_bridgeObjectRelease();
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Failure on handleCircleTrust, preparing initial data: %s", v14, 0xCu);
    swift_arrayDestroy(v15, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v15, -1, -1);
    swift_slowDealloc(v14, -1, -1);

    swift_errorRelease(v1);
    (*(void (**)(uint64_t, uint64_t))(v111 + 8))(v10, v109);
  }
  else
  {

    swift_errorRelease(v1);
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
  }
  sub_100004048(v13, &qword_1010EC868);
  v18 = *(_QWORD *)(v0 + 1344);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1000126B0(v18, type metadata accessor for MemberPeerTrust);
  v19 = *(_QWORD *)(v0 + 1824);
  v20 = *(_QWORD *)(v0 + 1816);
  v21 = *(_QWORD *)(v0 + 1808);
  v22 = *(_QWORD *)(v0 + 1800);
  v23 = *(_QWORD *)(v0 + 1792);
  v24 = *(_QWORD *)(v0 + 1784);
  v25 = *(_QWORD *)(v0 + 1776);
  v26 = *(_QWORD *)(v0 + 1768);
  v29 = *(_QWORD *)(v0 + 1760);
  v30 = *(_QWORD *)(v0 + 1752);
  v31 = *(_QWORD *)(v0 + 1744);
  v32 = *(_QWORD *)(v0 + 1736);
  v33 = *(_QWORD *)(v0 + 1728);
  v34 = *(_QWORD *)(v0 + 1720);
  v27 = *(_QWORD *)(v0 + 1704);
  v35 = *(_QWORD *)(v0 + 1696);
  v36 = *(_QWORD *)(v0 + 1688);
  v37 = *(_QWORD *)(v0 + 1680);
  v38 = *(_QWORD *)(v0 + 1672);
  v39 = *(_QWORD *)(v0 + 1664);
  v40 = *(_QWORD *)(v0 + 1656);
  v41 = *(_QWORD *)(v0 + 1648);
  v42 = *(_QWORD *)(v0 + 1640);
  v43 = *(_QWORD *)(v0 + 1632);
  v44 = *(_QWORD *)(v0 + 1624);
  v45 = *(_QWORD *)(v0 + 1616);
  v46 = *(_QWORD *)(v0 + 1608);
  v47 = *(_QWORD *)(v0 + 1600);
  v48 = *(_QWORD *)(v0 + 1592);
  v49 = *(_QWORD *)(v0 + 1584);
  v50 = *(_QWORD *)(v0 + 1576);
  v51 = *(_QWORD *)(v0 + 1568);
  v52 = *(_QWORD *)(v0 + 1560);
  v53 = *(_QWORD *)(v0 + 1544);
  v54 = *(_QWORD *)(v0 + 1536);
  v55 = *(_QWORD *)(v0 + 1528);
  v56 = *(_QWORD *)(v0 + 1520);
  v57 = *(_QWORD *)(v0 + 1512);
  v58 = *(_QWORD *)(v0 + 1504);
  v59 = *(_QWORD *)(v0 + 1496);
  v60 = *(_QWORD *)(v0 + 1488);
  v61 = *(_QWORD *)(v0 + 1480);
  v62 = *(_QWORD *)(v0 + 1472);
  v63 = *(_QWORD *)(v0 + 1464);
  v64 = *(_QWORD *)(v0 + 1456);
  v65 = *(_QWORD *)(v0 + 1448);
  v66 = *(_QWORD *)(v0 + 1440);
  v67 = *(_QWORD *)(v0 + 1416);
  v68 = *(_QWORD *)(v0 + 1408);
  v69 = *(_QWORD *)(v0 + 1400);
  v70 = *(_QWORD *)(v0 + 1392);
  v71 = *(_QWORD *)(v0 + 1384);
  v72 = *(_QWORD *)(v0 + 1376);
  v73 = *(_QWORD *)(v0 + 1344);
  v74 = *(_QWORD *)(v0 + 1336);
  v75 = *(_QWORD *)(v0 + 1328);
  v76 = *(_QWORD *)(v0 + 1320);
  v77 = *(_QWORD *)(v0 + 1312);
  v78 = *(_QWORD *)(v0 + 1304);
  v79 = *(_QWORD *)(v0 + 1296);
  v80 = *(_QWORD *)(v0 + 1288);
  v81 = *(_QWORD *)(v0 + 1264);
  v82 = *(_QWORD *)(v0 + 1256);
  v83 = *(_QWORD *)(v0 + 1248);
  v84 = *(_QWORD *)(v0 + 1240);
  v85 = *(_QWORD *)(v0 + 1232);
  v86 = *(_QWORD *)(v0 + 1200);
  v87 = *(_QWORD *)(v0 + 1192);
  v88 = *(_QWORD *)(v0 + 1184);
  v89 = *(_QWORD *)(v0 + 1176);
  v90 = *(_QWORD *)(v0 + 1168);
  v91 = *(_QWORD *)(v0 + 1160);
  v92 = *(_QWORD *)(v0 + 1152);
  v93 = *(_QWORD *)(v0 + 1144);
  v94 = *(_QWORD *)(v0 + 1120);
  v95 = *(_QWORD *)(v0 + 1112);
  v96 = *(_QWORD *)(v0 + 1104);
  v97 = *(_QWORD *)(v0 + 1096);
  v98 = *(_QWORD *)(v0 + 1088);
  v99 = *(_QWORD *)(v0 + 1080);
  v100 = *(_QWORD *)(v0 + 1072);
  v101 = *(_QWORD *)(v0 + 1064);
  v102 = *(_QWORD *)(v0 + 1056);
  v103 = *(_QWORD *)(v0 + 1024);
  v104 = *(_QWORD *)(v0 + 1016);
  v105 = *(_QWORD *)(v0 + 1008);
  v106 = *(_QWORD *)(v0 + 1000);
  v107 = *(_QWORD *)(v0 + 976);
  v108 = *(_QWORD *)(v0 + 952);
  v110 = *(_QWORD *)(v0 + 944);
  v112 = *(_QWORD *)(v0 + 928);
  v113 = *(_QWORD *)(v0 + 920);
  v114 = *(_QWORD *)(v0 + 896);
  sub_100004048(v27, &qword_1010EE1E0);
  sub_100004048(v19, &qword_1010EE1E8);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v27);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  swift_task_dealloc(v40);
  swift_task_dealloc(v41);
  swift_task_dealloc(v42);
  swift_task_dealloc(v43);
  swift_task_dealloc(v44);
  swift_task_dealloc(v45);
  swift_task_dealloc(v46);
  swift_task_dealloc(v47);
  swift_task_dealloc(v48);
  swift_task_dealloc(v49);
  swift_task_dealloc(v50);
  swift_task_dealloc(v51);
  swift_task_dealloc(v52);
  swift_task_dealloc(v53);
  swift_task_dealloc(v54);
  swift_task_dealloc(v55);
  swift_task_dealloc(v56);
  swift_task_dealloc(v57);
  swift_task_dealloc(v58);
  swift_task_dealloc(v59);
  swift_task_dealloc(v60);
  swift_task_dealloc(v61);
  swift_task_dealloc(v62);
  swift_task_dealloc(v63);
  swift_task_dealloc(v64);
  swift_task_dealloc(v65);
  swift_task_dealloc(v66);
  swift_task_dealloc(v67);
  swift_task_dealloc(v68);
  swift_task_dealloc(v69);
  swift_task_dealloc(v70);
  swift_task_dealloc(v71);
  swift_task_dealloc(v72);
  swift_task_dealloc(v73);
  swift_task_dealloc(v74);
  swift_task_dealloc(v75);
  swift_task_dealloc(v76);
  swift_task_dealloc(v77);
  swift_task_dealloc(v78);
  swift_task_dealloc(v79);
  swift_task_dealloc(v80);
  swift_task_dealloc(v81);
  swift_task_dealloc(v82);
  swift_task_dealloc(v83);
  swift_task_dealloc(v84);
  swift_task_dealloc(v85);
  swift_task_dealloc(v86);
  swift_task_dealloc(v87);
  swift_task_dealloc(v88);
  swift_task_dealloc(v89);
  swift_task_dealloc(v90);
  swift_task_dealloc(v91);
  swift_task_dealloc(v92);
  swift_task_dealloc(v93);
  swift_task_dealloc(v94);
  swift_task_dealloc(v95);
  swift_task_dealloc(v96);
  swift_task_dealloc(v97);
  swift_task_dealloc(v98);
  swift_task_dealloc(v99);
  swift_task_dealloc(v100);
  swift_task_dealloc(v101);
  swift_task_dealloc(v102);
  swift_task_dealloc(v103);
  swift_task_dealloc(v104);
  swift_task_dealloc(v105);
  swift_task_dealloc(v106);
  swift_task_dealloc(v107);
  swift_task_dealloc(v108);
  swift_task_dealloc(v110);
  swift_task_dealloc(v112);
  swift_task_dealloc(v113);
  swift_task_dealloc(v114);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100B7AEF4()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t v7;

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 2480);
  *(_QWORD *)(*(_QWORD *)v1 + 2488) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = v2[245];
    v5 = v2[111];
    swift_bridgeObjectRelease_n(v4, 2);
    swift_bridgeObjectRelease();
    v6 = sub_100B7BB14;
    v7 = v5;
  }
  else
  {
    v7 = v2[231];
    v6 = sub_100B7AF78;
  }
  return swift_task_switch(v6, v7, 0);
}

uint64_t sub_100B7AF78()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 2080);
  v2 = *(unsigned __int8 *)(v0 + 2840);
  v3 = *(_QWORD *)(v0 + 1848);
  v4 = *(_QWORD *)(v0 + 1120);
  v5 = *(_QWORD *)(v0 + 1032);
  v6 = (v2 + 24) & ~v2;
  v7 = *(_QWORD *)(v0 + 1048) + v6;
  v8 = v2 | 7;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v0 + 1832))(v4, *(_QWORD *)(v0 + 1704), v5);
  v9 = swift_allocObject(&unk_1010AF9D0, v7, v8);
  *(_QWORD *)(v0 + 2496) = v9;
  *(_QWORD *)(v9 + 16) = v3;
  v1(v9 + v6, v4, v5);
  v10 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v11 = (_QWORD *)swift_task_alloc(v10);
  *(_QWORD *)(v0 + 2504) = v11;
  *v11 = v0;
  v11[1] = sub_100B7B068;
  return unsafeBlocking<A>(_:)(*(_QWORD *)(v0 + 952), sub_100142964, v9, *(_QWORD *)(v0 + 936));
}

uint64_t sub_100B7B068()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 888);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 2504));
  swift_release();
  return swift_task_switch(sub_100B7B0CC, v1, 0);
}

uint64_t sub_100B7B0CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  _QWORD *v12;
  char *v13;
  uint64_t v14;
  _QWORD *v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint8_t *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  void (*v42)(uint64_t, uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  void (*v137)(uint64_t, uint64_t);
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  void (*v154)(uint64_t, uint64_t);
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;

  v1 = *(_QWORD *)(v0 + 1216);
  v2 = *(_QWORD *)(v0 + 1208);
  v3 = *(_QWORD *)(v0 + 944);
  sub_10000F9B8(*(_QWORD *)(v0 + 952), v3, (uint64_t *)&unk_1010EE180);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1 + 48))(v3, 1, v2) == 1)
  {
    sub_100004048(*(_QWORD *)(v0 + 944), (uint64_t *)&unk_1010EE180);
    v4 = 5;
  }
  else
  {
    v5 = *(_QWORD *)(v0 + 944);
    v4 = *(_BYTE *)(v5 + *(int *)(*(_QWORD *)(v0 + 1208) + 64));
    sub_1000126B0(v5, type metadata accessor for SharedBeaconRecord);
  }
  v146 = *(_QWORD *)(v0 + 2288);
  v148 = *(_QWORD *)(v0 + 1960);
  v152 = *(_QWORD *)(v0 + 2488);
  v154 = *(void (**)(uint64_t, uint64_t))(v0 + 1832);
  v158 = *(int *)(v0 + 2780);
  v6 = *(int *)(v0 + 2768);
  v137 = *(void (**)(uint64_t, uint64_t))(v0 + 1840);
  v7 = *(_QWORD *)(v0 + 1824);
  v8 = *(_QWORD *)(v0 + 1752);
  v9 = *(_QWORD *)(v0 + 1744);
  v10 = *(int **)(v0 + 1712);
  v142 = *(_QWORD *)(v0 + 1416);
  v144 = *(_QWORD *)(v0 + 1264);
  v11 = *(_QWORD *)(v0 + 1032);
  v140 = *(_QWORD *)(v0 + 952);
  v150 = *(_QWORD *)(v0 + 928);
  v156 = v7 + *(int *)(v0 + 2784);
  v12 = (_QWORD *)(v7 + *(int *)(v0 + 2776));
  v13 = (char *)(v7 + *(int *)(v0 + 2772));
  *(_BYTE *)(v0 + 2883) = v4;
  v127 = v10[12];
  v129 = v11;
  v14 = v8 + v10[16];
  v15 = (_QWORD *)(v8 + v10[20]);
  v131 = v10[24];
  v133 = v10[28];
  v154(v8, v7);
  v16 = *(_BYTE *)(v7 + v6);
  *(_BYTE *)(v0 + 2884) = v16;
  *(_BYTE *)(v8 + v127) = v16;
  v17 = *((_QWORD *)v13 + 1);
  v18 = *((_QWORD *)v13 + 2);
  *(_BYTE *)v14 = *v13;
  *(_QWORD *)(v14 + 8) = v17;
  *(_QWORD *)(v14 + 16) = v18;
  v19 = v12[1];
  *v15 = *v12;
  v15[1] = v19;
  *(_QWORD *)(v8 + v131) = *(_QWORD *)(v7 + v158);
  *(_OWORD *)(v8 + v133) = *(_OWORD *)v156;
  v137(v8, v129);
  v134 = v10[12];
  v20 = v9 + v10[16];
  v21 = (_QWORD *)(v9 + v10[20]);
  v138 = v10[24];
  v22 = (_QWORD *)(v9 + v10[28]);
  ((void (*)(uint64_t, uint64_t, uint64_t))v154)(v9, v7, v129);
  *(_BYTE *)(v9 + v134) = *(_BYTE *)(v7 + v6);
  v23 = *v13;
  v24 = *((_QWORD *)v13 + 1);
  v25 = *((_QWORD *)v13 + 2);
  *(_BYTE *)v20 = v23;
  *(_QWORD *)(v20 + 8) = v24;
  *(_QWORD *)(v20 + 16) = v25;
  v26 = *v12;
  v27 = v12[1];
  *v21 = v26;
  v21[1] = v27;
  v28 = *(_QWORD *)(v7 + v158);
  *(_QWORD *)(v9 + v138) = v28;
  v29 = *(_QWORD *)v156;
  v30 = *(_QWORD *)(v156 + 8);
  *v22 = *(_QWORD *)v156;
  v22[1] = v30;
  v31 = (_QWORD *)swift_task_alloc(64);
  v31[2] = v142;
  v31[3] = v146;
  v31[4] = v140;
  v31[5] = v144;
  v31[6] = v9;
  v31[7] = v148;
  swift_bridgeObjectRetain(v25);
  swift_bridgeObjectRetain(v27);
  swift_bridgeObjectRetain(v28);
  sub_10001BBBC(v29, v30);
  sub_100ADB304((void (*)(uint64_t, _UNKNOWN **))sub_100B85F04, v150);
  v32 = *(_QWORD *)(v0 + 1744);
  swift_bridgeObjectRelease();
  if (v152)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_task_dealloc(v31);
    sub_100004048(v32, &qword_1010EE1E8);
    (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 1984))(*(_QWORD *)(v0 + 1448), *(_QWORD *)(v0 + 1976), *(_QWORD *)(v0 + 1424));
    swift_errorRetain(v152);
    v33 = swift_errorRetain(v152);
    v34 = Logger.logObject.getter(v33);
    v35 = static os_log_type_t.error.getter(v34);
    if (os_log_type_enabled(v34, v35))
    {
      v36 = (uint8_t *)swift_slowAlloc(12, -1);
      v37 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v36 = 138412290;
      swift_errorRetain(v152);
      v38 = _swift_stdlib_bridgeErrorToNSError(v152);
      *(_QWORD *)(v0 + 560) = v38;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 560, v0 + 568, v36 + 4, v36 + 12);
      *v37 = v38;
      swift_errorRelease(v152);
      swift_errorRelease(v152);
      _os_log_impl((void *)&_mh_execute_header, v34, v35, "Failure on handleCircleTrust, updating iCloud: %@", v36, 0xCu);
      v39 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
      swift_arrayDestroy(v37, 1, v39);
      swift_slowDealloc(v37, -1, -1);
      swift_slowDealloc(v36, -1, -1);

    }
    else
    {

      swift_errorRelease(v152);
      swift_errorRelease(v152);
    }
    v42 = *(void (**)(uint64_t, uint64_t))(v0 + 2208);
    v43 = *(_QWORD *)(v0 + 1448);
    v44 = *(_QWORD *)(v0 + 1424);
    v45 = *(_QWORD *)(v0 + 1416);
    v46 = *(_QWORD *)(v0 + 1344);
    v47 = *(_QWORD *)(v0 + 1264);
    v48 = *(_QWORD *)(v0 + 1200);
    v49 = *(_QWORD *)(v0 + 952);
    swift_errorRelease(v152);
    v42(v43, v44);
    sub_100004048(v48, &qword_1010EC868);
    sub_1000126B0(v46, type metadata accessor for MemberPeerTrust);
    sub_100004048(v49, (uint64_t *)&unk_1010EE180);
    sub_1000126B0(v47, type metadata accessor for SharedBeaconRecord);
    sub_1000126B0(v45, type metadata accessor for MemberSharingCircle);
    v50 = *(_QWORD *)(v0 + 1824);
    v51 = *(_QWORD *)(v0 + 1816);
    v52 = *(_QWORD *)(v0 + 1808);
    v53 = *(_QWORD *)(v0 + 1800);
    v54 = *(_QWORD *)(v0 + 1792);
    v55 = *(_QWORD *)(v0 + 1784);
    v56 = *(_QWORD *)(v0 + 1776);
    v57 = *(_QWORD *)(v0 + 1768);
    v59 = *(_QWORD *)(v0 + 1760);
    v60 = *(_QWORD *)(v0 + 1752);
    v61 = *(_QWORD *)(v0 + 1744);
    v62 = *(_QWORD *)(v0 + 1736);
    v63 = *(_QWORD *)(v0 + 1728);
    v64 = *(_QWORD *)(v0 + 1720);
    v58 = *(_QWORD *)(v0 + 1704);
    v65 = *(_QWORD *)(v0 + 1696);
    v66 = *(_QWORD *)(v0 + 1688);
    v67 = *(_QWORD *)(v0 + 1680);
    v68 = *(_QWORD *)(v0 + 1672);
    v69 = *(_QWORD *)(v0 + 1664);
    v70 = *(_QWORD *)(v0 + 1656);
    v71 = *(_QWORD *)(v0 + 1648);
    v72 = *(_QWORD *)(v0 + 1640);
    v73 = *(_QWORD *)(v0 + 1632);
    v74 = *(_QWORD *)(v0 + 1624);
    v75 = *(_QWORD *)(v0 + 1616);
    v76 = *(_QWORD *)(v0 + 1608);
    v77 = *(_QWORD *)(v0 + 1600);
    v78 = *(_QWORD *)(v0 + 1592);
    v79 = *(_QWORD *)(v0 + 1584);
    v80 = *(_QWORD *)(v0 + 1576);
    v81 = *(_QWORD *)(v0 + 1568);
    v82 = *(_QWORD *)(v0 + 1560);
    v83 = *(_QWORD *)(v0 + 1544);
    v84 = *(_QWORD *)(v0 + 1536);
    v85 = *(_QWORD *)(v0 + 1528);
    v86 = *(_QWORD *)(v0 + 1520);
    v87 = *(_QWORD *)(v0 + 1512);
    v88 = *(_QWORD *)(v0 + 1504);
    v89 = *(_QWORD *)(v0 + 1496);
    v90 = *(_QWORD *)(v0 + 1488);
    v91 = *(_QWORD *)(v0 + 1480);
    v92 = *(_QWORD *)(v0 + 1472);
    v93 = *(_QWORD *)(v0 + 1464);
    v94 = *(_QWORD *)(v0 + 1456);
    v95 = *(_QWORD *)(v0 + 1448);
    v96 = *(_QWORD *)(v0 + 1440);
    v97 = *(_QWORD *)(v0 + 1416);
    v98 = *(_QWORD *)(v0 + 1408);
    v99 = *(_QWORD *)(v0 + 1400);
    v100 = *(_QWORD *)(v0 + 1392);
    v101 = *(_QWORD *)(v0 + 1384);
    v102 = *(_QWORD *)(v0 + 1376);
    v103 = *(_QWORD *)(v0 + 1344);
    v104 = *(_QWORD *)(v0 + 1336);
    v105 = *(_QWORD *)(v0 + 1328);
    v106 = *(_QWORD *)(v0 + 1320);
    v107 = *(_QWORD *)(v0 + 1312);
    v108 = *(_QWORD *)(v0 + 1304);
    v109 = *(_QWORD *)(v0 + 1296);
    v110 = *(_QWORD *)(v0 + 1288);
    v111 = *(_QWORD *)(v0 + 1264);
    v112 = *(_QWORD *)(v0 + 1256);
    v113 = *(_QWORD *)(v0 + 1248);
    v114 = *(_QWORD *)(v0 + 1240);
    v115 = *(_QWORD *)(v0 + 1232);
    v116 = *(_QWORD *)(v0 + 1200);
    v117 = *(_QWORD *)(v0 + 1192);
    v118 = *(_QWORD *)(v0 + 1184);
    v119 = *(_QWORD *)(v0 + 1176);
    v120 = *(_QWORD *)(v0 + 1168);
    v121 = *(_QWORD *)(v0 + 1160);
    v122 = *(_QWORD *)(v0 + 1152);
    v123 = *(_QWORD *)(v0 + 1144);
    v124 = *(_QWORD *)(v0 + 1120);
    v125 = *(_QWORD *)(v0 + 1112);
    v126 = *(_QWORD *)(v0 + 1104);
    v128 = *(_QWORD *)(v0 + 1096);
    v130 = *(_QWORD *)(v0 + 1088);
    v132 = *(_QWORD *)(v0 + 1080);
    v135 = *(_QWORD *)(v0 + 1072);
    v136 = *(_QWORD *)(v0 + 1064);
    v139 = *(_QWORD *)(v0 + 1056);
    v141 = *(_QWORD *)(v0 + 1024);
    v143 = *(_QWORD *)(v0 + 1016);
    v145 = *(_QWORD *)(v0 + 1008);
    v147 = *(_QWORD *)(v0 + 1000);
    v149 = *(_QWORD *)(v0 + 976);
    v151 = *(_QWORD *)(v0 + 952);
    v153 = *(_QWORD *)(v0 + 944);
    v155 = *(_QWORD *)(v0 + 928);
    v157 = *(_QWORD *)(v0 + 920);
    v159 = *(_QWORD *)(v0 + 896);
    sub_100004048(v58, &qword_1010EE1E0);
    sub_100004048(v50, &qword_1010EE1E8);
    swift_task_dealloc(v50);
    swift_task_dealloc(v51);
    swift_task_dealloc(v52);
    swift_task_dealloc(v53);
    swift_task_dealloc(v54);
    swift_task_dealloc(v55);
    swift_task_dealloc(v56);
    swift_task_dealloc(v57);
    swift_task_dealloc(v59);
    swift_task_dealloc(v60);
    swift_task_dealloc(v61);
    swift_task_dealloc(v62);
    swift_task_dealloc(v63);
    swift_task_dealloc(v64);
    swift_task_dealloc(v58);
    swift_task_dealloc(v65);
    swift_task_dealloc(v66);
    swift_task_dealloc(v67);
    swift_task_dealloc(v68);
    swift_task_dealloc(v69);
    swift_task_dealloc(v70);
    swift_task_dealloc(v71);
    swift_task_dealloc(v72);
    swift_task_dealloc(v73);
    swift_task_dealloc(v74);
    swift_task_dealloc(v75);
    swift_task_dealloc(v76);
    swift_task_dealloc(v77);
    swift_task_dealloc(v78);
    swift_task_dealloc(v79);
    swift_task_dealloc(v80);
    swift_task_dealloc(v81);
    swift_task_dealloc(v82);
    swift_task_dealloc(v83);
    swift_task_dealloc(v84);
    swift_task_dealloc(v85);
    swift_task_dealloc(v86);
    swift_task_dealloc(v87);
    swift_task_dealloc(v88);
    swift_task_dealloc(v89);
    swift_task_dealloc(v90);
    swift_task_dealloc(v91);
    swift_task_dealloc(v92);
    swift_task_dealloc(v93);
    swift_task_dealloc(v94);
    swift_task_dealloc(v95);
    swift_task_dealloc(v96);
    swift_task_dealloc(v97);
    swift_task_dealloc(v98);
    swift_task_dealloc(v99);
    swift_task_dealloc(v100);
    swift_task_dealloc(v101);
    swift_task_dealloc(v102);
    swift_task_dealloc(v103);
    swift_task_dealloc(v104);
    swift_task_dealloc(v105);
    swift_task_dealloc(v106);
    swift_task_dealloc(v107);
    swift_task_dealloc(v108);
    swift_task_dealloc(v109);
    swift_task_dealloc(v110);
    swift_task_dealloc(v111);
    swift_task_dealloc(v112);
    swift_task_dealloc(v113);
    swift_task_dealloc(v114);
    swift_task_dealloc(v115);
    swift_task_dealloc(v116);
    swift_task_dealloc(v117);
    swift_task_dealloc(v118);
    swift_task_dealloc(v119);
    swift_task_dealloc(v120);
    swift_task_dealloc(v121);
    swift_task_dealloc(v122);
    swift_task_dealloc(v123);
    swift_task_dealloc(v124);
    swift_task_dealloc(v125);
    swift_task_dealloc(v126);
    swift_task_dealloc(v128);
    swift_task_dealloc(v130);
    swift_task_dealloc(v132);
    swift_task_dealloc(v135);
    swift_task_dealloc(v136);
    swift_task_dealloc(v139);
    swift_task_dealloc(v141);
    swift_task_dealloc(v143);
    swift_task_dealloc(v145);
    swift_task_dealloc(v147);
    swift_task_dealloc(v149);
    swift_task_dealloc(v151);
    swift_task_dealloc(v153);
    swift_task_dealloc(v155);
    swift_task_dealloc(v157);
    swift_task_dealloc(v159);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc(v31);
    sub_100004048(v32, &qword_1010EE1E8);
    v40 = (_QWORD *)swift_task_alloc(dword_1011110F4);
    *(_QWORD *)(v0 + 2512) = v40;
    *v40 = v0;
    v40[1] = sub_100B7C2AC;
    return sub_100A80454(*(_QWORD *)(v0 + 928));
  }
}

uint64_t sub_100B7BB14()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  void (*v111)(uint64_t, uint64_t);
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;

  v1 = *(_QWORD *)(v0 + 2488);
  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 1984))(*(_QWORD *)(v0 + 1456), *(_QWORD *)(v0 + 1976), *(_QWORD *)(v0 + 1424));
  swift_errorRetain(v1);
  v2 = swift_errorRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v105 = *(_QWORD *)(v0 + 1424);
    v111 = *(void (**)(uint64_t, uint64_t))(v0 + 2208);
    v113 = *(_QWORD *)(v0 + 1344);
    v107 = *(_QWORD *)(v0 + 1456);
    v109 = *(_QWORD *)(v0 + 1200);
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = swift_slowAlloc(32, -1);
    v115 = v6;
    *(_DWORD *)v5 = 136315138;
    swift_getErrorValue(v1, v0 + 536, v0 + 464);
    v7 = Error.localizedDescription.getter(*(_QWORD *)(v0 + 472), *(_QWORD *)(v0 + 480));
    *(_QWORD *)(v0 + 552) = sub_100016940(v7, v8, &v115);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 552, v0 + 560, v5 + 4, v5 + 12);
    swift_bridgeObjectRelease();
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Failure on handleCircleTrust, saving initial key packages: %s", v5, 0xCu);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);

    swift_errorRelease(v1);
    v111(v107, v105);
    sub_100004048(v109, &qword_1010EC868);
    v9 = v113;
  }
  else
  {
    v10 = *(void (**)(uint64_t, uint64_t))(v0 + 2208);
    v11 = *(_QWORD *)(v0 + 1456);
    v12 = *(_QWORD *)(v0 + 1424);
    v13 = *(_QWORD *)(v0 + 1344);
    v14 = *(_QWORD *)(v0 + 1200);

    swift_errorRelease(v1);
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    v10(v11, v12);
    sub_100004048(v14, &qword_1010EC868);
    v9 = v13;
  }
  sub_1000126B0(v9, type metadata accessor for MemberPeerTrust);
  v15 = *(_QWORD *)(v0 + 1416);
  sub_1000126B0(*(_QWORD *)(v0 + 1264), type metadata accessor for SharedBeaconRecord);
  sub_1000126B0(v15, type metadata accessor for MemberSharingCircle);
  v16 = *(_QWORD *)(v0 + 1824);
  v17 = *(_QWORD *)(v0 + 1816);
  v18 = *(_QWORD *)(v0 + 1808);
  v19 = *(_QWORD *)(v0 + 1800);
  v20 = *(_QWORD *)(v0 + 1792);
  v21 = *(_QWORD *)(v0 + 1784);
  v22 = *(_QWORD *)(v0 + 1776);
  v23 = *(_QWORD *)(v0 + 1768);
  v26 = *(_QWORD *)(v0 + 1760);
  v27 = *(_QWORD *)(v0 + 1752);
  v28 = *(_QWORD *)(v0 + 1744);
  v29 = *(_QWORD *)(v0 + 1736);
  v30 = *(_QWORD *)(v0 + 1728);
  v31 = *(_QWORD *)(v0 + 1720);
  v24 = *(_QWORD *)(v0 + 1704);
  v32 = *(_QWORD *)(v0 + 1696);
  v33 = *(_QWORD *)(v0 + 1688);
  v34 = *(_QWORD *)(v0 + 1680);
  v35 = *(_QWORD *)(v0 + 1672);
  v36 = *(_QWORD *)(v0 + 1664);
  v37 = *(_QWORD *)(v0 + 1656);
  v38 = *(_QWORD *)(v0 + 1648);
  v39 = *(_QWORD *)(v0 + 1640);
  v40 = *(_QWORD *)(v0 + 1632);
  v41 = *(_QWORD *)(v0 + 1624);
  v42 = *(_QWORD *)(v0 + 1616);
  v43 = *(_QWORD *)(v0 + 1608);
  v44 = *(_QWORD *)(v0 + 1600);
  v45 = *(_QWORD *)(v0 + 1592);
  v46 = *(_QWORD *)(v0 + 1584);
  v47 = *(_QWORD *)(v0 + 1576);
  v48 = *(_QWORD *)(v0 + 1568);
  v49 = *(_QWORD *)(v0 + 1560);
  v50 = *(_QWORD *)(v0 + 1544);
  v51 = *(_QWORD *)(v0 + 1536);
  v52 = *(_QWORD *)(v0 + 1528);
  v53 = *(_QWORD *)(v0 + 1520);
  v54 = *(_QWORD *)(v0 + 1512);
  v55 = *(_QWORD *)(v0 + 1504);
  v56 = *(_QWORD *)(v0 + 1496);
  v57 = *(_QWORD *)(v0 + 1488);
  v58 = *(_QWORD *)(v0 + 1480);
  v59 = *(_QWORD *)(v0 + 1472);
  v60 = *(_QWORD *)(v0 + 1464);
  v61 = *(_QWORD *)(v0 + 1456);
  v62 = *(_QWORD *)(v0 + 1448);
  v63 = *(_QWORD *)(v0 + 1440);
  v64 = *(_QWORD *)(v0 + 1416);
  v65 = *(_QWORD *)(v0 + 1408);
  v66 = *(_QWORD *)(v0 + 1400);
  v67 = *(_QWORD *)(v0 + 1392);
  v68 = *(_QWORD *)(v0 + 1384);
  v69 = *(_QWORD *)(v0 + 1376);
  v70 = *(_QWORD *)(v0 + 1344);
  v71 = *(_QWORD *)(v0 + 1336);
  v72 = *(_QWORD *)(v0 + 1328);
  v73 = *(_QWORD *)(v0 + 1320);
  v74 = *(_QWORD *)(v0 + 1312);
  v75 = *(_QWORD *)(v0 + 1304);
  v76 = *(_QWORD *)(v0 + 1296);
  v77 = *(_QWORD *)(v0 + 1288);
  v78 = *(_QWORD *)(v0 + 1264);
  v79 = *(_QWORD *)(v0 + 1256);
  v80 = *(_QWORD *)(v0 + 1248);
  v81 = *(_QWORD *)(v0 + 1240);
  v82 = *(_QWORD *)(v0 + 1232);
  v83 = *(_QWORD *)(v0 + 1200);
  v84 = *(_QWORD *)(v0 + 1192);
  v85 = *(_QWORD *)(v0 + 1184);
  v86 = *(_QWORD *)(v0 + 1176);
  v87 = *(_QWORD *)(v0 + 1168);
  v88 = *(_QWORD *)(v0 + 1160);
  v89 = *(_QWORD *)(v0 + 1152);
  v90 = *(_QWORD *)(v0 + 1144);
  v91 = *(_QWORD *)(v0 + 1120);
  v92 = *(_QWORD *)(v0 + 1112);
  v93 = *(_QWORD *)(v0 + 1104);
  v94 = *(_QWORD *)(v0 + 1096);
  v95 = *(_QWORD *)(v0 + 1088);
  v96 = *(_QWORD *)(v0 + 1080);
  v97 = *(_QWORD *)(v0 + 1072);
  v98 = *(_QWORD *)(v0 + 1064);
  v99 = *(_QWORD *)(v0 + 1056);
  v100 = *(_QWORD *)(v0 + 1024);
  v101 = *(_QWORD *)(v0 + 1016);
  v102 = *(_QWORD *)(v0 + 1008);
  v103 = *(_QWORD *)(v0 + 1000);
  v104 = *(_QWORD *)(v0 + 976);
  v106 = *(_QWORD *)(v0 + 952);
  v108 = *(_QWORD *)(v0 + 944);
  v110 = *(_QWORD *)(v0 + 928);
  v112 = *(_QWORD *)(v0 + 920);
  v114 = *(_QWORD *)(v0 + 896);
  sub_100004048(v24, &qword_1010EE1E0);
  sub_100004048(v16, &qword_1010EE1E8);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v24);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  swift_task_dealloc(v40);
  swift_task_dealloc(v41);
  swift_task_dealloc(v42);
  swift_task_dealloc(v43);
  swift_task_dealloc(v44);
  swift_task_dealloc(v45);
  swift_task_dealloc(v46);
  swift_task_dealloc(v47);
  swift_task_dealloc(v48);
  swift_task_dealloc(v49);
  swift_task_dealloc(v50);
  swift_task_dealloc(v51);
  swift_task_dealloc(v52);
  swift_task_dealloc(v53);
  swift_task_dealloc(v54);
  swift_task_dealloc(v55);
  swift_task_dealloc(v56);
  swift_task_dealloc(v57);
  swift_task_dealloc(v58);
  swift_task_dealloc(v59);
  swift_task_dealloc(v60);
  swift_task_dealloc(v61);
  swift_task_dealloc(v62);
  swift_task_dealloc(v63);
  swift_task_dealloc(v64);
  swift_task_dealloc(v65);
  swift_task_dealloc(v66);
  swift_task_dealloc(v67);
  swift_task_dealloc(v68);
  swift_task_dealloc(v69);
  swift_task_dealloc(v70);
  swift_task_dealloc(v71);
  swift_task_dealloc(v72);
  swift_task_dealloc(v73);
  swift_task_dealloc(v74);
  swift_task_dealloc(v75);
  swift_task_dealloc(v76);
  swift_task_dealloc(v77);
  swift_task_dealloc(v78);
  swift_task_dealloc(v79);
  swift_task_dealloc(v80);
  swift_task_dealloc(v81);
  swift_task_dealloc(v82);
  swift_task_dealloc(v83);
  swift_task_dealloc(v84);
  swift_task_dealloc(v85);
  swift_task_dealloc(v86);
  swift_task_dealloc(v87);
  swift_task_dealloc(v88);
  swift_task_dealloc(v89);
  swift_task_dealloc(v90);
  swift_task_dealloc(v91);
  swift_task_dealloc(v92);
  swift_task_dealloc(v93);
  swift_task_dealloc(v94);
  swift_task_dealloc(v95);
  swift_task_dealloc(v96);
  swift_task_dealloc(v97);
  swift_task_dealloc(v98);
  swift_task_dealloc(v99);
  swift_task_dealloc(v100);
  swift_task_dealloc(v101);
  swift_task_dealloc(v102);
  swift_task_dealloc(v103);
  swift_task_dealloc(v104);
  swift_task_dealloc(v106);
  swift_task_dealloc(v108);
  swift_task_dealloc(v110);
  swift_task_dealloc(v112);
  swift_task_dealloc(v114);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

