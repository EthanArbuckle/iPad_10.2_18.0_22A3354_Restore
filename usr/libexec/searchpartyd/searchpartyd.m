uint64_t sub_100003D88@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  return sub_100003DB4(v1, a1);
}

uint64_t sub_100003DA0@<X0>(_QWORD *a1@<X8>)
{
  return sub_10001E000(a1);
}

uint64_t sub_100003DB4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *(_QWORD *)(a1 + 56);
  return swift_bridgeObjectRetain();
}

uint64_t sub_100003DD0(uint64_t *a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  _BOOL8 v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;

  v4 = (_QWORD **)v3;
  v7 = *a1;
  v8 = a1[2];
  v30 = a1[1];
  v31 = v8;
  v32 = a1[3];
  v33 = *((unsigned __int8 *)a1 + 32);
  v34 = a1[5];
  v9 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = (_QWORD *)*v3;
  v15 = sub_100003FB0(a2);
  v16 = v13[2];
  v17 = (v14 & 1) == 0;
  v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
    goto LABEL_14;
  }
  v19 = v14;
  v20 = v13[3];
  if (v20 >= v18 && (a3 & 1) != 0)
  {
LABEL_7:
    v21 = *v4;
    if ((v19 & 1) != 0)
    {
LABEL_8:
      v22 = v21[7] + 48 * v15;
      v23 = *(_QWORD *)v22;
      swift_bridgeObjectRelease();
      swift_release(v23);
      result = swift_bridgeObjectRelease();
      v25 = v30;
      *(_QWORD *)v22 = v7;
      *(_QWORD *)(v22 + 8) = v25;
      v26 = v32;
      *(_QWORD *)(v22 + 16) = v31;
      *(_QWORD *)(v22 + 24) = v26;
      *(_BYTE *)(v22 + 32) = v33;
      *(_QWORD *)(v22 + 40) = v34;
      return result;
    }
    goto LABEL_11;
  }
  if (v20 >= v18 && (a3 & 1) == 0)
  {
    sub_100A9FB7C();
    goto LABEL_7;
  }
  sub_100A91300(v18, a3 & 1);
  v27 = sub_100003FB0(a2);
  if ((v19 & 1) != (v28 & 1))
  {
LABEL_14:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v9);
    __break(1u);
    return result;
  }
  v15 = v27;
  v21 = *v4;
  if ((v19 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a2, v9);
  *(_QWORD *)&v35 = v7;
  *((_QWORD *)&v35 + 1) = v30;
  v36 = v31;
  v37 = v32;
  v38 = v33;
  v39 = v34;
  return sub_10001CDD0(v15, (uint64_t)v12, &v35, v21);
}

unint64_t sub_100003FB0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = v1;
  v4 = *(_QWORD *)(v2 + 40);
  v5 = type metadata accessor for UUID(0);
  v6 = sub_100006204(&qword_1010F98B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v7 = dispatch thunk of Hashable._rawHashValue(seed:)(v4, v5, v6);
  return sub_10001CCA0(a1, v7, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, &qword_1010EE520, (uint64_t)&protocol conformance descriptor for UUID);
}

uint64_t sub_100004048(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = sub_10001A9A8(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_100004084(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_10001A9A8(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

uint64_t sub_1000040C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 336);
  v2 = v1 + 32;
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 344));
  swift_setDeallocating(v1);
  v3 = *(_QWORD *)(v1 + 16);
  v4 = sub_10001A9A8((uint64_t *)&unk_101105830);
  swift_arrayDestroy(v2, v3, v4);
  return swift_task_switch(sub_100005B48, 0, 0);
}

uint64_t sub_100004148()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  v1 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v0 + 56) = v1;
  v2 = sub_10001A9A8(&qword_1010F76F0);
  *v1 = v0;
  v1[1] = sub_10001C878;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 16, 0, 0, 0x6976726553746567, 0xEC00000029286563, sub_100030C10, *(_QWORD *)(v0 + 24), v2);
}

uint64_t sub_1000041DC()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 48));
  return swift_task_switch(sub_1005AEE64, 0, 0);
}

uint64_t sub_100004230()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v1 = (_QWORD *)(v0 + 64);
  if (*(_QWORD *)(v0 + 560))
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    v2 = async function pointer to unsafeBlocking<A>(_:)[1];
    swift_retain();
    v3 = (_QWORD *)swift_task_alloc(v2);
    *(_QWORD *)(v0 + 568) = v3;
    v4 = sub_10001A9A8((uint64_t *)&unk_1010F7730);
    *v3 = v0;
    v3[1] = sub_100005A90;
    return unsafeBlocking<A>(_:)(v0 + 192, sub_10001EE80, *(_QWORD *)(v0 + 240), v4);
  }
  else
  {
    v6 = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    v7 = Logger.logObject.getter(v6);
    v8 = static os_log_type_t.error.getter(v7);
    if (os_log_type_enabled(v7, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "readLatestBeaconStatusObservations could not get the ObservationStoreService.", v9, 2u);
      swift_slowDealloc(v9, -1, -1);
    }

    v10 = *(_QWORD *)(v0 + 520);
    v11 = *(_QWORD *)(v0 + 504);
    v12 = *(_QWORD *)(v0 + 512);
    v14 = *(_QWORD *)(v0 + 480);
    v13 = *(_QWORD *)(v0 + 488);
    v16 = *(_QWORD *)(v0 + 464);
    v15 = *(_QWORD *)(v0 + 472);
    v18 = *(_QWORD *)(v0 + 448);
    v17 = *(_QWORD *)(v0 + 456);
    v19 = *(_QWORD *)(v0 + 440);
    v20 = *(_QWORD *)(v0 + 408);
    v21 = *(_QWORD *)(v0 + 392);
    v22 = *(_QWORD *)(v0 + 368);
    v23 = *(_QWORD *)(v0 + 360);
    v24 = *(_QWORD *)(v0 + 336);
    v25 = *(_QWORD *)(v0 + 328);
    v26 = *(_QWORD *)(v0 + 312);
    v27 = *(_QWORD *)(v0 + 288);
    v28 = *(_QWORD *)(v0 + 264);
    swift_task_dealloc(*(_QWORD *)(v0 + 528));
    swift_task_dealloc(v10);
    swift_task_dealloc(v12);
    swift_task_dealloc(v11);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100004468()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v2 = (_QWORD *)swift_task_alloc(v1);
  v0[95] = v2;
  v3 = sub_10001A9A8(&qword_1010EC840);
  v0[96] = v3;
  *v2 = v0;
  v2[1] = sub_100005C68;
  return unsafeBlocking<A>(_:)(v0 + 15, sub_10001ED30, v0[94], v3);
}

uint64_t sub_1000044E8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 752);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 992));
  swift_release();
  return swift_task_switch(sub_10001E818, v1, 0);
}

uint64_t sub_100004548()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[67];
  swift_bridgeObjectRelease();
  v0[101] = v0[61];
  return swift_task_switch(sub_100013C58, v1, 0);
}

uint64_t sub_100004590()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = swift_task_alloc(32);
  *(_QWORD *)(v0 + 40) = v1;
  *(_OWORD *)(v1 + 16) = *(_OWORD *)(v0 + 24);
  v2 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v0 + 48) = v2;
  *v2 = v0;
  v2[1] = sub_10001EC78;
  return withCheckedContinuation<A>(isolation:function:_:)(v2, 0, 0, 0x4970757472617473, 0xEF2928656E6F4473, sub_100033730, v1, (char *)&type metadata for () + 8);
}

uint64_t sub_100004630()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t ObjectType;

  v0 = sub_100008644();
  v2 = v1;
  ObjectType = swift_getObjectType(v0);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(ObjectType, v2);
  return swift_unknownObjectRelease(v0);
}

uint64_t sub_10000466C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;

  *(_QWORD *)(v6 + 56) = v5;
  v12 = type metadata accessor for ContinuousClock.Instant(0);
  *(_QWORD *)(v6 + 64) = v12;
  v13 = *(_QWORD *)(v12 - 8);
  *(_QWORD *)(v6 + 72) = v13;
  v14 = (*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v6 + 80) = swift_task_alloc(v14);
  *(_QWORD *)(v6 + 88) = swift_task_alloc(v14);
  *(_QWORD *)(v6 + 40) = a1;
  *(_QWORD *)(v6 + 48) = a2;
  *(_QWORD *)(v6 + 16) = a3;
  *(_QWORD *)(v6 + 24) = a4;
  *(_BYTE *)(v6 + 32) = a5 & 1;
  return swift_task_switch(sub_100006B44, 0, 0);
}

uint64_t sub_100004710()
{
  uint64_t v0;
  uint64_t v1;
  __int128 *v2;
  uint64_t v4;
  uint64_t inited;
  __int128 v6;
  __int128 v7;
  _QWORD *v8;
  uint64_t v9;

  v2 = *(__int128 **)(v0 + 280);
  v1 = *(_QWORD *)(v0 + 288);
  if ((*((_BYTE *)v2 + 24) & 1) != 0)
  {
    v4 = sub_10001A9A8((uint64_t *)&unk_101105820);
    inited = swift_initStackObject(v4, v0 + 16);
    *(_QWORD *)(v0 + 336) = inited;
    *(_OWORD *)(inited + 16) = xmmword_100E22B00;
    *(_QWORD *)(inited + 32) = v1;
    sub_100005CF0((uint64_t)v2 + 8, v0 + 200, &qword_1010F6350);
    *(_QWORD *)(v0 + 240) = *((_QWORD *)v2 + 4);
    v7 = *v2;
    v6 = v2[1];
    *(_QWORD *)(inited + 72) = *((_QWORD *)v2 + 4);
    *(_OWORD *)(inited + 40) = v7;
    *(_OWORD *)(inited + 56) = v6;
    swift_retain();
    sub_100004A78(v0 + 200);
    sub_100004F74((_QWORD *)(v0 + 240));
    v8 = (_QWORD *)swift_task_alloc(dword_1011055E4);
    *(_QWORD *)(v0 + 344) = v8;
    *v8 = v0;
    v8[1] = sub_1000040C8;
    v9 = *(_QWORD *)(v0 + 264);
    v8[18] = inited;
    v8[19] = v9;
    return swift_task_switch(sub_10000F8A4, v9, 0);
  }
  else
  {
    swift_release(*(_QWORD *)(v0 + 288));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100004830()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0[3] + 128);
  v2 = swift_task_alloc(32);
  v0[6] = v2;
  *(_QWORD *)(v2 + 16) = v1;
  *(_QWORD *)(v2 + 24) = 32;
  v3 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  v0[7] = v3;
  v4 = sub_10001A9A8(&qword_1011058D0);
  *v3 = v0;
  v3[1] = sub_10001DAD8;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 2, 0, 0, 0xD00000000000001BLL, 0x8000000100EE2520, sub_100728860, v2, v4);
}

uint64_t sub_1000048E8(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;

  v2[2] = a1;
  v2[3] = a2;
  v3 = type metadata accessor for UUID(0);
  v2[4] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10000B368, 0, 0);
}

uint64_t sub_100004940()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = swift_task_alloc(32);
  *(_QWORD *)(v0 + 40) = v1;
  *(_OWORD *)(v1 + 16) = *(_OWORD *)(v0 + 24);
  v2 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v0 + 48) = v2;
  *v2 = v0;
  v2[1] = sub_10001ECD4;
  return withCheckedContinuation<A>(isolation:function:_:)(v2, 0, 0, 0x4970757472617473, 0xEF2928656E6F4473, sub_100033730, v1, (char *)&type metadata for () + 8);
}

uint64_t sub_1000049E0()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  v1 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v0 + 360) = v1;
  type metadata accessor for SPSimpleBeaconProperty(0);
  *v1 = v0;
  v1[1] = sub_10001DE2C;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 312, 0, 0, 0x65706F72506C6C61, 0xEF29287365697472, sub_100728284, *(_QWORD *)(v0 + 352), v2);
}

uint64_t sub_100004A78(uint64_t a1)
{
  swift_bridgeObjectRetain(*(_QWORD *)(a1 + 8));
  return a1;
}

uint64_t sub_100004AA0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = *(_QWORD *)(type metadata accessor for Date(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = (*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = v1 + v5;
  v8 = *(_QWORD *)(v1 + v6);
  v9 = v1 + ((v6 + 15) & 0xFFFFFFFFFFFFFFF8);
  v10 = (_QWORD *)swift_task_alloc(dword_1011004E4);
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = sub_100004C28;
  return sub_100007100(a1, v7, v8, v9);
}

uint64_t sub_100004B3C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v3 = *(_QWORD *)(*sub_10001AA44((_QWORD *)(a1 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation), *(_QWORD *)(a1 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24))+ 216);
  if (v3)
  {
    swift_retain();
    CurrentValueSubject.value.getter(&v6);
    swift_release(v3);
    v4 = qword_100E4F020[(char)v6];
  }
  else
  {
    v4 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a2, v4);
}

uint64_t sub_100004BCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  uint64_t result;

  result = a9;
  if (a9)
  {
    swift_bridgeObjectRetain(a9);
    swift_bridgeObjectRetain(a22);
    swift_bridgeObjectRetain(a24);
    return swift_bridgeObjectRetain(a26);
  }
  return result;
}

uint64_t sub_100004C28()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v4 = *v0;
  v1 = *(_QWORD *)(v4 + 16);
  v2 = *v0;
  v4 = v2;
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_100004C70()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v2 = (_QWORD *)swift_task_alloc(v1);
  *(_QWORD *)(v0 + 992) = v2;
  v3 = sub_10001A9A8(&qword_1010EE190);
  *v2 = v0;
  v2[1] = sub_1000044E8;
  return unsafeBlocking<A>(_:)(v0 + 112, sub_10001ED38, *(_QWORD *)(v0 + 752), v3);
}

uint64_t sub_100004CEC(uint64_t (*a1)(char *), unint64_t *a2, uint64_t a3, uint64_t (*a4)(_QWORD), void (*a5)(BOOL, unint64_t, uint64_t))
{
  uint64_t v5;
  uint64_t (*v6)(_QWORD);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  char *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  char v19;
  unint64_t v20;
  unint64_t v21;
  void (*v22)(BOOL, unint64_t, uint64_t);
  uint64_t (*v23)(_QWORD);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(char *);
  unint64_t *v29;
  unint64_t *v30;

  v22 = a5;
  v6 = a4;
  v28 = a1;
  v29 = a2;
  v8 = a4(0);
  v27 = *(_QWORD *)(v8 - 8);
  v9 = __chkstk_darwin(v8);
  v26 = (uint64_t)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = __chkstk_darwin(v9);
  v13 = (char *)&v22 - v12;
  v14 = (unint64_t *)&_swiftEmptyArrayStorage;
  v30 = (unint64_t *)&_swiftEmptyArrayStorage;
  v25 = *(_QWORD *)(a3 + 16);
  if (v25)
  {
    v15 = 0;
    v16 = (unint64_t *)&_swiftEmptyArrayStorage;
    v23 = v6;
    v24 = a3;
    while (v15 < *(_QWORD *)(a3 + 16))
    {
      v17 = (*(unsigned __int8 *)(v27 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80);
      v18 = *(_QWORD *)(v27 + 72);
      sub_10005972C(a3 + v17 + v18 * v15, (uint64_t)v13, v6);
      v14 = v29;
      v19 = v28(v13);
      if (v5)
      {
        sub_1000126B0((uint64_t)v13, v6);
        swift_release(v16);
        swift_bridgeObjectRelease(a3);
        return (uint64_t)v14;
      }
      if ((v19 & 1) != 0)
      {
        sub_1000126EC((uint64_t)v13, v26, v6);
        if ((swift_isUniquelyReferenced_nonNull_native(v16) & 1) == 0)
          v22(0, v16[2] + 1, 1);
        v16 = v30;
        v21 = v30[2];
        v20 = v30[3];
        if (v21 >= v20 >> 1)
        {
          v22(v20 > 1, v21 + 1, 1);
          v16 = v30;
        }
        v16[2] = v21 + 1;
        v6 = v23;
        result = sub_1000126EC(v26, (uint64_t)v16 + v17 + v21 * v18, v23);
        a3 = v24;
      }
      else
      {
        result = sub_1000126B0((uint64_t)v13, v6);
      }
      if (v25 == ++v15)
      {
        v14 = v30;
        goto LABEL_15;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_15:
    swift_bridgeObjectRelease(a3);
    return (uint64_t)v14;
  }
  return result;
}

uint64_t sub_100004EFC(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 1008);
  v5 = *(_QWORD *)(*v2 + 184);
  *(_QWORD *)(v3 + 1016) = a1;
  *(_QWORD *)(v3 + 1024) = v1;
  swift_task_dealloc(v4);
  swift_bridgeObjectRelease();
  return swift_task_switch(sub_100012730, v5, 0);
}

_QWORD *sub_100004F74(_QWORD *a1)
{
  swift_bridgeObjectRetain(*a1);
  return a1;
}

uint64_t sub_100004F9C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  unint64_t *v20;
  uint64_t v21;

  v2 = v1;
  v4 = *(_QWORD *)(v1 + 240);
  if (*(_QWORD *)(v4 + 16) <= *(_QWORD *)(a1 + 16) >> 3)
  {
    v20 = (unint64_t *)a1;
    swift_bridgeObjectRetain(a1);
    swift_bridgeObjectRetain(v4);
    sub_10001D428(v19);
    swift_bridgeObjectRelease();
    v6 = v20;
    if (v20[2])
      goto LABEL_3;
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain(a1);
  swift_bridgeObjectRetain(v4);
  v6 = sub_10063C594(v5, a1);
  swift_bridgeObjectRelease();
  if (!v6[2])
    return swift_bridgeObjectRelease();
LABEL_3:
  swift_bridgeObjectRetain(v6);
  v8 = *(unint64_t **)(sub_1007BE400(v7, (uint64_t (*)(char *, unint64_t, uint64_t))sub_1007BE6E4)+ 16);
  swift_release();
  v9 = *(unint64_t **)(sub_1007BE400((uint64_t)v6, (uint64_t (*)(char *, unint64_t, uint64_t))sub_1007BE568)+ 16);
  swift_release();
  if (qword_1010E9938 != -1)
    swift_once(&qword_1010E9938, sub_1000AFBB0);
  v10 = type metadata accessor for Logger(0);
  v11 = sub_10001A9E8(v10, (uint64_t)qword_1011B6748);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.fault.getter(v12);
  if (os_log_type_enabled(v12, v13))
  {
    v14 = swift_slowAlloc(22, -1);
    *(_DWORD *)v14 = 134218240;
    v20 = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, &v21, v14 + 4, v14 + 12);
    *(_WORD *)(v14 + 12) = 2048;
    v20 = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, &v21, v14 + 14, v14 + 22);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "Display identifiers contain unexpected prefix. Owner: %ld, member: %ld.", (uint8_t *)v14, 0x16u);
    swift_slowDealloc(v14, -1, -1);
  }

  type metadata accessor for Transaction(0);
  v15 = swift_allocObject(&unk_101092D48, 32, 7);
  *(_QWORD *)(v15 + 16) = v8;
  *(_QWORD *)(v15 + 24) = v9;
  static Transaction.asyncTask(name:block:)("SendDisplayIdPrefixAnalyticsError", 33, 2, &unk_101108540, v15);
  swift_release();
  v16 = *(_QWORD *)(v2 + 240);
  swift_bridgeObjectRetain(a1);
  swift_bridgeObjectRetain(v16);
  *(_QWORD *)(v2 + 240) = sub_100BBCD9C(v17, a1);
  return swift_bridgeObjectRelease();
}

uint64_t sub_100005214()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[42];
  v0[46] = v0[39];
  return swift_task_switch(sub_100713374, v1, 0);
}

uint64_t sub_100005230(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 768);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 536);
  *(_QWORD *)(*(_QWORD *)v1 + 776) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10000DF54, v3, 0);
}

uint64_t sub_100005290()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = swift_task_alloc(32);
  *(_QWORD *)(v0 + 40) = v1;
  *(_OWORD *)(v1 + 16) = *(_OWORD *)(v0 + 24);
  v2 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v0 + 48) = v2;
  *v2 = v0;
  v2[1] = sub_10001EC1C;
  return withCheckedContinuation<A>(isolation:function:_:)(v2, 0, 0, 0x4970757472617473, 0xEF2928656E6F4473, sub_100033730, v1, (char *)&type metadata for () + 8);
}

uint64_t sub_100005330()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  v1 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v0 + 56) = v1;
  v2 = sub_10001A9A8(&qword_1010EBBA8);
  *v1 = v0;
  v1[1] = sub_10001C878;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 16, 0, 0, 0x6976726553746567, 0xEC00000029286563, sub_100030A18, *(_QWORD *)(v0 + 24), v2);
}

uint64_t sub_1000053C4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  _BYTE v7[24];

  swift_beginAccess(a1 + 80, v7, 0, 0);
  swift_bridgeObjectRetain(*(_QWORD *)(a1 + 80));
  v5 = sub_1005AE000(v4);
  result = swift_bridgeObjectRelease();
  *a2 = v5;
  return result;
}

uint64_t sub_10000543C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t (__cdecl *v7)();

  v1 = *(_QWORD *)(v0 + 216);
  if ((v1 & 0xC000000000000001) != 0)
  {
    if (v1 < 0)
      v2 = *(_QWORD *)(v0 + 216);
    else
      v2 = v1 & 0xFFFFFFFFFFFFFF8;
    v3 = __CocoaSet.count.getter(v2);
  }
  else
  {
    v3 = *(_QWORD *)(v1 + 16);
  }
  swift_bridgeObjectRelease();
  if (v3 == 1)
  {
    if (qword_1010EA5B0 != -1)
      swift_once(&qword_1010EA5B0, sub_100D37418);
    swift_beginAccess(&xmmword_10111E6C0, v0 + 176, 0, 0);
    result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 96, &qword_1010EE220);
    if (*(_QWORD *)(v0 + 120))
    {
      sub_10000F9FC((__int128 *)(v0 + 96), v0 + 136);
      sub_10001AA44((_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 160));
      v7 = (uint64_t (__cdecl *)())((char *)&dword_1010EBB70 + dword_1010EBB70);
      v5 = (_QWORD *)swift_task_alloc(unk_1010EBB74);
      *(_QWORD *)(v0 + 304) = v5;
      *v5 = v0;
      v5[1] = sub_1007179B8;
      return v7();
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    v6 = (_QWORD *)swift_task_alloc(dword_1011055D4);
    *(_QWORD *)(v0 + 328) = v6;
    *v6 = v0;
    v6[1] = sub_10001DEDC;
    return sub_10001DE80();
  }
  return result;
}

uint64_t sub_100005598(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int (*v14)(const void *, uint64_t, uint64_t);
  uint64_t v15;

  v6 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 36);
  v8 = *(int *)(a3 + 40);
  v9 = *(_QWORD *)(a2 + v7);
  *(_QWORD *)(a1 + v7) = v9;
  v10 = (void *)(a1 + v8);
  v11 = (const void *)(a2 + v8);
  v12 = type metadata accessor for DirectorySequence(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v13 + 48);
  swift_retain(v9);
  if (v14(v11, 1, v12))
  {
    v15 = sub_10001A9A8((uint64_t *)&unk_1010F77A0);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v13 + 16))(v10, v11, v12);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
  }
  return a1;
}

uint64_t destroy for SecureLocationsConfig(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[8]);
  swift_bridgeObjectRelease(a1[21]);
  swift_bridgeObjectRelease(a1[23]);
  return swift_bridgeObjectRelease(a1[25]);
}

uint64_t sub_1000056C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v6;
  void *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  id v11;
  id v12;
  _QWORD *v13;
  NSObject *v14;
  os_log_type_t v15;
  _BOOL4 v16;
  void *v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  NSObject *log;
  os_log_type_t type;
  uint64_t v28;
  uint64_t v29;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 264) + 128);
  v2 = sub_10000CE84(*(void **)(v0 + 272), *(_QWORD *)(v0 + 280));
  *(_QWORD *)(v0 + 288) = v2;
  if (v2)
  {
    v3 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
    *(_QWORD *)(v0 + 296) = v3;
    v4 = sub_10001A9A8(&qword_101105818);
    *v3 = v0;
    v3[1] = sub_10001DF30;
    return withCheckedContinuation<A>(isolation:function:_:)(v0 + 216, 0, 0, 0x736553636E797361, 0xED0000736E6F6973, sub_1007273D8, v1, v4);
  }
  else
  {
    if (qword_1010E9ED8 != -1)
      swift_once(&qword_1010E9ED8, sub_1007116BC);
    v7 = *(void **)(v0 + 272);
    v6 = *(_QWORD **)(v0 + 280);
    v8 = type metadata accessor for Logger(0);
    sub_10001A9E8(v8, (uint64_t)qword_1011B7598);
    v10 = v6[1];
    v9 = v6[2];
    *(_QWORD *)(v0 + 248) = v6[4];
    swift_bridgeObjectRetain(v9);
    v11 = v7;
    sub_100004F74((_QWORD *)(v0 + 248));
    v12 = v11;
    swift_bridgeObjectRetain(v9);
    v13 = sub_100004F74((_QWORD *)(v0 + 248));
    v14 = Logger.logObject.getter(v13);
    v15 = static os_log_type_t.error.getter(v14);
    v16 = os_log_type_enabled(v14, v15);
    v17 = *(void **)(v0 + 272);
    if (v16)
    {
      v18 = swift_slowAlloc(22, -1);
      v28 = swift_slowAlloc(64, -1);
      v29 = v28;
      *(_DWORD *)v18 = 136315394;
      v19 = objc_msgSend(v17, "debugDescription");
      log = v14;
      v20 = v10;
      v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
      type = v15;
      v23 = v22;

      *(_QWORD *)(v0 + 232) = sub_100016940(v21, v23, &v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 232, v0 + 240, v18 + 4, v18 + 12);
      swift_bridgeObjectRelease();

      *(_WORD *)(v18 + 12) = 2082;
      if (v9)
        v24 = v20;
      else
        v24 = 0x6E776F6E6B6E75;
      if (v9)
        v25 = v9;
      else
        v25 = 0xE700000000000000;
      swift_bridgeObjectRetain(v9);
      *(_QWORD *)(v0 + 224) = sub_100016940(v24, v25, &v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 224, v0 + 232, v18 + 14, v18 + 22);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1001AE6D8((_QWORD *)(v0 + 248));
      swift_bridgeObjectRelease();
      sub_1001AE6D8((_QWORD *)(v0 + 248));
      _os_log_impl((void *)&_mh_execute_header, log, type, "Failed to add connection %s, bundle: %{public}s.", (uint8_t *)v18, 0x16u);
      swift_arrayDestroy(v28, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v28, -1, -1);
      swift_slowDealloc(v18, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease();
      sub_1001AE6D8((_QWORD *)(v0 + 248));
      swift_bridgeObjectRelease();
      sub_1001AE6D8((_QWORD *)(v0 + 248));

    }
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100005A30(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 168);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 152);
  *(_QWORD *)(*(_QWORD *)v1 + 176) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10000E2EC, v3, 0);
}

uint64_t sub_100005A90()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 568));
  swift_release();
  return swift_task_switch(sub_10000D50C, 0, 0);
}

uint64_t sub_100005AF0(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;

  v2[2] = a1;
  v2[3] = a2;
  v3 = type metadata accessor for UUID(0);
  v2[4] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100008C00, 0, 0);
}

uint64_t sub_100005B48()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 288));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100005B7C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  v1 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v0 + 56) = v1;
  v2 = sub_10001A9A8(&qword_1010EBB78);
  *v1 = v0;
  v1[1] = sub_10001C878;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 16, 0, 0, 0x6976726553746567, 0xEC00000029286563, sub_100030978, *(_QWORD *)(v0 + 24), v2);
}

uint64_t sub_100005C68()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 752);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 760));
  swift_release();
  return swift_task_switch(sub_10001E754, v1, 0);
}

uint64_t sub_100005CC8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = sub_100017368();
  *a1 = result;
  return result;
}

uint64_t sub_100005CF0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_10001A9A8(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t destroy for Role(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 16));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 32));
}

uint64_t static Date.trustedNow.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  id v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t My;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v2 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  __chkstk_darwin(v2);
  v4 = (char *)v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1010EA1D0 != -1)
    swift_once(&qword_1010EA1D0, sub_100B11444);
  v16 = 0x7365547265646E75;
  v17 = 0xE900000000000074;
  SynchronousCache.cachedValue<A>(key:computeBlock:)(v15, &v16, sub_10001F628, 0, &type metadata for Bool);
  swift_bridgeObjectRelease(v17);
  if (LOBYTE(v15[0]) == 1)
  {
    v5 = objc_msgSend((id)objc_opt_self(FMSystemInfo), "sharedInstance");
    v6 = objc_msgSend(v5, "isInternalBuild");

    if (v6)
    {
      if (qword_1010E98B0 != -1)
        swift_once(&qword_1010E98B0, sub_10001F1E8);
      v7 = sub_10001A9E8(v2, (uint64_t)qword_1010E98B8);
      swift_beginAccess(v7, v15, 0, 0);
      sub_10001F674(v7, (uint64_t)v4);
      v8 = type metadata accessor for Date(0);
      v9 = *(_QWORD *)(v8 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v4, 1, v8) != 1)
        return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v9 + 32))(a1, v4, v8);
      sub_10001F6BC((uint64_t)v4);
    }
  }
  My = type metadata accessor for Feature.FindMy(0);
  v18 = My;
  v19 = sub_100006204((unint64_t *)&qword_1010EE1B0, (uint64_t (*)(uint64_t))&type metadata accessor for Feature.FindMy, (uint64_t)&protocol conformance descriptor for Feature.FindMy);
  v11 = sub_100018F08(&v16);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(My - 8) + 104))(v11, enum case for Feature.FindMy.trustedNowUsesReferenceClock(_:), My);
  LOBYTE(My) = isFeatureEnabled(_:)(&v16);
  v12 = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v16);
  if ((My & 1) == 0)
    return Date.init()(v12);
  sub_100B35904();
  return Date.init(timeIntervalSinceReferenceDate:)(v13);
}

uint64_t sub_100006054@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_cachedOwnedBeaconRecords);
  *a1 = v2;
  return swift_bridgeObjectRetain(v2);
}

uint64_t sub_100006078()
{
  uint64_t v0;
  double v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  char *v7;

  v1 = Date.timeIntervalSinceNow.getter();
  v2 = static Duration.milliseconds(_:)(v1 * 1000.0);
  v4 = v3;
  ContinuousClock.init()();
  v7 = (char *)&dword_101117148 + dword_101117148;
  v5 = (_QWORD *)swift_task_alloc(unk_10111714C);
  *(_QWORD *)(v0 + 80) = v5;
  *v5 = v0;
  v5[1] = sub_1005B0CD0;
  return ((uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t))v7)(v2, v4, 0, 0, 1);
}

uint64_t sub_100006124()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v0 + 72) = type metadata accessor for CloudStorageDatabase(0);
  *(_QWORD *)(v0 + 80) = sub_100006204(&qword_1010FE8B0, type metadata accessor for CloudStorageDatabase, (uint64_t)&unk_100E42748);
  Database.startup()();
  *(_QWORD *)(v0 + 88) = v1;
  if (v1)
    return (*(uint64_t (**)(void))(v0 + 8))();
  else
    return swift_task_switch(sub_10001C8D8, *(_QWORD *)(v0 + 64), 0);
}

uint64_t type metadata accessor for CloudStorageDatabase(uint64_t a1)
{
  uint64_t result;

  result = qword_1010FE7A8;
  if (!qword_1010FE7A8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for CloudStorageDatabase);
  return result;
}

uint64_t sub_100006204(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100006244(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t ObjectType;
  _BYTE v9[24];

  v4 = a1 + OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor_delegate;
  swift_beginAccess(a1 + OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor_delegate, v9, 0, 0);
  result = swift_unknownObjectWeakLoadStrong(v4);
  if (result)
  {
    v6 = result;
    v7 = *(_QWORD *)(v4 + 8);
    ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, _UNKNOWN **, uint64_t, uint64_t, uint64_t))(v7 + 8))(a1, &protocol witness table for CurrentLocationMonitor, a2, ObjectType, v7);
    return swift_unknownObjectRelease(v6);
  }
  return result;
}

uint64_t sub_1000062D8(uint64_t a1, uint64_t a2, void (*a3)(_QWORD *), uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, uint64_t, uint64_t, __n128);
  __n128 v31;
  void (*v32)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  NSObject *v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  int v44;
  _QWORD *v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  NSObject *v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t result;
  uint64_t v59;
  id v60;
  id v61;
  id v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  _QWORD v70[2];
  void (*v71)(_QWORD *);
  uint64_t v72;
  void (*v73)(char *, uint64_t, uint64_t, __n128);
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  NSObject *v77;
  uint64_t v78;
  uint64_t v79;
  _BYTE *v80;
  _QWORD *v81;
  _QWORD *v82;
  _QWORD *v83;
  _BYTE v84[16];
  _QWORD *v85;

  v70[1] = a4;
  v71 = a3;
  v6 = sub_10001A9A8(&qword_101102FB0);
  __chkstk_darwin(v6);
  v8 = (char *)v70 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v82 = (_QWORD *)type metadata accessor for WildModeAssociationRecord(0);
  v9 = *(v82 - 1);
  v10 = __chkstk_darwin(v82);
  v80 = (char *)v70 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)v70 - v13;
  v15 = __chkstk_darwin(v12);
  v75 = (uint64_t)v70 - v16;
  __chkstk_darwin(v15);
  v74 = (uint64_t)v70 - v17;
  v18 = type metadata accessor for UUID(0);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = __chkstk_darwin(v18);
  v77 = ((char *)v70 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v20);
  v23 = (char *)v70 - v22;
  v24 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v24);
  v26 = (char *)v70 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = *(_QWORD *)(a1 + 16);
  v78 = v19;
  v79 = v18;
  v76 = a2;
  if (v27)
  {
    v28 = a1;
    v29 = a1 + ((*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80));
    v30 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v19 + 16);
    v72 = *(_QWORD *)(v19 + 72);
    v73 = v30;
    v70[0] = v28;
    v31 = swift_bridgeObjectRetain(v28);
    v81 = _swiftEmptyArrayStorage;
    while (1)
    {
      v73(v26, v29, v18, v31);
      v32 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v19 + 56);
      v32(v26, 0, 1, v18);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v26, 1, v18) == 1)
        break;
      (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v23, v26, v18);
      sub_10081C0CC((uint64_t)v23, (uint64_t)v8);
      if ((*(unsigned int (**)(char *, uint64_t, _QWORD *))(v9 + 48))(v8, 1, v82) == 1)
      {
        sub_100004048((uint64_t)v8, &qword_101102FB0);
      }
      else
      {
        v33 = v74;
        sub_1000126EC((uint64_t)v8, v74, type metadata accessor for WildModeAssociationRecord);
        sub_10005972C(v33, v75, type metadata accessor for WildModeAssociationRecord);
        v34 = (unint64_t)v81;
        if ((swift_isUniquelyReferenced_nonNull_native(v81) & 1) == 0)
          v34 = sub_1007C9714(0, *(_QWORD *)(v34 + 16) + 1, 1, v34);
        v36 = *(_QWORD *)(v34 + 16);
        v35 = *(_QWORD *)(v34 + 24);
        v37 = v34;
        if (v36 >= v35 >> 1)
          v37 = sub_1007C9714(v35 > 1, v36 + 1, 1, v34);
        v81 = (_QWORD *)v37;
        *(_QWORD *)(v37 + 16) = v36 + 1;
        sub_1000126EC(v75, v37+ ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))+ *(_QWORD *)(v9 + 72) * v36, type metadata accessor for WildModeAssociationRecord);
        sub_1000126B0(v74, type metadata accessor for WildModeAssociationRecord);
      }
      v19 = v78;
      v18 = v79;
      (*(void (**)(char *, uint64_t))(v78 + 8))(v23, v79);
      v29 += v72;
      if (!--v27)
      {
        v32(v26, 1, 1, v18);
        break;
      }
    }
    swift_bridgeObjectRelease();
    v38 = v81;
  }
  else
  {
    v38 = sub_10000A430();
  }
  v39 = v38[2];
  v40 = v77;
  if (!v39)
  {
    v71(_swiftEmptyArrayStorage);
    return swift_bridgeObjectRelease();
  }
  v85 = _swiftEmptyArrayStorage;
  swift_bridgeObjectRetain(v38);
  v41 = 0;
  v81 = v38;
  do
  {
    if (v41 >= v38[2])
    {
      __break(1u);
      goto LABEL_49;
    }
    v42 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
    v43 = *(_QWORD *)(v9 + 72);
    sub_10005972C((uint64_t)v38 + v42 + v43 * v41, (uint64_t)v14, type metadata accessor for WildModeAssociationRecord);
    v44 = v14[*((int *)v82 + 16)];
    if (v44 == 8 || (v44 & 0xFA) == 0)
    {
      sub_1000126B0((uint64_t)v14, type metadata accessor for WildModeAssociationRecord);
    }
    else
    {
      sub_1000126EC((uint64_t)v14, (uint64_t)v80, type metadata accessor for WildModeAssociationRecord);
      v46 = v85;
      if ((swift_isUniquelyReferenced_nonNull_native(v85) & 1) == 0)
      {
        sub_10009AEA4(0, v46[2] + 1, 1);
        v46 = v85;
      }
      v48 = v46[2];
      v47 = v46[3];
      if (v48 >= v47 >> 1)
      {
        sub_10009AEA4(v47 > 1, v48 + 1, 1);
        v46 = v85;
      }
      v46[2] = v48 + 1;
      sub_1000126EC((uint64_t)v80, (uint64_t)v46 + v42 + v48 * v43, type metadata accessor for WildModeAssociationRecord);
      v38 = v81;
      v40 = v77;
    }
    ++v41;
  }
  while (v39 != v41);
  swift_bridgeObjectRelease();
  v49 = (uint64_t)v85;
  v50 = v76;
  swift_retain();
  v39 = (uint64_t)sub_1004BD314(v49);
  swift_release(v49);
  swift_release(v50);
  if (qword_1010E9CE0 == -1)
    goto LABEL_30;
LABEL_49:
  swift_once(&qword_1010E9CE0, sub_100563220);
LABEL_30:
  v51 = type metadata accessor for Logger(0);
  sub_10001A9E8(v51, (uint64_t)qword_1011B7148);
  v52 = swift_bridgeObjectRetain_n(v39, 4);
  v53 = Logger.logObject.getter(v52);
  v54 = static os_log_type_t.debug.getter(v53);
  if (!os_log_type_enabled(v53, (os_log_type_t)v54))
  {

    swift_bridgeObjectRelease_n(v39, 4);
LABEL_46:
    v71((_QWORD *)v39);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  v55 = swift_slowAlloc(22, -1);
  v82 = (_QWORD *)swift_slowAlloc(32, -1);
  v85 = v82;
  *(_DWORD *)v55 = 134218242;
  if ((unint64_t)v39 >> 62)
  {
    if (v39 < 0)
      v69 = v39;
    else
      v69 = v39 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v39);
    v56 = _CocoaArrayWrapper.endIndex.getter(v69);
    swift_bridgeObjectRelease();
  }
  else
  {
    v56 = *(_QWORD *)((v39 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  v83 = (_QWORD *)v56;
  v80 = v84;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v83, v84, v55 + 4, v55 + 12);
  swift_bridgeObjectRelease();
  *(_WORD *)(v55 + 12) = 2082;
  v57 = _swiftEmptyArrayStorage;
  if (!v56)
  {
LABEL_45:
    v65 = Array.description.getter(v57, v79);
    v67 = v66;
    swift_bridgeObjectRelease();
    v83 = (_QWORD *)sub_100016940(v65, v67, (uint64_t *)&v85);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v83, v80, v55 + 14, v55 + 22);
    swift_bridgeObjectRelease_n(v39, 2);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v53, (os_log_type_t)v54, "unknownBeacons[%ld]: %{public}s ", (uint8_t *)v55, 0x16u);
    v68 = v82;
    swift_arrayDestroy(v82, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v68, -1, -1);
    swift_slowDealloc(v55, -1, -1);

    goto LABEL_46;
  }
  LODWORD(v76) = v54;
  v77 = v53;
  v83 = _swiftEmptyArrayStorage;
  result = sub_10009A578(0, v56 & ~(v56 >> 63), 0);
  if ((v56 & 0x8000000000000000) == 0)
  {
    v59 = 0;
    v57 = v83;
    do
    {
      if ((v39 & 0xC000000000000001) != 0)
        v60 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v59, v39);
      else
        v60 = *(id *)(v39 + 8 * v59 + 32);
      v61 = v60;
      v62 = objc_msgSend(v61, "identifier");
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v62);

      v83 = v57;
      v64 = v57[2];
      v63 = v57[3];
      if (v64 >= v63 >> 1)
      {
        sub_10009A578(v63 > 1, v64 + 1, 1);
        v57 = v83;
      }
      ++v59;
      v57[2] = v64 + 1;
      (*(void (**)(unint64_t, NSObject *, uint64_t))(v78 + 32))((unint64_t)v57+ ((*(unsigned __int8 *)(v78 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v78 + 80))+ *(_QWORD *)(v78 + 72) * v64, v40, v79);
    }
    while (v56 != v59);
    v53 = v77;
    LOBYTE(v54) = v76;
    goto LABEL_45;
  }
  __break(1u);
  return result;
}

uint64_t sub_100006B24()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 24) = v0;
  *(_QWORD *)(v1 + 32) = *v0;
  return swift_task_switch(sub_100004590, 0, 0);
}

uint64_t sub_100006B44()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  _QWORD *v8;

  v1 = v0[10];
  v2 = v0[8];
  v3 = v0[9];
  v4 = type metadata accessor for ContinuousClock(0);
  v5 = sub_100006C64((unint64_t *)&unk_101117150, 255, (uint64_t (*)(uint64_t))&type metadata accessor for ContinuousClock, (uint64_t)&protocol conformance descriptor for ContinuousClock);
  dispatch thunk of Clock.now.getter(v4, v5);
  v6 = sub_100006C64(&qword_101116030, 255, (uint64_t (*)(uint64_t))&type metadata accessor for ContinuousClock.Instant, (uint64_t)&protocol conformance descriptor for ContinuousClock.Instant);
  dispatch thunk of InstantProtocol.advanced(by:)(v0 + 5, v2, v6);
  v7 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v0[12] = v7;
  v7(v1, v2);
  v8 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of Clock.sleep(until:tolerance:)[1]);
  v0[13] = v8;
  *v8 = v0;
  v8[1] = sub_100BB0C38;
  return dispatch thunk of Clock.sleep(until:tolerance:)(v0[11], v0 + 2, v4, v5);
}

uint64_t sub_100006C64(unint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    v7 = a3(a2);
    result = swift_getWitnessTable(a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100006DB8()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 24) = v0;
  *(_QWORD *)(v1 + 32) = *v0;
  return swift_task_switch(sub_100005290, 0, 0);
}

uint64_t initializeWithCopy for SecureLocationsConfig(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v4 = *(_QWORD *)(a2 + 64);
  v5 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = v4;
  *(_QWORD *)(a1 + 72) = v5;
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  v6 = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 168) = v6;
  v7 = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 184) = v7;
  v8 = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 200) = v8;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  return a1;
}

uint64_t sub_100006E9C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t ObjectType;
  _BYTE v9[24];

  v4 = a1 + OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor_delegate;
  swift_beginAccess(a1 + OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor_delegate, v9, 0, 0);
  result = swift_unknownObjectWeakLoadStrong(v4);
  if (result)
  {
    v6 = result;
    v7 = *(_QWORD *)(v4 + 8);
    ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, _UNKNOWN **, uint64_t, uint64_t, uint64_t))(v7 + 16))(a1, &protocol witness table for CurrentLocationMonitor, a2, ObjectType, v7);
    return swift_unknownObjectRelease(v6);
  }
  return result;
}

uint64_t sub_100006F30(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10001A9A8(&qword_1010ED498);
    v11 = (char *)swift_allocObject(v10, 40 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 40);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[40 * v8])
      memmove(v13, v14, 40 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[40 * v8] || v13 >= &v14[40 * v8])
  {
    swift_arrayInitWithCopy(v13);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1000070B0()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 24) = v0;
  *(_QWORD *)(v1 + 32) = *v0;
  return swift_task_switch(sub_100004940, 0, 0);
}

uint64_t sub_1000070D0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 176));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100007100(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4[4] = a3;
  v4[5] = a4;
  v4[2] = a1;
  v4[3] = a2;
  v5 = type metadata accessor for UUID(0);
  v4[6] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for ContinuousClock(0);
  v4[7] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v4[8] = v7;
  v4[9] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100006078, 0, 0);
}

uint64_t sub_100007184(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 208);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 152);
  *(_QWORD *)(*(_QWORD *)v1 + 216) = a1;
  swift_task_dealloc(v2);
  swift_bridgeObjectRelease();
  return swift_task_switch(sub_10000A038, v3, 0);
}

uint64_t sub_1000071EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_release(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100007260()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10000728C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000072B8(void (*a1)(_QWORD))
{
  uint64_t v1;

  swift_release(*(_QWORD *)(v1 + 16));
  a1(*(_QWORD *)(v1 + 24));
  return swift_deallocObject(v1, 32, 7);
}

uint64_t sub_1000072F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(sub_10001A9A8(&qword_1010ED860) - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 25) & ~v2;
  v4 = *(_QWORD *)(v1 + 64);
  swift_release(*(_QWORD *)(v0 + 16));
  v5 = type metadata accessor for UUID(0);
  v6 = *(_QWORD *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v0 + v3, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v0 + v3, v5);
  return swift_deallocObject(v0, v3 + v4, v2 | 7);
}

uint64_t sub_100007390()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1000073BC()
{
  _QWORD *v0;

  swift_release(v0[2]);
  sub_10001BC14(v0[3], v0[4]);
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000073E8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_100007414()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for Logger(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(_QWORD *)(v0 + v6));
  return swift_deallocObject(v0, v6 + 8, v5);
}

uint64_t sub_1000074A4()
{
  uint64_t v0;
  uint64_t found;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);

  found = type metadata accessor for NotifyWhenFoundRecord(0);
  v2 = *(_QWORD *)(found - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = (v6 + 23) & 0xFFFFFFFFFFFFFFF8;
  v8 = v0 + v4;
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v9 = v8 + *(int *)(found + 20);
  v10 = type metadata accessor for UUID(0);
  v11 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8);
  v11(v9, v10);
  v11(v8 + *(int *)(found + 24), v10);
  swift_release(*(_QWORD *)(v0 + v6 + 8));
  swift_release(*(_QWORD *)(v0 + v7));
  return swift_deallocObject(v0, v7 + 8, v5);
}

uint64_t sub_10000757C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = sub_10001A9A8(&qword_1010F37E0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_release(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1000075F4(void (*a1)(_QWORD))
{
  uint64_t v1;

  swift_release(*(_QWORD *)(v1 + 24));
  a1(*(_QWORD *)(v1 + 32));
  return swift_deallocObject(v1, 40, 7);
}

uint64_t sub_10000762C(void (*a1)(_QWORD))
{
  uint64_t v1;

  a1(*(_QWORD *)(v1 + 16));
  swift_release(*(_QWORD *)(v1 + 32));
  return swift_deallocObject(v1, 40, 7);
}

uint64_t sub_10000765C(void (*a1)(_QWORD), void (*a2)(_QWORD))
{
  uint64_t v2;

  a1(*(_QWORD *)(v2 + 16));
  a2(*(_QWORD *)(v2 + 32));
  return swift_deallocObject(v2, 40, 7);
}

uint64_t sub_100007698()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_bridgeObjectRelease(v0[4]);
  swift_bridgeObjectRelease(v0[5]);
  swift_bridgeObjectRelease(v0[6]);
  swift_bridgeObjectRelease(v0[7]);
  swift_bridgeObjectRelease(v0[9]);
  swift_bridgeObjectRelease(v0[11]);
  return swift_deallocObject(v0, 113, 7);
}

uint64_t sub_1000076EC(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = sub_10001A9A8(a1);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(unsigned __int8 *)(v3 + 80);
  v5 = (v4 + 16) & ~v4;
  v6 = v5 + *(_QWORD *)(v3 + 64);
  v7 = v4 | 7;
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1 + v5, v2);
  return swift_deallocObject(v1, v6, v7);
}

uint64_t sub_100007748()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100007774(uint64_t a1)
{
  uint64_t v1;

  swift_release(*(_QWORD *)(v1 + 24));
  return swift_deallocObject(v1, a1, 7);
}

uint64_t sub_1000077AC()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000077D8(uint64_t a1)
{
  uint64_t v1;

  swift_release(*(_QWORD *)(v1 + 16));
  swift_release(*(_QWORD *)(v1 + 32));
  return swift_deallocObject(v1, a1, 7);
}

uint64_t sub_100007810(void (*a1)(_QWORD), void (*a2)(_QWORD), uint64_t a3)
{
  uint64_t v3;

  a1(*(_QWORD *)(v3 + 16));
  a2(*(_QWORD *)(v3 + 32));
  return swift_deallocObject(v3, a3, 7);
}

uint64_t sub_100007858()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);

  v1 = (int *)type metadata accessor for MemberSharingCircle(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  v7 = v0 + v4;
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v8 = v0 + v4 + v1[5];
  v9 = type metadata accessor for UUID(0);
  v10 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8);
  v10(v8, v9);
  v10(v7 + v1[6], v9);
  v10(v7 + v1[7], v9);
  v10(v7 + v1[8], v9);
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10000793C()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 56));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 72));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 88));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 104));
  swift_release(*(_QWORD *)(v0 + 112));

  swift_release(*(_QWORD *)(v0 + 136));
  swift_release(*(_QWORD *)(v0 + 144));
  return swift_deallocObject(v0, 152, 7);
}

uint64_t sub_1000079A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = sub_10001A9A8(&qword_1010ED378);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_release(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100007A20(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = sub_10001A9A8(a1);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(unsigned __int8 *)(v3 + 80);
  v5 = (v4 + 40) & ~v4;
  v6 = v5 + *(_QWORD *)(v3 + 64);
  v7 = v4 | 7;
  swift_unknownObjectRelease(*(_QWORD *)(v1 + 16));
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1 + v5, v2);
  return swift_deallocObject(v1, v6, v7);
}

uint64_t sub_100007A98()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = sub_10001A9A8(&qword_10110CA18);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100007AFC(uint64_t a1)
{
  uint64_t v1;

  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v1 + 24));
  return swift_deallocObject(v1, a1, 7);
}

uint64_t sub_100007B34()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t v21;

  v1 = (int *)type metadata accessor for OwnedBeaconRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_release(*(_QWORD *)(v0 + 16));
  v6 = v0 + v4;
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v7 = v0 + v4 + v1[5];
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v10(v7, v8);
  v11 = v0 + v4 + v1[6];
  v12 = type metadata accessor for StableIdentifier(0);
  switch(swift_getEnumCaseMultiPayload(v11, v12))
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v10(v11, v8);
      v21 = v5;
      sub_10001A9A8(&qword_101106F40);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v10(v11, v8);
      v21 = v5;
      sub_10001A9A8((uint64_t *)&unk_1010F46F0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      v5 = v21;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }
  v13 = v6 + v1[7];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v13, 1, v8))
    v10(v13, v8);
  v14 = v6 + v1[8];
  v15 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v14, v15);
  sub_10001BC14(*(_QWORD *)(v6 + v1[9]), *(_QWORD *)(v6 + v1[9] + 8));
  v16 = (uint64_t *)(v6 + v1[10]);
  v17 = v16[1];
  if (v17 >> 60 != 15)
    sub_10001BC14(*v16, v17);
  v18 = (uint64_t *)(v6 + v1[11]);
  v19 = v18[1];
  if (v19 >> 60 != 15)
    sub_10001BC14(*v18, v19);
  sub_10001BC14(*(_QWORD *)(v6 + v1[12]), *(_QWORD *)(v6 + v1[12] + 8));
  sub_10001BC14(*(_QWORD *)(v6 + v1[13]), *(_QWORD *)(v6 + v1[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_100007DD4(void (*a1)(_QWORD), uint64_t a2)
{
  _QWORD *v2;

  swift_release(v2[2]);
  swift_release(v2[3]);
  a1(v2[4]);
  return swift_deallocObject(v2, a2, 7);
}

uint64_t sub_100007E20()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  swift_release(*(_QWORD *)(v0 + 40));
  swift_release(*(_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100007E5C(uint64_t a1)
{
  uint64_t v1;

  swift_bridgeObjectRelease(*(_QWORD *)(v1 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(v1 + 40));
  return swift_deallocObject(v1, a1, 7);
}

uint64_t sub_100007F00()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  if (!*(_QWORD *)(v0 + 96))
  {
    v5 = sub_10012C434();
    v6 = swift_allocError(&type metadata for DatabaseError, v5, 0, 0);
    *(_DWORD *)v7 = 2;
    *(_BYTE *)(v7 + 4) = 1;
    swift_willThrow(v6);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  if (qword_1010E9C68 != -1)
    swift_once(&qword_1010E9C68, sub_10050DFF4);
  v1 = *(_QWORD *)(v0 + 88);
  v2 = type metadata accessor for Table(0);
  v3 = sub_10001A9E8(v2, (uint64_t)qword_1011B6FD0);
  *(_QWORD *)(v0 + 40) = v2;
  *(_QWORD *)(v0 + 48) = &protocol witness table for Table;
  v4 = sub_100018F08((_QWORD *)(v0 + 16));
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(v4, v3, v2);
  sub_100017A84(v0 + 16);
  if (v1)
  {
    swift_release();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v9 = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
  v10 = dispatch thunk of _AnySequenceBox.__copyToContiguousArray()(v9);
  swift_release();
  swift_release();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v10);
}

uint64_t sub_100008064()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 176);
  swift_task_dealloc(*(_QWORD *)(*v0 + 184));
  swift_release(v2);
  return swift_task_switch(sub_10001C95C, *(_QWORD *)(v1 + 176), 0);
}

uint64_t sub_1000080BC(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  size_t v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10001A9A8(&qword_1010ED1B0);
    v11 = (char *)swift_allocObject(v10, 96 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 96);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  v15 = 96 * v8;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v15])
      memmove(v13, v14, v15);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[v15] || v13 >= &v14[v15])
  {
    swift_arrayInitWithCopy(v13);
LABEL_28:
    swift_release();
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_100008234(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  uint64_t v5;
  id v6;

  type metadata accessor for Transaction(0);
  v5 = swift_allocObject(&unk_101081268, 32, 7);
  *(_QWORD *)(v5 + 16) = v3;
  *(_QWORD *)(v5 + 24) = a3;
  v6 = a3;
  swift_retain(v3);
  static Transaction.asyncTask(name:block:)("LocationFetchService.locationMonitorDidUpdate", 45, 2, &unk_101100278, v5);
  return swift_release(v5);
}

void sub_1000082B4(uint64_t a1)
{
  uint64_t v2;
  int64_t v3;
  _QWORD *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  int64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  char v45[24];

  swift_beginAccess(a1 + 56, v45, 0, 0);
  v2 = *(_QWORD *)(a1 + 56);
  v3 = *(_QWORD *)(v2 + 16);
  v4 = _swiftEmptyArrayStorage;
  if (!v3)
  {
LABEL_24:
    v24 = v4[2];
    if (v24)
    {
      if (v24 == 1)
      {
        v25 = 0;
        v26 = 0;
      }
      else
      {
        v27 = 0;
        v28 = 0;
        v25 = v24 & 0x7FFFFFFFFFFFFFFELL;
        v29 = v4 + 9;
        v30 = v24 & 0x7FFFFFFFFFFFFFFELL;
        do
        {
          v31 = *(v29 - 5);
          v32 = *v29;
          v29 += 10;
          v27 |= v31;
          v28 |= v32;
          v30 -= 2;
        }
        while (v30);
        v26 = v28 | v27;
        if (v24 == v25)
          goto LABEL_33;
      }
      v33 = v24 - v25;
      v34 = &v4[5 * v25 + 4];
      do
      {
        v35 = *v34;
        v34 += 5;
        v26 |= v35;
        --v33;
      }
      while (v33);
    }
    else
    {
      v26 = 0;
    }
LABEL_33:
    swift_bridgeObjectRelease();
    v44 = (_QWORD *)v26;
    v36 = sub_10001A9A8(&qword_101105AA0);
    CheckedContinuation.resume(returning:)(&v44, v36);
    return;
  }
  v44 = _swiftEmptyArrayStorage;
  swift_bridgeObjectRetain(v2);
  sub_10001CEA0(0, v3, 0);
  v4 = _swiftEmptyArrayStorage;
  v6 = sub_10001D6A8(v2);
  v7 = 0;
  v8 = v2 + 64;
  v9 = *(_BYTE *)(v2 + 32);
  v37 = v3;
  v38 = v5;
  v39 = v2 + 64;
  while ((v6 & 0x8000000000000000) == 0 && v6 < 1 << v9)
  {
    v12 = (unint64_t)v6 >> 6;
    if ((*(_QWORD *)(v8 + 8 * ((unint64_t)v6 >> 6)) & (1 << v6)) == 0)
      goto LABEL_35;
    if (*(_DWORD *)(v2 + 36) != v5)
      goto LABEL_36;
    v40 = v7;
    v13 = *(_QWORD *)(v2 + 56) + 48 * v6;
    v14 = *(_QWORD *)(v13 + 24);
    v42 = *(_QWORD *)(v13 + 16);
    v43 = *(_QWORD *)(v13 + 8);
    v41 = *(_BYTE *)(v13 + 32);
    v15 = *(_QWORD *)(v13 + 40);
    v44 = v4;
    v16 = v4[2];
    v17 = v4[3];
    swift_bridgeObjectRetain(v14);
    swift_bridgeObjectRetain(v15);
    if (v16 >= v17 >> 1)
    {
      sub_10001CEA0(v17 > 1, v16 + 1, 1);
      v4 = v44;
    }
    v4[2] = v16 + 1;
    v18 = &v4[5 * v16];
    v18[4] = v43;
    v18[5] = v42;
    v18[6] = v14;
    *((_BYTE *)v18 + 56) = v41;
    v18[8] = v15;
    v9 = *(_BYTE *)(v2 + 32);
    v10 = 1 << v9;
    if (v6 >= 1 << v9)
      goto LABEL_37;
    v8 = v2 + 64;
    v19 = *(_QWORD *)(v39 + 8 * v12);
    if ((v19 & (1 << v6)) == 0)
      goto LABEL_38;
    v5 = v38;
    if (*(_DWORD *)(v2 + 36) != v38)
      goto LABEL_39;
    v20 = v19 & (-2 << (v6 & 0x3F));
    if (v20)
    {
      v10 = __clz(__rbit64(v20)) | v6 & 0xFFFFFFFFFFFFFFC0;
      v11 = v37;
    }
    else
    {
      v21 = v12 + 1;
      v22 = (v10 + 63) >> 6;
      v11 = v37;
      if (v12 + 1 < v22)
      {
        v23 = *(_QWORD *)(v39 + 8 * v21);
        if (!v23)
        {
          v21 = v12 + 2;
          if (v12 + 2 >= v22)
            goto LABEL_4;
          v23 = *(_QWORD *)(v39 + 8 * v21);
          if (!v23)
          {
            while (v22 - 3 != v12)
            {
              v23 = *(_QWORD *)(v2 + 88 + 8 * v12++);
              if (v23)
              {
                v21 = v12 + 2;
                goto LABEL_17;
              }
            }
            goto LABEL_4;
          }
        }
LABEL_17:
        v10 = __clz(__rbit64(v23)) + (v21 << 6);
      }
    }
LABEL_4:
    v7 = v40 + 1;
    v6 = v10;
    if (v40 + 1 == v11)
    {
      swift_bridgeObjectRelease();
      goto LABEL_24;
    }
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  __break(1u);
}

uint64_t sub_1000085E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 792);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 528);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 800));
  swift_release(v1);
  return swift_task_switch(sub_100004548, v2, 0);
}

uint64_t sub_100008644()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  void *v5;
  id v6;
  uint64_t result;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, _UNKNOWN **);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v1 = type metadata accessor for DispatchPredicate(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin();
  v4 = (uint64_t *)((char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = *(void **)(v0 + OBJC_IVAR____TtC12searchpartyd17TagCommandManager_commandQueue);
  *v4 = v5;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v2 + 104))(v4, enum case for DispatchPredicate.onQueue(_:), v1);
  v6 = v5;
  LOBYTE(v5) = _dispatchPreconditionTest(_:)(v4);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v2 + 8))(v4, v1);
  if ((v5 & 1) != 0)
  {
    v8 = (uint64_t *)(v0 + OBJC_IVAR____TtC12searchpartyd17TagCommandManager_commandManager);
    v9 = *(_QWORD *)(v0 + OBJC_IVAR____TtC12searchpartyd17TagCommandManager_commandManager);
    if (v9)
    {
      v10 = *(_QWORD *)(v0 + OBJC_IVAR____TtC12searchpartyd17TagCommandManager_commandManager);
    }
    else
    {
      v11 = *(uint64_t (**)(uint64_t, _UNKNOWN **))(v0
                                                           + OBJC_IVAR____TtC12searchpartyd17TagCommandManager_commandManagerCreator);
      v12 = *(_QWORD *)(v0 + OBJC_IVAR____TtC12searchpartyd17TagCommandManager_commandManagerCreator + 8);
      swift_retain(v12);
      v10 = v11(v0, &off_1010850A0);
      v14 = v13;
      swift_release(v12);
      v15 = *v8;
      *v8 = v10;
      v8[1] = v14;
      swift_unknownObjectRetain(v10);
      swift_unknownObjectRelease(v15);
      v9 = 0;
    }
    swift_unknownObjectRetain(v9);
    return v10;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100008780()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 152);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 232));
  swift_bridgeObjectRelease();
  return swift_task_switch(sub_1000070D0, v1, 0);
}

uint64_t sub_1000087E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  _QWORD *v3;
  uint64_t (__cdecl *v4)();

  v1 = qword_1010EA5B0;
  swift_retain();
  if (v1 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v0 + 96, 0, 0);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 56, &qword_1010EE220);
  if (*(_QWORD *)(v0 + 80))
  {
    sub_10000F9FC((__int128 *)(v0 + 56), v0 + 16);
    swift_release();
    sub_10001AA44((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
    v4 = (uint64_t (__cdecl *)())((char *)&dword_1010EBC30 + dword_1010EBC30);
    v3 = (_QWORD *)swift_task_alloc(unk_1010EBC34);
    *(_QWORD *)(v0 + 136) = v3;
    *v3 = v0;
    v3[1] = sub_10001E870;
    return v4();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000088E0@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_cachedSharedBeaconRecords);
  *a1 = v2;
  return swift_bridgeObjectRetain(v2);
}

void sub_10000897C(void *a1, int a2, void *aBlock, void (*a4)(void))
{
  void *v6;
  id v7;

  v6 = _Block_copy(aBlock);
  _Block_copy(v6);
  v7 = a1;
  a4();
  _Block_release(v6);
  _Block_release(v6);

}

uint64_t sub_1000089E0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v1 = v0[22];
  v2 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v3 = (_QWORD *)swift_task_alloc(v2);
  v0[23] = v3;
  v4 = sub_10001A9A8(&qword_1010F0B20);
  v0[24] = v4;
  *v3 = v0;
  v3[1] = sub_100008064;
  return unsafeBlocking<A>(_:)(v0 + 15, sub_10001CB10, v1, v4);
}

uint64_t sub_100008A6C()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v1 = v0[22];
  v0[16] = v0[25];
  v2 = (_QWORD *)swift_task_alloc(async function pointer to Sequence.asyncMap<A>(_:)[1]);
  v0[26] = v2;
  v3 = type metadata accessor for UUID(0);
  v4 = sub_1000193A4((unint64_t *)&qword_1011002C0, &qword_1010F0B20, (const char *)&protocol conformance descriptor for [A]);
  *v2 = v0;
  v2[1] = sub_100007184;
  return Sequence.asyncMap<A>(_:)(&unk_101105940, v1, v0[24], v3, v4);
}

uint64_t sub_100008B10(uint64_t a1, uint64_t a2)
{
  uint64_t KeyPath;
  char v4;
  uint64_t result;
  Swift::String v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  KeyPath = swift_getKeyPath(a2);
  sub_100C1BED4(KeyPath, a1);
  if ((v4 & 1) == 0)
    return swift_release(KeyPath);
  v9 = 0;
  v10 = 0xE000000000000000;
  _StringGuts.grow(_:)(40);
  v6._object = (void *)0x8000000100ED5FD0;
  v6._countAndFlagsBits = 0xD000000000000026;
  String.append(_:)(v6);
  v8 = KeyPath;
  v7 = sub_10001A9A8(&qword_101119C78);
  _print_unlocked<A, B>(_:_:)(&v8, &v9, v7, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v9, v10, "searchpartyd/Configuration.swift", 32, 2, 24, 0);
  __break(1u);
  return result;
}

uint64_t sub_100008C00()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD *)(v0 + 24);
  v1 = *(_QWORD *)(v0 + 32);
  v3 = *(_QWORD *)(v0 + 16);
  type metadata accessor for WorkItemQueue.WorkItem(0);
  v4 = swift_allocObject(&unk_10108CD98, 32, 7);
  *(_QWORD *)(v4 + 16) = v3;
  *(_QWORD *)(v4 + 24) = v2;
  v5 = swift_retain(v3);
  UUID.init()(v5);
  v6 = WorkItemQueue.WorkItem.__allocating_init(identifier:block:completion:)(v1, &unk_1011059C8, v4, &unk_1011059D0, 0);
  dispatch thunk of WorkItemQueue.enqueue(_:)();
  swift_release(v6);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100008CBC(uint64_t a1, uint64_t a2, __int128 *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v16;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE v25[24];
  uint64_t v26;
  _BYTE v27[16];

  v18 = *a3;
  v6 = (uint64_t)a3 + 8;
  v7 = *((_QWORD *)a3 + 2);
  v8 = *((_QWORD *)a3 + 4);
  v9 = *((_BYTE *)a3 + 24) & 1;
  v10 = type metadata accessor for UUID(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  XPCSession.identifier.getter(v12);
  swift_beginAccess(a1 + 56, v25, 33, 0);
  sub_100005CF0(v6, (uint64_t)v27, &qword_1010F6350);
  v26 = *((_QWORD *)a3 + 4);
  swift_retain();
  sub_100004A78((uint64_t)v27);
  sub_100004F74(&v26);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(a1 + 56));
  v16 = *(_QWORD *)(a1 + 56);
  v23 = v8;
  v24 = v16;
  *(_QWORD *)(a1 + 56) = 0x8000000000000000;
  v19 = a2;
  v20 = v18;
  v21 = v7;
  v22 = v9;
  sub_100003DD0(&v19, (uint64_t)v14, isUniquelyReferenced_nonNull_native);
  *(_QWORD *)(a1 + 56) = v24;
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
  return swift_endAccess(v25);
}

void sub_100008E14(uint64_t a1, uint64_t a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  id v11;
  uint64_t v12;
  void *v13;

  sub_10001AA44((_QWORD *)(a1 + OBJC_IVAR____TtC12searchpartyd23BeaconSharingTrampoline_implementation), *(_QWORD *)(a1 + OBJC_IVAR____TtC12searchpartyd23BeaconSharingTrampoline_implementation + 24));
  v3 = objc_msgSend((id)objc_opt_self(NSXPCConnection), "currentConnection");
  if (v3)
  {
    v11 = v3;
    v4 = sub_1003080BC(v3);
    swift_release(v4);
    if (v4)
    {
      (*(void (**)(uint64_t, uint64_t, _QWORD))(a2 + 16))(a2, 1, 0);

      return;
    }

  }
  type metadata accessor for SPBeaconSharingError(0);
  v6 = v5;
  v12 = 1;
  v7 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
  v8 = sub_100006C64((unint64_t *)&qword_1010EB490, 255, (uint64_t (*)(uint64_t))type metadata accessor for SPBeaconSharingError, (uint64_t)&unk_100E21930);
  _BridgedStoredNSError.init(_:userInfo:)(&v13, &v12, v7, v6, v8);
  v9 = v13;
  v10 = (void *)_convertErrorToNSError(_:)(v13);
  (*(void (**)(uint64_t, _QWORD, void *))(a2 + 16))(a2, 0, v10);

}

id sub_100008F54(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id result;
  uint64_t v12;
  char **v13;
  int v14;

  v3 = OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor_startCounts;
  v4 = *(_QWORD *)(a1 + OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor_startCounts);
  v5 = __OFADD__(v4, 1);
  v6 = v4 + 1;
  if (v5)
  {
    __break(1u);
  }
  else
  {
    v1 = a1;
    *(_QWORD *)(a1 + OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor_startCounts) = v6;
    v2 = static os_log_type_t.default.getter(a1);
    if (qword_1010E9B88 == -1)
      goto LABEL_3;
  }
  swift_once(&qword_1010E9B88, sub_100356FDC);
LABEL_3:
  v7 = qword_1011B6DD8;
  v8 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v9 = swift_allocObject(v8, 72, 7);
  v10 = *(_QWORD *)(v1 + v3);
  *(_OWORD *)(v9 + 16) = xmmword_100E22B00;
  *(_QWORD *)(v9 + 56) = &type metadata for Int;
  *(_QWORD *)(v9 + 64) = &protocol witness table for Int;
  *(_QWORD *)(v9 + 32) = v10;
  os_log(_:dso:log:_:_:)(v2, &_mh_execute_header, v7, "startCounts = %d", v14);
  result = (id)swift_bridgeObjectRelease();
  if (*(_QWORD *)(v1 + v3) == 1)
  {
    v12 = static os_log_type_t.default.getter(result);
    os_log(_:dso:log:_:_:)(v12, &_mh_execute_header, qword_1011B6DD8, "starting location monitor", 25, 2, _swiftEmptyArrayStorage);
    if (*(_BYTE *)(v1 + OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor_mode))
      v13 = &selRef_startMonitoringSignificantLocationChanges;
    else
      v13 = &selRef_startUpdatingLocation;
    result = objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor_locationManager), *v13);
    *(_BYTE *)(v1 + OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor_locationMonitorStarted) = 1;
  }
  return result;
}

void sub_1000090C8()
{
  uint64_t v0;
  uint64_t v1;
  os_log_type_t v2;
  uint8_t *v3;
  NSObject *oslog;

  if (qword_1010EA098 != -1)
    swift_once(&qword_1010EA098, sub_10098F7D8);
  v0 = type metadata accessor for Logger(0);
  v1 = sub_10001A9E8(v0, (uint64_t)qword_1011B7A18);
  oslog = Logger.logObject.getter(v1);
  v2 = static os_log_type_t.info.getter(oslog);
  if (os_log_type_enabled(oslog, v2))
  {
    v3 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, oslog, v2, "Received notification of FMF data update complete", v3, 2u);
    swift_slowDealloc(v3, -1, -1);
  }

}

uint64_t sub_100009194(uint64_t *a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v3 = v2;
  v29 = a2;
  v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0)
      v7 = *v2;
    else
      v7 = v6 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*v2);
    v8 = swift_retain();
    v9 = __CocoaSet.member(for:)(v8, v7);
    swift_release(a2);
    if (v9)
    {
      swift_bridgeObjectRelease();
      swift_release(a2);
      v27 = v9;
      swift_unknownObjectRetain(v9);
      v10 = sub_10001A9A8((uint64_t *)&unk_10111C390);
      swift_dynamicCast(&v28, &v27, (char *)&type metadata for Swift.AnyObject + 8, v10, 7);
      *a1 = v28;
      swift_unknownObjectRelease(v9);
      return 0;
    }
    result = __CocoaSet.count.getter(v7);
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    v23 = sub_100C80254(v7, result + 1);
    v28 = v23;
    v24 = *(_QWORD *)(v23 + 16);
    if (*(_QWORD *)(v23 + 24) <= v24)
    {
      v26 = v24 + 1;
      swift_retain();
      sub_100A1852C(v26, (uint64_t *)&unk_101110120, (uint64_t *)&unk_10111C390, &qword_1010F78C0);
      v25 = v28;
    }
    else
    {
      v25 = v23;
      swift_retain();
    }
    sub_100C80A98(a2, v25);
    *v3 = v25;
    swift_bridgeObjectRelease();
    *a1 = a2;
    return 1;
  }
  v12 = *(_QWORD *)(v6 + 40);
  swift_bridgeObjectRetain(*v2);
  v13 = sub_10001A9A8((uint64_t *)&unk_10111C390);
  v14 = sub_1000193A4(&qword_1010F78C0, (uint64_t *)&unk_10111C390, (const char *)&protocol conformance descriptor for XPCSession<A>);
  v15 = dispatch thunk of Hashable._rawHashValue(seed:)(v12, v13, v14);
  v16 = -1 << *(_BYTE *)(v6 + 32);
  v17 = v15 & ~v16;
  if (((*(_QWORD *)(v6 + 56 + ((v17 >> 3) & 0xFFFFFFFFFFFFF8)) >> v17) & 1) == 0)
  {
LABEL_11:
    swift_bridgeObjectRelease();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
    v21 = v29;
    v28 = *v2;
    *v2 = 0x8000000000000000;
    v22 = swift_retain();
    sub_10001D02C(v22, v17, isUniquelyReferenced_nonNull_native, (uint64_t *)&unk_101110120, (uint64_t *)&unk_10111C390, &qword_1010F78C0, &qword_101110118);
    *v2 = v28;
    swift_bridgeObjectRelease();
    *a1 = v21;
    return 1;
  }
  v18 = ~v16;
  v19 = sub_1000193A4(&qword_101110118, (uint64_t *)&unk_10111C390, (const char *)&protocol conformance descriptor for XPCSession<A>);
  while (1)
  {
    v28 = *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v17);
    if ((dispatch thunk of static Equatable.== infix(_:_:)(&v28, &v29, v13, v19) & 1) != 0)
      break;
    v17 = (v17 + 1) & v18;
    if (((*(_QWORD *)(v6 + 56 + ((v17 >> 3) & 0xFFFFFFFFFFFFF8)) >> v17) & 1) == 0)
      goto LABEL_11;
  }
  swift_release(a2);
  swift_bridgeObjectRelease();
  *a1 = *(_QWORD *)(*(_QWORD *)(*v2 + 48) + 8 * v17);
  swift_retain();
  return 0;
}

uint64_t sub_100009528()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  void *v5;
  id v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  char *v11;
  uint64_t (*v12)(uint64_t);
  uint64_t v13;
  uint64_t v14;
  _BYTE v15[16];

  v1 = type metadata accessor for DispatchPredicate(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = &v15[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = *(void **)(v0 + OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_clientQueue);
  *v4 = v5;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v2 + 104))(v4, enum case for DispatchPredicate.onQueue(_:), v1);
  v6 = v5;
  LOBYTE(v5) = _dispatchPreconditionTest(_:)(v4);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v2 + 8))(v4, v1);
  if ((v5 & 1) != 0)
  {
    if ((*(_BYTE *)(v0 + OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieServiceState + 8) & 1) != 0)
    {
      v8 = *(_QWORD *)(v0 + OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_clientSessionPool);
      v9 = type metadata accessor for Transaction(0);
      __chkstk_darwin(v9);
      v10 = &v15[-32];
      *(_QWORD *)&v15[-16] = v8;
      *(_QWORD *)&v15[-8] = 0;
      swift_retain(v8);
      v11 = (char *)&type metadata for () + 8;
      v12 = sub_10001D8D8;
    }
    else
    {
      v13 = *(_QWORD *)(v0 + OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieServiceState);
      v8 = *(_QWORD *)(v0 + OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_clientSessionPool);
      v14 = type metadata accessor for Transaction(0);
      __chkstk_darwin(v14);
      v10 = &v15[-32];
      *(_QWORD *)&v15[-16] = v8;
      *(_QWORD *)&v15[-8] = v13;
      swift_retain(v8);
      v11 = (char *)&type metadata for () + 8;
      v12 = sub_100C0DCD4;
    }
    static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd.secureLocations.notifyOfLiteLocStateChange", 72, 2, v12, v10, v11);
    return swift_release(v8);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000096E0(uint64_t a1)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v11;
  int v12;

  v1 = a1;
  v2 = static os_log_type_t.default.getter(a1);
  if (qword_1010E9B88 != -1)
    swift_once(&qword_1010E9B88, sub_100356FDC);
  v3 = qword_1011B6DD8;
  v4 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v5 = swift_allocObject(v4, 72, 7);
  *(_OWORD *)(v5 + 16) = xmmword_100E22B00;
  v12 = v1;
  type metadata accessor for CLAuthorizationStatus(0);
  v7 = String.init<A>(describing:)(&v12, v6);
  v9 = v8;
  *(_QWORD *)(v5 + 56) = &type metadata for String;
  *(_QWORD *)(v5 + 64) = sub_10001AA00();
  *(_QWORD *)(v5 + 32) = v7;
  *(_QWORD *)(v5 + 40) = v9;
  os_log(_:dso:log:_:_:)(v2, &_mh_execute_header, v3, "didChangeAuthorization - %{public}@", 35, 2, v5);
  swift_bridgeObjectRelease(v5);
  sub_10000EAC8(v1);
  v11 = v1;
  return CurrentValueSubject.send(_:)(&v11);
}

uint64_t sub_100009804(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t ObjectType;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD v24[4];

  v4 = sub_10001A9A8(&qword_1010F46C0);
  __chkstk_darwin(v4);
  v6 = (char *)v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for TaskPriority(0);
  v8 = *(_QWORD *)(v7 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v6, 1, 1, v7);
  v9 = (_QWORD *)swift_allocObject(&unk_1010556E8, 48, 7);
  v9[2] = 0;
  v10 = v9 + 2;
  v9[3] = 0;
  v9[4] = a1;
  v9[5] = a2;
  LODWORD(a1) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7);
  v11 = swift_retain();
  if ((_DWORD)a1 == 1)
  {
    sub_100004048((uint64_t)v6, &qword_1010F46C0);
    v12 = 0;
    v13 = 0;
    v14 = 7168;
  }
  else
  {
    v15 = TaskPriority.rawValue.getter(v11);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v6, v7);
    v14 = v15 | 0x1C00;
    v16 = *v10;
    if (*v10)
    {
      v17 = v9[3];
      ObjectType = swift_getObjectType(*v10);
      swift_unknownObjectRetain(v16);
      v12 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v17);
      v13 = v19;
      swift_unknownObjectRelease(v16);
    }
    else
    {
      v12 = 0;
      v13 = 0;
    }
  }
  v20 = swift_allocObject(&unk_101055710, 32, 7);
  *(_QWORD *)(v20 + 16) = &unk_1010EE498;
  *(_QWORD *)(v20 + 24) = v9;
  if (v13 | v12)
  {
    v24[0] = 0;
    v24[1] = 0;
    v21 = v24;
    v24[2] = v12;
    v24[3] = v13;
  }
  else
  {
    v21 = 0;
  }
  v22 = swift_task_create(v14, v21, (char *)&type metadata for () + 8, &unk_1010EE4A0, v20);
  return swift_release(v22);
}

uint64_t sub_1000099E0(uint64_t *a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v3 = v2;
  v29 = a2;
  v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0)
      v7 = *v2;
    else
      v7 = v6 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*v2);
    v8 = swift_retain();
    v9 = __CocoaSet.member(for:)(v8, v7);
    swift_release(a2);
    if (v9)
    {
      swift_bridgeObjectRelease();
      swift_release(a2);
      v27 = v9;
      swift_unknownObjectRetain(v9);
      v10 = sub_10001A9A8((uint64_t *)&unk_1010F7B10);
      swift_dynamicCast(&v28, &v27, (char *)&type metadata for Swift.AnyObject + 8, v10, 7);
      *a1 = v28;
      swift_unknownObjectRelease(v9);
      return 0;
    }
    result = __CocoaSet.count.getter(v7);
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    v23 = sub_100C7FABC(v7, result + 1);
    v28 = v23;
    v24 = *(_QWORD *)(v23 + 16);
    if (*(_QWORD *)(v23 + 24) <= v24)
    {
      v26 = v24 + 1;
      swift_retain();
      sub_100A1852C(v26, (uint64_t *)&unk_10111C3D0, (uint64_t *)&unk_1010F7B10, (unint64_t *)&unk_1010EE140);
      v25 = v28;
    }
    else
    {
      v25 = v23;
      swift_retain();
    }
    sub_100C80798(a2, v25);
    *v3 = v25;
    swift_bridgeObjectRelease();
    *a1 = a2;
    return 1;
  }
  v12 = *(_QWORD *)(v6 + 40);
  swift_bridgeObjectRetain(*v2);
  v13 = sub_10001A9A8((uint64_t *)&unk_1010F7B10);
  v14 = sub_1000193A4((unint64_t *)&unk_1010EE140, (uint64_t *)&unk_1010F7B10, (const char *)&protocol conformance descriptor for XPCSession<A>);
  v15 = dispatch thunk of Hashable._rawHashValue(seed:)(v12, v13, v14);
  v16 = -1 << *(_BYTE *)(v6 + 32);
  v17 = v15 & ~v16;
  if (((*(_QWORD *)(v6 + 56 + ((v17 >> 3) & 0xFFFFFFFFFFFFF8)) >> v17) & 1) == 0)
  {
LABEL_11:
    swift_bridgeObjectRelease();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
    v21 = v29;
    v28 = *v2;
    *v2 = 0x8000000000000000;
    v22 = swift_retain();
    sub_10001D02C(v22, v17, isUniquelyReferenced_nonNull_native, (uint64_t *)&unk_10111C3D0, (uint64_t *)&unk_1010F7B10, (unint64_t *)&unk_1010EE140, &qword_101110230);
    *v2 = v28;
    swift_bridgeObjectRelease();
    *a1 = v21;
    return 1;
  }
  v18 = ~v16;
  v19 = sub_1000193A4(&qword_101110230, (uint64_t *)&unk_1010F7B10, (const char *)&protocol conformance descriptor for XPCSession<A>);
  while (1)
  {
    v28 = *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v17);
    if ((dispatch thunk of static Equatable.== infix(_:_:)(&v28, &v29, v13, v19) & 1) != 0)
      break;
    v17 = (v17 + 1) & v18;
    if (((*(_QWORD *)(v6 + 56 + ((v17 >> 3) & 0xFFFFFFFFFFFFF8)) >> v17) & 1) == 0)
      goto LABEL_11;
  }
  swift_release(a2);
  swift_bridgeObjectRelease();
  *a1 = *(_QWORD *)(*(_QWORD *)(*v2 + 48) + 8 * v17);
  swift_retain();
  return 0;
}

uint64_t sub_100009CE0(uint64_t *a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v3 = v2;
  v29 = a2;
  v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0)
      v7 = *v2;
    else
      v7 = v6 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*v2);
    v8 = swift_retain();
    v9 = __CocoaSet.member(for:)(v8, v7);
    swift_release(a2);
    if (v9)
    {
      swift_bridgeObjectRelease();
      swift_release(a2);
      v27 = v9;
      swift_unknownObjectRetain(v9);
      v10 = sub_10001A9A8(&qword_1010F1580);
      swift_dynamicCast(&v28, &v27, (char *)&type metadata for Swift.AnyObject + 8, v10, 7);
      *a1 = v28;
      swift_unknownObjectRelease(v9);
      return 0;
    }
    result = __CocoaSet.count.getter(v7);
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    v23 = sub_100C8029C(v7, result + 1);
    v28 = v23;
    v24 = *(_QWORD *)(v23 + 16);
    if (*(_QWORD *)(v23 + 24) <= v24)
    {
      v26 = v24 + 1;
      swift_retain();
      sub_100A1852C(v26, &qword_1011101A8, &qword_1010F1580, &qword_1010F1588);
      v25 = v28;
    }
    else
    {
      v25 = v23;
      swift_retain();
    }
    sub_100C80AAC(a2, v25);
    *v3 = v25;
    swift_bridgeObjectRelease();
    *a1 = a2;
    return 1;
  }
  v12 = *(_QWORD *)(v6 + 40);
  swift_bridgeObjectRetain(*v2);
  v13 = sub_10001A9A8(&qword_1010F1580);
  v14 = sub_1000193A4(&qword_1010F1588, &qword_1010F1580, (const char *)&protocol conformance descriptor for XPCSession<A>);
  v15 = dispatch thunk of Hashable._rawHashValue(seed:)(v12, v13, v14);
  v16 = -1 << *(_BYTE *)(v6 + 32);
  v17 = v15 & ~v16;
  if (((*(_QWORD *)(v6 + 56 + ((v17 >> 3) & 0xFFFFFFFFFFFFF8)) >> v17) & 1) == 0)
  {
LABEL_11:
    swift_bridgeObjectRelease();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
    v21 = v29;
    v28 = *v2;
    *v2 = 0x8000000000000000;
    v22 = swift_retain();
    sub_10001D02C(v22, v17, isUniquelyReferenced_nonNull_native, &qword_1011101A8, &qword_1010F1580, &qword_1010F1588, &qword_1011101B0);
    *v2 = v28;
    swift_bridgeObjectRelease();
    *a1 = v21;
    return 1;
  }
  v18 = ~v16;
  v19 = sub_1000193A4(&qword_1011101B0, &qword_1010F1580, (const char *)&protocol conformance descriptor for XPCSession<A>);
  while (1)
  {
    v28 = *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v17);
    if ((dispatch thunk of static Equatable.== infix(_:_:)(&v28, &v29, v13, v19) & 1) != 0)
      break;
    v17 = (v17 + 1) & v18;
    if (((*(_QWORD *)(v6 + 56 + ((v17 >> 3) & 0xFFFFFFFFFFFFF8)) >> v17) & 1) == 0)
      goto LABEL_11;
  }
  swift_release(a2);
  swift_bridgeObjectRelease();
  *a1 = *(_QWORD *)(*(_QWORD *)(*v2 + 48) + 8 * v17);
  swift_retain();
  return 0;
}

uint64_t sub_10000A038()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = v0[22];
  v2 = v0[18];
  v3 = sub_10001B664(v0[27]);
  v0[28] = v3;
  swift_bridgeObjectRelease();
  v4 = (_QWORD *)swift_task_alloc(dword_1011055F4);
  v0[29] = v4;
  *v4 = v0;
  v4[1] = sub_100008780;
  return sub_1000134A0(v3, v2, v1);
}

void sub_10000A0B8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  os_log_type_t v5;
  uint8_t *v6;
  NSObject *oslog;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)(v1 + 184) = a1;
  *(_BYTE *)(v1 + 192) = 0;
  if (qword_1010E9ED8 != -1)
    swift_once(&qword_1010E9ED8, sub_1007116BC);
  v3 = type metadata accessor for Logger(0);
  v4 = sub_10001A9E8(v3, (uint64_t)qword_1011B7598);
  oslog = Logger.logObject.getter(v4);
  v5 = static os_log_type_t.default.getter(oslog);
  if (os_log_type_enabled(oslog, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v6 = 134217984;
    v8 = a1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v8, &v9, v6 + 4, v6 + 12);
    _os_log_impl((void *)&_mh_execute_header, oslog, v5, "Stored last connectable device count %ld.", v6, 0xCu);
    swift_slowDealloc(v6, -1, -1);

  }
  else
  {

  }
}

uint64_t sub_10000A1DC(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  id v8;
  uint64_t v9;
  void *v10;
  uint64_t result;
  int v12;
  _QWORD v13[2];
  uint64_t v14;

  v8 = objc_msgSend(objc_allocWithZone((Class)CLLocationManager), "initWithEffectiveBundle:delegate:onQueue:", a2, a1, *(_QWORD *)(a1 + OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor_queue));
  v9 = OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor_locationManager;
  v10 = *(void **)(a1 + OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor_locationManager);
  *(_QWORD *)(a1 + OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor_locationManager) = v8;

  if ((a4 & 1) == 0)
    objc_msgSend(*(id *)(a1 + v9), "setDesiredAccuracy:", *(double *)&a3);
  if (qword_1010EA1D0 != -1)
    swift_once(&qword_1010EA1D0, sub_100B11444);
  v13[0] = 0x7365547265646E75;
  v13[1] = 0xE900000000000074;
  SynchronousCache.cachedValue<A>(key:computeBlock:)(&v14, v13, sub_10001F628, 0, &type metadata for Bool);
  result = swift_bridgeObjectRelease();
  if ((v14 & 1) == 0)
  {
    v12 = objc_msgSend((id)objc_opt_self(CLLocationManager), "authorizationStatusForBundle:", a2);
    return sub_10000EAC8(v12);
  }
  return result;
}

uint64_t sub_10000A314()
{
  uint64_t v0;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;

  if ((*(_BYTE *)(v0 + 80) & 1) == 0 && *(_QWORD *)(v0 + 40) == *(_QWORD *)(v0 + 32))
    return (*(uint64_t (**)(void))(v0 + 8))();
  if (qword_1010E9ED8 != -1)
    swift_once(&qword_1010E9ED8, sub_1007116BC);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_10001A9E8(v2, (uint64_t)qword_1011B7598);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Updating sessions for connectableDeviceCount changes.", v6, 2u);
    swift_slowDealloc(v6, -1, -1);
  }
  v7 = *(_QWORD *)(v0 + 24);

  return swift_task_switch(sub_10001DA74, v7, 0);
}

_QWORD *sub_10000A430()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  double v8;
  double v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  id v34;
  NSString v35;
  id v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  id v40;
  _QWORD *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  __int128 v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t aBlock[5];
  uint64_t v64;
  __int128 v65[2];
  _QWORD v66[5];

  v62 = type metadata accessor for UnwantedTrackingUserNotification(0);
  __chkstk_darwin(v62);
  v2 = (char *)&v46 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v61 = type metadata accessor for URL(0);
  v60 = *(_QWORD *)(v61 - 8);
  __chkstk_darwin(v61);
  v57 = (char *)&v46 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v59 = type metadata accessor for WildModeAssociationRecord(0);
  v4 = *(_QWORD *)(v59 - 8);
  __chkstk_darwin(v59);
  v58 = (uint64_t)&v46 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = type metadata accessor for Date(0);
  v50 = *(_QWORD *)(v51 - 8);
  __chkstk_darwin(v51);
  v7 = (char *)&v46 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Date.trustedNow.getter((uint64_t)v7);
  if (qword_1010E9D08 != -1)
    swift_once(&qword_1010E9D08, sub_10059A6E0);
  OS_dispatch_queue.sync<A>(execute:)(sub_100003D88, qword_1011B71A8, &type metadata for Configuration);
  sub_10001ED68(aBlock[0]);
  v9 = v8;
  swift_bridgeObjectRelease();
  v10 = sub_10081BF2C();
  v11 = __chkstk_darwin(v10);
  *(&v46 - 4) = v0;
  *((double *)&v46 - 3) = v9 * 60.0;
  v49 = v7;
  *(&v46 - 2) = (uint64_t)v7;
  swift_bridgeObjectRetain(v11);
  v48 = v10;
  v12 = sub_10001CED8((uint64_t (*)(char *))sub_100D82C10, (unint64_t *)&v46 - 6, (uint64_t)v10);
  v13 = *(_QWORD *)(v12 + 16);
  if (v13)
  {
    v14 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
    v47 = v12;
    v15 = v12 + v14;
    v56 = *(_QWORD *)(v0 + 160);
    v16 = type metadata accessor for WildModeAssociationRecord;
    v55 = *(_QWORD *)(v4 + 72);
    v54 = xmmword_100E22B00;
    v53 = 0x8000000100EC5BC0;
    v52 = 0x8000000100EC5B70;
    do
    {
      v17 = static os_log_type_t.default.getter(v12);
      if (qword_1010EA2F8 != -1)
        swift_once(&qword_1010EA2F8, sub_100B5E19C);
      v18 = qword_1011B7DD8;
      v19 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
      v20 = swift_allocObject(v19, 72, 7);
      *(_OWORD *)(v20 + 16) = v54;
      v21 = v58;
      v22 = v16;
      sub_10005972C(v15, v58, v16);
      v23 = String.init<A>(describing:)(v21, v59);
      v25 = v24;
      *(_QWORD *)(v20 + 56) = &type metadata for String;
      *(_QWORD *)(v20 + 64) = sub_10001AA00();
      *(_QWORD *)(v20 + 32) = v23;
      *(_QWORD *)(v20 + 40) = v25;
      os_log(_:dso:log:_:_:)(v17, &_mh_execute_header, v18, "Purged wildModeAssociationRecord %@.", 36, 2, v20);
      swift_bridgeObjectRelease();
      if (qword_1010E99F8 != -1)
        swift_once(&qword_1010E99F8, sub_1001D7F04);
      v26 = v61;
      v27 = sub_10001A9E8(v61, (uint64_t)qword_1011B6A48);
      v28 = v60;
      v29 = v57;
      v30 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v60 + 16))(v57, v27, v26);
      __chkstk_darwin(v30);
      *(&v46 - 4) = v31;
      *(&v46 - 3) = v15;
      *(&v46 - 2) = (uint64_t)v29;
      OS_dispatch_queue.sync<A>(execute:)(sub_100143FA8, &v46 - 6, &type metadata for Bool);
      (*(void (**)(char *, uint64_t))(v28 + 8))(v29, v26);
      if (qword_1010EA140 != -1)
        swift_once(&qword_1010EA140, sub_100A3A528);
      v32 = v62;
      v16 = v22;
      sub_10005972C(v15, (uint64_t)&v2[*(int *)(v62 + 20)], v22);
      *v2 = 2;
      v2[*(int *)(v32 + 24)] = 66;
      v66[3] = v32;
      v66[4] = &off_10105AD10;
      v33 = sub_100018F08(v66);
      sub_10005972C((uint64_t)v2, (uint64_t)v33, type metadata accessor for UnwantedTrackingUserNotification);
      v34 = objc_allocWithZone((Class)UNUserNotificationCenter);
      v35 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      v36 = objc_msgSend(v34, "initWithBundleIdentifier:", v35);

      sub_100030784((uint64_t)v66, (uint64_t)v65);
      v37 = swift_allocObject(&unk_1010C02C8, 64, 7);
      sub_10000F9FC(v65, v37 + 16);
      *(_QWORD *)(v37 + 56) = v36;
      aBlock[4] = (uint64_t)sub_100650B8C;
      v64 = v37;
      aBlock[0] = (uint64_t)_NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = (uint64_t)sub_100BFAAE8;
      aBlock[3] = (uint64_t)&unk_1010C02E0;
      v38 = _Block_copy(aBlock);
      v39 = v64;
      v40 = v36;
      swift_release(v39);
      objc_msgSend(v40, "getDeliveredNotificationsWithCompletionHandler:", v38);
      _Block_release(v38);

      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v66);
      v12 = sub_1000126B0((uint64_t)v2, type metadata accessor for UnwantedTrackingUserNotification);
      v15 += v55;
      --v13;
    }
    while (v13);
    v41 = sub_100D82C60((uint64_t)v48, v47);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v42 = v49;
  }
  else
  {
    v43 = swift_bridgeObjectRelease();
    v44 = static os_log_type_t.debug.getter(v43);
    if (qword_1010EA2F8 != -1)
      swift_once(&qword_1010EA2F8, sub_100B5E19C);
    os_log(_:dso:log:_:_:)(v44, &_mh_execute_header, qword_1011B7DD8, "No records to purge", 19, 2, _swiftEmptyArrayStorage);
    v42 = v49;
    v41 = v48;
  }
  (*(void (**)(char *, uint64_t))(v50 + 8))(v42, v51);
  return v41;
}

uint64_t type metadata accessor for UnwantedTrackingUserNotification(uint64_t a1)
{
  uint64_t result;

  result = qword_1010F1170;
  if (!qword_1010F1170)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for UnwantedTrackingUserNotification);
  return result;
}

uint64_t sub_10000AB5C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v1 = sub_10001A9A8((uint64_t *)&unk_101106E50);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = (uint64_t *)(v0 + v4);
  if (swift_getEnumCaseMultiPayload(v0 + v4, v1) == 1)
  {
    swift_errorRelease(*v6);
  }
  else
  {
    sub_10001BC14(*v6, v6[1]);
    v7 = (char *)v6 + *(int *)(type metadata accessor for LeashRecord(0) + 20);
    v8 = type metadata accessor for UUID(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
    swift_bridgeObjectRelease();
  }
  v9 = (((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  v10 = (v9 + 23) & 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease();
  swift_release(*(_QWORD *)(v0 + v9 + 8));
  swift_release(*(_QWORD *)(v0 + v10));
  return swift_deallocObject(v0, v10 + 8, v3 | 7);
}

uint64_t sub_10000AC60()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;

  if (qword_1010E9938 != -1)
    swift_once(&qword_1010E9938, sub_1000AFBB0);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_10001A9E8(v1, (uint64_t)qword_1011B6748);
  v0[93] = v2;
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "BeaconSharingService: Returning all shares.", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v6 = v0[23];

  v0[16] = &_swiftEmptySetSingleton;
  v0[21] = &_swiftEmptySetSingleton;
  v7 = *(_QWORD *)(v6 + 136);
  v0[94] = v7;
  return swift_task_switch(sub_100004468, v7, 0);
}

uint64_t sub_10000AD64(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  _BYTE v7[24];

  v2 = *a1;
  v3 = a2 + 16;
  swift_beginAccess(a2 + 16, v7, 0, 0);
  result = swift_weakLoadStrong(v3);
  if (result)
  {
    v5 = result;
    type metadata accessor for Transaction(0);
    v6 = swift_allocObject(&unk_10108CD70, 32, 7);
    *(_QWORD *)(v6 + 16) = v5;
    *(_QWORD *)(v6 + 24) = v2;
    swift_retain(v5);
    static Transaction.asyncTask(name:block:)("SimpleBeaconUpdates-connectableDevicesChangedSubject", 52, 2, &unk_1011059B8, v6);
    swift_release(v6);
    return swift_release(v5);
  }
  return result;
}

uint64_t sub_10000AE18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = type metadata accessor for FailableRecordSequence(0, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a4);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(a1, 1, v5);
  if (!(_DWORD)result)
  {
    v7 = type metadata accessor for URL(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(a1, v7);
    swift_release(*(_QWORD *)(a1 + *(int *)(v5 + 36)));
    v8 = a1 + *(int *)(v5 + 40);
    v9 = type metadata accessor for DirectorySequence(0);
    v10 = *(_QWORD *)(v9 - 8);
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9);
    if (!(_DWORD)result)
      return (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 8))(v8, v9);
  }
  return result;
}

uint64_t sub_10000AEE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1008D550C);
}

uint64_t sub_10000AEEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[3];

  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  return swift_getGenericMetadata(a1, v6, a5);
}

uint64_t type metadata accessor for FailableRecordSequence(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10000AEEC(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for FailableRecordSequence);
}

uint64_t sub_10000AF24()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;

  v1 = v0[65];
  if (v1)
  {
    v0[95] = v1;
    v0[62] = v0[64];
    v2 = async function pointer to Sequence.asyncMap<A>(_:)[1];
    swift_bridgeObjectRetain(v1);
    v3 = (_QWORD *)swift_task_alloc(v2);
    v0[96] = v3;
    v4 = sub_10001A9A8((uint64_t *)&unk_1010F7790);
    v5 = sub_1000193A4((unint64_t *)&unk_1011058F0, (uint64_t *)&unk_1010F7790, (const char *)&protocol conformance descriptor for Set<A>);
    *v3 = v0;
    v3[1] = sub_100005230;
    return Sequence.asyncMap<A>(_:)(&unk_1011058E0, v0[66], v4, v0[74], v5);
  }
  else
  {
    v7 = v0[64];
    v0[90] = *(_QWORD *)(v0[67] + 128);
    swift_bridgeObjectRetain(v7);
    v0[91] = sub_100508DAC(v8);
    swift_bridgeObjectRelease();
    return swift_task_switch(sub_1007197D0, 0, 0);
  }
}

uint64_t sub_10000B028(uint64_t a1, uint64_t a2)
{
  void *v2;
  uint64_t v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  uint64_t v9;
  uint8_t *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[6];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19[2];

  if (qword_1010EA098 != -1)
    swift_once(&qword_1010EA098, sub_10098F7D8);
  v5 = type metadata accessor for Logger(0);
  sub_10001A9E8(v5, (uint64_t)qword_1011B7A18);
  v6 = v2;
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.debug.getter(v7);
  if (os_log_type_enabled(v7, v8))
  {
    v17 = a1;
    v9 = a2;
    v10 = (uint8_t *)swift_slowAlloc(12, -1);
    v11 = swift_slowAlloc(32, -1);
    v19[0] = v11;
    *(_DWORD *)v10 = 136315138;
    v13 = *(_QWORD *)&v6[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix];
    v12 = *(_QWORD *)&v6[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix + 8];
    swift_bridgeObjectRetain(v12);
    v18 = sub_100016940(v13, v12, v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, v19, v10 + 4, v10 + 12);

    a2 = v9;
    a1 = v17;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "%s - startMonitoring", v10, 0xCu);
    swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v11, -1, -1);
    swift_slowDealloc(v10, -1, -1);

  }
  else
  {

  }
  v14 = type metadata accessor for Transaction(0);
  __chkstk_darwin(v14);
  v16[2] = v6;
  v16[3] = a1;
  v16[4] = a2;
  return static Transaction.named<A>(_:with:)("com.apple.icloud.searchparty.secureLocations.startMonitoringLiteLocation", 72, 2, sub_10001D9B8, v16, (char *)&type metadata for () + 8);
}

uint64_t sub_10000B240()
{
  unint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  int v8;
  uint64_t v9;

  v0 = sub_10001E084();
  v1 = NSXPCConnection.hasEntitlement<A>(_:)(v0, &type metadata for BeaconSharingEntitlement, v0);
  if (qword_1010E9938 != -1)
    swift_once(&qword_1010E9938, sub_1000AFBB0);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_10001A9E8(v2, (uint64_t)qword_1011B6748);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v6 = 67109120;
    v8 = v1 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v8, &v9, v6 + 4, v6 + 8);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "BeaconSharingService: Received new XPC connection (has entitlement: %{BOOL}d).", v6, 8u);
    swift_slowDealloc(v6, -1, -1);
  }

  return v1 & 1;
}

uint64_t sub_10000B368()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(void **)(v0 + 24);
  v1 = *(_QWORD *)(v0 + 32);
  v3 = *(_QWORD *)(v0 + 16);
  type metadata accessor for WorkItemQueue.WorkItem(0);
  v4 = swift_allocObject(&unk_101081290, 24, 7);
  swift_weakInit(v4 + 16, v3);
  v5 = swift_allocObject(&unk_1010812B8, 32, 7);
  *(_QWORD *)(v5 + 16) = v4;
  *(_QWORD *)(v5 + 24) = v2;
  v6 = v2;
  v7 = swift_retain(v4);
  UUID.init()(v7);
  v8 = WorkItemQueue.WorkItem.__allocating_init(identifier:block:completion:)(v1, &unk_101100288, v5, &unk_101100290, 0);
  swift_release(v4);
  dispatch thunk of WorkItemQueue.enqueue(_:)(v8);
  swift_release(v8);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_10000B458(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t *a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  int64_t v26;
  unint64_t v27;
  uint64_t v28;
  void *v29;
  char v30;
  int64_t v32;
  uint64_t v33;
  uint64_t v35;
  _QWORD v36[5];
  uint64_t v37;

  v4 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v7 = a1;
    else
      v7 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v8 = __CocoaSet.makeIterator()(v7);
    v9 = sub_10001A9A8(a3);
    v10 = sub_1000193A4(a4, a3, (const char *)&protocol conformance descriptor for XPCSession<A>);
    v11 = Set.Iterator.init(_cocoa:)(v36, v8, v9, v10);
    v4 = v36[0];
    v33 = v36[1];
    v12 = v36[2];
    v13 = v36[3];
    v14 = v36[4];
  }
  else
  {
    v15 = -1 << *(_BYTE *)(a1 + 32);
    v33 = a1 + 56;
    v16 = ~v15;
    v17 = -v15;
    if (v17 < 64)
      v18 = ~(-1 << v17);
    else
      v18 = -1;
    v14 = v18 & *(_QWORD *)(a1 + 56);
    swift_bridgeObjectRetain(a1);
    v12 = v16;
    v13 = 0;
  }
  v32 = (unint64_t)(v12 + 64) >> 6;
  if ((v4 & 0x8000000000000000) == 0)
    goto LABEL_14;
LABEL_11:
  v19 = __CocoaSet.Iterator.next()(v11);
  if (v19)
  {
    v20 = v19;
    v35 = v19;
    swift_unknownObjectRetain(v19);
    v21 = sub_10001A9A8(a3);
    swift_dynamicCast(&v37, &v35, (char *)&type metadata for Swift.AnyObject + 8, v21, 7);
    v22 = v37;
    swift_unknownObjectRelease(v20);
    v23 = v13;
    v24 = v14;
    while (v22)
    {
      sub_10000F4A0(0, &qword_1010F7800, NSObject_ptr);
      v29 = (void *)XPCSession.connection.getter();
      v30 = static NSObject.== infix(_:_:)(v29, a2);

      if ((v30 & 1) != 0)
        break;
      v11 = (_QWORD *)swift_release(v22);
      v13 = v23;
      v14 = v24;
      if (v4 < 0)
        goto LABEL_11;
LABEL_14:
      if (v14)
      {
        v24 = (v14 - 1) & v14;
        v25 = __clz(__rbit64(v14)) | (v13 << 6);
        v23 = v13;
      }
      else
      {
        v26 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
          __break(1u);
          return;
        }
        if (v26 >= v32)
          break;
        v27 = *(_QWORD *)(v33 + 8 * v26);
        v23 = v13 + 1;
        if (!v27)
        {
          v23 = v13 + 2;
          if (v13 + 2 >= v32)
            break;
          v27 = *(_QWORD *)(v33 + 8 * v23);
          if (!v27)
          {
            v23 = v13 + 3;
            if (v13 + 3 >= v32)
              break;
            v27 = *(_QWORD *)(v33 + 8 * v23);
            if (!v27)
            {
              v23 = v13 + 4;
              if (v13 + 4 >= v32)
                break;
              v27 = *(_QWORD *)(v33 + 8 * v23);
              if (!v27)
              {
                v23 = v13 + 5;
                if (v13 + 5 >= v32)
                  break;
                v27 = *(_QWORD *)(v33 + 8 * v23);
                if (!v27)
                {
                  v28 = v13 + 6;
                  while (v32 != v28)
                  {
                    v27 = *(_QWORD *)(v33 + 8 * v28++);
                    if (v27)
                    {
                      v23 = v28 - 1;
                      goto LABEL_31;
                    }
                  }
                  break;
                }
              }
            }
          }
        }
LABEL_31:
        v24 = (v27 - 1) & v27;
        v25 = __clz(__rbit64(v27)) + (v23 << 6);
      }
      v22 = *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v25);
      swift_retain();
    }
  }
  sub_10007CC38(v4);
}

uint64_t sub_10000B760()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v1 = v0[97];
  v2 = v0[66];
  v3 = swift_allocObject(&unk_10108CB90, 32, 7);
  v0[99] = v3;
  *(_QWORD *)(v3 + 16) = v2;
  *(_QWORD *)(v3 + 24) = v1;
  v4 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_bridgeObjectRetain(v1);
  swift_retain();
  v5 = (_QWORD *)swift_task_alloc(v4);
  v0[100] = v5;
  v6 = sub_10001A9A8(&qword_1010F0B20);
  *v5 = v0;
  v5[1] = sub_1000085E0;
  return unsafeBlocking<A>(_:)(v0 + 61, sub_10001CB18, v3, v6);
}

uint64_t sub_10000B81C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v20[2];
  uint64_t v21;
  _QWORD aBlock[5];
  _QWORD *v23;
  void *v24;

  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  v21 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20[1] = *(_QWORD *)(a2 + 16);
  v13 = (_QWORD *)swift_allocObject(&unk_10105B328, 40, 7);
  v13[2] = a1;
  v13[3] = a2;
  v13[4] = a3;
  aBlock[4] = sub_10016C838;
  v23 = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_10105B340;
  v14 = _Block_copy(aBlock);
  swift_retain(a1);
  v15 = swift_retain(a2);
  static DispatchQoS.unspecified.getter(v15);
  v24 = &_swiftEmptyArrayStorage;
  v16 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v17 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v18 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v24, v17, v18, v6, v16);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v12, v8, v14);
  _Block_release(v14);
  (*(void (**)(char *, uint64_t))(v21 + 8))(v8, v6);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  return swift_release(v23);
}

uint64_t sub_10000BA2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char *v5;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  _QWORD *v17;
  void *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  _QWORD aBlock[5];
  _QWORD *v30;

  v11 = type metadata accessor for DispatchWorkItemFlags(0);
  v27 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v13 = (char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = type metadata accessor for DispatchQoS(0);
  v14 = *(_QWORD *)(v26 - 8);
  __chkstk_darwin(v26);
  v16 = (char *)&v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = *(_QWORD *)&v5[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_clientQueue];
  v17 = (_QWORD *)swift_allocObject(a3, 40, 7);
  v17[2] = v5;
  v17[3] = a1;
  v17[4] = a2;
  aBlock[4] = a4;
  v30 = v17;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = a5;
  v18 = _Block_copy(aBlock);
  v19 = v5;
  v20 = swift_retain(a2);
  static DispatchQoS.unspecified.getter(v20);
  v28 = &_swiftEmptyArrayStorage;
  v21 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v22 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v23 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v28, v22, v23, v11, v21);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v16, v13, v18);
  _Block_release(v18);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v13, v11);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v26);
  return swift_release(v30);
}

uint64_t sub_10000BC28(void (*a1)(_QWORD))
{
  uint64_t v1;

  a1(*(_QWORD *)(v1 + 16));
  swift_release(*(_QWORD *)(v1 + 24));
  return swift_deallocObject(v1, 32, 7);
}

uint64_t sub_10000BC58@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t result;

  v5 = *(_QWORD *)(a1 + 128);
  swift_retain();
  v6 = sub_10000BCB4(a2);
  result = swift_release(v5);
  *a3 = v6;
  return result;
}

_QWORD *sub_10000BCB4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  void (*v13)(char *, uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  void (*v18)(char *, uint64_t, uint64_t, uint64_t, __n128);
  __n128 v19;
  _QWORD v21[3];
  uint64_t v22;
  void (*v23)(char *, uint64_t, uint64_t, __n128);
  char *v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27[2];
  _QWORD *v28;

  v3 = type metadata accessor for UUID(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v24 = (char *)v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v6);
  v8 = (char *)v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(a1 + 16);
  if (v9)
  {
    v10 = a1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    v11 = *(_QWORD *)(v4 + 72);
    v21[2] = v1;
    v22 = v11;
    v23 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v4 + 16);
    v21[1] = a1;
    v12 = swift_bridgeObjectRetain(a1);
    v28 = _swiftEmptyArrayStorage;
    while (1)
    {
      v23(v8, v10, v3, v12);
      v13 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v4 + 56);
      ((void (*)(char *, _QWORD, uint64_t, uint64_t))v13)(v8, 0, 1, v3);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v8, 1, v3) == 1)
        break;
      v14 = (uint64_t)v24;
      (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v24, v8, v3);
      sub_10080B648(v14, (uint64_t)&v25);
      (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v14, v3);
      if (v26)
      {
        sub_10000F9FC(&v25, (uint64_t)v27);
        sub_10000F9FC(v27, (uint64_t)&v25);
        if ((swift_isUniquelyReferenced_nonNull_native(v28) & 1) == 0)
          v28 = sub_10001BC00(0, v28[2] + 1, 1, v28);
        v16 = v28[2];
        v15 = v28[3];
        if (v16 >= v15 >> 1)
          v28 = sub_10001BC00((_QWORD *)(v15 > 1), v16 + 1, 1, v28);
        v17 = v28;
        v28[2] = v16 + 1;
        sub_10000F9FC(&v25, (uint64_t)&v17[5 * v16 + 4]);
      }
      else
      {
        sub_100004048((uint64_t)&v25, (uint64_t *)&unk_1010EE310);
      }
      v10 += v22;
      if (!--v9)
      {
        v13(v8, 1, 1, v3, v12);
        break;
      }
    }
  }
  else
  {
    v18 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v4 + 56);
    v19 = swift_bridgeObjectRetain(a1);
    v28 = _swiftEmptyArrayStorage;
    v18(v8, 1, 1, v3, v19);
  }
  swift_bridgeObjectRelease();
  return v28;
}

uint64_t sub_10000BF40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t ObjectType;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v20;
  uint64_t v21;
  uint64_t v25;

  v20 = static os_log_type_t.default.getter(a1);
  if (qword_1010EA270 != -1)
    swift_once(&qword_1010EA270, sub_100B5DAF0);
  v4 = qword_1011B7D50;
  v5 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v6 = swift_allocObject(v5, 112, 7);
  *(_OWORD *)(v6 + 16) = xmmword_100E22B10;
  ObjectType = swift_getObjectType(v3);
  v25 = ObjectType;
  v8 = sub_10001A9A8((uint64_t *)&unk_1011169C0);
  v21 = v3;
  v9 = String.init<A>(describing:)(&v25, v8);
  v11 = v10;
  *(_QWORD *)(v6 + 56) = &type metadata for String;
  v12 = sub_10001AA00();
  *(_QWORD *)(v6 + 32) = v9;
  *(_QWORD *)(v6 + 40) = v11;
  *(_QWORD *)(v6 + 96) = &type metadata for String;
  *(_QWORD *)(v6 + 104) = v12;
  *(_QWORD *)(v6 + 64) = v12;
  *(_QWORD *)(v6 + 72) = 0xD00000000000001FLL;
  *(_QWORD *)(v6 + 80) = 0x8000000100ED8620;
  os_log(_:dso:log:_:_:)(v20, &_mh_execute_header, v4, "%{public}@: %{public}@", 22, 2, v6);
  v13 = swift_bridgeObjectRelease();
  v14 = static os_log_type_t.default.getter(v13);
  if (qword_1010EA248 != -1)
    swift_once(&qword_1010EA248, sub_100B5D8FC);
  v15 = qword_1011B7D28;
  v16 = swift_allocObject(v5, 112, 7);
  *(_OWORD *)(v16 + 16) = xmmword_100E22B10;
  v25 = ObjectType;
  v17 = String.init<A>(describing:)(&v25, v8);
  *(_QWORD *)(v16 + 56) = &type metadata for String;
  *(_QWORD *)(v16 + 64) = v12;
  *(_QWORD *)(v16 + 32) = v17;
  *(_QWORD *)(v16 + 40) = v18;
  *(_QWORD *)(v16 + 96) = &type metadata for String;
  *(_QWORD *)(v16 + 104) = v12;
  *(_QWORD *)(v16 + 72) = 0xD00000000000001FLL;
  *(_QWORD *)(v16 + 80) = 0x8000000100ED8620;
  os_log(_:dso:log:_:_:)(v14, &_mh_execute_header, v15, "%{public}@: %{public}s", 22, 2, v16);
  swift_bridgeObjectRelease();
  sub_10001AA44((_QWORD *)(v21 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation), *(_QWORD *)(v21 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24));
  return sub_10000F4D8(a1, a2, a3);
}

uint64_t sub_10000C16C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v25[2];
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD aBlock[6];

  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  v28 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS(0);
  v26 = *(_QWORD *)(v9 - 8);
  v27 = v9;
  __chkstk_darwin(v9);
  v11 = (char *)v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10001A9A8((uint64_t *)&unk_101105910);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(_QWORD *)(v13 + 64);
  __chkstk_darwin(v12);
  v15 = (char *)v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25[1] = *(_QWORD *)(a2 + 64);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a1, v12);
  v16 = *(unsigned __int8 *)(v13 + 80);
  v17 = (v16 + 32) & ~v16;
  v18 = swift_allocObject(&unk_10108CCA8, v17 + v14, v16 | 7);
  *(_QWORD *)(v18 + 16) = a2;
  *(_QWORD *)(v18 + 24) = a3;
  (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(v18 + v17, v15, v12);
  aBlock[4] = sub_10001D968;
  aBlock[5] = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_10108CCC0;
  v19 = _Block_copy(aBlock);
  v20 = swift_retain();
  static DispatchQoS.unspecified.getter(v20);
  v29 = _swiftEmptyArrayStorage;
  v21 = sub_100006C64((unint64_t *)&qword_1010F0E50, 255, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v22 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v23 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v29, v22, v23, v6, v21);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v11, v8, v19);
  _Block_release(v19);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v8, v6);
  (*(void (**)(char *, uint64_t))(v26 + 8))(v11, v27);
  return swift_release();
}

uint64_t sub_10000C3DC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, uint64_t, uint64_t);
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t, uint64_t, uint64_t);
  char *v33;
  uint64_t v34;
  void (*v35)(char *, uint64_t);
  uint64_t v36;
  void (*v37)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t result;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t *v51;

  v51 = a2;
  v3 = sub_10001A9A8((uint64_t *)&unk_1010F77A0);
  __chkstk_darwin(v3);
  v50 = (char *)&v42 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10001A9A8((uint64_t *)&unk_1011057F0);
  v49 = *(_QWORD *)(v5 - 8);
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v48 = (uint64_t)&v42 - v9;
  v10 = type metadata accessor for URL(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v45 = (char *)&v42 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v12);
  v16 = (char *)&v42 - v15;
  __chkstk_darwin(v14);
  v18 = (char *)&v42 - v17;
  v19 = sub_10001A9A8(&qword_1010FB1F0);
  v20 = __chkstk_darwin(v19);
  v22 = (char *)&v42 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v47 = (uint64_t)&v42 - v23;
  v44 = *(_QWORD *)(*(_QWORD *)(a1 + 128) + 160);
  if (qword_1010E9A98 != -1)
    swift_once(&qword_1010E9A98, sub_1001FFA50);
  v24 = sub_10001A9E8(v10, (uint64_t)qword_1011B6C00);
  v25 = v11;
  v26 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  v26(v18, v24, v10);
  v26(v16, (uint64_t)v18, v10);
  v27 = *(int *)(v5 + 40);
  v46 = v18;
  v28 = &v8[v27];
  v42 = &v8[v27];
  v29 = type metadata accessor for DirectorySequence(0);
  v30 = v5;
  v43 = v5;
  v31 = v29;
  v32 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56);
  v32(v28, 1, 1, v29);
  v26(v8, (uint64_t)v16, v10);
  v33 = v45;
  *(_QWORD *)&v8[*(int *)(v30 + 36)] = v44;
  v26(v33, (uint64_t)v16, v10);
  swift_retain();
  v34 = (uint64_t)v50;
  DirectorySequence.init(at:includingPropertiesForKeys:options:)(v33, 0, 0);
  v35 = *(void (**)(char *, uint64_t))(v25 + 8);
  v35(v16, v10);
  v32((char *)v34, 0, 1, v31);
  sub_10000C778(v34, (uint64_t)v42);
  v36 = v48;
  sub_100005CF0((uint64_t)v8, v48, (uint64_t *)&unk_1011057F0);
  v37 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v49 + 56);
  v38 = v43;
  v37(v22, 1, 1, v43);
  sub_100004048((uint64_t)v22, &qword_101105800);
  sub_100005CF0(v36, (uint64_t)v22, (uint64_t *)&unk_1011057F0);
  v37(v22, 0, 1, v38);
  v39 = v47;
  sub_100005CF0((uint64_t)v22, v47, &qword_1010FB1F0);
  v35(v46, v10);
  v40 = sub_100010220(v39);
  result = sub_100004048(v39, &qword_1010FB1F0);
  *v51 = v40;
  return result;
}

uint64_t sub_10000C76C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1008D55B8);
}

uint64_t sub_10000C778(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001A9A8((uint64_t *)&unk_1010F77A0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_10000C7C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v22[2];
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD aBlock[5];
  uint64_t v28;

  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v25 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  v23 = *(_QWORD *)(v7 - 8);
  v24 = v7;
  __chkstk_darwin(v7);
  v9 = (char *)v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10001A9A8(&qword_101105AA0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  __chkstk_darwin(v10);
  v22[1] = *(_QWORD *)(a2 + 64);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))((char *)v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v10);
  v13 = *(unsigned __int8 *)(v11 + 80);
  v14 = (v13 + 24) & ~v13;
  v15 = swift_allocObject(&unk_10108D0E0, v14 + v12, v13 | 7);
  *(_QWORD *)(v15 + 16) = a2;
  (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(v15 + v14, (char *)v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v10);
  aBlock[4] = sub_10001D974;
  v28 = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_10108D0F8;
  v16 = _Block_copy(aBlock);
  v17 = swift_retain();
  static DispatchQoS.unspecified.getter(v17);
  v26 = _swiftEmptyArrayStorage;
  v18 = sub_100006C64((unint64_t *)&qword_1010F0E50, 255, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v19 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v20 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v26, v19, v20, v4, v18);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v9, v6, v16);
  _Block_release(v16);
  (*(void (**)(char *, uint64_t))(v25 + 8))(v6, v4);
  (*(void (**)(char *, uint64_t))(v23 + 8))(v9, v24);
  return swift_release(v28);
}

uint64_t sub_10000CA2C(uint64_t a1, char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  _QWORD *v15;
  void *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v23[2];
  uint64_t v24;
  _QWORD aBlock[5];
  _QWORD *v26;
  _QWORD *v27;

  v8 = type metadata accessor for DispatchWorkItemFlags(0);
  v24 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v10 = (char *)v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23[1] = *(_QWORD *)&a2[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_clientQueue];
  v15 = (_QWORD *)swift_allocObject(&unk_1010B4D58, 48, 7);
  v15[2] = a2;
  v15[3] = a1;
  v15[4] = a3;
  v15[5] = a4;
  aBlock[4] = sub_10001D9AC;
  v26 = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_1010B4D70;
  v16 = _Block_copy(aBlock);
  v17 = a2;
  swift_retain();
  v18 = swift_retain();
  static DispatchQoS.unspecified.getter(v18);
  v27 = _swiftEmptyArrayStorage;
  v19 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v20 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v21 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v27, v20, v21, v8, v19);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v14, v10, v16);
  _Block_release(v16);
  (*(void (**)(char *, uint64_t))(v24 + 8))(v10, v8);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  return swift_release(v26);
}

uint64_t sub_10000CC48()
{
  void *v0;
  id v1;
  unsigned int v2;
  id v3;
  NSString v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  double v11;
  double v12;
  double v13;
  double v14;
  void *v15;
  void *v16;
  void *v17;
  id v18;

  v1 = objc_msgSend((id)objc_opt_self(FMSystemInfo), "sharedInstance");
  v2 = objc_msgSend(v1, "isInternalBuild");

  if (v2)
  {
    v3 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
    v4 = String._bridgeToObjectiveC()();
    v5 = objc_msgSend(v3, "BOOLForKey:", v4);

    if (v5)
    {
      v7 = static os_log_type_t.default.getter(v6);
      v8 = sub_10000F4A0(0, (unint64_t *)&qword_1010ED8F0, OS_os_log_ptr);
      v9 = (id)static OS_os_log.default.getter(v8);
      os_log(_:dso:log:_:_:)(v7, &_mh_execute_header, v9, "SystemInfo simulating all locations in Korea.", 45, 2, _swiftEmptyArrayStorage);
      v10 = 1;
LABEL_12:

      return v10;
    }
  }
  objc_msgSend(v0, "coordinate");
  v12 = v11;
  objc_msgSend(v0, "coordinate");
  v14 = v13;
  if (qword_1010E9AD8 != -1)
    swift_once(&qword_1010E9AD8, sub_100264FD8);
  if (objc_msgSend((id)qword_1010F46A8, "containsCoordinate:", v12, v14))
  {
    v15 = (void *)qword_1010F46B0;
    if (qword_1010F46B0)
    {
      v9 = (id)qword_1010F46B0;
    }
    else
    {
      v16 = (void *)sub_100265274();
      v17 = (void *)qword_1010F46B0;
      qword_1010F46B0 = (uint64_t)v16;
      v9 = v16;

      v15 = 0;
    }
    v18 = v15;
    v10 = (uint64_t)objc_msgSend(v9, "containsCoordinate:", v12, v14);
    goto LABEL_12;
  }
  return 0;
}

uint64_t destroy for LocationFetchContext(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[2]);
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[4]);
  swift_bridgeObjectRelease(a1[6]);
  return swift_bridgeObjectRelease(a1[8]);
}

uint64_t sub_10000CE84(void *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  void *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  id v28;
  id v29;
  _QWORD *v30;
  NSObject *v31;
  os_log_type_t v32;
  uint64_t v33;
  id v34;
  id v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD aBlock[5];
  uint64_t v47;
  uint64_t v48;
  uint64_t v49[2];

  v5 = type metadata accessor for DispatchWorkItemFlags(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v43 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_10030842C(a1);
  if (v13)
  {
    v44 = *(_QWORD *)(v2 + 64);
    sub_100005CF0(a2 + 8, (uint64_t)v49, &qword_1010F6350);
    v48 = *(_QWORD *)(a2 + 32);
    v14 = swift_allocObject(&unk_10108C7D0, 72, 7);
    *(_QWORD *)(v14 + 16) = v2;
    *(_QWORD *)(v14 + 24) = v13;
    v15 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(v14 + 32) = *(_OWORD *)a2;
    *(_OWORD *)(v14 + 48) = v15;
    *(_QWORD *)(v14 + 64) = *(_QWORD *)(a2 + 32);
    aBlock[4] = sub_10001D95C;
    v47 = v14;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100016FB8;
    aBlock[3] = &unk_10108C7E8;
    v16 = _Block_copy(aBlock);
    swift_retain();
    swift_retain();
    sub_100004A78((uint64_t)v49);
    v17 = sub_100004F74(&v48);
    static DispatchQoS.unspecified.getter(v17);
    v45 = _swiftEmptyArrayStorage;
    v18 = v13;
    v19 = sub_100006C64((unint64_t *)&qword_1010F0E50, 255, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v20 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v43 = v9;
    v21 = v6;
    v22 = v20;
    v23 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
    v24 = v19;
    v13 = v18;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v45, v22, v23, v5, v24);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v12, v8, v16);
    _Block_release(v16);
    (*(void (**)(char *, uint64_t))(v21 + 8))(v8, v5);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v43);
    swift_release(v47);
  }
  else
  {
    if (qword_1010E9ED8 != -1)
      swift_once(&qword_1010E9ED8, sub_1007116BC);
    v25 = type metadata accessor for Logger(0);
    sub_10001A9E8(v25, (uint64_t)qword_1011B7598);
    v26 = *(_QWORD *)(a2 + 8);
    v27 = *(_QWORD *)(a2 + 16);
    aBlock[0] = *(_QWORD *)(a2 + 32);
    swift_bridgeObjectRetain(v27);
    v28 = a1;
    sub_100004F74(aBlock);
    v29 = v28;
    swift_bridgeObjectRetain(v27);
    v30 = sub_100004F74(aBlock);
    v31 = Logger.logObject.getter(v30);
    v32 = static os_log_type_t.error.getter(v31);
    if (os_log_type_enabled(v31, v32))
    {
      v33 = swift_slowAlloc(22, -1);
      v43 = swift_slowAlloc(64, -1);
      v49[0] = v43;
      *(_DWORD *)v33 = 136446466;
      v34 = objc_msgSend(v29, "debugDescription");
      v44 = 0;
      v35 = v34;
      v36 = static String._unconditionallyBridgeFromObjectiveC(_:)(v34);
      v38 = v37;

      v48 = sub_100016940(v36, v38, v49);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, v49, v33 + 4, v33 + 12);

      swift_bridgeObjectRelease();
      *(_WORD *)(v33 + 12) = 2082;
      if (v27)
        v39 = v26;
      else
        v39 = 0x6E776F6E6B6E75;
      if (v27)
        v40 = v27;
      else
        v40 = 0xE700000000000000;
      swift_bridgeObjectRetain(v27);
      v48 = sub_100016940(v39, v40, v49);
      v13 = v44;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, v49, v33 + 14, v33 + 22);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1001AE6D8(aBlock);
      swift_bridgeObjectRelease();
      sub_1001AE6D8(aBlock);
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "Failed to add connection %{public}s, bundle: %{public}s.", (uint8_t *)v33, 0x16u);
      v41 = v43;
      swift_arrayDestroy(v43, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v41, -1, -1);
      swift_slowDealloc(v33, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease();

      sub_1001AE6D8(aBlock);
      swift_bridgeObjectRelease();
      sub_1001AE6D8(aBlock);
    }

  }
  return v13;
}

uint64_t sub_10000D338()
{
  uint64_t v0;
  unsigned int v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint64_t v9;
  _BOOL4 v11;
  unsigned __int8 v12[31];
  BOOL v13[9];

  OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_10001E92C, v0, *(_QWORD *)(v0 + 112), (char *)&type metadata for () + 8, &type metadata for Bool);
  v1 = v12[0];
  if (qword_1010EA640 != -1)
    swift_once(&qword_1010EA640, sub_100DFC940);
  v2 = *(_QWORD *)(qword_1011B8588 + 24);
  v3 = swift_retain(v2);
  AnyCurrentValuePublisher.value.getter(v12, v3);
  swift_release(v2);
  v4 = v12[0];
  v13[0] = v12[0] == 1;
  if (qword_1010EA098 != -1)
    swift_once(&qword_1010EA098, sub_10098F7D8);
  v5 = type metadata accessor for Logger(0);
  v6 = sub_10001A9E8(v5, (uint64_t)qword_1011B7A18);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.default.getter(v7);
  if (os_log_type_enabled(v7, v8))
  {
    v9 = swift_slowAlloc(14, -1);
    *(_DWORD *)v9 = 67109376;
    *(_DWORD *)v12 = v1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v12, &v12[4], v9 + 4, v9 + 8);
    *(_WORD *)(v9 + 8) = 1024;
    swift_beginAccess(v13, v12, 0, 0);
    v11 = v13[0];
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v11, v12, v9 + 10, v9 + 14);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "LocationSharing: isMyLocationEnabled %{BOOL}d isThisMeDevice %{BOOL}d", (uint8_t *)v9, 0xEu);
    swift_slowDealloc(v9, -1, -1);
  }

  if (v4 == 1)
    return v1;
  else
    return 0;
}

uint64_t sub_10000D50C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  void (*v6)(uint64_t, unint64_t, uint64_t);
  uint64_t v7;
  void (*v8)(uint64_t, _QWORD, uint64_t, uint64_t);
  unsigned int (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v20)(uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t, uint64_t, uint64_t);
  uid_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v1 = *(_QWORD *)(v0 + 192);
  *(_QWORD *)(v0 + 576) = v1;
  v2 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v0 + 584) = v2;
  if (!v2)
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 424) + 56))(*(_QWORD *)(v0 + 528), 1, 1, *(_QWORD *)(v0 + 416));
LABEL_5:
    swift_bridgeObjectRelease();
    swift_release();
    v10 = *(_QWORD *)(v0 + 520);
    v11 = *(_QWORD *)(v0 + 504);
    v12 = *(_QWORD *)(v0 + 512);
    v14 = *(_QWORD *)(v0 + 480);
    v13 = *(_QWORD *)(v0 + 488);
    v16 = *(_QWORD *)(v0 + 464);
    v15 = *(_QWORD *)(v0 + 472);
    v18 = *(_QWORD *)(v0 + 448);
    v17 = *(_QWORD *)(v0 + 456);
    v28 = *(_QWORD *)(v0 + 440);
    v29 = *(_QWORD *)(v0 + 408);
    v30 = *(_QWORD *)(v0 + 392);
    v31 = *(_QWORD *)(v0 + 368);
    v32 = *(_QWORD *)(v0 + 360);
    v33 = *(_QWORD *)(v0 + 336);
    v34 = *(_QWORD *)(v0 + 328);
    v35 = *(_QWORD *)(v0 + 312);
    v36 = *(_QWORD *)(v0 + 288);
    v37 = *(_QWORD *)(v0 + 264);
    swift_task_dealloc(*(_QWORD *)(v0 + 528));
    swift_task_dealloc(v10);
    swift_task_dealloc(v12);
    swift_task_dealloc(v11);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    swift_task_dealloc(v36);
    swift_task_dealloc(v37);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v3 = *(_QWORD *)(v0 + 416);
  v4 = *(_QWORD *)(v0 + 424);
  v5 = *(_DWORD *)(v4 + 80);
  *(_DWORD *)(v0 + 704) = v5;
  *(_QWORD *)(v0 + 592) = *(_QWORD *)(v4 + 72);
  v6 = *(void (**)(uint64_t, unint64_t, uint64_t))(v4 + 16);
  *(_QWORD *)(v0 + 600) = v6;
  *(_OWORD *)(v0 + 608) = 0u;
  v7 = *(_QWORD *)(v0 + 528);
  v6(v7, v1 + ((v5 + 32) & ~(unint64_t)v5), v3);
  v8 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v4 + 56);
  *(_QWORD *)(v0 + 624) = v8;
  v8(v7, 0, 1, v3);
  v9 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48);
  *(_QWORD *)(v0 + 632) = v9;
  if (v9(v7, 1, v3) == 1)
    goto LABEL_5;
  v20 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 600);
  v21 = *(_QWORD *)(v0 + 528);
  v22 = *(_QWORD *)(v0 + 488);
  v23 = *(_QWORD *)(v0 + 416);
  v25 = *(_QWORD *)(v0 + 400);
  v24 = *(_QWORD *)(v0 + 408);
  v26 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 424) + 32);
  *(_QWORD *)(v0 + 640) = v26;
  v26(v22, v21, v23);
  v27 = getuid();
  sub_100A06500(v27);
  v20(v24 + *(int *)(v25 + 20), v22, v23);
  return swift_task_switch(sub_100823C5C, *(_QWORD *)(v0 + 560), 0);
}

uint64_t sub_10000D788()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 24) = v0;
  *(_QWORD *)(v1 + 32) = *v0;
  return swift_task_switch(sub_100013768, 0, 0);
}

uint64_t sub_10000D7A8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 336);
  *(_QWORD *)(v0 + 408) = sub_10001EDD0();
  return swift_task_switch(sub_10001DC6C, v1, 0);
}

uint64_t sub_10000D7F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v7 + 15) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(_QWORD *)(v0 + v6));
  swift_release(*(_QWORD *)(v0 + v7));
  swift_release(*(_QWORD *)(v0 + v8 + 8));
  return swift_deallocObject(v0, v8 + 16, v5);
}

uint64_t sub_10000D890()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v24;

  v1 = (int *)type metadata accessor for OwnedBeaconRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = v0 + v4;
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v7 = v0 + v4 + v1[5];
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v10(v7, v8);
  v11 = v0 + v4 + v1[6];
  v12 = type metadata accessor for StableIdentifier(0);
  switch(swift_getEnumCaseMultiPayload(v11, v12))
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v10(v11, v8);
      v24 = v5;
      sub_10001A9A8(&qword_101106F40);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v10(v11, v8);
      v24 = v5;
      sub_10001A9A8((uint64_t *)&unk_1010F46F0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      v5 = v24;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }
  v13 = v6 + v1[7];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v13, 1, v8))
    v10(v13, v8);
  v14 = v6 + v1[8];
  v15 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v14, v15);
  sub_10001BC14(*(_QWORD *)(v6 + v1[9]), *(_QWORD *)(v6 + v1[9] + 8));
  v16 = (uint64_t *)(v6 + v1[10]);
  v17 = v16[1];
  if (v17 >> 60 != 15)
    sub_10001BC14(*v16, v17);
  v18 = (uint64_t *)(v6 + v1[11]);
  v19 = v18[1];
  if (v19 >> 60 != 15)
    sub_10001BC14(*v18, v19);
  v20 = (v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v21 = (v20 + 23) & 0xFFFFFFFFFFFFFFF8;
  v22 = (v21 + 15) & 0xFFFFFFFFFFFFFFF8;
  sub_10001BC14(*(_QWORD *)(v6 + v1[12]), *(_QWORD *)(v6 + v1[12] + 8));
  sub_10001BC14(*(_QWORD *)(v6 + v1[13]), *(_QWORD *)(v6 + v1[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release(*(_QWORD *)(v0 + v20 + 8));
  swift_release(*(_QWORD *)(v0 + v21));
  swift_release(*(_QWORD *)(v0 + v22));
  return swift_deallocObject(v0, v22 + 8, v3 | 7);
}

uint64_t sub_10000DB60()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);

  v1 = type metadata accessor for OwnerSharingCircle(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  v7 = v0 + v4;
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v8 = v0 + v4 + *(int *)(v1 + 20);
  v9 = type metadata accessor for UUID(0);
  v10 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8);
  v10(v8, v9);
  v10(v7 + *(int *)(v1 + 24), v9);
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10000DC24()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10000DCA0(uint64_t a1)
{
  uint64_t v1;

  swift_release(*(_QWORD *)(v1 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v1 + 32));
  return swift_deallocObject(v1, a1, 7);
}

uint64_t sub_10000DCD8()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v3;

  v1 = *v0;
  v3 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 56));
  return (*(uint64_t (**)(_QWORD))(v3 + 8))(*(_QWORD *)(v1 + 16));
}

uint64_t sub_10000DD20()
{
  uint64_t v0;
  _QWORD *v1;
  _BYTE v3[24];

  v1 = (_QWORD *)(v0 + OBJC_IVAR____TtC12searchpartyd20CloudStorageDatabase_connectionPair);
  swift_beginAccess(v0 + OBJC_IVAR____TtC12searchpartyd20CloudStorageDatabase_connectionPair, v3, 0, 0);
  return swift_retain(*v1);
}

void sub_10000DD68(_BYTE *a1, void (*a2)(_QWORD))
{
  void *v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;

  v4 = *(void **)&a1[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_dataClient];
  *(_QWORD *)&a1[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_dataClient] = 0;

  a1[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_isFindMyServiceConnectedToStewie] = 0;
  a2(0);
  if (qword_1010EA098 != -1)
    swift_once(&qword_1010EA098, sub_10098F7D8);
  v5 = type metadata accessor for Logger(0);
  sub_10001A9E8(v5, (uint64_t)qword_1011B7A18);
  v12 = a1;
  v6 = Logger.logObject.getter(v12);
  v7 = static os_log_type_t.default.getter(v6);
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = swift_slowAlloc(32, -1);
    v14 = v9;
    *(_DWORD *)v8 = 136315138;
    v10 = *(_QWORD *)&v12[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix];
    v11 = *(_QWORD *)&v12[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix + 8];
    swift_bridgeObjectRetain(v11);
    v13 = sub_100016940(v10, v11, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v13, &v14, v8 + 4, v8 + 12);

    swift_bridgeObjectRelease(v11);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "%s - stopped monitor", v8, 0xCu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

  }
  else
  {

  }
}

uint64_t sub_10000DF54()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  uint64_t v7;
  uint64_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v16;

  if (qword_1010E9ED8 != -1)
    swift_once(&qword_1010E9ED8, sub_1007116BC);
  v1 = v0[97];
  v2 = type metadata accessor for Logger(0);
  v0[98] = sub_10001A9E8(v2, (uint64_t)qword_1011B7598);
  v3 = swift_bridgeObjectRetain_n(v1, 2);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.debug.getter(v4);
  v6 = os_log_type_enabled(v4, v5);
  v7 = v0[97];
  if (v6)
  {
    v8 = v0[74];
    v9 = (uint8_t *)swift_slowAlloc(12, -1);
    v10 = swift_slowAlloc(32, -1);
    v16 = v10;
    *(_DWORD *)v9 = 136315138;
    swift_bridgeObjectRetain(v7);
    v12 = Array.description.getter(v11, v8);
    v14 = v13;
    swift_bridgeObjectRelease();
    v0[63] = sub_100016940(v12, v14, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 63, v0 + 64, v9 + 4, v9 + 12);
    swift_bridgeObjectRelease_n(v7, 2);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "receivedSimpleBeaconUpdates - updating beacon identifiers: %s", v9, 0xCu);
    swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v9, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v7, 2);
  }
  return swift_task_switch(sub_10000B760, v0[66], 0);
}

uint64_t sub_10000E13C()
{
  id v0;
  unsigned int v1;
  uint64_t v2;
  id v3;
  NSString v4;
  unsigned int v5;
  uint64_t v6;
  void *v7;
  uint64_t result;
  void *v9;
  id v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char v14;

  v0 = objc_msgSend((id)objc_opt_self(FMSystemInfo), "sharedInstance");
  v1 = objc_msgSend(v0, "isInternalBuild");

  if (v1)
  {
    v3 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
    v4 = String._bridgeToObjectiveC()();
    v5 = objc_msgSend(v3, "BOOLForKey:", v4);

    if (v5)
    {
      v6 = static os_log_type_t.default.getter(v2);
      sub_100253E58();
      v7 = (void *)static OS_os_log.default.getter();
      os_log(_:dso:log:_:_:)(v6, &_mh_execute_header, v7, "SystemInfo simulating Korea SKU device.", 39, 2, &_swiftEmptyArrayStorage);

      return 1;
    }
  }
  result = (uint64_t)(id)MobileGestalt_get_current_device(v2);
  if (result)
  {
    v9 = (void *)result;
    v10 = (id)MobileGestalt_copy_regionCode_obj();

    if (v10)
    {
      v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
      v13 = v12;

      if (v11 == 18507 && v13 == 0xE200000000000000)
      {
        swift_bridgeObjectRelease(0xE200000000000000);
        return 1;
      }
    }
    else
    {
      v11 = 0;
      v13 = 0xE000000000000000;
    }
    v14 = _stringCompareWithSmolCheck(_:_:expecting:)(v11, v13, 18507, 0xE200000000000000, 0);
    swift_bridgeObjectRelease(v13);
    return v14 & 1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10000E2EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;

  v1 = *(_QWORD *)(v0 + 176);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
  if (v1)
  {
    if (qword_1010E9ED8 != -1)
      swift_once(&qword_1010E9ED8, sub_1007116BC);
    v2 = *(_QWORD *)(v0 + 144);
    v3 = type metadata accessor for Logger(0);
    sub_10001A9E8(v3, (uint64_t)qword_1011B7598);
    swift_bridgeObjectRetain(v2);
    v5 = Logger.logObject.getter(v4);
    v6 = static os_log_type_t.default.getter(v5);
    if (os_log_type_enabled(v5, v6))
    {
      v7 = *(_QWORD *)(v0 + 160);
      v8 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v8 = 134217984;
      *(_QWORD *)(v0 + 136) = v7;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 136, v0 + 144, v8 + 4, v8 + 12);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Updating all beacons for %ld session(s).", v8, 0xCu);
      swift_slowDealloc(v8, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease();
    }

    return swift_task_switch(sub_1000089E0, *(_QWORD *)(v0 + 176), 0);
  }
  else
  {
    if (qword_1010E9ED8 != -1)
      swift_once(&qword_1010E9ED8, sub_1007116BC);
    v9 = type metadata accessor for Logger(0);
    v10 = sub_10001A9E8(v9, (uint64_t)qword_1011B7598);
    v11 = Logger.logObject.getter(v10);
    v12 = static os_log_type_t.error.getter(v11);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Unable to get BeaconStore.", v13, 2u);
      swift_slowDealloc(v13, -1, -1);
    }

    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

void sub_10000E580(void *a1, void (**a2)(_QWORD, _QWORD, _QWORD))
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  void *v8;
  id v9;
  void *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  void *v15;
  unint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  void *v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  char v27;

  v4 = sub_10001A9A8(&qword_1010F46C0);
  __chkstk_darwin(v4);
  v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = swift_allocObject(&unk_101079910, 24, 7);
  *(_QWORD *)(v7 + 16) = a2;
  v8 = (void *)objc_opt_self(NSXPCConnection);
  _Block_copy(a2);
  v9 = objc_msgSend(v8, "currentConnection");
  if (v9)
  {
    v10 = v9;
    if ((objc_msgSend(a1, "fetchProperties") & 0x200) != 0)
    {
      v26 = 5;
      v20 = sub_10001CAC4();
      if ((NSXPCConnection.hasEntitlement<A>(_:)(&v26, &type metadata for BeaconManagerEntitlement, v20) & 1) == 0)
        goto LABEL_4;
    }
    else
    {
      v27 = 6;
      v11 = sub_10001CAC4();
      if ((NSXPCConnection.hasEntitlement<A>(_:)(&v27, &type metadata for BeaconManagerEntitlement, v11) & 1) == 0)
      {
LABEL_4:
        v12 = sub_10028FA08();
        v13 = swift_allocError(&type metadata for BeaconManagerService.BeaconManagerServiceError, v12, 0, 0);
        *v14 = 12;
        v15 = (void *)_convertErrorToNSError(_:)(v13);
        ((void (**)(_QWORD, _QWORD, void *))a2)[2](a2, 0, v15);

        swift_errorRelease(v13);
        swift_release(v7);

        return;
      }
    }
    v21 = type metadata accessor for TaskPriority(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v6, 1, 1, v21);
    v22 = (_QWORD *)swift_allocObject(&unk_101079938, 64, 7);
    v22[2] = 0;
    v22[3] = 0;
    v22[4] = sub_10001EEDC;
    v22[5] = v7;
    v22[6] = v10;
    v22[7] = a1;
    swift_retain();
    v23 = a1;
    v24 = sub_100691AC0((uint64_t)v6, (uint64_t)&unk_1010FD130, (uint64_t)v22);
    swift_release(v7);
    swift_release(v24);
  }
  else
  {
    v16 = sub_10028FA08();
    v17 = swift_allocError(&type metadata for BeaconManagerService.BeaconManagerServiceError, v16, 0, 0);
    *v18 = 7;
    v19 = (void *)_convertErrorToNSError(_:)(v17);
    ((void (**)(_QWORD, _QWORD, void *))a2)[2](a2, 0, v19);

    swift_errorRelease(v17);
    swift_release(v7);
  }
}

uint64_t sub_10000E7F0(uint64_t a1, uint64_t a2, const char *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  const char *v22;
  uint64_t v23;
  uint8_t *v24;
  uint8_t *v25;
  id v26;
  _QWORD *v27;
  void *v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  _QWORD aBlock[5];
  _QWORD *v42;

  v36 = a1;
  v37 = a5;
  v35 = a4;
  v9 = v6;
  v11 = type metadata accessor for DispatchWorkItemFlags(0);
  v39 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v13 = (char *)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = type metadata accessor for DispatchQoS(0);
  v14 = *(_QWORD *)(v38 - 8);
  __chkstk_darwin(v38);
  v16 = (char *)&v35 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1010EA098 != -1)
    swift_once(&qword_1010EA098, sub_10098F7D8);
  v17 = type metadata accessor for Logger(0);
  v18 = sub_10001A9E8(v17, (uint64_t)qword_1011B7A18);
  v19 = Logger.logObject.getter(v18);
  v20 = static os_log_type_t.default.getter(v19);
  if (os_log_type_enabled(v19, v20))
  {
    v21 = (uint8_t *)swift_slowAlloc(2, -1);
    v22 = a3;
    v23 = a6;
    v24 = v21;
    *(_WORD *)v21 = 0;
    _os_log_impl((void *)&_mh_execute_header, v19, v20, v22, v21, 2u);
    v25 = v24;
    a6 = v23;
    swift_slowDealloc(v25, -1, -1);
  }

  v26 = objc_msgSend((id)objc_opt_self(NSXPCConnection), "currentConnection");
  v27 = (_QWORD *)swift_allocObject(v35, 48, 7);
  v27[2] = v26;
  v27[3] = v9;
  v27[4] = v36;
  v27[5] = a2;
  aBlock[4] = v37;
  v42 = v27;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = a6;
  v28 = _Block_copy(aBlock);
  v29 = v26;
  swift_retain(v9);
  v30 = swift_retain(a2);
  static DispatchQoS.unspecified.getter(v30);
  v40 = &_swiftEmptyArrayStorage;
  v31 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v32 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v33 = sub_1000193E4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v40, v32, v33, v11, v31);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v16, v13, v28);
  _Block_release(v28);

  (*(void (**)(char *, uint64_t))(v39 + 8))(v13, v11);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v38);
  return swift_release(v42);
}

uint64_t sub_10000EAC8(int a1)
{
  char *v1;
  char *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  void *v17;
  id v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  void *v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  _QWORD aBlock[5];
  uint64_t v39;

  v2 = v1;
  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v35 = *(_QWORD *)(v4 - 8);
  v36 = v4;
  __chkstk_darwin(v4);
  v34 = (char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  v32 = *(_QWORD *)(v6 - 8);
  v33 = v6;
  __chkstk_darwin(v6);
  v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS.QoSClass(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for DispatchPredicate(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (uint64_t *)((char *)&v32 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  v17 = *(void **)&v2[OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor_queue];
  *v16 = v17;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v14 + 104))(v16, enum case for DispatchPredicate.onQueue(_:), v13);
  v18 = v17;
  LOBYTE(v17) = _dispatchPreconditionTest(_:)(v16);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v14 + 8))(v16, v13);
  if ((v17 & 1) == 0)
  {
    __break(1u);
LABEL_7:
    swift_once(&qword_1010E9B88, sub_100356FDC);
    goto LABEL_4;
  }
  v14 = OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor__currentAuthorizationStatus;
  if (*(_DWORD *)&v2[OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor__currentAuthorizationStatus] == a1)
    return result;
  v13 = static os_log_type_t.default.getter(result);
  if (qword_1010E9B88 != -1)
    goto LABEL_7;
LABEL_4:
  v20 = qword_1011B6DD8;
  v21 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v22 = swift_allocObject(v21, 112, 7);
  *(_OWORD *)(v22 + 16) = xmmword_100E22B10;
  v23 = *(_DWORD *)&v2[v14];
  *(_QWORD *)(v22 + 56) = &type metadata for Int32;
  *(_QWORD *)(v22 + 64) = &protocol witness table for Int32;
  *(_DWORD *)(v22 + 32) = v23;
  *(_QWORD *)(v22 + 96) = &type metadata for Int32;
  *(_QWORD *)(v22 + 104) = &protocol witness table for Int32;
  *(_DWORD *)(v22 + 72) = a1;
  os_log(_:dso:log:_:_:)(v13, &_mh_execute_header, v20, "authorization changed from %d to %d", v32, v33);
  swift_bridgeObjectRelease(v22);
  *(_DWORD *)&v2[v14] = a1;
  sub_10000F4A0(0, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr);
  (*(void (**)(char *, _QWORD, uint64_t))(v10 + 104))(v12, enum case for DispatchQoS.QoSClass.default(_:), v9);
  v24 = (void *)static OS_dispatch_queue.global(qos:)(v12);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  v25 = swift_allocObject(&unk_10106F0C8, 28, 7);
  *(_QWORD *)(v25 + 16) = v2;
  *(_DWORD *)(v25 + 24) = a1;
  aBlock[4] = sub_10001E310;
  v39 = v25;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_10106F0E0;
  v26 = _Block_copy(aBlock);
  static DispatchQoS.unspecified.getter(v2);
  v37 = &_swiftEmptyArrayStorage;
  v27 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v28 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v29 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  v30 = v34;
  v31 = v36;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v37, v28, v29, v36, v27);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v8, v30, v26);
  _Block_release(v26);

  (*(void (**)(char *, uint64_t))(v35 + 8))(v30, v31);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v8, v33);
  return swift_release(v39);
}

void sub_10000EEA4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t My;
  _QWORD *v14;
  uint64_t v15;
  void (*v16)(char *, uint64_t, uint64_t, uint64_t);
  _QWORD *v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  uint64_t v21;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  void *v29;
  Class isa;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  uint8_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  Class v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54[5];

  v4 = type metadata accessor for SafeLocation(0);
  v52 = *(_QWORD *)(v4 - 8);
  v5 = __chkstk_darwin(v4);
  v7 = (uint64_t *)((char *)&v48 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v5);
  v9 = (char *)&v48 - v8;
  v10 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v10);
  v12 = (char *)&v48 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  My = type metadata accessor for Feature.FindMy(0);
  v54[3] = My;
  v54[4] = sub_100006204((unint64_t *)&qword_1010EE1B0, (uint64_t (*)(uint64_t))&type metadata accessor for Feature.FindMy, (uint64_t)&protocol conformance descriptor for Feature.FindMy);
  v14 = sub_100018F08(v54);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(My - 8) + 104))(v14, enum case for Feature.FindMy.separationAlerts(_:), My);
  LOBYTE(My) = isFeatureEnabled(_:)(v54);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v54);
  if ((My & 1) == 0)
  {
    type metadata accessor for SPSeparationMonitoringError(0);
    v26 = v25;
    v53 = 1;
    v27 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
    v28 = sub_100006204(&qword_1010EB500, (uint64_t (*)(uint64_t))type metadata accessor for SPSeparationMonitoringError, (uint64_t)&unk_100E21B94);
    _BridgedStoredNSError.init(_:userInfo:)(v54, &v53, v27, v26, v28);
    v29 = (void *)v54[0];
    sub_10000F4A0(0, &qword_1011058A0, SPSafeLocation_ptr);
    sub_1000170AC((unint64_t *)&qword_101107020, &qword_1011058A0, SPSafeLocation_ptr);
    isa = Set._bridgeToObjectiveC()().super.isa;
    v31 = (void *)_convertErrorToNSError(_:)(v29);
    (*(void (**)(uint64_t, Class, void *))(a2 + 16))(a2, isa, v31);

    return;
  }
  v50 = a2;
  sub_10001AA44((_QWORD *)(a1 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation), *(_QWORD *)(a1 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24));
  v15 = type metadata accessor for UUID(0);
  v16 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56);
  v49 = v12;
  v16(v12, 1, 1, v15);
  v17 = sub_10001E350();
  v51 = v17[2];
  if (v51)
  {
    v18 = 0;
    v19 = _swiftEmptyArrayStorage;
    while (v18 < v17[2])
    {
      v20 = (*(unsigned __int8 *)(v52 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v52 + 80);
      v21 = *(_QWORD *)(v52 + 72);
      sub_10005972C((uint64_t)v17 + v20 + v21 * v18, (uint64_t)v9, type metadata accessor for SafeLocation);
      sub_1000126EC((uint64_t)v9, (uint64_t)v7, type metadata accessor for SafeLocation);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v19);
      v54[0] = (uint64_t)v19;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_10009AC18(0, v19[2] + 1, 1);
        v19 = (_QWORD *)v54[0];
      }
      v24 = v19[2];
      v23 = v19[3];
      if (v24 >= v23 >> 1)
      {
        sub_10009AC18(v23 > 1, v24 + 1, 1);
        v19 = (_QWORD *)v54[0];
      }
      ++v18;
      v19[2] = v24 + 1;
      sub_1000126EC((uint64_t)v7, (uint64_t)v19 + v20 + v24 * v21, type metadata accessor for SafeLocation);
      if (v51 == v18)
        goto LABEL_13;
    }
    __break(1u);
  }
  else
  {
    v19 = _swiftEmptyArrayStorage;
LABEL_13:
    v32 = swift_bridgeObjectRelease();
    __chkstk_darwin(v32);
    v33 = (uint64_t)v49;
    *(&v48 - 2) = (uint64_t)v49;
    v34 = sub_10001CEFC((uint64_t (*)(char *))sub_1004D63DC, (unint64_t *)&v48 - 4, (uint64_t)v19);
    v7 = sub_10047CE18(v34);
    swift_bridgeObjectRelease();
    sub_100004048(v33, &qword_1010ED860);
    if (qword_1010E9F10 == -1)
      goto LABEL_14;
  }
  swift_once(&qword_1010E9F10, sub_10075AEB4);
LABEL_14:
  v35 = type metadata accessor for Logger(0);
  sub_10001A9E8(v35, (uint64_t)qword_1011B75D0);
  v36 = swift_bridgeObjectRetain_n(v7, 2);
  v37 = Logger.logObject.getter(v36);
  v38 = static os_log_type_t.default.getter(v37);
  if (os_log_type_enabled(v37, v38))
  {
    v39 = (uint8_t *)swift_slowAlloc(12, -1);
    v40 = swift_slowAlloc(32, -1);
    v54[0] = v40;
    *(_DWORD *)v39 = 136315138;
    v41 = sub_10000F4A0(0, &qword_1011058A0, SPSafeLocation_ptr);
    swift_bridgeObjectRetain(v7);
    v43 = Array.description.getter(v42, v41);
    v45 = v44;
    swift_bridgeObjectRelease();
    v53 = sub_100016940(v43, v45, v54);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, v54, v39 + 4, v39 + 12);
    swift_bridgeObjectRelease_n(v7, 2);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v37, v38, "Known safe locations: %s", v39, 0xCu);
    swift_arrayDestroy(v40, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v40, -1, -1);
    swift_slowDealloc(v39, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v7, 2);
  }
  v46 = v50;
  sub_10001D404((uint64_t)v7);
  swift_bridgeObjectRelease();
  sub_10000F4A0(0, &qword_1011058A0, SPSafeLocation_ptr);
  sub_1000170AC((unint64_t *)&qword_101107020, &qword_1011058A0, SPSafeLocation_ptr);
  v47 = Set._bridgeToObjectiveC()().super.isa;
  (*(void (**)(uint64_t, Class, _QWORD))(v46 + 16))(v46, v47, 0);
  swift_bridgeObjectRelease();

}

uint64_t sub_10000F4A0(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v5;

  result = *a2;
  if (!*a2)
  {
    v5 = objc_opt_self(*a3);
    result = swift_getObjCClassMetadata(v5);
    atomic_store(result, a2);
  }
  return result;
}

uint64_t sub_10000F4D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  _QWORD *v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD aBlock[5];
  _QWORD *v45;

  v4 = v3;
  v36 = a2;
  v37 = a3;
  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  v41 = *(_QWORD *)(v6 - 8);
  v42 = v6;
  __chkstk_darwin(v6);
  v40 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  v38 = *(_QWORD *)(v8 - 8);
  v39 = v8;
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = static os_log_type_t.info.getter(v9);
  if (qword_1010EA248 != -1)
    swift_once(&qword_1010EA248, sub_100B5D8FC);
  v13 = qword_1011B7D28;
  v14 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v15 = swift_allocObject(v14, 112, 7);
  *(_OWORD *)(v15 + 16) = xmmword_100E22B10;
  aBlock[0] = *v3;
  v16 = sub_10001A9A8(&qword_1010F49B8);
  v17 = String.init<A>(describing:)(aBlock, v16);
  v19 = v18;
  *(_QWORD *)(v15 + 56) = &type metadata for String;
  v20 = sub_10001AA00();
  *(_QWORD *)(v15 + 32) = v17;
  *(_QWORD *)(v15 + 40) = v19;
  *(_QWORD *)(v15 + 96) = &type metadata for String;
  *(_QWORD *)(v15 + 104) = v20;
  *(_QWORD *)(v15 + 64) = v20;
  *(_QWORD *)(v15 + 72) = 0xD00000000000001FLL;
  *(_QWORD *)(v15 + 80) = 0x8000000100ED8620;
  os_log(_:dso:log:_:_:)(v12, &_mh_execute_header, v13, "%@: %@", 6, 2, v15);
  v21 = swift_bridgeObjectRelease();
  v22 = static os_log_type_t.default.getter(v21);
  if (qword_1010EA2F8 != -1)
    swift_once(&qword_1010EA2F8, sub_100B5E19C);
  v23 = qword_1011B7DD8;
  v24 = swift_allocObject(v14, 72, 7);
  *(_OWORD *)(v24 + 16) = xmmword_100E22B00;
  *(_QWORD *)(v24 + 56) = sub_10001A9A8((uint64_t *)&unk_1010F7730);
  *(_QWORD *)(v24 + 64) = sub_1000193A4(&qword_1010FD1D0, (uint64_t *)&unk_1010F7730, (const char *)&protocol conformance descriptor for [A]);
  *(_QWORD *)(v24 + 32) = a1;
  *(_QWORD *)&v25 = swift_bridgeObjectRetain(a1).n128_u64[0];
  os_log(_:dso:log:_:_:)(v22, &_mh_execute_header, v23, "unknownBeacons for uuids: %{public}@", 36, 2, v24, v25);
  swift_bridgeObjectRelease();
  v26 = (_QWORD *)swift_allocObject(&unk_101079B18, 48, 7);
  v26[2] = a1;
  v26[3] = v4;
  v27 = v37;
  v26[4] = v36;
  v26[5] = v27;
  aBlock[4] = sub_10001E904;
  v45 = v26;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_101079B30;
  v28 = _Block_copy(aBlock);
  swift_bridgeObjectRetain(a1);
  swift_retain();
  v29 = swift_retain();
  static DispatchQoS.unspecified.getter(v29);
  v43 = _swiftEmptyArrayStorage;
  v30 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v31 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v32 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  v33 = v40;
  v34 = v42;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v43, v31, v32, v42, v30);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v11, v33, v28);
  _Block_release(v28);
  (*(void (**)(char *, uint64_t))(v41 + 8))(v33, v34);
  (*(void (**)(char *, uint64_t))(v38 + 8))(v11, v39);
  return swift_release(v45);
}

uint64_t sub_10000F8A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  _QWORD *v3;
  uint64_t (__cdecl *v4)();

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 144) + 16);
  *(_QWORD *)(v0 + 160) = v1;
  if (!v1)
    return (*(uint64_t (**)(void))(v0 + 8))();
  if (qword_1010EA5B0 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v0 + 96, 0, 0);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 56, &qword_1010EE220);
  if (*(_QWORD *)(v0 + 80))
  {
    sub_10000F9FC((__int128 *)(v0 + 56), v0 + 16);
    sub_10001AA44((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
    v4 = (uint64_t (__cdecl *)())((char *)&dword_1010EBB40 + dword_1010EBB40);
    v3 = (_QWORD *)swift_task_alloc(unk_1010EBB44);
    *(_QWORD *)(v0 + 168) = v3;
    *v3 = v0;
    v3[1] = sub_100005A30;
    return v4();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10000F9B8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_10001A9A8(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_10000F9FC(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_QWORD *)(a2 + 32) = *((_QWORD *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

void sub_10000FA14(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  void *v21;
  id v22;
  char v23;
  void *v24;
  uint64_t v25;
  id v26;
  void *v27;
  void **v28;
  void *v29;
  id v30;
  void *v31;
  uint64_t v32;
  void *v33;
  id v34;
  id v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD aBlock[5];
  uint64_t v53;
  char v54[24];

  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v49 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v48 = (char *)&v43 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for DispatchQoS(0);
  v46 = *(_QWORD *)(v4 - 8);
  v47 = v4;
  __chkstk_darwin(v4);
  v45 = (char *)&v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS.QoSClass(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = static os_log_type_t.default.getter(v8);
  if (qword_1010E9B88 != -1)
    swift_once(&qword_1010E9B88, sub_100356FDC);
  v12 = qword_1011B6DD8;
  v13 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v14 = swift_allocObject(v13, 72, 7);
  *(_OWORD *)(v14 + 16) = xmmword_100E22B00;
  v50 = v2;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v42 = a1;
    else
      v42 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v15 = _CocoaArrayWrapper.endIndex.getter(v42);
    swift_bridgeObjectRelease();
  }
  else
  {
    v15 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  aBlock[0] = v15;
  v16 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  v18 = v17;
  *(_QWORD *)(v14 + 56) = &type metadata for String;
  *(_QWORD *)(v14 + 64) = sub_10001AA00();
  *(_QWORD *)(v14 + 32) = v16;
  *(_QWORD *)(v14 + 40) = v18;
  os_log(_:dso:log:_:_:)(v11, &_mh_execute_header, v12, "didUpdateLocations - %@", 23, 2, v14);
  swift_bridgeObjectRelease();
  if (!((unint64_t)a1 >> 62))
  {
    v19 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(a1);
    if (v19)
      goto LABEL_7;
LABEL_16:
    swift_bridgeObjectRelease();
    return;
  }
  if (a1 < 0)
    v25 = a1;
  else
    v25 = a1 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(a1);
  if (!_CocoaArrayWrapper.endIndex.getter(v25))
    goto LABEL_16;
LABEL_7:
  if ((a1 & 0xC000000000000001) != 0)
  {
    v20 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, a1);
  }
  else
  {
    if (!*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      return;
    }
    v20 = *(id *)(a1 + 32);
  }
  v21 = v20;
  swift_bridgeObjectRelease();
  v22 = v21;
  v23 = sub_10000CC48();

  if ((v23 & 1) != 0)
  {
    v24 = 0;
  }
  else
  {
    v26 = v22;
    v24 = v22;
  }
  v27 = v44;
  v28 = (void **)&v44[OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor_currentLocation];
  swift_beginAccess(&v44[OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor_currentLocation], v54, 1, 0);
  v29 = *v28;
  *v28 = v24;
  v30 = v24;

  sub_10000F4A0(0, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr);
  (*(void (**)(char *, _QWORD, uint64_t))(v7 + 104))(v10, enum case for DispatchQoS.QoSClass.default(_:), v6);
  v31 = (void *)static OS_dispatch_queue.global(qos:)(v10);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  v32 = swift_allocObject(&unk_10106F118, 32, 7);
  *(_QWORD *)(v32 + 16) = v27;
  *(_QWORD *)(v32 + 24) = v24;
  aBlock[4] = sub_10001E31C;
  v53 = v32;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_10106F130;
  v33 = _Block_copy(aBlock);
  v34 = v30;
  v35 = v27;
  v36 = v45;
  static DispatchQoS.unspecified.getter(v35);
  v51 = _swiftEmptyArrayStorage;
  v37 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v38 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v39 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  v40 = v48;
  v41 = v50;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v51, v38, v39, v50, v37);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v36, v40, v33);
  _Block_release(v33);

  (*(void (**)(char *, uint64_t))(v49 + 8))(v40, v41);
  (*(void (**)(char *, uint64_t))(v46 + 8))(v36, v47);
  swift_release(v53);
}

void sub_10000FEA4()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  os_log_type_t v24;
  uint8_t *v25;
  NSObject *oslog;

  v1 = (_QWORD *)v0;
  v2 = *(_QWORD *)(v0 + 136);
  if (v2)
  {
    *(_QWORD *)(v0 + 136) = 0;
    swift_release(v2);
    *(_QWORD *)(v0 + 184) = 0;
    *(_BYTE *)(v0 + 192) = 1;
    if (qword_1010E9ED8 != -1)
      swift_once(&qword_1010E9ED8, sub_1007116BC);
    v3 = type metadata accessor for Logger(0);
    v4 = sub_10001A9E8(v3, (uint64_t)qword_1011B7598);
    v5 = Logger.logObject.getter(v4);
    v6 = static os_log_type_t.default.getter(v5);
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Unsubscribed from connectable devices change publisher.", v7, 2u);
      swift_slowDealloc(v7, -1, -1);
    }

  }
  v8 = v1[18];
  if (v8)
  {
    v1[18] = 0;
    swift_release(v8);
    if (qword_1010E9ED8 != -1)
      swift_once(&qword_1010E9ED8, sub_1007116BC);
    v9 = type metadata accessor for Logger(0);
    v10 = sub_10001A9E8(v9, (uint64_t)qword_1011B7598);
    v11 = Logger.logObject.getter(v10);
    v12 = static os_log_type_t.default.getter(v11);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Unsubscribed from recordPublisherSubject publisher.", v13, 2u);
      swift_slowDealloc(v13, -1, -1);
    }

  }
  v14 = v1[19];
  if (v14)
  {
    v1[19] = 0;
    swift_release(v14);
    if (qword_1010E9ED8 != -1)
      swift_once(&qword_1010E9ED8, sub_1007116BC);
    v15 = type metadata accessor for Logger(0);
    v16 = sub_10001A9E8(v15, (uint64_t)qword_1011B7598);
    v17 = Logger.logObject.getter(v16);
    v18 = static os_log_type_t.default.getter(v17);
    if (os_log_type_enabled(v17, v18))
    {
      v19 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v19 = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Unsubscribed from beaconRecordDeletedSubject publisher.", v19, 2u);
      swift_slowDealloc(v19, -1, -1);
    }

  }
  v20 = v1[22];
  if (v20)
  {
    swift_retain();
    sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
    Task.cancel()();
    swift_release(v20);
    v21 = v1[22];
    v1[22] = 0;
    swift_release(v21);
    if (qword_1010E9ED8 != -1)
      swift_once(&qword_1010E9ED8, sub_1007116BC);
    v22 = type metadata accessor for Logger(0);
    v23 = sub_10001A9E8(v22, (uint64_t)qword_1011B7598);
    oslog = Logger.logObject.getter(v23);
    v24 = static os_log_type_t.default.getter(oslog);
    if (os_log_type_enabled(oslog, v24))
    {
      v25 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v25 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v24, "Unsubscribed from localFindableRecordUpdateTask.", v25, 2u);
      swift_slowDealloc(v25, -1, -1);
    }

  }
}

uint64_t sub_100010220(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t result;
  uint64_t v63;
  unint64_t v64;
  int64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v72;
  char *v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  BOOL v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t (*v92)(char *, uint64_t, uint64_t);
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  _QWORD *v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  char *v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  char *v113;
  uint64_t (*v114)(char *, uint64_t, uint64_t);
  uint64_t (*v115)(uint64_t, uint64_t, uint64_t);
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;

  v117 = a1;
  v1 = sub_10001A9A8(&qword_1010FBA40);
  __chkstk_darwin(v1);
  v105 = (char *)&v89 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v107 = type metadata accessor for URL(0);
  v3 = *(_QWORD *)(v107 - 8);
  __chkstk_darwin(v107);
  v103 = (char *)&v89 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10001A9A8((uint64_t *)&unk_1010F77A0);
  __chkstk_darwin(v5);
  v118 = (uint64_t)&v89 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DirectorySequence(0);
  v116 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v9 = (char *)&v89 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10001A9A8((uint64_t *)&unk_101111430);
  v11 = __chkstk_darwin(v10);
  v102 = (uint64_t)&v89 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v104 = (char *)&v89 - v13;
  v106 = sub_10001A9A8(&qword_10110B460);
  v14 = *(_QWORD *)(v106 - 8);
  v15 = __chkstk_darwin(v106);
  v113 = (char *)&v89 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v109 = (uint64_t)&v89 - v17;
  v18 = sub_10001A9A8(&qword_101105800);
  __chkstk_darwin(v18);
  v20 = (char *)&v89 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_10001A9A8((uint64_t *)&unk_1011057F0);
  v22 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin(v21);
  v108 = (uint64_t)&v89 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = sub_10001A9A8((uint64_t *)&unk_101111440);
  __chkstk_darwin(v24);
  v93 = (uint64_t)&v89 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v94 = type metadata accessor for MemberSharingCircle(0);
  v26 = *(_QWORD *)(v94 - 8);
  __chkstk_darwin(v94);
  v97 = (uint64_t)&v89 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = sub_10001A9A8(&qword_1010FB1F0);
  __chkstk_darwin(v28);
  v30 = (char *)&v89 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v101 = v26;
  v31 = *(unsigned __int8 *)(v26 + 80);
  sub_10000F9B8(v117, (uint64_t)v30, &qword_1010FB1F0);
  v96 = v30;
  sub_10000F9B8((uint64_t)v30, (uint64_t)v20, &qword_101105800);
  v91 = v22;
  v92 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v22 + 48);
  v32 = _swiftEmptyArrayStorage;
  if (v92(v20, 1, v21) != 1)
  {
    v98 = 0;
    v110 = 0;
    v90 = (v31 + 32) & ~v31;
    v99 = (char *)_swiftEmptyArrayStorage + v90;
    v89 = v31 | 7;
    v33 = _swiftEmptyArrayStorage;
    v34 = (uint64_t)v104;
    v35 = (uint64_t)v105;
    v36 = v107;
    v111 = v20;
    v112 = v3;
    v95 = v21;
    while (1)
    {
      v100 = v33;
      v37 = v108;
      sub_100005CF0((uint64_t)v20, v108, (uint64_t *)&unk_1011057F0);
      v117 = v37 + *(int *)(v21 + 40);
      v38 = v118;
      sub_10000F9B8(v117, v118, (uint64_t *)&unk_1010F77A0);
      v115 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v116 + 48);
      if (v115(v38, 1, v7) == 1)
      {
        v39 = v106;
LABEL_13:
        sub_100004048(v118, (uint64_t *)&unk_1010F77A0);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56))(v34, 1, 1, v39);
LABEL_15:
        sub_100004048(v108, (uint64_t *)&unk_1011057F0);
        sub_100004048(v34, (uint64_t *)&unk_101111430);
        v56 = (uint64_t)v96;
        sub_100004048((uint64_t)v96, &qword_101105800);
        v57 = 1;
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v91 + 56))(v56, 1, 1, v95);
        v58 = v93;
      }
      else
      {
        v114 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v116 + 32);
        v39 = v106;
        while (1)
        {
          v40 = v14;
          v41 = v114(v9, v118, v7);
          DirectorySequence.next()(v41);
          v42 = v112;
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v112 + 48))(v35, 1, v36) == 1)
          {
            v43 = v116;
            (*(void (**)(char *, uint64_t))(v116 + 8))(v9, v7);
            sub_100004048(v35, &qword_1010FBA40);
            v44 = v117;
            sub_100004048(v117, (uint64_t *)&unk_1010F77A0);
            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v43 + 56))(v44, 1, 1, v7);
            v14 = v40;
            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v40 + 56))(v34, 1, 1, v39);
          }
          else
          {
            v45 = v103;
            (*(void (**)(char *, uint64_t, uint64_t))(v42 + 32))(v103, v35, v36);
            v46 = objc_autoreleasePoolPush();
            v47 = v102;
            v48 = v110;
            sub_100A7F178((void (*)(_QWORD))v45, v108, v102);
            v110 = v48;
            v36 = v107;
            v49 = v46;
            v35 = (uint64_t)v105;
            objc_autoreleasePoolPop(v49);
            (*(void (**)(char *, uint64_t))(v116 + 8))(v9, v7);
            v34 = (uint64_t)v104;
            (*(void (**)(char *, uint64_t))(v42 + 8))(v45, v36);
            v50 = v47;
            v39 = v106;
            sub_100005CF0(v50, v34, (uint64_t *)&unk_101111430);
            v14 = v40;
          }
          v51 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v34, 1, v39);
          v52 = (uint64_t)v113;
          if (v51 == 1)
          {
            v20 = v111;
            goto LABEL_15;
          }
          v53 = v109;
          sub_100005CF0(v34, v109, &qword_10110B460);
          sub_100005CF0(v53, v52, &qword_10110B460);
          if (swift_getEnumCaseMultiPayload(v52, v39) != 1)
            break;
          sub_100004048(v52, &qword_10110B460);
          v54 = v118;
          sub_10000F9B8(v117, v118, (uint64_t *)&unk_1010F77A0);
          v55 = v115(v54, 1, v7);
          v20 = v111;
          if (v55 == 1)
            goto LABEL_13;
        }
        sub_100004048(v108, (uint64_t *)&unk_1011057F0);
        v78 = v52;
        v58 = v93;
        sub_1000126EC(v78, v93, type metadata accessor for MemberSharingCircle);
        v57 = 0;
        v20 = v111;
      }
      v59 = v101;
      v60 = v57;
      v61 = v94;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v101 + 56))(v58, v60, 1, v94);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v59 + 48))(v58, 1, v61) == 1)
      {
        v85 = v98;
        v84 = v100;
        goto LABEL_42;
      }
      result = sub_1000126EC(v58, v97, type metadata accessor for MemberSharingCircle);
      v63 = v98;
      if (v98)
      {
        v32 = v100;
        goto LABEL_38;
      }
      v64 = v100[3];
      if ((uint64_t)((v64 >> 1) + 0x4000000000000000) < 0)
        goto LABEL_47;
      v65 = v64 & 0xFFFFFFFFFFFFFFFELL;
      if (v65 <= 1)
        v66 = 1;
      else
        v66 = v65;
      v67 = sub_10001A9A8(&qword_101108F20);
      v68 = *(_QWORD *)(v101 + 72);
      v69 = v90;
      v32 = (_QWORD *)swift_allocObject(v67, v90 + v68 * v66, v89);
      result = j__malloc_size(v32);
      if (!v68)
        goto LABEL_48;
      v70 = result - v69;
      if (result - v69 == 0x8000000000000000 && v68 == -1)
        goto LABEL_49;
      v72 = v70 / v68;
      v32[2] = v66;
      v32[3] = 2 * (v70 / v68);
      v73 = (char *)v32 + v69;
      v74 = v100;
      v75 = v100[3] >> 1;
      v76 = v75 * v68;
      if (v100[2])
        break;
LABEL_37:
      v99 = &v73[v76];
      v63 = (v72 & 0x7FFFFFFFFFFFFFFFLL) - v75;
      result = swift_release(v74);
      v34 = (uint64_t)v104;
      v35 = (uint64_t)v105;
LABEL_38:
      v36 = v107;
      v79 = __OFSUB__(v63, 1);
      v80 = v63 - 1;
      if (v79)
      {
        __break(1u);
LABEL_47:
        __break(1u);
LABEL_48:
        __break(1u);
LABEL_49:
        __break(1u);
LABEL_50:
        __break(1u);
        return result;
      }
      v98 = v80;
      v81 = (uint64_t)v99;
      sub_1000126EC(v97, (uint64_t)v99, type metadata accessor for MemberSharingCircle);
      v99 = (char *)(v81 + *(_QWORD *)(v101 + 72));
      sub_10000F9B8((uint64_t)v96, (uint64_t)v20, &qword_101105800);
      v21 = v95;
      v82 = v92(v20, 1, v95);
      v33 = v32;
      if (v82 == 1)
        goto LABEL_40;
    }
    v77 = (char *)v100 + v69;
    if (v32 < v100 || v73 >= &v77[v76])
    {
      swift_arrayInitWithTakeFrontToBack((char *)v32 + v69, v77, v75, v94);
    }
    else
    {
      if (v32 == v100)
      {
LABEL_36:
        v74[2] = 0;
        goto LABEL_37;
      }
      swift_arrayInitWithTakeBackToFront((char *)v32 + v69, v77);
    }
    v74 = v100;
    goto LABEL_36;
  }
  v98 = 0;
LABEL_40:
  sub_100004048((uint64_t)v20, &qword_101105800);
  v83 = v93;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v101 + 56))(v93, 1, 1, v94);
  v84 = v32;
  v58 = v83;
  v85 = v98;
LABEL_42:
  sub_100004048((uint64_t)v96, &qword_1010FB1F0);
  sub_100004048(v58, (uint64_t *)&unk_101111440);
  v86 = v84[3];
  result = (uint64_t)v84;
  if (v86 >= 2)
  {
    v87 = v86 >> 1;
    v79 = __OFSUB__(v87, v85);
    v88 = v87 - v85;
    if (v79)
      goto LABEL_50;
    v84[2] = v88;
  }
  return result;
}

uint64_t sub_100010BC8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v4 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  swift_release(*(_QWORD *)(a1 + *(int *)(a2 + 36)));
  v5 = a1 + *(int *)(a2 + 40);
  v6 = type metadata accessor for DirectorySequence(0);
  v7 = *(_QWORD *)(v6 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  return result;
}

char *sub_100010C64(char *a1, char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int (*v15)(char *, uint64_t, uint64_t);
  uint64_t v16;

  v6 = type metadata accessor for FailableRecordSequence(0, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), a4);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    v8 = type metadata accessor for Optional(0, v6);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    v9 = type metadata accessor for URL(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(a1, a2, v9);
    *(_QWORD *)&a1[*(int *)(v6 + 36)] = *(_QWORD *)&a2[*(int *)(v6 + 36)];
    v10 = *(int *)(v6 + 40);
    v11 = &a1[v10];
    v12 = &a2[v10];
    v13 = type metadata accessor for DirectorySequence(0);
    v14 = *(_QWORD *)(v13 - 8);
    v15 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48);
    swift_retain();
    if (v15(v12, 1, v13))
    {
      v16 = sub_10001A9A8((uint64_t *)&unk_1010F77A0);
      memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v11, v12, v13);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
    }
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  return a1;
}

uint64_t sub_100010DC8(void *a1, uint64_t a2)
{
  id v4;
  id v5;
  uint64_t v6;
  uint64_t (*v7)();
  uint64_t *v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void **v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  void ***v19;
  void **v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  _QWORD *v25;
  void *v26;
  _QWORD *v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void **v34;
  NSObject *v35;
  os_log_type_t v36;
  uint8_t *v37;
  void ***v38;
  void **v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  NSObject *v43;
  os_log_type_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void **aBlock;
  _QWORD v59[4];
  _QWORD *v60;
  char v61[24];
  uint64_t v62;

  v4 = objc_msgSend(a1, "invalidationHandler");
  if (v4)
  {
    v5 = v4;
    v6 = swift_allocObject(&unk_10106C4E8, 24, 7);
    *(_QWORD *)(v6 + 16) = v5;
    v7 = sub_100336E3C;
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  v8 = (uint64_t *)(a2 + 32);
  swift_beginAccess(a2 + 32, v61, 0, 0);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = a1;
  swift_bridgeObjectRetain(v9);
  sub_10000B458(v11, (uint64_t)v10, &qword_1010F1580, &qword_1010F1588);
  v13 = v12;
  swift_bridgeObjectRelease();

  if (v13)
  {
    v56 = v13;
    if (qword_1010EA470 != -1)
      swift_once(&qword_1010EA470, sub_100C6BFB4);
    v14 = type metadata accessor for Logger(0);
    sub_10001A9E8(v14, (uint64_t)qword_1011B8010);
    v15 = (void **)v10;
    v16 = Logger.logObject.getter(v15);
    v17 = static os_log_type_t.info.getter(v16);
    if (os_log_type_enabled(v16, v17))
    {
      v18 = (uint8_t *)swift_slowAlloc(12, -1);
      v19 = (void ***)swift_slowAlloc(8, -1);
      *(_DWORD *)v18 = 138412290;
      aBlock = v15;
      v52 = v6;
      v20 = v15;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v59, v18 + 4, v18 + 12);
      *v19 = v15;

      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Already have a session for %@", v18, 0xCu);
      v21 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
      swift_arrayDestroy(v19, 1, v21);
      swift_slowDealloc(v19, -1, -1);
      swift_slowDealloc(v18, -1, -1);

      sub_10001D8A8((uint64_t)v7, v52);
    }
    else
    {

      sub_10001D8A8((uint64_t)v7, v6);
    }
    return v56;
  }
  else
  {
    v22 = sub_10001A9A8(&qword_1010F1580);
    swift_allocObject(v22, *(unsigned int *)(v22 + 48), *(unsigned __int16 *)(v22 + 52));
    v23 = v10;
    v57 = XPCSession.init(connection:)();
    if (v57)
    {
      v24 = swift_allocObject(&unk_10106C470, 24, 7);
      swift_weakInit(v24 + 16, a2);
      v25 = (_QWORD *)swift_allocObject(&unk_10106C498, 48, 7);
      v25[2] = v24;
      v25[3] = v23;
      v25[4] = v7;
      v25[5] = v6;
      v59[3] = sub_100335B24;
      v60 = v25;
      aBlock = _NSConcreteStackBlock;
      v59[0] = 1107296256;
      v59[1] = sub_100016FB8;
      v59[2] = &unk_10106C4B0;
      v26 = _Block_copy(&aBlock);
      v27 = v60;
      v28 = v23;
      sub_10001D898((uint64_t)v7, v6);
      swift_release(v27);
      objc_msgSend(v28, "setInvalidationHandler:", v26);
      _Block_release(v26);
      v29 = *(_QWORD *)(a2 + 32);
      if ((v29 & 0xC000000000000001) != 0)
      {
        if (v29 < 0)
          v30 = *(_QWORD *)(a2 + 32);
        else
          v30 = v29 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(*(_QWORD *)(a2 + 32));
        v31 = __CocoaSet.count.getter(v30);
        swift_bridgeObjectRelease();
      }
      else
      {
        v31 = *(_QWORD *)(v29 + 16);
      }
      v32 = v57;
      v55 = (uint64_t)v7;
      swift_beginAccess(a2 + 32, &aBlock, 33, 0);
      swift_retain();
      sub_100009CE0(&v62, v57);
      swift_endAccess(&aBlock);
      swift_release(v62);
      if (qword_1010EA470 != -1)
        swift_once(&qword_1010EA470, sub_100C6BFB4);
      v41 = type metadata accessor for Logger(0);
      sub_10001A9E8(v41, (uint64_t)qword_1011B8010);
      v42 = swift_retain();
      v43 = Logger.logObject.getter(v42);
      v44 = static os_log_type_t.info.getter(v43);
      if (os_log_type_enabled(v43, v44))
      {
        v45 = swift_slowAlloc(22, -1);
        *(_DWORD *)v45 = 134218240;
        aBlock = (void **)v31;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v59, v45 + 4, v45 + 12);
        *(_WORD *)(v45 + 12) = 2048;
        v46 = *v8;
        if ((*v8 & 0xC000000000000001) != 0)
        {
          if (v46 < 0)
            v47 = *v8;
          else
            v47 = v46 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(*v8);
          v48 = __CocoaSet.count.getter(v47);
          swift_bridgeObjectRelease();
        }
        else
        {
          v48 = *(_QWORD *)(v46 + 16);
        }
        aBlock = (void **)v48;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v59, v45 + 14, v45 + 22);
        swift_release(a2);
        _os_log_impl((void *)&_mh_execute_header, v43, v44, "Session count: %ld -> %ld", (uint8_t *)v45, 0x16u);
        swift_slowDealloc(v45, -1, -1);

        v32 = v57;
      }
      else
      {

        swift_release(a2);
      }
      v49 = *v8;
      if ((*v8 & 0xC000000000000001) != 0)
      {
        if (v49 < 0)
          v50 = *v8;
        else
          v50 = v49 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(*v8);
        __CocoaSet.count.getter(v50);
      }
      else
      {
        swift_bridgeObjectRetain(*v8);
      }
      sub_10001D8A8(v55, v6);
      swift_bridgeObjectRelease();
    }
    else
    {
      v53 = v6;
      if (qword_1010EA470 != -1)
        swift_once(&qword_1010EA470, sub_100C6BFB4);
      v33 = type metadata accessor for Logger(0);
      sub_10001A9E8(v33, (uint64_t)qword_1011B8010);
      v34 = (void **)v23;
      v35 = Logger.logObject.getter(v34);
      v36 = static os_log_type_t.error.getter(v35);
      if (os_log_type_enabled(v35, v36))
      {
        v37 = (uint8_t *)swift_slowAlloc(12, -1);
        v38 = (void ***)swift_slowAlloc(8, -1);
        *(_DWORD *)v37 = 138412290;
        aBlock = v34;
        v54 = (uint64_t)v7;
        v39 = v34;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v59, v37 + 4, v37 + 12);
        *v38 = v34;

        _os_log_impl((void *)&_mh_execute_header, v35, v36, "Failed to make XPCSession from %@", v37, 0xCu);
        v40 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
        swift_arrayDestroy(v38, 1, v40);
        swift_slowDealloc(v38, -1, -1);
        swift_slowDealloc(v37, -1, -1);

        sub_10001D8A8(v54, v53);
      }
      else
      {
        sub_10001D8A8((uint64_t)v7, v53);

      }
      return 0;
    }
  }
  return v32;
}

uint64_t sub_1000114D8(void *a1, uint64_t a2)
{
  id v4;
  id v5;
  uint64_t v6;
  uint64_t (*v7)();
  uint64_t *v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void **v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  void ***v19;
  void **v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  _QWORD *v25;
  void *v26;
  _QWORD *v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void **v34;
  NSObject *v35;
  os_log_type_t v36;
  uint8_t *v37;
  void ***v38;
  void **v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  NSObject *v43;
  os_log_type_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void **aBlock;
  _QWORD v59[4];
  _QWORD *v60;
  char v61[24];
  uint64_t v62;

  v4 = objc_msgSend(a1, "invalidationHandler");
  if (v4)
  {
    v5 = v4;
    v6 = swift_allocObject(&unk_10106CE20, 24, 7);
    *(_QWORD *)(v6 + 16) = v5;
    v7 = sub_100336E3C;
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  v8 = (uint64_t *)(a2 + 32);
  swift_beginAccess(a2 + 32, v61, 0, 0);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = a1;
  swift_bridgeObjectRetain(v9);
  sub_10000B458(v11, (uint64_t)v10, (uint64_t *)&unk_1010F7B10, (unint64_t *)&unk_1010EE140);
  v13 = v12;
  swift_bridgeObjectRelease();

  if (v13)
  {
    v56 = v13;
    if (qword_1010EA470 != -1)
      swift_once(&qword_1010EA470, sub_100C6BFB4);
    v14 = type metadata accessor for Logger(0);
    sub_10001A9E8(v14, (uint64_t)qword_1011B8010);
    v15 = (void **)v10;
    v16 = Logger.logObject.getter(v15);
    v17 = static os_log_type_t.info.getter(v16);
    if (os_log_type_enabled(v16, v17))
    {
      v18 = (uint8_t *)swift_slowAlloc(12, -1);
      v19 = (void ***)swift_slowAlloc(8, -1);
      *(_DWORD *)v18 = 138412290;
      aBlock = v15;
      v52 = v6;
      v20 = v15;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v59, v18 + 4, v18 + 12);
      *v19 = v15;

      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Already have a session for %@", v18, 0xCu);
      v21 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
      swift_arrayDestroy(v19, 1, v21);
      swift_slowDealloc(v19, -1, -1);
      swift_slowDealloc(v18, -1, -1);

      sub_10001D8A8((uint64_t)v7, v52);
    }
    else
    {

      sub_10001D8A8((uint64_t)v7, v6);
    }
    return v56;
  }
  else
  {
    v22 = sub_10001A9A8((uint64_t *)&unk_1010F7B10);
    swift_allocObject(v22, *(unsigned int *)(v22 + 48), *(unsigned __int16 *)(v22 + 52));
    v23 = v10;
    v57 = XPCSession.init(connection:)();
    if (v57)
    {
      v24 = swift_allocObject(&unk_10106CDA8, 24, 7);
      swift_weakInit(v24 + 16, a2);
      v25 = (_QWORD *)swift_allocObject(&unk_10106CDD0, 48, 7);
      v25[2] = v24;
      v25[3] = v23;
      v25[4] = v7;
      v25[5] = v6;
      v59[3] = sub_100336D18;
      v60 = v25;
      aBlock = _NSConcreteStackBlock;
      v59[0] = 1107296256;
      v59[1] = sub_100016FB8;
      v59[2] = &unk_10106CDE8;
      v26 = _Block_copy(&aBlock);
      v27 = v60;
      v28 = v23;
      sub_10001D898((uint64_t)v7, v6);
      swift_release(v27);
      objc_msgSend(v28, "setInvalidationHandler:", v26);
      _Block_release(v26);
      v29 = *(_QWORD *)(a2 + 32);
      if ((v29 & 0xC000000000000001) != 0)
      {
        if (v29 < 0)
          v30 = *(_QWORD *)(a2 + 32);
        else
          v30 = v29 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(*(_QWORD *)(a2 + 32));
        v31 = __CocoaSet.count.getter(v30);
        swift_bridgeObjectRelease();
      }
      else
      {
        v31 = *(_QWORD *)(v29 + 16);
      }
      v32 = v57;
      v55 = (uint64_t)v7;
      swift_beginAccess(a2 + 32, &aBlock, 33, 0);
      swift_retain();
      sub_1000099E0(&v62, v57);
      swift_endAccess(&aBlock);
      swift_release(v62);
      if (qword_1010EA470 != -1)
        swift_once(&qword_1010EA470, sub_100C6BFB4);
      v41 = type metadata accessor for Logger(0);
      sub_10001A9E8(v41, (uint64_t)qword_1011B8010);
      v42 = swift_retain();
      v43 = Logger.logObject.getter(v42);
      v44 = static os_log_type_t.info.getter(v43);
      if (os_log_type_enabled(v43, v44))
      {
        v45 = swift_slowAlloc(22, -1);
        *(_DWORD *)v45 = 134218240;
        aBlock = (void **)v31;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v59, v45 + 4, v45 + 12);
        *(_WORD *)(v45 + 12) = 2048;
        v46 = *v8;
        if ((*v8 & 0xC000000000000001) != 0)
        {
          if (v46 < 0)
            v47 = *v8;
          else
            v47 = v46 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(*v8);
          v48 = __CocoaSet.count.getter(v47);
          swift_bridgeObjectRelease();
        }
        else
        {
          v48 = *(_QWORD *)(v46 + 16);
        }
        aBlock = (void **)v48;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v59, v45 + 14, v45 + 22);
        swift_release(a2);
        _os_log_impl((void *)&_mh_execute_header, v43, v44, "Session count: %ld -> %ld", (uint8_t *)v45, 0x16u);
        swift_slowDealloc(v45, -1, -1);

        v32 = v57;
      }
      else
      {

        swift_release(a2);
      }
      v49 = *v8;
      if ((*v8 & 0xC000000000000001) != 0)
      {
        if (v49 < 0)
          v50 = *v8;
        else
          v50 = v49 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(*v8);
        __CocoaSet.count.getter(v50);
      }
      else
      {
        swift_bridgeObjectRetain(*v8);
      }
      sub_10001D8A8(v55, v6);
      swift_bridgeObjectRelease();
    }
    else
    {
      v53 = v6;
      if (qword_1010EA470 != -1)
        swift_once(&qword_1010EA470, sub_100C6BFB4);
      v33 = type metadata accessor for Logger(0);
      sub_10001A9E8(v33, (uint64_t)qword_1011B8010);
      v34 = (void **)v23;
      v35 = Logger.logObject.getter(v34);
      v36 = static os_log_type_t.error.getter(v35);
      if (os_log_type_enabled(v35, v36))
      {
        v37 = (uint8_t *)swift_slowAlloc(12, -1);
        v38 = (void ***)swift_slowAlloc(8, -1);
        *(_DWORD *)v37 = 138412290;
        aBlock = v34;
        v54 = (uint64_t)v7;
        v39 = v34;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v59, v37 + 4, v37 + 12);
        *v38 = v34;

        _os_log_impl((void *)&_mh_execute_header, v35, v36, "Failed to make XPCSession from %@", v37, 0xCu);
        v40 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
        swift_arrayDestroy(v38, 1, v40);
        swift_slowDealloc(v38, -1, -1);
        swift_slowDealloc(v37, -1, -1);

        sub_10001D8A8(v54, v53);
      }
      else
      {
        sub_10001D8A8((uint64_t)v7, v53);

      }
      return 0;
    }
  }
  return v32;
}

uint64_t sub_100011BE8(void *a1, uint64_t a2)
{
  id v4;
  id v5;
  uint64_t v6;
  uint64_t (*v7)();
  uint64_t *v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void **v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  void ***v19;
  void **v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  _QWORD *v25;
  void *v26;
  _QWORD *v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void **v34;
  NSObject *v35;
  os_log_type_t v36;
  uint8_t *v37;
  void ***v38;
  void **v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  NSObject *v43;
  os_log_type_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void **aBlock;
  _QWORD v59[4];
  _QWORD *v60;
  char v61[24];
  uint64_t v62;

  v4 = objc_msgSend(a1, "invalidationHandler");
  if (v4)
  {
    v5 = v4;
    v6 = swift_allocObject(&unk_10106C268, 24, 7);
    *(_QWORD *)(v6 + 16) = v5;
    v7 = sub_100336E3C;
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  v8 = (uint64_t *)(a2 + 32);
  swift_beginAccess(a2 + 32, v61, 0, 0);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = a1;
  swift_bridgeObjectRetain(v9);
  sub_10000B458(v11, (uint64_t)v10, (uint64_t *)&unk_10111C390, &qword_1010F78C0);
  v13 = v12;
  swift_bridgeObjectRelease();

  if (v13)
  {
    v56 = v13;
    if (qword_1010EA470 != -1)
      swift_once(&qword_1010EA470, sub_100C6BFB4);
    v14 = type metadata accessor for Logger(0);
    sub_10001A9E8(v14, (uint64_t)qword_1011B8010);
    v15 = (void **)v10;
    v16 = Logger.logObject.getter(v15);
    v17 = static os_log_type_t.info.getter(v16);
    if (os_log_type_enabled(v16, v17))
    {
      v18 = (uint8_t *)swift_slowAlloc(12, -1);
      v19 = (void ***)swift_slowAlloc(8, -1);
      *(_DWORD *)v18 = 138412290;
      aBlock = v15;
      v52 = v6;
      v20 = v15;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v59, v18 + 4, v18 + 12);
      *v19 = v15;

      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Already have a session for %@", v18, 0xCu);
      v21 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
      swift_arrayDestroy(v19, 1, v21);
      swift_slowDealloc(v19, -1, -1);
      swift_slowDealloc(v18, -1, -1);

      sub_10001D8A8((uint64_t)v7, v52);
    }
    else
    {

      sub_10001D8A8((uint64_t)v7, v6);
    }
    return v56;
  }
  else
  {
    v22 = sub_10001A9A8((uint64_t *)&unk_10111C390);
    swift_allocObject(v22, *(unsigned int *)(v22 + 48), *(unsigned __int16 *)(v22 + 52));
    v23 = v10;
    v57 = XPCSession.init(connection:)();
    if (v57)
    {
      v24 = swift_allocObject(&unk_10106C1F0, 24, 7);
      swift_weakInit(v24 + 16, a2);
      v25 = (_QWORD *)swift_allocObject(&unk_10106C218, 48, 7);
      v25[2] = v24;
      v25[3] = v23;
      v25[4] = v7;
      v25[5] = v6;
      v59[3] = sub_100330CE8;
      v60 = v25;
      aBlock = _NSConcreteStackBlock;
      v59[0] = 1107296256;
      v59[1] = sub_100016FB8;
      v59[2] = &unk_10106C230;
      v26 = _Block_copy(&aBlock);
      v27 = v60;
      v28 = v23;
      sub_10001D898((uint64_t)v7, v6);
      swift_release(v27);
      objc_msgSend(v28, "setInvalidationHandler:", v26);
      _Block_release(v26);
      v29 = *(_QWORD *)(a2 + 32);
      if ((v29 & 0xC000000000000001) != 0)
      {
        if (v29 < 0)
          v30 = *(_QWORD *)(a2 + 32);
        else
          v30 = v29 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(*(_QWORD *)(a2 + 32));
        v31 = __CocoaSet.count.getter(v30);
        swift_bridgeObjectRelease();
      }
      else
      {
        v31 = *(_QWORD *)(v29 + 16);
      }
      v32 = v57;
      v55 = (uint64_t)v7;
      swift_beginAccess(a2 + 32, &aBlock, 33, 0);
      swift_retain();
      sub_100009194(&v62, v57);
      swift_endAccess(&aBlock);
      swift_release(v62);
      if (qword_1010EA470 != -1)
        swift_once(&qword_1010EA470, sub_100C6BFB4);
      v41 = type metadata accessor for Logger(0);
      sub_10001A9E8(v41, (uint64_t)qword_1011B8010);
      v42 = swift_retain();
      v43 = Logger.logObject.getter(v42);
      v44 = static os_log_type_t.info.getter(v43);
      if (os_log_type_enabled(v43, v44))
      {
        v45 = swift_slowAlloc(22, -1);
        *(_DWORD *)v45 = 134218240;
        aBlock = (void **)v31;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v59, v45 + 4, v45 + 12);
        *(_WORD *)(v45 + 12) = 2048;
        v46 = *v8;
        if ((*v8 & 0xC000000000000001) != 0)
        {
          if (v46 < 0)
            v47 = *v8;
          else
            v47 = v46 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(*v8);
          v48 = __CocoaSet.count.getter(v47);
          swift_bridgeObjectRelease();
        }
        else
        {
          v48 = *(_QWORD *)(v46 + 16);
        }
        aBlock = (void **)v48;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v59, v45 + 14, v45 + 22);
        swift_release(a2);
        _os_log_impl((void *)&_mh_execute_header, v43, v44, "Session count: %ld -> %ld", (uint8_t *)v45, 0x16u);
        swift_slowDealloc(v45, -1, -1);

        v32 = v57;
      }
      else
      {

        swift_release(a2);
      }
      v49 = *v8;
      if ((*v8 & 0xC000000000000001) != 0)
      {
        if (v49 < 0)
          v50 = *v8;
        else
          v50 = v49 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(*v8);
        __CocoaSet.count.getter(v50);
      }
      else
      {
        swift_bridgeObjectRetain(*v8);
      }
      sub_10001D8A8(v55, v6);
      swift_bridgeObjectRelease();
    }
    else
    {
      v53 = v6;
      if (qword_1010EA470 != -1)
        swift_once(&qword_1010EA470, sub_100C6BFB4);
      v33 = type metadata accessor for Logger(0);
      sub_10001A9E8(v33, (uint64_t)qword_1011B8010);
      v34 = (void **)v23;
      v35 = Logger.logObject.getter(v34);
      v36 = static os_log_type_t.error.getter(v35);
      if (os_log_type_enabled(v35, v36))
      {
        v37 = (uint8_t *)swift_slowAlloc(12, -1);
        v38 = (void ***)swift_slowAlloc(8, -1);
        *(_DWORD *)v37 = 138412290;
        aBlock = v34;
        v54 = (uint64_t)v7;
        v39 = v34;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v59, v37 + 4, v37 + 12);
        *v38 = v34;

        _os_log_impl((void *)&_mh_execute_header, v35, v36, "Failed to make XPCSession from %@", v37, 0xCu);
        v40 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
        swift_arrayDestroy(v38, 1, v40);
        swift_slowDealloc(v38, -1, -1);
        swift_slowDealloc(v37, -1, -1);

        sub_10001D8A8(v54, v53);
      }
      else
      {
        sub_10001D8A8((uint64_t)v7, v53);

      }
      return 0;
    }
  }
  return v32;
}

_QWORD *sub_1000122FC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = a1[1];
  v3 = a1[2];
  v4 = a1[3];
  v5 = a1[4];
  v6 = a1[6];
  swift_bridgeObjectRelease(a1[8]);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v6);
  return a1;
}

_QWORD *sub_100012368(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = a1[1];
  v3 = a1[2];
  v4 = a1[3];
  v5 = a1[4];
  v6 = a1[8];
  swift_bridgeObjectRetain(a1[6]);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  return a1;
}

uint64_t sub_1000123D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t result;
  unint64_t v21;
  Swift::String v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  unint64_t v29;
  _QWORD v30[5];
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  _UNKNOWN **v34;
  uint64_t v35;
  unint64_t v36;

  v6 = type metadata accessor for DefaultConfigurationLayer(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10001A9A8(&qword_101116A08);
  __chkstk_darwin(v10);
  v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_QWORD *)(a2 + 16);
  if (v13)
  {
    v26 = a2;
    v27 = a3;
    v14 = a2 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
    v25 = v7;
    v15 = *(_QWORD *)(v7 + 72);
    swift_bridgeObjectRetain(a2);
    while (1)
    {
      sub_100018E88(v14, (uint64_t)v9);
      v30[3] = v6;
      v30[4] = &off_1010886B8;
      v16 = sub_100018F08(v30);
      sub_100018E88((uint64_t)v9, (uint64_t)v16);
      swift_getAtKeyPath(&v28, v30, a1);
      v17 = v29;
      sub_10001EF3C(v28, v29);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v30);
      if (v17 >> 60 != 15)
        break;
      sub_1000126B0((uint64_t)v9, type metadata accessor for DefaultConfigurationLayer);
      v14 += v15;
      if (!--v13)
      {
        v18 = 1;
        goto LABEL_8;
      }
    }
    sub_1000126EC((uint64_t)v9, (uint64_t)v12, type metadata accessor for DefaultConfigurationLayer);
    v18 = 0;
LABEL_8:
    a2 = v26;
    a3 = v27;
    v7 = v25;
  }
  else
  {
    swift_bridgeObjectRetain(a2);
    v18 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v12, v18, 1, v6);
  swift_bridgeObjectRelease(a2);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v12, 1, v6) == 1)
  {
    sub_100004048((uint64_t)v12, &qword_101116A08);
  }
  else
  {
    v33 = v6;
    v34 = &off_1010886B8;
    v19 = sub_100018F08(&v31);
    sub_1000126EC((uint64_t)v12, (uint64_t)v19, type metadata accessor for DefaultConfigurationLayer);
    swift_getAtKeyPath(&v35, &v31, a1);
    result = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v31);
    v21 = v36;
    if (v36 >> 60 != 15)
    {
      *a3 = v35;
      a3[1] = v21;
      return result;
    }
  }
  v31 = 0;
  v32 = 0xE000000000000000;
  _StringGuts.grow(_:)(40);
  v22._object = (void *)0x8000000100ED5FD0;
  v22._countAndFlagsBits = 0xD000000000000026;
  String.append(_:)(v22);
  v30[0] = a1;
  v23 = sub_10001A9A8(&qword_101116A28);
  _print_unlocked<A, B>(_:_:)(v30, &v31, v23, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v31, v32, "searchpartyd/Configuration.swift", 32, 2, 24, 0);
  __break(1u);
  return result;
}

uint64_t sub_1000126B0(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v3;

  v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1000126EC(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

void sub_100012730()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  void (*v26)(uint64_t, unint64_t, uint64_t);
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  Class v51;
  Class v52;
  Class v53;
  uint64_t v54;
  Class v55;
  Class v56;
  void (*v57)(uint64_t, uint64_t);
  void (*v58)(uint64_t, uint64_t);
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void (*v75)(void);
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  Class isa;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  void *v107;
  uint64_t v108;
  void *v109;
  uint64_t v110;
  id v111;
  id v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  id v134[3];

  v1 = *(_QWORD *)(v0 + 1024);
  v2 = *(_QWORD *)(v0 + 1016);
  *(_QWORD *)(v0 + 1032) = v2;
  v3 = *(_QWORD *)(v2 + 16);
  *(_QWORD *)(v0 + 1040) = v3;
  if (!v3)
  {
LABEL_38:
    swift_bridgeObjectRelease();
    v59 = *(_QWORD *)(v0 + 736);
    v60 = *(_QWORD *)(v0 + 728);
    v61 = *(_QWORD *)(v0 + 720);
    v62 = *(_QWORD *)(v0 + 712);
    v63 = *(_QWORD *)(v0 + 704);
    v64 = *(_QWORD *)(v0 + 696);
    v65 = *(_QWORD *)(v0 + 688);
    v76 = *(_QWORD *)(v0 + 680);
    v77 = *(_QWORD *)(v0 + 672);
    v78 = *(_QWORD *)(v0 + 664);
    v79 = *(_QWORD *)(v0 + 640);
    v80 = *(_QWORD *)(v0 + 632);
    v81 = *(_QWORD *)(v0 + 608);
    v82 = *(_QWORD *)(v0 + 592);
    v83 = *(_QWORD *)(v0 + 584);
    v84 = *(_QWORD *)(v0 + 576);
    v85 = *(_QWORD *)(v0 + 568);
    v86 = *(_QWORD *)(v0 + 560);
    v87 = *(_QWORD *)(v0 + 552);
    v88 = *(_QWORD *)(v0 + 544);
    v89 = *(_QWORD *)(v0 + 536);
    v90 = *(_QWORD *)(v0 + 528);
    v91 = *(_QWORD *)(v0 + 520);
    v92 = *(_QWORD *)(v0 + 488);
    v93 = *(_QWORD *)(v0 + 480);
    v94 = *(_QWORD *)(v0 + 472);
    v95 = *(_QWORD *)(v0 + 464);
    v96 = *(_QWORD *)(v0 + 456);
    v97 = *(_QWORD *)(v0 + 448);
    v98 = *(_QWORD *)(v0 + 440);
    v99 = *(_QWORD *)(v0 + 416);
    v100 = *(_QWORD *)(v0 + 408);
    v101 = *(_QWORD *)(v0 + 400);
    v102 = *(_QWORD *)(v0 + 392);
    v104 = *(_QWORD *)(v0 + 384);
    v106 = *(_QWORD *)(v0 + 360);
    v108 = *(_QWORD *)(v0 + 352);
    v110 = *(_QWORD *)(v0 + 344);
    v113 = *(_QWORD *)(v0 + 328);
    v115 = *(_QWORD *)(v0 + 320);
    v117 = *(_QWORD *)(v0 + 312);
    v119 = *(_QWORD *)(v0 + 288);
    v121 = *(_QWORD *)(v0 + 280);
    v123 = *(_QWORD *)(v0 + 272);
    v125 = *(_QWORD *)(v0 + 264);
    v127 = *(_QWORD *)(v0 + 240);
    v129 = *(_QWORD *)(v0 + 232);
    v131 = *(_QWORD *)(v0 + 224);
    v133 = *(_QWORD *)(v0 + 200);
    sub_100004F9C(*(_QWORD *)(v0 + 168));
    swift_bridgeObjectRelease();
    v66 = *(_QWORD *)(v0 + 128);
    swift_task_dealloc(v59);
    swift_task_dealloc(v60);
    swift_task_dealloc(v61);
    swift_task_dealloc(v62);
    swift_task_dealloc(v63);
    swift_task_dealloc(v64);
    swift_task_dealloc(v65);
    swift_task_dealloc(v76);
    swift_task_dealloc(v77);
    swift_task_dealloc(v78);
    swift_task_dealloc(v79);
    swift_task_dealloc(v80);
    swift_task_dealloc(v81);
    swift_task_dealloc(v82);
    swift_task_dealloc(v83);
    swift_task_dealloc(v84);
    swift_task_dealloc(v85);
    swift_task_dealloc(v86);
    swift_task_dealloc(v87);
    swift_task_dealloc(v88);
    swift_task_dealloc(v89);
    swift_task_dealloc(v90);
    swift_task_dealloc(v91);
    swift_task_dealloc(v92);
    swift_task_dealloc(v93);
    swift_task_dealloc(v94);
    swift_task_dealloc(v95);
    swift_task_dealloc(v96);
    swift_task_dealloc(v97);
    swift_task_dealloc(v98);
    swift_task_dealloc(v99);
    swift_task_dealloc(v100);
    swift_task_dealloc(v101);
    swift_task_dealloc(v102);
    swift_task_dealloc(v104);
    swift_task_dealloc(v106);
    swift_task_dealloc(v108);
    swift_task_dealloc(v110);
    swift_task_dealloc(v113);
    swift_task_dealloc(v115);
    swift_task_dealloc(v117);
    swift_task_dealloc(v119);
    swift_task_dealloc(v121);
    swift_task_dealloc(v123);
    swift_task_dealloc(v125);
    swift_task_dealloc(v127);
    swift_task_dealloc(v129);
    swift_task_dealloc(v131);
    swift_task_dealloc(v133);
    (*(void (**)(uint64_t))(v0 + 8))(v66);
    return;
  }
  *(_DWORD *)(v0 + 1148) = *(_DWORD *)(*(_QWORD *)(v0 + 256) + 80);
  *(_QWORD *)(v0 + 1048) = 0;
  if (*(_QWORD *)(v2 + 16))
  {
    v4 = 0;
    do
    {
      v5 = *(_QWORD *)(v0 + 288);
      v6 = *(_QWORD *)(v0 + 248);
      sub_10005972C(v2+ ((*(unsigned __int8 *)(v0 + 1148) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 1148))+ *(_QWORD *)(*(_QWORD *)(v0 + 256) + 72) * v4, v5, type metadata accessor for OwnerSharingCircle);
      v7 = swift_bridgeObjectRetain(*(_QWORD *)(v5 + *(int *)(v6 + 32)));
      v8 = sub_100508A54(v7);
      swift_bridgeObjectRelease();
      v9 = swift_task_alloc(32);
      *(_QWORD *)(v9 + 16) = v5;
      v10 = sub_100307244((uint64_t)&_swiftEmptyDictionarySingleton, (void (*)(uint64_t *, char *))sub_1000D931C, v9, v8);
      *(_QWORD *)(v0 + 1056) = v10;
      *(_QWORD *)(v0 + 1064) = v1;
      swift_release();
      swift_task_dealloc(v9);
      v11 = *(_BYTE *)(v10 + 32);
      *(_BYTE *)(v0 + 75) = v11;
      v12 = -1 << v11;
      if (-v12 < 64)
        v13 = ~(-1 << -(char)v12);
      else
        v13 = -1;
      v14 = v13 & *(_QWORD *)(v10 + 64);
      if (v14)
      {
        v15 = 0;
        v16 = __clz(__rbit64(v14));
        v17 = (v14 - 1) & v14;
        v18 = *(_QWORD **)(v0 + 1056);
      }
      else
      {
        v27 = 63 - v12;
        v18 = *(_QWORD **)(v0 + 1056);
        if (v27 <= 0x7F)
          goto LABEL_30;
        v28 = v18[9];
        if (v28)
        {
          v15 = 1;
        }
        else
        {
          if (v27 < 0xC0)
            goto LABEL_30;
          v28 = v18[10];
          if (v28)
          {
            v15 = 2;
          }
          else
          {
            if (v27 < 0x100)
              goto LABEL_30;
            v28 = v18[11];
            if (v28)
            {
              v15 = 3;
            }
            else
            {
              if (v27 < 0x140)
                goto LABEL_30;
              v28 = v18[12];
              if (!v28)
              {
                v29 = 0;
                v30 = v27 >> 6;
                if (v30 <= 5)
                  v30 = 5;
                v31 = v30 - 5;
                while (v31 != v29)
                {
                  v28 = v18[v29++ + 13];
                  if (v28)
                  {
                    v15 = v29 + 4;
                    goto LABEL_14;
                  }
                }
LABEL_30:
                v32 = *(_QWORD *)(v0 + 504);
                (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 432) + 56))(*(_QWORD *)(v0 + 480), 1, 1, *(_QWORD *)(v0 + 424));
                swift_release();
                v26 = *(void (**)(uint64_t, unint64_t, uint64_t))(v32 + 16);
                goto LABEL_31;
              }
              v15 = 4;
            }
          }
        }
LABEL_14:
        v17 = (v28 - 1) & v28;
        v16 = __clz(__rbit64(v28)) + (v15 << 6);
      }
      *(_QWORD *)(v0 + 1080) = v17;
      *(_QWORD *)(v0 + 1072) = v15;
      v20 = *(_QWORD *)(v0 + 496);
      v19 = *(_QWORD *)(v0 + 504);
      v21 = *(_QWORD *)(v0 + 480);
      v22 = *(_QWORD *)(v0 + 424);
      v23 = *(_QWORD *)(v0 + 432);
      v24 = *(_QWORD *)(v19 + 72) * v16;
      v25 = v18[6] + v24;
      v26 = *(void (**)(uint64_t, unint64_t, uint64_t))(v19 + 16);
      *(_QWORD *)(v0 + 1088) = v26;
      v26(v21, v25, v20);
      v26(v21 + *(int *)(v22 + 48), v18[7] + v24, v20);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v23 + 56))(v21, 0, 1, v22);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22) != 1)
      {
        v67 = *(_QWORD *)(v0 + 752);
        v69 = *(_QWORD *)(v0 + 496);
        v68 = *(_QWORD *)(v0 + 504);
        v70 = *(_QWORD *)(v0 + 480);
        v71 = *(_QWORD *)(v0 + 440);
        v72 = *(int *)(*(_QWORD *)(v0 + 424) + 48);
        *(_DWORD *)(v0 + 1152) = v72;
        v73 = v71 + v72;
        v74 = v70 + v72;
        v75 = *(void (**)(void))(v68 + 32);
        *(_QWORD *)(v0 + 1096) = v75;
        v75();
        ((void (*)(uint64_t, uint64_t, uint64_t))v75)(v73, v74, v69);
        swift_task_switch(sub_1000D4AA0, v67, 0);
        return;
      }
      swift_release();
LABEL_31:
      v33 = *(_QWORD *)(v0 + 536);
      v34 = *(_QWORD *)(v0 + 528);
      v35 = *(_QWORD *)(v0 + 496);
      v36 = *(_QWORD *)(v0 + 288);
      v37 = *(_QWORD *)(v0 + 248);
      v38 = v36 + *(int *)(v37 + 20);
      v26(*(_QWORD *)(v0 + 544), v38, v35);
      v26(v33, v36 + *(int *)(v37 + 24), v35);
      v39 = ((uint64_t (*)(uint64_t, unint64_t, uint64_t))v26)(v34, v38, v35);
      UUID.init()(v39);
      if (qword_1010E9A00 != -1)
        swift_once(&qword_1010E9A00, sub_1001EB16C);
      v40 = *(_QWORD *)(v0 + 1064);
      v41 = *(_QWORD *)(v0 + 288);
      v42 = qword_1011B6A68;
      v43 = (void *)qword_1011B6A70;
      v44 = byte_1011B6A60;
      v45 = sub_100ACD7B4(byte_1011B6A60, qword_1011B6A68, (void *)qword_1011B6A70);
      v46 = sub_100ACD7B4(v44, v42, v43);
      v47 = objc_autoreleasePoolPush();
      sub_10084EE10(v41);
      if (v40)
      {
        objc_autoreleasePoolPop(v47);
        return;
      }
      v114 = *(_QWORD *)(v0 + 520);
      v116 = *(_QWORD *)(v0 + 528);
      v124 = *(_QWORD *)(v0 + 544);
      v126 = *(_QWORD *)(v0 + 504);
      v107 = (void *)v46;
      v48 = *(_QWORD *)(v0 + 496);
      v49 = *(_QWORD *)(v0 + 320);
      v105 = *(_QWORD *)(v0 + 312);
      v120 = *(_QWORD *)(v0 + 536);
      v122 = *(_QWORD *)(v0 + 304);
      v130 = *(_QWORD *)(v0 + 1048) + 1;
      v132 = *(_QWORD *)(v0 + 1040);
      v118 = *(_QWORD *)(v0 + 296);
      v128 = *(_QWORD *)(v0 + 288);
      objc_autoreleasePoolPop(v47);
      static Date.distantFuture.getter(v50);
      v111 = objc_allocWithZone((Class)SPBeaconShare);
      isa = UUID._bridgeToObjectiveC()().super.isa;
      v51 = UUID._bridgeToObjectiveC()().super.isa;
      v52 = UUID._bridgeToObjectiveC()().super.isa;
      v53 = UUID._bridgeToObjectiveC()().super.isa;
      v54 = v45;
      v109 = (void *)v45;
      v55 = Date._bridgeToObjectiveC()().super.isa;
      v56 = Date._bridgeToObjectiveC()().super.isa;
      v112 = objc_msgSend(v111, "initWithIdentifier:beaconIdentifier:sharingCircleIdentifier:peerTrustIdentifier:owner:sharee:state:creationDate:expirationDate:", isa, v51, v52, v53, v54, v107, 5, v55, v56);

      v57 = *(void (**)(uint64_t, uint64_t))(v122 + 8);
      v57(v49, v118);
      v57(v105, v118);
      v58 = *(void (**)(uint64_t, uint64_t))(v126 + 8);
      v58(v114, v48);
      v58(v116, v48);
      v58(v120, v48);
      v58(v124, v48);

      sub_100A0B060((Swift::Int *)v134, v112);
      sub_1000126B0(v128, type metadata accessor for OwnerSharingCircle);
      if (v130 == v132)
        goto LABEL_38;
      v1 = 0;
      v4 = *(_QWORD *)(v0 + 1048) + 1;
      *(_QWORD *)(v0 + 1048) = v4;
      v2 = *(_QWORD *)(v0 + 1032);
    }
    while (v4 < *(_QWORD *)(v2 + 16));
  }
  __break(1u);
}

uint64_t sub_100013024(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;

  *(_QWORD *)(v2 + 184) = v1;
  *(_BYTE *)(v2 + 73) = a1;
  v3 = sub_10001A9A8((uint64_t *)&unk_1010EE160);
  *(_QWORD *)(v2 + 192) = v3;
  *(_QWORD *)(v2 + 200) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for OwnerPeerTrust(0);
  *(_QWORD *)(v2 + 208) = v4;
  v5 = *(_QWORD *)(v4 - 8);
  *(_QWORD *)(v2 + 216) = v5;
  v6 = (*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v2 + 224) = swift_task_alloc(v6);
  *(_QWORD *)(v2 + 232) = swift_task_alloc(v6);
  *(_QWORD *)(v2 + 240) = swift_task_alloc(v6);
  v7 = type metadata accessor for OwnerSharingCircle(0);
  *(_QWORD *)(v2 + 248) = v7;
  v8 = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v2 + 256) = v8;
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v2 + 264) = swift_task_alloc(v9);
  *(_QWORD *)(v2 + 272) = swift_task_alloc(v9);
  *(_QWORD *)(v2 + 280) = swift_task_alloc(v9);
  *(_QWORD *)(v2 + 288) = swift_task_alloc(v9);
  v10 = type metadata accessor for Date(0);
  *(_QWORD *)(v2 + 296) = v10;
  v11 = *(_QWORD *)(v10 - 8);
  *(_QWORD *)(v2 + 304) = v11;
  v12 = (*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v2 + 312) = swift_task_alloc(v12);
  *(_QWORD *)(v2 + 320) = swift_task_alloc(v12);
  *(_QWORD *)(v2 + 328) = swift_task_alloc(v12);
  v13 = sub_10001A9A8(&qword_1010EC868);
  *(_QWORD *)(v2 + 336) = v13;
  v14 = (*(_QWORD *)(*(_QWORD *)(v13 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v2 + 344) = swift_task_alloc(v14);
  *(_QWORD *)(v2 + 352) = swift_task_alloc(v14);
  *(_QWORD *)(v2 + 360) = swift_task_alloc(v14);
  v15 = type metadata accessor for MemberPeerTrust(0);
  *(_QWORD *)(v2 + 368) = v15;
  v16 = *(_QWORD *)(v15 - 8);
  *(_QWORD *)(v2 + 376) = v16;
  v17 = (*(_QWORD *)(v16 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v2 + 384) = swift_task_alloc(v17);
  *(_QWORD *)(v2 + 392) = swift_task_alloc(v17);
  *(_QWORD *)(v2 + 400) = swift_task_alloc(v17);
  *(_QWORD *)(v2 + 408) = swift_task_alloc(v17);
  *(_QWORD *)(v2 + 416) = swift_task_alloc(v17);
  v18 = sub_10001A9A8(&qword_1010EE170);
  *(_QWORD *)(v2 + 424) = v18;
  v19 = *(_QWORD *)(v18 - 8);
  *(_QWORD *)(v2 + 432) = v19;
  v20 = (*(_QWORD *)(v19 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v2 + 440) = swift_task_alloc(v20);
  *(_QWORD *)(v2 + 448) = swift_task_alloc(v20);
  *(_QWORD *)(v2 + 456) = swift_task_alloc(v20);
  *(_QWORD *)(v2 + 464) = swift_task_alloc(v20);
  *(_QWORD *)(v2 + 472) = swift_task_alloc(v20);
  v21 = (*(_QWORD *)(*(_QWORD *)(sub_10001A9A8(&qword_1010EE178) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v2 + 480) = swift_task_alloc(v21);
  *(_QWORD *)(v2 + 488) = swift_task_alloc(v21);
  v22 = type metadata accessor for UUID(0);
  *(_QWORD *)(v2 + 496) = v22;
  v23 = *(_QWORD *)(v22 - 8);
  *(_QWORD *)(v2 + 504) = v23;
  v24 = *(_QWORD *)(v23 + 64);
  *(_QWORD *)(v2 + 512) = v24;
  v25 = (v24 + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v2 + 520) = swift_task_alloc(v25);
  *(_QWORD *)(v2 + 528) = swift_task_alloc(v25);
  *(_QWORD *)(v2 + 536) = swift_task_alloc(v25);
  *(_QWORD *)(v2 + 544) = swift_task_alloc(v25);
  *(_QWORD *)(v2 + 552) = swift_task_alloc(v25);
  *(_QWORD *)(v2 + 560) = swift_task_alloc(v25);
  *(_QWORD *)(v2 + 568) = swift_task_alloc(v25);
  *(_QWORD *)(v2 + 576) = swift_task_alloc(v25);
  *(_QWORD *)(v2 + 584) = swift_task_alloc(v25);
  *(_QWORD *)(v2 + 592) = swift_task_alloc(v25);
  v26 = sub_10001A9A8((uint64_t *)&unk_1010EE180);
  *(_QWORD *)(v2 + 600) = v26;
  *(_QWORD *)(v2 + 608) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v26 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = type metadata accessor for SharedBeaconRecord(0);
  *(_QWORD *)(v2 + 616) = v27;
  v28 = *(_QWORD *)(v27 - 8);
  *(_QWORD *)(v2 + 624) = v28;
  v29 = (*(_QWORD *)(v28 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v2 + 632) = swift_task_alloc(v29);
  *(_QWORD *)(v2 + 640) = swift_task_alloc(v29);
  v30 = type metadata accessor for MemberSharingCircle(0);
  *(_QWORD *)(v2 + 648) = v30;
  v31 = *(_QWORD *)(v30 - 8);
  *(_QWORD *)(v2 + 656) = v31;
  v32 = (*(_QWORD *)(v31 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v2 + 664) = swift_task_alloc(v32);
  *(_QWORD *)(v2 + 672) = swift_task_alloc(v32);
  *(_QWORD *)(v2 + 680) = swift_task_alloc(v32);
  *(_QWORD *)(v2 + 688) = swift_task_alloc(v32);
  *(_QWORD *)(v2 + 696) = swift_task_alloc(v32);
  *(_QWORD *)(v2 + 704) = swift_task_alloc(v32);
  *(_QWORD *)(v2 + 712) = swift_task_alloc(v32);
  *(_QWORD *)(v2 + 720) = swift_task_alloc(v32);
  *(_QWORD *)(v2 + 728) = swift_task_alloc(v32);
  *(_QWORD *)(v2 + 736) = swift_task_alloc(v32);
  return swift_task_switch(sub_10000AC60, v1, 0);
}

uint64_t type metadata accessor for MemberPeerTrust(uint64_t a1)
{
  uint64_t result;

  result = qword_101112690;
  if (!qword_101112690)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for MemberPeerTrust);
  return result;
}

uint64_t type metadata accessor for OwnerPeerTrust(uint64_t a1)
{
  uint64_t result;

  result = qword_1010F2A80;
  if (!qword_1010F2A80)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for OwnerPeerTrust);
  return result;
}

uint64_t sub_1000134A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;

  v4[67] = v3;
  v4[66] = a3;
  v4[65] = a2;
  v4[64] = a1;
  v5 = (*(_QWORD *)(*(_QWORD *)(sub_10001A9A8(&qword_1010ED860) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[68] = swift_task_alloc(v5);
  v4[69] = swift_task_alloc(v5);
  v6 = type metadata accessor for MemberSharingCircle(0);
  v4[70] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v4[71] = v7;
  v8 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[72] = swift_task_alloc(v8);
  v4[73] = swift_task_alloc(v8);
  v9 = type metadata accessor for UUID(0);
  v4[74] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v4[75] = v10;
  v11 = *(_QWORD *)(v10 + 64);
  v4[76] = v11;
  v12 = (v11 + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[77] = swift_task_alloc(v12);
  v4[78] = swift_task_alloc(v12);
  v4[79] = swift_task_alloc(v12);
  v4[80] = swift_task_alloc(v12);
  v4[81] = swift_task_alloc(v12);
  v4[82] = swift_task_alloc(v12);
  v13 = (*(_QWORD *)(*(_QWORD *)(sub_10001A9A8((uint64_t *)&unk_101111440) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[83] = swift_task_alloc(v13);
  v4[84] = swift_task_alloc(v13);
  v14 = sub_10001A9A8((uint64_t *)&unk_1010EE180);
  v4[85] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v14 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for SharedBeaconRecord(0);
  v4[86] = v15;
  v16 = *(_QWORD *)(v15 - 8);
  v4[87] = v16;
  v17 = (*(_QWORD *)(v16 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[88] = swift_task_alloc(v17);
  v4[89] = swift_task_alloc(v17);
  return swift_task_switch(sub_10000AF24, v3, 0);
}

uint64_t type metadata accessor for MemberSharingCircle(uint64_t a1)
{
  uint64_t result;

  result = qword_1010F2FD8;
  if (!qword_1010F2FD8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for MemberSharingCircle);
  return result;
}

uint64_t sub_100013688()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  v1 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v0 + 56) = v1;
  v2 = sub_10001A9A8(&qword_1010EBB48);
  *v1 = v0;
  v1[1] = sub_10001C878;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 16, 0, 0, 0x6976726553746567, 0xEC00000029286563, sub_1000308D8, *(_QWORD *)(v0 + 24), v2);
}

unint64_t sub_10001371C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1010F0E60;
  if (!qword_1010F0E60)
  {
    v1 = sub_10001F784((uint64_t *)&unk_1010F1570);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_1010F0E60);
  }
  return result;
}

uint64_t sub_100013768()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = swift_task_alloc(32);
  *(_QWORD *)(v0 + 40) = v1;
  *(_OWORD *)(v1 + 16) = *(_OWORD *)(v0 + 24);
  v2 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v0 + 48) = v2;
  *v2 = v0;
  v2[1] = sub_10001C87C;
  return withCheckedContinuation<A>(isolation:function:_:)(v2, 0, 0, 0x4970757472617473, 0xEF2928656E6F4473, sub_100033730, v1, (char *)&type metadata for () + 8);
}

uint64_t sub_100013808(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v25[2];
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD aBlock[5];
  uint64_t v31;

  v25[0] = a3;
  v5 = type metadata accessor for DispatchWorkItemFlags(0);
  v28 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v7 = (char *)v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  v26 = *(_QWORD *)(v8 - 8);
  v27 = v8;
  __chkstk_darwin(v8);
  v10 = (char *)v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10001A9A8(&qword_101108DF0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  __chkstk_darwin(v11);
  v14 = (char *)v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25[1] = *(_QWORD *)(a2 + 24);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a1, v11);
  v15 = *(unsigned __int8 *)(v12 + 80);
  v16 = (v15 + 24) & ~v15;
  v17 = (v13 + v16 + 7) & 0xFFFFFFFFFFFFFFF8;
  v18 = swift_allocObject(&unk_101074FB0, v17 + 8, v15 | 7);
  *(_QWORD *)(v18 + 16) = a2;
  (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(v18 + v16, v14, v11);
  *(_QWORD *)(v18 + v17) = v25[0];
  aBlock[4] = sub_1000170FC;
  v31 = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_101074FC8;
  v19 = _Block_copy(aBlock);
  v20 = swift_retain();
  static DispatchQoS.unspecified.getter(v20);
  v29 = _swiftEmptyArrayStorage;
  v21 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v22 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v23 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v29, v22, v23, v5, v21);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v10, v7, v19);
  _Block_release(v19);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v7, v5);
  (*(void (**)(char *, uint64_t))(v26 + 8))(v10, v27);
  return swift_release(v31);
}

_QWORD *sub_100013B60()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 80);
  if (v1)
  {
    v2 = *(_QWORD **)(v0 + 80);
  }
  else
  {
    v3 = v0;
    v4 = type metadata accessor for ServiceStateProvider();
    swift_allocObject(v4, 64, 7);
    v2 = sub_100B045F8();
    v5 = *(_QWORD *)(v3 + 80);
    *(_QWORD *)(v3 + 80) = v2;
    swift_retain(v2);
    swift_release(v5);
    v1 = 0;
  }
  swift_retain(v1);
  return v2;
}

id sub_100013BD0()
{
  uint64_t v0;
  void *v1;
  id v2;
  void *v3;
  void *v4;
  id v5;

  v1 = *(void **)(v0 + 32);
  if (v1)
  {
    v2 = *(id *)(v0 + 32);
  }
  else
  {
    if (qword_1010EA1C8 == -1)
    {
      v3 = 0;
    }
    else
    {
      swift_once(&qword_1010EA1C8, sub_100B070BC);
      v3 = *(void **)(v0 + 32);
    }
    v4 = (void *)qword_1011B7C70;
    *(_QWORD *)(v0 + 32) = qword_1011B7C70;
    v2 = v4;

    v1 = 0;
  }
  v5 = v1;
  return v2;
}

void sub_100013C58()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  void (*v23)(uint64_t, uint64_t, uint64_t, _QWORD);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t My;
  _QWORD *v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(uint64_t, uint64_t, __n128);
  __n128 v51;
  uint64_t v52;
  __n128 v53;
  uint64_t v54;
  void (*v55)(uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void (*v59)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void (*v65)(uint64_t, uint64_t);
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  uint64_t v76;
  NSObject *v77;
  os_log_type_t v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  void *v93;
  uint64_t v94;
  uint64_t v95;
  Class isa;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t *v115;
  _QWORD *v116;
  uint64_t *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  _QWORD *v123;
  uint64_t v124;

  v1 = *(_QWORD *)(v0 + 760);
  v2 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v0 + 816) = v2;
  if (!v2)
  {
LABEL_66:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v106 = *(_QWORD *)(v0 + 704);
    v107 = *(_QWORD *)(v0 + 680);
    v108 = *(_QWORD *)(v0 + 672);
    v109 = *(_QWORD *)(v0 + 664);
    v110 = *(_QWORD *)(v0 + 656);
    v111 = *(_QWORD *)(v0 + 648);
    v112 = *(_QWORD *)(v0 + 640);
    v113 = *(_QWORD *)(v0 + 632);
    v114 = *(_QWORD *)(v0 + 624);
    v118 = *(_QWORD *)(v0 + 616);
    v119 = *(_QWORD *)(v0 + 584);
    v121 = *(_QWORD *)(v0 + 576);
    v122 = *(_QWORD *)(v0 + 552);
    v124 = *(_QWORD *)(v0 + 544);
    swift_task_dealloc(*(_QWORD *)(v0 + 712));
    swift_task_dealloc(v106);
    swift_task_dealloc(v107);
    swift_task_dealloc(v108);
    swift_task_dealloc(v109);
    swift_task_dealloc(v110);
    swift_task_dealloc(v111);
    swift_task_dealloc(v112);
    swift_task_dealloc(v113);
    swift_task_dealloc(v114);
    swift_task_dealloc(v118);
    swift_task_dealloc(v119);
    swift_task_dealloc(v121);
    swift_task_dealloc(v122);
    swift_task_dealloc(v124);
    (*(void (**)(void))(v0 + 8))();
    return;
  }
  *(_QWORD *)(v0 + 824) = *(_QWORD *)(*(_QWORD *)(v0 + 808) + 16);
  *(_DWORD *)(v0 + 936) = enum case for Feature.FindMy.itemSharing(_:);
  *(_QWORD *)(v0 + 832) = 0;
  if (!*(_QWORD *)(v1 + 16))
  {
LABEL_68:
    __break(1u);
    return;
  }
  v3 = 0;
  v4 = (_QWORD *)(v0 + 16);
  v123 = (_QWORD *)(v0 + 56);
  v5 = v0 + 96;
  v6 = (_QWORD *)(v0 + 136);
  v7 = (_QWORD *)(v0 + 216);
  v115 = (uint64_t *)(v0 + 464);
  v116 = (_QWORD *)(v0 + 296);
  v117 = (uint64_t *)(v0 + 480);
  while (1)
  {
    v8 = *(_QWORD *)(v0 + 824);
    v9 = (_QWORD *)(v1 + 48 * v3);
    v10 = v9[4];
    *(_QWORD *)(v0 + 840) = v10;
    *(_QWORD *)(v0 + 848) = v9[5];
    *(_QWORD *)(v0 + 856) = v9[6];
    v11 = v9[7];
    *(_QWORD *)(v0 + 864) = v11;
    v12 = v9[9];
    *(_QWORD *)(v0 + 872) = v12;
    *(_QWORD *)(v0 + 480) = _swiftEmptyArrayStorage;
    swift_bridgeObjectRetain(v11);
    swift_bridgeObjectRetain(v12);
    if (v8)
      break;
    swift_retain();
LABEL_42:
    swift_retain_n(v10, 2);
    swift_bridgeObjectRetain_n(v11, 2);
    v76 = swift_bridgeObjectRetain_n(v12, 2);
    v77 = Logger.logObject.getter(v76);
    v78 = static os_log_type_t.default.getter(v77);
    if (os_log_type_enabled(v77, v78))
    {
      v79 = swift_slowAlloc(22, -1);
      v120 = swift_slowAlloc(32, -1);
      *v115 = v120;
      *(_DWORD *)v79 = 134218242;
      swift_beginAccess(v117, v0 + 360, 0, 0);
      v80 = *v117;
      v81 = v7;
      if ((unint64_t)*v117 >> 62)
      {
        if (v80 < 0)
          v99 = *v117;
        else
          v99 = v80 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v80);
        v82 = _CocoaArrayWrapper.endIndex.getter(v99);
        swift_bridgeObjectRelease();
      }
      else
      {
        v82 = *(_QWORD *)((v80 & 0xFFFFFFFFFFFFF8) + 0x10);
      }
      v83 = *(_QWORD *)(v0 + 872);
      v84 = *(_QWORD *)(v0 + 864);
      v85 = *(_QWORD *)(v0 + 856);
      v86 = *(_QWORD *)(v0 + 840);
      *(_QWORD *)(v79 + 4) = v82;
      *(_WORD *)(v79 + 12) = 2082;
      if (v84)
        v87 = v85;
      else
        v87 = 0x6E776F6E6B6E75;
      if (v84)
        v88 = v84;
      else
        v88 = 0xE700000000000000;
      swift_bridgeObjectRetain(v84);
      *(_QWORD *)(v79 + 14) = sub_100016940(v87, v88, v115);
      swift_bridgeObjectRelease_n(v83, 2);
      swift_bridgeObjectRelease_n(v84, 2);
      swift_release_n(v86, 2);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v77, v78, "receivedSimpleBeaconUpdates - updating beacons (count) %ld to bundle: %{public}s.", (uint8_t *)v79, 0x16u);
      swift_arrayDestroy(v120, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v120, -1, -1);
      swift_slowDealloc(v79, -1, -1);

      v7 = v81;
      v4 = (_QWORD *)(v0 + 16);
    }
    else
    {
      v89 = *(_QWORD *)(v0 + 872);
      v90 = *(_QWORD *)(v0 + 864);
      v91 = *(_QWORD *)(v0 + 840);

      swift_bridgeObjectRelease_n(v89, 2);
      swift_release_n(v91, 2);
      swift_bridgeObjectRelease_n(v90, 2);
    }
    v92 = *(_QWORD *)(v0 + 840);
    swift_retain();
    XPCSession.proxy.getter((_QWORD *)(v0 + 472));
    swift_release(v92);
    v93 = *(void **)(v0 + 472);
    v94 = *(_QWORD *)(v0 + 840);
    if (v93)
    {
      swift_beginAccess(v117, v0 + 336, 0, 0);
      v95 = *v117;
      sub_10000F4A0(0, (unint64_t *)&unk_101105900, SPInternalSimpleBeacon_ptr);
      swift_bridgeObjectRetain(v95);
      isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      objc_msgSend(v93, "receivedSimpleBeaconUpdates:", isa);

      swift_unknownObjectRelease(v93);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release(v94);
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_release(v94);
      swift_bridgeObjectRelease();
    }
    v6 = (_QWORD *)(v0 + 136);
    v5 = v0 + 96;
    v97 = *(_QWORD *)(v0 + 816);
    v98 = *(_QWORD *)(v0 + 832) + 1;
    swift_bridgeObjectRelease();
    if (v98 == v97)
      goto LABEL_66;
    v3 = *(_QWORD *)(v0 + 832) + 1;
    *(_QWORD *)(v0 + 832) = v3;
    v1 = *(_QWORD *)(v0 + 760);
    if (v3 >= *(_QWORD *)(v1 + 16))
      goto LABEL_68;
  }
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 808));
  swift_retain();
  swift_beginAccess(v117, v0 + 384, 0, 0);
  *(_QWORD *)(v0 + 880) = 0;
  v13 = *(_QWORD *)(v0 + 808);
  v14 = (_QWORD *)(v0 + 256);
  if (!*(_QWORD *)(v13 + 16))
  {
LABEL_67:
    __break(1u);
    goto LABEL_68;
  }
  v15 = 0;
  while (1)
  {
    sub_100030784(v13 + 40 * v15 + 32, (uint64_t)v7);
    v16 = *(_QWORD *)(v0 + 240);
    v17 = *(_QWORD *)(v0 + 248);
    sub_10001AA44(v7, v16);
    if (((*(uint64_t (**)(uint64_t, uint64_t))(v17 + 112))(v16, v17) & 1) != 0)
    {
      v18 = *(_QWORD *)(v0 + 696);
      v19 = *(_QWORD *)(v0 + 688);
      v20 = *(_QWORD *)(v0 + 680);
      sub_100030784((uint64_t)v7, v5);
      v21 = sub_10001A9A8((uint64_t *)&unk_1010F7720);
      v22 = swift_dynamicCast(v20, v5, v21, v19, 6);
      v23 = *(void (**)(uint64_t, uint64_t, uint64_t, _QWORD))(v18 + 56);
      if (v22)
      {
        v24 = *(unsigned int *)(v0 + 936);
        v25 = *(_QWORD *)(v0 + 712);
        v26 = *(_QWORD *)(v0 + 680);
        v23(v26, 0, 1, *(_QWORD *)(v0 + 688));
        sub_1000126EC(v26, v25, type metadata accessor for SharedBeaconRecord);
        My = type metadata accessor for Feature.FindMy(0);
        *(_QWORD *)(v0 + 80) = My;
        *(_QWORD *)(v0 + 88) = sub_100006C64((unint64_t *)&qword_1010EE1B0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for Feature.FindMy, (uint64_t)&protocol conformance descriptor for Feature.FindMy);
        v28 = sub_100018F08(v123);
        (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(My - 8) + 104))(v28, v24, My);
        LOBYTE(v24) = isFeatureEnabled(_:)(v123);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v123);
        v29 = *(_QWORD *)(v0 + 712);
        if ((v24 & 1) == 0)
          goto LABEL_30;
        v30 = *(unsigned __int8 *)(v29 + *(int *)(*(_QWORD *)(v0 + 688) + 64));
        sub_10005972C(v29, *(_QWORD *)(v0 + 704), type metadata accessor for SharedBeaconRecord);
        v31 = *(_QWORD *)(v0 + 704);
        if (v30 == 4)
        {
          sub_1000126B0(v31, type metadata accessor for SharedBeaconRecord);
LABEL_29:
          v29 = *(_QWORD *)(v0 + 712);
LABEL_30:
          sub_1000126B0(v29, type metadata accessor for SharedBeaconRecord);
          goto LABEL_33;
        }
        v66 = *(unsigned __int8 *)(v31 + *(int *)(*(_QWORD *)(v0 + 688) + 64));
        sub_1000126B0(v31, type metadata accessor for SharedBeaconRecord);
        if (v66 == 1)
          goto LABEL_29;
        sub_1000126B0(*(_QWORD *)(v0 + 712), type metadata accessor for SharedBeaconRecord);
      }
      else
      {
        v32 = *(_QWORD *)(v0 + 680);
        v23(v32, 1, 1, *(_QWORD *)(v0 + 688));
        sub_100004048(v32, (uint64_t *)&unk_1010EE180);
      }
    }
    v33 = *(_QWORD *)(v0 + 240);
    v34 = *(_QWORD *)(v0 + 248);
    sub_10001AA44(v7, v33);
    if (((*(uint64_t (**)(uint64_t, uint64_t))(v34 + 160))(v33, v34) & 1) != 0)
      goto LABEL_33;
    v35 = *(_QWORD *)(v0 + 848);
    v36 = *(_QWORD *)(v0 + 240);
    v37 = *(_QWORD *)(v0 + 248);
    sub_10001AA44(v7, v36);
    if ((v35 & 0x200) == 0)
    {
      if (((*(uint64_t (**)(uint64_t, uint64_t))(v37 + 112))(v36, v37) & 1) != 0)
      {
        v103 = *(_QWORD *)(v0 + 528);
        v105 = *(_QWORD *)(v0 + 240);
        v104 = *(_QWORD *)(v0 + 248);
        sub_10001AA44(v7, v105);
        (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v104 + 8) + 8) + 32))(v105);
        swift_task_switch(sub_1007199E0, v103, 0);
        return;
      }
      goto LABEL_33;
    }
    v38 = (*(uint64_t (**)(uint64_t, uint64_t))(v37 + 88))(v36, v37);
    sub_100030784((uint64_t)v7, (uint64_t)v116);
    if ((v38 & 1) != 0)
      break;
    v39 = *(_QWORD *)(v0 + 320);
    v40 = *(_QWORD *)(v0 + 328);
    sub_10001AA44(v116, v39);
    v41 = (*(uint64_t (**)(uint64_t, uint64_t))(v40 + 112))(v39, v40);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v116);
    sub_100030784((uint64_t)v7, (uint64_t)v14);
    if ((v41 & 1) != 0)
      goto LABEL_20;
    v70 = *(_QWORD *)(v0 + 280);
    v71 = *(_QWORD *)(v0 + 288);
    sub_10001AA44(v14, v70);
    v72 = (*(uint64_t (**)(uint64_t, uint64_t))(v71 + 96))(v70, v71);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v14);
    sub_100030784((uint64_t)v7, (uint64_t)v6);
    if ((v72 & 1) != 0)
      goto LABEL_21;
    v73 = *(_QWORD *)(v0 + 160);
    v74 = *(_QWORD *)(v0 + 168);
    sub_10001AA44(v6, v73);
    v75 = (*(uint64_t (**)(uint64_t, uint64_t))(v74 + 128))(v73, v74);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v6);
    if ((v75 & 1) != 0)
      goto LABEL_22;
LABEL_33:
    v68 = *(_QWORD *)(v0 + 824);
    v69 = *(_QWORD *)(v0 + 880) + 1;
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v7);
    if (v69 == v68)
    {
      swift_bridgeObjectRelease();
      v12 = *(_QWORD *)(v0 + 872);
      v11 = *(_QWORD *)(v0 + 864);
      v10 = *(_QWORD *)(v0 + 840);
      goto LABEL_42;
    }
    v15 = *(_QWORD *)(v0 + 880) + 1;
    *(_QWORD *)(v0 + 880) = v15;
    v13 = *(_QWORD *)(v0 + 808);
    if (v15 >= *(_QWORD *)(v13 + 16))
      goto LABEL_67;
  }
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v116);
  sub_100030784((uint64_t)v7, (uint64_t)v14);
LABEL_20:
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v14);
  sub_100030784((uint64_t)v7, (uint64_t)v6);
LABEL_21:
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v6);
LABEL_22:
  v42 = *(_QWORD *)(v0 + 872);
  v43 = *(_QWORD *)(v0 + 480);
  *(_QWORD *)(v0 + 912) = v43;
  v44 = *(_QWORD *)(v42 + 16);
  sub_100030784((uint64_t)v7, (uint64_t)v4);
  if (v44)
  {
    v45 = *(_QWORD *)(v0 + 872);
    v46 = *(_QWORD *)(v0 + 600);
    v47 = *(_QWORD *)(v0 + 40);
    v48 = *(_QWORD *)(v0 + 48);
    sub_10001AA44(v4, v47);
    v49 = *(_QWORD *)(*(_QWORD *)(v48 + 8) + 8);
    v50 = *(void (**)(uint64_t, uint64_t, __n128))(v49 + 32);
    swift_bridgeObjectRetain(v45);
    v51 = swift_bridgeObjectRetain(v43);
    v50(v47, v49, v51);
    v52 = v45 + ((*(unsigned __int8 *)(v46 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v46 + 80));
    v53 = swift_bridgeObjectRetain(v45);
    v54 = *(_QWORD *)(v46 + 72);
    v55 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v46 + 16);
    while (1)
    {
      v56 = *(_QWORD *)(v0 + 600);
      v57 = *(_QWORD *)(v0 + 592);
      v58 = *(_QWORD *)(v0 + 552);
      v55(v58, v52, v57, v53);
      v59 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v56 + 56);
      v59(v58, 0, 1, v57);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v56 + 48))(v58, 1, v57) == 1)
      {
        v67 = *(_QWORD *)(v0 + 600);
        swift_bridgeObjectRelease();
        v65 = *(void (**)(uint64_t, uint64_t))(v67 + 8);
        goto LABEL_32;
      }
      v60 = *(_QWORD *)(v0 + 640);
      v61 = *(_QWORD *)(v0 + 632);
      v62 = *(_QWORD *)(v0 + 600);
      v63 = *(_QWORD *)(v0 + 592);
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v62 + 32))(v61, *(_QWORD *)(v0 + 552), v63);
      v64 = sub_100006C64(&qword_1010EE520, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      LOBYTE(v60) = dispatch thunk of static Equatable.== infix(_:_:)(v61, v60, v63, v64);
      v65 = *(void (**)(uint64_t, uint64_t))(v62 + 8);
      v65(v61, v63);
      if ((v60 & 1) != 0)
        break;
      v52 += v54;
      if (!--v44)
      {
        v59(*(_QWORD *)(v0 + 552), 1, 1, *(_QWORD *)(v0 + 592));
        swift_bridgeObjectRelease();
LABEL_32:
        v65(*(_QWORD *)(v0 + 640), *(_QWORD *)(v0 + 592));
        swift_bridgeObjectRelease();
        v4 = (_QWORD *)(v0 + 16);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
        swift_bridgeObjectRelease();
        v7 = (_QWORD *)(v0 + 216);
        v6 = (_QWORD *)(v0 + 136);
        v5 = v0 + 96;
        v14 = (_QWORD *)(v0 + 256);
        goto LABEL_33;
      }
    }
    v100 = *(_QWORD *)(v0 + 640);
    v101 = *(_QWORD *)(v0 + 592);
    swift_bridgeObjectRelease();
    v65(v100, v101);
    swift_bridgeObjectRelease();
    v7 = (_QWORD *)(v0 + 216);
    v4 = (_QWORD *)(v0 + 16);
  }
  else
  {
    swift_bridgeObjectRetain(v43);
  }
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v4);
  v102 = (_QWORD *)swift_task_alloc(dword_1011055FC);
  *(_QWORD *)(v0 + 920) = v102;
  *v102 = v0;
  v102[1] = sub_10071A83C;
  sub_10071BBAC((uint64_t)v7, *(_QWORD *)(v0 + 528), *(_QWORD *)(v0 + 848));
}

void sub_100014824(void *a1, uint64_t a2, void (*a3)(void *), uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint8_t *v24;
  uint64_t My;
  _QWORD *v26;
  uint64_t v27;
  void *v28;
  _QWORD *v29;
  id v30;
  char *v31;
  char *v32;
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  void *v39;
  _QWORD *v40;
  id v41;
  char *v42;
  char *v43;
  NSObject *v44;
  os_log_type_t v45;
  uint8_t *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  void (*v50)(void *);
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  void *v55;
  char *v56;
  char v57;
  _BOOL4 v58;
  NSObject *v59;
  os_log_type_t v60;
  _BOOL4 v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  _BOOL4 v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  void *v77;
  char *v78;
  NSObject *v79;
  os_log_type_t v80;
  uint8_t *v81;
  _QWORD *v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  id v86;
  void *v87;
  _QWORD *v88;
  id v89;
  char *v90;
  char *v91;
  char *v92;
  NSObject *v93;
  os_log_type_t v94;
  uint8_t *v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  void *v102;
  _QWORD *v103;
  id v104;
  char *v105;
  char *v106;
  char *v107;
  NSObject *v108;
  os_log_type_t v109;
  uint8_t *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  void (*v119)(void *);
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  void *v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  NSObject *v129;
  os_log_type_t v130;
  uint8_t *v131;
  uint64_t v132;
  uint64_t v133;
  __objc2_class_ro **p_info;
  id v135;
  char *v136;
  void *v137;
  id v138;
  unsigned __int8 v139;
  char *v140;
  uint64_t v141;
  char *v142;
  uint64_t v143;
  void *v144;
  uint64_t v145;
  uint64_t v146;
  void *v147;
  uint64_t v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  char *v153;
  uint64_t v154;
  uint64_t v155;
  char *v156;
  NSObject *v157;
  os_log_type_t v158;
  uint8_t *v159;
  uint64_t v160;
  unint64_t v161;
  uint64_t v162;
  void *v163;
  uint64_t v164;
  _QWORD *v165;
  id v166;
  char *v167;
  char *v168;
  NSObject *v169;
  os_log_type_t v170;
  uint8_t *v171;
  uint64_t v172;
  uint64_t v173;
  unint64_t v174;
  uint64_t v175;
  void (*v176)(void *);
  uint64_t v177;
  char *v178;
  uint64_t v179;
  void *v180;
  uint64_t v181;
  void *v182;
  uint64_t v183;
  char *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  char *v188;
  uint64_t v189;
  uint64_t v190;
  char *v191;
  NSObject *v192;
  os_log_type_t v193;
  uint8_t *v194;
  uint64_t v195;
  _QWORD *v196;
  unint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint8_t *v200;
  uint64_t v201;
  void *v202;
  _QWORD *v203;
  id v204;
  char *v205;
  uint64_t v206;
  char *v207;
  uint64_t v208;
  void *v209;
  uint64_t v210;
  uint64_t v211;
  void *v212;
  uint64_t v213;
  char *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  char *v218;
  uint64_t v219;
  uint64_t v220;
  uint8_t *v221;
  char *v222;
  _BOOL4 v223;
  _BOOL4 v224;
  char *v225;
  char *v226;
  uint64_t v227;
  uint64_t v228;
  char *v229;
  char *v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  _QWORD *v236;
  uint64_t v237;
  _QWORD *v238;
  void (*v239)(void *);
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  __int128 v244;
  __int128 v245;
  __int128 v246;
  __int128 v247;
  __int128 v248;
  __int128 v249;
  __int128 v250;
  __int128 v251;
  __int128 v252;
  __int128 v253;
  __int128 v254;
  __int128 v255;
  __int128 v256;
  __int128 v257;
  __int128 v258;
  __int128 v259;
  __int128 v260;
  __int128 v261;
  __int128 v262;
  __int128 v263;
  __int128 v264;
  __int128 v265;
  __int128 v266;
  __int128 v267;
  __int128 v268;
  __int128 v269;

  v239 = a3;
  v240 = a4;
  v241 = a2;
  v238 = (_QWORD *)type metadata accessor for DispatchPredicate(0);
  v5 = *(v238 - 1);
  __chkstk_darwin(v238);
  v7 = (uint8_t **)((char *)&v221 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v233 = type metadata accessor for DispatchWorkItemFlags(0);
  v231 = *(_QWORD *)(v233 - 8);
  __chkstk_darwin(v233);
  v229 = (char *)&v221 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v234 = type metadata accessor for DispatchQoS(0);
  v232 = *(_QWORD *)(v234 - 8);
  __chkstk_darwin(v234);
  v230 = (char *)&v221 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS.QoSClass(0);
  v227 = *(_QWORD *)(v10 - 8);
  v228 = v10;
  __chkstk_darwin(v10);
  v226 = (char *)&v221 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1010EA098 != -1)
    swift_once(&qword_1010EA098, sub_10098F7D8);
  v12 = type metadata accessor for Logger(0);
  v13 = sub_10001A9E8(v12, (uint64_t)qword_1011B7A18);
  v14 = a1;
  v15 = Logger.logObject.getter(v14);
  v16 = static os_log_type_t.debug.getter(v15);
  if (os_log_type_enabled(v15, v16))
  {
    v17 = swift_slowAlloc(12, -1);
    v235 = v13;
    v18 = (uint8_t *)v17;
    v19 = swift_slowAlloc(32, -1);
    v236 = v7;
    v20 = v19;
    *(_QWORD *)&v257 = v19;
    *(_DWORD *)v18 = 136315138;
    v237 = v5;
    v21 = *(_QWORD *)&v14[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix];
    v22 = *(_QWORD *)&v14[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix + 8];
    swift_bridgeObjectRetain(v22);
    *(_QWORD *)&v244 = sub_100016940(v21, v22, (uint64_t *)&v257);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v244, (char *)&v244 + 8, v18 + 4, v18 + 12);

    v5 = v237;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "%s - startMonitoring started block", v18, 0xCu);
    swift_arrayDestroy(v20, 1, (char *)&type metadata for Any + 8);
    v23 = v20;
    v7 = v236;
    swift_slowDealloc(v23, -1, -1);
    v24 = v18;
    v13 = v235;
    swift_slowDealloc(v24, -1, -1);

  }
  else
  {

  }
  My = type metadata accessor for Feature.FindMy(0);
  *((_QWORD *)&v258 + 1) = My;
  *(_QWORD *)&v259 = sub_100006204((unint64_t *)&qword_1010EE1B0, (uint64_t (*)(uint64_t))&type metadata accessor for Feature.FindMy, (uint64_t)&protocol conformance descriptor for Feature.FindMy);
  v26 = sub_100018F08(&v257);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(My - 8) + 104))(v26, enum case for Feature.FindMy.fmNiftyCurve(_:), My);
  LOBYTE(My) = isFeatureEnabled(_:)(&v257);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v257);
  if ((My & 1) == 0)
    goto LABEL_14;
  if (qword_1010EA0A8 != -1)
    goto LABEL_71;
  while (1)
  {
    v27 = qword_1011B7A48;
    swift_retain();
    OS_dispatch_queue.sync<A>(execute:)(sub_1003D09C8, v27, &type metadata for SecureLocationsConfig);
    swift_release(v27);
    v267 = v254;
    v268 = v255;
    v269 = v256;
    v263 = v250;
    v264 = v251;
    v265 = v252;
    v266 = v253;
    v259 = v246;
    v260 = v247;
    v261 = v248;
    v262 = v249;
    v257 = v244;
    v258 = v245;
    sub_1003D09E0(&v257);
    if (v262 == 1
      && (v14[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_isStewieSupported] & 1) != 0)
    {
      break;
    }
LABEL_14:
    v39 = *(void **)&v14[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_clientQueue];
    *v7 = v39;
    v40 = v238;
    (*(void (**)(_QWORD *, _QWORD, _QWORD *))(v5 + 104))(v7, enum case for DispatchPredicate.onQueue(_:), v238);
    v41 = v39;
    LOBYTE(v39) = _dispatchPreconditionTest(_:)(v7);
    (*(void (**)(_QWORD *, _QWORD *))(v5 + 8))(v7, v40);
    if ((v39 & 1) != 0)
    {
      v42 = &v14[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieServiceState];
      *(_QWORD *)v42 = 7;
      v42[8] = 0;
      sub_100009528();
      v43 = v14;
      v44 = Logger.logObject.getter(v43);
      v45 = static os_log_type_t.default.getter(v44);
      if (os_log_type_enabled(v44, v45))
      {
        v46 = (uint8_t *)swift_slowAlloc(12, -1);
        v47 = swift_slowAlloc(32, -1);
        *(_QWORD *)&v257 = v47;
        *(_DWORD *)v46 = 136315138;
        v48 = *(_QWORD *)&v43[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix];
        v49 = *(_QWORD *)&v43[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix + 8];
        swift_bridgeObjectRetain(v49);
        *(_QWORD *)&v244 = sub_100016940(v48, v49, (uint64_t *)&v257);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v244, (char *)&v244 + 8, v46 + 4, v46 + 12);

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v44, v45, "%s - startMonitoring: featureDisabled", v46, 0xCu);
        swift_arrayDestroy(v47, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v47, -1, -1);
        swift_slowDealloc(v46, -1, -1);

      }
      else
      {

      }
      v50 = v239;
      sub_10001D9E0((uint64_t)SharingCircleWildAdvertisementKey.init(key:), 0);
      type metadata accessor for SecureLocationsStewieError(0);
      v52 = v51;
      *(_QWORD *)&v244 = 3;
      v53 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
      v54 = sub_100006204(&qword_1010EB330, (uint64_t (*)(uint64_t))type metadata accessor for SecureLocationsStewieError, (uint64_t)&unk_100E2124C);
      _BridgedStoredNSError.init(_:userInfo:)(&v257, &v244, v53, v52, v54);
      v55 = (void *)v257;
LABEL_19:
      v50(v55);

LABEL_20:
      Transaction.capture()();
      return;
    }
    __break(1u);
LABEL_71:
    swift_once(&qword_1010EA0A8, sub_10098F82C);
  }
  if ((sub_10000E13C() & 1) != 0)
  {
    v28 = *(void **)&v14[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_clientQueue];
    *v7 = v28;
    v29 = v238;
    (*(void (**)(_QWORD *, _QWORD, _QWORD *))(v5 + 104))(v7, enum case for DispatchPredicate.onQueue(_:), v238);
    v30 = v28;
    LOBYTE(v28) = _dispatchPreconditionTest(_:)(v7);
    (*(void (**)(_QWORD *, _QWORD *))(v5 + 8))(v7, v29);
    if ((v28 & 1) != 0)
    {
      v31 = &v14[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieServiceState];
      *(_QWORD *)v31 = 8;
      v31[8] = 0;
      sub_100009528();
      v32 = v14;
      v33 = Logger.logObject.getter(v32);
      v34 = static os_log_type_t.default.getter(v33);
      if (os_log_type_enabled(v33, v34))
      {
        v35 = (uint8_t *)swift_slowAlloc(12, -1);
        v36 = swift_slowAlloc(32, -1);
        *(_QWORD *)&v244 = v36;
        *(_DWORD *)v35 = 136315138;
        v37 = *(_QWORD *)&v32[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix];
        v38 = *(_QWORD *)&v32[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix + 8];
        swift_bridgeObjectRetain(v38);
        v242 = sub_100016940(v37, v38, (uint64_t *)&v244);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v242, &v243, v35 + 4, v35 + 12);

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v33, v34, "%s - startMonitoring: disabled in geo", v35, 0xCu);
        swift_arrayDestroy(v36, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v36, -1, -1);
        swift_slowDealloc(v35, -1, -1);

      }
      else
      {

      }
      v50 = v239;
      sub_10001D9E0((uint64_t)SharingCircleWildAdvertisementKey.init(key:), 0);
      type metadata accessor for SecureLocationsStewieError(0);
      v100 = v99;
      v101 = 3;
LABEL_42:
      v242 = v101;
      v117 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
      v118 = sub_100006204(&qword_1010EB330, (uint64_t (*)(uint64_t))type metadata accessor for SecureLocationsStewieError, (uint64_t)&unk_100E2124C);
      _BridgedStoredNSError.init(_:userInfo:)(&v244, &v242, v117, v100, v118);
      v55 = (void *)v244;
      goto LABEL_19;
    }
    __break(1u);
LABEL_73:
    __break(1u);
LABEL_74:
    __break(1u);
    goto LABEL_75;
  }
  v56 = &v14[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieServiceState];
  v57 = v14[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieServiceState + 8];
  v222 = &v14[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieServiceState];
  if ((v57 & 1) != 0)
  {
    v223 = 0;
    v58 = 0;
  }
  else
  {
    v58 = *(_QWORD *)v56 == 5;
    v223 = *(_QWORD *)v56 == 6;
  }
  v225 = v14;
  v59 = Logger.logObject.getter(v225);
  v60 = static os_log_type_t.default.getter(v59);
  v61 = os_log_type_enabled(v59, v60);
  v224 = v58;
  if (v61)
  {
    v62 = swift_slowAlloc(24, -1);
    v237 = v5;
    v63 = v62;
    v235 = swift_slowAlloc(32, -1);
    *(_QWORD *)&v244 = v235;
    *(_DWORD *)v63 = 136315650;
    v64 = v225;
    v236 = v7;
    v65 = v13;
    v66 = *(_QWORD *)&v225[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix];
    v67 = *(_QWORD *)&v225[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix + 8];
    swift_bridgeObjectRetain(v67);
    v242 = sub_100016940(v66, v67, (uint64_t *)&v244);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v242, &v243, v63 + 4, v63 + 12);

    swift_bridgeObjectRelease();
    *(_WORD *)(v63 + 12) = 1024;
    LODWORD(v242) = v224;
    v7 = v236;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v242, (char *)&v242 + 4, v63 + 14, v63 + 18);
    *(_WORD *)(v63 + 18) = 1024;
    v13 = v65;
    v68 = v223;
    LODWORD(v242) = v223;
    v58 = v224;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v242, (char *)&v242 + 4, v63 + 20, v63 + 24);
    _os_log_impl((void *)&_mh_execute_header, v59, v60, "%s - startMonitoring: isPublishInProgress %{BOOL}d isThrottled %{BOOL}d", (uint8_t *)v63, 0x18u);
    v69 = v235;
    swift_arrayDestroy(v235, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v69, -1, -1);
    v5 = v237;
    swift_slowDealloc(v63, -1, -1);

  }
  else
  {

    v68 = v223;
  }
  v70 = qword_1011B7A48;
  swift_retain();
  v71 = sub_10000D338();
  swift_release(v70);
  v72 = v58 || v68;
  if (((v71 | v72) & 1) == 0)
  {
    v87 = *(void **)&v225[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_clientQueue];
    *v7 = v87;
    v88 = v238;
    (*(void (**)(_QWORD *, _QWORD, _QWORD *))(v5 + 104))(v7, enum case for DispatchPredicate.onQueue(_:), v238);
    v89 = v87;
    LOBYTE(v87) = _dispatchPreconditionTest(_:)(v7);
    (*(void (**)(_QWORD *, _QWORD *))(v5 + 8))(v7, v88);
    if ((v87 & 1) != 0)
    {
      v90 = v222;
      *(_QWORD *)v222 = 3;
      v90[8] = 0;
      v91 = v225;
      sub_100009528();
      v92 = v91;
      v93 = Logger.logObject.getter(v92);
      v94 = static os_log_type_t.default.getter(v93);
      if (os_log_type_enabled(v93, v94))
      {
        v95 = (uint8_t *)swift_slowAlloc(12, -1);
        v96 = swift_slowAlloc(32, -1);
        *(_QWORD *)&v244 = v96;
        *(_DWORD *)v95 = 136315138;
        v97 = *(_QWORD *)&v92[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix];
        v98 = *(_QWORD *)&v92[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix + 8];
        swift_bridgeObjectRetain(v98);
        v242 = sub_100016940(v97, v98, (uint64_t *)&v244);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v242, &v243, v95 + 4, v95 + 12);

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v93, v94, "%s - startMonitoring: not a location publishing device", v95, 0xCu);
        swift_arrayDestroy(v96, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v96, -1, -1);
        swift_slowDealloc(v95, -1, -1);

      }
      else
      {

      }
      v50 = v239;
      sub_10001D9E0((uint64_t)SharingCircleWildAdvertisementKey.init(key:), 0);
      type metadata accessor for SecureLocationsStewieError(0);
      v100 = v116;
      v101 = 5;
      goto LABEL_42;
    }
    goto LABEL_73;
  }
  v73 = OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_keyManager;
  v74 = *(_QWORD *)&v225[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_keyManager];
  swift_retain();
  v75 = sub_1008ADE48();
  swift_release(v74);
  if (((v75 | v72) & 1) == 0)
  {
    v102 = *(void **)&v225[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_clientQueue];
    *v7 = v102;
    v103 = v238;
    (*(void (**)(_QWORD *, _QWORD, _QWORD *))(v5 + 104))(v7, enum case for DispatchPredicate.onQueue(_:), v238);
    v104 = v102;
    LOBYTE(v102) = _dispatchPreconditionTest(_:)(v7);
    (*(void (**)(_QWORD *, _QWORD *))(v5 + 8))(v7, v103);
    if ((v102 & 1) != 0)
    {
      v105 = v222;
      *(_QWORD *)v222 = 9;
      v105[8] = 0;
      v106 = v225;
      sub_100009528();
      v107 = v106;
      v235 = v13;
      v108 = Logger.logObject.getter(v107);
      v109 = static os_log_type_t.default.getter(v108);
      if (os_log_type_enabled(v108, v109))
      {
        v110 = (uint8_t *)swift_slowAlloc(12, -1);
        v111 = swift_slowAlloc(32, -1);
        *(_QWORD *)&v244 = v111;
        *(_DWORD *)v110 = 136315138;
        v238 = v110 + 4;
        v112 = v73;
        v113 = *(_QWORD *)&v107[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix];
        v114 = *(_QWORD *)&v107[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix + 8];
        swift_bridgeObjectRetain(v114);
        v115 = v113;
        v73 = v112;
        v242 = sub_100016940(v115, v114, (uint64_t *)&v244);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v242, &v243, v238, v110 + 12);

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v108, v109, "%s - secureLocations not setup. attempting setup before starting monitor", v110, 0xCu);
        swift_arrayDestroy(v111, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v111, -1, -1);
        swift_slowDealloc(v110, -1, -1);

      }
      else
      {

      }
      v119 = v239;
      type metadata accessor for SecureLocationsStewieError(0);
      v121 = v120;
      v242 = 4;
      v122 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
      v123 = sub_100006204(&qword_1010EB330, (uint64_t (*)(uint64_t))type metadata accessor for SecureLocationsStewieError, (uint64_t)&unk_100E2124C);
      _BridgedStoredNSError.init(_:userInfo:)(&v244, &v242, v122, v121, v123);
      v124 = (void *)v244;
      v119((void *)v244);

      v125 = *(_QWORD *)&v225[v73];
      v126 = swift_allocObject(&unk_1010B4DA8, 24, 7);
      *(_QWORD *)(v126 + 16) = v107;
      v127 = v107;
      swift_retain();
      v128 = sub_1008ADE48();
      if ((v128 & 1) != 0)
      {
        sub_100C045E8(1, v127);

      }
      else
      {
        v129 = Logger.logObject.getter(v128);
        v130 = static os_log_type_t.default.getter(v129);
        if (os_log_type_enabled(v129, v130))
        {
          v131 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v131 = 0;
          _os_log_impl((void *)&_mh_execute_header, v129, v130, "SetupVirtualMeDevice: Waiting on beaconStore to become available", v131, 2u);
          swift_slowDealloc(v131, -1, -1);
        }

        v132 = *(_QWORD *)(v125 + 32);
        swift_retain();
        swift_retain();
        v133 = swift_retain();
        sub_100877B3C(v133, v125, (uint64_t)sub_100C0D3AC, v126);

        swift_release(v132);
        swift_release(v125);
        swift_release(v126);
      }
      swift_release(v126);
      swift_release(v125);
      goto LABEL_20;
    }
    goto LABEL_74;
  }
  v237 = v5;
  v76 = OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_dataClient;
  v77 = *(void **)&v225[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_dataClient];
  if (v77)
    goto LABEL_52;
  v78 = v225;
  v235 = v13;
  v79 = Logger.logObject.getter(v78);
  v80 = static os_log_type_t.default.getter(v79);
  if (os_log_type_enabled(v79, v80))
  {
    v81 = (uint8_t *)swift_slowAlloc(12, -1);
    v236 = (_QWORD *)swift_slowAlloc(32, -1);
    *(_QWORD *)&v244 = v236;
    *(_DWORD *)v81 = 136315138;
    v221 = v81 + 4;
    v82 = v7;
    v84 = *(_QWORD *)&v78[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix];
    v83 = *(_QWORD *)&v78[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix + 8];
    swift_bridgeObjectRetain(v83);
    v85 = v84;
    v7 = v82;
    v242 = sub_100016940(v85, v83, (uint64_t *)&v244);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v242, &v243, v221, v81 + 12);

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v79, v80, "%s - startMonitoring but we have no data client - creating one", v81, 0xCu);
    v86 = v236;
    swift_arrayDestroy(v236, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v86, -1, -1);
    swift_slowDealloc(v81, -1, -1);

  }
  else
  {

  }
  v78[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_isFindMyServiceConnectedToStewie] = 0;
  p_info = _TtC12searchpartyd30AccessoryFirmwareUpdateManager.info;
  v135 = objc_msgSend(objc_allocWithZone((Class)CTStewieDataClient), "initWithServices:delegate:delegateQueue:", 4, v78, *(_QWORD *)&v78[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_clientQueue]);
  v136 = v225;
  v137 = *(void **)&v225[v76];
  *(_QWORD *)&v225[v76] = v135;

  v77 = *(void **)&v136[v76];
  if (v77)
  {
LABEL_52:
    v138 = v77;
    v139 = objc_msgSend(v138, "start");
    v236 = v138;
    if ((v139 & 1) != 0)
    {
      v140 = v225;
      sub_100C06D3C();
      v238 = objc_msgSend(v138, "getState");
      sub_100C057A4(v238, 1);
      sub_10000F4A0(0, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr);
      v142 = v226;
      v141 = v227;
      v143 = v228;
      (*(void (**)(char *, _QWORD, uint64_t))(v227 + 104))(v226, enum case for DispatchQoS.QoSClass.default(_:), v228);
      v144 = (void *)static OS_dispatch_queue.global(qos:)(v142);
      (*(void (**)(char *, uint64_t))(v141 + 8))(v142, v143);
      v145 = swift_allocObject(&unk_1010B4E70, 32, 7);
      v146 = v240;
      *(_QWORD *)(v145 + 16) = v239;
      *(_QWORD *)(v145 + 24) = v146;
      *(_QWORD *)&v246 = sub_1002A3AD4;
      *((_QWORD *)&v246 + 1) = v145;
      *(_QWORD *)&v244 = _NSConcreteStackBlock;
      *((_QWORD *)&v244 + 1) = 1107296256;
      *(_QWORD *)&v245 = sub_100016FB8;
      *((_QWORD *)&v245 + 1) = &unk_1010B4E88;
      v147 = _Block_copy(&v244);
      v148 = swift_retain();
      v149 = v230;
      static DispatchQoS.unspecified.getter(v148);
      v242 = (uint64_t)_swiftEmptyArrayStorage;
      v150 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      v151 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
      v152 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
      v153 = v229;
      v154 = v151;
      v155 = v233;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v242, v154, v152, v233, v150);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0, v149, v153, v147);
      _Block_release(v147);

      (*(void (**)(char *, uint64_t))(v231 + 8))(v153, v155);
      (*(void (**)(char *, uint64_t))(v232 + 8))(v149, v234);
      swift_release(*((_QWORD *)&v246 + 1));
      v156 = v140;
      v157 = Logger.logObject.getter(v156);
      v158 = static os_log_type_t.default.getter(v157);
      if (os_log_type_enabled(v157, v158))
      {
        v159 = (uint8_t *)swift_slowAlloc(12, -1);
        v160 = swift_slowAlloc(32, -1);
        *(_QWORD *)&v244 = v160;
        *(_DWORD *)v159 = 136315138;
        v162 = *(_QWORD *)&v156[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix];
        v161 = *(_QWORD *)&v156[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix + 8];
        swift_bridgeObjectRetain(v161);
        v242 = sub_100016940(v162, v161, (uint64_t *)&v244);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v242, &v243, v159 + 4, v159 + 12);

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v157, v158, "%s - started dataclient", v159, 0xCu);
        swift_arrayDestroy(v160, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v160, -1, -1);
        swift_slowDealloc(v159, -1, -1);

      }
      else
      {

      }
      goto LABEL_20;
    }
    if (!v223 && !v224)
    {
      v163 = *(void **)&v225[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_clientQueue];
      *v7 = v163;
      v164 = v237;
      v165 = v238;
      (*(void (**)(_QWORD *, _QWORD, _QWORD *))(v237 + 104))(v7, enum case for DispatchPredicate.onQueue(_:), v238);
      v166 = v163;
      LOBYTE(v163) = _dispatchPreconditionTest(_:)(v7);
      (*(void (**)(_QWORD *, _QWORD *))(v164 + 8))(v7, v165);
      if ((v163 & 1) == 0)
      {
LABEL_75:
        __break(1u);
        goto LABEL_76;
      }
      v167 = v222;
      *(_QWORD *)v222 = 2;
      v167[8] = 0;
      sub_100009528();
    }
    v168 = v225;
    v169 = Logger.logObject.getter(v168);
    v170 = static os_log_type_t.default.getter(v169);
    if (os_log_type_enabled(v169, v170))
    {
      v171 = (uint8_t *)swift_slowAlloc(12, -1);
      v172 = swift_slowAlloc(32, -1);
      *(_QWORD *)&v244 = v172;
      *(_DWORD *)v171 = 136315138;
      v173 = *(_QWORD *)&v168[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix];
      v174 = *(_QWORD *)&v168[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix + 8];
      swift_bridgeObjectRetain(v174);
      v242 = sub_100016940(v173, v174, (uint64_t *)&v244);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v242, &v243, v171 + 4, v171 + 12);

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v169, v170, "%s - start dataclient returned false", v171, 0xCu);
      swift_arrayDestroy(v172, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v172, -1, -1);
      swift_slowDealloc(v171, -1, -1);

    }
    else
    {

    }
    v175 = v240;
    v176 = v239;
    sub_10000F4A0(0, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr);
    v178 = v226;
    v177 = v227;
    v179 = v228;
    (*(void (**)(char *, _QWORD, uint64_t))(v227 + 104))(v226, enum case for DispatchQoS.QoSClass.default(_:), v228);
    v180 = (void *)static OS_dispatch_queue.global(qos:)(v178);
    (*(void (**)(char *, uint64_t))(v177 + 8))(v178, v179);
    v181 = swift_allocObject(&unk_1010B4E20, 32, 7);
    *(_QWORD *)(v181 + 16) = v176;
    *(_QWORD *)(v181 + 24) = v175;
    *(_QWORD *)&v246 = sub_100C0D3D8;
    *((_QWORD *)&v246 + 1) = v181;
    *(_QWORD *)&v244 = _NSConcreteStackBlock;
    *((_QWORD *)&v244 + 1) = 1107296256;
    *(_QWORD *)&v245 = sub_100016FB8;
    *((_QWORD *)&v245 + 1) = &unk_1010B4E38;
    v182 = _Block_copy(&v244);
    v183 = swift_retain();
    v184 = v230;
    static DispatchQoS.unspecified.getter(v183);
    v242 = (uint64_t)_swiftEmptyArrayStorage;
    v185 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v186 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v187 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
    v188 = v229;
    v189 = v186;
    v190 = v233;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v242, v189, v187, v233, v185);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v184, v188, v182);

    _Block_release(v182);
    (*(void (**)(char *, uint64_t))(v231 + 8))(v188, v190);
    (*(void (**)(char *, uint64_t))(v232 + 8))(v184, v234);
    swift_release(*((_QWORD *)&v246 + 1));
    goto LABEL_20;
  }
  v191 = v78;
  v192 = Logger.logObject.getter(v191);
  v193 = static os_log_type_t.default.getter(v192);
  if (os_log_type_enabled(v192, v193))
  {
    v194 = (uint8_t *)swift_slowAlloc(12, -1);
    v195 = swift_slowAlloc(32, -1);
    *(_QWORD *)&v244 = v195;
    *(_DWORD *)v194 = 136315138;
    v236 = v194 + 4;
    v196 = v7;
    v198 = *(_QWORD *)&v191[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix];
    v197 = *(_QWORD *)&v191[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix + 8];
    swift_bridgeObjectRetain(v197);
    v199 = v198;
    v7 = v196;
    v242 = sub_100016940(v199, v197, (uint64_t *)&v244);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v242, &v243, v236, v194 + 12);

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v192, v193, "%s - attempting to start monitor but no data client instance available", v194, 0xCu);
    swift_arrayDestroy(v195, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v195, -1, -1);
    v200 = v194;
    p_info = (__objc2_class_ro **)(_TtC12searchpartyd30AccessoryFirmwareUpdateManager + 32);
    swift_slowDealloc(v200, -1, -1);

  }
  else
  {

  }
  v201 = v237;
  if (v223 || v224)
  {
LABEL_69:
    sub_10000F4A0(0, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr);
    v207 = v226;
    v206 = v227;
    v208 = v228;
    (*(void (**)(char *, _QWORD, uint64_t))(v227 + 104))(v226, enum case for DispatchQoS.QoSClass.default(_:), v228);
    v209 = (void *)static OS_dispatch_queue.global(qos:)(v207);
    (*(void (**)(char *, uint64_t))(v206 + 8))(v207, v208);
    v210 = swift_allocObject(&unk_1010B4DD0, 32, 7);
    v211 = v240;
    *(_QWORD *)(v210 + 16) = v239;
    *(_QWORD *)(v210 + 24) = v211;
    *(_QWORD *)&v246 = sub_100C0DC18;
    *((_QWORD *)&v246 + 1) = v210;
    *(_QWORD *)&v244 = _NSConcreteStackBlock;
    *((_QWORD *)&v244 + 1) = 1107296256;
    *(_QWORD *)&v245 = sub_100016FB8;
    *((_QWORD *)&v245 + 1) = &unk_1010B4DE8;
    v212 = _Block_copy(&v244);
    v213 = swift_retain();
    v214 = v230;
    static DispatchQoS.unspecified.getter(v213);
    v242 = (uint64_t)_swiftEmptyArrayStorage;
    v215 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v216 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v217 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
    v218 = v229;
    v219 = v216;
    v220 = v233;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v242, v219, v217, v233, v215);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v214, v218, v212);
    _Block_release(v212);

    (*(void (**)(char *, uint64_t))(v231 + 8))(v218, v220);
    (*(void (**)(char *, uint64_t))(v232 + 8))(v214, v234);
    swift_release(*((_QWORD *)&v246 + 1));
    goto LABEL_20;
  }
  v202 = *(void **)((char *)&p_info[63]->flags + (_QWORD)v191);
  *v7 = v202;
  v203 = v238;
  (*(void (**)(_QWORD *, _QWORD, _QWORD *))(v201 + 104))(v7, enum case for DispatchPredicate.onQueue(_:), v238);
  v204 = v202;
  LOBYTE(v202) = _dispatchPreconditionTest(_:)(v7);
  (*(void (**)(_QWORD *, _QWORD *))(v201 + 8))(v7, v203);
  if ((v202 & 1) != 0)
  {
    v205 = v222;
    *(_QWORD *)v222 = 0;
    v205[8] = 0;
    sub_100009528();
    goto LABEL_69;
  }
LABEL_76:
  __break(1u);
}

uint64_t sub_100016348(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t i;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  _QWORD *v27;
  char v28[24];

  swift_beginAccess(a1 + 56, v28, 0, 0);
  v4 = *(_QWORD *)(a1 + 56);
  v27 = _swiftEmptyArrayStorage;
  v5 = v4 + 64;
  v6 = 1 << *(_BYTE *)(v4 + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(v4 + 64);
  v9 = (unint64_t)(v6 + 63) >> 6;
  swift_bridgeObjectRetain_n(v4, 2);
  v10 = 0;
  if (!v8)
    goto LABEL_5;
LABEL_4:
  v11 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  for (i = v11 | (v10 << 6); ; i = __clz(__rbit64(v14)) + (v10 << 6))
  {
    v16 = *(_QWORD *)(v4 + 56) + 48 * i;
    v17 = *(_QWORD *)(v16 + 24);
    v18 = *(_BYTE *)(v16 + 32);
    v19 = *(_QWORD *)(v16 + 40);
    v22 = *(_QWORD *)v16;
    v23 = *(_OWORD *)(v16 + 8);
    v24 = v17;
    v25 = v18;
    v26 = v19;
    swift_retain();
    swift_bridgeObjectRetain(v17);
    swift_bridgeObjectRetain(v19);
    sub_1000165B8((uint64_t)&v27, &v22, a2);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    if (v8)
      goto LABEL_4;
LABEL_5:
    if (__OFADD__(v10++, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v10 >= v9)
      goto LABEL_26;
    v14 = *(_QWORD *)(v5 + 8 * v10);
    if (!v14)
      break;
LABEL_19:
    v8 = (v14 - 1) & v14;
  }
  v15 = v10 + 1;
  if (v10 + 1 >= v9)
    goto LABEL_26;
  v14 = *(_QWORD *)(v5 + 8 * v15);
  if (v14)
    goto LABEL_18;
  v15 = v10 + 2;
  if (v10 + 2 >= v9)
    goto LABEL_26;
  v14 = *(_QWORD *)(v5 + 8 * v15);
  if (v14)
    goto LABEL_18;
  v15 = v10 + 3;
  if (v10 + 3 >= v9)
    goto LABEL_26;
  v14 = *(_QWORD *)(v5 + 8 * v15);
  if (v14)
    goto LABEL_18;
  v15 = v10 + 4;
  if (v10 + 4 >= v9)
    goto LABEL_26;
  v14 = *(_QWORD *)(v5 + 8 * v15);
  if (v14)
    goto LABEL_18;
  v15 = v10 + 5;
  if (v10 + 5 >= v9)
  {
LABEL_26:
    swift_release();
    swift_bridgeObjectRelease();
    v20 = sub_10001A9A8((uint64_t *)&unk_101105910);
    return CheckedContinuation.resume(returning:)(&v27, v20);
  }
  v14 = *(_QWORD *)(v5 + 8 * v15);
  if (v14)
  {
LABEL_18:
    v10 = v15;
    goto LABEL_19;
  }
  while (1)
  {
    v10 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v10 >= v9)
      goto LABEL_26;
    v14 = *(_QWORD *)(v5 + 8 * v10);
    ++v15;
    if (v14)
      goto LABEL_19;
  }
LABEL_28:
  __break(1u);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  result = swift_bridgeObjectRelease();
  __break(1u);
  return result;
}

uint64_t sub_1000165B8(uint64_t result, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD **v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD **v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  os_log_type_t type;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v3 = a2[1];
  if ((a3 & ~v3) == 0)
  {
    v5 = (_QWORD **)result;
    v6 = *a2;
    v7 = a2[2];
    v8 = a2[3];
    v37 = *((_BYTE *)a2 + 32);
    v9 = a2[5];
    if (qword_1010E9ED8 != -1)
      swift_once(&qword_1010E9ED8, sub_1007116BC);
    v10 = type metadata accessor for Logger(0);
    sub_10001A9E8(v10, (uint64_t)qword_1011B7598);
    swift_bridgeObjectRetain_n(v8, 2);
    swift_bridgeObjectRetain_n(v9, 2);
    v11 = swift_retain_n(v6, 2);
    v12 = v9;
    v13 = Logger.logObject.getter(v11);
    type = static os_log_type_t.default.getter(v13);
    v38 = v7;
    if (os_log_type_enabled(v13, type))
    {
      v35 = v3;
      v14 = swift_slowAlloc(22, -1);
      v34 = swift_slowAlloc(64, -1);
      v41 = v34;
      *(_DWORD *)v14 = 136446466;
      if (v8)
        v15 = v7;
      else
        v15 = 0x6E776F6E6B6E75;
      v16 = v12;
      v33 = v12;
      if (v8)
        v17 = v8;
      else
        v17 = 0xE700000000000000;
      swift_bridgeObjectRetain(v8);
      v39 = sub_100016940(v15, v17, &v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, &v40, v14 + 4, v14 + 12);
      swift_bridgeObjectRelease_n(v16, 2);
      swift_bridgeObjectRelease_n(v8, 2);
      swift_release_n(v6, 2);
      swift_bridgeObjectRelease();
      *(_WORD *)(v14 + 12) = 2082;
      v39 = a3;
      v18 = sub_10001D80C();
      v19 = FixedWidthInteger.data.getter(&type metadata for UInt, v18);
      v21 = v20;
      v22 = Data.hexString.getter(v19, v20);
      v23 = v5;
      v25 = v24;
      sub_10001BC14(v19, v21);
      v39 = sub_100016940(v22, v25, &v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, &v40, v14 + 14, v14 + 22);
      v5 = v23;
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v13, type, "Bundle: %{public}s is listening for updates to property mask: %{public}s.", (uint8_t *)v14, 0x16u);
      swift_arrayDestroy(v34, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v34, -1, -1);
      v26 = v14;
      v3 = v35;
      swift_slowDealloc(v26, -1, -1);

      v27 = v6;
      v28 = v33;
    }
    else
    {

      swift_bridgeObjectRelease_n(v12, 2);
      swift_bridgeObjectRelease_n(v8, 2);
      swift_release_n(v6, 2);
      v27 = v6;
      v28 = v12;
    }
    v29 = *v5;
    swift_retain();
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v28);
    result = swift_isUniquelyReferenced_nonNull_native(v29);
    if ((result & 1) == 0)
    {
      result = (uint64_t)sub_100016E94(0, v29[2] + 1, 1, v29);
      v29 = (_QWORD *)result;
    }
    v31 = v29[2];
    v30 = v29[3];
    if (v31 >= v30 >> 1)
    {
      result = (uint64_t)sub_100016E94((_QWORD *)(v30 > 1), v31 + 1, 1, v29);
      v29 = (_QWORD *)result;
    }
    v29[2] = v31 + 1;
    v32 = &v29[6 * v31];
    v32[4] = v27;
    v32[5] = v3;
    v32[6] = v38;
    v32[7] = v8;
    *((_BYTE *)v32 + 64) = v37;
    v32[9] = v28;
    *v5 = v29;
  }
  return result;
}

uint64_t sub_100016940(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12[3];
  void *ObjectType;

  v6 = sub_100016A6C(v12, 0, 0, 1, a1, a2);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    ObjectType = (void *)swift_getObjectType(v6);
    v12[0] = v8;
    v9 = *a3;
    if (*a3)
    {
      sub_100016A30((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    v10 = *a3;
    if (*a3)
    {
      sub_100016A30((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain(a2);
  }
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v12);
  return v7;
}

uint64_t _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(_QWORD *a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1[3] - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release(*a1);
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_100016A30(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_100016A6C(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  int v14;
  _QWORD __src[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        v12 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v12)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (_QWORD *)&__dst[v12] || (char *)__src + v12 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter(0, HIBYTE(a6) & 0xF, __dst, a3);
            result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    result = sub_100016C24(a5, a6);
    *a1 = v13;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0)
    goto LABEL_13;
  if ((a5 & 0x1000000000000000) != 0)
  {
    v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  v8 = _StringObject.sharedUTF8.getter(a5, a6);
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringTesting.swift", 25, 2, 151, 0);
    __break(1u);
LABEL_17:
    LOBYTE(v14) = 2;
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutableRawPointer.initializeMemory overlapping range", 58, 2, "Swift/UnsafeRawPointer.swift", 28, v14, 1173, 0);
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0)
    return 0;
  else
    return swift_unknownObjectRetain(a6 & 0xFFFFFFFFFFFFFFFLL);
}

uint64_t sub_100016C24(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = (uint64_t)sub_100016CB8(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
    v2 = sub_10069494C(0, *(_QWORD *)(v2 + 16) + 1, 1, (char *)v2);
  v4 = *(_QWORD *)(v2 + 16);
  v3 = *(_QWORD *)(v2 + 24);
  if (v4 >= v3 >> 1)
    v2 = sub_10069494C(v3 > 1, v4 + 1, 1, (char *)v2);
  *(_QWORD *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

_QWORD *sub_100016CB8(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  char v8;
  _QWORD *result;
  int v10;

  if ((a2 & 0x1000000000000000) != 0)
    goto LABEL_10;
  if ((a2 & 0x2000000000000000) != 0)
    v4 = HIBYTE(a2) & 0xF;
  else
    v4 = a1 & 0xFFFFFFFFFFFFLL;
  if (v4)
  {
    while (1)
    {
      v5 = sub_100016E2C(v4, 0);
      if (v4 < 0)
        break;
      v6 = v5;
      v7 = _StringGuts.copyUTF8(into:)(v5 + 4, v4, a1, a2);
      if ((v8 & 1) != 0)
        goto LABEL_14;
      if (v7 == v4)
        return v6;
      LOBYTE(v10) = 2;
      _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "invalid Collection: less than 'count' elements in collection", 60, 2, "Swift/ContiguousArrayBuffer.swift", 33, v10, 1122, 0);
      __break(1u);
LABEL_10:
      v4 = String.UTF8View._foreignCount()();
      if (!v4)
        return &_swiftEmptyArrayStorage;
    }
    LOBYTE(v10) = 2;
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutableBufferPointer with negative count", 46, 2, "Swift/UnsafeBufferPointer.swift", 31, v10, 71, 0);
    __break(1u);
LABEL_14:
    LOBYTE(v10) = 2;
    result = (_QWORD *)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Insufficient space allocated to copy string contents", 52, 2, "Swift/StringUTF8View.swift", 26, v10, 430, 0);
    __break(1u);
  }
  else
  {
    return &_swiftEmptyArrayStorage;
  }
  return result;
}

_QWORD *sub_100016E2C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  size_t v6;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return &_swiftEmptyArrayStorage;
  v4 = sub_10001A9A8(&qword_1010ED318);
  v5 = (_QWORD *)swift_allocObject(v4, v2 + 32, 7);
  v6 = j__malloc_size(v5);
  v5[2] = a1;
  v5[3] = 2 * v6 - 64;
  return v5;
}

_QWORD *sub_100016E94(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_10001A9A8((uint64_t *)&unk_101105820);
      v11 = (_QWORD *)swift_allocObject(v10, 48 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v11[2] = v8;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 48);
      v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[6 * v8 + 4])
          memmove(v13, a4 + 4, 48 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v13 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_10001CF20(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v11;
  }
  __break(1u);
  return result;
}

uint64_t sub_100016FB8(uint64_t a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;

  v1 = *(void (**)(uint64_t))(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v3 = swift_retain(v2);
  v1(v3);
  return swift_release(v2);
}

uint64_t sub_100016FE4()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(v0 + 16))(*(_QWORD *)(v0 + 32));
}

void sub_10001700C(uint64_t a1)
{
  uint64_t v1;

  sub_100017014(a1, *(_QWORD *)(v1 + 16));
}

void sub_100017014(uint64_t a1, uint64_t a2)
{
  Class isa;

  sub_10000F4A0(0, &qword_1010FF808, SPBeaconGroup_ptr);
  sub_1000170AC((unint64_t *)&unk_1010FF810, &qword_1010FF808, SPBeaconGroup_ptr);
  isa = Set._bridgeToObjectiveC()().super.isa;
  (*(void (**)(uint64_t, Class))(a2 + 16))(a2, isa);

}

uint64_t sub_1000170AC(unint64_t *a1, unint64_t *a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = sub_10000F4A0(255, a2, a3);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for NSObject, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000170F0()
{
  uint64_t *v0;

  return sub_10001901C(v0[2], v0[3], v0[4], v0[5]);
}

uint64_t sub_1000170FC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(sub_10001A9A8(&qword_101108DF0) - 8) + 80);
  return sub_100017144(*(_QWORD *)(v0 + 16), v0 + ((v1 + 24) & ~v1));
}

uint64_t sub_100017144(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  unint64_t *v15;
  unint64_t v16;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v18;
  unint64_t v19;
  _BYTE v21[24];

  v4 = sub_10001A9A8(&qword_101108DF0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = &v21[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  if ((*(_BYTE *)(a1 + 56) & 1) != 0)
    return CheckedContinuation.resume(returning:)(v6, v4);
  if (qword_1010E9BB8 != -1)
    swift_once(&qword_1010E9BB8, sub_1003E02BC);
  v10 = type metadata accessor for Logger(0);
  v11 = sub_10001A9E8(v10, (uint64_t)qword_1011B6E40);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.default.getter(v12);
  if (os_log_type_enabled(v12, v13))
  {
    v14 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v14 = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "Startup in progress; appending continuation.", v14, 2u);
    swift_slowDealloc(v14, -1, -1);
  }

  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 16))(v8, a2, v4);
  v15 = (unint64_t *)(a1 + 48);
  swift_beginAccess(a1 + 48, v21, 33, 0);
  v16 = *(_QWORD *)(a1 + 48);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v16);
  *(_QWORD *)(a1 + 48) = v16;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v16 = sub_1007C98B4(0, *(_QWORD *)(v16 + 16) + 1, 1, v16);
    *v15 = v16;
  }
  v19 = *(_QWORD *)(v16 + 16);
  v18 = *(_QWORD *)(v16 + 24);
  if (v19 >= v18 >> 1)
  {
    v16 = sub_1007C98B4(v18 > 1, v19 + 1, 1, v16);
    *v15 = v16;
  }
  *(_QWORD *)(v16 + 16) = v19 + 1;
  (*(void (**)(unint64_t, _BYTE *, uint64_t))(v5 + 32))(v16+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(_QWORD *)(v5 + 72) * v19, v8, v4);
  return swift_endAccess(v21);
}

uint64_t sub_100017350()
{
  return sub_100030824(&qword_1010EBB50, 0, (uint64_t (*)(uint64_t))type metadata accessor for BeaconStoreActor);
}

uint64_t sub_100017368()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  Swift::String v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, uint64_t);
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v27;
  _QWORD *v28;

  v1 = v0;
  v2 = type metadata accessor for SystemInfo.DeviceLockState(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v27 - v7;
  v9._countAndFlagsBits = 0x65526E6F63616562;
  v9._object = (void *)0xED00007364726F63;
  prohibitAsyncContext(functionName:)(v9);
  static SystemInfo.lockState.getter(v10);
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v6, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v2);
  v11 = sub_100006204((unint64_t *)&unk_1010F4700, (uint64_t (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState, (uint64_t)&protocol conformance descriptor for SystemInfo.DeviceLockState);
  dispatch thunk of RawRepresentable.rawValue.getter(&v28, v2, v11);
  dispatch thunk of RawRepresentable.rawValue.getter(&v27, v2, v11);
  v13 = v27;
  v12 = (uint64_t)v28;
  v14 = *(void (**)(char *, uint64_t))(v3 + 8);
  v14(v6, v2);
  v15 = ((uint64_t (*)(char *, uint64_t))v14)(v8, v2);
  if (v12 == v13)
  {
    v16 = static os_log_type_t.default.getter(v15);
    if (qword_1010EA258 != -1)
      swift_once(&qword_1010EA258, sub_100B5D9CC);
    v17 = _swiftEmptyArrayStorage;
    os_log(_:dso:log:_:_:)(v16, &_mh_execute_header, qword_1011B7D38, "beaconRecords call failed because in device is in beforeFirstUnlock state", 73, 2, _swiftEmptyArrayStorage);
  }
  else
  {
    v18 = sub_1000188D0();
    v19 = sub_1000178D0((uint64_t)v18);
    swift_bridgeObjectRelease(v18);
    v20 = sub_1000181C8();
    v21 = sub_100017758((uint64_t)v20);
    swift_bridgeObjectRelease(v20);
    v28 = v19;
    sub_1000175CC((uint64_t)v21);
    v22 = (uint64_t)v28;
    swift_retain();
    v23 = sub_10001A9A8(&qword_101103678);
    unsafeFromAsyncTask<A>(_:)(&v28, &unk_101111CE0, v1, v23);
    swift_release(v1);
    v24 = (uint64_t)v28;
    v25 = sub_1000175E0((uint64_t)v28);
    swift_bridgeObjectRelease(v24);
    v28 = (_QWORD *)v22;
    sub_1000175CC((uint64_t)v25);
    return (uint64_t)v28;
  }
  return (uint64_t)v17;
}

uint64_t sub_1000175CC(uint64_t a1)
{
  return sub_10001B858(a1, (uint64_t (*)(void))sub_10001BC00, (uint64_t *)&unk_1010F7720);
}

_QWORD *sub_1000175E0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  int64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;

  v2 = type metadata accessor for LocalFindableAccessoryRecord(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = _swiftEmptyArrayStorage;
  if (v6)
  {
    v17 = _swiftEmptyArrayStorage;
    sub_10009A628(0, v6, 0);
    v7 = v17;
    v8 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v9 = *(_QWORD *)(v3 + 72);
    do
    {
      sub_10005972C(v8, (uint64_t)v5, type metadata accessor for LocalFindableAccessoryRecord);
      v17 = v7;
      v11 = v7[2];
      v10 = v7[3];
      if (v11 >= v10 >> 1)
      {
        sub_10009A628(v10 > 1, v11 + 1, 1);
        v7 = v17;
      }
      v15 = v2;
      v16 = sub_100006204(&qword_1010F4A80, type metadata accessor for LocalFindableAccessoryRecord, (uint64_t)&unk_100E25DE4);
      v12 = sub_100018F08(&v14);
      sub_10005972C((uint64_t)v5, (uint64_t)v12, type metadata accessor for LocalFindableAccessoryRecord);
      v7[2] = v11 + 1;
      sub_10000F9FC(&v14, (uint64_t)&v7[5 * v11 + 4]);
      sub_1000126B0((uint64_t)v5, type metadata accessor for LocalFindableAccessoryRecord);
      v8 += v9;
      --v6;
    }
    while (v6);
  }
  return v7;
}

_QWORD *sub_100017758(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  int64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;

  v2 = type metadata accessor for SharedBeaconRecord(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = _swiftEmptyArrayStorage;
  if (v6)
  {
    v17 = _swiftEmptyArrayStorage;
    sub_10009A628(0, v6, 0);
    v7 = v17;
    v8 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v9 = *(_QWORD *)(v3 + 72);
    do
    {
      sub_10005972C(v8, (uint64_t)v5, type metadata accessor for SharedBeaconRecord);
      v17 = v7;
      v11 = v7[2];
      v10 = v7[3];
      if (v11 >= v10 >> 1)
      {
        sub_10009A628(v10 > 1, v11 + 1, 1);
        v7 = v17;
      }
      v15 = v2;
      v16 = sub_100006204(&qword_1010F4A70, type metadata accessor for SharedBeaconRecord, (uint64_t)&unk_100E6F5CC);
      v12 = sub_100018F08(&v14);
      sub_10005972C((uint64_t)v5, (uint64_t)v12, type metadata accessor for SharedBeaconRecord);
      v7[2] = v11 + 1;
      sub_10000F9FC(&v14, (uint64_t)&v7[5 * v11 + 4]);
      sub_1000126B0((uint64_t)v5, type metadata accessor for SharedBeaconRecord);
      v8 += v9;
      --v6;
    }
    while (v6);
  }
  return v7;
}

_QWORD *sub_1000178D0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  int64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;

  v2 = type metadata accessor for OwnedBeaconRecord(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = _swiftEmptyArrayStorage;
  if (v6)
  {
    v17 = _swiftEmptyArrayStorage;
    sub_10009A628(0, v6, 0);
    v7 = v17;
    v8 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v9 = *(_QWORD *)(v3 + 72);
    do
    {
      sub_10005972C(v8, (uint64_t)v5, type metadata accessor for OwnedBeaconRecord);
      v17 = v7;
      v11 = v7[2];
      v10 = v7[3];
      if (v11 >= v10 >> 1)
      {
        sub_10009A628(v10 > 1, v11 + 1, 1);
        v7 = v17;
      }
      v15 = v2;
      v16 = sub_100006204(&qword_1010ECCB8, type metadata accessor for OwnedBeaconRecord, (uint64_t)&unk_100E57B60);
      v12 = sub_100018F08(&v14);
      sub_10005972C((uint64_t)v5, (uint64_t)v12, type metadata accessor for OwnedBeaconRecord);
      v7[2] = v11 + 1;
      sub_10000F9FC(&v14, (uint64_t)&v7[5 * v11 + 4]);
      sub_1000126B0((uint64_t)v5, type metadata accessor for OwnedBeaconRecord);
      v8 += v9;
      --v6;
    }
    while (v6);
  }
  return v7;
}

uint64_t type metadata accessor for OwnedBeaconRecord(uint64_t a1)
{
  uint64_t result;

  result = qword_10110EDD0;
  if (!qword_10110EDD0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for OwnedBeaconRecord);
  return result;
}

uint64_t sub_100017A84(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int (*v34)(uint64_t, uint64_t, uint64_t);
  _QWORD *v35;
  uint64_t v36;
  void (*v37)(void);
  char *v38;
  char *v39;
  uint64_t v40;
  _QWORD *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  char *v49;
  char *v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;

  v3 = type metadata accessor for LocalFindableAccessoryRecord(0);
  v53 = *(_QWORD *)(v3 - 8);
  v4 = __chkstk_darwin(v3);
  v52 = (char *)&v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v49 = (char *)&v45 - v6;
  v7 = sub_10001A9A8(&qword_1010EF3A8);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v50 = (char *)&v45 - v11;
  v12 = type metadata accessor for Row(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v16 = (char *)&v45 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v14);
  v19 = (char *)&v45 - v18;
  __chkstk_darwin(v17);
  v21 = (char *)&v45 - v20;
  result = Connection.prepare(_:)(a1);
  if (!v1)
  {
    v23 = result;
    v51 = v16;
    v47 = v21;
    v48 = v19;
    v24 = swift_retain();
    v25 = dispatch thunk of _AnySequenceBox._underestimatedCount.getter(v24);
    v55 = _swiftEmptyArrayStorage;
    sub_100017FBC(0, v25 & ~(v25 >> 63), 0);
    v26 = swift_retain();
    v54 = dispatch thunk of _AnySequenceBox._makeIterator()(v26);
    v46 = v23;
    result = swift_release();
    if (v25 < 0)
    {
      __break(1u);
LABEL_22:
      __break(1u);
      return result;
    }
    if (v25)
    {
      v27 = v52;
      do
      {
        dispatch thunk of _AnyIteratorBoxBase.next()(result);
        result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v10, 1, v12);
        if ((_DWORD)result == 1)
          goto LABEL_22;
        v28 = (uint64_t)v51;
        (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v51, v10, v12);
        sub_1008FDFA0(v28, v27);
        (*(void (**)(char *, uint64_t))(v13 + 8))(v10, v12);
        v29 = v55;
        if ((swift_isUniquelyReferenced_nonNull_native(v55) & 1) == 0)
        {
          sub_100017FBC(0, v29[2] + 1, 1);
          v29 = v55;
        }
        v31 = v29[2];
        v30 = v29[3];
        if (v31 >= v30 >> 1)
        {
          sub_100017FBC(v30 > 1, v31 + 1, 1);
          v29 = v55;
        }
        v29[2] = v31 + 1;
        v32 = (uint64_t)v29
            + ((*(unsigned __int8 *)(v53 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v53 + 80))
            + *(_QWORD *)(v53 + 72) * v31;
        v27 = v52;
        result = sub_1000126EC((uint64_t)v52, v32, type metadata accessor for LocalFindableAccessoryRecord);
      }
      while (--v25);
    }
    v33 = (uint64_t)v50;
    dispatch thunk of _AnyIteratorBoxBase.next()(result);
    v34 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48);
    if (v34(v33, 1, v12) != 1)
    {
      v37 = *(void (**)(void))(v13 + 32);
      v38 = v49;
      do
      {
        v39 = v47;
        v37();
        v40 = (uint64_t)v48;
        (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v48, v39, v12);
        sub_1008FDFA0(v40, v38);
        (*(void (**)(char *, uint64_t))(v13 + 8))(v39, v12);
        v41 = v55;
        if ((swift_isUniquelyReferenced_nonNull_native(v55) & 1) == 0)
        {
          sub_100017FBC(0, v41[2] + 1, 1);
          v41 = v55;
        }
        v43 = v41[2];
        v42 = v41[3];
        if (v43 >= v42 >> 1)
        {
          sub_100017FBC(v42 > 1, v43 + 1, 1);
          v41 = v55;
        }
        v41[2] = v43 + 1;
        v38 = v49;
        v44 = sub_1000126EC((uint64_t)v49, (uint64_t)v41+ ((*(unsigned __int8 *)(v53 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v53 + 80))+ *(_QWORD *)(v53 + 72) * v43, type metadata accessor for LocalFindableAccessoryRecord);
        v33 = (uint64_t)v50;
        dispatch thunk of _AnyIteratorBoxBase.next()(v44);
      }
      while (v34(v33, 1, v12) != 1);
    }
    swift_release();
    sub_100004048(v33, &qword_1010EF3A8);
    swift_release_n(v46, 2);
    v35 = v55;
    v36 = sub_10001A9A8(&qword_10110CD88);
    result = swift_allocObject(v36, 24, 7);
    *(_QWORD *)(result + 16) = v35;
  }
  return result;
}

uint64_t type metadata accessor for LocalFindableAccessoryRecord(uint64_t a1)
{
  uint64_t result;

  result = qword_1010EDB68;
  if (!qword_1010EDB68)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for LocalFindableAccessoryRecord);
  return result;
}

uint64_t sub_100017FBC(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_100017FE8(a1, a2, a3, (_QWORD *)*v3, &qword_1010ED2B0, type metadata accessor for LocalFindableAccessoryRecord);
  *v3 = result;
  return result;
}

uint64_t sub_100017FE8(char a1, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t (*a6)(_QWORD))
{
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  size_t v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  unint64_t v28;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (!v12)
  {
    v18 = &_swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  v13 = sub_10001A9A8(a5);
  v14 = *(_QWORD *)(a6(0) - 8);
  v15 = *(_QWORD *)(v14 + 72);
  v16 = *(unsigned __int8 *)(v14 + 80);
  v17 = (v16 + 32) & ~v16;
  v18 = (_QWORD *)swift_allocObject(v13, v17 + v15 * v12, v16 | 7);
  v19 = j__malloc_size(v18);
  if (!v15)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v19 - v17 == 0x8000000000000000 && v15 == -1)
    goto LABEL_34;
  v18[2] = v11;
  v18[3] = 2 * ((uint64_t)(v19 - v17) / v15);
LABEL_19:
  v21 = a6(0);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = (*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
  v24 = (char *)v18 + v23;
  v25 = (char *)a4 + v23;
  if ((a1 & 1) != 0)
  {
    if (v18 < a4 || v24 >= &v25[*(_QWORD *)(v22 + 72) * v11])
    {
      swift_arrayInitWithTakeFrontToBack(v24, v25, v11, v21);
    }
    else if (v18 != a4)
    {
      swift_arrayInitWithTakeBackToFront(v24, v25);
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  v26 = *(_QWORD *)(v22 + 72) * v11;
  v27 = &v24[v26];
  v28 = (unint64_t)&v25[v26];
  if (v25 >= v27 || (unint64_t)v24 >= v28)
  {
    swift_arrayInitWithCopy(v24);
LABEL_32:
    swift_release(a4);
    return (uint64_t)v18;
  }
LABEL_36:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

char *sub_1000181C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  Swift::String v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  void (*v34)(char *, uint64_t);
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  uint8_t *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  void (*v45)(char *, uint64_t, uint64_t);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(uint64_t, uint64_t, uint64_t, uint64_t);
  char *v51;
  uint64_t v52;
  void (*v53)(char *, uint64_t);
  uint64_t v54;
  void (*v55)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  char *v84;
  char *v85;
  char *v86;

  v1 = v0;
  v2 = sub_10001A9A8(&qword_1010F46C0);
  __chkstk_darwin(v2);
  v82 = (char *)&v70 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_10001A9A8((uint64_t *)&unk_1010F77A0);
  __chkstk_darwin(v4);
  v78 = (char *)&v70 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10001A9A8((uint64_t *)&unk_101111C60);
  v80 = *(_QWORD *)(v6 - 8);
  v81 = v6;
  v7 = __chkstk_darwin(v6);
  v77 = (char *)&v70 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v79 = (uint64_t)&v70 - v9;
  v10 = type metadata accessor for URL(0);
  v83 = *(_QWORD *)(v10 - 8);
  v11 = __chkstk_darwin(v10);
  v75 = (char *)&v70 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v70 - v14;
  __chkstk_darwin(v13);
  v84 = (char *)&v70 - v16;
  v17 = sub_10001A9A8(&qword_10110ABD0);
  v18 = __chkstk_darwin(v17);
  v20 = (char *)&v70 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v76 = (uint64_t)&v70 - v21;
  v22 = type metadata accessor for SystemInfo.DeviceLockState(0);
  v23 = *(_QWORD *)(v22 - 8);
  v24 = __chkstk_darwin(v22);
  v26 = (char *)&v70 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  v28 = (char *)&v70 - v27;
  v29._object = (void *)0x8000000100EE8760;
  v29._countAndFlagsBits = 0xD000000000000013;
  prohibitAsyncContext(functionName:)(v29);
  static SystemInfo.lockState.getter(v30);
  (*(void (**)(char *, _QWORD, uint64_t))(v23 + 104))(v26, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v22);
  v31 = sub_100006204((unint64_t *)&unk_1010F4700, (uint64_t (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState, (uint64_t)&protocol conformance descriptor for SystemInfo.DeviceLockState);
  dispatch thunk of RawRepresentable.rawValue.getter(&v86, v22, v31);
  dispatch thunk of RawRepresentable.rawValue.getter(&v85, v22, v31);
  v33 = v85;
  v32 = v86;
  v34 = *(void (**)(char *, uint64_t))(v23 + 8);
  v34(v26, v22);
  v34(v28, v22);
  if (v32 == v33)
  {
    if (qword_1010E9F80 != -1)
      swift_once(&qword_1010E9F80, sub_1007FA778);
    v35 = type metadata accessor for Logger(0);
    v36 = sub_10001A9E8(v35, (uint64_t)qword_1011B77E8);
    v37 = Logger.logObject.getter(v36);
    v38 = static os_log_type_t.error.getter(v37);
    if (os_log_type_enabled(v37, v38))
    {
      v39 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v39 = 0;
      _os_log_impl((void *)&_mh_execute_header, v37, v38, "sharedBeaconRecords call failed because in device is in beforeFirstUnlock state", v39, 2u);
      swift_slowDealloc(v39, -1, -1);
    }

    return (char *)_swiftEmptyArrayStorage;
  }
  else
  {
    v41 = *(_QWORD *)(v1 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_cachedBeaconRecordsQueueSynchronizer);
    sub_10001A9A8(&qword_10110ABD8);
    QueueSynchronizer.conditionalSync<A>(_:)(sub_1000088E0);
    v40 = v86;
    if (!v86)
    {
      v72 = 0;
      v73 = v1;
      v74 = v41;
      v42 = *(_QWORD *)(v1 + 160);
      if (qword_1010EA5B8 != -1)
        swift_once(&qword_1010EA5B8, sub_100D3AD18);
      v43 = sub_10001A9E8(v10, (uint64_t)qword_1011B8448);
      v44 = v84;
      v45 = *(void (**)(char *, uint64_t, uint64_t))(v83 + 16);
      v45(v84, v43, v10);
      v45(v15, (uint64_t)v44, v10);
      v46 = v81;
      v47 = (uint64_t)v77;
      v71 = &v77[*(int *)(v81 + 40)];
      v48 = (uint64_t)v71;
      v49 = type metadata accessor for DirectorySequence(0);
      v50 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 56);
      v50(v48, 1, 1, v49);
      v45((char *)v47, (uint64_t)v15, v10);
      *(_QWORD *)(v47 + *(int *)(v46 + 36)) = v42;
      v51 = v75;
      v45(v75, (uint64_t)v15, v10);
      swift_retain();
      v52 = (uint64_t)v78;
      DirectorySequence.init(at:includingPropertiesForKeys:options:)(v51, 0, 0);
      v53 = *(void (**)(char *, uint64_t))(v83 + 8);
      v53(v15, v10);
      v50(v52, 0, 1, v49);
      sub_100004084(v52, (uint64_t)v71, (uint64_t *)&unk_1010F77A0);
      v54 = v79;
      sub_100005CF0(v47, v79, (uint64_t *)&unk_101111C60);
      v55 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v80 + 56);
      v55(v20, 1, 1, v46);
      sub_100004048((uint64_t)v20, &qword_10110ABE0);
      sub_100005CF0(v54, (uint64_t)v20, (uint64_t *)&unk_101111C60);
      v55(v20, 0, 1, v46);
      v56 = (uint64_t)v20;
      v57 = v76;
      sub_100005CF0(v56, v76, &qword_10110ABD0);
      v53(v84, v10);
      v58 = sub_10088F358(v57);
      v59 = sub_100004048(v57, &qword_10110ABD0);
      __chkstk_darwin(v59);
      v60 = v73;
      *(&v70 - 2) = v73;
      *(&v70 - 1) = v58;
      sub_10001A9A8(&qword_1010ECA48);
      QueueSynchronizer.conditionalSync<A>(_:)(sub_1008802E0);
      v40 = v86;
      v61 = sub_100CA7EF8(v58);
      swift_release(v58);
      v62 = swift_bridgeObjectRetain(v40);
      v63 = sub_100CA7EF8(v62);
      swift_bridgeObjectRelease(v40);
      if (*(_QWORD *)(v63 + 16) <= *(_QWORD *)(v61 + 16) >> 3)
      {
        v86 = (char *)v61;
        sub_10063ABAC(v63);
        swift_bridgeObjectRelease(v63);
        v64 = v86;
      }
      else
      {
        v64 = sub_10063BF68(v63, v61);
        swift_bridgeObjectRelease(v63);
      }
      v65 = type metadata accessor for TaskPriority(0);
      v66 = (uint64_t)v82;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v65 - 8) + 56))(v82, 1, 1, v65);
      v67 = (_QWORD *)swift_allocObject(&unk_101096400, 48, 7);
      v67[2] = 0;
      v67[3] = 0;
      v67[4] = v60;
      v67[5] = v64;
      swift_retain();
      v68 = sub_100691AC0(v66, (uint64_t)&unk_10110ABF0, (uint64_t)v67);
      swift_release(v68);
    }
  }
  return v40;
}

char *sub_1000188D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  Swift::String v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  void (*v31)(char *, uint64_t);
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  void (*v39)(char *, uint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(uint64_t, uint64_t, uint64_t, uint64_t);
  char *v45;
  uint64_t v46;
  void (*v47)(char *, uint64_t);
  uint64_t v48;
  void (*v49)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  _QWORD *v68;
  _QWORD *v69;

  v1 = v0;
  v2 = sub_10001A9A8((uint64_t *)&unk_1010F77A0);
  __chkstk_darwin(v2);
  v61 = (char *)&v55 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v65 = sub_10001A9A8(&qword_101111C70);
  v63 = *(_QWORD *)(v65 - 8);
  v4 = __chkstk_darwin(v65);
  v60 = (char *)&v55 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v62 = (uint64_t)&v55 - v6;
  v7 = type metadata accessor for URL(0);
  v66 = *(_QWORD *)(v7 - 8);
  v8 = __chkstk_darwin(v7);
  v59 = (char *)&v55 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v55 - v11;
  __chkstk_darwin(v10);
  v67 = (char *)&v55 - v13;
  v14 = sub_10001A9A8(&qword_10110ABF8);
  v15 = __chkstk_darwin(v14);
  v17 = (char *)&v55 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v64 = (uint64_t)&v55 - v18;
  v19 = type metadata accessor for SystemInfo.DeviceLockState(0);
  v20 = *(_QWORD *)(v19 - 8);
  v21 = __chkstk_darwin(v19);
  v23 = (char *)&v55 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v25 = (char *)&v55 - v24;
  v26._object = (void *)0x8000000100EE8780;
  v26._countAndFlagsBits = 0xD000000000000012;
  prohibitAsyncContext(functionName:)(v26);
  static SystemInfo.lockState.getter(v27);
  (*(void (**)(char *, _QWORD, uint64_t))(v20 + 104))(v23, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v19);
  v28 = sub_100006204((unint64_t *)&unk_1010F4700, (uint64_t (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState, (uint64_t)&protocol conformance descriptor for SystemInfo.DeviceLockState);
  dispatch thunk of RawRepresentable.rawValue.getter(&v69, v19, v28);
  dispatch thunk of RawRepresentable.rawValue.getter(&v68, v19, v28);
  v30 = v68;
  v29 = v69;
  v31 = *(void (**)(char *, uint64_t))(v20 + 8);
  v31(v23, v19);
  v32 = ((uint64_t (*)(char *, uint64_t))v31)(v25, v19);
  if (v29 == v30)
  {
    v33 = static os_log_type_t.default.getter(v32);
    if (qword_1010EA258 != -1)
      swift_once(&qword_1010EA258, sub_100B5D9CC);
    v34 = (char *)_swiftEmptyArrayStorage;
    os_log(_:dso:log:_:_:)(v33, &_mh_execute_header, qword_1011B7D38, "ownedBeaconRecords call failed because in device is in beforeFirstUnlock state", 78, 2, _swiftEmptyArrayStorage);
  }
  else
  {
    v35 = *(_QWORD *)(v1 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_cachedBeaconRecordsQueueSynchronizer);
    sub_10001A9A8(&qword_10110AC00);
    QueueSynchronizer.conditionalSync<A>(_:)(sub_100006054);
    v34 = (char *)v69;
    if (!v69)
    {
      v57 = 0;
      v58 = v35;
      v36 = *(_QWORD *)(v1 + 160);
      v56 = v1;
      if (qword_1010EA0D8 != -1)
        swift_once(&qword_1010EA0D8, sub_1009A3098);
      v37 = sub_10001A9E8(v7, (uint64_t)qword_1011B7AA8);
      v38 = v67;
      v39 = *(void (**)(char *, uint64_t, uint64_t))(v66 + 16);
      v39(v67, v37, v7);
      v39(v12, (uint64_t)v38, v7);
      v40 = v65;
      v41 = (uint64_t)v60;
      v55 = &v60[*(int *)(v65 + 40)];
      v42 = (uint64_t)v55;
      v43 = type metadata accessor for DirectorySequence(0);
      v44 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 56);
      v44(v42, 1, 1, v43);
      v39((char *)v41, (uint64_t)v12, v7);
      *(_QWORD *)(v41 + *(int *)(v40 + 36)) = v36;
      v45 = v59;
      v39(v59, (uint64_t)v12, v7);
      swift_retain();
      v46 = (uint64_t)v61;
      DirectorySequence.init(at:includingPropertiesForKeys:options:)(v45, 0, 0);
      v47 = *(void (**)(char *, uint64_t))(v66 + 8);
      v47(v12, v7);
      v44(v46, 0, 1, v43);
      sub_100004084(v46, (uint64_t)v55, (uint64_t *)&unk_1010F77A0);
      v48 = v62;
      sub_100005CF0(v41, v62, &qword_101111C70);
      v49 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v63 + 56);
      v49(v17, 1, 1, v40);
      sub_100004048((uint64_t)v17, &qword_10110AC08);
      sub_100005CF0(v48, (uint64_t)v17, &qword_101111C70);
      v49(v17, 0, 1, v40);
      v50 = v64;
      sub_100005CF0((uint64_t)v17, v64, &qword_10110ABF8);
      v47(v67, v7);
      sub_10000F9B8(v50, (uint64_t)v17, &qword_10110ABF8);
      v51 = v56;
      swift_retain();
      sub_100859948((uint64_t)v17, v51);
      v34 = v52;
      v53 = swift_release(v51);
      __chkstk_darwin(v53);
      *(&v55 - 2) = (char *)v51;
      *(&v55 - 1) = v34;
      QueueSynchronizer.conditionalSync<A>(_:)(sub_100880394);
      sub_100004048(v50, &qword_10110ABF8);
    }
  }
  return v34;
}

uint64_t sub_100018E88(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for DefaultConfigurationLayer(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for DefaultConfigurationLayer(uint64_t a1)
{
  uint64_t result;

  result = qword_101104340;
  if (!qword_101104340)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for DefaultConfigurationLayer);
  return result;
}

_QWORD *sub_100018F08(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;

  v1 = a1;
  if ((*(_BYTE *)(*(_QWORD *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (_QWORD *)v2;
  }
  return v1;
}

uint64_t sub_100018F44(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for DefaultConfigurationLayer(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for BeaconManagerService(uint64_t a1)
{
  uint64_t result;

  result = qword_101107630;
  if (!qword_101107630)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for BeaconManagerService);
  return result;
}

uint64_t type metadata accessor for SimpleBeaconUpdateService()
{
  return objc_opt_self(_TtC12searchpartyd25SimpleBeaconUpdateService);
}

uint64_t type metadata accessor for BeaconStoreActor()
{
  return objc_opt_self(_TtC12searchpartyd16BeaconStoreActor);
}

uint64_t type metadata accessor for ObservationStoreService()
{
  return objc_opt_self(_TtC12searchpartyd23ObservationStoreService);
}

uint64_t sub_10001901C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  void *v16;
  id v17;
  unsigned int v18;
  NSString v19;
  char v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD aBlock[5];
  _QWORD *v40;

  v8 = type metadata accessor for DispatchWorkItemFlags(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = type metadata accessor for DispatchQoS(0);
  v12 = *(_QWORD *)(v37 - 8);
  __chkstk_darwin(v37);
  v14 = (char *)&v35 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_QWORD *)(a1 + 16))
  {
    swift_retain();
    v15 = (uint64_t)sub_1004BC684(a1, a2);
  }
  else
  {
    v36 = v9;
    if (qword_1010EA198 != -1)
      swift_once(&qword_1010EA198, sub_100ACDE4C);
    v16 = (void *)qword_1011B7C08;
    v17 = objc_msgSend((id)objc_opt_self(FMSystemInfo), "sharedInstance");
    v18 = objc_msgSend(v17, "isInternalBuild");

    v35 = a3;
    if (v18)
    {
      v19 = String._bridgeToObjectiveC()();
      v20 = objc_msgSend(v16, "BOOLForKey:", v19);

    }
    else
    {
      v20 = 0;
    }
    v21 = sub_10081CEB8();
    v22 = sub_10001BAFC((uint64_t)v21);
    swift_bridgeObjectRelease();
    v23 = sub_10001AFC0();
    v24 = sub_10001BAD8((uint64_t)v23);
    swift_bridgeObjectRelease();
    aBlock[0] = v22;
    sub_10001BB84((uint64_t)v24);
    v25 = aBlock[0];
    swift_retain();
    v15 = sub_10001AAA8(v25, a2, v20);
    a3 = v35;
    v9 = v36;
  }
  swift_release(a2);
  swift_retain();
  v26 = sub_1004BCD8C(v15, a2);
  swift_bridgeObjectRelease();
  swift_release(a2);
  v27 = sub_10001ACD0((uint64_t)v26);
  swift_bridgeObjectRelease();
  v28 = (_QWORD *)swift_allocObject(&unk_101079C30, 40, 7);
  v28[2] = a3;
  v28[3] = a4;
  v28[4] = v27;
  aBlock[4] = sub_1000170EC;
  v40 = v28;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_101079C48;
  v29 = _Block_copy(aBlock);
  v30 = swift_retain();
  static DispatchQoS.unspecified.getter(v30);
  v38 = _swiftEmptyArrayStorage;
  v31 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v32 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v33 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v38, v32, v33, v8, v31);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v14, v11, v29);
  _Block_release(v29);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v37);
  return swift_release(v40);
}

uint64_t sub_1000193A4(unint64_t *a1, uint64_t *a2, const char *a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_10001F784(a2);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000193E4(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = sub_10001F784(a2);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for [A], v4);
    atomic_store(result, a1);
  }
  return result;
}

_QWORD *sub_100019424(_QWORD *a1, uint64_t a2, void (*a3)(char *, uint64_t, _QWORD **, _QWORD **), uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  id v21;
  uint64_t (*v22)(char *, uint64_t, uint64_t);
  int v23;
  void (*v24)(char *, uint64_t, _QWORD **, _QWORD **);
  uint64_t v25;
  void (*v26)(char *, char *, uint64_t);
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(char *, uint64_t, _QWORD **, _QWORD **);
  char *v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;

  v47 = a3;
  v7 = sub_10001A9A8(&qword_1010FBA40);
  __chkstk_darwin(v7);
  v9 = (char *)&v43 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DirectorySequence(0);
  v44 = *(_QWORD *)(v10 - 8);
  v45 = v10;
  __chkstk_darwin(v10);
  v12 = (char *)&v43 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for URL(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = __chkstk_darwin(v13);
  v17 = (char *)&v43 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v19 = (char *)&v43 - v18;
  if (*a1 != -1)
    swift_once(a1, a4);
  v20 = sub_10001A9E8(v13, a2);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v19, v20, v13);
  v50 = _swiftEmptyArrayStorage;
  v51 = _swiftEmptyArrayStorage;
  v21 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
  v48 = v19;
  NSFileManager.deepSequence(at:includingPropertiesForKeys:options:)(v19, 0, 0);

  ((void (*)(void))DirectorySequence.next())();
  v22 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48);
  v23 = v22(v9, 1, v13);
  v49 = v14;
  v25 = v46;
  v24 = v47;
  if (v23 != 1)
  {
    v26 = *(void (**)(char *, char *, uint64_t))(v49 + 32);
    do
    {
      v26(v17, v9, v13);
      v27 = objc_autoreleasePoolPush();
      v24(v17, v25, &v51, &v50);
      objc_autoreleasePoolPop(v27);
      v28 = (*(uint64_t (**)(char *, uint64_t))(v49 + 8))(v17, v13);
      DirectorySequence.next()(v28);
    }
    while (v22(v9, 1, v13) != 1);
  }
  v29 = (*(uint64_t (**)(char *, uint64_t))(v44 + 8))(v12, v45);
  v30 = static os_log_type_t.debug.getter(v29);
  v31 = sub_10000F4A0(0, (unint64_t *)&qword_1010ED8F0, OS_os_log_ptr);
  v32 = (void *)static OS_os_log.default.getter(v31);
  v33 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v34 = swift_allocObject(v33, 112, 7);
  *(_OWORD *)(v34 + 16) = xmmword_100E22B10;
  v35 = v51;
  v36 = v51[2];
  *(_QWORD *)(v34 + 56) = &type metadata for Int;
  *(_QWORD *)(v34 + 64) = &protocol witness table for Int;
  *(_QWORD *)(v34 + 32) = v36;
  v37 = sub_100006204((unint64_t *)&qword_101108070, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
  v38 = v48;
  v39 = dispatch thunk of CustomStringConvertible.description.getter(v13, v37);
  v41 = v40;
  *(_QWORD *)(v34 + 96) = &type metadata for String;
  *(_QWORD *)(v34 + 104) = sub_10001AA00();
  *(_QWORD *)(v34 + 72) = v39;
  *(_QWORD *)(v34 + 80) = v41;
  os_log(_:dso:log:_:_:)(v30, &_mh_execute_header, v32, "Found %i records at %@", 22, 2, v34);

  swift_bridgeObjectRelease(v34);
  swift_bridgeObjectRelease(v50);
  (*(void (**)(char *, uint64_t))(v49 + 8))(v38, v13);
  return v35;
}

uint64_t sub_100019790(uint64_t a1, int *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4 >> 60 != 15)
    sub_10001BC14(*(_QWORD *)a1, v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  v5 = a1 + a2[60];
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6))
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  v8 = a1 + a2[61];
  v9 = type metadata accessor for Date(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
  if (!v11(v8, 1, v9))
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v8, v9);
  v12 = a1 + a2[63];
  if (!v11(v12, 1, v9))
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v12, v9);
  if (*(_QWORD *)(a1 + a2[70] + 48))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_100019924(uint64_t a1, uint64_t *a2, int *a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int (*v46)(const void *, uint64_t, uint64_t, __n128);
  id v47;
  __n128 v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int (*v55)(const void *, uint64_t, uint64_t);
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  __int128 v87;
  uint64_t v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  _QWORD *v115;
  _QWORD *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  _QWORD *v128;
  _QWORD *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  _QWORD *v135;
  _QWORD *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  _QWORD *v142;
  _QWORD *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t *v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t *v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  char v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  char v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t *v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  void *__dst;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;

  v6 = a2[1];
  if (v6 >> 60 == 15)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    v7 = *a2;
    sub_10001BBBC(*a2, a2[1]);
    *(_QWORD *)a1 = v7;
    *(_QWORD *)(a1 + 8) = v6;
  }
  *(_QWORD *)(a1 + 16) = a2[2];
  *(_WORD *)(a1 + 24) = *((_WORD *)a2 + 12);
  *(_QWORD *)(a1 + 32) = a2[4];
  *(_BYTE *)(a1 + 40) = *((_BYTE *)a2 + 40);
  *(_QWORD *)(a1 + 48) = a2[6];
  *(_WORD *)(a1 + 56) = *((_WORD *)a2 + 28);
  v362 = a2[8];
  *(_QWORD *)(a1 + 64) = v362;
  *(_BYTE *)(a1 + 72) = *((_BYTE *)a2 + 72);
  v361 = a2[11];
  *(_QWORD *)(a1 + 80) = a2[10];
  *(_QWORD *)(a1 + 88) = v361;
  *(_QWORD *)(a1 + 96) = a2[12];
  *(_BYTE *)(a1 + 104) = *((_BYTE *)a2 + 104);
  *(_WORD *)(a1 + 105) = *(_WORD *)((char *)a2 + 105);
  *(_QWORD *)(a1 + 112) = a2[14];
  *(_BYTE *)(a1 + 120) = *((_BYTE *)a2 + 120);
  *(_QWORD *)(a1 + 128) = a2[16];
  *(_BYTE *)(a1 + 136) = *((_BYTE *)a2 + 136);
  v8 = a2[18];
  *(_BYTE *)(a1 + 152) = *((_BYTE *)a2 + 152);
  *(_QWORD *)(a1 + 144) = v8;
  *(_BYTE *)(a1 + 168) = *((_BYTE *)a2 + 168);
  *(_QWORD *)(a1 + 160) = a2[20];
  *(_BYTE *)(a1 + 184) = *((_BYTE *)a2 + 184);
  *(_QWORD *)(a1 + 176) = a2[22];
  *(_BYTE *)(a1 + 200) = *((_BYTE *)a2 + 200);
  *(_QWORD *)(a1 + 192) = a2[24];
  *(_BYTE *)(a1 + 216) = *((_BYTE *)a2 + 216);
  *(_QWORD *)(a1 + 208) = a2[26];
  v9 = a2[28];
  *(_BYTE *)(a1 + 232) = *((_BYTE *)a2 + 232);
  *(_QWORD *)(a1 + 224) = v9;
  v10 = a2[30];
  *(_BYTE *)(a1 + 248) = *((_BYTE *)a2 + 248);
  *(_QWORD *)(a1 + 240) = v10;
  v11 = a2[32];
  *(_BYTE *)(a1 + 264) = *((_BYTE *)a2 + 264);
  *(_QWORD *)(a1 + 256) = v11;
  v12 = a2[34];
  *(_BYTE *)(a1 + 280) = *((_BYTE *)a2 + 280);
  *(_QWORD *)(a1 + 272) = v12;
  v13 = a2[36];
  *(_BYTE *)(a1 + 296) = *((_BYTE *)a2 + 296);
  *(_QWORD *)(a1 + 288) = v13;
  v14 = a2[38];
  *(_BYTE *)(a1 + 312) = *((_BYTE *)a2 + 312);
  *(_QWORD *)(a1 + 304) = v14;
  *(_BYTE *)(a1 + 313) = *((_BYTE *)a2 + 313);
  v15 = a2[41];
  v360 = a2[40];
  *(_BYTE *)(a1 + 336) = *((_BYTE *)a2 + 336);
  *(_QWORD *)(a1 + 320) = v360;
  *(_QWORD *)(a1 + 328) = v15;
  v16 = a2[43];
  *(_BYTE *)(a1 + 352) = *((_BYTE *)a2 + 352);
  *(_QWORD *)(a1 + 344) = v16;
  v17 = a2[45];
  *(_BYTE *)(a1 + 368) = *((_BYTE *)a2 + 368);
  *(_QWORD *)(a1 + 360) = v17;
  v18 = a2[47];
  *(_BYTE *)(a1 + 384) = *((_BYTE *)a2 + 384);
  *(_QWORD *)(a1 + 376) = v18;
  v19 = a2[49];
  *(_BYTE *)(a1 + 400) = *((_BYTE *)a2 + 400);
  *(_QWORD *)(a1 + 392) = v19;
  v20 = a2[51];
  *(_BYTE *)(a1 + 416) = *((_BYTE *)a2 + 416);
  *(_QWORD *)(a1 + 408) = v20;
  v21 = a2[53];
  *(_BYTE *)(a1 + 432) = *((_BYTE *)a2 + 432);
  *(_QWORD *)(a1 + 424) = v21;
  v22 = a2[55];
  *(_BYTE *)(a1 + 448) = *((_BYTE *)a2 + 448);
  *(_QWORD *)(a1 + 440) = v22;
  v23 = a2[57];
  *(_BYTE *)(a1 + 464) = *((_BYTE *)a2 + 464);
  *(_QWORD *)(a1 + 456) = v23;
  v24 = a2[59];
  *(_BYTE *)(a1 + 480) = *((_BYTE *)a2 + 480);
  *(_QWORD *)(a1 + 472) = v24;
  *(_BYTE *)(a1 + 481) = *((_BYTE *)a2 + 481);
  v25 = a2[61];
  *(_BYTE *)(a1 + 496) = *((_BYTE *)a2 + 496);
  *(_QWORD *)(a1 + 488) = v25;
  v26 = a2[63];
  *(_BYTE *)(a1 + 512) = *((_BYTE *)a2 + 512);
  *(_QWORD *)(a1 + 504) = v26;
  v27 = a2[65];
  *(_BYTE *)(a1 + 528) = *((_BYTE *)a2 + 528);
  *(_QWORD *)(a1 + 520) = v27;
  v28 = a2[67];
  *(_BYTE *)(a1 + 544) = *((_BYTE *)a2 + 544);
  *(_QWORD *)(a1 + 536) = v28;
  v29 = a2[69];
  *(_BYTE *)(a1 + 560) = *((_BYTE *)a2 + 560);
  *(_QWORD *)(a1 + 552) = v29;
  v30 = a2[71];
  *(_BYTE *)(a1 + 576) = *((_BYTE *)a2 + 576);
  *(_QWORD *)(a1 + 568) = v30;
  v31 = a2[73];
  *(_BYTE *)(a1 + 592) = *((_BYTE *)a2 + 592);
  *(_QWORD *)(a1 + 584) = v31;
  v32 = a2[75];
  *(_QWORD *)(a1 + 600) = v32;
  v33 = a2[76];
  *(_BYTE *)(a1 + 616) = *((_BYTE *)a2 + 616);
  *(_QWORD *)(a1 + 608) = v33;
  v34 = a2[78];
  *(_BYTE *)(a1 + 632) = *((_BYTE *)a2 + 632);
  *(_QWORD *)(a1 + 624) = v34;
  v35 = (void *)a2[80];
  *(_QWORD *)(a1 + 640) = v35;
  v36 = a2[81];
  v37 = a2[82];
  *(_BYTE *)(a1 + 664) = *((_BYTE *)a2 + 664);
  *(_QWORD *)(a1 + 656) = v37;
  v38 = a2[84];
  *(_BYTE *)(a1 + 680) = *((_BYTE *)a2 + 680);
  *(_QWORD *)(a1 + 672) = v38;
  v39 = a2[86];
  *(_BYTE *)(a1 + 696) = *((_BYTE *)a2 + 696);
  *(_QWORD *)(a1 + 688) = v39;
  v40 = a2[88];
  *(_BYTE *)(a1 + 712) = *((_BYTE *)a2 + 712);
  *(_QWORD *)(a1 + 704) = v40;
  v41 = a2[90];
  *(_BYTE *)(a1 + 728) = *((_BYTE *)a2 + 728);
  *(_QWORD *)(a1 + 720) = v41;
  *(_BYTE *)(a1 + 729) = *((_BYTE *)a2 + 729);
  v42 = a3[60];
  __dst = (void *)(a1 + v42);
  v43 = (char *)a2 + v42;
  *(_QWORD *)(a1 + 648) = v36;
  v44 = type metadata accessor for UUID(0);
  v45 = *(_QWORD *)(v44 - 8);
  v46 = *(unsigned int (**)(const void *, uint64_t, uint64_t, __n128))(v45 + 48);
  swift_bridgeObjectRetain(v362);
  swift_bridgeObjectRetain(v361);
  swift_bridgeObjectRetain(v360);
  swift_bridgeObjectRetain(v32);
  v47 = v35;
  v48 = swift_bridgeObjectRetain(v36);
  if (v46(v43, 1, v44, v48))
  {
    v49 = sub_10001A9A8(&qword_1010ED860);
    memcpy(__dst, v43, *(_QWORD *)(*(_QWORD *)(v49 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(v45 + 16))(__dst, v43, v44);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v45 + 56))(__dst, 0, 1, v44);
  }
  v50 = a3[61];
  v51 = (void *)(a1 + v50);
  v52 = (char *)a2 + v50;
  v53 = type metadata accessor for Date(0);
  v54 = *(_QWORD *)(v53 - 8);
  v55 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v54 + 48);
  if (v55(v52, 1, v53))
  {
    v56 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
    memcpy(v51, v52, *(_QWORD *)(*(_QWORD *)(v56 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(v54 + 16))(v51, v52, v53);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v54 + 56))(v51, 0, 1, v53);
  }
  v57 = a3[62];
  v58 = a3[63];
  v59 = a1 + v57;
  v60 = (uint64_t)a2 + v57;
  *(_QWORD *)v59 = *(_QWORD *)v60;
  *(_BYTE *)(v59 + 8) = *(_BYTE *)(v60 + 8);
  v61 = (void *)(a1 + v58);
  v62 = (char *)a2 + v58;
  if (v55((char *)a2 + v58, 1, v53))
  {
    v63 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
    memcpy(v61, v62, *(_QWORD *)(*(_QWORD *)(v63 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(v54 + 16))(v61, v62, v53);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v54 + 56))(v61, 0, 1, v53);
  }
  v64 = a3[64];
  v65 = a1 + v64;
  v66 = (uint64_t)a2 + v64;
  *(_QWORD *)v65 = *(_QWORD *)v66;
  *(_BYTE *)(v65 + 8) = *(_BYTE *)(v66 + 8);
  v67 = a3[65];
  v68 = a1 + v67;
  v69 = (uint64_t)a2 + v67;
  *(_QWORD *)v68 = *(_QWORD *)v69;
  *(_BYTE *)(v68 + 8) = *(_BYTE *)(v69 + 8);
  v70 = a3[66];
  v71 = a1 + v70;
  v72 = (uint64_t)a2 + v70;
  *(_QWORD *)v71 = *(_QWORD *)v72;
  *(_BYTE *)(v71 + 8) = *(_BYTE *)(v72 + 8);
  v73 = a3[67];
  v74 = a1 + v73;
  v75 = (uint64_t)a2 + v73;
  *(_QWORD *)v74 = *(_QWORD *)v75;
  *(_BYTE *)(v74 + 8) = *(_BYTE *)(v75 + 8);
  v76 = a3[68];
  v77 = a1 + v76;
  v78 = (uint64_t *)((char *)a2 + v76);
  v79 = *v78;
  *(_BYTE *)(v77 + 8) = *((_BYTE *)v78 + 8);
  *(_QWORD *)v77 = v79;
  v80 = a3[69];
  v81 = a1 + v80;
  v82 = (uint64_t)a2 + v80;
  *(_BYTE *)(v81 + 8) = *(_BYTE *)(v82 + 8);
  *(_QWORD *)v81 = *(_QWORD *)v82;
  v83 = a3[70];
  v84 = a1 + v83;
  v85 = (uint64_t)a2 + v83;
  v86 = *(_QWORD *)(v85 + 48);
  if (v86)
  {
    v87 = *(_OWORD *)(v85 + 16);
    *(_OWORD *)v84 = *(_OWORD *)v85;
    *(_OWORD *)(v84 + 16) = v87;
    *(_OWORD *)(v84 + 32) = *(_OWORD *)(v85 + 32);
    *(_QWORD *)(v84 + 48) = v86;
    *(_OWORD *)(v84 + 56) = *(_OWORD *)(v85 + 56);
    *(_OWORD *)(v84 + 72) = *(_OWORD *)(v85 + 72);
    *(_OWORD *)(v84 + 88) = *(_OWORD *)(v85 + 88);
    v88 = *(_QWORD *)(v85 + 104);
    *(_QWORD *)(v84 + 104) = v88;
    swift_bridgeObjectRetain(v86);
    swift_bridgeObjectRetain(v88);
  }
  else
  {
    v89 = *(_OWORD *)(v85 + 80);
    *(_OWORD *)(v84 + 64) = *(_OWORD *)(v85 + 64);
    *(_OWORD *)(v84 + 80) = v89;
    *(_OWORD *)(v84 + 96) = *(_OWORD *)(v85 + 96);
    v90 = *(_OWORD *)(v85 + 16);
    *(_OWORD *)v84 = *(_OWORD *)v85;
    *(_OWORD *)(v84 + 16) = v90;
    v91 = *(_OWORD *)(v85 + 48);
    *(_OWORD *)(v84 + 32) = *(_OWORD *)(v85 + 32);
    *(_OWORD *)(v84 + 48) = v91;
  }
  *(_BYTE *)(a1 + a3[71]) = *((_BYTE *)a2 + a3[71]);
  *(_BYTE *)(a1 + a3[72]) = *((_BYTE *)a2 + a3[72]);
  *(_BYTE *)(a1 + a3[73]) = *((_BYTE *)a2 + a3[73]);
  v92 = a3[74];
  v93 = a1 + v92;
  v94 = (uint64_t)a2 + v92;
  *(_QWORD *)v93 = *(_QWORD *)v94;
  *(_BYTE *)(v93 + 8) = *(_BYTE *)(v94 + 8);
  v95 = a3[75];
  v96 = a1 + v95;
  v97 = (uint64_t)a2 + v95;
  *(_QWORD *)v96 = *(_QWORD *)v97;
  *(_BYTE *)(v96 + 8) = *(_BYTE *)(v97 + 8);
  v98 = a3[76];
  v99 = a1 + v98;
  v100 = (uint64_t)a2 + v98;
  *(_QWORD *)v99 = *(_QWORD *)v100;
  *(_BYTE *)(v99 + 8) = *(_BYTE *)(v100 + 8);
  v101 = a3[77];
  v102 = a1 + v101;
  v103 = (uint64_t)a2 + v101;
  *(_QWORD *)v102 = *(_QWORD *)v103;
  *(_BYTE *)(v102 + 8) = *(_BYTE *)(v103 + 8);
  v104 = a3[78];
  v105 = a1 + v104;
  v106 = (uint64_t *)((char *)a2 + v104);
  v107 = *v106;
  *(_BYTE *)(v105 + 8) = *((_BYTE *)v106 + 8);
  *(_QWORD *)v105 = v107;
  v108 = a3[79];
  v109 = a1 + v108;
  v110 = (uint64_t)a2 + v108;
  *(_QWORD *)v109 = *(_QWORD *)v110;
  *(_BYTE *)(v109 + 8) = *(_BYTE *)(v110 + 8);
  v111 = a3[80];
  v112 = a1 + v111;
  v113 = (uint64_t)a2 + v111;
  *(_QWORD *)v112 = *(_QWORD *)v113;
  *(_BYTE *)(v112 + 8) = *(_BYTE *)(v113 + 8);
  v114 = a3[81];
  v115 = (_QWORD *)(a1 + v114);
  v116 = (uint64_t *)((char *)a2 + v114);
  v117 = v116[1];
  *v115 = *v116;
  v115[1] = v117;
  *(_BYTE *)(a1 + a3[82]) = *((_BYTE *)a2 + a3[82]);
  v118 = a3[83];
  v119 = a1 + v118;
  v120 = (uint64_t)a2 + v118;
  *(_QWORD *)v119 = *(_QWORD *)v120;
  *(_BYTE *)(v119 + 8) = *(_BYTE *)(v120 + 8);
  v121 = a3[84];
  v122 = a1 + v121;
  v123 = (uint64_t)a2 + v121;
  *(_QWORD *)v122 = *(_QWORD *)v123;
  *(_BYTE *)(v122 + 8) = *(_BYTE *)(v123 + 8);
  v124 = a3[85];
  v125 = a1 + v124;
  v126 = (uint64_t)a2 + v124;
  *(_QWORD *)v125 = *(_QWORD *)v126;
  *(_BYTE *)(v125 + 8) = *(_BYTE *)(v126 + 8);
  v127 = a3[86];
  v128 = (_QWORD *)(a1 + v127);
  v129 = (uint64_t *)((char *)a2 + v127);
  v130 = v129[1];
  *v128 = *v129;
  v128[1] = v130;
  v131 = a3[87];
  v132 = a1 + v131;
  v133 = (uint64_t)a2 + v131;
  *(_QWORD *)v132 = *(_QWORD *)v133;
  *(_BYTE *)(v132 + 8) = *(_BYTE *)(v133 + 8);
  v134 = a3[88];
  v135 = (_QWORD *)(a1 + v134);
  v136 = (uint64_t *)((char *)a2 + v134);
  v137 = v136[1];
  *v135 = *v136;
  v135[1] = v137;
  v138 = a3[89];
  v139 = a1 + v138;
  v140 = (uint64_t)a2 + v138;
  *(_QWORD *)v139 = *(_QWORD *)v140;
  *(_BYTE *)(v139 + 8) = *(_BYTE *)(v140 + 8);
  v141 = a3[90];
  v142 = (_QWORD *)(a1 + v141);
  v143 = (uint64_t *)((char *)a2 + v141);
  v144 = v143[1];
  *v142 = *v143;
  v142[1] = v144;
  v145 = a3[91];
  v146 = a1 + v145;
  v147 = (uint64_t)a2 + v145;
  *(_QWORD *)v146 = *(_QWORD *)v147;
  *(_BYTE *)(v146 + 8) = *(_BYTE *)(v147 + 8);
  *(_BYTE *)(a1 + a3[92]) = *((_BYTE *)a2 + a3[92]);
  *(_BYTE *)(a1 + a3[93]) = *((_BYTE *)a2 + a3[93]);
  *(_BYTE *)(a1 + a3[94]) = *((_BYTE *)a2 + a3[94]);
  *(_BYTE *)(a1 + a3[95]) = *((_BYTE *)a2 + a3[95]);
  v148 = a3[96];
  v149 = a1 + v148;
  v150 = (uint64_t)a2 + v148;
  *(_QWORD *)v149 = *(_QWORD *)v150;
  *(_BYTE *)(v149 + 8) = *(_BYTE *)(v150 + 8);
  v151 = a3[97];
  v152 = a1 + v151;
  v153 = (uint64_t)a2 + v151;
  *(_QWORD *)v152 = *(_QWORD *)v153;
  *(_BYTE *)(v152 + 8) = *(_BYTE *)(v153 + 8);
  v154 = a3[98];
  v155 = a1 + v154;
  v156 = (uint64_t)a2 + v154;
  *(_QWORD *)v155 = *(_QWORD *)v156;
  *(_BYTE *)(v155 + 8) = *(_BYTE *)(v156 + 8);
  v157 = a3[99];
  v158 = a1 + v157;
  v159 = (uint64_t)a2 + v157;
  *(_QWORD *)v158 = *(_QWORD *)v159;
  *(_BYTE *)(v158 + 8) = *(_BYTE *)(v159 + 8);
  v160 = a3[100];
  v161 = a1 + v160;
  v162 = (uint64_t *)((char *)a2 + v160);
  v163 = *v162;
  *(_BYTE *)(v161 + 8) = *((_BYTE *)v162 + 8);
  *(_QWORD *)v161 = v163;
  v164 = a3[101];
  v165 = a1 + v164;
  v166 = (uint64_t)a2 + v164;
  *(_QWORD *)v165 = *(_QWORD *)v166;
  *(_BYTE *)(v165 + 8) = *(_BYTE *)(v166 + 8);
  v167 = a3[102];
  v168 = a1 + v167;
  v169 = (uint64_t)a2 + v167;
  *(_QWORD *)v168 = *(_QWORD *)v169;
  *(_BYTE *)(v168 + 8) = *(_BYTE *)(v169 + 8);
  v170 = a3[103];
  v171 = a1 + v170;
  v172 = (uint64_t)a2 + v170;
  *(_QWORD *)v171 = *(_QWORD *)v172;
  *(_BYTE *)(v171 + 8) = *(_BYTE *)(v172 + 8);
  v173 = a3[104];
  v174 = a1 + v173;
  v175 = (uint64_t)a2 + v173;
  *(_QWORD *)v174 = *(_QWORD *)v175;
  *(_BYTE *)(v174 + 8) = *(_BYTE *)(v175 + 8);
  v176 = a3[105];
  v177 = a1 + v176;
  v178 = (uint64_t)a2 + v176;
  *(_QWORD *)v177 = *(_QWORD *)v178;
  *(_BYTE *)(v177 + 8) = *(_BYTE *)(v178 + 8);
  v179 = a3[106];
  v180 = a1 + v179;
  v181 = (uint64_t)a2 + v179;
  *(_QWORD *)v180 = *(_QWORD *)v181;
  *(_BYTE *)(v180 + 8) = *(_BYTE *)(v181 + 8);
  v182 = a3[107];
  v183 = a1 + v182;
  v184 = (uint64_t)a2 + v182;
  *(_QWORD *)v183 = *(_QWORD *)v184;
  *(_BYTE *)(v183 + 8) = *(_BYTE *)(v184 + 8);
  v185 = a3[108];
  v186 = a1 + v185;
  v187 = (uint64_t)a2 + v185;
  *(_QWORD *)v186 = *(_QWORD *)v187;
  *(_BYTE *)(v186 + 8) = *(_BYTE *)(v187 + 8);
  v188 = a3[109];
  v189 = a1 + v188;
  v190 = (uint64_t)a2 + v188;
  *(_QWORD *)v189 = *(_QWORD *)v190;
  *(_BYTE *)(v189 + 8) = *(_BYTE *)(v190 + 8);
  v191 = a3[110];
  v192 = a1 + v191;
  v193 = (uint64_t)a2 + v191;
  *(_QWORD *)v192 = *(_QWORD *)v193;
  *(_BYTE *)(v192 + 8) = *(_BYTE *)(v193 + 8);
  v194 = a3[111];
  v195 = a1 + v194;
  v196 = (uint64_t)a2 + v194;
  *(_QWORD *)v195 = *(_QWORD *)v196;
  *(_BYTE *)(v195 + 8) = *(_BYTE *)(v196 + 8);
  v197 = a3[112];
  v198 = a1 + v197;
  v199 = (uint64_t)a2 + v197;
  *(_QWORD *)v198 = *(_QWORD *)v199;
  *(_BYTE *)(v198 + 8) = *(_BYTE *)(v199 + 8);
  v200 = a3[113];
  v201 = a1 + v200;
  v202 = (uint64_t)a2 + v200;
  *(_QWORD *)v201 = *(_QWORD *)v202;
  *(_BYTE *)(v201 + 8) = *(_BYTE *)(v202 + 8);
  v203 = a3[114];
  v204 = a1 + v203;
  v205 = (uint64_t)a2 + v203;
  *(_QWORD *)v204 = *(_QWORD *)v205;
  *(_BYTE *)(v204 + 8) = *(_BYTE *)(v205 + 8);
  v206 = a3[115];
  v207 = a1 + v206;
  v208 = (uint64_t)a2 + v206;
  *(_QWORD *)v207 = *(_QWORD *)v208;
  *(_BYTE *)(v207 + 8) = *(_BYTE *)(v208 + 8);
  v209 = a3[116];
  v210 = a1 + v209;
  v211 = (uint64_t)a2 + v209;
  *(_QWORD *)v210 = *(_QWORD *)v211;
  *(_BYTE *)(v210 + 8) = *(_BYTE *)(v211 + 8);
  v212 = a3[117];
  v213 = a1 + v212;
  v214 = (uint64_t)a2 + v212;
  *(_QWORD *)v213 = *(_QWORD *)v214;
  *(_BYTE *)(v213 + 8) = *(_BYTE *)(v214 + 8);
  *(_BYTE *)(a1 + a3[118]) = *((_BYTE *)a2 + a3[118]);
  v215 = a3[119];
  v216 = a1 + v215;
  v217 = (uint64_t)a2 + v215;
  *(_QWORD *)v216 = *(_QWORD *)v217;
  *(_BYTE *)(v216 + 8) = *(_BYTE *)(v217 + 8);
  v218 = a3[120];
  v219 = a1 + v218;
  v220 = (uint64_t)a2 + v218;
  *(_QWORD *)v219 = *(_QWORD *)v220;
  *(_BYTE *)(v219 + 8) = *(_BYTE *)(v220 + 8);
  v221 = a3[121];
  v222 = a1 + v221;
  v223 = (uint64_t)a2 + v221;
  *(_QWORD *)v222 = *(_QWORD *)v223;
  *(_BYTE *)(v222 + 8) = *(_BYTE *)(v223 + 8);
  *(_BYTE *)(a1 + a3[122]) = *((_BYTE *)a2 + a3[122]);
  *(_BYTE *)(a1 + a3[123]) = *((_BYTE *)a2 + a3[123]);
  *(_BYTE *)(a1 + a3[124]) = *((_BYTE *)a2 + a3[124]);
  v224 = a3[125];
  v225 = a1 + v224;
  v226 = (uint64_t)a2 + v224;
  *(_QWORD *)v225 = *(_QWORD *)v226;
  *(_BYTE *)(v225 + 8) = *(_BYTE *)(v226 + 8);
  v227 = a3[126];
  v228 = a1 + v227;
  v229 = (uint64_t)a2 + v227;
  *(_QWORD *)v228 = *(_QWORD *)v229;
  *(_BYTE *)(v228 + 8) = *(_BYTE *)(v229 + 8);
  v230 = a3[127];
  v231 = a1 + v230;
  v232 = (uint64_t)a2 + v230;
  *(_QWORD *)v231 = *(_QWORD *)v232;
  *(_BYTE *)(v231 + 8) = *(_BYTE *)(v232 + 8);
  v233 = a3[128];
  v234 = a1 + v233;
  v235 = (uint64_t)a2 + v233;
  *(_QWORD *)v234 = *(_QWORD *)v235;
  *(_BYTE *)(v234 + 8) = *(_BYTE *)(v235 + 8);
  v236 = a3[129];
  v237 = a1 + v236;
  v238 = (uint64_t *)((char *)a2 + v236);
  v239 = *v238;
  *(_BYTE *)(v237 + 8) = *((_BYTE *)v238 + 8);
  *(_QWORD *)v237 = v239;
  v240 = a3[130];
  v241 = a1 + v240;
  v242 = (uint64_t)a2 + v240;
  *(_QWORD *)v241 = *(_QWORD *)v242;
  *(_BYTE *)(v241 + 8) = *(_BYTE *)(v242 + 8);
  v243 = a3[131];
  v244 = a1 + v243;
  v245 = (uint64_t)a2 + v243;
  *(_QWORD *)v244 = *(_QWORD *)v245;
  *(_BYTE *)(v244 + 8) = *(_BYTE *)(v245 + 8);
  v246 = a3[132];
  v247 = a1 + v246;
  v248 = (uint64_t)a2 + v246;
  *(_QWORD *)v247 = *(_QWORD *)v248;
  *(_BYTE *)(v247 + 8) = *(_BYTE *)(v248 + 8);
  *(_BYTE *)(a1 + a3[133]) = *((_BYTE *)a2 + a3[133]);
  v249 = a3[134];
  v250 = a1 + v249;
  v251 = (uint64_t)a2 + v249;
  *(_QWORD *)v250 = *(_QWORD *)v251;
  *(_BYTE *)(v250 + 8) = *(_BYTE *)(v251 + 8);
  v252 = a3[135];
  v253 = *(uint64_t *)((char *)a2 + v252);
  *(_QWORD *)(a1 + v252) = v253;
  v254 = a3[136];
  v255 = a1 + v254;
  v256 = (uint64_t)a2 + v254;
  *(_QWORD *)v255 = *(_QWORD *)v256;
  *(_BYTE *)(v255 + 8) = *(_BYTE *)(v256 + 8);
  *(_BYTE *)(a1 + a3[137]) = *((_BYTE *)a2 + a3[137]);
  v257 = a3[138];
  v258 = *(uint64_t *)((char *)a2 + v257);
  *(_QWORD *)(a1 + v257) = v258;
  *(_BYTE *)(a1 + a3[139]) = *((_BYTE *)a2 + a3[139]);
  v259 = a3[140];
  v260 = a1 + v259;
  v261 = (uint64_t)a2 + v259;
  *(_QWORD *)v260 = *(_QWORD *)v261;
  *(_BYTE *)(v260 + 8) = *(_BYTE *)(v261 + 8);
  v262 = a3[141];
  v263 = a1 + v262;
  v264 = (uint64_t)a2 + v262;
  *(_QWORD *)v263 = *(_QWORD *)v264;
  *(_BYTE *)(v263 + 8) = *(_BYTE *)(v264 + 8);
  *(_BYTE *)(a1 + a3[142]) = *((_BYTE *)a2 + a3[142]);
  *(_BYTE *)(a1 + a3[143]) = *((_BYTE *)a2 + a3[143]);
  v265 = a3[144];
  v266 = a1 + v265;
  v267 = (uint64_t)a2 + v265;
  *(_QWORD *)v266 = *(_QWORD *)v267;
  *(_BYTE *)(v266 + 8) = *(_BYTE *)(v267 + 8);
  v268 = a3[145];
  v269 = a1 + v268;
  v270 = (uint64_t)a2 + v268;
  *(_QWORD *)v269 = *(_QWORD *)v270;
  *(_BYTE *)(v269 + 8) = *(_BYTE *)(v270 + 8);
  v271 = a3[146];
  v272 = a1 + v271;
  v273 = (uint64_t)a2 + v271;
  *(_QWORD *)v272 = *(_QWORD *)v273;
  *(_BYTE *)(v272 + 8) = *(_BYTE *)(v273 + 8);
  v274 = a3[147];
  v275 = a1 + v274;
  v276 = (uint64_t)a2 + v274;
  *(_QWORD *)v275 = *(_QWORD *)v276;
  *(_BYTE *)(v275 + 8) = *(_BYTE *)(v276 + 8);
  v277 = a3[148];
  v278 = a1 + v277;
  v279 = (uint64_t *)((char *)a2 + v277);
  v280 = *v279;
  *(_BYTE *)(v278 + 8) = *((_BYTE *)v279 + 8);
  *(_QWORD *)v278 = v280;
  v281 = a3[149];
  v282 = a1 + v281;
  v283 = (uint64_t)a2 + v281;
  *(_QWORD *)v282 = *(_QWORD *)v283;
  *(_BYTE *)(v282 + 8) = *(_BYTE *)(v283 + 8);
  v284 = a3[150];
  v285 = a1 + v284;
  v286 = (uint64_t)a2 + v284;
  *(_QWORD *)v285 = *(_QWORD *)v286;
  *(_BYTE *)(v285 + 8) = *(_BYTE *)(v286 + 8);
  v287 = a3[151];
  v288 = a1 + v287;
  v289 = (uint64_t)a2 + v287;
  *(_QWORD *)v288 = *(_QWORD *)v289;
  *(_BYTE *)(v288 + 8) = *(_BYTE *)(v289 + 8);
  v290 = a3[152];
  v291 = a1 + v290;
  v292 = (uint64_t)a2 + v290;
  *(_QWORD *)v291 = *(_QWORD *)v292;
  *(_BYTE *)(v291 + 8) = *(_BYTE *)(v292 + 8);
  v293 = a3[153];
  v294 = a1 + v293;
  v295 = (uint64_t)a2 + v293;
  *(_QWORD *)v294 = *(_QWORD *)v295;
  *(_BYTE *)(v294 + 8) = *(_BYTE *)(v295 + 8);
  v296 = a3[154];
  v297 = a1 + v296;
  v298 = (uint64_t)a2 + v296;
  *(_QWORD *)v297 = *(_QWORD *)v298;
  *(_BYTE *)(v297 + 8) = *(_BYTE *)(v298 + 8);
  v299 = a3[155];
  v300 = a1 + v299;
  v301 = (uint64_t)a2 + v299;
  *(_QWORD *)v300 = *(_QWORD *)v301;
  *(_BYTE *)(v300 + 8) = *(_BYTE *)(v301 + 8);
  v302 = a3[156];
  v303 = a1 + v302;
  v304 = (uint64_t)a2 + v302;
  *(_QWORD *)v303 = *(_QWORD *)v304;
  *(_BYTE *)(v303 + 8) = *(_BYTE *)(v304 + 8);
  v305 = a3[157];
  v306 = a1 + v305;
  v307 = (uint64_t)a2 + v305;
  *(_QWORD *)v306 = *(_QWORD *)v307;
  *(_BYTE *)(v306 + 8) = *(_BYTE *)(v307 + 8);
  v308 = a3[158];
  v309 = a1 + v308;
  v310 = (uint64_t)a2 + v308;
  *(_QWORD *)v309 = *(_QWORD *)v310;
  *(_BYTE *)(v309 + 8) = *(_BYTE *)(v310 + 8);
  v311 = a3[159];
  v312 = a1 + v311;
  v313 = (uint64_t)a2 + v311;
  *(_QWORD *)v312 = *(_QWORD *)v313;
  *(_BYTE *)(v312 + 8) = *(_BYTE *)(v313 + 8);
  v314 = a3[160];
  v315 = a1 + v314;
  v316 = (uint64_t)a2 + v314;
  *(_QWORD *)v315 = *(_QWORD *)v316;
  v317 = a3[161];
  v318 = *((_BYTE *)a2 + v317);
  *(_BYTE *)(v315 + 8) = *(_BYTE *)(v316 + 8);
  *(_BYTE *)(a1 + v317) = v318;
  *(_BYTE *)(a1 + a3[162]) = *((_BYTE *)a2 + a3[162]);
  v319 = a3[163];
  v320 = a1 + v319;
  v321 = (uint64_t)a2 + v319;
  *(_QWORD *)v320 = *(_QWORD *)v321;
  *(_BYTE *)(v320 + 8) = *(_BYTE *)(v321 + 8);
  v322 = a3[164];
  v323 = a1 + v322;
  v324 = (uint64_t)a2 + v322;
  *(_QWORD *)v323 = *(_QWORD *)v324;
  v325 = a3[165];
  v326 = *((_BYTE *)a2 + v325);
  *(_BYTE *)(v323 + 8) = *(_BYTE *)(v324 + 8);
  *(_BYTE *)(a1 + v325) = v326;
  v327 = a3[166];
  v328 = a1 + v327;
  v329 = (uint64_t)a2 + v327;
  *(_DWORD *)v328 = *(_DWORD *)v329;
  *(_BYTE *)(v328 + 4) = *(_BYTE *)(v329 + 4);
  v330 = a3[167];
  v331 = a1 + v330;
  v332 = (uint64_t)a2 + v330;
  *(_QWORD *)v331 = *(_QWORD *)v332;
  *(_BYTE *)(v331 + 8) = *(_BYTE *)(v332 + 8);
  v333 = a3[168];
  v334 = a1 + v333;
  v335 = (uint64_t)a2 + v333;
  *(_QWORD *)v334 = *(_QWORD *)v335;
  *(_BYTE *)(v334 + 8) = *(_BYTE *)(v335 + 8);
  v336 = a3[169];
  v337 = a1 + v336;
  v338 = (uint64_t)a2 + v336;
  *(_QWORD *)v337 = *(_QWORD *)v338;
  *(_BYTE *)(v337 + 8) = *(_BYTE *)(v338 + 8);
  v339 = a3[170];
  v340 = a1 + v339;
  v341 = (uint64_t *)((char *)a2 + v339);
  v342 = *v341;
  *(_BYTE *)(v340 + 8) = *((_BYTE *)v341 + 8);
  *(_QWORD *)v340 = v342;
  v343 = a3[171];
  v344 = a1 + v343;
  v345 = (uint64_t)a2 + v343;
  *(_QWORD *)v344 = *(_QWORD *)v345;
  *(_BYTE *)(v344 + 8) = *(_BYTE *)(v345 + 8);
  v346 = a3[172];
  v347 = a1 + v346;
  v348 = (uint64_t)a2 + v346;
  *(_QWORD *)v347 = *(_QWORD *)v348;
  *(_BYTE *)(v347 + 8) = *(_BYTE *)(v348 + 8);
  v349 = a3[173];
  v350 = a1 + v349;
  v351 = (uint64_t)a2 + v349;
  *(_QWORD *)v350 = *(_QWORD *)v351;
  *(_BYTE *)(v350 + 8) = *(_BYTE *)(v351 + 8);
  *(_BYTE *)(a1 + a3[174]) = *((_BYTE *)a2 + a3[174]);
  v352 = a3[175];
  v353 = a1 + v352;
  v354 = (uint64_t)a2 + v352;
  *(_QWORD *)v353 = *(_QWORD *)v354;
  *(_BYTE *)(v353 + 8) = *(_BYTE *)(v354 + 8);
  v355 = a3[176];
  v356 = a1 + v355;
  v357 = (uint64_t)a2 + v355;
  *(_QWORD *)v356 = *(_QWORD *)v357;
  *(_BYTE *)(v356 + 8) = *(_BYTE *)(v357 + 8);
  swift_bridgeObjectRetain(v117);
  swift_bridgeObjectRetain(v130);
  swift_bridgeObjectRetain(v137);
  swift_bridgeObjectRetain(v144);
  swift_bridgeObjectRetain(v253);
  swift_bridgeObjectRetain(v258);
  return a1;
}

uint64_t sub_10001A9A8(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = swift_getTypeByMangledNameInContext2((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t sub_10001A9E8(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 - 8) + 82) & 2) != 0)
    return *(_QWORD *)a2;
  return a2;
}

unint64_t sub_10001AA00()
{
  unint64_t result;

  result = qword_1010F0DD0;
  if (!qword_1010F0DD0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_1010F0DD0);
  }
  return result;
}

_QWORD *sub_10001AA44(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

uint64_t sub_10001AA68(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for UUID(255);
    result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10001AAA8(uint64_t result, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v8;
  uint64_t v9;
  char v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[3];
  uint64_t v25;
  uint64_t v26;
  __int128 v27[2];
  _QWORD *v28;

  v4 = result;
  v5 = _swiftEmptyArrayStorage;
  v28 = _swiftEmptyArrayStorage;
  v6 = *(_QWORD *)(result + 16);
  if (v6)
  {
    v8 = 0;
    v9 = result + 32;
    v5 = (_QWORD *)(a3 & 1);
    v22 = *(_QWORD *)(result + 16);
    v23 = result;
    v21 = a3 & 1;
    while (v8 < *(_QWORD *)(v4 + 16))
    {
      sub_100030784(v9, (uint64_t)v27);
      v10 = sub_100480DB8((uint64_t)v27, a2, (int)v5);
      if (v3)
      {
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v27);
        swift_bridgeObjectRelease();
        swift_release(v28);
        return (uint64_t)v5;
      }
      if ((v10 & 1) != 0)
      {
        sub_10000F9FC(v27, (uint64_t)v24);
        v11 = v28;
        if ((swift_isUniquelyReferenced_nonNull_native(v28) & 1) == 0)
        {
          sub_10009ADD8(0, v11[2] + 1, 1);
          v11 = v28;
        }
        v13 = v11[2];
        v12 = v11[3];
        if (v13 >= v12 >> 1)
          sub_10009ADD8(v12 > 1, v13 + 1, 1);
        v14 = v25;
        v15 = v26;
        v16 = sub_10009F5D0((uint64_t)v24, v25);
        __chkstk_darwin(v16);
        v18 = (char *)&v20 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
        (*(void (**)(char *))(v19 + 16))(v18);
        sub_1004AA86C(v13, (uint64_t)v18, (uint64_t *)&v28, v14, v15);
        result = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v24);
        v6 = v22;
        v4 = v23;
        v5 = (_QWORD *)v21;
      }
      else
      {
        result = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v27);
      }
      ++v8;
      v9 += 40;
      if (v6 == v8)
      {
        v5 = v28;
        goto LABEL_15;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_15:
    swift_bridgeObjectRelease();
    return (uint64_t)v5;
  }
  return result;
}

uint64_t sub_10001AC90(unint64_t *a1, unint64_t *a2, _QWORD *a3, const char *a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    v7 = sub_10000F4A0(255, a2, a3);
    result = swift_getWitnessTable(a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10001ACD0(uint64_t a1)
{
  return sub_100CA9354(a1, &qword_1010FF808, SPBeaconGroup_ptr, (unint64_t *)&unk_1010FF810, (void (*)(id *, uint64_t))sub_100A112B4);
}

uint64_t sub_10001ADAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v21[2];
  uint64_t v22;
  _QWORD *v23;
  _QWORD aBlock[5];
  _QWORD *v25;

  v7 = type metadata accessor for DispatchWorkItemFlags(0);
  v22 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v9 = (char *)v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21[1] = *(_QWORD *)(v3 + 112);
  v14 = (_QWORD *)swift_allocObject(&unk_101079BE0, 48, 7);
  v14[2] = a1;
  v14[3] = v3;
  v14[4] = a2;
  v14[5] = a3;
  aBlock[4] = sub_1000170F0;
  v25 = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_101079BF8;
  v15 = _Block_copy(aBlock);
  swift_bridgeObjectRetain(a1);
  swift_retain();
  v16 = swift_retain();
  static DispatchQoS.unspecified.getter(v16);
  v23 = _swiftEmptyArrayStorage;
  v17 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v18 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v19 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v23, v18, v19, v7, v17);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v13, v9, v15);
  _Block_release(v15);
  (*(void (**)(char *, uint64_t))(v22 + 8))(v9, v7);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  return swift_release(v25);
}

_QWORD *sub_10001AFC0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  void (*v28)(char *, uint64_t);
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  unint64_t v34;
  uint64_t (*v35)(uint64_t);
  uint64_t *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t (*v41)(uint64_t);
  uint64_t *v42;
  uint64_t (*v43)(uint64_t);
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(char *, uint64_t, uint64_t);
  char *v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  _QWORD *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  _QWORD *v76;

  v1 = v0;
  v2 = type metadata accessor for UUID(0);
  v72 = *(_QWORD *)(v2 - 8);
  v73 = v2;
  v3 = __chkstk_darwin(v2);
  v69 = (char *)&v62 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v65 = (char *)&v62 - v5;
  v6 = sub_10001A9A8(&qword_1010ED860);
  v7 = __chkstk_darwin(v6);
  v71 = (char *)&v62 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v10 = (char *)&v62 - v9;
  v74 = type metadata accessor for SharedBeaconRecord(0);
  v70 = *(_QWORD **)(v74 - 8);
  v11 = __chkstk_darwin(v74);
  v68 = (char *)&v62 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v11);
  v67 = (uint64_t)&v62 - v14;
  __chkstk_darwin(v13);
  v16 = (char *)&v62 - v15;
  v17 = type metadata accessor for SystemInfo.DeviceLockState(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = __chkstk_darwin(v17);
  v21 = (char *)&v62 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __chkstk_darwin(v19);
  v24 = (char *)&v62 - v23;
  static SystemInfo.lockState.getter(v22);
  (*(void (**)(char *, _QWORD, uint64_t))(v18 + 104))(v21, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v17);
  v25 = sub_100006204((unint64_t *)&unk_1010F4700, (uint64_t (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState, (uint64_t)&protocol conformance descriptor for SystemInfo.DeviceLockState);
  dispatch thunk of RawRepresentable.rawValue.getter(&v76, v17, v25);
  dispatch thunk of RawRepresentable.rawValue.getter(&v75, v17, v25);
  v27 = v75;
  v26 = v76;
  v28 = *(void (**)(char *, uint64_t))(v18 + 8);
  v28(v21, v17);
  v29 = ((uint64_t (*)(char *, uint64_t))v28)(v24, v17);
  if (v26 == v27)
  {
    v30 = (_QWORD *)static os_log_type_t.default.getter(v29);
    if (qword_1010EA258 == -1)
    {
LABEL_3:
      v31 = _swiftEmptyArrayStorage;
      os_log(_:dso:log:_:_:)(v30, &_mh_execute_header, qword_1011B7D38, "ownedBeaconGroups call failed because in device is in beforeFirstUnlock state", 77, 2, _swiftEmptyArrayStorage);
      return v31;
    }
LABEL_32:
    swift_once(&qword_1010EA258, sub_100B5D9CC);
    goto LABEL_3;
  }
  v32 = sub_10001B834();
  v33 = _swiftEmptyArrayStorage;
  v76 = _swiftEmptyArrayStorage;
  v66 = v32[2];
  v63 = v1;
  if (v66)
  {
    v34 = 0;
    v30 = _swiftEmptyArrayStorage;
    v35 = type metadata accessor for SharedBeaconRecord;
    v36 = &qword_1010ED860;
    v64 = v10;
    while (v34 < v32[2])
    {
      v38 = (*((unsigned __int8 *)v70 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v70 + 80);
      v39 = v70[9];
      sub_10005972C((uint64_t)v32 + v38 + v39 * v34, (uint64_t)v16, v35);
      sub_10000F9B8((uint64_t)&v16[*(int *)(v74 + 76)], (uint64_t)v10, v36);
      v40 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v72 + 48))(v10, 1, v73);
      sub_100004048((uint64_t)v10, v36);
      if (v40 == 1)
      {
        sub_1000126B0((uint64_t)v16, v35);
      }
      else
      {
        v41 = v35;
        v42 = v36;
        v43 = v41;
        sub_1000126EC((uint64_t)v16, v67, v41);
        if ((swift_isUniquelyReferenced_nonNull_native(v30) & 1) == 0)
          sub_10009A654(0, v30[2] + 1, 1);
        v30 = v76;
        v45 = v76[2];
        v44 = v76[3];
        if (v45 >= v44 >> 1)
        {
          sub_10009A654(v44 > 1, v45 + 1, 1);
          v30 = v76;
        }
        v30[2] = v45 + 1;
        sub_1000126EC(v67, (uint64_t)v30 + v38 + v45 * v39, v43);
        v36 = v42;
        v35 = v43;
        v10 = v64;
      }
      ++v34;
      v37 = (uint64_t)v71;
      if (v66 == v34)
      {
        v33 = v76;
        v1 = v63;
        goto LABEL_17;
      }
    }
    __break(1u);
    goto LABEL_32;
  }
  v37 = (uint64_t)v71;
LABEL_17:
  swift_bridgeObjectRelease();
  v46 = v33[2];
  v48 = v72;
  v47 = v73;
  if (v46)
  {
    v49 = (uint64_t)v33 + ((*((unsigned __int8 *)v70 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v70 + 80));
    v50 = v70[9];
    v70 = v33;
    swift_retain();
    v51 = _swiftEmptyArrayStorage;
    v52 = (uint64_t)v68;
    do
    {
      sub_10005972C(v49, v52, type metadata accessor for SharedBeaconRecord);
      sub_10000F9B8(v52 + *(int *)(v74 + 76), v37, &qword_1010ED860);
      sub_1000126B0(v52, type metadata accessor for SharedBeaconRecord);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v48 + 48))(v37, 1, v47) == 1)
      {
        sub_100004048(v37, &qword_1010ED860);
      }
      else
      {
        v53 = v37;
        v54 = *(void (**)(char *, uint64_t, uint64_t))(v48 + 32);
        v55 = v65;
        v54(v65, v53, v47);
        v54(v69, (uint64_t)v55, v47);
        if ((swift_isUniquelyReferenced_nonNull_native(v51) & 1) == 0)
          v51 = (_QWORD *)sub_1007C84F8(0, v51[2] + 1, 1, (unint64_t)v51);
        v57 = v51[2];
        v56 = v51[3];
        if (v57 >= v56 >> 1)
          v51 = (_QWORD *)sub_1007C84F8(v56 > 1, v57 + 1, 1, (unint64_t)v51);
        v51[2] = v57 + 1;
        v48 = v72;
        v58 = (unint64_t)v51
            + ((*(unsigned __int8 *)(v48 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v48 + 80))
            + *(_QWORD *)(v72 + 72) * v57;
        v47 = v73;
        v54((char *)v58, (uint64_t)v69, v73);
        v37 = (uint64_t)v71;
      }
      v49 += v50;
      --v46;
    }
    while (v46);
    swift_release_n(v70, 2);
    v1 = v63;
  }
  else
  {
    swift_release(v33);
    v51 = _swiftEmptyArrayStorage;
  }
  v59 = sub_10001B664((uint64_t)v51);
  swift_bridgeObjectRelease();
  swift_retain();
  sub_10085D4FC(v59, v1, &qword_1010FD208, type metadata accessor for SharedBeaconGroup, (void (*)(char *))sub_10081FB3C, (uint64_t (*)(_QWORD, uint64_t, uint64_t))sub_1007C95A4);
  v31 = v60;
  swift_bridgeObjectRelease();
  swift_release(v1);
  return v31;
}

uint64_t type metadata accessor for SharedBeaconRecord(uint64_t a1)
{
  return sub_10001B630(a1, qword_10111E748, (uint64_t)&nominal type descriptor for SharedBeaconRecord);
}

uint64_t sub_10001B630(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
    return swift_getSingletonMetadata(a1, a3);
  return result;
}

uint64_t sub_10001B664(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, uint64_t, uint64_t);
  void (*v15)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;

  v2 = type metadata accessor for UUID(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v17 - v7;
  v9 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v9);
  v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(a1 + 16);
  sub_100006204(&qword_1010F98B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v18 = Set.init(minimumCapacity:)(v12);
  if (v12)
  {
    v13 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v17 = *(_QWORD *)(v3 + 72);
    v14 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    while (1)
    {
      v14(v11, v13, v2);
      v15 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56);
      v15(v11, 0, 1, v2);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v11, 1, v2) == 1)
        break;
      (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v6, v11, v2);
      sub_100A09F38((uint64_t)v8, v6);
      (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
      v13 += v17;
      if (!--v12)
        goto LABEL_7;
    }
  }
  else
  {
    v15 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56);
LABEL_7:
    v15(v11, 1, 1, v2);
  }
  return v18;
}

_QWORD *sub_10001B834()
{
  return sub_100019424(&qword_1010EA5B8, (uint64_t)qword_1011B8448, (void (*)(char *, uint64_t, _QWORD **, _QWORD **))sub_10084C2A0, (uint64_t)sub_100D3AD18);
}

uint64_t sub_10001B858(uint64_t a1, uint64_t (*a2)(void), uint64_t *a3)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t result;
  char v18;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *v3;
  v6 = *(_QWORD *)(*v3 + 16);
  if (__OFADD__(v6, v4))
  {
    __break(1u);
    goto LABEL_18;
  }
  if (swift_isUniquelyReferenced_nonNull_native(*v3)
    && (int64_t)(v6 + v4) <= *(_QWORD *)(v5 + 24) >> 1)
  {
    v10 = *(_QWORD *)(a1 + 16);
    if (v10)
      goto LABEL_5;
LABEL_15:
    if (!v4)
      goto LABEL_16;
    goto LABEL_18;
  }
  v5 = a2();
  v10 = *(_QWORD *)(a1 + 16);
  if (!v10)
    goto LABEL_15;
LABEL_5:
  v11 = *(_QWORD *)(v5 + 16);
  if ((*(_QWORD *)(v5 + 24) >> 1) - v11 < (uint64_t)v10)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v12 = v5 + 40 * v11 + 32;
  if (a1 + 32 < v12 + 40 * v10 && v12 < a1 + 32 + 40 * v10)
    goto LABEL_21;
  sub_10001A9A8(a3);
  swift_arrayInitWithCopy(v12);
  if (v10 < v4)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  v14 = *(_QWORD *)(v5 + 16);
  v15 = __OFADD__(v14, v10);
  v16 = v14 + v10;
  if (!v15)
  {
    *(_QWORD *)(v5 + 16) = v16;
LABEL_16:
    result = swift_bridgeObjectRelease(a1);
    *v3 = v5;
    return result;
  }
LABEL_20:
  __break(1u);
LABEL_21:
  v18 = 2;
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, v18, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10001B9D0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;
  unint64_t v7;
  unint64_t v8;
  uint64_t result;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v5 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v7 = a4 + 40 * a1 + 32;
  v8 = a3 + 40 * v5;
  if (v7 >= v8 || v7 + 40 * v5 <= a3)
  {
    sub_10001A9A8(a5);
    swift_arrayInitWithCopy(a3);
    return v8;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

_QWORD *sub_10001BAD8(uint64_t a1)
{
  return sub_1007EE524(a1, type metadata accessor for SharedBeaconGroup, (void (*)(BOOL, unint64_t, uint64_t))sub_10009ADD8, (uint64_t)&off_101066440, (void (*)(_QWORD *, _QWORD *))sub_10000F9FC);
}

_QWORD *sub_10001BAFC(uint64_t a1)
{
  return sub_1007EE524(a1, type metadata accessor for OwnedBeaconGroup, (void (*)(BOOL, unint64_t, uint64_t))sub_10009ADD8, (uint64_t)&off_101070860, (void (*)(_QWORD *, _QWORD *))sub_10000F9FC);
}

_QWORD *sub_10001BB20(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1007C825C(a1, a2, a3, a4, &qword_1010ED288, &qword_101108FB0);
}

uint64_t type metadata accessor for SharedBeaconGroup(uint64_t a1)
{
  uint64_t result;

  result = qword_1010F54E0;
  if (!qword_1010F54E0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SharedBeaconGroup);
  return result;
}

uint64_t type metadata accessor for OwnedBeaconGroup(uint64_t a1)
{
  return sub_10001B630(a1, qword_1010F9768, (uint64_t)&nominal type descriptor for OwnedBeaconGroup);
}

uint64_t sub_10001BB84(uint64_t a1)
{
  return sub_10001B858(a1, (uint64_t (*)(void))sub_10001BB20, &qword_101108FB0);
}

_QWORD *sub_10001BB98()
{
  return sub_100019424(&qword_1010E9B90, (uint64_t)qword_1011B6DE0, (void (*)(char *, uint64_t, _QWORD **, _QWORD **))sub_10084C2E8, (uint64_t)sub_10036E07C);
}

uint64_t sub_10001BBBC(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_retain(result);
  }
  return swift_retain(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

_QWORD *sub_10001BC00(_QWORD *a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_1007C825C(a1, a2, a3, a4, &qword_1010F7A80, (uint64_t *)&unk_1010F7720);
}

uint64_t sub_10001BC14(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_release(result);
  }
  return swift_release(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

uint64_t sub_10001BC58(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for DefaultConfigurationLayer(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10001BC9C(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 312));
}

uint64_t sub_10001BCB0(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 560));
}

uint64_t sub_10001BCC4(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 576));
}

uint64_t sub_10001BCD8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)v0;
  sub_10001BD08(*(_QWORD *)v0, *(_QWORD *)(v0 + 8));
  return v1;
}

uint64_t sub_10001BD08(uint64_t result, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return sub_10001BBBC(result, a2);
  return result;
}

uint64_t sub_10001BD1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1006CDDE0);
}

uint64_t sub_10001BD28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1006CDD2C);
}

uint64_t type metadata accessor for CloudStorageService()
{
  return objc_opt_self(_TtC12searchpartyd19CloudStorageService);
}

uint64_t sub_10001BD54(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001BD5C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001BD64(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001BD6C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001BD74(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001BD7C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001BD84(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001BD8C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001BD94(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001BD9C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001BDA4(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001BDAC(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001BDB4(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001BDBC(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001BDC4(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001BDCC(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001BDD4(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001BDDC(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001BDE4(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001BDEC(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001BDF4(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001BDFC(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001BE04(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001BE0C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001BE14(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001BE1C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001BE24(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001BE2C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001BE34(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001BE3C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001BE44(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001BE4C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001BE54(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001BE5C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001BE64(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001BE6C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001BE74(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001BE7C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001BE84(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001BE8C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001BE94(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001BE9C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001BEA4(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001BEAC(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001BEB4(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001BEBC(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001BEC4(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001BECC(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001BED4(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001BEDC(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001BEE4(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001BEEC(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001BEF4(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001BEFC(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001BF04(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001BF0C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001BF14(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001BF1C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001BF24(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001BF2C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001BF34(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001BF3C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001BF44(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001BF4C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001BF54(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001BF5C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001BF64(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001BF6C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001BF74(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001BF7C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001BF84(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001BF8C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001BF94(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001BF9C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001BFA4(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001BFAC(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001BFB4(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001BFBC(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001BFC4(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001BFCC(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001BFD4(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001BFDC(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001BFE4(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001BFEC(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001BFF4(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001BFFC(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001C004(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001C00C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001C014(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001C01C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001C024(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001C02C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001C034(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001C03C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001C044(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001C04C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001C054(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001C05C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001C064(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001C06C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001C074(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001C07C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001C084(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001C08C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001C094(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001C09C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001C0A4(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001C0AC(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001C0B4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001C0C4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001C0D4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001C0E4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001C0F4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001C104(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001C114(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001C124(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001C134(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001C144(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001C154(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001C164(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001C174(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001C184(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001C194(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001C1A4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001C1B4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001C1C4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001C1D4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001C1E4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001C1F4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001C204(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001C214(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001C224(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001C234(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001C244(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001C254(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001C264(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001C274(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001C284(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001C294(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001C2A4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001C2B4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001C2C4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001C2D4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001C2E4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001C2F4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001C304(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001C314(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001C324(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001C334(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001C344(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001C354(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001C364(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001C374(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001C384(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001C394(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001C3A4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001C3B4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001C3C4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001C3D4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001C3E4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001C3F4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001C404(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001C414(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001C424(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001C434(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001C444(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001C454(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001C464(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001C474(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001C484(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001C494(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001C4A4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001C4B4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001C4C4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001C4D4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001C4E4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001C4F4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001C504(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001C514(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001C524(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001C534(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001C544(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001C554(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001C564(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001C574(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001C584(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001C594(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001C5A4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001C5B4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001C5C4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001C5D4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001C5E4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001C5F4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001C604(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001C614(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001C624(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001C634(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001C644(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001C654(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001C664(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001C674(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001C684(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001C694(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001C6A4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001C6B4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001C6C4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001C6D4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001C6E4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001C6F4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001C704(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001C714(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001C724(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001C734(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001C744(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001C754(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001C764(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001C7A4@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_10001C7CC(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_10001C7CC(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_10001C808 + 4 * byte_100E4F870[a1]))(0xD00000000000002BLL, 0x8000000100EC5140);
}

unint64_t sub_10001C808()
{
  return 0xD00000000000002CLL;
}

uint64_t sub_10001C850()
{
  uint64_t v0;

  return v0 + 12;
}

void sub_10001C860()
{
  JUMPOUT(0x10001C86CLL);
}

uint64_t sub_10001C87C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 40);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 48));
  swift_task_dealloc(v1);
  return swift_task_switch(sub_100013688, 0, 0);
}

uint64_t sub_10001C8D8()
{
  _QWORD *v0;

  v0[12] = Database.readConnection.getter(v0[9], v0[10]);
  return swift_task_switch(sub_100007F00, 0, 0);
}

uint64_t sub_10001C91C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 56) + 112);
  *(_QWORD *)(v0 + 64) = v1;
  return swift_task_switch(sub_100006124, v1, 0);
}

uint64_t sub_10001C938()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 56) = v0;
  return swift_task_switch(sub_10001C91C, v0, 0);
}

_BYTE *initializeBufferWithCopyOfBuffer for PublishingPolicy(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t sub_10001C95C()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[19];
  v0[25] = v0[15];
  return swift_task_switch(sub_100008A6C, v1, 0);
}

uint64_t storeEnumTagSinglePayload for SecureLocationsConfig(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 200) = 0;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 208) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 64) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 208) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for SecureLocationsConfig(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 208))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 64);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t sub_10001CA34()
{
  unint64_t v0;
  char v1;
  char v3;
  char v4;
  char v5;

  v5 = 0;
  v0 = sub_10001CAC4();
  if ((NSXPCConnection.hasEntitlement<A>(_:)(&v5, &type metadata for BeaconManagerEntitlement, v0) & 1) != 0
    || (v4 = 3, (NSXPCConnection.hasEntitlement<A>(_:)(&v4, &type metadata for BeaconManagerEntitlement, v0) & 1) != 0))
  {
    v1 = 1;
  }
  else
  {
    v3 = 4;
    v1 = NSXPCConnection.hasEntitlement<A>(_:)(&v3, &type metadata for BeaconManagerEntitlement, v0);
  }
  return v1 & 1;
}

unint64_t sub_10001CAC4()
{
  unint64_t result;

  result = qword_101108190;
  if (!qword_101108190)
  {
    result = swift_getWitnessTable(&unk_100E4FE94, &type metadata for BeaconManagerEntitlement);
    atomic_store(result, (unint64_t *)&qword_101108190);
  }
  return result;
}

uint64_t sub_10001CB08(uint64_t a1)
{
  uint64_t v1;

  return sub_100BC0028(a1, v1);
}

uint64_t sub_10001CB10@<X0>(uint64_t *a1@<X8>)
{
  return sub_100005CC8(a1);
}

uint64_t sub_10001CB18@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  return sub_10000BC58(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

__n128 initializeWithTake for LocationFetchContext(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 73) = *(_OWORD *)(a2 + 73);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

__n128 initializeWithTake for SecureLocationsConfig(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __n128 result;
  __int128 v9;
  __int128 v10;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v2 = *(_OWORD *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  v5 = *(_OWORD *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v7;
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 96) = v6;
  result = *(__n128 *)(a2 + 144);
  v9 = *(_OWORD *)(a2 + 160);
  v10 = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 192) = v10;
  *(__n128 *)(a1 + 144) = result;
  *(_OWORD *)(a1 + 160) = v9;
  return result;
}

unint64_t sub_10001CCA0(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t), unint64_t *a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(char *, unint64_t, uint64_t);
  uint64_t v17;
  char v18;
  uint64_t v20;
  uint64_t (*v21)(uint64_t);
  unint64_t *v22;
  uint64_t v23;

  v22 = a4;
  v23 = a5;
  v6 = v5;
  v20 = a1;
  v21 = a3;
  v8 = a3(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v20 - v10;
  v12 = -1 << *(_BYTE *)(v6 + 32);
  v13 = a2 & ~v12;
  if (((*(_QWORD *)(v6 + 64 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) != 0)
  {
    v14 = ~v12;
    v15 = *(_QWORD *)(v9 + 72);
    v16 = *(void (**)(char *, unint64_t, uint64_t))(v9 + 16);
    do
    {
      v16(v11, *(_QWORD *)(v6 + 48) + v15 * v13, v8);
      v17 = sub_100006204(v22, v21, v23);
      v18 = dispatch thunk of static Equatable.== infix(_:_:)(v11, v20, v8, v17);
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
      if ((v18 & 1) != 0)
        break;
      v13 = (v13 + 1) & v14;
    }
    while (((*(_QWORD *)(v6 + 64 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) != 0);
  }
  return v13;
}

uint64_t sub_10001CDD0(unint64_t a1, uint64_t a2, __int128 *a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  __int128 v18;

  v18 = *a3;
  v7 = *((_QWORD *)a3 + 2);
  v8 = *((_QWORD *)a3 + 3);
  v9 = *((_BYTE *)a3 + 32);
  v10 = *((_QWORD *)a3 + 5);
  a4[(a1 >> 6) + 8] |= 1 << a1;
  v11 = a4[6];
  v12 = type metadata accessor for UUID(0);
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 32))(v11 + *(_QWORD *)(*(_QWORD *)(v12 - 8) + 72) * a1, a2, v12);
  v14 = a4[7] + 48 * a1;
  *(_OWORD *)v14 = v18;
  *(_QWORD *)(v14 + 16) = v7;
  *(_QWORD *)(v14 + 24) = v8;
  *(_BYTE *)(v14 + 32) = v9;
  *(_QWORD *)(v14 + 40) = v10;
  v15 = a4[2];
  v16 = __OFADD__(v15, 1);
  v17 = v15 + 1;
  if (v16)
    __break(1u);
  else
    a4[2] = v17;
  return result;
}

uint64_t sub_10001CEA0(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_100006F30(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_10001CEBC(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1000080BC(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_10001CED8(uint64_t (*a1)(char *), unint64_t *a2, uint64_t a3)
{
  return sub_100004CEC(a1, a2, a3, type metadata accessor for WildModeAssociationRecord, (void (*)(BOOL, unint64_t, uint64_t))sub_10009AEA4);
}

uint64_t sub_10001CEFC(uint64_t (*a1)(char *), unint64_t *a2, uint64_t a3)
{
  return sub_100004CEC(a1, a2, a3, type metadata accessor for SafeLocation, (void (*)(BOOL, unint64_t, uint64_t))sub_10009AC18);
}

uint64_t sub_10001CF20(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v6 = a4 + 48 * a1 + 32;
  v7 = a3 + 48 * v4;
  if (v6 >= v7 || v6 + 48 * v4 <= a3)
  {
    sub_10001A9A8((uint64_t *)&unk_101105830);
    swift_arrayInitWithCopy(a3);
    return v7;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_10001D02C(uint64_t result, unint64_t a2, char a3, uint64_t *a4, uint64_t *a5, unint64_t *a6, unint64_t *a7)
{
  uint64_t *v7;
  uint64_t v8;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v13 = result;
  v28 = result;
  v14 = *(_QWORD *)(*v7 + 16);
  v15 = *(_QWORD *)(*v7 + 24);
  if (v15 > v14 && (a3 & 1) != 0)
    goto LABEL_12;
  v16 = v14 + 1;
  if ((a3 & 1) != 0)
  {
    sub_100A1852C(v16, a4, a5, a6);
  }
  else
  {
    if (v15 > v14)
    {
      result = (uint64_t)sub_100A262FC(a4);
      goto LABEL_12;
    }
    sub_100A2A258(v16, a4, a5, a6);
  }
  v17 = *v7;
  v18 = *(_QWORD *)(*v7 + 40);
  v8 = sub_10001A9A8(a5);
  v19 = sub_1000193A4(a6, a5, (const char *)&protocol conformance descriptor for XPCSession<A>);
  result = dispatch thunk of Hashable._rawHashValue(seed:)(v18, v8, v19);
  v20 = -1 << *(_BYTE *)(v17 + 32);
  a2 = result & ~v20;
  if (((*(_QWORD *)(v17 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v21 = ~v20;
    v22 = sub_1000193A4(a7, a5, (const char *)&protocol conformance descriptor for XPCSession<A>);
    do
    {
      v27 = *(_QWORD *)(*(_QWORD *)(v17 + 48) + 8 * a2);
      result = dispatch thunk of static Equatable.== infix(_:_:)(&v27, &v28, v8, v22);
      if ((result & 1) != 0)
        goto LABEL_15;
      a2 = (a2 + 1) & v21;
    }
    while (((*(_QWORD *)(v17 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  v23 = *v7;
  *(_QWORD *)(*v7 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v23 + 48) + 8 * a2) = v13;
  v24 = *(_QWORD *)(v23 + 16);
  v25 = __OFADD__(v24, 1);
  v26 = v24 + 1;
  if (!v25)
  {
    *(_QWORD *)(v23 + 16) = v26;
    return result;
  }
  __break(1u);
LABEL_15:
  result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v8);
  __break(1u);
  return result;
}

void sub_10001D1F0(uint64_t a1)
{
  uint64_t v1;

  sub_10001D1F8(a1, *(_QWORD *)(v1 + 16));
}

void sub_10001D1F8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  id v4;

  if (a1)
    v3 = _convertErrorToNSError(_:)();
  else
    v3 = 0;
  v4 = (id)v3;
  (*(void (**)(uint64_t))(a2 + 16))(a2);

}

void sub_10001D244(uint64_t a1, uint64_t a2, unint64_t *a3, _QWORD *a4)
{
  Class isa;

  sub_10000F4A0(0, a3, a4);
  isa = Array._bridgeToObjectiveC()().super.isa;
  (*(void (**)(uint64_t, Class))(a2 + 16))(a2, isa);

}

void sub_10001D2A0(uint64_t a1)
{
  uint64_t v1;

  sub_10001D244(a1, *(_QWORD *)(v1 + 16), (unint64_t *)&unk_1010FF7E0, SPUnknownBeacon_ptr);
}

void sub_10001D2C8(uint64_t a1)
{
  uint64_t v1;

  sub_10001D2D0(a1, *(_QWORD *)(v1 + 16));
}

void sub_10001D2D0(uint64_t a1, uint64_t a2)
{
  Class isa;

  sub_10000F4A0(0, (unint64_t *)&unk_1010F4800, SPBeaconShare_ptr);
  sub_1000170AC((unint64_t *)&unk_1010EE150, (unint64_t *)&unk_1010F4800, SPBeaconShare_ptr);
  isa = Set._bridgeToObjectiveC()().super.isa;
  (*(void (**)(uint64_t, Class))(a2 + 16))(a2, isa);

}

id sub_10001D36C()
{
  void *v0;

  return objc_msgSend(v0, "scanForNearbyOwner");
}

void type metadata accessor for SPSimpleBeaconProperty(uint64_t a1)
{
  sub_10001D3B4(a1, &qword_1010EAF60, (uint64_t)&unk_10104EE98);
}

uint64_t sub_10001D390()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 16) + 16))();
}

void type metadata accessor for CLAuthorizationStatus(uint64_t a1)
{
  sub_10001D3B4(a1, &qword_1010EAC20, (uint64_t)&unk_10104E6F0);
}

void sub_10001D3B4(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  unint64_t ForeignTypeMetadata;
  uint64_t v5;

  if (!*a2)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata(0, a3);
    if (!v5)
      atomic_store(ForeignTypeMetadata, a2);
  }
}

void sub_10001D3F8(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
}

uint64_t sub_10001D404(uint64_t a1)
{
  return sub_100CA9354(a1, &qword_1011058A0, SPSafeLocation_ptr, (unint64_t *)&qword_101107020, (void (*)(id *, uint64_t))sub_100A0CDD4);
}

void sub_10001D428(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;

  if (!*(_QWORD *)(*(_QWORD *)v1 + 16))
    return;
  v3 = a1 + 56;
  v4 = 1 << *(_BYTE *)(a1 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(a1 + 56);
  v7 = (unint64_t)(v4 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  v8 = 0;
  while (1)
  {
    if (v6)
    {
      v9 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v10 = v9 | (v8 << 6);
      goto LABEL_6;
    }
    v15 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v15 >= v7)
      goto LABEL_24;
    v16 = *(_QWORD *)(v3 + 8 * v15);
    ++v8;
    if (!v16)
    {
      v8 = v15 + 1;
      if (v15 + 1 >= v7)
        goto LABEL_24;
      v16 = *(_QWORD *)(v3 + 8 * v8);
      if (!v16)
      {
        v8 = v15 + 2;
        if (v15 + 2 >= v7)
          goto LABEL_24;
        v16 = *(_QWORD *)(v3 + 8 * v8);
        if (!v16)
        {
          v8 = v15 + 3;
          if (v15 + 3 >= v7)
            goto LABEL_24;
          v16 = *(_QWORD *)(v3 + 8 * v8);
          if (!v16)
            break;
        }
      }
    }
LABEL_23:
    v6 = (v16 - 1) & v16;
    v10 = __clz(__rbit64(v16)) + (v8 << 6);
LABEL_6:
    v11 = *(_QWORD *)(a1 + 48) + 24 * v10;
    v12 = *(_QWORD *)v11;
    v13 = *(_QWORD *)(v11 + 8);
    v14 = *(_BYTE *)(v11 + 16);
    swift_bridgeObjectRetain(v13);
    sub_100C80EE8(v12, v13, v14);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v17 = v15 + 4;
  if (v17 >= v7)
  {
LABEL_24:
    swift_release();
    return;
  }
  v16 = *(_QWORD *)(v3 + 8 * v17);
  if (v16)
  {
    v8 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    v8 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v8 >= v7)
      goto LABEL_24;
    v16 = *(_QWORD *)(v3 + 8 * v8);
    ++v17;
    if (v16)
      goto LABEL_23;
  }
LABEL_27:
  __break(1u);
}

unint64_t sub_10001D5D4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1011002C0;
  if (!qword_1011002C0)
  {
    v1 = sub_10001F784(&qword_1010F0B20);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_1011002C0);
  }
  return result;
}

uint64_t sub_10001D620(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2)
    v7 = 2;
  v8 = v7 - 2;
  v9 = (unint64_t *)(a1 + 80);
  v2 = 64;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

unint64_t sub_10001D6AC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10001A9A8(&qword_1010F9F80);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  v6 = v3 + 64;
  v7 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    sub_10000F9B8(v7, (uint64_t)&v16, &qword_1010F9F88);
    v8 = v16;
    v9 = v17;
    result = sub_1003B0CDC(v16, v17);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v12 = (uint64_t *)(v4[6] + 16 * result);
    *v12 = v8;
    v12[1] = v9;
    result = (unint64_t)sub_10010F90C(&v18, (_OWORD *)(v4[7] + 32 * result));
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4[2] = v15;
    v7 += 48;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

void type metadata accessor for SecureLocationsStewieError(uint64_t a1)
{
  sub_10001D3B4(a1, &qword_1010EAE90, (uint64_t)&unk_10104E9D0);
}

uint64_t sub_10001D7F4@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t sub_10001D7FC()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(SPSecureLocationsStewieErrorDomain);
}

unint64_t sub_10001D80C()
{
  unint64_t result;

  result = qword_101105978;
  if (!qword_101105978)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for UInt, &type metadata for UInt);
    atomic_store(result, (unint64_t *)&qword_101105978);
  }
  return result;
}

uint64_t sub_10001D850()
{
  uint64_t v0;

  return sub_10001D878(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t sub_10001D858()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_10001D878(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_10001D898(uint64_t result, uint64_t a2)
{
  if (result)
    return swift_retain(a2);
  return result;
}

uint64_t sub_10001D8A8(uint64_t result, uint64_t a2)
{
  if (result)
    return swift_release(a2);
  return result;
}

uint64_t sub_10001D8B8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))();
}

uint64_t sub_10001D8D8(uint64_t a1)
{
  uint64_t v1;

  return sub_10000B81C(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_10001D8F0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return sub_1000053C4(v1, a1);
}

uint64_t sub_10001D908@<X0>(uint64_t *a1@<X8>)
{
  return sub_100336CA8((uint64_t (*)(_QWORD, _QWORD))sub_100011BE8, a1);
}

uint64_t sub_10001D924@<X0>(uint64_t *a1@<X8>)
{
  return sub_100336CA8((uint64_t (*)(_QWORD, _QWORD))sub_100010DC8, a1);
}

uint64_t sub_10001D940@<X0>(uint64_t *a1@<X8>)
{
  return sub_100336CA8((uint64_t (*)(_QWORD, _QWORD))sub_1000114D8, a1);
}

uint64_t sub_10001D95C()
{
  uint64_t v0;

  return sub_100008CBC(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), (__int128 *)(v0 + 32));
}

uint64_t sub_10001D968()
{
  return sub_100728240((uint64_t (*)(_QWORD, _QWORD, uint64_t))sub_100016348);
}

void sub_10001D974()
{
  uint64_t v0;

  sub_10001A9A8(&qword_101105AA0);
  sub_1000082B4(*(_QWORD *)(v0 + 16));
}

void sub_10001D9AC()
{
  uint64_t v0;

  sub_100014824(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), *(void (**)(void *))(v0 + 32), *(_QWORD *)(v0 + 40));
}

uint64_t sub_10001D9B8(uint64_t a1)
{
  uint64_t v1;

  return sub_10000CA2C(a1, *(char **)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32));
}

void sub_10001D9D4()
{
  uint64_t v0;

  sub_10000DD68(*(_BYTE **)(v0 + 16), *(void (**)(_QWORD))(v0 + 24));
}

uint64_t sub_10001D9E0(uint64_t a1, uint64_t a2)
{
  return sub_10000BA2C(a1, a2, (uint64_t)&unk_1010B4D08, (uint64_t)sub_10001D9D4, (uint64_t)&unk_1010B4D20);
}

void sub_10001D9FC(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000034;
  a1[1] = 0x8000000100EC5330;
}

unint64_t sub_10001DA1C()
{
  unint64_t result;

  result = qword_101106C00;
  if (!qword_101106C00)
  {
    result = swift_getWitnessTable(&unk_100E4E7BC, &type metadata for SecureLocationsEntitlement);
    atomic_store(result, (unint64_t *)&qword_101106C00);
  }
  return result;
}

uint64_t type metadata accessor for WildModeAssociationRecord(uint64_t a1)
{
  return sub_10001B630(a1, qword_1010F2670, (uint64_t)&nominal type descriptor for WildModeAssociationRecord);
}

uint64_t sub_10001DA74()
{
  uint64_t v0;

  sub_10000A0B8(*(_QWORD *)(v0 + 32));
  return swift_task_switch(sub_100004830, 0, 0);
}

uint64_t sub_10001DAB0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  *(_QWORD *)(v0 + 40) = *(_QWORD *)(v1 + 184);
  *(_BYTE *)(v0 + 80) = *(_BYTE *)(v1 + 192);
  return swift_task_switch(sub_10000A314, 0, 0);
}

uint64_t sub_10001DAD8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 56));
  swift_task_dealloc(v1);
  return swift_task_switch(sub_100713C60, 0, 0);
}

uint64_t sub_10001DB34()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  v4 = (_QWORD *)swift_task_alloc(dword_1011059C4);
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_100004A74;
  v4[3] = v2;
  v4[4] = v3;
  return swift_task_switch(sub_10001DAB0, v2, 0);
}

uint64_t sub_10001DB94(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 24) = a1;
  *(_QWORD *)(v2 + 32) = a2;
  return swift_task_switch(sub_10001DAB0, a1, 0);
}

uint64_t sub_10001DBB4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  v4 = (_QWORD *)swift_task_alloc(dword_1011059B4);
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_100004A74;
  return sub_100005AF0(v2, v3);
}

uint64_t sub_10001DC04(uint64_t *a1)
{
  uint64_t v1;

  return sub_10000AD64(a1, v1);
}

uint64_t sub_10001DC0C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 400);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 56));
  if (v1)
    return swift_task_switch(sub_10000D7A8, *(_QWORD *)(v0 + 400), 0);
  swift_task_dealloc(*(_QWORD *)(v0 + 344));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10001DC6C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  _QWORD *v11;
  uint64_t (__cdecl *v12)();

  v1 = *(_QWORD *)(v0 + 400);
  v2 = *(_QWORD *)(v0 + 368);
  v3 = *(_QWORD *)(v0 + 336);
  *(_QWORD *)(v0 + 320) = *(_QWORD *)(v0 + 408);
  v4 = swift_allocObject(&unk_10108CB40, 24, 7);
  swift_weakInit(v4 + 16, v3);
  v5 = (_QWORD *)swift_allocObject(&unk_10108CCF8, 40, 7);
  v5[2] = v4;
  v5[3] = v1;
  v5[4] = v2;
  swift_retain();
  v6 = sub_10001A9A8(&qword_1010EE3E0);
  v7 = sub_1000193A4(&qword_1010EE3E8, &qword_1010EE3E0, (const char *)&protocol conformance descriptor for AnyPublisher<A, B>);
  v8 = Publisher<>.sink(receiveValue:)(sub_10072829C, v5, v6, v7);
  swift_release(v5);
  swift_release(*(_QWORD *)(v0 + 320));
  v9 = *(_QWORD *)(v3 + 144);
  *(_QWORD *)(v3 + 144) = v8;
  swift_release(v9);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 16, &qword_1010EE220);
  if (*(_QWORD *)(v0 + 40))
  {
    sub_10000F9FC((__int128 *)(v0 + 16), v0 + 216);
    sub_10001AA44((_QWORD *)(v0 + 216), *(_QWORD *)(v0 + 240));
    v12 = (uint64_t (__cdecl *)())((char *)&dword_1010EBC30 + dword_1010EBC30);
    v11 = (_QWORD *)swift_task_alloc(unk_1010EBC34);
    *(_QWORD *)(v0 + 416) = v11;
    *v11 = v0;
    v11[1] = sub_100713868;
    return v12();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10001DDE8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 336);
  sub_10000FEA4();
  *(_QWORD *)(v0 + 352) = *(_QWORD *)(v1 + 128);
  return swift_task_switch(sub_1000049E0, 0, 0);
}

uint64_t sub_10001DE2C()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 360));
  return swift_task_switch(sub_100005214, 0, 0);
}

uint64_t sub_10001DE80()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 336) = v0;
  v2 = sub_10001A9A8(&qword_1010F46C0);
  *(_QWORD *)(v1 + 344) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10001DDE8, v0, 0);
}

uint64_t sub_10001DEDC()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 328));
  return swift_task_switch(sub_100004710, 0, 0);
}

uint64_t sub_10001DF30()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 296));
  return swift_task_switch(sub_10000543C, 0, 0);
}

uint64_t sub_10001DF84()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  v4 = (_QWORD *)swift_task_alloc(dword_101105814);
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_100004A74;
  return sub_10001DFE4(v2, v3, v0 + 32);
}

uint64_t sub_10001DFE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  v3[34] = a2;
  v3[35] = a3;
  v3[33] = a1;
  return swift_task_switch(sub_1000056C4, 0, 0);
}

uint64_t sub_10001E000@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 56);
  *a1 = v2;
  return swift_bridgeObjectRetain(v2);
}

uint64_t sub_10001E01C(uint64_t a1)
{
  return OS_dispatch_queue.sync<A>(execute:)(sub_10001E000, a1, &type metadata for Configuration);
}

void sub_10001E064(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000032;
  a1[1] = 0x8000000100EC2B40;
}

unint64_t sub_10001E084()
{
  unint64_t result;

  result = qword_1010EE368;
  if (!qword_1010EE368)
  {
    result = swift_getWitnessTable(&unk_100E26B1C, &type metadata for BeaconSharingEntitlement);
    atomic_store(result, (unint64_t *)&qword_1010EE368);
  }
  return result;
}

void sub_10001E0C8(_QWORD *a1@<X8>)
{
  *a1 = 0xD00000000000002ALL;
  a1[1] = 0x8000000100EC3450;
}

unint64_t sub_10001E0E8()
{
  unint64_t result;

  result = qword_1011083C8;
  if (!qword_1011083C8)
  {
    result = swift_getWitnessTable(&unk_100E43AC8, &type metadata for OwnerSessionEntitlement);
    atomic_store(result, (unint64_t *)&qword_1011083C8);
  }
  return result;
}

uint64_t type metadata accessor for BeaconEstimatedLocation(uint64_t a1)
{
  uint64_t result;

  result = qword_10110D920;
  if (!qword_10110D920)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for BeaconEstimatedLocation);
  return result;
}

uint64_t sub_10001E18C()
{
  unint64_t v0;

  v0 = sub_10001DA1C();
  return NSXPCConnection.hasEntitlement<A>(_:)(v0, &type metadata for SecureLocationsEntitlement, v0) & 1;
}

void sub_10001E1C0()
{
  uint64_t v0;

  sub_10001E1CC(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
}

void sub_10001E1CC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  void *v12;
  id v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;

  v8 = type metadata accessor for DispatchPredicate(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (uint64_t *)((char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (!a1)
    goto LABEL_4;
  v12 = *(void **)(a2 + 32);
  *v11 = v12;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v9 + 104))(v11, enum case for DispatchPredicate.onQueue(_:), v8);
  v13 = a1;
  v14 = v12;
  LOBYTE(v12) = _dispatchPreconditionTest(_:)(v11);
  (*(void (**)(_QWORD *, uint64_t))(v9 + 8))(v11, v8);
  if ((v12 & 1) != 0)
  {
    objc_msgSend(*(id *)(a2 + 112), "addObject:", v13);
    v15 = *(_QWORD *)(a2 + 104);
    swift_retain();
    v16 = sub_100308450(v13);

    swift_release(v15);
    swift_release(v16);
LABEL_4:
    v17 = *(id *)(*(_QWORD *)(a2 + 96) + 328);
    sub_10000B028(a3, a4);

    return;
  }
  __break(1u);
}

uint64_t sub_10001E300()
{
  uint64_t v0;

  return sub_10000A1DC(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_BYTE *)(v0 + 40));
}

uint64_t sub_10001E310()
{
  uint64_t v0;

  return sub_100006E9C(*(_QWORD *)(v0 + 16), *(unsigned int *)(v0 + 24));
}

uint64_t sub_10001E31C()
{
  uint64_t v0;

  return sub_100006244(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

id sub_10001E324()
{
  uint64_t v0;

  return sub_100008F54(*(_QWORD *)(v0 + 16));
}

_QWORD *sub_10001E32C()
{
  return sub_100019424(&qword_1010E99F8, (uint64_t)qword_1011B6A48, (void (*)(char *, uint64_t, _QWORD **, _QWORD **))sub_10084C5B8, (uint64_t)sub_1001D7F04);
}

_QWORD *sub_10001E350()
{
  return sub_100019424(&qword_1010EA1C0, (uint64_t)qword_1011B7C58, (void (*)(char *, uint64_t, _QWORD **, _QWORD **))sub_10084C498, (uint64_t)sub_100B00710);
}

uint64_t sub_10001E374()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  v4 = (_QWORD *)swift_task_alloc(dword_101100274);
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_100004A74;
  return sub_1000048E8(v2, v3);
}

uint64_t sub_10001E3C4()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v15;

  if (qword_1010E9D20 != -1)
    swift_once(&qword_1010E9D20, sub_1005AE82C);
  v1 = *(_QWORD **)(v0 + 168);
  v2 = type metadata accessor for Logger(0);
  sub_10001A9E8(v2, (uint64_t)qword_1011B71C8);
  sub_100012368(v1);
  v3 = sub_100012368(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = *(_QWORD *)(v0 + 168);
    v7 = swift_slowAlloc(22, -1);
    v8 = swift_slowAlloc(32, -1);
    v15 = v8;
    *(_DWORD *)v7 = 141558275;
    *(_QWORD *)(v0 + 144) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 144, v0 + 152, v7 + 4, v7 + 12);
    *(_WORD *)(v7 + 12) = 2081;
    v9 = *(_QWORD *)(v6 + 48);
    v10 = *(_QWORD **)(v0 + 168);
    if (v9)
    {
      v11 = v10[5];
      v12 = v9;
    }
    else
    {
      v12 = 0xE700000000000000;
      v11 = 0x6E776F6E6B6E75;
    }
    swift_bridgeObjectRetain(v9);
    *(_QWORD *)(v0 + 152) = sub_100016940(v11, v12, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 152, v0 + 160, v7 + 14, v7 + 22);
    swift_bridgeObjectRelease();
    sub_1000122FC(v10);
    sub_1000122FC(v10);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Finished adding connection for context %{private,mask.hash}s.", (uint8_t *)v7, 0x16u);
    swift_arrayDestroy(v8, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v7, -1, -1);
  }
  else
  {
    v13 = *(_QWORD **)(v0 + 168);
    sub_1000122FC(v13);
    sub_1000122FC(v13);
  }
  swift_release();

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10001E5EC@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  return sub_10001E5F4(v1, a1);
}

uint64_t sub_10001E5F4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v3 = *(_QWORD *)(a1 + 160);
  v4 = *(_QWORD *)(v3 + 56);
  v5 = sub_10001A9A8(&qword_1011002C8);
  result = OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_10001D8F0, v3, v4, &type metadata for () + 1, v5);
  *a2 = v7;
  return result;
}

uint64_t sub_10001E668()
{
  uint64_t v0;

  return sub_10011270C(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10001E678()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)();
  uint64_t v9;

  result = *(_QWORD *)(v0 + 776);
  v2 = *(_QWORD *)(result + 16);
  *(_QWORD *)(v0 + 784) = v2;
  if (!v2)
  {
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 968) = 0;
    v9 = *(_QWORD *)(v0 + 752);
    if ((*(_BYTE *)(v0 + 73) & 1) != 0)
      v8 = sub_1000D40B8;
    else
      v8 = sub_100004C70;
    return swift_task_switch(v8, v9, 0);
  }
  v3 = *(_QWORD *)(v0 + 656);
  v4 = *(_QWORD *)(v0 + 648);
  v5 = *(_DWORD *)(v3 + 80);
  *(_DWORD *)(v0 + 76) = v5;
  *(_DWORD *)(v0 + 100) = enum case for Feature.FindMy.itemSharing(_:);
  *(_OWORD *)(v0 + 792) = 0u;
  if (*(_QWORD *)(result + 16))
  {
    v6 = *(_QWORD *)(v0 + 752);
    v7 = *(_QWORD *)(v0 + 736);
    *(_QWORD *)(v0 + 808) = *(_QWORD *)(v3 + 72);
    sub_10005972C(result + ((v5 + 32) & ~(unint64_t)v5), v7, type metadata accessor for MemberSharingCircle);
    *(_DWORD *)(v0 + 1120) = *(_DWORD *)(v4 + 24);
    v8 = sub_1000D1B64;
    v9 = v6;
    return swift_task_switch(v8, v9, 0);
  }
  __break(1u);
  return result;
}

uint64_t sub_10001E754()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[23];
  v0[97] = v0[15];
  return swift_task_switch(sub_10001E678, v1, 0);
}

uint64_t sub_10001E770()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = (_QWORD *)swift_task_alloc(async function pointer to Array.asyncFlatMap<A>(_:)[1]);
  v0[126] = v1;
  v2 = type metadata accessor for OwnedBeaconRecord(0);
  v3 = sub_10001A9A8(&qword_1010EE100);
  v4 = sub_1000193A4(&qword_1010EE1A8, &qword_1010EE100, (const char *)&protocol conformance descriptor for [A]);
  *v1 = v0;
  v1[1] = sub_100004EFC;
  return Array.asyncFlatMap<A>(_:)(&unk_1010EE1A0, v0[23], v0[125], v2, v3, v4);
}

uint64_t sub_10001E818()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[23];
  v0[125] = v0[14];
  return swift_task_switch(sub_10001E770, v1, 0);
}

uint64_t sub_10001E834()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = *(_QWORD *)(v0 + 144);
  v2 = *(_QWORD **)(v0 + 120);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
  *v2 = v1;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10001E870(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 136);
  *(_QWORD *)(*(_QWORD *)v1 + 144) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10001E834, 0, 0);
}

uint64_t sub_10001E8CC()
{
  unint64_t v0;

  v0 = sub_10001E0E8();
  return NSXPCConnection.hasEntitlement<A>(_:)(v0, &type metadata for OwnerSessionEntitlement, v0) & 1;
}

uint64_t sub_10001E904()
{
  uint64_t v0;

  return sub_1000062D8(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(void (**)(_QWORD *))(v0 + 32), *(_QWORD *)(v0 + 40));
}

uint64_t sub_10001E910()
{
  return sub_10001CA34() & 1;
}

void sub_10001E92C(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 120);
}

_QWORD *sub_10001E938@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v18;
  __int128 v19;
  _BYTE v20[32];
  __int128 v21;
  __int128 v22;
  _BYTE v23[32];
  _BYTE v24[32];
  __int128 v25;
  __int128 v26;
  __int128 v27;
  _OWORD v28[13];
  _QWORD v29[26];
  _QWORD v30[26];
  _OWORD v31[13];

  v3 = a1 + 152;
  sub_10099681C(a1 + 152, (uint64_t)v30);
  sub_10099681C((uint64_t)v30, (uint64_t)v31);
  if (sub_10044935C((uint64_t)v31) == 1)
  {
    if (qword_1010E9C50 != -1)
      swift_once(&qword_1010E9C50, sub_1004F0934);
    v4 = qword_1011B6FC0;
    *(_QWORD *)&v18 = 0;
    BYTE8(v18) = 1;
    v19 = xmmword_100E3EAD0;
    *(_QWORD *)v20 = 5;
    *(_OWORD *)&v20[8] = xmmword_100E3EAC0;
    v20[24] = 0;
    *(_QWORD *)&v21 = qword_1011B6FC0;
    *((_QWORD *)&v21 + 1) = 0x405E000000000000;
    LOBYTE(v22) = 1;
    *((_QWORD *)&v22 + 1) = 0x409C200000000000;
    *(_QWORD *)v23 = 5;
    *(_OWORD *)&v23[8] = xmmword_100E3EAB0;
    *(_DWORD *)&v23[24] = 16843009;
    *(_QWORD *)v24 = 5;
    *(_OWORD *)&v24[8] = xmmword_100E3EAA0;
    v24[24] = 1;
    *(_QWORD *)&v25 = 808334897;
    *((_QWORD *)&v25 + 1) = 0xE400000000000000;
    *(_QWORD *)&v26 = 808334129;
    *((_QWORD *)&v26 + 1) = 0xE400000000000000;
    *(_QWORD *)&v27 = 3157561;
    *((_QWORD *)&v27 + 1) = 0xE300000000000000;
    v28[2] = *(_OWORD *)v20;
    v28[3] = *(_OWORD *)&v20[16];
    v28[0] = v18;
    v28[1] = xmmword_100E3EAD0;
    v28[8] = *(_OWORD *)v24;
    v28[9] = *(_OWORD *)&v24[16];
    v28[6] = *(_OWORD *)v23;
    v28[7] = *(_OWORD *)&v23[16];
    v28[4] = v21;
    v28[5] = v22;
    v28[10] = v25;
    v28[11] = v26;
    v28[12] = v27;
    SharingCircleWildAdvertisementKey.init(key:)(v28);
    sub_10099681C(v3, (uint64_t)v29);
    sub_10099681C((uint64_t)v28, v3);
    swift_bridgeObjectRetain(v4);
    sub_1004F1D0C(&v18);
    sub_100996864(v29, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1004493DC);
    v5 = v26;
    a2[10] = v25;
    a2[11] = v5;
    a2[12] = v27;
    v6 = *(_OWORD *)&v23[16];
    a2[6] = *(_OWORD *)v23;
    a2[7] = v6;
    v7 = *(_OWORD *)&v24[16];
    a2[8] = *(_OWORD *)v24;
    a2[9] = v7;
    v8 = *(_OWORD *)&v20[16];
    a2[2] = *(_OWORD *)v20;
    a2[3] = v8;
    v9 = v22;
    a2[4] = v21;
    a2[5] = v9;
    v11 = v18;
    v10 = v19;
  }
  else
  {
    v12 = v31[11];
    a2[10] = v31[10];
    a2[11] = v12;
    a2[12] = v31[12];
    v13 = v31[7];
    a2[6] = v31[6];
    a2[7] = v13;
    v14 = v31[9];
    a2[8] = v31[8];
    a2[9] = v14;
    v15 = v31[3];
    a2[2] = v31[2];
    a2[3] = v15;
    v16 = v31[5];
    a2[4] = v31[4];
    a2[5] = v16;
    v11 = v31[0];
    v10 = v31[1];
  }
  *a2 = v11;
  a2[1] = v10;
  return sub_100996864(v30, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100004BCC);
}

uint64_t sub_10001EB60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001FEE18);
}

uint64_t sub_10001EB6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001FED98);
}

uint64_t type metadata accessor for OwnerSharingCircle(uint64_t a1)
{
  uint64_t result;

  result = qword_1011102A8;
  if (!qword_1011102A8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for OwnerSharingCircle);
  return result;
}

uint64_t sub_10001EBB4()
{
  return sub_100004630();
}

uint64_t sub_10001EBBC()
{
  return sub_100030824(&qword_1010EBBB0, 0, (uint64_t (*)(uint64_t))type metadata accessor for SimpleBeaconUpdateService);
}

uint64_t sub_10001EBD4()
{
  return sub_100030824(&qword_1010EBC10, 0, (uint64_t (*)(uint64_t))type metadata accessor for ObservationStoreService);
}

uint64_t sub_10001EBEC()
{
  return sub_100030824(&qword_1010EBB80, 0, type metadata accessor for BeaconManagerService);
}

uint64_t sub_10001EC04()
{
  return sub_100030824(&qword_1010EBC38, 0, (uint64_t (*)(uint64_t))type metadata accessor for CloudStorageService);
}

uint64_t sub_10001EC1C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 40);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 48));
  swift_task_dealloc(v1);
  return swift_task_switch(sub_100005330, 0, 0);
}

uint64_t sub_10001EC78()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 40);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 48));
  swift_task_dealloc(v1);
  return swift_task_switch(sub_100005B7C, 0, 0);
}

uint64_t sub_10001ECD4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 40);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 48));
  swift_task_dealloc(v1);
  return swift_task_switch(sub_100004148, 0, 0);
}

uint64_t sub_10001ED30@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return sub_10000C3DC(v1, a1);
}

char *sub_10001ED38@<X0>(char **a1@<X8>)
{
  return sub_10001ED40(a1);
}

char *sub_10001ED40@<X0>(char **a1@<X8>)
{
  char *result;

  result = sub_1000188D0();
  *a1 = result;
  return result;
}

uint64_t sub_10001ED68(uint64_t a1)
{
  return sub_100008B10(a1, (uint64_t)&unk_100E676E8);
}

uint64_t sub_10001ED74(uint64_t a1)
{
  return sub_100008B10(a1, (uint64_t)&unk_100E67788);
}

uint64_t sub_10001ED80(uint64_t a1)
{
  return sub_100C1BC74(a1, (uint64_t)&unk_100E66C70, &qword_101119C98);
}

uint64_t type metadata accessor for SafeLocation(uint64_t a1)
{
  uint64_t result;

  result = qword_101114278;
  if (!qword_101114278)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SafeLocation);
  return result;
}

uint64_t sub_10001EDD0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC12searchpartyd11BeaconStore____lazy_storage___recordPublisher);
  if (v1)
  {
    v2 = *(_QWORD *)(v0 + OBJC_IVAR____TtC12searchpartyd11BeaconStore____lazy_storage___recordPublisher);
  }
  else
  {
    v2 = *(_QWORD *)(*(_QWORD *)(v0 + 160) + 56);
    *(_QWORD *)(v0 + OBJC_IVAR____TtC12searchpartyd11BeaconStore____lazy_storage___recordPublisher) = v2;
    swift_retain_n(v2, 2);
    v1 = 0;
  }
  swift_retain(v1);
  return v2;
}

uint64_t sub_10001EE24(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 552);
  *(_QWORD *)(*(_QWORD *)v1 + 560) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100004230, 0, 0);
}

uint64_t sub_10001EE80@<X0>(_QWORD *a1@<X8>)
{
  return sub_10001EE88(a1);
}

uint64_t sub_10001EE88@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t result;

  v2 = sub_100017368();
  v3 = sub_100307DCC(v2);
  result = swift_bridgeObjectRelease();
  *a1 = v3;
  return result;
}

void sub_10001EEDC(char a1, uint64_t a2)
{
  uint64_t v2;

  sub_10001EEE4(a1, a2, *(_QWORD *)(v2 + 16));
}

void sub_10001EEE4(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  id v6;

  if (a2)
    v5 = _convertErrorToNSError(_:)(a2);
  else
    v5 = 0;
  v6 = (id)v5;
  (*(void (**)(uint64_t, _QWORD))(a3 + 16))(a3, a1 & 1);

}

uint64_t sub_10001EF3C(uint64_t result, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return sub_10001BC14(result, a2);
  return result;
}

void sub_10001F160(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 2u);
}

uint64_t sub_10001F1E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  sub_1000234D8(v0, qword_1010E98B8);
  v1 = sub_10001A9E8(v0, (uint64_t)qword_1010E98B8);
  v2 = type metadata accessor for Date(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
}

uint64_t static Date.testSetNow(date:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  _QWORD v5[3];
  uint64_t v6;

  if (qword_1010EA1D0 != -1)
    swift_once(&qword_1010EA1D0, sub_100B11444);
  v5[0] = 0x7365547265646E75;
  v5[1] = 0xE900000000000074;
  SynchronousCache.cachedValue<A>(key:computeBlock:)(&v6, v5, sub_10001F628, 0, &type metadata for Bool);
  swift_bridgeObjectRelease();
  if (v6 == 1)
  {
    if (qword_1010E98B0 != -1)
      swift_once(&qword_1010E98B0, sub_10001F1E8);
    v2 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
    v3 = sub_10001A9E8(v2, (uint64_t)qword_1010E98B8);
    swift_beginAccess(v3, v5, 33, 0);
    sub_10001F62C(a1, v3);
    return swift_endAccess(v5);
  }
  else
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000047, 0x8000000100EC5670, "searchpartyd/DateExtensions_ReferenceClock.swift", 48, 2, 18, 0);
    __break(1u);
  }
  return result;
}

uint64_t sub_10001F3A8()
{
  if (qword_1010E99D8 != -1)
    swift_once(&qword_1010E99D8, sub_1001C49FC);
  return dispatch thunk of DarwinNotificationHelper.post(bypassRateLimit:)(0);
}

uint64_t variable initialization expression of CurrentLocationMonitor.delegate()
{
  return 0;
}

uint64_t variable initialization expression of CurrentLocationMonitor.locationManager()
{
  return 0;
}

uint64_t variable initialization expression of CurrentLocationMonitor._currentAuthorizationStatus()
{
  return 0;
}

uint64_t variable initialization expression of CurrentLocationMonitor.queue()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v15;
  _QWORD *v16;

  v0 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v0);
  v2 = (char *)&v15 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v3);
  v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001F6FC();
  v10 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v7 + 104))(v9, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v6);
  static DispatchQoS.unspecified.getter(v10);
  v16 = _swiftEmptyArrayStorage;
  v11 = sub_100006204((unint64_t *)&qword_1010F0E20, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v12 = sub_10001A9A8((uint64_t *)&unk_1010EA6B0);
  v13 = sub_10001F738();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v16, v12, v13, v0, v11);
  return OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD00000000000002ELL, 0x8000000100EC56C0, v5, v2, v9, 0);
}

uint64_t variable initialization expression of DeviceIdentityUtility.certExpiryDate@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;

  v2 = type metadata accessor for Date(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(a1, 1, 1, v2);
}

void *variable initialization expression of DeviceIdentityUtility.certs()
{
  return &_swiftEmptyArrayStorage;
}

uint64_t sub_10001F62C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_10001F674(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10001F6BC(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_10001F6FC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1010EA6A0;
  if (!qword_1010EA6A0)
  {
    v1 = objc_opt_self(OS_dispatch_queue);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1010EA6A0);
  }
  return result;
}

unint64_t sub_10001F738()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1010F0E30;
  if (!qword_1010F0E30)
  {
    v1 = sub_10001F784((uint64_t *)&unk_1010EA6B0);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_1010F0E30);
  }
  return result;
}

uint64_t sub_10001F784(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = swift_getTypeByMangledNameInContextInMetadataState2(255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

void type metadata accessor for CBManagerState(uint64_t a1)
{
  sub_10001D3B4(a1, &qword_1010EAB40, (uint64_t)&unk_10104E260);
}

void type metadata accessor for QualityOfService(uint64_t a1)
{
  sub_10001D3B4(a1, &qword_1010EAB48, (uint64_t)&unk_10104E280);
}

__n128 initializeWithTake for StableIdentifier.UDID(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for Coordinates(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for Coordinates(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 16) = v3;
  return result;
}

void type metadata accessor for sp_key_index_map_handle(uint64_t a1)
{
  sub_10001D3B4(a1, &qword_1010EAB50, (uint64_t)&unk_10104E2F8);
}

void type metadata accessor for CFRunLoopSource(uint64_t a1)
{
  sub_10001D3B4(a1, &qword_1010EAB58, (uint64_t)&unk_10104E320);
}

void type metadata accessor for CKAccountStatus(uint64_t a1)
{
  sub_10001D3B4(a1, &qword_1010EAB60, (uint64_t)&unk_10104E350);
}

void type metadata accessor for sp_key_subsequence_handle(uint64_t a1)
{
  sub_10001D3B4(a1, &qword_1010EAB68, (uint64_t)&unk_10104E3C8);
}

void type metadata accessor for CFUserNotification(uint64_t a1)
{
  sub_10001D3B4(a1, &qword_1010EAB70, (uint64_t)&unk_10104E3F0);
}

void type metadata accessor for SPBTRSSIChannel(uint64_t a1)
{
  sub_10001D3B4(a1, &qword_1010EAB78, (uint64_t)&unk_10104E420);
}

void type metadata accessor for SPBeaconType(uint64_t a1)
{
  sub_10001D3B4(a1, &qword_1010EAB80, (uint64_t)&unk_10104E440);
}

void type metadata accessor for CBUseCase(uint64_t a1)
{
  sub_10001D3B4(a1, &qword_1010EAB88, (uint64_t)&unk_10104E468);
}

void type metadata accessor for SecureLocationsStewieServiceState(uint64_t a1)
{
  sub_10001D3B4(a1, &qword_1010EAB90, (uint64_t)&unk_10104E488);
}

void type metadata accessor for Scope(uint64_t a1)
{
  sub_10001D3B4(a1, &qword_1010EAB98, (uint64_t)&unk_10104E4A8);
}

void type metadata accessor for SPDisabledReason(uint64_t a1)
{
  sub_10001D3B4(a1, &qword_1010EABA0, (uint64_t)&unk_10104E4C8);
}

void type metadata accessor for SPServiceState(uint64_t a1)
{
  sub_10001D3B4(a1, &qword_1010EABA8, (uint64_t)&unk_10104E4F0);
}

void type metadata accessor for NWConnectionState(uint64_t a1)
{
  sub_10001D3B4(a1, &qword_1010EABB0, (uint64_t)&unk_10104E518);
}

void type metadata accessor for BluetoothPowerState(uint64_t a1)
{
  sub_10001D3B4(a1, &qword_1010EABB8, (uint64_t)&unk_10104E538);
}

void type metadata accessor for RTLocationOfInterestType(uint64_t a1)
{
  sub_10001D3B4(a1, &qword_1010EABC0, (uint64_t)&unk_10104E558);
}

void type metadata accessor for SPSecureLocationPublishReason(uint64_t a1)
{
  sub_10001D3B4(a1, &qword_1010EABC8, (uint64_t)&unk_10104E578);
}

void type metadata accessor for SPMotionActivityState(uint64_t a1)
{
  sub_10001D3B4(a1, &qword_1010EABD0, (uint64_t)&unk_10104E598);
}

void type metadata accessor for CBCharacteristicProperties(uint64_t a1)
{
  sub_10001D3B4(a1, &qword_1010EABD8, (uint64_t)&unk_10104E5B8);
}

void type metadata accessor for BeaconTaskState(uint64_t a1)
{
  sub_10001D3B4(a1, &qword_1010EABE0, (uint64_t)&unk_10104E5E0);
}

void type metadata accessor for PlaySoundContext(uint64_t a1)
{
  sub_10001D3B4(a1, &qword_1010EABE8, (uint64_t)&unk_10104E600);
}

void type metadata accessor for TrackingObservationAction(uint64_t a1)
{
  sub_10001D3B4(a1, &qword_1010EABF0, (uint64_t)&unk_10104E620);
}

void type metadata accessor for SPSecureLocationSubscriptionMode(uint64_t a1)
{
  sub_10001D3B4(a1, &qword_1010EABF8, (uint64_t)&unk_10104E640);
}

void type metadata accessor for SPBeaconObservationType(uint64_t a1)
{
  sub_10001D3B4(a1, &qword_1010EAC00, (uint64_t)&unk_10104E660);
}

void type metadata accessor for SecKey(uint64_t a1)
{
  sub_10001D3B4(a1, &qword_1010EAC08, (uint64_t)&unk_10104E680);
}

void type metadata accessor for SPBeaconGroupStatus(uint64_t a1)
{
  sub_10001D3B4(a1, &qword_1010EAC10, (uint64_t)&unk_10104E6B0);
}

void type metadata accessor for TrackingObservationType(uint64_t a1)
{
  sub_10001D3B4(a1, &qword_1010EAC18, (uint64_t)&unk_10104E6D0);
}

uint64_t sub_10001FA50(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100006204(&qword_1010EB420, (uint64_t (*)(uint64_t))type metadata accessor for SPPairingSessionError, (uint64_t)&unk_100E1F670);
  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_10001FA90(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100006204(&qword_1010EB420, (uint64_t (*)(uint64_t))type metadata accessor for SPPairingSessionError, (uint64_t)&unk_100E1F670);
  return Error<>._code.getter(a1, v2);
}

uint64_t sub_10001FAD4(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100006204(&qword_1010EB450, (uint64_t (*)(uint64_t))type metadata accessor for SPPairingSessionError, (uint64_t)&unk_100E217DC);
  return _BridgedStoredNSError._getEmbeddedNSError()(a1, v2);
}

uint64_t sub_10001FB14(uint64_t a1, uint64_t a2)
{
  return sub_1000232F0(a1, a2, (uint64_t (*)(uint64_t))&String._bridgeToObjectiveC());
}

uint64_t sub_10001FB2C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100006204(&qword_1010EB460, (uint64_t (*)(uint64_t))type metadata accessor for SPBeaconSharingError, (uint64_t)&unk_100E1F474);
  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_10001FB6C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100006204(&qword_1010EB460, (uint64_t (*)(uint64_t))type metadata accessor for SPBeaconSharingError, (uint64_t)&unk_100E1F474);
  return Error<>._code.getter(a1, v2);
}

uint64_t sub_10001FBAC(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100006204((unint64_t *)&qword_1010EB490, (uint64_t (*)(uint64_t))type metadata accessor for SPBeaconSharingError, (uint64_t)&unk_100E21930);
  return _BridgedStoredNSError._getEmbeddedNSError()(a1, v2);
}

_QWORD *sub_10001FBF0@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t sub_10001FBFC(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100006204(&qword_1010EB2C8, (uint64_t (*)(uint64_t))type metadata accessor for SecureLocationsError, (uint64_t)&unk_100E1FEB0);
  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_10001FC3C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100006204(&qword_1010EB2C8, (uint64_t (*)(uint64_t))type metadata accessor for SecureLocationsError, (uint64_t)&unk_100E1FEB0);
  return Error<>._code.getter(a1, v2);
}

uint64_t sub_10001FC7C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100006204(&qword_1010F1590, (uint64_t (*)(uint64_t))type metadata accessor for SecureLocationsError, (uint64_t)&unk_100E2113C);
  return _BridgedStoredNSError._getEmbeddedNSError()(a1, v2);
}

uint64_t sub_10001FCC4(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100006204(&qword_1010EB158, (uint64_t (*)(uint64_t))type metadata accessor for FirmwareUpdateError, (uint64_t)&unk_100E207EC);
  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_10001FD04(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100006204(&qword_1010EB158, (uint64_t (*)(uint64_t))type metadata accessor for FirmwareUpdateError, (uint64_t)&unk_100E207EC);
  return Error<>._code.getter(a1, v2);
}

uint64_t sub_10001FD44(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100006204(&qword_1010EB190, (uint64_t (*)(uint64_t))type metadata accessor for FirmwareUpdateError, (uint64_t)&unk_100E20A38);
  return _BridgedStoredNSError._getEmbeddedNSError()(a1, v2);
}

uint64_t sub_10001FD8C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100006204(&qword_1010EB540, (uint64_t (*)(uint64_t))type metadata accessor for SPOwnerSessionError, (uint64_t)&unk_100E1EF5C);
  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_10001FDCC(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100006204(&qword_1010EB540, (uint64_t (*)(uint64_t))type metadata accessor for SPOwnerSessionError, (uint64_t)&unk_100E1EF5C);
  return Error<>._code.getter(a1, v2);
}

uint64_t sub_10001FE0C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100006204(&qword_1010EB250, (uint64_t (*)(uint64_t))type metadata accessor for SPOwnerSessionError, (uint64_t)&unk_100E21DB4);
  return _BridgedStoredNSError._getEmbeddedNSError()(a1, v2);
}

uint64_t sub_10001FE4C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100006204(&qword_1010EB3B0, (uint64_t (*)(uint64_t))type metadata accessor for UnpairError, (uint64_t)&unk_100E1F8C8);
  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_10001FE8C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100006204(&qword_1010EB3B0, (uint64_t (*)(uint64_t))type metadata accessor for UnpairError, (uint64_t)&unk_100E1F8C8);
  return Error<>._code.getter(a1, v2);
}

uint64_t sub_10001FECC(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100006204(&qword_1010EB3E0, (uint64_t (*)(uint64_t))type metadata accessor for UnpairError, (uint64_t)&unk_100E215BC);
  return _BridgedStoredNSError._getEmbeddedNSError()(a1, v2);
}

uint64_t sub_10001FF0C(uint64_t a1, uint64_t a2)
{
  return sub_1000232F0(a1, a2, (uint64_t (*)(uint64_t))&String.hashValue.getter);
}

uint64_t sub_10001FF1C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100006204(&qword_1010EB290, (uint64_t (*)(uint64_t))type metadata accessor for UpdateBatteryLevelError, (uint64_t)&unk_100E1FFDC);
  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_10001FF5C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100006204(&qword_1010EB290, (uint64_t (*)(uint64_t))type metadata accessor for UpdateBatteryLevelError, (uint64_t)&unk_100E1FFDC);
  return Error<>._code.getter(a1, v2);
}

uint64_t sub_10001FF9C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100006204(&qword_1010EB2C0, (uint64_t (*)(uint64_t))type metadata accessor for UpdateBatteryLevelError, (uint64_t)&unk_100E2102C);
  return _BridgedStoredNSError._getEmbeddedNSError()(a1, v2);
}

uint64_t sub_10001FFDC(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100006204(&qword_1010EB498, (uint64_t (*)(uint64_t))type metadata accessor for CommandError, (uint64_t)&unk_100E1F29C);
  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_10002001C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100006204(&qword_1010EB498, (uint64_t (*)(uint64_t))type metadata accessor for CommandError, (uint64_t)&unk_100E1F29C);
  return Error<>._code.getter(a1, v2);
}

uint64_t sub_10002005C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100006204((unint64_t *)&unk_101102F60, (uint64_t (*)(uint64_t))type metadata accessor for CommandError, (uint64_t)&unk_100E21A40);
  return _BridgedStoredNSError._getEmbeddedNSError()(a1, v2);
}

_DWORD *sub_10002009C@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = *result;
  *(_BYTE *)(a2 + 4) = 0;
  return result;
}

id sub_1000200AC()
{
  id *v0;

  return *v0;
}

_QWORD *sub_1000200B4@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *result;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

void sub_1000200C4()
{
  Swift::UInt *v0;

  Hasher._combine(_:)(*v0);
}

uint64_t sub_1000200EC(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100006204(&qword_1010EB198, (uint64_t (*)(uint64_t))type metadata accessor for SPAccessoryDiscoverySessionError, (uint64_t)&unk_100E20694);
  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_10002012C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100006204(&qword_1010EB198, (uint64_t (*)(uint64_t))type metadata accessor for SPAccessoryDiscoverySessionError, (uint64_t)&unk_100E20694);
  return Error<>._code.getter(a1, v2);
}

uint64_t sub_10002016C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100006204(&qword_1010EB1C8, (uint64_t (*)(uint64_t))type metadata accessor for SPAccessoryDiscoverySessionError, (uint64_t)&unk_100E20B38);
  return _BridgedStoredNSError._getEmbeddedNSError()(a1, v2);
}

uint64_t sub_1000201AC(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100006204(&qword_1010EB300, (uint64_t (*)(uint64_t))type metadata accessor for SecureLocationsStewieError, (uint64_t)&unk_100E1FD84);
  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_1000201EC(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100006204(&qword_1010EB300, (uint64_t (*)(uint64_t))type metadata accessor for SecureLocationsStewieError, (uint64_t)&unk_100E1FD84);
  return Error<>._code.getter(a1, v2);
}

uint64_t sub_10002022C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100006204(&qword_1010EB330, (uint64_t (*)(uint64_t))type metadata accessor for SecureLocationsStewieError, (uint64_t)&unk_100E2124C);
  return _BridgedStoredNSError._getEmbeddedNSError()(a1, v2);
}

uint64_t sub_10002026C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100006204(&qword_1010EB1D0, (uint64_t (*)(uint64_t))type metadata accessor for TrackingAvoidanceError, (uint64_t)&unk_100E2056C);
  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_1000202AC(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100006204(&qword_1010EB1D0, (uint64_t (*)(uint64_t))type metadata accessor for TrackingAvoidanceError, (uint64_t)&unk_100E2056C);
  return Error<>._code.getter(a1, v2);
}

uint64_t sub_1000202EC(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100006204(&qword_1010EB200, (uint64_t (*)(uint64_t))type metadata accessor for TrackingAvoidanceError, (uint64_t)&unk_100E20C48);
  return _BridgedStoredNSError._getEmbeddedNSError()(a1, v2);
}

uint64_t sub_10002032C(uint64_t a1)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&unk_100E1F360, a1);
  return _CFObject.hashValue.getter(a1, WitnessTable);
}

uint64_t sub_100020368(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&unk_100E1F360, a2);
  return _CFObject.hash(into:)(a1, a2, WitnessTable);
}

Swift::Int sub_1000203B0(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable;
  _QWORD v5[9];

  Hasher.init(_seed:)(v5);
  WitnessTable = swift_getWitnessTable(&unk_100E1F360, a2);
  _CFObject.hash(into:)(v5, a2, WitnessTable);
  return Hasher._finalize()();
}

void sub_100020408(_DWORD *a1@<X8>)
{
  _DWORD *v1;

  *a1 = *v1;
}

uint64_t sub_100020414(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100006204(&qword_1010EB3E8, (uint64_t (*)(uint64_t))type metadata accessor for SPCBPeripheralError, (uint64_t)&unk_100E1F79C);
  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_100020454(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100006204(&qword_1010EB3E8, (uint64_t (*)(uint64_t))type metadata accessor for SPCBPeripheralError, (uint64_t)&unk_100E1F79C);
  return Error<>._code.getter(a1, v2);
}

uint64_t sub_100020494(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100006204(&qword_1010EB418, (uint64_t (*)(uint64_t))type metadata accessor for SPCBPeripheralError, (uint64_t)&unk_100E216CC);
  return _BridgedStoredNSError._getEmbeddedNSError()(a1, v2);
}

uint64_t sub_1000204D4(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100006204(&qword_1010EB4D0, (uint64_t (*)(uint64_t))type metadata accessor for SPSeparationMonitoringError, (uint64_t)&unk_100E1F170);
  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_100020514(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100006204(&qword_1010EB4D0, (uint64_t (*)(uint64_t))type metadata accessor for SPSeparationMonitoringError, (uint64_t)&unk_100E1F170);
  return Error<>._code.getter(a1, v2);
}

uint64_t sub_100020554(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100006204(&qword_1010EB500, (uint64_t (*)(uint64_t))type metadata accessor for SPSeparationMonitoringError, (uint64_t)&unk_100E21B94);
  return _BridgedStoredNSError._getEmbeddedNSError()(a1, v2);
}

uint64_t sub_100020594@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t result;
  uint64_t v4;

  result = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1000205BC(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100006204(&qword_1010EB210, (uint64_t (*)(uint64_t))type metadata accessor for SPLocalFindableConnectionMaterialMonitoringSessionError, (uint64_t)&unk_100E2033C);
  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_1000205FC(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100006204(&qword_1010EB210, (uint64_t (*)(uint64_t))type metadata accessor for SPLocalFindableConnectionMaterialMonitoringSessionError, (uint64_t)&unk_100E2033C);
  return Error<>._code.getter(a1, v2);
}

uint64_t sub_10002063C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100006204((unint64_t *)&qword_1010EB240, (uint64_t (*)(uint64_t))type metadata accessor for SPLocalFindableConnectionMaterialMonitoringSessionError, (uint64_t)&unk_100E20D8C);
  return _BridgedStoredNSError._getEmbeddedNSError()(a1, v2);
}

uint64_t sub_10002067C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100006204(&qword_1010EB258, (uint64_t (*)(uint64_t))type metadata accessor for SPBTFindingSessionError, (uint64_t)&unk_100E20108);
  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_1000206BC(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100006204(&qword_1010EB258, (uint64_t (*)(uint64_t))type metadata accessor for SPBTFindingSessionError, (uint64_t)&unk_100E20108);
  return Error<>._code.getter(a1, v2);
}

uint64_t sub_1000206FC(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100006204(&qword_101116FB0, (uint64_t (*)(uint64_t))type metadata accessor for SPBTFindingSessionError, (uint64_t)&unk_100E20F1C);
  return _BridgedStoredNSError._getEmbeddedNSError()(a1, v2);
}

uint64_t sub_10002073C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100006204(&qword_1010EB508, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_100E1F088);
  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_10002077C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100006204(&qword_1010EB508, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_100E1F088);
  return Error<>._code.getter(a1, v2);
}

uint64_t sub_1000207BC(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100006204(&qword_1010EB538, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_100E21CA4);
  return _BridgedStoredNSError._getEmbeddedNSError()(a1, v2);
}

uint64_t sub_1000207FC(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100006204(&qword_1010EB338, (uint64_t (*)(uint64_t))type metadata accessor for SPUnknownDiscoverySessionError, (uint64_t)&unk_100E1FC58);
  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_10002083C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100006204(&qword_1010EB338, (uint64_t (*)(uint64_t))type metadata accessor for SPUnknownDiscoverySessionError, (uint64_t)&unk_100E1FC58);
  return Error<>._code.getter(a1, v2);
}

uint64_t sub_10002087C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100006204(&qword_10111C340, (uint64_t (*)(uint64_t))type metadata accessor for SPUnknownDiscoverySessionError, (uint64_t)&unk_100E2135C);
  return _BridgedStoredNSError._getEmbeddedNSError()(a1, v2);
}

uint64_t sub_1000208BC(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100006204(&qword_1010EB370, (uint64_t (*)(uint64_t))type metadata accessor for SPTagSeparationError, (uint64_t)&unk_100E1FB2C);
  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_1000208FC(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100006204(&qword_1010EB370, (uint64_t (*)(uint64_t))type metadata accessor for SPTagSeparationError, (uint64_t)&unk_100E1FB2C);
  return Error<>._code.getter(a1, v2);
}

uint64_t sub_10002093C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100006204((unint64_t *)&qword_1010EB3A0, (uint64_t (*)(uint64_t))type metadata accessor for SPTagSeparationError, (uint64_t)&unk_100E2146C);
  return _BridgedStoredNSError._getEmbeddedNSError()(a1, v2);
}

uint64_t sub_10002097C(uint64_t a1, id *a2)
{
  uint64_t result;
  uint64_t v5;
  NSString v6;
  uint64_t v7;
  uint64_t v8;

  v7 = 0;
  v8 = 0;
  result = static String._forceBridgeFromObjectiveC(_:result:)(a1, &v7);
  v5 = v8;
  if (v8)
  {
    v6 = String._bridgeToObjectiveC()();
    result = swift_bridgeObjectRelease(v5);
  }
  else
  {
    v6 = 0;
  }
  *a2 = v6;
  return result;
}

uint64_t sub_1000209F0(uint64_t a1, id *a2)
{
  char v4;
  uint64_t v5;
  NSString v6;
  uint64_t v8;
  uint64_t v9;

  v8 = 0;
  v9 = 0;
  v4 = static String._conditionallyBridgeFromObjectiveC(_:result:)(a1, &v8);
  v5 = v9;
  if (v9)
  {
    v6 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v5);
  }
  else
  {
    v6 = 0;
  }
  *a2 = v6;
  return v4 & 1;
}

uint64_t sub_100020A6C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  NSString v5;
  uint64_t result;

  static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v4 = v3;
  v5 = String._bridgeToObjectiveC()();
  result = swift_bridgeObjectRelease(v4);
  *a2 = v5;
  return result;
}

Swift::Int sub_100020AAC()
{
  Swift::UInt *v0;
  Swift::UInt v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

Swift::Int sub_100020AF0()
{
  Swift::UInt *v0;
  Swift::UInt v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t sub_100020B30()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(SPPairingSessionErrorDomain);
}

uint64_t sub_100020B40(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100006204(&qword_1010EB450, (uint64_t (*)(uint64_t))type metadata accessor for SPPairingSessionError, (uint64_t)&unk_100E217DC);
  return _BridgedStoredNSError.errorCode.getter(a1, v2);
}

uint64_t sub_100020B80(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100006204(&qword_1010EB450, (uint64_t (*)(uint64_t))type metadata accessor for SPPairingSessionError, (uint64_t)&unk_100E217DC);
  return _BridgedStoredNSError.errorUserInfo.getter(a1, v2);
}

uint64_t sub_100020BC0(void *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100006204(&qword_1010EB450, (uint64_t (*)(uint64_t))type metadata accessor for SPPairingSessionError, (uint64_t)&unk_100E217DC);
  return _BridgedStoredNSError.init(_bridgedNSError:)(a1, a2, v4);
}

uint64_t sub_100020C24(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100006204(&qword_1010EB450, (uint64_t (*)(uint64_t))type metadata accessor for SPPairingSessionError, (uint64_t)&unk_100E217DC);
  return _BridgedStoredNSError.hash(into:)(a1, a2, v4);
}

uint64_t sub_100020C78()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(SPBeaconSharingErrorDomain);
}

uint64_t sub_100020C88(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100006204((unint64_t *)&qword_1010EB490, (uint64_t (*)(uint64_t))type metadata accessor for SPBeaconSharingError, (uint64_t)&unk_100E21930);
  return _BridgedStoredNSError.errorCode.getter(a1, v2);
}

uint64_t sub_100020CC8(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100006204((unint64_t *)&qword_1010EB490, (uint64_t (*)(uint64_t))type metadata accessor for SPBeaconSharingError, (uint64_t)&unk_100E21930);
  return _BridgedStoredNSError.errorUserInfo.getter(a1, v2);
}

uint64_t sub_100020D08(void *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100006204((unint64_t *)&qword_1010EB490, (uint64_t (*)(uint64_t))type metadata accessor for SPBeaconSharingError, (uint64_t)&unk_100E21930);
  return _BridgedStoredNSError.init(_bridgedNSError:)(a1, a2, v4);
}

uint64_t sub_100020D6C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100006204((unint64_t *)&qword_1010EB490, (uint64_t (*)(uint64_t))type metadata accessor for SPBeaconSharingError, (uint64_t)&unk_100E21930);
  return _BridgedStoredNSError.hash(into:)(a1, a2, v4);
}

void sub_100020DBC(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

_QWORD *sub_100020DC4@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 | *result;
  return result;
}

_QWORD *sub_100020DD8@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 & *result;
  return result;
}

_QWORD *sub_100020DEC@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 ^ *result;
  return result;
}

BOOL sub_100020E00(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = *v2 & *a2;
  if (v4 != *a2)
    *v2 |= v3;
  *a1 = v3;
  return v4 != v3;
}

_QWORD *sub_100020E30@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;

  v3 = *v2 & *result;
  if (v3)
    *v2 &= ~*result;
  *(_QWORD *)a2 = v3;
  *(_BYTE *)(a2 + 8) = v3 == 0;
  return result;
}

uint64_t *sub_100020E5C@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *result;
  v4 = *v2;
  *v2 |= *result;
  v5 = v4 & v3;
  *(_QWORD *)a2 = v5;
  *(_BYTE *)(a2 + 8) = v5 == 0;
  return result;
}

_QWORD *sub_100020E80(_QWORD *result)
{
  _QWORD *v1;

  *v1 |= *result;
  return result;
}

_QWORD *sub_100020E94(_QWORD *result)
{
  _QWORD *v1;

  *v1 &= *result;
  return result;
}

_QWORD *sub_100020EA8(_QWORD *result)
{
  _QWORD *v1;

  *v1 ^= *result;
  return result;
}

_QWORD *sub_100020EBC@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 & ~*result;
  return result;
}

BOOL sub_100020ED0(_QWORD *a1)
{
  _QWORD *v1;

  return (*v1 & ~*a1) == 0;
}

BOOL sub_100020EE4(_QWORD *a1)
{
  _QWORD *v1;

  return (*v1 & *a1) == 0;
}

BOOL sub_100020EF8(_QWORD *a1)
{
  _QWORD *v1;

  return (*a1 & ~*v1) == 0;
}

BOOL sub_100020F0C()
{
  _QWORD *v0;

  return *v0 == 0;
}

uint64_t sub_100020F1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return SetAlgebra.init<A>(_:)(a1, a4, a2, a5, a3);
}

_QWORD *sub_100020F34(_QWORD *result)
{
  _QWORD *v1;

  *v1 &= ~*result;
  return result;
}

uint64_t sub_100020F48()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(SPSecureLocationsErrorDomain);
}

uint64_t sub_100020F58(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100006204(&qword_1010F1590, (uint64_t (*)(uint64_t))type metadata accessor for SecureLocationsError, (uint64_t)&unk_100E2113C);
  return _BridgedStoredNSError.errorCode.getter(a1, v2);
}

uint64_t sub_100020F98(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100006204(&qword_1010F1590, (uint64_t (*)(uint64_t))type metadata accessor for SecureLocationsError, (uint64_t)&unk_100E2113C);
  return _BridgedStoredNSError.errorUserInfo.getter(a1, v2);
}

uint64_t sub_100020FD8(void *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100006204(&qword_1010F1590, (uint64_t (*)(uint64_t))type metadata accessor for SecureLocationsError, (uint64_t)&unk_100E2113C);
  return _BridgedStoredNSError.init(_bridgedNSError:)(a1, a2, v4);
}

uint64_t sub_10002103C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100006204(&qword_1010F1590, (uint64_t (*)(uint64_t))type metadata accessor for SecureLocationsError, (uint64_t)&unk_100E2113C);
  return _BridgedStoredNSError.hash(into:)(a1, a2, v4);
}

uint64_t sub_10002108C()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(SPFirmwareUpdateErrorDomain);
}

uint64_t sub_10002109C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100006204(&qword_1010EB190, (uint64_t (*)(uint64_t))type metadata accessor for FirmwareUpdateError, (uint64_t)&unk_100E20A38);
  return _BridgedStoredNSError.errorCode.getter(a1, v2);
}

uint64_t sub_1000210DC(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100006204(&qword_1010EB190, (uint64_t (*)(uint64_t))type metadata accessor for FirmwareUpdateError, (uint64_t)&unk_100E20A38);
  return _BridgedStoredNSError.errorUserInfo.getter(a1, v2);
}

uint64_t sub_10002111C(void *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100006204(&qword_1010EB190, (uint64_t (*)(uint64_t))type metadata accessor for FirmwareUpdateError, (uint64_t)&unk_100E20A38);
  return _BridgedStoredNSError.init(_bridgedNSError:)(a1, a2, v4);
}

uint64_t sub_100021180(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100006204(&qword_1010EB190, (uint64_t (*)(uint64_t))type metadata accessor for FirmwareUpdateError, (uint64_t)&unk_100E20A38);
  return _BridgedStoredNSError.hash(into:)(a1, a2, v4);
}

uint64_t sub_1000211D0()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(SPOwnerSessionErrorDomain);
}

uint64_t sub_1000211E0(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100006204(&qword_1010EB250, (uint64_t (*)(uint64_t))type metadata accessor for SPOwnerSessionError, (uint64_t)&unk_100E21DB4);
  return _BridgedStoredNSError.errorCode.getter(a1, v2);
}

uint64_t sub_100021220(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100006204(&qword_1010EB250, (uint64_t (*)(uint64_t))type metadata accessor for SPOwnerSessionError, (uint64_t)&unk_100E21DB4);
  return _BridgedStoredNSError.errorUserInfo.getter(a1, v2);
}

uint64_t sub_100021260(void *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100006204(&qword_1010EB250, (uint64_t (*)(uint64_t))type metadata accessor for SPOwnerSessionError, (uint64_t)&unk_100E21DB4);
  return _BridgedStoredNSError.init(_bridgedNSError:)(a1, a2, v4);
}

uint64_t sub_1000212C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100006204(&qword_1010EB250, (uint64_t (*)(uint64_t))type metadata accessor for SPOwnerSessionError, (uint64_t)&unk_100E21DB4);
  return _BridgedStoredNSError.hash(into:)(a1, a2, v4);
}

uint64_t sub_100021314()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(SPUnpairErrorDomain);
}

uint64_t sub_100021324(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100006204(&qword_1010EB3E0, (uint64_t (*)(uint64_t))type metadata accessor for UnpairError, (uint64_t)&unk_100E215BC);
  return _BridgedStoredNSError.errorCode.getter(a1, v2);
}

uint64_t sub_100021364(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100006204(&qword_1010EB3E0, (uint64_t (*)(uint64_t))type metadata accessor for UnpairError, (uint64_t)&unk_100E215BC);
  return _BridgedStoredNSError.errorUserInfo.getter(a1, v2);
}

uint64_t sub_1000213A4(void *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100006204(&qword_1010EB3E0, (uint64_t (*)(uint64_t))type metadata accessor for UnpairError, (uint64_t)&unk_100E215BC);
  return _BridgedStoredNSError.init(_bridgedNSError:)(a1, a2, v4);
}

uint64_t sub_100021408(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100006204(&qword_1010EB3E0, (uint64_t (*)(uint64_t))type metadata accessor for UnpairError, (uint64_t)&unk_100E215BC);
  return _BridgedStoredNSError.hash(into:)(a1, a2, v4);
}

uint64_t sub_100021458(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100006204(&qword_1010EB2C0, (uint64_t (*)(uint64_t))type metadata accessor for UpdateBatteryLevelError, (uint64_t)&unk_100E2102C);
  return _BridgedStoredNSError.errorCode.getter(a1, v2);
}

uint64_t sub_100021498(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100006204(&qword_1010EB2C0, (uint64_t (*)(uint64_t))type metadata accessor for UpdateBatteryLevelError, (uint64_t)&unk_100E2102C);
  return _BridgedStoredNSError.errorUserInfo.getter(a1, v2);
}

uint64_t sub_1000214D8(void *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100006204(&qword_1010EB2C0, (uint64_t (*)(uint64_t))type metadata accessor for UpdateBatteryLevelError, (uint64_t)&unk_100E2102C);
  return _BridgedStoredNSError.init(_bridgedNSError:)(a1, a2, v4);
}

uint64_t sub_10002153C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100006204(&qword_1010EB2C0, (uint64_t (*)(uint64_t))type metadata accessor for UpdateBatteryLevelError, (uint64_t)&unk_100E2102C);
  return _BridgedStoredNSError.hash(into:)(a1, a2, v4);
}

uint64_t sub_10002158C()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(SPCommandErrorDomain);
}

uint64_t sub_10002159C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100006204((unint64_t *)&unk_101102F60, (uint64_t (*)(uint64_t))type metadata accessor for CommandError, (uint64_t)&unk_100E21A40);
  return _BridgedStoredNSError.errorCode.getter(a1, v2);
}

uint64_t sub_1000215DC(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100006204((unint64_t *)&unk_101102F60, (uint64_t (*)(uint64_t))type metadata accessor for CommandError, (uint64_t)&unk_100E21A40);
  return _BridgedStoredNSError.errorUserInfo.getter(a1, v2);
}

uint64_t sub_10002161C(void *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100006204((unint64_t *)&unk_101102F60, (uint64_t (*)(uint64_t))type metadata accessor for CommandError, (uint64_t)&unk_100E21A40);
  return _BridgedStoredNSError.init(_bridgedNSError:)(a1, a2, v4);
}

uint64_t sub_100021680(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100006204((unint64_t *)&unk_101102F60, (uint64_t (*)(uint64_t))type metadata accessor for CommandError, (uint64_t)&unk_100E21A40);
  return _BridgedStoredNSError.hash(into:)(a1, a2, v4);
}

uint64_t sub_1000216D0()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(CKErrorDomain);
}

uint64_t sub_1000216E0(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100006204(&qword_1010EB538, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_100E21CA4);
  return _BridgedStoredNSError.errorCode.getter(a1, v2);
}

uint64_t sub_100021720(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100006204(&qword_1010EB538, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_100E21CA4);
  return _BridgedStoredNSError.errorUserInfo.getter(a1, v2);
}

uint64_t sub_100021760(void *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100006204(&qword_1010EB538, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_100E21CA4);
  return _BridgedStoredNSError.init(_bridgedNSError:)(a1, a2, v4);
}

uint64_t sub_1000217C4()
{
  id *v0;
  id v1;
  uint64_t v2;

  v1 = *v0;
  v2 = NSObject.hashValue.getter();

  return v2;
}

uint64_t sub_1000217F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100006204(&qword_1010EB538, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_100E21CA4);
  return _BridgedStoredNSError.hash(into:)(a1, a2, v4);
}

uint64_t sub_100021848()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(SPAccessoryDiscoveryAndPairingSessionErrorDomain);
}

uint64_t sub_100021858(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100006204(&qword_1010EB1C8, (uint64_t (*)(uint64_t))type metadata accessor for SPAccessoryDiscoverySessionError, (uint64_t)&unk_100E20B38);
  return _BridgedStoredNSError.errorCode.getter(a1, v2);
}

uint64_t sub_100021898(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100006204(&qword_1010EB1C8, (uint64_t (*)(uint64_t))type metadata accessor for SPAccessoryDiscoverySessionError, (uint64_t)&unk_100E20B38);
  return _BridgedStoredNSError.errorUserInfo.getter(a1, v2);
}

uint64_t sub_1000218D8(void *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100006204(&qword_1010EB1C8, (uint64_t (*)(uint64_t))type metadata accessor for SPAccessoryDiscoverySessionError, (uint64_t)&unk_100E20B38);
  return _BridgedStoredNSError.init(_bridgedNSError:)(a1, a2, v4);
}

uint64_t sub_10002193C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100006204(&qword_1010EB1C8, (uint64_t (*)(uint64_t))type metadata accessor for SPAccessoryDiscoverySessionError, (uint64_t)&unk_100E20B38);
  return _BridgedStoredNSError.hash(into:)(a1, a2, v4);
}

uint64_t sub_10002198C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100006204(&qword_1010EB330, (uint64_t (*)(uint64_t))type metadata accessor for SecureLocationsStewieError, (uint64_t)&unk_100E2124C);
  return _BridgedStoredNSError.errorCode.getter(a1, v2);
}

uint64_t sub_1000219CC(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100006204(&qword_1010EB330, (uint64_t (*)(uint64_t))type metadata accessor for SecureLocationsStewieError, (uint64_t)&unk_100E2124C);
  return _BridgedStoredNSError.errorUserInfo.getter(a1, v2);
}

uint64_t sub_100021A0C(void *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100006204(&qword_1010EB330, (uint64_t (*)(uint64_t))type metadata accessor for SecureLocationsStewieError, (uint64_t)&unk_100E2124C);
  return _BridgedStoredNSError.init(_bridgedNSError:)(a1, a2, v4);
}

uint64_t sub_100021A70(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100006204(&qword_1010EB330, (uint64_t (*)(uint64_t))type metadata accessor for SecureLocationsStewieError, (uint64_t)&unk_100E2124C);
  return _BridgedStoredNSError.hash(into:)(a1, a2, v4);
}

uint64_t sub_100021AC0()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(SPTrackingAvoidanceErrorDomain);
}

uint64_t sub_100021AD0(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100006204(&qword_1010EB200, (uint64_t (*)(uint64_t))type metadata accessor for TrackingAvoidanceError, (uint64_t)&unk_100E20C48);
  return _BridgedStoredNSError.errorCode.getter(a1, v2);
}

uint64_t sub_100021B10(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100006204(&qword_1010EB200, (uint64_t (*)(uint64_t))type metadata accessor for TrackingAvoidanceError, (uint64_t)&unk_100E20C48);
  return _BridgedStoredNSError.errorUserInfo.getter(a1, v2);
}

uint64_t sub_100021B50(void *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100006204(&qword_1010EB200, (uint64_t (*)(uint64_t))type metadata accessor for TrackingAvoidanceError, (uint64_t)&unk_100E20C48);
  return _BridgedStoredNSError.init(_bridgedNSError:)(a1, a2, v4);
}

uint64_t sub_100021BB4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100006204(&qword_1010EB200, (uint64_t (*)(uint64_t))type metadata accessor for TrackingAvoidanceError, (uint64_t)&unk_100E20C48);
  return _BridgedStoredNSError.hash(into:)(a1, a2, v4);
}

uint64_t sub_100021C04(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t WitnessTable;

  v4 = *a1;
  v5 = *a2;
  WitnessTable = swift_getWitnessTable(&unk_100E1F360, a3);
  return static _CFObject.== infix(_:_:)(v4, v5, a3, WitnessTable);
}

uint64_t sub_100021C50()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(SPCBPeripheralErrorDomain);
}

uint64_t sub_100021C60(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100006204(&qword_1010EB418, (uint64_t (*)(uint64_t))type metadata accessor for SPCBPeripheralError, (uint64_t)&unk_100E216CC);
  return _BridgedStoredNSError.errorCode.getter(a1, v2);
}

uint64_t sub_100021CA0(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100006204(&qword_1010EB418, (uint64_t (*)(uint64_t))type metadata accessor for SPCBPeripheralError, (uint64_t)&unk_100E216CC);
  return _BridgedStoredNSError.errorUserInfo.getter(a1, v2);
}

uint64_t sub_100021CE0(void *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100006204(&qword_1010EB418, (uint64_t (*)(uint64_t))type metadata accessor for SPCBPeripheralError, (uint64_t)&unk_100E216CC);
  return _BridgedStoredNSError.init(_bridgedNSError:)(a1, a2, v4);
}

uint64_t sub_100021D44(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100006204(&qword_1010EB418, (uint64_t (*)(uint64_t))type metadata accessor for SPCBPeripheralError, (uint64_t)&unk_100E216CC);
  return _BridgedStoredNSError.hash(into:)(a1, a2, v4);
}

uint64_t sub_100021D94()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(SPSeparationMonitoringErrorDomain);
}

uint64_t sub_100021DA4(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100006204(&qword_1010EB500, (uint64_t (*)(uint64_t))type metadata accessor for SPSeparationMonitoringError, (uint64_t)&unk_100E21B94);
  return _BridgedStoredNSError.errorCode.getter(a1, v2);
}

uint64_t sub_100021DE4(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100006204(&qword_1010EB500, (uint64_t (*)(uint64_t))type metadata accessor for SPSeparationMonitoringError, (uint64_t)&unk_100E21B94);
  return _BridgedStoredNSError.errorUserInfo.getter(a1, v2);
}

uint64_t sub_100021E24(void *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100006204(&qword_1010EB500, (uint64_t (*)(uint64_t))type metadata accessor for SPSeparationMonitoringError, (uint64_t)&unk_100E21B94);
  return _BridgedStoredNSError.init(_bridgedNSError:)(a1, a2, v4);
}

uint64_t sub_100021E88(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100006204(&qword_1010EB500, (uint64_t (*)(uint64_t))type metadata accessor for SPSeparationMonitoringError, (uint64_t)&unk_100E21B94);
  return _BridgedStoredNSError.hash(into:)(a1, a2, v4);
}

uint64_t sub_100021ED8()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(SPLocalFindableConnectionMaterialMonitoringSessionErrorDomain);
}

uint64_t sub_100021EE8(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100006204((unint64_t *)&qword_1010EB240, (uint64_t (*)(uint64_t))type metadata accessor for SPLocalFindableConnectionMaterialMonitoringSessionError, (uint64_t)&unk_100E20D8C);
  return _BridgedStoredNSError.errorCode.getter(a1, v2);
}

uint64_t sub_100021F28(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100006204((unint64_t *)&qword_1010EB240, (uint64_t (*)(uint64_t))type metadata accessor for SPLocalFindableConnectionMaterialMonitoringSessionError, (uint64_t)&unk_100E20D8C);
  return _BridgedStoredNSError.errorUserInfo.getter(a1, v2);
}

uint64_t sub_100021F68(void *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100006204((unint64_t *)&qword_1010EB240, (uint64_t (*)(uint64_t))type metadata accessor for SPLocalFindableConnectionMaterialMonitoringSessionError, (uint64_t)&unk_100E20D8C);
  return _BridgedStoredNSError.init(_bridgedNSError:)(a1, a2, v4);
}

uint64_t sub_100021FCC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100006204((unint64_t *)&qword_1010EB240, (uint64_t (*)(uint64_t))type metadata accessor for SPLocalFindableConnectionMaterialMonitoringSessionError, (uint64_t)&unk_100E20D8C);
  return _BridgedStoredNSError.hash(into:)(a1, a2, v4);
}

uint64_t sub_10002201C()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(SPBTFindingSessionErrorDomain);
}

uint64_t sub_10002202C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100006204(&qword_101116FB0, (uint64_t (*)(uint64_t))type metadata accessor for SPBTFindingSessionError, (uint64_t)&unk_100E20F1C);
  return _BridgedStoredNSError.errorCode.getter(a1, v2);
}

uint64_t sub_10002206C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100006204(&qword_101116FB0, (uint64_t (*)(uint64_t))type metadata accessor for SPBTFindingSessionError, (uint64_t)&unk_100E20F1C);
  return _BridgedStoredNSError.errorUserInfo.getter(a1, v2);
}

uint64_t sub_1000220AC(void *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100006204(&qword_101116FB0, (uint64_t (*)(uint64_t))type metadata accessor for SPBTFindingSessionError, (uint64_t)&unk_100E20F1C);
  return _BridgedStoredNSError.init(_bridgedNSError:)(a1, a2, v4);
}

uint64_t sub_100022110(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100006204(&qword_101116FB0, (uint64_t (*)(uint64_t))type metadata accessor for SPBTFindingSessionError, (uint64_t)&unk_100E20F1C);
  return _BridgedStoredNSError.hash(into:)(a1, a2, v4);
}

uint64_t sub_100022160()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(SPUnknownDiscoverySessionErrorDomain);
}

uint64_t sub_100022170(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100006204(&qword_10111C340, (uint64_t (*)(uint64_t))type metadata accessor for SPUnknownDiscoverySessionError, (uint64_t)&unk_100E2135C);
  return _BridgedStoredNSError.errorCode.getter(a1, v2);
}

uint64_t sub_1000221B0(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100006204(&qword_10111C340, (uint64_t (*)(uint64_t))type metadata accessor for SPUnknownDiscoverySessionError, (uint64_t)&unk_100E2135C);
  return _BridgedStoredNSError.errorUserInfo.getter(a1, v2);
}

uint64_t sub_1000221F0(void *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100006204(&qword_10111C340, (uint64_t (*)(uint64_t))type metadata accessor for SPUnknownDiscoverySessionError, (uint64_t)&unk_100E2135C);
  return _BridgedStoredNSError.init(_bridgedNSError:)(a1, a2, v4);
}

uint64_t sub_100022254(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100006204(&qword_10111C340, (uint64_t (*)(uint64_t))type metadata accessor for SPUnknownDiscoverySessionError, (uint64_t)&unk_100E2135C);
  return _BridgedStoredNSError.hash(into:)(a1, a2, v4);
}

uint64_t sub_1000222A4()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(SPTagSeparationErrorDomain);
}

uint64_t sub_1000222B4(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100006204((unint64_t *)&qword_1010EB3A0, (uint64_t (*)(uint64_t))type metadata accessor for SPTagSeparationError, (uint64_t)&unk_100E2146C);
  return _BridgedStoredNSError.errorCode.getter(a1, v2);
}

uint64_t sub_1000222F4(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100006204((unint64_t *)&qword_1010EB3A0, (uint64_t (*)(uint64_t))type metadata accessor for SPTagSeparationError, (uint64_t)&unk_100E2146C);
  return _BridgedStoredNSError.errorUserInfo.getter(a1, v2);
}

uint64_t sub_100022334(void *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100006204((unint64_t *)&qword_1010EB3A0, (uint64_t (*)(uint64_t))type metadata accessor for SPTagSeparationError, (uint64_t)&unk_100E2146C);
  return _BridgedStoredNSError.init(_bridgedNSError:)(a1, a2, v4);
}

uint64_t sub_100022398(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100006204((unint64_t *)&qword_1010EB3A0, (uint64_t (*)(uint64_t))type metadata accessor for SPTagSeparationError, (uint64_t)&unk_100E2146C);
  return _BridgedStoredNSError.hash(into:)(a1, a2, v4);
}

Swift::Int sub_1000223E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD v7[10];

  v7[9] = *v3;
  Hasher.init(_seed:)(v7);
  dispatch thunk of Hashable.hash(into:)(v7, a2, a3);
  return Hasher._finalize()();
}

uint64_t sub_100022444(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_100006204(&qword_1010EB450, (uint64_t (*)(uint64_t))type metadata accessor for SPPairingSessionError, (uint64_t)&unk_100E217DC);
  return static _BridgedStoredNSError.== infix(_:_:)(a1, a2, a3, v6);
}

uint64_t sub_10002249C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_100006204(&qword_101116A20, (uint64_t (*)(uint64_t))type metadata accessor for SPBeaconType, (uint64_t)&unk_100E1DEEC);
  v3 = sub_100006204((unint64_t *)&unk_1010EACB0, (uint64_t (*)(uint64_t))type metadata accessor for SPBeaconType, (uint64_t)&unk_100E1DE8C);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_100022520(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_100006204((unint64_t *)&qword_1010EB490, (uint64_t (*)(uint64_t))type metadata accessor for SPBeaconSharingError, (uint64_t)&unk_100E21930);
  return static _BridgedStoredNSError.== infix(_:_:)(a1, a2, a3, v6);
}

uint64_t sub_100022578(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_100006204(&qword_1010EB5A0, (uint64_t (*)(uint64_t))type metadata accessor for URLResourceKey, (uint64_t)&unk_100E218EC);
  v3 = sub_100006204(&qword_1010EB5A8, (uint64_t (*)(uint64_t))type metadata accessor for URLResourceKey, (uint64_t)&unk_100E1F520);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_1000225FC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_100006204(&qword_1010EACC8, (uint64_t (*)(uint64_t))type metadata accessor for SPServiceState, (uint64_t)&unk_100E1DBD4);
  v3 = sub_100006204(&qword_1010EACD0, (uint64_t (*)(uint64_t))type metadata accessor for SPServiceState, (uint64_t)&unk_100E1DB74);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_100022680(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_100006204(&qword_1010FF800, (uint64_t (*)(uint64_t))type metadata accessor for SPDisabledReason, (uint64_t)&unk_100E1DD2C);
  v3 = sub_100006204(&qword_1010EACC0, (uint64_t (*)(uint64_t))type metadata accessor for SPDisabledReason, (uint64_t)&unk_100E1DCCC);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_100022704(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_100006204(&qword_1010EB5C0, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_100E21E20);
  v3 = sub_100006204(&qword_1010EB5C8, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_100E1EC70);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_100022788@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = sub_1000234A0(a1);
  result = swift_bridgeObjectRelease();
  *a2 = v3;
  return result;
}

uint64_t sub_1000227C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_100006204(&qword_1010F1590, (uint64_t (*)(uint64_t))type metadata accessor for SecureLocationsError, (uint64_t)&unk_100E2113C);
  return static _BridgedStoredNSError.== infix(_:_:)(a1, a2, a3, v6);
}

uint64_t sub_10002281C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_100006204(&qword_1010EB5E0, (uint64_t (*)(uint64_t))type metadata accessor for SPFinderDisabledReason, (uint64_t)&unk_100E21EA8);
  v3 = sub_100006204(&qword_1010EB5E8, (uint64_t (*)(uint64_t))type metadata accessor for SPFinderDisabledReason, (uint64_t)&unk_100E1EA3C);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_1000228A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_100006204(&qword_1010EB190, (uint64_t (*)(uint64_t))type metadata accessor for FirmwareUpdateError, (uint64_t)&unk_100E20A38);
  return static _BridgedStoredNSError.== infix(_:_:)(a1, a2, a3, v6);
}

uint64_t sub_1000228F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_100006204(&qword_1010EB250, (uint64_t (*)(uint64_t))type metadata accessor for SPOwnerSessionError, (uint64_t)&unk_100E21DB4);
  return static _BridgedStoredNSError.== infix(_:_:)(a1, a2, a3, v6);
}

uint64_t sub_100022950(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_100006204(&qword_1010EB3E0, (uint64_t (*)(uint64_t))type metadata accessor for UnpairError, (uint64_t)&unk_100E215BC);
  return static _BridgedStoredNSError.== infix(_:_:)(a1, a2, a3, v6);
}

uint64_t sub_1000229A8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_100006204(&qword_1010EB5D0, (uint64_t (*)(uint64_t))type metadata accessor for SPBeaconTaskName, (uint64_t)&unk_100E21E64);
  v3 = sub_100006204(&qword_1010EB5D8, (uint64_t (*)(uint64_t))type metadata accessor for SPBeaconTaskName, (uint64_t)&unk_100E1EB50);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_100022A2C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_100006204(&qword_1010EB580, (uint64_t (*)(uint64_t))type metadata accessor for SPBeaconLocationSource, (uint64_t)&unk_100E20D48);
  v3 = sub_100006204(&qword_1010EB588, (uint64_t (*)(uint64_t))type metadata accessor for SPBeaconLocationSource, (uint64_t)&unk_100E203E8);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_100022AB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_100006204(&qword_1010EB2C0, (uint64_t (*)(uint64_t))type metadata accessor for UpdateBatteryLevelError, (uint64_t)&unk_100E2102C);
  return static _BridgedStoredNSError.== infix(_:_:)(a1, a2, a3, v6);
}

uint64_t sub_100022B08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_100006204((unint64_t *)&unk_101102F60, (uint64_t (*)(uint64_t))type metadata accessor for CommandError, (uint64_t)&unk_100E21A40);
  return static _BridgedStoredNSError.== infix(_:_:)(a1, a2, a3, v6);
}

uint64_t sub_100022B60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_100006204(&qword_1010EB538, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_100E21CA4);
  return static _BridgedStoredNSError.== infix(_:_:)(a1, a2, a3, v6);
}

BOOL sub_100022BB8(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

uint64_t sub_100022BCC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_100006204(&qword_1010EB1C8, (uint64_t (*)(uint64_t))type metadata accessor for SPAccessoryDiscoverySessionError, (uint64_t)&unk_100E20B38);
  return static _BridgedStoredNSError.== infix(_:_:)(a1, a2, a3, v6);
}

uint64_t sub_100022C24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_100006204(&qword_1010EB330, (uint64_t (*)(uint64_t))type metadata accessor for SecureLocationsStewieError, (uint64_t)&unk_100E2124C);
  return static _BridgedStoredNSError.== infix(_:_:)(a1, a2, a3, v6);
}

uint64_t sub_100022C7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_100006204(&qword_1010EB200, (uint64_t (*)(uint64_t))type metadata accessor for TrackingAvoidanceError, (uint64_t)&unk_100E20C48);
  return static _BridgedStoredNSError.== infix(_:_:)(a1, a2, a3, v6);
}

uint64_t sub_100022CD4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_100006204(&qword_1010EB5B0, (uint64_t (*)(uint64_t))type metadata accessor for FileProtectionType, (uint64_t)&unk_100E1EDE4);
  v3 = sub_100006204(&qword_1010EB5B8, (uint64_t (*)(uint64_t))type metadata accessor for FileProtectionType, (uint64_t)&unk_100E1ED84);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_100022D58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_100006204(&qword_1010EB418, (uint64_t (*)(uint64_t))type metadata accessor for SPCBPeripheralError, (uint64_t)&unk_100E216CC);
  return static _BridgedStoredNSError.== infix(_:_:)(a1, a2, a3, v6);
}

uint64_t sub_100022DB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_100006204(&qword_1010EB500, (uint64_t (*)(uint64_t))type metadata accessor for SPSeparationMonitoringError, (uint64_t)&unk_100E21B94);
  return static _BridgedStoredNSError.== infix(_:_:)(a1, a2, a3, v6);
}

uint64_t sub_100022E08()
{
  return sub_100006204(&qword_1010EAC28, (uint64_t (*)(uint64_t))type metadata accessor for CBCharacteristicProperties, (uint64_t)&unk_100E1D7E4);
}

uint64_t sub_100022E34()
{
  return sub_100006204(&qword_1010EAC30, (uint64_t (*)(uint64_t))type metadata accessor for CBCharacteristicProperties, (uint64_t)&unk_100E1D7B4);
}

uint64_t sub_100022E60()
{
  return sub_100006204(&qword_1010EAC38, (uint64_t (*)(uint64_t))type metadata accessor for CBCharacteristicProperties, (uint64_t)&unk_100E1D80C);
}

uint64_t sub_100022E8C()
{
  return sub_100006204(&qword_1010EAC40, (uint64_t (*)(uint64_t))type metadata accessor for CBCharacteristicProperties, (uint64_t)&unk_100E1D844);
}

uint64_t sub_100022EB8()
{
  return sub_100006204(&qword_1010EAC48, (uint64_t (*)(uint64_t))type metadata accessor for SPMotionActivityState, (uint64_t)&unk_100E1D988);
}

uint64_t sub_100022EE4()
{
  return sub_100006204(&qword_1010EAC50, (uint64_t (*)(uint64_t))type metadata accessor for SPSecureLocationPublishReason, (uint64_t)&unk_100E1DA34);
}

uint64_t sub_100022F10()
{
  return sub_100006204(&qword_1010EAC58, (uint64_t (*)(uint64_t))type metadata accessor for SPServiceState, (uint64_t)&unk_100E1DB38);
}

uint64_t sub_100022F3C()
{
  return sub_100006204(&qword_1010EAC60, (uint64_t (*)(uint64_t))type metadata accessor for SPServiceState, (uint64_t)&unk_100E1DB0C);
}

uint64_t sub_100022F68()
{
  return sub_100006204(&qword_1010EAC68, (uint64_t (*)(uint64_t))type metadata accessor for SPServiceState, (uint64_t)&unk_100E1DBA8);
}

uint64_t sub_100022F94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_100006204((unint64_t *)&qword_1010EB240, (uint64_t (*)(uint64_t))type metadata accessor for SPLocalFindableConnectionMaterialMonitoringSessionError, (uint64_t)&unk_100E20D8C);
  return static _BridgedStoredNSError.== infix(_:_:)(a1, a2, a3, v6);
}

uint64_t sub_100022FEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_100006204(&qword_101116FB0, (uint64_t (*)(uint64_t))type metadata accessor for SPBTFindingSessionError, (uint64_t)&unk_100E20F1C);
  return static _BridgedStoredNSError.== infix(_:_:)(a1, a2, a3, v6);
}

uint64_t sub_100023044(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_100006204(&qword_10111C340, (uint64_t (*)(uint64_t))type metadata accessor for SPUnknownDiscoverySessionError, (uint64_t)&unk_100E2135C);
  return static _BridgedStoredNSError.== infix(_:_:)(a1, a2, a3, v6);
}

uint64_t sub_10002309C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_100006204((unint64_t *)&qword_1010EB3A0, (uint64_t (*)(uint64_t))type metadata accessor for SPTagSeparationError, (uint64_t)&unk_100E2146C);
  return static _BridgedStoredNSError.== infix(_:_:)(a1, a2, a3, v6);
}

uint64_t sub_1000230F4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  NSString v4;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = String._bridgeToObjectiveC()();
  result = swift_bridgeObjectRelease(v3);
  *a2 = v4;
  return result;
}

uint64_t sub_100023138(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_100006204(&qword_1010EB590, (uint64_t (*)(uint64_t))type metadata accessor for CBConnectionEventMatchingOption, (uint64_t)&unk_100E2157C);
  v3 = sub_100006204(&qword_1010EB598, (uint64_t (*)(uint64_t))type metadata accessor for CBConnectionEventMatchingOption, (uint64_t)&unk_100E1F96C);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_1000231BC()
{
  return sub_100006204(&qword_1010EAC70, (uint64_t (*)(uint64_t))type metadata accessor for SPDisabledReason, (uint64_t)&unk_100E1DC90);
}

uint64_t sub_1000231E8()
{
  return sub_100006204(&qword_1010EAC78, (uint64_t (*)(uint64_t))type metadata accessor for SPDisabledReason, (uint64_t)&unk_100E1DC64);
}

uint64_t sub_100023214()
{
  return sub_100006204(&qword_1010EAC80, (uint64_t (*)(uint64_t))type metadata accessor for SPDisabledReason, (uint64_t)&unk_100E1DD00);
}

uint64_t sub_100023240()
{
  return sub_100006204(&qword_1010EAC88, (uint64_t (*)(uint64_t))type metadata accessor for SPBeaconType, (uint64_t)&unk_100E1DE50);
}

uint64_t sub_10002326C()
{
  return sub_100006204(&qword_1010EAC90, (uint64_t (*)(uint64_t))type metadata accessor for SPBeaconType, (uint64_t)&unk_100E1DE24);
}

uint64_t sub_100023298()
{
  return sub_100006204(&qword_1010EAC98, (uint64_t (*)(uint64_t))type metadata accessor for SPBeaconType, (uint64_t)&unk_100E1DEC0);
}

uint64_t sub_1000232C4()
{
  return sub_100006204((unint64_t *)&unk_1010EACA0, (uint64_t (*)(uint64_t))type metadata accessor for SPBTRSSIChannel, (uint64_t)&unk_100E1DFC0);
}

uint64_t sub_1000232F0(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v3);
  v7 = v6;
  v8 = a3(v5);
  swift_bridgeObjectRelease(v7);
  return v8;
}

uint64_t sub_10002332C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  v5 = v4;
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_10002336C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  Swift::Int v4;
  _QWORD v6[9];

  v1 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v0);
  v3 = v2;
  Hasher.init(_seed:)(v6);
  String.hash(into:)(v6, v1, v3);
  v4 = Hasher._finalize()();
  swift_bridgeObjectRelease(v3);
  return v4;
}

uint64_t sub_1000233DC(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  char v10;

  v2 = *a2;
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*a1);
  v5 = v4;
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  if (v3 == v6 && v5 == v7)
  {
    v10 = 1;
    v9 = v5;
  }
  else
  {
    v9 = v7;
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0);
  }
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v9);
  return v10 & 1;
}

uint64_t sub_100023468(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  int *v3;
  int v4;
  int v5;

  v1 = *(_QWORD *)(result + 16);
  if (!v1)
    return 0;
  v2 = result;
  LODWORD(result) = 0;
  v3 = (int *)(v2 + 32);
  do
  {
    v5 = *v3++;
    v4 = v5;
    if ((v5 & ~(_DWORD)result) == 0)
      v4 = 0;
    result = v4 | result;
    --v1;
  }
  while (v1);
  return result;
}

uint64_t sub_1000234A0(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return 0;
  result = 0;
  v4 = (uint64_t *)(a1 + 32);
  do
  {
    v6 = *v4++;
    v5 = v6;
    if ((v6 & ~result) == 0)
      v5 = 0;
    result |= v5;
    --v1;
  }
  while (v1);
  return result;
}

uint64_t *sub_1000234D8(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 - 8);
  if ((*(_DWORD *)(v3 + 80) & 0x20000) != 0)
  {
    v4 = swift_slowAlloc(*(_QWORD *)(v3 + 64), *(_DWORD *)(v3 + 80));
    *a2 = v4;
    return (uint64_t *)v4;
  }
  return a2;
}

void type metadata accessor for SecCertificate(uint64_t a1)
{
  sub_10001D3B4(a1, &qword_1010EADF8, (uint64_t)&unk_10104E710);
}

void type metadata accessor for SPSharingCircleType(uint64_t a1)
{
  sub_10001D3B4(a1, &qword_1010EAE00, (uint64_t)&unk_10104E740);
}

void type metadata accessor for SPShareType(uint64_t a1)
{
  sub_10001D3B4(a1, &qword_1010EAE08, (uint64_t)&unk_10104E768);
}

void type metadata accessor for SPRecordsTypeToDelete(uint64_t a1)
{
  sub_10001D3B4(a1, &qword_1010EAE10, (uint64_t)&unk_10104E790);
}

void type metadata accessor for FirmwareUpdateError(uint64_t a1)
{
  sub_10001D3B4(a1, &qword_1010EAE18, (uint64_t)&unk_10104E7B0);
}

void type metadata accessor for SPAccessoryPairingStatus(uint64_t a1)
{
  sub_10001D3B4(a1, &qword_1010EAE20, (uint64_t)&unk_10104E7D8);
}

void type metadata accessor for SPAccessoryDiscoverySessionError(uint64_t a1)
{
  sub_10001D3B4(a1, &qword_1010EAE28, (uint64_t)&unk_10104E7F8);
}

void type metadata accessor for TrackingAvoidanceError(uint64_t a1)
{
  sub_10001D3B4(a1, &qword_1010EAE30, (uint64_t)&unk_10104E820);
}

void type metadata accessor for SPBeaconLocationSource(uint64_t a1)
{
  sub_10001D3B4(a1, &qword_1010EAE38, (uint64_t)&unk_10104E848);
}

void type metadata accessor for CLFindMyAccessoryBatteryStatus(uint64_t a1)
{
  sub_10001D3B4(a1, &qword_1010EAE40, (uint64_t)&unk_10104E870);
}

void type metadata accessor for NotificationType(uint64_t a1)
{
  sub_10001D3B4(a1, &qword_1010EAE48, (uint64_t)&unk_10104E890);
}

void type metadata accessor for SPLocalFindableConnectionMaterialMonitoringSessionError(uint64_t a1)
{
  sub_10001D3B4(a1, &qword_1010EAE50, (uint64_t)&unk_10104E8B0);
}

void type metadata accessor for ShutdownReason(uint64_t a1)
{
  sub_10001D3B4(a1, &qword_1010EAE58, (uint64_t)&unk_10104E8D8);
}

void type metadata accessor for LocalBeaconManagerState(uint64_t a1)
{
  sub_10001D3B4(a1, &qword_1010EAE60, (uint64_t)&unk_10104E8F8);
}

void type metadata accessor for BeaconingKeyType(uint64_t a1)
{
  sub_10001D3B4(a1, &qword_1010EAE68, (uint64_t)&unk_10104E918);
}

void type metadata accessor for Code(uint64_t a1)
{
  sub_10001D3B4(a1, &qword_1010EAE70, (uint64_t)&unk_10104E938);
}

void type metadata accessor for SPBTFindingSessionError(uint64_t a1)
{
  sub_10001D3B4(a1, &qword_1010EAE78, (uint64_t)&unk_10104E958);
}

void type metadata accessor for UpdateBatteryLevelError(uint64_t a1)
{
  sub_10001D3B4(a1, &qword_1010EAE80, (uint64_t)&unk_10104E980);
}

void type metadata accessor for SecureLocationsError(uint64_t a1)
{
  sub_10001D3B4(a1, &qword_1010EAE88, (uint64_t)&unk_10104E9A8);
}

void type metadata accessor for SPUnknownDiscoverySessionError(uint64_t a1)
{
  sub_10001D3B4(a1, &qword_1010EAE98, (uint64_t)&unk_10104E9F8);
}

void type metadata accessor for SPTagSeparationError(uint64_t a1)
{
  sub_10001D3B4(a1, &qword_1010EAEA0, (uint64_t)&unk_10104EA20);
}

void type metadata accessor for SPSeparationEventType(uint64_t a1)
{
  sub_10001D3B4(a1, &qword_1010EAEA8, (uint64_t)&unk_10104EA48);
}

void type metadata accessor for IDSIDStatus(uint64_t a1)
{
  sub_10001D3B4(a1, &qword_1010EAEB0, (uint64_t)&unk_10104EA68);
}

void type metadata accessor for CBConnectionEventMatchingOption(uint64_t a1)
{
  sub_10001D3B4(a1, &qword_1010EAEB8, (uint64_t)&unk_10104EA88);
}

void type metadata accessor for UnpairError(uint64_t a1)
{
  sub_10001D3B4(a1, &qword_1010EAEC0, (uint64_t)&unk_10104EAB0);
}

void type metadata accessor for SPCBPeripheralError(uint64_t a1)
{
  sub_10001D3B4(a1, &qword_1010EAEC8, (uint64_t)&unk_10104EAD8);
}

void type metadata accessor for SPPairingSessionError(uint64_t a1)
{
  sub_10001D3B4(a1, &qword_1010EAED0, (uint64_t)&unk_10104EB00);
}

void type metadata accessor for URLResourceKey(uint64_t a1)
{
  sub_10001D3B4(a1, &qword_1010EAED8, (uint64_t)&unk_10104EB28);
}

void type metadata accessor for SPBeaconSharingError(uint64_t a1)
{
  sub_10001D3B4(a1, &qword_1010EAEE0, (uint64_t)&unk_10104EB50);
}

void type metadata accessor for CFError(uint64_t a1)
{
  sub_10001D3B4(a1, &qword_1010EAEE8, (uint64_t)&unk_10104EB78);
}

void type metadata accessor for CFString(uint64_t a1)
{
  sub_10001D3B4(a1, &qword_1010EAEF0, (uint64_t)&unk_10104EBA8);
}

void type metadata accessor for CommandError(uint64_t a1)
{
  sub_10001D3B4(a1, &qword_1010EAEF8, (uint64_t)&unk_10104EBD8);
}

void type metadata accessor for SPSeparationMonitoringError(uint64_t a1)
{
  sub_10001D3B4(a1, &qword_1010EAF00, (uint64_t)&unk_10104EC00);
}

void type metadata accessor for CFNotificationName(uint64_t a1)
{
  sub_10001D3B4(a1, &qword_1010EAF08, (uint64_t)&unk_10104EC28);
}

void type metadata accessor for CFNotificationCenter(uint64_t a1)
{
  sub_10001D3B4(a1, &qword_1010EAF10, (uint64_t)&unk_10104EC50);
}

void type metadata accessor for CKError(uint64_t a1)
{
  sub_10001D3B4(a1, &qword_1010EAF18, (uint64_t)&unk_10104EC80);
}

void type metadata accessor for SPOwnerSessionError(uint64_t a1)
{
  sub_10001D3B4(a1, &qword_1010EAF20, (uint64_t)&unk_10104ECA8);
}

void type metadata accessor for FileProtectionType(uint64_t a1)
{
  sub_10001D3B4(a1, &qword_1010EAF28, (uint64_t)&unk_10104ECD0);
}

void type metadata accessor for FileAttributeKey(uint64_t a1)
{
  sub_10001D3B4(a1, &qword_1010EAF30, (uint64_t)&unk_10104ECF8);
}

void type metadata accessor for SPBeaconTaskName(uint64_t a1)
{
  sub_10001D3B4(a1, &qword_1010EAF38, (uint64_t)&unk_10104ED20);
}

void type metadata accessor for SPFinderDisabledReason(uint64_t a1)
{
  sub_10001D3B4(a1, &qword_1010EAF40, (uint64_t)&unk_10104ED48);
}

void type metadata accessor for os_unfair_lock_s(uint64_t a1)
{
  sub_10001D3B4(a1, &qword_1010EAF48, (uint64_t)&unk_10104ED70);
}

uint64_t initializeBufferWithCopyOfBuffer for AccessorySoftwareInfo(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain(v2);
  return v3;
}

void *sub_100023890(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x1020uLL);
}

uint64_t sub_100023898(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 4128))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_1000238BC(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_OWORD *)(result + 4104) = 0u;
    *(_QWORD *)(result + 4120) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 4088) = 0u;
    *(_OWORD *)(result + 4072) = 0u;
    *(_OWORD *)(result + 4056) = 0u;
    *(_OWORD *)(result + 4040) = 0u;
    *(_OWORD *)(result + 4024) = 0u;
    *(_OWORD *)(result + 4008) = 0u;
    *(_OWORD *)(result + 3992) = 0u;
    *(_OWORD *)(result + 3976) = 0u;
    *(_OWORD *)(result + 3960) = 0u;
    *(_OWORD *)(result + 3944) = 0u;
    *(_OWORD *)(result + 3928) = 0u;
    *(_OWORD *)(result + 3912) = 0u;
    *(_OWORD *)(result + 3896) = 0u;
    *(_OWORD *)(result + 3880) = 0u;
    *(_OWORD *)(result + 3864) = 0u;
    *(_OWORD *)(result + 3848) = 0u;
    *(_OWORD *)(result + 3832) = 0u;
    *(_OWORD *)(result + 3816) = 0u;
    *(_OWORD *)(result + 3800) = 0u;
    *(_OWORD *)(result + 3784) = 0u;
    *(_OWORD *)(result + 3768) = 0u;
    *(_OWORD *)(result + 3752) = 0u;
    *(_OWORD *)(result + 3736) = 0u;
    *(_OWORD *)(result + 3720) = 0u;
    *(_OWORD *)(result + 3704) = 0u;
    *(_OWORD *)(result + 3688) = 0u;
    *(_OWORD *)(result + 3672) = 0u;
    *(_OWORD *)(result + 3656) = 0u;
    *(_OWORD *)(result + 3640) = 0u;
    *(_OWORD *)(result + 3624) = 0u;
    *(_OWORD *)(result + 3608) = 0u;
    *(_OWORD *)(result + 3592) = 0u;
    *(_OWORD *)(result + 3576) = 0u;
    *(_OWORD *)(result + 3560) = 0u;
    *(_OWORD *)(result + 3544) = 0u;
    *(_OWORD *)(result + 3528) = 0u;
    *(_OWORD *)(result + 3512) = 0u;
    *(_OWORD *)(result + 3496) = 0u;
    *(_OWORD *)(result + 3480) = 0u;
    *(_OWORD *)(result + 3464) = 0u;
    *(_OWORD *)(result + 3448) = 0u;
    *(_OWORD *)(result + 3432) = 0u;
    *(_OWORD *)(result + 3416) = 0u;
    *(_OWORD *)(result + 3400) = 0u;
    *(_OWORD *)(result + 3384) = 0u;
    *(_OWORD *)(result + 3368) = 0u;
    *(_OWORD *)(result + 3352) = 0u;
    *(_OWORD *)(result + 3336) = 0u;
    *(_OWORD *)(result + 3320) = 0u;
    *(_OWORD *)(result + 3304) = 0u;
    *(_OWORD *)(result + 3288) = 0u;
    *(_OWORD *)(result + 3272) = 0u;
    *(_OWORD *)(result + 3256) = 0u;
    *(_OWORD *)(result + 3240) = 0u;
    *(_OWORD *)(result + 3224) = 0u;
    *(_OWORD *)(result + 3208) = 0u;
    *(_OWORD *)(result + 3192) = 0u;
    *(_OWORD *)(result + 3176) = 0u;
    *(_OWORD *)(result + 3160) = 0u;
    *(_OWORD *)(result + 3144) = 0u;
    *(_OWORD *)(result + 3128) = 0u;
    *(_OWORD *)(result + 3112) = 0u;
    *(_OWORD *)(result + 3096) = 0u;
    *(_OWORD *)(result + 3080) = 0u;
    *(_OWORD *)(result + 3064) = 0u;
    *(_OWORD *)(result + 3048) = 0u;
    *(_OWORD *)(result + 3032) = 0u;
    *(_OWORD *)(result + 3016) = 0u;
    *(_OWORD *)(result + 3000) = 0u;
    *(_OWORD *)(result + 2984) = 0u;
    *(_OWORD *)(result + 2968) = 0u;
    *(_OWORD *)(result + 2952) = 0u;
    *(_OWORD *)(result + 2936) = 0u;
    *(_OWORD *)(result + 2920) = 0u;
    *(_OWORD *)(result + 2904) = 0u;
    *(_OWORD *)(result + 2888) = 0u;
    *(_OWORD *)(result + 2872) = 0u;
    *(_OWORD *)(result + 2856) = 0u;
    *(_OWORD *)(result + 2840) = 0u;
    *(_OWORD *)(result + 2824) = 0u;
    *(_OWORD *)(result + 2808) = 0u;
    *(_OWORD *)(result + 2792) = 0u;
    *(_OWORD *)(result + 2776) = 0u;
    *(_OWORD *)(result + 2760) = 0u;
    *(_OWORD *)(result + 2744) = 0u;
    *(_OWORD *)(result + 2728) = 0u;
    *(_OWORD *)(result + 2712) = 0u;
    *(_OWORD *)(result + 2696) = 0u;
    *(_OWORD *)(result + 2680) = 0u;
    *(_OWORD *)(result + 2664) = 0u;
    *(_OWORD *)(result + 2648) = 0u;
    *(_OWORD *)(result + 2632) = 0u;
    *(_OWORD *)(result + 2616) = 0u;
    *(_OWORD *)(result + 2600) = 0u;
    *(_OWORD *)(result + 2584) = 0u;
    *(_OWORD *)(result + 2568) = 0u;
    *(_OWORD *)(result + 2552) = 0u;
    *(_OWORD *)(result + 2536) = 0u;
    *(_OWORD *)(result + 2520) = 0u;
    *(_OWORD *)(result + 2504) = 0u;
    *(_OWORD *)(result + 2488) = 0u;
    *(_OWORD *)(result + 2472) = 0u;
    *(_OWORD *)(result + 2456) = 0u;
    *(_OWORD *)(result + 2440) = 0u;
    *(_OWORD *)(result + 2424) = 0u;
    *(_OWORD *)(result + 2408) = 0u;
    *(_OWORD *)(result + 2392) = 0u;
    *(_OWORD *)(result + 2376) = 0u;
    *(_OWORD *)(result + 2360) = 0u;
    *(_OWORD *)(result + 2344) = 0u;
    *(_OWORD *)(result + 2328) = 0u;
    *(_OWORD *)(result + 2312) = 0u;
    *(_OWORD *)(result + 2296) = 0u;
    *(_OWORD *)(result + 2280) = 0u;
    *(_OWORD *)(result + 2264) = 0u;
    *(_OWORD *)(result + 2248) = 0u;
    *(_OWORD *)(result + 2232) = 0u;
    *(_OWORD *)(result + 2216) = 0u;
    *(_OWORD *)(result + 2200) = 0u;
    *(_OWORD *)(result + 2184) = 0u;
    *(_OWORD *)(result + 2168) = 0u;
    *(_OWORD *)(result + 2152) = 0u;
    *(_OWORD *)(result + 2136) = 0u;
    *(_OWORD *)(result + 2120) = 0u;
    *(_OWORD *)(result + 2104) = 0u;
    *(_OWORD *)(result + 2088) = 0u;
    *(_OWORD *)(result + 2072) = 0u;
    *(_OWORD *)(result + 2056) = 0u;
    *(_OWORD *)(result + 2040) = 0u;
    *(_OWORD *)(result + 2024) = 0u;
    *(_OWORD *)(result + 2008) = 0u;
    *(_OWORD *)(result + 1992) = 0u;
    *(_OWORD *)(result + 1976) = 0u;
    *(_OWORD *)(result + 1960) = 0u;
    *(_OWORD *)(result + 1944) = 0u;
    *(_OWORD *)(result + 1928) = 0u;
    *(_OWORD *)(result + 1912) = 0u;
    *(_OWORD *)(result + 1896) = 0u;
    *(_OWORD *)(result + 1880) = 0u;
    *(_OWORD *)(result + 1864) = 0u;
    *(_OWORD *)(result + 1848) = 0u;
    *(_OWORD *)(result + 1832) = 0u;
    *(_OWORD *)(result + 1816) = 0u;
    *(_OWORD *)(result + 1800) = 0u;
    *(_OWORD *)(result + 1784) = 0u;
    *(_OWORD *)(result + 1768) = 0u;
    *(_OWORD *)(result + 1752) = 0u;
    *(_OWORD *)(result + 1736) = 0u;
    *(_OWORD *)(result + 1720) = 0u;
    *(_OWORD *)(result + 1704) = 0u;
    *(_OWORD *)(result + 1688) = 0u;
    *(_OWORD *)(result + 1672) = 0u;
    *(_OWORD *)(result + 1656) = 0u;
    *(_OWORD *)(result + 1640) = 0u;
    *(_OWORD *)(result + 1624) = 0u;
    *(_OWORD *)(result + 1608) = 0u;
    *(_OWORD *)(result + 1592) = 0u;
    *(_OWORD *)(result + 1576) = 0u;
    *(_OWORD *)(result + 1560) = 0u;
    *(_OWORD *)(result + 1544) = 0u;
    *(_OWORD *)(result + 1528) = 0u;
    *(_OWORD *)(result + 1512) = 0u;
    *(_OWORD *)(result + 1496) = 0u;
    *(_OWORD *)(result + 1480) = 0u;
    *(_OWORD *)(result + 1464) = 0u;
    *(_OWORD *)(result + 1448) = 0u;
    *(_OWORD *)(result + 1432) = 0u;
    *(_OWORD *)(result + 1416) = 0u;
    *(_OWORD *)(result + 1400) = 0u;
    *(_OWORD *)(result + 1384) = 0u;
    *(_OWORD *)(result + 1368) = 0u;
    *(_OWORD *)(result + 1352) = 0u;
    *(_OWORD *)(result + 1336) = 0u;
    *(_OWORD *)(result + 1320) = 0u;
    *(_OWORD *)(result + 1304) = 0u;
    *(_OWORD *)(result + 1288) = 0u;
    *(_OWORD *)(result + 1272) = 0u;
    *(_OWORD *)(result + 1256) = 0u;
    *(_OWORD *)(result + 1240) = 0u;
    *(_OWORD *)(result + 1224) = 0u;
    *(_OWORD *)(result + 1208) = 0u;
    *(_OWORD *)(result + 1192) = 0u;
    *(_OWORD *)(result + 1176) = 0u;
    *(_OWORD *)(result + 1160) = 0u;
    *(_OWORD *)(result + 1144) = 0u;
    *(_OWORD *)(result + 1128) = 0u;
    *(_OWORD *)(result + 1112) = 0u;
    *(_OWORD *)(result + 1096) = 0u;
    *(_OWORD *)(result + 1080) = 0u;
    *(_OWORD *)(result + 1064) = 0u;
    *(_OWORD *)(result + 1048) = 0u;
    *(_OWORD *)(result + 1032) = 0u;
    *(_OWORD *)(result + 1016) = 0u;
    *(_OWORD *)(result + 1000) = 0u;
    *(_OWORD *)(result + 984) = 0u;
    *(_OWORD *)(result + 968) = 0u;
    *(_OWORD *)(result + 952) = 0u;
    *(_OWORD *)(result + 936) = 0u;
    *(_OWORD *)(result + 920) = 0u;
    *(_OWORD *)(result + 904) = 0u;
    *(_OWORD *)(result + 888) = 0u;
    *(_OWORD *)(result + 872) = 0u;
    *(_OWORD *)(result + 856) = 0u;
    *(_OWORD *)(result + 840) = 0u;
    *(_OWORD *)(result + 824) = 0u;
    *(_OWORD *)(result + 808) = 0u;
    *(_OWORD *)(result + 792) = 0u;
    *(_OWORD *)(result + 776) = 0u;
    *(_OWORD *)(result + 760) = 0u;
    *(_OWORD *)(result + 744) = 0u;
    *(_OWORD *)(result + 728) = 0u;
    *(_OWORD *)(result + 712) = 0u;
    *(_OWORD *)(result + 696) = 0u;
    *(_OWORD *)(result + 680) = 0u;
    *(_OWORD *)(result + 664) = 0u;
    *(_OWORD *)(result + 648) = 0u;
    *(_OWORD *)(result + 632) = 0u;
    *(_OWORD *)(result + 616) = 0u;
    *(_OWORD *)(result + 600) = 0u;
    *(_OWORD *)(result + 584) = 0u;
    *(_OWORD *)(result + 568) = 0u;
    *(_OWORD *)(result + 552) = 0u;
    *(_OWORD *)(result + 536) = 0u;
    *(_OWORD *)(result + 520) = 0u;
    *(_OWORD *)(result + 504) = 0u;
    *(_OWORD *)(result + 488) = 0u;
    *(_OWORD *)(result + 472) = 0u;
    *(_OWORD *)(result + 456) = 0u;
    *(_OWORD *)(result + 440) = 0u;
    *(_OWORD *)(result + 424) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 4128) = v3;
  return result;
}

void type metadata accessor for _sp_key_index_map(uint64_t a1)
{
  sub_10001D3B4(a1, &qword_1010EAF50, (uint64_t)&unk_10104EDF0);
}

__n128 sub_100023D4C(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

void type metadata accessor for _sp_key_subsequence(uint64_t a1)
{
  sub_10001D3B4(a1, &qword_1010EAF58, (uint64_t)&unk_10104EE70);
}

uint64_t sub_100023D6C()
{
  return sub_100006204(&qword_1010EAF68, (uint64_t (*)(uint64_t))type metadata accessor for SPSimpleBeaconProperty, (uint64_t)&unk_100E1E868);
}

uint64_t sub_100023D98()
{
  return sub_100006204(&qword_1010EAF70, (uint64_t (*)(uint64_t))type metadata accessor for SPSimpleBeaconProperty, (uint64_t)&unk_100E1E838);
}

uint64_t sub_100023DC4()
{
  return sub_100006204(&qword_1010EAF78, (uint64_t (*)(uint64_t))type metadata accessor for SPSimpleBeaconProperty, (uint64_t)&unk_100E1E890);
}

uint64_t sub_100023DF0()
{
  return sub_100006204(&qword_1010EAF80, (uint64_t (*)(uint64_t))type metadata accessor for SPSimpleBeaconProperty, (uint64_t)&unk_100E1E8C8);
}

uint64_t sub_100023E1C()
{
  return sub_100006204(&qword_1010EAF88, (uint64_t (*)(uint64_t))type metadata accessor for SPFinderDisabledReason, (uint64_t)&unk_100E1EA00);
}

uint64_t sub_100023E48()
{
  return sub_100006204(&qword_1010EAF90, (uint64_t (*)(uint64_t))type metadata accessor for SPFinderDisabledReason, (uint64_t)&unk_100E1E9D4);
}

uint64_t sub_100023E74()
{
  return sub_100006204(&qword_1010EAF98, (uint64_t (*)(uint64_t))type metadata accessor for SPBeaconTaskName, (uint64_t)&unk_100E1EB14);
}

uint64_t sub_100023EA0()
{
  return sub_100006204(&qword_1010EAFA0, (uint64_t (*)(uint64_t))type metadata accessor for SPBeaconTaskName, (uint64_t)&unk_100E1EAE8);
}

uint64_t sub_100023ECC()
{
  return sub_100006204(&qword_1010EAFA8, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_100E1EC34);
}

uint64_t sub_100023EF8()
{
  return sub_100006204(&qword_1010EAFB0, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_100E1EC08);
}

uint64_t sub_100023F24()
{
  return sub_100006204(&qword_1010EAFB8, (uint64_t (*)(uint64_t))type metadata accessor for FileProtectionType, (uint64_t)&unk_100E1ED48);
}

uint64_t sub_100023F50()
{
  return sub_100006204(&qword_1010EAFC0, (uint64_t (*)(uint64_t))type metadata accessor for FileProtectionType, (uint64_t)&unk_100E1ED1C);
}

uint64_t sub_100023F7C()
{
  return sub_100006204(&qword_1010EAFC8, (uint64_t (*)(uint64_t))type metadata accessor for FileProtectionType, (uint64_t)&unk_100E1EDB8);
}

uint64_t sub_100023FA8()
{
  return sub_100006204(&qword_1010EAFD0, (uint64_t (*)(uint64_t))type metadata accessor for SPOwnerSessionError, (uint64_t)&unk_100E1EE74);
}

uint64_t sub_100023FD4()
{
  return sub_100006204(&qword_1010EAFD8, (uint64_t (*)(uint64_t))type metadata accessor for SPOwnerSessionError, (uint64_t)&unk_100E1EEA0);
}

uint64_t sub_100024000()
{
  return sub_100006204(&qword_1010EAFE0, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_100E1EFA0);
}

uint64_t sub_10002402C()
{
  return sub_100006204(&qword_1010EAFE8, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_100E1EFCC);
}

uint64_t sub_100024058()
{
  return sub_100006204((unint64_t *)&unk_1010EAFF0, (uint64_t (*)(uint64_t))type metadata accessor for SPSeparationMonitoringError, (uint64_t)&unk_100E1F0CC);
}

uint64_t sub_100024084()
{
  return sub_100006204(&qword_101106EA0, (uint64_t (*)(uint64_t))type metadata accessor for SPSeparationMonitoringError, (uint64_t)&unk_100E21B50);
}

uint64_t sub_1000240B0()
{
  return sub_100006204(&qword_1010EB000, (uint64_t (*)(uint64_t))type metadata accessor for CommandError, (uint64_t)aM);
}

uint64_t sub_1000240DC()
{
  return sub_100006204(&qword_1010EB008, (uint64_t (*)(uint64_t))type metadata accessor for CommandError, (uint64_t)&unk_100E1F1E0);
}

uint64_t sub_100024108()
{
  return sub_100006204(&qword_1010EB010, (uint64_t (*)(uint64_t))type metadata accessor for CFString, (uint64_t)&unk_100E1F2F0);
}

uint64_t sub_100024134()
{
  return sub_100006204(&qword_1010EB018, (uint64_t (*)(uint64_t))type metadata accessor for CFString, (uint64_t)&unk_100E1F31C);
}

uint64_t sub_100024160()
{
  return sub_100006204(&qword_1010EB020, (uint64_t (*)(uint64_t))type metadata accessor for SPBeaconSharingError, (uint64_t)&unk_100E1F38C);
}

uint64_t sub_10002418C()
{
  return sub_100006204(&qword_1010EB028, (uint64_t (*)(uint64_t))type metadata accessor for SPBeaconSharingError, (uint64_t)&unk_100E1F3B8);
}

uint64_t sub_1000241B8()
{
  return sub_100006204(&qword_1010EB030, (uint64_t (*)(uint64_t))type metadata accessor for URLResourceKey, (uint64_t)&unk_100E1F4E4);
}

uint64_t sub_1000241E4()
{
  return sub_100006204(&qword_1010EB038, (uint64_t (*)(uint64_t))type metadata accessor for URLResourceKey, (uint64_t)&unk_100E1F4B8);
}

uint64_t sub_100024210()
{
  return sub_100006204(&qword_1010EB040, (uint64_t (*)(uint64_t))type metadata accessor for SPPairingSessionError, (uint64_t)&unk_100E1F5CC);
}

uint64_t sub_10002423C()
{
  return sub_100006204(&qword_1010EB048, (uint64_t (*)(uint64_t))type metadata accessor for SPPairingSessionError, (uint64_t)&unk_100E20E9C);
}

uint64_t sub_100024268()
{
  return sub_100006204(&qword_1010EB050, (uint64_t (*)(uint64_t))type metadata accessor for SPCBPeripheralError, (uint64_t)&unk_100E1F6B4);
}

uint64_t sub_100024294()
{
  return sub_100006204(&qword_1010EB058, (uint64_t (*)(uint64_t))type metadata accessor for SPCBPeripheralError, (uint64_t)&unk_100E1F6E0);
}

uint64_t sub_1000242C0()
{
  return sub_100006204(&qword_1010EB060, (uint64_t (*)(uint64_t))type metadata accessor for UnpairError, (uint64_t)&unk_100E1F7E0);
}

uint64_t sub_1000242EC()
{
  return sub_100006204(&qword_1010EB068, (uint64_t (*)(uint64_t))type metadata accessor for UnpairError, (uint64_t)&unk_100E1F80C);
}

uint64_t sub_100024318()
{
  return sub_100006204(&qword_1010EB070, (uint64_t (*)(uint64_t))type metadata accessor for CBConnectionEventMatchingOption, (uint64_t)&unk_100E1F934);
}

uint64_t sub_100024344()
{
  return sub_100006204(&qword_1010EB078, (uint64_t (*)(uint64_t))type metadata accessor for CBConnectionEventMatchingOption, (uint64_t)&unk_100E1F90C);
}

uint64_t sub_100024370()
{
  return sub_100006204(&qword_1010EB080, (uint64_t (*)(uint64_t))type metadata accessor for SPTagSeparationError, (uint64_t)&unk_100E1FA44);
}

uint64_t sub_10002439C()
{
  return sub_100006204(&qword_1010EB088, (uint64_t (*)(uint64_t))type metadata accessor for SPTagSeparationError, (uint64_t)&unk_100E1FA70);
}

uint64_t sub_1000243C8()
{
  return sub_100006204(&qword_1010EB090, (uint64_t (*)(uint64_t))type metadata accessor for SPUnknownDiscoverySessionError, (uint64_t)&unk_100E1FB70);
}

uint64_t sub_1000243F4()
{
  return sub_100006204(&qword_1010EB098, (uint64_t (*)(uint64_t))type metadata accessor for SPUnknownDiscoverySessionError, (uint64_t)&unk_100E1FB9C);
}

uint64_t sub_100024420()
{
  return sub_100006204(&qword_1010EB0A0, (uint64_t (*)(uint64_t))type metadata accessor for SecureLocationsStewieError, (uint64_t)&unk_100E1FC9C);
}

uint64_t sub_10002444C()
{
  return sub_100006204(&qword_1010EB0A8, (uint64_t (*)(uint64_t))type metadata accessor for SecureLocationsStewieError, (uint64_t)&unk_100E1FCC8);
}

uint64_t sub_100024478()
{
  return sub_100006204(&qword_1010EB0B0, (uint64_t (*)(uint64_t))type metadata accessor for SecureLocationsError, (uint64_t)&unk_100E1FDC8);
}

uint64_t sub_1000244A4()
{
  return sub_100006204(&qword_1010EB0B8, (uint64_t (*)(uint64_t))type metadata accessor for SecureLocationsError, (uint64_t)&unk_100E1FDF4);
}

uint64_t sub_1000244D0()
{
  return sub_100006204(&qword_1010EB0C0, (uint64_t (*)(uint64_t))type metadata accessor for UpdateBatteryLevelError, (uint64_t)&unk_100E1FEF4);
}

uint64_t sub_1000244FC()
{
  return sub_100006204(&qword_1010EB0C8, (uint64_t (*)(uint64_t))type metadata accessor for UpdateBatteryLevelError, (uint64_t)&unk_100E1FF20);
}

uint64_t sub_100024528()
{
  return sub_100006204(&qword_1010EB0D0, (uint64_t (*)(uint64_t))type metadata accessor for SPBTFindingSessionError, (uint64_t)&unk_100E20020);
}

uint64_t sub_100024554()
{
  return sub_100006204(&qword_1010EB0D8, (uint64_t (*)(uint64_t))type metadata accessor for SPBTFindingSessionError, (uint64_t)&unk_100E2004C);
}

uint64_t sub_100024580()
{
  return sub_100006204(&qword_1010EB0E0, (uint64_t (*)(uint64_t))type metadata accessor for ShutdownReason, (uint64_t)&unk_100E201F4);
}

uint64_t sub_1000245AC()
{
  return sub_100006204(&qword_1010EB0E8, (uint64_t (*)(uint64_t))type metadata accessor for SPLocalFindableConnectionMaterialMonitoringSessionError, (uint64_t)&unk_100E20254);
}

uint64_t sub_1000245D8()
{
  return sub_100006204(&qword_1010EB0F0, (uint64_t (*)(uint64_t))type metadata accessor for SPLocalFindableConnectionMaterialMonitoringSessionError, (uint64_t)&unk_100E20280);
}

uint64_t sub_100024604()
{
  return sub_100006204(&qword_1010EB0F8, (uint64_t (*)(uint64_t))type metadata accessor for SPBeaconLocationSource, (uint64_t)&unk_100E203AC);
}

uint64_t sub_100024630()
{
  return sub_100006204(&qword_1010EB100, (uint64_t (*)(uint64_t))type metadata accessor for SPBeaconLocationSource, (uint64_t)&unk_100E20380);
}

uint64_t sub_10002465C()
{
  return sub_100006204(&qword_1010EB108, (uint64_t (*)(uint64_t))type metadata accessor for TrackingAvoidanceError, (uint64_t)&unk_100E20494);
}

uint64_t sub_100024688()
{
  return sub_100006204(&qword_1010EB110, (uint64_t (*)(uint64_t))type metadata accessor for TrackingAvoidanceError, (uint64_t)&unk_100E204BC);
}

uint64_t sub_1000246B4()
{
  return sub_100006204(&qword_1010EB118, (uint64_t (*)(uint64_t))type metadata accessor for SPAccessoryDiscoverySessionError, (uint64_t)&unk_100E205AC);
}

uint64_t sub_1000246E0()
{
  return sub_100006204(&qword_1010EB120, (uint64_t (*)(uint64_t))type metadata accessor for SPAccessoryDiscoverySessionError, (uint64_t)&unk_100E205D8);
}

uint64_t sub_10002470C()
{
  return sub_100006204(&qword_1010EB128, (uint64_t (*)(uint64_t))type metadata accessor for FirmwareUpdateError, (uint64_t)&unk_100E20714);
}

uint64_t sub_100024738()
{
  return sub_100006204(&qword_1010EB130, (uint64_t (*)(uint64_t))type metadata accessor for FirmwareUpdateError, (uint64_t)&unk_100E2073C);
}

uint64_t sub_100024764()
{
  return sub_100006204(&qword_1010EB138, (uint64_t (*)(uint64_t))type metadata accessor for SPShareType, (uint64_t)&unk_100E20860);
}

uint64_t sub_100024790()
{
  return sub_100006204(&qword_1010EB140, (uint64_t (*)(uint64_t))type metadata accessor for SPShareType, (uint64_t)&unk_100E2082C);
}

uint64_t sub_1000247BC()
{
  return sub_100006204(&qword_1010EB148, (uint64_t (*)(uint64_t))type metadata accessor for SPShareType, (uint64_t)&unk_100E2088C);
}

uint64_t sub_1000247E8()
{
  return sub_100006204(&qword_1010EB150, (uint64_t (*)(uint64_t))type metadata accessor for SPShareType, (uint64_t)&unk_100E208C8);
}

uint64_t sub_100024814()
{
  return sub_100006204(&qword_1010EB158, (uint64_t (*)(uint64_t))type metadata accessor for FirmwareUpdateError, (uint64_t)&unk_100E207EC);
}

uint64_t sub_100024840()
{
  return sub_100006204(&qword_1010EB160, (uint64_t (*)(uint64_t))type metadata accessor for FirmwareUpdateError, (uint64_t)&unk_100E207BC);
}

uint64_t sub_10002486C()
{
  return sub_100006204(&qword_1010EB168, (uint64_t (*)(uint64_t))type metadata accessor for FirmwareUpdateError, (uint64_t)&unk_100E2077C);
}

uint64_t sub_100024898()
{
  return sub_100006204(&qword_1010EB170, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_16, (uint64_t)&unk_100E20AD8);
}

void _s3__C4CodeOMa_16(uint64_t a1)
{
  sub_10001D3B4(a1, &qword_1010EB670, (uint64_t)&unk_10104F0C0);
}

uint64_t sub_1000248D8()
{
  return sub_100006204(&qword_1010EB178, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_16, (uint64_t)&unk_100E20AA0);
}

unint64_t sub_100024908()
{
  unint64_t result;

  result = qword_1010EB180;
  if (!qword_1010EB180)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Int, &type metadata for Int);
    atomic_store(result, (unint64_t *)&qword_1010EB180);
  }
  return result;
}

uint64_t sub_10002494C()
{
  return sub_100006204(&qword_1010EB188, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_16, (uint64_t)&unk_100E20B10);
}

uint64_t sub_100024978()
{
  return sub_100006204(&qword_1010EB190, (uint64_t (*)(uint64_t))type metadata accessor for FirmwareUpdateError, (uint64_t)&unk_100E20A38);
}

uint64_t sub_1000249A4()
{
  return sub_100006204(&qword_1010EB198, (uint64_t (*)(uint64_t))type metadata accessor for SPAccessoryDiscoverySessionError, (uint64_t)&unk_100E20694);
}

uint64_t sub_1000249D0()
{
  return sub_100006204(&qword_1010EB1A0, (uint64_t (*)(uint64_t))type metadata accessor for SPAccessoryDiscoverySessionError, (uint64_t)&unk_100E20660);
}

uint64_t sub_1000249FC()
{
  return sub_100006204(&qword_1010EB1A8, (uint64_t (*)(uint64_t))type metadata accessor for SPAccessoryDiscoverySessionError, (uint64_t)&unk_100E2061C);
}

uint64_t sub_100024A28()
{
  return sub_100006204(&qword_1010EB1B0, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_15, (uint64_t)&unk_100E20BE0);
}

void _s3__C4CodeOMa_15(uint64_t a1)
{
  sub_10001D3B4(a1, &qword_1010EB668, (uint64_t)&unk_10104F0A0);
}

uint64_t sub_100024A68()
{
  return sub_100006204(&qword_1010EB1B8, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_15, (uint64_t)&unk_100E20BA4);
}

uint64_t sub_100024A94()
{
  return sub_100006204(&qword_1010EB1C0, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_15, (uint64_t)&unk_100E20C1C);
}

uint64_t sub_100024AC0()
{
  return sub_100006204(&qword_1010EB1C8, (uint64_t (*)(uint64_t))type metadata accessor for SPAccessoryDiscoverySessionError, (uint64_t)&unk_100E20B38);
}

uint64_t sub_100024AEC()
{
  return sub_100006204(&qword_1010EB1D0, (uint64_t (*)(uint64_t))type metadata accessor for TrackingAvoidanceError, (uint64_t)&unk_100E2056C);
}

uint64_t sub_100024B18()
{
  return sub_100006204(&qword_1010EB1D8, (uint64_t (*)(uint64_t))type metadata accessor for TrackingAvoidanceError, (uint64_t)&unk_100E2053C);
}

uint64_t sub_100024B44()
{
  return sub_100006204(&qword_1010EB1E0, (uint64_t (*)(uint64_t))type metadata accessor for TrackingAvoidanceError, (uint64_t)&unk_100E204FC);
}

uint64_t sub_100024B70()
{
  return sub_100006204(&qword_1010EB1E8, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_14, (uint64_t)&unk_100E20CE8);
}

void _s3__C4CodeOMa_14(uint64_t a1)
{
  sub_10001D3B4(a1, &qword_1010EB660, (uint64_t)&unk_10104F080);
}

uint64_t sub_100024BB0()
{
  return sub_100006204(&qword_1010EB1F0, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_14, (uint64_t)&unk_100E20CB0);
}

uint64_t sub_100024BDC()
{
  return sub_100006204(&qword_1010EB1F8, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_14, (uint64_t)&unk_100E20D20);
}

uint64_t sub_100024C08()
{
  return sub_100006204(&qword_1010EB200, (uint64_t (*)(uint64_t))type metadata accessor for TrackingAvoidanceError, (uint64_t)&unk_100E20C48);
}

uint64_t sub_100024C34()
{
  return sub_100006204(&qword_1010EB208, (uint64_t (*)(uint64_t))type metadata accessor for SPBeaconLocationSource, (uint64_t)&unk_100E2041C);
}

uint64_t sub_100024C60()
{
  return sub_100006204(&qword_1010EB210, (uint64_t (*)(uint64_t))type metadata accessor for SPLocalFindableConnectionMaterialMonitoringSessionError, (uint64_t)&unk_100E2033C);
}

uint64_t sub_100024C8C()
{
  return sub_100006204(&qword_1010EB218, (uint64_t (*)(uint64_t))type metadata accessor for SPLocalFindableConnectionMaterialMonitoringSessionError, (uint64_t)&unk_100E20308);
}

uint64_t sub_100024CB8()
{
  return sub_100006204(&qword_1010EB220, (uint64_t (*)(uint64_t))type metadata accessor for SPLocalFindableConnectionMaterialMonitoringSessionError, (uint64_t)&unk_100E202C4);
}

uint64_t sub_100024CE4()
{
  return sub_100006204(&qword_1010EB228, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_13, (uint64_t)&unk_100E20E34);
}

void _s3__C4CodeOMa_13(uint64_t a1)
{
  sub_10001D3B4(a1, &qword_1010EB658, (uint64_t)&unk_10104F060);
}

uint64_t sub_100024D24()
{
  return sub_100006204(&qword_1010EB230, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_13, (uint64_t)&unk_100E20DF8);
}

uint64_t sub_100024D50()
{
  return sub_100006204(&qword_1010EB238, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_13, (uint64_t)&unk_100E20E70);
}

uint64_t sub_100024D7C()
{
  return sub_100006204((unint64_t *)&qword_1010EB240, (uint64_t (*)(uint64_t))type metadata accessor for SPLocalFindableConnectionMaterialMonitoringSessionError, (uint64_t)&unk_100E20D8C);
}

uint64_t sub_100024DA8()
{
  return sub_100006204(&qword_1010EB248, (uint64_t (*)(uint64_t))type metadata accessor for Code, (uint64_t)&unk_100E2014C);
}

uint64_t sub_100024DD4()
{
  return sub_100006204(&qword_1010EB250, (uint64_t (*)(uint64_t))type metadata accessor for SPOwnerSessionError, (uint64_t)&unk_100E21DB4);
}

uint64_t sub_100024E00()
{
  return sub_100006204(&qword_1010EB258, (uint64_t (*)(uint64_t))type metadata accessor for SPBTFindingSessionError, (uint64_t)&unk_100E20108);
}

uint64_t sub_100024E2C()
{
  return sub_100006204(&qword_1010EB260, (uint64_t (*)(uint64_t))type metadata accessor for SPBTFindingSessionError, (uint64_t)&unk_100E200D4);
}

uint64_t sub_100024E58()
{
  return sub_100006204(&qword_1010EB268, (uint64_t (*)(uint64_t))type metadata accessor for SPBTFindingSessionError, (uint64_t)&unk_100E20090);
}

uint64_t sub_100024E84()
{
  return sub_100006204(&qword_1010EB270, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_12, (uint64_t)&unk_100E20FC4);
}

void _s3__C4CodeOMa_12(uint64_t a1)
{
  sub_10001D3B4(a1, &qword_1010EB650, (uint64_t)&unk_10104F040);
}

uint64_t sub_100024EC4()
{
  return sub_100006204(&qword_1010EB278, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_12, (uint64_t)&unk_100E20F88);
}

uint64_t sub_100024EF0()
{
  return sub_100006204((unint64_t *)&unk_1010EB280, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_12, (uint64_t)&unk_100E21000);
}

uint64_t sub_100024F1C()
{
  return sub_100006204(&qword_101116FB0, (uint64_t (*)(uint64_t))type metadata accessor for SPBTFindingSessionError, (uint64_t)&unk_100E20F1C);
}

uint64_t sub_100024F48()
{
  return sub_100006204(&qword_1010EB290, (uint64_t (*)(uint64_t))type metadata accessor for UpdateBatteryLevelError, (uint64_t)&unk_100E1FFDC);
}

uint64_t sub_100024F74()
{
  return sub_100006204(&qword_1010EB298, (uint64_t (*)(uint64_t))type metadata accessor for UpdateBatteryLevelError, (uint64_t)&unk_100E1FFA8);
}

uint64_t sub_100024FA0()
{
  return sub_100006204(&qword_1010EB2A0, (uint64_t (*)(uint64_t))type metadata accessor for UpdateBatteryLevelError, (uint64_t)&unk_100E1FF64);
}

uint64_t sub_100024FCC()
{
  return sub_100006204(&qword_1010EB2A8, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_11, (uint64_t)&unk_100E210D4);
}

void _s3__C4CodeOMa_11(uint64_t a1)
{
  sub_10001D3B4(a1, &qword_1010EB648, (uint64_t)&unk_10104F020);
}

uint64_t sub_10002500C()
{
  return sub_100006204(&qword_1010EB2B0, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_11, (uint64_t)&unk_100E21098);
}

uint64_t sub_100025038()
{
  return sub_100006204(&qword_1010EB2B8, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_11, (uint64_t)&unk_100E21110);
}

uint64_t sub_100025064()
{
  return sub_100006204(&qword_1010EB2C0, (uint64_t (*)(uint64_t))type metadata accessor for UpdateBatteryLevelError, (uint64_t)&unk_100E2102C);
}

uint64_t sub_100025090()
{
  return sub_100006204(&qword_1010EB2C8, (uint64_t (*)(uint64_t))type metadata accessor for SecureLocationsError, (uint64_t)&unk_100E1FEB0);
}

uint64_t sub_1000250BC()
{
  return sub_100006204(&qword_1010EB2D0, (uint64_t (*)(uint64_t))type metadata accessor for SecureLocationsError, (uint64_t)&unk_100E1FE7C);
}

uint64_t sub_1000250E8()
{
  return sub_100006204(&qword_1010EB2D8, (uint64_t (*)(uint64_t))type metadata accessor for SecureLocationsError, (uint64_t)&unk_100E1FE38);
}

uint64_t sub_100025114()
{
  return sub_100006204(&qword_1010EB2E0, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_10, (uint64_t)&unk_100E211E4);
}

void _s3__C4CodeOMa_10(uint64_t a1)
{
  sub_10001D3B4(a1, &qword_1010EB640, (uint64_t)&unk_10104F000);
}

uint64_t sub_100025154()
{
  return sub_100006204(&qword_1010EB2E8, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_10, (uint64_t)&unk_100E211A8);
}

uint64_t sub_100025180()
{
  return sub_100006204((unint64_t *)&unk_1010EB2F0, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_10, (uint64_t)&unk_100E21220);
}

uint64_t sub_1000251AC()
{
  return sub_100006204(&qword_1010F1590, (uint64_t (*)(uint64_t))type metadata accessor for SecureLocationsError, (uint64_t)&unk_100E2113C);
}

uint64_t sub_1000251D8()
{
  return sub_100006204(&qword_1010EB300, (uint64_t (*)(uint64_t))type metadata accessor for SecureLocationsStewieError, (uint64_t)&unk_100E1FD84);
}

uint64_t sub_100025204()
{
  return sub_100006204(&qword_1010EB308, (uint64_t (*)(uint64_t))type metadata accessor for SecureLocationsStewieError, (uint64_t)&unk_100E1FD50);
}

uint64_t sub_100025230()
{
  return sub_100006204(&qword_1010EB310, (uint64_t (*)(uint64_t))type metadata accessor for SecureLocationsStewieError, (uint64_t)&unk_100E1FD0C);
}

uint64_t sub_10002525C()
{
  return sub_100006204(&qword_1010EB318, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_9, (uint64_t)&unk_100E212F4);
}

void _s3__C4CodeOMa_9(uint64_t a1)
{
  sub_10001D3B4(a1, &qword_1010EB638, (uint64_t)&unk_10104EFE0);
}

uint64_t sub_10002529C()
{
  return sub_100006204(&qword_1010EB320, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_9, (uint64_t)&unk_100E212B8);
}

uint64_t sub_1000252C8()
{
  return sub_100006204(&qword_1010EB328, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_9, (uint64_t)&unk_100E21330);
}

uint64_t sub_1000252F4()
{
  return sub_100006204(&qword_1010EB330, (uint64_t (*)(uint64_t))type metadata accessor for SecureLocationsStewieError, (uint64_t)&unk_100E2124C);
}

uint64_t sub_100025320()
{
  return sub_100006204(&qword_1010EB338, (uint64_t (*)(uint64_t))type metadata accessor for SPUnknownDiscoverySessionError, (uint64_t)&unk_100E1FC58);
}

uint64_t sub_10002534C()
{
  return sub_100006204(&qword_1010EB340, (uint64_t (*)(uint64_t))type metadata accessor for SPUnknownDiscoverySessionError, (uint64_t)&unk_100E1FC24);
}

uint64_t sub_100025378()
{
  return sub_100006204(&qword_1010EB348, (uint64_t (*)(uint64_t))type metadata accessor for SPUnknownDiscoverySessionError, (uint64_t)&unk_100E1FBE0);
}

uint64_t sub_1000253A4()
{
  return sub_100006204(&qword_1010EB350, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_8, (uint64_t)&unk_100E21404);
}

void _s3__C4CodeOMa_8(uint64_t a1)
{
  sub_10001D3B4(a1, &qword_1010EB630, (uint64_t)&unk_10104EFC0);
}

uint64_t sub_1000253E4()
{
  return sub_100006204(&qword_1010EB358, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_8, (uint64_t)&unk_100E213C8);
}

uint64_t sub_100025410()
{
  return sub_100006204((unint64_t *)&unk_1010EB360, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_8, (uint64_t)&unk_100E21440);
}

uint64_t sub_10002543C()
{
  return sub_100006204(&qword_10111C340, (uint64_t (*)(uint64_t))type metadata accessor for SPUnknownDiscoverySessionError, (uint64_t)&unk_100E2135C);
}

uint64_t sub_100025468()
{
  return sub_100006204(&qword_1010EB370, (uint64_t (*)(uint64_t))type metadata accessor for SPTagSeparationError, (uint64_t)&unk_100E1FB2C);
}

uint64_t sub_100025494()
{
  return sub_100006204(&qword_1010EB378, (uint64_t (*)(uint64_t))type metadata accessor for SPTagSeparationError, (uint64_t)&unk_100E1FAF8);
}

uint64_t sub_1000254C0()
{
  return sub_100006204(&qword_1010EB380, (uint64_t (*)(uint64_t))type metadata accessor for SPTagSeparationError, (uint64_t)&unk_100E1FAB4);
}

uint64_t sub_1000254EC()
{
  return sub_100006204(&qword_1010EB388, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_7, (uint64_t)&unk_100E21514);
}

void _s3__C4CodeOMa_7(uint64_t a1)
{
  sub_10001D3B4(a1, &qword_1010EB628, (uint64_t)&unk_10104EFA0);
}

uint64_t sub_10002552C()
{
  return sub_100006204(&qword_1010EB390, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_7, (uint64_t)&unk_100E214D8);
}

uint64_t sub_100025558()
{
  return sub_100006204(&qword_1010EB398, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_7, (uint64_t)&unk_100E21550);
}

uint64_t sub_100025584()
{
  return sub_100006204((unint64_t *)&qword_1010EB3A0, (uint64_t (*)(uint64_t))type metadata accessor for SPTagSeparationError, (uint64_t)&unk_100E2146C);
}

uint64_t sub_1000255B0()
{
  return sub_100006204(&qword_1010EB3A8, (uint64_t (*)(uint64_t))type metadata accessor for CBConnectionEventMatchingOption, (uint64_t)&unk_100E1F99C);
}

uint64_t sub_1000255DC()
{
  return sub_100006204(&qword_1010EB3B0, (uint64_t (*)(uint64_t))type metadata accessor for UnpairError, (uint64_t)&unk_100E1F8C8);
}

uint64_t sub_100025608()
{
  return sub_100006204(&qword_1010EB3B8, (uint64_t (*)(uint64_t))type metadata accessor for UnpairError, (uint64_t)&unk_100E1F894);
}

uint64_t sub_100025634()
{
  return sub_100006204(&qword_1010EB3C0, (uint64_t (*)(uint64_t))type metadata accessor for UnpairError, (uint64_t)&unk_100E1F850);
}

uint64_t sub_100025660()
{
  return sub_100006204(&qword_1010EB3C8, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_6, (uint64_t)&unk_100E21664);
}

void _s3__C4CodeOMa_6(uint64_t a1)
{
  sub_10001D3B4(a1, &qword_1010EB620, (uint64_t)&unk_10104EF80);
}

uint64_t sub_1000256A0()
{
  return sub_100006204(&qword_1010EB3D0, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_6, (uint64_t)&unk_100E21628);
}

uint64_t sub_1000256CC()
{
  return sub_100006204(&qword_1010EB3D8, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_6, (uint64_t)&unk_100E216A0);
}

uint64_t sub_1000256F8()
{
  return sub_100006204(&qword_1010EB3E0, (uint64_t (*)(uint64_t))type metadata accessor for UnpairError, (uint64_t)&unk_100E215BC);
}

uint64_t sub_100025724()
{
  return sub_100006204(&qword_1010EB3E8, (uint64_t (*)(uint64_t))type metadata accessor for SPCBPeripheralError, (uint64_t)&unk_100E1F79C);
}

uint64_t sub_100025750()
{
  return sub_100006204(&qword_1010EB3F0, (uint64_t (*)(uint64_t))type metadata accessor for SPCBPeripheralError, (uint64_t)&unk_100E1F768);
}

uint64_t sub_10002577C()
{
  return sub_100006204(&qword_1010EB3F8, (uint64_t (*)(uint64_t))type metadata accessor for SPCBPeripheralError, (uint64_t)&unk_100E1F724);
}

uint64_t sub_1000257A8()
{
  return sub_100006204(&qword_1010EB400, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_5, (uint64_t)&unk_100E21774);
}

void _s3__C4CodeOMa_5(uint64_t a1)
{
  sub_10001D3B4(a1, &qword_1010EB618, (uint64_t)&unk_10104EF60);
}

uint64_t sub_1000257E8()
{
  return sub_100006204(&qword_1010EB408, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_5, (uint64_t)&unk_100E21738);
}

uint64_t sub_100025814()
{
  return sub_100006204(&qword_1010EB410, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_5, (uint64_t)&unk_100E217B0);
}

uint64_t sub_100025840()
{
  return sub_100006204(&qword_1010EB418, (uint64_t (*)(uint64_t))type metadata accessor for SPCBPeripheralError, (uint64_t)&unk_100E216CC);
}

uint64_t sub_10002586C()
{
  return sub_100006204(&qword_1010EB420, (uint64_t (*)(uint64_t))type metadata accessor for SPPairingSessionError, (uint64_t)&unk_100E1F670);
}

uint64_t sub_100025898()
{
  return sub_100006204(&qword_1010EB428, (uint64_t (*)(uint64_t))type metadata accessor for SPPairingSessionError, (uint64_t)&unk_100E1F63C);
}

uint64_t sub_1000258C4()
{
  return sub_100006204(&qword_1010EB430, (uint64_t (*)(uint64_t))type metadata accessor for SPPairingSessionError, (uint64_t)&unk_100E1F5F8);
}

uint64_t sub_1000258F0()
{
  return sub_100006204(&qword_1010EB438, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_4, (uint64_t)&unk_100E21884);
}

void _s3__C4CodeOMa_4(uint64_t a1)
{
  sub_10001D3B4(a1, &qword_1010EB610, (uint64_t)&unk_10104EF40);
}

uint64_t sub_100025930()
{
  return sub_100006204(&qword_1010EB440, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_4, (uint64_t)&unk_100E21848);
}

uint64_t sub_10002595C()
{
  return sub_100006204(&qword_1010EB448, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_4, (uint64_t)&unk_100E218C0);
}

uint64_t sub_100025988()
{
  return sub_100006204(&qword_1010EB450, (uint64_t (*)(uint64_t))type metadata accessor for SPPairingSessionError, (uint64_t)&unk_100E217DC);
}

uint64_t sub_1000259B4()
{
  return sub_100006204(&qword_1010EB458, (uint64_t (*)(uint64_t))type metadata accessor for URLResourceKey, (uint64_t)&unk_100E1F554);
}

uint64_t sub_1000259E0()
{
  return sub_100006204(&qword_1010EB460, (uint64_t (*)(uint64_t))type metadata accessor for SPBeaconSharingError, (uint64_t)&unk_100E1F474);
}

uint64_t sub_100025A0C()
{
  return sub_100006204(&qword_1010EB468, (uint64_t (*)(uint64_t))type metadata accessor for SPBeaconSharingError, (uint64_t)&unk_100E1F440);
}

uint64_t sub_100025A38()
{
  return sub_100006204(&qword_1010EB470, (uint64_t (*)(uint64_t))type metadata accessor for SPBeaconSharingError, (uint64_t)&unk_100E1F3FC);
}

uint64_t sub_100025A64()
{
  return sub_100006204(&qword_1010EB478, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_3, (uint64_t)&unk_100E219D8);
}

void _s3__C4CodeOMa_3(uint64_t a1)
{
  sub_10001D3B4(a1, &qword_1010EB608, (uint64_t)&unk_10104EF20);
}

uint64_t sub_100025AA4()
{
  return sub_100006204(&qword_1010EB480, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_3, (uint64_t)&unk_100E2199C);
}

uint64_t sub_100025AD0()
{
  return sub_100006204(&qword_1010EB488, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_3, (uint64_t)&unk_100E21A14);
}

uint64_t sub_100025AFC()
{
  return sub_100006204((unint64_t *)&qword_1010EB490, (uint64_t (*)(uint64_t))type metadata accessor for SPBeaconSharingError, (uint64_t)&unk_100E21930);
}

uint64_t sub_100025B28()
{
  return sub_100006204(&qword_1010EB498, (uint64_t (*)(uint64_t))type metadata accessor for CommandError, (uint64_t)&unk_100E1F29C);
}

uint64_t sub_100025B54()
{
  return sub_100006204(&qword_1010EB4A0, (uint64_t (*)(uint64_t))type metadata accessor for CommandError, (uint64_t)&unk_100E1F268);
}

uint64_t sub_100025B80()
{
  return sub_100006204(&qword_1010EB4A8, (uint64_t (*)(uint64_t))type metadata accessor for CommandError, (uint64_t)&unk_100E1F224);
}

uint64_t sub_100025BAC()
{
  return sub_100006204(&qword_1010EB4B0, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_2, (uint64_t)&unk_100E21AE8);
}

void _s3__C4CodeOMa_2(uint64_t a1)
{
  sub_10001D3B4(a1, &qword_1010EB600, (uint64_t)&unk_10104EF00);
}

uint64_t sub_100025BEC()
{
  return sub_100006204(&qword_1010EB4B8, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_2, (uint64_t)&unk_100E21AAC);
}

uint64_t sub_100025C18()
{
  return sub_100006204((unint64_t *)&unk_1010EB4C0, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_2, (uint64_t)&unk_100E21B24);
}

uint64_t sub_100025C44()
{
  return sub_100006204((unint64_t *)&unk_101102F60, (uint64_t (*)(uint64_t))type metadata accessor for CommandError, (uint64_t)&unk_100E21A40);
}

uint64_t sub_100025C70()
{
  return sub_100006204(&qword_1010EB4D0, (uint64_t (*)(uint64_t))type metadata accessor for SPSeparationMonitoringError, (uint64_t)&unk_100E1F170);
}

uint64_t sub_100025C9C()
{
  return sub_100006204(&qword_1010EB4D8, (uint64_t (*)(uint64_t))type metadata accessor for SPSeparationMonitoringError, (uint64_t)&unk_100E1F13C);
}

uint64_t sub_100025CC8()
{
  return sub_100006204(&qword_1010EB4E0, (uint64_t (*)(uint64_t))type metadata accessor for SPSeparationMonitoringError, (uint64_t)&unk_100E1F0F8);
}

uint64_t sub_100025CF4()
{
  return sub_100006204(&qword_1010EB4E8, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_1, (uint64_t)&unk_100E21C3C);
}

void _s3__C4CodeOMa_1(uint64_t a1)
{
  sub_10001D3B4(a1, &qword_1010EB5F8, (uint64_t)&unk_10104EEE0);
}

uint64_t sub_100025D34()
{
  return sub_100006204(&qword_1010EB4F0, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_1, (uint64_t)&unk_100E21C00);
}

uint64_t sub_100025D60()
{
  return sub_100006204(&qword_1010EB4F8, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_1, (uint64_t)&unk_100E21C78);
}

uint64_t sub_100025D8C()
{
  return sub_100006204(&qword_1010EB500, (uint64_t (*)(uint64_t))type metadata accessor for SPSeparationMonitoringError, (uint64_t)&unk_100E21B94);
}

uint64_t sub_100025DB8()
{
  return sub_100006204(&qword_1010EB508, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_100E1F088);
}

uint64_t sub_100025DE4()
{
  return sub_100006204(&qword_1010EB510, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_100E1F054);
}

uint64_t sub_100025E10()
{
  return sub_100006204(&qword_1010EB518, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_100E1F010);
}

uint64_t sub_100025E3C()
{
  return sub_100006204(&qword_1010EB520, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_0, (uint64_t)&unk_100E21D4C);
}

void _s3__C4CodeOMa_0(uint64_t a1)
{
  sub_10001D3B4(a1, &qword_1010EB5F0, (uint64_t)&unk_10104EEC0);
}

uint64_t sub_100025E7C()
{
  return sub_100006204(&qword_1010EB528, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_0, (uint64_t)&unk_100E21D10);
}

uint64_t sub_100025EA8()
{
  return sub_100006204(&qword_1010EB530, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_0, (uint64_t)&unk_100E21D88);
}

uint64_t sub_100025ED4()
{
  return sub_100006204(&qword_1010EB538, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_100E21CA4);
}

uint64_t sub_100025F00()
{
  return sub_100006204(&qword_1010EB540, (uint64_t (*)(uint64_t))type metadata accessor for SPOwnerSessionError, (uint64_t)&unk_100E1EF5C);
}

uint64_t sub_100025F2C()
{
  return sub_100006204(&qword_1010EB548, (uint64_t (*)(uint64_t))type metadata accessor for SPOwnerSessionError, (uint64_t)&unk_100E1EF28);
}

uint64_t sub_100025F58()
{
  return sub_100006204(&qword_1010EB550, (uint64_t (*)(uint64_t))type metadata accessor for SPOwnerSessionError, (uint64_t)&unk_100E1EEE4);
}

uint64_t sub_100025F84()
{
  return sub_100006204(&qword_1010EB558, (uint64_t (*)(uint64_t))type metadata accessor for Code, (uint64_t)&unk_100E20EE0);
}

uint64_t sub_100025FB0()
{
  return sub_100006204(&qword_1010EB560, (uint64_t (*)(uint64_t))type metadata accessor for Code, (uint64_t)&unk_100E20178);
}

uint64_t sub_100025FDC()
{
  return sub_100006204(&qword_1010EB568, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_100E1ECA4);
}

uint64_t sub_100026008()
{
  return sub_100006204(&qword_1010EB570, (uint64_t (*)(uint64_t))type metadata accessor for SPBeaconTaskName, (uint64_t)&unk_100E1EB84);
}

uint64_t sub_100026034()
{
  return sub_100006204(&qword_1010EB578, (uint64_t (*)(uint64_t))type metadata accessor for SPFinderDisabledReason, (uint64_t)&unk_100E1EA70);
}

__n128 sub_100026060(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

void type metadata accessor for sp_key_index_map_toc_entry(uint64_t a1)
{
  sub_10001D3B4(a1, &qword_1010EB678, (uint64_t)&unk_10104F138);
}

uint64_t sub_100026080(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_1000260A0(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 32) = v3;
  return result;
}

void type metadata accessor for sp_key_file_header(uint64_t a1)
{
  sub_10001D3B4(a1, (unint64_t *)&unk_1010EB680, (uint64_t)&unk_10104F1B8);
}

id sub_10002615C()
{
  char *v0;
  void *v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  objc_super v9;

  v1 = v0;
  v2 = &v0[OBJC_IVAR____TtC12searchpartyd40UnwantedTrackingUserNotificationDelegate_name];
  *(_QWORD *)v2 = 0xD000000000000028;
  *((_QWORD *)v2 + 1) = 0x8000000100E221E0;
  if (qword_1010EA138 != -1)
    swift_once(&qword_1010EA138, sub_100A3A4A8);
  v3 = type metadata accessor for Logger(0);
  v4 = sub_10001A9E8(v3, (uint64_t)qword_1011B7B58);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.default.getter(v5);
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "UnwantedTrackingUserNotificationDelegate: init", v7, 2u);
    swift_slowDealloc(v7, -1, -1);
  }

  v9.receiver = v1;
  v9.super_class = (Class)type metadata accessor for UnwantedTrackingUserNotificationDelegate();
  return objc_msgSendSuper2(&v9, "init");
}

id sub_100026294()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  objc_super v8;

  v1 = v0;
  if (qword_1010EA138 != -1)
    swift_once(&qword_1010EA138, sub_100A3A4A8);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_10001A9E8(v2, (uint64_t)qword_1011B7B58);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "UnwantedTrackingUserNotificationDelegate: Deinit", v6, 2u);
    swift_slowDealloc(v6, -1, -1);
  }

  v8.receiver = v1;
  v8.super_class = (Class)type metadata accessor for UnwantedTrackingUserNotificationDelegate();
  return objc_msgSendSuper2(&v8, "dealloc");
}

uint64_t type metadata accessor for UnwantedTrackingUserNotificationDelegate()
{
  return objc_opt_self(_TtC12searchpartyd40UnwantedTrackingUserNotificationDelegate);
}

void sub_1000264AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  id v7;
  NSString v8;
  id v9;
  _QWORD *v10;
  id v11;
  NSString v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  NSString v17;
  id v18;
  uint64_t v19;
  _BYTE v20[16];
  id v21;
  uint64_t v22;

  v1 = v0;
  if (qword_1010EA138 != -1)
    swift_once(&qword_1010EA138, sub_100A3A4A8);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_10001A9E8(v2, (uint64_t)qword_1011B7B58);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "UnwantedTrackingUserNotificationDelegate: setupUserNotifications", v6, 2u);
    swift_slowDealloc(v6, -1, -1);
  }

  v7 = objc_allocWithZone((Class)UNUserNotificationCenter);
  v8 = String._bridgeToObjectiveC()();
  v9 = objc_msgSend(v7, "initWithBundleIdentifier:", v8);

  objc_msgSend(v9, "setDelegate:", v1);
  objc_msgSend(v9, "setWantsNotificationResponsesDelivered");
  if (qword_1010E9D08 != -1)
    swift_once(&qword_1010E9D08, sub_10059A6E0);
  v10 = sub_100013B60();
  v11 = sub_100013BD0();
  v12 = String._bridgeToObjectiveC()();
  v13 = objc_msgSend(v11, "BOOLForKey:", v12);
  swift_release(v10);

  if (v13)
    v14 = 65602;
  else
    v14 = 66;
  v15 = type metadata accessor for Transaction(0);
  __chkstk_darwin(v15);
  v21 = v9;
  v22 = v14;
  static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd.requestNotificationAuthorization", 62, 2, sub_100027DB0, v20, (char *)&type metadata for () + 8);
  v16 = objc_allocWithZone((Class)UNUserNotificationCenter);
  v17 = String._bridgeToObjectiveC()();
  v18 = objc_msgSend(v16, "initWithBundleIdentifier:", v17);

  __chkstk_darwin(v19);
  v21 = v18;
  static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd.requestProvisionalAuthorizationFindMyApp", 70, 2, sub_100027DC8, v20, (char *)&type metadata for () + 8);

}

void sub_100026780(uint64_t a1, void *a2, uint64_t a3)
{
  void *v5;
  uint64_t v6;
  _QWORD v7[5];
  uint64_t v8;

  v8 = a1;
  v7[4] = sub_100027E00;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 1107296256;
  v7[2] = sub_10002683C;
  v7[3] = &unk_10104F4E8;
  v5 = _Block_copy(v7);
  v6 = v8;
  swift_retain();
  swift_release(v6);
  objc_msgSend(a2, "requestAuthorizationWithOptions:completionHandler:", a3, v5);
  _Block_release(v5);
}

void sub_10002683C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5;
  void (*v6)(uint64_t, void *);
  id v7;

  v6 = *(void (**)(uint64_t, void *))(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  swift_retain(v5);
  v7 = a3;
  v6(a2, a3);
  swift_release(v5);

}

void sub_10002689C(uint64_t a1, id a2)
{
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  void *v11;
  uint64_t v12;
  _QWORD v13[5];
  uint64_t v14;

  v4 = objc_msgSend(a2, "notificationSettings");
  v5 = objc_msgSend(v4, "authorizationStatus");

  if (v5)
  {
    if (qword_1010EA138 != -1)
      swift_once(&qword_1010EA138, sub_100A3A4A8);
    v6 = type metadata accessor for Logger(0);
    v7 = sub_10001A9E8(v6, (uint64_t)qword_1011B7B58);
    v8 = Logger.logObject.getter(v7);
    v9 = static os_log_type_t.default.getter(v8);
    if (os_log_type_enabled(v8, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "UnwantedTrackingUserNotificationDelegate: No need to request deliver quietly authorization for Find My. Authorization already determined.", v10, 2u);
      swift_slowDealloc(v10, -1, -1);
    }

  }
  else
  {
    v13[4] = sub_100027DE0;
    v14 = a1;
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 1107296256;
    v13[2] = sub_10002683C;
    v13[3] = &unk_10104F4C0;
    v11 = _Block_copy(v13);
    v12 = v14;
    swift_retain();
    swift_release(v12);
    objc_msgSend(a2, "requestAuthorizationWithOptions:completionHandler:", 66, v11);
    _Block_release(v11);
  }
}

void sub_100026A38(char a1, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (qword_1010EA138 != -1)
    swift_once(&qword_1010EA138, sub_100A3A4A8);
  v7 = type metadata accessor for Logger(0);
  sub_10001A9E8(v7, (uint64_t)qword_1011B7B58);
  swift_errorRetain(a2);
  v8 = swift_errorRetain(a2);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.default.getter(v9);
  if (os_log_type_enabled(v9, v10))
  {
    v11 = swift_slowAlloc(18, -1);
    v12 = swift_slowAlloc(32, -1);
    v17 = v12;
    *(_DWORD *)v11 = 67109378;
    LODWORD(v16) = a1 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v16, (char *)&v16 + 4, v11 + 4, v11 + 8);
    *(_WORD *)(v11 + 8) = 2080;
    v16 = a2;
    swift_errorRetain(a2);
    v13 = sub_10001A9A8((uint64_t *)&unk_1010EB920);
    v14 = String.init<A>(describing:)(&v16, v13);
    v16 = sub_100016940(v14, v15, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v16, &v17, v11 + 10, v11 + 18);
    swift_bridgeObjectRelease();
    swift_errorRelease(a2);
    swift_errorRelease(a2);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, a4, (uint8_t *)v11, 0x12u);
    swift_arrayDestroy(v12, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v12, -1, -1);
    swift_slowDealloc(v11, -1, -1);
  }
  else
  {
    swift_errorRelease(a2);
    swift_errorRelease(a2);
  }

  Transaction.capture()();
}

uint64_t sub_100026C30()
{
  _QWORD *v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(*v0 + OBJC_IVAR____TtC12searchpartyd40UnwantedTrackingUserNotificationDelegate_name);
  v2 = *v1;
  swift_bridgeObjectRetain(v1[1]);
  return v2;
}

void sub_100026C6C()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;

  if (qword_1010EA138 != -1)
    swift_once(&qword_1010EA138, sub_100A3A4A8);
  v0 = type metadata accessor for Logger(0);
  v1 = sub_10001A9E8(v0, (uint64_t)qword_1011B7B58);
  v2 = Logger.logObject.getter(v1);
  v3 = static os_log_type_t.default.getter(v2);
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "UnwantedTrackingUserNotificationDelegate: startup", v4, 2u);
    swift_slowDealloc(v4, -1, -1);
  }

  sub_1000264AC();
}

void sub_100026F04(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  NSObject *oslog;
  uint64_t v12;
  uint64_t v13;

  if (a2)
  {
    swift_errorRetain(a2);
    if (qword_1010EA138 != -1)
      swift_once(&qword_1010EA138, sub_100A3A4A8);
    v3 = type metadata accessor for Logger(0);
    sub_10001A9E8(v3, (uint64_t)qword_1011B7B58);
    swift_errorRetain(a2);
    v4 = swift_errorRetain(a2);
    oslog = Logger.logObject.getter(v4);
    v5 = static os_log_type_t.error.getter(oslog);
    if (os_log_type_enabled(oslog, v5))
    {
      v6 = (uint8_t *)swift_slowAlloc(12, -1);
      v7 = swift_slowAlloc(32, -1);
      v12 = a2;
      v13 = v7;
      *(_DWORD *)v6 = 136315138;
      swift_errorRetain(a2);
      v8 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
      v9 = String.init<A>(describing:)(&v12, v8);
      v12 = sub_100016940(v9, v10, &v13);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v12, &v13, v6 + 4, v6 + 12);
      swift_bridgeObjectRelease();
      swift_errorRelease(a2);
      swift_errorRelease(a2);
      _os_log_impl((void *)&_mh_execute_header, oslog, v5, "UnwantedTrackingUserNotificationDelegate: Error opening url %s", v6, 0xCu);
      swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v7, -1, -1);
      swift_slowDealloc(v6, -1, -1);

      swift_errorRelease(a2);
    }
    else
    {
      swift_errorRelease(a2);
      swift_errorRelease(a2);
      swift_errorRelease(a2);

    }
  }
}

void sub_1000270FC(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5;
  void (*v6)(void *, void *);
  id v7;
  id v8;

  v6 = *(void (**)(void *, void *))(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  swift_retain(v5);
  v8 = a2;
  v7 = a3;
  v6(a2, a3);
  swift_release(v5);

}

void sub_100027170(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t inited;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  id v25;
  void *v26;
  NSString v27;
  Class isa;
  id v29;
  void *v30;
  _QWORD aBlock[6];
  _BYTE v32[176];

  v2 = sub_10001A9A8(&qword_1010FBA40);
  __chkstk_darwin(v2);
  v4 = (char *)aBlock - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for URL(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)aBlock - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1010EA138 != -1)
    swift_once(&qword_1010EA138, sub_100A3A4A8);
  v9 = type metadata accessor for Logger(0);
  v10 = sub_10001A9E8(v9, (uint64_t)qword_1011B7B58);
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.default.getter(v11);
  if (os_log_type_enabled(v11, v12))
  {
    v13 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v13 = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "UnwantedTrackingUserNotificationDelegate: OpenURL", v13, 2u);
    swift_slowDealloc(v13, -1, -1);
  }

  sub_100027D68(a1, (uint64_t)v4);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    v14 = sub_100027CE0((uint64_t)v4);
    v15 = Logger.logObject.getter(v14);
    v16 = static os_log_type_t.error.getter(v15);
    if (os_log_type_enabled(v15, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v17 = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "UnwantedTrackingUserNotificationDelegate: Error opening settings. Invalid URL", v17, 2u);
      swift_slowDealloc(v17, -1, -1);
    }

  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v4, v5);
    v18 = sub_10001A9A8((uint64_t *)&unk_1010EB910);
    inited = swift_initStackObject(v18, v32);
    *(_OWORD *)(inited + 16) = xmmword_100E221E0;
    *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(FBSOpenApplicationOptionKeyPayloadURL);
    *(_QWORD *)(inited + 40) = v20;
    *(_QWORD *)(inited + 72) = v5;
    v21 = sub_100018F08((_QWORD *)(inited + 48));
    (*(void (**)(_QWORD *, char *, uint64_t))(v6 + 16))(v21, v8, v5);
    *(_QWORD *)(inited + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)(FBSOpenApplicationOptionKeyPromptUnlockDevice);
    *(_QWORD *)(inited + 88) = v22;
    *(_QWORD *)(inited + 120) = &type metadata for Bool;
    *(_BYTE *)(inited + 96) = 1;
    *(_QWORD *)(inited + 128) = static String._unconditionallyBridgeFromObjectiveC(_:)(FBSOpenApplicationOptionKeyUnlockDevice);
    *(_QWORD *)(inited + 136) = v23;
    *(_QWORD *)(inited + 168) = &type metadata for Bool;
    *(_BYTE *)(inited + 144) = 1;
    v24 = sub_1006B8B10(inited);
    v25 = objc_msgSend((id)objc_opt_self(FBSOpenApplicationService), "serviceWithDefaultShellEndpoint");
    if (v25)
    {
      v26 = v25;
      v27 = String._bridgeToObjectiveC()();
      sub_10047ACFC(v24);
      swift_bridgeObjectRelease();
      isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      v29 = objc_msgSend((id)objc_opt_self(FBSOpenApplicationOptions), "optionsWithDictionary:", isa);

      aBlock[4] = sub_100026F04;
      aBlock[5] = 0;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_1000270FC;
      aBlock[3] = &unk_10104F498;
      v30 = _Block_copy(aBlock);
      objc_msgSend(v26, "openApplication:withOptions:completion:", v27, v29, v30);
      _Block_release(v30);

      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      swift_bridgeObjectRelease();
    }
  }
}

uint64_t sub_1000275A4(uint64_t a1, void *a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  Swift::String v22;
  Swift::String v23;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;

  v8 = sub_10001A9A8(&qword_1010FBA40);
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)&v25 - v12;
  if (qword_1010EA138 != -1)
    swift_once(&qword_1010EA138, sub_100A3A4A8);
  v14 = type metadata accessor for Logger(0);
  sub_10001A9E8(v14, (uint64_t)qword_1011B7B58);
  swift_bridgeObjectRetain_n(a2, 2);
  v15 = swift_bridgeObjectRetain_n(a4, 2);
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.default.getter(v16);
  if (os_log_type_enabled(v16, v17))
  {
    v18 = swift_slowAlloc(22, -1);
    v27 = a3;
    v19 = v18;
    v20 = swift_slowAlloc(64, -1);
    v29 = v20;
    *(_DWORD *)v19 = 136315394;
    swift_bridgeObjectRetain(a2);
    v28 = sub_100016940(a1, (unint64_t)a2, &v29);
    v26 = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29, v19 + 4, v19 + 12);
    swift_bridgeObjectRelease_n(a2, 3);
    *(_WORD *)(v19 + 12) = 2080;
    swift_bridgeObjectRetain(a4);
    v28 = sub_100016940(v27, a4, &v29);
    v11 = v26;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29, v19 + 14, v19 + 22);
    swift_bridgeObjectRelease_n(a4, 3);
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "UnwantedTrackingUserNotificationDelegate: processUTNotification for beacon %s, action %s", (uint8_t *)v19, 0x16u);
    swift_arrayDestroy(v20, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v20, -1, -1);
    v21 = v19;
    a3 = v27;
    swift_slowDealloc(v21, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a4, 2);
    swift_bridgeObjectRelease_n(a2, 2);
  }
  v29 = 0;
  v30 = 0xE000000000000000;
  _StringGuts.grow(_:)(40);
  swift_bridgeObjectRelease();
  v29 = 0xD000000000000026;
  v30 = 0x8000000100EC5AE0;
  v22._countAndFlagsBits = a1;
  v22._object = a2;
  String.append(_:)(v22);
  URL.init(string:)(v29, v30);
  swift_bridgeObjectRelease();
  if (a3 == 0xD00000000000002ELL && a4 == 0x8000000100EC5B10
    || (_stringCompareWithSmolCheck(_:_:expecting:)(a3, a4, 0xD00000000000002ELL, 0x8000000100EC5B10, 0) & 1) != 0)
  {
    v29 = 0;
    v30 = 0xE000000000000000;
    _StringGuts.grow(_:)(40);
    swift_bridgeObjectRelease();
    v29 = 0xD000000000000026;
    v30 = 0x8000000100EC5B40;
    v23._countAndFlagsBits = a1;
    v23._object = a2;
    String.append(_:)(v23);
    URL.init(string:)(v29, v30);
    swift_bridgeObjectRelease();
    sub_100027CE0((uint64_t)v13);
    sub_100027D20((uint64_t)v11, (uint64_t)v13);
  }
  sub_100027170((uint64_t)v13);
  return sub_100027CE0((uint64_t)v13);
}

uint64_t sub_100027930(void *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  id v9;
  id v10;
  id v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  id v17;
  id v18;
  id v19;
  uint64_t v20;
  void *v21;
  void *v22;
  id v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  id v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  _QWORD *v32;
  id v33;
  uint64_t v34;
  id v35;
  uint64_t v36;

  if (qword_1010EA138 != -1)
    swift_once(&qword_1010EA138, sub_100A3A4A8);
  v4 = type metadata accessor for Logger(0);
  v5 = sub_10001A9E8(v4, (uint64_t)qword_1011B7B58);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.default.getter(v6);
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "UnwantedTrackingUserNotificationDelegate: didReceiveResponse", v8, 2u);
    swift_slowDealloc(v8, -1, -1);
  }

  v9 = objc_msgSend(a1, "notification");
  v10 = objc_msgSend(v9, "request");

  v11 = objc_msgSend(v10, "content");
  v12 = objc_msgSend(v11, "categoryIdentifier");

  v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
  v15 = v14;

  if (v13 == 0xD000000000000024 && v15 == 0x8000000100EC5AB0)
  {
    swift_bridgeObjectRelease();
LABEL_9:
    v17 = objc_msgSend(a1, "notification");
    v18 = objc_msgSend(v17, "request");

    v19 = objc_msgSend(v18, "identifier");
    v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
    v22 = v21;

    v23 = objc_msgSend(a1, "actionIdentifier");
    v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
    v26 = v25;

    sub_1000275A4(v20, v22, v24, v26);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(uint64_t))(a2 + 16))(a2);
  }
  v16 = _stringCompareWithSmolCheck(_:_:expecting:)(v13, v15, 0xD000000000000024, 0x8000000100EC5AB0, 0);
  swift_bridgeObjectRelease();
  if ((v16 & 1) != 0)
    goto LABEL_9;
  v28 = a1;
  v29 = Logger.logObject.getter(v28);
  v30 = static os_log_type_t.error.getter(v29);
  if (os_log_type_enabled(v29, v30))
  {
    v31 = (uint8_t *)swift_slowAlloc(12, -1);
    v32 = (_QWORD *)swift_slowAlloc(8, -1);
    *(_DWORD *)v31 = 138412290;
    v35 = v28;
    v33 = v28;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, &v36, v31 + 4, v31 + 12);
    *v32 = v28;

    _os_log_impl((void *)&_mh_execute_header, v29, v30, "UnwantedTrackingUserNotificationDelegate: Unhandled notification response %@", v31, 0xCu);
    v34 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v32, 1, v34);
    swift_slowDealloc(v32, -1, -1);
    swift_slowDealloc(v31, -1, -1);

  }
  else
  {

  }
  return (*(uint64_t (**)(uint64_t))(a2 + 16))(a2);
}

uint64_t sub_100027CE0(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10001A9A8(&qword_1010FBA40);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100027D20(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001A9A8(&qword_1010FBA40);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100027D68(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001A9A8(&qword_1010FBA40);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_100027DB0(uint64_t a1)
{
  uint64_t v1;

  sub_100026780(a1, *(void **)(v1 + 16), *(_QWORD *)(v1 + 24));
}

void sub_100027DC8(uint64_t a1)
{
  uint64_t v1;

  sub_10002689C(a1, *(id *)(v1 + 16));
}

void sub_100027DE0(char a1, uint64_t a2)
{
  uint64_t v2;

  sub_100026A38(a1, a2, v2, "UnwantedTrackingUserNotificationDelegate: Request deliver quietly authorization for Find My completed. Granted?: %{BOOL}d. Error?: %s");
}

void sub_100027E00(char a1, uint64_t a2)
{
  uint64_t v2;

  sub_100026A38(a1, a2, v2, "UnwantedTrackingUserNotificationDelegate: Request UT Alerts authorization completed. Granted?: %{BOOL}d. Error?: %s");
}

uint64_t sub_100027E30()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_1000234D8(v0, qword_1011B6650);
  sub_10001A9E8(v0, (uint64_t)qword_1011B6650);
  return Logger.init(subsystem:category:)(0xD00000000000001DLL, 0x8000000100EC5D30, 0xD000000000000010, 0x8000000100EC5D50);
}

uint64_t sub_100027EB4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_1000234D8(v0, qword_1011B6668);
  v1 = sub_10001A9E8(v0, (uint64_t)qword_1011B6668);
  if (qword_1010E98D0 != -1)
    swift_once(&qword_1010E98D0, sub_100027E30);
  v2 = sub_10001A9E8(v0, (uint64_t)qword_1011B6650);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_100027F44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4[15] = a4;
  v5 = sub_10001A9A8(&qword_1010EBAC8);
  v4[16] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for FinderStateInfo(0);
  v4[17] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v4[18] = v7;
  v8 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[19] = swift_task_alloc(v8);
  v4[20] = swift_task_alloc(v8);
  v9 = sub_10001A9A8(&qword_1010EBAD0);
  v4[21] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10001A9A8(&qword_1010EBAD8);
  v4[22] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v4[23] = v11;
  v4[24] = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10001A9A8(&qword_1010EBAE0);
  v4[25] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v4[26] = v13;
  v4[27] = swift_task_alloc((*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100028054, 0, 0);
}

uint64_t sub_100028054()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  _QWORD *v4;
  uint64_t (__cdecl *v5)();

  v1 = qword_1010EA5B0;
  swift_retain();
  if (v1 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v0 + 96, 0, 0);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 56, &qword_1010EE220);
  if (*(_QWORD *)(v0 + 80))
  {
    v3 = *(_QWORD *)(v0 + 120);
    sub_10000F9FC((__int128 *)(v0 + 56), v0 + 16);
    swift_release(v3);
    sub_10001AA44((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
    v5 = (uint64_t (__cdecl *)())((char *)&dword_1010EBAE8 + dword_1010EBAE8);
    v4 = (_QWORD *)swift_task_alloc(unk_1010EBAEC);
    *(_QWORD *)(v0 + 224) = v4;
    *v4 = v0;
    v4[1] = sub_100028154;
    return v5();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100028154(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 224);
  *(_QWORD *)(*(_QWORD *)v1 + 232) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1000281B0, 0, 0);
}

uint64_t sub_1000281B0()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v1 = (_QWORD *)(v0 + 16);
  if (*(_QWORD *)(v0 + 232))
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    v2 = (_QWORD *)swift_task_alloc(dword_1011011C4);
    *(_QWORD *)(v0 + 240) = v2;
    *v2 = v0;
    v2[1] = sub_100028328;
    return sub_10061306C(*(_QWORD *)(v0 + 192));
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    if (qword_1010E98D8 != -1)
      swift_once(&qword_1010E98D8, sub_100027EB4);
    v4 = type metadata accessor for Logger(0);
    v5 = sub_10001A9E8(v4, (uint64_t)qword_1011B6668);
    v6 = Logger.logObject.getter(v5);
    v7 = static os_log_type_t.error.getter(v6);
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Missing FinderStateObserver service.", v8, 2u);
      swift_slowDealloc(v8, -1, -1);
    }

    v9 = *(_QWORD *)(v0 + 192);
    v11 = *(_QWORD *)(v0 + 160);
    v10 = *(_QWORD *)(v0 + 168);
    v12 = *(_QWORD *)(v0 + 152);
    v13 = *(_QWORD *)(v0 + 128);
    swift_task_dealloc(*(_QWORD *)(v0 + 216));
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100028328()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 240));
  return swift_task_switch(sub_10002837C, 0, 0);
}

uint64_t sub_10002837C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = v0[23];
  v1 = v0[24];
  v3 = v0[22];
  AsyncStream.makeAsyncIterator()(v3);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v4 = (_QWORD *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
  v0[31] = v4;
  *v4 = v0;
  v4[1] = sub_100028408;
  return AsyncStream.Iterator.next(isolation:)(v0[21], 0, 0, v0[25]);
}

uint64_t sub_100028408()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 248));
  return swift_task_switch(sub_10002845C, 0, 0);
}

uint64_t sub_10002845C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unsigned __int8 *v17;
  uint64_t v18;
  unsigned __int8 *v19;
  uint64_t v20;
  _QWORD *v21;

  v1 = *(_QWORD **)(v0 + 168);
  v2 = sub_10001A9A8(&qword_1010EBAF0);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(v1, 1, v2) == 1)
  {
    v3 = *(_QWORD *)(v0 + 232);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 208) + 8))(*(_QWORD *)(v0 + 216), *(_QWORD *)(v0 + 200));
    swift_release(v3);
    v4 = *(_QWORD *)(v0 + 192);
    v6 = *(_QWORD *)(v0 + 160);
    v5 = *(_QWORD *)(v0 + 168);
    v7 = *(_QWORD *)(v0 + 152);
    v8 = *(_QWORD *)(v0 + 128);
    swift_task_dealloc(*(_QWORD *)(v0 + 216));
    swift_task_dealloc(v4);
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v10 = *(_QWORD *)(v0 + 160);
  v11 = *(_QWORD *)(v0 + 136);
  v12 = *(_QWORD *)(v0 + 144);
  v13 = *(_QWORD *)(v0 + 128);
  swift_release(*v1);
  v14 = (uint64_t)v1 + *(int *)(v2 + 48);
  v15 = sub_10001A9A8(&qword_1010EBAF8);
  sub_1000306A0(v14 + *(int *)(v15 + 48), v10);
  sub_100005CF0(v14, v13, &qword_1010EBAC8);
  v16 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v13, 1, v11);
  v17 = *(unsigned __int8 **)(v0 + 160);
  if (v16 == 1)
  {
    v18 = *(_QWORD *)(v0 + 128);
    sub_1000306E4(*(_QWORD *)(v0 + 160));
    sub_100004048(v18, &qword_1010EBAC8);
  }
  else
  {
    v19 = *(unsigned __int8 **)(v0 + 152);
    sub_1000306A0(*(_QWORD *)(v0 + 128), (uint64_t)v19);
    if (*v19 != *v17)
      return swift_task_switch(sub_10002865C, *(_QWORD *)(v0 + 120), 0);
    v20 = *(_QWORD *)(v0 + 160);
    sub_1000306E4(*(_QWORD *)(v0 + 152));
    sub_1000306E4(v20);
  }
  v21 = (_QWORD *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
  *(_QWORD *)(v0 + 248) = v21;
  *v21 = v0;
  v21[1] = sub_100028408;
  return AsyncStream.Iterator.next(isolation:)(*(_QWORD *)(v0 + 168), 0, 0, *(_QWORD *)(v0 + 200));
}

uint64_t sub_10002865C()
{
  uint64_t v0;
  _QWORD *v1;

  *(_BYTE *)(*(_QWORD *)(v0 + 120) + 176) = 1;
  v1 = (_QWORD *)swift_task_alloc(dword_1010EB95C);
  *(_QWORD *)(v0 + 256) = v1;
  *v1 = v0;
  v1[1] = sub_1000286B0;
  return sub_10002890C();
}

uint64_t sub_1000286B0()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 256));
  return swift_task_switch(sub_100028704, 0, 0);
}

uint64_t sub_100028704()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t **v2;

  v1 = v0[20];
  sub_1000306E4(v0[19]);
  sub_1000306E4(v1);
  v2 = (uint64_t **)swift_task_alloc(*((unsigned int *)&async function pointer to AsyncStream.Iterator.next(isolation:)
                                    + 1));
  v0[31] = (uint64_t)v2;
  *v2 = v0;
  v2[1] = (uint64_t *)sub_100028408;
  return AsyncStream.Iterator.next(isolation:)(v0[21], 0, 0, v0[25]);
}

uint64_t sub_100028774(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t ObjectType;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD v23[4];

  v6 = sub_10001A9A8(&qword_1010F46C0);
  __chkstk_darwin(v6);
  v8 = (char *)v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000F9B8(a1, (uint64_t)v8, &qword_1010F46C0);
  v9 = type metadata accessor for TaskPriority(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9);
  if ((_DWORD)v11 == 1)
  {
    sub_100004048((uint64_t)v8, &qword_1010F46C0);
    v12 = 4096;
    v13 = *(_QWORD *)(a3 + 16);
    if (v13)
    {
LABEL_3:
      v14 = *(_QWORD *)(a3 + 24);
      ObjectType = swift_getObjectType(v13);
      swift_unknownObjectRetain(v13);
      v16 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v14);
      v18 = v17;
      swift_unknownObjectRelease(v13);
      goto LABEL_6;
    }
  }
  else
  {
    v19 = TaskPriority.rawValue.getter(v11);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v9);
    v12 = v19 | 0x1000;
    v13 = *(_QWORD *)(a3 + 16);
    if (v13)
      goto LABEL_3;
  }
  v16 = 0;
  v18 = 0;
LABEL_6:
  v20 = swift_allocObject(&unk_10104F5C0, 32, 7);
  *(_QWORD *)(v20 + 16) = a2;
  *(_QWORD *)(v20 + 24) = a3;
  if (v18 | v16)
  {
    v23[0] = 0;
    v23[1] = 0;
    v21 = v23;
    v23[2] = v16;
    v23[3] = v18;
  }
  else
  {
    v21 = 0;
  }
  return swift_task_create(v12, v21, (char *)&type metadata for () + 8, &unk_1010EE4A0, v20);
}

uint64_t sub_10002890C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1[6] = v0;
  v2 = type metadata accessor for XPCActivity.State(0);
  v1[7] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[8] = v3;
  v1[9] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10002896C, v0, 0);
}

uint64_t sub_10002896C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  _DWORD *v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)(_QWORD);

  v1 = *(_QWORD *)(v0 + 48);
  if (*(_BYTE *)(v1 + 176) != 1)
  {
    if (qword_1010E98D8 != -1)
      swift_once(&qword_1010E98D8, sub_100027EB4);
    v19 = type metadata accessor for Logger(0);
    v20 = sub_10001A9E8(v19, (uint64_t)qword_1011B6668);
    v21 = Logger.logObject.getter(v20);
    v22 = static os_log_type_t.info.getter(v21);
    if (os_log_type_enabled(v21, v22))
    {
      v23 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v23 = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "FindMyNetworkPublishActivityService maintaining existing criteria.", v23, 2u);
      swift_slowDealloc(v23, -1, -1);
    }

    goto LABEL_15;
  }
  *(_BYTE *)(v1 + 176) = 0;
  swift_beginAccess(v1 + 168, v0 + 16, 0, 0);
  v2 = *(_QWORD *)(v1 + 168);
  *(_QWORD *)(v0 + 80) = v2;
  v3 = *(_BYTE *)(v2 + 32);
  *(_BYTE *)(v0 + 120) = v3;
  v4 = -1;
  v5 = -1 << v3;
  if (-(-1 << v3) < 64)
    v4 = ~(-1 << -(char)v5);
  v6 = v4 & *(_QWORD *)(v2 + 64);
  swift_bridgeObjectRetain(v2);
  if (!v6)
  {
    v25 = 63 - v5;
    if ((unint64_t)(63 - v5) > 0x7F)
    {
      v26 = v7[9];
      if (v26)
      {
        v8 = 1;
LABEL_20:
        v10 = (v26 - 1) & v26;
        v9 = __clz(__rbit64(v26)) + (v8 << 6);
        goto LABEL_6;
      }
      if (v25 >= 0xC0)
      {
        v26 = v7[10];
        if (v26)
        {
          v8 = 2;
          goto LABEL_20;
        }
        if (v25 >= 0x100)
        {
          v26 = v7[11];
          if (v26)
          {
            v8 = 3;
            goto LABEL_20;
          }
          if (v25 > 0x13F)
          {
            v26 = v7[12];
            if (v26)
            {
              v8 = 4;
              goto LABEL_20;
            }
            v28 = 0;
            v29 = v25 >> 6;
            if (v29 <= 5)
              v29 = 5;
            v30 = v29 - 5;
            while (v30 != v28)
            {
              v26 = v7[v28++ + 13];
              if (v26)
              {
                v8 = v28 + 4;
                goto LABEL_20;
              }
            }
          }
        }
      }
    }
    swift_release(v7);
LABEL_15:
    swift_task_dealloc(*(_QWORD *)(v0 + 72));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v8 = 0;
  v9 = __clz(__rbit64(v6));
  v10 = (v6 - 1) & v6;
LABEL_6:
  *(_QWORD *)(v0 + 88) = v8;
  *(_QWORD *)(v0 + 96) = v10;
  v11 = *(unsigned __int8 *)(v7[6] + v9);
  v12 = *(_QWORD *)(v7[7] + 8 * v9);
  *(_QWORD *)(v0 + 104) = v12;
  v13 = qword_1010E98D8;
  swift_retain();
  if (v13 != -1)
    swift_once(&qword_1010E98D8, sub_100027EB4);
  v14 = type metadata accessor for Logger(0);
  sub_10001A9E8(v14, (uint64_t)qword_1011B6668);
  v15 = swift_retain_n(v12, 2);
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.default.getter(v16);
  if (os_log_type_enabled(v16, v17))
  {
    v18 = (_DWORD *)swift_slowAlloc(12, -1);
    *(_QWORD *)(v0 + 40) = swift_slowAlloc(32, -1);
    *v18 = 136446210;
    __asm { BR              X9 }
  }
  swift_release_n(v12, 2);

  v31 = (uint64_t (*)(_QWORD))((char *)&async function pointer to dispatch thunk of XPCActivity.updateCriteria()
                                       + async function pointer to dispatch thunk of XPCActivity.updateCriteria());
  v27 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of XPCActivity.updateCriteria()
                                   + 1));
  *(_QWORD *)(v0 + 112) = v27;
  *v27 = v0;
  v27[1] = sub_100028E5C;
  return v31(*(_QWORD *)(v0 + 72));
}

uint64_t sub_100028E5C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(*(_QWORD *)v0 + 64);
  v1 = *(_QWORD *)(*(_QWORD *)v0 + 72);
  v4 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  v3 = *(_QWORD *)(*(_QWORD *)v0 + 56);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 112));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  return swift_task_switch(sub_100028ED0, v4, 0);
}

uint64_t sub_100028ED0()
{
  uint64_t v0;
  int64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  _DWORD *v13;
  int64_t v14;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  int64_t v18;
  _QWORD *v19;
  uint64_t (*v21)(_QWORD);

  swift_release(*(_QWORD *)(v0 + 104));
  v1 = *(_QWORD *)(v0 + 88);
  v2 = *(_QWORD *)(v0 + 96);
  if (!v2)
  {
    v14 = v1 + 1;
    if (__OFADD__(v1, 1))
    {
      __break(1u);
    }
    else
    {
      v15 = (unint64_t)((1 << *(_BYTE *)(v0 + 120)) + 63) >> 6;
      v5 = *(_QWORD *)(v0 + 80);
      if (v14 >= v15)
        goto LABEL_22;
      v16 = v5 + 64;
      v17 = *(_QWORD *)(v5 + 64 + 8 * v14);
      ++v1;
      if (v17)
      {
LABEL_11:
        v3 = (v17 - 1) & v17;
        v4 = __clz(__rbit64(v17)) + (v1 << 6);
        goto LABEL_3;
      }
      v1 = v14 + 1;
      if (v14 + 1 >= v15)
        goto LABEL_22;
      v17 = *(_QWORD *)(v16 + 8 * v1);
      if (v17)
        goto LABEL_11;
      v1 = v14 + 2;
      if (v14 + 2 >= v15)
        goto LABEL_22;
      v17 = *(_QWORD *)(v16 + 8 * v1);
      if (v17)
        goto LABEL_11;
      v18 = v14 + 3;
      if (v18 >= v15)
      {
LABEL_22:
        swift_release(v5);
        swift_task_dealloc(*(_QWORD *)(v0 + 72));
        return (*(uint64_t (**)(void))(v0 + 8))();
      }
      v17 = *(_QWORD *)(v16 + 8 * v18);
      if (v17)
      {
        v1 = v18;
        goto LABEL_11;
      }
      while (1)
      {
        v1 = v18 + 1;
        if (__OFADD__(v18, 1))
          break;
        if (v1 >= v15)
          goto LABEL_22;
        v17 = *(_QWORD *)(v16 + 8 * v1);
        ++v18;
        if (v17)
          goto LABEL_11;
      }
    }
    __break(1u);
    JUMPOUT(0x1000292C8);
  }
  v3 = (v2 - 1) & v2;
  v4 = __clz(__rbit64(v2)) | (v1 << 6);
  v5 = *(_QWORD *)(v0 + 80);
LABEL_3:
  *(_QWORD *)(v0 + 88) = v1;
  *(_QWORD *)(v0 + 96) = v3;
  v6 = *(unsigned __int8 *)(*(_QWORD *)(v5 + 48) + v4);
  v7 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v4);
  *(_QWORD *)(v0 + 104) = v7;
  v8 = qword_1010E98D8;
  swift_retain();
  if (v8 != -1)
    swift_once(&qword_1010E98D8, sub_100027EB4);
  v9 = type metadata accessor for Logger(0);
  sub_10001A9E8(v9, (uint64_t)qword_1011B6668);
  v10 = swift_retain_n(v7, 2);
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.default.getter(v11);
  if (os_log_type_enabled(v11, v12))
  {
    v13 = (_DWORD *)swift_slowAlloc(12, -1);
    *(_QWORD *)(v0 + 40) = swift_slowAlloc(32, -1);
    *v13 = 136446210;
    __asm { BR              X9 }
  }
  swift_release_n(v7, 2);

  v21 = (uint64_t (*)(_QWORD))((char *)&async function pointer to dispatch thunk of XPCActivity.updateCriteria()
                                       + async function pointer to dispatch thunk of XPCActivity.updateCriteria());
  v19 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of XPCActivity.updateCriteria()
                                   + 1));
  *(_QWORD *)(v0 + 112) = v19;
  *v19 = v0;
  v19[1] = sub_100028E5C;
  return v21(*(_QWORD *)(v0 + 72));
}

uint64_t sub_1000292EC()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;

  v1[6] = v0;
  v1[7] = *v0;
  v2 = type metadata accessor for DispatchQoS(0);
  v1[8] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10002934C, v0, 0);
}

uint64_t sub_10002934C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t MyNetworkPublishDateProvider;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  if (qword_1010E98D8 != -1)
    swift_once(&qword_1010E98D8, sub_100027EB4);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_10001A9E8(v1, (uint64_t)qword_1011B6668);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "FindMyNetworkPublishActivityService registerPublishActivities.", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v6 = *(_QWORD *)(v0 + 48);

  *(_BYTE *)(v6 + 176) = 0;
  v7 = sub_10088350C();
  *(_QWORD *)(v0 + 72) = v7;
  v8 = *(_BYTE *)(v7 + 32);
  *(_BYTE *)(v0 + 120) = v8;
  v9 = -1;
  v10 = -1 << v8;
  if (-v10 < 64)
    v9 = ~(-1 << -(char)v10);
  v11 = v9 & *(_QWORD *)(v7 + 56);
  if (v11)
  {
    v12 = 0;
    v13 = __clz(__rbit64(v11));
    v14 = (v11 - 1) & v11;
    goto LABEL_9;
  }
  v18 = 63 - v10;
  if (v18 > 0x7F)
  {
    v19 = *(_QWORD *)(v7 + 64);
    if (v19)
    {
      v12 = 1;
LABEL_13:
      v14 = (v19 - 1) & v19;
      v13 = __clz(__rbit64(v19)) + (v12 << 6);
LABEL_9:
      *(_QWORD *)(v0 + 80) = v12;
      *(_QWORD *)(v0 + 88) = v14;
      v15 = *(unsigned __int8 *)(*(_QWORD *)(v7 + 48) + v13);
      *(_BYTE *)(v0 + 121) = v15;
      MyNetworkPublishDateProvider = type metadata accessor for FindMyNetworkPublishDateProvider();
      v17 = swift_allocObject(MyNetworkPublishDateProvider, 112, 15);
      *(_QWORD *)(v0 + 96) = v17;
      swift_defaultActor_initialize(v17);
      __asm { BR              X9 }
    }
    if (v18 >= 0xC0)
    {
      v19 = *(_QWORD *)(v7 + 72);
      if (v19)
      {
        v12 = 2;
        goto LABEL_13;
      }
      if (v18 >= 0x100)
      {
        v19 = *(_QWORD *)(v7 + 80);
        if (v19)
        {
          v12 = 3;
          goto LABEL_13;
        }
        if (v18 >= 0x140)
        {
          v19 = *(_QWORD *)(v7 + 88);
          if (v19)
          {
            v12 = 4;
          }
          else
          {
            v20 = 0;
            v21 = v18 >> 6;
            if (v21 <= 5)
              v21 = 5;
            v22 = v21 - 5;
            do
            {
              if (v22 == v20)
                goto LABEL_29;
              v19 = *(_QWORD *)(v7 + 96 + 8 * v20++);
            }
            while (!v19);
            v12 = v20 + 4;
          }
          goto LABEL_13;
        }
      }
    }
  }
LABEL_29:
  v23 = *(_QWORD *)(v0 + 64);
  swift_release(v7);
  swift_task_dealloc(v23);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10002972C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 104);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 48);
  *(_QWORD *)(*(_QWORD *)v1 + 112) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10002978C, v3, 0);
}

uint64_t sub_10002978C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v4;
  char v5;
  unint64_t v6;
  uint64_t v7;
  _BOOL8 v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  int64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t MyNetworkPublishDateProvider;
  uint64_t v31;
  int64_t v32;
  int64_t v33;
  uint64_t v34;
  unint64_t v35;
  int64_t v36;
  uint64_t v37;

  v1 = *(_QWORD *)(v0 + 48);
  v2 = *(unsigned __int8 *)(v0 + 121);
  swift_release(*(_QWORD *)(v0 + 96));
  swift_beginAccess(v1 + 168, v0 + 16, 33, 0);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v1 + 168));
  v4 = *(_QWORD *)(v1 + 168);
  *(_QWORD *)(v0 + 40) = v4;
  *(_QWORD *)(v1 + 168) = 0x8000000000000000;
  v6 = sub_100518E88(v2);
  v7 = *(_QWORD *)(v4 + 16);
  v8 = (v5 & 1) == 0;
  v9 = v7 + v8;
  if (__OFADD__(v7, v8))
  {
    __break(1u);
    goto LABEL_31;
  }
  v10 = v5;
  if (*(_QWORD *)(v4 + 24) >= v9)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      sub_100A995BC();
  }
  else
  {
    v11 = *(unsigned __int8 *)(v0 + 121);
    sub_100A83FA8(v9, isUniquelyReferenced_nonNull_native);
    v12 = sub_100518E88(v11);
    if ((v10 & 1) != (v13 & 1))
      return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for PublishingPolicy);
    v6 = v12;
  }
  v15 = *(_QWORD **)(v0 + 40);
  v16 = *(_QWORD *)(v0 + 112);
  if ((v10 & 1) != 0)
  {
    v17 = v15[7];
    v18 = 8 * v6;
    swift_release(*(_QWORD *)(v17 + v18));
    *(_QWORD *)(v17 + v18) = v16;
    goto LABEL_12;
  }
  v19 = *(_BYTE *)(v0 + 121);
  v15[(v6 >> 6) + 8] |= 1 << v6;
  *(_BYTE *)(v15[6] + v6) = v19;
  *(_QWORD *)(v15[7] + 8 * v6) = v16;
  v20 = v15[2];
  v21 = __OFADD__(v20, 1);
  v22 = v20 + 1;
  if (v21)
  {
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  v15[2] = v22;
LABEL_12:
  *(_QWORD *)(*(_QWORD *)(v0 + 48) + 168) = v15;
  swift_bridgeObjectRelease();
  swift_endAccess(v0 + 16);
  v23 = *(_QWORD *)(v0 + 80);
  v24 = *(_QWORD *)(v0 + 88);
  if (v24)
  {
    v25 = __clz(__rbit64(v24));
    v26 = (v24 - 1) & v24;
    v27 = v25 | (v23 << 6);
    v28 = *(_QWORD *)(v0 + 72);
    goto LABEL_14;
  }
  v32 = v23 + 1;
  if (__OFADD__(v23, 1))
    goto LABEL_32;
  v33 = (unint64_t)((1 << *(_BYTE *)(v0 + 120)) + 63) >> 6;
  v28 = *(_QWORD *)(v0 + 72);
  if (v32 < v33)
  {
    v34 = v28 + 56;
    v35 = *(_QWORD *)(v28 + 56 + 8 * v32);
    ++v23;
    if (v35)
    {
LABEL_18:
      v26 = (v35 - 1) & v35;
      v27 = __clz(__rbit64(v35)) + (v23 << 6);
LABEL_14:
      *(_QWORD *)(v0 + 80) = v23;
      *(_QWORD *)(v0 + 88) = v26;
      v29 = *(unsigned __int8 *)(*(_QWORD *)(v28 + 48) + v27);
      *(_BYTE *)(v0 + 121) = v29;
      MyNetworkPublishDateProvider = type metadata accessor for FindMyNetworkPublishDateProvider();
      v31 = swift_allocObject(MyNetworkPublishDateProvider, 112, 15);
      *(_QWORD *)(v0 + 96) = v31;
      swift_defaultActor_initialize(v31);
      __asm { BR              X9 }
    }
    v23 = v32 + 1;
    if (v32 + 1 < v33)
    {
      v35 = *(_QWORD *)(v34 + 8 * v23);
      if (v35)
        goto LABEL_18;
      v23 = v32 + 2;
      if (v32 + 2 < v33)
      {
        v35 = *(_QWORD *)(v34 + 8 * v23);
        if (v35)
          goto LABEL_18;
        v36 = v32 + 3;
        if (v36 < v33)
        {
          v35 = *(_QWORD *)(v34 + 8 * v36);
          if (v35)
          {
            v23 = v36;
            goto LABEL_18;
          }
          while (1)
          {
            v23 = v36 + 1;
            if (__OFADD__(v36, 1))
              break;
            if (v23 >= v33)
              goto LABEL_29;
            v35 = *(_QWORD *)(v34 + 8 * v23);
            ++v36;
            if (v35)
              goto LABEL_18;
          }
LABEL_33:
          __break(1u);
          JUMPOUT(0x100029BF8);
        }
      }
    }
  }
LABEL_29:
  v37 = *(_QWORD *)(v0 + 64);
  swift_release(v28);
  swift_task_dealloc(v37);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100029C1C(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v11;

  v11 = (_QWORD *)swift_task_alloc(dword_1010EBEA4);
  *(_QWORD *)(v5 + 16) = v11;
  *v11 = v5;
  v11[1] = sub_100004A74;
  return sub_100029CA0(a1, a3, a2, a4, a5);
}

uint64_t sub_100029CA0(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v5 + 168) = a4;
  *(_QWORD *)(v5 + 176) = a5;
  *(_BYTE *)(v5 + 296) = a2;
  *(_QWORD *)(v5 + 160) = a1;
  v6 = type metadata accessor for XPCActivity.Criteria.Options(0);
  *(_QWORD *)(v5 + 184) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for XPCActivity.Priority(0);
  *(_QWORD *)(v5 + 192) = v7;
  v8 = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v5 + 200) = v8;
  *(_QWORD *)(v5 + 208) = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for XPCActivity.Criteria(0);
  *(_QWORD *)(v5 + 216) = v9;
  v10 = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(v5 + 224) = v10;
  *(_QWORD *)(v5 + 232) = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10001A9A8(&qword_1010EBAC8);
  *(_QWORD *)(v5 + 240) = v11;
  *(_QWORD *)(v5 + 248) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v11 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100029D78, 0, 0);
}

uint64_t sub_100029D78()
{
  uint64_t v0;
  uint64_t result;
  _QWORD *v2;
  uint64_t (__cdecl *v3)();

  if (qword_1010EA5B0 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v0 + 96, 0, 0);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 56, &qword_1010EE220);
  if (*(_QWORD *)(v0 + 80))
  {
    sub_10000F9FC((__int128 *)(v0 + 56), v0 + 16);
    sub_10001AA44((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
    v3 = (uint64_t (__cdecl *)())((char *)&dword_1010EBAE8 + dword_1010EBAE8);
    v2 = (_QWORD *)swift_task_alloc(unk_1010EBAEC);
    *(_QWORD *)(v0 + 256) = v2;
    *v2 = v0;
    v2[1] = sub_100029E64;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100029E64(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 256);
  *(_QWORD *)(*(_QWORD *)v1 + 264) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100029EC0, 0, 0);
}

uint64_t sub_100029EC0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  _BOOL4 v8;
  uint64_t v9;
  unsigned __int8 v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v1 = *(_QWORD *)(v0 + 264);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
  if (v1)
  {
    v2 = *(_QWORD *)(v0 + 264);
    swift_retain();
    return swift_task_switch(sub_10002A0DC, v2, 0);
  }
  else
  {
    if (qword_1010E98D8 != -1)
      swift_once(&qword_1010E98D8, sub_100027EB4);
    v4 = type metadata accessor for Logger(0);
    v5 = sub_10001A9E8(v4, (uint64_t)qword_1011B6668);
    v6 = Logger.logObject.getter(v5);
    v7 = static os_log_type_t.default.getter(v6);
    v8 = os_log_type_enabled(v6, v7);
    v9 = *(_QWORD *)(v0 + 264);
    if (v8)
    {
      v10 = *(_BYTE *)(v0 + 296);
      v11 = (uint8_t *)swift_slowAlloc(12, -1);
      v12 = swift_slowAlloc(32, -1);
      v19 = v12;
      *(_DWORD *)v11 = 136446210;
      v13 = sub_100882E5C(v10);
      *(_QWORD *)(v0 + 120) = sub_100016940(v13, v14, &v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 120, v0 + 128, v11 + 4, v11 + 12);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "                    FindMyNetworkPublishActivityService has finder disabled.                     Removing publish criteria for policy %{public}s.", v11, 0xCu);
      swift_arrayDestroy(v12, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v12, -1, -1);
      swift_slowDealloc(v11, -1, -1);
    }

    swift_release(v9);
    v15 = *(_QWORD *)(v0 + 248);
    v16 = *(_QWORD *)(v0 + 232);
    v17 = *(_QWORD *)(v0 + 208);
    v18 = *(_QWORD *)(v0 + 184);
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 224) + 56))(*(_QWORD *)(v0 + 160), 1, 1, *(_QWORD *)(v0 + 216));
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_10002A0DC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = v0[33];
  v2 = sub_100006C64((unint64_t *)&qword_1010EBEA8, 255, type metadata accessor for FinderStateObserver, (uint64_t)aE_59);
  v3 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  v0[34] = v3;
  *v3 = v0;
  v3[1] = sub_10002A184;
  return withCheckedContinuation<A>(isolation:function:_:)(v0[31], v0[33], v2, 0x6E4965746174735FLL, 0xEC00000029286F66, sub_100033604, v1, v0[30]);
}

uint64_t sub_10002A184()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 264);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 272));
  swift_release(v1);
  return swift_task_switch(sub_10002A1E0, 0, 0);
}

uint64_t sub_10002A1E0()
{
  uint64_t v0;
  unsigned __int8 *v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  _BOOL4 v12;
  uint64_t v13;
  unsigned __int8 v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v1 = *(unsigned __int8 **)(v0 + 248);
  v2 = type metadata accessor for FinderStateInfo(0);
  if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(v1, 1, v2) == 1)
  {
    sub_100004048((uint64_t)v1, &qword_1010EBAC8);
LABEL_7:
    if (qword_1010E98D8 != -1)
      swift_once(&qword_1010E98D8, sub_100027EB4);
    v8 = type metadata accessor for Logger(0);
    v9 = sub_10001A9E8(v8, (uint64_t)qword_1011B6668);
    v10 = Logger.logObject.getter(v9);
    v11 = static os_log_type_t.default.getter(v10);
    v12 = os_log_type_enabled(v10, v11);
    v13 = *(_QWORD *)(v0 + 264);
    if (v12)
    {
      v14 = *(_BYTE *)(v0 + 296);
      v15 = (uint8_t *)swift_slowAlloc(12, -1);
      v16 = swift_slowAlloc(32, -1);
      v23 = v16;
      *(_DWORD *)v15 = 136446210;
      v17 = sub_100882E5C(v14);
      *(_QWORD *)(v0 + 120) = sub_100016940(v17, v18, &v23);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 120, v0 + 128, v15 + 4, v15 + 12);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "                    FindMyNetworkPublishActivityService has finder disabled.                     Removing publish criteria for policy %{public}s.", v15, 0xCu);
      swift_arrayDestroy(v16, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v16, -1, -1);
      swift_slowDealloc(v15, -1, -1);
    }

    swift_release(v13);
    v19 = *(_QWORD *)(v0 + 248);
    v20 = *(_QWORD *)(v0 + 232);
    v21 = *(_QWORD *)(v0 + 208);
    v22 = *(_QWORD *)(v0 + 184);
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 224) + 56))(*(_QWORD *)(v0 + 160), 1, 1, *(_QWORD *)(v0 + 216));
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v3 = *v1;
  sub_1000306E4((uint64_t)v1);
  if (v3 != 1)
    goto LABEL_7;
  if (qword_1010E9D08 != -1)
    swift_once(&qword_1010E9D08, sub_10059A6E0);
  v4 = qword_1011B71A8;
  *(_QWORD *)(v0 + 280) = qword_1011B71A8;
  v5 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v6 = (_QWORD *)swift_task_alloc(v5);
  *(_QWORD *)(v0 + 288) = v6;
  *v6 = v0;
  v6[1] = sub_10002A4A8;
  return unsafeBlocking<A>(_:)(v0 + 128, sub_100033264, v4, &type metadata for Configuration);
}

uint64_t sub_10002A4A8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 280);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 288));
  swift_release(v1);
  return swift_task_switch(sub_10002A504, 0, 0);
}

uint64_t sub_10002A504()
{
  uint64_t v0;
  double v1;
  double v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  sub_100C1A83C(*(_QWORD *)(v0 + 128));
  v2 = v1;
  swift_bridgeObjectRelease();
  if ((~*(_QWORD *)&v2 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v2 <= -9.22337204e18)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if (v2 < 9.22337204e18)
  {
    v4 = *(_QWORD *)(v0 + 200);
    v3 = *(_QWORD *)(v0 + 208);
    v6 = *(_QWORD *)(v0 + 184);
    v5 = *(_QWORD *)(v0 + 192);
    v7 = *(_BYTE *)(v0 + 296);
    v8 = sub_100882F28(*(_QWORD *)(v0 + 168), *(_QWORD *)(v0 + 176), v7);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v4 + 104))(v3, enum case for XPCActivity.Priority.maintenance(_:), v5);
    sub_10002BD54(v7);
    XPCActivity.Criteria.init(priority:repeating:delay:gracePeriod:interval:options:)(v3, 0, v8, (uint64_t)v2, 0, v6);
    if (qword_1010E98D8 == -1)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  __break(1u);
LABEL_11:
  swift_once(&qword_1010E98D8, sub_100027EB4);
LABEL_5:
  v9 = type metadata accessor for Logger(0);
  v10 = sub_10001A9E8(v9, (uint64_t)qword_1011B6668);
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.default.getter(v11);
  if (os_log_type_enabled(v11, v12))
  {
    v13 = *(unsigned __int8 *)(v0 + 296);
    v14 = (_DWORD *)swift_slowAlloc(32, -1);
    swift_slowAlloc(32, -1);
    *v14 = 136446722;
    __asm { BR              X9 }
  }
  v15 = *(_QWORD *)(v0 + 264);

  swift_release(v15);
  (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 224) + 32))(*(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 232), *(_QWORD *)(v0 + 216));
  v16 = *(_QWORD *)(v0 + 248);
  v17 = *(_QWORD *)(v0 + 232);
  v18 = *(_QWORD *)(v0 + 208);
  v19 = *(_QWORD *)(v0 + 184);
  (*(void (**)(_QWORD, _QWORD, uint64_t, _QWORD))(*(_QWORD *)(v0 + 224) + 56))(*(_QWORD *)(v0 + 160), 0, 1, *(_QWORD *)(v0 + 216));
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10002A940(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  *(_QWORD *)(v4 + 40) = a2;
  *(_QWORD *)(v4 + 48) = a4;
  *(_BYTE *)(v4 + 96) = a3;
  *(_QWORD *)(v4 + 32) = a1;
  v6 = type metadata accessor for XPCActivity.State(0);
  *(_QWORD *)(v4 + 56) = v6;
  v7 = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v4 + 64) = v7;
  v8 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v4 + 72) = swift_task_alloc(v8);
  *(_QWORD *)(v4 + 80) = swift_task_alloc(v8);
  return swift_task_switch(sub_10002A9BC, a4, 0);
}

uint64_t sub_10002A9BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  _BOOL4 v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  void (*v21)(uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t (*v38)(uint64_t, uint64_t, uint64_t);
  uint64_t v39;

  if (qword_1010E98D8 != -1)
    swift_once(&qword_1010E98D8, sub_100027EB4);
  v1 = *(_QWORD *)(v0 + 80);
  v2 = *(_QWORD *)(v0 + 56);
  v3 = *(_QWORD *)(v0 + 64);
  v4 = *(_QWORD *)(v0 + 40);
  v5 = type metadata accessor for Logger(0);
  sub_10001A9E8(v5, (uint64_t)qword_1011B6668);
  v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v7 = v6(v1, v4, v2);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter(v8);
  v10 = os_log_type_enabled(v8, v9);
  v11 = *(_QWORD *)(v0 + 80);
  v12 = *(_QWORD *)(v0 + 56);
  if (v10)
  {
    v13 = *(_BYTE *)(v0 + 96);
    v37 = *(_QWORD *)(v0 + 64);
    v14 = swift_slowAlloc(22, -1);
    v38 = v6;
    v39 = swift_slowAlloc(64, -1);
    v15 = v39;
    *(_DWORD *)v14 = 136446466;
    v16 = sub_100882E5C(v13);
    *(_QWORD *)(v0 + 16) = sub_100016940(v16, v17, &v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v14 + 4, v14 + 12);
    swift_bridgeObjectRelease();
    *(_WORD *)(v14 + 12) = 2080;
    v18 = sub_100006C64(&qword_1010EBE98, 255, (uint64_t (*)(uint64_t))&type metadata accessor for XPCActivity.State, (uint64_t)&protocol conformance descriptor for XPCActivity.State);
    v19 = dispatch thunk of CustomStringConvertible.description.getter(v12, v18);
    *(_QWORD *)(v0 + 24) = sub_100016940(v19, v20, &v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v14 + 14, v14 + 22);
    swift_bridgeObjectRelease();
    v21 = *(void (**)(uint64_t, uint64_t))(v37 + 8);
    v21(v11, v12);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Publish activity %{public}s, state: %s.", (uint8_t *)v14, 0x16u);
    swift_arrayDestroy(v15, 2, (char *)&type metadata for Any + 8);
    v22 = v15;
    v6 = v38;
    swift_slowDealloc(v22, -1, -1);
    swift_slowDealloc(v14, -1, -1);
  }
  else
  {
    v21 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 64) + 8);
    v21(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 56));
  }

  v24 = *(_QWORD *)(v0 + 64);
  v23 = *(_QWORD *)(v0 + 72);
  v25 = *(_QWORD *)(v0 + 56);
  v6(v23, *(_QWORD *)(v0 + 40), v25);
  v26 = (*(uint64_t (**)(uint64_t, uint64_t))(v24 + 88))(v23, v25);
  if (v26 == enum case for XPCActivity.State.checkIn(_:) || v26 == enum case for XPCActivity.State.wait(_:))
    goto LABEL_11;
  if (v26 == enum case for XPCActivity.State.run(_:))
  {
    v30 = swift_task_alloc(dword_1010EB96C);
    *(_QWORD *)(v0 + 88) = v30;
    *(_QWORD *)v30 = v0;
    *(_QWORD *)(v30 + 8) = sub_10002AE0C;
    v31 = *(_QWORD *)(v0 + 48);
    v32 = *(_BYTE *)(v0 + 96);
    *(_QWORD *)(v30 + 144) = v31;
    *(_BYTE *)(v30 + 232) = v32;
    return swift_task_switch(sub_10002AF00, v31, 0);
  }
  if (v26 != enum case for XPCActivity.State.defer(_:))
  {
    if (v26 != enum case for XPCActivity.State.continue(_:) && v26 != enum case for XPCActivity.State.done(_:))
    {
      if (v26 == enum case for XPCActivity.State.invalidated(_:))
        *(_BYTE *)(*(_QWORD *)(v0 + 48) + 176) = 1;
      else
        v21(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 56));
    }
LABEL_11:
    v28 = *(_QWORD *)(v0 + 72);
    swift_task_dealloc(*(_QWORD *)(v0 + 80));
    swift_task_dealloc(v28);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v33 = type metadata accessor for XPCActivity(0);
  v34 = sub_100006C64(&qword_1010EBE90, 255, (uint64_t (*)(uint64_t))&type metadata accessor for XPCActivity, (uint64_t)&protocol conformance descriptor for XPCActivity);
  v35 = dispatch thunk of Actor.unownedExecutor.getter(v33, v34);
  return swift_task_switch(sub_10002AD94, v35, v36);
}

uint64_t sub_10002AD94()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 48);
  dispatch thunk of XPCActivity.defer()();
  return swift_task_switch(sub_10002ADD4, v1, 0);
}

uint64_t sub_10002ADD4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 72);
  swift_task_dealloc(*(_QWORD *)(v0 + 80));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10002AE0C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 88));
  v1 = type metadata accessor for XPCActivity(0);
  v2 = sub_100006C64(&qword_1010EBE90, 255, (uint64_t (*)(uint64_t))&type metadata accessor for XPCActivity, (uint64_t)&protocol conformance descriptor for XPCActivity);
  v3 = dispatch thunk of Actor.unownedExecutor.getter(v1, v2);
  return swift_task_switch(sub_10002AEA4, v3, v4);
}

uint64_t sub_10002AEA4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 48);
  dispatch thunk of XPCActivity.done()();
  return swift_task_switch(sub_10003360C, v1, 0);
}

uint64_t sub_10002AEE4(char a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 144) = v1;
  *(_BYTE *)(v2 + 232) = a1;
  return swift_task_switch(sub_10002AF00, v1, 0);
}

uint64_t sub_10002AF00()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t MyNetworkPublishDateProvider;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  _QWORD *v12;
  uint64_t (*v14)(char);

  if (qword_1010E98D8 != -1)
    swift_once(&qword_1010E98D8, sub_100027EB4);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_10001A9E8(v1, (uint64_t)qword_1011B6668);
  *(_QWORD *)(v0 + 152) = v2;
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = *(unsigned __int8 *)(v0 + 232);
    v6 = (_DWORD *)swift_slowAlloc(12, -1);
    swift_slowAlloc(32, -1);
    *v6 = 136446210;
    __asm { BR              X9 }
  }

  MyNetworkPublishDateProvider = type metadata accessor for FindMyNetworkPublishDateProvider();
  v8 = swift_allocObject(MyNetworkPublishDateProvider, 112, 15);
  *(_QWORD *)(v0 + 160) = v8;
  swift_defaultActor_initialize(v8);
  v9 = sub_100CA7D40((uint64_t)&off_101047F18);
  v10 = sub_1006B7904();
  v11 = sub_100A0658C(v10, v9) & 1;
  *(_BYTE *)(v0 + 233) = v11;
  swift_bridgeObjectRelease();
  v14 = (uint64_t (*)(char))((char *)&dword_1010EBE38 + dword_1010EBE38);
  v12 = (_QWORD *)swift_task_alloc(unk_1010EBE3C);
  *(_QWORD *)(v0 + 168) = v12;
  *v12 = v0;
  v12[1] = sub_10002B200;
  return v14(v11);
}

uint64_t sub_10002B200(char a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  _QWORD *v10;

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 168);
  v5 = *v1;
  swift_task_dealloc(v4);
  if ((a1 & 1) != 0)
  {
    v6 = swift_task_alloc(dword_1010EB97C);
    *(_QWORD *)(v3 + 224) = v6;
    *(_QWORD *)v6 = v5;
    *(_QWORD *)(v6 + 8) = sub_10002B958;
    v7 = *(_BYTE *)(v3 + 233);
    v8 = *(_QWORD *)(v3 + 144);
    *(_QWORD *)(v6 + 120) = v8;
    *(_BYTE *)(v6 + 176) = v7;
    return swift_task_switch(sub_10002C224, v8, 0);
  }
  else
  {
    v10 = (_QWORD *)swift_task_alloc(dword_1010EB974);
    *(_QWORD *)(v3 + 176) = v10;
    *v10 = v5;
    v10[1] = sub_10002B2C4;
    return sub_10002BEEC(*(_BYTE *)(v3 + 232));
  }
}

uint64_t sub_10002B2C4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 176);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 144);
  *(_QWORD *)(*(_QWORD *)v1 + 184) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10002B324, v3, 0);
}

uint64_t sub_10002B324()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  _QWORD *v4;
  uint64_t (__cdecl *v5)();

  v1 = qword_1010EA5B0;
  swift_retain();
  if (v1 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v0 + 96, 0, 0);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 56, &qword_1010EE220);
  if (*(_QWORD *)(v0 + 80))
  {
    v3 = *(_QWORD *)(v0 + 144);
    sub_10000F9FC((__int128 *)(v0 + 56), v0 + 16);
    swift_release(v3);
    sub_10001AA44((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
    v5 = (uint64_t (__cdecl *)())((char *)&dword_1010EBB88 + dword_1010EBB88);
    v4 = (_QWORD *)swift_task_alloc(unk_1010EBB8C);
    *(_QWORD *)(v0 + 192) = v4;
    *v4 = v0;
    v4[1] = sub_10002B424;
    return v5();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10002B424(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 192);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 144);
  *(_QWORD *)(*(_QWORD *)v1 + 200) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10002B484, v3, 0);
}

uint64_t sub_10002B484()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;

  v1 = (_QWORD *)(v0 + 16);
  if (*(_QWORD *)(v0 + 200))
  {
    v2 = *(_QWORD *)(v0 + 184);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    v3 = dword_101103F64;
    swift_retain();
    v4 = (_QWORD *)swift_task_alloc(v3);
    *(_QWORD *)(v0 + 208) = v4;
    *v4 = v0;
    v4[1] = sub_10002B880;
    return sub_1006B1EAC(v2);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    v6 = sub_100033220();
    v7 = swift_allocError(&type metadata for DaemonError, v6, 0, 0);
    *v8 = 0xD00000000000001DLL;
    v8[1] = 0x8000000100EC5EF0;
    swift_willThrow(v7);
    swift_errorRetain(v7);
    v9 = swift_errorRetain(v7);
    v10 = Logger.logObject.getter(v9);
    v11 = static os_log_type_t.error.getter(v10);
    if (os_log_type_enabled(v10, v11))
    {
      v12 = *(unsigned __int8 *)(v0 + 232);
      v13 = (_DWORD *)swift_slowAlloc(22, -1);
      swift_slowAlloc(8, -1);
      swift_slowAlloc(32, -1);
      *v13 = 136446466;
      __asm { BR              X9 }
    }
    v14 = *(_QWORD *)(v0 + 160);
    swift_release(*(_QWORD *)(v0 + 184));
    swift_release(v14);
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    swift_errorRelease(v7);

    *(_BYTE *)(*(_QWORD *)(v0 + 144) + 176) = 1;
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_10002B880(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *(_QWORD **)v2;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 208);
  *(_QWORD *)(*(_QWORD *)v2 + 216) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = v4[18];
    v7 = sub_10002B9EC;
  }
  else
  {
    v8 = v4[25];
    v9 = v4[23];
    v10 = v4[18];
    swift_release(v9);
    swift_release(v8);

    v7 = sub_10002B910;
    v6 = v10;
  }
  return swift_task_switch(v7, v6, 0);
}

uint64_t sub_10002B910()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 160);
  swift_release(*(_QWORD *)(v0 + 184));
  swift_release(v1);
  *(_BYTE *)(*(_QWORD *)(v0 + 144) + 176) = 1;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10002B958()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 144);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 224));
  return swift_task_switch(sub_10002B9B0, v1, 0);
}

uint64_t sub_10002B9B0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 160));
  *(_BYTE *)(*(_QWORD *)(v0 + 144) + 176) = 1;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10002B9EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;

  v1 = *(_QWORD *)(v0 + 200);
  swift_release(*(_QWORD *)(v0 + 184));
  swift_release(v1);
  v2 = *(_QWORD *)(v0 + 216);
  swift_errorRetain(v2);
  v3 = swift_errorRetain(v2);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = *(unsigned __int8 *)(v0 + 232);
    v7 = (_DWORD *)swift_slowAlloc(22, -1);
    swift_slowAlloc(8, -1);
    swift_slowAlloc(32, -1);
    *v7 = 136446466;
    __asm { BR              X9 }
  }
  v8 = *(_QWORD *)(v0 + 160);
  swift_release(*(_QWORD *)(v0 + 184));
  swift_release(v8);
  swift_errorRelease(v2);
  swift_errorRelease(v2);
  swift_errorRelease(v2);

  *(_BYTE *)(*(_QWORD *)(v0 + 144) + 176) = 1;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_10002BD54(char a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2 = type metadata accessor for XPCActivity.Criteria.Options(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v4);
  v9 = (char *)&v14 - v8;
  v10 = static XPCActivity.Criteria.Options.usesDuetPowerBudgeting.getter(v7);
  static XPCActivity.Criteria.Options.requiresNetwork.getter(v10);
  sub_10002CD24(v9, (uint64_t)v6);
  v11 = *(void (**)(char *, uint64_t))(v3 + 8);
  v11(v6, v2);
  v12 = ((uint64_t (*)(char *, uint64_t))v11)(v9, v2);
  static XPCActivity.Criteria.Options.usesDuetNetworkBudgeting.getter(v12);
  sub_10002CD24(v9, (uint64_t)v6);
  v11(v6, v2);
  v13 = ((uint64_t (*)(char *, uint64_t))v11)(v9, v2);
  static XPCActivity.Criteria.Options.preventDeviceSleep.getter(v13);
  sub_10002CD24(v9, (uint64_t)v6);
  v11(v6, v2);
  v11(v9, v2);
  __asm { BR              X10 }
}

uint64_t sub_10002BE70()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t (*v3)(char *, uint64_t);
  uint64_t v4;

  ((void (*)(void))static XPCActivity.Criteria.Options.allowBattery.getter)();
  sub_10002CD24(v2, v1);
  v3((char *)v1, v0);
  v4 = v3(v2, v0);
  ((void (*)(uint64_t))static XPCActivity.Criteria.Options.requiresInexpensiveNetwork.getter)(v4);
  sub_10002CD24(v2, v1);
  v3((char *)v1, v0);
  return v3(v2, v0);
}

uint64_t sub_10002BEEC(char a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  *(_QWORD *)(v2 + 40) = v1;
  *(_BYTE *)(v2 + 96) = a1;
  v3 = (*(_QWORD *)(*(_QWORD *)(sub_10001A9A8(&qword_1010EBE20) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v2 + 48) = swift_task_alloc(v3);
  *(_QWORD *)(v2 + 56) = swift_task_alloc(v3);
  return swift_task_switch(sub_10002BF5C, v1, 0);
}

uint64_t sub_10002BF5C()
{
  _QWORD *v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  char *v4;
  uint64_t v5;
  void (*v6)(char *, uint64_t, uint64_t, uint64_t);

  v1 = type metadata accessor for AnalyticsEvent(0);
  v2 = (char *)swift_allocObject(v1, *(unsigned int *)(v1 + 48), *(unsigned __int16 *)(v1 + 52));
  v0[8] = v2;
  swift_defaultActor_initialize(v2);
  v3 = sub_1006B8B38((uint64_t)_swiftEmptyArrayStorage);
  *((_QWORD *)v2 + 14) = v3;
  UUID.init()(v3);
  v4 = &v2[OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_startTime];
  v5 = type metadata accessor for DispatchTime(0);
  v0[9] = v5;
  v6 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56);
  v0[10] = v6;
  v6(v4, 1, 1, v5);
  v6(&v2[OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_endTime], 1, 1, v5);
  *((_QWORD *)v2 + 15) = 0xD000000000000034;
  *((_QWORD *)v2 + 16) = 0x8000000100EC5DF0;
  return swift_task_switch(sub_10002C058, v2, 0);
}

uint64_t sub_10002C058(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  void (*v3)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = v1[9];
  v3 = (void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v1[10];
  v4 = v1[7];
  v5 = v1[8];
  v7 = v1[5];
  v6 = v1[6];
  static DispatchTime.now()(a1);
  v3(v4, 0, 1, v2);
  sub_100005CF0(v4, v6, &qword_1010EBE20);
  v8 = v5 + OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_startTime;
  swift_beginAccess(v5 + OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_startTime, v1 + 2, 33, 0);
  sub_100033150(v6, v8);
  swift_endAccess(v1 + 2);
  return swift_task_switch(sub_10002C11C, v7, 0);
}

uint64_t sub_10002C11C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(uint64_t, uint64_t, char);

  v1 = unk_10111D5F4;
  v4 = (uint64_t (*)(uint64_t, uint64_t, char))((char *)&dword_10111D5F0 + dword_10111D5F0);
  swift_retain();
  v2 = (_QWORD *)swift_task_alloc(v1);
  *(_QWORD *)(v0 + 88) = v2;
  *v2 = v0;
  v2[1] = sub_10002C190;
  return v4(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 40), *(_BYTE *)(v0 + 96));
}

uint64_t sub_10002C190()
{
  uint64_t v0;
  uint64_t *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = (_QWORD *)*v1;
  v3 = *(_QWORD *)(*v1 + 88);
  v4 = *(_QWORD *)(*v1 + 40);
  v5 = *v1;
  swift_task_dealloc(v3);
  swift_release(v4);
  if (v0)
    swift_errorRelease(v0);
  v6 = v2[6];
  swift_task_dealloc(v2[7]);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(_QWORD))(v5 + 8))(v2[8]);
}

uint64_t sub_10002C208(char a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 120) = v1;
  *(_BYTE *)(v2 + 176) = a1;
  return swift_task_switch(sub_10002C224, v1, 0);
}

uint64_t sub_10002C224()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  _QWORD *v4;
  uint64_t (__cdecl *v5)();

  v1 = qword_1010EA5B0;
  swift_retain();
  if (v1 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v0 + 96, 0, 0);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 56, &qword_1010EE220);
  if (*(_QWORD *)(v0 + 80))
  {
    v3 = *(_QWORD *)(v0 + 120);
    sub_10000F9FC((__int128 *)(v0 + 56), v0 + 16);
    swift_release(v3);
    sub_10001AA44((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
    v5 = (uint64_t (__cdecl *)())((char *)&dword_1010EBC00 + dword_1010EBC00);
    v4 = (_QWORD *)swift_task_alloc(unk_1010EBC04);
    *(_QWORD *)(v0 + 128) = v4;
    *v4 = v0;
    v4[1] = sub_10002C324;
    return v5();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10002C324(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 120);
  v2 = *(_QWORD *)(*(_QWORD *)v1 + 128);
  *(_QWORD *)(*(_QWORD *)v1 + 136) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10002C380, v3, 0);
}

uint64_t sub_10002C380()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  char *v4;
  uint64_t v5;
  void (*v6)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  _QWORD *v8;
  uint64_t (*v10)(uint64_t, uint64_t, char);

  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
  v1 = type metadata accessor for AnalyticsEvent(0);
  v2 = (char *)swift_allocObject(v1, *(unsigned int *)(v1 + 48), *(unsigned __int16 *)(v1 + 52));
  *(_QWORD *)(v0 + 144) = v2;
  swift_defaultActor_initialize(v2);
  v3 = sub_1006B8B38((uint64_t)_swiftEmptyArrayStorage);
  *((_QWORD *)v2 + 14) = v3;
  UUID.init()(v3);
  v4 = &v2[OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_startTime];
  v5 = type metadata accessor for DispatchTime(0);
  v6 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56);
  v6(v4, 1, 1, v5);
  v6(&v2[OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_endTime], 1, 1, v5);
  *((_QWORD *)v2 + 15) = 0xD000000000000037;
  *((_QWORD *)v2 + 16) = 0x8000000100EC5D70;
  v7 = unk_10111D5EC;
  v10 = (uint64_t (*)(uint64_t, uint64_t, char))((char *)&dword_10111D5E8 + dword_10111D5E8);
  swift_retain();
  v8 = (_QWORD *)swift_task_alloc(v7);
  *(_QWORD *)(v0 + 152) = v8;
  *v8 = v0;
  v8[1] = sub_10002C4C4;
  return v10((uint64_t)v2, *(_QWORD *)(v0 + 136), *(_BYTE *)(v0 + 176));
}

uint64_t sub_10002C4C4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 136);
  swift_task_dealloc(*(_QWORD *)(*v1 + 152));
  swift_release(v3);
  v4 = *(_QWORD *)(v2 + 120);
  if (v0)
  {
    swift_errorRelease(v0);
    v5 = sub_100033610;
  }
  else
  {
    v5 = sub_10002C544;
  }
  return swift_task_switch(v5, v4, 0);
}

uint64_t sub_10002C544()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t **v3;

  v1 = type metadata accessor for AnalyticsPublisher();
  v2 = swift_allocObject(v1, 112, 15);
  v0[20] = v2;
  swift_defaultActor_initialize(v2);
  v3 = (uint64_t **)swift_task_alloc(dword_10111D22C);
  v0[21] = (uint64_t)v3;
  *v3 = v0;
  v3[1] = (uint64_t *)sub_10002C5B0;
  return sub_100CD63AC(v0[18]);
}

uint64_t sub_10002C5B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 160);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 120);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 168));
  swift_release(v1);
  return swift_task_switch(sub_10002C610, v2, 0);
}

uint64_t sub_10002C610()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 136);
  swift_release(*(_QWORD *)(v0 + 144));
  swift_release(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10002C648(uint64_t a1, char a2)
{
  uint64_t v2;

  *(_BYTE *)(v2 + 264) = a2;
  *(_QWORD *)(v2 + 240) = a1;
  return swift_task_switch(sub_10002C664, 0, 0);
}

uint64_t sub_10002C664()
{
  uint64_t v0;
  _QWORD *v1;
  char v3;
  uint64_t v4;
  uint64_t inited;
  unint64_t v6;

  if (*(_QWORD *)(v0 + 240))
  {
    v1 = (_QWORD *)swift_task_alloc(dword_10111BB54);
    *(_QWORD *)(v0 + 248) = v1;
    *v1 = v0;
    v1[1] = sub_10002C7A0;
    return sub_100C640C0();
  }
  else
  {
    v3 = *(_BYTE *)(v0 + 264);
    v4 = sub_10001A9A8(&qword_1010EBE10);
    inited = swift_initStackObject(v4, v0 + 16);
    *(_OWORD *)(inited + 16) = xmmword_100E221E0;
    *(_QWORD *)(inited + 32) = 0x6E6F73616572;
    *(_QWORD *)(inited + 40) = 0xE600000000000000;
    *(_QWORD *)(inited + 72) = &type metadata for String;
    *(_QWORD *)(inited + 80) = sub_1000330C8();
    *(_QWORD *)(inited + 48) = 0xD000000000000012;
    *(_QWORD *)(inited + 56) = 0x8000000100EC5DB0;
    *(_WORD *)(inited + 88) = 1;
    *(_QWORD *)(inited + 96) = 0xD000000000000010;
    *(_QWORD *)(inited + 104) = 0x8000000100EC5DD0;
    *(_QWORD *)(inited + 136) = &type metadata for Int64;
    *(_QWORD *)(inited + 144) = sub_10003310C();
    *(_QWORD *)(inited + 112) = 0;
    *(_WORD *)(inited + 152) = 2;
    *(_QWORD *)(inited + 160) = 0x7265747461426E6FLL;
    *(_QWORD *)(inited + 168) = 0xE900000000000079;
    *(_BYTE *)(inited + 176) = v3;
    *(_WORD *)(inited + 216) = 0;
    v6 = sub_1006B8C78(inited);
    return (*(uint64_t (**)(unint64_t))(v0 + 8))(v6);
  }
}

uint64_t sub_10002C7A0(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t (*v5)();

  v4 = *v2;
  swift_task_dealloc(*(_QWORD *)(*v2 + 248));
  if (v1)
  {
    swift_errorRelease(v1);
    v5 = sub_10002C928;
  }
  else
  {
    *(_QWORD *)(v4 + 256) = a1;
    v5 = sub_10002C818;
  }
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_10002C818()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t inited;
  unint64_t v5;

  v1 = *(_QWORD *)(v0 + 256);
  v2 = *(_BYTE *)(v0 + 264);
  v3 = sub_10001A9A8(&qword_1010EBE10);
  inited = swift_initStackObject(v3, v0 + 16);
  *(_OWORD *)(inited + 16) = xmmword_100E221E0;
  *(_QWORD *)(inited + 32) = 0x6E6F73616572;
  *(_QWORD *)(inited + 40) = 0xE600000000000000;
  *(_QWORD *)(inited + 72) = &type metadata for String;
  *(_QWORD *)(inited + 80) = sub_1000330C8();
  *(_QWORD *)(inited + 48) = 0xD000000000000012;
  *(_QWORD *)(inited + 56) = 0x8000000100EC5DB0;
  *(_WORD *)(inited + 88) = 1;
  *(_QWORD *)(inited + 96) = 0xD000000000000010;
  *(_QWORD *)(inited + 104) = 0x8000000100EC5DD0;
  *(_QWORD *)(inited + 136) = &type metadata for Int64;
  *(_QWORD *)(inited + 144) = sub_10003310C();
  *(_QWORD *)(inited + 112) = v1;
  *(_WORD *)(inited + 152) = 2;
  *(_QWORD *)(inited + 160) = 0x7265747461426E6FLL;
  *(_QWORD *)(inited + 168) = 0xE900000000000079;
  *(_BYTE *)(inited + 176) = v2;
  *(_WORD *)(inited + 216) = 0;
  v5 = sub_1006B8C78(inited);
  return (*(uint64_t (**)(unint64_t))(v0 + 8))(v5);
}

uint64_t sub_10002C928()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t inited;
  unint64_t v4;

  v1 = *(_BYTE *)(v0 + 264);
  v2 = sub_10001A9A8(&qword_1010EBE10);
  inited = swift_initStackObject(v2, v0 + 16);
  *(_OWORD *)(inited + 16) = xmmword_100E221E0;
  *(_QWORD *)(inited + 32) = 0x6E6F73616572;
  *(_QWORD *)(inited + 40) = 0xE600000000000000;
  *(_QWORD *)(inited + 72) = &type metadata for String;
  *(_QWORD *)(inited + 80) = sub_1000330C8();
  *(_QWORD *)(inited + 48) = 0xD000000000000012;
  *(_QWORD *)(inited + 56) = 0x8000000100EC5DB0;
  *(_WORD *)(inited + 88) = 1;
  *(_QWORD *)(inited + 96) = 0xD000000000000010;
  *(_QWORD *)(inited + 104) = 0x8000000100EC5DD0;
  *(_QWORD *)(inited + 136) = &type metadata for Int64;
  *(_QWORD *)(inited + 144) = sub_10003310C();
  *(_QWORD *)(inited + 112) = 0;
  *(_WORD *)(inited + 152) = 2;
  *(_QWORD *)(inited + 160) = 0x7265747461426E6FLL;
  *(_QWORD *)(inited + 168) = 0xE900000000000079;
  *(_BYTE *)(inited + 176) = v1;
  *(_WORD *)(inited + 216) = 0;
  v4 = sub_1006B8C78(inited);
  return (*(uint64_t (**)(unint64_t))(v0 + 8))(v4);
}

uint64_t sub_10002CA2C()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 128));
  swift_bridgeObjectRelease();
  swift_defaultActor_destroy(v0);
  return swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for FindMyNetworkPublishActivityService()
{
  return objc_opt_self(_TtC12searchpartyd35FindMyNetworkPublishActivityService);
}

uint64_t DeviceIdentityUtility.unownedExecutor.getter()
{
  uint64_t v0;

  return v0;
}

uint64_t sub_10002CA8C()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;

  v1[2] = v0;
  v1[3] = *v0;
  v2 = sub_10001A9A8(&qword_1010F46C0);
  v1[4] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10002CAF0, v0, 0);
}

uint64_t sub_10002CAF0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  __int128 v7;

  v1 = *(_QWORD *)(v0 + 32);
  v2 = type metadata accessor for TaskPriority(0);
  v7 = *(_OWORD *)(v0 + 16);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
  v3 = swift_allocObject(&unk_10104F598, 48, 7);
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)(v3 + 24) = 0;
  *(_OWORD *)(v3 + 32) = v7;
  swift_retain();
  v4 = sub_100028774(v1, (uint64_t)&unk_1010EBAB8, v3);
  swift_release(v4);
  sub_100004048(v1, &qword_1010F46C0);
  v5 = (_QWORD *)swift_task_alloc(dword_1010EB964);
  *(_QWORD *)(v0 + 40) = v5;
  *v5 = v0;
  v5[1] = sub_10002CBC4;
  return sub_1000292EC();
}

uint64_t sub_10002CBC4()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v3;

  v1 = *(_QWORD *)(*v0 + 32);
  v3 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 40));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_10002CC14()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 112);
  swift_bridgeObjectRetain(*(_QWORD *)(*(_QWORD *)v0 + 120));
  return v1;
}

uint64_t sub_10002CC44(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = sub_100006C64(&qword_1010EBAA8, a2, (uint64_t (*)(uint64_t))type metadata accessor for FindMyNetworkPublishActivityService, (uint64_t)&unk_100E22310);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_10002CC80()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10002CCAC(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_1010EBAB4);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_100004A74;
  return sub_100027F44(a1, v4, v5, v6);
}

uint64_t sub_10002CD24(char *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  void (*v16)(char *, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  char v19;
  char *v20;
  void (*v21)(char *, char *, uint64_t);
  char *v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;

  v29 = a1;
  v4 = sub_10001A9A8(&qword_1010EBEB0);
  v5 = __chkstk_darwin(v4);
  v27 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v8 = (char *)&v24 - v7;
  v9 = type metadata accessor for XPCActivity.Criteria.Options(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v24 - v14;
  v16 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v26 = v2;
  v16(v13, v2, v9);
  v25 = sub_100006C64(&qword_1010EBEB8, 255, (uint64_t (*)(uint64_t))&type metadata accessor for XPCActivity.Criteria.Options, (uint64_t)&protocol conformance descriptor for XPCActivity.Criteria.Options);
  dispatch thunk of SetAlgebra.intersection(_:)(a2, v9);
  v17 = sub_100006C64(&qword_1010EBEC0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for XPCActivity.Criteria.Options, (uint64_t)&protocol conformance descriptor for XPCActivity.Criteria.Options);
  v18 = a2;
  v19 = dispatch thunk of static Equatable.== infix(_:_:)(v15, a2, v9, v17) ^ 1;
  v28 = v4;
  v20 = &v8[*(int *)(v4 + 48)];
  *v8 = v19 & 1;
  if ((v19 & 1) != 0)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v15, v9);
    v16(v20, v18, v9);
    v16(v13, v18, v9);
    dispatch thunk of SetAlgebra.formUnion(_:)(v13, v9, v25);
    v21 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
  }
  else
  {
    v21 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
    v21(v20, v15, v9);
  }
  v22 = &v27[*(int *)(v28 + 48)];
  v21(v22, v20, v9);
  v21(v29, v22, v9);
  return v19 & 1;
}

uint64_t sub_10002CF54@<X0>(uint64_t a1@<X8>)
{
  id v2;
  NSString v3;
  id v4;
  uint64_t v5;
  int v6;
  uint64_t v8;
  _OWORD v9[2];
  _BYTE v10[24];
  uint64_t v11;

  v2 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v3 = String._bridgeToObjectiveC()();
  v4 = objc_msgSend(v2, "objectForKey:", v3);

  if (v4)
  {
    _bridgeAnyObjectToAny(_:)(v9, v4);
    swift_unknownObjectRelease(v4);
  }
  else
  {
    memset(v9, 0, sizeof(v9));
  }
  sub_100005CF0((uint64_t)v9, (uint64_t)v10, (uint64_t *)&unk_1010F6390);
  if (v11)
  {
    v5 = type metadata accessor for Date(0);
    v6 = swift_dynamicCast(a1, v10, (char *)&type metadata for Any + 8, v5, 6);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(a1, v6 ^ 1u, 1, v5);
  }
  else
  {
    sub_100004048((uint64_t)v10, (uint64_t *)&unk_1010F6390);
    v8 = type metadata accessor for Date(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(a1, 1, 1, v8);
  }
}

uint64_t sub_10002D0A8()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 24) = v0;
  *(_QWORD *)(v1 + 32) = *v0;
  return swift_task_switch(sub_10002D0C8, 0, 0);
}

uint64_t sub_10002D0C8()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = swift_task_alloc(32);
  *(_QWORD *)(v0 + 40) = v1;
  *(_OWORD *)(v1 + 16) = *(_OWORD *)(v0 + 24);
  v2 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v0 + 48) = v2;
  *v2 = v0;
  v2[1] = sub_10002D168;
  return withCheckedContinuation<A>(isolation:function:_:)(v2, 0, 0, 0x4970757472617473, 0xEF2928656E6F4473, sub_100033730, v1, (char *)&type metadata for () + 8);
}

uint64_t sub_10002D168()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 40);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 48));
  swift_task_dealloc(v1);
  return swift_task_switch(sub_10002D1C4, 0, 0);
}

uint64_t sub_10002D1C4()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  v1 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v0 + 56) = v1;
  v2 = sub_10001A9A8(&qword_1010EBB90);
  *v1 = v0;
  v1[1] = sub_10001C878;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 16, 0, 0, 0x6976726553746567, 0xEC00000029286563, sub_1000309BC, *(_QWORD *)(v0 + 24), v2);
}

uint64_t sub_10002D258()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 24) = v0;
  *(_QWORD *)(v1 + 32) = *v0;
  return swift_task_switch(sub_10002D278, 0, 0);
}

uint64_t sub_10002D278()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = swift_task_alloc(32);
  *(_QWORD *)(v0 + 40) = v1;
  *(_OWORD *)(v1 + 16) = *(_OWORD *)(v0 + 24);
  v2 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v0 + 48) = v2;
  *v2 = v0;
  v2[1] = sub_10002D318;
  return withCheckedContinuation<A>(isolation:function:_:)(v2, 0, 0, 0x4970757472617473, 0xEF2928656E6F4473, sub_100030720, v1, (char *)&type metadata for () + 8);
}

uint64_t sub_10002D318()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 40);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 48));
  swift_task_dealloc(v1);
  return swift_task_switch(sub_10002D374, 0, 0);
}

uint64_t sub_10002D374()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  v1 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v0 + 56) = v1;
  v2 = sub_10001A9A8(&qword_1010EBB00);
  *v1 = v0;
  v1[1] = sub_10001C878;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 16, 0, 0, 0x6976726553746567, 0xEC00000029286563, sub_100030728, *(_QWORD *)(v0 + 24), v2);
}

uint64_t sub_10002D408()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 24) = v0;
  *(_QWORD *)(v1 + 32) = *v0;
  return swift_task_switch(sub_10002D428, 0, 0);
}

uint64_t sub_10002D428()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = swift_task_alloc(32);
  *(_QWORD *)(v0 + 40) = v1;
  *(_OWORD *)(v1 + 16) = *(_OWORD *)(v0 + 24);
  v2 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v0 + 48) = v2;
  *v2 = v0;
  v2[1] = sub_10002D4C8;
  return withCheckedContinuation<A>(isolation:function:_:)(v2, 0, 0, 0x4970757472617473, 0xEF2928656E6F4473, sub_100033730, v1, (char *)&type metadata for () + 8);
}

uint64_t sub_10002D4C8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 40);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 48));
  swift_task_dealloc(v1);
  return swift_task_switch(sub_10002D524, 0, 0);
}

uint64_t sub_10002D524()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  v1 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v0 + 56) = v1;
  v2 = sub_10001A9A8(&qword_1010EBC08);
  *v1 = v0;
  v1[1] = sub_10001C878;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 16, 0, 0, 0x6976726553746567, 0xEC00000029286563, sub_100030B70, *(_QWORD *)(v0 + 24), v2);
}

uint64_t sub_10002D5B8()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 24) = v0;
  *(_QWORD *)(v1 + 32) = *v0;
  return swift_task_switch(sub_10002D5D8, 0, 0);
}

uint64_t sub_10002D5D8()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = swift_task_alloc(32);
  *(_QWORD *)(v0 + 40) = v1;
  *(_OWORD *)(v1 + 16) = *(_OWORD *)(v0 + 24);
  v2 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v0 + 48) = v2;
  *v2 = v0;
  v2[1] = sub_10002D678;
  return withCheckedContinuation<A>(isolation:function:_:)(v2, 0, 0, 0x4970757472617473, 0xEF2928656E6F4473, sub_100033730, v1, &type metadata for () + 1);
}

uint64_t sub_10002D678()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 40);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 48));
  swift_task_dealloc(v1);
  return swift_task_switch(sub_10002D6D4, 0, 0);
}

uint64_t sub_10002D6D4()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  v1 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v0 + 56) = v1;
  v2 = sub_10001A9A8(&qword_1010EBC78);
  *v1 = v0;
  v1[1] = sub_10001C878;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 16, 0, 0, 0x6976726553746567, 0xEC00000029286563, sub_100030D0C, *(_QWORD *)(v0 + 24), v2);
}

uint64_t sub_10002D768()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 24) = v0;
  *(_QWORD *)(v1 + 32) = *v0;
  return swift_task_switch(sub_10002D788, 0, 0);
}

uint64_t sub_10002D788()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = swift_task_alloc(32);
  *(_QWORD *)(v0 + 40) = v1;
  *(_OWORD *)(v1 + 16) = *(_OWORD *)(v0 + 24);
  v2 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v0 + 48) = v2;
  *v2 = v0;
  v2[1] = sub_10002D828;
  return withCheckedContinuation<A>(isolation:function:_:)(v2, 0, 0, 0x4970757472617473, 0xEF2928656E6F4473, sub_100033730, v1, (char *)&type metadata for () + 8);
}

uint64_t sub_10002D828()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 40);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 48));
  swift_task_dealloc(v1);
  return swift_task_switch(sub_10002D884, 0, 0);
}

uint64_t sub_10002D884()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  v1 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v0 + 56) = v1;
  v2 = sub_10001A9A8(&qword_1010EBBC0);
  *v1 = v0;
  v1[1] = sub_10001C878;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 16, 0, 0, 0x6976726553746567, 0xEC00000029286563, sub_100030A5C, *(_QWORD *)(v0 + 24), v2);
}

uint64_t sub_10002D918()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 24) = v0;
  *(_QWORD *)(v1 + 32) = *v0;
  return swift_task_switch(sub_10002D938, 0, 0);
}

uint64_t sub_10002D938()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = swift_task_alloc(32);
  *(_QWORD *)(v0 + 40) = v1;
  *(_OWORD *)(v1 + 16) = *(_OWORD *)(v0 + 24);
  v2 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v0 + 48) = v2;
  *v2 = v0;
  v2[1] = sub_10002D9D8;
  return withCheckedContinuation<A>(isolation:function:_:)(v2, 0, 0, 0x4970757472617473, 0xEF2928656E6F4473, sub_100033730, v1, (char *)&type metadata for () + 8);
}

uint64_t sub_10002D9D8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 40);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 48));
  swift_task_dealloc(v1);
  return swift_task_switch(sub_10002DA34, 0, 0);
}

uint64_t sub_10002DA34()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  v1 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v0 + 56) = v1;
  v2 = sub_10001A9A8(&qword_1010EBB18);
  *v1 = v0;
  v1[1] = sub_10001C878;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 16, 0, 0, 0x6976726553746567, 0xEC00000029286563, sub_1000307C8, *(_QWORD *)(v0 + 24), v2);
}

uint64_t sub_10002DAC8()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 24) = v0;
  *(_QWORD *)(v1 + 32) = *v0;
  return swift_task_switch(sub_10002DAE8, 0, 0);
}

uint64_t sub_10002DAE8()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = swift_task_alloc(32);
  *(_QWORD *)(v0 + 40) = v1;
  *(_OWORD *)(v1 + 16) = *(_OWORD *)(v0 + 24);
  v2 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v0 + 48) = v2;
  *v2 = v0;
  v2[1] = sub_10002DB88;
  return withCheckedContinuation<A>(isolation:function:_:)(v2, 0, 0, 0x4970757472617473, 0xEF2928656E6F4473, sub_100033730, v1, &type metadata for () + 1);
}

uint64_t sub_10002DB88()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 40);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 48));
  swift_task_dealloc(v1);
  return swift_task_switch(sub_10002DBE4, 0, 0);
}

uint64_t sub_10002DBE4()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  v1 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v0 + 56) = v1;
  v2 = sub_10001A9A8(&qword_1010EBC48);
  *v1 = v0;
  v1[1] = sub_10001C878;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 16, 0, 0, 0x6976726553746567, 0xEC00000029286563, sub_100030C54, *(_QWORD *)(v0 + 24), v2);
}

uint64_t sub_10002DC78()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 24) = v0;
  *(_QWORD *)(v1 + 32) = *v0;
  return swift_task_switch(sub_10002DC98, 0, 0);
}

uint64_t sub_10002DC98()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = swift_task_alloc(32);
  *(_QWORD *)(v0 + 40) = v1;
  *(_OWORD *)(v1 + 16) = *(_OWORD *)(v0 + 24);
  v2 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v0 + 48) = v2;
  *v2 = v0;
  v2[1] = sub_10002DD38;
  return withCheckedContinuation<A>(isolation:function:_:)(v2, 0, 0, 0x4970757472617473, 0xEF2928656E6F4473, sub_100033730, v1, (char *)&type metadata for () + 8);
}

uint64_t sub_10002DD38()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 40);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 48));
  swift_task_dealloc(v1);
  return swift_task_switch(sub_10002DD94, 0, 0);
}

uint64_t sub_10002DD94()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  v1 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v0 + 56) = v1;
  v2 = sub_10001A9A8(&qword_1010EBC20);
  *v1 = v0;
  v1[1] = sub_10001C878;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 16, 0, 0, 0x6976726553746567, 0xEC00000029286563, sub_100030BB4, *(_QWORD *)(v0 + 24), v2);
}

uint64_t sub_10002DE28()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 24) = v0;
  *(_QWORD *)(v1 + 32) = *v0;
  return swift_task_switch(sub_10002DE48, 0, 0);
}

uint64_t sub_10002DE48()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = swift_task_alloc(32);
  *(_QWORD *)(v0 + 40) = v1;
  *(_OWORD *)(v1 + 16) = *(_OWORD *)(v0 + 24);
  v2 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v0 + 48) = v2;
  *v2 = v0;
  v2[1] = sub_10002DEE8;
  return withCheckedContinuation<A>(isolation:function:_:)(v2, 0, 0, 0x4970757472617473, 0xEF2928656E6F4473, sub_100033730, v1, (char *)&type metadata for () + 8);
}

uint64_t sub_10002DEE8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 40);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 48));
  swift_task_dealloc(v1);
  return swift_task_switch(sub_10002DF44, 0, 0);
}

uint64_t sub_10002DF44()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  v1 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v0 + 56) = v1;
  v2 = sub_10001A9A8(&qword_1010EBBD8);
  *v1 = v0;
  v1[1] = sub_10001C878;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 16, 0, 0, 0x6976726553746567, 0xEC00000029286563, sub_100030AB8, *(_QWORD *)(v0 + 24), v2);
}

uint64_t sub_10002DFD8()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 24) = v0;
  *(_QWORD *)(v1 + 32) = *v0;
  return swift_task_switch(sub_10002DFF8, 0, 0);
}

uint64_t sub_10002DFF8()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = swift_task_alloc(32);
  *(_QWORD *)(v0 + 40) = v1;
  *(_OWORD *)(v1 + 16) = *(_OWORD *)(v0 + 24);
  v2 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v0 + 48) = v2;
  *v2 = v0;
  v2[1] = sub_10002E098;
  return withCheckedContinuation<A>(isolation:function:_:)(v2, 0, 0, 0x4970757472617473, 0xEF2928656E6F4473, sub_100033730, v1, (char *)&type metadata for () + 8);
}

uint64_t sub_10002E098()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 40);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 48));
  swift_task_dealloc(v1);
  return swift_task_switch(sub_10002E0F4, 0, 0);
}

uint64_t sub_10002E0F4()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  v1 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v0 + 56) = v1;
  v2 = sub_10001A9A8(&qword_1010EBCF0);
  *v1 = v0;
  v1[1] = sub_10001C878;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 16, 0, 0, 0x6976726553746567, 0xEC00000029286563, sub_100030F20, *(_QWORD *)(v0 + 24), v2);
}

uint64_t sub_10002E188()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 24) = v0;
  *(_QWORD *)(v1 + 32) = *v0;
  return swift_task_switch(sub_10002E1A8, 0, 0);
}

uint64_t sub_10002E1A8()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = swift_task_alloc(32);
  *(_QWORD *)(v0 + 40) = v1;
  *(_OWORD *)(v1 + 16) = *(_OWORD *)(v0 + 24);
  v2 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v0 + 48) = v2;
  *v2 = v0;
  v2[1] = sub_10002E248;
  return withCheckedContinuation<A>(isolation:function:_:)(v2, 0, 0, 0x4970757472617473, 0xEF2928656E6F4473, sub_100033730, v1, &type metadata for () + 1);
}

uint64_t sub_10002E248()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 40);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 48));
  swift_task_dealloc(v1);
  return swift_task_switch(sub_10002E2A4, 0, 0);
}

uint64_t sub_10002E2A4()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  v1 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v0 + 56) = v1;
  v2 = sub_10001A9A8(&qword_1010EBD48);
  *v1 = v0;
  v1[1] = sub_10001C878;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 16, 0, 0, 0x6976726553746567, 0xEC00000029286563, sub_100031088, *(_QWORD *)(v0 + 24), v2);
}

uint64_t sub_10002E338()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 24) = v0;
  *(_QWORD *)(v1 + 32) = *v0;
  return swift_task_switch(sub_10002E358, 0, 0);
}

uint64_t sub_10002E358()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = swift_task_alloc(32);
  *(_QWORD *)(v0 + 40) = v1;
  *(_OWORD *)(v1 + 16) = *(_OWORD *)(v0 + 24);
  v2 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v0 + 48) = v2;
  *v2 = v0;
  v2[1] = sub_10002E3F8;
  return withCheckedContinuation<A>(isolation:function:_:)(v2, 0, 0, 0x4970757472617473, 0xEF2928656E6F4473, sub_100033730, v1, (char *)&type metadata for () + 8);
}

uint64_t sub_10002E3F8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 40);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 48));
  swift_task_dealloc(v1);
  return swift_task_switch(sub_10002E454, 0, 0);
}

uint64_t sub_10002E454()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  v1 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v0 + 56) = v1;
  v2 = sub_10001A9A8(&qword_1010EBB30);
  *v1 = v0;
  v1[1] = sub_10001C878;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 16, 0, 0, 0x6976726553746567, 0xEC00000029286563, sub_10003087C, *(_QWORD *)(v0 + 24), v2);
}

uint64_t sub_10002E4E8()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 24) = v0;
  *(_QWORD *)(v1 + 32) = *v0;
  return swift_task_switch(sub_10002E508, 0, 0);
}

uint64_t sub_10002E508()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = swift_task_alloc(32);
  *(_QWORD *)(v0 + 40) = v1;
  *(_OWORD *)(v1 + 16) = *(_OWORD *)(v0 + 24);
  v2 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v0 + 48) = v2;
  *v2 = v0;
  v2[1] = sub_10002E5A8;
  return withCheckedContinuation<A>(isolation:function:_:)(v2, 0, 0, 0x4970757472617473, 0xEF2928656E6F4473, sub_100033730, v1, (char *)&type metadata for () + 8);
}

uint64_t sub_10002E5A8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 40);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 48));
  swift_task_dealloc(v1);
  return swift_task_switch(sub_10002E604, 0, 0);
}

uint64_t sub_10002E604()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  v1 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v0 + 56) = v1;
  v2 = sub_10001A9A8(&qword_1010EBB60);
  *v1 = v0;
  v1[1] = sub_10001C878;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 16, 0, 0, 0x6976726553746567, 0xEC00000029286563, sub_10003091C, *(_QWORD *)(v0 + 24), v2);
}

uint64_t sub_10002E698()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 24) = v0;
  *(_QWORD *)(v1 + 32) = *v0;
  return swift_task_switch(sub_10002E6B8, 0, 0);
}

uint64_t sub_10002E6B8()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = swift_task_alloc(32);
  *(_QWORD *)(v0 + 40) = v1;
  *(_OWORD *)(v1 + 16) = *(_OWORD *)(v0 + 24);
  v2 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v0 + 48) = v2;
  *v2 = v0;
  v2[1] = sub_10002E758;
  return withCheckedContinuation<A>(isolation:function:_:)(v2, 0, 0, 0x4970757472617473, 0xEF2928656E6F4473, sub_100033730, v1, (char *)&type metadata for () + 8);
}

uint64_t sub_10002E758()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 40);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 48));
  swift_task_dealloc(v1);
  return swift_task_switch(sub_10002E7B4, 0, 0);
}

uint64_t sub_10002E7B4()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  v1 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v0 + 56) = v1;
  v2 = sub_10001A9A8(&qword_1010EBCD8);
  *v1 = v0;
  v1[1] = sub_10000DCD8;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 16, 0, 0, 0x6976726553746567, 0xEC00000029286563, sub_100030EC4, *(_QWORD *)(v0 + 24), v2);
}

uint64_t sub_10002E848()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 24) = v0;
  *(_QWORD *)(v1 + 32) = *v0;
  return swift_task_switch(sub_10002E868, 0, 0);
}

uint64_t sub_10002E868()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = swift_task_alloc(32);
  *(_QWORD *)(v0 + 40) = v1;
  *(_OWORD *)(v1 + 16) = *(_OWORD *)(v0 + 24);
  v2 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v0 + 48) = v2;
  *v2 = v0;
  v2[1] = sub_10002E908;
  return withCheckedContinuation<A>(isolation:function:_:)(v2, 0, 0, 0x4970757472617473, 0xEF2928656E6F4473, sub_100033730, v1, (char *)&type metadata for () + 8);
}

uint64_t sub_10002E908()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 40);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 48));
  swift_task_dealloc(v1);
  return swift_task_switch(sub_10002E964, 0, 0);
}

uint64_t sub_10002E964()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  v1 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v0 + 56) = v1;
  v2 = sub_10001A9A8(&qword_1010EBC60);
  *v1 = v0;
  v1[1] = sub_10001C878;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 16, 0, 0, 0x6976726553746567, 0xEC00000029286563, sub_100030CB0, *(_QWORD *)(v0 + 24), v2);
}

uint64_t sub_10002E9F8()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 24) = v0;
  *(_QWORD *)(v1 + 32) = *v0;
  return swift_task_switch(sub_10002EA18, 0, 0);
}

uint64_t sub_10002EA18()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = swift_task_alloc(32);
  *(_QWORD *)(v0 + 40) = v1;
  *(_OWORD *)(v1 + 16) = *(_OWORD *)(v0 + 24);
  v2 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v0 + 48) = v2;
  *v2 = v0;
  v2[1] = sub_10002EAB8;
  return withCheckedContinuation<A>(isolation:function:_:)(v2, 0, 0, 0x4970757472617473, 0xEF2928656E6F4473, sub_100033730, v1, (char *)&type metadata for () + 8);
}

uint64_t sub_10002EAB8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 40);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 48));
  swift_task_dealloc(v1);
  return swift_task_switch(sub_10002EB14, 0, 0);
}

uint64_t sub_10002EB14()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  v1 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v0 + 56) = v1;
  v2 = sub_10001A9A8(&qword_1010EBDE0);
  *v1 = v0;
  v1[1] = sub_10001C878;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 16, 0, 0, 0x6976726553746567, 0xEC00000029286563, sub_100031434, *(_QWORD *)(v0 + 24), v2);
}

uint64_t sub_10002EBA8()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 24) = v0;
  *(_QWORD *)(v1 + 32) = *v0;
  return swift_task_switch(sub_10002EBC8, 0, 0);
}

uint64_t sub_10002EBC8()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = swift_task_alloc(32);
  *(_QWORD *)(v0 + 40) = v1;
  *(_OWORD *)(v1 + 16) = *(_OWORD *)(v0 + 24);
  v2 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v0 + 48) = v2;
  *v2 = v0;
  v2[1] = sub_10002EC68;
  return withCheckedContinuation<A>(isolation:function:_:)(v2, 0, 0, 0x4970757472617473, 0xEF2928656E6F4473, sub_100033730, v1, (char *)&type metadata for () + 8);
}

uint64_t sub_10002EC68()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 40);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 48));
  swift_task_dealloc(v1);
  return swift_task_switch(sub_10002ECC4, 0, 0);
}

uint64_t sub_10002ECC4()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  v1 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v0 + 56) = v1;
  v2 = sub_10001A9A8(&qword_1010EBDF8);
  *v1 = v0;
  v1[1] = sub_10001C878;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 16, 0, 0, 0x6976726553746567, 0xEC00000029286563, sub_100031490, *(_QWORD *)(v0 + 24), v2);
}

uint64_t sub_10002ED58()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 24) = v0;
  *(_QWORD *)(v1 + 32) = *v0;
  return swift_task_switch(sub_10002ED78, 0, 0);
}

uint64_t sub_10002ED78()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = swift_task_alloc(32);
  *(_QWORD *)(v0 + 40) = v1;
  *(_OWORD *)(v1 + 16) = *(_OWORD *)(v0 + 24);
  v2 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v0 + 48) = v2;
  *v2 = v0;
  v2[1] = sub_10002EE18;
  return withCheckedContinuation<A>(isolation:function:_:)(v2, 0, 0, 0x4970757472617473, 0xEF2928656E6F4473, sub_100033730, v1, (char *)&type metadata for () + 8);
}

uint64_t sub_10002EE18()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 40);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 48));
  swift_task_dealloc(v1);
  return swift_task_switch(sub_10002EE74, 0, 0);
}

uint64_t sub_10002EE74()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  v1 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v0 + 56) = v1;
  v2 = sub_10001A9A8(&qword_1010EBD60);
  *v1 = v0;
  v1[1] = sub_10001C878;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 16, 0, 0, 0x6976726553746567, 0xEC00000029286563, sub_1000310E4, *(_QWORD *)(v0 + 24), v2);
}

uint64_t sub_10002EF08()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 24) = v0;
  *(_QWORD *)(v1 + 32) = *v0;
  return swift_task_switch(sub_10002EF28, 0, 0);
}

uint64_t sub_10002EF28()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = swift_task_alloc(32);
  *(_QWORD *)(v0 + 40) = v1;
  *(_OWORD *)(v1 + 16) = *(_OWORD *)(v0 + 24);
  v2 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v0 + 48) = v2;
  *v2 = v0;
  v2[1] = sub_10002EFC8;
  return withCheckedContinuation<A>(isolation:function:_:)(v2, 0, 0, 0x4970757472617473, 0xEF2928656E6F4473, sub_100033730, v1, &type metadata for () + 1);
}

uint64_t sub_10002EFC8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 40);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 48));
  swift_task_dealloc(v1);
  return swift_task_switch(sub_10002F024, 0, 0);
}

uint64_t sub_10002F024()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  v1 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v0 + 56) = v1;
  v2 = sub_10001A9A8(&qword_1010EBC90);
  *v1 = v0;
  v1[1] = sub_10001C878;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 16, 0, 0, 0x6976726553746567, 0xEC00000029286563, sub_100030D68, *(_QWORD *)(v0 + 24), v2);
}

uint64_t sub_10002F0B8()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 24) = v0;
  *(_QWORD *)(v1 + 32) = *v0;
  return swift_task_switch(sub_10002F0D8, 0, 0);
}

uint64_t sub_10002F0D8()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = swift_task_alloc(32);
  *(_QWORD *)(v0 + 40) = v1;
  *(_OWORD *)(v1 + 16) = *(_OWORD *)(v0 + 24);
  v2 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v0 + 48) = v2;
  *v2 = v0;
  v2[1] = sub_10002F178;
  return withCheckedContinuation<A>(isolation:function:_:)(v2, 0, 0, 0x4970757472617473, 0xEF2928656E6F4473, sub_100033730, v1, &type metadata for () + 1);
}

uint64_t sub_10002F178()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 40);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 48));
  swift_task_dealloc(v1);
  return swift_task_switch(sub_10002F1D4, 0, 0);
}

uint64_t sub_10002F1D4()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  v1 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v0 + 56) = v1;
  v2 = sub_10001A9A8(&qword_1010EBD08);
  *v1 = v0;
  v1[1] = sub_10001C878;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 16, 0, 0, 0x6976726553746567, 0xEC00000029286563, sub_100030F7C, *(_QWORD *)(v0 + 24), v2);
}

uint64_t sub_10002F268()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 24) = v0;
  *(_QWORD *)(v1 + 32) = *v0;
  return swift_task_switch(sub_10002F288, 0, 0);
}

uint64_t sub_10002F288()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = swift_task_alloc(32);
  *(_QWORD *)(v0 + 40) = v1;
  *(_OWORD *)(v1 + 16) = *(_OWORD *)(v0 + 24);
  v2 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v0 + 48) = v2;
  *v2 = v0;
  v2[1] = sub_10002F328;
  return withCheckedContinuation<A>(isolation:function:_:)(v2, 0, 0, 0x4970757472617473, 0xEF2928656E6F4473, sub_100033730, v1, &type metadata for () + 1);
}

uint64_t sub_10002F328()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 40);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 48));
  swift_task_dealloc(v1);
  return swift_task_switch(sub_10002F384, 0, 0);
}

uint64_t sub_10002F384()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  v1 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v0 + 56) = v1;
  v2 = sub_10001A9A8(&qword_1010EBBF0);
  *v1 = v0;
  v1[1] = sub_10001C878;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 16, 0, 0, 0x6976726553746567, 0xEC00000029286563, sub_100030B14, *(_QWORD *)(v0 + 24), v2);
}

uint64_t sub_10002F418()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 24) = v0;
  *(_QWORD *)(v1 + 32) = *v0;
  return swift_task_switch(sub_10002F438, 0, 0);
}

uint64_t sub_10002F438()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = swift_task_alloc(32);
  *(_QWORD *)(v0 + 40) = v1;
  *(_OWORD *)(v1 + 16) = *(_OWORD *)(v0 + 24);
  v2 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v0 + 48) = v2;
  *v2 = v0;
  v2[1] = sub_10002F4D8;
  return withCheckedContinuation<A>(isolation:function:_:)(v2, 0, 0, 0x4970757472617473, 0xEF2928656E6F4473, sub_100033730, v1, (char *)&type metadata for () + 8);
}

uint64_t sub_10002F4D8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 40);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 48));
  swift_task_dealloc(v1);
  return swift_task_switch(sub_10002F534, 0, 0);
}

uint64_t sub_10002F534()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  v1 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v0 + 56) = v1;
  v2 = sub_10001A9A8(&qword_1010EBD98);
  *v1 = v0;
  v1[1] = sub_10001C878;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 16, 0, 0, 0x6976726553746567, 0xEC00000029286563, sub_10003132C, *(_QWORD *)(v0 + 24), v2);
}

uint64_t sub_10002F5C8()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 24) = v0;
  *(_QWORD *)(v1 + 32) = *v0;
  return swift_task_switch(sub_10002F5E8, 0, 0);
}

uint64_t sub_10002F5E8()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = swift_task_alloc(32);
  *(_QWORD *)(v0 + 40) = v1;
  *(_OWORD *)(v1 + 16) = *(_OWORD *)(v0 + 24);
  v2 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v0 + 48) = v2;
  *v2 = v0;
  v2[1] = sub_10002F688;
  return withCheckedContinuation<A>(isolation:function:_:)(v2, 0, 0, 0x4970757472617473, 0xEF2928656E6F4473, sub_100033730, v1, &type metadata for () + 1);
}

uint64_t sub_10002F688()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 40);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 48));
  swift_task_dealloc(v1);
  return swift_task_switch(sub_10002F6E4, 0, 0);
}

uint64_t sub_10002F6E4()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  v1 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v0 + 56) = v1;
  v2 = sub_10001A9A8(&qword_1010EBCC0);
  *v1 = v0;
  v1[1] = sub_10001C878;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 16, 0, 0, 0x6976726553746567, 0xEC00000029286563, sub_100030E6C, *(_QWORD *)(v0 + 24), v2);
}

uint64_t sub_10002F778()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 24) = v0;
  *(_QWORD *)(v1 + 32) = *v0;
  return swift_task_switch(sub_10002F798, 0, 0);
}

uint64_t sub_10002F798()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = swift_task_alloc(32);
  *(_QWORD *)(v0 + 40) = v1;
  *(_OWORD *)(v1 + 16) = *(_OWORD *)(v0 + 24);
  v2 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v0 + 48) = v2;
  *v2 = v0;
  v2[1] = sub_10002F838;
  return withCheckedContinuation<A>(isolation:function:_:)(v2, 0, 0, 0x4970757472617473, 0xEF2928656E6F4473, sub_100033730, v1, &type metadata for () + 1);
}

uint64_t sub_10002F838()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 40);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 48));
  swift_task_dealloc(v1);
  return swift_task_switch(sub_10002F894, 0, 0);
}

uint64_t sub_10002F894()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  v1 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v0 + 56) = v1;
  v2 = sub_10001A9A8(&qword_1010EBDB0);
  *v1 = v0;
  v1[1] = sub_10001C878;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 16, 0, 0, 0x6976726553746567, 0xEC00000029286563, sub_100031384, *(_QWORD *)(v0 + 24), v2);
}

uint64_t sub_10002F928()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 24) = v0;
  *(_QWORD *)(v1 + 32) = *v0;
  return swift_task_switch(sub_10002F948, 0, 0);
}

uint64_t sub_10002F948()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = swift_task_alloc(32);
  *(_QWORD *)(v0 + 40) = v1;
  *(_OWORD *)(v1 + 16) = *(_OWORD *)(v0 + 24);
  v2 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v0 + 48) = v2;
  *v2 = v0;
  v2[1] = sub_10002F9E8;
  return withCheckedContinuation<A>(isolation:function:_:)(v2, 0, 0, 0x4970757472617473, 0xEF2928656E6F4473, sub_100033730, v1, &type metadata for () + 1);
}

uint64_t sub_10002F9E8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 40);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 48));
  swift_task_dealloc(v1);
  return swift_task_switch(sub_10002FA44, 0, 0);
}

uint64_t sub_10002FA44()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  v1 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v0 + 56) = v1;
  v2 = sub_10001A9A8(&qword_1010EBD78);
  *v1 = v0;
  v1[1] = sub_10001C878;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 16, 0, 0, 0x6976726553746567, 0xEC00000029286563, sub_100031140, *(_QWORD *)(v0 + 24), v2);
}

uint64_t sub_10002FAD8()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 24) = v0;
  *(_QWORD *)(v1 + 32) = *v0;
  return swift_task_switch(sub_10002FAF8, 0, 0);
}

uint64_t sub_10002FAF8()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = swift_task_alloc(32);
  *(_QWORD *)(v0 + 40) = v1;
  *(_OWORD *)(v1 + 16) = *(_OWORD *)(v0 + 24);
  v2 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v0 + 48) = v2;
  *v2 = v0;
  v2[1] = sub_10002FB98;
  return withCheckedContinuation<A>(isolation:function:_:)(v2, 0, 0, 0x4970757472617473, 0xEF2928656E6F4473, sub_100033730, v1, &type metadata for () + 1);
}

uint64_t sub_10002FB98()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 40);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 48));
  swift_task_dealloc(v1);
  return swift_task_switch(sub_10002FBF4, 0, 0);
}

uint64_t sub_10002FBF4()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  v1 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v0 + 56) = v1;
  v2 = sub_10001A9A8(&qword_1010EBCA8);
  *v1 = v0;
  v1[1] = sub_10001C878;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 16, 0, 0, 0x6976726553746567, 0xEC00000029286563, sub_100030DC4, *(_QWORD *)(v0 + 24), v2);
}

uint64_t sub_10002FC88()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 24) = v0;
  *(_QWORD *)(v1 + 32) = *v0;
  return swift_task_switch(sub_10002FCA8, 0, 0);
}

uint64_t sub_10002FCA8()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = swift_task_alloc(32);
  *(_QWORD *)(v0 + 40) = v1;
  *(_OWORD *)(v1 + 16) = *(_OWORD *)(v0 + 24);
  v2 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v0 + 48) = v2;
  *v2 = v0;
  v2[1] = sub_10002FD48;
  return withCheckedContinuation<A>(isolation:function:_:)(v2, 0, 0, 0x4970757472617473, 0xEF2928656E6F4473, sub_100033730, v1, &type metadata for () + 1);
}

uint64_t sub_10002FD48()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 40);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 48));
  swift_task_dealloc(v1);
  return swift_task_switch(sub_10002FDA4, 0, 0);
}

uint64_t sub_10002FDA4()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  v1 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v0 + 56) = v1;
  v2 = sub_10001A9A8(&qword_1010EBD30);
  *v1 = v0;
  v1[1] = sub_10001C878;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 16, 0, 0, 0x6976726553746567, 0xEC00000029286563, sub_100031030, *(_QWORD *)(v0 + 24), v2);
}

uint64_t sub_10002FE38()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 24) = v0;
  *(_QWORD *)(v1 + 32) = *v0;
  return swift_task_switch(sub_10002FE58, 0, 0);
}

uint64_t sub_10002FE58()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = swift_task_alloc(32);
  *(_QWORD *)(v0 + 40) = v1;
  *(_OWORD *)(v1 + 16) = *(_OWORD *)(v0 + 24);
  v2 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v0 + 48) = v2;
  *v2 = v0;
  v2[1] = sub_10002FEF8;
  return withCheckedContinuation<A>(isolation:function:_:)(v2, 0, 0, 0x4970757472617473, 0xEF2928656E6F4473, sub_100033730, v1, &type metadata for () + 1);
}

uint64_t sub_10002FEF8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 40);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 48));
  swift_task_dealloc(v1);
  return swift_task_switch(sub_10002FF54, 0, 0);
}

uint64_t sub_10002FF54()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  v1 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v0 + 56) = v1;
  v2 = sub_10001A9A8(&qword_1010EBDC8);
  *v1 = v0;
  v1[1] = sub_10001C878;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 16, 0, 0, 0x6976726553746567, 0xEC00000029286563, sub_1000313DC, *(_QWORD *)(v0 + 24), v2);
}

uint64_t sub_10002FFE8()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 24) = v0;
  *(_QWORD *)(v1 + 32) = *v0;
  return swift_task_switch(sub_100030008, 0, 0);
}

uint64_t sub_100030008()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = swift_task_alloc(32);
  *(_QWORD *)(v0 + 40) = v1;
  *(_OWORD *)(v1 + 16) = *(_OWORD *)(v0 + 24);
  v2 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v0 + 48) = v2;
  *v2 = v0;
  v2[1] = sub_1000300A8;
  return withCheckedContinuation<A>(isolation:function:_:)(v2, 0, 0, 0x4970757472617473, 0xEF2928656E6F4473, sub_100033730, v1, &type metadata for () + 1);
}

uint64_t sub_1000300A8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 40);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 48));
  swift_task_dealloc(v1);
  return swift_task_switch(sub_100030104, 0, 0);
}

uint64_t sub_100030104()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;

  v1 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v0 + 56) = v1;
  v2 = sub_10001A9A8((uint64_t *)&unk_1011106F0);
  *v1 = v0;
  v1[1] = sub_10001C878;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 16, 0, 0, 0x6976726553746567, 0xEC00000029286563, sub_100030FD8, *(_QWORD *)(v0 + 24), v2);
}

uint64_t sub_100030198(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD aBlock[5];
  uint64_t v36;

  v30 = a6;
  v27 = a4;
  v28 = a5;
  v9 = type metadata accessor for DispatchWorkItemFlags(0);
  v33 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DispatchQoS(0);
  v31 = *(_QWORD *)(v12 - 8);
  v32 = v12;
  __chkstk_darwin(v12);
  v14 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_10001A9A8(a3);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(_QWORD *)(v16 + 64);
  __chkstk_darwin(v15);
  v29 = *(_QWORD *)(a2 + 24);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))((char *)&v27 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v15);
  v18 = *(unsigned __int8 *)(v16 + 80);
  v19 = (v18 + 24) & ~v18;
  v20 = swift_allocObject(v27, v19 + v17, v18 | 7);
  *(_QWORD *)(v20 + 16) = a2;
  (*(void (**)(uint64_t, char *, uint64_t))(v16 + 32))(v20 + v19, (char *)&v27 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0), v15);
  aBlock[4] = v28;
  v36 = v20;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = v30;
  v21 = _Block_copy(aBlock);
  v22 = swift_retain();
  static DispatchQoS.unspecified.getter(v22);
  v34 = _swiftEmptyArrayStorage;
  v23 = sub_100006C64((unint64_t *)&qword_1010F0E50, 255, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v24 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v25 = sub_10001371C();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v34, v24, v25, v9, v23);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v14, v11, v21);
  _Block_release(v21);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v11, v9);
  (*(void (**)(char *, uint64_t))(v31 + 8))(v14, v32);
  return swift_release(v36);
}

uint64_t sub_1000303E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t), uint64_t *a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v17;
  _QWORD v18[5];
  _BYTE v19[24];

  swift_beginAccess(a1 + 16, v19, 0, 0);
  v9 = *(_QWORD *)(a1 + 16);
  v10 = *(_QWORD *)(v9 + 16);
  if (v10)
  {
    v11 = v9 + 32;
    swift_bridgeObjectRetain(v9);
    do
    {
      sub_100030784(v11, (uint64_t)v18);
      v12 = sub_10001A9A8((uint64_t *)&unk_1010FABA0);
      v13 = a4(a3);
      if (swift_dynamicCast(&v17, v18, v12, v13, 6))
        v14 = v17 == 0;
      else
        v14 = 1;
      if (!v14)
      {
        swift_bridgeObjectRelease();
        v18[0] = v17;
        goto LABEL_11;
      }
      v11 += 40;
      --v10;
    }
    while (v10);
    swift_bridgeObjectRelease();
  }
  v18[0] = 0;
LABEL_11:
  v15 = sub_10001A9A8(a5);
  return CheckedContinuation.resume(returning:)(v18, v15);
}

uint64_t sub_1000304F8(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  _QWORD v15[5];
  _BYTE v16[24];

  swift_beginAccess(a1 + 16, v16, 0, 0);
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(v7 + 16);
  if (v8)
  {
    v9 = v7 + 32;
    swift_bridgeObjectRetain(v7);
    while (1)
    {
      sub_100030784(v9, (uint64_t)v15);
      v10 = sub_10001A9A8((uint64_t *)&unk_1010FABA0);
      v11 = a4(0);
      if (swift_dynamicCast(&v14, v15, v10, v11, 6))
        break;
      v9 += 40;
      if (!--v8)
      {
        swift_bridgeObjectRelease();
        goto LABEL_6;
      }
    }
    swift_bridgeObjectRelease();
    v15[0] = v14;
  }
  else
  {
LABEL_6:
    v15[0] = 0;
  }
  v12 = sub_10001A9A8(a3);
  return CheckedContinuation.resume(returning:)(v15, v12);
}

uint64_t sub_1000305F0(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v4 = (_QWORD *)swift_task_alloc(a2[1]);
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_100030654;
  return v6(a1);
}

uint64_t sub_100030654()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 16));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_1000306A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for FinderStateInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000306E4(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for FinderStateInfo(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100030720(uint64_t a1)
{
  uint64_t v1;

  return sub_100013808(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_100030728(uint64_t a1)
{
  uint64_t v1;

  return sub_100030198(a1, v1, &qword_1010EBB08, (uint64_t)&unk_10104F5E8, (uint64_t)sub_10003076C, (uint64_t)&unk_10104F600);
}

uint64_t sub_100030760()
{
  return sub_1000314D4(&qword_1010EBB08);
}

uint64_t sub_10003076C()
{
  return sub_100030824(&qword_1010EBB08, 0, type metadata accessor for FinderStateObserver);
}

uint64_t sub_100030784(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_1000307C8(uint64_t a1)
{
  uint64_t v1;

  return sub_100030198(a1, v1, &qword_1010EBB20, (uint64_t)&unk_10104F638, (uint64_t)sub_10003080C, (uint64_t)&unk_10104F650);
}

uint64_t sub_100030800()
{
  return sub_1000314D4(&qword_1010EBB20);
}

uint64_t sub_10003080C()
{
  return sub_100030824(&qword_1010EBB20, 0, (uint64_t (*)(uint64_t))type metadata accessor for FamilyCircleService);
}

uint64_t sub_100030824(uint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v3;
  uint64_t v7;

  v7 = *(unsigned __int8 *)(*(_QWORD *)(sub_10001A9A8(a1) - 8) + 80);
  return sub_1000303E8(*(_QWORD *)(v3 + 16), v3 + ((v7 + 24) & ~v7), a2, a3, a1);
}

uint64_t sub_10003087C(uint64_t a1)
{
  uint64_t v1;

  return sub_100030198(a1, v1, &qword_1010EBB38, (uint64_t)&unk_10104F688, (uint64_t)sub_1000308C0, (uint64_t)&unk_10104F6A0);
}

uint64_t sub_1000308B4()
{
  return sub_1000314D4(&qword_1010EBB38);
}

uint64_t sub_1000308C0()
{
  return sub_100030824(&qword_1010EBB38, 0, (uint64_t (*)(uint64_t))type metadata accessor for IDSTransportService_ItemSharingCrossAccount);
}

uint64_t sub_1000308D8(uint64_t a1)
{
  uint64_t v1;

  return sub_100030198(a1, v1, &qword_1010EBB50, (uint64_t)&unk_10104F6D8, (uint64_t)sub_100017350, (uint64_t)&unk_10104F6F0);
}

uint64_t sub_100030910()
{
  return sub_1000314D4(&qword_1010EBB50);
}

uint64_t sub_10003091C(uint64_t a1)
{
  uint64_t v1;

  return sub_100030198(a1, v1, &qword_1010EBB68, (uint64_t)&unk_10104F728, (uint64_t)sub_100030960, (uint64_t)&unk_10104F740);
}

uint64_t sub_100030954()
{
  return sub_1000314D4(&qword_1010EBB68);
}

uint64_t sub_100030960()
{
  return sub_100030824(&qword_1010EBB68, 0, (uint64_t (*)(uint64_t))type metadata accessor for PeerTrustService);
}

uint64_t sub_100030978(uint64_t a1)
{
  uint64_t v1;

  return sub_100030198(a1, v1, &qword_1010EBB80, (uint64_t)&unk_10104F778, (uint64_t)sub_10001EBEC, (uint64_t)&unk_10104F790);
}

uint64_t sub_1000309B0()
{
  return sub_1000314D4(&qword_1010EBB80);
}

uint64_t sub_1000309BC(uint64_t a1)
{
  uint64_t v1;

  return sub_100030198(a1, v1, &qword_1010EBB98, (uint64_t)&unk_10104F7C8, (uint64_t)sub_100030A00, (uint64_t)&unk_10104F7E0);
}

uint64_t sub_1000309F4()
{
  return sub_1000314D4(&qword_1010EBB98);
}

uint64_t sub_100030A00()
{
  return sub_100030824(&qword_1010EBB98, 0, (uint64_t (*)(uint64_t))type metadata accessor for FindMyNetworkPublisherService);
}

uint64_t sub_100030A18(uint64_t a1)
{
  uint64_t v1;

  return sub_100030198(a1, v1, &qword_1010EBBB0, (uint64_t)&unk_10104F818, (uint64_t)sub_10001EBBC, (uint64_t)&unk_10104F830);
}

uint64_t sub_100030A50()
{
  return sub_1000314D4(&qword_1010EBBB0);
}

uint64_t sub_100030A5C(uint64_t a1)
{
  uint64_t v1;

  return sub_100030198(a1, v1, &qword_1010EBBC8, (uint64_t)&unk_10104F868, (uint64_t)sub_100030AA0, (uint64_t)&unk_10104F880);
}

uint64_t sub_100030A94()
{
  return sub_1000314D4(&qword_1010EBBC8);
}

uint64_t sub_100030AA0()
{
  return sub_100030824(&qword_1010EBBC8, 0, (uint64_t (*)(uint64_t))type metadata accessor for ItemSharingNotificationsService);
}

uint64_t sub_100030AB8(uint64_t a1)
{
  uint64_t v1;

  return sub_100030198(a1, v1, &qword_1010EBBE0, (uint64_t)&unk_10104F8B8, (uint64_t)sub_100030AFC, (uint64_t)&unk_10104F8D0);
}

uint64_t sub_100030AF0()
{
  return sub_1000314D4(&qword_1010EBBE0);
}

uint64_t sub_100030AFC()
{
  return sub_100030824(&qword_1010EBBE0, 0, (uint64_t (*)(uint64_t))type metadata accessor for BeaconSharingService);
}

uint64_t sub_100030B14(uint64_t a1)
{
  uint64_t v1;

  return sub_100030198(a1, v1, &qword_1010EBBF8, (uint64_t)&unk_10104F908, (uint64_t)sub_100030B58, (uint64_t)&unk_10104F920);
}

uint64_t sub_100030B4C()
{
  return sub_1000314D4(&qword_1010EBBF8);
}

uint64_t sub_100030B58()
{
  return sub_100030824(&qword_1010EBBF8, 0, (uint64_t (*)(uint64_t))type metadata accessor for BatteryLevelService);
}

uint64_t sub_100030B70(uint64_t a1)
{
  uint64_t v1;

  return sub_100030198(a1, v1, &qword_1010EBC10, (uint64_t)&unk_10104F958, (uint64_t)sub_10001EBD4, (uint64_t)&unk_10104F970);
}

uint64_t sub_100030BA8()
{
  return sub_1000314D4(&qword_1010EBC10);
}

uint64_t sub_100030BB4(uint64_t a1)
{
  uint64_t v1;

  return sub_100030198(a1, v1, &qword_1010EBC28, (uint64_t)&unk_10104F9A8, (uint64_t)sub_100030BF8, (uint64_t)&unk_10104F9C0);
}

uint64_t sub_100030BEC()
{
  return sub_1000314D4(&qword_1010EBC28);
}

uint64_t sub_100030BF8()
{
  return sub_100030824(&qword_1010EBC28, 0, type metadata accessor for PencilPairingService);
}

uint64_t sub_100030C10(uint64_t a1)
{
  uint64_t v1;

  return sub_100030198(a1, v1, &qword_1010EBC38, (uint64_t)&unk_10104F9F8, (uint64_t)sub_10001EC04, (uint64_t)&unk_10104FA10);
}

uint64_t sub_100030C48()
{
  return sub_1000314D4(&qword_1010EBC38);
}

uint64_t sub_100030C54(uint64_t a1)
{
  uint64_t v1;

  return sub_100030198(a1, v1, &qword_1010EBC50, (uint64_t)&unk_10104FA48, (uint64_t)sub_100030C98, (uint64_t)&unk_10104FA60);
}

uint64_t sub_100030C8C()
{
  return sub_1000314D4(&qword_1010EBC50);
}

uint64_t sub_100030C98()
{
  return sub_100030824(&qword_1010EBC50, 0, type metadata accessor for BeaconStore);
}

uint64_t sub_100030CB0(uint64_t a1)
{
  uint64_t v1;

  return sub_100030198(a1, v1, &qword_1010EBC68, (uint64_t)&unk_10104FA98, (uint64_t)sub_100030CF4, (uint64_t)&unk_10104FAB0);
}

uint64_t sub_100030CE8()
{
  return sub_1000314D4(&qword_1010EBC68);
}

uint64_t sub_100030CF4()
{
  return sub_100030824(&qword_1010EBC68, 0, (uint64_t (*)(uint64_t))type metadata accessor for BeaconKeyService);
}

uint64_t sub_100030D0C(uint64_t a1)
{
  uint64_t v1;

  return sub_100030198(a1, v1, &qword_1010EBC80, (uint64_t)&unk_10104FAE8, (uint64_t)sub_100030D50, (uint64_t)&unk_10104FB00);
}

uint64_t sub_100030D44()
{
  return sub_1000314D4(&qword_1010EBC80);
}

uint64_t sub_100030D50()
{
  return sub_100030824(&qword_1010EBC80, 0, (uint64_t (*)(uint64_t))type metadata accessor for StandaloneBeaconService);
}

uint64_t sub_100030D68(uint64_t a1)
{
  uint64_t v1;

  return sub_100030198(a1, v1, &qword_1010EBC98, (uint64_t)&unk_10104FB38, (uint64_t)sub_100030DAC, (uint64_t)&unk_10104FB50);
}

uint64_t sub_100030DA0()
{
  return sub_1000314D4(&qword_1010EBC98);
}

uint64_t sub_100030DAC()
{
  return sub_100030824(&qword_1010EBC98, 0, type metadata accessor for OwnerCommandService);
}

uint64_t sub_100030DC4(uint64_t a1)
{
  uint64_t v1;

  return sub_100030198(a1, v1, &qword_1010EBCB0, (uint64_t)&unk_10104FB88, (uint64_t)sub_100030E08, (uint64_t)&unk_10104FBA0);
}

uint64_t sub_100030DFC()
{
  return sub_1000314D4(&qword_1010EBCB0);
}

uint64_t sub_100030E08()
{
  return sub_100030E1C(&qword_1010EBCB0, (uint64_t (*)(_QWORD))type metadata accessor for FMIPService);
}

uint64_t sub_100030E1C(uint64_t *a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(sub_10001A9A8(a1) - 8) + 80);
  return sub_1000304F8(*(_QWORD *)(v2 + 16), v2 + ((v5 + 24) & ~v5), a1, a2);
}

uint64_t sub_100030E6C(uint64_t a1)
{
  uint64_t v1;

  return sub_100030198(a1, v1, &qword_1010EBCC8, (uint64_t)&unk_10104FBD8, (uint64_t)sub_100030EB0, (uint64_t)&unk_10104FBF0);
}

uint64_t sub_100030EA4()
{
  return sub_1000314D4(&qword_1010EBCC8);
}

uint64_t sub_100030EB0()
{
  return sub_100030E1C(&qword_1010EBCC8, (uint64_t (*)(_QWORD))type metadata accessor for OwnerCommandManager);
}

uint64_t sub_100030EC4(uint64_t a1)
{
  uint64_t v1;

  return sub_100030198(a1, v1, &qword_1010EBCE0, (uint64_t)&unk_10104FC28, (uint64_t)sub_100030F08, (uint64_t)&unk_10104FC40);
}

uint64_t sub_100030EFC()
{
  return sub_1000314D4(&qword_1010EBCE0);
}

uint64_t sub_100030F08()
{
  return sub_100030824(&qword_1010EBCE0, 0, (uint64_t (*)(uint64_t))type metadata accessor for CircleTrustService);
}

uint64_t sub_100030F20(uint64_t a1)
{
  uint64_t v1;

  return sub_100030198(a1, v1, &qword_1010EBCF8, (uint64_t)&unk_10104FC78, (uint64_t)sub_100030F64, (uint64_t)&unk_10104FC90);
}

uint64_t sub_100030F58()
{
  return sub_1000314D4(&qword_1010EBCF8);
}

uint64_t sub_100030F64()
{
  return sub_100030824(&qword_1010EBCF8, 0, (uint64_t (*)(uint64_t))type metadata accessor for DeviceBeaconPayloadPublisher);
}

uint64_t sub_100030F7C(uint64_t a1)
{
  uint64_t v1;

  return sub_100030198(a1, v1, &qword_1010EBD10, (uint64_t)&unk_10104FCC8, (uint64_t)sub_100030FC0, (uint64_t)&unk_10104FCE0);
}

uint64_t sub_100030FB4()
{
  return sub_1000314D4(&qword_1010EBD10);
}

uint64_t sub_100030FC0()
{
  return sub_100030824(&qword_1010EBD10, 0, (uint64_t (*)(uint64_t))type metadata accessor for AirPodsLEPairingService);
}

uint64_t sub_100030FD8(uint64_t a1)
{
  uint64_t v1;

  return sub_100030198(a1, v1, &qword_1010EBD20, (uint64_t)&unk_10104FD18, (uint64_t)sub_10003101C, (uint64_t)&unk_10104FD30);
}

uint64_t sub_100031010()
{
  return sub_1000314D4(&qword_1010EBD20);
}

uint64_t sub_10003101C()
{
  return sub_100030E1C(&qword_1010EBD20, (uint64_t (*)(_QWORD))type metadata accessor for CentralManager);
}

uint64_t sub_100031030(uint64_t a1)
{
  uint64_t v1;

  return sub_100030198(a1, v1, &qword_1010EBD38, (uint64_t)&unk_10104FD68, (uint64_t)sub_100031074, (uint64_t)&unk_10104FD80);
}

uint64_t sub_100031068()
{
  return sub_1000314D4(&qword_1010EBD38);
}

uint64_t sub_100031074()
{
  return sub_100030E1C(&qword_1010EBD38, (uint64_t (*)(_QWORD))type metadata accessor for AccessoryConnectionService);
}

uint64_t sub_100031088(uint64_t a1)
{
  uint64_t v1;

  return sub_100030198(a1, v1, &qword_1010EBD50, (uint64_t)&unk_10104FDB8, (uint64_t)sub_1000310CC, (uint64_t)&unk_10104FDD0);
}

uint64_t sub_1000310C0()
{
  return sub_1000314D4(&qword_1010EBD50);
}

uint64_t sub_1000310CC()
{
  return sub_100030824(&qword_1010EBD50, 0, (uint64_t (*)(uint64_t))type metadata accessor for AccountService);
}

uint64_t sub_1000310E4(uint64_t a1)
{
  uint64_t v1;

  return sub_100030198(a1, v1, &qword_1010EBD68, (uint64_t)&unk_10104FE08, (uint64_t)sub_100031128, (uint64_t)&unk_10104FE20);
}

uint64_t sub_10003111C()
{
  return sub_1000314D4(&qword_1010EBD68);
}

uint64_t sub_100031128()
{
  return sub_100030824(&qword_1010EBD68, 0, (uint64_t (*)(uint64_t))type metadata accessor for FirstUnlockService);
}

uint64_t sub_100031140(uint64_t a1)
{
  uint64_t v1;

  return sub_100030198(a1, v1, &qword_1010EBD80, (uint64_t)&unk_10104FE58, (uint64_t)sub_100031184, (uint64_t)&unk_10104FE70);
}

uint64_t sub_100031178()
{
  return sub_1000314D4(&qword_1010EBD80);
}

uint64_t sub_100031184()
{
  return sub_100030E1C(&qword_1010EBD80, (uint64_t (*)(_QWORD))type metadata accessor for LeechScanningService);
}

uint64_t sub_100031198()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  void (*v11)(char *, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v0 = type metadata accessor for NetworkReachabilityStatus(0);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = __chkstk_darwin(v0);
  v4 = (char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  v6 = (char *)&v13 - v5;
  v7 = type metadata accessor for NetworkReachability(0);
  swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
  v8 = NetworkReachability.init()();
  dispatch thunk of NetworkReachability.status.getter();
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v4, enum case for NetworkReachabilityStatus.reachableViaWiFi(_:), v0);
  v9 = sub_100006C64(&qword_1010EBD88, 255, (uint64_t (*)(uint64_t))&type metadata accessor for NetworkReachabilityStatus, (uint64_t)&protocol conformance descriptor for NetworkReachabilityStatus);
  dispatch thunk of RawRepresentable.rawValue.getter(&v15, v0, v9);
  dispatch thunk of RawRepresentable.rawValue.getter(&v13, v0, v9);
  if (v15 == v13 && v16 == v14)
    v10 = 1;
  else
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v15, v16, v13, v14, 0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release(v8);
  v11 = *(void (**)(char *, uint64_t))(v1 + 8);
  v11(v4, v0);
  v11(v6, v0);
  return v10 & 1;
}

uint64_t sub_10003132C(uint64_t a1)
{
  uint64_t v1;

  return sub_100030198(a1, v1, &qword_1010EBDA0, (uint64_t)&unk_10104FEA8, (uint64_t)sub_100031370, (uint64_t)&unk_10104FEC0);
}

uint64_t sub_100031364()
{
  return sub_1000314D4(&qword_1010EBDA0);
}

uint64_t sub_100031370()
{
  return sub_100030E1C(&qword_1010EBDA0, (uint64_t (*)(_QWORD))type metadata accessor for DistributedNotificationService);
}

uint64_t sub_100031384(uint64_t a1)
{
  uint64_t v1;

  return sub_100030198(a1, v1, &qword_1010EBDB8, (uint64_t)&unk_10104FEF8, (uint64_t)sub_1000313C8, (uint64_t)&unk_10104FF10);
}

uint64_t sub_1000313BC()
{
  return sub_1000314D4(&qword_1010EBDB8);
}

uint64_t sub_1000313C8()
{
  return sub_100030E1C(&qword_1010EBDB8, (uint64_t (*)(_QWORD))type metadata accessor for WildModeAssociationRecordsPublisher);
}

uint64_t sub_1000313DC(uint64_t a1)
{
  uint64_t v1;

  return sub_100030198(a1, v1, &qword_1010EBDD0, (uint64_t)&unk_10104FF48, (uint64_t)sub_100031420, (uint64_t)&unk_10104FF60);
}

uint64_t sub_100031414()
{
  return sub_1000314D4(&qword_1010EBDD0);
}

uint64_t sub_100031420()
{
  return sub_100030E1C(&qword_1010EBDD0, (uint64_t (*)(_QWORD))type metadata accessor for LocalFindableLostModeDetectionService);
}

uint64_t sub_100031434(uint64_t a1)
{
  uint64_t v1;

  return sub_100030198(a1, v1, &qword_1010EBDE8, (uint64_t)&unk_10104FF98, (uint64_t)sub_100031478, (uint64_t)&unk_10104FFB0);
}

uint64_t sub_10003146C()
{
  return sub_1000314D4(&qword_1010EBDE8);
}

uint64_t sub_100031478()
{
  return sub_100030824(&qword_1010EBDE8, 0, (uint64_t (*)(uint64_t))type metadata accessor for CompanionPublishActivity);
}

uint64_t sub_100031490(uint64_t a1)
{
  uint64_t v1;

  return sub_100030198(a1, v1, &qword_1010EBE00, (uint64_t)&unk_10104FFE8, (uint64_t)sub_100031544, (uint64_t)&unk_101050000);
}

uint64_t sub_1000314C8()
{
  return sub_1000314D4(&qword_1010EBE00);
}

uint64_t sub_1000314D4(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = sub_10001A9A8(a1);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(unsigned __int8 *)(v3 + 80);
  v5 = (v4 + 24) & ~v4;
  v6 = v5 + *(_QWORD *)(v3 + 64);
  v7 = v4 | 7;
  swift_release(*(_QWORD *)(v1 + 16));
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1 + v5, v2);
  return swift_deallocObject(v1, v6, v7);
}

uint64_t sub_100031544(uint64_t a1, uint64_t a2)
{
  return sub_100030824(&qword_1010EBE00, a2, (uint64_t (*)(uint64_t))type metadata accessor for FindMyNetworkPublishActivityService);
}

uint64_t sub_100031558()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  id v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t My;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  double v39;
  id v40;
  void *v41;
  id v42;
  double Current;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t ObjectType;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  unsigned __int8 v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  char *v66;
  void (*v67)(char *, uint64_t);
  char *v68;
  char v69;
  uint64_t result;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  unint64_t v77;
  BOOL v78;
  char *v79;
  id v80;
  unsigned int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  double v90;
  id v91;
  void *v92;
  id v93;
  double v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unsigned __int8 v111;
  uint64_t v112;
  _QWORD *v113;
  uint64_t v114;
  char *v115;
  char *v116;
  char v117;
  uint64_t v118;
  unint64_t v119;
  char *v120;
  uint64_t v121;
  char *v122;
  char *v123;
  char *v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  NSNotificationName v130;
  uint64_t v131;
  char *v132;
  char *v133;
  uint64_t v134;
  char *v135;
  unsigned int v136;
  void (*v137)(char *);
  unint64_t v138;
  uint64_t v139;
  char *v140;
  char v141[24];
  _QWORD v142[4];
  _QWORD v143[3];
  _QWORD v144[4];
  double aBlock;
  uint64_t v146;
  uint64_t (*v147)(uint64_t, uint64_t);
  void *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;

  v0 = sub_10001A9A8(&qword_1010F46C0);
  v1 = __chkstk_darwin(v0);
  v120 = (char *)&v118 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v1);
  v125 = (char *)&v118 - v3;
  v131 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  v4 = __chkstk_darwin(v131);
  v121 = (uint64_t)&v118 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v126 = (uint64_t)&v118 - v6;
  v7 = type metadata accessor for Date(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v118 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v9);
  v124 = (char *)&v118 - v13;
  v14 = __chkstk_darwin(v12);
  v135 = (char *)&v118 - v15;
  v16 = __chkstk_darwin(v14);
  v18 = (char *)&v118 - v17;
  v19 = __chkstk_darwin(v16);
  v133 = (char *)&v118 - v20;
  __chkstk_darwin(v19);
  v140 = (char *)&v118 - v21;
  v22 = sub_1001E7CC8();
  v23 = sub_1001C46A0(v22);
  swift_bridgeObjectRelease();
  v24 = *(_QWORD *)(v23 + 16);
  if (!v24)
    goto LABEL_42;
  v25 = 0;
  v26 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v134 = v23;
  v119 = v26;
  v27 = (char *)(v23 + v26);
  v139 = *(_QWORD *)(v8 + 72);
  v137 = *(void (**)(char *))(v8 + 16);
  v136 = enum case for Feature.FindMy.trustedNowUsesReferenceClock(_:);
  v130 = NSSystemClockDidChangeNotification;
  v123 = (char *)&type metadata for () + 8;
  v128 = v7;
  v127 = v8;
  v129 = v18;
  v28 = v11;
  v122 = v11;
  v138 = v24;
  while (1)
  {
    v132 = v27;
    v137(v135);
    if (qword_1010EA1D0 != -1)
      swift_once(&qword_1010EA1D0, sub_100B11444);
    aBlock = 7.45683732e247;
    *(double *)&v146 = -5.98008217e197;
    SynchronousCache.cachedValue<A>(key:computeBlock:)(v143, &aBlock, sub_10001F628, 0, &type metadata for Bool);
    swift_bridgeObjectRelease();
    if (LOBYTE(v143[0]) == 1)
    {
      v29 = objc_msgSend((id)objc_opt_self(FMSystemInfo), "sharedInstance");
      v30 = objc_msgSend(v29, "isInternalBuild");

      if (v30)
      {
        if (qword_1010E98B0 != -1)
          swift_once(&qword_1010E98B0, sub_10001F1E8);
        v31 = sub_10001A9E8(v131, (uint64_t)qword_1010E98B8);
        swift_beginAccess(v31, v141, 0, 0);
        v32 = v31;
        v33 = v121;
        sub_10000F9B8(v32, v121, (uint64_t *)&unk_1010EA690);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v33, 1, v7) != 1)
        {
          v60 = v8;
          v61 = v28;
          (*(void (**)(char *, uint64_t, uint64_t))(v8 + 32))(v28, v33, v7);
          goto LABEL_34;
        }
        sub_100004048(v33, (uint64_t *)&unk_1010EA690);
      }
    }
    My = type metadata accessor for Feature.FindMy(0);
    v148 = (void *)My;
    v149 = sub_100006C64((unint64_t *)&qword_1010EE1B0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for Feature.FindMy, (uint64_t)&protocol conformance descriptor for Feature.FindMy);
    v35 = sub_100018F08(&aBlock);
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(My - 8) + 104))(v35, v136, My);
    LOBYTE(My) = isFeatureEnabled(_:)(&aBlock);
    v36 = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&aBlock);
    if ((My & 1) == 0)
    {
      v60 = v8;
      v61 = v28;
      Date.init()(v36);
      goto LABEL_34;
    }
    if (qword_1010EA1F8 != -1)
      swift_once(&qword_1010EA1F8, sub_100B35618);
    v37 = qword_101115B98;
    v38 = sub_10001A9A8(&qword_1010EBE40);
    OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_10003326C, 0, v37, v123, v38);
    v39 = *(double *)&v146;
    if ((LOBYTE(aBlock) & 1) == 0)
    {
      v40 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
      v149 = (uint64_t)sub_100033280;
      v150 = 0;
      aBlock = COERCE_DOUBLE(_NSConcreteStackBlock);
      v146 = 1107296256;
      v147 = sub_100B354E4;
      v148 = &unk_1010500A0;
      v41 = _Block_copy(&aBlock);
      swift_release(v150);
      v42 = objc_msgSend(v40, "addObserverForName:object:queue:usingBlock:", v130, 0, 0, v41);
      _Block_release(v41);
      v28 = v122;
      swift_unknownObjectRelease(v42);

    }
    if (qword_1010EA208 != -1)
      swift_once(&qword_1010EA208, sub_100B35688);
    if (*(double *)&qword_101115BA8 >= v39)
      sub_100B35B90(0);
    Current = CFAbsoluteTimeGetCurrent();
    v44 = qword_101115B98;
    v45 = sub_10001A9A8(&qword_1010EBE48);
    v46 = OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_100033284, 0, v44, (char *)&type metadata for () + 8, v45);
    if (Current - aBlock - *(double *)&v146 > 86400.0)
    {
      OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_100033298, 0, qword_101115B98, (char *)&type metadata for () + 8, (char *)&type metadata for () + 8);
      v47 = type metadata accessor for TaskPriority(0);
      v48 = *(_QWORD *)(v47 - 8);
      v49 = (uint64_t)v120;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v48 + 56))(v120, 1, 1, v47);
      v50 = swift_allocObject(&unk_1010500D8, 32, 7);
      *(_QWORD *)(v50 + 16) = 0;
      v51 = (uint64_t *)(v50 + 16);
      *(_QWORD *)(v50 + 24) = 0;
      v52 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v48 + 48))(v49, 1, v47);
      if ((_DWORD)v52 == 1)
      {
        sub_100004048(v49, &qword_1010F46C0);
        v53 = 0;
        v54 = *v51;
        if (*v51)
        {
LABEL_23:
          v55 = *(_QWORD *)(v50 + 24);
          ObjectType = swift_getObjectType(v54);
          swift_unknownObjectRetain(v54);
          v57 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v55);
          v59 = v58;
          swift_unknownObjectRelease(v54);
LABEL_29:
          v18 = v129;
          v63 = swift_allocObject(&unk_101050100, 32, 7);
          *(_QWORD *)(v63 + 16) = &unk_1010EBE60;
          *(_QWORD *)(v63 + 24) = v50;
          if (v59 | v57)
          {
            v142[0] = 0;
            v142[1] = 0;
            v64 = v142;
            v142[2] = v57;
            v142[3] = v59;
          }
          else
          {
            v64 = 0;
          }
          v7 = v128;
          v60 = v127;
          v61 = v122;
          v65 = swift_task_create(v53 | 0x1C00, v64, (char *)&type metadata for () + 8, &unk_1010EBE68, v63);
          v46 = swift_release(v65);
          goto LABEL_33;
        }
      }
      else
      {
        v62 = TaskPriority.rawValue.getter(v52);
        (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v49, v47);
        v53 = v62;
        v54 = *v51;
        if (*v51)
          goto LABEL_23;
      }
      v57 = 0;
      v59 = 0;
      goto LABEL_29;
    }
    v60 = v8;
    v61 = v28;
LABEL_33:
    Date.init(timeIntervalSinceReferenceDate:)(v46);
LABEL_34:
    v66 = v124;
    Date.addingTimeInterval(_:)(-86400.0);
    v67 = *(void (**)(char *, uint64_t))(v60 + 8);
    v28 = v61;
    v67(v61, v7);
    v68 = v135;
    v69 = static Date.> infix(_:_:)(v135, v66);
    v67(v66, v7);
    result = ((uint64_t (*)(char *, uint64_t))v67)(v68, v7);
    if ((v69 & 1) != 0)
      break;
    ++v25;
    v27 = &v132[v139];
    v8 = v60;
    if (v138 == v25)
      goto LABEL_42;
  }
  v71 = v138;
  v72 = v25;
  v73 = v60;
  if (v138 < v25)
  {
    v74 = -1;
    v75 = v25;
    v72 = v138;
    goto LABEL_44;
  }
  if (v138 == v25)
  {
LABEL_42:
    swift_bridgeObjectRelease();
    return 0;
  }
  v74 = 1;
  v75 = v138;
LABEL_44:
  v76 = 0;
  v123 = (char *)(v134 + v119);
  v132 = (char *)&type metadata for () + 8;
  v122 = (char *)v74;
  v121 = v75;
  while (2)
  {
    v78 = __OFADD__(v76, v74);
    v76 += v74;
    if (v78)
      goto LABEL_89;
    if (v72 == v71)
    {
LABEL_90:
      __break(1u);
      return result;
    }
    v77 = v72 + 1;
    if (v72 + 1 != v71)
    {
      v124 = v76;
      v79 = &v123[v139 * v77];
      v135 = (char *)v72;
      while (1)
      {
        if (v72 < -1)
        {
          __break(1u);
LABEL_88:
          __break(1u);
LABEL_89:
          __break(1u);
          goto LABEL_90;
        }
        if (v77 >= *(_QWORD *)(v134 + 16))
          goto LABEL_88;
        ((void (*)(char *, char *, uint64_t))v137)(v140, v79, v7);
        aBlock = 7.45683732e247;
        *(double *)&v146 = -5.98008217e197;
        SynchronousCache.cachedValue<A>(key:computeBlock:)(&v151, &aBlock, sub_10001F628, 0, &type metadata for Bool);
        swift_bridgeObjectRelease();
        if (v151 == 1)
        {
          v80 = objc_msgSend((id)objc_opt_self(FMSystemInfo), "sharedInstance");
          v81 = objc_msgSend(v80, "isInternalBuild");

          if (v81)
          {
            if (qword_1010E98B0 != -1)
              swift_once(&qword_1010E98B0, sub_10001F1E8);
            v82 = sub_10001A9E8(v131, (uint64_t)qword_1010E98B8);
            swift_beginAccess(v82, v143, 0, 0);
            v83 = v82;
            v84 = v126;
            sub_10000F9B8(v83, v126, (uint64_t *)&unk_1010EA690);
            if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v73 + 48))(v84, 1, v7) != 1)
            {
              (*(void (**)(char *, uint64_t, uint64_t))(v73 + 32))(v18, v84, v7);
              goto LABEL_81;
            }
            sub_100004048(v84, (uint64_t *)&unk_1010EA690);
          }
        }
        v85 = type metadata accessor for Feature.FindMy(0);
        v148 = (void *)v85;
        v149 = sub_100006C64((unint64_t *)&qword_1010EE1B0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for Feature.FindMy, (uint64_t)&protocol conformance descriptor for Feature.FindMy);
        v86 = sub_100018F08(&aBlock);
        (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v85 - 8) + 104))(v86, v136, v85);
        LOBYTE(v85) = isFeatureEnabled(_:)(&aBlock);
        v87 = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&aBlock);
        if ((v85 & 1) == 0)
        {
          Date.init()(v87);
          goto LABEL_81;
        }
        if (qword_1010EA1F8 != -1)
          swift_once(&qword_1010EA1F8, sub_100B35618);
        v88 = qword_101115B98;
        v89 = sub_10001A9A8(&qword_1010EBE40);
        OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_10003326C, 0, v88, v132, v89);
        v90 = *(double *)&v146;
        if ((LOBYTE(aBlock) & 1) == 0)
        {
          v91 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
          v149 = (uint64_t)sub_100033280;
          v150 = 0;
          aBlock = COERCE_DOUBLE(_NSConcreteStackBlock);
          v146 = 1107296256;
          v147 = sub_100B354E4;
          v148 = &unk_101050028;
          v92 = _Block_copy(&aBlock);
          swift_release(v150);
          v93 = objc_msgSend(v91, "addObserverForName:object:queue:usingBlock:", v130, 0, 0, v92);
          _Block_release(v92);
          swift_unknownObjectRelease(v93);

        }
        if (qword_1010EA208 != -1)
          swift_once(&qword_1010EA208, sub_100B35688);
        if (*(double *)&qword_101115BA8 >= v90)
          sub_100B35B90(0);
        v94 = CFAbsoluteTimeGetCurrent();
        v95 = qword_101115B98;
        v96 = sub_10001A9A8(&qword_1010EBE48);
        v97 = OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_100033284, 0, v95, (char *)&type metadata for () + 8, v96);
        if (v94 - aBlock - *(double *)&v146 > 86400.0)
          break;
LABEL_80:
        Date.init(timeIntervalSinceReferenceDate:)(v97);
LABEL_81:
        v115 = v133;
        Date.addingTimeInterval(_:)(-86400.0);
        v67(v18, v7);
        v116 = v140;
        v117 = static Date.> infix(_:_:)(v140, v115);
        v67(v115, v7);
        result = ((uint64_t (*)(char *, uint64_t))v67)(v116, v7);
        if ((v117 & 1) != 0)
        {
          v71 = v138;
          goto LABEL_85;
        }
        ++v77;
        v79 += v139;
        v71 = v138;
        v72 = (uint64_t)v135;
        if (v138 == v77)
        {
          v77 = v138;
LABEL_85:
          v74 = (uint64_t)v122;
          v76 = v124;
          v75 = v121;
          goto LABEL_46;
        }
      }
      OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_100033298, 0, qword_101115B98, (char *)&type metadata for () + 8, (char *)&type metadata for () + 8);
      v98 = type metadata accessor for TaskPriority(0);
      v99 = *(_QWORD *)(v98 - 8);
      v100 = (uint64_t)v125;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v99 + 56))(v125, 1, 1, v98);
      v101 = swift_allocObject(&unk_101050060, 32, 7);
      *(_QWORD *)(v101 + 16) = 0;
      v102 = (uint64_t *)(v101 + 16);
      *(_QWORD *)(v101 + 24) = 0;
      v103 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v99 + 48))(v100, 1, v98);
      if ((_DWORD)v103 == 1)
      {
        sub_100004048(v100, &qword_1010F46C0);
        v104 = 0;
        v105 = *v102;
        if (*v102)
          goto LABEL_71;
LABEL_75:
        v108 = 0;
        v110 = 0;
      }
      else
      {
        v111 = TaskPriority.rawValue.getter(v103);
        (*(void (**)(uint64_t, uint64_t))(v99 + 8))(v100, v98);
        v104 = v111;
        v105 = *v102;
        if (!*v102)
          goto LABEL_75;
LABEL_71:
        v106 = *(_QWORD *)(v101 + 24);
        v107 = swift_getObjectType(v105);
        swift_unknownObjectRetain(v105);
        v108 = dispatch thunk of Actor.unownedExecutor.getter(v107, v106);
        v110 = v109;
        swift_unknownObjectRelease(v105);
      }
      v112 = swift_allocObject(&unk_101050088, 32, 7);
      *(_QWORD *)(v112 + 16) = &unk_1010EBE50;
      *(_QWORD *)(v112 + 24) = v101;
      if (v110 | v108)
      {
        v144[0] = 0;
        v144[1] = 0;
        v113 = v144;
        v144[2] = v108;
        v144[3] = v110;
      }
      else
      {
        v113 = 0;
      }
      v7 = v128;
      v73 = v127;
      v114 = swift_task_create(v104 | 0x1C00, v113, (char *)&type metadata for () + 8, &unk_1010EBE58, v112);
      v97 = swift_release(v114);
      v18 = v129;
      goto LABEL_80;
    }
    v77 = v71;
LABEL_46:
    v72 = v77;
    if (v77 != v75)
      continue;
    break;
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v76;
}

uint64_t sub_100032544(char a1)
{
  uint64_t v1;
  unint64_t v2;

  *(_BYTE *)(v1 + 96) = a1;
  v2 = (*(_QWORD *)(*(_QWORD *)(sub_10001A9A8((uint64_t *)&unk_1010EA690) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v1 + 48) = swift_task_alloc(v2);
  *(_QWORD *)(v1 + 56) = swift_task_alloc(v2);
  *(_QWORD *)(v1 + 64) = swift_task_alloc(v2);
  return swift_task_switch(sub_1000325BC, 0, 0);
}

uint64_t sub_1000325BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  if (qword_1010E9D08 != -1)
    swift_once(&qword_1010E9D08, sub_10059A6E0);
  v1 = qword_1011B71A8;
  *(_QWORD *)(v0 + 72) = qword_1011B71A8;
  v2 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v3 = (_QWORD *)swift_task_alloc(v2);
  *(_QWORD *)(v0 + 80) = v3;
  *v3 = v0;
  v3[1] = sub_10003266C;
  return unsafeBlocking<A>(_:)(v0 + 16, sub_100033264, v1, &type metadata for Configuration);
}

uint64_t sub_10003266C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 72);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 80));
  swift_release(v1);
  return swift_task_switch(sub_1000326C8, 0, 0);
}

uint64_t sub_1000326C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  os_log_type_t v37;
  uint64_t v38;

  v2 = *(_QWORD *)(v0 + 16);
  v3 = sub_100C1B318(v2);
  v4 = sub_100C1B32C(v2);
  swift_bridgeObjectRelease();
  v5 = v3 + v4;
  if (__OFADD__(v3, v4))
  {
    __break(1u);
  }
  else
  {
    v6 = *(char **)(v0 + 64);
    v1 = sub_100031558();
    v7 = sub_1001E7CC8();
    v8 = sub_1001C46A0(v7);
    swift_bridgeObjectRelease();
    sub_1001E5FD4(v8, v6);
    swift_bridgeObjectRelease();
    if (qword_1010E98D0 == -1)
      goto LABEL_3;
  }
  swift_once(&qword_1010E98D0, sub_100027E30);
LABEL_3:
  v9 = *(_QWORD *)(v0 + 56);
  v10 = *(_QWORD *)(v0 + 64);
  v11 = type metadata accessor for Logger(0);
  sub_10001A9E8(v11, (uint64_t)qword_1011B6650);
  v12 = sub_10000F9B8(v10, v9, (uint64_t *)&unk_1010EA690);
  v13 = Logger.logObject.getter(v12);
  v14 = static os_log_type_t.default.getter(v13);
  if (os_log_type_enabled(v13, v14))
  {
    v37 = v14;
    v35 = v0 + 92;
    v15 = *(_QWORD *)(v0 + 48);
    v16 = *(_QWORD *)(v0 + 56);
    v17 = swift_slowAlloc(44, -1);
    v36 = swift_slowAlloc(32, -1);
    v38 = v36;
    *(_DWORD *)v17 = 134219010;
    v34 = v1;
    *(_QWORD *)(v0 + 24) = v1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v17 + 4, v17 + 12);
    *(_WORD *)(v17 + 12) = 2048;
    *(_QWORD *)(v0 + 32) = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v17 + 14, v17 + 22);
    *(_WORD *)(v17 + 22) = 2082;
    sub_10000F9B8(v16, v15, (uint64_t *)&unk_1010EA690);
    v18 = type metadata accessor for Date(0);
    v19 = *(_QWORD *)(v18 - 8);
    v20 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v19 + 48))(v15, 1, v18);
    v21 = *(_QWORD *)(v0 + 48);
    if (v20 == 1)
    {
      sub_100004048(*(_QWORD *)(v0 + 48), (uint64_t *)&unk_1010EA690);
      v22 = 0xE300000000000000;
      v23 = 7104878;
    }
    else
    {
      v23 = Date.debugDescription.getter();
      v22 = v27;
      (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v21, v18);
    }
    v28 = *(_QWORD *)(v0 + 56);
    v33 = *(_QWORD *)(v0 + 64);
    v32 = *(unsigned __int8 *)(v0 + 96);
    *(_QWORD *)(v0 + 40) = sub_100016940(v23, v22, &v38);
    v1 = v34;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v17 + 24, v17 + 32);
    swift_bridgeObjectRelease();
    sub_100004048(v28, (uint64_t *)&unk_1010EA690);
    *(_WORD *)(v17 + 32) = 1024;
    *(_DWORD *)(v0 + 88) = v5 < v34;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 88, v35, v17 + 34, v17 + 38);
    *(_WORD *)(v17 + 38) = 1024;
    *(_DWORD *)(v0 + 92) = v32;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v35, v0 + 96, v17 + 40, v17 + 44);
    _os_log_impl((void *)&_mh_execute_header, v13, v37, "Publish limit check: %ld / %ld, finderStartOfDay: %{public}s. Reached maximum: %{BOOL}d, on battery: %{BOOL}d.", (uint8_t *)v17, 0x2Cu);
    swift_arrayDestroy(v36, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v36, -1, -1);
    swift_slowDealloc(v17, -1, -1);

    v26 = v33;
  }
  else
  {
    v24 = *(_QWORD *)(v0 + 56);
    v25 = *(_QWORD *)(v0 + 64);

    sub_100004048(v24, (uint64_t *)&unk_1010EA690);
    v26 = v25;
  }
  sub_100004048(v26, (uint64_t *)&unk_1010EA690);
  v29 = *(_QWORD *)(v0 + 56);
  v30 = *(_QWORD *)(v0 + 48);
  swift_task_dealloc(*(_QWORD *)(v0 + 64));
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  return (*(uint64_t (**)(BOOL))(v0 + 8))(v5 < v1);
}

double sub_100032A94()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t MyNetworkPublishDateProvider;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  _BYTE v14[16];

  v0 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  __chkstk_darwin(v0);
  v2 = &v14[-((v1 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v3 = type metadata accessor for Date(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = &v14[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MyNetworkPublishDateProvider = type metadata accessor for FindMyNetworkPublishDateProvider();
  v8 = swift_allocObject(MyNetworkPublishDateProvider, 112, 15);
  swift_defaultActor_initialize(v8);
  v9 = sub_1001E7CC8();
  v10 = sub_1001C46A0(v9);
  swift_bridgeObjectRelease();
  sub_100A79158(v10, v2);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3) == 1)
  {
    static Date.trustedNow.getter((uint64_t)v6);
    v11 = sub_100004048((uint64_t)v2, (uint64_t *)&unk_1010EA690);
  }
  else
  {
    v11 = (*(uint64_t (**)(_BYTE *, char *, uint64_t))(v4 + 32))(v6, v2, v3);
  }
  v12 = Date.timeIntervalSinceNow.getter(v11);
  swift_release(v8);
  (*(void (**)(_BYTE *, uint64_t))(v4 + 8))(v6, v3);
  return fabs(v12);
}

uint64_t sub_100032C04(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_BYTE *)(v2 + 544) = a2;
  v4 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  *(_QWORD *)(v2 + 496) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Date(0);
  *(_QWORD *)(v2 + 504) = v5;
  v6 = *(_QWORD *)(v5 - 8);
  *(_QWORD *)(v2 + 512) = v6;
  *(_QWORD *)(v2 + 520) = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100032C8C, a1, 0);
}

uint64_t sub_100032C8C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t MyNetworkPublishDateProvider;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = *(_QWORD *)(v0 + 504);
  v2 = *(_QWORD *)(v0 + 512);
  v3 = *(_QWORD *)(v0 + 496);
  MyNetworkPublishDateProvider = type metadata accessor for FindMyNetworkPublishDateProvider();
  v5 = swift_allocObject(MyNetworkPublishDateProvider, 112, 15);
  swift_defaultActor_initialize(v5);
  sub_10002CF54(v3);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    v6 = *(_QWORD *)(v0 + 496);
    static Date.trustedNow.getter(*(_QWORD *)(v0 + 520));
    v7 = sub_100004048(v6, (uint64_t *)&unk_1010EA690);
  }
  else
  {
    v7 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 512) + 32))(*(_QWORD *)(v0 + 520), *(_QWORD *)(v0 + 496), *(_QWORD *)(v0 + 504));
  }
  v8 = *(_QWORD *)(v0 + 520);
  v9 = *(_QWORD *)(v0 + 504);
  v10 = *(_QWORD *)(v0 + 512);
  *(double *)(v0 + 528) = Date.timeIntervalSinceNow.getter(v7);
  swift_release(v5);
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v8, v9);
  *(double *)(v0 + 536) = sub_100032A94();
  return swift_task_switch(sub_100032D84, 0, 0);
}

void sub_100032D84()
{
  __asm { BR              X10 }
}

uint64_t sub_100032DE4()
{
  uint64_t v0;
  uint64_t v1;
  double v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t inited;
  uint64_t v10;
  uint64_t v11;
  char v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;

  v2 = *(double *)(v0 + 536);
  v3 = *(_QWORD *)(v0 + 520);
  v4 = *(_QWORD *)(v0 + 496);
  v5 = fabs(*(double *)(v0 + 528));
  v6 = sub_100CD9CA8(v2);
  v7 = sub_100CD9CA8(v5);
  v8 = sub_10001A9A8(&qword_1010EBE10);
  inited = swift_initStackObject(v8, v0 + 16);
  *(_OWORD *)(inited + 16) = xmmword_100E22340;
  *(_QWORD *)(inited + 32) = 0x7265747461426E6FLL;
  *(_QWORD *)(inited + 40) = v1 + 7;
  v10 = sub_100CA7D40((uint64_t)&off_101047EF0);
  v11 = sub_1006B7904();
  v12 = sub_100A0658C(v11, v10);
  swift_bridgeObjectRelease();
  *(_BYTE *)(inited + 48) = v12 & 1;
  *(_WORD *)(inited + 88) = 0;
  *(_QWORD *)(inited + 96) = 0x696669576E6FLL;
  *(_QWORD *)(inited + 104) = 0xE600000000000000;
  *(_BYTE *)(inited + 112) = sub_100031198() & 1;
  *(_WORD *)(inited + 152) = 0;
  *(_QWORD *)(inited + 160) = 0xD000000000000014;
  *(_QWORD *)(inited + 168) = 0x8000000100EC5E30;
  *(_QWORD *)(inited + 200) = &type metadata for Double;
  v13 = sub_100033198();
  *(_QWORD *)(inited + 208) = v13;
  *(double *)(inited + 176) = v2;
  *(_WORD *)(inited + 216) = 3;
  *(_QWORD *)(inited + 224) = 0xD000000000000014;
  *(_QWORD *)(inited + 232) = 0x8000000100EC5E50;
  *(_QWORD *)(inited + 264) = &type metadata for Double;
  *(_QWORD *)(inited + 272) = v13;
  *(double *)(inited + 240) = v5;
  *(_WORD *)(inited + 280) = 3;
  *(_QWORD *)(inited + 288) = 0xD000000000000016;
  *(_QWORD *)(inited + 296) = 0x8000000100EC5E70;
  *(_QWORD *)(inited + 328) = &type metadata for String;
  *(_QWORD *)(inited + 336) = sub_1000330C8();
  *(_QWORD *)(inited + 304) = 0x6F506D756964656DLL;
  *(_QWORD *)(inited + 312) = 0xEB00000000726577;
  *(_WORD *)(inited + 344) = 1;
  *(_QWORD *)(inited + 352) = 0xD000000000000019;
  *(_QWORD *)(inited + 360) = 0x8000000100EC5E90;
  *(_QWORD *)(inited + 392) = &type metadata for Int;
  v14 = sub_1000331DC();
  *(_QWORD *)(inited + 400) = v14;
  *(_QWORD *)(inited + 368) = v6;
  *(_WORD *)(inited + 408) = 2;
  *(_QWORD *)(inited + 416) = 0xD000000000000019;
  *(_QWORD *)(inited + 424) = 0x8000000100EC5EB0;
  *(_QWORD *)(inited + 456) = &type metadata for Int;
  *(_QWORD *)(inited + 464) = v14;
  *(_QWORD *)(inited + 432) = v7;
  *(_WORD *)(inited + 472) = 2;
  v15 = sub_1006B8C78(inited);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(unint64_t))(v0 + 8))(v15);
}

unint64_t sub_1000330C8()
{
  unint64_t result;

  result = qword_101105890;
  if (!qword_101105890)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_101105890);
  }
  return result;
}

unint64_t sub_10003310C()
{
  unint64_t result;

  result = qword_1010EBE18;
  if (!qword_1010EBE18)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Int64, &type metadata for Int64);
    atomic_store(result, (unint64_t *)&qword_1010EBE18);
  }
  return result;
}

uint64_t sub_100033150(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001A9A8(&qword_1010EBE20);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

unint64_t sub_100033198()
{
  unint64_t result;

  result = qword_1010EBE30;
  if (!qword_1010EBE30)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Double, &type metadata for Double);
    atomic_store(result, (unint64_t *)&qword_1010EBE30);
  }
  return result;
}

unint64_t sub_1000331DC()
{
  unint64_t result;

  result = qword_1011074D0;
  if (!qword_1011074D0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Int, &type metadata for Int);
    atomic_store(result, (unint64_t *)&qword_1011074D0);
  }
  return result;
}

unint64_t sub_100033220()
{
  unint64_t result;

  result = qword_1010F7940;
  if (!qword_1010F7940)
  {
    result = swift_getWitnessTable(&unk_100E69950, &type metadata for DaemonError);
    atomic_store(result, (unint64_t *)&qword_1010F7940);
  }
  return result;
}

uint64_t sub_100033264()
{
  uint64_t v0;

  return sub_10001E01C(v0);
}

double sub_10003326C@<D0>(uint64_t a1@<X8>)
{
  return sub_100B361D8(a1);
}

double sub_100033284@<D0>(_QWORD *a1@<X8>)
{
  return sub_100B35A78(a1);
}

void sub_100033298()
{
  sub_100B35ADC();
}

uint64_t sub_1000332AC()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000332D0()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_101115C84);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_100004A74;
  return sub_100B35AEC();
}

uint64_t sub_100033334()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100033358(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc(dword_1010EBAC4);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_100004C28;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_1010EBAC0 + dword_1010EBAC0))(a1, v4);
}

uint64_t sub_1000333C8()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_101115C84);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_100004C28;
  return sub_100B35AEC();
}

uint64_t sub_10003342C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc(dword_1010EBAC4);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_100004A74;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_1010EBAC0 + dword_1010EBAC0))(a1, v4);
}

uint64_t sub_10003349C()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1000334C0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char v8;
  _QWORD *v9;
  _QWORD *v10;

  v6 = *(_QWORD *)(v2 + 24);
  v7 = *(_QWORD *)(v2 + 32);
  v8 = *(_BYTE *)(v2 + 16);
  v9 = (_QWORD *)swift_task_alloc(dword_1010EBE74);
  *(_QWORD *)(v3 + 16) = v9;
  *v9 = v3;
  v9[1] = sub_100004A74;
  v10 = (_QWORD *)swift_task_alloc(dword_1010EBEA4);
  v9[2] = v10;
  *v10 = v9;
  v10[1] = sub_100004A74;
  return sub_100029CA0(a1, v8, a2, v6, v7);
}

uint64_t sub_100033568()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10003358C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  char v7;
  _QWORD *v8;

  v6 = *(_QWORD *)(v2 + 24);
  v7 = *(_BYTE *)(v2 + 16);
  v8 = (_QWORD *)swift_task_alloc(dword_1010EBE84);
  *(_QWORD *)(v3 + 16) = v8;
  *v8 = v3;
  v8[1] = sub_100004A74;
  return sub_10002A940(a1, a2, v7, v6);
}

uint64_t sub_100033604(uint64_t a1)
{
  uint64_t v1;

  return sub_100613318(a1, v1);
}

uint64_t getEnumTagSinglePayload for MaintenanceConnectionPolicy(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_17;
  if (a2 + 2 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 2) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 2;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 2;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 2;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 3;
  v8 = v6 - 3;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for MaintenanceConnectionPolicy(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_100033810 + 4 * byte_100E22355[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_100033844 + 4 * byte_100E22350[v4]))();
}

uint64_t sub_100033844(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10003384C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100033854);
  return result;
}

uint64_t sub_100033860(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100033868);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_10003386C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100033874(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100033880(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_100033888(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for MaintenanceConnectionPolicy()
{
  return &type metadata for MaintenanceConnectionPolicy;
}

BOOL sub_1000338A0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

Swift::Int sub_1000338B4()
{
  unsigned __int8 *v0;
  Swift::UInt v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_1000338F8()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int sub_100033920()
{
  unsigned __int8 *v0;
  Swift::UInt v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t sub_100033960()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 1684826487;
  if (*v0 != 1)
    v1 = 7105633;
  if (*v0)
    return v1;
  else
    return 1701736302;
}

unint64_t sub_1000339A8()
{
  unint64_t result;

  result = qword_1010EBEC8;
  if (!qword_1010EBEC8)
  {
    result = swift_getWitnessTable(&unk_100E223E4, &type metadata for MaintenanceConnectionPolicy);
    atomic_store(result, (unint64_t *)&qword_1010EBEC8);
  }
  return result;
}

uint64_t *sub_1000339EC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v5 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain(v4);
  }
  else
  {
    v5 = a1;
    v6 = *(int *)(a3 + 20);
    v7 = (char *)a1 + v6;
    v8 = (char *)a2 + v6;
    v9 = type metadata accessor for FMNAccountType(0);
    v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
    swift_retain(v4);
    v10(v7, v8, v9);
  }
  return v5;
}

uint64_t sub_100033A84(_QWORD *a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;

  swift_release(*a1);
  v4 = (char *)a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for FMNAccountType(0);
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t *sub_100033ACC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  void (*v9)(char *, char *, uint64_t);

  v4 = *a2;
  *a1 = *a2;
  v5 = *(int *)(a3 + 20);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = type metadata accessor for FMNAccountType(0);
  v9 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
  swift_retain(v4);
  v9(v6, v7, v8);
  return a1;
}

uint64_t *sub_100033B3C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;

  v6 = *a2;
  v7 = *a1;
  *a1 = *a2;
  swift_retain(v6);
  swift_release(v7);
  v8 = *(int *)(a3 + 20);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for FMNAccountType(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 24))(v9, v10, v11);
  return a1;
}

_QWORD *sub_100033BB0(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for FMNAccountType(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t *sub_100033C0C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;

  v6 = *a1;
  *a1 = *a2;
  swift_release(v6);
  v7 = *(int *)(a3 + 20);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for FMNAccountType(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t sub_100033C78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100033C84);
}

uint64_t sub_100033C84(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for FMNAccountType(0);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 20)], a2, v8);
  }
}

uint64_t sub_100033D00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100033D0C);
}

char *sub_100033D0C(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for FMNAccountType(0);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 20)], a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for AirPodsPairingLockCheckEndPoint(uint64_t a1)
{
  uint64_t result;

  result = qword_1010EBF28;
  if (!qword_1010EBF28)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AirPodsPairingLockCheckEndPoint);
  return result;
}

uint64_t sub_100033DBC(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = (char *)&value witness table for Builtin.NativeObject + 64;
  result = type metadata accessor for FMNAccountType(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

void sub_100033E34()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(_QWORD *, _QWORD);
  Swift::String v5;
  void *v6;
  id v7;
  unsigned int v8;
  NSString v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[4];

  v1 = *v0;
  v2 = sub_10001A9A8(&qword_1010EBF60);
  v3 = OS_dispatch_queue.sync<A>(execute:)(sub_10003403C, v1, v2);
  URLComponents.init()(v3);
  URLComponents.scheme.setter(0x7370747468, 0xE500000000000000);
  URLComponents.host.setter(v14[2], v14[3]);
  URLComponents.path.setter(v14[0], v14[1]);
  v4 = (void (*)(_QWORD *, _QWORD))URLComponents.path.modify(v14);
  v5._countAndFlagsBits = 0xD000000000000017;
  v5._object = (void *)0x8000000100EC61E0;
  String.append(_:)(v5);
  v4(v14, 0);
  if (qword_1010EA198 != -1)
    swift_once(&qword_1010EA198, sub_100ACDE4C);
  v6 = (void *)qword_1011B7C08;
  v7 = objc_msgSend((id)objc_opt_self(FMSystemInfo), "sharedInstance");
  v8 = objc_msgSend(v7, "isInternalBuild");

  if (v8)
  {
    v9 = String._bridgeToObjectiveC()();
    v10 = objc_msgSend(v6, "stringForKey:", v9);

    if (v10)
    {
      v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
      v13 = v12;

      URLComponents.host.setter(v11, v13);
    }
  }
}

uint64_t sub_100033FF8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 20);
  v5 = type metadata accessor for FMNAccountType(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t sub_10003403C@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  return sub_10015D9D0(v1, a1);
}

uint64_t sub_100034054(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100034060);
}

uint64_t sub_100034060(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for FMNAccountType(0);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 20)], a2, v8);
  }
}

uint64_t sub_1000340DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000340E8);
}

char *sub_1000340E8(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for FMNAccountType(0);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 20)], a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for AccessoryPairingLockCheckEndPoint(uint64_t a1)
{
  uint64_t result;

  result = qword_1010EBFC0;
  if (!qword_1010EBFC0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AccessoryPairingLockCheckEndPoint);
  return result;
}

void sub_100034198()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;
  unsigned int v6;
  NSString v7;
  id v8;

  v1 = *v0;
  v2 = sub_10001A9A8(&qword_1010EBF60);
  v3 = OS_dispatch_queue.sync<A>(execute:)(sub_10003403C, v1, v2);
  URLComponents.init()(v3);
  URLComponents.scheme.setter(0x7370747468, 0xE500000000000000);
  URLComponents.host.setter();
  URLComponents.path.setter();
  URLComponents.path.setter();
  if (qword_1010EA198 != -1)
    swift_once(&qword_1010EA198, sub_100ACDE4C);
  v4 = (void *)qword_1011B7C08;
  v5 = objc_msgSend((id)objc_opt_self(FMSystemInfo), "sharedInstance");
  v6 = objc_msgSend(v5, "isInternalBuild");

  if (v6)
  {
    v7 = String._bridgeToObjectiveC()();
    v8 = objc_msgSend(v4, "stringForKey:", v7);

    if (v8)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)(v8);

      URLComponents.host.setter();
    }
  }
}

uint64_t sub_100034340(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  _QWORD *v33;

  v31 = a1;
  v33 = &_swiftEmptyDictionarySingleton;
  v32 = a2;
  v7 = sub_100035530();
  v8 = DataProtocol.intValue.getter(&type metadata for Data, v7);
  if (qword_1010EA318 != -1)
    swift_once(&qword_1010EA318, sub_100B5E330);
  v9 = type metadata accessor for Logger(0);
  v10 = sub_10001A9E8(v9, (uint64_t)qword_1011B7DF8);
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.default.getter(v11);
  if (os_log_type_enabled(v11, v12))
  {
    v13 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v13 = 134349056;
    v31 = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32, v13 + 4, v13 + 12);
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Number of beacons: %{public}ld", v13, 0xCu);
    swift_slowDealloc(v13, -1, -1);
  }

  if (v8 < 2)
    return (uint64_t)v33;
  result = static MACAddress.length.getter(v14);
  if (__OFADD__(result, 20))
  {
    __break(1u);
    goto LABEL_23;
  }
  v16 = result + 21;
  if (__OFADD__(result + 20, 1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  result += 22;
  if (__OFADD__(v16, 1))
  {
LABEL_24:
    __break(1u);
    return result;
  }
  v17 = Data.chunked(into:)(result, a3, a4);
  v18 = v17;
  v19 = *(_QWORD *)(v17 + 16);
  if (v19)
  {
    swift_bridgeObjectRetain(v17);
    v20 = (unint64_t *)(v18 + 40);
    while (1)
    {
      v21 = *(v20 - 1);
      v22 = *v20;
      v31 = v21;
      v32 = v22;
      sub_10001BBBC(v21, v22);
      sub_100034698(&v31);
      if (v4)
        break;
      v20 += 2;
      sub_10001BC14(v21, v22);
      if (!--v19)
      {
        swift_bridgeObjectRelease();
        goto LABEL_14;
      }
    }
    sub_10001BC14(v21, v22);
    swift_bridgeObjectRelease_n(v18, 2);
  }
  else
  {
LABEL_14:
    swift_bridgeObjectRelease();
    result = (uint64_t)v33;
    if (v33[2] == v8)
      return result;
    v23 = Logger.logObject.getter(v33);
    v24 = static os_log_type_t.error.getter(v23);
    if (os_log_type_enabled(v23, v24))
    {
      v25 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v25 = 134349056;
      swift_beginAccess(&v33, &v31, 0, 0);
      v30 = v33[2];
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31, v25 + 4, v25 + 12);
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Unexpected number of serial numbers: %{public}ld", v25, 0xCu);
      swift_slowDealloc(v25, -1, -1);
    }

    v26 = type metadata accessor for BinaryEncodingError(0);
    v27 = sub_100006204((unint64_t *)&qword_1010EC000, (uint64_t (*)(uint64_t))&type metadata accessor for BinaryEncodingError, (uint64_t)&protocol conformance descriptor for BinaryEncodingError);
    swift_allocError(v26, v27, 0, 0);
    v29 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v26 - 8) + 104))(v28, enum case for BinaryEncodingError.encodingError(_:), v26);
    swift_willThrow(v29);
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_100034698(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35[2];
  uint64_t v36;
  uint64_t v37;

  v2 = sub_10001A9A8(&qword_1010EC008);
  __chkstk_darwin(v2);
  v3 = sub_10001A9A8((uint64_t *)&unk_1010F9890);
  __chkstk_darwin(v3);
  v4 = *a1;
  v5 = a1[1];
  v6 = Data.subdata(in:)(0, 20, *a1, v5);
  v8 = v7;
  v35[0] = v6;
  v35[1] = v7;
  v9 = sub_100035530();
  if ((DataProtocol.isNull.getter(&type metadata for Data, v9) & 1) == 0)
  {
    Data.trimmed.getter(v6, v8);
    v18 = ((uint64_t (*)(void))static MACAddress.length.getter)();
    v19 = v18 + 20;
    if (__OFADD__(v18, 20))
    {
      __break(1u);
    }
    else if (v19 >= 20)
    {
      v20 = Data.subdata(in:)(20, v19, v4, v5);
      v22 = v21;
      sub_10001BBBC(v20, v21);
      v23 = MACAddress.init(data:type:)(v20, v22, 0);
      v24 = static MACAddress.length.getter(v23);
      v25 = v24 + 20;
      if (!__OFADD__(v24, 20))
      {
        v26 = static MACAddress.length.getter(v24);
        if (!__OFADD__(v26, 20))
        {
          v27 = v26 + 21;
          if (!__OFADD__(v26 + 20, 1))
          {
            if (v27 >= v25)
            {
              v34 = Data.subdata(in:)(v25, v27, v4, v5);
              v28 = static MACAddress.length.getter(v34);
              if (!__OFADD__(v28, 20))
              {
                if (!__OFADD__(v28 + 20, 1))
                  __asm { BR              X10 }
LABEL_24:
                __break(1u);
                JUMPOUT(0x100034E38);
              }
LABEL_23:
              __break(1u);
              goto LABEL_24;
            }
LABEL_22:
            __break(1u);
            goto LABEL_23;
          }
LABEL_21:
          __break(1u);
          goto LABEL_22;
        }
LABEL_20:
        __break(1u);
        goto LABEL_21;
      }
LABEL_19:
      __break(1u);
      goto LABEL_20;
    }
    __break(1u);
    goto LABEL_19;
  }
  if (qword_1010EA318 != -1)
    swift_once(&qword_1010EA318, sub_100B5E330);
  v10 = type metadata accessor for Logger(0);
  sub_10001A9E8(v10, (uint64_t)qword_1011B7DF8);
  sub_10001BBBC(v6, v8);
  v11 = sub_10001BBBC(v6, v8);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.error.getter(v12);
  if (os_log_type_enabled(v12, v13))
  {
    v14 = swift_slowAlloc(22, -1);
    v15 = swift_slowAlloc(32, -1);
    v35[0] = v15;
    *(_DWORD *)v14 = 141558275;
    v36 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, &v37, v14 + 4, v14 + 12);
    *(_WORD *)(v14 + 12) = 2081;
    v16 = Data.hexString.getter(v6, v8);
    v36 = sub_100016940(v16, v17, v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, &v37, v14 + 14, v14 + 22);
    swift_bridgeObjectRelease();
    sub_10001BC14(v6, v8);
    sub_10001BC14(v6, v8);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "Invalid serial number %{private,mask.hash}s", (uint8_t *)v14, 0x16u);
    swift_arrayDestroy(v15, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v15, -1, -1);
    swift_slowDealloc(v14, -1, -1);
  }
  else
  {
    sub_10001BC14(v6, v8);
    sub_10001BC14(v6, v8);
  }

  v29 = type metadata accessor for BinaryDecodingError(0);
  v30 = sub_100006204((unint64_t *)&qword_1010EC010, (uint64_t (*)(uint64_t))&type metadata accessor for BinaryDecodingError, (uint64_t)&protocol conformance descriptor for BinaryDecodingError);
  swift_allocError(v29, v30, 0, 0);
  v32 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v29 - 8) + 104))(v31, enum case for BinaryDecodingError.decodingError(_:), v29);
  swift_willThrow(v32);
  return sub_10001BC14(v6, v8);
}

uint64_t sub_100034EFC(uint64_t a1, unint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  char *v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  int64_t v31;
  uint64_t v32;
  unint64_t v33;
  int64_t v34;
  unint64_t v35;
  int64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v59;
  unint64_t v60;
  uint64_t v61;
  _BOOL8 v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  BOOL v70;
  uint64_t v71;
  uint64_t result;
  uint64_t v73;
  uint64_t v74;
  int64_t v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t *v78;
  uint64_t *v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int64_t v86;
  _QWORD *v87;

  v8 = sub_10001A9A8((uint64_t *)&unk_1010F9890);
  v81 = *(_QWORD *)(v8 - 8);
  v9 = __chkstk_darwin(v8);
  v83 = (uint64_t)&v73 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v82 = (uint64_t)&v73 - v11;
  v12 = sub_10001A9A8(&qword_1010EBFF8);
  v13 = __chkstk_darwin(v12);
  v15 = (uint64_t *)((char *)&v73 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v16 = __chkstk_darwin(v13);
  v18 = (uint64_t *)((char *)&v73 - v17);
  v19 = __chkstk_darwin(v16);
  v21 = (uint64_t *)((char *)&v73 - v20);
  __chkstk_darwin(v19);
  v23 = (char *)&v73 - v22;
  v24 = v86;
  v25 = sub_100034340(a1, a2, a3, (uint64_t)a4);
  if (v24)
    return (uint64_t)a4;
  v26 = v25;
  v79 = (uint64_t *)v23;
  v80 = v15;
  v27 = *(_QWORD *)(v25 + 64);
  v73 = 0;
  v74 = v25 + 64;
  v28 = 1 << *(_BYTE *)(v25 + 32);
  v29 = -1;
  if (v28 < 64)
    v29 = ~(-1 << v28);
  v30 = v29 & v27;
  v75 = (unint64_t)(v28 + 63) >> 6;
  swift_bridgeObjectRetain(v25);
  v31 = 0;
  a4 = _swiftEmptyDictionarySingleton;
  v77 = v21;
  v78 = v18;
  v76 = v32;
  while (1)
  {
    if (v30)
    {
      v85 = (v30 - 1) & v30;
      v86 = v31;
      v33 = __clz(__rbit64(v30)) | (v31 << 6);
    }
    else
    {
      v34 = v31 + 1;
      if (__OFADD__(v31, 1))
        goto LABEL_38;
      if (v34 >= v75)
      {
LABEL_34:
        swift_release();
        swift_bridgeObjectRelease();
        return (uint64_t)a4;
      }
      v35 = *(_QWORD *)(v74 + 8 * v34);
      v36 = v31 + 1;
      if (!v35)
      {
        v36 = v31 + 2;
        if (v31 + 2 >= v75)
          goto LABEL_34;
        v35 = *(_QWORD *)(v74 + 8 * v36);
        if (!v35)
        {
          v36 = v31 + 3;
          if (v31 + 3 >= v75)
            goto LABEL_34;
          v35 = *(_QWORD *)(v74 + 8 * v36);
          if (!v35)
          {
            v36 = v31 + 4;
            if (v31 + 4 >= v75)
              goto LABEL_34;
            v35 = *(_QWORD *)(v74 + 8 * v36);
            if (!v35)
            {
              v37 = v31 + 5;
              if (v31 + 5 >= v75)
                goto LABEL_34;
              v35 = *(_QWORD *)(v74 + 8 * v37);
              if (!v35)
              {
                while (1)
                {
                  v36 = v37 + 1;
                  if (__OFADD__(v37, 1))
                    goto LABEL_39;
                  if (v36 >= v75)
                    goto LABEL_34;
                  v35 = *(_QWORD *)(v74 + 8 * v36);
                  ++v37;
                  if (v35)
                    goto LABEL_24;
                }
              }
              v36 = v31 + 5;
            }
          }
        }
      }
LABEL_24:
      v85 = (v35 - 1) & v35;
      v86 = v36;
      v33 = __clz(__rbit64(v35)) + (v36 << 6);
    }
    v38 = *(_QWORD *)(v26 + 56);
    v39 = (uint64_t *)(*(_QWORD *)(v26 + 48) + 16 * v33);
    v40 = *v39;
    v41 = v39[1];
    v42 = type metadata accessor for MultipartAccessoryPairingInfo(0);
    v43 = v38 + *(_QWORD *)(*(_QWORD *)(v42 - 8) + 72) * v33;
    v44 = v79;
    sub_100035420(v43, (uint64_t)v79 + *(int *)(v12 + 48));
    *v44 = v40;
    v44[1] = v41;
    sub_100005CF0((uint64_t)v44, (uint64_t)v21, &qword_1010EBFF8);
    v45 = *(int *)(v12 + 48);
    v46 = (uint64_t)v18 + v45;
    v47 = v12;
    v48 = (uint64_t)v21 + v45;
    v49 = v21;
    v50 = *v21;
    v51 = v49[1];
    *v18 = v50;
    v18[1] = v51;
    v84 = v46;
    sub_100035420(v48, v46);
    v52 = v47;
    v53 = *(int *)(v47 + 48);
    v54 = v80;
    v55 = (uint64_t)v80 + v53;
    *v80 = v50;
    v54[1] = v51;
    sub_100035420(v48, (uint64_t)v54 + v53);
    v56 = v82;
    sub_100035464(v55 + *(int *)(v42 + 24), v82);
    sub_10001BBBC(v40, v41);
    sub_10001BBBC(v50, v51);
    sub_1000354AC(v55);
    v57 = v83;
    sub_100005CF0(v56, v83, (uint64_t *)&unk_1010F9890);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(a4);
    v87 = a4;
    v60 = sub_100518E4C(v50, v51);
    v61 = a4[2];
    v62 = (v59 & 1) == 0;
    v63 = v61 + v62;
    if (__OFADD__(v61, v62))
      break;
    v64 = v59;
    if (a4[3] >= v63)
    {
      v12 = v52;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        sub_100A99964();
    }
    else
    {
      sub_100A84718(v63, isUniquelyReferenced_nonNull_native);
      v65 = sub_100518E4C(v50, v51);
      if ((v64 & 1) != (v66 & 1))
        goto LABEL_40;
      v60 = v65;
      v12 = v52;
    }
    v67 = v81;
    v18 = v78;
    a4 = v87;
    if ((v64 & 1) != 0)
    {
      sub_1000354E8(v57, v87[7] + *(_QWORD *)(v81 + 72) * v60);
    }
    else
    {
      v87[(v60 >> 6) + 8] |= 1 << v60;
      v68 = (uint64_t *)(a4[6] + 16 * v60);
      *v68 = v50;
      v68[1] = v51;
      sub_100005CF0(v57, a4[7] + *(_QWORD *)(v67 + 72) * v60, (uint64_t *)&unk_1010F9890);
      v69 = a4[2];
      v70 = __OFADD__(v69, 1);
      v71 = v69 + 1;
      if (v70)
        goto LABEL_37;
      a4[2] = v71;
      sub_10001BBBC(v50, v51);
    }
    swift_bridgeObjectRelease();
    sub_10001BC14(v50, v51);
    sub_1000354AC(v84);
    v21 = v77;
    sub_100004048((uint64_t)v77, &qword_1010EBFF8);
    v26 = v76;
    v30 = v85;
    v31 = v86;
  }
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for OwnedBeaconGroup.SerialNumber);
  __break(1u);
  return result;
}

uint64_t sub_100035420(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MultipartAccessoryPairingInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100035464(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001A9A8((uint64_t *)&unk_1010F9890);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000354AC(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for MultipartAccessoryPairingInfo(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000354E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001A9A8((uint64_t *)&unk_1010F9890);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

unint64_t sub_100035530()
{
  unint64_t result;

  result = qword_1010EE1C0;
  if (!qword_1010EE1C0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store(result, (unint64_t *)&qword_1010EE1C0);
  }
  return result;
}

uint64_t sub_100035574()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v6;

  v0 = type metadata accessor for URL(0);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = __chkstk_darwin(v0);
  v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000234D8(v2, qword_1011B6680);
  sub_10001A9E8(v0, (uint64_t)qword_1011B6680);
  type metadata accessor for BeaconStore(0);
  sub_1007EC9B8((uint64_t)v4);
  URL.appendingPathComponent(_:isDirectory:)(0xD000000000000013, 0x8000000100EC62E0, 1);
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v4, v0);
}

uint64_t sub_100035644(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  unint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  Swift::UInt64 v15;
  Swift::UInt64 v16;
  uint64_t *v17;
  uint64_t v18;
  unint64_t v19;

  v2 = v1;
  v4 = *v1;
  v5 = v2[1];
  sub_10001BBBC(v4, v5);
  Data.hash(into:)(a1, v4, v5);
  sub_10001BC14(v4, v5);
  v6 = (int *)type metadata accessor for LostModeInfoRecord(0);
  v7 = type metadata accessor for UUID(0);
  v8 = sub_100006204(&qword_1010F98B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(a1, v7, v8);
  dispatch thunk of Hashable.hash(into:)(a1, v7, v8);
  v9 = (uint64_t *)((char *)v2 + v6[7]);
  v10 = v9[1];
  if (v10)
  {
    v11 = *v9;
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain(v10);
    String.hash(into:)(a1, v11, v10);
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  v12 = (uint64_t *)((char *)v2 + v6[8]);
  v13 = v12[1];
  if (v13)
  {
    v14 = *v12;
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain(v13);
    String.hash(into:)(a1, v14, v13);
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  if ((*(uint64_t *)((char *)v2 + v6[9]) & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v15 = *(uint64_t *)((char *)v2 + v6[9]);
  else
    v15 = 0;
  Hasher._combine(_:)(v15);
  if ((*(uint64_t *)((char *)v2 + v6[10]) & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v16 = *(uint64_t *)((char *)v2 + v6[10]);
  else
    v16 = 0;
  Hasher._combine(_:)(v16);
  v17 = (uint64_t *)((char *)v2 + v6[11]);
  v18 = *v17;
  v19 = v17[1];
  sub_10001BBBC(*v17, v19);
  Data.hash(into:)(a1, v18, v19);
  return sub_10001BC14(v18, v19);
}

uint64_t sub_100035808(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_100035840 + 4 * byte_100E224E0[a1]))(0xD000000000000010, 0x8000000100EC2FE0);
}

uint64_t sub_100035840()
{
  return 0x696669746E656469;
}

uint64_t sub_100035870()
{
  return 0x6D754E656E6F6870;
}

uint64_t sub_100035890()
{
  return 0x6567617373656DLL;
}

uint64_t sub_1000358A8()
{
  return 0x656475746974616CLL;
}

uint64_t sub_1000358C0()
{
  return 0x64757469676E6F6CLL;
}

uint64_t sub_1000358DC()
{
  return 0x7369747265766461;
}

uint64_t sub_100035900()
{
  unsigned __int8 *v0;

  return sub_100035808(*v0);
}

uint64_t sub_100035908@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1000375B8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10003592C()
{
  return 0;
}

void sub_100035938(_BYTE *a1@<X8>)
{
  *a1 = 8;
}

uint64_t sub_100035944(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100036950();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10003596C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100036950();
  return CodingKey.debugDescription.getter(a1, v2);
}

Swift::Int sub_100035994()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  sub_100035644((uint64_t)v1);
  return Hasher._finalize()();
}

Swift::Int sub_1000359D4()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  sub_100035644((uint64_t)v1);
  return Hasher._finalize()();
}

uint64_t sub_100035A10(id *a1)
{
  uint64_t v1;
  uint64_t v2;
  id v3;
  uint64_t ObjectType;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  char v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  double v23;
  double v24;
  __int128 v25;
  uint64_t *v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  char v30;
  __int128 v32;
  __int128 v33;
  void *v34;

  v2 = v1;
  v3 = objc_msgSend(*a1, "encryptedValues");
  ObjectType = swift_getObjectType(v3);
  CKRecordKeyValueSetting.subscript.getter(&v32, 0xD000000000000010, 0x8000000100EC28D0, ObjectType, &type metadata for String);
  v5 = *((_QWORD *)&v32 + 1);
  v6 = v32;
  v7 = (int *)type metadata accessor for LostModeInfoRecord(0);
  v8 = UUID.uuidString.getter(v7);
  if (!v5)
  {
    v12 = swift_bridgeObjectRelease();
    goto LABEL_9;
  }
  if (v6 == v8 && v5 == v9)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_11;
  }
  v11 = _stringCompareWithSmolCheck(_:_:expecting:)(v6, v5, v8, v9, 0);
  swift_bridgeObjectRelease();
  v12 = swift_bridgeObjectRelease();
  if ((v11 & 1) == 0)
  {
LABEL_9:
    v13 = UUID.uuidString.getter(v12);
    *((_QWORD *)&v33 + 1) = &type metadata for String;
    v34 = &protocol witness table for String;
    *(_QWORD *)&v32 = v13;
    *((_QWORD *)&v32 + 1) = v14;
    CKRecordKeyValueSetting.subscript.setter(&v32, 0xD000000000000010, 0x8000000100EC28D0, ObjectType);
  }
LABEL_11:
  CKRecordKeyValueSetting.subscript.getter(&v32, 0x6D754E656E6F6870, 0xEB00000000726562, ObjectType, &type metadata for String);
  v15 = (unint64_t *)(v1 + v7[7]);
  v17 = *v15;
  v16 = v15[1];
  if (*((_QWORD *)&v32 + 1))
  {
    if (!v16)
    {
      swift_bridgeObjectRelease();
      v34 = 0;
      v32 = 0u;
      v33 = 0u;
LABEL_20:
      swift_bridgeObjectRetain(v16);
      CKRecordKeyValueSetting.subscript.setter(&v32, 0x6D754E656E6F6870, 0xEB00000000726562, ObjectType);
      goto LABEL_21;
    }
    if (v32 == __PAIR128__(v16, v17))
    {
      swift_bridgeObjectRelease();
      goto LABEL_21;
    }
    v18 = _stringCompareWithSmolCheck(_:_:expecting:)(v32, *((_QWORD *)&v32 + 1), *v15, v15[1], 0);
    swift_bridgeObjectRelease();
    if ((v18 & 1) == 0)
    {
LABEL_19:
      *((_QWORD *)&v33 + 1) = &type metadata for String;
      v34 = &protocol witness table for String;
      *(_QWORD *)&v32 = v17;
      *((_QWORD *)&v32 + 1) = v16;
      goto LABEL_20;
    }
  }
  else if (v16)
  {
    goto LABEL_19;
  }
LABEL_21:
  CKRecordKeyValueSetting.subscript.getter(&v32, 0x6567617373656DLL, 0xE700000000000000, ObjectType, &type metadata for String);
  v19 = (unint64_t *)(v2 + v7[8]);
  v21 = *v19;
  v20 = v19[1];
  if (!*((_QWORD *)&v32 + 1))
  {
    if (!v20)
      goto LABEL_31;
LABEL_29:
    *((_QWORD *)&v33 + 1) = &type metadata for String;
    v34 = &protocol witness table for String;
    *(_QWORD *)&v32 = v21;
    *((_QWORD *)&v32 + 1) = v20;
    goto LABEL_30;
  }
  if (!v20)
  {
    swift_bridgeObjectRelease();
    v34 = 0;
    v32 = 0u;
    v33 = 0u;
LABEL_30:
    swift_bridgeObjectRetain(v20);
    CKRecordKeyValueSetting.subscript.setter(&v32, 0x6567617373656DLL, 0xE700000000000000, ObjectType);
    goto LABEL_31;
  }
  if (v32 != __PAIR128__(v20, v21))
  {
    v22 = _stringCompareWithSmolCheck(_:_:expecting:)(v32, *((_QWORD *)&v32 + 1), *v19, v19[1], 0);
    swift_bridgeObjectRelease();
    if ((v22 & 1) != 0)
      goto LABEL_31;
    goto LABEL_29;
  }
  swift_bridgeObjectRelease();
LABEL_31:
  CKRecordKeyValueSetting.subscript.getter(&v32, 0x656475746974616CLL, 0xE800000000000000, ObjectType, &type metadata for Double);
  v23 = *(double *)(v2 + v7[9]);
  if ((BYTE8(v32) & 1) != 0 || *(double *)&v32 != v23)
  {
    *((_QWORD *)&v33 + 1) = &type metadata for Double;
    v34 = &protocol witness table for Double;
    *(double *)&v32 = v23;
    CKRecordKeyValueSetting.subscript.setter(&v32, 0x656475746974616CLL, 0xE800000000000000, ObjectType);
  }
  CKRecordKeyValueSetting.subscript.getter(&v32, 0x64757469676E6F6CLL, 0xE900000000000065, ObjectType, &type metadata for Double);
  v24 = *(double *)(v2 + v7[10]);
  if ((BYTE8(v32) & 1) != 0 || *(double *)&v32 != v24)
  {
    *((_QWORD *)&v33 + 1) = &type metadata for Double;
    v34 = &protocol witness table for Double;
    *(double *)&v32 = v24;
    CKRecordKeyValueSetting.subscript.setter(&v32, 0x64757469676E6F6CLL, 0xE900000000000065, ObjectType);
  }
  CKRecordKeyValueSetting.subscript.getter(&v32, 0x7369747265766461, 0xED0000746E656D65, ObjectType, &type metadata for Data);
  v25 = v32;
  v26 = (uint64_t *)(v2 + v7[11]);
  v27 = *v26;
  v28 = v26[1];
  sub_10001BBBC(*v26, v28);
  if (*((_QWORD *)&v25 + 1) >> 60 == 15)
  {
    sub_10001EF3C(v25, *((unint64_t *)&v25 + 1));
    sub_10001EF3C(v27, v28);
LABEL_40:
    *((_QWORD *)&v33 + 1) = &type metadata for Data;
    v34 = &protocol witness table for Data;
    *(_QWORD *)&v32 = v27;
    *((_QWORD *)&v32 + 1) = v28;
    sub_10001BBBC(v27, v28);
    CKRecordKeyValueSetting.subscript.setter(&v32, 0x7369747265766461, 0xED0000746E656D65, ObjectType);
    return swift_unknownObjectRelease(v3);
  }
  sub_10001BD08(v25, *((unint64_t *)&v25 + 1));
  _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v25, *((uint64_t *)&v25 + 1));
  v30 = v29;
  sub_10001BC14(v27, v28);
  sub_10001EF3C(v25, *((unint64_t *)&v25 + 1));
  sub_10001EF3C(v25, *((unint64_t *)&v25 + 1));
  if ((v30 & 1) == 0)
    goto LABEL_40;
  return swift_unknownObjectRelease(v3);
}

uint64_t sub_100035F58(_QWORD *a1)
{
  _OWORD *v1;
  uint64_t v2;
  _OWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _OWORD *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  double v25;
  uint64_t v27;
  int *v28;
  __int128 v29;
  char v30;

  v3 = v1;
  v5 = sub_10001A9A8(&qword_1010EC038);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  v11 = sub_100036950();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for LostModeInfoRecord.CodingKeys, &type metadata for LostModeInfoRecord.CodingKeys, v11, v9, v10);
  v29 = *v3;
  v30 = 0;
  v12 = sub_100036A58();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v29, &v30, v5, &type metadata for Data, v12);
  if (!v2)
  {
    v28 = (int *)type metadata accessor for LostModeInfoRecord(0);
    v13 = v3;
    v14 = (char *)v3 + v28[5];
    LOBYTE(v29) = 1;
    v15 = type metadata accessor for UUID(0);
    v16 = sub_100006204(&qword_1010EDAC0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v14, &v29, v5, v15, v16);
    v17 = (char *)v13 + v28[6];
    LOBYTE(v29) = 2;
    KeyedEncodingContainer.encode<A>(_:forKey:)(v17, &v29, v5, v15, v16);
    v18 = (uint64_t *)((char *)v13 + v28[7]);
    v19 = *v18;
    v20 = v18[1];
    LOBYTE(v29) = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v19, v20, &v29, v5);
    v21 = (uint64_t *)((char *)v13 + v28[8]);
    v22 = *v21;
    v23 = v21[1];
    LOBYTE(v29) = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v22, v23, &v29, v5);
    v24 = *(double *)((char *)v13 + v28[9]);
    LOBYTE(v29) = 5;
    KeyedEncodingContainer.encode(_:forKey:)(&v29, v5, v24);
    v25 = *(double *)((char *)v13 + v28[10]);
    LOBYTE(v29) = 6;
    KeyedEncodingContainer.encode(_:forKey:)(&v29, v5, v25);
    v29 = *(_OWORD *)((char *)v13 + v28[11]);
    v30 = 7;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v29, &v30, v5, &type metadata for Data, v12);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100036220@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int *v22;
  uint64_t v23;
  void (*v24)(char *, _QWORD *, uint64_t);
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  char v49;

  v42 = a2;
  v46 = type metadata accessor for UUID(0);
  v44 = *(_QWORD *)(v46 - 8);
  v4 = __chkstk_darwin(v46);
  v6 = (uint64_t *)((char *)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v4);
  v8 = (uint64_t *)((char *)&v38 - v7);
  v43 = sub_10001A9A8(&qword_1010EC028);
  v9 = *(_QWORD *)(v43 - 8);
  __chkstk_darwin(v43);
  v11 = (char *)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = type metadata accessor for LostModeInfoRecord(0);
  __chkstk_darwin(v47);
  v13 = (char *)&v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1[3];
  v15 = a1[4];
  v45 = a1;
  sub_10001AA44(a1, v14);
  v16 = sub_100036950();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for LostModeInfoRecord.CodingKeys, &type metadata for LostModeInfoRecord.CodingKeys, v16, v14, v15);
  if (v2)
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v45);
  v41 = v6;
  v17 = v9;
  v49 = 0;
  v18 = sub_100036994();
  v19 = v43;
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v48, &type metadata for Data, &v49, v43, &type metadata for Data, v18);
  *(_OWORD *)v13 = v48;
  LOBYTE(v48) = 1;
  v20 = sub_100006204((unint64_t *)&qword_1010EDA90, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v21 = v46;
  v40 = v20;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v8, v46, &v48, v19, v46, v20);
  v39 = v18;
  v22 = (int *)v47;
  v23 = v19;
  v24 = *(void (**)(char *, _QWORD *, uint64_t))(v44 + 32);
  v24(&v13[*(int *)(v47 + 20)], v8, v21);
  LOBYTE(v48) = 2;
  v25 = v41;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v41, v21, &v48, v23, v21, v40);
  v24(&v13[v22[6]], v25, v21);
  LOBYTE(v48) = 3;
  v26 = v43;
  v27 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v48, v43);
  v28 = v45;
  v29 = (uint64_t *)&v13[v22[7]];
  *v29 = v27;
  v29[1] = v30;
  LOBYTE(v48) = 4;
  v31 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v48, v26);
  v32 = (uint64_t *)&v13[v22[8]];
  *v32 = v31;
  v32[1] = v33;
  LOBYTE(v48) = 5;
  KeyedDecodingContainer.decode(_:forKey:)(&v48, v43);
  *(_QWORD *)&v13[v22[9]] = v34;
  LOBYTE(v48) = 6;
  KeyedDecodingContainer.decode(_:forKey:)(&v48, v43);
  *(_QWORD *)&v13[v22[10]] = v35;
  v49 = 7;
  v36 = v43;
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v48, &type metadata for Data, &v49, v43, &type metadata for Data, v39);
  (*(void (**)(char *, uint64_t))(v17 + 8))(v11, v36);
  *(_OWORD *)&v13[*(int *)(v47 + 44)] = v48;
  sub_1000369D8((uint64_t)v13, v42);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v28);
  return sub_100036A1C((uint64_t)v13);
}

uint64_t DeviceIdentitySignature.signature.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)v0;
  sub_10001BBBC(*(_QWORD *)v0, *(_QWORD *)(v0 + 8));
  return v1;
}

uint64_t sub_100036788@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 20);
  v5 = type metadata accessor for UUID(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t sub_1000367C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if (qword_1010E98E0 != -1)
    swift_once(&qword_1010E98E0, sub_100035574);
  v0 = type metadata accessor for URL(0);
  v1 = sub_10001A9E8(v0, (uint64_t)qword_1011B6680);
  v2 = UUID.uuidString.getter(v1);
  URL.appendingPathComponent(_:isDirectory:)(v2, v3, 1);
  return swift_bridgeObjectRelease();
}

uint64_t sub_100036854@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100036220(a1, a2);
}

uint64_t sub_100036868(_QWORD *a1)
{
  return sub_100035F58(a1);
}

uint64_t sub_10003687C(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_100006204(&qword_101111B50, type metadata accessor for LostModeInfoRecord, (uint64_t)&unk_100E2251C);
  result = sub_100006204(&qword_1010EC018, type metadata accessor for LostModeInfoRecord, (uint64_t)&unk_100E224F4);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t type metadata accessor for LostModeInfoRecord(uint64_t a1)
{
  uint64_t result;

  result = qword_1010EC098;
  if (!qword_1010EC098)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for LostModeInfoRecord);
  return result;
}

uint64_t sub_100036914(uint64_t a1)
{
  uint64_t result;

  result = sub_100006204(&qword_1010EC020, type metadata accessor for LostModeInfoRecord, (uint64_t)&unk_100E22544);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100036950()
{
  unint64_t result;

  result = qword_1010EC030;
  if (!qword_1010EC030)
  {
    result = swift_getWitnessTable(&unk_100E226F8, &type metadata for LostModeInfoRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010EC030);
  }
  return result;
}

unint64_t sub_100036994()
{
  unint64_t result;

  result = qword_1010ED6C0;
  if (!qword_1010ED6C0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store(result, (unint64_t *)&qword_1010ED6C0);
  }
  return result;
}

uint64_t sub_1000369D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for LostModeInfoRecord(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100036A1C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for LostModeInfoRecord(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_100036A58()
{
  unint64_t result;

  result = qword_1010ED6E0;
  if (!qword_1010ED6E0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store(result, (unint64_t *)&qword_1010ED6E0);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for LostModeInfoRecord.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF9)
    goto LABEL_17;
  if (a2 + 7 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 7) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 7;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 7;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 7;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 8;
  v8 = v6 - 8;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for LostModeInfoRecord.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_100036B78 + 4 * byte_100E224ED[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_100036BAC + 4 * byte_100E224E8[v4]))();
}

uint64_t sub_100036BAC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100036BB4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100036BBCLL);
  return result;
}

uint64_t sub_100036BC8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100036BD0);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_100036BD4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100036BDC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for LostModeInfoRecord.CodingKeys()
{
  return &type metadata for LostModeInfoRecord.CodingKeys;
}

uint64_t *sub_100036BF8(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v28 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v28 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = *a2;
    v8 = a2[1];
    sub_10001BBBC(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    v9 = a3[5];
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for UUID(0);
    v13 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
    v13(v10, v11, v12);
    v13((char *)a1 + a3[6], (char *)a2 + a3[6], v12);
    v14 = a3[7];
    v15 = a3[8];
    v16 = (uint64_t *)((char *)a1 + v14);
    v17 = (uint64_t *)((char *)a2 + v14);
    v18 = v17[1];
    *v16 = *v17;
    v16[1] = v18;
    v19 = (uint64_t *)((char *)a1 + v15);
    v20 = (uint64_t *)((char *)a2 + v15);
    v21 = v20[1];
    *v19 = *v20;
    v19[1] = v21;
    v22 = a3[10];
    *(uint64_t *)((char *)a1 + a3[9]) = *(uint64_t *)((char *)a2 + a3[9]);
    *(uint64_t *)((char *)a1 + v22) = *(uint64_t *)((char *)a2 + v22);
    v23 = a3[11];
    v24 = (uint64_t *)((char *)a1 + v23);
    v25 = (uint64_t *)((char *)a2 + v23);
    v26 = *v25;
    v27 = v25[1];
    swift_bridgeObjectRetain(v18);
    swift_bridgeObjectRetain(v21);
    sub_10001BBBC(v26, v27);
    *v24 = v26;
    v24[1] = v27;
  }
  return a1;
}

uint64_t sub_100036D20(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);

  sub_10001BC14(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  v4 = a1 + a2[5];
  v5 = type metadata accessor for UUID(0);
  v6 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v6(v4, v5);
  v6(a1 + a2[6], v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return sub_10001BC14(*(_QWORD *)(a1 + a2[11]), *(_QWORD *)(a1 + a2[11] + 8));
}

uint64_t *sub_100036DC0(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  unint64_t v26;

  v6 = *a2;
  v7 = a2[1];
  sub_10001BBBC(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  v8 = a3[5];
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for UUID(0);
  v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
  v12(v9, v10, v11);
  v12((char *)a1 + a3[6], (char *)a2 + a3[6], v11);
  v13 = a3[7];
  v14 = a3[8];
  v15 = (uint64_t *)((char *)a1 + v13);
  v16 = (uint64_t *)((char *)a2 + v13);
  v17 = v16[1];
  *v15 = *v16;
  v15[1] = v17;
  v18 = (uint64_t *)((char *)a1 + v14);
  v19 = (uint64_t *)((char *)a2 + v14);
  v20 = v19[1];
  *v18 = *v19;
  v18[1] = v20;
  v21 = a3[10];
  *(uint64_t *)((char *)a1 + a3[9]) = *(uint64_t *)((char *)a2 + a3[9]);
  *(uint64_t *)((char *)a1 + v21) = *(uint64_t *)((char *)a2 + v21);
  v22 = a3[11];
  v23 = (uint64_t *)((char *)a1 + v22);
  v24 = (uint64_t *)((char *)a2 + v22);
  v25 = *v24;
  v26 = v24[1];
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRetain(v20);
  sub_10001BBBC(v25, v26);
  *v23 = v25;
  v23[1] = v26;
  return a1;
}

uint64_t *sub_100036EBC(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  void (*v14)(char *, char *, uint64_t);
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;

  v6 = *a2;
  v7 = a2[1];
  sub_10001BBBC(*a2, v7);
  v8 = *a1;
  v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  sub_10001BC14(v8, v9);
  v10 = a3[5];
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for UUID(0);
  v14 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 24);
  v14(v11, v12, v13);
  v14((char *)a1 + a3[6], (char *)a2 + a3[6], v13);
  v15 = a3[7];
  v16 = (uint64_t *)((char *)a1 + v15);
  v17 = (uint64_t *)((char *)a2 + v15);
  *v16 = *v17;
  v18 = v17[1];
  v16[1] = v18;
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRelease();
  v19 = a3[8];
  v20 = (uint64_t *)((char *)a1 + v19);
  v21 = (uint64_t *)((char *)a2 + v19);
  *v20 = *v21;
  v22 = v21[1];
  v20[1] = v22;
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRelease();
  *(uint64_t *)((char *)a1 + a3[9]) = *(uint64_t *)((char *)a2 + a3[9]);
  *(uint64_t *)((char *)a1 + a3[10]) = *(uint64_t *)((char *)a2 + a3[10]);
  v23 = a3[11];
  v24 = (uint64_t *)((char *)a1 + v23);
  v25 = (uint64_t *)((char *)a2 + v23);
  v26 = *v25;
  v27 = v25[1];
  sub_10001BBBC(*v25, v27);
  v28 = *v24;
  v29 = v24[1];
  *v24 = v26;
  v24[1] = v27;
  sub_10001BC14(v28, v29);
  return a1;
}

char *sub_100036FF4(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  uint64_t v12;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for UUID(0);
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v10(&a1[a3[6]], &a2[a3[6]], v9);
  v11 = a3[8];
  *(_OWORD *)&a1[a3[7]] = *(_OWORD *)&a2[a3[7]];
  *(_OWORD *)&a1[v11] = *(_OWORD *)&a2[v11];
  v12 = a3[10];
  *(_QWORD *)&a1[a3[9]] = *(_QWORD *)&a2[a3[9]];
  *(_QWORD *)&a1[v12] = *(_QWORD *)&a2[v12];
  *(_OWORD *)&a1[a3[11]] = *(_OWORD *)&a2[a3[11]];
  return a1;
}

uint64_t *sub_1000370B4(uint64_t *a1, char *a2, int *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;

  v6 = *a1;
  v7 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_10001BC14(v6, v7);
  v8 = a3[5];
  v9 = (char *)a1 + v8;
  v10 = &a2[v8];
  v11 = type metadata accessor for UUID(0);
  v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 40);
  v12(v9, v10, v11);
  v12((char *)a1 + a3[6], &a2[a3[6]], v11);
  v13 = a3[7];
  v14 = (uint64_t *)((char *)a1 + v13);
  v15 = (uint64_t *)&a2[v13];
  v17 = *v15;
  v16 = v15[1];
  *v14 = v17;
  v14[1] = v16;
  swift_bridgeObjectRelease();
  v18 = a3[8];
  v19 = (uint64_t *)((char *)a1 + v18);
  v20 = (uint64_t *)&a2[v18];
  v22 = *v20;
  v21 = v20[1];
  *v19 = v22;
  v19[1] = v21;
  swift_bridgeObjectRelease();
  v23 = a3[10];
  *(uint64_t *)((char *)a1 + a3[9]) = *(_QWORD *)&a2[a3[9]];
  *(uint64_t *)((char *)a1 + v23) = *(_QWORD *)&a2[v23];
  v24 = a3[11];
  v25 = *(uint64_t *)((char *)a1 + v24);
  v26 = *(uint64_t *)((char *)a1 + v24 + 8);
  *(_OWORD *)((char *)a1 + v24) = *(_OWORD *)&a2[v24];
  sub_10001BC14(v25, v26);
  return a1;
}

uint64_t sub_1000371B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000371BC);
}

uint64_t sub_1000371BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  int v10;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + *(int *)(a3 + 20), a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 28) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  v10 = v9 - 1;
  if (v10 < 0)
    v10 = -1;
  return (v10 + 1);
}

uint64_t sub_10003724C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100037258);
}

uint64_t sub_100037258(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + *(int *)(a4 + 20), a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 28) + 8) = a2;
  return result;
}

uint64_t sub_1000372D8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  char *v9;
  char *v10;
  void *v11;

  v4 = &unk_100E225A8;
  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v5 = *(_QWORD *)(result - 8) + 64;
    v6 = v5;
    v7 = &unk_100E225C0;
    v8 = &unk_100E225C0;
    v9 = (char *)&value witness table for Builtin.Int64 + 64;
    v10 = (char *)&value witness table for Builtin.Int64 + 64;
    v11 = &unk_100E225A8;
    swift_initStructMetadata(a1, 256, 8, &v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_10003736C()
{
  return sub_100006204(&qword_1010EC0E8, type metadata accessor for LostModeInfoRecord, (uint64_t)&unk_100E225D8);
}

unint64_t sub_10003739C()
{
  unint64_t result;

  result = qword_1010EC0F0;
  if (!qword_1010EC0F0)
  {
    result = swift_getWitnessTable(&unk_100E226D0, &type metadata for LostModeInfoRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010EC0F0);
  }
  return result;
}

unint64_t sub_1000373E4()
{
  unint64_t result;

  result = qword_1010EC0F8;
  if (!qword_1010EC0F8)
  {
    result = swift_getWitnessTable(&unk_100E22640, &type metadata for LostModeInfoRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010EC0F8);
  }
  return result;
}

unint64_t sub_10003742C()
{
  unint64_t result;

  result = qword_1010EC100;
  if (!qword_1010EC100)
  {
    result = swift_getWitnessTable(&unk_100E22668, &type metadata for LostModeInfoRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010EC100);
  }
  return result;
}

void sub_100037470(uint64_t *a1, uint64_t a2)
{
  char v4;
  int *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  BOOL v17;

  _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(*a1, a1[1]);
  if ((v4 & 1) == 0)
    return;
  v5 = (int *)type metadata accessor for LostModeInfoRecord(0);
  if ((static UUID.== infix(_:_:)((char *)a1 + v5[5], a2 + v5[5]) & 1) == 0
    || (static UUID.== infix(_:_:)((char *)a1 + v5[6], a2 + v5[6]) & 1) == 0)
  {
    return;
  }
  v6 = v5[7];
  v7 = (uint64_t *)((char *)a1 + v6);
  v8 = *(uint64_t *)((char *)a1 + v6 + 8);
  v9 = (_QWORD *)(a2 + v6);
  v10 = v9[1];
  if (!v8)
  {
    if (v10)
      return;
LABEL_13:
    v12 = v5[8];
    v13 = (uint64_t *)((char *)a1 + v12);
    v14 = *(uint64_t *)((char *)a1 + v12 + 8);
    v15 = (_QWORD *)(a2 + v12);
    v16 = v15[1];
    if (v14)
    {
      if (!v16)
        return;
      v17 = *v13 == *v15 && v14 == v16;
      if (!v17 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v13, v14, *v15, v16, 0) & 1) == 0)
        return;
    }
    else if (v16)
    {
      return;
    }
    if (*(double *)((char *)a1 + v5[9]) == *(double *)(a2 + v5[9])
      && *(double *)((char *)a1 + v5[10]) == *(double *)(a2 + v5[10]))
    {
      _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(*(uint64_t *)((char *)a1 + v5[11]), *(uint64_t *)((char *)a1 + v5[11] + 8));
    }
    return;
  }
  if (v10)
  {
    v11 = *v7 == *v9 && v8 == v10;
    if (v11 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v7, v8, *v9, v10, 0) & 1) != 0)
      goto LABEL_13;
  }
}

uint64_t sub_1000375B8(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char v12;

  if (a1 == 0xD000000000000010)
  {
    v4 = 0x8000000100EC2FE0;
    if (a2 == 0x8000000100EC2FE0)
      goto LABEL_5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x8000000100EC2FE0, a1, a2, 0) & 1) != 0)
  {
    v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  if (a1 == 0x696669746E656469 && a2 == 0xEA00000000007265)
  {
    v6 = 0xEA00000000007265;
LABEL_11:
    swift_bridgeObjectRelease(v6);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x696669746E656469, 0xEA00000000007265, a1, a2, 0) & 1) != 0)
  {
    v6 = a2;
    goto LABEL_11;
  }
  if (a1 == 0xD000000000000010)
  {
    v7 = 0x8000000100EC28D0;
    if (a2 == 0x8000000100EC28D0)
      goto LABEL_16;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x8000000100EC28D0, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
LABEL_16:
    swift_bridgeObjectRelease(v7);
    return 2;
  }
  if (a1 == 0x6D754E656E6F6870 && a2 == 0xEB00000000726562)
  {
    v8 = 0xEB00000000726562;
LABEL_22:
    swift_bridgeObjectRelease(v8);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6D754E656E6F6870, 0xEB00000000726562, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_22;
  }
  if (a1 == 0x6567617373656DLL && a2 == 0xE700000000000000)
  {
    v9 = 0xE700000000000000;
LABEL_28:
    swift_bridgeObjectRelease(v9);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6567617373656DLL, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_28;
  }
  if (a1 == 0x656475746974616CLL && a2 == 0xE800000000000000)
  {
    v10 = 0xE800000000000000;
LABEL_34:
    swift_bridgeObjectRelease(v10);
    return 5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x656475746974616CLL, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_34;
  }
  if (a1 == 0x64757469676E6F6CLL && a2 == 0xE900000000000065)
  {
    v11 = 0xE900000000000065;
LABEL_40:
    swift_bridgeObjectRelease(v11);
    return 6;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x64757469676E6F6CLL, 0xE900000000000065, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
    goto LABEL_40;
  }
  if (a1 == 0x7369747265766461 && a2 == 0xED0000746E656D65)
  {
    swift_bridgeObjectRelease(0xED0000746E656D65);
    return 7;
  }
  else
  {
    v12 = _stringCompareWithSmolCheck(_:_:expecting:)(0x7369747265766461, 0xED0000746E656D65, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v12 & 1) != 0)
      return 7;
    else
      return 8;
  }
}

_QWORD *sub_100037948(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v8 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v8);
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    *((_BYTE *)a1 + *(int *)(a3 + 20)) = *((_BYTE *)a2 + *(int *)(a3 + 20));
  }
  return a1;
}

uint64_t sub_1000379D0(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for UUID(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t sub_100037A04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_100037A60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_100037ABC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_100037B18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_100037B74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100037B80);
}

uint64_t sub_100037B80(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UUID(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t sub_100037BBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100037BC8);
}

uint64_t sub_100037BC8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UUID(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata accessor for KeyDropBeaconGroupAttributes(uint64_t a1)
{
  uint64_t result;

  result = qword_1010EC160;
  if (!qword_1010EC160)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for KeyDropBeaconGroupAttributes);
  return result;
}

uint64_t sub_100037C44(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = (char *)&value witness table for Builtin.Int8 + 64;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_100037CB8(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  char v17;
  char v18;

  v3 = v1;
  v5 = sub_10001A9A8(&qword_1010EC198);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  v11 = sub_100038164();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for KeyDropBeaconGroupAttributes.CodingKeys, &type metadata for KeyDropBeaconGroupAttributes.CodingKeys, v11, v9, v10);
  v18 = 0;
  v12 = type metadata accessor for UUID(0);
  v13 = sub_10001AA68(&qword_1010EDAC0, (uint64_t)&protocol conformance descriptor for UUID);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v3, &v18, v5, v12, v13);
  if (!v2)
  {
    v14 = *(unsigned __int8 *)(v3 + *(int *)(type metadata accessor for KeyDropBeaconGroupAttributes(0) + 20));
    v17 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v14, &v17, v5);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100037E00@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(char *, _QWORD *, uint64_t);
  uint64_t v23;
  char v24;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  char v35;

  v29 = a2;
  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  v32 = v4;
  v33 = v5;
  __chkstk_darwin(v4);
  v30 = (uint64_t *)((char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v31 = sub_10001A9A8(&qword_1010EC1A8);
  v7 = *(_QWORD *)(v31 - 8);
  __chkstk_darwin(v31);
  v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for KeyDropBeaconGroupAttributes(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1[3];
  v13 = a1[4];
  sub_10001AA44(a1, v14);
  v15 = sub_100038164();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for KeyDropBeaconGroupAttributes.CodingKeys, &type metadata for KeyDropBeaconGroupAttributes.CodingKeys, v15, v14, v13);
  if (v2)
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  v27 = v10;
  v28 = v12;
  v16 = v7;
  v17 = v33;
  v35 = 0;
  v18 = sub_10001AA68((unint64_t *)&qword_1010EDA90, (uint64_t)&protocol conformance descriptor for UUID);
  v19 = v30;
  v20 = v31;
  v21 = v32;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v30, v32, &v35, v31, v32, v18);
  v22 = *(void (**)(char *, _QWORD *, uint64_t))(v17 + 32);
  v23 = (uint64_t)v28;
  v22(v28, v19, v21);
  v34 = 1;
  v24 = KeyedDecodingContainer.decode(_:forKey:)(&v34, v20);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v9, v20);
  *(_BYTE *)(v23 + *(int *)(v27 + 20)) = v24;
  sub_1000381A8(v23, v29);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  return sub_1000381EC(v23);
}

BOOL sub_100038060(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t sub_100038078()
{
  _BYTE *v0;

  if (*v0)
    return 0x644974726170;
  else
    return 0x65644970756F7267;
}

uint64_t sub_1000380BC@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100038468(a1, a2);
  *a3 = result;
  return result;
}

void sub_1000380E0(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_1000380EC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100038164();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100038114(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100038164();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10003813C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100037E00(a1, a2);
}

uint64_t sub_100038150(_QWORD *a1)
{
  return sub_100037CB8(a1);
}

unint64_t sub_100038164()
{
  unint64_t result;

  result = qword_1010EC1A0;
  if (!qword_1010EC1A0)
  {
    result = swift_getWitnessTable(&unk_100E22894, &type metadata for KeyDropBeaconGroupAttributes.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010EC1A0);
  }
  return result;
}

uint64_t sub_1000381A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for KeyDropBeaconGroupAttributes(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000381EC(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for KeyDropBeaconGroupAttributes(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t getEnumTagSinglePayload for KeyDropBeaconGroupAttributes.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = v6 - 2;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for KeyDropBeaconGroupAttributes.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_100038304 + 4 * byte_100E22755[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100038338 + 4 * byte_100E22750[v4]))();
}

uint64_t sub_100038338(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100038340(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100038348);
  return result;
}

uint64_t sub_100038354(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10003835CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_100038360(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100038368(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *sub_100038374(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for KeyDropBeaconGroupAttributes.CodingKeys()
{
  return &type metadata for KeyDropBeaconGroupAttributes.CodingKeys;
}

unint64_t sub_100038394()
{
  unint64_t result;

  result = qword_1010EC1B0;
  if (!qword_1010EC1B0)
  {
    result = swift_getWitnessTable(&unk_100E2286C, &type metadata for KeyDropBeaconGroupAttributes.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010EC1B0);
  }
  return result;
}

unint64_t sub_1000383DC()
{
  unint64_t result;

  result = qword_1010EC1B8;
  if (!qword_1010EC1B8)
  {
    result = swift_getWitnessTable(&unk_100E227DC, &type metadata for KeyDropBeaconGroupAttributes.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010EC1B8);
  }
  return result;
}

unint64_t sub_100038424()
{
  unint64_t result;

  result = qword_1010EC1C0;
  if (!qword_1010EC1C0)
  {
    result = swift_getWitnessTable(&unk_100E22804, &type metadata for KeyDropBeaconGroupAttributes.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010EC1C0);
  }
  return result;
}

uint64_t sub_100038468(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 0x65644970756F7267 && a2 == 0xEF7265696669746ELL)
  {
    v5 = 0xEF7265696669746ELL;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x65644970756F7267, 0xEF7265696669746ELL, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x644974726170 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease(0xE600000000000000);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x644974726170, 0xE600000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_100038574@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  __int128 v3;
  uint64_t v4;
  _BYTE v5[24];

  if (qword_1010EA5B0 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v5, 0, 0);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, (uint64_t)&v3, &qword_1010EE220);
  if (v4)
    return sub_10000F9FC(&v3, a1);
  __break(1u);
  return result;
}

uint64_t sub_100038608()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_1000234D8(v0, qword_1011B6698);
  sub_10001A9E8(v0, (uint64_t)qword_1011B6698);
  return Logger.init(subsystem:category:)(0xD00000000000001DLL, 0x8000000100EC5D30, 0xD000000000000010, 0x8000000100EC6400);
}

uint64_t sub_10003868C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_1000234D8(v0, qword_1010EC1C8);
  v1 = sub_10001A9E8(v0, (uint64_t)qword_1010EC1C8);
  if (qword_1010E98E8 != -1)
    swift_once(&qword_1010E98E8, sub_100038608);
  v2 = sub_10001A9E8(v0, (uint64_t)qword_1011B6698);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_10003871C()
{
  uint64_t v0;

  if (qword_1010E98F0 != -1)
    swift_once(&qword_1010E98F0, sub_10003868C);
  v0 = type metadata accessor for Logger(0);
  return sub_10001A9E8(v0, (uint64_t)qword_1010EC1C8);
}

uint64_t sub_100038764()
{
  uint64_t result;
  uint64_t v1;

  result = Data.init(base64Encoded:options:)(0xD000000000000058, 0x8000000100EC65B0, 0);
  qword_1010EC1E0 = result;
  *(_QWORD *)algn_1010EC1E8 = v1;
  return result;
}

unint64_t sub_1000387A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t (*v13)(_QWORD);
  uint64_t v14;
  uint64_t v15;
  Swift::String v16;
  Swift::String v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  Swift::String v24;
  Swift::String v25;
  Swift::String v26;
  Swift::String v27;
  unint64_t v29;
  unint64_t v30;

  v1 = type metadata accessor for StandaloneBeacon(0);
  __chkstk_darwin(v1);
  v3 = (char *)&v29 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for OwnedBeaconRecord(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for OwnedBeaconGroup(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for AirPodsLEPairingService.BeaconCreationResult(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10005972C(v0, (uint64_t)v12, v13);
  if (swift_getEnumCaseMultiPayload(v12, v10) == 1)
  {
    sub_1000126EC((uint64_t)v12, (uint64_t)v3, type metadata accessor for StandaloneBeacon);
    v29 = 0;
    v30 = 0xE000000000000000;
    _StringGuts.grow(_:)(23);
    swift_bridgeObjectRelease();
    v29 = 0xD000000000000014;
    v30 = 0x8000000100EC6640;
    v14 = type metadata accessor for UUID(0);
    v15 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v16._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v14, v15);
    String.append(_:)(v16);
    swift_bridgeObjectRelease();
    v17._countAndFlagsBits = 41;
    v17._object = (void *)0xE100000000000000;
    String.append(_:)(v17);
    v18 = v29;
    v19 = (uint64_t)v3;
    v20 = type metadata accessor for StandaloneBeacon;
  }
  else
  {
    v21 = (uint64_t)&v12[*(int *)(sub_10001A9A8(&qword_1010EC568) + 48)];
    sub_1000126EC((uint64_t)v12, (uint64_t)v9, type metadata accessor for OwnedBeaconGroup);
    sub_1000126EC(v21, (uint64_t)v6, type metadata accessor for OwnedBeaconRecord);
    v29 = 0;
    v30 = 0xE000000000000000;
    _StringGuts.grow(_:)(31);
    swift_bridgeObjectRelease();
    v29 = 0xD000000000000010;
    v30 = 0x8000000100EC6660;
    v22 = type metadata accessor for UUID(0);
    v23 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v24._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v22, v23);
    String.append(_:)(v24);
    swift_bridgeObjectRelease();
    v25._countAndFlagsBits = 0x6E6F63616562202CLL;
    v25._object = (void *)0xEA0000000000203ALL;
    String.append(_:)(v25);
    v26._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v22, v23);
    String.append(_:)(v26);
    swift_bridgeObjectRelease();
    v27._countAndFlagsBits = 41;
    v27._object = (void *)0xE100000000000000;
    String.append(_:)(v27);
    v18 = v29;
    sub_1000126B0((uint64_t)v6, type metadata accessor for OwnedBeaconRecord);
    v19 = (uint64_t)v9;
    v20 = type metadata accessor for OwnedBeaconGroup;
  }
  sub_1000126B0(v19, v20);
  return v18;
}

uint64_t sub_100038AE8(unint64_t a1)
{
  uint64_t v2;
  Swift::String v3;
  Swift::String v4;
  unint64_t v6;
  _QWORD v7[2];

  if (a1 >> 62)
  {
    if (a1 >> 62 == 1)
    {
      strcpy((char *)v7, ".response(");
      BYTE3(v7[1]) = 0;
      HIDWORD(v7[1]) = -369098752;
      __asm { BR              X10 }
    }
    __asm { BR              X10 }
  }
  strcpy((char *)v7, ".underlying(");
  BYTE5(v7[1]) = 0;
  HIWORD(v7[1]) = -5120;
  v6 = a1;
  sub_10005856C(a1);
  swift_errorRetain(a1);
  v2 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
  v3._countAndFlagsBits = String.init<A>(describing:)(&v6, v2);
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = 41;
  v4._object = (void *)0xE100000000000000;
  String.append(_:)(v4);
  sub_100058554(a1);
  return v7[0];
}

void sub_100038CE8()
{
  JUMPOUT(0x100038CD4);
}

void sub_100038D0C()
{
  JUMPOUT(0x100038CD4);
}

void sub_100038DF0()
{
  JUMPOUT(0x100038CD4);
}

void sub_100038E08()
{
  JUMPOUT(0x100038E1CLL);
}

void sub_100038E28()
{
  JUMPOUT(0x100038CD4);
}

uint64_t sub_100038E58()
{
  unint64_t *v0;

  return sub_100038AE8(*v0);
}

uint64_t sub_100038E60(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  id v4;
  id v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;

  v2 = v1;
  swift_defaultActor_initialize(v1);
  *(_QWORD *)(v1 + 112) = 0xD000000000000017;
  *(_QWORD *)(v1 + 120) = 0x8000000100E22980;
  v4 = objc_allocWithZone((Class)type metadata accessor for CurrentLocationMonitor());
  v5 = CurrentLocationMonitor.init(mode:desiredAccuracy:)(0, *(uint64_t *)&kCLLocationAccuracyHundredMeters, 0);
  *(_OWORD *)(v1 + 192) = 0u;
  *(_QWORD *)(v1 + 144) = v5;
  *(_QWORD *)(v1 + 152) = 0;
  *(_QWORD *)(v1 + 160) = 0;
  *(_QWORD *)(v1 + 168) = 0xF000000000000000;
  *(_BYTE *)(v1 + 176) = 0;
  *(_OWORD *)(v1 + 208) = 0u;
  *(_OWORD *)(v1 + 224) = 0u;
  *(_OWORD *)(v1 + 240) = 0u;
  *(_OWORD *)(v1 + 256) = 0u;
  *(_WORD *)(v1 + 272) = 0;
  *(_BYTE *)(v1 + 274) = 1;
  v6 = static Data.random(bytes:)(32);
  v8 = v7;
  v9 = type metadata accessor for AccessoryPairingInfo(0);
  swift_allocObject(v9, *(unsigned int *)(v9 + 48), *(unsigned __int16 *)(v9 + 52));
  sub_10001BBBC(v6, v8);
  v10 = sub_1001482FC(v6, v8);
  if (v10)
  {
    *(_QWORD *)(v1 + 184) = v10;
    v11 = type metadata accessor for AccessoryPairingValidator();
    v12 = swift_allocObject(v11, 32, 7);
    v13 = type metadata accessor for DeviceIdentityUtility(0);
    v14 = swift_allocObject(v13, *(unsigned int *)(v13 + 48), *(unsigned __int16 *)(v13 + 52));
    swift_retain();
    swift_defaultActor_initialize(v14);
    v15 = v14 + OBJC_IVAR____TtC12searchpartyd21DeviceIdentityUtility_certExpiryDate;
    v16 = type metadata accessor for Date(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v15, 1, 1, v16);
    *(_QWORD *)(v14 + OBJC_IVAR____TtC12searchpartyd21DeviceIdentityUtility_refKey) = 0;
    *(_QWORD *)(v14 + OBJC_IVAR____TtC12searchpartyd21DeviceIdentityUtility_certs) = _swiftEmptyArrayStorage;
    *(_BYTE *)(v14 + OBJC_IVAR____TtC12searchpartyd21DeviceIdentityUtility_signingType) = 5;
    *(_QWORD *)(v12 + 16) = v14;
    *(_QWORD *)(v12 + 24) = 0;
    sub_10001BC14(v6, v8);
    swift_release();
    *(_QWORD *)(v1 + 128) = v12;
    *(_QWORD *)(v1 + 136) = a1;
  }
  else
  {
    if (qword_1010E98F0 != -1)
      swift_once(&qword_1010E98F0, sub_10003868C);
    v17 = type metadata accessor for Logger(0);
    v18 = sub_10001A9E8(v17, (uint64_t)qword_1010EC1C8);
    v19 = Logger.logObject.getter(v18);
    v20 = static os_log_type_t.error.getter(v19);
    if (os_log_type_enabled(v19, v20))
    {
      v21 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v21 = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "Missing critical information to init pairing ", v21, 2u);
      swift_slowDealloc(v21, -1, -1);

      sub_10001BC14(v6, v8);
    }
    else
    {
      sub_10001BC14(v6, v8);

    }
    swift_bridgeObjectRelease();

    swift_release();
    sub_10001EF3C(*(_QWORD *)(v2 + 160), *(_QWORD *)(v2 + 168));
    sub_100004048(v2 + 192, &qword_1010EC418);
    sub_100004048(v2 + 232, &qword_1010EC420);
    v22 = type metadata accessor for AirPodsLEPairingService();
    swift_defaultActor_destroy(v2);
    swift_release();
    swift_deallocPartialClassInstance(v2, v22, 275, 15);
    return 0;
  }
  return v2;
}

uint64_t sub_100039174(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, char a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  *(_QWORD *)(v7 + 48) = a4;
  *(_QWORD *)(v7 + 56) = v6;
  *(_BYTE *)(v7 + 154) = a6;
  *(_BYTE *)(v7 + 153) = a5;
  *(_QWORD *)(v7 + 32) = a2;
  *(_QWORD *)(v7 + 40) = a3;
  *(_QWORD *)(v7 + 24) = a1;
  v8 = type metadata accessor for MACAddress(0);
  *(_QWORD *)(v7 + 64) = v8;
  v9 = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(v7 + 72) = v9;
  v10 = *(_QWORD *)(v9 + 64);
  *(_QWORD *)(v7 + 80) = v10;
  v11 = (v10 + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v7 + 88) = swift_task_alloc(v11);
  *(_QWORD *)(v7 + 96) = swift_task_alloc(v11);
  return swift_task_switch(sub_1000391F8, v6, 0);
}

uint64_t sub_1000391F8()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v8;

  v1 = *(_QWORD *)(v0 + 56);
  if ((*(_BYTE *)(v1 + 273) & 1) != 0)
  {
    v2 = sub_100056FAC();
    v3 = swift_allocError(&type metadata for AirPodsLEPairingService.Error, v2, 0, 0);
    *v4 = 0x800000000000000ELL;
    v6 = *(_QWORD *)(v0 + 88);
    v5 = *(_QWORD *)(v0 + 96);
    swift_willThrow(v3);
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    *(_BYTE *)(v1 + 273) = 1;
    type metadata accessor for CentralManager(0);
    v8 = (_QWORD *)swift_task_alloc(async function pointer to static CentralManager.pairingCentralManager.getter[1]);
    *(_QWORD *)(v0 + 104) = v8;
    *v8 = v0;
    v8[1] = sub_1000392D8;
    return static CentralManager.pairingCentralManager.getter();
  }
}

uint64_t sub_1000392D8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t (*v5)();

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 104);
  v3[14] = a1;
  v3[15] = v1;
  swift_task_dealloc(v4);
  if (v1)
    v5 = sub_100039574;
  else
    v5 = sub_100039344;
  return swift_task_switch(v5, v3[7], 0);
}

uint64_t sub_100039344()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t, uint64_t);
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  char v26;

  v1 = *(_QWORD *)(v0 + 88);
  v2 = *(_QWORD *)(v0 + 96);
  v3 = *(_QWORD *)(v0 + 72);
  v4 = *(_QWORD *)(v0 + 80);
  v6 = *(_QWORD *)(v0 + 56);
  v5 = *(_QWORD *)(v0 + 64);
  v25 = *(_BYTE *)(v0 + 153);
  v26 = *(_BYTE *)(v0 + 154);
  v24 = *(_QWORD *)(v0 + 48);
  v7 = *(_QWORD *)(v0 + 32);
  v22 = *(_QWORD *)(v0 + 112);
  v23 = *(_QWORD *)(v0 + 40);
  v8 = *(_QWORD *)(v0 + 24);
  v9 = swift_allocObject(&unk_101050618, 24, 7);
  swift_weakInit(v9 + 16, v6);
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v10(v2, v8, v5);
  v10(v1, v7, v5);
  v11 = *(unsigned __int8 *)(v3 + 80);
  v12 = (v11 + 32) & ~v11;
  v13 = (v4 + v11 + v12) & ~v11;
  v14 = (v4 + v13 + 7) & 0xFFFFFFFFFFFFFFF8;
  v15 = swift_allocObject(&unk_101050640, v14 + 18, v11 | 7);
  *(_QWORD *)(v0 + 128) = v15;
  *(_QWORD *)(v15 + 16) = v9;
  *(_QWORD *)(v15 + 24) = v22;
  v16 = v15 + v12;
  v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32);
  v17(v16, v2, v5);
  v17(v15 + v13, v1, v5);
  v18 = v15 + v14;
  *(_QWORD *)v18 = v23;
  *(_QWORD *)(v18 + 8) = v24;
  *(_BYTE *)(v18 + 16) = v25;
  *(_BYTE *)(v18 + 17) = v26;
  swift_retain();
  sub_10001BD08(v23, v24);
  v19 = (_QWORD *)swift_task_alloc(async function pointer to withTimeout<A>(_:block:)[1]);
  *(_QWORD *)(v0 + 136) = v19;
  v20 = sub_10001A9A8((uint64_t *)&unk_1010EE3B0);
  *v19 = v0;
  v19[1] = sub_100039500;
  return withTimeout<A>(_:block:)(v0 + 152, 0x40AAD21B3B700000, 3, &unk_1010EC430, v15, v20);
}

uint64_t sub_100039500()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 136);
  *(_QWORD *)(*v1 + 144) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = *(_QWORD *)(v2 + 56);
    v5 = sub_1000397A4;
  }
  else
  {
    v6 = *(_QWORD *)(v2 + 56);
    swift_release();
    v5 = sub_10003974C;
    v4 = v6;
  }
  return swift_task_switch(v5, v4, 0);
}

uint64_t sub_100039574()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = *(_QWORD *)(v0 + 120);
  *(_BYTE *)(*(_QWORD *)(v0 + 56) + 273) = 0;
  if (qword_1010E98F0 != -1)
    swift_once(&qword_1010E98F0, sub_10003868C);
  v2 = type metadata accessor for Logger(0);
  sub_10001A9E8(v2, (uint64_t)qword_1010EC1C8);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v6 = 138543362;
    swift_errorRetain(v1);
    v8 = _swift_stdlib_bridgeErrorToNSError(v1);
    *(_QWORD *)(v0 + 16) = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v6 + 4, v6 + 12);
    *v7 = v8;
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "AirPodsLEPairingService pairAirPods failed with error: %{public}@", v6, 0xCu);
    v9 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v7, 1, v9);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);
  }
  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
  }

  v11 = *(_QWORD *)(v0 + 88);
  v10 = *(_QWORD *)(v0 + 96);
  swift_willThrow(v12);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10003974C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 88);
  v2 = *(_QWORD *)(v0 + 96);
  v3 = *(_QWORD *)(v0 + 56);
  swift_release(*(_QWORD *)(v0 + 112));
  *(_BYTE *)(v3 + 273) = 0;
  swift_task_dealloc(v2);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000397A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  swift_release();
  swift_release();
  v1 = *(_QWORD *)(v0 + 144);
  *(_BYTE *)(*(_QWORD *)(v0 + 56) + 273) = 0;
  if (qword_1010E98F0 != -1)
    swift_once(&qword_1010E98F0, sub_10003868C);
  v2 = type metadata accessor for Logger(0);
  sub_10001A9E8(v2, (uint64_t)qword_1010EC1C8);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v6 = 138543362;
    swift_errorRetain(v1);
    v8 = _swift_stdlib_bridgeErrorToNSError(v1);
    *(_QWORD *)(v0 + 16) = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v6 + 4, v6 + 12);
    *v7 = v8;
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "AirPodsLEPairingService pairAirPods failed with error: %{public}@", v6, 0xCu);
    v9 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v7, 1, v9);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);
  }
  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
  }

  v11 = *(_QWORD *)(v0 + 88);
  v10 = *(_QWORD *)(v0 + 96);
  swift_willThrow(v12);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100039990(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  uint64_t v8;
  char v10;

  *(_BYTE *)(v8 + 121) = v10;
  *(_BYTE *)(v8 + 120) = a8;
  *(_QWORD *)(v8 + 80) = a6;
  *(_QWORD *)(v8 + 88) = a7;
  *(_QWORD *)(v8 + 64) = a4;
  *(_QWORD *)(v8 + 72) = a5;
  *(_QWORD *)(v8 + 48) = a2;
  *(_QWORD *)(v8 + 56) = a3;
  *(_QWORD *)(v8 + 40) = a1;
  return swift_task_switch(sub_1000399C4, 0, 0);
}

uint64_t sub_1000399C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t Strong;
  _QWORD *v3;
  uint64_t (*v5)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char, char);

  v1 = *(_QWORD *)(v0 + 48) + 16;
  swift_beginAccess(v1, v0 + 16, 0, 0);
  Strong = swift_weakLoadStrong(v1);
  *(_QWORD *)(v0 + 96) = Strong;
  if (Strong)
  {
    v5 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char, char))((char *)&dword_1010EC440
                                                                                         + dword_1010EC440);
    v3 = (_QWORD *)swift_task_alloc(unk_1010EC444);
    *(_QWORD *)(v0 + 104) = v3;
    *v3 = v0;
    v3[1] = sub_100039A84;
    return v5(*(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88), *(_BYTE *)(v0 + 120), *(_BYTE *)(v0 + 121));
  }
  else
  {
    **(_BYTE **)(v0 + 40) = 1;
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100039A84()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 104);
  *(_QWORD *)(*v1 + 112) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_100039B10;
  }
  else
  {
    swift_release(*(_QWORD *)(v2 + 96));
    v4 = sub_100039AF0;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_100039AF0()
{
  uint64_t v0;

  **(_BYTE **)(v0 + 40) = *(_QWORD *)(v0 + 96) == 0;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100039B10()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 96));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100039B44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, char a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;

  *(_QWORD *)(v8 + 5320) = v7;
  *(_BYTE *)(v8 + 6126) = a7;
  *(_BYTE *)(v8 + 6125) = a6;
  *(_QWORD *)(v8 + 5312) = a5;
  *(_QWORD *)(v8 + 5304) = a4;
  *(_QWORD *)(v8 + 5296) = a3;
  *(_QWORD *)(v8 + 5288) = a2;
  *(_QWORD *)(v8 + 5280) = a1;
  v9 = type metadata accessor for RawAccessoryMetadata(0);
  *(_QWORD *)(v8 + 5328) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10001A9A8(&qword_1010F46C0);
  *(_QWORD *)(v8 + 5336) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for BinaryDecoder(0);
  *(_QWORD *)(v8 + 5344) = v11;
  v12 = *(_QWORD *)(v11 - 8);
  *(_QWORD *)(v8 + 5352) = v12;
  *(_QWORD *)(v8 + 5360) = swift_task_alloc((*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for BinaryEncoder(0);
  *(_QWORD *)(v8 + 5368) = v13;
  v14 = *(_QWORD *)(v13 - 8);
  *(_QWORD *)(v8 + 5376) = v14;
  *(_QWORD *)(v8 + 5384) = swift_task_alloc((*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_10001A9A8((uint64_t *)&unk_101115F50);
  *(_QWORD *)(v8 + 5392) = v15;
  v16 = *(_QWORD *)(v15 - 8);
  *(_QWORD *)(v8 + 5400) = v16;
  *(_QWORD *)(v8 + 5408) = swift_task_alloc((*(_QWORD *)(v16 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_10001A9A8(&qword_1010EC448);
  *(_QWORD *)(v8 + 5416) = v17;
  v18 = *(_QWORD *)(v17 - 8);
  *(_QWORD *)(v8 + 5424) = v18;
  *(_QWORD *)(v8 + 5432) = swift_task_alloc((*(_QWORD *)(v18 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_10001A9A8(&qword_1010EC450);
  *(_QWORD *)(v8 + 5440) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v19 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for Peripheral.ConnectionOptions(0);
  *(_QWORD *)(v8 + 5448) = v20;
  v21 = *(_QWORD *)(v20 - 8);
  *(_QWORD *)(v8 + 5456) = v21;
  *(_QWORD *)(v8 + 5464) = swift_task_alloc((*(_QWORD *)(v21 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_10001A9A8(&qword_1010EC458);
  *(_QWORD *)(v8 + 5472) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v22 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = sub_10001A9A8(&qword_1010EC460);
  *(_QWORD *)(v8 + 5480) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v23 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = type metadata accessor for AccessoryProductInfo(0);
  *(_QWORD *)(v8 + 5488) = v24;
  v25 = *(_QWORD *)(v24 - 8);
  *(_QWORD *)(v8 + 5496) = v25;
  v26 = (*(_QWORD *)(v25 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v8 + 5504) = swift_task_alloc(v26);
  *(_QWORD *)(v8 + 5512) = swift_task_alloc(v26);
  v27 = type metadata accessor for UUID(0);
  *(_QWORD *)(v8 + 5520) = v27;
  v28 = *(_QWORD *)(v27 - 8);
  *(_QWORD *)(v8 + 5528) = v28;
  *(_QWORD *)(v8 + 5536) = swift_task_alloc((*(_QWORD *)(v28 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = (*(_QWORD *)(*(_QWORD *)(sub_10001A9A8((uint64_t *)&unk_10111C0A0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v8 + 5544) = swift_task_alloc(v29);
  *(_QWORD *)(v8 + 5552) = swift_task_alloc(v29);
  *(_QWORD *)(v8 + 5560) = swift_task_alloc(v29);
  *(_QWORD *)(v8 + 5568) = swift_task_alloc(v29);
  v30 = type metadata accessor for CentralManager.Error(0);
  *(_QWORD *)(v8 + 5576) = v30;
  v31 = *(_QWORD *)(v30 - 8);
  *(_QWORD *)(v8 + 5584) = v31;
  *(_QWORD *)(v8 + 5592) = swift_task_alloc((*(_QWORD *)(v31 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for AccessoryMetadata(0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v8 + 5600) = swift_task_alloc(v32);
  *(_QWORD *)(v8 + 5608) = swift_task_alloc(v32);
  *(_QWORD *)(v8 + 5616) = swift_task_alloc(v32);
  *(_QWORD *)(v8 + 5624) = swift_task_alloc(v32);
  v33 = type metadata accessor for CentralManager.State(0);
  *(_QWORD *)(v8 + 5632) = v33;
  v34 = *(_QWORD *)(v33 - 8);
  *(_QWORD *)(v8 + 5640) = v34;
  *(_QWORD *)(v8 + 5648) = swift_task_alloc((*(_QWORD *)(v34 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = type metadata accessor for MACAddress(0);
  *(_QWORD *)(v8 + 5656) = v35;
  v36 = *(_QWORD *)(v35 - 8);
  *(_QWORD *)(v8 + 5664) = v36;
  v37 = *(_QWORD *)(v36 + 64);
  *(_QWORD *)(v8 + 5672) = v37;
  v38 = (v37 + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v8 + 5680) = swift_task_alloc(v38);
  *(_QWORD *)(v8 + 5688) = swift_task_alloc(v38);
  return swift_task_switch(sub_100039EA0, v7, 0);
}

uint64_t sub_100039EA0()
{
  _QWORD *v0;
  _BYTE *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v34;

  v1 = (char *)v0 + 6125;
  if (qword_1010E98F0 != -1)
    swift_once(&qword_1010E98F0, sub_10003868C);
  v2 = v0[711];
  v3 = v0[708];
  v4 = v0[707];
  v5 = v0[661];
  v6 = type metadata accessor for Logger(0);
  v0[712] = sub_10001A9E8(v6, (uint64_t)qword_1010EC1C8);
  v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v0[713] = v7;
  v8 = v7(v2, v5, v4);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.default.getter(v9);
  v11 = os_log_type_enabled(v9, v10);
  v12 = v0[711];
  v13 = v0[708];
  v14 = v0[707];
  if (v11)
  {
    v15 = (uint8_t *)swift_slowAlloc(12, -1);
    v34 = swift_slowAlloc(32, -1);
    v16 = v34;
    *(_DWORD *)v15 = 136446210;
    v17 = sub_100006C64((unint64_t *)&qword_1010FBAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for MACAddress, (uint64_t)&protocol conformance descriptor for MACAddress);
    v18 = dispatch thunk of CustomStringConvertible.description.getter(v14, v17);
    v0[643] = sub_100016940(v18, v19, &v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 643, v0 + 644, v15 + 4, v15 + 12);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v14);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Pairing AirPods LE with MAC address %{public}s", v15, 0xCu);
    swift_arrayDestroy(v16, 1, (char *)&type metadata for Any + 8);
    v20 = v16;
    v1 = (char *)v0 + 6125;
    swift_slowDealloc(v20, -1, -1);
    swift_slowDealloc(v15, -1, -1);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v13 + 8))(v0[711], v0[707]);
  }

  v21 = v0[665];
  v22 = v1[1];
  *(_BYTE *)(v21 + 272) = *v1;
  *(_BYTE *)(*(_QWORD *)(v21 + 184) + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_forcePair) = v22;
  if (qword_1010EA318 != -1)
    swift_once(&qword_1010EA318, sub_100B5E330);
  v23 = sub_10001A9E8(v6, (uint64_t)qword_1011B7DF8);
  v24 = Logger.logObject.getter(v23);
  v25 = static os_log_type_t.default.getter(v24);
  if (os_log_type_enabled(v24, v25))
  {
    v26 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v26 = 0;
    _os_log_impl((void *)&_mh_execute_header, v24, v25, "Pairing LE using CCCKG2", v26, 2u);
    swift_slowDealloc(v26, -1, -1);
  }
  v27 = v0[706];
  v28 = v0[705];
  v29 = v0[704];

  (*(void (**)(uint64_t, _QWORD, uint64_t))(v28 + 104))(v27, enum case for CentralManager.State.poweredOn(_:), v29);
  v30 = type metadata accessor for CentralManager(0);
  v31 = sub_100006C64(&qword_1010EC468, 255, (uint64_t (*)(uint64_t))&type metadata accessor for CentralManager, (uint64_t)&protocol conformance descriptor for CentralManager);
  v32 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of CentralManagerProtocol.await(state:)[1]);
  v0[714] = v32;
  *v32 = v0;
  v32[1] = sub_10003A21C;
  return dispatch thunk of CentralManagerProtocol.await(state:)(v0[706], v30, v31);
}

uint64_t sub_10003A21C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)();

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 5712);
  *(_QWORD *)(*(_QWORD *)v1 + 5720) = v0;
  swift_task_dealloc(v3);
  v4 = v2[706];
  v5 = v2[705];
  v6 = v2[704];
  v7 = v2[665];
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  if (v0)
    v8 = sub_10003A434;
  else
    v8 = sub_10003A298;
  return swift_task_switch(v8, v7, 0);
}

uint64_t sub_10003A298()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;

  v1 = *(_QWORD *)(v0 + 5680);
  v2 = *(_QWORD *)(v0 + 5672);
  v3 = *(_QWORD *)(v0 + 5664);
  v4 = *(_QWORD *)(v0 + 5656);
  v5 = *(_QWORD *)(v0 + 5320);
  v6 = *(_QWORD *)(v0 + 5280);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v0 + 5704))(v1, *(_QWORD *)(v0 + 5288), v4);
  LODWORD(v7) = *(_DWORD *)(v3 + 80);
  *(_DWORD *)(v0 + 6120) = v7;
  v7 = v7;
  v8 = (v7 + 32) & ~v7;
  v9 = swift_allocObject(&unk_101050668, v8 + v2, v7 | 7);
  *(_QWORD *)(v0 + 5728) = v9;
  *(_QWORD *)(v9 + 16) = v5;
  *(_QWORD *)(v9 + 24) = v6;
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32);
  *(_QWORD *)(v0 + 5736) = v10;
  v10(v9 + v8, v1, v4);
  v11 = async function pointer to withTimeout<A>(_:block:)[1];
  swift_retain();
  swift_retain();
  v12 = (_QWORD *)swift_task_alloc(v11);
  *(_QWORD *)(v0 + 5744) = v12;
  v13 = type metadata accessor for Peripheral(0);
  *(_QWORD *)(v0 + 5752) = v13;
  *v12 = v0;
  v12[1] = sub_10003A3C0;
  return withTimeout<A>(_:block:)(v0 + 5168, 0x40AAD21B3B700000, 3, &unk_1010EC478, v9, v13);
}

uint64_t sub_10003A3C0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 5744);
  *(_QWORD *)(*v1 + 5760) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = *(_QWORD *)(v2 + 5320);
    v5 = sub_10003A7B0;
  }
  else
  {
    v6 = *(_QWORD *)(v2 + 5320);
    swift_release();
    v5 = sub_10003A5D0;
    v4 = v6;
  }
  return swift_task_switch(v5, v4, 0);
}

uint64_t sub_10003A434()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v1 = *(_QWORD *)(v0 + 5680);
  v2 = *(_QWORD *)(v0 + 5648);
  v3 = *(_QWORD *)(v0 + 5624);
  v4 = *(_QWORD *)(v0 + 5616);
  v5 = *(_QWORD *)(v0 + 5608);
  v6 = *(_QWORD *)(v0 + 5600);
  v7 = *(_QWORD *)(v0 + 5592);
  v8 = *(_QWORD *)(v0 + 5568);
  v9 = *(_QWORD *)(v0 + 5560);
  v11 = *(_QWORD *)(v0 + 5552);
  v12 = *(_QWORD *)(v0 + 5544);
  v13 = *(_QWORD *)(v0 + 5536);
  v14 = *(_QWORD *)(v0 + 5512);
  v15 = *(_QWORD *)(v0 + 5504);
  v16 = *(_QWORD *)(v0 + 5480);
  v17 = *(_QWORD *)(v0 + 5472);
  v18 = *(_QWORD *)(v0 + 5464);
  v19 = *(_QWORD *)(v0 + 5440);
  v20 = *(_QWORD *)(v0 + 5432);
  v21 = *(_QWORD *)(v0 + 5408);
  v22 = *(_QWORD *)(v0 + 5384);
  v23 = *(_QWORD *)(v0 + 5360);
  v24 = *(_QWORD *)(v0 + 5336);
  v25 = *(_QWORD *)(v0 + 5328);
  swift_task_dealloc(*(_QWORD *)(v0 + 5688));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10003A5D0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v13;

  v1 = v0[646];
  v0[721] = v1;
  v2 = swift_retain();
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = v0[719];
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    v13 = v7;
    *(_DWORD *)v6 = 136315138;
    v0[658] = v1;
    v8 = sub_100006C64(&qword_1010EC508, 255, (uint64_t (*)(uint64_t))&type metadata accessor for Peripheral, (uint64_t)&protocol conformance descriptor for Peripheral);
    v9 = dispatch thunk of CustomStringConvertible.description.getter(v5, v8);
    v0[659] = sub_100016940(v9, v10, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 659, v0 + 660, v6 + 4, v6 + 12);
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Reading Posh AIS from peripheral: %s", v6, 0xCu);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);

  }
  else
  {

    swift_release();
  }
  v0[722] = type metadata accessor for AccessoryMetadataManager();
  v11 = (_QWORD *)swift_task_alloc(dword_1010F382C);
  v0[723] = v11;
  *v11 = v0;
  v11[1] = sub_10003A954;
  return sub_10021759C(v0[702], v0[661]);
}

uint64_t sub_10003A7B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  swift_release(*(_QWORD *)(v0 + 5728));
  v1 = *(_QWORD *)(v0 + 5680);
  v2 = *(_QWORD *)(v0 + 5648);
  v3 = *(_QWORD *)(v0 + 5624);
  v4 = *(_QWORD *)(v0 + 5616);
  v5 = *(_QWORD *)(v0 + 5608);
  v6 = *(_QWORD *)(v0 + 5600);
  v7 = *(_QWORD *)(v0 + 5592);
  v8 = *(_QWORD *)(v0 + 5568);
  v9 = *(_QWORD *)(v0 + 5560);
  v11 = *(_QWORD *)(v0 + 5552);
  v12 = *(_QWORD *)(v0 + 5544);
  v13 = *(_QWORD *)(v0 + 5536);
  v14 = *(_QWORD *)(v0 + 5512);
  v15 = *(_QWORD *)(v0 + 5504);
  v16 = *(_QWORD *)(v0 + 5480);
  v17 = *(_QWORD *)(v0 + 5472);
  v18 = *(_QWORD *)(v0 + 5464);
  v19 = *(_QWORD *)(v0 + 5440);
  v20 = *(_QWORD *)(v0 + 5432);
  v21 = *(_QWORD *)(v0 + 5408);
  v22 = *(_QWORD *)(v0 + 5384);
  v23 = *(_QWORD *)(v0 + 5360);
  v24 = *(_QWORD *)(v0 + 5336);
  v25 = *(_QWORD *)(v0 + 5328);
  swift_task_dealloc(*(_QWORD *)(v0 + 5688));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10003A954()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 5784);
  *(_QWORD *)(*v1 + 5792) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_10003B2C0;
  else
    v4 = sub_10003A9B8;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 5320), 0);
}

uint64_t sub_10003A9B8()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  BOOL v39;
  uint64_t v40;
  uint8_t *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92[2];

  v1 = (_QWORD *)(v0 + 6124);
  sub_1000126EC(*(_QWORD *)(v0 + 5616), *(_QWORD *)(v0 + 5624), type metadata accessor for AccessoryMetadata);
  v91 = *(_QWORD *)(v0 + 5792);
  v2 = sub_10005972C(*(_QWORD *)(v0 + 5624), *(_QWORD *)(v0 + 5608), type metadata accessor for AccessoryMetadata);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = *(_QWORD *)(v0 + 5608);
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    v92[0] = v7;
    *(_DWORD *)v6 = 136446210;
    v8 = sub_100132D48();
    *(_QWORD *)(v0 + 5240) = sub_100016940(v8, v9, v92);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 5240, v0 + 5248, v6 + 4, v6 + 12);
    swift_bridgeObjectRelease();
    sub_1000126B0(v5, type metadata accessor for AccessoryMetadata);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "AIS: %{public}s", v6, 0xCu);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);
  }
  else
  {
    sub_1000126B0(*(_QWORD *)(v0 + 5608), type metadata accessor for AccessoryMetadata);
  }

  if (qword_1010EA1D0 != -1)
    swift_once(&qword_1010EA1D0, sub_100B11444);
  *(_QWORD *)(v0 + 5096) = 0x7365547265646E75;
  *(_QWORD *)(v0 + 5104) = 0xE900000000000074;
  SynchronousCache.cachedValue<A>(key:computeBlock:)(v1, v0 + 5096, sub_10001F628, 0, &type metadata for Bool);
  swift_bridgeObjectRelease();
  if (*(_BYTE *)v1 != 1)
  {
    v32 = (_QWORD *)swift_task_alloc(dword_1010F37D4);
    *(_QWORD *)(v0 + 5800) = v32;
    *v32 = v0;
    v32[1] = sub_10003B6CC;
    return sub_10021770C(*(_QWORD *)(v0 + 5552), *(_QWORD *)(v0 + 5624), 3);
  }
  v10 = *(_QWORD *)(v0 + 5560);
  v11 = *(_QWORD *)(v0 + 5536);
  v12 = *(_QWORD *)(v0 + 5528);
  v13 = *(_QWORD *)(v0 + 5520);
  v14 = *(_QWORD *)(v0 + 5496);
  v15 = *(_QWORD *)(v0 + 5488);
  v16 = type metadata accessor for BeaconStore(0);
  UUID.init()(v16);
  sub_100C9AB8C(v11, 0, v10);
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v13);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v14 + 56))(v10, 0, 1, v15);
  v17 = *(_QWORD *)(v0 + 5568);
  v18 = *(_QWORD *)(v0 + 5544);
  v19 = *(_QWORD *)(v0 + 5496);
  v20 = *(_QWORD *)(v0 + 5488);
  sub_100005CF0(*(_QWORD *)(v0 + 5560), v17, (uint64_t *)&unk_10111C0A0);
  sub_10000F9B8(v17, v18, (uint64_t *)&unk_10111C0A0);
  v21 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v19 + 48))(v18, 1, v20);
  v22 = *(_QWORD *)(v0 + 5544);
  if (v21 == 1)
  {
    v23 = sub_100004048(v22, (uint64_t *)&unk_10111C0A0);
    v24 = Logger.logObject.getter(v23);
    v25 = static os_log_type_t.error.getter(v24);
    if (os_log_type_enabled(v24, v25))
    {
      v26 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v26 = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "Missing product info!", v26, 2u);
      swift_slowDealloc(v26, -1, -1);
    }
    v27 = *(_QWORD *)(v0 + 5624);
    v28 = *(_QWORD *)(v0 + 5568);

    v29 = sub_100056FAC();
    v30 = swift_allocError(&type metadata for AirPodsLEPairingService.Error, v29, 0, 0);
    *v31 = 0x800000000000000CLL;
    swift_willThrow(v30);
    swift_release();
    goto LABEL_17;
  }
  v34 = *(_QWORD *)(v0 + 5512);
  v35 = *(_QWORD *)(v0 + 5504);
  sub_1000126EC(v22, v34, type metadata accessor for AccessoryProductInfo);
  v36 = sub_10005972C(v34, v35, type metadata accessor for AccessoryProductInfo);
  v37 = Logger.logObject.getter(v36);
  v38 = static os_log_type_t.default.getter(v37);
  v39 = os_log_type_enabled(v37, v38);
  v40 = *(_QWORD *)(v0 + 5504);
  if (v39)
  {
    v41 = (uint8_t *)swift_slowAlloc(12, -1);
    v42 = swift_slowAlloc(32, -1);
    v92[0] = v42;
    *(_DWORD *)v41 = 136446210;
    v43 = sub_100D1A984();
    *(_QWORD *)(v0 + 5232) = sub_100016940(v43, v44, v92);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 5232, v0 + 5240, v41 + 4, v41 + 12);
    swift_bridgeObjectRelease();
    sub_1000126B0(v40, type metadata accessor for AccessoryProductInfo);
    _os_log_impl((void *)&_mh_execute_header, v37, v38, "Product info: %{public}s)", v41, 0xCu);
    swift_arrayDestroy(v42, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v42, -1, -1);
    swift_slowDealloc(v41, -1, -1);
  }
  else
  {
    sub_1000126B0(*(_QWORD *)(v0 + 5504), type metadata accessor for AccessoryProductInfo);
  }

  sub_100041FD4(*(_QWORD *)(v0 + 5624), *(_QWORD *)(v0 + 5512));
  if (v91)
  {
    v27 = *(_QWORD *)(v0 + 5624);
    v28 = *(_QWORD *)(v0 + 5568);
    v45 = *(_QWORD *)(v0 + 5512);
    swift_release();
    sub_1000126B0(v45, type metadata accessor for AccessoryProductInfo);
LABEL_17:
    sub_100004048(v28, (uint64_t *)&unk_10111C0A0);
    sub_1000126B0(v27, type metadata accessor for AccessoryMetadata);
    v46 = *(_QWORD *)(v0 + 5680);
    v47 = *(_QWORD *)(v0 + 5648);
    v48 = *(_QWORD *)(v0 + 5624);
    v49 = *(_QWORD *)(v0 + 5616);
    v50 = *(_QWORD *)(v0 + 5608);
    v51 = *(_QWORD *)(v0 + 5600);
    v52 = *(_QWORD *)(v0 + 5592);
    v53 = *(_QWORD *)(v0 + 5568);
    v54 = *(_QWORD *)(v0 + 5560);
    v76 = *(_QWORD *)(v0 + 5552);
    v77 = *(_QWORD *)(v0 + 5544);
    v78 = *(_QWORD *)(v0 + 5536);
    v79 = *(_QWORD *)(v0 + 5512);
    v80 = *(_QWORD *)(v0 + 5504);
    v81 = *(_QWORD *)(v0 + 5480);
    v82 = *(_QWORD *)(v0 + 5472);
    v83 = *(_QWORD *)(v0 + 5464);
    v84 = *(_QWORD *)(v0 + 5440);
    v85 = *(_QWORD *)(v0 + 5432);
    v86 = *(_QWORD *)(v0 + 5408);
    v87 = *(_QWORD *)(v0 + 5384);
    v88 = *(_QWORD *)(v0 + 5360);
    v89 = *(_QWORD *)(v0 + 5336);
    v90 = *(_QWORD *)(v0 + 5328);
    swift_task_dealloc(*(_QWORD *)(v0 + 5688));
    swift_task_dealloc(v46);
    swift_task_dealloc(v47);
    swift_task_dealloc(v48);
    swift_task_dealloc(v49);
    swift_task_dealloc(v50);
    swift_task_dealloc(v51);
    swift_task_dealloc(v52);
    swift_task_dealloc(v53);
    swift_task_dealloc(v54);
    swift_task_dealloc(v76);
    swift_task_dealloc(v77);
    swift_task_dealloc(v78);
    swift_task_dealloc(v79);
    swift_task_dealloc(v80);
    swift_task_dealloc(v81);
    swift_task_dealloc(v82);
    swift_task_dealloc(v83);
    swift_task_dealloc(v84);
    swift_task_dealloc(v85);
    swift_task_dealloc(v86);
    swift_task_dealloc(v87);
    swift_task_dealloc(v88);
    swift_task_dealloc(v89);
    swift_task_dealloc(v90);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v55 = *(_QWORD *)(v0 + 5480);
  v56 = *(_QWORD *)(v0 + 5472);
  v57 = *(_QWORD *)(v0 + 5464);
  v58 = *(_QWORD *)(v0 + 5456);
  v59 = *(_QWORD *)(v0 + 5448);
  v60 = *(_QWORD *)(v0 + 5440);
  v61 = *(_QWORD *)(v0 + 5320);
  v62 = *(_QWORD *)(v0 + 5312);
  v63 = *(_QWORD *)(v0 + 5304);
  v64 = *(_QWORD *)(v61 + 160);
  v65 = *(_QWORD *)(v61 + 168);
  *(_QWORD *)(v61 + 160) = v63;
  *(_QWORD *)(v61 + 168) = v62;
  sub_10001BD08(v63, v62);
  sub_10001EF3C(v64, v65);
  v66 = type metadata accessor for ConnectUseCase(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v66 - 8) + 56))(v55, 1, 1, v66);
  v67 = sub_10001A9A8(&qword_1010EC480);
  v68 = swift_allocObject(v67, ((*(unsigned __int8 *)(v58 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v58 + 80))+ *(_QWORD *)(v58 + 72), *(unsigned __int8 *)(v58 + 80) | 7);
  *(_OWORD *)(v68 + 16) = xmmword_100E22B00;
  static Peripheral.ConnectionOptions.hideFromBTSettings.getter();
  *(_QWORD *)(v0 + 5136) = v68;
  v69 = sub_100006C64(&qword_1010EC488, 255, (uint64_t (*)(uint64_t))&type metadata accessor for Peripheral.ConnectionOptions, (uint64_t)&protocol conformance descriptor for Peripheral.ConnectionOptions);
  v70 = sub_10001A9A8(&qword_1010EC490);
  v71 = sub_1000193A4(&qword_1010EC498, &qword_1010EC490, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(v0 + 5136, v70, v71, v59, v69);
  v72 = type metadata accessor for PeripheralPairingInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v72 - 8) + 56))(v60, 1, 1, v72);
  Peripheral.Options.init(connectionOptions:pairingInfo:)(v57, v60);
  v73 = type metadata accessor for Peripheral.Options(0);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v73 - 8) + 56))(v56, 0, 1, v73);
  v74 = sub_100006C64(&qword_1010EC4A0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for Peripheral, (uint64_t)&protocol conformance descriptor for Peripheral);
  *(_QWORD *)(v0 + 5816) = v74;
  v75 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of PeripheralProtocol.connect(useCase:options:)[1]);
  *(_QWORD *)(v0 + 5824) = v75;
  *v75 = v0;
  v75[1] = sub_10003B730;
  return dispatch thunk of PeripheralProtocol.connect(useCase:options:)(*(_QWORD *)(v0 + 5480), *(_QWORD *)(v0 + 5472), *(_QWORD *)(v0 + 5752), v74);
}

uint64_t sub_10003B2C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;

  v1 = *(_QWORD *)(v0 + 5792);
  v2 = *(_QWORD *)(v0 + 5592);
  v3 = *(_QWORD *)(v0 + 5576);
  *(_QWORD *)(v0 + 5152) = v1;
  swift_errorRetain(v1);
  v4 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
  if ((swift_dynamicCast(v2, v0 + 5152, v4, v3, 0) & 1) == 0)
  {
    swift_release();
LABEL_7:
    swift_errorRelease(*(_QWORD *)(v0 + 5152));
    v19 = *(_QWORD *)(v0 + 5680);
    v20 = *(_QWORD *)(v0 + 5648);
    v21 = *(_QWORD *)(v0 + 5624);
    v22 = *(_QWORD *)(v0 + 5616);
    v23 = *(_QWORD *)(v0 + 5608);
    v24 = *(_QWORD *)(v0 + 5600);
    v25 = *(_QWORD *)(v0 + 5592);
    v26 = *(_QWORD *)(v0 + 5568);
    v27 = *(_QWORD *)(v0 + 5560);
    v30 = *(_QWORD *)(v0 + 5552);
    v31 = *(_QWORD *)(v0 + 5544);
    v32 = *(_QWORD *)(v0 + 5536);
    v33 = *(_QWORD *)(v0 + 5512);
    v34 = *(_QWORD *)(v0 + 5504);
    v35 = *(_QWORD *)(v0 + 5480);
    v36 = *(_QWORD *)(v0 + 5472);
    v37 = *(_QWORD *)(v0 + 5464);
    v38 = *(_QWORD *)(v0 + 5440);
    v39 = *(_QWORD *)(v0 + 5432);
    v40 = *(_QWORD *)(v0 + 5408);
    v41 = *(_QWORD *)(v0 + 5384);
    v42 = *(_QWORD *)(v0 + 5360);
    v43 = *(_QWORD *)(v0 + 5336);
    v44 = *(_QWORD *)(v0 + 5328);
    swift_task_dealloc(*(_QWORD *)(v0 + 5688));
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    swift_task_dealloc(v36);
    swift_task_dealloc(v37);
    swift_task_dealloc(v38);
    swift_task_dealloc(v39);
    swift_task_dealloc(v40);
    swift_task_dealloc(v41);
    swift_task_dealloc(v42);
    swift_task_dealloc(v43);
    swift_task_dealloc(v44);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  if ((*(unsigned int (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 5584) + 88))(*(_QWORD *)(v0 + 5592), *(_QWORD *)(v0 + 5576)) != enum case for CentralManager.Error.missingService(_:))
  {
    v16 = *(_QWORD *)(v0 + 5592);
    v17 = *(_QWORD *)(v0 + 5584);
    v18 = *(_QWORD *)(v0 + 5576);
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v16, v18);
    goto LABEL_7;
  }
  swift_errorRelease(*(_QWORD *)(v0 + 5792));
  v5 = swift_retain();
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.default.getter(v6);
  v8 = os_log_type_enabled(v6, v7);
  v9 = *(_QWORD *)(v0 + 5768);
  if (v8)
  {
    v10 = *(_QWORD *)(v0 + 5752);
    v11 = (uint8_t *)swift_slowAlloc(12, -1);
    v12 = swift_slowAlloc(32, -1);
    v46 = v12;
    *(_DWORD *)v11 = 136315138;
    *(_QWORD *)(v0 + 5248) = v9;
    v13 = sub_100006C64(&qword_1010EC508, 255, (uint64_t (*)(uint64_t))&type metadata accessor for Peripheral, (uint64_t)&protocol conformance descriptor for Peripheral);
    v14 = dispatch thunk of CustomStringConvertible.description.getter(v10, v13);
    *(_QWORD *)(v0 + 5256) = sub_100016940(v14, v15, &v46);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 5256, v0 + 5264, v11 + 4, v11 + 12);
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Missing Posh service, reading Hawkeye/Hele AIS from peripheral: %s", v11, 0xCu);
    swift_arrayDestroy(v12, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v12, -1, -1);
    swift_slowDealloc(v11, -1, -1);

  }
  else
  {

    swift_release();
  }
  v45 = (char *)&dword_1010F3818 + dword_1010F3818;
  v29 = (_QWORD *)swift_task_alloc(unk_1010F381C);
  *(_QWORD *)(v0 + 6088) = v29;
  *v29 = v0;
  v29[1] = sub_10003FAE0;
  return ((uint64_t (*)(_QWORD, _QWORD, uint64_t))v45)(*(_QWORD *)(v0 + 5328), *(_QWORD *)(v0 + 5768), 2);
}

uint64_t sub_10003B6CC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 5800);
  *(_QWORD *)(*v1 + 5808) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_10003F928;
  else
    v4 = sub_10003F2C8;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 5320), 0);
}

uint64_t sub_10003B730()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 5824);
  *(_QWORD *)(*(_QWORD *)v1 + 5832) = v0;
  swift_task_dealloc(v3);
  v4 = v2[685];
  v5 = v2[684];
  v6 = v2[665];
  sub_100004048(v5, &qword_1010EC458);
  sub_100004048(v4, &qword_1010EC460);
  if (v0)
    v7 = sub_10003B9CC;
  else
    v7 = sub_10003B7C4;
  return swift_task_switch(v7, v6, 0);
}

uint64_t sub_10003B7C4()
{
  _QWORD *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v14;

  v1 = swift_retain();
  v2 = Logger.logObject.getter(v1);
  v3 = static os_log_type_t.default.getter(v2);
  if (os_log_type_enabled(v2, v3))
  {
    v4 = v0[721];
    v5 = v0[719];
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    v14 = v7;
    *(_DWORD *)v6 = 136315138;
    v0[652] = v4;
    v8 = sub_100006C64(&qword_1010EC508, 255, (uint64_t (*)(uint64_t))&type metadata accessor for Peripheral, (uint64_t)&protocol conformance descriptor for Peripheral);
    v9 = dispatch thunk of CustomStringConvertible.description.getter(v5, v8);
    v0[653] = sub_100016940(v9, v10, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 653, v0 + 654, v6 + 4, v6 + 12);
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Connected to peripheral: %s", v6, 0xCu);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);

  }
  else
  {

    swift_release();
  }
  v11 = type metadata accessor for Service(0);
  v0[730] = v11;
  Identifier.init(stringLiteral:)("FD44", 4, 2, v11);
  v12 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of PeripheralProtocol.subscript.getter[1]);
  v0[731] = v12;
  *v12 = v0;
  v12[1] = sub_10003BBAC;
  return dispatch thunk of PeripheralProtocol.subscript.getter(v0[679], v0[719], v0[727]);
}

uint64_t sub_10003B9CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v1 = *(_QWORD *)(v0 + 5624);
  v2 = *(_QWORD *)(v0 + 5568);
  v3 = *(_QWORD *)(v0 + 5512);
  swift_release();
  sub_1000126B0(v3, type metadata accessor for AccessoryProductInfo);
  sub_100004048(v2, (uint64_t *)&unk_10111C0A0);
  sub_1000126B0(v1, type metadata accessor for AccessoryMetadata);
  v4 = *(_QWORD *)(v0 + 5680);
  v5 = *(_QWORD *)(v0 + 5648);
  v6 = *(_QWORD *)(v0 + 5624);
  v7 = *(_QWORD *)(v0 + 5616);
  v8 = *(_QWORD *)(v0 + 5608);
  v9 = *(_QWORD *)(v0 + 5600);
  v10 = *(_QWORD *)(v0 + 5592);
  v11 = *(_QWORD *)(v0 + 5568);
  v12 = *(_QWORD *)(v0 + 5560);
  v14 = *(_QWORD *)(v0 + 5552);
  v15 = *(_QWORD *)(v0 + 5544);
  v16 = *(_QWORD *)(v0 + 5536);
  v17 = *(_QWORD *)(v0 + 5512);
  v18 = *(_QWORD *)(v0 + 5504);
  v19 = *(_QWORD *)(v0 + 5480);
  v20 = *(_QWORD *)(v0 + 5472);
  v21 = *(_QWORD *)(v0 + 5464);
  v22 = *(_QWORD *)(v0 + 5440);
  v23 = *(_QWORD *)(v0 + 5432);
  v24 = *(_QWORD *)(v0 + 5408);
  v25 = *(_QWORD *)(v0 + 5384);
  v26 = *(_QWORD *)(v0 + 5360);
  v27 = *(_QWORD *)(v0 + 5336);
  v28 = *(_QWORD *)(v0 + 5328);
  swift_task_dealloc(*(_QWORD *)(v0 + 5688));
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10003BBAC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)();

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 5848);
  v3[732] = a1;
  v3[733] = v1;
  swift_task_dealloc(v4);
  v5 = v3[679];
  v6 = v3[678];
  v7 = v3[677];
  v8 = v3[665];
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  if (v1)
    v9 = sub_10003BD7C;
  else
    v9 = sub_10003BC34;
  return swift_task_switch(v9, v8, 0);
}

uint64_t sub_10003BC34()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = type metadata accessor for Characteristic(0);
  v0[734] = v1;
  Identifier.init(stringLiteral:)("4F860001-943B-49EF-BED4-2F730304427A", 36, 2, v1);
  v2 = sub_100006C64(&qword_1010EC4A8, 255, (uint64_t (*)(uint64_t))&type metadata accessor for Service, (uint64_t)&protocol conformance descriptor for Service);
  v3 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of ServiceProtocol.subscript.getter[1]);
  v0[735] = v3;
  *v3 = v0;
  v3[1] = sub_10003BCE0;
  return dispatch thunk of ServiceProtocol.subscript.getter(v0[676], v0[730], v2);
}

uint64_t sub_10003BCE0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 5880);
  v3[736] = a1;
  v3[737] = v1;
  swift_task_dealloc(v4);
  v5 = v3[676];
  v6 = v3[675];
  v7 = v3[674];
  v8 = v3[665];
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  swift_release();
  if (v1)
    v9 = sub_10003C1A4;
  else
    v9 = sub_10003BF5C;
  return swift_task_switch(v9, v8, 0);
}

uint64_t sub_10003BD7C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v1 = *(_QWORD *)(v0 + 5624);
  v2 = *(_QWORD *)(v0 + 5568);
  v3 = *(_QWORD *)(v0 + 5512);
  swift_release();
  sub_1000126B0(v3, type metadata accessor for AccessoryProductInfo);
  sub_100004048(v2, (uint64_t *)&unk_10111C0A0);
  sub_1000126B0(v1, type metadata accessor for AccessoryMetadata);
  v4 = *(_QWORD *)(v0 + 5680);
  v5 = *(_QWORD *)(v0 + 5648);
  v6 = *(_QWORD *)(v0 + 5624);
  v7 = *(_QWORD *)(v0 + 5616);
  v8 = *(_QWORD *)(v0 + 5608);
  v9 = *(_QWORD *)(v0 + 5600);
  v10 = *(_QWORD *)(v0 + 5592);
  v11 = *(_QWORD *)(v0 + 5568);
  v12 = *(_QWORD *)(v0 + 5560);
  v14 = *(_QWORD *)(v0 + 5552);
  v15 = *(_QWORD *)(v0 + 5544);
  v16 = *(_QWORD *)(v0 + 5536);
  v17 = *(_QWORD *)(v0 + 5512);
  v18 = *(_QWORD *)(v0 + 5504);
  v19 = *(_QWORD *)(v0 + 5480);
  v20 = *(_QWORD *)(v0 + 5472);
  v21 = *(_QWORD *)(v0 + 5464);
  v22 = *(_QWORD *)(v0 + 5440);
  v23 = *(_QWORD *)(v0 + 5432);
  v24 = *(_QWORD *)(v0 + 5408);
  v25 = *(_QWORD *)(v0 + 5384);
  v26 = *(_QWORD *)(v0 + 5360);
  v27 = *(_QWORD *)(v0 + 5336);
  v28 = *(_QWORD *)(v0 + 5328);
  swift_task_dealloc(*(_QWORD *)(v0 + 5688));
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10003BF5C(uint64_t a1)
{
  _QWORD *v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v18;

  v2 = Logger.logObject.getter(a1);
  v3 = static os_log_type_t.default.getter(v2);
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Discovered FindMy services and Pairing characteristic.", v4, 2u);
    swift_slowDealloc(v4, -1, -1);
  }

  v5 = swift_retain();
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.info.getter(v6);
  v8 = os_log_type_enabled(v6, v7);
  v9 = v1[721];
  if (v8)
  {
    v10 = v1[719];
    v11 = (uint8_t *)swift_slowAlloc(12, -1);
    v12 = swift_slowAlloc(32, -1);
    v18 = v12;
    *(_DWORD *)v11 = 136315138;
    v1[650] = v9;
    v13 = sub_100006C64(&qword_1010EC508, 255, (uint64_t (*)(uint64_t))&type metadata accessor for Peripheral, (uint64_t)&protocol conformance descriptor for Peripheral);
    v14 = dispatch thunk of CustomStringConvertible.description.getter(v10, v13);
    v1[651] = sub_100016940(v14, v15, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 651, v1 + 652, v11 + 4, v11 + 12);
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Pairing peripheral: %s", v11, 0xCu);
    swift_arrayDestroy(v12, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v12, -1, -1);
    swift_slowDealloc(v11, -1, -1);

  }
  else
  {

    swift_release();
  }
  v16 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of PeripheralProtocol.pair()[1]);
  v1[738] = v16;
  *v16 = v1;
  v16[1] = sub_10003C384;
  return dispatch thunk of PeripheralProtocol.pair()(v1[719], v1[727]);
}

uint64_t sub_10003C1A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v1 = *(_QWORD *)(v0 + 5624);
  v2 = *(_QWORD *)(v0 + 5568);
  v3 = *(_QWORD *)(v0 + 5512);
  swift_release();
  sub_1000126B0(v3, type metadata accessor for AccessoryProductInfo);
  sub_100004048(v2, (uint64_t *)&unk_10111C0A0);
  sub_1000126B0(v1, type metadata accessor for AccessoryMetadata);
  v4 = *(_QWORD *)(v0 + 5680);
  v5 = *(_QWORD *)(v0 + 5648);
  v6 = *(_QWORD *)(v0 + 5624);
  v7 = *(_QWORD *)(v0 + 5616);
  v8 = *(_QWORD *)(v0 + 5608);
  v9 = *(_QWORD *)(v0 + 5600);
  v10 = *(_QWORD *)(v0 + 5592);
  v11 = *(_QWORD *)(v0 + 5568);
  v12 = *(_QWORD *)(v0 + 5560);
  v14 = *(_QWORD *)(v0 + 5552);
  v15 = *(_QWORD *)(v0 + 5544);
  v16 = *(_QWORD *)(v0 + 5536);
  v17 = *(_QWORD *)(v0 + 5512);
  v18 = *(_QWORD *)(v0 + 5504);
  v19 = *(_QWORD *)(v0 + 5480);
  v20 = *(_QWORD *)(v0 + 5472);
  v21 = *(_QWORD *)(v0 + 5464);
  v22 = *(_QWORD *)(v0 + 5440);
  v23 = *(_QWORD *)(v0 + 5432);
  v24 = *(_QWORD *)(v0 + 5408);
  v25 = *(_QWORD *)(v0 + 5384);
  v26 = *(_QWORD *)(v0 + 5360);
  v27 = *(_QWORD *)(v0 + 5336);
  v28 = *(_QWORD *)(v0 + 5328);
  swift_task_dealloc(*(_QWORD *)(v0 + 5688));
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10003C384()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 5904);
  *(_QWORD *)(*v1 + 5912) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_10003CA28;
  else
    v4 = sub_10003C3E8;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 5320), 0);
}

uint64_t sub_10003C3E8()
{
  _QWORD *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint8_t *v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41[2];

  v1 = v0 + 200;
  v2 = (uint64_t)(v0 + 266);
  v3 = swift_retain();
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter(v4);
  v39 = v0 + 365;
  v40 = (uint64_t)(v0 + 266);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = v0[721];
    v38 = v0[719];
    v7 = (uint8_t *)swift_slowAlloc(12, -1);
    v8 = swift_slowAlloc(32, -1);
    v41[0] = v8;
    *(_DWORD *)v7 = 136315138;
    v0[648] = v6;
    v1 = v0 + 200;
    v9 = sub_100006C64(&qword_1010EC508, 255, (uint64_t (*)(uint64_t))&type metadata accessor for Peripheral, (uint64_t)&protocol conformance descriptor for Peripheral);
    v10 = dispatch thunk of CustomStringConvertible.description.getter(v38, v9);
    v0[649] = sub_100016940(v10, v11, v41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 649, v0 + 650, v7 + 4, v7 + 12);
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Paired peripheral: %s", v7, 0xCu);
    swift_arrayDestroy(v8, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1, -1);
    v12 = v7;
    v2 = (uint64_t)(v0 + 266);
    swift_slowDealloc(v12, -1, -1);

  }
  else
  {

    v13 = swift_release();
  }
  v14 = BinaryEncoder.init()(v13);
  BinaryDecoder.init()(v14);
  sub_100057200((uint64_t)(v0 + 233));
  sub_100057230(v0 + 233, v1);
  SharingCircleWildAdvertisementKey.init(key:)(v1);
  sub_100057230(v0 + 233, v0 + 299);
  sub_100005CF0((uint64_t)v1, v2, &qword_1010EC4B0);
  v15 = v0[739];
  sub_10005726C((uint64_t)(v0 + 299), (void (*)(void))sub_10001BBBC);
  v16 = sub_10005726C((uint64_t)(v0 + 299), (void (*)(void))sub_10001BBBC);
  v17 = Logger.logObject.getter(v16);
  v18 = static os_log_type_t.default.getter(v17);
  if (os_log_type_enabled(v17, v18))
  {
    v19 = (uint8_t *)swift_slowAlloc(12, -1);
    v20 = swift_slowAlloc(32, -1);
    v41[0] = v20;
    *(_DWORD *)v19 = 136315138;
    sub_100057230(v0 + 299, v0 + 35);
    sub_10005726C((uint64_t)(v0 + 299), (void (*)(void))sub_10001BBBC);
    v21 = String.init<A>(describing:)(v0 + 35, &type metadata for AirPodsSWPairingCommand);
    v0[647] = sub_100016940(v21, v22, v41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 647, v0 + 648, v19 + 4, v19 + 12);
    swift_bridgeObjectRelease();
    sub_10005726C((uint64_t)(v0 + 299), (void (*)(void))sub_10001BC14);
    sub_10005726C((uint64_t)(v0 + 299), (void (*)(void))sub_10001BC14);
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "Sending command: %s", v19, 0xCu);
    swift_arrayDestroy(v20, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v20, -1, -1);
    swift_slowDealloc(v19, -1, -1);
  }
  else
  {
    sub_10005726C((uint64_t)(v0 + 299), (void (*)(void))sub_10001BC14);
    sub_10005726C((uint64_t)(v0 + 299), (void (*)(void))sub_10001BC14);
  }

  sub_100057230(v0 + 299, v39);
  v23 = sub_100057604();
  v0[740] = v23;
  v0[741] = BinaryEncoder.encode<A>(_:)(v39, &type metadata for AirPodsSWPairingCommand, v23);
  v0[742] = v24;
  if (v15)
  {
    v25 = (uint64_t)(v0 + 332);
    sub_10005726C((uint64_t)(v0 + 299), (void (*)(void))sub_10001BC14);
    swift_errorRetain(v15);
    v26 = swift_errorRetain(v15);
    v27 = Logger.logObject.getter(v26);
    v28 = static os_log_type_t.error.getter(v27);
    if (os_log_type_enabled(v27, v28))
    {
      v29 = (uint8_t *)swift_slowAlloc(12, -1);
      v30 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v29 = 138543362;
      swift_errorRetain(v15);
      v31 = _swift_stdlib_bridgeErrorToNSError(v15);
      v0[640] = v31;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 640, v0 + 641, v29 + 4, v29 + 12);
      *v30 = v31;
      swift_errorRelease(v15);
      swift_errorRelease(v15);
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "Pairing command error: %{public}@", v29, 0xCu);
      v32 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
      swift_arrayDestroy(v30, 1, v32);
      swift_slowDealloc(v30, -1, -1);
      v33 = v29;
      v25 = (uint64_t)(v0 + 332);
      swift_slowDealloc(v33, -1, -1);

      sub_100057648(v40);
      swift_errorRelease(0);
    }
    else
    {
      sub_100057648(v40);
      swift_errorRelease(0);
      swift_errorRelease(v15);
      swift_errorRelease(v15);

    }
    sub_10005780C((uint64_t)(v0 + 398));
    sub_100005CF0((uint64_t)(v0 + 398), v25, &qword_1010EC4B0);
    v0[752] = v15;
    v37 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of PeripheralProtocol.cancelConnection()[1]);
    v0[753] = v37;
    *v37 = v0;
    v37[1] = sub_10003D850;
    return dispatch thunk of PeripheralProtocol.cancelConnection()(v0[719], v0[727]);
  }
  else
  {
    v34 = sub_100006C64(&qword_1010EC4C0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for Characteristic, (uint64_t)&protocol conformance descriptor for Characteristic);
    v35 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of CharacteristicProtocol.mtu.getter[1]);
    v0[743] = v35;
    *v35 = v0;
    v35[1] = sub_10003CC14;
    return dispatch thunk of CharacteristicProtocol.mtu.getter(v0[734], v34);
  }
}

uint64_t sub_10003CA28()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v1 = *(_QWORD *)(v0 + 5624);
  v2 = *(_QWORD *)(v0 + 5568);
  v3 = *(_QWORD *)(v0 + 5512);
  swift_release();
  swift_release();
  sub_1000126B0(v3, type metadata accessor for AccessoryProductInfo);
  sub_100004048(v2, (uint64_t *)&unk_10111C0A0);
  sub_1000126B0(v1, type metadata accessor for AccessoryMetadata);
  v4 = *(_QWORD *)(v0 + 5680);
  v5 = *(_QWORD *)(v0 + 5648);
  v6 = *(_QWORD *)(v0 + 5624);
  v7 = *(_QWORD *)(v0 + 5616);
  v8 = *(_QWORD *)(v0 + 5608);
  v9 = *(_QWORD *)(v0 + 5600);
  v10 = *(_QWORD *)(v0 + 5592);
  v11 = *(_QWORD *)(v0 + 5568);
  v12 = *(_QWORD *)(v0 + 5560);
  v14 = *(_QWORD *)(v0 + 5552);
  v15 = *(_QWORD *)(v0 + 5544);
  v16 = *(_QWORD *)(v0 + 5536);
  v17 = *(_QWORD *)(v0 + 5512);
  v18 = *(_QWORD *)(v0 + 5504);
  v19 = *(_QWORD *)(v0 + 5480);
  v20 = *(_QWORD *)(v0 + 5472);
  v21 = *(_QWORD *)(v0 + 5464);
  v22 = *(_QWORD *)(v0 + 5440);
  v23 = *(_QWORD *)(v0 + 5432);
  v24 = *(_QWORD *)(v0 + 5408);
  v25 = *(_QWORD *)(v0 + 5384);
  v26 = *(_QWORD *)(v0 + 5360);
  v27 = *(_QWORD *)(v0 + 5336);
  v28 = *(_QWORD *)(v0 + 5328);
  swift_task_dealloc(*(_QWORD *)(v0 + 5688));
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10003CC14(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 5944);
  *(_QWORD *)(*v2 + 5952) = v1;
  swift_task_dealloc(v5);
  v6 = *(_QWORD *)(v4 + 5320);
  if (v1)
  {
    v7 = sub_10003CE00;
  }
  else
  {
    *(_QWORD *)(v4 + 5960) = a1;
    v7 = sub_10003CC8C;
  }
  return swift_task_switch(v7, v6, 0);
}

uint64_t sub_10003CC8C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  char *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v1 = fragment(data:mtu:)(v0[741], v0[742], v0[745]);
  sub_100057230(v0 + 299, v0 + 464);
  if (sub_10005784C((uint64_t)(v0 + 464)) == 5)
  {
    v2 = v0[736];
    sub_10005A21C((uint64_t)(v0 + 464));
    v3 = swift_allocObject(&unk_1010506E0, 32, 7);
    v0[746] = v3;
    *(_QWORD *)(v3 + 16) = v2;
    *(_QWORD *)(v3 + 24) = v1;
    v4 = async function pointer to withTimeout<A>(_:block:)[1];
    swift_retain();
    v5 = (_QWORD *)swift_task_alloc(v4);
    v0[747] = v5;
    *v5 = v0;
    v5[1] = sub_10003D020;
    v6 = (char *)&type metadata for () + 8;
    v7 = &unk_1010EC4F0;
    v8 = v3;
  }
  else
  {
    v9 = v0[736];
    v10 = swift_allocObject(&unk_101050690, 32, 7);
    v0[749] = v10;
    *(_QWORD *)(v10 + 16) = v9;
    *(_QWORD *)(v10 + 24) = v1;
    v11 = async function pointer to withTimeout<A>(_:block:)[1];
    swift_retain();
    v12 = (_QWORD *)swift_task_alloc(v11);
    v0[750] = v12;
    *v12 = v0;
    v12[1] = sub_10003D094;
    v7 = &unk_1010EC4D0;
    v6 = (char *)&type metadata for Data;
    v5 = v0 + 635;
    v8 = v10;
  }
  return withTimeout<A>(_:block:)(v5, 0x40AAD21B3B700000, 3, v7, v8, v6);
}

uint64_t sub_10003CE00()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  sub_10001BC14(v0[741], v0[742]);
  sub_10005726C((uint64_t)(v0 + 299), (void (*)(void))sub_10001BC14);
  v1 = v0[744];
  swift_errorRetain(v1);
  v2 = swift_errorRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v5 = 138543362;
    swift_errorRetain(v1);
    v7 = _swift_stdlib_bridgeErrorToNSError(v1);
    v0[640] = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 640, v0 + 641, v5 + 4, v5 + 12);
    *v6 = v7;
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Pairing command error: %{public}@", v5, 0xCu);
    v8 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v6, 1, v8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);

    sub_100057648((uint64_t)(v0 + 266));
    swift_errorRelease(0);
  }
  else
  {
    sub_100057648((uint64_t)(v0 + 266));
    swift_errorRelease(0);
    swift_errorRelease(v1);
    swift_errorRelease(v1);

  }
  sub_10005780C((uint64_t)(v0 + 398));
  sub_100005CF0((uint64_t)(v0 + 398), (uint64_t)(v0 + 332), &qword_1010EC4B0);
  v0[752] = v1;
  v9 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of PeripheralProtocol.cancelConnection()[1]);
  v0[753] = v9;
  *v9 = v0;
  v9[1] = sub_10003D850;
  return dispatch thunk of PeripheralProtocol.cancelConnection()(v0[719], v0[727]);
}

uint64_t sub_10003D020()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 5976);
  *(_QWORD *)(*v1 + 5984) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = *(_QWORD *)(v2 + 5320);
    v5 = sub_10003D620;
  }
  else
  {
    v6 = *(_QWORD *)(v2 + 5320);
    swift_release(*(_QWORD *)(v2 + 5968));
    v5 = sub_10003D108;
    v4 = v6;
  }
  return swift_task_switch(v5, v4, 0);
}

uint64_t sub_10003D094()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 6000);
  *(_QWORD *)(*v1 + 6008) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = *(_QWORD *)(v2 + 5320);
    v5 = sub_10003E88C;
  }
  else
  {
    v6 = *(_QWORD *)(v2 + 5320);
    swift_release();
    v5 = sub_10003E21C;
    v4 = v6;
  }
  return swift_task_switch(v5, v4, 0);
}

uint64_t sub_10003D108()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  int v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  BOOL v19;
  unint64_t v20;
  uint64_t v21;
  uint8_t *v22;
  uint8_t *v23;
  uint64_t v24;
  void (*v25)(uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  _QWORD *v39;
  void (*v41)(char *, uint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v1 = v0 + 808;
  sub_100057230((const void *)(v0 + 2392), (void *)(v0 + 1336));
  v2 = (uint64_t *)sub_10005A21C(v0 + 1336);
  v3 = *v2;
  v4 = v2[1];
  sub_10001BBBC(*v2, v4);
  v5 = sub_10001BBBC(v3, v4);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.info.getter(v6);
  v45 = v0 + 2392;
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v42 = swift_slowAlloc(32, -1);
    v46 = v42;
    *(_DWORD *)v8 = 136315138;
    sub_100057230((const void *)(v0 + 2392), (void *)(v0 + 544));
    sub_10001BBBC(v3, v4);
    v9 = String.init<A>(describing:)(v0 + 544, &type metadata for AirPodsSWPairingCommand);
    *(_QWORD *)(v0 + 5160) = sub_100016940(v9, v10, &v46);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 5160, v0 + 5168, v8 + 4, v8 + 12);
    swift_bridgeObjectRelease();
    sub_10005726C(v0 + 2392, (void (*)(void))sub_10001BC14);
    sub_10005726C(v0 + 2392, (void (*)(void))sub_10001BC14);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Sent final command: %s", v8, 0xCu);
    swift_arrayDestroy(v42, 1, (char *)&type metadata for Any + 8);
    v1 = v0 + 808;
    swift_slowDealloc(v42, -1, -1);
    swift_slowDealloc(v8, -1, -1);

    sub_100057648(v0 + 2128);
  }
  else
  {
    sub_100057648(v0 + 2128);
    sub_10005726C(v0 + 2392, (void (*)(void))sub_10001BC14);
    sub_10005726C(v0 + 2392, (void (*)(void))sub_10001BC14);

  }
  *(_BYTE *)(*(_QWORD *)(v0 + 5320) + 176) = 9;
  sub_10005780C(v1);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.default.getter(v12);
  if (os_log_type_enabled(v12, v13))
  {
    v14 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v14 = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "Pairing completed succesfully!", v14, 2u);
    swift_slowDealloc(v14, -1, -1);
  }
  v15 = *(unsigned __int8 *)(v0 + 6125);

  v17 = Logger.logObject.getter(v16);
  v18 = static os_log_type_t.default.getter(v17);
  v19 = os_log_type_enabled(v17, v18);
  if (v15 == 1)
  {
    v20 = *(_QWORD *)(v0 + 5936);
    v21 = *(_QWORD *)(v0 + 5928);
    if (v19)
    {
      v22 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v22 = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Sent pairing complete, skip ackRequest for standalone.", v22, 2u);
      swift_slowDealloc(v22, -1, -1);
      sub_10001BC14(v21, v20);

      sub_10005726C(v45, (void (*)(void))sub_10001BC14);
    }
    else
    {
      sub_10005726C(v45, (void (*)(void))sub_10001BC14);
      sub_10001BC14(v21, v20);

    }
  }
  else
  {
    if (v19)
    {
      v23 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v23 = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Sent pairing complete, continue with ackRequest.", v23, 2u);
      swift_slowDealloc(v23, -1, -1);
    }
    v43 = *(_QWORD *)(v0 + 5928);
    v44 = *(_QWORD *)(v0 + 5936);
    v41 = *(void (**)(char *, uint64_t, uint64_t))(v0 + 5736);
    v24 = *(unsigned __int8 *)(v0 + 6120);
    v25 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 5704);
    v26 = *(_QWORD *)(v0 + 5680);
    v27 = *(_QWORD *)(v0 + 5672);
    v28 = *(_QWORD *)(v0 + 5656);
    v29 = *(_QWORD *)(v0 + 5336);
    v30 = *(_QWORD *)(v0 + 5320);
    v31 = *(_QWORD *)(v0 + 5296);

    v32 = v24 | 7;
    v33 = type metadata accessor for TaskPriority(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 56))(v29, 1, 1, v33);
    v25(v26, v31, v28);
    v35 = sub_100006C64(&qword_1010EC410, v34, (uint64_t (*)(uint64_t))type metadata accessor for AirPodsLEPairingService, (uint64_t)&unk_100E229E4);
    v36 = (v24 + 40) & ~v24;
    v37 = (char *)swift_allocObject(&unk_101050708, v36 + v27, v32);
    *((_QWORD *)v37 + 2) = v30;
    *((_QWORD *)v37 + 3) = v35;
    *((_QWORD *)v37 + 4) = v30;
    v41(&v37[v36], v26, v28);
    swift_retain_n(v30, 2);
    v38 = sub_100691AC0(v29, (uint64_t)&unk_1010EC500, (uint64_t)v37);
    sub_10005726C(v45, (void (*)(void))sub_10001BC14);
    swift_release(v38);
    sub_10001BC14(v43, v44);
    v1 = v0 + 808;
  }
  sub_100005CF0(v1, v0 + 2656, &qword_1010EC4B0);
  *(_QWORD *)(v0 + 6016) = 0;
  v39 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of PeripheralProtocol.cancelConnection()[1]);
  *(_QWORD *)(v0 + 6024) = v39;
  *v39 = v0;
  v39[1] = sub_10003D850;
  return dispatch thunk of PeripheralProtocol.cancelConnection()(*(_QWORD *)(v0 + 5752), *(_QWORD *)(v0 + 5816));
}

uint64_t sub_10003D620()
{
  _QWORD *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v1 = v0[746];
  v2 = v0[742];
  v3 = v0[741];
  sub_10005726C((uint64_t)(v0 + 299), (void (*)(void))sub_10001BC14);
  sub_10001BC14(v3, v2);
  swift_release(v1);
  v4 = v0[748];
  swift_errorRetain(v4);
  v5 = swift_errorRetain(v4);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.error.getter(v6);
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v8 = 138543362;
    swift_errorRetain(v4);
    v10 = _swift_stdlib_bridgeErrorToNSError(v4);
    v0[640] = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 640, v0 + 641, v8 + 4, v8 + 12);
    *v9 = v10;
    swift_errorRelease(v4);
    swift_errorRelease(v4);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Pairing command error: %{public}@", v8, 0xCu);
    v11 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v9, 1, v11);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

    sub_100057648((uint64_t)(v0 + 266));
    swift_errorRelease(0);
  }
  else
  {
    sub_100057648((uint64_t)(v0 + 266));
    swift_errorRelease(0);
    swift_errorRelease(v4);
    swift_errorRelease(v4);

  }
  sub_10005780C((uint64_t)(v0 + 398));
  sub_100005CF0((uint64_t)(v0 + 398), (uint64_t)(v0 + 332), &qword_1010EC4B0);
  v0[752] = v4;
  v12 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of PeripheralProtocol.cancelConnection()[1]);
  v0[753] = v12;
  *v12 = v0;
  v12[1] = sub_10003D850;
  return dispatch thunk of PeripheralProtocol.cancelConnection()(v0[719], v0[727]);
}

uint64_t sub_10003D850()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v5;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 6024);
  v3 = *(_QWORD **)v1;
  v3[754] = v0;
  swift_task_dealloc(v2);
  if (v0)
    return swift_task_switch(sub_10003D950, v3[665], 0);
  v5 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of PeripheralProtocol.unpair()[1]);
  v3[755] = v5;
  *v5 = v3;
  v5[1] = sub_10003D8EC;
  return dispatch thunk of PeripheralProtocol.unpair()(v3[719], v3[727]);
}

uint64_t sub_10003D8EC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 6040);
  *(_QWORD *)(*v1 + 6048) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_10003DFD8;
  else
    v4 = sub_10003DB94;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 5320), 0);
}

uint64_t sub_10003D950()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v1 = *(_QWORD *)(v0 + 6016);
  v2 = *(_QWORD *)(v0 + 5768);
  v34 = *(_QWORD *)(v0 + 5568);
  v36 = *(_QWORD *)(v0 + 5624);
  v32 = *(_QWORD *)(v0 + 5512);
  v3 = *(_QWORD *)(v0 + 5384);
  v4 = *(_QWORD *)(v0 + 5376);
  v5 = *(_QWORD *)(v0 + 5368);
  v6 = *(_QWORD *)(v0 + 5360);
  v7 = *(_QWORD *)(v0 + 5352);
  v8 = *(_QWORD *)(v0 + 5344);
  swift_release(*(_QWORD *)(v0 + 5888));
  swift_release(v2);
  swift_errorRelease(v1);
  sub_100057648(v0 + 2656);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  sub_1000126B0(v32, type metadata accessor for AccessoryProductInfo);
  sub_100004048(v34, (uint64_t *)&unk_10111C0A0);
  sub_1000126B0(v36, type metadata accessor for AccessoryMetadata);
  v9 = *(_QWORD *)(v0 + 5680);
  v10 = *(_QWORD *)(v0 + 5648);
  v11 = *(_QWORD *)(v0 + 5624);
  v12 = *(_QWORD *)(v0 + 5616);
  v13 = *(_QWORD *)(v0 + 5608);
  v14 = *(_QWORD *)(v0 + 5600);
  v15 = *(_QWORD *)(v0 + 5592);
  v16 = *(_QWORD *)(v0 + 5568);
  v17 = *(_QWORD *)(v0 + 5560);
  v19 = *(_QWORD *)(v0 + 5552);
  v20 = *(_QWORD *)(v0 + 5544);
  v21 = *(_QWORD *)(v0 + 5536);
  v22 = *(_QWORD *)(v0 + 5512);
  v23 = *(_QWORD *)(v0 + 5504);
  v24 = *(_QWORD *)(v0 + 5480);
  v25 = *(_QWORD *)(v0 + 5472);
  v26 = *(_QWORD *)(v0 + 5464);
  v27 = *(_QWORD *)(v0 + 5440);
  v28 = *(_QWORD *)(v0 + 5432);
  v29 = *(_QWORD *)(v0 + 5408);
  v30 = *(_QWORD *)(v0 + 5384);
  v31 = *(_QWORD *)(v0 + 5360);
  v33 = *(_QWORD *)(v0 + 5336);
  v35 = *(_QWORD *)(v0 + 5328);
  swift_task_dealloc(*(_QWORD *)(v0 + 5688));
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v33);
  swift_task_dealloc(v35);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10003DB94()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;

  v67 = v0 + 2656;
  v1 = *(_QWORD *)(v0 + 6016);
  v2 = *(_QWORD *)(v0 + 5888);
  v3 = *(_QWORD *)(v0 + 5768);
  if (v1)
  {
    v61 = *(_QWORD *)(v0 + 5568);
    v64 = *(_QWORD *)(v0 + 5624);
    v55 = *(_QWORD *)(v0 + 5384);
    v58 = *(_QWORD *)(v0 + 5512);
    v4 = *(_QWORD *)(v0 + 5376);
    v5 = *(_QWORD *)(v0 + 5368);
    v6 = *(_QWORD *)(v0 + 5360);
    v7 = *(_QWORD *)(v0 + 5352);
    v8 = *(_QWORD *)(v0 + 5344);
    v9 = swift_errorRetain(v1);
    swift_willThrow(v9);
    swift_release(v2);
    swift_release(v3);
    swift_errorRelease(v1);
    sub_100057648(v67);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v55, v5);
    sub_1000126B0(v58, type metadata accessor for AccessoryProductInfo);
    sub_100004048(v61, (uint64_t *)&unk_10111C0A0);
    sub_1000126B0(v64, type metadata accessor for AccessoryMetadata);
    v10 = *(_QWORD *)(v0 + 5680);
    v11 = *(_QWORD *)(v0 + 5648);
    v12 = *(_QWORD *)(v0 + 5624);
    v13 = *(_QWORD *)(v0 + 5616);
    v14 = *(_QWORD *)(v0 + 5608);
    v15 = *(_QWORD *)(v0 + 5600);
    v16 = *(_QWORD *)(v0 + 5592);
    v17 = *(_QWORD *)(v0 + 5568);
    v33 = *(_QWORD *)(v0 + 5560);
    v35 = *(_QWORD *)(v0 + 5552);
    v37 = *(_QWORD *)(v0 + 5544);
    v39 = *(_QWORD *)(v0 + 5536);
    v41 = *(_QWORD *)(v0 + 5512);
    v43 = *(_QWORD *)(v0 + 5504);
    v45 = *(_QWORD *)(v0 + 5480);
    v47 = *(_QWORD *)(v0 + 5472);
    v49 = *(_QWORD *)(v0 + 5464);
    v51 = *(_QWORD *)(v0 + 5440);
    v53 = *(_QWORD *)(v0 + 5432);
    v56 = *(_QWORD *)(v0 + 5408);
    v59 = *(_QWORD *)(v0 + 5384);
    v62 = *(_QWORD *)(v0 + 5360);
    v65 = *(_QWORD *)(v0 + 5336);
    v68 = *(_QWORD *)(v0 + 5328);
    swift_task_dealloc(*(_QWORD *)(v0 + 5688));
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v33);
    swift_task_dealloc(v35);
    swift_task_dealloc(v37);
    swift_task_dealloc(v39);
    swift_task_dealloc(v41);
    swift_task_dealloc(v43);
    swift_task_dealloc(v45);
    swift_task_dealloc(v47);
    swift_task_dealloc(v49);
    swift_task_dealloc(v51);
    swift_task_dealloc(v53);
    swift_task_dealloc(v56);
    swift_task_dealloc(v59);
    swift_task_dealloc(v62);
    swift_task_dealloc(v65);
    swift_task_dealloc(v68);
  }
  else
  {
    v28 = *(_QWORD *)(v0 + 5688);
    v29 = *(_QWORD *)(v0 + 5680);
    v30 = *(_QWORD *)(v0 + 5648);
    v31 = *(_QWORD *)(v0 + 5616);
    v32 = *(_QWORD *)(v0 + 5608);
    v34 = *(_QWORD *)(v0 + 5600);
    v26 = *(_QWORD *)(v0 + 5568);
    v27 = *(_QWORD *)(v0 + 5624);
    v36 = *(_QWORD *)(v0 + 5592);
    v38 = *(_QWORD *)(v0 + 5560);
    v40 = *(_QWORD *)(v0 + 5552);
    v42 = *(_QWORD *)(v0 + 5544);
    v18 = *(_QWORD *)(v0 + 5512);
    v44 = *(_QWORD *)(v0 + 5536);
    v46 = *(_QWORD *)(v0 + 5504);
    v48 = *(_QWORD *)(v0 + 5480);
    v50 = *(_QWORD *)(v0 + 5472);
    v52 = *(_QWORD *)(v0 + 5464);
    v54 = *(_QWORD *)(v0 + 5440);
    v57 = *(_QWORD *)(v0 + 5432);
    v60 = *(_QWORD *)(v0 + 5408);
    v19 = *(_QWORD *)(v0 + 5384);
    v20 = *(_QWORD *)(v0 + 5376);
    v21 = *(_QWORD *)(v0 + 5368);
    v22 = *(_QWORD *)(v0 + 5360);
    v23 = *(_QWORD *)(v0 + 5352);
    v24 = *(_QWORD *)(v0 + 5344);
    v63 = *(_QWORD *)(v0 + 5336);
    v66 = *(_QWORD *)(v0 + 5328);
    swift_release(v2);
    swift_release(v3);
    sub_100057648(v67);
    (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v22, v24);
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v19, v21);
    sub_1000126B0(v18, type metadata accessor for AccessoryProductInfo);
    sub_100004048(v26, (uint64_t *)&unk_10111C0A0);
    sub_1000126B0(v27, type metadata accessor for AccessoryMetadata);
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    swift_task_dealloc(v27);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v34);
    swift_task_dealloc(v36);
    swift_task_dealloc(v26);
    swift_task_dealloc(v38);
    swift_task_dealloc(v40);
    swift_task_dealloc(v42);
    swift_task_dealloc(v44);
    swift_task_dealloc(v18);
    swift_task_dealloc(v46);
    swift_task_dealloc(v48);
    swift_task_dealloc(v50);
    swift_task_dealloc(v52);
    swift_task_dealloc(v54);
    swift_task_dealloc(v57);
    swift_task_dealloc(v60);
    swift_task_dealloc(v19);
    swift_task_dealloc(v22);
    swift_task_dealloc(v63);
    swift_task_dealloc(v66);
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10003DFD8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v1 = *(_QWORD *)(v0 + 6016);
  v2 = *(_QWORD *)(v0 + 5768);
  v34 = *(_QWORD *)(v0 + 5568);
  v36 = *(_QWORD *)(v0 + 5624);
  v32 = *(_QWORD *)(v0 + 5512);
  v3 = *(_QWORD *)(v0 + 5384);
  v4 = *(_QWORD *)(v0 + 5376);
  v5 = *(_QWORD *)(v0 + 5368);
  v6 = *(_QWORD *)(v0 + 5360);
  v7 = *(_QWORD *)(v0 + 5352);
  v8 = *(_QWORD *)(v0 + 5344);
  swift_release(*(_QWORD *)(v0 + 5888));
  swift_release(v2);
  swift_errorRelease(v1);
  sub_100057648(v0 + 2656);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  sub_1000126B0(v32, type metadata accessor for AccessoryProductInfo);
  sub_100004048(v34, (uint64_t *)&unk_10111C0A0);
  sub_1000126B0(v36, type metadata accessor for AccessoryMetadata);
  v9 = *(_QWORD *)(v0 + 5680);
  v10 = *(_QWORD *)(v0 + 5648);
  v11 = *(_QWORD *)(v0 + 5624);
  v12 = *(_QWORD *)(v0 + 5616);
  v13 = *(_QWORD *)(v0 + 5608);
  v14 = *(_QWORD *)(v0 + 5600);
  v15 = *(_QWORD *)(v0 + 5592);
  v16 = *(_QWORD *)(v0 + 5568);
  v17 = *(_QWORD *)(v0 + 5560);
  v19 = *(_QWORD *)(v0 + 5552);
  v20 = *(_QWORD *)(v0 + 5544);
  v21 = *(_QWORD *)(v0 + 5536);
  v22 = *(_QWORD *)(v0 + 5512);
  v23 = *(_QWORD *)(v0 + 5504);
  v24 = *(_QWORD *)(v0 + 5480);
  v25 = *(_QWORD *)(v0 + 5472);
  v26 = *(_QWORD *)(v0 + 5464);
  v27 = *(_QWORD *)(v0 + 5440);
  v28 = *(_QWORD *)(v0 + 5432);
  v29 = *(_QWORD *)(v0 + 5408);
  v30 = *(_QWORD *)(v0 + 5384);
  v31 = *(_QWORD *)(v0 + 5360);
  v33 = *(_QWORD *)(v0 + 5336);
  v35 = *(_QWORD *)(v0 + 5328);
  swift_task_dealloc(*(_QWORD *)(v0 + 5688));
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v33);
  swift_task_dealloc(v35);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10003E21C()
{
  _QWORD *v0;
  const void *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35[2];

  v1 = v0 + 530;
  v34 = v0 + 640;
  v2 = v0[635];
  v0[757] = v2;
  v3 = v0[636];
  v0[758] = v3;
  sub_10005726C((uint64_t)(v0 + 299), (void (*)(void))sub_10001BBBC);
  v4 = sub_10005726C((uint64_t)(v0 + 299), (void (*)(void))sub_10001BBBC);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.info.getter(v5);
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(12, -1);
    v8 = swift_slowAlloc(32, -1);
    v35[0] = v8;
    *(_DWORD *)v7 = 136315138;
    sub_100057230(v0 + 299, v0 + 431);
    sub_10005726C((uint64_t)(v0 + 299), (void (*)(void))sub_10001BBBC);
    v9 = String.init<A>(describing:)(v0 + 431, &type metadata for AirPodsSWPairingCommand);
    v0[641] = sub_100016940(v9, v10, v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 641, v0 + 642, v7 + 4, v7 + 12);
    swift_bridgeObjectRelease();
    sub_10005726C((uint64_t)(v0 + 299), (void (*)(void))sub_10001BC14);
    v1 = v0 + 530;
    sub_10005726C((uint64_t)(v0 + 299), (void (*)(void))sub_10001BC14);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Sent command: %s", v7, 0xCu);
    swift_arrayDestroy(v8, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v7, -1, -1);
  }
  else
  {
    sub_10005726C((uint64_t)(v0 + 299), (void (*)(void))sub_10001BC14);
    sub_10005726C((uint64_t)(v0 + 299), (void (*)(void))sub_10001BC14);
  }

  v11 = v0[751];
  v12 = sub_1000578E0();
  BinaryDecoder.decode<A>(_:from:)(&type metadata for AirPodsSWPairingCommand, v2, v3, &type metadata for AirPodsSWPairingCommand, v12);
  if (v11)
  {
    v13 = v0[742];
    v14 = v0[741];
    sub_10001BC14(v2, v3);
    sub_10001BC14(v14, v13);
    sub_10005726C((uint64_t)(v0 + 299), (void (*)(void))sub_10001BC14);
    swift_errorRetain(v11);
    v15 = swift_errorRetain(v11);
    v16 = Logger.logObject.getter(v15);
    v17 = static os_log_type_t.error.getter(v16);
    if (os_log_type_enabled(v16, v17))
    {
      v18 = (uint8_t *)swift_slowAlloc(12, -1);
      v19 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v18 = 138543362;
      swift_errorRetain(v11);
      v20 = _swift_stdlib_bridgeErrorToNSError(v11);
      v0[640] = v20;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v34, v0 + 641, v18 + 4, v18 + 12);
      *v19 = v20;
      swift_errorRelease(v11);
      swift_errorRelease(v11);
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Pairing command error: %{public}@", v18, 0xCu);
      v21 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
      swift_arrayDestroy(v19, 1, v21);
      swift_slowDealloc(v19, -1, -1);
      swift_slowDealloc(v18, -1, -1);

      sub_100057648((uint64_t)(v0 + 266));
      swift_errorRelease(0);
    }
    else
    {
      sub_100057648((uint64_t)(v0 + 266));
      swift_errorRelease(0);
      swift_errorRelease(v11);
      swift_errorRelease(v11);

    }
    sub_10005780C((uint64_t)(v0 + 398));
    sub_100005CF0((uint64_t)(v0 + 398), (uint64_t)(v0 + 332), &qword_1010EC4B0);
    v0[752] = v11;
    v29 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of PeripheralProtocol.cancelConnection()[1]);
    v0[753] = v29;
    *v29 = v0;
    v29[1] = sub_10003D850;
    return dispatch thunk of PeripheralProtocol.cancelConnection()(v0[719], v0[727]);
  }
  else
  {
    sub_100057230(v1, v0 + 563);
    sub_10005726C((uint64_t)(v0 + 563), (void (*)(void))sub_10001BBBC);
    v22 = sub_10005726C((uint64_t)(v0 + 563), (void (*)(void))sub_10001BBBC);
    v23 = Logger.logObject.getter(v22);
    v24 = static os_log_type_t.default.getter(v23);
    if (os_log_type_enabled(v23, v24))
    {
      v25 = (uint8_t *)swift_slowAlloc(12, -1);
      v26 = swift_slowAlloc(32, -1);
      v35[0] = v26;
      *(_DWORD *)v25 = 136315138;
      sub_100057230(v0 + 563, v0 + 134);
      sub_10005726C((uint64_t)(v0 + 563), (void (*)(void))sub_10001BBBC);
      v27 = String.init<A>(describing:)(v0 + 134, &type metadata for AirPodsSWPairingCommand);
      v0[639] = sub_100016940(v27, v28, v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 639, v34, v25 + 4, v25 + 12);
      swift_bridgeObjectRelease();
      sub_10005726C((uint64_t)(v0 + 563), (void (*)(void))sub_10001BC14);
      sub_10005726C((uint64_t)(v0 + 563), (void (*)(void))sub_10001BC14);
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Received response: %s", v25, 0xCu);
      swift_arrayDestroy(v26, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v26, -1, -1);
      swift_slowDealloc(v25, -1, -1);
    }
    else
    {
      sub_10005726C((uint64_t)(v0 + 563), (void (*)(void))sub_10001BC14);
      sub_10005726C((uint64_t)(v0 + 563), (void (*)(void))sub_10001BC14);
    }

    v31 = v0[740];
    v0[632] = &type metadata for AirPodsSWPairingCommand;
    v0[633] = v12;
    v0[634] = v31;
    v32 = swift_allocObject(&unk_1010506B8, 280, 7);
    v0[629] = v32;
    sub_100057230(v0 + 563, (void *)(v32 + 16));
    sub_10005726C((uint64_t)(v0 + 563), (void (*)(void))sub_10001BBBC);
    v33 = (_QWORD *)swift_task_alloc(dword_1010EC4E4);
    v0[759] = v33;
    *v33 = v0;
    v33[1] = sub_10003EABC;
    return sub_100042F34((uint64_t)(v0 + 2), v0[721], (uint64_t)(v0 + 629), v0[662]);
  }
}

uint64_t sub_10003E88C()
{
  _QWORD *v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v1 = v0[742];
  v2 = v0[741];
  sub_10005726C((uint64_t)(v0 + 299), (void (*)(void))sub_10001BC14);
  sub_10001BC14(v2, v1);
  swift_release();
  v3 = v0[751];
  swift_errorRetain(v3);
  v4 = swift_errorRetain(v3);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.error.getter(v5);
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(12, -1);
    v8 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v7 = 138543362;
    swift_errorRetain(v3);
    v9 = _swift_stdlib_bridgeErrorToNSError(v3);
    v0[640] = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 640, v0 + 641, v7 + 4, v7 + 12);
    *v8 = v9;
    swift_errorRelease(v3);
    swift_errorRelease(v3);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Pairing command error: %{public}@", v7, 0xCu);
    v10 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v8, 1, v10);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v7, -1, -1);

    sub_100057648((uint64_t)(v0 + 266));
    swift_errorRelease(0);
  }
  else
  {
    sub_100057648((uint64_t)(v0 + 266));
    swift_errorRelease(0);
    swift_errorRelease(v3);
    swift_errorRelease(v3);

  }
  sub_10005780C((uint64_t)(v0 + 398));
  sub_100005CF0((uint64_t)(v0 + 398), (uint64_t)(v0 + 332), &qword_1010EC4B0);
  v0[752] = v3;
  v11 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of PeripheralProtocol.cancelConnection()[1]);
  v0[753] = v11;
  *v11 = v0;
  v11[1] = sub_10003D850;
  return dispatch thunk of PeripheralProtocol.cancelConnection()(v0[719], v0[727]);
}

uint64_t sub_10003EABC()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  const void *v6;
  _QWORD *v7;
  void *v8;
  uint64_t v9;

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 6072);
  *(_QWORD *)(*(_QWORD *)v1 + 6080) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = v2[665];
    v5 = sub_10003F068;
  }
  else
  {
    v6 = v2 + 2;
    v7 = v2 + 629;
    v8 = v2 + 497;
    v9 = v2[665];
    sub_100057230(v6, v8);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v7);
    v5 = sub_10003EB44;
    v4 = v9;
  }
  return swift_task_switch(v5, v4, 0);
}

uint64_t sub_10003EB44()
{
  _QWORD *v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;

  v27 = v0 + 365;
  v1 = v0[758];
  v2 = v0[757];
  v3 = v0[742];
  v4 = v0[741];
  sub_100057648((uint64_t)(v0 + 266));
  sub_10005726C((uint64_t)(v0 + 299), (void (*)(void))sub_10001BC14);
  sub_10005726C((uint64_t)(v0 + 563), (void (*)(void))sub_10001BC14);
  sub_10001BC14(v2, v1);
  sub_10001BC14(v4, v3);
  sub_100057230(v0 + 497, v0 + 596);
  SharingCircleWildAdvertisementKey.init(key:)(v0 + 596);
  sub_10005726C((uint64_t)(v0 + 2), (void (*)(void))sub_10001BBBC);
  sub_100057230(v0 + 497, v0 + 299);
  v28 = (uint64_t)(v0 + 266);
  sub_100005CF0((uint64_t)(v0 + 596), (uint64_t)(v0 + 266), &qword_1010EC4B0);
  v5 = v0[760];
  sub_10005726C((uint64_t)(v0 + 299), (void (*)(void))sub_10001BBBC);
  v6 = sub_10005726C((uint64_t)(v0 + 299), (void (*)(void))sub_10001BBBC);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.default.getter(v7);
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc(12, -1);
    v10 = swift_slowAlloc(32, -1);
    v29 = v10;
    *(_DWORD *)v9 = 136315138;
    sub_100057230(v0 + 299, v0 + 35);
    sub_10005726C((uint64_t)(v0 + 299), (void (*)(void))sub_10001BBBC);
    v11 = String.init<A>(describing:)(v0 + 35, &type metadata for AirPodsSWPairingCommand);
    v0[647] = sub_100016940(v11, v12, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 647, v0 + 648, v9 + 4, v9 + 12);
    swift_bridgeObjectRelease();
    sub_10005726C((uint64_t)(v0 + 299), (void (*)(void))sub_10001BC14);
    sub_10005726C((uint64_t)(v0 + 299), (void (*)(void))sub_10001BC14);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Sending command: %s", v9, 0xCu);
    swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v9, -1, -1);
  }
  else
  {
    sub_10005726C((uint64_t)(v0 + 299), (void (*)(void))sub_10001BC14);
    sub_10005726C((uint64_t)(v0 + 299), (void (*)(void))sub_10001BC14);
  }

  sub_100057230(v0 + 299, v27);
  v13 = sub_100057604();
  v0[740] = v13;
  v0[741] = BinaryEncoder.encode<A>(_:)(v27, &type metadata for AirPodsSWPairingCommand, v13);
  v0[742] = v14;
  if (v5)
  {
    v15 = (uint64_t)(v0 + 332);
    sub_10005726C((uint64_t)(v0 + 299), (void (*)(void))sub_10001BC14);
    swift_errorRetain(v5);
    v16 = swift_errorRetain(v5);
    v17 = Logger.logObject.getter(v16);
    v18 = static os_log_type_t.error.getter(v17);
    if (os_log_type_enabled(v17, v18))
    {
      v19 = (uint8_t *)swift_slowAlloc(12, -1);
      v20 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v19 = 138543362;
      swift_errorRetain(v5);
      v21 = _swift_stdlib_bridgeErrorToNSError(v5);
      v0[640] = v21;
      v15 = (uint64_t)(v0 + 332);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 640, v0 + 641, v19 + 4, v19 + 12);
      *v20 = v21;
      swift_errorRelease(v5);
      swift_errorRelease(v5);
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Pairing command error: %{public}@", v19, 0xCu);
      v22 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
      swift_arrayDestroy(v20, 1, v22);
      swift_slowDealloc(v20, -1, -1);
      swift_slowDealloc(v19, -1, -1);

      sub_100057648(v28);
      swift_errorRelease(0);
    }
    else
    {
      sub_100057648(v28);
      swift_errorRelease(0);
      swift_errorRelease(v5);
      swift_errorRelease(v5);

    }
    sub_10005780C((uint64_t)(v0 + 398));
    sub_100005CF0((uint64_t)(v0 + 398), v15, &qword_1010EC4B0);
    v0[752] = v5;
    v26 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of PeripheralProtocol.cancelConnection()[1]);
    v0[753] = v26;
    *v26 = v0;
    v26[1] = sub_10003D850;
    return dispatch thunk of PeripheralProtocol.cancelConnection()(v0[719], v0[727]);
  }
  else
  {
    v23 = sub_100006C64(&qword_1010EC4C0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for Characteristic, (uint64_t)&protocol conformance descriptor for Characteristic);
    v24 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of CharacteristicProtocol.mtu.getter[1]);
    v0[743] = v24;
    *v24 = v0;
    v24[1] = sub_10003CC14;
    return dispatch thunk of CharacteristicProtocol.mtu.getter(v0[734], v23);
  }
}

uint64_t sub_10003F068()
{
  _QWORD *v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v1 = v0[758];
  v2 = v0[757];
  v3 = v0[742];
  v4 = v0[741];
  sub_10005726C((uint64_t)(v0 + 299), (void (*)(void))sub_10001BC14);
  sub_10005726C((uint64_t)(v0 + 563), (void (*)(void))sub_10001BC14);
  sub_10001BC14(v2, v1);
  sub_10001BC14(v4, v3);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 629);
  v5 = v0[760];
  swift_errorRetain(v5);
  v6 = swift_errorRetain(v5);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.error.getter(v7);
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc(12, -1);
    v10 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v9 = 138543362;
    swift_errorRetain(v5);
    v11 = _swift_stdlib_bridgeErrorToNSError(v5);
    v0[640] = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 640, v0 + 641, v9 + 4, v9 + 12);
    *v10 = v11;
    swift_errorRelease(v5);
    swift_errorRelease(v5);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Pairing command error: %{public}@", v9, 0xCu);
    v12 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v10, 1, v12);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v9, -1, -1);

    sub_100057648((uint64_t)(v0 + 266));
    swift_errorRelease(0);
  }
  else
  {
    sub_100057648((uint64_t)(v0 + 266));
    swift_errorRelease(0);
    swift_errorRelease(v5);
    swift_errorRelease(v5);

  }
  sub_10005780C((uint64_t)(v0 + 398));
  sub_100005CF0((uint64_t)(v0 + 398), (uint64_t)(v0 + 332), &qword_1010EC4B0);
  v0[752] = v5;
  v13 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of PeripheralProtocol.cancelConnection()[1]);
  v0[753] = v13;
  *v13 = v0;
  v13[1] = sub_10003D850;
  return dispatch thunk of PeripheralProtocol.cancelConnection()(v0[719], v0[727]);
}

uint64_t sub_10003F2C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  BOOL v22;
  uint64_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;

  v1 = *(_QWORD *)(v0 + 5808);
  v2 = *(_QWORD *)(v0 + 5568);
  v3 = *(_QWORD *)(v0 + 5544);
  v4 = *(_QWORD *)(v0 + 5496);
  v5 = *(_QWORD *)(v0 + 5488);
  sub_100005CF0(*(_QWORD *)(v0 + 5552), v2, (uint64_t *)&unk_10111C0A0);
  sub_10000F9B8(v2, v3, (uint64_t *)&unk_10111C0A0);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v3, 1, v5);
  v7 = *(_QWORD *)(v0 + 5544);
  if (v6 == 1)
  {
    v8 = sub_100004048(v7, (uint64_t *)&unk_10111C0A0);
    v9 = Logger.logObject.getter(v8);
    v10 = static os_log_type_t.error.getter(v9);
    if (os_log_type_enabled(v9, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Missing product info!", v11, 2u);
      swift_slowDealloc(v11, -1, -1);
    }
    v12 = *(_QWORD *)(v0 + 5624);
    v13 = *(_QWORD *)(v0 + 5568);

    v14 = sub_100056FAC();
    v15 = swift_allocError(&type metadata for AirPodsLEPairingService.Error, v14, 0, 0);
    *v16 = 0x800000000000000CLL;
    swift_willThrow(v15);
    swift_release();
    goto LABEL_10;
  }
  v17 = *(_QWORD *)(v0 + 5512);
  v18 = *(_QWORD *)(v0 + 5504);
  sub_1000126EC(v7, v17, type metadata accessor for AccessoryProductInfo);
  v19 = sub_10005972C(v17, v18, type metadata accessor for AccessoryProductInfo);
  v20 = Logger.logObject.getter(v19);
  v21 = static os_log_type_t.default.getter(v20);
  v22 = os_log_type_enabled(v20, v21);
  v23 = *(_QWORD *)(v0 + 5504);
  if (v22)
  {
    v24 = (uint8_t *)swift_slowAlloc(12, -1);
    v25 = swift_slowAlloc(32, -1);
    v75 = v25;
    *(_DWORD *)v24 = 136446210;
    v26 = sub_100D1A984();
    *(_QWORD *)(v0 + 5232) = sub_100016940(v26, v27, &v75);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 5232, v0 + 5240, v24 + 4, v24 + 12);
    swift_bridgeObjectRelease();
    sub_1000126B0(v23, type metadata accessor for AccessoryProductInfo);
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "Product info: %{public}s)", v24, 0xCu);
    swift_arrayDestroy(v25, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v25, -1, -1);
    swift_slowDealloc(v24, -1, -1);
  }
  else
  {
    sub_1000126B0(*(_QWORD *)(v0 + 5504), type metadata accessor for AccessoryProductInfo);
  }

  sub_100041FD4(*(_QWORD *)(v0 + 5624), *(_QWORD *)(v0 + 5512));
  if (v1)
  {
    v12 = *(_QWORD *)(v0 + 5624);
    v13 = *(_QWORD *)(v0 + 5568);
    v28 = *(_QWORD *)(v0 + 5512);
    swift_release();
    sub_1000126B0(v28, type metadata accessor for AccessoryProductInfo);
LABEL_10:
    sub_100004048(v13, (uint64_t *)&unk_10111C0A0);
    sub_1000126B0(v12, type metadata accessor for AccessoryMetadata);
    v29 = *(_QWORD *)(v0 + 5680);
    v30 = *(_QWORD *)(v0 + 5648);
    v31 = *(_QWORD *)(v0 + 5624);
    v32 = *(_QWORD *)(v0 + 5616);
    v33 = *(_QWORD *)(v0 + 5608);
    v34 = *(_QWORD *)(v0 + 5600);
    v35 = *(_QWORD *)(v0 + 5592);
    v36 = *(_QWORD *)(v0 + 5568);
    v37 = *(_QWORD *)(v0 + 5560);
    v60 = *(_QWORD *)(v0 + 5552);
    v61 = *(_QWORD *)(v0 + 5544);
    v62 = *(_QWORD *)(v0 + 5536);
    v63 = *(_QWORD *)(v0 + 5512);
    v64 = *(_QWORD *)(v0 + 5504);
    v65 = *(_QWORD *)(v0 + 5480);
    v66 = *(_QWORD *)(v0 + 5472);
    v67 = *(_QWORD *)(v0 + 5464);
    v68 = *(_QWORD *)(v0 + 5440);
    v69 = *(_QWORD *)(v0 + 5432);
    v70 = *(_QWORD *)(v0 + 5408);
    v71 = *(_QWORD *)(v0 + 5384);
    v72 = *(_QWORD *)(v0 + 5360);
    v73 = *(_QWORD *)(v0 + 5336);
    v74 = *(_QWORD *)(v0 + 5328);
    swift_task_dealloc(*(_QWORD *)(v0 + 5688));
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    swift_task_dealloc(v36);
    swift_task_dealloc(v37);
    swift_task_dealloc(v60);
    swift_task_dealloc(v61);
    swift_task_dealloc(v62);
    swift_task_dealloc(v63);
    swift_task_dealloc(v64);
    swift_task_dealloc(v65);
    swift_task_dealloc(v66);
    swift_task_dealloc(v67);
    swift_task_dealloc(v68);
    swift_task_dealloc(v69);
    swift_task_dealloc(v70);
    swift_task_dealloc(v71);
    swift_task_dealloc(v72);
    swift_task_dealloc(v73);
    swift_task_dealloc(v74);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v39 = *(_QWORD *)(v0 + 5480);
  v40 = *(_QWORD *)(v0 + 5472);
  v41 = *(_QWORD *)(v0 + 5464);
  v42 = *(_QWORD *)(v0 + 5456);
  v43 = *(_QWORD *)(v0 + 5448);
  v44 = *(_QWORD *)(v0 + 5440);
  v45 = *(_QWORD *)(v0 + 5320);
  v46 = *(_QWORD *)(v0 + 5312);
  v47 = *(_QWORD *)(v0 + 5304);
  v48 = *(_QWORD *)(v45 + 160);
  v49 = *(_QWORD *)(v45 + 168);
  *(_QWORD *)(v45 + 160) = v47;
  *(_QWORD *)(v45 + 168) = v46;
  sub_10001BD08(v47, v46);
  sub_10001EF3C(v48, v49);
  v50 = type metadata accessor for ConnectUseCase(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v50 - 8) + 56))(v39, 1, 1, v50);
  v51 = sub_10001A9A8(&qword_1010EC480);
  v52 = swift_allocObject(v51, ((*(unsigned __int8 *)(v42 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v42 + 80))+ *(_QWORD *)(v42 + 72), *(unsigned __int8 *)(v42 + 80) | 7);
  *(_OWORD *)(v52 + 16) = xmmword_100E22B00;
  static Peripheral.ConnectionOptions.hideFromBTSettings.getter();
  *(_QWORD *)(v0 + 5136) = v52;
  v53 = sub_100006C64(&qword_1010EC488, 255, (uint64_t (*)(uint64_t))&type metadata accessor for Peripheral.ConnectionOptions, (uint64_t)&protocol conformance descriptor for Peripheral.ConnectionOptions);
  v54 = sub_10001A9A8(&qword_1010EC490);
  v55 = sub_1000193A4(&qword_1010EC498, &qword_1010EC490, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(v0 + 5136, v54, v55, v43, v53);
  v56 = type metadata accessor for PeripheralPairingInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v56 - 8) + 56))(v44, 1, 1, v56);
  Peripheral.Options.init(connectionOptions:pairingInfo:)(v41, v44);
  v57 = type metadata accessor for Peripheral.Options(0);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v57 - 8) + 56))(v40, 0, 1, v57);
  v58 = sub_100006C64(&qword_1010EC4A0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for Peripheral, (uint64_t)&protocol conformance descriptor for Peripheral);
  *(_QWORD *)(v0 + 5816) = v58;
  v59 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of PeripheralProtocol.connect(useCase:options:)[1]);
  *(_QWORD *)(v0 + 5824) = v59;
  *v59 = v0;
  v59[1] = sub_10003B730;
  return dispatch thunk of PeripheralProtocol.connect(useCase:options:)(*(_QWORD *)(v0 + 5480), *(_QWORD *)(v0 + 5472), *(_QWORD *)(v0 + 5752), v58);
}

uint64_t sub_10003F928()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v1 = *(_QWORD *)(v0 + 5624);
  swift_release();
  sub_1000126B0(v1, type metadata accessor for AccessoryMetadata);
  v2 = *(_QWORD *)(v0 + 5680);
  v3 = *(_QWORD *)(v0 + 5648);
  v4 = *(_QWORD *)(v0 + 5624);
  v5 = *(_QWORD *)(v0 + 5616);
  v6 = *(_QWORD *)(v0 + 5608);
  v7 = *(_QWORD *)(v0 + 5600);
  v8 = *(_QWORD *)(v0 + 5592);
  v9 = *(_QWORD *)(v0 + 5568);
  v10 = *(_QWORD *)(v0 + 5560);
  v12 = *(_QWORD *)(v0 + 5552);
  v13 = *(_QWORD *)(v0 + 5544);
  v14 = *(_QWORD *)(v0 + 5536);
  v15 = *(_QWORD *)(v0 + 5512);
  v16 = *(_QWORD *)(v0 + 5504);
  v17 = *(_QWORD *)(v0 + 5480);
  v18 = *(_QWORD *)(v0 + 5472);
  v19 = *(_QWORD *)(v0 + 5464);
  v20 = *(_QWORD *)(v0 + 5440);
  v21 = *(_QWORD *)(v0 + 5432);
  v22 = *(_QWORD *)(v0 + 5408);
  v23 = *(_QWORD *)(v0 + 5384);
  v24 = *(_QWORD *)(v0 + 5360);
  v25 = *(_QWORD *)(v0 + 5336);
  v26 = *(_QWORD *)(v0 + 5328);
  swift_task_dealloc(*(_QWORD *)(v0 + 5688));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10003FAE0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 6088);
  *(_QWORD *)(*(_QWORD *)v1 + 6096) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_10003FBAC;
  else
    v3 = sub_10003FB44;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_10003FB44()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v1 = v0[762];
  sub_100133E40(v0[666], v0[700]);
  v0[763] = v1;
  if (v1)
  {
    v0[764] = v1;
    v2 = v0[665];
    v3 = sub_1000404D8;
  }
  else
  {
    v2 = v0[665];
    v3 = sub_10003FBC8;
  }
  return swift_task_switch(v3, v2, 0);
}

uint64_t sub_10003FBAC()
{
  _QWORD *v0;

  v0[764] = v0[762];
  return swift_task_switch(sub_1000404D8, v0[665], 0);
}

uint64_t sub_10003FBC8()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  BOOL v39;
  uint64_t v40;
  uint8_t *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92[2];

  v1 = (_QWORD *)(v0 + 6124);
  sub_1000126EC(*(_QWORD *)(v0 + 5600), *(_QWORD *)(v0 + 5624), type metadata accessor for AccessoryMetadata);
  swift_errorRelease(*(_QWORD *)(v0 + 5152));
  v91 = *(_QWORD *)(v0 + 6104);
  v2 = sub_10005972C(*(_QWORD *)(v0 + 5624), *(_QWORD *)(v0 + 5608), type metadata accessor for AccessoryMetadata);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = *(_QWORD *)(v0 + 5608);
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    v92[0] = v7;
    *(_DWORD *)v6 = 136446210;
    v8 = sub_100132D48();
    *(_QWORD *)(v0 + 5240) = sub_100016940(v8, v9, v92);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 5240, v0 + 5248, v6 + 4, v6 + 12);
    swift_bridgeObjectRelease();
    sub_1000126B0(v5, type metadata accessor for AccessoryMetadata);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "AIS: %{public}s", v6, 0xCu);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);
  }
  else
  {
    sub_1000126B0(*(_QWORD *)(v0 + 5608), type metadata accessor for AccessoryMetadata);
  }

  if (qword_1010EA1D0 != -1)
    swift_once(&qword_1010EA1D0, sub_100B11444);
  *(_QWORD *)(v0 + 5096) = 0x7365547265646E75;
  *(_QWORD *)(v0 + 5104) = 0xE900000000000074;
  SynchronousCache.cachedValue<A>(key:computeBlock:)(v1, v0 + 5096, sub_10001F628, 0, &type metadata for Bool);
  swift_bridgeObjectRelease();
  if (*(_BYTE *)v1 != 1)
  {
    v32 = (_QWORD *)swift_task_alloc(dword_1010F37D4);
    *(_QWORD *)(v0 + 5800) = v32;
    *v32 = v0;
    v32[1] = sub_10003B6CC;
    return sub_10021770C(*(_QWORD *)(v0 + 5552), *(_QWORD *)(v0 + 5624), 3);
  }
  v10 = *(_QWORD *)(v0 + 5560);
  v11 = *(_QWORD *)(v0 + 5536);
  v12 = *(_QWORD *)(v0 + 5528);
  v13 = *(_QWORD *)(v0 + 5520);
  v14 = *(_QWORD *)(v0 + 5496);
  v15 = *(_QWORD *)(v0 + 5488);
  v16 = type metadata accessor for BeaconStore(0);
  UUID.init()(v16);
  sub_100C9AB8C(v11, 0, v10);
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v13);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v14 + 56))(v10, 0, 1, v15);
  v17 = *(_QWORD *)(v0 + 5568);
  v18 = *(_QWORD *)(v0 + 5544);
  v19 = *(_QWORD *)(v0 + 5496);
  v20 = *(_QWORD *)(v0 + 5488);
  sub_100005CF0(*(_QWORD *)(v0 + 5560), v17, (uint64_t *)&unk_10111C0A0);
  sub_10000F9B8(v17, v18, (uint64_t *)&unk_10111C0A0);
  v21 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v19 + 48))(v18, 1, v20);
  v22 = *(_QWORD *)(v0 + 5544);
  if (v21 == 1)
  {
    v23 = sub_100004048(v22, (uint64_t *)&unk_10111C0A0);
    v24 = Logger.logObject.getter(v23);
    v25 = static os_log_type_t.error.getter(v24);
    if (os_log_type_enabled(v24, v25))
    {
      v26 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v26 = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "Missing product info!", v26, 2u);
      swift_slowDealloc(v26, -1, -1);
    }
    v27 = *(_QWORD *)(v0 + 5624);
    v28 = *(_QWORD *)(v0 + 5568);

    v29 = sub_100056FAC();
    v30 = swift_allocError(&type metadata for AirPodsLEPairingService.Error, v29, 0, 0);
    *v31 = 0x800000000000000CLL;
    swift_willThrow(v30);
    swift_release();
    goto LABEL_17;
  }
  v34 = *(_QWORD *)(v0 + 5512);
  v35 = *(_QWORD *)(v0 + 5504);
  sub_1000126EC(v22, v34, type metadata accessor for AccessoryProductInfo);
  v36 = sub_10005972C(v34, v35, type metadata accessor for AccessoryProductInfo);
  v37 = Logger.logObject.getter(v36);
  v38 = static os_log_type_t.default.getter(v37);
  v39 = os_log_type_enabled(v37, v38);
  v40 = *(_QWORD *)(v0 + 5504);
  if (v39)
  {
    v41 = (uint8_t *)swift_slowAlloc(12, -1);
    v42 = swift_slowAlloc(32, -1);
    v92[0] = v42;
    *(_DWORD *)v41 = 136446210;
    v43 = sub_100D1A984();
    *(_QWORD *)(v0 + 5232) = sub_100016940(v43, v44, v92);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 5232, v0 + 5240, v41 + 4, v41 + 12);
    swift_bridgeObjectRelease();
    sub_1000126B0(v40, type metadata accessor for AccessoryProductInfo);
    _os_log_impl((void *)&_mh_execute_header, v37, v38, "Product info: %{public}s)", v41, 0xCu);
    swift_arrayDestroy(v42, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v42, -1, -1);
    swift_slowDealloc(v41, -1, -1);
  }
  else
  {
    sub_1000126B0(*(_QWORD *)(v0 + 5504), type metadata accessor for AccessoryProductInfo);
  }

  sub_100041FD4(*(_QWORD *)(v0 + 5624), *(_QWORD *)(v0 + 5512));
  if (v91)
  {
    v27 = *(_QWORD *)(v0 + 5624);
    v28 = *(_QWORD *)(v0 + 5568);
    v45 = *(_QWORD *)(v0 + 5512);
    swift_release();
    sub_1000126B0(v45, type metadata accessor for AccessoryProductInfo);
LABEL_17:
    sub_100004048(v28, (uint64_t *)&unk_10111C0A0);
    sub_1000126B0(v27, type metadata accessor for AccessoryMetadata);
    v46 = *(_QWORD *)(v0 + 5680);
    v47 = *(_QWORD *)(v0 + 5648);
    v48 = *(_QWORD *)(v0 + 5624);
    v49 = *(_QWORD *)(v0 + 5616);
    v50 = *(_QWORD *)(v0 + 5608);
    v51 = *(_QWORD *)(v0 + 5600);
    v52 = *(_QWORD *)(v0 + 5592);
    v53 = *(_QWORD *)(v0 + 5568);
    v54 = *(_QWORD *)(v0 + 5560);
    v76 = *(_QWORD *)(v0 + 5552);
    v77 = *(_QWORD *)(v0 + 5544);
    v78 = *(_QWORD *)(v0 + 5536);
    v79 = *(_QWORD *)(v0 + 5512);
    v80 = *(_QWORD *)(v0 + 5504);
    v81 = *(_QWORD *)(v0 + 5480);
    v82 = *(_QWORD *)(v0 + 5472);
    v83 = *(_QWORD *)(v0 + 5464);
    v84 = *(_QWORD *)(v0 + 5440);
    v85 = *(_QWORD *)(v0 + 5432);
    v86 = *(_QWORD *)(v0 + 5408);
    v87 = *(_QWORD *)(v0 + 5384);
    v88 = *(_QWORD *)(v0 + 5360);
    v89 = *(_QWORD *)(v0 + 5336);
    v90 = *(_QWORD *)(v0 + 5328);
    swift_task_dealloc(*(_QWORD *)(v0 + 5688));
    swift_task_dealloc(v46);
    swift_task_dealloc(v47);
    swift_task_dealloc(v48);
    swift_task_dealloc(v49);
    swift_task_dealloc(v50);
    swift_task_dealloc(v51);
    swift_task_dealloc(v52);
    swift_task_dealloc(v53);
    swift_task_dealloc(v54);
    swift_task_dealloc(v76);
    swift_task_dealloc(v77);
    swift_task_dealloc(v78);
    swift_task_dealloc(v79);
    swift_task_dealloc(v80);
    swift_task_dealloc(v81);
    swift_task_dealloc(v82);
    swift_task_dealloc(v83);
    swift_task_dealloc(v84);
    swift_task_dealloc(v85);
    swift_task_dealloc(v86);
    swift_task_dealloc(v87);
    swift_task_dealloc(v88);
    swift_task_dealloc(v89);
    swift_task_dealloc(v90);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v55 = *(_QWORD *)(v0 + 5480);
  v56 = *(_QWORD *)(v0 + 5472);
  v57 = *(_QWORD *)(v0 + 5464);
  v58 = *(_QWORD *)(v0 + 5456);
  v59 = *(_QWORD *)(v0 + 5448);
  v60 = *(_QWORD *)(v0 + 5440);
  v61 = *(_QWORD *)(v0 + 5320);
  v62 = *(_QWORD *)(v0 + 5312);
  v63 = *(_QWORD *)(v0 + 5304);
  v64 = *(_QWORD *)(v61 + 160);
  v65 = *(_QWORD *)(v61 + 168);
  *(_QWORD *)(v61 + 160) = v63;
  *(_QWORD *)(v61 + 168) = v62;
  sub_10001BD08(v63, v62);
  sub_10001EF3C(v64, v65);
  v66 = type metadata accessor for ConnectUseCase(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v66 - 8) + 56))(v55, 1, 1, v66);
  v67 = sub_10001A9A8(&qword_1010EC480);
  v68 = swift_allocObject(v67, ((*(unsigned __int8 *)(v58 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v58 + 80))+ *(_QWORD *)(v58 + 72), *(unsigned __int8 *)(v58 + 80) | 7);
  *(_OWORD *)(v68 + 16) = xmmword_100E22B00;
  static Peripheral.ConnectionOptions.hideFromBTSettings.getter();
  *(_QWORD *)(v0 + 5136) = v68;
  v69 = sub_100006C64(&qword_1010EC488, 255, (uint64_t (*)(uint64_t))&type metadata accessor for Peripheral.ConnectionOptions, (uint64_t)&protocol conformance descriptor for Peripheral.ConnectionOptions);
  v70 = sub_10001A9A8(&qword_1010EC490);
  v71 = sub_1000193A4(&qword_1010EC498, &qword_1010EC490, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(v0 + 5136, v70, v71, v59, v69);
  v72 = type metadata accessor for PeripheralPairingInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v72 - 8) + 56))(v60, 1, 1, v72);
  Peripheral.Options.init(connectionOptions:pairingInfo:)(v57, v60);
  v73 = type metadata accessor for Peripheral.Options(0);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v73 - 8) + 56))(v56, 0, 1, v73);
  v74 = sub_100006C64(&qword_1010EC4A0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for Peripheral, (uint64_t)&protocol conformance descriptor for Peripheral);
  *(_QWORD *)(v0 + 5816) = v74;
  v75 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of PeripheralProtocol.connect(useCase:options:)[1]);
  *(_QWORD *)(v0 + 5824) = v75;
  *v75 = v0;
  v75[1] = sub_10003B730;
  return dispatch thunk of PeripheralProtocol.connect(useCase:options:)(*(_QWORD *)(v0 + 5480), *(_QWORD *)(v0 + 5472), *(_QWORD *)(v0 + 5752), v74);
}

uint64_t sub_1000404D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  swift_release(*(_QWORD *)(v0 + 5768));
  swift_errorRelease(*(_QWORD *)(v0 + 5152));
  v1 = *(_QWORD *)(v0 + 5680);
  v2 = *(_QWORD *)(v0 + 5648);
  v3 = *(_QWORD *)(v0 + 5624);
  v4 = *(_QWORD *)(v0 + 5616);
  v5 = *(_QWORD *)(v0 + 5608);
  v6 = *(_QWORD *)(v0 + 5600);
  v7 = *(_QWORD *)(v0 + 5592);
  v8 = *(_QWORD *)(v0 + 5568);
  v9 = *(_QWORD *)(v0 + 5560);
  v11 = *(_QWORD *)(v0 + 5552);
  v12 = *(_QWORD *)(v0 + 5544);
  v13 = *(_QWORD *)(v0 + 5536);
  v14 = *(_QWORD *)(v0 + 5512);
  v15 = *(_QWORD *)(v0 + 5504);
  v16 = *(_QWORD *)(v0 + 5480);
  v17 = *(_QWORD *)(v0 + 5472);
  v18 = *(_QWORD *)(v0 + 5464);
  v19 = *(_QWORD *)(v0 + 5440);
  v20 = *(_QWORD *)(v0 + 5432);
  v21 = *(_QWORD *)(v0 + 5408);
  v22 = *(_QWORD *)(v0 + 5384);
  v23 = *(_QWORD *)(v0 + 5360);
  v24 = *(_QWORD *)(v0 + 5336);
  v25 = *(_QWORD *)(v0 + 5328);
  swift_task_dealloc(*(_QWORD *)(v0 + 5688));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100040684(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;

  v3[6] = a2;
  v3[7] = v2;
  v3[5] = a1;
  v3[8] = *v2;
  v4 = sub_10001A9A8(&qword_1010EF7C0);
  v3[9] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[10] = v5;
  v6 = (*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[11] = swift_task_alloc(v6);
  v3[12] = swift_task_alloc(v6);
  v7 = sub_10001A9A8(&qword_101115FB0);
  v3[13] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A9A8(&qword_1010EC648);
  v3[14] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v3[15] = v9;
  v3[16] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10001A9A8((uint64_t *)&unk_101117020);
  v3[17] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v3[18] = v11;
  v3[19] = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for ScanMode(0);
  v3[20] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v3[21] = v13;
  v3[22] = swift_task_alloc((*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_10001A9A8(&qword_101115F40);
  v3[23] = v14;
  v15 = *(_QWORD *)(v14 - 8);
  v3[24] = v15;
  v16 = (*(_QWORD *)(v15 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[25] = swift_task_alloc(v16);
  v3[26] = swift_task_alloc(v16);
  v17 = type metadata accessor for CentralManager.State(0);
  v3[27] = v17;
  v18 = *(_QWORD *)(v17 - 8);
  v3[28] = v18;
  v3[29] = swift_task_alloc((*(_QWORD *)(v18 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for MACAddress(0);
  v3[30] = v19;
  v20 = *(_QWORD *)(v19 - 8);
  v3[31] = v20;
  v21 = (*(_QWORD *)(v20 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[32] = swift_task_alloc(v21);
  v3[33] = swift_task_alloc(v21);
  return swift_task_switch(sub_100040844, v2, 0);
}

uint64_t sub_100040844()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  _BOOL4 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  void (*v19)(uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v24;

  if (qword_1010E98F0 != -1)
    swift_once(&qword_1010E98F0, sub_10003868C);
  v1 = v0[33];
  v2 = v0[30];
  v3 = v0[31];
  v4 = v0[6];
  v5 = type metadata accessor for Logger(0);
  v0[34] = sub_10001A9E8(v5, (uint64_t)qword_1010EC1C8);
  v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v0[35] = v6;
  v7 = v6(v1, v4, v2);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter(v8);
  v10 = os_log_type_enabled(v8, v9);
  v11 = v0[33];
  v12 = v0[30];
  v13 = v0[31];
  if (v10)
  {
    v14 = (uint8_t *)swift_slowAlloc(12, -1);
    v15 = swift_slowAlloc(32, -1);
    v24 = v15;
    *(_DWORD *)v14 = 136446210;
    v16 = sub_100006C64((unint64_t *)&qword_1010FBAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for MACAddress, (uint64_t)&protocol conformance descriptor for MACAddress);
    v17 = dispatch thunk of CustomStringConvertible.description.getter(v12, v16);
    v0[4] = sub_100016940(v17, v18, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 4, v0 + 5, v14 + 4, v14 + 12);
    swift_bridgeObjectRelease();
    v19 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
    v19(v11, v12);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Starting discovery scan for peripherals matching macAddress: %{public}s", v14, 0xCu);
    swift_arrayDestroy(v15, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v15, -1, -1);
    swift_slowDealloc(v14, -1, -1);
  }
  else
  {
    v19 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
    v19(v0[33], v0[30]);
  }

  v0[36] = v19;
  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0[28] + 104))(v0[29], enum case for CentralManager.State.poweredOn(_:), v0[27]);
  v20 = type metadata accessor for CentralManager(0);
  v0[37] = v20;
  v21 = sub_100006C64(&qword_1010EC468, 255, (uint64_t (*)(uint64_t))&type metadata accessor for CentralManager, (uint64_t)&protocol conformance descriptor for CentralManager);
  v0[38] = v21;
  v22 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of CentralManagerProtocol.await(state:)[1]);
  v0[39] = v22;
  *v22 = v0;
  v22[1] = sub_100040ACC;
  return dispatch thunk of CentralManagerProtocol.await(state:)(v0[29], v20, v21);
}

uint64_t sub_100040ACC()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)();

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 312);
  *(_QWORD *)(*(_QWORD *)v1 + 320) = v0;
  swift_task_dealloc(v3);
  v5 = v2[28];
  v4 = v2[29];
  v6 = v2[27];
  v7 = v2[7];
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  if (v0)
    v8 = sub_100040D00;
  else
    v8 = sub_100040B44;
  return swift_task_switch(v8, v7, 0);
}

uint64_t sub_100040B44()
{
  _QWORD *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v2 = v0[21];
  v1 = (uint64_t *)v0[22];
  v3 = v0[20];
  v4 = sub_10001A9A8(&qword_1010EC650);
  v5 = sub_10001A9A8(&qword_1010EC448);
  v6 = swift_allocObject(v4, ((*(unsigned __int8 *)(*(_QWORD *)(v5 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v5 - 8) + 80))+ 2 * *(_QWORD *)(*(_QWORD *)(v5 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v5 - 8) + 80) | 7);
  *(_OWORD *)(v6 + 16) = xmmword_100E22B10;
  v7 = type metadata accessor for Service(0);
  Identifier.init(stringLiteral:)("FD44", 4, 2, v7);
  Identifier.init(stringLiteral:)("87290102-3C51-43B1-A1A9-11B9DC38478B", 36, 2, v7);
  *v1 = v6;
  (*(void (**)(uint64_t *, _QWORD, uint64_t))(v2 + 104))(v1, enum case for ScanMode.serviceIdentifiers(_:), v3);
  v8 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of CentralManagerProtocol.scanForPeripherals(scanMode:garbageCollectInterval:)[1]);
  v0[41] = v8;
  *v8 = v0;
  v8[1] = sub_100040C88;
  return dispatch thunk of CentralManagerProtocol.scanForPeripherals(scanMode:garbageCollectInterval:)(v0[26], v0[22], 0xD02AB486CEDC0000, 0, v0[37], v0[38]);
}

uint64_t sub_100040C88()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)();

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 328);
  *(_QWORD *)(*(_QWORD *)v1 + 336) = v0;
  swift_task_dealloc(v3);
  v5 = v2[21];
  v4 = v2[22];
  v6 = v2[20];
  v7 = v2[7];
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  if (v0)
    v8 = sub_100040F64;
  else
    v8 = sub_100040DC8;
  return swift_task_switch(v8, v7, 0);
}

uint64_t sub_100040D00()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v1 = *(_QWORD *)(v0 + 256);
  v2 = *(_QWORD *)(v0 + 232);
  v4 = *(_QWORD *)(v0 + 200);
  v3 = *(_QWORD *)(v0 + 208);
  v5 = *(_QWORD *)(v0 + 176);
  v6 = *(_QWORD *)(v0 + 152);
  v7 = *(_QWORD *)(v0 + 128);
  v8 = *(_QWORD *)(v0 + 96);
  v9 = *(_QWORD *)(v0 + 104);
  v11 = *(_QWORD *)(v0 + 88);
  swift_task_dealloc(*(_QWORD *)(v0 + 264));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v9);
  swift_task_dealloc(v8);
  swift_task_dealloc(v11);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100040DC8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t (*v16)(uint64_t, uint64_t);

  v1 = v0[25];
  v2 = v0[23];
  v3 = v0[17];
  v4 = v0[13];
  v5 = v0[8];
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v0[24] + 16))(v1, v0[26], v2);
  v6 = swift_allocObject(&unk_101052A30, 24, 7);
  *(_QWORD *)(v6 + 16) = v5;
  v7 = type metadata accessor for Peripheral(0);
  v0[43] = v7;
  v8 = sub_1000193A4(&qword_1010EC668, &qword_101115F40, (const char *)&protocol conformance descriptor for AsyncThrowingStream<A, B>);
  AsyncCompactMapSequence.init(_:transform:)(v1, &unk_1010EC660, v6, v2, v7, v8);
  AsyncCompactMapSequence.base.getter(v3);
  dispatch thunk of AsyncSequence.makeAsyncIterator()(v2, v8);
  v9 = AsyncCompactMapSequence.transform.getter(v3);
  AsyncCompactMapSequence.Iterator.init(_:transform:)(v4, v9, v10, v2, v7, v8);
  v12 = sub_100006C64(&qword_1010EC410, v11, (uint64_t (*)(uint64_t))type metadata accessor for AirPodsLEPairingService, (uint64_t)&unk_100E229E4);
  v0[44] = v12;
  v13 = v0[7];
  v16 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_101117050 + dword_101117050);
  v14 = (_QWORD *)swift_task_alloc(unk_101117054);
  v0[45] = v14;
  *v14 = v0;
  v14[1] = sub_10004102C;
  return v16(v13, v12);
}

uint64_t sub_100040F64()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v1 = *(_QWORD *)(v0 + 256);
  v2 = *(_QWORD *)(v0 + 232);
  v4 = *(_QWORD *)(v0 + 200);
  v3 = *(_QWORD *)(v0 + 208);
  v5 = *(_QWORD *)(v0 + 176);
  v6 = *(_QWORD *)(v0 + 152);
  v7 = *(_QWORD *)(v0 + 128);
  v8 = *(_QWORD *)(v0 + 96);
  v9 = *(_QWORD *)(v0 + 104);
  v11 = *(_QWORD *)(v0 + 88);
  swift_task_dealloc(*(_QWORD *)(v0 + 264));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v9);
  swift_task_dealloc(v8);
  swift_task_dealloc(v11);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10004102C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t (*v5)();

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 360);
  v3[46] = a1;
  v3[47] = v1;
  swift_task_dealloc(v4);
  if (v1)
    v5 = sub_100041318;
  else
    v5 = sub_100041098;
  return swift_task_switch(v5, v3[7], 0);
}

uint64_t sub_100041098()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;

  if (*(_QWORD *)(v0 + 368))
  {
    v1 = static Task<>.isCancelled.getter();
    if ((v1 & 1) == 0)
    {
      v27 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of CentralManagerProtocol.retrievePeripheral(macAddress:)[1]);
      *(_QWORD *)(v0 + 384) = v27;
      *v27 = v0;
      v27[1] = sub_1000415FC;
      return dispatch thunk of CentralManagerProtocol.retrievePeripheral(macAddress:)(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 296), *(_QWORD *)(v0 + 304));
    }
    v2 = Logger.logObject.getter(v1);
    v3 = static os_log_type_t.error.getter(v2);
    if (os_log_type_enabled(v2, v3))
    {
      v4 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "Task cancelled!", v4, 2u);
      swift_slowDealloc(v4, -1, -1);
    }

    swift_release();
  }
  v5 = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 120) + 8))(*(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 112));
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.error.getter(v6);
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Missing peripheral after scanning!", v8, 2u);
    swift_slowDealloc(v8, -1, -1);
  }
  v9 = *(_QWORD *)(v0 + 208);
  v10 = *(_QWORD *)(v0 + 184);
  v11 = *(_QWORD *)(v0 + 192);
  v13 = *(_QWORD *)(v0 + 144);
  v12 = *(_QWORD *)(v0 + 152);
  v14 = *(_QWORD *)(v0 + 136);

  v15 = sub_100056FAC();
  v29 = swift_allocError(&type metadata for AirPodsLEPairingService.Error, v15, 0, 0);
  *v16 = 0x800000000000000BLL;
  swift_willThrow(v29);
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v14);
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
  v17 = *(_QWORD *)(v0 + 256);
  v18 = *(_QWORD *)(v0 + 232);
  v20 = *(_QWORD *)(v0 + 200);
  v19 = *(_QWORD *)(v0 + 208);
  v21 = *(_QWORD *)(v0 + 176);
  v22 = *(_QWORD *)(v0 + 152);
  v23 = *(_QWORD *)(v0 + 128);
  v24 = *(_QWORD *)(v0 + 96);
  v25 = *(_QWORD *)(v0 + 104);
  v28 = *(_QWORD *)(v0 + 88);
  swift_task_dealloc(*(_QWORD *)(v0 + 264));
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v25);
  swift_task_dealloc(v24);
  swift_task_dealloc(v28);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100041318()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;

  v1 = *(_QWORD *)(v0 + 376);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 120) + 8))(*(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 112));
  swift_errorRetain(v1);
  v2 = swift_errorRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v5 = 138543362;
    swift_errorRetain(v1);
    v7 = _swift_stdlib_bridgeErrorToNSError(v1);
    *(_QWORD *)(v0 + 16) = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v5 + 4, v5 + 12);
    *v6 = v7;
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Error during scan: %{public}@", v5, 0xCu);
    v8 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v6, 1, v8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);

    v9 = swift_errorRelease(v1);
  }
  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    swift_errorRelease(v1);

  }
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.error.getter(v10);
  if (os_log_type_enabled(v10, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v12 = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Missing peripheral after scanning!", v12, 2u);
    swift_slowDealloc(v12, -1, -1);
  }
  v13 = *(_QWORD *)(v0 + 208);
  v14 = *(_QWORD *)(v0 + 184);
  v15 = *(_QWORD *)(v0 + 192);
  v17 = *(_QWORD *)(v0 + 144);
  v16 = *(_QWORD *)(v0 + 152);
  v18 = *(_QWORD *)(v0 + 136);

  v19 = sub_100056FAC();
  v32 = swift_allocError(&type metadata for AirPodsLEPairingService.Error, v19, 0, 0);
  *v20 = 0x800000000000000BLL;
  swift_willThrow(v32);
  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v16, v18);
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v13, v14);
  v21 = *(_QWORD *)(v0 + 256);
  v22 = *(_QWORD *)(v0 + 232);
  v24 = *(_QWORD *)(v0 + 200);
  v23 = *(_QWORD *)(v0 + 208);
  v25 = *(_QWORD *)(v0 + 176);
  v26 = *(_QWORD *)(v0 + 152);
  v27 = *(_QWORD *)(v0 + 128);
  v28 = *(_QWORD *)(v0 + 96);
  v29 = *(_QWORD *)(v0 + 104);
  v31 = *(_QWORD *)(v0 + 88);
  swift_task_dealloc(*(_QWORD *)(v0 + 264));
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v29);
  swift_task_dealloc(v28);
  swift_task_dealloc(v31);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000415FC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t (*v5)();

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 384);
  v3[49] = a1;
  v3[50] = v1;
  swift_task_dealloc(v4);
  if (v1)
    v5 = sub_100041CE8;
  else
    v5 = sub_100041668;
  return swift_task_switch(v5, v3[7], 0);
}

uint64_t sub_100041668()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint8_t *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  NSObject *v43;
  os_log_type_t v44;
  uint8_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void (*v69)(uint64_t, uint64_t);
  uint64_t (*v70)(uint64_t, uint64_t);
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;

  if (*(_QWORD *)(v0 + 392))
  {
    v1 = *(_QWORD *)(v0 + 344);
    v3 = *(_QWORD *)(v0 + 88);
    v2 = *(_QWORD *)(v0 + 96);
    v4 = *(_QWORD *)(v0 + 72);
    v5 = *(_QWORD *)(v0 + 80);
    v6 = sub_100006C64(&qword_1010EC4A0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for Peripheral, (uint64_t)&protocol conformance descriptor for Peripheral);
    dispatch thunk of PeripheralProtocol.id.getter(v1, v6);
    dispatch thunk of PeripheralProtocol.id.getter(v1, v6);
    v7 = static Identifier.== infix(_:_:)(v2, v3, v1);
    swift_release();
    v8 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
    v8(v3, v4);
    v8(v2, v4);
    if ((v7 & 1) != 0)
    {
      v10 = *(_QWORD *)(v0 + 256);
      v9 = *(_QWORD *)(v0 + 264);
      v11 = *(_QWORD *)(v0 + 208);
      v62 = *(_QWORD *)(v0 + 232);
      v63 = *(_QWORD *)(v0 + 200);
      v13 = *(_QWORD *)(v0 + 184);
      v12 = *(_QWORD *)(v0 + 192);
      v14 = *(_QWORD *)(v0 + 144);
      v15 = *(_QWORD *)(v0 + 152);
      v17 = *(_QWORD *)(v0 + 128);
      v16 = *(_QWORD *)(v0 + 136);
      v64 = *(_QWORD *)(v0 + 176);
      v65 = *(_QWORD *)(v0 + 104);
      v66 = *(_QWORD *)(v0 + 96);
      v68 = *(_QWORD *)(v0 + 88);
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 120) + 8))(v17, *(_QWORD *)(v0 + 112));
      (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v15, v16);
      (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v13);
      swift_task_dealloc(v9);
      swift_task_dealloc(v10);
      swift_task_dealloc(v62);
      swift_task_dealloc(v11);
      swift_task_dealloc(v63);
      swift_task_dealloc(v64);
      swift_task_dealloc(v15);
      swift_task_dealloc(v17);
      swift_task_dealloc(v65);
      swift_task_dealloc(v66);
      swift_task_dealloc(v68);
      return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 368));
    }
    else
    {
      swift_release();
      v30 = *(_QWORD *)(v0 + 352);
      v31 = *(_QWORD *)(v0 + 56);
      v70 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_101117050 + dword_101117050);
      v32 = (_QWORD *)swift_task_alloc(unk_101117054);
      *(_QWORD *)(v0 + 360) = v32;
      *v32 = v0;
      v32[1] = sub_10004102C;
      return v70(v31, v30);
    }
  }
  else
  {
    v19 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v0 + 280))(*(_QWORD *)(v0 + 256), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 240));
    v20 = Logger.logObject.getter(v19);
    v21 = static os_log_type_t.error.getter(v20);
    v22 = os_log_type_enabled(v20, v21);
    v23 = *(_QWORD *)(v0 + 256);
    v24 = *(_QWORD *)(v0 + 240);
    if (v22)
    {
      v69 = *(void (**)(uint64_t, uint64_t))(v0 + 288);
      v25 = (uint8_t *)swift_slowAlloc(12, -1);
      v26 = swift_slowAlloc(32, -1);
      v73 = v26;
      *(_DWORD *)v25 = 136446210;
      v27 = sub_100006C64((unint64_t *)&qword_1010FBAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for MACAddress, (uint64_t)&protocol conformance descriptor for MACAddress);
      v28 = dispatch thunk of CustomStringConvertible.description.getter(v24, v27);
      *(_QWORD *)(v0 + 24) = sub_100016940(v28, v29, &v73);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v25 + 4, v25 + 12);
      swift_bridgeObjectRelease();
      v69(v23, v24);
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "Missing peripheral for %{public}s", v25, 0xCu);
      swift_arrayDestroy(v26, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v26, -1, -1);
      swift_slowDealloc(v25, -1, -1);
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t))(v0 + 288))(v23, v24);
    }

    v71 = sub_100056FAC();
    v33 = swift_allocError(&type metadata for AirPodsLEPairingService.Error, v71, 0, 0);
    *v34 = 0x800000000000000BLL;
    swift_willThrow(v33);
    swift_release();
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 120) + 8))(*(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 112));
    swift_errorRetain(v33);
    v35 = swift_errorRetain(v33);
    v36 = Logger.logObject.getter(v35);
    v37 = static os_log_type_t.error.getter(v36);
    if (os_log_type_enabled(v36, v37))
    {
      v38 = (uint8_t *)swift_slowAlloc(12, -1);
      v39 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v38 = 138543362;
      swift_errorRetain(v33);
      v40 = _swift_stdlib_bridgeErrorToNSError(v33);
      *(_QWORD *)(v0 + 16) = v40;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v38 + 4, v38 + 12);
      *v39 = v40;
      swift_errorRelease(v33);
      swift_errorRelease(v33);
      _os_log_impl((void *)&_mh_execute_header, v36, v37, "Error during scan: %{public}@", v38, 0xCu);
      v41 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
      swift_arrayDestroy(v39, 1, v41);
      swift_slowDealloc(v39, -1, -1);
      swift_slowDealloc(v38, -1, -1);

      v42 = swift_errorRelease(v33);
    }
    else
    {
      swift_errorRelease(v33);
      swift_errorRelease(v33);
      swift_errorRelease(v33);

    }
    v43 = Logger.logObject.getter(v42);
    v44 = static os_log_type_t.error.getter(v43);
    if (os_log_type_enabled(v43, v44))
    {
      v45 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v45 = 0;
      _os_log_impl((void *)&_mh_execute_header, v43, v44, "Missing peripheral after scanning!", v45, 2u);
      swift_slowDealloc(v45, -1, -1);
    }
    v46 = *(_QWORD *)(v0 + 208);
    v48 = *(_QWORD *)(v0 + 184);
    v47 = *(_QWORD *)(v0 + 192);
    v50 = *(_QWORD *)(v0 + 144);
    v49 = *(_QWORD *)(v0 + 152);
    v51 = *(_QWORD *)(v0 + 136);

    v72 = swift_allocError(&type metadata for AirPodsLEPairingService.Error, v71, 0, 0);
    *v52 = 0x800000000000000BLL;
    swift_willThrow(v72);
    (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v49, v51);
    (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v46, v48);
    v53 = *(_QWORD *)(v0 + 256);
    v54 = *(_QWORD *)(v0 + 232);
    v56 = *(_QWORD *)(v0 + 200);
    v55 = *(_QWORD *)(v0 + 208);
    v57 = *(_QWORD *)(v0 + 176);
    v58 = *(_QWORD *)(v0 + 152);
    v59 = *(_QWORD *)(v0 + 128);
    v60 = *(_QWORD *)(v0 + 96);
    v61 = *(_QWORD *)(v0 + 104);
    v67 = *(_QWORD *)(v0 + 88);
    swift_task_dealloc(*(_QWORD *)(v0 + 264));
    swift_task_dealloc(v53);
    swift_task_dealloc(v54);
    swift_task_dealloc(v55);
    swift_task_dealloc(v56);
    swift_task_dealloc(v57);
    swift_task_dealloc(v58);
    swift_task_dealloc(v59);
    swift_task_dealloc(v61);
    swift_task_dealloc(v60);
    swift_task_dealloc(v67);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100041CE8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;

  swift_release();
  v1 = *(_QWORD *)(v0 + 400);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 120) + 8))(*(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 112));
  swift_errorRetain(v1);
  v2 = swift_errorRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v5 = 138543362;
    swift_errorRetain(v1);
    v7 = _swift_stdlib_bridgeErrorToNSError(v1);
    *(_QWORD *)(v0 + 16) = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v5 + 4, v5 + 12);
    *v6 = v7;
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Error during scan: %{public}@", v5, 0xCu);
    v8 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v6, 1, v8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);

    v9 = swift_errorRelease(v1);
  }
  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    swift_errorRelease(v1);

  }
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.error.getter(v10);
  if (os_log_type_enabled(v10, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v12 = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Missing peripheral after scanning!", v12, 2u);
    swift_slowDealloc(v12, -1, -1);
  }
  v13 = *(_QWORD *)(v0 + 208);
  v14 = *(_QWORD *)(v0 + 184);
  v15 = *(_QWORD *)(v0 + 192);
  v17 = *(_QWORD *)(v0 + 144);
  v16 = *(_QWORD *)(v0 + 152);
  v18 = *(_QWORD *)(v0 + 136);

  v19 = sub_100056FAC();
  v32 = swift_allocError(&type metadata for AirPodsLEPairingService.Error, v19, 0, 0);
  *v20 = 0x800000000000000BLL;
  swift_willThrow(v32);
  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v16, v18);
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v13, v14);
  v21 = *(_QWORD *)(v0 + 256);
  v22 = *(_QWORD *)(v0 + 232);
  v24 = *(_QWORD *)(v0 + 200);
  v23 = *(_QWORD *)(v0 + 208);
  v25 = *(_QWORD *)(v0 + 176);
  v26 = *(_QWORD *)(v0 + 152);
  v27 = *(_QWORD *)(v0 + 128);
  v28 = *(_QWORD *)(v0 + 96);
  v29 = *(_QWORD *)(v0 + 104);
  v31 = *(_QWORD *)(v0 + 88);
  swift_task_dealloc(*(_QWORD *)(v0 + 264));
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v29);
  swift_task_dealloc(v28);
  swift_task_dealloc(v31);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100041FD4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  unint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint8_t *v37;
  unint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  NSObject *v46;
  os_log_type_t v47;
  _BOOL4 v48;
  uint8_t *v49;
  uint8_t *v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint8_t *v56;
  uint64_t v57;
  uint64_t v58;
  NSObject *v59;
  os_log_type_t v60;
  uint64_t v61;
  uint8_t *v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint8_t *v85;
  uint8_t *v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96[3];
  uint64_t v97;
  uint64_t v98;

  v4 = v3;
  v5 = v2;
  v92 = a1;
  v7 = sub_10001A9A8((uint64_t *)&unk_10111C0A0);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v85 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v94 = (uint64_t)&v85 - v11;
  v93 = type metadata accessor for AccessoryProductInfo(0);
  v12 = *(int *)(v93 + 92);
  v95 = a2;
  v13 = (uint64_t *)(a2 + v12);
  v14 = *v13;
  v15 = v13[1];
  if (v15 >> 60 == 15)
  {
    v16 = qword_1010E98F8;
    swift_retain();
    if (v16 != -1)
      swift_once(&qword_1010E98F8, sub_100038764);
    v17 = qword_1010EC1E0;
    v18 = *(_QWORD *)algn_1010EC1E8;
    sub_10001BD08(qword_1010EC1E0, *(unint64_t *)algn_1010EC1E8);
  }
  else
  {
    swift_retain();
    v17 = v14;
    v18 = v15;
  }
  sub_10001BD08(v14, v15);
  v19 = sub_100B60988(v17, v18);
  v21 = v20;
  swift_release();
  sub_10001EF3C(v17, v18);
  if (v21 >> 60 == 15)
  {
    if (qword_1010E98F0 != -1)
      swift_once(&qword_1010E98F0, sub_10003868C);
    v22 = type metadata accessor for Logger(0);
    v23 = sub_10001A9E8(v22, (uint64_t)qword_1010EC1C8);
    v24 = Logger.logObject.getter(v23);
    v25 = static os_log_type_t.error.getter(v24);
    if (os_log_type_enabled(v24, v25))
    {
      v26 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v26 = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "Unable to generate E1 blob.", v26, 2u);
      swift_slowDealloc(v26, -1, -1);
    }

    v27 = sub_100056FAC();
    v28 = swift_allocError(&type metadata for AirPodsLEPairingService.Error, v27, 0, 0);
    *v29 = 0x8000000000000000;
    return swift_willThrow(v28);
  }
  else
  {
    v31 = sub_100B656E4();
    if (v32 >> 60 == 15)
    {
      if (qword_1010E98F0 != -1)
        swift_once(&qword_1010E98F0, sub_10003868C);
      v33 = type metadata accessor for Logger(0);
      v34 = sub_10001A9E8(v33, (uint64_t)qword_1010EC1C8);
      v35 = Logger.logObject.getter(v34);
      v36 = static os_log_type_t.error.getter(v35);
      if (os_log_type_enabled(v35, v36))
      {
        v37 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v37 = 0;
        _os_log_impl((void *)&_mh_execute_header, v35, v36, "Unable to generate FindMyNetworkId.", v37, 2u);
        swift_slowDealloc(v37, -1, -1);
      }

      v38 = sub_100056FAC();
      v39 = swift_allocError(&type metadata for AirPodsLEPairingService.Error, v38, 0, 0);
      *v40 = 0x8000000000000000;
      swift_willThrow(v39);
      return sub_10001EF3C(v19, v21);
    }
    else
    {
      v41 = v31;
      v42 = v32;
      v89 = v10;
      if (qword_1010E98F0 != -1)
        swift_once(&qword_1010E98F0, sub_10003868C);
      v43 = type metadata accessor for Logger(0);
      v44 = sub_10001A9E8(v43, (uint64_t)qword_1010EC1C8);
      sub_10001BBBC(v19, v21);
      v45 = sub_10001BBBC(v19, v21);
      v88 = v44;
      v46 = Logger.logObject.getter(v45);
      v47 = static os_log_type_t.debug.getter(v46);
      v48 = os_log_type_enabled(v46, v47);
      v90 = v5;
      v91 = v4;
      if (v48)
      {
        v49 = (uint8_t *)swift_slowAlloc(12, -1);
        v87 = swift_slowAlloc(32, -1);
        v96[0] = v87;
        *(_DWORD *)v49 = 136315138;
        v50 = v49 + 12;
        v85 = v49 + 4;
        v86 = v49;
        sub_10001BBBC(v19, v21);
        v51 = v41;
        v52 = Data.hexString.getter(v19, v21);
        v54 = v53;
        sub_10001EF3C(v19, v21);
        v55 = v52;
        v41 = v51;
        v97 = sub_100016940(v55, v54, v96);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v97, &v98, v85, v50);
        swift_bridgeObjectRelease();
        sub_10001EF3C(v19, v21);
        sub_10001EF3C(v19, v21);
        v56 = v86;
        _os_log_impl((void *)&_mh_execute_header, v46, v47, "E1: %s", v86, 0xCu);
        v57 = v87;
        swift_arrayDestroy(v87, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v57, -1, -1);
        swift_slowDealloc(v56, -1, -1);
      }
      else
      {
        sub_10001EF3C(v19, v21);
        sub_10001EF3C(v19, v21);
      }

      sub_10001BBBC(v41, v42);
      v58 = sub_10001BBBC(v41, v42);
      v59 = Logger.logObject.getter(v58);
      v60 = static os_log_type_t.debug.getter(v59);
      if (os_log_type_enabled(v59, v60))
      {
        v61 = v41;
        v62 = (uint8_t *)swift_slowAlloc(12, -1);
        v87 = swift_slowAlloc(32, -1);
        v96[0] = v87;
        *(_DWORD *)v62 = 136315138;
        v86 = v62 + 4;
        sub_10001BBBC(v41, v42);
        v63 = Data.hexString.getter(v41, v42);
        v88 = v19;
        v65 = v64;
        sub_10001EF3C(v61, v42);
        v97 = sub_100016940(v63, v65, v96);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v97, &v98, v86, v62 + 12);
        v19 = v88;
        swift_bridgeObjectRelease();
        sub_10001EF3C(v61, v42);
        sub_10001EF3C(v61, v42);
        _os_log_impl((void *)&_mh_execute_header, v59, v60, "findMyNetworkId: %s", v62, 0xCu);
        v66 = v87;
        swift_arrayDestroy(v87, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v66, -1, -1);
        swift_slowDealloc(v62, -1, -1);

        v67 = v90;
      }
      else
      {
        sub_10001EF3C(v41, v42);
        sub_10001EF3C(v41, v42);

        v67 = v90;
        v61 = v41;
      }
      v68 = *(_QWORD *)(v67 + 184);
      v69 = type metadata accessor for AccessoryMetadata(0);
      v70 = v92;
      swift_retain();
      *(_QWORD *)(v68 + 88) = sub_10072CDE0();
      *(_QWORD *)(v68 + 96) = v71;
      swift_release();
      swift_bridgeObjectRelease();
      v72 = *(_QWORD *)(v67 + 184);
      v73 = (uint64_t *)(v70 + *(int *)(v69 + 20));
      v74 = *v73;
      v75 = v73[1];
      v76 = *(_QWORD *)(v72 + 104);
      v77 = *(_QWORD *)(v72 + 112);
      *(_QWORD *)(v72 + 104) = *v73;
      *(_QWORD *)(v72 + 112) = v75;
      sub_10001BBBC(v74, v75);
      sub_10001EF3C(v76, v77);
      v78 = (uint64_t *)(*(_QWORD *)(v67 + 184) + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_findMyNetworkId);
      v79 = *v78;
      v80 = v78[1];
      *v78 = v61;
      v78[1] = v42;
      sub_10001BBBC(v61, v42);
      sub_10001EF3C(v79, v80);
      v81 = *(_QWORD *)(v67 + 184);
      v82 = v94;
      sub_10005972C(v95, v94, type metadata accessor for AccessoryProductInfo);
      (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v93 - 8) + 56))(v82, 0, 1);
      v83 = (uint64_t)v89;
      sub_100005CF0(v82, (uint64_t)v89, (uint64_t *)&unk_10111C0A0);
      v84 = v81 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_productInfo;
      swift_beginAccess(v81 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_productInfo, v96, 33, 0);
      swift_retain();
      sub_100004084(v83, v84, (uint64_t *)&unk_10111C0A0);
      swift_endAccess(v96);
      swift_release();
      CurrentLocationMonitor.requestLocation()();
      sub_10001EF3C(v61, v42);
      return sub_10001EF3C(v19, v21);
    }
  }
}

uint64_t sub_1000427DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v5 = type metadata accessor for Characteristic(0);
  v6 = sub_100006C64(&qword_1010EC4C0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for Characteristic, (uint64_t)&protocol conformance descriptor for Characteristic);
  v7 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of CharacteristicProtocol.writeWithoutResponse(data:)[1]);
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_100004C28;
  return dispatch thunk of CharacteristicProtocol.writeWithoutResponse(data:)(a3, v5, v6);
}

uint64_t sub_100042874(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v7;

  v7 = (_QWORD *)swift_task_alloc(dword_1010EC514);
  *(_QWORD *)(v5 + 16) = v7;
  *v7 = v5;
  v7[1] = sub_100004A74;
  return sub_1000428C8(a5);
}

uint64_t sub_1000428C8(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2[3] = a1;
  v2[4] = v1;
  v2[5] = *v1;
  v3 = type metadata accessor for MACAddress(0);
  v2[6] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[7] = v4;
  v2[8] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100042930, v1, 0);
}

uint64_t sub_100042930()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  _BOOL4 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;

  if (qword_1010E98F0 != -1)
    swift_once(&qword_1010E98F0, sub_10003868C);
  v1 = *(_QWORD *)(v0 + 24);
  v3 = *(_QWORD *)(v0 + 56);
  v2 = *(_QWORD *)(v0 + 64);
  v4 = *(_QWORD *)(v0 + 48);
  v5 = type metadata accessor for Logger(0);
  sub_10001A9E8(v5, (uint64_t)qword_1010EC1C8);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v1, v4);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.default.getter(v7);
  v9 = os_log_type_enabled(v7, v8);
  v11 = *(_QWORD *)(v0 + 56);
  v10 = *(_QWORD *)(v0 + 64);
  v12 = *(_QWORD *)(v0 + 48);
  if (v9)
  {
    v13 = (uint8_t *)swift_slowAlloc(12, -1);
    v22 = swift_slowAlloc(32, -1);
    v24 = v22;
    *(_DWORD *)v13 = 136446210;
    v14 = sub_100006C64((unint64_t *)&qword_1010FBAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for MACAddress, (uint64_t)&protocol conformance descriptor for MACAddress);
    v15 = dispatch thunk of CustomStringConvertible.description.getter(v12, v14);
    *(_QWORD *)(v0 + 16) = sub_100016940(v15, v16, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v13 + 4, v13 + 12);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "ackPairing with %{public}s", v13, 0xCu);
    swift_arrayDestroy(v22, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v22, -1, -1);
    swift_slowDealloc(v13, -1, -1);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v11 + 8))(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 48));
  }

  v18 = sub_100006C64(&qword_1010EC410, v17, (uint64_t (*)(uint64_t))type metadata accessor for AirPodsLEPairingService, (uint64_t)&unk_100E229E4);
  v19 = swift_task_alloc(32);
  *(_QWORD *)(v0 + 72) = v19;
  v23 = *(_OWORD *)(v0 + 32);
  *(_OWORD *)(v19 + 16) = v23;
  v20 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v0 + 80) = v20;
  *v20 = v0;
  v20[1] = sub_100042BC8;
  return withCheckedContinuation<A>(isolation:function:_:)(v20, v23, v18, 0xD00000000000001ELL, 0x8000000100EC6450, sub_100057ACC, v19, (char *)&type metadata for () + 8);
}

uint64_t sub_100042BC8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 72);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 32);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 80));
  swift_task_dealloc(v1);
  return swift_task_switch(sub_100042C28, v2, 0);
}

uint64_t sub_100042C28()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(v0 + 64));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100042C58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v3[2] = a1;
  v5 = sub_10001A9A8(&qword_1010EC638);
  v3[3] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v3[4] = v6;
  v7 = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v3[5] = v7;
  v8 = type metadata accessor for Characteristic(0);
  v9 = sub_100006C64(&qword_1010EC4C0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for Characteristic, (uint64_t)&protocol conformance descriptor for Characteristic);
  v10 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of CharacteristicProtocol.write(data:)[1]);
  v3[6] = v10;
  *v10 = v3;
  v10[1] = sub_100042D34;
  return dispatch thunk of CharacteristicProtocol.write(data:)(v7, a3, v8, v9);
}

uint64_t sub_100042D34()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v5;
  uint64_t v6;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 48);
  v3 = *(_QWORD **)v1;
  v3[7] = v0;
  swift_task_dealloc(v2);
  if (v0)
    return swift_task_switch(sub_100042E88, 0, 0);
  v5 = (_QWORD *)swift_task_alloc(async function pointer to AsyncSequence<>.reassemble()[1]);
  v3[8] = v5;
  v6 = sub_1000193A4((unint64_t *)&unk_101116020, &qword_1010EC638, (const char *)&protocol conformance descriptor for AsyncThrowingStream<A, B>);
  *v5 = v3;
  v5[1] = sub_100042DF8;
  return AsyncSequence<>.reassemble()(v3[3], v6);
}

uint64_t sub_100042DF8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)();

  v6 = *(_QWORD **)v3;
  v7 = *(_QWORD *)(*(_QWORD *)v3 + 64);
  *(_QWORD *)(*(_QWORD *)v3 + 72) = v2;
  swift_task_dealloc(v7);
  v9 = v6[4];
  v8 = v6[5];
  v10 = v6[3];
  if (v2)
  {
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
    v11 = sub_100042F00;
  }
  else
  {
    v6[10] = a2;
    v6[11] = a1;
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
    v11 = sub_100042EBC;
  }
  return swift_task_switch(v11, 0, 0);
}

uint64_t sub_100042E88()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(v0 + 40));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100042EBC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 40);
  *(int8x16_t *)*(_QWORD *)(v0 + 16) = vextq_s8(*(int8x16_t *)(v0 + 80), *(int8x16_t *)(v0 + 80), 8uLL);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100042F00()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(v0 + 40));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100042F34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v5[678] = v4;
  v5[677] = a4;
  v5[676] = a3;
  v5[675] = a2;
  v5[674] = a1;
  v6 = *(_QWORD *)(type metadata accessor for StandaloneBeacon(0) - 8);
  v5[679] = v6;
  v7 = *(_QWORD *)(v6 + 64);
  v5[680] = v7;
  v8 = (v7 + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[681] = swift_task_alloc(v8);
  v5[682] = swift_task_alloc(v8);
  v9 = *(_QWORD *)(type metadata accessor for OwnedBeaconRecord(0) - 8);
  v5[683] = v9;
  v10 = *(_QWORD *)(v9 + 64);
  v5[684] = v10;
  v11 = (v10 + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[685] = swift_task_alloc(v11);
  v5[686] = swift_task_alloc(v11);
  v12 = type metadata accessor for AirPodsLEPairingService.BeaconCreationResult(0);
  v5[687] = v12;
  v13 = (*(_QWORD *)(*(_QWORD *)(v12 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[688] = swift_task_alloc(v13);
  v5[689] = swift_task_alloc(v13);
  v14 = sub_10001A9A8(&qword_1010EC528);
  v5[690] = v14;
  v5[691] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v14 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for OwnedBeaconGroup(0);
  v5[692] = v15;
  v16 = *(_QWORD *)(v15 - 8);
  v5[693] = v16;
  v17 = (*(_QWORD *)(v16 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[694] = swift_task_alloc(v17);
  v5[695] = swift_task_alloc(v17);
  v18 = type metadata accessor for String.Encoding(0);
  v5[696] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v18 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = (*(_QWORD *)(*(_QWORD *)(sub_10001A9A8((uint64_t *)&unk_1010FF7F0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[697] = swift_task_alloc(v19);
  v5[698] = swift_task_alloc(v19);
  v5[699] = swift_task_alloc(v19);
  v5[700] = swift_task_alloc(v19);
  v20 = type metadata accessor for Logger(0);
  v5[701] = v20;
  v21 = *(_QWORD *)(v20 - 8);
  v5[702] = v21;
  v22 = (*(_QWORD *)(v21 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[703] = swift_task_alloc(v22);
  v5[704] = swift_task_alloc(v22);
  v5[705] = swift_task_alloc(v22);
  v5[706] = swift_task_alloc(v22);
  v5[707] = swift_task_alloc(v22);
  v5[708] = swift_task_alloc(v22);
  v5[709] = swift_task_alloc(v22);
  v5[710] = swift_task_alloc(v22);
  v5[711] = swift_task_alloc(v22);
  v5[712] = swift_task_alloc(v22);
  v5[713] = swift_task_alloc(v22);
  v5[714] = swift_task_alloc(v22);
  v5[715] = swift_task_alloc(v22);
  v5[716] = swift_task_alloc(v22);
  v5[717] = swift_task_alloc(v22);
  v5[718] = swift_task_alloc(v22);
  v5[719] = swift_task_alloc(v22);
  v5[720] = swift_task_alloc(v22);
  v5[721] = swift_task_alloc(v22);
  v5[722] = swift_task_alloc(v22);
  v5[723] = swift_task_alloc(v22);
  v5[724] = swift_task_alloc(v22);
  v5[725] = swift_task_alloc(v22);
  v5[726] = swift_task_alloc(v22);
  v5[727] = swift_task_alloc(v22);
  v5[728] = swift_task_alloc(v22);
  v5[729] = swift_task_alloc(v22);
  v5[730] = swift_task_alloc(v22);
  v5[731] = swift_task_alloc(v22);
  v5[732] = swift_task_alloc(v22);
  v5[733] = swift_task_alloc(v22);
  v5[734] = swift_task_alloc(v22);
  v5[735] = swift_task_alloc(v22);
  v5[736] = swift_task_alloc(v22);
  v5[737] = swift_task_alloc(v22);
  v5[738] = swift_task_alloc(v22);
  v5[739] = swift_task_alloc(v22);
  v5[740] = swift_task_alloc(v22);
  v5[741] = swift_task_alloc(v22);
  v5[742] = swift_task_alloc(v22);
  v23 = sub_10001A9A8((uint64_t *)&unk_1010F9890);
  v5[743] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v23 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = type metadata accessor for MACAddress(0);
  v5[744] = v24;
  v25 = *(_QWORD *)(v24 - 8);
  v5[745] = v25;
  v5[746] = swift_task_alloc((*(_QWORD *)(v25 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100043338, v4, 0);
}

uint64_t sub_100043338()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t (*v3)(void);

  swift_retain();
  sub_100038574((uint64_t)(v0 + 644));
  swift_release();
  sub_10001AA44(v0 + 644, v0[647]);
  v3 = (uint64_t (*)(void))((char *)&dword_1010EBB40 + dword_1010EBB40);
  v1 = (_QWORD *)swift_task_alloc(unk_1010EBB44);
  v0[747] = v1;
  *v1 = v0;
  v1[1] = sub_1000433C8;
  return v3();
}

uint64_t sub_1000433C8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 5976);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 5424);
  *(_QWORD *)(*(_QWORD *)v1 + 5984) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100043428, v3, 0);
}

uint64_t sub_100043428()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;

  v1 = (_QWORD *)(v0 + 5152);
  if (*(_QWORD *)(v0 + 5984))
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    v2 = type metadata accessor for Peripheral(0);
    v3 = sub_100006C64(&qword_1010EC4A0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for Peripheral, (uint64_t)&protocol conformance descriptor for Peripheral);
    v4 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of PeripheralProtocol.macAddress.getter[1]);
    *(_QWORD *)(v0 + 5992) = v4;
    *v4 = v0;
    v4[1] = sub_100043850;
    return dispatch thunk of PeripheralProtocol.macAddress.getter(*(_QWORD *)(v0 + 5944), v2, v3);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    v6 = sub_100033220();
    v63 = swift_allocError(&type metadata for DaemonError, v6, 0, 0);
    *v7 = 0xD000000000000010;
    v7[1] = 0x8000000100EC6470;
    swift_willThrow(v63);
    v8 = *(_QWORD *)(v0 + 5944);
    v9 = *(_QWORD *)(v0 + 5936);
    v10 = *(_QWORD *)(v0 + 5928);
    v11 = *(_QWORD *)(v0 + 5920);
    v12 = *(_QWORD *)(v0 + 5912);
    v13 = *(_QWORD *)(v0 + 5904);
    v14 = *(_QWORD *)(v0 + 5896);
    v15 = *(_QWORD *)(v0 + 5888);
    v16 = *(_QWORD *)(v0 + 5880);
    v17 = *(_QWORD *)(v0 + 5872);
    v18 = *(_QWORD *)(v0 + 5864);
    v19 = *(_QWORD *)(v0 + 5856);
    v20 = *(_QWORD *)(v0 + 5848);
    v21 = *(_QWORD *)(v0 + 5840);
    v22 = *(_QWORD *)(v0 + 5832);
    v23 = *(_QWORD *)(v0 + 5824);
    v24 = *(_QWORD *)(v0 + 5816);
    v25 = *(_QWORD *)(v0 + 5808);
    v26 = *(_QWORD *)(v0 + 5800);
    v27 = *(_QWORD *)(v0 + 5792);
    v28 = *(_QWORD *)(v0 + 5784);
    v29 = *(_QWORD *)(v0 + 5776);
    v30 = *(_QWORD *)(v0 + 5768);
    v31 = *(_QWORD *)(v0 + 5760);
    v32 = *(_QWORD *)(v0 + 5752);
    v33 = *(_QWORD *)(v0 + 5744);
    v34 = *(_QWORD *)(v0 + 5736);
    v35 = *(_QWORD *)(v0 + 5728);
    v36 = *(_QWORD *)(v0 + 5720);
    v37 = *(_QWORD *)(v0 + 5712);
    v38 = *(_QWORD *)(v0 + 5704);
    v39 = *(_QWORD *)(v0 + 5696);
    v40 = *(_QWORD *)(v0 + 5688);
    v41 = *(_QWORD *)(v0 + 5680);
    v42 = *(_QWORD *)(v0 + 5672);
    v43 = *(_QWORD *)(v0 + 5664);
    v44 = *(_QWORD *)(v0 + 5656);
    v45 = *(_QWORD *)(v0 + 5648);
    v46 = *(_QWORD *)(v0 + 5640);
    v47 = *(_QWORD *)(v0 + 5632);
    v48 = *(_QWORD *)(v0 + 5624);
    v49 = *(_QWORD *)(v0 + 5600);
    v50 = *(_QWORD *)(v0 + 5592);
    v51 = *(_QWORD *)(v0 + 5584);
    v52 = *(_QWORD *)(v0 + 5576);
    v53 = *(_QWORD *)(v0 + 5568);
    v54 = *(_QWORD *)(v0 + 5560);
    v55 = *(_QWORD *)(v0 + 5552);
    v56 = *(_QWORD *)(v0 + 5528);
    v57 = *(_QWORD *)(v0 + 5512);
    v58 = *(_QWORD *)(v0 + 5504);
    v59 = *(_QWORD *)(v0 + 5488);
    v60 = *(_QWORD *)(v0 + 5480);
    v61 = *(_QWORD *)(v0 + 5456);
    v62 = *(_QWORD *)(v0 + 5448);
    swift_task_dealloc(*(_QWORD *)(v0 + 5968));
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    swift_task_dealloc(v36);
    swift_task_dealloc(v37);
    swift_task_dealloc(v38);
    swift_task_dealloc(v39);
    swift_task_dealloc(v40);
    swift_task_dealloc(v41);
    swift_task_dealloc(v42);
    swift_task_dealloc(v43);
    swift_task_dealloc(v44);
    swift_task_dealloc(v45);
    swift_task_dealloc(v46);
    swift_task_dealloc(v47);
    swift_task_dealloc(v48);
    swift_task_dealloc(v49);
    swift_task_dealloc(v50);
    swift_task_dealloc(v51);
    swift_task_dealloc(v52);
    swift_task_dealloc(v53);
    swift_task_dealloc(v54);
    swift_task_dealloc(v55);
    swift_task_dealloc(v56);
    swift_task_dealloc(v57);
    swift_task_dealloc(v58);
    swift_task_dealloc(v59);
    swift_task_dealloc(v60);
    swift_task_dealloc(v61);
    swift_task_dealloc(v62);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100043850()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 5424);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 5992));
  return swift_task_switch(sub_1000438A8, v1, 0);
}

uint64_t sub_1000438A8()
{
  __int128 *v0;
  __int128 *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  _QWORD *v12;
  os_log_type_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint8_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(uint64_t, uint64_t);
  unint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _OWORD *v52;
  NSObject *v53;
  os_log_type_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint8_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  NSObject *v74;
  NSObject *v75;
  NSObject *v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t *v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  NSObject *v85;
  os_log_type_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  uint8_t *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  _QWORD *v105;
  __int128 *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  NSObject *v110;
  os_log_type_t v111;
  _QWORD *v112;
  BOOL v113;
  uint64_t v114;
  uint64_t v115;
  uint8_t *v116;
  const void *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  NSObject *v121;
  os_log_type_t v122;
  _QWORD *v123;
  BOOL v124;
  uint64_t v125;
  uint64_t v126;
  uint8_t *v127;
  uint64_t v128;
  uint64_t v129;
  NSObject *v130;
  os_log_type_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  _QWORD *v137;
  uint8_t *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  _QWORD *v144;
  uint64_t v145;
  NSObject *v146;
  os_log_type_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  _QWORD *v153;
  uint8_t *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  __int128 v159;
  __int128 v160;
  uint64_t v161;
  unint64_t v162;
  char v163;
  __int128 *v164;
  ValueMetadata *v165;
  unint64_t v166;
  uint64_t v167;
  int v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t *v172;
  NSObject *v173;
  os_log_type_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  _QWORD *v180;
  uint8_t *v181;
  uint64_t v182;
  __int128 *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  unint64_t v188;
  uint64_t v189;
  unint64_t *v190;
  unint64_t v191;
  uint64_t v192;
  uint64_t *v193;
  uint64_t v194;
  unint64_t v195;
  uint64_t v196;
  unint64_t v197;
  uint64_t v198;
  unint64_t v199;
  uint64_t v200;
  NSObject *v201;
  os_log_type_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  _QWORD *v208;
  uint8_t *v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t *v215;
  uint64_t *v216;
  os_log_type_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  _QWORD *v223;
  uint8_t *v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  _QWORD *v230;
  uint64_t v231;
  NSObject *v232;
  os_log_type_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  _QWORD *v239;
  uint8_t *v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  NSObject *v246;
  os_log_type_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  _QWORD *v253;
  uint8_t *v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t *v261;
  NSObject *v262;
  os_log_type_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  _QWORD *v269;
  uint8_t *v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  unint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  __int128 *v288;
  uint64_t v289;
  uint64_t (*v290)(void);
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  unint64_t v296;
  unint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  unint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  NSObject *v308;
  os_log_type_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  _QWORD *v316;
  uint8_t *v317;
  void (*v318)(uint64_t, uint64_t);
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t *v325;
  NSObject *v326;
  os_log_type_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  _QWORD *v333;
  uint8_t *v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  unint64_t v338;
  uint64_t v339;
  unint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  unint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  __int128 *v349;
  uint64_t *v350;
  uint64_t v351;
  unint64_t v352;
  uint64_t v353;
  unint64_t v354;
  uint64_t *v355;
  unint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  NSObject *v360;
  os_log_type_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  _QWORD *v367;
  uint8_t *v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  _QWORD *v375;
  __int128 **v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t *v380;
  NSObject *v381;
  os_log_type_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  _QWORD *v388;
  uint8_t *v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  _OWORD *v395;
  __int128 v396;
  __int128 v397;
  _OWORD *v398;
  __int128 v399;
  __int128 v400;
  uint64_t *v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  _QWORD *v411;
  uint8_t *v412;
  uint64_t v413;
  __int128 *v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t *v421;
  NSObject *v422;
  os_log_type_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  _QWORD *v429;
  uint8_t *v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  os_log_type_t v434;
  __int128 *v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  NSObject *v441;
  os_log_type_t v442;
  __int128 *v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  _QWORD *v449;
  uint8_t *v450;
  uint64_t v451;
  void (*v452)(uint64_t, uint64_t);
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  void (*v457)(uint64_t, uint64_t);
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  _OWORD *v464;
  __int128 v465;
  __int128 v466;
  uint64_t *v467;
  NSObject *v468;
  os_log_type_t v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  _QWORD *v475;
  uint8_t *v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t v484;
  uint64_t v485;
  uint64_t v486;
  uint64_t *v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t v493;
  uint64_t v494;
  __int128 *v495;
  uint64_t v496;
  uint64_t v497;
  _QWORD *v498;
  uint8_t *v499;
  uint64_t v500;
  uint64_t v501;
  uint64_t v502;
  uint64_t v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  uint64_t v508;
  uint64_t v509;
  uint64_t v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  unint64_t v514;
  const void *v515;
  const void *v516;
  uint64_t v517;
  uint64_t v518;
  uint64_t v519;
  uint64_t v520;
  uint64_t v521;
  uint64_t v522;
  uint64_t v523;
  __int128 *v524;
  uint64_t v525;
  uint64_t v526;
  uint64_t v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t *v530;
  uint64_t v531;
  uint64_t v532;
  uint64_t v533;
  uint64_t v534;
  uint64_t v535;
  uint64_t v536;
  uint64_t v537;
  uint64_t v538;
  uint64_t v539;
  _QWORD *v540;
  uint8_t *v541;
  uint64_t v542;
  __int128 *v543;
  uint64_t v544;
  uint64_t v545;
  uint64_t v546;
  uint64_t v547;
  uint64_t *v548;
  NSObject *v549;
  os_log_type_t v550;
  uint64_t v551;
  uint64_t v552;
  uint64_t v553;
  uint64_t v554;
  uint64_t v555;
  _QWORD *v556;
  uint8_t *v557;
  __int128 *v558;
  uint64_t v559;
  uint64_t v560;
  uint64_t v561;
  uint64_t v562;
  uint64_t v563;
  uint64_t v564;
  NSObject *v565;
  _QWORD *v566;
  os_log_type_t v567;
  _BOOL4 v568;
  uint64_t v569;
  uint64_t v570;
  uint8_t *v571;
  uint64_t v572;
  uint64_t v573;
  uint64_t v574;
  unint64_t v575;
  uint64_t v576;
  _QWORD *v577;
  uint64_t v578;
  uint64_t v579;
  uint64_t v580;
  uint64_t *v581;
  NSObject *v582;
  os_log_type_t v583;
  uint64_t v584;
  uint64_t v585;
  uint64_t v586;
  uint64_t v587;
  uint64_t v588;
  _QWORD *v589;
  uint8_t *v590;
  uint64_t v591;
  uint64_t v592;
  uint64_t v593;
  __int128 v594;
  __int128 v595;
  __int128 **v596;
  uint64_t v597;
  uint64_t v598;
  uint64_t v599;
  uint64_t *v600;
  NSObject *v601;
  os_log_type_t v602;
  uint64_t v603;
  uint64_t v604;
  uint64_t v605;
  uint64_t v606;
  uint64_t v607;
  _QWORD *v608;
  uint8_t *v609;
  uint64_t v610;
  uint64_t v611;
  uint64_t v612;
  uint64_t v613;
  uint64_t v614;
  uint64_t v615;
  uint64_t *v616;
  NSObject *v617;
  os_log_type_t v618;
  uint64_t v619;
  uint64_t v620;
  uint64_t v621;
  uint64_t v622;
  uint64_t v623;
  _QWORD *v624;
  uint8_t *v625;
  uint64_t v626;
  uint64_t v627;
  uint64_t v628;
  uint64_t v629;
  uint64_t v630;
  uint64_t v631;
  uint64_t *v632;
  NSObject *v633;
  os_log_type_t v634;
  uint64_t v635;
  uint64_t v636;
  uint64_t v637;
  uint64_t v638;
  uint64_t v639;
  _QWORD *v640;
  uint8_t *v641;
  uint64_t v642;
  uint64_t v643;
  uint64_t v644;
  uint64_t v645;
  uint64_t v646;
  uint64_t v647;
  uint64_t v648;
  uint64_t v649;
  unint64_t v650;
  uint64_t v651;
  uint64_t v652;
  unint64_t v653;
  uint64_t v654;
  unint64_t v655;
  uint64_t *v656;
  uint64_t v657;
  unint64_t v658;
  uint64_t v659;
  unint64_t v660;
  uint64_t *v661;
  uint64_t v662;
  unint64_t v663;
  uint64_t v664;
  unint64_t v665;
  uint64_t *v666;
  uint64_t v667;
  unint64_t v668;
  uint64_t v669;
  unint64_t v670;
  uint64_t *v671;
  uint64_t v672;
  unint64_t v673;
  uint64_t v674;
  unint64_t v675;
  uint64_t v676;
  uint64_t v677;
  uint64_t v678;
  unint64_t v679;
  unint64_t v680;
  uint64_t v681;
  uint64_t v682;
  uint64_t v683;
  unint64_t v684;
  unint64_t v685;
  uint64_t v686;
  uint64_t v687;
  uint64_t v688;
  NSObject *v689;
  os_log_type_t v690;
  uint64_t v691;
  uint64_t v692;
  uint64_t v693;
  uint64_t v694;
  uint64_t v695;
  _QWORD *v696;
  uint8_t *v697;
  uint64_t v698;
  uint64_t v699;
  uint64_t v700;
  uint64_t v701;
  void (*v702)(uint64_t, uint64_t);
  uint64_t v703;
  uint64_t v704;
  uint64_t v705;
  uint64_t v706;
  uint64_t *v707;
  uint64_t v708;
  unint64_t v709;
  uint64_t *v710;
  uint64_t v711;
  unint64_t v712;
  uint64_t v713;
  unint64_t v714;
  uint64_t *v715;
  uint64_t v716;
  unint64_t v717;
  uint64_t v718;
  unint64_t v719;
  uint64_t *v720;
  uint64_t v721;
  unint64_t v722;
  uint64_t v723;
  unint64_t v724;
  uint64_t *v725;
  uint64_t v726;
  unint64_t v727;
  uint64_t v728;
  uint64_t v729;
  uint64_t v730;
  uint64_t v731;
  __int128 **v732;
  __int128 **v733;
  uint64_t v734;
  __int128 *v735;
  uint64_t v736;
  uint64_t v737;
  uint64_t v738;
  uint64_t v739;
  uint64_t v740;
  uint64_t v741;
  uint64_t v742;
  uint64_t v743;
  uint64_t v744;
  uint64_t v745;
  uint64_t v746;
  uint64_t v747;
  uint64_t v748;
  uint64_t v749;
  uint64_t v750;
  uint64_t v751;
  uint64_t v752;
  uint64_t v753;
  uint64_t v754;
  uint64_t v755;
  uint64_t v756;
  uint64_t v757;
  uint64_t v758;
  uint64_t v759;
  uint64_t v760;
  uint64_t v761;
  uint64_t v762;
  uint64_t v763;
  uint64_t v764;
  uint64_t v765;
  uint64_t v766;
  uint64_t v767;
  uint64_t v768;
  uint64_t v769;
  uint64_t v770;
  uint64_t v771;
  uint64_t v772;
  uint64_t v773;
  uint64_t v774;
  uint64_t v775;
  uint64_t v776;
  uint64_t v777;
  uint64_t v778;
  uint64_t v779;
  uint64_t v780;
  uint64_t v781;
  uint64_t v782;
  uint64_t v783;
  uint64_t v784;
  uint64_t v785;
  uint64_t v786;
  uint64_t v787;
  uint64_t v788;
  uint64_t v789;
  uint64_t v790;
  uint64_t v791;
  uint64_t v792;
  uint64_t v793;
  uint64_t v794;
  uint64_t v795;
  uint64_t v796;
  uint64_t v797;
  uint64_t v798;
  uint64_t v799;
  uint64_t v800;
  uint64_t v801;
  uint8_t *v802;
  uint8_t *v803;
  uint64_t v804;
  uint64_t v805;
  unint64_t v806;
  uint64_t v807;
  uint64_t v808;
  uint64_t v809;
  uint64_t v810;
  uint64_t v811;
  unint64_t v812;
  uint64_t v813;
  uint8_t *v814;
  uint64_t v815;
  uint64_t v816;
  uint64_t v817;
  uint64_t v818;
  uint64_t v819;
  NSObject *v820;
  NSObject *v821;
  NSObject *v822;
  os_log_type_t v823;
  NSObject *v824;
  NSObject *v825;
  NSObject *v826;
  NSObject *v827;
  NSObject *v828;
  NSObject *v829;
  os_log_type_t v830;
  NSObject *v831;
  uint64_t v832;
  uint64_t v833;
  uint64_t v834;
  uint64_t v835;
  NSObject *v836;
  uint8_t *v837;
  NSObject *v838;
  uint8_t *v839;
  NSObject *v840;
  uint8_t *v841;
  uint8_t *v842;
  os_log_type_t v843;
  NSObject *v844;
  NSObject *v845;
  uint8_t *v846;
  void (*v847)(uint64_t, uint64_t);
  uint64_t v848;
  uint64_t v849;
  uint64_t v850;
  uint64_t v851;
  const void *v852;
  uint64_t v853;
  uint64_t *v854;
  void *v855;
  uint64_t v856;
  uint64_t v857;
  uint8_t *v858;
  uint64_t v859;
  const void *v860;
  uint64_t v861;
  uint64_t v862;
  uint64_t v863;
  uint64_t v864;
  unint64_t v865;
  uint64_t v866;
  uint64_t v867;
  uint64_t v868;
  uint64_t v869;
  uint64_t v870;
  uint64_t v871;
  void (*v872)(uint64_t, uint64_t, uint64_t);
  uint8_t *v873;
  uint8_t *v874;
  uint8_t *v875;
  uint8_t *v876;
  uint8_t *v877;
  uint64_t v878;
  uint64_t v879;
  uint8_t *v880;
  uint8_t *v881;
  uint8_t *v882;
  uint64_t v883;
  _OWORD v884[2];

  v1 = v0;
  v2 = *((_QWORD *)v0 + 745);
  v3 = *((_QWORD *)v0 + 744);
  v4 = *((_QWORD *)v0 + 743);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v4, 1, v3) == 1)
  {
    v5 = *((_QWORD *)v1 + 742);
    v6 = *((_QWORD *)v1 + 702);
    v7 = *((_QWORD *)v1 + 701);
    sub_100004048(v4, (uint64_t *)&unk_1010F9890);
    v8 = sub_10003871C();
    v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v5, v8, v7);
    v10 = Logger.logObject.getter(v9);
    v11 = static os_log_type_t.error.getter(v10);
    v12 = sub_100BD13F8(0);
    v13 = v11;
    v14 = os_log_type_enabled(v10, v11);
    v15 = *((_QWORD *)v1 + 742);
    v16 = *((_QWORD *)v1 + 702);
    v17 = *((_QWORD *)v1 + 701);
    if (v14)
    {
      v18 = (uint8_t *)sub_1006948A0(2);
      v883 = 0;
      *(_QWORD *)&v884[0] = 0;
      *(_WORD *)v18 = 0;
      v882 = v18 + 2;
      sub_100A3DD1C((uint64_t)v12, (uint64_t)&v882, (uint64_t)&v883, (uint64_t)v884);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v10, v13, "Peripheral is missing MAC address!", v18, 2u);
      sub_100694894((uint64_t)v18);

    }
    else
    {

      swift_bridgeObjectRelease();
    }
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v15, v17);
    v45 = sub_100056FAC();
    v46 = swift_allocError(&type metadata for AirPodsLEPairingService.Error, v45, 0, 0);
    *v47 = 0x8000000000000008;
    swift_willThrow(v46);
    swift_release();
    goto LABEL_58;
  }
  v19 = *((_QWORD *)v1 + 676);
  (*(void (**)(_QWORD, uint64_t, uint64_t))(v2 + 32))(*((_QWORD *)v1 + 746), v4, v3);
  sub_100057DB8(v19, (uint64_t)(v1 + 305));
  v20 = sub_10001A9A8(&qword_1010EC530);
  v21 = swift_dynamicCast(v1 + 183, v1 + 305, v20, &type metadata for AirPodsSWPairingCommand, 6);
  v22 = *((_QWORD *)v1 + 702);
  v23 = *((_QWORD *)v1 + 701);
  if ((v21 & 1) == 0)
  {
    v48 = *((_QWORD *)v1 + 740);
    v49 = *((_QWORD *)v1 + 676);
    v50 = sub_10003871C();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v22 + 16))(v48, v50, v23);
    sub_100057DB8(v49, (uint64_t)(v1 + 308));
    v51 = swift_allocObject(&unk_101050758, 64, 7);
    v52 = sub_100057E20(v1 + 308, (_OWORD *)(v51 + 16));
    v53 = Logger.logObject.getter(v52);
    v54 = static os_log_type_t.error.getter(v53);
    v55 = swift_allocObject(&unk_101050780, 17, 7);
    *(_BYTE *)(v55 + 16) = 34;
    v56 = swift_allocObject(&unk_1010507A8, 17, 7);
    *(_BYTE *)(v56 + 16) = 8;
    v57 = swift_allocObject(&unk_1010507D0, 32, 7);
    *(_QWORD *)(v57 + 16) = sub_100057E38;
    *(_QWORD *)(v57 + 24) = v51;
    v58 = swift_allocObject(&unk_1010507F8, 32, 7);
    *(_QWORD *)(v58 + 16) = sub_10001D850;
    *(_QWORD *)(v58 + 24) = v57;
    v59 = sub_10001A9A8(&qword_1010EC538);
    v60 = swift_allocObject(v59, 80, 7);
    sub_100882D28(v60, 3);
    *v61 = sub_100057E50;
    v61[1] = v55;
    v61[2] = sub_10005CBC4;
    v61[3] = v56;
    v61[4] = sub_100057E68;
    v61[5] = v58;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v53, v54))
    {
      v62 = (uint8_t *)sub_1006948A0(12);
      v63 = swift_slowAlloc(32, -1);
      v882 = 0;
      v883 = v63;
      v873 = v62;
      *(_WORD *)v62 = 258;
      v881 = v62 + 2;
      *(_QWORD *)&v884[0] = sub_100057E50;
      *((_QWORD *)&v884[0] + 1) = v55;
      sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))v884, (uint64_t)&v881, (uint64_t)&v882, (uint64_t)&v883);
      swift_release();
      *(_QWORD *)&v884[0] = sub_10005CBC4;
      *((_QWORD *)&v884[0] + 1) = v56;
      sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))v884, (uint64_t)&v881, (uint64_t)&v882, (uint64_t)&v883);
      swift_release();
      *(_QWORD *)&v884[0] = sub_100057E68;
      *((_QWORD *)&v884[0] + 1) = v58;
      sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))v884, (uint64_t)&v881, (uint64_t)&v882, (uint64_t)&v883);
      v64 = *((_QWORD *)v1 + 740);
      v65 = *((_QWORD *)v1 + 702);
      v66 = *((_QWORD *)v1 + 701);
      swift_release();
      _os_log_impl((void *)&_mh_execute_header, v53, v54, "Invalid command from payload %{public}s", v873, 0xCu);
      swift_arrayDestroy(v63, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v63, -1, -1);
      sub_100694894((uint64_t)v873);

      (*(void (**)(uint64_t, uint64_t))(v65 + 8))(v64, v66);
    }
    else
    {
      v97 = *((_QWORD *)v1 + 740);
      v98 = *((_QWORD *)v1 + 702);
      v99 = *((_QWORD *)v1 + 701);

      swift_release();
      swift_release();
      swift_release();
      (*(void (**)(uint64_t, uint64_t))(v98 + 8))(v97, v99);
    }
    v100 = *((_QWORD *)v1 + 746);
    v101 = *((_QWORD *)v1 + 745);
    v102 = *((_QWORD *)v1 + 744);
    v103 = sub_100056FAC();
    v104 = swift_allocError(&type metadata for AirPodsLEPairingService.Error, v103, 0, 0);
    *v105 = 0x8000000000000006;
    swift_willThrow(v104);
    swift_release();
    goto LABEL_57;
  }
  v24 = *((_QWORD *)v1 + 741);
  sub_100057230(v1 + 183, (char *)v1 + 552);
  v852 = v1 + 216;
  sub_100057230(v1 + 183, v1 + 216);
  v25 = sub_10003871C();
  *((_QWORD *)v1 + 750) = v25;
  v26 = *(void (**)(_QWORD))(v22 + 16);
  *((_QWORD *)v1 + 751) = v26;
  v867 = v25;
  v872 = (void (*)(uint64_t, uint64_t, uint64_t))v26;
  v26(v24);
  v27 = swift_allocObject(&unk_101050820, 280, 7);
  sub_100057230((char *)v1 + 552, (void *)(v27 + 16));
  v860 = (char *)v1 + 552;
  v28 = sub_10005726C((uint64_t)v1 + 552, (void (*)(void))sub_10001BBBC);
  v29 = Logger.logObject.getter(v28);
  v30 = static os_log_type_t.default.getter(v29);
  v31 = swift_allocObject(&unk_101050848, 17, 7);
  *(_BYTE *)(v31 + 16) = 34;
  v32 = swift_allocObject(&unk_101050870, 17, 7);
  *(_BYTE *)(v32 + 16) = 8;
  v33 = swift_allocObject(&unk_101050898, 32, 7);
  *(_QWORD *)(v33 + 16) = sub_100057EEC;
  *(_QWORD *)(v33 + 24) = v27;
  v34 = swift_allocObject(&unk_1010508C0, 32, 7);
  *(_QWORD *)(v34 + 16) = sub_10005CBA4;
  *(_QWORD *)(v34 + 24) = v33;
  v35 = sub_10001A9A8(&qword_1010EC538);
  *((_QWORD *)v1 + 752) = v35;
  v863 = v35;
  v36 = swift_allocObject(v35, 80, 7);
  sub_100882D28(v36, 3);
  *v37 = sub_10005CBC4;
  v37[1] = v31;
  v37[2] = sub_10005CBC4;
  v37[3] = v32;
  v37[4] = sub_10005CBB4;
  v37[5] = v34;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRelease();
  v735 = v1;
  if (os_log_type_enabled(v29, v30))
  {
    v38 = (uint8_t *)sub_1006948A0(12);
    v39 = swift_slowAlloc(32, -1);
    v882 = 0;
    v883 = v39;
    v846 = v38;
    *(_WORD *)v38 = 258;
    v881 = v38 + 2;
    *(_QWORD *)&v884[0] = sub_10005CBC4;
    *((_QWORD *)&v884[0] + 1) = v31;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))v884, (uint64_t)&v881, (uint64_t)&v882, (uint64_t)&v883);
    swift_release();
    *(_QWORD *)&v884[0] = sub_10005CBC4;
    *((_QWORD *)&v884[0] + 1) = v32;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))v884, (uint64_t)&v881, (uint64_t)&v882, (uint64_t)&v883);
    swift_release();
    *(_QWORD *)&v884[0] = sub_10005CBB4;
    *((_QWORD *)&v884[0] + 1) = v34;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))v884, (uint64_t)&v881, (uint64_t)&v882, (uint64_t)&v883);
    v40 = *((_QWORD *)v735 + 741);
    v41 = *((_QWORD *)v735 + 702);
    v42 = *((_QWORD *)v735 + 701);
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, v29, v30, "Received command: %{public}s", v846, 0xCu);
    swift_arrayDestroy(v39, 1, (char *)&type metadata for Any + 8);
    v43 = v39;
    v1 = v735;
    swift_slowDealloc(v43, -1, -1);
    sub_100694894((uint64_t)v846);

    v44 = *(void (**)(uint64_t, uint64_t))(v41 + 8);
    v44(v40, v42);
  }
  else
  {
    v67 = *((_QWORD *)v1 + 741);
    v68 = *((_QWORD *)v1 + 702);
    v69 = *((_QWORD *)v1 + 701);

    swift_release();
    swift_release();
    swift_release();
    v44 = *(void (**)(uint64_t, uint64_t))(v68 + 8);
    v44(v67, v69);
  }
  *((_QWORD *)v1 + 753) = v44;
  sub_100057230(v860, (char *)v1 + 2664);
  v70 = sub_10005784C((uint64_t)v1 + 2664);
  v847 = v44;
  if (v70 != 4)
  {
    if (v70 != 2)
    {
      if (!v70)
      {
        v71 = *((_QWORD *)v1 + 739);
        v72 = *((_QWORD *)v1 + 701);
        v73 = (uint64_t *)sub_10005A21C((uint64_t)v1 + 2664);
        v74 = *v73;
        *((_QWORD *)v1 + 754) = *v73;
        v75 = v73[1];
        *((_QWORD *)v1 + 755) = v75;
        v76 = v73[2];
        *((_QWORD *)v1 + 756) = v76;
        v77 = v73[3];
        *((_QWORD *)v1 + 757) = v77;
        v872(v71, v867, v72);
        v78 = (_QWORD *)swift_allocObject(&unk_101052468, 48, 7);
        v825 = v75;
        v836 = v74;
        v78[2] = v74;
        v78[3] = v75;
        v820 = v76;
        v78[4] = v76;
        v78[5] = v77;
        sub_100057230(v852, v1 + 249);
        v79 = (uint64_t *)sub_10005A21C((uint64_t)(v1 + 249));
        v80 = *v79;
        v81 = v79[1];
        v82 = v79[2];
        v83 = v79[3];
        sub_10001BBBC(*v79, v81);
        sub_10001BBBC(v82, v83);
        v806 = v81;
        v809 = v80;
        sub_10001BBBC(v80, v81);
        v853 = v82;
        v812 = v83;
        v84 = sub_10001BBBC(v82, v83);
        v85 = Logger.logObject.getter(v84);
        v86 = static os_log_type_t.default.getter(v85);
        v87 = swift_allocObject(&unk_101052490, 17, 7);
        *(_BYTE *)(v87 + 16) = 32;
        v88 = swift_allocObject(&unk_1010524B8, 17, 7);
        *(_BYTE *)(v88 + 16) = 8;
        v89 = swift_allocObject(&unk_1010524E0, 32, 7);
        *(_QWORD *)(v89 + 16) = sub_100059480;
        *(_QWORD *)(v89 + 24) = v78;
        v90 = swift_allocObject(&unk_101052508, 32, 7);
        *(_QWORD *)(v90 + 16) = sub_10005CBA4;
        *(_QWORD *)(v90 + 24) = v89;
        v91 = swift_allocObject(v863, 80, 7);
        sub_100882D28(v91, 3);
        *v92 = sub_10005CBC4;
        v92[1] = v87;
        v92[2] = sub_10005CBC4;
        v92[3] = v88;
        v92[4] = sub_10005CBB4;
        v92[5] = v90;
        swift_retain();
        swift_retain();
        swift_retain();
        swift_bridgeObjectRelease();
        if (os_log_type_enabled(v85, v86))
        {
          v93 = (uint8_t *)sub_1006948A0(12);
          v94 = swift_slowAlloc(32, -1);
          v882 = 0;
          v883 = v94;
          v802 = v93;
          *(_WORD *)v93 = 258;
          v881 = v93 + 2;
          *(_QWORD *)&v884[0] = sub_10005CBC4;
          *((_QWORD *)&v884[0] + 1) = v87;
          sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))v884, (uint64_t)&v881, (uint64_t)&v882, (uint64_t)&v883);
          swift_release();
          *(_QWORD *)&v884[0] = sub_10005CBC4;
          *((_QWORD *)&v884[0] + 1) = v88;
          sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))v884, (uint64_t)&v881, (uint64_t)&v882, (uint64_t)&v883);
          swift_release();
          *(_QWORD *)&v884[0] = sub_10005CBB4;
          *((_QWORD *)&v884[0] + 1) = v90;
          sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))v884, (uint64_t)&v881, (uint64_t)&v882, (uint64_t)&v883);
          v1 = v735;
          v95 = *((_QWORD *)v735 + 739);
          v96 = *((_QWORD *)v735 + 701);
          swift_release();
          _os_log_impl((void *)&_mh_execute_header, v85, v86, "Received beacon group data %s", v802, 0xCu);
          swift_arrayDestroy(v94, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v94, -1, -1);
          sub_100694894((uint64_t)v802);

          v44(v95, v96);
        }
        else
        {
          v142 = *((_QWORD *)v1 + 739);
          v143 = *((_QWORD *)v1 + 701);

          swift_release();
          swift_release();
          swift_release();
          v44(v142, v143);
        }
        v872(*((_QWORD *)v1 + 735), v867, *((_QWORD *)v1 + 701));
        v144 = (_QWORD *)swift_allocObject(&unk_101052530, 48, 7);
        v144[2] = v836;
        v144[3] = v825;
        v144[4] = v820;
        v144[5] = v77;
        sub_10001BBBC(v809, v806);
        v145 = sub_10001BBBC(v853, v812);
        v146 = Logger.logObject.getter(v145);
        v147 = static os_log_type_t.debug.getter(v146);
        v148 = swift_allocObject(&unk_101052558, 17, 7);
        *(_BYTE *)(v148 + 16) = 32;
        v149 = swift_allocObject(&unk_101052580, 17, 7);
        *(_BYTE *)(v149 + 16) = 8;
        v150 = swift_allocObject(&unk_1010525A8, 32, 7);
        *(_QWORD *)(v150 + 16) = sub_100058F64;
        *(_QWORD *)(v150 + 24) = v144;
        v151 = swift_allocObject(&unk_1010525D0, 32, 7);
        *(_QWORD *)(v151 + 16) = sub_10005CBA4;
        *(_QWORD *)(v151 + 24) = v150;
        v152 = swift_allocObject(v863, 80, 7);
        sub_100882D28(v152, 3);
        *v153 = sub_10005CBC4;
        v153[1] = v148;
        v153[2] = sub_10005CBC4;
        v153[3] = v149;
        v153[4] = sub_10005CBB4;
        v153[5] = v151;
        swift_retain();
        swift_retain();
        swift_retain();
        swift_bridgeObjectRelease();
        if (os_log_type_enabled(v146, v147))
        {
          v154 = (uint8_t *)sub_1006948A0(12);
          v155 = swift_slowAlloc(32, -1);
          v882 = 0;
          v883 = v155;
          v803 = v154;
          *(_WORD *)v154 = 258;
          v881 = v154 + 2;
          *(_QWORD *)&v884[0] = sub_10005CBC4;
          *((_QWORD *)&v884[0] + 1) = v148;
          sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))v884, (uint64_t)&v881, (uint64_t)&v882, (uint64_t)&v883);
          swift_release();
          *(_QWORD *)&v884[0] = sub_10005CBC4;
          *((_QWORD *)&v884[0] + 1) = v149;
          sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))v884, (uint64_t)&v881, (uint64_t)&v882, (uint64_t)&v883);
          swift_release();
          *(_QWORD *)&v884[0] = sub_10005CBB4;
          *((_QWORD *)&v884[0] + 1) = v151;
          sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))v884, (uint64_t)&v881, (uint64_t)&v882, (uint64_t)&v883);
          v1 = v735;
          v156 = *((_QWORD *)v735 + 735);
          v157 = *((_QWORD *)v735 + 701);
          swift_release();
          _os_log_impl((void *)&_mh_execute_header, v146, v147, "numberOfBeacons: %s", v803, 0xCu);
          swift_arrayDestroy(v155, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v155, -1, -1);
          sub_100694894((uint64_t)v803);

          v44(v156, v157);
        }
        else
        {
          v228 = *((_QWORD *)v1 + 735);
          v229 = *((_QWORD *)v1 + 701);

          swift_release();
          swift_release();
          swift_release();
          v44(v228, v229);
        }
        v872(*((_QWORD *)v1 + 734), v867, *((_QWORD *)v1 + 701));
        v230 = (_QWORD *)swift_allocObject(&unk_1010525F8, 48, 7);
        v230[2] = v836;
        v230[3] = v825;
        v230[4] = v820;
        v230[5] = v77;
        sub_10001BBBC(v809, v806);
        v231 = sub_10001BBBC(v853, v812);
        v232 = Logger.logObject.getter(v231);
        v233 = static os_log_type_t.debug.getter(v232);
        v234 = swift_allocObject(&unk_101052620, 17, 7);
        *(_BYTE *)(v234 + 16) = 32;
        v235 = swift_allocObject(&unk_101052648, 17, 7);
        *(_BYTE *)(v235 + 16) = 8;
        v236 = swift_allocObject(&unk_101052670, 32, 7);
        *(_QWORD *)(v236 + 16) = sub_100058DF4;
        *(_QWORD *)(v236 + 24) = v230;
        v237 = swift_allocObject(&unk_101052698, 32, 7);
        *(_QWORD *)(v237 + 16) = sub_10005CBA4;
        *(_QWORD *)(v237 + 24) = v236;
        v238 = swift_allocObject(v863, 80, 7);
        sub_100882D28(v238, 3);
        *v239 = sub_10005CBC4;
        v239[1] = v234;
        v239[2] = sub_10005CBC4;
        v239[3] = v235;
        v239[4] = sub_10005CBB4;
        v239[5] = v237;
        swift_retain();
        swift_retain();
        swift_retain();
        swift_bridgeObjectRelease();
        if (os_log_type_enabled(v232, v233))
        {
          v240 = (uint8_t *)sub_1006948A0(12);
          v241 = swift_slowAlloc(32, -1);
          v882 = 0;
          v883 = v241;
          v876 = v240;
          *(_WORD *)v240 = 258;
          v881 = v240 + 2;
          *(_QWORD *)&v884[0] = sub_10005CBC4;
          *((_QWORD *)&v884[0] + 1) = v234;
          sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))v884, (uint64_t)&v881, (uint64_t)&v882, (uint64_t)&v883);
          swift_release();
          *(_QWORD *)&v884[0] = sub_10005CBC4;
          *((_QWORD *)&v884[0] + 1) = v235;
          sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))v884, (uint64_t)&v881, (uint64_t)&v882, (uint64_t)&v883);
          swift_release();
          *(_QWORD *)&v884[0] = sub_10005CBB4;
          *((_QWORD *)&v884[0] + 1) = v237;
          sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))v884, (uint64_t)&v881, (uint64_t)&v882, (uint64_t)&v883);
          v1 = v735;
          v242 = *((_QWORD *)v735 + 734);
          v243 = *((_QWORD *)v735 + 701);
          swift_release();
          _os_log_impl((void *)&_mh_execute_header, v232, v233, "beaconGroupData: %s", v876, 0xCu);
          swift_arrayDestroy(v241, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v241, -1, -1);
          sub_100694894((uint64_t)v876);

          v44(v242, v243);
        }
        else
        {
          v292 = *((_QWORD *)v1 + 734);
          v293 = *((_QWORD *)v1 + 701);

          swift_release();
          swift_release();
          swift_release();
          v44(v292, v293);
        }
        *((_QWORD *)v1 + 758) = 0;
        v294 = *((_QWORD *)v1 + 678);
        *(_BYTE *)(v294 + 176) = 2;
        if (*(_BYTE *)(v294 + 272) == 1)
        {
          v295 = *((_QWORD *)v1 + 700);
          (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD))(*((_QWORD *)v1 + 693) + 56))(v295, 1, 1, *((_QWORD *)v1 + 692));
          v869 = sub_100C99384(v295, 255);
          v297 = v296;
          v298 = *((_QWORD *)v1 + 758);
          v299 = *((_QWORD *)v1 + 757);
          v300 = *((_QWORD *)v1 + 756);
          v301 = *((_QWORD *)v1 + 755);
          v302 = *((_QWORD *)v1 + 754);
          sub_100004048(*((_QWORD *)v1 + 700), (uint64_t *)&unk_1010FF7F0);
          v303 = sub_100034340(v302, v301, v300, v299);
          v304 = v298;
          v865 = v297;
          if (v298)
          {
            v305 = *((_QWORD *)v1 + 752);
            (*((void (**)(_QWORD, _QWORD, _QWORD))v1 + 751))(*((_QWORD *)v1 + 732), *((_QWORD *)v1 + 750), *((_QWORD *)v1 + 701));
            v306 = swift_allocObject(&unk_1010526C0, 24, 7);
            *(_QWORD *)(v306 + 16) = v304;
            v307 = swift_errorRetain(v304);
            v308 = Logger.logObject.getter(v307);
            v309 = static os_log_type_t.error.getter(v308);
            v310 = swift_allocObject(&unk_1010526E8, 17, 7);
            *(_BYTE *)(v310 + 16) = 66;
            v311 = swift_allocObject(&unk_101052710, 17, 7);
            *(_BYTE *)(v311 + 16) = 8;
            v312 = swift_allocObject(&unk_101052738, 32, 7);
            *(_QWORD *)(v312 + 16) = sub_1000594F4;
            *(_QWORD *)(v312 + 24) = v306;
            v313 = swift_allocObject(&unk_101052760, 32, 7);
            *(_QWORD *)(v313 + 16) = sub_10005CBB0;
            *(_QWORD *)(v313 + 24) = v312;
            v314 = swift_allocObject(&unk_101052788, 32, 7);
            *(_QWORD *)(v314 + 16) = sub_10005CBA4;
            *(_QWORD *)(v314 + 24) = v313;
            v315 = swift_allocObject(v305, 80, 7);
            sub_100882D28(v315, 3);
            *v316 = sub_10005CBC4;
            v316[1] = v310;
            v316[2] = sub_10005CBC4;
            v316[3] = v311;
            v316[4] = sub_10005CBBC;
            v316[5] = v314;
            swift_retain();
            swift_retain();
            swift_retain();
            swift_bridgeObjectRelease();
            if (os_log_type_enabled(v308, v309))
            {
              v317 = (uint8_t *)sub_1006948A0(12);
              v857 = swift_slowAlloc(8, -1);
              v882 = (uint8_t *)v857;
              v883 = 0;
              v877 = v317;
              *(_WORD *)v317 = 258;
              v881 = v317 + 2;
              *(_QWORD *)&v884[0] = sub_10005CBC4;
              *((_QWORD *)&v884[0] + 1) = v310;
              sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))v884, (uint64_t)&v881, (uint64_t)&v882, (uint64_t)&v883);
              swift_release();
              *(_QWORD *)&v884[0] = sub_10005CBC4;
              *((_QWORD *)&v884[0] + 1) = v311;
              sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))v884, (uint64_t)&v881, (uint64_t)&v882, (uint64_t)&v883);
              swift_release();
              *(_QWORD *)&v884[0] = sub_10005CBBC;
              *((_QWORD *)&v884[0] + 1) = v314;
              sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))v884, (uint64_t)&v881, (uint64_t)&v882, (uint64_t)&v883);
              v318 = (void (*)(uint64_t, uint64_t))*((_QWORD *)v1 + 753);
              v319 = *((_QWORD *)v1 + 732);
              v320 = *((_QWORD *)v1 + 701);
              swift_release();
              _os_log_impl((void *)&_mh_execute_header, v308, v309, "Unable to parse beacon group info due to %{public}@", v877, 0xCu);
              v321 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
              swift_arrayDestroy(v857, 1, v321);
              swift_slowDealloc(v857, -1, -1);
              sub_100694894((uint64_t)v877);

              v318(v319, v320);
            }
            else
            {
              v457 = (void (*)(uint64_t, uint64_t))*((_QWORD *)v1 + 753);
              v458 = *((_QWORD *)v1 + 732);
              v459 = *((_QWORD *)v1 + 701);

              swift_release();
              swift_release();
              swift_release();
              v457(v458, v459);
            }
            sub_10004E7F0(v869, v865, v1 + 117);
            v460 = *((_QWORD *)v1 + 746);
            v461 = *((_QWORD *)v1 + 745);
            v462 = *((_QWORD *)v1 + 744);
            v515 = v1 + 150;
            sub_100057230(v1 + 117, v1 + 150);
            swift_release();
            sub_10005726C((uint64_t)v860, (void (*)(void))sub_10001BC14);
            swift_errorRelease(v304);
            sub_10005726C((uint64_t)v860, (void (*)(void))sub_10001BC14);
            sub_10001BC14(v869, v865);
            (*(void (**)(uint64_t, uint64_t))(v461 + 8))(v460, v462);
          }
          else
          {
            v436 = v303;
            v437 = *((_QWORD *)v1 + 752);
            (*((void (**)(_QWORD, _QWORD, _QWORD))v1 + 751))(*((_QWORD *)v1 + 733), *((_QWORD *)v1 + 750), *((_QWORD *)v1 + 701));
            v438 = swift_allocObject(&unk_1010527B0, 24, 7);
            *(_QWORD *)(v438 + 16) = v436;
            v439 = swift_allocObject(&unk_1010527D8, 32, 7);
            *(_QWORD *)(v439 + 16) = sub_10005953C;
            *(_QWORD *)(v439 + 24) = v438;
            v878 = v436;
            swift_bridgeObjectRetain(v436);
            v441 = Logger.logObject.getter(v440);
            v442 = static os_log_type_t.default.getter(v441);
            v443 = v1;
            v444 = swift_allocObject(&unk_101052800, 17, 7);
            *(_BYTE *)(v444 + 16) = 32;
            v445 = swift_allocObject(&unk_101052828, 17, 7);
            *(_BYTE *)(v445 + 16) = 8;
            v446 = swift_allocObject(&unk_101052850, 32, 7);
            *(_QWORD *)(v446 + 16) = sub_100059548;
            *(_QWORD *)(v446 + 24) = v439;
            v447 = swift_allocObject(&unk_101052878, 32, 7);
            *(_QWORD *)(v447 + 16) = sub_10005CBA4;
            *(_QWORD *)(v447 + 24) = v446;
            v448 = swift_allocObject(v437, 80, 7);
            sub_100882D28(v448, 3);
            *v449 = sub_10005CBC4;
            v449[1] = v444;
            v449[2] = sub_10005CBC4;
            v449[3] = v445;
            v449[4] = sub_10005CBB4;
            v449[5] = v447;
            swift_retain();
            swift_retain();
            swift_retain();
            swift_bridgeObjectRelease();
            if (os_log_type_enabled(v441, v442))
            {
              v450 = (uint8_t *)sub_1006948A0(12);
              v451 = swift_slowAlloc(32, -1);
              v882 = 0;
              v883 = v451;
              v849 = v451;
              v858 = v450;
              *(_WORD *)v450 = 258;
              v881 = v450 + 2;
              *(_QWORD *)&v884[0] = sub_10005CBC4;
              *((_QWORD *)&v884[0] + 1) = v444;
              sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))v884, (uint64_t)&v881, (uint64_t)&v882, (uint64_t)&v883);
              swift_release();
              *(_QWORD *)&v884[0] = sub_10005CBC4;
              *((_QWORD *)&v884[0] + 1) = v445;
              sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))v884, (uint64_t)&v881, (uint64_t)&v882, (uint64_t)&v883);
              swift_release();
              *(_QWORD *)&v884[0] = sub_10005CBB4;
              *((_QWORD *)&v884[0] + 1) = v447;
              sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))v884, (uint64_t)&v881, (uint64_t)&v882, (uint64_t)&v883);
              v452 = (void (*)(uint64_t, uint64_t))*((_QWORD *)v443 + 753);
              v453 = *((_QWORD *)v443 + 733);
              v454 = *((_QWORD *)v443 + 701);
              swift_release();
              _os_log_impl((void *)&_mh_execute_header, v441, v442, "beaconGroupInfo: %s", v858, 0xCu);
              swift_arrayDestroy(v849, 1, (char *)&type metadata for Any + 8);
              swift_slowDealloc(v849, -1, -1);
              sub_100694894((uint64_t)v858);

              v455 = v453;
              v456 = v454;
            }
            else
            {
              v452 = (void (*)(uint64_t, uint64_t))*((_QWORD *)v443 + 753);
              v503 = *((_QWORD *)v443 + 733);
              v504 = *((_QWORD *)v443 + 701);

              swift_release();
              swift_release();
              swift_release();
              v455 = v503;
              v456 = v504;
            }
            v452(v455, v456);
            *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v443 + 678) + 184)
                      + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_allSerialNumbersAndPartIds) = v878;
            swift_bridgeObjectRelease();
            sub_10004E7F0(v869, v865, (char *)v443 + 2136);
            v1 = v443;
            v515 = v443 + 18;
            v505 = *((_QWORD *)v443 + 746);
            v506 = *((_QWORD *)v443 + 745);
            v507 = *((_QWORD *)v443 + 744);
            sub_100057230((char *)v443 + 2136, v443 + 18);
            swift_release();
            sub_10005726C((uint64_t)v860, (void (*)(void))sub_10001BC14);
            sub_10005726C((uint64_t)v860, (void (*)(void))sub_10001BC14);
            sub_10001BC14(v869, v865);
            (*(void (**)(uint64_t, uint64_t))(v506 + 8))(v505, v507);
          }
          v516 = (char *)v1 + 3720;
          sub_100057230(v515, (char *)v1 + 3720);
          v517 = *((_QWORD *)v1 + 746);
          v518 = *((_QWORD *)v1 + 743);
          v519 = *((_QWORD *)v1 + 742);
          v520 = *((_QWORD *)v1 + 741);
          v521 = *((_QWORD *)v1 + 740);
          v522 = *((_QWORD *)v1 + 739);
          v523 = *((_QWORD *)v1 + 738);
          v734 = *((_QWORD *)v1 + 737);
          v524 = v1;
          v525 = *((_QWORD *)v1 + 736);
          v737 = *((_QWORD *)v524 + 735);
          v739 = *((_QWORD *)v524 + 734);
          v741 = *((_QWORD *)v524 + 733);
          v743 = *((_QWORD *)v524 + 732);
          v745 = *((_QWORD *)v524 + 731);
          v747 = *((_QWORD *)v524 + 730);
          v749 = *((_QWORD *)v524 + 729);
          v751 = *((_QWORD *)v524 + 728);
          v753 = *((_QWORD *)v524 + 727);
          v755 = *((_QWORD *)v524 + 726);
          v757 = *((_QWORD *)v524 + 725);
          v759 = *((_QWORD *)v524 + 724);
          v761 = *((_QWORD *)v524 + 723);
          v763 = *((_QWORD *)v524 + 722);
          v765 = *((_QWORD *)v524 + 721);
          v767 = *((_QWORD *)v524 + 720);
          v769 = *((_QWORD *)v524 + 719);
          v771 = *((_QWORD *)v524 + 718);
          v773 = *((_QWORD *)v524 + 717);
          v775 = *((_QWORD *)v524 + 716);
          v777 = *((_QWORD *)v524 + 715);
          v779 = *((_QWORD *)v524 + 714);
          v781 = *((_QWORD *)v524 + 713);
          v783 = *((_QWORD *)v524 + 712);
          v785 = *((_QWORD *)v524 + 711);
          v787 = *((_QWORD *)v524 + 710);
          v789 = *((_QWORD *)v524 + 709);
          v791 = *((_QWORD *)v524 + 708);
          v793 = *((_QWORD *)v524 + 707);
          v795 = *((_QWORD *)v524 + 706);
          v797 = *((_QWORD *)v524 + 705);
          v799 = *((_QWORD *)v524 + 704);
          v801 = *((_QWORD *)v524 + 703);
          v805 = *((_QWORD *)v524 + 700);
          v808 = *((_QWORD *)v524 + 699);
          v811 = *((_QWORD *)v524 + 698);
          v815 = *((_QWORD *)v524 + 697);
          v818 = *((_QWORD *)v524 + 696);
          v824 = *((_QWORD *)v524 + 695);
          v829 = *((_QWORD *)v524 + 694);
          v844 = *((_QWORD *)v524 + 691);
          v850 = *((_QWORD *)v524 + 689);
          v859 = *((_QWORD *)v524 + 688);
          v862 = *((_QWORD *)v524 + 686);
          v866 = *((_QWORD *)v524 + 685);
          v870 = *((_QWORD *)v524 + 682);
          v879 = *((_QWORD *)v524 + 681);
          sub_100057230(v516, *((void **)v524 + 674));
          swift_task_dealloc(v517);
          swift_task_dealloc(v518);
          swift_task_dealloc(v519);
          swift_task_dealloc(v520);
          swift_task_dealloc(v521);
          swift_task_dealloc(v522);
          swift_task_dealloc(v523);
          swift_task_dealloc(v734);
          swift_task_dealloc(v525);
          swift_task_dealloc(v737);
          swift_task_dealloc(v739);
          swift_task_dealloc(v741);
          swift_task_dealloc(v743);
          swift_task_dealloc(v745);
          swift_task_dealloc(v747);
          swift_task_dealloc(v749);
          swift_task_dealloc(v751);
          swift_task_dealloc(v753);
          swift_task_dealloc(v755);
          swift_task_dealloc(v757);
          swift_task_dealloc(v759);
          swift_task_dealloc(v761);
          swift_task_dealloc(v763);
          swift_task_dealloc(v765);
          swift_task_dealloc(v767);
          swift_task_dealloc(v769);
          swift_task_dealloc(v771);
          swift_task_dealloc(v773);
          swift_task_dealloc(v775);
          swift_task_dealloc(v777);
          swift_task_dealloc(v779);
          swift_task_dealloc(v781);
          swift_task_dealloc(v783);
          swift_task_dealloc(v785);
          swift_task_dealloc(v787);
          swift_task_dealloc(v789);
          swift_task_dealloc(v791);
          swift_task_dealloc(v793);
          swift_task_dealloc(v795);
          swift_task_dealloc(v797);
          swift_task_dealloc(v799);
          swift_task_dealloc(v801);
          swift_task_dealloc(v805);
          swift_task_dealloc(v808);
          swift_task_dealloc(v811);
          swift_task_dealloc(v815);
          swift_task_dealloc(v818);
          swift_task_dealloc(v824);
          swift_task_dealloc(v829);
          swift_task_dealloc(v844);
          swift_task_dealloc(v850);
          swift_task_dealloc(v859);
          swift_task_dealloc(v862);
          swift_task_dealloc(v866);
          swift_task_dealloc(v870);
          swift_task_dealloc(v879);
          v290 = (uint64_t (*)(void))*((_QWORD *)v524 + 1);
          return v290();
        }
        v376 = (__int128 **)swift_task_alloc(dword_10111110C);
        *((_QWORD *)v1 + 759) = v376;
        *v376 = v1;
        v376[1] = (__int128 *)sub_10004A59C;
        return sub_100A837D4(*((_QWORD *)v1 + 699), *((_QWORD *)v1 + 677));
      }
      v872(*((_QWORD *)v1 + 736), v867, *((_QWORD *)v1 + 701));
      v128 = swift_allocObject(&unk_1010508E8, 280, 7);
      sub_100057230(v860, (void *)(v128 + 16));
      v129 = sub_10005726C((uint64_t)v860, (void (*)(void))sub_10001BBBC);
      v130 = Logger.logObject.getter(v129);
      v131 = static os_log_type_t.error.getter(v130);
      v132 = swift_allocObject(&unk_101050910, 17, 7);
      *(_BYTE *)(v132 + 16) = 34;
      v133 = swift_allocObject(&unk_101050938, 17, 7);
      *(_BYTE *)(v133 + 16) = 8;
      v134 = swift_allocObject(&unk_101050960, 32, 7);
      *(_QWORD *)(v134 + 16) = sub_10005CD44;
      *(_QWORD *)(v134 + 24) = v128;
      v135 = swift_allocObject(&unk_101050988, 32, 7);
      *(_QWORD *)(v135 + 16) = sub_10005CBA4;
      *(_QWORD *)(v135 + 24) = v134;
      v136 = swift_allocObject(v863, 80, 7);
      sub_100882D28(v136, 3);
      *v137 = sub_10005CBC4;
      v137[1] = v132;
      v137[2] = sub_10005CBC4;
      v137[3] = v133;
      v137[4] = sub_10005CBB4;
      v137[5] = v135;
      swift_retain();
      swift_retain();
      swift_retain();
      swift_bridgeObjectRelease();
      if (os_log_type_enabled(v130, v131))
      {
        v138 = (uint8_t *)sub_1006948A0(12);
        v139 = swift_slowAlloc(32, -1);
        v882 = 0;
        v883 = v139;
        v874 = v138;
        *(_WORD *)v138 = 258;
        v881 = v138 + 2;
        *(_QWORD *)&v884[0] = sub_10005CBC4;
        *((_QWORD *)&v884[0] + 1) = v132;
        sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))v884, (uint64_t)&v881, (uint64_t)&v882, (uint64_t)&v883);
        swift_release();
        *(_QWORD *)&v884[0] = sub_10005CBC4;
        *((_QWORD *)&v884[0] + 1) = v133;
        sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))v884, (uint64_t)&v881, (uint64_t)&v882, (uint64_t)&v883);
        swift_release();
        *(_QWORD *)&v884[0] = sub_10005CBB4;
        *((_QWORD *)&v884[0] + 1) = v135;
        sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))v884, (uint64_t)&v881, (uint64_t)&v882, (uint64_t)&v883);
        v1 = v735;
        v140 = *((_QWORD *)v735 + 736);
        v141 = *((_QWORD *)v735 + 701);
        swift_release();
        _os_log_impl((void *)&_mh_execute_header, v130, v131, "Received unexpected command %{public}s", v874, 0xCu);
        swift_arrayDestroy(v139, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v139, -1, -1);
        sub_100694894((uint64_t)v874);

        v44(v140, v141);
      }
      else
      {
        v186 = *((_QWORD *)v1 + 736);
        v187 = *((_QWORD *)v1 + 701);

        swift_release();
        swift_release();
        swift_release();
        v44(v186, v187);
      }
      v100 = *((_QWORD *)v1 + 746);
      v101 = *((_QWORD *)v1 + 745);
      v102 = *((_QWORD *)v1 + 744);
      v188 = sub_100056FAC();
      v189 = swift_allocError(&type metadata for AirPodsLEPairingService.Error, v188, 0, 0);
      v191 = 0x8000000000000006;
      goto LABEL_56;
    }
    v117 = (char *)v1 + 1080;
    v118 = *((_QWORD *)v1 + 738);
    v119 = *((_QWORD *)v1 + 701);
    sub_10005A21C((uint64_t)v1 + 2664);
    v120 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v872)(v118, v867, v119);
    v121 = Logger.logObject.getter(v120);
    v122 = static os_log_type_t.default.getter(v121);
    v123 = sub_100BD13F8(0);
    v124 = os_log_type_enabled(v121, v122);
    v125 = *((_QWORD *)v1 + 738);
    v126 = *((_QWORD *)v1 + 701);
    if (v124)
    {
      v127 = (uint8_t *)sub_1006948A0(2);
      v883 = 0;
      *(_QWORD *)&v884[0] = 0;
      *(_WORD *)v127 = 0;
      v882 = v127 + 2;
      sub_100A3DD1C((uint64_t)v123, (uint64_t)&v882, (uint64_t)&v883, (uint64_t)v884);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v121, v122, "Received pairing data.", v127, 2u);
      sub_100694894((uint64_t)v127);

      v847(v125, v126);
    }
    else
    {

      swift_bridgeObjectRelease();
      v44(v125, v126);
    }
    sub_10024B874();
    v167 = sub_10001A9A8(&qword_1010EC540);
    v168 = swift_dynamicCast(v117, v1 + 317, v167, &type metadata for AirPodsSWSendPairingDataCommandPayload, 6);
    v1 = v735;
    v169 = *((_QWORD *)v735 + 701);
    if (v168)
    {
      v170 = *((_QWORD *)v735 + 731);
      memcpy(v735 + 51, v117, 0x108uLL);
      v872(v170, v867, v169);
      v171 = swift_allocObject(&unk_101051540, 280, 7);
      memcpy((void *)(v171 + 16), v735 + 51, 0x108uLL);
      v855 = v735 + 51;
      v172 = sub_1000590CC((uint64_t *)v735 + 102, (void (*)(uint64_t, uint64_t))sub_10001BBBC);
      v173 = Logger.logObject.getter(v172);
      v174 = static os_log_type_t.debug.getter(v173);
      v175 = swift_allocObject(&unk_101051568, 17, 7);
      *(_BYTE *)(v175 + 16) = 32;
      v176 = swift_allocObject(&unk_101051590, 17, 7);
      *(_BYTE *)(v176 + 16) = 8;
      v177 = swift_allocObject(&unk_1010515B8, 32, 7);
      *(_QWORD *)(v177 + 16) = sub_10005CBA0;
      *(_QWORD *)(v177 + 24) = v171;
      v178 = swift_allocObject(&unk_1010515E0, 32, 7);
      *(_QWORD *)(v178 + 16) = sub_10005CBA4;
      *(_QWORD *)(v178 + 24) = v177;
      v179 = swift_allocObject(v863, 80, 7);
      sub_100882D28(v179, 3);
      *v180 = sub_10005CBC4;
      v180[1] = v175;
      v180[2] = sub_10005CBC4;
      v180[3] = v176;
      v180[4] = sub_10005CBB4;
      v180[5] = v178;
      swift_retain();
      swift_retain();
      swift_retain();
      swift_bridgeObjectRelease();
      if (os_log_type_enabled(v173, v174))
      {
        v181 = (uint8_t *)sub_1006948A0(12);
        v182 = swift_slowAlloc(32, -1);
        v882 = 0;
        v883 = v182;
        *(_WORD *)v181 = 258;
        v881 = v181 + 2;
        *(_QWORD *)&v884[0] = sub_10005CBC4;
        *((_QWORD *)&v884[0] + 1) = v175;
        sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))v884, (uint64_t)&v881, (uint64_t)&v882, (uint64_t)&v883);
        swift_release();
        *(_QWORD *)&v884[0] = sub_10005CBC4;
        *((_QWORD *)&v884[0] + 1) = v176;
        sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))v884, (uint64_t)&v881, (uint64_t)&v882, (uint64_t)&v883);
        swift_release();
        *(_QWORD *)&v884[0] = sub_10005CBB4;
        *((_QWORD *)&v884[0] + 1) = v178;
        sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))v884, (uint64_t)&v881, (uint64_t)&v882, (uint64_t)&v883);
        v183 = v735;
        v184 = *((_QWORD *)v735 + 731);
        v185 = *((_QWORD *)v735 + 701);
        swift_release();
        _os_log_impl((void *)&_mh_execute_header, v173, v174, "SerialNumber: %s", v181, 0xCu);
        swift_arrayDestroy(v182, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v182, -1, -1);
        sub_100694894((uint64_t)v181);

        v847(v184, v185);
      }
      else
      {
        v258 = *((_QWORD *)v735 + 731);
        v259 = *((_QWORD *)v735 + 701);

        swift_release();
        swift_release();
        swift_release();
        v847(v258, v259);
        v183 = v735;
      }
      v872(*((_QWORD *)v183 + 729), v867, *((_QWORD *)v183 + 701));
      v260 = swift_allocObject(&unk_101051608, 280, 7);
      memcpy((void *)(v260 + 16), v855, 0x108uLL);
      v261 = sub_1000590CC((uint64_t *)v855, (void (*)(uint64_t, uint64_t))sub_10001BBBC);
      v262 = Logger.logObject.getter(v261);
      v263 = static os_log_type_t.debug.getter(v262);
      v264 = swift_allocObject(&unk_101051630, 17, 7);
      *(_BYTE *)(v264 + 16) = 32;
      v265 = swift_allocObject(&unk_101051658, 17, 7);
      *(_BYTE *)(v265 + 16) = 8;
      v266 = swift_allocObject(&unk_101051680, 32, 7);
      *(_QWORD *)(v266 + 16) = sub_100058DC8;
      *(_QWORD *)(v266 + 24) = v260;
      v267 = swift_allocObject(&unk_1010516A8, 32, 7);
      *(_QWORD *)(v267 + 16) = sub_10005CBA4;
      *(_QWORD *)(v267 + 24) = v266;
      v268 = swift_allocObject(v863, 80, 7);
      sub_100882D28(v268, 3);
      *v269 = sub_10005CBC4;
      v269[1] = v264;
      v269[2] = sub_10005CBC4;
      v269[3] = v265;
      v269[4] = sub_10005CBB4;
      v269[5] = v267;
      swift_retain();
      swift_retain();
      swift_retain();
      swift_bridgeObjectRelease();
      if (os_log_type_enabled(v262, v263))
      {
        v270 = (uint8_t *)sub_1006948A0(12);
        v271 = swift_slowAlloc(32, -1);
        v882 = 0;
        v883 = v271;
        v837 = v270;
        *(_WORD *)v270 = 258;
        v881 = v270 + 2;
        *(_QWORD *)&v884[0] = sub_10005CBC4;
        *((_QWORD *)&v884[0] + 1) = v264;
        sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))v884, (uint64_t)&v881, (uint64_t)&v882, (uint64_t)&v883);
        swift_release();
        *(_QWORD *)&v884[0] = sub_10005CBC4;
        *((_QWORD *)&v884[0] + 1) = v265;
        sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))v884, (uint64_t)&v881, (uint64_t)&v882, (uint64_t)&v883);
        swift_release();
        *(_QWORD *)&v884[0] = sub_10005CBB4;
        *((_QWORD *)&v884[0] + 1) = v267;
        sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))v884, (uint64_t)&v881, (uint64_t)&v882, (uint64_t)&v883);
        v183 = v735;
        v272 = *((_QWORD *)v735 + 729);
        v273 = *((_QWORD *)v735 + 701);
        swift_release();
        _os_log_impl((void *)&_mh_execute_header, v262, v263, "AltSerialNumber: %s", v837, 0xCu);
        swift_arrayDestroy(v271, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v271, -1, -1);
        sub_100694894((uint64_t)v837);

        v847(v272, v273);
      }
      else
      {
        v322 = *((_QWORD *)v183 + 729);
        v323 = *((_QWORD *)v183 + 701);

        swift_release();
        swift_release();
        swift_release();
        v847(v322, v323);
      }
      v872(*((_QWORD *)v183 + 728), v867, *((_QWORD *)v183 + 701));
      v324 = swift_allocObject(&unk_1010516D0, 280, 7);
      memcpy((void *)(v324 + 16), v855, 0x108uLL);
      v325 = sub_1000590CC((uint64_t *)v855, (void (*)(uint64_t, uint64_t))sub_10001BBBC);
      v326 = Logger.logObject.getter(v325);
      v327 = static os_log_type_t.debug.getter(v326);
      v328 = swift_allocObject(&unk_1010516F8, 17, 7);
      *(_BYTE *)(v328 + 16) = 32;
      v329 = swift_allocObject(&unk_101051720, 17, 7);
      *(_BYTE *)(v329 + 16) = 8;
      v330 = swift_allocObject(&unk_101051748, 32, 7);
      *(_QWORD *)(v330 + 16) = sub_100058DF4;
      *(_QWORD *)(v330 + 24) = v324;
      v331 = swift_allocObject(&unk_101051770, 32, 7);
      *(_QWORD *)(v331 + 16) = sub_10005CBA4;
      *(_QWORD *)(v331 + 24) = v330;
      v332 = swift_allocObject(v863, 80, 7);
      sub_100882D28(v332, 3);
      *v333 = sub_10005CBC4;
      v333[1] = v328;
      v333[2] = sub_10005CBC4;
      v333[3] = v329;
      v333[4] = sub_10005CBB4;
      v333[5] = v331;
      swift_retain();
      swift_retain();
      swift_retain();
      swift_bridgeObjectRelease();
      if (os_log_type_enabled(v326, v327))
      {
        v334 = (uint8_t *)sub_1006948A0(12);
        v335 = swift_slowAlloc(32, -1);
        v882 = 0;
        v883 = v335;
        v839 = v334;
        *(_WORD *)v334 = 258;
        v881 = v334 + 2;
        *(_QWORD *)&v884[0] = sub_10005CBC4;
        *((_QWORD *)&v884[0] + 1) = v328;
        sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))v884, (uint64_t)&v881, (uint64_t)&v882, (uint64_t)&v883);
        swift_release();
        *(_QWORD *)&v884[0] = sub_10005CBC4;
        *((_QWORD *)&v884[0] + 1) = v329;
        sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))v884, (uint64_t)&v881, (uint64_t)&v882, (uint64_t)&v883);
        swift_release();
        *(_QWORD *)&v884[0] = sub_10005CBB4;
        *((_QWORD *)&v884[0] + 1) = v331;
        sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))v884, (uint64_t)&v881, (uint64_t)&v882, (uint64_t)&v883);
        v183 = v735;
        v336 = *((_QWORD *)v735 + 728);
        v337 = *((_QWORD *)v735 + 701);
        swift_release();
        _os_log_impl((void *)&_mh_execute_header, v326, v327, "numberOfBeacons: %s", v839, 0xCu);
        swift_arrayDestroy(v335, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v335, -1, -1);
        sub_100694894((uint64_t)v839);

        v847(v336, v337);
      }
      else
      {
        v377 = *((_QWORD *)v183 + 728);
        v378 = *((_QWORD *)v183 + 701);

        swift_release();
        swift_release();
        swift_release();
        v847(v377, v378);
      }
      v872(*((_QWORD *)v183 + 727), v867, *((_QWORD *)v183 + 701));
      v379 = swift_allocObject(&unk_101051798, 280, 7);
      memcpy((void *)(v379 + 16), v855, 0x108uLL);
      v380 = sub_1000590CC((uint64_t *)v855, (void (*)(uint64_t, uint64_t))sub_10001BBBC);
      v381 = Logger.logObject.getter(v380);
      v382 = static os_log_type_t.debug.getter(v381);
      v383 = swift_allocObject(&unk_1010517C0, 17, 7);
      *(_BYTE *)(v383 + 16) = 32;
      v384 = swift_allocObject(&unk_1010517E8, 17, 7);
      *(_BYTE *)(v384 + 16) = 8;
      v385 = swift_allocObject(&unk_101051810, 32, 7);
      *(_QWORD *)(v385 + 16) = sub_100058E20;
      *(_QWORD *)(v385 + 24) = v379;
      v386 = swift_allocObject(&unk_101051838, 32, 7);
      *(_QWORD *)(v386 + 16) = sub_10005CBA4;
      *(_QWORD *)(v386 + 24) = v385;
      v387 = swift_allocObject(v863, 80, 7);
      sub_100882D28(v387, 3);
      *v388 = sub_10005CBC4;
      v388[1] = v383;
      v388[2] = sub_10005CBC4;
      v388[3] = v384;
      v388[4] = sub_10005CBB4;
      v388[5] = v386;
      swift_retain();
      swift_retain();
      swift_retain();
      swift_bridgeObjectRelease();
      if (os_log_type_enabled(v381, v382))
      {
        v389 = (uint8_t *)sub_1006948A0(12);
        v390 = swift_slowAlloc(32, -1);
        v882 = 0;
        v883 = v390;
        v842 = v389;
        *(_WORD *)v389 = 258;
        v881 = v389 + 2;
        *(_QWORD *)&v884[0] = sub_10005CBC4;
        *((_QWORD *)&v884[0] + 1) = v383;
        sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))v884, (uint64_t)&v881, (uint64_t)&v882, (uint64_t)&v883);
        swift_release();
        *(_QWORD *)&v884[0] = sub_10005CBC4;
        *((_QWORD *)&v884[0] + 1) = v384;
        sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))v884, (uint64_t)&v881, (uint64_t)&v882, (uint64_t)&v883);
        swift_release();
        *(_QWORD *)&v884[0] = sub_10005CBB4;
        *((_QWORD *)&v884[0] + 1) = v386;
        sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))v884, (uint64_t)&v881, (uint64_t)&v882, (uint64_t)&v883);
        v183 = v735;
        v391 = *((_QWORD *)v735 + 727);
        v392 = *((_QWORD *)v735 + 701);
        swift_release();
        _os_log_impl((void *)&_mh_execute_header, v381, v382, "otherSerialNumber: %s", v842, 0xCu);
        swift_arrayDestroy(v390, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v390, -1, -1);
        sub_100694894((uint64_t)v842);

        v847(v391, v392);
      }
      else
      {
        v418 = *((_QWORD *)v183 + 727);
        v419 = *((_QWORD *)v183 + 701);

        swift_release();
        swift_release();
        swift_release();
        v847(v418, v419);
      }
      v872(*((_QWORD *)v183 + 726), v867, *((_QWORD *)v183 + 701));
      v420 = swift_allocObject(&unk_101051860, 280, 7);
      memcpy((void *)(v420 + 16), v855, 0x108uLL);
      v421 = sub_1000590CC((uint64_t *)v855, (void (*)(uint64_t, uint64_t))sub_10001BBBC);
      v422 = Logger.logObject.getter(v421);
      v423 = static os_log_type_t.debug.getter(v422);
      v424 = swift_allocObject(&unk_101051888, 17, 7);
      *(_BYTE *)(v424 + 16) = 32;
      v425 = swift_allocObject(&unk_1010518B0, 17, 7);
      *(_BYTE *)(v425 + 16) = 8;
      v426 = swift_allocObject(&unk_1010518D8, 32, 7);
      *(_QWORD *)(v426 + 16) = sub_100058E4C;
      *(_QWORD *)(v426 + 24) = v420;
      v427 = swift_allocObject(&unk_101051900, 32, 7);
      *(_QWORD *)(v427 + 16) = sub_10005CBA4;
      *(_QWORD *)(v427 + 24) = v426;
      v428 = swift_allocObject(v863, 80, 7);
      sub_100882D28(v428, 3);
      *v429 = sub_10005CBC4;
      v429[1] = v424;
      v429[2] = sub_10005CBC4;
      v429[3] = v425;
      v429[4] = sub_10005CBB4;
      v429[5] = v427;
      swift_retain();
      swift_retain();
      swift_retain();
      swift_bridgeObjectRelease();
      if (os_log_type_enabled(v422, v423))
      {
        v430 = (uint8_t *)sub_1006948A0(12);
        v431 = swift_slowAlloc(32, -1);
        v882 = 0;
        v883 = v431;
        *(_WORD *)v430 = 258;
        v881 = v430 + 2;
        *(_QWORD *)&v884[0] = sub_10005CBC4;
        *((_QWORD *)&v884[0] + 1) = v424;
        sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))v884, (uint64_t)&v881, (uint64_t)&v882, (uint64_t)&v883);
        swift_release();
        *(_QWORD *)&v884[0] = sub_10005CBC4;
        *((_QWORD *)&v884[0] + 1) = v425;
        sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))v884, (uint64_t)&v881, (uint64_t)&v882, (uint64_t)&v883);
        swift_release();
        *(_QWORD *)&v884[0] = sub_10005CBB4;
        *((_QWORD *)&v884[0] + 1) = v427;
        sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))v884, (uint64_t)&v881, (uint64_t)&v882, (uint64_t)&v883);
        v432 = *((_QWORD *)v735 + 726);
        v433 = *((_QWORD *)v735 + 701);
        swift_release();
        v434 = v423;
        v435 = v735;
        _os_log_impl((void *)&_mh_execute_header, v422, v434, "seed: %s", v430, 0xCu);
        swift_arrayDestroy(v431, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v431, -1, -1);
        sub_100694894((uint64_t)v430);

        v847(v432, v433);
      }
      else
      {
        v483 = *((_QWORD *)v183 + 726);
        v484 = *((_QWORD *)v183 + 701);

        swift_release();
        swift_release();
        swift_release();
        v847(v483, v484);
        v435 = v183;
      }
      v872(*((_QWORD *)v435 + 725), v867, *((_QWORD *)v435 + 701));
      v485 = swift_allocObject(&unk_101051928, 280, 7);
      memcpy((void *)(v485 + 16), v855, 0x108uLL);
      v486 = swift_allocObject(&unk_101051950, 280, 7);
      memcpy((void *)(v486 + 16), v855, 0x108uLL);
      sub_1000590CC((uint64_t *)v855, (void (*)(uint64_t, uint64_t))sub_10001BBBC);
      v487 = sub_1000590CC((uint64_t *)v855, (void (*)(uint64_t, uint64_t))sub_10001BBBC);
      v828 = Logger.logObject.getter(v487);
      v823 = static os_log_type_t.debug.getter(v828);
      v488 = swift_allocObject(&unk_101051978, 17, 7);
      *(_BYTE *)(v488 + 16) = 0;
      v489 = swift_allocObject(&unk_1010519A0, 17, 7);
      *(_BYTE *)(v489 + 16) = 8;
      v490 = swift_allocObject(&unk_1010519C8, 32, 7);
      *(_QWORD *)(v490 + 16) = sub_100058E78;
      *(_QWORD *)(v490 + 24) = v485;
      v491 = swift_allocObject(&unk_1010519F0, 32, 7);
      *(_QWORD *)(v491 + 16) = sub_10005CD4C;
      *(_QWORD *)(v491 + 24) = v490;
      v492 = swift_allocObject(&unk_101051A18, 17, 7);
      *(_BYTE *)(v492 + 16) = 32;
      v493 = swift_allocObject(&unk_101051A40, 17, 7);
      *(_BYTE *)(v493 + 16) = 8;
      v494 = swift_allocObject(&unk_101051A68, 32, 7);
      *(_QWORD *)(v494 + 16) = sub_100058E84;
      *(_QWORD *)(v494 + 24) = v486;
      v495 = v435;
      v496 = swift_allocObject(&unk_101051A90, 32, 7);
      *(_QWORD *)(v496 + 16) = sub_10005CBA4;
      *(_QWORD *)(v496 + 24) = v494;
      v497 = swift_allocObject(v863, 128, 7);
      sub_100882D28(v497, 6);
      *v498 = sub_10005CBC4;
      v498[1] = v488;
      v498[2] = sub_10005CBC4;
      v498[3] = v489;
      v498[4] = sub_10005CBB8;
      v498[5] = v491;
      v498[6] = sub_10005CBC4;
      v498[7] = v492;
      v498[8] = sub_10005CBC4;
      v498[9] = v493;
      v498[10] = sub_10005CBB4;
      v498[11] = v496;
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_bridgeObjectRelease();
      if (os_log_type_enabled(v828, v823))
      {
        v499 = (uint8_t *)sub_1006948A0(22);
        v500 = swift_slowAlloc(32, -1);
        v882 = 0;
        v883 = v500;
        v814 = v499;
        *(_WORD *)v499 = 514;
        v881 = v499 + 2;
        *(_QWORD *)&v884[0] = sub_10005CBC4;
        *((_QWORD *)&v884[0] + 1) = v488;
        sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))v884, (uint64_t)&v881, (uint64_t)&v882, (uint64_t)&v883);
        swift_release();
        *(_QWORD *)&v884[0] = sub_10005CBC4;
        *((_QWORD *)&v884[0] + 1) = v489;
        sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))v884, (uint64_t)&v881, (uint64_t)&v882, (uint64_t)&v883);
        swift_release();
        *(_QWORD *)&v884[0] = sub_10005CBB8;
        *((_QWORD *)&v884[0] + 1) = v491;
        sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))v884, (uint64_t)&v881, (uint64_t)&v882, (uint64_t)&v883);
        swift_release();
        *(_QWORD *)&v884[0] = sub_10005CBC4;
        *((_QWORD *)&v884[0] + 1) = v492;
        sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))v884, (uint64_t)&v881, (uint64_t)&v882, (uint64_t)&v883);
        swift_release();
        *(_QWORD *)&v884[0] = sub_10005CBC4;
        *((_QWORD *)&v884[0] + 1) = v493;
        sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))v884, (uint64_t)&v881, (uint64_t)&v882, (uint64_t)&v883);
        swift_release();
        *(_QWORD *)&v884[0] = sub_10005CBB4;
        *((_QWORD *)&v884[0] + 1) = v496;
        sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))v884, (uint64_t)&v881, (uint64_t)&v882, (uint64_t)&v883);
        v495 = v735;
        v501 = *((_QWORD *)v735 + 725);
        v502 = *((_QWORD *)v735 + 701);
        swift_release();
        _os_log_impl((void *)&_mh_execute_header, v828, v823, "attestation (S1) count %ld: %s", v814, 0x16u);
        swift_arrayDestroy(v500, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v500, -1, -1);
        sub_100694894((uint64_t)v814);

        v847(v501, v502);
      }
      else
      {
        v526 = *((_QWORD *)v495 + 725);
        v527 = *((_QWORD *)v495 + 701);

        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        v847(v526, v527);
      }
      v872(*((_QWORD *)v495 + 724), v867, *((_QWORD *)v495 + 701));
      v528 = swift_allocObject(&unk_101051AB8, 280, 7);
      memcpy((void *)(v528 + 16), v855, 0x108uLL);
      v529 = swift_allocObject(&unk_101051AE0, 280, 7);
      memcpy((void *)(v529 + 16), v855, 0x108uLL);
      sub_1000590CC((uint64_t *)v855, (void (*)(uint64_t, uint64_t))sub_10001BBBC);
      v530 = sub_1000590CC((uint64_t *)v855, (void (*)(uint64_t, uint64_t))sub_10001BBBC);
      v845 = Logger.logObject.getter(v530);
      v830 = static os_log_type_t.debug.getter(v845);
      v531 = swift_allocObject(&unk_101051B08, 17, 7);
      *(_BYTE *)(v531 + 16) = 0;
      v532 = swift_allocObject(&unk_101051B30, 17, 7);
      *(_BYTE *)(v532 + 16) = 8;
      v533 = swift_allocObject(&unk_101051B58, 32, 7);
      *(_QWORD *)(v533 + 16) = sub_100058ED0;
      *(_QWORD *)(v533 + 24) = v528;
      v534 = swift_allocObject(&unk_101051B80, 32, 7);
      *(_QWORD *)(v534 + 16) = sub_10005CD4C;
      *(_QWORD *)(v534 + 24) = v533;
      v535 = swift_allocObject(&unk_101051BA8, 17, 7);
      *(_BYTE *)(v535 + 16) = 32;
      v536 = swift_allocObject(&unk_101051BD0, 17, 7);
      *(_BYTE *)(v536 + 16) = 8;
      v537 = swift_allocObject(&unk_101051BF8, 32, 7);
      *(_QWORD *)(v537 + 16) = sub_100058EDC;
      *(_QWORD *)(v537 + 24) = v529;
      v538 = swift_allocObject(&unk_101051C20, 32, 7);
      *(_QWORD *)(v538 + 16) = sub_10005CBA4;
      *(_QWORD *)(v538 + 24) = v537;
      v539 = swift_allocObject(v863, 128, 7);
      sub_100882D28(v539, 6);
      *v540 = sub_10005CBC4;
      v540[1] = v531;
      v540[2] = sub_10005CBC4;
      v540[3] = v532;
      v540[4] = sub_10005CBB8;
      v540[5] = v534;
      v540[6] = sub_10005CBC4;
      v540[7] = v535;
      v540[8] = sub_10005CBC4;
      v540[9] = v536;
      v540[10] = sub_10005CBB4;
      v540[11] = v538;
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_bridgeObjectRelease();
      if (os_log_type_enabled(v845, v830))
      {
        v819 = v536;
        v541 = (uint8_t *)sub_1006948A0(22);
        v542 = swift_slowAlloc(32, -1);
        v882 = 0;
        v883 = v542;
        *(_WORD *)v541 = 514;
        v881 = v541 + 2;
        *(_QWORD *)&v884[0] = sub_10005CBC4;
        *((_QWORD *)&v884[0] + 1) = v531;
        sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))v884, (uint64_t)&v881, (uint64_t)&v882, (uint64_t)&v883);
        swift_release();
        *(_QWORD *)&v884[0] = sub_10005CBC4;
        *((_QWORD *)&v884[0] + 1) = v532;
        sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))v884, (uint64_t)&v881, (uint64_t)&v882, (uint64_t)&v883);
        swift_release();
        *(_QWORD *)&v884[0] = sub_10005CBB8;
        *((_QWORD *)&v884[0] + 1) = v534;
        sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))v884, (uint64_t)&v881, (uint64_t)&v882, (uint64_t)&v883);
        swift_release();
        *(_QWORD *)&v884[0] = sub_10005CBC4;
        *((_QWORD *)&v884[0] + 1) = v535;
        sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))v884, (uint64_t)&v881, (uint64_t)&v882, (uint64_t)&v883);
        swift_release();
        *(_QWORD *)&v884[0] = sub_10005CBC4;
        *((_QWORD *)&v884[0] + 1) = v819;
        sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))v884, (uint64_t)&v881, (uint64_t)&v882, (uint64_t)&v883);
        swift_release();
        *(_QWORD *)&v884[0] = sub_10005CBB4;
        *((_QWORD *)&v884[0] + 1) = v538;
        sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))v884, (uint64_t)&v881, (uint64_t)&v882, (uint64_t)&v883);
        v543 = v735;
        v544 = *((_QWORD *)v735 + 724);
        v545 = *((_QWORD *)v735 + 701);
        swift_release();
        _os_log_impl((void *)&_mh_execute_header, v845, v830, "BAA signature (S2) count %ld: %s", v541, 0x16u);
        swift_arrayDestroy(v542, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v542, -1, -1);
        sub_100694894((uint64_t)v541);

        v847(v544, v545);
      }
      else
      {
        v543 = v735;
        v831 = *((_QWORD *)v735 + 724);
        v546 = *((_QWORD *)v735 + 701);

        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        v847((uint64_t)v831, v546);
      }
      v872(*((_QWORD *)v543 + 723), v867, *((_QWORD *)v543 + 701));
      v547 = swift_allocObject(&unk_101051C48, 280, 7);
      memcpy((void *)(v547 + 16), v855, 0x108uLL);
      v548 = sub_1000590CC((uint64_t *)v855, (void (*)(uint64_t, uint64_t))sub_10001BBBC);
      v549 = Logger.logObject.getter(v548);
      v550 = static os_log_type_t.debug.getter(v549);
      v551 = swift_allocObject(&unk_101051C70, 17, 7);
      *(_BYTE *)(v551 + 16) = 0;
      v552 = swift_allocObject(&unk_101051C98, 17, 7);
      *(_BYTE *)(v552 + 16) = 1;
      v553 = swift_allocObject(&unk_101051CC0, 32, 7);
      *(_QWORD *)(v553 + 16) = sub_100058F28;
      *(_QWORD *)(v553 + 24) = v547;
      v554 = swift_allocObject(&unk_101051CE8, 32, 7);
      *(_QWORD *)(v554 + 16) = sub_100058F50;
      *(_QWORD *)(v554 + 24) = v553;
      v555 = swift_allocObject(v863, 80, 7);
      sub_100882D28(v555, 3);
      *v556 = sub_10005CBC4;
      v556[1] = v551;
      v556[2] = sub_10005CBC4;
      v556[3] = v552;
      v556[4] = sub_100058F58;
      v556[5] = v554;
      swift_retain();
      swift_retain();
      swift_retain();
      swift_bridgeObjectRelease();
      if (os_log_type_enabled(v549, v550))
      {
        v557 = (uint8_t *)sub_1006948A0(5);
        v882 = 0;
        v883 = 0;
        *(_WORD *)v557 = 256;
        v881 = v557 + 2;
        *(_QWORD *)&v884[0] = sub_10005CBC4;
        *((_QWORD *)&v884[0] + 1) = v551;
        sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))v884, (uint64_t)&v881, (uint64_t)&v882, (uint64_t)&v883);
        swift_release();
        *(_QWORD *)&v884[0] = sub_10005CBC4;
        *((_QWORD *)&v884[0] + 1) = v552;
        sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))v884, (uint64_t)&v881, (uint64_t)&v882, (uint64_t)&v883);
        swift_release();
        *(_QWORD *)&v884[0] = sub_100058F58;
        *((_QWORD *)&v884[0] + 1) = v554;
        sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))v884, (uint64_t)&v881, (uint64_t)&v882, (uint64_t)&v883);
        v558 = v735;
        v559 = *((_QWORD *)v735 + 723);
        v560 = *((_QWORD *)v735 + 701);
        swift_release();
        _os_log_impl((void *)&_mh_execute_header, v549, v550, "beaconPartId: %hhu", v557, 5u);
        sub_100694894((uint64_t)v557);

        v847(v559, v560);
      }
      else
      {
        v558 = v735;
        v578 = *((_QWORD *)v735 + 723);
        v579 = *((_QWORD *)v735 + 701);

        swift_release();
        swift_release();
        swift_release();
        v847(v578, v579);
      }
      v872(*((_QWORD *)v558 + 722), v867, *((_QWORD *)v558 + 701));
      v580 = swift_allocObject(&unk_101051D10, 280, 7);
      memcpy((void *)(v580 + 16), v855, 0x108uLL);
      v581 = sub_1000590CC((uint64_t *)v855, (void (*)(uint64_t, uint64_t))sub_10001BBBC);
      v582 = Logger.logObject.getter(v581);
      v583 = static os_log_type_t.debug.getter(v582);
      v584 = swift_allocObject(&unk_101051D38, 17, 7);
      *(_BYTE *)(v584 + 16) = 32;
      v585 = swift_allocObject(&unk_101051D60, 17, 7);
      *(_BYTE *)(v585 + 16) = 8;
      v586 = swift_allocObject(&unk_101051D88, 32, 7);
      *(_QWORD *)(v586 + 16) = sub_100058F64;
      *(_QWORD *)(v586 + 24) = v580;
      v587 = swift_allocObject(&unk_101051DB0, 32, 7);
      *(_QWORD *)(v587 + 16) = sub_10005CBA4;
      *(_QWORD *)(v587 + 24) = v586;
      v588 = swift_allocObject(v863, 80, 7);
      sub_100882D28(v588, 3);
      *v589 = sub_10005CBC4;
      v589[1] = v584;
      v589[2] = sub_10005CBC4;
      v589[3] = v585;
      v589[4] = sub_10005CBB4;
      v589[5] = v587;
      swift_retain();
      swift_retain();
      swift_retain();
      swift_bridgeObjectRelease();
      if (os_log_type_enabled(v582, v583))
      {
        v590 = (uint8_t *)sub_1006948A0(12);
        v591 = swift_slowAlloc(32, -1);
        v882 = 0;
        v883 = v591;
        v832 = v591;
        *(_WORD *)v590 = 258;
        v881 = v590 + 2;
        *(_QWORD *)&v884[0] = sub_10005CBC4;
        *((_QWORD *)&v884[0] + 1) = v584;
        sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))v884, (uint64_t)&v881, (uint64_t)&v882, (uint64_t)&v883);
        swift_release();
        *(_QWORD *)&v884[0] = sub_10005CBC4;
        *((_QWORD *)&v884[0] + 1) = v585;
        sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))v884, (uint64_t)&v881, (uint64_t)&v882, (uint64_t)&v883);
        swift_release();
        *(_QWORD *)&v884[0] = sub_10005CBB4;
        *((_QWORD *)&v884[0] + 1) = v587;
        sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))v884, (uint64_t)&v881, (uint64_t)&v882, (uint64_t)&v883);
        v592 = *((_QWORD *)v735 + 722);
        v593 = *((_QWORD *)v735 + 701);
        swift_release();
        _os_log_impl((void *)&_mh_execute_header, v582, v583, "C1: %s", v590, 0xCu);
        swift_arrayDestroy(v832, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v832, -1, -1);
        sub_100694894((uint64_t)v590);

        v847(v592, v593);
      }
      else
      {
        v597 = *((_QWORD *)v735 + 722);
        v598 = *((_QWORD *)v735 + 701);

        swift_release();
        swift_release();
        swift_release();
        v847(v597, v598);
      }
      v872(*((_QWORD *)v735 + 721), v867, *((_QWORD *)v735 + 701));
      v599 = swift_allocObject(&unk_101051DD8, 280, 7);
      memcpy((void *)(v599 + 16), v855, 0x108uLL);
      v600 = sub_1000590CC((uint64_t *)v855, (void (*)(uint64_t, uint64_t))sub_10001BBBC);
      v601 = Logger.logObject.getter(v600);
      v602 = static os_log_type_t.debug.getter(v601);
      v603 = swift_allocObject(&unk_101051E00, 17, 7);
      *(_BYTE *)(v603 + 16) = 32;
      v604 = swift_allocObject(&unk_101051E28, 17, 7);
      *(_BYTE *)(v604 + 16) = 8;
      v605 = swift_allocObject(&unk_101051E50, 32, 7);
      *(_QWORD *)(v605 + 16) = sub_100058F90;
      *(_QWORD *)(v605 + 24) = v599;
      v606 = swift_allocObject(&unk_101051E78, 32, 7);
      *(_QWORD *)(v606 + 16) = sub_10005CBA4;
      *(_QWORD *)(v606 + 24) = v605;
      v607 = swift_allocObject(v863, 80, 7);
      sub_100882D28(v607, 3);
      *v608 = sub_10005CBC4;
      v608[1] = v603;
      v608[2] = sub_10005CBC4;
      v608[3] = v604;
      v608[4] = sub_10005CBB4;
      v608[5] = v606;
      swift_retain();
      swift_retain();
      swift_retain();
      swift_bridgeObjectRelease();
      if (os_log_type_enabled(v601, v602))
      {
        v609 = (uint8_t *)sub_1006948A0(12);
        v610 = swift_slowAlloc(32, -1);
        v882 = 0;
        v883 = v610;
        v833 = v610;
        *(_WORD *)v609 = 258;
        v881 = v609 + 2;
        *(_QWORD *)&v884[0] = sub_10005CBC4;
        *((_QWORD *)&v884[0] + 1) = v603;
        sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))v884, (uint64_t)&v881, (uint64_t)&v882, (uint64_t)&v883);
        swift_release();
        *(_QWORD *)&v884[0] = sub_10005CBC4;
        *((_QWORD *)&v884[0] + 1) = v604;
        sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))v884, (uint64_t)&v881, (uint64_t)&v882, (uint64_t)&v883);
        swift_release();
        *(_QWORD *)&v884[0] = sub_10005CBB4;
        *((_QWORD *)&v884[0] + 1) = v606;
        sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))v884, (uint64_t)&v881, (uint64_t)&v882, (uint64_t)&v883);
        v611 = *((_QWORD *)v735 + 721);
        v612 = *((_QWORD *)v735 + 701);
        swift_release();
        _os_log_impl((void *)&_mh_execute_header, v601, v602, "Certs: %s", v609, 0xCu);
        swift_arrayDestroy(v833, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v833, -1, -1);
        sub_100694894((uint64_t)v609);

        v847(v611, v612);
      }
      else
      {
        v613 = *((_QWORD *)v735 + 721);
        v614 = *((_QWORD *)v735 + 701);

        swift_release();
        swift_release();
        swift_release();
        v847(v613, v614);
      }
      v872(*((_QWORD *)v735 + 720), v867, *((_QWORD *)v735 + 701));
      v615 = swift_allocObject(&unk_101051EA0, 280, 7);
      memcpy((void *)(v615 + 16), v855, 0x108uLL);
      v616 = sub_1000590CC((uint64_t *)v855, (void (*)(uint64_t, uint64_t))sub_10001BBBC);
      v617 = Logger.logObject.getter(v616);
      v618 = static os_log_type_t.debug.getter(v617);
      v619 = swift_allocObject(&unk_101051EC8, 17, 7);
      *(_BYTE *)(v619 + 16) = 32;
      v620 = swift_allocObject(&unk_101051EF0, 17, 7);
      *(_BYTE *)(v620 + 16) = 8;
      v621 = swift_allocObject(&unk_101051F18, 32, 7);
      *(_QWORD *)(v621 + 16) = sub_100058FBC;
      *(_QWORD *)(v621 + 24) = v615;
      v622 = swift_allocObject(&unk_101051F40, 32, 7);
      *(_QWORD *)(v622 + 16) = sub_10005CBA4;
      *(_QWORD *)(v622 + 24) = v621;
      v623 = swift_allocObject(v863, 80, 7);
      sub_100882D28(v623, 3);
      *v624 = sub_10005CBC4;
      v624[1] = v619;
      v624[2] = sub_10005CBC4;
      v624[3] = v620;
      v624[4] = sub_10005CBB4;
      v624[5] = v622;
      swift_retain();
      swift_retain();
      swift_retain();
      swift_bridgeObjectRelease();
      if (os_log_type_enabled(v617, v618))
      {
        v625 = (uint8_t *)sub_1006948A0(12);
        v626 = swift_slowAlloc(32, -1);
        v882 = 0;
        v883 = v626;
        v834 = v626;
        *(_WORD *)v625 = 258;
        v881 = v625 + 2;
        *(_QWORD *)&v884[0] = sub_10005CBC4;
        *((_QWORD *)&v884[0] + 1) = v619;
        sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))v884, (uint64_t)&v881, (uint64_t)&v882, (uint64_t)&v883);
        swift_release();
        *(_QWORD *)&v884[0] = sub_10005CBC4;
        *((_QWORD *)&v884[0] + 1) = v620;
        sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))v884, (uint64_t)&v881, (uint64_t)&v882, (uint64_t)&v883);
        swift_release();
        *(_QWORD *)&v884[0] = sub_10005CBB4;
        *((_QWORD *)&v884[0] + 1) = v622;
        sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))v884, (uint64_t)&v881, (uint64_t)&v882, (uint64_t)&v883);
        v627 = *((_QWORD *)v735 + 720);
        v628 = *((_QWORD *)v735 + 701);
        swift_release();
        _os_log_impl((void *)&_mh_execute_header, v617, v618, "AuthNonce: %s", v625, 0xCu);
        swift_arrayDestroy(v834, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v834, -1, -1);
        sub_100694894((uint64_t)v625);

        v847(v627, v628);
      }
      else
      {
        v629 = *((_QWORD *)v735 + 720);
        v630 = *((_QWORD *)v735 + 701);

        swift_release();
        swift_release();
        swift_release();
        v847(v629, v630);
      }
      v872(*((_QWORD *)v735 + 719), v867, *((_QWORD *)v735 + 701));
      v631 = swift_allocObject(&unk_101051F68, 280, 7);
      memcpy((void *)(v631 + 16), v855, 0x108uLL);
      v632 = sub_1000590CC((uint64_t *)v855, (void (*)(uint64_t, uint64_t))sub_10001BBBC);
      v633 = Logger.logObject.getter(v632);
      v634 = static os_log_type_t.debug.getter(v633);
      v635 = swift_allocObject(&unk_101051F90, 17, 7);
      *(_BYTE *)(v635 + 16) = 32;
      v636 = swift_allocObject(&unk_101051FB8, 17, 7);
      *(_BYTE *)(v636 + 16) = 8;
      v637 = swift_allocObject(&unk_101051FE0, 32, 7);
      *(_QWORD *)(v637 + 16) = sub_100058FE8;
      *(_QWORD *)(v637 + 24) = v631;
      v638 = swift_allocObject(&unk_101052008, 32, 7);
      *(_QWORD *)(v638 + 16) = sub_10005CBA4;
      *(_QWORD *)(v638 + 24) = v637;
      v639 = swift_allocObject(v863, 80, 7);
      sub_100882D28(v639, 3);
      *v640 = sub_10005CBC4;
      v640[1] = v635;
      v640[2] = sub_10005CBC4;
      v640[3] = v636;
      v640[4] = sub_10005CBB4;
      v640[5] = v638;
      swift_retain();
      swift_retain();
      swift_retain();
      swift_bridgeObjectRelease();
      if (os_log_type_enabled(v633, v634))
      {
        v641 = (uint8_t *)sub_1006948A0(12);
        v642 = swift_slowAlloc(32, -1);
        v882 = 0;
        v883 = v642;
        v835 = v642;
        *(_WORD *)v641 = 258;
        v881 = v641 + 2;
        *(_QWORD *)&v884[0] = sub_10005CBC4;
        *((_QWORD *)&v884[0] + 1) = v635;
        sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))v884, (uint64_t)&v881, (uint64_t)&v882, (uint64_t)&v883);
        swift_release();
        *(_QWORD *)&v884[0] = sub_10005CBC4;
        *((_QWORD *)&v884[0] + 1) = v636;
        sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))v884, (uint64_t)&v881, (uint64_t)&v882, (uint64_t)&v883);
        swift_release();
        *(_QWORD *)&v884[0] = sub_10005CBB4;
        *((_QWORD *)&v884[0] + 1) = v638;
        sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))v884, (uint64_t)&v881, (uint64_t)&v882, (uint64_t)&v883);
        v643 = *((_QWORD *)v735 + 719);
        v644 = *((_QWORD *)v735 + 701);
        swift_release();
        _os_log_impl((void *)&_mh_execute_header, v633, v634, "CSR: %s", v641, 0xCu);
        swift_arrayDestroy(v835, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v835, -1, -1);
        sub_100694894((uint64_t)v641);

        v847(v643, v644);
      }
      else
      {
        v645 = *((_QWORD *)v735 + 719);
        v646 = *((_QWORD *)v735 + 701);

        swift_release();
        swift_release();
        swift_release();
        v847(v645, v646);
      }
      v647 = *((_QWORD *)v735 + 678);
      *(_BYTE *)(v647 + 176) = 3;
      v648 = *(_QWORD *)(v647 + 184);
      v649 = *((_QWORD *)v735 + 102);
      v650 = *((_QWORD *)v735 + 103);
      swift_retain();
      sub_10001BBBC(v649, v650);
      sub_1002F702C(v649, v650);
      v651 = *((_QWORD *)v735 + 696);
      v652 = *(_QWORD *)(v648 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_collaborativeKeyC1);
      v653 = *(_QWORD *)(v648 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_collaborativeKeyC1 + 8);
      *(_OWORD *)(v648 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_collaborativeKeyC1) = v884[0];
      sub_10001EF3C(v652, v653);
      swift_release();
      v654 = *((_QWORD *)v735 + 106);
      v655 = *((_QWORD *)v735 + 107);
      v656 = (uint64_t *)(*(_QWORD *)(v647 + 184)
                       + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessorySerialNumber);
      v657 = *v656;
      v658 = v656[1];
      *v656 = v654;
      v656[1] = v655;
      sub_10001BBBC(v654, v655);
      sub_10001EF3C(v657, v658);
      v659 = *((_QWORD *)v735 + 122);
      v660 = *((_QWORD *)v735 + 123);
      v661 = (uint64_t *)(*(_QWORD *)(v647 + 184) + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_baaSignatureS2);
      v662 = *v661;
      v663 = v661[1];
      *v661 = v659;
      v661[1] = v660;
      sub_10001BBBC(v659, v660);
      sub_10001EF3C(v662, v663);
      v664 = *((_QWORD *)v735 + 112);
      v665 = *((_QWORD *)v735 + 113);
      v666 = (uint64_t *)(*(_QWORD *)(v647 + 184) + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_scrtAttestation);
      v667 = *v666;
      v668 = v666[1];
      *v666 = v664;
      v666[1] = v665;
      sub_10001BBBC(v664, v665);
      sub_10001EF3C(v667, v668);
      v669 = *((_QWORD *)v735 + 110);
      v670 = *((_QWORD *)v735 + 111);
      v671 = (uint64_t *)(*(_QWORD *)(v647 + 184) + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_seedK1);
      v672 = *v671;
      v673 = v671[1];
      *v671 = v669;
      v671[1] = v670;
      sub_10001BBBC(v669, v670);
      sub_10001EF3C(v672, v673);
      v674 = *(_QWORD *)(v647 + 184);
      *(_WORD *)(v674 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessoryPartId) = *((unsigned __int8 *)v735
                                                                                                + 1024);
      v735[336] = v735[52];
      v675 = sub_100035530();
      swift_retain();
      *(_QWORD *)(v674 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_numBeacons) = DataProtocol.intValue.getter(&type metadata for Data, v675);
      swift_release();
      v676 = *((_QWORD *)v735 + 129);
      v677 = *((_QWORD *)v735 + 130);
      v678 = Data.trimmed.getter(v676, v677);
      v680 = v679;
      static String.Encoding.utf8.getter(v678);
      v851 = String.init(data:encoding:)(v678, v680, v651);
      v682 = v681;
      sub_10001BC14(v678, v680);
      if (!v682)
      {
        v683 = Data.trimmed.getter(v676, v677);
        v685 = v684;
        v851 = Data.hexString.getter(v683, v684);
        v682 = v686;
        sub_10001BC14(v683, v685);
      }
      v872(*((_QWORD *)v735 + 718), v867, *((_QWORD *)v735 + 701));
      v687 = swift_allocObject(&unk_101052030, 32, 7);
      *(_QWORD *)(v687 + 16) = v851;
      *(_QWORD *)(v687 + 24) = v682;
      swift_bridgeObjectRetain(v682);
      v689 = Logger.logObject.getter(v688);
      v690 = static os_log_type_t.default.getter(v689);
      v691 = swift_allocObject(&unk_101052058, 17, 7);
      *(_BYTE *)(v691 + 16) = 34;
      v692 = swift_allocObject(&unk_101052080, 17, 7);
      *(_BYTE *)(v692 + 16) = 8;
      v693 = swift_allocObject(&unk_1010520A8, 32, 7);
      *(_QWORD *)(v693 + 16) = sub_100059034;
      *(_QWORD *)(v693 + 24) = v687;
      v694 = swift_allocObject(&unk_1010520D0, 32, 7);
      *(_QWORD *)(v694 + 16) = sub_10005CBA4;
      *(_QWORD *)(v694 + 24) = v693;
      v695 = swift_allocObject(v863, 80, 7);
      sub_100882D28(v695, 3);
      *v696 = sub_10005CBC4;
      v696[1] = v691;
      v696[2] = sub_10005CBC4;
      v696[3] = v692;
      v696[4] = sub_10005CBB4;
      v696[5] = v694;
      swift_retain();
      swift_retain();
      swift_retain();
      swift_bridgeObjectRelease();
      if (os_log_type_enabled(v689, v690))
      {
        v697 = (uint8_t *)sub_1006948A0(12);
        v698 = swift_slowAlloc(32, -1);
        v882 = 0;
        v883 = v698;
        v871 = v698;
        v880 = v697;
        *(_WORD *)v697 = 258;
        v881 = v697 + 2;
        *(_QWORD *)&v884[0] = sub_10005CBC4;
        *((_QWORD *)&v884[0] + 1) = v691;
        sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))v884, (uint64_t)&v881, (uint64_t)&v882, (uint64_t)&v883);
        swift_release();
        *(_QWORD *)&v884[0] = sub_10005CBC4;
        *((_QWORD *)&v884[0] + 1) = v692;
        sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))v884, (uint64_t)&v881, (uint64_t)&v882, (uint64_t)&v883);
        swift_release();
        *(_QWORD *)&v884[0] = sub_10005CBB4;
        *((_QWORD *)&v884[0] + 1) = v694;
        sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))v884, (uint64_t)&v881, (uint64_t)&v882, (uint64_t)&v883);
        v699 = *((_QWORD *)v735 + 718);
        v700 = *((_QWORD *)v735 + 702);
        v701 = *((_QWORD *)v735 + 701);
        swift_release();
        _os_log_impl((void *)&_mh_execute_header, v689, v690, "beaconDisplayName: %{public}s", v880, 0xCu);
        swift_arrayDestroy(v871, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v871, -1, -1);
        sub_100694894((uint64_t)v880);

        v702 = *(void (**)(uint64_t, uint64_t))(v700 + 8);
        v702(v699, v701);
      }
      else
      {
        v703 = *((_QWORD *)v735 + 718);
        v704 = *((_QWORD *)v735 + 702);
        v705 = *((_QWORD *)v735 + 701);

        swift_release();
        swift_release();
        swift_release();
        v702 = *(void (**)(uint64_t, uint64_t))(v704 + 8);
        v702(v703, v705);
      }
      *((_QWORD *)v735 + 760) = v702;
      v706 = *((_QWORD *)v735 + 678);
      v707 = (uint64_t *)(*(_QWORD *)(v647 + 184)
                       + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessoryDisplayName);
      *v707 = v851;
      v707[1] = v682;
      swift_bridgeObjectRelease();
      v708 = *((_QWORD *)v735 + 131);
      v709 = *((_QWORD *)v735 + 132);
      v710 = (uint64_t *)(*(_QWORD *)(v647 + 184) + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_authNonce);
      v711 = *v710;
      v712 = v710[1];
      *v710 = v708;
      v710[1] = v709;
      sub_10001BBBC(v708, v709);
      sub_10001EF3C(v711, v712);
      v713 = *((_QWORD *)v735 + 133);
      v714 = *((_QWORD *)v735 + 134);
      v715 = (uint64_t *)(*(_QWORD *)(v647 + 184)
                       + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_alternateSerialNumber);
      v716 = *v715;
      v717 = v715[1];
      *v715 = v713;
      v715[1] = v714;
      sub_10001BBBC(v713, v714);
      sub_10001EF3C(v716, v717);
      v718 = *((_QWORD *)v735 + 114);
      v719 = *((_QWORD *)v735 + 115);
      v720 = (uint64_t *)(*(_QWORD *)(v647 + 184) + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessoryCerts);
      v721 = *v720;
      v722 = v720[1];
      *v720 = v718;
      v720[1] = v719;
      sub_10001BBBC(v718, v719);
      sub_10001EF3C(v721, v722);
      v723 = *((_QWORD *)v735 + 118);
      v724 = *((_QWORD *)v735 + 119);
      v725 = (uint64_t *)(*(_QWORD *)(v647 + 184) + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_csr);
      v726 = *v725;
      v727 = v725[1];
      *v725 = v723;
      v725[1] = v724;
      sub_10001BBBC(v723, v724);
      sub_10001EF3C(v726, v727);
      v728 = sub_1005FD720();
      v729 = Data.chunked(into:)(v728, *((_QWORD *)v735 + 108), *((_QWORD *)v735 + 109));
      *((_QWORD *)v735 + 761) = sub_10004F2F8(v729);
      *((_QWORD *)v735 + 762) = 0;
      *(_QWORD *)(*(_QWORD *)(v647 + 184) + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_otherSerialNumbers) = v729;
      swift_bridgeObjectRelease();
      if (*(_BYTE *)(v706 + 272) == 1)
      {
        swift_bridgeObjectRelease();
        v730 = *(_QWORD *)(*((_QWORD *)v735 + 678) + 184);
        swift_retain();
        v731 = sub_10004F450();
        *((_QWORD *)v735 + 764) = 0;
        *(_QWORD *)(v730 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_otherSerialNumbersAndMACAddresses) = v731;
        swift_release();
        swift_bridgeObjectRelease();
        v733 = (__int128 **)swift_task_alloc(dword_1010EC57C);
        *((_QWORD *)v735 + 765) = v733;
        *v733 = v735;
        v733[1] = (__int128 *)sub_10004C230;
        return sub_10004F8CC((uint64_t)(v735 + 1), *((_QWORD *)v735 + 746), *((_QWORD *)v735 + 677));
      }
      else
      {
        v732 = (__int128 **)swift_task_alloc(dword_10111110C);
        *((_QWORD *)v735 + 763) = v732;
        *v732 = v735;
        v732[1] = (__int128 *)sub_10004B488;
        return sub_100A837D4(*((_QWORD *)v735 + 697), *((_QWORD *)v735 + 677));
      }
    }
    v872(*((_QWORD *)v735 + 730), v867, *((_QWORD *)v735 + 701));
    v214 = swift_allocObject(&unk_101051478, 280, 7);
    sub_100057230(v860, (void *)(v214 + 16));
    sub_100057230(v852, v735 + 84);
    v215 = (uint64_t *)sub_10005A21C((uint64_t)(v735 + 84));
    v216 = sub_1000590CC(v215, (void (*)(uint64_t, uint64_t))sub_10001BBBC);
    v201 = Logger.logObject.getter(v216);
    v217 = static os_log_type_t.error.getter(v201);
    v218 = swift_allocObject(&unk_1010514A0, 17, 7);
    *(_BYTE *)(v218 + 16) = 34;
    v219 = swift_allocObject(&unk_1010514C8, 17, 7);
    *(_BYTE *)(v219 + 16) = 8;
    v220 = swift_allocObject(&unk_1010514F0, 32, 7);
    *(_QWORD *)(v220 + 16) = sub_10005CD48;
    *(_QWORD *)(v220 + 24) = v214;
    v221 = swift_allocObject(&unk_101051518, 32, 7);
    *(_QWORD *)(v221 + 16) = sub_10005CBA4;
    *(_QWORD *)(v221 + 24) = v220;
    v222 = swift_allocObject(v863, 80, 7);
    sub_100882D28(v222, 3);
    *v223 = sub_10005CBC4;
    v223[1] = v218;
    v223[2] = sub_10005CBC4;
    v223[3] = v219;
    v223[4] = sub_10005CBB4;
    v223[5] = v221;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRelease();
    if (!os_log_type_enabled(v201, v217))
    {
      v276 = *((_QWORD *)v735 + 730);
      v277 = *((_QWORD *)v735 + 701);

      swift_release();
      swift_release();
      swift_release();
      v226 = v276;
      v227 = v277;
      goto LABEL_54;
    }
    v224 = (uint8_t *)sub_1006948A0(12);
    v225 = swift_slowAlloc(32, -1);
    v882 = 0;
    v883 = v225;
    v875 = v224;
    *(_WORD *)v224 = 258;
    v881 = v224 + 2;
    *(_QWORD *)&v884[0] = sub_10005CBC4;
    *((_QWORD *)&v884[0] + 1) = v218;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))v884, (uint64_t)&v881, (uint64_t)&v882, (uint64_t)&v883);
    swift_release();
    *(_QWORD *)&v884[0] = sub_10005CBC4;
    *((_QWORD *)&v884[0] + 1) = v219;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))v884, (uint64_t)&v881, (uint64_t)&v882, (uint64_t)&v883);
    swift_release();
    *(_QWORD *)&v884[0] = sub_10005CBB4;
    *((_QWORD *)&v884[0] + 1) = v221;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))v884, (uint64_t)&v881, (uint64_t)&v882, (uint64_t)&v883);
    v1 = v735;
    v211 = *((_QWORD *)v735 + 730);
    v212 = *((_QWORD *)v735 + 701);
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, v201, v217, "Invalid sendPairingData payload %{public}s", v875, 0xCu);
    swift_arrayDestroy(v225, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v225, -1, -1);
    v213 = (uint64_t)v875;
LABEL_43:
    sub_100694894(v213);

    v226 = v211;
    v227 = v212;
LABEL_54:
    v847(v226, v227);
    goto LABEL_55;
  }
  v106 = v1 + 297;
  v107 = *((_QWORD *)v1 + 737);
  v108 = *((_QWORD *)v1 + 701);
  sub_10005A21C((uint64_t)v1 + 2664);
  v109 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v872)(v107, v867, v108);
  v110 = Logger.logObject.getter(v109);
  v111 = static os_log_type_t.default.getter(v110);
  v112 = sub_100BD13F8(0);
  v113 = os_log_type_enabled(v110, v111);
  v114 = *((_QWORD *)v1 + 737);
  v115 = *((_QWORD *)v1 + 701);
  if (v113)
  {
    v116 = (uint8_t *)sub_1006948A0(2);
    v883 = 0;
    *(_QWORD *)&v884[0] = 0;
    *(_WORD *)v116 = 0;
    v882 = v116 + 2;
    sub_100A3DD1C((uint64_t)v112, (uint64_t)&v882, (uint64_t)&v883, (uint64_t)v884);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v110, v111, "Received pairing status.", v116, 2u);
    sub_100694894((uint64_t)v116);

    v847(v114, v115);
  }
  else
  {

    swift_bridgeObjectRelease();
    v44(v114, v115);
  }
  *(_BYTE *)(*((_QWORD *)v735 + 678) + 176) = 5;
  sub_10024B874();
  v158 = sub_10001A9A8(&qword_1010EC540);
  if (!swift_dynamicCast(v106, (char *)v1 + 5192, v158, &type metadata for AirPodsSWSendPairingStatusCommandPayload, 6))
  {
    v872(*((_QWORD *)v735 + 712), v867, *((_QWORD *)v735 + 701));
    v192 = swift_allocObject(&unk_1010509B0, 280, 7);
    sub_100057230(v860, (void *)(v192 + 16));
    sub_100057230(v852, (char *)v735 + 4248);
    v193 = (uint64_t *)sub_10005A21C((uint64_t)v735 + 4248);
    v194 = v193[2];
    v195 = v193[3];
    v196 = v193[4];
    v197 = v193[5];
    v198 = v193[6];
    v199 = v193[7];
    sub_10001BBBC(*v193, v193[1]);
    sub_10001BBBC(v194, v195);
    sub_10001BBBC(v196, v197);
    v200 = sub_10001BBBC(v198, v199);
    v201 = Logger.logObject.getter(v200);
    v202 = static os_log_type_t.error.getter(v201);
    v203 = swift_allocObject(&unk_1010509D8, 17, 7);
    *(_BYTE *)(v203 + 16) = 34;
    v204 = swift_allocObject(&unk_101050A00, 17, 7);
    *(_BYTE *)(v204 + 16) = 8;
    v205 = swift_allocObject(&unk_101050A28, 32, 7);
    *(_QWORD *)(v205 + 16) = sub_100057F70;
    *(_QWORD *)(v205 + 24) = v192;
    v206 = swift_allocObject(&unk_101050A50, 32, 7);
    *(_QWORD *)(v206 + 16) = sub_10005CBA4;
    *(_QWORD *)(v206 + 24) = v205;
    v207 = swift_allocObject(v863, 80, 7);
    sub_100882D28(v207, 3);
    *v208 = sub_10005CBC4;
    v208[1] = v203;
    v208[2] = sub_10005CBC4;
    v208[3] = v204;
    v208[4] = sub_10005CBB4;
    v208[5] = v206;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRelease();
    if (!os_log_type_enabled(v201, v202))
    {
      v274 = *((_QWORD *)v735 + 712);
      v275 = *((_QWORD *)v735 + 701);

      swift_release();
      swift_release();
      swift_release();
      v847(v274, v275);
      v1 = v735;
LABEL_55:
      v100 = *((_QWORD *)v1 + 746);
      v101 = *((_QWORD *)v1 + 745);
      v102 = *((_QWORD *)v1 + 744);
      v278 = sub_100056FAC();
      v189 = swift_allocError(&type metadata for AirPodsLEPairingService.Error, v278, 0, 0);
      v191 = 0x8000000000000007;
LABEL_56:
      *v190 = v191;
      swift_willThrow(v189);
      swift_release();
      sub_10005726C((uint64_t)v860, (void (*)(void))sub_10001BC14);
LABEL_57:
      (*(void (**)(uint64_t, uint64_t))(v101 + 8))(v100, v102);
LABEL_58:
      v279 = *((_QWORD *)v1 + 746);
      v280 = *((_QWORD *)v1 + 743);
      v281 = *((_QWORD *)v1 + 742);
      v282 = *((_QWORD *)v1 + 741);
      v283 = *((_QWORD *)v1 + 740);
      v284 = *((_QWORD *)v1 + 739);
      v285 = *((_QWORD *)v1 + 738);
      v286 = *((_QWORD *)v1 + 737);
      v287 = *((_QWORD *)v1 + 736);
      v288 = v1;
      v289 = *((_QWORD *)v1 + 735);
      v736 = *((_QWORD *)v288 + 734);
      v738 = *((_QWORD *)v288 + 733);
      v740 = *((_QWORD *)v288 + 732);
      v742 = *((_QWORD *)v288 + 731);
      v744 = *((_QWORD *)v288 + 730);
      v746 = *((_QWORD *)v288 + 729);
      v748 = *((_QWORD *)v288 + 728);
      v750 = *((_QWORD *)v288 + 727);
      v752 = *((_QWORD *)v288 + 726);
      v754 = *((_QWORD *)v288 + 725);
      v756 = *((_QWORD *)v288 + 724);
      v758 = *((_QWORD *)v288 + 723);
      v760 = *((_QWORD *)v288 + 722);
      v762 = *((_QWORD *)v288 + 721);
      v764 = *((_QWORD *)v288 + 720);
      v766 = *((_QWORD *)v288 + 719);
      v768 = *((_QWORD *)v288 + 718);
      v770 = *((_QWORD *)v288 + 717);
      v772 = *((_QWORD *)v288 + 716);
      v774 = *((_QWORD *)v288 + 715);
      v776 = *((_QWORD *)v288 + 714);
      v778 = *((_QWORD *)v288 + 713);
      v780 = *((_QWORD *)v288 + 712);
      v782 = *((_QWORD *)v288 + 711);
      v784 = *((_QWORD *)v288 + 710);
      v786 = *((_QWORD *)v288 + 709);
      v788 = *((_QWORD *)v288 + 708);
      v790 = *((_QWORD *)v288 + 707);
      v792 = *((_QWORD *)v288 + 706);
      v794 = *((_QWORD *)v288 + 705);
      v796 = *((_QWORD *)v288 + 704);
      v798 = *((_QWORD *)v288 + 703);
      v800 = *((_QWORD *)v288 + 700);
      v804 = *((_QWORD *)v288 + 699);
      v807 = *((_QWORD *)v288 + 698);
      v810 = *((_QWORD *)v288 + 697);
      v813 = *((_QWORD *)v288 + 696);
      v816 = *((_QWORD *)v288 + 695);
      v821 = *((_QWORD *)v288 + 694);
      v826 = *((_QWORD *)v288 + 691);
      v838 = *((_QWORD *)v288 + 689);
      v848 = *((_QWORD *)v288 + 688);
      v856 = *((_QWORD *)v288 + 686);
      v861 = *((_QWORD *)v288 + 685);
      v864 = *((_QWORD *)v288 + 682);
      v868 = *((_QWORD *)v288 + 681);
      swift_task_dealloc(v279);
      swift_task_dealloc(v280);
      swift_task_dealloc(v281);
      swift_task_dealloc(v282);
      swift_task_dealloc(v283);
      swift_task_dealloc(v284);
      swift_task_dealloc(v285);
      swift_task_dealloc(v286);
      swift_task_dealloc(v287);
      swift_task_dealloc(v289);
      swift_task_dealloc(v736);
      swift_task_dealloc(v738);
      swift_task_dealloc(v740);
      swift_task_dealloc(v742);
      swift_task_dealloc(v744);
      swift_task_dealloc(v746);
      swift_task_dealloc(v748);
      swift_task_dealloc(v750);
      swift_task_dealloc(v752);
      swift_task_dealloc(v754);
      swift_task_dealloc(v756);
      swift_task_dealloc(v758);
      swift_task_dealloc(v760);
      swift_task_dealloc(v762);
      swift_task_dealloc(v764);
      swift_task_dealloc(v766);
      swift_task_dealloc(v768);
      swift_task_dealloc(v770);
      swift_task_dealloc(v772);
      swift_task_dealloc(v774);
      swift_task_dealloc(v776);
      swift_task_dealloc(v778);
      swift_task_dealloc(v780);
      swift_task_dealloc(v782);
      swift_task_dealloc(v784);
      swift_task_dealloc(v786);
      swift_task_dealloc(v788);
      swift_task_dealloc(v790);
      swift_task_dealloc(v792);
      swift_task_dealloc(v794);
      swift_task_dealloc(v796);
      swift_task_dealloc(v798);
      swift_task_dealloc(v800);
      swift_task_dealloc(v804);
      swift_task_dealloc(v807);
      swift_task_dealloc(v810);
      swift_task_dealloc(v813);
      swift_task_dealloc(v816);
      swift_task_dealloc(v821);
      swift_task_dealloc(v826);
      swift_task_dealloc(v838);
      swift_task_dealloc(v848);
      swift_task_dealloc(v856);
      swift_task_dealloc(v861);
      swift_task_dealloc(v864);
      swift_task_dealloc(v868);
      v290 = (uint64_t (*)(void))*((_QWORD *)v288 + 1);
      return v290();
    }
    v209 = (uint8_t *)sub_1006948A0(12);
    v210 = swift_slowAlloc(32, -1);
    v882 = 0;
    v883 = v210;
    *(_WORD *)v209 = 258;
    v881 = v209 + 2;
    *(_QWORD *)&v884[0] = sub_10005CBC4;
    *((_QWORD *)&v884[0] + 1) = v203;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))v884, (uint64_t)&v881, (uint64_t)&v882, (uint64_t)&v883);
    swift_release();
    *(_QWORD *)&v884[0] = sub_10005CBC4;
    *((_QWORD *)&v884[0] + 1) = v204;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))v884, (uint64_t)&v881, (uint64_t)&v882, (uint64_t)&v883);
    swift_release();
    *(_QWORD *)&v884[0] = sub_10005CBB4;
    *((_QWORD *)&v884[0] + 1) = v206;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))v884, (uint64_t)&v881, (uint64_t)&v882, (uint64_t)&v883);
    v1 = v735;
    v211 = *((_QWORD *)v735 + 712);
    v212 = *((_QWORD *)v735 + 701);
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, v201, v202, "Invalid sendPairingStatus payload %{public}s", v209, 0xCu);
    swift_arrayDestroy(v210, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v210, -1, -1);
    v213 = (uint64_t)v209;
    goto LABEL_43;
  }
  v159 = v1[300];
  v735[303] = v1[299];
  v735[304] = v159;
  v160 = v1[298];
  v735[301] = *v106;
  v735[302] = v160;
  v854 = (uint64_t *)(v735 + 301);
  v161 = *((_QWORD *)v735 + 604);
  v162 = *((_QWORD *)v735 + 605);
  sub_10001BBBC(v161, v162);
  v163 = sub_100691A58(v161, v162);
  if (!static DatabaseCheckpointMode.__derived_enum_equals(_:_:)(v163, 0))
  {
    v872(*((_QWORD *)v735 + 711), v867, *((_QWORD *)v735 + 701));
    v244 = swift_allocObject(&unk_101050A78, 17, 7);
    *(_BYTE *)(v244 + 16) = v163;
    v245 = swift_allocObject(&unk_101050AA0, 32, 7);
    *(_QWORD *)(v245 + 16) = sub_10005832C;
    *(_QWORD *)(v245 + 24) = v244;
    v246 = Logger.logObject.getter(v245);
    v247 = static os_log_type_t.error.getter(v246);
    v248 = swift_allocObject(&unk_101050AC8, 17, 7);
    *(_BYTE *)(v248 + 16) = 34;
    v249 = swift_allocObject(&unk_101050AF0, 17, 7);
    *(_BYTE *)(v249 + 16) = 8;
    v250 = swift_allocObject(&unk_101050B18, 32, 7);
    *(_QWORD *)(v250 + 16) = sub_100058338;
    *(_QWORD *)(v250 + 24) = v245;
    v251 = swift_allocObject(&unk_101050B40, 32, 7);
    *(_QWORD *)(v251 + 16) = sub_10005CBA4;
    *(_QWORD *)(v251 + 24) = v250;
    v252 = swift_allocObject(v863, 80, 7);
    sub_100882D28(v252, 3);
    *v253 = sub_10005CBC4;
    v253[1] = v248;
    v253[2] = sub_10005CBC4;
    v253[3] = v249;
    v253[4] = sub_10005CBB4;
    v253[5] = v251;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v246, v247))
    {
      v254 = (uint8_t *)sub_1006948A0(12);
      v255 = swift_slowAlloc(32, -1);
      v882 = 0;
      v883 = v255;
      *(_WORD *)v254 = 258;
      v881 = v254 + 2;
      *(_QWORD *)&v884[0] = sub_10005CBC4;
      *((_QWORD *)&v884[0] + 1) = v248;
      sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))v884, (uint64_t)&v881, (uint64_t)&v882, (uint64_t)&v883);
      swift_release();
      *(_QWORD *)&v884[0] = sub_10005CBC4;
      *((_QWORD *)&v884[0] + 1) = v249;
      sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))v884, (uint64_t)&v881, (uint64_t)&v882, (uint64_t)&v883);
      swift_release();
      *(_QWORD *)&v884[0] = sub_10005CBB4;
      *((_QWORD *)&v884[0] + 1) = v251;
      sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))v884, (uint64_t)&v881, (uint64_t)&v882, (uint64_t)&v883);
      v1 = v735;
      v256 = *((_QWORD *)v735 + 711);
      v257 = *((_QWORD *)v735 + 701);
      swift_release();
      _os_log_impl((void *)&_mh_execute_header, v246, v247, "Pairing failed with status %{public}s", v254, 0xCu);
      swift_arrayDestroy(v255, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v255, -1, -1);
      sub_100694894((uint64_t)v254);

      v847(v256, v257);
    }
    else
    {
      v342 = *((_QWORD *)v735 + 711);
      v343 = *((_QWORD *)v735 + 701);

      swift_release();
      swift_release();
      swift_release();
      v847(v342, v343);
      v1 = v735;
    }
    v100 = *((_QWORD *)v1 + 746);
    v101 = *((_QWORD *)v1 + 745);
    v102 = *((_QWORD *)v1 + 744);
    v344 = sub_100056FAC();
    v345 = swift_allocError(&type metadata for AirPodsLEPairingService.Error, v344, 0, 0);
    *v375 = 0x8000000000000009;
    swift_willThrow(v345);
    swift_release();
    sub_10005726C((uint64_t)v860, (void (*)(void))sub_10001BC14);
    sub_1000583DC(v854, (void (*)(uint64_t, uint64_t))sub_10001BC14);
    goto LABEL_57;
  }
  v164 = v735 + 332;
  if ((*(_BYTE *)(*((_QWORD *)v735 + 678) + 274) & 1) != 0)
  {
    v165 = &type metadata for CollaborativeKeyGen.v2.C3;
    v166 = sub_100058D38();
  }
  else
  {
    v165 = &type metadata for CollaborativeKeyGen.v1.C3;
    v166 = sub_100058360();
  }
  v338 = v166;
  v339 = *((_QWORD *)v735 + 602);
  v340 = *((_QWORD *)v735 + 603);
  *((_QWORD *)v735 + 667) = v165;
  *((_QWORD *)v735 + 668) = v166;
  sub_100018F08(v164);
  sub_10001BBBC(v339, v340);
  KeyRepresentable<>.init(data:)(v339, v340, (uint64_t)v165, *(_QWORD *)(v338 + 8));
  v341 = *((_QWORD *)v735 + 701);
  v840 = *((_QWORD *)v735 + 710);
  v346 = *((_QWORD *)v735 + 678);
  sub_10000F9FC(v164, (uint64_t)v735 + 5272);
  v347 = *(_QWORD *)(v346 + 184);
  v827 = v735 + 659;
  sub_100030784((uint64_t)v735 + 5272, (uint64_t)v735 + 5112);
  sub_100005CF0((uint64_t)v735 + 5112, (uint64_t)(v735 + 327), &qword_1010EC550);
  v348 = v347 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_collaborativeKeyC3;
  swift_beginAccess(v347 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_collaborativeKeyC3, (char *)v735 + 5352, 33, 0);
  swift_retain();
  sub_100004084((uint64_t)(v735 + 327), v348, &qword_1010EC550);
  v349 = v735;
  swift_endAccess((char *)v735 + 5352);
  swift_release();
  v350 = (uint64_t *)(*(_QWORD *)(v346 + 184) + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_status);
  v351 = *v350;
  v352 = v350[1];
  *v350 = v161;
  v350[1] = v162;
  sub_10001BBBC(v161, v162);
  sub_10001EF3C(v351, v352);
  v353 = *((_QWORD *)v735 + 606);
  v354 = *((_QWORD *)v735 + 607);
  v355 = (uint64_t *)(*(_QWORD *)(v346 + 184) + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_payloadSignatureS4);
  v357 = *v355;
  v356 = v355[1];
  *v355 = v353;
  v355[1] = v354;
  sub_10001BBBC(v353, v354);
  sub_10001EF3C(v357, v356);
  v872((uint64_t)v840, v867, v341);
  v358 = swift_allocObject(&unk_101050C30, 17, 7);
  *(_BYTE *)(v358 + 16) = v163;
  v359 = swift_allocObject(&unk_101050C58, 32, 7);
  *(_QWORD *)(v359 + 16) = sub_10005CD38;
  *(_QWORD *)(v359 + 24) = v358;
  v360 = Logger.logObject.getter(v359);
  v361 = static os_log_type_t.default.getter(v360);
  v362 = swift_allocObject(&unk_101050C80, 17, 7);
  *(_BYTE *)(v362 + 16) = 34;
  v363 = swift_allocObject(&unk_101050CA8, 17, 7);
  *(_BYTE *)(v363 + 16) = 8;
  v364 = swift_allocObject(&unk_101050CD0, 32, 7);
  *(_QWORD *)(v364 + 16) = sub_10005CBA8;
  *(_QWORD *)(v364 + 24) = v359;
  v365 = swift_allocObject(&unk_101050CF8, 32, 7);
  *(_QWORD *)(v365 + 16) = sub_10005CBA4;
  *(_QWORD *)(v365 + 24) = v364;
  v366 = swift_allocObject(v863, 80, 7);
  sub_100882D28(v366, 3);
  *v367 = sub_10005CBC4;
  v367[1] = v362;
  v367[2] = sub_10005CBC4;
  v367[3] = v363;
  v367[4] = sub_10005CBB4;
  v367[5] = v365;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v360, v361))
  {
    v368 = (uint8_t *)sub_1006948A0(12);
    v369 = swift_slowAlloc(32, -1);
    v882 = 0;
    v883 = v369;
    v841 = v368;
    *(_WORD *)v368 = 258;
    v881 = v368 + 2;
    *(_QWORD *)&v884[0] = sub_10005CBC4;
    *((_QWORD *)&v884[0] + 1) = v362;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))v884, (uint64_t)&v881, (uint64_t)&v882, (uint64_t)&v883);
    swift_release();
    *(_QWORD *)&v884[0] = sub_10005CBC4;
    *((_QWORD *)&v884[0] + 1) = v363;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))v884, (uint64_t)&v881, (uint64_t)&v882, (uint64_t)&v883);
    swift_release();
    *(_QWORD *)&v884[0] = sub_10005CBB4;
    *((_QWORD *)&v884[0] + 1) = v365;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))v884, (uint64_t)&v881, (uint64_t)&v882, (uint64_t)&v883);
    v370 = *((_QWORD *)v735 + 710);
    v371 = *((_QWORD *)v735 + 701);
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, v360, v361, "status: %{public}s", v841, 0xCu);
    swift_arrayDestroy(v369, 1, (char *)&type metadata for Any + 8);
    v372 = v369;
    v349 = v735;
    swift_slowDealloc(v372, -1, -1);
    sub_100694894((uint64_t)v841);

    v373 = v370;
    v374 = v371;
  }
  else
  {
    v393 = *((_QWORD *)v735 + 710);
    v394 = *((_QWORD *)v735 + 701);

    swift_release();
    swift_release();
    swift_release();
    v373 = v393;
    v374 = v394;
  }
  v847(v373, v374);
  v872(*((_QWORD *)v349 + 708), v867, *((_QWORD *)v349 + 701));
  v395 = (_OWORD *)swift_allocObject(&unk_101050D20, 80, 7);
  v396 = v735[302];
  v395[1] = *(_OWORD *)v854;
  v395[2] = v396;
  v397 = v735[304];
  v395[3] = v735[303];
  v395[4] = v397;
  v398 = (_OWORD *)swift_allocObject(&unk_101050D48, 80, 7);
  v399 = v735[302];
  v398[1] = *(_OWORD *)v854;
  v398[2] = v399;
  v400 = v735[304];
  v398[3] = v735[303];
  v398[4] = v400;
  sub_1000583DC(v854, (void (*)(uint64_t, uint64_t))sub_10001BBBC);
  v401 = sub_1000583DC(v854, (void (*)(uint64_t, uint64_t))sub_10001BBBC);
  v822 = Logger.logObject.getter(v401);
  v843 = static os_log_type_t.debug.getter(v822);
  v402 = swift_allocObject(&unk_101050D70, 17, 7);
  *(_BYTE *)(v402 + 16) = 0;
  v403 = swift_allocObject(&unk_101050D98, 17, 7);
  *(_BYTE *)(v403 + 16) = 8;
  v404 = swift_allocObject(&unk_101050DC0, 32, 7);
  *(_QWORD *)(v404 + 16) = sub_1000584A8;
  *(_QWORD *)(v404 + 24) = v395;
  v405 = swift_allocObject(&unk_101050DE8, 32, 7);
  *(_QWORD *)(v405 + 16) = sub_1000584DC;
  *(_QWORD *)(v405 + 24) = v404;
  v406 = swift_allocObject(&unk_101050E10, 17, 7);
  *(_BYTE *)(v406 + 16) = 32;
  v407 = swift_allocObject(&unk_101050E38, 17, 7);
  *(_BYTE *)(v407 + 16) = 8;
  v408 = swift_allocObject(&unk_101050E60, 32, 7);
  *(_QWORD *)(v408 + 16) = sub_1000584B4;
  *(_QWORD *)(v408 + 24) = v398;
  v409 = swift_allocObject(&unk_101050E88, 32, 7);
  *(_QWORD *)(v409 + 16) = sub_10005CBA4;
  *(_QWORD *)(v409 + 24) = v408;
  v410 = swift_allocObject(v863, 128, 7);
  sub_100882D28(v410, 6);
  *v411 = sub_10005CBC4;
  v411[1] = v402;
  v411[2] = sub_10005CBC4;
  v411[3] = v403;
  v411[4] = sub_1000584E4;
  v411[5] = v405;
  v411[6] = sub_10005CBC4;
  v411[7] = v406;
  v411[8] = sub_10005CBC4;
  v411[9] = v407;
  v411[10] = sub_10005CBB4;
  v411[11] = v409;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v822, v843))
  {
    v817 = v406;
    v412 = (uint8_t *)sub_1006948A0(22);
    v413 = swift_slowAlloc(32, -1);
    v882 = 0;
    v883 = v413;
    *(_WORD *)v412 = 514;
    v881 = v412 + 2;
    *(_QWORD *)&v884[0] = sub_10005CBC4;
    *((_QWORD *)&v884[0] + 1) = v402;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))v884, (uint64_t)&v881, (uint64_t)&v882, (uint64_t)&v883);
    swift_release();
    *(_QWORD *)&v884[0] = sub_10005CBC4;
    *((_QWORD *)&v884[0] + 1) = v403;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))v884, (uint64_t)&v881, (uint64_t)&v882, (uint64_t)&v883);
    swift_release();
    *(_QWORD *)&v884[0] = sub_1000584E4;
    *((_QWORD *)&v884[0] + 1) = v405;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))v884, (uint64_t)&v881, (uint64_t)&v882, (uint64_t)&v883);
    swift_release();
    *(_QWORD *)&v884[0] = sub_10005CBC4;
    *((_QWORD *)&v884[0] + 1) = v817;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))v884, (uint64_t)&v881, (uint64_t)&v882, (uint64_t)&v883);
    swift_release();
    *(_QWORD *)&v884[0] = sub_10005CBC4;
    *((_QWORD *)&v884[0] + 1) = v407;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))v884, (uint64_t)&v881, (uint64_t)&v882, (uint64_t)&v883);
    swift_release();
    *(_QWORD *)&v884[0] = sub_10005CBB4;
    *((_QWORD *)&v884[0] + 1) = v409;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))v884, (uint64_t)&v881, (uint64_t)&v882, (uint64_t)&v883);
    v414 = v735;
    v415 = *((_QWORD *)v735 + 708);
    v416 = *((_QWORD *)v735 + 701);
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, v822, v843, "S4 count %ld: %s", v412, 0x16u);
    swift_arrayDestroy(v413, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v413, -1, -1);
    sub_100694894((uint64_t)v412);

    v417 = v415;
  }
  else
  {
    v414 = v735;
    v463 = *((_QWORD *)v735 + 708);
    v416 = *((_QWORD *)v735 + 701);

    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    v417 = v463;
  }
  v847(v417, v416);
  v872(*((_QWORD *)v414 + 707), v867, *((_QWORD *)v414 + 701));
  v464 = (_OWORD *)swift_allocObject(&unk_101050EB0, 80, 7);
  v465 = v735[302];
  v464[1] = *(_OWORD *)v854;
  v464[2] = v465;
  v466 = v735[304];
  v464[3] = v735[303];
  v464[4] = v466;
  v467 = sub_1000583DC(v854, (void (*)(uint64_t, uint64_t))sub_10001BBBC);
  v468 = Logger.logObject.getter(v467);
  v469 = static os_log_type_t.debug.getter(v468);
  v470 = swift_allocObject(&unk_101050ED8, 17, 7);
  *(_BYTE *)(v470 + 16) = 32;
  v1 = v414;
  v471 = swift_allocObject(&unk_101050F00, 17, 7);
  *(_BYTE *)(v471 + 16) = 8;
  v472 = swift_allocObject(&unk_101050F28, 32, 7);
  *(_QWORD *)(v472 + 16) = sub_10005CD50;
  *(_QWORD *)(v472 + 24) = v464;
  v473 = swift_allocObject(&unk_101050F50, 32, 7);
  *(_QWORD *)(v473 + 16) = sub_10005CBA4;
  *(_QWORD *)(v473 + 24) = v472;
  v474 = swift_allocObject(v863, 80, 7);
  sub_100882D28(v474, 3);
  *v475 = sub_10005CBC4;
  v475[1] = v470;
  v475[2] = sub_10005CBC4;
  v475[3] = v471;
  v475[4] = sub_10005CBB4;
  v475[5] = v473;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v468, v469))
  {
    v476 = (uint8_t *)sub_1006948A0(12);
    v477 = swift_slowAlloc(32, -1);
    v882 = 0;
    v883 = v477;
    *(_WORD *)v476 = 258;
    v881 = v476 + 2;
    *(_QWORD *)&v884[0] = sub_10005CBC4;
    *((_QWORD *)&v884[0] + 1) = v470;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))v884, (uint64_t)&v881, (uint64_t)&v882, (uint64_t)&v883);
    swift_release();
    *(_QWORD *)&v884[0] = sub_10005CBC4;
    *((_QWORD *)&v884[0] + 1) = v471;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))v884, (uint64_t)&v881, (uint64_t)&v882, (uint64_t)&v883);
    swift_release();
    *(_QWORD *)&v884[0] = sub_10005CBB4;
    *((_QWORD *)&v884[0] + 1) = v473;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))v884, (uint64_t)&v881, (uint64_t)&v882, (uint64_t)&v883);
    v478 = *((_QWORD *)v735 + 707);
    v479 = *((_QWORD *)v735 + 701);
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, v468, v469, "C3: %s", v476, 0xCu);
    swift_arrayDestroy(v477, 1, (char *)&type metadata for Any + 8);
    v480 = v477;
    v1 = v735;
    swift_slowDealloc(v480, -1, -1);
    sub_100694894((uint64_t)v476);

    v481 = v478;
    v482 = v479;
  }
  else
  {
    v508 = *((_QWORD *)v1 + 707);
    v509 = *((_QWORD *)v1 + 701);

    swift_release();
    swift_release();
    swift_release();
    v481 = v508;
    v482 = v509;
  }
  v847(v481, v482);
  v510 = *((_QWORD *)v1 + 662);
  v511 = *((_QWORD *)v1 + 663);
  sub_10001AA44(v827, v510);
  v512 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v511 + 8) + 8) + 40))(v510);
  v514 = v513;
  sub_100052090(v513, v1 + 292);
  *((_QWORD *)v1 + 766) = 0;
  sub_10001BC14(v512, v514);
  sub_100005CF0((uint64_t)(v1 + 292), (uint64_t)(v1 + 287), &qword_1010EC558);
  if (*((_QWORD *)v1 + 575) >> 60 == 15)
  {
    v561 = *((_QWORD *)v1 + 703);
    v562 = *((_QWORD *)v1 + 701);
    v563 = sub_100B5D428();
    v564 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v872)(v561, v563, v562);
    v565 = Logger.logObject.getter(v564);
    LOBYTE(v562) = static os_log_type_t.error.getter(v565);
    v566 = sub_100BD13F8(0);
    v567 = v562;
    v568 = os_log_type_enabled(v565, (os_log_type_t)v562);
    v569 = *((_QWORD *)v1 + 703);
    v570 = *((_QWORD *)v1 + 701);
    if (v568)
    {
      v571 = (uint8_t *)sub_1006948A0(2);
      v883 = 0;
      *(_QWORD *)&v884[0] = 0;
      *(_WORD *)v571 = 0;
      v882 = v571 + 2;
      sub_100A3DD1C((uint64_t)v566, (uint64_t)&v882, (uint64_t)&v883, (uint64_t)v884);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v565, v567, "Unable to generate initial pairing data from owner context and C3!)", v571, 2u);
      sub_100694894((uint64_t)v571);

    }
    else
    {

      swift_bridgeObjectRelease();
    }
    v847(v569, v570);
    v572 = *((_QWORD *)v1 + 746);
    v573 = *((_QWORD *)v1 + 745);
    v574 = *((_QWORD *)v1 + 744);
    v575 = sub_100056FAC();
    v576 = swift_allocError(&type metadata for AirPodsLEPairingService.Error, v575, 0, 0);
    *v577 = 0x8000000000000007;
    swift_willThrow(v576);
    swift_release();
    sub_10005726C((uint64_t)v860, (void (*)(void))sub_10001BC14);
    sub_1000583DC(v854, (void (*)(uint64_t, uint64_t))sub_10001BC14);
    (*(void (**)(uint64_t, uint64_t))(v573 + 8))(v572, v574);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v827);
    goto LABEL_58;
  }
  v594 = v1[290];
  v1[284] = v1[289];
  v1[285] = v594;
  v1[286] = v1[291];
  v595 = v1[288];
  v1[282] = v1[287];
  v1[283] = v595;
  v596 = (__int128 **)swift_task_alloc(dword_1010EC564);
  *((_QWORD *)v1 + 767) = v596;
  *v596 = v1;
  v596[1] = (__int128 *)sub_10004CE8C;
  return sub_1000525F0(*((_QWORD *)v1 + 691), (uint64_t)(v1 + 282), *((_QWORD *)v1 + 746), *((_QWORD *)v1 + 677));
}

uint64_t sub_10004A59C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 5424);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 6072));
  return swift_task_switch(sub_10004A5F4, v1, 0);
}

uint64_t sub_10004A5F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int16 v5;
  __int16 v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint8_t *v29;
  void (*v30)(uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint8_t *v47;
  void (*v48)(uint64_t, uint64_t);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(uint64_t, uint64_t);
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  const void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void (*v70)(uint64_t, uint64_t);
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint8_t *v120;
  uint8_t *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  _WORD *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t (*v133)();
  uint64_t v134;

  v1 = *(_QWORD *)(v0 + 5584);
  v2 = *(_QWORD *)(v0 + 5544);
  v3 = *(_QWORD *)(v0 + 5536);
  sub_10000F9B8(*(_QWORD *)(v0 + 5592), v1, (uint64_t *)&unk_1010FF7F0);
  v124 = v0 + 552;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v1, 1, v3) == 1)
  {
    sub_100004048(*(_QWORD *)(v0 + 5584), (uint64_t *)&unk_1010FF7F0);
  }
  else
  {
    v4 = *(_QWORD *)(v0 + 5584);
    sub_100366A0C(*(_QWORD *)(v0 + 5968));
    v6 = v5;
    sub_1000126B0(v4, type metadata accessor for OwnedBeaconGroup);
    if ((v6 & 0x100) == 0)
      goto LABEL_5;
  }
  LOBYTE(v6) = -1;
LABEL_5:
  v7 = sub_100C99384(*(_QWORD *)(v0 + 5592), v6);
  v9 = v8;
  v10 = *(_QWORD *)(v0 + 6064);
  v11 = *(_QWORD *)(v0 + 6056);
  v12 = *(_QWORD *)(v0 + 6048);
  v13 = *(_QWORD *)(v0 + 6040);
  v14 = *(_QWORD *)(v0 + 6032);
  sub_100004048(*(_QWORD *)(v0 + 5592), (uint64_t *)&unk_1010FF7F0);
  v15 = sub_100034340(v14, v13, v12, v11);
  v16 = v10;
  v126 = v9;
  v128 = v7;
  if (v10)
  {
    v17 = *(_QWORD *)(v0 + 6016);
    (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 6008))(*(_QWORD *)(v0 + 5856), *(_QWORD *)(v0 + 6000), *(_QWORD *)(v0 + 5608));
    v18 = swift_allocObject(&unk_1010526C0, 24, 7);
    *(_QWORD *)(v18 + 16) = v16;
    v19 = swift_errorRetain(v16);
    v20 = Logger.logObject.getter(v19);
    v21 = static os_log_type_t.error.getter(v20);
    v22 = swift_allocObject(&unk_1010526E8, 17, 7);
    *(_BYTE *)(v22 + 16) = 66;
    v23 = swift_allocObject(&unk_101052710, 17, 7);
    *(_BYTE *)(v23 + 16) = 8;
    v24 = swift_allocObject(&unk_101052738, 32, 7);
    *(_QWORD *)(v24 + 16) = sub_1000594F4;
    *(_QWORD *)(v24 + 24) = v18;
    v25 = swift_allocObject(&unk_101052760, 32, 7);
    *(_QWORD *)(v25 + 16) = sub_10005CBB0;
    *(_QWORD *)(v25 + 24) = v24;
    v26 = swift_allocObject(&unk_101052788, 32, 7);
    *(_QWORD *)(v26 + 16) = sub_10005CBA4;
    *(_QWORD *)(v26 + 24) = v25;
    v27 = swift_allocObject(v17, 80, 7);
    sub_100882D28(v27, 3);
    *v28 = sub_10005CBC4;
    v28[1] = v22;
    v28[2] = sub_10005CBC4;
    v28[3] = v23;
    v28[4] = sub_10005CBBC;
    v28[5] = v26;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v20, v21))
    {
      v29 = (uint8_t *)sub_1006948A0(12);
      v116 = swift_slowAlloc(8, -1);
      v120 = v29;
      v131 = v116;
      v132 = 0;
      *(_WORD *)v29 = 258;
      v130 = v29 + 2;
      v133 = sub_10005CBC4;
      v134 = v22;
      sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v133, (uint64_t)&v130, (uint64_t)&v131, (uint64_t)&v132);
      swift_release(v22);
      v133 = sub_10005CBC4;
      v134 = v23;
      sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v133, (uint64_t)&v130, (uint64_t)&v131, (uint64_t)&v132);
      swift_release(v23);
      v133 = sub_10005CBBC;
      v134 = v26;
      sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v133, (uint64_t)&v130, (uint64_t)&v131, (uint64_t)&v132);
      v30 = *(void (**)(uint64_t, uint64_t))(v0 + 6024);
      v31 = *(_QWORD *)(v0 + 5856);
      v32 = *(_QWORD *)(v0 + 5608);
      swift_release(v26);
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "Unable to parse beacon group info due to %{public}@", v120, 0xCu);
      v33 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
      swift_arrayDestroy(v116, 1, v33);
      swift_slowDealloc(v116, -1, -1);
      sub_100694894((uint64_t)v120);

      v30(v31, v32);
    }
    else
    {
      v48 = *(void (**)(uint64_t, uint64_t))(v0 + 6024);
      v49 = *(_QWORD *)(v0 + 5856);
      v50 = *(_QWORD *)(v0 + 5608);

      swift_release(v26);
      swift_release(v23);
      swift_release(v22);
      v48(v49, v50);
    }
    sub_10004E7F0(v128, v126, (void *)(v0 + 1872));
    v51 = *(_QWORD *)(v0 + 5984);
    v52 = *(_QWORD *)(v0 + 5960);
    v118 = *(_QWORD *)(v0 + 5952);
    v122 = *(_QWORD *)(v0 + 5968);
    v60 = (const void *)(v0 + 2400);
    sub_100057230((const void *)(v0 + 1872), (void *)(v0 + 2400));
    swift_release(v51);
    sub_10005726C(v124, (void (*)(void))sub_10001BC14);
    swift_errorRelease(v16);
    sub_10005726C(v124, (void (*)(void))sub_10001BC14);
    sub_10001BC14(v128, v126);
    (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v122, v118);
  }
  else
  {
    v34 = v15;
    v35 = *(_QWORD *)(v0 + 6016);
    (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 6008))(*(_QWORD *)(v0 + 5864), *(_QWORD *)(v0 + 6000), *(_QWORD *)(v0 + 5608));
    v36 = swift_allocObject(&unk_1010527B0, 24, 7);
    *(_QWORD *)(v36 + 16) = v34;
    v37 = swift_allocObject(&unk_1010527D8, 32, 7);
    *(_QWORD *)(v37 + 16) = sub_10005953C;
    *(_QWORD *)(v37 + 24) = v36;
    swift_bridgeObjectRetain(v34);
    v39 = Logger.logObject.getter(v38);
    v40 = static os_log_type_t.default.getter(v39);
    v41 = swift_allocObject(&unk_101052800, 17, 7);
    *(_BYTE *)(v41 + 16) = 32;
    v42 = swift_allocObject(&unk_101052828, 17, 7);
    *(_BYTE *)(v42 + 16) = 8;
    v43 = swift_allocObject(&unk_101052850, 32, 7);
    *(_QWORD *)(v43 + 16) = sub_100059548;
    *(_QWORD *)(v43 + 24) = v37;
    v44 = swift_allocObject(&unk_101052878, 32, 7);
    *(_QWORD *)(v44 + 16) = sub_10005CBA4;
    *(_QWORD *)(v44 + 24) = v43;
    v45 = swift_allocObject(v35, 80, 7);
    sub_100882D28(v45, 3);
    *v46 = sub_10005CBC4;
    v46[1] = v41;
    v46[2] = sub_10005CBC4;
    v46[3] = v42;
    v46[4] = sub_10005CBB4;
    v46[5] = v44;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v39, (os_log_type_t)v40))
    {
      v47 = (uint8_t *)sub_1006948A0(12);
      v131 = 0;
      v132 = swift_slowAlloc(32, -1);
      v117 = v132;
      v121 = v47;
      *(_WORD *)v47 = 258;
      v130 = v47 + 2;
      v133 = sub_10005CBC4;
      v134 = v41;
      sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v133, (uint64_t)&v130, (uint64_t)&v131, (uint64_t)&v132);
      swift_release(v41);
      v133 = sub_10005CBC4;
      v134 = v42;
      sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v133, (uint64_t)&v130, (uint64_t)&v131, (uint64_t)&v132);
      swift_release(v42);
      v133 = sub_10005CBB4;
      v134 = v44;
      sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v133, (uint64_t)&v130, (uint64_t)&v131, (uint64_t)&v132);
      v70 = *(void (**)(uint64_t, uint64_t))(v0 + 6024);
      v71 = *(_QWORD *)(v0 + 5864);
      v72 = *(_QWORD *)(v0 + 5608);
      swift_release(v44);
      _os_log_impl((void *)&_mh_execute_header, v39, (os_log_type_t)v40, "beaconGroupInfo: %s", v121, 0xCu);
      swift_arrayDestroy(v117, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v117, -1, -1);
      sub_100694894((uint64_t)v121);

      v70(v71, v72);
    }
    else
    {
      v53 = *(void (**)(uint64_t, uint64_t))(v0 + 6024);
      v54 = *(_QWORD *)(v0 + 5864);
      v55 = *(_QWORD *)(v0 + 5608);

      swift_release(v44);
      swift_release(v42);
      swift_release(v41);
      v53(v54, v55);
    }
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v0 + 5424) + 184)
              + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_allSerialNumbersAndPartIds) = v34;
    swift_bridgeObjectRelease();
    sub_10004E7F0(v128, v126, (void *)(v0 + 2136));
    v60 = (const void *)(v0 + 288);
    v56 = *(_QWORD *)(v0 + 5984);
    v57 = *(_QWORD *)(v0 + 5968);
    v58 = *(_QWORD *)(v0 + 5960);
    v59 = *(_QWORD *)(v0 + 5952);
    sub_100057230((const void *)(v0 + 2136), (void *)(v0 + 288));
    swift_release(v56);
    sub_10005726C(v124, (void (*)(void))sub_10001BC14);
    sub_10005726C(v124, (void (*)(void))sub_10001BC14);
    sub_10001BC14(v128, v126);
    (*(void (**)(uint64_t, uint64_t))(v58 + 8))(v57, v59);
  }
  sub_100057230(v60, (void *)(v0 + 3720));
  v61 = *(_QWORD *)(v0 + 5968);
  v62 = *(_QWORD *)(v0 + 5944);
  v63 = *(_QWORD *)(v0 + 5936);
  v64 = *(_QWORD *)(v0 + 5928);
  v65 = *(_QWORD *)(v0 + 5920);
  v66 = *(_QWORD *)(v0 + 5912);
  v67 = *(_QWORD *)(v0 + 5904);
  v68 = *(_QWORD *)(v0 + 5896);
  v73 = *(_QWORD *)(v0 + 5888);
  v74 = *(_QWORD *)(v0 + 5880);
  v75 = *(_QWORD *)(v0 + 5872);
  v76 = *(_QWORD *)(v0 + 5864);
  v77 = *(_QWORD *)(v0 + 5856);
  v78 = *(_QWORD *)(v0 + 5848);
  v79 = *(_QWORD *)(v0 + 5840);
  v80 = *(_QWORD *)(v0 + 5832);
  v81 = *(_QWORD *)(v0 + 5824);
  v82 = *(_QWORD *)(v0 + 5816);
  v83 = *(_QWORD *)(v0 + 5808);
  v84 = *(_QWORD *)(v0 + 5800);
  v85 = *(_QWORD *)(v0 + 5792);
  v86 = *(_QWORD *)(v0 + 5784);
  v87 = *(_QWORD *)(v0 + 5776);
  v88 = *(_QWORD *)(v0 + 5768);
  v89 = *(_QWORD *)(v0 + 5760);
  v90 = *(_QWORD *)(v0 + 5752);
  v91 = *(_QWORD *)(v0 + 5744);
  v92 = *(_QWORD *)(v0 + 5736);
  v93 = *(_QWORD *)(v0 + 5728);
  v94 = *(_QWORD *)(v0 + 5720);
  v95 = *(_QWORD *)(v0 + 5712);
  v96 = *(_QWORD *)(v0 + 5704);
  v97 = *(_QWORD *)(v0 + 5696);
  v98 = *(_QWORD *)(v0 + 5688);
  v99 = *(_QWORD *)(v0 + 5680);
  v100 = *(_QWORD *)(v0 + 5672);
  v101 = *(_QWORD *)(v0 + 5664);
  v102 = *(_QWORD *)(v0 + 5656);
  v103 = *(_QWORD *)(v0 + 5648);
  v104 = *(_QWORD *)(v0 + 5640);
  v105 = *(_QWORD *)(v0 + 5632);
  v106 = *(_QWORD *)(v0 + 5624);
  v107 = *(_QWORD *)(v0 + 5600);
  v108 = *(_QWORD *)(v0 + 5592);
  v109 = *(_QWORD *)(v0 + 5584);
  v110 = *(_QWORD *)(v0 + 5576);
  v111 = *(_QWORD *)(v0 + 5568);
  v112 = *(_QWORD *)(v0 + 5560);
  v113 = *(_QWORD *)(v0 + 5552);
  v114 = *(_QWORD *)(v0 + 5528);
  v115 = *(_QWORD *)(v0 + 5512);
  v119 = *(_QWORD *)(v0 + 5504);
  v123 = *(_QWORD *)(v0 + 5488);
  v125 = *(_QWORD *)(v0 + 5480);
  v127 = *(_QWORD *)(v0 + 5456);
  v129 = *(_QWORD *)(v0 + 5448);
  sub_100057230((const void *)(v0 + 3720), *(void **)(v0 + 5392));
  swift_task_dealloc(v61);
  swift_task_dealloc(v62);
  swift_task_dealloc(v63);
  swift_task_dealloc(v64);
  swift_task_dealloc(v65);
  swift_task_dealloc(v66);
  swift_task_dealloc(v67);
  swift_task_dealloc(v68);
  swift_task_dealloc(v73);
  swift_task_dealloc(v74);
  swift_task_dealloc(v75);
  swift_task_dealloc(v76);
  swift_task_dealloc(v77);
  swift_task_dealloc(v78);
  swift_task_dealloc(v79);
  swift_task_dealloc(v80);
  swift_task_dealloc(v81);
  swift_task_dealloc(v82);
  swift_task_dealloc(v83);
  swift_task_dealloc(v84);
  swift_task_dealloc(v85);
  swift_task_dealloc(v86);
  swift_task_dealloc(v87);
  swift_task_dealloc(v88);
  swift_task_dealloc(v89);
  swift_task_dealloc(v90);
  swift_task_dealloc(v91);
  swift_task_dealloc(v92);
  swift_task_dealloc(v93);
  swift_task_dealloc(v94);
  swift_task_dealloc(v95);
  swift_task_dealloc(v96);
  swift_task_dealloc(v97);
  swift_task_dealloc(v98);
  swift_task_dealloc(v99);
  swift_task_dealloc(v100);
  swift_task_dealloc(v101);
  swift_task_dealloc(v102);
  swift_task_dealloc(v103);
  swift_task_dealloc(v104);
  swift_task_dealloc(v105);
  swift_task_dealloc(v106);
  swift_task_dealloc(v107);
  swift_task_dealloc(v108);
  swift_task_dealloc(v109);
  swift_task_dealloc(v110);
  swift_task_dealloc(v111);
  swift_task_dealloc(v112);
  swift_task_dealloc(v113);
  swift_task_dealloc(v114);
  swift_task_dealloc(v115);
  swift_task_dealloc(v119);
  swift_task_dealloc(v123);
  swift_task_dealloc(v125);
  swift_task_dealloc(v127);
  swift_task_dealloc(v129);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10004B488()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 5424);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 6104));
  return swift_task_switch(sub_10004B4E0, v1, 0);
}

uint64_t sub_10004B4E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint8_t *v25;
  void (*v26)(uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  os_log_type_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint8_t *v46;
  void (*v47)(uint64_t, uint64_t);
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  void (*v57)(uint64_t, uint64_t);
  uint64_t v58;
  uint64_t v59;
  void (*v60)(uint64_t, uint64_t);
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint8_t *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  NSObject *v125;
  uint64_t v126;
  uint8_t *v127;
  uint8_t *v128;
  os_log_type_t v129;
  uint8_t *v130;
  uint64_t v131;
  uint64_t v132;
  _WORD *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t (*v136)();
  uint64_t v137;

  v1 = *(_QWORD *)(v0 + 5576);
  if ((*(unsigned int (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 5544) + 48))(v1, 1, *(_QWORD *)(v0 + 5536)) == 1)
  {
    swift_bridgeObjectRelease();
    sub_100004048(v1, (uint64_t *)&unk_1010FF7F0);
    v2 = *(_QWORD *)(v0 + 6096);
LABEL_5:
    v7 = *(_QWORD *)(*(_QWORD *)(v0 + 5424) + 184);
    swift_retain();
    v8 = sub_10004F450();
    *(_QWORD *)(v0 + 6112) = v2;
    if (!v2)
    {
      *(_QWORD *)(v7 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_otherSerialNumbersAndMACAddresses) = v8;
      swift_release(v7);
      swift_bridgeObjectRelease();
      v29 = (_QWORD *)swift_task_alloc(dword_1010EC57C);
      *(_QWORD *)(v0 + 6120) = v29;
      *v29 = v0;
      v29[1] = sub_10004C230;
      return sub_10004F8CC(v0 + 16, *(_QWORD *)(v0 + 5968), *(_QWORD *)(v0 + 5416));
    }
    v9 = v2;
    v10 = *(_QWORD *)(v0 + 6016);
    v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 6008);
    v12 = *(_QWORD *)(v0 + 6000);
    v13 = *(_QWORD *)(v0 + 5736);
    v14 = *(_QWORD *)(v0 + 5608);
    swift_release(v7);
    v11(v13, v12, v14);
    v15 = swift_allocObject(&unk_1010520F8, 24, 7);
    *(_QWORD *)(v15 + 16) = v9;
    v16 = swift_errorRetain(v9);
    v17 = Logger.logObject.getter(v16);
    v18 = static os_log_type_t.error.getter(v17);
    v19 = swift_allocObject(&unk_101052120, 17, 7);
    *(_BYTE *)(v19 + 16) = 34;
    v20 = swift_allocObject(&unk_101052148, 17, 7);
    *(_BYTE *)(v20 + 16) = 8;
    v21 = swift_allocObject(&unk_101052170, 32, 7);
    *(_QWORD *)(v21 + 16) = sub_1000590A4;
    *(_QWORD *)(v21 + 24) = v15;
    v22 = swift_allocObject(&unk_101052198, 32, 7);
    *(_QWORD *)(v22 + 16) = sub_10005CBA4;
    *(_QWORD *)(v22 + 24) = v21;
    v23 = swift_allocObject(v10, 80, 7);
    sub_100882D28(v23, 3);
    *v24 = sub_10005CBC4;
    v24[1] = v19;
    v24[2] = sub_10005CBC4;
    v24[3] = v20;
    v24[4] = sub_10005CBB4;
    v24[5] = v22;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v17, v18))
    {
      v25 = (uint8_t *)sub_1006948A0(12);
      v134 = 0;
      v135 = swift_slowAlloc(32, -1);
      v124 = v135;
      v127 = v25;
      *(_WORD *)v25 = 258;
      v133 = v25 + 2;
      v136 = sub_10005CBC4;
      v137 = v19;
      sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v136, (uint64_t)&v133, (uint64_t)&v134, (uint64_t)&v135);
      swift_release(v19);
      v136 = sub_10005CBC4;
      v137 = v20;
      sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v136, (uint64_t)&v133, (uint64_t)&v134, (uint64_t)&v135);
      swift_release(v20);
      v136 = sub_10005CBB4;
      v137 = v22;
      sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v136, (uint64_t)&v133, (uint64_t)&v134, (uint64_t)&v135);
      v26 = *(void (**)(uint64_t, uint64_t))(v0 + 6080);
      v27 = *(_QWORD *)(v0 + 5736);
      v28 = *(_QWORD *)(v0 + 5608);
      swift_release(v22);
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Unable to parse otherSerialNumbersAndMacAddressesMap due to %{public}s", v127, 0xCu);
      swift_arrayDestroy(v124, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v124, -1, -1);
      sub_100694894((uint64_t)v127);

      v26(v27, v28);
    }
    else
    {
      v47 = *(void (**)(uint64_t, uint64_t))(v0 + 6080);
      v48 = *(_QWORD *)(v0 + 5736);
      v49 = *(_QWORD *)(v0 + 5608);

      swift_release(v22);
      swift_release(v20);
      swift_release(v19);
      v47(v48, v49);
    }
    v50 = *(_QWORD *)(v0 + 5984);
    v51 = *(_QWORD *)(v0 + 5968);
    v52 = *(_QWORD *)(v0 + 5960);
    v53 = *(_QWORD *)(v0 + 5952);
    v54 = sub_100056FAC();
    v55 = swift_allocError(&type metadata for AirPodsLEPairingService.Error, v54, 0, 0);
    *v56 = 0x8000000000000007;
    swift_willThrow(v55);
    swift_release(v50);
    sub_10005726C(v0 + 552, (void (*)(void))sub_10001BC14);
    swift_errorRelease(v9);
    sub_1000590CC((uint64_t *)(v0 + 816), (void (*)(uint64_t, uint64_t))sub_10001BC14);
    (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v51, v53);
    goto LABEL_21;
  }
  v2 = *(_QWORD *)(v0 + 6096);
  v3 = *(_QWORD *)(v0 + 6088);
  sub_1000126EC(v1, *(_QWORD *)(v0 + 5560), type metadata accessor for OwnedBeaconGroup);
  v4 = sub_100367114();
  v5 = sub_100CA7E28(v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain(v5);
  LOBYTE(v3) = sub_100058270(v3, v5);
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(v0 + 6088);
  if ((v3 & 1) != 0)
  {
    sub_1000126B0(*(_QWORD *)(v0 + 5560), type metadata accessor for OwnedBeaconGroup);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_5;
  }
  v128 = *(uint8_t **)(v0 + 6016);
  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 6008))(*(_QWORD *)(v0 + 5712), *(_QWORD *)(v0 + 6000), *(_QWORD *)(v0 + 5608));
  v31 = swift_allocObject(&unk_101052288, 24, 7);
  *(_QWORD *)(v31 + 16) = v6;
  v32 = swift_allocObject(&unk_1010522B0, 32, 7);
  *(_QWORD *)(v32 + 16) = sub_10005CD3C;
  *(_QWORD *)(v32 + 24) = v31;
  v33 = swift_allocObject(&unk_1010522D8, 24, 7);
  *(_QWORD *)(v33 + 16) = v5;
  v34 = swift_allocObject(&unk_101052300, 32, 7);
  *(_QWORD *)(v34 + 16) = sub_10005CD3C;
  *(_QWORD *)(v34 + 24) = v33;
  v125 = Logger.logObject.getter(v34);
  v35 = static os_log_type_t.error.getter(v125);
  v36 = swift_allocObject(&unk_101052328, 17, 7);
  *(_BYTE *)(v36 + 16) = 32;
  v37 = swift_allocObject(&unk_101052350, 17, 7);
  *(_BYTE *)(v37 + 16) = 8;
  v38 = swift_allocObject(&unk_101052378, 32, 7);
  *(_QWORD *)(v38 + 16) = sub_10005942C;
  *(_QWORD *)(v38 + 24) = v32;
  v39 = swift_allocObject(&unk_1010523A0, 32, 7);
  *(_QWORD *)(v39 + 16) = sub_10005CBA4;
  *(_QWORD *)(v39 + 24) = v38;
  v40 = swift_allocObject(&unk_1010523C8, 17, 7);
  *(_BYTE *)(v40 + 16) = 32;
  v41 = swift_allocObject(&unk_1010523F0, 17, 7);
  *(_BYTE *)(v41 + 16) = 8;
  v42 = swift_allocObject(&unk_101052418, 32, 7);
  *(_QWORD *)(v42 + 16) = sub_100059434;
  *(_QWORD *)(v42 + 24) = v34;
  v43 = swift_allocObject(&unk_101052440, 32, 7);
  *(_QWORD *)(v43 + 16) = sub_10005CBA4;
  *(_QWORD *)(v43 + 24) = v42;
  v44 = swift_allocObject(v128, 128, 7);
  sub_100882D28(v44, 6);
  *v45 = sub_10005CBC4;
  v45[1] = v36;
  v45[2] = sub_10005CBC4;
  v45[3] = v37;
  v45[4] = sub_10005CBB4;
  v45[5] = v39;
  v45[6] = sub_10005CBC4;
  v45[7] = v40;
  v45[8] = sub_10005CBC4;
  v45[9] = v41;
  v45[10] = sub_10005CBB4;
  v45[11] = v43;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRelease();
  v129 = v35;
  if (os_log_type_enabled(v125, v35))
  {
    v46 = (uint8_t *)sub_1006948A0(22);
    v134 = 0;
    v135 = swift_slowAlloc(64, -1);
    v122 = v135;
    *(_WORD *)v46 = 514;
    v133 = v46 + 2;
    v136 = sub_10005CBC4;
    v137 = v36;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v136, (uint64_t)&v133, (uint64_t)&v134, (uint64_t)&v135);
    if (v2)
      return swift_errorRelease(v2);
    swift_release(v36);
    v136 = sub_10005CBC4;
    v137 = v37;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v136, (uint64_t)&v133, (uint64_t)&v134, (uint64_t)&v135);
    swift_release(v37);
    v136 = sub_10005CBB4;
    v137 = v39;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v136, (uint64_t)&v133, (uint64_t)&v134, (uint64_t)&v135);
    swift_release(v39);
    v136 = sub_10005CBC4;
    v137 = v40;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v136, (uint64_t)&v133, (uint64_t)&v134, (uint64_t)&v135);
    swift_release(v40);
    v136 = sub_10005CBC4;
    v137 = v41;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v136, (uint64_t)&v133, (uint64_t)&v134, (uint64_t)&v135);
    swift_release(v41);
    v136 = sub_10005CBB4;
    v137 = v43;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v136, (uint64_t)&v133, (uint64_t)&v134, (uint64_t)&v135);
    v57 = *(void (**)(uint64_t, uint64_t))(v0 + 6080);
    v58 = *(_QWORD *)(v0 + 5712);
    v80 = v46;
    v59 = *(_QWORD *)(v0 + 5608);
    swift_release(v43);
    _os_log_impl((void *)&_mh_execute_header, v125, v129, "Invalid otherSerialNumbers: %s. allSerialNumbers: %s", v80, 0x16u);
    swift_arrayDestroy(v122, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v122, -1, -1);
    sub_100694894((uint64_t)v80);

  }
  else
  {
    v57 = *(void (**)(uint64_t, uint64_t))(v0 + 6080);
    v58 = *(_QWORD *)(v0 + 5712);
    v59 = *(_QWORD *)(v0 + 5608);

    swift_release(v43);
    swift_release(v41);
    swift_release(v40);
    swift_release(v39);
    swift_release(v37);
    swift_release(v36);
  }
  v57(v58, v59);
  v60 = *(void (**)(uint64_t, uint64_t))(v0 + 6080);
  v61 = *(_QWORD *)(v0 + 5984);
  v62 = *(_QWORD *)(v0 + 5968);
  v63 = *(_QWORD *)(v0 + 5960);
  v64 = *(_QWORD *)(v0 + 5952);
  v65 = *(_QWORD *)(v0 + 5704);
  v66 = *(_QWORD *)(v0 + 5608);
  v67 = *(_QWORD *)(v0 + 5560);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v0 + 6008))(v65, *(_QWORD *)(v0 + 6000), v66);
  sub_100367170(v65);
  v60(v65, v66);
  v68 = sub_100056FAC();
  v69 = swift_allocError(&type metadata for AirPodsLEPairingService.Error, v68, 0, 0);
  *v70 = 0x8000000000000007;
  swift_willThrow(v69);
  swift_release(v61);
  sub_10005726C(v0 + 552, (void (*)(void))sub_10001BC14);
  sub_1000590CC((uint64_t *)(v0 + 816), (void (*)(uint64_t, uint64_t))sub_10001BC14);
  sub_1000126B0(v67, type metadata accessor for OwnedBeaconGroup);
  (*(void (**)(uint64_t, uint64_t))(v63 + 8))(v62, v64);
LABEL_21:
  v71 = *(_QWORD *)(v0 + 5944);
  v72 = *(_QWORD *)(v0 + 5936);
  v73 = *(_QWORD *)(v0 + 5928);
  v74 = *(_QWORD *)(v0 + 5920);
  v75 = *(_QWORD *)(v0 + 5912);
  v76 = *(_QWORD *)(v0 + 5904);
  v77 = *(_QWORD *)(v0 + 5896);
  v78 = *(_QWORD *)(v0 + 5888);
  v79 = *(_QWORD *)(v0 + 5880);
  v81 = *(_QWORD *)(v0 + 5872);
  v82 = *(_QWORD *)(v0 + 5864);
  v83 = *(_QWORD *)(v0 + 5856);
  v84 = *(_QWORD *)(v0 + 5848);
  v85 = *(_QWORD *)(v0 + 5840);
  v86 = *(_QWORD *)(v0 + 5832);
  v87 = *(_QWORD *)(v0 + 5824);
  v88 = *(_QWORD *)(v0 + 5816);
  v89 = *(_QWORD *)(v0 + 5808);
  v90 = *(_QWORD *)(v0 + 5800);
  v91 = *(_QWORD *)(v0 + 5792);
  v92 = *(_QWORD *)(v0 + 5784);
  v93 = *(_QWORD *)(v0 + 5776);
  v94 = *(_QWORD *)(v0 + 5768);
  v95 = *(_QWORD *)(v0 + 5760);
  v96 = *(_QWORD *)(v0 + 5752);
  v97 = *(_QWORD *)(v0 + 5744);
  v98 = *(_QWORD *)(v0 + 5736);
  v99 = *(_QWORD *)(v0 + 5728);
  v100 = *(_QWORD *)(v0 + 5720);
  v101 = *(_QWORD *)(v0 + 5712);
  v102 = *(_QWORD *)(v0 + 5704);
  v103 = *(_QWORD *)(v0 + 5696);
  v104 = *(_QWORD *)(v0 + 5688);
  v105 = *(_QWORD *)(v0 + 5680);
  v106 = *(_QWORD *)(v0 + 5672);
  v107 = *(_QWORD *)(v0 + 5664);
  v108 = *(_QWORD *)(v0 + 5656);
  v109 = *(_QWORD *)(v0 + 5648);
  v110 = *(_QWORD *)(v0 + 5640);
  v111 = *(_QWORD *)(v0 + 5632);
  v112 = *(_QWORD *)(v0 + 5624);
  v113 = *(_QWORD *)(v0 + 5600);
  v114 = *(_QWORD *)(v0 + 5592);
  v115 = *(_QWORD *)(v0 + 5584);
  v116 = *(_QWORD *)(v0 + 5576);
  v117 = *(_QWORD *)(v0 + 5568);
  v118 = *(_QWORD *)(v0 + 5560);
  v119 = *(_QWORD *)(v0 + 5552);
  v120 = *(_QWORD *)(v0 + 5528);
  v121 = *(_QWORD *)(v0 + 5512);
  v123 = *(_QWORD *)(v0 + 5504);
  v126 = *(_QWORD *)(v0 + 5488);
  v130 = *(uint8_t **)(v0 + 5480);
  v131 = *(_QWORD *)(v0 + 5456);
  v132 = *(_QWORD *)(v0 + 5448);
  swift_task_dealloc(*(_QWORD *)(v0 + 5968));
  swift_task_dealloc(v71);
  swift_task_dealloc(v72);
  swift_task_dealloc(v73);
  swift_task_dealloc(v74);
  swift_task_dealloc(v75);
  swift_task_dealloc(v76);
  swift_task_dealloc(v77);
  swift_task_dealloc(v78);
  swift_task_dealloc(v79);
  swift_task_dealloc(v81);
  swift_task_dealloc(v82);
  swift_task_dealloc(v83);
  swift_task_dealloc(v84);
  swift_task_dealloc(v85);
  swift_task_dealloc(v86);
  swift_task_dealloc(v87);
  swift_task_dealloc(v88);
  swift_task_dealloc(v89);
  swift_task_dealloc(v90);
  swift_task_dealloc(v91);
  swift_task_dealloc(v92);
  swift_task_dealloc(v93);
  swift_task_dealloc(v94);
  swift_task_dealloc(v95);
  swift_task_dealloc(v96);
  swift_task_dealloc(v97);
  swift_task_dealloc(v98);
  swift_task_dealloc(v99);
  swift_task_dealloc(v100);
  swift_task_dealloc(v101);
  swift_task_dealloc(v102);
  swift_task_dealloc(v103);
  swift_task_dealloc(v104);
  swift_task_dealloc(v105);
  swift_task_dealloc(v106);
  swift_task_dealloc(v107);
  swift_task_dealloc(v108);
  swift_task_dealloc(v109);
  swift_task_dealloc(v110);
  swift_task_dealloc(v111);
  swift_task_dealloc(v112);
  swift_task_dealloc(v113);
  swift_task_dealloc(v114);
  swift_task_dealloc(v115);
  swift_task_dealloc(v116);
  swift_task_dealloc(v117);
  swift_task_dealloc(v118);
  swift_task_dealloc(v119);
  swift_task_dealloc(v120);
  swift_task_dealloc(v121);
  swift_task_dealloc(v123);
  swift_task_dealloc(v126);
  swift_task_dealloc(v130);
  swift_task_dealloc(v131);
  swift_task_dealloc(v132);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10004C230()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 5424);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 6120));
  return swift_task_switch(sub_10004C288, v1, 0);
}

uint64_t sub_10004C288()
{
  uint64_t v0;
  const void *v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t (*v21)(uint64_t, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  _QWORD *v27;
  os_log_type_t v28;
  uint64_t v29;
  uint64_t v30;
  uint8_t *v31;
  const void *v32;
  void (*v33)(uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t (*v56)(void);
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  void (*v159)(uint64_t, uint64_t);
  uint64_t v160;
  uint64_t v161;
  NSObject *v162;
  uint64_t v163;
  uint64_t v164;
  void (*v165)(uint64_t, uint64_t);
  uint64_t v166;
  _QWORD *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  void *v175;
  uint64_t v176;
  uint8_t *v177;
  uint64_t (*v178)();
  uint64_t v179;
  uint8_t *v180;
  _QWORD v181[3];

  v1 = (const void *)(v0 + 16);
  if ((*(_BYTE *)(v0 + 280) & 1) != 0)
  {
    v2 = *(_QWORD *)(v0 + 6016);
    v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 6008);
    v4 = *(_QWORD *)(v0 + 6000);
    v5 = *(_QWORD *)(v0 + 5720);
    v6 = *(_QWORD *)(v0 + 5608);
    sub_100059244((uint64_t)v1, v0 + 5024);
    v3(v5, v4, v6);
    v167 = (_QWORD *)(v0 + 5024);
    sub_100059280((_QWORD *)(v0 + 5024), v0 + 4976);
    v7 = swift_allocObject(&unk_1010521C0, 57, 7);
    v8 = sub_100059244(v0 + 4976, v7 + 16);
    v9 = Logger.logObject.getter(v8);
    v10 = static os_log_type_t.error.getter(v9);
    v11 = swift_allocObject(&unk_1010521E8, 17, 7);
    *(_BYTE *)(v11 + 16) = 34;
    v12 = swift_allocObject(&unk_101052210, 17, 7);
    *(_BYTE *)(v12 + 16) = 8;
    v13 = swift_allocObject(&unk_101052238, 32, 7);
    *(_QWORD *)(v13 + 16) = sub_100059350;
    *(_QWORD *)(v13 + 24) = v7;
    v14 = swift_allocObject(&unk_101052260, 32, 7);
    *(_QWORD *)(v14 + 16) = sub_10005CBA4;
    *(_QWORD *)(v14 + 24) = v13;
    v15 = swift_allocObject(v2, 80, 7);
    sub_100882D28(v15, 3);
    *v16 = sub_10005CBC4;
    v16[1] = v11;
    v16[2] = sub_10005CBC4;
    v16[3] = v12;
    v16[4] = sub_10005CBB4;
    v16[5] = v14;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v9, v10))
    {
      v162 = v9;
      v17 = *(_QWORD *)(v0 + 6112);
      v18 = (uint8_t *)sub_1006948A0(12);
      v19 = swift_slowAlloc(32, -1);
      v180 = 0;
      v181[0] = v19;
      *(_WORD *)v18 = 258;
      v177 = v18 + 2;
      v178 = sub_10005CBC4;
      v179 = v11;
      sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v178, (uint64_t)&v177, (uint64_t)&v180, (uint64_t)v181);
      if (v17)
        return swift_errorRelease(v17);
      swift_release(v11);
      v178 = sub_10005CBC4;
      v179 = v12;
      sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v178, (uint64_t)&v177, (uint64_t)&v180, (uint64_t)v181);
      swift_release(v12);
      v178 = sub_10005CBB4;
      v179 = v14;
      sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v178, (uint64_t)&v177, (uint64_t)&v180, (uint64_t)v181);
      v33 = *(void (**)(uint64_t, uint64_t))(v0 + 6080);
      v69 = *(_QWORD *)(v0 + 5720);
      v70 = *(_QWORD *)(v0 + 5608);
      swift_release(v14);
      _os_log_impl((void *)&_mh_execute_header, v162, v10, "Unable to generate finalizeCommand payload due to %{public}s", v18, 0xCu);
      swift_arrayDestroy(v19, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v19, -1, -1);
      sub_100694894((uint64_t)v18);

      v36 = v69;
      v37 = v70;
    }
    else
    {
      v33 = *(void (**)(uint64_t, uint64_t))(v0 + 6080);
      v34 = *(_QWORD *)(v0 + 5720);
      v35 = *(_QWORD *)(v0 + 5608);

      swift_release(v14);
      swift_release(v12);
      swift_release(v11);
      v36 = v34;
      v37 = v35;
    }
    v33(v36, v37);
    v38 = *(_QWORD *)(v0 + 5984);
    v39 = *(_QWORD *)(v0 + 5968);
    v40 = *(_QWORD *)(v0 + 5960);
    v41 = *(_QWORD *)(v0 + 5952);
    v42 = sub_100059390();
    v43 = swift_allocError(&type metadata for CentralManager.Error, v42, 0, 0);
    sub_100059280(v167, v44);
    v45 = sub_100056FAC();
    v164 = swift_allocError(&type metadata for AirPodsLEPairingService.Error, v45, 0, 0);
    *v46 = v43;
    swift_willThrow(v164);
    swift_release(v38);
    sub_10005726C(v0 + 552, (void (*)(void))sub_10001BC14);
    sub_1000590CC((uint64_t *)(v0 + 816), (void (*)(uint64_t, uint64_t))sub_10001BC14);
    sub_1000593D4(v167);
    (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v39, v41);
    v47 = *(_QWORD *)(v0 + 5944);
    v48 = *(_QWORD *)(v0 + 5936);
    v49 = *(_QWORD *)(v0 + 5928);
    v50 = *(_QWORD *)(v0 + 5920);
    v51 = *(_QWORD *)(v0 + 5912);
    v52 = *(_QWORD *)(v0 + 5904);
    v53 = *(_QWORD *)(v0 + 5896);
    v54 = *(_QWORD *)(v0 + 5888);
    v55 = *(_QWORD *)(v0 + 5880);
    v73 = *(_QWORD *)(v0 + 5872);
    v75 = *(_QWORD *)(v0 + 5864);
    v77 = *(_QWORD *)(v0 + 5856);
    v79 = *(_QWORD *)(v0 + 5848);
    v81 = *(_QWORD *)(v0 + 5840);
    v83 = *(_QWORD *)(v0 + 5832);
    v85 = *(_QWORD *)(v0 + 5824);
    v87 = *(_QWORD *)(v0 + 5816);
    v89 = *(_QWORD *)(v0 + 5808);
    v91 = *(_QWORD *)(v0 + 5800);
    v93 = *(_QWORD *)(v0 + 5792);
    v95 = *(_QWORD *)(v0 + 5784);
    v97 = *(_QWORD *)(v0 + 5776);
    v99 = *(_QWORD *)(v0 + 5768);
    v101 = *(_QWORD *)(v0 + 5760);
    v103 = *(_QWORD *)(v0 + 5752);
    v105 = *(_QWORD *)(v0 + 5744);
    v107 = *(_QWORD *)(v0 + 5736);
    v109 = *(_QWORD *)(v0 + 5728);
    v111 = *(_QWORD *)(v0 + 5720);
    v113 = *(_QWORD *)(v0 + 5712);
    v115 = *(_QWORD *)(v0 + 5704);
    v117 = *(_QWORD *)(v0 + 5696);
    v119 = *(_QWORD *)(v0 + 5688);
    v121 = *(_QWORD *)(v0 + 5680);
    v123 = *(_QWORD *)(v0 + 5672);
    v125 = *(_QWORD *)(v0 + 5664);
    v127 = *(_QWORD *)(v0 + 5656);
    v129 = *(_QWORD *)(v0 + 5648);
    v131 = *(_QWORD *)(v0 + 5640);
    v133 = *(_QWORD *)(v0 + 5632);
    v135 = *(_QWORD *)(v0 + 5624);
    v137 = *(_QWORD *)(v0 + 5600);
    v139 = *(_QWORD *)(v0 + 5592);
    v141 = *(_QWORD *)(v0 + 5584);
    v143 = *(_QWORD *)(v0 + 5576);
    v145 = *(_QWORD *)(v0 + 5568);
    v147 = *(_QWORD *)(v0 + 5560);
    v149 = *(_QWORD *)(v0 + 5552);
    v151 = *(_QWORD *)(v0 + 5528);
    v154 = *(_QWORD *)(v0 + 5512);
    v157 = *(_QWORD *)(v0 + 5504);
    v160 = *(_QWORD *)(v0 + 5488);
    v169 = *(_QWORD *)(v0 + 5480);
    v172 = *(_QWORD *)(v0 + 5456);
    v176 = *(_QWORD *)(v0 + 5448);
    swift_task_dealloc(*(_QWORD *)(v0 + 5968));
    swift_task_dealloc(v47);
    swift_task_dealloc(v48);
    swift_task_dealloc(v49);
    swift_task_dealloc(v50);
    swift_task_dealloc(v51);
    swift_task_dealloc(v52);
    swift_task_dealloc(v53);
    swift_task_dealloc(v54);
    swift_task_dealloc(v55);
    swift_task_dealloc(v73);
    swift_task_dealloc(v75);
    swift_task_dealloc(v77);
    swift_task_dealloc(v79);
    swift_task_dealloc(v81);
    swift_task_dealloc(v83);
    swift_task_dealloc(v85);
    swift_task_dealloc(v87);
    swift_task_dealloc(v89);
    swift_task_dealloc(v91);
    swift_task_dealloc(v93);
    swift_task_dealloc(v95);
    swift_task_dealloc(v97);
    swift_task_dealloc(v99);
    swift_task_dealloc(v101);
    swift_task_dealloc(v103);
    swift_task_dealloc(v105);
    swift_task_dealloc(v107);
    swift_task_dealloc(v109);
    swift_task_dealloc(v111);
    swift_task_dealloc(v113);
    swift_task_dealloc(v115);
    swift_task_dealloc(v117);
    swift_task_dealloc(v119);
    swift_task_dealloc(v121);
    swift_task_dealloc(v123);
    swift_task_dealloc(v125);
    swift_task_dealloc(v127);
    swift_task_dealloc(v129);
    swift_task_dealloc(v131);
    swift_task_dealloc(v133);
    swift_task_dealloc(v135);
    swift_task_dealloc(v137);
    swift_task_dealloc(v139);
    swift_task_dealloc(v141);
    swift_task_dealloc(v143);
    swift_task_dealloc(v145);
    swift_task_dealloc(v147);
    swift_task_dealloc(v149);
    swift_task_dealloc(v151);
    swift_task_dealloc(v154);
    swift_task_dealloc(v157);
    swift_task_dealloc(v160);
    swift_task_dealloc(v169);
    swift_task_dealloc(v172);
    swift_task_dealloc(v176);
    v56 = *(uint64_t (**)(void))(v0 + 8);
  }
  else
  {
    v175 = (void *)(v0 + 3720);
    v21 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 6008);
    v22 = *(_QWORD *)(v0 + 6000);
    v23 = *(_QWORD *)(v0 + 5728);
    v24 = *(_QWORD *)(v0 + 5608);
    sub_100057230(v1, (void *)(v0 + 3192));
    v25 = v21(v23, v22, v24);
    v26 = Logger.logObject.getter(v25);
    LOBYTE(v23) = static os_log_type_t.default.getter(v26);
    v27 = sub_100BD13F8(0);
    v28 = v23;
    if (os_log_type_enabled(v26, (os_log_type_t)v23))
    {
      v29 = *(_QWORD *)(v0 + 5984);
      v156 = *(_QWORD *)(v0 + 5960);
      v159 = *(void (**)(uint64_t, uint64_t))(v0 + 6080);
      v163 = *(_QWORD *)(v0 + 5952);
      v168 = *(_QWORD *)(v0 + 5968);
      v153 = *(_QWORD *)(v0 + 5728);
      v30 = *(_QWORD *)(v0 + 5608);
      v31 = (uint8_t *)sub_1006948A0(2);
      v178 = 0;
      *(_WORD *)v31 = 0;
      v180 = v31 + 2;
      v181[0] = 0;
      sub_100A3DD1C((uint64_t)v27, (uint64_t)&v180, (uint64_t)v181, (uint64_t)&v178);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v26, v28, "Successfully generated finalize pairing command.", v31, 2u);
      sub_100694894((uint64_t)v31);

      swift_release(v29);
      sub_10005726C(v0 + 552, (void (*)(void))sub_10001BC14);
      sub_1000590CC((uint64_t *)(v0 + 816), (void (*)(uint64_t, uint64_t))sub_10001BC14);
      v32 = (const void *)(v0 + 3192);
      v159(v153, v30);
      (*(void (**)(uint64_t, uint64_t))(v156 + 8))(v168, v163);
    }
    else
    {
      v57 = *(_QWORD *)(v0 + 5984);
      v173 = *(_QWORD *)(v0 + 5968);
      v58 = *(_QWORD *)(v0 + 5960);
      v165 = *(void (**)(uint64_t, uint64_t))(v0 + 6080);
      v170 = *(_QWORD *)(v0 + 5952);
      v59 = *(_QWORD *)(v0 + 5728);
      v32 = (const void *)(v0 + 3192);
      v60 = *(_QWORD *)(v0 + 5608);

      swift_bridgeObjectRelease();
      swift_release(v57);
      sub_10005726C(v0 + 552, (void (*)(void))sub_10001BC14);
      sub_1000590CC((uint64_t *)(v0 + 816), (void (*)(uint64_t, uint64_t))sub_10001BC14);
      v165(v59, v60);
      (*(void (**)(uint64_t, uint64_t))(v58 + 8))(v173, v170);
    }
    sub_100057230(v32, v175);
    v61 = *(_QWORD *)(v0 + 5968);
    v62 = *(_QWORD *)(v0 + 5944);
    v63 = *(_QWORD *)(v0 + 5936);
    v64 = *(_QWORD *)(v0 + 5928);
    v65 = *(_QWORD *)(v0 + 5920);
    v66 = *(_QWORD *)(v0 + 5912);
    v67 = *(_QWORD *)(v0 + 5904);
    v68 = *(_QWORD *)(v0 + 5896);
    v71 = *(_QWORD *)(v0 + 5888);
    v72 = *(_QWORD *)(v0 + 5880);
    v74 = *(_QWORD *)(v0 + 5872);
    v76 = *(_QWORD *)(v0 + 5864);
    v78 = *(_QWORD *)(v0 + 5856);
    v80 = *(_QWORD *)(v0 + 5848);
    v82 = *(_QWORD *)(v0 + 5840);
    v84 = *(_QWORD *)(v0 + 5832);
    v86 = *(_QWORD *)(v0 + 5824);
    v88 = *(_QWORD *)(v0 + 5816);
    v90 = *(_QWORD *)(v0 + 5808);
    v92 = *(_QWORD *)(v0 + 5800);
    v94 = *(_QWORD *)(v0 + 5792);
    v96 = *(_QWORD *)(v0 + 5784);
    v98 = *(_QWORD *)(v0 + 5776);
    v100 = *(_QWORD *)(v0 + 5768);
    v102 = *(_QWORD *)(v0 + 5760);
    v104 = *(_QWORD *)(v0 + 5752);
    v106 = *(_QWORD *)(v0 + 5744);
    v108 = *(_QWORD *)(v0 + 5736);
    v110 = *(_QWORD *)(v0 + 5728);
    v112 = *(_QWORD *)(v0 + 5720);
    v114 = *(_QWORD *)(v0 + 5712);
    v116 = *(_QWORD *)(v0 + 5704);
    v118 = *(_QWORD *)(v0 + 5696);
    v120 = *(_QWORD *)(v0 + 5688);
    v122 = *(_QWORD *)(v0 + 5680);
    v124 = *(_QWORD *)(v0 + 5672);
    v126 = *(_QWORD *)(v0 + 5664);
    v128 = *(_QWORD *)(v0 + 5656);
    v130 = *(_QWORD *)(v0 + 5648);
    v132 = *(_QWORD *)(v0 + 5640);
    v134 = *(_QWORD *)(v0 + 5632);
    v136 = *(_QWORD *)(v0 + 5624);
    v138 = *(_QWORD *)(v0 + 5600);
    v140 = *(_QWORD *)(v0 + 5592);
    v142 = *(_QWORD *)(v0 + 5584);
    v144 = *(_QWORD *)(v0 + 5576);
    v146 = *(_QWORD *)(v0 + 5568);
    v148 = *(_QWORD *)(v0 + 5560);
    v150 = *(_QWORD *)(v0 + 5552);
    v152 = *(_QWORD *)(v0 + 5528);
    v155 = *(_QWORD *)(v0 + 5512);
    v158 = *(_QWORD *)(v0 + 5504);
    v161 = *(_QWORD *)(v0 + 5488);
    v166 = *(_QWORD *)(v0 + 5480);
    v171 = *(_QWORD *)(v0 + 5456);
    v174 = *(_QWORD *)(v0 + 5448);
    sub_100057230(v175, *(void **)(v0 + 5392));
    swift_task_dealloc(v61);
    swift_task_dealloc(v62);
    swift_task_dealloc(v63);
    swift_task_dealloc(v64);
    swift_task_dealloc(v65);
    swift_task_dealloc(v66);
    swift_task_dealloc(v67);
    swift_task_dealloc(v68);
    swift_task_dealloc(v71);
    swift_task_dealloc(v72);
    swift_task_dealloc(v74);
    swift_task_dealloc(v76);
    swift_task_dealloc(v78);
    swift_task_dealloc(v80);
    swift_task_dealloc(v82);
    swift_task_dealloc(v84);
    swift_task_dealloc(v86);
    swift_task_dealloc(v88);
    swift_task_dealloc(v90);
    swift_task_dealloc(v92);
    swift_task_dealloc(v94);
    swift_task_dealloc(v96);
    swift_task_dealloc(v98);
    swift_task_dealloc(v100);
    swift_task_dealloc(v102);
    swift_task_dealloc(v104);
    swift_task_dealloc(v106);
    swift_task_dealloc(v108);
    swift_task_dealloc(v110);
    swift_task_dealloc(v112);
    swift_task_dealloc(v114);
    swift_task_dealloc(v116);
    swift_task_dealloc(v118);
    swift_task_dealloc(v120);
    swift_task_dealloc(v122);
    swift_task_dealloc(v124);
    swift_task_dealloc(v126);
    swift_task_dealloc(v128);
    swift_task_dealloc(v130);
    swift_task_dealloc(v132);
    swift_task_dealloc(v134);
    swift_task_dealloc(v136);
    swift_task_dealloc(v138);
    swift_task_dealloc(v140);
    swift_task_dealloc(v142);
    swift_task_dealloc(v144);
    swift_task_dealloc(v146);
    swift_task_dealloc(v148);
    swift_task_dealloc(v150);
    swift_task_dealloc(v152);
    swift_task_dealloc(v155);
    swift_task_dealloc(v158);
    swift_task_dealloc(v161);
    swift_task_dealloc(v166);
    swift_task_dealloc(v171);
    swift_task_dealloc(v174);
    v56 = *(uint64_t (**)(void))(v0 + 8);
  }
  return v56();
}

uint64_t sub_10004CE8C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 5424);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 6136));
  return swift_task_switch(sub_10004CEE4, v1, 0);
}

uint64_t sub_10004CEE4()
{
  uint64_t v0;
  unint64_t *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint8_t *v16;
  void (*v17)(uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int EnumCaseMultiPayload;
  void (*v25)(uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint8_t *v58;
  uint64_t v59;
  uint8_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void (*v68)(uint64_t, uint64_t);
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t (*v86)(void);
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  os_log_type_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  _QWORD *v109;
  uint8_t *v110;
  uint64_t v112;
  _QWORD *v113;
  void (*v114)(uint64_t, uint64_t);
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  os_log_type_t v225;
  uint8_t *v226;
  uint8_t *v227;
  uint8_t *v228;
  uint64_t v229;
  uint8_t *v230;
  os_log_type_t v231;
  NSObject *v232;
  NSObject *v233;
  NSObject *v234;
  NSObject *v235;
  NSObject *v236;
  uint64_t v237;
  uint64_t v238;
  os_log_type_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t *v249;
  uint64_t v250;
  uint64_t v251;
  uint8_t *v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t (*v255)();
  uint64_t v256;

  v1 = *(unint64_t **)(v0 + 5528);
  v243 = v0 + 4672;
  v246 = v0 + 552;
  v249 = (uint64_t *)(v0 + 4816);
  if (swift_getEnumCaseMultiPayload(v1, *(_QWORD *)(v0 + 5520)) != 1)
  {
    v21 = *(_QWORD *)(v0 + 5512);
    v22 = *(_QWORD *)(v0 + 5504);
    v23 = *(_QWORD *)(v0 + 5496);
    sub_1000126EC((uint64_t)v1, v21, type metadata accessor for AirPodsLEPairingService.BeaconCreationResult);
    sub_10005972C(v21, v22, type metadata accessor for AirPodsLEPairingService.BeaconCreationResult);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v22, v23);
    v237 = *(_QWORD *)(v0 + 6016);
    v25 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 6008);
    if (EnumCaseMultiPayload == 1)
    {
      v26 = *(_QWORD *)(v0 + 5632);
      v27 = *(_QWORD *)(v0 + 5608);
      v28 = *(_QWORD *)(v0 + 5456);
      v29 = *(_QWORD *)(v0 + 5448);
      v30 = *(_QWORD *)(v0 + 5440);
      v31 = *(_QWORD *)(v0 + 5432);
      sub_1000126EC(*(_QWORD *)(v0 + 5504), v28, type metadata accessor for StandaloneBeacon);
      v32 = sub_100B5D40C();
      v25(v26, v32, v27);
      sub_10005972C(v28, v29, type metadata accessor for StandaloneBeacon);
      v33 = *(unsigned __int8 *)(v31 + 80);
      v34 = (v33 + 16) & ~v33;
      v35 = v34 + v30;
      v36 = v33 | 7;
      v37 = swift_allocObject(&unk_101051068, v35, v33 | 7);
      sub_1000126EC(v29, v37 + v34, type metadata accessor for StandaloneBeacon);
      v38 = swift_allocObject(&unk_101051090, 32, 7);
      *(_QWORD *)(v38 + 16) = sub_100058684;
      *(_QWORD *)(v38 + 24) = v37;
      sub_10005972C(v28, v29, type metadata accessor for StandaloneBeacon);
      v39 = swift_allocObject(&unk_1010510B8, v35, v36);
      sub_1000126EC(v29, v39 + v34, type metadata accessor for StandaloneBeacon);
      v40 = swift_allocObject(&unk_1010510E0, 32, 7);
      *(_QWORD *)(v40 + 16) = sub_100058808;
      *(_QWORD *)(v40 + 24) = v39;
      v232 = Logger.logObject.getter(v40);
      v225 = static os_log_type_t.default.getter(v232);
      v41 = swift_allocObject(&unk_101051108, 17, 7);
      *(_BYTE *)(v41 + 16) = 32;
      v220 = swift_allocObject(&unk_101051130, 17, 7);
      *(_BYTE *)(v220 + 16) = 8;
      v42 = swift_allocObject(&unk_101051158, 32, 7);
      *(_QWORD *)(v42 + 16) = sub_1000586CC;
      *(_QWORD *)(v42 + 24) = v38;
      v43 = swift_allocObject(&unk_101051180, 32, 7);
      *(_QWORD *)(v43 + 16) = sub_10005CBA4;
      *(_QWORD *)(v43 + 24) = v42;
      v44 = swift_allocObject(&unk_1010511A8, 17, 7);
      *(_BYTE *)(v44 + 16) = 112;
      v45 = swift_allocObject(&unk_1010511D0, 17, 7);
      *(_BYTE *)(v45 + 16) = 8;
      v46 = swift_allocObject(&unk_1010511F8, 24, 7);
      *(_QWORD *)(v46 + 16) = 1752392040;
      v47 = swift_allocObject(&unk_101051220, 32, 7);
      *(_QWORD *)(v47 + 16) = sub_1000588B4;
      *(_QWORD *)(v47 + 24) = v46;
      v48 = swift_allocObject(&unk_101051248, 17, 7);
      *(_BYTE *)(v48 + 16) = 33;
      v49 = swift_allocObject(&unk_101051270, 17, 7);
      *(_BYTE *)(v49 + 16) = 8;
      v50 = swift_allocObject(&unk_101051298, 32, 7);
      *(_QWORD *)(v50 + 16) = sub_10005885C;
      *(_QWORD *)(v50 + 24) = v40;
      v51 = swift_allocObject(&unk_1010512C0, 32, 7);
      *(_QWORD *)(v51 + 16) = sub_10005CBA4;
      *(_QWORD *)(v51 + 24) = v50;
      v52 = swift_allocObject(v237, 176, 7);
      sub_100882D28(v52, 9);
      *v53 = sub_10005CBC4;
      v53[1] = v41;
      v53[2] = sub_10005CBC4;
      v53[3] = v220;
      v53[4] = sub_10005CBB4;
      v53[5] = v43;
      v53[6] = sub_10005CBC4;
      v53[7] = v44;
      v53[8] = sub_10005CBC4;
      v53[9] = v45;
      v53[10] = sub_1000584E4;
      v53[11] = v47;
      v53[12] = sub_10005CBC4;
      v53[13] = v48;
      v53[14] = sub_10005CBC4;
      v53[15] = v49;
      v53[16] = sub_10005CBB4;
      v53[17] = v51;
      swift_retain();
      swift_retain();
      v54 = v43;
      swift_retain();
      v55 = v44;
      swift_retain();
      v56 = v45;
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_bridgeObjectRelease();
      if (os_log_type_enabled(v232, v225))
      {
        v57 = v54;
        v212 = v51;
        v216 = v47;
        v15 = *(_QWORD *)(v0 + 6128);
        v58 = (uint8_t *)sub_1006948A0(32);
        v59 = swift_slowAlloc(64, -1);
        v253 = 0;
        v254 = v59;
        *(_WORD *)v58 = 771;
        v252 = v58 + 2;
        v255 = sub_10005CBC4;
        v256 = v41;
        sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v255, (uint64_t)&v252, (uint64_t)&v253, (uint64_t)&v254);
        if (v15)
          return swift_errorRelease(v15);
        swift_release(v41);
        v255 = sub_10005CBC4;
        v256 = v220;
        sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v255, (uint64_t)&v252, (uint64_t)&v253, (uint64_t)&v254);
        swift_release(v220);
        v255 = sub_10005CBB4;
        v256 = v57;
        sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v255, (uint64_t)&v252, (uint64_t)&v253, (uint64_t)&v254);
        swift_release(v57);
        v255 = sub_10005CBC4;
        v256 = v55;
        sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v255, (uint64_t)&v252, (uint64_t)&v253, (uint64_t)&v254);
        swift_release(v55);
        v255 = sub_10005CBC4;
        v256 = v56;
        sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v255, (uint64_t)&v252, (uint64_t)&v253, (uint64_t)&v254);
        swift_release(v56);
        v255 = (uint64_t (*)())sub_1000584E4;
        v256 = v216;
        sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v255, (uint64_t)&v252, (uint64_t)&v253, (uint64_t)&v254);
        swift_release(v216);
        v255 = sub_10005CBC4;
        v256 = v48;
        sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v255, (uint64_t)&v252, (uint64_t)&v253, (uint64_t)&v254);
        swift_release(v48);
        v255 = sub_10005CBC4;
        v256 = v49;
        sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v255, (uint64_t)&v252, (uint64_t)&v253, (uint64_t)&v254);
        swift_release(v49);
        v255 = sub_10005CBB4;
        v256 = v212;
        sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v255, (uint64_t)&v252, (uint64_t)&v253, (uint64_t)&v254);
        v60 = v58;
        v61 = *(_QWORD *)(v0 + 5632);
        v62 = v59;
        v63 = *(_QWORD *)(v0 + 5616);
        v64 = *(_QWORD *)(v0 + 5608);
        v65 = *(_QWORD *)(v0 + 5512);
        v66 = *(_QWORD *)(v0 + 5456);
        swift_release(v212);
        _os_log_impl((void *)&_mh_execute_header, v232, v225, "Created standalone beacon: %s. BeaconId: %{private,mask.hash}s", v60, 0x20u);
        swift_arrayDestroy(v62, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v62, -1, -1);
        sub_100694894((uint64_t)v60);

        (*(void (**)(uint64_t, uint64_t))(v63 + 8))(v61, v64);
        sub_1000126B0(v66, type metadata accessor for StandaloneBeacon);
        v67 = v65;
      }
      else
      {
        v112 = *(_QWORD *)(v0 + 5616);
        v210 = *(_QWORD *)(v0 + 5608);
        v214 = *(_QWORD *)(v0 + 5632);
        v229 = *(_QWORD *)(v0 + 5512);
        v218 = *(_QWORD *)(v0 + 5456);
        swift_release(v41);
        swift_release(v220);
        swift_release(v54);
        swift_release(v55);
        swift_release(v56);
        swift_release(v47);
        swift_release(v48);
        swift_release(v49);
        swift_release(v51);

        (*(void (**)(uint64_t, uint64_t))(v112 + 8))(v214, v210);
        sub_1000126B0(v218, type metadata accessor for StandaloneBeacon);
        v67 = v229;
      }
      sub_1000126B0(v67, type metadata accessor for AirPodsLEPairingService.BeaconCreationResult);
      *(_BYTE *)(*(_QWORD *)(v0 + 5424) + 176) = 9;
      v113 = (_QWORD *)(v0 + 5272);
    }
    else
    {
      v87 = *(_QWORD *)(v0 + 6000);
      v88 = *(_QWORD *)(v0 + 5640);
      v89 = *(_QWORD *)(v0 + 5608);
      v90 = *(_QWORD *)(v0 + 5552);
      v91 = *(_QWORD *)(v0 + 5504);
      v92 = *(_QWORD *)(v0 + 5488);
      v93 = *(_QWORD *)(v0 + 5480);
      v227 = *(uint8_t **)(v0 + 5464);
      v234 = *(NSObject **)(v0 + 5472);
      v94 = v91 + *(int *)(sub_10001A9A8(&qword_1010EC568) + 48);
      sub_1000126EC(v91, v90, type metadata accessor for OwnedBeaconGroup);
      sub_1000126EC(v94, v92, type metadata accessor for OwnedBeaconRecord);
      v25(v88, v87, v89);
      sub_10005972C(v92, v93, type metadata accessor for OwnedBeaconRecord);
      v95 = v227[80];
      v96 = (v95 + 16) & ~v95;
      v97 = swift_allocObject(&unk_1010512E8, (char *)v234 + v96, v95 | 7);
      sub_1000126EC(v93, v97 + v96, type metadata accessor for OwnedBeaconRecord);
      v98 = swift_allocObject(&unk_101051310, 32, 7);
      *(_QWORD *)(v98 + 16) = sub_100058C8C;
      *(_QWORD *)(v98 + 24) = v97;
      v235 = Logger.logObject.getter(v98);
      v99 = static os_log_type_t.default.getter(v235);
      v100 = swift_allocObject(&unk_101051338, 17, 7);
      *(_BYTE *)(v100 + 16) = 112;
      v101 = swift_allocObject(&unk_101051360, 17, 7);
      *(_BYTE *)(v101 + 16) = 8;
      v102 = swift_allocObject(&unk_101051388, 24, 7);
      *(_QWORD *)(v102 + 16) = 1752392040;
      v103 = swift_allocObject(&unk_1010513B0, 32, 7);
      *(_QWORD *)(v103 + 16) = sub_10005CBC0;
      *(_QWORD *)(v103 + 24) = v102;
      v104 = swift_allocObject(&unk_1010513D8, 17, 7);
      *(_BYTE *)(v104 + 16) = 33;
      v105 = swift_allocObject(&unk_101051400, 17, 7);
      *(_BYTE *)(v105 + 16) = 8;
      v106 = swift_allocObject(&unk_101051428, 32, 7);
      *(_QWORD *)(v106 + 16) = sub_10005CBAC;
      *(_QWORD *)(v106 + 24) = v98;
      v107 = swift_allocObject(&unk_101051450, 32, 7);
      *(_QWORD *)(v107 + 16) = sub_10005CBA4;
      *(_QWORD *)(v107 + 24) = v106;
      v108 = swift_allocObject(v237, 128, 7);
      sub_100882D28(v108, 6);
      *v109 = sub_10005CBC4;
      v109[1] = v100;
      v109[2] = sub_10005CBC4;
      v109[3] = v101;
      v109[4] = sub_10005CBB8;
      v109[5] = v103;
      v109[6] = sub_10005CBC4;
      v109[7] = v104;
      v109[8] = sub_10005CBC4;
      v109[9] = v105;
      v109[10] = sub_10005CBB4;
      v109[11] = v107;
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_bridgeObjectRelease();
      v239 = v99;
      if (os_log_type_enabled(v235, v99))
      {
        v15 = *(_QWORD *)(v0 + 6128);
        v110 = (uint8_t *)sub_1006948A0(22);
        v253 = 0;
        v254 = swift_slowAlloc(32, -1);
        v222 = v254;
        v228 = v110;
        *(_WORD *)v110 = 515;
        v252 = v110 + 2;
        v255 = sub_10005CBC4;
        v256 = v100;
        sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v255, (uint64_t)&v252, (uint64_t)&v253, (uint64_t)&v254);
        if (v15)
          return swift_errorRelease(v15);
        swift_release(v100);
        v255 = sub_10005CBC4;
        v256 = v101;
        sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v255, (uint64_t)&v252, (uint64_t)&v253, (uint64_t)&v254);
        swift_release(v101);
        v255 = (uint64_t (*)())sub_10005CBB8;
        v256 = v103;
        sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v255, (uint64_t)&v252, (uint64_t)&v253, (uint64_t)&v254);
        swift_release(v103);
        v255 = sub_10005CBC4;
        v256 = v104;
        sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v255, (uint64_t)&v252, (uint64_t)&v253, (uint64_t)&v254);
        swift_release(v104);
        v255 = sub_10005CBC4;
        v256 = v105;
        sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v255, (uint64_t)&v252, (uint64_t)&v253, (uint64_t)&v254);
        swift_release(v105);
        v255 = sub_10005CBB4;
        v256 = v107;
        sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v255, (uint64_t)&v252, (uint64_t)&v253, (uint64_t)&v254);
        v114 = *(void (**)(uint64_t, uint64_t))(v0 + 6024);
        v115 = *(_QWORD *)(v0 + 5640);
        v116 = *(_QWORD *)(v0 + 5608);
        swift_release(v107);
        _os_log_impl((void *)&_mh_execute_header, v235, v239, "Saved new beacon: %{private,mask.hash}s. Proceed to sending pairing complete.", v228, 0x16u);
        swift_arrayDestroy(v222, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v222, -1, -1);
        sub_100694894((uint64_t)v228);

      }
      else
      {
        v114 = *(void (**)(uint64_t, uint64_t))(v0 + 6024);
        v115 = *(_QWORD *)(v0 + 5640);
        v116 = *(_QWORD *)(v0 + 5608);

        swift_release(v107);
        swift_release(v105);
        swift_release(v104);
        swift_release(v103);
        swift_release(v101);
        swift_release(v100);
      }
      v114(v115, v116);
      v113 = (_QWORD *)(v0 + 5272);
      if ((sub_1003690A8() & 1) != 0)
        *(_BYTE *)(*(_QWORD *)(v0 + 5424) + 176) = 9;
      v117 = *(_QWORD *)(v0 + 5552);
      v118 = *(_QWORD *)(v0 + 5512);
      v119 = *(_QWORD *)(v0 + 5488);
      sub_1007BEC2C(v119);
      sub_1000126B0(v119, type metadata accessor for OwnedBeaconRecord);
      sub_1000126B0(v117, type metadata accessor for OwnedBeaconGroup);
      sub_1000126B0(v118, type metadata accessor for AirPodsLEPairingService.BeaconCreationResult);
    }
    v120 = *(_QWORD *)(v0 + 5984);
    v121 = *(_QWORD *)(v0 + 5968);
    v122 = *(_QWORD *)(v0 + 5960);
    v123 = *(_QWORD *)(v0 + 5952);
    *(_DWORD *)(v0 + 284) = sub_100058064();
    v124 = sub_1000588DC();
    v125 = FixedWidthInteger.data.getter(&type metadata for UInt32, v124);
    v127 = v126;
    swift_release(v120);
    sub_1000585AC(v243);
    sub_10005726C(v246, (void (*)(void))sub_10001BC14);
    sub_1000583DC(v249, (void (*)(uint64_t, uint64_t))sub_10001BC14);
    (*(void (**)(uint64_t, uint64_t))(v122 + 8))(v121, v123);
    *(_QWORD *)(v0 + 1608) = v125;
    *(_QWORD *)(v0 + 1616) = v127;
    sub_100058920(v0 + 1608);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v113);
    sub_100057230((const void *)(v0 + 1608), (void *)(v0 + 3720));
    v128 = *(_QWORD *)(v0 + 5968);
    v129 = *(_QWORD *)(v0 + 5944);
    v130 = *(_QWORD *)(v0 + 5936);
    v131 = *(_QWORD *)(v0 + 5928);
    v132 = *(_QWORD *)(v0 + 5920);
    v133 = *(_QWORD *)(v0 + 5912);
    v134 = *(_QWORD *)(v0 + 5904);
    v135 = *(_QWORD *)(v0 + 5896);
    v136 = *(_QWORD *)(v0 + 5888);
    v138 = *(_QWORD *)(v0 + 5880);
    v140 = *(_QWORD *)(v0 + 5872);
    v142 = *(_QWORD *)(v0 + 5864);
    v144 = *(_QWORD *)(v0 + 5856);
    v146 = *(_QWORD *)(v0 + 5848);
    v148 = *(_QWORD *)(v0 + 5840);
    v150 = *(_QWORD *)(v0 + 5832);
    v152 = *(_QWORD *)(v0 + 5824);
    v154 = *(_QWORD *)(v0 + 5816);
    v156 = *(_QWORD *)(v0 + 5808);
    v158 = *(_QWORD *)(v0 + 5800);
    v160 = *(_QWORD *)(v0 + 5792);
    v162 = *(_QWORD *)(v0 + 5784);
    v164 = *(_QWORD *)(v0 + 5776);
    v166 = *(_QWORD *)(v0 + 5768);
    v168 = *(_QWORD *)(v0 + 5760);
    v170 = *(_QWORD *)(v0 + 5752);
    v172 = *(_QWORD *)(v0 + 5744);
    v174 = *(_QWORD *)(v0 + 5736);
    v176 = *(_QWORD *)(v0 + 5728);
    v178 = *(_QWORD *)(v0 + 5720);
    v180 = *(_QWORD *)(v0 + 5712);
    v182 = *(_QWORD *)(v0 + 5704);
    v184 = *(_QWORD *)(v0 + 5696);
    v186 = *(_QWORD *)(v0 + 5688);
    v188 = *(_QWORD *)(v0 + 5680);
    v190 = *(_QWORD *)(v0 + 5672);
    v192 = *(_QWORD *)(v0 + 5664);
    v194 = *(_QWORD *)(v0 + 5656);
    v196 = *(_QWORD *)(v0 + 5648);
    v198 = *(_QWORD *)(v0 + 5640);
    v200 = *(_QWORD *)(v0 + 5632);
    v202 = *(_QWORD *)(v0 + 5624);
    v204 = *(_QWORD *)(v0 + 5600);
    v206 = *(_QWORD *)(v0 + 5592);
    v208 = *(_QWORD *)(v0 + 5584);
    v211 = *(_QWORD *)(v0 + 5576);
    v215 = *(_QWORD *)(v0 + 5568);
    v219 = *(_QWORD *)(v0 + 5560);
    v223 = *(_QWORD *)(v0 + 5552);
    v230 = *(uint8_t **)(v0 + 5528);
    v236 = *(NSObject **)(v0 + 5512);
    v240 = *(_QWORD *)(v0 + 5504);
    v242 = *(_QWORD *)(v0 + 5488);
    v245 = *(_QWORD *)(v0 + 5480);
    v248 = *(_QWORD *)(v0 + 5456);
    v251 = *(_QWORD *)(v0 + 5448);
    sub_100057230((const void *)(v0 + 3720), *(void **)(v0 + 5392));
    swift_task_dealloc(v128);
    swift_task_dealloc(v129);
    swift_task_dealloc(v130);
    swift_task_dealloc(v131);
    swift_task_dealloc(v132);
    swift_task_dealloc(v133);
    swift_task_dealloc(v134);
    swift_task_dealloc(v135);
    swift_task_dealloc(v136);
    swift_task_dealloc(v138);
    swift_task_dealloc(v140);
    swift_task_dealloc(v142);
    swift_task_dealloc(v144);
    swift_task_dealloc(v146);
    swift_task_dealloc(v148);
    swift_task_dealloc(v150);
    swift_task_dealloc(v152);
    swift_task_dealloc(v154);
    swift_task_dealloc(v156);
    swift_task_dealloc(v158);
    swift_task_dealloc(v160);
    swift_task_dealloc(v162);
    swift_task_dealloc(v164);
    swift_task_dealloc(v166);
    swift_task_dealloc(v168);
    swift_task_dealloc(v170);
    swift_task_dealloc(v172);
    swift_task_dealloc(v174);
    swift_task_dealloc(v176);
    swift_task_dealloc(v178);
    swift_task_dealloc(v180);
    swift_task_dealloc(v182);
    swift_task_dealloc(v184);
    swift_task_dealloc(v186);
    swift_task_dealloc(v188);
    swift_task_dealloc(v190);
    swift_task_dealloc(v192);
    swift_task_dealloc(v194);
    swift_task_dealloc(v196);
    swift_task_dealloc(v198);
    swift_task_dealloc(v200);
    swift_task_dealloc(v202);
    swift_task_dealloc(v204);
    swift_task_dealloc(v206);
    swift_task_dealloc(v208);
    swift_task_dealloc(v211);
    swift_task_dealloc(v215);
    swift_task_dealloc(v219);
    swift_task_dealloc(v223);
    swift_task_dealloc(v230);
    swift_task_dealloc(v236);
    swift_task_dealloc(v240);
    swift_task_dealloc(v242);
    swift_task_dealloc(v245);
    swift_task_dealloc(v248);
    swift_task_dealloc(v251);
    v86 = *(uint64_t (**)(void))(v0 + 8);
    return v86();
  }
  v2 = *(_QWORD *)(v0 + 6016);
  v3 = *v1;
  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 6008))(*(_QWORD *)(v0 + 5648), *(_QWORD *)(v0 + 6000), *(_QWORD *)(v0 + 5608));
  v4 = swift_allocObject(&unk_101050F78, 24, 7);
  *(_QWORD *)(v4 + 16) = v3;
  v5 = sub_10005856C(v3);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.error.getter(v6);
  v8 = swift_allocObject(&unk_101050FA0, 17, 7);
  *(_BYTE *)(v8 + 16) = 66;
  v9 = swift_allocObject(&unk_101050FC8, 17, 7);
  *(_BYTE *)(v9 + 16) = 8;
  v10 = swift_allocObject(&unk_101050FF0, 32, 7);
  *(_QWORD *)(v10 + 16) = sub_100058564;
  *(_QWORD *)(v10 + 24) = v4;
  v11 = swift_allocObject(&unk_101051018, 32, 7);
  *(_QWORD *)(v11 + 16) = sub_10005859C;
  *(_QWORD *)(v11 + 24) = v10;
  v12 = swift_allocObject(&unk_101051040, 32, 7);
  *(_QWORD *)(v12 + 16) = sub_10001D850;
  *(_QWORD *)(v12 + 24) = v11;
  v13 = swift_allocObject(v2, 80, 7);
  sub_100882D28(v13, 3);
  *v14 = sub_10005CBC4;
  v14[1] = v8;
  v14[2] = sub_10005CBC4;
  v14[3] = v9;
  v14[4] = sub_1000585A4;
  v14[5] = v12;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v6, v7))
  {
    v231 = v7;
    v15 = *(_QWORD *)(v0 + 6128);
    v16 = (uint8_t *)sub_1006948A0(12);
    v224 = swift_slowAlloc(8, -1);
    v253 = v224;
    v254 = 0;
    *(_WORD *)v16 = 258;
    v252 = v16 + 2;
    v255 = sub_10005CBC4;
    v256 = v8;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v255, (uint64_t)&v252, (uint64_t)&v253, (uint64_t)&v254);
    if (!v15)
    {
      swift_release(v8);
      v255 = sub_10005CBC4;
      v256 = v9;
      sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v255, (uint64_t)&v252, (uint64_t)&v253, (uint64_t)&v254);
      swift_release(v9);
      v255 = (uint64_t (*)())sub_1000585A4;
      v256 = v12;
      sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v255, (uint64_t)&v252, (uint64_t)&v253, (uint64_t)&v254);
      v17 = *(void (**)(uint64_t, uint64_t))(v0 + 6024);
      v18 = *(_QWORD *)(v0 + 5648);
      v19 = *(_QWORD *)(v0 + 5608);
      swift_release(v12);
      _os_log_impl((void *)&_mh_execute_header, v6, v231, "Failed to create new beacon. %{public}@", v16, 0xCu);
      v20 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
      swift_arrayDestroy(v224, 1, v20);
      swift_slowDealloc(v224, -1, -1);
      sub_100694894((uint64_t)v16);

      v17(v18, v19);
      goto LABEL_20;
    }
    return swift_errorRelease(v15);
  }
  v68 = *(void (**)(uint64_t, uint64_t))(v0 + 6024);
  v69 = *(_QWORD *)(v0 + 5648);
  v70 = *(_QWORD *)(v0 + 5608);

  swift_release(v12);
  swift_release(v9);
  swift_release(v8);
  v68(v69, v70);
LABEL_20:
  v71 = *(_QWORD *)(v0 + 5984);
  v72 = *(_QWORD *)(v0 + 5968);
  v73 = *(_QWORD *)(v0 + 5960);
  v74 = *(_QWORD *)(v0 + 5952);
  v75 = sub_100056FAC();
  v238 = swift_allocError(&type metadata for AirPodsLEPairingService.Error, v75, 0, 0);
  *v76 = 0x8000000000000007;
  swift_willThrow(v238);
  swift_release(v71);
  sub_1000585AC(v243);
  sub_10005726C(v246, (void (*)(void))sub_10001BC14);
  sub_100058554(v3);
  sub_1000583DC(v249, (void (*)(uint64_t, uint64_t))sub_10001BC14);
  (*(void (**)(uint64_t, uint64_t))(v73 + 8))(v72, v74);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 5272));
  v77 = *(_QWORD *)(v0 + 5944);
  v78 = *(_QWORD *)(v0 + 5936);
  v79 = *(_QWORD *)(v0 + 5928);
  v80 = *(_QWORD *)(v0 + 5920);
  v81 = *(_QWORD *)(v0 + 5912);
  v82 = *(_QWORD *)(v0 + 5904);
  v83 = *(_QWORD *)(v0 + 5896);
  v84 = *(_QWORD *)(v0 + 5888);
  v85 = *(_QWORD *)(v0 + 5880);
  v137 = *(_QWORD *)(v0 + 5872);
  v139 = *(_QWORD *)(v0 + 5864);
  v141 = *(_QWORD *)(v0 + 5856);
  v143 = *(_QWORD *)(v0 + 5848);
  v145 = *(_QWORD *)(v0 + 5840);
  v147 = *(_QWORD *)(v0 + 5832);
  v149 = *(_QWORD *)(v0 + 5824);
  v151 = *(_QWORD *)(v0 + 5816);
  v153 = *(_QWORD *)(v0 + 5808);
  v155 = *(_QWORD *)(v0 + 5800);
  v157 = *(_QWORD *)(v0 + 5792);
  v159 = *(_QWORD *)(v0 + 5784);
  v161 = *(_QWORD *)(v0 + 5776);
  v163 = *(_QWORD *)(v0 + 5768);
  v165 = *(_QWORD *)(v0 + 5760);
  v167 = *(_QWORD *)(v0 + 5752);
  v169 = *(_QWORD *)(v0 + 5744);
  v171 = *(_QWORD *)(v0 + 5736);
  v173 = *(_QWORD *)(v0 + 5728);
  v175 = *(_QWORD *)(v0 + 5720);
  v177 = *(_QWORD *)(v0 + 5712);
  v179 = *(_QWORD *)(v0 + 5704);
  v181 = *(_QWORD *)(v0 + 5696);
  v183 = *(_QWORD *)(v0 + 5688);
  v185 = *(_QWORD *)(v0 + 5680);
  v187 = *(_QWORD *)(v0 + 5672);
  v189 = *(_QWORD *)(v0 + 5664);
  v191 = *(_QWORD *)(v0 + 5656);
  v193 = *(_QWORD *)(v0 + 5648);
  v195 = *(_QWORD *)(v0 + 5640);
  v197 = *(_QWORD *)(v0 + 5632);
  v199 = *(_QWORD *)(v0 + 5624);
  v201 = *(_QWORD *)(v0 + 5600);
  v203 = *(_QWORD *)(v0 + 5592);
  v205 = *(_QWORD *)(v0 + 5584);
  v207 = *(_QWORD *)(v0 + 5576);
  v209 = *(_QWORD *)(v0 + 5568);
  v213 = *(_QWORD *)(v0 + 5560);
  v217 = *(_QWORD *)(v0 + 5552);
  v221 = *(_QWORD *)(v0 + 5528);
  v226 = *(uint8_t **)(v0 + 5512);
  v233 = *(NSObject **)(v0 + 5504);
  v241 = *(_QWORD *)(v0 + 5488);
  v244 = *(_QWORD *)(v0 + 5480);
  v247 = *(_QWORD *)(v0 + 5456);
  v250 = *(_QWORD *)(v0 + 5448);
  swift_task_dealloc(*(_QWORD *)(v0 + 5968));
  swift_task_dealloc(v77);
  swift_task_dealloc(v78);
  swift_task_dealloc(v79);
  swift_task_dealloc(v80);
  swift_task_dealloc(v81);
  swift_task_dealloc(v82);
  swift_task_dealloc(v83);
  swift_task_dealloc(v84);
  swift_task_dealloc(v85);
  swift_task_dealloc(v137);
  swift_task_dealloc(v139);
  swift_task_dealloc(v141);
  swift_task_dealloc(v143);
  swift_task_dealloc(v145);
  swift_task_dealloc(v147);
  swift_task_dealloc(v149);
  swift_task_dealloc(v151);
  swift_task_dealloc(v153);
  swift_task_dealloc(v155);
  swift_task_dealloc(v157);
  swift_task_dealloc(v159);
  swift_task_dealloc(v161);
  swift_task_dealloc(v163);
  swift_task_dealloc(v165);
  swift_task_dealloc(v167);
  swift_task_dealloc(v169);
  swift_task_dealloc(v171);
  swift_task_dealloc(v173);
  swift_task_dealloc(v175);
  swift_task_dealloc(v177);
  swift_task_dealloc(v179);
  swift_task_dealloc(v181);
  swift_task_dealloc(v183);
  swift_task_dealloc(v185);
  swift_task_dealloc(v187);
  swift_task_dealloc(v189);
  swift_task_dealloc(v191);
  swift_task_dealloc(v193);
  swift_task_dealloc(v195);
  swift_task_dealloc(v197);
  swift_task_dealloc(v199);
  swift_task_dealloc(v201);
  swift_task_dealloc(v203);
  swift_task_dealloc(v205);
  swift_task_dealloc(v207);
  swift_task_dealloc(v209);
  swift_task_dealloc(v213);
  swift_task_dealloc(v217);
  swift_task_dealloc(v221);
  swift_task_dealloc(v226);
  swift_task_dealloc(v233);
  swift_task_dealloc(v241);
  swift_task_dealloc(v244);
  swift_task_dealloc(v247);
  swift_task_dealloc(v250);
  v86 = *(uint64_t (**)(void))(v0 + 8);
  return v86();
}

uint64_t sub_10004E618()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  swift_release();
  sub_10001EF3C(*(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 168));
  swift_release();
  sub_100004048(v0 + 192, &qword_1010EC418);
  sub_100004048(v0 + 232, &qword_1010EC420);
  swift_defaultActor_destroy(v0);
  return v0;
}

uint64_t sub_10004E68C()
{
  uint64_t v0;

  sub_10004E618();
  return swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for AirPodsLEPairingService()
{
  return objc_opt_self(_TtC12searchpartyd23AirPodsLEPairingService);
}

uint64_t sub_10004E6C4()
{
  uint64_t v0;

  return swift_task_switch(sub_10004E6D8, v0, 0);
}

uint64_t sub_10004E6D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;

  if (qword_1010E98F0 != -1)
    swift_once(&qword_1010E98F0, sub_10003868C);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_10001A9E8(v1, (uint64_t)qword_1010EC1C8);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "AirPodsLEPairingService: Starting up.", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10004E7B4(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = sub_100006C64(&qword_1010EC410, a2, (uint64_t (*)(uint64_t))type metadata accessor for AirPodsLEPairingService, (uint64_t)&unk_100E229E4);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void *sub_10004E7F0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v27;
  char v28;
  uint64_t My;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  uint8_t *v39;
  uint64_t v40;
  _DWORD *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  NSObject *v50;
  os_log_type_t v51;
  uint8_t *v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t *v56;
  NSObject *v57;
  os_log_type_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  _DWORD *v64;
  uint8_t *buf;
  NSObject *log;
  char v67;
  uint64_t v68;
  uint64_t v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  _OWORD v88[6];
  unint64_t v89;

  v4 = *(_QWORD *)(v3 + 184);
  v5 = *(_QWORD *)(v4 + 48);
  if (v5 >> 60 == 15)
  {
    if (qword_1010E98F0 != -1)
      swift_once(&qword_1010E98F0, sub_10003868C);
    v6 = type metadata accessor for Logger(0);
    v7 = sub_10001A9E8(v6, (uint64_t)qword_1010EC1C8);
    v8 = Logger.logObject.getter(v7);
    v9 = static os_log_type_t.error.getter(v8);
    if (os_log_type_enabled(v8, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Missing E1 blob to generate init pairing.", v10, 2u);
      swift_slowDealloc(v10, -1, -1);
    }

    v11 = sub_100056FAC();
    v12 = swift_allocError(&type metadata for AirPodsLEPairingService.Error, v11, 0, 0);
    *v13 = 0x8000000000000000;
    return (void *)swift_willThrow(v12);
  }
  else
  {
    v15 = *(_QWORD *)(v4 + 40);
    v16 = (uint64_t *)(v4 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_findMyNetworkId);
    v17 = v16[1];
    if (v17 >> 60 == 15)
    {
      sub_10001BBBC(v15, v5);
      if (qword_1010E98F0 != -1)
        swift_once(&qword_1010E98F0, sub_10003868C);
      v18 = type metadata accessor for Logger(0);
      v19 = sub_10001A9E8(v18, (uint64_t)qword_1010EC1C8);
      v20 = Logger.logObject.getter(v19);
      v21 = static os_log_type_t.error.getter(v20);
      if (os_log_type_enabled(v20, v21))
      {
        v22 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v22 = 0;
        _os_log_impl((void *)&_mh_execute_header, v20, v21, "Missing FindMyNetworkId to generate init pairing.", v22, 2u);
        swift_slowDealloc(v22, -1, -1);
      }

      v23 = sub_100056FAC();
      v24 = swift_allocError(&type metadata for AirPodsLEPairingService.Error, v23, 0, 0);
      *v25 = 0x8000000000000000;
      swift_willThrow(v24);
      return (void *)sub_10001EF3C(v15, v5);
    }
    else
    {
      v89 = a2;
      v27 = *v16;
      if (*(_BYTE *)(v3 + 272) == 1)
      {
        sub_10001BD08(v15, v5);
        sub_10001BD08(v27, v17);
        v28 = 0;
      }
      else
      {
        My = type metadata accessor for Feature.FindMy(0);
        *((_QWORD *)&v84 + 1) = My;
        *(_QWORD *)&v85 = sub_100006C64((unint64_t *)&qword_1010EE1B0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for Feature.FindMy, (uint64_t)&protocol conformance descriptor for Feature.FindMy);
        v30 = sub_100018F08(&v83);
        (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(My - 8) + 104))(v30, enum case for Feature.FindMy.alphaWasp(_:), My);
        sub_10001BD08(v15, v5);
        sub_10001BD08(v27, v17);
        LOBYTE(My) = isFeatureEnabled(_:)(&v83);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v83);
        v28 = My & 1;
      }
      v31 = *(_QWORD *)(v3 + 184);
      v32 = *(_QWORD *)(v31 + 16);
      v33 = *(_QWORD *)(v31 + 24);
      v67 = v28;
      LOBYTE(v83) = v28;
      sub_10001BD08(v15, v5);
      sub_10001BD08(v27, v17);
      sub_10001BBBC(v32, v33);
      v68 = v3;
      sub_10001BBBC(a1, v89);
      v34 = sub_100059570();
      FixedWidthInteger.data.getter(&type metadata for UInt8, v34);
      v75 = v27;
      v69 = a1;
      sub_1007311FC(v32, v33);
      v73 = v88[1];
      v74 = v88[0];
      v71 = v88[3];
      v72 = v88[2];
      v70 = v88[4];
      if (qword_1010E98F0 != -1)
        swift_once(&qword_1010E98F0, sub_10003868C);
      v35 = type metadata accessor for Logger(0);
      sub_10001A9E8(v35, (uint64_t)qword_1010EC1C8);
      v36 = swift_retain_n(v3, 2);
      v37 = Logger.logObject.getter(v36);
      v38 = static os_log_type_t.default.getter(v37);
      v78 = v15;
      v79 = v5;
      v76 = v17;
      if (os_log_type_enabled(v37, v38))
      {
        log = v37;
        v39 = (uint8_t *)swift_slowAlloc(12, -1);
        v40 = swift_slowAlloc(32, -1);
        *(_DWORD *)v39 = 136315138;
        v41 = v39 + 12;
        *(_QWORD *)&v83 = v40;
        v64 = v39 + 4;
        buf = v39;
        v42 = *(_QWORD *)(v3 + 184);
        v43 = *(_QWORD *)(v42 + 16);
        v44 = *(_QWORD *)(v42 + 24);
        sub_10001BBBC(v43, v44);
        v45 = Data.hexString.getter(v43, v44);
        v47 = v46;
        sub_10001BC14(v43, v44);
        v80 = sub_100016940(v45, v47, (uint64_t *)&v83);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v80, &v81, v64, v41);
        swift_bridgeObjectRelease();
        swift_release_n(v68, 2);
        v37 = log;
        _os_log_impl((void *)&_mh_execute_header, log, v38, "sessionNonce: %s", buf, 0xCu);
        swift_arrayDestroy(v40, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v40, -1, -1);
        swift_slowDealloc(buf, -1, -1);
      }
      else
      {
        swift_release_n(v3, 2);
      }

      v48 = v89;
      sub_10001BBBC(v69, v89);
      v49 = sub_10001BBBC(v69, v48);
      v50 = Logger.logObject.getter(v49);
      v51 = static os_log_type_t.default.getter(v50);
      if (os_log_type_enabled(v50, v51))
      {
        v52 = (uint8_t *)swift_slowAlloc(12, -1);
        v53 = swift_slowAlloc(32, -1);
        *(_QWORD *)&v83 = v53;
        *(_DWORD *)v52 = 136315138;
        v54 = Data.hexString.getter(v69, v48);
        v80 = sub_100016940(v54, v55, (uint64_t *)&v83);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v80, &v81, v52 + 4, v52 + 12);
        swift_bridgeObjectRelease();
        sub_10001BC14(v69, v48);
        sub_10001BC14(v69, v48);
        _os_log_impl((void *)&_mh_execute_header, v50, v51, "companionSessionNonce: %s", v52, 0xCu);
        swift_arrayDestroy(v53, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v53, -1, -1);
        swift_slowDealloc(v52, -1, -1);
      }
      else
      {
        sub_10001BC14(v69, v48);
        sub_10001BC14(v69, v48);
      }

      v83 = v74;
      v84 = v73;
      v85 = v72;
      v86 = v71;
      v87 = v70;
      sub_1000595B4((uint64_t)&v83);
      sub_10001BD08(v75, v76);
      sub_10001BD08(v75, v76);
      v56 = sub_10005A4CC((uint64_t *)v88, (void (*)(uint64_t, uint64_t))sub_10001BBBC, (void (*)(uint64_t, uint64_t))sub_10001BBBC);
      v57 = Logger.logObject.getter(v56);
      v58 = static os_log_type_t.default.getter(v57);
      if (os_log_type_enabled(v57, v58))
      {
        v59 = swift_slowAlloc(25, -1);
        v60 = swift_slowAlloc(32, -1);
        v82 = v60;
        *(_DWORD *)v59 = 141558531;
        v80 = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v80, &v81, v59 + 4, v59 + 12);
        *(_WORD *)(v59 + 12) = 2081;
        v80 = v75;
        v81 = v76;
        v61 = sub_100059684();
        v62 = RawRepresentable<>.hexString.getter(&type metadata for FindMyNetworkId, v61);
        v80 = sub_100016940(v62, v63, &v82);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v80, &v81, v59 + 14, v59 + 22);
        swift_bridgeObjectRelease();
        sub_10001EF3C(v75, v76);
        sub_10001EF3C(v75, v76);
        *(_WORD *)(v59 + 22) = 256;
        LOBYTE(v80) = v67;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v80, (char *)&v80 + 1, v59 + 24, v59 + 25);
        _os_log_impl((void *)&_mh_execute_header, v57, v58, "generateInitPairingPayload request success: fmNetworkId: %{private,mask.hash}s, accountHint: %hhu.", (uint8_t *)v59, 0x19u);
        swift_arrayDestroy(v60, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v60, -1, -1);
        swift_slowDealloc(v59, -1, -1);
        sub_10001EF3C(v78, v79);

        sub_10001EF3C(v75, v76);
        sub_10005A4CC((uint64_t *)v88, (void (*)(uint64_t, uint64_t))sub_10001BC14, (void (*)(uint64_t, uint64_t))sub_10001BC14);
      }
      else
      {
        sub_10005A4CC((uint64_t *)v88, (void (*)(uint64_t, uint64_t))sub_10001BC14, (void (*)(uint64_t, uint64_t))sub_10001BC14);
        sub_10001EF3C(v75, v76);
        sub_10001EF3C(v75, v76);
        sub_10001BC14(v75, v76);
        sub_10001EF3C(v78, v79);

      }
      return sub_100057230(&v83, a3);
    }
  }
}

uint64_t sub_10004F110(uint64_t a1)
{
  uint64_t v1;
  _BYTE v3[48];

  sub_100057DB8(a1, (uint64_t)v3);
  v1 = sub_10001A9A8(&qword_1010EC530);
  return String.init<A>(describing:)(v3, v1);
}

uint64_t sub_10004F148(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD v7[4];

  v7[0] = a1;
  v7[1] = a2;
  v7[2] = a3;
  v7[3] = a4;
  sub_10001BBBC(a1, a2);
  sub_10001BBBC(a3, a4);
  return String.init<A>(describing:)(v7, &type metadata for AirPodsSendBeaconGroupDataCommandPayload);
}

void sub_10004F198(uint64_t a1)
{
  __int128 v1;
  _BYTE v2[16];
  _BYTE v3[8];

  v1 = *(_OWORD *)(a1 + 80);
  sub_100059F58((uint64_t)&v1, (uint64_t)v2);
  sub_100059F58((uint64_t)v2, (uint64_t)v3);
  __asm { BR              X11 }
}

uint64_t sub_10004F1E8@<X0>(uint64_t a1@<X8>)
{
  return BYTE6(a1);
}

void sub_10004F248(uint64_t a1)
{
  __int128 v1;
  _BYTE v2[16];
  _BYTE v3[8];

  v1 = *(_OWORD *)(a1 + 160);
  sub_100059F58((uint64_t)&v1, (uint64_t)v2);
  sub_100059F58((uint64_t)v2, (uint64_t)v3);
  __asm { BR              X11 }
}

uint64_t sub_10004F298@<X0>(uint64_t a1@<X8>)
{
  return BYTE6(a1);
}

_QWORD *sub_10004F2F8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t *v3;
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return _swiftEmptyArrayStorage;
  swift_bridgeObjectRetain(a1);
  v3 = (unint64_t *)(v2 + 40);
  v4 = _swiftEmptyArrayStorage;
  do
  {
    v5 = *(v3 - 1);
    v6 = *v3;
    sub_10001BBBC(v5, *v3);
    v7 = sub_100035530();
    if ((DataProtocol.isNull.getter(&type metadata for Data, v7) & 1) != 0)
    {
      sub_10001BC14(v5, v6);
    }
    else
    {
      v8 = Data.trimmed.getter(v5, v6);
      v10 = v9;
      sub_10001BC14(v5, v6);
      if ((swift_isUniquelyReferenced_nonNull_native(v4) & 1) == 0)
        v4 = sub_1007C78E0(0, v4[2] + 1, 1, v4);
      v12 = v4[2];
      v11 = v4[3];
      if (v12 >= v11 >> 1)
        v4 = sub_1007C78E0((_QWORD *)(v11 > 1), v12 + 1, 1, v4);
      v4[2] = v12 + 1;
      v13 = &v4[2 * v12];
      v13[4] = v8;
      v13[5] = v10;
    }
    v3 += 2;
    --v1;
  }
  while (v1);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_10004F450()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35[4];
  _QWORD *v36;

  v36 = &_swiftEmptyDictionarySingleton;
  *(_OWORD *)v35 = *(_OWORD *)(v0 + 16);
  v1 = sub_100035530();
  v2 = DataProtocol.intValue.getter(&type metadata for Data, v1);
  if (qword_1010EA318 != -1)
    swift_once(&qword_1010EA318, sub_100B5E330);
  v3 = type metadata accessor for Logger(0);
  v4 = sub_10001A9E8(v3, (uint64_t)qword_1011B7DF8);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.default.getter(v5);
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v7 = 134349056;
    v35[0] = v2;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v35, &v35[1], v7 + 4, v7 + 12);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Number of beacons: %{public}ld", v7, 0xCu);
    swift_slowDealloc(v7, -1, -1);
  }

  if (v2 < 2)
    return (uint64_t)v36;
  v8 = Data.chunked(into:)(20, *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56));
  v9 = *(_QWORD *)(v8 + 16);
  if (v9)
  {
    v10 = (__int128 *)(v8 + 32);
    do
    {
      v11 = *v10++;
      *(_OWORD *)v35 = v11;
      sub_100056AC8(v35);
      --v9;
    }
    while (v9);
  }
  v12 = swift_bridgeObjectRelease();
  v13 = v36[2];
  v14 = Logger.logObject.getter(v12);
  v15 = v14;
  if (v13 == v2 - 1)
  {
    v16 = static os_log_type_t.default.getter(v14);
    if (os_log_type_enabled(v15, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc(12, -1);
      v18 = swift_slowAlloc(32, -1);
      v35[0] = v18;
      *(_DWORD *)v17 = 136315138;
      swift_beginAccess(&v36, &v33, 0, 0);
      v19 = v36;
      swift_bridgeObjectRetain(v36);
      v20 = sub_10001A9A8((uint64_t *)&unk_1010F9890);
      v21 = sub_100059BCC();
      v22 = Dictionary.description.getter(v19, &type metadata for OwnedBeaconGroup.SerialNumber, v20, v21);
      v24 = v23;
      swift_bridgeObjectRelease();
      v32 = sub_100016940(v22, v24, v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, &v33, v17 + 4, v17 + 12);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "serialNumbersAndMacAddressesMap: %s", v17, 0xCu);
      swift_arrayDestroy(v18, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v18, -1, -1);
      swift_slowDealloc(v17, -1, -1);
    }

    swift_beginAccess(&v36, v35, 0, 0);
    return (uint64_t)v36;
  }
  v26 = static os_log_type_t.error.getter(v14);
  if (os_log_type_enabled(v15, v26))
  {
    v27 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v27 = 134349056;
    swift_beginAccess(&v36, v35, 0, 0);
    v33 = v36[2];
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, &v34, v27 + 4, v27 + 12);
    _os_log_impl((void *)&_mh_execute_header, v15, v26, "Unexpected number of other serial numbers: %{public}ld", v27, 0xCu);
    swift_slowDealloc(v27, -1, -1);
  }

  v28 = type metadata accessor for BinaryEncodingError(0);
  v29 = sub_100006C64((unint64_t *)&qword_1010EC000, 255, (uint64_t (*)(uint64_t))&type metadata accessor for BinaryEncodingError, (uint64_t)&protocol conformance descriptor for BinaryEncodingError);
  swift_allocError(v28, v29, 0, 0);
  v31 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v28 - 8) + 104))(v30, enum case for BinaryEncodingError.encodingError(_:), v28);
  swift_willThrow(v31);
  return swift_bridgeObjectRelease();
}

uint64_t sub_10004F894(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = a1;
  swift_errorRetain(a1);
  v1 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
  return String.init<A>(describing:)(&v3, v1);
}

uint64_t sub_10004F8CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v4[306] = v3;
  v4[305] = a3;
  v4[304] = a2;
  v4[303] = a1;
  v5 = (*(_QWORD *)(*(_QWORD *)(sub_10001A9A8(&qword_1010ED860) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[307] = swift_task_alloc(v5);
  v4[308] = swift_task_alloc(v5);
  v6 = type metadata accessor for AirPodsSWPairingLockCheckResponse(0);
  v4[309] = v6;
  v7 = (*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[310] = swift_task_alloc(v7);
  v4[311] = swift_task_alloc(v7);
  v4[312] = swift_task_alloc(v7);
  v8 = sub_10001A9A8(&qword_1010EC588);
  v4[313] = v8;
  v4[314] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for OwnedBeaconGroup.PairingState(0);
  v4[315] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v4[316] = v10;
  v11 = (*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[317] = swift_task_alloc(v11);
  v4[318] = swift_task_alloc(v11);
  v12 = sub_10001A9A8(&qword_1010EBFF8);
  v4[319] = v12;
  v13 = (*(_QWORD *)(*(_QWORD *)(v12 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[320] = swift_task_alloc(v13);
  v4[321] = swift_task_alloc(v13);
  v4[322] = swift_task_alloc(v13);
  v4[323] = swift_task_alloc(v13);
  v4[324] = swift_task_alloc(v13);
  v4[325] = swift_task_alloc(v13);
  v14 = type metadata accessor for HashAlgorithm(0);
  v4[326] = v14;
  v15 = *(_QWORD *)(v14 - 8);
  v4[327] = v15;
  v4[328] = swift_task_alloc((*(_QWORD *)(v15 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for MACAddress(0);
  v4[329] = v16;
  v17 = *(_QWORD *)(v16 - 8);
  v4[330] = v17;
  v18 = *(_QWORD *)(v17 + 64);
  v4[331] = v18;
  v4[332] = swift_task_alloc((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_10001A9A8((uint64_t *)&unk_1010FF7F0);
  v4[333] = v19;
  v4[334] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v19 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10004FAC8, v3, 0);
}

uint64_t sub_10004FAC8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  _QWORD *v4;
  uint64_t (__cdecl *v5)();

  v1 = qword_1010EA5B0;
  swift_retain();
  if (v1 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v0 + 2304, 0, 0);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 1936, &qword_1010EE220);
  if (*(_QWORD *)(v0 + 1960))
  {
    v3 = *(_QWORD *)(v0 + 2448);
    sub_10000F9FC((__int128 *)(v0 + 1936), v0 + 2056);
    swift_release(v3);
    sub_10001AA44((_QWORD *)(v0 + 2056), *(_QWORD *)(v0 + 2080));
    v5 = (uint64_t (__cdecl *)())((char *)&dword_1010EBB40 + dword_1010EBB40);
    v4 = (_QWORD *)swift_task_alloc(unk_1010EBB44);
    *(_QWORD *)(v0 + 2680) = v4;
    *v4 = v0;
    v4[1] = sub_10004FBC8;
    return v5();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10004FBC8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 2680);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 2448);
  *(_QWORD *)(*(_QWORD *)v1 + 2688) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10004FC28, v3, 0);
}

uint64_t sub_10004FC28()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  unint64_t v13;
  const char *v14;
  unint64_t v15;
  uint64_t v16;
  char v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint8_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;

  v1 = (_QWORD *)(v0 + 2056);
  v2 = *(_QWORD *)(v0 + 2688);
  if (!v2)
  {
    v12 = *(_QWORD *)(v0 + 2424);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    v15 = sub_100033220();
    v16 = swift_allocError(&type metadata for DaemonError, v15, 0, 0);
    v17 = 0;
    *v18 = 0xD000000000000010;
    v18[1] = 0x8000000100EC6470;
    *(_QWORD *)v12 = v16;
LABEL_20:
    *(_BYTE *)(v12 + 40) = v17;
    *(_BYTE *)(v12 + 264) = 1;
    v39 = *(_QWORD *)(v0 + 2656);
    v40 = *(_QWORD *)(v0 + 2624);
    v41 = *(_QWORD *)(v0 + 2600);
    v42 = *(_QWORD *)(v0 + 2592);
    v43 = *(_QWORD *)(v0 + 2584);
    v44 = *(_QWORD *)(v0 + 2576);
    v45 = *(_QWORD *)(v0 + 2568);
    v46 = *(_QWORD *)(v0 + 2560);
    v47 = *(_QWORD *)(v0 + 2544);
    v49 = *(_QWORD *)(v0 + 2536);
    v50 = *(_QWORD *)(v0 + 2512);
    v51 = *(_QWORD *)(v0 + 2496);
    v53 = *(_QWORD *)(v0 + 2488);
    v54 = *(_QWORD *)(v0 + 2480);
    v56 = *(_QWORD *)(v0 + 2464);
    v58 = *(_QWORD *)(v0 + 2456);
    swift_task_dealloc(*(_QWORD *)(v0 + 2672));
    swift_task_dealloc(v39);
    swift_task_dealloc(v40);
    swift_task_dealloc(v41);
    swift_task_dealloc(v42);
    swift_task_dealloc(v43);
    swift_task_dealloc(v44);
    swift_task_dealloc(v45);
    swift_task_dealloc(v46);
    swift_task_dealloc(v47);
    swift_task_dealloc(v49);
    swift_task_dealloc(v50);
    swift_task_dealloc(v51);
    swift_task_dealloc(v53);
    swift_task_dealloc(v54);
    swift_task_dealloc(v56);
    swift_task_dealloc(v58);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v3 = *(_QWORD *)(v0 + 2448);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
  v4 = (uint64_t *)(*(_QWORD *)(v3 + 184) + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_collaborativeKeyC1);
  v5 = *v4;
  *(_QWORD *)(v0 + 2696) = *v4;
  v6 = v4[1];
  *(_QWORD *)(v0 + 2704) = v6;
  if (v6 >> 60 == 15)
  {
    if (qword_1010E98F0 != -1)
      swift_once(&qword_1010E98F0, sub_10003868C);
    v7 = type metadata accessor for Logger(0);
    v8 = sub_10001A9E8(v7, (uint64_t)qword_1010EC1C8);
    v9 = Logger.logObject.getter(v8);
    v10 = static os_log_type_t.error.getter(v9);
    if (os_log_type_enabled(v9, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Missing C1 from accessory!", v11, 2u);
      swift_slowDealloc(v11, -1, -1);
    }
    v12 = *(_QWORD *)(v0 + 2424);

    swift_release(v2);
    v13 = 0xD00000000000001ALL;
    v14 = "BeaconStoreActor";
LABEL_19:
    *(_QWORD *)v12 = v13;
    *(_QWORD *)(v12 + 8) = (unint64_t)v14 | 0x8000000000000000;
    v17 = 9;
    goto LABEL_20;
  }
  sub_10001BBBC(v5, v6);
  sub_100054CEC(v5, v6, (_QWORD *)(v0 + 1816));
  if (!*(_QWORD *)(v0 + 1840))
  {
    sub_100004048(v0 + 1816, &qword_1010EC590);
    if (qword_1010E98F0 != -1)
      swift_once(&qword_1010E98F0, sub_10003868C);
    v34 = type metadata accessor for Logger(0);
    v35 = sub_10001A9E8(v34, (uint64_t)qword_1010EC1C8);
    v36 = Logger.logObject.getter(v35);
    v37 = static os_log_type_t.error.getter(v36);
    if (os_log_type_enabled(v36, v37))
    {
      v38 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v38 = 0;
      _os_log_impl((void *)&_mh_execute_header, v36, v37, "collaborativeKeyC2 generation error.", v38, 2u);
      swift_slowDealloc(v38, -1, -1);
    }
    v12 = *(_QWORD *)(v0 + 2424);

    sub_10001EF3C(v5, v6);
    swift_release(v2);
    v13 = 0xD000000000000026;
    v14 = "Missing C1 from accessory!";
    goto LABEL_19;
  }
  v57 = (_QWORD *)(v0 + 1896);
  v52 = *(_QWORD *)(v0 + 2448);
  sub_10000F9FC((__int128 *)(v0 + 1816), v0 + 1976);
  sub_10000F9FC((__int128 *)(v0 + 1856), v0 + 2016);
  v19 = *(_QWORD *)(v3 + 184);
  sub_100030784(v0 + 1976, v0 + 2096);
  sub_100005CF0(v0 + 2096, v0 + 2136, &qword_1010EC598);
  v20 = v19 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_collaborativeKeyC2;
  swift_beginAccess(v19 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_collaborativeKeyC2, v0 + 2256, 33, 0);
  swift_retain();
  sub_100004084(v0 + 2136, v20, &qword_1010EC598);
  swift_endAccess(v0 + 2256);
  swift_release(v19);
  sub_100030784(v0 + 2016, v0 + 2216);
  sub_100005CF0(v0 + 2216, v0 + 2176, &qword_1010EC418);
  swift_beginAccess(v52 + 192, v0 + 2280, 33, 0);
  sub_100004084(v0 + 2176, v52 + 192, &qword_1010EC418);
  swift_endAccess(v0 + 2280);
  if (qword_1010E98F0 != -1)
    swift_once(&qword_1010E98F0, sub_10003868C);
  v21 = type metadata accessor for Logger(0);
  *(_QWORD *)(v0 + 2712) = sub_10001A9E8(v21, (uint64_t)qword_1010EC1C8);
  v22 = sub_100030784(v0 + 1976, (uint64_t)v57);
  v23 = Logger.logObject.getter(v22);
  v24 = static os_log_type_t.debug.getter(v23);
  if (os_log_type_enabled(v23, v24))
  {
    v25 = (uint8_t *)swift_slowAlloc(12, -1);
    v55 = swift_slowAlloc(32, -1);
    v59 = v55;
    *(_DWORD *)v25 = 136315138;
    v26 = *(_QWORD *)(v0 + 1920);
    v27 = *(_QWORD *)(v0 + 1928);
    sub_10001AA44(v57, v26);
    v28 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v27 + 8) + 8) + 40))(v26);
    v30 = v29;
    v31 = Data.hexString.getter(v28, v29);
    v33 = v32;
    sub_10001BC14(v28, v30);
    *(_QWORD *)(v0 + 2416) = sub_100016940(v31, v33, &v59);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 2416, v0 + 2424, v25 + 4, v25 + 12);
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v57);
    _os_log_impl((void *)&_mh_execute_header, v23, v24, "C2: %s", v25, 0xCu);
    swift_arrayDestroy(v55, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v55, -1, -1);
    swift_slowDealloc(v25, -1, -1);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v57);
  }

  return swift_task_switch(sub_1000502E4, *(_QWORD *)(v0 + 2688), 0);
}

uint64_t sub_1000502E4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v1 = v0[336];
  v2 = v0[332];
  v3 = v0[331];
  v4 = v0[330];
  v5 = v0[329];
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v4 + 16))(v2, v0[305], v5);
  v6 = *(unsigned __int8 *)(v4 + 80);
  v7 = (v6 + 24) & ~v6;
  v8 = swift_allocObject(&unk_1010528A0, v7 + v3, v6 | 7);
  v0[340] = v8;
  *(_QWORD *)(v8 + 16) = v1;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v8 + v7, v2, v5);
  v9 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v10 = (_QWORD *)swift_task_alloc(v9);
  v0[341] = v10;
  *v10 = v0;
  v10[1] = sub_1000503C8;
  return unsafeBlocking<A>(_:)(v0[334], sub_1000596CC, v8, v0[333]);
}

uint64_t sub_1000503C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 2720);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 2448);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 2728));
  swift_release(v1);
  return swift_task_switch(sub_10005042C, v2, 0);
}

uint64_t sub_10005042C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t result;
  int64_t v28;
  uint64_t v29;
  unint64_t v30;
  int64_t v31;
  unint64_t v32;
  int64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  _BYTE *v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v56;
  unint64_t v57;
  uint64_t v58;
  _BOOL8 v59;
  char v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  BOOL v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  NSObject *v73;
  os_log_type_t v74;
  uint8_t *v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  _QWORD *v90;
  uint64_t v91;
  int64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  int64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t *v110;
  uint64_t v111;
  uint64_t *v112;
  uint64_t v113;
  uint64_t *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  _QWORD *v124;

  v90 = (_QWORD *)(v0 + 1976);
  v1 = *(_QWORD *)(v0 + 2672);
  v2 = type metadata accessor for OwnedBeaconGroup(0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(v1, 1, v2) == 1)
  {
    sub_100004048(v1, (uint64_t *)&unk_1010FF7F0);
    v3 = 0;
  }
  else
  {
    v3 = *(_QWORD **)(v1 + *(int *)(v2 + 40));
    swift_bridgeObjectRetain(v3);
    sub_1000126B0(v1, type metadata accessor for OwnedBeaconGroup);
  }
  v4 = swift_bridgeObjectRetain_n(v3, 2);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.default.getter(v5);
  v104 = v0;
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(12, -1);
    v8 = swift_slowAlloc(32, -1);
    v124 = (_QWORD *)v8;
    *(_DWORD *)v7 = 136315138;
    *(_QWORD *)(v0 + 2400) = v3;
    swift_bridgeObjectRetain(v3);
    v9 = sub_10001A9A8(&qword_1010EC5C0);
    v10 = String.init<A>(describing:)(v0 + 2400, v9);
    *(_QWORD *)(v0 + 2408) = sub_100016940(v10, v11, (uint64_t *)&v124);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 2408, v0 + 2416, v7 + 4, v7 + 12);
    swift_bridgeObjectRelease_n(v3, 2);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Existing beaconMap: %s", v7, 0xCu);
    swift_arrayDestroy(v8, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v7, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v3, 2);
  }
  v12 = *(_QWORD *)(v0 + 2624);
  v13 = *(_QWORD *)(v0 + 2616);
  v14 = *(_QWORD *)(v0 + 2608);
  v15 = *(_QWORD *)(v0 + 2000);
  v16 = *(_QWORD *)(v0 + 2008);
  sub_10001AA44(v90, v15);
  v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v16 + 8) + 8) + 40))(v15);
  v19 = v18;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v13 + 104))(v12, enum case for HashAlgorithm.sha256(_:), v14);
  v20 = Data.hash(algorithm:)(v12, v17, v19);
  v22 = v21;
  *(_QWORD *)(v0 + 2736) = v20;
  *(_QWORD *)(v0 + 2744) = v21;
  sub_10001BC14(v17, v19);
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v14);
  if (v3)
  {
LABEL_43:
    v68 = *(_QWORD **)(v0 + 2448);
    v69 = v68[23];
    v70 = v68[20];
    v71 = v68[21];
    swift_retain();
    sub_10001BD08(v70, v71);
    sub_100B618C4(v20, v22, v70, v71, (uint64_t)v3, v0 + 688);
    swift_bridgeObjectRelease();
    sub_10001EF3C(v70, v71);
    swift_release(v69);
    sub_100005CF0(v0 + 688, v0 + 352, &qword_1010EC5A0);
    v72 = sub_100059714(v0 + 352);
    if ((_DWORD)v72 == 1)
    {
      v73 = Logger.logObject.getter(v72);
      v74 = static os_log_type_t.error.getter(v73);
      if (os_log_type_enabled(v73, v74))
      {
        v75 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v75 = 0;
        _os_log_impl((void *)&_mh_execute_header, v73, v74, "Unable to create pairing check data.", v75, 2u);
        swift_slowDealloc(v75, -1, -1);
      }
      v76 = *(_QWORD *)(v0 + 2704);
      v77 = *(_QWORD *)(v0 + 2696);
      v78 = *(_QWORD *)(v0 + 2688);
      v79 = *(_QWORD *)(v0 + 2424);

      sub_10001BC14(v20, v22);
      sub_10001EF3C(v77, v76);
      swift_release(v78);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 2016));
      *(_QWORD *)v79 = 0xD00000000000001ALL;
      *(_QWORD *)(v79 + 8) = 0x8000000100EC64E0;
      *(_BYTE *)(v79 + 40) = 9;
      *(_BYTE *)(v79 + 264) = 1;
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v90);
      v80 = *(_QWORD *)(v0 + 2656);
      v81 = *(_QWORD *)(v0 + 2624);
      v82 = *(_QWORD *)(v0 + 2600);
      v83 = *(_QWORD *)(v0 + 2592);
      v84 = *(_QWORD *)(v0 + 2584);
      v85 = *(_QWORD *)(v0 + 2576);
      v86 = *(_QWORD *)(v0 + 2568);
      v87 = *(_QWORD *)(v0 + 2560);
      v88 = *(_QWORD *)(v0 + 2544);
      v111 = *(_QWORD *)(v0 + 2536);
      v113 = *(_QWORD *)(v0 + 2512);
      v115 = *(_QWORD *)(v0 + 2496);
      v117 = *(_QWORD *)(v0 + 2488);
      v119 = *(_QWORD *)(v0 + 2480);
      v121 = *(_QWORD *)(v0 + 2464);
      v123 = *(_QWORD *)(v0 + 2456);
      swift_task_dealloc(*(_QWORD *)(v0 + 2672));
      swift_task_dealloc(v80);
      swift_task_dealloc(v81);
      swift_task_dealloc(v82);
      swift_task_dealloc(v83);
      swift_task_dealloc(v84);
      swift_task_dealloc(v85);
      swift_task_dealloc(v86);
      swift_task_dealloc(v87);
      swift_task_dealloc(v88);
      swift_task_dealloc(v111);
      swift_task_dealloc(v113);
      swift_task_dealloc(v115);
      swift_task_dealloc(v117);
      swift_task_dealloc(v119);
      swift_task_dealloc(v121);
      swift_task_dealloc(v123);
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
    else
    {
      memcpy((void *)(v0 + 16), (const void *)(v0 + 352), 0x150uLL);
      v89 = (_QWORD *)swift_task_alloc(dword_1010EC5AC);
      *(_QWORD *)(v0 + 2752) = v89;
      *v89 = v0;
      v89[1] = sub_100050EF0;
      return sub_100053F84(*(_QWORD *)(v0 + 2512), v0 + 16);
    }
  }
  v101 = *(_QWORD *)(v0 + 2592);
  v102 = *(_QWORD *)(v0 + 2600);
  v99 = *(_QWORD *)(v0 + 2576);
  v100 = *(_QWORD *)(v0 + 2584);
  v97 = *(_QWORD *)(v0 + 2560);
  v98 = *(_QWORD *)(v0 + 2568);
  v96 = *(_QWORD *)(v0 + 2552);
  v23 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v0 + 2448) + 184)
                  + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_allSerialNumbersAndPartIds);
  v91 = v23 + 64;
  v95 = *(_QWORD *)(v0 + 2528);
  v24 = -1;
  v25 = -1 << *(_BYTE *)(v23 + 32);
  if (-v25 < 64)
    v24 = ~(-1 << -(char)v25);
  v26 = v24 & *(_QWORD *)(v23 + 64);
  v92 = (unint64_t)(63 - v25) >> 6;
  v103 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v0 + 2448) + 184)
                   + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_allSerialNumbersAndPartIds);
  result = swift_bridgeObjectRetain_n(v23, 2);
  v28 = 0;
  v3 = &_swiftEmptyDictionarySingleton;
  v93 = v20;
  v94 = v22;
  while (1)
  {
    v120 = (uint64_t)v3;
    if (v26)
    {
      v106 = (v26 - 1) & v26;
      v107 = v28;
      v30 = __clz(__rbit64(v26)) | (v28 << 6);
    }
    else
    {
      v31 = v28 + 1;
      if (__OFADD__(v28, 1))
        goto LABEL_51;
      if (v31 >= v92)
      {
LABEL_42:
        swift_release(v103);
        swift_bridgeObjectRelease();
        goto LABEL_43;
      }
      v32 = *(_QWORD *)(v91 + 8 * v31);
      v33 = v28 + 1;
      if (!v32)
      {
        v33 = v28 + 2;
        if (v28 + 2 >= v92)
          goto LABEL_42;
        v32 = *(_QWORD *)(v91 + 8 * v33);
        if (!v32)
        {
          v33 = v28 + 3;
          if (v28 + 3 >= v92)
            goto LABEL_42;
          v32 = *(_QWORD *)(v91 + 8 * v33);
          if (!v32)
          {
            v33 = v28 + 4;
            if (v28 + 4 >= v92)
              goto LABEL_42;
            v32 = *(_QWORD *)(v91 + 8 * v33);
            if (!v32)
            {
              v34 = v28 + 5;
              if (v28 + 5 >= v92)
                goto LABEL_42;
              v32 = *(_QWORD *)(v91 + 8 * v34);
              if (!v32)
              {
                while (1)
                {
                  v33 = v34 + 1;
                  if (__OFADD__(v34, 1))
                    goto LABEL_52;
                  if (v33 >= v92)
                    goto LABEL_42;
                  v32 = *(_QWORD *)(v91 + 8 * v33);
                  ++v34;
                  if (v32)
                    goto LABEL_30;
                }
              }
              v33 = v28 + 5;
            }
          }
        }
      }
LABEL_30:
      v106 = (v32 - 1) & v32;
      v107 = v33;
      v30 = __clz(__rbit64(v32)) + (v33 << 6);
    }
    v35 = *(uint64_t **)(v0 + 2600);
    v36 = *(uint64_t **)(v0 + 2592);
    v37 = *(uint64_t **)(v0 + 2584);
    v110 = *(uint64_t **)(v0 + 2576);
    v112 = *(uint64_t **)(v0 + 2568);
    v114 = *(uint64_t **)(v0 + 2560);
    v38 = *(_QWORD *)(v0 + 2544);
    v116 = *(_QWORD *)(v0 + 2520);
    v118 = *(_QWORD *)(v0 + 2536);
    v39 = *(_QWORD *)(v103 + 56);
    v40 = (uint64_t *)(*(_QWORD *)(v103 + 48) + 16 * v30);
    v41 = *v40;
    v42 = v40[1];
    v108 = v42;
    v109 = *v40;
    v122 = type metadata accessor for MultipartAccessoryPairingInfo(0);
    sub_10005972C(v39 + *(_QWORD *)(*(_QWORD *)(v122 - 8) + 72) * v30, (uint64_t)v35 + *(int *)(v96 + 48), type metadata accessor for MultipartAccessoryPairingInfo);
    *v35 = v41;
    *(_QWORD *)(v102 + 8) = v42;
    sub_100005CF0((uint64_t)v35, (uint64_t)v36, &qword_1010EBFF8);
    v43 = *(int *)(v96 + 48);
    v44 = (uint64_t)v36 + v43;
    v45 = *v36;
    v46 = *(_QWORD *)(v101 + 8);
    *v37 = *v36;
    *(_QWORD *)(v100 + 8) = v46;
    v105 = (uint64_t)v37 + v43;
    sub_10005972C((uint64_t)v36 + v43, (uint64_t)v37 + v43, type metadata accessor for MultipartAccessoryPairingInfo);
    v47 = (_BYTE *)(v38 + *(int *)(sub_10001A9A8((uint64_t *)&unk_1010F98D0) + 48));
    v48 = (uint64_t)v110 + *(int *)(v96 + 48);
    *v110 = v45;
    *(_QWORD *)(v99 + 8) = v46;
    sub_10005972C(v44, v48, type metadata accessor for MultipartAccessoryPairingInfo);
    sub_10000F9B8(v48 + *(int *)(v122 + 24), v38, (uint64_t *)&unk_1010F9890);
    sub_10001BBBC(v109, v108);
    sub_10001BBBC(v45, v46);
    sub_1000126B0(v48, type metadata accessor for MultipartAccessoryPairingInfo);
    v49 = (char *)v112 + *(int *)(v96 + 48);
    v50 = *(_QWORD *)(v101 + 8);
    *v112 = *v36;
    *(_QWORD *)(v98 + 8) = v50;
    sub_10005972C(v44, (uint64_t)v49, type metadata accessor for MultipartAccessoryPairingInfo);
    v51 = *v49;
    sub_1000126B0((uint64_t)v49, type metadata accessor for MultipartAccessoryPairingInfo);
    v52 = (uint64_t)v114 + *(int *)(v96 + 48);
    v53 = *(_QWORD *)(v101 + 8);
    *v114 = *v36;
    *(_QWORD *)(v97 + 8) = v53;
    sub_10005972C(v44, v52, type metadata accessor for MultipartAccessoryPairingInfo);
    LOBYTE(v44) = *(_BYTE *)(v52 + *(int *)(v122 + 28));
    sub_1000126B0(v52, type metadata accessor for MultipartAccessoryPairingInfo);
    *v47 = v51;
    v47[1] = 0;
    v47[2] = v44;
    v54 = v45;
    swift_storeEnumTagMultiPayload(v38, v116, 0);
    sub_1000126EC(v38, v118, type metadata accessor for OwnedBeaconGroup.PairingState);
    v3 = (_QWORD *)v120;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v120);
    v124 = (_QWORD *)v120;
    v57 = sub_100518E4C(v54, v46);
    v58 = *(_QWORD *)(v120 + 16);
    v59 = (v56 & 1) == 0;
    result = v58 + v59;
    if (__OFADD__(v58, v59))
      break;
    v60 = v56;
    if (*(_QWORD *)(v120 + 24) >= result)
    {
      v0 = v104;
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        v63 = *(_QWORD *)(v104 + 2536);
        if ((v56 & 1) != 0)
          goto LABEL_11;
      }
      else
      {
        sub_100A99F50();
        v3 = v124;
        v63 = *(_QWORD *)(v104 + 2536);
        if ((v60 & 1) != 0)
          goto LABEL_11;
      }
    }
    else
    {
      sub_100A850F8(result, isUniquelyReferenced_nonNull_native);
      v3 = v124;
      v61 = sub_100518E4C(v54, v46);
      v0 = v104;
      if ((v60 & 1) != (v62 & 1))
        return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for OwnedBeaconGroup.SerialNumber);
      v57 = v61;
      v63 = *(_QWORD *)(v104 + 2536);
      if ((v60 & 1) != 0)
      {
LABEL_11:
        sub_1000596D0(v63, v3[7] + *(_QWORD *)(v95 + 72) * v57);
        goto LABEL_12;
      }
    }
    v3[(v57 >> 6) + 8] |= 1 << v57;
    v64 = (uint64_t *)(v3[6] + 16 * v57);
    *v64 = v54;
    v64[1] = v46;
    result = sub_1000126EC(v63, v3[7] + *(_QWORD *)(v95 + 72) * v57, type metadata accessor for OwnedBeaconGroup.PairingState);
    v65 = v3[2];
    v66 = __OFADD__(v65, 1);
    v67 = v65 + 1;
    if (v66)
      goto LABEL_50;
    v3[2] = v67;
    sub_10001BBBC(v54, v46);
LABEL_12:
    v29 = *(_QWORD *)(v0 + 2592);
    swift_bridgeObjectRelease();
    sub_10001BC14(v54, v46);
    sub_1000126B0(v105, type metadata accessor for MultipartAccessoryPairingInfo);
    result = sub_100004048(v29, &qword_1010EBFF8);
    v20 = v93;
    v22 = v94;
    v26 = v106;
    v28 = v107;
  }
  __break(1u);
LABEL_50:
  __break(1u);
LABEL_51:
  __break(1u);
LABEL_52:
  __break(1u);
  return result;
}

uint64_t sub_100050EF0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 2448);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 2752));
  return swift_task_switch(sub_100050F48, v1, 0);
}

uint64_t sub_100050F48()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  void **v3;
  NSObject **v4;
  void *v5;
  NSObject *v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t *v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  _BOOL4 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;

  v1 = (_QWORD *)(v0 + 1976);
  v2 = (_QWORD *)(v0 + 2376);
  v3 = *(void ***)(v0 + 2512);
  if (swift_getEnumCaseMultiPayload(v3, *(_QWORD *)(v0 + 2504)) == 1)
  {
    v4 = (NSObject **)(v0 + 2384);
    v5 = *v3;
    *(_QWORD *)(v0 + 2760) = *v3;
    v6 = v5;
    v7 = Logger.logObject.getter(v6);
    v8 = static os_log_type_t.error.getter(v7);
    if (os_log_type_enabled(v7, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc(12, -1);
      v10 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v9 = 138543362;
      v11 = v6;
      v12 = _swift_stdlib_bridgeErrorToNSError(v11);
      *(_QWORD *)(v0 + 2392) = v12;
      v1 = (_QWORD *)(v0 + 1976);
      v4 = (NSObject **)(v0 + 2384);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 2392, v0 + 2400, v9 + 4, v9 + 12);
      *v10 = v12;

      v2 = (_QWORD *)(v0 + 2376);
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Pairing lock check failed. Error %{public}@", v9, 0xCu);
      v13 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
      swift_arrayDestroy(v10, 1, v13);
      swift_slowDealloc(v10, -1, -1);
      swift_slowDealloc(v9, -1, -1);
    }
    else
    {

      v7 = v6;
    }

    *v4 = v6;
    type metadata accessor for SPPairingSessionError(0);
    v29 = v28;
    v30 = sub_100006C64(&qword_1010EB450, 255, (uint64_t (*)(uint64_t))type metadata accessor for SPPairingSessionError, (uint64_t)&unk_100E217DC);
    _BridgedStoredNSError.code.getter(v2, v29, v30);
    if (*v2 == 18)
    {
      v31 = (_QWORD *)swift_task_alloc(dword_1010EC5BC);
      *(_QWORD *)(v0 + 2768) = v31;
      *v31 = v0;
      v31[1] = sub_1000516A4;
      return sub_100054E2C(*(_QWORD *)(v0 + 2424), *(_QWORD *)(v0 + 2432));
    }
    else
    {
      v34 = *(_QWORD *)(v0 + 2744);
      v35 = *(_QWORD *)(v0 + 2736);
      v36 = *(_QWORD *)(v0 + 2704);
      v37 = *(_QWORD *)(v0 + 2696);
      v38 = *(_QWORD *)(v0 + 2688);
      v39 = *(_QWORD *)(v0 + 2424);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 2016));
      sub_10005984C(v0 + 688);
      sub_10001BC14(v35, v34);
      sub_10001EF3C(v37, v36);
      swift_release(v38);
      *(_QWORD *)v39 = v6;
      *(_BYTE *)(v39 + 40) = 0;
      *(_BYTE *)(v39 + 264) = 1;
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
      v40 = *(_QWORD *)(v0 + 2656);
      v41 = *(_QWORD *)(v0 + 2624);
      v42 = *(_QWORD *)(v0 + 2600);
      v43 = *(_QWORD *)(v0 + 2592);
      v44 = *(_QWORD *)(v0 + 2584);
      v45 = *(_QWORD *)(v0 + 2576);
      v46 = *(_QWORD *)(v0 + 2568);
      v47 = *(_QWORD *)(v0 + 2560);
      v48 = *(_QWORD *)(v0 + 2544);
      v69 = *(_QWORD *)(v0 + 2536);
      v70 = *(_QWORD *)(v0 + 2512);
      v72 = *(_QWORD *)(v0 + 2496);
      v74 = *(_QWORD *)(v0 + 2488);
      v75 = *(_QWORD *)(v0 + 2480);
      v76 = *(_QWORD *)(v0 + 2464);
      v77 = *(_QWORD *)(v0 + 2456);
      swift_task_dealloc(*(_QWORD *)(v0 + 2672));
      swift_task_dealloc(v40);
      swift_task_dealloc(v41);
      swift_task_dealloc(v42);
      swift_task_dealloc(v43);
      swift_task_dealloc(v44);
      swift_task_dealloc(v45);
      swift_task_dealloc(v46);
      swift_task_dealloc(v47);
      swift_task_dealloc(v48);
      swift_task_dealloc(v69);
      swift_task_dealloc(v70);
      swift_task_dealloc(v72);
      swift_task_dealloc(v74);
      swift_task_dealloc(v75);
      swift_task_dealloc(v76);
      swift_task_dealloc(v77);
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
  }
  else
  {
    v14 = *(_QWORD *)(v0 + 2496);
    v15 = *(_QWORD *)(v0 + 2488);
    v16 = *(_QWORD *)(v0 + 2480);
    sub_1000126EC((uint64_t)v3, v14, type metadata accessor for AirPodsSWPairingLockCheckResponse);
    sub_10005972C(v14, v15, type metadata accessor for AirPodsSWPairingLockCheckResponse);
    v17 = sub_10005972C(v14, v16, type metadata accessor for AirPodsSWPairingLockCheckResponse);
    v18 = Logger.logObject.getter(v17);
    v19 = static os_log_type_t.default.getter(v18);
    v20 = os_log_type_enabled(v18, v19);
    v21 = *(_QWORD *)(v0 + 2488);
    if (v20)
    {
      v71 = v0 + 2368;
      v22 = *(_QWORD *)(v0 + 2472);
      v23 = swift_slowAlloc(32, -1);
      v73 = swift_slowAlloc(64, -1);
      v78 = v73;
      *(_DWORD *)v23 = 136446723;
      v24 = (_QWORD *)(v21 + *(int *)(v22 + 40));
      v25 = v24[1];
      if (v25 >> 60 == 15)
      {
        v26 = 0;
        v27 = 0xE000000000000000;
      }
      else
      {
        v26 = Data.hexString.getter(*v24, v25);
        v27 = v49;
      }
      v50 = *(_QWORD *)(v0 + 2488);
      v51 = *(_QWORD *)(v0 + 2480);
      *(_QWORD *)(v0 + 2352) = sub_100016940(v26, v27, &v78);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 2352, v0 + 2360, v23 + 4, v23 + 12);
      swift_bridgeObjectRelease();
      sub_1000126B0(v50, type metadata accessor for AirPodsSWPairingLockCheckResponse);
      *(_WORD *)(v23 + 12) = 2160;
      *(_QWORD *)(v0 + 2360) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 2360, v71, v23 + 14, v23 + 22);
      *(_WORD *)(v23 + 22) = 2081;
      v52 = type metadata accessor for UUID(0);
      v53 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v54 = dispatch thunk of CustomStringConvertible.description.getter(v52, v53);
      *(_QWORD *)(v0 + 2368) = sub_100016940(v54, v55, &v78);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v71, v0 + 2376, v23 + 24, v23 + 32);
      swift_bridgeObjectRelease();
      sub_1000126B0(v51, type metadata accessor for AirPodsSWPairingLockCheckResponse);
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Received SeedS and S3 from server. Pairing token: %{public}s.fmnaId: %{private,mask.hash}s", (uint8_t *)v23, 0x20u);
      swift_arrayDestroy(v73, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v73, -1, -1);
      swift_slowDealloc(v23, -1, -1);

      v1 = (_QWORD *)(v0 + 1976);
    }
    else
    {
      v33 = *(_QWORD *)(v0 + 2480);
      sub_1000126B0(*(_QWORD *)(v0 + 2488), type metadata accessor for AirPodsSWPairingLockCheckResponse);
      sub_1000126B0(v33, type metadata accessor for AirPodsSWPairingLockCheckResponse);

    }
    v56 = *(_QWORD *)(v0 + 2464);
    v57 = *(_QWORD *)(v0 + 2456);
    v58 = *(_QWORD *)(*(_QWORD *)(v0 + 2448) + 184);
    v59 = *(_QWORD *)(v0 + 2496) + *(int *)(*(_QWORD *)(v0 + 2472) + 32);
    v60 = type metadata accessor for UUID(0);
    v61 = *(_QWORD *)(v60 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v61 + 16))(v56, v59, v60);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v61 + 56))(v56, 0, 1, v60);
    sub_100005CF0(v56, v57, &qword_1010ED860);
    v62 = v58 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_fmnaId;
    swift_beginAccess(v58 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_fmnaId, v0 + 2328, 33, 0);
    swift_retain();
    sub_100004084(v57, v62, &qword_1010ED860);
    swift_endAccess(v0 + 2328);
    swift_release(v58);
    v63 = *(_QWORD *)(v0 + 2000);
    v64 = *(_QWORD *)(v0 + 2008);
    sub_10001AA44(v1, v63);
    v65 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v64 + 8) + 8) + 40))(v63);
    v67 = v66;
    *(_QWORD *)(v0 + 2776) = v65;
    *(_QWORD *)(v0 + 2784) = v66;
    v68 = (_QWORD *)swift_task_alloc(dword_1010EC5B4);
    *(_QWORD *)(v0 + 2792) = v68;
    *v68 = v0;
    v68[1] = sub_100051878;
    return sub_100055AEC(v0 + 1288, *(_QWORD *)(v0 + 2496), v65, v67, *(_QWORD *)(v0 + 2440));
  }
}

uint64_t sub_1000516A4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 2448);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 2768));
  return swift_task_switch(sub_1000516FC, v1, 0);
}

uint64_t sub_1000516FC()
{
  uint64_t v0;
  void *v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v1 = *(void **)(v0 + 2760);
  v2 = *(_QWORD *)(v0 + 2744);
  v3 = *(_QWORD *)(v0 + 2736);
  v4 = *(_QWORD *)(v0 + 2704);
  v5 = *(_QWORD *)(v0 + 2696);
  v6 = *(_QWORD *)(v0 + 2688);
  sub_10005984C(v0 + 688);
  sub_10001BC14(v3, v2);
  sub_10001EF3C(v5, v4);
  swift_release(v6);

  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 2016));
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 1976));
  v7 = *(_QWORD *)(v0 + 2656);
  v8 = *(_QWORD *)(v0 + 2624);
  v9 = *(_QWORD *)(v0 + 2600);
  v10 = *(_QWORD *)(v0 + 2592);
  v11 = *(_QWORD *)(v0 + 2584);
  v12 = *(_QWORD *)(v0 + 2576);
  v13 = *(_QWORD *)(v0 + 2568);
  v14 = *(_QWORD *)(v0 + 2560);
  v15 = *(_QWORD *)(v0 + 2544);
  v17 = *(_QWORD *)(v0 + 2536);
  v18 = *(_QWORD *)(v0 + 2512);
  v19 = *(_QWORD *)(v0 + 2496);
  v20 = *(_QWORD *)(v0 + 2488);
  v21 = *(_QWORD *)(v0 + 2480);
  v22 = *(_QWORD *)(v0 + 2464);
  v23 = *(_QWORD *)(v0 + 2456);
  swift_task_dealloc(*(_QWORD *)(v0 + 2672));
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100051878()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 2784);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 2776);
  v3 = *(_QWORD *)(*(_QWORD *)v0 + 2448);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 2792));
  sub_10001BC14(v2, v1);
  return swift_task_switch(sub_1000518EC, v3, 0);
}

uint64_t sub_1000518EC()
{
  uint64_t v0;
  int v1;
  int v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;

  v27 = (_QWORD *)(v0 + 2016);
  sub_100005CF0(v0 + 1288, v0 + 1024, &qword_1010EC4B0);
  v1 = sub_100059770(v0 + 1024);
  v2 = v1;
  v3 = *(_QWORD *)(v0 + 2744);
  v4 = *(_QWORD *)(v0 + 2736);
  v5 = *(_QWORD *)(v0 + 2704);
  v6 = *(_QWORD *)(v0 + 2696);
  v7 = *(_QWORD *)(v0 + 2688);
  v25 = *(_QWORD *)(v0 + 2496);
  v8 = *(_BYTE **)(v0 + 2424);
  if (v1 == 1)
  {
    sub_10005984C(v0 + 688);
    sub_10001BC14(v4, v3);
    sub_10001EF3C(v6, v5);
    swift_release(v7);
    sub_1000126B0(v25, type metadata accessor for AirPodsSWPairingLockCheckResponse);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v27);
    *(_QWORD *)v8 = 0xD000000000000019;
    *((_QWORD *)v8 + 1) = 0x8000000100EC6500;
    v8[40] = 9;
  }
  else
  {
    v23 = v1;
    sub_100057230((const void *)(v0 + 1024), (void *)(v0 + 1552));
    sub_10005984C(v0 + 688);
    sub_10001BC14(v4, v3);
    sub_10001EF3C(v6, v5);
    swift_release(v7);
    sub_1000126B0(v25, type metadata accessor for AirPodsSWPairingLockCheckResponse);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v27);
    v2 = v23;
    sub_100057230((const void *)(v0 + 1552), v8);
  }
  v8[264] = v2 == 1;
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 1976));
  v9 = *(_QWORD *)(v0 + 2656);
  v10 = *(_QWORD *)(v0 + 2624);
  v11 = *(_QWORD *)(v0 + 2600);
  v12 = *(_QWORD *)(v0 + 2592);
  v13 = *(_QWORD *)(v0 + 2584);
  v14 = *(_QWORD *)(v0 + 2576);
  v15 = *(_QWORD *)(v0 + 2568);
  v16 = *(_QWORD *)(v0 + 2560);
  v17 = *(_QWORD *)(v0 + 2544);
  v19 = *(_QWORD *)(v0 + 2536);
  v20 = *(_QWORD *)(v0 + 2512);
  v21 = *(_QWORD *)(v0 + 2496);
  v22 = *(_QWORD *)(v0 + 2488);
  v24 = *(_QWORD *)(v0 + 2480);
  v26 = *(_QWORD *)(v0 + 2464);
  v28 = *(_QWORD *)(v0 + 2456);
  swift_task_dealloc(*(_QWORD *)(v0 + 2672));
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v24);
  swift_task_dealloc(v26);
  swift_task_dealloc(v28);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_100051B44(const void *a1)
{
  char *v2;
  _BYTE v3[264];
  _BYTE v4[264];
  _BYTE v5[272];

  sub_100057230(a1, v3);
  sub_100057230(v3, v5);
  sub_100057230(a1, v4);
  v2 = (char *)sub_100051BAC + 4 * byte_100E22905[sub_10005784C((uint64_t)v4)];
  __asm { BR              X10 }
}

uint64_t sub_100051BAC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  __int128 v9;
  _BYTE v10[264];
  _QWORD v11[38];
  uint64_t v12;
  uint64_t v13;

  v0 = sub_10005A21C((uint64_t)&v12);
  v9 = *(_OWORD *)v0;
  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 24);
  v11[3] = &type metadata for AirPodsSendBeaconGroupDataCommandPayload;
  v11[4] = sub_10005A2C0();
  v3 = swift_allocObject(&unk_1010529E0, 48, 7);
  v11[0] = v3;
  *(_OWORD *)(v3 + 16) = v9;
  *(_QWORD *)(v3 + 32) = v1;
  *(_QWORD *)(v3 + 40) = v2;
  sub_100057230(&v13, v10);
  v4 = (uint64_t *)sub_10005A21C((uint64_t)v10);
  v5 = v4[2];
  v6 = v4[3];
  sub_10001BBBC(*v4, v4[1]);
  sub_10001BBBC(v5, v6);
  v7 = sub_10001A9A8(&qword_1010EC540);
  return String.init<A>(describing:)(v11, v7);
}

void sub_100051FE0(uint64_t a1)
{
  __int128 v1;
  _BYTE v2[16];
  _BYTE v3[8];

  v1 = *(_OWORD *)(a1 + 32);
  sub_100059F58((uint64_t)&v1, (uint64_t)v2);
  sub_100059F58((uint64_t)v2, (uint64_t)v3);
  __asm { BR              X11 }
}

uint64_t sub_100052030@<X0>(uint64_t a1@<X8>)
{
  return BYTE6(a1);
}

uint64_t sub_100052090@<X0>(uint64_t a1@<X1>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v13[24];
  uint64_t v14;
  _BYTE v15[24];

  v5 = v2 + 192;
  if (*(_BYTE *)(v2 + 274) == 1)
  {
    swift_beginAccess(v5, v15, 0, 0);
    sub_10000F9B8(v2 + 192, (uint64_t)v13, &qword_1010EC418);
    if (v14)
    {
      v6 = sub_10001A9A8(&qword_1010EC630);
      v7 = type metadata accessor for CollaborativeKeyGen.v2.OwnerContext();
      result = swift_dynamicCast(&v12, v13, v6, v7, 6);
      if ((result & 1) != 0)
      {
        v9 = CCCKG2ParamsP224Sha256Version2(result);
        CCCKG2GetOpeningSize(v9);
        __asm { BR              X10 }
      }
      goto LABEL_9;
    }
LABEL_8:
    result = sub_100004048((uint64_t)v13, &qword_1010EC418);
    goto LABEL_9;
  }
  swift_beginAccess(v5, v15, 0, 0);
  sub_10000F9B8(v2 + 192, (uint64_t)v13, &qword_1010EC418);
  if (!v14)
    goto LABEL_8;
  v10 = sub_10001A9A8(&qword_1010EC630);
  v11 = type metadata accessor for CollaborativeKeyGen.v1.OwnerContext();
  result = swift_dynamicCast(&v12, v13, v10, v11, 6);
  if ((result & 1) != 0)
  {
    CCCKGGetOpeningSize(224, 10);
    __asm { BR              X10 }
  }
LABEL_9:
  *a2 = xmmword_100E22B20;
  a2[1] = 0u;
  a2[2] = 0u;
  a2[3] = 0u;
  a2[4] = 0u;
  return result;
}

uint64_t sub_1000525F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v5[31] = a4;
  v5[32] = v4;
  v5[29] = a2;
  v5[30] = a3;
  v5[28] = a1;
  v6 = type metadata accessor for StandaloneBeacon(0);
  v5[33] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for UUID(0);
  v5[34] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v5[35] = v8;
  v5[36] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for MACAddress(0);
  v5[37] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v5[38] = v10;
  v11 = *(_QWORD *)(v10 + 64);
  v5[39] = v11;
  v12 = (v11 + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[40] = swift_task_alloc(v12);
  v5[41] = swift_task_alloc(v12);
  v13 = sub_10001A9A8(&qword_101111E00);
  v5[42] = v13;
  v5[43] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v13 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for OwnedBeaconGroup(0);
  v5[44] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v14 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for OwnedBeaconRecord(0);
  v5[45] = v15;
  v5[46] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v15 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for String.Encoding(0);
  v5[47] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v16 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100052740, v4, 0);
}

uint64_t sub_100052740()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  _QWORD *v3;
  uint64_t (__cdecl *v4)();

  v1 = qword_1010EA5B0;
  swift_retain();
  if (v1 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v0 + 96, 0, 0);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 56, &qword_1010EE220);
  if (*(_QWORD *)(v0 + 80))
  {
    sub_10000F9FC((__int128 *)(v0 + 56), v0 + 16);
    swift_release();
    sub_10001AA44((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
    v4 = (uint64_t (__cdecl *)())((char *)&dword_1010EBB40 + dword_1010EBB40);
    v3 = (_QWORD *)swift_task_alloc(unk_1010EBB44);
    *(_QWORD *)(v0 + 384) = v3;
    *v3 = v0;
    v3[1] = sub_100052840;
    return v4();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100052840(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 384);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 256);
  *(_QWORD *)(*(_QWORD *)v1 + 392) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1000528A0, v3, 0);
}

uint64_t sub_1000528A0()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  NSObject *v43;
  os_log_type_t v44;
  _BOOL4 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint8_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  NSObject *v57;
  os_log_type_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t (*v70)();
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;

  v1 = (_QWORD *)(v0 + 16);
  if (!*(_QWORD *)(v0 + 392))
  {
    v12 = *(uint64_t **)(v0 + 224);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    v13 = sub_100033220();
    v14 = swift_allocError(&type metadata for DaemonError, v13, 0, 0);
    *v15 = 0xD000000000000010;
    v15[1] = 0x8000000100EC6470;
    *v12 = v14;
LABEL_11:
    v16 = sub_10001A9A8(&qword_1010EC528);
    swift_storeEnumTagMultiPayload(v12, v16, 1);
    v17 = *(_QWORD *)(v0 + 368);
    v19 = *(_QWORD *)(v0 + 344);
    v18 = *(_QWORD *)(v0 + 352);
    v21 = *(_QWORD *)(v0 + 320);
    v20 = *(_QWORD *)(v0 + 328);
    v22 = *(_QWORD *)(v0 + 288);
    v23 = *(_QWORD *)(v0 + 264);
    swift_task_dealloc(*(_QWORD *)(v0 + 376));
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v2 = *(_QWORD *)(v0 + 256);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
  v3 = (uint64_t *)(*(_QWORD *)(v2 + 184) + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessorySerialNumber);
  v4 = *v3;
  *(_QWORD *)(v0 + 400) = *v3;
  v5 = v3[1];
  *(_QWORD *)(v0 + 408) = v5;
  if (v5 >> 60 == 15)
  {
LABEL_5:
    if (qword_1010E98F0 != -1)
      swift_once(&qword_1010E98F0, sub_10003868C);
    v7 = type metadata accessor for Logger(0);
    v8 = sub_10001A9E8(v7, (uint64_t)qword_1010EC1C8);
    v9 = Logger.logObject.getter(v8);
    v10 = static os_log_type_t.error.getter(v9);
    if (os_log_type_enabled(v9, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Invalid serial number.", v11, 2u);
      swift_slowDealloc(v11, -1, -1);
    }
    v12 = *(uint64_t **)(v0 + 224);

    swift_release();
    *v12 = 0x8000000000000007;
    goto LABEL_11;
  }
  *(_QWORD *)(v0 + 144) = v4;
  *(_QWORD *)(v0 + 152) = v5;
  sub_10001BBBC(v4, v5);
  v6 = sub_100035530();
  if ((DataProtocol.isNull.getter(&type metadata for Data, v6) & 1) != 0)
  {
    sub_10001EF3C(v4, v5);
    goto LABEL_5;
  }
  v72 = v0 + 208;
  v25 = Data.trimmed.getter(v4, v5);
  v27 = v26;
  *(_QWORD *)(v0 + 416) = v25;
  *(_QWORD *)(v0 + 424) = v26;
  if (qword_1010EA318 != -1)
    swift_once(&qword_1010EA318, sub_100B5E330);
  v28 = type metadata accessor for Logger(0);
  sub_10001A9E8(v28, (uint64_t)qword_1011B7DF8);
  sub_10001BBBC(v25, v27);
  v29 = sub_10001BBBC(v25, v27);
  v30 = Logger.logObject.getter(v29);
  v31 = static os_log_type_t.default.getter(v30);
  v73 = v2;
  if (os_log_type_enabled(v30, v31))
  {
    v71 = v28;
    v32 = *(_QWORD *)(v0 + 376);
    v33 = swift_slowAlloc(22, -1);
    v34 = swift_slowAlloc(32, -1);
    v74 = v34;
    *(_DWORD *)v33 = 141558275;
    *(_QWORD *)(v0 + 208) = 1752392040;
    v35 = UnsafeMutableRawBufferPointer.copyMemory(from:)(v72, v0 + 216, v33 + 4, v33 + 12);
    *(_WORD *)(v33 + 12) = 2081;
    static String.Encoding.utf8.getter(v35);
    v36 = String.init(data:encoding:)(v25, v27, v32);
    if (!v37)
      v36 = Data.hexString.getter(v25, v27);
    *(_QWORD *)(v0 + 216) = sub_100016940(v36, v37, &v74);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 216, v0 + 224, v33 + 14, v33 + 22);
    swift_bridgeObjectRelease();
    sub_10001BC14(v25, v27);
    sub_10001BC14(v25, v27);
    _os_log_impl((void *)&_mh_execute_header, v30, v31, "Creating beacon for %{private,mask.hash}s", (uint8_t *)v33, 0x16u);
    swift_arrayDestroy(v34, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v34, -1, -1);
    swift_slowDealloc(v33, -1, -1);

    v2 = v73;
    v28 = v71;
  }
  else
  {
    sub_10001BC14(v25, v27);
    sub_10001BC14(v25, v27);

  }
  if ((*(_BYTE *)(*(_QWORD *)(v0 + 256) + 272) & 1) != 0)
  {
    if (qword_1010E98F0 != -1)
      swift_once(&qword_1010E98F0, sub_10003868C);
    v38 = *(_QWORD *)(v0 + 320);
    v39 = *(_QWORD *)(v0 + 296);
    v40 = *(_QWORD *)(v0 + 304);
    v41 = *(_QWORD *)(v0 + 248);
    *(_QWORD *)(v0 + 488) = sub_10001A9E8(v28, (uint64_t)qword_1010EC1C8);
    v42 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v40 + 16))(v38, v41, v39);
    v43 = Logger.logObject.getter(v42);
    v44 = static os_log_type_t.default.getter(v43);
    v45 = os_log_type_enabled(v43, v44);
    v46 = *(_QWORD *)(v0 + 320);
    v48 = *(_QWORD *)(v0 + 296);
    v47 = *(_QWORD *)(v0 + 304);
    if (v45)
    {
      v49 = (uint8_t *)swift_slowAlloc(12, -1);
      v50 = swift_slowAlloc(32, -1);
      v74 = v50;
      *(_DWORD *)v49 = 136446210;
      v51 = sub_100006C64((unint64_t *)&qword_1010FBAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for MACAddress, (uint64_t)&protocol conformance descriptor for MACAddress);
      v52 = dispatch thunk of CustomStringConvertible.description.getter(v48, v51);
      *(_QWORD *)(v0 + 200) = sub_100016940(v52, v53, &v74);
      v2 = v73;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 200, v72, v49 + 4, v49 + 12);
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v46, v48);
      _os_log_impl((void *)&_mh_execute_header, v43, v44, "Creating standalone beacon. classicMACAddress %{public}s", v49, 0xCu);
      swift_arrayDestroy(v50, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v50, -1, -1);
      swift_slowDealloc(v49, -1, -1);
    }
    else
    {
      (*(void (**)(_QWORD, _QWORD))(v47 + 8))(*(_QWORD *)(v0 + 320), *(_QWORD *)(v0 + 296));
    }

    v68 = type metadata accessor for __DataStorage(0);
    swift_allocObject(v68, *(unsigned int *)(v68 + 48), *(unsigned __int16 *)(v68 + 52));
    *(_QWORD *)(v0 + 496) = __DataStorage.init(length:)(96);
    *(_QWORD *)(v0 + 504) = *(_QWORD *)(v2 + 184);
    swift_retain();
    v69 = *(_QWORD *)(v0 + 392);
    v70 = sub_100053AA4;
  }
  else
  {
    v54 = *(_QWORD *)(*(_QWORD *)(v2 + 184)
                    + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_allSerialNumbersAndPartIds);
    *(_QWORD *)(v0 + 432) = v54;
    v55 = qword_1010E98F0;
    swift_bridgeObjectRetain(v54);
    if (v55 != -1)
      swift_once(&qword_1010E98F0, sub_10003868C);
    *(_QWORD *)(v0 + 440) = sub_10001A9E8(v28, (uint64_t)qword_1010EC1C8);
    v56 = swift_bridgeObjectRetain_n(v54, 4);
    v57 = Logger.logObject.getter(v56);
    v58 = static os_log_type_t.debug.getter(v57);
    if (os_log_type_enabled(v57, v58))
    {
      v59 = swift_slowAlloc(22, -1);
      v60 = swift_slowAlloc(32, -1);
      v74 = v60;
      *(_DWORD *)v59 = 136315394;
      v61 = type metadata accessor for MultipartAccessoryPairingInfo(0);
      v62 = sub_100059BCC();
      swift_bridgeObjectRetain(v54);
      v64 = Dictionary.description.getter(v63, &type metadata for OwnedBeaconGroup.SerialNumber, v61, v62);
      v66 = v65;
      swift_bridgeObjectRelease();
      *(_QWORD *)(v0 + 176) = sub_100016940(v64, v66, &v74);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 176, v0 + 184, v59 + 4, v59 + 12);
      swift_bridgeObjectRelease_n(v54, 2);
      swift_bridgeObjectRelease();
      *(_WORD *)(v59 + 12) = 2048;
      v67 = *(_QWORD *)(v54 + 16);
      swift_bridgeObjectRelease();
      *(_QWORD *)(v0 + 184) = v67;
      v2 = v73;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 184, v0 + 192, v59 + 14, v59 + 22);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v57, v58, "allSerialNumbersAndPartIds: %s. Count %ld", (uint8_t *)v59, 0x16u);
      swift_arrayDestroy(v60, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v60, -1, -1);
      swift_slowDealloc(v59, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v54, 4);
    }
    *(_QWORD *)(v0 + 448) = *(_QWORD *)(v2 + 184);
    swift_retain();
    v69 = *(_QWORD *)(v0 + 392);
    v70 = sub_100053108;
  }
  return swift_task_switch(v70, v69, 0);
}

uint64_t sub_100053108()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _QWORD *v15;
  uint64_t v17;

  v1 = v0[54];
  v2 = v0[49];
  v17 = v0[56];
  v3 = v0[41];
  v5 = v0[38];
  v4 = v0[39];
  v6 = v0[37];
  v7 = v0[29];
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v5 + 16))(v3, v0[31], v6);
  v8 = *(unsigned __int8 *)(v5 + 80);
  v9 = (v8 + 128) & ~v8;
  v10 = (v4 + v9 + 7) & 0xFFFFFFFFFFFFFFF8;
  v11 = swift_allocObject(&unk_101052A08, v10 + 8, v8 | 7);
  v0[57] = v11;
  *(_QWORD *)(v11 + 16) = v2;
  v13 = *(_OWORD *)(v7 + 48);
  v12 = *(_OWORD *)(v7 + 64);
  v14 = *(_OWORD *)(v7 + 32);
  *(_OWORD *)(v11 + 40) = *(_OWORD *)(v7 + 16);
  *(_OWORD *)(v11 + 56) = v14;
  *(_OWORD *)(v11 + 72) = v13;
  *(_OWORD *)(v11 + 88) = v12;
  *(_OWORD *)(v11 + 24) = *(_OWORD *)v7;
  *(_QWORD *)(v11 + 104) = v17;
  *(_QWORD *)(v11 + 112) = 0;
  *(_QWORD *)(v11 + 120) = 0xE000000000000000;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(v11 + v9, v3, v6);
  *(_QWORD *)(v11 + v10) = v1;
  swift_bridgeObjectRetain(v1);
  swift_retain();
  swift_retain();
  sub_10005A4CC((uint64_t *)v7, (void (*)(uint64_t, uint64_t))sub_10001BBBC, (void (*)(uint64_t, uint64_t))sub_10005CB9C);
  v15 = (_QWORD *)swift_task_alloc(async function pointer to unsafeBlocking<A>(_:)[1]);
  v0[58] = v15;
  *v15 = v0;
  v15[1] = sub_100053268;
  return unsafeBlocking<A>(_:)(v0[43], sub_10005A460, v11, v0[42]);
}

uint64_t sub_100053268()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 464);
  *(_QWORD *)(*v1 + 472) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = *(_QWORD *)(v2 + 392);
    v5 = sub_1000537D0;
  }
  else
  {
    swift_release(*(_QWORD *)(v2 + 456));
    v4 = *(_QWORD *)(v2 + 392);
    v5 = sub_1000532D8;
  }
  return swift_task_switch(v5, v4, 0);
}

uint64_t sub_1000532D8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = v0[56];
  v2 = v0[43];
  v3 = v0[44];
  v4 = v0[32];
  v5 = v2 + *(int *)(v0[42] + 48);
  sub_1000126EC(v2, v0[46], type metadata accessor for OwnedBeaconRecord);
  sub_1000126EC(v5, v3, type metadata accessor for OwnedBeaconGroup);
  swift_release(v1);
  swift_bridgeObjectRelease();
  return swift_task_switch(sub_10005336C, v4, 0);
}

uint64_t sub_10005336C()
{
  uint64_t v0;
  void **v1;
  uint64_t v2;
  __n128 v3;
  void *v4;
  uint64_t v5;
  id v6;
  NSObject *v8;
  os_log_type_t v9;
  _BOOL4 v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v1 = (void **)(*(_QWORD *)(*(_QWORD *)(v0 + 256) + 144)
               + OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor_currentLocation);
  v3 = swift_beginAccess(v1, v0 + 120, 0, 0);
  v4 = *v1;
  *(_QWORD *)(v0 + 480) = *v1;
  if (v4)
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD, __n128))(*(_QWORD *)(v0 + 280) + 16))(*(_QWORD *)(v0 + 288), *(_QWORD *)(v0 + 368) + *(int *)(*(_QWORD *)(v0 + 360) + 20), *(_QWORD *)(v0 + 272), v3);
    v5 = *(_QWORD *)(v0 + 392);
    v6 = v4;
    return swift_task_switch(sub_1000535C4, v5, 0);
  }
  else
  {
    v8 = Logger.logObject.getter(v2);
    v9 = static os_log_type_t.error.getter(v8);
    v10 = os_log_type_enabled(v8, v9);
    v12 = *(_QWORD *)(v0 + 416);
    v11 = *(_QWORD *)(v0 + 424);
    v14 = *(_QWORD *)(v0 + 400);
    v13 = *(_QWORD *)(v0 + 408);
    v15 = *(_QWORD *)(v0 + 392);
    if (v10)
    {
      v16 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Unable to retrieve current location from CL for pairing", v16, 2u);
      swift_slowDealloc(v16, -1, -1);

      swift_release(v15);
      sub_10001BC14(v12, v11);
      sub_10001EF3C(v14, v13);
    }
    else
    {
      sub_10001EF3C(*(_QWORD *)(v0 + 400), *(_QWORD *)(v0 + 408));
      sub_10001BC14(v12, v11);

      swift_release(v15);
    }
    v17 = *(_QWORD *)(v0 + 368);
    v18 = *(_QWORD *)(v0 + 352);
    v19 = *(_QWORD *)(v0 + 224);
    v20 = v19 + *(int *)(sub_10001A9A8(&qword_1010EC568) + 48);
    sub_1000126EC(v18, v19, type metadata accessor for OwnedBeaconGroup);
    sub_1000126EC(v17, v20, type metadata accessor for OwnedBeaconRecord);
    v21 = type metadata accessor for AirPodsLEPairingService.BeaconCreationResult(0);
    swift_storeEnumTagMultiPayload(v19, v21, 0);
    v22 = sub_10001A9A8(&qword_1010EC528);
    swift_storeEnumTagMultiPayload(v19, v22, 0);
    v23 = *(_QWORD *)(v0 + 368);
    v25 = *(_QWORD *)(v0 + 344);
    v24 = *(_QWORD *)(v0 + 352);
    v27 = *(_QWORD *)(v0 + 320);
    v26 = *(_QWORD *)(v0 + 328);
    v28 = *(_QWORD *)(v0 + 288);
    v29 = *(_QWORD *)(v0 + 264);
    swift_task_dealloc(*(_QWORD *)(v0 + 376));
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1000535C4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = v0[60];
  v3 = v0[35];
  v2 = v0[36];
  v4 = v0[34];
  v5 = v0[32];
  v6 = *(_QWORD *)(v0[49] + 128);
  type metadata accessor for Transaction(0);
  v7 = swift_task_alloc(48);
  *(_BYTE *)(v7 + 16) = 0;
  *(_QWORD *)(v7 + 24) = v1;
  *(_QWORD *)(v7 + 32) = v2;
  *(_QWORD *)(v7 + 40) = v6;
  static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd.BeaconStore.saveEstimatedLocation", 63, 2, sub_10005A56C, v7, (char *)&type metadata for () + 8);
  swift_task_dealloc(v7);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  return swift_task_switch(sub_100053698, v5, 0);
}

uint64_t sub_100053698()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v1 = *(void **)(v0 + 480);
  v2 = *(_QWORD *)(v0 + 416);
  v3 = *(_QWORD *)(v0 + 424);
  v4 = *(_QWORD *)(v0 + 392);
  sub_10001EF3C(*(_QWORD *)(v0 + 400), *(_QWORD *)(v0 + 408));
  sub_10001BC14(v2, v3);

  swift_release(v4);
  v5 = *(_QWORD *)(v0 + 368);
  v6 = *(_QWORD *)(v0 + 352);
  v7 = *(_QWORD *)(v0 + 224);
  v8 = v7 + *(int *)(sub_10001A9A8(&qword_1010EC568) + 48);
  sub_1000126EC(v6, v7, type metadata accessor for OwnedBeaconGroup);
  sub_1000126EC(v5, v8, type metadata accessor for OwnedBeaconRecord);
  v9 = type metadata accessor for AirPodsLEPairingService.BeaconCreationResult(0);
  swift_storeEnumTagMultiPayload(v7, v9, 0);
  v10 = sub_10001A9A8(&qword_1010EC528);
  swift_storeEnumTagMultiPayload(v7, v10, 0);
  v11 = *(_QWORD *)(v0 + 368);
  v13 = *(_QWORD *)(v0 + 344);
  v12 = *(_QWORD *)(v0 + 352);
  v15 = *(_QWORD *)(v0 + 320);
  v14 = *(_QWORD *)(v0 + 328);
  v16 = *(_QWORD *)(v0 + 288);
  v17 = *(_QWORD *)(v0 + 264);
  swift_task_dealloc(*(_QWORD *)(v0 + 376));
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000537D0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = v0[56];
  v2 = v0[57];
  v3 = v0[32];
  swift_bridgeObjectRelease();
  swift_release(v1);
  swift_release(v2);
  return swift_task_switch(sub_10005382C, v3, 0);
}

uint64_t sub_10005382C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;

  v1 = *(_QWORD *)(v0 + 472);
  swift_errorRetain(v1);
  v2 = swift_errorRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = *(_QWORD *)(v0 + 472);
    v26 = *(_QWORD *)(v0 + 416);
    v27 = *(_QWORD *)(v0 + 424);
    v28 = *(_QWORD *)(v0 + 400);
    v29 = *(_QWORD *)(v0 + 408);
    v25 = *(_QWORD *)(v0 + 392);
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    *(_DWORD *)v6 = 136446210;
    v30 = v7;
    *(_QWORD *)(v0 + 168) = v5;
    swift_errorRetain(v5);
    v8 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
    v9 = String.init<A>(describing:)(v0 + 168, v8);
    *(_QWORD *)(v0 + 160) = sub_100016940(v9, v10, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 160, v0 + 168, v6 + 4, v6 + 12);
    swift_bridgeObjectRelease();
    swift_errorRelease(v5);
    swift_errorRelease(v5);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Failed to generateOwnedBeaconRecordGroup. Error %{public}s", v6, 0xCu);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);

    swift_release(v25);
    sub_10001BC14(v26, v27);
    sub_10001EF3C(v28, v29);
  }
  else
  {
    v11 = *(_QWORD *)(v0 + 472);
    v13 = *(_QWORD *)(v0 + 416);
    v12 = *(_QWORD *)(v0 + 424);
    v14 = *(_QWORD *)(v0 + 392);
    sub_10001EF3C(*(_QWORD *)(v0 + 400), *(_QWORD *)(v0 + 408));
    sub_10001BC14(v13, v12);
    swift_release(v14);
    swift_errorRelease(v11);
    swift_errorRelease(v11);

  }
  v15 = *(_QWORD **)(v0 + 224);
  *v15 = *(_QWORD *)(v0 + 472);
  v16 = sub_10001A9A8(&qword_1010EC528);
  swift_storeEnumTagMultiPayload(v15, v16, 1);
  v17 = *(_QWORD *)(v0 + 368);
  v19 = *(_QWORD *)(v0 + 344);
  v18 = *(_QWORD *)(v0 + 352);
  v21 = *(_QWORD *)(v0 + 320);
  v20 = *(_QWORD *)(v0 + 328);
  v22 = *(_QWORD *)(v0 + 288);
  v23 = *(_QWORD *)(v0 + 264);
  swift_task_dealloc(*(_QWORD *)(v0 + 376));
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100053AA4()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t **v2;

  v1 = v0[62];
  v2 = (uint64_t **)swift_task_alloc(dword_10110C744);
  v0[64] = (uint64_t)v2;
  *v2 = v0;
  v2[1] = (uint64_t *)sub_100053B10;
  return sub_1008E6368(v0[33], v0[29], v0[63], v0[30], v0[31], 0x6000000000, v1 | 0x4000000000000000);
}

uint64_t sub_100053B10()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 512);
  *(_QWORD *)(*v1 + 520) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = *(_QWORD *)(v2 + 256);
    v5 = sub_100053C94;
  }
  else
  {
    v6 = *(_QWORD *)(v2 + 256);
    swift_release(*(_QWORD *)(v2 + 504));
    v5 = sub_100053B84;
    v4 = v6;
  }
  return swift_task_switch(v5, v4, 0);
}

uint64_t sub_100053B84()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v1 = *(_QWORD *)(v0 + 496);
  v3 = *(_QWORD *)(v0 + 416);
  v2 = *(_QWORD *)(v0 + 424);
  v4 = *(_QWORD *)(v0 + 392);
  v5 = *(_QWORD *)(v0 + 264);
  v6 = *(_QWORD *)(v0 + 224);
  sub_10001EF3C(*(_QWORD *)(v0 + 400), *(_QWORD *)(v0 + 408));
  sub_10001BC14(v3, v2);
  swift_release(v1);
  swift_release(v4);
  sub_1000126EC(v5, v6, type metadata accessor for StandaloneBeacon);
  v7 = type metadata accessor for AirPodsLEPairingService.BeaconCreationResult(0);
  swift_storeEnumTagMultiPayload(v6, v7, 1);
  v8 = sub_10001A9A8(&qword_1010EC528);
  swift_storeEnumTagMultiPayload(v6, v8, 0);
  v9 = *(_QWORD *)(v0 + 368);
  v11 = *(_QWORD *)(v0 + 344);
  v10 = *(_QWORD *)(v0 + 352);
  v13 = *(_QWORD *)(v0 + 320);
  v12 = *(_QWORD *)(v0 + 328);
  v14 = *(_QWORD *)(v0 + 288);
  v15 = *(_QWORD *)(v0 + 264);
  swift_task_dealloc(*(_QWORD *)(v0 + 376));
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100053C94()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;

  v1 = *(_QWORD *)(v0 + 520);
  v2 = *(_QWORD *)(v0 + 496);
  swift_release(*(_QWORD *)(v0 + 504));
  swift_release(v2);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = *(_QWORD *)(v0 + 520);
    v26 = *(_QWORD *)(v0 + 416);
    v27 = *(_QWORD *)(v0 + 424);
    v7 = *(_QWORD *)(v0 + 392);
    v28 = *(_QWORD *)(v0 + 400);
    v29 = *(_QWORD *)(v0 + 408);
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v8 = 138543362;
    swift_errorRetain(v6);
    v10 = _swift_stdlib_bridgeErrorToNSError(v6);
    *(_QWORD *)(v0 + 192) = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 192, v0 + 200, v8 + 4, v8 + 12);
    *v9 = v10;
    swift_errorRelease(v6);
    swift_errorRelease(v6);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Failed to generateStandaloneBeacon. Error %{public}@", v8, 0xCu);
    v11 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v9, 1, v11);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

    swift_release(v7);
    sub_10001BC14(v26, v27);
    sub_10001EF3C(v28, v29);
  }
  else
  {
    v12 = *(_QWORD *)(v0 + 520);
    v14 = *(_QWORD *)(v0 + 416);
    v13 = *(_QWORD *)(v0 + 424);
    v15 = *(_QWORD *)(v0 + 392);
    sub_10001EF3C(*(_QWORD *)(v0 + 400), *(_QWORD *)(v0 + 408));
    sub_10001BC14(v14, v13);
    swift_release(v15);
    swift_errorRelease(v12);
    swift_errorRelease(v12);

  }
  v16 = *(_QWORD **)(v0 + 224);
  *v16 = *(_QWORD *)(v0 + 520);
  v17 = sub_10001A9A8(&qword_1010EC528);
  swift_storeEnumTagMultiPayload(v16, v17, 1);
  v18 = *(_QWORD *)(v0 + 368);
  v20 = *(_QWORD *)(v0 + 344);
  v19 = *(_QWORD *)(v0 + 352);
  v22 = *(_QWORD *)(v0 + 320);
  v21 = *(_QWORD *)(v0 + 328);
  v23 = *(_QWORD *)(v0 + 288);
  v24 = *(_QWORD *)(v0 + 264);
  swift_task_dealloc(*(_QWORD *)(v0 + 376));
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100053EEC(unint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t *v4;

  v2 = sub_100056FAC();
  v3 = swift_allocError(&type metadata for AirPodsLEPairingService.Error, v2, 0, 0);
  *v4 = a1;
  sub_10005856C(a1);
  return v3;
}

uint64_t sub_100053F38(const void *a1)
{
  _BYTE v3[264];

  sub_100057230(a1, v3);
  sub_10005726C((uint64_t)a1, (void (*)(void))sub_10001BBBC);
  return String.init<A>(describing:)(v3, &type metadata for AirPodsSWPairingCommand);
}

uint64_t sub_100053F84(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3[7] = a2;
  v3[8] = v2;
  v3[6] = a1;
  v4 = type metadata accessor for Date(0);
  v3[9] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[10] = v5;
  v3[11] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100053FE8, v2, 0);
}

uint64_t sub_100053FE8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  if (qword_1010EA1D0 != -1)
    swift_once(&qword_1010EA1D0, sub_100B11444);
  *(_QWORD *)(v0 + 32) = 0x7365547265646E75;
  *(_QWORD *)(v0 + 40) = 0xE900000000000074;
  SynchronousCache.cachedValue<A>(key:computeBlock:)((_QWORD *)(v0 + 112), v0 + 32, sub_10001F628, 0, &type metadata for Bool);
  swift_bridgeObjectRelease();
  if (*(_BYTE *)(v0 + 112) == 1)
  {
    v2 = *(_QWORD *)(v0 + 88);
    v29 = *(_QWORD *)(v0 + 80);
    v30 = *(_QWORD *)(v0 + 72);
    v28 = *(_QWORD *)(v0 + 64);
    v3 = *(_QWORD *)(v0 + 48);
    *(_OWORD *)(v0 + 16) = *(_OWORD *)(*(_QWORD *)(v0 + 56) + 120);
    v4 = type metadata accessor for __DataStorage(0);
    swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    sub_100059DE8(v0 + 16);
    sub_100059DE8(v0 + 16);
    v31 = 0x2000000000;
    v32 = __DataStorage.init(length:)(32);
    sub_10051ED28((int *)&v31, 17);
    v27 = v31;
    v5 = v32 | 0x4000000000000000;
    swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    v6 = __DataStorage.init(length:)(100);
    v31 = 0x6400000000;
    v32 = v6;
    sub_10051ED28((int *)&v31, 34);
    v7 = v31;
    v8 = v32 | 0x4000000000000000;
    v9 = (int *)type metadata accessor for AirPodsSWPairingLockCheckResponse(0);
    UUID.init()(v9);
    swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    v10 = __DataStorage.init(length:)(32);
    v31 = 0x2000000000;
    v32 = v10;
    sub_10051ED28((int *)&v31, 85);
    v11 = v31;
    v12 = v32 | 0x4000000000000000;
    *(_OWORD *)v3 = *(_OWORD *)(v0 + 16);
    *(_OWORD *)(v3 + 16) = *(_OWORD *)(v0 + 16);
    *(_QWORD *)(v3 + 32) = v27;
    *(_QWORD *)(v3 + 40) = v5;
    *(_QWORD *)(v3 + 48) = v7;
    *(_QWORD *)(v3 + 56) = v8;
    v13 = (_QWORD *)(v3 + v9[9]);
    *v13 = 0xD000000000000011;
    v13[1] = 0x8000000100EC6550;
    v14 = (uint64_t *)(v3 + v9[10]);
    *v14 = v11;
    v14[1] = v12;
    *(_QWORD *)(v3 + v9[11]) = 0;
    v15 = *(_QWORD *)(v28 + 184);
    v16 = swift_retain();
    v17 = Date.init()(v16);
    v18 = Date.epoch.getter(v17);
    (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v2, v30);
    *(_QWORD *)(v15 + 32) = v18;
    swift_release(v15);
    v19 = sub_10001A9A8(&qword_1010EC588);
    swift_storeEnumTagMultiPayload(v3, v19, 0);
    swift_task_dealloc(*(_QWORD *)(v0 + 88));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v22 = *(_QWORD *)(v0 + 56);
    v21 = *(_QWORD *)(v0 + 64);
    v23 = sub_100006C64(&qword_1010EC410, v1, (uint64_t (*)(uint64_t))type metadata accessor for AirPodsLEPairingService, (uint64_t)&unk_100E229E4);
    v24 = swift_task_alloc(32);
    *(_QWORD *)(v0 + 96) = v24;
    *(_QWORD *)(v24 + 16) = v21;
    *(_QWORD *)(v24 + 24) = v22;
    v25 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
    *(_QWORD *)(v0 + 104) = v25;
    v26 = sub_10001A9A8(&qword_1010EC588);
    *v25 = v0;
    v25[1] = sub_10005435C;
    return withCheckedContinuation<A>(isolation:function:_:)(*(_QWORD *)(v0 + 48), v21, v23, 0xD00000000000002DLL, 0x8000000100EC6520, sub_100059DE0, v24, v26);
  }
}

uint64_t sub_10005435C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 96);
  v4 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 104));
  swift_task_dealloc(v2);
  swift_task_dealloc(*(_QWORD *)(v1 + 88));
  return (*(uint64_t (**)(void))(v4 + 8))();
}

uint64_t sub_1000543B0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v6 = sub_10001A9A8(&qword_1010EC5D0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  __chkstk_darwin(v6);
  v9 = *(_BYTE *)(a2 + 272);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v6);
  v10 = *(unsigned __int8 *)(v7 + 80);
  v11 = (v10 + 24) & ~v10;
  v12 = swift_allocObject(&unk_101052918, v11 + v8, v10 | 7);
  *(_QWORD *)(v12 + 16) = a2;
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v12 + v11, (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
  swift_retain();
  sub_1006EDADC(a3, v9, (void (*)(uint64_t))sub_100059E8C, v12);
  return swift_release(v12);
}

uint64_t sub_1000544B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v4 = type metadata accessor for AirPodsSWPairingLockCheckResponse(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10001A9A8(&qword_1010EC588);
  v8 = __chkstk_darwin(v7);
  v10 = (uint64_t *)((char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v8);
  v12 = (uint64_t *)((char *)&v16 - v11);
  sub_10000F9B8(a1, (uint64_t)&v16 - v11, &qword_1010EC588);
  if (swift_getEnumCaseMultiPayload(v12, v7) == 1)
  {
    *v10 = *v12;
    swift_storeEnumTagMultiPayload(v10, v7, 1);
    v13 = sub_10001A9A8(&qword_1010EC5D0);
    return CheckedContinuation.resume(returning:)(v10, v13);
  }
  else
  {
    sub_1000126EC((uint64_t)v12, (uint64_t)v6, type metadata accessor for AirPodsSWPairingLockCheckResponse);
    *(_QWORD *)(*(_QWORD *)(a2 + 184) + 32) = *(_QWORD *)&v6[*(int *)(v4 + 44)];
    sub_10005972C((uint64_t)v6, (uint64_t)v10, type metadata accessor for AirPodsSWPairingLockCheckResponse);
    swift_storeEnumTagMultiPayload(v10, v7, 0);
    v15 = sub_10001A9A8(&qword_1010EC5D0);
    CheckedContinuation.resume(returning:)(v10, v15);
    return sub_1000126B0((uint64_t)v6, type metadata accessor for AirPodsSWPairingLockCheckResponse);
  }
}

uint64_t sub_100054654(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _BYTE v20[224];
  _OWORD v21[14];
  _OWORD v22[14];

  v5 = sub_10001A9A8(&qword_101108DF0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  __chkstk_darwin(v5);
  v8 = &v20[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  swift_retain();
  sub_100B6153C((uint64_t)v20);
  swift_release();
  sub_100005CF0((uint64_t)v20, (uint64_t)v21, &qword_1010EC518);
  if (sub_100057AD4((uint64_t)v21) == 1)
  {
    if (qword_1010E98F0 != -1)
      swift_once(&qword_1010E98F0, sub_10003868C);
    v9 = type metadata accessor for Logger(0);
    v10 = sub_10001A9E8(v9, (uint64_t)qword_1010EC1C8);
    v11 = Logger.logObject.getter(v10);
    v12 = static os_log_type_t.error.getter(v11);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Unable to generate ack data!", v13, 2u);
      swift_slowDealloc(v13, -1, -1);
    }

    return CheckedContinuation.resume(returning:)(v14, v5);
  }
  else
  {
    v22[10] = v21[10];
    v22[11] = v21[11];
    v22[12] = v21[12];
    v22[13] = v21[13];
    v22[6] = v21[6];
    v22[7] = v21[7];
    v22[8] = v21[8];
    v22[9] = v21[9];
    v22[2] = v21[2];
    v22[3] = v21[3];
    v22[4] = v21[4];
    v22[5] = v21[5];
    v22[0] = v21[0];
    v22[1] = v21[1];
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(v6 + 16))(&v20[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)], a1, v5);
    v16 = *(unsigned __int8 *)(v6 + 80);
    v17 = (v16 + 16) & ~v16;
    v18 = (v7 + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
    v19 = swift_allocObject(&unk_101050730, v18 + 8, v16 | 7);
    (*(void (**)(uint64_t, _BYTE *, uint64_t))(v6 + 32))(v19 + v17, v8, v5);
    *(_QWORD *)(v19 + v18) = a3;
    sub_1006EE1F4((uint64_t)v22, (uint64_t)sub_100057B68, v19);
    sub_100057BBC((uint64_t)v20);
    return swift_release();
  }
}

uint64_t sub_100054898(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  void **v15;
  void *v16;
  uint64_t v17;
  id v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t *v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  _QWORD v37[2];
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v4 = type metadata accessor for AirPodsSWPairingLockAckResponse(0);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v5);
  v10 = (char *)v37 - v9;
  __chkstk_darwin(v8);
  v12 = (char *)v37 - v11;
  v13 = sub_10001A9A8(&qword_1010EC520);
  __chkstk_darwin(v13);
  v15 = (void **)((char *)v37 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10000F9B8(a1, (uint64_t)v15, &qword_1010EC520);
  if (swift_getEnumCaseMultiPayload(v15, v13) == 1)
  {
    v16 = *v15;
    if (qword_1010E98F0 != -1)
      swift_once(&qword_1010E98F0, sub_10003868C);
    v17 = type metadata accessor for Logger(0);
    sub_10001A9E8(v17, (uint64_t)qword_1010EC1C8);
    v18 = v16;
    v19 = Logger.logObject.getter(v18);
    v20 = static os_log_type_t.error.getter(v19);
    if (os_log_type_enabled(v19, v20))
    {
      v21 = (uint8_t *)swift_slowAlloc(12, -1);
      v22 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v21 = 138543362;
      v23 = v18;
      v24 = _swift_stdlib_bridgeErrorToNSError(v23);
      v39 = v24;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, &v40, v21 + 4, v21 + 12);
      *v22 = v24;

      _os_log_impl((void *)&_mh_execute_header, v19, v20, "Ack register failed with error - %{public}@", v21, 0xCu);
      v25 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
      swift_arrayDestroy(v22, 1, v25);
      swift_slowDealloc(v22, -1, -1);
      swift_slowDealloc(v21, -1, -1);

    }
    else
    {

    }
  }
  else
  {
    sub_1000126EC((uint64_t)v15, (uint64_t)v12, type metadata accessor for AirPodsSWPairingLockAckResponse);
    if (qword_1010E98F0 != -1)
      swift_once(&qword_1010E98F0, sub_10003868C);
    v26 = type metadata accessor for Logger(0);
    sub_10001A9E8(v26, (uint64_t)qword_1010EC1C8);
    v27 = sub_10005972C((uint64_t)v12, (uint64_t)v10, type metadata accessor for AirPodsSWPairingLockAckResponse);
    v28 = Logger.logObject.getter(v27);
    v29 = static os_log_type_t.default.getter(v28);
    if (os_log_type_enabled(v28, v29))
    {
      v30 = (uint8_t *)swift_slowAlloc(12, -1);
      v31 = swift_slowAlloc(32, -1);
      v37[1] = a2;
      v32 = v31;
      v39 = v31;
      *(_DWORD *)v30 = 136446210;
      sub_10005972C((uint64_t)v10, (uint64_t)v7, type metadata accessor for AirPodsSWPairingLockAckResponse);
      v33 = String.init<A>(describing:)(v7, v4);
      v38 = sub_100016940(v33, v34, &v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39, v30 + 4, v30 + 12);
      swift_bridgeObjectRelease();
      sub_1000126B0((uint64_t)v10, type metadata accessor for AirPodsSWPairingLockAckResponse);
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "Ack register was success. %{public}s", v30, 0xCu);
      swift_arrayDestroy(v32, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v32, -1, -1);
      swift_slowDealloc(v30, -1, -1);

    }
    else
    {

      sub_1000126B0((uint64_t)v10, type metadata accessor for AirPodsSWPairingLockAckResponse);
    }
    sub_1000126B0((uint64_t)v12, type metadata accessor for AirPodsSWPairingLockAckResponse);
  }
  v35 = sub_10001A9A8(&qword_101108DF0);
  return CheckedContinuation.resume(returning:)(v35, v35);
}

uint64_t sub_100054CEC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _UNKNOWN **v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;

  if (*(_BYTE *)(v3 + 274) == 1)
  {
    v5 = sub_1007DE290(a1, a2);
    v7 = v6;
    v9 = v8;
    sub_10001BBBC(v5, v6);
    sub_1002F715C(v5, v7);
    a3[3] = &type metadata for CollaborativeKeyGen.v2.C2;
    a3[4] = sub_100059F14();
    *a3 = v15;
    a3[1] = v16;
    v10 = type metadata accessor for CollaborativeKeyGen.v2.OwnerContext();
    v11 = &off_101093D50;
  }
  else
  {
    v5 = sub_1007DE864(a1, a2);
    v7 = v12;
    v9 = v13;
    sub_10001BBBC(v5, v12);
    sub_1002F7278(v5, v7);
    a3[3] = &type metadata for CollaborativeKeyGen.v1.C2;
    a3[4] = sub_100059ED0();
    *a3 = v15;
    a3[1] = v16;
    v10 = type metadata accessor for CollaborativeKeyGen.v1.OwnerContext();
    v11 = &off_101093D30;
  }
  a3[8] = v10;
  a3[9] = v11;
  result = sub_10001BC14(v5, v7);
  a3[5] = v9;
  return result;
}

uint64_t sub_100054E2C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3[22] = a2;
  v3[23] = v2;
  v3[21] = a1;
  v4 = type metadata accessor for MACAddress(0);
  v3[24] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[25] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[26] = v6;
  v3[27] = swift_task_alloc((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for String.Encoding(0);
  v3[28] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100054EB4, v2, 0);
}

uint64_t sub_100054EB4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  _QWORD *v4;
  uint64_t (__cdecl *v5)();

  v1 = qword_1010EA5B0;
  swift_retain();
  if (v1 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v0 + 96, 0, 0);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 56, &qword_1010EE220);
  if (*(_QWORD *)(v0 + 80))
  {
    v3 = *(_QWORD *)(v0 + 184);
    sub_10000F9FC((__int128 *)(v0 + 56), v0 + 16);
    swift_release(v3);
    sub_10001AA44((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
    v5 = (uint64_t (__cdecl *)())((char *)&dword_1010EBB40 + dword_1010EBB40);
    v4 = (_QWORD *)swift_task_alloc(unk_1010EBB44);
    *(_QWORD *)(v0 + 232) = v4;
    *v4 = v0;
    v4[1] = sub_100054FB4;
    return v5();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100054FB4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 232);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 184);
  *(_QWORD *)(*(_QWORD *)v1 + 240) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100055014, v3, 0);
}

uint64_t sub_100055014()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  char v14;
  uint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  const char *v30;
  uint64_t v31;
  uint8_t *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  uint8_t *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v1 = (_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 240);
  if (!v2)
  {
    v15 = *(uint64_t **)(v0 + 168);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    v16 = sub_100033220();
    v17 = swift_allocError(&type metadata for DaemonError, v16, 0, 0);
    v14 = 0;
    *v18 = 0xD000000000000010;
    v18[1] = 0x8000000100EC6470;
    *v15 = v17;
LABEL_11:
    v20 = *(_QWORD *)(v0 + 216);
    v19 = *(_QWORD *)(v0 + 224);
    v21 = *(_QWORD *)(v0 + 168);
    *(_BYTE *)(v21 + 40) = v14;
    *(_BYTE *)(v21 + 264) = 1;
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v3 = *(_QWORD *)(v0 + 184);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
  v4 = (uint64_t *)(*(_QWORD *)(v3 + 184) + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessorySerialNumber);
  v5 = *v4;
  *(_QWORD *)(v0 + 248) = *v4;
  v6 = v4[1];
  *(_QWORD *)(v0 + 256) = v6;
  if (v6 >> 60 == 15)
  {
LABEL_5:
    if (qword_1010E98F0 != -1)
      swift_once(&qword_1010E98F0, sub_10003868C);
    v8 = type metadata accessor for Logger(0);
    v9 = sub_10001A9E8(v8, (uint64_t)qword_1010EC1C8);
    v10 = Logger.logObject.getter(v9);
    v11 = static os_log_type_t.error.getter(v10);
    if (os_log_type_enabled(v10, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Invalid serial number.", v12, 2u);
      swift_slowDealloc(v12, -1, -1);
    }
    v13 = *(_QWORD *)(v0 + 168);
    swift_release(v2);

    *(_QWORD *)v13 = 8;
    *(_OWORD *)(v13 + 8) = 0u;
    *(_OWORD *)(v13 + 24) = 0u;
    v14 = 11;
    goto LABEL_11;
  }
  *(_QWORD *)(v0 + 120) = v5;
  *(_QWORD *)(v0 + 128) = v6;
  sub_10001BBBC(v5, v6);
  v7 = sub_100035530();
  if ((DataProtocol.isNull.getter(&type metadata for Data, v7) & 1) != 0)
  {
    sub_10001EF3C(v5, v6);
    goto LABEL_5;
  }
  v51 = v0 + 160;
  v23 = Data.trimmed.getter(v5, v6);
  v25 = v24;
  *(_QWORD *)(v0 + 264) = v23;
  *(_QWORD *)(v0 + 272) = v24;
  if (qword_1010E98F0 != -1)
    swift_once(&qword_1010E98F0, sub_10003868C);
  v26 = type metadata accessor for Logger(0);
  *(_QWORD *)(v0 + 280) = sub_10001A9E8(v26, (uint64_t)qword_1010EC1C8);
  sub_10001BBBC(v23, v25);
  v27 = sub_10001BBBC(v23, v25);
  v28 = Logger.logObject.getter(v27);
  v29 = static os_log_type_t.debug.getter(v28);
  v30 = "Code";
  if (os_log_type_enabled(v28, v29))
  {
    v31 = *(_QWORD *)(v0 + 224);
    v32 = (uint8_t *)swift_slowAlloc(12, -1);
    v50 = swift_slowAlloc(32, -1);
    v52 = v50;
    *(_DWORD *)v32 = 136315138;
    v33 = sub_10001BBBC(v23, v25);
    static String.Encoding.utf8.getter(v33);
    v34 = String.init(data:encoding:)(v23, v25, v31);
    if (!v35)
      v34 = Data.hexString.getter(v23, v25);
    v36 = v34;
    v37 = v35;
    sub_10001BC14(v23, v25);
    *(_QWORD *)(v0 + 160) = sub_100016940(v36, v37, &v52);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v51, v0 + 168, v32 + 4, v32 + 12);
    swift_bridgeObjectRelease();
    sub_10001BC14(v23, v25);
    sub_10001BC14(v23, v25);
    _os_log_impl((void *)&_mh_execute_header, v28, v29, "Accessory serial number: %s.", v32, 0xCu);
    swift_arrayDestroy(v50, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v50, -1, -1);
    swift_slowDealloc(v32, -1, -1);

    v30 = "Code";
  }
  else
  {
    sub_10001BC14(v23, v25);
    sub_10001BC14(v23, v25);

  }
  v38 = *(_QWORD *)(*(_QWORD *)(v3 + 184)
                  + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_allSerialNumbersAndPartIds);
  *(_QWORD *)(v0 + 288) = v38;
  v39 = swift_bridgeObjectRetain_n(v38, 3);
  v40 = Logger.logObject.getter(v39);
  v41 = static os_log_type_t.debug.getter(v40);
  if (os_log_type_enabled(v40, v41))
  {
    v42 = (uint8_t *)swift_slowAlloc(12, -1);
    v43 = swift_slowAlloc(32, -1);
    v52 = v43;
    *(_DWORD *)v42 = *((_QWORD *)v30 + 57);
    v44 = type metadata accessor for MultipartAccessoryPairingInfo(0);
    v45 = sub_100059BCC();
    swift_bridgeObjectRetain(v38);
    v47 = Dictionary.description.getter(v46, &type metadata for OwnedBeaconGroup.SerialNumber, v44, v45);
    v49 = v48;
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 152) = sub_100016940(v47, v49, &v52);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 152, v51, v42 + 4, v42 + 12);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n(v38, 2);
    _os_log_impl((void *)&_mh_execute_header, v40, v41, "beaconGroupInfo: %s", v42, 0xCu);
    swift_arrayDestroy(v43, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v43, -1, -1);
    swift_slowDealloc(v42, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(v38, 2);
  }

  *(_QWORD *)(v0 + 296) = *(_QWORD *)(v3 + 184);
  swift_retain();
  return swift_task_switch(sub_1000555B8, *(_QWORD *)(v0 + 240), 0);
}

uint64_t sub_1000555B8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v16 = v0[36];
  v17 = v0[37];
  v1 = v0[33];
  v2 = v0[30];
  v15 = v0[34];
  v4 = v0[26];
  v3 = v0[27];
  v5 = v0[24];
  v6 = v0[25];
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v6 + 16))(v3, v0[22], v5);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = (v7 + 56) & ~v7;
  v9 = (v4 + v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  v10 = (v9 + 15) & 0xFFFFFFFFFFFFFFF8;
  v11 = (char *)swift_allocObject(&unk_1010528C8, v10 + 8, v7 | 7);
  v0[38] = v11;
  *((_QWORD *)v11 + 2) = v2;
  *((_QWORD *)v11 + 3) = v1;
  *((_QWORD *)v11 + 4) = v15;
  *((_QWORD *)v11 + 5) = 0;
  *((_QWORD *)v11 + 6) = 0xE000000000000000;
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 32))(&v11[v8], v3, v5);
  *(_QWORD *)&v11[v9] = v16;
  *(_QWORD *)&v11[v10] = v17;
  sub_10001BBBC(v1, v15);
  v12 = *((unsigned int *)&async function pointer to unsafeBlocking<A>(_:) + 1);
  swift_bridgeObjectRetain(v16);
  swift_retain();
  swift_retain();
  v13 = (_QWORD *)swift_task_alloc(v12);
  v0[39] = v13;
  *v13 = v0;
  v13[1] = sub_100055704;
  return unsafeBlocking<A>(_:)();
}

uint64_t sub_100055704()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 312);
  *(_QWORD *)(*v1 + 320) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = *(_QWORD *)(v2 + 240);
    v5 = sub_10005584C;
  }
  else
  {
    swift_release(*(_QWORD *)(v2 + 304));
    v4 = *(_QWORD *)(v2 + 240);
    v5 = sub_100055774;
  }
  return swift_task_switch(v5, v4, 0);
}

uint64_t sub_100055774()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 296);
  v2 = *(_QWORD *)(v0 + 184);
  swift_bridgeObjectRelease();
  swift_release(v1);
  return swift_task_switch(sub_1000557BC, v2, 0);
}

uint64_t sub_1000557BC()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)(v0 + 264);
  v2 = *(_QWORD *)(v0 + 272);
  v3 = *(_QWORD *)(v0 + 240);
  sub_10001EF3C(*(_QWORD *)(v0 + 248), *(_QWORD *)(v0 + 256));
  sub_10001BC14(v1, v2);
  swift_release(v3);
  v4 = *(_QWORD *)(v0 + 168);
  *(_QWORD *)v4 = 8;
  *(_OWORD *)(v4 + 8) = 0u;
  *(_OWORD *)(v4 + 24) = 0u;
  v6 = *(_QWORD *)(v0 + 216);
  v5 = *(_QWORD *)(v0 + 224);
  v7 = *(_QWORD *)(v0 + 168);
  *(_BYTE *)(v7 + 40) = 11;
  *(_BYTE *)(v7 + 264) = 1;
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10005584C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[37];
  v2 = v0[23];
  swift_release(v0[38]);
  swift_release(v1);
  swift_bridgeObjectRelease();
  return swift_task_switch(sub_1000558A8, v2, 0);
}

uint64_t sub_1000558A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;

  v1 = *(_QWORD *)(v0 + 320);
  swift_errorRetain(v1);
  v2 = swift_errorRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = *(_QWORD *)(v0 + 320);
    v21 = *(_QWORD *)(v0 + 264);
    v22 = *(_QWORD *)(v0 + 272);
    v6 = *(_QWORD *)(v0 + 240);
    v23 = *(_QWORD *)(v0 + 248);
    v24 = *(_QWORD *)(v0 + 256);
    v7 = (uint8_t *)swift_slowAlloc(12, -1);
    v8 = swift_slowAlloc(32, -1);
    *(_DWORD *)v7 = 136446210;
    v25 = v8;
    *(_QWORD *)(v0 + 136) = v5;
    swift_errorRetain(v5);
    v9 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
    v10 = String.init<A>(describing:)(v0 + 136, v9);
    *(_QWORD *)(v0 + 144) = sub_100016940(v10, v11, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 144, v0 + 152, v7 + 4, v7 + 12);
    swift_bridgeObjectRelease();
    swift_errorRelease(v5);
    swift_errorRelease(v5);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Unable to persist pairing lock state due to %{public}s", v7, 0xCu);
    swift_arrayDestroy(v8, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v7, -1, -1);
    swift_release(v6);

    swift_errorRelease(v5);
    sub_10001BC14(v21, v22);
    sub_10001EF3C(v23, v24);
  }
  else
  {
    v12 = *(_QWORD *)(v0 + 320);
    v14 = *(_QWORD *)(v0 + 264);
    v13 = *(_QWORD *)(v0 + 272);
    v15 = *(_QWORD *)(v0 + 240);
    sub_10001EF3C(*(_QWORD *)(v0 + 248), *(_QWORD *)(v0 + 256));
    sub_10001BC14(v14, v13);
    swift_release(v15);
    swift_errorRelease(v12);
    swift_errorRelease(v12);
    swift_errorRelease(v12);

  }
  v16 = *(_QWORD *)(v0 + 168);
  *(_QWORD *)v16 = 8;
  *(_OWORD *)(v16 + 8) = 0u;
  *(_OWORD *)(v16 + 24) = 0u;
  v18 = *(_QWORD *)(v0 + 216);
  v17 = *(_QWORD *)(v0 + 224);
  v19 = *(_QWORD *)(v0 + 168);
  *(_BYTE *)(v19 + 40) = 11;
  *(_BYTE *)(v19 + 264) = 1;
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100055AEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;

  v6[241] = v5;
  v6[240] = a5;
  v6[239] = a4;
  v6[238] = a3;
  v6[237] = a2;
  v6[236] = a1;
  v7 = type metadata accessor for MACAddress(0);
  v6[242] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v6[243] = v8;
  v9 = *(_QWORD *)(v8 + 64);
  v6[244] = v9;
  v6[245] = swift_task_alloc((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10001A9A8((uint64_t *)&unk_1010FF7F0);
  v6[246] = v10;
  v11 = (*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v6[247] = swift_task_alloc(v11);
  v6[248] = swift_task_alloc(v11);
  v6[249] = swift_task_alloc(v11);
  v12 = type metadata accessor for String.Encoding(0);
  v6[250] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v6[251] = v13;
  v6[252] = swift_task_alloc((*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for AirPodsSWPairingLockCheckResponse(0);
  v6[253] = v14;
  v15 = (*(_QWORD *)(*(_QWORD *)(v14 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v6[254] = swift_task_alloc(v15);
  v6[255] = swift_task_alloc(v15);
  return swift_task_switch(sub_100055C04, v5, 0);
}

uint64_t sub_100055C04()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  _QWORD *v4;
  uint64_t (__cdecl *v5)();

  v1 = qword_1010EA5B0;
  swift_retain();
  if (v1 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v0 + 1792, 0, 0);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 1712, &qword_1010EE220);
  if (*(_QWORD *)(v0 + 1736))
  {
    v3 = *(_QWORD *)(v0 + 1928);
    sub_10000F9FC((__int128 *)(v0 + 1712), v0 + 1752);
    swift_release(v3);
    sub_10001AA44((_QWORD *)(v0 + 1752), *(_QWORD *)(v0 + 1776));
    v5 = (uint64_t (__cdecl *)())((char *)&dword_1010EBB40 + dword_1010EBB40);
    v4 = (_QWORD *)swift_task_alloc(unk_1010EBB44);
    *(_QWORD *)(v0 + 2048) = v4;
    *v4 = v0;
    v4[1] = sub_100055D04;
    return v5();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100055D04(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 2048);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 1928);
  *(_QWORD *)(*(_QWORD *)v1 + 2056) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100055D64, v3, 0);
}

uint64_t sub_100055D64()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  _BOOL4 v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  NSObject *v55;
  os_log_type_t v56;
  _BOOL4 v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  uint64_t v80;
  __int128 v81;
  uint64_t v82;
  __int128 v83;
  uint64_t v84;
  uint64_t v85;
  __int128 v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;

  v1 = v0 + 1072;
  v2 = (_QWORD *)(v0 + 1752);
  v3 = *(_QWORD *)(v0 + 2056);
  if (!v3)
  {
    v14 = v0 + 1336;
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v2);
    sub_10005780C(v0 + 1336);
LABEL_17:
    v32 = v14;
LABEL_26:
    sub_100005CF0(v32, v1, &qword_1010EC4B0);
    v68 = *(_QWORD *)(v0 + 2040);
    v69 = *(_QWORD *)(v0 + 2032);
    v70 = *(_QWORD *)(v0 + 2016);
    v71 = *(_QWORD *)(v0 + 1992);
    v72 = *(_QWORD *)(v0 + 1984);
    v73 = *(_QWORD *)(v0 + 1976);
    v74 = *(_QWORD *)(v0 + 1960);
    sub_100005CF0(v1, *(_QWORD *)(v0 + 1888), &qword_1010EC4B0);
    swift_task_dealloc(v68);
    swift_task_dealloc(v69);
    swift_task_dealloc(v70);
    swift_task_dealloc(v71);
    swift_task_dealloc(v72);
    swift_task_dealloc(v73);
    swift_task_dealloc(v74);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v2);
  if (qword_1010E98F0 != -1)
    swift_once(&qword_1010E98F0, sub_10003868C);
  v4 = *(_QWORD *)(v0 + 2040);
  v5 = *(_QWORD *)(v0 + 2032);
  v6 = *(_QWORD *)(v0 + 1896);
  v7 = type metadata accessor for Logger(0);
  sub_10001A9E8(v7, (uint64_t)qword_1010EC1C8);
  sub_10005972C(v6, v4, type metadata accessor for AirPodsSWPairingLockCheckResponse);
  v8 = sub_10005972C(v6, v5, type metadata accessor for AirPodsSWPairingLockCheckResponse);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.debug.getter(v9);
  v11 = os_log_type_enabled(v9, v10);
  v12 = *(_QWORD *)(v0 + 2040);
  if (v11)
  {
    v13 = (_DWORD *)swift_slowAlloc(22, -1);
    v88 = swift_slowAlloc(32, -1);
    *v13 = 134218242;
    __asm { BR              X12 }
  }
  v15 = *(_QWORD *)(v0 + 2032);
  sub_1000126B0(v12, type metadata accessor for AirPodsSWPairingLockCheckResponse);
  sub_1000126B0(v15, type metadata accessor for AirPodsSWPairingLockCheckResponse);

  v17 = *(_QWORD *)(v0 + 1928);
  if (*(_BYTE *)(v17 + 272) == 1)
  {
    v18 = v0 + 1072;
    v19 = type metadata accessor for __DataStorage(0);
    swift_allocObject(v19, *(unsigned int *)(v19 + 48), *(unsigned __int16 *)(v19 + 52));
    v88 = 0x3C00000000;
    v89 = __DataStorage.init(length:)(60);
    sub_10051ED28((int *)&v88, 0);
    v20 = v88;
    v21 = v89 | 0x4000000000000000;
  }
  else
  {
    v22 = (uint64_t *)(*(_QWORD *)(v0 + 1896) + *(int *)(*(_QWORD *)(v0 + 2024) + 36));
    v23 = v22[1];
    if (!v23)
      goto LABEL_11;
    v24 = *(_QWORD *)(v0 + 2016);
    v25 = *(_QWORD *)(v0 + 2008);
    v26 = *(_QWORD *)(v0 + 2000);
    v27 = *v22;
    static String.Encoding.utf8.getter(v16);
    v20 = String.data(using:allowLossyConversion:)(v24, 0, v27, v23);
    v21 = v28;
    v16 = (*(uint64_t (**)(uint64_t, uint64_t))(v25 + 8))(v24, v26);
    if (v21 >> 60 == 15)
    {
LABEL_11:
      v29 = Logger.logObject.getter(v16);
      v30 = static os_log_type_t.error.getter(v29);
      if (os_log_type_enabled(v29, v30))
      {
        v31 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v31 = 0;
        _os_log_impl((void *)&_mh_execute_header, v29, v30, "Unable to decode masked apple ID", v31, 2u);
        swift_slowDealloc(v31, -1, -1);
      }
      swift_release(v3);

      sub_10005780C(v0 + 16);
      v32 = v0 + 16;
      goto LABEL_26;
    }
    v18 = v0 + 1072;
  }
  *(_QWORD *)(v0 + 2072) = v21;
  *(_QWORD *)(v0 + 2064) = v20;
  if (*(_BYTE *)(v17 + 272) == 1)
  {
    v33 = *(_QWORD *)(v0 + 1992);
    v34 = type metadata accessor for OwnedBeaconGroup(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(v33, 1, 1, v34);
    sub_100C99E90(v33, 255);
    v82 = *(_QWORD *)(v0 + 2072);
    v80 = *(_QWORD *)(v0 + 2064);
    v84 = *(_QWORD *)(v0 + 2056);
    v35 = *(_QWORD *)(v0 + 2024);
    v36 = *(_QWORD *)(v0 + 1912);
    v37 = *(_QWORD *)(v0 + 1904);
    v38 = *(_QWORD **)(v0 + 1896);
    sub_100004048(*(_QWORD *)(v0 + 1992), (uint64_t *)&unk_1010FF7F0);
    v39 = v38[4];
    v40 = v38[5];
    v42 = v38[6];
    v41 = v38[7];
    *(_QWORD *)(v0 + 1864) = *(_QWORD *)((char *)v38 + *(int *)(v35 + 44));
    sub_10001BBBC(v37, v36);
    sub_10001BBBC(v39, v40);
    sub_10001BBBC(v42, v41);
    v43 = sub_100059CC8();
    FixedWidthInteger.data.getter(&type metadata for Int64, v43);
    sub_1002AD278(v37, v36, v39, v40, v80, v82);
    v86 = *(_OWORD *)(v0 + 1600);
    v81 = *(_OWORD *)(v0 + 1632);
    v83 = *(_OWORD *)(v0 + 1616);
    v78 = *(_OWORD *)(v0 + 1664);
    v79 = *(_OWORD *)(v0 + 1648);
    v77 = *(_OWORD *)(v0 + 1680);
    v44 = *(_QWORD *)(v0 + 1696);
    v45 = *(_QWORD *)(v0 + 1704);
    swift_release(v84);
    *(_OWORD *)(v0 + 544) = v86;
    *(_OWORD *)(v0 + 560) = v83;
    *(_OWORD *)(v0 + 576) = v81;
    *(_OWORD *)(v0 + 592) = v79;
    *(_OWORD *)(v0 + 608) = v78;
    *(_OWORD *)(v0 + 624) = v77;
    *(_QWORD *)(v0 + 640) = v44;
    *(_QWORD *)(v0 + 648) = v45;
    sub_100059D0C(v0 + 544);
    v14 = v0 + 280;
    sub_100057230((const void *)(v0 + 544), (void *)(v0 + 280));
    SharingCircleWildAdvertisementKey.init(key:)(v0 + 280);
    goto LABEL_17;
  }
  v87 = v3;
  v46 = *(_QWORD *)(v0 + 1928);
  v47 = *(_QWORD *)(v46 + 184);
  v48 = v47 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessoryPartId;
  *(_BYTE *)(v0 + 2128) = *(_BYTE *)(v47 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessoryPartId);
  v49 = v46;
  v1 = v18;
  if ((*(_BYTE *)(v48 + 1) & 1) != 0
    || (v50 = (uint64_t *)(v47 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessorySerialNumber),
        v51 = *v50,
        *(_QWORD *)(v0 + 2080) = *v50,
        v52 = v50[1],
        *(_QWORD *)(v0 + 2088) = v52,
        v49 = v46,
        v52 >> 60 == 15))
  {
LABEL_22:
    v54 = swift_retain_n(v49, 2);
    v55 = Logger.logObject.getter(v54);
    v56 = static os_log_type_t.error.getter(v55);
    v57 = os_log_type_enabled(v55, v56);
    v58 = *(_QWORD *)(v0 + 1928);
    if (v57)
    {
      v59 = swift_slowAlloc(22, -1);
      v85 = v58;
      v60 = swift_slowAlloc(32, -1);
      v88 = v60;
      *(_DWORD *)v59 = 141558275;
      *(_QWORD *)(v0 + 1856) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 1856, v0 + 1864, v59 + 4, v59 + 12);
      *(_WORD *)(v59 + 12) = 2081;
      v61 = (uint64_t *)(*(_QWORD *)(v46 + 184)
                      + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessorySerialNumber);
      v62 = *v61;
      v63 = v61[1];
      *(_QWORD *)(v0 + 1816) = *v61;
      *(_QWORD *)(v0 + 1824) = v63;
      sub_10001BD08(v62, v63);
      v64 = sub_10001A9A8(&qword_1011194A0);
      v65 = String.init<A>(describing:)(v0 + 1816, v64);
      *(_QWORD *)(v0 + 1848) = sub_100016940(v65, v66, &v88);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 1848, v0 + 1856, v59 + 14, v59 + 22);
      swift_bridgeObjectRelease();
      swift_release_n(v85, 2);
      _os_log_impl((void *)&_mh_execute_header, v55, v56, "Invalid serial number %{private,mask.hash}s!", (uint8_t *)v59, 0x16u);
      swift_arrayDestroy(v60, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v60, -1, -1);
      v67 = v59;
      v1 = v0 + 1072;
      swift_slowDealloc(v67, -1, -1);
      swift_release(v87);

      sub_10001BC14(v20, v21);
    }
    else
    {
      swift_release(v87);
      swift_release_n(v58, 2);
      sub_10001BC14(v20, v21);

    }
    sub_10005780C(v0 + 808);
    v32 = v0 + 808;
    goto LABEL_26;
  }
  *(_QWORD *)(v0 + 1832) = v51;
  *(_QWORD *)(v0 + 1840) = v52;
  sub_10001BBBC(v51, v52);
  v53 = sub_100035530();
  if ((DataProtocol.isNull.getter(&type metadata for Data, v53) & 1) != 0)
  {
    sub_10001EF3C(v51, v52);
    v49 = *(_QWORD *)(v0 + 1928);
    goto LABEL_22;
  }
  *(_QWORD *)(v0 + 2096) = Data.trimmed.getter(v51, v52);
  *(_QWORD *)(v0 + 2104) = v76;
  return swift_task_switch(sub_100056694, *(_QWORD *)(v0 + 2056), 0);
}

uint64_t sub_100056694()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v1 = v0[257];
  v2 = v0[245];
  v3 = v0[244];
  v4 = v0[243];
  v5 = v0[242];
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v4 + 16))(v2, v0[240], v5);
  v6 = *(unsigned __int8 *)(v4 + 80);
  v7 = (v6 + 24) & ~v6;
  v8 = swift_allocObject(&unk_1010528F0, v7 + v3, v6 | 7);
  v0[264] = v8;
  *(_QWORD *)(v8 + 16) = v1;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v8 + v7, v2, v5);
  v9 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v10 = (_QWORD *)swift_task_alloc(v9);
  v0[265] = v10;
  *v10 = v0;
  v10[1] = sub_100056778;
  return unsafeBlocking<A>(_:)(v0[248], sub_1000596CC, v8, v0[246]);
}

uint64_t sub_100056778()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 2112);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 1928);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 2120));
  swift_release(v1);
  return swift_task_switch(sub_1000567DC, v2, 0);
}

uint64_t sub_1000567DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  char v4;
  uint64_t v5;
  __int16 v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  __int128 v38;

  v1 = *(_QWORD *)(v0 + 1976);
  sub_10000F9B8(*(_QWORD *)(v0 + 1984), v1, (uint64_t *)&unk_1010FF7F0);
  v2 = type metadata accessor for OwnedBeaconGroup(0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(v1, 1, v2) == 1)
  {
    sub_100004048(*(_QWORD *)(v0 + 1976), (uint64_t *)&unk_1010FF7F0);
    v3 = *(_BYTE *)(v0 + 2128);
  }
  else
  {
    v4 = *(_BYTE *)(v0 + 2128);
    v5 = *(_QWORD *)(v0 + 1976);
    v6 = sub_1003692E4(*(_QWORD *)(v0 + 2096), *(_QWORD *)(v0 + 2104));
    sub_1000126B0(v5, type metadata accessor for OwnedBeaconGroup);
    if ((v6 & 0x100) != 0)
      v3 = v4;
    else
      v3 = v6;
  }
  v7 = *(_QWORD *)(v0 + 2104);
  v8 = *(_QWORD *)(v0 + 2096);
  v9 = *(_QWORD *)(v0 + 2088);
  v10 = *(_QWORD *)(v0 + 2080);
  sub_100C99E90(*(_QWORD *)(v0 + 1984), v3);
  sub_10001BC14(v8, v7);
  sub_10001EF3C(v10, v9);
  v33 = *(_QWORD *)(v0 + 2072);
  v31 = *(_QWORD *)(v0 + 2064);
  v37 = *(_QWORD *)(v0 + 2056);
  v11 = *(_QWORD *)(v0 + 2024);
  v12 = *(_QWORD *)(v0 + 1912);
  v13 = *(_QWORD *)(v0 + 1904);
  v14 = *(_QWORD **)(v0 + 1896);
  sub_100004048(*(_QWORD *)(v0 + 1984), (uint64_t *)&unk_1010FF7F0);
  v15 = v14[4];
  v16 = v14[5];
  v17 = v14[6];
  v18 = v14[7];
  *(_QWORD *)(v0 + 1864) = *(_QWORD *)((char *)v14 + *(int *)(v11 + 44));
  sub_10001BBBC(v13, v12);
  sub_10001BBBC(v15, v16);
  sub_10001BBBC(v17, v18);
  v19 = sub_100059CC8();
  FixedWidthInteger.data.getter(&type metadata for Int64, v19);
  sub_1002AD278(v13, v12, v15, v16, v31, v33);
  v38 = *(_OWORD *)(v0 + 1600);
  v35 = *(_OWORD *)(v0 + 1632);
  v36 = *(_OWORD *)(v0 + 1616);
  v32 = *(_OWORD *)(v0 + 1664);
  v34 = *(_OWORD *)(v0 + 1648);
  v30 = *(_OWORD *)(v0 + 1680);
  v20 = *(_QWORD *)(v0 + 1696);
  v21 = *(_QWORD *)(v0 + 1704);
  swift_release(v37);
  *(_OWORD *)(v0 + 544) = v38;
  *(_OWORD *)(v0 + 560) = v36;
  *(_OWORD *)(v0 + 576) = v35;
  *(_OWORD *)(v0 + 592) = v34;
  *(_OWORD *)(v0 + 608) = v32;
  *(_OWORD *)(v0 + 624) = v30;
  *(_QWORD *)(v0 + 640) = v20;
  *(_QWORD *)(v0 + 648) = v21;
  sub_100059D0C(v0 + 544);
  sub_100057230((const void *)(v0 + 544), (void *)(v0 + 280));
  SharingCircleWildAdvertisementKey.init(key:)(v0 + 280);
  sub_100005CF0(v0 + 280, v0 + 1072, &qword_1010EC4B0);
  v22 = *(_QWORD *)(v0 + 2040);
  v23 = *(_QWORD *)(v0 + 2032);
  v24 = *(_QWORD *)(v0 + 2016);
  v25 = *(_QWORD *)(v0 + 1992);
  v26 = *(_QWORD *)(v0 + 1984);
  v27 = *(_QWORD *)(v0 + 1976);
  v28 = *(_QWORD *)(v0 + 1960);
  sub_100005CF0(v0 + 1072, *(_QWORD *)(v0 + 1888), &qword_1010EC4B0);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_100056AC8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24[2];
  uint64_t v25;
  uint64_t v26;

  v2 = sub_10001A9A8(&qword_1010EC5E8);
  __chkstk_darwin(v2);
  v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = Data.subdata(in:)(0, 20, *a1, a1[1]);
  v7 = v6;
  v24[0] = v5;
  v24[1] = v6;
  v8 = sub_100035530();
  if ((DataProtocol.isNull.getter(&type metadata for Data, v8) & 1) != 0)
  {
    if (qword_1010EA318 != -1)
      swift_once(&qword_1010EA318, sub_100B5E330);
    v9 = type metadata accessor for Logger(0);
    sub_10001A9E8(v9, (uint64_t)qword_1011B7DF8);
    sub_10001BBBC(v5, v7);
    v10 = sub_10001BBBC(v5, v7);
    v11 = Logger.logObject.getter(v10);
    v12 = static os_log_type_t.error.getter(v11);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = swift_slowAlloc(22, -1);
      v23 = swift_slowAlloc(32, -1);
      v24[0] = v23;
      *(_DWORD *)v13 = 141558275;
      v25 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, &v26, v13 + 4, v13 + 12);
      *(_WORD *)(v13 + 12) = 2081;
      v14 = Data.hexString.getter(v5, v7);
      v25 = sub_100016940(v14, v15, v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, &v26, v13 + 14, v13 + 22);
      swift_bridgeObjectRelease();
      sub_10001BC14(v5, v7);
      sub_10001BC14(v5, v7);
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Invalid serial number %{private,mask.hash}s", (uint8_t *)v13, 0x16u);
      v16 = v23;
      swift_arrayDestroy(v23, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v16, -1, -1);
      swift_slowDealloc(v13, -1, -1);

      sub_10001BC14(v5, v7);
    }
    else
    {
      sub_10001BC14(v5, v7);
      sub_10001BC14(v5, v7);
      sub_10001BC14(v5, v7);

    }
  }
  else
  {
    v17 = Data.trimmed.getter(v5, v7);
    v19 = v18;
    v20 = type metadata accessor for MACAddress(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v4, 1, 1, v20);
    v21 = sub_10001A9A8((uint64_t *)&unk_1010F9890);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v4, 0, 1, v21);
    sub_10001BBBC(v17, v19);
    sub_1000FE620((uint64_t)v4, v17, v19);
    sub_10001BC14(v5, v7);
    sub_10001BC14(v17, v19);
  }
}

uint64_t sub_100056DF0()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100056E14()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  unint64_t v9;

  v1 = type metadata accessor for MACAddress(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = (v5 + v3 + v4) & ~v3;
  v7 = (v5 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  swift_release();
  v8 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v8(v0 + v4, v1);
  v8(v0 + v6, v1);
  v9 = *(_QWORD *)(v0 + v7 + 8);
  if (v9 >> 60 != 15)
    sub_10001BC14(*(_QWORD *)(v0 + v7), v9);
  return swift_deallocObject(v0, v7 + 18, v3 | 7);
}

uint64_t sub_100056ED0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  __int128 v17;

  v4 = *(_QWORD *)(type metadata accessor for MACAddress(0) - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = (v7 + v5 + v6) & ~v5;
  v9 = v1 + v6;
  v10 = v1 + v8;
  v11 = (uint64_t *)(v1 + ((v7 + v8 + 7) & 0xFFFFFFFFFFFFFFF8));
  v12 = *v11;
  v13 = v11[1];
  v14 = *((_BYTE *)v11 + 16);
  v15 = *((_BYTE *)v11 + 17);
  v16 = swift_task_alloc(dword_1010EC42C);
  v17 = *(_OWORD *)(v1 + 16);
  *(_QWORD *)(v2 + 16) = v16;
  *(_QWORD *)v16 = v2;
  *(_QWORD *)(v16 + 8) = sub_100004C28;
  *(_BYTE *)(v16 + 121) = v15;
  *(_BYTE *)(v16 + 120) = v14;
  *(_QWORD *)(v16 + 80) = v12;
  *(_QWORD *)(v16 + 88) = v13;
  *(_QWORD *)(v16 + 64) = v9;
  *(_QWORD *)(v16 + 72) = v10;
  *(_OWORD *)(v16 + 48) = v17;
  *(_QWORD *)(v16 + 40) = a1;
  return swift_task_switch(sub_1000399C4, 0, 0);
}

unint64_t sub_100056FAC()
{
  unint64_t result;

  result = qword_1010EC438;
  if (!qword_1010EC438)
  {
    result = swift_getWitnessTable(aE, &type metadata for AirPodsLEPairingService.Error);
    atomic_store(result, (unint64_t *)&qword_1010EC438);
  }
  return result;
}

uint64_t sub_100056FF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v7;

  *(_QWORD *)(v4 + 16) = a1;
  v7 = (_QWORD *)swift_task_alloc(dword_1010EC644);
  *(_QWORD *)(v4 + 24) = v7;
  *v7 = v4;
  v7[1] = sub_100057058;
  return sub_100040684(a3, a4);
}

uint64_t sub_100057058(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 24);
  v6 = *v2;
  swift_task_dealloc(v5);
  if (v1)
    return (*(uint64_t (**)(void))(v6 + 8))();
  *(_QWORD *)(v4 + 32) = a1;
  return swift_task_switch(sub_1000570D4, 0, 0);
}

uint64_t sub_1000570D4()
{
  uint64_t v0;

  **(_QWORD **)(v0 + 16) = *(_QWORD *)(v0 + 32);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000570EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for MACAddress(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100057168(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for MACAddress(0) - 8) + 80);
  v5 = *(_QWORD *)(v1 + 16);
  v6 = *(_QWORD *)(v1 + 24);
  v7 = v1 + ((v4 + 32) & ~v4);
  v8 = (_QWORD *)swift_task_alloc(dword_1010EC474);
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_100004A74;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1010EC470 + dword_1010EC470))(a1, v5, v6, v7);
}

double sub_100057200(uint64_t a1)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 256) = 0x3000000000000000;
  return result;
}

void *sub_100057230(const void *a1, void *a2)
{
  initializeWithTake for AirPodsLEPairingLockAckRequestContent(a2, a1);
  return a2;
}

uint64_t sub_10005726C(uint64_t a1, void (*a2)(void))
{
  __int128 v4;

  v4 = *(_OWORD *)(a1 + 224);
  sub_1000572E8(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_QWORD *)(a1 + 152),
    *(_QWORD *)(a1 + 160),
    *(_QWORD *)(a1 + 168),
    *(_QWORD *)(a1 + 176),
    *(_QWORD *)(a1 + 184),
    *(_QWORD *)(a1 + 192),
    *(_QWORD *)(a1 + 200),
    *(_QWORD *)(a1 + 208),
    *(_QWORD *)(a1 + 216),
    v4,
    *((uint64_t *)&v4 + 1),
    *(_QWORD *)(a1 + 240),
    *(_QWORD *)(a1 + 248),
    *(_QWORD *)(a1 + 256),
    a2);
  return a1;
}

uint64_t sub_1000572E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,unint64_t a33,void (*a34)(void))
{
  uint64_t (*v40)(void);
  uint64_t result;
  void (*v42)(void);

  v40 = (uint64_t (*)(void))a34;
  switch((a33 >> 59) & 6 | ((a31 & 0x2000000000000000) != 0))
  {
    case 0uLL:
      v42 = a34;
      a34();
      goto LABEL_7;
    case 1uLL:
      v42 = a34;
      a34();
      ((void (*)(uint64_t, uint64_t))a34)(a3, a4);
      ((void (*)(uint64_t, uint64_t))a34)(a5, a6);
      ((void (*)(uint64_t, uint64_t))a34)(a7, a8);
      goto LABEL_7;
    case 2uLL:
      v42 = a34;
      a34();
      ((void (*)(uint64_t, uint64_t))a34)(a3, a4);
      ((void (*)(uint64_t, uint64_t))a34)(a5, a6);
      ((void (*)(uint64_t, uint64_t))a34)(a7, a8);
      ((void (*)(uint64_t, uint64_t))a34)(a9, a10);
      ((void (*)(uint64_t, uint64_t))a34)(a11, a12);
      ((void (*)(uint64_t, uint64_t))a34)(a13, a14);
      ((void (*)(uint64_t, uint64_t))a34)(a15, a16);
      ((void (*)(uint64_t, uint64_t))a34)(a17, a18);
      ((void (*)(uint64_t, uint64_t))a34)(a19, a20);
      ((void (*)(uint64_t, uint64_t))a34)(a21, a22);
      ((void (*)(uint64_t, uint64_t))a34)(a23, a24);
      ((void (*)(uint64_t, uint64_t))a34)(a25, a26);
      ((void (*)(uint64_t, uint64_t))a34)(a28, a29);
      ((void (*)(uint64_t, unint64_t))a34)(a30, a31 & 0xDFFFFFFFFFFFFFFFLL);
      goto LABEL_7;
    case 3uLL:
      v42 = a34;
      a34();
      ((void (*)(uint64_t, uint64_t))a34)(a3, a4);
      ((void (*)(uint64_t, uint64_t))a34)(a5, a6);
      ((void (*)(uint64_t, uint64_t))a34)(a7, a8);
      ((void (*)(uint64_t, uint64_t))a34)(a9, a10);
      ((void (*)(uint64_t, uint64_t))a34)(a11, a12);
      goto LABEL_7;
    case 4uLL:
      v42 = a34;
      a34();
      ((void (*)(uint64_t, uint64_t))a34)(a3, a4);
      ((void (*)(uint64_t, uint64_t))a34)(a5, a6);
LABEL_7:
      v40 = (uint64_t (*)(void))v42;
      goto LABEL_8;
    case 5uLL:
LABEL_8:
      result = v40();
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_100057604()
{
  unint64_t result;

  result = qword_1010EC4B8;
  if (!qword_1010EC4B8)
  {
    result = swift_getWitnessTable(&unk_100E2EA00, &type metadata for AirPodsSWPairingCommand);
    atomic_store(result, (unint64_t *)&qword_1010EC4B8);
  }
  return result;
}

uint64_t sub_100057648(uint64_t a1)
{
  __int128 v3;

  v3 = *(_OWORD *)(a1 + 224);
  sub_1000576C0(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_QWORD *)(a1 + 152),
    *(_QWORD *)(a1 + 160),
    *(_QWORD *)(a1 + 168),
    *(_QWORD *)(a1 + 176),
    *(_QWORD *)(a1 + 184),
    *(_QWORD *)(a1 + 192),
    *(_QWORD *)(a1 + 200),
    *(_QWORD *)(a1 + 208),
    *(_QWORD *)(a1 + 216),
    v3,
    *((uint64_t *)&v3 + 1),
    *(_QWORD *)(a1 + 240),
    *(_QWORD *)(a1 + 248),
    *(_QWORD *)(a1 + 256));
  return a1;
}

uint64_t sub_1000576C0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,unint64_t a33)
{
  if ((~(a2 & a4 & a6 & a8 & a10 & a12 & a14 & a16 & a18 & a20 & a22 & a24 & a26) & 0x3000000000000000) != 0
    || (a27 & 0xFFFFFFFFFFFFFF00) != 16128
    || ((a31 | a29 | a33) & 0x3000000000000000) != 0)
  {
    return sub_1000572E8(result, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
             a20,
             a21,
             a22,
             a23,
             a24,
             a25,
             a26,
             a27,
             a28,
             a29,
             a30,
             a31,
             a32,
             a33,
             (void (*)(void))sub_10001BC14);
  }
  return result;
}

double sub_10005780C(uint64_t a1)
{
  double result;

  *(_OWORD *)a1 = xmmword_100E22B30;
  *(_OWORD *)(a1 + 16) = xmmword_100E22B30;
  *(_OWORD *)(a1 + 32) = xmmword_100E22B30;
  *(_OWORD *)(a1 + 48) = xmmword_100E22B30;
  *(_OWORD *)(a1 + 64) = xmmword_100E22B30;
  *(_OWORD *)(a1 + 80) = xmmword_100E22B30;
  *(_OWORD *)(a1 + 96) = xmmword_100E22B30;
  *(_OWORD *)(a1 + 112) = xmmword_100E22B30;
  *(_OWORD *)(a1 + 128) = xmmword_100E22B30;
  *(_OWORD *)(a1 + 144) = xmmword_100E22B30;
  *(_OWORD *)(a1 + 160) = xmmword_100E22B30;
  *(_OWORD *)(a1 + 176) = xmmword_100E22B30;
  *(_OWORD *)(a1 + 192) = xmmword_100E22B30;
  *(_QWORD *)(a1 + 208) = 16128;
  result = 0.0;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  return result;
}

uint64_t sub_10005784C(uint64_t a1)
{
  unsigned int v1;

  v1 = (*(_QWORD *)(a1 + 256) >> 59) & 6 | ((*(_QWORD *)(a1 + 240) & 0x2000000000000000) != 0);
  if (v1 <= 5)
    return v1;
  else
    return (*(_DWORD *)a1 + 6);
}

uint64_t sub_10005787C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v5 = *(_QWORD *)(v1 + 16);
  v4 = *(_QWORD *)(v1 + 24);
  v6 = (_QWORD *)swift_task_alloc(dword_1010EC4CC);
  *(_QWORD *)(v2 + 16) = v6;
  *v6 = v2;
  v6[1] = sub_100004A74;
  return sub_100042C58(a1, v5, v4);
}

unint64_t sub_1000578E0()
{
  unint64_t result;

  result = qword_1010EC4D8;
  if (!qword_1010EC4D8)
  {
    result = swift_getWitnessTable(&unk_100E2E9D8, &type metadata for AirPodsSWPairingCommand);
    atomic_store(result, &qword_1010EC4D8);
  }
  return result;
}

uint64_t sub_10005792C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100057958(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v5 = *(_QWORD *)(v1 + 16);
  v4 = *(_QWORD *)(v1 + 24);
  v6 = (_QWORD *)swift_task_alloc(dword_1010EC4EC);
  *(_QWORD *)(v2 + 16) = v6;
  *v6 = v2;
  v6[1] = sub_100004A74;
  return sub_1000427DC(a1, v5, v4);
}

uint64_t sub_1000579BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for MACAddress(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100057A38()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for MACAddress(0) - 8) + 80);
  v3 = v0 + ((v2 + 40) & ~v2);
  v4 = (_QWORD *)swift_task_alloc(dword_1010EC4FC);
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_100004C28;
  v5 = (_QWORD *)swift_task_alloc(dword_1010EC514);
  v4[2] = v5;
  *v5 = v4;
  v5[1] = sub_100004A74;
  return sub_1000428C8(v3);
}

uint64_t sub_100057ACC(uint64_t a1)
{
  uint64_t v1;

  return sub_100054654(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_100057AD4(uint64_t a1)
{
  unint64_t v1;
  int v2;

  v1 = *(_QWORD *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  v2 = v1 - 1;
  if (v2 < 0)
    v2 = -1;
  return (v2 + 1);
}

uint64_t sub_100057AF8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = sub_10001A9A8(&qword_101108DF0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v3 | 7;
  v6 = ((*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v6, v5);
}

uint64_t sub_100057B68(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(sub_10001A9A8(&qword_101108DF0) - 8) + 80);
  return sub_100054898(a1, v1 + ((v3 + 16) & ~v3));
}

uint64_t sub_100057BBC(uint64_t a1)
{
  sub_100057C2C(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_QWORD *)(a1 + 152),
    *(_QWORD *)(a1 + 160),
    *(_QWORD *)(a1 + 168),
    *(_QWORD *)(a1 + 176),
    *(_QWORD *)(a1 + 184),
    *(_QWORD *)(a1 + 192),
    *(_QWORD *)(a1 + 200),
    *(_QWORD *)(a1 + 208),
    *(_QWORD *)(a1 + 216));
  return a1;
}

uint64_t sub_100057C2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8, uint64_t a9, unint64_t a10, uint64_t a11, unint64_t a12, uint64_t a13, unint64_t a14, uint64_t a15, unint64_t a16, uint64_t a17, unint64_t a18, uint64_t a19, unint64_t a20,uint64_t a21,unint64_t a22,uint64_t a23,unint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,unint64_t a28)
{
  uint64_t result;

  if (a2 != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10001BC14(a7, a8);
    sub_10001BC14(a9, a10);
    sub_10001BC14(a11, a12);
    sub_10001BC14(a13, a14);
    sub_10001BC14(a15, a16);
    sub_10001BC14(a17, a18);
    sub_10001BC14(a19, a20);
    sub_10001BC14(a21, a22);
    sub_10001BC14(a23, a24);
    swift_bridgeObjectRelease();
    return sub_10001EF3C(a27, a28);
  }
  return result;
}

uint64_t type metadata accessor for AirPodsLEPairingService.BeaconCreationResult(uint64_t a1)
{
  uint64_t result;

  result = qword_1010EC6E8;
  if (!qword_1010EC6E8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AirPodsLEPairingService.BeaconCreationResult);
  return result;
}

uint64_t sub_100057DB8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_100057DFC()
{
  uint64_t v0;

  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 64, 7);
}

_OWORD *sub_100057E20(__int128 *a1, _OWORD *a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[2];
  a2[1] = a1[1];
  a2[2] = v3;
  *a2 = v2;
  return a2;
}

uint64_t sub_100057E38()
{
  uint64_t v0;

  return sub_10004F110(v0 + 16);
}

uint64_t sub_100057E40()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

_BYTE **sub_100057E50(_BYTE **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_100694A98(a1, a2, a3, *(_BYTE *)(v3 + 16));
}

uint64_t sub_100057E58()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100057E68(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;

  return sub_1006948DC(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

uint64_t sub_100057E74()
{
  uint64_t v0;
  __int128 v2;
  __int128 v3;

  v2 = *(_OWORD *)(v0 + 240);
  v3 = *(_OWORD *)(v0 + 256);
  sub_1000572E8(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 160),
    *(_QWORD *)(v0 + 168),
    *(_QWORD *)(v0 + 176),
    *(_QWORD *)(v0 + 184),
    *(_QWORD *)(v0 + 192),
    *(_QWORD *)(v0 + 200),
    *(_QWORD *)(v0 + 208),
    *(_QWORD *)(v0 + 216),
    *(_QWORD *)(v0 + 224),
    *(_QWORD *)(v0 + 232),
    v2,
    *((uint64_t *)&v2 + 1),
    v3,
    *((uint64_t *)&v3 + 1),
    *(_QWORD *)(v0 + 272),
    (void (*)(void))sub_10001BC14);
  return swift_deallocObject(v0, 280, 7);
}

uint64_t sub_100057EEC()
{
  uint64_t v0;

  return sub_100053F38((const void *)(v0 + 16));
}

uint64_t sub_100057F04()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100057F14()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100057F28()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100057F38()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100057F48()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

void sub_100057F70()
{
  uint64_t v0;

  sub_100051B44((const void *)(v0 + 16));
}

uint64_t sub_100057F88()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100057F98()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100057FA8(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;

  *(_QWORD *)(v2 + 16) = a1;
  v3 = *a2;
  v4 = *((_BYTE *)a2 + 8);
  v5 = swift_task_alloc(dword_1010EC674);
  *(_QWORD *)(v2 + 24) = v5;
  *(_QWORD *)v5 = v2;
  *(_QWORD *)(v5 + 8) = sub_100058014;
  *(_BYTE *)(v5 + 32) = v4;
  *(_QWORD *)(v5 + 24) = v3;
  return swift_task_switch(sub_10005A62C, 0, 0);
}

uint64_t sub_100058014(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v5;

  v3 = *(_QWORD **)(*v1 + 16);
  v5 = *v1;
  swift_task_dealloc(*(_QWORD *)(*v1 + 24));
  *v3 = a1;
  return (*(uint64_t (**)(void))(v5 + 8))();
}

uint64_t sub_100058064()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  void (*v14)(char *, uint64_t);
  uint64_t result;
  uint64_t v16[2];

  v0 = type metadata accessor for Date(0);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = __chkstk_darwin(v0);
  v4 = (char *)v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  v6 = (char *)v16 - v5;
  if (qword_1010E9D08 != -1)
    swift_once(&qword_1010E9D08, sub_10059A6E0);
  OS_dispatch_queue.sync<A>(execute:)(sub_100003D88, qword_1011B71A8, &type metadata for Configuration);
  v7 = sub_100C1A848(v16[1]);
  swift_bridgeObjectRelease();
  if ((unsigned __int128)(v7 * (__int128)60) >> 64 != (60 * v7) >> 63)
  {
    __break(1u);
    goto LABEL_8;
  }
  v8 = static Date.trustedNow.getter((uint64_t)v6);
  Date.timeIntervalSinceReferenceDate.getter(v8);
  Date.init(timeIntervalSinceReferenceDate:)(v9);
  v10 = Date.timeIntervalSince(_:)(v6);
  v11 = static Duration.seconds(_:)(v10);
  v12 = Duration.milliseconds.getter(v11);
  if ((v12 & 0x8000000000000000) != 0)
  {
LABEL_8:
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 3451, 0);
    goto LABEL_10;
  }
  v13 = v12;
  if (!HIDWORD(v12))
  {
    v14 = *(void (**)(char *, uint64_t))(v1 + 8);
    v14(v4, v0);
    v14(v6, v0);
    return v13;
  }
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 3455, 0);
LABEL_10:
  __break(1u);
  return result;
}

uint64_t sub_100058270(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  char v9;
  BOOL v11;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    swift_bridgeObjectRetain(a1);
    v4 = v2 - 1;
    v6 = (unint64_t *)(v5 + 40);
    do
    {
      v8 = *(v6 - 1);
      v7 = *v6;
      sub_10001BBBC(v8, *v6);
      v9 = sub_100A066C4(v8, v7, a2);
      sub_10001BC14(v8, v7);
      v11 = v4-- != 0;
      if ((v9 & 1) == 0)
        break;
      v6 += 2;
    }
    while (v11);
    swift_bridgeObjectRelease();
  }
  else
  {
    v9 = 1;
  }
  return v9 & 1;
}

uint64_t sub_10005831C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

void sub_10005832C(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 16);
}

uint64_t sub_100058338()
{
  uint64_t v0;

  return sub_1000D7550(*(void (**)(uint64_t *__return_ptr))(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_100058340()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100058350()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

unint64_t sub_100058360()
{
  unint64_t result;

  result = qword_1010EC548;
  if (!qword_1010EC548)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for CollaborativeKeyGen.v1.C3, &type metadata for CollaborativeKeyGen.v1.C3);
    atomic_store(result, (unint64_t *)&qword_1010EC548);
  }
  return result;
}

_QWORD *sub_1000583A4(_QWORD *result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result[3] - 8);
  if ((*(_DWORD *)(v1 + 80) & 0x20000) != 0)
    return (_QWORD *)swift_slowDealloc(*result, *(_QWORD *)(v1 + 64)+ ((*(_DWORD *)(v1 + 80) + 16) & ~(unint64_t)*(_DWORD *)(v1 + 80)), *(_DWORD *)(v1 + 80) | 7);
  return result;
}

uint64_t *sub_1000583DC(uint64_t *a1, void (*a2)(uint64_t, uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = a1[2];
  v5 = a1[3];
  v6 = a1[4];
  v7 = a1[5];
  v8 = a1[6];
  v9 = a1[7];
  a2(*a1, a1[1]);
  a2(v4, v5);
  a2(v6, v7);
  a2(v8, v9);
  return a1;
}

uint64_t sub_100058454()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100058464()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100058474()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100058484()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100058494()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

void sub_1000584A8()
{
  uint64_t v0;

  sub_100051FE0(v0 + 16);
}

uint64_t sub_1000584B4()
{
  uint64_t v0;

  return Data.hexString.getter(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56));
}

uint64_t sub_1000584BC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1000584CC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1000584DC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return sub_1001EE354(*(uint64_t (**)(void))(v1 + 16), a1);
}

uint64_t sub_1000584E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1001EE2A0(a1, a2, a3, *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24));
}

uint64_t sub_1000584EC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1000584FC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100058510()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100058520()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100058530()
{
  uint64_t v0;

  sub_100058554(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

unint64_t sub_100058554(unint64_t result)
{
  if (!(result >> 62))
    return swift_errorRelease(result);
  return result;
}

uint64_t sub_100058564()
{
  uint64_t v0;

  return sub_100053EEC(*(_QWORD *)(v0 + 16));
}

unint64_t sub_10005856C(unint64_t result)
{
  if (!(result >> 62))
    return swift_errorRetain();
  return result;
}

uint64_t sub_10005857C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10005858C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10005859C()
{
  uint64_t v0;

  return sub_1000ACA54(*(uint64_t (**)(void))(v0 + 16));
}

void sub_1000585A4(uint64_t *a1, _QWORD **a2, uint64_t a3)
{
  uint64_t v3;

  sub_100694AA8(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

uint64_t sub_1000585AC(uint64_t a1)
{
  sub_1000585F4(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72));
  return a1;
}

uint64_t sub_1000585F4(uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, unint64_t a8, uint64_t a9, unint64_t a10)
{
  if (a2 >> 60 != 15)
  {
    sub_10001BC14(result, a2);
    sub_10001BC14(a3, a4);
    sub_10001BC14(a5, a6);
    sub_10001EF3C(a7, a8);
    return sub_10001EF3C(a9, a10);
  }
  return result;
}

uint64_t sub_100058684@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for StandaloneBeacon(0) - 8) + 80);
  return sub_10005972C(v1 + ((v3 + 16) & ~v3), a1, type metadata accessor for StandaloneBeacon);
}

uint64_t sub_1000586CC()
{
  uint64_t v0;

  return sub_1000D755C(*(uint64_t (**)(uint64_t))(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1000586D8()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v1 = (int *)type metadata accessor for StandaloneBeacon(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  v7 = v0 + v4;
  v8 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  v9 = v7 + v1[5];
  v10 = type metadata accessor for MACAddress(0);
  v11 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8);
  v11(v9, v10);
  v11(v7 + v1[6], v10);
  swift_bridgeObjectRelease();
  v12 = v7 + v1[8];
  v13 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v12, v13);
  sub_10001BC14(*(_QWORD *)(v7 + v1[9]), *(_QWORD *)(v7 + v1[9] + 8));
  v14 = v7 + v1[10];
  sub_10001BC14(*(_QWORD *)v14, *(_QWORD *)(v14 + 8));
  sub_10001BC14(*(_QWORD *)(v14 + 16), *(_QWORD *)(v14 + 24));
  sub_10001BC14(*(_QWORD *)(v14 + 32), *(_QWORD *)(v14 + 40));
  sub_10001BC14(*(_QWORD *)(v7 + v1[11]), *(_QWORD *)(v7 + v1[11] + 8));
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100058808@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for StandaloneBeacon(0) - 8) + 80);
  v4 = v1 + ((v3 + 16) & ~v3);
  v5 = type metadata accessor for UUID(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a1, v4, v5);
}

uint64_t sub_10005885C()
{
  uint64_t v0;

  return sub_1000D72B0(*(void (**)(uint64_t))(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_100058864()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100058874()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100058884()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100058894()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1000588A4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000588B4@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  return sub_10001D7F4(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_1000588BC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1000588CC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

unint64_t sub_1000588DC()
{
  unint64_t result;

  result = qword_1010FB8E0;
  if (!qword_1010FB8E0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for UInt32, &type metadata for UInt32);
    atomic_store(result, (unint64_t *)&qword_1010FB8E0);
  }
  return result;
}

int8x16_t sub_100058920(uint64_t a1)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int8x16_t result;

  v1 = *(_QWORD *)(a1 + 24) & 0xCFFFFFFFFFFFFFFFLL;
  v2 = *(_QWORD *)(a1 + 40) & 0xCFFFFFFFFFFFFFFFLL;
  v3 = *(_QWORD *)(a1 + 56) & 0xCFFFFFFFFFFFFFFFLL;
  v4 = *(_QWORD *)(a1 + 72) & 0xCFFFFFFFFFFFFFFFLL;
  v5 = *(_QWORD *)(a1 + 88) & 0xCFFFFFFFFFFFFFFFLL;
  v6 = *(_QWORD *)(a1 + 104) & 0xCFFFFFFFFFFFFFFFLL;
  v7 = *(_QWORD *)(a1 + 120) & 0xCFFFFFFFFFFFFFFFLL;
  v8 = *(_QWORD *)(a1 + 136) & 0xCFFFFFFFFFFFFFFFLL;
  v9 = *(_QWORD *)(a1 + 152) & 0xCFFFFFFFFFFFFFFFLL;
  v10 = *(_QWORD *)(a1 + 168) & 0xCFFFFFFFFFFFFFFFLL;
  v11 = *(_QWORD *)(a1 + 184) & 0xCFFFFFFFFFFFFFFFLL;
  v12 = *(_QWORD *)(a1 + 224) & 0xCFFFFFFFFFFFFFFFLL;
  v13 = *(_QWORD *)(a1 + 240) & 0xCFFFFFFFFFFFFFFFLL | 0x2000000000000000;
  v14 = *(_QWORD *)(a1 + 256) & 0xCFFFFFFFFFFFFFFFLL | 0x2000000000000000;
  *(_QWORD *)(a1 + 8) &= 0xCFFFFFFFFFFFFFFFLL;
  *(_QWORD *)(a1 + 24) = v1;
  *(_QWORD *)(a1 + 40) = v2;
  *(_QWORD *)(a1 + 56) = v3;
  *(_QWORD *)(a1 + 72) = v4;
  *(_QWORD *)(a1 + 88) = v5;
  *(_QWORD *)(a1 + 104) = v6;
  *(_QWORD *)(a1 + 120) = v7;
  *(_QWORD *)(a1 + 136) = v8;
  *(_QWORD *)(a1 + 152) = v9;
  *(_QWORD *)(a1 + 168) = v10;
  *(_QWORD *)(a1 + 184) = v11;
  result = vandq_s8(*(int8x16_t *)(a1 + 200), (int8x16_t)xmmword_100E22B40);
  *(int8x16_t *)(a1 + 200) = result;
  *(_QWORD *)(a1 + 224) = v12;
  *(_QWORD *)(a1 + 240) = v13;
  *(_QWORD *)(a1 + 256) = v14;
  return result;
}

uint64_t sub_1000589F4()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t v21;

  v1 = (int *)type metadata accessor for OwnedBeaconRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = v0 + v4;
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v7 = v0 + v4 + v1[5];
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v10(v7, v8);
  v11 = v0 + v4 + v1[6];
  v12 = type metadata accessor for StableIdentifier(0);
  switch(swift_getEnumCaseMultiPayload(v11, v12))
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v10(v11, v8);
      v21 = v5;
      sub_10001A9A8(&qword_101106F40);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v10(v11, v8);
      v21 = v5;
      sub_10001A9A8((uint64_t *)&unk_1010F46F0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      v5 = v21;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }
  v13 = v6 + v1[7];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v13, 1, v8))
    v10(v13, v8);
  v14 = v6 + v1[8];
  v15 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v14, v15);
  sub_10001BC14(*(_QWORD *)(v6 + v1[9]), *(_QWORD *)(v6 + v1[9] + 8));
  v16 = (uint64_t *)(v6 + v1[10]);
  v17 = v16[1];
  if (v17 >> 60 != 15)
    sub_10001BC14(*v16, v17);
  v18 = (uint64_t *)(v6 + v1[11]);
  v19 = v18[1];
  if (v19 >> 60 != 15)
    sub_10001BC14(*v18, v19);
  sub_10001BC14(*(_QWORD *)(v6 + v1[12]), *(_QWORD *)(v6 + v1[12] + 8));
  sub_10001BC14(*(_QWORD *)(v6 + v1[13]), *(_QWORD *)(v6 + v1[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_100058C8C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = type metadata accessor for OwnedBeaconRecord(0);
  v4 = *(unsigned __int8 *)(*(_QWORD *)(v3 - 8) + 80);
  v5 = v1 + *(int *)(v3 + 20) + ((v4 + 16) & ~v4);
  v6 = type metadata accessor for UUID(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, v5, v6);
}

uint64_t sub_100058CE8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100058CF8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100058D08()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100058D18()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100058D28()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

unint64_t sub_100058D38()
{
  unint64_t result;

  result = qword_1010EC570;
  if (!qword_1010EC570)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for CollaborativeKeyGen.v2.C3, &type metadata for CollaborativeKeyGen.v2.C3);
    atomic_store(result, &qword_1010EC570);
  }
  return result;
}

uint64_t sub_100058D80()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100058D90()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100058DA4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100058DB4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100058DC8()
{
  uint64_t v0;

  return Data.hexString.getter(*(_QWORD *)(v0 + 264), *(_QWORD *)(v0 + 272));
}

uint64_t sub_100058DD0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100058DE0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100058DF4()
{
  uint64_t v0;

  return Data.hexString.getter(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
}

uint64_t sub_100058DFC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100058E0C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100058E20()
{
  uint64_t v0;

  return Data.hexString.getter(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72));
}

uint64_t sub_100058E28()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100058E38()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100058E4C()
{
  uint64_t v0;

  return Data.hexString.getter(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88));
}

uint64_t sub_100058E54()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100058E64()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

void sub_100058E78()
{
  uint64_t v0;

  sub_10004F198(v0 + 16);
}

uint64_t sub_100058E84()
{
  uint64_t v0;

  return Data.hexString.getter(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104));
}

uint64_t sub_100058E8C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100058E9C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100058EAC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100058EBC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

void sub_100058ED0()
{
  uint64_t v0;

  sub_10004F248(v0 + 16);
}

uint64_t sub_100058EDC()
{
  uint64_t v0;

  return Data.hexString.getter(*(_QWORD *)(v0 + 176), *(_QWORD *)(v0 + 184));
}

uint64_t sub_100058EE4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100058EF4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100058F04()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100058F14()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100058F28()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 224);
}

uint64_t sub_100058F30()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100058F40()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100058F50@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;

  return sub_1000AF234(*(uint64_t (**)(void))(v1 + 16), a1);
}

uint64_t sub_100058F58(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1001EE2A4(a1, a2, a3, *(void (**)(uint64_t *__return_ptr))(v3 + 16));
}

uint64_t sub_100058F64()
{
  uint64_t v0;

  return Data.hexString.getter(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_100058F6C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100058F7C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100058F90()
{
  uint64_t v0;

  return Data.hexString.getter(*(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 120));
}

uint64_t sub_100058F98()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100058FA8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100058FBC()
{
  uint64_t v0;

  return Data.hexString.getter(*(_QWORD *)(v0 + 248), *(_QWORD *)(v0 + 256));
}

uint64_t sub_100058FC4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100058FD4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100058FE8()
{
  uint64_t v0;

  return Data.hexString.getter(*(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 152));
}

uint64_t sub_100058FF0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100059000()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100059010()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100059034()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 24));
  return v1;
}

uint64_t sub_100059060()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100059070()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100059080()
{
  uint64_t v0;

  swift_errorRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000590A4()
{
  uint64_t v0;

  return sub_10004F894(*(_QWORD *)(v0 + 16));
}

uint64_t sub_1000590AC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1000590BC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t *sub_1000590CC(uint64_t *a1, void (*a2)(uint64_t, uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v4 = a1[2];
  v6 = a1[3];
  v5 = a1[4];
  v7 = a1[5];
  v8 = a1[6];
  v9 = a1[7];
  v10 = a1[8];
  v11 = a1[9];
  v13 = a1[11];
  v14 = a1[10];
  v15 = a1[13];
  v16 = a1[12];
  v17 = a1[15];
  v18 = a1[14];
  v19 = a1[17];
  v20 = a1[16];
  v21 = a1[19];
  v22 = a1[18];
  v23 = a1[21];
  v24 = a1[20];
  v25 = a1[23];
  v26 = a1[22];
  v27 = a1[25];
  v28 = a1[24];
  v30 = a1[27];
  v29 = a1[28];
  v31 = a1[30];
  v32 = a1[29];
  v33 = a1[32];
  v34 = a1[31];
  a2(*a1, a1[1]);
  a2(v4, v6);
  a2(v5, v7);
  a2(v8, v9);
  a2(v10, v11);
  a2(v14, v13);
  a2(v16, v15);
  a2(v18, v17);
  a2(v20, v19);
  a2(v22, v21);
  a2(v24, v23);
  a2(v26, v25);
  a2(v28, v27);
  a2(v30, v29);
  a2(v32, v31);
  a2(v34, v33);
  return a1;
}

uint64_t sub_100059244(uint64_t a1, uint64_t a2)
{
  initializeWithTake for AnalyticsEvent.DiscreteType(a2, a1);
  return a2;
}

uint64_t sub_100059280(_QWORD *a1, uint64_t a2)
{
  initializeWithCopy for CentralManager.Error(a2, a1);
  return a2;
}

uint64_t sub_1000592BC()
{
  uint64_t v0;
  id *v1;
  id v2;

  v1 = (id *)(v0 + 16);
  switch(*(_BYTE *)(v0 + 56))
  {
    case 0:
    case 7:
    case 0xA:
      v2 = *v1;
      goto LABEL_9;
    case 1:
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
      return swift_deallocObject(v0, 57, 7);
    case 2:

      goto LABEL_8;
    case 3:

      return swift_deallocObject(v0, 57, 7);
    case 4:
    case 5:
    case 6:
      swift_release();
      return swift_deallocObject(v0, 57, 7);
    case 8:
      swift_release();
LABEL_8:
      v2 = *(id *)(v0 + 24);
LABEL_9:
      swift_errorRelease(v2);
      break;
    case 9:
      swift_bridgeObjectRelease();
      break;
    default:
      return swift_deallocObject(v0, 57, 7);
  }
  return swift_deallocObject(v0, 57, 7);
}

void sub_100059350()
{
  sub_100E01294();
}

uint64_t sub_100059370()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100059380()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

unint64_t sub_100059390()
{
  unint64_t result;

  result = qword_1010FB7A0;
  if (!qword_1010FB7A0)
  {
    result = swift_getWitnessTable(&unk_100E72CF0, &type metadata for CentralManager.Error);
    atomic_store(result, (unint64_t *)&qword_1010FB7A0);
  }
  return result;
}

_QWORD *sub_1000593D4(_QWORD *a1)
{
  destroy for CentralManager.Error(a1);
  return a1;
}

uint64_t sub_100059408()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10005942C()
{
  uint64_t v0;

  return sub_1000D74DC(*(void (**)(uint64_t *__return_ptr))(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_100059434()
{
  uint64_t v0;

  return sub_1000D74E8(*(void (**)(uint64_t *__return_ptr))(v0 + 16));
}

uint64_t sub_10005943C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10005944C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10005945C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10005946C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100059480()
{
  uint64_t v0;

  return sub_10004F148(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
}

uint64_t sub_10005948C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10005949C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1000594B0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1000594C0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1000594D4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1000594E4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1000594F4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_errorRetain(v1);
  return v1;
}

uint64_t sub_10005951C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10005952C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10005953C@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 16);
  *a1 = v2;
  return swift_bridgeObjectRetain(v2);
}

uint64_t sub_100059548()
{
  uint64_t v0;

  return sub_1000D7464(*(void (**)(uint64_t *__return_ptr))(v0 + 16));
}

uint64_t sub_100059550()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100059560()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

unint64_t sub_100059570()
{
  unint64_t result;

  result = qword_1010FB8D0;
  if (!qword_1010FB8D0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for UInt8, &type metadata for UInt8);
    atomic_store(result, (unint64_t *)&qword_1010FB8D0);
  }
  return result;
}

int8x16_t sub_1000595B4(uint64_t a1)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int8x16_t result;

  v1 = *(_QWORD *)(a1 + 24) & 0xCFFFFFFFFFFFFFFFLL;
  v2 = *(_QWORD *)(a1 + 40) & 0xCFFFFFFFFFFFFFFFLL;
  v3 = *(_QWORD *)(a1 + 56) & 0xCFFFFFFFFFFFFFFFLL;
  v4 = *(_QWORD *)(a1 + 72) & 0xCFFFFFFFFFFFFFFFLL;
  v5 = *(_QWORD *)(a1 + 88) & 0xCFFFFFFFFFFFFFFFLL;
  v6 = *(_QWORD *)(a1 + 104) & 0xCFFFFFFFFFFFFFFFLL;
  v7 = *(_QWORD *)(a1 + 120) & 0xCFFFFFFFFFFFFFFFLL;
  v8 = *(_QWORD *)(a1 + 136) & 0xCFFFFFFFFFFFFFFFLL;
  v9 = *(_QWORD *)(a1 + 152) & 0xCFFFFFFFFFFFFFFFLL;
  v10 = *(_QWORD *)(a1 + 168) & 0xCFFFFFFFFFFFFFFFLL;
  v11 = *(_QWORD *)(a1 + 184) & 0xCFFFFFFFFFFFFFFFLL;
  v12 = *(_QWORD *)(a1 + 224) & 0xCFFFFFFFFFFFFFFFLL;
  v13 = *(_QWORD *)(a1 + 256) & 0xCFFFFFFFFFFFFFFFLL;
  v14 = *(_QWORD *)(a1 + 240) & 0xCFFFFFFFFFFFFFFFLL | 0x2000000000000000;
  *(_QWORD *)(a1 + 8) &= 0xCFFFFFFFFFFFFFFFLL;
  *(_QWORD *)(a1 + 24) = v1;
  *(_QWORD *)(a1 + 40) = v2;
  *(_QWORD *)(a1 + 56) = v3;
  *(_QWORD *)(a1 + 72) = v4;
  *(_QWORD *)(a1 + 88) = v5;
  *(_QWORD *)(a1 + 104) = v6;
  *(_QWORD *)(a1 + 120) = v7;
  *(_QWORD *)(a1 + 136) = v8;
  *(_QWORD *)(a1 + 152) = v9;
  *(_QWORD *)(a1 + 168) = v10;
  *(_QWORD *)(a1 + 184) = v11;
  result = vandq_s8(*(int8x16_t *)(a1 + 200), (int8x16_t)xmmword_100E22B40);
  *(int8x16_t *)(a1 + 200) = result;
  *(_QWORD *)(a1 + 224) = v12;
  *(_QWORD *)(a1 + 240) = v14;
  *(_QWORD *)(a1 + 256) = v13;
  return result;
}

unint64_t sub_100059684()
{
  unint64_t result;

  result = qword_1010EC580;
  if (!qword_1010EC580)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for FindMyNetworkId, &type metadata for FindMyNetworkId);
    atomic_store(result, (unint64_t *)&qword_1010EC580);
  }
  return result;
}

uint64_t sub_1000596D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for OwnedBeaconGroup.PairingState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_100059714(uint64_t a1)
{
  unint64_t v1;

  v1 = *(_QWORD *)(a1 + 168);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

uint64_t sub_10005972C(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100059770(uint64_t a1)
{
  unsigned int v1;

  v1 = (*(_QWORD *)(a1 + 24) >> 58) & 0xC | (*(_QWORD *)(a1 + 8) >> 60) & 3 | *(_BYTE *)(a1 + 47) & 0x30 | (*(_QWORD *)(a1 + 56) >> 54) & 0xC0 | (*(_QWORD *)(a1 + 72) >> 52) & 0x300 | (*(_QWORD *)(a1 + 88) >> 50) & 0xC00 | *(_WORD *)(a1 + 110) & 0x3000 | (*(_QWORD *)(a1 + 120) >> 46) & 0xC000 | (*(_QWORD *)(a1 + 136) >> 44) & 0x30000 | (*(_QWORD *)(a1 + 152) >> 42) & 0xC0000 | (*(_QWORD *)(a1 + 168) >> 40) & 0x300000 | (*(_QWORD *)(a1 + 184) >> 38) & 0xC00000 | (*(_QWORD *)(a1 + 200) >> 36) & 0x3000000 | (*(_DWORD *)(a1 + 208) >> 8 << 26);
  if (v1 > 0x80000000)
    return -v1;
  else
    return 0;
}

uint64_t sub_10005984C(uint64_t a1)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  v7 = *(_OWORD *)(a1 + 288);
  v8 = *(_OWORD *)(a1 + 304);
  v5 = *(_OWORD *)(a1 + 256);
  v6 = *(_OWORD *)(a1 + 272);
  v3 = *(_OWORD *)(a1 + 224);
  v4 = *(_OWORD *)(a1 + 240);
  sub_1000598D4(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_QWORD *)(a1 + 152),
    *(_QWORD *)(a1 + 160),
    *(_QWORD *)(a1 + 168),
    *(_QWORD *)(a1 + 176),
    *(_QWORD *)(a1 + 184),
    *(_QWORD *)(a1 + 192),
    *(_QWORD *)(a1 + 200),
    *(_QWORD *)(a1 + 208),
    *(_QWORD *)(a1 + 216),
    v3,
    *((unint64_t *)&v3 + 1),
    v4,
    *((unint64_t *)&v4 + 1),
    v5,
    *((unint64_t *)&v5 + 1),
    v6,
    *((unint64_t *)&v6 + 1),
    v7,
    *((unint64_t *)&v7 + 1),
    v8,
    *((uint64_t *)&v8 + 1),
    *(_QWORD *)(a1 + 320),
    *(_QWORD *)(a1 + 328));
  return a1;
}

uint64_t sub_1000598D4(uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, unint64_t a15, uint64_t a16, unint64_t a17, uint64_t a18, unint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,unint64_t a26,uint64_t a27,unint64_t a28,uint64_t a29,unint64_t a30,uint64_t a31,unint64_t a32,uint64_t a33,unint64_t a34,uint64_t a35,unint64_t a36,uint64_t a37,unint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,unint64_t a42)
{
  if (a22)
  {
    sub_10001BC14(result, a2);
    sub_10001BC14(a3, a4);
    sub_10001EF3C(a5, a6);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10001BC14(a14, a15);
    sub_10001BC14(a16, a17);
    sub_10001BC14(a18, a19);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10001BC14(a25, a26);
    sub_10001BC14(a27, a28);
    sub_10001BC14(a29, a30);
    sub_10001BC14(a31, a32);
    sub_10001BC14(a33, a34);
    sub_10001BC14(a35, a36);
    sub_10001BC14(a37, a38);
    swift_bridgeObjectRelease();
    return sub_10001EF3C(a41, a42);
  }
  return result;
}

uint64_t sub_100059AA8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for MACAddress(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 56) & ~v3;
  v5 = v3 | 7;
  v6 = (((*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  sub_10001BC14(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject(v0, v6 + 8, v5);
}

uint64_t sub_100059B58()
{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(type metadata accessor for MACAddress(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_100A83BA8(v0[2], v0[3], v0[4], v0[5], v0[6], (uint64_t)v0 + v2, *(uint64_t *)((char *)v0 + v3), *(uint64_t *)((char *)v0 + ((v3 + 15) & 0xFFFFFFFFFFFFF8)));
}

unint64_t sub_100059BCC()
{
  unint64_t result;

  result = qword_1011082E0;
  if (!qword_1011082E0)
  {
    result = swift_getWitnessTable(&unk_100E3AA08, &type metadata for OwnedBeaconGroup.SerialNumber);
    atomic_store(result, (unint64_t *)&qword_1011082E0);
  }
  return result;
}

uint64_t sub_100059C14()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for MACAddress(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_release(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100059C88@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for MACAddress(0) - 8) + 80);
  return sub_100A83920(v1 + ((v3 + 24) & ~v3), a1);
}

unint64_t sub_100059CC8()
{
  unint64_t result;

  result = qword_1010EC5C8;
  if (!qword_1010EC5C8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Int64, &type metadata for Int64);
    atomic_store(result, (unint64_t *)&qword_1010EC5C8);
  }
  return result;
}

int8x16_t sub_100059D0C(uint64_t a1)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int8x16_t result;

  v1 = *(_QWORD *)(a1 + 24) & 0xCFFFFFFFFFFFFFFFLL;
  v2 = *(_QWORD *)(a1 + 40) & 0xCFFFFFFFFFFFFFFFLL;
  v3 = *(_QWORD *)(a1 + 56) & 0xCFFFFFFFFFFFFFFFLL;
  v4 = *(_QWORD *)(a1 + 72) & 0xCFFFFFFFFFFFFFFFLL;
  v5 = *(_QWORD *)(a1 + 88) & 0xCFFFFFFFFFFFFFFFLL;
  v6 = *(_QWORD *)(a1 + 104) & 0xCFFFFFFFFFFFFFFFLL;
  v7 = *(_QWORD *)(a1 + 120) & 0xCFFFFFFFFFFFFFFFLL;
  v8 = *(_QWORD *)(a1 + 136) & 0xCFFFFFFFFFFFFFFFLL;
  v9 = *(_QWORD *)(a1 + 152) & 0xCFFFFFFFFFFFFFFFLL;
  v10 = *(_QWORD *)(a1 + 168) & 0xCFFFFFFFFFFFFFFFLL;
  v11 = *(_QWORD *)(a1 + 184) & 0xCFFFFFFFFFFFFFFFLL;
  v12 = *(_QWORD *)(a1 + 224) & 0xCFFFFFFFFFFFFFFFLL;
  v13 = *(_QWORD *)(a1 + 240) & 0xCFFFFFFFFFFFFFFFLL | 0x2000000000000000;
  v14 = *(_QWORD *)(a1 + 256) & 0xCFFFFFFFFFFFFFFFLL | 0x1000000000000000;
  *(_QWORD *)(a1 + 8) &= 0xCFFFFFFFFFFFFFFFLL;
  *(_QWORD *)(a1 + 24) = v1;
  *(_QWORD *)(a1 + 40) = v2;
  *(_QWORD *)(a1 + 56) = v3;
  *(_QWORD *)(a1 + 72) = v4;
  *(_QWORD *)(a1 + 88) = v5;
  *(_QWORD *)(a1 + 104) = v6;
  *(_QWORD *)(a1 + 120) = v7;
  *(_QWORD *)(a1 + 136) = v8;
  *(_QWORD *)(a1 + 152) = v9;
  *(_QWORD *)(a1 + 168) = v10;
  *(_QWORD *)(a1 + 184) = v11;
  result = vandq_s8(*(int8x16_t *)(a1 + 200), (int8x16_t)xmmword_100E22B40);
  *(int8x16_t *)(a1 + 200) = result;
  *(_QWORD *)(a1 + 224) = v12;
  *(_QWORD *)(a1 + 240) = v13;
  *(_QWORD *)(a1 + 256) = v14;
  return result;
}

uint64_t sub_100059DE0(uint64_t a1)
{
  uint64_t v1;

  return sub_1000543B0(a1, *(_QWORD *)(v1 + 16), *(uint64_t **)(v1 + 24));
}

uint64_t sub_100059DE8(uint64_t a1)
{
  sub_10001BBBC(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  return a1;
}

uint64_t sub_100059E14()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = sub_10001A9A8(&qword_1010EC5D0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100059E8C(uint64_t a1)
{
  uint64_t v1;

  sub_10001A9A8(&qword_1010EC5D0);
  return sub_1000544B4(a1, *(_QWORD *)(v1 + 16));
}

unint64_t sub_100059ED0()
{
  unint64_t result;

  result = qword_1010EC5D8;
  if (!qword_1010EC5D8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for CollaborativeKeyGen.v1.C2, &type metadata for CollaborativeKeyGen.v1.C2);
    atomic_store(result, (unint64_t *)&qword_1010EC5D8);
  }
  return result;
}

unint64_t sub_100059F14()
{
  unint64_t result;

  result = qword_1010EC5E0;
  if (!qword_1010EC5E0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for CollaborativeKeyGen.v2.C2, &type metadata for CollaborativeKeyGen.v2.C2);
    atomic_store(result, (unint64_t *)&qword_1010EC5E0);
  }
  return result;
}

uint64_t sub_100059F58(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(&type metadata for Data._Representation - 1) + 32))(a2, a1);
  return a2;
}

unint64_t sub_100059F94()
{
  unint64_t result;

  result = qword_1010EC5F0;
  if (!qword_1010EC5F0)
  {
    result = swift_getWitnessTable(&unk_100E4DC98, &type metadata for UnpairCommandPayload);
    atomic_store(result, (unint64_t *)&qword_1010EC5F0);
  }
  return result;
}

unint64_t sub_100059FD8()
{
  unint64_t result;

  result = qword_1010EC5F8;
  if (!qword_1010EC5F8)
  {
    result = swift_getWitnessTable(&unk_100E2F928, &type metadata for AirPodsSWPairingCompleteCommandPayload);
    atomic_store(result, (unint64_t *)&qword_1010EC5F8);
  }
  return result;
}

unint64_t sub_10005A01C()
{
  unint64_t result;

  result = qword_1010EC600;
  if (!qword_1010EC600)
  {
    result = swift_getWitnessTable(&unk_100E3C790, &type metadata for AirPodsSWSendPairingStatusCommandPayload);
    atomic_store(result, (unint64_t *)&qword_1010EC600);
  }
  return result;
}

uint64_t sub_10005A064()
{
  uint64_t v0;

  sub_10001BC14(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
  sub_10001BC14(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
  sub_10001BC14(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56));
  sub_10001BC14(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72));
  return swift_deallocObject(v0, 80, 7);
}

unint64_t sub_10005A0A0()
{
  unint64_t result;

  result = qword_1010EC608;
  if (!qword_1010EC608)
  {
    result = swift_getWitnessTable(&unk_100E30B08, &type metadata for AirPodsSWFinalizePairingCommandPayload);
    atomic_store(result, (unint64_t *)&qword_1010EC608);
  }
  return result;
}

uint64_t sub_10005A0E4()
{
  uint64_t v0;

  sub_10001BC14(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
  sub_10001BC14(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
  sub_10001BC14(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56));
  sub_10001BC14(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72));
  sub_10001BC14(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88));
  sub_10001BC14(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104));
  sub_10001BC14(*(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 120));
  return swift_deallocObject(v0, 128, 7);
}

unint64_t sub_10005A138()
{
  unint64_t result;

  result = qword_1010EC610;
  if (!qword_1010EC610)
  {
    result = swift_getWitnessTable(&unk_100E31A68, &type metadata for AirPodsSWSendPairingDataCommandPayload);
    atomic_store(result, (unint64_t *)&qword_1010EC610);
  }
  return result;
}

uint64_t sub_10005A180()
{
  uint64_t v0;

  sub_10001BC14(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
  sub_10001BC14(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
  sub_10001BC14(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56));
  sub_10001BC14(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72));
  sub_10001BC14(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88));
  sub_10001BC14(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104));
  sub_10001BC14(*(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 120));
  sub_10001BC14(*(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 136));
  sub_10001BC14(*(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 152));
  sub_10001BC14(*(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 168));
  sub_10001BC14(*(_QWORD *)(v0 + 176), *(_QWORD *)(v0 + 184));
  sub_10001BC14(*(_QWORD *)(v0 + 192), *(_QWORD *)(v0 + 200));
  sub_10001BC14(*(_QWORD *)(v0 + 208), *(_QWORD *)(v0 + 216));
  sub_10001BC14(*(_QWORD *)(v0 + 232), *(_QWORD *)(v0 + 240));
  sub_10001BC14(*(_QWORD *)(v0 + 248), *(_QWORD *)(v0 + 256));
  sub_10001BC14(*(_QWORD *)(v0 + 264), *(_QWORD *)(v0 + 272));
  return swift_deallocObject(v0, 280, 7);
}

uint64_t sub_10005A21C(uint64_t result)
{
  unint64_t v1;

  v1 = *(_QWORD *)(result + 256) & 0xCFFFFFFFFFFFFFFFLL;
  *(_QWORD *)(result + 240) &= ~0x2000000000000000uLL;
  *(_QWORD *)(result + 256) = v1;
  return result;
}

unint64_t sub_10005A238()
{
  unint64_t result;

  result = qword_1010EC618;
  if (!qword_1010EC618)
  {
    result = swift_getWitnessTable(&unk_100E4D218, &type metadata for AirPodsLEInitiatePairingCommandPayload);
    atomic_store(result, (unint64_t *)&qword_1010EC618);
  }
  return result;
}

uint64_t sub_10005A27C()
{
  uint64_t v0;

  sub_10001BC14(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
  sub_10001BC14(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
  sub_10001BC14(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56));
  sub_10001BC14(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72));
  sub_10001BC14(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88));
  return swift_deallocObject(v0, 96, 7);
}

unint64_t sub_10005A2C0()
{
  unint64_t result;

  result = qword_1010EC620;
  if (!qword_1010EC620)
  {
    result = swift_getWitnessTable(&unk_100E37CEC, &type metadata for AirPodsSendBeaconGroupDataCommandPayload);
    atomic_store(result, (unint64_t *)&qword_1010EC620);
  }
  return result;
}

uint64_t sub_10005A308()
{
  uint64_t v0;

  sub_10001BC14(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
  sub_10001BC14(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

unint64_t sub_10005A334()
{
  unint64_t result;

  result = qword_1010EC628;
  if (!qword_1010EC628)
  {
    result = swift_getWitnessTable(&unk_100E42918, &type metadata for AccessoryGenericPayload);
    atomic_store(result, (unint64_t *)&qword_1010EC628);
  }
  return result;
}

uint64_t sub_10005A378()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;

  v1 = type metadata accessor for MACAddress(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = *(_QWORD *)(v2 + 64);
  swift_release();
  sub_10001BC14(*((_QWORD *)v0 + 3), *((_QWORD *)v0 + 4));
  sub_10001BC14(*((_QWORD *)v0 + 5), *((_QWORD *)v0 + 6));
  sub_10001BC14(*((_QWORD *)v0 + 7), *((_QWORD *)v0 + 8));
  v5 = *((_QWORD *)v0 + 10);
  if (v5 >> 60 != 15)
    sub_10001BC14(*((_QWORD *)v0 + 9), v5);
  v6 = *((_QWORD *)v0 + 12);
  if (v6 >> 60 != 15)
    sub_10001BC14(*((_QWORD *)v0 + 11), v6);
  v7 = (v3 + 128) & ~v3;
  swift_release();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v2 + 8))(&v0[v7], v1);
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, ((v4 + v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 8, v3 | 7);
}

uint64_t sub_10005A460@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;

  v3 = *(_QWORD *)(type metadata accessor for MACAddress(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 128) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  return sub_100A83BE4((__int128 *)(v1 + 24), *(_QWORD **)(v1 + 104), *(_QWORD *)(v1 + 112), *(void (**)(_QWORD, _QWORD, _QWORD))(v1 + 120), v1 + v4, *(_QWORD *)(v1 + ((*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFF8)), a1);
}

uint64_t *sub_10005A4CC(uint64_t *a1, void (*a2)(uint64_t, uint64_t), void (*a3)(uint64_t, uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v6 = a1[2];
  v7 = a1[3];
  v8 = a1[4];
  v9 = a1[5];
  v10 = a1[6];
  v11 = a1[7];
  v12 = a1[8];
  v14 = a1[9];
  a2(*a1, a1[1]);
  a2(v6, v7);
  a2(v8, v9);
  a3(v10, v11);
  a3(v12, v14);
  return a1;
}

uint64_t sub_10005A56C(uint64_t a1)
{
  uint64_t v1;

  return sub_100C9DC2C(a1, *(_BYTE *)(v1 + 16), *(void **)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40));
}

uint64_t sub_10005A58C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10005A59C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc(dword_1010EC65C);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_100004A74;
  return ((uint64_t (*)(uint64_t, uint64_t *))((char *)&dword_1010EC658 + dword_1010EC658))(a1, a2);
}

uint64_t sub_10005A610(uint64_t a1, char a2)
{
  uint64_t v2;

  *(_BYTE *)(v2 + 32) = a2;
  *(_QWORD *)(v2 + 24) = a1;
  return swift_task_switch(sub_10005A62C, 0, 0);
}

uint64_t sub_10005A62C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;

  if ((*(_BYTE *)(v0 + 32) & 1) != 0)
    return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
  v1 = *(_QWORD *)(v0 + 24);
  v2 = qword_1010E98F0;
  swift_retain();
  if (v2 != -1)
    swift_once(&qword_1010E98F0, sub_10003868C);
  v3 = type metadata accessor for Logger(0);
  sub_10001A9E8(v3, (uint64_t)qword_1010EC1C8);
  v4 = swift_retain_n(v1, 2);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.default.getter(v5);
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(12, -1);
    v8 = swift_slowAlloc(32, -1);
    *(_DWORD *)v7 = 136315138;
    v14 = v8;
    *(_QWORD *)(v0 + 16) = v1;
    v9 = type metadata accessor for Peripheral(0);
    v10 = sub_100006C64(&qword_1010EC508, 255, (uint64_t (*)(uint64_t))&type metadata accessor for Peripheral, (uint64_t)&protocol conformance descriptor for Peripheral);
    v11 = dispatch thunk of CustomStringConvertible.description.getter(v9, v10);
    *(_QWORD *)(v0 + 16) = sub_100016940(v11, v12, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v7 + 4, v7 + 12);
    swift_bridgeObjectRelease();
    swift_release_n(v1, 2);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Discovered peripheral: %s", v7, 0xCu);
    swift_arrayDestroy(v8, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v7, -1, -1);
  }
  else
  {
    swift_release_n(v1, 2);
  }

  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 24));
}

unint64_t sub_10005A828(unint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t, uint64_t, __n128);
  __n128 v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  _QWORD *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  int *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(uint64_t, uint64_t, uint64_t);
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v71;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v43 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = v43 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    if (swift_getEnumCaseMultiPayload(a2, a3) != 1)
    {
      v44 = *(_QWORD *)a2;
      v45 = *(_QWORD *)(a2 + 8);
      sub_10001BBBC(*(_QWORD *)a2, v45);
      *(_QWORD *)a1 = v44;
      *(_QWORD *)(a1 + 8) = v45;
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
      *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
      v46 = (int *)type metadata accessor for OwnedBeaconGroup(0);
      v47 = v46[6];
      v48 = a1 + v47;
      v49 = a2 + v47;
      v50 = type metadata accessor for UUID(0);
      v51 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v50 - 8) + 16);
      v51(v48, v49, v50);
      v52 = v46[7];
      v53 = a1 + v52;
      v54 = a2 + v52;
      v55 = type metadata accessor for MACAddress(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v55 - 8) + 16))(v53, v54, v55);
      *(_BYTE *)(a1 + v46[8]) = *(_BYTE *)(a2 + v46[8]);
      v56 = v46[9];
      v57 = (_QWORD *)(a1 + v56);
      v58 = (_QWORD *)(a2 + v56);
      v59 = v58[1];
      *v57 = *v58;
      v57[1] = v59;
      v60 = v46[10];
      v61 = *(_QWORD *)(a2 + v60);
      *(_QWORD *)(a1 + v60) = v61;
      swift_bridgeObjectRetain(v59);
      swift_bridgeObjectRetain(v61);
      v62 = *(int *)(sub_10001A9A8(&qword_1010EC568) + 48);
      v63 = (uint64_t *)(a1 + v62);
      v64 = a2 + v62;
      v65 = *(_QWORD *)(a2 + v62);
      v66 = *(_QWORD *)(v64 + 8);
      sub_10001BBBC(v65, v66);
      *v63 = v65;
      v63[1] = v66;
      v67 = type metadata accessor for OwnedBeaconRecord(0);
      v51((uint64_t)v63 + *(int *)(v67 + 20), v64 + *(int *)(v67 + 20), v50);
      v68 = v64 + *(int *)(v67 + 24);
      v71 = type metadata accessor for StableIdentifier(0);
      v69 = (char *)&loc_10005AB44 + 4 * byte_100E22923[swift_getEnumCaseMultiPayload(v68, v71)];
      __asm { BR              X10 }
    }
    v7 = type metadata accessor for UUID(0);
    (*(void (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = (int *)type metadata accessor for StandaloneBeacon(0);
    v9 = v8[5];
    v10 = a1 + v9;
    v11 = a2 + v9;
    v12 = type metadata accessor for MACAddress(0);
    v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
    v13(v10, v11, v12);
    v13(a1 + v8[6], a2 + v8[6], v12);
    v14 = v8[7];
    v15 = (_QWORD *)(a1 + v14);
    v16 = (_QWORD *)(a2 + v14);
    v17 = v16[1];
    *v15 = *v16;
    v15[1] = v17;
    v18 = v8[8];
    v19 = a1 + v18;
    v20 = a2 + v18;
    v21 = type metadata accessor for Date(0);
    v22 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)(v21 - 8) + 16);
    v23 = swift_bridgeObjectRetain(v17);
    v22(v19, v20, v21, v23);
    v24 = v8[9];
    v25 = (uint64_t *)(a1 + v24);
    v26 = (uint64_t *)(a2 + v24);
    v27 = *v26;
    v28 = v26[1];
    sub_10001BBBC(*v26, v28);
    *v25 = v27;
    v25[1] = v28;
    v29 = v8[10];
    v30 = (uint64_t *)(a1 + v29);
    v31 = (_QWORD *)(a2 + v29);
    v32 = *(_QWORD *)(a2 + v29);
    v33 = *(_QWORD *)(a2 + v29 + 8);
    sub_10001BBBC(v32, v33);
    *v30 = v32;
    v30[1] = v33;
    v34 = v31[2];
    v35 = v31[3];
    sub_10001BBBC(v34, v35);
    v30[2] = v34;
    v30[3] = v35;
    v36 = v31[4];
    v37 = v31[5];
    sub_10001BBBC(v36, v37);
    v30[4] = v36;
    v30[5] = v37;
    v38 = v8[11];
    v39 = (uint64_t *)(a1 + v38);
    v40 = (uint64_t *)(a2 + v38);
    v41 = *v40;
    v42 = v40[1];
    sub_10001BBBC(*v40, v42);
    *v39 = v41;
    v39[1] = v42;
    swift_storeEnumTagMultiPayload(a1, a3, 1);
  }
  return a1;
}

uint64_t sub_10005AEB8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  unint64_t v27;
  uint64_t *v28;
  unint64_t v29;

  if (swift_getEnumCaseMultiPayload(a1, a2) == 1)
  {
    v3 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
    v4 = (int *)type metadata accessor for StandaloneBeacon(0);
    v5 = a1 + v4[5];
    v6 = type metadata accessor for MACAddress(0);
    v7 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8);
    v7(v5, v6);
    v7(a1 + v4[6], v6);
    swift_bridgeObjectRelease();
    v8 = a1 + v4[8];
    v9 = type metadata accessor for Date(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
    sub_10001BC14(*(_QWORD *)(a1 + v4[9]), *(_QWORD *)(a1 + v4[9] + 8));
    v10 = a1 + v4[10];
    sub_10001BC14(*(_QWORD *)v10, *(_QWORD *)(v10 + 8));
    sub_10001BC14(*(_QWORD *)(v10 + 16), *(_QWORD *)(v10 + 24));
    sub_10001BC14(*(_QWORD *)(v10 + 32), *(_QWORD *)(v10 + 40));
    return sub_10001BC14(*(_QWORD *)(a1 + v4[11]), *(_QWORD *)(a1 + v4[11] + 8));
  }
  else
  {
    sub_10001BC14(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
    v12 = type metadata accessor for OwnedBeaconGroup(0);
    v13 = a1 + *(int *)(v12 + 24);
    v14 = type metadata accessor for UUID(0);
    v15 = *(_QWORD *)(v14 - 8);
    v16 = *(void (**)(uint64_t, uint64_t))(v15 + 8);
    v16(v13, v14);
    v17 = a1 + *(int *)(v12 + 28);
    v18 = type metadata accessor for MACAddress(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(v17, v18);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v19 = a1 + *(int *)(sub_10001A9A8(&qword_1010EC568) + 48);
    sub_10001BC14(*(_QWORD *)v19, *(_QWORD *)(v19 + 8));
    v20 = (int *)type metadata accessor for OwnedBeaconRecord(0);
    v16(v19 + v20[5], v14);
    v21 = v19 + v20[6];
    v22 = type metadata accessor for StableIdentifier(0);
    switch(swift_getEnumCaseMultiPayload(v21, v22))
    {
      case 0u:
      case 4u:
        goto LABEL_7;
      case 1u:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_7;
      case 2u:
        v16(v21, v14);
        sub_10001A9A8(&qword_101106F40);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_7;
      case 3u:
        v16(v21, v14);
        sub_10001A9A8((uint64_t *)&unk_1010F46F0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_7:
        swift_bridgeObjectRelease();
        break;
      default:
        break;
    }
    v23 = v19 + v20[7];
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v23, 1, v14))
      v16(v23, v14);
    v24 = v19 + v20[8];
    v25 = type metadata accessor for Date(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 8))(v24, v25);
    sub_10001BC14(*(_QWORD *)(v19 + v20[9]), *(_QWORD *)(v19 + v20[9] + 8));
    v26 = (uint64_t *)(v19 + v20[10]);
    v27 = v26[1];
    if (v27 >> 60 != 15)
      sub_10001BC14(*v26, v27);
    v28 = (uint64_t *)(v19 + v20[11]);
    v29 = v28[1];
    if (v29 >> 60 != 15)
      sub_10001BC14(*v28, v29);
    sub_10001BC14(*(_QWORD *)(v19 + v20[12]), *(_QWORD *)(v19 + v20[12] + 8));
    sub_10001BC14(*(_QWORD *)(v19 + v20[13]), *(_QWORD *)(v19 + v20[13] + 8));
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_10005B274(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t, uint64_t, __n128);
  __n128 v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  _QWORD *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  int *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(uint64_t, uint64_t, uint64_t);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;

  if (swift_getEnumCaseMultiPayload(a2, a3) != 1)
  {
    v42 = *(_QWORD *)a2;
    v43 = *(_QWORD *)(a2 + 8);
    sub_10001BBBC(*(_QWORD *)a2, v43);
    *(_QWORD *)a1 = v42;
    *(_QWORD *)(a1 + 8) = v43;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
    v44 = (int *)type metadata accessor for OwnedBeaconGroup(0);
    v45 = v44[6];
    v46 = a1 + v45;
    v47 = a2 + v45;
    v48 = type metadata accessor for UUID(0);
    v49 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v48 - 8) + 16);
    v49(v46, v47, v48);
    v50 = v44[7];
    v51 = a1 + v50;
    v52 = a2 + v50;
    v53 = type metadata accessor for MACAddress(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v53 - 8) + 16))(v51, v52, v53);
    *(_BYTE *)(a1 + v44[8]) = *(_BYTE *)(a2 + v44[8]);
    v54 = v44[9];
    v55 = (_QWORD *)(a1 + v54);
    v56 = (_QWORD *)(a2 + v54);
    v57 = v56[1];
    *v55 = *v56;
    v55[1] = v57;
    v58 = v44[10];
    v59 = *(_QWORD *)(a2 + v58);
    *(_QWORD *)(a1 + v58) = v59;
    swift_bridgeObjectRetain(v57);
    swift_bridgeObjectRetain(v59);
    v60 = *(int *)(sub_10001A9A8(&qword_1010EC568) + 48);
    v61 = (uint64_t *)(a1 + v60);
    v62 = a2 + v60;
    v63 = *(_QWORD *)(a2 + v60);
    v64 = *(_QWORD *)(v62 + 8);
    sub_10001BBBC(v63, v64);
    *v61 = v63;
    v61[1] = v64;
    v65 = type metadata accessor for OwnedBeaconRecord(0);
    v49((uint64_t)v61 + *(int *)(v65 + 20), v62 + *(int *)(v65 + 20), v48);
    v66 = v62 + *(int *)(v65 + 24);
    v67 = type metadata accessor for StableIdentifier(0);
    v68 = (char *)&loc_10005B568 + 4 * byte_100E2292D[swift_getEnumCaseMultiPayload(v66, v67)];
    __asm { BR              X10 }
  }
  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = (int *)type metadata accessor for StandaloneBeacon(0);
  v8 = v7[5];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = type metadata accessor for MACAddress(0);
  v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
  v12(v9, v10, v11);
  v12(a1 + v7[6], a2 + v7[6], v11);
  v13 = v7[7];
  v14 = (_QWORD *)(a1 + v13);
  v15 = (_QWORD *)(a2 + v13);
  v16 = v15[1];
  *v14 = *v15;
  v14[1] = v16;
  v17 = v7[8];
  v18 = a1 + v17;
  v19 = a2 + v17;
  v20 = type metadata accessor for Date(0);
  v21 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)(v20 - 8) + 16);
  v22 = swift_bridgeObjectRetain(v16);
  v21(v18, v19, v20, v22);
  v23 = v7[9];
  v24 = (uint64_t *)(a1 + v23);
  v25 = (uint64_t *)(a2 + v23);
  v26 = *v25;
  v27 = v25[1];
  sub_10001BBBC(*v25, v27);
  *v24 = v26;
  v24[1] = v27;
  v28 = v7[10];
  v29 = (uint64_t *)(a1 + v28);
  v30 = (_QWORD *)(a2 + v28);
  v31 = *(_QWORD *)(a2 + v28);
  v32 = *(_QWORD *)(a2 + v28 + 8);
  sub_10001BBBC(v31, v32);
  *v29 = v31;
  v29[1] = v32;
  v33 = v30[2];
  v34 = v30[3];
  sub_10001BBBC(v33, v34);
  v29[2] = v33;
  v29[3] = v34;
  v35 = v30[4];
  v36 = v30[5];
  sub_10001BBBC(v35, v36);
  v29[4] = v35;
  v29[5] = v36;
  v37 = v7[11];
  v38 = (uint64_t *)(a1 + v37);
  v39 = (uint64_t *)(a2 + v37);
  v40 = *v39;
  v41 = v39[1];
  sub_10001BBBC(*v39, v41);
  *v38 = v40;
  v38[1] = v41;
  swift_storeEnumTagMultiPayload(a1, a3, 1);
  return a1;
}

uint64_t sub_10005B8E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t, uint64_t, __n128);
  __n128 v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  _QWORD *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  int *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(uint64_t, uint64_t, uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;

  if (a1 != a2)
  {
    sub_1000126B0(a1, type metadata accessor for AirPodsLEPairingService.BeaconCreationResult);
    if (swift_getEnumCaseMultiPayload(a2, a3) != 1)
    {
      v42 = *(_QWORD *)a2;
      v43 = *(_QWORD *)(a2 + 8);
      sub_10001BBBC(*(_QWORD *)a2, v43);
      *(_QWORD *)a1 = v42;
      *(_QWORD *)(a1 + 8) = v43;
      v44 = *(_QWORD *)(a2 + 16);
      *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
      *(_QWORD *)(a1 + 16) = v44;
      v45 = (int *)type metadata accessor for OwnedBeaconGroup(0);
      v46 = v45[6];
      v47 = a1 + v46;
      v48 = a2 + v46;
      v49 = type metadata accessor for UUID(0);
      v50 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 16);
      v50(v47, v48, v49);
      v51 = v45[7];
      v52 = a1 + v51;
      v53 = a2 + v51;
      v54 = type metadata accessor for MACAddress(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v54 - 8) + 16))(v52, v53, v54);
      *(_BYTE *)(a1 + v45[8]) = *(_BYTE *)(a2 + v45[8]);
      v55 = v45[9];
      v56 = (_QWORD *)(a1 + v55);
      v57 = (_QWORD *)(a2 + v55);
      *v56 = *v57;
      v58 = v57[1];
      v56[1] = v58;
      v59 = v45[10];
      v60 = *(_QWORD *)(a2 + v59);
      *(_QWORD *)(a1 + v59) = v60;
      swift_bridgeObjectRetain(v58);
      swift_bridgeObjectRetain(v60);
      v61 = *(int *)(sub_10001A9A8(&qword_1010EC568) + 48);
      v62 = (uint64_t *)(a1 + v61);
      v63 = a2 + v61;
      v64 = *(_QWORD *)(a2 + v61);
      v65 = *(_QWORD *)(v63 + 8);
      sub_10001BBBC(v64, v65);
      *v62 = v64;
      v62[1] = v65;
      v66 = type metadata accessor for OwnedBeaconRecord(0);
      v50((uint64_t)v62 + *(int *)(v66 + 20), v63 + *(int *)(v66 + 20), v49);
      v67 = v63 + *(int *)(v66 + 24);
      v68 = type metadata accessor for StableIdentifier(0);
      v69 = (char *)&loc_10005BBFC + 4 * byte_100E22932[swift_getEnumCaseMultiPayload(v67, v68)];
      __asm { BR              X10 }
    }
    v6 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
    v7 = (int *)type metadata accessor for StandaloneBeacon(0);
    v8 = v7[5];
    v9 = a1 + v8;
    v10 = a2 + v8;
    v11 = type metadata accessor for MACAddress(0);
    v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    v12(v9, v10, v11);
    v12(a1 + v7[6], a2 + v7[6], v11);
    v13 = v7[7];
    v14 = (_QWORD *)(a1 + v13);
    v15 = (_QWORD *)(a2 + v13);
    *v14 = *v15;
    v16 = v15[1];
    v14[1] = v16;
    v17 = v7[8];
    v18 = a1 + v17;
    v19 = a2 + v17;
    v20 = type metadata accessor for Date(0);
    v21 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)(v20 - 8) + 16);
    v22 = swift_bridgeObjectRetain(v16);
    v21(v18, v19, v20, v22);
    v23 = v7[9];
    v24 = (uint64_t *)(a1 + v23);
    v25 = (uint64_t *)(a2 + v23);
    v26 = *v25;
    v27 = v25[1];
    sub_10001BBBC(*v25, v27);
    *v24 = v26;
    v24[1] = v27;
    v28 = v7[10];
    v29 = (uint64_t *)(a1 + v28);
    v30 = (_QWORD *)(a2 + v28);
    v31 = *(_QWORD *)(a2 + v28);
    v32 = *(_QWORD *)(a2 + v28 + 8);
    sub_10001BBBC(v31, v32);
    *v29 = v31;
    v29[1] = v32;
    v33 = v30[2];
    v34 = v30[3];
    sub_10001BBBC(v33, v34);
    v29[2] = v33;
    v29[3] = v34;
    v35 = v30[4];
    v36 = v30[5];
    sub_10001BBBC(v35, v36);
    v29[4] = v35;
    v29[5] = v36;
    v37 = v7[11];
    v38 = (uint64_t *)(a1 + v37);
    v39 = (uint64_t *)(a2 + v37);
    v40 = *v39;
    v41 = v39[1];
    sub_10001BBBC(*v39, v41);
    *v38 = v40;
    v38[1] = v41;
    swift_storeEnumTagMultiPayload(a1, a3, 1);
  }
  return a1;
}

uint64_t sub_10005BFDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _OWORD *v18;
  _OWORD *v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int *v38;
  uint64_t v39;
  _BYTE *v40;
  _BYTE *v41;
  uint64_t v42;
  int EnumCaseMultiPayload;
  int *v44;
  int *v45;
  uint64_t v46;
  void *v47;
  const void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v55;

  if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
  {
    v6 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
    v7 = (int *)type metadata accessor for StandaloneBeacon(0);
    v8 = v7[5];
    v9 = a1 + v8;
    v10 = a2 + v8;
    v11 = type metadata accessor for MACAddress(0);
    v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32);
    v12(v9, v10, v11);
    v12(a1 + v7[6], a2 + v7[6], v11);
    *(_OWORD *)(a1 + v7[7]) = *(_OWORD *)(a2 + v7[7]);
    v13 = v7[8];
    v14 = a1 + v13;
    v15 = a2 + v13;
    v16 = type metadata accessor for Date(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v14, v15, v16);
    *(_OWORD *)(a1 + v7[9]) = *(_OWORD *)(a2 + v7[9]);
    v17 = v7[10];
    v18 = (_OWORD *)(a1 + v17);
    v19 = (_OWORD *)(a2 + v17);
    v20 = v19[1];
    *v18 = *v19;
    v18[1] = v20;
    v18[2] = v19[2];
    *(_OWORD *)(a1 + v7[11]) = *(_OWORD *)(a2 + v7[11]);
    v21 = a1;
    v22 = a3;
    v23 = 1;
  }
  else
  {
    v55 = a3;
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
    v24 = (int *)type metadata accessor for OwnedBeaconGroup(0);
    v25 = v24[6];
    v26 = a1 + v25;
    v27 = a2 + v25;
    v28 = type metadata accessor for UUID(0);
    v29 = *(_QWORD *)(v28 - 8);
    v30 = *(void (**)(uint64_t, uint64_t, uint64_t))(v29 + 32);
    v30(v26, v27, v28);
    v31 = v24[7];
    v32 = a1 + v31;
    v33 = a2 + v31;
    v34 = type metadata accessor for MACAddress(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 32))(v32, v33, v34);
    *(_BYTE *)(a1 + v24[8]) = *(_BYTE *)(a2 + v24[8]);
    *(_OWORD *)(a1 + v24[9]) = *(_OWORD *)(a2 + v24[9]);
    *(_QWORD *)(a1 + v24[10]) = *(_QWORD *)(a2 + v24[10]);
    v35 = *(int *)(sub_10001A9A8(&qword_1010EC568) + 48);
    v36 = a1 + v35;
    v37 = a2 + v35;
    *(_OWORD *)(a1 + v35) = *(_OWORD *)(a2 + v35);
    v38 = (int *)type metadata accessor for OwnedBeaconRecord(0);
    v30(v36 + v38[5], v37 + v38[5], v28);
    v39 = v38[6];
    v40 = (_BYTE *)(v36 + v39);
    v41 = (_BYTE *)(v37 + v39);
    v42 = type metadata accessor for StableIdentifier(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v41, v42);
    if (EnumCaseMultiPayload == 3)
    {
      v30((uint64_t)v40, (uint64_t)v41, v28);
      v45 = (int *)sub_10001A9A8((uint64_t *)&unk_1010F46F0);
      *(_OWORD *)&v40[v45[12]] = *(_OWORD *)&v41[v45[12]];
      *(_OWORD *)&v40[v45[16]] = *(_OWORD *)&v41[v45[16]];
      *(_OWORD *)&v40[v45[20]] = *(_OWORD *)&v41[v45[20]];
      v40[v45[24]] = v41[v45[24]];
      swift_storeEnumTagMultiPayload(v40, v42, 3);
    }
    else if (EnumCaseMultiPayload == 2)
    {
      v30((uint64_t)v40, (uint64_t)v41, v28);
      v44 = (int *)sub_10001A9A8(&qword_101106F40);
      *(_OWORD *)&v40[v44[12]] = *(_OWORD *)&v41[v44[12]];
      *(_OWORD *)&v40[v44[16]] = *(_OWORD *)&v41[v44[16]];
      *(_OWORD *)&v40[v44[20]] = *(_OWORD *)&v41[v44[20]];
      *(_WORD *)&v40[v44[24]] = *(_WORD *)&v41[v44[24]];
      *(_OWORD *)&v40[v44[28]] = *(_OWORD *)&v41[v44[28]];
      swift_storeEnumTagMultiPayload(v40, v42, 2);
    }
    else
    {
      memcpy(v40, v41, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
    }
    v46 = v38[7];
    v47 = (void *)(v36 + v46);
    v48 = (const void *)(v37 + v46);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v29 + 48))(v37 + v46, 1, v28))
    {
      v49 = sub_10001A9A8(&qword_1010ED860);
      memcpy(v47, v48, *(_QWORD *)(*(_QWORD *)(v49 - 8) + 64));
    }
    else
    {
      v30((uint64_t)v47, (uint64_t)v48, v28);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v47, 0, 1, v28);
    }
    v50 = v38[8];
    v51 = v36 + v50;
    v52 = v37 + v50;
    v53 = type metadata accessor for Date(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v53 - 8) + 32))(v51, v52, v53);
    *(_OWORD *)(v36 + v38[9]) = *(_OWORD *)(v37 + v38[9]);
    *(_OWORD *)(v36 + v38[10]) = *(_OWORD *)(v37 + v38[10]);
    *(_OWORD *)(v36 + v38[11]) = *(_OWORD *)(v37 + v38[11]);
    *(_OWORD *)(v36 + v38[12]) = *(_OWORD *)(v37 + v38[12]);
    *(_OWORD *)(v36 + v38[13]) = *(_OWORD *)(v37 + v38[13]);
    *(_OWORD *)(v36 + v38[14]) = *(_OWORD *)(v37 + v38[14]);
    *(_OWORD *)(v36 + v38[15]) = *(_OWORD *)(v37 + v38[15]);
    *(_QWORD *)(v36 + v38[16]) = *(_QWORD *)(v37 + v38[16]);
    *(_QWORD *)(v36 + v38[17]) = *(_QWORD *)(v37 + v38[17]);
    *(_BYTE *)(v36 + v38[18]) = *(_BYTE *)(v37 + v38[18]);
    *(_BYTE *)(v36 + v38[19]) = *(_BYTE *)(v37 + v38[19]);
    *(_BYTE *)(v36 + v38[20]) = *(_BYTE *)(v37 + v38[20]);
    v21 = a1;
    v22 = v55;
    v23 = 0;
  }
  swift_storeEnumTagMultiPayload(v21, v22, v23);
  return a1;
}

uint64_t sub_10005C464(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _OWORD *v18;
  _OWORD *v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int *v37;
  uint64_t v38;
  _BYTE *v39;
  _BYTE *v40;
  uint64_t v41;
  int EnumCaseMultiPayload;
  int *v43;
  int *v44;
  uint64_t v45;
  void *v46;
  const void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v54;

  if (a1 != a2)
  {
    sub_1000126B0(a1, type metadata accessor for AirPodsLEPairingService.BeaconCreationResult);
    if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
    {
      v6 = type metadata accessor for UUID(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
      v7 = (int *)type metadata accessor for StandaloneBeacon(0);
      v8 = v7[5];
      v9 = a1 + v8;
      v10 = a2 + v8;
      v11 = type metadata accessor for MACAddress(0);
      v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32);
      v12(v9, v10, v11);
      v12(a1 + v7[6], a2 + v7[6], v11);
      *(_OWORD *)(a1 + v7[7]) = *(_OWORD *)(a2 + v7[7]);
      v13 = v7[8];
      v14 = a1 + v13;
      v15 = a2 + v13;
      v16 = type metadata accessor for Date(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v14, v15, v16);
      *(_OWORD *)(a1 + v7[9]) = *(_OWORD *)(a2 + v7[9]);
      v17 = v7[10];
      v18 = (_OWORD *)(a1 + v17);
      v19 = (_OWORD *)(a2 + v17);
      v20 = v19[1];
      *v18 = *v19;
      v18[1] = v20;
      v18[2] = v19[2];
      *(_OWORD *)(a1 + v7[11]) = *(_OWORD *)(a2 + v7[11]);
      v21 = a1;
      v22 = a3;
      v23 = 1;
    }
    else
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
      *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
      v24 = (int *)type metadata accessor for OwnedBeaconGroup(0);
      v25 = v24[6];
      v26 = a1 + v25;
      v27 = a2 + v25;
      v28 = type metadata accessor for UUID(0);
      v54 = *(_QWORD *)(v28 - 8);
      v29 = *(void (**)(uint64_t, uint64_t, uint64_t))(v54 + 32);
      v29(v26, v27, v28);
      v30 = v24[7];
      v31 = a1 + v30;
      v32 = a2 + v30;
      v33 = type metadata accessor for MACAddress(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 32))(v31, v32, v33);
      *(_BYTE *)(a1 + v24[8]) = *(_BYTE *)(a2 + v24[8]);
      *(_OWORD *)(a1 + v24[9]) = *(_OWORD *)(a2 + v24[9]);
      *(_QWORD *)(a1 + v24[10]) = *(_QWORD *)(a2 + v24[10]);
      v34 = *(int *)(sub_10001A9A8(&qword_1010EC568) + 48);
      v35 = a1 + v34;
      v36 = a2 + v34;
      *(_OWORD *)(a1 + v34) = *(_OWORD *)(a2 + v34);
      v37 = (int *)type metadata accessor for OwnedBeaconRecord(0);
      v29(v35 + v37[5], v36 + v37[5], v28);
      v38 = v37[6];
      v39 = (_BYTE *)(v35 + v38);
      v40 = (_BYTE *)(v36 + v38);
      v41 = type metadata accessor for StableIdentifier(0);
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v40, v41);
      if (EnumCaseMultiPayload == 3)
      {
        v29((uint64_t)v39, (uint64_t)v40, v28);
        v44 = (int *)sub_10001A9A8((uint64_t *)&unk_1010F46F0);
        *(_OWORD *)&v39[v44[12]] = *(_OWORD *)&v40[v44[12]];
        *(_OWORD *)&v39[v44[16]] = *(_OWORD *)&v40[v44[16]];
        *(_OWORD *)&v39[v44[20]] = *(_OWORD *)&v40[v44[20]];
        v39[v44[24]] = v40[v44[24]];
        swift_storeEnumTagMultiPayload(v39, v41, 3);
      }
      else if (EnumCaseMultiPayload == 2)
      {
        v29((uint64_t)v39, (uint64_t)v40, v28);
        v43 = (int *)sub_10001A9A8(&qword_101106F40);
        *(_OWORD *)&v39[v43[12]] = *(_OWORD *)&v40[v43[12]];
        *(_OWORD *)&v39[v43[16]] = *(_OWORD *)&v40[v43[16]];
        *(_OWORD *)&v39[v43[20]] = *(_OWORD *)&v40[v43[20]];
        *(_WORD *)&v39[v43[24]] = *(_WORD *)&v40[v43[24]];
        *(_OWORD *)&v39[v43[28]] = *(_OWORD *)&v40[v43[28]];
        swift_storeEnumTagMultiPayload(v39, v41, 2);
      }
      else
      {
        memcpy(v39, v40, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
      }
      v45 = v37[7];
      v46 = (void *)(v35 + v45);
      v47 = (const void *)(v36 + v45);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v54 + 48))(v36 + v45, 1, v28))
      {
        v48 = sub_10001A9A8(&qword_1010ED860);
        memcpy(v46, v47, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
      }
      else
      {
        v29((uint64_t)v46, (uint64_t)v47, v28);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v54 + 56))(v46, 0, 1, v28);
      }
      v49 = v37[8];
      v50 = v35 + v49;
      v51 = v36 + v49;
      v52 = type metadata accessor for Date(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v52 - 8) + 32))(v50, v51, v52);
      *(_OWORD *)(v35 + v37[9]) = *(_OWORD *)(v36 + v37[9]);
      *(_OWORD *)(v35 + v37[10]) = *(_OWORD *)(v36 + v37[10]);
      *(_OWORD *)(v35 + v37[11]) = *(_OWORD *)(v36 + v37[11]);
      *(_OWORD *)(v35 + v37[12]) = *(_OWORD *)(v36 + v37[12]);
      *(_OWORD *)(v35 + v37[13]) = *(_OWORD *)(v36 + v37[13]);
      *(_OWORD *)(v35 + v37[14]) = *(_OWORD *)(v36 + v37[14]);
      *(_OWORD *)(v35 + v37[15]) = *(_OWORD *)(v36 + v37[15]);
      *(_QWORD *)(v35 + v37[16]) = *(_QWORD *)(v36 + v37[16]);
      *(_QWORD *)(v35 + v37[17]) = *(_QWORD *)(v36 + v37[17]);
      *(_BYTE *)(v35 + v37[18]) = *(_BYTE *)(v36 + v37[18]);
      *(_BYTE *)(v35 + v37[19]) = *(_BYTE *)(v36 + v37[19]);
      *(_BYTE *)(v35 + v37[20]) = *(_BYTE *)(v36 + v37[20]);
      v21 = a1;
      v22 = a3;
      v23 = 0;
    }
    swift_storeEnumTagMultiPayload(v21, v22, v23);
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for TimeBasedKeysCriteria(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a3 - 8) + 48))();
}

uint64_t storeEnumTagSinglePayload for TimeBasedKeysCriteria(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a4 - 8) + 56))();
}

uint64_t sub_10005C924(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_storeEnumTagMultiPayload(a1, a3, a2);
}

uint64_t sub_10005C934(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _BYTE v9[32];
  _QWORD v10[2];

  v2 = type metadata accessor for OwnedBeaconGroup(319);
  if (v3 <= 0x3F)
  {
    v4 = type metadata accessor for OwnedBeaconRecord(319);
    if (v5 > 0x3F)
    {
      return v4;
    }
    else
    {
      swift_getTupleTypeLayout2(v9, *(_QWORD *)(v2 - 8) + 64, *(_QWORD *)(v4 - 8) + 64);
      v10[0] = v9;
      v6 = type metadata accessor for StandaloneBeacon(319);
      v2 = v6;
      if (v7 <= 0x3F)
      {
        v10[1] = *(_QWORD *)(v6 - 8) + 64;
        swift_initEnumMetadataMultiPayload(a1, 256, 2, v10);
        return 0;
      }
    }
  }
  return v2;
}

unint64_t *initializeBufferWithCopyOfBuffer for AirPodsLEPairingService.Error(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;

  v3 = *a2;
  sub_10005856C(*a2);
  *a1 = v3;
  return a1;
}

unint64_t destroy for AirPodsLEPairingService.Error(unint64_t *a1)
{
  return sub_100058554(*a1);
}

unint64_t *assignWithCopy for AirPodsLEPairingService.Error(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;
  unint64_t v4;

  v3 = *a2;
  sub_10005856C(*a2);
  v4 = *a1;
  *a1 = v3;
  sub_100058554(v4);
  return a1;
}

_QWORD *initializeWithTake for AirPodsLEPairingService.Error(_QWORD *result, _QWORD *a2)
{
  *result = *a2;
  return result;
}

unint64_t *assignWithTake for AirPodsLEPairingService.Error(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;

  v3 = *a1;
  *a1 = *a2;
  sub_100058554(v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for AirPodsLEPairingService.Error(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xE && *(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 14);
  v3 = (((*(_QWORD *)a1 >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(_QWORD *)a1 >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xD)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for AirPodsLEPairingService.Error(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xD)
  {
    *(_QWORD *)result = a2 - 14;
    if (a3 >= 0xE)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0xE)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_QWORD *)result = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
  }
  return result;
}

uint64_t sub_10005CB3C(_QWORD *a1)
{
  uint64_t v1;

  v1 = *a1 >> 62;
  if (v1 <= 1)
    return v1;
  else
    return *a1 + 2;
}

_QWORD *sub_10005CB54(_QWORD *result)
{
  *result &= 0x3FFFFFFFFFFFFFFFuLL;
  return result;
}

_QWORD *sub_10005CB64(_QWORD *result, uint64_t a2)
{
  if (a2 < 2)
    *result = *result & 0xFFFFFFFFFFFFFFFLL | (a2 << 62);
  else
    *result = (a2 - 2) | 0x8000000000000000;
  return result;
}

ValueMetadata *type metadata accessor for AirPodsLEPairingService.Error()
{
  return &type metadata for AirPodsLEPairingService.Error;
}

uint64_t sub_10005CD54(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;

  v2[5] = a1;
  v2[6] = v1;
  v3 = sub_10001A9A8(&qword_1010EC838);
  v2[7] = v3;
  v2[8] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_10001A9A8((uint64_t *)&unk_1010EE290);
  v2[9] = v4;
  v2[10] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for OwnerSharingCircle(0);
  v2[11] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for OwnerPeerTrust(0);
  v2[12] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for MemberSharingCircle(0);
  v2[13] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v2[14] = v8;
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[15] = swift_task_alloc(v9);
  v2[16] = swift_task_alloc(v9);
  v10 = (*(_QWORD *)(*(_QWORD *)(sub_10001A9A8((uint64_t *)&unk_101111440) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[17] = swift_task_alloc(v10);
  v2[18] = swift_task_alloc(v10);
  v11 = type metadata accessor for UUID(0);
  v2[19] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v2[20] = v12;
  v13 = *(_QWORD *)(v12 + 64);
  v2[21] = v13;
  v14 = (v13 + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[22] = swift_task_alloc(v14);
  v2[23] = swift_task_alloc(v14);
  return swift_task_switch(sub_10005CEC4, v1, 0);
}

uint64_t sub_10005CEC4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  _BOOL4 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  if (qword_1010E9938 != -1)
    swift_once(&qword_1010E9938, sub_1000AFBB0);
  v1 = v0[5];
  v2 = v0[23];
  v3 = v0[19];
  v4 = v0[20];
  v5 = type metadata accessor for Logger(0);
  sub_10001A9E8(v5, (uint64_t)qword_1011B6748);
  v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v0[24] = v6;
  v7 = v6(v2, v1, v3);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter(v8);
  v10 = os_log_type_enabled(v8, v9);
  v11 = v0[23];
  v12 = v0[19];
  if (v10)
  {
    v19 = v0[20];
    v13 = swift_slowAlloc(22, -1);
    v20 = swift_slowAlloc(32, -1);
    v21 = v20;
    *(_DWORD *)v13 = 141558275;
    v0[3] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 3, v0 + 4, v13 + 4, v13 + 12);
    *(_WORD *)(v13 + 12) = 2081;
    v14 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v15 = dispatch thunk of CustomStringConvertible.description.getter(v12, v14);
    v0[4] = sub_100016940(v15, v16, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 4, v0 + 5, v13 + 14, v13 + 22);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v11, v12);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Accept %{private,mask.hash}s", (uint8_t *)v13, 0x16u);
    swift_arrayDestroy(v20, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v20, -1, -1);
    swift_slowDealloc(v13, -1, -1);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v0[20] + 8))(v0[23], v0[19]);
  }

  v17 = *(_QWORD *)(v0[6] + 112);
  v0[25] = v17;
  return swift_task_switch(sub_10005D0F8, v17, 0);
}

uint64_t sub_10005D0F8()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v2 = (_QWORD *)swift_task_alloc(v1);
  *(_QWORD *)(v0 + 208) = v2;
  v3 = sub_10001A9A8(&qword_1010EC840);
  *v2 = v0;
  v2[1] = sub_10005D174;
  return unsafeBlocking<A>(_:)(v0 + 16, sub_10001ED30, *(_QWORD *)(v0 + 200), v3);
}

uint64_t sub_10005D174()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 200);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 208));
  swift_release();
  return swift_task_switch(sub_10005D1D0, v1, 0);
}

uint64_t sub_10005D1D0()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[6];
  v0[27] = v0[2];
  return swift_task_switch(sub_10005D1EC, v1, 0);
}

uint64_t sub_10005D1EC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v18;

  v1 = v0[27];
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v4 = v0[13];
    v3 = v0[14];
    v5 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v6 = *(_QWORD *)(v3 + 72);
    swift_bridgeObjectRetain(v1);
    while (1)
    {
      v7 = v0[15];
      v8 = v0[5];
      sub_10005972C(v5, v7, type metadata accessor for MemberSharingCircle);
      if ((static UUID.== infix(_:_:)(v7 + *(int *)(v4 + 28), v8) & 1) != 0)
        break;
      sub_1000126B0(v0[15], type metadata accessor for MemberSharingCircle);
      v5 += v6;
      if (!--v2)
      {
        swift_bridgeObjectRelease();
        goto LABEL_6;
      }
    }
    v10 = v0[18];
    v11 = v0[15];
    swift_bridgeObjectRelease();
    sub_1000126EC(v11, v10, type metadata accessor for MemberSharingCircle);
    v9 = 0;
  }
  else
  {
LABEL_6:
    v9 = 1;
  }
  v13 = v0[17];
  v12 = v0[18];
  v14 = v0[13];
  v15 = v0[14];
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 56))(v12, v9, 1, v14);
  swift_bridgeObjectRelease();
  sub_10000F9B8(v12, v13, (uint64_t *)&unk_101111440);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14) == 1)
  {
    v16 = v0[25];
    sub_100004048(v0[17], (uint64_t *)&unk_101111440);
    return swift_task_switch(sub_10005D480, v16, 0);
  }
  else
  {
    sub_1000126EC(v0[17], v0[16], type metadata accessor for MemberSharingCircle);
    v18 = (_QWORD *)swift_task_alloc(dword_1010EC864);
    v0[28] = v18;
    *v18 = v0;
    v18[1] = sub_10005D3A8;
    return sub_10005E0CC(v0[16]);
  }
}

uint64_t sub_10005D3A8()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 224);
  *(_QWORD *)(*v1 + 232) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_10005DFB4;
  else
    v4 = sub_10005D40C;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 48), 0);
}

uint64_t sub_10005D40C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  sub_1000126B0(v0[16], type metadata accessor for MemberSharingCircle);
  v1 = v0[6];
  sub_100004048(v0[18], (uint64_t *)&unk_101111440);
  swift_bridgeObjectRetain(*(_QWORD *)(v1 + 408));
  v0[34] = sub_100508C68(v2);
  swift_bridgeObjectRelease();
  return swift_task_switch(sub_10005D858, 0, 0);
}

uint64_t sub_10005D480()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v1 = *(_QWORD *)(v0 + 200);
  v3 = *(_QWORD *)(v0 + 168);
  v2 = *(_QWORD *)(v0 + 176);
  v4 = *(_QWORD *)(v0 + 152);
  v5 = *(_QWORD *)(v0 + 160);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v0 + 192))(v2, *(_QWORD *)(v0 + 40), v4);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (v6 + 24) & ~v6;
  v8 = swift_allocObject(&unk_101052BA0, v7 + v3, v6 | 7);
  *(_QWORD *)(v0 + 240) = v8;
  *(_QWORD *)(v8 + 16) = v1;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(v8 + v7, v2, v4);
  v9 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v10 = (_QWORD *)swift_task_alloc(v9);
  *(_QWORD *)(v0 + 248) = v10;
  *v10 = v0;
  v10[1] = sub_10005D554;
  return unsafeBlocking<A>(_:)(*(_QWORD *)(v0 + 64), sub_100066618, v8, *(_QWORD *)(v0 + 56));
}

uint64_t sub_10005D554()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 248));
  swift_release();
  return swift_task_switch(sub_10005D5B4, v1, 0);
}

uint64_t sub_10005D5B4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;

  v1 = v0[8];
  v2 = sub_10001A9A8(&qword_1010EC848);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(v1, 1, v2) == 1)
  {
    sub_100004048(v1, &qword_1010EC838);
    v3 = sub_100066624();
    v4 = swift_allocError(&type metadata for ShareAcceptUseCaseError, v3, 0, 0);
    *v5 = 0;
    swift_willThrow(v4);
    v0[40] = v4;
    v6 = v0[6];
    sub_100004048(v0[18], (uint64_t *)&unk_101111440);
    swift_bridgeObjectRetain(*(_QWORD *)(v6 + 408));
    v0[41] = sub_100508C68(v7);
    swift_bridgeObjectRelease();
    swift_errorRetain(v4);
    return swift_task_switch(sub_10005DB78, 0, 0);
  }
  else
  {
    v10 = v0[11];
    v9 = v0[12];
    v12 = v0[9];
    v11 = v0[10];
    v13 = v1 + *(int *)(v2 + 48);
    v14 = v11 + *(int *)(v12 + 48);
    sub_1000126EC(v1, v11, type metadata accessor for OwnerPeerTrust);
    sub_1000126EC(v13, v14, type metadata accessor for OwnerSharingCircle);
    v15 = v11 + *(int *)(v12 + 48);
    sub_1000126EC(v11, v9, type metadata accessor for OwnerPeerTrust);
    sub_1000126EC(v15, v10, type metadata accessor for OwnerSharingCircle);
    v16 = (_QWORD *)swift_task_alloc(dword_1010EC85C);
    v0[32] = v16;
    *v16 = v0;
    v16[1] = sub_10005D770;
    return sub_100061600(v0[11], v0[12]);
  }
}

uint64_t sub_10005D770()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 256);
  *(_QWORD *)(*v1 + 264) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_10005E038;
  else
    v4 = sub_10005D7D4;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 48), 0);
}

uint64_t sub_10005D7D4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = v0[12];
  sub_1000126B0(v0[11], type metadata accessor for OwnerSharingCircle);
  sub_1000126B0(v1, type metadata accessor for OwnerPeerTrust);
  v2 = v0[6];
  sub_100004048(v0[18], (uint64_t *)&unk_101111440);
  swift_bridgeObjectRetain(*(_QWORD *)(v2 + 408));
  v0[34] = sub_100508C68(v3);
  swift_bridgeObjectRelease();
  return swift_task_switch(sub_10005D858, 0, 0);
}

uint64_t sub_10005D858()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;

  v1 = v0[34];
  if ((v1 & 0x8000000000000000) == 0 && (v1 & 0x4000000000000000) == 0)
  {
    v2 = *(_QWORD *)(v1 + 16);
    result = swift_retain();
    v0[35] = v2;
    if (v2)
      goto LABEL_4;
LABEL_10:
    v10 = v0[6];
    swift_release_n(v0[34], 2);
    return swift_task_switch(sub_10005D960, v10, 0);
  }
  v9 = swift_retain();
  result = _CocoaArrayWrapper.endIndex.getter(v9);
  v2 = result;
  v0[35] = result;
  if (!result)
    goto LABEL_10;
LABEL_4:
  if (v2 < 1)
  {
    __break(1u);
  }
  else
  {
    v4 = v0[34];
    v0[36] = 0;
    if ((v4 & 0xC000000000000001) != 0)
    {
      v5 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, v4);
    }
    else
    {
      v5 = *(_QWORD *)(v4 + 32);
      swift_retain();
    }
    v0[37] = v5;
    v6 = type metadata accessor for AnalyticsPublisher();
    v7 = swift_allocObject(v6, 112, 15);
    v0[38] = v7;
    swift_defaultActor_initialize(v7);
    v8 = (_QWORD *)swift_task_alloc(dword_10111D22C);
    v0[39] = v8;
    *v8 = v0;
    v8[1] = sub_10005DA30;
    return sub_100CD63AC(v5);
  }
  return result;
}

uint64_t sub_10005D960()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v1 = *(_QWORD *)(v0 + 176);
  v2 = *(_QWORD *)(v0 + 184);
  v4 = *(_QWORD *)(v0 + 136);
  v3 = *(_QWORD *)(v0 + 144);
  v6 = *(_QWORD *)(v0 + 120);
  v5 = *(_QWORD *)(v0 + 128);
  v8 = *(_QWORD *)(v0 + 88);
  v7 = *(_QWORD *)(v0 + 96);
  v9 = *(_QWORD *)(v0 + 80);
  v13 = *(_QWORD *)(v0 + 64);
  v10 = *(_QWORD *)(v0 + 48);
  v11 = *(_QWORD *)(v10 + 408);
  *(_QWORD *)(v10 + 408) = &_swiftEmptyDictionarySingleton;
  swift_bridgeObjectRelease(v11);
  swift_task_dealloc(v2);
  swift_task_dealloc(v1);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10005DA30()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 312));
  swift_release();
  return swift_task_switch(sub_10005DA8C, 0, 0);
}

uint64_t sub_10005DA8C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v1 = v0[36];
  v2 = v0[35];
  swift_release();
  if (v1 + 1 == v2)
  {
    v3 = v0[6];
    swift_release_n(v0[34], 2);
    return swift_task_switch(sub_10005D960, v3, 0);
  }
  else
  {
    v5 = v0[36] + 1;
    v0[36] = v5;
    v6 = v0[34];
    if ((v6 & 0xC000000000000001) != 0)
    {
      v7 = specialized _ArrayBuffer._getElementSlowPath(_:)(v5, v6);
    }
    else
    {
      v7 = *(_QWORD *)(v6 + 8 * v5 + 32);
      swift_retain();
    }
    v0[37] = v7;
    v8 = type metadata accessor for AnalyticsPublisher();
    v9 = swift_allocObject(v8, 112, 15);
    v0[38] = v9;
    swift_defaultActor_initialize(v9);
    v10 = (_QWORD *)swift_task_alloc(dword_10111D22C);
    v0[39] = v10;
    *v10 = v0;
    v10[1] = sub_10005DA30;
    return sub_100CD63AC(v7);
  }
}

uint64_t sub_10005DB78()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t);

  v1 = v0[41];
  if ((v1 & 0x8000000000000000) == 0 && (v1 & 0x4000000000000000) == 0)
  {
    v2 = *(_QWORD *)(v1 + 16);
    result = swift_retain();
    v0[42] = v2;
    if (v2)
      goto LABEL_4;
LABEL_10:
    v8 = v0[40];
    v9 = v0[6];
    swift_release();
    swift_errorRelease(v8);
    swift_release();
    return swift_task_switch(sub_10005DC98, v9, 0);
  }
  v7 = swift_retain();
  result = _CocoaArrayWrapper.endIndex.getter(v7);
  v2 = result;
  v0[42] = result;
  if (!result)
    goto LABEL_10;
LABEL_4:
  if (v2 < 1)
  {
    __break(1u);
  }
  else
  {
    v4 = v0[41];
    v0[43] = 0;
    if ((v4 & 0xC000000000000001) != 0)
    {
      v5 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, v4);
    }
    else
    {
      v5 = *(_QWORD *)(v4 + 32);
      swift_retain();
    }
    v0[44] = v5;
    swift_errorRetain(v0[40]);
    v10 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_10111D598 + dword_10111D598);
    v6 = (_QWORD *)swift_task_alloc(unk_10111D59C);
    v0[45] = v6;
    *v6 = v0;
    v6[1] = sub_10005DD74;
    return v10(v5, v0[40]);
  }
  return result;
}

uint64_t sub_10005DC98()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v1 = *(_QWORD *)(v0 + 176);
  v2 = *(_QWORD *)(v0 + 184);
  v4 = *(_QWORD *)(v0 + 136);
  v3 = *(_QWORD *)(v0 + 144);
  v6 = *(_QWORD *)(v0 + 120);
  v5 = *(_QWORD *)(v0 + 128);
  v7 = *(_QWORD *)(v0 + 96);
  v11 = *(_QWORD *)(v0 + 88);
  v12 = *(_QWORD *)(v0 + 80);
  v13 = *(_QWORD *)(v0 + 64);
  v8 = *(_QWORD *)(v0 + 48);
  swift_willThrow();
  v9 = *(_QWORD *)(v8 + 408);
  *(_QWORD *)(v8 + 408) = &_swiftEmptyDictionarySingleton;
  swift_bridgeObjectRelease(v9);
  swift_task_dealloc(v2);
  swift_task_dealloc(v1);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10005DD74()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v1 + 360));
  if (v0)
  {
    swift_errorRelease(v0);
    v2 = sub_1000682F0;
  }
  else
  {
    v2 = sub_10005DDE0;
  }
  return swift_task_switch(v2, 0, 0);
}

uint64_t sub_10005DDE0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  swift_errorRelease(v0[40]);
  v1 = type metadata accessor for AnalyticsPublisher();
  v2 = swift_allocObject(v1, 112, 15);
  v0[46] = v2;
  swift_defaultActor_initialize(v2);
  v3 = (_QWORD *)swift_task_alloc(dword_10111D22C);
  v0[47] = v3;
  *v3 = v0;
  v3[1] = sub_10005DE54;
  return sub_100CD63AC(v0[44]);
}

uint64_t sub_10005DE54()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 376));
  swift_release();
  return swift_task_switch(sub_10005DEB0, 0, 0);
}

uint64_t sub_10005DEB0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t (*v10)(uint64_t, uint64_t);

  v1 = v0[43];
  v2 = v0[42];
  swift_release();
  if (v1 + 1 == v2)
  {
    v3 = v0[40];
    v4 = v0[6];
    swift_release();
    swift_errorRelease(v3);
    swift_release();
    return swift_task_switch(sub_10005DC98, v4, 0);
  }
  else
  {
    v6 = v0[43] + 1;
    v0[43] = v6;
    v7 = v0[41];
    if ((v7 & 0xC000000000000001) != 0)
    {
      v8 = specialized _ArrayBuffer._getElementSlowPath(_:)(v6, v7);
    }
    else
    {
      v8 = *(_QWORD *)(v7 + 8 * v6 + 32);
      swift_retain();
    }
    v0[44] = v8;
    swift_errorRetain(v0[40]);
    v10 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_10111D598 + dword_10111D598);
    v9 = (_QWORD *)swift_task_alloc(unk_10111D59C);
    v0[45] = v9;
    *v9 = v0;
    v9[1] = sub_10005DD74;
    return v10(v8, v0[40]);
  }
}

uint64_t sub_10005DFB4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_1000126B0(v0[16], type metadata accessor for MemberSharingCircle);
  v1 = v0[29];
  v0[40] = v1;
  v2 = v0[6];
  sub_100004048(v0[18], (uint64_t *)&unk_101111440);
  swift_bridgeObjectRetain(*(_QWORD *)(v2 + 408));
  v0[41] = sub_100508C68(v3);
  swift_bridgeObjectRelease();
  swift_errorRetain(v1);
  return swift_task_switch(sub_10005DB78, 0, 0);
}

uint64_t sub_10005E038()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = v0[12];
  sub_1000126B0(v0[11], type metadata accessor for OwnerSharingCircle);
  sub_1000126B0(v1, type metadata accessor for OwnerPeerTrust);
  v2 = v0[33];
  v0[40] = v2;
  v3 = v0[6];
  sub_100004048(v0[18], (uint64_t *)&unk_101111440);
  swift_bridgeObjectRetain(*(_QWORD *)(v3 + 408));
  v0[41] = sub_100508C68(v4);
  swift_bridgeObjectRelease();
  swift_errorRetain(v2);
  return swift_task_switch(sub_10005DB78, 0, 0);
}

uint64_t sub_10005E0CC(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD *v21;

  v2[47] = a1;
  v2[48] = v1;
  v3 = type metadata accessor for SharedBeaconRecord(0);
  v2[49] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[50] = v4;
  v2[51] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for MemberPeerTrust(0);
  v2[52] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v2[53] = v6;
  v7 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[54] = swift_task_alloc(v7);
  v2[55] = swift_task_alloc(v7);
  v2[56] = swift_task_alloc(v7);
  v8 = sub_10001A9A8(&qword_1010EC868);
  v2[57] = v8;
  v9 = (*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[58] = swift_task_alloc(v9);
  v2[59] = swift_task_alloc(v9);
  v10 = sub_10001A9A8((uint64_t *)&unk_1010EE180);
  v2[60] = v10;
  v11 = (*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[61] = swift_task_alloc(v11);
  v2[62] = swift_task_alloc(v11);
  v2[63] = swift_task_alloc(v11);
  v12 = type metadata accessor for UUID(0);
  v2[64] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v2[65] = v13;
  v14 = *(_QWORD *)(v13 + 64);
  v2[66] = v14;
  v2[67] = swift_task_alloc((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_10001A9A8((uint64_t *)&unk_101111440);
  v2[68] = v15;
  v16 = (*(_QWORD *)(*(_QWORD *)(v15 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[69] = swift_task_alloc(v16);
  v2[70] = swift_task_alloc(v16);
  v17 = sub_10001A9A8(&qword_1010EC870);
  v2[71] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v17 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for MemberSharingCircle(0);
  v2[72] = v18;
  v19 = *(_QWORD *)(v18 - 8);
  v2[73] = v19;
  v20 = (*(_QWORD *)(v19 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[74] = swift_task_alloc(v20);
  v2[75] = swift_task_alloc(v20);
  v2[76] = swift_task_alloc(v20);
  v2[77] = swift_task_alloc(v20);
  v21 = (_QWORD *)swift_task_alloc(dword_1010EC87C);
  v2[78] = v21;
  *v21 = v2;
  v21[1] = sub_10005E2EC;
  v21[15] = v1;
  return swift_task_switch(sub_100063D48, v1, 0);
}

uint64_t sub_10005E2EC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v2 = *(_QWORD *)(*v1 + 624);
  v3 = *v1;
  *(_QWORD *)(v3 + 632) = v0;
  swift_task_dealloc(v2);
  if (!v0)
    return swift_task_switch(sub_10005E460, *(_QWORD *)(v3 + 384), 0);
  v4 = *(_QWORD *)(v3 + 608);
  v5 = *(_QWORD *)(v3 + 600);
  v6 = *(_QWORD *)(v3 + 592);
  v7 = *(_QWORD *)(v3 + 568);
  v8 = *(_QWORD *)(v3 + 560);
  v9 = *(_QWORD *)(v3 + 552);
  v10 = *(_QWORD *)(v3 + 536);
  v13 = *(_QWORD *)(v3 + 504);
  v14 = *(_QWORD *)(v3 + 496);
  v15 = *(_QWORD *)(v3 + 488);
  v16 = *(_QWORD *)(v3 + 472);
  v17 = *(_QWORD *)(v3 + 464);
  v18 = *(_QWORD *)(v3 + 448);
  v19 = *(_QWORD *)(v3 + 440);
  v20 = *(_QWORD *)(v3 + 432);
  v11 = *(_QWORD *)(v3 + 408);
  swift_task_dealloc(*(_QWORD *)(v3 + 616));
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v11);
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_10005E460()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  _BOOL4 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v29;
  _BYTE *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49[2];

  if (qword_1010E9938 != -1)
    swift_once(&qword_1010E9938, sub_1000AFBB0);
  v1 = *(_QWORD *)(v0 + 616);
  v2 = *(_QWORD *)(v0 + 376);
  v3 = type metadata accessor for Logger(0);
  *(_QWORD *)(v0 + 640) = sub_10001A9E8(v3, (uint64_t)qword_1011B6748);
  v4 = sub_10005972C(v2, v1, type metadata accessor for MemberSharingCircle);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.default.getter(v5);
  v7 = os_log_type_enabled(v5, v6);
  v8 = *(_QWORD *)(v0 + 616);
  if (v7)
  {
    v46 = *(_QWORD *)(v0 + 512);
    v9 = swift_slowAlloc(22, -1);
    v10 = swift_slowAlloc(32, -1);
    v49[0] = v10;
    *(_DWORD *)v9 = 141558275;
    *(_QWORD *)(v0 + 360) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 360, v0 + 368, v9 + 4, v9 + 12);
    *(_WORD *)(v9 + 12) = 2081;
    v11 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v12 = dispatch thunk of CustomStringConvertible.description.getter(v46, v11);
    *(_QWORD *)(v0 + 368) = sub_100016940(v12, v13, v49);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 368, v0 + 376, v9 + 14, v9 + 22);
    swift_bridgeObjectRelease();
    sub_1000126B0(v8, type metadata accessor for MemberSharingCircle);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Data update on share accept. Update %{private,mask.hash}s", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v9, -1, -1);
  }
  else
  {
    sub_1000126B0(*(_QWORD *)(v0 + 616), type metadata accessor for MemberSharingCircle);
  }

  v14 = *(_QWORD *)(v0 + 632);
  v15 = *(_QWORD *)(v0 + 568);
  v16 = *(_QWORD *)(v0 + 376);
  v17 = swift_task_alloc(32);
  *(_QWORD *)(v17 + 16) = v16;
  sub_100ADB304((void (*)(uint64_t, _UNKNOWN **))sub_100067D7C, v15);
  if (v14)
  {
    v18 = v14;
    swift_task_dealloc(v17);
    swift_errorRetain(v14);
    v19 = swift_errorRetain(v14);
    v20 = Logger.logObject.getter(v19);
    v21 = static os_log_type_t.error.getter(v20);
    if (os_log_type_enabled(v20, v21))
    {
      v22 = (uint8_t *)swift_slowAlloc(12, -1);
      v23 = swift_slowAlloc(32, -1);
      v49[0] = v23;
      *(_DWORD *)v22 = 136315138;
      swift_getErrorValue(v18, v0 + 344, v0 + 216);
      v24 = Error.localizedDescription.getter(*(_QWORD *)(v0 + 224), *(_QWORD *)(v0 + 232));
      *(_QWORD *)(v0 + 312) = sub_100016940(v24, v25, v49);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 312, v0 + 320, v22 + 4, v22 + 12);
      swift_bridgeObjectRelease();
      swift_errorRelease(v18);
      swift_errorRelease(v18);
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "Failure on share accept, iCloud data update: %s", v22, 0xCu);
      swift_arrayDestroy(v23, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v23, -1, -1);
      swift_slowDealloc(v22, -1, -1);
    }
    else
    {
      swift_errorRelease(v18);
      swift_errorRelease(v18);
    }

    v29 = sub_100067D98();
    v48 = swift_allocError(&type metadata for BeaconSharingFlowError, v29, 0, 0);
    *v30 = 1;
    swift_willThrow(v48);
    swift_errorRelease(v18);
    v31 = *(_QWORD *)(v0 + 608);
    v32 = *(_QWORD *)(v0 + 600);
    v33 = *(_QWORD *)(v0 + 592);
    v34 = *(_QWORD *)(v0 + 568);
    v35 = *(_QWORD *)(v0 + 560);
    v36 = *(_QWORD *)(v0 + 552);
    v37 = *(_QWORD *)(v0 + 536);
    v38 = *(_QWORD *)(v0 + 496);
    v39 = *(_QWORD *)(v0 + 504);
    v40 = *(_QWORD *)(v0 + 488);
    v41 = *(_QWORD *)(v0 + 472);
    v42 = *(_QWORD *)(v0 + 464);
    v43 = *(_QWORD *)(v0 + 448);
    v44 = *(_QWORD *)(v0 + 440);
    v45 = *(_QWORD *)(v0 + 432);
    v47 = *(_QWORD *)(v0 + 408);
    swift_task_dealloc(*(_QWORD *)(v0 + 616));
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    swift_task_dealloc(v36);
    swift_task_dealloc(v37);
    swift_task_dealloc(v39);
    swift_task_dealloc(v38);
    swift_task_dealloc(v40);
    swift_task_dealloc(v41);
    swift_task_dealloc(v42);
    swift_task_dealloc(v43);
    swift_task_dealloc(v44);
    swift_task_dealloc(v45);
    swift_task_dealloc(v47);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v26 = *(_QWORD *)(v0 + 384);
    swift_task_dealloc(v17);
    v27 = *(_QWORD *)(v26 + 112);
    *(_QWORD *)(v0 + 648) = v27;
    return swift_task_switch(sub_10005E960, v27, 0);
  }
}

uint64_t sub_10005E960()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 656) = *(_QWORD *)(*(_QWORD *)(v0 + 648) + 128);
  return swift_task_switch(sub_10005E980, 0, 0);
}

uint64_t sub_10005E980()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = v0[82];
  v2 = v0[71];
  v3 = swift_task_alloc(32);
  v0[83] = v3;
  *(_QWORD *)(v3 + 16) = v1;
  *(_QWORD *)(v3 + 24) = v2;
  v4 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  v0[84] = v4;
  *v4 = v0;
  v4[1] = sub_10005EA24;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v4, 0, 0, 0xD000000000000011, 0x8000000100EC6890, sub_100067DDC, v3, &type metadata for () + 1);
}

uint64_t sub_10005EA24()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 672);
  *(_QWORD *)(*v1 + 680) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_10005ED64;
  }
  else
  {
    swift_task_dealloc(*(_QWORD *)(v2 + 664));
    v4 = sub_10005EA90;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_10005EA90()
{
  uint64_t v0;

  return swift_task_switch(sub_10005EAA4, *(_QWORD *)(v0 + 384), 0);
}

uint64_t sub_10005EAA4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 648);
  v2 = *(_QWORD *)(v0 + 576);
  sub_100004048(*(_QWORD *)(v0 + 568), &qword_1010EC870);
  *(_DWORD *)(v0 + 100) = *(_DWORD *)(v2 + 20);
  return swift_task_switch(sub_10005EAF8, v1, 0);
}

uint64_t sub_10005EAF8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  _QWORD *v13;

  v1 = *(_QWORD *)(v0 + 648);
  v2 = *(_QWORD *)(v0 + 536);
  v3 = *(_QWORD *)(v0 + 528);
  v4 = *(_QWORD *)(v0 + 520);
  v5 = *(_QWORD *)(v0 + 512);
  v6 = *(_QWORD *)(v0 + 376) + *(int *)(v0 + 100);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  *(_QWORD *)(v0 + 688) = v7;
  v7(v2, v6, v5);
  LODWORD(v8) = *(_DWORD *)(v4 + 80);
  *(_DWORD *)(v0 + 792) = v8;
  v8 = v8;
  v9 = (v8 + 24) & ~v8;
  v10 = swift_allocObject(&unk_101052BC8, v9 + v3, v8 | 7);
  *(_QWORD *)(v0 + 696) = v10;
  *(_QWORD *)(v10 + 16) = v1;
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32);
  *(_QWORD *)(v0 + 704) = v11;
  v11(v10 + v9, v2, v5);
  v12 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v13 = (_QWORD *)swift_task_alloc(v12);
  *(_QWORD *)(v0 + 712) = v13;
  *v13 = v0;
  v13[1] = sub_10005EBF4;
  return unsafeBlocking<A>(_:)(*(_QWORD *)(v0 + 560), sub_100067DE8, v10, *(_QWORD *)(v0 + 544));
}

uint64_t sub_10005EBF4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 384);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 712));
  swift_release();
  return swift_task_switch(sub_10005EC58, v1, 0);
}

uint64_t sub_10005EC58()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  _QWORD *v8;

  v1 = *(_QWORD *)(v0 + 584);
  v2 = *(_QWORD *)(v0 + 576);
  v3 = *(_QWORD *)(v0 + 552);
  sub_10000F9B8(*(_QWORD *)(v0 + 560), v3, (uint64_t *)&unk_101111440);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1 + 48))(v3, 1, v2) == 1)
  {
    v4 = *(_QWORD *)(v0 + 552);
    sub_100004048(*(_QWORD *)(v0 + 560), (uint64_t *)&unk_101111440);
    sub_100004048(v4, (uint64_t *)&unk_101111440);
    v5 = *(_QWORD *)(v0 + 648);
    *(_DWORD *)(v0 + 796) = *(_DWORD *)(*(_QWORD *)(v0 + 576) + 24);
    return swift_task_switch(sub_10005F314, v5, 0);
  }
  else
  {
    v7 = *(_QWORD *)(v0 + 384);
    sub_1000126EC(*(_QWORD *)(v0 + 552), *(_QWORD *)(v0 + 608), type metadata accessor for MemberSharingCircle);
    sub_10001AA44((_QWORD *)(v7 + 280), *(_QWORD *)(v7 + 304));
    v8 = (_QWORD *)swift_task_alloc(dword_1010FFC4C);
    *(_QWORD *)(v0 + 720) = v8;
    *v8 = v0;
    v8[1] = sub_10005F05C;
    return sub_10059F90C(*(_QWORD *)(v0 + 608));
  }
}

uint64_t sub_10005ED64()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 384);
  swift_task_dealloc(*(_QWORD *)(v0 + 664));
  return swift_task_switch(sub_10005EDA4, v1, 0);
}

uint64_t sub_10005EDA4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  sub_100004048(*(_QWORD *)(v0 + 568), &qword_1010EC870);
  v1 = *(_QWORD *)(v0 + 680);
  swift_errorRetain(v1);
  v2 = swift_errorRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = swift_slowAlloc(32, -1);
    v29 = v6;
    *(_DWORD *)v5 = 136315138;
    swift_getErrorValue(v1, v0 + 344, v0 + 216);
    v7 = Error.localizedDescription.getter(*(_QWORD *)(v0 + 224), *(_QWORD *)(v0 + 232));
    *(_QWORD *)(v0 + 312) = sub_100016940(v7, v8, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 312, v0 + 320, v5 + 4, v5 + 12);
    swift_bridgeObjectRelease();
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Failure on share accept, iCloud data update: %s", v5, 0xCu);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);
  }
  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
  }

  v9 = sub_100067D98();
  v28 = swift_allocError(&type metadata for BeaconSharingFlowError, v9, 0, 0);
  *v10 = 1;
  swift_willThrow(v28);
  swift_errorRelease(v1);
  v11 = *(_QWORD *)(v0 + 608);
  v12 = *(_QWORD *)(v0 + 600);
  v13 = *(_QWORD *)(v0 + 592);
  v14 = *(_QWORD *)(v0 + 568);
  v15 = *(_QWORD *)(v0 + 560);
  v16 = *(_QWORD *)(v0 + 552);
  v17 = *(_QWORD *)(v0 + 536);
  v18 = *(_QWORD *)(v0 + 496);
  v19 = *(_QWORD *)(v0 + 504);
  v21 = *(_QWORD *)(v0 + 488);
  v22 = *(_QWORD *)(v0 + 472);
  v23 = *(_QWORD *)(v0 + 464);
  v24 = *(_QWORD *)(v0 + 448);
  v25 = *(_QWORD *)(v0 + 440);
  v26 = *(_QWORD *)(v0 + 432);
  v27 = *(_QWORD *)(v0 + 408);
  swift_task_dealloc(*(_QWORD *)(v0 + 616));
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v19);
  swift_task_dealloc(v18);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10005F05C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 720);
  *(_QWORD *)(*v1 + 728) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_10005F124;
  else
    v4 = sub_10005F0C0;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 384), 0);
}

uint64_t sub_10005F0C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 560);
  sub_1000126B0(*(_QWORD *)(v0 + 608), type metadata accessor for MemberSharingCircle);
  sub_100004048(v1, (uint64_t *)&unk_101111440);
  v2 = *(_QWORD *)(v0 + 648);
  *(_DWORD *)(v0 + 796) = *(_DWORD *)(*(_QWORD *)(v0 + 576) + 24);
  return swift_task_switch(sub_10005F314, v2, 0);
}

uint64_t sub_10005F124()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v1 = *(_QWORD *)(v0 + 728);
  v2 = *(_QWORD *)(v0 + 560);
  sub_1000126B0(*(_QWORD *)(v0 + 608), type metadata accessor for MemberSharingCircle);
  sub_100004048(v2, (uint64_t *)&unk_101111440);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = *(_QWORD *)(v0 + 728);
    v7 = (uint8_t *)swift_slowAlloc(12, -1);
    v8 = swift_slowAlloc(32, -1);
    v14 = v8;
    *(_DWORD *)v7 = 136315138;
    swift_getErrorValue(v6, v0 + 336, v0 + 192);
    v9 = Error.localizedDescription.getter(*(_QWORD *)(v0 + 200), *(_QWORD *)(v0 + 208));
    *(_QWORD *)(v0 + 352) = sub_100016940(v9, v10, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 352, v0 + 360, v7 + 4, v7 + 12);
    swift_bridgeObjectRelease();
    swift_errorRelease(v6);
    swift_errorRelease(v6);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Failure on share accept, sharing keys download failure: %s", v7, 0xCu);
    swift_arrayDestroy(v8, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v7, -1, -1);

    swift_errorRelease(v6);
  }
  else
  {
    v11 = *(_QWORD *)(v0 + 728);
    swift_errorRelease(v11);
    swift_errorRelease(v11);
    swift_errorRelease(v11);

  }
  v12 = *(_QWORD *)(v0 + 648);
  *(_DWORD *)(v0 + 796) = *(_DWORD *)(*(_QWORD *)(v0 + 576) + 24);
  return swift_task_switch(sub_10005F314, v12, 0);
}

uint64_t sub_10005F314()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 704);
  v2 = *(unsigned __int8 *)(v0 + 792);
  v3 = *(_QWORD *)(v0 + 648);
  v4 = *(_QWORD *)(v0 + 536);
  v5 = *(_QWORD *)(v0 + 512);
  v6 = (v2 + 24) & ~v2;
  v7 = v6 + *(_QWORD *)(v0 + 528);
  v8 = v2 | 7;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v0 + 688))(v4, *(_QWORD *)(v0 + 376) + *(int *)(v0 + 796), v5);
  v9 = swift_allocObject(&unk_101052BF0, v7, v8);
  *(_QWORD *)(v0 + 736) = v9;
  *(_QWORD *)(v9 + 16) = v3;
  v1(v9 + v6, v4, v5);
  v10 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v11 = (_QWORD *)swift_task_alloc(v10);
  *(_QWORD *)(v0 + 744) = v11;
  *v11 = v0;
  v11[1] = sub_10005F40C;
  return unsafeBlocking<A>(_:)(*(_QWORD *)(v0 + 504), sub_100067DF8, v9, *(_QWORD *)(v0 + 480));
}

uint64_t sub_10005F40C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 648);
  v3 = *(_QWORD *)(*v0 + 576);
  swift_task_dealloc(*(_QWORD *)(*v0 + 744));
  swift_release();
  *(_DWORD *)(v1 + 800) = *(_DWORD *)(v3 + 32);
  return swift_task_switch(sub_10005F480, v2, 0);
}

uint64_t sub_10005F480()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 704);
  v2 = *(unsigned __int8 *)(v0 + 792);
  v3 = *(_QWORD *)(v0 + 648);
  v4 = *(_QWORD *)(v0 + 536);
  v5 = *(_QWORD *)(v0 + 512);
  v6 = (v2 + 24) & ~v2;
  v7 = v6 + *(_QWORD *)(v0 + 528);
  v8 = v2 | 7;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v0 + 688))(v4, *(_QWORD *)(v0 + 376) + *(int *)(v0 + 800), v5);
  v9 = swift_allocObject(&unk_101052C18, v7, v8);
  *(_QWORD *)(v0 + 752) = v9;
  *(_QWORD *)(v9 + 16) = v3;
  v1(v9 + v6, v4, v5);
  v10 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v11 = (_QWORD *)swift_task_alloc(v10);
  *(_QWORD *)(v0 + 760) = v11;
  *v11 = v0;
  v11[1] = sub_10005F578;
  return unsafeBlocking<A>(_:)(*(_QWORD *)(v0 + 472), sub_100067E08, v9, *(_QWORD *)(v0 + 456));
}

uint64_t sub_10005F578()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 384);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 760));
  swift_release();
  return swift_task_switch(sub_10005F5DC, v1, 0);
}

uint64_t sub_10005F5DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  _BOOL4 v10;
  uint64_t v11;
  uint64_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  void (*v19)(_QWORD *, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v31;
  uint64_t v32;
  _BYTE *v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint8_t *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  NSObject *v47;
  os_log_type_t v48;
  _BOOL4 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  id v58;
  id v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t My;
  _QWORD *v69;
  char v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t (*v95)(uint64_t, uint64_t, char, uint64_t);
  uint64_t v96;
  uint64_t v97[2];

  v1 = *(_QWORD *)(v0 + 464);
  v2 = *(_QWORD *)(v0 + 416);
  v3 = *(_QWORD *)(v0 + 424);
  sub_10000F9B8(*(_QWORD *)(v0 + 472), v1, &qword_1010EC868);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    v91 = v0 + 296;
    v94 = v0 + 280;
    v4 = v0 + 304;
    v5 = *(_QWORD *)(v0 + 600);
    v6 = *(_QWORD *)(v0 + 376);
    sub_100004048(*(_QWORD *)(v0 + 464), &qword_1010EC868);
    v7 = sub_10005972C(v6, v5, type metadata accessor for MemberSharingCircle);
    v8 = Logger.logObject.getter(v7);
    v9 = static os_log_type_t.error.getter(v8);
    v10 = os_log_type_enabled(v8, v9);
    v11 = *(_QWORD *)(v0 + 600);
    if (v10)
    {
      v12 = *(_QWORD *)(v0 + 512);
      v13 = (uint8_t *)swift_slowAlloc(12, -1);
      v14 = swift_slowAlloc(32, -1);
      v97[0] = v14;
      *(_DWORD *)v13 = 136315138;
      v15 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v16 = v12;
      v4 = v0 + 304;
      v17 = dispatch thunk of CustomStringConvertible.description.getter(v16, v15);
      *(_QWORD *)(v0 + 304) = sub_100016940(v17, v18, v97);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 304, v0 + 312, v13 + 4, v13 + 12);
      swift_bridgeObjectRelease();
      sub_1000126B0(v11, type metadata accessor for MemberSharingCircle);
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "No peerTrustIdentifier for %s", v13, 0xCu);
      swift_arrayDestroy(v14, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v14, -1, -1);
      swift_slowDealloc(v13, -1, -1);
    }
    else
    {
      sub_1000126B0(*(_QWORD *)(v0 + 600), type metadata accessor for MemberSharingCircle);
    }

    v31 = sub_100066624();
    v32 = swift_allocError(&type metadata for ShareAcceptUseCaseError, v31, 0, 0);
    *v33 = 1;
    swift_willThrow(v32);
    sub_100004048(*(_QWORD *)(v0 + 472), &qword_1010EC868);
    swift_errorRetain(v32);
    v34 = swift_errorRetain(v32);
    v35 = Logger.logObject.getter(v34);
    v36 = static os_log_type_t.error.getter(v35);
    if (os_log_type_enabled(v35, v36))
    {
      v37 = (uint8_t *)swift_slowAlloc(12, -1);
      v38 = swift_slowAlloc(32, -1);
      v97[0] = v38;
      *(_DWORD *)v37 = 136315138;
      swift_getErrorValue(v32, v94, v0 + 240);
      v39 = Error.localizedDescription.getter(*(_QWORD *)(v0 + 248), *(_QWORD *)(v0 + 256));
      *(_QWORD *)(v0 + 296) = sub_100016940(v39, v40, v97);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v91, v4, v37 + 4, v37 + 12);
      swift_bridgeObjectRelease();
      swift_errorRelease(v32);
      swift_errorRelease(v32);
      _os_log_impl((void *)&_mh_execute_header, v35, v36, "Failure on share accept, can't send acceptance message: %s", v37, 0xCu);
      swift_arrayDestroy(v38, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v38, -1, -1);
      swift_slowDealloc(v37, -1, -1);

      swift_errorRelease(v32);
    }
    else
    {
      swift_errorRelease(v32);
      swift_errorRelease(v32);
      swift_errorRelease(v32);

    }
    v41 = *(_QWORD *)(v0 + 488);
    v42 = *(_QWORD *)(v0 + 392);
    v43 = *(_QWORD *)(v0 + 400);
    sub_10000F9B8(*(_QWORD *)(v0 + 504), v41, (uint64_t *)&unk_1010EE180);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v43 + 48))(v41, 1, v42) == 1)
    {
      v44 = *(_QWORD *)(v0 + 592);
      v45 = *(_QWORD *)(v0 + 376);
      sub_100004048(*(_QWORD *)(v0 + 488), (uint64_t *)&unk_1010EE180);
      v46 = sub_10005972C(v45, v44, type metadata accessor for MemberSharingCircle);
      v47 = Logger.logObject.getter(v46);
      v48 = static os_log_type_t.error.getter(v47);
      v49 = os_log_type_enabled(v47, v48);
      v50 = *(_QWORD *)(v0 + 592);
      if (v49)
      {
        v51 = *(_QWORD *)(v0 + 512);
        v88 = *(_QWORD *)(v0 + 504);
        v52 = swift_slowAlloc(22, -1);
        v53 = swift_slowAlloc(32, -1);
        v97[0] = v53;
        *(_DWORD *)v52 = 141558275;
        *(_QWORD *)(v0 + 288) = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 288, v91, v52 + 4, v52 + 12);
        *(_WORD *)(v52 + 12) = 2081;
        v54 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v55 = dispatch thunk of CustomStringConvertible.description.getter(v51, v54);
        *(_QWORD *)(v0 + 272) = sub_100016940(v55, v56, v97);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 272, v94, v52 + 14, v52 + 22);
        swift_bridgeObjectRelease();
        sub_1000126B0(v50, type metadata accessor for MemberSharingCircle);
        _os_log_impl((void *)&_mh_execute_header, v47, v48, "Failure on share accept, can't fetch locations, no shared beacon record for: %{private,mask.hash}s", (uint8_t *)v52, 0x16u);
        swift_arrayDestroy(v53, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v53, -1, -1);
        swift_slowDealloc(v52, -1, -1);

        v57 = v88;
      }
      else
      {
        v62 = *(_QWORD *)(v0 + 504);

        sub_1000126B0(v50, type metadata accessor for MemberSharingCircle);
        v57 = v62;
      }
      sub_100004048(v57, (uint64_t *)&unk_1010EE180);
    }
    else
    {
      sub_1000126EC(*(_QWORD *)(v0 + 488), *(_QWORD *)(v0 + 408), type metadata accessor for SharedBeaconRecord);
      v58 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
      v59 = objc_msgSend(v58, "bundleIdentifier");

      if (v59)
      {
        v89 = static String._unconditionallyBridgeFromObjectiveC(_:)(v59);
        v61 = v60;

      }
      else
      {
        v89 = 0;
        v61 = 0;
      }
      v63 = sub_1005CC484();
      if (qword_1010E9D08 != -1)
        swift_once(&qword_1010E9D08, sub_10059A6E0);
      v92 = *(_QWORD *)(v0 + 504);
      v64 = *(_QWORD *)(v0 + 408);
      v65 = *(_QWORD *)(v0 + 384);
      v66 = *(_QWORD *)(v0 + 392);
      OS_dispatch_queue.sync<A>(execute:)(sub_100003D88, qword_1011B71A8, &type metadata for Configuration);
      v67 = sub_100C1B1E8(*(_QWORD *)(v0 + 264));
      swift_bridgeObjectRelease();
      My = type metadata accessor for Feature.FindMy(0);
      *(_QWORD *)(v0 + 176) = My;
      *(_QWORD *)(v0 + 184) = sub_100006204((unint64_t *)&qword_1010EE1B0, (uint64_t (*)(uint64_t))&type metadata accessor for Feature.FindMy, (uint64_t)&protocol conformance descriptor for Feature.FindMy);
      v69 = sub_100018F08((_QWORD *)(v0 + 152));
      (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(My - 8) + 104))(v69, enum case for Feature.FindMy.networkScalingImprovements(_:), My);
      v70 = isFeatureEnabled(_:)(v0 + 152);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 152));
      *(_QWORD *)(v0 + 16) = v67;
      *(_BYTE *)(v0 + 24) = 0;
      *(_QWORD *)(v0 + 32) = &off_101048498;
      *(_BYTE *)(v0 + 40) = 0;
      *(_QWORD *)(v0 + 48) = v89;
      *(_QWORD *)(v0 + 56) = v61;
      *(_QWORD *)(v0 + 64) = v63;
      *(_BYTE *)(v0 + 72) = v70 & 1;
      *(_QWORD *)(v0 + 80) = 0;
      *(_QWORD *)(v0 + 88) = 0;
      *(_BYTE *)(v0 + 96) = 1;
      v71 = sub_10001AA44((_QWORD *)(v65 + 368), *(_QWORD *)(v65 + 392));
      v72 = sub_10001A9A8(&qword_1010F7A80);
      v73 = swift_allocObject(v72, 72, 7);
      *(_OWORD *)(v73 + 16) = xmmword_100E22B00;
      *(_QWORD *)(v73 + 56) = v66;
      *(_QWORD *)(v73 + 64) = sub_100006204(&qword_1010F4A70, type metadata accessor for SharedBeaconRecord, (uint64_t)&unk_100E6F5CC);
      v74 = sub_100018F08((_QWORD *)(v73 + 32));
      sub_10005972C(v64, (uint64_t)v74, type metadata accessor for SharedBeaconRecord);
      sub_100066668(v73, v0 + 16, *v71);
      swift_bridgeObjectRelease();
      sub_1000126B0(v64, type metadata accessor for SharedBeaconRecord);
      sub_100004048(v92, (uint64_t *)&unk_1010EE180);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    v75 = *(_QWORD *)(v0 + 608);
    v76 = *(_QWORD *)(v0 + 600);
    v77 = *(_QWORD *)(v0 + 592);
    v78 = *(_QWORD *)(v0 + 568);
    v79 = *(_QWORD *)(v0 + 560);
    v80 = *(_QWORD *)(v0 + 552);
    v81 = *(_QWORD *)(v0 + 536);
    v83 = *(_QWORD *)(v0 + 496);
    v82 = *(_QWORD *)(v0 + 504);
    v84 = *(_QWORD *)(v0 + 488);
    v85 = *(_QWORD *)(v0 + 472);
    v86 = *(_QWORD *)(v0 + 464);
    v87 = *(_QWORD *)(v0 + 448);
    v90 = *(_QWORD *)(v0 + 440);
    v93 = *(_QWORD *)(v0 + 432);
    v96 = *(_QWORD *)(v0 + 408);
    swift_task_dealloc(*(_QWORD *)(v0 + 616));
    swift_task_dealloc(v75);
    swift_task_dealloc(v76);
    swift_task_dealloc(v77);
    swift_task_dealloc(v78);
    swift_task_dealloc(v79);
    swift_task_dealloc(v80);
    swift_task_dealloc(v81);
    swift_task_dealloc(v82);
    swift_task_dealloc(v83);
    swift_task_dealloc(v84);
    swift_task_dealloc(v85);
    swift_task_dealloc(v86);
    swift_task_dealloc(v87);
    swift_task_dealloc(v90);
    swift_task_dealloc(v93);
    swift_task_dealloc(v96);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v19 = *(void (**)(_QWORD *, uint64_t, uint64_t))(v0 + 688);
    v20 = *(_QWORD *)(v0 + 576);
    v21 = *(_QWORD *)(v0 + 512);
    v22 = *(_QWORD *)(v0 + 448);
    v23 = *(_QWORD *)(v0 + 416);
    v24 = *(_QWORD *)(v0 + 376);
    v25 = *(_QWORD *)(v0 + 384);
    sub_1000126EC(*(_QWORD *)(v0 + 464), v22, type metadata accessor for MemberPeerTrust);
    v26 = v24 + *(int *)(v20 + 28);
    *(_QWORD *)(v0 + 128) = type metadata accessor for CircleTrustAcceptEnvelopeV1(0);
    *(_QWORD *)(v0 + 136) = sub_100006204(&qword_1010EC888, type metadata accessor for CircleTrustAcceptEnvelopeV1, (uint64_t)&unk_100E38DE0);
    *(_QWORD *)(v0 + 144) = sub_100006204(&qword_1010EC890, type metadata accessor for CircleTrustAcceptEnvelopeV1, (uint64_t)&unk_100E38CC8);
    v27 = sub_100018F08((_QWORD *)(v0 + 104));
    v19(v27, v26, v21);
    v28 = v22 + *(int *)(v23 + 28);
    v95 = (uint64_t (*)(uint64_t, uint64_t, char, uint64_t))((char *)&dword_101120658 + dword_101120658);
    v29 = (_QWORD *)swift_task_alloc(unk_10112065C);
    *(_QWORD *)(v0 + 768) = v29;
    *v29 = v0;
    v29[1] = sub_10005FFDC;
    return v95(v25 + 240, v0 + 104, 3, v28);
  }
}

uint64_t sub_10005FFDC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 768);
  *(_QWORD *)(*v1 + 776) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = *(_QWORD *)(v2 + 384);
    v5 = sub_1000608BC;
  }
  else
  {
    v6 = *(_QWORD *)(v2 + 384);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v2 + 104));
    v5 = sub_100060050;
    v4 = v6;
  }
  return swift_task_switch(v5, v4, 0);
}

uint64_t sub_100060050()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  _BOOL4 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  int v39;
  _QWORD *v40;
  id v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t My;
  _QWORD *v53;
  char v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t (*v78)(char, char);
  uint64_t v79;
  uint64_t v80[2];

  v1 = *(_QWORD *)(v0 + 448);
  v2 = *(_QWORD *)(v0 + 432);
  sub_10005972C(v1, *(_QWORD *)(v0 + 440), type metadata accessor for MemberPeerTrust);
  v3 = sub_10005972C(v1, v2, type metadata accessor for MemberPeerTrust);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = *(_QWORD *)(v0 + 512);
    v7 = *(_QWORD *)(v0 + 440);
    v76 = *(_QWORD *)(v0 + 432);
    v8 = swift_slowAlloc(22, -1);
    v9 = swift_slowAlloc(64, -1);
    v80[0] = v9;
    *(_DWORD *)v8 = 136315394;
    v10 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v11 = dispatch thunk of CustomStringConvertible.description.getter(v6, v10);
    *(_QWORD *)(v0 + 320) = sub_100016940(v11, v12, v80);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 320, v0 + 328, v8 + 4, v8 + 12);
    swift_bridgeObjectRelease();
    sub_1000126B0(v7, type metadata accessor for MemberPeerTrust);
    *(_WORD *)(v8 + 12) = 2080;
    sub_100728868();
    *(_QWORD *)(v0 + 328) = sub_100016940(v13, v14, v80);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 328, v0 + 336, v8 + 14, v8 + 22);
    swift_bridgeObjectRelease();
    sub_1000126B0(v76, type metadata accessor for MemberPeerTrust);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Accepting share from peerTrustIdentifier: %s,\ncommunicationsIdentifier: %s.", (uint8_t *)v8, 0x16u);
    swift_arrayDestroy(v9, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }
  else
  {
    v15 = *(_QWORD *)(v0 + 432);
    sub_1000126B0(*(_QWORD *)(v0 + 440), type metadata accessor for MemberPeerTrust);
    sub_1000126B0(v15, type metadata accessor for MemberPeerTrust);
  }

  v16 = *(_QWORD *)(v0 + 496);
  v17 = *(_QWORD *)(v0 + 392);
  v18 = *(_QWORD *)(v0 + 400);
  sub_10000F9B8(*(_QWORD *)(v0 + 504), v16, (uint64_t *)&unk_1010EE180);
  v19 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17);
  v20 = *(_QWORD *)(v0 + 496);
  if (v19 == 1)
  {
    sub_100004048(v20, (uint64_t *)&unk_1010EE180);
    v21 = *(_QWORD *)(v0 + 472);
    sub_1000126B0(*(_QWORD *)(v0 + 448), type metadata accessor for MemberPeerTrust);
    sub_100004048(v21, &qword_1010EC868);
    v22 = *(_QWORD *)(v0 + 488);
    v23 = *(_QWORD *)(v0 + 392);
    v24 = *(_QWORD *)(v0 + 400);
    sub_10000F9B8(*(_QWORD *)(v0 + 504), v22, (uint64_t *)&unk_1010EE180);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23) == 1)
    {
      v25 = *(_QWORD *)(v0 + 592);
      v26 = *(_QWORD *)(v0 + 376);
      sub_100004048(*(_QWORD *)(v0 + 488), (uint64_t *)&unk_1010EE180);
      v27 = sub_10005972C(v26, v25, type metadata accessor for MemberSharingCircle);
      v28 = Logger.logObject.getter(v27);
      v29 = static os_log_type_t.error.getter(v28);
      v30 = os_log_type_enabled(v28, v29);
      v31 = *(_QWORD *)(v0 + 592);
      if (v30)
      {
        v32 = *(_QWORD *)(v0 + 512);
        v77 = *(_QWORD *)(v0 + 504);
        v33 = swift_slowAlloc(22, -1);
        v34 = swift_slowAlloc(32, -1);
        v80[0] = v34;
        *(_DWORD *)v33 = 141558275;
        *(_QWORD *)(v0 + 288) = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 288, v0 + 296, v33 + 4, v33 + 12);
        *(_WORD *)(v33 + 12) = 2081;
        v35 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v36 = dispatch thunk of CustomStringConvertible.description.getter(v32, v35);
        *(_QWORD *)(v0 + 272) = sub_100016940(v36, v37, v80);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 272, v0 + 280, v33 + 14, v33 + 22);
        swift_bridgeObjectRelease();
        sub_1000126B0(v31, type metadata accessor for MemberSharingCircle);
        _os_log_impl((void *)&_mh_execute_header, v28, v29, "Failure on share accept, can't fetch locations, no shared beacon record for: %{private,mask.hash}s", (uint8_t *)v33, 0x16u);
        swift_arrayDestroy(v34, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v34, -1, -1);
        swift_slowDealloc(v33, -1, -1);

        v38 = v77;
      }
      else
      {
        v46 = *(_QWORD *)(v0 + 504);

        sub_1000126B0(v31, type metadata accessor for MemberSharingCircle);
        v38 = v46;
      }
      sub_100004048(v38, (uint64_t *)&unk_1010EE180);
    }
    else
    {
      sub_1000126EC(*(_QWORD *)(v0 + 488), *(_QWORD *)(v0 + 408), type metadata accessor for SharedBeaconRecord);
      v42 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
      v43 = objc_msgSend(v42, "bundleIdentifier");

      if (v43)
      {
        v72 = static String._unconditionallyBridgeFromObjectiveC(_:)(v43);
        v45 = v44;

      }
      else
      {
        v72 = 0;
        v45 = 0;
      }
      v47 = sub_1005CC484();
      if (qword_1010E9D08 != -1)
        swift_once(&qword_1010E9D08, sub_10059A6E0);
      v74 = *(_QWORD *)(v0 + 504);
      v48 = *(_QWORD *)(v0 + 408);
      v49 = *(_QWORD *)(v0 + 384);
      v50 = *(_QWORD *)(v0 + 392);
      OS_dispatch_queue.sync<A>(execute:)(sub_100003D88, qword_1011B71A8, &type metadata for Configuration);
      v51 = sub_100C1B1E8(*(_QWORD *)(v0 + 264));
      swift_bridgeObjectRelease();
      My = type metadata accessor for Feature.FindMy(0);
      *(_QWORD *)(v0 + 176) = My;
      *(_QWORD *)(v0 + 184) = sub_100006204((unint64_t *)&qword_1010EE1B0, (uint64_t (*)(uint64_t))&type metadata accessor for Feature.FindMy, (uint64_t)&protocol conformance descriptor for Feature.FindMy);
      v53 = sub_100018F08((_QWORD *)(v0 + 152));
      (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(My - 8) + 104))(v53, enum case for Feature.FindMy.networkScalingImprovements(_:), My);
      v54 = isFeatureEnabled(_:)(v0 + 152);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 152));
      *(_QWORD *)(v0 + 16) = v51;
      *(_BYTE *)(v0 + 24) = 0;
      *(_QWORD *)(v0 + 32) = &off_101048498;
      *(_BYTE *)(v0 + 40) = 0;
      *(_QWORD *)(v0 + 48) = v72;
      *(_QWORD *)(v0 + 56) = v45;
      *(_QWORD *)(v0 + 64) = v47;
      *(_BYTE *)(v0 + 72) = v54 & 1;
      *(_QWORD *)(v0 + 80) = 0;
      *(_QWORD *)(v0 + 88) = 0;
      *(_BYTE *)(v0 + 96) = 1;
      v55 = sub_10001AA44((_QWORD *)(v49 + 368), *(_QWORD *)(v49 + 392));
      v56 = sub_10001A9A8(&qword_1010F7A80);
      v57 = swift_allocObject(v56, 72, 7);
      *(_OWORD *)(v57 + 16) = xmmword_100E22B00;
      *(_QWORD *)(v57 + 56) = v50;
      *(_QWORD *)(v57 + 64) = sub_100006204(&qword_1010F4A70, type metadata accessor for SharedBeaconRecord, (uint64_t)&unk_100E6F5CC);
      v58 = sub_100018F08((_QWORD *)(v57 + 32));
      sub_10005972C(v48, (uint64_t)v58, type metadata accessor for SharedBeaconRecord);
      sub_100066668(v57, v0 + 16, *v55);
      swift_bridgeObjectRelease();
      sub_1000126B0(v48, type metadata accessor for SharedBeaconRecord);
      sub_100004048(v74, (uint64_t *)&unk_1010EE180);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    v59 = *(_QWORD *)(v0 + 608);
    v60 = *(_QWORD *)(v0 + 600);
    v61 = *(_QWORD *)(v0 + 592);
    v62 = *(_QWORD *)(v0 + 568);
    v63 = *(_QWORD *)(v0 + 560);
    v64 = *(_QWORD *)(v0 + 552);
    v65 = *(_QWORD *)(v0 + 536);
    v67 = *(_QWORD *)(v0 + 496);
    v66 = *(_QWORD *)(v0 + 504);
    v68 = *(_QWORD *)(v0 + 488);
    v69 = *(_QWORD *)(v0 + 472);
    v70 = *(_QWORD *)(v0 + 464);
    v71 = *(_QWORD *)(v0 + 448);
    v73 = *(_QWORD *)(v0 + 440);
    v75 = *(_QWORD *)(v0 + 432);
    v79 = *(_QWORD *)(v0 + 408);
    swift_task_dealloc(*(_QWORD *)(v0 + 616));
    swift_task_dealloc(v59);
    swift_task_dealloc(v60);
    swift_task_dealloc(v61);
    swift_task_dealloc(v62);
    swift_task_dealloc(v63);
    swift_task_dealloc(v64);
    swift_task_dealloc(v65);
    swift_task_dealloc(v66);
    swift_task_dealloc(v67);
    swift_task_dealloc(v68);
    swift_task_dealloc(v69);
    swift_task_dealloc(v70);
    swift_task_dealloc(v71);
    swift_task_dealloc(v73);
    swift_task_dealloc(v75);
    swift_task_dealloc(v79);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v39 = *(unsigned __int8 *)(v20 + *(int *)(*(_QWORD *)(v0 + 392) + 64));
    sub_1000126B0(v20, type metadata accessor for SharedBeaconRecord);
    v78 = (uint64_t (*)(char, char))((char *)&dword_1011135C0 + dword_1011135C0);
    v40 = (_QWORD *)swift_task_alloc(unk_1011135C4);
    *(_QWORD *)(v0 + 784) = v40;
    *v40 = v0;
    v40[1] = sub_100060FE8;
    return v78(1, v39 == 4);
  }
}

uint64_t sub_1000608BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  _BOOL4 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  id v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t My;
  _QWORD *v38;
  char v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64[2];

  v1 = *(_QWORD *)(v0 + 448);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 104));
  sub_1000126B0(v1, type metadata accessor for MemberPeerTrust);
  v2 = *(_QWORD *)(v0 + 776);
  sub_100004048(*(_QWORD *)(v0 + 472), &qword_1010EC868);
  swift_errorRetain(v2);
  v3 = swift_errorRetain(v2);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    v64[0] = v7;
    *(_DWORD *)v6 = 136315138;
    swift_getErrorValue(v2, v0 + 280, v0 + 240);
    v8 = Error.localizedDescription.getter(*(_QWORD *)(v0 + 248), *(_QWORD *)(v0 + 256));
    *(_QWORD *)(v0 + 296) = sub_100016940(v8, v9, v64);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 296, v0 + 304, v6 + 4, v6 + 12);
    swift_bridgeObjectRelease();
    swift_errorRelease(v2);
    swift_errorRelease(v2);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Failure on share accept, can't send acceptance message: %s", v6, 0xCu);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);

    swift_errorRelease(v2);
  }
  else
  {
    swift_errorRelease(v2);
    swift_errorRelease(v2);
    swift_errorRelease(v2);

  }
  v10 = *(_QWORD *)(v0 + 488);
  v11 = *(_QWORD *)(v0 + 392);
  v12 = *(_QWORD *)(v0 + 400);
  sub_10000F9B8(*(_QWORD *)(v0 + 504), v10, (uint64_t *)&unk_1010EE180);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
    v13 = *(_QWORD *)(v0 + 592);
    v14 = *(_QWORD *)(v0 + 376);
    sub_100004048(*(_QWORD *)(v0 + 488), (uint64_t *)&unk_1010EE180);
    v15 = sub_10005972C(v14, v13, type metadata accessor for MemberSharingCircle);
    v16 = Logger.logObject.getter(v15);
    v17 = static os_log_type_t.error.getter(v16);
    v18 = os_log_type_enabled(v16, v17);
    v19 = *(_QWORD *)(v0 + 592);
    if (v18)
    {
      v20 = *(_QWORD *)(v0 + 512);
      v62 = *(_QWORD *)(v0 + 504);
      v21 = swift_slowAlloc(22, -1);
      v22 = swift_slowAlloc(32, -1);
      v64[0] = v22;
      *(_DWORD *)v21 = 141558275;
      *(_QWORD *)(v0 + 288) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 288, v0 + 296, v21 + 4, v21 + 12);
      *(_WORD *)(v21 + 12) = 2081;
      v23 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v24 = dispatch thunk of CustomStringConvertible.description.getter(v20, v23);
      *(_QWORD *)(v0 + 272) = sub_100016940(v24, v25, v64);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 272, v0 + 280, v21 + 14, v21 + 22);
      swift_bridgeObjectRelease();
      sub_1000126B0(v19, type metadata accessor for MemberSharingCircle);
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Failure on share accept, can't fetch locations, no shared beacon record for: %{private,mask.hash}s", (uint8_t *)v21, 0x16u);
      swift_arrayDestroy(v22, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v22, -1, -1);
      swift_slowDealloc(v21, -1, -1);

      v26 = v62;
    }
    else
    {
      v31 = *(_QWORD *)(v0 + 504);

      sub_1000126B0(v19, type metadata accessor for MemberSharingCircle);
      v26 = v31;
    }
    sub_100004048(v26, (uint64_t *)&unk_1010EE180);
  }
  else
  {
    sub_1000126EC(*(_QWORD *)(v0 + 488), *(_QWORD *)(v0 + 408), type metadata accessor for SharedBeaconRecord);
    v27 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v28 = objc_msgSend(v27, "bundleIdentifier");

    if (v28)
    {
      v58 = static String._unconditionallyBridgeFromObjectiveC(_:)(v28);
      v30 = v29;

    }
    else
    {
      v58 = 0;
      v30 = 0;
    }
    v32 = sub_1005CC484();
    if (qword_1010E9D08 != -1)
      swift_once(&qword_1010E9D08, sub_10059A6E0);
    v60 = *(_QWORD *)(v0 + 504);
    v33 = *(_QWORD *)(v0 + 408);
    v34 = *(_QWORD *)(v0 + 384);
    v35 = *(_QWORD *)(v0 + 392);
    OS_dispatch_queue.sync<A>(execute:)(sub_100003D88, qword_1011B71A8, &type metadata for Configuration);
    v36 = sub_100C1B1E8(*(_QWORD *)(v0 + 264));
    swift_bridgeObjectRelease();
    My = type metadata accessor for Feature.FindMy(0);
    *(_QWORD *)(v0 + 176) = My;
    *(_QWORD *)(v0 + 184) = sub_100006204((unint64_t *)&qword_1010EE1B0, (uint64_t (*)(uint64_t))&type metadata accessor for Feature.FindMy, (uint64_t)&protocol conformance descriptor for Feature.FindMy);
    v38 = sub_100018F08((_QWORD *)(v0 + 152));
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(My - 8) + 104))(v38, enum case for Feature.FindMy.networkScalingImprovements(_:), My);
    v39 = isFeatureEnabled(_:)(v0 + 152);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 152));
    *(_QWORD *)(v0 + 16) = v36;
    *(_BYTE *)(v0 + 24) = 0;
    *(_QWORD *)(v0 + 32) = &off_101048498;
    *(_BYTE *)(v0 + 40) = 0;
    *(_QWORD *)(v0 + 48) = v58;
    *(_QWORD *)(v0 + 56) = v30;
    *(_QWORD *)(v0 + 64) = v32;
    *(_BYTE *)(v0 + 72) = v39 & 1;
    *(_QWORD *)(v0 + 80) = 0;
    *(_QWORD *)(v0 + 88) = 0;
    *(_BYTE *)(v0 + 96) = 1;
    v40 = sub_10001AA44((_QWORD *)(v34 + 368), *(_QWORD *)(v34 + 392));
    v41 = sub_10001A9A8(&qword_1010F7A80);
    v42 = swift_allocObject(v41, 72, 7);
    *(_OWORD *)(v42 + 16) = xmmword_100E22B00;
    *(_QWORD *)(v42 + 56) = v35;
    *(_QWORD *)(v42 + 64) = sub_100006204(&qword_1010F4A70, type metadata accessor for SharedBeaconRecord, (uint64_t)&unk_100E6F5CC);
    v43 = sub_100018F08((_QWORD *)(v42 + 32));
    sub_10005972C(v33, (uint64_t)v43, type metadata accessor for SharedBeaconRecord);
    sub_100066668(v42, v0 + 16, *v40);
    swift_bridgeObjectRelease();
    sub_1000126B0(v33, type metadata accessor for SharedBeaconRecord);
    sub_100004048(v60, (uint64_t *)&unk_1010EE180);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v44 = *(_QWORD *)(v0 + 608);
  v45 = *(_QWORD *)(v0 + 600);
  v46 = *(_QWORD *)(v0 + 592);
  v47 = *(_QWORD *)(v0 + 568);
  v48 = *(_QWORD *)(v0 + 560);
  v49 = *(_QWORD *)(v0 + 552);
  v50 = *(_QWORD *)(v0 + 536);
  v52 = *(_QWORD *)(v0 + 496);
  v51 = *(_QWORD *)(v0 + 504);
  v54 = *(_QWORD *)(v0 + 488);
  v55 = *(_QWORD *)(v0 + 472);
  v56 = *(_QWORD *)(v0 + 464);
  v57 = *(_QWORD *)(v0 + 448);
  v59 = *(_QWORD *)(v0 + 440);
  v61 = *(_QWORD *)(v0 + 432);
  v63 = *(_QWORD *)(v0 + 408);
  swift_task_dealloc(*(_QWORD *)(v0 + 616));
  swift_task_dealloc(v44);
  swift_task_dealloc(v45);
  swift_task_dealloc(v46);
  swift_task_dealloc(v47);
  swift_task_dealloc(v48);
  swift_task_dealloc(v49);
  swift_task_dealloc(v50);
  swift_task_dealloc(v51);
  swift_task_dealloc(v52);
  swift_task_dealloc(v54);
  swift_task_dealloc(v55);
  swift_task_dealloc(v56);
  swift_task_dealloc(v57);
  swift_task_dealloc(v59);
  swift_task_dealloc(v61);
  swift_task_dealloc(v63);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100060FE8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 384);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 784));
  return swift_task_switch(sub_100061040, v1, 0);
}

uint64_t sub_100061040()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  _BOOL4 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  id v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t My;
  _QWORD *v30;
  char v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  v1 = *(_QWORD *)(v0 + 472);
  sub_1000126B0(*(_QWORD *)(v0 + 448), type metadata accessor for MemberPeerTrust);
  sub_100004048(v1, &qword_1010EC868);
  v2 = *(_QWORD *)(v0 + 488);
  v3 = *(_QWORD *)(v0 + 392);
  v4 = *(_QWORD *)(v0 + 400);
  sub_10000F9B8(*(_QWORD *)(v0 + 504), v2, (uint64_t *)&unk_1010EE180);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3) == 1)
  {
    v5 = *(_QWORD *)(v0 + 592);
    v6 = *(_QWORD *)(v0 + 376);
    sub_100004048(*(_QWORD *)(v0 + 488), (uint64_t *)&unk_1010EE180);
    v7 = sub_10005972C(v6, v5, type metadata accessor for MemberSharingCircle);
    v8 = Logger.logObject.getter(v7);
    v9 = static os_log_type_t.error.getter(v8);
    v10 = os_log_type_enabled(v8, v9);
    v11 = *(_QWORD *)(v0 + 592);
    if (v10)
    {
      v12 = *(_QWORD *)(v0 + 512);
      v54 = *(_QWORD *)(v0 + 504);
      v13 = swift_slowAlloc(22, -1);
      v14 = swift_slowAlloc(32, -1);
      v56 = v14;
      *(_DWORD *)v13 = 141558275;
      *(_QWORD *)(v0 + 288) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 288, v0 + 296, v13 + 4, v13 + 12);
      *(_WORD *)(v13 + 12) = 2081;
      v15 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v16 = dispatch thunk of CustomStringConvertible.description.getter(v12, v15);
      *(_QWORD *)(v0 + 272) = sub_100016940(v16, v17, &v56);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 272, v0 + 280, v13 + 14, v13 + 22);
      swift_bridgeObjectRelease();
      sub_1000126B0(v11, type metadata accessor for MemberSharingCircle);
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Failure on share accept, can't fetch locations, no shared beacon record for: %{private,mask.hash}s", (uint8_t *)v13, 0x16u);
      swift_arrayDestroy(v14, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v14, -1, -1);
      swift_slowDealloc(v13, -1, -1);

      v18 = v54;
    }
    else
    {
      v23 = *(_QWORD *)(v0 + 504);

      sub_1000126B0(v11, type metadata accessor for MemberSharingCircle);
      v18 = v23;
    }
    sub_100004048(v18, (uint64_t *)&unk_1010EE180);
  }
  else
  {
    sub_1000126EC(*(_QWORD *)(v0 + 488), *(_QWORD *)(v0 + 408), type metadata accessor for SharedBeaconRecord);
    v19 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v20 = objc_msgSend(v19, "bundleIdentifier");

    if (v20)
    {
      v50 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
      v22 = v21;

    }
    else
    {
      v50 = 0;
      v22 = 0;
    }
    v24 = sub_1005CC484();
    if (qword_1010E9D08 != -1)
      swift_once(&qword_1010E9D08, sub_10059A6E0);
    v52 = *(_QWORD *)(v0 + 504);
    v25 = *(_QWORD *)(v0 + 408);
    v26 = *(_QWORD *)(v0 + 384);
    v27 = *(_QWORD *)(v0 + 392);
    OS_dispatch_queue.sync<A>(execute:)(sub_100003D88, qword_1011B71A8, &type metadata for Configuration);
    v28 = sub_100C1B1E8(*(_QWORD *)(v0 + 264));
    swift_bridgeObjectRelease();
    My = type metadata accessor for Feature.FindMy(0);
    *(_QWORD *)(v0 + 176) = My;
    *(_QWORD *)(v0 + 184) = sub_100006204((unint64_t *)&qword_1010EE1B0, (uint64_t (*)(uint64_t))&type metadata accessor for Feature.FindMy, (uint64_t)&protocol conformance descriptor for Feature.FindMy);
    v30 = sub_100018F08((_QWORD *)(v0 + 152));
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(My - 8) + 104))(v30, enum case for Feature.FindMy.networkScalingImprovements(_:), My);
    v31 = isFeatureEnabled(_:)(v0 + 152);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 152));
    *(_QWORD *)(v0 + 16) = v28;
    *(_BYTE *)(v0 + 24) = 0;
    *(_QWORD *)(v0 + 32) = &off_101048498;
    *(_BYTE *)(v0 + 40) = 0;
    *(_QWORD *)(v0 + 48) = v50;
    *(_QWORD *)(v0 + 56) = v22;
    *(_QWORD *)(v0 + 64) = v24;
    *(_BYTE *)(v0 + 72) = v31 & 1;
    *(_QWORD *)(v0 + 80) = 0;
    *(_QWORD *)(v0 + 88) = 0;
    *(_BYTE *)(v0 + 96) = 1;
    v32 = sub_10001AA44((_QWORD *)(v26 + 368), *(_QWORD *)(v26 + 392));
    v33 = sub_10001A9A8(&qword_1010F7A80);
    v34 = swift_allocObject(v33, 72, 7);
    *(_OWORD *)(v34 + 16) = xmmword_100E22B00;
    *(_QWORD *)(v34 + 56) = v27;
    *(_QWORD *)(v34 + 64) = sub_100006204(&qword_1010F4A70, type metadata accessor for SharedBeaconRecord, (uint64_t)&unk_100E6F5CC);
    v35 = sub_100018F08((_QWORD *)(v34 + 32));
    sub_10005972C(v25, (uint64_t)v35, type metadata accessor for SharedBeaconRecord);
    sub_100066668(v34, v0 + 16, *v32);
    swift_bridgeObjectRelease();
    sub_1000126B0(v25, type metadata accessor for SharedBeaconRecord);
    sub_100004048(v52, (uint64_t *)&unk_1010EE180);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v36 = *(_QWORD *)(v0 + 608);
  v37 = *(_QWORD *)(v0 + 600);
  v38 = *(_QWORD *)(v0 + 592);
  v39 = *(_QWORD *)(v0 + 568);
  v40 = *(_QWORD *)(v0 + 560);
  v41 = *(_QWORD *)(v0 + 552);
  v42 = *(_QWORD *)(v0 + 536);
  v44 = *(_QWORD *)(v0 + 496);
  v43 = *(_QWORD *)(v0 + 504);
  v46 = *(_QWORD *)(v0 + 488);
  v47 = *(_QWORD *)(v0 + 472);
  v48 = *(_QWORD *)(v0 + 464);
  v49 = *(_QWORD *)(v0 + 448);
  v51 = *(_QWORD *)(v0 + 440);
  v53 = *(_QWORD *)(v0 + 432);
  v55 = *(_QWORD *)(v0 + 408);
  swift_task_dealloc(*(_QWORD *)(v0 + 616));
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  swift_task_dealloc(v40);
  swift_task_dealloc(v41);
  swift_task_dealloc(v42);
  swift_task_dealloc(v43);
  swift_task_dealloc(v44);
  swift_task_dealloc(v46);
  swift_task_dealloc(v47);
  swift_task_dealloc(v48);
  swift_task_dealloc(v49);
  swift_task_dealloc(v51);
  swift_task_dealloc(v53);
  swift_task_dealloc(v55);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100061600(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v3[35] = a2;
  v3[36] = v2;
  v3[34] = a1;
  v4 = sub_10001A9A8(&qword_1010ED860);
  v3[37] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for OwnerSharingCircle(0);
  v3[38] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v3[39] = v6;
  v7 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[40] = swift_task_alloc(v7);
  v3[41] = swift_task_alloc(v7);
  v3[42] = swift_task_alloc(v7);
  v8 = type metadata accessor for OwnerPeerTrust(0);
  v3[43] = v8;
  v9 = (*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[44] = swift_task_alloc(v9);
  v3[45] = swift_task_alloc(v9);
  return swift_task_switch(sub_1000616D8, v2, 0);
}

uint64_t sub_1000616D8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  _BOOL4 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v21;
  uint64_t (*v22)(char, uint64_t);
  uint64_t v23;

  if (qword_1010E9938 != -1)
    swift_once(&qword_1010E9938, sub_1000AFBB0);
  v1 = v0[44];
  v2 = v0[45];
  v3 = v0[35];
  v4 = type metadata accessor for Logger(0);
  v0[46] = sub_10001A9E8(v4, (uint64_t)qword_1011B6748);
  sub_10005972C(v3, v2, type metadata accessor for OwnerPeerTrust);
  v5 = sub_10005972C(v3, v1, type metadata accessor for OwnerPeerTrust);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.default.getter(v6);
  v8 = os_log_type_enabled(v6, v7);
  v9 = v0[44];
  v10 = v0[45];
  if (v8)
  {
    v11 = swift_slowAlloc(32, -1);
    v21 = swift_slowAlloc(64, -1);
    v23 = v21;
    *(_DWORD *)v11 = 136446723;
    v12 = type metadata accessor for UUID(0);
    v13 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v14 = dispatch thunk of CustomStringConvertible.description.getter(v12, v13);
    v0[31] = sub_100016940(v14, v15, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 31, v0 + 32, v11 + 4, v11 + 12);
    swift_bridgeObjectRelease();
    sub_1000126B0(v10, type metadata accessor for OwnerPeerTrust);
    *(_WORD *)(v11 + 12) = 2160;
    v0[32] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 33, v11 + 14, v11 + 22);
    *(_WORD *)(v11 + 22) = 2081;
    sub_100728868();
    v0[33] = sub_100016940(v16, v17, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 33, v0 + 34, v11 + 24, v11 + 32);
    swift_bridgeObjectRelease();
    sub_1000126B0(v9, type metadata accessor for OwnerPeerTrust);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Accepting share request from peerTrustIdentifier: %{public}s,\ncommunicationsIdentifier: %{private,mask.hash}s.", (uint8_t *)v11, 0x20u);
    swift_arrayDestroy(v21, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v21, -1, -1);
    swift_slowDealloc(v11, -1, -1);
  }
  else
  {
    sub_1000126B0(v0[45], type metadata accessor for OwnerPeerTrust);
    sub_1000126B0(v9, type metadata accessor for OwnerPeerTrust);
  }

  v18 = *(_QWORD *)(v0[36] + 112);
  v0[47] = v18;
  v22 = (uint64_t (*)(char, uint64_t))((char *)&dword_1011206C0 + dword_1011206C0);
  v19 = (_QWORD *)swift_task_alloc(unk_1011206C4);
  v0[48] = v19;
  *v19 = v0;
  v19[1] = sub_1000619CC;
  return v22(2, v18);
}

uint64_t sub_1000619CC(__int16 a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 384);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 288);
  *(_WORD *)(*(_QWORD *)v1 + 656) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100061A2C, v3, 0);
}

uint64_t sub_100061A2C()
{
  uint64_t v0;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  _BOOL4 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  if ((*(_WORD *)(v0 + 656) & 0x100) == 0)
    return swift_task_switch(sub_100061CEC, *(_QWORD *)(v0 + 376), 0);
  v2 = sub_10005972C(*(_QWORD *)(v0 + 272), *(_QWORD *)(v0 + 320), type metadata accessor for OwnerSharingCircle);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter(v3);
  v5 = os_log_type_enabled(v3, v4);
  v6 = *(_QWORD *)(v0 + 320);
  if (v5)
  {
    v7 = swift_slowAlloc(22, -1);
    v8 = swift_slowAlloc(32, -1);
    v23 = v8;
    *(_DWORD *)v7 = 141558275;
    *(_QWORD *)(v0 + 232) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 232, v0 + 240, v7 + 4, v7 + 12);
    *(_WORD *)(v7 + 12) = 2081;
    v9 = type metadata accessor for UUID(0);
    v10 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v11 = dispatch thunk of CustomStringConvertible.description.getter(v9, v10);
    *(_QWORD *)(v0 + 240) = sub_100016940(v11, v12, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 240, v0 + 248, v7 + 14, v7 + 22);
    swift_bridgeObjectRelease();
    sub_1000126B0(v6, type metadata accessor for OwnerSharingCircle);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Total shared item limit reached %{private,mask.hash}s.", (uint8_t *)v7, 0x16u);
    swift_arrayDestroy(v8, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v7, -1, -1);
  }
  else
  {
    sub_1000126B0(*(_QWORD *)(v0 + 320), type metadata accessor for OwnerSharingCircle);
  }

  type metadata accessor for SPBeaconSharingError(0);
  v14 = v13;
  *(_QWORD *)(v0 + 224) = 7;
  v15 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
  v16 = sub_100006204((unint64_t *)&qword_1010EB490, (uint64_t (*)(uint64_t))type metadata accessor for SPBeaconSharingError, (uint64_t)&unk_100E21930);
  v17 = _BridgedStoredNSError.init(_:userInfo:)((_QWORD *)(v0 + 216), v0 + 224, v15, v14, v16);
  swift_willThrow(v17);
  v18 = *(_QWORD *)(v0 + 352);
  v20 = *(_QWORD *)(v0 + 328);
  v19 = *(_QWORD *)(v0 + 336);
  v21 = *(_QWORD *)(v0 + 320);
  v22 = *(_QWORD *)(v0 + 296);
  swift_task_dealloc(*(_QWORD *)(v0 + 360));
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100061CEC()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v2 = (_QWORD *)swift_task_alloc(v1);
  *(_QWORD *)(v0 + 392) = v2;
  v3 = sub_10001A9A8(&qword_1010EE100);
  *v2 = v0;
  v2[1] = sub_100061D68;
  return unsafeBlocking<A>(_:)(v0 + 208, sub_100068004, *(_QWORD *)(v0 + 376), v3);
}

uint64_t sub_100061D68()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 376);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 392));
  swift_release();
  return swift_task_switch(sub_100061DC8, v1, 0);
}

uint64_t sub_100061DC8()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[36];
  v0[50] = v0[26];
  return swift_task_switch(sub_100061DE4, v1, 0);
}

uint64_t sub_100061DE4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  _BYTE *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t (*v44)(uint64_t);
  uint64_t v45;

  v1 = *(_QWORD *)(v0 + 400);
  v2 = *(_QWORD *)(v0 + 344);
  v3 = *(_QWORD *)(v0 + 304);
  v4 = *(_QWORD *)(v0 + 272);
  v5 = *(_QWORD *)(v0 + 280);
  v6 = (unint64_t *)swift_task_alloc(32);
  v6[2] = v4;
  v6[3] = v5;
  v7 = sub_10008B4C0((uint64_t (*)(char *))sub_10006800C, v6, v1);
  swift_task_dealloc(v6);
  v8 = *(int *)(v3 + 24);
  *(_DWORD *)(v0 + 640) = v8;
  v9 = sub_10001A9A8(&qword_1011003C0);
  v10 = type metadata accessor for UUID(0);
  *(_QWORD *)(v0 + 408) = v10;
  v11 = *(_QWORD *)(v10 - 8);
  *(_QWORD *)(v0 + 416) = v11;
  v12 = *(unsigned __int8 *)(v11 + 80);
  v13 = (v12 + 32) & ~v12;
  v14 = swift_allocObject(v9, v13 + *(_QWORD *)(v11 + 72), v12 | 7);
  *(_OWORD *)(v14 + 16) = xmmword_100E22B00;
  v15 = v14 + v13;
  (*(void (**)(uint64_t, unint64_t, uint64_t))(v11 + 16))(v15, v5 + *(int *)(v2 + 20), v10);
  v16 = sub_1003B9FE0(v14);
  swift_setDeallocating(v14);
  swift_arrayDestroy(v15, 1, v10);
  swift_deallocClassInstance(v14, 32, 7);
  if (v16[2])
  {
    v17 = sub_1001EFBE8(v4 + v8, (unint64_t)v16, 3, v7, 0, 2, 1);
    *(_QWORD *)(v0 + 424) = v17;
    *(_QWORD *)(v0 + 432) = v18;
    v19 = v17;
    v20 = v18;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v21 = unk_101113584;
    v44 = (uint64_t (*)(uint64_t))((char *)&dword_101113580 + dword_101113580);
    swift_bridgeObjectRetain(v19);
    swift_bridgeObjectRetain(v20);
    v22 = (_QWORD *)swift_task_alloc(v21);
    *(_QWORD *)(v0 + 440) = v22;
    *v22 = v0;
    v22[1] = sub_100062210;
    return v44(v19);
  }
  else
  {
    v24 = type metadata accessor for BeaconSharingCircleTransformer.Error(0);
    v25 = sub_100006204(&qword_1010EC8F0, type metadata accessor for BeaconSharingCircleTransformer.Error, (uint64_t)&unk_100E2DAE0);
    v26 = swift_allocError(v24, v25, 0, 0);
    v28 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56))(v27, 1, 1, v10);
    swift_willThrow(v28);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_errorRetain(v26);
    v29 = swift_errorRetain(v26);
    v30 = Logger.logObject.getter(v29);
    v31 = static os_log_type_t.error.getter(v30);
    if (os_log_type_enabled(v30, v31))
    {
      v32 = (uint8_t *)swift_slowAlloc(12, -1);
      v33 = swift_slowAlloc(32, -1);
      v45 = v33;
      *(_DWORD *)v32 = 136315138;
      swift_getErrorValue(v26, v0 + 192, v0 + 120);
      v34 = Error.localizedDescription.getter(*(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 136));
      *(_QWORD *)(v0 + 176) = sub_100016940(v34, v35, &v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 176, v0 + 184, v32 + 4, v32 + 12);
      swift_bridgeObjectRelease();
      swift_errorRelease(v26);
      swift_errorRelease(v26);
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "Failure in share request acceptance, cloud update error %s", v32, 0xCu);
      swift_arrayDestroy(v33, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v33, -1, -1);
      swift_slowDealloc(v32, -1, -1);
    }
    else
    {
      swift_errorRelease(v26);
      swift_errorRelease(v26);
    }

    v36 = sub_100067D98();
    v37 = swift_allocError(&type metadata for BeaconSharingFlowError, v36, 0, 0);
    *v38 = 1;
    swift_willThrow(v37);
    swift_errorRelease(v26);
    v39 = *(_QWORD *)(v0 + 352);
    v41 = *(_QWORD *)(v0 + 328);
    v40 = *(_QWORD *)(v0 + 336);
    v42 = *(_QWORD *)(v0 + 320);
    v43 = *(_QWORD *)(v0 + 296);
    swift_task_dealloc(*(_QWORD *)(v0 + 360));
    swift_task_dealloc(v39);
    swift_task_dealloc(v40);
    swift_task_dealloc(v41);
    swift_task_dealloc(v42);
    swift_task_dealloc(v43);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100062210(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 440);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 288);
  *(_QWORD *)(*(_QWORD *)v1 + 448) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100062270, v3, 0);
}

uint64_t sub_100062270()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t (*v6)(_QWORD *);

  v1 = v0[36];
  *(_QWORD *)(v1 + 408) = v0[56];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain(*(_QWORD *)(v1 + 408));
  v3 = sub_100508C68(v2);
  v0[57] = v3;
  swift_bridgeObjectRelease();
  v6 = (uint64_t (*)(_QWORD *))((char *)&dword_1011135E0 + dword_1011135E0);
  v4 = (_QWORD *)swift_task_alloc(unk_1011135E4);
  v0[58] = v4;
  *v4 = v0;
  v4[1] = sub_100062304;
  return v6(v3);
}

uint64_t sub_100062304()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 288);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 464));
  swift_release();
  return swift_task_switch(sub_100062364, v1, 0);
}

uint64_t sub_100062364()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (_QWORD *)swift_task_alloc(async function pointer to Array.asyncFlatMap<A>(_:)[1]);
  v0[59] = v1;
  v2 = sub_10001A9A8(&qword_1010EC8C8);
  v3 = sub_1000193E4(&qword_1010EC8D0, &qword_1010EC8C8);
  *v1 = v0;
  v1[1] = sub_1000623F8;
  return Array.asyncFlatMap<A>(_:)(&unk_1010EC8C0, v0[36], v0[54], v0[38], v2, v3);
}

uint64_t sub_1000623F8(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 472);
  v5 = *(_QWORD *)(*v2 + 288);
  *(_QWORD *)(v3 + 480) = a1;
  *(_QWORD *)(v3 + 488) = v1;
  swift_task_dealloc(v4);
  return swift_task_switch(sub_100062458, v5, 0);
}

uint64_t sub_100062458()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;

  v1 = *(_QWORD *)(v0 + 424);
  v2 = _swiftEmptyArrayStorage;
  v36 = _swiftEmptyArrayStorage;
  v3 = *(_QWORD *)(v1 + 16);
  if (!v3)
  {
LABEL_9:
    *(_QWORD *)(v0 + 496) = v2;
    v23 = *(_QWORD *)(v0 + 480);
    v24 = *(_QWORD *)(v0 + 432);
    v25 = dword_1010EC8DC;
    swift_bridgeObjectRetain(v1);
    swift_bridgeObjectRetain(v24);
    swift_bridgeObjectRetain(v2);
    swift_bridgeObjectRetain(v23);
    v26 = (_QWORD *)swift_task_alloc(v25);
    *(_QWORD *)(v0 + 504) = v26;
    *v26 = v0;
    v26[1] = sub_10006284C;
    return sub_100064D60(*(_QWORD *)(v0 + 424), (uint64_t)v2, *(_QWORD *)(v0 + 432), *(_QWORD *)(v0 + 480));
  }
  v4 = *(_QWORD *)(v0 + 312);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = *(_QWORD *)(v4 + 72);
  v7 = *(_QWORD *)(v0 + 488);
  v8 = *(_QWORD *)(v0 + 336);
  swift_bridgeObjectRetain(v1);
  sub_10005972C(v1 + v5, v8, type metadata accessor for OwnerSharingCircle);
  v9 = sub_10044DA04();
  if (!v7)
  {
    v19 = v9;
    sub_1000126B0(*(_QWORD *)(v0 + 336), type metadata accessor for OwnerSharingCircle);
    sub_1003028BC(v19);
    v20 = v3 - 1;
    if (v20)
    {
      v21 = v1 + v6 + v5;
      do
      {
        sub_10005972C(v21, *(_QWORD *)(v0 + 336), type metadata accessor for OwnerSharingCircle);
        v22 = sub_10044DA04();
        sub_1000126B0(*(_QWORD *)(v0 + 336), type metadata accessor for OwnerSharingCircle);
        sub_1003028BC(v22);
        v21 += v6;
        --v20;
      }
      while (v20);
    }
    swift_bridgeObjectRelease();
    v2 = v36;
    v1 = *(_QWORD *)(v0 + 424);
    goto LABEL_9;
  }
  v10 = v7;
  v11 = *(_QWORD *)(v0 + 424);
  sub_1000126B0(*(_QWORD *)(v0 + 336), type metadata accessor for OwnerSharingCircle);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n(v11, 2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_errorRetain(v7);
  v12 = swift_errorRetain(v7);
  v13 = Logger.logObject.getter(v12);
  v14 = static os_log_type_t.error.getter(v13);
  if (os_log_type_enabled(v13, v14))
  {
    v15 = (uint8_t *)swift_slowAlloc(12, -1);
    v16 = (_QWORD *)swift_slowAlloc(32, -1);
    v36 = v16;
    *(_DWORD *)v15 = 136315138;
    swift_getErrorValue(v10, v0 + 192, v0 + 120);
    v17 = Error.localizedDescription.getter(*(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 136));
    *(_QWORD *)(v0 + 176) = sub_100016940(v17, v18, (uint64_t *)&v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 176, v0 + 184, v15 + 4, v15 + 12);
    swift_bridgeObjectRelease();
    swift_errorRelease(v10);
    swift_errorRelease(v10);
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Failure in share request acceptance, cloud update error %s", v15, 0xCu);
    swift_arrayDestroy(v16, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v16, -1, -1);
    swift_slowDealloc(v15, -1, -1);
  }
  else
  {
    swift_errorRelease(v10);
    swift_errorRelease(v10);
  }

  v28 = sub_100067D98();
  v29 = swift_allocError(&type metadata for BeaconSharingFlowError, v28, 0, 0);
  *v30 = 1;
  swift_willThrow(v29);
  swift_errorRelease(v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v31 = *(_QWORD *)(v0 + 352);
  v33 = *(_QWORD *)(v0 + 328);
  v32 = *(_QWORD *)(v0 + 336);
  v34 = *(_QWORD *)(v0 + 320);
  v35 = *(_QWORD *)(v0 + 296);
  swift_task_dealloc(*(_QWORD *)(v0 + 360));
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10006284C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 504);
  *(_QWORD *)(*v1 + 512) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = *(_QWORD *)(v2 + 288);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v5 = sub_100063524;
    v6 = v4;
  }
  else
  {
    v6 = *(_QWORD *)(v2 + 288);
    v5 = sub_1000628E8;
  }
  return swift_task_switch(v5, v6, 0);
}

uint64_t sub_1000628E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  __int128 v6;

  v1 = *(_QWORD *)(v0 + 288);
  v6 = *(_OWORD *)(v1 + 344);
  v2 = *(_QWORD *)(v1 + 344);
  v3 = sub_10001AA44((_QWORD *)(v1 + 320), v2);
  *(_OWORD *)(v0 + 80) = v6;
  v4 = sub_100018F08((_QWORD *)(v0 + 56));
  (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(v4, v3, v2);
  return swift_task_switch(sub_10006296C, 0, 0);
}

uint64_t sub_10006296C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v10;

  v1 = *(_QWORD *)(v0 + 424);
  v2 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v0 + 520) = v2;
  if (v2)
  {
    v3 = *(_QWORD *)(v0 + 312);
    v4 = *(_DWORD *)(v3 + 80);
    *(_DWORD *)(v0 + 644) = v4;
    *(_QWORD *)(v0 + 528) = *(_QWORD *)(v3 + 72);
    *(_QWORD *)(v0 + 544) = 0;
    v5 = *(_QWORD *)(v0 + 288);
    v6 = v1 + ((v4 + 32) & ~(unint64_t)v4);
    v7 = dword_1011206BC;
    swift_bridgeObjectRetain(v1);
    v8 = (_QWORD *)swift_task_alloc(v7);
    *(_QWORD *)(v0 + 552) = v8;
    *v8 = v0;
    v8[1] = sub_100062B9C;
    return sub_100DB8700(v6, v5 + 160, v0 + 56);
  }
  else
  {
    v10 = *(_QWORD *)(v0 + 288);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 56));
    return swift_task_switch(sub_100062A50, v10, 0);
  }
}

uint64_t sub_100062A50()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 432) + 16);
  *(_QWORD *)(v0 + 536) = v1;
  if (v1)
  {
    v2 = 0;
    v3 = *(_QWORD *)(v0 + 312);
    *(_DWORD *)(v0 + 648) = *(_DWORD *)(v3 + 80);
    *(_QWORD *)(v0 + 568) = *(_QWORD *)(v3 + 72);
    while (1)
    {
      *(_QWORD *)(v0 + 576) = v2;
      v4 = *(_QWORD *)(v0 + 328);
      v5 = *(_QWORD *)(v0 + 304);
      sub_10005972C(*(_QWORD *)(v0 + 432)+ ((*(unsigned __int8 *)(v0 + 648) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 648))+ *(_QWORD *)(v0 + 568) * v2, v4, type metadata accessor for OwnerSharingCircle);
      if (*(_BYTE *)(v4 + *(int *)(v5 + 36)) != 2)
        break;
      sub_1000126B0(*(_QWORD *)(v0 + 328), type metadata accessor for OwnerSharingCircle);
      v2 = *(_QWORD *)(v0 + 576) + 1;
      if (v2 == *(_QWORD *)(v0 + 536))
        goto LABEL_5;
    }
    v7 = *(_QWORD *)(v0 + 304);
    *(_BYTE *)(v0 + 658) = 0x201u >> (8 * *(_BYTE *)(*(_QWORD *)(v0 + 272) + *(int *)(v7 + 28)));
    v8 = *(_QWORD **)(v0 + 288);
    *(_DWORD *)(v0 + 652) = *(_DWORD *)(v7 + 20);
    v9 = v8[43];
    v10 = v8[45];
    v11 = sub_10001AA44(v8 + 40, v9);
    *(_QWORD *)(v0 + 40) = v9;
    *(_QWORD *)(v0 + 48) = v10;
    v12 = sub_100018F08((_QWORD *)(v0 + 16));
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v12, v11, v9);
    v6 = sub_100062EC0;
  }
  else
  {
LABEL_5:
    swift_bridgeObjectRelease();
    v6 = sub_100063188;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_100062B9C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 552);
  *(_QWORD *)(*v1 + 560) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = *(_QWORD *)(v2 + 288);
    swift_bridgeObjectRelease();
    v5 = sub_100062CF0;
    v6 = v4;
  }
  else
  {
    v5 = sub_100062C10;
    v6 = 0;
  }
  return swift_task_switch(v5, v6, 0);
}

uint64_t sub_100062C10()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v1 = *(_QWORD *)(v0 + 544) + 1;
  if (v1 == *(_QWORD *)(v0 + 520))
  {
    swift_bridgeObjectRelease();
    v2 = *(_QWORD *)(v0 + 288);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 56));
    return swift_task_switch(sub_100062A50, v2, 0);
  }
  else
  {
    *(_QWORD *)(v0 + 544) = v1;
    v4 = *(_QWORD *)(v0 + 288);
    v5 = *(_QWORD *)(v0 + 424)
       + ((*(unsigned __int8 *)(v0 + 644) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 644))
       + *(_QWORD *)(v0 + 528) * v1;
    v6 = (_QWORD *)swift_task_alloc(dword_1011206BC);
    *(_QWORD *)(v0 + 552) = v6;
    *v6 = v0;
    v6[1] = sub_100062B9C;
    return sub_100DB8700(v5, v4 + 160, v0 + 56);
  }
}

uint64_t sub_100062CF0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v13;

  v1 = v0[70];
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 7);
  swift_errorRetain(v1);
  v2 = swift_errorRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = v0[70];
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    v13 = v7;
    *(_DWORD *)v6 = 136315138;
    swift_getErrorValue(v5, v0 + 21, v0 + 18);
    v8 = Error.localizedDescription.getter(v0[19], v0[20]);
    v0[23] = sub_100016940(v8, v9, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 23, v0 + 24, v6 + 4, v6 + 12);
    swift_bridgeObjectRelease();
    swift_errorRelease(v5);
    swift_errorRelease(v5);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Failure in share request acceptance, server share create error %s", v6, 0xCu);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);
  }
  else
  {
    v10 = v0[70];
    swift_errorRelease(v10);
    swift_errorRelease(v10);
  }

  v11 = (_QWORD *)swift_task_alloc(dword_1010EC8E4);
  v0[77] = v11;
  *v11 = v0;
  v11[1] = sub_100063780;
  return sub_100066B38(v0[53], v0[54], v0[60]);
}

uint64_t sub_100062EC0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = *(int *)(v0 + 652);
  v2 = *(_QWORD *)(v0 + 328);
  sub_10001AA44((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
  v3 = (_QWORD *)swift_task_alloc(dword_1010FBB04);
  *(_QWORD *)(v0 + 584) = v3;
  *v3 = v0;
  v3[1] = sub_100062F30;
  return sub_100434AD0(v2 + v1, *(_BYTE *)(v0 + 658));
}

uint64_t sub_100062F30(char a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *v2;
  swift_task_dealloc(*(_QWORD *)(*v2 + 584));
  if (v1)
  {
    *(_QWORD *)(v4 + 632) = v1;
    v5 = *(_QWORD *)(v4 + 288);
    v6 = sub_1000639E4;
  }
  else
  {
    *(_BYTE *)(v4 + 659) = a1 & 1;
    v6 = sub_100062FAC;
    v5 = 0;
  }
  return swift_task_switch(v6, v5, 0);
}

uint64_t sub_100062FAC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _BYTE *v6;

  if (*(_BYTE *)(v0 + 659) == 1)
  {
    v1 = *(_QWORD *)(v0 + 288);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
    v2 = sub_100063040;
    v3 = v1;
  }
  else
  {
    v4 = sub_10006808C();
    v5 = swift_allocError(&type metadata for BeaconServiceError, v4, 0, 0);
    *v6 = 0;
    swift_willThrow(v5);
    *(_QWORD *)(v0 + 632) = v5;
    v3 = *(_QWORD *)(v0 + 288);
    v2 = sub_1000639E4;
  }
  return swift_task_switch(v2, v3, 0);
}

uint64_t sub_100063040()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;

  sub_1000126B0(*(_QWORD *)(v0 + 328), type metadata accessor for OwnerSharingCircle);
  v1 = *(_QWORD *)(v0 + 576) + 1;
  if (v1 == *(_QWORD *)(v0 + 536))
  {
LABEL_4:
    swift_bridgeObjectRelease();
    v4 = sub_100063188;
  }
  else
  {
    while (1)
    {
      *(_QWORD *)(v0 + 576) = v1;
      v2 = *(_QWORD *)(v0 + 328);
      v3 = *(_QWORD *)(v0 + 304);
      sub_10005972C(*(_QWORD *)(v0 + 432)+ ((*(unsigned __int8 *)(v0 + 648) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 648))+ *(_QWORD *)(v0 + 568) * v1, v2, type metadata accessor for OwnerSharingCircle);
      if (*(_BYTE *)(v2 + *(int *)(v3 + 36)) != 2)
        break;
      sub_1000126B0(*(_QWORD *)(v0 + 328), type metadata accessor for OwnerSharingCircle);
      v1 = *(_QWORD *)(v0 + 576) + 1;
      if (v1 == *(_QWORD *)(v0 + 536))
        goto LABEL_4;
    }
    v5 = *(_QWORD *)(v0 + 304);
    *(_BYTE *)(v0 + 658) = 0x201u >> (8 * *(_BYTE *)(*(_QWORD *)(v0 + 272) + *(int *)(v5 + 28)));
    v6 = *(_QWORD **)(v0 + 288);
    *(_DWORD *)(v0 + 652) = *(_DWORD *)(v5 + 20);
    v7 = v6[43];
    v8 = v6[45];
    v9 = sub_10001AA44(v6 + 40, v7);
    *(_QWORD *)(v0 + 40) = v7;
    *(_QWORD *)(v0 + 48) = v8;
    v10 = sub_100018F08((_QWORD *)(v0 + 16));
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v10, v9, v7);
    v4 = sub_100062EC0;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_100063188()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t (*v4)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v1 = v0[36];
  (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(v0[52] + 56))(v0[37], 1, 1, v0[51]);
  v4 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1011206A0 + dword_1011206A0);
  v2 = (_QWORD *)swift_task_alloc(unk_1011206A4);
  v0[74] = v2;
  *v2 = v0;
  v2[1] = sub_100063214;
  return v4(v0[53], v0[37], v0[47], v1 + 120, v1 + 240);
}

uint64_t sub_100063214()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 592);
  *(_QWORD *)(*v1 + 600) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    sub_100004048(*(_QWORD *)(v2 + 296), &qword_1010ED860);
    v4 = sub_10006343C;
    v5 = 0;
  }
  else
  {
    v7 = v2 + 288;
    v6 = *(_QWORD *)(v2 + 288);
    sub_100004048(*(_QWORD *)(v7 + 8), &qword_1010ED860);
    swift_bridgeObjectRelease();
    v4 = sub_1000632A8;
    v5 = v6;
  }
  return swift_task_switch(v4, v5, 0);
}

uint64_t sub_1000632A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t, char);

  v1 = *(int *)(v0 + 640);
  v2 = *(_QWORD *)(v0 + 272);
  v6 = (uint64_t (*)(uint64_t, char))((char *)&dword_101116580 + dword_101116580);
  v3 = *(_BYTE *)(v2 + *(int *)(*(_QWORD *)(v0 + 304) + 28));
  v4 = (_QWORD *)swift_task_alloc(unk_101116584);
  *(_QWORD *)(v0 + 608) = v4;
  *v4 = v0;
  v4[1] = sub_100063328;
  return v6(v2 + v1, v3);
}

uint64_t sub_100063328()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 288);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 608));
  return swift_task_switch(sub_100063380, v1, 0);
}

uint64_t sub_100063380()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *(_QWORD *)(v0 + 496);
  v2 = *(_QWORD *)(v0 + 480);
  v3 = *(_QWORD *)(v0 + 432);
  v5 = *(_QWORD *)(v0 + 352);
  v4 = *(_QWORD *)(v0 + 360);
  v7 = *(_QWORD *)(v0 + 328);
  v6 = *(_QWORD *)(v0 + 336);
  v8 = *(_QWORD *)(v0 + 320);
  v9 = *(_QWORD *)(v0 + 296);
  swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 424), 2);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease_n(v3, 2);
  swift_bridgeObjectRelease(v2);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10006343C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 288);
  swift_bridgeObjectRelease();
  return swift_task_switch(sub_10006347C, v1, 0);
}

uint64_t sub_10006347C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(_QWORD *)(v0 + 496);
  v2 = *(_QWORD *)(v0 + 480);
  v3 = *(_QWORD *)(v0 + 432);
  swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 424), 2);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease_n(v3, 2);
  swift_bridgeObjectRelease(v2);
  v4 = *(_QWORD *)(v0 + 352);
  v6 = *(_QWORD *)(v0 + 328);
  v5 = *(_QWORD *)(v0 + 336);
  v7 = *(_QWORD *)(v0 + 320);
  v8 = *(_QWORD *)(v0 + 296);
  swift_task_dealloc(*(_QWORD *)(v0 + 360));
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100063524()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint8_t *v11;
  unint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;

  v1 = *(_QWORD *)(v0 + 512);
  v3 = *(_QWORD *)(v0 + 424);
  v2 = *(_QWORD *)(v0 + 432);
  swift_errorRetain(v1);
  v4 = swift_errorRetain(v1);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.error.getter(v5);
  if (os_log_type_enabled(v5, v6))
  {
    v21 = v2;
    v7 = (uint8_t *)swift_slowAlloc(12, -1);
    v22 = swift_slowAlloc(32, -1);
    v8 = v22;
    *(_DWORD *)v7 = 136315138;
    swift_getErrorValue(v1, v0 + 192, v0 + 120);
    v9 = Error.localizedDescription.getter(*(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 136));
    *(_QWORD *)(v0 + 176) = sub_100016940(v9, v10, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 176, v0 + 184, v7 + 4, v7 + 12);
    swift_bridgeObjectRelease();
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Failure in share request acceptance, cloud update error %s", v7, 0xCu);
    swift_arrayDestroy(v8, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1, -1);
    v11 = v7;
    v2 = v21;
    swift_slowDealloc(v11, -1, -1);
  }
  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
  }

  v12 = sub_100067D98();
  v13 = swift_allocError(&type metadata for BeaconSharingFlowError, v12, 0, 0);
  *v14 = 1;
  swift_willThrow(v13);
  swift_errorRelease(v1);
  swift_bridgeObjectRelease_n(v3, 2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n(v2, 2);
  swift_bridgeObjectRelease();
  v15 = *(_QWORD *)(v0 + 352);
  v17 = *(_QWORD *)(v0 + 328);
  v16 = *(_QWORD *)(v0 + 336);
  v18 = *(_QWORD *)(v0 + 320);
  v19 = *(_QWORD *)(v0 + 296);
  swift_task_dealloc(*(_QWORD *)(v0 + 360));
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100063780()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 616);
  *(_QWORD *)(*v1 + 624) = v0;
  swift_task_dealloc(v3);
  v4 = *(_QWORD *)(v2 + 288);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v0)
    v5 = sub_100063930;
  else
    v5 = sub_100063844;
  return swift_task_switch(v5, v4, 0);
}

uint64_t sub_100063844()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = *(_QWORD *)(v0 + 560);
  v3 = *(_QWORD *)(v0 + 424);
  v2 = *(_QWORD *)(v0 + 432);
  v4 = sub_100067D98();
  v5 = swift_allocError(&type metadata for BeaconSharingFlowError, v4, 0, 0);
  *v6 = 2;
  swift_willThrow(v5);
  swift_errorRelease(v1);
  swift_bridgeObjectRelease_n(v3, 2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n(v2, 2);
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(v0 + 352);
  v9 = *(_QWORD *)(v0 + 328);
  v8 = *(_QWORD *)(v0 + 336);
  v10 = *(_QWORD *)(v0 + 320);
  v11 = *(_QWORD *)(v0 + 296);
  swift_task_dealloc(*(_QWORD *)(v0 + 360));
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100063930()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *(_QWORD *)(v0 + 496);
  v2 = *(_QWORD *)(v0 + 480);
  v4 = *(_QWORD *)(v0 + 424);
  v3 = *(_QWORD *)(v0 + 432);
  swift_errorRelease(*(_QWORD *)(v0 + 560));
  swift_bridgeObjectRelease_n(v4, 2);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease_n(v3, 2);
  swift_bridgeObjectRelease(v2);
  v5 = *(_QWORD *)(v0 + 352);
  v7 = *(_QWORD *)(v0 + 328);
  v6 = *(_QWORD *)(v0 + 336);
  v8 = *(_QWORD *)(v0 + 320);
  v9 = *(_QWORD *)(v0 + 296);
  swift_task_dealloc(*(_QWORD *)(v0 + 360));
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000639E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)();
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v24;

  v1 = *(_QWORD *)(v0 + 632);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
  swift_errorRetain(v1);
  v2 = swift_errorRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = *(_QWORD *)(v0 + 632);
    v6 = *(_QWORD *)(v0 + 328);
    v7 = swift_slowAlloc(12, -1);
    v8 = swift_slowAlloc(32, -1);
    v24 = v8;
    *(_DWORD *)v7 = 136315138;
    swift_getErrorValue(v5, v0 + 200, v0 + 96);
    v9 = Error.localizedDescription.getter(*(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 112));
    *(_QWORD *)(v7 + 4) = sub_100016940(v9, v10, &v24);
    swift_bridgeObjectRelease();
    swift_errorRelease(v5);
    swift_errorRelease(v5);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Failure in share request acceptance, server share deletion error %s", (uint8_t *)v7, 0xCu);
    swift_arrayDestroy(v8, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v7, -1, -1);

    v11 = v5;
  }
  else
  {
    v12 = *(_QWORD *)(v0 + 632);
    v6 = *(_QWORD *)(v0 + 328);

    swift_errorRelease(v12);
    swift_errorRelease(v12);
    v11 = v12;
  }
  swift_errorRelease(v11);
  sub_1000126B0(v6, type metadata accessor for OwnerSharingCircle);
  v13 = *(_QWORD *)(v0 + 576) + 1;
  if (v13 == *(_QWORD *)(v0 + 536))
  {
LABEL_7:
    swift_bridgeObjectRelease();
    v16 = sub_100063188;
  }
  else
  {
    while (1)
    {
      *(_QWORD *)(v0 + 576) = v13;
      v14 = *(_QWORD *)(v0 + 328);
      v15 = *(_QWORD *)(v0 + 304);
      sub_10005972C(*(_QWORD *)(v0 + 432)+ ((*(unsigned __int8 *)(v0 + 648) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 648))+ *(_QWORD *)(v0 + 568) * v13, v14, type metadata accessor for OwnerSharingCircle);
      if (*(_BYTE *)(v14 + *(int *)(v15 + 36)) != 2)
        break;
      sub_1000126B0(*(_QWORD *)(v0 + 328), type metadata accessor for OwnerSharingCircle);
      v13 = *(_QWORD *)(v0 + 576) + 1;
      if (v13 == *(_QWORD *)(v0 + 536))
        goto LABEL_7;
    }
    v17 = *(_QWORD *)(v0 + 304);
    *(_BYTE *)(v0 + 658) = 0x201u >> (8 * *(_BYTE *)(*(_QWORD *)(v0 + 272) + *(int *)(v17 + 28)));
    v18 = *(_QWORD **)(v0 + 288);
    *(_DWORD *)(v0 + 652) = *(_DWORD *)(v17 + 20);
    v19 = v18[43];
    v20 = v18[45];
    v21 = sub_10001AA44(v18 + 40, v19);
    *(_QWORD *)(v0 + 40) = v19;
    *(_QWORD *)(v0 + 48) = v20;
    v22 = sub_100018F08((_QWORD *)(v0 + 16));
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v22, v21, v19);
    v16 = sub_100062EC0;
  }
  return swift_task_switch(v16, 0, 0);
}

_QWORD *sub_100063C94()
{
  _QWORD *v0;

  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 15);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 20);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 25);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 30);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 35);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 40);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 46);
  swift_bridgeObjectRelease();
  swift_defaultActor_destroy(v0);
  return v0;
}

uint64_t sub_100063CF8()
{
  uint64_t v0;

  sub_100063C94();
  return swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for ShareAcceptUseCase()
{
  return objc_opt_self(_TtC12searchpartyd18ShareAcceptUseCase);
}

uint64_t sub_100063D30()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 120) = v0;
  return swift_task_switch(sub_100063D48, v0, 0);
}

uint64_t sub_100063D48()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 120) + 112);
  *(_QWORD *)(v0 + 128) = v1;
  return swift_task_switch(sub_100063D64, v1, 0);
}

uint64_t sub_100063D64()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v2 = (_QWORD *)swift_task_alloc(v1);
  v0[17] = v2;
  v3 = sub_10001A9A8(&qword_1010EC840);
  v0[18] = v3;
  *v2 = v0;
  v2[1] = sub_100063DE4;
  return unsafeBlocking<A>(_:)(v0 + 2, sub_10001ED30, v0[16], v3);
}

uint64_t sub_100063DE4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 128);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 136));
  swift_release();
  return swift_task_switch(sub_100063E40, v1, 0);
}

uint64_t sub_100063E40()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[15];
  v0[19] = v0[2];
  return swift_task_switch(sub_100063E5C, v1, 0);
}

uint64_t sub_100063E5C()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;

  v0[3] = v0[19];
  v1 = (_QWORD *)swift_task_alloc(async function pointer to Sequence.asyncFilter(_:)[1]);
  v0[20] = v1;
  v2 = sub_1000193E4(&qword_1010EC8B0, &qword_1010EC840);
  *v1 = v0;
  v1[1] = sub_100063EDC;
  return Sequence.asyncFilter(_:)(&unk_1010EC8A8, v0[15], v0[18], v2);
}

uint64_t sub_100063EDC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 160);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 120);
  *(_QWORD *)(*(_QWORD *)v1 + 168) = a1;
  swift_task_dealloc(v2);
  swift_bridgeObjectRelease();
  return swift_task_switch(sub_100063F44, v3, 0);
}

uint64_t sub_100063F44()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[16];
  v0[22] = *(_QWORD *)(v0[21] + 16);
  swift_bridgeObjectRelease();
  return swift_task_switch(sub_100063F8C, v1, 0);
}

uint64_t sub_100063F8C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v2 = (_QWORD *)swift_task_alloc(v1);
  *(_QWORD *)(v0 + 184) = v2;
  *v2 = v0;
  v2[1] = sub_100064000;
  return unsafeBlocking<A>(_:)(v0 + 32, sub_100067FA8, *(_QWORD *)(v0 + 128), &type metadata for Int);
}

uint64_t sub_100064000()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 128);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 184));
  swift_release();
  return swift_task_switch(sub_100064060, v1, 0);
}

uint64_t sub_100064060()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[15];
  v0[24] = v0[4];
  return swift_task_switch(sub_10006407C, v1, 0);
}

uint64_t sub_10006407C()
{
  uint64_t v0;

  if (qword_1010E9D08 != -1)
    swift_once(&qword_1010E9D08, sub_10059A6E0);
  *(_QWORD *)(v0 + 200) = qword_1011B71A8;
  return swift_task_switch(sub_1000640E4, 0, 0);
}

uint64_t sub_1000640E4()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v2 = (_QWORD *)swift_task_alloc(v1);
  *(_QWORD *)(v0 + 208) = v2;
  *v2 = v0;
  v2[1] = sub_100064158;
  return unsafeBlocking<A>(_:)(v0 + 40, sub_100033264, *(_QWORD *)(v0 + 200), &type metadata for Configuration);
}

uint64_t sub_100064158()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 208));
  swift_release();
  return swift_task_switch(sub_1000641B4, 0, 0);
}

uint64_t sub_1000641B4()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[15];
  v0[27] = v0[5];
  return swift_task_switch(sub_1000641D0, v1, 0);
}

uint64_t sub_1000641D0()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v1 = *(_QWORD *)(v0 + 176);
  v2 = sub_100C1A85C(*(_QWORD *)(v0 + 216));
  swift_bridgeObjectRelease();
  if (v1 >= v2)
  {
    if (qword_1010E9938 != -1)
      swift_once(&qword_1010E9938, sub_1000AFBB0);
    v4 = type metadata accessor for Logger(0);
    v5 = sub_10001A9E8(v4, (uint64_t)qword_1011B6748);
    v6 = Logger.logObject.getter(v5);
    v7 = static os_log_type_t.error.getter(v6);
    if (os_log_type_enabled(v6, v7))
    {
      v8 = *(_QWORD *)(v0 + 176);
      v9 = swift_slowAlloc(22, -1);
      *(_DWORD *)v9 = 134218240;
      *(_QWORD *)(v0 + 64) = v8;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72, v9 + 4, v9 + 12);
      *(_WORD *)(v9 + 12) = 2048;
      *(_QWORD *)(v0 + 72) = v2;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 72, v0 + 80, v9 + 14, v9 + 22);
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "        Cannot accept share. acceptedExplicitSharesCount: %ld >= maxAcceptedSharedItems: %lu.", (uint8_t *)v9, 0x16u);
      swift_slowDealloc(v9, -1, -1);
    }

    type metadata accessor for SPBeaconSharingError(0);
    v11 = v10;
    *(_QWORD *)(v0 + 56) = 13;
    v12 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
    v13 = sub_100006204((unint64_t *)&qword_1010EB490, (uint64_t (*)(uint64_t))type metadata accessor for SPBeaconSharingError, (uint64_t)&unk_100E21930);
    v14 = _BridgedStoredNSError.init(_:userInfo:)((_QWORD *)(v0 + 48), v0 + 56, v12, v11, v13);
    swift_willThrow(v14);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    *(_QWORD *)(v0 + 224) = qword_1011B71A8;
    return swift_task_switch(sub_1000643D8, 0, 0);
  }
}

uint64_t sub_1000643D8()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v2 = (_QWORD *)swift_task_alloc(v1);
  *(_QWORD *)(v0 + 232) = v2;
  *v2 = v0;
  v2[1] = sub_10006444C;
  return unsafeBlocking<A>(_:)(v0 + 80, sub_100033264, *(_QWORD *)(v0 + 224), &type metadata for Configuration);
}

uint64_t sub_10006444C()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 232));
  swift_release();
  return swift_task_switch(sub_1000644A8, 0, 0);
}

uint64_t sub_1000644A8()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[15];
  v0[30] = v0[10];
  return swift_task_switch(sub_1000644C4, v1, 0);
}

uint64_t sub_1000644C4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v1 = v0[24];
  v2 = sub_100C1A870(v0[30]);
  swift_bridgeObjectRelease();
  if (v1 >= v2)
  {
    if (qword_1010E9938 != -1)
      swift_once(&qword_1010E9938, sub_1000AFBB0);
    v4 = type metadata accessor for Logger(0);
    v5 = sub_10001A9E8(v4, (uint64_t)qword_1011B6748);
    v6 = Logger.logObject.getter(v5);
    v7 = static os_log_type_t.error.getter(v6);
    if (os_log_type_enabled(v6, v7))
    {
      v8 = v0[24];
      v9 = swift_slowAlloc(22, -1);
      *(_DWORD *)v9 = 134218240;
      v0[13] = v8;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 13, v0 + 14, v9 + 4, v9 + 12);
      *(_WORD *)(v9 + 12) = 2048;
      v0[14] = v2;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 14, v0 + 15, v9 + 14, v9 + 22);
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "        Cannot accept share. totalPairedAccessory: %ld >= maxPairEligibleDevices: %ld.", (uint8_t *)v9, 0x16u);
      swift_slowDealloc(v9, -1, -1);
    }

    type metadata accessor for SPBeaconSharingError(0);
    v11 = v10;
    v0[12] = 12;
    v12 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
    v13 = sub_100006204((unint64_t *)&qword_1010EB490, (uint64_t (*)(uint64_t))type metadata accessor for SPBeaconSharingError, (uint64_t)&unk_100E21930);
    v14 = _BridgedStoredNSError.init(_:userInfo:)(v0 + 11, v0 + 12, v12, v11, v13);
    swift_willThrow(v14);
    v3 = (uint64_t (*)(void))v0[1];
  }
  else
  {
    v3 = (uint64_t (*)(void))v0[1];
  }
  return v3();
}

uint64_t sub_1000646A0(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2[2] = a1;
  v2[3] = a2;
  v3 = type metadata accessor for UUID(0);
  v2[4] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[5] = v4;
  v5 = *(_QWORD *)(v4 + 64);
  v2[6] = v5;
  v2[7] = swift_task_alloc((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10001A9A8((uint64_t *)&unk_1010EE180);
  v2[8] = v6;
  v2[9] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10006472C, 0, 0);
}

uint64_t sub_10006472C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 24) + 112);
  *(_QWORD *)(v0 + 80) = v1;
  v2 = type metadata accessor for MemberSharingCircle(0);
  *(_QWORD *)(v0 + 88) = v2;
  *(_DWORD *)(v0 + 112) = *(_DWORD *)(v2 + 24);
  return swift_task_switch(sub_100064780, v1, 0);
}

uint64_t sub_100064780()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v1 = *(_QWORD *)(v0 + 80);
  v3 = *(_QWORD *)(v0 + 48);
  v2 = *(_QWORD *)(v0 + 56);
  v4 = *(_QWORD *)(v0 + 32);
  v5 = *(_QWORD *)(v0 + 40);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v5 + 16))(v2, *(_QWORD *)(v0 + 16) + *(int *)(v0 + 112), v4);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (v6 + 24) & ~v6;
  v8 = swift_allocObject(&unk_101052C90, v7 + v3, v6 | 7);
  *(_QWORD *)(v0 + 96) = v8;
  *(_QWORD *)(v8 + 16) = v1;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(v8 + v7, v2, v4);
  v9 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v10 = (_QWORD *)swift_task_alloc(v9);
  *(_QWORD *)(v0 + 104) = v10;
  *v10 = v0;
  v10[1] = sub_100064860;
  return unsafeBlocking<A>(_:)(*(_QWORD *)(v0 + 72), sub_100067DF8, v8, *(_QWORD *)(v0 + 64));
}

uint64_t sub_100064860()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 104));
  swift_release();
  return swift_task_switch(sub_1000648BC, 0, 0);
}

uint64_t sub_1000648BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  _BOOL8 v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 72);
  v2 = type metadata accessor for SharedBeaconRecord(0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(v1, 1, v2) == 1)
  {
    sub_100004048(v1, (uint64_t *)&unk_1010EE180);
LABEL_5:
    v4 = 0;
    goto LABEL_6;
  }
  v3 = *(unsigned __int8 *)(v1 + *(int *)(v2 + 64));
  sub_1000126B0(v1, type metadata accessor for SharedBeaconRecord);
  if (v3 != 2)
    goto LABEL_5;
  v4 = *(unsigned __int8 *)(*(_QWORD *)(v0 + 16) + *(int *)(*(_QWORD *)(v0 + 88) + 40)) == 1;
LABEL_6:
  v5 = *(_QWORD *)(v0 + 56);
  swift_task_dealloc(*(_QWORD *)(v0 + 72));
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(_BOOL8))(v0 + 8))(v4);
}

uint64_t sub_100064984(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  _QWORD v18[2];

  v6 = type metadata accessor for OwnerPeerTrust(0);
  __chkstk_darwin(v6);
  v8 = (char *)v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for OwnerSharingCircle(0);
  v10 = __chkstk_darwin(v9);
  v12 = (char *)v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  LOBYTE(a2) = static UUID.== infix(_:_:)(a1 + *(int *)(v10 + 24), a2 + *(int *)(v10 + 24));
  sub_10005972C(a1, (uint64_t)v12, type metadata accessor for OwnerSharingCircle);
  sub_10005972C(a3, (uint64_t)v8, type metadata accessor for OwnerPeerTrust);
  if ((a2 & 1) != 0 && (v13 = *(_QWORD *)&v12[*(int *)(v9 + 32)], *(_QWORD *)(v13 + 16)))
  {
    v14 = (uint64_t)&v8[*(int *)(v6 + 20)];
    swift_bridgeObjectRetain(v13);
    sub_100003FB0(v14);
    v16 = v15;
    swift_bridgeObjectRelease();
  }
  else
  {
    v16 = 0;
  }
  sub_1000126B0((uint64_t)v8, type metadata accessor for OwnerPeerTrust);
  sub_1000126B0((uint64_t)v12, type metadata accessor for OwnerSharingCircle);
  return v16 & 1;
}

uint64_t sub_100064AEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3[4] = a2;
  v3[5] = a3;
  v3[3] = a1;
  v5 = type metadata accessor for UUID(0);
  v3[6] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v3[7] = v6;
  v7 = *(_QWORD *)(v6 + 64);
  v3[8] = v7;
  v3[9] = swift_task_alloc((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100064B58, a3, 0);
}

uint64_t sub_100064B58()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 40) + 112);
  *(_QWORD *)(v0 + 80) = v1;
  *(_DWORD *)(v0 + 112) = *(_DWORD *)(type metadata accessor for OwnerSharingCircle(0) + 20);
  return swift_task_switch(sub_100064BA8, v1, 0);
}

uint64_t sub_100064BA8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  v2 = *(_QWORD *)(v0 + 72);
  v1 = *(_QWORD *)(v0 + 80);
  v4 = *(_QWORD *)(v0 + 56);
  v3 = *(_QWORD *)(v0 + 64);
  v5 = *(_QWORD *)(v0 + 48);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v4 + 16))(v2, *(_QWORD *)(v0 + 32) + *(int *)(v0 + 112), v5);
  v6 = *(unsigned __int8 *)(v4 + 80);
  v7 = (v6 + 24) & ~v6;
  v8 = swift_allocObject(&unk_101052CE0, v7 + v3, v6 | 7);
  *(_QWORD *)(v0 + 88) = v8;
  *(_QWORD *)(v8 + 16) = v1;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v8 + v7, v2, v5);
  v9 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v10 = (_QWORD *)swift_task_alloc(v9);
  *(_QWORD *)(v0 + 96) = v10;
  v11 = sub_10001A9A8(&qword_1010EC8C8);
  *v10 = v0;
  v10[1] = sub_100064CA4;
  return unsafeBlocking<A>(_:)(v0 + 16, sub_10006817C, v8, v11);
}

uint64_t sub_100064CA4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 80);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 96));
  swift_release();
  return swift_task_switch(sub_100064D04, v1, 0);
}

uint64_t sub_100064D04()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[5];
  v0[13] = v0[2];
  return swift_task_switch(sub_100064D20, v1, 0);
}

uint64_t sub_100064D20()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 72);
  **(_QWORD **)(v0 + 24) = *(_QWORD *)(v0 + 104);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100064D60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;

  v5[7] = a4;
  v5[8] = v4;
  v5[5] = a2;
  v5[6] = a3;
  v5[4] = a1;
  v6 = type metadata accessor for OwnerPeerTrust(0);
  v5[9] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[10] = v7;
  v8 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[11] = swift_task_alloc(v8);
  v5[12] = swift_task_alloc(v8);
  v9 = type metadata accessor for MemberPeerTrust(0);
  v5[13] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v5[14] = v10;
  v11 = (*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[15] = swift_task_alloc(v11);
  v5[16] = swift_task_alloc(v11);
  v12 = sub_10001A9A8(&qword_1010EC870);
  v5[17] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v12 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for OwnerSharingCircle(0);
  v5[18] = v13;
  v14 = *(_QWORD *)(v13 - 8);
  v5[19] = v14;
  v15 = (*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v5[20] = swift_task_alloc(v15);
  v5[21] = swift_task_alloc(v15);
  return swift_task_switch(sub_100064E6C, v4, 0);
}

uint64_t sub_100064E6C()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  _BOOL4 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  _BOOL4 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;

  v1 = *(_QWORD *)(v0 + 32);
  v2 = *(_QWORD *)(v1 + 16);
  if (!v2)
    goto LABEL_10;
  v49 = v53[19];
  v3 = (*(unsigned __int8 *)(v49 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v49 + 80);
  v4 = qword_1010E9938;
  swift_bridgeObjectRetain(v1);
  if (v4 != -1)
    goto LABEL_23;
  while (1)
  {
    v5 = 0;
    v3 += v1;
    v47 = v2;
    do
    {
      if (__OFADD__(v5, 1))
      {
        __break(1u);
        goto LABEL_22;
      }
      v51 = v5 + 1;
      v6 = v53[21];
      v7 = v3 + *(_QWORD *)(v49 + 72) * v5;
      v8 = type metadata accessor for Logger(0);
      v9 = sub_10001A9E8(v8, (uint64_t)qword_1011B6748);
      v10 = sub_10005972C(v7, v6, type metadata accessor for OwnerSharingCircle);
      v1 = v9;
      v11 = Logger.logObject.getter(v10);
      v12 = static os_log_type_t.default.getter(v11);
      v13 = os_log_type_enabled(v11, v12);
      v14 = v53[21];
      if (v13)
      {
        v15 = swift_slowAlloc(22, -1);
        v16 = swift_slowAlloc(32, -1);
        v54 = v16;
        *(_DWORD *)v15 = 141558275;
        *(_QWORD *)(v15 + 4) = 1752392040;
        *(_WORD *)(v15 + 12) = 2081;
        v17 = v3;
        v18 = type metadata accessor for UUID(0);
        v19 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v20 = v18;
        v3 = v17;
        v21 = dispatch thunk of CustomStringConvertible.description.getter(v20, v19);
        v1 = v22;
        *(_QWORD *)(v15 + 14) = sub_100016940(v21, v22, &v54);
        swift_bridgeObjectRelease();
        sub_1000126B0(v14, type metadata accessor for OwnerSharingCircle);
        _os_log_impl((void *)&_mh_execute_header, v11, v12, "Data update on share request acceptance. Create %{private,mask.hash}s", (uint8_t *)v15, 0x16u);
        swift_arrayDestroy(v16, 1, (char *)&type metadata for Any + 8);
        v23 = v16;
        v2 = v47;
        swift_slowDealloc(v23, -1, -1);
        swift_slowDealloc(v15, -1, -1);
      }
      else
      {
        sub_1000126B0(v53[21], type metadata accessor for OwnerSharingCircle);
      }

      ++v5;
    }
    while (v51 != v2);
    swift_bridgeObjectRelease();
LABEL_10:
    v1 = v53[6];
    v2 = *(_QWORD *)(v1 + 16);
    if (!v2)
      break;
    v50 = v53[19];
    v24 = (*(unsigned __int8 *)(v50 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v50 + 80);
    v25 = qword_1010E9938;
    swift_bridgeObjectRetain(v1);
    if (v25 != -1)
    {
      swift_once(&qword_1010E9938, sub_1000AFBB0);
      v50 = v53[19];
    }
    v26 = 0;
    v3 = v1 + v24;
    v48 = v2;
    while (!__OFADD__(v26, 1))
    {
      v52 = v26 + 1;
      v27 = v53[20];
      v28 = v3 + *(_QWORD *)(v50 + 72) * v26;
      v29 = type metadata accessor for Logger(0);
      v30 = sub_10001A9E8(v29, (uint64_t)qword_1011B6748);
      v31 = sub_10005972C(v28, v27, type metadata accessor for OwnerSharingCircle);
      v1 = v30;
      v32 = Logger.logObject.getter(v31);
      v33 = static os_log_type_t.default.getter(v32);
      v34 = os_log_type_enabled(v32, v33);
      v35 = v53[20];
      if (v34)
      {
        v36 = swift_slowAlloc(22, -1);
        v37 = swift_slowAlloc(32, -1);
        v54 = v37;
        *(_DWORD *)v36 = 141558275;
        *(_QWORD *)(v36 + 4) = 1752392040;
        *(_WORD *)(v36 + 12) = 2081;
        v38 = v3;
        v39 = type metadata accessor for UUID(0);
        v40 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v41 = v39;
        v3 = v38;
        v42 = dispatch thunk of CustomStringConvertible.description.getter(v41, v40);
        v1 = v43;
        *(_QWORD *)(v36 + 14) = sub_100016940(v42, v43, &v54);
        swift_bridgeObjectRelease();
        sub_1000126B0(v35, type metadata accessor for OwnerSharingCircle);
        _os_log_impl((void *)&_mh_execute_header, v32, v33, "Data update on share request acceptance. Delete %{private,mask.hash}s", (uint8_t *)v36, 0x16u);
        swift_arrayDestroy(v37, 1, (char *)&type metadata for Any + 8);
        v44 = v37;
        v2 = v48;
        swift_slowDealloc(v44, -1, -1);
        swift_slowDealloc(v36, -1, -1);
      }
      else
      {
        sub_1000126B0(v53[20], type metadata accessor for OwnerSharingCircle);
      }

      ++v26;
      if (v52 == v2)
      {
        swift_bridgeObjectRelease();
        goto LABEL_20;
      }
    }
LABEL_22:
    __break(1u);
LABEL_23:
    swift_once(&qword_1010E9938, sub_1000AFBB0);
    v49 = v53[19];
  }
LABEL_20:
  v45 = *(_QWORD *)(v53[8] + 112);
  v53[22] = v45;
  return swift_task_switch(sub_100065364, v45, 0);
}

uint64_t sub_100065364()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 184) = *(_QWORD *)(*(_QWORD *)(v0 + 176) + 128);
  return swift_task_switch(sub_100065384, 0, 0);
}

uint64_t sub_100065384()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v0 + 192) = v1;
  *v1 = v0;
  v1[1] = sub_10006540C;
  return withCheckedContinuation<A>(isolation:function:_:)(v1, 0, 0, 0x696176416E656877, 0xEF2928656C62616CLL, sub_100068180, *(_QWORD *)(v0 + 184), &type metadata for () + 1);
}

uint64_t sub_10006540C()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 192));
  return swift_task_switch(sub_100065460, 0, 0);
}

uint64_t sub_100065460()
{
  uint64_t v0;

  return swift_task_switch(sub_100065474, *(_QWORD *)(v0 + 176), 0);
}

uint64_t sub_100065474()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v2 = (_QWORD *)swift_task_alloc(v1);
  *(_QWORD *)(v0 + 200) = v2;
  v3 = sub_10001A9A8(&qword_1010EC910);
  *v2 = v0;
  v2[1] = sub_1000654F0;
  return unsafeBlocking<A>(_:)(v0 + 16, sub_100068188, *(_QWORD *)(v0 + 176), v3);
}

uint64_t sub_1000654F0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 176);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 200));
  swift_release();
  return swift_task_switch(sub_100065550, v1, 0);
}

uint64_t sub_100065550()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[22];
  v0[26] = v0[2];
  return swift_task_switch(sub_10006556C, v1, 0);
}

uint64_t sub_10006556C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v2 = (_QWORD *)swift_task_alloc(v1);
  *(_QWORD *)(v0 + 216) = v2;
  v3 = sub_10001A9A8(&qword_1010EC918);
  *v2 = v0;
  v2[1] = sub_1000655E8;
  return unsafeBlocking<A>(_:)(v0 + 24, sub_100068190, *(_QWORD *)(v0 + 176), v3);
}

uint64_t sub_1000655E8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 176);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 216));
  swift_release();
  return swift_task_switch(sub_100065648, v1, 0);
}

uint64_t sub_100065648()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[8];
  v0[28] = v0[3];
  return swift_task_switch(sub_100065664, v1, 0);
}

uint64_t sub_100065664()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = v0[28];
  v2 = v0[26];
  v3 = v0[17];
  v5 = v0[6];
  v4 = v0[7];
  v7 = v0[4];
  v6 = v0[5];
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v1);
  sub_100ADA240(v7, v6, v5, v4, v2, v1, v3);
  return swift_task_switch(sub_100065798, v0[22], 0);
}

uint64_t sub_100065798()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 232) = *(_QWORD *)(*(_QWORD *)(v0 + 176) + 128);
  return swift_task_switch(sub_1000657B8, 0, 0);
}

uint64_t sub_1000657B8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = v0[29];
  v2 = v0[17];
  v3 = swift_task_alloc(32);
  v0[30] = v3;
  *(_QWORD *)(v3 + 16) = v1;
  *(_QWORD *)(v3 + 24) = v2;
  v4 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  v0[31] = v4;
  *v4 = v0;
  v4[1] = sub_10006585C;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v4, 0, 0, 0xD000000000000011, 0x8000000100EC6890, sub_1000682F8, v3, &type metadata for () + 1);
}

uint64_t sub_10006585C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 248);
  *(_QWORD *)(*v1 + 256) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_100065DFC;
  }
  else
  {
    swift_task_dealloc(*(_QWORD *)(v2 + 240));
    v4 = sub_1000658C8;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_1000658C8()
{
  uint64_t v0;

  return swift_task_switch(sub_1000658DC, *(_QWORD *)(v0 + 64), 0);
}

uint64_t sub_1000658DC()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  __objc2_ivar_list **p_ivars;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t (*v14)(uint64_t);
  os_log_type_t v15;
  _BOOL4 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t (*v32)(uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  _BOOL4 v39;
  uint64_t v40;
  uint64_t (*v41)(uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;

  v1 = v0[26];
  v2 = *(_QWORD *)(v1 + 16);
  p_ivars = &BeaconKeyBackendServiceTrampoline.ivars;
  v4 = "Code";
  if (v2)
  {
    v5 = v0[14];
    v6 = v1 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    v7 = *(_QWORD *)(v5 + 72);
    swift_bridgeObjectRetain(v1);
    v8 = type metadata accessor for MemberPeerTrust;
    v60 = v7;
    do
    {
      sub_10005972C(v6, v0[16], v8);
      if (p_ivars[295] != (__objc2_ivar_list *)-1)
        swift_once(&qword_1010E9938, sub_1000AFBB0);
      v10 = v0[15];
      v9 = v0[16];
      v11 = type metadata accessor for Logger(0);
      sub_10001A9E8(v11, (uint64_t)qword_1011B6748);
      v12 = sub_10005972C(v9, v10, v8);
      v13 = Logger.logObject.getter(v12);
      v14 = v8;
      v15 = static os_log_type_t.default.getter(v13);
      v16 = os_log_type_enabled(v13, v15);
      v17 = v0[15];
      if (v16)
      {
        v18 = swift_slowAlloc(22, -1);
        v19 = swift_slowAlloc(32, -1);
        v63 = v19;
        *(_DWORD *)v18 = 141558275;
        *(_QWORD *)(v18 + 4) = 1752392040;
        *(_WORD *)(v18 + 12) = 2081;
        v20 = type metadata accessor for UUID(0);
        v21 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v22 = v20;
        p_ivars = (__objc2_ivar_list **)(&BeaconKeyBackendServiceTrampoline + 48);
        v23 = dispatch thunk of CustomStringConvertible.description.getter(v22, v21);
        *(_QWORD *)(v18 + 14) = sub_100016940(v23, v24, &v63);
        swift_bridgeObjectRelease();
        sub_1000126B0(v17, v14);
        _os_log_impl((void *)&_mh_execute_header, v13, v15, "Orphaned Member Peer Trust to Cleanup %{private,mask.hash}s", (uint8_t *)v18, 0x16u);
        swift_arrayDestroy(v19, 1, (char *)&type metadata for Any + 8);
        v25 = v19;
        v7 = v60;
        swift_slowDealloc(v25, -1, -1);
        v26 = v18;
        v4 = "Code";
        swift_slowDealloc(v26, -1, -1);
      }
      else
      {
        sub_1000126B0(v0[15], v14);
      }

      v8 = v14;
      v0 = v62;
      sub_1000126B0(v62[16], v14);
      v6 += v7;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease_n(v62[26], 2);
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  v27 = v0[28];
  v28 = *(_QWORD *)(v27 + 16);
  if (v28)
  {
    v29 = v0[10];
    v30 = v27 + ((*(unsigned __int8 *)(v29 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v29 + 80));
    v31 = *(_QWORD *)(v29 + 72);
    swift_bridgeObjectRetain(v27);
    v59 = *((_QWORD *)v4 + 154);
    v32 = type metadata accessor for OwnerPeerTrust;
    v61 = v31;
    do
    {
      sub_10005972C(v30, v0[12], v32);
      if (p_ivars[295] != (__objc2_ivar_list *)-1)
        swift_once(&qword_1010E9938, sub_1000AFBB0);
      v34 = v0[11];
      v33 = v0[12];
      v35 = type metadata accessor for Logger(0);
      sub_10001A9E8(v35, (uint64_t)qword_1011B6748);
      v36 = sub_10005972C(v33, v34, v32);
      v37 = Logger.logObject.getter(v36);
      v38 = static os_log_type_t.default.getter(v37);
      v39 = os_log_type_enabled(v37, v38);
      v40 = v0[11];
      if (v39)
      {
        v41 = v32;
        v42 = swift_slowAlloc(22, -1);
        v43 = swift_slowAlloc(32, -1);
        v63 = v43;
        *(_DWORD *)v42 = v59;
        *(_QWORD *)(v42 + 4) = 1752392040;
        *(_WORD *)(v42 + 12) = 2081;
        v44 = type metadata accessor for UUID(0);
        v45 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v46 = v44;
        p_ivars = (__objc2_ivar_list **)(&BeaconKeyBackendServiceTrampoline + 48);
        v47 = dispatch thunk of CustomStringConvertible.description.getter(v46, v45);
        *(_QWORD *)(v42 + 14) = sub_100016940(v47, v48, &v63);
        swift_bridgeObjectRelease();
        sub_1000126B0(v40, v41);
        _os_log_impl((void *)&_mh_execute_header, v37, v38, "Orphaned Owner Peer Trust to Cleanup %{private,mask.hash}s", (uint8_t *)v42, 0x16u);
        swift_arrayDestroy(v43, 1, (char *)&type metadata for Any + 8);
        v49 = v43;
        v31 = v61;
        swift_slowDealloc(v49, -1, -1);
        v50 = v42;
        v32 = v41;
        swift_slowDealloc(v50, -1, -1);
      }
      else
      {
        sub_1000126B0(v0[11], v32);
      }

      v0 = v62;
      sub_1000126B0(v62[12], v32);
      v30 += v31;
      --v28;
    }
    while (v28);
    swift_bridgeObjectRelease();
  }
  v52 = v0[20];
  v51 = v0[21];
  v54 = v0[16];
  v53 = v0[17];
  v55 = v0[15];
  v57 = v0[11];
  v56 = v0[12];
  sub_100004048(v53, &qword_1010EC870);
  swift_bridgeObjectRelease();
  swift_task_dealloc(v51);
  swift_task_dealloc(v52);
  swift_task_dealloc(v53);
  swift_task_dealloc(v54);
  swift_task_dealloc(v55);
  swift_task_dealloc(v56);
  swift_task_dealloc(v57);
  return ((uint64_t (*)(void))v0[1])();
}

uint64_t sub_100065DFC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 176);
  swift_task_dealloc(*(_QWORD *)(v0 + 240));
  return swift_task_switch(sub_100065E3C, v1, 0);
}

uint64_t sub_100065E3C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 64);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_task_switch(sub_100065E88, v1, 0);
}

uint64_t sub_100065E88()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_100004048(*(_QWORD *)(v0 + 136), &qword_1010EC870);
  v1 = *(_QWORD *)(v0 + 160);
  v3 = *(_QWORD *)(v0 + 128);
  v2 = *(_QWORD *)(v0 + 136);
  v4 = *(_QWORD *)(v0 + 120);
  v6 = *(_QWORD *)(v0 + 88);
  v5 = *(_QWORD *)(v0 + 96);
  swift_task_dealloc(*(_QWORD *)(v0 + 168));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_100065F20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v9 = v8;
  v10 = a8;
  v11 = a7;
  v13 = a3;
  v14 = *(_QWORD *)(a5 + 16);
  if (v14)
  {
    v18 = *(_QWORD *)(type metadata accessor for OwnerSharingCircle(0) - 8);
    v19 = a5 + ((*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80));
    v20 = *(_QWORD *)(v18 + 72);
    swift_bridgeObjectRetain(a5);
    while (1)
    {
      sub_100ADF74C(v19);
      if (v8)
        goto LABEL_18;
      v19 += v20;
      if (!--v14)
      {
        swift_bridgeObjectRelease();
        v13 = a3;
        v10 = a8;
        v11 = a7;
        break;
      }
    }
  }
  v21 = *(_QWORD *)(a6 + 16);
  if (v21)
  {
    v22 = *(_QWORD *)(type metadata accessor for SharingCircleSecret(0) - 8);
    v23 = a6 + ((*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80));
    v24 = *(_QWORD *)(v22 + 72);
    swift_bridgeObjectRetain(a6);
    while (1)
    {
      sub_100ADECF8(v23);
      if (v8)
        goto LABEL_18;
      v23 += v24;
      if (!--v21)
      {
        swift_bridgeObjectRelease();
        break;
      }
    }
  }
  v25 = *(_QWORD *)(v11 + 16);
  if (v25)
  {
    v26 = *(_QWORD *)(type metadata accessor for MemberPeerTrust(0) - 8);
    v27 = v11 + ((*(unsigned __int8 *)(v26 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80));
    v28 = *(_QWORD *)(v26 + 72);
    swift_bridgeObjectRetain(v11);
    while (1)
    {
      sub_100ADF3E4(v27);
      if (v8)
        break;
      v27 += v28;
      if (!--v25)
      {
        swift_bridgeObjectRelease();
        goto LABEL_16;
      }
    }
    swift_bridgeObjectRelease();
    swift_errorRelease(v8);
    v9 = 0;
    v29 = *(_QWORD *)(v10 + 16);
    if (v29)
    {
LABEL_21:
      v30 = *(_QWORD *)(type metadata accessor for OwnerPeerTrust(0) - 8);
      v31 = v10 + ((*(unsigned __int8 *)(v30 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80));
      v32 = *(_QWORD *)(v30 + 72);
      swift_bridgeObjectRetain(v10);
      while (1)
      {
        sub_100ADF07C(v31);
        if (v9)
          break;
        v31 += v32;
        if (!--v29)
        {
          swift_bridgeObjectRelease();
          goto LABEL_25;
        }
      }
      swift_bridgeObjectRelease();
      swift_errorRelease(v9);
      v9 = 0;
      v33 = *(_QWORD *)(a4 + 16);
      if (v33)
        goto LABEL_29;
      goto LABEL_26;
    }
  }
  else
  {
LABEL_16:
    v29 = *(_QWORD *)(v10 + 16);
    if (v29)
      goto LABEL_21;
  }
LABEL_25:
  v33 = *(_QWORD *)(a4 + 16);
  if (v33)
  {
LABEL_29:
    v35 = *(_QWORD *)(type metadata accessor for SharingCircleSecret(0) - 8);
    v36 = a4 + ((*(unsigned __int8 *)(v35 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v35 + 80));
    v37 = *(_QWORD *)(v35 + 72);
    swift_bridgeObjectRetain(a4);
    while (1)
    {
      sub_100ADC800(v36);
      if (v9)
        goto LABEL_18;
      v36 += v37;
      if (!--v33)
      {
        swift_bridgeObjectRelease();
        v34 = *(_QWORD *)(v13 + 16);
        if (!v34)
          return;
        goto LABEL_33;
      }
    }
  }
LABEL_26:
  v34 = *(_QWORD *)(v13 + 16);
  if (v34)
  {
LABEL_33:
    v38 = *(_QWORD *)(type metadata accessor for OwnerSharingCircle(0) - 8);
    v39 = v13 + ((*(unsigned __int8 *)(v38 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v38 + 80));
    v40 = *(_QWORD *)(v38 + 72);
    swift_bridgeObjectRetain(v13);
    do
    {
      sub_100ADC7E4(v39);
      if (v9)
        break;
      v39 += v40;
      --v34;
    }
    while (v34);
LABEL_18:
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_10006620C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3[4] = a2;
  v3[5] = a3;
  v3[3] = a1;
  v5 = type metadata accessor for UUID(0);
  v3[6] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v3[7] = v6;
  v7 = *(_QWORD *)(v6 + 64);
  v3[8] = v7;
  v3[9] = swift_task_alloc((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100066278, a3, 0);
}

uint64_t sub_100066278()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 40) + 112);
  *(_QWORD *)(v0 + 80) = v1;
  *(_DWORD *)(v0 + 112) = *(_DWORD *)(type metadata accessor for OwnerSharingCircle(0) + 20);
  return swift_task_switch(sub_1000662C8, v1, 0);
}

uint64_t sub_1000662C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  v2 = *(_QWORD *)(v0 + 72);
  v1 = *(_QWORD *)(v0 + 80);
  v4 = *(_QWORD *)(v0 + 56);
  v3 = *(_QWORD *)(v0 + 64);
  v5 = *(_QWORD *)(v0 + 48);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v4 + 16))(v2, *(_QWORD *)(v0 + 32) + *(int *)(v0 + 112), v5);
  v6 = *(unsigned __int8 *)(v4 + 80);
  v7 = (v6 + 24) & ~v6;
  v8 = swift_allocObject(&unk_101052CB8, v7 + v3, v6 | 7);
  *(_QWORD *)(v0 + 88) = v8;
  *(_QWORD *)(v8 + 16) = v1;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v8 + v7, v2, v5);
  v9 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v10 = (_QWORD *)swift_task_alloc(v9);
  *(_QWORD *)(v0 + 96) = v10;
  v11 = sub_10001A9A8(&qword_1010EC8C8);
  *v10 = v0;
  v10[1] = sub_1000663C4;
  return unsafeBlocking<A>(_:)(v0 + 16, sub_10006817C, v8, v11);
}

uint64_t sub_1000663C4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 80);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 96));
  swift_release();
  return swift_task_switch(sub_100066424, v1, 0);
}

uint64_t sub_100066424()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[5];
  v0[13] = v0[2];
  return swift_task_switch(sub_1000682F4, v1, 0);
}

void sub_100066440(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v10 = *(_QWORD *)(a3 + 16);
  if (v10)
  {
    v12 = *(_QWORD *)(type metadata accessor for OwnerSharingCircle(0) - 8);
    v13 = a3 + ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
    v14 = *(_QWORD *)(v12 + 72);
    swift_bridgeObjectRetain(a3);
    while (1)
    {
      sub_100ADF74C(v13);
      if (v6)
        break;
      v13 += v14;
      if (!--v10)
      {
        swift_bridgeObjectRelease();
        goto LABEL_6;
      }
    }
  }
  else
  {
LABEL_6:
    v15 = *(_QWORD *)(a4 + 16);
    if (v15)
    {
      v16 = *(_QWORD *)(type metadata accessor for SharingCircleSecret(0) - 8);
      v17 = a4 + ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80));
      v18 = *(_QWORD *)(v16 + 72);
      swift_bridgeObjectRetain(a4);
      while (1)
      {
        sub_100ADECF8(v17);
        if (v6)
          break;
        v17 += v18;
        if (!--v15)
        {
          swift_bridgeObjectRelease();
          goto LABEL_11;
        }
      }
    }
    else
    {
LABEL_11:
      v19 = *(_QWORD *)(a5 + 16);
      if (v19)
      {
        v20 = *(_QWORD *)(type metadata accessor for SharingCircleSecret(0) - 8);
        v21 = a5 + ((*(unsigned __int8 *)(v20 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80));
        v22 = *(_QWORD *)(v20 + 72);
        swift_bridgeObjectRetain(a5);
        while (1)
        {
          sub_100ADC800(v21);
          if (v6)
            break;
          v21 += v22;
          if (!--v19)
          {
            swift_bridgeObjectRelease();
            goto LABEL_16;
          }
        }
      }
      else
      {
LABEL_16:
        v23 = *(_QWORD *)(a6 + 16);
        if (!v23)
          return;
        v24 = *(_QWORD *)(type metadata accessor for OwnerSharingCircle(0) - 8);
        v25 = a6 + ((*(unsigned __int8 *)(v24 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80));
        v26 = *(_QWORD *)(v24 + 72);
        swift_bridgeObjectRetain(a6);
        do
        {
          sub_100ADC7E4(v25);
          if (v6)
            break;
          v25 += v26;
          --v23;
        }
        while (v23);
      }
    }
  }
  swift_bridgeObjectRelease();
}

uint64_t sub_100066618()
{
  return sub_100067FB4((uint64_t (*)(_QWORD, uint64_t))sub_100A82568);
}

unint64_t sub_100066624()
{
  unint64_t result;

  result = qword_1010EC850;
  if (!qword_1010EC850)
  {
    result = swift_getWitnessTable(&unk_100E22CC0, &type metadata for ShareAcceptUseCaseError);
    atomic_store(result, &qword_1010EC850);
  }
  return result;
}

uint64_t sub_100066668(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD v18[5];
  _QWORD v19[5];

  v6 = type metadata accessor for LocationFetcher(0);
  __chkstk_darwin(v6);
  v8 = (char *)v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19[3] = &_s13DefaultPolicyVN;
  v19[4] = sub_100067E14();
  v9 = swift_allocObject(&unk_101052C40, 97, 7);
  v19[0] = v9;
  v10 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v9 + 48) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v9 + 64) = v10;
  *(_OWORD *)(v9 + 80) = *(_OWORD *)(a2 + 64);
  *(_BYTE *)(v9 + 96) = *(_BYTE *)(a2 + 80);
  v11 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v9 + 16) = *(_OWORD *)a2;
  *(_OWORD *)(v9 + 32) = v11;
  v12 = *(_QWORD *)(a3 + 280);
  sub_100030784((uint64_t)v19, (uint64_t)v18);
  sub_100067E8C((_QWORD *)a2);
  v13 = qword_1010E9CF0;
  swift_retain();
  if (v13 != -1)
    swift_once(&qword_1010E9CF0, sub_10058CADC);
  v14 = qword_1011B7160;
  swift_retain();
  v15 = sub_1006B9080((uint64_t)_swiftEmptyArrayStorage);
  sub_1003F1570(v12, v18, v14, v15, v8);
  v16 = swift_allocObject(&unk_101052C68, 32, 7);
  *(_QWORD *)(v16 + 16) = a1;
  *(_QWORD *)(v16 + 24) = a3;
  swift_bridgeObjectRetain(a1);
  swift_retain();
  sub_1003F193C(a1, (uint64_t)sub_100067F00, v16);
  swift_release();
  sub_1000126B0((uint64_t)v8, type metadata accessor for LocationFetcher);
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v19);
}

_QWORD *sub_100066800(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *result;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, unint64_t, uint64_t);
  uint64_t v26;
  char v27;
  _QWORD *v28;
  unint64_t v29;
  unint64_t v30;
  _QWORD v31[2];
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;

  v5 = type metadata accessor for UUID(0);
  v40 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v7 = (char *)v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = type metadata accessor for OwnerSharingCircle(0);
  v8 = __chkstk_darwin(v34);
  v33 = (uint64_t)v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v39 = (uint64_t)v31 - v11;
  result = _swiftEmptyArrayStorage;
  v42 = _swiftEmptyArrayStorage;
  v36 = *(_QWORD *)(a1 + 16);
  if (v36)
  {
    v13 = 0;
    v14 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
    v37 = *(_QWORD *)(v10 + 72);
    v31[1] = v2;
    v32 = v14;
    v35 = a1 + v14;
    v41 = a2 + 7;
    v15 = a2;
    do
    {
      v38 = v13;
      sub_10005972C(v35 + v37 * v13, v39, type metadata accessor for OwnerSharingCircle);
      if (!v15[2])
        goto LABEL_3;
      v16 = v39 + *(int *)(v34 + 20);
      v17 = v15;
      v18 = v15[5];
      v19 = sub_100006204(&qword_1010F98B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v20 = dispatch thunk of Hashable._rawHashValue(seed:)(v18, v5, v19);
      v15 = v17;
      v21 = -1 << *((_BYTE *)v17 + 32);
      v22 = v20 & ~v21;
      if (((*(_QWORD *)((char *)v41 + ((v22 >> 3) & 0xFFFFFFFFFFFFF8)) >> v22) & 1) != 0)
      {
        v23 = ~v21;
        v24 = *(_QWORD *)(v40 + 72);
        v25 = *(void (**)(char *, unint64_t, uint64_t))(v40 + 16);
        while (1)
        {
          v25(v7, v15[6] + v24 * v22, v5);
          v26 = sub_100006204(&qword_1010EE520, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
          v27 = dispatch thunk of static Equatable.== infix(_:_:)(v7, v16, v5, v26);
          (*(void (**)(char *, uint64_t))(v40 + 8))(v7, v5);
          if ((v27 & 1) != 0)
            break;
          v22 = (v22 + 1) & v23;
          v15 = v17;
          if (((*(_QWORD *)((char *)v41 + ((v22 >> 3) & 0xFFFFFFFFFFFFF8)) >> v22) & 1) == 0)
            goto LABEL_3;
        }
        sub_1000126EC(v39, v33, type metadata accessor for OwnerSharingCircle);
        v28 = v42;
        if ((swift_isUniquelyReferenced_nonNull_native(v42) & 1) == 0)
        {
          sub_10009A520(0, v28[2] + 1, 1);
          v28 = v42;
        }
        v30 = v28[2];
        v29 = v28[3];
        if (v30 >= v29 >> 1)
        {
          sub_10009A520(v29 > 1, v30 + 1, 1);
          v28 = v42;
        }
        v28[2] = v30 + 1;
        sub_1000126EC(v33, (uint64_t)v28 + v32 + v30 * v37, type metadata accessor for OwnerSharingCircle);
        v15 = v17;
      }
      else
      {
LABEL_3:
        sub_1000126B0(v39, type metadata accessor for OwnerSharingCircle);
      }
      v13 = v38 + 1;
    }
    while (v38 + 1 != v36);
    return v42;
  }
  return result;
}

uint64_t sub_100066B38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;

  v4[7] = a3;
  v4[8] = v3;
  v4[5] = a1;
  v4[6] = a2;
  v5 = type metadata accessor for KeyDropJoinToken(0);
  v4[9] = v5;
  v4[10] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10001A9A8(&qword_10110F130);
  v4[11] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for SharingCircleSecretValue(0);
  v4[12] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v4[13] = v8;
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[14] = swift_task_alloc(v9);
  v4[15] = swift_task_alloc(v9);
  v4[16] = swift_task_alloc(v9);
  v10 = type metadata accessor for SharingCircleSecret(0);
  v4[17] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v4[18] = v11;
  v12 = (*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[19] = swift_task_alloc(v12);
  v4[20] = swift_task_alloc(v12);
  v4[21] = swift_task_alloc(v12);
  v4[22] = swift_task_alloc(v12);
  v13 = sub_10001A9A8(&qword_1010EC870);
  v4[23] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v13 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for OwnerSharingCircle(0);
  v4[24] = v14;
  v15 = *(_QWORD *)(v14 - 8);
  v4[25] = v15;
  v16 = (*(_QWORD *)(v15 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[26] = swift_task_alloc(v16);
  v4[27] = swift_task_alloc(v16);
  v17 = type metadata accessor for UUID(0);
  v4[28] = v17;
  v18 = *(_QWORD *)(v17 - 8);
  v4[29] = v18;
  v19 = (*(_QWORD *)(v18 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[30] = swift_task_alloc(v19);
  v4[31] = swift_task_alloc(v19);
  v4[32] = swift_task_alloc(v19);
  return swift_task_switch(sub_100066CF0, v3, 0);
}

uint64_t sub_100066CF0()
{
  _QWORD *v0;
  uint64_t v1;
  int64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  _QWORD *v19;

  v1 = v0[5];
  v2 = *(_QWORD *)(v1 + 16);
  v3 = _swiftEmptyArrayStorage;
  if (v2)
  {
    v4 = v0[29];
    v5 = v0[25];
    v18 = v0[24];
    v19 = _swiftEmptyArrayStorage;
    sub_10009A578(0, v2, 0);
    v6 = v1 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    v7 = *(_QWORD *)(v5 + 72);
    v3 = _swiftEmptyArrayStorage;
    do
    {
      v8 = v0[32];
      v10 = v0[27];
      v9 = v0[28];
      sub_10005972C(v6, v10, type metadata accessor for OwnerSharingCircle);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v8, v10 + *(int *)(v18 + 20), v9);
      sub_1000126B0(v10, type metadata accessor for OwnerSharingCircle);
      if ((swift_isUniquelyReferenced_nonNull_native(v3) & 1) == 0)
      {
        sub_10009A578(0, v3[2] + 1, 1);
        v3 = v19;
      }
      v12 = v3[2];
      v11 = v3[3];
      if (v12 >= v11 >> 1)
      {
        sub_10009A578(v11 > 1, v12 + 1, 1);
        v3 = v19;
      }
      v13 = v0[32];
      v14 = v0[28];
      v3[2] = v12 + 1;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v4 + 32))((unint64_t)v3+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(_QWORD *)(v4 + 72) * v12, v13, v14);
      v19 = v3;
      v6 += v7;
      --v2;
    }
    while (v2);
  }
  v15 = v0[8];
  v0[33] = sub_10001B664((uint64_t)v3);
  swift_bridgeObjectRelease();
  v16 = *(_QWORD *)(v15 + 112);
  v0[34] = v16;
  return swift_task_switch(sub_100066E8C, v16, 0);
}

uint64_t sub_100066E8C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v2 = (_QWORD *)swift_task_alloc(v1);
  *(_QWORD *)(v0 + 280) = v2;
  v3 = sub_10001A9A8(&qword_1010EE100);
  *v2 = v0;
  v2[1] = sub_100066F08;
  return unsafeBlocking<A>(_:)(v0 + 32, sub_100068004, *(_QWORD *)(v0 + 272), v3);
}

uint64_t sub_100066F08()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 272);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 280));
  swift_release();
  return swift_task_switch(sub_100066F64, v1, 0);
}

uint64_t sub_100066F64()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[8];
  v0[36] = v0[4];
  return swift_task_switch(sub_100066F80, v1, 0);
}

uint64_t sub_100066F80()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v1 = sub_100066800(*(_QWORD *)(v0 + 288), *(_QWORD **)(v0 + 264));
  *(_QWORD *)(v0 + 296) = v1;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v2 = (_QWORD *)swift_task_alloc(async function pointer to Array.asyncFlatMap<A>(_:)[1]);
  *(_QWORD *)(v0 + 304) = v2;
  v3 = sub_10001A9A8(&qword_1010EC8C8);
  v4 = sub_1000193E4(&qword_1010EC8D0, &qword_1010EC8C8);
  *v2 = v0;
  v2[1] = sub_10006704C;
  return Array.asyncFlatMap<A>(_:)(&unk_1010EC900, *(_QWORD *)(v0 + 64), v1, *(_QWORD *)(v0 + 192), v3, v4);
}

uint64_t sub_10006704C(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 304);
  v5 = *(_QWORD *)(*v2 + 64);
  *(_QWORD *)(v3 + 312) = a1;
  *(_QWORD *)(v3 + 320) = v1;
  swift_task_dealloc(v4);
  return swift_task_switch(sub_1000670AC, v5, 0);
}

uint64_t sub_1000670AC()
{
  uint64_t v0;
  uint64_t v1;
  int64_t v2;
  uint64_t v3;
  int *v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t);
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t (*v10)(uint64_t);
  void (*v11)(char *, uint64_t, uint64_t);
  char v12;
  uint64_t v13;
  char v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t *v41;
  int *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int *v80;
  uint64_t v81;

  v1 = *(_QWORD *)(v0 + 48);
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v3 = *(_QWORD *)(v0 + 200);
    v76 = *(_QWORD *)(v0 + 208);
    v79 = *(_QWORD *)(v0 + 232);
    v4 = *(int **)(v0 + 192);
    sub_10009A520(0, v2, 0);
    v74 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
    v5 = v1 + v74;
    v72 = *(_QWORD *)(v3 + 72);
    v6 = type metadata accessor for OwnerSharingCircle;
    do
    {
      v8 = *(_QWORD *)(v0 + 216);
      v7 = *(_QWORD *)(v0 + 224);
      v9 = *(char **)(v0 + 208);
      sub_10005972C(v5, v8, v6);
      v10 = v6;
      v11 = *(void (**)(char *, uint64_t, uint64_t))(v79 + 16);
      v11(&v9[v4[5]], v8 + v4[5], v7);
      v11(&v9[v4[6]], v8 + v4[6], v7);
      v6 = v10;
      v12 = *(_BYTE *)(v8 + v4[7]);
      v13 = *(_QWORD *)(v8 + v4[8]);
      v14 = *(_BYTE *)(v8 + v4[9]);
      *(_QWORD *)v9 = 0;
      *(_QWORD *)(v76 + 8) = 0xC000000000000000;
      v9[v4[7]] = v12;
      *(_QWORD *)&v9[v4[8]] = v13;
      v9[v4[9]] = v14;
      swift_bridgeObjectRetain(v13);
      sub_1000126B0(v8, v10);
      if ((swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage) & 1) == 0)
        sub_10009A520(0, _swiftEmptyArrayStorage[2] + 1, 1);
      v16 = _swiftEmptyArrayStorage[2];
      v15 = _swiftEmptyArrayStorage[3];
      if (v16 >= v15 >> 1)
        sub_10009A520(v15 > 1, v16 + 1, 1);
      v17 = *(_QWORD *)(v0 + 208);
      _swiftEmptyArrayStorage[2] = v16 + 1;
      sub_1000126EC(v17, (uint64_t)_swiftEmptyArrayStorage + v74 + v16 * v72, v10);
      v5 += v72;
      --v2;
    }
    while (v2);
  }
  v18 = *(_QWORD *)(v0 + 56);
  v19 = *(_QWORD *)(v18 + 16);
  if (v19)
  {
    v77 = *(_QWORD *)(v0 + 232);
    v20 = *(_QWORD *)(v0 + 144);
    v70 = *(_QWORD *)(v0 + 152);
    v80 = *(int **)(v0 + 136);
    v67 = *(_QWORD *)(v0 + 128);
    v68 = *(_QWORD *)(v0 + 104);
    sub_10009A6F4(0, v19, 0);
    v21 = v18 + ((*(unsigned __int8 *)(v20 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80));
    v22 = *(_QWORD *)(v0 + 320);
    v24 = *(_QWORD *)(v0 + 240);
    v23 = *(_QWORD *)(v0 + 248);
    v25 = *(_QWORD *)(v0 + 224);
    v26 = *(_QWORD *)(v0 + 168);
    sub_10005972C(v21, v26, type metadata accessor for SharingCircleSecret);
    v27 = *(void (**)(uint64_t, uint64_t, uint64_t))(v77 + 16);
    v27(v23, v26 + v80[5], v25);
    v27(v24, v26 + v80[6], v25);
    v28 = v80[7];
    v29 = (uint64_t *)(v26 + v80[8]);
    v30 = *v29;
    v31 = v29[1];
    v32 = *(_QWORD *)(v26 + v28);
    v33 = *(void **)(v26 + v28 + 8);
    sub_10001BBBC(*v29, v31);
    swift_bridgeObjectRetain(v33);
    sub_100DFE068(v30, v31, v32, v33);
    if (v22)
    {
      swift_errorRelease(v22);
      v34 = 1;
    }
    else
    {
      v34 = 0;
    }
    v36 = *(_QWORD *)(v0 + 160);
    v35 = *(_QWORD *)(v0 + 168);
    v38 = *(_QWORD *)(v0 + 88);
    v37 = *(_QWORD *)(v0 + 96);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v68 + 56))(v38, v34, 1, v37);
    sub_10005972C(v35, v36, type metadata accessor for SharingCircleSecret);
    v39 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v68 + 48))(v38, 1, v37);
    v40 = *(_QWORD *)(v0 + 160);
    v41 = *(uint64_t **)(v0 + 128);
    v42 = v80;
    if (v39 == 1)
    {
      v44 = *(_QWORD *)(v0 + 88);
      v43 = *(_QWORD *)(v0 + 96);
      v45 = (uint64_t *)(v40 + v80[8]);
      v46 = *v45;
      v47 = v45[1];
      sub_10001BBBC(*v45, v47);
      sub_1000126B0(v40, type metadata accessor for SharingCircleSecret);
      *v41 = v46;
      *(_QWORD *)(v67 + 8) = v47;
      v42 = v80;
      swift_storeEnumTagMultiPayload(v41, v43, 0);
      sub_100004048(v44, &qword_10110F130);
    }
    else
    {
      v48 = *(_QWORD *)(v0 + 88);
      sub_1000126B0(*(_QWORD *)(v0 + 160), type metadata accessor for SharingCircleSecret);
      sub_1000126EC(v48, (uint64_t)v41, type metadata accessor for SharingCircleSecretValue);
    }
    v50 = *(_QWORD *)(v0 + 240);
    v49 = *(_QWORD *)(v0 + 248);
    v51 = *(_QWORD *)(v0 + 224);
    v52 = *(_QWORD **)(v0 + 152);
    v54 = *(_QWORD *)(v0 + 120);
    v53 = *(_QWORD *)(v0 + 128);
    v55 = *(_QWORD *)(v0 + 96);
    *v52 = 0;
    *(_QWORD *)(v70 + 8) = 0xC000000000000000;
    v27((uint64_t)v52 + v42[5], v49, v51);
    v27((uint64_t)v52 + v42[6], v50, v51);
    sub_10005972C(v53, v54, type metadata accessor for SharingCircleSecretValue);
    v56 = (char *)&loc_100067530 + 4 * byte_100E22B60[swift_getEnumCaseMultiPayload(v54, v55)];
    __asm { BR              X9 }
  }
  v57 = *(_QWORD *)(v0 + 320);
  sub_100ADA4D8(*(_QWORD *)(v0 + 296), *(_QWORD *)(v0 + 312), (uint64_t)_swiftEmptyArrayStorage, (uint64_t)_swiftEmptyArrayStorage, *(_QWORD *)(v0 + 184));
  if (!v57)
    return swift_task_switch(sub_1000679E0, *(_QWORD *)(v0 + 272), 0);
  v58 = *(_QWORD *)(v0 + 248);
  v59 = *(_QWORD *)(v0 + 240);
  v61 = *(_QWORD *)(v0 + 208);
  v60 = *(_QWORD *)(v0 + 216);
  v63 = *(_QWORD *)(v0 + 176);
  v62 = *(_QWORD *)(v0 + 184);
  v65 = *(_QWORD *)(v0 + 160);
  v64 = *(_QWORD *)(v0 + 168);
  v69 = *(_QWORD *)(v0 + 152);
  v71 = *(_QWORD *)(v0 + 128);
  v73 = *(_QWORD *)(v0 + 120);
  v75 = *(_QWORD *)(v0 + 112);
  v78 = *(_QWORD *)(v0 + 88);
  v81 = *(_QWORD *)(v0 + 80);
  swift_task_dealloc(*(_QWORD *)(v0 + 256));
  swift_task_dealloc(v58);
  swift_task_dealloc(v59);
  swift_task_dealloc(v60);
  swift_task_dealloc(v61);
  swift_task_dealloc(v62);
  swift_task_dealloc(v63);
  swift_task_dealloc(v64);
  swift_task_dealloc(v65);
  swift_task_dealloc(v69);
  swift_task_dealloc(v71);
  swift_task_dealloc(v73);
  swift_task_dealloc(v75);
  swift_task_dealloc(v78);
  swift_task_dealloc(v81);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000679E0()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 328) = *(_QWORD *)(*(_QWORD *)(v0 + 272) + 128);
  return swift_task_switch(sub_100067A00, 0, 0);
}

uint64_t sub_100067A00()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = v0[41];
  v2 = v0[23];
  v3 = swift_task_alloc(32);
  v0[42] = v3;
  *(_QWORD *)(v3 + 16) = v1;
  *(_QWORD *)(v3 + 24) = v2;
  v4 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  v0[43] = v4;
  *v4 = v0;
  v4[1] = sub_100067AA4;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v4, 0, 0, 0xD000000000000011, 0x8000000100EC6890, sub_1000682F8, v3, &type metadata for () + 1);
}

uint64_t sub_100067AA4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 344);
  *(_QWORD *)(*v1 + 352) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_100067C30;
  }
  else
  {
    swift_task_dealloc(*(_QWORD *)(v2 + 336));
    v4 = sub_100067B10;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_100067B10()
{
  uint64_t v0;

  return swift_task_switch(sub_100067B24, *(_QWORD *)(v0 + 64), 0);
}

uint64_t sub_100067B24()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *(_QWORD *)(v0 + 248);
  v1 = *(_QWORD *)(v0 + 256);
  v3 = *(_QWORD *)(v0 + 240);
  v5 = *(_QWORD *)(v0 + 208);
  v4 = *(_QWORD *)(v0 + 216);
  v7 = *(_QWORD *)(v0 + 176);
  v6 = *(_QWORD *)(v0 + 184);
  v8 = *(_QWORD *)(v0 + 160);
  v9 = *(_QWORD *)(v0 + 168);
  v11 = *(_QWORD *)(v0 + 152);
  v12 = *(_QWORD *)(v0 + 128);
  v13 = *(_QWORD *)(v0 + 120);
  v14 = *(_QWORD *)(v0 + 112);
  v15 = *(_QWORD *)(v0 + 88);
  v16 = *(_QWORD *)(v0 + 80);
  sub_100004048(v6, &qword_1010EC870);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v9);
  swift_task_dealloc(v8);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100067C30()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 64);
  swift_task_dealloc(*(_QWORD *)(v0 + 336));
  return swift_task_switch(sub_100067C70, v1, 0);
}

uint64_t sub_100067C70()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  sub_100004048(*(_QWORD *)(v0 + 184), &qword_1010EC870);
  v1 = *(_QWORD *)(v0 + 248);
  v2 = *(_QWORD *)(v0 + 240);
  v4 = *(_QWORD *)(v0 + 208);
  v3 = *(_QWORD *)(v0 + 216);
  v6 = *(_QWORD *)(v0 + 176);
  v5 = *(_QWORD *)(v0 + 184);
  v8 = *(_QWORD *)(v0 + 160);
  v7 = *(_QWORD *)(v0 + 168);
  v9 = *(_QWORD *)(v0 + 152);
  v11 = *(_QWORD *)(v0 + 128);
  v12 = *(_QWORD *)(v0 + 120);
  v13 = *(_QWORD *)(v0 + 112);
  v14 = *(_QWORD *)(v0 + 88);
  v15 = *(_QWORD *)(v0 + 80);
  swift_task_dealloc(*(_QWORD *)(v0 + 256));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_100067D7C()
{
  uint64_t v0;

  sub_100ADCB3C(*(_QWORD *)(v0 + 16));
}

unint64_t sub_100067D98()
{
  unint64_t result;

  result = qword_1010EC880;
  if (!qword_1010EC880)
  {
    result = swift_getWitnessTable(&unk_100E2F2F0, &type metadata for BeaconSharingFlowError);
    atomic_store(result, (unint64_t *)&qword_1010EC880);
  }
  return result;
}

uint64_t sub_100067DDC(uint64_t a1)
{
  uint64_t v1;

  return sub_1008044C0(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_100067DE8()
{
  return sub_100067FB4((uint64_t (*)(_QWORD, uint64_t))sub_100A81518);
}

uint64_t sub_100067DF8()
{
  return sub_100067FB4((uint64_t (*)(_QWORD, uint64_t))sub_100A828F4);
}

uint64_t sub_100067E08()
{
  return sub_100067FB4((uint64_t (*)(_QWORD, uint64_t))sub_100A80D30);
}

unint64_t sub_100067E14()
{
  unint64_t result;

  result = qword_1010EC898;
  if (!qword_1010EC898)
  {
    result = swift_getWitnessTable(&unk_100E46FD8, &_s13DefaultPolicyVN);
    atomic_store(result, &qword_1010EC898);
  }
  return result;
}

uint64_t sub_100067E58()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[4]);
  swift_bridgeObjectRelease(v0[7]);
  swift_bridgeObjectRelease(v0[8]);
  return swift_deallocObject(v0, 97, 7);
}

_QWORD *sub_100067E8C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1[2];
  v3 = a1[6];
  swift_bridgeObjectRetain(a1[5]);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v2);
  return a1;
}

uint64_t sub_100067ED4()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100067F00()
{
  uint64_t v0;

  return sub_10032239C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_100067F08(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;

  v4 = (_QWORD *)swift_task_alloc(dword_1010EC8A4);
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_100067F58;
  return sub_1000646A0(a1, v1);
}

uint64_t sub_100067F58(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v4;

  v4 = *v1;
  swift_task_dealloc(*(_QWORD *)(*v1 + 16));
  return (*(uint64_t (**)(uint64_t))(v4 + 8))(a1);
}

uint64_t sub_100067FA8@<X0>(uint64_t *a1@<X8>)
{
  return sub_100A805C0(a1);
}

uint64_t sub_100067FB4(uint64_t (*a1)(_QWORD, uint64_t))
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for UUID(0) - 8) + 80);
  return a1(*(_QWORD *)(v1 + 16), v1 + ((v2 + 24) & ~v2));
}

uint64_t sub_100068004@<X0>(size_t *a1@<X8>)
{
  uint64_t v1;

  return sub_100A80DA8(v1, a1);
}

uint64_t sub_10006800C(uint64_t a1)
{
  uint64_t v1;

  return sub_100064984(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24)) & 1;
}

uint64_t sub_100068028(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;

  v6 = (_QWORD *)swift_task_alloc(dword_1010EC8BC);
  *(_QWORD *)(v3 + 16) = v6;
  *v6 = v3;
  v6[1] = sub_100004C28;
  return sub_100064AEC(a1, a2, v2);
}

unint64_t sub_10006808C()
{
  unint64_t result;

  result = qword_1010EC8E8;
  if (!qword_1010EC8E8)
  {
    result = swift_getWitnessTable(&unk_100E26B44, &type metadata for BeaconServiceError);
    atomic_store(result, (unint64_t *)&qword_1010EC8E8);
  }
  return result;
}

uint64_t sub_1000680D0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;

  v6 = (_QWORD *)swift_task_alloc(dword_1010EC8FC);
  *(_QWORD *)(v3 + 16) = v6;
  *v6 = v3;
  v6[1] = sub_100004A74;
  return sub_10006620C(a1, a2, v2);
}

unint64_t sub_100068134()
{
  unint64_t result;

  result = qword_10111C9D0;
  if (!qword_10111C9D0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for PrivateKey, &type metadata for PrivateKey);
    atomic_store(result, (unint64_t *)&qword_10111C9D0);
  }
  return result;
}

uint64_t sub_100068180(uint64_t a1)
{
  uint64_t v1;

  return sub_100819068(a1, v1);
}

uint64_t sub_100068188@<X0>(uint64_t *a1@<X8>)
{
  return sub_100A80D58(a1);
}

uint64_t sub_100068190@<X0>(uint64_t *a1@<X8>)
{
  return sub_100A80D80(a1);
}

uint64_t sub_10006819C@<X0>(size_t *a1@<X8>)
{
  uint64_t v1;

  type metadata accessor for UUID(0);
  return sub_100A81CDC(*(_QWORD *)(v1 + 16), a1);
}

uint64_t storeEnumTagSinglePayload for ShareAcceptUseCaseError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_100068228 + 4 * byte_100E22B6F[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10006825C + 4 * byte_100E22B6A[v4]))();
}

uint64_t sub_10006825C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100068264(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10006826CLL);
  return result;
}

uint64_t sub_100068278(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100068280);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_100068284(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10006828C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ShareAcceptUseCaseError()
{
  return &type metadata for ShareAcceptUseCaseError;
}

unint64_t sub_1000682AC()
{
  unint64_t result;

  result = qword_1010EC920;
  if (!qword_1010EC920)
  {
    result = swift_getWitnessTable(&unk_100E22C98, &type metadata for ShareAcceptUseCaseError);
    atomic_store(result, (unint64_t *)&qword_1010EC920);
  }
  return result;
}

_QWORD *sub_1000682FC(uint64_t a1)
{
  int64_t v2;
  _QWORD *result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;

  v2 = *(_QWORD *)(a1 + 16);
  result = _swiftEmptyArrayStorage;
  if (v2)
  {
    sub_10009A32C(0, v2, 0);
    result = _swiftEmptyArrayStorage;
    v4 = (uint64_t *)(a1 + 32);
    do
    {
      v6 = *v4;
      v4 += 9;
      v5 = v6;
      v9 = result;
      v8 = result[2];
      v7 = result[3];
      if (v8 >= v7 >> 1)
      {
        sub_10009A32C(v7 > 1, v8 + 1, 1);
        result = v9;
      }
      result[2] = v8 + 1;
      result[v8 + 4] = v5;
      --v2;
    }
    while (v2);
  }
  return result;
}

uint64_t sub_1000683B8()
{
  return 1;
}

Swift::Int sub_1000683C0()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

void sub_100068400()
{
  Hasher._combine(_:)(0);
}

Swift::Int sub_100068424()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

uint64_t sub_100068460()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  _QWORD *v3;
  uint64_t (__cdecl *v4)();

  *(_QWORD *)(v1 + 120) = v0;
  swift_defaultActor_initialize(v0);
  if (qword_1010EA5B0 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v1 + 96, 0, 0);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v1 + 56, &qword_1010EE220);
  if (*(_QWORD *)(v1 + 80))
  {
    sub_10000F9FC((__int128 *)(v1 + 56), v1 + 16);
    sub_10001AA44((_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 40));
    v4 = (uint64_t (__cdecl *)())((char *)&dword_1010EBB40 + dword_1010EBB40);
    v3 = (_QWORD *)swift_task_alloc(unk_1010EBB44);
    *(_QWORD *)(v1 + 128) = v3;
    *v3 = v1;
    v3[1] = sub_100068558;
    return v4();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100068558(uint64_t a1)
{
  uint64_t *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = (_QWORD *)(*v1 + 16);
  v4 = *(_QWORD *)(*v1 + 128);
  v5 = *v1;
  *(_QWORD *)(v5 + 136) = a1;
  swift_task_dealloc(v4);
  v6 = *(_QWORD *)(v5 + 120);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v3);
  if (a1)
  {
    *(_QWORD *)(v6 + 112) = a1;
    v7 = type metadata accessor for SharingCircleKeyManager();
    v8 = swift_allocObject(v7, 128, 15);
    swift_retain_n(a1, 2);
    swift_defaultActor_initialize(v8);
    v9 = type metadata accessor for KeyDropInterface();
    v10 = swift_allocObject(v9, 128, 15);
    swift_defaultActor_initialize(v10);
    *(_QWORD *)(v10 + 112) = 0;
    *(_QWORD *)(v10 + 120) = 0;
    *(_QWORD *)(v8 + 112) = v10;
    *(_QWORD *)(v8 + 120) = a1;
    *(_QWORD *)(v6 + 120) = v8;
    return swift_task_switch(sub_10006869C, v6, 0);
  }
  else
  {
    v12 = sub_10007AC20();
    v13 = swift_allocError(&type metadata for DataIntegrityError, v12, 0, 0);
    swift_willThrow(v13);
    v14 = type metadata accessor for CheckDataIntegrityUseCase();
    swift_defaultActor_destroy(v6);
    swift_deallocPartialClassInstance(v6, v14, 128, 15);
    return (*(uint64_t (**)(void))(v5 + 8))();
  }
}

uint64_t sub_10006869C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 136));
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 120));
}

uint64_t sub_1000686D4()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;

  v1[21] = v0;
  v2 = type metadata accessor for SharingCircleSecret(0);
  v1[22] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[23] = v3;
  v4 = (*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[24] = swift_task_alloc(v4);
  v1[25] = swift_task_alloc(v4);
  v1[26] = swift_task_alloc(v4);
  v1[27] = swift_task_alloc(v4);
  v1[28] = swift_task_alloc(v4);
  v5 = sub_10001A9A8(&qword_1010EC870);
  v1[29] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10001A9A8(&qword_1010EE0E0);
  v1[30] = v6;
  v1[31] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10001A9A8((uint64_t *)&unk_101111440);
  v1[32] = v7;
  v1[33] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A9A8(&qword_1010ED860);
  v1[34] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for UUID(0);
  v1[35] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v1[36] = v10;
  v11 = *(_QWORD *)(v10 + 64);
  v1[37] = v11;
  v12 = (v11 + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[38] = swift_task_alloc(v12);
  v1[39] = swift_task_alloc(v12);
  v1[40] = swift_task_alloc(v12);
  v1[41] = swift_task_alloc(v12);
  v1[42] = swift_task_alloc(v12);
  v13 = type metadata accessor for URL(0);
  v1[43] = v13;
  v14 = *(_QWORD *)(v13 - 8);
  v1[44] = v14;
  v1[45] = swift_task_alloc((*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_10001A9A8(&qword_1010FBA40);
  v1[46] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v15 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for DirectorySequence(0);
  v1[47] = v16;
  v17 = *(_QWORD *)(v16 - 8);
  v1[48] = v17;
  v18 = (*(_QWORD *)(v17 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[49] = swift_task_alloc(v18);
  v1[50] = swift_task_alloc(v18);
  return swift_task_switch(sub_1000688E4, v0, 0);
}

uint64_t sub_1000688E4()
{
  uint64_t v0;
  void *v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int (*v21)(uint64_t, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  void (*v26)(uint64_t, _QWORD);
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(uint64_t, uint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v1 = (void *)objc_opt_self(NSFileManager);
  *(_QWORD *)(v0 + 408) = v1;
  v2 = objc_msgSend(v1, "defaultManager");
  if (qword_1010EA0F0 != -1)
    swift_once(&qword_1010EA0F0, sub_1009AC81C);
  v4 = *(_QWORD *)(v0 + 392);
  v3 = *(_QWORD *)(v0 + 400);
  v5 = *(_QWORD *)(v0 + 376);
  v6 = *(_QWORD *)(v0 + 384);
  v7 = *(_QWORD *)(v0 + 368);
  v8 = *(_QWORD *)(v0 + 344);
  v9 = *(_QWORD *)(v0 + 352);
  v10 = sub_10001A9E8(v8, (uint64_t)qword_1011B7AC8);
  *(_QWORD *)(v0 + 416) = v10;
  NSFileManager.flatSequence(at:includingPropertiesForKeys:)(v10, 0);

  v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v4, v3, v5);
  DirectorySequence.next()(v11);
  v12 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  *(_QWORD *)(v0 + 424) = v12;
  if (v12(v7, 1, v8) == 1)
  {
LABEL_7:
    v24 = *(void **)(v0 + 408);
    v25 = *(_QWORD *)(v0 + 416);
    v26 = *(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 384) + 8);
    v26(*(_QWORD *)(v0 + 392), *(_QWORD *)(v0 + 376));
    v27 = objc_msgSend(v24, "defaultManager");
    NSFileManager.removeEmptyDirectoriesRecursively(baseURL:)(v25);

    v29 = *(_QWORD *)(v0 + 392);
    v28 = *(_QWORD *)(v0 + 400);
    v30 = *(_QWORD *)(v0 + 368);
    v31 = *(_QWORD *)(v0 + 360);
    v33 = *(_QWORD *)(v0 + 328);
    v32 = *(_QWORD *)(v0 + 336);
    v35 = *(_QWORD *)(v0 + 312);
    v34 = *(_QWORD *)(v0 + 320);
    v43 = *(_QWORD *)(v0 + 304);
    v44 = *(_QWORD *)(v0 + 272);
    v45 = *(_QWORD *)(v0 + 264);
    v46 = *(_QWORD *)(v0 + 248);
    v47 = *(_QWORD *)(v0 + 232);
    v48 = *(_QWORD *)(v0 + 224);
    v49 = *(_QWORD *)(v0 + 216);
    v50 = *(_QWORD *)(v0 + 208);
    v51 = *(_QWORD *)(v0 + 200);
    v52 = *(_QWORD *)(v0 + 192);
    v26(v28, *(_QWORD *)(v0 + 376));
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    swift_task_dealloc(v43);
    swift_task_dealloc(v44);
    swift_task_dealloc(v45);
    swift_task_dealloc(v46);
    swift_task_dealloc(v47);
    swift_task_dealloc(v48);
    swift_task_dealloc(v49);
    swift_task_dealloc(v50);
    swift_task_dealloc(v51);
    swift_task_dealloc(v52);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    *(_QWORD *)(v0 + 432) = *(_QWORD *)(*(_QWORD *)(v0 + 352) + 32);
    while (1)
    {
      *(_QWORD *)(v0 + 440) = 0;
      v13 = *(_QWORD *)(v0 + 280);
      v14 = *(_QWORD *)(v0 + 288);
      v15 = *(_QWORD *)(v0 + 272);
      v16 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v0 + 432))(*(_QWORD *)(v0 + 360), *(_QWORD *)(v0 + 368), *(_QWORD *)(v0 + 344));
      v17 = URL.lastPathComponent.getter(v16);
      UUID.init(uuidString:)(v17, v18);
      swift_bridgeObjectRelease();
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v15, 1, v13) != 1)
        break;
      v19 = *(_QWORD *)(v0 + 272);
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 352) + 8))(*(_QWORD *)(v0 + 360), *(_QWORD *)(v0 + 344));
      v20 = sub_100004048(v19, &qword_1010ED860);
      v21 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 424);
      v22 = *(_QWORD *)(v0 + 368);
      v23 = *(_QWORD *)(v0 + 344);
      DirectorySequence.next()(v20);
      if (v21(v22, 1, v23) == 1)
        goto LABEL_7;
    }
    v37 = *(_QWORD *)(v0 + 336);
    v38 = *(_QWORD *)(v0 + 280);
    v39 = *(_QWORD *)(v0 + 272);
    v40 = *(_QWORD *)(v0 + 168);
    v41 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 288) + 32);
    *(_QWORD *)(v0 + 448) = v41;
    v41(v37, v39, v38);
    v42 = *(_QWORD *)(v40 + 112);
    *(_QWORD *)(v0 + 456) = v42;
    return swift_task_switch(sub_100068C2C, v42, 0);
  }
}

uint64_t sub_100068C2C()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v2 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 448);
  v1 = *(_QWORD *)(v0 + 456);
  v4 = *(_QWORD *)(v0 + 328);
  v3 = *(_QWORD *)(v0 + 336);
  v6 = *(_QWORD *)(v0 + 288);
  v5 = *(_QWORD *)(v0 + 296);
  v7 = *(_QWORD *)(v0 + 280);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  *(_QWORD *)(v0 + 464) = v8;
  v8(v4, v3, v7);
  LODWORD(v9) = *(_DWORD *)(v6 + 80);
  *(_DWORD *)(v0 + 640) = v9;
  v9 = v9;
  v10 = (v9 + 24) & ~v9;
  v11 = swift_allocObject(&unk_101052FF8, v10 + v5, v9 | 7);
  *(_QWORD *)(v0 + 472) = v11;
  *(_QWORD *)(v11 + 16) = v1;
  v2(v11 + v10, v4, v7);
  v12 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v13 = (_QWORD *)swift_task_alloc(v12);
  *(_QWORD *)(v0 + 480) = v13;
  *v13 = v0;
  v13[1] = sub_100068D0C;
  return unsafeBlocking<A>(_:)(*(_QWORD *)(v0 + 264), sub_10007CC24, v11, *(_QWORD *)(v0 + 256));
}

uint64_t sub_100068D0C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 168);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 480));
  swift_release();
  return swift_task_switch(sub_100068D6C, v1, 0);
}

uint64_t sub_100068D6C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int (*v23)(uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  void (*v28)(uint64_t, _QWORD);
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(uint64_t, uint64_t, uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v1 = *(_QWORD *)(v0 + 264);
  v2 = type metadata accessor for MemberSharingCircle(0);
  v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(v1, 1, v2);
  sub_100004048(v1, (uint64_t *)&unk_101111440);
  if (v3 == 1)
  {
    v4 = *(_QWORD *)(v0 + 456);
    v5 = sub_10006908C;
    return swift_task_switch(v5, v4, 0);
  }
  v6 = *(_QWORD *)(v0 + 336);
  v7 = *(_QWORD *)(v0 + 280);
  v8 = *(_QWORD *)(v0 + 288);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 352) + 8))(*(_QWORD *)(v0 + 360), *(_QWORD *)(v0 + 344));
  v9 = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  v10 = *(_QWORD *)(v0 + 440);
  v11 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 424);
  v12 = *(_QWORD *)(v0 + 368);
  v13 = *(_QWORD *)(v0 + 344);
  DirectorySequence.next()(v9);
  if (v11(v12, 1, v13) != 1)
  {
    while (1)
    {
      *(_QWORD *)(v0 + 440) = v10;
      v14 = *(_QWORD *)(v0 + 280);
      v15 = *(_QWORD *)(v0 + 288);
      v16 = *(_QWORD *)(v0 + 272);
      v17 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v0 + 432))(*(_QWORD *)(v0 + 360), *(_QWORD *)(v0 + 368), *(_QWORD *)(v0 + 344));
      v18 = URL.lastPathComponent.getter(v17);
      UUID.init(uuidString:)(v18, v19);
      swift_bridgeObjectRelease();
      v20 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v16, 1, v14);
      v21 = *(_QWORD *)(v0 + 272);
      if (v20 != 1)
        break;
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 352) + 8))(*(_QWORD *)(v0 + 360), *(_QWORD *)(v0 + 344));
      v22 = sub_100004048(v21, &qword_1010ED860);
      v23 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 424);
      v24 = *(_QWORD *)(v0 + 368);
      v25 = *(_QWORD *)(v0 + 344);
      DirectorySequence.next()(v22);
      if (v23(v24, 1, v25) == 1)
        goto LABEL_6;
    }
    v39 = *(_QWORD *)(v0 + 336);
    v40 = *(_QWORD *)(v0 + 280);
    v41 = *(_QWORD *)(v0 + 168);
    v42 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 288) + 32);
    *(_QWORD *)(v0 + 448) = v42;
    v42(v39, v21, v40);
    v4 = *(_QWORD *)(v41 + 112);
    *(_QWORD *)(v0 + 456) = v4;
    v5 = sub_100068C2C;
    return swift_task_switch(v5, v4, 0);
  }
LABEL_6:
  v26 = *(void **)(v0 + 408);
  v27 = *(_QWORD *)(v0 + 416);
  v28 = *(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 384) + 8);
  v28(*(_QWORD *)(v0 + 392), *(_QWORD *)(v0 + 376));
  v29 = objc_msgSend(v26, "defaultManager");
  NSFileManager.removeEmptyDirectoriesRecursively(baseURL:)(v27);

  if (v10)
    swift_errorRelease(v10);
  v31 = *(_QWORD *)(v0 + 392);
  v30 = *(_QWORD *)(v0 + 400);
  v32 = *(_QWORD *)(v0 + 368);
  v33 = *(_QWORD *)(v0 + 360);
  v35 = *(_QWORD *)(v0 + 328);
  v34 = *(_QWORD *)(v0 + 336);
  v37 = *(_QWORD *)(v0 + 312);
  v36 = *(_QWORD *)(v0 + 320);
  v43 = *(_QWORD *)(v0 + 304);
  v44 = *(_QWORD *)(v0 + 272);
  v45 = *(_QWORD *)(v0 + 264);
  v46 = *(_QWORD *)(v0 + 248);
  v47 = *(_QWORD *)(v0 + 232);
  v48 = *(_QWORD *)(v0 + 224);
  v49 = *(_QWORD *)(v0 + 216);
  v50 = *(_QWORD *)(v0 + 208);
  v51 = *(_QWORD *)(v0 + 200);
  v52 = *(_QWORD *)(v0 + 192);
  v28(v30, *(_QWORD *)(v0 + 376));
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v43);
  swift_task_dealloc(v44);
  swift_task_dealloc(v45);
  swift_task_dealloc(v46);
  swift_task_dealloc(v47);
  swift_task_dealloc(v48);
  swift_task_dealloc(v49);
  swift_task_dealloc(v50);
  swift_task_dealloc(v51);
  swift_task_dealloc(v52);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10006908C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v1 = *(unsigned __int8 *)(v0 + 640);
  v2 = *(_QWORD *)(v0 + 456);
  v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 448);
  v4 = *(_QWORD *)(v0 + 328);
  v5 = *(_QWORD *)(v0 + 280);
  v6 = (v1 + 24) & ~v1;
  v7 = *(_QWORD *)(v0 + 296) + v6;
  v8 = v1 | 7;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v0 + 464))(v4, *(_QWORD *)(v0 + 336), v5);
  v9 = swift_allocObject(&unk_101053020, v7, v8);
  *(_QWORD *)(v0 + 488) = v9;
  *(_QWORD *)(v9 + 16) = v2;
  v3(v9 + v6, v4, v5);
  v10 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v11 = (_QWORD *)swift_task_alloc(v10);
  *(_QWORD *)(v0 + 496) = v11;
  *v11 = v0;
  v11[1] = sub_100069170;
  return unsafeBlocking<A>(_:)(*(_QWORD *)(v0 + 248), sub_10007CC00, v9, *(_QWORD *)(v0 + 240));
}

uint64_t sub_100069170()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 168);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 496));
  swift_release();
  return swift_task_switch(sub_1000691D0, v1, 0);
}

uint64_t sub_1000691D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int (*v23)(uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  void (*v28)(uint64_t, _QWORD);
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(uint64_t, uint64_t, uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v1 = *(_QWORD *)(v0 + 248);
  v2 = type metadata accessor for OwnerSharingCircle(0);
  v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(v1, 1, v2);
  sub_100004048(v1, &qword_1010EE0E0);
  if (v3 == 1)
  {
    v4 = *(_QWORD *)(v0 + 456);
    v5 = sub_1000694F0;
    return swift_task_switch(v5, v4, 0);
  }
  v6 = *(_QWORD *)(v0 + 336);
  v7 = *(_QWORD *)(v0 + 280);
  v8 = *(_QWORD *)(v0 + 288);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 352) + 8))(*(_QWORD *)(v0 + 360), *(_QWORD *)(v0 + 344));
  v9 = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  v10 = *(_QWORD *)(v0 + 440);
  v11 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 424);
  v12 = *(_QWORD *)(v0 + 368);
  v13 = *(_QWORD *)(v0 + 344);
  DirectorySequence.next()(v9);
  if (v11(v12, 1, v13) != 1)
  {
    while (1)
    {
      *(_QWORD *)(v0 + 440) = v10;
      v14 = *(_QWORD *)(v0 + 280);
      v15 = *(_QWORD *)(v0 + 288);
      v16 = *(_QWORD *)(v0 + 272);
      v17 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v0 + 432))(*(_QWORD *)(v0 + 360), *(_QWORD *)(v0 + 368), *(_QWORD *)(v0 + 344));
      v18 = URL.lastPathComponent.getter(v17);
      UUID.init(uuidString:)(v18, v19);
      swift_bridgeObjectRelease();
      v20 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v16, 1, v14);
      v21 = *(_QWORD *)(v0 + 272);
      if (v20 != 1)
        break;
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 352) + 8))(*(_QWORD *)(v0 + 360), *(_QWORD *)(v0 + 344));
      v22 = sub_100004048(v21, &qword_1010ED860);
      v23 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 424);
      v24 = *(_QWORD *)(v0 + 368);
      v25 = *(_QWORD *)(v0 + 344);
      DirectorySequence.next()(v22);
      if (v23(v24, 1, v25) == 1)
        goto LABEL_6;
    }
    v39 = *(_QWORD *)(v0 + 336);
    v40 = *(_QWORD *)(v0 + 280);
    v41 = *(_QWORD *)(v0 + 168);
    v42 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 288) + 32);
    *(_QWORD *)(v0 + 448) = v42;
    v42(v39, v21, v40);
    v4 = *(_QWORD *)(v41 + 112);
    *(_QWORD *)(v0 + 456) = v4;
    v5 = sub_100068C2C;
    return swift_task_switch(v5, v4, 0);
  }
LABEL_6:
  v26 = *(void **)(v0 + 408);
  v27 = *(_QWORD *)(v0 + 416);
  v28 = *(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 384) + 8);
  v28(*(_QWORD *)(v0 + 392), *(_QWORD *)(v0 + 376));
  v29 = objc_msgSend(v26, "defaultManager");
  NSFileManager.removeEmptyDirectoriesRecursively(baseURL:)(v27);

  if (v10)
    swift_errorRelease(v10);
  v31 = *(_QWORD *)(v0 + 392);
  v30 = *(_QWORD *)(v0 + 400);
  v32 = *(_QWORD *)(v0 + 368);
  v33 = *(_QWORD *)(v0 + 360);
  v35 = *(_QWORD *)(v0 + 328);
  v34 = *(_QWORD *)(v0 + 336);
  v37 = *(_QWORD *)(v0 + 312);
  v36 = *(_QWORD *)(v0 + 320);
  v43 = *(_QWORD *)(v0 + 304);
  v44 = *(_QWORD *)(v0 + 272);
  v45 = *(_QWORD *)(v0 + 264);
  v46 = *(_QWORD *)(v0 + 248);
  v47 = *(_QWORD *)(v0 + 232);
  v48 = *(_QWORD *)(v0 + 224);
  v49 = *(_QWORD *)(v0 + 216);
  v50 = *(_QWORD *)(v0 + 208);
  v51 = *(_QWORD *)(v0 + 200);
  v52 = *(_QWORD *)(v0 + 192);
  v28(v30, *(_QWORD *)(v0 + 376));
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v43);
  swift_task_dealloc(v44);
  swift_task_dealloc(v45);
  swift_task_dealloc(v46);
  swift_task_dealloc(v47);
  swift_task_dealloc(v48);
  swift_task_dealloc(v49);
  swift_task_dealloc(v50);
  swift_task_dealloc(v51);
  swift_task_dealloc(v52);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000694F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;

  v1 = *(unsigned __int8 *)(v0 + 640);
  v2 = *(_QWORD *)(v0 + 456);
  v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 448);
  v4 = *(_QWORD *)(v0 + 328);
  v5 = *(_QWORD *)(v0 + 280);
  v6 = (v1 + 24) & ~v1;
  v7 = *(_QWORD *)(v0 + 296) + v6;
  v8 = v1 | 7;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v0 + 464))(v4, *(_QWORD *)(v0 + 336), v5);
  v9 = swift_allocObject(&unk_101053048, v7, v8);
  *(_QWORD *)(v0 + 504) = v9;
  *(_QWORD *)(v9 + 16) = v2;
  v3(v9 + v6, v4, v5);
  v10 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v11 = (_QWORD *)swift_task_alloc(v10);
  *(_QWORD *)(v0 + 512) = v11;
  v12 = sub_10001A9A8(&qword_1010EC8C8);
  *v11 = v0;
  v11[1] = sub_1000695E8;
  return unsafeBlocking<A>(_:)(v0 + 160, sub_10007CB00, v9, v12);
}

uint64_t sub_1000695E8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 456);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 512));
  swift_release();
  return swift_task_switch(sub_100069648, v1, 0);
}

uint64_t sub_100069648()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[21];
  v0[65] = v0[20];
  return swift_task_switch(sub_100069660, v1, 0);
}

uint64_t sub_100069660()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  _BOOL4 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t (*v32)(uint64_t);
  uint64_t v33;
  void (*v34)(uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t (*v40)(uint64_t, uint64_t, uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  NSObject *v48;
  uint64_t (*v49)(uint64_t);
  os_log_type_t v50;
  _BOOL4 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t inited;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  NSObject *v76;
  os_log_type_t v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t *v91;
  int64_t v92;
  uint64_t v93;
  uint64_t (*v94)(uint64_t, uint64_t);
  uint64_t v95;
  uint64_t v96;
  unsigned int (*v97)(uint64_t, uint64_t, uint64_t);
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unsigned int (*v108)(uint64_t, uint64_t, uint64_t);
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  void *v112;
  void (*v113)(uint64_t, uint64_t);
  id v114;
  uint64_t *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t result;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  void (*v130)(uint64_t, uint64_t, uint64_t);
  uint64_t v131;
  uint64_t (*v132)();
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t *v138;
  uint64_t v139;
  uint64_t *v140;
  uint64_t *v141;
  uint64_t *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  void (*v152)(uint64_t, uint64_t);
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  void (*v156)(uint64_t, uint64_t);
  uint64_t v157;
  uint64_t v158;
  uint64_t *v159;
  uint64_t v160;
  uint64_t v161[2];

  v1 = v0;
  v2 = v0[65];
  if (!*(_QWORD *)(v2 + 16))
  {
    v22 = v0[45];
    v24 = v0[42];
    v23 = v0[43];
    v26 = v0[35];
    v25 = v1[36];
    (*(void (**)(uint64_t, uint64_t))(v1[44] + 8))(v22, v23);
    swift_bridgeObjectRelease();
    v27 = (*(uint64_t (**)(uint64_t, uint64_t))(v25 + 8))(v24, v26);
    v28 = v1[55];
LABEL_46:
    v97 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v1[53];
    v98 = v1[46];
    v99 = v1[43];
    DirectorySequence.next()(v27);
    if (v97(v98, 1, v99) == 1)
    {
LABEL_49:
      v112 = (void *)v1[51];
      v111 = v1[52];
      v113 = *(void (**)(uint64_t, uint64_t))(v1[48] + 8);
      v113(v1[49], v1[47]);
      v114 = objc_msgSend(v112, "defaultManager");
      NSFileManager.removeEmptyDirectoriesRecursively(baseURL:)(v111);

      if (v28)
        swift_errorRelease(v28);
      v115 = v1;
      v118 = v1 + 49;
      v117 = v1[49];
      v116 = v118[1];
      v119 = v115[46];
      v120 = v115[45];
      v121 = v115[41];
      v122 = v115[42];
      v124 = v115[39];
      v123 = v115[40];
      v143 = v115[38];
      v145 = v115[34];
      v147 = v115[33];
      v149 = v115[31];
      v150 = v115[29];
      v151 = v115[28];
      v153 = v115[27];
      v155 = v115[26];
      v158 = v115[25];
      v160 = v115[24];
      v113(v116, v115[47]);
      swift_task_dealloc(v116);
      swift_task_dealloc(v117);
      swift_task_dealloc(v119);
      swift_task_dealloc(v120);
      swift_task_dealloc(v122);
      swift_task_dealloc(v121);
      swift_task_dealloc(v123);
      swift_task_dealloc(v124);
      swift_task_dealloc(v143);
      swift_task_dealloc(v145);
      swift_task_dealloc(v147);
      swift_task_dealloc(v149);
      swift_task_dealloc(v150);
      swift_task_dealloc(v151);
      swift_task_dealloc(v153);
      swift_task_dealloc(v155);
      swift_task_dealloc(v158);
      swift_task_dealloc(v160);
      return ((uint64_t (*)(void))v115[1])();
    }
    else
    {
      while (1)
      {
        v1[55] = v28;
        v101 = v1[35];
        v100 = v1[36];
        v102 = v1[34];
        v103 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v1[54])(v1[45], v1[46], v1[43]);
        v104 = URL.lastPathComponent.getter(v103);
        UUID.init(uuidString:)(v104, v105);
        swift_bridgeObjectRelease();
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v100 + 48))(v102, 1, v101) != 1)
          break;
        v106 = v1[34];
        (*(void (**)(uint64_t, uint64_t))(v1[44] + 8))(v1[45], v1[43]);
        v107 = sub_100004048(v106, &qword_1010ED860);
        v108 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v1[53];
        v109 = v1[46];
        v110 = v1[43];
        DirectorySequence.next()(v107);
        if (v108(v109, 1, v110) == 1)
          goto LABEL_49;
      }
      v126 = v1[42];
      v127 = v1[35];
      v128 = v1[34];
      v129 = v1[21];
      v130 = *(void (**)(uint64_t, uint64_t, uint64_t))(v1[36] + 32);
      v1[56] = (uint64_t)v130;
      v130(v126, v128, v127);
      v131 = *(_QWORD *)(v129 + 112);
      v1[57] = v131;
      v132 = sub_100068C2C;
      return swift_task_switch(v132, v131, 0);
    }
  }
  v3 = v0[65];
  if (qword_1010E9938 != -1)
  {
LABEL_65:
    swift_once(&qword_1010E9938, sub_1000AFBB0);
    v3 = v1[65];
  }
  v4 = (void (*)(uint64_t, uint64_t, uint64_t))v1[58];
  v5 = v1[42];
  v6 = v1[40];
  v7 = v1[35];
  v8 = type metadata accessor for Logger(0);
  v1[66] = sub_10001A9E8(v8, (uint64_t)qword_1011B6748);
  v4(v6, v5, v7);
  swift_bridgeObjectRetain(v3);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.fault.getter(v10);
  v12 = os_log_type_enabled(v10, v11);
  v13 = v1[40];
  v14 = v1[35];
  v15 = v1[36];
  v159 = v1;
  if (v12)
  {
    v16 = swift_slowAlloc(32, -1);
    v17 = swift_slowAlloc(32, -1);
    v161[0] = v17;
    *(_DWORD *)v16 = 134218499;
    *(_QWORD *)(v16 + 4) = *(_QWORD *)(v2 + 16);
    swift_bridgeObjectRelease();
    *(_WORD *)(v16 + 12) = 2160;
    *(_QWORD *)(v16 + 14) = 1752392040;
    *(_WORD *)(v16 + 22) = 2081;
    v18 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v19 = dispatch thunk of CustomStringConvertible.description.getter(v14, v18);
    *(_QWORD *)(v16 + 24) = sub_100016940(v19, v20, v161);
    swift_bridgeObjectRelease();
    v2 = *(_QWORD *)(v15 + 8);
    ((void (*)(uint64_t, uint64_t))v2)(v13, v14);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Found %ld orphaned secrets for %{private,mask.hash}s share.", (uint8_t *)v16, 0x20u);
    swift_arrayDestroy(v17, 1, (char *)&type metadata for Any + 8);
    v21 = v17;
    v1 = v159;
    swift_slowDealloc(v21, -1, -1);
    swift_slowDealloc(v16, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease();
    v2 = *(_QWORD *)(v15 + 8);
    ((void (*)(uint64_t, uint64_t))v2)(v13, v14);
  }

  v1[67] = v2;
  v29 = Array.chunked(into:)(300, v1[65], v1[22]);
  v1[68] = v29;
  swift_bridgeObjectRelease();
  v30 = *(_QWORD *)(v29 + 16);
  v1[69] = v30;
  if (!v30)
  {
    swift_bridgeObjectRelease();
    v28 = v1[55];
LABEL_45:
    v94 = (uint64_t (*)(uint64_t, uint64_t))v1[67];
    v95 = v1[42];
    v96 = v1[35];
    (*(void (**)(uint64_t, uint64_t))(v1[44] + 8))(v1[45], v1[43]);
    v27 = v94(v95, v96);
    goto LABEL_46;
  }
  v31 = 0;
  v142 = v1 + 7;
  v141 = v1 + 11;
  v139 = (uint64_t)(v1 + 2);
  v140 = v1 + 14;
  v138 = v1 + 17;
  v32 = type metadata accessor for SharingCircleSecret;
  v33 = v1[55];
  v34 = (void (*)(uint64_t, uint64_t))v2;
  v156 = (void (*)(uint64_t, uint64_t))v2;
  while (1)
  {
    v1[72] = v31;
    v1[71] = (uint64_t)v34;
    v1[70] = v2;
    v35 = v1[68];
    if (v31 >= *(_QWORD *)(v35 + 16))
    {
      __break(1u);
      goto LABEL_65;
    }
    v36 = *(_QWORD *)(v35 + 8 * v31 + 32);
    v1[73] = v36;
    v37 = *(_QWORD *)(v36 + 16);
    v1[74] = v37;
    v148 = v36;
    v144 = v33;
    v146 = v37;
    if (v37)
    {
      v152 = v34;
      v38 = v1[23];
      v39 = v36 + ((*(unsigned __int8 *)(v38 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v38 + 80));
      v154 = *(_QWORD *)(v38 + 72);
      swift_bridgeObjectRetain_n(v36, 2);
      do
      {
        v40 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v1[58];
        v41 = v1[42];
        v42 = v1[39];
        v43 = v1[35];
        v44 = v1[27];
        v45 = v159[26];
        sub_10005972C(v39, v44, v32);
        v46 = v45;
        v1 = v159;
        sub_10005972C(v44, v46, v32);
        v47 = v40(v42, v41, v43);
        v48 = Logger.logObject.getter(v47);
        v49 = v32;
        v50 = static os_log_type_t.default.getter(v48);
        v51 = os_log_type_enabled(v48, v50);
        v52 = v159[39];
        v53 = v159[35];
        v54 = v159[26];
        if (v51)
        {
          v55 = swift_slowAlloc(42, -1);
          v157 = swift_slowAlloc(64, -1);
          v161[0] = v157;
          *(_DWORD *)v55 = 141558787;
          *(_QWORD *)(v55 + 4) = 1752392040;
          *(_WORD *)(v55 + 12) = 2081;
          v56 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
          v57 = dispatch thunk of CustomStringConvertible.description.getter(v53, v56);
          *(_QWORD *)(v55 + 14) = sub_100016940(v57, v58, v161);
          swift_bridgeObjectRelease();
          sub_1000126B0(v54, type metadata accessor for SharingCircleSecret);
          *(_WORD *)(v55 + 22) = 2160;
          *(_QWORD *)(v55 + 24) = 1752392040;
          *(_WORD *)(v55 + 32) = 2081;
          v59 = dispatch thunk of CustomStringConvertible.description.getter(v53, v56);
          *(_QWORD *)(v55 + 34) = sub_100016940(v59, v60, v161);
          swift_bridgeObjectRelease();
          v152(v52, v53);
          _os_log_impl((void *)&_mh_execute_header, v48, v50, "Removing orphaned sharing circle secret: %{private,mask.hash}s,\nshareID: %{private,mask.hash}s.", (uint8_t *)v55, 0x2Au);
          swift_arrayDestroy(v157, 2, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v157, -1, -1);
          v61 = v55;
          v1 = v159;
          swift_slowDealloc(v61, -1, -1);

          v156 = v152;
          v32 = type metadata accessor for SharingCircleSecret;
        }
        else
        {
          sub_1000126B0(v159[26], v49);
          v156(v52, v53);

          v32 = v49;
        }
        sub_1000126B0(v1[27], v32);
        v39 += v154;
        --v37;
      }
      while (v37);
      v36 = v148;
      swift_bridgeObjectRelease();
      v37 = v146;
    }
    else
    {
      swift_bridgeObjectRetain(v36);
    }
    v1[75] = (uint64_t)v156;
    v62 = type metadata accessor for ChangeSetAdaptor();
    inited = swift_initStackObject(v62, v142);
    *(_QWORD *)(inited + 16) = _swiftEmptyDictionarySingleton;
    v64 = inited + 16;
    *(_QWORD *)(inited + 24) = _swiftEmptyDictionarySingleton;
    v65 = (uint64_t *)(inited + 24);
    if (!v37)
      goto LABEL_29;
    v66 = inited;
    v67 = v1[23];
    v68 = v1;
    v69 = (*(unsigned __int8 *)(v67 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v67 + 80);
    swift_bridgeObjectRetain(v36);
    swift_retain();
    v70 = *(_QWORD *)(v67 + 72);
    v71 = v68[28];
    sub_10005972C(v36 + v69, v71, v32);
    sub_100ADECF8(v71);
    if (!v144)
      break;
    sub_1000126B0(v68[28], v32);
    swift_bridgeObjectRelease();
    swift_release();
    swift_setDeallocating(v66);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_errorRetain(v144);
    v75 = swift_errorRetain(v144);
    v76 = Logger.logObject.getter(v75);
    v77 = static os_log_type_t.error.getter(v76);
    v1 = v68;
    if (os_log_type_enabled(v76, v77))
    {
      v78 = swift_slowAlloc(12, -1);
      v79 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v78 = 138412290;
      swift_errorRetain(v144);
      v80 = _swift_stdlib_bridgeErrorToNSError(v144);
      *(_QWORD *)(v78 + 4) = v80;
      *v79 = v80;
      swift_errorRelease(v144);
      swift_errorRelease(v144);
      _os_log_impl((void *)&_mh_execute_header, v76, v77, "Failed to remove orphaned secrets.\nError: %@.", (uint8_t *)v78, 0xCu);
      v81 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
      swift_arrayDestroy(v79, 1, v81);
      swift_slowDealloc(v79, -1, -1);
      swift_slowDealloc(v78, -1, -1);

      swift_errorRelease(v144);
    }
    else
    {
      swift_errorRelease(v144);
      swift_errorRelease(v144);
      swift_errorRelease(v144);

    }
    v33 = 0;
    v156 = (void (*)(uint64_t, uint64_t))v68[75];
    v34 = (void (*)(uint64_t, uint64_t))v68[71];
    v2 = v68[70];
    v31 = v68[72] + 1;
    if (v31 == v68[69])
    {
      swift_bridgeObjectRelease();
      v28 = 0;
      goto LABEL_45;
    }
  }
  sub_1000126B0(v68[28], v32);
  v72 = v146 - 1;
  if (v146 != 1)
  {
    v73 = v148 + v70 + v69;
    do
    {
      v74 = v68[28];
      sub_10005972C(v73, v74, v32);
      sub_100ADECF8(v74);
      sub_1000126B0(v68[28], v32);
      v73 += v70;
      --v72;
    }
    while (v72);
  }
  swift_bridgeObjectRelease();
  swift_release();
  v1 = v68;
LABEL_29:
  swift_beginAccess(v64, v141, 0, 0);
  v83 = *(_QWORD *)v64;
  if (!*(_QWORD *)(*(_QWORD *)v64 + 16))
  {
    swift_beginAccess(v65, v138, 0, 0);
    v84 = *v65;
    if ((*v65 & 0xC000000000000001) != 0)
    {
      if (v84 < 0)
        v85 = *v65;
      else
        v85 = v84 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(*v65);
      v86 = __CocoaDictionary.count.getter(v85);
      v82 = swift_bridgeObjectRelease();
      if (v86)
        goto LABEL_35;
    }
    else if (*(_QWORD *)(v84 + 16))
    {
      goto LABEL_35;
    }
    v136 = v1[29];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v137 = type metadata accessor for CloudKitChangeSet(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v137 - 8) + 56))(v136, 1, 1, v137);
LABEL_59:
    v131 = v1[57];
    v132 = sub_10006A334;
    return swift_task_switch(v132, v131, 0);
  }
LABEL_35:
  UUID.init()(v82);
  swift_beginAccess(v65, v140, 0, 0);
  v87 = *v65;
  if ((*v65 & 0xC000000000000001) != 0)
  {
    if (v87 < 0)
      v88 = *v65;
    else
      v88 = v87 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*v65);
    v89 = __CocoaDictionary.count.getter(v88);
    if (v89)
      goto LABEL_40;
LABEL_54:
    swift_bridgeObjectRelease_n(v87, 2);
    v91 = _swiftEmptyArrayStorage;
LABEL_58:
    v134 = v1[29];
    v135 = type metadata accessor for CloudKitChangeSet(0);
    *(_QWORD *)(v134 + *(int *)(v135 + 20)) = v91;
    *(_QWORD *)(v134 + *(int *)(v135 + 24)) = v83;
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v135 - 8) + 56))(v134, 0, 1, v135);
    goto LABEL_59;
  }
  v89 = *(_QWORD *)(v87 + 16);
  swift_bridgeObjectRetain(*v65);
  if (!v89)
    goto LABEL_54;
LABEL_40:
  if (v89 <= 0)
  {
    v91 = _swiftEmptyArrayStorage;
  }
  else
  {
    v90 = sub_10001A9A8(&qword_10111BE20);
    v91 = (uint64_t *)swift_allocObject(v90, 8 * v89 + 32, 7);
    v92 = j__malloc_size(v91);
    v93 = v92 - 32;
    if (v92 < 32)
      v93 = v92 - 25;
    v91[2] = v89;
    v91[3] = (2 * (v93 >> 3)) | 1;
  }
  swift_bridgeObjectRetain(v87);
  v133 = sub_100509FC0(v139, v91 + 4, v89, v87);
  result = sub_10007CC38(v1[2]);
  if (v133 == v89)
  {
    swift_bridgeObjectRelease_n(v87, 2);
    goto LABEL_58;
  }
  __break(1u);
  return result;
}

uint64_t sub_10006A334()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 608) = *(_QWORD *)(*(_QWORD *)(v0 + 456) + 128);
  return swift_task_switch(sub_10006A354, 0, 0);
}

uint64_t sub_10006A354()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = v0[76];
  v2 = v0[29];
  v3 = swift_task_alloc(32);
  v0[77] = v3;
  *(_QWORD *)(v3 + 16) = v1;
  *(_QWORD *)(v3 + 24) = v2;
  v4 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  v0[78] = v4;
  *v4 = v0;
  v4[1] = sub_10006A3F8;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v4, 0, 0, 0xD000000000000011, 0x8000000100EC6890, sub_100067DDC, v3, (char *)&type metadata for () + 8);
}

uint64_t sub_10006A3F8()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 624);
  *(_QWORD *)(*v1 + 632) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_10006B1F0;
  }
  else
  {
    swift_task_dealloc(*(_QWORD *)(v2 + 616));
    v4 = sub_10006A464;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_10006A464()
{
  uint64_t v0;

  return swift_task_switch(sub_10006A478, *(_QWORD *)(v0 + 168), 0);
}

void sub_10006A478()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(_QWORD, _QWORD);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  void (*v30)(uint64_t, uint64_t);
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t (*v34)(uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int (*v38)(uint64_t, uint64_t, uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int (*v50)(uint64_t, uint64_t, uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  void (*v55)(uint64_t, uint64_t);
  id v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t (*v67)(uint64_t);
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t (*v73)(uint64_t, uint64_t, uint64_t);
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  NSObject *v82;
  os_log_type_t v83;
  _BOOL4 v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t inited;
  uint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t (*v100)(uint64_t);
  uint64_t *v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  NSObject *v109;
  os_log_type_t v110;
  uint64_t v111;
  uint64_t *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t *v124;
  int64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  void (*v130)(uint64_t, uint64_t, uint64_t);
  uint64_t v131;
  uint64_t (*v132)();
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t *v138;
  uint64_t v139;
  uint64_t *v140;
  uint64_t *v141;
  uint64_t v142;
  uint64_t *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  void (*v154)(uint64_t, uint64_t);
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  void (*v158)(_QWORD, _QWORD);
  void (*v159)(uint64_t, uint64_t);
  void (*v160)(uint64_t, uint64_t);
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166[2];

  v1 = v0;
  if (v0[74])
  {
    v2 = v0[73];
    v3 = v0[23];
    v4 = v2 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v155 = *(_QWORD *)(v3 + 72);
    v5 = (void (*)(_QWORD, _QWORD))v0[70];
    swift_bridgeObjectRetain(v2);
    v6 = 0;
    do
    {
      v158 = v5;
      v163 = v4;
      v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v1[58];
      v11 = v1[42];
      v12 = v1[38];
      v13 = v1[35];
      v14 = v1;
      v17 = v1 + 24;
      v16 = v1[24];
      v15 = v17[1];
      sub_10005972C(v4, v15, type metadata accessor for SharingCircleSecret);
      sub_10005972C(v15, v16, type metadata accessor for SharingCircleSecret);
      v18 = v10(v12, v11, v13);
      v19 = Logger.logObject.getter(v18);
      v20 = static os_log_type_t.default.getter(v19);
      if (os_log_type_enabled(v19, v20))
      {
        v159 = (void (*)(uint64_t, uint64_t))v14[67];
        v152 = v14[38];
        v21 = v14[35];
        v22 = v14[24];
        v23 = swift_slowAlloc(42, -1);
        v24 = swift_slowAlloc(64, -1);
        v166[0] = v24;
        *(_DWORD *)v23 = 141558787;
        *(_QWORD *)(v23 + 4) = 1752392040;
        *(_WORD *)(v23 + 12) = 2081;
        v25 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v26 = dispatch thunk of CustomStringConvertible.description.getter(v21, v25);
        *(_QWORD *)(v23 + 14) = sub_100016940(v26, v27, v166);
        swift_bridgeObjectRelease();
        sub_1000126B0(v22, type metadata accessor for SharingCircleSecret);
        *(_WORD *)(v23 + 22) = 2160;
        *(_QWORD *)(v23 + 24) = 1752392040;
        *(_WORD *)(v23 + 32) = 2081;
        v28 = dispatch thunk of CustomStringConvertible.description.getter(v21, v25);
        *(_QWORD *)(v23 + 34) = sub_100016940(v28, v29, v166);
        swift_bridgeObjectRelease();
        v159(v152, v21);
        _os_log_impl((void *)&_mh_execute_header, v19, v20, "Removed orphaned sharing circle secret: %{private,mask.hash}s,\nshareID: %{private,mask.hash}s.", (uint8_t *)v23, 0x2Au);
        swift_arrayDestroy(v24, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v24, -1, -1);
        swift_slowDealloc(v23, -1, -1);

        v5 = (void (*)(_QWORD, _QWORD))v14[67];
      }
      else
      {
        v7 = v14[38];
        v8 = v14[35];
        sub_1000126B0(v14[24], type metadata accessor for SharingCircleSecret);
        v5 = v158;
        v158(v7, v8);

      }
      v1 = v14;
      ++v6;
      v9 = v14[74];
      sub_1000126B0(v14[25], type metadata accessor for SharingCircleSecret);
      v4 = v163 + v155;
    }
    while (v6 != v9);
    swift_bridgeObjectRelease();
    v30 = v5;
    v160 = v5;
  }
  else
  {
    v160 = (void (*)(uint64_t, uint64_t))v0[75];
    v30 = (void (*)(uint64_t, uint64_t))v0[71];
    v5 = (void (*)(_QWORD, _QWORD))v1[70];
  }
  sub_100004048(v1[29], &qword_1010EC870);
  swift_bridgeObjectRelease();
  v31 = v1[79];
  v32 = v1[72] + 1;
  if (v32 == v1[69])
  {
    v33 = v1[79];
LABEL_11:
    swift_bridgeObjectRelease();
    v34 = (uint64_t (*)(uint64_t, uint64_t))v1[67];
    v35 = v1[42];
    v36 = v1[35];
    (*(void (**)(uint64_t, uint64_t))(v1[44] + 8))(v1[45], v1[43]);
    v37 = v34(v35, v36);
    v38 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v1[53];
    v39 = v1[46];
    v40 = v1[43];
    DirectorySequence.next()(v37);
    if (v38(v39, 1, v40) == 1)
    {
LABEL_14:
      v54 = (void *)v1[51];
      v53 = v1[52];
      v55 = *(void (**)(uint64_t, uint64_t))(v1[48] + 8);
      v55(v1[49], v1[47]);
      v56 = objc_msgSend(v54, "defaultManager");
      NSFileManager.removeEmptyDirectoriesRecursively(baseURL:)(v53);

      if (v33)
        swift_errorRelease(v33);
      v57 = v1;
      v60 = v1 + 49;
      v59 = v1[49];
      v58 = v60[1];
      v61 = v57[46];
      v62 = v57[45];
      v63 = v57[41];
      v64 = v57[42];
      v66 = v57[39];
      v65 = v57[40];
      v142 = v57[38];
      v144 = v57[34];
      v146 = v57[33];
      v148 = v57[31];
      v150 = v57[29];
      v151 = v57[28];
      v153 = v57[27];
      v156 = v57[26];
      v161 = v57[25];
      v164 = v57[24];
      v55(v58, v57[47]);
      swift_task_dealloc(v58);
      swift_task_dealloc(v59);
      swift_task_dealloc(v61);
      swift_task_dealloc(v62);
      swift_task_dealloc(v64);
      swift_task_dealloc(v63);
      swift_task_dealloc(v65);
      swift_task_dealloc(v66);
      swift_task_dealloc(v142);
      swift_task_dealloc(v144);
      swift_task_dealloc(v146);
      swift_task_dealloc(v148);
      swift_task_dealloc(v150);
      swift_task_dealloc(v151);
      swift_task_dealloc(v153);
      swift_task_dealloc(v156);
      swift_task_dealloc(v161);
      swift_task_dealloc(v164);
      ((void (*)(void))v57[1])();
    }
    else
    {
      while (1)
      {
        v1[55] = v33;
        v42 = v1[35];
        v41 = v1[36];
        v43 = v1[34];
        v44 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v1[54])(v1[45], v1[46], v1[43]);
        v45 = URL.lastPathComponent.getter(v44);
        UUID.init(uuidString:)(v45, v46);
        swift_bridgeObjectRelease();
        v47 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v41 + 48))(v43, 1, v42);
        v48 = v1[34];
        if (v47 != 1)
          break;
        (*(void (**)(uint64_t, uint64_t))(v1[44] + 8))(v1[45], v1[43]);
        v49 = sub_100004048(v48, &qword_1010ED860);
        v50 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v1[53];
        v51 = v1[46];
        v52 = v1[43];
        DirectorySequence.next()(v49);
        if (v50(v51, 1, v52) == 1)
          goto LABEL_14;
      }
      v127 = v1[42];
      v128 = v1[35];
      v129 = v1[21];
      v130 = *(void (**)(uint64_t, uint64_t, uint64_t))(v1[36] + 32);
      v1[56] = (uint64_t)v130;
      v130(v127, v48, v128);
      v131 = *(_QWORD *)(v129 + 112);
      v1[57] = v131;
      v132 = sub_100068C2C;
LABEL_61:
      swift_task_switch(v132, v131, 0);
    }
    return;
  }
  v143 = v1 + 7;
  v141 = v1 + 11;
  v139 = (uint64_t)(v1 + 2);
  v140 = v1 + 14;
  v67 = type metadata accessor for SharingCircleSecret;
  v138 = v1 + 17;
  while (1)
  {
    v1[72] = v32;
    v1[71] = (uint64_t)v30;
    v1[70] = (uint64_t)v5;
    v68 = v1[68];
    if (v32 >= *(_QWORD *)(v68 + 16))
    {
      __break(1u);
      goto LABEL_65;
    }
    v69 = *(_QWORD *)(v68 + 8 * v32 + 32);
    v1[73] = v69;
    v70 = *(_QWORD *)(v69 + 16);
    v1[74] = v70;
    v149 = v69;
    v145 = v31;
    v147 = v70;
    if (v70)
    {
      v154 = v30;
      v71 = v1[23];
      v72 = v69 + ((*(unsigned __int8 *)(v71 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v71 + 80));
      v157 = *(_QWORD *)(v71 + 72);
      swift_bridgeObjectRetain_n(v69, 2);
      do
      {
        v165 = v70;
        v73 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v1[58];
        v74 = v1[42];
        v75 = v1[39];
        v76 = v1[35];
        v77 = v1;
        v80 = v1 + 26;
        v79 = v1[26];
        v78 = v80[1];
        sub_10005972C(v72, v78, v67);
        sub_10005972C(v78, v79, v67);
        v81 = v73(v75, v74, v76);
        v82 = Logger.logObject.getter(v81);
        v83 = static os_log_type_t.default.getter(v82);
        v84 = os_log_type_enabled(v82, v83);
        v85 = v77[39];
        v86 = v77[35];
        v87 = v77[26];
        if (v84)
        {
          v88 = swift_slowAlloc(42, -1);
          v162 = swift_slowAlloc(64, -1);
          v166[0] = v162;
          *(_DWORD *)v88 = 141558787;
          *(_QWORD *)(v88 + 4) = 1752392040;
          *(_WORD *)(v88 + 12) = 2081;
          v89 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
          v90 = dispatch thunk of CustomStringConvertible.description.getter(v86, v89);
          *(_QWORD *)(v88 + 14) = sub_100016940(v90, v91, v166);
          swift_bridgeObjectRelease();
          sub_1000126B0(v87, type metadata accessor for SharingCircleSecret);
          *(_WORD *)(v88 + 22) = 2160;
          *(_QWORD *)(v88 + 24) = 1752392040;
          *(_WORD *)(v88 + 32) = 2081;
          v92 = dispatch thunk of CustomStringConvertible.description.getter(v86, v89);
          *(_QWORD *)(v88 + 34) = sub_100016940(v92, v93, v166);
          swift_bridgeObjectRelease();
          v154(v85, v86);
          _os_log_impl((void *)&_mh_execute_header, v82, v83, "Removing orphaned sharing circle secret: %{private,mask.hash}s,\nshareID: %{private,mask.hash}s.", (uint8_t *)v88, 0x2Au);
          swift_arrayDestroy(v162, 2, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v162, -1, -1);
          swift_slowDealloc(v88, -1, -1);

          v160 = v154;
          v67 = type metadata accessor for SharingCircleSecret;
        }
        else
        {
          v67 = type metadata accessor for SharingCircleSecret;
          sub_1000126B0(v77[26], type metadata accessor for SharingCircleSecret);
          v160(v85, v86);

        }
        sub_1000126B0(v77[27], type metadata accessor for SharingCircleSecret);
        v72 += v157;
        v70 = v165 - 1;
        v1 = v77;
      }
      while (v165 != 1);
      v69 = v149;
      swift_bridgeObjectRelease();
      v70 = v147;
    }
    else
    {
      swift_bridgeObjectRetain(v69);
    }
    v1[75] = (uint64_t)v160;
    v94 = type metadata accessor for ChangeSetAdaptor();
    inited = swift_initStackObject(v94, v143);
    *(_QWORD *)(inited + 16) = _swiftEmptyDictionarySingleton;
    v96 = inited + 16;
    *(_QWORD *)(inited + 24) = _swiftEmptyDictionarySingleton;
    v97 = (uint64_t *)(inited + 24);
    if (!v70)
      goto LABEL_38;
    v98 = inited;
    v99 = v1[23];
    v100 = v67;
    v101 = v1;
    v102 = (*(unsigned __int8 *)(v99 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v99 + 80);
    swift_bridgeObjectRetain(v69);
    swift_retain();
    v103 = *(_QWORD *)(v99 + 72);
    v104 = v101[28];
    sub_10005972C(v69 + v102, v104, v100);
    sub_100ADECF8(v104);
    if (!v145)
      break;
    sub_1000126B0(v101[28], v100);
    swift_bridgeObjectRelease();
    swift_release();
    swift_setDeallocating(v98);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_errorRetain(v145);
    v108 = swift_errorRetain(v145);
    v109 = Logger.logObject.getter(v108);
    v110 = static os_log_type_t.error.getter(v109);
    v1 = v101;
    if (os_log_type_enabled(v109, v110))
    {
      v111 = swift_slowAlloc(12, -1);
      v112 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v111 = 138412290;
      swift_errorRetain(v145);
      v113 = _swift_stdlib_bridgeErrorToNSError(v145);
      *(_QWORD *)(v111 + 4) = v113;
      *v112 = v113;
      swift_errorRelease(v145);
      swift_errorRelease(v145);
      _os_log_impl((void *)&_mh_execute_header, v109, v110, "Failed to remove orphaned secrets.\nError: %@.", (uint8_t *)v111, 0xCu);
      v114 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
      swift_arrayDestroy(v112, 1, v114);
      swift_slowDealloc(v112, -1, -1);
      swift_slowDealloc(v111, -1, -1);

      swift_errorRelease(v145);
    }
    else
    {
      swift_errorRelease(v145);
      swift_errorRelease(v145);
      swift_errorRelease(v145);

    }
    v31 = 0;
    v33 = 0;
    v160 = (void (*)(uint64_t, uint64_t))v101[75];
    v30 = (void (*)(uint64_t, uint64_t))v101[71];
    v5 = (void (*)(_QWORD, _QWORD))v101[70];
    v32 = v101[72] + 1;
    v67 = v100;
    if (v32 == v101[69])
      goto LABEL_11;
  }
  sub_1000126B0(v101[28], v100);
  v105 = v147 - 1;
  if (v147 != 1)
  {
    v106 = v149 + v103 + v102;
    do
    {
      v107 = v101[28];
      sub_10005972C(v106, v107, v100);
      sub_100ADECF8(v107);
      sub_1000126B0(v101[28], v100);
      v106 += v103;
      --v105;
    }
    while (v105);
  }
  swift_bridgeObjectRelease();
  swift_release();
  v1 = v101;
LABEL_38:
  swift_beginAccess(v96, v141, 0, 0);
  v116 = *(_QWORD *)v96;
  if (!*(_QWORD *)(*(_QWORD *)v96 + 16))
  {
    swift_beginAccess(v97, v138, 0, 0);
    v117 = *v97;
    if ((*v97 & 0xC000000000000001) != 0)
    {
      if (v117 < 0)
        v118 = *v97;
      else
        v118 = v117 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(*v97);
      v119 = __CocoaDictionary.count.getter(v118);
      v115 = swift_bridgeObjectRelease();
      if (v119)
        goto LABEL_44;
    }
    else if (*(_QWORD *)(v117 + 16))
    {
      goto LABEL_44;
    }
    v136 = v1[29];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v137 = type metadata accessor for CloudKitChangeSet(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v137 - 8) + 56))(v136, 1, 1, v137);
LABEL_60:
    v131 = v1[57];
    v132 = sub_10006A334;
    goto LABEL_61;
  }
LABEL_44:
  UUID.init()(v115);
  swift_beginAccess(v97, v140, 0, 0);
  v120 = *v97;
  if ((*v97 & 0xC000000000000001) == 0)
  {
    v122 = *(_QWORD *)(v120 + 16);
    swift_bridgeObjectRetain(*v97);
    if (v122)
      goto LABEL_49;
    goto LABEL_54;
  }
  if (v120 < 0)
    v121 = *v97;
  else
    v121 = v120 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(*v97);
  v122 = __CocoaDictionary.count.getter(v121);
  if (!v122)
  {
LABEL_54:
    swift_bridgeObjectRelease_n(v120, 2);
    v124 = _swiftEmptyArrayStorage;
LABEL_59:
    v134 = v1[29];
    v135 = type metadata accessor for CloudKitChangeSet(0);
    *(_QWORD *)(v134 + *(int *)(v135 + 20)) = v124;
    *(_QWORD *)(v134 + *(int *)(v135 + 24)) = v116;
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v135 - 8) + 56))(v134, 0, 1, v135);
    goto LABEL_60;
  }
LABEL_49:
  if (v122 <= 0)
  {
    v124 = _swiftEmptyArrayStorage;
  }
  else
  {
    v123 = sub_10001A9A8(&qword_10111BE20);
    v124 = (uint64_t *)swift_allocObject(v123, 8 * v122 + 32, 7);
    v125 = j__malloc_size(v124);
    v126 = v125 - 32;
    if (v125 < 32)
      v126 = v125 - 25;
    v124[2] = v122;
    v124[3] = (2 * (v126 >> 3)) | 1;
  }
  swift_bridgeObjectRetain(v120);
  v133 = sub_100509FC0(v139, v124 + 4, v122, v120);
  sub_10007CC38(v1[2]);
  if (v133 == v122)
  {
    swift_bridgeObjectRelease_n(v120, 2);
    goto LABEL_59;
  }
LABEL_65:
  __break(1u);
}

uint64_t sub_10006B1F0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 456);
  swift_task_dealloc(*(_QWORD *)(v0 + 616));
  return swift_task_switch(sub_10006B230, v1, 0);
}

uint64_t sub_10006B230()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 168);
  swift_bridgeObjectRelease();
  return swift_task_switch(sub_10006B270, v1, 0);
}

void sub_10006B270()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t);
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t);
  uint64_t (*v21)(uint64_t, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  _BOOL4 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t inited;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  int64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t (*v65)();
  uint64_t v66;
  uint64_t v67;
  uint64_t (*v68)(uint64_t, uint64_t);
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int (*v72)(uint64_t, uint64_t, uint64_t);
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  unsigned int (*v84)(uint64_t, uint64_t, uint64_t);
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  void *v88;
  void (*v89)(uint64_t, uint64_t);
  id v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  void (*v104)(uint64_t, uint64_t, uint64_t);
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  void (*v117)(uint64_t, uint64_t);
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  void (*v123)(uint64_t, uint64_t);
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127[2];

  v1 = v0;
  v2 = v0 + 56;
  v108 = v0 + 88;
  v106 = v0 + 16;
  v107 = v0 + 112;
  v105 = v0 + 136;
  sub_100004048(*(_QWORD *)(v0 + 232), &qword_1010EC870);
  v3 = *(_QWORD *)(v0 + 632);
  v4 = type metadata accessor for SharingCircleSecret;
  v113 = v0 + 56;
  swift_errorRetain(v3);
  v5 = swift_errorRetain(v3);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.error.getter(v6);
  if (os_log_type_enabled(v6, v7))
  {
    v8 = swift_slowAlloc(12, -1);
    v9 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v8 = 138412290;
    swift_errorRetain(v3);
    v10 = _swift_stdlib_bridgeErrorToNSError(v3);
    *(_QWORD *)(v8 + 4) = v10;
    *v9 = v10;
    swift_errorRelease(v3);
    swift_errorRelease(v3);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Failed to remove orphaned secrets.\nError: %@.", (uint8_t *)v8, 0xCu);
    v11 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v9, 1, v11);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

    swift_errorRelease(v3);
  }
  else
  {
    swift_errorRelease(v3);
    swift_errorRelease(v3);
    swift_errorRelease(v3);

  }
  v12 = *(_QWORD *)(v1 + 576) + 1;
  if (v12 != *(_QWORD *)(v1 + 552))
  {
    v123 = *(void (**)(uint64_t, uint64_t))(v1 + 600);
    v13 = *(void (**)(uint64_t, uint64_t))(v1 + 568);
    *(_QWORD *)(v1 + 576) = v12;
    v117 = v13;
    *(_QWORD *)(v1 + 568) = v13;
    v14 = *(_QWORD *)(v1 + 544);
    if (v12 >= *(_QWORD *)(v14 + 16))
    {
      __break(1u);
LABEL_49:
      __break(1u);
      return;
    }
    v15 = *(_QWORD *)(v14 + 8 * v12 + 32);
    *(_QWORD *)(v1 + 584) = v15;
    v16 = *(_QWORD *)(v15 + 16);
    *(_QWORD *)(v1 + 592) = v16;
    if (v16)
    {
      v17 = *(_QWORD *)(v1 + 184);
      v18 = v15;
      v19 = v15 + ((*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80));
      v121 = *(_QWORD *)(v17 + 72);
      v111 = v18;
      swift_bridgeObjectRetain_n(v18, 2);
      v109 = v16;
      do
      {
        v125 = v16;
        v20 = v4;
        v21 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 464);
        v22 = *(_QWORD *)(v1 + 336);
        v23 = *(_QWORD *)(v1 + 312);
        v24 = *(_QWORD *)(v1 + 280);
        v26 = *(_QWORD *)(v1 + 208);
        v25 = *(_QWORD *)(v1 + 216);
        sub_10005972C(v19, v25, v20);
        sub_10005972C(v25, v26, v20);
        v27 = v21(v23, v22, v24);
        v28 = Logger.logObject.getter(v27);
        v29 = static os_log_type_t.default.getter(v28);
        v30 = os_log_type_enabled(v28, v29);
        v31 = *(_QWORD *)(v1 + 312);
        v32 = *(_QWORD *)(v1 + 280);
        v33 = v1;
        v34 = *(_QWORD *)(v1 + 208);
        if (v30)
        {
          v35 = swift_slowAlloc(42, -1);
          v119 = swift_slowAlloc(64, -1);
          v127[0] = v119;
          *(_DWORD *)v35 = 141558787;
          *(_QWORD *)(v35 + 4) = 1752392040;
          *(_WORD *)(v35 + 12) = 2081;
          v36 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
          v37 = dispatch thunk of CustomStringConvertible.description.getter(v32, v36);
          *(_QWORD *)(v35 + 14) = sub_100016940(v37, v38, v127);
          swift_bridgeObjectRelease();
          sub_1000126B0(v34, v20);
          *(_WORD *)(v35 + 22) = 2160;
          *(_QWORD *)(v35 + 24) = 1752392040;
          *(_WORD *)(v35 + 32) = 2081;
          v39 = dispatch thunk of CustomStringConvertible.description.getter(v32, v36);
          *(_QWORD *)(v35 + 34) = sub_100016940(v39, v40, v127);
          swift_bridgeObjectRelease();
          v117(v31, v32);
          _os_log_impl((void *)&_mh_execute_header, v28, v29, "Removing orphaned sharing circle secret: %{private,mask.hash}s,\nshareID: %{private,mask.hash}s.", (uint8_t *)v35, 0x2Au);
          swift_arrayDestroy(v119, 2, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v119, -1, -1);
          swift_slowDealloc(v35, -1, -1);

          v123 = v117;
        }
        else
        {
          sub_1000126B0(v34, v20);
          v123(v31, v32);

        }
        sub_1000126B0(*(_QWORD *)(v33 + 216), v20);
        v19 += v121;
        v16 = v125 - 1;
        v1 = v33;
        v4 = v20;
      }
      while (v125 != 1);
      v15 = v111;
      swift_bridgeObjectRelease();
      v2 = v113;
      v16 = v109;
    }
    else
    {
      swift_bridgeObjectRetain(v15);
    }
    *(_QWORD *)(v1 + 600) = v123;
    v41 = type metadata accessor for ChangeSetAdaptor();
    inited = swift_initStackObject(v41, v2);
    *(_QWORD *)(inited + 16) = _swiftEmptyDictionarySingleton;
    v43 = inited + 16;
    *(_QWORD *)(inited + 24) = _swiftEmptyDictionarySingleton;
    v44 = (uint64_t *)(inited + 24);
    if (v16)
    {
      v45 = *(_QWORD *)(v1 + 184);
      v46 = v15 + ((*(unsigned __int8 *)(v45 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v45 + 80));
      swift_bridgeObjectRetain(v15);
      swift_retain();
      v47 = *(_QWORD *)(v45 + 72);
      do
      {
        v48 = *(_QWORD *)(v1 + 224);
        sub_10005972C(v46, v48, v4);
        sub_100ADECF8(v48);
        sub_1000126B0(*(_QWORD *)(v1 + 224), v4);
        v46 += v47;
        --v16;
      }
      while (v16);
      swift_bridgeObjectRelease();
      swift_release();
    }
    swift_beginAccess(v43, v108, 0, 0);
    v50 = *(_QWORD *)v43;
    if (!*(_QWORD *)(*(_QWORD *)v43 + 16))
    {
      swift_beginAccess(v44, v105, 0, 0);
      v51 = *v44;
      if ((*v44 & 0xC000000000000001) != 0)
      {
        if (v51 < 0)
          v52 = *v44;
        else
          v52 = v51 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(*v44);
        v53 = __CocoaDictionary.count.getter(v52);
        v49 = swift_bridgeObjectRelease();
        if (v53)
          goto LABEL_24;
      }
      else if (*(_QWORD *)(v51 + 16))
      {
        goto LABEL_24;
      }
      v66 = *(_QWORD *)(v1 + 232);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v67 = type metadata accessor for CloudKitChangeSet(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v67 - 8) + 56))(v66, 1, 1, v67);
      goto LABEL_39;
    }
LABEL_24:
    UUID.init()(v49);
    swift_beginAccess(v44, v107, 0, 0);
    v54 = *v44;
    if ((*v44 & 0xC000000000000001) != 0)
    {
      if (v54 < 0)
        v55 = *v44;
      else
        v55 = v54 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(*v44);
      v56 = __CocoaDictionary.count.getter(v55);
      if (v56)
        goto LABEL_29;
    }
    else
    {
      v56 = *(_QWORD *)(v54 + 16);
      swift_bridgeObjectRetain(*v44);
      if (v56)
      {
LABEL_29:
        if (v56 <= 0)
        {
          v58 = _swiftEmptyArrayStorage;
        }
        else
        {
          v57 = sub_10001A9A8(&qword_10111BE20);
          v58 = (uint64_t *)swift_allocObject(v57, 8 * v56 + 32, 7);
          v59 = j__malloc_size(v58);
          v60 = v59 - 32;
          if (v59 < 32)
            v60 = v59 - 25;
          v58[2] = v56;
          v58[3] = (2 * (v60 >> 3)) | 1;
        }
        swift_bridgeObjectRetain(v54);
        v61 = sub_100509FC0(v106, v58 + 4, v56, v54);
        sub_10007CC38(*(_QWORD *)(v1 + 16));
        if (v61 == v56)
        {
          swift_bridgeObjectRelease_n(v54, 2);
          goto LABEL_38;
        }
        goto LABEL_49;
      }
    }
    swift_bridgeObjectRelease_n(v54, 2);
    v58 = _swiftEmptyArrayStorage;
LABEL_38:
    v62 = *(_QWORD *)(v1 + 232);
    v63 = type metadata accessor for CloudKitChangeSet(0);
    *(_QWORD *)(v62 + *(int *)(v63 + 20)) = v58;
    *(_QWORD *)(v62 + *(int *)(v63 + 24)) = v50;
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v63 - 8) + 56))(v62, 0, 1, v63);
LABEL_39:
    v64 = *(_QWORD *)(v1 + 456);
    v65 = sub_10006A334;
LABEL_40:
    swift_task_switch(v65, v64, 0);
    return;
  }
  swift_bridgeObjectRelease();
  v68 = *(uint64_t (**)(uint64_t, uint64_t))(v1 + 536);
  v69 = *(_QWORD *)(v1 + 336);
  v70 = *(_QWORD *)(v1 + 280);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v1 + 352) + 8))(*(_QWORD *)(v1 + 360), *(_QWORD *)(v1 + 344));
  v71 = v68(v69, v70);
  v72 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1 + 424);
  v73 = *(_QWORD *)(v1 + 368);
  v74 = *(_QWORD *)(v1 + 344);
  DirectorySequence.next()(v71);
  if (v72(v73, 1, v74) != 1)
  {
    while (1)
    {
      *(_QWORD *)(v1 + 440) = 0;
      v75 = *(_QWORD *)(v1 + 280);
      v76 = *(_QWORD *)(v1 + 288);
      v77 = *(_QWORD *)(v1 + 272);
      v78 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v1 + 432))(*(_QWORD *)(v1 + 360), *(_QWORD *)(v1 + 368), *(_QWORD *)(v1 + 344));
      v79 = URL.lastPathComponent.getter(v78);
      UUID.init(uuidString:)(v79, v80);
      swift_bridgeObjectRelease();
      v81 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v76 + 48))(v77, 1, v75);
      v82 = *(_QWORD *)(v1 + 272);
      if (v81 != 1)
        break;
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v1 + 352) + 8))(*(_QWORD *)(v1 + 360), *(_QWORD *)(v1 + 344));
      v83 = sub_100004048(v82, &qword_1010ED860);
      v84 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1 + 424);
      v85 = *(_QWORD *)(v1 + 368);
      v86 = *(_QWORD *)(v1 + 344);
      DirectorySequence.next()(v83);
      if (v84(v85, 1, v86) == 1)
        goto LABEL_46;
    }
    v101 = *(_QWORD *)(v1 + 336);
    v102 = *(_QWORD *)(v1 + 280);
    v103 = *(_QWORD *)(v1 + 168);
    v104 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 + 288) + 32);
    *(_QWORD *)(v1 + 448) = v104;
    v104(v101, v82, v102);
    v64 = *(_QWORD *)(v103 + 112);
    *(_QWORD *)(v1 + 456) = v64;
    v65 = sub_100068C2C;
    goto LABEL_40;
  }
LABEL_46:
  v88 = *(void **)(v1 + 408);
  v87 = *(_QWORD *)(v1 + 416);
  v89 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 + 384) + 8);
  v89(*(_QWORD *)(v1 + 392), *(_QWORD *)(v1 + 376));
  v90 = objc_msgSend(v88, "defaultManager", v105, v106, v107, v108);
  NSFileManager.removeEmptyDirectoriesRecursively(baseURL:)(v87);

  v92 = *(_QWORD *)(v1 + 392);
  v91 = *(_QWORD *)(v1 + 400);
  v94 = *(_QWORD *)(v1 + 368);
  v93 = *(_QWORD *)(v1 + 376);
  v95 = v1;
  v96 = *(_QWORD *)(v1 + 360);
  v97 = *(_QWORD *)(v95 + 328);
  v98 = *(_QWORD *)(v95 + 336);
  v100 = *(_QWORD *)(v95 + 312);
  v99 = *(_QWORD *)(v95 + 320);
  v110 = *(_QWORD *)(v95 + 304);
  v112 = *(_QWORD *)(v95 + 272);
  v114 = *(_QWORD *)(v95 + 264);
  v115 = *(_QWORD *)(v95 + 248);
  v116 = *(_QWORD *)(v95 + 232);
  v118 = *(_QWORD *)(v95 + 224);
  v120 = *(_QWORD *)(v95 + 216);
  v122 = *(_QWORD *)(v95 + 208);
  v124 = *(_QWORD *)(v95 + 200);
  v126 = *(_QWORD *)(v95 + 192);
  v89(v91, v93);
  swift_task_dealloc(v91);
  swift_task_dealloc(v92);
  swift_task_dealloc(v94);
  swift_task_dealloc(v96);
  swift_task_dealloc(v98);
  swift_task_dealloc(v97);
  swift_task_dealloc(v99);
  swift_task_dealloc(v100);
  swift_task_dealloc(v110);
  swift_task_dealloc(v112);
  swift_task_dealloc(v114);
  swift_task_dealloc(v115);
  swift_task_dealloc(v116);
  swift_task_dealloc(v118);
  swift_task_dealloc(v120);
  swift_task_dealloc(v122);
  swift_task_dealloc(v124);
  swift_task_dealloc(v126);
  (*(void (**)(void))(v95 + 8))();
}

uint64_t sub_10006BCA0()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1[6] = v0;
  v2 = type metadata accessor for MemberSharingCircle(0);
  v1[7] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[8] = v3;
  v1[9] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for UUID(0);
  v1[10] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v1[11] = v5;
  v6 = (*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[12] = swift_task_alloc(v6);
  v1[13] = swift_task_alloc(v6);
  v7 = type metadata accessor for OwnerSharingCircle(0);
  v1[14] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v1[15] = v8;
  v1[16] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10006BD60, v0, 0);
}

uint64_t sub_10006BD60()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[6];
  v0[2] = _swiftEmptyArrayStorage;
  v2 = *(_QWORD *)(v1 + 112);
  v0[17] = v2;
  return swift_task_switch(sub_10006BD88, v2, 0);
}

uint64_t sub_10006BD88()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v2 = (_QWORD *)swift_task_alloc(v1);
  *(_QWORD *)(v0 + 144) = v2;
  v3 = sub_10001A9A8(&qword_1010EE100);
  *v2 = v0;
  v2[1] = sub_10006BE04;
  return unsafeBlocking<A>(_:)(v0 + 24, sub_100068004, *(_QWORD *)(v0 + 136), v3);
}

uint64_t sub_10006BE04()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 136);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 144));
  swift_release();
  return swift_task_switch(sub_10006BE60, v1, 0);
}

uint64_t sub_10006BE60()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[6];
  v0[19] = v0[3];
  return swift_task_switch(sub_10006BE7C, v1, 0);
}

uint64_t sub_10006BE7C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v13;

  v1 = *(_QWORD *)(v0 + 152);
  v2 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v0 + 160) = v2;
  if (v2)
  {
    v3 = *(_QWORD *)(v0 + 120);
    v4 = *(_QWORD *)(v0 + 128);
    v5 = *(_QWORD *)(v0 + 104);
    v6 = *(int *)(*(_QWORD *)(v0 + 112) + 20);
    *(_DWORD *)(v0 + 288) = v6;
    v7 = *(_DWORD *)(v3 + 80);
    *(_DWORD *)(v0 + 292) = v7;
    *(_QWORD *)(v0 + 168) = *(_QWORD *)(v3 + 72);
    *(_QWORD *)(v0 + 176) = 0;
    v8 = *(_QWORD *)(v0 + 80);
    v9 = *(_QWORD *)(v0 + 88);
    v10 = v4 + v6;
    sub_10005972C(v1 + ((v7 + 32) & ~(unint64_t)v7), v4, type metadata accessor for OwnerSharingCircle);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v5, v10, v8);
    sub_1000126B0(v4, type metadata accessor for OwnerSharingCircle);
    v11 = (_QWORD *)swift_task_alloc(dword_1010ECA94);
    *(_QWORD *)(v0 + 184) = v11;
    *v11 = v0;
    v11[1] = sub_10006BF90;
    return sub_10006D238(*(_QWORD *)(v0 + 104));
  }
  else
  {
    swift_bridgeObjectRelease();
    v13 = *(_QWORD *)(v0 + 136);
    *(_QWORD *)(v0 + 32) = _swiftEmptyArrayStorage;
    return swift_task_switch(sub_10006C528, v13, 0);
  }
}

uint64_t sub_10006BF90(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 184);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 48);
  *(_QWORD *)(*(_QWORD *)v1 + 192) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10006BFF0, v3, 0);
}

uint64_t sub_10006BFF0()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  uint64_t v5;
  id v6;
  Class isa;
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;

  v1 = *(void **)(v0 + 192);
  if (v1)
  {
    v2 = sub_10001A9A8(&qword_10111BE20);
    v3 = swift_allocObject(v2, 40, 7);
    *(_OWORD *)(v3 + 16) = xmmword_100E22D10;
    *(_QWORD *)(v3 + 32) = v1;
    specialized Array._endMutation()(v3);
    v4 = objc_allocWithZone((Class)SPItemSharingDataIntegrity);
    v5 = sub_10000F4A0(0, &qword_1010ECAA8, SPOwnedCircleDataIntegrity_ptr);
    v6 = v1;
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v8 = objc_msgSend(v4, "initWithOwnedCircles:memberCircles:", isa, 0);

    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 88) + 8))(*(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 80));
    v9 = objc_msgSend(v8, "ownedCircles");

    if (v9)
    {
      v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v9, v5);

      sub_1003028D0(v10);
    }
    v11 = *(_QWORD *)(v0 + 176) + 1;
    if (v11 == *(_QWORD *)(v0 + 160))
    {
      swift_bridgeObjectRelease();
      v12 = *(_QWORD *)(v0 + 136);
      *(_QWORD *)(v0 + 32) = _swiftEmptyArrayStorage;
      return swift_task_switch(sub_10006C528, v12, 0);
    }
    else
    {
      *(_QWORD *)(v0 + 176) = v11;
      v15 = *(_QWORD *)(v0 + 128);
      v16 = *(_QWORD *)(v0 + 104);
      v17 = *(_QWORD *)(v0 + 80);
      v18 = *(_QWORD *)(v0 + 88);
      v19 = v15 + *(int *)(v0 + 288);
      sub_10005972C(*(_QWORD *)(v0 + 152)+ ((*(unsigned __int8 *)(v0 + 292) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 292))+ *(_QWORD *)(v0 + 168) * v11, v15, type metadata accessor for OwnerSharingCircle);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 16))(v16, v19, v17);
      sub_1000126B0(v15, type metadata accessor for OwnerSharingCircle);
      v20 = (_QWORD *)swift_task_alloc(dword_1010ECA94);
      *(_QWORD *)(v0 + 184) = v20;
      *v20 = v0;
      v20[1] = sub_10006BF90;
      return sub_10006D238(*(_QWORD *)(v0 + 104));
    }
  }
  else
  {
    v14 = (_QWORD *)swift_task_alloc(dword_1010ECA9C);
    *(_QWORD *)(v0 + 200) = v14;
    *v14 = v0;
    v14[1] = sub_10006C260;
    return sub_10006DC04(*(_QWORD *)(v0 + 104));
  }
}

uint64_t sub_10006C260(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 200);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 48);
  *(_QWORD *)(*(_QWORD *)v1 + 208) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10006C2C0, v3, 0);
}

uint64_t sub_10006C2C0()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  id v5;
  Class isa;
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;

  v1 = *(void **)(v0 + 208);
  if (v1)
  {
    v2 = sub_10001A9A8(&qword_10111BE20);
    v3 = swift_allocObject(v2, 40, 7);
    *(_OWORD *)(v3 + 16) = xmmword_100E22D10;
    *(_QWORD *)(v3 + 32) = v1;
    specialized Array._endMutation()(v3);
    v4 = objc_allocWithZone((Class)SPItemSharingDataIntegrity);
    sub_10000F4A0(0, &qword_1010ECAA0, SPMemberCircleDataIntegrity_ptr);
    v5 = v1;
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v7 = objc_msgSend(v4, "initWithOwnedCircles:memberCircles:", 0, isa);

  }
  else
  {
    v7 = objc_msgSend(objc_allocWithZone((Class)SPItemSharingDataIntegrity), "initWithOwnedCircles:memberCircles:", 0, 0);
  }
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 88) + 8))(*(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 80));
  v8 = objc_msgSend(v7, "ownedCircles");

  if (v8)
  {
    v9 = sub_10000F4A0(0, &qword_1010ECAA8, SPOwnedCircleDataIntegrity_ptr);
    v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v8, v9);

    sub_1003028D0(v10);
  }
  v11 = *(_QWORD *)(v0 + 176) + 1;
  if (v11 == *(_QWORD *)(v0 + 160))
  {
    swift_bridgeObjectRelease();
    v12 = *(_QWORD *)(v0 + 136);
    *(_QWORD *)(v0 + 32) = _swiftEmptyArrayStorage;
    return swift_task_switch(sub_10006C528, v12, 0);
  }
  else
  {
    *(_QWORD *)(v0 + 176) = v11;
    v14 = *(_QWORD *)(v0 + 128);
    v15 = *(_QWORD *)(v0 + 104);
    v16 = *(_QWORD *)(v0 + 80);
    v17 = *(_QWORD *)(v0 + 88);
    v18 = v14 + *(int *)(v0 + 288);
    sub_10005972C(*(_QWORD *)(v0 + 152)+ ((*(unsigned __int8 *)(v0 + 292) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 292))+ *(_QWORD *)(v0 + 168) * v11, v14, type metadata accessor for OwnerSharingCircle);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16))(v15, v18, v16);
    sub_1000126B0(v14, type metadata accessor for OwnerSharingCircle);
    v19 = (_QWORD *)swift_task_alloc(dword_1010ECA94);
    *(_QWORD *)(v0 + 184) = v19;
    *v19 = v0;
    v19[1] = sub_10006BF90;
    return sub_10006D238(*(_QWORD *)(v0 + 104));
  }
}

uint64_t sub_10006C528()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v2 = (_QWORD *)swift_task_alloc(v1);
  *(_QWORD *)(v0 + 216) = v2;
  v3 = sub_10001A9A8(&qword_1010EC840);
  *v2 = v0;
  v2[1] = sub_10006C5A4;
  return unsafeBlocking<A>(_:)(v0 + 40, sub_10001ED30, *(_QWORD *)(v0 + 136), v3);
}

uint64_t sub_10006C5A4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 136);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 216));
  swift_release();
  return swift_task_switch(sub_10006C604, v1, 0);
}

uint64_t sub_10006C604()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[6];
  v0[28] = v0[5];
  return swift_task_switch(sub_10006C61C, v1, 0);
}

uint64_t sub_10006C61C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  Class isa;
  Class v19;
  id v20;

  v1 = *(_QWORD *)(v0 + 224);
  v2 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v0 + 232) = v2;
  if (v2)
  {
    v3 = *(_QWORD *)(v0 + 64);
    v4 = *(int *)(*(_QWORD *)(v0 + 56) + 20);
    *(_DWORD *)(v0 + 296) = v4;
    v5 = *(_DWORD *)(v3 + 80);
    *(_DWORD *)(v0 + 300) = v5;
    *(_QWORD *)(v0 + 240) = *(_QWORD *)(v3 + 72);
    *(_QWORD *)(v0 + 248) = 0;
    v7 = *(_QWORD *)(v0 + 88);
    v6 = *(_QWORD *)(v0 + 96);
    v8 = *(_QWORD *)(v0 + 72);
    v9 = *(_QWORD *)(v0 + 80);
    v10 = v8 + v4;
    sub_10005972C(v1 + ((v5 + 32) & ~(unint64_t)v5), v8, type metadata accessor for MemberSharingCircle);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v6, v10, v9);
    sub_1000126B0(v8, type metadata accessor for MemberSharingCircle);
    v11 = (_QWORD *)swift_task_alloc(dword_1010ECA94);
    *(_QWORD *)(v0 + 256) = v11;
    *v11 = v0;
    v11[1] = sub_10006C7F0;
    return sub_10006D238(*(_QWORD *)(v0 + 96));
  }
  else
  {
    swift_bridgeObjectRelease();
    v13 = *(_QWORD *)(v0 + 128);
    v14 = *(_QWORD *)(v0 + 96);
    v15 = *(_QWORD *)(v0 + 104);
    v16 = *(_QWORD *)(v0 + 72);
    v17 = objc_allocWithZone((Class)SPItemSharingDataIntegrity);
    sub_10000F4A0(0, &qword_1010ECAA8, SPOwnedCircleDataIntegrity_ptr);
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    sub_10000F4A0(0, &qword_1010ECAA0, SPMemberCircleDataIntegrity_ptr);
    v19 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v20 = objc_msgSend(v17, "initWithOwnedCircles:memberCircles:", isa, v19);

    swift_task_dealloc(v13);
    swift_task_dealloc(v15);
    swift_task_dealloc(v14);
    swift_task_dealloc(v16);
    return (*(uint64_t (**)(id))(v0 + 8))(v20);
  }
}

uint64_t sub_10006C7F0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 256);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 48);
  *(_QWORD *)(*(_QWORD *)v1 + 264) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10006C850, v3, 0);
}

uint64_t sub_10006C850()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  id v5;
  Class isa;
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  Class v17;
  Class v18;
  id v19;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;

  v1 = *(void **)(v0 + 264);
  if (v1)
  {
    v2 = sub_10001A9A8(&qword_10111BE20);
    v3 = swift_allocObject(v2, 40, 7);
    *(_OWORD *)(v3 + 16) = xmmword_100E22D10;
    *(_QWORD *)(v3 + 32) = v1;
    v28 = v3;
    specialized Array._endMutation()(v3);
    v4 = objc_allocWithZone((Class)SPItemSharingDataIntegrity);
    sub_10000F4A0(0, &qword_1010ECAA8, SPOwnedCircleDataIntegrity_ptr);
    v5 = v1;
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v7 = objc_msgSend(v4, "initWithOwnedCircles:memberCircles:", isa, 0, v28);

    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 88) + 8))(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 80));
    v8 = objc_msgSend(v7, "memberCircles");

    if (v8)
    {
      v9 = sub_10000F4A0(0, &qword_1010ECAA0, SPMemberCircleDataIntegrity_ptr);
      v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v8, v9);

      sub_1003028DC(v10);
    }
    v11 = *(_QWORD *)(v0 + 248) + 1;
    if (v11 == *(_QWORD *)(v0 + 232))
    {
      swift_bridgeObjectRelease();
      v12 = *(_QWORD *)(v0 + 128);
      v13 = *(_QWORD *)(v0 + 96);
      v14 = *(_QWORD *)(v0 + 104);
      v15 = *(_QWORD *)(v0 + 72);
      v16 = objc_allocWithZone((Class)SPItemSharingDataIntegrity);
      v17 = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      sub_10000F4A0(0, &qword_1010ECAA0, SPMemberCircleDataIntegrity_ptr);
      v18 = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      v19 = objc_msgSend(v16, "initWithOwnedCircles:memberCircles:", v17, v18);

      swift_task_dealloc(v12);
      swift_task_dealloc(v14);
      swift_task_dealloc(v13);
      swift_task_dealloc(v15);
      return (*(uint64_t (**)(id))(v0 + 8))(v19);
    }
    else
    {
      *(_QWORD *)(v0 + 248) = v11;
      v23 = *(_QWORD *)(v0 + 88);
      v22 = *(_QWORD *)(v0 + 96);
      v25 = *(_QWORD *)(v0 + 72);
      v24 = *(_QWORD *)(v0 + 80);
      v26 = v25 + *(int *)(v0 + 296);
      sub_10005972C(*(_QWORD *)(v0 + 224)+ ((*(unsigned __int8 *)(v0 + 300) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 300))+ *(_QWORD *)(v0 + 240) * v11, v25, type metadata accessor for MemberSharingCircle);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v23 + 16))(v22, v26, v24);
      sub_1000126B0(v25, type metadata accessor for MemberSharingCircle);
      v27 = (_QWORD *)swift_task_alloc(dword_1010ECA94);
      *(_QWORD *)(v0 + 256) = v27;
      *v27 = v0;
      v27[1] = sub_10006C7F0;
      return sub_10006D238(*(_QWORD *)(v0 + 96));
    }
  }
  else
  {
    v21 = (_QWORD *)swift_task_alloc(dword_1010ECA9C);
    *(_QWORD *)(v0 + 272) = v21;
    *v21 = v0;
    v21[1] = sub_10006CB78;
    return sub_10006DC04(*(_QWORD *)(v0 + 96));
  }
}

uint64_t sub_10006CB78(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 272);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 48);
  *(_QWORD *)(*(_QWORD *)v1 + 280) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10006CBD8, v3, 0);
}

uint64_t sub_10006CBD8()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  id v5;
  Class isa;
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  Class v17;
  Class v18;
  id v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;

  v1 = *(void **)(v0 + 280);
  if (v1)
  {
    v2 = sub_10001A9A8(&qword_10111BE20);
    v3 = swift_allocObject(v2, 40, 7);
    *(_OWORD *)(v3 + 16) = xmmword_100E22D10;
    *(_QWORD *)(v3 + 32) = v1;
    v27 = v3;
    specialized Array._endMutation()(v3);
    v4 = objc_allocWithZone((Class)SPItemSharingDataIntegrity);
    sub_10000F4A0(0, &qword_1010ECAA0, SPMemberCircleDataIntegrity_ptr);
    v5 = v1;
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v7 = objc_msgSend(v4, "initWithOwnedCircles:memberCircles:", 0, isa, v27);

  }
  else
  {
    v7 = objc_msgSend(objc_allocWithZone((Class)SPItemSharingDataIntegrity), "initWithOwnedCircles:memberCircles:", 0, 0);
  }
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 88) + 8))(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 80));
  v8 = objc_msgSend(v7, "memberCircles");

  if (v8)
  {
    v9 = sub_10000F4A0(0, &qword_1010ECAA0, SPMemberCircleDataIntegrity_ptr);
    v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v8, v9);

    sub_1003028DC(v10);
  }
  v11 = *(_QWORD *)(v0 + 248) + 1;
  if (v11 == *(_QWORD *)(v0 + 232))
  {
    swift_bridgeObjectRelease();
    v12 = *(_QWORD *)(v0 + 128);
    v13 = *(_QWORD *)(v0 + 96);
    v14 = *(_QWORD *)(v0 + 104);
    v15 = *(_QWORD *)(v0 + 72);
    v16 = objc_allocWithZone((Class)SPItemSharingDataIntegrity);
    sub_10000F4A0(0, &qword_1010ECAA8, SPOwnedCircleDataIntegrity_ptr);
    v17 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    sub_10000F4A0(0, &qword_1010ECAA0, SPMemberCircleDataIntegrity_ptr);
    v18 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v19 = objc_msgSend(v16, "initWithOwnedCircles:memberCircles:", v17, v18);

    swift_task_dealloc(v12);
    swift_task_dealloc(v14);
    swift_task_dealloc(v13);
    swift_task_dealloc(v15);
    return (*(uint64_t (**)(id))(v0 + 8))(v19);
  }
  else
  {
    *(_QWORD *)(v0 + 248) = v11;
    v22 = *(_QWORD *)(v0 + 88);
    v21 = *(_QWORD *)(v0 + 96);
    v24 = *(_QWORD *)(v0 + 72);
    v23 = *(_QWORD *)(v0 + 80);
    v25 = v24 + *(int *)(v0 + 296);
    sub_10005972C(*(_QWORD *)(v0 + 224)+ ((*(unsigned __int8 *)(v0 + 300) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 300))+ *(_QWORD *)(v0 + 240) * v11, v24, type metadata accessor for MemberSharingCircle);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v22 + 16))(v21, v25, v23);
    sub_1000126B0(v24, type metadata accessor for MemberSharingCircle);
    v26 = (_QWORD *)swift_task_alloc(dword_1010ECA94);
    *(_QWORD *)(v0 + 256) = v26;
    *v26 = v0;
    v26[1] = sub_10006C7F0;
    return sub_10006D238(*(_QWORD *)(v0 + 96));
  }
}

uint64_t sub_10006CEEC(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v4;

  v2[2] = a1;
  v2[3] = v1;
  v4 = (_QWORD *)swift_task_alloc(dword_1010ECA94);
  v2[4] = v4;
  *v4 = v2;
  v4[1] = sub_10006CF3C;
  return sub_10006D238(a1);
}

uint64_t sub_10006CF3C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 24);
  v2 = *(_QWORD *)(*(_QWORD *)v1 + 32);
  *(_QWORD *)(*(_QWORD *)v1 + 40) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10006CF98, v3, 0);
}

uint64_t sub_10006CF98()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  id v5;
  Class isa;
  id v7;
  _QWORD *v9;

  v1 = *(void **)(v0 + 40);
  if (v1)
  {
    v2 = sub_10001A9A8(&qword_10111BE20);
    v3 = swift_allocObject(v2, 40, 7);
    *(_OWORD *)(v3 + 16) = xmmword_100E22D10;
    *(_QWORD *)(v3 + 32) = v1;
    specialized Array._endMutation()(v3);
    v4 = objc_allocWithZone((Class)SPItemSharingDataIntegrity);
    sub_10000F4A0(0, &qword_1010ECAA8, SPOwnedCircleDataIntegrity_ptr);
    v5 = v1;
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v7 = objc_msgSend(v4, "initWithOwnedCircles:memberCircles:", isa, 0);

    return (*(uint64_t (**)(id))(v0 + 8))(v7);
  }
  else
  {
    v9 = (_QWORD *)swift_task_alloc(dword_1010ECA9C);
    *(_QWORD *)(v0 + 48) = v9;
    *v9 = v0;
    v9[1] = sub_10006D0C4;
    return sub_10006DC04(*(_QWORD *)(v0 + 16));
  }
}

uint64_t sub_10006D0C4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 48);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 24);
  *(_QWORD *)(*(_QWORD *)v1 + 56) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10006D124, v3, 0);
}

uint64_t sub_10006D124()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  id v5;
  Class isa;
  id v7;

  v1 = *(void **)(v0 + 56);
  if (!v1)
    return (*(uint64_t (**)(id))(v0 + 8))(objc_msgSend(objc_allocWithZone((Class)SPItemSharingDataIntegrity), "initWithOwnedCircles:memberCircles:", 0, 0));
  v2 = sub_10001A9A8(&qword_10111BE20);
  v3 = swift_allocObject(v2, 40, 7);
  *(_OWORD *)(v3 + 16) = xmmword_100E22D10;
  *(_QWORD *)(v3 + 32) = v1;
  specialized Array._endMutation()(v3);
  v4 = objc_allocWithZone((Class)SPItemSharingDataIntegrity);
  sub_10000F4A0(0, &qword_1010ECAA0, SPMemberCircleDataIntegrity_ptr);
  v5 = v1;
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v7 = objc_msgSend(v4, "initWithOwnedCircles:memberCircles:", 0, isa);

  return (*(uint64_t (**)(id))(v0 + 8))(v7);
}

uint64_t sub_10006D238(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2[4] = a1;
  v2[5] = v1;
  v3 = type metadata accessor for UUID(0);
  v2[6] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[7] = v4;
  v5 = *(_QWORD *)(v4 + 64);
  v2[8] = v5;
  v2[9] = swift_task_alloc((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10001A9A8(&qword_1010EE0E0);
  v2[10] = v6;
  v2[11] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for OwnerSharingCircle(0);
  v2[12] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v2[13] = v8;
  v2[14] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10006D2EC, v1, 0);
}

uint64_t sub_10006D2EC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 40) + 112);
  *(_QWORD *)(v0 + 120) = v1;
  return swift_task_switch(sub_10006D308, v1, 0);
}

uint64_t sub_10006D308()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v1 = v0[15];
  v3 = v0[8];
  v2 = v0[9];
  v4 = v0[6];
  v5 = v0[7];
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v5 + 16))(v2, v0[4], v4);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (v6 + 24) & ~v6;
  v8 = swift_allocObject(&unk_101052F80, v7 + v3, v6 | 7);
  v0[16] = v8;
  *(_QWORD *)(v8 + 16) = v1;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(v8 + v7, v2, v4);
  v9 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v10 = (_QWORD *)swift_task_alloc(v9);
  v0[17] = v10;
  *v10 = v0;
  v10[1] = sub_10006D3E0;
  return unsafeBlocking<A>(_:)(v0[11], sub_10007CC00, v8, v0[10]);
}

uint64_t sub_10006D3E0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 40);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 136));
  swift_release();
  return swift_task_switch(sub_10006D440, v1, 0);
}

uint64_t sub_10006D440()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  Swift::String v8;
  uint64_t v9;
  Swift::String v10;
  Swift::String v11;

  v1 = *(_QWORD *)(v0 + 96);
  v2 = *(_QWORD *)(v0 + 88);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 104) + 48))(v2, 1, v1) != 1)
  {
    v6 = *(_QWORD *)(v0 + 112);
    v7 = *(_QWORD *)(v0 + 48);
    sub_1000126EC(v2, v6, type metadata accessor for OwnerSharingCircle);
    *(_QWORD *)(v0 + 16) = 0;
    *(_QWORD *)(v0 + 24) = 0xE000000000000000;
    *(_BYTE *)(v0 + 264) = *(_BYTE *)(v6 + *(int *)(v1 + 28));
    _print_unlocked<A, B>(_:_:)(v0 + 264, v0 + 16, &type metadata for SharingCircleType, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    v8._countAndFlagsBits = 8250;
    v8._object = (void *)0xE200000000000000;
    String.append(_:)(v8);
    v9 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v10._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v7, v9);
    String.append(_:)(v10);
    swift_bridgeObjectRelease();
    v11._countAndFlagsBits = 8236;
    v11._object = (void *)0xE200000000000000;
    String.append(_:)(v11);
    __asm { BR              X10 }
  }
  sub_100004048(v2, &qword_1010EE0E0);
  v3 = *(_QWORD *)(v0 + 88);
  v4 = *(_QWORD *)(v0 + 72);
  swift_task_dealloc(*(_QWORD *)(v0 + 112));
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

uint64_t sub_10006D5D0()
{
  uint64_t v0;
  Swift::String v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  NSString v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  _QWORD *v9;

  v1._countAndFlagsBits = 0x657470656363612ELL;
  v2 = *(_QWORD *)(v0 + 112);
  v3 = *(_QWORD *)(v0 + 96);
  v1._object = (void *)0xE900000000000064;
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v4 = objc_allocWithZone((Class)SPDataIntegrityCheck);
  v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v0 + 144) = objc_msgSend(v4, "initWithValue:severity:", v5, 0);

  v6 = *(int *)(v3 + 32);
  *(_DWORD *)(v0 + 256) = v6;
  v7 = swift_bridgeObjectRetain(*(_QWORD *)(v2 + v6));
  v8 = sub_100508A54(v7);
  *(_QWORD *)(v0 + 152) = v8;
  swift_bridgeObjectRelease();
  v9 = (_QWORD *)swift_task_alloc(dword_1010ECB1C);
  *(_QWORD *)(v0 + 160) = v9;
  *v9 = v0;
  v9[1] = sub_10006D720;
  return sub_100073AB8(v8);
}

uint64_t sub_10006D720(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 160);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 40);
  *(_QWORD *)(*(_QWORD *)v1 + 168) = a1;
  swift_task_dealloc(v2);
  swift_release();
  return swift_task_switch(sub_10006D788, v3, 0);
}

uint64_t sub_10006D788()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = *(_QWORD *)(v0 + 112);
  v2 = v1 + *(int *)(*(_QWORD *)(v0 + 96) + 20);
  v3 = *(_QWORD *)(*(_QWORD *)(v1 + *(int *)(v0 + 256)) + 16);
  v4 = (_QWORD *)swift_task_alloc(dword_1010ECB24);
  *(_QWORD *)(v0 + 176) = v4;
  *v4 = v0;
  v4[1] = sub_10006D7FC;
  return sub_1000748A4(v2, v3);
}

uint64_t sub_10006D7FC(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v9;

  v2 = *(_QWORD *)(*v1 + 176);
  v3 = *(_QWORD *)(*v1 + 112);
  v4 = *(_QWORD *)(*v1 + 96);
  v9 = *v1;
  *(_QWORD *)(v9 + 184) = a1;
  swift_task_dealloc(v2);
  v5 = *(int *)(v4 + 24);
  *(_DWORD *)(v9 + 260) = v5;
  v6 = v3 + v5;
  v7 = (_QWORD *)swift_task_alloc(dword_1010ECADC);
  *(_QWORD *)(v9 + 192) = v7;
  *v7 = v9;
  v7[1] = sub_10006D88C;
  return sub_100072730(v6);
}

uint64_t sub_10006D88C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v7;

  v2 = *(_QWORD *)(*v1 + 192);
  v3 = *(int *)(*v1 + 260);
  v4 = *(_QWORD *)(*v1 + 112);
  v7 = *v1;
  *(_QWORD *)(v7 + 200) = a1;
  swift_task_dealloc(v2);
  v5 = (_QWORD *)swift_task_alloc(dword_1010ECAE4);
  *(_QWORD *)(v7 + 208) = v5;
  *v5 = v7;
  v5[1] = sub_10006D914;
  return sub_100072C0C(v4 + v3);
}

uint64_t sub_10006D914(uint64_t a1)
{
  uint64_t **v1;
  uint64_t v2;
  uint64_t **v3;
  uint64_t *v5;

  v2 = (*v1)[26];
  v5 = *v1;
  v5[27] = a1;
  swift_task_dealloc(v2);
  v3 = (uint64_t **)swift_task_alloc(dword_1010ECB2C);
  v5[28] = (uint64_t)v3;
  *v3 = v5;
  v3[1] = (uint64_t *)sub_10006D98C;
  return sub_10007576C(v5[14]);
}

uint64_t sub_10006D98C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v7;

  v2 = *(_QWORD *)(*v1 + 224);
  v3 = *(int *)(*v1 + 260);
  v4 = *(_QWORD *)(*v1 + 112);
  v7 = *v1;
  *(_QWORD *)(v7 + 232) = a1;
  swift_task_dealloc(v2);
  v5 = (_QWORD *)swift_task_alloc(dword_1010ECAF4);
  *(_QWORD *)(v7 + 240) = v5;
  *v5 = v7;
  v5[1] = sub_10006DA14;
  return sub_1000735F4(v4 + v3);
}

uint64_t sub_10006DA14(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 240);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 40);
  *(_QWORD *)(*(_QWORD *)v1 + 248) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10006DA74, v3, 0);
}

uint64_t sub_10006DA74()
{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  Class isa;
  Class v5;
  Class v6;
  Class v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  id v12;
  uint64_t v13;

  v1 = *(void **)(v0 + 200);
  v2 = *(void **)(v0 + 184);
  v3 = *(void **)(v0 + 144);
  v13 = *(_QWORD *)(v0 + 112);
  v12 = objc_allocWithZone((Class)SPOwnedCircleDataIntegrity);
  sub_10000F4A0(0, &qword_1010ECAF8, SPPeerTrustDataIntegrity_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  sub_10000F4A0(0, &qword_1010ECB00, SPDataIntegrityCheck_ptr);
  v5 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v6 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v7 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v8 = objc_msgSend(v12, "initWithCircleRecord:peerTrusts:sharedSecrets:keySyncRecord:observations:itemSharingKey:estimatedLocations:", v3, isa, v2, v1, v5, v6, v7);

  sub_1000126B0(v13, type metadata accessor for OwnerSharingCircle);
  v9 = *(_QWORD *)(v0 + 88);
  v10 = *(_QWORD *)(v0 + 72);
  swift_task_dealloc(*(_QWORD *)(v0 + 112));
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  return (*(uint64_t (**)(id))(v0 + 8))(v8);
}

uint64_t sub_10006DC04(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2[2] = a1;
  v2[3] = v1;
  v3 = sub_10001A9A8((uint64_t *)&unk_1010EE180);
  v2[4] = v3;
  v2[5] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for UUID(0);
  v2[6] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v2[7] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v2[8] = v6;
  v2[9] = swift_task_alloc((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10001A9A8((uint64_t *)&unk_101111440);
  v2[10] = v7;
  v2[11] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for MemberSharingCircle(0);
  v2[12] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v2[13] = v9;
  v2[14] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10006DCE0, v1, 0);
}

uint64_t sub_10006DCE0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 24) + 112);
  *(_QWORD *)(v0 + 120) = v1;
  return swift_task_switch(sub_10006DCFC, v1, 0);
}

uint64_t sub_10006DCFC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  _QWORD *v13;

  v1 = *(_QWORD *)(v0 + 120);
  v3 = *(_QWORD *)(v0 + 64);
  v2 = *(_QWORD *)(v0 + 72);
  v4 = *(_QWORD *)(v0 + 48);
  v5 = *(_QWORD *)(v0 + 56);
  v6 = *(_QWORD *)(v0 + 16);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  *(_QWORD *)(v0 + 128) = v7;
  v7(v2, v6, v4);
  LODWORD(v8) = *(_DWORD *)(v5 + 80);
  *(_DWORD *)(v0 + 336) = v8;
  v8 = v8;
  v9 = (v8 + 24) & ~v8;
  v10 = swift_allocObject(&unk_101052E18, v9 + v3, v8 | 7);
  *(_QWORD *)(v0 + 136) = v10;
  *(_QWORD *)(v10 + 16) = v1;
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32);
  *(_QWORD *)(v0 + 144) = v11;
  v11(v10 + v9, v2, v4);
  v12 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v13 = (_QWORD *)swift_task_alloc(v12);
  *(_QWORD *)(v0 + 152) = v13;
  *v13 = v0;
  v13[1] = sub_10006DDE4;
  return unsafeBlocking<A>(_:)(*(_QWORD *)(v0 + 88), sub_100067DE8, v10, *(_QWORD *)(v0 + 80));
}

uint64_t sub_10006DDE4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 24);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 152));
  swift_release();
  return swift_task_switch(sub_10006DE48, v1, 0);
}

uint64_t sub_10006DE48()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  Swift::String v9;

  v1 = *(_QWORD *)(v0 + 96);
  v2 = *(_QWORD *)(v0 + 88);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 104) + 48))(v2, 1, v1) != 1)
  {
    v7 = *(_QWORD *)(v0 + 112);
    v8 = sub_1000126EC(v2, v7, type metadata accessor for MemberSharingCircle);
    UUID.uuidString.getter(v8);
    v9._countAndFlagsBits = 2108704;
    v9._object = (void *)0xE300000000000000;
    String.append(_:)(v9);
    __asm { BR              X10 }
  }
  sub_100004048(v2, (uint64_t *)&unk_101111440);
  v3 = *(_QWORD *)(v0 + 88);
  v4 = *(_QWORD *)(v0 + 72);
  v5 = *(_QWORD *)(v0 + 40);
  swift_task_dealloc(*(_QWORD *)(v0 + 112));
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

uint64_t sub_10006DF58()
{
  uint64_t v0;
  Swift::String v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  NSString v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v1._countAndFlagsBits = 0x657470656363612ELL;
  v2 = *(_QWORD *)(v0 + 112);
  v3 = *(_QWORD *)(v0 + 96);
  v1._object = (void *)0xE900000000000064;
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v4 = objc_allocWithZone((Class)SPDataIntegrityCheck);
  v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v0 + 160) = objc_msgSend(v4, "initWithValue:severity:", v5, 0);

  v6 = *(int *)(v3 + 24);
  *(_DWORD *)(v0 + 340) = v6;
  v7 = v2 + v6;
  v8 = (_QWORD *)swift_task_alloc(dword_1010ECAB4);
  *(_QWORD *)(v0 + 168) = v8;
  *v8 = v0;
  v8[1] = sub_10006E088;
  return sub_100077088(v7);
}

uint64_t sub_10006E088(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v7;

  v2 = *(_QWORD *)(*v1 + 168);
  v3 = *(int *)(*v1 + 340);
  v4 = *(_QWORD *)(*v1 + 112);
  v7 = *v1;
  *(_QWORD *)(v7 + 176) = a1;
  swift_task_dealloc(v2);
  v5 = (_QWORD *)swift_task_alloc(dword_1010ECABC);
  *(_QWORD *)(v7 + 184) = v5;
  *v5 = v7;
  v5[1] = sub_10006E110;
  return sub_100077518(v4 + v3);
}

uint64_t sub_10006E110(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v7;

  v2 = *(_QWORD *)(*v1 + 184);
  v3 = *(int *)(*v1 + 340);
  v4 = *(_QWORD *)(*v1 + 112);
  v7 = *v1;
  *(_QWORD *)(v7 + 192) = a1;
  swift_task_dealloc(v2);
  v5 = (_QWORD *)swift_task_alloc(dword_1010ECAC4);
  *(_QWORD *)(v7 + 200) = v5;
  *v5 = v7;
  v5[1] = sub_10006E198;
  return sub_100077954(v4 + v3);
}

uint64_t sub_10006E198(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 200);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 24);
  *(_QWORD *)(*(_QWORD *)v1 + 208) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10006E1F8, v3, 0);
}

uint64_t sub_10006E1F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __n128 v3;
  uint64_t v4;
  _QWORD *v5;

  v1 = *(_QWORD *)(v0 + 112);
  v2 = *(int *)(*(_QWORD *)(v0 + 96) + 36);
  *(_DWORD *)(v0 + 344) = v2;
  v3 = swift_bridgeObjectRetain(*(_QWORD *)(v1 + v2));
  v4 = sub_100508A54(v3);
  *(_QWORD *)(v0 + 216) = v4;
  swift_bridgeObjectRelease();
  v5 = (_QWORD *)swift_task_alloc(dword_1010ECACC);
  *(_QWORD *)(v0 + 224) = v5;
  *v5 = v0;
  v5[1] = sub_10006E274;
  return sub_100077ED8(v4);
}

uint64_t sub_10006E274(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 224);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 120);
  *(_QWORD *)(*(_QWORD *)v1 + 232) = a1;
  swift_task_dealloc(v2);
  swift_release();
  return swift_task_switch(sub_10006E2DC, v3, 0);
}

uint64_t sub_10006E2DC()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 144);
  v2 = *(unsigned __int8 *)(v0 + 336);
  v3 = *(_QWORD *)(v0 + 120);
  v4 = *(_QWORD *)(v0 + 72);
  v5 = *(_QWORD *)(v0 + 48);
  v6 = (v2 + 24) & ~v2;
  v7 = *(_QWORD *)(v0 + 64) + v6;
  v8 = v2 | 7;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v0 + 128))(v4, *(_QWORD *)(v0 + 112) + *(int *)(v0 + 340), v5);
  v9 = swift_allocObject(&unk_101052E40, v7, v8);
  *(_QWORD *)(v0 + 240) = v9;
  *(_QWORD *)(v9 + 16) = v3;
  v1(v9 + v6, v4, v5);
  v10 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v11 = (_QWORD *)swift_task_alloc(v10);
  *(_QWORD *)(v0 + 248) = v11;
  *v11 = v0;
  v11[1] = sub_10006E3C8;
  return unsafeBlocking<A>(_:)(*(_QWORD *)(v0 + 40), sub_100067DF8, v9, *(_QWORD *)(v0 + 32));
}

uint64_t sub_10006E3C8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 24);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 248));
  swift_release();
  return swift_task_switch(sub_10006E428, v1, 0);
}

uint64_t sub_10006E428()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v1 = *(_QWORD *)(v0 + 40);
  v2 = type metadata accessor for SharedBeaconRecord(0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(v1, 1, v2) == 1)
  {
    sub_100004048(v1, (uint64_t *)&unk_1010EE180);
    v3 = 2;
  }
  else
  {
    v3 = *(_BYTE *)(v1 + *(int *)(v2 + 64));
    sub_1000126B0(v1, type metadata accessor for SharedBeaconRecord);
  }
  *(_BYTE *)(v0 + 348) = v3;
  v4 = *(_QWORD *)(v0 + 112);
  v5 = v4 + *(int *)(*(_QWORD *)(v0 + 96) + 28);
  v6 = *(_QWORD *)(*(_QWORD *)(v4 + *(int *)(v0 + 344)) + 16);
  v7 = (_QWORD *)swift_task_alloc(dword_1010ECAD4);
  *(_QWORD *)(v0 + 256) = v7;
  *v7 = v0;
  v7[1] = sub_10006E504;
  return sub_100078CC4(v5, v6, v3);
}

uint64_t sub_10006E504(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v7;

  v2 = *(_QWORD *)(*v1 + 256);
  v3 = *(int *)(*v1 + 340);
  v4 = *(_QWORD *)(*v1 + 112);
  v7 = *v1;
  *(_QWORD *)(v7 + 264) = a1;
  swift_task_dealloc(v2);
  v5 = (_QWORD *)swift_task_alloc(dword_1010ECADC);
  *(_QWORD *)(v7 + 272) = v5;
  *v5 = v7;
  v5[1] = sub_10006E58C;
  return sub_100072730(v4 + v3);
}

uint64_t sub_10006E58C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v7;

  v2 = *(_QWORD *)(*v1 + 272);
  v3 = *(int *)(*v1 + 340);
  v4 = *(_QWORD *)(*v1 + 112);
  v7 = *v1;
  *(_QWORD *)(v7 + 280) = a1;
  swift_task_dealloc(v2);
  v5 = (_QWORD *)swift_task_alloc(dword_1010ECAE4);
  *(_QWORD *)(v7 + 288) = v5;
  *v5 = v7;
  v5[1] = sub_10006E614;
  return sub_100072C0C(v4 + v3);
}

uint64_t sub_10006E614(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v7;

  v2 = *(_QWORD *)(*v1 + 288);
  v3 = *(int *)(*v1 + 340);
  v4 = *(_QWORD *)(*v1 + 112);
  v7 = *v1;
  *(_QWORD *)(v7 + 296) = a1;
  swift_task_dealloc(v2);
  v5 = (_QWORD *)swift_task_alloc(dword_1010ECAEC);
  *(_QWORD *)(v7 + 304) = v5;
  *v5 = v7;
  v5[1] = sub_10006E6A0;
  return sub_100079BB8(v4 + v3, *(_BYTE *)(v7 + 348));
}

uint64_t sub_10006E6A0(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v7;

  v2 = *(_QWORD *)(*v1 + 304);
  v3 = *(int *)(*v1 + 340);
  v4 = *(_QWORD *)(*v1 + 112);
  v7 = *v1;
  *(_QWORD *)(v7 + 312) = a1;
  swift_task_dealloc(v2);
  v5 = (_QWORD *)swift_task_alloc(dword_1010ECAF4);
  *(_QWORD *)(v7 + 320) = v5;
  *v5 = v7;
  v5[1] = sub_10006E728;
  return sub_1000735F4(v4 + v3);
}

uint64_t sub_10006E728(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 320);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 24);
  *(_QWORD *)(*(_QWORD *)v1 + 328) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10006E788, v3, 0);
}

uint64_t sub_10006E788()
{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v1 = *(void **)(v0 + 280);
  v2 = *(void **)(v0 + 264);
  v3 = *(_QWORD *)(v0 + 232);
  v4 = *(void **)(v0 + 208);
  v5 = *(void **)(v0 + 192);
  v6 = *(void **)(v0 + 176);
  v7 = *(void **)(v0 + 160);
  v13 = *(_QWORD *)(v0 + 112);
  sub_10000F4A0(0, &qword_1010ECAA0, SPMemberCircleDataIntegrity_ptr);
  v8 = sub_10007AA2C(v7, v6, v5, v4, v3, v2, v1);
  sub_1000126B0(v13, type metadata accessor for MemberSharingCircle);
  v9 = *(_QWORD *)(v0 + 88);
  v10 = *(_QWORD *)(v0 + 72);
  v11 = *(_QWORD *)(v0 + 40);
  swift_task_dealloc(*(_QWORD *)(v0 + 112));
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  return (*(uint64_t (**)(id))(v0 + 8))(v8);
}

uint64_t sub_10006E88C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;

  v1[38] = v0;
  v2 = sub_10001A9A8(&qword_101109410);
  v1[39] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[40] = v3;
  v1[41] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_10001A9A8(&qword_1010ECA58);
  v1[42] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v1[43] = v5;
  v1[44] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for BeaconNamingRecord(0);
  v1[45] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v1[46] = v7;
  v1[47] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for SharedBeaconRecord(0);
  v1[48] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v1[49] = v9;
  v1[50] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for KeySyncRecord(0);
  v1[51] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v1[52] = v11;
  v1[53] = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for SharingCircleSecret(0);
  v1[54] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v1[55] = v13;
  v1[56] = swift_task_alloc((*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for MemberPeerTrust(0);
  v1[57] = v14;
  v15 = *(_QWORD *)(v14 - 8);
  v1[58] = v15;
  v1[59] = swift_task_alloc((*(_QWORD *)(v15 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for OwnerPeerTrust(0);
  v1[60] = v16;
  v17 = *(_QWORD *)(v16 - 8);
  v1[61] = v17;
  v1[62] = swift_task_alloc((*(_QWORD *)(v17 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v1[29] = _swiftEmptyArrayStorage;
  v18 = (_QWORD *)swift_task_alloc(dword_1010EC974);
  v1[63] = v18;
  *v18 = v1;
  v18[1] = sub_10006EA34;
  return sub_1000702BC((uint64_t)(v1 + 2));
}

uint64_t sub_10006EA34()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  _OWORD *v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t (*v8)();

  v2 = *v1;
  v3 = (_OWORD *)(*v1 + 520);
  v4 = *(_QWORD *)(*v1 + 504);
  *(_QWORD *)(v2 + 512) = v0;
  v5 = *(_OWORD *)(v2 + 32);
  *v3 = *(_OWORD *)(v2 + 16);
  v3[1] = v5;
  v6 = *(_OWORD *)(v2 + 64);
  v3[2] = *(_OWORD *)(v2 + 48);
  v3[3] = v6;
  *(_QWORD *)(v2 + 584) = *(_QWORD *)(v2 + 80);
  swift_task_dealloc(v4);
  v7 = *(_QWORD *)(v2 + 304);
  if (v0)
  {
    swift_bridgeObjectRelease();
    v8 = sub_10007021C;
  }
  else
  {
    v8 = sub_10006EAC4;
  }
  return swift_task_switch(v8, v7, 0);
}

uint64_t sub_10006EAC4()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  id v16;
  NSString v17;
  Class isa;
  id v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  _QWORD *v37;
  id v38;
  NSString v39;
  Class v40;
  id v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  Swift::String v56;
  Swift::String v57;
  unint64_t v58;
  unint64_t v59;
  _QWORD *v60;
  id v61;
  NSString v62;
  Class v63;
  id v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  _QWORD *v82;
  id v83;
  NSString v84;
  Class v85;
  id v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  int64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  _QWORD *v104;
  id v105;
  NSString v106;
  Class v107;
  id v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  int64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  Swift::String v123;
  Swift::String v124;
  unint64_t v125;
  unint64_t v126;
  _QWORD *v127;
  id v128;
  NSString v129;
  Class v130;
  id v131;
  uint64_t v132;
  unint64_t v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  int64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  Swift::String v145;
  Swift::String v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t v155;
  unint64_t v156;
  _QWORD *v157;
  id v158;
  NSString v159;
  Class v160;
  id v161;
  uint64_t v162;
  unint64_t v163;
  unint64_t v164;
  uint64_t v165;
  uint64_t v166;
  int64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  Swift::String v174;
  Swift::String v175;
  unint64_t v176;
  unint64_t v177;
  _QWORD *v178;
  id v179;
  NSString v180;
  Class v181;
  id v182;
  uint64_t v183;
  unint64_t v184;
  unint64_t v185;
  uint64_t v186;
  int64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  Swift::String v195;
  Swift::String v196;
  unint64_t v197;
  unint64_t v198;
  _QWORD *v199;
  id v200;
  NSString v201;
  Class v202;
  id v203;
  uint64_t v204;
  unint64_t v205;
  unint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  id v214;
  Class v215;
  id v216;
  _QWORD *v218;
  uint64_t v219;
  _OWORD *v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;

  v1 = (_QWORD *)(v0 + 232);
  v2 = *(_QWORD *)(v0 + 520);
  v218 = (_QWORD *)(v0 + 232);
  if (*(_QWORD *)(v2 + 16))
  {
    *(_QWORD *)(v0 + 272) = *(_QWORD *)(v0 + 480);
    v3 = sub_10001A9A8(&qword_1010ECA60);
    String.init<A>(describing:)(v0 + 272, v3);
    v4 = *(_QWORD *)(v2 + 16);
    if (v4)
    {
      v5 = *(_QWORD *)(v0 + 520);
      v6 = *(_QWORD *)(v0 + 488);
      sub_10009A2F4(0, v4, 0);
      v7 = v5 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
      v224 = *(_QWORD *)(v6 + 72);
      do
      {
        v8 = *(_QWORD *)(v0 + 496);
        v9 = sub_10005972C(v7, v8, type metadata accessor for OwnerPeerTrust);
        v10 = UUID.uuidString.getter(v9);
        v12 = v11;
        sub_1000126B0(v8, type metadata accessor for OwnerPeerTrust);
        if ((swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage) & 1) == 0)
          sub_10009A2F4(0, _swiftEmptyArrayStorage[2] + 1, 1);
        v14 = _swiftEmptyArrayStorage[2];
        v13 = _swiftEmptyArrayStorage[3];
        if (v14 >= v13 >> 1)
          sub_10009A2F4(v13 > 1, v14 + 1, 1);
        _swiftEmptyArrayStorage[2] = v14 + 1;
        v15 = &_swiftEmptyArrayStorage[2 * v14];
        v15[4] = v10;
        v15[5] = v12;
        v7 += v224;
        --v4;
      }
      while (v4);
      v1 = (_QWORD *)(v0 + 232);
    }
    v16 = objc_allocWithZone((Class)SPOrphanedRecords);
    v17 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v19 = objc_msgSend(v16, "initWithRecordType:records:", v17, isa);

    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v20);
    v22 = *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    v21 = *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x18);
    if (v22 >= v21 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v21 > 1, v22 + 1, 1);
    v23 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v22, v19);
    specialized Array._endMutation()(v23);
  }
  v24 = *(_QWORD *)(v0 + 528);
  if (*(_QWORD *)(v24 + 16))
  {
    *(_QWORD *)(v0 + 248) = *(_QWORD *)(v0 + 456);
    v25 = sub_10001A9A8(&qword_1010ECA68);
    String.init<A>(describing:)(v0 + 248, v25);
    v26 = *(_QWORD *)(v24 + 16);
    if (v26)
    {
      v27 = *(_QWORD *)(v0 + 528);
      v28 = *(_QWORD *)(v0 + 464);
      sub_10009A2F4(0, v26, 0);
      v29 = v27 + ((*(unsigned __int8 *)(v28 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v28 + 80));
      v225 = *(_QWORD *)(v28 + 72);
      do
      {
        v30 = *(_QWORD *)(v0 + 472);
        v31 = sub_10005972C(v29, v30, type metadata accessor for MemberPeerTrust);
        v32 = UUID.uuidString.getter(v31);
        v34 = v33;
        sub_1000126B0(v30, type metadata accessor for MemberPeerTrust);
        if ((swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage) & 1) == 0)
          sub_10009A2F4(0, _swiftEmptyArrayStorage[2] + 1, 1);
        v36 = _swiftEmptyArrayStorage[2];
        v35 = _swiftEmptyArrayStorage[3];
        if (v36 >= v35 >> 1)
          sub_10009A2F4(v35 > 1, v36 + 1, 1);
        _swiftEmptyArrayStorage[2] = v36 + 1;
        v37 = &_swiftEmptyArrayStorage[2 * v36];
        v37[4] = v32;
        v37[5] = v34;
        v29 += v225;
        --v26;
      }
      while (v26);
      v1 = (_QWORD *)(v0 + 232);
    }
    v38 = objc_allocWithZone((Class)SPOrphanedRecords);
    v39 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    v40 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v41 = objc_msgSend(v38, "initWithRecordType:records:", v39, v40);

    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v42);
    v44 = *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    v43 = *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x18);
    if (v44 >= v43 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v43 > 1, v44 + 1, 1);
    v45 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v44, v41);
    specialized Array._endMutation()(v45);
  }
  v46 = *(_QWORD *)(v0 + 536);
  if (*(_QWORD *)(v46 + 16))
  {
    *(_QWORD *)(v0 + 240) = *(_QWORD *)(v0 + 432);
    v47 = sub_10001A9A8(&qword_101111760);
    String.init<A>(describing:)(v0 + 240, v47);
    v48 = *(_QWORD *)(v46 + 16);
    if (v48)
    {
      v49 = *(_QWORD *)(v0 + 536);
      v50 = *(_QWORD *)(v0 + 440);
      sub_10009A2F4(0, v48, 0);
      v51 = v49 + ((*(unsigned __int8 *)(v50 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v50 + 80));
      v230 = *(_QWORD *)(v50 + 72);
      do
      {
        v52 = *(_QWORD *)(v0 + 448);
        sub_10005972C(v51, v52, type metadata accessor for SharingCircleSecret);
        v53 = type metadata accessor for UUID(0);
        v54 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v234 = dispatch thunk of CustomStringConvertible.description.getter(v53, v54);
        v238 = v55;
        v56._countAndFlagsBits = 0x29656C6372696328;
        v56._object = (void *)0xEA0000000000203ALL;
        String.append(_:)(v56);
        v57._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v53, v54);
        String.append(_:)(v57);
        swift_bridgeObjectRelease();
        sub_1000126B0(v52, type metadata accessor for SharingCircleSecret);
        if ((swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage) & 1) == 0)
          sub_10009A2F4(0, _swiftEmptyArrayStorage[2] + 1, 1);
        v59 = _swiftEmptyArrayStorage[2];
        v58 = _swiftEmptyArrayStorage[3];
        if (v59 >= v58 >> 1)
          sub_10009A2F4(v58 > 1, v59 + 1, 1);
        _swiftEmptyArrayStorage[2] = v59 + 1;
        v60 = &_swiftEmptyArrayStorage[2 * v59];
        v60[4] = v234;
        v60[5] = v238;
        v51 += v230;
        --v48;
      }
      while (v48);
      v1 = (_QWORD *)(v0 + 232);
    }
    v61 = objc_allocWithZone((Class)SPOrphanedRecords);
    v62 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    v63 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v64 = objc_msgSend(v61, "initWithRecordType:records:", v62, v63);

    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v65);
    v67 = *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    v66 = *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x18);
    if (v67 >= v66 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v66 > 1, v67 + 1, 1);
    v68 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v67, v64);
    specialized Array._endMutation()(v68);
  }
  v69 = *(_QWORD *)(v0 + 544);
  if (*(_QWORD *)(v69 + 16))
  {
    *(_QWORD *)(v0 + 208) = *(_QWORD *)(v0 + 408);
    v70 = sub_10001A9A8(&qword_1010ECA70);
    String.init<A>(describing:)(v0 + 208, v70);
    v71 = *(_QWORD *)(v69 + 16);
    if (v71)
    {
      v72 = *(_QWORD *)(v0 + 544);
      v73 = *(_QWORD *)(v0 + 416);
      sub_10009A2F4(0, v71, 0);
      v74 = v72 + ((*(unsigned __int8 *)(v73 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v73 + 80));
      v231 = *(_QWORD *)(v73 + 72);
      do
      {
        v75 = *(_QWORD *)(v0 + 424);
        v76 = sub_10005972C(v74, v75, type metadata accessor for KeySyncRecord);
        v77 = UUID.uuidString.getter(v76);
        v79 = v78;
        sub_1000126B0(v75, type metadata accessor for KeySyncRecord);
        if ((swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage) & 1) == 0)
          sub_10009A2F4(0, _swiftEmptyArrayStorage[2] + 1, 1);
        v81 = _swiftEmptyArrayStorage[2];
        v80 = _swiftEmptyArrayStorage[3];
        if (v81 >= v80 >> 1)
          sub_10009A2F4(v80 > 1, v81 + 1, 1);
        _swiftEmptyArrayStorage[2] = v81 + 1;
        v82 = &_swiftEmptyArrayStorage[2 * v81];
        v82[4] = v77;
        v82[5] = v79;
        v74 += v231;
        --v71;
      }
      while (v71);
      v1 = (_QWORD *)(v0 + 232);
    }
    v83 = objc_allocWithZone((Class)SPOrphanedRecords);
    v84 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    v85 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v86 = objc_msgSend(v83, "initWithRecordType:records:", v84, v85);

    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v87);
    v89 = *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    v88 = *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x18);
    if (v89 >= v88 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v88 > 1, v89 + 1, 1);
    v90 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v89, v86);
    specialized Array._endMutation()(v90);
  }
  v91 = *(_QWORD *)(v0 + 552);
  if (*(_QWORD *)(v91 + 16))
  {
    *(_QWORD *)(v0 + 216) = *(_QWORD *)(v0 + 384);
    v92 = sub_10001A9A8(&qword_1010ECA78);
    String.init<A>(describing:)(v0 + 216, v92);
    v93 = *(_QWORD *)(v91 + 16);
    if (v93)
    {
      v94 = *(_QWORD *)(v0 + 552);
      v95 = *(_QWORD *)(v0 + 392);
      sub_10009A2F4(0, v93, 0);
      v96 = v94 + ((*(unsigned __int8 *)(v95 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v95 + 80));
      v226 = *(_QWORD *)(v95 + 72);
      do
      {
        v97 = *(_QWORD *)(v0 + 400);
        v98 = sub_10005972C(v96, v97, type metadata accessor for SharedBeaconRecord);
        v99 = UUID.uuidString.getter(v98);
        v101 = v100;
        sub_1000126B0(v97, type metadata accessor for SharedBeaconRecord);
        if ((swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage) & 1) == 0)
          sub_10009A2F4(0, _swiftEmptyArrayStorage[2] + 1, 1);
        v103 = _swiftEmptyArrayStorage[2];
        v102 = _swiftEmptyArrayStorage[3];
        if (v103 >= v102 >> 1)
          sub_10009A2F4(v102 > 1, v103 + 1, 1);
        _swiftEmptyArrayStorage[2] = v103 + 1;
        v104 = &_swiftEmptyArrayStorage[2 * v103];
        v104[4] = v99;
        v104[5] = v101;
        v96 += v226;
        --v93;
      }
      while (v93);
      v1 = (_QWORD *)(v0 + 232);
    }
    v105 = objc_allocWithZone((Class)SPOrphanedRecords);
    v106 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    v107 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v108 = objc_msgSend(v105, "initWithRecordType:records:", v106, v107);

    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v109);
    v111 = *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    v110 = *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x18);
    if (v111 >= v110 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v110 > 1, v111 + 1, 1);
    v112 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v111, v108);
    specialized Array._endMutation()(v112);
  }
  v113 = *(_QWORD *)(v0 + 560);
  if (*(_QWORD *)(v113 + 16))
  {
    *(_QWORD *)(v0 + 224) = *(_QWORD *)(v0 + 360);
    v114 = sub_10001A9A8(&qword_1010ECA80);
    String.init<A>(describing:)(v0 + 224, v114);
    v115 = *(_QWORD *)(v113 + 16);
    if (v115)
    {
      v116 = *(_QWORD *)(v0 + 560);
      v117 = *(_QWORD *)(v0 + 368);
      sub_10009A2F4(0, v115, 0);
      v118 = v116 + ((*(unsigned __int8 *)(v117 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v117 + 80));
      v232 = *(_QWORD *)(v117 + 72);
      do
      {
        v119 = *(_QWORD *)(v0 + 376);
        sub_10005972C(v118, v119, type metadata accessor for BeaconNamingRecord);
        v120 = type metadata accessor for UUID(0);
        v121 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v235 = dispatch thunk of CustomStringConvertible.description.getter(v120, v121);
        v239 = v122;
        v123._countAndFlagsBits = 0x296E6F6361656228;
        v123._object = (void *)0xEA0000000000203ALL;
        String.append(_:)(v123);
        v124._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v120, v121);
        String.append(_:)(v124);
        swift_bridgeObjectRelease();
        sub_1000126B0(v119, type metadata accessor for BeaconNamingRecord);
        if ((swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage) & 1) == 0)
          sub_10009A2F4(0, _swiftEmptyArrayStorage[2] + 1, 1);
        v126 = _swiftEmptyArrayStorage[2];
        v125 = _swiftEmptyArrayStorage[3];
        if (v126 >= v125 >> 1)
          sub_10009A2F4(v125 > 1, v126 + 1, 1);
        _swiftEmptyArrayStorage[2] = v126 + 1;
        v127 = &_swiftEmptyArrayStorage[2 * v126];
        v127[4] = v235;
        v127[5] = v239;
        v118 += v232;
        --v115;
      }
      while (v115);
      v1 = (_QWORD *)(v0 + 232);
    }
    v128 = objc_allocWithZone((Class)SPOrphanedRecords);
    v129 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    v130 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v131 = objc_msgSend(v128, "initWithRecordType:records:", v129, v130);

    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v132);
    v134 = *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    v133 = *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x18);
    if (v134 >= v133 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v133 > 1, v134 + 1, 1);
    v135 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v134, v131);
    specialized Array._endMutation()(v135);
  }
  v136 = *(_QWORD *)(v0 + 568);
  if (*(_QWORD *)(v136 + 16))
  {
    *(_QWORD *)(v0 + 296) = &type metadata for KeyDropBeaconAttributes;
    v137 = sub_10001A9A8(&qword_1010ECA88);
    String.init<A>(describing:)(v0 + 296, v137);
    v138 = *(_QWORD *)(v136 + 16);
    if (v138)
    {
      v139 = *(_QWORD *)(v0 + 568);
      v140 = *(_QWORD *)(v0 + 344);
      v227 = *(_QWORD *)(v0 + 336);
      sub_10009A2F4(0, v138, 0);
      v141 = v139 + ((*(unsigned __int8 *)(v140 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v140 + 80));
      v221 = *(_QWORD *)(v140 + 72);
      do
      {
        v142 = *(_QWORD *)(v0 + 352);
        sub_10000F9B8(v141, v142, &qword_1010ECA58);
        *(_QWORD *)(v0 + 192) = 0;
        *(_QWORD *)(v0 + 200) = 0xE000000000000000;
        v143 = type metadata accessor for UUID(0);
        v144 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v145._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v143, v144);
        String.append(_:)(v145);
        swift_bridgeObjectRelease();
        v146._countAndFlagsBits = 0x296E6F6361656228;
        v146._object = (void *)0xEA0000000000203ALL;
        String.append(_:)(v146);
        v147 = v142 + *(int *)(v227 + 48);
        v148 = *(_QWORD *)(v147 + 8);
        v149 = *(_QWORD *)(v147 + 48);
        v150 = *(_OWORD *)(v147 + 16);
        v151 = *(_OWORD *)(v147 + 32);
        v152 = *(_OWORD *)(v147 + 56);
        *(_QWORD *)(v0 + 88) = *(_QWORD *)v147;
        *(_QWORD *)(v0 + 96) = v148;
        *(_OWORD *)(v0 + 104) = v150;
        *(_OWORD *)(v0 + 120) = v151;
        *(_QWORD *)(v0 + 136) = v149;
        *(_OWORD *)(v0 + 144) = v152;
        _print_unlocked<A, B>(_:_:)(v0 + 88, v0 + 192, &type metadata for KeyDropBeaconAttributes, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
        v154 = *(_QWORD *)(v0 + 192);
        v153 = *(_QWORD *)(v0 + 200);
        sub_100004048(v142, &qword_1010ECA58);
        if ((swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage) & 1) == 0)
          sub_10009A2F4(0, _swiftEmptyArrayStorage[2] + 1, 1);
        v156 = _swiftEmptyArrayStorage[2];
        v155 = _swiftEmptyArrayStorage[3];
        if (v156 >= v155 >> 1)
          sub_10009A2F4(v155 > 1, v156 + 1, 1);
        _swiftEmptyArrayStorage[2] = v156 + 1;
        v157 = &_swiftEmptyArrayStorage[2 * v156];
        v157[4] = v154;
        v157[5] = v153;
        v141 += v221;
        --v138;
      }
      while (v138);
      v1 = (_QWORD *)(v0 + 232);
    }
    v158 = objc_allocWithZone((Class)SPOrphanedRecords);
    v159 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    v160 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v161 = objc_msgSend(v158, "initWithRecordType:records:", v159, v160);

    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v162);
    v164 = *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    v163 = *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x18);
    if (v164 >= v163 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v163 > 1, v164 + 1, 1);
    v165 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v164, v161);
    specialized Array._endMutation()(v165);
  }
  v166 = *(_QWORD *)(v0 + 576);
  v167 = *(_QWORD *)(v166 + 16);
  if (v167)
  {
    v168 = *(_QWORD *)(v0 + 320);
    v222 = *(_QWORD *)(v0 + 312);
    sub_10009A2F4(0, v167, 0);
    v169 = v166 + ((*(unsigned __int8 *)(v168 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v168 + 80));
    v219 = *(_QWORD *)(v168 + 72);
    do
    {
      v170 = *(_QWORD *)(v0 + 328);
      sub_10000F9B8(v169, v170, &qword_101109410);
      v171 = type metadata accessor for UUID(0);
      v172 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v236 = dispatch thunk of CustomStringConvertible.description.getter(v171, v172);
      v240 = v173;
      v174._countAndFlagsBits = 0x296E6F6361656228;
      v174._object = (void *)0xEA0000000000203ALL;
      String.append(_:)(v174);
      *(_OWORD *)(v0 + 256) = *(_OWORD *)(v170 + *(int *)(v222 + 48));
      *(_QWORD *)(v0 + 176) = 0;
      *(_QWORD *)(v0 + 184) = 0xE000000000000000;
      _print_unlocked<A, B>(_:_:)(v0 + 256, v0 + 176, &type metadata for UInt64, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
      v175._countAndFlagsBits = 3026478;
      v175._object = (void *)0xE300000000000000;
      String.append(_:)(v175);
      _print_unlocked<A, B>(_:_:)(v0 + 264, v0 + 176, &type metadata for UInt64, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
      String.append(_:)(*(Swift::String *)(v0 + 176));
      swift_bridgeObjectRelease();
      sub_100004048(v170, &qword_101109410);
      if ((swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage) & 1) == 0)
        sub_10009A2F4(0, _swiftEmptyArrayStorage[2] + 1, 1);
      v177 = _swiftEmptyArrayStorage[2];
      v176 = _swiftEmptyArrayStorage[3];
      if (v177 >= v176 >> 1)
        sub_10009A2F4(v176 > 1, v177 + 1, 1);
      _swiftEmptyArrayStorage[2] = v177 + 1;
      v178 = &_swiftEmptyArrayStorage[2 * v177];
      v178[4] = v236;
      v178[5] = v240;
      v169 += v219;
      --v167;
    }
    while (v167);
    v179 = objc_allocWithZone((Class)SPOrphanedRecords);
    v180 = String._bridgeToObjectiveC()();
    v181 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v182 = objc_msgSend(v179, "initWithRecordType:records:", v180, v181);

    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v183);
    v185 = *(_QWORD *)((*v218 & 0xFFFFFFFFFFFFFF8) + 0x10);
    v184 = *(_QWORD *)((*v218 & 0xFFFFFFFFFFFFFF8) + 0x18);
    if (v185 >= v184 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v184 > 1, v185 + 1, 1);
    v186 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v185, v182);
    specialized Array._endMutation()(v186);
  }
  if (*(_QWORD *)(*(_QWORD *)(v0 + 584) + 16))
  {
    v187 = *(_QWORD *)(v166 + 16);
    v188 = *(_QWORD *)(v0 + 576);
    if (v187)
    {
      v220 = (_OWORD *)(v0 + 280);
      v189 = *(_QWORD *)(v0 + 320);
      v228 = *(_QWORD *)(v0 + 312);
      sub_10009A2F4(0, v187, 0);
      v190 = v188 + ((*(unsigned __int8 *)(v189 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v189 + 80));
      v223 = *(_QWORD *)(v189 + 72);
      do
      {
        v191 = *(_QWORD *)(v0 + 328);
        sub_10000F9B8(v190, v191, &qword_101109410);
        v192 = type metadata accessor for UUID(0);
        v193 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v237 = dispatch thunk of CustomStringConvertible.description.getter(v192, v193);
        v241 = v194;
        v195._countAndFlagsBits = 0x296E6F6361656228;
        v195._object = (void *)0xEA0000000000203ALL;
        String.append(_:)(v195);
        *v220 = *(_OWORD *)(v191 + *(int *)(v228 + 48));
        *(_QWORD *)(v0 + 160) = 0;
        *(_QWORD *)(v0 + 168) = 0xE000000000000000;
        _print_unlocked<A, B>(_:_:)(v220, v0 + 160, &type metadata for UInt64, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
        v196._countAndFlagsBits = 3026478;
        v196._object = (void *)0xE300000000000000;
        String.append(_:)(v196);
        _print_unlocked<A, B>(_:_:)(v0 + 288, v0 + 160, &type metadata for UInt64, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
        String.append(_:)(*(Swift::String *)(v0 + 160));
        swift_bridgeObjectRelease();
        sub_100004048(v191, &qword_101109410);
        if ((swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage) & 1) == 0)
          sub_10009A2F4(0, _swiftEmptyArrayStorage[2] + 1, 1);
        v198 = _swiftEmptyArrayStorage[2];
        v197 = _swiftEmptyArrayStorage[3];
        if (v198 >= v197 >> 1)
          sub_10009A2F4(v197 > 1, v198 + 1, 1);
        _swiftEmptyArrayStorage[2] = v198 + 1;
        v199 = &_swiftEmptyArrayStorage[2 * v198];
        v199[4] = v237;
        v199[5] = v241;
        v190 += v223;
        --v187;
      }
      while (v187);
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v200 = objc_allocWithZone((Class)SPOrphanedRecords);
    v201 = String._bridgeToObjectiveC()();
    v202 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v203 = objc_msgSend(v200, "initWithRecordType:records:", v201, v202);

    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v204);
    v206 = *(_QWORD *)((*v218 & 0xFFFFFFFFFFFFFF8) + 0x10);
    v205 = *(_QWORD *)((*v218 & 0xFFFFFFFFFFFFFF8) + 0x18);
    if (v206 >= v205 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v205 > 1, v206 + 1, 1);
    v207 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v206, v203);
    specialized Array._endMutation()(v207);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v208 = *(_QWORD *)(v0 + 496);
  v209 = *(_QWORD *)(v0 + 472);
  v210 = *(_QWORD *)(v0 + 448);
  v211 = *(_QWORD *)(v0 + 424);
  v212 = *(_QWORD *)(v0 + 400);
  v213 = *(_QWORD *)(v0 + 376);
  v229 = *(_QWORD *)(v0 + 352);
  v233 = *(_QWORD *)(v0 + 328);
  sub_1007ED0E0(*(_QWORD *)(v0 + 232));
  swift_bridgeObjectRelease();
  v214 = objc_allocWithZone((Class)SPOrphanedRecordsResult);
  v215 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v216 = objc_msgSend(v214, "initWithRecordsInfo:", v215);

  swift_task_dealloc(v208);
  swift_task_dealloc(v209);
  swift_task_dealloc(v210);
  swift_task_dealloc(v211);
  swift_task_dealloc(v212);
  swift_task_dealloc(v213);
  swift_task_dealloc(v229);
  swift_task_dealloc(v233);
  return (*(uint64_t (**)(id))(v0 + 8))(v216);
}

uint64_t sub_10007021C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)(v0 + 472);
  v2 = *(_QWORD *)(v0 + 448);
  v3 = *(_QWORD *)(v0 + 424);
  v4 = *(_QWORD *)(v0 + 400);
  v5 = *(_QWORD *)(v0 + 376);
  v6 = *(_QWORD *)(v0 + 352);
  v7 = *(_QWORD *)(v0 + 328);
  swift_task_dealloc(*(_QWORD *)(v0 + 496));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000702BC(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;

  v2[10] = a1;
  v2[11] = v1;
  v3 = type metadata accessor for UUID(0);
  v2[12] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[13] = v4;
  v5 = (*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[14] = swift_task_alloc(v5);
  v2[15] = swift_task_alloc(v5);
  v6 = (_QWORD *)swift_task_alloc(dword_1010ECA3C);
  v2[16] = v6;
  *v6 = v2;
  v6[1] = sub_10007033C;
  return sub_100071624();
}

uint64_t sub_10007033C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD **)v3;
  v5 = *(_QWORD *)(*(_QWORD *)v3 + 128);
  v6 = *(_QWORD *)(*(_QWORD *)v3 + 88);
  v4[17] = a1;
  v4[18] = a2;
  v4[19] = a3;
  swift_task_dealloc(v5);
  return swift_task_switch(sub_1000703A0, v6, 0);
}

uint64_t sub_1000703A0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 88) + 112);
  *(_QWORD *)(v0 + 160) = v1;
  return swift_task_switch(sub_1000703BC, v1, 0);
}

uint64_t sub_1000703BC()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v2 = (_QWORD *)swift_task_alloc(v1);
  *(_QWORD *)(v0 + 168) = v2;
  v3 = sub_10001A9A8(&qword_1010EC918);
  *v2 = v0;
  v2[1] = sub_100070438;
  return unsafeBlocking<A>(_:)(v0 + 16, sub_10007AC64, *(_QWORD *)(v0 + 160), v3);
}

uint64_t sub_100070438()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 160);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 168));
  swift_release();
  return swift_task_switch(sub_100070494, v1, 0);
}

uint64_t sub_100070494()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[11];
  v0[22] = v0[2];
  return swift_task_switch(sub_1000704B0, v1, 0);
}

uint64_t sub_1000704B0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = v0[22];
  v3 = v0[19];
  v2 = v0[20];
  v4 = v0[18];
  swift_bridgeObjectRetain(v0[17]);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v3);
  v0[23] = sub_10007BD54(v1, v3, type metadata accessor for OwnerPeerTrust, (void (*)(BOOL, uint64_t, uint64_t))sub_10009A7FC);
  v0[24] = 0;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_task_switch(sub_100070564, v2, 0);
}

uint64_t sub_100070564()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v2 = (_QWORD *)swift_task_alloc(v1);
  *(_QWORD *)(v0 + 200) = v2;
  v3 = sub_10001A9A8(&qword_1010EC910);
  *v2 = v0;
  v2[1] = sub_1000705E0;
  return unsafeBlocking<A>(_:)(v0 + 24, sub_10007C088, *(_QWORD *)(v0 + 160), v3);
}

uint64_t sub_1000705E0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 160);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 200));
  swift_release();
  return swift_task_switch(sub_100070640, v1, 0);
}

uint64_t sub_100070640()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[11];
  v0[26] = v0[3];
  return swift_task_switch(sub_10007065C, v1, 0);
}

uint64_t sub_10007065C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = v0[26];
  v2 = v0[24];
  v4 = v0[19];
  v3 = v0[20];
  v5 = v0[18];
  swift_bridgeObjectRetain(v0[17]);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v4);
  v0[27] = sub_10007BD54(v1, v4, type metadata accessor for MemberPeerTrust, (void (*)(BOOL, uint64_t, uint64_t))sub_10009A7D0);
  v0[28] = v2;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_task_switch(sub_100070710, v3, 0);
}

uint64_t sub_100070710()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v2 = (_QWORD *)swift_task_alloc(v1);
  *(_QWORD *)(v0 + 232) = v2;
  v3 = sub_10001A9A8(&qword_1010EC8C8);
  *v2 = v0;
  v2[1] = sub_10007078C;
  return unsafeBlocking<A>(_:)(v0 + 32, sub_10007C090, *(_QWORD *)(v0 + 160), v3);
}

uint64_t sub_10007078C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 160);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 232));
  swift_release();
  return swift_task_switch(sub_1000707EC, v1, 0);
}

uint64_t sub_1000707EC()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[11];
  v0[30] = v0[4];
  return swift_task_switch(sub_100070808, v1, 0);
}

uint64_t sub_100070808()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = v0[30];
  v2 = v0[28];
  v4 = v0[19];
  v3 = v0[20];
  v5 = v0[18];
  swift_bridgeObjectRetain(v0[17]);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v4);
  v0[31] = sub_10007C3C8(v1, v5, type metadata accessor for SharingCircleSecret, (void (*)(BOOL, uint64_t, uint64_t))sub_10009A6F4);
  v0[32] = v2;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_task_switch(sub_1000708BC, v3, 0);
}

uint64_t sub_1000708BC()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v2 = (_QWORD *)swift_task_alloc(v1);
  *(_QWORD *)(v0 + 264) = v2;
  v3 = sub_10001A9A8(&qword_1010ECA40);
  *v2 = v0;
  v2[1] = sub_100070938;
  return unsafeBlocking<A>(_:)(v0 + 40, sub_10007C098, *(_QWORD *)(v0 + 160), v3);
}

uint64_t sub_100070938()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 160);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 264));
  swift_release();
  return swift_task_switch(sub_100070998, v1, 0);
}

uint64_t sub_100070998()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[11];
  v0[34] = v0[5];
  return swift_task_switch(sub_1000709B4, v1, 0);
}

uint64_t sub_1000709B4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = v0[34];
  v2 = v0[32];
  v4 = v0[19];
  v3 = v0[20];
  v6 = v0[17];
  v5 = v0[18];
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v4);
  v0[35] = sub_10007C0A0(v1, v6);
  v0[36] = v2;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_task_switch(sub_100070A58, v3, 0);
}

uint64_t sub_100070A58()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v2 = (_QWORD *)swift_task_alloc(v1);
  *(_QWORD *)(v0 + 296) = v2;
  v3 = sub_10001A9A8(&qword_1010ECA48);
  *v2 = v0;
  v2[1] = sub_100070AD4;
  return unsafeBlocking<A>(_:)(v0 + 48, sub_10007C3B8, *(_QWORD *)(v0 + 160), v3);
}

uint64_t sub_100070AD4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 160);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 296));
  swift_release();
  return swift_task_switch(sub_100070B34, v1, 0);
}

uint64_t sub_100070B34()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[11];
  v0[38] = v0[6];
  return swift_task_switch(sub_100070B50, v1, 0);
}

uint64_t sub_100070B50()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = v0[38];
  v2 = v0[36];
  v4 = v0[19];
  v3 = v0[20];
  v6 = v0[17];
  v5 = v0[18];
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v4);
  v0[39] = sub_10007BD54(v1, v6, type metadata accessor for SharedBeaconRecord, (void (*)(BOOL, uint64_t, uint64_t))sub_10009A654);
  v0[40] = v2;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_task_switch(sub_100070C04, v3, 0);
}

uint64_t sub_100070C04()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v2 = (_QWORD *)swift_task_alloc(v1);
  *(_QWORD *)(v0 + 328) = v2;
  v3 = sub_10001A9A8(&qword_1010ECA50);
  *v2 = v0;
  v2[1] = sub_100070C80;
  return unsafeBlocking<A>(_:)(v0 + 56, sub_10007C3C0, *(_QWORD *)(v0 + 160), v3);
}

uint64_t sub_100070C80()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 160);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 328));
  swift_release();
  return swift_task_switch(sub_100070CE0, v1, 0);
}

uint64_t sub_100070CE0()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[11];
  v0[42] = v0[7];
  return swift_task_switch(sub_100070CFC, v1, 0);
}

uint64_t sub_100070CFC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = v0[42];
  v3 = v0[19];
  v2 = v0[20];
  v5 = v0[17];
  v4 = v0[18];
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v3);
  v0[43] = sub_10007C3C8(v1, v5, type metadata accessor for BeaconNamingRecord, (void (*)(BOOL, uint64_t, uint64_t))sub_10009A778);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_task_switch(sub_100070DB0, v2, 0);
}

uint64_t sub_100070DB0()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v2 = (_QWORD *)swift_task_alloc(v1);
  v0[44] = v2;
  v3 = type metadata accessor for BeaconKeyManager(0);
  v0[45] = v3;
  *v2 = v0;
  v2[1] = sub_100070E2C;
  return unsafeBlocking<A>(_:)(v0 + 8, sub_10007C6FC, v0[20], v3);
}

uint64_t sub_100070E2C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 160);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 352));
  swift_release();
  return swift_task_switch(sub_100070E8C, v1, 0);
}

uint64_t sub_100070E8C()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[11];
  v0[46] = v0[8];
  return swift_task_switch(sub_100070EA8, v1, 0);
}

uint64_t sub_100070EA8()
{
  uid_t v0;

  v0 = getuid();
  sub_100A06500(v0);
  return swift_task_switch(sub_100070EEC, 0, 0);
}

uint64_t sub_100070EEC()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_1010FCEE4);
  *(_QWORD *)(v0 + 376) = v1;
  *v1 = v0;
  v1[1] = sub_100070F4C;
  return sub_1004791E4(*(_QWORD *)(v0 + 120));
}

uint64_t sub_100070F4C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);

  v4 = *(_QWORD **)v2;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 376);
  *(_QWORD *)(*(_QWORD *)v2 + 384) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = sub_1000712A4;
    v7 = 0;
  }
  else
  {
    v8 = v4[15];
    v9 = v4[12];
    v10 = v4[13];
    v11 = v4[11];
    v4[49] = a1;
    v12 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
    v4[50] = v12;
    v12(v8, v9);
    swift_release();
    v6 = sub_100070FE8;
    v7 = v11;
  }
  return swift_task_switch(v6, v7, 0);
}

uint64_t sub_100070FE8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = v0[49];
  v3 = v0[19];
  v2 = v0[20];
  v5 = v0[17];
  v4 = v0[18];
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v3);
  v0[51] = sub_10007C704(v1, v5, &qword_1010ECA58, (void (*)(BOOL, uint64_t, uint64_t))sub_10009A74C);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_task_switch(sub_100071098, v2, 0);
}

uint64_t sub_100071098()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v2 = (_QWORD *)swift_task_alloc(v1);
  v0[52] = v2;
  *v2 = v0;
  v2[1] = sub_100071108;
  return unsafeBlocking<A>(_:)(v0 + 9, sub_10007C6FC, v0[20], v0[45]);
}

uint64_t sub_100071108()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 160);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 416));
  swift_release();
  return swift_task_switch(sub_100071168, v1, 0);
}

uint64_t sub_100071168()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 424) = *(_QWORD *)(v0 + 72);
  return swift_task_switch(sub_100071184, 0, 0);
}

uint64_t sub_100071184()
{
  uint64_t v0;
  uid_t v1;
  _QWORD *v2;

  v1 = getuid();
  sub_100A06500(v1);
  v2 = (_QWORD *)swift_task_alloc(dword_1010FCE94);
  *(_QWORD *)(v0 + 432) = v2;
  *v2 = v0;
  v2[1] = sub_1000711F4;
  return sub_100474760(*(_QWORD *)(v0 + 112));
}

uint64_t sub_1000711F4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)();
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = *v3;
  v7 = *(_QWORD *)(*v3 + 432);
  *(_QWORD *)(*v3 + 440) = v2;
  swift_task_dealloc(v7);
  if (v2)
  {
    (*(void (**)(_QWORD, _QWORD))(v6 + 400))(*(_QWORD *)(v6 + 112), *(_QWORD *)(v6 + 96));
    v8 = sub_100071534;
    v9 = 0;
  }
  else
  {
    v10 = *(void (**)(uint64_t, uint64_t))(v6 + 400);
    v11 = *(_QWORD *)(v6 + 112);
    v13 = *(_QWORD *)(v6 + 88);
    v12 = *(_QWORD *)(v6 + 96);
    *(_QWORD *)(v6 + 448) = a2;
    *(_QWORD *)(v6 + 456) = a1;
    v10(v11, v12);
    swift_release();
    v8 = sub_1000713C0;
    v9 = v13;
  }
  return swift_task_switch(v8, v9, 0);
}

uint64_t sub_1000712A4()
{
  _QWORD *v0;
  uint64_t v2;

  v2 = v0[11];
  (*(void (**)(_QWORD, _QWORD))(v0[13] + 8))(v0[15], v0[12]);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_task_switch(sub_100071384, v2, 0);
}

uint64_t sub_100071384()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 112);
  swift_task_dealloc(*(_QWORD *)(v0 + 120));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000713C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v1 = *(_QWORD *)(v0 + 448);
  v2 = *(_QWORD *)(v0 + 456);
  v17 = *(_QWORD *)(v0 + 344);
  v18 = *(_QWORD *)(v0 + 408);
  v15 = *(_QWORD *)(v0 + 280);
  v16 = *(_QWORD *)(v0 + 312);
  v13 = *(_QWORD *)(v0 + 216);
  v14 = *(_QWORD *)(v0 + 248);
  v4 = *(_QWORD *)(v0 + 144);
  v3 = *(_QWORD *)(v0 + 152);
  v5 = *(_QWORD *)(v0 + 136);
  v10 = *(_QWORD *)(v0 + 120);
  v11 = *(_QWORD *)(v0 + 112);
  v12 = *(_QWORD *)(v0 + 184);
  v6 = *(_QWORD **)(v0 + 80);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v3);
  v9 = sub_10007C704(v2, v5, &qword_101109410, (void (*)(BOOL, uint64_t, uint64_t))sub_10009A720);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v7 = sub_10007C704(v1, v5, &qword_101109410, (void (*)(BOOL, uint64_t, uint64_t))sub_10009A720);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  *v6 = v12;
  v6[1] = v13;
  v6[2] = v14;
  v6[3] = v15;
  v6[4] = v16;
  v6[5] = v17;
  v6[6] = v18;
  v6[7] = v9;
  v6[8] = v7;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100071534()
{
  uint64_t v0;

  return swift_task_switch(sub_100071548, *(_QWORD *)(v0 + 88), 0);
}

uint64_t sub_100071548()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v1 = *(_QWORD *)(v0 + 408);
  v2 = *(_QWORD *)(v0 + 344);
  v3 = *(_QWORD *)(v0 + 312);
  v4 = *(_QWORD *)(v0 + 280);
  v5 = *(_QWORD *)(v0 + 248);
  v6 = *(_QWORD *)(v0 + 216);
  v7 = *(_QWORD *)(v0 + 184);
  v8 = *(_QWORD *)(v0 + 144);
  v12 = *(_QWORD *)(v0 + 152);
  v9 = *(_QWORD *)(v0 + 136);
  swift_release(*(_QWORD *)(v0 + 424));
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v7);
  swift_bridgeObjectRelease(v9);
  swift_bridgeObjectRelease(v8);
  swift_bridgeObjectRelease(v12);
  v10 = *(_QWORD *)(v0 + 112);
  swift_task_dealloc(*(_QWORD *)(v0 + 120));
  swift_task_dealloc(v10);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100071624()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v1[8] = v0;
  v2 = type metadata accessor for SharedBeaconRecord(0);
  v1[9] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[10] = v3;
  v4 = (*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[11] = swift_task_alloc(v4);
  v1[12] = swift_task_alloc(v4);
  v5 = type metadata accessor for OwnedBeaconRecord(0);
  v1[13] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v1[14] = v6;
  v1[15] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for MemberSharingCircle(0);
  v1[16] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v1[17] = v8;
  v1[18] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = (*(_QWORD *)(*(_QWORD *)(sub_10001A9A8(&qword_1010ED860) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[19] = swift_task_alloc(v9);
  v1[20] = swift_task_alloc(v9);
  v10 = type metadata accessor for UUID(0);
  v1[21] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v1[22] = v11;
  v12 = (*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[23] = swift_task_alloc(v12);
  v1[24] = swift_task_alloc(v12);
  v1[25] = swift_task_alloc(v12);
  v1[26] = swift_task_alloc(v12);
  v13 = type metadata accessor for OwnerSharingCircle(0);
  v1[27] = v13;
  v14 = *(_QWORD *)(v13 - 8);
  v1[28] = v14;
  v1[29] = swift_task_alloc((*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100071790, v0, 0);
}

uint64_t sub_100071790()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[8];
  v0[2] = &_swiftEmptySetSingleton;
  v0[3] = &_swiftEmptySetSingleton;
  v2 = *(_QWORD *)(v1 + 112);
  v0[30] = v2;
  return swift_task_switch(sub_1000717B8, v2, 0);
}

uint64_t sub_1000717B8()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v2 = (_QWORD *)swift_task_alloc(v1);
  *(_QWORD *)(v0 + 248) = v2;
  v3 = sub_10001A9A8(&qword_1010EE100);
  *v2 = v0;
  v2[1] = sub_100071834;
  return unsafeBlocking<A>(_:)(v0 + 32, sub_100068004, *(_QWORD *)(v0 + 240), v3);
}

uint64_t sub_100071834()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 240);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 248));
  swift_release();
  return swift_task_switch(sub_100071890, v1, 0);
}

uint64_t sub_100071890()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[8];
  v0[32] = v0[4];
  return swift_task_switch(sub_1000718AC, v1, 0);
}

void sub_1000718AC()
{
  _QWORD *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(char *, uint64_t, uint64_t);
  void (*v12)(uint64_t, uint64_t);
  void (*v13)(uint64_t, unint64_t, uint64_t);
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  void (*v41)(uint64_t, uint64_t, uint64_t, uint64_t);
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(uint64_t, uint64_t);

  v1 = v0[32];
  v39 = *(_QWORD *)(v1 + 16);
  if (v39)
  {
    v2 = 0;
    v37 = (int *)v0[27];
    v38 = v0[28];
    v3 = v0[22];
    v35 = v0[32];
    v36 = v1 + ((*(unsigned __int8 *)(v38 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v38 + 80));
    v44 = v3;
    while (v2 < *(_QWORD *)(v1 + 16))
    {
      v6 = v0[29];
      v8 = (char *)v0[25];
      v7 = v0[26];
      v9 = v0[21];
      sub_10005972C(v36 + *(_QWORD *)(v38 + 72) * v2, v6, type metadata accessor for OwnerSharingCircle);
      v10 = v3;
      v11 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
      v11(v8, v6 + v37[5], v9);
      sub_100A09F38(v7, v8);
      v40 = v2;
      v12 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
      v12(v7, v9);
      v13 = (void (*)(uint64_t, unint64_t, uint64_t))v11;
      v11(v8, v6 + v37[6], v9);
      sub_100A09F38(v7, v8);
      v46 = v12;
      v12(v7, v9);
      v14 = swift_bridgeObjectRetain(*(_QWORD *)(v6 + v37[8]));
      v15 = sub_100508A54(v14);
      swift_bridgeObjectRelease();
      v43 = *(_QWORD *)(v15 + 16);
      if (v43)
      {
        v16 = 0;
        v3 = v44;
        v42 = v15 + ((*(unsigned __int8 *)(v44 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v44 + 80));
        v17 = *(_QWORD *)(v44 + 72);
        do
        {
          v22 = v0[20];
          v23 = v0[21];
          v13(v22, v42 + v16 * v17, v23);
          v41 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 56);
          v41(v22, 0, 1, v23);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v22, 1, v23) == 1)
          {
            v1 = v35;
            v4 = v40;
            goto LABEL_4;
          }
          v24 = v0[21];
          (*(void (**)(_QWORD, _QWORD, uint64_t))(v3 + 32))(v0[24], v0[20], v24);
          v25 = *((_QWORD *)&_swiftEmptySetSingleton + 5);
          v26 = sub_100006204(&qword_1010F98B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
          swift_bridgeObjectRetain(&_swiftEmptySetSingleton);
          v27 = dispatch thunk of Hashable._rawHashValue(seed:)(v25, v24, v26);
          v28 = -1 << *((_BYTE *)&_swiftEmptySetSingleton + 32);
          v29 = v27 & ~v28;
          v45 = v16;
          if (((*(_QWORD *)((char *)&_swiftEmptySetSingleton + ((v29 >> 3) & 0xFFFFFFFFFFFFF8) + 56) >> v29) & 1) != 0)
          {
            v30 = ~v28;
            while (1)
            {
              v31 = v0[26];
              v32 = v0[24];
              v33 = v0[21];
              v13(v31, *((_QWORD *)&_swiftEmptySetSingleton + 6) + v29 * v17, v33);
              v34 = sub_100006204(&qword_1010EE520, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
              LOBYTE(v32) = dispatch thunk of static Equatable.== infix(_:_:)(v31, v32, v33, v34);
              v46(v31, v33);
              if ((v32 & 1) != 0)
                break;
              v29 = (v29 + 1) & v30;
              if (((*(_QWORD *)((char *)&_swiftEmptySetSingleton + ((v29 >> 3) & 0xFFFFFFFFFFFFF8) + 56) >> v29) & 1) == 0)
                goto LABEL_8;
            }
          }
          else
          {
LABEL_8:
            v18 = v0[26];
            v19 = v0[24];
            v20 = v0[21];
            swift_bridgeObjectRelease();
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptySetSingleton);
            v13(v18, v19, v20);
            sub_100A1CCB8(v18, v29, isUniquelyReferenced_nonNull_native);
          }
          swift_bridgeObjectRelease();
          v3 = v44;
          v16 = v45 + 1;
          v46(v0[24], v0[21]);
        }
        while (v45 + 1 != v43);
        v1 = v35;
        v4 = v40;
        v41(v0[20], 1, 1, v0[21]);
      }
      else
      {
        v3 = v44;
        v1 = v35;
        v4 = v40;
        (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(v44 + 56))(v0[20], 1, 1, v0[21]);
      }
LABEL_4:
      v2 = v4 + 1;
      v5 = v0[29];
      swift_release();
      sub_1000126B0(v5, type metadata accessor for OwnerSharingCircle);
      if (v2 == v39)
        goto LABEL_19;
    }
    __break(1u);
  }
  else
  {
LABEL_19:
    swift_bridgeObjectRelease();
    v0[33] = &_swiftEmptySetSingleton;
    swift_task_switch(sub_100071CE8, v0[30], 0);
  }
}

uint64_t sub_100071CE8()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v2 = (_QWORD *)swift_task_alloc(v1);
  *(_QWORD *)(v0 + 272) = v2;
  v3 = sub_10001A9A8(&qword_1010EC840);
  *v2 = v0;
  v2[1] = sub_100071D64;
  return unsafeBlocking<A>(_:)(v0 + 40, sub_10001ED30, *(_QWORD *)(v0 + 240), v3);
}

uint64_t sub_100071D64()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 240);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 272));
  swift_release();
  return swift_task_switch(sub_100071DC4, v1, 0);
}

uint64_t sub_100071DC4()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[8];
  v0[35] = v0[5];
  return swift_task_switch(sub_100071DE0, v1, 0);
}

void sub_100071DE0()
{
  _QWORD *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(char *, uint64_t, uint64_t);
  void (*v12)(uint64_t, uint64_t);
  void (*v13)(uint64_t, unint64_t, uint64_t);
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  int *v40;
  void (*v41)(uint64_t, uint64_t, uint64_t, uint64_t);
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(uint64_t, uint64_t);

  v1 = v0[35];
  v38 = *(_QWORD *)(v1 + 16);
  if (v38)
  {
    v2 = 0;
    v3 = v0[22];
    v40 = (int *)v0[16];
    v37 = v0[17];
    v36 = v1 + ((*(unsigned __int8 *)(v37 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v37 + 80));
    v4 = v0[33];
    v44 = v3;
    v35 = v0[35];
    while (v2 < *(_QWORD *)(v1 + 16))
    {
      v8 = (char *)v0[25];
      v7 = v0[26];
      v9 = v0[21];
      v10 = v0[18];
      sub_10005972C(v36 + *(_QWORD *)(v37 + 72) * v2, v10, type metadata accessor for MemberSharingCircle);
      v11 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
      v11(v8, v10 + v40[7], v9);
      sub_100A09F38(v7, v8);
      v39 = v2;
      v12 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
      v12(v7, v9);
      v13 = (void (*)(uint64_t, unint64_t, uint64_t))v11;
      v11(v8, v10 + v40[6], v9);
      sub_100A09F38(v7, v8);
      v46 = v12;
      v12(v7, v9);
      v14 = swift_bridgeObjectRetain(*(_QWORD *)(v10 + v40[9]));
      v15 = sub_100508A54(v14);
      swift_bridgeObjectRelease();
      v43 = *(_QWORD *)(v15 + 16);
      if (v43)
      {
        v16 = 0;
        v3 = v44;
        v42 = v15 + ((*(unsigned __int8 *)(v44 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v44 + 80));
        v17 = *(_QWORD *)(v44 + 72);
        do
        {
          v22 = v0[21];
          v23 = v0[19];
          v13(v23, v42 + v16 * v17, v22);
          v41 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 56);
          v41(v23, 0, 1, v22);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v23, 1, v22) == 1)
          {
            v1 = v35;
            v5 = v39;
            goto LABEL_4;
          }
          v24 = v0[21];
          (*(void (**)(_QWORD, _QWORD, uint64_t))(v3 + 32))(v0[23], v0[19], v24);
          v25 = *(_QWORD *)(v4 + 40);
          v26 = sub_100006204(&qword_1010F98B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
          swift_bridgeObjectRetain(v4);
          v27 = dispatch thunk of Hashable._rawHashValue(seed:)(v25, v24, v26);
          v28 = -1 << *(_BYTE *)(v4 + 32);
          v29 = v27 & ~v28;
          v45 = v16;
          if (((*(_QWORD *)(v4 + 56 + ((v29 >> 3) & 0xFFFFFFFFFFFFF8)) >> v29) & 1) != 0)
          {
            v30 = ~v28;
            while (1)
            {
              v31 = v0[26];
              v32 = v0[23];
              v33 = v0[21];
              v13(v31, *(_QWORD *)(v4 + 48) + v29 * v17, v33);
              v34 = sub_100006204(&qword_1010EE520, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
              LOBYTE(v32) = dispatch thunk of static Equatable.== infix(_:_:)(v31, v32, v33, v34);
              v46(v31, v33);
              if ((v32 & 1) != 0)
                break;
              v29 = (v29 + 1) & v30;
              if (((*(_QWORD *)(v4 + 56 + ((v29 >> 3) & 0xFFFFFFFFFFFFF8)) >> v29) & 1) == 0)
                goto LABEL_8;
            }
          }
          else
          {
LABEL_8:
            v18 = v0[26];
            v19 = v0[23];
            v20 = v0[21];
            swift_bridgeObjectRelease();
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v4);
            v13(v18, v19, v20);
            sub_100A1CCB8(v18, v29, isUniquelyReferenced_nonNull_native);
          }
          swift_bridgeObjectRelease();
          v3 = v44;
          v16 = v45 + 1;
          v46(v0[23], v0[21]);
        }
        while (v45 + 1 != v43);
        v1 = v35;
        v5 = v39;
        v41(v0[19], 1, 1, v0[21]);
      }
      else
      {
        v3 = v44;
        v1 = v35;
        v5 = v39;
        (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(v44 + 56))(v0[19], 1, 1, v0[21]);
      }
LABEL_4:
      v2 = v5 + 1;
      v6 = v0[18];
      swift_release();
      sub_1000126B0(v6, type metadata accessor for MemberSharingCircle);
      if (v2 == v38)
      {
        swift_bridgeObjectRelease();
        goto LABEL_22;
      }
    }
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease();
    v4 = v0[33];
LABEL_22:
    v0[36] = v4;
    swift_task_switch(sub_100072220, v0[30], 0);
  }
}

uint64_t sub_100072220()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v2 = (_QWORD *)swift_task_alloc(v1);
  *(_QWORD *)(v0 + 296) = v2;
  v3 = sub_10001A9A8(&qword_1010EE190);
  *v2 = v0;
  v2[1] = sub_10007229C;
  return unsafeBlocking<A>(_:)(v0 + 48, sub_10001ED38, *(_QWORD *)(v0 + 240), v3);
}

uint64_t sub_10007229C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 240);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 296));
  swift_release();
  return swift_task_switch(sub_1000722FC, v1, 0);
}

uint64_t sub_1000722FC()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[8];
  v0[38] = v0[6];
  return swift_task_switch(sub_100072318, v1, 0);
}

uint64_t sub_100072318()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;

  v1 = v0[38];
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v3 = v0[22];
    v4 = v0[14];
    v12 = v0[15] + *(int *)(v0[13] + 20);
    v5 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    v11 = *(_QWORD *)(v4 + 72);
    do
    {
      v7 = (char *)v0[25];
      v6 = v0[26];
      v8 = v0[21];
      v9 = v0[15];
      sub_10005972C(v5, v9, type metadata accessor for OwnedBeaconRecord);
      (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v7, v12, v8);
      sub_1000126B0(v9, type metadata accessor for OwnedBeaconRecord);
      sub_100A09F38(v6, v7);
      (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v6, v8);
      v5 += v11;
      --v2;
    }
    while (v2);
  }
  swift_bridgeObjectRelease();
  return swift_task_switch(sub_100072424, v0[30], 0);
}

uint64_t sub_100072424()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v2 = (_QWORD *)swift_task_alloc(v1);
  *(_QWORD *)(v0 + 312) = v2;
  v3 = sub_10001A9A8(&qword_1010ECA48);
  *v2 = v0;
  v2[1] = sub_1000724A0;
  return unsafeBlocking<A>(_:)(v0 + 56, sub_10007C3B8, *(_QWORD *)(v0 + 240), v3);
}

uint64_t sub_1000724A0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 240);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 312));
  swift_release();
  return swift_task_switch(sub_100072500, v1, 0);
}

uint64_t sub_100072500()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[8];
  v0[40] = v0[7];
  return swift_task_switch(sub_100072518, v1, 0);
}

uint64_t sub_100072518()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v1 = *(_QWORD *)(v0 + 320);
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v3 = *(_QWORD *)(v0 + 176);
    v5 = *(int **)(v0 + 72);
    v4 = *(_QWORD *)(v0 + 80);
    v6 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    v27 = *(_QWORD *)(v4 + 72);
    do
    {
      v11 = *(_QWORD *)(v0 + 88);
      v10 = *(_QWORD *)(v0 + 96);
      sub_10005972C(v6, v10, type metadata accessor for SharedBeaconRecord);
      v12 = *(_QWORD *)(v10 + v5[11]);
      sub_10005972C(v10, v11, type metadata accessor for SharedBeaconRecord);
      v13 = *(_QWORD *)(v0 + 88);
      if (v12 == -1)
      {
        sub_1000126B0(v13, type metadata accessor for SharedBeaconRecord);
      }
      else
      {
        v14 = *(_QWORD *)(v13 + v5[12]);
        sub_1000126B0(v13, type metadata accessor for SharedBeaconRecord);
        if (v14 != -1)
          goto LABEL_5;
      }
      v8 = *(char **)(v0 + 200);
      v7 = *(_QWORD *)(v0 + 208);
      v9 = *(_QWORD *)(v0 + 168);
      (*(void (**)(char *, _QWORD, uint64_t))(v3 + 16))(v8, *(_QWORD *)(v0 + 96) + v5[5], v9);
      sub_100A09F38(v7, v8);
      (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v7, v9);
LABEL_5:
      sub_1000126B0(*(_QWORD *)(v0 + 96), type metadata accessor for SharedBeaconRecord);
      v6 += v27;
      --v2;
    }
    while (v2);
  }
  swift_bridgeObjectRelease();
  v15 = *(_QWORD *)(v0 + 200);
  v16 = *(_QWORD *)(v0 + 208);
  v18 = *(_QWORD *)(v0 + 184);
  v17 = *(_QWORD *)(v0 + 192);
  v20 = *(_QWORD *)(v0 + 152);
  v19 = *(_QWORD *)(v0 + 160);
  v21 = *(_QWORD *)(v0 + 144);
  v22 = *(_QWORD *)(v0 + 120);
  v23 = *(_QWORD *)(v0 + 96);
  v28 = *(_QWORD *)(v0 + 24);
  v25 = *(_QWORD *)(v0 + 88);
  v26 = *(_QWORD *)(v0 + 16);
  swift_task_dealloc(*(_QWORD *)(v0 + 232));
  swift_task_dealloc(v16);
  swift_task_dealloc(v15);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v25);
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(v0 + 8))(v28, v26, *(_QWORD *)(v0 + 288));
}

uint64_t sub_1000726E4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 112));
  swift_release(*(_QWORD *)(v0 + 120));
  swift_defaultActor_destroy(v0);
  return swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for CheckDataIntegrityUseCase()
{
  return objc_opt_self(_TtC12searchpartyd25CheckDataIntegrityUseCase);
}

uint64_t sub_100072730(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2[3] = a1;
  v2[4] = v1;
  v3 = type metadata accessor for UUID(0);
  v2[5] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[6] = v4;
  v5 = *(_QWORD *)(v4 + 64);
  v2[7] = v5;
  v2[8] = swift_task_alloc((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10001A9A8(&qword_1010F7AE0);
  v2[9] = v6;
  v2[10] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for KeySyncRecord(0);
  v2[11] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v2[12] = v8;
  v2[13] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000727E4, v1, 0);
}

uint64_t sub_1000727E4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 32) + 112);
  *(_QWORD *)(v0 + 112) = v1;
  return swift_task_switch(sub_100072800, v1, 0);
}

uint64_t sub_100072800()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v1 = v0[14];
  v3 = v0[7];
  v2 = v0[8];
  v4 = v0[5];
  v5 = v0[6];
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v5 + 16))(v2, v0[3], v4);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (v6 + 24) & ~v6;
  v8 = swift_allocObject(&unk_101052EB8, v7 + v3, v6 | 7);
  v0[15] = v8;
  *(_QWORD *)(v8 + 16) = v1;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(v8 + v7, v2, v4);
  v9 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v10 = (_QWORD *)swift_task_alloc(v9);
  v0[16] = v10;
  *v10 = v0;
  v10[1] = sub_1000728D8;
  return unsafeBlocking<A>(_:)(v0[10], sub_10007CAF0, v8, v0[9]);
}

uint64_t sub_1000728D8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 32);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 128));
  swift_release();
  return swift_task_switch(sub_100072938, v1, 0);
}

uint64_t sub_100072938()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  NSString v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  Swift::String v8;
  uint64_t v9;
  Swift::String v10;
  Swift::String v11;
  Swift::String v12;
  Swift::String v13;
  uint64_t v14;
  uint64_t v15;
  Swift::String v16;
  id v17;
  NSString v18;
  uint64_t v19;
  uint64_t v20;

  v1 = *(_QWORD *)(v0 + 88);
  v2 = *(_QWORD *)(v0 + 80);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 96) + 48))(v2, 1, v1) == 1)
  {
    sub_100004048(v2, &qword_1010F7AE0);
    _StringGuts.grow(_:)(17);
    swift_bridgeObjectRelease();
    v3 = objc_allocWithZone((Class)SPDataIntegrityCheck);
    v4 = String._bridgeToObjectiveC()();
    v5 = objc_msgSend(v3, "initWithValue:severity:", v4, 1, 0, 0xE000000000000000);

  }
  else
  {
    v6 = *(_QWORD *)(v0 + 104);
    v7 = *(_QWORD *)(v0 + 40);
    sub_1000126EC(v2, v6, type metadata accessor for KeySyncRecord);
    _StringGuts.grow(_:)(51);
    v8._countAndFlagsBits = 0x52636E795379654BLL;
    v8._object = (void *)0xEF203A64726F6365;
    String.append(_:)(v8);
    v9 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v10._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v7, v9);
    String.append(_:)(v10);
    swift_bridgeObjectRelease();
    v11._object = (void *)0x8000000100EC6A50;
    v11._countAndFlagsBits = 0xD000000000000013;
    String.append(_:)(v11);
    *(_QWORD *)(v0 + 16) = *(_QWORD *)(v6 + *(int *)(v1 + 20));
    v12._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt64, &protocol witness table for UInt64);
    String.append(_:)(v12);
    swift_bridgeObjectRelease();
    v13._countAndFlagsBits = 0x202C7865646E6920;
    v13._object = (void *)0xEB00000000207461;
    String.append(_:)(v13);
    v14 = type metadata accessor for Date(0);
    v15 = sub_100006204(&qword_1010EE0F0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    v16._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v14, v15);
    String.append(_:)(v16);
    swift_bridgeObjectRelease();
    v17 = objc_allocWithZone((Class)SPDataIntegrityCheck);
    v18 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    v5 = objc_msgSend(v17, "initWithValue:severity:", v18, 0, 0, 0xE000000000000000);

    sub_1000126B0(v6, type metadata accessor for KeySyncRecord);
  }
  v19 = *(_QWORD *)(v0 + 80);
  v20 = *(_QWORD *)(v0 + 64);
  swift_task_dealloc(*(_QWORD *)(v0 + 104));
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  return (*(uint64_t (**)(id))(v0 + 8))(v5);
}

uint64_t sub_100072C0C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2[5] = a1;
  v2[6] = v1;
  v3 = type metadata accessor for BeaconObservation(0);
  v2[7] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[8] = v4;
  v2[9] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for UUID(0);
  v2[10] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v2[11] = v6;
  v7 = *(_QWORD *)(v6 + 64);
  v2[12] = v7;
  v2[13] = swift_task_alloc((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100072C98, v1, 0);
}

uint64_t sub_100072C98()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;

  v2 = v0[12];
  v1 = v0[13];
  v3 = v0[10];
  v4 = v0[11];
  v5 = v0[5];
  v0[2] = _swiftEmptyArrayStorage;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v1, v5, v3);
  v6 = *(unsigned __int8 *)(v4 + 80);
  v7 = (v6 + 16) & ~v6;
  v8 = swift_allocObject(&unk_101052E90, v7 + v2, v6 | 7);
  v0[14] = v8;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v8 + v7, v1, v3);
  v9 = (_QWORD *)swift_task_alloc(async function pointer to unsafeBlocking<A>(_:)[1]);
  v0[15] = v9;
  v10 = sub_10001A9A8(&qword_1010ECB08);
  *v9 = v0;
  v9[1] = sub_100072D7C;
  return unsafeBlocking<A>(_:)(v0 + 3, sub_10007CA98, v8, v10);
}

uint64_t sub_100072D7C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 120));
  swift_release();
  return swift_task_switch(sub_100072DDC, v1, 0);
}

void sub_100072DDC()
{
  uint64_t v0;
  int64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t (*v8)(uint64_t);
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t);
  Swift::String v18;
  unint64_t v19;
  unint64_t v20;
  Swift::String v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  Swift::String v25;
  uint64_t v26;
  uint64_t v27;
  Swift::String v28;
  id v29;
  NSString v30;
  id v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;

  v1 = 0;
  v2 = *(_QWORD *)(v0 + 56);
  v40 = *(_QWORD *)(v0 + 64);
  v3 = *(_QWORD *)(v0 + 24);
  v4 = *(_QWORD *)(v3 + 64);
  v41 = v3 + 64;
  v43 = v3;
  v5 = -1;
  v6 = -1 << *(_BYTE *)(v43 + 32);
  if (-v6 < 64)
    v5 = ~(-1 << -(char)v6);
  v7 = v5 & v4;
  v42 = (unint64_t)(63 - v6) >> 6;
  v8 = type metadata accessor for BeaconObservation;
  while (v7)
  {
    v9 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    v10 = v9 | (v1 << 6);
LABEL_20:
    v14 = *(_QWORD *)(*(_QWORD *)(v43 + 56) + 8 * v10);
    v15 = *(_QWORD *)(v14 + 16);
    if (v15)
    {
      v16 = *(_QWORD *)(v0 + 72);
      v17 = v8;
      sub_10005972C(v14+ ((*(unsigned __int8 *)(v40 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v40 + 80))+ *(_QWORD *)(v40 + 72) * (v15 - 1), v16, v8);
      LOBYTE(v16) = *(_BYTE *)(v16 + *(int *)(v2 + 24));
      swift_bridgeObjectRetain(v14);
      sub_1006EB054(v16);
      v18._countAndFlagsBits = 8250;
      v18._object = (void *)0xE200000000000000;
      String.append(_:)(v18);
      v19 = *(_QWORD *)(v14 + 16);
      swift_bridgeObjectRelease();
      if (v19 < 2)
      {
        v22 = 0;
        v23 = 0xE000000000000000;
      }
      else
      {
        *(_QWORD *)(v0 + 32) = v19;
        v44 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
        v45 = v20;
        v21._countAndFlagsBits = 0x7364726F63657220;
        v21._object = (void *)0xE800000000000000;
        String.append(_:)(v21);
        v22 = v44;
        v23 = v45;
      }
      v24 = v23;
      String.append(_:)(*(Swift::String *)&v22);
      swift_bridgeObjectRelease();
      v25._countAndFlagsBits = 0x207473614C202ELL;
      v25._object = (void *)0xE700000000000000;
      String.append(_:)(v25);
      v26 = type metadata accessor for Date(0);
      v27 = sub_100006204(&qword_1010EE0F0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
      v28._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v26, v27);
      String.append(_:)(v28);
      swift_bridgeObjectRelease();
      v29 = objc_allocWithZone((Class)SPDataIntegrityCheck);
      v30 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      v31 = objc_msgSend(v29, "initWithValue:severity:", v30, 0);

      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v32);
      v34 = *(_QWORD *)((*(_QWORD *)(v0 + 16) & 0xFFFFFFFFFFFFFF8) + 0x10);
      v33 = *(_QWORD *)((*(_QWORD *)(v0 + 16) & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v34 >= v33 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v33 > 1, v34 + 1, 1);
      v35 = *(_QWORD *)(v0 + 72);
      v36 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v34, v31);
      specialized Array._endMutation()(v36);
      v8 = v17;
      sub_1000126B0(v35, v17);
    }
  }
  v11 = v1 + 1;
  if (__OFADD__(v1, 1))
  {
    __break(1u);
    goto LABEL_29;
  }
  if (v11 >= v42)
    goto LABEL_27;
  v12 = *(_QWORD *)(v41 + 8 * v11);
  ++v1;
  if (v12)
    goto LABEL_19;
  v1 = v11 + 1;
  if (v11 + 1 >= v42)
    goto LABEL_27;
  v12 = *(_QWORD *)(v41 + 8 * v1);
  if (v12)
    goto LABEL_19;
  v1 = v11 + 2;
  if (v11 + 2 >= v42)
    goto LABEL_27;
  v12 = *(_QWORD *)(v41 + 8 * v1);
  if (v12)
  {
LABEL_19:
    v7 = (v12 - 1) & v12;
    v10 = __clz(__rbit64(v12)) + (v1 << 6);
    goto LABEL_20;
  }
  v13 = v11 + 3;
  if (v13 >= v42)
  {
LABEL_27:
    v37 = *(_QWORD *)(v0 + 104);
    v38 = *(_QWORD *)(v0 + 72);
    swift_release();
    v39 = *(_QWORD *)(v0 + 16);
    swift_task_dealloc(v37);
    swift_task_dealloc(v38);
    (*(void (**)(uint64_t))(v0 + 8))(v39);
    return;
  }
  v12 = *(_QWORD *)(v41 + 8 * v13);
  if (v12)
  {
    v1 = v13;
    goto LABEL_19;
  }
  while (1)
  {
    v1 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v1 >= v42)
      goto LABEL_27;
    v12 = *(_QWORD *)(v41 + 8 * v1);
    ++v13;
    if (v12)
      goto LABEL_19;
  }
LABEL_29:
  __break(1u);
}

uint64_t sub_100073190@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  char v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v33;
  unint64_t v34;
  uint64_t v35;
  _BOOL8 v36;
  uint64_t v37;
  char v38;
  unint64_t v39;
  char v40;
  uint64_t v41;
  BOOL v42;
  uint64_t v43;
  _QWORD *v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;

  v46 = a1;
  v3 = type metadata accessor for BeaconObservation(0);
  v51 = *(_QWORD *)(v3 - 8);
  v52 = v3;
  v4 = __chkstk_darwin(v3);
  v50 = (uint64_t)&v44 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v7 = (char *)&v44 - v6;
  v47 = 44;
  v44 = a2;
  if (qword_1010E9CF0 != -1)
LABEL_36:
    swift_once(&qword_1010E9CF0, sub_10058CADC);
  v8 = 0;
  v9 = &_swiftEmptyDictionarySingleton;
  while (1)
  {
    if (__OFADD__(v8, 1))
      goto LABEL_33;
    v48 = v8 + 1;
    v49 = v9;
    v53 = *((char *)&off_101048768 + v8 + 32);
    v12 = qword_1011B7160;
    v13 = objc_autoreleasePoolPush();
    v14 = sub_10001A9A8(&qword_1010F7770);
    OS_dispatch_queue.sync<A>(execute:)(sub_10007CAD4, v12, v14);
    v15 = v54;
    if (!v54[2])
      goto LABEL_19;
    v16 = sub_100003FB0(v46);
    if ((v17 & 1) != 0)
    {
      v18 = *(_QWORD *)(v15[7] + 8 * v16);
      swift_bridgeObjectRetain(v18);
      swift_bridgeObjectRelease();
      v19 = sub_100508D98(v18);
      swift_bridgeObjectRelease();
      sub_10088FD00((uint64_t)v19);
      v21 = v20;
      swift_release();
      v22 = _swiftEmptyArrayStorage;
      v54 = _swiftEmptyArrayStorage;
      v23 = *(_QWORD *)(v21 + 16);
      if (v23)
      {
        v45 = v13;
        v24 = 0;
        while (v24 < *(_QWORD *)(v21 + 16))
        {
          v25 = (*(unsigned __int8 *)(v51 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v51 + 80);
          v26 = *(_QWORD *)(v51 + 72);
          sub_10005972C(v21 + v25 + v26 * v24, (uint64_t)v7, type metadata accessor for BeaconObservation);
          if (qword_100E22E60[v7[*(int *)(v52 + 24)]] == qword_100E22E60[v53])
          {
            sub_1000126EC((uint64_t)v7, v50, type metadata accessor for BeaconObservation);
            if ((swift_isUniquelyReferenced_nonNull_native(v22) & 1) == 0)
              sub_10009AAC8(0, v22[2] + 1, 1);
            v22 = v54;
            v28 = v54[2];
            v27 = v54[3];
            if (v28 >= v27 >> 1)
            {
              sub_10009AAC8(v27 > 1, v28 + 1, 1);
              v22 = v54;
            }
            v22[2] = v28 + 1;
            sub_1000126EC(v50, (uint64_t)v22 + v25 + v28 * v26, type metadata accessor for BeaconObservation);
          }
          else
          {
            sub_1000126B0((uint64_t)v7, type metadata accessor for BeaconObservation);
          }
          if (v23 == ++v24)
          {
            v22 = v54;
            v13 = v45;
            goto LABEL_21;
          }
        }
        __break(1u);
LABEL_33:
        __break(1u);
LABEL_34:
        __break(1u);
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
LABEL_21:
      swift_release();
    }
    else
    {
LABEL_19:
      swift_bridgeObjectRelease();
      v22 = _swiftEmptyArrayStorage;
    }
    objc_autoreleasePoolPop(v13);
    v54 = v22;
    swift_bridgeObjectRetain(v22);
    sub_10007ABA0(&v54);
    v29 = v53;
    swift_bridgeObjectRelease();
    v30 = v54;
    v31 = v49;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v49);
    v54 = v31;
    v34 = sub_100518FF0(v29);
    v35 = v31[2];
    v36 = (v33 & 1) == 0;
    v37 = v35 + v36;
    if (__OFADD__(v35, v36))
      goto LABEL_34;
    v38 = v33;
    if (v31[3] < v37)
      break;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      sub_100A9A648();
LABEL_28:
    v9 = v54;
    if ((v38 & 1) != 0)
    {
      v10 = v54[7];
      swift_bridgeObjectRelease();
      *(_QWORD *)(v10 + 8 * v34) = v30;
    }
    else
    {
      v54[(v34 >> 6) + 8] |= 1 << v34;
      *(_BYTE *)(v9[6] + v34) = v29;
      *(_QWORD *)(v9[7] + 8 * v34) = v30;
      v41 = v9[2];
      v42 = __OFADD__(v41, 1);
      v43 = v41 + 1;
      if (v42)
        goto LABEL_35;
      v9[2] = v43;
    }
    result = swift_bridgeObjectRelease();
    v8 = v48;
    if (v48 == v47)
    {
      *v44 = v9;
      return result;
    }
  }
  sub_100A862FC(v37, isUniquelyReferenced_nonNull_native);
  v39 = sub_100518FF0(v29);
  if ((v38 & 1) == (v40 & 1))
  {
    v34 = v39;
    goto LABEL_28;
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for BeaconObservation.ObservationType);
  __break(1u);
  return result;
}

uint64_t sub_1000735F4(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2[4] = a1;
  v2[5] = v1;
  v3 = type metadata accessor for BeaconEstimatedLocation(0);
  v2[6] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[7] = v4;
  v2[8] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for UUID(0);
  v2[9] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v2[10] = v6;
  v7 = *(_QWORD *)(v6 + 64);
  v2[11] = v7;
  v2[12] = swift_task_alloc((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100073680, v1, 0);
}

uint64_t sub_100073680()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[5];
  v0[2] = _swiftEmptyArrayStorage;
  v2 = *(_QWORD *)(v1 + 112);
  v0[13] = v2;
  return swift_task_switch(sub_1000736A8, v2, 0);
}

uint64_t sub_1000736A8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  v2 = v0[12];
  v1 = v0[13];
  v4 = v0[10];
  v3 = v0[11];
  v5 = v0[9];
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v4 + 16))(v2, v0[4], v5);
  v6 = *(unsigned __int8 *)(v4 + 80);
  v7 = (v6 + 24) & ~v6;
  v8 = swift_allocObject(&unk_101052E68, v7 + v3, v6 | 7);
  v0[14] = v8;
  *(_QWORD *)(v8 + 16) = v1;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v8 + v7, v2, v5);
  v9 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v10 = (_QWORD *)swift_task_alloc(v9);
  v0[15] = v10;
  v11 = sub_10001A9A8((uint64_t *)&unk_1010F7950);
  *v10 = v0;
  v10[1] = sub_10007379C;
  return unsafeBlocking<A>(_:)(v0 + 3, sub_10007CA2C, v8, v11);
}

uint64_t sub_10007379C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 104);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 120));
  swift_release();
  return swift_task_switch(sub_1000737FC, v1, 0);
}

uint64_t sub_1000737FC()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[5];
  v0[16] = v0[3];
  return swift_task_switch(sub_100073818, v1, 0);
}

uint64_t sub_100073818()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::String v6;
  Swift::String v7;
  uint64_t v8;
  uint64_t v9;
  Swift::String v10;
  id v11;
  NSString v12;
  id v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;

  v23 = *(_QWORD *)(v0 + 128);
  swift_bridgeObjectRetain(v23);
  sub_100325330(&v23);
  swift_bridgeObjectRelease();
  v1 = *(_QWORD *)(v23 + 16);
  if (v1)
  {
    v2 = *(_QWORD *)(v0 + 56);
    v3 = v23 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
    v22 = *(_QWORD *)(v2 + 72);
    do
    {
      v4 = *(_QWORD *)(v0 + 72);
      sub_10005972C(v3, *(_QWORD *)(v0 + 64), type metadata accessor for BeaconEstimatedLocation);
      v23 = 0;
      v24 = 0xE000000000000000;
      _StringGuts.grow(_:)(30);
      swift_bridgeObjectRelease();
      v23 = 0xD000000000000019;
      v24 = 0x8000000100EC6900;
      v5 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v6._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v4, v5);
      String.append(_:)(v6);
      swift_bridgeObjectRelease();
      v7._countAndFlagsBits = 32;
      v7._object = (void *)0xE100000000000000;
      String.append(_:)(v7);
      v8 = type metadata accessor for Date(0);
      v9 = sub_100006204(&qword_1010EE0F0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
      v10._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v8, v9);
      String.append(_:)(v10);
      swift_bridgeObjectRelease();
      v11 = objc_allocWithZone((Class)SPDataIntegrityCheck);
      v12 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      v13 = objc_msgSend(v11, "initWithValue:severity:", v12, 0);

      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v14);
      v16 = *(_QWORD *)((*(_QWORD *)(v0 + 16) & 0xFFFFFFFFFFFFFF8) + 0x10);
      v15 = *(_QWORD *)((*(_QWORD *)(v0 + 16) & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v16 >= v15 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v15 > 1, v16 + 1, 1);
      v17 = *(_QWORD *)(v0 + 64);
      v18 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v16, v13);
      specialized Array._endMutation()(v18);
      sub_1000126B0(v17, type metadata accessor for BeaconEstimatedLocation);
      v3 += v22;
      --v1;
    }
    while (v1);
  }
  swift_release();
  v19 = *(_QWORD *)(v0 + 64);
  v20 = *(_QWORD *)(v0 + 16);
  swift_task_dealloc(*(_QWORD *)(v0 + 96));
  swift_task_dealloc(v19);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v20);
}

uint64_t sub_100073AB8(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  v2[7] = a1;
  v2[8] = v1;
  v3 = sub_10001A9A8((uint64_t *)&unk_1010EE160);
  v2[9] = v3;
  v2[10] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for OwnerPeerTrust(0);
  v2[11] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v2[12] = v5;
  v2[13] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for UUID(0);
  v2[14] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v2[15] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v2[16] = v8;
  v9 = (v8 + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[17] = swift_task_alloc(v9);
  v2[18] = swift_task_alloc(v9);
  v10 = sub_10001A9A8(&qword_1010ED860);
  v2[19] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100073BA0, v1, 0);
}

uint64_t sub_100073BA0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  void (*v5)(uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  void (*v10)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  void (*v18)(uint64_t, uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  *(_QWORD *)(v0 + 48) = _swiftEmptyArrayStorage;
  v1 = *(_QWORD *)(v0 + 56);
  v2 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v0 + 160) = v2;
  v3 = *(_QWORD *)(v0 + 120);
  if (v2)
  {
    v4 = *(_DWORD *)(v3 + 80);
    *(_DWORD *)(v0 + 248) = v4;
    *(_QWORD *)(v0 + 168) = *(_QWORD *)(v3 + 72);
    v5 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v3 + 16);
    *(_QWORD *)(v0 + 176) = v5;
    *(_QWORD *)(v0 + 184) = 0;
    v6 = *(_QWORD *)(v0 + 152);
    v7 = *(_QWORD *)(v0 + 112);
    v8 = v1 + ((v4 + 32) & ~(unint64_t)v4);
    v9 = swift_bridgeObjectRetain(v1);
    v5(v6, v8, v7, v9);
    v10 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v3 + 56);
    *(_QWORD *)(v0 + 192) = v10;
    v10(v6, 0, 1, v7);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v6, 1, v7) != 1)
    {
      v11 = *(_QWORD *)(v0 + 144);
      v12 = *(_QWORD *)(v0 + 152);
      v13 = *(_QWORD *)(v0 + 112);
      v14 = *(_QWORD *)(v0 + 64);
      v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 120) + 32);
      *(_QWORD *)(v0 + 200) = v15;
      v15(v11, v12, v13);
      v16 = *(_QWORD *)(v14 + 112);
      *(_QWORD *)(v0 + 208) = v16;
      return swift_task_switch(sub_100073D28, v16, 0);
    }
  }
  else
  {
    v18 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))(v3 + 56);
    v19 = *(_QWORD *)(v0 + 152);
    v20 = *(_QWORD *)(v0 + 112);
    v21 = swift_bridgeObjectRetain(v1);
    v18(v19, 1, 1, v20, v21);
  }
  v22 = *(_QWORD *)(v0 + 144);
  v23 = *(_QWORD *)(v0 + 152);
  v24 = *(_QWORD *)(v0 + 136);
  v25 = *(_QWORD *)(v0 + 104);
  v26 = *(_QWORD *)(v0 + 80);
  swift_bridgeObjectRelease();
  v27 = *(_QWORD *)(v0 + 48);
  swift_task_dealloc(v23);
  swift_task_dealloc(v22);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v27);
}

uint64_t sub_100073D28()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v2 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 200);
  v1 = *(_QWORD *)(v0 + 208);
  v3 = *(unsigned __int8 *)(v0 + 248);
  v4 = *(_QWORD *)(v0 + 136);
  v5 = *(_QWORD *)(v0 + 112);
  v6 = (v3 + 24) & ~v3;
  v7 = v6 + *(_QWORD *)(v0 + 128);
  v8 = v3 | 7;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v0 + 176))(v4, *(_QWORD *)(v0 + 144), v5);
  v9 = swift_allocObject(&unk_101052FD0, v7, v8);
  *(_QWORD *)(v0 + 216) = v9;
  *(_QWORD *)(v9 + 16) = v1;
  v2(v9 + v6, v4, v5);
  v10 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v11 = (_QWORD *)swift_task_alloc(v10);
  *(_QWORD *)(v0 + 224) = v11;
  *v11 = v0;
  v11[1] = sub_100073E0C;
  return unsafeBlocking<A>(_:)(*(_QWORD *)(v0 + 80), sub_10007CC14, v9, *(_QWORD *)(v0 + 72));
}

uint64_t sub_100073E0C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 64);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 224));
  swift_release();
  return swift_task_switch(sub_100073E6C, v1, 0);
}

uint64_t sub_100073E6C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  Swift::String v4;
  id v5;
  NSString v6;
  id v7;
  id v8;
  id v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t);
  void (*v24)(uint64_t, unint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(uint64_t, uint64_t, uint64_t);
  uint64_t v42;
  uint64_t (*v43)(uint64_t);

  v1 = *(_QWORD *)(v0 + 88);
  v2 = *(_QWORD *)(v0 + 80);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 96) + 48))(v2, 1, v1) != 1)
  {
    v18 = *(_QWORD *)(v0 + 104);
    sub_1000126EC(v2, v18, type metadata accessor for OwnerPeerTrust);
    v19 = *(int *)(v1 + 28);
    *(_DWORD *)(v0 + 252) = v19;
    v20 = v18 + v19;
    v43 = (uint64_t (*)(uint64_t))((char *)&dword_101112238 + dword_101112238);
    v21 = (_QWORD *)swift_task_alloc(unk_10111223C);
    *(_QWORD *)(v0 + 232) = v21;
    *v21 = v0;
    v21[1] = sub_1000741A8;
    v22 = v20;
    v23 = v43;
    return v23(v22);
  }
  v3 = sub_100004048(v2, (uint64_t *)&unk_1010EE160);
  *(_QWORD *)(v0 + 16) = 0xD000000000000010;
  *(_QWORD *)(v0 + 24) = 0x8000000100EC6AB0;
  v4._countAndFlagsBits = UUID.uuidString.getter(v3);
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5 = objc_allocWithZone((Class)SPDataIntegrityCheck);
  v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  v7 = objc_msgSend(v5, "initWithValue:severity:", v6, 2);

  v8 = objc_msgSend(objc_allocWithZone((Class)SPPeerTrustDataIntegrity), "initWithPeerTrustRecord:messagingDestination:", v7, 0);
  v9 = v8;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v9);
  v11 = *(_QWORD *)((*(_QWORD *)(v0 + 48) & 0xFFFFFFFFFFFFFF8) + 0x10);
  v10 = *(_QWORD *)((*(_QWORD *)(v0 + 48) & 0xFFFFFFFFFFFFFF8) + 0x18);
  if (v11 >= v10 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v10 > 1, v11 + 1, 1);
  v12 = *(_QWORD *)(v0 + 160);
  v13 = *(_QWORD *)(v0 + 144);
  v14 = *(_QWORD *)(v0 + 112);
  v15 = *(_QWORD *)(v0 + 120);
  v16 = *(_QWORD *)(v0 + 184) + 1;
  v17 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v11, v9);
  specialized Array._endMutation()(v17);

  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v13, v14);
  if (v16 == v12)
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(v0 + 192))(*(_QWORD *)(v0 + 152), 1, 1, *(_QWORD *)(v0 + 112));
LABEL_8:
    v30 = *(_QWORD *)(v0 + 144);
    v31 = *(_QWORD *)(v0 + 152);
    v32 = *(_QWORD *)(v0 + 136);
    v33 = *(_QWORD *)(v0 + 104);
    v34 = *(_QWORD *)(v0 + 80);
    swift_bridgeObjectRelease();
    v35 = *(_QWORD *)(v0 + 48);
    swift_task_dealloc(v31);
    swift_task_dealloc(v30);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    v23 = *(uint64_t (**)(uint64_t))(v0 + 8);
    v22 = v35;
    return v23(v22);
  }
  v24 = *(void (**)(uint64_t, unint64_t, uint64_t))(v0 + 176);
  v25 = *(_QWORD *)(v0 + 184) + 1;
  *(_QWORD *)(v0 + 184) = v25;
  v26 = *(_QWORD *)(v0 + 152);
  v27 = *(_QWORD *)(v0 + 112);
  v28 = *(_QWORD *)(v0 + 120);
  v24(v26, *(_QWORD *)(v0 + 56)+ ((*(unsigned __int8 *)(v0 + 248) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 248))+ *(_QWORD *)(v0 + 168) * v25, v27);
  v29 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v28 + 56);
  *(_QWORD *)(v0 + 192) = v29;
  v29(v26, 0, 1, v27);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27) == 1)
    goto LABEL_8;
  v37 = *(_QWORD *)(v0 + 144);
  v38 = *(_QWORD *)(v0 + 152);
  v39 = *(_QWORD *)(v0 + 112);
  v40 = *(_QWORD *)(v0 + 64);
  v41 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 120) + 32);
  *(_QWORD *)(v0 + 200) = v41;
  v41(v37, v38, v39);
  v42 = *(_QWORD *)(v40 + 112);
  *(_QWORD *)(v0 + 208) = v42;
  return swift_task_switch(sub_100073D28, v42, 0);
}

uint64_t sub_1000741A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)();

  v5 = *v4;
  v6 = *(_QWORD *)(*v4 + 232);
  *(_QWORD *)(*v4 + 240) = a3;
  swift_task_dealloc(v6);
  v7 = *(_QWORD *)(v5 + 64);
  if (v3)
  {
    swift_errorRelease(v3);
    v8 = sub_10007458C;
  }
  else
  {
    v8 = sub_100074218;
  }
  return swift_task_switch(v8, v7, 0);
}

uint64_t sub_100074218()
{
  uint64_t v0;
  id v1;
  NSString v2;
  id v3;
  Swift::String v4;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  NSString v10;
  id v11;
  id v12;
  id v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, unint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(uint64_t, uint64_t, uint64_t);
  uint64_t v40;

  if (*(_QWORD *)(v0 + 240))
  {
    swift_bridgeObjectRelease();
    sub_100728868();
    v1 = objc_allocWithZone((Class)SPDataIntegrityCheck);
    v2 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    v3 = objc_msgSend(v1, "initWithValue:severity:", v2, 0);
  }
  else
  {
    *(_QWORD *)(v0 + 32) = 0xD00000000000001DLL;
    *(_QWORD *)(v0 + 40) = 0x8000000100EC6AD0;
    sub_100728868();
    String.append(_:)(v4);
    swift_bridgeObjectRelease();
    v5 = objc_allocWithZone((Class)SPDataIntegrityCheck);
    v2 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    v3 = objc_msgSend(v5, "initWithValue:severity:", v2, 2);
  }
  v6 = v3;
  v7 = *(_QWORD *)(v0 + 104);

  UUID.uuidString.getter(v8);
  v9 = objc_allocWithZone((Class)SPDataIntegrityCheck);
  v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  v11 = objc_msgSend(v9, "initWithValue:severity:", v10, 0);

  v12 = objc_msgSend(objc_allocWithZone((Class)SPPeerTrustDataIntegrity), "initWithPeerTrustRecord:messagingDestination:", v11, v6);
  sub_1000126B0(v7, type metadata accessor for OwnerPeerTrust);
  v13 = v12;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v13);
  v15 = *(_QWORD *)((*(_QWORD *)(v0 + 48) & 0xFFFFFFFFFFFFFF8) + 0x10);
  v14 = *(_QWORD *)((*(_QWORD *)(v0 + 48) & 0xFFFFFFFFFFFFFF8) + 0x18);
  if (v15 >= v14 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v14 > 1, v15 + 1, 1);
  v16 = *(_QWORD *)(v0 + 160);
  v17 = *(_QWORD *)(v0 + 144);
  v18 = *(_QWORD *)(v0 + 112);
  v19 = *(_QWORD *)(v0 + 120);
  v20 = *(_QWORD *)(v0 + 184) + 1;
  v21 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v15, v13);
  specialized Array._endMutation()(v21);

  (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v17, v18);
  if (v20 == v16)
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(v0 + 192))(*(_QWORD *)(v0 + 152), 1, 1, *(_QWORD *)(v0 + 112));
LABEL_9:
    v28 = *(_QWORD *)(v0 + 144);
    v29 = *(_QWORD *)(v0 + 152);
    v30 = *(_QWORD *)(v0 + 136);
    v31 = *(_QWORD *)(v0 + 104);
    v32 = *(_QWORD *)(v0 + 80);
    swift_bridgeObjectRelease();
    v33 = *(_QWORD *)(v0 + 48);
    swift_task_dealloc(v29);
    swift_task_dealloc(v28);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v33);
  }
  v22 = *(void (**)(uint64_t, unint64_t, uint64_t))(v0 + 176);
  v23 = *(_QWORD *)(v0 + 184) + 1;
  *(_QWORD *)(v0 + 184) = v23;
  v24 = *(_QWORD *)(v0 + 152);
  v25 = *(_QWORD *)(v0 + 112);
  v26 = *(_QWORD *)(v0 + 120);
  v22(v24, *(_QWORD *)(v0 + 56)+ ((*(unsigned __int8 *)(v0 + 248) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 248))+ *(_QWORD *)(v0 + 168) * v23, v25);
  v27 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v26 + 56);
  *(_QWORD *)(v0 + 192) = v27;
  v27(v24, 0, 1, v25);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25) == 1)
    goto LABEL_9;
  v35 = *(_QWORD *)(v0 + 144);
  v36 = *(_QWORD *)(v0 + 152);
  v37 = *(_QWORD *)(v0 + 112);
  v38 = *(_QWORD *)(v0 + 64);
  v39 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 120) + 32);
  *(_QWORD *)(v0 + 200) = v39;
  v39(v35, v36, v37);
  v40 = *(_QWORD *)(v38 + 112);
  *(_QWORD *)(v0 + 208) = v40;
  return swift_task_switch(sub_100073D28, v40, 0);
}

uint64_t sub_10007458C()
{
  uint64_t v0;
  Swift::String v1;
  id v2;
  NSString v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  NSString v8;
  id v9;
  id v10;
  id v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, unint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(uint64_t, uint64_t, uint64_t);
  uint64_t v38;

  *(_QWORD *)(v0 + 32) = 0xD00000000000001DLL;
  *(_QWORD *)(v0 + 40) = 0x8000000100EC6AD0;
  sub_100728868();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2 = objc_allocWithZone((Class)SPDataIntegrityCheck);
  v3 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  v4 = objc_msgSend(v2, "initWithValue:severity:", v3, 2);
  v5 = *(_QWORD *)(v0 + 104);

  UUID.uuidString.getter(v6);
  v7 = objc_allocWithZone((Class)SPDataIntegrityCheck);
  v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  v9 = objc_msgSend(v7, "initWithValue:severity:", v8, 0);

  v10 = objc_msgSend(objc_allocWithZone((Class)SPPeerTrustDataIntegrity), "initWithPeerTrustRecord:messagingDestination:", v9, v4);
  sub_1000126B0(v5, type metadata accessor for OwnerPeerTrust);
  v11 = v10;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v11);
  v13 = *(_QWORD *)((*(_QWORD *)(v0 + 48) & 0xFFFFFFFFFFFFFF8) + 0x10);
  v12 = *(_QWORD *)((*(_QWORD *)(v0 + 48) & 0xFFFFFFFFFFFFFF8) + 0x18);
  if (v13 >= v12 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1, v13 + 1, 1);
  v14 = *(_QWORD *)(v0 + 160);
  v15 = *(_QWORD *)(v0 + 144);
  v16 = *(_QWORD *)(v0 + 112);
  v17 = *(_QWORD *)(v0 + 120);
  v18 = *(_QWORD *)(v0 + 184) + 1;
  v19 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v13, v11);
  specialized Array._endMutation()(v19);

  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v15, v16);
  if (v18 == v14)
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(v0 + 192))(*(_QWORD *)(v0 + 152), 1, 1, *(_QWORD *)(v0 + 112));
LABEL_6:
    v26 = *(_QWORD *)(v0 + 144);
    v27 = *(_QWORD *)(v0 + 152);
    v28 = *(_QWORD *)(v0 + 136);
    v29 = *(_QWORD *)(v0 + 104);
    v30 = *(_QWORD *)(v0 + 80);
    swift_bridgeObjectRelease();
    v31 = *(_QWORD *)(v0 + 48);
    swift_task_dealloc(v27);
    swift_task_dealloc(v26);
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v31);
  }
  v20 = *(void (**)(uint64_t, unint64_t, uint64_t))(v0 + 176);
  v21 = *(_QWORD *)(v0 + 184) + 1;
  *(_QWORD *)(v0 + 184) = v21;
  v22 = *(_QWORD *)(v0 + 152);
  v23 = *(_QWORD *)(v0 + 112);
  v24 = *(_QWORD *)(v0 + 120);
  v20(v22, *(_QWORD *)(v0 + 56)+ ((*(unsigned __int8 *)(v0 + 248) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 248))+ *(_QWORD *)(v0 + 168) * v21, v23);
  v25 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v24 + 56);
  *(_QWORD *)(v0 + 192) = v25;
  v25(v22, 0, 1, v23);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23) == 1)
    goto LABEL_6;
  v33 = *(_QWORD *)(v0 + 144);
  v34 = *(_QWORD *)(v0 + 152);
  v35 = *(_QWORD *)(v0 + 112);
  v36 = *(_QWORD *)(v0 + 64);
  v37 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 120) + 32);
  *(_QWORD *)(v0 + 200) = v37;
  v37(v33, v34, v35);
  v38 = *(_QWORD *)(v36 + 112);
  *(_QWORD *)(v0 + 208) = v38;
  return swift_task_switch(sub_100073D28, v38, 0);
}

uint64_t sub_1000748A4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3[7] = a2;
  v3[8] = v2;
  v3[6] = a1;
  v4 = type metadata accessor for KeyDropJoinToken(0);
  v3[9] = v4;
  v3[10] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10001A9A8(&qword_10110F130);
  v3[11] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for SharingCircleSecretValue(0);
  v3[12] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[13] = v7;
  v8 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[14] = swift_task_alloc(v8);
  v3[15] = swift_task_alloc(v8);
  v3[16] = swift_task_alloc(v8);
  v3[17] = swift_task_alloc(v8);
  v9 = type metadata accessor for SharingCircleSecret(0);
  v3[18] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v3[19] = v10;
  v11 = (*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[20] = swift_task_alloc(v11);
  v3[21] = swift_task_alloc(v11);
  v12 = type metadata accessor for UUID(0);
  v3[22] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v3[23] = v13;
  v14 = *(_QWORD *)(v13 + 64);
  v3[24] = v14;
  v3[25] = swift_task_alloc((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000749DC, v2, 0);
}

uint64_t sub_1000749DC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[8];
  v0[4] = _swiftEmptyArrayStorage;
  v2 = *(_QWORD *)(v1 + 112);
  v0[26] = v2;
  return swift_task_switch(sub_100074A04, v2, 0);
}

uint64_t sub_100074A04()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  v2 = v0[25];
  v1 = v0[26];
  v4 = v0[23];
  v3 = v0[24];
  v5 = v0[22];
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v4 + 16))(v2, v0[6], v5);
  v6 = *(unsigned __int8 *)(v4 + 80);
  v7 = (v6 + 24) & ~v6;
  v8 = swift_allocObject(&unk_101052FA8, v7 + v3, v6 | 7);
  v0[27] = v8;
  *(_QWORD *)(v8 + 16) = v1;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v8 + v7, v2, v5);
  v9 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v10 = (_QWORD *)swift_task_alloc(v9);
  v0[28] = v10;
  v11 = sub_10001A9A8(&qword_1010EC8C8);
  *v10 = v0;
  v10[1] = sub_100074AF8;
  return unsafeBlocking<A>(_:)(v0 + 5, sub_10007CB00, v8, v11);
}

uint64_t sub_100074AF8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 208);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 224));
  swift_release();
  return swift_task_switch(sub_100074B58, v1, 0);
}

uint64_t sub_100074B58()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[8];
  v0[29] = v0[5];
  return swift_task_switch(sub_100074B74, v1, 0);
}

uint64_t sub_100074B74()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  void *v8;
  Swift::String v9;
  Swift::Int v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  Swift::String v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  Swift::String v49;
  Swift::String v50;
  Swift::String v51;
  Swift::String v52;
  Swift::String v53;
  Swift::String v54;
  Swift::String v55;
  id v56;
  NSString v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  id v63;
  id v64;
  Class isa;
  id v66;
  uint64_t result;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;

  v1 = *(_QWORD *)(v0 + 232);
  if (*(_QWORD *)(v1 + 16))
  {
    v74 = *(_QWORD *)(v0 + 144);
    v68 = *(_QWORD *)(v0 + 128);
    v69 = *(_QWORD *)(v0 + 88);
    v71 = *(_QWORD *)(v0 + 104);
    v2 = *(_QWORD *)(v0 + 168);
    sub_10005972C(v1+ ((*(unsigned __int8 *)(*(_QWORD *)(v0 + 152) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v0 + 152) + 80)), v2, type metadata accessor for SharingCircleSecret);
    v3 = (uint64_t *)(v2 + *(int *)(v74 + 32));
    v5 = *v3;
    v4 = v3[1];
    v6 = (uint64_t *)(v2 + *(int *)(v74 + 28));
    v7 = *v6;
    v8 = (void *)v6[1];
    sub_10001BBBC(v5, v4);
    swift_bridgeObjectRetain(v8);
    v9._countAndFlagsBits = v7;
    v9._object = v8;
    v10 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_101048400, v9);
    swift_bridgeObjectRelease();
    v11 = v4 >> 62;
    switch(v10)
    {
      case 1:
        __asm { BR              X10 }
        return result;
      case 2:
        __asm { BR              X10 }
        return result;
      case 3:
        v15 = type metadata accessor for PropertyListDecoder(0);
        swift_allocObject(v15, *(unsigned int *)(v15 + 48), *(unsigned __int16 *)(v15 + 52));
        PropertyListDecoder.init()();
        v16 = sub_10007CB0C();
        dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(&type metadata for PrivateKey, v5, v4, &type metadata for PrivateKey, v16);
        v17 = *(_QWORD **)(v0 + 88);
        v18 = *(_QWORD *)(v0 + 96);
        sub_10001BC14(v5, v4);
        swift_release();
        v19 = *(_QWORD *)(v0 + 24);
        *v17 = *(_QWORD *)(v0 + 16);
        *(_QWORD *)(v69 + 8) = v19;
        v12 = v17;
        v13 = v18;
        v14 = 3;
        break;
      case 4:
        v20 = *(_QWORD *)(v0 + 72);
        v21 = type metadata accessor for PropertyListDecoder(0);
        swift_allocObject(v21, *(unsigned int *)(v21 + 48), *(unsigned __int16 *)(v21 + 52));
        PropertyListDecoder.init()();
        v22 = sub_100006204(&qword_1010ECB10, type metadata accessor for KeyDropJoinToken, (uint64_t)&unk_100E69168);
        dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(v20, v5, v4, v20, v22);
        v24 = *(_QWORD *)(v0 + 88);
        v23 = *(_QWORD *)(v0 + 96);
        v25 = *(_QWORD *)(v0 + 80);
        sub_10001BC14(v5, v4);
        swift_release();
        sub_1000126EC(v25, v24, type metadata accessor for KeyDropJoinToken);
        v12 = (_QWORD *)v24;
        v13 = v23;
        v14 = 4;
        break;
      default:
        v12 = *(_QWORD **)(v0 + 88);
        v13 = *(_QWORD *)(v0 + 96);
        *v12 = v5;
        *(_QWORD *)(v69 + 8) = v4;
        v14 = 0;
        break;
    }
    swift_storeEnumTagMultiPayload(v12, v13, v14);
    v26 = *(_QWORD *)(v0 + 160);
    v27 = *(_QWORD *)(v0 + 168);
    v29 = *(_QWORD *)(v0 + 88);
    v28 = *(_QWORD *)(v0 + 96);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v71 + 56))(v29, 0, 1, v28);
    sub_10005972C(v27, v26, type metadata accessor for SharingCircleSecret);
    v30 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v71 + 48))(v29, 1, v28);
    v31 = *(_QWORD *)(v0 + 160);
    v32 = *(uint64_t **)(v0 + 128);
    if (v30 == 1)
    {
      v34 = *(_QWORD *)(v0 + 88);
      v33 = *(_QWORD *)(v0 + 96);
      v35 = (uint64_t *)(v31 + *(int *)(v74 + 32));
      v36 = *v35;
      v37 = v35[1];
      sub_10001BBBC(*v35, v37);
      sub_1000126B0(v31, type metadata accessor for SharingCircleSecret);
      *v32 = v36;
      *(_QWORD *)(v68 + 8) = v37;
      swift_storeEnumTagMultiPayload(v32, v33, 0);
      sub_100004048(v34, &qword_10110F130);
    }
    else
    {
      v38 = *(_QWORD *)(v0 + 88);
      sub_1000126B0(*(_QWORD *)(v0 + 160), type metadata accessor for SharingCircleSecret);
      sub_1000126EC(v38, (uint64_t)v32, type metadata accessor for SharingCircleSecretValue);
    }
    v39 = *(_QWORD *)(v0 + 136);
    v40 = *(_QWORD *)(v0 + 120);
    v41 = *(_QWORD *)(v0 + 96);
    sub_1000126EC(*(_QWORD *)(v0 + 128), v39, type metadata accessor for SharingCircleSecretValue);
    sub_10005972C(v39, v40, type metadata accessor for SharingCircleSecretValue);
    v42 = (char *)&loc_1000750C8 + dword_100075744[swift_getEnumCaseMultiPayload(v40, v41)];
    __asm { BR              X9 }
  }
  swift_bridgeObjectRelease();
  v43 = *(_QWORD *)(v0 + 56);
  v44 = v43 + 1;
  if (__OFADD__(v43, 1))
  {
    __break(1u);
    JUMPOUT(0x1000756F0);
  }
  _StringGuts.grow(_:)(82);
  v45._countAndFlagsBits = 0xD00000000000001CLL;
  v45._object = (void *)0x8000000100EC6A70;
  String.append(_:)(v45);
  if (v44)
    v46 = 0x65736C6166;
  else
    v46 = 1702195828;
  if (v44)
    v47 = 0xE500000000000000;
  else
    v47 = 0xE400000000000000;
  v48 = v47;
  String.append(_:)(*(Swift::String *)&v46);
  swift_bridgeObjectRelease();
  v49._object = (void *)0x8000000100EC6A90;
  v49._countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v49);
  v50._countAndFlagsBits = 0x65736C6166;
  v50._object = (void *)0xE500000000000000;
  String.append(_:)(v50);
  swift_bridgeObjectRelease();
  v51._countAndFlagsBits = 0x52646C6977202C29;
  v51._object = (void *)0xED00002820746F6FLL;
  String.append(_:)(v51);
  v52._countAndFlagsBits = 0x65736C6166;
  v52._object = (void *)0xE500000000000000;
  String.append(_:)(v52);
  swift_bridgeObjectRelease();
  v53._countAndFlagsBits = 0x4F7261656E202C29;
  v53._object = (void *)0xEE00282072656E77;
  String.append(_:)(v53);
  v54._countAndFlagsBits = 0x65736C6166;
  v54._object = (void *)0xE500000000000000;
  String.append(_:)(v54);
  swift_bridgeObjectRelease();
  v55._countAndFlagsBits = 41;
  v55._object = (void *)0xE100000000000000;
  String.append(_:)(v55);
  v56 = objc_allocWithZone((Class)SPDataIntegrityCheck);
  v57 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  v58 = *(_QWORD *)(v0 + 200);
  v59 = *(_QWORD *)(v0 + 160);
  v60 = *(_QWORD *)(v0 + 168);
  v61 = *(_QWORD *)(v0 + 128);
  v62 = *(_QWORD *)(v0 + 136);
  v70 = *(_QWORD *)(v0 + 120);
  v72 = *(_QWORD *)(v0 + 112);
  v73 = *(_QWORD *)(v0 + 88);
  v75 = *(_QWORD *)(v0 + 80);
  v63 = objc_msgSend(v56, "initWithValue:severity:", v57, 1);

  v64 = objc_allocWithZone((Class)SPSharedSecretsDataCheck);
  sub_10000F4A0(0, &qword_1010ECB00, SPDataIntegrityCheck_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v66 = objc_msgSend(v64, "initWithCompleteness:secrets:", v63, isa);

  swift_task_dealloc(v58);
  swift_task_dealloc(v60);
  swift_task_dealloc(v59);
  swift_task_dealloc(v62);
  swift_task_dealloc(v61);
  swift_task_dealloc(v70);
  swift_task_dealloc(v72);
  swift_task_dealloc(v73);
  swift_task_dealloc(v75);
  return (*(uint64_t (**)(id))(v0 + 8))(v66);
}

uint64_t sub_10007576C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  v2[15] = a1;
  v2[16] = v1;
  v3 = type metadata accessor for KeyDropInterface.KeyPackage(0);
  v2[17] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[18] = v4;
  v2[19] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for UUID(0);
  v2[20] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v2[21] = v6;
  v7 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[22] = swift_task_alloc(v7);
  v2[23] = swift_task_alloc(v7);
  v2[24] = swift_task_alloc(v7);
  v2[25] = swift_task_alloc(v7);
  v2[26] = swift_task_alloc(v7);
  v8 = type metadata accessor for SharingCircleKeyManager.Instruction(0);
  v2[27] = v8;
  v2[28] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10007584C, v1, 0);
}

uint64_t sub_10007584C()
{
  uint64_t v0;
  uint64_t v1;
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  void (*v17)(uint64_t, uint64_t, uint64_t);
  _QWORD *v18;
  void *v20;

  v1 = *(_QWORD *)(v0 + 120);
  *(_QWORD *)(v0 + 104) = _swiftEmptyArrayStorage;
  v2 = (int *)type metadata accessor for OwnerSharingCircle(0);
  v4 = *(_QWORD *)(v0 + 200);
  v3 = *(_QWORD *)(v0 + 208);
  v5 = *(_QWORD *)(v0 + 160);
  v6 = *(_QWORD *)(v0 + 168);
  v20 = sub_1003B98CC((uint64_t)off_1010530F0[*(char *)(v1 + v2[7])]);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  v7(v3, v1 + v2[5], v5);
  v8 = v2[6];
  *(_DWORD *)(v0 + 376) = v8;
  v7(v4, v1 + v8, v5);
  if (qword_1010E9A08 != -1)
    swift_once(&qword_1010E9A08, sub_1001EB1EC);
  v9 = *(int **)(v0 + 216);
  v10 = *(_QWORD *)(v0 + 224);
  v12 = *(_QWORD *)(v0 + 200);
  v11 = *(_QWORD *)(v0 + 208);
  v14 = *(_QWORD *)(v0 + 160);
  v13 = *(_QWORD *)(v0 + 168);
  v15 = sub_10001A9E8(v14, (uint64_t)qword_1011B6A78);
  v16 = sub_1006B8EE4((uint64_t)_swiftEmptyArrayStorage);
  UUID.init()(v16);
  v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 32);
  v17(v10 + v9[5], v11, v14);
  v17(v10 + v9[6], v12, v14);
  v7(v10 + v9[7], v15, v14);
  *(_QWORD *)(v10 + v9[8]) = v20;
  *(_BYTE *)(v10 + v9[9]) = 0;
  *(_BYTE *)(v10 + v9[10]) = 1;
  *(_QWORD *)(v10 + v9[11]) = v16;
  static Date.trustedNow.getter(v10 + v9[12]);
  v18 = (_QWORD *)swift_task_alloc(dword_10110D1D4);
  *(_QWORD *)(v0 + 232) = v18;
  *v18 = v0;
  v18[1] = sub_100075A08;
  return sub_100924450(*(_QWORD *)(v0 + 224));
}

uint64_t sub_100075A08(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 232);
  *(_QWORD *)(*v2 + 240) = a1;
  swift_task_dealloc(v4);
  v5 = *(_QWORD *)(v3 + 128);
  if (v1)
  {
    swift_errorRelease(v1);
    v6 = sub_100076FD8;
  }
  else
  {
    v6 = sub_100075A80;
  }
  return swift_task_switch(v6, v5, 0);
}

uint64_t sub_100075A80()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 128) + 112);
  *(_QWORD *)(v0 + 248) = v1;
  return swift_task_switch(sub_100075A9C, v1, 0);
}

uint64_t sub_100075A9C()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v2 = (_QWORD *)swift_task_alloc(v1);
  v0[32] = v2;
  v3 = type metadata accessor for BeaconKeyManager(0);
  v0[33] = v3;
  *v2 = v0;
  v2[1] = sub_100075B18;
  return unsafeBlocking<A>(_:)(v0 + 9, sub_10007C6FC, v0[31], v3);
}

uint64_t sub_100075B18()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 248);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 256));
  swift_release();
  return swift_task_switch(sub_100075B74, v1, 0);
}

uint64_t sub_100075B74()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 272) = *(_QWORD *)(v0 + 72);
  return swift_task_switch(sub_100075B90, 0, 0);
}

uint64_t sub_100075B90()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uid_t v3;
  _QWORD *v4;

  v1 = *(int *)(v0 + 376);
  v2 = *(_QWORD *)(v0 + 120);
  v3 = getuid();
  sub_100A06500(v3);
  v4 = (_QWORD *)swift_task_alloc(dword_1010FCEA4);
  *(_QWORD *)(v0 + 280) = v4;
  *v4 = v0;
  v4[1] = sub_100075C18;
  return sub_100476038(*(_QWORD *)(v0 + 192), v2 + v1, 0);
}

uint64_t sub_100075C18()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t (*v7)();
  uint64_t v8;
  void (*v9)(_QWORD, _QWORD);

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 280);
  *(_QWORD *)(*(_QWORD *)v1 + 288) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = v2[24];
    v5 = v2[20];
    v6 = *(void (**)(uint64_t, uint64_t))(v2[21] + 8);
    v2[37] = v6;
    v6(v4, v5);
    v7 = sub_100075CBC;
    v8 = 0;
  }
  else
  {
    v9 = *(void (**)(_QWORD, _QWORD))(v2[21] + 8);
    v9(v2[24], v2[20]);
    swift_release();
    v2[38] = v9;
    v8 = v2[31];
    v7 = sub_100075D0C;
  }
  return swift_task_switch(v7, v8, 0);
}

uint64_t sub_100075CBC()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[36];
  swift_release();
  swift_errorRelease(v1);
  v0[38] = v0[37];
  return swift_task_switch(sub_100075D0C, v0[31], 0);
}

uint64_t sub_100075D0C()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v2 = (_QWORD *)swift_task_alloc(v1);
  v0[39] = v2;
  *v2 = v0;
  v2[1] = sub_100075D7C;
  return unsafeBlocking<A>(_:)(v0 + 6, sub_10007C6FC, v0[31], v0[33]);
}

uint64_t sub_100075D7C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 248);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 312));
  swift_release();
  return swift_task_switch(sub_100075DDC, v1, 0);
}

uint64_t sub_100075DDC()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 320) = *(_QWORD *)(v0 + 48);
  return swift_task_switch(sub_100075DF8, 0, 0);
}

uint64_t sub_100075DF8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uid_t v3;
  _QWORD *v4;

  v1 = *(int *)(v0 + 376);
  v2 = *(_QWORD *)(v0 + 120);
  v3 = getuid();
  sub_100A06500(v3);
  v4 = (_QWORD *)swift_task_alloc(dword_1010FCEA4);
  *(_QWORD *)(v0 + 328) = v4;
  *v4 = v0;
  v4[1] = sub_100075E80;
  return sub_100476038(*(_QWORD *)(v0 + 184), v2 + v1, 1);
}

uint64_t sub_100075E80()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v5;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 328);
  *(_QWORD *)(*v1 + 336) = v0;
  swift_task_dealloc(v3);
  (*(void (**)(_QWORD, _QWORD))(v2 + 304))(*(_QWORD *)(v2 + 184), *(_QWORD *)(v2 + 160));
  if (v0)
  {
    v4 = sub_100075F14;
    v5 = 0;
  }
  else
  {
    swift_release();
    v5 = *(_QWORD *)(v2 + 248);
    v4 = sub_100075F5C;
  }
  return swift_task_switch(v4, v5, 0);
}

uint64_t sub_100075F14()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 336);
  swift_release();
  swift_errorRelease(v1);
  return swift_task_switch(sub_100075F5C, *(_QWORD *)(v0 + 248), 0);
}

uint64_t sub_100075F5C()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v2 = (_QWORD *)swift_task_alloc(v1);
  v0[43] = v2;
  *v2 = v0;
  v2[1] = sub_100075FCC;
  return unsafeBlocking<A>(_:)(v0 + 7, sub_10007C6FC, v0[31], v0[33]);
}

uint64_t sub_100075FCC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 248);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 344));
  swift_release();
  return swift_task_switch(sub_10007602C, v1, 0);
}

uint64_t sub_10007602C()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 352) = *(_QWORD *)(v0 + 56);
  return swift_task_switch(sub_100076048, 0, 0);
}

uint64_t sub_100076048()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uid_t v3;
  _QWORD *v4;

  v1 = *(int *)(v0 + 376);
  v2 = *(_QWORD *)(v0 + 120);
  v3 = getuid();
  sub_100A06500(v3);
  v4 = (_QWORD *)swift_task_alloc(dword_1010FCED4);
  *(_QWORD *)(v0 + 360) = v4;
  *v4 = v0;
  v4[1] = sub_1000760CC;
  return sub_100478384(*(_QWORD *)(v0 + 176), v2 + v1);
}

uint64_t sub_1000760CC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 360);
  *(_QWORD *)(*v1 + 368) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    (*(void (**)(_QWORD, _QWORD))(v2 + 304))(*(_QWORD *)(v2 + 176), *(_QWORD *)(v2 + 160));
    v4 = sub_100076878;
    v5 = 0;
  }
  else
  {
    v6 = *(void (**)(uint64_t, uint64_t))(v2 + 304);
    v7 = *(_QWORD *)(v2 + 176);
    v8 = *(_QWORD *)(v2 + 160);
    v9 = *(_QWORD *)(v2 + 128);
    v6(v7, v8);
    swift_release();
    v4 = sub_100076164;
    v5 = v9;
  }
  return swift_task_switch(v4, v5, 0);
}

uint64_t sub_100076164()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t);
  int8x8_t v5;
  _BYTE *v6;
  Swift::String v7;
  Swift::String v8;
  Swift::String v9;
  Swift::String v10;
  id v11;
  NSString v12;
  id v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t);
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  _BYTE *v27;
  Swift::String v28;
  Swift::String v29;
  Swift::String v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  int8x16_t v34;
  uint64x2_t *v35;
  unint64_t v36;
  int8x16_t v37;
  int8x16_t v38;
  unint64_t v39;
  unint64_t v40;
  int8x8_t *v41;
  int8x8_t v42;
  int8x8_t v43;
  unint64_t v44;
  int8x16_t v45;
  uint64x2_t *v46;
  unint64_t v47;
  int8x16_t v48;
  int8x16_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  int8x16_t v56;
  uint64x2_t *v57;
  unint64_t v58;
  int8x16_t v59;
  int8x16_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t *v63;
  unint64_t v64;
  unint64_t v65;
  Swift::String v66;
  Swift::String v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  int8x16_t v72;
  uint64x2_t *v73;
  unint64_t v74;
  int8x16_t v75;
  int8x16_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t *v79;
  unint64_t v80;
  unint64_t v81;
  Swift::String v82;
  id v83;
  NSString v84;
  id v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;

  v1 = *(_QWORD *)(v0 + 240);
  v101 = *(_QWORD *)(v1 + 16);
  if (v101)
  {
    v2 = 0;
    v3 = *(_QWORD *)(v0 + 144);
    v100 = *(_QWORD *)(v0 + 136);
    v98 = *(_QWORD *)(v3 + 72);
    v99 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v4 = type metadata accessor for KeyDropInterface.KeyPackage;
    while (1)
    {
      v19 = *(_QWORD *)(v0 + 152);
      v20 = v4;
      sub_10005972C(v99 + v2 * v98, v19, v4);
      swift_bridgeObjectRetain(*(_QWORD *)(v19 + *(int *)(v100 + 24)));
      v22 = sub_1000682FC(v21);
      swift_bridgeObjectRelease();
      v23 = v22[2];
      if (!v23)
      {
        v27 = *(_BYTE **)(v0 + 152);
        *(_QWORD *)(v0 + 16) = 0;
        *(_QWORD *)(v0 + 24) = 0xE000000000000000;
        v28._countAndFlagsBits = 0x636572726F636E49;
        v28._object = (void *)0xEF65756C61762074;
        String.append(_:)(v28);
        v29._countAndFlagsBits = 8250;
        v29._object = (void *)0xE200000000000000;
        String.append(_:)(v29);
        *(_BYTE *)(v0 + 380) = *v27;
        _print_unlocked<A, B>(_:_:)(v0 + 380, v0 + 16, &type metadata for KeyDropInterface.KeyType, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
        v30._countAndFlagsBits = 8250;
        v30._object = (void *)0xE200000000000000;
        String.append(_:)(v30);
        v31 = v22[2];
        if (v31)
        {
          v32 = v22[4];
          v33 = v31 - 1;
          if (v31 == 1)
          {
            v4 = v20;
            goto LABEL_42;
          }
          if (v31 >= 5)
          {
            v55 = v33 & 0xFFFFFFFFFFFFFFFCLL | 1;
            v56 = (int8x16_t)vdupq_n_s64(v32);
            v57 = (uint64x2_t *)(v22 + 7);
            v58 = v33 & 0xFFFFFFFFFFFFFFFCLL;
            v59 = v56;
            v4 = v20;
            do
            {
              v56 = vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v56, v57[-1]), (int8x16_t)v57[-1], v56);
              v59 = vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v59, *v57), *(int8x16_t *)v57, v59);
              v57 += 2;
              v58 -= 4;
            }
            while (v58);
            v60 = vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v59, (uint64x2_t)v56), v56, v59);
            v61 = vextq_s8(v60, v60, 8uLL).u64[0];
            v32 = (unint64_t)vbsl_s8((int8x8_t)vcgtd_u64(v61, v60.u64[0]), *(int8x8_t *)v60.i8, (int8x8_t)v61);
            if (v33 != (v33 & 0xFFFFFFFFFFFFFFFCLL))
              goto LABEL_38;
          }
          else
          {
            v55 = 1;
            v4 = v20;
LABEL_38:
            v62 = v31 - v55;
            v63 = &v22[v55 + 4];
            do
            {
              v65 = *v63++;
              v64 = v65;
              if (v65 < v32)
                v32 = v64;
              --v62;
            }
            while (v62);
          }
        }
        else
        {
          v32 = 0;
          v4 = v20;
        }
LABEL_42:
        *(_QWORD *)(v0 + 112) = v32;
        v66._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt64, &protocol witness table for UInt64);
        String.append(_:)(v66);
        swift_bridgeObjectRelease();
        v67._countAndFlagsBits = 3026478;
        v67._object = (void *)0xE300000000000000;
        String.append(_:)(v67);
        v68 = v22[2];
        if (v68)
        {
          v69 = v22[4];
          v70 = v68 - 1;
          if (v68 != 1)
          {
            if (v68 >= 5)
            {
              v71 = v70 & 0xFFFFFFFFFFFFFFFCLL | 1;
              v72 = (int8x16_t)vdupq_n_s64(v69);
              v73 = (uint64x2_t *)(v22 + 7);
              v74 = v70 & 0xFFFFFFFFFFFFFFFCLL;
              v75 = v72;
              do
              {
                v72 = vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v72, v73[-1]), v72, (int8x16_t)v73[-1]);
                v75 = vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v75, *v73), v75, *(int8x16_t *)v73);
                v73 += 2;
                v74 -= 4;
              }
              while (v74);
              v76 = vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v72, (uint64x2_t)v75), v72, v75);
              v77 = vextq_s8(v76, v76, 8uLL).u64[0];
              v69 = (unint64_t)vbsl_s8((int8x8_t)vcgtd_u64(v76.u64[0], v77), *(int8x8_t *)v76.i8, (int8x8_t)v77);
              if (v70 != (v70 & 0xFFFFFFFFFFFFFFFCLL))
                goto LABEL_50;
            }
            else
            {
              v71 = 1;
LABEL_50:
              v78 = v68 - v71;
              v79 = &v22[v71 + 4];
              do
              {
                v81 = *v79++;
                v80 = v81;
                if (v69 <= v81)
                  v69 = v80;
                --v78;
              }
              while (v78);
            }
          }
        }
        else
        {
          v69 = 0;
        }
        swift_bridgeObjectRelease();
        *(_QWORD *)(v0 + 80) = v69;
        v82._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt64, &protocol witness table for UInt64);
        String.append(_:)(v82);
        swift_bridgeObjectRelease();
        v83 = objc_allocWithZone((Class)SPDataIntegrityCheck);
        v84 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        v85 = objc_msgSend(v83, "initWithValue:severity:", v84, 1);

        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v86);
        v88 = *(_QWORD *)((*(_QWORD *)(v0 + 104) & 0xFFFFFFFFFFFFFF8) + 0x10);
        v87 = *(_QWORD *)((*(_QWORD *)(v0 + 104) & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (v88 >= v87 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v87 > 1, v88 + 1, 1);
        v17 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v88, v85);
        goto LABEL_7;
      }
      v24 = v22[4];
      v25 = v23 - 1;
      if (v23 == 1)
      {
        v5 = (int8x8_t)v22[4];
        goto LABEL_4;
      }
      if (v23 < 5)
        break;
      v34 = (int8x16_t)vdupq_n_s64(v24);
      v26 = v25 & 0xFFFFFFFFFFFFFFFCLL | 1;
      v35 = (uint64x2_t *)(v22 + 7);
      v36 = v25 & 0xFFFFFFFFFFFFFFFCLL;
      v37 = v34;
      do
      {
        v34 = vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v34, v35[-1]), (int8x16_t)v35[-1], v34);
        v37 = vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v37, *v35), *(int8x16_t *)v35, v37);
        v35 += 2;
        v36 -= 4;
      }
      while (v36);
      v38 = vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v37, (uint64x2_t)v34), v34, v37);
      v39 = vextq_s8(v38, v38, 8uLL).u64[0];
      v5 = vbsl_s8((int8x8_t)vcgtd_u64(v39, v38.u64[0]), *(int8x8_t *)v38.i8, (int8x8_t)v39);
      if (v25 != (v25 & 0xFFFFFFFFFFFFFFFCLL))
        goto LABEL_18;
LABEL_22:
      if (v23 < 5)
      {
        v44 = 1;
LABEL_27:
        v51 = v23 - v44;
        v52 = &v22[v44 + 4];
        do
        {
          v54 = *v52++;
          v53 = v54;
          if (v24 <= v54)
            v24 = v53;
          --v51;
        }
        while (v51);
        goto LABEL_4;
      }
      v44 = v25 & 0xFFFFFFFFFFFFFFFCLL | 1;
      v45 = (int8x16_t)vdupq_n_s64(v24);
      v46 = (uint64x2_t *)(v22 + 7);
      v47 = v25 & 0xFFFFFFFFFFFFFFFCLL;
      v48 = v45;
      do
      {
        v45 = vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v45, v46[-1]), v45, (int8x16_t)v46[-1]);
        v48 = vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v48, *v46), v48, *(int8x16_t *)v46);
        v46 += 2;
        v47 -= 4;
      }
      while (v47);
      v49 = vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v45, (uint64x2_t)v48), v45, v48);
      v50 = vextq_s8(v49, v49, 8uLL).u64[0];
      v24 = (unint64_t)vbsl_s8((int8x8_t)vcgtd_u64(v49.u64[0], v50), *(int8x8_t *)v49.i8, (int8x8_t)v50);
      if (v25 != (v25 & 0xFFFFFFFFFFFFFFFCLL))
        goto LABEL_27;
LABEL_4:
      v6 = *(_BYTE **)(v0 + 152);
      swift_bridgeObjectRelease();
      *(_QWORD *)(v0 + 32) = 0;
      *(_QWORD *)(v0 + 40) = 0xE000000000000000;
      *(_BYTE *)(v0 + 381) = *v6;
      _print_unlocked<A, B>(_:_:)(v0 + 381, v0 + 32, &type metadata for KeyDropInterface.KeyType, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
      v7._countAndFlagsBits = 8250;
      v7._object = (void *)0xE200000000000000;
      String.append(_:)(v7);
      *(int8x8_t *)(v0 + 88) = v5;
      v8._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt64, &protocol witness table for UInt64);
      String.append(_:)(v8);
      swift_bridgeObjectRelease();
      v9._countAndFlagsBits = 3026478;
      v9._object = (void *)0xE300000000000000;
      String.append(_:)(v9);
      *(_QWORD *)(v0 + 96) = v24;
      v10._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt64, &protocol witness table for UInt64);
      String.append(_:)(v10);
      swift_bridgeObjectRelease();
      v11 = objc_allocWithZone((Class)SPDataIntegrityCheck);
      v12 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      v13 = objc_msgSend(v11, "initWithValue:severity:", v12, 0);

      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v14);
      v16 = *(_QWORD *)((*(_QWORD *)(v0 + 104) & 0xFFFFFFFFFFFFFF8) + 0x10);
      v15 = *(_QWORD *)((*(_QWORD *)(v0 + 104) & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v16 >= v15 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v15 > 1, v16 + 1, 1);
      v17 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v16, v13);
      v4 = v20;
LABEL_7:
      ++v2;
      v18 = *(_QWORD *)(v0 + 152);
      specialized Array._endMutation()(v17);
      sub_1000126B0(v18, v4);
      if (v2 == v101)
        goto LABEL_57;
    }
    v5 = (int8x8_t)v22[4];
    v26 = 1;
LABEL_18:
    v40 = v23 - v26;
    v41 = (int8x8_t *)&v22[v26 + 4];
    do
    {
      v43 = *v41++;
      v42 = v43;
      if (*(_QWORD *)&v43 < *(_QWORD *)&v5)
        v5 = v42;
      --v40;
    }
    while (v40);
    goto LABEL_22;
  }
LABEL_57:
  swift_bridgeObjectRelease();
  v89 = *(_QWORD *)(v0 + 104);
  v90 = *(_QWORD *)(v0 + 224);
  v92 = *(_QWORD *)(v0 + 200);
  v91 = *(_QWORD *)(v0 + 208);
  v94 = *(_QWORD *)(v0 + 184);
  v93 = *(_QWORD *)(v0 + 192);
  v95 = *(_QWORD *)(v0 + 176);
  v96 = *(_QWORD *)(v0 + 152);
  sub_1000126B0(v90, type metadata accessor for SharingCircleKeyManager.Instruction);
  swift_task_dealloc(v90);
  swift_task_dealloc(v91);
  swift_task_dealloc(v92);
  swift_task_dealloc(v93);
  swift_task_dealloc(v94);
  swift_task_dealloc(v95);
  swift_task_dealloc(v96);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v89);
}

uint64_t sub_100076878()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 368);
  v2 = *(_QWORD *)(v0 + 128);
  swift_release();
  swift_errorRelease(v1);
  return swift_task_switch(sub_1000768C4, v2, 0);
}

uint64_t sub_1000768C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t);
  int8x8_t v5;
  _BYTE *v6;
  Swift::String v7;
  Swift::String v8;
  Swift::String v9;
  Swift::String v10;
  id v11;
  NSString v12;
  id v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t);
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  _BYTE *v27;
  Swift::String v28;
  Swift::String v29;
  Swift::String v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  int8x16_t v34;
  uint64x2_t *v35;
  unint64_t v36;
  int8x16_t v37;
  int8x16_t v38;
  unint64_t v39;
  unint64_t v40;
  int8x8_t *v41;
  int8x8_t v42;
  int8x8_t v43;
  unint64_t v44;
  int8x16_t v45;
  uint64x2_t *v46;
  unint64_t v47;
  int8x16_t v48;
  int8x16_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  int8x16_t v56;
  uint64x2_t *v57;
  unint64_t v58;
  int8x16_t v59;
  int8x16_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t *v63;
  unint64_t v64;
  unint64_t v65;
  Swift::String v66;
  Swift::String v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  int8x16_t v72;
  uint64x2_t *v73;
  unint64_t v74;
  int8x16_t v75;
  int8x16_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t *v79;
  unint64_t v80;
  unint64_t v81;
  Swift::String v82;
  id v83;
  NSString v84;
  id v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;

  v1 = *(_QWORD *)(v0 + 240);
  v101 = *(_QWORD *)(v1 + 16);
  if (v101)
  {
    v2 = 0;
    v3 = *(_QWORD *)(v0 + 144);
    v100 = *(_QWORD *)(v0 + 136);
    v98 = *(_QWORD *)(v3 + 72);
    v99 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v4 = type metadata accessor for KeyDropInterface.KeyPackage;
    while (1)
    {
      v19 = *(_QWORD *)(v0 + 152);
      v20 = v4;
      sub_10005972C(v99 + v2 * v98, v19, v4);
      swift_bridgeObjectRetain(*(_QWORD *)(v19 + *(int *)(v100 + 24)));
      v22 = sub_1000682FC(v21);
      swift_bridgeObjectRelease();
      v23 = v22[2];
      if (!v23)
      {
        v27 = *(_BYTE **)(v0 + 152);
        *(_QWORD *)(v0 + 16) = 0;
        *(_QWORD *)(v0 + 24) = 0xE000000000000000;
        v28._countAndFlagsBits = 0x636572726F636E49;
        v28._object = (void *)0xEF65756C61762074;
        String.append(_:)(v28);
        v29._countAndFlagsBits = 8250;
        v29._object = (void *)0xE200000000000000;
        String.append(_:)(v29);
        *(_BYTE *)(v0 + 380) = *v27;
        _print_unlocked<A, B>(_:_:)(v0 + 380, v0 + 16, &type metadata for KeyDropInterface.KeyType, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
        v30._countAndFlagsBits = 8250;
        v30._object = (void *)0xE200000000000000;
        String.append(_:)(v30);
        v31 = v22[2];
        if (v31)
        {
          v32 = v22[4];
          v33 = v31 - 1;
          if (v31 == 1)
          {
            v4 = v20;
            goto LABEL_42;
          }
          if (v31 >= 5)
          {
            v55 = v33 & 0xFFFFFFFFFFFFFFFCLL | 1;
            v56 = (int8x16_t)vdupq_n_s64(v32);
            v57 = (uint64x2_t *)(v22 + 7);
            v58 = v33 & 0xFFFFFFFFFFFFFFFCLL;
            v59 = v56;
            v4 = v20;
            do
            {
              v56 = vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v56, v57[-1]), (int8x16_t)v57[-1], v56);
              v59 = vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v59, *v57), *(int8x16_t *)v57, v59);
              v57 += 2;
              v58 -= 4;
            }
            while (v58);
            v60 = vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v59, (uint64x2_t)v56), v56, v59);
            v61 = vextq_s8(v60, v60, 8uLL).u64[0];
            v32 = (unint64_t)vbsl_s8((int8x8_t)vcgtd_u64(v61, v60.u64[0]), *(int8x8_t *)v60.i8, (int8x8_t)v61);
            if (v33 != (v33 & 0xFFFFFFFFFFFFFFFCLL))
              goto LABEL_38;
          }
          else
          {
            v55 = 1;
            v4 = v20;
LABEL_38:
            v62 = v31 - v55;
            v63 = &v22[v55 + 4];
            do
            {
              v65 = *v63++;
              v64 = v65;
              if (v65 < v32)
                v32 = v64;
              --v62;
            }
            while (v62);
          }
        }
        else
        {
          v32 = 0;
          v4 = v20;
        }
LABEL_42:
        *(_QWORD *)(v0 + 112) = v32;
        v66._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt64, &protocol witness table for UInt64);
        String.append(_:)(v66);
        swift_bridgeObjectRelease();
        v67._countAndFlagsBits = 3026478;
        v67._object = (void *)0xE300000000000000;
        String.append(_:)(v67);
        v68 = v22[2];
        if (v68)
        {
          v69 = v22[4];
          v70 = v68 - 1;
          if (v68 != 1)
          {
            if (v68 >= 5)
            {
              v71 = v70 & 0xFFFFFFFFFFFFFFFCLL | 1;
              v72 = (int8x16_t)vdupq_n_s64(v69);
              v73 = (uint64x2_t *)(v22 + 7);
              v74 = v70 & 0xFFFFFFFFFFFFFFFCLL;
              v75 = v72;
              do
              {
                v72 = vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v72, v73[-1]), v72, (int8x16_t)v73[-1]);
                v75 = vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v75, *v73), v75, *(int8x16_t *)v73);
                v73 += 2;
                v74 -= 4;
              }
              while (v74);
              v76 = vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v72, (uint64x2_t)v75), v72, v75);
              v77 = vextq_s8(v76, v76, 8uLL).u64[0];
              v69 = (unint64_t)vbsl_s8((int8x8_t)vcgtd_u64(v76.u64[0], v77), *(int8x8_t *)v76.i8, (int8x8_t)v77);
              if (v70 != (v70 & 0xFFFFFFFFFFFFFFFCLL))
                goto LABEL_50;
            }
            else
            {
              v71 = 1;
LABEL_50:
              v78 = v68 - v71;
              v79 = &v22[v71 + 4];
              do
              {
                v81 = *v79++;
                v80 = v81;
                if (v69 <= v81)
                  v69 = v80;
                --v78;
              }
              while (v78);
            }
          }
        }
        else
        {
          v69 = 0;
        }
        swift_bridgeObjectRelease();
        *(_QWORD *)(v0 + 80) = v69;
        v82._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt64, &protocol witness table for UInt64);
        String.append(_:)(v82);
        swift_bridgeObjectRelease();
        v83 = objc_allocWithZone((Class)SPDataIntegrityCheck);
        v84 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        v85 = objc_msgSend(v83, "initWithValue:severity:", v84, 1);

        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v86);
        v88 = *(_QWORD *)((*(_QWORD *)(v0 + 104) & 0xFFFFFFFFFFFFFF8) + 0x10);
        v87 = *(_QWORD *)((*(_QWORD *)(v0 + 104) & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (v88 >= v87 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v87 > 1, v88 + 1, 1);
        v17 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v88, v85);
        goto LABEL_7;
      }
      v24 = v22[4];
      v25 = v23 - 1;
      if (v23 == 1)
      {
        v5 = (int8x8_t)v22[4];
        goto LABEL_4;
      }
      if (v23 < 5)
        break;
      v34 = (int8x16_t)vdupq_n_s64(v24);
      v26 = v25 & 0xFFFFFFFFFFFFFFFCLL | 1;
      v35 = (uint64x2_t *)(v22 + 7);
      v36 = v25 & 0xFFFFFFFFFFFFFFFCLL;
      v37 = v34;
      do
      {
        v34 = vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v34, v35[-1]), (int8x16_t)v35[-1], v34);
        v37 = vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v37, *v35), *(int8x16_t *)v35, v37);
        v35 += 2;
        v36 -= 4;
      }
      while (v36);
      v38 = vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v37, (uint64x2_t)v34), v34, v37);
      v39 = vextq_s8(v38, v38, 8uLL).u64[0];
      v5 = vbsl_s8((int8x8_t)vcgtd_u64(v39, v38.u64[0]), *(int8x8_t *)v38.i8, (int8x8_t)v39);
      if (v25 != (v25 & 0xFFFFFFFFFFFFFFFCLL))
        goto LABEL_18;
LABEL_22:
      if (v23 < 5)
      {
        v44 = 1;
LABEL_27:
        v51 = v23 - v44;
        v52 = &v22[v44 + 4];
        do
        {
          v54 = *v52++;
          v53 = v54;
          if (v24 <= v54)
            v24 = v53;
          --v51;
        }
        while (v51);
        goto LABEL_4;
      }
      v44 = v25 & 0xFFFFFFFFFFFFFFFCLL | 1;
      v45 = (int8x16_t)vdupq_n_s64(v24);
      v46 = (uint64x2_t *)(v22 + 7);
      v47 = v25 & 0xFFFFFFFFFFFFFFFCLL;
      v48 = v45;
      do
      {
        v45 = vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v45, v46[-1]), v45, (int8x16_t)v46[-1]);
        v48 = vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v48, *v46), v48, *(int8x16_t *)v46);
        v46 += 2;
        v47 -= 4;
      }
      while (v47);
      v49 = vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v45, (uint64x2_t)v48), v45, v48);
      v50 = vextq_s8(v49, v49, 8uLL).u64[0];
      v24 = (unint64_t)vbsl_s8((int8x8_t)vcgtd_u64(v49.u64[0], v50), *(int8x8_t *)v49.i8, (int8x8_t)v50);
      if (v25 != (v25 & 0xFFFFFFFFFFFFFFFCLL))
        goto LABEL_27;
LABEL_4:
      v6 = *(_BYTE **)(v0 + 152);
      swift_bridgeObjectRelease();
      *(_QWORD *)(v0 + 32) = 0;
      *(_QWORD *)(v0 + 40) = 0xE000000000000000;
      *(_BYTE *)(v0 + 381) = *v6;
      _print_unlocked<A, B>(_:_:)(v0 + 381, v0 + 32, &type metadata for KeyDropInterface.KeyType, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
      v7._countAndFlagsBits = 8250;
      v7._object = (void *)0xE200000000000000;
      String.append(_:)(v7);
      *(int8x8_t *)(v0 + 88) = v5;
      v8._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt64, &protocol witness table for UInt64);
      String.append(_:)(v8);
      swift_bridgeObjectRelease();
      v9._countAndFlagsBits = 3026478;
      v9._object = (void *)0xE300000000000000;
      String.append(_:)(v9);
      *(_QWORD *)(v0 + 96) = v24;
      v10._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt64, &protocol witness table for UInt64);
      String.append(_:)(v10);
      swift_bridgeObjectRelease();
      v11 = objc_allocWithZone((Class)SPDataIntegrityCheck);
      v12 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      v13 = objc_msgSend(v11, "initWithValue:severity:", v12, 0);

      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v14);
      v16 = *(_QWORD *)((*(_QWORD *)(v0 + 104) & 0xFFFFFFFFFFFFFF8) + 0x10);
      v15 = *(_QWORD *)((*(_QWORD *)(v0 + 104) & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v16 >= v15 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v15 > 1, v16 + 1, 1);
      v17 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v16, v13);
      v4 = v20;
LABEL_7:
      ++v2;
      v18 = *(_QWORD *)(v0 + 152);
      specialized Array._endMutation()(v17);
      sub_1000126B0(v18, v4);
      if (v2 == v101)
        goto LABEL_57;
    }
    v5 = (int8x8_t)v22[4];
    v26 = 1;
LABEL_18:
    v40 = v23 - v26;
    v41 = (int8x8_t *)&v22[v26 + 4];
    do
    {
      v43 = *v41++;
      v42 = v43;
      if (*(_QWORD *)&v43 < *(_QWORD *)&v5)
        v5 = v42;
      --v40;
    }
    while (v40);
    goto LABEL_22;
  }
LABEL_57:
  swift_bridgeObjectRelease();
  v89 = *(_QWORD *)(v0 + 104);
  v90 = *(_QWORD *)(v0 + 224);
  v92 = *(_QWORD *)(v0 + 200);
  v91 = *(_QWORD *)(v0 + 208);
  v94 = *(_QWORD *)(v0 + 184);
  v93 = *(_QWORD *)(v0 + 192);
  v95 = *(_QWORD *)(v0 + 176);
  v96 = *(_QWORD *)(v0 + 152);
  sub_1000126B0(v90, type metadata accessor for SharingCircleKeyManager.Instruction);
  swift_task_dealloc(v90);
  swift_task_dealloc(v91);
  swift_task_dealloc(v92);
  swift_task_dealloc(v93);
  swift_task_dealloc(v94);
  swift_task_dealloc(v95);
  swift_task_dealloc(v96);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v89);
}

uint64_t sub_100076FD8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  swift_bridgeObjectRelease();
  v1 = *(_QWORD *)(v0 + 224);
  v3 = *(_QWORD *)(v0 + 200);
  v2 = *(_QWORD *)(v0 + 208);
  v5 = *(_QWORD *)(v0 + 184);
  v4 = *(_QWORD *)(v0 + 192);
  v6 = *(_QWORD *)(v0 + 176);
  v7 = *(_QWORD *)(v0 + 152);
  sub_1000126B0(v1, type metadata accessor for SharingCircleKeyManager.Instruction);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(_QWORD *))(v0 + 8))(_swiftEmptyArrayStorage);
}

uint64_t sub_100077088(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2[2] = a1;
  v2[3] = v1;
  v3 = type metadata accessor for UUID(0);
  v2[4] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[5] = v4;
  v5 = *(_QWORD *)(v4 + 64);
  v2[6] = v5;
  v2[7] = swift_task_alloc((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10001A9A8((uint64_t *)&unk_1010EE180);
  v2[8] = v6;
  v2[9] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for SharedBeaconRecord(0);
  v2[10] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v2[11] = v8;
  v2[12] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10007713C, v1, 0);
}

uint64_t sub_10007713C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 24) + 112);
  *(_QWORD *)(v0 + 104) = v1;
  return swift_task_switch(sub_100077158, v1, 0);
}

uint64_t sub_100077158()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v1 = v0[13];
  v3 = v0[6];
  v2 = v0[7];
  v4 = v0[4];
  v5 = v0[5];
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v5 + 16))(v2, v0[2], v4);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (v6 + 24) & ~v6;
  v8 = swift_allocObject(&unk_101052F58, v7 + v3, v6 | 7);
  v0[14] = v8;
  *(_QWORD *)(v8 + 16) = v1;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(v8 + v7, v2, v4);
  v9 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v10 = (_QWORD *)swift_task_alloc(v9);
  v0[15] = v10;
  *v10 = v0;
  v10[1] = sub_100077230;
  return unsafeBlocking<A>(_:)(v0[9], sub_100067DF8, v8, v0[8]);
}

uint64_t sub_100077230()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 24);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 120));
  swift_release();
  return swift_task_switch(sub_100077290, v1, 0);
}

uint64_t sub_100077290()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  Swift::String v5;
  id v6;
  NSString v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  Swift::String v11;
  Swift::String v12;
  uint64_t v13;
  Swift::String v14;
  id v15;
  NSString v16;
  uint64_t v17;
  uint64_t v18;

  v1 = *(_QWORD *)(v0 + 80);
  v2 = *(_QWORD *)(v0 + 72);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 88) + 48))(v2, 1, v1) == 1)
  {
    v3 = *(_QWORD *)(v0 + 32);
    sub_100004048(v2, (uint64_t *)&unk_1010EE180);
    _StringGuts.grow(_:)(25);
    swift_bridgeObjectRelease();
    v4 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v5._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v3, v4);
    String.append(_:)(v5);
    swift_bridgeObjectRelease();
    v6 = objc_allocWithZone((Class)SPDataIntegrityCheck);
    v7 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    v8 = objc_msgSend(v6, "initWithValue:severity:", v7, 2);

  }
  else
  {
    v9 = *(_QWORD *)(v0 + 96);
    v10 = *(_QWORD *)(v0 + 32);
    sub_1000126EC(v2, v9, type metadata accessor for SharedBeaconRecord);
    _StringGuts.grow(_:)(25);
    swift_bridgeObjectRelease();
    sub_100690C6C(*(_BYTE *)(v9 + *(int *)(v1 + 64)));
    String.append(_:)(v11);
    swift_bridgeObjectRelease();
    v12._countAndFlagsBits = 32;
    v12._object = (void *)0xE100000000000000;
    String.append(_:)(v12);
    v13 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v14._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v10, v13);
    String.append(_:)(v14);
    swift_bridgeObjectRelease();
    v15 = objc_allocWithZone((Class)SPDataIntegrityCheck);
    v16 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    v8 = objc_msgSend(v15, "initWithValue:severity:", v16, 0);

    sub_1000126B0(v9, type metadata accessor for SharedBeaconRecord);
  }
  v17 = *(_QWORD *)(v0 + 72);
  v18 = *(_QWORD *)(v0 + 56);
  swift_task_dealloc(*(_QWORD *)(v0 + 96));
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  return (*(uint64_t (**)(id))(v0 + 8))(v8);
}

uint64_t sub_100077518(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2[2] = a1;
  v2[3] = v1;
  v3 = type metadata accessor for UUID(0);
  v2[4] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[5] = v4;
  v5 = *(_QWORD *)(v4 + 64);
  v2[6] = v5;
  v2[7] = swift_task_alloc((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10001A9A8((uint64_t *)&unk_101105880);
  v2[8] = v6;
  v2[9] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for BeaconNamingRecord(0);
  v2[10] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v2[11] = v8;
  v2[12] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000775CC, v1, 0);
}

uint64_t sub_1000775CC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 24) + 112);
  *(_QWORD *)(v0 + 104) = v1;
  return swift_task_switch(sub_1000775E8, v1, 0);
}

uint64_t sub_1000775E8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v1 = v0[13];
  v3 = v0[6];
  v2 = v0[7];
  v4 = v0[4];
  v5 = v0[5];
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v5 + 16))(v2, v0[2], v4);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (v6 + 24) & ~v6;
  v8 = swift_allocObject(&unk_101052F30, v7 + v3, v6 | 7);
  v0[14] = v8;
  *(_QWORD *)(v8 + 16) = v1;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(v8 + v7, v2, v4);
  v9 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v10 = (_QWORD *)swift_task_alloc(v9);
  v0[15] = v10;
  *v10 = v0;
  v10[1] = sub_1000776C0;
  return unsafeBlocking<A>(_:)(v0[9], sub_10007CBEC, v8, v0[8]);
}

uint64_t sub_1000776C0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 24);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 120));
  swift_release();
  return swift_task_switch(sub_100077720, v1, 0);
}

uint64_t sub_100077720()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  NSString v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  void *v10;
  Swift::String v11;
  Swift::String v12;
  uint64_t v13;
  Swift::String v14;
  id v15;
  NSString v16;
  uint64_t v17;
  uint64_t v18;

  v1 = *(_QWORD *)(v0 + 80);
  v2 = *(_QWORD *)(v0 + 72);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 88) + 48))(v2, 1, v1) == 1)
  {
    sub_100004048(v2, (uint64_t *)&unk_101105880);
    _StringGuts.grow(_:)(22);
    swift_bridgeObjectRelease();
    v3 = objc_allocWithZone((Class)SPDataIntegrityCheck);
    v4 = String._bridgeToObjectiveC()();
    v5 = objc_msgSend(v3, "initWithValue:severity:", v4, 0);

  }
  else
  {
    v6 = *(_QWORD *)(v0 + 96);
    v7 = *(_QWORD *)(v0 + 32);
    sub_1000126EC(v2, v6, type metadata accessor for BeaconNamingRecord);
    _StringGuts.grow(_:)(25);
    swift_bridgeObjectRelease();
    v8 = (uint64_t *)(v6 + *(int *)(v1 + 32));
    v9 = *v8;
    v10 = (void *)v8[1];
    swift_bridgeObjectRetain(v10);
    v11._countAndFlagsBits = v9;
    v11._object = v10;
    String.append(_:)(v11);
    swift_bridgeObjectRelease();
    v12._countAndFlagsBits = 32;
    v12._object = (void *)0xE100000000000000;
    String.append(_:)(v12);
    v13 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v14._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v7, v13);
    String.append(_:)(v14);
    swift_bridgeObjectRelease();
    v15 = objc_allocWithZone((Class)SPDataIntegrityCheck);
    v16 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    v5 = objc_msgSend(v15, "initWithValue:severity:", v16, 0);

    sub_1000126B0(v6, type metadata accessor for BeaconNamingRecord);
  }
  v17 = *(_QWORD *)(v0 + 72);
  v18 = *(_QWORD *)(v0 + 56);
  swift_task_dealloc(*(_QWORD *)(v0 + 96));
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  return (*(uint64_t (**)(id))(v0 + 8))(v5);
}

uint64_t sub_100077954(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2[21] = a1;
  v2[22] = v1;
  v3 = type metadata accessor for UUID(0);
  v2[23] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[24] = v4;
  v2[25] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000779B4, v1, 0);
}

uint64_t sub_1000779B4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 176) + 112);
  *(_QWORD *)(v0 + 208) = v1;
  return swift_task_switch(sub_1000779D0, v1, 0);
}

uint64_t sub_1000779D0()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v2 = (_QWORD *)swift_task_alloc(v1);
  *(_QWORD *)(v0 + 216) = v2;
  v3 = type metadata accessor for BeaconKeyManager(0);
  *v2 = v0;
  v2[1] = sub_100077A48;
  return unsafeBlocking<A>(_:)(v0 + 160, sub_10007C6FC, *(_QWORD *)(v0 + 208), v3);
}

uint64_t sub_100077A48()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 208);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 216));
  swift_release();
  return swift_task_switch(sub_100077AA4, v1, 0);
}

uint64_t sub_100077AA4()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[22];
  v0[28] = v0[20];
  return swift_task_switch(sub_100077AC0, v1, 0);
}

uint64_t sub_100077AC0()
{
  uid_t v0;

  v0 = getuid();
  sub_100A06500(v0);
  return swift_task_switch(sub_100077B04, 0, 0);
}

uint64_t sub_100077B04()
{
  uint64_t *v0;
  uint64_t **v1;

  v1 = (uint64_t **)swift_task_alloc(dword_1010FCEDC);
  v0[29] = (uint64_t)v1;
  *v1 = v0;
  v1[1] = (uint64_t *)sub_100077B70;
  return sub_100478B94((uint64_t)(v0 + 11), v0[21], v0[25]);
}

uint64_t sub_100077B70()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 232);
  *(_QWORD *)(*(_QWORD *)v1 + 240) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_100077DBC;
    v5 = 0;
  }
  else
  {
    v7 = v2[24];
    v6 = v2[25];
    v9 = v2 + 22;
    v8 = v2[22];
    (*(void (**)(uint64_t, _QWORD))(v7 + 8))(v6, v9[1]);
    swift_release();
    v4 = sub_100077BF4;
    v5 = v8;
  }
  return swift_task_switch(v4, v5, 0);
}

uint64_t sub_100077BF4()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  Swift::String v4;
  Swift::String v5;
  uint64_t v6;
  Swift::String v7;
  id v8;
  NSString v9;
  uint64_t v10;
  uint64_t v11;
  id v12;

  sub_100005CF0(v0 + 88, v0 + 16, (uint64_t *)&unk_1010F4830);
  v1 = *(void **)(v0 + 24);
  if (v1)
  {
    v2 = *(_QWORD *)(v0 + 184);
    v3 = *(_QWORD *)(v0 + 16);
    _StringGuts.grow(_:)(24);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain(v1);
    v4._countAndFlagsBits = v3;
    v4._object = v1;
    String.append(_:)(v4);
    sub_10007CB54((uint64_t *)(v0 + 88));
    swift_bridgeObjectRelease();
    v5._countAndFlagsBits = 32;
    v5._object = (void *)0xE100000000000000;
    String.append(_:)(v5);
    v6 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v7._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v2, v6);
    String.append(_:)(v7);
    swift_bridgeObjectRelease();
    v8 = objc_allocWithZone((Class)SPDataIntegrityCheck);
    v9 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    v10 = 0;
  }
  else
  {
    _StringGuts.grow(_:)(21);
    swift_bridgeObjectRelease();
    v8 = objc_allocWithZone((Class)SPDataIntegrityCheck);
    v9 = String._bridgeToObjectiveC()();
    v10 = 2;
  }
  v11 = *(_QWORD *)(v0 + 200);
  v12 = objc_msgSend(v8, "initWithValue:severity:", v9, v10);

  swift_task_dealloc(v11);
  return (*(uint64_t (**)(id))(v0 + 8))(v12);
}

uint64_t sub_100077DBC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = v0[30];
  v3 = v0[24];
  v2 = v0[25];
  v5 = v0[22];
  v4 = v0[23];
  swift_release();
  swift_errorRelease(v1);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  return swift_task_switch(sub_100077E2C, v5, 0);
}

uint64_t sub_100077E2C()
{
  uint64_t v0;
  id v1;
  NSString v2;
  uint64_t v3;
  id v4;

  _StringGuts.grow(_:)(21);
  swift_bridgeObjectRelease(0xE000000000000000);
  v1 = objc_allocWithZone((Class)SPDataIntegrityCheck);
  v2 = String._bridgeToObjectiveC()();
  v3 = *(_QWORD *)(v0 + 200);
  v4 = objc_msgSend(v1, "initWithValue:severity:", v2, 2);

  swift_task_dealloc(v3);
  return (*(uint64_t (**)(id))(v0 + 8))(v4);
}

uint64_t sub_100077ED8(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  v2[7] = a1;
  v2[8] = v1;
  v3 = sub_10001A9A8(&qword_1010EC868);
  v2[9] = v3;
  v2[10] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for MemberPeerTrust(0);
  v2[11] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v2[12] = v5;
  v2[13] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for UUID(0);
  v2[14] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v2[15] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v2[16] = v8;
  v9 = (v8 + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[17] = swift_task_alloc(v9);
  v2[18] = swift_task_alloc(v9);
  v10 = sub_10001A9A8(&qword_1010ED860);
  v2[19] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100077FC0, v1, 0);
}

uint64_t sub_100077FC0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  void (*v5)(uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  void (*v10)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  void (*v18)(uint64_t, uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  *(_QWORD *)(v0 + 48) = _swiftEmptyArrayStorage;
  v1 = *(_QWORD *)(v0 + 56);
  v2 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v0 + 160) = v2;
  v3 = *(_QWORD *)(v0 + 120);
  if (v2)
  {
    v4 = *(_DWORD *)(v3 + 80);
    *(_DWORD *)(v0 + 248) = v4;
    *(_QWORD *)(v0 + 168) = *(_QWORD *)(v3 + 72);
    v5 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v3 + 16);
    *(_QWORD *)(v0 + 176) = v5;
    *(_QWORD *)(v0 + 184) = 0;
    v6 = *(_QWORD *)(v0 + 152);
    v7 = *(_QWORD *)(v0 + 112);
    v8 = v1 + ((v4 + 32) & ~(unint64_t)v4);
    v9 = swift_bridgeObjectRetain(v1);
    v5(v6, v8, v7, v9);
    v10 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v3 + 56);
    *(_QWORD *)(v0 + 192) = v10;
    v10(v6, 0, 1, v7);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v6, 1, v7) != 1)
    {
      v11 = *(_QWORD *)(v0 + 144);
      v12 = *(_QWORD *)(v0 + 152);
      v13 = *(_QWORD *)(v0 + 112);
      v14 = *(_QWORD *)(v0 + 64);
      v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 120) + 32);
      *(_QWORD *)(v0 + 200) = v15;
      v15(v11, v12, v13);
      v16 = *(_QWORD *)(v14 + 112);
      *(_QWORD *)(v0 + 208) = v16;
      return swift_task_switch(sub_100078148, v16, 0);
    }
  }
  else
  {
    v18 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))(v3 + 56);
    v19 = *(_QWORD *)(v0 + 152);
    v20 = *(_QWORD *)(v0 + 112);
    v21 = swift_bridgeObjectRetain(v1);
    v18(v19, 1, 1, v20, v21);
  }
  v22 = *(_QWORD *)(v0 + 144);
  v23 = *(_QWORD *)(v0 + 152);
  v24 = *(_QWORD *)(v0 + 136);
  v25 = *(_QWORD *)(v0 + 104);
  v26 = *(_QWORD *)(v0 + 80);
  swift_bridgeObjectRelease();
  v27 = *(_QWORD *)(v0 + 48);
  swift_task_dealloc(v23);
  swift_task_dealloc(v22);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v27);
}

uint64_t sub_100078148()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v2 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 200);
  v1 = *(_QWORD *)(v0 + 208);
  v3 = *(unsigned __int8 *)(v0 + 248);
  v4 = *(_QWORD *)(v0 + 136);
  v5 = *(_QWORD *)(v0 + 112);
  v6 = (v3 + 24) & ~v3;
  v7 = v6 + *(_QWORD *)(v0 + 128);
  v8 = v3 | 7;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v0 + 176))(v4, *(_QWORD *)(v0 + 144), v5);
  v9 = swift_allocObject(&unk_101052F08, v7, v8);
  *(_QWORD *)(v0 + 216) = v9;
  *(_QWORD *)(v9 + 16) = v1;
  v2(v9 + v6, v4, v5);
  v10 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v11 = (_QWORD *)swift_task_alloc(v10);
  *(_QWORD *)(v0 + 224) = v11;
  *v11 = v0;
  v11[1] = sub_10007822C;
  return unsafeBlocking<A>(_:)(*(_QWORD *)(v0 + 80), sub_100067E08, v9, *(_QWORD *)(v0 + 72));
}

uint64_t sub_10007822C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 64);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 224));
  swift_release();
  return swift_task_switch(sub_10007828C, v1, 0);
}

uint64_t sub_10007828C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  Swift::String v4;
  id v5;
  NSString v6;
  id v7;
  id v8;
  id v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t);
  void (*v24)(uint64_t, unint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(uint64_t, uint64_t, uint64_t);
  uint64_t v42;
  uint64_t (*v43)(uint64_t);

  v1 = *(_QWORD *)(v0 + 88);
  v2 = *(_QWORD *)(v0 + 80);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 96) + 48))(v2, 1, v1) != 1)
  {
    v18 = *(_QWORD *)(v0 + 104);
    sub_1000126EC(v2, v18, type metadata accessor for MemberPeerTrust);
    v19 = *(int *)(v1 + 28);
    *(_DWORD *)(v0 + 252) = v19;
    v20 = v18 + v19;
    v43 = (uint64_t (*)(uint64_t))((char *)&dword_101112238 + dword_101112238);
    v21 = (_QWORD *)swift_task_alloc(unk_10111223C);
    *(_QWORD *)(v0 + 232) = v21;
    *v21 = v0;
    v21[1] = sub_1000785C8;
    v22 = v20;
    v23 = v43;
    return v23(v22);
  }
  v3 = sub_100004048(v2, &qword_1010EC868);
  *(_QWORD *)(v0 + 16) = 0xD000000000000010;
  *(_QWORD *)(v0 + 24) = 0x8000000100EC6AB0;
  v4._countAndFlagsBits = UUID.uuidString.getter(v3);
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5 = objc_allocWithZone((Class)SPDataIntegrityCheck);
  v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  v7 = objc_msgSend(v5, "initWithValue:severity:", v6, 2);

  v8 = objc_msgSend(objc_allocWithZone((Class)SPPeerTrustDataIntegrity), "initWithPeerTrustRecord:messagingDestination:", v7, 0);
  v9 = v8;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v9);
  v11 = *(_QWORD *)((*(_QWORD *)(v0 + 48) & 0xFFFFFFFFFFFFFF8) + 0x10);
  v10 = *(_QWORD *)((*(_QWORD *)(v0 + 48) & 0xFFFFFFFFFFFFFF8) + 0x18);
  if (v11 >= v10 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v10 > 1, v11 + 1, 1);
  v12 = *(_QWORD *)(v0 + 160);
  v13 = *(_QWORD *)(v0 + 144);
  v14 = *(_QWORD *)(v0 + 112);
  v15 = *(_QWORD *)(v0 + 120);
  v16 = *(_QWORD *)(v0 + 184) + 1;
  v17 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v11, v9);
  specialized Array._endMutation()(v17);

  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v13, v14);
  if (v16 == v12)
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(v0 + 192))(*(_QWORD *)(v0 + 152), 1, 1, *(_QWORD *)(v0 + 112));
LABEL_8:
    v30 = *(_QWORD *)(v0 + 144);
    v31 = *(_QWORD *)(v0 + 152);
    v32 = *(_QWORD *)(v0 + 136);
    v33 = *(_QWORD *)(v0 + 104);
    v34 = *(_QWORD *)(v0 + 80);
    swift_bridgeObjectRelease();
    v35 = *(_QWORD *)(v0 + 48);
    swift_task_dealloc(v31);
    swift_task_dealloc(v30);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    v23 = *(uint64_t (**)(uint64_t))(v0 + 8);
    v22 = v35;
    return v23(v22);
  }
  v24 = *(void (**)(uint64_t, unint64_t, uint64_t))(v0 + 176);
  v25 = *(_QWORD *)(v0 + 184) + 1;
  *(_QWORD *)(v0 + 184) = v25;
  v26 = *(_QWORD *)(v0 + 152);
  v27 = *(_QWORD *)(v0 + 112);
  v28 = *(_QWORD *)(v0 + 120);
  v24(v26, *(_QWORD *)(v0 + 56)+ ((*(unsigned __int8 *)(v0 + 248) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 248))+ *(_QWORD *)(v0 + 168) * v25, v27);
  v29 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v28 + 56);
  *(_QWORD *)(v0 + 192) = v29;
  v29(v26, 0, 1, v27);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27) == 1)
    goto LABEL_8;
  v37 = *(_QWORD *)(v0 + 144);
  v38 = *(_QWORD *)(v0 + 152);
  v39 = *(_QWORD *)(v0 + 112);
  v40 = *(_QWORD *)(v0 + 64);
  v41 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 120) + 32);
  *(_QWORD *)(v0 + 200) = v41;
  v41(v37, v38, v39);
  v42 = *(_QWORD *)(v40 + 112);
  *(_QWORD *)(v0 + 208) = v42;
  return swift_task_switch(sub_100078148, v42, 0);
}

uint64_t sub_1000785C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)();

  v5 = *v4;
  v6 = *(_QWORD *)(*v4 + 232);
  *(_QWORD *)(*v4 + 240) = a3;
  swift_task_dealloc(v6);
  v7 = *(_QWORD *)(v5 + 64);
  if (v3)
  {
    swift_errorRelease(v3);
    v8 = sub_1000789AC;
  }
  else
  {
    v8 = sub_100078638;
  }
  return swift_task_switch(v8, v7, 0);
}

uint64_t sub_100078638()
{
  uint64_t v0;
  id v1;
  NSString v2;
  id v3;
  Swift::String v4;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  NSString v10;
  id v11;
  id v12;
  id v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, unint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(uint64_t, uint64_t, uint64_t);
  uint64_t v40;

  if (*(_QWORD *)(v0 + 240))
  {
    swift_bridgeObjectRelease();
    sub_100728868();
    v1 = objc_allocWithZone((Class)SPDataIntegrityCheck);
    v2 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    v3 = objc_msgSend(v1, "initWithValue:severity:", v2, 0);
  }
  else
  {
    *(_QWORD *)(v0 + 32) = 0xD00000000000001DLL;
    *(_QWORD *)(v0 + 40) = 0x8000000100EC6AD0;
    sub_100728868();
    String.append(_:)(v4);
    swift_bridgeObjectRelease();
    v5 = objc_allocWithZone((Class)SPDataIntegrityCheck);
    v2 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    v3 = objc_msgSend(v5, "initWithValue:severity:", v2, 2);
  }
  v6 = v3;
  v7 = *(_QWORD *)(v0 + 104);

  UUID.uuidString.getter(v8);
  v9 = objc_allocWithZone((Class)SPDataIntegrityCheck);
  v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  v11 = objc_msgSend(v9, "initWithValue:severity:", v10, 0);

  v12 = objc_msgSend(objc_allocWithZone((Class)SPPeerTrustDataIntegrity), "initWithPeerTrustRecord:messagingDestination:", v11, v6);
  sub_1000126B0(v7, type metadata accessor for MemberPeerTrust);
  v13 = v12;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v13);
  v15 = *(_QWORD *)((*(_QWORD *)(v0 + 48) & 0xFFFFFFFFFFFFFF8) + 0x10);
  v14 = *(_QWORD *)((*(_QWORD *)(v0 + 48) & 0xFFFFFFFFFFFFFF8) + 0x18);
  if (v15 >= v14 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v14 > 1, v15 + 1, 1);
  v16 = *(_QWORD *)(v0 + 160);
  v17 = *(_QWORD *)(v0 + 144);
  v18 = *(_QWORD *)(v0 + 112);
  v19 = *(_QWORD *)(v0 + 120);
  v20 = *(_QWORD *)(v0 + 184) + 1;
  v21 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v15, v13);
  specialized Array._endMutation()(v21);

  (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v17, v18);
  if (v20 == v16)
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(v0 + 192))(*(_QWORD *)(v0 + 152), 1, 1, *(_QWORD *)(v0 + 112));
LABEL_9:
    v28 = *(_QWORD *)(v0 + 144);
    v29 = *(_QWORD *)(v0 + 152);
    v30 = *(_QWORD *)(v0 + 136);
    v31 = *(_QWORD *)(v0 + 104);
    v32 = *(_QWORD *)(v0 + 80);
    swift_bridgeObjectRelease();
    v33 = *(_QWORD *)(v0 + 48);
    swift_task_dealloc(v29);
    swift_task_dealloc(v28);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v33);
  }
  v22 = *(void (**)(uint64_t, unint64_t, uint64_t))(v0 + 176);
  v23 = *(_QWORD *)(v0 + 184) + 1;
  *(_QWORD *)(v0 + 184) = v23;
  v24 = *(_QWORD *)(v0 + 152);
  v25 = *(_QWORD *)(v0 + 112);
  v26 = *(_QWORD *)(v0 + 120);
  v22(v24, *(_QWORD *)(v0 + 56)+ ((*(unsigned __int8 *)(v0 + 248) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 248))+ *(_QWORD *)(v0 + 168) * v23, v25);
  v27 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v26 + 56);
  *(_QWORD *)(v0 + 192) = v27;
  v27(v24, 0, 1, v25);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25) == 1)
    goto LABEL_9;
  v35 = *(_QWORD *)(v0 + 144);
  v36 = *(_QWORD *)(v0 + 152);
  v37 = *(_QWORD *)(v0 + 112);
  v38 = *(_QWORD *)(v0 + 64);
  v39 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 120) + 32);
  *(_QWORD *)(v0 + 200) = v39;
  v39(v35, v36, v37);
  v40 = *(_QWORD *)(v38 + 112);
  *(_QWORD *)(v0 + 208) = v40;
  return swift_task_switch(sub_100078148, v40, 0);
}

uint64_t sub_1000789AC()
{
  uint64_t v0;
  Swift::String v1;
  id v2;
  NSString v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  NSString v8;
  id v9;
  id v10;
  id v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, unint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(uint64_t, uint64_t, uint64_t);
  uint64_t v38;

  *(_QWORD *)(v0 + 32) = 0xD00000000000001DLL;
  *(_QWORD *)(v0 + 40) = 0x8000000100EC6AD0;
  sub_100728868();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2 = objc_allocWithZone((Class)SPDataIntegrityCheck);
  v3 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  v4 = objc_msgSend(v2, "initWithValue:severity:", v3, 2);
  v5 = *(_QWORD *)(v0 + 104);

  UUID.uuidString.getter(v6);
  v7 = objc_allocWithZone((Class)SPDataIntegrityCheck);
  v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  v9 = objc_msgSend(v7, "initWithValue:severity:", v8, 0);

  v10 = objc_msgSend(objc_allocWithZone((Class)SPPeerTrustDataIntegrity), "initWithPeerTrustRecord:messagingDestination:", v9, v4);
  sub_1000126B0(v5, type metadata accessor for MemberPeerTrust);
  v11 = v10;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v11);
  v13 = *(_QWORD *)((*(_QWORD *)(v0 + 48) & 0xFFFFFFFFFFFFFF8) + 0x10);
  v12 = *(_QWORD *)((*(_QWORD *)(v0 + 48) & 0xFFFFFFFFFFFFFF8) + 0x18);
  if (v13 >= v12 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1, v13 + 1, 1);
  v14 = *(_QWORD *)(v0 + 160);
  v15 = *(_QWORD *)(v0 + 144);
  v16 = *(_QWORD *)(v0 + 112);
  v17 = *(_QWORD *)(v0 + 120);
  v18 = *(_QWORD *)(v0 + 184) + 1;
  v19 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v13, v11);
  specialized Array._endMutation()(v19);

  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v15, v16);
  if (v18 == v14)
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(v0 + 192))(*(_QWORD *)(v0 + 152), 1, 1, *(_QWORD *)(v0 + 112));
LABEL_6:
    v26 = *(_QWORD *)(v0 + 144);
    v27 = *(_QWORD *)(v0 + 152);
    v28 = *(_QWORD *)(v0 + 136);
    v29 = *(_QWORD *)(v0 + 104);
    v30 = *(_QWORD *)(v0 + 80);
    swift_bridgeObjectRelease();
    v31 = *(_QWORD *)(v0 + 48);
    swift_task_dealloc(v27);
    swift_task_dealloc(v26);
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v31);
  }
  v20 = *(void (**)(uint64_t, unint64_t, uint64_t))(v0 + 176);
  v21 = *(_QWORD *)(v0 + 184) + 1;
  *(_QWORD *)(v0 + 184) = v21;
  v22 = *(_QWORD *)(v0 + 152);
  v23 = *(_QWORD *)(v0 + 112);
  v24 = *(_QWORD *)(v0 + 120);
  v20(v22, *(_QWORD *)(v0 + 56)+ ((*(unsigned __int8 *)(v0 + 248) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 248))+ *(_QWORD *)(v0 + 168) * v21, v23);
  v25 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v24 + 56);
  *(_QWORD *)(v0 + 192) = v25;
  v25(v22, 0, 1, v23);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23) == 1)
    goto LABEL_6;
  v33 = *(_QWORD *)(v0 + 144);
  v34 = *(_QWORD *)(v0 + 152);
  v35 = *(_QWORD *)(v0 + 112);
  v36 = *(_QWORD *)(v0 + 64);
  v37 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 120) + 32);
  *(_QWORD *)(v0 + 200) = v37;
  v37(v33, v34, v35);
  v38 = *(_QWORD *)(v36 + 112);
  *(_QWORD *)(v0 + 208) = v38;
  return swift_task_switch(sub_100078148, v38, 0);
}

uint64_t sub_100078CC4(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *(_QWORD *)(v4 + 56) = a2;
  *(_QWORD *)(v4 + 64) = v3;
  *(_BYTE *)(v4 + 240) = a3;
  *(_QWORD *)(v4 + 48) = a1;
  v5 = type metadata accessor for KeyDropJoinToken(0);
  *(_QWORD *)(v4 + 72) = v5;
  *(_QWORD *)(v4 + 80) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10001A9A8(&qword_10110F130);
  *(_QWORD *)(v4 + 88) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for SharingCircleSecretValue(0);
  *(_QWORD *)(v4 + 96) = v7;
  v8 = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v4 + 104) = v8;
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v4 + 112) = swift_task_alloc(v9);
  *(_QWORD *)(v4 + 120) = swift_task_alloc(v9);
  *(_QWORD *)(v4 + 128) = swift_task_alloc(v9);
  *(_QWORD *)(v4 + 136) = swift_task_alloc(v9);
  v10 = type metadata accessor for SharingCircleSecret(0);
  *(_QWORD *)(v4 + 144) = v10;
  v11 = *(_QWORD *)(v10 - 8);
  *(_QWORD *)(v4 + 152) = v11;
  v12 = (*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v4 + 160) = swift_task_alloc(v12);
  *(_QWORD *)(v4 + 168) = swift_task_alloc(v12);
  v13 = type metadata accessor for UUID(0);
  *(_QWORD *)(v4 + 176) = v13;
  v14 = *(_QWORD *)(v13 - 8);
  *(_QWORD *)(v4 + 184) = v14;
  v15 = *(_QWORD *)(v14 + 64);
  *(_QWORD *)(v4 + 192) = v15;
  *(_QWORD *)(v4 + 200) = swift_task_alloc((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100078E00, v3, 0);
}

uint64_t sub_100078E00()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[8];
  v0[4] = _swiftEmptyArrayStorage;
  v2 = *(_QWORD *)(v1 + 112);
  v0[26] = v2;
  return swift_task_switch(sub_100078E28, v2, 0);
}

uint64_t sub_100078E28()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  v2 = v0[25];
  v1 = v0[26];
  v4 = v0[23];
  v3 = v0[24];
  v5 = v0[22];
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v4 + 16))(v2, v0[6], v5);
  v6 = *(unsigned __int8 *)(v4 + 80);
  v7 = (v6 + 24) & ~v6;
  v8 = swift_allocObject(&unk_101052EE0, v7 + v3, v6 | 7);
  v0[27] = v8;
  *(_QWORD *)(v8 + 16) = v1;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v8 + v7, v2, v5);
  v9 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v10 = (_QWORD *)swift_task_alloc(v9);
  v0[28] = v10;
  v11 = sub_10001A9A8(&qword_1010EC8C8);
  *v10 = v0;
  v10[1] = sub_100078F1C;
  return unsafeBlocking<A>(_:)(v0 + 5, sub_10007CB00, v8, v11);
}

uint64_t sub_100078F1C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 208);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 224));
  swift_release();
  return swift_task_switch(sub_100078F7C, v1, 0);
}

uint64_t sub_100078F7C()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[8];
  v0[29] = v0[5];
  return swift_task_switch(sub_100078F98, v1, 0);
}

uint64_t sub_100078F98()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  void *v8;
  Swift::String v9;
  Swift::Int v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  int v44;
  int v45;
  Swift::String v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  Swift::String v50;
  Swift::String v51;
  Swift::String v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  Swift::String v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  Swift::String v60;
  id v61;
  NSString v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  id v68;
  id v69;
  Class isa;
  id v71;
  uint64_t result;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;

  v1 = *(_QWORD *)(v0 + 232);
  if (*(_QWORD *)(v1 + 16))
  {
    v79 = *(_QWORD *)(v0 + 144);
    v73 = *(_QWORD *)(v0 + 128);
    v74 = *(_QWORD *)(v0 + 88);
    v76 = *(_QWORD *)(v0 + 104);
    v2 = *(_QWORD *)(v0 + 168);
    sub_10005972C(v1+ ((*(unsigned __int8 *)(*(_QWORD *)(v0 + 152) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v0 + 152) + 80)), v2, type metadata accessor for SharingCircleSecret);
    v3 = (uint64_t *)(v2 + *(int *)(v79 + 32));
    v5 = *v3;
    v4 = v3[1];
    v6 = (uint64_t *)(v2 + *(int *)(v79 + 28));
    v7 = *v6;
    v8 = (void *)v6[1];
    sub_10001BBBC(v5, v4);
    swift_bridgeObjectRetain(v8);
    v9._countAndFlagsBits = v7;
    v9._object = v8;
    v10 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_101048400, v9);
    swift_bridgeObjectRelease();
    v11 = v4 >> 62;
    switch(v10)
    {
      case 1:
        __asm { BR              X10 }
        return result;
      case 2:
        __asm { BR              X10 }
        return result;
      case 3:
        v15 = type metadata accessor for PropertyListDecoder(0);
        swift_allocObject(v15, *(unsigned int *)(v15 + 48), *(unsigned __int16 *)(v15 + 52));
        PropertyListDecoder.init()();
        v16 = sub_10007CB0C();
        dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(&type metadata for PrivateKey, v5, v4, &type metadata for PrivateKey, v16);
        v17 = *(_QWORD **)(v0 + 88);
        v18 = *(_QWORD *)(v0 + 96);
        sub_10001BC14(v5, v4);
        swift_release();
        v19 = *(_QWORD *)(v0 + 24);
        *v17 = *(_QWORD *)(v0 + 16);
        *(_QWORD *)(v74 + 8) = v19;
        v12 = v17;
        v13 = v18;
        v14 = 3;
        break;
      case 4:
        v20 = *(_QWORD *)(v0 + 72);
        v21 = type metadata accessor for PropertyListDecoder(0);
        swift_allocObject(v21, *(unsigned int *)(v21 + 48), *(unsigned __int16 *)(v21 + 52));
        PropertyListDecoder.init()();
        v22 = sub_100006204(&qword_1010ECB10, type metadata accessor for KeyDropJoinToken, (uint64_t)&unk_100E69168);
        dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(v20, v5, v4, v20, v22);
        v24 = *(_QWORD *)(v0 + 88);
        v23 = *(_QWORD *)(v0 + 96);
        v25 = *(_QWORD *)(v0 + 80);
        sub_10001BC14(v5, v4);
        swift_release();
        sub_1000126EC(v25, v24, type metadata accessor for KeyDropJoinToken);
        v12 = (_QWORD *)v24;
        v13 = v23;
        v14 = 4;
        break;
      default:
        v12 = *(_QWORD **)(v0 + 88);
        v13 = *(_QWORD *)(v0 + 96);
        *v12 = v5;
        *(_QWORD *)(v74 + 8) = v4;
        v14 = 0;
        break;
    }
    swift_storeEnumTagMultiPayload(v12, v13, v14);
    v26 = *(_QWORD *)(v0 + 160);
    v27 = *(_QWORD *)(v0 + 168);
    v29 = *(_QWORD *)(v0 + 88);
    v28 = *(_QWORD *)(v0 + 96);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v76 + 56))(v29, 0, 1, v28);
    sub_10005972C(v27, v26, type metadata accessor for SharingCircleSecret);
    v30 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v76 + 48))(v29, 1, v28);
    v31 = *(_QWORD *)(v0 + 160);
    v32 = *(uint64_t **)(v0 + 128);
    if (v30 == 1)
    {
      v34 = *(_QWORD *)(v0 + 88);
      v33 = *(_QWORD *)(v0 + 96);
      v35 = (uint64_t *)(v31 + *(int *)(v79 + 32));
      v36 = *v35;
      v37 = v35[1];
      sub_10001BBBC(*v35, v37);
      sub_1000126B0(v31, type metadata accessor for SharingCircleSecret);
      *v32 = v36;
      *(_QWORD *)(v73 + 8) = v37;
      swift_storeEnumTagMultiPayload(v32, v33, 0);
      sub_100004048(v34, &qword_10110F130);
    }
    else
    {
      v38 = *(_QWORD *)(v0 + 88);
      sub_1000126B0(*(_QWORD *)(v0 + 160), type metadata accessor for SharingCircleSecret);
      sub_1000126EC(v38, (uint64_t)v32, type metadata accessor for SharingCircleSecretValue);
    }
    v39 = *(_QWORD *)(v0 + 136);
    v40 = *(_QWORD *)(v0 + 120);
    v41 = *(_QWORD *)(v0 + 96);
    sub_1000126EC(*(_QWORD *)(v0 + 128), v39, type metadata accessor for SharingCircleSecretValue);
    sub_10005972C(v39, v40, type metadata accessor for SharingCircleSecretValue);
    v42 = (char *)&loc_1000794EC + *((int *)qword_100079B90 + swift_getEnumCaseMultiPayload(v40, v41));
    __asm { BR              X9 }
  }
  swift_bridgeObjectRelease();
  v43 = *(_QWORD *)(v0 + 56);
  if (*(_BYTE *)(v0 + 240) == 2)
  {
    v44 = 0;
    v45 = 0;
  }
  else
  {
    v45 = 1;
    v44 = 1;
  }
  _StringGuts.grow(_:)(82);
  v46._countAndFlagsBits = 0xD00000000000001CLL;
  v46._object = (void *)0x8000000100EC6A70;
  String.append(_:)(v46);
  if (v43)
    v47 = 0x65736C6166;
  else
    v47 = 1702195828;
  if (v43)
    v48 = 0xE500000000000000;
  else
    v48 = 0xE400000000000000;
  v49 = v48;
  String.append(_:)(*(Swift::String *)&v47);
  swift_bridgeObjectRelease();
  v50._object = (void *)0x8000000100EC6A90;
  v50._countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v50);
  v51._countAndFlagsBits = 0x65736C6166;
  v51._object = (void *)0xE500000000000000;
  String.append(_:)(v51);
  swift_bridgeObjectRelease();
  v52._countAndFlagsBits = 0x52646C6977202C29;
  v52._object = (void *)0xED00002820746F6FLL;
  String.append(_:)(v52);
  if (v44)
    v53 = 1702195828;
  else
    v53 = 0x65736C6166;
  if (v44)
    v54 = 0xE400000000000000;
  else
    v54 = 0xE500000000000000;
  v55 = v54;
  String.append(_:)(*(Swift::String *)&v53);
  swift_bridgeObjectRelease();
  v56._countAndFlagsBits = 0x4F7261656E202C29;
  v56._object = (void *)0xEE00282072656E77;
  String.append(_:)(v56);
  if (v45)
    v57 = 1702195828;
  else
    v57 = 0x65736C6166;
  if (v45)
    v58 = 0xE400000000000000;
  else
    v58 = 0xE500000000000000;
  v59 = v58;
  String.append(_:)(*(Swift::String *)&v57);
  swift_bridgeObjectRelease();
  v60._countAndFlagsBits = 41;
  v60._object = (void *)0xE100000000000000;
  String.append(_:)(v60);
  v61 = objc_allocWithZone((Class)SPDataIntegrityCheck);
  v62 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  v63 = *(_QWORD *)(v0 + 200);
  v64 = *(_QWORD *)(v0 + 160);
  v65 = *(_QWORD *)(v0 + 168);
  v66 = *(_QWORD *)(v0 + 128);
  v67 = *(_QWORD *)(v0 + 136);
  v75 = *(_QWORD *)(v0 + 120);
  v77 = *(_QWORD *)(v0 + 112);
  v78 = *(_QWORD *)(v0 + 88);
  v80 = *(_QWORD *)(v0 + 80);
  v68 = objc_msgSend(v61, "initWithValue:severity:", v62, 1);

  v69 = objc_allocWithZone((Class)SPSharedSecretsDataCheck);
  sub_10000F4A0(0, &qword_1010ECB00, SPDataIntegrityCheck_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v71 = objc_msgSend(v69, "initWithCompleteness:secrets:", v68, isa);

  swift_task_dealloc(v63);
  swift_task_dealloc(v65);
  swift_task_dealloc(v64);
  swift_task_dealloc(v67);
  swift_task_dealloc(v66);
  swift_task_dealloc(v75);
  swift_task_dealloc(v77);
  swift_task_dealloc(v78);
  swift_task_dealloc(v80);
  return (*(uint64_t (**)(id))(v0 + 8))(v71);
}

uint64_t sub_100079BB8(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  *(_BYTE *)(v3 + 304) = a2;
  *(_QWORD *)(v3 + 120) = a1;
  *(_QWORD *)(v3 + 128) = v2;
  v4 = type metadata accessor for UUID(0);
  *(_QWORD *)(v3 + 136) = v4;
  v5 = *(_QWORD *)(v4 - 8);
  *(_QWORD *)(v3 + 144) = v5;
  v6 = (*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v3 + 152) = swift_task_alloc(v6);
  *(_QWORD *)(v3 + 160) = swift_task_alloc(v6);
  return swift_task_switch(sub_100079C2C, v2, 0);
}

uint64_t sub_100079C2C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 128);
  *(_QWORD *)(v0 + 96) = _swiftEmptyArrayStorage;
  v2 = *(_QWORD *)(v1 + 112);
  *(_QWORD *)(v0 + 168) = v2;
  *(_BYTE *)(v0 + 305) = 0;
  *(_BYTE *)(v0 + 306) = 0;
  return swift_task_switch(sub_100079C64, v2, 0);
}

uint64_t sub_100079C64()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v2 = (_QWORD *)swift_task_alloc(v1);
  v0[22] = v2;
  v3 = type metadata accessor for BeaconKeyManager(0);
  v0[23] = v3;
  *v2 = v0;
  v2[1] = sub_100079CE0;
  return unsafeBlocking<A>(_:)(v0 + 11, sub_10007C6FC, v0[21], v3);
}

uint64_t sub_100079CE0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 168);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 176));
  swift_release();
  return swift_task_switch(sub_100079D3C, v1, 0);
}

uint64_t sub_100079D3C()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 192) = *(_QWORD *)(v0 + 88);
  return swift_task_switch(sub_100079D58, 0, 0);
}

uint64_t sub_100079D58()
{
  uint64_t v0;
  uid_t v1;
  _QWORD *v2;

  v1 = getuid();
  sub_100A06500(v1);
  v2 = (_QWORD *)swift_task_alloc(dword_1010FCEA4);
  *(_QWORD *)(v0 + 200) = v2;
  *v2 = v0;
  v2[1] = sub_100079DD0;
  return sub_100476038(*(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 120), *(_BYTE *)(v0 + 306));
}

uint64_t sub_100079DD0(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t (*v11)();
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t);

  v6 = *v4;
  v7 = *(_QWORD *)(*v4 + 200);
  *(_QWORD *)(v6 + 208) = a1;
  *(_QWORD *)(v6 + 216) = a2;
  *(_QWORD *)(v6 + 224) = v3;
  swift_task_dealloc(v7);
  v8 = *(_QWORD *)(v6 + 160);
  v9 = *(_QWORD *)(v6 + 136);
  if (v3)
  {
    v10 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 + 144) + 8);
    *(_QWORD *)(v6 + 240) = v10;
    v10(v8, v9);
    v11 = sub_10007A254;
    v12 = 0;
  }
  else
  {
    v13 = *(_QWORD *)(v6 + 144);
    v14 = *(_QWORD *)(v6 + 128);
    *(_BYTE *)(v6 + 307) = a3;
    v15 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
    *(_QWORD *)(v6 + 232) = v15;
    v15(v8, v9);
    swift_release();
    v11 = sub_100079E8C;
    v12 = v14;
  }
  return swift_task_switch(v11, v12, 0);
}

uint64_t sub_100079E8C()
{
  uint64_t v0;
  int v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  Swift::String v9;
  Swift::String v10;
  Swift::String v11;
  Swift::String v12;
  id v13;
  NSString v14;
  id v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  id v27;
  NSString v28;
  id v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t (*v35)();
  uint64_t v37;
  uint64_t v38;

  if ((*(_BYTE *)(v0 + 307) & 1) != 0)
  {
    v21 = 0xD000000000000010;
    v20 = *(_QWORD *)(v0 + 232);
    v22 = *(unsigned __int8 *)(v0 + 306);
    *(_QWORD *)(v0 + 48) = 0xD000000000000019;
    *(_QWORD *)(v0 + 56) = 0x8000000100EC6920;
    if (v22 == 1)
    {
      v21 = 0x61646E6F6365732ELL;
      v23 = 0xEA00000000007972;
    }
    else
    {
      v23 = 0x8000000100EC6940;
    }
    if (v22)
      v24 = v21;
    else
      v24 = 0x7972616D6972702ELL;
    if (v22)
      v25 = v23;
    else
      v25 = 0xE800000000000000;
    v26 = v25;
    String.append(_:)(*(Swift::String *)&v24);
    swift_bridgeObjectRelease();
    v27 = objc_allocWithZone((Class)SPDataIntegrityCheck);
    v28 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    v29 = objc_msgSend(v27, "initWithValue:severity:", v28, 1);

    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v30);
    v32 = *(_QWORD *)((*(_QWORD *)(v0 + 96) & 0xFFFFFFFFFFFFFF8) + 0x10);
    v31 = *(_QWORD *)((*(_QWORD *)(v0 + 96) & 0xFFFFFFFFFFFFFF8) + 0x18);
    if (v32 >= v31 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v31 > 1, v32 + 1, 1);
    v19 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v32, v29);
  }
  else
  {
    *(_QWORD *)(v0 + 16) = 0;
    v1 = *(unsigned __int8 *)(v0 + 306);
    *(_QWORD *)(v0 + 24) = 0xE000000000000000;
    _StringGuts.grow(_:)(20);
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 32) = 0x656E774F7261656ELL;
    *(_QWORD *)(v0 + 40) = 0xE900000000000072;
    v2 = 0x61646E6F6365732ELL;
    v3 = 0xEA00000000007972;
    if (v1 != 1)
    {
      v2 = 0xD000000000000010;
      v3 = 0x8000000100EC6940;
    }
    if (v1)
      v4 = v2;
    else
      v4 = 0x7972616D6972702ELL;
    if (v1)
      v5 = v3;
    else
      v5 = 0xE800000000000000;
    v6 = *(_QWORD *)(v0 + 208);
    v7 = *(_QWORD *)(v0 + 216);
    v8 = v5;
    String.append(_:)(*(Swift::String *)&v4);
    swift_bridgeObjectRelease();
    v9._countAndFlagsBits = 8250;
    v9._object = (void *)0xE200000000000000;
    String.append(_:)(v9);
    *(_QWORD *)(v0 + 104) = v6;
    v10._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt64, &protocol witness table for UInt64);
    String.append(_:)(v10);
    swift_bridgeObjectRelease();
    v11._countAndFlagsBits = 3026478;
    v11._object = (void *)0xE300000000000000;
    String.append(_:)(v11);
    *(_QWORD *)(v0 + 112) = v7;
    v12._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt64, &protocol witness table for UInt64);
    String.append(_:)(v12);
    swift_bridgeObjectRelease();
    v13 = objc_allocWithZone((Class)SPDataIntegrityCheck);
    v14 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    v15 = objc_msgSend(v13, "initWithValue:severity:", v14, 0);

    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v16);
    v18 = *(_QWORD *)((*(_QWORD *)(v0 + 96) & 0xFFFFFFFFFFFFFF8) + 0x10);
    v17 = *(_QWORD *)((*(_QWORD *)(v0 + 96) & 0xFFFFFFFFFFFFFF8) + 0x18);
    if (v18 >= v17 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v17 > 1, v18 + 1, 1);
    v19 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v18, v15);
    v20 = *(_QWORD *)(v0 + 232);
  }
  *(_QWORD *)(v0 + 248) = v20;
  v33 = *(_BYTE *)(v0 + 305);
  specialized Array._endMutation()(v19);
  if ((v33 & 1) == 0)
  {
    *(_BYTE *)(v0 + 305) = 1;
    v34 = *(_QWORD *)(v0 + 168);
    *(_BYTE *)(v0 + 306) = 1;
    v35 = sub_100079C64;
    return swift_task_switch(v35, v34, 0);
  }
  if (*(_BYTE *)(v0 + 304) == 2)
  {
    v34 = *(_QWORD *)(v0 + 168);
    v35 = sub_10007A490;
    return swift_task_switch(v35, v34, 0);
  }
  v37 = *(_QWORD *)(v0 + 152);
  v38 = *(_QWORD *)(v0 + 96);
  swift_task_dealloc(*(_QWORD *)(v0 + 160));
  swift_task_dealloc(v37);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v38);
}

uint64_t sub_10007A254()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 224);
  v2 = *(_QWORD *)(v0 + 128);
  swift_release();
  swift_errorRelease(v1);
  return swift_task_switch(sub_10007A2A0, v2, 0);
}

uint64_t sub_10007A2A0()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  int v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  id v8;
  NSString v9;
  id v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t (*v17)();
  uint64_t v19;
  uint64_t v20;

  v1 = 0xD000000000000010;
  *(_QWORD *)(v0 + 48) = 0xD000000000000019;
  v2 = *(_QWORD *)(v0 + 240);
  v3 = *(unsigned __int8 *)(v0 + 306);
  *(_QWORD *)(v0 + 56) = 0x8000000100EC6920;
  v4 = 0xEA00000000007972;
  if (v3 == 1)
    v1 = 0x61646E6F6365732ELL;
  else
    v4 = 0x8000000100EC6940;
  if (v3)
    v5 = v1;
  else
    v5 = 0x7972616D6972702ELL;
  if (v3)
    v6 = v4;
  else
    v6 = 0xE800000000000000;
  v7 = v6;
  String.append(_:)(*(Swift::String *)&v5);
  swift_bridgeObjectRelease();
  v8 = objc_allocWithZone((Class)SPDataIntegrityCheck);
  v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  v10 = objc_msgSend(v8, "initWithValue:severity:", v9, 1);

  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v11);
  v13 = *(_QWORD *)((*(_QWORD *)(v0 + 96) & 0xFFFFFFFFFFFFFF8) + 0x10);
  v12 = *(_QWORD *)((*(_QWORD *)(v0 + 96) & 0xFFFFFFFFFFFFFF8) + 0x18);
  if (v13 >= v12 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1, v13 + 1, 1);
  v14 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v13, v10);
  *(_QWORD *)(v0 + 248) = v2;
  v15 = *(unsigned __int8 *)(v0 + 305);
  specialized Array._endMutation()(v14);
  if (v15 != 1)
  {
    *(_BYTE *)(v0 + 305) = 1;
    v16 = *(_QWORD *)(v0 + 168);
    *(_BYTE *)(v0 + 306) = 1;
    v17 = sub_100079C64;
    return swift_task_switch(v17, v16, 0);
  }
  if (*(_BYTE *)(v0 + 304) == 2)
  {
    v16 = *(_QWORD *)(v0 + 168);
    v17 = sub_10007A490;
    return swift_task_switch(v17, v16, 0);
  }
  v19 = *(_QWORD *)(v0 + 152);
  v20 = *(_QWORD *)(v0 + 96);
  swift_task_dealloc(*(_QWORD *)(v0 + 160));
  swift_task_dealloc(v19);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v20);
}

uint64_t sub_10007A490()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v2 = (_QWORD *)swift_task_alloc(v1);
  v0[32] = v2;
  *v2 = v0;
  v2[1] = sub_10007A500;
  return unsafeBlocking<A>(_:)(v0 + 8, sub_10007C6FC, v0[21], v0[23]);
}

uint64_t sub_10007A500()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 168);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 256));
  swift_release();
  return swift_task_switch(sub_10007A560, v1, 0);
}

uint64_t sub_10007A560()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 264) = *(_QWORD *)(v0 + 64);
  return swift_task_switch(sub_10007A57C, 0, 0);
}

uint64_t sub_10007A57C()
{
  uint64_t *v0;
  uid_t v1;
  uint64_t **v2;

  v1 = getuid();
  sub_100A06500(v1);
  v2 = (uint64_t **)swift_task_alloc(dword_1010FCED4);
  v0[34] = (uint64_t)v2;
  *v2 = v0;
  v2[1] = (uint64_t *)sub_10007A5F0;
  return sub_100478384(v0[19], v0[15]);
}

uint64_t sub_10007A5F0(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)();
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = *v4;
  v7 = *(_QWORD *)(*v4 + 272);
  *(_QWORD *)(v6 + 280) = a1;
  *(_QWORD *)(v6 + 288) = a2;
  *(_QWORD *)(v6 + 296) = v3;
  swift_task_dealloc(v7);
  if (v3)
  {
    (*(void (**)(_QWORD, _QWORD))(v6 + 248))(*(_QWORD *)(v6 + 152), *(_QWORD *)(v6 + 136));
    v8 = sub_10007A8D4;
    v9 = 0;
  }
  else
  {
    v10 = *(void (**)(uint64_t, uint64_t))(v6 + 248);
    v11 = *(_QWORD *)(v6 + 152);
    v13 = *(_QWORD *)(v6 + 128);
    v12 = *(_QWORD *)(v6 + 136);
    *(_BYTE *)(v6 + 308) = a3;
    v10(v11, v12);
    swift_release();
    v8 = sub_10007A6A0;
    v9 = v13;
  }
  return swift_task_switch(v8, v9, 0);
}

uint64_t sub_10007A6A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  Swift::String v3;
  void *object;
  Swift::String v5;
  Swift::String v6;
  void *v7;
  id v8;
  NSString v9;
  id v10;
  id v11;
  NSString v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if ((*(_BYTE *)(v0 + 308) & 1) != 0)
  {
    _StringGuts.grow(_:)(17);
    swift_bridgeObjectRelease(0xE000000000000000);
    v11 = objc_allocWithZone((Class)SPDataIntegrityCheck);
    v12 = String._bridgeToObjectiveC()();
    v10 = objc_msgSend(v11, "initWithValue:severity:", v12, 1, 0);

  }
  else
  {
    v1 = *(_QWORD *)(v0 + 280);
    v2 = *(_QWORD *)(v0 + 288);
    _StringGuts.grow(_:)(22);
    swift_bridgeObjectRelease(0xE000000000000000);
    *(_QWORD *)(v0 + 72) = v1;
    v3._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt64, &protocol witness table for UInt64);
    object = v3._object;
    String.append(_:)(v3);
    swift_bridgeObjectRelease(object);
    v5._countAndFlagsBits = 3026478;
    v5._object = (void *)0xE300000000000000;
    String.append(_:)(v5);
    *(_QWORD *)(v0 + 80) = v2;
    v6._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt64, &protocol witness table for UInt64);
    v7 = v6._object;
    String.append(_:)(v6);
    swift_bridgeObjectRelease(v7);
    v8 = objc_allocWithZone((Class)SPDataIntegrityCheck);
    v9 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(0xEF203A79654B6E6FLL);
    v10 = objc_msgSend(v8, "initWithValue:severity:", v9, 0);

  }
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  v14 = *(_QWORD *)((*(_QWORD *)(v0 + 96) & 0xFFFFFFFFFFFFFF8) + 0x10);
  v13 = *(_QWORD *)((*(_QWORD *)(v0 + 96) & 0xFFFFFFFFFFFFFF8) + 0x18);
  if (v14 >= v13 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v13 > 1, v14 + 1, 1);
  v15 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v14, v10);
  specialized Array._endMutation()(v15);
  v16 = *(_QWORD *)(v0 + 152);
  v17 = *(_QWORD *)(v0 + 96);
  swift_task_dealloc(*(_QWORD *)(v0 + 160));
  swift_task_dealloc(v16);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v17);
}

uint64_t sub_10007A8D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 296);
  v2 = *(_QWORD *)(v0 + 128);
  swift_release();
  swift_errorRelease(v1);
  return swift_task_switch(sub_10007A920, v2, 0);
}

uint64_t sub_10007A920()
{
  uint64_t v0;
  id v1;
  NSString v2;
  id v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  _StringGuts.grow(_:)(17);
  swift_bridgeObjectRelease(0xE000000000000000);
  v1 = objc_allocWithZone((Class)SPDataIntegrityCheck);
  v2 = String._bridgeToObjectiveC()();
  v3 = objc_msgSend(v1, "initWithValue:severity:", v2, 1, 0);

  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  v5 = *(_QWORD *)((*(_QWORD *)(v0 + 96) & 0xFFFFFFFFFFFFFF8) + 0x10);
  v4 = *(_QWORD *)((*(_QWORD *)(v0 + 96) & 0xFFFFFFFFFFFFFF8) + 0x18);
  if (v5 >= v4 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v4 > 1, v5 + 1, 1);
  v6 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v5, v3);
  specialized Array._endMutation()(v6);
  v7 = *(_QWORD *)(v0 + 152);
  v8 = *(_QWORD *)(v0 + 96);
  swift_task_dealloc(*(_QWORD *)(v0 + 160));
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v8);
}

id sub_10007AA2C(void *a1, void *a2, void *a3, void *a4, uint64_t a5, void *a6, void *a7)
{
  uint64_t v7;
  id v11;
  Class isa;
  Class v13;
  Class v14;
  Class v15;
  id v17;

  v11 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v7));
  sub_10000F4A0(0, &qword_1010ECAF8, SPPeerTrustDataIntegrity_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  sub_10000F4A0(0, &qword_1010ECB00, SPDataIntegrityCheck_ptr);
  v13 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v14 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v15 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v17 = objc_msgSend(v11, "initWithCircleRecord:sharedBeaconRecord:sharedBeaconNameRecord:sharedBeaconOwnerName:peerTrusts:sharedSecrets:keySyncRecord:observations:itemSharingKey:estimatedLocations:", a1, a2, a3, a4, isa, a6, a7, v13, v14, v15);

  return v17;
}

Swift::Int sub_10007ABA0(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  Swift::Int result;
  _QWORD v6[2];

  v2 = *(_QWORD *)(type metadata accessor for BeaconObservation(0) - 8);
  v3 = (_QWORD *)*a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
    v3 = (_QWORD *)sub_10088F0EC(v3);
  v4 = v3[2];
  v6[0] = (char *)v3 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v6[1] = v4;
  result = sub_10007AC6C(v6);
  *a1 = v3;
  return result;
}

unint64_t sub_10007AC20()
{
  unint64_t result;

  result = qword_1010ECA30;
  if (!qword_1010ECA30)
  {
    result = swift_getWitnessTable(&unk_100E22E1C, &type metadata for DataIntegrityError);
    atomic_store(result, &qword_1010ECA30);
  }
  return result;
}

uint64_t sub_10007AC64@<X0>(size_t *a1@<X8>)
{
  uint64_t v1;

  return sub_100A805E8(v1, a1);
}

Swift::Int sub_10007AC6C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Swift::Int v10;
  Swift::Int result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  Swift::Int v17;
  unint64_t v18;
  Swift::Int v19;
  Swift::Int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  Swift::Int v29;
  uint64_t v30;
  Swift::Int v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  _QWORD *v35;
  Swift::Int v36;
  uint64_t v37;
  Swift::Int v38;
  Swift::Int v39;
  uint64_t v40;
  Swift::Int v41;
  uint64_t v42;
  Swift::Int v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  Swift::Int v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  char *v62;
  char *v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  BOOL v75;
  unint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  BOOL v85;
  uint64_t v86;
  char v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  BOOL v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  Swift::Int v103;
  unint64_t v104;
  char *v105;
  char *v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  char *v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  unint64_t v119;
  char *v120;
  _QWORD *v121;
  Swift::Int v122;
  Swift::Int v123;
  uint64_t v124;
  Swift::Int v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  Swift::Int v130;
  uint64_t v131;
  uint64_t v132;
  _QWORD *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;

  v134 = type metadata accessor for BeaconObservation(0);
  v127 = *(_QWORD *)(v134 - 8);
  v3 = __chkstk_darwin(v134);
  v124 = (uint64_t)&v120 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __chkstk_darwin(v3);
  v135 = (uint64_t)&v120 - v6;
  v7 = __chkstk_darwin(v5);
  v132 = (uint64_t)&v120 - v8;
  __chkstk_darwin(v7);
  v131 = (uint64_t)&v120 - v9;
  v10 = a1[1];
  result = _minimumMergeRunLength(_:)(v10);
  if (result >= v10)
  {
    if (v10 < 0)
      goto LABEL_139;
    if (v10)
      return sub_10007B668(0, v10, 1, a1);
    return result;
  }
  if (v10 >= 0)
    v12 = v10;
  else
    v12 = v10 + 1;
  if (v10 < -1)
    goto LABEL_147;
  v133 = a1;
  v122 = result;
  v128 = v1;
  if (v10 < 2)
  {
    v16 = (char *)_swiftEmptyArrayStorage;
    v126 = (unint64_t)_swiftEmptyArrayStorage
         + ((*(unsigned __int8 *)(v127 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v127 + 80));
    v121 = _swiftEmptyArrayStorage;
    if (v10 != 1)
    {
      v18 = _swiftEmptyArrayStorage[2];
LABEL_105:
      v112 = v16;
      if (v18 >= 2)
      {
        v113 = *v133;
        do
        {
          v114 = v18 - 2;
          if (v18 < 2)
            goto LABEL_134;
          if (!v113)
            goto LABEL_146;
          v115 = *(_QWORD *)&v112[16 * v114 + 32];
          v116 = *(_QWORD *)&v112[16 * v18 + 24];
          v117 = v128;
          sub_10007B8A4(v113 + *(_QWORD *)(v127 + 72) * v115, v113 + *(_QWORD *)(v127 + 72) * *(_QWORD *)&v112[16 * v18 + 16], v113 + *(_QWORD *)(v127 + 72) * v116, v126);
          v128 = v117;
          if (v117)
            break;
          if (v116 < v115)
            goto LABEL_135;
          if ((swift_isUniquelyReferenced_nonNull_native(v112) & 1) == 0)
            v112 = sub_10088F088((uint64_t)v112);
          if (v114 >= *((_QWORD *)v112 + 2))
            goto LABEL_136;
          v118 = &v112[16 * v114 + 32];
          *(_QWORD *)v118 = v115;
          *((_QWORD *)v118 + 1) = v116;
          v119 = *((_QWORD *)v112 + 2);
          if (v18 > v119)
            goto LABEL_137;
          memmove(&v112[16 * v18 + 16], &v112[16 * v18 + 32], 16 * (v119 - v18));
          *((_QWORD *)v112 + 2) = v119 - 1;
          v18 = v119 - 1;
        }
        while (v119 > 2);
      }
LABEL_116:
      swift_bridgeObjectRelease();
      v121[2] = 0;
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    v13 = v12 >> 1;
    v14 = static Array._allocateBufferUninitialized(minimumCapacity:)(v12 >> 1, v134);
    *(_QWORD *)(v14 + 16) = v13;
    v15 = *(unsigned __int8 *)(v127 + 80);
    v121 = (_QWORD *)v14;
    v126 = v14 + ((v15 + 32) & ~v15);
  }
  v17 = 0;
  v16 = (char *)_swiftEmptyArrayStorage;
  while (1)
  {
    v19 = v17;
    v20 = v17 + 1;
    if (v17 + 1 >= v10)
    {
      ++v17;
      goto LABEL_24;
    }
    v21 = *v133;
    v22 = *(_QWORD *)(v127 + 72);
    v23 = v131;
    sub_10005972C(*v133 + v22 * v20, v131, type metadata accessor for BeaconObservation);
    v24 = v21 + v22 * v17;
    v25 = v132;
    sub_10005972C(v24, v132, type metadata accessor for BeaconObservation);
    LODWORD(v130) = static Date.< infix(_:_:)(v23 + *(int *)(v134 + 20), v25 + *(int *)(v134 + 20));
    sub_1000126B0(v25, type metadata accessor for BeaconObservation);
    sub_1000126B0(v23, type metadata accessor for BeaconObservation);
    v17 = v19 + 2;
    v129 = v21;
    v136 = v22;
    if (v19 + 2 >= v10)
      goto LABEL_21;
    v125 = v19;
    v26 = v16;
    v27 = v22 * v20;
    v28 = v21;
    v29 = v19 + 2;
    v30 = v22 * v29;
    do
    {
      v31 = v10;
      v32 = v131;
      sub_10005972C(v28 + v30, v131, type metadata accessor for BeaconObservation);
      v33 = v132;
      sub_10005972C(v28 + v27, v132, type metadata accessor for BeaconObservation);
      v34 = static Date.< infix(_:_:)(v32 + *(int *)(v134 + 20), v33 + *(int *)(v134 + 20));
      sub_1000126B0(v33, type metadata accessor for BeaconObservation);
      sub_1000126B0(v32, type metadata accessor for BeaconObservation);
      if (((v130 ^ v34) & 1) != 0)
      {
        v16 = v26;
        v17 = v29;
        v19 = v125;
        v10 = v31;
        if ((v130 & 1) != 0)
          goto LABEL_42;
        goto LABEL_24;
      }
      v28 += v136;
      ++v29;
      v10 = v31;
    }
    while (v31 != v29);
    v16 = v26;
    v17 = v31;
    v19 = v125;
LABEL_21:
    if ((v130 & 1) == 0)
      goto LABEL_24;
LABEL_42:
    v51 = v136;
    if (v17 < v19)
      goto LABEL_140;
    if (v19 < v17)
      break;
LABEL_24:
    v35 = v133;
    if (v17 < v10)
      goto LABEL_25;
LABEL_57:
    if (v17 < v19)
      goto LABEL_133;
    if ((swift_isUniquelyReferenced_nonNull_native(v16) & 1) == 0)
      v16 = sub_10088E710(0, *((_QWORD *)v16 + 2) + 1, 1, v16);
    v61 = *((_QWORD *)v16 + 2);
    v60 = *((_QWORD *)v16 + 3);
    v18 = v61 + 1;
    if (v61 >= v60 >> 1)
      v16 = sub_10088E710((char *)(v60 > 1), v61 + 1, 1, v16);
    *((_QWORD *)v16 + 2) = v18;
    v62 = v16 + 32;
    v63 = &v16[16 * v61 + 32];
    *(_QWORD *)v63 = v19;
    *((_QWORD *)v63 + 1) = v17;
    if (v61)
    {
      while (1)
      {
        v64 = v18 - 1;
        if (v18 >= 4)
        {
          v69 = &v62[16 * v18];
          v70 = *((_QWORD *)v69 - 8);
          v71 = *((_QWORD *)v69 - 7);
          v75 = __OFSUB__(v71, v70);
          v72 = v71 - v70;
          if (v75)
            goto LABEL_122;
          v74 = *((_QWORD *)v69 - 6);
          v73 = *((_QWORD *)v69 - 5);
          v75 = __OFSUB__(v73, v74);
          v67 = v73 - v74;
          v68 = v75;
          if (v75)
            goto LABEL_123;
          v76 = v18 - 2;
          v77 = &v62[16 * v18 - 32];
          v79 = *(_QWORD *)v77;
          v78 = *((_QWORD *)v77 + 1);
          v75 = __OFSUB__(v78, v79);
          v80 = v78 - v79;
          if (v75)
            goto LABEL_125;
          v75 = __OFADD__(v67, v80);
          v81 = v67 + v80;
          if (v75)
            goto LABEL_128;
          if (v81 >= v72)
          {
            v99 = &v62[16 * v64];
            v101 = *(_QWORD *)v99;
            v100 = *((_QWORD *)v99 + 1);
            v75 = __OFSUB__(v100, v101);
            v102 = v100 - v101;
            if (v75)
              goto LABEL_132;
            v92 = v67 < v102;
            goto LABEL_94;
          }
        }
        else
        {
          if (v18 != 3)
          {
            v93 = *((_QWORD *)v16 + 4);
            v94 = *((_QWORD *)v16 + 5);
            v75 = __OFSUB__(v94, v93);
            v86 = v94 - v93;
            v87 = v75;
            goto LABEL_88;
          }
          v66 = *((_QWORD *)v16 + 4);
          v65 = *((_QWORD *)v16 + 5);
          v75 = __OFSUB__(v65, v66);
          v67 = v65 - v66;
          v68 = v75;
        }
        if ((v68 & 1) != 0)
          goto LABEL_124;
        v76 = v18 - 2;
        v82 = &v62[16 * v18 - 32];
        v84 = *(_QWORD *)v82;
        v83 = *((_QWORD *)v82 + 1);
        v85 = __OFSUB__(v83, v84);
        v86 = v83 - v84;
        v87 = v85;
        if (v85)
          goto LABEL_127;
        v88 = &v62[16 * v64];
        v90 = *(_QWORD *)v88;
        v89 = *((_QWORD *)v88 + 1);
        v75 = __OFSUB__(v89, v90);
        v91 = v89 - v90;
        if (v75)
          goto LABEL_130;
        if (__OFADD__(v86, v91))
          goto LABEL_131;
        if (v86 + v91 >= v67)
        {
          v92 = v67 < v91;
LABEL_94:
          if (v92)
            v64 = v76;
          goto LABEL_96;
        }
LABEL_88:
        if ((v87 & 1) != 0)
          goto LABEL_126;
        v95 = &v62[16 * v64];
        v97 = *(_QWORD *)v95;
        v96 = *((_QWORD *)v95 + 1);
        v75 = __OFSUB__(v96, v97);
        v98 = v96 - v97;
        if (v75)
          goto LABEL_129;
        if (v98 < v86)
          goto LABEL_14;
LABEL_96:
        v103 = v17;
        v104 = v64 - 1;
        if (v64 - 1 >= v18)
        {
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
          goto LABEL_142;
        }
        if (!*v133)
          goto LABEL_144;
        v105 = v16;
        v106 = &v62[16 * v104];
        v107 = *(_QWORD *)v106;
        v108 = &v62[16 * v64];
        v109 = *((_QWORD *)v108 + 1);
        v110 = v128;
        sub_10007B8A4(*v133 + *(_QWORD *)(v127 + 72) * *(_QWORD *)v106, *v133 + *(_QWORD *)(v127 + 72) * *(_QWORD *)v108, *v133 + *(_QWORD *)(v127 + 72) * v109, v126);
        v128 = v110;
        if (v110)
          goto LABEL_116;
        if (v109 < v107)
          goto LABEL_119;
        if (v64 > *((_QWORD *)v105 + 2))
          goto LABEL_120;
        *(_QWORD *)v106 = v107;
        *(_QWORD *)&v62[16 * v104 + 8] = v109;
        v111 = *((_QWORD *)v105 + 2);
        if (v64 >= v111)
          goto LABEL_121;
        v16 = v105;
        v18 = v111 - 1;
        memmove(&v62[16 * v64], v108 + 16, 16 * (v111 - 1 - v64));
        *((_QWORD *)v105 + 2) = v111 - 1;
        v92 = v111 > 2;
        v17 = v103;
        if (!v92)
          goto LABEL_14;
      }
    }
    v18 = 1;
LABEL_14:
    v10 = v133[1];
    if (v17 >= v10)
      goto LABEL_105;
  }
  v130 = v10;
  v120 = v16;
  v52 = 0;
  v53 = v136 * (v17 - 1);
  v54 = v17 * v136;
  v55 = v19;
  v56 = v19 * v136;
  v35 = v133;
  v125 = v19;
  do
  {
    if (v55 != v17 + v52 - 1)
    {
      v57 = v129;
      if (!v129)
        goto LABEL_145;
      v58 = v129 + v56;
      v59 = v129 + v53;
      sub_1000126EC(v129 + v56, v124, type metadata accessor for BeaconObservation);
      if (v56 < v53 || v58 >= v57 + v54)
      {
        swift_arrayInitWithTakeFrontToBack(v57 + v56, v57 + v53, 1, v134);
        v51 = v136;
      }
      else
      {
        v51 = v136;
        if (v56 != v53)
          swift_arrayInitWithTakeBackToFront(v58, v59);
      }
      sub_1000126EC(v124, v59, type metadata accessor for BeaconObservation);
      v35 = v133;
      v19 = v125;
    }
    ++v55;
    --v52;
    v53 -= v51;
    v54 -= v51;
    v56 += v51;
  }
  while (v55 < v17 + v52);
  v16 = v120;
  v10 = v130;
  if (v17 >= v130)
    goto LABEL_57;
LABEL_25:
  if (__OFSUB__(v17, v19))
    goto LABEL_138;
  if (v17 - v19 >= v122)
    goto LABEL_57;
  if (__OFADD__(v19, v122))
    goto LABEL_141;
  if (v19 + v122 >= v10)
    v36 = v10;
  else
    v36 = v19 + v122;
  if (v36 >= v19)
  {
    if (v17 != v36)
    {
      v120 = v16;
      v37 = *(_QWORD *)(v127 + 72);
      v136 = v37 * (v17 - 1);
      v129 = v37;
      v38 = v17 * v37;
      v125 = v19;
      v123 = v36;
      do
      {
        v40 = 0;
        v41 = v19;
        v130 = v17;
        while (1)
        {
          v42 = *v35;
          v43 = v38;
          v44 = v38 + v40 + *v35;
          v45 = v131;
          v46 = v35;
          sub_10005972C(v44, v131, type metadata accessor for BeaconObservation);
          v47 = v132;
          sub_10005972C(v136 + v40 + v42, v132, type metadata accessor for BeaconObservation);
          LOBYTE(v42) = static Date.< infix(_:_:)(v45 + *(int *)(v134 + 20), v47 + *(int *)(v134 + 20));
          sub_1000126B0(v47, type metadata accessor for BeaconObservation);
          sub_1000126B0(v45, type metadata accessor for BeaconObservation);
          if ((v42 & 1) == 0)
            break;
          v48 = *v46;
          if (!*v46)
            goto LABEL_143;
          v38 = v43;
          v49 = v48 + v43 + v40;
          v50 = v48 + v136 + v40;
          sub_1000126EC(v49, v135, type metadata accessor for BeaconObservation);
          swift_arrayInitWithTakeFrontToBack(v49, v50, 1, v134);
          sub_1000126EC(v135, v50, type metadata accessor for BeaconObservation);
          v39 = v130;
          v40 -= v129;
          ++v41;
          v35 = v133;
          if (v130 == v41)
            goto LABEL_35;
        }
        v39 = v130;
        v38 = v43;
        v35 = v46;
LABEL_35:
        v17 = v39 + 1;
        v136 += v129;
        v38 += v129;
        v19 = v125;
      }
      while (v17 != v123);
      v17 = v123;
      v16 = v120;
    }
    goto LABEL_57;
  }
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  __break(1u);
LABEL_147:
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
  __break(1u);
  return result;
}

uint64_t sub_10007B668(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v26 = a1;
  v30 = type metadata accessor for BeaconObservation(0);
  v7 = __chkstk_darwin(v30);
  v31 = (uint64_t)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v7);
  v27 = (uint64_t)&v24 - v10;
  result = __chkstk_darwin(v9);
  v14 = (char *)&v24 - v13;
  v29 = a3;
  v25 = a2;
  if (a3 != a2)
  {
    v15 = *(_QWORD *)(v12 + 72);
    v33 = v15 * (v29 - 1);
    v28 = v15;
    v32 = v15 * v29;
LABEL_5:
    v16 = 0;
    v17 = v26;
    while (1)
    {
      v18 = *a4;
      sub_10005972C(v32 + v16 + *a4, (uint64_t)v14, type metadata accessor for BeaconObservation);
      v19 = v27;
      sub_10005972C(v33 + v16 + v18, v27, type metadata accessor for BeaconObservation);
      LOBYTE(v18) = static Date.< infix(_:_:)(&v14[*(int *)(v30 + 20)], v19 + *(int *)(v30 + 20));
      sub_1000126B0(v19, type metadata accessor for BeaconObservation);
      result = sub_1000126B0((uint64_t)v14, type metadata accessor for BeaconObservation);
      if ((v18 & 1) == 0)
      {
LABEL_4:
        v33 += v28;
        v32 += v28;
        if (++v29 == v25)
          return result;
        goto LABEL_5;
      }
      v20 = *a4;
      if (!*a4)
        break;
      v21 = a4;
      v22 = v20 + v32 + v16;
      v23 = v20 + v33 + v16;
      sub_1000126EC(v22, v31, type metadata accessor for BeaconObservation);
      swift_arrayInitWithTakeFrontToBack(v22, v23, 1, v30);
      result = sub_1000126EC(v31, v23, type metadata accessor for BeaconObservation);
      v16 -= v28;
      ++v17;
      a4 = v21;
      if (v29 == v17)
        goto LABEL_4;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_10007B8A4(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  char v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  BOOL v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t result;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;

  v45 = type metadata accessor for BeaconObservation(0);
  v8 = __chkstk_darwin(v45);
  v44 = (uint64_t)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v11 = (char *)&v41 - v10;
  v13 = *(_QWORD *)(v12 + 72);
  if (!v13)
  {
    __break(1u);
LABEL_62:
    __break(1u);
LABEL_63:
    __break(1u);
    goto LABEL_64;
  }
  if (a2 - a1 == 0x8000000000000000 && v13 == -1)
    goto LABEL_62;
  v14 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v13 == -1)
    goto LABEL_63;
  v15 = (uint64_t)(a2 - a1) / v13;
  v48 = a1;
  v47 = a4;
  v16 = v14 / v13;
  if (v15 >= v14 / v13)
  {
    if ((v16 & 0x8000000000000000) == 0)
    {
      v18 = v16 * v13;
      if (a4 < a2 || a2 + v18 <= a4)
      {
        swift_arrayInitWithTakeFrontToBack(a4, a2, v16, v45);
      }
      else if (a4 != a2)
      {
        swift_arrayInitWithTakeBackToFront(a4, a2);
      }
      v25 = a4 + v18;
      v46 = a4 + v18;
      v48 = a2;
      if (v18 >= 1 && a1 < a2)
      {
        v27 = -v13;
        v42 = a4;
        v43 = a1;
        do
        {
          v28 = a3 + v27;
          sub_10005972C(v25 + v27, (uint64_t)v11, type metadata accessor for BeaconObservation);
          v29 = a2 + v27;
          v30 = a3;
          v31 = (uint64_t)v11;
          v32 = v44;
          sub_10005972C(a2 + v27, v44, type metadata accessor for BeaconObservation);
          v33 = static Date.< infix(_:_:)(v31 + *(int *)(v45 + 20), v32 + *(int *)(v45 + 20));
          v34 = v32;
          v11 = (char *)v31;
          sub_1000126B0(v34, type metadata accessor for BeaconObservation);
          sub_1000126B0(v31, type metadata accessor for BeaconObservation);
          if ((v33 & 1) != 0)
          {
            if (v30 < a2 || v28 >= a2)
            {
              swift_arrayInitWithTakeFrontToBack(v28, a2 + v27, 1, v45);
              v37 = v42;
              v36 = v43;
            }
            else
            {
              v35 = v30 == a2;
              v37 = v42;
              v36 = v43;
              if (!v35)
                swift_arrayInitWithTakeBackToFront(v28, a2 + v27);
            }
            v48 += v27;
          }
          else
          {
            v38 = v46;
            v39 = v46 + v27;
            v46 += v27;
            if (v30 < v38 || v28 >= v38)
            {
              swift_arrayInitWithTakeFrontToBack(v28, v39, 1, v45);
              v29 = a2;
              v37 = v42;
              v36 = v43;
            }
            else
            {
              v35 = v30 == v38;
              v37 = v42;
              v36 = v43;
              if (!v35)
                swift_arrayInitWithTakeBackToFront(v28, v39);
              v29 = a2;
            }
          }
          v25 = v46;
          if (v46 <= v37)
            break;
          a2 = v29;
          a3 = v28;
        }
        while (v29 > v36);
      }
      goto LABEL_60;
    }
  }
  else if ((v15 & 0x8000000000000000) == 0)
  {
    v17 = v15 * v13;
    if (a4 < a1 || a1 + v17 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack(a4, a1, v15, v45);
    }
    else if (a4 != a1)
    {
      swift_arrayInitWithTakeBackToFront(a4, a1);
    }
    v43 = a4 + v17;
    v46 = a4 + v17;
    if (v17 >= 1 && a2 < a3)
    {
      v20 = v44;
      do
      {
        sub_10005972C(a2, (uint64_t)v11, type metadata accessor for BeaconObservation);
        sub_10005972C(a4, v20, type metadata accessor for BeaconObservation);
        v21 = static Date.< infix(_:_:)(&v11[*(int *)(v45 + 20)], v20 + *(int *)(v45 + 20));
        sub_1000126B0(v20, type metadata accessor for BeaconObservation);
        sub_1000126B0((uint64_t)v11, type metadata accessor for BeaconObservation);
        v22 = v48;
        if ((v21 & 1) != 0)
        {
          v23 = a2 + v13;
          if (v48 < a2 || v48 >= v23)
          {
            swift_arrayInitWithTakeFrontToBack(v48, a2, 1, v45);
          }
          else if (v48 == a2)
          {
            v22 = a2;
          }
          else
          {
            swift_arrayInitWithTakeBackToFront(v48, a2);
          }
        }
        else
        {
          v24 = v47 + v13;
          if (v48 < v47 || v48 >= v24)
          {
            swift_arrayInitWithTakeFrontToBack(v48, v47, 1, v45);
          }
          else if (v48 != v47)
          {
            swift_arrayInitWithTakeBackToFront(v48, v47);
          }
          v47 = v24;
          v23 = a2;
        }
        v48 = v22 + v13;
        a4 = v47;
        if (v47 >= v43)
          break;
        a2 = v23;
      }
      while (v23 < a3);
    }
LABEL_60:
    sub_10088E8E0(&v48, &v47, (uint64_t *)&v46);
    return 1;
  }
LABEL_64:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

_QWORD *sub_10007BD54(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD), void (*a4)(BOOL, uint64_t, uint64_t))
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *result;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, unint64_t, uint64_t);
  uint64_t v29;
  char v30;
  _QWORD *v31;
  unint64_t v32;
  unint64_t v33;
  _QWORD v34[2];
  void (*v35)(BOOL, uint64_t, uint64_t);
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t (*v39)(_QWORD);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;

  v35 = a4;
  v8 = type metadata accessor for UUID(0);
  v45 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v10 = (char *)v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = a3(0);
  v11 = __chkstk_darwin(v36);
  v41 = (uint64_t)v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v44 = (uint64_t)v34 - v14;
  result = _swiftEmptyArrayStorage;
  v47 = _swiftEmptyArrayStorage;
  v40 = *(_QWORD *)(a1 + 16);
  if (v40)
  {
    v34[1] = v4;
    v16 = 0;
    v17 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
    v42 = *(_QWORD *)(v13 + 72);
    v37 = v17;
    v38 = a1 + v17;
    v39 = a3;
    v46 = a2 + 56;
    v18 = a2;
    do
    {
      v43 = v16;
      sub_10005972C(v38 + v42 * v16, v44, a3);
      if (*(_QWORD *)(a2 + 16)
        && (v19 = v44 + *(int *)(v36 + 20),
            v20 = *(_QWORD *)(v18 + 40),
            v21 = sub_100006204(&qword_1010F98B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID), v22 = dispatch thunk of Hashable._rawHashValue(seed:)(v20, v8, v21), v23 = -1 << *(_BYTE *)(v18 + 32), v24 = v22 & ~v23, ((*(_QWORD *)(v46 + ((v24 >> 3) & 0xFFFFFFFFFFFFF8)) >> v24) & 1) != 0))
      {
        v25 = v18;
        v26 = ~v23;
        v27 = *(_QWORD *)(v45 + 72);
        v28 = *(void (**)(char *, unint64_t, uint64_t))(v45 + 16);
        while (1)
        {
          v28(v10, *(_QWORD *)(v25 + 48) + v27 * v24, v8);
          v29 = sub_100006204(&qword_1010EE520, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
          v30 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v19, v8, v29);
          (*(void (**)(char *, uint64_t))(v45 + 8))(v10, v8);
          if ((v30 & 1) != 0)
            break;
          v24 = (v24 + 1) & v26;
          v25 = v18;
          if (((*(_QWORD *)(v46 + ((v24 >> 3) & 0xFFFFFFFFFFFFF8)) >> v24) & 1) == 0)
            goto LABEL_10;
        }
        a3 = v39;
        sub_1000126B0(v44, v39);
      }
      else
      {
LABEL_10:
        a3 = v39;
        sub_1000126EC(v44, v41, v39);
        v31 = v47;
        if ((swift_isUniquelyReferenced_nonNull_native(v47) & 1) == 0)
        {
          v35(0, v31[2] + 1, 1);
          v31 = v47;
        }
        v33 = v31[2];
        v32 = v31[3];
        if (v33 >= v32 >> 1)
        {
          v35(v32 > 1, v33 + 1, 1);
          v31 = v47;
        }
        v31[2] = v33 + 1;
        sub_1000126EC(v41, (uint64_t)v31 + v37 + v33 * v42, a3);
      }
      v16 = v43 + 1;
      a2 = v18;
    }
    while (v43 + 1 != v40);
    return v47;
  }
  return result;
}

uint64_t sub_10007C088@<X0>(size_t *a1@<X8>)
{
  uint64_t v1;

  return sub_100A80978(v1, a1);
}

_QWORD *sub_10007C090@<X0>(_QWORD *a1@<X8>)
{
  return sub_100A8253C(a1);
}

_QWORD *sub_10007C098@<X0>(_QWORD *a1@<X8>)
{
  return sub_100A82AD4(a1);
}

_QWORD *sub_10007C0A0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  _QWORD *result;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, unint64_t, uint64_t);
  uint64_t v27;
  char v28;
  _QWORD *v29;
  unint64_t v30;
  unint64_t v31;
  _QWORD v32[2];
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;

  v5 = type metadata accessor for UUID(0);
  v39 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v7 = (char *)v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for KeySyncRecord(0);
  v9 = __chkstk_darwin(v8);
  v36 = (uint64_t)v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)v32 - v12;
  result = _swiftEmptyArrayStorage;
  v41 = _swiftEmptyArrayStorage;
  v35 = *(_QWORD *)(a1 + 16);
  if (v35)
  {
    v15 = 0;
    v16 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
    v37 = *(_QWORD *)(v11 + 72);
    v32[1] = v2;
    v33 = v16;
    v34 = a1 + v16;
    v40 = a2 + 56;
    v17 = a2;
    do
    {
      v38 = v15;
      sub_10005972C(v34 + v37 * v15, (uint64_t)v13, type metadata accessor for KeySyncRecord);
      if (*(_QWORD *)(a2 + 16)
        && (v18 = *(_QWORD *)(v17 + 40),
            v19 = sub_100006204(&qword_1010F98B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID), v20 = dispatch thunk of Hashable._rawHashValue(seed:)(v18, v5, v19), v21 = -1 << *(_BYTE *)(v17 + 32), v22 = v20 & ~v21, ((*(_QWORD *)(v40 + ((v22 >> 3) & 0xFFFFFFFFFFFFF8)) >> v22) & 1) != 0))
      {
        v23 = v17;
        v24 = ~v21;
        v25 = *(_QWORD *)(v39 + 72);
        v26 = *(void (**)(char *, unint64_t, uint64_t))(v39 + 16);
        while (1)
        {
          v26(v7, *(_QWORD *)(v23 + 48) + v25 * v22, v5);
          v27 = sub_100006204(&qword_1010EE520, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
          v28 = dispatch thunk of static Equatable.== infix(_:_:)(v7, v13, v5, v27);
          (*(void (**)(char *, uint64_t))(v39 + 8))(v7, v5);
          if ((v28 & 1) != 0)
            break;
          v22 = (v22 + 1) & v24;
          v23 = v17;
          if (((*(_QWORD *)(v40 + ((v22 >> 3) & 0xFFFFFFFFFFFFF8)) >> v22) & 1) == 0)
            goto LABEL_10;
        }
        sub_1000126B0((uint64_t)v13, type metadata accessor for KeySyncRecord);
      }
      else
      {
LABEL_10:
        sub_1000126EC((uint64_t)v13, v36, type metadata accessor for KeySyncRecord);
        v29 = v41;
        if ((swift_isUniquelyReferenced_nonNull_native(v41) & 1) == 0)
        {
          sub_10009A7A4(0, v29[2] + 1, 1);
          v29 = v41;
        }
        v31 = v29[2];
        v30 = v29[3];
        if (v31 >= v30 >> 1)
        {
          sub_10009A7A4(v30 > 1, v31 + 1, 1);
          v29 = v41;
        }
        v29[2] = v31 + 1;
        sub_1000126EC(v36, (uint64_t)v29 + v33 + v31 * v37, type metadata accessor for KeySyncRecord);
      }
      v15 = v38 + 1;
      a2 = v17;
    }
    while (v38 + 1 != v35);
    return v41;
  }
  return result;
}

char *sub_10007C3B8@<X0>(char **a1@<X8>)
{
  return sub_100A82738(a1);
}

_QWORD *sub_10007C3C0@<X0>(_QWORD *a1@<X8>)
{
  return sub_100A82938(a1);
}

_QWORD *sub_10007C3C8(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD), void (*a4)(BOOL, uint64_t, uint64_t))
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *result;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, unint64_t, uint64_t);
  uint64_t v29;
  char v30;
  _QWORD *v31;
  unint64_t v32;
  unint64_t v33;
  _QWORD v34[2];
  void (*v35)(BOOL, uint64_t, uint64_t);
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t (*v39)(_QWORD);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;

  v35 = a4;
  v8 = type metadata accessor for UUID(0);
  v45 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v10 = (char *)v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = a3(0);
  v11 = __chkstk_darwin(v36);
  v41 = (uint64_t)v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v44 = (uint64_t)v34 - v14;
  result = _swiftEmptyArrayStorage;
  v47 = _swiftEmptyArrayStorage;
  v40 = *(_QWORD *)(a1 + 16);
  if (v40)
  {
    v34[1] = v4;
    v16 = 0;
    v17 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
    v42 = *(_QWORD *)(v13 + 72);
    v37 = v17;
    v38 = a1 + v17;
    v39 = a3;
    v46 = a2 + 56;
    v18 = a2;
    do
    {
      v43 = v16;
      sub_10005972C(v38 + v42 * v16, v44, a3);
      if (*(_QWORD *)(a2 + 16)
        && (v19 = v44 + *(int *)(v36 + 24),
            v20 = *(_QWORD *)(v18 + 40),
            v21 = sub_100006204(&qword_1010F98B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID), v22 = dispatch thunk of Hashable._rawHashValue(seed:)(v20, v8, v21), v23 = -1 << *(_BYTE *)(v18 + 32), v24 = v22 & ~v23, ((*(_QWORD *)(v46 + ((v24 >> 3) & 0xFFFFFFFFFFFFF8)) >> v24) & 1) != 0))
      {
        v25 = v18;
        v26 = ~v23;
        v27 = *(_QWORD *)(v45 + 72);
        v28 = *(void (**)(char *, unint64_t, uint64_t))(v45 + 16);
        while (1)
        {
          v28(v10, *(_QWORD *)(v25 + 48) + v27 * v24, v8);
          v29 = sub_100006204(&qword_1010EE520, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
          v30 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v19, v8, v29);
          (*(void (**)(char *, uint64_t))(v45 + 8))(v10, v8);
          if ((v30 & 1) != 0)
            break;
          v24 = (v24 + 1) & v26;
          v25 = v18;
          if (((*(_QWORD *)(v46 + ((v24 >> 3) & 0xFFFFFFFFFFFFF8)) >> v24) & 1) == 0)
            goto LABEL_10;
        }
        a3 = v39;
        sub_1000126B0(v44, v39);
      }
      else
      {
LABEL_10:
        a3 = v39;
        sub_1000126EC(v44, v41, v39);
        v31 = v47;
        if ((swift_isUniquelyReferenced_nonNull_native(v47) & 1) == 0)
        {
          v35(0, v31[2] + 1, 1);
          v31 = v47;
        }
        v33 = v31[2];
        v32 = v31[3];
        if (v33 >= v32 >> 1)
        {
          v35(v32 > 1, v33 + 1, 1);
          v31 = v47;
        }
        v31[2] = v33 + 1;
        sub_1000126EC(v41, (uint64_t)v31 + v37 + v33 * v42, a3);
      }
      v16 = v43 + 1;
      a2 = v18;
    }
    while (v43 + 1 != v40);
    return v47;
  }
  return result;
}

uint64_t sub_10007C6FC@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  return sub_100A803DC(v1, a1);
}

_QWORD *sub_10007C704(uint64_t a1, uint64_t a2, uint64_t *a3, void (*a4)(BOOL, uint64_t, uint64_t))
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  _QWORD *result;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, unint64_t, uint64_t);
  uint64_t v30;
  char v31;
  _QWORD *v32;
  unint64_t v33;
  unint64_t v34;
  _QWORD v35[2];
  void (*v36)(BOOL, uint64_t, uint64_t);
  unint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;

  v36 = a4;
  v8 = type metadata accessor for UUID(0);
  v44 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v10 = (char *)v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10001A9A8(a3);
  v12 = __chkstk_darwin(v11);
  v41 = (uint64_t)v35 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v16 = (char *)v35 - v15;
  result = _swiftEmptyArrayStorage;
  v46 = _swiftEmptyArrayStorage;
  v40 = *(_QWORD *)(a1 + 16);
  if (v40)
  {
    v35[1] = v4;
    v18 = 0;
    v19 = (*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
    v42 = *(_QWORD *)(v14 + 72);
    v37 = v19;
    v38 = a1 + v19;
    v39 = a3;
    v45 = a2 + 56;
    v20 = a2;
    do
    {
      v43 = v18;
      sub_10000F9B8(v38 + v42 * v18, (uint64_t)v16, a3);
      if (*(_QWORD *)(a2 + 16)
        && (v21 = *(_QWORD *)(v20 + 40),
            v22 = sub_100006204(&qword_1010F98B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID), v23 = dispatch thunk of Hashable._rawHashValue(seed:)(v21, v8, v22), v24 = -1 << *(_BYTE *)(v20 + 32), v25 = v23 & ~v24, ((*(_QWORD *)(v45 + ((v25 >> 3) & 0xFFFFFFFFFFFFF8)) >> v25) & 1) != 0))
      {
        v26 = v20;
        v27 = ~v24;
        v28 = *(_QWORD *)(v44 + 72);
        v29 = *(void (**)(char *, unint64_t, uint64_t))(v44 + 16);
        while (1)
        {
          v29(v10, *(_QWORD *)(v26 + 48) + v28 * v25, v8);
          v30 = sub_100006204(&qword_1010EE520, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
          v31 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v16, v8, v30);
          (*(void (**)(char *, uint64_t))(v44 + 8))(v10, v8);
          if ((v31 & 1) != 0)
            break;
          v25 = (v25 + 1) & v27;
          v26 = v20;
          if (((*(_QWORD *)(v45 + ((v25 >> 3) & 0xFFFFFFFFFFFFF8)) >> v25) & 1) == 0)
            goto LABEL_10;
        }
        a3 = v39;
        sub_100004048((uint64_t)v16, v39);
      }
      else
      {
LABEL_10:
        a3 = v39;
        sub_100005CF0((uint64_t)v16, v41, v39);
        v32 = v46;
        if ((swift_isUniquelyReferenced_nonNull_native(v46) & 1) == 0)
        {
          v36(0, v32[2] + 1, 1);
          v32 = v46;
        }
        v34 = v32[2];
        v33 = v32[3];
        if (v34 >= v33 >> 1)
        {
          v36(v33 > 1, v34 + 1, 1);
          v32 = v46;
        }
        v32[2] = v34 + 1;
        sub_100005CF0(v41, (uint64_t)v32 + v37 + v34 * v42, a3);
      }
      v18 = v43 + 1;
      a2 = v20;
    }
    while (v43 + 1 != v40);
    return v46;
  }
  return result;
}

uint64_t sub_10007CA2C()
{
  return sub_100067FB4((uint64_t (*)(_QWORD, uint64_t))sub_100A83A78);
}

uint64_t sub_10007CA38()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10007CA98@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for UUID(0) - 8) + 80);
  return sub_100073190(v1 + ((v3 + 16) & ~v3), a1);
}

void sub_10007CAD4(_QWORD *a1@<X8>)
{
  uint64_t v1;

  sub_10058DD3C(v1, a1);
}

uint64_t sub_10007CAF0()
{
  return sub_100067FB4((uint64_t (*)(_QWORD, uint64_t))sub_100A82AB0);
}

uint64_t sub_10007CB00()
{
  return sub_100067FB4((uint64_t (*)(_QWORD, uint64_t))sub_100A81CDC);
}

unint64_t sub_10007CB0C()
{
  unint64_t result;

  result = qword_10110EED0;
  if (!qword_10110EED0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for PrivateKey, &type metadata for PrivateKey);
    atomic_store(result, (unint64_t *)&qword_10110EED0);
  }
  return result;
}

uint64_t *sub_10007CB54(uint64_t *a1)
{
  sub_10007CB98(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8]);
  return a1;
}

uint64_t sub_10007CB98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(a7);
    swift_bridgeObjectRelease(a5);
    return swift_bridgeObjectRelease(a9);
  }
  return result;
}

uint64_t sub_10007CBEC()
{
  return sub_100067FB4(sub_100A82924);
}

uint64_t sub_10007CC00()
{
  return sub_100067FB4((uint64_t (*)(_QWORD, uint64_t))sub_100A814F0);
}

uint64_t sub_10007CC14()
{
  return sub_100067FB4((uint64_t (*)(_QWORD, uint64_t))sub_100A80D08);
}

uint64_t sub_10007CC24()
{
  return sub_100067FB4((uint64_t (*)(_QWORD, uint64_t))sub_100A81540);
}

uint64_t sub_10007CC38(uint64_t a1)
{
  return swift_release(a1 & 0x7FFFFFFFFFFFFFFFLL);
}

uint64_t _s15KnownRecordTypeOwet(unsigned int *a1, int a2)
{
  int v2;
  int v3;

  if (!a2)
    return 0;
  if ((a2 + 1) >= 0x10000)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) < 0x100)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
    return *a1;
  if (v3 == 2)
    return *(unsigned __int16 *)a1;
  return *(unsigned __int8 *)a1;
}

uint64_t storeEnumTagSinglePayload for DataIntegrityError(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_10007CCD4 + 4 * byte_100E22D2C[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_10007CCF4 + 4 * byte_100E22D31[v4]))();
}

_BYTE *sub_10007CCD4(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_10007CCF4(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10007CCFC(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10007CD04(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10007CD0C(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10007CD14(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for DataIntegrityError()
{
  return &type metadata for DataIntegrityError;
}

unint64_t sub_10007CD34()
{
  unint64_t result;

  result = qword_1010ECB30;
  if (!qword_1010ECB30)
  {
    result = swift_getWitnessTable(&unk_100E22DF4, &type metadata for DataIntegrityError);
    atomic_store(result, (unint64_t *)&qword_1010ECB30);
  }
  return result;
}

uint64_t sub_10007CD78@<X0>(__int128 *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, char *a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v36)(char *, char *, uint64_t);
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int *v45;
  char *v46;
  char *v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  __int128 *v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  char *v63;
  int *v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  void (*v72)(char *, char *, uint64_t);
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  __int128 *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  char v88[24];
  __int128 v89;
  __int128 v90;
  _QWORD v91[2];
  _QWORD v92[2];
  __int128 v93;

  v80 = a3;
  v79 = a1;
  v87 = a4;
  v5 = sub_10001A9A8((uint64_t *)&unk_10111C0A0);
  __chkstk_darwin(v5);
  v81 = (uint64_t)&v68 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Date(0);
  v83 = *(_QWORD *)(v7 - 8);
  v84 = v7;
  __chkstk_darwin(v7);
  v82 = (uint64_t)&v68 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for StableIdentifier(0);
  v10 = __chkstk_darwin(v9);
  v86 = (uint64_t)&v68 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v13 = (char *)&v68 - v12;
  v14 = type metadata accessor for Endianness(0);
  __chkstk_darwin(v14);
  v16 = (char *)&v68 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_10001A9A8(&qword_1010ED860);
  v18 = __chkstk_darwin(v17);
  v85 = (uint64_t)&v68 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v21 = (char *)&v68 - v20;
  v22 = type metadata accessor for UUID(0);
  v23 = *(_QWORD *)(v22 - 8);
  v24 = __chkstk_darwin(v22);
  v26 = (char *)&v68 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = __chkstk_darwin(v24);
  v29 = (char *)&v68 - v28;
  v30 = a2[12];
  if (!v30 || a2[14] >> 60 == 15 || (v31 = a2[16]) == 0)
  {
LABEL_6:
    v33 = static os_log_type_t.error.getter(v27);
    if (qword_1010EA310 != -1)
      swift_once(&qword_1010EA310, sub_100B5E2C8);
    os_log(_:dso:log:_:_:)(v33, &_mh_execute_header, qword_1011B7DF0, "generateOwnedBeaconRecord: could not get basic device info from the session.", 76, 2, _swiftEmptyArrayStorage);
LABEL_9:
    v34 = type metadata accessor for OwnedBeaconRecord(0);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(v87, 1, 1, v34);
  }
  v78 = a2[14];
  v75 = v30;
  v74 = a2[11];
  v77 = a2[13];
  v76 = a2[15];
  v32 = (uint64_t)a2 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_fmnaId;
  swift_beginAccess(v32, v88, 0, 0);
  sub_10000F9B8(v32, (uint64_t)v21, &qword_1010ED860);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22) == 1)
  {
    v27 = sub_100004048((uint64_t)v21, &qword_1010ED860);
    goto LABEL_6;
  }
  v36 = *(void (**)(char *, char *, uint64_t))(v23 + 32);
  v36(v29, v21, v22);
  v37 = HIBYTE(v31) & 0xF;
  if ((v31 & 0x2000000000000000) == 0)
    v37 = v76 & 0xFFFFFFFFFFFFLL;
  if (!v37)
  {
    v58 = v77;
    v59 = v78;
    v60 = sub_10001BBBC(v77, v78);
    v61 = static os_log_type_t.error.getter(v60);
    if (qword_1010EA310 != -1)
      swift_once(&qword_1010EA310, sub_100B5E2C8);
    os_log(_:dso:log:_:_:)(v61, &_mh_execute_header, qword_1011B7DF0, "generateOwnedBeaconRecord: invalid parameters for StableIdentifier.", 67, 2, _swiftEmptyArrayStorage);
    sub_10001EF3C(v58, v59);
    (*(void (**)(char *, uint64_t))(v23 + 8))(v29, v22);
    goto LABEL_9;
  }
  v72 = v36;
  swift_bridgeObjectRetain(v75);
  v38 = v77;
  v39 = v78;
  sub_10005CB9C(v77, v78);
  swift_bridgeObjectRetain(v31);
  sub_1001EDA78(v38, v39);
  v73 = v40;
  v41 = sub_1001EDBAC(v38, v39);
  v43 = v42;
  static Endianness.current.getter(v41);
  sub_10007D5A4();
  FixedWidthInteger.init(data:ofEndianness:)(&v93, v41, v43, v16);
  v44 = (int)v93;
  if (BYTE4(v93))
    v44 = 0;
  v71 = v44;
  v45 = (int *)sub_10001A9A8(&qword_101106F40);
  v46 = &v13[v45[12]];
  v47 = &v13[v45[16]];
  v48 = &v13[v45[20]];
  v70 = v45[24];
  v69 = &v13[v45[28]];
  (*(void (**)(char *, char *, uint64_t))(v23 + 16))(v13, v29, v22);
  *(_QWORD *)v46 = 0;
  *((_QWORD *)v46 + 1) = 0;
  *(_QWORD *)v47 = 0;
  *((_QWORD *)v47 + 1) = 0;
  *(_QWORD *)v48 = v76;
  *((_QWORD *)v48 + 1) = v31;
  *(_WORD *)&v13[v70] = 256;
  v49 = v69;
  *(_QWORD *)v69 = 0;
  *((_QWORD *)v49 + 1) = 0;
  v50 = swift_storeEnumTagMultiPayload(v13, v9, 2);
  UUID.init()(v50);
  sub_10007D5E8((uint64_t)v13, v86);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v23 + 56))(v85, 1, 1, v22);
  v51 = v82;
  sub_1007EEC58(v82);
  v52 = v79;
  v93 = v79[2];
  sub_100005CF0((uint64_t)(v79 + 3), (uint64_t)v92, &qword_1010ECB38);
  sub_100005CF0((uint64_t)(v52 + 4), (uint64_t)v91, &qword_1010ECB38);
  v53 = *v52;
  v89 = v52[1];
  v90 = v53;
  v54 = v81;
  sub_10000F9B8(v80, v81, (uint64_t *)&unk_10111C0A0);
  v55 = type metadata accessor for AccessoryProductInfo(0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v55 - 8) + 48))(v54, 1, v55) == 1)
  {
    sub_100059DE8((uint64_t)&v93);
    sub_10007D62C(v92);
    sub_10007D62C(v91);
    sub_100059DE8((uint64_t)&v90);
    sub_100059DE8((uint64_t)&v89);
    sub_100004048(v54, (uint64_t *)&unk_10111C0A0);
    v56 = 0;
    v57 = 0xE000000000000000;
  }
  else
  {
    v62 = (uint64_t *)(v54 + *(int *)(v55 + 48));
    v56 = *v62;
    v57 = v62[1];
    sub_100059DE8((uint64_t)&v93);
    sub_10007D62C(v92);
    sub_10007D62C(v91);
    sub_100059DE8((uint64_t)&v90);
    sub_100059DE8((uint64_t)&v89);
    swift_bridgeObjectRetain(v57);
    sub_1000126B0(v54, type metadata accessor for AccessoryProductInfo);
  }
  sub_10001EF3C(v77, v78);
  sub_1000126B0((uint64_t)v13, type metadata accessor for StableIdentifier);
  (*(void (**)(char *, uint64_t))(v23 + 8))(v29, v22);
  v63 = v87;
  *(_OWORD *)v87 = xmmword_100E22FC0;
  v64 = (int *)type metadata accessor for OwnedBeaconRecord(0);
  v72(&v63[v64[5]], v26, v22);
  sub_10007D658(v86, (uint64_t)&v63[v64[6]]);
  sub_100005CF0(v85, (uint64_t)&v63[v64[7]], &qword_1010ED860);
  (*(void (**)(char *, uint64_t, uint64_t))(v83 + 32))(&v63[v64[8]], v51, v84);
  *(_OWORD *)&v63[v64[9]] = v93;
  sub_100005CF0((uint64_t)v92, (uint64_t)&v63[v64[10]], &qword_1010ECB38);
  sub_100005CF0((uint64_t)v91, (uint64_t)&v63[v64[11]], &qword_1010ECB38);
  *(_OWORD *)&v63[v64[12]] = v90;
  *(_OWORD *)&v63[v64[13]] = v89;
  v65 = &v63[v64[14]];
  *(_QWORD *)v65 = v56;
  *((_QWORD *)v65 + 1) = v57;
  v66 = &v63[v64[15]];
  v67 = v75;
  *(_QWORD *)v66 = v74;
  *((_QWORD *)v66 + 1) = v67;
  *(_QWORD *)&v63[v64[16]] = v73;
  *(_QWORD *)&v63[v64[17]] = v71;
  v63[v64[18]] = 3;
  v63[v64[19]] = 0;
  v63[v64[20]] = 0;
  return (*(uint64_t (**)(char *, _QWORD, uint64_t, int *))(*((_QWORD *)v64 - 1) + 56))(v63, 0, 1, v64);
}

unint64_t sub_10007D5A4()
{
  unint64_t result;

  result = qword_1010F7AD0;
  if (!qword_1010F7AD0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Int32, &type metadata for Int32);
    atomic_store(result, (unint64_t *)&qword_1010F7AD0);
  }
  return result;
}

uint64_t sub_10007D5E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for StableIdentifier(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

_QWORD *sub_10007D62C(_QWORD *a1)
{
  sub_10005CB9C(*a1, a1[1]);
  return a1;
}

uint64_t sub_10007D658(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for StableIdentifier(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10007D69C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_1000234D8(v0, qword_1011B66B0);
  v1 = sub_10001A9E8(v0, (uint64_t)qword_1011B66B0);
  if (qword_1010E9908 != -1)
    swift_once(&qword_1010E9908, sub_100081790);
  v2 = sub_10001A9E8(v0, (uint64_t)qword_1011B66C8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_10007D72C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v1[17] = v0;
  v2 = type metadata accessor for StableIdentifier(0);
  v1[18] = v2;
  v1[19] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for OwnedBeaconRecord(0);
  v1[20] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v1[21] = v4;
  v5 = (*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[22] = swift_task_alloc(v5);
  v1[23] = swift_task_alloc(v5);
  return swift_task_switch(sub_10007D7C0, v0, 0);
}

uint64_t sub_10007D7C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  _QWORD *v3;
  uint64_t (__cdecl *v4)();

  v1 = qword_1010EA5B0;
  swift_retain();
  if (v1 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v0 + 96, 0, 0);
  result = sub_10008180C((uint64_t)&xmmword_10111E6C0, v0 + 56);
  if (*(_QWORD *)(v0 + 80))
  {
    sub_10000F9FC((__int128 *)(v0 + 56), v0 + 16);
    swift_release();
    sub_10001AA44((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
    v4 = (uint64_t (__cdecl *)())((char *)&dword_1010EBB40 + dword_1010EBB40);
    v3 = (_QWORD *)swift_task_alloc(unk_1010EBB44);
    *(_QWORD *)(v0 + 192) = v3;
    *v3 = v0;
    v3[1] = sub_10007D8B8;
    return v4();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10007D8B8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 192);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 136);
  *(_QWORD *)(*(_QWORD *)v1 + 200) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10007D918, v3, 0);
}

uint64_t sub_10007D918()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(_QWORD *)(v0 + 200);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
  if (v1)
  {
    v2 = (_QWORD *)swift_task_alloc(dword_1010ECC54);
    *(_QWORD *)(v0 + 208) = v2;
    *v2 = v0;
    v2[1] = sub_10007D9F0;
    return sub_10007DF44();
  }
  else
  {
    v4 = sub_100033220();
    v5 = swift_allocError(&type metadata for DaemonError, v4, 0, 0);
    *v6 = 0xD000000000000010;
    v6[1] = 0x8000000100EC6470;
    swift_willThrow(v5);
    v7 = *(_QWORD *)(v0 + 176);
    v8 = *(_QWORD *)(v0 + 152);
    swift_task_dealloc(*(_QWORD *)(v0 + 184));
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_10007D9F0(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 208);
  *(_QWORD *)(*v2 + 216) = v1;
  swift_task_dealloc(v5);
  v6 = *(_QWORD *)(v4 + 136);
  if (v1)
  {
    v7 = sub_10007DEEC;
  }
  else
  {
    *(_QWORD *)(v4 + 224) = a1;
    v7 = sub_10007DA64;
  }
  return swift_task_switch(v7, v6, 0);
}

uint64_t sub_10007DA64()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;

  v1 = sub_10001B664(v0[28]);
  v0[29] = v1;
  swift_bridgeObjectRelease();
  if (qword_1010E9900 != -1)
    swift_once(&qword_1010E9900, sub_10007D69C);
  v2 = type metadata accessor for Logger(0);
  sub_10001A9E8(v2, (uint64_t)qword_1011B66B0);
  swift_bridgeObjectRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v6 = 134217984;
    v0[16] = *(_QWORD *)(v1 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 17, v6 + 4, v6 + 12);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "FMIP server has %ld self-beaconing devices registered.", v6, 0xCu);
    swift_slowDealloc(v6, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease();
  }

  return swift_task_switch(sub_10007DBB8, v0[25], 0);
}

uint64_t sub_10007DBB8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 200);
  v2 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v3 = (_QWORD *)swift_task_alloc(v2);
  *(_QWORD *)(v0 + 240) = v3;
  v4 = sub_10001A9A8(&qword_1010EE190);
  *v3 = v0;
  v3[1] = sub_10007DC40;
  return unsafeBlocking<A>(_:)(v0 + 120, sub_10001ED38, v1, v4);
}

uint64_t sub_10007DC40()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 240));
  swift_release();
  return swift_task_switch(sub_10007DC9C, *(_QWORD *)(v1 + 200), 0);
}

uint64_t sub_10007DC9C()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[17];
  v0[31] = v0[15];
  return swift_task_switch(sub_10007DCB8, v1, 0);
}

uint64_t sub_10007DCB8()
{
  uint64_t v0;
  uint64_t result;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  result = *(_QWORD *)(v0 + 248);
  v22 = *(_QWORD *)(result + 16);
  if (v22)
  {
    v2 = 0;
    v20 = *(_QWORD *)(v0 + 168);
    v21 = *(_QWORD *)(v0 + 160);
    v19 = _swiftEmptyArrayStorage;
    while (v2 < *(_QWORD *)(result + 16))
    {
      v3 = result;
      v4 = *(_QWORD *)(v0 + 184);
      v6 = *(_QWORD *)(v0 + 144);
      v5 = *(_QWORD *)(v0 + 152);
      v7 = (*(unsigned __int8 *)(v20 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80);
      v8 = *(_QWORD *)(v20 + 72);
      sub_10005972C(*(_QWORD *)(v0 + 248) + v7 + v8 * v2, v4, type metadata accessor for OwnedBeaconRecord);
      sub_10005972C(v4 + *(int *)(v21 + 24), v5, type metadata accessor for StableIdentifier);
      LODWORD(v4) = swift_getEnumCaseMultiPayload(v5, v6);
      sub_1000126B0(v5, type metadata accessor for StableIdentifier);
      v9 = *(_QWORD *)(v0 + 184);
      if ((_DWORD)v4)
      {
        sub_1000126B0(v9, type metadata accessor for OwnedBeaconRecord);
      }
      else
      {
        sub_100082514(v9, *(_QWORD *)(v0 + 176));
        v10 = v19;
        if ((swift_isUniquelyReferenced_nonNull_native(v19) & 1) == 0)
        {
          sub_10009A680(0, v19[2] + 1, 1);
          v10 = _swiftEmptyArrayStorage;
        }
        v12 = v10[2];
        v11 = v10[3];
        if (v12 >= v11 >> 1)
        {
          sub_10009A680(v11 > 1, v12 + 1, 1);
          v10 = _swiftEmptyArrayStorage;
        }
        v13 = *(_QWORD *)(v0 + 176);
        v10[2] = v12 + 1;
        v19 = v10;
        sub_100082514(v13, (uint64_t)v10 + v7 + v12 * v8);
      }
      ++v2;
      result = v3;
      if (v22 == v2)
        goto LABEL_14;
    }
    __break(1u);
  }
  else
  {
    v19 = _swiftEmptyArrayStorage;
LABEL_14:
    v14 = *(_QWORD *)(v0 + 232);
    v16 = *(_QWORD *)(v0 + 176);
    v15 = *(_QWORD *)(v0 + 184);
    v17 = *(_QWORD *)(v0 + 152);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain(v14);
    v18 = sub_100081DC0((uint64_t)v19, v14);
    swift_bridgeObjectRelease_n(v14, 2);
    swift_release();
    swift_release();
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    return (*(uint64_t (**)(_QWORD *))(v0 + 8))(v18);
  }
  return result;
}

uint64_t sub_10007DEEC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_release(*(_QWORD *)(v0 + 200));
  v1 = *(_QWORD *)(v0 + 176);
  v2 = *(_QWORD *)(v0 + 152);
  swift_task_dealloc(*(_QWORD *)(v0 + 184));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10007DF44()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t DevicesEndpoint;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;

  v1[43] = v0;
  v2 = sub_10001A9A8(&qword_1010ED860);
  v1[44] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for UUID(0);
  v1[45] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v1[46] = v4;
  v5 = (*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[47] = swift_task_alloc(v5);
  v1[48] = swift_task_alloc(v5);
  v6 = type metadata accessor for AnyAnalyticsEvent(0);
  v1[49] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v1[50] = v7;
  v1[51] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Duration.UnitsFormatStyle.Unit(0);
  v1[52] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v1[53] = v9;
  v1[54] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Logger(0);
  v1[55] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v1[56] = v11;
  v1[57] = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Response(0);
  v1[58] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v1[59] = v13;
  v1[60] = swift_task_alloc((*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for ContinuousClock.Instant(0);
  v1[61] = v14;
  v15 = *(_QWORD *)(v14 - 8);
  v1[62] = v15;
  v16 = (*(_QWORD *)(v15 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[63] = swift_task_alloc(v16);
  v1[64] = swift_task_alloc(v16);
  v1[65] = swift_task_alloc(v16);
  DevicesEndpoint = type metadata accessor for FetchDevicesEndpoint(0);
  v1[66] = DevicesEndpoint;
  v1[67] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(DevicesEndpoint - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for SearchpartyAccount(0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[68] = swift_task_alloc(v18);
  v1[69] = swift_task_alloc(v18);
  v19 = type metadata accessor for ContinuousClock(0);
  v1[70] = v19;
  v20 = *(_QWORD *)(v19 - 8);
  v1[71] = v20;
  v21 = (*(_QWORD *)(v20 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[72] = swift_task_alloc(v21);
  v1[73] = swift_task_alloc(v21);
  return swift_task_switch(sub_10007E148, v0, 0);
}

uint64_t sub_10007E148()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  _QWORD *v3;
  uint64_t (__cdecl *v4)();

  v1 = qword_1010EA5B0;
  swift_retain();
  if (v1 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v0 + 296, 0, 0);
  result = sub_10008180C((uint64_t)&xmmword_10111E6C0, v0 + 136);
  if (*(_QWORD *)(v0 + 160))
  {
    sub_10000F9FC((__int128 *)(v0 + 136), v0 + 96);
    swift_release();
    sub_10001AA44((_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 120));
    v4 = (uint64_t (__cdecl *)())((char *)&dword_1010EBD40 + dword_1010EBD40);
    v3 = (_QWORD *)swift_task_alloc(unk_1010EBD44);
    *(_QWORD *)(v0 + 592) = v3;
    *v3 = v0;
    v3[1] = sub_10007E240;
    return v4();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10007E240(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 592);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 344);
  *(_QWORD *)(*(_QWORD *)v1 + 600) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10007E2A0, v3, 0);
}

uint64_t sub_10007E2A0()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  unint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v1 = (_QWORD *)(v0 + 96);
  if (*(_QWORD *)(v0 + 600))
  {
    v2 = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    ContinuousClock.init()(v2);
    v3 = (_QWORD *)swift_task_alloc(dword_1010F248C);
    *(_QWORD *)(v0 + 608) = v3;
    *v3 = v0;
    v3[1] = sub_10007E45C;
    return sub_1001D4DD0(v0 + 16);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    v5 = sub_100033220();
    v21 = swift_allocError(&type metadata for DaemonError, v5, 0, 0);
    strcpy(v6, "AccountService");
    v6[15] = -18;
    swift_willThrow(v21);
    v7 = *(_QWORD *)(v0 + 576);
    v8 = *(_QWORD *)(v0 + 552);
    v9 = *(_QWORD *)(v0 + 544);
    v10 = *(_QWORD *)(v0 + 536);
    v11 = *(_QWORD *)(v0 + 520);
    v13 = *(_QWORD *)(v0 + 504);
    v12 = *(_QWORD *)(v0 + 512);
    v14 = *(_QWORD *)(v0 + 480);
    v15 = *(_QWORD *)(v0 + 456);
    v16 = *(_QWORD *)(v0 + 432);
    v17 = *(_QWORD *)(v0 + 408);
    v18 = *(_QWORD *)(v0 + 384);
    v19 = *(_QWORD *)(v0 + 376);
    v20 = *(_QWORD *)(v0 + 352);
    swift_task_dealloc(*(_QWORD *)(v0 + 584));
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_10007E45C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v5;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 608);
  v3 = *(_QWORD **)v1;
  v3[77] = v0;
  swift_task_dealloc(v2);
  if (v0)
    return swift_task_switch(sub_10007F568, v3[43], 0);
  v5 = (_QWORD *)swift_task_alloc(dword_1010F2494);
  v3[78] = v5;
  *v5 = v3;
  v5[1] = sub_10007E4F0;
  return sub_1001D5890(v3[69]);
}

uint64_t sub_10007E4F0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 624);
  *(_QWORD *)(*v1 + 632) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = *(_QWORD *)(v2 + 344);
    sub_100081854((_QWORD *)(v2 + 16));
    v5 = sub_10007F694;
    v6 = v4;
  }
  else
  {
    v6 = *(_QWORD *)(v2 + 344);
    v5 = sub_10007E564;
  }
  return swift_task_switch(v5, v6, 0);
}

uint64_t sub_10007E564(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v2 = *(_QWORD *)(v1 + 632);
  v3 = *(_QWORD *)(v1 + 552);
  v4 = *(_QWORD **)(v1 + 544);
  URLComponents.init()(a1);
  URLComponents.scheme.setter(0x7370747468, 0xE500000000000000);
  swift_bridgeObjectRetain(*(_QWORD *)(v1 + 88));
  URLComponents.host.setter();
  sub_100081854((_QWORD *)(v1 + 16));
  URLComponents.path.setter();
  sub_10005972C(v3, (uint64_t)v4, type metadata accessor for SearchpartyAccount);
  *(_QWORD *)(v1 + 640) = v4[2];
  v5 = v4[3];
  *(_QWORD *)(v1 + 648) = v5;
  *(_QWORD *)(v1 + 656) = v4[4];
  v6 = v4[5];
  *(_QWORD *)(v1 + 664) = v6;
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  sub_1000126B0((uint64_t)v4, type metadata accessor for SearchpartyAccount);
  *(_QWORD *)(v1 + 672) = sub_100B5E650();
  *(_QWORD *)(v1 + 680) = v7;
  if (v2)
  {
    v8 = *(_QWORD *)(v1 + 584);
    v9 = *(_QWORD *)(v1 + 568);
    v10 = *(_QWORD *)(v1 + 560);
    v11 = *(_QWORD *)(v1 + 552);
    v12 = *(_QWORD *)(v1 + 536);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    sub_1000126B0(v12, type metadata accessor for FetchDevicesEndpoint);
    sub_1000126B0(v11, type metadata accessor for SearchpartyAccount);
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
    v13 = *(_QWORD *)(v1 + 576);
    v14 = *(_QWORD *)(v1 + 552);
    v15 = *(_QWORD *)(v1 + 544);
    v16 = *(_QWORD *)(v1 + 536);
    v17 = *(_QWORD *)(v1 + 520);
    v19 = *(_QWORD *)(v1 + 504);
    v18 = *(_QWORD *)(v1 + 512);
    v20 = *(_QWORD *)(v1 + 480);
    v21 = *(_QWORD *)(v1 + 456);
    v28 = *(_QWORD *)(v1 + 432);
    v29 = *(_QWORD *)(v1 + 408);
    v30 = *(_QWORD *)(v1 + 384);
    v31 = *(_QWORD *)(v1 + 376);
    v32 = *(_QWORD *)(v1 + 352);
    swift_task_dealloc(*(_QWORD *)(v1 + 584));
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
  else
  {
    type metadata accessor for ServerInteractionController(0);
    *(_QWORD *)(v1 + 688) = ServerInteractionController.__allocating_init(bundleIdentifier:)(0xD00000000000001DLL, 0x8000000100EC5D30);
    v23 = sub_10001A9A8(&qword_1010ECC58);
    v24 = AnalyticsEvent.__allocating_init(name:)();
    *(_QWORD *)(v1 + 696) = v24;
    ContinuousClock.now.getter(v24);
    v25 = sub_100082558();
    v26 = dispatch thunk of Actor.unownedExecutor.getter(v23, v25);
    *(_QWORD *)(v1 + 704) = v26;
    *(_QWORD *)(v1 + 712) = v27;
    return swift_task_switch(sub_10007E850, v26, v27);
  }
}

uint64_t sub_10007E850()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 344);
  dispatch thunk of AnalyticsEvent.startTiming()();
  return swift_task_switch(sub_10007E890, v1, 0);
}

uint64_t sub_10007E890()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  __int128 v10;

  v1 = *(_QWORD *)(v0 + 680);
  v2 = *(_QWORD *)(v0 + 672);
  v3 = *(_QWORD *)(v0 + 664);
  v4 = *(_QWORD *)(v0 + 656);
  v10 = *(_OWORD *)(v0 + 640);
  v5 = *(_QWORD *)(v0 + 536);
  *(_QWORD *)(v0 + 200) = *(_QWORD *)(v0 + 528);
  *(_QWORD *)(v0 + 208) = sub_100006C64(&qword_1010ECC68, 255, type metadata accessor for FetchDevicesEndpoint, (uint64_t)"if#");
  v6 = sub_100018F08((_QWORD *)(v0 + 176));
  sub_10005972C(v5, (uint64_t)v6, type metadata accessor for FetchDevicesEndpoint);
  *(_QWORD *)(v0 + 240) = &type metadata for FetchDevicesRequest;
  *(_QWORD *)(v0 + 248) = sub_1000825A4();
  *(_QWORD *)(v0 + 216) = v2;
  *(_QWORD *)(v0 + 224) = v1;
  *(_QWORD *)(v0 + 280) = &type metadata for SearchpartyCredential;
  *(_QWORD *)(v0 + 288) = sub_100082460();
  v7 = swift_allocObject(&unk_101053200, 48, 7);
  *(_QWORD *)(v0 + 256) = v7;
  *(_OWORD *)(v7 + 16) = v10;
  *(_QWORD *)(v7 + 32) = v4;
  *(_QWORD *)(v7 + 40) = v3;
  sub_10001BD08(v2, v1);
  *(_QWORD *)&v10 = (char *)&async function pointer to dispatch thunk of ServerInteractionController.send(endpoint:content:credential:)
                  + async function pointer to dispatch thunk of ServerInteractionController.send(endpoint:content:credential:);
  v8 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of ServerInteractionController.send(endpoint:content:credential:)
                                  + 1));
  *(_QWORD *)(v0 + 720) = v8;
  *v8 = v0;
  v8[1] = sub_10007E9F0;
  return ((uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))v10)(*(_QWORD *)(v0 + 480), v0 + 176, v0 + 216, v0 + 256);
}

uint64_t sub_10007E9F0()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 720);
  *(_QWORD *)(*(_QWORD *)v1 + 728) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = v2[43];
    v5 = sub_10007F7C0;
  }
  else
  {
    v6 = (uint64_t)(v2 + 32);
    v7 = v2 + 27;
    v8 = v2 + 22;
    v9 = v2[43];
    sub_100004048(v6, &qword_1010ECC38);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v7);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v8);
    v5 = sub_10007EA8C;
    v4 = v9;
  }
  return swift_task_switch(v5, v4, 0);
}

uint64_t sub_10007EA8C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  _BOOL4 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  void (*v28)(uint64_t, uint64_t);
  void (*v29)(uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  id v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  uint64_t v53;
  void *v54;
  id v55;
  Swift::String v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  void (*v82)(char *, char *, uint64_t);
  unint64_t v83;
  unint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  os_log_type_t type;
  os_log_type_t typeb[8];
  os_log_type_t typea[8];
  os_log_type_t typec[8];
  uint64_t v114;
  void (*v115)(uint64_t, uint64_t);
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  void (*v120)(uint64_t, uint64_t);
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;

  if (qword_1010E9900 != -1)
    swift_once(&qword_1010E9900, sub_10007D69C);
  v118 = *(_QWORD *)(v0 + 576);
  v122 = *(_QWORD *)(v0 + 584);
  v1 = *(_QWORD *)(v0 + 568);
  v2 = *(_QWORD *)(v0 + 560);
  v3 = *(_QWORD *)(v0 + 520);
  v4 = *(_QWORD *)(v0 + 512);
  v6 = *(_QWORD *)(v0 + 488);
  v5 = *(_QWORD *)(v0 + 496);
  v7 = *(_QWORD *)(v0 + 448);
  v8 = *(_QWORD *)(v0 + 456);
  v9 = *(_QWORD *)(v0 + 440);
  v10 = sub_10001A9E8(v9, (uint64_t)qword_1011B66B0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v8, v10, v9);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v4, v3, v6);
  v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 16))(v118, v122, v2);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.default.getter(v12);
  v14 = os_log_type_enabled(v12, v13);
  v15 = *(_QWORD *)(v0 + 576);
  v16 = *(_QWORD *)(v0 + 568);
  v17 = *(_QWORD *)(v0 + 560);
  v18 = *(_QWORD *)(v0 + 512);
  if (v14)
  {
    v19 = *(_QWORD *)(v0 + 504);
    v20 = *(_QWORD *)(v0 + 488);
    v114 = *(_QWORD *)(v0 + 448);
    v21 = *(_QWORD *)(v0 + 432);
    v119 = *(_QWORD *)(v0 + 440);
    v123 = *(_QWORD *)(v0 + 456);
    v89 = *(_QWORD *)(v0 + 424);
    v92 = *(_QWORD *)(v0 + 416);
    v95 = *(_QWORD *)(v0 + 496);
    type = v13;
    v98 = *(_QWORD *)(v0 + 576);
    v22 = (uint8_t *)swift_slowAlloc(12, -1);
    v106 = swift_slowAlloc(32, -1);
    v124 = v106;
    *(_DWORD *)v22 = 136315138;
    v23 = ContinuousClock.now.getter(v106);
    static Duration.UnitsFormatStyle.Unit.milliseconds.getter(v23);
    v24 = sub_100006C64(&qword_101116030, 255, (uint64_t (*)(uint64_t))&type metadata accessor for ContinuousClock.Instant, (uint64_t)&protocol conformance descriptor for ContinuousClock.Instant);
    v25 = static Duration.description<A>(_:_:units:)(v18, v19, v21, v20, v24);
    v87 = v16;
    v27 = v26;
    (*(void (**)(uint64_t, uint64_t))(v89 + 8))(v21, v92);
    v28 = *(void (**)(uint64_t, uint64_t))(v95 + 8);
    v28(v19, v20);
    *(_QWORD *)(v0 + 336) = sub_100016940(v25, v27, &v124);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 336, v0 + 344, v22 + 4, v22 + 12);
    swift_bridgeObjectRelease();
    v28(v18, v20);
    v29 = *(void (**)(uint64_t, uint64_t))(v87 + 8);
    v29(v98, v17);
    _os_log_impl((void *)&_mh_execute_header, v12, type, "fetchDevices duration: %s", v22, 0xCu);
    swift_arrayDestroy(v106, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v106, -1, -1);
    swift_slowDealloc(v22, -1, -1);

    v30 = (*(uint64_t (**)(uint64_t, uint64_t))(v114 + 8))(v123, v119);
  }
  else
  {
    v32 = *(_QWORD *)(v0 + 448);
    v31 = *(_QWORD *)(v0 + 456);
    v33 = *(_QWORD *)(v0 + 440);
    v28 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 496) + 8);
    v28(*(_QWORD *)(v0 + 512), *(_QWORD *)(v0 + 488));
    v29 = *(void (**)(uint64_t, uint64_t))(v16 + 8);
    v29(v15, v17);

    v30 = (*(uint64_t (**)(uint64_t, uint64_t))(v32 + 8))(v31, v33);
  }
  *(_QWORD *)(v0 + 744) = v28;
  *(_QWORD *)(v0 + 736) = v29;
  v34 = (void *)Response.response.getter(v30);
  v35 = objc_msgSend(v34, "statusCode");

  if (v35 != (id)200)
  {
    v94 = *(_QWORD *)(v0 + 672);
    v97 = *(_QWORD *)(v0 + 680);
    v116 = *(_QWORD *)(v0 + 584);
    v108 = *(_QWORD *)(v0 + 552);
    *(_QWORD *)typea = *(_QWORD *)(v0 + 560);
    v102 = *(_QWORD *)(v0 + 520);
    v104 = *(_QWORD *)(v0 + 536);
    v48 = *(_QWORD *)(v0 + 480);
    v100 = *(_QWORD *)(v0 + 488);
    v88 = *(_QWORD *)(v0 + 472);
    v91 = *(_QWORD *)(v0 + 464);
    v49 = type metadata accessor for GenericError(0);
    v50 = sub_100006C64((unint64_t *)&qword_1010ECC40, 255, (uint64_t (*)(uint64_t))&type metadata accessor for GenericError, (uint64_t)&protocol conformance descriptor for GenericError);
    swift_allocError(v49, v50, 0, 0);
    v52 = v51;
    v124 = 0;
    v125 = 0xE000000000000000;
    _StringGuts.grow(_:)(21);
    v53 = swift_bridgeObjectRelease();
    v124 = 0xD000000000000013;
    v125 = 0x8000000100EC6CD0;
    v54 = (void *)Response.response.getter(v53);
    v55 = objc_msgSend(v54, "statusCode");

    *(_QWORD *)(v0 + 320) = v55;
    v56._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    String.append(_:)(v56);
    swift_bridgeObjectRelease();
    v57 = v125;
    *v52 = v124;
    v52[1] = v57;
    v58 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v49 - 8) + 104))(v52, enum case for GenericError.error(_:), v49);
    swift_willThrow(v58);
    swift_release();
    swift_release();
    swift_release();
    sub_10001EF3C(v94, v97);
    (*(void (**)(uint64_t, uint64_t))(v88 + 8))(v48, v91);
    v28(v102, v100);
    sub_1000126B0(v104, type metadata accessor for FetchDevicesEndpoint);
    sub_1000126B0(v108, type metadata accessor for SearchpartyAccount);
    v29(v116, *(_QWORD *)typea);
LABEL_10:
    v59 = *(_QWORD *)(v0 + 576);
    v60 = *(_QWORD *)(v0 + 552);
    v61 = *(_QWORD *)(v0 + 544);
    v62 = *(_QWORD *)(v0 + 536);
    v63 = *(_QWORD *)(v0 + 520);
    v65 = *(_QWORD *)(v0 + 504);
    v64 = *(_QWORD *)(v0 + 512);
    v66 = *(_QWORD *)(v0 + 480);
    v67 = *(_QWORD *)(v0 + 456);
    v105 = *(_QWORD *)(v0 + 432);
    v109 = *(_QWORD *)(v0 + 408);
    *(_QWORD *)typec = *(_QWORD *)(v0 + 384);
    v117 = *(_QWORD *)(v0 + 376);
    v121 = *(_QWORD *)(v0 + 352);
    swift_task_dealloc(*(_QWORD *)(v0 + 584));
    swift_task_dealloc(v59);
    swift_task_dealloc(v60);
    swift_task_dealloc(v61);
    swift_task_dealloc(v62);
    swift_task_dealloc(v63);
    swift_task_dealloc(v64);
    swift_task_dealloc(v65);
    swift_task_dealloc(v66);
    swift_task_dealloc(v67);
    swift_task_dealloc(v105);
    swift_task_dealloc(v109);
    swift_task_dealloc(*(_QWORD *)typec);
    swift_task_dealloc(v117);
    swift_task_dealloc(v121);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v115 = v29;
  v36 = (_QWORD *)(v0 + 328);
  v37 = *(_QWORD *)(v0 + 728);
  v38 = type metadata accessor for JSONDecoder(0);
  v39 = swift_allocObject(v38, *(unsigned int *)(v38 + 48), *(unsigned __int16 *)(v38 + 52));
  v40 = JSONDecoder.init()(v39);
  v41 = Response.body.getter(v40);
  v43 = v42;
  v44 = sub_1000825E8();
  dispatch thunk of JSONDecoder.decode<A>(_:from:)(&type metadata for FetchDevicesResponse, v41, v43, &type metadata for FetchDevicesResponse, v44);
  if (v37)
  {
    v90 = *(_QWORD *)(v0 + 672);
    v93 = *(_QWORD *)(v0 + 680);
    v120 = v28;
    v107 = *(_QWORD *)(v0 + 560);
    *(_QWORD *)typeb = *(_QWORD *)(v0 + 584);
    v101 = *(_QWORD *)(v0 + 536);
    v103 = *(_QWORD *)(v0 + 552);
    v45 = *(_QWORD *)(v0 + 480);
    v96 = *(_QWORD *)(v0 + 488);
    v99 = *(_QWORD *)(v0 + 520);
    v47 = *(_QWORD *)(v0 + 464);
    v46 = *(_QWORD *)(v0 + 472);
    sub_10001BC14(v41, v43);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    sub_10001EF3C(v90, v93);
    (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v45, v47);
    v120(v99, v96);
    sub_1000126B0(v101, type metadata accessor for FetchDevicesEndpoint);
    sub_1000126B0(v103, type metadata accessor for SearchpartyAccount);
    v115(*(_QWORD *)typeb, v107);
    goto LABEL_10;
  }
  sub_10001BC14(v41, v43);
  swift_release();
  v69 = *v36;
  v70 = *(_QWORD *)(*v36 + 16);
  if (v70)
  {
    v71 = *(_QWORD *)(v0 + 368);
    swift_bridgeObjectRetain(*v36);
    v72 = (uint64_t *)(v69 + 56);
    v73 = (char *)_swiftEmptyArrayStorage;
    do
    {
      v75 = *(_QWORD *)(v0 + 352);
      v74 = *(_QWORD *)(v0 + 360);
      v76 = *(v72 - 3);
      v77 = *(v72 - 2);
      v78 = *v72;
      swift_bridgeObjectRetain(v77);
      swift_bridgeObjectRetain(v78);
      UUID.init(uuidString:)(v76, v77);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v71 + 48))(v75, 1, v74) == 1)
      {
        sub_100004048(*(_QWORD *)(v0 + 352), &qword_1010ED860);
      }
      else
      {
        v80 = *(char **)(v0 + 376);
        v79 = *(char **)(v0 + 384);
        v81 = *(_QWORD *)(v0 + 360);
        v82 = *(void (**)(char *, char *, uint64_t))(v71 + 32);
        v82(v79, *(char **)(v0 + 352), v81);
        v82(v80, v79, v81);
        if ((swift_isUniquelyReferenced_nonNull_native(v73) & 1) == 0)
          v73 = (char *)sub_1007C84F8(0, *((_QWORD *)v73 + 2) + 1, 1, (unint64_t)v73);
        v84 = *((_QWORD *)v73 + 2);
        v83 = *((_QWORD *)v73 + 3);
        if (v84 >= v83 >> 1)
          v73 = (char *)sub_1007C84F8(v83 > 1, v84 + 1, 1, (unint64_t)v73);
        v85 = *(char **)(v0 + 376);
        v86 = *(_QWORD *)(v0 + 360);
        *((_QWORD *)v73 + 2) = v84 + 1;
        v82(&v73[((*(unsigned __int8 *)(v71 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v71 + 80))+ *(_QWORD *)(v71 + 72) * v84], v85, v86);
      }
      v72 += 4;
      --v70;
    }
    while (v70);
    swift_bridgeObjectRelease();
  }
  else
  {
    v73 = (char *)_swiftEmptyArrayStorage;
  }
  *(_QWORD *)(v0 + 752) = v73;
  swift_bridgeObjectRelease();
  return swift_task_switch(sub_10007F334, *(_QWORD *)(v0 + 704), *(_QWORD *)(v0 + 712));
}

uint64_t sub_10007F334()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 344);
  v2 = dispatch thunk of AnalyticsEvent.stopTiming()();
  dispatch thunk of AnalyticsEvent.anyAnalyticsEvent.getter(v2);
  return swift_task_switch(sub_10007F388, v1, 0);
}

uint64_t sub_10007F388()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v8 = *(_QWORD *)(v0 + 672);
  v9 = *(_QWORD *)(v0 + 680);
  v16 = *(_QWORD *)(v0 + 584);
  v17 = *(_QWORD *)(v0 + 576);
  v18 = *(void (**)(uint64_t, uint64_t))(v0 + 736);
  v14 = *(void (**)(uint64_t, uint64_t))(v0 + 744);
  v15 = *(_QWORD *)(v0 + 560);
  v12 = *(_QWORD *)(v0 + 536);
  v13 = *(_QWORD *)(v0 + 552);
  v19 = *(_QWORD *)(v0 + 544);
  v20 = *(_QWORD *)(v0 + 512);
  v1 = *(_QWORD *)(v0 + 480);
  v10 = *(_QWORD *)(v0 + 488);
  v11 = *(_QWORD *)(v0 + 520);
  v2 = *(_QWORD *)(v0 + 464);
  v3 = *(_QWORD *)(v0 + 472);
  v21 = *(_QWORD *)(v0 + 504);
  v22 = *(_QWORD *)(v0 + 456);
  v5 = *(_QWORD *)(v0 + 400);
  v4 = *(_QWORD *)(v0 + 408);
  v6 = *(_QWORD *)(v0 + 392);
  v23 = *(_QWORD *)(v0 + 432);
  v24 = *(_QWORD *)(v0 + 384);
  v25 = *(_QWORD *)(v0 + 376);
  v26 = *(_QWORD *)(v0 + 352);
  static AnalyticsPublisher.publish(event:)(v4);
  swift_release();
  swift_release();
  swift_release();
  sub_10001EF3C(v8, v9);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  v14(v11, v10);
  sub_1000126B0(v12, type metadata accessor for FetchDevicesEndpoint);
  sub_1000126B0(v13, type metadata accessor for SearchpartyAccount);
  v18(v16, v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v13);
  swift_task_dealloc(v19);
  swift_task_dealloc(v12);
  swift_task_dealloc(v11);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v1);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v4);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 752));
}

uint64_t sub_10007F568()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v1 = *(_QWORD *)(v0 + 584);
  v2 = *(_QWORD *)(v0 + 568);
  v3 = *(_QWORD *)(v0 + 560);
  swift_release(*(_QWORD *)(v0 + 600));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v4 = *(_QWORD *)(v0 + 576);
  v5 = *(_QWORD *)(v0 + 552);
  v6 = *(_QWORD *)(v0 + 544);
  v7 = *(_QWORD *)(v0 + 536);
  v8 = *(_QWORD *)(v0 + 520);
  v10 = *(_QWORD *)(v0 + 504);
  v9 = *(_QWORD *)(v0 + 512);
  v11 = *(_QWORD *)(v0 + 480);
  v12 = *(_QWORD *)(v0 + 456);
  v14 = *(_QWORD *)(v0 + 432);
  v15 = *(_QWORD *)(v0 + 408);
  v16 = *(_QWORD *)(v0 + 384);
  v17 = *(_QWORD *)(v0 + 376);
  v18 = *(_QWORD *)(v0 + 352);
  swift_task_dealloc(*(_QWORD *)(v0 + 584));
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10007F694()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v1 = *(_QWORD *)(v0 + 584);
  v2 = *(_QWORD *)(v0 + 568);
  v3 = *(_QWORD *)(v0 + 560);
  swift_release(*(_QWORD *)(v0 + 600));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v4 = *(_QWORD *)(v0 + 576);
  v5 = *(_QWORD *)(v0 + 552);
  v6 = *(_QWORD *)(v0 + 544);
  v7 = *(_QWORD *)(v0 + 536);
  v8 = *(_QWORD *)(v0 + 520);
  v10 = *(_QWORD *)(v0 + 504);
  v9 = *(_QWORD *)(v0 + 512);
  v11 = *(_QWORD *)(v0 + 480);
  v12 = *(_QWORD *)(v0 + 456);
  v14 = *(_QWORD *)(v0 + 432);
  v15 = *(_QWORD *)(v0 + 408);
  v16 = *(_QWORD *)(v0 + 384);
  v17 = *(_QWORD *)(v0 + 376);
  v18 = *(_QWORD *)(v0 + 352);
  swift_task_dealloc(*(_QWORD *)(v0 + 584));
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10007F7C0()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v1 = *(_QWORD *)(v0 + 680);
  v2 = *(_QWORD *)(v0 + 672);
  v22 = *(_QWORD *)(v0 + 584);
  v18 = *(_QWORD *)(v0 + 568);
  v20 = *(_QWORD *)(v0 + 560);
  v3 = *(_QWORD *)(v0 + 552);
  v4 = *(_QWORD *)(v0 + 536);
  v5 = *(_QWORD *)(v0 + 520);
  v6 = *(_QWORD *)(v0 + 488);
  v7 = *(_QWORD *)(v0 + 496);
  swift_release();
  swift_release();
  swift_release();
  sub_10001EF3C(v2, v1);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  sub_1000126B0(v4, type metadata accessor for FetchDevicesEndpoint);
  sub_1000126B0(v3, type metadata accessor for SearchpartyAccount);
  (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v22, v20);
  sub_100004048(v0 + 256, &qword_1010ECC38);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 216));
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 176));
  v8 = *(_QWORD *)(v0 + 576);
  v9 = *(_QWORD *)(v0 + 552);
  v10 = *(_QWORD *)(v0 + 544);
  v11 = *(_QWORD *)(v0 + 536);
  v12 = *(_QWORD *)(v0 + 520);
  v14 = *(_QWORD *)(v0 + 504);
  v13 = *(_QWORD *)(v0 + 512);
  v15 = *(_QWORD *)(v0 + 480);
  v16 = *(_QWORD *)(v0 + 456);
  v19 = *(_QWORD *)(v0 + 432);
  v21 = *(_QWORD *)(v0 + 408);
  v23 = *(_QWORD *)(v0 + 384);
  v24 = *(_QWORD *)(v0 + 376);
  v25 = *(_QWORD *)(v0 + 352);
  swift_task_dealloc(*(_QWORD *)(v0 + 584));
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v19);
  swift_task_dealloc(v21);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10007F990(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v2[3] = a1;
  v2[4] = v1;
  v3 = type metadata accessor for UUID(0);
  v2[5] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[6] = v4;
  v5 = (*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[7] = swift_task_alloc(v5);
  v2[8] = swift_task_alloc(v5);
  v6 = type metadata accessor for StableIdentifier(0);
  v2[9] = v6;
  v2[10] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for OwnedBeaconRecord(0);
  v2[11] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v2[12] = v8;
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[13] = swift_task_alloc(v9);
  v2[14] = swift_task_alloc(v9);
  v2[15] = swift_task_alloc(v9);
  return swift_task_switch(sub_10007FA68, v1, 0);
}

uint64_t sub_10007FA68()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  int64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;

  v1 = v0[3];
  v2 = _swiftEmptyArrayStorage;
  v3 = *(_QWORD *)(v1 + 16);
  swift_bridgeObjectRetain(v1);
  v41 = v3;
  if (v3)
  {
    v5 = v0[12];
    v44 = v0[11];
    v6 = *(_QWORD *)(v5 + 72);
    v42 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
    v7 = v4 + v42;
    do
    {
      v8 = v0[15];
      v10 = v0[9];
      v9 = v0[10];
      sub_10005972C(v7, v8, type metadata accessor for OwnedBeaconRecord);
      sub_10005972C(v8 + *(int *)(v44 + 24), v9, type metadata accessor for StableIdentifier);
      LODWORD(v8) = swift_getEnumCaseMultiPayload(v9, v10);
      sub_1000126B0(v9, type metadata accessor for StableIdentifier);
      v11 = v0[15];
      if ((_DWORD)v8)
      {
        sub_100082514(v11, v0[14]);
        if ((swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage) & 1) == 0)
          sub_10009A680(0, _swiftEmptyArrayStorage[2] + 1, 1);
        v13 = _swiftEmptyArrayStorage[2];
        v12 = _swiftEmptyArrayStorage[3];
        if (v13 >= v12 >> 1)
          sub_10009A680(v12 > 1, v13 + 1, 1);
        v14 = v0[14];
        _swiftEmptyArrayStorage[2] = v13 + 1;
        sub_100082514(v14, (uint64_t)_swiftEmptyArrayStorage + v42 + v13 * v6);
      }
      else
      {
        sub_1000126B0(v11, type metadata accessor for OwnedBeaconRecord);
      }
      v7 += v6;
      --v3;
    }
    while (v3);
    v3 = v41;
    v2 = _swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRelease();
  v15 = _swiftEmptyArrayStorage[2];
  if (v15)
  {
    v16 = v0[12];
    v45 = v0[11];
    v47 = _swiftEmptyArrayStorage;
    v17 = v0[6];
    sub_10009A578(0, v15, 0);
    v18 = (char *)_swiftEmptyArrayStorage
        + ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80));
    v43 = *(_QWORD *)(v16 + 72);
    v2 = _swiftEmptyArrayStorage;
    do
    {
      v19 = v0[13];
      v20 = v0[8];
      v21 = v0[5];
      sub_10005972C((uint64_t)v18, v19, type metadata accessor for OwnedBeaconRecord);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16))(v20, v19 + *(int *)(v45 + 20), v21);
      sub_1000126B0(v19, type metadata accessor for OwnedBeaconRecord);
      if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
      {
        sub_10009A578(0, v2[2] + 1, 1);
        v2 = v47;
      }
      v23 = v2[2];
      v22 = v2[3];
      if (v23 >= v22 >> 1)
      {
        sub_10009A578(v22 > 1, v23 + 1, 1);
        v2 = v47;
      }
      v24 = v0[8];
      v25 = v0[5];
      v2[2] = v23 + 1;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v17 + 32))((unint64_t)v2+ ((*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80))+ *(_QWORD *)(v17 + 72) * v23, v24, v25);
      v47 = v2;
      v18 += v43;
      --v15;
    }
    while (v15);
    swift_release();
    v3 = v41;
  }
  else
  {
    swift_release();
  }
  v0[16] = v2;
  v26 = _swiftEmptyArrayStorage;
  if (v3)
  {
    v27 = v0[12];
    v46 = v0[11];
    v48 = _swiftEmptyArrayStorage;
    v28 = v0[6];
    v29 = v0[3];
    sub_10009A578(0, v3, 0);
    v30 = v29 + ((*(unsigned __int8 *)(v27 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80));
    v31 = *(_QWORD *)(v27 + 72);
    v26 = _swiftEmptyArrayStorage;
    do
    {
      v32 = v0[13];
      v33 = v0[7];
      v34 = v0[5];
      sub_10005972C(v30, v32, type metadata accessor for OwnedBeaconRecord);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v28 + 16))(v33, v32 + *(int *)(v46 + 20), v34);
      sub_1000126B0(v32, type metadata accessor for OwnedBeaconRecord);
      if ((swift_isUniquelyReferenced_nonNull_native(v26) & 1) == 0)
      {
        sub_10009A578(0, v26[2] + 1, 1);
        v26 = v48;
      }
      v36 = v26[2];
      v35 = v26[3];
      if (v36 >= v35 >> 1)
      {
        sub_10009A578(v35 > 1, v36 + 1, 1);
        v26 = v48;
      }
      v37 = v0[7];
      v38 = v0[5];
      v26[2] = v36 + 1;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v28 + 32))((unint64_t)v26+ ((*(unsigned __int8 *)(v28 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v28 + 80))+ *(_QWORD *)(v28 + 72) * v36, v37, v38);
      v48 = v26;
      v30 += v31;
      --v3;
    }
    while (v3);
  }
  v0[17] = sub_10001B664((uint64_t)v26);
  swift_bridgeObjectRelease();
  v39 = (_QWORD *)swift_task_alloc(dword_1010ECC54);
  v0[18] = v39;
  *v39 = v0;
  v39[1] = sub_10007FEBC;
  return sub_10007DF44();
}

uint64_t sub_10007FEBC(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();
  uint64_t v8;

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 144);
  *(_QWORD *)(*v2 + 152) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = *(_QWORD *)(v4 + 32);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v7 = sub_10008003C;
    v8 = v6;
  }
  else
  {
    v8 = *(_QWORD *)(v4 + 32);
    *(_QWORD *)(v4 + 160) = a1;
    v7 = sub_10007FF48;
  }
  return swift_task_switch(v7, v8, 0);
}

uint64_t sub_10007FF48()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v11;
  uint64_t v12;

  v1 = *(_QWORD *)(v0 + 128);
  v3 = *(_QWORD *)(v0 + 112);
  v2 = *(_QWORD *)(v0 + 120);
  v4 = *(_QWORD *)(v0 + 104);
  v5 = *(_QWORD *)(v0 + 80);
  v11 = *(_QWORD *)(v0 + 64);
  v12 = *(_QWORD *)(v0 + 56);
  v6 = *(_QWORD *)(v0 + 24);
  v7 = sub_1000818BC(*(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 136));
  swift_bridgeObjectRelease();
  *(_QWORD *)(v0 + 16) = v7;
  sub_100BD1FDC(v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain(v6);
  v9 = sub_1000820D0(v8, (uint64_t *)(v0 + 16));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  return (*(uint64_t (**)(_QWORD *))(v0 + 8))(v9);
}

uint64_t sub_10008003C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 112);
  v2 = *(_QWORD *)(v0 + 104);
  v3 = *(_QWORD *)(v0 + 80);
  v5 = *(_QWORD *)(v0 + 56);
  v4 = *(_QWORD *)(v0 + 64);
  swift_task_dealloc(*(_QWORD *)(v0 + 120));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000800B4(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;

  v2[42] = a1;
  v2[43] = v1;
  v3 = type metadata accessor for Duration.UnitsFormatStyle.Unit(0);
  v2[44] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[45] = v4;
  v2[46] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Logger(0);
  v2[47] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v2[48] = v6;
  v2[49] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Response(0);
  v2[50] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v2[51] = v8;
  v2[52] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for ContinuousClock.Instant(0);
  v2[53] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v2[54] = v10;
  v11 = (*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[55] = swift_task_alloc(v11);
  v2[56] = swift_task_alloc(v11);
  v2[57] = swift_task_alloc(v11);
  v12 = type metadata accessor for MetricsEndpoint(0);
  v2[58] = v12;
  v2[59] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v12 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for SearchpartyAccount(0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[60] = swift_task_alloc(v13);
  v2[61] = swift_task_alloc(v13);
  v14 = type metadata accessor for ContinuousClock(0);
  v2[62] = v14;
  v15 = *(_QWORD *)(v14 - 8);
  v2[63] = v15;
  v16 = (*(_QWORD *)(v15 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[64] = swift_task_alloc(v16);
  v2[65] = swift_task_alloc(v16);
  return swift_task_switch(sub_100080234, v1, 0);
}

uint64_t sub_100080234()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  _QWORD *v3;
  uint64_t (__cdecl *v4)();

  v1 = qword_1010EA5B0;
  swift_retain();
  if (v1 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v0 + 296, 0, 0);
  result = sub_10008180C((uint64_t)&xmmword_10111E6C0, v0 + 136);
  if (*(_QWORD *)(v0 + 160))
  {
    sub_10000F9FC((__int128 *)(v0 + 136), v0 + 96);
    swift_release();
    sub_10001AA44((_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 120));
    v4 = (uint64_t (__cdecl *)())((char *)&dword_1010EBD40 + dword_1010EBD40);
    v3 = (_QWORD *)swift_task_alloc(unk_1010EBD44);
    *(_QWORD *)(v0 + 528) = v3;
    *v3 = v0;
    v3[1] = sub_10008032C;
    return v4();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10008032C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 528);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 344);
  *(_QWORD *)(*(_QWORD *)v1 + 536) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10008038C, v3, 0);
}

uint64_t sub_10008038C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  unint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v1 = (_QWORD *)(v0 + 96);
  if (*(_QWORD *)(v0 + 536))
  {
    v2 = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    ContinuousClock.init()(v2);
    v3 = (_QWORD *)swift_task_alloc(dword_1010F248C);
    *(_QWORD *)(v0 + 544) = v3;
    *v3 = v0;
    v3[1] = sub_100080508;
    return sub_1001D4DD0(v0 + 16);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    v5 = sub_100033220();
    v6 = swift_allocError(&type metadata for DaemonError, v5, 0, 0);
    strcpy(v7, "AccountService");
    v7[15] = -18;
    swift_willThrow(v6);
    v8 = *(_QWORD *)(v0 + 512);
    v10 = *(_QWORD *)(v0 + 480);
    v9 = *(_QWORD *)(v0 + 488);
    v11 = *(_QWORD *)(v0 + 472);
    v13 = *(_QWORD *)(v0 + 448);
    v12 = *(_QWORD *)(v0 + 456);
    v14 = *(_QWORD *)(v0 + 440);
    v15 = *(_QWORD *)(v0 + 416);
    v16 = *(_QWORD *)(v0 + 392);
    v17 = *(_QWORD *)(v0 + 368);
    swift_task_dealloc(*(_QWORD *)(v0 + 520));
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100080508()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v5;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 544);
  v3 = *(_QWORD **)v1;
  v3[69] = v0;
  swift_task_dealloc(v2);
  if (v0)
    return swift_task_switch(sub_1000811C8, v3[43], 0);
  v5 = (_QWORD *)swift_task_alloc(dword_1010F2494);
  v3[70] = v5;
  *v5 = v3;
  v5[1] = sub_10008059C;
  return sub_1001D5890(v3[61]);
}

uint64_t sub_10008059C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 560);
  *(_QWORD *)(*v1 + 568) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = *(_QWORD *)(v2 + 344);
    sub_100081854((_QWORD *)(v2 + 16));
    v5 = sub_1000812B4;
    v6 = v4;
  }
  else
  {
    v6 = *(_QWORD *)(v2 + 344);
    v5 = sub_100080610;
  }
  return swift_task_switch(v5, v6, 0);
}

uint64_t sub_100080610(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  __int128 *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v2 = *(_QWORD *)(v1 + 568);
  v4 = *(_QWORD **)(v1 + 480);
  v3 = *(_QWORD *)(v1 + 488);
  v5 = *(__int128 **)(v1 + 336);
  URLComponents.init()(a1);
  URLComponents.scheme.setter(0x7370747468, 0xE500000000000000);
  swift_bridgeObjectRetain(*(_QWORD *)(v1 + 88));
  URLComponents.host.setter();
  sub_100081854((_QWORD *)(v1 + 16));
  URLComponents.path.setter();
  sub_10005972C(v3, (uint64_t)v4, type metadata accessor for SearchpartyAccount);
  v7 = v4[2];
  v6 = v4[3];
  v9 = v4[4];
  v8 = v4[5];
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v8);
  sub_1000126B0((uint64_t)v4, type metadata accessor for SearchpartyAccount);
  v10 = sub_100780018(v5);
  *(_QWORD *)(v1 + 576) = v10;
  *(_QWORD *)(v1 + 584) = v11;
  if (v2)
  {
    v12 = *(_QWORD *)(v1 + 520);
    v13 = *(_QWORD *)(v1 + 496);
    v14 = *(_QWORD *)(v1 + 504);
    v15 = *(_QWORD *)(v1 + 488);
    v16 = *(_QWORD *)(v1 + 472);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    sub_1000126B0(v16, type metadata accessor for MetricsEndpoint);
    sub_1000126B0(v15, type metadata accessor for SearchpartyAccount);
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v12, v13);
    v17 = *(_QWORD *)(v1 + 512);
    v19 = *(_QWORD *)(v1 + 480);
    v18 = *(_QWORD *)(v1 + 488);
    v20 = *(_QWORD *)(v1 + 472);
    v22 = *(_QWORD *)(v1 + 448);
    v21 = *(_QWORD *)(v1 + 456);
    v23 = *(_QWORD *)(v1 + 440);
    v24 = *(_QWORD *)(v1 + 416);
    v35 = *(_QWORD *)(v1 + 392);
    v37 = *(_QWORD *)(v1 + 368);
    swift_task_dealloc(*(_QWORD *)(v1 + 520));
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    swift_task_dealloc(v35);
    swift_task_dealloc(v37);
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
  else
  {
    v26 = v10;
    v27 = v11;
    v33 = v7;
    v28 = *(_QWORD *)(v1 + 464);
    v32 = *(_QWORD *)(v1 + 472);
    type metadata accessor for ServerInteractionController(0);
    v36 = ServerInteractionController.__allocating_init(bundleIdentifier:)(0xD00000000000001DLL, 0x8000000100EC5D30);
    *(_QWORD *)(v1 + 592) = v36;
    ContinuousClock.now.getter(v36);
    *(_QWORD *)(v1 + 200) = v28;
    *(_QWORD *)(v1 + 208) = sub_100006C64(&qword_1010ECC20, 255, type metadata accessor for MetricsEndpoint, (uint64_t)&unk_100E5EDDC);
    v29 = sub_100018F08((_QWORD *)(v1 + 176));
    sub_10005972C(v32, (uint64_t)v29, type metadata accessor for MetricsEndpoint);
    *(_QWORD *)(v1 + 240) = &type metadata for MetricsRequest;
    *(_QWORD *)(v1 + 248) = sub_10008241C();
    *(_QWORD *)(v1 + 216) = v26;
    *(_QWORD *)(v1 + 224) = v27;
    *(_QWORD *)(v1 + 280) = &type metadata for SearchpartyCredential;
    *(_QWORD *)(v1 + 288) = sub_100082460();
    v30 = (_QWORD *)swift_allocObject(&unk_101053200, 48, 7);
    *(_QWORD *)(v1 + 256) = v30;
    v30[2] = v33;
    v30[3] = v6;
    v30[4] = v9;
    v30[5] = v8;
    sub_10001BD08(v26, v27);
    v34 = (char *)&async function pointer to dispatch thunk of ServerInteractionController.send(endpoint:content:credential:)
        + async function pointer to dispatch thunk of ServerInteractionController.send(endpoint:content:credential:);
    v31 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of ServerInteractionController.send(endpoint:content:credential:)
                                     + 1));
    *(_QWORD *)(v1 + 600) = v31;
    *v31 = v1;
    v31[1] = sub_10008096C;
    return ((uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))v34)(*(_QWORD *)(v1 + 416), v1 + 176, v1 + 216, v1 + 256);
  }
}

uint64_t sub_10008096C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 600);
  *(_QWORD *)(*(_QWORD *)v1 + 608) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = v2[43];
    v5 = sub_1000813A0;
  }
  else
  {
    v6 = (uint64_t)(v2 + 32);
    v7 = v2 + 27;
    v8 = v2 + 22;
    v9 = v2[43];
    sub_100004048(v6, &qword_1010ECC38);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v7);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v8);
    v5 = sub_100080A08;
    v4 = v9;
  }
  return swift_task_switch(v5, v4, 0);
}

uint64_t sub_100080A08()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  _BOOL4 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  void (*v28)(uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  uint64_t v55;
  void *v56;
  id v57;
  Swift::String v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t (*v70)(void);
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  os_log_type_t type;
  os_log_type_t typea[8];
  uint64_t typeb;
  os_log_type_t typec[8];
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  void (*v113)(uint64_t, uint64_t);
  uint64_t v114;
  uint64_t v115;
  void (*v116)(uint64_t, uint64_t);
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;

  if (qword_1010E9900 != -1)
    swift_once(&qword_1010E9900, sub_10007D69C);
  v114 = v0[65];
  v1 = v0[63];
  v112 = v0[64];
  v2 = v0[62];
  v4 = v0[56];
  v3 = v0[57];
  v6 = v0[53];
  v5 = v0[54];
  v7 = v0[48];
  v8 = v0[49];
  v9 = v0[47];
  v10 = sub_10001A9E8(v9, (uint64_t)qword_1011B66B0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v8, v10, v9);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v4, v3, v6);
  v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 16))(v112, v114, v2);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.default.getter(v12);
  v14 = os_log_type_enabled(v12, v13);
  v16 = v0[63];
  v15 = v0[64];
  v17 = v0[62];
  v18 = v0[56];
  if (v14)
  {
    v19 = v0[55];
    v20 = v0[53];
    v110 = v0[49];
    v21 = v0[46];
    v104 = v0[48];
    v107 = v0[47];
    v80 = v0[45];
    v85 = v0[44];
    v89 = v0[54];
    type = v13;
    v115 = v0[62];
    v22 = (uint8_t *)swift_slowAlloc(12, -1);
    v96 = swift_slowAlloc(32, -1);
    v118 = v96;
    *(_DWORD *)v22 = 136315138;
    v23 = ContinuousClock.now.getter(v96);
    static Duration.UnitsFormatStyle.Unit.milliseconds.getter(v23);
    v24 = sub_100006C64(&qword_101116030, 255, (uint64_t (*)(uint64_t))&type metadata accessor for ContinuousClock.Instant, (uint64_t)&protocol conformance descriptor for ContinuousClock.Instant);
    v25 = static Duration.description<A>(_:_:units:)(v18, v19, v21, v20, v24);
    v77 = v15;
    v27 = v26;
    (*(void (**)(uint64_t, uint64_t))(v80 + 8))(v21, v85);
    v28 = *(void (**)(uint64_t, uint64_t))(v89 + 8);
    v28(v19, v20);
    v0[41] = sub_100016940(v25, v27, &v118);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 41, v0 + 42, v22 + 4, v22 + 12);
    swift_bridgeObjectRelease();
    v113 = v28;
    v28(v18, v20);
    v29 = v115;
    v116 = *(void (**)(uint64_t, uint64_t))(v16 + 8);
    v116(v77, v29);
    _os_log_impl((void *)&_mh_execute_header, v12, type, "metrics duration: %s", v22, 0xCu);
    swift_arrayDestroy(v96, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v96, -1, -1);
    swift_slowDealloc(v22, -1, -1);

    v30 = (*(uint64_t (**)(uint64_t, uint64_t))(v104 + 8))(v110, v107);
  }
  else
  {
    v32 = v0[48];
    v31 = v0[49];
    v33 = v0[47];
    v113 = *(void (**)(uint64_t, uint64_t))(v0[54] + 8);
    v113(v0[56], v0[53]);
    v116 = *(void (**)(uint64_t, uint64_t))(v16 + 8);
    v116(v15, v17);

    v30 = (*(uint64_t (**)(uint64_t, uint64_t))(v32 + 8))(v31, v33);
  }
  v34 = (void *)Response.response.getter(v30);
  v35 = objc_msgSend(v34, "statusCode");

  if (v35 == (id)200)
  {
    v36 = v0[76];
    v37 = type metadata accessor for JSONDecoder(0);
    v38 = swift_allocObject(v37, *(unsigned int *)(v37 + 48), *(unsigned __int16 *)(v37 + 52));
    v39 = JSONDecoder.init()(v38);
    v40 = Response.body.getter(v39);
    v42 = v41;
    v43 = sub_1000824D0();
    dispatch thunk of JSONDecoder.decode<A>(_:from:)(&type metadata for MetricsResponse, v40, v42, &type metadata for MetricsResponse, v43);
    v44 = v0[72];
    v105 = v0[73];
    v108 = v0[65];
    if (!v36)
    {
      v84 = v0[62];
      v88 = v0[64];
      v79 = v0[59];
      v82 = v0[61];
      v92 = v0[60];
      v95 = v0[56];
      v72 = v0[52];
      v75 = v0[53];
      v76 = v0[57];
      v73 = v0[50];
      v74 = v0[51];
      v111 = v0[49];
      v99 = v0[55];
      *(_QWORD *)typec = v0[46];
      sub_10001BC14(v40, v42);
      swift_release();
      swift_release();
      swift_release();
      sub_10001EF3C(v44, v105);
      (*(void (**)(uint64_t, uint64_t))(v74 + 8))(v72, v73);
      v113(v76, v75);
      sub_1000126B0(v79, type metadata accessor for MetricsEndpoint);
      sub_1000126B0(v82, type metadata accessor for SearchpartyAccount);
      v116(v108, v84);
      swift_task_dealloc(v108);
      swift_task_dealloc(v88);
      swift_task_dealloc(v82);
      swift_task_dealloc(v92);
      swift_task_dealloc(v79);
      swift_task_dealloc(v76);
      swift_task_dealloc(v95);
      swift_task_dealloc(v99);
      swift_task_dealloc(v72);
      swift_task_dealloc(v111);
      swift_task_dealloc(*(_QWORD *)typec);
      v70 = (uint64_t (*)(void))v0[1];
      return v70();
    }
    v97 = v0[61];
    *(_QWORD *)typea = v0[62];
    v90 = v0[57];
    v93 = v0[59];
    v86 = v0[53];
    v45 = v0[51];
    v46 = v0[52];
    v47 = v0[50];
    sub_10001BC14(v40, v42);
    swift_release();
    swift_release();
    swift_release();
    sub_10001EF3C(v44, v105);
    (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v46, v47);
    v113(v90, v86);
    sub_1000126B0(v93, type metadata accessor for MetricsEndpoint);
    sub_1000126B0(v97, type metadata accessor for SearchpartyAccount);
    v48 = v108;
    v49 = *(_QWORD *)typea;
  }
  else
  {
    v83 = v0[72];
    v87 = v0[73];
    v106 = v0[62];
    v109 = v0[65];
    v98 = v0[59];
    typeb = v0[61];
    v50 = v0[52];
    v91 = v0[53];
    v94 = v0[57];
    v78 = v0[51];
    v81 = v0[50];
    v51 = type metadata accessor for GenericError(0);
    v52 = sub_100006C64((unint64_t *)&qword_1010ECC40, 255, (uint64_t (*)(uint64_t))&type metadata accessor for GenericError, (uint64_t)&protocol conformance descriptor for GenericError);
    swift_allocError(v51, v52, 0, 0);
    v54 = v53;
    v118 = 0;
    v119 = 0xE000000000000000;
    _StringGuts.grow(_:)(21);
    v55 = swift_bridgeObjectRelease();
    v118 = 0xD000000000000013;
    v119 = 0x8000000100EC6CD0;
    v56 = (void *)Response.response.getter(v55);
    v57 = objc_msgSend(v56, "statusCode");

    v0[40] = v57;
    v58._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    String.append(_:)(v58);
    swift_bridgeObjectRelease();
    v59 = v119;
    *v54 = v118;
    v54[1] = v59;
    v60 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v51 - 8) + 104))(v54, enum case for GenericError.error(_:), v51);
    swift_willThrow(v60);
    swift_release();
    swift_release();
    sub_10001EF3C(v83, v87);
    (*(void (**)(uint64_t, uint64_t))(v78 + 8))(v50, v81);
    v113(v94, v91);
    sub_1000126B0(v98, type metadata accessor for MetricsEndpoint);
    sub_1000126B0(typeb, type metadata accessor for SearchpartyAccount);
    v49 = v106;
    v48 = v109;
  }
  v116(v48, v49);
  v61 = v0[64];
  v63 = v0[60];
  v62 = v0[61];
  v64 = v0[59];
  v66 = v0[56];
  v65 = v0[57];
  v67 = v0[55];
  v68 = v0[52];
  v69 = v0[49];
  v117 = v0[46];
  swift_task_dealloc(v0[65]);
  swift_task_dealloc(v61);
  swift_task_dealloc(v62);
  swift_task_dealloc(v63);
  swift_task_dealloc(v64);
  swift_task_dealloc(v65);
  swift_task_dealloc(v66);
  swift_task_dealloc(v67);
  swift_task_dealloc(v68);
  swift_task_dealloc(v69);
  swift_task_dealloc(v117);
  v70 = (uint64_t (*)(void))v0[1];
  return v70();
}

uint64_t sub_1000811C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v1 = *(_QWORD *)(v0 + 520);
  v2 = *(_QWORD *)(v0 + 496);
  v3 = *(_QWORD *)(v0 + 504);
  swift_release(*(_QWORD *)(v0 + 536));
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  v4 = *(_QWORD *)(v0 + 512);
  v6 = *(_QWORD *)(v0 + 480);
  v5 = *(_QWORD *)(v0 + 488);
  v7 = *(_QWORD *)(v0 + 472);
  v9 = *(_QWORD *)(v0 + 448);
  v8 = *(_QWORD *)(v0 + 456);
  v10 = *(_QWORD *)(v0 + 440);
  v11 = *(_QWORD *)(v0 + 416);
  v12 = *(_QWORD *)(v0 + 392);
  v14 = *(_QWORD *)(v0 + 368);
  swift_task_dealloc(*(_QWORD *)(v0 + 520));
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v14);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000812B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v1 = *(_QWORD *)(v0 + 520);
  v2 = *(_QWORD *)(v0 + 496);
  v3 = *(_QWORD *)(v0 + 504);
  swift_release(*(_QWORD *)(v0 + 536));
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  v4 = *(_QWORD *)(v0 + 512);
  v6 = *(_QWORD *)(v0 + 480);
  v5 = *(_QWORD *)(v0 + 488);
  v7 = *(_QWORD *)(v0 + 472);
  v9 = *(_QWORD *)(v0 + 448);
  v8 = *(_QWORD *)(v0 + 456);
  v10 = *(_QWORD *)(v0 + 440);
  v11 = *(_QWORD *)(v0 + 416);
  v12 = *(_QWORD *)(v0 + 392);
  v14 = *(_QWORD *)(v0 + 368);
  swift_task_dealloc(*(_QWORD *)(v0 + 520));
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v14);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000813A0()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v1 = *(_QWORD *)(v0 + 584);
  v2 = *(_QWORD *)(v0 + 576);
  v20 = *(_QWORD *)(v0 + 520);
  v3 = *(_QWORD *)(v0 + 504);
  v19 = *(_QWORD *)(v0 + 496);
  v4 = *(_QWORD *)(v0 + 488);
  v5 = *(_QWORD *)(v0 + 472);
  v6 = *(_QWORD *)(v0 + 456);
  v7 = *(_QWORD *)(v0 + 424);
  v8 = *(_QWORD *)(v0 + 432);
  swift_release();
  swift_release();
  sub_10001EF3C(v2, v1);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  sub_1000126B0(v5, type metadata accessor for MetricsEndpoint);
  sub_1000126B0(v4, type metadata accessor for SearchpartyAccount);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v20, v19);
  sub_100004048(v0 + 256, &qword_1010ECC38);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 216));
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 176));
  v9 = *(_QWORD *)(v0 + 512);
  v11 = *(_QWORD *)(v0 + 480);
  v10 = *(_QWORD *)(v0 + 488);
  v12 = *(_QWORD *)(v0 + 472);
  v14 = *(_QWORD *)(v0 + 448);
  v13 = *(_QWORD *)(v0 + 456);
  v15 = *(_QWORD *)(v0 + 440);
  v16 = *(_QWORD *)(v0 + 416);
  v17 = *(_QWORD *)(v0 + 392);
  v21 = *(_QWORD *)(v0 + 368);
  swift_task_dealloc(*(_QWORD *)(v0 + 520));
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v21);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100081520()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 120));
  swift_defaultActor_destroy(v0);
  return swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for FMIPService()
{
  return objc_opt_self(_TtC12searchpartyd11FMIPService);
}

uint64_t sub_100081564(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = sub_100006C64(&qword_1010ECC18, a2, (uint64_t (*)(uint64_t))type metadata accessor for FMIPService, (uint64_t)&unk_100E23030);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

Swift::Int sub_1000815A0(uint64_t a1, uint64_t a2)
{
  return sub_100081640(a1, a2, 0xD000000000000036, 0x8000000100EC2990);
}

uint64_t sub_1000815BC(uint64_t a1)
{
  return String.hash(into:)(a1, 0xD000000000000036, 0x8000000100EC2990);
}

Swift::Int sub_1000815D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000816CC(a1, a2, a3, 0xD000000000000036, 0x8000000100EC2990);
}

uint64_t sub_1000815F4@<X0>(uint64_t *a1@<X0>, BOOL *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &off_1010487B8;
  return sub_100081720(v2, a1, a2);
}

void sub_100081600(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000036;
  a1[1] = 0x8000000100EC2990;
}

Swift::Int sub_100081620(uint64_t a1, uint64_t a2)
{
  return sub_100081640(a1, a2, 0x6F43656369766564, 0xEB00000000746E75);
}

Swift::Int sub_100081640(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD v7[9];

  Hasher.init(_seed:)(v7);
  String.hash(into:)(v7, a3, a4);
  return Hasher._finalize()();
}

uint64_t sub_10008168C(uint64_t a1)
{
  return String.hash(into:)(a1, 0x6F43656369766564, 0xEB00000000746E75);
}

Swift::Int sub_1000816AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000816CC(a1, a2, a3, 0x6F43656369766564, 0xEB00000000746E75);
}

Swift::Int sub_1000816CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v8[9];

  Hasher.init(_seed:)(v8);
  String.hash(into:)(v8, a4, a5);
  return Hasher._finalize()();
}

uint64_t sub_100081714@<X0>(uint64_t *a1@<X0>, BOOL *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &off_1010487F0;
  return sub_100081720(v2, a1, a2);
}

uint64_t sub_100081720@<X0>(Swift::OpaquePointer cases@<0:X3>, uint64_t *a2@<X0>, BOOL *a3@<X8>)
{
  Swift::String v4;
  void *v5;
  Swift::Int v6;
  uint64_t result;

  v4._countAndFlagsBits = *a2;
  v5 = (void *)a2[1];
  v4._object = v5;
  v6 = _findStringSwitchCase(cases:string:)(cases, v4);
  result = swift_bridgeObjectRelease(v5);
  *a3 = v6 != 0;
  return result;
}

void sub_10008176C(_QWORD *a1@<X8>)
{
  *a1 = 0x6F43656369766564;
  a1[1] = 0xEB00000000746E75;
}

uint64_t sub_100081790()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_1000234D8(v0, qword_1011B66C8);
  sub_10001A9E8(v0, (uint64_t)qword_1011B66C8);
  return Logger.init(subsystem:category:)(0xD00000000000001DLL, 0x8000000100EC5D30, 0x7672655350494D46, 0xEB00000000656369);
}

uint64_t sub_10008180C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001A9A8(&qword_1010EE220);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

_QWORD *sub_100081854(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = a1[1];
  v3 = a1[3];
  v4 = a1[5];
  v5 = a1[7];
  swift_bridgeObjectRelease(a1[9]);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t sub_1000818BC(uint64_t isStackAllocationSafe, uint64_t a2)
{
  uint64_t v3;
  char v4;
  unsigned int v5;
  unint64_t v6;
  uint64_t v7;
  size_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v12;

  v3 = isStackAllocationSafe;
  v4 = *(_BYTE *)(a2 + 32);
  v5 = v4 & 0x3F;
  v6 = (1 << v4) + 63;
  v7 = v6 >> 6;
  v8 = 8 * (v6 >> 6);
  if (v5 <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v6 >> 6), 8), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v12 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0), v8);
    v9 = sub_100081A3C((unint64_t *)((char *)&v12 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0)), v7, v3, a2);
    swift_release();
  }
  else
  {
    v10 = (void *)swift_slowAlloc(v8, -1);
    bzero(v10, v8);
    v9 = sub_100081A3C((unint64_t *)v10, v7, v3, a2);
    swift_release();
    swift_slowDealloc(v10, -1, -1);
  }
  return v9;
}

uint64_t sub_100081A3C(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  void (*v17)(char *, uint64_t, uint64_t, __n128);
  __n128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  void (*v29)(char *, uint64_t);
  uint64_t result;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  void (*v34)(char *, uint64_t, uint64_t, uint64_t, __n128);
  __n128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t *v42;
  void (*v43)(char *, uint64_t, uint64_t, uint64_t, __n128);
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(char *, uint64_t, uint64_t, __n128);
  uint64_t v50;

  v39 = a2;
  v42 = a1;
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)&v38 - v12;
  v14 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v14);
  v16 = (char *)&v38 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = *(_QWORD *)(a3 + 16);
  v40 = a3;
  if (v46)
  {
    v38 = v4;
    v45 = a3 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
    v50 = *(_QWORD *)(v8 + 72);
    v17 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v8 + 16);
    v48 = a4 + 56;
    v49 = v17;
    v18 = swift_bridgeObjectRetain(a3);
    v41 = 0;
    v19 = 0;
    v44 = v16;
    while (1)
    {
      v49(v16, v45 + v50 * v19, v7, v18);
      v43 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v8 + 56);
      ((void (*)(char *, _QWORD, uint64_t, uint64_t))v43)(v16, 0, 1, v7);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v16, 1, v7) == 1)
      {
        v36 = v39;
        v37 = v41;
        goto LABEL_20;
      }
      v47 = v19;
      (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v13, v16, v7);
      v20 = *(_QWORD *)(a4 + 40);
      v21 = sub_100006C64(&qword_1010F98B0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v22 = dispatch thunk of Hashable._rawHashValue(seed:)(v20, v7, v21);
      v23 = a4;
      v24 = -1 << *(_BYTE *)(a4 + 32);
      v25 = v22 & ~v24;
      if (((*(_QWORD *)(v48 + ((v25 >> 3) & 0xFFFFFFFFFFFFF8)) >> v25) & 1) == 0)
        break;
      v26 = ~v24;
      while (1)
      {
        ((void (*)(char *, unint64_t, uint64_t))v49)(v11, *(_QWORD *)(v23 + 48) + v25 * v50, v7);
        v27 = sub_100006C64(&qword_1010EE520, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v28 = dispatch thunk of static Equatable.== infix(_:_:)(v11, v13, v7, v27);
        v29 = *(void (**)(char *, uint64_t))(v8 + 8);
        v29(v11, v7);
        if ((v28 & 1) != 0)
          break;
        v25 = (v25 + 1) & v26;
        if (((*(_QWORD *)(v48 + ((v25 >> 3) & 0xFFFFFFFFFFFFF8)) >> v25) & 1) == 0)
          goto LABEL_10;
      }
      result = ((uint64_t (*)(char *, uint64_t))v29)(v13, v7);
      v31 = (v25 >> 3) & 0x1FFFFFFFFFFFFFF8;
      v32 = *(unint64_t *)((char *)v42 + v31);
      *(unint64_t *)((char *)v42 + v31) = v32 | (1 << v25);
      if ((v32 & (1 << v25)) != 0)
        goto LABEL_12;
      v33 = __OFADD__(v41++, 1);
      v16 = v44;
      if (v33)
      {
        __break(1u);
        return result;
      }
      a4 = v23;
LABEL_13:
      v19 = v47 + 1;
      if (v47 + 1 == v46)
      {
        v36 = v39;
        v37 = v41;
        v43(v16, 1, 1, v7, v18);
        goto LABEL_20;
      }
    }
    v29 = *(void (**)(char *, uint64_t))(v8 + 8);
LABEL_10:
    v29(v13, v7);
LABEL_12:
    a4 = v23;
    v16 = v44;
    goto LABEL_13;
  }
  v34 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v8 + 56);
  v35 = swift_bridgeObjectRetain(a3);
  v37 = 0;
  v36 = v39;
  v34(v16, 1, 1, v7, v35);
LABEL_20:
  swift_bridgeObjectRelease();
  swift_retain();
  return sub_100852214(v42, v36, v37, a4);
}

_QWORD *sub_100081DC0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, unint64_t, uint64_t);
  uint64_t v22;
  char v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD v28[2];
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v29 = type metadata accessor for OwnedBeaconRecord(0);
  v5 = *(_QWORD *)(v29 - 8);
  __chkstk_darwin(v29);
  v33 = (uint64_t)v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for UUID(0);
  v38 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v9 = (char *)v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = *(_QWORD *)(a1 + 16);
  if (!v32)
    return _swiftEmptyArrayStorage;
  v28[0] = a1;
  v28[1] = v2;
  v30 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v31 = a1 + v30;
  v35 = *(_QWORD *)(v5 + 72);
  v39 = a2 + 56;
  swift_bridgeObjectRetain(a1);
  v10 = 0;
  v34 = _swiftEmptyArrayStorage;
  v11 = a2;
  do
  {
    v36 = v10;
    v37 = v31 + v35 * v10;
    if (*(_QWORD *)(a2 + 16)
      && (v12 = v37 + *(int *)(v29 + 20),
          v13 = *(_QWORD *)(a2 + 40),
          v14 = sub_100006C64(&qword_1010F98B0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID), v15 = dispatch thunk of Hashable._rawHashValue(seed:)(v13, v7, v14), v16 = -1 << *(_BYTE *)(v11 + 32), v17 = v15 & ~v16, ((*(_QWORD *)(v39 + ((v17 >> 3) & 0xFFFFFFFFFFFFF8)) >> v17) & 1) != 0))
    {
      v18 = v11;
      v19 = ~v16;
      v20 = *(_QWORD *)(v38 + 72);
      v21 = *(void (**)(char *, unint64_t, uint64_t))(v38 + 16);
      while (1)
      {
        v21(v9, *(_QWORD *)(v18 + 48) + v20 * v17, v7);
        v22 = sub_100006C64(&qword_1010EE520, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v23 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v12, v7, v22);
        (*(void (**)(char *, uint64_t))(v38 + 8))(v9, v7);
        if ((v23 & 1) != 0)
          break;
        v17 = (v17 + 1) & v19;
        v18 = v11;
        if (((*(_QWORD *)(v39 + ((v17 >> 3) & 0xFFFFFFFFFFFFF8)) >> v17) & 1) == 0)
          goto LABEL_10;
      }
    }
    else
    {
LABEL_10:
      sub_10005972C(v37, v33, type metadata accessor for OwnedBeaconRecord);
      v24 = (unint64_t)v34;
      if ((swift_isUniquelyReferenced_nonNull_native(v34) & 1) == 0)
        v24 = sub_1007C8520(0, *(_QWORD *)(v24 + 16) + 1, 1, v24);
      v26 = *(_QWORD *)(v24 + 16);
      v25 = *(_QWORD *)(v24 + 24);
      if (v26 >= v25 >> 1)
        v24 = sub_1007C8520(v25 > 1, v26 + 1, 1, v24);
      *(_QWORD *)(v24 + 16) = v26 + 1;
      v34 = (_QWORD *)v24;
      sub_100082514(v33, v24 + v30 + v26 * v35);
    }
    v10 = v36 + 1;
    a2 = v11;
  }
  while (v36 + 1 != v32);
  swift_bridgeObjectRelease();
  return v34;
}

_QWORD *sub_1000820D0(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  _QWORD *result;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, unint64_t, uint64_t);
  uint64_t v25;
  char v26;
  _QWORD *v27;
  unint64_t v28;
  unint64_t v29;
  _QWORD v30[2];
  unint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  char *v42;
  _QWORD *v43;

  v37 = a2;
  v4 = type metadata accessor for UUID(0);
  v41 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v40 = (char *)v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = type metadata accessor for OwnedBeaconRecord(0);
  v6 = __chkstk_darwin(v34);
  v32 = (uint64_t)v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)v30 - v9;
  result = _swiftEmptyArrayStorage;
  v43 = _swiftEmptyArrayStorage;
  v36 = *(_QWORD *)(a1 + 16);
  if (v36)
  {
    v30[1] = v2;
    v12 = 0;
    v13 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
    v38 = *(_QWORD *)(v8 + 72);
    v31 = v13;
    v35 = a1 + v13;
    v33 = (char *)v30 - v9;
    v14 = v40;
    while (1)
    {
      sub_10005972C(v35 + v38 * v12, (uint64_t)v10, type metadata accessor for OwnedBeaconRecord);
      v15 = *v37;
      if (*(_QWORD *)(*v37 + 16))
      {
        v39 = v12;
        v16 = &v10[*(int *)(v34 + 20)];
        v17 = *(_QWORD *)(v15 + 40);
        v18 = sub_100006C64(&qword_1010F98B0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        swift_bridgeObjectRetain(v15);
        v42 = v16;
        v19 = dispatch thunk of Hashable._rawHashValue(seed:)(v17, v4, v18);
        v20 = -1 << *(_BYTE *)(v15 + 32);
        v21 = v19 & ~v20;
        if (((*(_QWORD *)(v15 + 56 + ((v21 >> 3) & 0xFFFFFFFFFFFFF8)) >> v21) & 1) != 0)
        {
          v22 = ~v20;
          v23 = *(_QWORD *)(v41 + 72);
          v24 = *(void (**)(char *, unint64_t, uint64_t))(v41 + 16);
          while (1)
          {
            v24(v14, *(_QWORD *)(v15 + 48) + v23 * v21, v4);
            v25 = sub_100006C64(&qword_1010EE520, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
            v26 = dispatch thunk of static Equatable.== infix(_:_:)(v14, v42, v4, v25);
            (*(void (**)(char *, uint64_t))(v41 + 8))(v14, v4);
            if ((v26 & 1) != 0)
              break;
            v21 = (v21 + 1) & v22;
            if (((*(_QWORD *)(v15 + 56 + ((v21 >> 3) & 0xFFFFFFFFFFFFF8)) >> v21) & 1) == 0)
              goto LABEL_3;
          }
          swift_bridgeObjectRelease();
          v10 = v33;
          sub_100082514((uint64_t)v33, v32);
          v27 = v43;
          if ((swift_isUniquelyReferenced_nonNull_native(v43) & 1) == 0)
          {
            sub_10009A680(0, v27[2] + 1, 1);
            v27 = v43;
          }
          v29 = v27[2];
          v28 = v27[3];
          if (v29 >= v28 >> 1)
          {
            sub_10009A680(v28 > 1, v29 + 1, 1);
            v27 = v43;
          }
          v27[2] = v29 + 1;
          sub_100082514(v32, (uint64_t)v27 + v31 + v29 * v38);
          v12 = v39;
          goto LABEL_5;
        }
LABEL_3:
        swift_bridgeObjectRelease();
        v10 = v33;
        v12 = v39;
      }
      sub_1000126B0((uint64_t)v10, type metadata accessor for OwnedBeaconRecord);
LABEL_5:
      if (++v12 == v36)
        return v43;
    }
  }
  return result;
}

unint64_t sub_10008241C()
{
  unint64_t result;

  result = qword_1010ECC28;
  if (!qword_1010ECC28)
  {
    result = swift_getWitnessTable(&unk_100E4F150, &type metadata for MetricsRequest);
    atomic_store(result, (unint64_t *)&qword_1010ECC28);
  }
  return result;
}

unint64_t sub_100082460()
{
  unint64_t result;

  result = qword_1010ECC30;
  if (!qword_1010ECC30)
  {
    result = swift_getWitnessTable(&unk_100E61468, &type metadata for SearchpartyCredential);
    atomic_store(result, (unint64_t *)&qword_1010ECC30);
  }
  return result;
}

uint64_t sub_1000824A4()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

unint64_t sub_1000824D0()
{
  unint64_t result;

  result = qword_1010ECC48;
  if (!qword_1010ECC48)
  {
    result = swift_getWitnessTable(&unk_100E502F4, &type metadata for MetricsResponse);
    atomic_store(result, &qword_1010ECC48);
  }
  return result;
}

uint64_t sub_100082514(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for OwnedBeaconRecord(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_100082558()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1010ECC60;
  if (!qword_1010ECC60)
  {
    v1 = sub_10001F784(&qword_1010ECC58);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for AnalyticsEvent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1010ECC60);
  }
  return result;
}

unint64_t sub_1000825A4()
{
  unint64_t result;

  result = qword_1010ECC70;
  if (!qword_1010ECC70)
  {
    result = swift_getWitnessTable(&unk_100E61BB4, &type metadata for FetchDevicesRequest);
    atomic_store(result, (unint64_t *)&qword_1010ECC70);
  }
  return result;
}

unint64_t sub_1000825E8()
{
  unint64_t result;

  result = qword_1010ECC78;
  if (!qword_1010ECC78)
  {
    result = swift_getWitnessTable(&unk_100E4D2A0, &type metadata for FetchDevicesResponse);
    atomic_store(result, (unint64_t *)&qword_1010ECC78);
  }
  return result;
}

ValueMetadata *type metadata accessor for FMIPService.AnalyticsKey()
{
  return &type metadata for FMIPService.AnalyticsKey;
}

uint64_t _s12searchpartyd11FMIPServiceC12AnalyticsKeyOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_100082684 + 4 * byte_100E22FD8[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1000826A4 + 4 * byte_100E22FDD[v4]))();
}

_BYTE *sub_100082684(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1000826A4(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1000826AC(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1000826B4(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1000826BC(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1000826C4(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for FMIPService.AnalyticsEvent()
{
  return &type metadata for FMIPService.AnalyticsEvent;
}

unint64_t sub_1000826E4()
{
  unint64_t result;

  result = qword_1010ECC80;
  if (!qword_1010ECC80)
  {
    result = swift_getWitnessTable(&unk_100E230DC, &type metadata for FMIPService.AnalyticsEvent);
    atomic_store(result, (unint64_t *)&qword_1010ECC80);
  }
  return result;
}

unint64_t sub_10008272C()
{
  unint64_t result;

  result = qword_1010ECC88;
  if (!qword_1010ECC88)
  {
    result = swift_getWitnessTable(&unk_100E230A4, &type metadata for FMIPService.AnalyticsEvent);
    atomic_store(result, (unint64_t *)&qword_1010ECC88);
  }
  return result;
}

unint64_t sub_100082774()
{
  unint64_t result;

  result = qword_1010ECC90;
  if (!qword_1010ECC90)
  {
    result = swift_getWitnessTable(&unk_100E2311C, &type metadata for FMIPService.AnalyticsEvent);
    atomic_store(result, (unint64_t *)&qword_1010ECC90);
  }
  return result;
}

unint64_t sub_1000827BC()
{
  unint64_t result;

  result = qword_1010ECC98;
  if (!qword_1010ECC98)
  {
    result = swift_getWitnessTable(&unk_100E231AC, &type metadata for FMIPService.AnalyticsKey);
    atomic_store(result, (unint64_t *)&qword_1010ECC98);
  }
  return result;
}

unint64_t sub_100082804()
{
  unint64_t result;

  result = qword_1010ECCA0;
  if (!qword_1010ECCA0)
  {
    result = swift_getWitnessTable(&unk_100E23174, &type metadata for FMIPService.AnalyticsKey);
    atomic_store(result, (unint64_t *)&qword_1010ECCA0);
  }
  return result;
}

unint64_t sub_10008284C()
{
  unint64_t result;

  result = qword_1010ECCA8;
  if (!qword_1010ECCA8)
  {
    result = swift_getWitnessTable(&unk_100E231EC, &type metadata for FMIPService.AnalyticsKey);
    atomic_store(result, (unint64_t *)&qword_1010ECCA8);
  }
  return result;
}

void DeviceInformationProviderFactory.provider()(uint64_t a1@<X8>)
{
  *(_QWORD *)(a1 + 24) = &type metadata for SystemInfo;
  *(_QWORD *)(a1 + 32) = &off_101053400;
}

ValueMetadata *type metadata accessor for DeviceInformationProviderFactory()
{
  return &type metadata for DeviceInformationProviderFactory;
}

uint64_t sub_1000828B8(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  v2 = v1;
  if (qword_1010E9F80 != -1)
    swift_once(&qword_1010E9F80, sub_1007FA778);
  v4 = type metadata accessor for Logger(0);
  sub_10001A9E8(v4, (uint64_t)qword_1011B77E8);
  v5 = swift_retain_n(a1, 2);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.default.getter(v6);
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = swift_slowAlloc(32, -1);
    v16 = (uint64_t)a1;
    v17 = v9;
    *(_DWORD *)v8 = 136446210;
    v10 = type metadata accessor for CloudKitCoordinator();
    swift_retain();
    v11 = String.init<A>(describing:)(&v16, v10);
    v13 = v12;
    v16 = sub_100016940(v11, v12, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v16, &v17, v8 + 4, v8 + 12);
    swift_release_n(a1, 2);
    swift_bridgeObjectRelease(v13);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "CloudKitCoordinator was reset: %{public}s", v8, 0xCu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

  }
  else
  {

    swift_release_n(a1, 2);
  }
  swift_retain();
  v14 = swift_retain();
  sub_100860950(v14, a1, v2);
  swift_release(a1);
  return swift_release(v2);
}

void sub_100082AA4(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  sub_1000875F4(a2, a3);
}

uint64_t sub_100082AB0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  void *v14;
  id v15;
  uint64_t result;
  NSObject *v17;
  uint8_t *v18;
  uint64_t v19;

  v2 = v1;
  v4 = type metadata accessor for DispatchPredicate(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (uint64_t *)((char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1010E9F80 != -1)
    swift_once(&qword_1010E9F80, sub_1007FA778);
  v8 = type metadata accessor for Logger(0);
  v9 = sub_10001A9E8(v8, (uint64_t)qword_1011B77E8);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.default.getter(v10);
  if (os_log_type_enabled(v10, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v12 = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "CloudKitCoordinator requested flushCache", v12, 2u);
    swift_slowDealloc(v12, -1, -1);
  }

  v13 = *(_QWORD *)(v2 + 160);
  v14 = *(void **)(v13 + 16);
  *v7 = v14;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v5 + 104))(v7, enum case for DispatchPredicate.notOnQueue(_:), v4);
  v15 = v14;
  LOBYTE(v14) = _dispatchPreconditionTest(_:)(v7);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v5 + 8))(v7, v4);
  if ((v14 & 1) != 0)
  {
    v17 = dispatch_group_create();
    dispatch_group_enter(v17);
    swift_retain(v13);
    v18 = v17;
    sub_100BD2320(0, a1, (NSObject **)v13, v18);
    swift_release(v13);

    QueueSynchronizer.conditionalSync<A>(_:)(sub_100087A38);
    return sub_1007EEF64(6);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100082C9C(void *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int (*v44)(uint64_t, uint64_t, uint64_t);
  uint64_t v45;
  NSObject *v46;
  NSObject *v47;
  os_log_type_t v48;
  uint8_t *v49;
  NSObject **v50;
  NSObject *v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  id v56;
  unint64_t v57;
  id v58;
  NSObject *v59;
  os_log_type_t v60;
  _BOOL4 v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  id v65;
  _QWORD *v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  unint64_t v70;
  _BYTE *v71;
  unsigned __int8 v72;
  uint64_t v73;
  NSObject *v74;
  os_log_type_t v75;
  uint8_t *v76;
  uint64_t v77;
  unsigned __int8 v78;
  id v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  char v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  _QWORD *v90;
  _QWORD *v91;
  char *v92;
  _QWORD v94[2];
  _QWORD *v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  unsigned int (*v99)(uint64_t, uint64_t, uint64_t);
  void (*v100)(char *, char *, uint64_t);
  char *v101;
  char *v102;
  char *v103;
  char *v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  char *v109;
  uint64_t v110;
  char *v111;
  char *v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  char *v117;
  char *v118;
  char *v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  __int128 v130;
  __int128 v131;
  uint64_t v132;
  _OWORD v133[2];
  uint64_t v134;

  v126 = a2;
  v5 = sub_10001A9A8((uint64_t *)&unk_1010EE180);
  __chkstk_darwin(v5);
  v108 = (char *)v94 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v121 = type metadata accessor for SharedBeaconRecord(0);
  v114 = *(_QWORD *)(v121 - 8);
  v7 = __chkstk_darwin(v121);
  v119 = (char *)v94 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v104 = (char *)v94 - v9;
  v110 = sub_10001A9A8((uint64_t *)&unk_10110EE90);
  __chkstk_darwin(v110);
  v111 = (char *)v94 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10001A9A8((uint64_t *)&unk_1010F47C0);
  __chkstk_darwin(v11);
  v118 = (char *)v94 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v107 = type metadata accessor for OwnedBeaconRecord(0);
  v106 = *(_QWORD *)(v107 - 8);
  __chkstk_darwin(v107);
  v103 = (char *)v94 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v124 = type metadata accessor for URL(0);
  v122 = *(_QWORD *)(v124 - 8);
  __chkstk_darwin(v124);
  v123 = (char *)v94 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_10001A9A8(&qword_1010ED860);
  v16 = __chkstk_darwin(v15);
  v101 = (char *)v94 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v16);
  v102 = (char *)v94 - v19;
  v20 = __chkstk_darwin(v18);
  v105 = (char *)v94 - v21;
  v22 = __chkstk_darwin(v20);
  v109 = (char *)v94 - v23;
  v24 = __chkstk_darwin(v22);
  v113 = (char *)v94 - v25;
  v26 = __chkstk_darwin(v24);
  v117 = (char *)v94 - v27;
  __chkstk_darwin(v26);
  v29 = (char *)v94 - v28;
  v30 = type metadata accessor for UUID(0);
  v31 = *(_QWORD *)(v30 - 8);
  v32 = __chkstk_darwin(v30);
  v120 = (char *)v94 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = __chkstk_darwin(v32);
  v112 = (char *)v94 - v35;
  v36 = __chkstk_darwin(v34);
  v116 = (char *)v94 - v37;
  __chkstk_darwin(v36);
  v39 = (char *)v94 - v38;
  v40 = objc_msgSend(a1, "recordName");
  v41 = static String._unconditionallyBridgeFromObjectiveC(_:)(v40);
  v43 = v42;

  UUID.init(uuidString:)(v41, v43);
  swift_bridgeObjectRelease();
  v44 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v31 + 48);
  if (v44((uint64_t)v29, 1, v30) != 1)
  {
    v99 = v44;
    v100 = *(void (**)(char *, char *, uint64_t))(v31 + 32);
    v100(v39, v29, v30);
    v53 = v39;
    if (qword_1010E9F80 != -1)
      swift_once(&qword_1010E9F80, sub_1007FA778);
    v54 = type metadata accessor for Logger(0);
    v55 = sub_10001A9E8(v54, (uint64_t)qword_1011B77E8);
    v56 = a1;
    v57 = a3;
    swift_bridgeObjectRetain_n(a3, 2);
    v58 = v56;
    v98 = v55;
    v59 = Logger.logObject.getter(v58);
    v60 = static os_log_type_t.default.getter(v59);
    v61 = os_log_type_enabled(v59, v60);
    v115 = v30;
    v125 = v31;
    v62 = v126;
    if (v61)
    {
      v63 = swift_slowAlloc(22, -1);
      v64 = swift_slowAlloc(8, -1);
      v97 = v53;
      v95 = (_QWORD *)v64;
      v96 = swift_slowAlloc(32, -1);
      *(_QWORD *)&v133[0] = v96;
      *(_DWORD *)v63 = 138412546;
      *(_QWORD *)&v130 = v58;
      v65 = v58;
      v31 = v125;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v130, (char *)&v130 + 8, v63 + 4, v63 + 12);
      v66 = v95;
      *v95 = v58;

      *(_WORD *)(v63 + 12) = 2082;
      swift_bridgeObjectRetain(v57);
      *(_QWORD *)&v130 = sub_100016940(v62, v57, (uint64_t *)v133);
      v30 = v115;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v130, (char *)&v130 + 8, v63 + 14, v63 + 22);
      swift_bridgeObjectRelease_n(v57, 3);
      _os_log_impl((void *)&_mh_execute_header, v59, v60, "Process CloudKit delete recordID: %@ recordType: %{public}s", (uint8_t *)v63, 0x16u);
      v67 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
      swift_arrayDestroy(v66, 1, v67);
      v68 = v66;
      v53 = v97;
      swift_slowDealloc(v68, -1, -1);
      v69 = v96;
      swift_arrayDestroy(v96, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v69, -1, -1);
      swift_slowDealloc(v63, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v57, 2);
    }
    sub_10069D6D8();
    if (v72 == 17)
    {
      v73 = swift_bridgeObjectRetain_n(v57, 2);
      v74 = Logger.logObject.getter(v73);
      v75 = static os_log_type_t.default.getter(v74);
      if (os_log_type_enabled(v74, v75))
      {
        v76 = (uint8_t *)swift_slowAlloc(12, -1);
        v77 = swift_slowAlloc(32, -1);
        *(_QWORD *)&v133[0] = v77;
        *(_DWORD *)v76 = 136446210;
        swift_bridgeObjectRetain(v57);
        *(_QWORD *)&v130 = sub_100016940(v62, v57, (uint64_t *)v133);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v130, (char *)&v130 + 8, v76 + 4, v76 + 12);
        swift_bridgeObjectRelease_n(v57, 3);
        _os_log_impl((void *)&_mh_execute_header, v74, v75, "Ignoring record delete for unknown record type: %{public}s", v76, 0xCu);
        swift_arrayDestroy(v77, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v77, -1, -1);
        swift_slowDealloc(v76, -1, -1);

        (*(void (**)(char *, uint64_t))(v125 + 8))(v53, v30);
      }
      else
      {
        swift_bridgeObjectRelease_n(v57, 2);

        (*(void (**)(char *, uint64_t))(v31 + 8))(v53, v30);
      }
      swift_bridgeObjectRetain(v57);
      return v62;
    }
    v78 = v72;
    v79 = objc_msgSend(v58, "recordName");
    v80 = static String._unconditionallyBridgeFromObjectiveC(_:)(v79);
    v82 = v81;

    v83 = (uint64_t)v117;
    UUID.init(uuidString:)(v80, v82);
    swift_bridgeObjectRelease();
    if (v99(v83, 1, v30) == 1)
    {
      sub_100004048(v83, &qword_1010ED860);
    }
    else
    {
      v84 = v116;
      v100(v116, (char *)v83, v30);
      sub_10069D6D8();
      if (v85 != 17)
      {
        v86 = (uint64_t)v123;
        sub_10069D9E0(v85);
        sub_100887720(v86, (uint64_t)&v127);
        (*(void (**)(uint64_t, uint64_t))(v122 + 8))(v86, v124);
        v87 = v128;
        if (v128)
        {
          v88 = v84;
          v89 = v129;
          v90 = sub_10001AA44(&v127, v128);
          *((_QWORD *)&v131 + 1) = v87;
          v132 = *(_QWORD *)(v89 + 8);
          v91 = sub_100018F08(&v130);
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v87 - 8) + 16))(v91, v90, v87);
          (*(void (**)(char *, uint64_t))(v31 + 8))(v88, v115);
          _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v127);
        }
        else
        {
          (*(void (**)(char *, uint64_t))(v31 + 8))(v84, v30);
          sub_100004048((uint64_t)&v127, (uint64_t *)&unk_1010EE310);
          v130 = 0u;
          v131 = 0u;
          v132 = 0;
        }
        sub_100005CF0((uint64_t)&v130, (uint64_t)v133, &qword_1010ECCB0);
LABEL_27:
        v92 = (char *)&loc_1000837BC + dword_100084C9C[v78];
        v94[1] = v57;
        __asm { BR              X10 }
      }
      (*(void (**)(char *, uint64_t))(v31 + 8))(v84, v30);
    }
    v134 = 0;
    memset(v133, 0, sizeof(v133));
    goto LABEL_27;
  }
  sub_100004048((uint64_t)v29, &qword_1010ED860);
  if (qword_1010E9F80 != -1)
    swift_once(&qword_1010E9F80, sub_1007FA778);
  v45 = type metadata accessor for Logger(0);
  sub_10001A9E8(v45, (uint64_t)qword_1011B77E8);
  v46 = a1;
  v47 = Logger.logObject.getter(v46);
  v48 = static os_log_type_t.error.getter(v47);
  if (os_log_type_enabled(v47, v48))
  {
    v49 = (uint8_t *)swift_slowAlloc(12, -1);
    v50 = (NSObject **)swift_slowAlloc(8, -1);
    *(_DWORD *)v49 = 138543362;
    *(_QWORD *)&v133[0] = v46;
    v51 = v46;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v133, (char *)v133 + 8, v49 + 4, v49 + 12);
    *v50 = v46;

    _os_log_impl((void *)&_mh_execute_header, v47, v48, "Invalid record identifier beaconRecord: %{public}@", v49, 0xCu);
    v52 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v50, 1, v52);
    swift_slowDealloc(v50, -1, -1);
    swift_slowDealloc(v49, -1, -1);
  }
  else
  {

    v47 = v46;
  }

  v70 = sub_10008806C();
  v62 = swift_allocError(&type metadata for BeaconStore.BeaconStoreError, v70, 0, 0);
  *v71 = 12;
  return v62;
}

void sub_100084CE0(void *a1)
{
  id v2;
  id v3;
  void *v4;
  id v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  id v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  _QWORD *v15;
  id v16;
  uint64_t v17;
  id v18;
  uint64_t v19;

  v2 = objc_msgSend(a1, "recordID");
  v3 = objc_msgSend(v2, "zoneID");

  if (qword_1010E9F98 != -1)
    swift_once(&qword_1010E9F98, sub_1007FDE50);
  v4 = (void *)qword_1011B7830;
  sub_10000F4A0(0, (unint64_t *)&unk_10110FFC0, CKRecordZoneID_ptr);
  v5 = v4;
  v6 = static NSObject.== infix(_:_:)(v5, v3);

  if ((v6 & 1) != 0)
  {
    sub_100084F6C(a1);
    if ((v9 & 1) != 0)
    {
      sub_10008805C(v7, v8, 1);
    }
    else
    {
      sub_100A092C0((uint64_t *)&v18, v7, v8);
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    if (qword_1010E9F80 != -1)
      swift_once(&qword_1010E9F80, sub_1007FA778);
    v10 = type metadata accessor for Logger(0);
    sub_10001A9E8(v10, (uint64_t)qword_1011B77E8);
    v11 = a1;
    v12 = Logger.logObject.getter(v11);
    v13 = static os_log_type_t.default.getter(v12);
    if (os_log_type_enabled(v12, v13))
    {
      v14 = (uint8_t *)swift_slowAlloc(12, -1);
      v15 = (_QWORD *)swift_slowAlloc(8, -1);
      *(_DWORD *)v14 = 138543362;
      v16 = objc_msgSend(v11, "recordID");
      v18 = v16;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19, v14 + 4, v14 + 12);
      *v15 = v16;

      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Ignoring changed record from unknown zone: %{public}@", v14, 0xCu);
      v17 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
      swift_arrayDestroy(v15, 1, v17);
      swift_slowDealloc(v15, -1, -1);
      swift_slowDealloc(v14, -1, -1);

    }
    else
    {

    }
  }
}

void sub_100084F6C(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t found;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  id v55;
  NSObject *v56;
  os_log_type_t v57;
  _BOOL4 v58;
  uint64_t v59;
  uint8_t *v60;
  uint64_t v61;
  id v62;
  id v63;
  id v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  char v71;
  uint8_t *v72;
  uint64_t v73;
  char *v74;
  id v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  char *v98;
  char *v99;
  char *v100;
  char *v101;
  char *v102;
  char *v103;
  char *v104;
  char *v105;
  char *v106;
  char *v107;
  char *v108;
  char *v109;
  char *v110;
  char *v111;
  char *v112;
  uint64_t v113;
  char *v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;

  v2 = v1;
  v4 = type metadata accessor for SharingCircleSecret(0);
  __chkstk_darwin(v4);
  v111 = (char *)&v72 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10001A9A8((uint64_t *)&unk_101111440);
  v95 = *(_QWORD *)(v6 - 8);
  v7 = __chkstk_darwin(v6);
  v97 = (char *)&v72 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v96 = v8;
  __chkstk_darwin(v7);
  v87 = type metadata accessor for MemberSharingCircle(0);
  v92 = *(_QWORD *)(v87 - 8);
  v9 = __chkstk_darwin(v87);
  v94 = (char *)&v72 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v93 = v10;
  __chkstk_darwin(v9);
  v12 = (char *)&v72 - v11;
  v13 = sub_10001A9A8(&qword_1010EE0E0);
  v89 = *(_QWORD *)(v13 - 8);
  v14 = __chkstk_darwin(v13);
  v91 = (char *)&v72 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v90 = v15;
  __chkstk_darwin(v14);
  v84 = type metadata accessor for OwnerSharingCircle(0);
  v85 = *(_QWORD *)(v84 - 8);
  v16 = __chkstk_darwin(v84);
  v88 = (char *)&v72 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v86 = v17;
  __chkstk_darwin(v16);
  v115 = (char *)&v72 - v18;
  v19 = type metadata accessor for MemberPeerTrust(0);
  __chkstk_darwin(v19);
  v110 = (char *)&v72 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for OwnerPeerTrust(0);
  __chkstk_darwin(v21);
  v109 = (char *)&v72 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for OwnedDeviceKeyRecord(0);
  __chkstk_darwin(v23);
  v108 = (char *)&v72 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = type metadata accessor for KeyAlignmentRecord(0);
  __chkstk_darwin(v25);
  v107 = (char *)&v72 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = type metadata accessor for LostModeRecord(0);
  __chkstk_darwin(v27);
  v106 = (char *)&v72 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = type metadata accessor for SafeLocation(0);
  __chkstk_darwin(v29);
  v105 = (char *)&v72 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = type metadata accessor for LeashRecord(0);
  __chkstk_darwin(v31);
  v104 = (char *)&v72 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  found = type metadata accessor for NotifyWhenFoundRecord(0);
  __chkstk_darwin(found);
  v103 = (char *)&v72 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = type metadata accessor for BeaconNamingRecord(0);
  __chkstk_darwin(v35);
  v102 = (char *)&v72 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = type metadata accessor for ShareRecord(0);
  __chkstk_darwin(v37);
  v101 = (char *)&v72 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = type metadata accessor for OwnedBeaconGroup(0);
  __chkstk_darwin(v39);
  v100 = (char *)&v72 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = sub_10001A9A8(&qword_1010F46C0);
  __chkstk_darwin(v41);
  v112 = (char *)&v72 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = sub_10001A9A8((uint64_t *)&unk_1010EE180);
  v81 = *(_QWORD *)(v43 - 8);
  v44 = __chkstk_darwin(v43);
  v83 = (char *)&v72 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  v82 = v45;
  __chkstk_darwin(v44);
  v47 = (char *)&v72 - v46;
  v77 = type metadata accessor for SharedBeaconRecord(0);
  v78 = *(_QWORD *)(v77 - 8);
  v48 = __chkstk_darwin(v77);
  v80 = (char *)&v72 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0);
  v79 = v49;
  __chkstk_darwin(v48);
  v114 = (char *)&v72 - v50;
  v51 = type metadata accessor for OwnedBeaconRecord(0);
  __chkstk_darwin(v51);
  v99 = (char *)&v72 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1010E9F80 != -1)
    swift_once(&qword_1010E9F80, sub_1007FA778);
  v53 = type metadata accessor for Logger(0);
  v54 = sub_10001A9E8(v53, (uint64_t)qword_1011B77E8);
  v55 = a1;
  v56 = Logger.logObject.getter(v55);
  v57 = static os_log_type_t.default.getter(v56);
  v58 = os_log_type_enabled(v56, v57);
  v98 = v47;
  if (v58)
  {
    v59 = swift_slowAlloc(12, -1);
    v74 = v12;
    v60 = (uint8_t *)v59;
    v61 = swift_slowAlloc(32, -1);
    v76 = v2;
    v73 = v61;
    v117 = v61;
    *(_DWORD *)v60 = 136315138;
    v72 = v60 + 4;
    v62 = v55;
    v75 = v55;
    v63 = v62;
    v64 = objc_msgSend(v62, "description");
    v65 = static String._unconditionallyBridgeFromObjectiveC(_:)(v64);
    v113 = v54;
    v67 = v66;

    v116 = sub_100016940(v65, v67, &v117);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v116, &v117, v72, v60 + 12);

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v56, v57, "processBeaconZoneRecordUpdate: %s", v60, 0xCu);
    v68 = v73;
    swift_arrayDestroy(v73, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v68, -1, -1);
    swift_slowDealloc(v60, -1, -1);

  }
  else
  {

  }
  CKRecord.recordType.getter(v69);
  sub_10069D6D8();
  v71 = v70;
  swift_bridgeObjectRelease();
  __asm { BR              X10 }
}

uint64_t sub_100086328(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  void *v16;
  id v17;
  uint64_t result;
  NSObject *v19;
  uint8_t *v20;
  uint64_t v21;

  v3 = v2;
  v6 = type metadata accessor for DispatchPredicate(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (uint64_t *)((char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1010E9F80 != -1)
    swift_once(&qword_1010E9F80, sub_1007FA778);
  v10 = type metadata accessor for Logger(0);
  v11 = sub_10001A9E8(v10, (uint64_t)qword_1011B77E8);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.default.getter(v12);
  if (os_log_type_enabled(v12, v13))
  {
    v14 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v14 = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "Cloud data purged, attempting to clear local data", v14, 2u);
    swift_slowDealloc(v14, -1, -1);
  }

  v15 = *(_QWORD *)(v3 + 160);
  v16 = *(void **)(v15 + 16);
  *v9 = v16;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v7 + 104))(v9, enum case for DispatchPredicate.notOnQueue(_:), v6);
  v17 = v16;
  LOBYTE(v16) = _dispatchPreconditionTest(_:)(v9);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v7 + 8))(v9, v6);
  if ((v16 & 1) != 0)
  {
    v19 = dispatch_group_create();
    dispatch_group_enter(v19);
    swift_retain();
    v20 = v19;
    sub_100BD2320(a2 & 1, a1, (NSObject **)v15, v20);
    swift_release(v15);

    QueueSynchronizer.conditionalSync<A>(_:)(sub_100087A38);
    return sub_1007EEF64(6);
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_100086520(uint64_t a1, uint64_t (*a2)(_QWORD), uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint8_t *v22;
  uint64_t v23;
  _BYTE v24[16];
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v8 = a2(0);
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)&v22 - v12;
  v25 = a1;
  v26 = v3;
  OS_dispatch_queue.sync<A>(execute:)(a3, v24, (char *)&type metadata for () + 8);
  if (!v4)
  {
    if (qword_1010E9F80 != -1)
      swift_once(&qword_1010E9F80, sub_1007FA778);
    v14 = type metadata accessor for Logger(0);
    sub_10001A9E8(v14, (uint64_t)qword_1011B77E8);
    v15 = sub_10005972C(v3, (uint64_t)v13, a2);
    v16 = Logger.logObject.getter(v15);
    v17 = static os_log_type_t.default.getter(v16);
    if (os_log_type_enabled(v16, v17))
    {
      v18 = (uint8_t *)swift_slowAlloc(12, -1);
      v23 = swift_slowAlloc(32, -1);
      v29 = v23;
      *(_DWORD *)v18 = 136315138;
      v22 = v18 + 4;
      sub_10005972C((uint64_t)v13, (uint64_t)v11, a2);
      v19 = String.init<A>(describing:)(v11, v8);
      v27 = sub_100016940(v19, v20, &v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, &v28, v22, v18 + 12);
      swift_bridgeObjectRelease();
      sub_1000126B0((uint64_t)v13, a2);
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "New record: %s", v18, 0xCu);
      v21 = v23;
      swift_arrayDestroy(v23, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v21, -1, -1);
      swift_slowDealloc(v18, -1, -1);
    }
    else
    {
      sub_1000126B0((uint64_t)v13, a2);
    }

  }
}

void sub_100086774(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(char *, uint64_t, uint64_t);
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  unint64_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint8_t *v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v5 = *(_QWORD *)(a2 - 8);
  v6 = __chkstk_darwin(a1);
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v23 - v9;
  sub_10088B780(v2, v12, *(_QWORD *)(v11 + 8));
  if (!v3)
  {
    if (qword_1010E9F80 != -1)
      swift_once(&qword_1010E9F80, sub_1007FA778);
    v13 = type metadata accessor for Logger(0);
    sub_10001A9E8(v13, (uint64_t)qword_1011B77E8);
    v14 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v15 = v14(v10, v2, a2);
    v16 = Logger.logObject.getter(v15);
    v17 = static os_log_type_t.default.getter(v16);
    if (os_log_type_enabled(v16, v17))
    {
      v18 = (uint8_t *)swift_slowAlloc(12, -1);
      v25 = swift_slowAlloc(32, -1);
      v28 = v25;
      v24 = v18;
      *(_DWORD *)v18 = 136315138;
      v23 = v18 + 4;
      v14(v8, (uint64_t)v10, a2);
      v19 = String.init<A>(describing:)(v8, a2);
      v26 = sub_100016940(v19, v20, &v28);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27, v23, v18 + 12);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v5 + 8))(v10, a2);
      v21 = v24;
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "New record: %s", v24, 0xCu);
      v22 = v25;
      swift_arrayDestroy(v25, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v22, -1, -1);
      swift_slowDealloc(v21, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v5 + 8))(v10, a2);
    }

  }
}

uint64_t sub_1000869B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v5[21] = a4;
  v5[22] = a5;
  v6 = sub_10001A9A8(&qword_101106E90);
  v5[23] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10001A9A8(&qword_1010ECD00);
  v5[24] = v7;
  v5[25] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100086A34, 0, 0);
}

uint64_t sub_100086A34()
{
  uint64_t v0;
  uint64_t result;
  _QWORD *v2;
  uint64_t (__cdecl *v3)();

  if (qword_1010EA5B0 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v0 + 96, 0, 0);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 56, &qword_1010EE220);
  if (*(_QWORD *)(v0 + 80))
  {
    sub_10000F9FC((__int128 *)(v0 + 56), v0 + 16);
    sub_10001AA44((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
    v3 = (uint64_t (__cdecl *)())((char *)&dword_1010EBBB8 + dword_1010EBBB8);
    v2 = (_QWORD *)swift_task_alloc(unk_1010EBBBC);
    *(_QWORD *)(v0 + 208) = v2;
    *v2 = v0;
    v2[1] = sub_100086B20;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100086B20(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 208);
  *(_QWORD *)(*(_QWORD *)v1 + 216) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100086B7C, 0, 0);
}

uint64_t sub_100086B7C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;

  v1 = *(_QWORD *)(v0 + 216);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
  if (v1)
    return swift_task_switch(sub_100086CA0, *(_QWORD *)(v0 + 216), 0);
  if (qword_1010E9FD0 != -1)
    swift_once(&qword_1010E9FD0, sub_1008973A4);
  v3 = type metadata accessor for Logger(0);
  v4 = sub_10001A9E8(v3, (uint64_t)qword_1011B7860);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.error.getter(v5);
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "No ItemSharingNotificationsService available!", v7, 2u);
    swift_slowDealloc(v7, -1, -1);
  }

  v8 = *(_QWORD *)(v0 + 184);
  swift_task_dealloc(*(_QWORD *)(v0 + 200));
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_100086CA0()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v1 = v0[27];
  v2 = v0[25];
  v3 = v0[22];
  v4 = v2 + *(int *)(v0[24] + 48);
  sub_10000F9B8(v0[21], v2, (uint64_t *)&unk_101111440);
  sub_10005972C(v3, v4, type metadata accessor for MemberSharingCircle);
  swift_beginAccess(v1 + 208, v0 + 15, 0, 0);
  v5 = *(_QWORD *)(*(_QWORD *)(v1 + 208) + 16);
  swift_beginAccess(v1 + 208, v0 + 18, 33, 0);
  if (*(_QWORD *)(*(_QWORD *)(v1 + 208) + 16) < v5)
  {
    __break(1u);
  }
  else
  {
    v6 = v0[23];
    sub_100005CF0(v0[25], v6, &qword_1010ECD00);
    sub_100775A74(v5, v5, v6);
    swift_endAccess(v0 + 18);
    swift_task_switch(sub_100089054, 0, 0);
  }
}

uint64_t sub_100086D98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v5[21] = a4;
  v5[22] = a5;
  v6 = sub_10001A9A8((uint64_t *)&unk_101106E80);
  v5[23] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10001A9A8(&qword_1010ECCF8);
  v5[24] = v7;
  v5[25] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100086E1C, 0, 0);
}

uint64_t sub_100086E1C()
{
  uint64_t v0;
  uint64_t result;
  _QWORD *v2;
  uint64_t (__cdecl *v3)();

  if (qword_1010EA5B0 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v0 + 96, 0, 0);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 56, &qword_1010EE220);
  if (*(_QWORD *)(v0 + 80))
  {
    sub_10000F9FC((__int128 *)(v0 + 56), v0 + 16);
    sub_10001AA44((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
    v3 = (uint64_t (__cdecl *)())((char *)&dword_1010EBBB8 + dword_1010EBBB8);
    v2 = (_QWORD *)swift_task_alloc(unk_1010EBBBC);
    *(_QWORD *)(v0 + 208) = v2;
    *v2 = v0;
    v2[1] = sub_100086F08;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100086F08(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 208);
  *(_QWORD *)(*(_QWORD *)v1 + 216) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100086F64, 0, 0);
}

uint64_t sub_100086F64()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;

  v1 = *(_QWORD *)(v0 + 216);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
  if (v1)
    return swift_task_switch(sub_100087088, *(_QWORD *)(v0 + 216), 0);
  if (qword_1010E9FD0 != -1)
    swift_once(&qword_1010E9FD0, sub_1008973A4);
  v3 = type metadata accessor for Logger(0);
  v4 = sub_10001A9E8(v3, (uint64_t)qword_1011B7860);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.error.getter(v5);
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "No ItemSharingNotificationsService available!", v7, 2u);
    swift_slowDealloc(v7, -1, -1);
  }

  v8 = *(_QWORD *)(v0 + 184);
  swift_task_dealloc(*(_QWORD *)(v0 + 200));
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_100087088()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v1 = v0[27];
  v2 = v0[25];
  v3 = v0[22];
  v4 = v2 + *(int *)(v0[24] + 48);
  sub_10000F9B8(v0[21], v2, &qword_1010EE0E0);
  sub_10005972C(v3, v4, type metadata accessor for OwnerSharingCircle);
  swift_beginAccess(v1 + 224, v0 + 15, 0, 0);
  v5 = *(_QWORD *)(*(_QWORD *)(v1 + 224) + 16);
  swift_beginAccess(v1 + 224, v0 + 18, 33, 0);
  if (*(_QWORD *)(*(_QWORD *)(v1 + 224) + 16) < v5)
  {
    __break(1u);
  }
  else
  {
    v6 = v0[23];
    sub_100005CF0(v0[25], v6, &qword_1010ECCF8);
    sub_100775A90(v5, v5, v6);
    swift_endAccess(v0 + 18);
    swift_task_switch(sub_100089054, 0, 0);
  }
}

uint64_t sub_100087180(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v5[21] = a4;
  v5[22] = a5;
  v6 = sub_10001A9A8((uint64_t *)&unk_101106E70);
  v5[23] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10001A9A8(&qword_1010ECCF0);
  v5[24] = v7;
  v5[25] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100087204, 0, 0);
}

uint64_t sub_100087204()
{
  uint64_t v0;
  uint64_t result;
  _QWORD *v2;
  uint64_t (__cdecl *v3)();

  if (qword_1010EA5B0 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v0 + 96, 0, 0);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 56, &qword_1010EE220);
  if (*(_QWORD *)(v0 + 80))
  {
    sub_10000F9FC((__int128 *)(v0 + 56), v0 + 16);
    sub_10001AA44((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
    v3 = (uint64_t (__cdecl *)())((char *)&dword_1010EBBB8 + dword_1010EBBB8);
    v2 = (_QWORD *)swift_task_alloc(unk_1010EBBBC);
    *(_QWORD *)(v0 + 208) = v2;
    *v2 = v0;
    v2[1] = sub_1000872F0;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000872F0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 208);
  *(_QWORD *)(*(_QWORD *)v1 + 216) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10008734C, 0, 0);
}

uint64_t sub_10008734C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;

  v1 = *(_QWORD *)(v0 + 216);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
  if (v1)
    return swift_task_switch(sub_100087470, *(_QWORD *)(v0 + 216), 0);
  if (qword_1010E9FD0 != -1)
    swift_once(&qword_1010E9FD0, sub_1008973A4);
  v3 = type metadata accessor for Logger(0);
  v4 = sub_10001A9E8(v3, (uint64_t)qword_1011B7860);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.error.getter(v5);
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "No ItemSharingNotificationsService available!", v7, 2u);
    swift_slowDealloc(v7, -1, -1);
  }

  v8 = *(_QWORD *)(v0 + 184);
  swift_task_dealloc(*(_QWORD *)(v0 + 200));
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_100087470()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v1 = v0[27];
  v2 = v0[25];
  v3 = v0[22];
  v4 = v2 + *(int *)(v0[24] + 48);
  sub_10000F9B8(v0[21], v2, (uint64_t *)&unk_1010EE180);
  sub_10005972C(v3, v4, type metadata accessor for SharedBeaconRecord);
  swift_beginAccess(v1 + 216, v0 + 15, 0, 0);
  v5 = *(_QWORD *)(*(_QWORD *)(v1 + 216) + 16);
  swift_beginAccess(v1 + 216, v0 + 18, 33, 0);
  if (*(_QWORD *)(*(_QWORD *)(v1 + 216) + 16) < v5)
  {
    __break(1u);
  }
  else
  {
    v6 = v0[23];
    sub_100005CF0(v0[25], v6, &qword_1010ECCF0);
    sub_100775C84(v5, v5, v6);
    swift_endAccess(v0 + 18);
    swift_task_switch(sub_100087568, 0, 0);
  }
}

uint64_t sub_100087568()
{
  uint64_t v0;
  uint64_t v1;

  swift_release(*(_QWORD *)(v0 + 216));
  v1 = *(_QWORD *)(v0 + 184);
  swift_task_dealloc(*(_QWORD *)(v0 + 200));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000875AC(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = a1[3];
  v2 = a1[4];
  sub_10001AA44(a1, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 448))(v1, v2);
}

void sub_1000875F4(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  void *v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t aBlock[5];
  uint64_t v54;

  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  v50 = *(_QWORD *)(v8 - 8);
  v51 = v8;
  __chkstk_darwin(v8);
  v49 = (char *)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS.QoSClass(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v48 = (char *)&v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1010E9F80 != -1)
    swift_once(&qword_1010E9F80, sub_1007FA778);
  v13 = type metadata accessor for Logger(0);
  sub_10001A9E8(v13, (uint64_t)qword_1011B77E8);
  v14 = swift_retain_n(a1, 2);
  v15 = Logger.logObject.getter(v14);
  v16 = static os_log_type_t.default.getter(v15);
  if (os_log_type_enabled(v15, v16))
  {
    v45 = v11;
    v17 = swift_slowAlloc(12, -1);
    v46 = v10;
    v18 = (uint8_t *)v17;
    v19 = swift_slowAlloc(32, -1);
    v44 = a2;
    v20 = v19;
    v52 = a1;
    aBlock[0] = v19;
    *(_DWORD *)v18 = 136446210;
    v21 = type metadata accessor for CloudKitCoordinator();
    v47 = v7;
    v22 = v5;
    v23 = v4;
    v24 = v21;
    swift_retain();
    v25 = String.init<A>(describing:)(&v52, v24);
    v27 = v26;
    v52 = (_QWORD *)sub_100016940(v25, v26, aBlock);
    v11 = v45;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, aBlock, v18 + 4, v18 + 12);
    swift_release_n(a1, 2);
    v28 = v27;
    v4 = v23;
    v5 = v22;
    v7 = v47;
    swift_bridgeObjectRelease(v28);
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "CloudKitCoordinator available again after reset: %{public}s", v18, 0xCu);
    swift_arrayDestroy(v20, 1, (char *)&type metadata for Any + 8);
    v29 = v20;
    a2 = v44;
    swift_slowDealloc(v29, -1, -1);
    v30 = v18;
    v10 = v46;
    swift_slowDealloc(v30, -1, -1);

  }
  else
  {

    swift_release_n(a1, 2);
  }
  v31 = a2 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_resetHandler;
  v32 = *(_QWORD *)(a2 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_resetHandler);
  if (v32)
  {
    v33 = *(_QWORD *)(v31 + 8);
    sub_10000F4A0(0, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr);
    v34 = v48;
    (*(void (**)(char *, _QWORD, uint64_t))(v11 + 104))(v48, enum case for DispatchQoS.QoSClass.default(_:), v10);
    swift_retain();
    v35 = (void *)static OS_dispatch_queue.global(qos:)(v34);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v34, v10);
    v36 = swift_allocObject(&unk_1010534F8, 32, 7);
    *(_QWORD *)(v36 + 16) = v32;
    *(_QWORD *)(v36 + 24) = v33;
    aBlock[4] = (uint64_t)sub_10001D858;
    v54 = v36;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_100016FB8;
    aBlock[3] = (uint64_t)&unk_101053510;
    v37 = _Block_copy(aBlock);
    v38 = swift_retain();
    v39 = v49;
    static DispatchQoS.unspecified.getter(v38);
    v52 = _swiftEmptyArrayStorage;
    v40 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v41 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v42 = sub_10001371C();
    dispatch thunk of SetAlgebra.init<A>(_:)(&v52, v41, v42, v4, v40);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v39, v7, v37);
    _Block_release(v37);

    sub_10001D8A8(v32, v33);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    (*(void (**)(char *, uint64_t))(v50 + 8))(v39, v51);
    swift_release(v54);
  }
}

uint64_t sub_100087A38()
{
  uint64_t v0;

  return sub_1008270B8(v0);
}

uint64_t sub_100087A50(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  void *v7;
  uint64_t v8;
  unint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  id v12;
  void *v13;
  id v14;
  id v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  id v20;
  NSObject *v21;
  os_log_type_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  char v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  char v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;

  if (qword_1010E9F80 != -1)
    swift_once(&qword_1010E9F80, sub_1007FA778);
  v2 = type metadata accessor for Logger(0);
  sub_10001A9E8(v2, (uint64_t)qword_1011B77E8);
  swift_bridgeObjectRetain(a1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v6 = 134217984;
    v35 = *(_QWORD *)(a1 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, &v36, v6 + 4, v6 + 12);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "databaseUpdated recordsDeleted: %ld.", v6, 0xCu);
    swift_slowDealloc(v6, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease();
  }
  v7 = &_swiftEmptySetSingleton;
  v37 = &_swiftEmptySetSingleton;
  v8 = *(_QWORD *)(a1 + 16);
  if (v8)
  {
    sub_10000F4A0(0, (unint64_t *)&unk_10110FFC0, CKRecordZoneID_ptr);
    swift_bridgeObjectRetain(a1);
    v9 = (unint64_t *)(a1 + 48);
    do
    {
      v10 = *(v9 - 1);
      v11 = *v9;
      v12 = (id)*(v9 - 2);
      swift_bridgeObjectRetain(v11);
      v13 = objc_autoreleasePoolPush();
      v14 = objc_msgSend(v12, "zoneID");
      if (qword_1010E9F98 != -1)
        swift_once(&qword_1010E9F98, sub_1007FDE50);
      v15 = (id)qword_1011B7830;
      v16 = static NSObject.== infix(_:_:)(v15, v14);

      if ((v16 & 1) != 0)
      {
        v17 = sub_100082C9C(v12, v10, v11);
        if ((v19 & 1) != 0)
        {
          sub_10008805C(v17, v18, 1);
        }
        else
        {
          sub_100A092C0(&v35, v17, v18);
          swift_bridgeObjectRelease();
        }
      }
      else
      {
        v20 = v12;
        v21 = Logger.logObject.getter(v20);
        v22 = static os_log_type_t.error.getter(v21);
        if (os_log_type_enabled(v21, v22))
        {
          v23 = swift_slowAlloc(12, -1);
          v24 = (_QWORD *)swift_slowAlloc(8, -1);
          *(_DWORD *)v23 = 138543362;
          *(_QWORD *)(v23 + 4) = v20;
          *v24 = v20;
          _os_log_impl((void *)&_mh_execute_header, v21, v22, "Ignoring delete record from unknown zone: %{public}@", (uint8_t *)v23, 0xCu);
          v25 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
          swift_arrayDestroy(v24, 1, v25);
          swift_slowDealloc(v24, -1, -1);
          swift_slowDealloc(v23, -1, -1);

        }
        else
        {

        }
      }
      v9 += 3;
      objc_autoreleasePoolPop(v13);
      swift_bridgeObjectRelease();

      --v8;
    }
    while (v8);
    swift_bridgeObjectRelease();
    QueueSynchronizer.conditionalSync<A>(_:)(sub_100087A38);
    sub_1007EEF64(7);
    v7 = v37;
  }
  swift_bridgeObjectRetain(v7);
  v26 = sub_100A06590(0x61636F4C65666153, 0xEC0000006E6F6974, (uint64_t)v7);
  swift_bridgeObjectRelease();
  if ((v26 & 1) != 0)
  {
    dispatch thunk of DarwinNotificationHelper.post(bypassRateLimit:)(0);
    type metadata accessor for Transaction(0);
    static Transaction.asyncTask(name:block:)("BeaconStore.canBeLeashedByHostStateChanged", 42, 2, &unk_10110A988, 0);
    sub_1007EF200();
  }
  else
  {
    swift_bridgeObjectRetain(v7);
    v27 = sub_100A06590(0x636552687361654CLL, 0xEB0000000064726FLL, (uint64_t)v7);
    swift_bridgeObjectRelease();
    if ((v27 & 1) != 0)
    {
      dispatch thunk of DarwinNotificationHelper.post(bypassRateLimit:)(0);
      type metadata accessor for Transaction(0);
      static Transaction.asyncTask(name:block:)("BeaconStore.canBeLeashedByHostStateChanged", 42, 2, &unk_10110A988, 0);
    }
  }
  v28 = qword_1010EA0D0;
  swift_bridgeObjectRetain(v7);
  if (v28 != -1)
    swift_once(&qword_1010EA0D0, sub_1009A3038);
  v29 = qword_1011B7A98;
  v30 = unk_1011B7AA0;
  swift_bridgeObjectRetain(unk_1011B7AA0);
  LOBYTE(v29) = sub_100A06590(v29, v30, (uint64_t)v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v29 & 1) != 0
    || (swift_bridgeObjectRetain(v7),
        v31 = sub_100A06590(0xD000000000000012, 0x8000000100EC6D20, (uint64_t)v7),
        swift_bridgeObjectRelease(),
        (v31 & 1) != 0)
    || (swift_bridgeObjectRetain(v7),
        v32 = sub_100A06590(0xD000000000000012, 0x8000000100EC6D40, (uint64_t)v7),
        swift_bridgeObjectRelease(),
        (v32 & 1) != 0))
  {
    type metadata accessor for Transaction(0);
    static Transaction.named<A>(_:with:)("com.apple.searchpartyd.triggerSiriDeviceNameSync", 48, 2, sub_100088044, v34);
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_100088044(uint64_t a1)
{
  uint64_t v1;

  return sub_10082768C(a1, v1);
}

uint64_t sub_10008805C(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_errorRelease(a1);
  else
    return swift_bridgeObjectRelease(a2);
}

unint64_t sub_10008806C()
{
  unint64_t result;

  result = qword_1010F4720;
  if (!qword_1010F4720)
  {
    result = swift_getWitnessTable(&unk_100E5179C, &type metadata for BeaconStore.BeaconStoreError);
    atomic_store(result, (unint64_t *)&qword_1010F4720);
  }
  return result;
}

uint64_t sub_1000880B0@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;

  return sub_100886FE8(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t sub_1000880C8(uint64_t a1)
{
  return sub_100088124(a1);
}

uint64_t sub_1000880DC(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = a1[3];
  v2 = a1[4];
  sub_10001AA44(a1, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 448))(v1, v2);
}

uint64_t sub_100088124(uint64_t a1)
{
  uint64_t v1;

  return sub_10083BE0C(a1, *(void (**)(_QWORD, _QWORD, _QWORD, _QWORD))(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(unsigned __int8 *)(v1 + 40), *(unsigned __int8 *)(v1 + 41));
}

uint64_t sub_100088148(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  unint64_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  void *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  char v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  char v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;

  v2 = v1;
  v30 = &_swiftEmptySetSingleton;
  if (qword_1010E9F80 != -1)
    goto LABEL_30;
  while (1)
  {
    v4 = type metadata accessor for Logger(0);
    sub_10001A9E8(v4, (uint64_t)qword_1011B77E8);
    v5 = swift_bridgeObjectRetain_n(a1, 2);
    v6 = Logger.logObject.getter(v5);
    v7 = static os_log_type_t.default.getter(v6);
    v8 = (unint64_t)a1 >> 62;
    if (os_log_type_enabled(v6, v7))
    {
      v9 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v9 = 134217984;
      if (v8)
      {
        v27 = a1 < 0 ? a1 : a1 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(a1);
        v10 = _CocoaArrayWrapper.endIndex.getter(v27);
        swift_bridgeObjectRelease();
      }
      else
      {
        v10 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
      }
      swift_bridgeObjectRelease();
      v28 = v10;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29, v9 + 4, v9 + 12);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "databaseUpdated recordsChanged: processed %ld change records.", v9, 0xCu);
      swift_slowDealloc(v9, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(a1, 2);
    }
    if (v8)
    {
      v26 = a1 < 0 ? a1 : a1 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(a1);
      v11 = _CocoaArrayWrapper.endIndex.getter(v26);
    }
    else
    {
      v11 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(a1);
    }
    if (!v11)
      break;
    v12 = 4;
    while (1)
    {
      v13 = (a1 & 0xC000000000000001) != 0
          ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v12 - 4, a1)
          : *(id *)(a1 + 8 * v12);
      v14 = v13;
      v15 = v12 - 3;
      if (__OFADD__(v12 - 4, 1))
        break;
      v16 = objc_autoreleasePoolPush();
      sub_100084CE0(v14);
      objc_autoreleasePoolPop(v16);

      ++v12;
      if (v15 == v11)
      {
        swift_bridgeObjectRelease();
        QueueSynchronizer.conditionalSync<A>(_:)(sub_100087A38);
        sub_1007EEF64(7);
        v17 = v30;
        goto LABEL_18;
      }
    }
    __break(1u);
LABEL_30:
    swift_once(&qword_1010E9F80, sub_1007FA778);
  }
  swift_bridgeObjectRelease();
  v17 = &_swiftEmptySetSingleton;
LABEL_18:
  swift_bridgeObjectRetain(v17);
  v18 = sub_100A06590(0x61636F4C65666153, 0xEC0000006E6F6974, (uint64_t)v17);
  swift_bridgeObjectRelease();
  if ((v18 & 1) != 0)
  {
    dispatch thunk of DarwinNotificationHelper.post(bypassRateLimit:)(0);
    type metadata accessor for Transaction(0);
    static Transaction.asyncTask(name:block:)("BeaconStore.canBeLeashedByHostStateChanged", 42, 2, &unk_10110A988, 0);
    sub_1007EF200();
  }
  else
  {
    swift_bridgeObjectRetain(v17);
    v19 = sub_100A06590(0x636552687361654CLL, 0xEB0000000064726FLL, (uint64_t)v17);
    swift_bridgeObjectRelease();
    if ((v19 & 1) != 0)
    {
      dispatch thunk of DarwinNotificationHelper.post(bypassRateLimit:)(0);
      type metadata accessor for Transaction(0);
      static Transaction.asyncTask(name:block:)("BeaconStore.canBeLeashedByHostStateChanged", 42, 2, &unk_10110A988, 0);
    }
  }
  v20 = qword_1010EA0D0;
  swift_bridgeObjectRetain(v17);
  if (v20 != -1)
    swift_once(&qword_1010EA0D0, sub_1009A3038);
  v21 = qword_1011B7A98;
  v22 = unk_1011B7AA0;
  swift_bridgeObjectRetain(unk_1011B7AA0);
  LOBYTE(v21) = sub_100A06590(v21, v22, (uint64_t)v17);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v21 & 1) != 0
    || (swift_bridgeObjectRetain(v17),
        v23 = sub_100A06590(0xD000000000000012, 0x8000000100EC6D20, (uint64_t)v17),
        swift_bridgeObjectRelease(),
        (v23 & 1) != 0)
    || (swift_bridgeObjectRetain(v17),
        v24 = sub_100A06590(0xD000000000000012, 0x8000000100EC6D40, (uint64_t)v17),
        swift_bridgeObjectRelease(),
        (v24 & 1) != 0))
  {
    type metadata accessor for Transaction(0);
    static Transaction.named<A>(_:with:)("com.apple.searchpartyd.triggerSiriDeviceNameSync", 48, 2, sub_100088044, v2);
  }
  return swift_bridgeObjectRelease();
}

unint64_t sub_100088600()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1010ED720;
  if (!qword_1010ED720)
  {
    v1 = sub_10000F4A0(255, (unint64_t *)&qword_1010ED8E0, CKRecord_ptr);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for NSObject, v1);
    atomic_store(result, (unint64_t *)&qword_1010ED720);
  }
  return result;
}

uint64_t sub_100088658()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t);
  uint64_t v22;

  v1 = *(_QWORD *)(sub_10001A9A8((uint64_t *)&unk_101111440) - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 32) & ~v2;
  v4 = *(_QWORD *)(v1 + 64);
  v5 = (int *)type metadata accessor for MemberSharingCircle(0);
  v6 = *((_QWORD *)v5 - 1);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = *(_QWORD *)(v6 + 64);
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  v9 = v0 + v3;
  if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(v6 + 48))(v0 + v3, 1, v5))
  {
    sub_10001BC14(*(_QWORD *)v9, *(_QWORD *)(v9 + 8));
    v10 = v9 + v5[5];
    v22 = v4;
    v11 = type metadata accessor for UUID(0);
    v12 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8);
    v12(v10, v11);
    v12(v9 + v5[6], v11);
    v12(v9 + v5[7], v11);
    v13 = v11;
    v4 = v22;
    v12(v9 + v5[8], v13);
    swift_bridgeObjectRelease();
  }
  v14 = v2 | v7 | 7;
  v15 = (v3 + v4 + v7) & ~v7;
  v16 = v15 + v8;
  v17 = v0 + v15;
  sub_10001BC14(*(_QWORD *)(v0 + v15), *(_QWORD *)(v0 + v15 + 8));
  v18 = v17 + v5[5];
  v19 = type metadata accessor for UUID(0);
  v20 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 8);
  v20(v18, v19);
  v20(v17 + v5[6], v19);
  v20(v17 + v5[7], v19);
  v20(v17 + v5[8], v19);
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, v16, v14);
}

uint64_t sub_1000887FC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v4 = *(_QWORD *)(sub_10001A9A8((uint64_t *)&unk_101111440) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = *(_QWORD *)(v4 + 64);
  v7 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for MemberSharingCircle(0) - 8) + 80);
  v8 = v5 + v6 + v7;
  v9 = *(_QWORD *)(v1 + 16);
  v10 = *(_QWORD *)(v1 + 24);
  v11 = v1 + v5;
  v12 = v1 + (v8 & ~v7);
  v13 = (_QWORD *)swift_task_alloc(dword_1010ECCC4);
  *(_QWORD *)(v2 + 16) = v13;
  *v13 = v2;
  v13[1] = sub_100004A74;
  return sub_1000869B0(a1, v9, v10, v11, v12);
}

uint64_t sub_1000888B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t);
  uint64_t v22;

  v1 = *(_QWORD *)(sub_10001A9A8(&qword_1010EE0E0) - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 32) & ~v2;
  v4 = *(_QWORD *)(v1 + 64);
  v5 = type metadata accessor for OwnerSharingCircle(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = *(_QWORD *)(v6 + 64);
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  v9 = v0 + v3;
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v0 + v3, 1, v5))
  {
    sub_10001BC14(*(_QWORD *)v9, *(_QWORD *)(v9 + 8));
    v10 = v9 + *(int *)(v5 + 20);
    v22 = v4;
    v11 = type metadata accessor for UUID(0);
    v12 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8);
    v12(v10, v11);
    v13 = v11;
    v4 = v22;
    v12(v9 + *(int *)(v5 + 24), v13);
    swift_bridgeObjectRelease();
  }
  v14 = v2 | v7 | 7;
  v15 = (v3 + v4 + v7) & ~v7;
  v16 = v15 + v8;
  v17 = v0 + v15;
  sub_10001BC14(*(_QWORD *)(v0 + v15), *(_QWORD *)(v0 + v15 + 8));
  v18 = v17 + *(int *)(v5 + 20);
  v19 = type metadata accessor for UUID(0);
  v20 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 8);
  v20(v18, v19);
  v20(v17 + *(int *)(v5 + 24), v19);
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, v16, v14);
}

uint64_t sub_100088A18(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v4 = *(_QWORD *)(sub_10001A9A8(&qword_1010EE0E0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = *(_QWORD *)(v4 + 64);
  v7 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for OwnerSharingCircle(0) - 8) + 80);
  v8 = v5 + v6 + v7;
  v9 = *(_QWORD *)(v1 + 16);
  v10 = *(_QWORD *)(v1 + 24);
  v11 = v1 + v5;
  v12 = v1 + (v8 & ~v7);
  v13 = (_QWORD *)swift_task_alloc(dword_1010ECCD4);
  *(_QWORD *)(v2 + 16) = v13;
  *v13 = v2;
  v13[1] = sub_100004A74;
  return sub_100086D98(a1, v9, v10, v11, v12);
}

uint64_t sub_100088AD0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int (*v17)(uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int (*v28)(uint64_t, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;

  v1 = *(_QWORD *)(sub_10001A9A8((uint64_t *)&unk_1010EE180) - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 32) & ~v2;
  v4 = *(_QWORD *)(v1 + 64);
  v5 = (int *)type metadata accessor for SharedBeaconRecord(0);
  v6 = *((_QWORD *)v5 - 1);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = (v3 + v4 + v7) & ~v7;
  v33 = *(_QWORD *)(v6 + 64);
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  v9 = v0 + v3;
  if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(v6 + 48))(v0 + v3, 1, v5))
  {
    sub_10001BC14(*(_QWORD *)v9, *(_QWORD *)(v9 + 8));
    v10 = v9 + v5[5];
    v11 = type metadata accessor for UUID(0);
    v12 = *(_QWORD *)(v11 - 8);
    v13 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
    v13(v10, v11);
    v13(v9 + v5[6], v11);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v14 = v9 + v5[18];
    v15 = type metadata accessor for Date(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v14, v15);
    v16 = v9 + v5[19];
    v17 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    if (!v17(v16, 1, v11))
      v13(v16, v11);
    v18 = v9 + v5[20];
    v19 = type metadata accessor for SharedBeaconRecord.PropertyListContent(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 48))(v18, 1, v19))
    {
      v20 = v18 + *(int *)(v19 + 20);
      if (!v17(v20, 1, v11))
        v13(v20, v11);
    }
  }
  sub_10001BC14(*(_QWORD *)(v0 + v8), *(_QWORD *)(v0 + v8 + 8));
  v21 = v0 + v8 + v5[5];
  v22 = type metadata accessor for UUID(0);
  v23 = *(_QWORD *)(v22 - 8);
  v24 = *(void (**)(uint64_t, uint64_t))(v23 + 8);
  v24(v21, v22);
  v24(v0 + v8 + v5[6], v22);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v25 = v0 + v8 + v5[18];
  v26 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 8))(v25, v26);
  v27 = v0 + v8 + v5[19];
  v28 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v23 + 48);
  if (!v28(v27, 1, v22))
    v24(v27, v22);
  v29 = v0 + v8 + v5[20];
  v30 = type metadata accessor for SharedBeaconRecord.PropertyListContent(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 48))(v29, 1, v30))
  {
    v31 = v29 + *(int *)(v30 + 20);
    if (!v28(v31, 1, v22))
      v24(v31, v22);
  }
  return swift_deallocObject(v0, v8 + v33, v2 | v7 | 7);
}

uint64_t sub_100088DE4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v4 = *(_QWORD *)(sub_10001A9A8((uint64_t *)&unk_1010EE180) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = *(_QWORD *)(v4 + 64);
  v7 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for SharedBeaconRecord(0) - 8) + 80);
  v8 = v5 + v6 + v7;
  v9 = *(_QWORD *)(v1 + 16);
  v10 = *(_QWORD *)(v1 + 24);
  v11 = v1 + v5;
  v12 = v1 + (v8 & ~v7);
  v13 = (_QWORD *)swift_task_alloc(dword_1010ECCE4);
  *(_QWORD *)(v2 + 16) = v13;
  *v13 = v2;
  v13[1] = sub_100004C28;
  return sub_100087180(a1, v9, v10, v11, v12);
}

void sub_100088E9C()
{
  uint64_t v0;

  sub_1007AD39C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

void sub_100088EB4()
{
  uint64_t v0;

  sub_1007AC9CC(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

void sub_100088ECC()
{
  uint64_t v0;

  sub_1007ABFFC(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

void sub_100088EE4()
{
  uint64_t v0;

  sub_1007AB5C4(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

void sub_100088EFC()
{
  uint64_t v0;

  sub_1007AAB80(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

void sub_100088F14()
{
  uint64_t v0;

  sub_1007AA148(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

void sub_100088F2C()
{
  uint64_t v0;

  sub_1007A9778(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

void sub_100088F44()
{
  uint64_t v0;

  sub_1007A8DA8(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

void sub_100088F5C()
{
  uint64_t v0;

  sub_1007A8370(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

void sub_100088F74()
{
  uint64_t v0;

  sub_1007A82E4(*(_QWORD *)(v0 + 16), *(_QWORD **)(v0 + 24));
}

void sub_100088F8C()
{
  uint64_t v0;

  sub_1007A78B8(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

void sub_100088FA4()
{
  uint64_t v0;

  sub_1007A6EE8(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

void sub_100088FBC()
{
  uint64_t v0;

  sub_1007A6518(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

void sub_100088FD4()
{
  uint64_t v0;

  sub_1007A5B48(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

void sub_100088FEC()
{
  uint64_t v0;

  sub_1007A5178(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

void sub_100089004()
{
  uint64_t v0;

  sub_1007A474C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_10008901C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100089040@<X0>(_BYTE *a1@<X8>)
{
  return sub_1000880B0(a1);
}

uint64_t sub_100089058(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_100089090 + 4 * byte_100E232B0[a1]))(0xD000000000000011, 0x8000000100EC29E0);
}

uint64_t sub_1000890D8()
{
  return 0x6544654D41746F6ELL;
}

uint64_t sub_1000890F8()
{
  return 0x6F4E656369766564;
}

void sub_10008911C()
{
  char *v0;

  sub_10051FA78(*v0);
}

void sub_100089124(uint64_t a1)
{
  char *v1;

  sub_100515058(a1, *v1);
}

void sub_10008912C(uint64_t a1)
{
  char *v1;

  sub_100516260(a1, *v1);
}

unint64_t sub_100089134@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_100089DC4(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_100089160@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_100089058(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

void sub_100089188(char *a1)
{
  sub_1005112EC(*a1);
}

uint64_t sub_100089194(char a1)
{
  if (a1 == 6)
    return 1701736302;
  if (a1 != 7)
    __asm { BR              X10 }
  return 0x64656C62616E65;
}

uint64_t sub_100089234(uint64_t a1)
{
  unint64_t v1;
  uint64_t v3;

  v1 = 0x8000000100EC2A00;
  String.append(_:)(*(Swift::String *)&a1);
  swift_bridgeObjectRelease(0x8000000100EC2A00);
  return v3;
}

void sub_1000892E4(unsigned __int8 *a1, char *a2)
{
  int v2;
  char v3;

  v2 = *a1;
  v3 = *a2;
  if (v2 != 7 && v2 != 6 && (v3 & 0xFE) != 6)
    sub_1005112EC(v2);
}

uint64_t sub_100089330()
{
  char *v0;

  return sub_100089194(*v0);
}

_QWORD *sub_100089338()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t ObjectType;

  v1 = v0[9];
  ObjectType = swift_getObjectType(v0[8]);
  (*(void (**)(uint64_t, uint64_t))(v1 + 56))(ObjectType, v1);
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 3);
  swift_unknownObjectRelease(v0[8]);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_1000893AC()
{
  uint64_t v0;

  sub_100089338();
  return swift_deallocClassInstance(v0, 104, 7);
}

uint64_t type metadata accessor for SeparationMonitoringStateDecider()
{
  return objc_opt_self(_TtC12searchpartyd32SeparationMonitoringStateDecider);
}

uint64_t sub_1000893EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t ObjectType;

  v1 = *(_QWORD *)(v0 + 72);
  ObjectType = swift_getObjectType(*(_QWORD *)(v0 + 64));
  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 48))(ObjectType, v1);
}

void sub_100089428(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  id v4;
  uint64_t v5;

  if ((unint64_t)a3 <= 1)
    v3 = 1;
  else
    v3 = (uint64_t)a3;
  v5 = v3;
  v4 = a3;
  CurrentValueSubject.send(_:)(&v5);

}

uint64_t sub_10008946C(uint64_t a1, uint64_t a2, unsigned int a3)
{
  return sub_10008A1C8(a3);
}

uint64_t sub_100089474()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t ObjectType;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD v51[3];
  uint64_t v52;

  v1 = v0;
  v2 = sub_10001A9A8(&qword_1010ECF00);
  v44 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v4 = (char *)&v43 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10001A9A8(&qword_1010ECF08);
  v45 = *(_QWORD *)(v5 - 8);
  v46 = v5;
  __chkstk_darwin(v5);
  v7 = (char *)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A9A8(&qword_1010ECF10);
  v47 = *(_QWORD *)(v8 - 8);
  v48 = v8;
  __chkstk_darwin(v8);
  v10 = (char *)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10001A9A8(&qword_1010ECF18);
  v49 = *(_QWORD *)(v11 - 8);
  v50 = v11;
  __chkstk_darwin(v11);
  v13 = (char *)&v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = v0[9];
  ObjectType = swift_getObjectType(v0[8]);
  (*(void (**)(uint64_t, uint64_t))(v14 + 48))(ObjectType, v14);
  if (qword_1010E9F10 != -1)
    swift_once(&qword_1010E9F10, sub_10075AEB4);
  v16 = type metadata accessor for Logger(0);
  v17 = sub_10001A9E8(v16, (uint64_t)qword_1011B75D0);
  v18 = Logger.logObject.getter(v17);
  v19 = static os_log_type_t.default.getter(v18);
  if (os_log_type_enabled(v18, v19))
  {
    v20 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v20 = 0;
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "Starting Separation Monitoring support observer.", v20, 2u);
    swift_slowDealloc(v20, -1, -1);
  }

  v51[0] = v1[13];
  v21 = swift_allocObject(&unk_101053688, 32, 7);
  *(_QWORD *)(v21 + 16) = sub_10008A384;
  *(_QWORD *)(v21 + 24) = v1;
  swift_retain();
  swift_retain();
  v22 = sub_10001A9A8((uint64_t *)&unk_101107EA0);
  v23 = sub_1000193A4(&qword_1010ECF20, (uint64_t *)&unk_101107EA0, (const char *)&protocol conformance descriptor for AnyPublisher<A, B>);
  Publisher.map<A>(_:)(sub_10008A3AC, v21, v22, &type metadata for Int, v23);
  swift_release();
  swift_release();
  v24 = sub_1000193A4(&qword_1010ECF28, &qword_1010ECF00, (const char *)&protocol conformance descriptor for Publishers.Map<A, B>);
  Publisher<>.removeDuplicates()(v2, v24, &protocol witness table for Int);
  (*(void (**)(char *, uint64_t))(v44 + 8))(v4, v2);
  v51[0] = v1[2];
  v52 = v1[10];
  v25 = sub_10001A9A8(&qword_1011194D0);
  v26 = sub_10001A9A8(&qword_1010ECF30);
  v27 = sub_1000193A4(&qword_1010ECF38, &qword_1010ECF08, (const char *)&protocol conformance descriptor for Publishers.RemoveDuplicates<A>);
  v28 = sub_1000193A4(&qword_101108430, &qword_1011194D0, (const char *)&protocol conformance descriptor for AnyPublisher<A, B>);
  v29 = sub_1000193A4(&qword_1010ECF40, &qword_1010ECF30, (const char *)&protocol conformance descriptor for CurrentValueSubject<A, B>);
  v30 = v46;
  Publisher.combineLatest<A, B>(_:_:)(v51, &v52, v46, v25, v26, v27, v28, v29);
  (*(void (**)(char *, uint64_t))(v45 + 8))(v7, v30);
  v31 = swift_allocObject(&unk_1010536B0, 32, 7);
  *(_QWORD *)(v31 + 16) = sub_10008A3D8;
  *(_QWORD *)(v31 + 24) = v1;
  v32 = sub_1000193A4(&qword_1010ECF48, &qword_1010ECF10, (const char *)&protocol conformance descriptor for Publishers.CombineLatest3<A, B, C>);
  swift_retain();
  v33 = v48;
  Publisher.map<A>(_:)(sub_10008A3DC, v31, v48, &type metadata for SeparationMonitoringStateDecider.SeparationMonitoringPolicy, v32);
  swift_release();
  (*(void (**)(char *, uint64_t))(v47 + 8))(v10, v33);
  v34 = v1[11];
  v35 = sub_10001A9A8(&qword_1010ECF50);
  v36 = sub_1000193A4(&qword_1010ECF58, &qword_1010ECF18, (const char *)&protocol conformance descriptor for Publishers.Map<A, B>);
  v37 = sub_1000193A4(&qword_1010ECF60, &qword_1010ECF50, (const char *)&protocol conformance descriptor for CurrentValueSubject<A, B>);
  v38 = v50;
  Publisher.subscribe<A>(_:)(v34, v50, v35, v36, v37);
  (*(void (**)(char *, uint64_t))(v49 + 8))(v13, v38);
  v39 = v1 + 12;
  swift_beginAccess(v39, v51, 33, 0);
  v40 = sub_10001A9A8(&qword_1010ECF68);
  v41 = sub_1000193A4(&qword_1010ECF70, &qword_1010ECF68, (const char *)&protocol conformance descriptor for [A]);
  AnyCancellable.store<A>(in:)(v39, v40, v41);
  swift_endAccess(v51);
  return swift_release();
}

uint64_t sub_1000899B0()
{
  uint64_t v0;

  return swift_release(*(_QWORD *)(v0 + 104));
}

uint64_t sub_1000899B8()
{
  uint64_t v0;

  sub_100089338();
  swift_release();
  return swift_deallocClassInstance(v0, 112, 7);
}

uint64_t type metadata accessor for SeparationMonitoringStateDecider.iOS()
{
  return objc_opt_self(_TtCC12searchpartyd32SeparationMonitoringStateDeciderP33_5FF67E81B2D226E34BAB91234E3112BF3iOS);
}

uint64_t getEnumTagSinglePayload for SeparationMonitoringStateDecider.SeparationMonitoringPolicy(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int v6;
  unsigned int v7;

  if (!a2)
    return 0;
  if (a2 < 0xF9)
  {
    v6 = *a1;
    if (v6 >= 6)
      v7 = v6 - 5;
    else
      v7 = 0;
    if (v7 >= 3)
      return v7 - 2;
    else
      return 0;
  }
  else
  {
    v2 = a2 + 7;
    if (a2 + 7 >= 0xFFFF00)
      v3 = 4;
    else
      v3 = 2;
    if (v2 >> 8 < 0xFF)
      v3 = 1;
    if (v2 >= 0x100)
      v4 = v3;
    else
      v4 = 0;
    return ((uint64_t (*)(void))((char *)&loc_100089A50 + 4 * byte_100E232BC[v4]))();
  }
}

uint64_t storeEnumTagSinglePayload for SeparationMonitoringStateDecider.SeparationMonitoringPolicy(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  unsigned int v3;
  int v4;
  uint64_t v5;

  v3 = a3 + 7;
  if (a3 + 7 >= 0xFFFF00)
    v4 = 4;
  else
    v4 = 2;
  if (v3 >> 8 < 0xFF)
    v4 = 1;
  if (v3 >= 0x100)
    LODWORD(v5) = v4;
  else
    LODWORD(v5) = 0;
  if (a3 >= 0xF9)
    v5 = v5;
  else
    v5 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_100089AFC + 4 * byte_100E232C6[v5]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_100089B30 + 4 * byte_100E232C1[v5]))();
}

uint64_t sub_100089B30(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100089B38(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100089B40);
  return result;
}

uint64_t sub_100089B4C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100089B54);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_100089B58(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100089B60(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100089B6C(unsigned __int8 *a1)
{
  unsigned int v1;

  v1 = *a1;
  if (v1 >= 6)
    return v1 - 5;
  else
    return 0;
}

_BYTE *sub_100089B80(_BYTE *result, int a2)
{
  if (a2)
    *result = a2 + 5;
  return result;
}

ValueMetadata *type metadata accessor for SeparationMonitoringStateDecider.SeparationMonitoringPolicy()
{
  return &type metadata for SeparationMonitoringStateDecider.SeparationMonitoringPolicy;
}

_QWORD *initializeBufferWithCopyOfBuffer for SeparationMonitoringStateDecider.CurrentLocationState(_QWORD *a1, void **a2)
{
  void *v3;
  id v4;

  v3 = *a2;
  if ((unint64_t)*a2 >= 0xFFFFFFFF)
    v4 = v3;
  *a1 = v3;
  return a1;
}

void destroy for SeparationMonitoringStateDecider.CurrentLocationState(void **a1)
{
  void *v1;

  v1 = *a1;
  if ((unint64_t)v1 >= 0xFFFFFFFF)

}

void **assignWithCopy for SeparationMonitoringStateDecider.CurrentLocationState(void **a1, void **a2)
{
  void *v3;
  void *v4;
  id v5;
  id v6;

  v3 = *a1;
  v4 = *a2;
  if ((unint64_t)*a1 < 0xFFFFFFFF)
  {
    if ((unint64_t)v4 >= 0xFFFFFFFF)
    {
      *a1 = v4;
      v6 = v4;
      return a1;
    }
LABEL_7:
    *a1 = v4;
    return a1;
  }
  if ((unint64_t)v4 < 0xFFFFFFFF)
  {

    v4 = *a2;
    goto LABEL_7;
  }
  *a1 = v4;
  v5 = v4;

  return a1;
}

void **assignWithTake for SeparationMonitoringStateDecider.CurrentLocationState(void **a1, unint64_t *a2)
{
  void *v3;
  unint64_t v4;

  v3 = *a1;
  v4 = *a2;
  if ((unint64_t)*a1 < 0xFFFFFFFF)
    goto LABEL_6;
  if (v4 < 0xFFFFFFFF)
  {

LABEL_6:
    *a1 = (void *)v4;
    return a1;
  }
  *a1 = (void *)v4;

  return a1;
}

uint64_t getEnumTagSinglePayload for SeparationMonitoringStateDecider.CurrentLocationState(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFD && *((_BYTE *)a1 + 8))
    return (*(_DWORD *)a1 + 2147483645);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 + 1;
  v5 = v3 - 2;
  if (v4 >= 4)
    return v5;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for SeparationMonitoringStateDecider.CurrentLocationState(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 >= 0x7FFFFFFD)
  {
    *(_QWORD *)result = 0;
    *(_DWORD *)result = a2 - 2147483645;
    if (a3 >= 0x7FFFFFFD)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFD)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_QWORD *)result = a2 + 2;
  }
  return result;
}

uint64_t sub_100089D7C(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

_QWORD *sub_100089D94(_QWORD *result, int a2)
{
  unsigned int v2;

  if (a2 < 0)
  {
    v2 = a2 ^ 0x80000000;
  }
  else
  {
    if (!a2)
      return result;
    v2 = a2 - 1;
  }
  *result = v2;
  return result;
}

ValueMetadata *type metadata accessor for SeparationMonitoringStateDecider.CurrentLocationState()
{
  return &type metadata for SeparationMonitoringStateDecider.CurrentLocationState;
}

unint64_t sub_100089DC4(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_101048860, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 6)
    return 6;
  else
    return v3;
}

void sub_100089E0C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1;
  v3 = a2;
  __asm { BR              X10; loc_100089EB8 }
}

uint64_t sub_10008A1C8(unsigned int a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;
  uint64_t v13;

  if (a1 < 3)
  {
LABEL_9:
    v13 = 2;
    return CurrentValueSubject.send(_:)(&v13);
  }
  if (a1 - 3 > 1)
  {
    if (qword_1010E9F10 != -1)
      swift_once(&qword_1010E9F10, sub_10075AEB4);
    v2 = type metadata accessor for Logger(0);
    v3 = sub_10001A9E8(v2, (uint64_t)qword_1011B75D0);
    v4 = Logger.logObject.getter(v3);
    v5 = static os_log_type_t.error.getter(v4);
    if (os_log_type_enabled(v4, v5))
    {
      v6 = (uint8_t *)swift_slowAlloc(12, -1);
      v7 = swift_slowAlloc(32, -1);
      v13 = v7;
      *(_DWORD *)v6 = 136315138;
      LODWORD(v12) = a1;
      type metadata accessor for CLAuthorizationStatus(0);
      v9 = String.init<A>(describing:)(&v12, v8);
      v12 = sub_100016940(v9, v10, &v13);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v12, &v13, v6 + 4, v6 + 12);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Unknown CLAuthorizationStatus value detected: %s", v6, 0xCu);
      swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v7, -1, -1);
      swift_slowDealloc(v6, -1, -1);
    }

    goto LABEL_9;
  }
  v13 = 0;
  return CurrentValueSubject.send(_:)(&v13);
}

uint64_t sub_10008A388()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10008A3AC@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(v2 + 16))(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10008A3DC@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v2 + 16))(*(_QWORD *)a1, *(unsigned __int8 *)(a1 + 8), *(_QWORD *)(a1 + 16));
  *a2 = result;
  return result;
}

uint64_t sub_10008A414(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _OWORD *v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __n128 v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD v27[3];
  _QWORD *v28;
  char *v29;
  char *v30;
  _OWORD v31[2];
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;

  v2 = sub_10001A9A8(&qword_1010ECF78);
  __chkstk_darwin(v2);
  v4 = (char *)v27 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for SystemVersionNumber(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v29 = (char *)v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v10 = (char *)v27 - v9;
  v11 = *(_QWORD *)(a1 + 16);
  swift_bridgeObjectRetain(a1);
  if (v11)
  {
    v12 = (_OWORD *)(a1 + 32);
    v27[0] = v11 - 1;
    v30 = v4;
    v27[2] = a1;
    v27[1] = a1 + 32;
    v28 = _swiftEmptyArrayStorage;
    v13 = 0;
    do
    {
      if (v11 == v13)
      {
        __break(1u);
        JUMPOUT(0x10008A7D0);
      }
      v14 = v12[7];
      v36 = v12[6];
      v37 = v14;
      v15 = v12[9];
      v38 = v12[8];
      v39 = v15;
      v16 = v12[3];
      v32 = v12[2];
      v33 = v16;
      v17 = v12[5];
      v34 = v12[4];
      v35 = v17;
      v18 = v12[1];
      v31[0] = *v12;
      v31[1] = v18;
      v19 = v35;
      sub_10008B118(v31);
      v20 = swift_bridgeObjectRetain(*((_QWORD *)&v19 + 1));
      SystemVersionNumber.init(string:)(v19, *((_QWORD *)&v19 + 1), v20);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) != 1)
      {
        v22 = *((_QWORD *)&v32 + 1);
        v21 = v32;
        (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v10, v4, v5);
        swift_bridgeObjectRetain(v22);
        sub_100089E0C(v21, v22);
        LOBYTE(v21) = v23;
        swift_bridgeObjectRelease();
        __asm { BR              X9 }
      }
      sub_10008B1C0((uint64_t)v4);
      ++v13;
      sub_10008B200(v31);
      v12 += 10;
      v4 = v30;
    }
    while (v11 != v13);
    v24 = v28;
  }
  else
  {
    v24 = _swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRelease();
  v25 = v24[2];
  swift_release();
  return v25;
}

uint64_t sub_10008A7E8(uint64_t a1, char a2, void *a3)
{
  uint64_t result;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 v12;
  unsigned __int8 v13;
  int v14;
  _BOOL4 v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint8_t *v36;
  const char *v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  os_log_type_t v41;
  uint8_t *v42;
  uint64_t v43;
  uint64_t v44;
  NSObject *v45;
  os_log_type_t v46;
  uint8_t *v47;
  const char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  Swift::String v53;
  Swift::String v54;
  Swift::String v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  Swift::String v59;
  Swift::String v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  NSObject *v65;
  os_log_type_t v66;
  uint8_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;

  result = (uint64_t)(id)MobileGestalt_get_current_device(a1);
  if (result)
  {
    v7 = (void *)result;
    v8 = (id)MobileGestalt_copy_productType_obj();

    if (v8)
    {
      v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
      v11 = v10;

    }
    else
    {
      v9 = 0;
      v11 = 0xE000000000000000;
    }
    sub_100089E0C(v9, v11);
    v13 = v12;
    v14 = v12;
    swift_bridgeObjectRelease();
    if (v14 == 5)
    {
      v15 = 0;
      if ((sub_10000E13C() & 1) == 0)
        goto LABEL_7;
    }
    else
    {
      v15 = v13 == 3 || v13 == 0;
      if ((sub_10000E13C() & 1) == 0)
      {
LABEL_7:
        if (a3)
        {
          if (a3 == (void *)1)
          {
            if (qword_1010E9F10 != -1)
              swift_once(&qword_1010E9F10, sub_10075AEB4);
            v27 = type metadata accessor for Logger(0);
            v28 = sub_10001A9E8(v27, (uint64_t)qword_1011B75D0);
            v29 = Logger.logObject.getter(v28);
            v30 = static os_log_type_t.default.getter(v29);
            if (os_log_type_enabled(v29, v30))
            {
              v31 = (uint8_t *)swift_slowAlloc(2, -1);
              *(_WORD *)v31 = 0;
              _os_log_impl((void *)&_mh_execute_header, v29, v30, "No location has been provided, most likely due to being in unsupported region.", v31, 2u);
              swift_slowDealloc(v31, -1, -1);
            }
            goto LABEL_48;
          }
          if (a3 == (void *)2)
          {
            if (qword_1010E9F10 != -1)
              swift_once(&qword_1010E9F10, sub_10075AEB4);
            v16 = type metadata accessor for Logger(0);
            v17 = sub_10001A9E8(v16, (uint64_t)qword_1011B75D0);
            v18 = Logger.logObject.getter(v17);
            v19 = static os_log_type_t.default.getter(v18);
            if (os_log_type_enabled(v18, v19))
            {
              v20 = (uint8_t *)swift_slowAlloc(2, -1);
              *(_WORD *)v20 = 0;
              _os_log_impl((void *)&_mh_execute_header, v18, v19, "SearchpartyD has no access to location data.", v20, 2u);
              swift_slowDealloc(v20, -1, -1);
            }

            return 3;
          }
          v38 = a3;
          if ((sub_10000CC48() & 1) != 0)
          {
            if (qword_1010E9F10 != -1)
              swift_once(&qword_1010E9F10, sub_10075AEB4);
            v39 = type metadata accessor for Logger(0);
            v40 = sub_10001A9E8(v39, (uint64_t)qword_1011B75D0);
            v29 = Logger.logObject.getter(v40);
            v41 = static os_log_type_t.default.getter(v29);
            if (os_log_type_enabled(v29, v41))
            {
              v42 = (uint8_t *)swift_slowAlloc(2, -1);
              *(_WORD *)v42 = 0;
              _os_log_impl((void *)&_mh_execute_header, v29, v41, "Provided location is within unsupported region.", v42, 2u);
              swift_slowDealloc(v42, -1, -1);

              sub_10008B108(a3);
              return 0;
            }
            sub_10008B108(a3);
LABEL_48:

            return 0;
          }
          sub_10008B108(a3);
          if (a2)
          {
            if (a2 == 3)
            {
              if (v15)
              {
                if (qword_1010E9F10 != -1)
                  swift_once(&qword_1010E9F10, sub_10075AEB4);
                v51 = type metadata accessor for Logger(0);
                v52 = sub_10001A9E8(v51, (uint64_t)qword_1011B75D0);
                v45 = Logger.logObject.getter(v52);
                v46 = static os_log_type_t.default.getter(v45);
                if (!os_log_type_enabled(v45, v46))
                  goto LABEL_61;
                v47 = (uint8_t *)swift_slowAlloc(2, -1);
                *(_WORD *)v47 = 0;
                goto LABEL_60;
              }
            }
            else if (a2 == 1 && v15)
            {
              if (qword_1010E9F10 != -1)
                swift_once(&qword_1010E9F10, sub_10075AEB4);
              v43 = type metadata accessor for Logger(0);
              v44 = sub_10001A9E8(v43, (uint64_t)qword_1011B75D0);
              v45 = Logger.logObject.getter(v44);
              v46 = static os_log_type_t.default.getter(v45);
              if (!os_log_type_enabled(v45, v46))
                goto LABEL_61;
              v47 = (uint8_t *)swift_slowAlloc(2, -1);
              *(_WORD *)v47 = 0;
LABEL_60:
              _os_log_impl((void *)&_mh_execute_header, v45, v46, v48, v47, 2u);
              swift_slowDealloc(v47, -1, -1);
LABEL_61:

              return 7;
            }
            v70 = 0;
            v71 = 0xE000000000000000;
            _StringGuts.grow(_:)(76);
            v53._countAndFlagsBits = 0x656369766544656DLL;
            v53._object = (void *)0xEF203A6574617453;
            String.append(_:)(v53);
            LOBYTE(v69) = a2;
            v54._countAndFlagsBits = String.init<A>(describing:)(&v69, &type metadata for SystemInfoDynamic.MeDeviceState);
            String.append(_:)(v54);
            swift_bridgeObjectRelease();
            v55._object = (void *)0x8000000100EC6F50;
            v55._countAndFlagsBits = 0xD000000000000029;
            String.append(_:)(v55);
            if (v15)
              v56 = 1702195828;
            else
              v56 = 0x65736C6166;
            if (v15)
              v57 = 0xE400000000000000;
            else
              v57 = 0xE500000000000000;
            v58 = v57;
            String.append(_:)(*(Swift::String *)&v56);
            swift_bridgeObjectRelease();
            v59._countAndFlagsBits = 0x436563697665640ALL;
            v59._object = (void *)0xEE00203A746E756FLL;
            String.append(_:)(v59);
            v69 = a1;
            v60._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
            String.append(_:)(v60);
            swift_bridgeObjectRelease();
            v62 = v70;
            v61 = v71;
            if (qword_1010E9F10 != -1)
              swift_once(&qword_1010E9F10, sub_10075AEB4);
            v63 = type metadata accessor for Logger(0);
            sub_10001A9E8(v63, (uint64_t)qword_1011B75D0);
            swift_bridgeObjectRetain(v61);
            v65 = Logger.logObject.getter(v64);
            v66 = static os_log_type_t.default.getter(v65);
            if (os_log_type_enabled(v65, v66))
            {
              v67 = (uint8_t *)swift_slowAlloc(12, -1);
              v68 = swift_slowAlloc(32, -1);
              v70 = v68;
              *(_DWORD *)v67 = 136315138;
              swift_bridgeObjectRetain(v61);
              v69 = sub_100016940(v62, v61, &v70);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v69, &v70, v67 + 4, v67 + 12);
              swift_bridgeObjectRelease_n(v61, 3);
              _os_log_impl((void *)&_mh_execute_header, v65, v66, "This device does not support Separation Monitoring \n%s", v67, 0xCu);
              swift_arrayDestroy(v68, 1, (char *)&type metadata for Any + 8);
              swift_slowDealloc(v68, -1, -1);
              swift_slowDealloc(v67, -1, -1);

            }
            else
            {

              swift_bridgeObjectRelease_n(v61, 2);
            }
            if (v15)
              return 4;
            else
              return 1;
          }
          if (qword_1010E9F10 != -1)
            swift_once(&qword_1010E9F10, sub_10075AEB4);
          v49 = type metadata accessor for Logger(0);
          v50 = sub_10001A9E8(v49, (uint64_t)qword_1011B75D0);
          v34 = Logger.logObject.getter(v50);
          v35 = static os_log_type_t.default.getter(v34);
          if (!os_log_type_enabled(v34, v35))
          {
LABEL_33:

            return 6;
          }
          v36 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v36 = 0;
          v37 = "Unknown me device state, can't decide yet.";
        }
        else
        {
          if (qword_1010E9F10 != -1)
            swift_once(&qword_1010E9F10, sub_10075AEB4);
          v32 = type metadata accessor for Logger(0);
          v33 = sub_10001A9E8(v32, (uint64_t)qword_1011B75D0);
          v34 = Logger.logObject.getter(v33);
          v35 = static os_log_type_t.default.getter(v34);
          if (!os_log_type_enabled(v34, v35))
            goto LABEL_33;
          v36 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v36 = 0;
          v37 = "Location has not been yet acquired, can't decide state yet.";
        }
        _os_log_impl((void *)&_mh_execute_header, v34, v35, v37, v36, 2u);
        swift_slowDealloc(v36, -1, -1);
        goto LABEL_33;
      }
    }
    if (qword_1010E9F10 != -1)
      swift_once(&qword_1010E9F10, sub_10075AEB4);
    v22 = type metadata accessor for Logger(0);
    v23 = sub_10001A9E8(v22, (uint64_t)qword_1011B75D0);
    v24 = Logger.logObject.getter(v23);
    v25 = static os_log_type_t.default.getter(v24);
    if (os_log_type_enabled(v24, v25))
    {
      v21 = 2;
      v26 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v26 = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "SearchpartyD is running on Korean SKU, separation alerts will be disabled.", v26, 2u);
      swift_slowDealloc(v26, -1, -1);

    }
    else
    {

      return 2;
    }
    return v21;
  }
  __break(1u);
  return result;
}

void sub_10008B108(id a1)
{
  if ((unint64_t)a1 >= 3)

}

_QWORD *sub_10008B118(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = a1[3];
  v3 = a1[5];
  v4 = a1[7];
  v5 = a1[9];
  v6 = a1[11];
  v7 = a1[13];
  v8 = a1[15];
  v9 = a1[19];
  swift_bridgeObjectRetain(a1[1]);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  return a1;
}

uint64_t sub_10008B1C0(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10001A9A8(&qword_1010ECF78);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

_QWORD *sub_10008B200(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = a1[1];
  v3 = a1[3];
  v4 = a1[5];
  v5 = a1[7];
  v6 = a1[9];
  v7 = a1[11];
  v8 = a1[13];
  v9 = a1[15];
  swift_bridgeObjectRelease(a1[19]);
  swift_bridgeObjectRelease(v9);
  swift_bridgeObjectRelease(v8);
  swift_bridgeObjectRelease(v7);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v2);
  return a1;
}

unint64_t sub_10008B2A8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1010ECF80;
  if (!qword_1010ECF80)
  {
    v1 = type metadata accessor for SystemVersionNumber(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for SystemVersionNumber, v1);
    atomic_store(result, (unint64_t *)&qword_1010ECF80);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for IdentitySigningType(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFB)
    goto LABEL_17;
  if (a2 + 5 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 5) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 5;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 5;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 5;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 6;
  v8 = v6 - 6;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for SeparationMonitoringStateDecider.SeparationMonitoringPolicy.DisableReason(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_10008B3CC + 4 * byte_100E232E9[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_10008B400 + 4 * byte_100E232E4[v4]))();
}

uint64_t sub_10008B400(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10008B408(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10008B410);
  return result;
}

uint64_t sub_10008B41C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10008B424);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_10008B428(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10008B430(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SeparationMonitoringStateDecider.SeparationMonitoringPolicy.DisableReason()
{
  return &type metadata for SeparationMonitoringStateDecider.SeparationMonitoringPolicy.DisableReason;
}

unint64_t sub_10008B450()
{
  unint64_t result;

  result = qword_1010ECF88;
  if (!qword_1010ECF88)
  {
    result = swift_getWitnessTable(&unk_100E23408, &type metadata for SeparationMonitoringStateDecider.SeparationMonitoringPolicy.DisableReason);
    atomic_store(result, (unint64_t *)&qword_1010ECF88);
  }
  return result;
}

uint64_t sub_10008B49C(uint64_t (*a1)(char *), unint64_t *a2, uint64_t a3)
{
  return sub_100004CEC(a1, a2, a3, type metadata accessor for MemberSharingCircle, (void (*)(BOOL, unint64_t, uint64_t))sub_10009A4D0);
}

uint64_t sub_10008B4C0(uint64_t (*a1)(char *), unint64_t *a2, uint64_t a3)
{
  return sub_100004CEC(a1, a2, a3, type metadata accessor for OwnerSharingCircle, (void (*)(BOOL, unint64_t, uint64_t))sub_10009A520);
}

uint64_t sub_10008B4E4(uint64_t (*a1)(char *), unint64_t *a2, uint64_t a3)
{
  return sub_100004CEC(a1, a2, a3, type metadata accessor for TimeBasedKey, (void (*)(BOOL, unint64_t, uint64_t))sub_10009A54C);
}

uint64_t sub_10008B508(uint64_t (*a1)(char *), unint64_t *a2, uint64_t a3)
{
  return sub_100004CEC(a1, a2, a3, type metadata accessor for KeyDropJoinToken, (void (*)(BOOL, unint64_t, uint64_t))sub_10009A5A4);
}

uint64_t sub_10008B52C(uint64_t (*a1)(char *), unint64_t *a2, uint64_t a3)
{
  return sub_100004CEC(a1, a2, a3, type metadata accessor for BeaconEstimatedLocation, (void (*)(BOOL, unint64_t, uint64_t))sub_10009A5D0);
}

uint64_t sub_10008B550(uint64_t (*a1)(char *), unint64_t *a2, uint64_t a3)
{
  return sub_100004CEC(a1, a2, a3, type metadata accessor for OwnedBeaconRecord, (void (*)(BOOL, unint64_t, uint64_t))sub_10009A680);
}

uint64_t sub_10008B574(uint64_t (*a1)(char *), unint64_t *a2, uint64_t a3)
{
  return sub_100004CEC(a1, a2, a3, type metadata accessor for SharedBeaconRecord, (void (*)(BOOL, unint64_t, uint64_t))sub_10009A654);
}

uint64_t sub_10008B598(uint64_t (*a1)(char *), unint64_t *a2, uint64_t a3)
{
  return sub_100004CEC(a1, a2, a3, type metadata accessor for OwnerPeerTrust, (void (*)(BOOL, unint64_t, uint64_t))sub_10009A7FC);
}

uint64_t sub_10008B5BC(uint64_t (*a1)(char *), unint64_t *a2, uint64_t a3)
{
  return sub_100004CEC(a1, a2, a3, type metadata accessor for DefaultConfigurationLayer, (void (*)(BOOL, unint64_t, uint64_t))sub_10009A860);
}

uint64_t sub_10008B5E0(uint64_t (*a1)(char *), unint64_t *a2, uint64_t a3)
{
  return sub_100004CEC(a1, a2, a3, type metadata accessor for BeaconObservation, (void (*)(BOOL, unint64_t, uint64_t))sub_10009AAC8);
}

uint64_t sub_10008B604(uint64_t result, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t (*v8)(__int128 *);
  unint64_t v9;
  uint64_t v10;
  char v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(__int128 *);
  uint64_t v24;
  _QWORD v25[3];
  uint64_t v26;
  uint64_t v27;
  __int128 v28[2];
  _QWORD *v29;

  v4 = a3;
  v5 = _swiftEmptyArrayStorage;
  v29 = _swiftEmptyArrayStorage;
  v6 = *(_QWORD *)(a3 + 16);
  if (v6)
  {
    v8 = (uint64_t (*)(__int128 *))result;
    v9 = 0;
    v10 = a3 + 32;
    v23 = (uint64_t (*)(__int128 *))result;
    v24 = a3;
    v22 = v6;
    while (v9 < *(_QWORD *)(v4 + 16))
    {
      sub_100030784(v10, (uint64_t)v28);
      v5 = a2;
      v11 = v8(v28);
      if (v3)
      {
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v28);
        swift_bridgeObjectRelease();
        swift_release();
        return (uint64_t)v5;
      }
      if ((v11 & 1) != 0)
      {
        sub_10000F9FC(v28, (uint64_t)v25);
        v12 = v29;
        if ((swift_isUniquelyReferenced_nonNull_native(v29) & 1) == 0)
        {
          sub_10009A628(0, v12[2] + 1, 1);
          v12 = v29;
        }
        v14 = v12[2];
        v13 = v12[3];
        if (v14 >= v13 >> 1)
          sub_10009A628(v13 > 1, v14 + 1, 1);
        v15 = v26;
        v16 = v27;
        v17 = sub_10009F5D0((uint64_t)v25, v26);
        __chkstk_darwin(v17);
        v19 = (char *)&v21 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
        (*(void (**)(char *))(v20 + 16))(v19);
        sub_1004AA86C(v14, (uint64_t)v19, (uint64_t *)&v29, v15, v16);
        result = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v25);
        v8 = v23;
        v4 = v24;
        v6 = v22;
      }
      else
      {
        result = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v28);
      }
      ++v9;
      v10 += 40;
      if (v6 == v9)
      {
        v5 = v29;
        goto LABEL_15;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_15:
    swift_bridgeObjectRelease();
    return (uint64_t)v5;
  }
  return result;
}

uint64_t sub_10008B7E8(uint64_t (*a1)(char *), unint64_t *a2, uint64_t a3)
{
  return sub_100004CEC(a1, a2, a3, type metadata accessor for OwnedBeaconGroup, (void (*)(BOOL, unint64_t, uint64_t))sub_10009AD0C);
}

uint64_t sub_10008B80C(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(_QWORD *);
  unint64_t v6;
  unint64_t *v7;
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;
  char v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t (*v15)(_QWORD *);
  uint64_t v17;
  _QWORD v18[2];
  _QWORD *v19;

  v4 = a3;
  v17 = *(_QWORD *)(a3 + 16);
  if (v17)
  {
    v5 = (uint64_t (*)(_QWORD *))result;
    v6 = 0;
    v7 = (unint64_t *)(a3 + 40);
    v8 = _swiftEmptyArrayStorage;
    v15 = (uint64_t (*)(_QWORD *))result;
    while (v6 < *(_QWORD *)(v4 + 16))
    {
      v10 = *(v7 - 1);
      v9 = *v7;
      v18[0] = v10;
      v18[1] = v9;
      sub_10001BBBC(v10, v9);
      v11 = v5(v18);
      if (v3)
      {
        sub_10001BC14(v10, v9);
        swift_release();
        goto LABEL_15;
      }
      if ((v11 & 1) != 0)
      {
        result = swift_isUniquelyReferenced_nonNull_native(v8);
        v19 = v8;
        if ((result & 1) == 0)
        {
          result = sub_10009A92C(0, v8[2] + 1, 1);
          v8 = v19;
        }
        v13 = v8[2];
        v12 = v8[3];
        if (v13 >= v12 >> 1)
        {
          result = sub_10009A92C(v12 > 1, v13 + 1, 1);
          v8 = v19;
        }
        v8[2] = v13 + 1;
        v14 = &v8[2 * v13];
        v14[4] = v10;
        v14[5] = v9;
        v4 = a3;
        v5 = v15;
      }
      else
      {
        result = sub_10001BC14(v10, v9);
      }
      ++v6;
      v7 += 2;
      if (v17 == v6)
        goto LABEL_15;
    }
    __break(1u);
  }
  else
  {
    v8 = _swiftEmptyArrayStorage;
LABEL_15:
    swift_bridgeObjectRelease();
    return (uint64_t)v8;
  }
  return result;
}

uint64_t sub_10008B984(uint64_t (*a1)(char *), uint64_t a2, uint64_t a3)
{
  return sub_10008C1E0(a1, a2, a3, &qword_1010ED508, (void (*)(BOOL, uint64_t, uint64_t))sub_10009AF18);
}

uint64_t sub_10008B9A8(uint64_t (*a1)(char *), unint64_t *a2, uint64_t a3)
{
  return sub_100004CEC(a1, a2, a3, type metadata accessor for ShareRecord, (void (*)(BOOL, unint64_t, uint64_t))sub_10009AFB8);
}

uint64_t sub_10008B9CC(uint64_t (*a1)(char *), unint64_t *a2, uint64_t a3)
{
  return sub_100004CEC(a1, a2, a3, type metadata accessor for FetchRequestBeacon, (void (*)(BOOL, unint64_t, uint64_t))sub_10009B094);
}

uint64_t sub_10008B9F0(uint64_t (*a1)(char *), unint64_t *a2, uint64_t a3)
{
  return sub_100004CEC(a1, a2, a3, type metadata accessor for RawSearchResult, (void (*)(BOOL, unint64_t, uint64_t))sub_10009B108);
}

uint64_t sub_10008BA14(uint64_t (*a1)(char *), uint64_t a2, uint64_t a3)
{
  return sub_10008C1E0(a1, a2, a3, &qword_101108020, (void (*)(BOOL, uint64_t, uint64_t))sub_10009B1B8);
}

uint64_t sub_10008BA38(uint64_t (*a1)(char *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  char v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD v20[2];
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;

  v7 = sub_10001A9A8((uint64_t *)&unk_10110C6B0);
  v24 = *(_QWORD *)(v7 - 8);
  v8 = __chkstk_darwin(v7);
  v23 = (uint64_t)v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = __chkstk_darwin(v8);
  v12 = (char *)v20 - v11;
  v13 = _swiftEmptyArrayStorage;
  v25 = _swiftEmptyArrayStorage;
  v22 = *(_QWORD *)(a3 + 16);
  if (v22)
  {
    v14 = 0;
    v15 = _swiftEmptyArrayStorage;
    v20[1] = a2;
    v21 = a3;
    v20[0] = a1;
    while (v14 < *(_QWORD *)(a3 + 16))
    {
      v16 = (*(unsigned __int8 *)(v24 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80);
      v13 = *(_QWORD **)(v24 + 72);
      sub_10000F9B8(a3 + v16 + (_QWORD)v13 * v14, (uint64_t)v12, (uint64_t *)&unk_10110C6B0);
      v17 = a1(v12);
      if (v3)
      {
        sub_100004048((uint64_t)v12, (uint64_t *)&unk_10110C6B0);
        swift_release();
        swift_bridgeObjectRelease();
        return (uint64_t)v13;
      }
      if ((v17 & 1) != 0)
      {
        sub_10009F5F8((uint64_t)v12, v23);
        if ((swift_isUniquelyReferenced_nonNull_native(v15) & 1) == 0)
          sub_10009B260(0, v15[2] + 1, 1);
        v15 = v25;
        v19 = v25[2];
        v18 = v25[3];
        if (v19 >= v18 >> 1)
        {
          sub_10009B260(v18 > 1, v19 + 1, 1);
          v15 = v25;
        }
        v15[2] = v19 + 1;
        result = sub_10009F5F8(v23, (uint64_t)v15 + v16 + v19 * (_QWORD)v13);
        a3 = v21;
        a1 = (uint64_t (*)(char *))v20[0];
      }
      else
      {
        result = sub_100004048((uint64_t)v12, (uint64_t *)&unk_10110C6B0);
      }
      if (v22 == ++v14)
      {
        v13 = v25;
        goto LABEL_15;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_15:
    swift_bridgeObjectRelease();
    return (uint64_t)v13;
  }
  return result;
}

uint64_t sub_10008BC44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10008BC8C(a1, a2, a3, &qword_1010ED4C0, (uint64_t (*)(BOOL, uint64_t, uint64_t))sub_10009B234);
}

uint64_t sub_10008BC68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10008BC8C(a1, a2, a3, &qword_1010ED298, (uint64_t (*)(BOOL, uint64_t, uint64_t))sub_10009B2B8);
}

uint64_t sub_10008BC8C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t (*a5)(BOOL, uint64_t, uint64_t))
{
  uint64_t v5;
  _QWORD *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t (*v10)(_OWORD *);
  unint64_t v11;
  uint64_t v12;
  char v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v18;
  uint64_t (*v19)(_OWORD *);
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  _OWORD v25[3];
  uint64_t v26;
  _QWORD *v27;

  v7 = _swiftEmptyArrayStorage;
  v27 = _swiftEmptyArrayStorage;
  v8 = *(_QWORD *)(a3 + 16);
  if (v8)
  {
    v9 = a4;
    v10 = (uint64_t (*)(_OWORD *))result;
    v11 = 0;
    v12 = a3 + 32;
    v19 = (uint64_t (*)(_OWORD *))result;
    v18 = *(_QWORD *)(a3 + 16);
    while (v11 < *(_QWORD *)(a3 + 16))
    {
      sub_10000F9B8(v12, (uint64_t)v25, v9);
      v13 = v10(v25);
      if (v5)
      {
        sub_100004048((uint64_t)v25, v9);
        swift_release();
        swift_bridgeObjectRelease();
        return (uint64_t)v7;
      }
      if ((v13 & 1) != 0)
      {
        v21 = v25[0];
        v22 = v25[1];
        v23 = v25[2];
        v24 = v26;
        result = swift_isUniquelyReferenced_nonNull_native(v7);
        if ((result & 1) == 0)
          result = a5(0, v7[2] + 1, 1);
        v7 = v27;
        v15 = v27[2];
        v14 = v27[3];
        if (v15 >= v14 >> 1)
        {
          result = a5(v14 > 1, v15 + 1, 1);
          v7 = v27;
        }
        v7[2] = v15 + 1;
        v16 = &v7[7 * v15];
        *((_OWORD *)v16 + 2) = v21;
        *((_OWORD *)v16 + 3) = v22;
        *((_OWORD *)v16 + 4) = v23;
        v16[10] = v24;
        v10 = v19;
        v9 = a4;
        v8 = v18;
      }
      else
      {
        result = sub_100004048((uint64_t)v25, v9);
      }
      ++v11;
      v12 += 56;
      if (v8 == v11)
        goto LABEL_13;
    }
    __break(1u);
  }
  else
  {
LABEL_13:
    swift_bridgeObjectRelease();
    return (uint64_t)v7;
  }
  return result;
}

uint64_t sub_10008BE4C(uint64_t (*a1)(char *), uint64_t a2, uint64_t a3)
{
  return sub_10008C1E0(a1, a2, a3, &qword_1010ED378, (void (*)(BOOL, uint64_t, uint64_t))sub_10009B3B0);
}

void *sub_10008BE70(uint64_t (*a1)(id *), void *a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  unint64_t v8;
  id v9;
  void *v10;
  unint64_t v11;
  void *v12;
  char v13;
  uint64_t v14;
  uint64_t (*v15)(id *);
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  id v25;
  _QWORD *v26;

  v4 = a3;
  v26 = &_swiftEmptyArrayStorage;
  if (a3 >> 62)
    goto LABEL_18;
  v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v7)
  {
    while (1)
    {
      v8 = 0;
      v23 = v4 & 0xFFFFFFFFFFFFFF8;
      v24 = v4 & 0xC000000000000001;
      v22 = v4;
      while (v24)
      {
        v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v8, v4);
LABEL_9:
        v10 = v9;
        v11 = v8 + 1;
        if (__OFADD__(v8, 1))
          goto LABEL_17;
        v25 = v9;
        v12 = a2;
        v13 = a1(&v25);
        if (v3)
        {
          swift_bridgeObjectRelease(v4);

          swift_release(v26);
          return v12;
        }
        if ((v13 & 1) != 0)
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          v14 = v7;
          v15 = a1;
          v16 = a2;
          v17 = v26[2];
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v17);
          v18 = v17;
          a2 = v16;
          a1 = v15;
          v7 = v14;
          v4 = v22;
          v19 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v18, v10);
          specialized ContiguousArray._endMutation()(v19);
        }
        else
        {

        }
        ++v8;
        if (v11 == v7)
        {
          v12 = v26;
          goto LABEL_23;
        }
      }
      if (v8 < *(_QWORD *)(v23 + 16))
        break;
      __break(1u);
LABEL_17:
      __break(1u);
LABEL_18:
      if (v4 < 0)
        v20 = v4;
      else
        v20 = v4 & 0xFFFFFFFFFFFFFF8;
      v7 = _CocoaArrayWrapper.endIndex.getter(v20);
      if (!v7)
        goto LABEL_22;
    }
    v9 = *(id *)(v4 + 8 * v8 + 32);
    goto LABEL_9;
  }
LABEL_22:
  v12 = &_swiftEmptyArrayStorage;
LABEL_23:
  swift_bridgeObjectRelease(v4);
  return v12;
}

uint64_t sub_10008C014(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t (*v7)(__int128 *);
  uint64_t v8;
  _QWORD *v9;
  char v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t (*v14)(__int128 *);
  __int128 v15[2];
  __int128 v16[2];
  _QWORD *v17;

  v5 = _swiftEmptyArrayStorage;
  v17 = _swiftEmptyArrayStorage;
  v6 = *(_QWORD **)(a3 + 16);
  if (v6)
  {
    v7 = (uint64_t (*)(__int128 *))result;
    v5 = 0;
    v8 = a3 + 32;
    v9 = _swiftEmptyArrayStorage;
    v13 = *(_QWORD **)(a3 + 16);
    v14 = (uint64_t (*)(__int128 *))result;
    while ((unint64_t)v5 < *(_QWORD *)(a3 + 16))
    {
      sub_100030784(v8, (uint64_t)v16);
      v10 = v7(v16);
      if (v3)
      {
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v16);
        swift_release();
        swift_bridgeObjectRelease();
        return (uint64_t)v5;
      }
      if ((v10 & 1) != 0)
      {
        sub_10000F9FC(v16, (uint64_t)v15);
        if ((swift_isUniquelyReferenced_nonNull_native(v9) & 1) == 0)
          sub_10009B448(0, v9[2] + 1, 1);
        v9 = v17;
        v12 = v17[2];
        v11 = v17[3];
        if (v12 >= v11 >> 1)
        {
          sub_10009B448(v11 > 1, v12 + 1, 1);
          v9 = v17;
        }
        v9[2] = v12 + 1;
        result = sub_10000F9FC(v15, (uint64_t)&v9[5 * v12 + 4]);
        v6 = v13;
        v7 = v14;
      }
      else
      {
        result = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v16);
      }
      v5 = (_QWORD *)((char *)v5 + 1);
      v8 += 40;
      if (v6 == v5)
      {
        v5 = v17;
        goto LABEL_15;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_15:
    swift_bridgeObjectRelease();
    return (uint64_t)v5;
  }
  return result;
}

uint64_t sub_10008C198(uint64_t (*a1)(char *), unint64_t *a2, uint64_t a3)
{
  return sub_100004CEC(a1, a2, a3, type metadata accessor for LocationProvider, (void (*)(BOOL, unint64_t, uint64_t))sub_10009B4A0);
}

uint64_t sub_10008C1BC(uint64_t (*a1)(char *), uint64_t a2, uint64_t a3)
{
  return sub_10008C1E0(a1, a2, a3, (uint64_t *)&unk_1010F7A10, (void (*)(BOOL, uint64_t, uint64_t))sub_10009B4E8);
}

uint64_t sub_10008C1E0(uint64_t (*a1)(char *), uint64_t a2, uint64_t a3, uint64_t *a4, void (*a5)(BOOL, uint64_t, uint64_t))
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char v20;
  void (*v21)(char *, char *, uint64_t);
  unint64_t v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  void (*v26)(BOOL, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t (*v32)(char *);
  uint64_t v33;
  char *v34;
  _QWORD *v35;

  v26 = a5;
  v32 = a1;
  v8 = sub_10001A9A8(a4);
  v33 = *(_QWORD *)(v8 - 8);
  v9 = __chkstk_darwin(v8);
  v31 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = __chkstk_darwin(v9);
  v34 = (char *)&v25 - v12;
  v13 = _swiftEmptyArrayStorage;
  v35 = _swiftEmptyArrayStorage;
  v30 = *(_QWORD *)(a3 + 16);
  if (v30)
  {
    v14 = 0;
    v15 = _swiftEmptyArrayStorage;
    v28 = a2;
    v29 = a3;
    v27 = v8;
    while (v14 < *(_QWORD *)(a3 + 16))
    {
      v13 = (_QWORD *)((*(unsigned __int8 *)(v33 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v33 + 80));
      v16 = *(_QWORD *)(v33 + 72);
      v17 = a3;
      v18 = (char *)v13 + a3 + v16 * v14;
      v19 = v34;
      (*(void (**)(char *, char *, uint64_t))(v33 + 16))(v34, v18, v8);
      v20 = v32(v19);
      if (v5)
      {
        (*(void (**)(char *, uint64_t))(v33 + 8))(v34, v8);
        swift_release(v15);
        swift_bridgeObjectRelease(v17);
        return (uint64_t)v13;
      }
      if ((v20 & 1) != 0)
      {
        v21 = *(void (**)(char *, char *, uint64_t))(v33 + 32);
        v21(v31, v34, v8);
        if ((swift_isUniquelyReferenced_nonNull_native(v15) & 1) == 0)
          v26(0, v15[2] + 1, 1);
        v15 = v35;
        v23 = v35[2];
        v22 = v35[3];
        if (v23 >= v22 >> 1)
        {
          v26(v22 > 1, v23 + 1, 1);
          v15 = v35;
        }
        v15[2] = v23 + 1;
        v24 = (char *)v13 + (_QWORD)v15 + v23 * v16;
        v8 = v27;
        result = ((uint64_t (*)(char *, char *, uint64_t))v21)(v24, v31, v27);
        a3 = v29;
      }
      else
      {
        result = (*(uint64_t (**)(char *, uint64_t))(v33 + 8))(v34, v8);
        a3 = v17;
      }
      if (v30 == ++v14)
      {
        v13 = v35;
        goto LABEL_15;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_15:
    swift_bridgeObjectRelease(a3);
    return (uint64_t)v13;
  }
  return result;
}

uint64_t sub_10008C418()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_1000234D8(v0, qword_1011B66E0);
  sub_10001A9E8(v0, (uint64_t)qword_1011B66E0);
  return Logger.init(subsystem:category:)(0xD00000000000001DLL, 0x8000000100EC5D30, 0x72756769666E6F63, 0xED00006E6F697461);
}

uint64_t sub_10008C498()
{
  uint64_t v0;
  uint64_t v2;

  OS_dispatch_queue.sync<A>(execute:)(sub_100003DA0, v0, &type metadata for Configuration);
  return v2;
}

uint64_t sub_10008C4E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if (*(_QWORD *)(v0 + 64))
  {
    v1 = *(_QWORD *)(v0 + 64);
  }
  else
  {
    v2 = v0;
    v3 = type metadata accessor for ServerConfigurationProvider(0);
    swift_allocObject(v3, *(unsigned int *)(v3 + 48), *(unsigned __int16 *)(v3 + 52));
    v1 = sub_10070BE40();
    *(_QWORD *)(v2 + 64) = v1;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v1;
}

_QWORD *sub_10008C558()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  if (*(_QWORD *)(v0 + 72))
  {
    v1 = *(_QWORD **)(v0 + 72);
  }
  else
  {
    v2 = v0;
    v3 = type metadata accessor for UserDefaultsConfigurationProvider();
    swift_allocObject(v3, 40, 7);
    v1 = sub_100D35FE0();
    *(_QWORD *)(v2 + 72) = v1;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v1;
}

void sub_10008C5C8()
{
  qword_1011B66F8 = (uint64_t)&off_101048C58;
}

void sub_10008C5DC(char *a1)
{
  sub_1005124DC(*a1);
}

unint64_t sub_10008C5E8@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_1000A1830(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10008C614()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_10008C644 + 4 * byte_100E234B0[*v0]))();
}

void sub_10008C644(_QWORD *a1@<X8>)
{
  *a1 = 0x726576726573;
  a1[1] = 0xE600000000000000;
}

void sub_10008C65C(_QWORD *a1@<X8>)
{
  *a1 = 0x73656C6F72;
  a1[1] = 0xE500000000000000;
}

void sub_10008C674(uint64_t a1@<X8>)
{
  strcpy((char *)a1, "userDefaults");
  *(_BYTE *)(a1 + 13) = 0;
  *(_WORD *)(a1 + 14) = -5120;
}

void sub_10008C698(_QWORD *a1@<X8>)
{
  *a1 = 0x5365636976726573;
  a1[1] = 0xEF73676E69747465;
}

void sub_10008C6C0()
{
  unsigned __int8 *v0;
  uint64_t v1;
  _QWORD v2[9];

  v1 = *v0;
  Hasher.init(_seed:)(v2);
  __asm { BR              X9 }
}

Swift::Int sub_10008C70C()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x726576726573, 0xE600000000000000);
  swift_bridgeObjectRelease(0xE600000000000000);
  return Hasher._finalize()();
}

void sub_10008C7A0()
{
  __asm { BR              X10 }
}

uint64_t sub_10008C7DC(uint64_t a1)
{
  String.hash(into:)(a1, 0x726576726573, 0xE600000000000000);
  return swift_bridgeObjectRelease(0xE600000000000000);
}

void sub_10008C85C()
{
  unsigned __int8 *v0;
  uint64_t v1;
  _QWORD v2[9];

  v1 = *v0;
  Hasher.init(_seed:)(v2);
  __asm { BR              X9 }
}

Swift::Int sub_10008C8A4()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x726576726573, 0xE600000000000000);
  swift_bridgeObjectRelease(0xE600000000000000);
  return Hasher._finalize()();
}

uint64_t sub_10008C938(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1000A1878();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_10008C994(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1000A1878();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

_QWORD *sub_10008C9E0(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  id v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  _BYTE v44[12];
  unsigned int v45;
  uint64_t (*v46)(_BYTE *);
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;
  _QWORD aBlock[5];
  uint64_t v53;

  v51 = a1;
  v49 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v49);
  *(_QWORD *)&v50 = &v44[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v3 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v3);
  v5 = &v44[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v7 = *(_QWORD *)(v6 - 8);
  v47 = v6;
  __chkstk_darwin(v6);
  v9 = &v44[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v1[2] = &_swiftEmptyArrayStorage;
  v48 = v1;
  v10 = objc_msgSend(objc_allocWithZone((Class)FMStateCapture), "init");
  aBlock[4] = sub_10047C8F0;
  v53 = 0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10009A0A8;
  aBlock[3] = &unk_101053918;
  v11 = _Block_copy(aBlock);
  swift_release(v53);
  objc_msgSend(v10, "setStateCaptureBlock:", v11);
  _Block_release(v11);
  v1[3] = v10;
  sub_10001F6FC();
  v45 = enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:);
  v46 = *(uint64_t (**)(_BYTE *))(v7 + 104);
  v12 = v46(v9);
  static DispatchQoS.unspecified.getter(v12);
  aBlock[0] = &_swiftEmptyArrayStorage;
  v13 = sub_100006204((unint64_t *)&qword_1010F0E20, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v14 = sub_10001A9A8((uint64_t *)&unk_1010EA6B0);
  v15 = sub_1000193A4((unint64_t *)&qword_1010F0E30, (uint64_t *)&unk_1010EA6B0, (const char *)&protocol conformance descriptor for [A]);
  v17 = v49;
  v16 = v50;
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v14, v15, v49, v13);
  v18 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000043, 0x8000000100EC7240, v5, v16, v9, 0);
  v19 = v47;
  v20 = v48;
  v48[4] = v18;
  v21 = ((uint64_t (*)(_BYTE *, _QWORD, uint64_t))v46)(v9, v45, v19);
  static DispatchQoS.unspecified.getter(v21);
  aBlock[0] = &_swiftEmptyArrayStorage;
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v14, v15, v17, v13);
  v20[5] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000036, 0x8000000100EC7290, v5, v16, v9, 0);
  v22 = sub_10001A9A8((uint64_t *)&unk_101108E60);
  v23 = *(_QWORD *)(type metadata accessor for DefaultConfigurationLayer(0) - 8);
  v24 = *(_QWORD *)(v23 + 72);
  v25 = *(unsigned __int8 *)(v23 + 80);
  v26 = (v25 + 32) & ~v25;
  v27 = swift_allocObject(v22, v26 + v24, v25 | 7);
  v50 = xmmword_100E22B00;
  *(_OWORD *)(v27 + 16) = xmmword_100E22B00;
  v28 = sub_1006BBC88(v27 + v26);
  v20[7] = v27;
  v20[8] = 0;
  v20[9] = 0;
  v20[10] = 0;
  v29 = static os_log_type_t.default.getter(v28);
  if (qword_1010EA2D0 != -1)
    swift_once(&qword_1010EA2D0, sub_100B5DFA4);
  v30 = qword_1011B7DB0;
  v31 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v32 = swift_allocObject(v31, 72, 7);
  *(_OWORD *)(v32 + 16) = v50;
  v33 = type metadata accessor for URL(0);
  v34 = sub_100006204((unint64_t *)&qword_101108070, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
  v35 = v51;
  v36 = dispatch thunk of CustomStringConvertible.description.getter(v33, v34);
  v38 = v37;
  *(_QWORD *)(v32 + 56) = &type metadata for String;
  *(_QWORD *)(v32 + 64) = sub_10001AA00();
  *(_QWORD *)(v32 + 32) = v36;
  *(_QWORD *)(v32 + 40) = v38;
  os_log(_:dso:log:_:_:)(v29, &_mh_execute_header, v30, "ConfigurationCoordinator created with url %{public}@", 52, 2, v32);
  swift_bridgeObjectRelease(v32);
  v39 = *(_QWORD *)(v33 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v39 + 16))((uint64_t)v20 + OBJC_IVAR____TtC12searchpartyd24ConfigurationCoordinator_rootURL, v35, v33);
  v40 = (void *)v20[5];
  v41 = type metadata accessor for QueueSynchronizer(0);
  swift_allocObject(v41, *(unsigned int *)(v41 + 48), *(unsigned __int16 *)(v41 + 52));
  v42 = QueueSynchronizer.init(queue:)(v40);
  (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v35, v33);
  v20[6] = v42;
  return v20;
}

uint64_t sub_10008CE74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  void (*v17)(char *, uint64_t);
  uint64_t v18;
  id v19;
  id v20;
  _QWORD *v21;
  uint64_t v22;
  char v23;
  char v24;
  id v25;
  NSString v26;
  unsigned __int8 v27;
  char *v28;
  char *v29;
  _QWORD *v30;
  uint64_t v31;
  ValueMetadata *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  void (*v51)(uint64_t, uint64_t);
  char *v52;
  _QWORD *v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  ValueMetadata *v57;
  char *v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  _QWORD *v72;
  char v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  _QWORD aBlock[3];
  ValueMetadata *v78;
  uint64_t (*v79)();
  uint64_t v80;

  v4 = v3;
  v66 = a3;
  v65 = a2;
  v64 = a1;
  v5 = type metadata accessor for DispatchWorkItemFlags(0);
  v68 = *(_QWORD *)(v5 - 8);
  v69 = v5;
  __chkstk_darwin(v5);
  v63 = (char *)&v48 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v67 = type metadata accessor for DispatchQoS(0);
  v56 = *(_QWORD *)(v67 - 8);
  __chkstk_darwin(v67);
  v55 = (char *)&v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v62 = sub_10001A9A8(&qword_1010ED508);
  v61 = *(_QWORD *)(v62 - 8);
  __chkstk_darwin(v62);
  v9 = (char *)&v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = (int *)type metadata accessor for ServiceStateConfigurationLayer(0);
  __chkstk_darwin(v10);
  v60 = (char *)&v48 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10001A9A8(&qword_1010ED378);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v48 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10008DB30(0);
  sub_10008C558();
  v16 = type metadata accessor for ConfigurationCoordinator(0);
  v78 = (ValueMetadata *)v16;
  v79 = (uint64_t (*)())&off_1010537F0;
  aBlock[0] = v3;
  swift_retain();
  sub_100D36488((uint64_t)aBlock, (uint64_t)v15);
  swift_release();
  v17 = *(void (**)(char *, uint64_t))(v13 + 8);
  v17(v15, v12);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(aBlock);
  sub_10008C558();
  swift_release();
  v78 = &type metadata for UserDefaultsConfigurationLayer;
  v79 = (uint64_t (*)())&off_1010BDF60;
  v18 = *(_QWORD *)(v3 + 48);
  v70 = 3;
  v71 = v4;
  v72 = aBlock;
  v73 = 0;
  v74 = 0;
  v75 = 0;
  v53 = &type metadata for () + 1;
  v54 = v18;
  QueueSynchronizer.conditionalSync<A>(_:)(sub_10009F6FC);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(aBlock);
  sub_100013B60();
  v78 = (ValueMetadata *)v16;
  v79 = (uint64_t (*)())&off_1010537F0;
  v57 = (ValueMetadata *)v16;
  aBlock[0] = v4;
  swift_retain();
  sub_100B065FC((uint64_t)aBlock, (uint64_t)v15);
  swift_release();
  v58 = v15;
  v59 = v12;
  v17(v15, v12);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(aBlock);
  sub_100013B60();
  v19 = sub_100013BD0();
  v20 = objc_msgSend(v19, "stringForKey:", SPSettingsServiceStateKey);

  if (!v20)
  {
    if (qword_1010E9E60 != -1)
      swift_once(&qword_1010E9E60, sub_1006C5904);
    v20 = (id)qword_1011B7490;
  }
  v50 = 0;
  v51 = (void (*)(uint64_t, uint64_t))v17;
  v52 = v9;
  v49 = sub_100B04EDC();
  v21 = v60;
  sub_100B05350((uint64_t)&v60[v10[6]]);
  sub_100B05AE4((uint64_t)v21 + v10[7]);
  v22 = sub_100B05B04();
  v24 = v23;
  sub_100B05DF4((uint64_t)v21 + v10[9]);
  v25 = sub_100013BD0();
  v26 = String._bridgeToObjectiveC()();
  v27 = objc_msgSend(v25, "BOOLForKey:", v26);
  swift_release();

  v28 = v49;
  *v21 = v20;
  v21[1] = v28;
  v29 = (char *)v21 + v10[8];
  *(_QWORD *)v29 = v22;
  v29[8] = v24 & 1;
  *((_BYTE *)v21 + v10[10]) = v27;
  v78 = (ValueMetadata *)v10;
  v79 = (uint64_t (*)())&off_1010AC280;
  v30 = sub_100018F08(aBlock);
  v31 = sub_10005972C((uint64_t)v21, (uint64_t)v30, type metadata accessor for ServiceStateConfigurationLayer);
  __chkstk_darwin(v31);
  *((_BYTE *)&v48 - 48) = 4;
  *(&v48 - 5) = v4;
  *(&v48 - 4) = (uint64_t)aBlock;
  *((_BYTE *)&v48 - 24) = 0;
  *(&v48 - 2) = 0;
  *(&v48 - 1) = 0;
  QueueSynchronizer.conditionalSync<A>(_:)(sub_10009F6FC);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(aBlock);
  sub_10008C4E8();
  v32 = v57;
  v78 = v57;
  v79 = (uint64_t (*)())&off_1010537F0;
  aBlock[0] = v4;
  swift_retain();
  v33 = (uint64_t)v58;
  sub_10070DBC0((uint64_t)aBlock, (uint64_t)v58);
  swift_release();
  v51(v33, v59);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(aBlock);
  v78 = v32;
  v79 = (uint64_t (*)())&off_1010537C8;
  aBlock[0] = v4;
  swift_retain();
  v34 = (uint64_t)v52;
  sub_100343F60((uint64_t)aBlock, (uint64_t)v52);
  (*(void (**)(uint64_t, uint64_t))(v61 + 8))(v34, v62);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(aBlock);
  v35 = swift_allocObject(&unk_101054008, 32, 7);
  v36 = v65;
  v37 = v66;
  *(_QWORD *)(v35 + 16) = v65;
  *(_QWORD *)(v35 + 24) = v37;
  v79 = sub_1000A162C;
  v80 = v35;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  v78 = (ValueMetadata *)&unk_101054020;
  v38 = _Block_copy(aBlock);
  v39 = sub_10001D898(v36, v37);
  v40 = v55;
  static DispatchQoS.unspecified.getter(v39);
  v76 = _swiftEmptyArrayStorage;
  v41 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v42 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v43 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  v44 = v63;
  v45 = v42;
  v46 = v69;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v76, v45, v43, v69, v41);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v40, v44, v38);
  _Block_release(v38);
  (*(void (**)(char *, uint64_t))(v68 + 8))(v44, v46);
  (*(void (**)(char *, uint64_t))(v56 + 8))(v40, v67);
  sub_1000126B0((uint64_t)v21, type metadata accessor for ServiceStateConfigurationLayer);
  return swift_release();
}

uint64_t sub_10008D548(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD aBlock[6];

  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v24 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  v22 = *(_QWORD *)(v7 - 8);
  v23 = v7;
  __chkstk_darwin(v7);
  v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS.QoSClass(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001F6FC();
  (*(void (**)(char *, _QWORD, uint64_t))(v11 + 104))(v13, enum case for DispatchQoS.QoSClass.default(_:), v10);
  v14 = (void *)static OS_dispatch_queue.global(qos:)(v13);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  v15 = swift_allocObject(&unk_101054058, 32, 7);
  *(_QWORD *)(v15 + 16) = a1;
  *(_QWORD *)(v15 + 24) = a2;
  aBlock[4] = sub_10009F714;
  aBlock[5] = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_101054070;
  v16 = _Block_copy(aBlock);
  v17 = sub_10001D898(a1, a2);
  static DispatchQoS.unspecified.getter(v17);
  v25 = _swiftEmptyArrayStorage;
  v18 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v19 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v20 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v25, v19, v20, v4, v18);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v9, v6, v16);
  _Block_release(v16);

  (*(void (**)(char *, uint64_t))(v24 + 8))(v6, v4);
  (*(void (**)(char *, uint64_t))(v22 + 8))(v9, v23);
  return swift_release();
}

uint64_t sub_10008D7B8(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  swift_bridgeObjectRetain(*(_QWORD *)(a1 + 56));
  v2 = sub_100C1A8A0(v1);
  swift_bridgeObjectRelease();
  sub_10008D874((uint64_t)v2, 0);
  v3 = swift_bridgeObjectRelease();
  v4 = static os_log_type_t.default.getter(v3);
  if (qword_1010EA2D0 != -1)
    swift_once(&qword_1010EA2D0, sub_100B5DFA4);
  return os_log(_:dso:log:_:_:)(v4, &_mh_execute_header, qword_1011B7DB0, "ConfigurationCoordinator has reloaded in memory with defaults, userDefaults, serviceState.", 90, 2, _swiftEmptyArrayStorage);
}

uint64_t sub_10008D874(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v19;
  int v20;
  uint64_t v21;

  v3 = v2;
  v20 = a2;
  v19 = type metadata accessor for URL(0);
  v5 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(v2 + 40));
  v9 = static os_log_type_t.default.getter(v8);
  if (qword_1010EA2D0 != -1)
    swift_once(&qword_1010EA2D0, sub_100B5DFA4);
  os_log(_:dso:log:_:_:)(v9, &_mh_execute_header, qword_1011B7DB0, "ConfigurationCoordinator persisting updated config.", 51, 2, &_swiftEmptyArrayStorage, v19);
  v10 = *(_QWORD *)(v3 + 56);
  *(_QWORD *)(v3 + 56) = a1;
  v11 = type metadata accessor for PropertyListEncoder(0);
  swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
  v12 = swift_bridgeObjectRetain(a1);
  v13 = PropertyListEncoder.init()(v12);
  v21 = a1;
  v14 = sub_1000A15C0();
  v15 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(&v21, &type metadata for Configuration, v14);
  v17 = v16;
  swift_release(v13);
  URL.appendingPathComponent(_:isDirectory:)(0xD000000000000018, 0x8000000100EC7470, 0);
  Data.write(to:excludeFromBackup:options:)(v7, 1, 0x10000000, 0, v15, v17);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v19);
  sub_10001BC14(v15, v17);
  if ((sub_10024A2CC(v10, a1) & 1) == 0 && (v20 & 1) != 0)
    sub_10008E0E4(v10, a1);
  return swift_bridgeObjectRelease(v10);
}

uint64_t sub_10008DB30(char a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  _QWORD aBlock[6];

  v3 = type metadata accessor for DispatchQoS(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)aBlock - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchWorkItemFlags(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)aBlock - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  static DispatchWorkItemFlags.barrier.getter(v9);
  v12 = swift_allocObject(&unk_101053810, 24, 7);
  swift_weakInit(v12 + 16, v1);
  v13 = swift_allocObject(&unk_101053FB8, 25, 7);
  *(_QWORD *)(v13 + 16) = v12;
  *(_BYTE *)(v13 + 24) = a1;
  aBlock[4] = sub_1000A1570;
  aBlock[5] = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_101053FD0;
  v14 = _Block_copy(aBlock);
  v15 = swift_retain();
  static DispatchQoS.unspecified.getter(v15);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v6, v11, v14);
  _Block_release(v14);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  swift_release();
  return swift_release();
}

uint64_t sub_10008DCD8(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t Strong;
  uint64_t v23;
  uint64_t v24;
  _BYTE v25[4];
  int v26;
  _BYTE v27[24];
  _BYTE v28[24];
  uint64_t v29[4];
  _BYTE v30[24];

  v4 = type metadata accessor for DefaultConfigurationLayer(0);
  __chkstk_darwin(v4);
  v6 = &v25[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = type metadata accessor for URL(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = &v25[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = a1 + 16;
  swift_beginAccess(a1 + 16, v30, 0, 0);
  result = swift_weakLoadStrong(a1 + 16);
  if (result)
  {
    v26 = a2;
    v13 = static os_log_type_t.default.getter(result);
    if (qword_1010EA2D0 != -1)
      swift_once(&qword_1010EA2D0, sub_100B5DFA4);
    os_log(_:dso:log:_:_:)(v13, &_mh_execute_header, qword_1011B7DB0, "ConfigurationCoordinator restoring config from disk", 51, 2, _swiftEmptyArrayStorage);
    URL.appendingPathComponent(_:isDirectory:)(0xD000000000000018, 0x8000000100EC7470, 0);
    v14 = Data.init(contentsOf:options:)(v10, 0);
    v16 = v15;
    v17 = type metadata accessor for PropertyListDecoder(0);
    v18 = swift_allocObject(v17, *(unsigned int *)(v17 + 48), *(unsigned __int16 *)(v17 + 52));
    PropertyListDecoder.init()(v18);
    v19 = sub_1000A157C();
    dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(&type metadata for Configuration, v14, v16, &type metadata for Configuration, v19);
    swift_release();
    v20 = v29[0];
    sub_1006BBC88((uint64_t)v6);
    v21 = sub_100C1ABE8((uint64_t)v6, v20);
    swift_bridgeObjectRelease();
    sub_1000126B0((uint64_t)v6, type metadata accessor for DefaultConfigurationLayer);
    if ((v26 & 1) != 0)
    {
      swift_beginAccess(v11, v28, 0, 0);
      Strong = swift_weakLoadStrong(v11);
      if (Strong)
      {
        v23 = *(_QWORD *)(Strong + 56);
        swift_bridgeObjectRetain(v23);
        swift_release();
        swift_beginAccess(v11, v27, 0, 0);
        if (swift_weakLoadStrong(v11))
        {
          sub_10008E0E4(v23, (uint64_t)v21);
          swift_release();
        }
        swift_bridgeObjectRelease();
      }
    }
    swift_beginAccess(v11, v29, 0, 0);
    v24 = swift_weakLoadStrong(v11);
    sub_10001BC14(v14, v16);
    if (v24)
    {
      swift_release();
      (*(void (**)(_BYTE *, uint64_t))(v8 + 8))(v10, v7);
      *(_QWORD *)(v24 + 56) = v21;
      swift_release();
      return swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_release();
      return (*(uint64_t (**)(_BYTE *, uint64_t))(v8 + 8))(v10, v7);
    }
  }
  return result;
}

uint64_t sub_10008E0E4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t result;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  char v51;
  char v52;
  uint64_t KeyPath;
  uint64_t v54;
  uint64_t v55;
  double v56;
  double v57;
  double v58;
  uint64_t v59;
  double v60;
  double v61;
  double v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  char v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  char v85;
  uint64_t v86;
  int v87;
  char v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  double v101;
  double v102;
  double v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  double v111;
  double v112;
  double v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char v123;
  uint64_t v124;
  int v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  char v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  int v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  double v167;
  double v168;
  double v169;
  uint64_t v170;
  double v171;
  double v172;
  double v173;
  uint64_t v174;
  void *v175;
  void *v176;
  char v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  char v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  _QWORD *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  int v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t (*v201)(uint64_t, uint64_t, uint64_t);
  int v202;
  uint64_t v203;
  _QWORD *v204;
  _QWORD *v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  unsigned int (*v211)(uint64_t, uint64_t, uint64_t);
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  char v216;
  char v217;
  uint64_t v218;
  char v219;
  uint64_t v220;
  _QWORD *v221;
  _QWORD *v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  double v232;
  double v233;
  double v234;
  uint64_t v235;
  double v236;
  double v237;
  double v238;
  uint64_t v239;
  double v240;
  double v241;
  double v242;
  uint64_t v243;
  double v244;
  double v245;
  double v246;
  uint64_t v247;
  char v248;
  uint64_t v249;
  int v250;
  uint64_t v251;
  int v252;
  uint64_t v253;
  int v254;
  uint64_t v255;
  double v256;
  double v257;
  double v258;
  uint64_t v259;
  double v260;
  double v261;
  double v262;
  uint64_t v263;
  double v264;
  double v265;
  double v266;
  uint64_t v267;
  double v268;
  double v269;
  double v270;
  uint64_t v271;
  double v272;
  double v273;
  double v274;
  uint64_t v275;
  double v276;
  double v277;
  double v278;
  uint64_t v279;
  double v280;
  double v281;
  double v282;
  uint64_t v283;
  int v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  double v288;
  double v289;
  double v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  char v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  char v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  char v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  char v326;
  uint64_t v327;
  double v328;
  double v329;
  double v330;
  uint64_t v331;
  int v332;
  uint64_t v333;
  int v334;
  uint64_t v335;
  int v336;
  uint64_t v337;
  int v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  double v350;
  double v351;
  double v352;
  uint64_t v353;
  double v354;
  double v355;
  double v356;
  uint64_t v357;
  double v358;
  double v359;
  double v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  double v370;
  double v371;
  double v372;
  uint64_t v373;
  double v374;
  double v375;
  double v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  double v394;
  double v395;
  double v396;
  uint64_t v397;
  int v398;
  uint64_t v399;
  double v400;
  double v401;
  double v402;
  uint64_t v403;
  double v404;
  double v405;
  double v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  int v410;
  uint64_t v411;
  int v412;
  uint64_t v413;
  int v414;
  uint64_t v415;
  uint64_t v416;
  uint64_t v417;
  double v418;
  double v419;
  double v420;
  uint64_t v421;
  double v422;
  double v423;
  double v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  double v434;
  double v435;
  double v436;
  uint64_t v437;
  int v438;
  uint64_t v439;
  double v440;
  double v441;
  double v442;
  uint64_t v443;
  double v444;
  double v445;
  double v446;
  uint64_t v447;
  _QWORD *v448;
  _QWORD *v449;
  BOOL v450;
  uint64_t v451;
  int v452;
  uint64_t v453;
  int v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  char v458;
  uint64_t v459;
  double v460;
  double v461;
  double v462;
  uint64_t v463;
  double v464;
  double v465;
  double v466;
  uint64_t v467;
  int v468;
  uint64_t v469;
  int v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t v484;
  uint64_t v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t v498;
  uint64_t v499;
  uint64_t v500;
  uint64_t v501;
  double v502;
  double v503;
  double v504;
  uint64_t v505;
  double v506;
  double v507;
  double v508;
  uint64_t v509;
  int v510;
  uint64_t v511;
  double v512;
  double v513;
  double v514;
  uint64_t v515;
  double v516;
  double v517;
  double v518;
  uint64_t v519;
  int v520;
  uint64_t v521;
  int v522;
  uint64_t v523;
  int v524;
  uint64_t v525;
  uint64_t v526;
  uint64_t v527;
  double v528;
  double v529;
  double v530;
  uint64_t v531;
  double v532;
  double v533;
  double v534;
  uint64_t v535;
  double v536;
  double v537;
  double v538;
  uint64_t v539;
  double v540;
  double v541;
  double v542;
  uint64_t v543;
  double v544;
  double v545;
  double v546;
  uint64_t v547;
  double v548;
  double v549;
  double v550;
  uint64_t v551;
  int v552;
  uint64_t v553;
  double v554;
  double v555;
  double v556;
  uint64_t v557;
  double v558;
  double v559;
  double v560;
  uint64_t v561;
  char *v562;
  uint64_t v563;
  char v564;
  void (*v565)(char *, uint64_t);
  uint64_t v566;
  char *v567;
  uint64_t v568;
  char v569;
  void (*v570)(char *, uint64_t);
  uint64_t v571;
  uint64_t v572;
  char *v573;
  uint64_t v574;
  char v575;
  void (*v576)(char *, uint64_t);
  char *v577;
  char *v578;
  uint64_t v579;
  uint64_t v580;
  char *v581;
  uint64_t v582;
  uint64_t v583;
  uint64_t v584;
  _QWORD *v585;
  uint64_t v586;
  _QWORD *v587;
  _QWORD *v588;
  _QWORD *v589;
  uint64_t v590;
  uint64_t v591;
  _QWORD *v592;
  uint64_t v593;
  uint64_t v594;
  _QWORD *v595;
  uint64_t v596;
  uint64_t v597;
  _BYTE v598[88];
  _QWORD v599[4];

  v591 = type metadata accessor for Date(0);
  v596 = *(_QWORD *)(v591 - 8);
  __chkstk_darwin(v591);
  v581 = (char *)&v577 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v594 = sub_10001A9A8(&qword_1010ED570);
  v6 = __chkstk_darwin(v594);
  v586 = (uint64_t)&v577 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v590 = (uint64_t)&v577 - v8;
  v9 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  v10 = __chkstk_darwin(v9);
  v580 = (uint64_t)&v577 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v10);
  v585 = (char **)((char *)&v577 - v13);
  v14 = __chkstk_darwin(v12);
  v595 = (char **)((char *)&v577 - v15);
  v16 = __chkstk_darwin(v14);
  v579 = (uint64_t)&v577 - v17;
  v18 = __chkstk_darwin(v16);
  v592 = (char **)((char *)&v577 - v19);
  __chkstk_darwin(v18);
  v589 = (char **)((char *)&v577 - v20);
  v583 = type metadata accessor for UUID(0);
  v584 = *(_QWORD *)(v583 - 8);
  __chkstk_darwin(v583);
  v577 = (char *)&v577 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v582 = sub_10001A9A8((uint64_t *)&unk_10110EE90);
  __chkstk_darwin(v582);
  v593 = (uint64_t)&v577 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = sub_10001A9A8(&qword_1010ED860);
  v24 = __chkstk_darwin(v23);
  v26 = (char *)&v577 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = __chkstk_darwin(v24);
  v587 = (char **)((char *)&v577 - v28);
  __chkstk_darwin(v27);
  v588 = (char **)((char *)&v577 - v29);
  v30 = type metadata accessor for Mirror(0);
  v31 = *(_QWORD *)(v30 - 8);
  __chkstk_darwin(v30);
  v33 = (char *)&v577 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v597 = v2;
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(v2 + 40));
  v35 = static os_log_type_t.default.getter(v34);
  v36 = *sub_100B5D794();
  v37 = sub_100BD1378(0);
  os_log(_:dso:log:_:_:)(v35, &_mh_execute_header, v36, "ConfigurationCoordinator diffing for subscribers...", 51, 2, v37);
  swift_bridgeObjectRelease(v37);
  v38 = swift_allocObject(&unk_1010539A0, 24, 7);
  v599[3] = type metadata accessor for DefaultConfigurationLayer(0);
  v39 = sub_100018F08(v599);
  sub_1006BBC88((uint64_t)v39);
  v40 = Mirror.init(reflecting:)(v599);
  v41 = Mirror.children.getter(v40);
  v42 = (*(uint64_t (**)(char *, uint64_t))(v31 + 8))(v33, v30);
  v43 = dispatch thunk of _AnyCollectionBox._count.getter(v42);
  result = swift_release(v41);
  if (__OFSUB__(v43, 1))
  {
    __break(1u);
    return result;
  }
  *(_QWORD *)(v38 + 16) = v43 - 1;
  v45 = sub_100C1AD5C(a1);
  v47 = v46;
  v48 = sub_100C1AD5C(a2);
  v50 = v49;
  _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v45, v47);
  v52 = v51;
  sub_10001BC14(v48, v50);
  sub_10001BC14(v45, v47);
  if ((v52 & 1) == 0)
  {
    KeyPath = swift_getKeyPath(&unk_100E235E0);
    sub_1000923C0(a2, KeyPath);
    swift_release(KeyPath);
  }
  sub_1000921E8(v38);
  v54 = sub_100C1ADA8(a1);
  if (v54 != sub_100C1ADA8(a2))
  {
    v55 = swift_getKeyPath(&unk_100E23608);
    sub_100092960(a2, v55);
    swift_release(v55);
  }
  sub_1000921E8(v38);
  sub_100C1A83C(a1);
  v57 = v56;
  sub_100C1A83C(a2);
  if (v57 != v58)
  {
    v59 = swift_getKeyPath(&unk_100E23630);
    sub_100092F00(a2, v59);
    swift_release(v59);
  }
  sub_1000921E8(v38);
  sub_100C1ADBC(a1);
  v61 = v60;
  sub_100C1ADBC(a2);
  if (v61 != v62)
  {
    v63 = swift_getKeyPath(&unk_100E23658);
    sub_100092F00(a2, v63);
    swift_release(v63);
  }
  sub_1000921E8(v38);
  v64 = sub_100C1ADC8(a1) & 1;
  if (v64 != (sub_100C1ADC8(a2) & 1))
  {
    v65 = swift_getKeyPath(&unk_100E23680);
    sub_1000934A0(a2, v65);
    swift_release(v65);
  }
  sub_1000921E8(v38);
  v66 = (_QWORD *)sub_100C1ADD4(a1);
  v67 = (_QWORD *)sub_100C1ADD4(a2);
  v68 = sub_1002478F4(v66, v67);
  swift_bridgeObjectRelease(v66);
  swift_bridgeObjectRelease(v67);
  if ((v68 & 1) == 0)
  {
    v69 = swift_getKeyPath(&unk_100E236A8);
    sub_100093A40(a2, v69);
    swift_release(v69);
  }
  sub_1000921E8(v38);
  v70 = sub_100C1ADE8(a1) & 1;
  if (v70 != (sub_100C1ADE8(a2) & 1))
  {
    v71 = swift_getKeyPath(&unk_100E236D0);
    sub_1000934A0(a2, v71);
    swift_release(v71);
  }
  sub_1000921E8(v38);
  v72 = sub_100C1ADF4(a1);
  v74 = v73;
  v76 = sub_100C1ADF4(a2);
  v77 = v75;
  if (v72 == v76 && v74 == v75)
  {
    swift_bridgeObjectRelease_n(v74, 2);
  }
  else
  {
    v78 = _stringCompareWithSmolCheck(_:_:expecting:)(v72, v74, v76, v75, 0);
    swift_bridgeObjectRelease(v74);
    swift_bridgeObjectRelease(v77);
    if ((v78 & 1) == 0)
    {
      v79 = swift_getKeyPath(&unk_100E236F8);
      sub_100093FE0(a2, v79);
      swift_release(v79);
    }
  }
  sub_1000921E8(v38);
  v80 = sub_100C1AE00(a1);
  v81 = sub_100C1AE00(a2);
  v82 = v583;
  if (v80 != v81)
  {
    v83 = swift_getKeyPath(&unk_100E23720);
    sub_100094580(a2, v83);
    swift_release(v83);
  }
  sub_1000921E8(v38);
  v84 = sub_100C1AE14(a1) & 1;
  v85 = sub_100C1AE14(a2);
  v578 = v26;
  if (v84 != (v85 & 1))
  {
    v86 = swift_getKeyPath(&unk_100E23748);
    sub_1000934A0(a2, v86);
    swift_release(v86);
  }
  sub_1000921E8(v38);
  v87 = sub_100C1AE20(a1) & 1;
  v88 = sub_100C1AE20(a2);
  v89 = v587;
  if (v87 != (v88 & 1))
  {
    v90 = swift_getKeyPath(&unk_100E23770);
    sub_1000934A0(a2, v90);
    swift_release(v90);
  }
  sub_1000921E8(v38);
  v91 = sub_100C1AE2C(a1);
  if (v91 != sub_100C1AE2C(a2))
  {
    v92 = swift_getKeyPath(&unk_100E23798);
    sub_100094580(a2, v92);
    swift_release(v92);
  }
  sub_1000921E8(v38);
  v93 = sub_100C1A848(a1);
  if (v93 != sub_100C1A848(a2))
  {
    v94 = swift_getKeyPath(&unk_100E237C0);
    sub_100094580(a2, v94);
    swift_release(v94);
  }
  sub_1000921E8(v38);
  v95 = sub_100C1AE40(a1);
  if (v95 != sub_100C1AE40(a2))
  {
    v96 = swift_getKeyPath(&unk_100E237E8);
    sub_100094580(a2, v96);
    swift_release(v96);
  }
  sub_1000921E8(v38);
  v97 = sub_100C1AE54(a1);
  if (v97 != sub_100C1AE54(a2))
  {
    v98 = swift_getKeyPath(&unk_100E23810);
    sub_100094580(a2, v98);
    swift_release(v98);
  }
  sub_1000921E8(v38);
  v99 = sub_100C1AE68(a1);
  if (v99 != sub_100C1AE68(a2))
  {
    v100 = swift_getKeyPath(&unk_100E23838);
    sub_100094580(a2, v100);
    swift_release(v100);
  }
  sub_1000921E8(v38);
  sub_100C1AE7C(a1);
  v102 = v101;
  sub_100C1AE7C(a2);
  if (v102 != v103)
  {
    v104 = swift_getKeyPath(&unk_100E23860);
    sub_100092F00(a2, v104);
    swift_release(v104);
  }
  sub_1000921E8(v38);
  v105 = sub_100C1AE88(a1);
  if (v105 != sub_100C1AE88(a2))
  {
    v106 = swift_getKeyPath(&unk_100E23888);
    sub_100094580(a2, v106);
    swift_release(v106);
  }
  sub_1000921E8(v38);
  v107 = sub_100C1AE9C(a1);
  if (v107 != sub_100C1AE9C(a2))
  {
    v108 = swift_getKeyPath(&unk_100E238B0);
    sub_100094580(a2, v108);
    swift_release(v108);
  }
  sub_1000921E8(v38);
  v109 = sub_100C1AEB0(a1);
  if (v109 != sub_100C1AEB0(a2))
  {
    v110 = swift_getKeyPath(&unk_100E238D8);
    sub_100092960(a2, v110);
    swift_release(v110);
  }
  sub_1000921E8(v38);
  sub_100C1AEC4(a1);
  v112 = v111;
  sub_100C1AEC4(a2);
  if (v112 != v113)
  {
    v114 = swift_getKeyPath(&unk_100E23900);
    sub_100092F00(a2, v114);
    swift_release(v114);
  }
  sub_1000921E8(v38);
  v115 = sub_100C1AED0(a1);
  if (v115 != sub_100C1AED0(a2))
  {
    v116 = swift_getKeyPath(&unk_100E23928);
    sub_100094580(a2, v116);
    swift_release(v116);
  }
  sub_1000921E8(v38);
  v117 = sub_100C1AEE4(a1);
  if (v117 != sub_100C1AEE4(a2))
  {
    v118 = swift_getKeyPath(&unk_100E23950);
    sub_100094580(a2, v118);
    swift_release(v118);
  }
  sub_1000921E8(v38);
  v119 = sub_100C1AEF8(a1);
  if (v119 != sub_100C1AEF8(a2))
  {
    v120 = swift_getKeyPath(&unk_100E23978);
    sub_100094580(a2, v120);
    swift_release(v120);
  }
  sub_1000921E8(v38);
  v121 = sub_100C1AF0C(a1);
  v122 = sub_100C1AF0C(a2);
  v123 = sub_1002486C4(v121, v122);
  swift_bridgeObjectRelease(v121);
  swift_bridgeObjectRelease(v122);
  if ((v123 & 1) == 0)
  {
    v124 = swift_getKeyPath(&unk_100E239A0);
    sub_100094B20(a2, v124);
    swift_release(v124);
  }
  sub_1000921E8(v38);
  v125 = sub_100C1AF20(a1) & 1;
  if (v125 != (sub_100C1AF20(a2) & 1))
  {
    v126 = swift_getKeyPath(&unk_100E239C8);
    sub_1000934A0(a2, v126);
    swift_release(v126);
  }
  sub_1000921E8(v38);
  v127 = sub_100C1AF2C(a1);
  v128 = sub_100C1AF2C(a2);
  v129 = sub_100325BB8(v127, v128);
  swift_bridgeObjectRelease(v127);
  swift_bridgeObjectRelease(v128);
  if ((v129 & 1) == 0)
  {
    v130 = swift_getKeyPath(&unk_100E239F0);
    sub_1000950C0(a2, v130);
    swift_release(v130);
  }
  sub_1000921E8(v38);
  v131 = sub_100C1AF40(a1);
  if (v131 != sub_100C1AF40(a2))
  {
    v132 = swift_getKeyPath(&unk_100E23A18);
    sub_100094580(a2, v132);
    swift_release(v132);
  }
  sub_1000921E8(v38);
  v133 = sub_100C1AF54(a1);
  if (v133 != sub_100C1AF54(a2))
  {
    v134 = swift_getKeyPath(&unk_100E23A40);
    sub_100094580(a2, v134);
    swift_release(v134);
  }
  sub_1000921E8(v38);
  v135 = sub_100C1AF68(a1);
  if (v135 != sub_100C1AF68(a2))
  {
    v136 = swift_getKeyPath(&unk_100E23A68);
    sub_100094580(a2, v136);
    swift_release(v136);
  }
  sub_1000921E8(v38);
  v137 = sub_100C1AF7C(a1);
  if (v137 != sub_100C1AF7C(a2))
  {
    v138 = swift_getKeyPath(&unk_100E23A90);
    sub_100094580(a2, v138);
    swift_release(v138);
  }
  sub_1000921E8(v38);
  v139 = sub_100C1AF90(a1);
  if (v139 != sub_100C1AF90(a2))
  {
    v140 = swift_getKeyPath(&unk_100E23AB8);
    sub_100094580(a2, v140);
    swift_release(v140);
  }
  sub_1000921E8(v38);
  v141 = sub_100C1AFA4(a1);
  if (v141 != sub_100C1AFA4(a2))
  {
    v142 = swift_getKeyPath(&unk_100E23AE0);
    sub_100094580(a2, v142);
    swift_release(v142);
  }
  sub_1000921E8(v38);
  v143 = sub_100C1AFB8(a1);
  if (v143 != sub_100C1AFB8(a2))
  {
    v144 = swift_getKeyPath(&unk_100E23B08);
    sub_100094580(a2, v144);
    swift_release(v144);
  }
  sub_1000921E8(v38);
  v145 = sub_100C1AFCC(a1);
  if (v145 != sub_100C1AFCC(a2))
  {
    v146 = swift_getKeyPath(&unk_100E23B30);
    sub_100094580(a2, v146);
    swift_release(v146);
  }
  sub_1000921E8(v38);
  v147 = sub_100C1AFE0(a1);
  if (v147 != sub_100C1AFE0(a2))
  {
    v148 = swift_getKeyPath(&unk_100E23B58);
    sub_100094580(a2, v148);
    swift_release(v148);
  }
  sub_1000921E8(v38);
  v149 = sub_100C1AFF4(a1);
  if (v149 != sub_100C1AFF4(a2))
  {
    v150 = swift_getKeyPath(&unk_100E23B80);
    sub_100094580(a2, v150);
    swift_release(v150);
  }
  sub_1000921E8(v38);
  v151 = sub_100C1B008(a1) & 1;
  if (v151 != (sub_100C1B008(a2) & 1))
  {
    v152 = swift_getKeyPath(&unk_100E23BA8);
    sub_1000934A0(a2, v152);
    swift_release(v152);
  }
  sub_1000921E8(v38);
  v153 = sub_100C1B014(a1);
  if (v153 != sub_100C1B014(a2))
  {
    v154 = swift_getKeyPath(&unk_100E23BD0);
    sub_100094580(a2, v154);
    swift_release(v154);
  }
  sub_1000921E8(v38);
  v155 = sub_100C1B028(a1);
  if (v155 != sub_100C1B028(a2))
  {
    v156 = swift_getKeyPath(&unk_100E23BF8);
    sub_100094580(a2, v156);
    swift_release(v156);
  }
  sub_1000921E8(v38);
  v157 = sub_100C1B03C(a1);
  if (v157 != sub_100C1B03C(a2))
  {
    v158 = swift_getKeyPath(&unk_100E23C20);
    sub_100094580(a2, v158);
    swift_release(v158);
  }
  sub_1000921E8(v38);
  v159 = sub_100C1B050(a1);
  if (v159 != sub_100C1B050(a2))
  {
    v160 = swift_getKeyPath(&unk_100E23C48);
    sub_100094580(a2, v160);
    swift_release(v160);
  }
  sub_1000921E8(v38);
  v161 = sub_100C1B064(a1);
  if (v161 != sub_100C1B064(a2))
  {
    v162 = swift_getKeyPath(&unk_100E23C70);
    sub_100094580(a2, v162);
    swift_release(v162);
  }
  sub_1000921E8(v38);
  v163 = sub_100C1B078(a1);
  if (v163 != sub_100C1B078(a2))
  {
    v164 = swift_getKeyPath(&unk_100E23C98);
    sub_100094580(a2, v164);
    swift_release(v164);
  }
  sub_1000921E8(v38);
  v165 = sub_100C1B08C(a1);
  if (v165 != sub_100C1B08C(a2))
  {
    v166 = swift_getKeyPath(&unk_100E23CC0);
    sub_100094580(a2, v166);
    swift_release(v166);
  }
  sub_1000921E8(v38);
  sub_100C1B0A0(a1);
  v168 = v167;
  sub_100C1B0A0(a2);
  if (v168 != v169)
  {
    v170 = swift_getKeyPath(&unk_100E23CE8);
    sub_100092F00(a2, v170);
    swift_release(v170);
  }
  sub_1000921E8(v38);
  sub_100C1B0AC(a1);
  v172 = v171;
  sub_100C1B0AC(a2);
  if (v172 != v173)
  {
    v174 = swift_getKeyPath(&unk_100E23D10);
    sub_100092F00(a2, v174);
    swift_release(v174);
  }
  sub_1000921E8(v38);
  v175 = (void *)sub_100C1B0B8(a1);
  v176 = (void *)sub_100C1B0B8(a2);
  v177 = sub_100512454((uint64_t)v175, (uint64_t)v176);

  if ((v177 & 1) == 0)
  {
    v178 = swift_getKeyPath(&unk_100E23D38);
    sub_100095660(a2, v178);
    swift_release(v178);
  }
  sub_1000921E8(v38);
  v179 = sub_100C1B1AC(a1);
  v180 = sub_100C1B1AC(a2);
  v181 = sub_100248830(v179, v180);
  swift_bridgeObjectRelease(v179);
  swift_bridgeObjectRelease(v180);
  if ((v181 & 1) == 0)
  {
    v182 = swift_getKeyPath(&unk_100E23D60);
    sub_100095C00(a2, v182);
    swift_release(v182);
  }
  sub_1000921E8(v38);
  v183 = sub_100C1B1C0(a1);
  if (v183 != sub_100C1B1C0(a2))
  {
    v184 = swift_getKeyPath(&unk_100E23D88);
    sub_100094580(a2, v184);
    swift_release(v184);
  }
  sub_1000921E8(v38);
  v185 = sub_100C1B1D4(a1);
  v186 = sub_100C1B1D4(a2);
  v187 = v588;
  if (v185 != v186)
  {
    v188 = swift_getKeyPath(&unk_100E23DB0);
    sub_100094580(a2, v188);
    swift_release(v188);
  }
  sub_1000921E8(v38);
  v189 = sub_100C1B1E8(a1);
  if (v189 != sub_100C1B1E8(a2))
  {
    v190 = swift_getKeyPath(&unk_100E23DD8);
    sub_100094580(a2, v190);
    swift_release(v190);
  }
  sub_1000921E8(v38);
  v191 = sub_100C1B1FC(a1);
  if (v191 != sub_100C1B1FC(a2))
  {
    v192 = swift_getKeyPath(&unk_100E23E00);
    sub_100094580(a2, v192);
    swift_release(v192);
  }
  sub_1000921E8(v38);
  v193 = sub_100C1B210(a1);
  if (v193 != sub_100C1B210(a2))
  {
    v194 = swift_getKeyPath(&unk_100E23E28);
    sub_100094580(a2, v194);
    swift_release(v194);
  }
  sub_1000921E8(v38);
  v195 = sub_100C1B224(a1) & 1;
  if (v195 != (sub_100C1B224(a2) & 1))
  {
    v196 = swift_getKeyPath(&unk_100E23E50);
    sub_1000934A0(a2, v196);
    swift_release(v196);
  }
  sub_1000921E8(v38);
  sub_100C1A884(a1, v187);
  sub_100C1A884(a2, v89);
  v197 = v593;
  v198 = v593 + *(int *)(v582 + 48);
  sub_10000F9B8((uint64_t)v187, v593, &qword_1010ED860);
  sub_10000F9B8((uint64_t)v89, v198, &qword_1010ED860);
  v199 = v584;
  v200 = (uint64_t)v187;
  v201 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v584 + 48);
  if (v201(v197, 1, v82) == 1)
  {
    sub_100004048((uint64_t)v89, &qword_1010ED860);
    sub_100004048(v200, &qword_1010ED860);
    v202 = v201(v198, 1, v82);
    v203 = v590;
    v204 = v589;
    v205 = v592;
    v206 = v591;
    if (v202 == 1)
    {
      sub_100004048(v593, &qword_1010ED860);
      goto LABEL_122;
    }
    goto LABEL_120;
  }
  v207 = (uint64_t)v578;
  sub_10000F9B8(v197, (uint64_t)v578, &qword_1010ED860);
  if (v201(v198, 1, v82) == 1)
  {
    sub_100004048((uint64_t)v587, &qword_1010ED860);
    sub_100004048((uint64_t)v588, &qword_1010ED860);
    (*(void (**)(uint64_t, uint64_t))(v199 + 8))(v207, v82);
    v203 = v590;
    v204 = v589;
    v206 = v591;
LABEL_120:
    sub_100004048(v593, (uint64_t *)&unk_10110EE90);
LABEL_121:
    v208 = swift_getKeyPath(&unk_100E23E78);
    sub_1000961A0(a2, v208);
    v209 = v208;
    v205 = v592;
    swift_release(v209);
    goto LABEL_122;
  }
  v562 = v577;
  (*(void (**)(char *, uint64_t, uint64_t))(v199 + 32))(v577, v198, v82);
  v563 = sub_100006204(&qword_1010EE520, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v564 = dispatch thunk of static Equatable.== infix(_:_:)(v207, v562, v82, v563);
  v565 = *(void (**)(char *, uint64_t))(v199 + 8);
  v565(v562, v82);
  sub_100004048((uint64_t)v587, &qword_1010ED860);
  sub_100004048((uint64_t)v588, &qword_1010ED860);
  v565((char *)v207, v82);
  sub_100004048(v593, &qword_1010ED860);
  v203 = v590;
  v204 = v589;
  v205 = v592;
  v206 = v591;
  if ((v564 & 1) == 0)
    goto LABEL_121;
LABEL_122:
  sub_1000921E8(v38);
  sub_100C1B230(a1, v204);
  sub_100C1B230(a2, v205);
  v210 = v203 + *(int *)(v594 + 48);
  sub_10000F9B8((uint64_t)v204, v203, (uint64_t *)&unk_1010EA690);
  sub_10000F9B8((uint64_t)v205, v210, (uint64_t *)&unk_1010EA690);
  v211 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v596 + 48);
  if (v211(v203, 1, v206) == 1)
  {
    sub_100004048((uint64_t)v205, (uint64_t *)&unk_1010EA690);
    sub_100004048((uint64_t)v204, (uint64_t *)&unk_1010EA690);
    if (v211(v210, 1, v206) == 1)
    {
      sub_100004048(v590, (uint64_t *)&unk_1010EA690);
      v212 = v586;
      goto LABEL_129;
    }
    goto LABEL_127;
  }
  v213 = v579;
  sub_10000F9B8(v203, v579, (uint64_t *)&unk_1010EA690);
  if (v211(v210, 1, v206) == 1)
  {
    sub_100004048((uint64_t)v592, (uint64_t *)&unk_1010EA690);
    sub_100004048((uint64_t)v589, (uint64_t *)&unk_1010EA690);
    (*(void (**)(uint64_t, uint64_t))(v596 + 8))(v213, v206);
LABEL_127:
    sub_100004048(v590, &qword_1010ED570);
    v212 = v586;
LABEL_128:
    v214 = swift_getKeyPath(&unk_100E23EA0);
    sub_100096740(a2, v214);
    swift_release(v214);
    goto LABEL_129;
  }
  v566 = v596;
  v567 = v581;
  (*(void (**)(char *, uint64_t, uint64_t))(v596 + 32))(v581, v210, v206);
  v568 = sub_100006204(&qword_1010EDA20, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  v569 = dispatch thunk of static Equatable.== infix(_:_:)(v213, v567, v206, v568);
  v570 = *(void (**)(char *, uint64_t))(v566 + 8);
  v570(v567, v591);
  sub_100004048((uint64_t)v592, (uint64_t *)&unk_1010EA690);
  sub_100004048((uint64_t)v589, (uint64_t *)&unk_1010EA690);
  v570((char *)v213, v591);
  v206 = v591;
  sub_100004048(v203, (uint64_t *)&unk_1010EA690);
  v212 = v586;
  if ((v569 & 1) == 0)
    goto LABEL_128;
LABEL_129:
  sub_1000921E8(v38);
  v215 = sub_100C1B24C(a1);
  v217 = v216;
  v218 = sub_100C1B24C(a2);
  if ((v217 & 1) != 0)
  {
    if ((v219 & 1) != 0)
      goto LABEL_135;
    goto LABEL_134;
  }
  if ((v219 & 1) != 0 || v215 != v218)
  {
LABEL_134:
    v220 = swift_getKeyPath(&unk_100E23EC8);
    sub_100096CE0(a2, v220);
    swift_release(v220);
  }
LABEL_135:
  sub_1000921E8(v38);
  v221 = v595;
  sub_100C1B2A0(a1, v595);
  v222 = v585;
  sub_100C1B2A0(a2, v585);
  v223 = v212 + *(int *)(v594 + 48);
  v224 = (uint64_t)v221;
  v225 = (uint64_t)v222;
  sub_10000F9B8(v224, v212, (uint64_t *)&unk_1010EA690);
  sub_10000F9B8((uint64_t)v222, v223, (uint64_t *)&unk_1010EA690);
  if (v211(v212, 1, v206) != 1)
  {
    v226 = v580;
    sub_10000F9B8(v212, v580, (uint64_t *)&unk_1010EA690);
    if (v211(v223, 1, v206) != 1)
    {
      v571 = v596;
      v572 = v225;
      v573 = v581;
      (*(void (**)(char *, uint64_t, uint64_t))(v596 + 32))(v581, v223, v206);
      v574 = sub_100006204(&qword_1010EDA20, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
      v575 = dispatch thunk of static Equatable.== infix(_:_:)(v226, v573, v206, v574);
      v576 = *(void (**)(char *, uint64_t))(v571 + 8);
      v576(v573, v206);
      sub_100004048(v572, (uint64_t *)&unk_1010EA690);
      sub_100004048((uint64_t)v595, (uint64_t *)&unk_1010EA690);
      v576((char *)v226, v206);
      sub_100004048(v586, (uint64_t *)&unk_1010EA690);
      if ((v575 & 1) != 0)
        goto LABEL_142;
      goto LABEL_141;
    }
    sub_100004048(v225, (uint64_t *)&unk_1010EA690);
    sub_100004048((uint64_t)v595, (uint64_t *)&unk_1010EA690);
    (*(void (**)(uint64_t, uint64_t))(v596 + 8))(v226, v206);
LABEL_140:
    sub_100004048(v212, &qword_1010ED570);
LABEL_141:
    v227 = swift_getKeyPath(&unk_100E23EF0);
    sub_100096740(a2, v227);
    swift_release(v227);
    goto LABEL_142;
  }
  sub_100004048((uint64_t)v222, (uint64_t *)&unk_1010EA690);
  sub_100004048((uint64_t)v595, (uint64_t *)&unk_1010EA690);
  if (v211(v223, 1, v206) != 1)
    goto LABEL_140;
  sub_100004048(v212, (uint64_t *)&unk_1010EA690);
LABEL_142:
  sub_1000921E8(v38);
  v228 = sub_100C1B318(a1);
  if (v228 != sub_100C1B318(a2))
  {
    v229 = swift_getKeyPath(&unk_100E23F18);
    sub_100094580(a2, v229);
    swift_release(v229);
  }
  sub_1000921E8(v38);
  v230 = sub_100C1B32C(a1);
  if (v230 != sub_100C1B32C(a2))
  {
    v231 = swift_getKeyPath(&unk_100E23F40);
    sub_100094580(a2, v231);
    swift_release(v231);
  }
  sub_1000921E8(v38);
  sub_100C1B340(a1);
  v233 = v232;
  sub_100C1B340(a2);
  if (v233 != v234)
  {
    v235 = swift_getKeyPath(&unk_100E23F68);
    sub_100092F00(a2, v235);
    swift_release(v235);
  }
  sub_1000921E8(v38);
  sub_100C1B34C(a1);
  v237 = v236;
  sub_100C1B34C(a2);
  if (v237 != v238)
  {
    v239 = swift_getKeyPath(&unk_100E23F90);
    sub_100092F00(a2, v239);
    swift_release(v239);
  }
  sub_1000921E8(v38);
  sub_100C1B358(a1);
  v241 = v240;
  sub_100C1B358(a2);
  if (v241 != v242)
  {
    v243 = swift_getKeyPath(&unk_100E23FB8);
    sub_100092F00(a2, v243);
    swift_release(v243);
  }
  sub_1000921E8(v38);
  sub_100C1B364(a1);
  v245 = v244;
  sub_100C1B364(a2);
  if (v245 != v246)
  {
    v247 = swift_getKeyPath(&unk_100E23FE0);
    sub_100092F00(a2, v247);
    swift_release(v247);
  }
  sub_1000921E8(v38);
  sub_100C1B370(a1, (uint64_t)v598);
  sub_100C1B370(a2, (uint64_t)v599);
  v248 = _s12searchpartyd19AllMacBeaconConfigsV23__derived_struct_equalsySbAC_ACtFZ_0((uint64_t)v598, (uint64_t)v599);
  sub_1000A002C((uint64_t)v599);
  sub_1000A002C((uint64_t)v598);
  if ((v248 & 1) == 0)
  {
    v249 = swift_getKeyPath(&unk_100E24008);
    sub_100097280(a2, v249);
    swift_release(v249);
  }
  sub_1000921E8(v38);
  v250 = sub_100C1B3FC(a1) & 1;
  if (v250 != (sub_100C1B3FC(a2) & 1))
  {
    v251 = swift_getKeyPath(&unk_100E24030);
    sub_1000934A0(a2, v251);
    swift_release(v251);
  }
  sub_1000921E8(v38);
  v252 = sub_100C1B408(a1) & 1;
  if (v252 != (sub_100C1B408(a2) & 1))
  {
    v253 = swift_getKeyPath(&unk_100E24058);
    sub_1000934A0(a2, v253);
    swift_release(v253);
  }
  sub_1000921E8(v38);
  v254 = sub_100C1B414(a1) & 1;
  if (v254 != (sub_100C1B414(a2) & 1))
  {
    v255 = swift_getKeyPath(&unk_100E24080);
    sub_1000934A0(a2, v255);
    swift_release(v255);
  }
  sub_1000921E8(v38);
  sub_100C1B420(a1);
  v257 = v256;
  sub_100C1B420(a2);
  if (v257 != v258)
  {
    v259 = swift_getKeyPath(&unk_100E240A8);
    sub_100092F00(a2, v259);
    swift_release(v259);
  }
  sub_1000921E8(v38);
  sub_100C1B42C(a1);
  v261 = v260;
  sub_100C1B42C(a2);
  if (v261 != v262)
  {
    v263 = swift_getKeyPath(&unk_100E240D0);
    sub_100092F00(a2, v263);
    swift_release(v263);
  }
  sub_1000921E8(v38);
  sub_100C1B438(a1);
  v265 = v264;
  sub_100C1B438(a2);
  if (v265 != v266)
  {
    v267 = swift_getKeyPath(&unk_100E240F8);
    sub_100092F00(a2, v267);
    swift_release(v267);
  }
  sub_1000921E8(v38);
  sub_100C1B444(a1);
  v269 = v268;
  sub_100C1B444(a2);
  if (v269 != v270)
  {
    v271 = swift_getKeyPath(&unk_100E24120);
    sub_100092F00(a2, v271);
    swift_release(v271);
  }
  sub_1000921E8(v38);
  sub_10001ED68(a1);
  v273 = v272;
  sub_10001ED68(a2);
  if (v273 != v274)
  {
    v275 = swift_getKeyPath(&unk_100E24148);
    sub_100092F00(a2, v275);
    swift_release(v275);
  }
  sub_1000921E8(v38);
  sub_100C1B450(a1);
  v277 = v276;
  sub_100C1B450(a2);
  if (v277 != v278)
  {
    v279 = swift_getKeyPath(&unk_100E24170);
    sub_100092F00(a2, v279);
    swift_release(v279);
  }
  sub_1000921E8(v38);
  sub_100C1B45C(a1);
  v281 = v280;
  sub_100C1B45C(a2);
  if (v281 != v282)
  {
    v283 = swift_getKeyPath(&unk_100E24198);
    sub_100092F00(a2, v283);
    swift_release(v283);
  }
  sub_1000921E8(v38);
  v284 = sub_100C1B468(a1) & 1;
  if (v284 != (sub_100C1B468(a2) & 1))
  {
    v285 = swift_getKeyPath(&unk_100E241C0);
    sub_1000934A0(a2, v285);
    swift_release(v285);
  }
  sub_1000921E8(v38);
  v286 = sub_100C1B474(a1);
  if (v286 != sub_100C1B474(a2))
  {
    v287 = swift_getKeyPath(&unk_100E241E8);
    sub_100094580(a2, v287);
    swift_release(v287);
  }
  sub_1000921E8(v38);
  sub_100C1B488(a1);
  v289 = v288;
  sub_100C1B488(a2);
  if (v289 != v290)
  {
    v291 = swift_getKeyPath(&unk_100E24210);
    sub_100092F00(a2, v291);
    swift_release(v291);
  }
  sub_1000921E8(v38);
  v292 = sub_100C1B494(a1);
  v294 = v293;
  v296 = sub_100C1B494(a2);
  v297 = v295;
  if (v292 == v296 && v294 == v295)
  {
    swift_bridgeObjectRelease_n(v294, 2);
  }
  else
  {
    v298 = _stringCompareWithSmolCheck(_:_:expecting:)(v292, v294, v296, v295, 0);
    swift_bridgeObjectRelease(v294);
    swift_bridgeObjectRelease(v297);
    if ((v298 & 1) == 0)
    {
      v299 = swift_getKeyPath(&unk_100E24238);
      sub_100093FE0(a2, v299);
      swift_release(v299);
    }
  }
  sub_1000921E8(v38);
  v300 = sub_100C1B4A0(a1);
  v302 = v301;
  v304 = sub_100C1B4A0(a2);
  v305 = v303;
  if (v300 == v304 && v302 == v303)
  {
    swift_bridgeObjectRelease_n(v302, 2);
  }
  else
  {
    v306 = _stringCompareWithSmolCheck(_:_:expecting:)(v300, v302, v304, v303, 0);
    swift_bridgeObjectRelease(v302);
    swift_bridgeObjectRelease(v305);
    if ((v306 & 1) == 0)
    {
      v307 = swift_getKeyPath(&unk_100E24260);
      sub_100093FE0(a2, v307);
      swift_release(v307);
    }
  }
  sub_1000921E8(v38);
  v308 = sub_100C1B4AC(a1);
  if (v308 != sub_100C1B4AC(a2))
  {
    v309 = swift_getKeyPath(&unk_100E24288);
    sub_100094580(a2, v309);
    swift_release(v309);
  }
  sub_1000921E8(v38);
  v310 = sub_100C1B4C0(a1);
  v312 = v311;
  v314 = sub_100C1B4C0(a2);
  v315 = v313;
  if (v310 == v314 && v312 == v313)
  {
    swift_bridgeObjectRelease_n(v312, 2);
  }
  else
  {
    v316 = _stringCompareWithSmolCheck(_:_:expecting:)(v310, v312, v314, v313, 0);
    swift_bridgeObjectRelease(v312);
    swift_bridgeObjectRelease(v315);
    if ((v316 & 1) == 0)
    {
      v317 = swift_getKeyPath(&unk_100E242B0);
      sub_100093FE0(a2, v317);
      swift_release(v317);
    }
  }
  sub_1000921E8(v38);
  v318 = sub_100C1B4CC(a1);
  if (v318 != sub_100C1B4CC(a2))
  {
    v319 = swift_getKeyPath(&unk_100E242D8);
    sub_100094580(a2, v319);
    swift_release(v319);
  }
  sub_1000921E8(v38);
  v320 = sub_100C1B4E0(a1);
  v322 = v321;
  v324 = sub_100C1B4E0(a2);
  v325 = v323;
  if (v320 == v324 && v322 == v323)
  {
    swift_bridgeObjectRelease_n(v322, 2);
  }
  else
  {
    v326 = _stringCompareWithSmolCheck(_:_:expecting:)(v320, v322, v324, v323, 0);
    swift_bridgeObjectRelease(v322);
    swift_bridgeObjectRelease(v325);
    if ((v326 & 1) == 0)
    {
      v327 = swift_getKeyPath(&unk_100E24300);
      sub_100093FE0(a2, v327);
      swift_release(v327);
    }
  }
  sub_1000921E8(v38);
  sub_100C1B5EC(a1);
  v329 = v328;
  sub_100C1B5EC(a2);
  if (v329 != v330)
  {
    v331 = swift_getKeyPath(&unk_100E24328);
    sub_100092F00(a2, v331);
    swift_release(v331);
  }
  sub_1000921E8(v38);
  v332 = sub_100C1B5F8(a1) & 1;
  if (v332 != (sub_100C1B5F8(a2) & 1))
  {
    v333 = swift_getKeyPath(&unk_100E24350);
    sub_1000934A0(a2, v333);
    swift_release(v333);
  }
  sub_1000921E8(v38);
  v334 = sub_100C1B604(a1) & 1;
  if (v334 != (sub_100C1B604(a2) & 1))
  {
    v335 = swift_getKeyPath(&unk_100E24378);
    sub_1000934A0(a2, v335);
    swift_release(v335);
  }
  sub_1000921E8(v38);
  v336 = sub_100C1B610(a1) & 1;
  if (v336 != (sub_100C1B610(a2) & 1))
  {
    v337 = swift_getKeyPath(&unk_100E243A0);
    sub_1000934A0(a2, v337);
    swift_release(v337);
  }
  sub_1000921E8(v38);
  v338 = sub_100C1B61C(a1) & 1;
  if (v338 != (sub_100C1B61C(a2) & 1))
  {
    v339 = swift_getKeyPath(&unk_100E243C8);
    sub_1000934A0(a2, v339);
    swift_release(v339);
  }
  sub_1000921E8(v38);
  v340 = sub_100C1B628(a1);
  if (v340 != sub_100C1B628(a2))
  {
    v341 = swift_getKeyPath(&unk_100E243F0);
    sub_100094580(a2, v341);
    swift_release(v341);
  }
  sub_1000921E8(v38);
  v342 = sub_100C1B63C(a1);
  if (v342 != sub_100C1B63C(a2))
  {
    v343 = swift_getKeyPath(&unk_100E24418);
    sub_100094580(a2, v343);
    swift_release(v343);
  }
  sub_1000921E8(v38);
  v344 = sub_100C1B650(a1);
  if (v344 != sub_100C1B650(a2))
  {
    v345 = swift_getKeyPath(&unk_100E24440);
    sub_100094580(a2, v345);
    swift_release(v345);
  }
  sub_1000921E8(v38);
  v346 = sub_100C1B664(a1);
  if (v346 != sub_100C1B664(a2))
  {
    v347 = swift_getKeyPath(&unk_100E24468);
    sub_100094580(a2, v347);
    swift_release(v347);
  }
  sub_1000921E8(v38);
  v348 = sub_100C1B678(a1);
  if (v348 != sub_100C1B678(a2))
  {
    v349 = swift_getKeyPath(&unk_100E24490);
    sub_100094580(a2, v349);
    swift_release(v349);
  }
  sub_1000921E8(v38);
  sub_100C1B68C(a1);
  v351 = v350;
  sub_100C1B68C(a2);
  if (v351 != v352)
  {
    v353 = swift_getKeyPath(&unk_100E244B8);
    sub_100092F00(a2, v353);
    swift_release(v353);
  }
  sub_1000921E8(v38);
  sub_100C1B698(a1);
  v355 = v354;
  sub_100C1B698(a2);
  if (v355 != v356)
  {
    v357 = swift_getKeyPath(&unk_100E244E0);
    sub_100092F00(a2, v357);
    swift_release(v357);
  }
  sub_1000921E8(v38);
  sub_100C1B6A4(a1);
  v359 = v358;
  sub_100C1B6A4(a2);
  if (v359 != v360)
  {
    v361 = swift_getKeyPath(&unk_100E24508);
    sub_100092F00(a2, v361);
    swift_release(v361);
  }
  sub_1000921E8(v38);
  v362 = sub_100C1A870(a1);
  if (v362 != sub_100C1A870(a2))
  {
    v363 = swift_getKeyPath(&unk_100E24530);
    sub_100094580(a2, v363);
    swift_release(v363);
  }
  sub_1000921E8(v38);
  v364 = sub_100C1B6B0(a1);
  if (v364 != sub_100C1B6B0(a2))
  {
    v365 = swift_getKeyPath(&unk_100E24558);
    sub_100094580(a2, v365);
    swift_release(v365);
  }
  sub_1000921E8(v38);
  v366 = sub_100C1B6C4(a1);
  if (v366 != sub_100C1B6C4(a2))
  {
    v367 = swift_getKeyPath(&unk_100E24580);
    sub_100094580(a2, v367);
    swift_release(v367);
  }
  sub_1000921E8(v38);
  v368 = sub_100C1B6D8(a1);
  if (v368 != sub_100C1B6D8(a2))
  {
    v369 = swift_getKeyPath(&unk_100E245A8);
    sub_100094580(a2, v369);
    swift_release(v369);
  }
  sub_1000921E8(v38);
  sub_100C1B6EC(a1);
  v371 = v370;
  sub_100C1B6EC(a2);
  if (v371 != v372)
  {
    v373 = swift_getKeyPath(&unk_100E245D0);
    sub_100092F00(a2, v373);
    swift_release(v373);
  }
  sub_1000921E8(v38);
  sub_100C1B6F8(a1);
  v375 = v374;
  sub_100C1B6F8(a2);
  if (v375 != v376)
  {
    v377 = swift_getKeyPath(&unk_100E245F8);
    sub_100092F00(a2, v377);
    swift_release(v377);
  }
  sub_1000921E8(v38);
  v378 = sub_100C1B704(a1);
  if (v378 != sub_100C1B704(a2))
  {
    v379 = swift_getKeyPath(&unk_100E24620);
    sub_100094580(a2, v379);
    swift_release(v379);
  }
  sub_1000921E8(v38);
  v380 = sub_100C1B718(a1);
  if (v380 != sub_100C1B718(a2))
  {
    v381 = swift_getKeyPath(&unk_100E24648);
    sub_100094580(a2, v381);
    swift_release(v381);
  }
  sub_1000921E8(v38);
  v382 = sub_100C1B72C(a1);
  if (v382 != sub_100C1B72C(a2))
  {
    v383 = swift_getKeyPath(&unk_100E24670);
    sub_100094580(a2, v383);
    swift_release(v383);
  }
  sub_1000921E8(v38);
  v384 = sub_100C1B740(a1);
  if (v384 != sub_100C1B740(a2))
  {
    v385 = swift_getKeyPath(&unk_100E24698);
    sub_100094580(a2, v385);
    swift_release(v385);
  }
  sub_1000921E8(v38);
  v386 = sub_100C1B754(a1);
  if (v386 != sub_100C1B754(a2))
  {
    v387 = swift_getKeyPath(&unk_100E246C0);
    sub_100094580(a2, v387);
    swift_release(v387);
  }
  sub_1000921E8(v38);
  v388 = sub_100C1B768(a1);
  if (v388 != sub_100C1B768(a2))
  {
    v389 = swift_getKeyPath(&unk_100E246E8);
    sub_100094580(a2, v389);
    swift_release(v389);
  }
  sub_1000921E8(v38);
  v390 = sub_100C1B77C(a1);
  if (v390 != sub_100C1B77C(a2))
  {
    v391 = swift_getKeyPath(&unk_100E24710);
    sub_100094580(a2, v391);
    swift_release(v391);
  }
  sub_1000921E8(v38);
  v392 = sub_100C1B790(a1);
  if (v392 != sub_100C1B790(a2))
  {
    v393 = swift_getKeyPath(&unk_100E24738);
    sub_100094580(a2, v393);
    swift_release(v393);
  }
  sub_1000921E8(v38);
  sub_100C1B7A4(a1);
  v395 = v394;
  sub_100C1B7A4(a2);
  if (v395 != v396)
  {
    v397 = swift_getKeyPath(&unk_100E24760);
    sub_100092F00(a2, v397);
    swift_release(v397);
  }
  sub_1000921E8(v38);
  v398 = sub_100C1B7B0(a1) & 1;
  if (v398 != (sub_100C1B7B0(a2) & 1))
  {
    v399 = swift_getKeyPath(&unk_100E24788);
    sub_1000934A0(a2, v399);
    swift_release(v399);
  }
  sub_1000921E8(v38);
  sub_100C1B7BC(a1);
  v401 = v400;
  sub_100C1B7BC(a2);
  if (v401 != v402)
  {
    v403 = swift_getKeyPath(&unk_100E247B0);
    sub_100092F00(a2, v403);
    swift_release(v403);
  }
  sub_1000921E8(v38);
  sub_100C1B7C8(a1);
  v405 = v404;
  sub_100C1B7C8(a2);
  if (v405 != v406)
  {
    v407 = swift_getKeyPath(&unk_100E247D8);
    sub_100092F00(a2, v407);
    swift_release(v407);
  }
  sub_1000921E8(v38);
  v408 = sub_100C1B7D4(a1);
  if (v408 != sub_100C1B7D4(a2))
  {
    v409 = swift_getKeyPath(&unk_100E24800);
    sub_100094580(a2, v409);
    swift_release(v409);
  }
  sub_1000921E8(v38);
  v410 = sub_100C1B7E8(a1) & 1;
  if (v410 != (sub_100C1B7E8(a2) & 1))
  {
    v411 = swift_getKeyPath(&unk_100E24828);
    sub_1000934A0(a2, v411);
    swift_release(v411);
  }
  sub_1000921E8(v38);
  v412 = sub_100C1B7F4(a1) & 1;
  if (v412 != (sub_100C1B7F4(a2) & 1))
  {
    v413 = swift_getKeyPath(&unk_100E24850);
    sub_1000934A0(a2, v413);
    swift_release(v413);
  }
  sub_1000921E8(v38);
  v414 = sub_100C1B800(a1) & 1;
  if (v414 != (sub_100C1B800(a2) & 1))
  {
    v415 = swift_getKeyPath(&unk_100E24878);
    sub_1000934A0(a2, v415);
    swift_release(v415);
  }
  sub_1000921E8(v38);
  v416 = sub_100C1B80C(a1);
  if (v416 != sub_100C1B80C(a2))
  {
    v417 = swift_getKeyPath(&unk_100E248A0);
    sub_100094580(a2, v417);
    swift_release(v417);
  }
  sub_1000921E8(v38);
  sub_100C1B820(a1);
  v419 = v418;
  sub_100C1B820(a2);
  if (v419 != v420)
  {
    v421 = swift_getKeyPath(&unk_100E248C8);
    sub_100092F00(a2, v421);
    swift_release(v421);
  }
  sub_1000921E8(v38);
  sub_100C1B82C(a1);
  v423 = v422;
  sub_100C1B82C(a2);
  if (v423 != v424)
  {
    v425 = swift_getKeyPath(&unk_100E248F0);
    sub_100092F00(a2, v425);
    swift_release(v425);
  }
  sub_1000921E8(v38);
  v426 = sub_100C1B838(a1);
  if (v426 != sub_100C1B838(a2))
  {
    v427 = swift_getKeyPath(&unk_100E24918);
    sub_100097820(a2, v427);
    swift_release(v427);
  }
  sub_1000921E8(v38);
  v428 = sub_100C1B84C(a1);
  if (v428 != sub_100C1B84C(a2))
  {
    v429 = swift_getKeyPath(&unk_100E24940);
    sub_100097820(a2, v429);
    swift_release(v429);
  }
  sub_1000921E8(v38);
  v430 = sub_100C1B860(a1);
  if (v430 != sub_100C1B860(a2))
  {
    v431 = swift_getKeyPath(&unk_100E24968);
    sub_100097820(a2, v431);
    swift_release(v431);
  }
  sub_1000921E8(v38);
  v432 = sub_100C1B874(a1);
  if (v432 != sub_100C1B874(a2))
  {
    v433 = swift_getKeyPath(&unk_100E24990);
    sub_100097820(a2, v433);
    swift_release(v433);
  }
  sub_1000921E8(v38);
  sub_100C1B888(a1);
  v435 = v434;
  sub_100C1B888(a2);
  if (v435 != v436)
  {
    v437 = swift_getKeyPath(&unk_100E249B8);
    sub_100092F00(a2, v437);
    swift_release(v437);
  }
  sub_1000921E8(v38);
  v438 = sub_100C1B894(a1) & 1;
  if (v438 != (sub_100C1B894(a2) & 1))
  {
    v439 = swift_getKeyPath(&unk_100E249E0);
    sub_1000934A0(a2, v439);
    swift_release(v439);
  }
  sub_1000921E8(v38);
  sub_100C1B8A0(a1);
  v441 = v440;
  sub_100C1B8A0(a2);
  if (v441 != v442)
  {
    v443 = swift_getKeyPath(&unk_100E24A08);
    sub_100092F00(a2, v443);
    swift_release(v443);
  }
  sub_1000921E8(v38);
  sub_100C1B8AC(a1);
  v445 = v444;
  sub_100C1B8AC(a2);
  if (v445 != v446)
  {
    v447 = swift_getKeyPath(&unk_100E24A30);
    sub_100092F00(a2, v447);
    swift_release(v447);
  }
  sub_1000921E8(v38);
  v448 = (_QWORD *)sub_100C1B8B8(a1);
  v449 = (_QWORD *)sub_100C1B8B8(a2);
  v450 = sub_100248904(v448, v449);
  swift_bridgeObjectRelease(v448);
  swift_bridgeObjectRelease(v449);
  if (!v450)
  {
    v451 = swift_getKeyPath(&unk_100E24A58);
    sub_100097DC0(a2, v451);
    swift_release(v451);
  }
  sub_1000921E8(v38);
  v452 = sub_100C1B8CC(a1) & 1;
  if (v452 != (sub_100C1B8CC(a2) & 1))
  {
    v453 = swift_getKeyPath(&unk_100E24A80);
    sub_1000934A0(a2, v453);
    swift_release(v453);
  }
  sub_1000921E8(v38);
  v454 = sub_100C1B8D8(a1) & 1;
  if (v454 != (sub_100C1B8D8(a2) & 1))
  {
    v455 = swift_getKeyPath(&unk_100E24AA8);
    sub_1000934A0(a2, v455);
    swift_release(v455);
  }
  sub_1000921E8(v38);
  v456 = sub_100C1B8E4(a1);
  v457 = sub_100C1B8E4(a2);
  v458 = sub_1003260A8(v456, v457);
  swift_bridgeObjectRelease(v456);
  swift_bridgeObjectRelease(v457);
  if ((v458 & 1) == 0)
  {
    v459 = swift_getKeyPath(&unk_100E24AD0);
    sub_100098360(a2, v459);
    swift_release(v459);
  }
  sub_1000921E8(v38);
  sub_10001ED74(a1);
  v461 = v460;
  sub_10001ED74(a2);
  if (v461 != v462)
  {
    v463 = swift_getKeyPath(&unk_100E24AF8);
    sub_100092F00(a2, v463);
    swift_release(v463);
  }
  sub_1000921E8(v38);
  sub_100C1B9F0(a1);
  v465 = v464;
  sub_100C1B9F0(a2);
  if (v465 != v466)
  {
    v467 = swift_getKeyPath(&unk_100E24B20);
    sub_100092F00(a2, v467);
    swift_release(v467);
  }
  sub_1000921E8(v38);
  v468 = sub_100C1B9FC(a1) & 1;
  if (v468 != (sub_100C1B9FC(a2) & 1))
  {
    v469 = swift_getKeyPath(&unk_100E24B48);
    sub_1000934A0(a2, v469);
    swift_release(v469);
  }
  sub_1000921E8(v38);
  v470 = sub_100C1BA08(a1) & 1;
  if (v470 != (sub_100C1BA08(a2) & 1))
  {
    v471 = swift_getKeyPath(&unk_100E24B70);
    sub_1000934A0(a2, v471);
    swift_release(v471);
  }
  sub_1000921E8(v38);
  v472 = sub_10001ED80(a1);
  if (v472 != sub_10001ED80(a2))
  {
    v473 = swift_getKeyPath(&unk_100E24B98);
    sub_100092960(a2, v473);
    swift_release(v473);
  }
  sub_1000921E8(v38);
  v474 = sub_100C1BA14(a1);
  if (v474 != sub_100C1BA14(a2))
  {
    v475 = swift_getKeyPath(&unk_100E24BC0);
    sub_100092960(a2, v475);
    swift_release(v475);
  }
  sub_1000921E8(v38);
  v476 = sub_100C1BA28(a1);
  if (v476 != sub_100C1BA28(a2))
  {
    v477 = swift_getKeyPath(&unk_100E24BE8);
    sub_100092960(a2, v477);
    swift_release(v477);
  }
  sub_1000921E8(v38);
  v478 = sub_100C1BA3C(a1);
  if (v478 != sub_100C1BA3C(a2))
  {
    v479 = swift_getKeyPath(&unk_100E24C10);
    sub_100092960(a2, v479);
    swift_release(v479);
  }
  sub_1000921E8(v38);
  v480 = sub_100C1A85C(a1);
  if (v480 != sub_100C1A85C(a2))
  {
    v481 = swift_getKeyPath(&unk_100E24C38);
    sub_100092960(a2, v481);
    swift_release(v481);
  }
  sub_1000921E8(v38);
  v482 = sub_100C1BA50(a1);
  if (v482 != sub_100C1BA50(a2))
  {
    v483 = swift_getKeyPath(&unk_100E24C60);
    sub_100092960(a2, v483);
    swift_release(v483);
  }
  sub_1000921E8(v38);
  v484 = sub_100C1BA64(a1);
  if (v484 != sub_100C1BA64(a2))
  {
    v485 = swift_getKeyPath(&unk_100E24C88);
    sub_100092960(a2, v485);
    swift_release(v485);
  }
  sub_1000921E8(v38);
  v486 = sub_100C1BA78(a1);
  if (v486 != sub_100C1BA78(a2))
  {
    v487 = swift_getKeyPath(&unk_100E24CB0);
    sub_100092960(a2, v487);
    swift_release(v487);
  }
  sub_1000921E8(v38);
  v488 = sub_100C1BA8C(a1);
  if (v488 != sub_100C1BA8C(a2))
  {
    v489 = swift_getKeyPath(&unk_100E24CD8);
    sub_100092960(a2, v489);
    swift_release(v489);
  }
  sub_1000921E8(v38);
  v490 = sub_100C1BAA0(a1);
  if (v490 != sub_100C1BAA0(a2))
  {
    v491 = swift_getKeyPath(&unk_100E24D00);
    sub_100092960(a2, v491);
    swift_release(v491);
  }
  sub_1000921E8(v38);
  v492 = sub_100C1BAB4(a1);
  if (v492 != sub_100C1BAB4(a2))
  {
    v493 = swift_getKeyPath(&unk_100E24D28);
    sub_100092960(a2, v493);
    swift_release(v493);
  }
  sub_1000921E8(v38);
  v494 = sub_100C1BAC8(a1);
  if (v494 != sub_100C1BAC8(a2))
  {
    v495 = swift_getKeyPath(&unk_100E24D50);
    sub_100092960(a2, v495);
    swift_release(v495);
  }
  sub_1000921E8(v38);
  v496 = sub_100C1BADC(a1);
  if (v496 != sub_100C1BADC(a2))
  {
    v497 = swift_getKeyPath(&unk_100E24D78);
    sub_100092960(a2, v497);
    swift_release(v497);
  }
  sub_1000921E8(v38);
  v498 = sub_100C1BAF0(a1);
  if (v498 != sub_100C1BAF0(a2))
  {
    v499 = swift_getKeyPath(&unk_100E24DA0);
    sub_100092960(a2, v499);
    swift_release(v499);
  }
  sub_1000921E8(v38);
  v500 = sub_100C1BB04(a1);
  if (v500 != sub_100C1BB04(a2))
  {
    v501 = swift_getKeyPath(&unk_100E24DC8);
    sub_100092960(a2, v501);
    swift_release(v501);
  }
  sub_1000921E8(v38);
  sub_100C1BB18(a1);
  v503 = v502;
  sub_100C1BB18(a2);
  if (v503 != v504)
  {
    v505 = swift_getKeyPath(&unk_100E24DF0);
    sub_100092F00(a2, v505);
    swift_release(v505);
  }
  sub_1000921E8(v38);
  sub_100C1BB24(a1);
  v507 = v506;
  sub_100C1BB24(a2);
  if (v507 != v508)
  {
    v509 = swift_getKeyPath(&unk_100E24E18);
    sub_100092F00(a2, v509);
    swift_release(v509);
  }
  sub_1000921E8(v38);
  v510 = sub_100C1BB30(a1) & 1;
  if (v510 != (sub_100C1BB30(a2) & 1))
  {
    v511 = swift_getKeyPath(&unk_100E24E40);
    sub_1000934A0(a2, v511);
    swift_release(v511);
  }
  sub_1000921E8(v38);
  sub_100C1BB3C(a1);
  v513 = v512;
  sub_100C1BB3C(a2);
  if (v513 != v514)
  {
    v515 = swift_getKeyPath(&unk_100E24E68);
    sub_100092F00(a2, v515);
    swift_release(v515);
  }
  sub_1000921E8(v38);
  sub_100C1BB48(a1);
  v517 = v516;
  sub_100C1BB48(a2);
  if (v517 != v518)
  {
    v519 = swift_getKeyPath(&unk_100E24E90);
    sub_100092F00(a2, v519);
    swift_release(v519);
  }
  sub_1000921E8(v38);
  v520 = sub_100C1BB54(a1) & 1;
  if (v520 != (sub_100C1BB54(a2) & 1))
  {
    v521 = swift_getKeyPath(&unk_100E24EB8);
    sub_1000934A0(a2, v521);
    swift_release(v521);
  }
  sub_1000921E8(v38);
  v522 = sub_100C1BB60(a1) & 1;
  if (v522 != (sub_100C1BB60(a2) & 1))
  {
    v523 = swift_getKeyPath(&unk_100E24EE0);
    sub_1000934A0(a2, v523);
    swift_release(v523);
  }
  sub_1000921E8(v38);
  v524 = sub_100C1BB6C(a1);
  if (v524 != sub_100C1BB6C(a2))
  {
    v525 = swift_getKeyPath(&unk_100E24F08);
    sub_100098900(a2, v525);
    swift_release(v525);
  }
  sub_1000921E8(v38);
  v526 = sub_100C1BC60(a1);
  if (v526 != sub_100C1BC60(a2))
  {
    v527 = swift_getKeyPath(&unk_100E24F30);
    sub_100094580(a2, v527);
    swift_release(v527);
  }
  sub_1000921E8(v38);
  sub_100C1BD6C(a1);
  v529 = v528;
  sub_100C1BD6C(a2);
  if (v529 != v530)
  {
    v531 = swift_getKeyPath(&unk_100E24F58);
    sub_100092F00(a2, v531);
    swift_release(v531);
  }
  sub_1000921E8(v38);
  sub_100C1BD78(a1);
  v533 = v532;
  sub_100C1BD78(a2);
  if (v533 != v534)
  {
    v535 = swift_getKeyPath(&unk_100E24F80);
    sub_100092F00(a2, v535);
    swift_release(v535);
  }
  sub_1000921E8(v38);
  sub_100C1BD84(a1);
  v537 = v536;
  sub_100C1BD84(a2);
  if (v537 != v538)
  {
    v539 = swift_getKeyPath(&unk_100E24FA8);
    sub_100092F00(a2, v539);
    swift_release(v539);
  }
  sub_1000921E8(v38);
  sub_100C1BD90(a1);
  v541 = v540;
  sub_100C1BD90(a2);
  if (v541 != v542)
  {
    v543 = swift_getKeyPath(&unk_100E24FD0);
    sub_100092F00(a2, v543);
    swift_release(v543);
  }
  sub_1000921E8(v38);
  sub_100C1BD9C(a1);
  v545 = v544;
  sub_100C1BD9C(a2);
  if (v545 != v546)
  {
    v547 = swift_getKeyPath(&unk_100E24FF8);
    sub_100092F00(a2, v547);
    swift_release(v547);
  }
  sub_1000921E8(v38);
  sub_100C1BDA8(a1);
  v549 = v548;
  sub_100C1BDA8(a2);
  if (v549 != v550)
  {
    v551 = swift_getKeyPath(&unk_100E25020);
    sub_100092F00(a2, v551);
    swift_release(v551);
  }
  sub_1000921E8(v38);
  v552 = sub_100C1BDB4(a1) & 1;
  if (v552 != (sub_100C1BDB4(a2) & 1))
  {
    v553 = swift_getKeyPath(&unk_100E25048);
    sub_1000934A0(a2, v553);
    swift_release(v553);
  }
  sub_1000921E8(v38);
  sub_100C1BEB8(a1);
  v555 = v554;
  sub_100C1BEB8(a2);
  if (v555 != v556)
  {
    v557 = swift_getKeyPath(&unk_100E25070);
    sub_100092F00(a2, v557);
    swift_release(v557);
  }
  sub_1000921E8(v38);
  sub_100C1BEC4(a1);
  v559 = v558;
  sub_100C1BEC4(a2);
  if (v559 != v560)
  {
    v561 = swift_getKeyPath(&unk_100E25098);
    sub_100092F00(a2, v561);
    swift_release(v561);
  }
  sub_1000921E8(v38);
  return swift_release(v38);
}

