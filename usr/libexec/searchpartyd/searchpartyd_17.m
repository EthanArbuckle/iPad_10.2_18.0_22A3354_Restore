uint64_t sub_1009D6CBC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 504);
  v2 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v3 = (_QWORD *)swift_task_alloc(v2);
  *(_QWORD *)(v0 + 512) = v3;
  v4 = sub_10001A9A8(&qword_1010EE190);
  *v3 = v0;
  v3[1] = sub_1009D6D44;
  return unsafeBlocking<A>(_:)(v0 + 224, sub_1005CD268, v1, v4);
}

uint64_t sub_1009D6D44()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 512));
  swift_release();
  return swift_task_switch(sub_1009D6D9C, *(_QWORD *)(v1 + 504), 0);
}

uint64_t sub_1009D6D9C()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[40];
  swift_release();
  v0[65] = v0[28];
  return swift_task_switch(sub_1009D6DE4, v1, 0);
}

uint64_t sub_1009D6DE4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  _BOOL4 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uid_t v39;
  uint64_t v40;
  void (*v41)(uint64_t, uint64_t, uint64_t);
  uint64_t result;
  _QWORD *v43;
  uint64_t v44;
  __int128 *v45;
  uint64_t (__cdecl *v46)();
  uint64_t v47;

  v1 = v0[65];
  if (*(_QWORD *)(v1 + 16))
  {
    v2 = *(unsigned __int8 *)(v0[50] + 80);
    sub_10005972C(v1 + ((v2 + 32) & ~v2), v0[48], type metadata accessor for OwnedBeaconRecord);
    v3 = 0;
  }
  else
  {
    v3 = 1;
  }
  v45 = (__int128 *)(v0 + 7);
  v4 = v0 + 22;
  v6 = v0[49];
  v5 = v0[50];
  v7 = v0[48];
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 56))(v7, v3, 1, v6);
  swift_bridgeObjectRelease();
  v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v7, 1, v6);
  v9 = v0[61];
  if (v8 == 1)
  {
    sub_100004048(v0[48], (uint64_t *)&unk_1010F47C0);
    v10 = type metadata accessor for DeviceEvent.AttachmentInfo(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
    if (qword_1010EA100 != -1)
      swift_once(&qword_1010EA100, sub_1009B44BC);
    v11 = v0[57];
    v13 = v0[53];
    v12 = v0[54];
    v14 = v0[37];
    v15 = type metadata accessor for Logger(0);
    sub_10001A9E8(v15, (uint64_t)qword_10110F2A8);
    v16 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(v11, v14, v13);
    v17 = Logger.logObject.getter(v16);
    v18 = static os_log_type_t.error.getter(v17);
    v19 = os_log_type_enabled(v17, v18);
    v20 = v0[57];
    v21 = v0[53];
    if (v19)
    {
      v44 = v0[54];
      v22 = swift_slowAlloc(22, -1);
      v23 = swift_slowAlloc(32, -1);
      v47 = v23;
      *(_DWORD *)v22 = 141558275;
      v0[36] = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 36, v0 + 37, v22 + 4, v22 + 12);
      *(_WORD *)(v22 + 12) = 2081;
      v24 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v25 = dispatch thunk of CustomStringConvertible.description.getter(v21, v24);
      v0[35] = sub_100016940(v25, v26, &v47);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 35, v0 + 36, v22 + 14, v22 + 22);
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v20, v21);
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Error could not get self-beacon UUID for device event for beacon: %{private,mask.hash}s.", (uint8_t *)v22, 0x16u);
      swift_arrayDestroy(v23, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v23, -1, -1);
      v4 = v0 + 22;
      swift_slowDealloc(v22, -1, -1);
    }
    else
    {
      (*(void (**)(_QWORD, _QWORD))(v0[54] + 8))(v0[57], v0[53]);
    }

  }
  else
  {
    v27 = v0[60];
    v28 = v0[58];
    v30 = v0[53];
    v29 = v0[54];
    v31 = v0[51];
    v32 = v0[49];
    sub_1000126EC(v0[48], v31, type metadata accessor for OwnedBeaconRecord);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v29 + 16))(v28, v31 + *(int *)(v32 + 20), v30);
    sub_1000126B0(v31, type metadata accessor for OwnedBeaconRecord);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v29 + 32))(v27, v28, v30);
    v33 = type metadata accessor for DeviceEvent.AttachmentInfo(0);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 56))(v27, 0, 1, v33);
    sub_100005CF0(v27, v9, &qword_1010EF480);
  }
  v34 = v0[53];
  v35 = v0[54];
  v37 = v0[46];
  v36 = v0[47];
  v38 = v0[37];
  v39 = getuid();
  sub_100A06500(v39);
  v40 = v36 + *(int *)(v37 + 20);
  v41 = *(void (**)(uint64_t, uint64_t, uint64_t))(v35 + 16);
  v0[66] = v41;
  v41(v40, v38, v34);
  if (qword_1010EA5B0 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v4, 0, 0);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, (uint64_t)v45, &qword_1010EE220);
  if (v0[10])
  {
    sub_10000F9FC(v45, (uint64_t)(v0 + 17));
    sub_10001AA44(v0 + 17, v0[20]);
    v46 = (uint64_t (__cdecl *)())((char *)&dword_1010EBC00 + dword_1010EBC00);
    v43 = (_QWORD *)swift_task_alloc(unk_1010EBC04);
    v0[67] = v43;
    *v43 = v0;
    v43[1] = sub_1009D7254;
    return v46();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1009D7254(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 536);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 320);
  *(_QWORD *)(*(_QWORD *)v1 + 544) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1009D72B4, v3, 0);
}

uint64_t sub_1009D72B4()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  _BOOL4 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  os_log_t log;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v1 = (_QWORD *)(v0 + 136);
  v2 = *(_QWORD *)(v0 + 488);
  v3 = *(_QWORD *)(v0 + 376);
  if (*(_QWORD *)(v0 + 544))
  {
    v5 = *(int **)(v0 + 352);
    v4 = *(_QWORD *)(v0 + 360);
    v6 = *(_QWORD *)(v0 + 328);
    v7 = *(_QWORD *)(v0 + 336);
    v8 = *(_QWORD *)(v0 + 304);
    v9 = *(_BYTE *)(v0 + 572);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v4 + v5[6], v8, v6);
    v10 = v4 + v5[7];
    v11 = type metadata accessor for DeviceEvent.Location(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v10, 1, 1, v11);
    sub_10000F9B8(v2, v4 + v5[8], &qword_1010EF480);
    sub_10005972C(v3, v4 + v5[9], type metadata accessor for BeaconIdentifier);
    static Date.trustedNow.getter(v4 + v5[10]);
    *(_QWORD *)v4 = 0;
    *(_BYTE *)(v4 + 8) = 1;
    *(_BYTE *)(v4 + 9) = v9;
    v12 = (_QWORD *)swift_task_alloc(dword_10111BB0C);
    *(_QWORD *)(v0 + 552) = v12;
    *v12 = v0;
    v12[1] = sub_1009D7790;
    return sub_100C67B74(*(_QWORD *)(v0 + 360));
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    v14 = sub_100350CCC();
    v15 = swift_allocError(&type metadata for PencilPairingService.Error, v14, 0, 0);
    *(_OWORD *)v16 = xmmword_100E58200;
    *(_BYTE *)(v16 + 16) = 3;
    swift_willThrow(v15);
    sub_1000126B0(v3, type metadata accessor for BeaconIdentifier);
    sub_100004048(v2, &qword_1010EF480);
    if (qword_1010EA100 != -1)
      swift_once(&qword_1010EA100, sub_1009B44BC);
    v18 = *(_QWORD *)(v0 + 432);
    v17 = *(_QWORD *)(v0 + 440);
    v19 = *(_QWORD *)(v0 + 424);
    v20 = *(_QWORD *)(v0 + 296);
    v21 = type metadata accessor for Logger(0);
    sub_10001A9E8(v21, (uint64_t)qword_10110F2A8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 16))(v17, v20, v19);
    swift_errorRetain(v15);
    v22 = swift_errorRetain(v15);
    v23 = Logger.logObject.getter(v22);
    v24 = static os_log_type_t.error.getter(v23);
    v25 = os_log_type_enabled(v23, v24);
    v27 = *(_QWORD *)(v0 + 432);
    v26 = *(_QWORD *)(v0 + 440);
    v28 = *(_QWORD *)(v0 + 424);
    if (v25)
    {
      v45 = *(_QWORD *)(v0 + 432);
      v29 = swift_slowAlloc(32, -1);
      v44 = (uint64_t *)swift_slowAlloc(8, -1);
      v48 = swift_slowAlloc(32, -1);
      v50 = v48;
      *(_DWORD *)v29 = 138543875;
      swift_errorRetain(v15);
      v30 = _swift_stdlib_bridgeErrorToNSError(v15);
      *(_QWORD *)(v0 + 232) = v30;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 232, v0 + 240, v29 + 4, v29 + 12);
      *v44 = v30;
      swift_errorRelease(v15);
      swift_errorRelease(v15);
      *(_WORD *)(v29 + 12) = 2160;
      *(_QWORD *)(v0 + 240) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 240, v0 + 248, v29 + 14, v29 + 22);
      *(_WORD *)(v29 + 22) = 2081;
      v31 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v32 = dispatch thunk of CustomStringConvertible.description.getter(v28, v31);
      *(_QWORD *)(v0 + 248) = sub_100016940(v32, v33, &v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 248, v0 + 256, v29 + 24, v29 + 32);
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v26, v28);
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Error while saving peripheral event: %{public}@, beacon: %{private,mask.hash}s.", (uint8_t *)v29, 0x20u);
      v34 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
      swift_arrayDestroy(v44, 1, v34);
      swift_slowDealloc(v44, -1, -1);
      swift_arrayDestroy(v48, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v48, -1, -1);
      swift_slowDealloc(v29, -1, -1);

      swift_errorRelease(v15);
    }
    else
    {
      swift_errorRelease(v15);
      swift_errorRelease(v15);
      swift_errorRelease(v15);
      (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v26, v28);

    }
    v35 = *(_QWORD *)(v0 + 480);
    v37 = *(_QWORD *)(v0 + 464);
    v36 = *(_QWORD *)(v0 + 472);
    v39 = *(_QWORD *)(v0 + 448);
    v38 = *(_QWORD *)(v0 + 456);
    v40 = *(_QWORD *)(v0 + 440);
    v42 = *(_QWORD *)(v0 + 408);
    v41 = *(_QWORD *)(v0 + 416);
    v43 = *(_QWORD *)(v0 + 384);
    v46 = *(_QWORD *)(v0 + 376);
    log = *(os_log_t *)(v0 + 360);
    v49 = *(_QWORD *)(v0 + 344);
    swift_task_dealloc(*(_QWORD *)(v0 + 488));
    swift_task_dealloc(v35);
    swift_task_dealloc(v36);
    swift_task_dealloc(v37);
    swift_task_dealloc(v38);
    swift_task_dealloc(v39);
    swift_task_dealloc(v40);
    swift_task_dealloc(v41);
    swift_task_dealloc(v42);
    swift_task_dealloc(v43);
    swift_task_dealloc(v46);
    swift_task_dealloc(log);
    swift_task_dealloc(v49);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1009D7790()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 552);
  *(_QWORD *)(*v1 + 560) = v0;
  swift_task_dealloc(v3);
  v4 = *(_QWORD *)(v2 + 360);
  v5 = *(_QWORD *)(v2 + 320);
  sub_1000126B0(v4, type metadata accessor for DeviceEvent);
  swift_release();
  if (v0)
    v6 = sub_1009D7BD8;
  else
    v6 = sub_1009D781C;
  return swift_task_switch(v6, v5, 0);
}

uint64_t sub_1009D781C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  double v4;
  uint64_t (*v5)(uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  _BOOL4 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v2 = *(_QWORD *)(v0 + 336);
  v1 = *(_QWORD *)(v0 + 344);
  v3 = *(_QWORD *)(v0 + 328);
  static Date.trustedNow.getter(v1);
  v4 = Date.timeIntervalSince(_:)(v1);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  if (v4 <= 1.0)
  {
    v24 = *(_QWORD *)(v0 + 488);
    sub_1000126B0(*(_QWORD *)(v0 + 376), type metadata accessor for BeaconIdentifier);
    v23 = v24;
  }
  else
  {
    if (qword_1010EA100 != -1)
      swift_once(&qword_1010EA100, sub_1009B44BC);
    v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 528);
    v6 = *(_QWORD *)(v0 + 448);
    v7 = *(_QWORD *)(v0 + 424);
    v8 = *(_QWORD *)(v0 + 296);
    v9 = type metadata accessor for Logger(0);
    sub_10001A9E8(v9, (uint64_t)qword_10110F2A8);
    v10 = v5(v6, v8, v7);
    v11 = Logger.logObject.getter(v10);
    v12 = static os_log_type_t.default.getter(v11);
    v13 = os_log_type_enabled(v11, v12);
    v14 = *(_QWORD *)(v0 + 488);
    v15 = *(_QWORD *)(v0 + 448);
    v17 = *(_QWORD *)(v0 + 424);
    v16 = *(_QWORD *)(v0 + 432);
    v18 = *(_QWORD *)(v0 + 376);
    if (v13)
    {
      v38 = *(_QWORD *)(v0 + 376);
      v35 = *(unsigned __int8 *)(v0 + 572);
      v19 = swift_slowAlloc(38, -1);
      v36 = swift_slowAlloc(32, -1);
      v41 = v36;
      *(_DWORD *)v19 = 141558787;
      *(_QWORD *)(v0 + 256) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 256, v0 + 264, v19 + 4, v19 + 12);
      *(_WORD *)(v19 + 12) = 2081;
      v20 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v21 = dispatch thunk of CustomStringConvertible.description.getter(v17, v20);
      *(_QWORD *)(v0 + 264) = sub_100016940(v21, v22, &v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 264, v0 + 272, v19 + 14, v19 + 22);
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v15, v17);
      *(_WORD *)(v19 + 22) = 2048;
      *(double *)(v0 + 272) = v4;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 272, v0 + 280, v19 + 24, v19 + 32);
      *(_WORD *)(v19 + 32) = 1026;
      *(_DWORD *)(v0 + 568) = v35;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 568, v0 + 572, v19 + 34, v19 + 38);
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Device event for beacon: %{private,mask.hash}s stored in %fs, source: %{public}u.", (uint8_t *)v19, 0x26u);
      swift_arrayDestroy(v36, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v36, -1, -1);
      swift_slowDealloc(v19, -1, -1);

      sub_1000126B0(v38, type metadata accessor for BeaconIdentifier);
    }
    else
    {

      (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v15, v17);
      sub_1000126B0(v18, type metadata accessor for BeaconIdentifier);
    }
    v23 = v14;
  }
  sub_100004048(v23, &qword_1010EF480);
  v25 = *(_QWORD *)(v0 + 480);
  v27 = *(_QWORD *)(v0 + 464);
  v26 = *(_QWORD *)(v0 + 472);
  v29 = *(_QWORD *)(v0 + 448);
  v28 = *(_QWORD *)(v0 + 456);
  v30 = *(_QWORD *)(v0 + 440);
  v32 = *(_QWORD *)(v0 + 408);
  v31 = *(_QWORD *)(v0 + 416);
  v33 = *(_QWORD *)(v0 + 384);
  v37 = *(_QWORD *)(v0 + 376);
  v39 = *(_QWORD *)(v0 + 360);
  v40 = *(_QWORD *)(v0 + 344);
  swift_task_dealloc(*(_QWORD *)(v0 + 488));
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v37);
  swift_task_dealloc(v39);
  swift_task_dealloc(v40);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1009D7BD8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  _BOOL4 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  os_log_t log;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v1 = *(_QWORD *)(v0 + 488);
  sub_1000126B0(*(_QWORD *)(v0 + 376), type metadata accessor for BeaconIdentifier);
  sub_100004048(v1, &qword_1010EF480);
  v2 = *(_QWORD *)(v0 + 560);
  if (qword_1010EA100 != -1)
    swift_once(&qword_1010EA100, sub_1009B44BC);
  v4 = *(_QWORD *)(v0 + 432);
  v3 = *(_QWORD *)(v0 + 440);
  v5 = *(_QWORD *)(v0 + 424);
  v6 = *(_QWORD *)(v0 + 296);
  v7 = type metadata accessor for Logger(0);
  sub_10001A9E8(v7, (uint64_t)qword_10110F2A8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v3, v6, v5);
  swift_errorRetain(v2);
  v8 = swift_errorRetain(v2);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.error.getter(v9);
  v11 = os_log_type_enabled(v9, v10);
  v13 = *(_QWORD *)(v0 + 432);
  v12 = *(_QWORD *)(v0 + 440);
  v14 = *(_QWORD *)(v0 + 424);
  if (v11)
  {
    v32 = *(_QWORD *)(v0 + 432);
    v15 = swift_slowAlloc(32, -1);
    v31 = (uint64_t *)swift_slowAlloc(8, -1);
    v35 = swift_slowAlloc(32, -1);
    v37 = v35;
    *(_DWORD *)v15 = 138543875;
    swift_errorRetain(v2);
    v16 = _swift_stdlib_bridgeErrorToNSError(v2);
    *(_QWORD *)(v0 + 232) = v16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 232, v0 + 240, v15 + 4, v15 + 12);
    *v31 = v16;
    swift_errorRelease(v2);
    swift_errorRelease(v2);
    *(_WORD *)(v15 + 12) = 2160;
    *(_QWORD *)(v0 + 240) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 240, v0 + 248, v15 + 14, v15 + 22);
    *(_WORD *)(v15 + 22) = 2081;
    v17 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v18 = dispatch thunk of CustomStringConvertible.description.getter(v14, v17);
    *(_QWORD *)(v0 + 248) = sub_100016940(v18, v19, &v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 248, v0 + 256, v15 + 24, v15 + 32);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v12, v14);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Error while saving peripheral event: %{public}@, beacon: %{private,mask.hash}s.", (uint8_t *)v15, 0x20u);
    v20 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v31, 1, v20);
    swift_slowDealloc(v31, -1, -1);
    swift_arrayDestroy(v35, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v35, -1, -1);
    swift_slowDealloc(v15, -1, -1);

    swift_errorRelease(v2);
  }
  else
  {
    swift_errorRelease(v2);
    swift_errorRelease(v2);
    swift_errorRelease(v2);
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v14);

  }
  v21 = *(_QWORD *)(v0 + 480);
  v23 = *(_QWORD *)(v0 + 464);
  v22 = *(_QWORD *)(v0 + 472);
  v25 = *(_QWORD *)(v0 + 448);
  v24 = *(_QWORD *)(v0 + 456);
  v26 = *(_QWORD *)(v0 + 440);
  v28 = *(_QWORD *)(v0 + 408);
  v27 = *(_QWORD *)(v0 + 416);
  v29 = *(_QWORD *)(v0 + 384);
  v33 = *(_QWORD *)(v0 + 376);
  log = *(os_log_t *)(v0 + 360);
  v36 = *(_QWORD *)(v0 + 344);
  swift_task_dealloc(*(_QWORD *)(v0 + 488));
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v33);
  swift_task_dealloc(log);
  swift_task_dealloc(v36);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1009D7F7C(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  *(_QWORD *)(v4 + 80) = a3;
  *(_QWORD *)(v4 + 88) = a4;
  *(_BYTE *)(v4 + 128) = a2;
  *(_QWORD *)(v4 + 72) = a1;
  v5 = sub_10001A9A8(&qword_1010EF7C0);
  *(_QWORD *)(v4 + 96) = v5;
  v6 = *(_QWORD *)(v5 - 8);
  *(_QWORD *)(v4 + 104) = v6;
  v7 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v4 + 112) = swift_task_alloc(v7);
  *(_QWORD *)(v4 + 120) = swift_task_alloc(v7);
  return swift_task_switch(sub_1009D7FF8, 0, 0);
}

uint64_t sub_1009D7FF8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  _BOOL4 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  _BOOL4 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  _BOOL4 v42;
  uint64_t v43;
  uint8_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  if ((*(_BYTE *)(v0 + 128) & 1) != 0)
  {
    v17 = *(_QWORD *)(v0 + 72);
    swift_errorRetain(v17);
    if (qword_1010EA100 != -1)
      swift_once(&qword_1010EA100, sub_1009B44BC);
    v19 = *(_QWORD *)(v0 + 104);
    v18 = *(_QWORD *)(v0 + 112);
    v20 = *(_QWORD *)(v0 + 96);
    v22 = *(_QWORD *)(v0 + 72);
    v21 = *(_QWORD *)(v0 + 80);
    v23 = type metadata accessor for Logger(0);
    sub_10001A9E8(v23, (uint64_t)qword_10110F2A8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 16))(v18, v21, v20);
    sub_1002437C4(v22, 1);
    v24 = swift_errorRetain(v17);
    v25 = Logger.logObject.getter(v24);
    v26 = static os_log_type_t.error.getter(v25);
    v27 = os_log_type_enabled(v25, v26);
    v29 = *(_QWORD *)(v0 + 104);
    v28 = *(_QWORD *)(v0 + 112);
    v30 = *(_QWORD *)(v0 + 96);
    v31 = *(_QWORD *)(v0 + 72);
    if (v27)
    {
      v48 = v17;
      v32 = swift_slowAlloc(32, -1);
      v49 = (uint64_t *)swift_slowAlloc(8, -1);
      v50 = swift_slowAlloc(64, -1);
      v52 = v50;
      *(_DWORD *)v32 = 136446722;
      *(_QWORD *)(v0 + 32) = sub_100016940(0xD000000000000017, 0x8000000100EEC420, &v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v32 + 4, v32 + 12);
      *(_WORD *)(v32 + 12) = 2082;
      v33 = sub_1000193A4(&qword_1010EE1D0, &qword_1010EF7C0, (const char *)&protocol conformance descriptor for Identifier<A>);
      v34 = dispatch thunk of CustomStringConvertible.description.getter(v30, v33);
      *(_QWORD *)(v0 + 40) = sub_100016940(v34, v35, &v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v32 + 14, v32 + 22);
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v28, v30);
      *(_WORD *)(v32 + 22) = 2114;
      swift_errorRetain(v48);
      v36 = _swift_stdlib_bridgeErrorToNSError(v48);
      *(_QWORD *)(v0 + 48) = v36;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56, v32 + 24, v32 + 32);
      *v49 = v36;
      sub_10010F948(v31, 1);
      sub_10010F948(v31, 1);
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "%{public}s failed for %{public}s. Error %{public}@", (uint8_t *)v32, 0x20u);
      v37 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
      swift_arrayDestroy(v49, 1, v37);
      swift_slowDealloc(v49, -1, -1);
      swift_arrayDestroy(v50, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v50, -1, -1);
      swift_slowDealloc(v32, -1, -1);

      v17 = v48;
      v38 = static Task<>.isCancelled.getter();
      if ((v38 & 1) == 0)
      {
LABEL_10:
        *(_QWORD *)(v0 + 16) = v17;
        v39 = sub_10001A9A8(&qword_101111900);
        CheckedContinuation.resume(throwing:)(v0 + 16, v39);
        goto LABEL_16;
      }
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v28, v30);
      sub_10010F948(v31, 1);
      sub_10010F948(v31, 1);

      v38 = static Task<>.isCancelled.getter();
      if ((v38 & 1) == 0)
        goto LABEL_10;
    }
    v40 = Logger.logObject.getter(v38);
    v41 = static os_log_type_t.error.getter(v40);
    v42 = os_log_type_enabled(v40, v41);
    v43 = *(_QWORD *)(v0 + 72);
    if (v42)
    {
      v44 = (uint8_t *)swift_slowAlloc(12, -1);
      v45 = swift_slowAlloc(32, -1);
      v52 = v45;
      *(_DWORD *)v44 = 136446210;
      *(_QWORD *)(v0 + 24) = sub_100016940(0xD000000000000017, 0x8000000100EEC420, &v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v44 + 4, v44 + 12);
      _os_log_impl((void *)&_mh_execute_header, v40, v41, "%{public}s Not resuming continuation in cancelled task.", v44, 0xCu);
      swift_arrayDestroy(v45, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v45, -1, -1);
      swift_slowDealloc(v44, -1, -1);

      sub_10010F948(v43, 1);
    }
    else
    {
      sub_10010F948(*(_QWORD *)(v0 + 72), 1);

    }
    goto LABEL_16;
  }
  if (qword_1010EA100 != -1)
    swift_once(&qword_1010EA100, sub_1009B44BC);
  v1 = *(_QWORD *)(v0 + 120);
  v2 = *(_QWORD *)(v0 + 96);
  v3 = *(_QWORD *)(v0 + 104);
  v4 = *(_QWORD *)(v0 + 80);
  v5 = type metadata accessor for Logger(0);
  sub_10001A9E8(v5, (uint64_t)qword_10110F2A8);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v1, v4, v2);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.default.getter(v7);
  v9 = os_log_type_enabled(v7, v8);
  v10 = *(_QWORD *)(v0 + 120);
  v11 = *(_QWORD *)(v0 + 96);
  v12 = *(_QWORD *)(v0 + 104);
  if (v9)
  {
    v13 = swift_slowAlloc(22, -1);
    v51 = swift_slowAlloc(64, -1);
    v52 = v51;
    *(_DWORD *)v13 = 136446466;
    *(_QWORD *)(v0 + 56) = sub_100016940(0xD000000000000017, 0x8000000100EEC420, &v52);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 64, v13 + 4, v13 + 12);
    *(_WORD *)(v13 + 12) = 2082;
    v14 = sub_1000193A4(&qword_1010EE1D0, &qword_1010EF7C0, (const char *)&protocol conformance descriptor for Identifier<A>);
    v15 = dispatch thunk of CustomStringConvertible.description.getter(v11, v14);
    *(_QWORD *)(v0 + 64) = sub_100016940(v15, v16, &v52);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72, v13 + 14, v13 + 22);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v10, v11);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "%{public}s succeeded for %{public}s", (uint8_t *)v13, 0x16u);
    swift_arrayDestroy(v51, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v51, -1, -1);
    swift_slowDealloc(v13, -1, -1);

  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v12 + 8))(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 96));

  }
LABEL_16:
  v46 = *(_QWORD *)(v0 + 112);
  swift_task_dealloc(*(_QWORD *)(v0 + 120));
  swift_task_dealloc(v46);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1009D8680(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2[5] = a1;
  v2[6] = v1;
  v2[7] = *v1;
  v3 = sub_10001A9A8(&qword_1010EF7C0);
  v2[8] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[9] = v4;
  v2[10] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1009D86EC, v1, 0);
}

uint64_t sub_1009D86EC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  _BOOL4 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  if (qword_1010EA100 != -1)
    swift_once(&qword_1010EA100, sub_1009B44BC);
  v1 = v0[5];
  v3 = v0[9];
  v2 = v0[10];
  v4 = v0[8];
  v5 = type metadata accessor for Logger(0);
  sub_10001A9E8(v5, (uint64_t)qword_10110F2A8);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v1, v4);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.default.getter(v7);
  v9 = os_log_type_enabled(v7, v8);
  v10 = v0[10];
  v11 = v0[8];
  if (v9)
  {
    v24 = v0[9];
    v12 = swift_slowAlloc(22, -1);
    v25 = swift_slowAlloc(64, -1);
    v26 = v25;
    *(_DWORD *)v12 = 136446466;
    v0[3] = sub_100016940(0xD00000000000001ELL, 0x8000000100EEC400, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 3, v0 + 4, v12 + 4, v12 + 12);
    *(_WORD *)(v12 + 12) = 2082;
    v13 = sub_1000193A4(&qword_1010EE1D0, &qword_1010EF7C0, (const char *)&protocol conformance descriptor for Identifier<A>);
    v14 = dispatch thunk of CustomStringConvertible.description.getter(v11, v13);
    v0[4] = sub_100016940(v14, v15, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 4, v0 + 5, v12 + 14, v12 + 22);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v10, v11);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "%{public}s for identifier %{public}s", (uint8_t *)v12, 0x16u);
    swift_arrayDestroy(v25, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v25, -1, -1);
    swift_slowDealloc(v12, -1, -1);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v0[9] + 8))(v0[10], v0[8]);
  }

  v16 = v0[6];
  v17 = v0[7];
  v18 = v0[5];
  v19 = sub_100006204(&qword_101102BF0, type metadata accessor for PencilPairingService, (uint64_t)&unk_100E5841C);
  v20 = (_QWORD *)swift_task_alloc(48);
  v0[11] = v20;
  v20[2] = v16;
  v20[3] = v18;
  v20[4] = v17;
  v21 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  v0[12] = v21;
  type metadata accessor for SPAccessoryPairingStatus(0);
  *v21 = v0;
  v21[1] = sub_1009D89D0;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 2, v16, v19, 0xD00000000000001ELL, 0x8000000100EEC400, sub_1009F8BE0, v20, v22);
}

uint64_t sub_1009D89D0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 96);
  *(_QWORD *)(*v1 + 104) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = *(_QWORD *)(v2 + 48);
    v5 = sub_1009F9DF8;
  }
  else
  {
    v6 = *(_QWORD *)(v2 + 48);
    swift_task_dealloc(*(_QWORD *)(v2 + 88));
    v5 = sub_1009F9E10;
    v4 = v6;
  }
  return swift_task_switch(v5, v4, 0);
}

uint64_t sub_1009D8A44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4[4] = a3;
  v4[5] = a4;
  v4[2] = a1;
  v4[3] = a2;
  v5 = sub_10001A9A8(&qword_1010EF7C0);
  v4[6] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[7] = v6;
  v7 = *(_QWORD *)(v6 + 64);
  v4[8] = v7;
  v4[9] = swift_task_alloc((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A9A8(&qword_10110FA60);
  v4[10] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v4[11] = v9;
  v10 = *(_QWORD *)(v9 + 64);
  v4[12] = v10;
  v4[13] = swift_task_alloc((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1009D8AE0, 0, 0);
}

uint64_t sub_1009D8AE0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v2 = v0[12];
  v1 = v0[13];
  v3 = v0[10];
  v4 = v0[11];
  v5 = v0[9];
  v19 = v0[8];
  v6 = v0[6];
  v7 = v0[7];
  v20 = v6;
  v21 = v5;
  v8 = v0[4];
  v22 = v0[5];
  v9 = v0[2];
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v4 + 16))(v1, v0[3], v3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v5, v8, v6);
  v10 = *(unsigned __int8 *)(v4 + 80);
  v11 = (v10 + 24) & ~v10;
  v12 = *(unsigned __int8 *)(v7 + 80);
  v13 = (v2 + v12 + v11) & ~v12;
  v14 = (v19 + v13 + 7) & 0xFFFFFFFFFFFFFFF8;
  v15 = swift_allocObject(&unk_1010A1360, v14 + 8, v10 | v12 | 7);
  v0[14] = v15;
  *(_QWORD *)(v15 + 16) = v9;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v15 + v11, v1, v3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(v15 + v13, v21, v20);
  *(_QWORD *)(v15 + v14) = v22;
  v16 = async function pointer to withTimeout<A>(_:block:)[1];
  swift_retain();
  v17 = (_QWORD *)swift_task_alloc(v16);
  v0[15] = v17;
  *v17 = v0;
  v17[1] = sub_1009C9F90;
  return withTimeout<A>(_:block:)(v17, 0x40AAD21B3B700000, 3, &unk_10110FAC8, v15, &type metadata for () + 1);
}

uint64_t sub_1009D8C40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v4[45] = a3;
  v4[46] = a4;
  v4[44] = a2;
  v5 = type metadata accessor for String.Encoding(0);
  v4[47] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10001A9A8((uint64_t *)&unk_1010EDC50);
  v4[48] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for LocalFindableAccessoryRecord(0);
  v4[49] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v4[50] = v8;
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[51] = swift_task_alloc(v9);
  v4[52] = swift_task_alloc(v9);
  v10 = sub_10001A9A8(&qword_1010EF7C0);
  v4[53] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v4[54] = v11;
  v12 = (*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[55] = swift_task_alloc(v12);
  v4[56] = swift_task_alloc(v12);
  v13 = type metadata accessor for UUID(0);
  v4[57] = v13;
  v14 = *(_QWORD *)(v13 - 8);
  v4[58] = v14;
  v4[59] = swift_task_alloc((*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for CentralManager.State(0);
  v4[60] = v15;
  v16 = *(_QWORD *)(v15 - 8);
  v4[61] = v16;
  v4[62] = swift_task_alloc((*(_QWORD *)(v16 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_10001A9A8((uint64_t *)&unk_101116060);
  v4[63] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v17 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1009D8DA8, 0, 0);
}

uint64_t sub_1009D8DA8()
{
  uint64_t v0;
  uint64_t My;
  _QWORD *v2;
  uint64_t v3;
  uint64_t result;
  _QWORD *v5;
  uint64_t (*v6)(void);
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t (*v38)(void);
  uint64_t v39;

  My = type metadata accessor for Feature.FindMy(0);
  *(_QWORD *)(v0 + 40) = My;
  *(_QWORD *)(v0 + 48) = sub_100006204((unint64_t *)&qword_1010EE1B0, (uint64_t (*)(uint64_t))&type metadata accessor for Feature.FindMy, (uint64_t)&protocol conformance descriptor for Feature.FindMy);
  v2 = sub_100018F08((_QWORD *)(v0 + 16));
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(My - 8) + 104))(v2, enum case for Feature.FindMy.lineUp(_:), My);
  LOBYTE(My) = isFeatureEnabled(_:)(v0 + 16);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
  if ((My & 1) == 0)
  {
    if (qword_1010EA100 != -1)
      swift_once(&qword_1010EA100, sub_1009B44BC);
    v7 = type metadata accessor for Logger(0);
    v8 = sub_10001A9E8(v7, (uint64_t)qword_10110F2A8);
    v9 = Logger.logObject.getter(v8);
    v10 = static os_log_type_t.error.getter(v9);
    if (os_log_type_enabled(v9, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Feature.FindMy.lineUp is disabled!", v11, 2u);
      swift_slowDealloc(v11, -1, -1);
    }

    v12 = sub_100350CCC();
    v13 = swift_allocError(&type metadata for PencilPairingService.Error, v12, 0, 0);
    *(_OWORD *)v14 = xmmword_100E2E400;
    *(_BYTE *)(v14 + 16) = 3;
    swift_willThrow(v13);
    v15 = *(_QWORD *)(v0 + 496);
    v16 = *(_QWORD *)(v0 + 472);
    v18 = *(_QWORD *)(v0 + 440);
    v17 = *(_QWORD *)(v0 + 448);
    v20 = *(_QWORD *)(v0 + 408);
    v19 = *(_QWORD *)(v0 + 416);
    v22 = *(_QWORD *)(v0 + 376);
    v21 = *(_QWORD *)(v0 + 384);
    swift_task_dealloc(*(_QWORD *)(v0 + 504));
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    v6 = *(uint64_t (**)(void))(v0 + 8);
    return v6();
  }
  if ((sub_1003435F8() & 1) == 0)
  {
    if (qword_1010EA100 != -1)
      swift_once(&qword_1010EA100, sub_1009B44BC);
    v23 = type metadata accessor for Logger(0);
    v24 = sub_10001A9E8(v23, (uint64_t)qword_10110F2A8);
    v25 = Logger.logObject.getter(v24);
    v26 = static os_log_type_t.default.getter(v25);
    if (os_log_type_enabled(v25, v26))
    {
      v27 = (uint8_t *)swift_slowAlloc(12, -1);
      v28 = swift_slowAlloc(32, -1);
      v39 = v28;
      *(_DWORD *)v27 = 136446210;
      *(_QWORD *)(v0 + 176) = sub_100016940(0xD00000000000001ELL, 0x8000000100EEC400, &v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 176, v0 + 184, v27 + 4, v27 + 12);
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "%{public}s FMIP is disabled!", v27, 0xCu);
      swift_arrayDestroy(v28, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v28, -1, -1);
      swift_slowDealloc(v27, -1, -1);
    }

    *(_QWORD *)(v0 + 208) = 6;
    v29 = sub_10001A9A8(&qword_10110FA60);
    CheckedContinuation.resume(returning:)(v0 + 208, v29);
    v30 = *(_QWORD *)(v0 + 496);
    v31 = *(_QWORD *)(v0 + 472);
    v33 = *(_QWORD *)(v0 + 440);
    v32 = *(_QWORD *)(v0 + 448);
    v35 = *(_QWORD *)(v0 + 408);
    v34 = *(_QWORD *)(v0 + 416);
    v37 = *(_QWORD *)(v0 + 376);
    v36 = *(_QWORD *)(v0 + 384);
    swift_task_dealloc(*(_QWORD *)(v0 + 504));
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    swift_task_dealloc(v36);
    swift_task_dealloc(v37);
    v6 = *(uint64_t (**)(void))(v0 + 8);
    return v6();
  }
  v3 = qword_1010EA5B0;
  swift_retain();
  if (v3 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v0 + 136, 0, 0);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 56, &qword_1010EE220);
  if (*(_QWORD *)(v0 + 80))
  {
    sub_10000F9FC((__int128 *)(v0 + 56), v0 + 96);
    swift_release();
    sub_10001AA44((_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 120));
    v38 = (uint64_t (*)(void))((char *)&dword_1010EBC30 + dword_1010EBC30);
    v5 = (_QWORD *)swift_task_alloc(unk_1010EBC34);
    *(_QWORD *)(v0 + 512) = v5;
    *v5 = v0;
    v5[1] = sub_1009D924C;
    v6 = v38;
    return v6();
  }
  __break(1u);
  return result;
}

uint64_t sub_1009D924C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 512);
  *(_QWORD *)(*(_QWORD *)v1 + 520) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1009D92A8, 0, 0);
}

uint64_t sub_1009D92A8()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v1 = (_QWORD *)(v0 + 96);
  if (*(_QWORD *)(v0 + 520))
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    v2 = (_QWORD *)swift_task_alloc(dword_1011013BC);
    *(_QWORD *)(v0 + 528) = v2;
    *v2 = v0;
    v2[1] = sub_1009D9514;
    return sub_100615D00();
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    if (qword_1010EA100 != -1)
      swift_once(&qword_1010EA100, sub_1009B44BC);
    v4 = type metadata accessor for Logger(0);
    v5 = sub_10001A9E8(v4, (uint64_t)qword_10110F2A8);
    v6 = Logger.logObject.getter(v5);
    v7 = static os_log_type_t.error.getter(v6);
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc(12, -1);
      v9 = swift_slowAlloc(32, -1);
      v21 = v9;
      *(_DWORD *)v8 = 136446210;
      *(_QWORD *)(v0 + 184) = sub_100016940(0xD00000000000001ELL, 0x8000000100EEC400, &v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 184, v0 + 192, v8 + 4, v8 + 12);
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "%{public}s Missing CloudStorageService!", v8, 0xCu);
      swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v9, -1, -1);
      swift_slowDealloc(v8, -1, -1);
    }

    v10 = sub_100033220();
    v11 = swift_allocError(&type metadata for DaemonError, v10, 0, 0);
    *v12 = 0xD000000000000013;
    v12[1] = 0x8000000100ED7110;
    swift_willThrow(v11);
    v13 = *(_QWORD *)(v0 + 496);
    v14 = *(_QWORD *)(v0 + 472);
    v16 = *(_QWORD *)(v0 + 440);
    v15 = *(_QWORD *)(v0 + 448);
    v18 = *(_QWORD *)(v0 + 408);
    v17 = *(_QWORD *)(v0 + 416);
    v20 = *(_QWORD *)(v0 + 376);
    v19 = *(_QWORD *)(v0 + 384);
    swift_task_dealloc(*(_QWORD *)(v0 + 504));
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1009D9514(char a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 528);
  *(_BYTE *)(*(_QWORD *)v1 + 712) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1009D9570, 0, 0);
}

uint64_t sub_1009D9570()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  if (*(_BYTE *)(v0 + 712) == 1)
  {
    v1 = *(_QWORD *)(v0 + 504);
    *(_QWORD *)(v0 + 536) = type metadata accessor for CentralManager(0);
    v2 = type metadata accessor for CentralManager.Options(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
    v3 = (_QWORD *)swift_task_alloc(async function pointer to CentralManager.__allocating_init(options:)[1]);
    *(_QWORD *)(v0 + 544) = v3;
    *v3 = v0;
    v3[1] = sub_1009D9814;
    return CentralManager.__allocating_init(options:)(*(_QWORD *)(v0 + 504));
  }
  else
  {
    if (qword_1010EA100 != -1)
      swift_once(&qword_1010EA100, sub_1009B44BC);
    v5 = type metadata accessor for Logger(0);
    v6 = sub_10001A9E8(v5, (uint64_t)qword_10110F2A8);
    v7 = Logger.logObject.getter(v6);
    v8 = static os_log_type_t.error.getter(v7);
    if (os_log_type_enabled(v7, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc(12, -1);
      v10 = swift_slowAlloc(32, -1);
      v20 = v10;
      *(_DWORD *)v9 = 136446210;
      *(_QWORD *)(v0 + 200) = sub_100016940(0xD00000000000001ELL, 0x8000000100EEC400, &v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 200, v0 + 208, v9 + 4, v9 + 12);
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "%{public}s Account is not ready!", v9, 0xCu);
      swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v10, -1, -1);
      swift_slowDealloc(v9, -1, -1);
    }

    *(_QWORD *)(v0 + 192) = 5;
    v11 = sub_10001A9A8(&qword_10110FA60);
    CheckedContinuation.resume(returning:)(v0 + 192, v11);
    swift_release();
    v12 = *(_QWORD *)(v0 + 496);
    v13 = *(_QWORD *)(v0 + 472);
    v15 = *(_QWORD *)(v0 + 440);
    v14 = *(_QWORD *)(v0 + 448);
    v17 = *(_QWORD *)(v0 + 408);
    v16 = *(_QWORD *)(v0 + 416);
    v19 = *(_QWORD *)(v0 + 376);
    v18 = *(_QWORD *)(v0 + 384);
    swift_task_dealloc(*(_QWORD *)(v0 + 504));
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1009D9814(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 544);
  *(_QWORD *)(*(_QWORD *)v1 + 552) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1009D9870, 0, 0);
}

uint64_t sub_1009D9870()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;

  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0[61] + 104))(v0[62], enum case for CentralManager.State.poweredOn(_:), v0[60]);
  v1 = (_QWORD *)swift_task_alloc(async function pointer to CentralManagerProtocol.await(state:)[1]);
  v0[70] = v1;
  v2 = sub_100006204(&qword_1010EC468, (uint64_t (*)(uint64_t))&type metadata accessor for CentralManager, (uint64_t)&protocol conformance descriptor for CentralManager);
  *v1 = v0;
  v1[1] = sub_1009D9904;
  return CentralManagerProtocol.await(state:)(v0[62], v0[67], v2);
}

uint64_t sub_1009D9904()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 560);
  *(_QWORD *)(*(_QWORD *)v1 + 568) = v0;
  swift_task_dealloc(v3);
  (*(void (**)(_QWORD, _QWORD))(v2[61] + 8))(v2[62], v2[60]);
  if (v0)
    v4 = sub_1009DAF34;
  else
    v4 = sub_1009D9978;
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_1009D9978()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t, uint64_t);
  void (*v24)(uint64_t, uint64_t);
  _QWORD *v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t (*v34)(_QWORD *);
  _QWORD *v35;

  if (qword_1010EA100 != -1)
    swift_once(&qword_1010EA100, sub_1009B44BC);
  v1 = v0[69];
  v2 = type metadata accessor for Logger(0);
  v0[72] = sub_10001A9E8(v2, (uint64_t)qword_10110F2A8);
  v3 = swift_retain_n(v1, 2);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter(v4);
  v6 = os_log_type_enabled(v4, v5);
  v7 = v0[69];
  if (v6)
  {
    v8 = v0[67];
    v9 = swift_slowAlloc(22, -1);
    v10 = (_QWORD *)swift_slowAlloc(64, -1);
    v35 = v10;
    *(_DWORD *)v9 = 136446466;
    v0[41] = sub_100016940(0xD00000000000001ELL, 0x8000000100EEC400, (uint64_t *)&v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 41, v0 + 42, v9 + 4, v9 + 12);
    *(_WORD *)(v9 + 12) = 2080;
    v0[42] = v7;
    v11 = sub_100006204(&qword_10110F790, (uint64_t (*)(uint64_t))&type metadata accessor for CentralManager, (uint64_t)&protocol conformance descriptor for CentralManager);
    v12 = dispatch thunk of CustomStringConvertible.description.getter(v8, v11);
    v0[43] = sub_100016940(v12, v13, (uint64_t *)&v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 43, v0 + 44, v9 + 14, v9 + 22);
    swift_bridgeObjectRelease();
    swift_release_n(v7, 2);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "%{public}s %s has powered on!", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy(v10, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v9, -1, -1);
  }
  else
  {
    swift_release_n(v0[69], 2);
  }

  v14 = v0[56];
  v15 = v0[53];
  v16 = v0[54];
  v17 = v0[46];
  v18 = sub_10001A9A8(&qword_10110F778);
  v19 = *(unsigned __int8 *)(v16 + 80);
  v20 = (v19 + 32) & ~v19;
  v21 = swift_allocObject(v18, v20 + *(_QWORD *)(v16 + 72), v19 | 7);
  *(_OWORD *)(v21 + 16) = xmmword_100E22B00;
  v22 = v21 + v20;
  v23 = *(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 16);
  v0[73] = v23;
  v23(v22, v17, v15);
  v35 = _swiftEmptyArrayStorage;
  sub_10009A578(0, 1, 0);
  v23(v14, v22, v15);
  Identifier.id.getter(v15);
  v24 = *(void (**)(uint64_t, uint64_t))(v16 + 8);
  v0[74] = v24;
  v24(v14, v15);
  v25 = v35;
  if ((swift_isUniquelyReferenced_nonNull_native(v35) & 1) == 0)
  {
    sub_10009A578(0, v25[2] + 1, 1);
    v25 = v35;
  }
  v27 = v25[2];
  v26 = v25[3];
  if (v27 >= v26 >> 1)
  {
    sub_10009A578(v26 > 1, v27 + 1, 1);
    v25 = v35;
  }
  v0[75] = v25;
  v29 = v0[58];
  v28 = v0[59];
  v30 = v0[57];
  v31 = v0[53];
  v25[2] = v27 + 1;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v29 + 32))((unint64_t)v25+ ((*(unsigned __int8 *)(v29 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v29 + 80))+ *(_QWORD *)(v29 + 72) * v27, v28, v30);
  swift_setDeallocating(v21);
  swift_arrayDestroy(v22, *(_QWORD *)(v21 + 16), v31);
  swift_deallocClassInstance(v21, 32, 7);
  v34 = (uint64_t (*)(_QWORD *))((char *)&async function pointer to dispatch thunk of CentralManager.retrievePeripherals(identifiers:)
                                         + async function pointer to dispatch thunk of CentralManager.retrievePeripherals(identifiers:));
  v32 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of CentralManager.retrievePeripherals(identifiers:)
                                   + 1));
  v0[76] = v32;
  *v32 = v0;
  v32[1] = sub_1009D9D44;
  return v34(v25);
}

uint64_t sub_1009D9D44(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 608);
  *(_QWORD *)(v3 + 616) = a1;
  *(_QWORD *)(v3 + 624) = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    v5 = sub_1009DAFEC;
  }
  else
  {
    swift_release();
    v5 = sub_1009D9DBC;
  }
  return swift_task_switch(v5, 0, 0);
}

void sub_1009D9DBC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  BOOL v22;
  void (*v23)(uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42[2];

  v1 = *(_QWORD *)(v0 + 616);
  if ((unint64_t)v1 >> 62)
  {
    if (v1 < 0)
      v13 = *(_QWORD *)(v0 + 616);
    else
      v13 = v1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*(_QWORD *)(v0 + 616));
    v14 = _CocoaArrayWrapper.endIndex.getter(v13);
    swift_bridgeObjectRelease();
    if (v14)
      goto LABEL_3;
LABEL_14:
    v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 584);
    v16 = *(_QWORD *)(v0 + 440);
    v17 = *(_QWORD *)(v0 + 424);
    v18 = *(_QWORD *)(v0 + 368);
    swift_bridgeObjectRelease();
    v19 = v15(v16, v18, v17);
    v20 = Logger.logObject.getter(v19);
    v21 = static os_log_type_t.error.getter(v20);
    v22 = os_log_type_enabled(v20, v21);
    v23 = *(void (**)(uint64_t, uint64_t))(v0 + 592);
    v24 = *(_QWORD *)(v0 + 440);
    v25 = *(_QWORD *)(v0 + 424);
    if (v22)
    {
      v26 = (uint8_t *)swift_slowAlloc(12, -1);
      v27 = swift_slowAlloc(32, -1);
      v42[0] = v27;
      *(_DWORD *)v26 = 136446210;
      v28 = sub_1000193A4(&qword_1010EE1D0, &qword_1010EF7C0, (const char *)&protocol conformance descriptor for Identifier<A>);
      v29 = dispatch thunk of CustomStringConvertible.description.getter(v25, v28);
      *(_QWORD *)(v0 + 320) = sub_100016940(v29, v30, v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 320, v0 + 328, v26 + 4, v26 + 12);
      swift_bridgeObjectRelease();
      v23(v24, v25);
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "Missing peripheral for %{public}s", v26, 0xCu);
      swift_arrayDestroy(v27, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v27, -1, -1);
      swift_slowDealloc(v26, -1, -1);
    }
    else
    {
      v23(*(_QWORD *)(v0 + 440), *(_QWORD *)(v0 + 424));
    }

    v31 = sub_100350CCC();
    v32 = swift_allocError(&type metadata for PencilPairingService.Error, v31, 0, 0);
    *(_OWORD *)v33 = xmmword_100E58220;
    *(_BYTE *)(v33 + 16) = 3;
    swift_willThrow(v32);
    swift_release();
    swift_release();
    v34 = *(_QWORD *)(v0 + 496);
    v35 = *(_QWORD *)(v0 + 472);
    v37 = *(_QWORD *)(v0 + 440);
    v36 = *(_QWORD *)(v0 + 448);
    v39 = *(_QWORD *)(v0 + 408);
    v38 = *(_QWORD *)(v0 + 416);
    v41 = *(_QWORD *)(v0 + 376);
    v40 = *(_QWORD *)(v0 + 384);
    swift_task_dealloc(*(_QWORD *)(v0 + 504));
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    swift_task_dealloc(v36);
    swift_task_dealloc(v37);
    swift_task_dealloc(v38);
    swift_task_dealloc(v39);
    swift_task_dealloc(v40);
    swift_task_dealloc(v41);
    (*(void (**)(void))(v0 + 8))();
    return;
  }
  if (!*(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_14;
LABEL_3:
  if ((v1 & 0xC000000000000001) != 0)
  {
    v2 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, *(_QWORD *)(v0 + 616));
  }
  else
  {
    if (!*(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      return;
    }
    v2 = *(_QWORD *)(*(_QWORD *)(v0 + 616) + 32);
    swift_retain();
  }
  *(_QWORD *)(v0 + 632) = v2;
  swift_bridgeObjectRelease();
  v3 = swift_retain_n(v2, 2);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = swift_slowAlloc(22, -1);
    v7 = swift_slowAlloc(64, -1);
    v42[0] = v7;
    *(_DWORD *)v6 = 136446466;
    *(_QWORD *)(v0 + 296) = sub_100016940(0xD00000000000001ELL, 0x8000000100EEC400, v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 296, v0 + 304, v6 + 4, v6 + 12);
    *(_WORD *)(v6 + 12) = 2080;
    *(_QWORD *)(v0 + 304) = v2;
    v8 = type metadata accessor for Peripheral(0);
    v9 = sub_100006204(&qword_1010EC508, (uint64_t (*)(uint64_t))&type metadata accessor for Peripheral, (uint64_t)&protocol conformance descriptor for Peripheral);
    v10 = dispatch thunk of CustomStringConvertible.description.getter(v8, v9);
    *(_QWORD *)(v0 + 312) = sub_100016940(v10, v11, v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 312, v0 + 320, v6 + 14, v6 + 22);
    swift_bridgeObjectRelease();
    swift_release_n(v2, 2);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "%{public}s Retrieved peripheral: %s", (uint8_t *)v6, 0x16u);
    swift_arrayDestroy(v7, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);
  }
  else
  {
    swift_release_n(v2, 2);
  }

  v12 = (_QWORD *)swift_task_alloc(dword_10110F8A4);
  *(_QWORD *)(v0 + 640) = v12;
  *v12 = v0;
  v12[1] = sub_1009DA28C;
  sub_1009DB174(v2);
}

uint64_t sub_1009DA28C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *(_QWORD **)v3;
  v5 = *(_QWORD *)(*(_QWORD *)v3 + 640);
  v4[81] = a1;
  v4[82] = a2;
  v4[83] = v2;
  swift_task_dealloc(v5);
  if (v2)
    v6 = sub_1009DB0B0;
  else
    v6 = sub_1009DA300;
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_1009DA300()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  char v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  BOOL v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32[2];

  v1 = *(_QWORD *)(v0 + 648);
  *(_QWORD *)(v0 + 160) = v1;
  v2 = *(_QWORD *)(v0 + 656);
  *(_QWORD *)(v0 + 168) = v2;
  sub_10001BBBC(v1, v2);
  v3 = sub_100035530();
  v4 = DataProtocol.isNull.getter(&type metadata for Data, v3);
  v5 = *(_QWORD *)(v0 + 656);
  v6 = *(_QWORD *)(v0 + 648);
  if ((v4 & 1) != 0)
  {
    v7 = sub_10001BBBC(*(_QWORD *)(v0 + 648), *(_QWORD *)(v0 + 656));
    v8 = Logger.logObject.getter(v7);
    v9 = static os_log_type_t.error.getter(v8);
    v10 = os_log_type_enabled(v8, v9);
    v11 = *(_QWORD *)(v0 + 656);
    v12 = *(_QWORD *)(v0 + 648);
    if (v10)
    {
      v13 = swift_slowAlloc(22, -1);
      v14 = swift_slowAlloc(64, -1);
      v32[0] = v14;
      *(_DWORD *)v13 = 136446466;
      *(_QWORD *)(v0 + 280) = sub_100016940(0xD00000000000001ELL, 0x8000000100EEC400, v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 280, v0 + 288, v13 + 4, v13 + 12);
      *(_WORD *)(v13 + 12) = 2082;
      v15 = Data.hexString.getter(v12, v11);
      *(_QWORD *)(v0 + 288) = sub_100016940(v15, v16, v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 288, v0 + 296, v13 + 14, v13 + 22);
      swift_bridgeObjectRelease();
      sub_10001BC14(v12, v11);
      sub_10001BC14(v12, v11);
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "%{public}s Invalid serial number %{public}s!", (uint8_t *)v13, 0x16u);
      swift_arrayDestroy(v14, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v14, -1, -1);
      swift_slowDealloc(v13, -1, -1);
    }
    else
    {
      sub_10001BC14(*(_QWORD *)(v0 + 648), *(_QWORD *)(v0 + 656));
      sub_10001BC14(v12, v11);
    }

    v19 = *(_QWORD *)(v0 + 656);
    v20 = *(_QWORD *)(v0 + 648);
    v21 = sub_100350CCC();
    v22 = swift_allocError(&type metadata for PencilPairingService.Error, v21, 0, 0);
    *(_OWORD *)v23 = xmmword_100E58250;
    *(_BYTE *)(v23 + 16) = 3;
    swift_willThrow(v22);
    sub_10001BC14(v20, v19);
    swift_release();
    swift_release();
    swift_release();
    v24 = *(_QWORD *)(v0 + 496);
    v25 = *(_QWORD *)(v0 + 472);
    v27 = *(_QWORD *)(v0 + 440);
    v26 = *(_QWORD *)(v0 + 448);
    v29 = *(_QWORD *)(v0 + 408);
    v28 = *(_QWORD *)(v0 + 416);
    v31 = *(_QWORD *)(v0 + 376);
    v30 = *(_QWORD *)(v0 + 384);
    swift_task_dealloc(*(_QWORD *)(v0 + 504));
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    *(_QWORD *)(v0 + 672) = Data.trimmed.getter(*(_QWORD *)(v0 + 648), *(_QWORD *)(v0 + 656));
    *(_QWORD *)(v0 + 680) = v17;
    sub_10001BC14(v6, v5);
    return swift_task_switch(sub_1009DA624, *(_QWORD *)(v0 + 520), 0);
  }
}

uint64_t sub_1009DA624()
{
  uint64_t *v0;
  uint64_t **v1;

  v1 = (uint64_t **)swift_task_alloc(dword_10110CD84);
  v0[86] = (uint64_t)v1;
  *v1 = v0;
  v1[1] = (uint64_t *)sub_1009DA67C;
  return sub_1008FC02C(v0[84], v0[85]);
}

uint64_t sub_1009DA67C(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 688);
  *(_QWORD *)(v3 + 696) = a1;
  *(_QWORD *)(v3 + 704) = v1;
  swift_task_dealloc(v4);
  if (v1)
    v5 = sub_1009DAE48;
  else
    v5 = sub_1009DA6EC;
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_1009DA6EC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  BOOL v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  _BOOL4 v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t (*v64)(void);
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v77;
  uint64_t v78;
  os_log_type_t v79;
  uint64_t v80[2];

  v1 = v0[87];
  if (*(_QWORD *)(v1 + 16))
  {
    v2 = *(unsigned __int8 *)(v0[50] + 80);
    sub_10005972C(v1 + ((v2 + 32) & ~v2), v0[48], type metadata accessor for LocalFindableAccessoryRecord);
    v3 = 0;
  }
  else
  {
    v3 = 1;
  }
  v4 = v0[49];
  v5 = v0[50];
  v6 = v0[48];
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 56))(v6, v3, 1, v4);
  swift_bridgeObjectRelease();
  v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v6, 1, v4);
  v8 = v0[85];
  v9 = v0[84];
  if (v7 != 1)
  {
    v25 = v0[51];
    v24 = v0[52];
    sub_1000126EC(v0[48], v24, type metadata accessor for LocalFindableAccessoryRecord);
    sub_10005972C(v24, v25, type metadata accessor for LocalFindableAccessoryRecord);
    sub_10001BBBC(v9, v8);
    v26 = sub_10001BBBC(v9, v8);
    v27 = Logger.logObject.getter(v26);
    v28 = static os_log_type_t.default.getter(v27);
    v29 = os_log_type_enabled(v27, v28);
    v30 = v0[85];
    v31 = v0[84];
    if (v29)
    {
      v79 = v28;
      v32 = v0[57];
      v33 = v0[51];
      v77 = v0[47];
      v34 = swift_slowAlloc(42, -1);
      v78 = swift_slowAlloc(64, -1);
      v80[0] = v78;
      *(_DWORD *)v34 = 141558787;
      v0[31] = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 31, v0 + 32, v34 + 4, v34 + 12);
      *(_WORD *)(v34 + 12) = 2081;
      v35 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v36 = dispatch thunk of CustomStringConvertible.description.getter(v32, v35);
      v0[32] = sub_100016940(v36, v37, v80);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 33, v34 + 14, v34 + 22);
      swift_bridgeObjectRelease();
      sub_1000126B0(v33, type metadata accessor for LocalFindableAccessoryRecord);
      *(_WORD *)(v34 + 22) = 2160;
      v0[33] = 1752392040;
      v38 = UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 33, v0 + 34, v34 + 24, v34 + 32);
      *(_WORD *)(v34 + 32) = 2081;
      static String.Encoding.utf8.getter(v38);
      v39 = String.init(data:encoding:)(v31, v30, v77);
      if (!v40)
        v39 = Data.hexString.getter(v0[84], v0[85]);
      v41 = v0[85];
      v42 = v0[84];
      v0[34] = sub_100016940(v39, v40, v80);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 34, v0 + 35, v34 + 34, v34 + 42);
      swift_bridgeObjectRelease();
      sub_10001BC14(v42, v41);
      sub_10001BC14(v42, v41);
      _os_log_impl((void *)&_mh_execute_header, v27, v79, "Found existing record %{private,mask.hash}s matching\n%{private,mask.hash}s", (uint8_t *)v34, 0x2Au);
      swift_arrayDestroy(v78, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v78, -1, -1);
      swift_slowDealloc(v34, -1, -1);
    }
    else
    {
      sub_1000126B0(v0[51], type metadata accessor for LocalFindableAccessoryRecord);
      sub_10001BC14(v31, v30);
      sub_10001BC14(v31, v30);
    }

    v49 = v0[88];
    static Task<>.checkCancellation()(v50);
    v51 = v0[85];
    v52 = v0[84];
    v53 = v0[82];
    v54 = v0[81];
    v55 = v0[52];
    if (v49)
    {
      sub_1000126B0(v0[52], type metadata accessor for LocalFindableAccessoryRecord);
      swift_release();
      swift_release();
      sub_10001BC14(v54, v53);
      sub_10001BC14(v52, v51);
      goto LABEL_19;
    }
    v66 = v0[85];
    v0[30] = 2;
    v67 = sub_10001A9A8(&qword_10110FA60);
    CheckedContinuation.resume(returning:)(v0 + 30, v67);
    swift_release();
    sub_10001BC14(v52, v66);
    sub_10001BC14(v54, v53);
    swift_release();
    swift_release();
    sub_1000126B0(v55, type metadata accessor for LocalFindableAccessoryRecord);
LABEL_22:
    v68 = v0[62];
    v69 = v0[59];
    v71 = v0[55];
    v70 = v0[56];
    v73 = v0[51];
    v72 = v0[52];
    v75 = v0[47];
    v74 = v0[48];
    swift_task_dealloc(v0[63]);
    swift_task_dealloc(v68);
    swift_task_dealloc(v69);
    swift_task_dealloc(v70);
    swift_task_dealloc(v71);
    swift_task_dealloc(v72);
    swift_task_dealloc(v73);
    swift_task_dealloc(v74);
    swift_task_dealloc(v75);
    v64 = (uint64_t (*)(void))v0[1];
    return v64();
  }
  sub_100004048(v0[48], (uint64_t *)&unk_1010EDC50);
  sub_10001BBBC(v9, v8);
  v10 = sub_10001BBBC(v9, v8);
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.error.getter(v11);
  v13 = os_log_type_enabled(v11, v12);
  v14 = v0[85];
  v15 = v0[84];
  if (v13)
  {
    v16 = v0[47];
    v17 = swift_slowAlloc(22, -1);
    v18 = swift_slowAlloc(32, -1);
    v80[0] = v18;
    *(_DWORD *)v17 = 141558275;
    v0[28] = 1752392040;
    v19 = UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 28, v0 + 29, v17 + 4, v17 + 12);
    *(_WORD *)(v17 + 12) = 2081;
    static String.Encoding.utf8.getter(v19);
    v20 = String.init(data:encoding:)(v15, v14, v16);
    if (!v21)
      v20 = Data.hexString.getter(v0[84], v0[85]);
    v22 = v0[85];
    v23 = v0[84];
    v0[29] = sub_100016940(v20, v21, v80);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 29, v0 + 30, v17 + 14, v17 + 22);
    swift_bridgeObjectRelease();
    sub_10001BC14(v23, v22);
    sub_10001BC14(v23, v22);
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Missing record for %{private,mask.hash}s!", (uint8_t *)v17, 0x16u);
    swift_arrayDestroy(v18, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v18, -1, -1);
    swift_slowDealloc(v17, -1, -1);
  }
  else
  {
    sub_10001BC14(v0[84], v0[85]);
    sub_10001BC14(v15, v14);
  }

  v43 = v0[88];
  static Task<>.checkCancellation()(v44);
  v45 = v0[85];
  v46 = v0[84];
  v47 = v0[82];
  v48 = v0[81];
  if (!v43)
  {
    v0[27] = 0;
    v65 = sub_10001A9A8(&qword_10110FA60);
    CheckedContinuation.resume(returning:)(v0 + 27, v65);
    swift_release();
    swift_release();
    sub_10001BC14(v48, v47);
    sub_10001BC14(v46, v45);
    swift_release();
    goto LABEL_22;
  }
  sub_10001BC14(v0[84], v0[85]);
  sub_10001BC14(v48, v47);
  swift_release();
  swift_release();
LABEL_19:
  swift_release();
  v56 = v0[62];
  v57 = v0[59];
  v59 = v0[55];
  v58 = v0[56];
  v61 = v0[51];
  v60 = v0[52];
  v63 = v0[47];
  v62 = v0[48];
  swift_task_dealloc(v0[63]);
  swift_task_dealloc(v56);
  swift_task_dealloc(v57);
  swift_task_dealloc(v58);
  swift_task_dealloc(v59);
  swift_task_dealloc(v60);
  swift_task_dealloc(v61);
  swift_task_dealloc(v62);
  swift_task_dealloc(v63);
  v64 = (uint64_t (*)(void))v0[1];
  return v64();
}

uint64_t sub_1009DAE48()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = *(_QWORD *)(v0 + 680);
  v2 = *(_QWORD *)(v0 + 672);
  v3 = *(_QWORD *)(v0 + 656);
  v4 = *(_QWORD *)(v0 + 648);
  swift_release();
  swift_release();
  sub_10001BC14(v4, v3);
  sub_10001BC14(v2, v1);
  swift_release();
  v5 = *(_QWORD *)(v0 + 496);
  v6 = *(_QWORD *)(v0 + 472);
  v8 = *(_QWORD *)(v0 + 440);
  v7 = *(_QWORD *)(v0 + 448);
  v10 = *(_QWORD *)(v0 + 408);
  v9 = *(_QWORD *)(v0 + 416);
  v12 = *(_QWORD *)(v0 + 376);
  v11 = *(_QWORD *)(v0 + 384);
  swift_task_dealloc(*(_QWORD *)(v0 + 504));
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1009DAF34()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *(_QWORD *)(v0 + 520);
  swift_release(*(_QWORD *)(v0 + 552));
  swift_release(v1);
  v2 = *(_QWORD *)(v0 + 496);
  v3 = *(_QWORD *)(v0 + 472);
  v5 = *(_QWORD *)(v0 + 440);
  v4 = *(_QWORD *)(v0 + 448);
  v7 = *(_QWORD *)(v0 + 408);
  v6 = *(_QWORD *)(v0 + 416);
  v9 = *(_QWORD *)(v0 + 376);
  v8 = *(_QWORD *)(v0 + 384);
  swift_task_dealloc(*(_QWORD *)(v0 + 504));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1009DAFEC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = *(_QWORD *)(v0 + 552);
  v2 = *(_QWORD *)(v0 + 520);
  swift_release(*(_QWORD *)(v0 + 600));
  swift_release(v1);
  swift_release(v2);
  v3 = *(_QWORD *)(v0 + 496);
  v4 = *(_QWORD *)(v0 + 472);
  v6 = *(_QWORD *)(v0 + 440);
  v5 = *(_QWORD *)(v0 + 448);
  v8 = *(_QWORD *)(v0 + 408);
  v7 = *(_QWORD *)(v0 + 416);
  v10 = *(_QWORD *)(v0 + 376);
  v9 = *(_QWORD *)(v0 + 384);
  swift_task_dealloc(*(_QWORD *)(v0 + 504));
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1009DB0B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = *(_QWORD *)(v0 + 552);
  v2 = *(_QWORD *)(v0 + 520);
  swift_release(*(_QWORD *)(v0 + 632));
  swift_release(v1);
  swift_release(v2);
  v3 = *(_QWORD *)(v0 + 496);
  v4 = *(_QWORD *)(v0 + 472);
  v6 = *(_QWORD *)(v0 + 440);
  v5 = *(_QWORD *)(v0 + 448);
  v8 = *(_QWORD *)(v0 + 408);
  v7 = *(_QWORD *)(v0 + 416);
  v10 = *(_QWORD *)(v0 + 376);
  v9 = *(_QWORD *)(v0 + 384);
  swift_task_dealloc(*(_QWORD *)(v0 + 504));
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1009DB174(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v2[16] = a1;
  v2[17] = v1;
  v3 = type metadata accessor for String.Encoding(0);
  v2[18] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_10001A9A8(&qword_1010EC638);
  v2[19] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v2[20] = v5;
  v2[21] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10001A9A8((uint64_t *)&unk_101115F50);
  v2[22] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v2[23] = v7;
  v8 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[24] = swift_task_alloc(v8);
  v2[25] = swift_task_alloc(v8);
  v9 = sub_10001A9A8(&qword_1010EC450);
  v2[26] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Peripheral.ConnectionOptions(0);
  v2[27] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v2[28] = v11;
  v2[29] = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10001A9A8(&qword_1010EC458);
  v2[30] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v12 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_10001A9A8(&qword_1010EC460);
  v2[31] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v13 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_10001A9A8(&qword_1010EC448);
  v2[32] = v14;
  v15 = *(_QWORD *)(v14 - 8);
  v2[33] = v15;
  v2[34] = swift_task_alloc((*(_QWORD *)(v15 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_10001A9A8(&qword_1010EF7C0);
  v2[35] = v16;
  v17 = *(_QWORD *)(v16 - 8);
  v2[36] = v17;
  v2[37] = swift_task_alloc((*(_QWORD *)(v17 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1009DB320, v1, 0);
}

uint64_t sub_1009DB320()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  if (qword_1010EA100 != -1)
    swift_once(&qword_1010EA100, sub_1009B44BC);
  v1 = type metadata accessor for Logger(0);
  v0[38] = sub_10001A9E8(v1, (uint64_t)qword_10110F2A8);
  v2 = swift_retain();
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = v0[37];
    v36 = v0[36];
    v35 = v0[35];
    v6 = swift_slowAlloc(22, -1);
    v37 = swift_slowAlloc(64, -1);
    v38 = v37;
    *(_DWORD *)v6 = 136446466;
    v0[14] = sub_100016940(0xD00000000000001DLL, 0x8000000100EEC1A0, &v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 14, v0 + 15, v6 + 4, v6 + 12);
    *(_WORD *)(v6 + 12) = 2080;
    v7 = type metadata accessor for Peripheral(0);
    v8 = sub_100006204(&qword_1010EC4A0, (uint64_t (*)(uint64_t))&type metadata accessor for Peripheral, (uint64_t)&protocol conformance descriptor for Peripheral);
    dispatch thunk of PeripheralProtocol.id.getter(v7, v8);
    v9 = sub_1000193A4(&qword_1010EE1D0, &qword_1010EF7C0, (const char *)&protocol conformance descriptor for Identifier<A>);
    v10 = dispatch thunk of CustomStringConvertible.description.getter(v35, v9);
    v12 = v11;
    (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v5, v35);
    v0[15] = sub_100016940(v10, v12, &v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 15, v0 + 16, v6 + 14, v6 + 22);
    swift_bridgeObjectRelease();
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "%{public}s for peripheral: %s", (uint8_t *)v6, 0x16u);
    swift_arrayDestroy(v37, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v37, -1, -1);
    swift_slowDealloc(v6, -1, -1);
  }
  else
  {
    swift_release();
  }

  v13 = v0[30];
  v14 = v0[31];
  v16 = v0[28];
  v15 = v0[29];
  v18 = v0[26];
  v17 = v0[27];
  v19 = type metadata accessor for Service(0);
  v0[39] = v19;
  Identifier.init(stringLiteral:)("180A", 4, 2, v19);
  v20 = enum case for ConnectUseCase.findNearbyPencil(_:);
  v21 = type metadata accessor for ConnectUseCase(0);
  v22 = *(_QWORD *)(v21 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v22 + 104))(v14, v20, v21);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v22 + 56))(v14, 0, 1, v21);
  v23 = sub_10001A9A8(&qword_1010EC480);
  v24 = swift_allocObject(v23, ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80))+ 2 * *(_QWORD *)(v16 + 72), *(unsigned __int8 *)(v16 + 80) | 7);
  *(_OWORD *)(v24 + 16) = xmmword_100E22B10;
  v25 = static Peripheral.ConnectionOptions.hideFromBTSettings.getter();
  static Peripheral.ConnectionOptions.shouldSkipUnpair.getter(v25);
  v0[9] = v24;
  v26 = sub_100006204(&qword_1010EC488, (uint64_t (*)(uint64_t))&type metadata accessor for Peripheral.ConnectionOptions, (uint64_t)&protocol conformance descriptor for Peripheral.ConnectionOptions);
  v27 = sub_10001A9A8(&qword_1010EC490);
  v28 = sub_1000193A4(&qword_1010EC498, &qword_1010EC490, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(v0 + 9, v27, v28, v17, v26);
  v29 = type metadata accessor for PeripheralPairingInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v18, 1, 1, v29);
  Peripheral.Options.init(connectionOptions:pairingInfo:)(v15, v18);
  v30 = type metadata accessor for Peripheral.Options(0);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(v13, 0, 1, v30);
  v31 = type metadata accessor for Peripheral(0);
  v0[40] = v31;
  v32 = sub_100006204(&qword_1010EC4A0, (uint64_t (*)(uint64_t))&type metadata accessor for Peripheral, (uint64_t)&protocol conformance descriptor for Peripheral);
  v0[41] = v32;
  v33 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of PeripheralProtocol.connect(useCase:options:)[1]);
  v0[42] = v33;
  *v33 = v0;
  v33[1] = sub_1009DB79C;
  return dispatch thunk of PeripheralProtocol.connect(useCase:options:)(v0[31], v0[30], v31, v32);
}

uint64_t sub_1009DB79C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v8;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 336);
  v3 = *(_QWORD **)v1;
  v3[43] = v0;
  swift_task_dealloc(v2);
  v4 = v3[30];
  v5 = v3[31];
  if (v0)
  {
    v6 = v3[17];
    sub_100004048(v4, &qword_1010EC458);
    sub_100004048(v5, &qword_1010EC460);
    return swift_task_switch(sub_1009DB8F0, v6, 0);
  }
  else
  {
    sub_100004048(v4, &qword_1010EC458);
    sub_100004048(v5, &qword_1010EC460);
    v8 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of PeripheralProtocol.subscript.getter[1]);
    v3[44] = v8;
    *v8 = v3;
    v8[1] = sub_1009DB884;
    return dispatch thunk of PeripheralProtocol.subscript.getter(v3[34], v3[40], v3[41]);
  }
}

uint64_t sub_1009DB884(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t (*v5)();

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 352);
  v3[45] = a1;
  v3[46] = v1;
  swift_task_dealloc(v4);
  if (v1)
    v5 = sub_1009DBE2C;
  else
    v5 = sub_1009DBB80;
  return swift_task_switch(v5, v3[17], 0);
}

uint64_t sub_1009DB8F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v1 = *(_QWORD *)(v0 + 344);
  swift_errorRetain(v1);
  v2 = swift_errorRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = swift_slowAlloc(22, -1);
    v6 = (uint64_t *)swift_slowAlloc(8, -1);
    v7 = swift_slowAlloc(32, -1);
    v24 = v7;
    *(_DWORD *)v5 = 136446466;
    *(_QWORD *)(v0 + 56) = sub_100016940(0xD00000000000001DLL, 0x8000000100EEC1A0, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 64, v5 + 4, v5 + 12);
    *(_WORD *)(v5 + 12) = 2114;
    swift_errorRetain(v1);
    v8 = _swift_stdlib_bridgeErrorToNSError(v1);
    *(_QWORD *)(v0 + 48) = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56, v5 + 14, v5 + 22);
    *v6 = v8;
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "%{public}s error %{public}@", (uint8_t *)v5, 0x16u);
    v9 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v6, 1, v9);
    swift_slowDealloc(v6, -1, -1);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v5, -1, -1);
  }
  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
  }

  v10 = *(_QWORD *)(v0 + 296);
  v11 = *(_QWORD *)(v0 + 264);
  v12 = *(_QWORD *)(v0 + 272);
  v14 = *(_QWORD *)(v0 + 248);
  v13 = *(_QWORD *)(v0 + 256);
  v16 = *(_QWORD *)(v0 + 232);
  v15 = *(_QWORD *)(v0 + 240);
  v19 = *(_QWORD *)(v0 + 208);
  v20 = *(_QWORD *)(v0 + 200);
  v21 = *(_QWORD *)(v0 + 192);
  v22 = *(_QWORD *)(v0 + 168);
  v23 = *(_QWORD *)(v0 + 144);
  swift_willThrow(v17);
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v12, v13);
  swift_task_dealloc(v10);
  swift_task_dealloc(v12);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1009DBB80()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  void (*v10)(char *, uint64_t, uint64_t);
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;

  v1 = v0[23];
  sub_10009A380(0, 3, 0);
  v2 = type metadata accessor for Characteristic(0);
  Identifier.init(stringLiteral:)("2A50", 4, 2, v2);
  v4 = _swiftEmptyArrayStorage[2];
  v3 = _swiftEmptyArrayStorage[3];
  if (v4 >= v3 >> 1)
    sub_10009A380(v3 > 1, v4 + 1, 1);
  v0[47] = _swiftEmptyArrayStorage;
  v5 = v0[25];
  v6 = v0[22];
  _swiftEmptyArrayStorage[2] = v4 + 1;
  v7 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v8 = *(_QWORD *)(v1 + 72);
  v9 = (char *)_swiftEmptyArrayStorage + v7 + v8 * v4;
  v10 = *(void (**)(char *, uint64_t, uint64_t))(v1 + 32);
  v10(v9, v5, v6);
  Identifier.init(stringLiteral:)("2A25", 4, 2, v2);
  v12 = _swiftEmptyArrayStorage[2];
  v11 = _swiftEmptyArrayStorage[3];
  if (v12 >= v11 >> 1)
    sub_10009A380(v11 > 1, v12 + 1, 1);
  v0[47] = _swiftEmptyArrayStorage;
  v13 = v0[25];
  v14 = v0[22];
  _swiftEmptyArrayStorage[2] = v12 + 1;
  v10((char *)_swiftEmptyArrayStorage + v7 + v8 * v12, v13, v14);
  Identifier.init(stringLiteral:)("2A26", 4, 2, v2);
  v16 = _swiftEmptyArrayStorage[2];
  v15 = _swiftEmptyArrayStorage[3];
  if (v16 >= v15 >> 1)
    sub_10009A380(v15 > 1, v16 + 1, 1);
  v0[47] = _swiftEmptyArrayStorage;
  v17 = v0[25];
  v18 = v0[22];
  _swiftEmptyArrayStorage[2] = v16 + 1;
  v10((char *)_swiftEmptyArrayStorage + v7 + v8 * v16, v17, v18);
  v19 = sub_100006204(&qword_1010EC4A8, (uint64_t (*)(uint64_t))&type metadata accessor for Service, (uint64_t)&protocol conformance descriptor for Service);
  v0[48] = v19;
  v20 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of ServiceProtocol.discover(characteristicIdentifiers:)[1]);
  v0[49] = v20;
  *v20 = v0;
  v20[1] = sub_1009DC0BC;
  return dispatch thunk of ServiceProtocol.discover(characteristicIdentifiers:)(_swiftEmptyArrayStorage, v0[39], v19);
}

uint64_t sub_1009DBE2C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v1 = *(_QWORD *)(v0 + 368);
  swift_errorRetain(v1);
  v2 = swift_errorRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = swift_slowAlloc(22, -1);
    v6 = (uint64_t *)swift_slowAlloc(8, -1);
    v7 = swift_slowAlloc(32, -1);
    v24 = v7;
    *(_DWORD *)v5 = 136446466;
    *(_QWORD *)(v0 + 56) = sub_100016940(0xD00000000000001DLL, 0x8000000100EEC1A0, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 64, v5 + 4, v5 + 12);
    *(_WORD *)(v5 + 12) = 2114;
    swift_errorRetain(v1);
    v8 = _swift_stdlib_bridgeErrorToNSError(v1);
    *(_QWORD *)(v0 + 48) = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56, v5 + 14, v5 + 22);
    *v6 = v8;
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "%{public}s error %{public}@", (uint8_t *)v5, 0x16u);
    v9 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v6, 1, v9);
    swift_slowDealloc(v6, -1, -1);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v5, -1, -1);
  }
  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
  }

  v10 = *(_QWORD *)(v0 + 296);
  v11 = *(_QWORD *)(v0 + 264);
  v12 = *(_QWORD *)(v0 + 272);
  v14 = *(_QWORD *)(v0 + 248);
  v13 = *(_QWORD *)(v0 + 256);
  v16 = *(_QWORD *)(v0 + 232);
  v15 = *(_QWORD *)(v0 + 240);
  v19 = *(_QWORD *)(v0 + 208);
  v20 = *(_QWORD *)(v0 + 200);
  v21 = *(_QWORD *)(v0 + 192);
  v22 = *(_QWORD *)(v0 + 168);
  v23 = *(_QWORD *)(v0 + 144);
  swift_willThrow(v17);
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v12, v13);
  swift_task_dealloc(v10);
  swift_task_dealloc(v12);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1009DC0BC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 392);
  *(_QWORD *)(*v1 + 400) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = *(_QWORD *)(v2 + 136);
    v5 = sub_1009DC2BC;
  }
  else
  {
    v6 = *(_QWORD *)(v2 + 136);
    swift_bridgeObjectRelease();
    swift_release();
    v5 = sub_1009DC148;
    v4 = v6;
  }
  return swift_task_switch(v5, v4, 0);
}

uint64_t sub_1009DC148()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = type metadata accessor for Characteristic(0);
  v0[51] = v1;
  Identifier.init(stringLiteral:)("2A25", 4, 2, v1);
  v2 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of ServiceProtocol.subscript.getter[1]);
  v0[52] = v2;
  *v2 = v0;
  v2[1] = sub_1009DC1D0;
  return dispatch thunk of ServiceProtocol.subscript.getter(v0[24], v0[39], v0[48]);
}

uint64_t sub_1009DC1D0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  _QWORD *v12;

  v4 = *(_QWORD *)(*(_QWORD *)v2 + 416);
  v5 = *(_QWORD **)v2;
  v5[53] = a1;
  v5[54] = v1;
  swift_task_dealloc(v4);
  v7 = v5[23];
  v6 = v5[24];
  v8 = v5[22];
  if (v1)
  {
    v9 = v5[17];
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
    return swift_task_switch(sub_1009DC634, v9, 0);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
    v11 = sub_100006204(&qword_1010EC4C0, (uint64_t (*)(uint64_t))&type metadata accessor for Characteristic, (uint64_t)&protocol conformance descriptor for Characteristic);
    v12 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of CharacteristicProtocol.read()[1]);
    v5[55] = v12;
    *v12 = v5;
    v12[1] = sub_1009DC560;
    return dispatch thunk of CharacteristicProtocol.read()(v5[21], v5[51], v11);
  }
}

uint64_t sub_1009DC2BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  swift_release();
  swift_release();
  v1 = *(_QWORD *)(v0 + 400);
  swift_errorRetain(v1);
  v2 = swift_errorRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = swift_slowAlloc(22, -1);
    v6 = (uint64_t *)swift_slowAlloc(8, -1);
    v7 = swift_slowAlloc(32, -1);
    v24 = v7;
    *(_DWORD *)v5 = 136446466;
    *(_QWORD *)(v0 + 56) = sub_100016940(0xD00000000000001DLL, 0x8000000100EEC1A0, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 64, v5 + 4, v5 + 12);
    *(_WORD *)(v5 + 12) = 2114;
    swift_errorRetain(v1);
    v8 = _swift_stdlib_bridgeErrorToNSError(v1);
    *(_QWORD *)(v0 + 48) = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56, v5 + 14, v5 + 22);
    *v6 = v8;
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "%{public}s error %{public}@", (uint8_t *)v5, 0x16u);
    v9 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v6, 1, v9);
    swift_slowDealloc(v6, -1, -1);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v5, -1, -1);
  }
  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
  }

  v10 = *(_QWORD *)(v0 + 296);
  v11 = *(_QWORD *)(v0 + 264);
  v12 = *(_QWORD *)(v0 + 272);
  v14 = *(_QWORD *)(v0 + 248);
  v13 = *(_QWORD *)(v0 + 256);
  v16 = *(_QWORD *)(v0 + 232);
  v15 = *(_QWORD *)(v0 + 240);
  v19 = *(_QWORD *)(v0 + 208);
  v20 = *(_QWORD *)(v0 + 200);
  v21 = *(_QWORD *)(v0 + 192);
  v22 = *(_QWORD *)(v0 + 168);
  v23 = *(_QWORD *)(v0 + 144);
  swift_willThrow(v17);
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v12, v13);
  swift_task_dealloc(v10);
  swift_task_dealloc(v12);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1009DC560()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v5;
  uint64_t v6;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 440);
  v3 = *(_QWORD **)v1;
  v3[56] = v0;
  swift_task_dealloc(v2);
  if (v0)
    return swift_task_switch(sub_1009DC944, v3[17], 0);
  swift_release();
  v5 = (_QWORD *)swift_task_alloc(async function pointer to AsyncSequence.first()[1]);
  v3[57] = v5;
  v6 = sub_1000193A4((unint64_t *)&unk_101116020, &qword_1010EC638, (const char *)&protocol conformance descriptor for AsyncThrowingStream<A, B>);
  *v5 = v3;
  v5[1] = sub_1009DC8CC;
  return AsyncSequence.first()(v3 + 4, v3[19], v6);
}

uint64_t sub_1009DC634()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  swift_release();
  v1 = *(_QWORD *)(v0 + 432);
  swift_errorRetain(v1);
  v2 = swift_errorRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = swift_slowAlloc(22, -1);
    v6 = (uint64_t *)swift_slowAlloc(8, -1);
    v7 = swift_slowAlloc(32, -1);
    v24 = v7;
    *(_DWORD *)v5 = 136446466;
    *(_QWORD *)(v0 + 56) = sub_100016940(0xD00000000000001DLL, 0x8000000100EEC1A0, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 64, v5 + 4, v5 + 12);
    *(_WORD *)(v5 + 12) = 2114;
    swift_errorRetain(v1);
    v8 = _swift_stdlib_bridgeErrorToNSError(v1);
    *(_QWORD *)(v0 + 48) = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56, v5 + 14, v5 + 22);
    *v6 = v8;
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "%{public}s error %{public}@", (uint8_t *)v5, 0x16u);
    v9 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v6, 1, v9);
    swift_slowDealloc(v6, -1, -1);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v5, -1, -1);
  }
  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
  }

  v10 = *(_QWORD *)(v0 + 296);
  v11 = *(_QWORD *)(v0 + 264);
  v12 = *(_QWORD *)(v0 + 272);
  v14 = *(_QWORD *)(v0 + 248);
  v13 = *(_QWORD *)(v0 + 256);
  v16 = *(_QWORD *)(v0 + 232);
  v15 = *(_QWORD *)(v0 + 240);
  v19 = *(_QWORD *)(v0 + 208);
  v20 = *(_QWORD *)(v0 + 200);
  v21 = *(_QWORD *)(v0 + 192);
  v22 = *(_QWORD *)(v0 + 168);
  v23 = *(_QWORD *)(v0 + 144);
  swift_willThrow(v17);
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v12, v13);
  swift_task_dealloc(v10);
  swift_task_dealloc(v12);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1009DC8CC()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 456);
  *(_QWORD *)(*(_QWORD *)v1 + 464) = v0;
  swift_task_dealloc(v3);
  v5 = v2[20];
  v4 = v2[21];
  v6 = v2[19];
  v7 = v2[17];
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  if (v0)
    v8 = sub_1009DD4F0;
  else
    v8 = sub_1009DCBE8;
  return swift_task_switch(v8, v7, 0);
}

uint64_t sub_1009DC944()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  swift_release();
  swift_release();
  v1 = *(_QWORD *)(v0 + 448);
  swift_errorRetain(v1);
  v2 = swift_errorRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = swift_slowAlloc(22, -1);
    v6 = (uint64_t *)swift_slowAlloc(8, -1);
    v7 = swift_slowAlloc(32, -1);
    v24 = v7;
    *(_DWORD *)v5 = 136446466;
    *(_QWORD *)(v0 + 56) = sub_100016940(0xD00000000000001DLL, 0x8000000100EEC1A0, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 64, v5 + 4, v5 + 12);
    *(_WORD *)(v5 + 12) = 2114;
    swift_errorRetain(v1);
    v8 = _swift_stdlib_bridgeErrorToNSError(v1);
    *(_QWORD *)(v0 + 48) = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56, v5 + 14, v5 + 22);
    *v6 = v8;
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "%{public}s error %{public}@", (uint8_t *)v5, 0x16u);
    v9 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v6, 1, v9);
    swift_slowDealloc(v6, -1, -1);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v5, -1, -1);
  }
  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
  }

  v10 = *(_QWORD *)(v0 + 296);
  v11 = *(_QWORD *)(v0 + 264);
  v12 = *(_QWORD *)(v0 + 272);
  v14 = *(_QWORD *)(v0 + 248);
  v13 = *(_QWORD *)(v0 + 256);
  v16 = *(_QWORD *)(v0 + 232);
  v15 = *(_QWORD *)(v0 + 240);
  v19 = *(_QWORD *)(v0 + 208);
  v20 = *(_QWORD *)(v0 + 200);
  v21 = *(_QWORD *)(v0 + 192);
  v22 = *(_QWORD *)(v0 + 168);
  v23 = *(_QWORD *)(v0 + 144);
  swift_willThrow(v17);
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v12, v13);
  swift_task_dealloc(v10);
  swift_task_dealloc(v12);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1009DCBE8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  os_log_type_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75[2];

  v2 = v1 + 64;
  v3 = *(_QWORD *)(v1 + 40);
  if (v3 >> 60 == 15)
  {
    v4 = Logger.logObject.getter(a1);
    v5 = static os_log_type_t.default.getter(v4);
    if (os_log_type_enabled(v4, v5))
    {
      v6 = (uint8_t *)swift_slowAlloc(12, -1);
      v7 = swift_slowAlloc(32, -1);
      v75[0] = v7;
      *(_DWORD *)v6 = 136446210;
      *(_QWORD *)(v1 + 64) = sub_100016940(0xD00000000000001DLL, 0x8000000100EEC1A0, v75);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 64, v1 + 72, v6 + 4, v6 + 12);
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "%{public}s Failed to read serial number!", v6, 0xCu);
      swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v7, -1, -1);
      swift_slowDealloc(v6, -1, -1);
    }

    v8 = sub_100350CCC();
    v9 = swift_allocError(&type metadata for PencilPairingService.Error, v8, 0, 0);
    *(_OWORD *)v10 = xmmword_100E58250;
    *(_BYTE *)(v10 + 16) = 3;
    swift_willThrow(v9);
    goto LABEL_14;
  }
  v11 = *(_QWORD *)(v1 + 32);
  *(_QWORD *)(v1 + 16) = v11;
  *(_QWORD *)(v1 + 24) = v3;
  sub_10001BBBC(v11, v3);
  v12 = sub_100035530();
  if ((DataProtocol.isNull.getter(&type metadata for Data, v12) & 1) != 0)
  {
    sub_10001EF3C(v11, v3);
    sub_10001BBBC(v11, v3);
    v13 = sub_10001BBBC(v11, v3);
    v14 = Logger.logObject.getter(v13);
    v15 = static os_log_type_t.default.getter(v14);
    if (os_log_type_enabled(v14, v15))
    {
      v16 = swift_slowAlloc(22, -1);
      v17 = swift_slowAlloc(64, -1);
      v75[0] = v17;
      *(_DWORD *)v16 = 136446466;
      *(_QWORD *)(v1 + 96) = sub_100016940(0xD00000000000001DLL, 0x8000000100EEC1A0, v75);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 96, v1 + 104, v16 + 4, v16 + 12);
      *(_WORD *)(v16 + 12) = 2080;
      v18 = Data.hexString.getter(v11, v3);
      *(_QWORD *)(v1 + 104) = sub_100016940(v18, v19, v75);
      v2 = v1 + 64;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 104, v1 + 112, v16 + 14, v16 + 22);
      swift_bridgeObjectRelease();
      sub_10001EF3C(v11, v3);
      sub_10001EF3C(v11, v3);
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "%{public}s Invalid serial number %s!", (uint8_t *)v16, 0x16u);
      swift_arrayDestroy(v17, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v17, -1, -1);
      swift_slowDealloc(v16, -1, -1);
    }
    else
    {
      sub_10001EF3C(v11, v3);
      sub_10001EF3C(v11, v3);
    }

    v34 = sub_100350CCC();
    v9 = swift_allocError(&type metadata for PencilPairingService.Error, v34, 0, 0);
    *(_OWORD *)v35 = xmmword_100E58250;
    *(_BYTE *)(v35 + 16) = 3;
    swift_willThrow(v9);
    sub_10001EF3C(v11, v3);
LABEL_14:
    swift_release();
    swift_errorRetain(v9);
    v36 = swift_errorRetain(v9);
    v37 = Logger.logObject.getter(v36);
    v38 = static os_log_type_t.error.getter(v37);
    if (os_log_type_enabled(v37, v38))
    {
      v39 = swift_slowAlloc(22, -1);
      v40 = (uint64_t *)swift_slowAlloc(8, -1);
      v41 = swift_slowAlloc(32, -1);
      v75[0] = v41;
      *(_DWORD *)v39 = 136446466;
      *(_QWORD *)(v1 + 56) = sub_100016940(0xD00000000000001DLL, 0x8000000100EEC1A0, v75);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 56, v2, v39 + 4, v39 + 12);
      *(_WORD *)(v39 + 12) = 2114;
      swift_errorRetain(v9);
      v42 = _swift_stdlib_bridgeErrorToNSError(v9);
      *(_QWORD *)(v1 + 48) = v42;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 48, v1 + 56, v39 + 14, v39 + 22);
      *v40 = v42;
      swift_errorRelease(v9);
      swift_errorRelease(v9);
      _os_log_impl((void *)&_mh_execute_header, v37, v38, "%{public}s error %{public}@", (uint8_t *)v39, 0x16u);
      v43 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
      swift_arrayDestroy(v40, 1, v43);
      swift_slowDealloc(v40, -1, -1);
      swift_arrayDestroy(v41, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v41, -1, -1);
      swift_slowDealloc(v39, -1, -1);
    }
    else
    {
      swift_errorRelease(v9);
      swift_errorRelease(v9);
    }

    v44 = *(_QWORD *)(v1 + 296);
    v46 = *(_QWORD *)(v1 + 264);
    v45 = *(_QWORD *)(v1 + 272);
    v48 = *(_QWORD *)(v1 + 248);
    v47 = *(_QWORD *)(v1 + 256);
    v50 = *(_QWORD *)(v1 + 232);
    v49 = *(_QWORD *)(v1 + 240);
    v66 = *(_QWORD *)(v1 + 208);
    v68 = *(_QWORD *)(v1 + 200);
    v70 = *(_QWORD *)(v1 + 192);
    v71 = *(_QWORD *)(v1 + 168);
    v74 = *(_QWORD *)(v1 + 144);
    swift_willThrow(v51);
    (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v45, v47);
    swift_task_dealloc(v44);
    swift_task_dealloc(v45);
    swift_task_dealloc(v48);
    swift_task_dealloc(v49);
    swift_task_dealloc(v50);
    swift_task_dealloc(v66);
    swift_task_dealloc(v68);
    swift_task_dealloc(v70);
    swift_task_dealloc(v71);
    swift_task_dealloc(v74);
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
  v20 = Data.trimmed.getter(v11, v3);
  v22 = v21;
  sub_10001EF3C(v11, v3);
  sub_10001BBBC(v20, v22);
  v23 = sub_10001BBBC(v20, v22);
  v24 = Logger.logObject.getter(v23);
  v25 = static os_log_type_t.default.getter(v24);
  v73 = v11;
  if (os_log_type_enabled(v24, v25))
  {
    v69 = v25;
    v26 = *(_QWORD *)(v1 + 144);
    v27 = swift_slowAlloc(22, -1);
    v67 = swift_slowAlloc(64, -1);
    v75[0] = v67;
    *(_DWORD *)v27 = 136446466;
    *(_QWORD *)(v1 + 80) = sub_100016940(0xD00000000000001DLL, 0x8000000100EEC1A0, v75);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 80, v1 + 88, v27 + 4, v27 + 12);
    *(_WORD *)(v27 + 12) = 2080;
    v28 = sub_10001BBBC(v20, v22);
    static String.Encoding.utf8.getter(v28);
    v29 = String.init(data:encoding:)(v20, v22, v26);
    if (!v30)
      v29 = Data.hexString.getter(v20, v22);
    v31 = v29;
    v32 = v30;
    sub_10001BC14(v20, v22);
    v33 = *(_QWORD *)(v1 + 264);
    v65 = *(_QWORD *)(v1 + 272);
    v64 = *(_QWORD *)(v1 + 256);
    *(_QWORD *)(v1 + 88) = sub_100016940(v31, v32, v75);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 88, v1 + 96, v27 + 14, v27 + 22);
    swift_bridgeObjectRelease();
    sub_10001BC14(v20, v22);
    sub_10001BC14(v20, v22);
    _os_log_impl((void *)&_mh_execute_header, v24, v69, "%{public}s %s", (uint8_t *)v27, 0x16u);
    swift_arrayDestroy(v67, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v67, -1, -1);
    swift_slowDealloc(v27, -1, -1);
    swift_release();

    sub_10001BC14(v20, v22);
    (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v65, v64);
  }
  else
  {
    v54 = *(_QWORD *)(v1 + 264);
    v53 = *(_QWORD *)(v1 + 272);
    v55 = *(_QWORD *)(v1 + 256);
    swift_release();

    sub_10001BC14(v20, v22);
    sub_10001BC14(v20, v22);
    sub_10001BC14(v20, v22);
    (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v53, v55);
  }
  v56 = *(_QWORD *)(v1 + 272);
  v58 = *(_QWORD *)(v1 + 240);
  v57 = *(_QWORD *)(v1 + 248);
  v59 = *(_QWORD *)(v1 + 232);
  v61 = *(_QWORD *)(v1 + 200);
  v60 = *(_QWORD *)(v1 + 208);
  v62 = *(_QWORD *)(v1 + 192);
  v63 = *(_QWORD *)(v1 + 168);
  v72 = *(_QWORD *)(v1 + 144);
  swift_task_dealloc(*(_QWORD *)(v1 + 296));
  swift_task_dealloc(v56);
  swift_task_dealloc(v57);
  swift_task_dealloc(v58);
  swift_task_dealloc(v59);
  swift_task_dealloc(v60);
  swift_task_dealloc(v61);
  swift_task_dealloc(v62);
  swift_task_dealloc(v63);
  swift_task_dealloc(v72);
  return (*(uint64_t (**)(uint64_t, unint64_t))(v1 + 8))(v73, v3);
}

uint64_t sub_1009DD4F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  swift_release();
  v1 = *(_QWORD *)(v0 + 464);
  swift_errorRetain(v1);
  v2 = swift_errorRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = swift_slowAlloc(22, -1);
    v6 = (uint64_t *)swift_slowAlloc(8, -1);
    v7 = swift_slowAlloc(32, -1);
    v24 = v7;
    *(_DWORD *)v5 = 136446466;
    *(_QWORD *)(v0 + 56) = sub_100016940(0xD00000000000001DLL, 0x8000000100EEC1A0, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 64, v5 + 4, v5 + 12);
    *(_WORD *)(v5 + 12) = 2114;
    swift_errorRetain(v1);
    v8 = _swift_stdlib_bridgeErrorToNSError(v1);
    *(_QWORD *)(v0 + 48) = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56, v5 + 14, v5 + 22);
    *v6 = v8;
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "%{public}s error %{public}@", (uint8_t *)v5, 0x16u);
    v9 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v6, 1, v9);
    swift_slowDealloc(v6, -1, -1);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v5, -1, -1);
  }
  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
  }

  v10 = *(_QWORD *)(v0 + 296);
  v11 = *(_QWORD *)(v0 + 264);
  v12 = *(_QWORD *)(v0 + 272);
  v14 = *(_QWORD *)(v0 + 248);
  v13 = *(_QWORD *)(v0 + 256);
  v16 = *(_QWORD *)(v0 + 232);
  v15 = *(_QWORD *)(v0 + 240);
  v19 = *(_QWORD *)(v0 + 208);
  v20 = *(_QWORD *)(v0 + 200);
  v21 = *(_QWORD *)(v0 + 192);
  v22 = *(_QWORD *)(v0 + 168);
  v23 = *(_QWORD *)(v0 + 144);
  swift_willThrow(v17);
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v12, v13);
  swift_task_dealloc(v10);
  swift_task_dealloc(v12);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1009DD788(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  *(_QWORD *)(v4 + 80) = a3;
  *(_QWORD *)(v4 + 88) = a4;
  *(_BYTE *)(v4 + 128) = a2;
  *(_QWORD *)(v4 + 72) = a1;
  v5 = sub_10001A9A8(&qword_1010EF7C0);
  *(_QWORD *)(v4 + 96) = v5;
  v6 = *(_QWORD *)(v5 - 8);
  *(_QWORD *)(v4 + 104) = v6;
  v7 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v4 + 112) = swift_task_alloc(v7);
  *(_QWORD *)(v4 + 120) = swift_task_alloc(v7);
  return swift_task_switch(sub_1009DD804, 0, 0);
}

uint64_t sub_1009DD804()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  _BOOL4 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  _BOOL4 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  _BOOL4 v42;
  uint64_t v43;
  uint8_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  if ((*(_BYTE *)(v0 + 128) & 1) != 0)
  {
    v17 = *(_QWORD *)(v0 + 72);
    swift_errorRetain(v17);
    if (qword_1010EA100 != -1)
      swift_once(&qword_1010EA100, sub_1009B44BC);
    v19 = *(_QWORD *)(v0 + 104);
    v18 = *(_QWORD *)(v0 + 112);
    v20 = *(_QWORD *)(v0 + 96);
    v22 = *(_QWORD *)(v0 + 72);
    v21 = *(_QWORD *)(v0 + 80);
    v23 = type metadata accessor for Logger(0);
    sub_10001A9E8(v23, (uint64_t)qword_10110F2A8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 16))(v18, v21, v20);
    sub_1002437C4(v22, 1);
    v24 = swift_errorRetain(v17);
    v25 = Logger.logObject.getter(v24);
    v26 = static os_log_type_t.error.getter(v25);
    v27 = os_log_type_enabled(v25, v26);
    v29 = *(_QWORD *)(v0 + 104);
    v28 = *(_QWORD *)(v0 + 112);
    v30 = *(_QWORD *)(v0 + 96);
    v31 = *(_QWORD *)(v0 + 72);
    if (v27)
    {
      v48 = v17;
      v32 = swift_slowAlloc(32, -1);
      v49 = (uint64_t *)swift_slowAlloc(8, -1);
      v50 = swift_slowAlloc(64, -1);
      v52 = v50;
      *(_DWORD *)v32 = 136446722;
      *(_QWORD *)(v0 + 32) = sub_100016940(0xD00000000000001ELL, 0x8000000100EEC400, &v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v32 + 4, v32 + 12);
      *(_WORD *)(v32 + 12) = 2082;
      v33 = sub_1000193A4(&qword_1010EE1D0, &qword_1010EF7C0, (const char *)&protocol conformance descriptor for Identifier<A>);
      v34 = dispatch thunk of CustomStringConvertible.description.getter(v30, v33);
      *(_QWORD *)(v0 + 40) = sub_100016940(v34, v35, &v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v32 + 14, v32 + 22);
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v28, v30);
      *(_WORD *)(v32 + 22) = 2114;
      swift_errorRetain(v48);
      v36 = _swift_stdlib_bridgeErrorToNSError(v48);
      *(_QWORD *)(v0 + 48) = v36;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56, v32 + 24, v32 + 32);
      *v49 = v36;
      sub_10010F948(v31, 1);
      sub_10010F948(v31, 1);
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "%{public}s failed for %{public}s. Error %{public}@", (uint8_t *)v32, 0x20u);
      v37 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
      swift_arrayDestroy(v49, 1, v37);
      swift_slowDealloc(v49, -1, -1);
      swift_arrayDestroy(v50, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v50, -1, -1);
      swift_slowDealloc(v32, -1, -1);

      v17 = v48;
      v38 = static Task<>.isCancelled.getter();
      if ((v38 & 1) == 0)
      {
LABEL_10:
        *(_QWORD *)(v0 + 16) = v17;
        v39 = sub_10001A9A8(&qword_10110FA60);
        CheckedContinuation.resume(throwing:)(v0 + 16, v39);
        goto LABEL_16;
      }
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v28, v30);
      sub_10010F948(v31, 1);
      sub_10010F948(v31, 1);

      v38 = static Task<>.isCancelled.getter();
      if ((v38 & 1) == 0)
        goto LABEL_10;
    }
    v40 = Logger.logObject.getter(v38);
    v41 = static os_log_type_t.error.getter(v40);
    v42 = os_log_type_enabled(v40, v41);
    v43 = *(_QWORD *)(v0 + 72);
    if (v42)
    {
      v44 = (uint8_t *)swift_slowAlloc(12, -1);
      v45 = swift_slowAlloc(32, -1);
      v52 = v45;
      *(_DWORD *)v44 = 136446210;
      *(_QWORD *)(v0 + 24) = sub_100016940(0xD00000000000001ELL, 0x8000000100EEC400, &v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v44 + 4, v44 + 12);
      _os_log_impl((void *)&_mh_execute_header, v40, v41, "%{public}s Not resuming continuation in cancelled task.", v44, 0xCu);
      swift_arrayDestroy(v45, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v45, -1, -1);
      swift_slowDealloc(v44, -1, -1);

      sub_10010F948(v43, 1);
    }
    else
    {
      sub_10010F948(*(_QWORD *)(v0 + 72), 1);

    }
    goto LABEL_16;
  }
  if (qword_1010EA100 != -1)
    swift_once(&qword_1010EA100, sub_1009B44BC);
  v1 = *(_QWORD *)(v0 + 120);
  v2 = *(_QWORD *)(v0 + 96);
  v3 = *(_QWORD *)(v0 + 104);
  v4 = *(_QWORD *)(v0 + 80);
  v5 = type metadata accessor for Logger(0);
  sub_10001A9E8(v5, (uint64_t)qword_10110F2A8);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v1, v4, v2);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.default.getter(v7);
  v9 = os_log_type_enabled(v7, v8);
  v10 = *(_QWORD *)(v0 + 120);
  v11 = *(_QWORD *)(v0 + 96);
  v12 = *(_QWORD *)(v0 + 104);
  if (v9)
  {
    v13 = swift_slowAlloc(22, -1);
    v51 = swift_slowAlloc(64, -1);
    v52 = v51;
    *(_DWORD *)v13 = 136446466;
    *(_QWORD *)(v0 + 56) = sub_100016940(0xD00000000000001ELL, 0x8000000100EEC400, &v52);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 64, v13 + 4, v13 + 12);
    *(_WORD *)(v13 + 12) = 2082;
    v14 = sub_1000193A4(&qword_1010EE1D0, &qword_1010EF7C0, (const char *)&protocol conformance descriptor for Identifier<A>);
    v15 = dispatch thunk of CustomStringConvertible.description.getter(v11, v14);
    *(_QWORD *)(v0 + 64) = sub_100016940(v15, v16, &v52);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72, v13 + 14, v13 + 22);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v10, v11);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "%{public}s succeeded for %{public}s", (uint8_t *)v13, 0x16u);
    swift_arrayDestroy(v51, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v51, -1, -1);
    swift_slowDealloc(v13, -1, -1);

  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v12 + 8))(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 96));

  }
LABEL_16:
  v46 = *(_QWORD *)(v0 + 112);
  swift_task_dealloc(*(_QWORD *)(v0 + 120));
  swift_task_dealloc(v46);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1009DDE8C(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2[5] = a1;
  v2[6] = v1;
  v2[7] = *v1;
  v3 = sub_10001A9A8(&qword_1010EF7C0);
  v2[8] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[9] = v4;
  v2[10] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1009DDEF8, v1, 0);
}

uint64_t sub_1009DDEF8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  _BOOL4 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  if (qword_1010EA100 != -1)
    swift_once(&qword_1010EA100, sub_1009B44BC);
  v1 = v0[5];
  v3 = v0[9];
  v2 = v0[10];
  v4 = v0[8];
  v5 = type metadata accessor for Logger(0);
  sub_10001A9E8(v5, (uint64_t)qword_10110F2A8);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v1, v4);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.default.getter(v7);
  v9 = os_log_type_enabled(v7, v8);
  v10 = v0[10];
  v11 = v0[8];
  if (v9)
  {
    v24 = v0[9];
    v12 = swift_slowAlloc(22, -1);
    v25 = swift_slowAlloc(64, -1);
    v26 = v25;
    *(_DWORD *)v12 = 136446466;
    v0[3] = sub_100016940(0xD00000000000001ALL, 0x8000000100EEC3E0, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 3, v0 + 4, v12 + 4, v12 + 12);
    *(_WORD *)(v12 + 12) = 2082;
    v13 = sub_1000193A4(&qword_1010EE1D0, &qword_1010EF7C0, (const char *)&protocol conformance descriptor for Identifier<A>);
    v14 = dispatch thunk of CustomStringConvertible.description.getter(v11, v13);
    v0[4] = sub_100016940(v14, v15, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 4, v0 + 5, v12 + 14, v12 + 22);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v10, v11);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "%{public}s for identifier %{public}s", (uint8_t *)v12, 0x16u);
    swift_arrayDestroy(v25, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v25, -1, -1);
    swift_slowDealloc(v12, -1, -1);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v0[9] + 8))(v0[10], v0[8]);
  }

  v16 = v0[6];
  v17 = v0[7];
  v18 = v0[5];
  v19 = sub_100006204(&qword_101102BF0, type metadata accessor for PencilPairingService, (uint64_t)&unk_100E5841C);
  v20 = (_QWORD *)swift_task_alloc(48);
  v0[11] = v20;
  v20[2] = v16;
  v20[3] = v18;
  v20[4] = v17;
  v21 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  v0[12] = v21;
  type metadata accessor for SPAccessoryPairingStatus(0);
  *v21 = v0;
  v21[1] = sub_1009DE1DC;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 2, v16, v19, 0xD00000000000001ALL, 0x8000000100EEC3E0, sub_1009F8938, v20, v22);
}

uint64_t sub_1009DE1DC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 96);
  *(_QWORD *)(*v1 + 104) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = *(_QWORD *)(v2 + 48);
    v5 = sub_1009DE28C;
  }
  else
  {
    v6 = *(_QWORD *)(v2 + 48);
    swift_task_dealloc(*(_QWORD *)(v2 + 88));
    v5 = sub_1009DE250;
    v4 = v6;
  }
  return swift_task_switch(v5, v4, 0);
}

uint64_t sub_1009DE250()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_task_dealloc(*(_QWORD *)(v0 + 80));
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v1);
}

uint64_t sub_1009DE28C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 80);
  swift_task_dealloc(*(_QWORD *)(v0 + 88));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1009DE2C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, char *, uint64_t), uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(uint64_t, char *, uint64_t);
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  char *v45;
  uint64_t v46;
  void (*v47)(char *, uint64_t, uint64_t);
  uint64_t v48;
  void (*v49)(char *, uint64_t, uint64_t);
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  void (*v54)(uint64_t, char *, uint64_t);
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;

  v59 = a7;
  v60 = a8;
  v57 = a6;
  v54 = a5;
  v64 = a3;
  v65 = a4;
  v50 = a1;
  v10 = type metadata accessor for UUID(0);
  __chkstk_darwin(v10);
  v58 = (char *)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10001A9A8(&qword_1010EF7C0);
  v13 = *(_QWORD *)(v12 - 8);
  v62 = v12;
  v63 = v13;
  v14 = *(_QWORD *)(v13 + 64);
  v15 = __chkstk_darwin(v12);
  v53 = (char *)&v45 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = v14;
  __chkstk_darwin(v15);
  v17 = (char *)&v45 - v16;
  v45 = (char *)&v45 - v16;
  v18 = sub_10001A9A8(&qword_10110FA60);
  v19 = *(_QWORD *)(v18 - 8);
  v61 = v18;
  v20 = *(_QWORD *)(v19 + 64);
  v21 = __chkstk_darwin(v18);
  v52 = (char *)&v45 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v23 = (char *)&v45 - v22;
  v56 = *(_QWORD *)(a2 + OBJC_IVAR____TtC12searchpartyd20PencilPairingService_queue);
  v51 = a2;
  v55 = type metadata accessor for WorkItemQueue.WorkItem(0);
  v49 = *(void (**)(char *, uint64_t, uint64_t))(v19 + 16);
  v49(v23, a1, v18);
  v24 = v63;
  v47 = *(void (**)(char *, uint64_t, uint64_t))(v63 + 16);
  v47(v17, v64, v12);
  v25 = *(unsigned __int8 *)(v19 + 80);
  v26 = (v25 + 24) & ~v25;
  v27 = *(unsigned __int8 *)(v24 + 80);
  v28 = (v20 + v27 + v26) & ~v27;
  v48 = v25 | v27 | 7;
  v29 = (v14 + v28 + 7) & 0xFFFFFFFFFFFFFFF8;
  v30 = swift_allocObject(v54, v29 + 8, v48);
  *(_QWORD *)(v30 + 16) = a2;
  v54 = *(void (**)(uint64_t, char *, uint64_t))(v19 + 32);
  v31 = v61;
  v54(v30 + v26, v23, v61);
  v32 = v62;
  v33 = *(void (**)(uint64_t, char *, uint64_t))(v63 + 32);
  v33(v30 + v28, v45, v62);
  v34 = v64;
  *(_QWORD *)(v30 + v29) = v65;
  v35 = v53;
  v47(v53, v34, v32);
  v36 = v52;
  v49(v52, v50, v31);
  v37 = (v27 + 16) & ~v27;
  v38 = (v46 + v25 + v37) & ~v25;
  v39 = (v20 + v38 + 7) & 0xFFFFFFFFFFFFFFF8;
  v40 = swift_allocObject(v57, v39 + 8, v48);
  v33(v40 + v37, v35, v62);
  v54(v40 + v38, v36, v61);
  *(_QWORD *)(v40 + v39) = v65;
  v41 = swift_retain();
  v42 = v58;
  UUID.init()(v41);
  v43 = WorkItemQueue.WorkItem.__allocating_init(identifier:block:completion:)(v42, v59, v30, v60, v40);
  dispatch thunk of WorkItemQueue.enqueue(_:)(v43);
  return swift_release();
}

uint64_t sub_1009DE5C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4[4] = a3;
  v4[5] = a4;
  v4[2] = a1;
  v4[3] = a2;
  v5 = sub_10001A9A8(&qword_1010EF7C0);
  v4[6] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[7] = v6;
  v7 = *(_QWORD *)(v6 + 64);
  v4[8] = v7;
  v4[9] = swift_task_alloc((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A9A8(&qword_10110FA60);
  v4[10] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v4[11] = v9;
  v10 = *(_QWORD *)(v9 + 64);
  v4[12] = v10;
  v4[13] = swift_task_alloc((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1009DE660, 0, 0);
}

uint64_t sub_1009DE660()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v2 = v0[12];
  v1 = v0[13];
  v3 = v0[10];
  v4 = v0[11];
  v5 = v0[9];
  v19 = v0[8];
  v6 = v0[6];
  v7 = v0[7];
  v20 = v6;
  v21 = v5;
  v8 = v0[4];
  v22 = v0[5];
  v9 = v0[2];
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v4 + 16))(v1, v0[3], v3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v5, v8, v6);
  v10 = *(unsigned __int8 *)(v4 + 80);
  v11 = (v10 + 24) & ~v10;
  v12 = *(unsigned __int8 *)(v7 + 80);
  v13 = (v2 + v12 + v11) & ~v12;
  v14 = (v19 + v13 + 7) & 0xFFFFFFFFFFFFFFF8;
  v15 = swift_allocObject(&unk_1010A12E8, v14 + 8, v10 | v12 | 7);
  v0[14] = v15;
  *(_QWORD *)(v15 + 16) = v9;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v15 + v11, v1, v3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(v15 + v13, v21, v20);
  *(_QWORD *)(v15 + v14) = v22;
  v16 = async function pointer to withTimeout<A>(_:block:)[1];
  swift_retain();
  v17 = (_QWORD *)swift_task_alloc(v16);
  v0[15] = v17;
  *v17 = v0;
  v17[1] = sub_1009DE7C0;
  return withTimeout<A>(_:block:)(v17, 0x40AAD21B3B700000, 3, &unk_10110FA90, v15, &type metadata for () + 1);
}

uint64_t sub_1009DE7C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 120);
  *(_QWORD *)(*(_QWORD *)v1 + 128) = v0;
  swift_task_dealloc(v2);
  if (v0)
  {
    v3 = sub_1009DE86C;
  }
  else
  {
    swift_release();
    v3 = sub_1009DE82C;
  }
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1009DE82C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 72);
  swift_task_dealloc(*(_QWORD *)(v0 + 104));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1009DE86C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 104);
  v2 = *(_QWORD *)(v0 + 72);
  swift_release(*(_QWORD *)(v0 + 112));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1009DE8B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4[34] = a3;
  v4[35] = a4;
  v4[33] = a2;
  v5 = sub_10001A9A8(&qword_1010EF7C0);
  v4[36] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[37] = v6;
  v7 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[38] = swift_task_alloc(v7);
  v4[39] = swift_task_alloc(v7);
  v8 = type metadata accessor for UUID(0);
  v4[40] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v4[41] = v9;
  v4[42] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for CentralManager.State(0);
  v4[43] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v4[44] = v11;
  v4[45] = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10001A9A8((uint64_t *)&unk_101116060);
  v4[46] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v12 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1009DE9A0, 0, 0);
}

uint64_t sub_1009DE9A0()
{
  uint64_t v0;
  uint64_t My;
  _QWORD *v2;
  uint64_t v3;
  uint64_t result;
  _QWORD *v5;
  uint64_t (*v6)(void);
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v30)(void);
  uint64_t v31;

  My = type metadata accessor for Feature.FindMy(0);
  *(_QWORD *)(v0 + 40) = My;
  *(_QWORD *)(v0 + 48) = sub_100006204((unint64_t *)&qword_1010EE1B0, (uint64_t (*)(uint64_t))&type metadata accessor for Feature.FindMy, (uint64_t)&protocol conformance descriptor for Feature.FindMy);
  v2 = sub_100018F08((_QWORD *)(v0 + 16));
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(My - 8) + 104))(v2, enum case for Feature.FindMy.lineUp(_:), My);
  LOBYTE(My) = isFeatureEnabled(_:)(v0 + 16);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
  if ((My & 1) == 0)
  {
    if (qword_1010EA100 != -1)
      swift_once(&qword_1010EA100, sub_1009B44BC);
    v7 = type metadata accessor for Logger(0);
    v8 = sub_10001A9E8(v7, (uint64_t)qword_10110F2A8);
    v9 = Logger.logObject.getter(v8);
    v10 = static os_log_type_t.error.getter(v9);
    if (os_log_type_enabled(v9, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Feature.FindMy.lineUp is disabled!", v11, 2u);
      swift_slowDealloc(v11, -1, -1);
    }

    v12 = sub_100350CCC();
    v13 = swift_allocError(&type metadata for PencilPairingService.Error, v12, 0, 0);
    *(_OWORD *)v14 = xmmword_100E2E400;
    *(_BYTE *)(v14 + 16) = 3;
    swift_willThrow(v13);
    v15 = *(_QWORD *)(v0 + 360);
    v16 = *(_QWORD *)(v0 + 336);
    v18 = *(_QWORD *)(v0 + 304);
    v17 = *(_QWORD *)(v0 + 312);
    swift_task_dealloc(*(_QWORD *)(v0 + 368));
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    v6 = *(uint64_t (**)(void))(v0 + 8);
    return v6();
  }
  if ((sub_1003435F8() & 1) == 0)
  {
    if (qword_1010EA100 != -1)
      swift_once(&qword_1010EA100, sub_1009B44BC);
    v19 = type metadata accessor for Logger(0);
    v20 = sub_10001A9E8(v19, (uint64_t)qword_10110F2A8);
    v21 = Logger.logObject.getter(v20);
    v22 = static os_log_type_t.default.getter(v21);
    if (os_log_type_enabled(v21, v22))
    {
      v23 = (uint8_t *)swift_slowAlloc(12, -1);
      v24 = swift_slowAlloc(32, -1);
      v31 = v24;
      *(_DWORD *)v23 = 136446210;
      *(_QWORD *)(v0 + 160) = sub_100016940(0xD00000000000001ALL, 0x8000000100EEC3E0, &v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 160, v0 + 168, v23 + 4, v23 + 12);
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "%{public}s FMIP is disabled!", v23, 0xCu);
      swift_arrayDestroy(v24, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v24, -1, -1);
      swift_slowDealloc(v23, -1, -1);
    }

    *(_QWORD *)(v0 + 168) = 6;
    v25 = sub_10001A9A8(&qword_10110FA60);
    CheckedContinuation.resume(returning:)(v0 + 168, v25);
    v26 = *(_QWORD *)(v0 + 360);
    v27 = *(_QWORD *)(v0 + 336);
    v29 = *(_QWORD *)(v0 + 304);
    v28 = *(_QWORD *)(v0 + 312);
    swift_task_dealloc(*(_QWORD *)(v0 + 368));
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    v6 = *(uint64_t (**)(void))(v0 + 8);
    return v6();
  }
  v3 = qword_1010EA5B0;
  swift_retain();
  if (v3 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v0 + 136, 0, 0);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 56, &qword_1010EE220);
  if (*(_QWORD *)(v0 + 80))
  {
    sub_10000F9FC((__int128 *)(v0 + 56), v0 + 96);
    swift_release();
    sub_10001AA44((_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 120));
    v30 = (uint64_t (*)(void))((char *)&dword_1010EBC30 + dword_1010EBC30);
    v5 = (_QWORD *)swift_task_alloc(unk_1010EBC34);
    *(_QWORD *)(v0 + 376) = v5;
    *v5 = v0;
    v5[1] = sub_1009DEDEC;
    v6 = v30;
    return v6();
  }
  __break(1u);
  return result;
}

uint64_t sub_1009DEDEC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 376);
  *(_QWORD *)(*(_QWORD *)v1 + 384) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1009DEE48, 0, 0);
}

uint64_t sub_1009DEE48()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v1 = (_QWORD *)(v0 + 96);
  if (*(_QWORD *)(v0 + 384))
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    v2 = (_QWORD *)swift_task_alloc(dword_1011013BC);
    *(_QWORD *)(v0 + 392) = v2;
    *v2 = v0;
    v2[1] = sub_1009DF08C;
    return sub_100615D00();
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    if (qword_1010EA100 != -1)
      swift_once(&qword_1010EA100, sub_1009B44BC);
    v4 = type metadata accessor for Logger(0);
    v5 = sub_10001A9E8(v4, (uint64_t)qword_10110F2A8);
    v6 = Logger.logObject.getter(v5);
    v7 = static os_log_type_t.error.getter(v6);
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc(12, -1);
      v9 = swift_slowAlloc(32, -1);
      v17 = v9;
      *(_DWORD *)v8 = 136446210;
      *(_QWORD *)(v0 + 176) = sub_100016940(0xD00000000000001ALL, 0x8000000100EEC3E0, &v17);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 176, v0 + 184, v8 + 4, v8 + 12);
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "%{public}s Missing CloudStorageService!", v8, 0xCu);
      swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v9, -1, -1);
      swift_slowDealloc(v8, -1, -1);
    }

    v10 = sub_100033220();
    v11 = swift_allocError(&type metadata for DaemonError, v10, 0, 0);
    *v12 = 0xD000000000000013;
    v12[1] = 0x8000000100ED7110;
    swift_willThrow(v11);
    v13 = *(_QWORD *)(v0 + 360);
    v14 = *(_QWORD *)(v0 + 336);
    v16 = *(_QWORD *)(v0 + 304);
    v15 = *(_QWORD *)(v0 + 312);
    swift_task_dealloc(*(_QWORD *)(v0 + 368));
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1009DF08C(char a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 392);
  *(_BYTE *)(*(_QWORD *)v1 + 520) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1009DF0E8, 0, 0);
}

uint64_t sub_1009DF0E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (*(_BYTE *)(v0 + 520) == 1)
  {
    v1 = *(_QWORD *)(v0 + 368);
    *(_QWORD *)(v0 + 400) = type metadata accessor for CentralManager(0);
    v2 = type metadata accessor for CentralManager.Options(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
    v3 = (_QWORD *)swift_task_alloc(async function pointer to CentralManager.__allocating_init(options:)[1]);
    *(_QWORD *)(v0 + 408) = v3;
    *v3 = v0;
    v3[1] = sub_1009DF358;
    return CentralManager.__allocating_init(options:)(*(_QWORD *)(v0 + 368));
  }
  else
  {
    if (qword_1010EA100 != -1)
      swift_once(&qword_1010EA100, sub_1009B44BC);
    v5 = type metadata accessor for Logger(0);
    v6 = sub_10001A9E8(v5, (uint64_t)qword_10110F2A8);
    v7 = Logger.logObject.getter(v6);
    v8 = static os_log_type_t.error.getter(v7);
    if (os_log_type_enabled(v7, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc(12, -1);
      v10 = swift_slowAlloc(32, -1);
      v16 = v10;
      *(_DWORD *)v9 = 136446210;
      *(_QWORD *)(v0 + 192) = sub_100016940(0xD00000000000001ALL, 0x8000000100EEC3E0, &v16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 192, v0 + 200, v9 + 4, v9 + 12);
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "%{public}s Account is not ready!", v9, 0xCu);
      swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v10, -1, -1);
      swift_slowDealloc(v9, -1, -1);
    }

    *(_QWORD *)(v0 + 184) = 5;
    v11 = sub_10001A9A8(&qword_10110FA60);
    CheckedContinuation.resume(returning:)(v0 + 184, v11);
    swift_release();
    v12 = *(_QWORD *)(v0 + 360);
    v13 = *(_QWORD *)(v0 + 336);
    v15 = *(_QWORD *)(v0 + 304);
    v14 = *(_QWORD *)(v0 + 312);
    swift_task_dealloc(*(_QWORD *)(v0 + 368));
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1009DF358(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 408);
  *(_QWORD *)(*(_QWORD *)v1 + 416) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1009DF3B4, 0, 0);
}

uint64_t sub_1009DF3B4()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;

  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0[44] + 104))(v0[45], enum case for CentralManager.State.poweredOn(_:), v0[43]);
  v1 = (_QWORD *)swift_task_alloc(async function pointer to CentralManagerProtocol.await(state:)[1]);
  v0[53] = v1;
  v2 = sub_100006204(&qword_1010EC468, (uint64_t (*)(uint64_t))&type metadata accessor for CentralManager, (uint64_t)&protocol conformance descriptor for CentralManager);
  *v1 = v0;
  v1[1] = sub_1009DF448;
  return CentralManagerProtocol.await(state:)(v0[45], v0[50], v2);
}

uint64_t sub_1009DF448()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 424);
  *(_QWORD *)(*(_QWORD *)v1 + 432) = v0;
  swift_task_dealloc(v3);
  (*(void (**)(_QWORD, _QWORD))(v2[44] + 8))(v2[45], v2[43]);
  if (v0)
    v4 = sub_1009DFF3C;
  else
    v4 = sub_1009DF4BC;
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_1009DF4BC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t, uint64_t);
  void (*v24)(uint64_t, uint64_t);
  _QWORD *v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t (*v34)(_QWORD *);
  _QWORD *v35;

  if (qword_1010EA100 != -1)
    swift_once(&qword_1010EA100, sub_1009B44BC);
  v1 = v0[52];
  v2 = type metadata accessor for Logger(0);
  v0[55] = sub_10001A9E8(v2, (uint64_t)qword_10110F2A8);
  v3 = swift_retain_n(v1, 2);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter(v4);
  v6 = os_log_type_enabled(v4, v5);
  v7 = v0[52];
  if (v6)
  {
    v8 = v0[50];
    v9 = swift_slowAlloc(22, -1);
    v10 = (_QWORD *)swift_slowAlloc(64, -1);
    v35 = v10;
    *(_DWORD *)v9 = 136446466;
    v0[30] = sub_100016940(0xD00000000000001ALL, 0x8000000100EEC3E0, (uint64_t *)&v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 30, v0 + 31, v9 + 4, v9 + 12);
    *(_WORD *)(v9 + 12) = 2080;
    v0[31] = v7;
    v11 = sub_100006204(&qword_10110F790, (uint64_t (*)(uint64_t))&type metadata accessor for CentralManager, (uint64_t)&protocol conformance descriptor for CentralManager);
    v12 = dispatch thunk of CustomStringConvertible.description.getter(v8, v11);
    v0[32] = sub_100016940(v12, v13, (uint64_t *)&v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 33, v9 + 14, v9 + 22);
    swift_bridgeObjectRelease();
    swift_release_n(v7, 2);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "%{public}s %s has powered on!", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy(v10, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v9, -1, -1);
  }
  else
  {
    swift_release_n(v0[52], 2);
  }

  v14 = v0[39];
  v15 = v0[36];
  v16 = v0[37];
  v17 = v0[35];
  v18 = sub_10001A9A8(&qword_10110F778);
  v19 = *(unsigned __int8 *)(v16 + 80);
  v20 = (v19 + 32) & ~v19;
  v21 = swift_allocObject(v18, v20 + *(_QWORD *)(v16 + 72), v19 | 7);
  *(_OWORD *)(v21 + 16) = xmmword_100E22B00;
  v22 = v21 + v20;
  v23 = *(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 16);
  v0[56] = v23;
  v23(v22, v17, v15);
  v35 = _swiftEmptyArrayStorage;
  sub_10009A578(0, 1, 0);
  v23(v14, v22, v15);
  Identifier.id.getter(v15);
  v24 = *(void (**)(uint64_t, uint64_t))(v16 + 8);
  v0[57] = v24;
  v24(v14, v15);
  v25 = v35;
  if ((swift_isUniquelyReferenced_nonNull_native(v35) & 1) == 0)
  {
    sub_10009A578(0, v25[2] + 1, 1);
    v25 = v35;
  }
  v27 = v25[2];
  v26 = v25[3];
  if (v27 >= v26 >> 1)
  {
    sub_10009A578(v26 > 1, v27 + 1, 1);
    v25 = v35;
  }
  v0[58] = v25;
  v29 = v0[41];
  v28 = v0[42];
  v30 = v0[40];
  v31 = v0[36];
  v25[2] = v27 + 1;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v29 + 32))((unint64_t)v25+ ((*(unsigned __int8 *)(v29 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v29 + 80))+ *(_QWORD *)(v29 + 72) * v27, v28, v30);
  swift_setDeallocating(v21);
  swift_arrayDestroy(v22, *(_QWORD *)(v21 + 16), v31);
  swift_deallocClassInstance(v21, 32, 7);
  v34 = (uint64_t (*)(_QWORD *))((char *)&async function pointer to dispatch thunk of CentralManager.retrievePeripherals(identifiers:)
                                         + async function pointer to dispatch thunk of CentralManager.retrievePeripherals(identifiers:));
  v32 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of CentralManager.retrievePeripherals(identifiers:)
                                   + 1));
  v0[59] = v32;
  *v32 = v0;
  v32[1] = sub_1009DF888;
  return v34(v25);
}

uint64_t sub_1009DF888(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 472);
  *(_QWORD *)(v3 + 480) = a1;
  *(_QWORD *)(v3 + 488) = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    v5 = sub_1009DFFBC;
  }
  else
  {
    swift_release();
    v5 = sub_1009DF8FC;
  }
  return swift_task_switch(v5, 0, 0);
}

void sub_1009DF8FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  BOOL v22;
  void (*v23)(uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38[2];

  v1 = *(_QWORD *)(v0 + 480);
  if ((unint64_t)v1 >> 62)
  {
    if (v1 < 0)
      v13 = *(_QWORD *)(v0 + 480);
    else
      v13 = v1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*(_QWORD *)(v0 + 480));
    v14 = _CocoaArrayWrapper.endIndex.getter(v13);
    swift_bridgeObjectRelease();
    if (v14)
      goto LABEL_3;
LABEL_14:
    v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 448);
    v16 = *(_QWORD *)(v0 + 304);
    v18 = *(_QWORD *)(v0 + 280);
    v17 = *(_QWORD *)(v0 + 288);
    swift_bridgeObjectRelease();
    v19 = v15(v16, v18, v17);
    v20 = Logger.logObject.getter(v19);
    v21 = static os_log_type_t.error.getter(v20);
    v22 = os_log_type_enabled(v20, v21);
    v23 = *(void (**)(uint64_t, uint64_t))(v0 + 456);
    v24 = *(_QWORD *)(v0 + 304);
    v25 = *(_QWORD *)(v0 + 288);
    if (v22)
    {
      v26 = (uint8_t *)swift_slowAlloc(12, -1);
      v27 = swift_slowAlloc(32, -1);
      v38[0] = v27;
      *(_DWORD *)v26 = 136446210;
      v28 = sub_1000193A4(&qword_1010EE1D0, &qword_1010EF7C0, (const char *)&protocol conformance descriptor for Identifier<A>);
      v29 = dispatch thunk of CustomStringConvertible.description.getter(v25, v28);
      *(_QWORD *)(v0 + 232) = sub_100016940(v29, v30, v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 232, v0 + 240, v26 + 4, v26 + 12);
      swift_bridgeObjectRelease();
      v23(v24, v25);
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "Missing peripheral for %{public}s", v26, 0xCu);
      swift_arrayDestroy(v27, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v27, -1, -1);
      swift_slowDealloc(v26, -1, -1);
    }
    else
    {
      v23(*(_QWORD *)(v0 + 304), *(_QWORD *)(v0 + 288));
    }

    v31 = sub_100350CCC();
    v32 = swift_allocError(&type metadata for PencilPairingService.Error, v31, 0, 0);
    *(_OWORD *)v33 = xmmword_100E58220;
    *(_BYTE *)(v33 + 16) = 3;
    swift_willThrow(v32);
    swift_release();
    swift_release();
    v34 = *(_QWORD *)(v0 + 360);
    v35 = *(_QWORD *)(v0 + 336);
    v37 = *(_QWORD *)(v0 + 304);
    v36 = *(_QWORD *)(v0 + 312);
    swift_task_dealloc(*(_QWORD *)(v0 + 368));
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    swift_task_dealloc(v36);
    swift_task_dealloc(v37);
    (*(void (**)(void))(v0 + 8))();
    return;
  }
  if (!*(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_14;
LABEL_3:
  if ((v1 & 0xC000000000000001) != 0)
  {
    v2 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, *(_QWORD *)(v0 + 480));
  }
  else
  {
    if (!*(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      return;
    }
    v2 = *(_QWORD *)(*(_QWORD *)(v0 + 480) + 32);
    swift_retain();
  }
  *(_QWORD *)(v0 + 496) = v2;
  swift_bridgeObjectRelease();
  v3 = swift_retain_n(v2, 2);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = swift_slowAlloc(22, -1);
    v7 = swift_slowAlloc(64, -1);
    v38[0] = v7;
    *(_DWORD *)v6 = 136446466;
    *(_QWORD *)(v0 + 208) = sub_100016940(0xD00000000000001ALL, 0x8000000100EEC3E0, v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 208, v0 + 216, v6 + 4, v6 + 12);
    *(_WORD *)(v6 + 12) = 2080;
    *(_QWORD *)(v0 + 216) = v2;
    v8 = type metadata accessor for Peripheral(0);
    v9 = sub_100006204(&qword_1010EC508, (uint64_t (*)(uint64_t))&type metadata accessor for Peripheral, (uint64_t)&protocol conformance descriptor for Peripheral);
    v10 = dispatch thunk of CustomStringConvertible.description.getter(v8, v9);
    *(_QWORD *)(v0 + 224) = sub_100016940(v10, v11, v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 224, v0 + 232, v6 + 14, v6 + 22);
    swift_bridgeObjectRelease();
    swift_release_n(v2, 2);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "%{public}s Retrieved peripheral: %s", (uint8_t *)v6, 0x16u);
    swift_arrayDestroy(v7, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);
  }
  else
  {
    swift_release_n(v2, 2);
  }

  v12 = (_QWORD *)swift_task_alloc(dword_10110F784);
  *(_QWORD *)(v0 + 504) = v12;
  *v12 = v0;
  v12[1] = sub_1009DFDA0;
  sub_1009D2FDC(v2);
}

uint64_t sub_1009DFDA0(char a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 504);
  *(_BYTE *)(v3 + 521) = a1;
  *(_QWORD *)(v3 + 512) = v1;
  swift_task_dealloc(v4);
  if (v1)
    v5 = sub_1009E0048;
  else
    v5 = sub_1009DFE10;
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_1009DFE10(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *(_QWORD *)(v1 + 512);
  static Task<>.checkCancellation()(a1);
  if (v2)
  {
    swift_release();
    swift_release();
    swift_release();
    v3 = *(_QWORD *)(v1 + 360);
    v4 = *(_QWORD *)(v1 + 336);
    v6 = *(_QWORD *)(v1 + 304);
    v5 = *(_QWORD *)(v1 + 312);
    swift_task_dealloc(*(_QWORD *)(v1 + 368));
    swift_task_dealloc(v3);
    swift_task_dealloc(v4);
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
  }
  else
  {
    *(_QWORD *)(v1 + 200) = qword_100E584B8[*(char *)(v1 + 521)];
    v7 = sub_10001A9A8(&qword_10110FA60);
    CheckedContinuation.resume(returning:)(v1 + 200, v7);
    swift_release();
    swift_release();
    swift_release();
    v8 = *(_QWORD *)(v1 + 360);
    v9 = *(_QWORD *)(v1 + 336);
    v11 = *(_QWORD *)(v1 + 304);
    v10 = *(_QWORD *)(v1 + 312);
    swift_task_dealloc(*(_QWORD *)(v1 + 368));
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
  }
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_1009DFF3C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 384);
  swift_release(*(_QWORD *)(v0 + 416));
  swift_release(v1);
  v2 = *(_QWORD *)(v0 + 360);
  v3 = *(_QWORD *)(v0 + 336);
  v5 = *(_QWORD *)(v0 + 304);
  v4 = *(_QWORD *)(v0 + 312);
  swift_task_dealloc(*(_QWORD *)(v0 + 368));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1009DFFBC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 416);
  v2 = *(_QWORD *)(v0 + 384);
  swift_release(*(_QWORD *)(v0 + 464));
  swift_release(v1);
  swift_release(v2);
  v3 = *(_QWORD *)(v0 + 360);
  v4 = *(_QWORD *)(v0 + 336);
  v6 = *(_QWORD *)(v0 + 304);
  v5 = *(_QWORD *)(v0 + 312);
  swift_task_dealloc(*(_QWORD *)(v0 + 368));
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1009E0048()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 416);
  v2 = *(_QWORD *)(v0 + 384);
  swift_release(*(_QWORD *)(v0 + 496));
  swift_release(v1);
  swift_release(v2);
  v3 = *(_QWORD *)(v0 + 360);
  v4 = *(_QWORD *)(v0 + 336);
  v6 = *(_QWORD *)(v0 + 304);
  v5 = *(_QWORD *)(v0 + 312);
  swift_task_dealloc(*(_QWORD *)(v0 + 368));
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1009E00D4(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  *(_QWORD *)(v4 + 80) = a3;
  *(_QWORD *)(v4 + 88) = a4;
  *(_BYTE *)(v4 + 128) = a2;
  *(_QWORD *)(v4 + 72) = a1;
  v5 = sub_10001A9A8(&qword_1010EF7C0);
  *(_QWORD *)(v4 + 96) = v5;
  v6 = *(_QWORD *)(v5 - 8);
  *(_QWORD *)(v4 + 104) = v6;
  v7 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v4 + 112) = swift_task_alloc(v7);
  *(_QWORD *)(v4 + 120) = swift_task_alloc(v7);
  return swift_task_switch(sub_1009E0150, 0, 0);
}

uint64_t sub_1009E0150()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  _BOOL4 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  _BOOL4 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  _BOOL4 v42;
  uint64_t v43;
  uint8_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  if ((*(_BYTE *)(v0 + 128) & 1) != 0)
  {
    v17 = *(_QWORD *)(v0 + 72);
    swift_errorRetain(v17);
    if (qword_1010EA100 != -1)
      swift_once(&qword_1010EA100, sub_1009B44BC);
    v19 = *(_QWORD *)(v0 + 104);
    v18 = *(_QWORD *)(v0 + 112);
    v20 = *(_QWORD *)(v0 + 96);
    v22 = *(_QWORD *)(v0 + 72);
    v21 = *(_QWORD *)(v0 + 80);
    v23 = type metadata accessor for Logger(0);
    sub_10001A9E8(v23, (uint64_t)qword_10110F2A8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 16))(v18, v21, v20);
    sub_1002437C4(v22, 1);
    v24 = swift_errorRetain(v17);
    v25 = Logger.logObject.getter(v24);
    v26 = static os_log_type_t.error.getter(v25);
    v27 = os_log_type_enabled(v25, v26);
    v29 = *(_QWORD *)(v0 + 104);
    v28 = *(_QWORD *)(v0 + 112);
    v30 = *(_QWORD *)(v0 + 96);
    v31 = *(_QWORD *)(v0 + 72);
    if (v27)
    {
      v48 = v17;
      v32 = swift_slowAlloc(32, -1);
      v49 = (uint64_t *)swift_slowAlloc(8, -1);
      v50 = swift_slowAlloc(64, -1);
      v52 = v50;
      *(_DWORD *)v32 = 136446722;
      *(_QWORD *)(v0 + 32) = sub_100016940(0xD00000000000001ALL, 0x8000000100EEC3E0, &v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v32 + 4, v32 + 12);
      *(_WORD *)(v32 + 12) = 2082;
      v33 = sub_1000193A4(&qword_1010EE1D0, &qword_1010EF7C0, (const char *)&protocol conformance descriptor for Identifier<A>);
      v34 = dispatch thunk of CustomStringConvertible.description.getter(v30, v33);
      *(_QWORD *)(v0 + 40) = sub_100016940(v34, v35, &v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v32 + 14, v32 + 22);
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v28, v30);
      *(_WORD *)(v32 + 22) = 2114;
      swift_errorRetain(v48);
      v36 = _swift_stdlib_bridgeErrorToNSError(v48);
      *(_QWORD *)(v0 + 48) = v36;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56, v32 + 24, v32 + 32);
      *v49 = v36;
      sub_10010F948(v31, 1);
      sub_10010F948(v31, 1);
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "%{public}s failed for %{public}s. Error %{public}@", (uint8_t *)v32, 0x20u);
      v37 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
      swift_arrayDestroy(v49, 1, v37);
      swift_slowDealloc(v49, -1, -1);
      swift_arrayDestroy(v50, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v50, -1, -1);
      swift_slowDealloc(v32, -1, -1);

      v17 = v48;
      v38 = static Task<>.isCancelled.getter();
      if ((v38 & 1) == 0)
      {
LABEL_10:
        *(_QWORD *)(v0 + 16) = v17;
        v39 = sub_10001A9A8(&qword_10110FA60);
        CheckedContinuation.resume(throwing:)(v0 + 16, v39);
        goto LABEL_16;
      }
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v28, v30);
      sub_10010F948(v31, 1);
      sub_10010F948(v31, 1);

      v38 = static Task<>.isCancelled.getter();
      if ((v38 & 1) == 0)
        goto LABEL_10;
    }
    v40 = Logger.logObject.getter(v38);
    v41 = static os_log_type_t.error.getter(v40);
    v42 = os_log_type_enabled(v40, v41);
    v43 = *(_QWORD *)(v0 + 72);
    if (v42)
    {
      v44 = (uint8_t *)swift_slowAlloc(12, -1);
      v45 = swift_slowAlloc(32, -1);
      v52 = v45;
      *(_DWORD *)v44 = 136446210;
      *(_QWORD *)(v0 + 24) = sub_100016940(0xD00000000000001ALL, 0x8000000100EEC3E0, &v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v44 + 4, v44 + 12);
      _os_log_impl((void *)&_mh_execute_header, v40, v41, "%{public}s Not resuming continuation in cancelled task.", v44, 0xCu);
      swift_arrayDestroy(v45, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v45, -1, -1);
      swift_slowDealloc(v44, -1, -1);

      sub_10010F948(v43, 1);
    }
    else
    {
      sub_10010F948(*(_QWORD *)(v0 + 72), 1);

    }
    goto LABEL_16;
  }
  if (qword_1010EA100 != -1)
    swift_once(&qword_1010EA100, sub_1009B44BC);
  v1 = *(_QWORD *)(v0 + 120);
  v2 = *(_QWORD *)(v0 + 96);
  v3 = *(_QWORD *)(v0 + 104);
  v4 = *(_QWORD *)(v0 + 80);
  v5 = type metadata accessor for Logger(0);
  sub_10001A9E8(v5, (uint64_t)qword_10110F2A8);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v1, v4, v2);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.default.getter(v7);
  v9 = os_log_type_enabled(v7, v8);
  v10 = *(_QWORD *)(v0 + 120);
  v11 = *(_QWORD *)(v0 + 96);
  v12 = *(_QWORD *)(v0 + 104);
  if (v9)
  {
    v13 = swift_slowAlloc(22, -1);
    v51 = swift_slowAlloc(64, -1);
    v52 = v51;
    *(_DWORD *)v13 = 136446466;
    *(_QWORD *)(v0 + 56) = sub_100016940(0xD00000000000001ALL, 0x8000000100EEC3E0, &v52);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 64, v13 + 4, v13 + 12);
    *(_WORD *)(v13 + 12) = 2082;
    v14 = sub_1000193A4(&qword_1010EE1D0, &qword_1010EF7C0, (const char *)&protocol conformance descriptor for Identifier<A>);
    v15 = dispatch thunk of CustomStringConvertible.description.getter(v11, v14);
    *(_QWORD *)(v0 + 64) = sub_100016940(v15, v16, &v52);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72, v13 + 14, v13 + 22);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v10, v11);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "%{public}s succeeded for %{public}s", (uint8_t *)v13, 0x16u);
    swift_arrayDestroy(v51, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v51, -1, -1);
    swift_slowDealloc(v13, -1, -1);

  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v12 + 8))(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 96));

  }
LABEL_16:
  v46 = *(_QWORD *)(v0 + 112);
  swift_task_dealloc(*(_QWORD *)(v0 + 120));
  swift_task_dealloc(v46);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1009E07D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3[2] = a2;
  v3[3] = a3;
  v4 = type metadata accessor for UUID(0);
  v3[4] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[5] = v5;
  v3[6] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10001A9A8(&qword_1010EF7C0);
  v3[7] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[8] = v7;
  v3[9] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1009E0864, 0, 0);
}

uint64_t sub_1009E0864()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = v0[6];
  (*(void (**)(uint64_t, _QWORD, _QWORD))(v0[5] + 16))(v1, v0[3], v0[4]);
  v2 = type metadata accessor for Peripheral(0);
  Identifier.init(_:)(v1, v2);
  v3 = (_QWORD *)swift_task_alloc(dword_10110F72C);
  v0[10] = v3;
  *v3 = v0;
  v3[1] = sub_1009E08E4;
  return sub_1009E0994(v0[9]);
}

uint64_t sub_1009E08E4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v3 = *(_QWORD *)(*v1 + 72);
  v2 = *(_QWORD *)(*v1 + 80);
  v4 = *(_QWORD *)(*v1 + 56);
  v5 = *(_QWORD *)(*v1 + 64);
  v6 = *v1;
  *(_QWORD *)(v6 + 88) = v0;
  swift_task_dealloc(v2);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v4);
  if (v0)
    return swift_task_switch(sub_1005B0EE0, 0, 0);
  v8 = *(_QWORD *)(v6 + 48);
  swift_task_dealloc(*(_QWORD *)(v6 + 72));
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v6 + 8))();
}

uint64_t sub_1009E0994(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v2[16] = a1;
  v2[17] = v1;
  v3 = type metadata accessor for CentralManager.State(0);
  v2[18] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[19] = v4;
  v2[20] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10001A9A8(&qword_1010EF7C0);
  v2[21] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v2[22] = v6;
  v7 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[23] = swift_task_alloc(v7);
  v2[24] = swift_task_alloc(v7);
  v2[25] = swift_task_alloc(v7);
  return swift_task_switch(sub_1009E0A3C, v1, 0);
}

uint64_t sub_1009E0A3C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  _BOOL4 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  void (*v17)(uint64_t, uint64_t);
  _QWORD *v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  if (qword_1010EA100 != -1)
    swift_once(&qword_1010EA100, sub_1009B44BC);
  v1 = v0[16];
  v2 = v0[25];
  v3 = v0[21];
  v4 = v0[22];
  v5 = type metadata accessor for Logger(0);
  v0[26] = sub_10001A9E8(v5, (uint64_t)qword_10110F2A8);
  v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v0[27] = v6;
  v7 = v6(v2, v1, v3);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter(v8);
  v10 = os_log_type_enabled(v8, v9);
  v11 = v0[25];
  v12 = v0[21];
  if (v10)
  {
    v20 = v0[22];
    v13 = swift_slowAlloc(22, -1);
    v21 = swift_slowAlloc(64, -1);
    v22 = v21;
    *(_DWORD *)v13 = 136446466;
    v0[14] = sub_100016940(0xD00000000000001CLL, 0x8000000100EEBF90, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 14, v0 + 15, v13 + 4, v13 + 12);
    *(_WORD *)(v13 + 12) = 2082;
    v14 = sub_1000193A4(&qword_1010EE1D0, &qword_1010EF7C0, (const char *)&protocol conformance descriptor for Identifier<A>);
    v15 = dispatch thunk of CustomStringConvertible.description.getter(v12, v14);
    v0[15] = sub_100016940(v15, v16, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 15, v0 + 16, v13 + 14, v13 + 22);
    swift_bridgeObjectRelease();
    v17 = *(void (**)(uint64_t, uint64_t))(v20 + 8);
    v17(v11, v12);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "%{public}s for identifier: %{public}s", (uint8_t *)v13, 0x16u);
    swift_arrayDestroy(v21, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v21, -1, -1);
    swift_slowDealloc(v13, -1, -1);
  }
  else
  {
    v17 = *(void (**)(uint64_t, uint64_t))(v0[22] + 8);
    v17(v11, v12);
  }

  v0[28] = v17;
  v0[29] = type metadata accessor for CentralManager(0);
  v18 = (_QWORD *)swift_task_alloc(async function pointer to static CentralManager.pairingCentralManager.getter[1]);
  v0[30] = v18;
  *v18 = v0;
  v18[1] = sub_1009E0CB0;
  return static CentralManager.pairingCentralManager.getter();
}

uint64_t sub_1009E0CB0(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *(_QWORD *)(*v2 + 240);
  v4 = *v2;
  *(_QWORD *)(v4 + 248) = a1;
  swift_task_dealloc(v3);
  if (!v1)
    return swift_task_switch(sub_1009E0D58, *(_QWORD *)(v4 + 136), 0);
  v5 = *(_QWORD *)(v4 + 192);
  v6 = *(_QWORD *)(v4 + 184);
  v7 = *(_QWORD *)(v4 + 160);
  swift_task_dealloc(*(_QWORD *)(v4 + 200));
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v4 + 8))();
}

uint64_t sub_1009E0D58()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;

  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0[19] + 104))(v0[20], enum case for CentralManager.State.poweredOn(_:), v0[18]);
  v1 = (_QWORD *)swift_task_alloc(async function pointer to CentralManagerProtocol.await(state:)[1]);
  v0[32] = v1;
  v2 = sub_100006204(&qword_1010EC468, (uint64_t (*)(uint64_t))&type metadata accessor for CentralManager, (uint64_t)&protocol conformance descriptor for CentralManager);
  *v1 = v0;
  v1[1] = sub_1009E0DEC;
  return CentralManagerProtocol.await(state:)(v0[20], v0[29], v2);
}

uint64_t sub_1009E0DEC()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  void *v8;

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 256);
  *(_QWORD *)(*(_QWORD *)v1 + 264) = v0;
  swift_task_dealloc(v3);
  v5 = v2[19];
  v4 = v2[20];
  v7 = v2 + 17;
  v6 = v2[17];
  (*(void (**)(uint64_t, _QWORD))(v5 + 8))(v4, v7[1]);
  if (v0)
    v8 = sub_1009E1C14;
  else
    v8 = sub_1009E0E60;
  return swift_task_switch(v8, v6, 0);
}

uint64_t sub_1009E0E60(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  _BOOL4 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  void (*v23)(uint64_t, uint64_t);
  uint64_t (*v24)(uint64_t);
  uint64_t v25;

  v2 = Logger.logObject.getter(a1);
  v3 = static os_log_type_t.default.getter(v2);
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc(12, -1);
    v5 = swift_slowAlloc(32, -1);
    v25 = v5;
    *(_DWORD *)v4 = 136446210;
    *(_QWORD *)(v1 + 104) = sub_100016940(0xD00000000000001CLL, 0x8000000100EEBF90, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 104, v1 + 112, v4 + 4, v4 + 12);
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%{public}s CentralManager has powered on!", v4, 0xCu);
    swift_arrayDestroy(v5, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v5, -1, -1);
    swift_slowDealloc(v4, -1, -1);
  }

  v6 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v1 + 216))(*(_QWORD *)(v1 + 192), *(_QWORD *)(v1 + 128), *(_QWORD *)(v1 + 168));
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.default.getter(v7);
  v9 = os_log_type_enabled(v7, v8);
  v10 = *(_QWORD *)(v1 + 192);
  v11 = *(_QWORD *)(v1 + 168);
  if (v9)
  {
    v23 = *(void (**)(uint64_t, uint64_t))(v1 + 224);
    v12 = swift_slowAlloc(22, -1);
    v13 = swift_slowAlloc(64, -1);
    v25 = v13;
    *(_DWORD *)v12 = 136446466;
    *(_QWORD *)(v1 + 88) = sub_100016940(0xD00000000000001CLL, 0x8000000100EEBF90, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 88, v1 + 96, v12 + 4, v12 + 12);
    *(_WORD *)(v12 + 12) = 2082;
    v14 = sub_1000193A4(&qword_1010EE1D0, &qword_1010EF7C0, (const char *)&protocol conformance descriptor for Identifier<A>);
    v15 = dispatch thunk of CustomStringConvertible.description.getter(v11, v14);
    *(_QWORD *)(v1 + 96) = sub_100016940(v15, v16, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 96, v1 + 104, v12 + 14, v12 + 22);
    swift_bridgeObjectRelease();
    v23(v10, v11);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "%{public}s Retrieving peripheral matching identifier: %{public}s", (uint8_t *)v12, 0x16u);
    swift_arrayDestroy(v13, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v13, -1, -1);
    swift_slowDealloc(v12, -1, -1);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v1 + 224))(*(_QWORD *)(v1 + 192), *(_QWORD *)(v1 + 168));
  }

  v17 = *(_QWORD *)(v1 + 168);
  v18 = sub_10001A9A8(&qword_1011003C0);
  v19 = type metadata accessor for UUID(0);
  v20 = swift_allocObject(v18, ((*(unsigned __int8 *)(*(_QWORD *)(v19 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v19 - 8) + 80))+ *(_QWORD *)(*(_QWORD *)(v19 - 8) + 72), *(unsigned __int8 *)(*(_QWORD *)(v19 - 8) + 80) | 7);
  *(_QWORD *)(v1 + 272) = v20;
  *(_OWORD *)(v20 + 16) = xmmword_100E22B00;
  Identifier.id.getter(v17);
  v24 = (uint64_t (*)(uint64_t))((char *)&async function pointer to dispatch thunk of CentralManager.retrievePeripherals(identifiers:)
                                        + async function pointer to dispatch thunk of CentralManager.retrievePeripherals(identifiers:));
  v21 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of CentralManager.retrievePeripherals(identifiers:)
                                   + 1));
  *(_QWORD *)(v1 + 280) = v21;
  *v21 = v1;
  v21[1] = sub_1009E11D8;
  return v24(v20);
}

uint64_t sub_1009E11D8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 280);
  v3[36] = a1;
  v3[37] = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    v5 = v3[17];
    v6 = sub_1009E1C78;
  }
  else
  {
    v7 = v3[17];
    swift_bridgeObjectRelease();
    v6 = sub_1009E1254;
    v5 = v7;
  }
  return swift_task_switch(v6, v5, 0);
}

void sub_1009E1254()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  void (*v4)(void);
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  _BOOL4 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(void);
  void (*v29)(uint64_t, uint64_t);
  uint64_t v30[2];

  v1 = v0[36];
  if (!((unint64_t)v1 >> 62))
  {
    if (*(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_3;
LABEL_11:
    v7 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v0[27];
    v8 = v0[23];
    v9 = v0[21];
    v10 = v0[16];
    swift_bridgeObjectRelease();
    v11 = v7(v8, v10, v9);
    v12 = Logger.logObject.getter(v11);
    v13 = static os_log_type_t.error.getter(v12);
    v14 = os_log_type_enabled(v12, v13);
    v15 = v0[23];
    v16 = v0[21];
    if (v14)
    {
      v29 = (void (*)(uint64_t, uint64_t))v0[28];
      v17 = swift_slowAlloc(22, -1);
      v18 = swift_slowAlloc(64, -1);
      v30[0] = v18;
      *(_DWORD *)v17 = 136446466;
      v0[9] = sub_100016940(0xD00000000000001CLL, 0x8000000100EEBF90, v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 9, v0 + 10, v17 + 4, v17 + 12);
      *(_WORD *)(v17 + 12) = 2082;
      v19 = sub_1000193A4(&qword_1010EE1D0, &qword_1010EF7C0, (const char *)&protocol conformance descriptor for Identifier<A>);
      v20 = dispatch thunk of CustomStringConvertible.description.getter(v16, v19);
      v0[10] = sub_100016940(v20, v21, v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 10, v0 + 11, v17 + 14, v17 + 22);
      swift_bridgeObjectRelease();
      v29(v15, v16);
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "%{public}s Missing peripheral for %{public}s", (uint8_t *)v17, 0x16u);
      swift_arrayDestroy(v18, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v18, -1, -1);
      swift_slowDealloc(v17, -1, -1);
    }
    else
    {
      ((void (*)(_QWORD, _QWORD))v0[28])(v0[23], v0[21]);
    }

    v22 = sub_100350CCC();
    v23 = swift_allocError(&type metadata for PencilPairingService.Error, v22, 0, 0);
    *(_OWORD *)v24 = xmmword_100E58220;
    *(_BYTE *)(v24 + 16) = 3;
    swift_willThrow(v23);
    swift_release();
    v25 = v0[24];
    v26 = v0[23];
    v27 = v0[20];
    swift_task_dealloc(v0[25]);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    v4 = (void (*)(void))v0[1];
    goto LABEL_15;
  }
  if (v1 < 0)
    v5 = v0[36];
  else
    v5 = v1 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v0[36]);
  v6 = _CocoaArrayWrapper.endIndex.getter(v5);
  swift_bridgeObjectRelease();
  if (!v6)
    goto LABEL_11;
LABEL_3:
  if ((v1 & 0xC000000000000001) != 0)
  {
    v2 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, v0[36]);
    goto LABEL_6;
  }
  if (*(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v2 = *(_QWORD *)(v0[36] + 32);
    swift_retain();
LABEL_6:
    v0[38] = v2;
    swift_bridgeObjectRelease();
    v28 = (void (*)(void))((char *)&async function pointer to dispatch thunk of Peripheral.isPaired.getter
                         + async function pointer to dispatch thunk of Peripheral.isPaired.getter);
    v3 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of Peripheral.isPaired.getter
                                    + 1));
    v0[39] = v3;
    *v3 = v0;
    v3[1] = sub_1009E1588;
    v4 = v28;
LABEL_15:
    v4();
    return;
  }
  __break(1u);
}

uint64_t sub_1009E1588(char a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 312);
  *(_QWORD *)(*v2 + 320) = v1;
  swift_task_dealloc(v5);
  v6 = *(_QWORD *)(v4 + 136);
  if (v1)
  {
    v7 = sub_1009E1CE8;
  }
  else
  {
    *(_BYTE *)(v4 + 344) = a1 & 1;
    v7 = sub_1009E1600;
  }
  return swift_task_switch(v7, v6, 0);
}

uint64_t sub_1009E1600()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  os_log_type_t v14;
  _BOOL4 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t (*v24)(void);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v29)(void);
  uint64_t v30;

  v1 = *(unsigned __int8 *)(v0 + 344);
  v2 = swift_retain_n(*(_QWORD *)(v0 + 304), 2);
  v3 = Logger.logObject.getter(v2);
  v4 = v3;
  if (v1 == 1)
  {
    v5 = static os_log_type_t.default.getter(v3);
    v6 = os_log_type_enabled(v4, v5);
    v7 = *(_QWORD *)(v0 + 304);
    if (v6)
    {
      v8 = (uint8_t *)swift_slowAlloc(12, -1);
      v9 = swift_slowAlloc(32, -1);
      v30 = v9;
      *(_DWORD *)v8 = 136446210;
      *(_QWORD *)(v0 + 56) = v7;
      v10 = type metadata accessor for Peripheral(0);
      v11 = sub_100006204(&qword_1010EC508, (uint64_t (*)(uint64_t))&type metadata accessor for Peripheral, (uint64_t)&protocol conformance descriptor for Peripheral);
      v12 = dispatch thunk of CustomStringConvertible.description.getter(v10, v11);
      *(_QWORD *)(v0 + 64) = sub_100016940(v12, v13, &v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72, v8 + 4, v8 + 12);
      swift_bridgeObjectRelease();
      swift_release_n(v7, 2);
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Now unpairing peripheral: %{public}s", v8, 0xCu);
      swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v9, -1, -1);
      swift_slowDealloc(v8, -1, -1);
    }
    else
    {
      swift_release_n(*(_QWORD *)(v0 + 304), 2);
    }

    v29 = (uint64_t (*)(void))((char *)&async function pointer to dispatch thunk of Peripheral.unpair()
                            + async function pointer to dispatch thunk of Peripheral.unpair());
    v23 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of Peripheral.unpair()
                                     + 1));
    *(_QWORD *)(v0 + 328) = v23;
    *v23 = v0;
    v23[1] = sub_1009E19BC;
    v24 = v29;
  }
  else
  {
    v14 = static os_log_type_t.error.getter(v3);
    v15 = os_log_type_enabled(v4, v14);
    v16 = *(_QWORD *)(v0 + 304);
    if (v15)
    {
      v17 = swift_slowAlloc(22, -1);
      v18 = swift_slowAlloc(64, -1);
      v30 = v18;
      *(_DWORD *)v17 = 136446466;
      *(_QWORD *)(v0 + 16) = sub_100016940(0xD00000000000001CLL, 0x8000000100EEBF90, &v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v17 + 4, v17 + 12);
      *(_WORD *)(v17 + 12) = 2082;
      *(_QWORD *)(v0 + 24) = v16;
      v19 = type metadata accessor for Peripheral(0);
      v20 = sub_100006204(&qword_1010EC508, (uint64_t (*)(uint64_t))&type metadata accessor for Peripheral, (uint64_t)&protocol conformance descriptor for Peripheral);
      v21 = dispatch thunk of CustomStringConvertible.description.getter(v19, v20);
      *(_QWORD *)(v0 + 32) = sub_100016940(v21, v22, &v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v17 + 14, v17 + 22);
      swift_bridgeObjectRelease();
      swift_release_n(v16, 2);
      _os_log_impl((void *)&_mh_execute_header, v4, v14, "%{public}s Peripheral is not paired. No need to unpair %{public}s", (uint8_t *)v17, 0x16u);
      swift_arrayDestroy(v18, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v18, -1, -1);
      swift_slowDealloc(v17, -1, -1);
      swift_release();

      swift_release();
    }
    else
    {
      swift_release_n(*(_QWORD *)(v0 + 304), 3);
      swift_release();

    }
    v25 = *(_QWORD *)(v0 + 192);
    v26 = *(_QWORD *)(v0 + 184);
    v27 = *(_QWORD *)(v0 + 160);
    swift_task_dealloc(*(_QWORD *)(v0 + 200));
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    v24 = *(uint64_t (**)(void))(v0 + 8);
  }
  return v24();
}

uint64_t sub_1009E19BC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 328);
  *(_QWORD *)(*v1 + 336) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_1009E1D58;
  else
    v4 = sub_1009E1A20;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 136), 0);
}

uint64_t sub_1009E1A20()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint64_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v1 = swift_retain_n(*(_QWORD *)(v0 + 304), 2);
  v2 = Logger.logObject.getter(v1);
  v3 = static os_log_type_t.default.getter(v2);
  if (os_log_type_enabled(v2, v3))
  {
    v4 = *(_QWORD *)(v0 + 304);
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = swift_slowAlloc(32, -1);
    *(_DWORD *)v5 = 136446210;
    v15 = v6;
    *(_QWORD *)(v0 + 40) = v4;
    v7 = type metadata accessor for Peripheral(0);
    v8 = sub_100006204(&qword_1010EC508, (uint64_t (*)(uint64_t))&type metadata accessor for Peripheral, (uint64_t)&protocol conformance descriptor for Peripheral);
    v9 = dispatch thunk of CustomStringConvertible.description.getter(v7, v8);
    *(_QWORD *)(v0 + 48) = sub_100016940(v9, v10, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56, v5 + 4, v5 + 12);
    swift_bridgeObjectRelease();
    swift_release_n(v4, 2);
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Bluetooth device unpaired successfully! %{public}s", v5, 0xCu);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);
    swift_release();

    swift_release();
  }
  else
  {
    swift_release_n(*(_QWORD *)(v0 + 304), 3);
    swift_release();

  }
  v11 = *(_QWORD *)(v0 + 192);
  v12 = *(_QWORD *)(v0 + 184);
  v13 = *(_QWORD *)(v0 + 160);
  swift_task_dealloc(*(_QWORD *)(v0 + 200));
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1009E1C14()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  swift_release(*(_QWORD *)(v0 + 248));
  v1 = *(_QWORD *)(v0 + 192);
  v2 = *(_QWORD *)(v0 + 184);
  v3 = *(_QWORD *)(v0 + 160);
  swift_task_dealloc(*(_QWORD *)(v0 + 200));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1009E1C78()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 248);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 272));
  swift_release(v1);
  v2 = *(_QWORD *)(v0 + 192);
  v3 = *(_QWORD *)(v0 + 184);
  v4 = *(_QWORD *)(v0 + 160);
  swift_task_dealloc(*(_QWORD *)(v0 + 200));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1009E1CE8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 248);
  swift_release(*(_QWORD *)(v0 + 304));
  swift_release(v1);
  v2 = *(_QWORD *)(v0 + 192);
  v3 = *(_QWORD *)(v0 + 184);
  v4 = *(_QWORD *)(v0 + 160);
  swift_task_dealloc(*(_QWORD *)(v0 + 200));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1009E1D58()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 248);
  swift_release(*(_QWORD *)(v0 + 304));
  swift_release(v1);
  v2 = *(_QWORD *)(v0 + 192);
  v3 = *(_QWORD *)(v0 + 184);
  v4 = *(_QWORD *)(v0 + 160);
  swift_task_dealloc(*(_QWORD *)(v0 + 200));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1009E1DC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  v4[12] = a3;
  v4[13] = a4;
  v4[11] = a2;
  v6 = sub_10001A9A8(&qword_1010ED860);
  v4[14] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10001A9A8(&qword_1010EF7C0);
  v4[15] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v4[16] = v8;
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[17] = swift_task_alloc(v9);
  v4[18] = swift_task_alloc(v9);
  v4[19] = swift_task_alloc(v9);
  v4[20] = swift_task_alloc(v9);
  v10 = type metadata accessor for PencilPairingService.PeripheralDiscovery(0);
  v4[21] = v10;
  v11 = (*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[22] = swift_task_alloc(v11);
  v4[23] = swift_task_alloc(v11);
  v12 = sub_10001A9A8(&qword_1010EF7C8);
  v4[24] = v12;
  v4[25] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v12 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1009E1EDC, a4, 0);
}

uint64_t sub_1009E1EDC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int EnumCaseMultiPayload;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  void (*v19)(_QWORD, uint64_t, _QWORD);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t (*v27)(uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t (*v39)(uint64_t);
  uint64_t v40;

  v1 = *(_QWORD *)(v0 + 192);
  v2 = *(_QWORD *)(v0 + 200);
  sub_10000F9B8(*(_QWORD *)(v0 + 88), v2, &qword_1010EF7C8);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v2, v1);
  v4 = *(uint64_t **)(v0 + 200);
  if (EnumCaseMultiPayload == 1)
  {
    v5 = *v4;
    if (qword_1010EA100 != -1)
      swift_once(&qword_1010EA100, sub_1009B44BC);
    v6 = type metadata accessor for Logger(0);
    sub_10001A9E8(v6, (uint64_t)qword_10110F2A8);
    swift_errorRetain(v5);
    v7 = swift_errorRetain(v5);
    v8 = Logger.logObject.getter(v7);
    v9 = static os_log_type_t.error.getter(v8);
    if (os_log_type_enabled(v8, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc(12, -1);
      v11 = swift_slowAlloc(32, -1);
      v40 = v11;
      *(_DWORD *)v10 = 136315138;
      swift_getErrorValue(v5, v0 + 40, v0 + 16);
      v12 = Error.localizedDescription.getter(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
      *(_QWORD *)(v0 + 48) = sub_100016940(v12, v13, &v40);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56, v10 + 4, v10 + 12);
      swift_bridgeObjectRelease();
      swift_errorRelease(v5);
      swift_errorRelease(v5);
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Can't determine accessory state due to failure on peripheral discovery: %s", v10, 0xCu);
      swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v11, -1, -1);
      swift_slowDealloc(v10, -1, -1);

      swift_errorRelease(v5);
    }
    else
    {
      swift_errorRelease(v5);
      swift_errorRelease(v5);
      swift_errorRelease(v5);

    }
    v28 = *(_QWORD *)(v0 + 176);
    v29 = *(_QWORD *)(v0 + 184);
    v31 = *(_QWORD *)(v0 + 152);
    v30 = *(_QWORD *)(v0 + 160);
    v33 = *(_QWORD *)(v0 + 136);
    v32 = *(_QWORD *)(v0 + 144);
    v34 = *(_QWORD *)(v0 + 112);
    swift_task_dealloc(*(_QWORD *)(v0 + 200));
    swift_task_dealloc(v29);
    swift_task_dealloc(v28);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v14 = *(_QWORD *)(v0 + 176);
    v15 = *(_QWORD *)(v0 + 184);
    v16 = *(_QWORD *)(v0 + 168);
    v17 = *(_QWORD *)(v0 + 128);
    sub_1000126EC((uint64_t)v4, v15, type metadata accessor for PencilPairingService.PeripheralDiscovery);
    sub_10005972C(v15, v14, type metadata accessor for PencilPairingService.PeripheralDiscovery);
    v18 = swift_getEnumCaseMultiPayload(v14, v16);
    v19 = *(void (**)(_QWORD, uint64_t, _QWORD))(v17 + 32);
    v20 = *(_QWORD *)(v0 + 176);
    v21 = *(_QWORD *)(v0 + 120);
    if (v18 == 1)
    {
      v19(*(_QWORD *)(v0 + 144), v20, *(_QWORD *)(v0 + 120));
      v22 = sub_10001A9A8(&qword_1011003C0);
      v23 = type metadata accessor for UUID(0);
      *(_QWORD *)(v0 + 280) = v23;
      v24 = *(_QWORD *)(v23 - 8);
      *(_QWORD *)(v0 + 288) = v24;
      v25 = swift_allocObject(v22, ((*(unsigned __int8 *)(v24 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80))+ *(_QWORD *)(v24 + 72), *(unsigned __int8 *)(v24 + 80) | 7);
      *(_QWORD *)(v0 + 296) = v25;
      *(_OWORD *)(v25 + 16) = xmmword_100E22B00;
      Identifier.id.getter(v21);
      v39 = (uint64_t (*)(uint64_t))((char *)&async function pointer to dispatch thunk of CentralManager.retrievePeripherals(identifiers:)
                                            + async function pointer to dispatch thunk of CentralManager.retrievePeripherals(identifiers:));
      v26 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of CentralManager.retrievePeripherals(identifiers:)
                                       + 1));
      *(_QWORD *)(v0 + 304) = v26;
      v27 = sub_1009E29F0;
    }
    else
    {
      v19(*(_QWORD *)(v0 + 160), v20, *(_QWORD *)(v0 + 120));
      v36 = sub_10001A9A8(&qword_1011003C0);
      v37 = type metadata accessor for UUID(0);
      *(_QWORD *)(v0 + 208) = v37;
      v38 = *(_QWORD *)(v37 - 8);
      *(_QWORD *)(v0 + 216) = v38;
      v25 = swift_allocObject(v36, ((*(unsigned __int8 *)(v38 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v38 + 80))+ *(_QWORD *)(v38 + 72), *(unsigned __int8 *)(v38 + 80) | 7);
      *(_QWORD *)(v0 + 224) = v25;
      *(_OWORD *)(v25 + 16) = xmmword_100E22B00;
      Identifier.id.getter(v21);
      v39 = (uint64_t (*)(uint64_t))((char *)&async function pointer to dispatch thunk of CentralManager.retrievePeripherals(identifiers:)
                                            + async function pointer to dispatch thunk of CentralManager.retrievePeripherals(identifiers:));
      v26 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of CentralManager.retrievePeripherals(identifiers:)
                                       + 1));
      *(_QWORD *)(v0 + 232) = v26;
      v27 = sub_1009E2314;
    }
    *v26 = v0;
    v26[1] = v27;
    return v39(v25);
  }
}

uint64_t sub_1009E2314(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t (*v5)();

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 232);
  v3[30] = a1;
  v3[31] = v1;
  swift_task_dealloc(v4);
  swift_bridgeObjectRelease();
  if (v1)
    v5 = sub_1009E30CC;
  else
    v5 = sub_1009E2390;
  return swift_task_switch(v5, v3[13], 0);
}

uint64_t sub_1009E2390()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  void (*v27)(uint64_t, uint64_t);
  void (*v28)(uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v1 = *(_QWORD *)(v0 + 240);
  if ((unint64_t)v1 >> 62)
  {
    if (v1 < 0)
      v6 = *(_QWORD *)(v0 + 240);
    else
      v6 = v1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*(_QWORD *)(v0 + 240));
    v7 = _CocoaArrayWrapper.endIndex.getter(v6);
    swift_bridgeObjectRelease();
    if (v7)
      goto LABEL_3;
  }
  else if (*(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_3:
    if ((v1 & 0xC000000000000001) != 0)
    {
      v2 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, *(_QWORD *)(v0 + 240));
      goto LABEL_6;
    }
    if (*(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      v2 = *(_QWORD *)(*(_QWORD *)(v0 + 240) + 32);
      swift_retain();
LABEL_6:
      *(_QWORD *)(v0 + 256) = v2;
      swift_bridgeObjectRelease();
      v3 = (_QWORD *)swift_task_alloc(dword_10110F364);
      *(_QWORD *)(v0 + 264) = v3;
      *v3 = v0;
      v3[1] = sub_1009E272C;
      v4 = *(_QWORD *)(v0 + 104);
      v3[2] = v2;
      v3[3] = v4;
      return swift_task_switch(sub_1009C75AC, v4, 0);
    }
    __break(1u);
    goto LABEL_18;
  }
  swift_bridgeObjectRelease();
  if (qword_1010EA100 != -1)
LABEL_18:
    swift_once(&qword_1010EA100, sub_1009B44BC);
  v8 = *(_QWORD *)(v0 + 152);
  v9 = *(_QWORD *)(v0 + 160);
  v10 = *(_QWORD *)(v0 + 120);
  v11 = *(_QWORD *)(v0 + 128);
  v12 = type metadata accessor for Logger(0);
  sub_10001A9E8(v12, (uint64_t)qword_10110F2A8);
  v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(v8, v9, v10);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.error.getter(v14);
  v16 = os_log_type_enabled(v14, v15);
  v17 = *(_QWORD *)(v0 + 184);
  v18 = *(_QWORD *)(v0 + 152);
  v19 = *(_QWORD *)(v0 + 160);
  v21 = *(_QWORD *)(v0 + 120);
  v20 = *(_QWORD *)(v0 + 128);
  if (v16)
  {
    v36 = *(_QWORD *)(v0 + 128);
    v37 = *(_QWORD *)(v0 + 160);
    v22 = swift_slowAlloc(22, -1);
    v23 = swift_slowAlloc(32, -1);
    v38 = v23;
    *(_DWORD *)v22 = 141558275;
    *(_QWORD *)(v0 + 72) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 72, v0 + 80, v22 + 4, v22 + 12);
    *(_WORD *)(v22 + 12) = 2081;
    v24 = sub_1000193A4(&qword_1010EE1D0, &qword_1010EF7C0, (const char *)&protocol conformance descriptor for Identifier<A>);
    v25 = dispatch thunk of CustomStringConvertible.description.getter(v21, v24);
    *(_QWORD *)(v0 + 80) = sub_100016940(v25, v26, &v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 80, v0 + 88, v22 + 14, v22 + 22);
    swift_bridgeObjectRelease();
    v27 = *(void (**)(uint64_t, uint64_t))(v36 + 8);
    v27(v18, v21);
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Unable to retrieve a Peripheral for %{private,mask.hash}s", (uint8_t *)v22, 0x16u);
    swift_arrayDestroy(v23, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v23, -1, -1);
    swift_slowDealloc(v22, -1, -1);

    v27(v37, v21);
  }
  else
  {

    v28 = *(void (**)(uint64_t, uint64_t))(v20 + 8);
    v28(v18, v21);
    v28(v19, v21);
  }
  sub_1000126B0(v17, type metadata accessor for PencilPairingService.PeripheralDiscovery);
  v29 = *(_QWORD *)(v0 + 176);
  v30 = *(_QWORD *)(v0 + 184);
  v32 = *(_QWORD *)(v0 + 152);
  v31 = *(_QWORD *)(v0 + 160);
  v34 = *(_QWORD *)(v0 + 136);
  v33 = *(_QWORD *)(v0 + 144);
  v35 = *(_QWORD *)(v0 + 112);
  swift_task_dealloc(*(_QWORD *)(v0 + 200));
  swift_task_dealloc(v30);
  swift_task_dealloc(v29);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1009E272C(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 264);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 104);
  *(_BYTE *)(*(_QWORD *)v1 + 352) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1009E278C, v3, 0);
}

uint64_t sub_1009E278C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (*(_BYTE *)(v0 + 352) == 1)
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 216) + 56))(*(_QWORD *)(v0 + 112), 1, 1, *(_QWORD *)(v0 + 208));
    v1 = (_QWORD *)swift_task_alloc(dword_10110F8FC);
    *(_QWORD *)(v0 + 272) = v1;
    *v1 = v0;
    v1[1] = sub_1009E28C0;
    return sub_1009B1230(*(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 112));
  }
  else
  {
    v3 = *(_QWORD *)(v0 + 184);
    v4 = *(_QWORD *)(v0 + 160);
    v5 = *(_QWORD *)(v0 + 120);
    v6 = *(_QWORD *)(v0 + 128);
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
    sub_1000126B0(v3, type metadata accessor for PencilPairingService.PeripheralDiscovery);
    v7 = *(_QWORD *)(v0 + 176);
    v8 = *(_QWORD *)(v0 + 184);
    v10 = *(_QWORD *)(v0 + 152);
    v9 = *(_QWORD *)(v0 + 160);
    v12 = *(_QWORD *)(v0 + 136);
    v11 = *(_QWORD *)(v0 + 144);
    v13 = *(_QWORD *)(v0 + 112);
    swift_task_dealloc(*(_QWORD *)(v0 + 200));
    swift_task_dealloc(v8);
    swift_task_dealloc(v7);
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1009E28C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 104);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 112);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 272));
  sub_100004048(v2, &qword_1010ED860);
  return swift_task_switch(sub_1009E2928, v1, 0);
}

uint64_t sub_1009E2928()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = *(_QWORD *)(v0 + 184);
  v2 = *(_QWORD *)(v0 + 160);
  v3 = *(_QWORD *)(v0 + 120);
  v4 = *(_QWORD *)(v0 + 128);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  sub_1000126B0(v1, type metadata accessor for PencilPairingService.PeripheralDiscovery);
  v5 = *(_QWORD *)(v0 + 176);
  v6 = *(_QWORD *)(v0 + 184);
  v8 = *(_QWORD *)(v0 + 152);
  v7 = *(_QWORD *)(v0 + 160);
  v10 = *(_QWORD *)(v0 + 136);
  v9 = *(_QWORD *)(v0 + 144);
  v11 = *(_QWORD *)(v0 + 112);
  swift_task_dealloc(*(_QWORD *)(v0 + 200));
  swift_task_dealloc(v6);
  swift_task_dealloc(v5);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1009E29F0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t (*v5)();

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 304);
  v3[39] = a1;
  v3[40] = v1;
  swift_task_dealloc(v4);
  swift_bridgeObjectRelease();
  if (v1)
    v5 = sub_1009E318C;
  else
    v5 = sub_1009E2A6C;
  return swift_task_switch(v5, v3[13], 0);
}

uint64_t sub_1009E2A6C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  void (*v27)(uint64_t, uint64_t);
  void (*v28)(uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v1 = *(_QWORD *)(v0 + 312);
  if ((unint64_t)v1 >> 62)
  {
    if (v1 < 0)
      v6 = *(_QWORD *)(v0 + 312);
    else
      v6 = v1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*(_QWORD *)(v0 + 312));
    v7 = _CocoaArrayWrapper.endIndex.getter(v6);
    swift_bridgeObjectRelease();
    if (v7)
      goto LABEL_3;
  }
  else if (*(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_3:
    if ((v1 & 0xC000000000000001) != 0)
    {
      v2 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, *(_QWORD *)(v0 + 312));
      goto LABEL_6;
    }
    if (*(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      v2 = *(_QWORD *)(*(_QWORD *)(v0 + 312) + 32);
      swift_retain();
LABEL_6:
      *(_QWORD *)(v0 + 328) = v2;
      swift_bridgeObjectRelease();
      v3 = (_QWORD *)swift_task_alloc(dword_10110F364);
      *(_QWORD *)(v0 + 336) = v3;
      *v3 = v0;
      v3[1] = sub_1009E2E08;
      v4 = *(_QWORD *)(v0 + 104);
      v3[2] = v2;
      v3[3] = v4;
      return swift_task_switch(sub_1009C75AC, v4, 0);
    }
    __break(1u);
    goto LABEL_18;
  }
  swift_bridgeObjectRelease();
  if (qword_1010EA100 != -1)
LABEL_18:
    swift_once(&qword_1010EA100, sub_1009B44BC);
  v8 = *(_QWORD *)(v0 + 136);
  v9 = *(_QWORD *)(v0 + 144);
  v10 = *(_QWORD *)(v0 + 120);
  v11 = *(_QWORD *)(v0 + 128);
  v12 = type metadata accessor for Logger(0);
  sub_10001A9E8(v12, (uint64_t)qword_10110F2A8);
  v13 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(v8, v9, v10);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.error.getter(v14);
  v16 = os_log_type_enabled(v14, v15);
  v17 = *(_QWORD *)(v0 + 184);
  v18 = *(_QWORD *)(v0 + 136);
  v19 = *(_QWORD *)(v0 + 144);
  v21 = *(_QWORD *)(v0 + 120);
  v20 = *(_QWORD *)(v0 + 128);
  if (v16)
  {
    v36 = *(_QWORD *)(v0 + 128);
    v37 = *(_QWORD *)(v0 + 144);
    v22 = swift_slowAlloc(22, -1);
    v23 = swift_slowAlloc(32, -1);
    v38 = v23;
    *(_DWORD *)v22 = 141558275;
    *(_QWORD *)(v0 + 56) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 64, v22 + 4, v22 + 12);
    *(_WORD *)(v22 + 12) = 2081;
    v24 = sub_1000193A4(&qword_1010EE1D0, &qword_1010EF7C0, (const char *)&protocol conformance descriptor for Identifier<A>);
    v25 = dispatch thunk of CustomStringConvertible.description.getter(v21, v24);
    *(_QWORD *)(v0 + 64) = sub_100016940(v25, v26, &v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72, v22 + 14, v22 + 22);
    swift_bridgeObjectRelease();
    v27 = *(void (**)(uint64_t, uint64_t))(v36 + 8);
    v27(v18, v21);
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Unable to retrieve a Peripheral for %{private,mask.hash}s", (uint8_t *)v22, 0x16u);
    swift_arrayDestroy(v23, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v23, -1, -1);
    swift_slowDealloc(v22, -1, -1);

    v27(v37, v21);
  }
  else
  {

    v28 = *(void (**)(uint64_t, uint64_t))(v20 + 8);
    v28(v18, v21);
    v28(v19, v21);
  }
  sub_1000126B0(v17, type metadata accessor for PencilPairingService.PeripheralDiscovery);
  v29 = *(_QWORD *)(v0 + 176);
  v30 = *(_QWORD *)(v0 + 184);
  v32 = *(_QWORD *)(v0 + 152);
  v31 = *(_QWORD *)(v0 + 160);
  v34 = *(_QWORD *)(v0 + 136);
  v33 = *(_QWORD *)(v0 + 144);
  v35 = *(_QWORD *)(v0 + 112);
  swift_task_dealloc(*(_QWORD *)(v0 + 200));
  swift_task_dealloc(v30);
  swift_task_dealloc(v29);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1009E2E08(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 336);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 104);
  *(_BYTE *)(*(_QWORD *)v1 + 353) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1009E2E68, v3, 0);
}

uint64_t sub_1009E2E68()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (*(_BYTE *)(v0 + 353) == 1)
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)(v0 + 288) + 56))(*(_QWORD *)(v0 + 112), 1, 1, *(_QWORD *)(v0 + 280));
    v1 = (_QWORD *)swift_task_alloc(dword_10110F904);
    *(_QWORD *)(v0 + 344) = v1;
    *v1 = v0;
    v1[1] = sub_1009E2F9C;
    return sub_1009B1690(*(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 112));
  }
  else
  {
    v3 = *(_QWORD *)(v0 + 184);
    v4 = *(_QWORD *)(v0 + 144);
    v5 = *(_QWORD *)(v0 + 120);
    v6 = *(_QWORD *)(v0 + 128);
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
    sub_1000126B0(v3, type metadata accessor for PencilPairingService.PeripheralDiscovery);
    v7 = *(_QWORD *)(v0 + 176);
    v8 = *(_QWORD *)(v0 + 184);
    v10 = *(_QWORD *)(v0 + 152);
    v9 = *(_QWORD *)(v0 + 160);
    v12 = *(_QWORD *)(v0 + 136);
    v11 = *(_QWORD *)(v0 + 144);
    v13 = *(_QWORD *)(v0 + 112);
    swift_task_dealloc(*(_QWORD *)(v0 + 200));
    swift_task_dealloc(v8);
    swift_task_dealloc(v7);
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1009E2F9C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 104);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 112);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 344));
  sub_100004048(v2, &qword_1010ED860);
  return swift_task_switch(sub_1009E3004, v1, 0);
}

uint64_t sub_1009E3004()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = *(_QWORD *)(v0 + 184);
  v2 = *(_QWORD *)(v0 + 144);
  v3 = *(_QWORD *)(v0 + 120);
  v4 = *(_QWORD *)(v0 + 128);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  sub_1000126B0(v1, type metadata accessor for PencilPairingService.PeripheralDiscovery);
  v5 = *(_QWORD *)(v0 + 176);
  v6 = *(_QWORD *)(v0 + 184);
  v8 = *(_QWORD *)(v0 + 152);
  v7 = *(_QWORD *)(v0 + 160);
  v10 = *(_QWORD *)(v0 + 136);
  v9 = *(_QWORD *)(v0 + 144);
  v11 = *(_QWORD *)(v0 + 112);
  swift_task_dealloc(*(_QWORD *)(v0 + 200));
  swift_task_dealloc(v6);
  swift_task_dealloc(v5);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1009E30CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD *)(v0 + 152);
  v1 = *(_QWORD *)(v0 + 160);
  v3 = *(_QWORD *)(v0 + 200);
  v5 = *(_QWORD *)(v0 + 176);
  v4 = *(_QWORD *)(v0 + 184);
  v7 = *(_QWORD *)(v0 + 136);
  v6 = *(_QWORD *)(v0 + 144);
  v8 = *(_QWORD *)(v0 + 112);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 128) + 8))(v1, *(_QWORD *)(v0 + 120));
  sub_1000126B0(v4, type metadata accessor for PencilPairingService.PeripheralDiscovery);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1009E318C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(_QWORD *)(v0 + 200);
  v3 = *(_QWORD *)(v0 + 176);
  v2 = *(_QWORD *)(v0 + 184);
  v5 = *(_QWORD *)(v0 + 152);
  v4 = *(_QWORD *)(v0 + 160);
  v7 = *(_QWORD *)(v0 + 136);
  v6 = *(_QWORD *)(v0 + 144);
  v8 = *(_QWORD *)(v0 + 112);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 128) + 8))(v6, *(_QWORD *)(v0 + 120));
  sub_1000126B0(v2, type metadata accessor for PencilPairingService.PeripheralDiscovery);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1009E324C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v2[31] = a1;
  v2[32] = v1;
  v3 = sub_10001A9A8((uint64_t *)&unk_101115F50);
  v2[33] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[34] = v4;
  v2[35] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10001A9A8(&qword_1010EC448);
  v2[36] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v2[37] = v6;
  v2[38] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for BinaryDecoder(0);
  v2[39] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v2[40] = v8;
  v2[41] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for BinaryEncoder(0);
  v2[42] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v2[43] = v10;
  v2[44] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10001A9A8(&qword_1010EC450);
  v2[45] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v11 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Peripheral.ConnectionOptions(0);
  v2[46] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v2[47] = v13;
  v2[48] = swift_task_alloc((*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_10001A9A8(&qword_1010EC458);
  v2[49] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v14 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_10001A9A8(&qword_1010EC460);
  v2[50] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v15 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_10001A9A8(&qword_1010EF7C0);
  v2[51] = v16;
  v17 = *(_QWORD *)(v16 - 8);
  v2[52] = v17;
  v2[53] = swift_task_alloc((*(_QWORD *)(v17 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1009E33EC, v1, 0);
}

uint64_t sub_1009E33EC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  if (qword_1010EA100 != -1)
    swift_once(&qword_1010EA100, sub_1009B44BC);
  v1 = type metadata accessor for Logger(0);
  v0[54] = sub_10001A9E8(v1, (uint64_t)qword_10110F2A8);
  v2 = swift_retain();
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = v0[53];
    v33 = v0[52];
    v32 = v0[51];
    v6 = swift_slowAlloc(22, -1);
    v34 = swift_slowAlloc(64, -1);
    v35 = v34;
    *(_DWORD *)v6 = 136446466;
    v0[29] = sub_100016940(0xD000000000000027, 0x8000000100EEC1C0, &v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 29, v0 + 30, v6 + 4, v6 + 12);
    *(_WORD *)(v6 + 12) = 2082;
    v7 = type metadata accessor for Peripheral(0);
    v8 = sub_100006204(&qword_1010EC4A0, (uint64_t (*)(uint64_t))&type metadata accessor for Peripheral, (uint64_t)&protocol conformance descriptor for Peripheral);
    dispatch thunk of PeripheralProtocol.id.getter(v7, v8);
    v9 = sub_1000193A4(&qword_1010EE1D0, &qword_1010EF7C0, (const char *)&protocol conformance descriptor for Identifier<A>);
    v10 = dispatch thunk of CustomStringConvertible.description.getter(v32, v9);
    v12 = v11;
    (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v5, v32);
    v0[30] = sub_100016940(v10, v12, &v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 30, v0 + 31, v6 + 14, v6 + 22);
    swift_bridgeObjectRelease();
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "%{public}s for peripheral: %{public}s", (uint8_t *)v6, 0x16u);
    swift_arrayDestroy(v34, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v34, -1, -1);
    swift_slowDealloc(v6, -1, -1);
  }
  else
  {
    swift_release();
  }

  v13 = v0[49];
  v14 = v0[50];
  v16 = v0[47];
  v15 = v0[48];
  v18 = v0[45];
  v17 = v0[46];
  v19 = type metadata accessor for ConnectUseCase(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v14, 1, 1, v19);
  v20 = sub_10001A9A8(&qword_1010EC480);
  v21 = swift_allocObject(v20, ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80))+ 2 * *(_QWORD *)(v16 + 72), *(unsigned __int8 *)(v16 + 80) | 7);
  *(_OWORD *)(v21 + 16) = xmmword_100E22B10;
  v22 = static Peripheral.ConnectionOptions.hideFromBTSettings.getter();
  static Peripheral.ConnectionOptions.shouldSkipUnpair.getter(v22);
  v0[24] = v21;
  v23 = sub_100006204(&qword_1010EC488, (uint64_t (*)(uint64_t))&type metadata accessor for Peripheral.ConnectionOptions, (uint64_t)&protocol conformance descriptor for Peripheral.ConnectionOptions);
  v24 = sub_10001A9A8(&qword_1010EC490);
  v25 = sub_1000193A4(&qword_1010EC498, &qword_1010EC490, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(v0 + 24, v24, v25, v17, v23);
  v26 = type metadata accessor for PeripheralPairingInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v18, 1, 1, v26);
  Peripheral.Options.init(connectionOptions:pairingInfo:)(v15, v18);
  v27 = type metadata accessor for Peripheral.Options(0);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v13, 0, 1, v27);
  v28 = type metadata accessor for Peripheral(0);
  v0[55] = v28;
  v29 = sub_100006204(&qword_1010EC4A0, (uint64_t (*)(uint64_t))&type metadata accessor for Peripheral, (uint64_t)&protocol conformance descriptor for Peripheral);
  v0[56] = v29;
  v30 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of PeripheralProtocol.connect(useCase:options:)[1]);
  v0[57] = v30;
  *v30 = v0;
  v30[1] = sub_1009E3818;
  return dispatch thunk of PeripheralProtocol.connect(useCase:options:)(v0[50], v0[49], v28, v29);
}

uint64_t sub_1009E3818()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 456);
  *(_QWORD *)(*(_QWORD *)v1 + 464) = v0;
  swift_task_dealloc(v3);
  v4 = v2[49];
  v5 = v2[50];
  v6 = v2[32];
  sub_100004048(v4, &qword_1010EC458);
  sub_100004048(v5, &qword_1010EC460);
  if (v0)
    v7 = sub_1009E3AE4;
  else
    v7 = sub_1009E38A8;
  return swift_task_switch(v7, v6, 0);
}

uint64_t sub_1009E38A8()
{
  _QWORD *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v16;

  v1 = swift_retain();
  v2 = Logger.logObject.getter(v1);
  v3 = static os_log_type_t.default.getter(v2);
  if (os_log_type_enabled(v2, v3))
  {
    v4 = v0[55];
    v5 = v0[31];
    v6 = swift_slowAlloc(22, -1);
    v7 = swift_slowAlloc(64, -1);
    v16 = v7;
    *(_DWORD *)v6 = 136446466;
    v0[26] = sub_100016940(0xD000000000000027, 0x8000000100EEC1C0, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 26, v0 + 27, v6 + 4, v6 + 12);
    *(_WORD *)(v6 + 12) = 2080;
    v0[27] = v5;
    v8 = sub_100006204(&qword_1010EC508, (uint64_t (*)(uint64_t))&type metadata accessor for Peripheral, (uint64_t)&protocol conformance descriptor for Peripheral);
    v9 = dispatch thunk of CustomStringConvertible.description.getter(v4, v8);
    v0[28] = sub_100016940(v9, v10, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 28, v0 + 29, v6 + 14, v6 + 22);
    swift_bridgeObjectRelease();
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%{public}s Connected to peripheral: %s", (uint8_t *)v6, 0x16u);
    swift_arrayDestroy(v7, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);
  }
  else
  {
    swift_release();
  }

  v12 = BinaryEncoder.init()(v11);
  BinaryDecoder.init()(v12);
  v13 = type metadata accessor for Service(0);
  v0[59] = v13;
  Identifier.init(stringLiteral:)("FD44", 4, 2, v13);
  v14 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of PeripheralProtocol.subscript.getter[1]);
  v0[60] = v14;
  *v14 = v0;
  v14[1] = sub_1009E3B90;
  return dispatch thunk of PeripheralProtocol.subscript.getter(v0[38], v0[55], v0[56]);
}

uint64_t sub_1009E3AE4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD *)(v0 + 392);
  v1 = *(_QWORD *)(v0 + 400);
  v3 = *(_QWORD *)(v0 + 384);
  v5 = *(_QWORD *)(v0 + 352);
  v4 = *(_QWORD *)(v0 + 360);
  v6 = *(_QWORD *)(v0 + 328);
  v7 = *(_QWORD *)(v0 + 304);
  v8 = *(_QWORD *)(v0 + 280);
  swift_task_dealloc(*(_QWORD *)(v0 + 424));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1009E3B90(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)();

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 480);
  v3[61] = a1;
  v3[62] = v1;
  swift_task_dealloc(v4);
  v6 = v3[37];
  v5 = v3[38];
  v7 = v3[36];
  v8 = v3[32];
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  if (v1)
    v9 = sub_1009E3D4C;
  else
    v9 = sub_1009E3C10;
  return swift_task_switch(v9, v8, 0);
}

uint64_t sub_1009E3C10()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = type metadata accessor for Characteristic(0);
  v0[63] = v1;
  Identifier.init(stringLiteral:)("4F860004-943B-49EF-BED4-2F730304427A", 36, 2, v1);
  v2 = sub_100006204(&qword_1010EC4A8, (uint64_t (*)(uint64_t))&type metadata accessor for Service, (uint64_t)&protocol conformance descriptor for Service);
  v3 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of ServiceProtocol.subscript.getter[1]);
  v0[64] = v3;
  *v3 = v0;
  v3[1] = sub_1009E3CB8;
  return dispatch thunk of ServiceProtocol.subscript.getter(v0[35], v0[59], v2);
}

uint64_t sub_1009E3CB8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  void *v9;

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 512);
  v3[65] = a1;
  v3[66] = v1;
  swift_task_dealloc(v4);
  v6 = v3[34];
  v5 = v3[35];
  v8 = v3 + 32;
  v7 = v3[32];
  (*(void (**)(uint64_t, _QWORD))(v6 + 8))(v5, v8[1]);
  swift_release();
  if (v1)
    v9 = sub_1009E4330;
  else
    v9 = sub_1009E3E1C;
  return swift_task_switch(v9, v7, 0);
}

uint64_t sub_1009E3D4C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *(_QWORD *)(v0 + 344);
  v1 = *(_QWORD *)(v0 + 352);
  v3 = *(_QWORD *)(v0 + 336);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 320) + 8))(*(_QWORD *)(v0 + 328), *(_QWORD *)(v0 + 312));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v5 = *(_QWORD *)(v0 + 392);
  v4 = *(_QWORD *)(v0 + 400);
  v6 = *(_QWORD *)(v0 + 384);
  v8 = *(_QWORD *)(v0 + 352);
  v7 = *(_QWORD *)(v0 + 360);
  v9 = *(_QWORD *)(v0 + 328);
  v10 = *(_QWORD *)(v0 + 304);
  v11 = *(_QWORD *)(v0 + 280);
  swift_task_dealloc(*(_QWORD *)(v0 + 424));
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1009E3E1C(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  unint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v2 = Logger.logObject.getter(a1);
  v3 = static os_log_type_t.default.getter(v2);
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Discovered FindMy services and Paired Owner characteristic.", v4, 2u);
    swift_slowDealloc(v4, -1, -1);
  }

  v5 = sub_100B656E4();
  *(_QWORD *)(v1 + 536) = v5;
  *(_QWORD *)(v1 + 544) = v6;
  if (v6 >> 60 != 15)
    __asm { BR              X10 }
  v7 = Logger.logObject.getter(v5);
  v8 = static os_log_type_t.error.getter(v7);
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Unable to generate FindMyNetworkId!", v9, 2u);
    swift_slowDealloc(v9, -1, -1);
  }
  v11 = *(_QWORD *)(v1 + 344);
  v10 = *(_QWORD *)(v1 + 352);
  v13 = *(_QWORD *)(v1 + 328);
  v12 = *(_QWORD *)(v1 + 336);
  v14 = *(_QWORD *)(v1 + 312);
  v15 = *(_QWORD *)(v1 + 320);

  v16 = sub_100350CCC();
  v17 = swift_allocError(&type metadata for PencilPairingService.Error, v16, 0, 0);
  *(_OWORD *)v18 = xmmword_100E58260;
  *(_BYTE *)(v18 + 16) = 3;
  swift_willThrow(v17);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v13, v14);
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
  v20 = *(_QWORD *)(v1 + 392);
  v19 = *(_QWORD *)(v1 + 400);
  v21 = *(_QWORD *)(v1 + 384);
  v23 = *(_QWORD *)(v1 + 352);
  v22 = *(_QWORD *)(v1 + 360);
  v24 = *(_QWORD *)(v1 + 328);
  v25 = *(_QWORD *)(v1 + 304);
  v26 = *(_QWORD *)(v1 + 280);
  swift_task_dealloc(*(_QWORD *)(v1 + 424));
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_1009E4330()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *(_QWORD *)(v0 + 344);
  v1 = *(_QWORD *)(v0 + 352);
  v3 = *(_QWORD *)(v0 + 336);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 320) + 8))(*(_QWORD *)(v0 + 328), *(_QWORD *)(v0 + 312));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v5 = *(_QWORD *)(v0 + 392);
  v4 = *(_QWORD *)(v0 + 400);
  v6 = *(_QWORD *)(v0 + 384);
  v8 = *(_QWORD *)(v0 + 352);
  v7 = *(_QWORD *)(v0 + 360);
  v9 = *(_QWORD *)(v0 + 328);
  v10 = *(_QWORD *)(v0 + 304);
  v11 = *(_QWORD *)(v0 + 280);
  swift_task_dealloc(*(_QWORD *)(v0 + 424));
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1009E4400(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 568);
  *(_QWORD *)(*v2 + 576) = v1;
  swift_task_dealloc(v5);
  v6 = *(_QWORD *)(v4 + 256);
  if (v1)
  {
    v7 = sub_1009E45A8;
  }
  else
  {
    *(_QWORD *)(v4 + 584) = a1;
    v7 = sub_1009E4474;
  }
  return swift_task_switch(v7, v6, 0);
}

uint64_t sub_1009E4474()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v1 = v0[65];
  v2 = fragment(data:mtu:)(v0[69], v0[70], v0[73]);
  v3 = swift_allocObject(&unk_1010A11A8, 32, 7);
  v0[74] = v3;
  *(_QWORD *)(v3 + 16) = v1;
  *(_QWORD *)(v3 + 24) = v2;
  v4 = async function pointer to withTimeout<A>(_:block:)[1];
  swift_retain();
  v5 = (_QWORD *)swift_task_alloc(v4);
  v0[75] = v5;
  *v5 = v0;
  v5[1] = sub_1009E4538;
  return withTimeout<A>(_:block:)(v0 + 17, 0x40AAD21B3B700000, 3, &unk_10110F8D0, v3, &type metadata for Data);
}

uint64_t sub_1009E4538()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 600);
  *(_QWORD *)(*v1 + 608) = v0;
  swift_task_dealloc(v3);
  v4 = *(_QWORD *)(v2 + 256);
  swift_release();
  if (v0)
    v5 = sub_1009E4CB8;
  else
    v5 = sub_1009E46C0;
  return swift_task_switch(v5, v4, 0);
}

uint64_t sub_1009E45A8()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;

  v1 = *(_QWORD *)(v0 + 560);
  v2 = *(_QWORD *)(v0 + 552);
  v3 = *(_QWORD *)(v0 + 544);
  v4 = *(_QWORD *)(v0 + 536);
  v5 = *(_QWORD *)(v0 + 344);
  v6 = *(_QWORD *)(v0 + 328);
  v18 = *(_QWORD *)(v0 + 336);
  v19 = *(_QWORD *)(v0 + 352);
  v8 = *(_QWORD *)(v0 + 312);
  v7 = *(_QWORD *)(v0 + 320);
  sub_10001EF3C(v4, v3);
  sub_10001BC14(v2, v1);
  swift_release();
  sub_10001EF3C(v4, v3);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v19, v18);
  v10 = *(_QWORD *)(v0 + 392);
  v9 = *(_QWORD *)(v0 + 400);
  v11 = *(_QWORD *)(v0 + 384);
  v13 = *(_QWORD *)(v0 + 352);
  v12 = *(_QWORD *)(v0 + 360);
  v14 = *(_QWORD *)(v0 + 328);
  v15 = *(_QWORD *)(v0 + 304);
  v16 = *(_QWORD *)(v0 + 280);
  swift_task_dealloc(*(_QWORD *)(v0 + 424));
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1009E46C0()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  unint64_t v8;
  uint64_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  _DWORD *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  v1 = *(_QWORD *)(v0 + 544);
  v2 = *(_QWORD *)(v0 + 536);
  v4 = *(_QWORD *)(v0 + 136);
  v3 = *(_QWORD *)(v0 + 144);
  sub_10001BBBC(v2, v1);
  v5 = sub_10001BBBC(v2, v1);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.info.getter(v6);
  if (os_log_type_enabled(v6, v7))
  {
    v8 = *(_QWORD *)(v0 + 544);
    v9 = *(_QWORD *)(v0 + 536);
    v10 = (uint8_t *)swift_slowAlloc(12, -1);
    v11 = swift_slowAlloc(32, -1);
    v58 = v11;
    *(_DWORD *)v10 = 136315138;
    *(_QWORD *)(v0 + 96) = v9;
    *(_QWORD *)(v0 + 112) = 0;
    *(_QWORD *)(v0 + 120) = 0;
    *(_QWORD *)(v0 + 104) = v8;
    *(_BYTE *)(v0 + 128) = 1;
    sub_10001BBBC(v9, v8);
    v12 = String.init<A>(describing:)(v0 + 96, &type metadata for AccessoryOwnerCommand);
    *(_QWORD *)(v0 + 184) = sub_100016940(v12, v13, &v58);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 184, v0 + 192, v10 + 4, v10 + 12);
    swift_bridgeObjectRelease();
    sub_10001EF3C(v9, v8);
    sub_10001EF3C(v9, v8);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Sent command: %s.", v10, 0xCu);
    swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v11, -1, -1);
    swift_slowDealloc(v10, -1, -1);
  }
  else
  {
    v14 = *(_QWORD *)(v0 + 544);
    v15 = *(_QWORD *)(v0 + 536);
    sub_10001EF3C(v15, v14);
    sub_10001EF3C(v15, v14);
  }

  sub_10001BBBC(v4, v3);
  v16 = sub_10001BBBC(v4, v3);
  v17 = Logger.logObject.getter(v16);
  v18 = static os_log_type_t.default.getter(v17);
  if (os_log_type_enabled(v17, v18))
  {
    v19 = (_DWORD *)swift_slowAlloc(22, -1);
    v58 = swift_slowAlloc(32, -1);
    *v19 = 134218242;
    __asm { BR              X10 }
  }
  sub_10001BC14(v4, v3);
  sub_10001BC14(v4, v3);

  v20 = *(_QWORD *)(v0 + 608);
  v21 = sub_1009F8074();
  BinaryDecoder.decode<A>(_:from:)(&type metadata for LineUpAccessoryOwnerCommand, v4, v3, &type metadata for LineUpAccessoryOwnerCommand, v21);
  v22 = v3;
  v23 = v4;
  v24 = *(_QWORD *)(v0 + 560);
  v25 = *(_QWORD *)(v0 + 552);
  v26 = *(_QWORD *)(v0 + 544);
  v27 = *(_QWORD *)(v0 + 536);
  if (v20)
  {
    v53 = *(_QWORD *)(v0 + 336);
    v55 = *(_QWORD *)(v0 + 352);
    v49 = *(_QWORD *)(v0 + 328);
    v51 = *(_QWORD *)(v0 + 344);
    v28 = *(_QWORD *)(v0 + 312);
    v29 = *(_QWORD *)(v0 + 320);
    sub_10001EF3C(v27, v26);
    sub_10001BC14(v25, v24);
    sub_10001BC14(v23, v22);
    swift_release();
    sub_10001EF3C(v27, v26);
    (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v49, v28);
    (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v55, v53);
    v30 = *(_QWORD *)(v0 + 392);
    v31 = *(_QWORD *)(v0 + 400);
    v32 = *(_QWORD *)(v0 + 384);
    v34 = *(_QWORD *)(v0 + 352);
    v33 = *(_QWORD *)(v0 + 360);
    v35 = *(_QWORD *)(v0 + 328);
    v36 = *(_QWORD *)(v0 + 304);
    v37 = *(_QWORD *)(v0 + 280);
    swift_task_dealloc(*(_QWORD *)(v0 + 424));
    swift_task_dealloc(v31);
    swift_task_dealloc(v30);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    swift_task_dealloc(v36);
    swift_task_dealloc(v37);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v47 = *(_QWORD *)(v0 + 424);
    v48 = *(_QWORD *)(v0 + 400);
    v50 = *(_QWORD *)(v0 + 392);
    v52 = *(_QWORD *)(v0 + 384);
    v45 = *(_QWORD *)(v0 + 336);
    v46 = *(_QWORD *)(v0 + 352);
    v39 = *(_QWORD *)(v0 + 320);
    v43 = *(_QWORD *)(v0 + 328);
    v44 = *(_QWORD *)(v0 + 344);
    v40 = *(_QWORD *)(v0 + 312);
    v54 = *(_QWORD *)(v0 + 360);
    v56 = *(_QWORD *)(v0 + 304);
    v57 = *(_QWORD *)(v0 + 280);
    sub_10001EF3C(v27, v26);
    sub_10001BC14(v25, v24);
    sub_10001BC14(v23, v22);
    swift_release();
    sub_10001EF3C(v27, v26);
    (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v43, v40);
    (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v46, v45);
    v42 = *(_QWORD *)(v0 + 152);
    v41 = *(_QWORD *)(v0 + 160);
    swift_task_dealloc(v47);
    swift_task_dealloc(v48);
    swift_task_dealloc(v50);
    swift_task_dealloc(v52);
    swift_task_dealloc(v54);
    swift_task_dealloc(v46);
    swift_task_dealloc(v43);
    swift_task_dealloc(v56);
    swift_task_dealloc(v57);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v42, v41);
  }
}

uint64_t sub_1009E4CB8()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;

  v1 = *(_QWORD *)(v0 + 560);
  v2 = *(_QWORD *)(v0 + 552);
  v3 = *(_QWORD *)(v0 + 544);
  v4 = *(_QWORD *)(v0 + 536);
  v5 = *(_QWORD *)(v0 + 344);
  v6 = *(_QWORD *)(v0 + 328);
  v18 = *(_QWORD *)(v0 + 336);
  v19 = *(_QWORD *)(v0 + 352);
  v8 = *(_QWORD *)(v0 + 312);
  v7 = *(_QWORD *)(v0 + 320);
  sub_10001EF3C(v4, v3);
  sub_10001BC14(v2, v1);
  swift_release();
  sub_10001EF3C(v4, v3);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v19, v18);
  v10 = *(_QWORD *)(v0 + 392);
  v9 = *(_QWORD *)(v0 + 400);
  v11 = *(_QWORD *)(v0 + 384);
  v13 = *(_QWORD *)(v0 + 352);
  v12 = *(_QWORD *)(v0 + 360);
  v14 = *(_QWORD *)(v0 + 328);
  v15 = *(_QWORD *)(v0 + 304);
  v16 = *(_QWORD *)(v0 + 280);
  swift_task_dealloc(*(_QWORD *)(v0 + 424));
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1009E4DD0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  os_log_type_t v43;
  _BOOL4 v44;
  uint8_t *v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint8_t *v50;
  uint64_t v51;
  uint64_t v52;
  NSObject *v53;
  os_log_type_t v54;
  uint8_t *v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint8_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint8_t *v82;
  uint8_t *v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93[3];
  uint64_t v94;
  uint64_t v95;

  v4 = v3;
  v5 = v2;
  v92 = a1;
  v7 = sub_10001A9A8((uint64_t *)&unk_10111C0A0);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v82 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v82 - v11;
  v91 = type metadata accessor for AccessoryProductInfo(0);
  v13 = (uint64_t *)(a2 + *(int *)(v91 + 92));
  v14 = *v13;
  v15 = v13[1];
  swift_retain();
  v16 = sub_1009A73F0(v14, v15);
  v18 = v17;
  swift_release();
  if (v18 >> 60 == 15)
  {
    if (qword_1010EA100 != -1)
      swift_once(&qword_1010EA100, sub_1009B44BC);
    v19 = type metadata accessor for Logger(0);
    v20 = sub_10001A9E8(v19, (uint64_t)qword_10110F2A8);
    v21 = Logger.logObject.getter(v20);
    v22 = static os_log_type_t.error.getter(v21);
    if (os_log_type_enabled(v21, v22))
    {
      v23 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v23 = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Unable to generate E1 blob.", v23, 2u);
      swift_slowDealloc(v23, -1, -1);
    }

    v24 = sub_100350CCC();
    v25 = swift_allocError(&type metadata for PencilPairingService.Error, v24, 0, 0);
    *(_QWORD *)v26 = 0;
    *(_QWORD *)(v26 + 8) = 0;
    *(_BYTE *)(v26 + 16) = 3;
    return swift_willThrow(v25);
  }
  else
  {
    v28 = sub_100B656E4();
    if (v29 >> 60 == 15)
    {
      if (qword_1010EA100 != -1)
        swift_once(&qword_1010EA100, sub_1009B44BC);
      v30 = type metadata accessor for Logger(0);
      v31 = sub_10001A9E8(v30, (uint64_t)qword_10110F2A8);
      v32 = Logger.logObject.getter(v31);
      v33 = static os_log_type_t.error.getter(v32);
      if (os_log_type_enabled(v32, v33))
      {
        v34 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v34 = 0;
        _os_log_impl((void *)&_mh_execute_header, v32, v33, "Unable to generate FindMyNetworkId.", v34, 2u);
        swift_slowDealloc(v34, -1, -1);
      }

      v35 = sub_100350CCC();
      v36 = swift_allocError(&type metadata for PencilPairingService.Error, v35, 0, 0);
      *(_QWORD *)v37 = 0;
      *(_QWORD *)(v37 + 8) = 0;
      *(_BYTE *)(v37 + 16) = 3;
      swift_willThrow(v36);
      return sub_10001EF3C(v16, v18);
    }
    else
    {
      v38 = v29;
      v88 = v10;
      v89 = v28;
      v87 = a2;
      if (qword_1010EA100 != -1)
        swift_once(&qword_1010EA100, sub_1009B44BC);
      v85 = v4;
      v39 = type metadata accessor for Logger(0);
      v40 = sub_10001A9E8(v39, (uint64_t)qword_10110F2A8);
      sub_10001BBBC(v16, v18);
      v41 = sub_10001BBBC(v16, v18);
      v84 = v40;
      v42 = Logger.logObject.getter(v41);
      v43 = static os_log_type_t.debug.getter(v42);
      v44 = os_log_type_enabled(v42, v43);
      v90 = v16;
      v86 = v12;
      if (v44)
      {
        v45 = (uint8_t *)swift_slowAlloc(12, -1);
        v83 = (uint8_t *)swift_slowAlloc(32, -1);
        v93[0] = (uint64_t)v83;
        *(_DWORD *)v45 = 136315138;
        v82 = v45 + 4;
        sub_10001BBBC(v90, v18);
        v46 = Data.hexString.getter(v90, v18);
        v48 = v47;
        sub_10001EF3C(v90, v18);
        v94 = sub_100016940(v46, v48, v93);
        v49 = v90;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v94, &v95, v82, v45 + 12);
        swift_bridgeObjectRelease();
        sub_10001EF3C(v49, v18);
        sub_10001EF3C(v49, v18);
        _os_log_impl((void *)&_mh_execute_header, v42, v43, "E1: %s", v45, 0xCu);
        v50 = v83;
        swift_arrayDestroy(v83, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v50, -1, -1);
        swift_slowDealloc(v45, -1, -1);
      }
      else
      {
        sub_10001EF3C(v16, v18);
        sub_10001EF3C(v16, v18);
      }

      v51 = v89;
      sub_10001BBBC(v89, v38);
      v52 = sub_10001BBBC(v51, v38);
      v53 = Logger.logObject.getter(v52);
      v54 = static os_log_type_t.debug.getter(v53);
      if (os_log_type_enabled(v53, v54))
      {
        v55 = (uint8_t *)swift_slowAlloc(12, -1);
        v84 = swift_slowAlloc(32, -1);
        v93[0] = v84;
        v83 = v55;
        *(_DWORD *)v55 = 136315138;
        v82 = v55 + 4;
        sub_10001BBBC(v51, v38);
        v56 = Data.hexString.getter(v51, v38);
        v58 = v57;
        sub_10001EF3C(v51, v38);
        v94 = sub_100016940(v56, v58, v93);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v94, &v95, v82, v55 + 12);
        swift_bridgeObjectRelease();
        sub_10001EF3C(v51, v38);
        sub_10001EF3C(v51, v38);
        v59 = v83;
        _os_log_impl((void *)&_mh_execute_header, v53, v54, "findMyNetworkId: %s", v83, 0xCu);
        v60 = v84;
        swift_arrayDestroy(v84, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v60, -1, -1);
        swift_slowDealloc(v59, -1, -1);
      }
      else
      {
        sub_10001EF3C(v51, v38);
        sub_10001EF3C(v51, v38);
      }

      v61 = (uint64_t)v86;
      v62 = *(_QWORD *)(v5 + 160);
      v63 = type metadata accessor for AccessoryMetadata(0);
      v64 = v92 + *(int *)(v63 + 40);
      if ((*(_BYTE *)(v64 + 16) & 1) != 0)
      {
        swift_retain();
        sub_10001EF3C(v90, v18);
        v65 = 0;
        v66 = 0;
      }
      else
      {
        v68 = *(_QWORD *)v64;
        v67 = *(_QWORD *)(v64 + 8);
        swift_retain();
        v65 = sub_1008C3554(v68, v67);
        v66 = v69;
        sub_10001EF3C(v90, v18);
      }
      *(_QWORD *)(v62 + 88) = v65;
      *(_QWORD *)(v62 + 96) = v66;
      swift_release();
      swift_bridgeObjectRelease();
      v70 = *(_QWORD *)(v5 + 160);
      v71 = (uint64_t *)(v92 + *(int *)(v63 + 20));
      v72 = *v71;
      v73 = v71[1];
      v74 = *(_QWORD *)(v70 + 104);
      v75 = *(_QWORD *)(v70 + 112);
      *(_QWORD *)(v70 + 104) = *v71;
      *(_QWORD *)(v70 + 112) = v73;
      sub_10001BBBC(v72, v73);
      sub_10001EF3C(v74, v75);
      v76 = (uint64_t *)(*(_QWORD *)(v5 + 160) + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_findMyNetworkId);
      v77 = *v76;
      v78 = v76[1];
      *v76 = v89;
      v76[1] = v38;
      sub_10001EF3C(v77, v78);
      v79 = *(_QWORD *)(v5 + 160);
      sub_10005972C(v87, v61, type metadata accessor for AccessoryProductInfo);
      (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v91 - 8) + 56))(v61, 0, 1);
      v80 = (uint64_t)v88;
      sub_100005CF0(v61, (uint64_t)v88, (uint64_t *)&unk_10111C0A0);
      v81 = v79 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_productInfo;
      swift_beginAccess(v79 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_productInfo, v93, 33, 0);
      swift_retain();
      sub_100004084(v80, v81, (uint64_t *)&unk_10111C0A0);
      swift_endAccess(v93);
      return swift_release();
    }
  }
}

_OWORD *sub_1009E5570@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v1;
  _QWORD *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  NSObject *v40;
  os_log_type_t v41;
  uint8_t *v42;
  uint64_t v43;
  os_log_type_t type;
  NSObject *log;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61[7];
  uint64_t v62;
  uint64_t v63;

  v2 = *(_QWORD **)(v1 + 160);
  v3 = v2[6];
  if (v3 >> 60 == 15)
  {
    if (qword_1010EA100 != -1)
      swift_once(&qword_1010EA100, sub_1009B44BC);
    v4 = type metadata accessor for Logger(0);
    v5 = sub_10001A9E8(v4, (uint64_t)qword_10110F2A8);
    v6 = Logger.logObject.getter(v5);
    v7 = static os_log_type_t.error.getter(v6);
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Missing E1 blob to generate init pairing.", v8, 2u);
      swift_slowDealloc(v8, -1, -1);
    }

    v9 = sub_100350CCC();
    v10 = swift_allocError(&type metadata for PencilPairingService.Error, v9, 0, 0);
    *(_QWORD *)v11 = 0;
    *(_QWORD *)(v11 + 8) = 0;
    *(_BYTE *)(v11 + 16) = 3;
    return (_OWORD *)swift_willThrow(v10);
  }
  else
  {
    v13 = v2[5];
    v14 = *(_QWORD *)((char *)v2 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_findMyNetworkId + 8);
    if (v14 >> 60 == 15)
    {
      sub_10001BBBC(v2[5], v2[6]);
      if (qword_1010EA100 != -1)
        swift_once(&qword_1010EA100, sub_1009B44BC);
      v15 = type metadata accessor for Logger(0);
      v16 = sub_10001A9E8(v15, (uint64_t)qword_10110F2A8);
      v17 = Logger.logObject.getter(v16);
      v18 = static os_log_type_t.error.getter(v17);
      if (os_log_type_enabled(v17, v18))
      {
        v19 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v19 = 0;
        _os_log_impl((void *)&_mh_execute_header, v17, v18, "Missing FindMyNetworkId to generate init pairing.", v19, 2u);
        swift_slowDealloc(v19, -1, -1);
      }

      v20 = sub_100350CCC();
      v21 = swift_allocError(&type metadata for PencilPairingService.Error, v20, 0, 0);
      *(_QWORD *)v22 = 0;
      *(_QWORD *)(v22 + 8) = 0;
      *(_BYTE *)(v22 + 16) = 3;
      swift_willThrow(v21);
      return (_OWORD *)sub_10001EF3C(v13, v3);
    }
    else
    {
      v23 = v1;
      v24 = *(_QWORD *)((char *)v2 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_findMyNetworkId);
      v25 = v2[2];
      v26 = v2[3];
      sub_100A053C0(v25, v26);
      v52 = v61[1];
      v53 = v61[0];
      v50 = v61[3];
      v51 = v61[2];
      v48 = v61[5];
      v49 = v61[4];
      sub_10001BD08(v13, v3);
      sub_10001BD08(v24, v14);
      sub_10001BD08(v13, v3);
      v54 = v24;
      sub_10001BD08(v24, v14);
      sub_10001BBBC(v25, v26);
      if (qword_1010EA100 != -1)
        swift_once(&qword_1010EA100, sub_1009B44BC);
      v27 = type metadata accessor for Logger(0);
      sub_10001A9E8(v27, (uint64_t)qword_10110F2A8);
      v28 = swift_retain_n(v23, 2);
      v29 = Logger.logObject.getter(v28);
      v30 = static os_log_type_t.default.getter(v29);
      if (os_log_type_enabled(v29, v30))
      {
        log = v29;
        type = v30;
        v31 = (uint8_t *)swift_slowAlloc(12, -1);
        v43 = swift_slowAlloc(32, -1);
        *(_DWORD *)v31 = 136315138;
        *(_QWORD *)&v56 = v43;
        v32 = *(_QWORD *)(v23 + 160);
        v34 = *(_QWORD *)(v32 + 16);
        v33 = *(_QWORD *)(v32 + 24);
        sub_10001BBBC(v34, v33);
        v46 = v13;
        v47 = v14;
        v35 = Data.hexString.getter(v34, v33);
        v37 = v36;
        sub_10001BC14(v34, v33);
        v38 = v35;
        v13 = v46;
        v62 = sub_100016940(v38, v37, (uint64_t *)&v56);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v62, &v63, v31 + 4, v31 + 12);
        swift_release_n(v23, 2);
        v14 = v47;
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, log, type, "sessionNonce: %s", v31, 0xCu);
        swift_arrayDestroy(v43, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v43, -1, -1);
        swift_slowDealloc(v31, -1, -1);

      }
      else
      {

        swift_release_n(v23, 2);
      }
      *(_QWORD *)&v56 = v53;
      *((_QWORD *)&v56 + 1) = v52;
      v57 = v51;
      v58 = v50;
      v59 = v49;
      v60 = v48;
      sub_10015D84C(&v56);
      v39 = sub_1009F7F00(v61, (void (*)(uint64_t, uint64_t))sub_10001BBBC);
      v40 = Logger.logObject.getter(v39);
      v41 = static os_log_type_t.default.getter(v40);
      if (os_log_type_enabled(v40, v41))
      {
        v42 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v42 = 0;
        _os_log_impl((void *)&_mh_execute_header, v40, v41, "generateInitPairingPayload request success.", v42, 2u);
        swift_slowDealloc(v42, -1, -1);
        sub_10001EF3C(v54, v14);
        sub_10001EF3C(v13, v3);

        sub_1009F7F00(v61, (void (*)(uint64_t, uint64_t))sub_10001BC14);
      }
      else
      {
        sub_1009F7F00(v61, (void (*)(uint64_t, uint64_t))sub_10001BC14);
        sub_10001EF3C(v54, v14);
        sub_10001EF3C(v13, v3);

      }
      return sub_10015BAD8(&v56, a1);
    }
  }
}

uint64_t sub_1009E5B28(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;

  v2[428] = v1;
  v2[427] = a1;
  v2[429] = *v1;
  v3 = (*(_QWORD *)(*(_QWORD *)(sub_10001A9A8(&qword_1010ED860) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[430] = swift_task_alloc(v3);
  v2[431] = swift_task_alloc(v3);
  v4 = type metadata accessor for PencilPairingLockCheckResponse(0);
  v2[432] = v4;
  v5 = (*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[433] = swift_task_alloc(v5);
  v2[434] = swift_task_alloc(v5);
  v6 = sub_10001A9A8(&qword_10110F820);
  v2[435] = v6;
  v2[436] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for UUID(0);
  v2[437] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v2[438] = v8;
  v2[439] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10001A9A8(&qword_1010EF7C0);
  v2[440] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v2[441] = v10;
  v2[442] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(type metadata accessor for LocalFindableAccessoryRecord(0) - 8);
  v2[443] = v11;
  v12 = (*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[444] = swift_task_alloc(v12);
  v2[445] = swift_task_alloc(v12);
  return swift_task_switch(sub_1009E5C84, v1, 0);
}

uint64_t sub_1009E5C84()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  NSObject *v45;
  os_log_type_t v46;
  uint8_t *v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t (*v59)(void);
  uint64_t result;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  os_log_type_t type;
  uint64_t v65;
  NSObject *log;
  os_log_t loga;
  uint64_t v68[2];

  v1 = *(_QWORD *)(v0 + 3424);
  swift_retain();
  sub_1009A8094(v0 + 1536);
  sub_100005CF0(v0 + 1536, v0 + 16, &qword_10110EF48);
  swift_release();
  sub_100005CF0(v0 + 1536, v0 + 624, &qword_10110EF48);
  if (sub_1009F74FC(v0 + 624) == 1)
  {
    if (qword_1010EA100 != -1)
      swift_once(&qword_1010EA100, sub_1009B44BC);
    v2 = type metadata accessor for Logger(0);
    v3 = sub_10001A9E8(v2, (uint64_t)qword_10110F2A8);
    v4 = Logger.logObject.getter(v3);
    v5 = static os_log_type_t.error.getter(v4);
    if (os_log_type_enabled(v4, v5))
    {
      v6 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Unable to create pairing check data.", v6, 2u);
      swift_slowDealloc(v6, -1, -1);
    }

    v7 = sub_100350CCC();
    v8 = swift_allocError(&type metadata for PencilPairingService.Error, v7, 0, 0);
    *(_QWORD *)v9 = 0xD00000000000001ALL;
    *(_QWORD *)(v9 + 8) = 0x8000000100EC64E0;
    *(_BYTE *)(v9 + 16) = 0;
    swift_willThrow(v8);
LABEL_18:
    v51 = *(_QWORD *)(v0 + 3552);
    v52 = *(_QWORD *)(v0 + 3536);
    v53 = *(_QWORD *)(v0 + 3512);
    v54 = *(_QWORD *)(v0 + 3488);
    v55 = *(_QWORD *)(v0 + 3472);
    v56 = *(_QWORD *)(v0 + 3464);
    v57 = *(_QWORD *)(v0 + 3448);
    v58 = *(_QWORD *)(v0 + 3440);
    swift_task_dealloc(*(_QWORD *)(v0 + 3560));
    swift_task_dealloc(v51);
    swift_task_dealloc(v52);
    swift_task_dealloc(v53);
    swift_task_dealloc(v54);
    swift_task_dealloc(v55);
    swift_task_dealloc(v56);
    swift_task_dealloc(v57);
    swift_task_dealloc(v58);
    v59 = *(uint64_t (**)(void))(v0 + 8);
    return v59();
  }
  memcpy((void *)(v0 + 320), (const void *)(v0 + 624), 0x130uLL);
  if (qword_1010EA100 != -1)
    swift_once(&qword_1010EA100, sub_1009B44BC);
  v10 = type metadata accessor for Logger(0);
  *(_QWORD *)(v0 + 3568) = sub_10001A9E8(v10, (uint64_t)qword_10110F2A8);
  sub_1009F76BC(v0 + 1536, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1009F7514);
  sub_1009F76BC(v0 + 1536, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1009F7514);
  sub_1009F76BC(v0 + 1536, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1009F7514);
  sub_1009F76BC(v0 + 1536, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1009F7514);
  sub_1009F76BC(v0 + 1536, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1009F7514);
  sub_1009F76BC(v0 + 1536, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1009F7514);
  sub_1009F76BC(v0 + 1536, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1009F7514);
  sub_100005CF0(v0 + 16, v0 + 1840, &qword_10110EF48);
  sub_1009F76BC(v0 + 1536, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1009F7514);
  sub_1009F76BC(v0 + 1536, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1009F7514);
  v11 = sub_1001B0340((uint64_t *)(v0 + 1840));
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.default.getter(v12);
  log = v12;
  if (os_log_type_enabled(v12, v13))
  {
    v14 = swift_slowAlloc(52, -1);
    v65 = swift_slowAlloc(160, -1);
    v68[0] = v65;
    *(_DWORD *)v14 = 136316162;
    type = v13;
    v15 = *(_QWORD *)(v0 + 560);
    v16 = *(_QWORD *)(v0 + 568);
    sub_10001BBBC(v15, v16);
    v17 = Data.description.getter(v15, v16);
    v19 = v18;
    sub_10001BC14(v15, v16);
    *(_QWORD *)(v0 + 3376) = sub_100016940(v17, v19, v68);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 3376, v0 + 3384, v14 + 4, v14 + 12);
    swift_bridgeObjectRelease();
    sub_1009F76BC(v0 + 1536, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1009F7740);
    sub_1009F76BC(v0 + 1536, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1009F7740);
    *(_WORD *)(v14 + 12) = 2080;
    v20 = *(_QWORD *)(v0 + 576);
    v21 = *(_QWORD *)(v0 + 584);
    sub_10001BBBC(v20, v21);
    v22 = Data.description.getter(v20, v21);
    v24 = v23;
    sub_10001BC14(v20, v21);
    *(_QWORD *)(v0 + 3384) = sub_100016940(v22, v24, v68);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 3384, v0 + 3392, v14 + 14, v14 + 22);
    swift_bridgeObjectRelease();
    sub_1009F76BC(v0 + 1536, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1009F7740);
    sub_1009F76BC(v0 + 1536, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1009F7740);
    *(_WORD *)(v14 + 22) = 2080;
    v25 = *(_QWORD *)(v0 + 512);
    v26 = *(_QWORD *)(v0 + 520);
    sub_10001BBBC(v25, v26);
    v27 = Data.description.getter(v25, v26);
    v29 = v28;
    sub_10001BC14(v25, v26);
    *(_QWORD *)(v0 + 3392) = sub_100016940(v27, v29, v68);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 3392, v0 + 3400, v14 + 24, v14 + 32);
    swift_bridgeObjectRelease();
    sub_1009F76BC(v0 + 1536, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1009F7740);
    sub_1009F76BC(v0 + 1536, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1009F7740);
    *(_WORD *)(v14 + 32) = 2080;
    v30 = *(_QWORD *)(v0 + 496);
    v31 = *(_QWORD *)(v0 + 504);
    sub_10001BBBC(v30, v31);
    v32 = Data.description.getter(v30, v31);
    v34 = v33;
    sub_10001BC14(v30, v31);
    *(_QWORD *)(v0 + 3400) = sub_100016940(v32, v34, v68);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 3400, v0 + 3408, v14 + 34, v14 + 42);
    swift_bridgeObjectRelease();
    sub_1009F76BC(v0 + 1536, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1009F7740);
    sub_1009F76BC(v0 + 1536, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1009F7740);
    *(_WORD *)(v14 + 42) = 2080;
    v35 = *(_QWORD *)(v0 + 480);
    v36 = *(_QWORD *)(v0 + 488);
    sub_10001BBBC(v35, v36);
    v37 = Data.description.getter(v35, v36);
    v39 = v38;
    sub_10001BC14(v35, v36);
    *(_QWORD *)(v0 + 3408) = sub_100016940(v37, v39, v68);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 3408, v0 + 3416, v14 + 44, v14 + 52);
    swift_bridgeObjectRelease();
    sub_1009F76BC(v0 + 1536, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1009F7740);
    sub_1009F76BC(v0 + 1536, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1009F7740);
    _os_log_impl((void *)&_mh_execute_header, log, type, "nonce: %s e1: %s attestation: %s\ncsr: %s certs: %s", (uint8_t *)v14, 0x34u);
    swift_arrayDestroy(v65, 5, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v65, -1, -1);
    swift_slowDealloc(v14, -1, -1);

  }
  else
  {
    sub_1009F76BC(v0 + 1536, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1009F7740);
    sub_1009F76BC(v0 + 1536, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1009F7740);
    sub_100005CF0(v0 + 16, v0 + 928, &qword_10110EF48);
    sub_1001B0834((uint64_t *)(v0 + 928));
    sub_1001B0834((uint64_t *)(v0 + 320));
    sub_100005CF0(v0 + 16, v0 + 1232, &qword_10110EF48);
    sub_1001B0834((uint64_t *)(v0 + 1232));
    sub_1001B0834((uint64_t *)(v0 + 320));
    sub_100005CF0(v0 + 16, v0 + 2448, &qword_10110EF48);
    sub_1001B0834((uint64_t *)(v0 + 2448));
    sub_1001B0834((uint64_t *)(v0 + 320));
    sub_100005CF0(v0 + 16, v0 + 2144, &qword_10110EF48);
    sub_1001B0834((uint64_t *)(v0 + 2144));
    sub_1001B0834((uint64_t *)(v0 + 320));

  }
  v41 = (uint64_t *)(*(_QWORD *)(v1 + 160) + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessorySerialNumber);
  v42 = *v41;
  *(_QWORD *)(v0 + 3576) = *v41;
  v43 = v41[1];
  *(_QWORD *)(v0 + 3584) = v43;
  if (v43 >> 60 == 15)
  {
LABEL_15:
    v45 = Logger.logObject.getter(v40);
    v46 = static os_log_type_t.error.getter(v45);
    if (os_log_type_enabled(v45, v46))
    {
      v47 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v47 = 0;
      _os_log_impl((void *)&_mh_execute_header, v45, v46, "Invalid serial number.", v47, 2u);
      swift_slowDealloc(v47, -1, -1);
    }

    v48 = sub_100350CCC();
    v49 = swift_allocError(&type metadata for PencilPairingService.Error, v48, 0, 0);
    *(_OWORD *)v50 = xmmword_100E58250;
    *(_BYTE *)(v50 + 16) = 3;
    swift_willThrow(v49);
    sub_1009F76BC(v0 + 1536, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1009F7740);
    goto LABEL_18;
  }
  *(_QWORD *)(v0 + 3312) = v42;
  *(_QWORD *)(v0 + 3320) = v43;
  sub_10001BBBC(v42, v43);
  v44 = sub_100035530();
  if ((DataProtocol.isNull.getter(&type metadata for Data, v44) & 1) != 0)
  {
    v40 = sub_10001EF3C(v42, v43);
    goto LABEL_15;
  }
  *(_QWORD *)(v0 + 3592) = Data.trimmed.getter(v42, v43);
  *(_QWORD *)(v0 + 3600) = v61;
  v62 = qword_1010EA5B0;
  swift_retain();
  if (v62 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v0 + 3264, 0, 0);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 3224, &qword_1010EE220);
  if (*(_QWORD *)(v0 + 3248))
  {
    sub_10000F9FC((__int128 *)(v0 + 3224), v0 + 3184);
    swift_release();
    sub_10001AA44((_QWORD *)(v0 + 3184), *(_QWORD *)(v0 + 3208));
    loga = (os_log_t)((char *)&dword_1010EBC30 + dword_1010EBC30);
    v63 = (_QWORD *)swift_task_alloc(unk_1010EBC34);
    *(_QWORD *)(v0 + 3608) = v63;
    *v63 = v0;
    v63[1] = sub_1009E65F0;
    v59 = (uint64_t (*)(void))loga;
    return v59();
  }
  __break(1u);
  return result;
}

uint64_t sub_1009E65F0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 3608);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 3424);
  *(_QWORD *)(*(_QWORD *)v1 + 3616) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1009E6650, v3, 0);
}

uint64_t sub_1009E6650()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v1 = (_QWORD *)(v0 + 3184);
  v2 = *(_QWORD *)(v0 + 3616);
  if (v2)
  {
    v3 = *(_QWORD *)(v0 + 3432);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    v4 = swift_allocObject(&unk_1010A10E0, 32, 7);
    *(_QWORD *)(v0 + 3624) = v4;
    *(_QWORD *)(v4 + 16) = v2;
    *(_QWORD *)(v4 + 24) = v3;
    v5 = async function pointer to withTimeout<A>(_:block:)[1];
    swift_retain();
    v6 = (_QWORD *)swift_task_alloc(v5);
    *(_QWORD *)(v0 + 3632) = v6;
    *v6 = v0;
    v6[1] = sub_1009E6830;
    return withTimeout<A>(_:block:)(v6, 0x8155A43676E00000, 6, &unk_10110F830, v4, &type metadata for () + 1);
  }
  else
  {
    v8 = *(_QWORD *)(v0 + 3600);
    v9 = *(_QWORD *)(v0 + 3592);
    v10 = *(_QWORD *)(v0 + 3584);
    v11 = *(_QWORD *)(v0 + 3576);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    v12 = sub_100033220();
    v13 = swift_allocError(&type metadata for DaemonError, v12, 0, 0);
    *v14 = 0xD000000000000013;
    v14[1] = 0x8000000100ED7110;
    swift_willThrow(v13);
    sub_10001BC14(v9, v8);
    sub_10001EF3C(v11, v10);
    sub_1009F76BC(v0 + 1536, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1009F7740);
    v15 = *(_QWORD *)(v0 + 3552);
    v16 = *(_QWORD *)(v0 + 3536);
    v17 = *(_QWORD *)(v0 + 3512);
    v18 = *(_QWORD *)(v0 + 3488);
    v19 = *(_QWORD *)(v0 + 3472);
    v20 = *(_QWORD *)(v0 + 3464);
    v21 = *(_QWORD *)(v0 + 3448);
    v22 = *(_QWORD *)(v0 + 3440);
    swift_task_dealloc(*(_QWORD *)(v0 + 3560));
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1009E6830()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 3632);
  *(_QWORD *)(*v1 + 3640) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = *(_QWORD *)(v2 + 3424);
    v5 = sub_1009E7A38;
  }
  else
  {
    v6 = *(_QWORD *)(v2 + 3424);
    swift_release();
    v5 = sub_1009E68A4;
    v4 = v6;
  }
  return swift_task_switch(v5, v4, 0);
}

uint64_t sub_1009E68A4()
{
  uint64_t v0;

  return swift_task_switch(sub_1009E68B8, *(_QWORD *)(v0 + 3616), 0);
}

uint64_t sub_1009E68B8()
{
  uint64_t *v0;
  uint64_t **v1;

  v1 = (uint64_t **)swift_task_alloc(dword_10110CD84);
  v0[456] = (uint64_t)v1;
  *v1 = v0;
  v1[1] = (uint64_t *)sub_1009E6910;
  return sub_1008FC02C(v0[449], v0[450]);
}

uint64_t sub_1009E6910(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t (*v5)();

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 3648);
  v3[457] = a1;
  v3[458] = v1;
  swift_task_dealloc(v4);
  if (v1)
    v5 = sub_1009E6C74;
  else
    v5 = sub_1009E6980;
  return swift_task_switch(v5, v3[428], 0);
}

uint64_t sub_1009E6980()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;

  v1 = *(_QWORD *)(v0 + 3656);
  v2 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v0 + 3672) = v2;
  if (v2)
  {
    v3 = *(_QWORD *)(v0 + 3544);
    v4 = *(_DWORD *)(v3 + 80);
    *(_DWORD *)(v0 + 3728) = v4;
    *(_QWORD *)(v0 + 3680) = *(_QWORD *)(v3 + 72);
    *(_QWORD *)(v0 + 3688) = 0;
    v5 = *(_QWORD *)(v0 + 3560);
    v6 = *(_QWORD *)(v0 + 3552);
    sub_10005972C(v1 + ((v4 + 32) & ~(unint64_t)v4), v5, type metadata accessor for LocalFindableAccessoryRecord);
    v7 = sub_10005972C(v5, v6, type metadata accessor for LocalFindableAccessoryRecord);
    v8 = Logger.logObject.getter(v7);
    v9 = static os_log_type_t.default.getter(v8);
    if (os_log_type_enabled(v8, v9))
    {
      v10 = *(_QWORD *)(v0 + 3552);
      v11 = *(_QWORD *)(v0 + 3496);
      v12 = swift_slowAlloc(22, -1);
      v13 = swift_slowAlloc(64, -1);
      v22 = v13;
      *(_DWORD *)v12 = 136446466;
      *(_QWORD *)(v0 + 3360) = sub_100016940(0xD000000000000020, 0x8000000100EEC070, &v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 3360, v0 + 3368, v12 + 4, v12 + 12);
      *(_WORD *)(v12 + 12) = 2082;
      v14 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v15 = dispatch thunk of CustomStringConvertible.description.getter(v11, v14);
      *(_QWORD *)(v0 + 3368) = sub_100016940(v15, v16, &v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 3368, v0 + 3376, v12 + 14, v12 + 22);
      swift_bridgeObjectRelease();
      sub_1000126B0(v10, type metadata accessor for LocalFindableAccessoryRecord);
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "%{public}s Removing dupe: %{public}s", (uint8_t *)v12, 0x16u);
      swift_arrayDestroy(v13, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v13, -1, -1);
      swift_slowDealloc(v12, -1, -1);
    }
    else
    {
      sub_1000126B0(*(_QWORD *)(v0 + 3552), type metadata accessor for LocalFindableAccessoryRecord);
    }

    v19 = *(_QWORD *)(v0 + 3512);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 3504) + 16))(v19, *(_QWORD *)(v0 + 3560), *(_QWORD *)(v0 + 3496));
    v20 = type metadata accessor for Peripheral(0);
    Identifier.init(_:)(v19, v20);
    v21 = (_QWORD *)swift_task_alloc(dword_10110F6F4);
    *(_QWORD *)(v0 + 3696) = v21;
    *v21 = v0;
    v21[1] = sub_1009E6D6C;
    return sub_1009E80E8(*(_QWORD *)(v0 + 3536), 0);
  }
  else
  {
    swift_bridgeObjectRelease();
    v17 = (_QWORD *)swift_task_alloc(dword_10110F83C);
    *(_QWORD *)(v0 + 3712) = v17;
    *v17 = v0;
    v17[1] = sub_1009E711C;
    return sub_1009E971C(*(_QWORD *)(v0 + 3488), v0 + 320);
  }
}

uint64_t sub_1009E6C74()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = *(_QWORD *)(v0 + 3600);
  v2 = *(_QWORD *)(v0 + 3592);
  v3 = *(_QWORD *)(v0 + 3584);
  v4 = *(_QWORD *)(v0 + 3576);
  swift_release();
  sub_10001BC14(v2, v1);
  sub_10001EF3C(v4, v3);
  sub_1009F76BC(v0 + 1536, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1009F7740);
  v5 = *(_QWORD *)(v0 + 3552);
  v6 = *(_QWORD *)(v0 + 3536);
  v7 = *(_QWORD *)(v0 + 3512);
  v8 = *(_QWORD *)(v0 + 3488);
  v9 = *(_QWORD *)(v0 + 3472);
  v10 = *(_QWORD *)(v0 + 3464);
  v11 = *(_QWORD *)(v0 + 3448);
  v12 = *(_QWORD *)(v0 + 3440);
  swift_task_dealloc(*(_QWORD *)(v0 + 3560));
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1009E6D6C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)();
  uint64_t v9;
  uint64_t v10;

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 3696);
  *(_QWORD *)(*(_QWORD *)v1 + 3704) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = v2[442];
    v5 = v2[441];
    v6 = v2[440];
    v7 = v2[428];
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
    swift_bridgeObjectRelease();
    v8 = sub_1009E7B3C;
    v9 = v7;
  }
  else
  {
    v10 = v2[428];
    (*(void (**)(_QWORD, _QWORD))(v2[441] + 8))(v2[442], v2[440]);
    v8 = sub_1009E6E10;
    v9 = v10;
  }
  return swift_task_switch(v8, v9, 0);
}

uint64_t sub_1009E6E10()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;

  v1 = *(_QWORD *)(v0 + 3672);
  v2 = *(_QWORD *)(v0 + 3688) + 1;
  sub_1000126B0(*(_QWORD *)(v0 + 3560), type metadata accessor for LocalFindableAccessoryRecord);
  if (v2 == v1)
  {
    swift_bridgeObjectRelease();
    v3 = (_QWORD *)swift_task_alloc(dword_10110F83C);
    *(_QWORD *)(v0 + 3712) = v3;
    *v3 = v0;
    v3[1] = sub_1009E711C;
    return sub_1009E971C(*(_QWORD *)(v0 + 3488), v0 + 320);
  }
  else
  {
    v5 = *(_QWORD *)(v0 + 3688) + 1;
    *(_QWORD *)(v0 + 3688) = v5;
    v6 = *(_QWORD *)(v0 + 3560);
    v7 = *(_QWORD *)(v0 + 3552);
    sub_10005972C(*(_QWORD *)(v0 + 3656)+ ((*(unsigned __int8 *)(v0 + 3728) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 3728))+ *(_QWORD *)(v0 + 3680) * v5, v6, type metadata accessor for LocalFindableAccessoryRecord);
    v8 = sub_10005972C(v6, v7, type metadata accessor for LocalFindableAccessoryRecord);
    v9 = Logger.logObject.getter(v8);
    v10 = static os_log_type_t.default.getter(v9);
    v11 = os_log_type_enabled(v9, v10);
    v12 = *(_QWORD *)(v0 + 3552);
    if (v11)
    {
      v13 = *(_QWORD *)(v0 + 3496);
      v14 = swift_slowAlloc(22, -1);
      v15 = swift_slowAlloc(64, -1);
      v22 = v15;
      *(_DWORD *)v14 = 136446466;
      *(_QWORD *)(v0 + 3360) = sub_100016940(0xD000000000000020, 0x8000000100EEC070, &v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 3360, v0 + 3368, v14 + 4, v14 + 12);
      *(_WORD *)(v14 + 12) = 2082;
      v16 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v17 = dispatch thunk of CustomStringConvertible.description.getter(v13, v16);
      *(_QWORD *)(v0 + 3368) = sub_100016940(v17, v18, &v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 3368, v0 + 3376, v14 + 14, v14 + 22);
      swift_bridgeObjectRelease();
      sub_1000126B0(v12, type metadata accessor for LocalFindableAccessoryRecord);
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "%{public}s Removing dupe: %{public}s", (uint8_t *)v14, 0x16u);
      swift_arrayDestroy(v15, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v15, -1, -1);
      swift_slowDealloc(v14, -1, -1);
    }
    else
    {
      sub_1000126B0(*(_QWORD *)(v0 + 3552), type metadata accessor for LocalFindableAccessoryRecord);
    }

    v19 = *(_QWORD *)(v0 + 3512);
    (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 3504) + 16))(v19, *(_QWORD *)(v0 + 3560), *(_QWORD *)(v0 + 3496));
    v20 = type metadata accessor for Peripheral(0);
    Identifier.init(_:)(v19, v20);
    v21 = (_QWORD *)swift_task_alloc(dword_10110F6F4);
    *(_QWORD *)(v0 + 3696) = v21;
    *v21 = v0;
    v21[1] = sub_1009E6D6C;
    return sub_1009E80E8(*(_QWORD *)(v0 + 3536), 0);
  }
}

uint64_t sub_1009E711C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 3424);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 3712));
  return swift_task_switch(sub_1009E7174, v1, 0);
}

uint64_t sub_1009E7174()
{
  uint64_t v0;
  _QWORD *v1;
  id *v2;
  NSObject *v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t *v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  _BOOL4 v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t *v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  NSObject *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;

  v1 = (_QWORD *)(v0 + 3336);
  v2 = *(id **)(v0 + 3488);
  if (swift_getEnumCaseMultiPayload(v2, *(_QWORD *)(v0 + 3480)) == 1)
  {
    v3 = *v2;
    v4 = Logger.logObject.getter(v3);
    v5 = static os_log_type_t.error.getter(v4);
    if (os_log_type_enabled(v4, v5))
    {
      v6 = (uint8_t *)swift_slowAlloc(12, -1);
      v7 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v6 = 138543362;
      v8 = v3;
      v9 = _swift_stdlib_bridgeErrorToNSError(v8);
      *(_QWORD *)(v0 + 3352) = v9;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 3352, v0 + 3360, v6 + 4, v6 + 12);
      *v7 = v9;

      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Pairing lock check failed. Error: %{public}@", v6, 0xCu);
      v10 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
      swift_arrayDestroy(v7, 1, v10);
      v11 = v7;
      v1 = (_QWORD *)(v0 + 3336);
      swift_slowDealloc(v11, -1, -1);
      swift_slowDealloc(v6, -1, -1);
    }
    else
    {

      v4 = v3;
    }

    *(_QWORD *)(v0 + 3344) = v3;
    type metadata accessor for SPPairingSessionError(0);
    v28 = v27;
    v29 = sub_100006204(&qword_1010EB450, (uint64_t (*)(uint64_t))type metadata accessor for SPPairingSessionError, (uint64_t)&unk_100E217DC);
    _BridgedStoredNSError.code.getter(v1, v28, v29);
    v30 = *(_QWORD *)(v0 + 3600);
    v31 = *(_QWORD *)(v0 + 3592);
    v32 = *(_QWORD *)(v0 + 3584);
    v33 = *(_QWORD *)(v0 + 3576);
    if (*(_QWORD *)(v0 + 3336) == 18)
    {
      v34 = sub_100350CCC();
      v35 = swift_allocError(&type metadata for PencilPairingService.Error, v34, 0, 0);
      *(_OWORD *)v36 = xmmword_100E58240;
      *(_BYTE *)(v36 + 16) = 3;
    }
    else
    {
      v37 = sub_100350CCC();
      swift_allocError(&type metadata for PencilPairingService.Error, v37, 0, 0);
      *(_QWORD *)v38 = v3;
      *(_QWORD *)(v38 + 8) = 0;
      *(_BYTE *)(v38 + 16) = 1;
      v35 = v3;
    }
    swift_willThrow(v35);
    sub_1009F76BC(v0 + 1536, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1009F7740);
    sub_10001EF3C(v33, v32);
    swift_release();
    sub_10001BC14(v31, v30);

    v39 = *(_QWORD *)(v0 + 3552);
    v40 = *(_QWORD *)(v0 + 3536);
    v41 = *(_QWORD *)(v0 + 3512);
    v42 = *(_QWORD *)(v0 + 3488);
    v43 = *(_QWORD *)(v0 + 3472);
    v44 = *(_QWORD *)(v0 + 3464);
    v45 = *(_QWORD *)(v0 + 3448);
    v46 = *(_QWORD *)(v0 + 3440);
    swift_task_dealloc(*(_QWORD *)(v0 + 3560));
    swift_task_dealloc(v39);
    swift_task_dealloc(v40);
    swift_task_dealloc(v41);
    swift_task_dealloc(v42);
    swift_task_dealloc(v43);
    swift_task_dealloc(v44);
    swift_task_dealloc(v45);
    swift_task_dealloc(v46);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v12 = v0 + 2752;
    v13 = *(_QWORD *)(v0 + 3472);
    v14 = *(_QWORD *)(v0 + 3464);
    sub_1000126EC((uint64_t)v2, v13, type metadata accessor for PencilPairingLockCheckResponse);
    v15 = sub_10005972C(v13, v14, type metadata accessor for PencilPairingLockCheckResponse);
    v16 = Logger.logObject.getter(v15);
    v17 = static os_log_type_t.default.getter(v16);
    v18 = os_log_type_enabled(v16, v17);
    v19 = *(_QWORD *)(v0 + 3464);
    if (v18)
    {
      v20 = *(_QWORD *)(v0 + 3456);
      v21 = (uint8_t *)swift_slowAlloc(12, -1);
      v22 = swift_slowAlloc(32, -1);
      v57 = v22;
      *(_DWORD *)v21 = 136446210;
      v23 = (_QWORD *)(v19 + *(int *)(v20 + 40));
      v24 = v23[1];
      if (v24 >> 60 == 15)
      {
        v25 = 0;
        v26 = 0xE000000000000000;
      }
      else
      {
        v25 = Data.hexString.getter(*v23, v24);
        v26 = v48;
      }
      v49 = *(_QWORD *)(v0 + 3464);
      *(_QWORD *)(v0 + 3328) = sub_100016940(v25, v26, &v57);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 3328, v0 + 3336, v21 + 4, v21 + 12);
      swift_bridgeObjectRelease();
      sub_1000126B0(v49, type metadata accessor for PencilPairingLockCheckResponse);
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Received SeedS and S3 from server. Pairing token: %{public}s", v21, 0xCu);
      swift_arrayDestroy(v22, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v22, -1, -1);
      swift_slowDealloc(v21, -1, -1);

      v12 = v0 + 2752;
    }
    else
    {
      sub_1000126B0(*(_QWORD *)(v0 + 3464), type metadata accessor for PencilPairingLockCheckResponse);

    }
    v50 = *(_QWORD *)(v0 + 3504);
    v51 = *(_QWORD *)(v0 + 3496);
    v52 = *(_QWORD *)(v0 + 3448);
    v53 = *(_QWORD *)(v0 + 3440);
    v54 = *(_QWORD *)(*(_QWORD *)(v0 + 3424) + 160);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v50 + 16))(v52, *(_QWORD *)(v0 + 3472) + *(int *)(*(_QWORD *)(v0 + 3456) + 32), v51);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v50 + 56))(v52, 0, 1, v51);
    sub_100005CF0(v52, v53, &qword_1010ED860);
    v55 = v54 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_fmnaId;
    swift_beginAccess(v54 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_fmnaId, v0 + 3288, 33, 0);
    swift_retain();
    sub_100004084(v53, v55, &qword_1010ED860);
    swift_endAccess(v0 + 3288);
    swift_release();
    v56 = (_QWORD *)swift_task_alloc(dword_10110F844);
    *(_QWORD *)(v0 + 3720) = v56;
    *v56 = v0;
    v56[1] = sub_1009E7704;
    return sub_1009E9D20(v12, *(_QWORD *)(v0 + 3472));
  }
}

uint64_t sub_1009E7704()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 3424);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 3720));
  return swift_task_switch(sub_1009E775C, v1, 0);
}

uint64_t sub_1009E775C()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(void);
  _OWORD *v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _OWORD *v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  sub_100005CF0(v0 + 2752, v0 + 2896, &qword_10110F7A8);
  if (sub_1009F7970(v0 + 2896) == 1)
  {
    v1 = *(_QWORD *)(v0 + 3600);
    v2 = *(_QWORD *)(v0 + 3592);
    v3 = *(_QWORD *)(v0 + 3584);
    v4 = *(_QWORD *)(v0 + 3576);
    v5 = *(_QWORD *)(v0 + 3472);
    v6 = sub_100350CCC();
    v7 = swift_allocError(&type metadata for PencilPairingService.Error, v6, 0, 0);
    *(_QWORD *)v8 = 0xD00000000000001ALL;
    *(_QWORD *)(v8 + 8) = 0x8000000100EEC050;
    *(_BYTE *)(v8 + 16) = 0;
    swift_willThrow(v7);
    sub_10001BC14(v2, v1);
    swift_release();
    sub_10001EF3C(v4, v3);
    sub_1009F76BC(v0 + 1536, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1009F7740);
    sub_1000126B0(v5, type metadata accessor for PencilPairingLockCheckResponse);
    v9 = *(_QWORD *)(v0 + 3552);
    v10 = *(_QWORD *)(v0 + 3536);
    v11 = *(_QWORD *)(v0 + 3512);
    v12 = *(_QWORD *)(v0 + 3488);
    v13 = *(_QWORD *)(v0 + 3472);
    v14 = *(_QWORD *)(v0 + 3464);
    v15 = *(_QWORD *)(v0 + 3448);
    v16 = *(_QWORD *)(v0 + 3440);
    swift_task_dealloc(*(_QWORD *)(v0 + 3560));
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    v17 = *(uint64_t (**)(void))(v0 + 8);
  }
  else
  {
    v18 = sub_10015BAD8((_OWORD *)(v0 + 2896), (_OWORD *)(v0 + 3040));
    v19 = Logger.logObject.getter(v18);
    v20 = static os_log_type_t.default.getter(v19);
    if (os_log_type_enabled(v19, v20))
    {
      v21 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v21 = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "Successfully generated finalize pairing command.", v21, 2u);
      swift_slowDealloc(v21, -1, -1);
    }
    v22 = *(_QWORD *)(v0 + 3584);
    v23 = *(_QWORD *)(v0 + 3576);
    v24 = *(_QWORD *)(v0 + 3560);
    v25 = *(_QWORD *)(v0 + 3552);
    v26 = *(_QWORD *)(v0 + 3536);
    v30 = *(_QWORD *)(v0 + 3512);
    v31 = *(_QWORD *)(v0 + 3488);
    v27 = *(_QWORD *)(v0 + 3472);
    v32 = *(_QWORD *)(v0 + 3464);
    v33 = *(_QWORD *)(v0 + 3448);
    v34 = *(_QWORD *)(v0 + 3440);
    v28 = *(_OWORD **)(v0 + 3416);
    sub_10001BC14(*(_QWORD *)(v0 + 3592), *(_QWORD *)(v0 + 3600));
    swift_release();

    sub_10001EF3C(v23, v22);
    sub_1009F76BC(v0 + 1536, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1009F7740);
    sub_1000126B0(v27, type metadata accessor for PencilPairingLockCheckResponse);
    sub_10015BAD8((_OWORD *)(v0 + 3040), v28);
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v27);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    v17 = *(uint64_t (**)(void))(v0 + 8);
  }
  return v17();
}

uint64_t sub_1009E7A38()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = *(_QWORD *)(v0 + 3600);
  v2 = *(_QWORD *)(v0 + 3592);
  v3 = *(_QWORD *)(v0 + 3584);
  v4 = *(_QWORD *)(v0 + 3576);
  sub_1009F76BC(v0 + 1536, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1009F7740);
  sub_10001EF3C(v4, v3);
  swift_release();
  sub_10001BC14(v2, v1);
  swift_release();
  v5 = *(_QWORD *)(v0 + 3552);
  v6 = *(_QWORD *)(v0 + 3536);
  v7 = *(_QWORD *)(v0 + 3512);
  v8 = *(_QWORD *)(v0 + 3488);
  v9 = *(_QWORD *)(v0 + 3472);
  v10 = *(_QWORD *)(v0 + 3464);
  v11 = *(_QWORD *)(v0 + 3448);
  v12 = *(_QWORD *)(v0 + 3440);
  swift_task_dealloc(*(_QWORD *)(v0 + 3560));
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1009E7B3C()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = *(_QWORD *)(v0 + 3584);
  v2 = *(_QWORD *)(v0 + 3576);
  v3 = *(_QWORD *)(v0 + 3560);
  sub_10001BC14(*(_QWORD *)(v0 + 3592), *(_QWORD *)(v0 + 3600));
  swift_release();
  sub_10001EF3C(v2, v1);
  sub_1009F76BC(v0 + 1536, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1009F7740);
  sub_1000126B0(v3, type metadata accessor for LocalFindableAccessoryRecord);
  v4 = *(_QWORD *)(v0 + 3552);
  v5 = *(_QWORD *)(v0 + 3536);
  v6 = *(_QWORD *)(v0 + 3512);
  v7 = *(_QWORD *)(v0 + 3488);
  v8 = *(_QWORD *)(v0 + 3472);
  v9 = *(_QWORD *)(v0 + 3464);
  v10 = *(_QWORD *)(v0 + 3448);
  v11 = *(_QWORD *)(v0 + 3440);
  swift_task_dealloc(*(_QWORD *)(v0 + 3560));
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1009E7C44(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2[4] = a2;
  v3 = type metadata accessor for CloudKitStorage.State(0);
  v2[5] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[6] = v4;
  v2[7] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1009E7CA4, 0, 0);
}

uint64_t sub_1009E7CA4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  if (qword_1010EA100 != -1)
    swift_once(&qword_1010EA100, sub_1009B44BC);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_10001A9E8(v1, (uint64_t)qword_10110F2A8);
  v0[8] = v2;
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = swift_slowAlloc(32, -1);
    v9 = v6;
    *(_DWORD *)v5 = 136446210;
    v0[3] = sub_100016940(0xD000000000000020, 0x8000000100EEC070, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 3, v0 + 4, v5 + 4, v5 + 12);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Waiting for CloudKit to be available... %{public}s", v5, 0xCu);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);
  }

  v7 = v0[4];
  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0[6] + 104))(v0[7], enum case for CloudKitStorage.State.available(_:), v0[5]);
  return swift_task_switch(sub_1009E7E48, v7, 0);
}

uint64_t sub_1009E7E48()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t (*v3)(_QWORD);

  v3 = (uint64_t (*)(_QWORD))((char *)&async function pointer to dispatch thunk of CloudKitStorage.await(state:)
                                      + async function pointer to dispatch thunk of CloudKitStorage.await(state:));
  v1 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of CloudKitStorage.await(state:)
                                  + 1));
  *(_QWORD *)(v0 + 72) = v1;
  *v1 = v0;
  v1[1] = sub_1009E7EB0;
  return v3(*(_QWORD *)(v0 + 56));
}

uint64_t sub_1009E7EB0()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 72);
  *(_QWORD *)(*(_QWORD *)v1 + 80) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = v2[4];
    v5 = sub_1009E7F28;
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v2[6] + 8))(v2[7], v2[5]);
    v5 = sub_1009E7FA0;
    v4 = 0;
  }
  return swift_task_switch(v5, v4, 0);
}

uint64_t sub_1009E7F28()
{
  _QWORD *v0;

  (*(void (**)(_QWORD, _QWORD))(v0[6] + 8))(v0[7], v0[5]);
  return swift_task_switch(sub_1009E7F6C, 0, 0);
}

uint64_t sub_1009E7F6C()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(v0 + 56));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1009E7FA0(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v7;

  v2 = Logger.logObject.getter(a1);
  v3 = static os_log_type_t.default.getter(v2);
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc(12, -1);
    v5 = swift_slowAlloc(32, -1);
    v7 = v5;
    *(_DWORD *)v4 = 136446210;
    *(_QWORD *)(v1 + 16) = sub_100016940(0xD000000000000020, 0x8000000100EEC070, &v7);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 16, v1 + 24, v4 + 4, v4 + 12);
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "CloudKit is available. %{public}s", v4, 0xCu);
    swift_arrayDestroy(v5, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v5, -1, -1);
    swift_slowDealloc(v4, -1, -1);
  }

  swift_task_dealloc(*(_QWORD *)(v1 + 56));
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_1009E80E8(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;

  *(_BYTE *)(v3 + 496) = a2;
  *(_QWORD *)(v3 + 192) = a1;
  *(_QWORD *)(v3 + 200) = v2;
  v4 = type metadata accessor for CloudKitCoordinator.Database(0);
  *(_QWORD *)(v3 + 208) = v4;
  v5 = *(_QWORD *)(v4 - 8);
  *(_QWORD *)(v3 + 216) = v5;
  *(_QWORD *)(v3 + 224) = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10001A9A8(&qword_10110F6F8);
  *(_QWORD *)(v3 + 232) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for UUID(0);
  *(_QWORD *)(v3 + 240) = v7;
  v8 = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v3 + 248) = v8;
  *(_QWORD *)(v3 + 256) = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10001A9A8((uint64_t *)&unk_1010EDC50);
  *(_QWORD *)(v3 + 264) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for LocalFindableAccessoryRecord(0);
  *(_QWORD *)(v3 + 272) = v10;
  v11 = *(_QWORD *)(v10 - 8);
  *(_QWORD *)(v3 + 280) = v11;
  *(_QWORD *)(v3 + 288) = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10001A9A8(&qword_1010EF7C0);
  *(_QWORD *)(v3 + 296) = v12;
  v13 = *(_QWORD *)(v12 - 8);
  *(_QWORD *)(v3 + 304) = v13;
  v14 = *(_QWORD *)(v13 + 64);
  *(_QWORD *)(v3 + 312) = v14;
  v15 = (v14 + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v3 + 320) = swift_task_alloc(v15);
  *(_QWORD *)(v3 + 328) = swift_task_alloc(v15);
  *(_QWORD *)(v3 + 336) = swift_task_alloc(v15);
  return swift_task_switch(sub_1009E8230, v2, 0);
}

uint64_t sub_1009E8230()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  _BOOL4 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  void (*v18)(uint64_t, uint64_t);
  uint64_t v19;
  uint64_t My;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  _QWORD *v25;
  uint64_t (*v26)(void);
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  os_log_type_t type;
  uint64_t (*v43)(void);
  uint64_t v44[2];

  v1 = (_QWORD *)(v0 + 16);
  if (qword_1010EA100 != -1)
    swift_once(&qword_1010EA100, sub_1009B44BC);
  v2 = *(_QWORD *)(v0 + 192);
  v3 = *(_QWORD *)(v0 + 336);
  v5 = *(_QWORD *)(v0 + 296);
  v4 = *(_QWORD *)(v0 + 304);
  v6 = type metadata accessor for Logger(0);
  *(_QWORD *)(v0 + 344) = sub_10001A9E8(v6, (uint64_t)qword_10110F2A8);
  v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  *(_QWORD *)(v0 + 352) = v7;
  v8 = v7(v3, v2, v5);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.default.getter(v9);
  v11 = os_log_type_enabled(v9, v10);
  v12 = *(_QWORD *)(v0 + 336);
  v13 = *(_QWORD *)(v0 + 296);
  if (v11)
  {
    type = v10;
    v40 = *(_QWORD *)(v0 + 304);
    v14 = swift_slowAlloc(22, -1);
    v41 = swift_slowAlloc(64, -1);
    v44[0] = v41;
    *(_DWORD *)v14 = 136446466;
    *(_QWORD *)(v0 + 176) = sub_100016940(0xD00000000000003ALL, 0x8000000100EEBF50, v44);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 176, v0 + 184, v14 + 4, v14 + 12);
    *(_WORD *)(v14 + 12) = 2082;
    v15 = sub_1000193A4(&qword_1010EE1D0, &qword_1010EF7C0, (const char *)&protocol conformance descriptor for Identifier<A>);
    v16 = dispatch thunk of CustomStringConvertible.description.getter(v13, v15);
    *(_QWORD *)(v0 + 184) = sub_100016940(v16, v17, v44);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 184, v0 + 192, v14 + 14, v14 + 22);
    swift_bridgeObjectRelease();
    v18 = *(void (**)(uint64_t, uint64_t))(v40 + 8);
    v18(v12, v13);
    _os_log_impl((void *)&_mh_execute_header, v9, type, "%{public}s for %{public}s", (uint8_t *)v14, 0x16u);
    swift_arrayDestroy(v41, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v41, -1, -1);
    v19 = v14;
    v1 = (_QWORD *)(v0 + 16);
    swift_slowDealloc(v19, -1, -1);
  }
  else
  {
    v18 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v0 + 304) + 8);
    v18(*(_QWORD *)(v0 + 336), *(_QWORD *)(v0 + 296));
  }

  *(_QWORD *)(v0 + 360) = v18;
  My = type metadata accessor for Feature.FindMy(0);
  *(_QWORD *)(v0 + 40) = My;
  *(_QWORD *)(v0 + 48) = sub_100006204((unint64_t *)&qword_1010EE1B0, (uint64_t (*)(uint64_t))&type metadata accessor for Feature.FindMy, (uint64_t)&protocol conformance descriptor for Feature.FindMy);
  v21 = sub_100018F08(v1);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(My - 8) + 104))(v21, enum case for Feature.FindMy.lineUp(_:), My);
  LOBYTE(My) = isFeatureEnabled(_:)(v1);
  v22 = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
  if ((My & 1) == 0)
  {
    v27 = Logger.logObject.getter(v22);
    v28 = static os_log_type_t.error.getter(v27);
    if (os_log_type_enabled(v27, v28))
    {
      v29 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v29 = 0;
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "Feature.FindMy.lineUp is disabled!", v29, 2u);
      swift_slowDealloc(v29, -1, -1);
    }

    v30 = sub_100350CCC();
    v31 = swift_allocError(&type metadata for PencilPairingService.Error, v30, 0, 0);
    *(_OWORD *)v32 = xmmword_100E2E400;
    *(_BYTE *)(v32 + 16) = 3;
    swift_willThrow(v31);
    v33 = *(_QWORD *)(v0 + 328);
    v34 = *(_QWORD *)(v0 + 320);
    v35 = *(_QWORD *)(v0 + 288);
    v37 = *(_QWORD *)(v0 + 256);
    v36 = *(_QWORD *)(v0 + 264);
    v39 = *(_QWORD *)(v0 + 224);
    v38 = *(_QWORD *)(v0 + 232);
    swift_task_dealloc(*(_QWORD *)(v0 + 336));
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    swift_task_dealloc(v36);
    swift_task_dealloc(v37);
    swift_task_dealloc(v38);
    swift_task_dealloc(v39);
    v26 = *(uint64_t (**)(void))(v0 + 8);
    return v26();
  }
  v23 = qword_1010EA5B0;
  swift_retain();
  if (v23 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v0 + 136, 0, 0);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 96, &qword_1010EE220);
  if (*(_QWORD *)(v0 + 120))
  {
    sub_10000F9FC((__int128 *)(v0 + 96), v0 + 56);
    swift_release();
    sub_10001AA44((_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 80));
    v43 = (uint64_t (*)(void))((char *)&dword_1010EBC30 + dword_1010EBC30);
    v25 = (_QWORD *)swift_task_alloc(unk_1010EBC34);
    *(_QWORD *)(v0 + 368) = v25;
    *v25 = v0;
    v25[1] = sub_1009E86CC;
    v26 = v43;
    return v26();
  }
  __break(1u);
  return result;
}

uint64_t sub_1009E86CC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 368);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 200);
  *(_QWORD *)(*(_QWORD *)v1 + 376) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1009E872C, v3, 0);
}

uint64_t sub_1009E872C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v1 = (_QWORD *)(v0 + 56);
  if (*(_QWORD *)(v0 + 376))
  {
    v2 = *(_QWORD *)(v0 + 296);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    Identifier.id.getter(v2);
    return swift_task_switch(sub_1009E8958, *(_QWORD *)(v0 + 376), 0);
  }
  else
  {
    v4 = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    v5 = Logger.logObject.getter(v4);
    v6 = static os_log_type_t.error.getter(v5);
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc(12, -1);
      v8 = swift_slowAlloc(32, -1);
      v19 = v8;
      *(_DWORD *)v7 = 136446210;
      *(_QWORD *)(v0 + 160) = sub_100016940(0xD00000000000003ALL, 0x8000000100EEBF50, &v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 160, v0 + 168, v7 + 4, v7 + 12);
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "%{public}s No CloudStorageService available!", v7, 0xCu);
      swift_arrayDestroy(v8, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v8, -1, -1);
      swift_slowDealloc(v7, -1, -1);
    }

    v9 = sub_100350CCC();
    v10 = swift_allocError(&type metadata for PencilPairingService.Error, v9, 0, 0);
    *(_OWORD *)v11 = xmmword_100E2E420;
    *(_BYTE *)(v11 + 16) = 3;
    swift_willThrow(v10);
    v12 = *(_QWORD *)(v0 + 328);
    v13 = *(_QWORD *)(v0 + 320);
    v14 = *(_QWORD *)(v0 + 288);
    v16 = *(_QWORD *)(v0 + 256);
    v15 = *(_QWORD *)(v0 + 264);
    v18 = *(_QWORD *)(v0 + 224);
    v17 = *(_QWORD *)(v0 + 232);
    swift_task_dealloc(*(_QWORD *)(v0 + 336));
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1009E8958()
{
  uint64_t *v0;
  uint64_t **v1;

  v1 = (uint64_t **)swift_task_alloc(dword_10110CD9C);
  v0[48] = (uint64_t)v1;
  *v1 = v0;
  v1[1] = (uint64_t *)sub_1009E89AC;
  return sub_1008FBBC8(v0[33], v0[32]);
}

uint64_t sub_1009E89AC()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 384);
  *(_QWORD *)(*(_QWORD *)v1 + 392) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = v2[47];
    v5 = sub_1009E8D24;
  }
  else
  {
    v6 = v2[25];
    (*(void (**)(_QWORD, _QWORD))(v2[31] + 8))(v2[32], v2[30]);
    v5 = sub_1009E8A28;
    v4 = v6;
  }
  return swift_task_switch(v5, v4, 0);
}

uint64_t sub_1009E8A28()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  _BOOL4 v10;
  void (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v1 = *(_QWORD *)(v0 + 272);
  v2 = *(_QWORD *)(v0 + 264);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 280) + 48))(v2, 1, v1) == 1)
  {
    v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 352);
    v4 = *(_QWORD *)(v0 + 320);
    v5 = *(_QWORD *)(v0 + 296);
    v6 = *(_QWORD *)(v0 + 192);
    sub_100004048(v2, (uint64_t *)&unk_1010EDC50);
    v7 = v3(v4, v6, v5);
    v8 = Logger.logObject.getter(v7);
    v9 = static os_log_type_t.error.getter(v8);
    v10 = os_log_type_enabled(v8, v9);
    v11 = *(void (**)(uint64_t, uint64_t))(v0 + 360);
    v12 = *(_QWORD *)(v0 + 320);
    v13 = *(_QWORD *)(v0 + 296);
    if (v10)
    {
      v14 = (uint8_t *)swift_slowAlloc(12, -1);
      v15 = swift_slowAlloc(32, -1);
      v35 = v15;
      *(_DWORD *)v14 = 136446210;
      v16 = sub_1000193A4(&qword_1010EE1D0, &qword_1010EF7C0, (const char *)&protocol conformance descriptor for Identifier<A>);
      v17 = dispatch thunk of CustomStringConvertible.description.getter(v13, v16);
      *(_QWORD *)(v0 + 168) = sub_100016940(v17, v18, &v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 168, v0 + 176, v14 + 4, v14 + 12);
      swift_bridgeObjectRelease();
      v11(v12, v13);
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "No LocalFindableAccessoryRecord corresponds to peripheralIdentifier: %{public}s", v14, 0xCu);
      swift_arrayDestroy(v15, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v15, -1, -1);
      swift_slowDealloc(v14, -1, -1);
    }
    else
    {
      v11(*(_QWORD *)(v0 + 320), *(_QWORD *)(v0 + 296));
    }

    v25 = sub_100350CCC();
    v26 = swift_allocError(&type metadata for PencilPairingService.Error, v25, 0, 0);
    *(_OWORD *)v27 = xmmword_100E2E420;
    *(_BYTE *)(v27 + 16) = 3;
    swift_willThrow(v26);
    swift_release();
    v28 = *(_QWORD *)(v0 + 328);
    v29 = *(_QWORD *)(v0 + 320);
    v30 = *(_QWORD *)(v0 + 288);
    v32 = *(_QWORD *)(v0 + 256);
    v31 = *(_QWORD *)(v0 + 264);
    v34 = *(_QWORD *)(v0 + 224);
    v33 = *(_QWORD *)(v0 + 232);
    swift_task_dealloc(*(_QWORD *)(v0 + 336));
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v19 = *(_QWORD *)(v0 + 288);
    sub_1000126EC(v2, v19, type metadata accessor for LocalFindableAccessoryRecord);
    v20 = (uint64_t *)(v19 + *(int *)(v1 + 28));
    v21 = *v20;
    *(_QWORD *)(v0 + 400) = *v20;
    v22 = v20[1];
    *(_QWORD *)(v0 + 408) = v22;
    sub_10001BBBC(v21, v22);
    v23 = (_QWORD *)swift_task_alloc(dword_10110F704);
    *(_QWORD *)(v0 + 416) = v23;
    *v23 = v0;
    v23[1] = sub_1009E8E08;
    return sub_1009F4BF4(v21, v22);
  }
}

uint64_t sub_1009E8D24()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[25];
  (*(void (**)(_QWORD, _QWORD))(v0[31] + 8))(v0[32], v0[30]);
  return swift_task_switch(sub_1009E8D6C, v1, 0);
}

uint64_t sub_1009E8D6C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  swift_release(*(_QWORD *)(v0 + 376));
  v1 = *(_QWORD *)(v0 + 328);
  v2 = *(_QWORD *)(v0 + 320);
  v3 = *(_QWORD *)(v0 + 288);
  v5 = *(_QWORD *)(v0 + 256);
  v4 = *(_QWORD *)(v0 + 264);
  v7 = *(_QWORD *)(v0 + 224);
  v6 = *(_QWORD *)(v0 + 232);
  swift_task_dealloc(*(_QWORD *)(v0 + 336));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1009E8E08()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 416);
  *(_QWORD *)(*(_QWORD *)v1 + 424) = v0;
  swift_task_dealloc(v3);
  v4 = v2[50];
  v5 = v2[51];
  v6 = v2[25];
  sub_10001BC14(v4, v5);
  if (v0)
    v7 = sub_1009E95A8;
  else
    v7 = sub_1009E8E78;
  return swift_task_switch(v7, v6, 0);
}

uint64_t sub_1009E8E78()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[36];
  v2 = swift_task_alloc(32);
  v0[54] = v2;
  *(_QWORD *)(v2 + 16) = v1;
  return swift_task_switch(sub_1009E8EC0, v0[47], 0);
}

uint64_t sub_1009E8EC0()
{
  _QWORD *v0;
  _QWORD *v1;
  char *v3;

  v3 = (char *)&async function pointer to dispatch thunk of CloudKitStorage.changeSet(block:)
     + async function pointer to dispatch thunk of CloudKitStorage.changeSet(block:);
  v1 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of CloudKitStorage.changeSet(block:)
                                  + 1));
  v0[55] = v1;
  *v1 = v0;
  v1[1] = sub_1009E8F34;
  return ((uint64_t (*)(_QWORD, void *, _QWORD))v3)(v0[29], &unk_10110F710, v0[54]);
}

uint64_t sub_1009E8F34()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 440);
  *(_QWORD *)(*(_QWORD *)v1 + 448) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = v2[47];
    v5 = sub_1009E90D8;
  }
  else
  {
    v6 = v2[25];
    swift_task_dealloc(v2[54]);
    v5 = sub_1009E8FA8;
    v4 = v6;
  }
  return swift_task_switch(v5, v4, 0);
}

uint64_t sub_1009E8FA8()
{
  _QWORD *v0;

  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0[27] + 104))(v0[28], enum case for CloudKitCoordinator.Database.private(_:), v0[26]);
  return swift_task_switch(sub_1009E8FF8, v0[47], 0);
}

uint64_t sub_1009E8FF8()
{
  _QWORD *v0;
  _QWORD *v1;
  char *v3;

  v3 = (char *)&async function pointer to dispatch thunk of CloudKitStorage.apply(changeSet:database:)
     + async function pointer to dispatch thunk of CloudKitStorage.apply(changeSet:database:);
  v1 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of CloudKitStorage.apply(changeSet:database:)
                                  + 1));
  v0[57] = v1;
  *v1 = v0;
  v1[1] = sub_1009E9060;
  return ((uint64_t (*)(_QWORD, _QWORD))v3)(v0[29], v0[28]);
}

uint64_t sub_1009E9060()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 456);
  *(_QWORD *)(*(_QWORD *)v1 + 464) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = v2[47];
    v5 = sub_1009E936C;
  }
  else
  {
    v6 = v2[25];
    (*(void (**)(_QWORD, _QWORD))(v2[27] + 8))(v2[28], v2[26]);
    v5 = sub_1009E91C8;
    v4 = v6;
  }
  return swift_task_switch(v5, v4, 0);
}

uint64_t sub_1009E90D8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 200);
  swift_task_dealloc(*(_QWORD *)(v0 + 432));
  return swift_task_switch(sub_1009E9118, v1, 0);
}

uint64_t sub_1009E9118()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(_QWORD *)(v0 + 288);
  swift_release();
  sub_1000126B0(v1, type metadata accessor for LocalFindableAccessoryRecord);
  v2 = *(_QWORD *)(v0 + 328);
  v3 = *(_QWORD *)(v0 + 320);
  v4 = *(_QWORD *)(v0 + 288);
  v6 = *(_QWORD *)(v0 + 256);
  v5 = *(_QWORD *)(v0 + 264);
  v8 = *(_QWORD *)(v0 + 224);
  v7 = *(_QWORD *)(v0 + 232);
  swift_task_dealloc(*(_QWORD *)(v0 + 336));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1009E91C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  if (*(_BYTE *)(v0 + 496) == 1)
  {
    v1 = *(_QWORD *)(v0 + 328);
    v3 = *(_QWORD *)(v0 + 304);
    v2 = *(_QWORD *)(v0 + 312);
    v4 = *(_QWORD *)(v0 + 296);
    v5 = *(_QWORD *)(v0 + 200);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v0 + 352))(v1, *(_QWORD *)(v0 + 192), v4);
    v6 = *(unsigned __int8 *)(v3 + 80);
    v7 = (v6 + 24) & ~v6;
    v8 = swift_allocObject(&unk_1010A0F70, v7 + v2, v6 | 7);
    *(_QWORD *)(v0 + 472) = v8;
    *(_QWORD *)(v8 + 16) = v5;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v8 + v7, v1, v4);
    v9 = async function pointer to withTimeout<A>(_:block:)[1];
    swift_retain();
    v10 = (_QWORD *)swift_task_alloc(v9);
    *(_QWORD *)(v0 + 480) = v10;
    *v10 = v0;
    v10[1] = sub_1009E9474;
    return withTimeout<A>(_:block:)(v10, 0x40AAD21B3B700000, 3, &unk_10110F720, v8, &type metadata for () + 1);
  }
  else
  {
    sub_100004048(*(_QWORD *)(v0 + 232), &qword_10110F6F8);
    swift_release();
    v12 = *(_QWORD *)(v0 + 328);
    v13 = *(_QWORD *)(v0 + 336);
    v14 = *(_QWORD *)(v0 + 320);
    v15 = *(_QWORD *)(v0 + 288);
    v17 = *(_QWORD *)(v0 + 256);
    v16 = *(_QWORD *)(v0 + 264);
    v19 = *(_QWORD *)(v0 + 224);
    v18 = *(_QWORD *)(v0 + 232);
    sub_1000126B0(v15, type metadata accessor for LocalFindableAccessoryRecord);
    swift_task_dealloc(v13);
    swift_task_dealloc(v12);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1009E936C()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[25];
  (*(void (**)(_QWORD, _QWORD))(v0[27] + 8))(v0[28], v0[26]);
  return swift_task_switch(sub_1009E93B0, v1, 0);
}

uint64_t sub_1009E93B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *(_QWORD *)(v0 + 288);
  v2 = *(_QWORD *)(v0 + 232);
  swift_release();
  sub_100004048(v2, &qword_10110F6F8);
  sub_1000126B0(v1, type metadata accessor for LocalFindableAccessoryRecord);
  v3 = *(_QWORD *)(v0 + 328);
  v4 = *(_QWORD *)(v0 + 320);
  v5 = *(_QWORD *)(v0 + 288);
  v7 = *(_QWORD *)(v0 + 256);
  v6 = *(_QWORD *)(v0 + 264);
  v9 = *(_QWORD *)(v0 + 224);
  v8 = *(_QWORD *)(v0 + 232);
  swift_task_dealloc(*(_QWORD *)(v0 + 336));
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1009E9474()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 480);
  *(_QWORD *)(*v1 + 488) = v0;
  swift_task_dealloc(v3);
  v4 = *(_QWORD *)(v2 + 200);
  swift_release();
  if (v0)
    v5 = sub_1009E9658;
  else
    v5 = sub_1009E94E4;
  return swift_task_switch(v5, v4, 0);
}

uint64_t sub_1009E94E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *(_QWORD *)(v0 + 232);
  swift_release();
  sub_100004048(v1, &qword_10110F6F8);
  v2 = *(_QWORD *)(v0 + 328);
  v3 = *(_QWORD *)(v0 + 336);
  v4 = *(_QWORD *)(v0 + 320);
  v5 = *(_QWORD *)(v0 + 288);
  v7 = *(_QWORD *)(v0 + 256);
  v6 = *(_QWORD *)(v0 + 264);
  v9 = *(_QWORD *)(v0 + 224);
  v8 = *(_QWORD *)(v0 + 232);
  sub_1000126B0(v5, type metadata accessor for LocalFindableAccessoryRecord);
  swift_task_dealloc(v3);
  swift_task_dealloc(v2);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1009E95A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(_QWORD *)(v0 + 288);
  swift_release();
  sub_1000126B0(v1, type metadata accessor for LocalFindableAccessoryRecord);
  v2 = *(_QWORD *)(v0 + 328);
  v3 = *(_QWORD *)(v0 + 320);
  v4 = *(_QWORD *)(v0 + 288);
  v6 = *(_QWORD *)(v0 + 256);
  v5 = *(_QWORD *)(v0 + 264);
  v8 = *(_QWORD *)(v0 + 224);
  v7 = *(_QWORD *)(v0 + 232);
  swift_task_dealloc(*(_QWORD *)(v0 + 336));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1009E9658()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *(_QWORD *)(v0 + 288);
  v2 = *(_QWORD *)(v0 + 232);
  swift_release();
  sub_100004048(v2, &qword_10110F6F8);
  sub_1000126B0(v1, type metadata accessor for LocalFindableAccessoryRecord);
  v3 = *(_QWORD *)(v0 + 328);
  v4 = *(_QWORD *)(v0 + 320);
  v5 = *(_QWORD *)(v0 + 288);
  v7 = *(_QWORD *)(v0 + 256);
  v6 = *(_QWORD *)(v0 + 264);
  v9 = *(_QWORD *)(v0 + 224);
  v8 = *(_QWORD *)(v0 + 232);
  swift_task_dealloc(*(_QWORD *)(v0 + 336));
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1009E971C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v3[13] = a2;
  v3[14] = v2;
  v3[12] = a1;
  v4 = type metadata accessor for Date(0);
  v3[15] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[16] = v5;
  v3[17] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for PencilPairingLockCheckResponse(0);
  v3[18] = v6;
  v7 = (*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[19] = swift_task_alloc(v7);
  v3[20] = swift_task_alloc(v7);
  return swift_task_switch(sub_1009E97B4, v2, 0);
}

uint64_t sub_1009E97B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  if (qword_1010EA1D0 != -1)
    swift_once(&qword_1010EA1D0, sub_100B11444);
  *(_QWORD *)(v0 + 48) = 0x7365547265646E75;
  *(_QWORD *)(v0 + 56) = 0xE900000000000074;
  SynchronousCache.cachedValue<A>(key:computeBlock:)((_QWORD *)(v0 + 184), v0 + 48, sub_10001F628, 0, &type metadata for Bool);
  swift_bridgeObjectRelease();
  if (*(_BYTE *)(v0 + 184) == 1)
  {
    v1 = *(_QWORD *)(v0 + 160);
    v2 = *(_QWORD *)(v0 + 136);
    v3 = *(int **)(v0 + 144);
    v27 = *(_QWORD *)(v0 + 128);
    v28 = *(_QWORD *)(v0 + 120);
    v26 = *(_QWORD *)(v0 + 112);
    v4 = *(_QWORD *)(v0 + 104);
    v29 = *(_QWORD *)(v0 + 96);
    *(_OWORD *)(v0 + 16) = *(_OWORD *)(v4 + 80);
    *(_OWORD *)(v0 + 32) = *(_OWORD *)(v4 + 96);
    v5 = type metadata accessor for __DataStorage(0);
    swift_allocObject(v5, *(unsigned int *)(v5 + 48), *(unsigned __int16 *)(v5 + 52));
    sub_100059DE8(v0 + 16);
    sub_100059DE8(v0 + 32);
    v30 = 0x2000000000;
    v31 = __DataStorage.init(length:)(32);
    sub_10051ED28((int *)&v30, 17);
    v25 = v30;
    v6 = v31 | 0x4000000000000000;
    swift_allocObject(v5, *(unsigned int *)(v5 + 48), *(unsigned __int16 *)(v5 + 52));
    v7 = __DataStorage.init(length:)(100);
    v30 = 0x6400000000;
    v31 = v7;
    sub_10051ED28((int *)&v30, 34);
    v8 = v30;
    v9 = v31 | 0x4000000000000000;
    UUID.init()(v10);
    swift_allocObject(v5, *(unsigned int *)(v5 + 48), *(unsigned __int16 *)(v5 + 52));
    v11 = __DataStorage.init(length:)(32);
    v30 = 0x2000000000;
    v31 = v11;
    sub_10051ED28((int *)&v30, 85);
    v12 = v30;
    v13 = v31 | 0x4000000000000000;
    *(_OWORD *)v1 = *(_OWORD *)(v0 + 16);
    *(_OWORD *)(v1 + 16) = *(_OWORD *)(v0 + 32);
    *(_QWORD *)(v1 + 32) = v25;
    *(_QWORD *)(v1 + 40) = v6;
    *(_QWORD *)(v1 + 48) = v8;
    *(_QWORD *)(v1 + 56) = v9;
    v14 = (_QWORD *)(v1 + v3[9]);
    *v14 = 0xD000000000000011;
    v14[1] = 0x8000000100EC6550;
    v15 = (uint64_t *)(v1 + v3[10]);
    *v15 = v12;
    v15[1] = v13;
    *(_QWORD *)(v1 + v3[11]) = 0;
    v16 = *(_QWORD *)(v26 + 160);
    v17 = swift_retain();
    v18 = Date.init()(v17);
    v19 = Date.epoch.getter(v18);
    (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v2, v28);
    *(_QWORD *)(v16 + 32) = v19;
    swift_release();
    sub_1000126EC(v1, v29, type metadata accessor for PencilPairingLockCheckResponse);
    v20 = sub_10001A9A8(&qword_10110F820);
    swift_storeEnumTagMultiPayload(v29, v20, 0);
    v21 = *(_QWORD *)(v0 + 152);
    v22 = *(_QWORD *)(v0 + 136);
    swift_task_dealloc(*(_QWORD *)(v0 + 160));
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v24 = (_QWORD *)swift_task_alloc(dword_1010F836C);
    *(_QWORD *)(v0 + 168) = v24;
    *v24 = v0;
    v24[1] = sub_1009E9AF0;
    return sub_1003462E8(*(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 104));
  }
}

uint64_t sub_1009E9AF0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 168);
  *(_QWORD *)(*v1 + 176) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_1009E9BCC;
  else
    v4 = sub_1009E9B54;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 112), 0);
}

uint64_t sub_1009E9B54()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 96);
  sub_1000126EC(*(_QWORD *)(v0 + 152), v1, type metadata accessor for PencilPairingLockCheckResponse);
  v2 = sub_10001A9A8(&qword_10110F820);
  swift_storeEnumTagMultiPayload(v1, v2, 0);
  v3 = *(_QWORD *)(v0 + 152);
  v4 = *(_QWORD *)(v0 + 136);
  swift_task_dealloc(*(_QWORD *)(v0 + 160));
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1009E9BCC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v1 = *(_QWORD *)(v0 + 176);
  *(_QWORD *)(v0 + 64) = v1;
  swift_errorRetain(v1);
  v2 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
  type metadata accessor for SPPairingSessionError(0);
  v4 = v3;
  if ((swift_dynamicCast(v0 + 72, v0 + 64, v2, v3, 6) & 1) != 0)
  {
    v5 = *(_QWORD **)(v0 + 96);
    swift_errorRelease(*(_QWORD *)(v0 + 176));
    *v5 = *(_QWORD *)(v0 + 72);
    v6 = sub_10001A9A8(&qword_10110F820);
    v7 = v5;
  }
  else
  {
    *(_QWORD *)(v0 + 88) = 7;
    v8 = *(_QWORD *)(v0 + 176);
    v9 = *(_QWORD **)(v0 + 96);
    v10 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
    v11 = sub_100006204(&qword_1010EB450, (uint64_t (*)(uint64_t))type metadata accessor for SPPairingSessionError, (uint64_t)&unk_100E217DC);
    _BridgedStoredNSError.init(_:userInfo:)((_QWORD *)(v0 + 80), v0 + 88, v10, v4, v11);
    swift_errorRelease(v8);
    *v9 = *(_QWORD *)(v0 + 80);
    v6 = sub_10001A9A8(&qword_10110F820);
    v7 = v9;
  }
  swift_storeEnumTagMultiPayload(v7, v6, 1);
  v12 = *(_QWORD *)(v0 + 152);
  v13 = *(_QWORD *)(v0 + 136);
  swift_task_dealloc(*(_QWORD *)(v0 + 160));
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1009E9D20(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  unint64_t v4;

  v3[46] = a1;
  v3[47] = a2;
  v4 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for PencilPairingLockCheckResponse(0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[48] = swift_task_alloc(v4);
  v3[49] = swift_task_alloc(v4);
  return swift_task_switch(sub_1009E9D88, v2, 0);
}

uint64_t sub_1009E9D88()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  _BOOL4 v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  __int128 v20;
  __int128 v21;

  if (qword_1010EA100 != -1)
    swift_once(&qword_1010EA100, sub_1009B44BC);
  v1 = *(_QWORD *)(v0 + 384);
  v2 = *(_QWORD *)(v0 + 392);
  v3 = *(_QWORD *)(v0 + 376);
  v4 = type metadata accessor for Logger(0);
  sub_10001A9E8(v4, (uint64_t)qword_10110F2A8);
  sub_10005972C(v3, v2, type metadata accessor for PencilPairingLockCheckResponse);
  v5 = sub_10005972C(v3, v1, type metadata accessor for PencilPairingLockCheckResponse);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.default.getter(v6);
  v8 = os_log_type_enabled(v6, v7);
  v9 = *(_QWORD *)(v0 + 392);
  if (v8)
  {
    v10 = (_DWORD *)swift_slowAlloc(22, -1);
    swift_slowAlloc(32, -1);
    *v10 = 134218242;
    __asm { BR              X12 }
  }
  v11 = *(_QWORD *)(v0 + 384);
  sub_1000126B0(*(_QWORD *)(v0 + 392), type metadata accessor for PencilPairingLockCheckResponse);
  sub_1000126B0(v11, type metadata accessor for PencilPairingLockCheckResponse);

  v13 = *(_QWORD *)(v0 + 384);
  v12 = *(_QWORD *)(v0 + 392);
  v15 = *(_QWORD *)(v0 + 368);
  v14 = *(_QWORD **)(v0 + 376);
  v16 = v14[4];
  v17 = v14[5];
  v18 = v14[6];
  v19 = v14[7];
  sub_10001BBBC(v16, v17);
  sub_10001BBBC(v18, v19);
  sub_10098EF08(v16, v17);
  v20 = *(_OWORD *)(v0 + 320);
  *(_OWORD *)(v0 + 160) = *(_OWORD *)(v0 + 304);
  v21 = *(_OWORD *)(v0 + 336);
  *(_OWORD *)(v0 + 176) = v20;
  *(_OWORD *)(v0 + 192) = v21;
  sub_10015D764((_QWORD *)(v0 + 160));
  sub_10015BAD8((_OWORD *)(v0 + 160), (_OWORD *)(v0 + 16));
  SharingCircleWildAdvertisementKey.init(key:)(v0 + 16);
  sub_100005CF0(v0 + 16, v15, &qword_10110F7A8);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1009EA0A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v3[2] = a1;
  v5 = sub_10001A9A8(&qword_1010EC638);
  v3[3] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v3[4] = v6;
  v7 = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v3[5] = v7;
  v8 = type metadata accessor for Characteristic(0);
  v9 = sub_100006204(&qword_1010EC4C0, (uint64_t (*)(uint64_t))&type metadata accessor for Characteristic, (uint64_t)&protocol conformance descriptor for Characteristic);
  v10 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of CharacteristicProtocol.write(data:)[1]);
  v3[6] = v10;
  *v10 = v3;
  v10[1] = sub_1009EA17C;
  return dispatch thunk of CharacteristicProtocol.write(data:)(v7, a3, v8, v9);
}

uint64_t sub_1009EA17C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v5;
  uint64_t v6;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 48);
  v3 = *(_QWORD **)v1;
  v3[7] = v0;
  swift_task_dealloc(v2);
  if (v0)
    return swift_task_switch(sub_1009F9DFC, 0, 0);
  v5 = (_QWORD *)swift_task_alloc(async function pointer to AsyncSequence<>.reassemble()[1]);
  v3[8] = v5;
  v6 = sub_1000193A4((unint64_t *)&unk_101116020, &qword_1010EC638, (const char *)&protocol conformance descriptor for AsyncThrowingStream<A, B>);
  *v5 = v3;
  v5[1] = sub_1009EA240;
  return AsyncSequence<>.reassemble()(v3[3], v6);
}

uint64_t sub_1009EA240(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)();

  v6 = *(_QWORD **)v3;
  v7 = *(_QWORD *)(*(_QWORD *)v3 + 64);
  *(_QWORD *)(*(_QWORD *)v3 + 72) = v2;
  swift_task_dealloc(v7);
  v9 = v6[4];
  v8 = v6[5];
  v10 = v6[3];
  if (v2)
  {
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
    v11 = sub_1009F9E00;
  }
  else
  {
    v6[10] = a2;
    v6[11] = a1;
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
    v11 = sub_1009F9E08;
  }
  return swift_task_switch(v11, 0, 0);
}

uint64_t sub_1009EA2D0(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2[42] = a1;
  v2[43] = v1;
  v3 = type metadata accessor for BinaryDecoder(0);
  v2[44] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[45] = v4;
  v2[46] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for BinaryEncoder(0);
  v2[47] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v2[48] = v6;
  v2[49] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10001A9A8((uint64_t *)&unk_101115F50);
  v2[50] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v2[51] = v8;
  v2[52] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10001A9A8(&qword_1010EC448);
  v2[53] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v2[54] = v10;
  v2[55] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10001A9A8(&qword_1010EF7C0);
  v2[56] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v2[57] = v12;
  v2[58] = swift_task_alloc((*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1009EA3DC, v1, 0);
}

uint64_t sub_1009EA3DC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v20;
  uint64_t v21;

  if (qword_1010EA100 != -1)
    swift_once(&qword_1010EA100, sub_1009B44BC);
  v1 = type metadata accessor for Logger(0);
  v0[59] = sub_10001A9E8(v1, (uint64_t)qword_10110F2A8);
  v2 = swift_retain();
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = v0[58];
    v20 = v0[57];
    v6 = v0[56];
    v7 = swift_slowAlloc(22, -1);
    v8 = swift_slowAlloc(64, -1);
    v21 = v8;
    *(_DWORD *)v7 = 136446466;
    v0[41] = sub_100016940(0xD000000000000015, 0x8000000100EEC180, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 41, v0 + 42, v7 + 4, v7 + 12);
    *(_WORD *)(v7 + 12) = 2082;
    v9 = type metadata accessor for Peripheral(0);
    v10 = sub_100006204(&qword_1010EC4A0, (uint64_t (*)(uint64_t))&type metadata accessor for Peripheral, (uint64_t)&protocol conformance descriptor for Peripheral);
    dispatch thunk of PeripheralProtocol.id.getter(v9, v10);
    v11 = sub_1000193A4(&qword_1010EE1D0, &qword_1010EF7C0, (const char *)&protocol conformance descriptor for Identifier<A>);
    v12 = dispatch thunk of CustomStringConvertible.description.getter(v6, v11);
    v14 = v13;
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v5, v6);
    v0[27] = sub_100016940(v12, v14, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 27, v0 + 28, v7 + 14, v7 + 22);
    swift_bridgeObjectRelease();
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "%{public}s for %{public}s", (uint8_t *)v7, 0x16u);
    swift_arrayDestroy(v8, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v7, -1, -1);
  }
  else
  {
    swift_release();
  }

  v15 = type metadata accessor for Service(0);
  v0[60] = v15;
  Identifier.init(stringLiteral:)("FD44", 4, 2, v15);
  v16 = type metadata accessor for Peripheral(0);
  v0[61] = v16;
  v17 = sub_100006204(&qword_1010EC4A0, (uint64_t (*)(uint64_t))&type metadata accessor for Peripheral, (uint64_t)&protocol conformance descriptor for Peripheral);
  v0[62] = v17;
  v18 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of PeripheralProtocol.subscript.getter[1]);
  v0[63] = v18;
  *v18 = v0;
  v18[1] = sub_1009EA6F4;
  return dispatch thunk of PeripheralProtocol.subscript.getter(v0[55], v16, v17);
}

uint64_t sub_1009EA6F4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)();

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 504);
  v3[64] = a1;
  v3[65] = v1;
  swift_task_dealloc(v4);
  v6 = v3[54];
  v5 = v3[55];
  v7 = v3[53];
  v8 = v3[43];
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  if (v1)
    v9 = sub_1009EA8B8;
  else
    v9 = sub_1009EA778;
  return swift_task_switch(v9, v8, 0);
}

uint64_t sub_1009EA778()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = type metadata accessor for Characteristic(0);
  v0[66] = v1;
  Identifier.init(stringLiteral:)("4F860002-943B-49EF-BED4-2F730304427A", 36, 2, v1);
  v2 = sub_100006204(&qword_1010EC4A8, (uint64_t (*)(uint64_t))&type metadata accessor for Service, (uint64_t)&protocol conformance descriptor for Service);
  v3 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of ServiceProtocol.subscript.getter[1]);
  v0[67] = v3;
  *v3 = v0;
  v3[1] = sub_1009EA820;
  return dispatch thunk of ServiceProtocol.subscript.getter(v0[52], v0[60], v2);
}

uint64_t sub_1009EA820(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 536);
  v3[68] = a1;
  v3[69] = v1;
  swift_task_dealloc(v4);
  v6 = v3[51];
  v5 = v3[52];
  v7 = v3[50];
  v8 = v3[43];
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  swift_release();
  if (v1)
    v9 = sub_1009EACD4;
  else
    v9 = sub_1009EA92C;
  return swift_task_switch(v9, v8, 0);
}

uint64_t sub_1009EA8B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 440);
  v2 = *(_QWORD *)(v0 + 416);
  v3 = *(_QWORD *)(v0 + 392);
  v4 = *(_QWORD *)(v0 + 368);
  swift_task_dealloc(*(_QWORD *)(v0 + 464));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1009EA92C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  __int128 *v12;
  const char *v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint8_t *v18;
  uint64_t v19;
  __int128 v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36[2];

  v2 = v1 + 16;
  v3 = Logger.logObject.getter(a1);
  v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = swift_slowAlloc(32, -1);
    v36[0] = v6;
    *(_DWORD *)v5 = 136446210;
    *(_QWORD *)(v1 + 320) = sub_100016940(0xD000000000000015, 0x8000000100EEC180, v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 320, v1 + 328, v5 + 4, v5 + 12);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "%{public}s Discovered FindMy services and Config characteristic.", v5, 0xCu);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);
  }

  v8 = BinaryEncoder.init()(v7);
  v9 = BinaryDecoder.init()(v8);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.default.getter(v10);
  v12 = &xmmword_100E3F000;
  v13 = "Code";
  if (os_log_type_enabled(v10, v11))
  {
    v14 = (uint8_t *)swift_slowAlloc(12, -1);
    v15 = swift_slowAlloc(32, -1);
    *(_DWORD *)v14 = 136446210;
    v36[0] = v15;
    *(_OWORD *)(v1 + 112) = xmmword_100E3F000;
    *(_OWORD *)(v1 + 128) = xmmword_100E22B30;
    v16 = String.init<A>(describing:)(v1 + 112, &type metadata for AccessoryConfigCommand);
    *(_QWORD *)(v1 + 312) = sub_100016940(v16, v17, v36);
    v2 = v1 + 16;
    v13 = "Code";
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 312, v1 + 320, v14 + 4, v14 + 12);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Sending .unpair command: %{public}s", v14, 0xCu);
    swift_arrayDestroy(v15, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v15, -1, -1);
    v18 = v14;
    v12 = &xmmword_100E3F000;
    swift_slowDealloc(v18, -1, -1);
  }

  v19 = *(_QWORD *)(v1 + 552);
  v20 = *((_OWORD *)v13 + 179);
  *(_OWORD *)(v1 + 16) = *v12;
  *(_OWORD *)(v1 + 32) = v20;
  v21 = sub_10046DAB8();
  *(_QWORD *)(v1 + 560) = BinaryEncoder.encode<A>(_:)(v2, &type metadata for AccessoryConfigCommand, v21);
  *(_QWORD *)(v1 + 568) = v22;
  if (v19)
  {
    v24 = *(_QWORD *)(v1 + 384);
    v23 = *(_QWORD *)(v1 + 392);
    v26 = *(_QWORD *)(v1 + 368);
    v25 = *(_QWORD *)(v1 + 376);
    v27 = *(_QWORD *)(v1 + 352);
    v28 = *(_QWORD *)(v1 + 360);
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v26, v27);
    (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v23, v25);
    v29 = *(_QWORD *)(v1 + 440);
    v30 = *(_QWORD *)(v1 + 416);
    v31 = *(_QWORD *)(v1 + 392);
    v32 = *(_QWORD *)(v1 + 368);
    swift_task_dealloc(*(_QWORD *)(v1 + 464));
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
  else
  {
    v34 = sub_100006204(&qword_1010EC4C0, (uint64_t (*)(uint64_t))&type metadata accessor for Characteristic, (uint64_t)&protocol conformance descriptor for Characteristic);
    v35 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of CharacteristicProtocol.mtu.getter[1]);
    *(_QWORD *)(v1 + 576) = v35;
    *v35 = v1;
    v35[1] = sub_1009EAD48;
    return dispatch thunk of CharacteristicProtocol.mtu.getter(*(_QWORD *)(v1 + 528), v34);
  }
}

uint64_t sub_1009EACD4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 440);
  v2 = *(_QWORD *)(v0 + 416);
  v3 = *(_QWORD *)(v0 + 392);
  v4 = *(_QWORD *)(v0 + 368);
  swift_task_dealloc(*(_QWORD *)(v0 + 464));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1009EAD48(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 576);
  *(_QWORD *)(*v2 + 584) = v1;
  swift_task_dealloc(v5);
  v6 = *(_QWORD *)(v4 + 344);
  if (v1)
  {
    v7 = sub_1009EAEF0;
  }
  else
  {
    *(_QWORD *)(v4 + 592) = a1;
    v7 = sub_1009EADBC;
  }
  return swift_task_switch(v7, v6, 0);
}

uint64_t sub_1009EADBC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v1 = v0[68];
  v2 = fragment(data:mtu:)(v0[70], v0[71], v0[74]);
  v3 = swift_allocObject(&unk_1010A1180, 32, 7);
  v0[75] = v3;
  *(_QWORD *)(v3 + 16) = v1;
  *(_QWORD *)(v3 + 24) = v2;
  v4 = async function pointer to withTimeout<A>(_:block:)[1];
  swift_retain();
  v5 = (_QWORD *)swift_task_alloc(v4);
  v0[76] = v5;
  *v5 = v0;
  v5[1] = sub_1009EAE80;
  return withTimeout<A>(_:block:)(v0 + 22, 0x40AAD21B3B700000, 3, &unk_10110F8B8, v3, &type metadata for Data);
}

uint64_t sub_1009EAE80()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 608);
  *(_QWORD *)(*v1 + 616) = v0;
  swift_task_dealloc(v3);
  v4 = *(_QWORD *)(v2 + 344);
  swift_release();
  if (v0)
    v5 = sub_1009EC1BC;
  else
    v5 = sub_1009EAFB0;
  return swift_task_switch(v5, v4, 0);
}

uint64_t sub_1009EAEF0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(_QWORD *)(v0 + 384);
  v1 = *(_QWORD *)(v0 + 392);
  v4 = *(_QWORD *)(v0 + 368);
  v3 = *(_QWORD *)(v0 + 376);
  v5 = *(_QWORD *)(v0 + 352);
  v6 = *(_QWORD *)(v0 + 360);
  sub_10001BC14(*(_QWORD *)(v0 + 560), *(_QWORD *)(v0 + 568));
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v7 = *(_QWORD *)(v0 + 440);
  v8 = *(_QWORD *)(v0 + 416);
  v9 = *(_QWORD *)(v0 + 392);
  v10 = *(_QWORD *)(v0 + 368);
  swift_task_dealloc(*(_QWORD *)(v0 + 464));
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1009EAFB0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  _DWORD *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  int v51;
  unsigned __int8 v52;
  uint64_t v53;
  NSObject *v54;
  os_log_type_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void (*v72)(uint64_t, uint64_t);
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  NSObject *v86;
  os_log_type_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  unsigned __int8 v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t (*v112)(void);
  NSObject *v114;
  os_log_type_t v115;
  uint8_t *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  os_log_t log;
  os_log_t loga;
  os_log_t logb;
  os_log_type_t typea;
  os_log_type_t typeb[8];
  uint64_t type;
  os_log_type_t typec[8];
  os_log_type_t v141[8];
  os_log_type_t v142[8];
  os_log_type_t v143[8];
  os_log_type_t v144;
  os_log_type_t v145[8];
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160[2];

  v151 = v1 + 288;
  v2 = *(_QWORD *)(v1 + 176);
  v3 = *(_QWORD *)(v1 + 184);
  v4 = Logger.logObject.getter(a1);
  v5 = static os_log_type_t.info.getter(v4);
  v156 = v1 + 304;
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    *(_OWORD *)(v159 + 144) = xmmword_100E3F000;
    *(_DWORD *)v6 = 136446210;
    v160[0] = v7;
    *(_OWORD *)(v159 + 160) = xmmword_100E22B30;
    v8 = String.init<A>(describing:)(v159 + 144, &type metadata for AccessoryConfigCommand);
    *(_QWORD *)(v159 + 296) = sub_100016940(v8, v9, v160);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v159 + 296, v156, v6 + 4, v6 + 12);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Sent command: %{public}s.", v6, 0xCu);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);
  }

  sub_10001BBBC(v2, v3);
  v10 = sub_10001BBBC(v2, v3);
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.default.getter(v11);
  if (os_log_type_enabled(v11, v12))
  {
    v13 = (_DWORD *)swift_slowAlloc(22, -1);
    v160[0] = swift_slowAlloc(32, -1);
    *v13 = 134218242;
    __asm { BR              X10 }
  }
  sub_10001BC14(v2, v3);
  sub_10001BC14(v2, v3);

  v14 = *(_QWORD *)(v159 + 616);
  v15 = sub_10046DA74();
  BinaryDecoder.decode<A>(_:from:)(&type metadata for AccessoryConfigCommand, v2, v3, &type metadata for AccessoryConfigCommand, v15);
  if (v14)
  {
    v17 = *(_QWORD *)(v159 + 384);
    v16 = *(_QWORD *)(v159 + 392);
    v19 = *(_QWORD *)(v159 + 368);
    v18 = *(_QWORD *)(v159 + 376);
    v20 = v3;
    v21 = *(_QWORD *)(v159 + 352);
    v22 = *(_QWORD *)(v159 + 360);
    sub_10001BC14(*(_QWORD *)(v159 + 560), *(_QWORD *)(v159 + 568));
    sub_10001BC14(v2, v20);
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v19, v21);
    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v16, v18);
LABEL_33:
    v108 = *(_QWORD *)(v159 + 440);
    v109 = *(_QWORD *)(v159 + 416);
    v110 = *(_QWORD *)(v159 + 392);
    v111 = *(_QWORD *)(v159 + 368);
    swift_task_dealloc(*(_QWORD *)(v159 + 464));
    swift_task_dealloc(v108);
    swift_task_dealloc(v109);
    swift_task_dealloc(v110);
    swift_task_dealloc(v111);
    v112 = *(uint64_t (**)(void))(v159 + 8);
    return v112();
  }
  v24 = *(_QWORD *)(v159 + 48);
  v23 = *(_QWORD *)(v159 + 56);
  v26 = *(_QWORD *)(v159 + 64);
  v25 = *(_QWORD *)(v159 + 72);
  v148 = v2;
  v149 = v3;
  v150 = v26;
  v147 = v23;
  *(_QWORD *)v141 = v159 + 200;
  v146 = v24;
  if (((v25 >> 59) & 6 | ((v23 & 0x2000000000000000) != 0)) != 1)
  {
    swift_retain();
    sub_1001E9684(v24, v23, v26, v25, sub_10001BBBC);
    swift_retain();
    v40 = sub_1001E9684(v24, v23, v26, v25, sub_10001BBBC);
    v41 = Logger.logObject.getter(v40);
    v42 = static os_log_type_t.error.getter(v41);
    if (os_log_type_enabled(v41, v42))
    {
      typea = v42;
      v122 = *(_QWORD *)(v159 + 488);
      v124 = *(_QWORD *)(v159 + 496);
      v43 = *(_QWORD *)(v159 + 464);
      v128 = *(_QWORD *)(v159 + 456);
      v126 = *(_QWORD *)(v159 + 448);
      v44 = swift_slowAlloc(32, -1);
      log = (os_log_t)swift_slowAlloc(64, -1);
      v160[0] = (uint64_t)log;
      *(_DWORD *)v44 = 136446723;
      *(_QWORD *)(v159 + 80) = v24;
      *(_QWORD *)(v159 + 88) = v23;
      *(_QWORD *)(v159 + 96) = v26;
      *(_QWORD *)(v159 + 104) = v25;
      sub_1001E9684(v24, v23, v26, v25, sub_10001BBBC);
      v45 = String.init<A>(describing:)(v159 + 80, &type metadata for AccessoryConfigCommand);
      *(_QWORD *)(v159 + 304) = sub_100016940(v45, v46, v160);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v156, v159 + 312, v44 + 4, v44 + 12);
      swift_bridgeObjectRelease();
      sub_1001E9684(v24, v23, v26, v25, sub_10001BC14);
      sub_1001E9684(v24, v23, v26, v25, sub_10001BC14);
      *(_WORD *)(v44 + 12) = 2160;
      *(_QWORD *)(v159 + 288) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v151, v159 + 296, v44 + 14, v44 + 22);
      *(_WORD *)(v44 + 22) = 2081;
      dispatch thunk of PeripheralProtocol.id.getter(v122, v124);
      swift_release();
      v47 = sub_1000193A4(&qword_1010EE1D0, &qword_1010EF7C0, (const char *)&protocol conformance descriptor for Identifier<A>);
      v48 = dispatch thunk of CustomStringConvertible.description.getter(v126, v47);
      v50 = v49;
      (*(void (**)(uint64_t, uint64_t))(v128 + 8))(v43, v126);
      *(_QWORD *)(v159 + 192) = sub_100016940(v48, v50, v160);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v159 + 192, *(_QWORD *)v141, v44 + 24, v44 + 32);
      swift_bridgeObjectRelease();
      swift_release();
      _os_log_impl((void *)&_mh_execute_header, v41, typea, "Invalid response %{public}s Peripheral %{private,mask.hash}s", (uint8_t *)v44, 0x20u);
      swift_arrayDestroy(log, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(log, -1, -1);
      swift_slowDealloc(v44, -1, -1);
    }
    else
    {
      swift_release();
      sub_1001E9684(v24, v23, v26, v25, sub_10001BC14);
      sub_1001E9684(v24, v23, v26, v25, sub_10001BC14);
      swift_release();
    }

    v63 = *(_QWORD *)(v159 + 568);
    v64 = *(_QWORD *)(v159 + 560);
    v65 = *(_QWORD *)(v159 + 384);
    v66 = *(_QWORD *)(v159 + 368);
    v154 = *(_QWORD *)(v159 + 376);
    v158 = *(_QWORD *)(v159 + 392);
    v68 = *(_QWORD *)(v159 + 352);
    v67 = *(_QWORD *)(v159 + 360);
    v69 = sub_100350CCC();
    v70 = swift_allocError(&type metadata for PencilPairingService.Error, v69, 0, 0);
    *(_OWORD *)v71 = xmmword_100E2E3F0;
    *(_BYTE *)(v71 + 16) = 3;
    swift_willThrow(v70);
    sub_10001BC14(v64, v63);
    sub_1001E9684(v146, v23, v150, v25, sub_10001BC14);
    sub_10001BC14(v148, v149);
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v67 + 8))(v66, v68);
    v72 = *(void (**)(uint64_t, uint64_t))(v65 + 8);
    goto LABEL_32;
  }
  sub_1001E9684(v24, v23, v26, v25, sub_10001BBBC);
  sub_10001BBBC(v24, v23 & 0xDFFFFFFFFFFFFFFFLL);
  sub_10001BBBC(v26, v25 & 0xCFFFFFFFFFFFFFFFLL);
  v27 = sub_1002A61B4(v24, v23 & 0xDFFFFFFFFFFFFFFFLL, v26, v25 & 0xCFFFFFFFFFFFFFFFLL);
  if ((v27 & 0xFF0000) == 0x60000)
  {
    v28 = swift_retain();
    v29 = Logger.logObject.getter(v28);
    v30 = static os_log_type_t.error.getter(v29);
    if (os_log_type_enabled(v29, v30))
    {
      v31 = *(_QWORD *)(v159 + 488);
      v130 = *(_QWORD *)(v159 + 496);
      v32 = *(_QWORD *)(v159 + 464);
      v152 = *(_QWORD *)(v159 + 456);
      v33 = *(_QWORD *)(v159 + 448);
      v34 = swift_slowAlloc(22, -1);
      v35 = swift_slowAlloc(32, -1);
      v160[0] = v35;
      *(_DWORD *)v34 = 141558275;
      *(_QWORD *)(v159 + 200) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(*(_QWORD *)v141, v159 + 208, v34 + 4, v34 + 12);
      *(_WORD *)(v34 + 12) = 2081;
      dispatch thunk of PeripheralProtocol.id.getter(v31, v130);
      v36 = sub_1000193A4(&qword_1010EE1D0, &qword_1010EF7C0, (const char *)&protocol conformance descriptor for Identifier<A>);
      v37 = dispatch thunk of CustomStringConvertible.description.getter(v33, v36);
      v39 = v38;
      (*(void (**)(uint64_t, uint64_t))(v152 + 8))(v32, v33);
      *(_QWORD *)(v159 + 208) = sub_100016940(v37, v39, v160);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v159 + 208, v159 + 216, v34 + 14, v34 + 22);
      swift_bridgeObjectRelease();
      swift_release();
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "Invalid commandResponse for %{private,mask.hash}s.", (uint8_t *)v34, 0x16u);
      swift_arrayDestroy(v35, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v35, -1, -1);
      swift_slowDealloc(v34, -1, -1);
    }
    else
    {
      swift_release();
    }

    v73 = *(_QWORD *)(v159 + 568);
    v74 = *(_QWORD *)(v159 + 560);
    v158 = *(_QWORD *)(v159 + 392);
    *(_QWORD *)v143 = *(_QWORD *)(v159 + 384);
    v75 = *(_QWORD *)(v159 + 368);
    v154 = *(_QWORD *)(v159 + 376);
    v77 = *(_QWORD *)(v159 + 352);
    v76 = *(_QWORD *)(v159 + 360);
    v78 = sub_100350CCC();
    v79 = swift_allocError(&type metadata for PencilPairingService.Error, v78, 0, 0);
    *(_OWORD *)v80 = xmmword_100E2E410;
    *(_BYTE *)(v80 + 16) = 3;
    swift_willThrow(v79);
    sub_10001BC14(v74, v73);
    sub_1001E9684(v146, v147, v150, v25, sub_10001BC14);
    v81 = v146;
    v82 = v147;
    v83 = v150;
    v84 = v25;
    goto LABEL_31;
  }
  v51 = v27;
  v157 = v25;
  v153 = v159 + 240;
  v52 = sub_1001E9630(v27);
  v53 = swift_retain();
  if (v52 == 19)
  {
    v54 = Logger.logObject.getter(v53);
    v55 = static os_log_type_t.error.getter(v54);
    if (os_log_type_enabled(v54, v55))
    {
      v131 = *(_QWORD *)(v159 + 488);
      v56 = *(_QWORD *)(v159 + 464);
      *(_QWORD *)v142 = *(_QWORD *)(v159 + 456);
      loga = *(os_log_t *)(v159 + 496);
      *(_QWORD *)typeb = *(_QWORD *)(v159 + 448);
      v57 = swift_slowAlloc(26, -1);
      v58 = swift_slowAlloc(32, -1);
      v160[0] = v58;
      *(_DWORD *)v57 = 33686275;
      *(_WORD *)(v159 + 624) = v51;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v159 + 624, v159 + 626, v57 + 4, v57 + 6);
      *(_WORD *)(v57 + 6) = 2160;
      *(_QWORD *)(v159 + 224) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v159 + 224, v159 + 232, v57 + 8, v57 + 16);
      *(_WORD *)(v57 + 16) = 2081;
      dispatch thunk of PeripheralProtocol.id.getter(v131, loga);
      v59 = sub_1000193A4(&qword_1010EE1D0, &qword_1010EF7C0, (const char *)&protocol conformance descriptor for Identifier<A>);
      v60 = dispatch thunk of CustomStringConvertible.description.getter(*(_QWORD *)typeb, v59);
      v62 = v61;
      (*(void (**)(uint64_t, os_log_type_t *))(*(_QWORD *)v142 + 8))(v56, *(os_log_type_t **)typeb);
      *(_QWORD *)(v159 + 232) = sub_100016940(v60, v62, v160);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v159 + 232, v153, v57 + 18, v57 + 26);
      swift_bridgeObjectRelease();
      swift_release();
      _os_log_impl((void *)&_mh_execute_header, v54, v55, "Invalid opcode: %{public}hu. Peripheral %{private,mask.hash}s", (uint8_t *)v57, 0x1Au);
      swift_arrayDestroy(v58, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v58, -1, -1);
      swift_slowDealloc(v57, -1, -1);
    }
    else
    {
      swift_release();
    }

    v98 = v25;
    v99 = *(_QWORD *)(v159 + 568);
    v100 = *(_QWORD *)(v159 + 560);
    v158 = *(_QWORD *)(v159 + 392);
    *(_QWORD *)v143 = *(_QWORD *)(v159 + 384);
    v75 = *(_QWORD *)(v159 + 368);
    v154 = *(_QWORD *)(v159 + 376);
    v77 = *(_QWORD *)(v159 + 352);
    v76 = *(_QWORD *)(v159 + 360);
    v101 = sub_100350CCC();
    v102 = swift_allocError(&type metadata for PencilPairingService.Error, v101, 0, 0);
    *(_OWORD *)v103 = xmmword_100E2E410;
    v104 = 3;
    goto LABEL_30;
  }
  v85 = swift_retain();
  v86 = Logger.logObject.getter(v85);
  v87 = static os_log_type_t.default.getter(v86);
  if (os_log_type_enabled(v86, v87))
  {
    v144 = v87;
    v125 = *(_QWORD *)(v159 + 488);
    v127 = *(_QWORD *)(v159 + 496);
    v121 = v159 + 264;
    v123 = *(_QWORD *)(v159 + 464);
    v129 = *(_QWORD *)(v159 + 448);
    v132 = *(_QWORD *)(v159 + 456);
    v88 = swift_slowAlloc(42, -1);
    type = swift_slowAlloc(96, -1);
    v160[0] = type;
    *(_DWORD *)v88 = 136315907;
    v89 = sub_1001E8954(v52);
    *(_QWORD *)(v159 + 240) = sub_100016940(v89, v90, v160);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v153, v159 + 248, v88 + 4, v88 + 12);
    swift_bridgeObjectRelease();
    *(_WORD *)(v88 + 12) = 2082;
    if (BYTE2(v51))
      v91 = BYTE2(v51);
    else
      v91 = 6;
    v92 = sub_1002A5C3C(v91);
    *(_QWORD *)(v159 + 248) = sub_100016940(v92, v93, v160);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v159 + 248, v159 + 256, v88 + 14, v88 + 22);
    swift_bridgeObjectRelease();
    *(_WORD *)(v88 + 22) = 2160;
    *(_QWORD *)(v159 + 256) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v159 + 256, v121, v88 + 24, v88 + 32);
    *(_WORD *)(v88 + 32) = 2081;
    dispatch thunk of PeripheralProtocol.id.getter(v125, v127);
    swift_release();
    v94 = sub_1000193A4(&qword_1010EE1D0, &qword_1010EF7C0, (const char *)&protocol conformance descriptor for Identifier<A>);
    v95 = dispatch thunk of CustomStringConvertible.description.getter(v129, v94);
    v97 = v96;
    (*(void (**)(uint64_t, uint64_t))(v132 + 8))(v123, v129);
    *(_QWORD *)(v159 + 264) = sub_100016940(v95, v97, v160);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v121, v159 + 272, v88 + 34, v88 + 42);
    swift_bridgeObjectRelease();
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, v86, v144, "Opcode: %s. Status %{public}s. Peripheral %{private,mask.hash}s", (uint8_t *)v88, 0x2Au);
    swift_arrayDestroy(type, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(type, -1, -1);
    swift_slowDealloc(v88, -1, -1);
  }
  else
  {
    swift_release_n(*(_QWORD *)(v159 + 336), 2);
  }

  v98 = v157;
  v106 = BYTE2(v51);
  if ((_DWORD)v106)
  {
    v99 = *(_QWORD *)(v159 + 568);
    v100 = *(_QWORD *)(v159 + 560);
    v158 = *(_QWORD *)(v159 + 392);
    *(_QWORD *)v143 = *(_QWORD *)(v159 + 384);
    v75 = *(_QWORD *)(v159 + 368);
    v154 = *(_QWORD *)(v159 + 376);
    v77 = *(_QWORD *)(v159 + 352);
    v76 = *(_QWORD *)(v159 + 360);
    v107 = sub_100350CCC();
    v102 = swift_allocError(&type metadata for PencilPairingService.Error, v107, 0, 0);
    *(_QWORD *)v103 = v106;
    *(_QWORD *)(v103 + 8) = 0;
    v104 = 2;
LABEL_30:
    *(_BYTE *)(v103 + 16) = v104;
    swift_willThrow(v102);
    sub_10001BC14(v100, v99);
    sub_1001E9684(v146, v147, v150, v98, sub_10001BC14);
    v81 = v146;
    v82 = v147;
    v83 = v150;
    v84 = v98;
LABEL_31:
    sub_1001E9684(v81, v82, v83, v84, sub_10001BC14);
    sub_10001BC14(v148, v149);
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v76 + 8))(v75, v77);
    v72 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)v143 + 8);
LABEL_32:
    v72(v158, v154);
    goto LABEL_33;
  }
  v114 = Logger.logObject.getter(v105);
  v115 = static os_log_type_t.default.getter(v114);
  if (os_log_type_enabled(v114, v115))
  {
    v116 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v116 = 0;
    _os_log_impl((void *)&_mh_execute_header, v114, v115, "RX unpair succeeded", v116, 2u);
    swift_slowDealloc(v116, -1, -1);
  }
  *(_QWORD *)typec = *(_QWORD *)(v159 + 464);
  *(_QWORD *)v145 = *(_QWORD *)(v159 + 440);
  v155 = *(_QWORD *)(v159 + 416);
  v117 = *(_QWORD *)(v159 + 392);
  v118 = *(_QWORD *)(v159 + 368);
  v133 = *(_QWORD *)(v159 + 384);
  logb = *(os_log_t *)(v159 + 376);
  v120 = *(_QWORD *)(v159 + 352);
  v119 = *(_QWORD *)(v159 + 360);
  sub_10001BC14(*(_QWORD *)(v159 + 560), *(_QWORD *)(v159 + 568));

  sub_1001E9684(v146, v23, v150, v157, sub_10001BC14);
  sub_1001E9684(v146, v23, v150, v157, sub_10001BC14);
  sub_10001BC14(v148, v3);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v119 + 8))(v118, v120);
  (*(void (**)(uint64_t, os_log_t))(v133 + 8))(v117, logb);
  swift_task_dealloc(*(_QWORD *)typec);
  swift_task_dealloc(*(_QWORD *)v145);
  swift_task_dealloc(v155);
  swift_task_dealloc(v117);
  swift_task_dealloc(v118);
  v112 = *(uint64_t (**)(void))(v159 + 8);
  return v112();
}

uint64_t sub_1009EC1BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(_QWORD *)(v0 + 384);
  v1 = *(_QWORD *)(v0 + 392);
  v4 = *(_QWORD *)(v0 + 368);
  v3 = *(_QWORD *)(v0 + 376);
  v5 = *(_QWORD *)(v0 + 352);
  v6 = *(_QWORD *)(v0 + 360);
  sub_10001BC14(*(_QWORD *)(v0 + 560), *(_QWORD *)(v0 + 568));
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v7 = *(_QWORD *)(v0 + 440);
  v8 = *(_QWORD *)(v0 + 416);
  v9 = *(_QWORD *)(v0 + 392);
  v10 = *(_QWORD *)(v0 + 368);
  swift_task_dealloc(*(_QWORD *)(v0 + 464));
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1009EC27C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v5 = type metadata accessor for Characteristic(0);
  v6 = sub_100006204(&qword_1010EC4C0, (uint64_t (*)(uint64_t))&type metadata accessor for Characteristic, (uint64_t)&protocol conformance descriptor for Characteristic);
  v7 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of CharacteristicProtocol.writeWithoutResponse(data:)[1]);
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_100004A74;
  return dispatch thunk of CharacteristicProtocol.writeWithoutResponse(data:)(a3, v5, v6);
}

uint64_t sub_1009EC310(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  _QWORD *v6;

  v5[3] = a4;
  v5[4] = a5;
  v6 = (_QWORD *)swift_task_alloc(dword_10110F7FC);
  v5[5] = v6;
  *v6 = v5;
  v6[1] = sub_1009EC35C;
  return sub_1009EC5FC();
}

uint64_t sub_1009EC35C()
{
  uint64_t *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;

  v1 = *v0;
  v4 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 40));
  v2 = (_QWORD *)swift_task_alloc(dword_10110F804);
  *(_QWORD *)(v1 + 48) = v2;
  *v2 = v4;
  v2[1] = sub_1009EC3C4;
  return sub_1009ECD00(*(_QWORD *)(v1 + 32));
}

uint64_t sub_1009EC3C4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*v1 + 48);
  v3 = *v1;
  *(_QWORD *)(v3 + 56) = v0;
  swift_task_dealloc(v2);
  if (v0)
    return swift_task_switch(sub_1009EC430, *(_QWORD *)(v3 + 24), 0);
  else
    return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_1009EC430()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  BOOL v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;

  if (qword_1010EA100 != -1)
    swift_once(&qword_1010EA100, sub_1009B44BC);
  v1 = *(_QWORD *)(v0 + 56);
  v2 = type metadata accessor for Logger(0);
  sub_10001A9E8(v2, (uint64_t)qword_10110F2A8);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter(v4);
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 56);
  if (v6)
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v8 = 138543362;
    swift_errorRetain(v7);
    v10 = _swift_stdlib_bridgeErrorToNSError(v7);
    *(_QWORD *)(v0 + 16) = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v8 + 4, v8 + 12);
    *v9 = v10;
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Registration failed - %{public}@", v8, 0xCu);
    v11 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v9, 1, v11);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

    swift_errorRelease(v7);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 56));
    swift_errorRelease(v7);
    swift_errorRelease(v7);

  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1009EC5FC()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  unint64_t v3;

  v1[94] = v0;
  v2 = type metadata accessor for PencilPairingLockAckResponse(0);
  v1[95] = v2;
  v3 = (*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[96] = swift_task_alloc(v3);
  v1[97] = swift_task_alloc(v3);
  v1[98] = swift_task_alloc(v3);
  return swift_task_switch(sub_1009EC674, v0, 0);
}

uint64_t sub_1009EC674()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _QWORD *v21;

  if (qword_1010EA100 != -1)
    swift_once(&qword_1010EA100, sub_1009B44BC);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_10001A9E8(v1, (uint64_t)qword_10110F2A8);
  *(_QWORD *)(v0 + 792) = v2;
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "ackPairing...", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }

  v6 = swift_retain();
  sub_1009A89A0(v6, v0 + 496);
  swift_release();
  sub_100005CF0(v0 + 496, v0 + 256, &qword_10110EF40);
  v7 = sub_100057AD4(v0 + 256);
  if ((_DWORD)v7 == 1)
  {
    v8 = Logger.logObject.getter(v7);
    v9 = static os_log_type_t.error.getter(v8);
    if (os_log_type_enabled(v8, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, v9, " Unable to generate ack data!", v10, 2u);
      swift_slowDealloc(v10, -1, -1);
    }

    v11 = *(_QWORD *)(v0 + 776);
    v12 = *(_QWORD *)(v0 + 768);
    swift_task_dealloc(*(_QWORD *)(v0 + 784));
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v14 = *(_OWORD *)(v0 + 464);
    *(_OWORD *)(v0 + 208) = *(_OWORD *)(v0 + 448);
    *(_OWORD *)(v0 + 224) = v14;
    *(_OWORD *)(v0 + 240) = *(_OWORD *)(v0 + 480);
    v15 = *(_OWORD *)(v0 + 400);
    *(_OWORD *)(v0 + 144) = *(_OWORD *)(v0 + 384);
    *(_OWORD *)(v0 + 160) = v15;
    v16 = *(_OWORD *)(v0 + 432);
    *(_OWORD *)(v0 + 176) = *(_OWORD *)(v0 + 416);
    *(_OWORD *)(v0 + 192) = v16;
    v17 = *(_OWORD *)(v0 + 336);
    *(_OWORD *)(v0 + 80) = *(_OWORD *)(v0 + 320);
    *(_OWORD *)(v0 + 96) = v17;
    v18 = *(_OWORD *)(v0 + 368);
    *(_OWORD *)(v0 + 112) = *(_OWORD *)(v0 + 352);
    *(_OWORD *)(v0 + 128) = v18;
    v19 = *(_OWORD *)(v0 + 272);
    *(_OWORD *)(v0 + 16) = *(_OWORD *)(v0 + 256);
    *(_OWORD *)(v0 + 32) = v19;
    v20 = *(_OWORD *)(v0 + 304);
    *(_OWORD *)(v0 + 48) = *(_OWORD *)(v0 + 288);
    *(_OWORD *)(v0 + 64) = v20;
    v21 = (_QWORD *)swift_task_alloc(dword_1010F8344);
    *(_QWORD *)(v0 + 800) = v21;
    *v21 = v0;
    v21[1] = sub_1009EC8CC;
    return sub_100349580(*(_QWORD *)(v0 + 784), v0 + 16);
  }
}

uint64_t sub_1009EC8CC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 800);
  *(_QWORD *)(*v1 + 808) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_1009ECB38;
  else
    v4 = sub_1009EC930;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 752), 0);
}

uint64_t sub_1009EC930()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;

  v1 = sub_10005972C(*(_QWORD *)(v0 + 784), *(_QWORD *)(v0 + 776), type metadata accessor for PencilPairingLockAckResponse);
  v2 = Logger.logObject.getter(v1);
  v3 = static os_log_type_t.default.getter(v2);
  if (os_log_type_enabled(v2, v3))
  {
    v17 = *(_QWORD *)(v0 + 784);
    v4 = *(_QWORD *)(v0 + 776);
    v5 = *(_QWORD *)(v0 + 768);
    v6 = *(_QWORD *)(v0 + 760);
    v7 = (uint8_t *)swift_slowAlloc(12, -1);
    v8 = swift_slowAlloc(32, -1);
    v18 = v8;
    *(_DWORD *)v7 = 136446210;
    sub_10005972C(v4, v5, type metadata accessor for PencilPairingLockAckResponse);
    v9 = String.init<A>(describing:)(v5, v6);
    *(_QWORD *)(v0 + 744) = sub_100016940(v9, v10, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 744, v0 + 752, v7 + 4, v7 + 12);
    swift_bridgeObjectRelease();
    sub_1000126B0(v4, type metadata accessor for PencilPairingLockAckResponse);
    _os_log_impl((void *)&_mh_execute_header, v2, v3, " Ack register was success. %{public}s", v7, 0xCu);
    swift_arrayDestroy(v8, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v7, -1, -1);
    sub_1009F732C(v0 + 496);

    v11 = v17;
  }
  else
  {
    v12 = *(_QWORD *)(v0 + 784);
    v13 = *(_QWORD *)(v0 + 776);
    sub_1009F732C(v0 + 496);

    sub_1000126B0(v13, type metadata accessor for PencilPairingLockAckResponse);
    v11 = v12;
  }
  sub_1000126B0(v11, type metadata accessor for PencilPairingLockAckResponse);
  v14 = *(_QWORD *)(v0 + 776);
  v15 = *(_QWORD *)(v0 + 768);
  swift_task_dealloc(*(_QWORD *)(v0 + 784));
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1009ECB38()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint8_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = *(_QWORD *)(v0 + 808);
  swift_errorRetain(v1);
  v2 = swift_errorRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = *(_QWORD *)(v0 + 808);
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v6 = 138543362;
    swift_errorRetain(v5);
    v8 = _swift_stdlib_bridgeErrorToNSError(v5);
    *(_QWORD *)(v0 + 736) = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 736, v0 + 744, v6 + 4, v6 + 12);
    *v7 = v8;
    swift_errorRelease(v5);
    swift_errorRelease(v5);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, " Ack register failed with error - %{public}@", v6, 0xCu);
    v9 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v7, 1, v9);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);
    sub_1009F732C(v0 + 496);

    swift_errorRelease(v5);
  }
  else
  {
    v10 = *(_QWORD *)(v0 + 808);
    sub_1009F732C(v0 + 496);
    swift_errorRelease(v10);
    swift_errorRelease(v10);
    swift_errorRelease(v10);

  }
  v11 = *(_QWORD *)(v0 + 776);
  v12 = *(_QWORD *)(v0 + 768);
  swift_task_dealloc(*(_QWORD *)(v0 + 784));
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1009ECD00(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2[36] = a1;
  v2[37] = v1;
  v3 = type metadata accessor for PeripheralState(0);
  v2[38] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[39] = v4;
  v5 = (*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[40] = swift_task_alloc(v5);
  v2[41] = swift_task_alloc(v5);
  v6 = type metadata accessor for UUID(0);
  v2[42] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v2[43] = v7;
  v8 = (*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[44] = swift_task_alloc(v8);
  v2[45] = swift_task_alloc(v8);
  v9 = sub_10001A9A8((uint64_t *)&unk_1010EDC50);
  v2[46] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for LocalFindableAccessoryRecord(0);
  v2[47] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v2[48] = v11;
  v2[49] = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for String.Encoding(0);
  v2[50] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v12 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1009ECE14, v1, 0);
}

uint64_t sub_1009ECE14()
{
  _QWORD *v0;
  uint64_t *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(void);
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  __int128 *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t result;
  _QWORD *v37;
  uint64_t (*v38)(void);
  uint64_t v39;

  v1 = (uint64_t *)(*(_QWORD *)(v0[37] + 160)
                 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessorySerialNumber);
  v2 = *v1;
  v0[51] = *v1;
  v3 = v1[1];
  v0[52] = v3;
  if (v3 >> 60 == 15)
    goto LABEL_4;
  v0[30] = v2;
  v0[31] = v3;
  sub_10001BBBC(v2, v3);
  v4 = sub_100035530();
  if ((DataProtocol.isNull.getter(&type metadata for Data, v4) & 1) != 0)
  {
    sub_10001EF3C(v2, v3);
LABEL_4:
    if (qword_1010EA100 != -1)
      swift_once(&qword_1010EA100, sub_1009B44BC);
    v5 = type metadata accessor for Logger(0);
    v6 = sub_10001A9E8(v5, (uint64_t)qword_10110F2A8);
    v7 = Logger.logObject.getter(v6);
    v8 = static os_log_type_t.error.getter(v7);
    if (os_log_type_enabled(v7, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Invalid serial number.", v9, 2u);
      swift_slowDealloc(v9, -1, -1);
    }

    v10 = sub_100350CCC();
    v11 = swift_allocError(&type metadata for PencilPairingService.Error, v10, 0, 0);
    *(_OWORD *)v12 = xmmword_100E58250;
    *(_BYTE *)(v12 + 16) = 3;
    swift_willThrow(v11);
    v13 = v0[49];
    v15 = v0[45];
    v14 = v0[46];
    v16 = v0[44];
    v18 = v0[40];
    v17 = v0[41];
    swift_task_dealloc(v0[50]);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    v19 = (uint64_t (*)(void))v0[1];
    return v19();
  }
  v20 = Data.trimmed.getter(v2, v3);
  v22 = v21;
  v0[53] = v20;
  v0[54] = v21;
  if (qword_1010EA318 != -1)
    swift_once(&qword_1010EA318, sub_100B5E330);
  v23 = (__int128 *)(v0 + 15);
  v24 = v0 + 25;
  v25 = type metadata accessor for Logger(0);
  v0[55] = v25;
  sub_10001A9E8(v25, (uint64_t)qword_1011B7DF8);
  sub_10001BBBC(v20, v22);
  v26 = sub_10001BBBC(v20, v22);
  v27 = Logger.logObject.getter(v26);
  v28 = static os_log_type_t.default.getter(v27);
  if (os_log_type_enabled(v27, v28))
  {
    v29 = v0[50];
    v30 = swift_slowAlloc(22, -1);
    v31 = swift_slowAlloc(32, -1);
    v39 = v31;
    *(_DWORD *)v30 = 141558275;
    v0[34] = 1752392040;
    v32 = UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 34, v0 + 35, v30 + 4, v30 + 12);
    *(_WORD *)(v30 + 12) = 2081;
    static String.Encoding.utf8.getter(v32);
    v33 = String.init(data:encoding:)(v20, v22, v29);
    if (!v34)
      v33 = Data.hexString.getter(v20, v22);
    v0[35] = sub_100016940(v33, v34, &v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 35, v0 + 36, v30 + 14, v30 + 22);
    swift_bridgeObjectRelease();
    sub_10001BC14(v20, v22);
    sub_10001BC14(v20, v22);
    _os_log_impl((void *)&_mh_execute_header, v27, v28, "Starting registration through FMFD %{private,mask.hash}s", (uint8_t *)v30, 0x16u);
    swift_arrayDestroy(v31, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v31, -1, -1);
    swift_slowDealloc(v30, -1, -1);

    v24 = v0 + 25;
    v23 = (__int128 *)(v0 + 15);
  }
  else
  {
    sub_10001BC14(v20, v22);
    sub_10001BC14(v20, v22);

  }
  v35 = qword_1010EA5B0;
  swift_retain();
  if (v35 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v24, 0, 0);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, (uint64_t)v23, &qword_1010EE220);
  if (v0[18])
  {
    sub_10000F9FC(v23, (uint64_t)(v0 + 10));
    swift_release();
    sub_10001AA44(v0 + 10, v0[13]);
    v38 = (uint64_t (*)(void))((char *)&dword_1010EBC30 + dword_1010EBC30);
    v37 = (_QWORD *)swift_task_alloc(unk_1010EBC34);
    v0[56] = v37;
    *v37 = v0;
    v37[1] = sub_1009ED2BC;
    v19 = v38;
    return v19();
  }
  __break(1u);
  return result;
}

uint64_t sub_1009ED2BC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 448);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 296);
  *(_QWORD *)(*(_QWORD *)v1 + 456) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1009ED31C, v3, 0);
}

uint64_t sub_1009ED31C()
{
  uint64_t v0;
  _QWORD *v1;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v1 = (_QWORD *)(v0 + 80);
  if (*(_QWORD *)(v0 + 456))
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    return swift_task_switch(sub_1009ED444, *(_QWORD *)(v0 + 456), 0);
  }
  else
  {
    v4 = *(_QWORD *)(v0 + 424);
    v3 = *(_QWORD *)(v0 + 432);
    v6 = *(_QWORD *)(v0 + 408);
    v5 = *(_QWORD *)(v0 + 416);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    v7 = sub_100033220();
    v8 = swift_allocError(&type metadata for DaemonError, v7, 0, 0);
    *v9 = 0xD000000000000013;
    v9[1] = 0x8000000100ED7110;
    swift_willThrow(v8);
    sub_10001BC14(v4, v3);
    sub_10001EF3C(v6, v5);
    v10 = *(_QWORD *)(v0 + 392);
    v12 = *(_QWORD *)(v0 + 360);
    v11 = *(_QWORD *)(v0 + 368);
    v13 = *(_QWORD *)(v0 + 352);
    v15 = *(_QWORD *)(v0 + 320);
    v14 = *(_QWORD *)(v0 + 328);
    swift_task_dealloc(*(_QWORD *)(v0 + 400));
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1009ED444()
{
  uint64_t *v0;
  uint64_t **v1;

  v1 = (uint64_t **)swift_task_alloc(dword_10110CD84);
  v0[58] = (uint64_t)v1;
  *v1 = v0;
  v1[1] = (uint64_t *)sub_1009ED498;
  return sub_1008FC02C(v0[53], v0[54]);
}

uint64_t sub_1009ED498(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t (*v5)();

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 464);
  v3[59] = a1;
  v3[60] = v1;
  swift_task_dealloc(v4);
  if (v1)
    v5 = sub_1009ED7F0;
  else
    v5 = sub_1009ED504;
  return swift_task_switch(v5, v3[37], 0);
}

uint64_t sub_1009ED504()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  BOOL v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v1 = *(_QWORD *)(v0 + 472);
  if (*(_QWORD *)(v1 + 16))
  {
    v2 = *(unsigned __int8 *)(*(_QWORD *)(v0 + 384) + 80);
    sub_10005972C(v1 + ((v2 + 32) & ~v2), *(_QWORD *)(v0 + 368), type metadata accessor for LocalFindableAccessoryRecord);
    v3 = 0;
  }
  else
  {
    v3 = 1;
  }
  v4 = *(_QWORD *)(v0 + 376);
  v5 = *(_QWORD *)(v0 + 384);
  v6 = *(_QWORD *)(v0 + 368);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 56))(v6, v3, 1, v4);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v6, 1, v4) == 1)
  {
    sub_100004048(*(_QWORD *)(v0 + 368), (uint64_t *)&unk_1010EDC50);
    if (qword_1010EA100 != -1)
      swift_once(&qword_1010EA100, sub_1009B44BC);
    v7 = sub_10001A9E8(*(_QWORD *)(v0 + 440), (uint64_t)qword_10110F2A8);
    v8 = Logger.logObject.getter(v7);
    v9 = static os_log_type_t.error.getter(v8);
    v10 = os_log_type_enabled(v8, v9);
    v12 = *(_QWORD *)(v0 + 424);
    v11 = *(_QWORD *)(v0 + 432);
    v14 = *(_QWORD *)(v0 + 408);
    v13 = *(_QWORD *)(v0 + 416);
    if (v10)
    {
      v15 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Invalid record!", v15, 2u);
      swift_slowDealloc(v15, -1, -1);
      swift_release();

      sub_10001BC14(v12, v11);
      sub_10001EF3C(v14, v13);
    }
    else
    {
      sub_10001EF3C(*(_QWORD *)(v0 + 408), *(_QWORD *)(v0 + 416));
      swift_release();
      sub_10001BC14(v12, v11);

    }
    v25 = *(_QWORD *)(v0 + 392);
    v27 = *(_QWORD *)(v0 + 360);
    v26 = *(_QWORD *)(v0 + 368);
    v28 = *(_QWORD *)(v0 + 352);
    v30 = *(_QWORD *)(v0 + 320);
    v29 = *(_QWORD *)(v0 + 328);
    swift_task_dealloc(*(_QWORD *)(v0 + 400));
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v16 = *(_QWORD *)(v0 + 392);
    v17 = *(_QWORD *)(v0 + 360);
    v18 = *(_QWORD *)(v0 + 336);
    v19 = *(_QWORD *)(v0 + 344);
    sub_1000126EC(*(_QWORD *)(v0 + 368), v16, type metadata accessor for LocalFindableAccessoryRecord);
    *(_QWORD *)(v0 + 488) = objc_msgSend((id)objc_opt_self(FMDFMIPManager), "sharedInstance");
    v20 = *(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 16);
    *(_QWORD *)(v0 + 496) = v20;
    v20(v17, v16, v18);
    v21 = type metadata accessor for Peripheral(0);
    v22 = sub_100006204(&qword_1010EC4A0, (uint64_t (*)(uint64_t))&type metadata accessor for Peripheral, (uint64_t)&protocol conformance descriptor for Peripheral);
    v23 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of PeripheralProtocol.state.getter[1]);
    *(_QWORD *)(v0 + 504) = v23;
    *v23 = v0;
    v23[1] = sub_1009ED89C;
    return dispatch thunk of PeripheralProtocol.state.getter(*(_QWORD *)(v0 + 328), v21, v22);
  }
}

uint64_t sub_1009ED7F0()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD *)(v0 + 424);
  v1 = *(_QWORD *)(v0 + 432);
  sub_10001EF3C(*(_QWORD *)(v0 + 408), *(_QWORD *)(v0 + 416));
  swift_release();
  sub_10001BC14(v2, v1);
  v3 = *(_QWORD *)(v0 + 392);
  v5 = *(_QWORD *)(v0 + 360);
  v4 = *(_QWORD *)(v0 + 368);
  v6 = *(_QWORD *)(v0 + 352);
  v8 = *(_QWORD *)(v0 + 320);
  v7 = *(_QWORD *)(v0 + 328);
  swift_task_dealloc(*(_QWORD *)(v0 + 400));
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1009ED89C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 296);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 504));
  return swift_task_switch(sub_1009ED8F4, v1, 0);
}

uint64_t sub_1009ED8F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BOOL8 v7;
  void (*v8)(uint64_t, uint64_t);
  id v9;
  Class isa;
  NSString v11;
  id v12;
  void (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSString v19;
  uint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  NSString v24;
  uint64_t v25;
  uint64_t v26;
  int *v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  unint64_t v31;
  Class v32;
  uint64_t v33;
  NSString v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  NSString v38;
  uint64_t v39;
  uint64_t v40;
  NSString v41;
  Class v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  id v49;
  id v50;

  v1 = *(_QWORD *)(v0 + 424);
  v48 = *(_QWORD *)(v0 + 432);
  v49 = *(id *)(v0 + 400);
  v2 = *(_QWORD *)(v0 + 352);
  v46 = *(_QWORD *)(v0 + 336);
  v47 = *(_QWORD *)(v0 + 344);
  v3 = *(_QWORD *)(v0 + 320);
  v5 = *(_QWORD *)(v0 + 304);
  v4 = *(_QWORD *)(v0 + 312);
  (*(void (**)(uint64_t, _QWORD))(v0 + 496))(v2, *(_QWORD *)(v0 + 360));
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v4 + 104))(v3, enum case for PeripheralState.connected(_:), v5);
  v6 = sub_100006204(&qword_10110F808, (uint64_t (*)(uint64_t))&type metadata accessor for PeripheralState, (uint64_t)&protocol conformance descriptor for PeripheralState);
  dispatch thunk of RawRepresentable.rawValue.getter((_QWORD *)(v0 + 264), v5, v6);
  dispatch thunk of RawRepresentable.rawValue.getter((_QWORD *)(v0 + 256), v5, v6);
  v7 = *(_QWORD *)(v0 + 264) == *(_QWORD *)(v0 + 256);
  v8 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  *(_QWORD *)(v0 + 512) = v8;
  v8(v3, v5);
  v9 = objc_allocWithZone((Class)FMDLocalFindableAccessory);
  isa = UUID._bridgeToObjectiveC()().super.isa;
  v11 = String._bridgeToObjectiveC()();
  v12 = objc_msgSend(v9, "initWithIdentifier:name:connected:", isa, v11, v7);
  *(_QWORD *)(v0 + 520) = v12;

  v13 = *(void (**)(uint64_t, uint64_t))(v47 + 8);
  *(_QWORD *)(v0 + 528) = v13;
  v13(v2, v46);
  v14 = sub_10001BBBC(v1, v48);
  static String.Encoding.utf8.getter(v14);
  String.init(data:encoding:)(v1, v48, v49);
  v16 = v15;
  sub_10001BC14(v1, v48);
  if (!v16)
    Data.hexString.getter(*(_QWORD *)(v0 + 424), *(_QWORD *)(v0 + 432));
  v17 = *(_QWORD *)(v0 + 392);
  v18 = *(_QWORD *)(v0 + 376);
  v19 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  objc_msgSend(v12, "setSerialNumber:", v19);

  v20 = (uint64_t *)(v17 + *(int *)(v18 + 32));
  v21 = v20[1];
  if (v21 >> 60 != 15)
  {
    v22 = *v20;
    *(_QWORD *)(v0 + 224) = *v20;
    *(_QWORD *)(v0 + 232) = v21;
    sub_10001BBBC(v22, v21);
    v23 = sub_1009F6AEC();
    RawRepresentable<>.hexString.getter(&type metadata for LocalFindableAccessoryRecord.SerialNumber, v23);
    v24 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    objc_msgSend(v12, "setAlternateSerialNumber:", v24);

    sub_10001EF3C(v22, v21);
  }
  v25 = v0 + 16;
  v26 = *(_QWORD *)(v0 + 392);
  v27 = *(int **)(v0 + 376);
  v50 = *(id *)(v0 + 488);
  v28 = v26 + v27[13];
  v29 = (uint64_t *)(v28 + *(int *)(type metadata accessor for PeripheralConnectionMaterial(0) + 20));
  v30 = *v29;
  v31 = v29[1];
  sub_10001BBBC(*v29, v31);
  v32 = Data._bridgeToObjectiveC()().super.isa;
  sub_10001BC14(v30, v31);
  objc_msgSend(v12, "setIrkData:", v32);

  MACAddress.hexString.getter(v33);
  v34 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  objc_msgSend(v12, "setBtAddress:", v34);

  v35 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v36 = swift_allocObject(v35, 72, 7);
  *(_OWORD *)(v36 + 16) = xmmword_100E22B00;
  v37 = *(_QWORD *)(v26 + v27[10]);
  *(_QWORD *)(v36 + 56) = &type metadata for Int;
  *(_QWORD *)(v36 + 64) = &protocol witness table for Int;
  *(_QWORD *)(v36 + 32) = v37;
  String.init(format:_:)(1479684133, 0xE400000000000000, v36);
  v38 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  objc_msgSend(v12, "setVendorId:", v38);

  v39 = swift_allocObject(v35, 72, 7);
  *(_OWORD *)(v39 + 16) = xmmword_100E22B00;
  v40 = *(_QWORD *)(v26 + v27[11]);
  *(_QWORD *)(v39 + 56) = &type metadata for Int;
  *(_QWORD *)(v39 + 64) = &protocol witness table for Int;
  *(_QWORD *)(v39 + 32) = v40;
  String.init(format:_:)(1479684133, 0xE400000000000000, v39);
  v41 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  objc_msgSend(v12, "setProductId:", v41);

  v42 = UUID._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v12, "setBaUUID:", v42);

  *(_QWORD *)(v0 + 16) = v0;
  *(_QWORD *)(v0 + 24) = sub_1009EDD94;
  v43 = swift_continuation_init(v0 + 16, 1);
  *(_QWORD *)(v0 + 160) = _NSConcreteStackBlock;
  v44 = (_QWORD *)(v0 + 160);
  v44[1] = 0x40000000;
  v44[2] = sub_1009F5F70;
  v44[3] = &unk_1010A10B8;
  v44[4] = v43;
  objc_msgSend(v50, "didAddLocalFindableAccessory:completion:", v12, v44);
  return swift_continuation_await(v25);
}

uint64_t sub_1009EDD94()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 48);
  *(_QWORD *)(*v0 + 536) = v2;
  if (v2)
    v3 = sub_1009EDF10;
  else
    v3 = sub_1009EDDF4;
  return swift_task_switch(v3, *(_QWORD *)(v1 + 296), 0);
}

uint64_t sub_1009EDDF4()
{
  uint64_t v0;
  void *v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t);
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t);

  v1 = *(void **)(v0 + 488);
  v3 = *(_QWORD *)(v0 + 424);
  v2 = *(_QWORD *)(v0 + 432);
  v5 = *(_QWORD *)(v0 + 408);
  v4 = *(_QWORD *)(v0 + 416);
  v18 = *(_QWORD *)(v0 + 392);
  v19 = *(void (**)(uint64_t, uint64_t))(v0 + 528);
  v16 = *(_QWORD *)(v0 + 360);
  v17 = *(void (**)(uint64_t, uint64_t))(v0 + 512);
  v7 = *(_QWORD *)(v0 + 328);
  v6 = *(_QWORD *)(v0 + 336);
  v8 = *(_QWORD *)(v0 + 304);

  swift_release();
  sub_10001BC14(v3, v2);
  sub_10001EF3C(v5, v4);
  v17(v7, v8);
  v19(v16, v6);
  sub_1000126B0(v18, type metadata accessor for LocalFindableAccessoryRecord);
  v9 = *(_QWORD *)(v0 + 392);
  v11 = *(_QWORD *)(v0 + 360);
  v10 = *(_QWORD *)(v0 + 368);
  v12 = *(_QWORD *)(v0 + 352);
  v14 = *(_QWORD *)(v0 + 320);
  v13 = *(_QWORD *)(v0 + 328);
  swift_task_dealloc(*(_QWORD *)(v0 + 400));
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1009EDF10(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  void *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t);
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t);

  v2 = *(void **)(v1 + 520);
  v3 = *(void **)(v1 + 488);
  v5 = *(_QWORD *)(v1 + 424);
  v4 = *(_QWORD *)(v1 + 432);
  v6 = *(_QWORD *)(v1 + 408);
  v20 = *(_QWORD *)(v1 + 392);
  v21 = *(void (**)(uint64_t, uint64_t))(v1 + 528);
  v18 = *(_QWORD *)(v1 + 360);
  v19 = *(void (**)(uint64_t, uint64_t))(v1 + 512);
  v7 = *(_QWORD *)(v1 + 328);
  v16 = *(_QWORD *)(v1 + 416);
  v17 = *(_QWORD *)(v1 + 336);
  v8 = *(_QWORD *)(v1 + 304);
  swift_willThrow(a1);
  swift_release();

  sub_10001BC14(v5, v4);
  sub_10001EF3C(v6, v16);
  v19(v7, v8);
  v21(v18, v17);
  sub_1000126B0(v20, type metadata accessor for LocalFindableAccessoryRecord);
  v9 = *(_QWORD *)(v1 + 392);
  v11 = *(_QWORD *)(v1 + 360);
  v10 = *(_QWORD *)(v1 + 368);
  v12 = *(_QWORD *)(v1 + 352);
  v14 = *(_QWORD *)(v1 + 320);
  v13 = *(_QWORD *)(v1 + 328);
  swift_task_dealloc(*(_QWORD *)(v1 + 400));
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_1009EE034(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v3[2] = a1;
  v5 = sub_10001A9A8(&qword_1010EC638);
  v3[3] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v3[4] = v6;
  v7 = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v3[5] = v7;
  v8 = type metadata accessor for Characteristic(0);
  v9 = sub_100006204(&qword_1010EC4C0, (uint64_t (*)(uint64_t))&type metadata accessor for Characteristic, (uint64_t)&protocol conformance descriptor for Characteristic);
  v10 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of CharacteristicProtocol.write(data:)[1]);
  v3[6] = v10;
  *v10 = v3;
  v10[1] = sub_100042D34;
  return dispatch thunk of CharacteristicProtocol.write(data:)(v7, a3, v8, v9);
}

uint64_t sub_1009EE10C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;

  v4[317] = v3;
  v4[316] = a3;
  v4[315] = a2;
  v4[314] = a1;
  v5 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for LocalFindableAccessoryRecord(0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[318] = swift_task_alloc(v5);
  v4[319] = swift_task_alloc(v5);
  v4[320] = swift_task_alloc(v5);
  return swift_task_switch(sub_1009EE18C, v3, 0);
}

uint64_t sub_1009EE18C()
{
  uint64_t v0;
  uint64_t v1;
  _OWORD *v2;
  _OWORD *v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t *v32;
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  os_log_type_t v43;
  uint8_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  char v52;
  NSObject *v53;
  os_log_type_t v54;
  uint8_t *v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint8_t *v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  NSObject *v65;
  os_log_type_t v66;
  uint8_t *v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t *v73;
  NSObject *v74;
  os_log_type_t v75;
  uint8_t *v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t *v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  NSObject *v86;
  os_log_type_t v87;
  uint64_t v88;
  uint8_t *v89;
  uint64_t v90;
  unint64_t v91;
  uint8_t *v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  __int128 v96;
  uint64_t *v97;
  NSObject *v98;
  os_log_type_t v99;
  uint8_t *v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t *v112;
  NSObject *v113;
  os_log_type_t v114;
  uint8_t *v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t *v119;
  NSObject *v120;
  os_log_type_t v121;
  uint8_t *v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t *v127;
  NSObject *v128;
  os_log_type_t v129;
  uint8_t *v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t *v134;
  NSObject *v135;
  os_log_type_t v136;
  uint8_t *v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t *v144;
  unint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  uint64_t *v149;
  unint64_t v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  uint64_t *v154;
  unint64_t v155;
  uint64_t v156;
  uint64_t v157;
  unint64_t v158;
  uint64_t *v159;
  unint64_t v160;
  uint64_t v161;
  uint64_t v162;
  unint64_t v163;
  uint64_t *v164;
  unint64_t v165;
  uint64_t v166;
  uint64_t v167;
  unint64_t v168;
  uint64_t *v169;
  unint64_t v170;
  uint64_t v171;
  uint64_t v172;
  unint64_t v173;
  uint64_t *v174;
  unint64_t v175;
  uint64_t v176;
  uint64_t v177;
  unint64_t v178;
  uint64_t *v179;
  unint64_t v180;
  uint64_t v181;
  _QWORD *v182;
  uint64_t v183;
  uint64_t *v184;
  unint64_t v185;
  uint64_t v186;
  uint64_t *v187;
  unint64_t v188;
  uint64_t v189;
  uint64_t v190;
  NSObject *v191;
  os_log_type_t v192;
  uint8_t *v193;
  uint64_t v194;
  unint64_t v195;
  uint64_t v196;
  NSObject *v197;
  os_log_type_t v198;
  _DWORD *v199;
  _QWORD *v200;
  unint64_t v201;
  uint64_t v202;
  uint64_t *v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  _OWORD *v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214[2];

  sub_100057DB8(*(_QWORD *)(v0 + 2528), v0 + 2080);
  v1 = sub_10001A9A8(&qword_1010EC530);
  if (!swift_dynamicCast(v0 + 592, v0 + 2080, v1, &type metadata for PencilPairingCommand, 6))
  {
    if (qword_1010EA100 != -1)
      swift_once(&qword_1010EA100, sub_1009B44BC);
    v12 = *(_QWORD *)(v0 + 2528);
    v13 = type metadata accessor for Logger(0);
    sub_10001A9E8(v13, (uint64_t)qword_10110F2A8);
    v14 = sub_100057DB8(v12, v0 + 2128);
    v15 = Logger.logObject.getter(v14);
    v16 = static os_log_type_t.error.getter(v15);
    if (os_log_type_enabled(v15, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc(12, -1);
      v18 = swift_slowAlloc(32, -1);
      v214[0] = v18;
      *(_DWORD *)v17 = 136446210;
      sub_100057DB8(v0 + 2128, v0 + 2032);
      v19 = String.init<A>(describing:)(v0 + 2032, v1);
      *(_QWORD *)(v0 + 2496) = sub_100016940(v19, v20, v214);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 2496, v0 + 2504, v17 + 4, v17 + 12);
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 2128));
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Invalid command from payload %{public}s", v17, 0xCu);
      swift_arrayDestroy(v18, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v18, -1, -1);
      swift_slowDealloc(v17, -1, -1);
    }
    else
    {
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 2128));
    }

    v38 = sub_100350CCC();
    v39 = swift_allocError(&type metadata for PencilPairingService.Error, v38, 0, 0);
    *(_OWORD *)v40 = xmmword_100E2E3F0;
    *(_BYTE *)(v40 + 16) = 3;
    swift_willThrow(v39);
    goto LABEL_44;
  }
  v2 = (_OWORD *)(v0 + 16);
  v3 = (_OWORD *)(v0 + 160);
  sub_10015BAD8((_OWORD *)(v0 + 592), (_OWORD *)(v0 + 160));
  v209 = (_OWORD *)(v0 + 1168);
  sub_10015BAD8((_OWORD *)(v0 + 592), (_OWORD *)(v0 + 1168));
  if (qword_1010EA100 != -1)
    swift_once(&qword_1010EA100, sub_1009B44BC);
  v4 = type metadata accessor for Logger(0);
  *(_QWORD *)(v0 + 2568) = v4;
  sub_10001A9E8(v4, (uint64_t)qword_10110F2A8);
  sub_1009F6DD0(v0 + 160, (void (*)(void))sub_10001BBBC);
  v5 = sub_1009F6DD0(v0 + 160, (void (*)(void))sub_10001BBBC);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.default.getter(v6);
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = swift_slowAlloc(32, -1);
    v214[0] = v9;
    *(_DWORD *)v8 = 136446210;
    sub_10015BAD8((_OWORD *)(v0 + 160), (_OWORD *)(v0 + 1024));
    sub_1009F6DD0(v0 + 160, (void (*)(void))sub_10001BBBC);
    v10 = String.init<A>(describing:)(v0 + 1024, &type metadata for PencilPairingCommand);
    *(_QWORD *)(v0 + 2504) = sub_100016940(v10, v11, v214);
    v2 = (_OWORD *)(v0 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 2504, v0 + 2512, v8 + 4, v8 + 12);
    v3 = (_OWORD *)(v0 + 160);
    swift_bridgeObjectRelease();
    sub_1009F6DD0(v0 + 160, (void (*)(void))sub_10001BC14);
    sub_1009F6DD0(v0 + 160, (void (*)(void))sub_10001BC14);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Received command: %{public}s", v8, 0xCu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }
  else
  {
    sub_1009F6DD0(v0 + 160, (void (*)(void))sub_10001BC14);
    sub_1009F6DD0(v0 + 160, (void (*)(void))sub_10001BC14);
  }

  sub_10015BAD8(v3, v2);
  v21 = sub_10015BB08((uint64_t)v2);
  if (v21 != 3)
  {
    if (v21 == 1)
    {
      v203 = (uint64_t *)(v0 + 2424);
      v22 = sub_10015BC30((uint64_t)v2);
      v23 = Logger.logObject.getter(v22);
      v24 = static os_log_type_t.default.getter(v23);
      if (os_log_type_enabled(v23, v24))
      {
        v25 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v25 = 0;
        _os_log_impl((void *)&_mh_execute_header, v23, v24, " Received pairing data!!", v25, 2u);
        swift_slowDealloc(v25, -1, -1);
      }

      sub_10015B874();
      v26 = sub_10001A9A8(&qword_1010EC540);
      if (swift_dynamicCast(v0 + 448, v0 + 2216, v26, &type metadata for PencilSendPairingCommandPayload, 6))
      {
        v210 = v0 + 2480;
        v27 = (uint64_t *)(v0 + 1744);
        v28 = *(_OWORD *)(v0 + 560);
        *(_OWORD *)(v0 + 1840) = *(_OWORD *)(v0 + 544);
        *(_OWORD *)(v0 + 1856) = v28;
        *(_OWORD *)(v0 + 1872) = *(_OWORD *)(v0 + 576);
        v29 = *(_OWORD *)(v0 + 496);
        *(_OWORD *)(v0 + 1776) = *(_OWORD *)(v0 + 480);
        *(_OWORD *)(v0 + 1792) = v29;
        v30 = *(_OWORD *)(v0 + 528);
        *(_OWORD *)(v0 + 1808) = *(_OWORD *)(v0 + 512);
        *(_OWORD *)(v0 + 1824) = v30;
        v31 = *(_OWORD *)(v0 + 464);
        *(_OWORD *)(v0 + 1744) = *(_OWORD *)(v0 + 448);
        *(_OWORD *)(v0 + 1760) = v31;
        sub_10015CD64((uint64_t *)(v0 + 1744), (void (*)(uint64_t, uint64_t))sub_10001BBBC);
        v32 = sub_10015CD64((uint64_t *)(v0 + 1744), (void (*)(uint64_t, uint64_t))sub_10001BBBC);
        v33 = Logger.logObject.getter(v32);
        v34 = static os_log_type_t.default.getter(v33);
        if (os_log_type_enabled(v33, v34))
        {
          v35 = (uint8_t *)swift_slowAlloc(12, -1);
          v204 = swift_slowAlloc(32, -1);
          v214[0] = v204;
          *(_DWORD *)v35 = 136315138;
          v36 = Data.hexString.getter(*(_QWORD *)(v0 + 1744), *(_QWORD *)(v0 + 1752));
          *(_QWORD *)(v0 + 2488) = sub_100016940(v36, v37, v214);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 2488, v0 + 2496, v35 + 4, v35 + 12);
          swift_bridgeObjectRelease();
          sub_10015CD64(v27, (void (*)(uint64_t, uint64_t))sub_10001BC14);
          sub_10015CD64(v27, (void (*)(uint64_t, uint64_t))sub_10001BC14);
          _os_log_impl((void *)&_mh_execute_header, v33, v34, "AuthNonce: %s", v35, 0xCu);
          swift_arrayDestroy(v204, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v204, -1, -1);
          swift_slowDealloc(v35, -1, -1);
        }
        else
        {
          sub_10015CD64(v27, (void (*)(uint64_t, uint64_t))sub_10001BC14);
          sub_10015CD64(v27, (void (*)(uint64_t, uint64_t))sub_10001BC14);
        }

        v205 = v0 + 2472;
        sub_10015CD64(v27, (void (*)(uint64_t, uint64_t))sub_10001BBBC);
        v97 = sub_10015CD64(v27, (void (*)(uint64_t, uint64_t))sub_10001BBBC);
        v98 = Logger.logObject.getter(v97);
        v99 = static os_log_type_t.default.getter(v98);
        if (os_log_type_enabled(v98, v99))
        {
          v100 = (uint8_t *)swift_slowAlloc(12, -1);
          v101 = swift_slowAlloc(32, -1);
          v214[0] = v101;
          *(_DWORD *)v100 = 136315138;
          v102 = Data.hexString.getter(*(_QWORD *)(v0 + 1760), *(_QWORD *)(v0 + 1768));
          *(_QWORD *)(v0 + 2480) = sub_100016940(v102, v103, v214);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v210, v0 + 2488, v100 + 4, v100 + 12);
          swift_bridgeObjectRelease();
          sub_10015CD64(v27, (void (*)(uint64_t, uint64_t))sub_10001BC14);
          sub_10015CD64(v27, (void (*)(uint64_t, uint64_t))sub_10001BC14);
          _os_log_impl((void *)&_mh_execute_header, v98, v99, "SerialNumber: %s", v100, 0xCu);
          swift_arrayDestroy(v101, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v101, -1, -1);
          swift_slowDealloc(v100, -1, -1);
        }
        else
        {
          sub_10015CD64(v27, (void (*)(uint64_t, uint64_t))sub_10001BC14);
          sub_10015CD64(v27, (void (*)(uint64_t, uint64_t))sub_10001BC14);
        }

        v207 = v0 + 2464;
        sub_10015CD64(v27, (void (*)(uint64_t, uint64_t))sub_10001BBBC);
        v112 = sub_10015CD64(v27, (void (*)(uint64_t, uint64_t))sub_10001BBBC);
        v113 = Logger.logObject.getter(v112);
        v114 = static os_log_type_t.default.getter(v113);
        if (os_log_type_enabled(v113, v114))
        {
          v115 = (uint8_t *)swift_slowAlloc(12, -1);
          v116 = swift_slowAlloc(32, -1);
          v214[0] = v116;
          *(_DWORD *)v115 = 136315138;
          v117 = Data.hexString.getter(*(_QWORD *)(v0 + 1776), *(_QWORD *)(v0 + 1784));
          *(_QWORD *)(v0 + 2472) = sub_100016940(v117, v118, v214);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v205, v210, v115 + 4, v115 + 12);
          swift_bridgeObjectRelease();
          sub_10015CD64(v27, (void (*)(uint64_t, uint64_t))sub_10001BC14);
          sub_10015CD64(v27, (void (*)(uint64_t, uint64_t))sub_10001BC14);
          _os_log_impl((void *)&_mh_execute_header, v113, v114, "Alternate SerialNumber: %s", v115, 0xCu);
          swift_arrayDestroy(v116, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v116, -1, -1);
          swift_slowDealloc(v115, -1, -1);
        }
        else
        {
          sub_10015CD64(v27, (void (*)(uint64_t, uint64_t))sub_10001BC14);
          sub_10015CD64(v27, (void (*)(uint64_t, uint64_t))sub_10001BC14);
        }

        v213 = v0 + 2456;
        sub_10015CD64(v27, (void (*)(uint64_t, uint64_t))sub_10001BBBC);
        v119 = sub_10015CD64(v27, (void (*)(uint64_t, uint64_t))sub_10001BBBC);
        v120 = Logger.logObject.getter(v119);
        v121 = static os_log_type_t.default.getter(v120);
        if (os_log_type_enabled(v120, v121))
        {
          v122 = (uint8_t *)swift_slowAlloc(12, -1);
          v123 = swift_slowAlloc(32, -1);
          v214[0] = v123;
          *(_DWORD *)v122 = 136315138;
          v124 = Data.hexString.getter(*(_QWORD *)(v0 + 1792), *(_QWORD *)(v0 + 1800));
          *(_QWORD *)(v0 + 2464) = sub_100016940(v124, v125, v214);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v207, v205, v122 + 4, v122 + 12);
          swift_bridgeObjectRelease();
          sub_10015CD64(v27, (void (*)(uint64_t, uint64_t))sub_10001BC14);
          sub_10015CD64(v27, (void (*)(uint64_t, uint64_t))sub_10001BC14);
          _os_log_impl((void *)&_mh_execute_header, v120, v121, "seed: %s", v122, 0xCu);
          swift_arrayDestroy(v123, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v123, -1, -1);
          swift_slowDealloc(v122, -1, -1);
        }
        else
        {
          sub_10015CD64(v27, (void (*)(uint64_t, uint64_t))sub_10001BC14);
          sub_10015CD64(v27, (void (*)(uint64_t, uint64_t))sub_10001BC14);
        }

        v126 = v0 + 304;
        sub_10015CD64(v27, (void (*)(uint64_t, uint64_t))sub_10001BBBC);
        v127 = sub_10015CD64(v27, (void (*)(uint64_t, uint64_t))sub_10001BBBC);
        v128 = Logger.logObject.getter(v127);
        v129 = static os_log_type_t.default.getter(v128);
        if (os_log_type_enabled(v128, v129))
        {
          v130 = (uint8_t *)swift_slowAlloc(12, -1);
          v131 = swift_slowAlloc(32, -1);
          v214[0] = v131;
          *(_DWORD *)v130 = 136315138;
          v132 = Data.hexString.getter(*(_QWORD *)(v0 + 1824), *(_QWORD *)(v0 + 1832));
          *(_QWORD *)(v0 + 2456) = sub_100016940(v132, v133, v214);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v213, v207, v130 + 4, v130 + 12);
          swift_bridgeObjectRelease();
          sub_10015CD64(v27, (void (*)(uint64_t, uint64_t))sub_10001BC14);
          v126 = v0 + 304;
          sub_10015CD64(v27, (void (*)(uint64_t, uint64_t))sub_10001BC14);
          _os_log_impl((void *)&_mh_execute_header, v128, v129, "Certs: %s", v130, 0xCu);
          swift_arrayDestroy(v131, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v131, -1, -1);
          swift_slowDealloc(v130, -1, -1);
        }
        else
        {
          sub_10015CD64(v27, (void (*)(uint64_t, uint64_t))sub_10001BC14);
          sub_10015CD64(v27, (void (*)(uint64_t, uint64_t))sub_10001BC14);
        }

        sub_10015CD64(v27, (void (*)(uint64_t, uint64_t))sub_10001BBBC);
        v134 = sub_10015CD64(v27, (void (*)(uint64_t, uint64_t))sub_10001BBBC);
        v135 = Logger.logObject.getter(v134);
        v136 = static os_log_type_t.default.getter(v135);
        if (os_log_type_enabled(v135, v136))
        {
          v137 = (uint8_t *)swift_slowAlloc(12, -1);
          v138 = swift_slowAlloc(32, -1);
          v214[0] = v138;
          *(_DWORD *)v137 = 136315138;
          v139 = Data.hexString.getter(*(_QWORD *)(v0 + 1808), *(_QWORD *)(v0 + 1816));
          *(_QWORD *)(v0 + 2448) = sub_100016940(v139, v140, v214);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 2448, v213, v137 + 4, v137 + 12);
          swift_bridgeObjectRelease();
          sub_10015CD64(v27, (void (*)(uint64_t, uint64_t))sub_10001BC14);
          sub_10015CD64(v27, (void (*)(uint64_t, uint64_t))sub_10001BC14);
          _os_log_impl((void *)&_mh_execute_header, v135, v136, "Attestation: %s", v137, 0xCu);
          swift_arrayDestroy(v138, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v138, -1, -1);
          swift_slowDealloc(v137, -1, -1);
        }
        else
        {
          sub_10015CD64(v27, (void (*)(uint64_t, uint64_t))sub_10001BC14);
          sub_10015CD64(v27, (void (*)(uint64_t, uint64_t))sub_10001BC14);
        }

        v141 = *(_QWORD *)(v0 + 2536);
        *(_BYTE *)(v141 + 152) = 3;
        v142 = *(_QWORD *)(v0 + 1744);
        v143 = *(_QWORD *)(v0 + 1752);
        v144 = (uint64_t *)(*(_QWORD *)(v141 + 160) + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_authNonce);
        v146 = *v144;
        v145 = v144[1];
        *v144 = v142;
        v144[1] = v143;
        sub_10001BBBC(v142, v143);
        sub_10001EF3C(v146, v145);
        v147 = *(_QWORD *)(v0 + 1760);
        v148 = *(_QWORD *)(v0 + 1768);
        v149 = (uint64_t *)(*(_QWORD *)(v141 + 160)
                         + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessorySerialNumber);
        v151 = *v149;
        v150 = v149[1];
        *v149 = v147;
        v149[1] = v148;
        sub_10001BBBC(v147, v148);
        sub_10001EF3C(v151, v150);
        v152 = *(_QWORD *)(v0 + 1776);
        v153 = *(_QWORD *)(v0 + 1784);
        v154 = (uint64_t *)(*(_QWORD *)(v141 + 160)
                         + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_alternateSerialNumber);
        v156 = *v154;
        v155 = v154[1];
        *v154 = v152;
        v154[1] = v153;
        sub_10001BBBC(v152, v153);
        sub_10001EF3C(v156, v155);
        v157 = *(_QWORD *)(v0 + 1792);
        v158 = *(_QWORD *)(v0 + 1800);
        v159 = (uint64_t *)(*(_QWORD *)(v141 + 160) + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_seedK1);
        v161 = *v159;
        v160 = v159[1];
        *v159 = v157;
        v159[1] = v158;
        sub_10001BBBC(v157, v158);
        sub_10001EF3C(v161, v160);
        v162 = *(_QWORD *)(v0 + 1824);
        v163 = *(_QWORD *)(v0 + 1832);
        v164 = (uint64_t *)(*(_QWORD *)(v141 + 160) + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessoryCerts);
        v166 = *v164;
        v165 = v164[1];
        *v164 = v162;
        v164[1] = v163;
        sub_10001BBBC(v162, v163);
        sub_10001EF3C(v166, v165);
        v167 = *(_QWORD *)(v0 + 1808);
        v168 = *(_QWORD *)(v0 + 1816);
        v169 = (uint64_t *)(*(_QWORD *)(v141 + 160) + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_attestation);
        v171 = *v169;
        v170 = v169[1];
        *v169 = v167;
        v169[1] = v168;
        sub_10001BBBC(v167, v168);
        sub_10001EF3C(v171, v170);
        v172 = *(_QWORD *)(v0 + 1840);
        v173 = *(_QWORD *)(v0 + 1848);
        v174 = (uint64_t *)(*(_QWORD *)(v141 + 160) + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_csr);
        v176 = *v174;
        v175 = v174[1];
        *v174 = v172;
        v174[1] = v173;
        sub_10001BBBC(v172, v173);
        sub_10001EF3C(v176, v175);
        v177 = *(_QWORD *)(v0 + 1856);
        v178 = *(_QWORD *)(v0 + 1864);
        v179 = (uint64_t *)(*(_QWORD *)(v141 + 160)
                         + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessorySignature);
        v181 = *v179;
        v180 = v179[1];
        *v179 = v177;
        v179[1] = v178;
        sub_10001BBBC(v177, v178);
        sub_10001EF3C(v181, v180);
        v182 = (_QWORD *)swift_task_alloc(dword_10110F81C);
        *(_QWORD *)(v0 + 2576) = v182;
        *v182 = v0;
        v182[1] = sub_1009EFE14;
        return sub_1009E5B28(v126);
      }
      v71 = (uint64_t)v3;
      sub_10015BAD8(v209, (_OWORD *)(v0 + 736));
      v72 = (uint64_t *)sub_10015BC30(v0 + 736);
      sub_10015CD64(v72, (void (*)(uint64_t, uint64_t))sub_10001BBBC);
      v73 = sub_10015CD64(v72, (void (*)(uint64_t, uint64_t))sub_10001BBBC);
      v74 = Logger.logObject.getter(v73);
      v75 = static os_log_type_t.error.getter(v74);
      if (os_log_type_enabled(v74, v75))
      {
        v76 = (uint8_t *)swift_slowAlloc(12, -1);
        v77 = swift_slowAlloc(32, -1);
        v214[0] = v77;
        *(_DWORD *)v76 = 136446210;
        sub_10015B874();
        v78 = String.init<A>(describing:)(v0 + 2176, v26);
        *v203 = sub_100016940(v78, v79, v214);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v203, v0 + 2432, v76 + 4, v76 + 12);
        swift_bridgeObjectRelease();
        sub_1009F6DD0(v71, (void (*)(void))sub_10001BC14);
        sub_1009F6DD0(v71, (void (*)(void))sub_10001BC14);
        _os_log_impl((void *)&_mh_execute_header, v74, v75, "Invalid sendPairingData payload %{public}s", v76, 0xCu);
        swift_arrayDestroy(v77, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v77, -1, -1);
        swift_slowDealloc(v76, -1, -1);
      }
      else
      {
        sub_1009F6DD0(v71, (void (*)(void))sub_10001BC14);
        sub_1009F6DD0(v71, (void (*)(void))sub_10001BC14);
      }

      v104 = sub_100350CCC();
      v105 = swift_allocError(&type metadata for PencilPairingService.Error, v104, 0, 0);
      *(_OWORD *)v106 = xmmword_100E2E420;
      *(_BYTE *)(v106 + 16) = 3;
      swift_willThrow(v105);
      v107 = v71;
      goto LABEL_43;
    }
    sub_1009F6DD0((uint64_t)v3, (void (*)(void))sub_10001BBBC);
    v64 = sub_1009F6DD0((uint64_t)v3, (void (*)(void))sub_10001BBBC);
    v65 = Logger.logObject.getter(v64);
    v66 = static os_log_type_t.error.getter(v65);
    if (os_log_type_enabled(v65, v66))
    {
      v67 = (uint8_t *)swift_slowAlloc(12, -1);
      v68 = swift_slowAlloc(32, -1);
      v214[0] = v68;
      *(_DWORD *)v67 = 136446210;
      sub_10015BAD8(v3, (_OWORD *)(v0 + 1456));
      sub_1009F6DD0((uint64_t)v3, (void (*)(void))sub_10001BBBC);
      v69 = String.init<A>(describing:)(v0 + 1456, &type metadata for PencilPairingCommand);
      *(_QWORD *)(v0 + 2440) = sub_100016940(v69, v70, v214);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 2440, v0 + 2448, v67 + 4, v67 + 12);
      swift_bridgeObjectRelease();
      sub_1009F6DD0((uint64_t)v3, (void (*)(void))sub_10001BC14);
      sub_1009F6DD0((uint64_t)v3, (void (*)(void))sub_10001BC14);
      _os_log_impl((void *)&_mh_execute_header, v65, v66, "Received unexpected command %{public}s", v67, 0xCu);
      swift_arrayDestroy(v68, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v68, -1, -1);
      swift_slowDealloc(v67, -1, -1);
    }
    else
    {
      sub_1009F6DD0((uint64_t)v3, (void (*)(void))sub_10001BC14);
      sub_1009F6DD0((uint64_t)v3, (void (*)(void))sub_10001BC14);
    }

    v93 = sub_100350CCC();
    v94 = swift_allocError(&type metadata for PencilPairingService.Error, v93, 0, 0);
    v96 = xmmword_100E2E3F0;
LABEL_42:
    *(_OWORD *)v95 = v96;
    *(_BYTE *)(v95 + 16) = 3;
    swift_willThrow(v94);
    v107 = (uint64_t)v3;
LABEL_43:
    sub_1009F6DD0(v107, (void (*)(void))sub_10001BC14);
LABEL_44:
    v109 = *(_QWORD *)(v0 + 2552);
    v110 = *(_QWORD *)(v0 + 2544);
    swift_task_dealloc(*(_QWORD *)(v0 + 2560));
    swift_task_dealloc(v109);
    swift_task_dealloc(v110);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v41 = sub_10015BC30((uint64_t)v2);
  v42 = Logger.logObject.getter(v41);
  v43 = static os_log_type_t.default.getter(v42);
  if (os_log_type_enabled(v42, v43))
  {
    v44 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v44 = 0;
    _os_log_impl((void *)&_mh_execute_header, v42, v43, "Received pairing status.", v44, 2u);
    swift_slowDealloc(v44, -1, -1);
  }
  v45 = *(_QWORD *)(v0 + 2536);

  *(_BYTE *)(v45 + 152) = 5;
  sub_10015B874();
  v46 = sub_10001A9A8(&qword_1010EC540);
  if (!swift_dynamicCast(v0 + 2336, v0 + 2256, v46, &type metadata for PencilSendPairingStatusCommandPayload, 6))
  {
    sub_10015BAD8(v209, (_OWORD *)(v0 + 1888));
    v80 = (uint64_t *)sub_10015BC30(v0 + 1888);
    v82 = *v80;
    v81 = v80[1];
    v83 = v80[2];
    v84 = v80[3];
    sub_10001BBBC(*v80, v81);
    sub_10001BBBC(v83, v84);
    sub_10001BBBC(v82, v81);
    v85 = sub_10001BBBC(v83, v84);
    v86 = Logger.logObject.getter(v85);
    v87 = static os_log_type_t.error.getter(v86);
    if (os_log_type_enabled(v86, v87))
    {
      v88 = (uint64_t)v3;
      v89 = (uint8_t *)swift_slowAlloc(12, -1);
      v212 = swift_slowAlloc(32, -1);
      v214[0] = v212;
      *(_DWORD *)v89 = 136446210;
      sub_10015B874();
      v90 = String.init<A>(describing:)(v0 + 2296, v46);
      *(_QWORD *)(v0 + 2432) = sub_100016940(v90, v91, v214);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 2432, v0 + 2440, v89 + 4, v89 + 12);
      swift_bridgeObjectRelease();
      sub_1009F6DD0(v88, (void (*)(void))sub_10001BC14);
      sub_1009F6DD0(v88, (void (*)(void))sub_10001BC14);
      _os_log_impl((void *)&_mh_execute_header, v86, v87, " Invalid sendPairingStatus payload %{public}s", v89, 0xCu);
      swift_arrayDestroy(v212, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v212, -1, -1);
      v92 = v89;
      v3 = (_OWORD *)v88;
      swift_slowDealloc(v92, -1, -1);
    }
    else
    {
      sub_1009F6DD0((uint64_t)v3, (void (*)(void))sub_10001BC14);
      sub_1009F6DD0((uint64_t)v3, (void (*)(void))sub_10001BC14);
    }

    v108 = sub_100350CCC();
    v94 = swift_allocError(&type metadata for PencilPairingService.Error, v108, 0, 0);
    v96 = xmmword_100E2E420;
    goto LABEL_42;
  }
  v211 = (uint64_t)v3;
  v47 = *(_QWORD *)(v0 + 2336);
  *(_QWORD *)(v0 + 2592) = v47;
  v48 = *(_QWORD *)(v0 + 2344);
  *(_QWORD *)(v0 + 2600) = v48;
  v49 = *(_QWORD *)(v0 + 2352);
  *(_QWORD *)(v0 + 2608) = v49;
  v50 = *(_QWORD *)(v0 + 2360);
  *(_QWORD *)(v0 + 2616) = v50;
  sub_10001BBBC(v47, v48);
  v51 = sub_100691A58(v47, v48);
  if ((_BYTE)v51)
  {
    v52 = v51;
    v53 = Logger.logObject.getter(v51);
    v54 = static os_log_type_t.error.getter(v53);
    if (os_log_type_enabled(v53, v54))
    {
      v206 = v49;
      v55 = (uint8_t *)swift_slowAlloc(12, -1);
      v201 = v50;
      v56 = swift_slowAlloc(32, -1);
      v214[0] = v56;
      *(_DWORD *)v55 = 136446210;
      sub_1006918F8(v52);
      *(_QWORD *)(v0 + 2416) = sub_100016940(v57, v58, v214);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 2416, v0 + 2424, v55 + 4, v55 + 12);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v53, v54, " Pairing failed with status %{public}s", v55, 0xCu);
      swift_arrayDestroy(v56, 1, (char *)&type metadata for Any + 8);
      v59 = v56;
      v50 = v201;
      swift_slowDealloc(v59, -1, -1);
      v60 = v55;
      v49 = v206;
      swift_slowDealloc(v60, -1, -1);
    }

    v61 = sub_100350CCC();
    v62 = swift_allocError(&type metadata for PencilPairingService.Error, v61, 0, 0);
    *(_OWORD *)v63 = xmmword_100E2E410;
    *(_BYTE *)(v63 + 16) = 3;
    swift_willThrow(v62);
    sub_10001BC14(v47, v48);
    sub_10001BC14(v49, v50);
    sub_1009F6DD0(v211, (void (*)(void))sub_10001BC14);
    goto LABEL_44;
  }
  v183 = *(_QWORD *)(v0 + 2536);
  v184 = (uint64_t *)(*(_QWORD *)(v183 + 160) + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_status);
  v186 = *v184;
  v185 = v184[1];
  *v184 = v47;
  v184[1] = v48;
  sub_10001BBBC(v47, v48);
  sub_10001EF3C(v186, v185);
  v187 = (uint64_t *)(*(_QWORD *)(v183 + 160) + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_payloadSignatureS4);
  v189 = *v187;
  v188 = v187[1];
  *v187 = v49;
  v187[1] = v50;
  v208 = v49;
  sub_10001BBBC(v49, v50);
  v190 = sub_10001EF3C(v189, v188);
  v191 = Logger.logObject.getter(v190);
  v192 = static os_log_type_t.default.getter(v191);
  if (os_log_type_enabled(v191, v192))
  {
    v193 = (uint8_t *)swift_slowAlloc(12, -1);
    v202 = swift_slowAlloc(32, -1);
    v214[0] = v202;
    *(_DWORD *)v193 = 136446210;
    sub_1006918F8(0);
    *(_QWORD *)(v0 + 2384) = sub_100016940(v194, v195, v214);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 2384, v0 + 2392, v193 + 4, v193 + 12);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v191, v192, "status: %{public}s", v193, 0xCu);
    swift_arrayDestroy(v202, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v202, -1, -1);
    swift_slowDealloc(v193, -1, -1);
  }

  sub_10001BBBC(v47, v48);
  sub_10001BBBC(v208, v50);
  sub_10001BBBC(v47, v48);
  v196 = sub_10001BBBC(v208, v50);
  v197 = Logger.logObject.getter(v196);
  v198 = static os_log_type_t.debug.getter(v197);
  if (os_log_type_enabled(v197, v198))
  {
    v199 = (_DWORD *)swift_slowAlloc(22, -1);
    v214[0] = swift_slowAlloc(32, -1);
    *v199 = 134218242;
    __asm { BR              X11 }
  }
  sub_10001BC14(v47, v48);
  sub_10001BC14(v208, v50);
  sub_10001BC14(v47, v48);
  sub_10001BC14(v208, v50);

  v200 = (_QWORD *)swift_task_alloc(dword_10110F814);
  *(_QWORD *)(v0 + 2624) = v200;
  *v200 = v0;
  v200[1] = sub_1009EFFA0;
  return sub_1009F04EC(*(_QWORD *)(v0 + 2560), *(_QWORD *)(v0 + 2520));
}

uint64_t sub_1009EFE14()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 2576);
  *(_QWORD *)(*v1 + 2584) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = *(_QWORD *)(v2 + 2536);
    v5 = sub_1009EFF28;
  }
  else
  {
    v6 = *(_QWORD *)(v2 + 2536);
    sub_10015BAD8((_OWORD *)(v2 + 304), (_OWORD *)(v2 + 1600));
    v5 = sub_1009EFE8C;
    v4 = v6;
  }
  return swift_task_switch(v5, v4, 0);
}

uint64_t sub_1009EFE8C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_10015CD64((uint64_t *)(v0 + 1744), (void (*)(uint64_t, uint64_t))sub_10001BC14);
  sub_1009F6DD0(v0 + 160, (void (*)(void))sub_10001BC14);
  sub_10015BAD8((_OWORD *)(v0 + 1600), (_OWORD *)(v0 + 1312));
  v1 = *(_QWORD *)(v0 + 2560);
  v2 = *(_QWORD *)(v0 + 2552);
  v3 = *(_QWORD *)(v0 + 2544);
  sub_10015BAD8((_OWORD *)(v0 + 1312), *(_OWORD **)(v0 + 2512));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1009EFF28()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_10015CD64((uint64_t *)(v0 + 1744), (void (*)(uint64_t, uint64_t))sub_10001BC14);
  sub_1009F6DD0(v0 + 160, (void (*)(void))sub_10001BC14);
  v1 = *(_QWORD *)(v0 + 2552);
  v2 = *(_QWORD *)(v0 + 2544);
  swift_task_dealloc(*(_QWORD *)(v0 + 2560));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1009EFFA0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 2624);
  *(_QWORD *)(*v1 + 2632) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_1009F0460;
  else
    v4 = sub_1009F0004;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 2536), 0);
}

uint64_t sub_1009F0004()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v42;
  uint64_t v43[2];

  if (qword_1010EA318 != -1)
    swift_once(&qword_1010EA318, sub_100B5E330);
  v42 = v0 + 160;
  v1 = *(_QWORD *)(v0 + 2560);
  v2 = *(_QWORD *)(v0 + 2552);
  v3 = *(_QWORD *)(v0 + 2544);
  sub_10001A9E8(*(_QWORD *)(v0 + 2568), (uint64_t)qword_1011B7DF8);
  sub_10005972C(v1, v2, type metadata accessor for LocalFindableAccessoryRecord);
  v4 = sub_10005972C(v1, v3, type metadata accessor for LocalFindableAccessoryRecord);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.default.getter(v5);
  v7 = os_log_type_enabled(v5, v6);
  v8 = *(_QWORD *)(v0 + 2552);
  v9 = *(_QWORD *)(v0 + 2544);
  if (v7)
  {
    v10 = swift_slowAlloc(32, -1);
    v11 = swift_slowAlloc(64, -1);
    v43[0] = v11;
    *(_DWORD *)v10 = 136315651;
    v12 = sub_1000A8F4C();
    *(_QWORD *)(v0 + 2408) = sub_100016940(v12, v13, v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 2408, v0 + 2416, v10 + 4, v10 + 12);
    swift_bridgeObjectRelease();
    sub_1000126B0(v8, type metadata accessor for LocalFindableAccessoryRecord);
    *(_WORD *)(v10 + 12) = 2160;
    *(_QWORD *)(v0 + 2400) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 2400, v0 + 2408, v10 + 14, v10 + 22);
    *(_WORD *)(v10 + 22) = 2081;
    v14 = type metadata accessor for UUID(0);
    v15 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v16 = dispatch thunk of CustomStringConvertible.description.getter(v14, v15);
    *(_QWORD *)(v0 + 2392) = sub_100016940(v16, v17, v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 2392, v0 + 2400, v10 + 24, v10 + 32);
    swift_bridgeObjectRelease();
    sub_1000126B0(v9, type metadata accessor for LocalFindableAccessoryRecord);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Created beacon: %s. BeaconId: %{private,mask.hash}s", (uint8_t *)v10, 0x20u);
    swift_arrayDestroy(v11, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v11, -1, -1);
    swift_slowDealloc(v10, -1, -1);
  }
  else
  {
    sub_1000126B0(*(_QWORD *)(v0 + 2552), type metadata accessor for LocalFindableAccessoryRecord);
    sub_1000126B0(v9, type metadata accessor for LocalFindableAccessoryRecord);
  }

  v18 = *(_QWORD *)(v0 + 2632);
  *(_BYTE *)(*(_QWORD *)(v0 + 2536) + 152) = 9;
  v19 = static Data.random(bytes:)(qword_1011B7F10);
  v21 = v20;
  sub_10001BBBC(v19, v20);
  sub_10098E72C();
  BinaryDecodable.init(data:)(v22, v19, v21);
  if (v18)
  {
    v23 = *(_QWORD *)(v0 + 2616);
    v24 = *(_QWORD *)(v0 + 2608);
    v25 = *(_QWORD *)(v0 + 2600);
    v26 = *(_QWORD *)(v0 + 2592);
    v27 = *(_QWORD *)(v0 + 2560);
    swift_errorRelease(v18);
    v28 = sub_100350CCC();
    v29 = swift_allocError(&type metadata for PencilPairingService.Error, v28, 0, 0);
    *(_OWORD *)v30 = xmmword_100E2E420;
    *(_BYTE *)(v30 + 16) = 3;
    swift_willThrow(v29);
    sub_1009F6DD0(v42, (void (*)(void))sub_10001BC14);
    sub_10001BC14(v19, v21);
    sub_10001BC14(v26, v25);
    sub_10001BC14(v24, v23);
    sub_1000126B0(v27, type metadata accessor for LocalFindableAccessoryRecord);
    v31 = *(_QWORD *)(v0 + 2552);
    v32 = *(_QWORD *)(v0 + 2544);
    swift_task_dealloc(*(_QWORD *)(v0 + 2560));
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
  }
  else
  {
    v33 = *(_QWORD *)(v0 + 2616);
    v34 = *(_QWORD *)(v0 + 2608);
    v35 = *(_QWORD *)(v0 + 2600);
    v36 = *(_QWORD *)(v0 + 2592);
    v37 = *(_QWORD *)(v0 + 2560);
    sub_1009F6DD0(v42, (void (*)(void))sub_10001BC14);
    sub_10001BC14(v19, v21);
    sub_10001BC14(v36, v35);
    sub_10001BC14(v34, v33);
    sub_10015D6CC(v0 + 880);
    sub_1000126B0(v37, type metadata accessor for LocalFindableAccessoryRecord);
    sub_10015BAD8((_OWORD *)(v0 + 880), (_OWORD *)(v0 + 1312));
    v38 = *(_QWORD *)(v0 + 2560);
    v39 = *(_QWORD *)(v0 + 2552);
    v40 = *(_QWORD *)(v0 + 2544);
    sub_10015BAD8((_OWORD *)(v0 + 1312), *(_OWORD **)(v0 + 2512));
    swift_task_dealloc(v38);
    swift_task_dealloc(v39);
    swift_task_dealloc(v40);
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1009F0460()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 2616);
  v2 = *(_QWORD *)(v0 + 2608);
  sub_10001BC14(*(_QWORD *)(v0 + 2592), *(_QWORD *)(v0 + 2600));
  sub_10001BC14(v2, v1);
  sub_1009F6DD0(v0 + 160, (void (*)(void))sub_10001BC14);
  v3 = *(_QWORD *)(v0 + 2552);
  v4 = *(_QWORD *)(v0 + 2544);
  swift_task_dealloc(*(_QWORD *)(v0 + 2560));
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1009F04EC(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;

  v3[27] = a2;
  v3[28] = v2;
  v3[26] = a1;
  v3[29] = *v2;
  v4 = sub_10001A9A8(&qword_1010F46C0);
  v3[30] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for CloudKitCoordinator.Database(0);
  v3[31] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v3[32] = v6;
  v3[33] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for LocalFindableAccessoryRecord(0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[34] = swift_task_alloc(v7);
  v3[35] = swift_task_alloc(v7);
  v8 = sub_10001A9A8(&qword_1010EF7C0);
  v3[36] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v3[37] = v9;
  v3[38] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for UUID(0);
  v3[39] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v3[40] = v11;
  v12 = *(_QWORD *)(v11 + 64);
  v3[41] = v12;
  v13 = (v12 + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[42] = swift_task_alloc(v13);
  v3[43] = swift_task_alloc(v13);
  v14 = type metadata accessor for PeripheralConnectionMaterial(0);
  v3[44] = v14;
  v15 = *(_QWORD *)(v14 - 8);
  v3[45] = v15;
  v3[46] = swift_task_alloc((*(_QWORD *)(v15 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = (*(_QWORD *)(*(_QWORD *)(sub_10001A9A8(&qword_1010F08C8) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[47] = swift_task_alloc(v16);
  v3[48] = swift_task_alloc(v16);
  v17 = type metadata accessor for PeripheralPairingInfo(0);
  v3[49] = v17;
  v18 = *(_QWORD *)(v17 - 8);
  v3[50] = v18;
  v19 = (*(_QWORD *)(v18 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[51] = swift_task_alloc(v19);
  v3[52] = swift_task_alloc(v19);
  v3[53] = swift_task_alloc(v19);
  v20 = (*(_QWORD *)(*(_QWORD *)(sub_10001A9A8(&qword_10110F6F8) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[54] = swift_task_alloc(v20);
  v3[55] = swift_task_alloc(v20);
  v21 = type metadata accessor for String.Encoding(0);
  v3[56] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v21 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1009F0708, v2, 0);
}

uint64_t sub_1009F0708()
{
  _QWORD *v0;
  void *v1;
  id v2;
  unsigned int v3;
  NSString v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t (*v35)(void);
  uint64_t result;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  __int128 *v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  NSObject *v44;
  os_log_type_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t (*v60)(void);
  uint64_t v61[2];

  if (qword_1010EA198 != -1)
    swift_once(&qword_1010EA198, sub_100ACDE4C);
  v1 = (void *)qword_1011B7C08;
  v2 = objc_msgSend((id)objc_opt_self(FMSystemInfo), "sharedInstance");
  v3 = objc_msgSend(v2, "isInternalBuild");

  if (v3)
  {
    v4 = String._bridgeToObjectiveC()();
    v5 = objc_msgSend(v1, "BOOLForKey:", v4);

    if (v5)
    {
      if (qword_1010EA100 != -1)
        swift_once(&qword_1010EA100, sub_1009B44BC);
      v6 = type metadata accessor for Logger(0);
      v7 = sub_10001A9E8(v6, (uint64_t)qword_10110F2A8);
      v8 = Logger.logObject.getter(v7);
      v9 = static os_log_type_t.default.getter(v8);
      if (os_log_type_enabled(v8, v9))
      {
        v10 = (uint8_t *)swift_slowAlloc(12, -1);
        v11 = swift_slowAlloc(32, -1);
        v61[0] = v11;
        *(_DWORD *)v10 = 136446210;
        v0[25] = sub_100016940(0xD000000000000019, 0x8000000100EEC0D0, v61);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 25, v0 + 26, v10 + 4, v10 + 12);
        _os_log_impl((void *)&_mh_execute_header, v8, v9, "%{public}s SimulateLocalFindablePairingFailure defaults set. Failing beacon creation!", v10, 0xCu);
        swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v11, -1, -1);
        swift_slowDealloc(v10, -1, -1);
      }

      v12 = sub_100350CCC();
      v13 = swift_allocError(&type metadata for PencilPairingService.Error, v12, 0, 0);
      v15 = 19;
LABEL_18:
      *(_QWORD *)v14 = v15;
      *(_QWORD *)(v14 + 8) = 0;
      *(_BYTE *)(v14 + 16) = 3;
      swift_willThrow(v13);
      v26 = v0[55];
      v28 = v0[53];
      v27 = v0[54];
      v30 = v0[51];
      v29 = v0[52];
      v31 = v0[47];
      v32 = v0[48];
      v33 = v0[46];
      v34 = v0[43];
      v53 = v0[42];
      v54 = v0[38];
      v55 = v0[35];
      v56 = v0[34];
      v57 = v0[33];
      v59 = v0[30];
      swift_task_dealloc(v0[56]);
      swift_task_dealloc(v26);
      swift_task_dealloc(v27);
      swift_task_dealloc(v28);
      swift_task_dealloc(v29);
      swift_task_dealloc(v30);
      swift_task_dealloc(v32);
      swift_task_dealloc(v31);
      swift_task_dealloc(v33);
      swift_task_dealloc(v34);
      swift_task_dealloc(v53);
      swift_task_dealloc(v54);
      swift_task_dealloc(v55);
      swift_task_dealloc(v56);
      swift_task_dealloc(v57);
      swift_task_dealloc(v59);
      v35 = (uint64_t (*)(void))v0[1];
      return v35();
    }
  }
  v16 = (uint64_t *)(*(_QWORD *)(v0[28] + 160)
                  + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessorySerialNumber);
  v17 = *v16;
  v0[57] = *v16;
  v18 = v16[1];
  v0[58] = v18;
  if (v18 >> 60 == 15)
  {
LABEL_13:
    if (qword_1010EA100 != -1)
      swift_once(&qword_1010EA100, sub_1009B44BC);
    v20 = type metadata accessor for Logger(0);
    v21 = sub_10001A9E8(v20, (uint64_t)qword_10110F2A8);
    v22 = Logger.logObject.getter(v21);
    v23 = static os_log_type_t.error.getter(v22);
    if (os_log_type_enabled(v22, v23))
    {
      v24 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v24 = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "Invalid serial number.", v24, 2u);
      swift_slowDealloc(v24, -1, -1);
    }

    v25 = sub_100350CCC();
    v13 = swift_allocError(&type metadata for PencilPairingService.Error, v25, 0, 0);
    v15 = 7;
    goto LABEL_18;
  }
  v0[18] = v17;
  v0[19] = v18;
  sub_10001BBBC(v17, v18);
  v19 = sub_100035530();
  if ((DataProtocol.isNull.getter(&type metadata for Data, v19) & 1) != 0)
  {
    sub_10001EF3C(v17, v18);
    goto LABEL_13;
  }
  v37 = Data.trimmed.getter(v17, v18);
  v39 = v38;
  v0[59] = v37;
  v0[60] = v38;
  if (qword_1010EA318 != -1)
    swift_once(&qword_1010EA318, sub_100B5E330);
  v40 = (__int128 *)(v0 + 7);
  v41 = v0 + 12;
  v42 = type metadata accessor for Logger(0);
  v0[61] = v42;
  sub_10001A9E8(v42, (uint64_t)qword_1011B7DF8);
  sub_10001BBBC(v37, v39);
  v43 = sub_10001BBBC(v37, v39);
  v44 = Logger.logObject.getter(v43);
  v45 = static os_log_type_t.default.getter(v44);
  if (os_log_type_enabled(v44, v45))
  {
    v46 = v0[56];
    v47 = swift_slowAlloc(22, -1);
    v58 = swift_slowAlloc(32, -1);
    v61[0] = v58;
    *(_DWORD *)v47 = 141558275;
    v0[23] = 1752392040;
    v48 = UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 23, v0 + 24, v47 + 4, v47 + 12);
    *(_WORD *)(v47 + 12) = 2081;
    static String.Encoding.utf8.getter(v48);
    v49 = String.init(data:encoding:)(v37, v39, v46);
    if (!v50)
      v49 = Data.hexString.getter(v37, v39);
    v0[24] = sub_100016940(v49, v50, v61);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 25, v47 + 14, v47 + 22);
    swift_bridgeObjectRelease();
    sub_10001BC14(v37, v39);
    sub_10001BC14(v37, v39);
    _os_log_impl((void *)&_mh_execute_header, v44, v45, "Creating beacon for %{private,mask.hash}s", (uint8_t *)v47, 0x16u);
    swift_arrayDestroy(v58, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v58, -1, -1);
    swift_slowDealloc(v47, -1, -1);

    v41 = v0 + 12;
    v40 = (__int128 *)(v0 + 7);
  }
  else
  {
    sub_10001BC14(v37, v39);
    sub_10001BC14(v37, v39);

  }
  v51 = qword_1010EA5B0;
  swift_retain();
  if (v51 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v41, 0, 0);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, (uint64_t)v40, &qword_1010EE220);
  if (v0[10])
  {
    sub_10000F9FC(v40, (uint64_t)(v0 + 2));
    swift_release();
    sub_10001AA44(v0 + 2, v0[5]);
    v60 = (uint64_t (*)(void))((char *)&dword_1010EBC30 + dword_1010EBC30);
    v52 = (_QWORD *)swift_task_alloc(unk_1010EBC34);
    v0[62] = v52;
    *v52 = v0;
    v52[1] = sub_1009F0E30;
    v35 = v60;
    return v35();
  }
  __break(1u);
  return result;
}

uint64_t sub_1009F0E30(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 496);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 224);
  *(_QWORD *)(*(_QWORD *)v1 + 504) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1009F0E90, v3, 0);
}

uint64_t sub_1009F0E90()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v1 = (_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 504);
  if (v2)
  {
    v3 = *(_QWORD *)(v0 + 232);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    v4 = swift_allocObject(&unk_1010A1108, 32, 7);
    *(_QWORD *)(v0 + 512) = v4;
    *(_QWORD *)(v4 + 16) = v2;
    *(_QWORD *)(v4 + 24) = v3;
    v5 = async function pointer to withTimeout<A>(_:block:)[1];
    swift_retain();
    v6 = (_QWORD *)swift_task_alloc(v5);
    *(_QWORD *)(v0 + 520) = v6;
    *v6 = v0;
    v6[1] = sub_1009F10A4;
    return withTimeout<A>(_:block:)(v6, 0x8155A43676E00000, 6, &unk_10110F850, v4, &type metadata for () + 1);
  }
  else
  {
    v9 = *(_QWORD *)(v0 + 472);
    v8 = *(_QWORD *)(v0 + 480);
    v11 = *(_QWORD *)(v0 + 456);
    v10 = *(_QWORD *)(v0 + 464);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    v12 = sub_100033220();
    v29 = swift_allocError(&type metadata for DaemonError, v12, 0, 0);
    *v13 = 0xD000000000000013;
    v13[1] = 0x8000000100ED7110;
    swift_willThrow(v29);
    sub_10001BC14(v9, v8);
    sub_10001EF3C(v11, v10);
    v14 = *(_QWORD *)(v0 + 440);
    v16 = *(_QWORD *)(v0 + 424);
    v15 = *(_QWORD *)(v0 + 432);
    v18 = *(_QWORD *)(v0 + 408);
    v17 = *(_QWORD *)(v0 + 416);
    v19 = *(_QWORD *)(v0 + 376);
    v20 = *(_QWORD *)(v0 + 384);
    v21 = *(_QWORD *)(v0 + 368);
    v22 = *(_QWORD *)(v0 + 344);
    v23 = *(_QWORD *)(v0 + 336);
    v24 = *(_QWORD *)(v0 + 304);
    v25 = *(_QWORD *)(v0 + 280);
    v26 = *(_QWORD *)(v0 + 272);
    v27 = *(_QWORD *)(v0 + 264);
    v28 = *(_QWORD *)(v0 + 240);
    swift_task_dealloc(*(_QWORD *)(v0 + 448));
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v20);
    swift_task_dealloc(v19);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1009F10A4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 520);
  *(_QWORD *)(*v1 + 528) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = *(_QWORD *)(v2 + 224);
    v5 = sub_1009F1214;
  }
  else
  {
    v6 = *(_QWORD *)(v2 + 224);
    swift_release();
    v5 = sub_1009F1118;
    v4 = v6;
  }
  return swift_task_switch(v5, v4, 0);
}

uint64_t sub_1009F1118()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = type metadata accessor for Peripheral(0);
  v0[67] = v1;
  v2 = sub_100006204(&qword_1010EC4A0, (uint64_t (*)(uint64_t))&type metadata accessor for Peripheral, (uint64_t)&protocol conformance descriptor for Peripheral);
  v0[68] = v2;
  v3 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of PeripheralProtocol.pairingInfo.getter
                                  + 1));
  v0[69] = v3;
  *v3 = v0;
  v3[1] = sub_1009F11B0;
  return dispatch thunk of PeripheralProtocol.pairingInfo.getter(v0[53], v1, v2);
}

uint64_t sub_1009F11B0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 552);
  *(_QWORD *)(*v1 + 560) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_1009F16E8;
  else
    v4 = sub_1009F1348;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 224), 0);
}

uint64_t sub_1009F1214()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v2 = *(_QWORD *)(v0 + 472);
  v1 = *(_QWORD *)(v0 + 480);
  sub_10001EF3C(*(_QWORD *)(v0 + 456), *(_QWORD *)(v0 + 464));
  sub_10001BC14(v2, v1);
  swift_release();
  swift_release();
  v3 = *(_QWORD *)(v0 + 440);
  v5 = *(_QWORD *)(v0 + 424);
  v4 = *(_QWORD *)(v0 + 432);
  v7 = *(_QWORD *)(v0 + 408);
  v6 = *(_QWORD *)(v0 + 416);
  v8 = *(_QWORD *)(v0 + 376);
  v9 = *(_QWORD *)(v0 + 384);
  v10 = *(_QWORD *)(v0 + 368);
  v11 = *(_QWORD *)(v0 + 344);
  v13 = *(_QWORD *)(v0 + 336);
  v14 = *(_QWORD *)(v0 + 304);
  v15 = *(_QWORD *)(v0 + 280);
  v16 = *(_QWORD *)(v0 + 272);
  v17 = *(_QWORD *)(v0 + 264);
  v18 = *(_QWORD *)(v0 + 240);
  swift_task_dealloc(*(_QWORD *)(v0 + 448));
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v9);
  swift_task_dealloc(v8);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1009F1348()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  void (*v18)(uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  if (qword_1010EA100 != -1)
    swift_once(&qword_1010EA100, sub_1009B44BC);
  v1 = v0[52];
  v2 = v0[53];
  v3 = v0[49];
  v4 = v0[50];
  v0[71] = sub_10001A9E8(v0[61], (uint64_t)qword_10110F2A8);
  v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v6 = v5(v1, v2, v3);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.default.getter(v7);
  v9 = os_log_type_enabled(v7, v8);
  v10 = v0[52];
  v11 = v0[49];
  v12 = v0[50];
  if (v9)
  {
    v13 = (uint8_t *)swift_slowAlloc(12, -1);
    v14 = swift_slowAlloc(32, -1);
    v45 = v14;
    *(_DWORD *)v13 = 136315138;
    v15 = sub_100006204(&qword_10110F880, (uint64_t (*)(uint64_t))&type metadata accessor for PeripheralPairingInfo, (uint64_t)&protocol conformance descriptor for PeripheralPairingInfo);
    v16 = dispatch thunk of CustomStringConvertible.description.getter(v11, v15);
    v0[22] = sub_100016940(v16, v17, &v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 22, v0 + 23, v13 + 4, v13 + 12);
    swift_bridgeObjectRelease();
    v18 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
    v18(v10, v11);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Peripheral pairing info: %s", v13, 0xCu);
    swift_arrayDestroy(v14, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v14, -1, -1);
    swift_slowDealloc(v13, -1, -1);
  }
  else
  {
    v18 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
    v18(v0[52], v0[49]);
  }

  v0[72] = v18;
  v44 = v0[68];
  v19 = v0[51];
  v20 = v0[48];
  v21 = v0[49];
  v38 = v0[47];
  v22 = v18;
  v23 = v0[46];
  v37 = v0[45];
  v24 = v0[44];
  v41 = v0[37];
  v42 = v0[67];
  v40 = v0[36];
  v43 = v0[28];
  v39 = v0[38];
  v25 = *(_QWORD *)(v43 + 160);
  v5(v19, v0[53], v21);
  v26 = swift_retain();
  v27 = PeripheralPairingInfo.remoteAddress.getter(v26);
  v28 = PeripheralPairingInfo.remoteIRK.getter(v27);
  v30 = v29;
  v22(v19, v21);
  v31 = (uint64_t *)(v23 + *(int *)(v24 + 20));
  *v31 = v28;
  v31[1] = v30;
  sub_1000126EC(v23, v20, type metadata accessor for PeripheralConnectionMaterial);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v37 + 56))(v20, 0, 1, v24);
  sub_100005CF0(v20, v38, &qword_1010F08C8);
  v32 = v25 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_peripheralConnectionMaterial;
  swift_beginAccess(v25 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_peripheralConnectionMaterial, v0 + 15, 33, 0);
  sub_100004084(v38, v32, &qword_1010F08C8);
  swift_endAccess(v0 + 15);
  swift_release();
  dispatch thunk of PeripheralProtocol.id.getter(v42, v44);
  Identifier.id.getter(v40);
  (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v39, v40);
  v33 = *(_QWORD *)(v43 + 160);
  v0[73] = v33;
  v34 = dword_10110F85C;
  swift_retain();
  v35 = (_QWORD *)swift_task_alloc(v34);
  v0[74] = v35;
  *v35 = v0;
  v35[1] = sub_1009F1814;
  return sub_1009F28DC(v0[26], v0[43], v33);
}

uint64_t sub_1009F16E8()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v2 = *(_QWORD *)(v0 + 472);
  v1 = *(_QWORD *)(v0 + 480);
  sub_10001EF3C(*(_QWORD *)(v0 + 456), *(_QWORD *)(v0 + 464));
  sub_10001BC14(v2, v1);
  swift_release();
  v3 = *(_QWORD *)(v0 + 440);
  v5 = *(_QWORD *)(v0 + 424);
  v4 = *(_QWORD *)(v0 + 432);
  v7 = *(_QWORD *)(v0 + 408);
  v6 = *(_QWORD *)(v0 + 416);
  v8 = *(_QWORD *)(v0 + 376);
  v9 = *(_QWORD *)(v0 + 384);
  v10 = *(_QWORD *)(v0 + 368);
  v11 = *(_QWORD *)(v0 + 344);
  v13 = *(_QWORD *)(v0 + 336);
  v14 = *(_QWORD *)(v0 + 304);
  v15 = *(_QWORD *)(v0 + 280);
  v16 = *(_QWORD *)(v0 + 272);
  v17 = *(_QWORD *)(v0 + 264);
  v18 = *(_QWORD *)(v0 + 240);
  swift_task_dealloc(*(_QWORD *)(v0 + 448));
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v9);
  swift_task_dealloc(v8);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1009F1814()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 592);
  *(_QWORD *)(*v1 + 600) = v0;
  swift_task_dealloc(v3);
  v4 = *(_QWORD *)(v2 + 224);
  swift_release();
  if (v0)
    v5 = sub_1009F19B4;
  else
    v5 = sub_1009F1884;
  return swift_task_switch(v5, v4, 0);
}

uint64_t sub_1009F1884()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0[26];
  v2 = swift_task_alloc(32);
  v0[76] = v2;
  *(_QWORD *)(v2 + 16) = v1;
  return swift_task_switch(sub_1009F18CC, v0[63], 0);
}

uint64_t sub_1009F18CC()
{
  _QWORD *v0;
  _QWORD *v1;
  char *v3;

  v3 = (char *)&async function pointer to dispatch thunk of CloudKitStorage.changeSet(block:)
     + async function pointer to dispatch thunk of CloudKitStorage.changeSet(block:);
  v1 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of CloudKitStorage.changeSet(block:)
                                  + 1));
  v0[77] = v1;
  *v1 = v0;
  v1[1] = sub_1009F1940;
  return ((uint64_t (*)(_QWORD, void *, _QWORD))v3)(v0[54], &unk_10110F868, v0[76]);
}

uint64_t sub_1009F1940()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 616);
  *(_QWORD *)(*(_QWORD *)v1 + 624) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = v2[63];
    v5 = sub_1009F1D6C;
  }
  else
  {
    v6 = v2[28];
    swift_task_dealloc(v2[76]);
    v5 = sub_1009F1B1C;
    v4 = v6;
  }
  return swift_task_switch(v5, v4, 0);
}

uint64_t sub_1009F19B4()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t, uint64_t);

  v26 = *(void (**)(uint64_t, uint64_t))(v0 + 576);
  v1 = *(_QWORD *)(v0 + 472);
  v2 = *(_QWORD *)(v0 + 480);
  v4 = *(_QWORD *)(v0 + 456);
  v3 = *(_QWORD *)(v0 + 464);
  v5 = *(_QWORD *)(v0 + 424);
  v6 = *(_QWORD *)(v0 + 392);
  v7 = *(_QWORD *)(v0 + 344);
  v8 = *(_QWORD *)(v0 + 312);
  v9 = *(_QWORD *)(v0 + 320);
  swift_release();
  sub_10001BC14(v1, v2);
  sub_10001EF3C(v4, v3);
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
  v26(v5, v6);
  v10 = *(_QWORD *)(v0 + 440);
  v12 = *(_QWORD *)(v0 + 424);
  v11 = *(_QWORD *)(v0 + 432);
  v14 = *(_QWORD *)(v0 + 408);
  v13 = *(_QWORD *)(v0 + 416);
  v15 = *(_QWORD *)(v0 + 376);
  v16 = *(_QWORD *)(v0 + 384);
  v17 = *(_QWORD *)(v0 + 368);
  v18 = *(_QWORD *)(v0 + 344);
  v20 = *(_QWORD *)(v0 + 336);
  v21 = *(_QWORD *)(v0 + 304);
  v22 = *(_QWORD *)(v0 + 280);
  v23 = *(_QWORD *)(v0 + 272);
  v24 = *(_QWORD *)(v0 + 264);
  v25 = *(_QWORD *)(v0 + 240);
  swift_task_dealloc(*(_QWORD *)(v0 + 448));
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v16);
  swift_task_dealloc(v15);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1009F1B1C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;

  v2 = v0[34];
  v1 = v0[35];
  v3 = v0[26];
  sub_100005CF0(v0[54], v0[55], &qword_10110F6F8);
  sub_10005972C(v3, v1, type metadata accessor for LocalFindableAccessoryRecord);
  v4 = sub_10005972C(v3, v2, type metadata accessor for LocalFindableAccessoryRecord);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.default.getter(v5);
  if (os_log_type_enabled(v5, v6))
  {
    v18 = v0[39];
    v8 = v0[34];
    v7 = v0[35];
    v9 = swift_slowAlloc(22, -1);
    v10 = swift_slowAlloc(64, -1);
    v19 = v10;
    *(_DWORD *)v9 = 136315394;
    v11 = sub_1000A8F4C();
    v0[20] = sub_100016940(v11, v12, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 20, v0 + 21, v9 + 4, v9 + 12);
    swift_bridgeObjectRelease();
    sub_1000126B0(v7, type metadata accessor for LocalFindableAccessoryRecord);
    *(_WORD *)(v9 + 12) = 2082;
    v13 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v14 = dispatch thunk of CustomStringConvertible.description.getter(v18, v13);
    v0[21] = sub_100016940(v14, v15, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 21, v0 + 22, v9 + 14, v9 + 22);
    swift_bridgeObjectRelease();
    sub_1000126B0(v8, type metadata accessor for LocalFindableAccessoryRecord);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Saving new %s %{public}s to CK.", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy(v10, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v9, -1, -1);
  }
  else
  {
    v16 = v0[34];
    sub_1000126B0(v0[35], type metadata accessor for LocalFindableAccessoryRecord);
    sub_1000126B0(v16, type metadata accessor for LocalFindableAccessoryRecord);
  }

  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0[32] + 104))(v0[33], enum case for CloudKitCoordinator.Database.private(_:), v0[31]);
  return swift_task_switch(sub_1009F1F28, v0[63], 0);
}

uint64_t sub_1009F1D6C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 224);
  swift_task_dealloc(*(_QWORD *)(v0 + 608));
  return swift_task_switch(sub_1009F1DAC, v1, 0);
}

uint64_t sub_1009F1DAC()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t, uint64_t);

  v1 = *(_QWORD *)(v0 + 472);
  v2 = *(_QWORD *)(v0 + 480);
  v4 = *(_QWORD *)(v0 + 456);
  v3 = *(_QWORD *)(v0 + 464);
  v5 = *(_QWORD *)(v0 + 424);
  v6 = *(_QWORD *)(v0 + 392);
  v7 = *(_QWORD *)(v0 + 344);
  v8 = *(_QWORD *)(v0 + 312);
  v9 = *(_QWORD *)(v0 + 320);
  v25 = *(_QWORD *)(v0 + 208);
  v27 = *(void (**)(uint64_t, uint64_t))(v0 + 576);
  swift_release();
  sub_10001BC14(v1, v2);
  sub_10001EF3C(v4, v3);
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
  v27(v5, v6);
  sub_1000126B0(v25, type metadata accessor for LocalFindableAccessoryRecord);
  v10 = *(_QWORD *)(v0 + 440);
  v12 = *(_QWORD *)(v0 + 424);
  v11 = *(_QWORD *)(v0 + 432);
  v14 = *(_QWORD *)(v0 + 408);
  v13 = *(_QWORD *)(v0 + 416);
  v15 = *(_QWORD *)(v0 + 376);
  v16 = *(_QWORD *)(v0 + 384);
  v17 = *(_QWORD *)(v0 + 368);
  v18 = *(_QWORD *)(v0 + 344);
  v20 = *(_QWORD *)(v0 + 336);
  v21 = *(_QWORD *)(v0 + 304);
  v22 = *(_QWORD *)(v0 + 280);
  v23 = *(_QWORD *)(v0 + 272);
  v24 = *(_QWORD *)(v0 + 264);
  v26 = *(_QWORD *)(v0 + 240);
  swift_task_dealloc(*(_QWORD *)(v0 + 448));
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v16);
  swift_task_dealloc(v15);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v26);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1009F1F28()
{
  _QWORD *v0;
  _QWORD *v1;
  char *v3;

  v3 = (char *)&async function pointer to dispatch thunk of CloudKitStorage.apply(changeSet:database:)
     + async function pointer to dispatch thunk of CloudKitStorage.apply(changeSet:database:);
  v1 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of CloudKitStorage.apply(changeSet:database:)
                                  + 1));
  v0[79] = v1;
  *v1 = v0;
  v1[1] = sub_1009F1F94;
  return ((uint64_t (*)(_QWORD, _QWORD))v3)(v0[55], v0[33]);
}

uint64_t sub_1009F1F94()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 632);
  *(_QWORD *)(*(_QWORD *)v1 + 640) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = v2[63];
    v5 = sub_1009F2290;
  }
  else
  {
    v6 = v2[28];
    (*(void (**)(_QWORD, _QWORD))(v2[32] + 8))(v2[33], v2[31]);
    v5 = sub_1009F2010;
    v4 = v6;
  }
  return swift_task_switch(v5, v4, 0);
}

uint64_t sub_1009F2010()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v17 = *(_QWORD *)(v0 + 472);
  v18 = *(_QWORD *)(v0 + 480);
  v19 = *(_QWORD *)(v0 + 456);
  v24 = *(void (**)(uint64_t, uint64_t))(v0 + 576);
  v25 = *(_QWORD *)(v0 + 448);
  v22 = *(_QWORD *)(v0 + 424);
  v23 = *(_QWORD *)(v0 + 440);
  v26 = *(_QWORD *)(v0 + 432);
  v27 = *(_QWORD *)(v0 + 416);
  v20 = *(_QWORD *)(v0 + 464);
  v21 = *(_QWORD *)(v0 + 392);
  v28 = *(_QWORD *)(v0 + 408);
  v29 = *(_QWORD *)(v0 + 384);
  v30 = *(_QWORD *)(v0 + 376);
  v31 = *(_QWORD *)(v0 + 368);
  v1 = *(_QWORD *)(v0 + 336);
  v2 = *(_QWORD *)(v0 + 344);
  v16 = v2;
  v4 = *(_QWORD *)(v0 + 320);
  v3 = *(_QWORD *)(v0 + 328);
  v5 = *(_QWORD *)(v0 + 312);
  v32 = *(_QWORD *)(v0 + 304);
  v33 = *(_QWORD *)(v0 + 280);
  v34 = *(_QWORD *)(v0 + 272);
  v35 = *(_QWORD *)(v0 + 264);
  v6 = *(_QWORD *)(v0 + 240);
  v15 = *(_QWORD *)(v0 + 232);
  v7 = *(_QWORD *)(v0 + 224);
  v8 = type metadata accessor for TaskPriority(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v6, 1, 1, v8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v1, v2, v5);
  v9 = sub_100006204(&qword_101102BF0, type metadata accessor for PencilPairingService, (uint64_t)&unk_100E5841C);
  v10 = *(unsigned __int8 *)(v4 + 80);
  v11 = (v10 + 40) & ~v10;
  v12 = (v3 + v11 + 7) & 0xFFFFFFFFFFFFFFF8;
  v13 = (char *)swift_allocObject(&unk_1010A1130, v12 + 8, v10 | 7);
  *((_QWORD *)v13 + 2) = v7;
  *((_QWORD *)v13 + 3) = v9;
  *((_QWORD *)v13 + 4) = v7;
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 32))(&v13[v11], v1, v5);
  *(_QWORD *)&v13[v12] = v15;
  swift_retain_n(v7, 2);
  sub_100691AC0(v6, (uint64_t)&unk_10110F878, (uint64_t)v13);
  swift_release();
  swift_release();
  sub_10001BC14(v17, v18);
  sub_10001EF3C(v19, v20);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v16, v5);
  v24(v22, v21);
  sub_100004048(v23, &qword_10110F6F8);
  swift_task_dealloc(v25);
  swift_task_dealloc(v23);
  swift_task_dealloc(v26);
  swift_task_dealloc(v22);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v16);
  swift_task_dealloc(v1);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1009F2290()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[28];
  (*(void (**)(_QWORD, _QWORD))(v0[32] + 8))(v0[33], v0[31]);
  return swift_task_switch(sub_1009F22D8, v1, 0);
}

uint64_t sub_1009F22D8()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t, uint64_t);

  v1 = *(_QWORD *)(v0 + 472);
  v2 = *(_QWORD *)(v0 + 480);
  v4 = *(_QWORD *)(v0 + 456);
  v3 = *(_QWORD *)(v0 + 464);
  v26 = *(_QWORD *)(v0 + 440);
  v28 = *(void (**)(uint64_t, uint64_t))(v0 + 576);
  v5 = *(_QWORD *)(v0 + 424);
  v6 = *(_QWORD *)(v0 + 392);
  v7 = *(_QWORD *)(v0 + 344);
  v9 = *(_QWORD *)(v0 + 312);
  v8 = *(_QWORD *)(v0 + 320);
  v24 = *(_QWORD *)(v0 + 208);
  swift_release();
  sub_10001BC14(v1, v2);
  sub_10001EF3C(v4, v3);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
  v28(v5, v6);
  sub_100004048(v26, &qword_10110F6F8);
  sub_1000126B0(v24, type metadata accessor for LocalFindableAccessoryRecord);
  v10 = *(_QWORD *)(v0 + 440);
  v12 = *(_QWORD *)(v0 + 424);
  v11 = *(_QWORD *)(v0 + 432);
  v14 = *(_QWORD *)(v0 + 408);
  v13 = *(_QWORD *)(v0 + 416);
  v15 = *(_QWORD *)(v0 + 376);
  v16 = *(_QWORD *)(v0 + 384);
  v17 = *(_QWORD *)(v0 + 368);
  v18 = *(_QWORD *)(v0 + 344);
  v20 = *(_QWORD *)(v0 + 336);
  v21 = *(_QWORD *)(v0 + 304);
  v22 = *(_QWORD *)(v0 + 280);
  v23 = *(_QWORD *)(v0 + 272);
  v25 = *(_QWORD *)(v0 + 264);
  v27 = *(_QWORD *)(v0 + 240);
  swift_task_dealloc(*(_QWORD *)(v0 + 448));
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v16);
  swift_task_dealloc(v15);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v25);
  swift_task_dealloc(v27);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1009F246C(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2[4] = a2;
  v3 = type metadata accessor for CloudKitStorage.State(0);
  v2[5] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[6] = v4;
  v2[7] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1009F24CC, 0, 0);
}

uint64_t sub_1009F24CC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  if (qword_1010EA100 != -1)
    swift_once(&qword_1010EA100, sub_1009B44BC);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_10001A9E8(v1, (uint64_t)qword_10110F2A8);
  v0[8] = v2;
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = swift_slowAlloc(32, -1);
    v9 = v6;
    *(_DWORD *)v5 = 136446210;
    v0[3] = sub_100016940(0xD000000000000019, 0x8000000100EEC0D0, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 3, v0 + 4, v5 + 4, v5 + 12);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Waiting for CloudKit to be available... %{public}s", v5, 0xCu);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);
  }

  v7 = v0[4];
  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0[6] + 104))(v0[7], enum case for CloudKitStorage.State.available(_:), v0[5]);
  return swift_task_switch(sub_1009F2670, v7, 0);
}

uint64_t sub_1009F2670()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t (*v3)(_QWORD);

  v3 = (uint64_t (*)(_QWORD))((char *)&async function pointer to dispatch thunk of CloudKitStorage.await(state:)
                                      + async function pointer to dispatch thunk of CloudKitStorage.await(state:));
  v1 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of CloudKitStorage.await(state:)
                                  + 1));
  *(_QWORD *)(v0 + 72) = v1;
  *v1 = v0;
  v1[1] = sub_1009F26D8;
  return v3(*(_QWORD *)(v0 + 56));
}

uint64_t sub_1009F26D8()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 72);
  *(_QWORD *)(*(_QWORD *)v1 + 80) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = v2[4];
    v5 = sub_1009F2750;
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v2[6] + 8))(v2[7], v2[5]);
    v5 = sub_1009F2794;
    v4 = 0;
  }
  return swift_task_switch(v5, v4, 0);
}

uint64_t sub_1009F2750()
{
  _QWORD *v0;

  (*(void (**)(_QWORD, _QWORD))(v0[6] + 8))(v0[7], v0[5]);
  return swift_task_switch(sub_1009F9E04, 0, 0);
}

uint64_t sub_1009F2794(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v7;

  v2 = Logger.logObject.getter(a1);
  v3 = static os_log_type_t.default.getter(v2);
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc(12, -1);
    v5 = swift_slowAlloc(32, -1);
    v7 = v5;
    *(_DWORD *)v4 = 136446210;
    *(_QWORD *)(v1 + 16) = sub_100016940(0xD000000000000019, 0x8000000100EEC0D0, &v7);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 16, v1 + 24, v4 + 4, v4 + 12);
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "CloudKit is available. %{public}s", v4, 0xCu);
    swift_arrayDestroy(v5, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v5, -1, -1);
    swift_slowDealloc(v4, -1, -1);
  }

  swift_task_dealloc(*(_QWORD *)(v1 + 56));
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_1009F28DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;

  v4[17] = a2;
  v4[18] = a3;
  v4[16] = a1;
  v5 = type metadata accessor for SymmetricKey256(0);
  v4[19] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[20] = v6;
  v4[21] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for P256PrivateKey(0);
  v4[22] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v4[23] = v8;
  v4[24] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Endianness(0);
  v4[25] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10001A9A8((uint64_t *)&unk_10111C0A0);
  v4[26] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10001A9A8(&qword_1010F08C8);
  v4[27] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v11 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for PeripheralConnectionMaterial(0);
  v4[28] = v12;
  v13 = *(_QWORD *)(v12 - 8);
  v4[29] = v13;
  v14 = (*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[30] = swift_task_alloc(v14);
  v4[31] = swift_task_alloc(v14);
  v15 = sub_10001A9A8(&qword_1010ED860);
  v4[32] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v15 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for UUID(0);
  v4[33] = v16;
  v17 = *(_QWORD *)(v16 - 8);
  v4[34] = v17;
  v18 = (*(_QWORD *)(v17 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[35] = swift_task_alloc(v18);
  v4[36] = swift_task_alloc(v18);
  v4[37] = swift_task_alloc(v18);
  return swift_task_switch(sub_1009F2A70, v3, 0);
}

uint64_t sub_1009F2A70()
{
  _QWORD *v0;
  uint64_t *v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t, uint64_t);
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t (*v37)(void);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void (*v56)(void);
  uint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  void (*v64)(void);
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  int *v76;
  _QWORD *v77;
  _QWORD *v78;
  uint64_t *v79;
  uint64_t *v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  uint64_t v107;
  void (*v108)(uint64_t, uint64_t, uint64_t);
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116[3];

  v1 = (uint64_t *)(v0[18] + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessorySerialNumber);
  v2 = v1[1];
  if (v2 >> 60 == 15)
    goto LABEL_9;
  v3 = *v1;
  v0[13] = *v1;
  v0[14] = v2;
  sub_10001BBBC(v3, v2);
  v4 = sub_100035530();
  if ((DataProtocol.isNull.getter(&type metadata for Data, v4) & 1) != 0)
  {
    sub_10001EF3C(v3, v2);
LABEL_9:
    if (qword_1010EA100 != -1)
      swift_once(&qword_1010EA100, sub_1009B44BC);
    v21 = type metadata accessor for Logger(0);
    v22 = sub_10001A9E8(v21, (uint64_t)qword_10110F2A8);
    v23 = Logger.logObject.getter(v22);
    v24 = static os_log_type_t.error.getter(v23);
    if (os_log_type_enabled(v23, v24))
    {
      v25 = (uint8_t *)swift_slowAlloc(12, -1);
      v26 = swift_slowAlloc(32, -1);
      v116[0] = v26;
      *(_DWORD *)v25 = 136446210;
      v0[15] = sub_100016940(0xD00000000000002ELL, 0x8000000100EEC0F0, v116);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 15, v0 + 16, v25 + 4, v25 + 12);
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "%{public}s Invalid parameters!", v25, 0xCu);
      swift_arrayDestroy(v26, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v26, -1, -1);
      swift_slowDealloc(v25, -1, -1);
    }

    v28 = v0[36];
    v27 = v0[37];
    v29 = v0[35];
    v30 = v0[31];
    v31 = v0[32];
    v32 = v0[30];
    v33 = v0[27];
    v107 = v0[26];
    v109 = v0[25];
    v112 = v0[24];
    v114 = v0[21];
    v34 = sub_100350CCC();
    v35 = swift_allocError(&type metadata for PencilPairingService.Error, v34, 0, 0);
    *(_OWORD *)v36 = xmmword_100E2E420;
    *(_BYTE *)(v36 + 16) = 3;
    swift_willThrow(v35);
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v31);
    swift_task_dealloc(v30);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v107);
    swift_task_dealloc(v109);
    swift_task_dealloc(v112);
    swift_task_dealloc(v114);
    v37 = (uint64_t (*)(void))v0[1];
    return v37();
  }
  v113 = v4;
  v6 = v0[33];
  v5 = v0[34];
  v7 = v0[32];
  v8 = v0[18];
  v9 = Data.trimmed.getter(v3, v2);
  v11 = v10;
  v12 = v8 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_fmnaId;
  swift_beginAccess(v12, v0 + 8, 0, 0);
  sub_10000F9B8(v12, v7, &qword_1010ED860);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v7, 1, v6) == 1)
  {
    v13 = v0[32];
    sub_10001EF3C(v3, v2);
    sub_10001BC14(v9, v11);
    v14 = &qword_1010ED860;
    v15 = v13;
LABEL_6:
    sub_100004048(v15, v14);
    goto LABEL_9;
  }
  v111 = v3;
  v16 = v9;
  v17 = v11;
  v18 = v0[18];
  v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0[34] + 32);
  v19(v0[37], v0[32], v0[33]);
  v20 = *(_QWORD *)(v18 + 112);
  if (v20 >> 60 == 15)
  {
    (*(void (**)(_QWORD, _QWORD))(v0[34] + 8))(v0[37], v0[33]);
    sub_10001EF3C(v111, v2);
    sub_10001BC14(v16, v11);
    goto LABEL_9;
  }
  v108 = v19;
  v39 = *(_QWORD *)(v18 + 104);
  v41 = v0[28];
  v40 = v0[29];
  v42 = v0[27];
  v43 = v0[18] + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_peripheralConnectionMaterial;
  swift_beginAccess(v43, v0 + 2, 0, 0);
  sub_10000F9B8(v43, v42, &qword_1010F08C8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v40 + 48))(v42, 1, v41) == 1)
  {
    v44 = v0[37];
    v46 = v0[33];
    v45 = v0[34];
    v47 = v0[27];
    sub_10001BBBC(v39, v20);
    (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v44, v46);
    sub_10001EF3C(v111, v2);
    sub_10001BC14(v16, v17);
    sub_10001EF3C(v39, v20);
    v14 = &qword_1010F08C8;
    v15 = v47;
    goto LABEL_6;
  }
  v110 = v39;
  v101 = v0 + 5;
  v48 = v0[18];
  sub_1000126EC(v0[27], v0[31], type metadata accessor for PeripheralConnectionMaterial);
  v49 = (uint64_t *)(v48 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_alternateSerialNumber);
  v50 = *(_QWORD *)(v48 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_alternateSerialNumber + 8);
  v106 = v0;
  if (v50 >> 60 == 15)
  {
    sub_10001BBBC(v39, v20);
  }
  else
  {
    v51 = *v49;
    v0[11] = *v49;
    v0[12] = v50;
    sub_10001BD08(v39, v20);
    sub_10001BD08(v51, v50);
    if ((DataProtocol.isNull.getter(&type metadata for Data, v113) & 1) == 0)
    {
      v105 = Data.trimmed.getter(v51, v50);
      v52 = v53;
      sub_10001EF3C(v51, v50);
      goto LABEL_23;
    }
    sub_10001EF3C(v51, v50);
  }
  v105 = 0;
  v52 = 0xF000000000000000;
LABEL_23:
  v54 = v0[26];
  v55 = v0[18];
  v56 = *(void (**)(void))(v106[34] + 16);
  ((void (*)(_QWORD, _QWORD, _QWORD))v56)(v106[36], v106[17], v106[33]);
  v57 = v55 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_productInfo;
  swift_beginAccess(v55 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_productInfo, v101, 0, 0);
  sub_10000F9B8(v57, v54, (uint64_t *)&unk_10111C0A0);
  v58 = type metadata accessor for AccessoryProductInfo(0);
  v59 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v58 - 8) + 48))(v54, 1, v58);
  v60 = v106[26];
  if (v59)
  {
    v83 = 0xE000000000000000;
    v84 = 0;
  }
  else
  {
    v61 = (uint64_t *)(v60 + *(int *)(v58 + 48));
    v83 = v61[1];
    v84 = *v61;
    swift_bridgeObjectRetain(v83);
  }
  v62 = v106[18];
  sub_100004048(v60, (uint64_t *)&unk_10111C0A0);
  v63 = *(_QWORD *)(v62 + 96);
  v104 = v17;
  v103 = v16;
  v89 = v106[18];
  if (v63)
  {
    v81 = *(_QWORD *)(v62 + 96);
    v82 = *(_QWORD *)(v106[18] + 88);
  }
  else
  {
    v81 = 0xE000000000000000;
    v82 = 0;
  }
  v64 = v56;
  v88 = v106[37];
  v94 = v106[35];
  v91 = v106[34];
  v92 = v106[36];
  v87 = v106[33];
  v99 = v106[32];
  v65 = v106[30];
  v115 = v106[31];
  v66 = v106[25];
  v100 = v106[27];
  v102 = v106[26];
  v85 = v106[24];
  v67 = v106[21];
  v95 = v106[23];
  v96 = v106[22];
  v97 = v106[20];
  v98 = v106[19];
  v68 = v106[16];
  v64();
  swift_bridgeObjectRetain(v63);
  sub_1001EDA78(v110, v20);
  v93 = v69;
  v70 = sub_1001EDBAC(v110, v20);
  v72 = v71;
  static Endianness.current.getter(v70);
  sub_10007D5A4();
  FixedWidthInteger.init(data:ofEndianness:)(v106 + 38, v70, v72, v66);
  v73 = *((int *)v106 + 76);
  if (*((_BYTE *)v106 + 308))
    v73 = 0;
  v86 = v73;
  v90 = *(_QWORD *)(v89 + 32);
  v74 = sub_10005972C(v115, v65, type metadata accessor for PeripheralConnectionMaterial);
  v75 = static P256PrivateKey.random()(v74);
  static SymmetricKey256.random()(v75);
  sub_10001EF3C(v110, v20);
  sub_10001EF3C(v111, v2);
  sub_1000126B0(v115, type metadata accessor for PeripheralConnectionMaterial);
  (*(void (**)(uint64_t, uint64_t))(v91 + 8))(v88, v87);
  v108(v68, v92, v87);
  v76 = (int *)type metadata accessor for LocalFindableAccessoryRecord(0);
  v77 = (_QWORD *)(v68 + v76[5]);
  *v77 = v84;
  v77[1] = v83;
  v78 = (_QWORD *)(v68 + v76[6]);
  *v78 = v82;
  v78[1] = v81;
  v79 = (uint64_t *)(v68 + v76[7]);
  *v79 = v103;
  v79[1] = v104;
  v80 = (uint64_t *)(v68 + v76[8]);
  *v80 = v105;
  v80[1] = v52;
  v108(v68 + v76[9], v94, v87);
  *(_QWORD *)(v68 + v76[10]) = v93;
  *(_QWORD *)(v68 + v76[11]) = v86;
  *(_QWORD *)(v68 + v76[12]) = v90;
  sub_1000126EC(v65, v68 + v76[13], type metadata accessor for PeripheralConnectionMaterial);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v95 + 32))(v68 + v76[14], v85, v96);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v97 + 32))(v68 + v76[15], v67, v98);
  swift_task_dealloc(v88);
  swift_task_dealloc(v92);
  swift_task_dealloc(v94);
  swift_task_dealloc(v99);
  swift_task_dealloc(v115);
  swift_task_dealloc(v65);
  swift_task_dealloc(v100);
  swift_task_dealloc(v102);
  swift_task_dealloc(v66);
  swift_task_dealloc(v85);
  swift_task_dealloc(v67);
  v37 = (uint64_t (*)(void))v106[1];
  return v37();
}

uint64_t sub_1009F3354(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v4 = (_QWORD *)swift_task_alloc(async function pointer to CloudKitChangeSet.Adaptor.create<A>(record:)[1]);
  *(_QWORD *)(v2 + 16) = v4;
  v5 = type metadata accessor for LocalFindableAccessoryRecord(0);
  v6 = sub_100006204(&qword_10110CDA8, type metadata accessor for LocalFindableAccessoryRecord, (uint64_t)&unk_100E26158);
  *v4 = v2;
  v4[1] = sub_100004A74;
  return CloudKitChangeSet.Adaptor.create<A>(record:)(a2, v5, v6);
}

uint64_t sub_1009F33E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v7;

  *(_QWORD *)(v5 + 24) = a4;
  v7 = (_QWORD *)swift_task_alloc(dword_10110F88C);
  *(_QWORD *)(v5 + 32) = v7;
  *v7 = v5;
  v7[1] = sub_1009F3440;
  return sub_1009F3678(a5);
}

uint64_t sub_1009F3440()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*v1 + 32);
  v3 = *v1;
  *(_QWORD *)(v3 + 40) = v0;
  swift_task_dealloc(v2);
  if (v0)
    return swift_task_switch(sub_1009F34AC, *(_QWORD *)(v3 + 24), 0);
  else
    return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_1009F34AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  BOOL v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;

  if (qword_1010EA100 != -1)
    swift_once(&qword_1010EA100, sub_1009B44BC);
  v1 = *(_QWORD *)(v0 + 40);
  v2 = type metadata accessor for Logger(0);
  sub_10001A9E8(v2, (uint64_t)qword_10110F2A8);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter(v4);
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 40);
  if (v6)
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v8 = 138543362;
    swift_errorRetain(v7);
    v10 = _swift_stdlib_bridgeErrorToNSError(v7);
    *(_QWORD *)(v0 + 16) = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v8 + 4, v8 + 12);
    *v9 = v10;
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Failed saveProductInfoRecord: %{public}@", v8, 0xCu);
    v11 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v9, 1, v11);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

    swift_errorRelease(v7);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 40));
    swift_errorRelease(v7);
    swift_errorRelease(v7);

  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1009F3678(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v2[18] = a1;
  v2[19] = v1;
  v3 = type metadata accessor for UUID(0);
  v2[20] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[21] = v4;
  v2[22] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *(_QWORD *)(type metadata accessor for BeaconProductInfoRecord(0) - 8);
  v2[23] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v2[24] = v6;
  v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[25] = swift_task_alloc(v7);
  v2[26] = swift_task_alloc(v7);
  v8 = sub_10001A9A8((uint64_t *)&unk_10111C0A0);
  v2[27] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for AccessoryProductInfo(0);
  v2[28] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v2[29] = v10;
  v11 = (*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[30] = swift_task_alloc(v11);
  v2[31] = swift_task_alloc(v11);
  return swift_task_switch(sub_1009F376C, v1, 0);
}

uint64_t sub_1009F376C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(void);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t result;
  _QWORD *v27;
  uint64_t (*v28)(void);

  v1 = *(_QWORD *)(v0 + 224);
  v2 = *(_QWORD *)(v0 + 232);
  v3 = *(_QWORD *)(v0 + 216);
  v4 = *(_QWORD *)(*(_QWORD *)(v0 + 152) + 160) + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_productInfo;
  swift_beginAccess(v4, v0 + 96, 0, 0);
  sub_10000F9B8(v4, v3, (uint64_t *)&unk_10111C0A0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_100004048(*(_QWORD *)(v0 + 216), (uint64_t *)&unk_10111C0A0);
    if (qword_1010EA100 != -1)
      swift_once(&qword_1010EA100, sub_1009B44BC);
    v5 = type metadata accessor for Logger(0);
    v6 = sub_10001A9E8(v5, (uint64_t)qword_10110F2A8);
    v7 = Logger.logObject.getter(v6);
    v8 = static os_log_type_t.error.getter(v7);
    if (os_log_type_enabled(v7, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Missing product info!", v9, 2u);
      swift_slowDealloc(v9, -1, -1);
    }

    v10 = sub_100350CCC();
    v11 = swift_allocError(&type metadata for PencilPairingService.Error, v10, 0, 0);
    *(_OWORD *)v12 = xmmword_100E58230;
    *(_BYTE *)(v12 + 16) = 3;
    swift_willThrow(v11);
    v13 = *(_QWORD *)(v0 + 240);
    v15 = *(_QWORD *)(v0 + 208);
    v14 = *(_QWORD *)(v0 + 216);
    v16 = *(_QWORD *)(v0 + 200);
    v17 = *(_QWORD *)(v0 + 176);
    swift_task_dealloc(*(_QWORD *)(v0 + 248));
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    v18 = *(uint64_t (**)(void))(v0 + 8);
    return v18();
  }
  v20 = *(_QWORD *)(v0 + 240);
  v19 = *(_QWORD *)(v0 + 248);
  v21 = *(_QWORD *)(v0 + 208);
  v22 = *(_QWORD *)(v0 + 168);
  v23 = *(_QWORD *)(v0 + 176);
  v24 = *(_QWORD *)(v0 + 160);
  v25 = *(_QWORD *)(v0 + 144);
  sub_1000126EC(*(_QWORD *)(v0 + 216), v19, type metadata accessor for AccessoryProductInfo);
  sub_10005972C(v19, v20, type metadata accessor for AccessoryProductInfo);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v22 + 16))(v23, v25, v24);
  sub_1006038EC(v20, v23, v21);
  if (qword_1010EA5B0 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v0 + 120, 0, 0);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 56, &qword_1010EE220);
  if (*(_QWORD *)(v0 + 80))
  {
    sub_10000F9FC((__int128 *)(v0 + 56), v0 + 16);
    sub_10001AA44((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
    v28 = (uint64_t (*)(void))((char *)&dword_1010EBB40 + dword_1010EBB40);
    v27 = (_QWORD *)swift_task_alloc(unk_1010EBB44);
    *(_QWORD *)(v0 + 256) = v27;
    *v27 = v0;
    v27[1] = sub_1009F3A70;
    v18 = v28;
    return v18();
  }
  __break(1u);
  return result;
}

uint64_t sub_1009F3A70(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 256);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 152);
  *(_QWORD *)(*(_QWORD *)v1 + 264) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1009F3AD0, v3, 0);
}

uint64_t sub_1009F3AD0()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = (_QWORD *)(v0 + 16);
  if (*(_QWORD *)(v0 + 264))
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    return swift_task_switch(sub_1009F3BF4, *(_QWORD *)(v0 + 264), 0);
  }
  else
  {
    v3 = *(_QWORD *)(v0 + 248);
    v4 = *(_QWORD *)(v0 + 208);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    v5 = sub_100350CCC();
    v6 = swift_allocError(&type metadata for PencilPairingService.Error, v5, 0, 0);
    *(_OWORD *)v7 = xmmword_100E58210;
    *(_BYTE *)(v7 + 16) = 3;
    swift_willThrow(v6);
    sub_1000126B0(v4, type metadata accessor for BeaconProductInfoRecord);
    sub_1000126B0(v3, type metadata accessor for AccessoryProductInfo);
    v8 = *(_QWORD *)(v0 + 240);
    v10 = *(_QWORD *)(v0 + 208);
    v9 = *(_QWORD *)(v0 + 216);
    v11 = *(_QWORD *)(v0 + 200);
    v12 = *(_QWORD *)(v0 + 176);
    swift_task_dealloc(*(_QWORD *)(v0 + 248));
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1009F3BF4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  void (**v9)(uint64_t);
  uint64_t v10;
  _QWORD *v11;

  v1 = v0[33];
  v2 = v0[25];
  v4 = v0[23];
  v3 = v0[24];
  sub_10005972C(v0[26], v2, type metadata accessor for BeaconProductInfoRecord);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = (v5 + 24) & ~v5;
  v7 = (v3 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  v8 = swift_allocObject(&unk_1010A1158, v7 + 16, v5 | 7);
  v0[34] = v8;
  *(_QWORD *)(v8 + 16) = v1;
  sub_1000126EC(v2, v8 + v6, type metadata accessor for BeaconProductInfoRecord);
  v9 = (void (**)(uint64_t))(v8 + v7);
  *v9 = sub_1009F6644;
  v9[1] = 0;
  v10 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v11 = (_QWORD *)swift_task_alloc(v10);
  v0[35] = v11;
  *v11 = v0;
  v11[1] = sub_1009F3CE8;
  return unsafeBlocking<A>(_:)(v11, sub_1009F7EA8, v8, &type metadata for () + 1);
}

uint64_t sub_1009F3CE8()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 280));
  swift_release();
  return swift_task_switch(sub_1009F3D40, *(_QWORD *)(v1 + 264), 0);
}

uint64_t sub_1009F3D40()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 152);
  swift_release();
  return swift_task_switch(sub_1009F3D80, v1, 0);
}

uint64_t sub_1009F3D80()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 240);
  v2 = *(_QWORD *)(v0 + 248);
  v4 = *(_QWORD *)(v0 + 208);
  v3 = *(_QWORD *)(v0 + 216);
  v5 = *(_QWORD *)(v0 + 200);
  v6 = *(_QWORD *)(v0 + 176);
  sub_1000126B0(v4, type metadata accessor for BeaconProductInfoRecord);
  sub_1000126B0(v2, type metadata accessor for AccessoryProductInfo);
  swift_task_dealloc(v2);
  swift_task_dealloc(v1);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1009F3E1C(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;

  v35 = a5;
  v34 = a4;
  v32 = a1;
  v33 = a2;
  v6 = sub_10001A9A8(&qword_1010F8318);
  v7 = *(_QWORD *)(v6 - 8);
  v30 = v6;
  v8 = *(_QWORD *)(v7 + 64);
  __chkstk_darwin(v6);
  v31 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10001A9A8(&qword_1010EF7C0);
  v10 = *(_QWORD *)(v9 - 8);
  v29 = v9;
  v11 = *(_QWORD *)(v10 + 64);
  __chkstk_darwin(v9);
  v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_10001A9A8(&qword_1010F46C0);
  __chkstk_darwin(v13);
  v15 = (char *)&v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v15, 1, 1, v16);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a3, v9);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v32, v6);
  v17 = sub_100006204(&qword_101102BF0, type metadata accessor for PencilPairingService, (uint64_t)&unk_100E5841C);
  v18 = *(unsigned __int8 *)(v10 + 80);
  v19 = (v18 + 40) & ~v18;
  v20 = v19 + v11;
  v21 = *(unsigned __int8 *)(v7 + 80);
  v22 = (v21 + v19 + v11 + 1) & ~v21;
  v23 = (v8 + v22 + 7) & 0xFFFFFFFFFFFFFFF8;
  v24 = (char *)swift_allocObject(&unk_1010A0EF8, v23 + 8, v18 | v21 | 7);
  v25 = v33;
  *((_QWORD *)v24 + 2) = v33;
  *((_QWORD *)v24 + 3) = v17;
  *((_QWORD *)v24 + 4) = v25;
  v26 = v25;
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(&v24[v19], v12, v29);
  v24[v20] = v34;
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(&v24[v22], v31, v30);
  *(_QWORD *)&v24[v23] = v35;
  swift_retain_n(v26, 2);
  sub_100691AC0((uint64_t)v15, (uint64_t)&unk_10110F6C8, (uint64_t)v24);
  return swift_release();
}

uint64_t sub_1009F4044(uint64_t a1)
{
  uint64_t v1;

  return sub_1009F3E1C(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(unsigned __int8 *)(v1 + 32), *(_QWORD *)(v1 + 40));
}

uint64_t sub_1009F4054(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;

  *(_QWORD *)(v8 + 32) = a7;
  *(_QWORD *)(v8 + 40) = a8;
  *(_BYTE *)(v8 + 136) = a6;
  *(_QWORD *)(v8 + 16) = a4;
  *(_QWORD *)(v8 + 24) = a5;
  v10 = type metadata accessor for UUID(0);
  *(_QWORD *)(v8 + 48) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10001A9A8(&qword_1010F8318);
  *(_QWORD *)(v8 + 56) = v11;
  v12 = *(_QWORD *)(v11 - 8);
  *(_QWORD *)(v8 + 64) = v12;
  v13 = *(_QWORD *)(v12 + 64);
  *(_QWORD *)(v8 + 72) = v13;
  v14 = (v13 + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v8 + 80) = swift_task_alloc(v14);
  *(_QWORD *)(v8 + 88) = swift_task_alloc(v14);
  v15 = sub_10001A9A8(&qword_1010EF7C0);
  *(_QWORD *)(v8 + 96) = v15;
  v16 = *(_QWORD *)(v15 - 8);
  *(_QWORD *)(v8 + 104) = v16;
  v17 = *(_QWORD *)(v16 + 64);
  *(_QWORD *)(v8 + 112) = v17;
  v18 = (v17 + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v8 + 120) = swift_task_alloc(v18);
  *(_QWORD *)(v8 + 128) = swift_task_alloc(v18);
  return swift_task_switch(sub_1009F4138, a4, 0);
}

uint64_t sub_1009F4138()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, uint64_t);
  void (*v16)(uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  void (*v25)(uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  void (*v27)(uint64_t, uint64_t, uint64_t);
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v1 = *(_QWORD *)(v0 + 128);
  v38 = v1;
  v30 = *(_QWORD *)(v0 + 120);
  v2 = *(_QWORD *)(v0 + 104);
  v36 = *(_QWORD *)(v0 + 112);
  v3 = *(_QWORD *)(v0 + 88);
  v4 = *(_QWORD *)(v0 + 96);
  v34 = v4;
  v37 = v3;
  v31 = *(_QWORD *)(v0 + 80);
  v5 = *(_QWORD *)(v0 + 64);
  v39 = *(_QWORD *)(v0 + 72);
  v6 = *(_QWORD *)(v0 + 56);
  v35 = v6;
  v33 = *(_QWORD *)(v0 + 48);
  v7 = *(_QWORD *)(v0 + 32);
  v32 = *(_QWORD *)(v0 + 40);
  v26 = v7;
  v29 = *(_BYTE *)(v0 + 136);
  v8 = *(_QWORD *)(v0 + 24);
  v28 = v8;
  v40 = *(_QWORD *)(v0 + 16);
  type metadata accessor for WorkItemQueue.WorkItem(0);
  v27 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16);
  v27(v1, v8, v4);
  v25 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  v9 = v5;
  v25(v3, v7, v6);
  v10 = *(unsigned __int8 *)(v2 + 80);
  v11 = (v10 + 24) & ~v10;
  v12 = *(unsigned __int8 *)(v9 + 80);
  v13 = (v12 + v11 + v36 + 1) & ~v12;
  v24 = v10 | v12 | 7;
  v14 = swift_allocObject(&unk_1010A0F20, v13 + v39, v24);
  *(_QWORD *)(v14 + 16) = v40;
  v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32);
  v15(v14 + v11, v1, v34);
  *(_BYTE *)(v14 + v11 + v36) = v29;
  v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 32);
  v16(v14 + v13, v37, v35);
  v27(v30, v28, v34);
  v25(v31, v26, v35);
  v17 = (v10 + 16) & ~v10;
  v18 = (v36 + v12 + v17) & ~v12;
  v19 = (v39 + v18 + 7) & 0xFFFFFFFFFFFFFFF8;
  v20 = swift_allocObject(&unk_1010A0F48, v19 + 8, v24);
  v15(v20 + v17, v30, v34);
  v16(v20 + v18, v31, v35);
  *(_QWORD *)(v20 + v19) = v32;
  v21 = swift_retain(v40);
  UUID.init()(v21);
  v22 = WorkItemQueue.WorkItem.__allocating_init(identifier:block:completion:)(v33, &unk_10110F6D8, v14, &unk_10110F6E8, v20);
  dispatch thunk of WorkItemQueue.enqueue(_:)(v22);
  swift_release(v22);
  swift_task_dealloc(v38);
  swift_task_dealloc(v30);
  swift_task_dealloc(v37);
  swift_task_dealloc(v31);
  swift_task_dealloc(v33);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1009F43B8(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v7;

  *(_QWORD *)(v4 + 16) = a4;
  v7 = (_QWORD *)swift_task_alloc(dword_10110F6F4);
  *(_QWORD *)(v4 + 24) = v7;
  *v7 = v4;
  v7[1] = sub_1009F4420;
  return sub_1009E80E8(a2, a3);
}

uint64_t sub_1009F4420()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*v1 + 24);
  v3 = *v1;
  *(_QWORD *)(v3 + 32) = v0;
  swift_task_dealloc(v2);
  if (v0)
    return (*(uint64_t (**)(void))(v3 + 8))();
  else
    return swift_task_switch(sub_1009F448C, 0, 0);
}

uint64_t sub_1009F448C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(v1 + 32);
  static Task<>.checkCancellation()(a1);
  if (!v2)
  {
    v3 = sub_10001A9A8(&qword_1010F8318);
    CheckedContinuation.resume(returning:)(v3, v3);
  }
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_1009F44F0(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  *(_QWORD *)(v4 + 80) = a3;
  *(_QWORD *)(v4 + 88) = a4;
  *(_BYTE *)(v4 + 128) = a2;
  *(_QWORD *)(v4 + 72) = a1;
  v5 = sub_10001A9A8(&qword_1010EF7C0);
  *(_QWORD *)(v4 + 96) = v5;
  v6 = *(_QWORD *)(v5 - 8);
  *(_QWORD *)(v4 + 104) = v6;
  v7 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v4 + 112) = swift_task_alloc(v7);
  *(_QWORD *)(v4 + 120) = swift_task_alloc(v7);
  return swift_task_switch(sub_1009F456C, 0, 0);
}

uint64_t sub_1009F456C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  _BOOL4 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  _BOOL4 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  _BOOL4 v42;
  uint64_t v43;
  uint8_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  if ((*(_BYTE *)(v0 + 128) & 1) != 0)
  {
    v17 = *(_QWORD *)(v0 + 72);
    swift_errorRetain(v17);
    if (qword_1010EA100 != -1)
      swift_once(&qword_1010EA100, sub_1009B44BC);
    v19 = *(_QWORD *)(v0 + 104);
    v18 = *(_QWORD *)(v0 + 112);
    v20 = *(_QWORD *)(v0 + 96);
    v22 = *(_QWORD *)(v0 + 72);
    v21 = *(_QWORD *)(v0 + 80);
    v23 = type metadata accessor for Logger(0);
    sub_10001A9E8(v23, (uint64_t)qword_10110F2A8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 16))(v18, v21, v20);
    sub_1002437C4(v22, 1);
    v24 = swift_errorRetain(v17);
    v25 = Logger.logObject.getter(v24);
    v26 = static os_log_type_t.error.getter(v25);
    v27 = os_log_type_enabled(v25, v26);
    v29 = *(_QWORD *)(v0 + 104);
    v28 = *(_QWORD *)(v0 + 112);
    v30 = *(_QWORD *)(v0 + 96);
    v31 = *(_QWORD *)(v0 + 72);
    if (v27)
    {
      v48 = v17;
      v32 = swift_slowAlloc(32, -1);
      v49 = (uint64_t *)swift_slowAlloc(8, -1);
      v50 = swift_slowAlloc(64, -1);
      v52 = v50;
      *(_DWORD *)v32 = 136446722;
      *(_QWORD *)(v0 + 32) = sub_100016940(0xD000000000000039, 0x8000000100EEBF10, &v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v32 + 4, v32 + 12);
      *(_WORD *)(v32 + 12) = 2082;
      v33 = sub_1000193A4(&qword_1010EE1D0, &qword_1010EF7C0, (const char *)&protocol conformance descriptor for Identifier<A>);
      v34 = dispatch thunk of CustomStringConvertible.description.getter(v30, v33);
      *(_QWORD *)(v0 + 40) = sub_100016940(v34, v35, &v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v32 + 14, v32 + 22);
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v28, v30);
      *(_WORD *)(v32 + 22) = 2114;
      swift_errorRetain(v48);
      v36 = _swift_stdlib_bridgeErrorToNSError(v48);
      *(_QWORD *)(v0 + 48) = v36;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56, v32 + 24, v32 + 32);
      *v49 = v36;
      sub_10010F948(v31, 1);
      sub_10010F948(v31, 1);
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "%{public}s failed for %{public}s. Error %{public}@", (uint8_t *)v32, 0x20u);
      v37 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
      swift_arrayDestroy(v49, 1, v37);
      swift_slowDealloc(v49, -1, -1);
      swift_arrayDestroy(v50, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v50, -1, -1);
      swift_slowDealloc(v32, -1, -1);

      v17 = v48;
      v38 = static Task<>.isCancelled.getter();
      if ((v38 & 1) == 0)
      {
LABEL_10:
        *(_QWORD *)(v0 + 16) = v17;
        v39 = sub_10001A9A8(&qword_1010F8318);
        CheckedContinuation.resume(throwing:)(v0 + 16, v39);
        goto LABEL_16;
      }
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v28, v30);
      sub_10010F948(v31, 1);
      sub_10010F948(v31, 1);

      v38 = static Task<>.isCancelled.getter();
      if ((v38 & 1) == 0)
        goto LABEL_10;
    }
    v40 = Logger.logObject.getter(v38);
    v41 = static os_log_type_t.error.getter(v40);
    v42 = os_log_type_enabled(v40, v41);
    v43 = *(_QWORD *)(v0 + 72);
    if (v42)
    {
      v44 = (uint8_t *)swift_slowAlloc(12, -1);
      v45 = swift_slowAlloc(32, -1);
      v52 = v45;
      *(_DWORD *)v44 = 136446210;
      *(_QWORD *)(v0 + 24) = sub_100016940(0xD000000000000039, 0x8000000100EEBF10, &v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v44 + 4, v44 + 12);
      _os_log_impl((void *)&_mh_execute_header, v40, v41, "%{public}s Not resuming continuation in cancelled task.", v44, 0xCu);
      swift_arrayDestroy(v45, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v45, -1, -1);
      swift_slowDealloc(v44, -1, -1);

      sub_10010F948(v43, 1);
    }
    else
    {
      sub_10010F948(*(_QWORD *)(v0 + 72), 1);

    }
    goto LABEL_16;
  }
  if (qword_1010EA100 != -1)
    swift_once(&qword_1010EA100, sub_1009B44BC);
  v1 = *(_QWORD *)(v0 + 120);
  v2 = *(_QWORD *)(v0 + 96);
  v3 = *(_QWORD *)(v0 + 104);
  v4 = *(_QWORD *)(v0 + 80);
  v5 = type metadata accessor for Logger(0);
  sub_10001A9E8(v5, (uint64_t)qword_10110F2A8);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v1, v4, v2);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.default.getter(v7);
  v9 = os_log_type_enabled(v7, v8);
  v10 = *(_QWORD *)(v0 + 120);
  v11 = *(_QWORD *)(v0 + 96);
  v12 = *(_QWORD *)(v0 + 104);
  if (v9)
  {
    v13 = swift_slowAlloc(22, -1);
    v51 = swift_slowAlloc(64, -1);
    v52 = v51;
    *(_DWORD *)v13 = 136446466;
    *(_QWORD *)(v0 + 56) = sub_100016940(0xD000000000000039, 0x8000000100EEBF10, &v52);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 64, v13 + 4, v13 + 12);
    *(_WORD *)(v13 + 12) = 2082;
    v14 = sub_1000193A4(&qword_1010EE1D0, &qword_1010EF7C0, (const char *)&protocol conformance descriptor for Identifier<A>);
    v15 = dispatch thunk of CustomStringConvertible.description.getter(v11, v14);
    *(_QWORD *)(v0 + 64) = sub_100016940(v15, v16, &v52);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72, v13 + 14, v13 + 22);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v10, v11);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "%{public}s succeeded for %{public}s", (uint8_t *)v13, 0x16u);
    swift_arrayDestroy(v51, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v51, -1, -1);
    swift_slowDealloc(v13, -1, -1);

  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v12 + 8))(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 96));

  }
LABEL_16:
  v46 = *(_QWORD *)(v0 + 112);
  swift_task_dealloc(*(_QWORD *)(v0 + 120));
  swift_task_dealloc(v46);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1009F4BF4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v3[31] = a2;
  v3[32] = v2;
  v3[30] = a1;
  v4 = sub_10001A9A8((uint64_t *)&unk_1010EDC50);
  v3[33] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for LocalFindableAccessoryRecord(0);
  v3[34] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v3[35] = v6;
  v7 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[36] = swift_task_alloc(v7);
  v3[37] = swift_task_alloc(v7);
  return swift_task_switch(sub_1009F4C8C, v2, 0);
}

uint64_t sub_1009F4C8C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  _QWORD *v3;
  uint64_t (__cdecl *v4)();

  v1 = qword_1010EA5B0;
  swift_retain();
  if (v1 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v0 + 176, 0, 0);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 136, &qword_1010EE220);
  if (*(_QWORD *)(v0 + 160))
  {
    sub_10000F9FC((__int128 *)(v0 + 136), v0 + 96);
    swift_release();
    sub_10001AA44((_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 120));
    v4 = (uint64_t (__cdecl *)())((char *)&dword_1010EBC30 + dword_1010EBC30);
    v3 = (_QWORD *)swift_task_alloc(unk_1010EBC34);
    *(_QWORD *)(v0 + 304) = v3;
    *v3 = v0;
    v3[1] = sub_1009F4D8C;
    return v4();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1009F4D8C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 304);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 256);
  *(_QWORD *)(*(_QWORD *)v1 + 312) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1009F4DEC, v3, 0);
}

uint64_t sub_1009F4DEC()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;

  v1 = (_QWORD *)(v0 + 96);
  if (!*(_QWORD *)(v0 + 312))
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    if (qword_1010EA100 != -1)
      swift_once(&qword_1010EA100, sub_1009B44BC);
    v16 = type metadata accessor for Logger(0);
    v17 = sub_10001A9E8(v16, (uint64_t)qword_10110F2A8);
    v18 = Logger.logObject.getter(v17);
    v19 = static os_log_type_t.error.getter(v18);
    if (os_log_type_enabled(v18, v19))
    {
      v20 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v20 = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "No CloudStorageService available!", v20, 2u);
      swift_slowDealloc(v20, -1, -1);
    }

    v21 = sub_100350CCC();
    v22 = swift_allocError(&type metadata for PencilPairingService.Error, v21, 0, 0);
    *(_OWORD *)v23 = xmmword_100E2E420;
    *(_BYTE *)(v23 + 16) = 3;
    swift_willThrow(v22);
    goto LABEL_13;
  }
  v2 = *(_QWORD *)(v0 + 240);
  v3 = *(_QWORD *)(v0 + 248);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
  *(_QWORD *)(v0 + 200) = v2;
  *(_QWORD *)(v0 + 208) = v3;
  sub_10001BBBC(v2, v3);
  v4 = sub_100035530();
  v5 = DataProtocol.isNull.getter(&type metadata for Data, v4);
  v7 = *(_QWORD *)(v0 + 240);
  v6 = *(_QWORD *)(v0 + 248);
  if ((v5 & 1) != 0)
  {
    sub_10001BC14(*(_QWORD *)(v0 + 240), *(_QWORD *)(v0 + 248));
    if (qword_1010EA100 != -1)
      swift_once(&qword_1010EA100, sub_1009B44BC);
    v8 = type metadata accessor for Logger(0);
    v9 = sub_10001A9E8(v8, (uint64_t)qword_10110F2A8);
    v10 = Logger.logObject.getter(v9);
    v11 = static os_log_type_t.error.getter(v10);
    if (os_log_type_enabled(v10, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Invalid serial number.", v12, 2u);
      swift_slowDealloc(v12, -1, -1);
    }

    v13 = sub_100350CCC();
    v14 = swift_allocError(&type metadata for PencilPairingService.Error, v13, 0, 0);
    *(_OWORD *)v15 = xmmword_100E2E420;
    *(_BYTE *)(v15 + 16) = 3;
    swift_willThrow(v14);
    swift_release();
LABEL_13:
    v24 = *(_QWORD *)(v0 + 288);
    v25 = *(_QWORD *)(v0 + 264);
    swift_task_dealloc(*(_QWORD *)(v0 + 296));
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  *(_QWORD *)(v0 + 320) = Data.trimmed.getter(*(_QWORD *)(v0 + 240), *(_QWORD *)(v0 + 248));
  *(_QWORD *)(v0 + 328) = v27;
  sub_10001BC14(v7, v6);
  return swift_task_switch(sub_1009F50B4, *(_QWORD *)(v0 + 312), 0);
}

uint64_t sub_1009F50B4()
{
  uint64_t *v0;
  uint64_t **v1;

  v1 = (uint64_t **)swift_task_alloc(dword_10110CD84);
  v0[42] = (uint64_t)v1;
  *v1 = v0;
  v1[1] = (uint64_t *)sub_1009F5108;
  return sub_1008FC02C(v0[40], v0[41]);
}

uint64_t sub_1009F5108(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t (*v5)();

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 336);
  v3[43] = a1;
  v3[44] = v1;
  swift_task_dealloc(v4);
  if (v1)
    v5 = sub_1009F5538;
  else
    v5 = sub_1009F5174;
  return swift_task_switch(v5, v3[32], 0);
}

uint64_t sub_1009F5174()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  _BOOL4 v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v33;
  uint64_t v34;

  v1 = *(_QWORD *)(v0 + 344);
  if (*(_QWORD *)(v1 + 16))
  {
    v2 = *(unsigned __int8 *)(*(_QWORD *)(v0 + 280) + 80);
    sub_10005972C(v1 + ((v2 + 32) & ~v2), *(_QWORD *)(v0 + 264), type metadata accessor for LocalFindableAccessoryRecord);
    v3 = 0;
  }
  else
  {
    v3 = 1;
  }
  v4 = *(_QWORD *)(v0 + 272);
  v5 = *(_QWORD *)(v0 + 280);
  v6 = *(_QWORD *)(v0 + 264);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 56))(v6, v3, 1, v4);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v6, 1, v4) == 1)
  {
    sub_100004048(*(_QWORD *)(v0 + 264), (uint64_t *)&unk_1010EDC50);
    if (qword_1010EA100 != -1)
      swift_once(&qword_1010EA100, sub_1009B44BC);
    v7 = *(_QWORD *)(v0 + 240);
    v8 = *(_QWORD *)(v0 + 248);
    v9 = type metadata accessor for Logger(0);
    sub_10001A9E8(v9, (uint64_t)qword_10110F2A8);
    sub_10001BBBC(v7, v8);
    v10 = sub_10001BBBC(v7, v8);
    v11 = Logger.logObject.getter(v10);
    v12 = static os_log_type_t.error.getter(v11);
    v13 = os_log_type_enabled(v11, v12);
    v15 = *(_QWORD *)(v0 + 240);
    v14 = *(_QWORD *)(v0 + 248);
    if (v13)
    {
      v16 = swift_slowAlloc(22, -1);
      v17 = swift_slowAlloc(32, -1);
      v34 = v17;
      *(_DWORD *)v16 = 141558275;
      *(_QWORD *)(v0 + 216) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 216, v0 + 224, v16 + 4, v16 + 12);
      *(_WORD *)(v16 + 12) = 2081;
      v18 = Data.description.getter(v15, v14);
      *(_QWORD *)(v0 + 224) = sub_100016940(v18, v19, &v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 224, v0 + 232, v16 + 14, v16 + 22);
      swift_bridgeObjectRelease();
      sub_10001BC14(v15, v14);
      sub_10001BC14(v15, v14);
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Missing record for %{private,mask.hash}s!", (uint8_t *)v16, 0x16u);
      swift_arrayDestroy(v17, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v17, -1, -1);
      swift_slowDealloc(v16, -1, -1);
    }
    else
    {
      sub_10001BC14(*(_QWORD *)(v0 + 240), *(_QWORD *)(v0 + 248));
      sub_10001BC14(v15, v14);
    }

    v26 = *(_QWORD *)(v0 + 320);
    v25 = *(_QWORD *)(v0 + 328);
    v27 = sub_100350CCC();
    v28 = swift_allocError(&type metadata for PencilPairingService.Error, v27, 0, 0);
    *(_OWORD *)v29 = xmmword_100E2E410;
    *(_BYTE *)(v29 + 16) = 3;
    swift_willThrow(v28);
    sub_10001BC14(v26, v25);
    swift_release();
    goto LABEL_13;
  }
  v20 = *(_QWORD *)(v0 + 352);
  v22 = *(_QWORD *)(v0 + 288);
  v21 = *(_QWORD *)(v0 + 296);
  sub_1000126EC(*(_QWORD *)(v0 + 264), v21, type metadata accessor for LocalFindableAccessoryRecord);
  sub_10005972C(v21, v22, type metadata accessor for LocalFindableAccessoryRecord);
  sub_10034FCF4(v22, v0 + 16);
  if (v20)
  {
    v24 = *(_QWORD *)(v0 + 320);
    v23 = *(_QWORD *)(v0 + 328);
    sub_1000126B0(*(_QWORD *)(v0 + 296), type metadata accessor for LocalFindableAccessoryRecord);
    swift_release();
    sub_10001BC14(v24, v23);
LABEL_13:
    v30 = *(_QWORD *)(v0 + 288);
    v31 = *(_QWORD *)(v0 + 264);
    swift_task_dealloc(*(_QWORD *)(v0 + 296));
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v33 = (_QWORD *)swift_task_alloc(dword_1010F8314);
  *(_QWORD *)(v0 + 360) = v33;
  *v33 = v0;
  v33[1] = sub_1009F55A0;
  return sub_10034A764(v0 + 16);
}

uint64_t sub_1009F5538()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 320);
  v2 = *(_QWORD *)(v0 + 328);
  swift_release();
  sub_10001BC14(v1, v2);
  v3 = *(_QWORD *)(v0 + 288);
  v4 = *(_QWORD *)(v0 + 264);
  swift_task_dealloc(*(_QWORD *)(v0 + 296));
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1009F55A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t (*v5)();
  uint64_t v6;
  _QWORD *v7;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 360);
  v3 = *(_QWORD **)v1;
  v3[46] = v0;
  swift_task_dealloc(v2);
  if (v0)
  {
    v4 = v3[32];
    sub_1009F6A84(v3 + 2);
    v5 = sub_1009F5734;
    v6 = v4;
  }
  else
  {
    sub_1009F6A84(v3 + 2);
    v7 = (_QWORD *)swift_task_alloc(dword_10110F734);
    v3[47] = v7;
    *v7 = v3;
    v7[1] = sub_1009F5654;
    v6 = v3[32];
    v7[15] = v3[37];
    v7[16] = v6;
    v5 = sub_1009F5AE0;
  }
  return swift_task_switch(v5, v6, 0);
}

uint64_t sub_1009F5654()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 376);
  *(_QWORD *)(*v1 + 384) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_1009F57B0;
  else
    v4 = sub_1009F56B8;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 256), 0);
}

uint64_t sub_1009F56B8()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 320);
  v2 = *(_QWORD *)(v0 + 328);
  swift_release();
  sub_10001BC14(v1, v2);
  v3 = *(_QWORD *)(v0 + 288);
  v4 = *(_QWORD *)(v0 + 296);
  v5 = *(_QWORD *)(v0 + 264);
  sub_1000126B0(v4, type metadata accessor for LocalFindableAccessoryRecord);
  swift_task_dealloc(v4);
  swift_task_dealloc(v3);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1009F5734()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 320);
  v2 = *(_QWORD *)(v0 + 328);
  v3 = *(_QWORD *)(v0 + 296);
  swift_release();
  sub_10001BC14(v1, v2);
  sub_1000126B0(v3, type metadata accessor for LocalFindableAccessoryRecord);
  v4 = *(_QWORD *)(v0 + 288);
  v5 = *(_QWORD *)(v0 + 264);
  swift_task_dealloc(*(_QWORD *)(v0 + 296));
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1009F57B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint8_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v18;

  if (qword_1010EA100 != -1)
    swift_once(&qword_1010EA100, sub_1009B44BC);
  v1 = *(_QWORD *)(v0 + 384);
  v2 = type metadata accessor for Logger(0);
  sub_10001A9E8(v2, (uint64_t)qword_10110F2A8);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter(v4);
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 384);
  v9 = *(_QWORD *)(v0 + 320);
  v8 = *(_QWORD *)(v0 + 328);
  if (v6)
  {
    v18 = *(_QWORD *)(v0 + 328);
    v10 = (uint8_t *)swift_slowAlloc(12, -1);
    v11 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v10 = 138543362;
    swift_errorRetain(v7);
    v12 = _swift_stdlib_bridgeErrorToNSError(v7);
    *(_QWORD *)(v0 + 232) = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 232, v0 + 240, v10 + 4, v10 + 12);
    *v11 = v12;
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Failed to unregister device: %{public}@", v10, 0xCu);
    v13 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v11, 1, v13);
    swift_slowDealloc(v11, -1, -1);
    swift_slowDealloc(v10, -1, -1);
    swift_release();
    sub_10001BC14(v9, v18);

  }
  else
  {
    swift_release();
    sub_10001BC14(v9, v8);

    swift_errorRelease(v7);
    swift_errorRelease(v7);
  }
  swift_errorRelease(v7);
  v14 = *(_QWORD *)(v0 + 288);
  v15 = *(_QWORD *)(v0 + 296);
  v16 = *(_QWORD *)(v0 + 264);
  sub_1000126B0(v15, type metadata accessor for LocalFindableAccessoryRecord);
  swift_task_dealloc(v15);
  swift_task_dealloc(v14);
  swift_task_dealloc(v16);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1009F59E0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v4 = (_QWORD *)swift_task_alloc(async function pointer to CloudKitChangeSet.Adaptor.delete<A>(record:)[1]);
  *(_QWORD *)(v2 + 16) = v4;
  v5 = type metadata accessor for LocalFindableAccessoryRecord(0);
  v6 = sub_100006204(&qword_10110CDA8, type metadata accessor for LocalFindableAccessoryRecord, (uint64_t)&unk_100E26158);
  *v4 = v2;
  v4[1] = sub_100004C28;
  return CloudKitChangeSet.Adaptor.delete<A>(record:)(a2, v5, v6);
}

uint64_t sub_1009F5A74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc(dword_10110F72C);
  *(_QWORD *)(v3 + 16) = v5;
  *v5 = v3;
  v5[1] = sub_100004A74;
  return sub_1009E0994(a3);
}

uint64_t sub_1009F5AC8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 120) = a1;
  *(_QWORD *)(v2 + 128) = v1;
  return swift_task_switch(sub_1009F5AE0, v1, 0);
}

uint64_t sub_1009F5AE0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  Class isa;
  NSString v5;
  id v6;
  NSString v7;
  int *v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  NSString v13;
  uint64_t v14;
  Class v15;
  uint64_t v16;
  NSString v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSString v21;
  uint64_t v22;
  uint64_t v23;
  NSString v24;
  Class v25;
  id v27;

  v1 = v0[15];
  v2 = v0[16];
  v27 = objc_msgSend((id)objc_opt_self(FMDFMIPManager), "sharedInstance");
  v0[17] = v27;
  v3 = objc_allocWithZone((Class)FMDLocalFindableAccessory);
  isa = UUID._bridgeToObjectiveC()().super.isa;
  v5 = String._bridgeToObjectiveC()();
  v6 = objc_msgSend(v3, "initWithIdentifier:name:connected:", isa, v5, 0);
  v0[18] = v6;

  swift_bridgeObjectRetain(*(_QWORD *)(*(_QWORD *)(v2 + 160)
                                     + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_serialNumber
                                     + 8));
  v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  objc_msgSend(v6, "setSerialNumber:", v7);

  v8 = (int *)type metadata accessor for LocalFindableAccessoryRecord(0);
  v9 = (uint64_t *)(v1 + v8[8]);
  v10 = v9[1];
  if (v10 >> 60 != 15)
  {
    v11 = *v9;
    v0[10] = *v9;
    v0[11] = v10;
    sub_10001BBBC(v11, v10);
    v12 = sub_1009F6AEC();
    RawRepresentable<>.hexString.getter(&type metadata for LocalFindableAccessoryRecord.SerialNumber, v12);
    v13 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    objc_msgSend(v6, "setAlternateSerialNumber:", v13);

    sub_10001EF3C(v11, v10);
  }
  v14 = v0[15];
  type metadata accessor for PeripheralConnectionMaterial(0);
  v15 = Data._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v6, "setIrkData:", v15);

  MACAddress.bluetoothAddress.getter(v16);
  v17 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  objc_msgSend(v6, "setBtAddress:", v17);

  v18 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v19 = swift_allocObject(v18, 72, 7);
  *(_OWORD *)(v19 + 16) = xmmword_100E22B00;
  v20 = *(_QWORD *)(v14 + v8[10]);
  *(_QWORD *)(v19 + 56) = &type metadata for Int;
  *(_QWORD *)(v19 + 64) = &protocol witness table for Int;
  *(_QWORD *)(v19 + 32) = v20;
  String.init(format:_:)(1479684133, 0xE400000000000000, v19);
  v21 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  objc_msgSend(v6, "setVendorId:", v21);

  v22 = swift_allocObject(v18, 72, 7);
  *(_OWORD *)(v22 + 16) = xmmword_100E22B00;
  v23 = *(_QWORD *)(v14 + v8[11]);
  *(_QWORD *)(v22 + 56) = &type metadata for Int;
  *(_QWORD *)(v22 + 64) = &protocol witness table for Int;
  *(_QWORD *)(v22 + 32) = v23;
  String.init(format:_:)(1479684133, 0xE400000000000000, v22);
  v24 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  objc_msgSend(v6, "setProductId:", v24);

  v25 = UUID._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v6, "setBaUUID:", v25);

  v0[2] = v0;
  v0[3] = sub_1009F5E90;
  v0[14] = swift_continuation_init(v0 + 2, 1);
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 0x40000000;
  v0[12] = sub_1009F5F70;
  v0[13] = &unk_1010A0F88;
  objc_msgSend(v27, "didRemoveLocalFindableAccessory:completion:", v6, v0 + 10);
  return swift_continuation_await(v0 + 2);
}

uint64_t sub_1009F5E90()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 48);
  *(_QWORD *)(*v0 + 152) = v2;
  if (v2)
    v3 = sub_1009F5F28;
  else
    v3 = sub_1009F5EF0;
  return swift_task_switch(v3, *(_QWORD *)(v1 + 128), 0);
}

uint64_t sub_1009F5EF0()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 136);

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1009F5F28(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  void *v3;

  v2 = *(void **)(v1 + 144);
  v3 = *(void **)(v1 + 136);
  swift_willThrow(a1);

  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_1009F5F74(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  id v7;

  v2 = *(_QWORD *)(a1 + 32);
  if (!a2)
    return swift_continuation_throwingResume(*(_QWORD *)(a1 + 32));
  v4 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
  v5 = swift_allocError(v4, &protocol self-conformance witness table for Error, 0, 0);
  *v6 = a2;
  v7 = a2;
  return swift_continuation_throwingResumeWithError(v2, v5);
}

uint64_t sub_1009F5FE8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v1 = sub_10001A9A8(&qword_1010EF7C0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = sub_10001A9A8(&qword_1010F8318);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v5 + v8 + v4 + 1) & ~v8;
  v10 = v3 | v8 | 7;
  v11 = ((*(_QWORD *)(v7 + 64) + v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v9, v6);
  return swift_deallocObject(v0, v11, v10);
}

uint64_t sub_1009F60C4(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;

  v4 = *(_QWORD *)(sub_10001A9A8(&qword_1010EF7C0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = v5 + *(_QWORD *)(v4 + 64);
  v7 = *(_QWORD *)(sub_10001A9A8(&qword_1010F8318) - 8);
  v8 = (v6 + *(unsigned __int8 *)(v7 + 80) + 1) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v9 = v1[2];
  v10 = v1[3];
  v11 = v1[4];
  LOBYTE(v6) = *((_BYTE *)v1 + v6);
  v12 = (uint64_t)v1 + v5;
  v13 = (uint64_t)v1 + v8;
  v14 = *(_QWORD *)((char *)v1 + ((*(_QWORD *)(v7 + 64) + v8 + 7) & 0xFFFFFFFFFFFFF8));
  v15 = (_QWORD *)swift_task_alloc(dword_10110F6C4);
  *(_QWORD *)(v2 + 16) = v15;
  *v15 = v2;
  v15[1] = sub_100004A74;
  return sub_1009F4054(a1, v9, v10, v11, v12, v6, v13, v14);
}

uint64_t sub_1009F61B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = sub_10001A9A8(&qword_1010EF7C0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = sub_10001A9A8(&qword_1010F8318);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v5 + v8 + v4 + 1) & ~v8;
  v10 = v9 + *(_QWORD *)(v7 + 64);
  v11 = v3 | v8 | 7;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v9, v6);
  return swift_deallocObject(v0, v10, v11);
}

uint64_t sub_1009F627C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;

  v2 = *(_QWORD *)(sub_10001A9A8(&qword_1010EF7C0) - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = v3 + *(_QWORD *)(v2 + 64);
  v5 = *(unsigned __int8 *)(*(_QWORD *)(sub_10001A9A8(&qword_1010F8318) - 8) + 80);
  v6 = v4 + v5 + 1;
  v7 = v0 + v3;
  LOBYTE(v4) = *(_BYTE *)(v0 + v4);
  v8 = v0 + (v6 & ~v5);
  v9 = (_QWORD *)swift_task_alloc(dword_10110F6D4);
  *(_QWORD *)(v1 + 16) = v9;
  *v9 = v1;
  v9[1] = sub_100004A74;
  v9[2] = v8;
  v10 = (_QWORD *)swift_task_alloc(dword_10110F6F4);
  v9[3] = v10;
  *v10 = v9;
  v10[1] = sub_1009F4420;
  return sub_1009E80E8(v7, v4);
}

uint64_t sub_1009F6354()
{
  return sub_1009F92DC(&qword_1010F8318);
}

uint64_t sub_1009F6360(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  char v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v5 = a2 & 1;
  v6 = *(_QWORD *)(sub_10001A9A8(&qword_1010EF7C0) - 8);
  v7 = (*(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = *(_QWORD *)(sub_10001A9A8(&qword_1010F8318) - 8);
  v10 = v2 + ((v7 + v8 + *(unsigned __int8 *)(v9 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
  v11 = (_QWORD *)swift_task_alloc(dword_10110F6E4);
  *(_QWORD *)(v3 + 16) = v11;
  *v11 = v3;
  v11[1] = sub_100004A74;
  return sub_1009F44F0(a1, v5, v2 + v7, v10);
}

uint64_t sub_1009F642C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc(dword_10110F70C);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_100004A74;
  return sub_1009F59E0(a1, v4);
}

uint64_t sub_1009F6480()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = sub_10001A9A8(&qword_1010EF7C0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1009F64F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(sub_10001A9A8(&qword_1010EF7C0) - 8) + 80);
  v3 = v0 + ((v2 + 24) & ~v2);
  v4 = (_QWORD *)swift_task_alloc(dword_10110F71C);
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_100004A74;
  v5 = (_QWORD *)swift_task_alloc(dword_10110F72C);
  v4[2] = v5;
  *v5 = v4;
  v5[1] = sub_100004A74;
  return sub_1009E0994(v3);
}

uint64_t sub_1009F6590(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v6;

  *(_QWORD *)(v3 + 16) = a1;
  v6 = (_QWORD *)swift_task_alloc(dword_10110FB34);
  *(_QWORD *)(v3 + 24) = v6;
  *v6 = v3;
  v6[1] = sub_1009F65E8;
  return sub_1009F9614(a2, a3);
}

uint64_t sub_1009F65E8(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 24);
  v6 = *v2;
  swift_task_dealloc(v5);
  if (!v1)
    **(_QWORD **)(v4 + 16) = a1;
  return (*(uint64_t (**)(void))(v6 + 8))();
}

void sub_1009F6644(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v2 = type metadata accessor for BeaconProductInfoRecord(0);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v7 = (char *)&v30 - v6;
  v8 = sub_10001A9A8(&qword_10110AAD0);
  __chkstk_darwin(v8);
  v10 = (uint64_t *)((char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10000F9B8(a1, (uint64_t)v10, &qword_10110AAD0);
  if (swift_getEnumCaseMultiPayload(v10, v8) == 1)
  {
    v11 = *v10;
    if (qword_1010EA100 != -1)
      swift_once(&qword_1010EA100, sub_1009B44BC);
    v12 = type metadata accessor for Logger(0);
    sub_10001A9E8(v12, (uint64_t)qword_10110F2A8);
    swift_errorRetain(v11);
    v13 = swift_errorRetain(v11);
    v14 = Logger.logObject.getter(v13);
    v15 = static os_log_type_t.default.getter(v14);
    if (os_log_type_enabled(v14, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc(12, -1);
      v17 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v16 = 138543362;
      swift_errorRetain(v11);
      v18 = _swift_stdlib_bridgeErrorToNSError(v11);
      v31 = v18;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32, v16 + 4, v16 + 12);
      *v17 = v18;
      swift_errorRelease(v11);
      swift_errorRelease(v11);
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Failed to save BeaconProductInfoRecord %{public}@", v16, 0xCu);
      v19 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
      swift_arrayDestroy(v17, 1, v19);
      swift_slowDealloc(v17, -1, -1);
      swift_slowDealloc(v16, -1, -1);

      swift_errorRelease(v11);
    }
    else
    {
      swift_errorRelease(v11);
      swift_errorRelease(v11);
      swift_errorRelease(v11);

    }
  }
  else
  {
    sub_1000126EC((uint64_t)v10, (uint64_t)v7, type metadata accessor for BeaconProductInfoRecord);
    if (qword_1010EA100 != -1)
      swift_once(&qword_1010EA100, sub_1009B44BC);
    v20 = type metadata accessor for Logger(0);
    sub_10001A9E8(v20, (uint64_t)qword_10110F2A8);
    v21 = sub_10005972C((uint64_t)v7, (uint64_t)v5, type metadata accessor for BeaconProductInfoRecord);
    v22 = Logger.logObject.getter(v21);
    v23 = static os_log_type_t.default.getter(v22);
    if (os_log_type_enabled(v22, v23))
    {
      v24 = (uint8_t *)swift_slowAlloc(12, -1);
      v25 = swift_slowAlloc(32, -1);
      v31 = v25;
      *(_DWORD *)v24 = 136446210;
      v26 = type metadata accessor for UUID(0);
      v27 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v28 = dispatch thunk of CustomStringConvertible.description.getter(v26, v27);
      v30 = sub_100016940(v28, v29, &v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31, v24 + 4, v24 + 12);
      swift_bridgeObjectRelease();
      sub_1000126B0((uint64_t)v5, type metadata accessor for BeaconProductInfoRecord);
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "Successfully saved BeaconProductInfoRecord %{public}s", v24, 0xCu);
      swift_arrayDestroy(v25, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v25, -1, -1);
      swift_slowDealloc(v24, -1, -1);

    }
    else
    {

      sub_1000126B0((uint64_t)v5, type metadata accessor for BeaconProductInfoRecord);
    }
    sub_1000126B0((uint64_t)v7, type metadata accessor for BeaconProductInfoRecord);
  }
}

_QWORD *sub_1009F6A84(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = a1[1];
  v3 = a1[3];
  v4 = a1[5];
  v5 = a1[7];
  swift_bridgeObjectRelease(a1[9]);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v4);
  return a1;
}

unint64_t sub_1009F6AEC()
{
  unint64_t result;

  result = qword_10110F738;
  if (!qword_10110F738)
  {
    result = swift_getWitnessTable(aY_60, &type metadata for LocalFindableAccessoryRecord.SerialNumber);
    atomic_store(result, &qword_10110F738);
  }
  return result;
}

uint64_t sub_1009F6B30(uint64_t a1)
{
  uint64_t *v1;

  return sub_1009C9A84(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_1009F6B3C()
{
  return sub_1009F912C(&qword_1010F8318);
}

uint64_t sub_1009F6B48()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v2 = *(_QWORD *)(sub_10001A9A8(&qword_1010EF7C0) - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  v5 = *(_QWORD *)(sub_10001A9A8(&qword_1010F8318) - 8);
  v6 = (v4 + *(unsigned __int8 *)(v5 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = *(_QWORD *)(v0 + v4);
  v8 = v0 + v3;
  v9 = v0 + v6;
  v10 = *(_QWORD *)(v0 + ((*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFF8));
  v11 = (_QWORD *)swift_task_alloc(dword_10110F74C);
  *(_QWORD *)(v1 + 16) = v11;
  *v11 = v1;
  v11[1] = sub_100004A74;
  return sub_1009C9D8C(v8, v7, v9, v10);
}

uint64_t sub_1009F6C10()
{
  return sub_1009F92DC(&qword_1010F8318);
}

uint64_t sub_1009F6C1C(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  char v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v5 = a2 & 1;
  v6 = *(_QWORD *)(sub_10001A9A8(&qword_1010EF7C0) - 8);
  v7 = (*(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = *(_QWORD *)(sub_10001A9A8(&qword_1010F8318) - 8);
  v10 = v2 + ((v7 + v8 + *(unsigned __int8 *)(v9 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
  v11 = (_QWORD *)swift_task_alloc(dword_10110F75C);
  *(_QWORD *)(v3 + 16) = v11;
  *v11 = v3;
  v11[1] = sub_100004A74;
  return sub_1009D4284(a1, v5, v2 + v7, v10);
}

uint64_t sub_1009F6CE8()
{
  return sub_1009F912C(&qword_1010F8318);
}

uint64_t sub_1009F6CF4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v4 = *(_QWORD *)(sub_10001A9A8(&qword_1010EF7C0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = (*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = *(_QWORD *)(sub_10001A9A8(&qword_1010F8318) - 8);
  v8 = (v6 + *(unsigned __int8 *)(v7 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v9 = *(_QWORD *)(v1 + v6);
  v10 = v1 + v8;
  v11 = (_QWORD *)swift_task_alloc(dword_10110F76C);
  *(_QWORD *)(v2 + 16) = v11;
  *v11 = v2;
  v11[1] = sub_100004A74;
  return sub_1009C9FFC(a1, v1 + v5, v9, v10);
}

uint64_t sub_1009F6DD0(uint64_t a1, void (*a2)(void))
{
  sub_1009F6E30(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), a2);
  return a1;
}

void sub_1009F6E30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, unint64_t a18, void (*a19)(void))
{
  switch((a18 >> 59) & 6 | ((a16 & 0x2000000000000000) != 0))
  {
    case 0uLL:
    case 2uLL:
      a19();
      ((void (*)(uint64_t, uint64_t))a19)(a3, a4);
      ((void (*)(uint64_t, uint64_t))a19)(a5, a6);
      break;
    case 1uLL:
      a19();
      ((void (*)(uint64_t, uint64_t))a19)(a3, a4);
      ((void (*)(uint64_t, uint64_t))a19)(a5, a6);
      ((void (*)(uint64_t, uint64_t))a19)(a7, a8);
      ((void (*)(uint64_t, uint64_t))a19)(a9, a10);
      ((void (*)(uint64_t, uint64_t))a19)(a11, a12);
      ((void (*)(uint64_t, uint64_t))a19)(a13, a14);
      ((void (*)(uint64_t, unint64_t))a19)(a15, a16 & 0xDFFFFFFFFFFFFFFFLL);
      ((void (*)(uint64_t, unint64_t))a19)(a17, a18 & 0xCFFFFFFFFFFFFFFFLL);
      break;
    case 3uLL:
      a19();
      ((void (*)(uint64_t, uint64_t))a19)(a3, a4);
      break;
    default:
      return;
  }
}

unint64_t sub_1009F6FD4()
{
  unint64_t result;

  result = qword_10110F7B0;
  if (!qword_10110F7B0)
  {
    result = swift_getWitnessTable(byte_100E29750, &type metadata for PencilPairingCommand);
    atomic_store(result, &qword_10110F7B0);
  }
  return result;
}

uint64_t sub_1009F7018(uint64_t a1)
{
  sub_1009F7070(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136));
  return a1;
}

void sub_1009F7070(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, unint64_t a18)
{
  if ((~(a2 & a4 & a6 & a8 & a10 & a12 & a14 & a16 & a18) & 0x3000000000000000) != 0)
    sub_1009F6E30(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, (void (*)(void))sub_10001BC14);
}

uint64_t sub_1009F710C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v5 = *(_QWORD *)(v1 + 16);
  v4 = *(_QWORD *)(v1 + 24);
  v6 = (_QWORD *)swift_task_alloc(dword_10110F7BC);
  *(_QWORD *)(v2 + 16) = v6;
  *v6 = v2;
  v6[1] = sub_100004A74;
  return sub_1009EE034(a1, v5, v4);
}

unint64_t sub_1009F7170()
{
  unint64_t result;

  result = qword_10110F7C8;
  if (!qword_10110F7C8)
  {
    result = swift_getWitnessTable(byte_100E29728, &type metadata for PencilPairingCommand);
    atomic_store(result, &qword_10110F7C8);
  }
  return result;
}

uint64_t sub_1009F71B4()
{
  uint64_t v0;

  sub_1009F6E30(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 152), (void (*)(void))sub_10001BC14);
  return swift_deallocObject(v0, 160, 7);
}

uint64_t sub_1009F7214(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v5 = *(_QWORD *)(v1 + 16);
  v4 = *(_QWORD *)(v1 + 24);
  v6 = (_QWORD *)swift_task_alloc(dword_10110F7DC);
  *(_QWORD *)(v2 + 16) = v6;
  *v6 = v2;
  v6[1] = sub_100004A74;
  return sub_1009EC27C(a1, v5, v4);
}

uint64_t sub_1009F7278()
{
  _QWORD *v0;

  swift_unknownObjectRelease(v0[2]);
  swift_release(v0[4]);
  swift_release(v0[5]);
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1009F72AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;
  uint64_t *v4;

  v2 = swift_task_alloc(dword_10110F7EC);
  v3 = *(_OWORD *)(v0 + 32);
  *(_QWORD *)(v1 + 16) = v2;
  *(_QWORD *)v2 = v1;
  *(_QWORD *)(v2 + 8) = sub_100004A74;
  *(_OWORD *)(v2 + 24) = v3;
  v4 = (uint64_t *)swift_task_alloc(dword_10110F7FC);
  *(_QWORD *)(v2 + 40) = v4;
  *v4 = v2;
  v4[1] = (uint64_t)sub_1009EC35C;
  return sub_1009EC5FC();
}

uint64_t sub_1009F732C(uint64_t a1)
{
  sub_1009F739C(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_QWORD *)(a1 + 152),
    *(_QWORD *)(a1 + 160),
    *(_QWORD *)(a1 + 168),
    *(_QWORD *)(a1 + 176),
    *(_QWORD *)(a1 + 184),
    *(_QWORD *)(a1 + 192),
    *(_QWORD *)(a1 + 200),
    *(_QWORD *)(a1 + 208),
    *(_QWORD *)(a1 + 216),
    *(_QWORD *)(a1 + 224),
    *(_QWORD *)(a1 + 232));
  return a1;
}

uint64_t sub_1009F739C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8, uint64_t a9, unint64_t a10, uint64_t a11, unint64_t a12, uint64_t a13, unint64_t a14, uint64_t a15, unint64_t a16, uint64_t a17, unint64_t a18, uint64_t a19, unint64_t a20,uint64_t a21,unint64_t a22,uint64_t a23,unint64_t a24,uint64_t a25,unint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,unint64_t a30)
{
  uint64_t result;

  if (a2 != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10001BC14(a7, a8);
    sub_10001BC14(a9, a10);
    sub_10001BC14(a11, a12);
    sub_10001BC14(a13, a14);
    sub_10001BC14(a15, a16);
    sub_10001BC14(a17, a18);
    sub_10001BC14(a19, a20);
    sub_10001EF3C(a21, a22);
    sub_10001BC14(a23, a24);
    sub_10001BC14(a25, a26);
    swift_bridgeObjectRelease();
    return sub_10001EF3C(a29, a30);
  }
  return result;
}

uint64_t sub_1009F74FC(uint64_t a1)
{
  unint64_t v1;

  v1 = *(_QWORD *)(a1 + 128);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

uint64_t sub_1009F7514(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unint64_t a10, uint64_t a11, unint64_t a12, uint64_t a13, unint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, unint64_t a20,uint64_t a21,unint64_t a22,uint64_t a23,unint64_t a24,uint64_t a25,unint64_t a26,uint64_t a27,unint64_t a28,uint64_t a29,unint64_t a30,uint64_t a31,unint64_t a32,uint64_t a33,unint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,unint64_t a38)
{
  if (a17)
  {
    sub_10001BD08(result, a2);
    swift_bridgeObjectRetain(a8);
    swift_bridgeObjectRetain(a4);
    swift_bridgeObjectRetain(a6);
    sub_10001BBBC(a9, a10);
    sub_10001BBBC(a11, a12);
    sub_10001BBBC(a13, a14);
    swift_bridgeObjectRetain(a17);
    sub_10001BBBC(a19, a20);
    sub_10001BBBC(a21, a22);
    sub_10001BBBC(a23, a24);
    sub_10001BBBC(a25, a26);
    sub_10001BBBC(a27, a28);
    sub_10001BD08(a29, a30);
    sub_10001BBBC(a31, a32);
    sub_10001BBBC(a33, a34);
    swift_bridgeObjectRetain(a36);
    return sub_10001BD08(a37, a38);
  }
  return result;
}

uint64_t sub_1009F76BC(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  v6 = *(_OWORD *)(a1 + 256);
  v7 = *(_OWORD *)(a1 + 272);
  v4 = *(_OWORD *)(a1 + 224);
  v5 = *(_OWORD *)(a1 + 240);
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_QWORD *)(a1 + 152),
    *(_QWORD *)(a1 + 160),
    *(_QWORD *)(a1 + 168),
    *(_QWORD *)(a1 + 176),
    *(_QWORD *)(a1 + 184),
    *(_QWORD *)(a1 + 192),
    *(_QWORD *)(a1 + 200),
    *(_QWORD *)(a1 + 208),
    *(_QWORD *)(a1 + 216),
    v4,
    *((_QWORD *)&v4 + 1),
    v5,
    *((_QWORD *)&v5 + 1),
    v6,
    *((_QWORD *)&v6 + 1),
    v7,
    *((_QWORD *)&v7 + 1),
    *(_QWORD *)(a1 + 288),
    *(_QWORD *)(a1 + 296));
  return a1;
}

uint64_t sub_1009F7740(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unint64_t a10, uint64_t a11, unint64_t a12, uint64_t a13, unint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, unint64_t a20,uint64_t a21,unint64_t a22,uint64_t a23,unint64_t a24,uint64_t a25,unint64_t a26,uint64_t a27,unint64_t a28,uint64_t a29,unint64_t a30,uint64_t a31,unint64_t a32,uint64_t a33,unint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,unint64_t a38)
{
  if (a17)
  {
    sub_10001EF3C(result, a2);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10001BC14(a9, a10);
    sub_10001BC14(a11, a12);
    sub_10001BC14(a13, a14);
    swift_bridgeObjectRelease();
    sub_10001BC14(a19, a20);
    sub_10001BC14(a21, a22);
    sub_10001BC14(a23, a24);
    sub_10001BC14(a25, a26);
    sub_10001BC14(a27, a28);
    sub_10001EF3C(a29, a30);
    sub_10001BC14(a31, a32);
    sub_10001BC14(a33, a34);
    swift_bridgeObjectRelease();
    return sub_10001EF3C(a37, a38);
  }
  return result;
}

uint64_t sub_1009F78E8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1009F790C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc(dword_10110F82C);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_100004C28;
  return sub_1009E7C44(a1, v4);
}

uint64_t sub_1009F7970(uint64_t a1)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  __int16 v4;
  unint64_t v5;
  int v6;
  unsigned int v7;
  unsigned int v8;

  v1 = *(_QWORD *)(a1 + 56);
  v2 = *(_QWORD *)(a1 + 72);
  v3 = *(_QWORD *)(a1 + 88);
  v4 = *(_WORD *)(a1 + 110);
  v5 = *(_QWORD *)(a1 + 120);
  v6 = (8
      * ((*(_QWORD *)(a1 + 24) >> 58) & 0xC | (*(_QWORD *)(a1 + 8) >> 60) & 3 | *(_BYTE *)(a1 + 47) & 0x30 | (v1 >> 54) & 0xC0 | (v2 >> 52) & 0x300 | (v3 >> 50) & 0xC00 | v4 & 0x3000 | (v5 >> 46) & 0x4000)) | (((*(_QWORD *)(a1 + 24) >> 58) & 0xC | (*(_QWORD *)(a1 + 8) >> 60) & 3 | *(_BYTE *)(a1 + 47) & 0x30 | (v1 >> 54) & 0xC0 | (v2 >> 52) & 0x300 | (v3 >> 50) & 0xC00 | v4 & 0x3000 | (v5 >> 46) & 0xC000 | (*(_QWORD *)(a1 + 136) >> 44) & 0x30000) >> 15);
  v7 = v6 ^ 0x3FFFF;
  v8 = 0x40000 - v6;
  if (v7 >= 0x3FFFB)
    return 0;
  else
    return v8;
}

uint64_t sub_1009F7A18(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc(dword_10110F84C);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_100004A74;
  return sub_1009F246C(a1, v4);
}

uint64_t sub_1009F7A7C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc(dword_10110F864);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_100004A74;
  return sub_1009F3354(a1, v4);
}

uint64_t sub_1009F7AD0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = v3 | 7;
  v6 = ((*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v6, v5);
}

uint64_t sub_1009F7B58()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for UUID(0) - 8) + 80);
  v3 = *(_QWORD *)(v0 + 32);
  v4 = v0 + ((v2 + 40) & ~v2);
  v5 = (_QWORD *)swift_task_alloc(dword_10110F874);
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_100004A74;
  v5[3] = v3;
  v6 = (_QWORD *)swift_task_alloc(dword_10110F88C);
  v5[4] = v6;
  *v6 = v5;
  v6[1] = sub_1009F3440;
  return sub_1009F3678(v4);
}

uint64_t sub_1009F7BF0()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t);
  uint64_t v19;

  v1 = (int *)type metadata accessor for BeaconProductInfoRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v19 = *(_QWORD *)(v2 + 64);
  swift_release();
  v5 = v0 + v4;
  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v0 + v4, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v7 = v0 + v4 + v1[12];
  v8 = type metadata accessor for URL(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (!v10(v7, 1, v8))
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
  v11 = v5 + v1[13];
  if (!v10(v11, 1, v8))
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v11, v8);
  swift_bridgeObjectRelease();
  v12 = v5 + v1[16];
  v13 = type metadata accessor for AccessoryInfoResponseContent.Configuration(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 48))(v12, 1, v13))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v14 = v12 + *(int *)(v13 + 40);
    if (!v10(v14, 1, v8))
      (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v14, v8);
    v15 = v12 + *(int *)(v13 + 44);
    if (!v10(v15, 1, v8))
      (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v15, v8);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v4 = (v3 + 24) & ~v3;
  }
  v16 = v3 | 7;
  swift_bridgeObjectRelease();
  v17 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v17(v5 + v1[19], v8);
  v17(v5 + v1[20], v8);
  v17(v5 + v1[21], v8);
  v17(v5 + v1[22], v8);
  v17(v5 + v1[23], v8);
  v17(v5 + v1[24], v8);
  swift_release();
  return swift_deallocObject(v0, ((v19 + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 16, v16);
}

uint64_t sub_1009F7EA8()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t *v3;

  v1 = *(_QWORD *)(type metadata accessor for BeaconProductInfoRecord(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (uint64_t *)(v0 + ((*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8));
  return sub_100CAA114(v0 + v2, *v3, v3[1]);
}

uint64_t *sub_1009F7F00(uint64_t *a1, void (*a2)(uint64_t, uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = a1[2];
  v5 = a1[3];
  v6 = a1[4];
  v7 = a1[5];
  a2(*a1, a1[1]);
  a2(v4, v5);
  a2(v6, v7);
  return a1;
}

uint64_t sub_1009F7F64(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v5 = *(_QWORD *)(v1 + 16);
  v4 = *(_QWORD *)(v1 + 24);
  v6 = (_QWORD *)swift_task_alloc(dword_10110F8B4);
  *(_QWORD *)(v2 + 16) = v6;
  *v6 = v2;
  v6[1] = sub_100004A74;
  return sub_1009EA0A4(a1, v5, v4);
}

unint64_t sub_1009F7FC8()
{
  unint64_t result;

  result = qword_10110F8C0;
  if (!qword_10110F8C0)
  {
    result = swift_getWitnessTable(byte_100E3DDD0, &type metadata for AccessoryOwnerCommand);
    atomic_store(result, &qword_10110F8C0);
  }
  return result;
}

uint64_t sub_1009F8010(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v5 = *(_QWORD *)(v1 + 16);
  v4 = *(_QWORD *)(v1 + 24);
  v6 = (_QWORD *)swift_task_alloc(dword_10110F8CC);
  *(_QWORD *)(v2 + 16) = v6;
  *v6 = v2;
  v6[1] = sub_100004A74;
  return sub_1009EA0A4(a1, v5, v4);
}

unint64_t sub_1009F8074()
{
  unint64_t result;

  result = qword_10110F8D8;
  if (!qword_10110F8D8)
  {
    result = swift_getWitnessTable(byte_100E633E4, &type metadata for LineUpAccessoryOwnerCommand);
    atomic_store(result, &qword_10110F8D8);
  }
  return result;
}

uint64_t sub_1009F80B8()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v2 = (_QWORD *)swift_task_alloc(dword_10110F90C);
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = sub_100004A74;
  v2[2] = v0;
  return swift_task_switch(sub_1009C89EC, 0, 0);
}

uint64_t sub_1009F8114(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;

  v4 = (_QWORD *)swift_task_alloc(dword_10110F91C);
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_100067F58;
  return sub_1009C8BB4(a1, v1);
}

uint64_t sub_1009F8164(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PencilPairingService.AttachedLocalFindableAccessory(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_1009F81A8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  v6 = (_QWORD *)swift_task_alloc(dword_10110F95C);
  *(_QWORD *)(v2 + 16) = v6;
  *v6 = v2;
  v6[1] = sub_100004A74;
  return sub_1009C0688(a1, v4, v5);
}

uint64_t sub_1009F8214(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;

  v4 = (_QWORD *)swift_task_alloc(dword_10110F974);
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_100004A74;
  return sub_1009C4808(a1, v1);
}

uint64_t sub_1009F8268()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t);
  uint64_t v20;

  v1 = (int *)type metadata accessor for DeviceEvent(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_release();
  v6 = v0 + v4;
  v7 = v0 + v4 + v1[6];
  v8 = type metadata accessor for Date(0);
  v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8);
  v9(v7, v8);
  v10 = v0 + v4 + v1[7];
  v11 = type metadata accessor for DeviceEvent.Location(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(v10, 1, v11))
    v9(v10 + *(int *)(v11 + 28), v8);
  v12 = v6 + v1[8];
  v13 = type metadata accessor for DeviceEvent.AttachmentInfo(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 48))(v12, 1, v13))
  {
    v14 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v12, v14);
  }
  v15 = v3 | 7;
  v16 = v4 + v5;
  v17 = v6 + v1[9];
  v18 = type metadata accessor for UUID(0);
  v19 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 8);
  v19(v17, v18);
  v20 = type metadata accessor for BeaconIdentifier(0);
  v19(v17 + *(int *)(v20 + 20), v18);
  v9(v6 + v1[10], v8);
  return swift_deallocObject(v0, v16, v15);
}

uint64_t sub_1009F83E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for DeviceEvent(0) - 8) + 80);
  v3 = v0 + ((v2 + 24) & ~v2);
  v4 = (_QWORD *)swift_task_alloc(dword_10110F9AC);
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_100004A74;
  v5 = (_QWORD *)swift_task_alloc(dword_10110F344);
  v4[2] = v5;
  *v5 = v4;
  v5[1] = sub_100004A74;
  return sub_1009BB858(v3);
}

uint64_t sub_1009F8474()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_release(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1009F84F0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for UUID(0) - 8) + 80);
  return sub_100A83194(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), v0 + ((v1 + 32) & ~v1));
}

uint64_t sub_1009F8530()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;

  v1 = (_QWORD *)swift_task_alloc(dword_10110F9CC);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_100004A74;
  v2 = (_QWORD *)swift_task_alloc(dword_10110F34C);
  v1[2] = v2;
  *v2 = v1;
  v2[1] = sub_1002613B8;
  return sub_1009BD388();
}

uint64_t sub_1009F8594()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;

  v1 = (_QWORD *)swift_task_alloc(dword_10110F9DC);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_100004A74;
  v2 = (_QWORD *)swift_task_alloc(dword_10110F354);
  v1[2] = v2;
  *v2 = v1;
  v2[1] = sub_100030654;
  return sub_1009BF67C();
}

uint64_t sub_1009F85F8()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;

  v1 = (_QWORD *)swift_task_alloc(dword_10110F9EC);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_100004A74;
  v2 = (_QWORD *)swift_task_alloc(dword_10110FA34);
  v1[2] = v2;
  *v2 = v1;
  v2[1] = sub_1002613B8;
  return sub_1009B561C();
}

uint64_t sub_1009F865C()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;

  v1 = (_QWORD *)swift_task_alloc(dword_10110F9FC);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_100004A74;
  v2 = (_QWORD *)swift_task_alloc(dword_10110FA1C);
  v1[2] = v2;
  *v2 = v1;
  v2[1] = sub_1002613B8;
  return sub_1009B62F4();
}

uint64_t sub_1009F86C0()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;

  v1 = (_QWORD *)swift_task_alloc(dword_10110FA0C);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_100004A74;
  v2 = (_QWORD *)swift_task_alloc(dword_10110F33C);
  v1[2] = v2;
  *v2 = v1;
  v2[1] = sub_1002613B8;
  return sub_1009B79B8();
}

uint64_t sub_1009F8724()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1009F8748()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_release(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1009F87BC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for UUID(0) - 8) + 80);
  v5 = *(_QWORD *)(v1 + 16);
  v6 = v1 + ((v4 + 24) & ~v4);
  v7 = (_QWORD *)swift_task_alloc(dword_10110FA24);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_100004A74;
  return sub_1009E07D8(a1, v5, v6);
}

uint64_t sub_1009F883C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_10110FA3C);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_100004A74;
  return sub_1009E1DC8(a1, v4, v5, v6);
}

uint64_t sub_1009F88B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;

  v2 = *(_QWORD *)(v0 + 32);
  v3 = (_QWORD *)swift_task_alloc(dword_10110FA4C);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_100004A74;
  v4 = (_QWORD *)swift_task_alloc(dword_10110F334);
  v3[2] = v4;
  *v4 = v3;
  v4[1] = sub_100004A74;
  v4[407] = v2;
  return swift_task_switch(sub_1009B532C, v2, 0);
}

uint64_t sub_1009F8938(uint64_t a1)
{
  uint64_t *v1;

  return sub_1009DE2C8(a1, v1[2], v1[3], v1[4], (void (*)(uint64_t, char *, uint64_t))&unk_1010A1298, (uint64_t)&unk_1010A12C0, (uint64_t)&unk_10110FA70, (uint64_t)&unk_10110FA80);
}

uint64_t sub_1009F8978()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v2 = *(_QWORD *)(sub_10001A9A8(&qword_10110FA60) - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = *(_QWORD *)(v2 + 64);
  v5 = *(_QWORD *)(sub_10001A9A8(&qword_1010EF7C0) - 8);
  v6 = (v3 + v4 + *(unsigned __int8 *)(v5 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = *(_QWORD *)(v0 + 16);
  v8 = v0 + v3;
  v9 = v0 + v6;
  v10 = *(_QWORD *)(v0 + ((*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFF8));
  v11 = (_QWORD *)swift_task_alloc(dword_10110FA6C);
  *(_QWORD *)(v1 + 16) = v11;
  *v11 = v1;
  v11[1] = sub_100004A74;
  return sub_1009DE5C4(v7, v8, v9, v10);
}

uint64_t sub_1009F8A34()
{
  return sub_1009F92DC(&qword_10110FA60);
}

uint64_t sub_1009F8A40(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  char v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v5 = a2 & 1;
  v6 = *(_QWORD *)(sub_10001A9A8(&qword_1010EF7C0) - 8);
  v7 = (*(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = *(_QWORD *)(sub_10001A9A8(&qword_10110FA60) - 8);
  v10 = v2 + ((v7 + v8 + *(unsigned __int8 *)(v9 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
  v11 = (_QWORD *)swift_task_alloc(dword_10110FA7C);
  *(_QWORD *)(v3 + 16) = v11;
  *v11 = v3;
  v11[1] = sub_100004A74;
  return sub_1009E00D4(a1, v5, v2 + v7, v10);
}

uint64_t sub_1009F8B10(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v4 = *(_QWORD *)(sub_10001A9A8(&qword_10110FA60) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = *(_QWORD *)(v4 + 64);
  v7 = *(_QWORD *)(sub_10001A9A8(&qword_1010EF7C0) - 8);
  v8 = (v5 + v6 + *(unsigned __int8 *)(v7 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v9 = *(_QWORD *)(v1 + 16);
  v10 = v1 + v8;
  v11 = (_QWORD *)swift_task_alloc(dword_10110FA8C);
  *(_QWORD *)(v2 + 16) = v11;
  *v11 = v2;
  v11[1] = sub_100004A74;
  return sub_1009DE8B4(a1, v9, v1 + v5, v10);
}

uint64_t sub_1009F8BE0(uint64_t a1)
{
  uint64_t *v1;

  return sub_1009DE2C8(a1, v1[2], v1[3], v1[4], (void (*)(uint64_t, char *, uint64_t))&unk_1010A1310, (uint64_t)&unk_1010A1338, (uint64_t)&unk_10110FAA8, (uint64_t)&unk_10110FAB8);
}

uint64_t sub_1009F8C20()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v2 = *(_QWORD *)(sub_10001A9A8(&qword_10110FA60) - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = *(_QWORD *)(v2 + 64);
  v5 = *(_QWORD *)(sub_10001A9A8(&qword_1010EF7C0) - 8);
  v6 = (v3 + v4 + *(unsigned __int8 *)(v5 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = *(_QWORD *)(v0 + 16);
  v8 = v0 + v3;
  v9 = v0 + v6;
  v10 = *(_QWORD *)(v0 + ((*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFF8));
  v11 = (_QWORD *)swift_task_alloc(dword_10110FAA4);
  *(_QWORD *)(v1 + 16) = v11;
  *v11 = v1;
  v11[1] = sub_100004A74;
  return sub_1009D8A44(v7, v8, v9, v10);
}

uint64_t sub_1009F8CDC()
{
  return sub_1009F92DC(&qword_10110FA60);
}

uint64_t sub_1009F8CE8(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  char v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v5 = a2 & 1;
  v6 = *(_QWORD *)(sub_10001A9A8(&qword_1010EF7C0) - 8);
  v7 = (*(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = *(_QWORD *)(sub_10001A9A8(&qword_10110FA60) - 8);
  v10 = v2 + ((v7 + v8 + *(unsigned __int8 *)(v9 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
  v11 = (_QWORD *)swift_task_alloc(dword_10110FAB4);
  *(_QWORD *)(v3 + 16) = v11;
  *v11 = v3;
  v11[1] = sub_100004A74;
  return sub_1009DD788(a1, v5, v2 + v7, v10);
}

uint64_t sub_1009F8DB8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v1 = sub_10001A9A8(&qword_10110FA60);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = sub_10001A9A8(&qword_1010EF7C0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v4 + v5 + v8) & ~v8;
  v10 = v3 | v8 | 7;
  v11 = ((*(_QWORD *)(v7 + 64) + v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v9, v6);
  return swift_deallocObject(v0, v11, v10);
}

uint64_t sub_1009F8E88(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v4 = *(_QWORD *)(sub_10001A9A8(&qword_10110FA60) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = *(_QWORD *)(v4 + 64);
  v7 = *(_QWORD *)(sub_10001A9A8(&qword_1010EF7C0) - 8);
  v8 = (v5 + v6 + *(unsigned __int8 *)(v7 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v9 = *(_QWORD *)(v1 + 16);
  v10 = v1 + v8;
  v11 = (_QWORD *)swift_task_alloc(dword_10110FAC4);
  *(_QWORD *)(v2 + 16) = v11;
  *v11 = v2;
  v11[1] = sub_100004A74;
  return sub_1009D8C40(a1, v9, v1 + v5, v10);
}

uint64_t sub_1009F8F58(uint64_t a1)
{
  uint64_t *v1;

  return sub_1009D4A88(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_1009F8F64()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v1 = sub_10001A9A8(&qword_1010EF7C0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = sub_10001A9A8(&qword_101111900);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v4 + v5 + v8) & ~v8;
  v10 = v3 | v8 | 7;
  v11 = ((*(_QWORD *)(v7 + 64) + v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v9, v6);
  return swift_deallocObject(v0, v11, v10);
}

uint64_t sub_1009F903C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;

  v4 = *(_QWORD *)(sub_10001A9A8(&qword_1010EF7C0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = *(_QWORD *)(v4 + 64);
  v7 = *(_QWORD *)(sub_10001A9A8(&qword_101111900) - 8);
  v8 = (v5 + v6 + *(unsigned __int8 *)(v7 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v9 = v1[2];
  v10 = v1[3];
  v11 = v1[4];
  v12 = (uint64_t)v1 + v5;
  v13 = (uint64_t)v1 + v8;
  v14 = *(_QWORD *)((char *)v1 + ((*(_QWORD *)(v7 + 64) + v8 + 7) & 0xFFFFFFFFFFFFF8));
  v15 = (_QWORD *)swift_task_alloc(dword_10110FADC);
  *(_QWORD *)(v2 + 16) = v15;
  *v15 = v2;
  v15[1] = sub_100004C28;
  return sub_1009D4C9C(a1, v9, v10, v11, v12, v13, v14);
}

uint64_t sub_1009F9120()
{
  return sub_1009F912C(&qword_101111900);
}

uint64_t sub_1009F912C(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v3 = sub_10001A9A8(&qword_1010EF7C0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = (v5 + 16) & ~v5;
  v7 = (*(_QWORD *)(v4 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  v8 = sub_10001A9A8(a1);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = (v7 + v10 + 8) & ~v10;
  v12 = v5 | v10 | 7;
  v13 = ((*(_QWORD *)(v9 + 64) + v11 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v1 + v6, v3);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v1 + v11, v8);
  return swift_deallocObject(v1, v13, v12);
}

uint64_t sub_1009F9208()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v2 = *(_QWORD *)(sub_10001A9A8(&qword_1010EF7C0) - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  v5 = *(_QWORD *)(sub_10001A9A8(&qword_101111900) - 8);
  v6 = (v4 + *(unsigned __int8 *)(v5 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = *(_QWORD *)(v0 + v4);
  v8 = v0 + v6;
  v9 = (_QWORD *)swift_task_alloc(dword_10110FAEC);
  *(_QWORD *)(v1 + 16) = v9;
  *v9 = v1;
  v9[1] = sub_100004A74;
  return sub_1009D4FF0(v0 + v3, v7, v8);
}

uint64_t sub_1009F92D0()
{
  return sub_1009F92DC(&qword_101111900);
}

uint64_t sub_1009F92DC(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v3 = sub_10001A9A8(&qword_1010EF7C0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = (v5 + 16) & ~v5;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = sub_10001A9A8(a1);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = (v6 + v7 + v10) & ~v10;
  v12 = v5 | v10 | 7;
  v13 = ((*(_QWORD *)(v9 + 64) + v11 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v1 + v6, v3);
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v1 + v11, v8);
  return swift_deallocObject(v1, v13, v12);
}

uint64_t sub_1009F93A4(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  char v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v5 = a2 & 1;
  v6 = *(_QWORD *)(sub_10001A9A8(&qword_1010EF7C0) - 8);
  v7 = (*(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = *(_QWORD *)(sub_10001A9A8(&qword_101111900) - 8);
  v10 = v2 + ((v7 + v8 + *(unsigned __int8 *)(v9 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
  v11 = (_QWORD *)swift_task_alloc(dword_10110FAFC);
  *(_QWORD *)(v3 + 16) = v11;
  *v11 = v3;
  v11[1] = sub_100004A74;
  return sub_1009D7F7C(a1, v5, v2 + v7, v10);
}

uint64_t sub_1009F9474(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_10111EADC);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_100004A74;
  return sub_100D40558(a1, v4, v5, v6);
}

uint64_t sub_1009F94E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = sub_10001A9A8(&qword_1010EF7C0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v3 | 7;
  v6 = ((*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v6, v5);
}

uint64_t sub_1009F9564(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = *(_QWORD *)(sub_10001A9A8(&qword_1010EF7C0) - 8);
  v5 = *(_QWORD *)(v1 + 16);
  v6 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  v7 = (_QWORD *)swift_task_alloc(dword_10110FB24);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_100004A74;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_10110FB20 + dword_10110FB20))(a1, v5, v6);
}

uint64_t sub_1009F9614(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2[3] = a1;
  v2[4] = a2;
  v3 = sub_10001A9A8(&qword_1010EF7C0);
  v2[5] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[6] = v4;
  v5 = (*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[7] = swift_task_alloc(v5);
  v2[8] = swift_task_alloc(v5);
  v6 = type metadata accessor for UUID(0);
  v2[9] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v2[10] = v7;
  v2[11] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1009F96B0, 0, 0);
}

uint64_t sub_1009F96B0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t);
  void (*v11)(uint64_t, uint64_t);
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;

  v1 = v0[8];
  v2 = v0[5];
  v3 = v0[6];
  v4 = v0[4];
  v5 = sub_10001A9A8(&qword_10110F778);
  v6 = *(unsigned __int8 *)(v3 + 80);
  v7 = (v6 + 32) & ~v6;
  v8 = swift_allocObject(v5, v7 + *(_QWORD *)(v3 + 72), v6 | 7);
  *(_OWORD *)(v8 + 16) = xmmword_100E22B00;
  v9 = v8 + v7;
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v0[12] = v10;
  v10(v9, v4, v2);
  sub_10009A578(0, 1, 0);
  v10(v1, v9, v2);
  Identifier.id.getter(v2);
  v11 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v0[13] = v11;
  v11(v1, v2);
  if ((swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage) & 1) == 0)
    sub_10009A578(0, _swiftEmptyArrayStorage[2] + 1, 1);
  v13 = _swiftEmptyArrayStorage[2];
  v12 = _swiftEmptyArrayStorage[3];
  if (v13 >= v12 >> 1)
    sub_10009A578(v12 > 1, v13 + 1, 1);
  v0[14] = _swiftEmptyArrayStorage;
  v15 = v0[10];
  v14 = v0[11];
  v16 = v0[9];
  v17 = v0[5];
  _swiftEmptyArrayStorage[2] = v13 + 1;
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 32))((char *)_swiftEmptyArrayStorage+ ((*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80))+ *(_QWORD *)(v15 + 72) * v13, v14, v16);
  swift_setDeallocating(v8);
  swift_arrayDestroy(v9, *(_QWORD *)(v8 + 16), v17);
  swift_deallocClassInstance(v8, 32, 7);
  v18 = type metadata accessor for CentralManager(0);
  v19 = sub_100006204(&qword_1010EC468, (uint64_t (*)(uint64_t))&type metadata accessor for CentralManager, (uint64_t)&protocol conformance descriptor for CentralManager);
  v20 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of CentralManagerProtocol.retrievePeripherals(identifiers:)[1]);
  v0[15] = v20;
  *v20 = v0;
  v20[1] = sub_1009F98C4;
  return dispatch thunk of CentralManagerProtocol.retrievePeripherals(identifiers:)(_swiftEmptyArrayStorage, v18, v19);
}

uint64_t sub_1009F98C4(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 120);
  *(_QWORD *)(v3 + 128) = a1;
  *(_QWORD *)(v3 + 136) = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    v5 = sub_1009F9C58;
  }
  else
  {
    swift_release();
    v5 = sub_1009F9938;
  }
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_1009F9938()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  _BOOL4 v17;
  void (*v18)(uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v1 = *(_QWORD *)(v0 + 128);
  if ((unint64_t)v1 >> 62)
  {
    if (v1 < 0)
      v7 = *(_QWORD *)(v0 + 128);
    else
      v7 = v1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*(_QWORD *)(v0 + 128));
    v8 = _CocoaArrayWrapper.endIndex.getter(v7);
    swift_bridgeObjectRelease();
    if (v8)
      goto LABEL_3;
  }
  else if (*(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_3:
    if ((v1 & 0xC000000000000001) != 0)
    {
      v2 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, *(_QWORD *)(v0 + 128));
      goto LABEL_6;
    }
    if (*(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      v2 = *(_QWORD *)(*(_QWORD *)(v0 + 128) + 32);
      swift_retain();
LABEL_6:
      v3 = *(_QWORD *)(v0 + 88);
      v5 = *(_QWORD *)(v0 + 56);
      v4 = *(_QWORD *)(v0 + 64);
      swift_bridgeObjectRelease();
      swift_task_dealloc(v3);
      swift_task_dealloc(v4);
      swift_task_dealloc(v5);
      return (*(uint64_t (**)(uint64_t))(v0 + 8))(v2);
    }
    __break(1u);
    goto LABEL_18;
  }
  swift_bridgeObjectRelease();
  if (qword_1010EA100 != -1)
LABEL_18:
    swift_once(&qword_1010EA100, sub_1009B44BC);
  v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 96);
  v10 = *(_QWORD *)(v0 + 56);
  v12 = *(_QWORD *)(v0 + 32);
  v11 = *(_QWORD *)(v0 + 40);
  v13 = type metadata accessor for Logger(0);
  sub_10001A9E8(v13, (uint64_t)qword_10110F2A8);
  v14 = v9(v10, v12, v11);
  v15 = Logger.logObject.getter(v14);
  v16 = static os_log_type_t.error.getter(v15);
  v17 = os_log_type_enabled(v15, v16);
  v18 = *(void (**)(uint64_t, uint64_t))(v0 + 104);
  v19 = *(_QWORD *)(v0 + 56);
  v20 = *(_QWORD *)(v0 + 40);
  if (v17)
  {
    v21 = (uint8_t *)swift_slowAlloc(12, -1);
    v22 = swift_slowAlloc(32, -1);
    v31 = v22;
    *(_DWORD *)v21 = 136446210;
    v23 = sub_1000193A4(&qword_1010EE1D0, &qword_1010EF7C0, (const char *)&protocol conformance descriptor for Identifier<A>);
    v24 = dispatch thunk of CustomStringConvertible.description.getter(v20, v23);
    *(_QWORD *)(v0 + 16) = sub_100016940(v24, v25, &v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v21 + 4, v21 + 12);
    swift_bridgeObjectRelease();
    v18(v19, v20);
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "Missing peripheral for %{public}s", v21, 0xCu);
    swift_arrayDestroy(v22, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v22, -1, -1);
    swift_slowDealloc(v21, -1, -1);
  }
  else
  {
    v18(*(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 40));
  }

  v26 = sub_100350CCC();
  v27 = swift_allocError(&type metadata for PencilPairingService.Error, v26, 0, 0);
  *(_OWORD *)v28 = xmmword_100E58220;
  *(_BYTE *)(v28 + 16) = 3;
  swift_willThrow(v27);
  v30 = *(_QWORD *)(v0 + 56);
  v29 = *(_QWORD *)(v0 + 64);
  swift_task_dealloc(*(_QWORD *)(v0 + 88));
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1009F9C58()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_release(*(_QWORD *)(v0 + 112));
  v2 = *(_QWORD *)(v0 + 56);
  v1 = *(_QWORD *)(v0 + 64);
  swift_task_dealloc(*(_QWORD *)(v0 + 88));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1009F9CB4(uint64_t result, uint64_t a2, char a3)
{
  if (a3 == 1)
    return swift_errorRetain(result);
  if (!a3)
    return swift_bridgeObjectRetain(a2);
  return result;
}

uint64_t destroy for PencilPairingService.Error(uint64_t a1)
{
  return sub_1009F9CE4(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t sub_1009F9CE4(uint64_t result, uint64_t a2, char a3)
{
  if (a3 == 1)
    return swift_errorRelease(result);
  if (!a3)
    return swift_bridgeObjectRelease(a2);
  return result;
}

uint64_t _s12searchpartyd20PencilPairingServiceC5ErrorOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_1009F9CB4(*(_QWORD *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for PencilPairingService.Error(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_1009F9CB4(*(_QWORD *)a2, v4, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  sub_1009F9CE4(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for PencilPairingService.Error(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  sub_1009F9CE4(v4, v5, v6);
  return a1;
}

ValueMetadata *type metadata accessor for PencilPairingService.Error()
{
  return &type metadata for PencilPairingService.Error;
}

void sub_1009F9E28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v4 = v3;
  v26 = a2;
  v27 = a3;
  v6 = type metadata accessor for SharedBeaconRecord(0);
  v25 = *(_QWORD *)(v6 - 8);
  v7 = *(_QWORD *)(v25 + 64);
  __chkstk_darwin(v6);
  v8 = dispatch_group_create();
  dispatch_group_enter(v8);
  v9 = sub_10001A9A8(&qword_1011003C0);
  v10 = type metadata accessor for UUID(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(unsigned __int8 *)(v11 + 80);
  v13 = (v12 + 32) & ~v12;
  v14 = swift_allocObject(v9, v13 + *(_QWORD *)(v11 + 72), v12 | 7);
  *(_OWORD *)(v14 + 16) = xmmword_100E22B00;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(v14 + v13, a1 + *(int *)(v6 + 20), v10);
  v15 = swift_allocObject(&unk_1010A1548, 24, 7);
  *(_QWORD *)(v15 + 16) = v8;
  v16 = v8;
  sub_10075B3B4(v14, (uint64_t)sub_1009FFEB0, v15);
  swift_bridgeObjectRelease();
  swift_release();
  OS_dispatch_group.wait()();
  sub_10005972C(a1, (uint64_t)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for SharedBeaconRecord);
  v17 = *(unsigned __int8 *)(v25 + 80);
  v18 = (v17 + 16) & ~v17;
  v19 = (v7 + v18 + 7) & 0xFFFFFFFFFFFFFFF8;
  v20 = (v19 + 23) & 0xFFFFFFFFFFFFFFF8;
  v21 = swift_allocObject(&unk_1010A1570, v20 + 8, v17 | 7);
  sub_1000126EC((uint64_t)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v21 + v18, type metadata accessor for SharedBeaconRecord);
  v22 = (_QWORD *)(v21 + v19);
  v23 = v27;
  *v22 = v26;
  v22[1] = v23;
  *(_QWORD *)(v21 + v20) = v4;
  swift_retain();
  swift_retain();
  sub_1009FC074(a1, (void (*)(_QWORD))sub_1009FE584, v21);
  swift_release();

}

uint64_t sub_1009FA01C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t KeyPath;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(uint64_t, uint64_t, uint64_t);
  int v22;
  uint64_t *v23;
  char v24;
  char *v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t);
  uint64_t v29;
  char *v30;
  uint64_t v31;

  v1 = v0;
  v2 = type metadata accessor for UUID(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v30 = (char *)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10001A9A8((uint64_t *)&unk_10110EE90);
  __chkstk_darwin(v5);
  v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A9A8(&qword_1010ED860);
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v9);
  v14 = (char *)&v29 - v13;
  __chkstk_darwin(v12);
  v16 = (uint64_t *)((char *)&v29 - v15);
  if (qword_1010E9D08 != -1)
    swift_once(&qword_1010E9D08, sub_10059A6E0);
  OS_dispatch_queue.sync<A>(execute:)(sub_100003D88, qword_1011B71A8, &type metadata for Configuration);
  v17 = v31;
  KeyPath = swift_getKeyPath(&unk_100E58500);
  sub_100C1C4BC(KeyPath, v17, v16);
  swift_bridgeObjectRelease();
  swift_release(KeyPath);
  v19 = type metadata accessor for OwnedBeaconRecord(0);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v14, v1 + *(int *)(v19 + 20), v2);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v3 + 56))(v14, 0, 1, v2);
  v20 = (uint64_t)&v7[*(int *)(v5 + 48)];
  sub_1002A380C((uint64_t)v16, (uint64_t)v7);
  sub_1002A380C((uint64_t)v14, v20);
  v21 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48);
  if (v21((uint64_t)v7, 1, v2) == 1)
  {
    sub_100004048((uint64_t)v14, &qword_1010ED860);
    sub_100004048((uint64_t)v16, &qword_1010ED860);
    v22 = v21(v20, 1, v2);
    if (v22 == 1)
      v23 = &qword_1010ED860;
    else
      v23 = (uint64_t *)&unk_10110EE90;
    if (v22 == 1)
      v24 = -1;
    else
      v24 = 0;
  }
  else
  {
    sub_1002A380C((uint64_t)v7, (uint64_t)v11);
    if (v21(v20, 1, v2) == 1)
    {
      sub_100004048((uint64_t)v14, &qword_1010ED860);
      sub_100004048((uint64_t)v16, &qword_1010ED860);
      (*(void (**)(char *, uint64_t))(v3 + 8))(v11, v2);
      v24 = 0;
      v23 = (uint64_t *)&unk_10110EE90;
    }
    else
    {
      v25 = v30;
      (*(void (**)(char *, uint64_t, uint64_t))(v3 + 32))(v30, v20, v2);
      v26 = sub_100006204(&qword_1010EE520, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v24 = dispatch thunk of static Equatable.== infix(_:_:)(v11, v25, v2, v26);
      v27 = *(void (**)(char *, uint64_t))(v3 + 8);
      v27(v25, v2);
      v23 = &qword_1010ED860;
      sub_100004048((uint64_t)v14, &qword_1010ED860);
      sub_100004048((uint64_t)v16, &qword_1010ED860);
      v27(v11, v2);
    }
  }
  sub_100004048((uint64_t)v7, v23);
  return v24 & 1;
}

id sub_1009FA384(uint64_t a1, void (*a2)(_QWORD), uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  id v32;
  unsigned int v33;
  uint64_t v34;
  NSString v35;
  unsigned int v36;
  uint64_t v37;
  id result;
  void *v39;
  id v40;
  uint64_t v41;
  NSObject *v42;
  os_log_type_t v43;
  _BOOL4 v44;
  uint64_t v45;
  void (*v46)(uint64_t, _QWORD, uint64_t, uint64_t);
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  void *v57;
  uint64_t v58;
  id v59;
  Swift::String v60;
  Class isa;
  uint64_t v62;
  void (*v63)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v64;
  uint64_t v65;
  void (*v66)(uint64_t, _QWORD, uint64_t, uint64_t);
  char *v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  id v80;
  id v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  void (*v93)(_QWORD);
  uint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  void (*v97)(uint64_t, _QWORD, uint64_t, uint64_t);
  char *v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  char *v102;
  __int128 v103;
  uint64_t v104;
  unint64_t v105;
  char *v106;
  uint64_t v107;
  char *v108;
  char *v109;
  char *v110;
  uint64_t v111;
  void (*v112)(_QWORD);
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  void (**v118)(_QWORD, _QWORD, _QWORD);
  uint64_t v119;
  unsigned int v120;
  _BYTE v121[20];

  v112 = a2;
  v113 = a3;
  v100 = sub_10001A9A8(&qword_10110A908);
  __chkstk_darwin(v100);
  v106 = (char *)&v97 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v116 = type metadata accessor for URL(0);
  v111 = *(_QWORD *)(v116 - 8);
  v5 = __chkstk_darwin(v116);
  v102 = (char *)&v97 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v110 = (char *)&v97 - v7;
  v8 = type metadata accessor for UUID(0);
  v118 = *(void (***)(_QWORD, _QWORD, _QWORD))(v8 - 8);
  v9 = __chkstk_darwin(v8);
  v101 = (char *)&v97 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v9);
  v98 = (char *)&v97 - v12;
  __chkstk_darwin(v11);
  v14 = (char *)&v97 - v13;
  v114 = type metadata accessor for BeaconStoreFileRecord(0);
  v99 = *(_QWORD *)(v114 - 8);
  __chkstk_darwin(v114);
  v109 = (char *)&v97 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_10001A9A8((uint64_t *)&unk_1010F47C0);
  __chkstk_darwin(v16);
  v18 = (char *)&v97 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for OwnedBeaconGroup(0);
  v107 = *(_QWORD *)(v19 - 8);
  v20 = *(char **)(v107 + 64);
  v21 = __chkstk_darwin(v19);
  v108 = (char *)&v97 - ((unint64_t)(v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __chkstk_darwin(v21);
  v24 = (char *)&v97 - v23;
  v25 = static os_log_type_t.default.getter(v22);
  if (qword_1010EA258 != -1)
    swift_once(&qword_1010EA258, sub_100B5D9CC);
  v26 = qword_1011B7D38;
  v104 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v27 = swift_allocObject(v104, 72, 7);
  v103 = xmmword_100E22B00;
  *(_OWORD *)(v27 + 16) = xmmword_100E22B00;
  v119 = a1;
  sub_10005972C(a1, (uint64_t)v24, type metadata accessor for OwnedBeaconGroup);
  v115 = v19;
  v28 = String.init<A>(describing:)(v24, v19);
  v30 = v29;
  *(_QWORD *)(v27 + 56) = &type metadata for String;
  v105 = sub_10001AA00();
  *(_QWORD *)(v27 + 64) = v105;
  *(_QWORD *)(v27 + 32) = v28;
  *(_QWORD *)(v27 + 40) = v30;
  os_log(_:dso:log:_:_:)(v25, &_mh_execute_header, v26, "Attempting to remove: %@", 24, 2, v27);
  swift_bridgeObjectRelease();
  if (qword_1010EA198 != -1)
    swift_once(&qword_1010EA198, sub_100ACDE4C);
  v31 = (void *)qword_1011B7C08;
  v32 = objc_msgSend((id)objc_opt_self(FMSystemInfo), "sharedInstance");
  v33 = objc_msgSend(v32, "isInternalBuild");

  v34 = v116;
  if (v33)
  {
    v35 = String._bridgeToObjectiveC()();
    v36 = objc_msgSend(v31, "BOOLForKey:", v35);

  }
  else
  {
    v36 = 0;
  }
  v37 = v119;
  result = objc_msgSend((id)objc_opt_self(ACAccountStore), "defaultStore");
  if (result)
  {
    v39 = result;
    v40 = objc_msgSend(result, "aa_primaryAppleAccount");

    if (v40 && (v40, (v36 & 1) == 0))
    {
      v109 = v20;
      v110 = v24;
      v53 = sub_1009FE938();
      v54 = v37 + *(int *)(v115 + 24);
      v55 = UUID.uuidString.getter(v53);
      v57 = v56;
      v58 = v117;
      v59 = *(id *)(v117 + 152);
      v60._countAndFlagsBits = v55;
      v60._object = v57;
      isa = CKRecordID.init(recordName:zoneID:)(v60, (CKRecordZoneID)v59).super.isa;
      sub_1007FDEC4();
      v115 = (uint64_t)isa;
      v108 = (char *)sub_100BC79BC(isa);
      swift_release();
      sub_10080B950(v54, (uint64_t)v18);
      v62 = type metadata accessor for OwnedBeaconRecord(0);
      LODWORD(v98) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v62 - 8) + 48))(v18, 1, v62);
      sub_100004048((uint64_t)v18, (uint64_t *)&unk_1010F47C0);
      v100 = swift_allocBox(v100);
      v63 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v99 + 56);
      v99 = v64;
      v65 = v114;
      v97 = v63;
      v63(v64, 1, 1, v114);
      v66 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v58 + 160);
      v67 = v101;
      ((void (**)(char *, uint64_t, uint64_t))v118)[2](v101, v54, v8);
      if (qword_1010E9B90 != -1)
        swift_once(&qword_1010E9B90, sub_10036E07C);
      v68 = sub_10001A9E8(v34, (uint64_t)qword_1011B6DE0);
      v69 = v111;
      v70 = v102;
      v71 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v111 + 16))(v102, v68, v34);
      __chkstk_darwin(v71);
      *(&v97 - 4) = v66;
      *(&v97 - 3) = (void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v67;
      *(&v97 - 2) = (void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v70;
      v72 = (uint64_t)v106;
      OS_dispatch_queue.sync<A>(execute:)(sub_100882E38, &v97 - 6, v65);
      (*(void (**)(char *, uint64_t))(v69 + 8))(v70, v34);
      ((void (*)(char *, uint64_t))v118[1])(v67, v8);
      v97(v72, 0, 1, v65);
      v73 = sub_1009FED1C(v72, v99);
      v74 = v104;
      v75 = v105;
      v76 = (void *)v115;
      LODWORD(v116) = (_DWORD)v98 != 1;
      v77 = static os_log_type_t.default.getter(v73);
      v78 = qword_1011B7D38;
      v79 = swift_allocObject(v74, 72, 7);
      *(_OWORD *)(v79 + 16) = v103;
      v80 = v76;
      v118 = (void (**)(_QWORD, _QWORD, _QWORD))v80;
      v81 = objc_msgSend(v80, "description");
      v82 = static String._unconditionallyBridgeFromObjectiveC(_:)(v81);
      v84 = v83;

      *(_QWORD *)(v79 + 56) = &type metadata for String;
      *(_QWORD *)(v79 + 64) = v75;
      *(_QWORD *)(v79 + 32) = v82;
      *(_QWORD *)(v79 + 40) = v84;
      os_log(_:dso:log:_:_:)(v77, &_mh_execute_header, v78, "cloudBacked item deleted from disk: %@", 38, 2, v79);
      swift_bridgeObjectRelease();
      v85 = (uint64_t)v110;
      sub_10005972C(v119, (uint64_t)v110, type metadata accessor for OwnedBeaconGroup);
      v86 = *(unsigned __int8 *)(v107 + 80);
      v87 = (v86 + 32) & ~v86;
      v88 = (unint64_t)&v109[v87 + 7] & 0xFFFFFFFFFFFFFFF8;
      v114 = v88 + 16;
      v115 = v86 | 7;
      v89 = swift_allocObject(&unk_1010A1778, v88 + 17, v86 | 7);
      v90 = v100;
      v91 = v117;
      *(_QWORD *)(v89 + 16) = v100;
      *(_QWORD *)(v89 + 24) = v91;
      sub_1000126EC(v85, v89 + v87, type metadata accessor for OwnedBeaconGroup);
      v92 = (_QWORD *)(v89 + v88);
      v93 = v112;
      v94 = v113;
      *v92 = v112;
      v92[1] = v94;
      *(_BYTE *)(v89 + v88 + 16) = v116;
      swift_retain();
      swift_retain();
      swift_retain();
      Future.addSuccess(block:)(sub_1009FF9A8, v89);
      swift_release();
      swift_release();
      sub_10005972C(v119, v85, type metadata accessor for OwnedBeaconGroup);
      v95 = swift_allocObject(&unk_1010A17A0, v114, v115);
      *(_QWORD *)(v95 + 16) = v90;
      *(_QWORD *)(v95 + 24) = v91;
      sub_1000126EC(v85, v95 + v87, type metadata accessor for OwnedBeaconGroup);
      v96 = (_QWORD *)(v95 + v88);
      *v96 = v93;
      v96[1] = v94;
      swift_retain();
      swift_retain();
      swift_retain();
      Future.addFailure(block:)(sub_1009FFB00, v95);
      swift_release();
      swift_release();

      swift_release();
      return (id)swift_release();
    }
    else
    {
      if (qword_1010E9F80 != -1)
        swift_once(&qword_1010E9F80, sub_1007FA778);
      v41 = type metadata accessor for Logger(0);
      v107 = sub_10001A9E8(v41, (uint64_t)qword_1011B77E8);
      v42 = Logger.logObject.getter(v107);
      v43 = static os_log_type_t.info.getter(v42);
      if (os_log_type_enabled(v42, v43))
      {
        v44 = v40 != 0;
        v45 = swift_slowAlloc(14, -1);
        *(_DWORD *)v45 = 67109376;
        v120 = v36;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v120, v121, v45 + 4, v45 + 8);
        *(_WORD *)(v45 + 8) = 1024;
        v120 = v44;
        v34 = v116;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v120, v121, v45 + 10, v45 + 14);
        _os_log_impl((void *)&_mh_execute_header, v42, v43, "Skipping cloud delete. skipCloudSave: %{BOOL}d, isiCloudSignedIn %{BOOL}d", (uint8_t *)v45, 0xEu);
        swift_slowDealloc(v45, -1, -1);
      }

      v46 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v117 + 160);
      ((void (**)(char *, uint64_t, uint64_t))v118)[2](v14, v37 + *(int *)(v115 + 24), v8);
      v47 = v14;
      if (qword_1010E9B90 != -1)
        swift_once(&qword_1010E9B90, sub_10036E07C);
      v48 = sub_10001A9E8(v34, (uint64_t)qword_1011B6DE0);
      v49 = (uint64_t)v110;
      v50 = v111;
      v51 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v111 + 16))(v110, v48, v34);
      __chkstk_darwin(v51);
      *(&v97 - 4) = v46;
      *(&v97 - 3) = (void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v14;
      *(&v97 - 2) = (void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v49;
      v52 = (uint64_t)v109;
      OS_dispatch_queue.sync<A>(execute:)(sub_100882E38, &v97 - 6, v114);
      (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v49, v34);
      ((void (*)(char *, uint64_t))v118[1])(v47, v8);
      sub_100893644(v52);
      QueueSynchronizer.conditionalSync<A>(_:)(sub_100087A38);
      sub_1007EEF64(9);
      sub_1007EF48C();
      v112(0);
      return (id)sub_1000126B0(v52, type metadata accessor for BeaconStoreFileRecord);
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

id sub_1009FB1F0(char *a1, void (*a2)(_QWORD), uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  id v33;
  unsigned int v34;
  NSString v35;
  char *v36;
  id result;
  void *v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  os_log_type_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  _BYTE *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _BYTE *v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  void *v60;
  uint64_t v61;
  id v62;
  Swift::String v63;
  Class isa;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _BYTE *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _BYTE *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  id v84;
  id v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _BYTE *v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  _BYTE *v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  _BYTE v103[4];
  int v104;
  _BYTE *v105;
  _QWORD *v106;
  uint64_t v107;
  _BYTE *v108;
  _BYTE *v109;
  __int128 v110;
  unint64_t v111;
  _BYTE *v112;
  _BYTE *v113;
  uint64_t v114;
  uint64_t v115;
  _BYTE *v116;
  _BYTE *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  void (*v123)(_QWORD);
  uint64_t v124;
  char *v125;
  void (**v126)(_QWORD, _QWORD, _QWORD);
  _BOOL4 v127;
  _BYTE v128[20];

  v123 = a2;
  v120 = a3;
  v107 = sub_10001A9A8(&qword_10110A908);
  __chkstk_darwin(v107);
  v112 = &v103[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = type metadata accessor for URL(0);
  v118 = *(_QWORD *)(v5 - 8);
  v119 = v5;
  v6 = __chkstk_darwin(v5);
  v109 = &v103[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v6);
  v116 = &v103[-v8];
  v9 = type metadata accessor for UUID(0);
  v126 = *(void (***)(_QWORD, _QWORD, _QWORD))(v9 - 8);
  v10 = __chkstk_darwin(v9);
  v108 = &v103[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = __chkstk_darwin(v10);
  v105 = &v103[-v13];
  __chkstk_darwin(v12);
  v15 = &v103[-v14];
  v121 = type metadata accessor for BeaconStoreFileRecord(0);
  v106 = *(_QWORD **)(v121 - 8);
  __chkstk_darwin(v121);
  v117 = &v103[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v17 = sub_10001A9A8((uint64_t *)&unk_1010F47C0);
  __chkstk_darwin(v17);
  v19 = &v103[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v20 = type metadata accessor for OwnedBeaconRecord(0);
  v115 = *(_QWORD *)(v20 - 8);
  v21 = *(_BYTE **)(v115 + 64);
  v22 = __chkstk_darwin(v20);
  v113 = &v103[-((unint64_t)(v21 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v23 = __chkstk_darwin(v22);
  v25 = &v103[-v24];
  v26 = static os_log_type_t.default.getter(v23);
  if (qword_1010EA258 != -1)
    swift_once(&qword_1010EA258, sub_100B5D9CC);
  v27 = qword_1011B7D38;
  v114 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v28 = swift_allocObject(v114, 72, 7);
  v110 = xmmword_100E22B00;
  *(_OWORD *)(v28 + 16) = xmmword_100E22B00;
  v125 = a1;
  sub_10005972C((uint64_t)a1, (uint64_t)v25, type metadata accessor for OwnedBeaconRecord);
  v122 = v20;
  v29 = String.init<A>(describing:)(v25, v20);
  v31 = v30;
  *(_QWORD *)(v28 + 56) = &type metadata for String;
  v111 = sub_10001AA00();
  *(_QWORD *)(v28 + 64) = v111;
  *(_QWORD *)(v28 + 32) = v29;
  *(_QWORD *)(v28 + 40) = v31;
  os_log(_:dso:log:_:_:)(v26, &_mh_execute_header, v27, "Attempting to remove: %@", 24, 2, v28);
  swift_bridgeObjectRelease();
  if (qword_1010EA198 != -1)
    swift_once(&qword_1010EA198, sub_100ACDE4C);
  v32 = (void *)qword_1011B7C08;
  v33 = objc_msgSend((id)objc_opt_self(FMSystemInfo), "sharedInstance");
  v34 = objc_msgSend(v33, "isInternalBuild");

  if (v34)
  {
    v35 = String._bridgeToObjectiveC()();
    v34 = objc_msgSend(v32, "BOOLForKey:", v35);

  }
  v36 = v125;
  result = objc_msgSend((id)objc_opt_self(ACAccountStore), "defaultStore");
  if (result)
  {
    v38 = result;
    v39 = objc_msgSend(result, "aa_primaryAppleAccount");

    if (v39 && (v39, (v34 & 1) == 0))
    {
      v113 = v21;
      v116 = v25;
      v55 = sub_1009FE938();
      v56 = v122;
      v57 = (uint64_t)&v36[*(int *)(v122 + 20)];
      v58 = UUID.uuidString.getter(v55);
      v60 = v59;
      v61 = v124;
      v62 = *(id *)(v124 + 152);
      v63._countAndFlagsBits = v58;
      v63._object = v60;
      isa = CKRecordID.init(recordName:zoneID:)(v63, (CKRecordZoneID)v62).super.isa;
      v65 = sub_1007FDEC4();
      v117 = isa;
      v105 = (_BYTE *)sub_100BC79BC(isa);
      swift_release(v65);
      sub_10080B950(v57, (uint64_t)v19);
      v104 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v115 + 48))(v19, 1, v56);
      sub_100004048((uint64_t)v19, (uint64_t *)&unk_1010F47C0);
      v122 = swift_allocBox(v107);
      v66 = (_QWORD *)v106[7];
      v107 = v67;
      v68 = v121;
      v106 = v66;
      ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v66)(v67, 1, 1, v121);
      v69 = *(_QWORD *)(v61 + 160);
      v70 = v108;
      ((void (**)(_BYTE *, uint64_t, uint64_t))v126)[2](v108, v57, v9);
      if (qword_1010EA0D8 != -1)
        swift_once(&qword_1010EA0D8, sub_1009A3098);
      v71 = v119;
      v72 = sub_10001A9E8(v119, (uint64_t)qword_1011B7AA8);
      v73 = v118;
      v74 = v109;
      v75 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v118 + 16))(v109, v72, v71);
      __chkstk_darwin(v75);
      *(_QWORD *)&v103[-32] = v69;
      *(_QWORD *)&v103[-24] = v70;
      *(_QWORD *)&v103[-16] = v74;
      v76 = (uint64_t)v112;
      OS_dispatch_queue.sync<A>(execute:)(sub_100882E38, &v103[-48], v68);
      (*(void (**)(_BYTE *, uint64_t))(v73 + 8))(v74, v71);
      ((void (*)(_BYTE *, uint64_t))v126[1])(v70, v9);
      ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v106)(v76, 0, 1, v68);
      v77 = sub_1009FED1C(v76, v107);
      v78 = v111;
      v79 = v114;
      v80 = v117;
      LODWORD(v121) = v104 != 1;
      v81 = static os_log_type_t.default.getter(v77);
      v82 = qword_1011B7D38;
      v83 = swift_allocObject(v79, 72, 7);
      *(_OWORD *)(v83 + 16) = v110;
      v84 = v80;
      v126 = (void (**)(_QWORD, _QWORD, _QWORD))v84;
      v85 = objc_msgSend(v84, "description");
      v86 = static String._unconditionallyBridgeFromObjectiveC(_:)(v85);
      v88 = v87;

      *(_QWORD *)(v83 + 56) = &type metadata for String;
      *(_QWORD *)(v83 + 64) = v78;
      *(_QWORD *)(v83 + 32) = v86;
      *(_QWORD *)(v83 + 40) = v88;
      os_log(_:dso:log:_:_:)(v81, &_mh_execute_header, v82, "cloudBacked item deleted from disk: %@", 38, 2, v83);
      swift_bridgeObjectRelease();
      v89 = v116;
      sub_10005972C((uint64_t)v125, (uint64_t)v116, type metadata accessor for OwnedBeaconRecord);
      v90 = *(unsigned __int8 *)(v115 + 80);
      v91 = (v90 + 32) & ~v90;
      v119 = v90 | 7;
      v92 = (unint64_t)&v113[v91 + 7] & 0xFFFFFFFFFFFFFFF8;
      v93 = swift_allocObject(&unk_1010A1688, v92 + 17, v90 | 7);
      v94 = v122;
      v95 = v124;
      *(_QWORD *)(v93 + 16) = v122;
      *(_QWORD *)(v93 + 24) = v95;
      sub_1000126EC((uint64_t)v89, v93 + v91, type metadata accessor for OwnedBeaconRecord);
      v96 = (_QWORD *)(v93 + v92);
      v97 = v120;
      *v96 = v123;
      v96[1] = v97;
      *(_BYTE *)(v93 + v92 + 16) = v121;
      swift_retain();
      swift_retain();
      swift_retain();
      v98 = v105;
      v99 = Future.addSuccess(block:)(sub_1009FF248, v93);
      swift_release(v99);
      swift_release(v93);
      sub_10005972C((uint64_t)v125, (uint64_t)v89, type metadata accessor for OwnedBeaconRecord);
      v100 = swift_allocObject(&unk_1010A16B0, v92 + 16, v119);
      *(_QWORD *)(v100 + 16) = v94;
      *(_QWORD *)(v100 + 24) = v95;
      sub_1000126EC((uint64_t)v89, v100 + v91, type metadata accessor for OwnedBeaconRecord);
      v101 = (_QWORD *)(v100 + v92);
      *v101 = v123;
      v101[1] = v97;
      swift_retain();
      swift_retain();
      swift_retain();
      v102 = Future.addFailure(block:)(sub_1009FF588, v100);
      swift_release(v94);
      swift_release(v100);

      swift_release(v98);
      return (id)swift_release(v102);
    }
    else
    {
      if (qword_1010E9F80 != -1)
        swift_once(&qword_1010E9F80, sub_1007FA778);
      v40 = v9;
      v41 = type metadata accessor for Logger(0);
      v115 = sub_10001A9E8(v41, (uint64_t)qword_1011B77E8);
      v42 = Logger.logObject.getter(v115);
      v43 = static os_log_type_t.info.getter(v42);
      if (os_log_type_enabled(v42, v43))
      {
        v44 = swift_slowAlloc(14, -1);
        *(_DWORD *)v44 = 67109376;
        v127 = v34;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v127, v128, v44 + 4, v44 + 8);
        *(_WORD *)(v44 + 8) = 1024;
        v127 = v39 != 0;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v127, v128, v44 + 10, v44 + 14);
        _os_log_impl((void *)&_mh_execute_header, v42, v43, "Skipping cloud delete. skipCloudSave: %{BOOL}d, isiCloudSignedIn %{BOOL}d", (uint8_t *)v44, 0xEu);
        v45 = v44;
        v36 = v125;
        swift_slowDealloc(v45, -1, -1);
      }

      v46 = *(_QWORD *)(v124 + 160);
      v47 = &v36[*(int *)(v122 + 20)];
      v48 = v15;
      v125 = (char *)v126[2];
      ((void (*)(_BYTE *, char *, uint64_t))v125)(v15, v47, v40);
      if (qword_1010EA0D8 != -1)
        swift_once(&qword_1010EA0D8, sub_1009A3098);
      v49 = v119;
      v50 = sub_10001A9E8(v119, (uint64_t)qword_1011B7AA8);
      v51 = v118;
      v52 = v116;
      v53 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v118 + 16))(v116, v50, v49);
      __chkstk_darwin(v53);
      *(_QWORD *)&v103[-32] = v46;
      *(_QWORD *)&v103[-24] = v48;
      *(_QWORD *)&v103[-16] = v52;
      v54 = (uint64_t)v117;
      OS_dispatch_queue.sync<A>(execute:)(sub_100882E38, &v103[-48], v121);
      (*(void (**)(_BYTE *, uint64_t))(v51 + 8))(v52, v49);
      ((void (*)(_BYTE *, uint64_t))v126[1])(v48, v40);
      sub_100893644(v54);
      QueueSynchronizer.conditionalSync<A>(_:)(sub_100087A38);
      sub_1007EEF64(9);
      sub_1007EF48C();
      v123(0);
      return (id)sub_1000126B0(v54, type metadata accessor for BeaconStoreFileRecord);
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

id sub_1009FC074(uint64_t a1, void (*a2)(_QWORD), uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  id v32;
  unsigned int v33;
  uint64_t v34;
  NSString v35;
  unsigned int v36;
  uint64_t v37;
  id result;
  void *v39;
  id v40;
  uint64_t v41;
  NSObject *v42;
  os_log_type_t v43;
  _BOOL4 v44;
  uint64_t v45;
  void (*v46)(uint64_t, _QWORD, uint64_t, uint64_t);
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  void *v57;
  uint64_t v58;
  id v59;
  Swift::String v60;
  Class isa;
  uint64_t v62;
  void (*v63)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v64;
  uint64_t v65;
  void (*v66)(uint64_t, _QWORD, uint64_t, uint64_t);
  char *v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  id v80;
  id v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  void (*v93)(_QWORD);
  uint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  void (*v97)(uint64_t, _QWORD, uint64_t, uint64_t);
  char *v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  char *v102;
  __int128 v103;
  uint64_t v104;
  unint64_t v105;
  char *v106;
  uint64_t v107;
  char *v108;
  char *v109;
  char *v110;
  uint64_t v111;
  void (*v112)(_QWORD);
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  void (**v118)(_QWORD, _QWORD, _QWORD);
  uint64_t v119;
  unsigned int v120;
  _BYTE v121[20];

  v112 = a2;
  v113 = a3;
  v100 = sub_10001A9A8(&qword_10110A908);
  __chkstk_darwin(v100);
  v106 = (char *)&v97 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v116 = type metadata accessor for URL(0);
  v111 = *(_QWORD *)(v116 - 8);
  v5 = __chkstk_darwin(v116);
  v102 = (char *)&v97 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v110 = (char *)&v97 - v7;
  v8 = type metadata accessor for UUID(0);
  v118 = *(void (***)(_QWORD, _QWORD, _QWORD))(v8 - 8);
  v9 = __chkstk_darwin(v8);
  v101 = (char *)&v97 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v9);
  v98 = (char *)&v97 - v12;
  __chkstk_darwin(v11);
  v14 = (char *)&v97 - v13;
  v114 = type metadata accessor for BeaconStoreFileRecord(0);
  v99 = *(_QWORD *)(v114 - 8);
  __chkstk_darwin(v114);
  v109 = (char *)&v97 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_10001A9A8((uint64_t *)&unk_1010F47C0);
  __chkstk_darwin(v16);
  v18 = (char *)&v97 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for SharedBeaconRecord(0);
  v107 = *(_QWORD *)(v19 - 8);
  v20 = *(char **)(v107 + 64);
  v21 = __chkstk_darwin(v19);
  v108 = (char *)&v97 - ((unint64_t)(v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __chkstk_darwin(v21);
  v24 = (char *)&v97 - v23;
  v25 = static os_log_type_t.default.getter(v22);
  if (qword_1010EA258 != -1)
    swift_once(&qword_1010EA258, sub_100B5D9CC);
  v26 = qword_1011B7D38;
  v104 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v27 = swift_allocObject(v104, 72, 7);
  v103 = xmmword_100E22B00;
  *(_OWORD *)(v27 + 16) = xmmword_100E22B00;
  v119 = a1;
  sub_10005972C(a1, (uint64_t)v24, type metadata accessor for SharedBeaconRecord);
  v115 = v19;
  v28 = String.init<A>(describing:)(v24, v19);
  v30 = v29;
  *(_QWORD *)(v27 + 56) = &type metadata for String;
  v105 = sub_10001AA00();
  *(_QWORD *)(v27 + 64) = v105;
  *(_QWORD *)(v27 + 32) = v28;
  *(_QWORD *)(v27 + 40) = v30;
  os_log(_:dso:log:_:_:)(v25, &_mh_execute_header, v26, "Attempting to remove: %@", 24, 2, v27);
  swift_bridgeObjectRelease();
  if (qword_1010EA198 != -1)
    swift_once(&qword_1010EA198, sub_100ACDE4C);
  v31 = (void *)qword_1011B7C08;
  v32 = objc_msgSend((id)objc_opt_self(FMSystemInfo), "sharedInstance");
  v33 = objc_msgSend(v32, "isInternalBuild");

  v34 = v116;
  if (v33)
  {
    v35 = String._bridgeToObjectiveC()();
    v36 = objc_msgSend(v31, "BOOLForKey:", v35);

  }
  else
  {
    v36 = 0;
  }
  v37 = v119;
  result = objc_msgSend((id)objc_opt_self(ACAccountStore), "defaultStore");
  if (result)
  {
    v39 = result;
    v40 = objc_msgSend(result, "aa_primaryAppleAccount");

    if (v40 && (v40, (v36 & 1) == 0))
    {
      v109 = v20;
      v110 = v24;
      v53 = sub_1009FE938();
      v54 = v37 + *(int *)(v115 + 20);
      v55 = UUID.uuidString.getter(v53);
      v57 = v56;
      v58 = v117;
      v59 = *(id *)(v117 + 152);
      v60._countAndFlagsBits = v55;
      v60._object = v57;
      isa = CKRecordID.init(recordName:zoneID:)(v60, (CKRecordZoneID)v59).super.isa;
      sub_1007FDEC4();
      v115 = (uint64_t)isa;
      v108 = (char *)sub_100BC79BC(isa);
      swift_release();
      sub_10080B950(v54, (uint64_t)v18);
      v62 = type metadata accessor for OwnedBeaconRecord(0);
      LODWORD(v98) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v62 - 8) + 48))(v18, 1, v62);
      sub_100004048((uint64_t)v18, (uint64_t *)&unk_1010F47C0);
      v100 = swift_allocBox(v100);
      v63 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v99 + 56);
      v99 = v64;
      v65 = v114;
      v97 = v63;
      v63(v64, 1, 1, v114);
      v66 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v58 + 160);
      v67 = v101;
      ((void (**)(char *, uint64_t, uint64_t))v118)[2](v101, v54, v8);
      if (qword_1010EA5B8 != -1)
        swift_once(&qword_1010EA5B8, sub_100D3AD18);
      v68 = sub_10001A9E8(v34, (uint64_t)qword_1011B8448);
      v69 = v111;
      v70 = v102;
      v71 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v111 + 16))(v102, v68, v34);
      __chkstk_darwin(v71);
      *(&v97 - 4) = v66;
      *(&v97 - 3) = (void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v67;
      *(&v97 - 2) = (void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v70;
      v72 = (uint64_t)v106;
      OS_dispatch_queue.sync<A>(execute:)(sub_100882E38, &v97 - 6, v65);
      (*(void (**)(char *, uint64_t))(v69 + 8))(v70, v34);
      ((void (*)(char *, uint64_t))v118[1])(v67, v8);
      v97(v72, 0, 1, v65);
      v73 = sub_1009FED1C(v72, v99);
      v74 = v104;
      v75 = v105;
      v76 = (void *)v115;
      LODWORD(v116) = (_DWORD)v98 != 1;
      v77 = static os_log_type_t.default.getter(v73);
      v78 = qword_1011B7D38;
      v79 = swift_allocObject(v74, 72, 7);
      *(_OWORD *)(v79 + 16) = v103;
      v80 = v76;
      v118 = (void (**)(_QWORD, _QWORD, _QWORD))v80;
      v81 = objc_msgSend(v80, "description");
      v82 = static String._unconditionallyBridgeFromObjectiveC(_:)(v81);
      v84 = v83;

      *(_QWORD *)(v79 + 56) = &type metadata for String;
      *(_QWORD *)(v79 + 64) = v75;
      *(_QWORD *)(v79 + 32) = v82;
      *(_QWORD *)(v79 + 40) = v84;
      os_log(_:dso:log:_:_:)(v77, &_mh_execute_header, v78, "cloudBacked item deleted from disk: %@", 38, 2, v79);
      swift_bridgeObjectRelease();
      v85 = (uint64_t)v110;
      sub_10005972C(v119, (uint64_t)v110, type metadata accessor for SharedBeaconRecord);
      v86 = *(unsigned __int8 *)(v107 + 80);
      v87 = (v86 + 32) & ~v86;
      v88 = (unint64_t)&v109[v87 + 7] & 0xFFFFFFFFFFFFFFF8;
      v114 = v88 + 16;
      v115 = v86 | 7;
      v89 = swift_allocObject(&unk_1010A1598, v88 + 17, v86 | 7);
      v90 = v100;
      v91 = v117;
      *(_QWORD *)(v89 + 16) = v100;
      *(_QWORD *)(v89 + 24) = v91;
      sub_1000126EC(v85, v89 + v87, type metadata accessor for SharedBeaconRecord);
      v92 = (_QWORD *)(v89 + v88);
      v93 = v112;
      v94 = v113;
      *v92 = v112;
      v92[1] = v94;
      *(_BYTE *)(v89 + v88 + 16) = v116;
      swift_retain();
      swift_retain();
      swift_retain();
      Future.addSuccess(block:)(sub_1009FEB34, v89);
      swift_release();
      swift_release();
      sub_10005972C(v119, v85, type metadata accessor for SharedBeaconRecord);
      v95 = swift_allocObject(&unk_1010A15C0, v114, v115);
      *(_QWORD *)(v95 + 16) = v90;
      *(_QWORD *)(v95 + 24) = v91;
      sub_1000126EC(v85, v95 + v87, type metadata accessor for SharedBeaconRecord);
      v96 = (_QWORD *)(v95 + v88);
      *v96 = v93;
      v96[1] = v94;
      swift_retain();
      swift_retain();
      swift_retain();
      Future.addFailure(block:)(sub_1009FED08, v95);
      swift_release();
      swift_release();

      swift_release();
      return (id)swift_release();
    }
    else
    {
      if (qword_1010E9F80 != -1)
        swift_once(&qword_1010E9F80, sub_1007FA778);
      v41 = type metadata accessor for Logger(0);
      v107 = sub_10001A9E8(v41, (uint64_t)qword_1011B77E8);
      v42 = Logger.logObject.getter(v107);
      v43 = static os_log_type_t.info.getter(v42);
      if (os_log_type_enabled(v42, v43))
      {
        v44 = v40 != 0;
        v45 = swift_slowAlloc(14, -1);
        *(_DWORD *)v45 = 67109376;
        v120 = v36;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v120, v121, v45 + 4, v45 + 8);
        *(_WORD *)(v45 + 8) = 1024;
        v120 = v44;
        v34 = v116;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v120, v121, v45 + 10, v45 + 14);
        _os_log_impl((void *)&_mh_execute_header, v42, v43, "Skipping cloud delete. skipCloudSave: %{BOOL}d, isiCloudSignedIn %{BOOL}d", (uint8_t *)v45, 0xEu);
        swift_slowDealloc(v45, -1, -1);
      }

      v46 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v117 + 160);
      ((void (**)(char *, uint64_t, uint64_t))v118)[2](v14, v37 + *(int *)(v115 + 20), v8);
      v47 = v14;
      if (qword_1010EA5B8 != -1)
        swift_once(&qword_1010EA5B8, sub_100D3AD18);
      v48 = sub_10001A9E8(v34, (uint64_t)qword_1011B8448);
      v49 = (uint64_t)v110;
      v50 = v111;
      v51 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v111 + 16))(v110, v48, v34);
      __chkstk_darwin(v51);
      *(&v97 - 4) = v46;
      *(&v97 - 3) = (void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v14;
      *(&v97 - 2) = (void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v49;
      v52 = (uint64_t)v109;
      OS_dispatch_queue.sync<A>(execute:)(sub_100868CB4, &v97 - 6, v114);
      (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v49, v34);
      ((void (*)(char *, uint64_t))v118[1])(v47, v8);
      sub_100893644(v52);
      QueueSynchronizer.conditionalSync<A>(_:)(sub_100087A38);
      sub_1007EEF64(9);
      sub_1007EF48C();
      v112(0);
      return (id)sub_1000126B0(v52, type metadata accessor for BeaconStoreFileRecord);
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1009FCEE0(uint64_t a1, int a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  void *v19;
  id v20;
  NSObject *v21;
  uint64_t v22;
  NSObject *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(char *, uint64_t);
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  _BYTE *v43;
  uint64_t *v44;
  uint64_t v45;
  NSObject *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  NSObject *v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  void (**v62)(uint64_t);
  void (*v63)(uint64_t);
  unint64_t v64;
  NSObject *v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  BOOL v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v75;
  char *v76;
  __int128 v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t *v87;
  NSObject *v88;
  char *v89;
  _QWORD v90[3];
  _QWORD v91[4];

  v83 = a2;
  v84 = a3;
  v89 = (char *)a1;
  v4 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  __chkstk_darwin(v4);
  v6 = (char *)&v75 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for OwnedBeaconRecord(0);
  v80 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v81 = v8;
  v82 = (uint64_t)&v75 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for SystemInfo.DeviceLockState(0);
  v79 = *(_QWORD *)(v9 - 8);
  v10 = __chkstk_darwin(v9);
  v12 = (char *)&v75 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v75 - v13;
  v15 = type metadata accessor for DispatchPredicate(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (uint64_t *)((char *)&v75 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  v85 = v3;
  v19 = *(void **)(v3 + 64);
  *v18 = v19;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v16 + 104))(v18, enum case for DispatchPredicate.notOnQueue(_:), v15);
  v20 = v19;
  LOBYTE(v19) = _dispatchPreconditionTest(_:)(v18);
  (*(void (**)(_QWORD *, uint64_t))(v16 + 8))(v18, v15);
  if ((v19 & 1) != 0)
  {
    v76 = v6;
    v18 = (_QWORD *)swift_allocObject(&unk_1010A17C8, 24, 7);
    v18[2] = 0;
    v87 = v18 + 2;
    v21 = dispatch_group_create();
    dispatch_group_enter(v21);
    v22 = swift_allocObject(&unk_1010A17F0, 32, 7);
    *(_QWORD *)(v22 + 16) = v21;
    *(_QWORD *)(v22 + 24) = v18;
    v78 = v22;
    v23 = v21;
    swift_retain_n(v18, 2);
    v88 = v23;
    v6 = (char *)static os_log_type_t.default.getter(v88);
    if (qword_1010EA258 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_1010EA258, sub_100B5D9CC);
LABEL_3:
  v24 = qword_1011B7D38;
  v25 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v26 = swift_allocObject(v25, 72, 7);
  v77 = xmmword_100E22B00;
  *(_OWORD *)(v26 + 16) = xmmword_100E22B00;
  v27 = (uint64_t)&v89[*(int *)(v7 + 20)];
  v28 = type metadata accessor for UUID(0);
  v29 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v86 = v27;
  v30 = dispatch thunk of CustomStringConvertible.description.getter(v28, v29);
  v32 = v31;
  *(_QWORD *)(v26 + 56) = &type metadata for String;
  *(_QWORD *)(v26 + 64) = sub_10001AA00();
  *(_QWORD *)(v26 + 32) = v30;
  *(_QWORD *)(v26 + 40) = v32;
  os_log(_:dso:log:_:_:)(v6, &_mh_execute_header, v24, "Unpair owned beacon: %@", 23, 2, v26);
  v33 = swift_bridgeObjectRelease();
  static SystemInfo.lockState.getter(v33);
  v34 = v79;
  (*(void (**)(char *, _QWORD, uint64_t))(v79 + 104))(v12, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v9);
  v35 = sub_100006204((unint64_t *)&unk_1010F4700, (uint64_t (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState, (uint64_t)&protocol conformance descriptor for SystemInfo.DeviceLockState);
  dispatch thunk of RawRepresentable.rawValue.getter(v91, v9, v35);
  dispatch thunk of RawRepresentable.rawValue.getter(v90, v9, v35);
  v36 = v91[0];
  v37 = v90[0];
  v38 = *(void (**)(char *, uint64_t))(v34 + 8);
  v38(v12, v9);
  v39 = ((uint64_t (*)(char *, uint64_t))v38)(v14, v9);
  if (v36 == v37)
  {
    v40 = static os_log_type_t.default.getter(v39);
    os_log(_:dso:log:_:_:)(v40, &_mh_execute_header, qword_1011B7D38, "unpair call failed because in device is in beforeFirstUnlock state", 66, 2, _swiftEmptyArrayStorage);
    v41 = sub_10008806C();
    v42 = swift_allocError(&type metadata for BeaconStore.BeaconStoreError, v41, 0, 0);
    *v43 = 0;
    v44 = v87;
    swift_beginAccess(v87, v90, 1, 0);
    v45 = *v44;
    *v44 = v42;
    swift_errorRetain(v42);
    swift_errorRelease(v45);
    dispatch_group_leave(v88);
    swift_errorRelease(v42);
  }
  v46 = dispatch_group_create();
  dispatch_group_enter(v46);
  v47 = sub_10001A9A8(&qword_1011003C0);
  v48 = *(_QWORD *)(v28 - 8);
  v49 = *(unsigned __int8 *)(v48 + 80);
  v50 = (v49 + 32) & ~v49;
  v51 = swift_allocObject(v47, v50 + *(_QWORD *)(v48 + 72), v49 | 7);
  *(_OWORD *)(v51 + 16) = v77;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v48 + 16))(v51 + v50, v86, v28);
  v52 = swift_allocObject(&unk_1010A1818, 24, 7);
  *(_QWORD *)(v52 + 16) = v46;
  v53 = v46;
  v54 = v85;
  sub_10075B3B4(v51, (uint64_t)sub_100293D78, v52);
  swift_bridgeObjectRelease();
  swift_release(v52);
  OS_dispatch_group.wait()();
  v55 = v89;
  v56 = v82;
  sub_10005972C((uint64_t)v89, v82, type metadata accessor for OwnedBeaconRecord);
  v57 = *(unsigned __int8 *)(v80 + 80);
  v58 = (v57 + 16) & ~v57;
  v59 = (v81 + v58 + 7) & 0xFFFFFFFFFFFFFFF8;
  v60 = (v59 + 23) & 0xFFFFFFFFFFFFFFF8;
  v61 = swift_allocObject(&unk_1010A1840, v60 + 10, v57 | 7);
  sub_1000126EC(v56, v61 + v58, type metadata accessor for OwnedBeaconRecord);
  v62 = (void (**)(uint64_t))(v61 + v59);
  v63 = (void (*)(uint64_t))v78;
  *v62 = sub_1009FFBCC;
  v62[1] = v63;
  v64 = v61 + v60;
  *(_QWORD *)v64 = v54;
  *(_BYTE *)(v64 + 8) = v83 & 1;
  *(_BYTE *)(v64 + 9) = v84 & 1;
  swift_retain();
  swift_retain();
  sub_1009FB1F0(v55, (void (*)(_QWORD))sub_100297834, v61);
  swift_release(v18);
  v65 = v88;

  swift_release(v63);
  swift_release(v61);

  OS_dispatch_group.wait()();
  swift_beginAccess(v87, v91, 0, 0);
  if (v18[2]
    || (v66 = sub_1009A1DCC(), v67 >> 60 == 15)
    || (v68 = v66, v69 = v67, v70 = sub_100A088E4(v66, v67), sub_10001EF3C(v68, v69), !v70))
  {

  }
  else
  {
    v71 = type metadata accessor for Date(0);
    v72 = (uint64_t)v76;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v71 - 8) + 56))(v76, 1, 1, v71);
    sub_1002DB888(v86, v72);

    sub_100004048(v72, (uint64_t *)&unk_1010EA690);
  }
  v73 = v18[2];
  swift_errorRetain(v73);
  swift_release(v18);
  return v73;
}

void sub_1009FD574(uint64_t a1, NSObject *a2, uint64_t a3)
{
  uint64_t v6;
  _BYTE v7[24];

  swift_beginAccess(a3 + 16, v7, 1, 0);
  v6 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)(a3 + 16) = a1;
  swift_errorRetain(a1);
  swift_errorRelease(v6);
  dispatch_group_leave(a2);
}

void sub_1009FD5DC(int a1, int a2, dispatch_group_t group)
{
  dispatch_group_leave(group);
}

uint64_t sub_1009FD5E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  _BYTE *v39;
  _QWORD *v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  int v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  _QWORD aBlock[5];
  uint64_t v56;

  v47 = a6;
  v48 = a7;
  v49 = a5;
  v53 = a4;
  v10 = type metadata accessor for DispatchWorkItemFlags(0);
  v52 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v12 = (char *)&v46 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for DispatchQoS(0);
  v50 = *(_QWORD *)(v13 - 8);
  v51 = v13;
  __chkstk_darwin(v13);
  v15 = (char *)&v46 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for OwnedBeaconRecord(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = *(_QWORD *)(v17 + 64);
  __chkstk_darwin(v16);
  v19 = (char *)&v46 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    v52 = a3;
    v20 = swift_errorRetain(a1);
    v21 = static os_log_type_t.error.getter(v20);
    if (qword_1010EA258 != -1)
      swift_once(&qword_1010EA258, sub_100B5D9CC);
    v22 = qword_1011B7D38;
    v23 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v24 = swift_allocObject(v23, 112, 7);
    *(_OWORD *)(v24 + 16) = xmmword_100E22B10;
    v25 = UUID.uuidString.getter(v24);
    v27 = v26;
    *(_QWORD *)(v24 + 56) = &type metadata for String;
    v28 = sub_10001AA00();
    *(_QWORD *)(v24 + 64) = v28;
    *(_QWORD *)(v24 + 32) = v25;
    *(_QWORD *)(v24 + 40) = v27;
    aBlock[0] = a1;
    swift_errorRetain(a1);
    v29 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
    v30 = String.init<A>(describing:)(aBlock, v29);
    *(_QWORD *)(v24 + 96) = &type metadata for String;
    *(_QWORD *)(v24 + 104) = v28;
    *(_QWORD *)(v24 + 72) = v30;
    *(_QWORD *)(v24 + 80) = v31;
    os_log(_:dso:log:_:_:)(v21, &_mh_execute_header, v22, "Error unpairing OwnedBeaconRecord %@: %@", 40, 2, v24);
    swift_bridgeObjectRelease();
    swift_errorRetain(a1);
    ((void (*)(uint64_t))v52)(a1);
    swift_errorRelease(a1);
    return swift_errorRelease(a1);
  }
  else
  {
    v33 = v49;
    v46 = *(_QWORD *)(v49 + 64);
    sub_10005972C(a2, (uint64_t)&v46 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for OwnedBeaconRecord);
    v34 = *(unsigned __int8 *)(v17 + 80);
    v35 = (v34 + 24) & ~v34;
    v36 = v35 + v18;
    v37 = (v35 + v18 + 9) & 0xFFFFFFFFFFFFFFF8;
    v38 = swift_allocObject(&unk_1010A16D8, v37 + 16, v34 | 7);
    *(_QWORD *)(v38 + 16) = v33;
    sub_1000126EC((uint64_t)v19, v38 + v35, type metadata accessor for OwnedBeaconRecord);
    v39 = (_BYTE *)(v38 + v36);
    *v39 = v47 & 1;
    v39[1] = v48 & 1;
    v40 = (_QWORD *)(v38 + v37);
    *v40 = a3;
    v40[1] = v53;
    aBlock[4] = sub_1009FF854;
    v56 = v38;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100016FB8;
    aBlock[3] = &unk_1010A16F0;
    v41 = _Block_copy(aBlock);
    swift_retain();
    v42 = swift_retain();
    static DispatchQoS.unspecified.getter(v42);
    v54 = _swiftEmptyArrayStorage;
    v43 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v44 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v45 = sub_10001371C();
    dispatch thunk of SetAlgebra.init<A>(_:)(&v54, v44, v45, v10, v43);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v15, v12, v41);
    _Block_release(v41);
    (*(void (**)(char *, uint64_t))(v52 + 8))(v12, v10);
    (*(void (**)(char *, uint64_t))(v50 + 8))(v15, v51);
    return swift_release(v56);
  }
}

uint64_t sub_1009FD9B0(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  int *v21;
  _QWORD *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  char v63[16];
  char *v64;
  uint64_t v65;
  _QWORD *v66;
  char v67;
  char v68;
  _QWORD *v69;
  _QWORD aBlock[3];
  void *v71;
  uint64_t v72;
  uint64_t v73;

  v58 = a5;
  v59 = a6;
  LODWORD(v57) = a4;
  LODWORD(v54) = a3;
  v8 = type metadata accessor for DispatchQoS(0);
  v61 = *(_QWORD *)(v8 - 8);
  v62 = v8;
  __chkstk_darwin(v8);
  v60 = (char *)&v51 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10001A9A8(&qword_1010ED860);
  v11 = __chkstk_darwin(v10);
  v52 = (uint64_t)&v51 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v53 = (char *)&v51 - v13;
  v14 = type metadata accessor for DispatchWorkItemFlags(0);
  v55 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v16 = (char *)&v51 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for UUID(0);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v20 = (char *)&v51 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = (int *)type metadata accessor for OwnedBeaconRecord(0);
  v71 = v21;
  v72 = sub_100006204(&qword_1010ECCB8, type metadata accessor for OwnedBeaconRecord, (uint64_t)&unk_100E57B60);
  v22 = sub_100018F08(aBlock);
  v56 = a2;
  sub_10005972C(a2, (uint64_t)v22, type metadata accessor for OwnedBeaconRecord);
  v23 = v71;
  v24 = v72;
  sub_10001AA44(aBlock, (uint64_t)v71);
  (*(void (**)(void *))(*(_QWORD *)(*(_QWORD *)(v24 + 8) + 8) + 32))(v23);
  v25 = type metadata accessor for Transaction(0);
  v64 = v20;
  v65 = a1;
  v66 = aBlock;
  v67 = v54;
  v68 = v57;
  v57 = v25;
  static Transaction.named<A>(_:with:)("com.apple.icloud.searchparty-deleteRelatedRecords", 49, 2, sub_1000880C8, v63);
  v51 = v18;
  v26 = *(void (**)(char *, uint64_t))(v18 + 8);
  v54 = v17;
  v26(v20, v17);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(aBlock);
  if (qword_1010E9CF0 != -1)
    swift_once(&qword_1010E9CF0, sub_10058CADC);
  v27 = qword_1011B7160;
  v28 = v56 + v21[5];
  v29 = static DispatchWorkItemFlags.barrier.getter();
  __chkstk_darwin(v29);
  *(&v51 - 4) = v27;
  *(&v51 - 3) = v28;
  *(&v51 - 2) = (uint64_t)sub_1000683B8;
  *(&v51 - 1) = 0;
  OS_dispatch_queue.sync<A>(flags:execute:)(v16, sub_100151538);
  v30 = *(void (**)(char *, uint64_t))(v55 + 8);
  v30(v16, v14);
  v31 = sub_1009FA01C();
  if ((v31 & 1) != 0)
  {
    v32 = static os_log_type_t.default.getter(v31);
    if (qword_1010EA258 != -1)
      swift_once(&qword_1010EA258, sub_100B5D9CC);
    v33 = qword_1011B7D38;
    v34 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v35 = swift_allocObject(v34, 72, 7);
    *(_OWORD *)(v35 + 16) = xmmword_100E22B00;
    v36 = UUID.uuidString.getter(v35);
    v38 = v37;
    *(_QWORD *)(v35 + 56) = &type metadata for String;
    *(_QWORD *)(v35 + 64) = sub_10001AA00();
    *(_QWORD *)(v35 + 32) = v36;
    *(_QWORD *)(v35 + 40) = v38;
    os_log(_:dso:log:_:_:)(v32, &_mh_execute_header, v33, "Deleted current self-beacon OwnedBeaconRecord %@", 48, 2, v35);
    swift_bridgeObjectRelease();
    if (qword_1010E9D08 != -1)
      swift_once(&qword_1010E9D08, sub_10059A6E0);
    v39 = (uint64_t)v53;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v51 + 56))(v53, 1, 1, v54);
    v40 = sub_100013B60();
    v41 = v52;
    sub_1002A380C(v39, v52);
    sub_100B05560(v41);
    swift_release(v40);
    sub_100004048(v39, &qword_1010ED860);
  }
  QueueSynchronizer.conditionalSync<A>(_:)(sub_100087A38);
  sub_1007EEF64(4);
  static Transaction.named<A>(_:with:)("com.apple.searchpartyd.triggerSiriDeviceNameSync", 48, 2, sub_100088044, a1);
  sub_1007F9F70();
  dispatch thunk of DarwinNotificationHelper.post(bypassRateLimit:)(0);
  static Transaction.asyncTask(name:block:)("BeaconStore.canBeLeashedByHostStateChanged", 42, 2, &unk_10110A988, 0);
  v42 = swift_allocObject(&unk_1010A1728, 32, 7);
  v43 = v59;
  *(_QWORD *)(v42 + 16) = v58;
  *(_QWORD *)(v42 + 24) = v43;
  v72 = (uint64_t)sub_1002A3AD4;
  v73 = v42;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  v71 = &unk_1010A1740;
  v44 = _Block_copy(aBlock);
  v45 = swift_retain();
  v46 = v60;
  static DispatchQoS.unspecified.getter(v45);
  v69 = _swiftEmptyArrayStorage;
  v47 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v48 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v49 = sub_10001371C();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v69, v48, v49, v14, v47);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v46, v16, v44);
  _Block_release(v44);
  v30(v16, v14);
  (*(void (**)(char *, uint64_t))(v61 + 8))(v46, v62);
  return swift_release(v73);
}

uint64_t sub_1009FE000()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1009FE024(uint64_t a1, uint64_t a2, void (*a3)(uint64_t), void (*a4)(uint64_t), uint64_t a5)
{
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  void (**v36)(uint64_t);
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  _QWORD v43[2];
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(uint64_t);
  void (*v48)(uint64_t);
  _QWORD *v49;
  _QWORD aBlock[6];

  v44 = a5;
  v45 = type metadata accessor for DispatchWorkItemFlags(0);
  v48 = *(void (**)(uint64_t))(v45 - 8);
  __chkstk_darwin(v45);
  v10 = (char *)v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS(0);
  v46 = *(_QWORD *)(v11 - 8);
  v47 = (void (*)(uint64_t))v11;
  __chkstk_darwin(v11);
  v13 = (char *)v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for SharedBeaconRecord(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(_QWORD *)(v15 + 64);
  __chkstk_darwin(v14);
  v17 = (char *)v43 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    v47 = a3;
    v48 = a4;
    v18 = swift_errorRetain(a1);
    v19 = static os_log_type_t.error.getter(v18);
    if (qword_1010EA258 != -1)
      swift_once(&qword_1010EA258, sub_100B5D9CC);
    v20 = qword_1011B7D38;
    v21 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v22 = swift_allocObject(v21, 112, 7);
    *(_OWORD *)(v22 + 16) = xmmword_100E22B10;
    v23 = UUID.uuidString.getter(v22);
    v25 = v24;
    *(_QWORD *)(v22 + 56) = &type metadata for String;
    v26 = sub_10001AA00();
    *(_QWORD *)(v22 + 64) = v26;
    *(_QWORD *)(v22 + 32) = v23;
    *(_QWORD *)(v22 + 40) = v25;
    aBlock[0] = a1;
    swift_errorRetain(a1);
    v27 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
    v28 = String.init<A>(describing:)(aBlock, v27);
    *(_QWORD *)(v22 + 96) = &type metadata for String;
    *(_QWORD *)(v22 + 104) = v26;
    *(_QWORD *)(v22 + 72) = v28;
    *(_QWORD *)(v22 + 80) = v29;
    os_log(_:dso:log:_:_:)(v19, &_mh_execute_header, v20, "Error unpairing SharedBeaconRecord %@: %@", 41, 2, v22);
    swift_bridgeObjectRelease();
    swift_errorRetain(a1);
    v47(a1);
    swift_errorRelease(a1);
    return swift_errorRelease(a1);
  }
  else
  {
    v31 = v44;
    v43[1] = *(_QWORD *)(v44 + 64);
    sub_10005972C(a2, (uint64_t)v43 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for SharedBeaconRecord);
    v32 = *(unsigned __int8 *)(v15 + 80);
    v33 = (v32 + 24) & ~v32;
    v34 = (v16 + v33 + 7) & 0xFFFFFFFFFFFFFFF8;
    v35 = swift_allocObject(&unk_1010A15E8, v34 + 16, v32 | 7);
    *(_QWORD *)(v35 + 16) = v31;
    sub_1000126EC((uint64_t)v17, v35 + v33, type metadata accessor for SharedBeaconRecord);
    v36 = (void (**)(uint64_t))(v35 + v34);
    *v36 = a3;
    v36[1] = a4;
    aBlock[4] = sub_1009FEF1C;
    aBlock[5] = v35;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100016FB8;
    aBlock[3] = &unk_1010A1600;
    v37 = _Block_copy(aBlock);
    swift_retain();
    v38 = swift_retain();
    static DispatchQoS.unspecified.getter(v38);
    v49 = _swiftEmptyArrayStorage;
    v39 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v40 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v41 = sub_10001371C();
    v42 = v45;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v49, v40, v41, v45, v39);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v13, v10, v37);
    _Block_release(v37);
    (*((void (**)(char *, uint64_t))v48 + 1))(v10, v42);
    (*(void (**)(char *, void (*)(uint64_t)))(v46 + 8))(v13, v47);
    return swift_release();
  }
}

uint64_t sub_1009FE3C4()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v1 = (int *)type metadata accessor for SharedBeaconRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v6 = v0 + v4 + v1[5];
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v9(v6, v7);
  v9(v0 + v4 + v1[6], v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v10 = v0 + v4 + v1[18];
  v11 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
  v12 = v0 + v4 + v1[19];
  v13 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
  if (!v13(v12, 1, v7))
    v9(v12, v7);
  v14 = v0 + v4 + v1[20];
  v15 = type metadata accessor for SharedBeaconRecord.PropertyListContent(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 48))(v14, 1, v15))
  {
    v16 = v14 + *(int *)(v15 + 20);
    if (!v13(v16, 1, v7))
      v9(v16, v7);
  }
  swift_release();
  swift_release();
  return swift_deallocObject(v0, ((((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 8, v3 | 7);
}

uint64_t sub_1009FE584(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v3 = *(_QWORD *)(type metadata accessor for SharedBeaconRecord(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = (*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_1009FE024(a1, v1 + v4, *(void (**)(uint64_t))(v1 + v5), *(void (**)(uint64_t))(v1 + v5 + 8), *(_QWORD *)(v1 + ((v5 + 23) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_1009FE5E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  _QWORD *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33[16];
  char *v34;
  uint64_t v35;
  _QWORD *v36;
  __int16 v37;
  _QWORD *v38;
  _QWORD aBlock[3];
  void *v40;
  uint64_t v41;
  uint64_t v42;

  v27 = a3;
  v28 = a4;
  v29 = type metadata accessor for DispatchWorkItemFlags(0);
  v32 = *(_QWORD *)(v29 - 8);
  __chkstk_darwin(v29);
  v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  v30 = *(_QWORD *)(v8 - 8);
  v31 = v8;
  __chkstk_darwin(v8);
  v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for UUID(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = (void *)type metadata accessor for SharedBeaconRecord(0);
  v41 = sub_100006204(&qword_1010F4A70, type metadata accessor for SharedBeaconRecord, (uint64_t)&unk_100E6F5CC);
  v15 = sub_100018F08(aBlock);
  sub_10005972C(a2, (uint64_t)v15, type metadata accessor for SharedBeaconRecord);
  v17 = v40;
  v16 = v41;
  sub_10001AA44(aBlock, (uint64_t)v40);
  (*(void (**)(void *))(*(_QWORD *)(*(_QWORD *)(v16 + 8) + 8) + 32))(v17);
  type metadata accessor for Transaction(0);
  v34 = v14;
  v35 = a1;
  v36 = aBlock;
  v37 = 257;
  static Transaction.named<A>(_:with:)("com.apple.icloud.searchparty-deleteRelatedRecords", 49, 2, sub_1000880C8, v33);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(aBlock);
  QueueSynchronizer.conditionalSync<A>(_:)(sub_100087A38);
  sub_1007EEF64(4);
  static Transaction.named<A>(_:with:)("com.apple.searchpartyd.triggerSiriDeviceNameSync", 48, 2, sub_100088044, a1);
  v18 = swift_allocObject(&unk_1010A1638, 32, 7);
  v19 = v28;
  *(_QWORD *)(v18 + 16) = v27;
  *(_QWORD *)(v18 + 24) = v19;
  v41 = (uint64_t)sub_1002E3C58;
  v42 = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  v40 = &unk_1010A1650;
  v20 = _Block_copy(aBlock);
  v21 = swift_retain();
  static DispatchQoS.unspecified.getter(v21);
  v38 = _swiftEmptyArrayStorage;
  v22 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v23 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v24 = sub_10001371C();
  v25 = v29;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v38, v23, v24, v29, v22);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v10, v7, v20);
  _Block_release(v20);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v7, v25);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v10, v31);
  return swift_release();
}

unint64_t sub_1009FE938()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1010EF170;
  if (!qword_1010EF170)
  {
    v1 = objc_opt_self(CKRecordID);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1010EF170);
  }
  return result;
}

uint64_t sub_1009FE974()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v1 = (int *)type metadata accessor for SharedBeaconRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_release();
  swift_release();
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v6 = v0 + v4 + v1[5];
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v9(v6, v7);
  v9(v0 + v4 + v1[6], v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v10 = v0 + v4 + v1[18];
  v11 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
  v12 = v0 + v4 + v1[19];
  v13 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
  if (!v13(v12, 1, v7))
    v9(v12, v7);
  v14 = v0 + v4 + v1[20];
  v15 = type metadata accessor for SharedBeaconRecord.PropertyListContent(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 48))(v14, 1, v15))
  {
    v16 = v14 + *(int *)(v15 + 20);
    if (!v13(v16, 1, v7))
      v9(v16, v7);
  }
  swift_release();
  return swift_deallocObject(v0, ((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 17, v3 | 7);
}

uint64_t sub_1009FEB34(_QWORD *a1)
{
  return sub_1009FF25C(a1, type metadata accessor for SharedBeaconRecord, (uint64_t (*)(_QWORD, _QWORD, _QWORD, unint64_t, _QWORD, _QWORD, _QWORD))sub_10080F018);
}

uint64_t sub_1009FEB48()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v1 = (int *)type metadata accessor for SharedBeaconRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_release();
  swift_release();
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v6 = v0 + v4 + v1[5];
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v9(v6, v7);
  v9(v0 + v4 + v1[6], v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v10 = v0 + v4 + v1[18];
  v11 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
  v12 = v0 + v4 + v1[19];
  v13 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
  if (!v13(v12, 1, v7))
    v9(v12, v7);
  v14 = v0 + v4 + v1[20];
  v15 = type metadata accessor for SharedBeaconRecord.PropertyListContent(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 48))(v14, 1, v15))
  {
    v16 = v14 + *(int *)(v15 + 20);
    if (!v13(v16, 1, v7))
      v9(v16, v7);
  }
  swift_release();
  return swift_deallocObject(v0, ((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 16, v3 | 7);
}

uint64_t sub_1009FED08(uint64_t a1)
{
  return sub_1009FFB14(a1, type metadata accessor for SharedBeaconRecord, (uint64_t (*)(uint64_t, _QWORD, _QWORD, unint64_t, _QWORD, _QWORD))sub_10080F858);
}

uint64_t sub_1009FED1C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001A9A8(&qword_10110A908);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_1009FED64()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v1 = (int *)type metadata accessor for SharedBeaconRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_release();
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v6 = v0 + v4 + v1[5];
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v9(v6, v7);
  v9(v0 + v4 + v1[6], v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v10 = v0 + v4 + v1[18];
  v11 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
  v12 = v0 + v4 + v1[19];
  v13 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
  if (!v13(v12, 1, v7))
    v9(v12, v7);
  v14 = v0 + v4 + v1[20];
  v15 = type metadata accessor for SharedBeaconRecord.PropertyListContent(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 48))(v14, 1, v15))
  {
    v16 = v14 + *(int *)(v15 + 20);
    if (!v13(v16, 1, v7))
      v9(v16, v7);
  }
  swift_release();
  return swift_deallocObject(v0, ((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 16, v3 | 7);
}

uint64_t sub_1009FEF1C()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t *v3;

  v1 = *(_QWORD *)(type metadata accessor for SharedBeaconRecord(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (uint64_t *)(v0 + ((*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8));
  return sub_1009FE5E4(*(_QWORD *)(v0 + 16), v0 + v2, *v3, v3[1]);
}

uint64_t sub_1009FEF64()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1009FEF88()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t v21;

  v1 = (int *)type metadata accessor for OwnedBeaconRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_release();
  swift_release();
  v6 = v0 + v4;
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v7 = v0 + v4 + v1[5];
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v10(v7, v8);
  v11 = v0 + v4 + v1[6];
  v12 = type metadata accessor for StableIdentifier(0);
  switch(swift_getEnumCaseMultiPayload(v11, v12))
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v10(v11, v8);
      v21 = v5;
      sub_10001A9A8(&qword_101106F40);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v10(v11, v8);
      v21 = v5;
      sub_10001A9A8((uint64_t *)&unk_1010F46F0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      v5 = v21;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }
  v13 = v6 + v1[7];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v13, 1, v8))
    v10(v13, v8);
  v14 = v6 + v1[8];
  v15 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v14, v15);
  sub_10001BC14(*(_QWORD *)(v6 + v1[9]), *(_QWORD *)(v6 + v1[9] + 8));
  v16 = (uint64_t *)(v6 + v1[10]);
  v17 = v16[1];
  if (v17 >> 60 != 15)
    sub_10001BC14(*v16, v17);
  v18 = (uint64_t *)(v6 + v1[11]);
  v19 = v18[1];
  if (v19 >> 60 != 15)
    sub_10001BC14(*v18, v19);
  sub_10001BC14(*(_QWORD *)(v6 + v1[12]), *(_QWORD *)(v6 + v1[12] + 8));
  sub_10001BC14(*(_QWORD *)(v6 + v1[13]), *(_QWORD *)(v6 + v1[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject(v0, ((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 17, v3 | 7);
}

uint64_t sub_1009FF248(_QWORD *a1)
{
  return sub_1009FF25C(a1, type metadata accessor for OwnedBeaconRecord, (uint64_t (*)(_QWORD, _QWORD, _QWORD, unint64_t, _QWORD, _QWORD, _QWORD))sub_10080EFD4);
}

uint64_t sub_1009FF25C(_QWORD *a1, uint64_t (*a2)(_QWORD), uint64_t (*a3)(_QWORD, _QWORD, _QWORD, unint64_t, _QWORD, _QWORD, _QWORD))
{
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  v5 = *(_QWORD *)(a2(0) - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = v3 + ((*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  return a3(*a1, *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24), v3 + v6, *(_QWORD *)v7, *(_QWORD *)(v7 + 8), *(unsigned __int8 *)(v7 + 16));
}

uint64_t sub_1009FF2C8()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t v21;

  v1 = (int *)type metadata accessor for OwnedBeaconRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_release();
  swift_release();
  v6 = v0 + v4;
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v7 = v0 + v4 + v1[5];
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v10(v7, v8);
  v11 = v0 + v4 + v1[6];
  v12 = type metadata accessor for StableIdentifier(0);
  switch(swift_getEnumCaseMultiPayload(v11, v12))
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v10(v11, v8);
      v21 = v5;
      sub_10001A9A8(&qword_101106F40);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v10(v11, v8);
      v21 = v5;
      sub_10001A9A8((uint64_t *)&unk_1010F46F0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      v5 = v21;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }
  v13 = v6 + v1[7];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v13, 1, v8))
    v10(v13, v8);
  v14 = v6 + v1[8];
  v15 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v14, v15);
  sub_10001BC14(*(_QWORD *)(v6 + v1[9]), *(_QWORD *)(v6 + v1[9] + 8));
  v16 = (uint64_t *)(v6 + v1[10]);
  v17 = v16[1];
  if (v17 >> 60 != 15)
    sub_10001BC14(*v16, v17);
  v18 = (uint64_t *)(v6 + v1[11]);
  v19 = v18[1];
  if (v19 >> 60 != 15)
    sub_10001BC14(*v18, v19);
  sub_10001BC14(*(_QWORD *)(v6 + v1[12]), *(_QWORD *)(v6 + v1[12] + 8));
  sub_10001BC14(*(_QWORD *)(v6 + v1[13]), *(_QWORD *)(v6 + v1[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject(v0, ((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 16, v3 | 7);
}

uint64_t sub_1009FF588(uint64_t a1)
{
  return sub_1009FFB14(a1, type metadata accessor for OwnedBeaconRecord, (uint64_t (*)(uint64_t, _QWORD, _QWORD, unint64_t, _QWORD, _QWORD))sub_10080F84C);
}

uint64_t sub_1009FF59C()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t v21;

  v1 = (int *)type metadata accessor for OwnedBeaconRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_release();
  v6 = v0 + v4;
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v7 = v0 + v4 + v1[5];
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v10(v7, v8);
  v11 = v0 + v4 + v1[6];
  v12 = type metadata accessor for StableIdentifier(0);
  switch(swift_getEnumCaseMultiPayload(v11, v12))
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v10(v11, v8);
      v21 = v5;
      sub_10001A9A8(&qword_101106F40);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v10(v11, v8);
      v21 = v5;
      sub_10001A9A8((uint64_t *)&unk_1010F46F0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      v5 = v21;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }
  v13 = v6 + v1[7];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v13, 1, v8))
    v10(v13, v8);
  v14 = v6 + v1[8];
  v15 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v14, v15);
  sub_10001BC14(*(_QWORD *)(v6 + v1[9]), *(_QWORD *)(v6 + v1[9] + 8));
  v16 = (uint64_t *)(v6 + v1[10]);
  v17 = v16[1];
  if (v17 >> 60 != 15)
    sub_10001BC14(*v16, v17);
  v18 = (uint64_t *)(v6 + v1[11]);
  v19 = v18[1];
  if (v19 >> 60 != 15)
    sub_10001BC14(*v18, v19);
  sub_10001BC14(*(_QWORD *)(v6 + v1[12]), *(_QWORD *)(v6 + v1[12] + 8));
  sub_10001BC14(*(_QWORD *)(v6 + v1[13]), *(_QWORD *)(v6 + v1[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject(v0, ((v5 + v4 + 9) & 0xFFFFFFFFFFFFFFF8) + 16, v3 | 7);
}

uint64_t sub_1009FF854()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(type metadata accessor for OwnedBeaconRecord(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = v2 + *(_QWORD *)(v1 + 64);
  return sub_1009FD9B0(*(_QWORD *)(v0 + 16), v0 + v2, *(unsigned __int8 *)(v0 + v3), *(unsigned __int8 *)(v0 + v3 + 1), *(_QWORD *)(v0 + ((v3 + 9) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v0 + ((v3 + 9) & 0xFFFFFFFFFFFFFFF8) + 8));
}

uint64_t sub_1009FF8AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = type metadata accessor for OwnedBeaconGroup(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = v3 | 7;
  v6 = ((*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 17;
  swift_release();
  swift_release();
  v7 = v0 + v4;
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v8 = v0 + v4 + *(int *)(v1 + 24);
  v9 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  v10 = v7 + *(int *)(v1 + 28);
  v11 = type metadata accessor for MACAddress(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject(v0, v6, v5);
}

uint64_t sub_1009FF9A8(void **a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(type metadata accessor for OwnedBeaconGroup(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = v1 + ((*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8);
  return sub_100854C50(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), v1 + v4, *(void (**)(_QWORD))v5, *(_QWORD *)(v5 + 8), *(unsigned __int8 *)(v5 + 16));
}

uint64_t sub_1009FFA04()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = type metadata accessor for OwnedBeaconGroup(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = v3 | 7;
  v6 = ((*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  swift_release();
  swift_release();
  v7 = v0 + v4;
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v8 = v0 + v4 + *(int *)(v1 + 24);
  v9 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  v10 = v7 + *(int *)(v1 + 28);
  v11 = type metadata accessor for MACAddress(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject(v0, v6, v5);
}

uint64_t sub_1009FFB00(uint64_t a1)
{
  return sub_1009FFB14(a1, type metadata accessor for OwnedBeaconGroup, (uint64_t (*)(uint64_t, _QWORD, _QWORD, unint64_t, _QWORD, _QWORD))sub_10080F5FC);
}

uint64_t sub_1009FFB14(uint64_t a1, uint64_t (*a2)(_QWORD), uint64_t (*a3)(uint64_t, _QWORD, _QWORD, unint64_t, _QWORD, _QWORD))
{
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;

  v5 = *(_QWORD *)(a2(0) - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = (_QWORD *)(v3 + ((*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8));
  return a3(a1, *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24), v3 + v6, *v7, v7[1]);
}

uint64_t sub_1009FFB7C()
{
  uint64_t v0;

  swift_errorRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1009FFBA0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

void sub_1009FFBCC(uint64_t a1)
{
  uint64_t v1;

  sub_1009FD574(a1, *(NSObject **)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_1009FFBD4()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t v21;

  v1 = (int *)type metadata accessor for OwnedBeaconRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = v0 + v4;
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v7 = v0 + v4 + v1[5];
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v10(v7, v8);
  v11 = v0 + v4 + v1[6];
  v12 = type metadata accessor for StableIdentifier(0);
  switch(swift_getEnumCaseMultiPayload(v11, v12))
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v10(v11, v8);
      v21 = v5;
      sub_10001A9A8(&qword_101106F40);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v10(v11, v8);
      v21 = v5;
      sub_10001A9A8((uint64_t *)&unk_1010F46F0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      v5 = v21;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }
  v13 = v6 + v1[7];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v13, 1, v8))
    v10(v13, v8);
  v14 = v6 + v1[8];
  v15 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v14, v15);
  sub_10001BC14(*(_QWORD *)(v6 + v1[9]), *(_QWORD *)(v6 + v1[9] + 8));
  v16 = (uint64_t *)(v6 + v1[10]);
  v17 = v16[1];
  if (v17 >> 60 != 15)
    sub_10001BC14(*v16, v17);
  v18 = (uint64_t *)(v6 + v1[11]);
  v19 = v18[1];
  if (v19 >> 60 != 15)
    sub_10001BC14(*v18, v19);
  sub_10001BC14(*(_QWORD *)(v6 + v1[12]), *(_QWORD *)(v6 + v1[12] + 8));
  sub_10001BC14(*(_QWORD *)(v6 + v1[13]), *(_QWORD *)(v6 + v1[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject(v0, ((((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 10, v3 | 7);
}

uint64_t *sub_1009FFEB4(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v22 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v22 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = *a2;
    v8 = a2[1];
    sub_10001BBBC(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    v9 = a3[5];
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for UUID(0);
    v13 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
    v13(v10, v11, v12);
    v13((char *)a1 + a3[6], (char *)a2 + a3[6], v12);
    v14 = a3[8];
    *(uint64_t *)((char *)a1 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
    v15 = (uint64_t *)((char *)a1 + v14);
    v16 = (uint64_t *)((char *)a2 + v14);
    v17 = v16[1];
    *v15 = *v16;
    v15[1] = v17;
    v18 = a3[9];
    v19 = (uint64_t *)((char *)a1 + v18);
    v20 = (uint64_t *)((char *)a2 + v18);
    v21 = v20[1];
    *v19 = *v20;
    v19[1] = v21;
    swift_bridgeObjectRetain(v17);
    swift_bridgeObjectRetain(v21);
  }
  return a1;
}

uint64_t sub_1009FFFB4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);

  sub_10001BC14(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for UUID(0);
  v6 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v6(v4, v5);
  v6(a1 + *(int *)(a2 + 24), v5);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t *sub_100A00044(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;

  v6 = *a2;
  v7 = a2[1];
  sub_10001BBBC(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  v8 = a3[5];
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for UUID(0);
  v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
  v12(v9, v10, v11);
  v12((char *)a1 + a3[6], (char *)a2 + a3[6], v11);
  v13 = a3[8];
  *(uint64_t *)((char *)a1 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
  v14 = (uint64_t *)((char *)a1 + v13);
  v15 = (uint64_t *)((char *)a2 + v13);
  v16 = v15[1];
  *v14 = *v15;
  v14[1] = v16;
  v17 = a3[9];
  v18 = (uint64_t *)((char *)a1 + v17);
  v19 = (uint64_t *)((char *)a2 + v17);
  v20 = v19[1];
  *v18 = *v19;
  v18[1] = v20;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRetain(v20);
  return a1;
}

uint64_t *sub_100A00118(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  void (*v14)(char *, char *, uint64_t);
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;

  v6 = *a2;
  v7 = a2[1];
  sub_10001BBBC(*a2, v7);
  v8 = *a1;
  v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  sub_10001BC14(v8, v9);
  v10 = a3[5];
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for UUID(0);
  v14 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 24);
  v14(v11, v12, v13);
  v14((char *)a1 + a3[6], (char *)a2 + a3[6], v13);
  *(uint64_t *)((char *)a1 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
  v15 = a3[8];
  v16 = (uint64_t *)((char *)a1 + v15);
  v17 = (uint64_t *)((char *)a2 + v15);
  *v16 = *v17;
  v18 = v17[1];
  v16[1] = v18;
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRelease();
  v19 = a3[9];
  v20 = (uint64_t *)((char *)a1 + v19);
  v21 = (uint64_t *)((char *)a2 + v19);
  *v20 = *v21;
  v22 = v21[1];
  v20[1] = v22;
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRelease();
  return a1;
}

char *sub_100A0021C(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for UUID(0);
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v10(&a1[a3[6]], &a2[a3[6]], v9);
  v11 = a3[8];
  *(_QWORD *)&a1[a3[7]] = *(_QWORD *)&a2[a3[7]];
  *(_OWORD *)&a1[v11] = *(_OWORD *)&a2[v11];
  *(_OWORD *)&a1[a3[9]] = *(_OWORD *)&a2[a3[9]];
  return a1;
}

uint64_t *sub_100A002C8(uint64_t *a1, char *a2, int *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;

  v6 = *a1;
  v7 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_10001BC14(v6, v7);
  v8 = a3[5];
  v9 = (char *)a1 + v8;
  v10 = &a2[v8];
  v11 = type metadata accessor for UUID(0);
  v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 40);
  v12(v9, v10, v11);
  v12((char *)a1 + a3[6], &a2[a3[6]], v11);
  v13 = a3[8];
  *(uint64_t *)((char *)a1 + a3[7]) = *(_QWORD *)&a2[a3[7]];
  v14 = (uint64_t *)((char *)a1 + v13);
  v15 = (uint64_t *)&a2[v13];
  v17 = *v15;
  v16 = v15[1];
  *v14 = v17;
  v14[1] = v16;
  swift_bridgeObjectRelease();
  v18 = a3[9];
  v19 = (uint64_t *)((char *)a1 + v18);
  v20 = (uint64_t *)&a2[v18];
  v22 = *v20;
  v21 = v20[1];
  *v19 = v22;
  v19[1] = v21;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100A003A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100A003AC);
}

uint64_t sub_100A003AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + *(int *)(a3 + 20), a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 32) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_100A00430(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100A0043C);
}

uint64_t sub_100A0043C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + *(int *)(a4 + 20), a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 32) + 8) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for BeaconNamingRecord(uint64_t a1)
{
  uint64_t result;

  result = qword_10110FBA8;
  if (!qword_10110FBA8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for BeaconNamingRecord);
  return result;
}

uint64_t sub_100A004F8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  void *v8;
  void *v9;

  v4 = &unk_100E58568;
  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v5 = *(_QWORD *)(result - 8) + 64;
    v6 = v5;
    v7 = (char *)&value witness table for Builtin.Int64 + 64;
    v8 = &unk_100E58580;
    v9 = &unk_100E58598;
    swift_initStructMetadata(a1, 256, 6, &v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_100A00590@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  id v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int (*v24)(char *, uint64_t, uint64_t);
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  id v29;
  NSString v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  NSString v35;
  id v36;
  NSString v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  _BYTE *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  id v47;
  void *v48;
  unint64_t v49;
  uint64_t v50;
  _BYTE *v51;
  uint64_t result;
  void (*v53)(char *, char *, uint64_t);
  id v54;
  id v55;
  void *v56;
  id v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  int *v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t ObjectType;
  void (*v73)(char *, char *, uint64_t);
  id v74;
  int *v75;
  uint64_t *v76;
  char *v77;
  uint64_t *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;

  v4 = sub_10001A9A8(&qword_1010ED860);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v67 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v67 - v8;
  v80 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v80 - 8);
  v11 = __chkstk_darwin(v80);
  v77 = (char *)&v67 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v79 = (char *)&v67 - v13;
  v14 = type metadata accessor for BeaconNamingRecord(0);
  v75 = (int *)v14;
  v76 = a2;
  v15 = (uint64_t *)((char *)a2 + *(int *)(v14 + 36));
  *v15 = 0;
  v15[1] = 0;
  v16 = CKRecord.recordType.getter(v14);
  if (v16 == 0xD000000000000012 && v17 == 0x8000000100E58530)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v18 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v17, 0xD000000000000012, 0x8000000100E58530, 0);
    swift_bridgeObjectRelease();
    if ((v18 & 1) == 0)
    {
      v41 = sub_100A01D28();
      v42 = swift_allocError(&type metadata for BeaconNamingRecord.BeaconNamingRecordConversionError, v41, 0, 0);
      *v43 = 0;
      swift_willThrow(v42);

      return swift_bridgeObjectRelease();
    }
  }
  v78 = v15;
  v19 = objc_msgSend(a1, "recordID");
  v20 = objc_msgSend(v19, "recordName");

  v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
  v23 = v22;

  UUID.init(uuidString:)(v21, v23);
  swift_bridgeObjectRelease();
  v24 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
  v25 = v80;
  if (v24(v9, 1, v80) == 1)
  {
    sub_1001C0844((uint64_t)v9);
    v26 = sub_100A01D28();
    v27 = swift_allocError(&type metadata for BeaconNamingRecord.BeaconNamingRecordConversionError, v26, 0, 0);
    *v28 = 1;
    swift_willThrow(v27);

    return swift_bridgeObjectRelease();
  }
  v73 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
  v73(v79, v9, v25);
  v29 = objc_msgSend(a1, "encryptedValues");
  ObjectType = swift_getObjectType(v29);
  v30 = String._bridgeToObjectiveC()();
  v74 = v29;
  v31 = objc_msgSend(v29, "objectForKeyedSubscript:", v30);

  if (!v31
    || (v83 = (uint64_t)v31,
        v33 = sub_10001A9A8((uint64_t *)&unk_1010ED8D0),
        v32 = swift_dynamicCast(&v81, &v83, v33, &type metadata for String, 6),
        (v32 & 1) == 0))
  {
LABEL_17:
    v44 = static os_log_type_t.error.getter(v32);
    v45 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v46 = swift_allocObject(v45, 72, 7);
    *(_OWORD *)(v46 + 16) = xmmword_100E22B00;
    *(_QWORD *)(v46 + 56) = sub_10000F4A0(0, (unint64_t *)&qword_1010ED8E0, CKRecord_ptr);
    *(_QWORD *)(v46 + 64) = sub_100088600();
    *(_QWORD *)(v46 + 32) = a1;
    sub_10000F4A0(0, (unint64_t *)&qword_1010ED8F0, OS_os_log_ptr);
    v47 = a1;
    v48 = (void *)static OS_os_log.default.getter(v47);
    os_log(_:dso:log:_:_:)(v44, &_mh_execute_header, v48, "Invalid BeaconNamingRecord - %@", 31, 2, v46);
    swift_bridgeObjectRelease();

    v49 = sub_100A01D28();
    v50 = swift_allocError(&type metadata for BeaconNamingRecord.BeaconNamingRecordConversionError, v49, 0, 0);
    *v51 = 2;
    swift_willThrow(v50);
    swift_unknownObjectRelease(v74);

    (*(void (**)(char *, uint64_t))(v10 + 8))(v79, v25);
    return swift_bridgeObjectRelease();
  }
  v70 = v81;
  v34 = v82;
  v35 = String._bridgeToObjectiveC()();
  v36 = objc_msgSend(v74, "objectForKeyedSubscript:", v35);

  if (!v36
    || (v71 = v34, v81 = (uint64_t)v36, (swift_dynamicCast(&v83, &v81, v33, &type metadata for Int, 6) & 1) == 0)
    || (v69 = v83,
        v37 = String._bridgeToObjectiveC()(),
        v38 = objc_msgSend(v74, "objectForKeyedSubscript:", v37),
        v37,
        !v38)
    || (v83 = (uint64_t)v38, (swift_dynamicCast(&v81, &v83, v33, &type metadata for String, 6) & 1) == 0))
  {
    v32 = swift_bridgeObjectRelease();
    v25 = v80;
    goto LABEL_17;
  }
  v40 = v81;
  v39 = v82;
  UUID.init(uuidString:)(v70, v71);
  swift_bridgeObjectRelease();
  v25 = v80;
  if (v24(v7, 1, v80) == 1)
  {
    swift_bridgeObjectRelease();
    v32 = sub_1001C0844((uint64_t)v7);
    goto LABEL_17;
  }
  v53 = v73;
  v73(v77, v7, v25);
  v70 = v39;
  v54 = v74;
  CKRecordKeyValueSetting.subscript.getter(&v81, 0x696A6F6D65, 0xE500000000000000, ObjectType, &type metadata for String);
  v71 = v82;
  ObjectType = v81;
  v67 = objc_autoreleasePoolPush();
  v55 = objc_msgSend(objc_allocWithZone((Class)NSKeyedArchiver), "initRequiringSecureCoding:", 1);
  v68 = v40;
  v56 = v55;
  objc_msgSend(a1, "encodeSystemFieldsWithCoder:", v55);
  objc_msgSend(v56, "finishEncoding");
  v57 = objc_msgSend(v56, "encodedData");
  v58 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v57);
  v60 = v59;

  objc_autoreleasePoolPop(v67);
  swift_unknownObjectRelease(v54);

  v61 = v76;
  *v76 = v58;
  v61[1] = v60;
  v62 = v75;
  v53((char *)v61 + v75[5], v79, v25);
  v53((char *)v61 + v62[6], v77, v25);
  *(uint64_t *)((char *)v61 + v62[7]) = v69;
  v63 = (uint64_t *)((char *)v61 + v62[8]);
  v64 = v70;
  *v63 = v68;
  v63[1] = v64;
  v65 = v78;
  result = swift_bridgeObjectRelease();
  v66 = v71;
  *v65 = ObjectType;
  v65[1] = v66;
  return result;
}

void sub_100A00C6C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;

  if (qword_1010EA110 != -1)
    swift_once(&qword_1010EA110, sub_100A00E00);
  v0 = type metadata accessor for URL(0);
  v1 = sub_10001A9E8(v0, (uint64_t)qword_1011B7AF8);
  v2 = UUID.uuidString.getter(v1);
  v4 = v3;
  URL.appendingPathComponent(_:isDirectory:)(v2, v3, 1);
  v5 = swift_bridgeObjectRelease(v4);
  v6 = static os_log_type_t.default.getter(v5);
  v7 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v8 = swift_allocObject(v7, 112, 7);
  *(_OWORD *)(v8 + 16) = xmmword_100E22B10;
  v9 = sub_100006204((unint64_t *)&qword_101108070, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
  v10 = dispatch thunk of CustomStringConvertible.description.getter(v0, v9);
  v12 = v11;
  *(_QWORD *)(v8 + 56) = &type metadata for String;
  v13 = sub_10001AA00();
  *(_QWORD *)(v8 + 64) = v13;
  *(_QWORD *)(v8 + 32) = v10;
  *(_QWORD *)(v8 + 40) = v12;
  v14 = UUID.uuidString.getter(v13);
  *(_QWORD *)(v8 + 96) = &type metadata for String;
  *(_QWORD *)(v8 + 104) = v13;
  *(_QWORD *)(v8 + 72) = v14;
  *(_QWORD *)(v8 + 80) = v15;
  v16 = sub_10000F4A0(0, (unint64_t *)&qword_1010ED8F0, OS_os_log_ptr);
  v17 = (void *)static OS_os_log.default.getter(v16);
  os_log(_:dso:log:_:_:)(v6, &_mh_execute_header, v17, "returning baseUrl %@ for %@", 27, 2, v8);
  swift_bridgeObjectRelease(v8);

}

uint64_t sub_100A00E00()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v6;

  v0 = type metadata accessor for URL(0);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = __chkstk_darwin(v0);
  v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000234D8(v2, qword_1011B7AF8);
  sub_10001A9E8(v0, (uint64_t)qword_1011B7AF8);
  type metadata accessor for BeaconStore(0);
  sub_1007EC9B8((uint64_t)v4);
  URL.appendingPathComponent(_:isDirectory:)(0xD000000000000012, 0x8000000100E58530, 1);
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v4, v0);
}

void sub_100A00ED0(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  unint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;

  v2 = v1;
  v4 = *v1;
  v5 = v2[1];
  sub_10001BBBC(v4, v5);
  Data.hash(into:)(a1, v4, v5);
  sub_10001BC14(v4, v5);
  v6 = (int *)type metadata accessor for BeaconNamingRecord(0);
  v7 = type metadata accessor for UUID(0);
  v8 = sub_100006204(&qword_1010F98B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(a1, v7, v8);
  dispatch thunk of Hashable.hash(into:)(a1, v7, v8);
  Hasher._combine(_:)(*(uint64_t *)((char *)v2 + v6[7]));
  v9 = (uint64_t *)((char *)v2 + v6[8]);
  v10 = *v9;
  v11 = v9[1];
  swift_bridgeObjectRetain(v11);
  String.hash(into:)(a1, v10, v11);
  swift_bridgeObjectRelease();
  v12 = (uint64_t *)((char *)v2 + v6[9]);
  v13 = v12[1];
  if (v13)
  {
    v14 = *v12;
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain(v13);
    String.hash(into:)(a1, v14, v13);
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
}

uint64_t sub_100A01030(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_100A01068 + 4 * byte_100E58530[a1]))(0xD000000000000010, 0x8000000100EC2FE0);
}

uint64_t sub_100A01068()
{
  return 0x696669746E656469;
}

uint64_t sub_100A01098()
{
  return 0x6449656C6F72;
}

uint64_t sub_100A010AC()
{
  return 1701667182;
}

uint64_t sub_100A010BC()
{
  return 0x696A6F6D65;
}

uint64_t sub_100A010D0()
{
  unsigned __int8 *v0;

  return sub_100A01030(*v0);
}

uint64_t sub_100A010D8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100A021EC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100A010FC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100A01D6C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100A01124(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100A01D6C();
  return CodingKey.debugDescription.getter(a1, v2);
}

Swift::Int sub_100A0114C()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  sub_100A00ED0((uint64_t)v1);
  return Hasher._finalize()();
}

Swift::Int sub_100A0118C()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  sub_100A00ED0((uint64_t)v1);
  return Hasher._finalize()();
}

uint64_t sub_100A011C8()
{
  return sub_100006204(&qword_10110FBF0, type metadata accessor for BeaconNamingRecord, (uint64_t)&unk_100E585B0);
}

uint64_t sub_100A011F4(id *a1)
{
  uint64_t v1;
  uint64_t v2;
  id v3;
  uint64_t ObjectType;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  char v24;
  __int128 v25;
  __int128 v26;
  void *v27;

  v2 = v1;
  v3 = objc_msgSend(*a1, "encryptedValues");
  ObjectType = swift_getObjectType(v3);
  CKRecordKeyValueSetting.subscript.getter(&v25, 0xD000000000000010, 0x8000000100EC3950, ObjectType, &type metadata for String);
  v5 = *((_QWORD *)&v25 + 1);
  v6 = v25;
  v7 = (int *)type metadata accessor for BeaconNamingRecord(0);
  v8 = UUID.uuidString.getter(v7);
  if (!v5)
  {
    v12 = swift_bridgeObjectRelease();
    goto LABEL_9;
  }
  if (v6 == v8 && v5 == v9)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_11;
  }
  v11 = _stringCompareWithSmolCheck(_:_:expecting:)(v6, v5, v8, v9, 0);
  swift_bridgeObjectRelease();
  v12 = swift_bridgeObjectRelease();
  if ((v11 & 1) == 0)
  {
LABEL_9:
    v13 = UUID.uuidString.getter(v12);
    *((_QWORD *)&v26 + 1) = &type metadata for String;
    v27 = &protocol witness table for String;
    *(_QWORD *)&v25 = v13;
    *((_QWORD *)&v25 + 1) = v14;
    CKRecordKeyValueSetting.subscript.setter(&v25, 0xD000000000000010, 0x8000000100EC3950, ObjectType);
  }
LABEL_11:
  CKRecordKeyValueSetting.subscript.getter(&v25, 0x6449656C6F72, 0xE600000000000000, ObjectType, &type metadata for Int);
  v15 = *(_QWORD *)(v1 + v7[7]);
  if ((BYTE8(v25) & 1) != 0 || (_QWORD)v25 != v15)
  {
    *((_QWORD *)&v26 + 1) = &type metadata for Int;
    v27 = &protocol witness table for Int;
    *(_QWORD *)&v25 = v15;
    CKRecordKeyValueSetting.subscript.setter(&v25, 0x6449656C6F72, 0xE600000000000000, ObjectType);
  }
  CKRecordKeyValueSetting.subscript.getter(&v25, 1701667182, 0xE400000000000000, ObjectType, &type metadata for String);
  v16 = (unint64_t *)(v1 + v7[8]);
  v18 = *v16;
  v17 = v16[1];
  if (!*((_QWORD *)&v25 + 1))
    goto LABEL_18;
  if (v25 == __PAIR128__(v17, v18))
  {
    swift_bridgeObjectRelease();
    goto LABEL_19;
  }
  v19 = _stringCompareWithSmolCheck(_:_:expecting:)(v25, *((_QWORD *)&v25 + 1), *v16, v16[1], 0);
  swift_bridgeObjectRelease();
  if ((v19 & 1) == 0)
  {
LABEL_18:
    *((_QWORD *)&v26 + 1) = &type metadata for String;
    v27 = &protocol witness table for String;
    *(_QWORD *)&v25 = v18;
    *((_QWORD *)&v25 + 1) = v17;
    swift_bridgeObjectRetain(v17);
    CKRecordKeyValueSetting.subscript.setter(&v25, 1701667182, 0xE400000000000000, ObjectType);
  }
LABEL_19:
  CKRecordKeyValueSetting.subscript.getter(&v25, 0x696A6F6D65, 0xE500000000000000, ObjectType, &type metadata for String);
  v20 = (unint64_t *)(v2 + v7[9]);
  v22 = *v20;
  v21 = v20[1];
  if (!*((_QWORD *)&v25 + 1))
  {
    if (!v21)
      return swift_unknownObjectRelease(v3);
    goto LABEL_27;
  }
  if (!v21)
  {
    swift_bridgeObjectRelease();
    v27 = 0;
    v25 = 0u;
    v26 = 0u;
LABEL_28:
    swift_bridgeObjectRetain(v21);
    CKRecordKeyValueSetting.subscript.setter(&v25, 0x696A6F6D65, 0xE500000000000000, ObjectType);
    return swift_unknownObjectRelease(v3);
  }
  if (v25 == __PAIR128__(v21, v22))
  {
    swift_unknownObjectRelease(v3);
    return swift_bridgeObjectRelease();
  }
  v24 = _stringCompareWithSmolCheck(_:_:expecting:)(v25, *((_QWORD *)&v25 + 1), *v20, v20[1], 0);
  swift_bridgeObjectRelease();
  if ((v24 & 1) == 0)
  {
LABEL_27:
    *((_QWORD *)&v26 + 1) = &type metadata for String;
    v27 = &protocol witness table for String;
    *(_QWORD *)&v25 = v22;
    *((_QWORD *)&v25 + 1) = v21;
    goto LABEL_28;
  }
  return swift_unknownObjectRelease(v3);
}

uint64_t sub_100A01560(_QWORD *a1)
{
  __int128 *v1;
  uint64_t v2;
  __int128 *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v26;
  char v27;

  v3 = v1;
  v5 = sub_10001A9A8((uint64_t *)&unk_10110FC28);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  v11 = sub_100A01D6C();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for BeaconNamingRecord.CodingKeys, &type metadata for BeaconNamingRecord.CodingKeys, v11, v9, v10);
  v26 = *v3;
  v27 = 0;
  v12 = sub_100036A58();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v26, &v27, v5, &type metadata for Data, v12);
  if (!v2)
  {
    v13 = (int *)type metadata accessor for BeaconNamingRecord(0);
    v14 = (char *)v3 + v13[5];
    LOBYTE(v26) = 1;
    v15 = type metadata accessor for UUID(0);
    v16 = sub_100006204(&qword_1010EDAC0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v14, &v26, v5, v15, v16);
    v17 = (char *)v3 + v13[6];
    LOBYTE(v26) = 2;
    KeyedEncodingContainer.encode<A>(_:forKey:)(v17, &v26, v5, v15, v16);
    v18 = *(_QWORD *)((char *)v3 + v13[7]);
    LOBYTE(v26) = 3;
    KeyedEncodingContainer.encode(_:forKey:)(v18, &v26, v5);
    v19 = (uint64_t *)((char *)v3 + v13[8]);
    v20 = *v19;
    v21 = v19[1];
    LOBYTE(v26) = 4;
    KeyedEncodingContainer.encode(_:forKey:)(v20, v21, &v26, v5);
    v22 = (uint64_t *)((char *)v3 + v13[9]);
    v23 = *v22;
    v24 = v22[1];
    LOBYTE(v26) = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v23, v24, &v26, v5);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100A0179C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  _OWORD *v26;
  uint64_t v27;
  char *v28;
  void (*v29)(char *, _QWORD *, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  _QWORD v40[2];
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t *v49;
  uint64_t v50;
  __int128 v51;
  char v52;

  v43 = a2;
  v3 = type metadata accessor for UUID(0);
  v44 = *(_QWORD *)(v3 - 8);
  v45 = v3;
  v4 = __chkstk_darwin(v3);
  v6 = (char *)v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (_QWORD *)((char *)v40 - v7);
  v47 = sub_10001A9A8(&qword_10110FC18);
  v9 = *(_QWORD *)(v47 - 8);
  __chkstk_darwin(v47);
  v11 = (char *)v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for BeaconNamingRecord(0);
  v13 = __chkstk_darwin(v12);
  v15 = (_OWORD *)((char *)v40 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v16 = (uint64_t *)((char *)v15 + *(int *)(v13 + 36));
  *v16 = 0;
  v16[1] = 0;
  v48 = a1;
  v49 = v16;
  v18 = a1[3];
  v17 = a1[4];
  sub_10001AA44(a1, v18);
  v19 = sub_100A01D6C();
  v46 = v11;
  v20 = v50;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for BeaconNamingRecord.CodingKeys, &type metadata for BeaconNamingRecord.CodingKeys, v19, v18, v17);
  if (v20)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v48);
    return swift_bridgeObjectRelease();
  }
  else
  {
    v21 = v6;
    v50 = v9;
    v22 = v44;
    v23 = v45;
    v52 = 0;
    v24 = sub_100036994();
    v25 = v46;
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v51, &type metadata for Data, &v52, v47, &type metadata for Data, v24);
    v26 = v15;
    *v15 = v51;
    LOBYTE(v51) = 1;
    v27 = sub_100006204((unint64_t *)&qword_1010EDA90, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v8, v23, &v51, v47, v23, v27);
    v41 = (uint64_t)v26;
    v42 = v12;
    v28 = (char *)v26 + *(int *)(v12 + 20);
    v29 = *(void (**)(char *, _QWORD *, uint64_t))(v22 + 32);
    v29(v28, v8, v23);
    LOBYTE(v51) = 2;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v21, v23, &v51, v47, v23, v27);
    v31 = v41;
    v30 = v42;
    v29((char *)(v41 + *(int *)(v42 + 24)), v21, v23);
    LOBYTE(v51) = 3;
    *(_QWORD *)(v31 + *(int *)(v30 + 28)) = KeyedDecodingContainer.decode(_:forKey:)(&v51, v47);
    LOBYTE(v51) = 4;
    v32 = KeyedDecodingContainer.decode(_:forKey:)(&v51, v47);
    v40[1] = 0;
    v33 = (uint64_t *)(v31 + *(int *)(v30 + 32));
    *v33 = v32;
    v33[1] = v34;
    LOBYTE(v51) = 5;
    v35 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v51, v47);
    v37 = v36;
    (*(void (**)(char *, uint64_t))(v50 + 8))(v25, v47);
    v38 = v49;
    swift_bridgeObjectRelease();
    *v38 = v35;
    v38[1] = v37;
    sub_100A01DB0(v31, v43);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v48);
    return sub_100A01DF4(v31);
  }
}

void sub_100A01C18()
{
  void *v0;

  v0 = objc_autoreleasePoolPush();
  sub_100A00C6C();
  objc_autoreleasePoolPop(v0);
}

uint64_t sub_100A01C68@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100A0179C(a1, a2);
}

uint64_t sub_100A01C7C(_QWORD *a1)
{
  return sub_100A01560(a1);
}

uint64_t sub_100A01C90(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_100006204((unint64_t *)&unk_10110FBF8, type metadata accessor for BeaconNamingRecord, (uint64_t)&unk_100E58640);
  result = sub_100006204(&qword_101108080, type metadata accessor for BeaconNamingRecord, (uint64_t)&unk_100E58618);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t sub_100A01CEC(uint64_t a1)
{
  uint64_t result;

  result = sub_100006204(&qword_101108088, type metadata accessor for BeaconNamingRecord, (uint64_t)&unk_100E58668);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100A01D28()
{
  unint64_t result;

  result = qword_10110FC08;
  if (!qword_10110FC08)
  {
    result = swift_getWitnessTable(aU_29, &type metadata for BeaconNamingRecord.BeaconNamingRecordConversionError);
    atomic_store(result, (unint64_t *)&qword_10110FC08);
  }
  return result;
}

unint64_t sub_100A01D6C()
{
  unint64_t result;

  result = qword_10110FC20;
  if (!qword_10110FC20)
  {
    result = swift_getWitnessTable(aM_37, &type metadata for BeaconNamingRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10110FC20);
  }
  return result;
}

uint64_t sub_100A01DB0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for BeaconNamingRecord(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100A01DF4(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for BeaconNamingRecord(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100A01E30(uint64_t *a1, uint64_t a2)
{
  char v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  BOOL v11;
  char v12;
  uint64_t result;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  BOOL v19;

  _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(*a1, a1[1]);
  if ((v4 & 1) == 0)
    return 0;
  v5 = (int *)type metadata accessor for BeaconNamingRecord(0);
  if ((static UUID.== infix(_:_:)((char *)a1 + v5[5], a2 + v5[5]) & 1) == 0
    || (static UUID.== infix(_:_:)((char *)a1 + v5[6], a2 + v5[6]) & 1) == 0
    || *(uint64_t *)((char *)a1 + v5[7]) != *(_QWORD *)(a2 + v5[7]))
  {
    return 0;
  }
  v6 = v5[8];
  v7 = *(uint64_t *)((char *)a1 + v6);
  v8 = *(uint64_t *)((char *)a1 + v6 + 8);
  v9 = (_QWORD *)(a2 + v6);
  v10 = v9[1];
  v11 = v7 == *v9 && v8 == v10;
  if (v11 || (v12 = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v8, *v9, v10, 0), result = 0, (v12 & 1) != 0))
  {
    v14 = v5[9];
    v15 = (uint64_t *)((char *)a1 + v14);
    v16 = *(uint64_t *)((char *)a1 + v14 + 8);
    v17 = (_QWORD *)(a2 + v14);
    v18 = v17[1];
    if (v16)
    {
      if (v18)
      {
        v19 = *v15 == *v17 && v16 == v18;
        if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v15, v16, *v17, v18, 0) & 1) != 0)
          return 1;
      }
    }
    else if (!v18)
    {
      return 1;
    }
    return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for BeaconNamingRecord.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_100A01F80 + 4 * byte_100E5853B[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_100A01FB4 + 4 * byte_100E58536[v4]))();
}

uint64_t sub_100A01FB4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100A01FBC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100A01FC4);
  return result;
}

uint64_t sub_100A01FD0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100A01FD8);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_100A01FDC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100A01FE4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BeaconNamingRecord.CodingKeys()
{
  return &type metadata for BeaconNamingRecord.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for BeaconNamingRecord.BeaconNamingRecordConversionError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_100A0204C + 4 * byte_100E58545[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_100A02080 + 4 * byte_100E58540[v4]))();
}

uint64_t sub_100A02080(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100A02088(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100A02090);
  return result;
}

uint64_t sub_100A0209C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100A020A4);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_100A020A8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100A020B0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BeaconNamingRecord.BeaconNamingRecordConversionError()
{
  return &type metadata for BeaconNamingRecord.BeaconNamingRecordConversionError;
}

unint64_t sub_100A020D0()
{
  unint64_t result;

  result = qword_10110FC38;
  if (!qword_10110FC38)
  {
    result = swift_getWitnessTable("Œ$", &type metadata for BeaconNamingRecord.BeaconNamingRecordConversionError);
    atomic_store(result, (unint64_t *)&qword_10110FC38);
  }
  return result;
}

unint64_t sub_100A02118()
{
  unint64_t result;

  result = qword_10110FC40;
  if (!qword_10110FC40)
  {
    result = swift_getWitnessTable(asc_100E587DC, &type metadata for BeaconNamingRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10110FC40);
  }
  return result;
}

unint64_t sub_100A02160()
{
  unint64_t result;

  result = qword_10110FC48;
  if (!qword_10110FC48)
  {
    result = swift_getWitnessTable(byte_100E5874C, &type metadata for BeaconNamingRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10110FC48);
  }
  return result;
}

unint64_t sub_100A021A8()
{
  unint64_t result;

  result = qword_10110FC50;
  if (!qword_10110FC50)
  {
    result = swift_getWitnessTable(byte_100E58774, &type metadata for BeaconNamingRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10110FC50);
  }
  return result;
}

uint64_t sub_100A021EC(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char v10;

  if (a1 == 0xD000000000000010)
  {
    v4 = 0x8000000100EC2FE0;
    if (a2 == 0x8000000100EC2FE0)
      goto LABEL_5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x8000000100EC2FE0, a1, a2, 0) & 1) != 0)
  {
    v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  if (a1 == 0x696669746E656469 && a2 == 0xEA00000000007265)
  {
    v6 = 0xEA00000000007265;
LABEL_11:
    swift_bridgeObjectRelease(v6);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x696669746E656469, 0xEA00000000007265, a1, a2, 0) & 1) != 0)
  {
    v6 = a2;
    goto LABEL_11;
  }
  if (a1 == 0xD000000000000010)
  {
    v7 = 0x8000000100EC3950;
    if (a2 == 0x8000000100EC3950)
      goto LABEL_16;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x8000000100EC3950, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
LABEL_16:
    swift_bridgeObjectRelease(v7);
    return 2;
  }
  if (a1 == 0x6449656C6F72 && a2 == 0xE600000000000000)
  {
    v8 = 0xE600000000000000;
LABEL_22:
    swift_bridgeObjectRelease(v8);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6449656C6F72, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_22;
  }
  if (a1 == 1701667182 && a2 == 0xE400000000000000)
  {
    v9 = 0xE400000000000000;
LABEL_28:
    swift_bridgeObjectRelease(v9);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1701667182, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_28;
  }
  if (a1 == 0x696A6F6D65 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease(0xE500000000000000);
    return 5;
  }
  else
  {
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(0x696A6F6D65, 0xE500000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v10 & 1) != 0)
      return 5;
    else
      return 6;
  }
}

ValueMetadata *type metadata accessor for AccessoryLatchSeparatedKeyResponsePayload()
{
  return &type metadata for AccessoryLatchSeparatedKeyResponsePayload;
}

uint64_t sub_100A0245C@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[3];
  uint64_t v15;
  uint64_t v16;

  v5 = a1[3];
  v6 = a1[4];
  sub_10001AA44(a1, v5);
  dispatch thunk of BinaryDecoding.container()(v14, v5, v6);
  v7 = v15;
  v8 = v16;
  sub_10009F5D0((uint64_t)v14, v15);
  v9 = dispatch thunk of BinaryDecodingContaining.decode(length:)(6, v7, v8);
  if (v2)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v14);
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  }
  else
  {
    v12 = v9;
    v13 = v10;
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v14);
    result = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
    *a2 = v12;
    a2[1] = v13;
  }
  return result;
}

unint64_t sub_100A0251C(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = sub_100A02548();
  result = sub_1001E9A90();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_100A02548()
{
  unint64_t result;

  result = qword_10110FC60;
  if (!qword_10110FC60)
  {
    result = swift_getWitnessTable(byte_100E588CC, &type metadata for AccessoryLatchSeparatedKeyResponsePayload);
    atomic_store(result, (unint64_t *)&qword_10110FC60);
  }
  return result;
}

ValueMetadata *type metadata accessor for iCloudIdentifierResponsePayload()
{
  return &type metadata for iCloudIdentifierResponsePayload;
}

uint64_t sub_100A0259C@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;

  result = sub_100A02634(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }
  return result;
}

unint64_t sub_100A025C4(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = sub_100A025F0();
  result = sub_10043A01C();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_100A025F0()
{
  unint64_t result;

  result = qword_10110FC68;
  if (!qword_10110FC68)
  {
    result = swift_getWitnessTable(asc_100E58960, &type metadata for iCloudIdentifierResponsePayload);
    atomic_store(result, (unint64_t *)&qword_10110FC68);
  }
  return result;
}

uint64_t sub_100A02634(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  _QWORD v10[3];
  uint64_t v11;
  uint64_t v12;

  v3 = a1[3];
  v4 = a1[4];
  sub_10001AA44(a1, v3);
  dispatch thunk of BinaryDecoding.container()(v10, v3, v4);
  v5 = v11;
  v6 = v12;
  sub_10009F5D0((uint64_t)v10, v11);
  v8 = dispatch thunk of BinaryDecodingContaining.decode(length:)(60, v5, v6);
  if (!v1)
    __asm { BR              X10 }
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v10);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  return v8;
}

uint64_t sub_100A02748@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  int EnumCaseMultiPayload;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  char *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  int *v20;
  char *v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v4 = type metadata accessor for AirPodsLostModeContent.LostModeContent(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a1, v4);
  v6 = *a1;
  v7 = a1[1];
  if (EnumCaseMultiPayload == 1)
  {
    v8 = (int *)sub_10001A9A8(&qword_101103680);
    v9 = (char *)a1 + v8[12];
    v10 = (uint64_t *)((char *)a1 + v8[16]);
    v11 = *v10;
    v12 = v10[1];
    v13 = (uint64_t *)((char *)a1 + v8[20]);
    v14 = *v13;
    v15 = v13[1];
    v16 = (int *)type metadata accessor for AirPodsLostModeContent.Device(0);
    v17 = a2 + v16[7];
    v18 = type metadata accessor for UUID(0);
    result = (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v17, v9, v18);
    *(_OWORD *)a2 = xmmword_100E22B20;
    *(_OWORD *)(a2 + 16) = xmmword_100E22B20;
  }
  else
  {
    v30 = a1[3];
    v31 = a1[2];
    v28 = a1[5];
    v29 = a1[4];
    v20 = (int *)sub_10001A9A8(&qword_101103690);
    v21 = (char *)a1 + v20[20];
    v22 = (uint64_t *)((char *)a1 + v20[24]);
    v11 = *v22;
    v12 = v22[1];
    v23 = (uint64_t *)((char *)a1 + v20[28]);
    v14 = *v23;
    v15 = v23[1];
    v16 = (int *)type metadata accessor for AirPodsLostModeContent.Device(0);
    v24 = a2 + v16[7];
    v25 = type metadata accessor for UUID(0);
    result = (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v25 - 8) + 32))(v24, v21, v25);
    *(_QWORD *)a2 = v6;
    *(_QWORD *)(a2 + 8) = v7;
    v7 = v28;
    v6 = v29;
    *(_QWORD *)(a2 + 16) = v31;
    *(_QWORD *)(a2 + 24) = v30;
  }
  *(_QWORD *)(a2 + 32) = v6;
  *(_QWORD *)(a2 + 40) = v7;
  v26 = (_QWORD *)(a2 + v16[8]);
  *v26 = v11;
  v26[1] = v12;
  v27 = (_QWORD *)(a2 + v16[9]);
  *v27 = v14;
  v27[1] = v15;
  return result;
}

uint64_t sub_100A028C8(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[2];
  char v22;

  v20 = a4;
  v8 = sub_10001A9A8(&qword_10110FDF8);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v13 = a1[4];
  sub_10001AA44(a1, v12);
  v14 = sub_100A04C18();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for AirPodsLostModeRequest.CodingKeys, &type metadata for AirPodsLostModeRequest.CodingKeys, v14, v12, v13);
  v21[0] = a2;
  v22 = 0;
  v15 = sub_10001A9A8(&qword_101103CB8);
  v16 = sub_10069CCD8((unint64_t *)&qword_101103CD0, (uint64_t)&protocol witness table for String, (const char *)&protocol conformance descriptor for <> [A : B]);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v21, &v22, v8, v15, v16);
  if (!v4)
  {
    v21[0] = a3;
    v21[1] = v20;
    v22 = 1;
    v17 = sub_100036A58();
    KeyedEncodingContainer.encode<A>(_:forKey:)(v21, &v22, v8, &type metadata for Data, v17);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t sub_100A02A3C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100A04C18();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100A02A64(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100A04C18();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100A02A8C@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  result = sub_100A04A1C(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
  }
  return result;
}

uint64_t sub_100A02AB8(_QWORD *a1)
{
  uint64_t *v1;

  return sub_100A028C8(a1, *v1, v1[1], v1[2]);
}

uint64_t sub_100A02AD4(_QWORD *a1)
{
  __int128 *v1;
  uint64_t v2;
  __int128 *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  char v25;
  __int128 v26;

  v3 = v1;
  v5 = sub_10001A9A8(&qword_10110FE00);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  v11 = sub_100A04C5C();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for AirPodsLostModeContent.Device.CodingKeys, &type metadata for AirPodsLostModeContent.Device.CodingKeys, v11, v9, v10);
  v26 = *v3;
  v25 = 0;
  v12 = sub_100036A58();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v26, &v25, v5, &type metadata for Data, v12);
  if (!v2)
  {
    v26 = v3[1];
    v25 = 1;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v26, &v25, v5, &type metadata for Data, v12);
    v26 = v3[2];
    v25 = 2;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v26, &v25, v5, &type metadata for Data, v12);
    v13 = (int *)type metadata accessor for AirPodsLostModeContent.Device(0);
    v14 = (char *)v3 + v13[7];
    LOBYTE(v26) = 3;
    v15 = type metadata accessor for UUID(0);
    v16 = sub_100006204(&qword_1010EDAC0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v14, &v26, v5, v15, v16);
    v17 = (uint64_t *)((char *)v3 + v13[8]);
    v18 = *v17;
    v19 = v17[1];
    LOBYTE(v26) = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v18, v19, &v26, v5);
    v20 = (uint64_t *)((char *)v3 + v13[9]);
    v21 = *v20;
    v22 = v20[1];
    LOBYTE(v26) = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v21, v22, &v26, v5);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100A02D20(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v24;
  char v25;
  uint64_t v26;
  char v27;
  char v28;
  char v29;
  char v30;
  char v31;

  v3 = v1;
  v5 = sub_10001A9A8(&qword_10110FDC0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  v11 = sub_100A0495C();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for AirPodsLostModeContent.CodingKeys, &type metadata for AirPodsLostModeContent.CodingKeys, v11, v9, v10);
  v12 = *v3;
  v13 = v3[1];
  v31 = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v12, v13, &v31, v5);
  if (!v2)
  {
    v14 = v3[2];
    v15 = v3[3];
    v30 = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v14, v15, &v30, v5);
    v16 = v3[4];
    v17 = v3[5];
    v29 = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v16, v17, &v29, v5);
    v18 = v3[6];
    v19 = v3[7];
    v28 = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v18, v19, &v28, v5);
    v20 = *((unsigned __int8 *)v3 + 64);
    v27 = 4;
    KeyedEncodingContainer.encode(_:forKey:)(v20, &v27, v5);
    v26 = v3[9];
    v25 = 5;
    v21 = sub_10001A9A8(&qword_10110FDD0);
    v22 = sub_100A049A0();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v26, &v25, v5, v21, v22);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100A02EF8()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100A02F20 + 4 * byte_100E589D0[*v0]))(1684628325, 0xE400000000000000);
}

uint64_t sub_100A02F20()
{
  return 0x644970696863;
}

uint64_t sub_100A02F34()
{
  return 0x754E6C6169726573;
}

uint64_t sub_100A02F54()
{
  return 0x6449616E6D66;
}

uint64_t sub_100A02F68()
{
  return 0x49746375646F7270;
}

uint64_t sub_100A02F84()
{
  return 0x6449726F646E6576;
}

uint64_t sub_100A02F9C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100A04C5C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100A02FC4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100A04C5C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100A02FEC(_QWORD *a1)
{
  return sub_100A02AD4(a1);
}

uint64_t sub_100A03000()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100A0302C + 4 * byte_100E589D6[*v0]))(0x656C746974, 0xE500000000000000);
}

uint64_t sub_100A0302C()
{
  return 0x6567617373656DLL;
}

uint64_t sub_100A03044()
{
  return 0x6C69616D65;
}

uint64_t sub_100A03054()
{
  return 0x6D754E72656E776FLL;
}

uint64_t sub_100A03074()
{
  return 0x65646F4D74736F6CLL;
}

uint64_t sub_100A03098()
{
  return 0x73656369766564;
}

uint64_t sub_100A030B0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100A050D4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100A030D4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100A0495C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100A030FC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100A0495C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100A03124(_QWORD *a1)
{
  return sub_100A02D20(a1);
}

void sub_100A03138(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  unint64_t v6;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  id v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  __n128 v35;
  __int128 v36;
  __int128 v37;
  unint64_t v38;
  _OWORD v40[5];

  v2 = type metadata accessor for Date(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1006B8DC4((uint64_t)_swiftEmptyArrayStorage);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v6);
  *(_QWORD *)&v40[0] = v6;
  sub_100109D28(1702195828, 0xE400000000000000, 0xD00000000000001BLL, 0x8000000100ECA2A0, isUniquelyReferenced_nonNull_native);
  v8 = *(_QWORD *)&v40[0];
  swift_bridgeObjectRelease();
  v9 = objc_msgSend((id)objc_opt_self(AKDevice), "currentDevice");
  if (v9)
  {
    v10 = v9;
    v11 = objc_msgSend(v9, "serverFriendlyDescription");

    if (v11)
    {
      v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
      v14 = v13;

      v15 = swift_isUniquelyReferenced_nonNull_native(v8);
      *(_QWORD *)&v40[0] = v8;
      sub_100109D28(v12, v14, 0xD000000000000011, 0x8000000100ECA2C0, v15);
      v16 = *(_QWORD *)&v40[0];
      v17 = swift_bridgeObjectRelease();
      v18 = Date.init()(v17);
      v19 = Date.epoch.getter(v18);
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      *(_QWORD *)&v40[0] = v19;
      v20 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int64, &protocol witness table for Int64);
      v22 = v21;
      v23 = swift_isUniquelyReferenced_nonNull_native(v16);
      *(_QWORD *)&v40[0] = v16;
      sub_100109D28(v20, v22, 0xD000000000000015, 0x8000000100ECA2E0, v23);
      v24 = *(_QWORD *)&v40[0];
      swift_bridgeObjectRelease();
      *(_QWORD *)&v40[0] = 1;
      v25 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
      v27 = v26;
      v28 = swift_isUniquelyReferenced_nonNull_native(v24);
      *(_QWORD *)&v40[0] = v24;
      sub_100109D28(v25, v27, 0xD000000000000013, 0x8000000100ECA300, v28);
      v29 = *(_QWORD *)&v40[0];
      swift_bridgeObjectRelease();
      v30 = sub_10069BB84();
      v32 = v31;
      v33 = swift_isUniquelyReferenced_nonNull_native(v29);
      *(_QWORD *)&v40[0] = v29;
      sub_100109D28((uint64_t)v30, v32, 0x6567412D72657355, 0xEA0000000000746ELL, v33);
      swift_bridgeObjectRelease();
      v34 = type metadata accessor for JSONEncoder(0);
      swift_allocObject(v34, *(unsigned int *)(v34 + 48), *(unsigned __int16 *)(v34 + 52));
      JSONEncoder.init()(v35);
      v36 = *(_OWORD *)(a1 + 48);
      v40[2] = *(_OWORD *)(a1 + 32);
      v40[3] = v36;
      v40[4] = *(_OWORD *)(a1 + 64);
      v37 = *(_OWORD *)(a1 + 16);
      v40[0] = *(_OWORD *)a1;
      v40[1] = v37;
      v38 = sub_100A03554();
      dispatch thunk of JSONEncoder.encode<A>(_:)(v40, &type metadata for AirPodsLostModeContent, v38);
      swift_release();
      sub_100A03598((_QWORD *)a1);
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

unint64_t sub_100A03554()
{
  unint64_t result;

  result = qword_10110FC70;
  if (!qword_10110FC70)
  {
    result = swift_getWitnessTable(a9_18, &type metadata for AirPodsLostModeContent);
    atomic_store(result, (unint64_t *)&qword_10110FC70);
  }
  return result;
}

_QWORD *sub_100A03598(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = a1[1];
  v3 = a1[3];
  v4 = a1[5];
  v5 = a1[7];
  swift_bridgeObjectRelease(a1[9]);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v5);
  return a1;
}

uint64_t type metadata accessor for AirPodsLostModeContent.LostModeContent(uint64_t a1)
{
  return sub_10001B630(a1, qword_10110FD88, (uint64_t)&nominal type descriptor for AirPodsLostModeContent.LostModeContent);
}

uint64_t type metadata accessor for AirPodsLostModeContent.Device(uint64_t a1)
{
  return sub_10001B630(a1, qword_10110FCD0, (uint64_t)&nominal type descriptor for AirPodsLostModeContent.Device);
}

ValueMetadata *type metadata accessor for AirPodsLostModeRequest()
{
  return &type metadata for AirPodsLostModeRequest;
}

uint64_t getEnumTagSinglePayload for AirPodsLostModeContent(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 80))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 72);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AirPodsLostModeContent(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 80) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 72) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 80) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AirPodsLostModeContent()
{
  return &type metadata for AirPodsLostModeContent;
}

_OWORD *sub_100A036E4(_OWORD *a1, uint64_t *a2, int *a3)
{
  _OWORD *v4;
  int v5;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v8 = *a2;
    *(_QWORD *)v4 = *a2;
    v4 = (_OWORD *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = a2[1];
    if (v7 >> 60 == 15)
    {
      *a1 = *(_OWORD *)a2;
    }
    else
    {
      v9 = *a2;
      sub_10001BBBC(*a2, a2[1]);
      *(_QWORD *)v4 = v9;
      *((_QWORD *)v4 + 1) = v7;
    }
    v10 = a2 + 2;
    v11 = a2[3];
    if (v11 >> 60 == 15)
    {
      v4[1] = *(_OWORD *)v10;
    }
    else
    {
      v12 = *v10;
      sub_10001BBBC(*v10, a2[3]);
      *((_QWORD *)v4 + 2) = v12;
      *((_QWORD *)v4 + 3) = v11;
    }
    v13 = a2[4];
    v14 = a2[5];
    sub_10001BBBC(v13, v14);
    *((_QWORD *)v4 + 4) = v13;
    *((_QWORD *)v4 + 5) = v14;
    v15 = a3[7];
    v16 = (char *)v4 + v15;
    v17 = (char *)a2 + v15;
    v18 = type metadata accessor for UUID(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
    v19 = a3[8];
    v20 = a3[9];
    v21 = (_QWORD *)((char *)v4 + v19);
    v22 = (uint64_t *)((char *)a2 + v19);
    v23 = v22[1];
    *v21 = *v22;
    v21[1] = v23;
    v24 = (_QWORD *)((char *)v4 + v20);
    v25 = (uint64_t *)((char *)a2 + v20);
    v26 = v25[1];
    *v24 = *v25;
    v24[1] = v26;
    swift_bridgeObjectRetain(v23);
    swift_bridgeObjectRetain(v26);
  }
  return v4;
}

uint64_t sub_100A03820(uint64_t *a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  char *v6;
  uint64_t v7;

  v4 = a1[1];
  if (v4 >> 60 != 15)
    sub_10001BC14(*a1, v4);
  v5 = a1[3];
  if (v5 >> 60 != 15)
    sub_10001BC14(a1[2], v5);
  sub_10001BC14(a1[4], a1[5]);
  v6 = (char *)a1 + *(int *)(a2 + 28);
  v7 = type metadata accessor for UUID(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_100A038C0(uint64_t a1, uint64_t *a2, int *a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;

  v6 = a2[1];
  if (v6 >> 60 == 15)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    v7 = *a2;
    sub_10001BBBC(*a2, a2[1]);
    *(_QWORD *)a1 = v7;
    *(_QWORD *)(a1 + 8) = v6;
  }
  v8 = a2 + 2;
  v9 = a2[3];
  if (v9 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 16) = *(_OWORD *)v8;
  }
  else
  {
    v10 = *v8;
    sub_10001BBBC(*v8, a2[3]);
    *(_QWORD *)(a1 + 16) = v10;
    *(_QWORD *)(a1 + 24) = v9;
  }
  v11 = a2[4];
  v12 = a2[5];
  sub_10001BBBC(v11, v12);
  *(_QWORD *)(a1 + 32) = v11;
  *(_QWORD *)(a1 + 40) = v12;
  v13 = a3[7];
  v14 = a1 + v13;
  v15 = (char *)a2 + v13;
  v16 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v14, v15, v16);
  v17 = a3[8];
  v18 = a3[9];
  v19 = (_QWORD *)(a1 + v17);
  v20 = (uint64_t *)((char *)a2 + v17);
  v21 = v20[1];
  *v19 = *v20;
  v19[1] = v21;
  v22 = (_QWORD *)(a1 + v18);
  v23 = (uint64_t *)((char *)a2 + v18);
  v24 = v23[1];
  *v22 = *v23;
  v22[1] = v24;
  swift_bridgeObjectRetain(v21);
  swift_bridgeObjectRetain(v24);
  return a1;
}

uint64_t *sub_100A039D0(uint64_t *a1, uint64_t *a2, int *a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;

  v6 = a2[1];
  if ((unint64_t)a1[1] >> 60 == 15)
  {
    if (v6 >> 60 != 15)
    {
      v7 = *a2;
      sub_10001BBBC(*a2, a2[1]);
      *a1 = v7;
      a1[1] = v6;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v6 >> 60 == 15)
  {
    sub_1000DC964((uint64_t)a1);
LABEL_6:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_8;
  }
  v8 = *a2;
  sub_10001BBBC(*a2, a2[1]);
  v9 = *a1;
  v10 = a1[1];
  *a1 = v8;
  a1[1] = v6;
  sub_10001BC14(v9, v10);
LABEL_8:
  v11 = a2 + 2;
  v12 = a2[3];
  if ((unint64_t)a1[3] >> 60 != 15)
  {
    if (v12 >> 60 != 15)
    {
      v14 = *v11;
      sub_10001BBBC(*v11, a2[3]);
      v15 = a1[2];
      v16 = a1[3];
      a1[2] = v14;
      a1[3] = v12;
      sub_10001BC14(v15, v16);
      goto LABEL_15;
    }
    sub_1000DC964((uint64_t)(a1 + 2));
    goto LABEL_13;
  }
  if (v12 >> 60 == 15)
  {
LABEL_13:
    *((_OWORD *)a1 + 1) = *(_OWORD *)v11;
    goto LABEL_15;
  }
  v13 = *v11;
  sub_10001BBBC(*v11, a2[3]);
  a1[2] = v13;
  a1[3] = v12;
LABEL_15:
  v17 = a2[4];
  v18 = a2[5];
  sub_10001BBBC(v17, v18);
  v19 = a1[4];
  v20 = a1[5];
  a1[4] = v17;
  a1[5] = v18;
  sub_10001BC14(v19, v20);
  v21 = a3[7];
  v22 = (char *)a1 + v21;
  v23 = (char *)a2 + v21;
  v24 = type metadata accessor for UUID(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v24 - 8) + 24))(v22, v23, v24);
  v25 = a3[8];
  v26 = (uint64_t *)((char *)a1 + v25);
  v27 = (uint64_t *)((char *)a2 + v25);
  *v26 = *v27;
  v28 = v27[1];
  v26[1] = v28;
  swift_bridgeObjectRetain(v28);
  swift_bridgeObjectRelease();
  v29 = a3[9];
  v30 = (uint64_t *)((char *)a1 + v29);
  v31 = (uint64_t *)((char *)a2 + v29);
  *v30 = *v31;
  v32 = v31[1];
  v30[1] = v32;
  swift_bridgeObjectRetain(v32);
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *sub_100A03B98(_OWORD *a1, _OWORD *a2, int *a3)
{
  __int128 v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  a1[2] = a2[2];
  v7 = a3[7];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for UUID(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = a3[9];
  *(_OWORD *)((char *)a1 + a3[8]) = *(_OWORD *)((char *)a2 + a3[8]);
  *(_OWORD *)((char *)a1 + v11) = *(_OWORD *)((char *)a2 + v11);
  return a1;
}

uint64_t sub_100A03C20(uint64_t a1, uint64_t a2, int *a3)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;

  v6 = *(_QWORD *)(a1 + 8);
  if (v6 >> 60 == 15)
    goto LABEL_4;
  v7 = *(_QWORD *)(a2 + 8);
  if (v7 >> 60 == 15)
  {
    sub_1000DC964(a1);
LABEL_4:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_6;
  }
  v8 = *(_QWORD *)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v7;
  sub_10001BC14(v8, v6);
LABEL_6:
  v9 = (_QWORD *)(a2 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  if (v10 >> 60 != 15)
  {
    v11 = *(_QWORD *)(a2 + 24);
    if (v11 >> 60 != 15)
    {
      v12 = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = *v9;
      *(_QWORD *)(a1 + 24) = v11;
      sub_10001BC14(v12, v10);
      goto LABEL_11;
    }
    sub_1000DC964(a1 + 16);
  }
  *(_OWORD *)(a1 + 16) = *(_OWORD *)v9;
LABEL_11:
  v13 = *(_QWORD *)(a1 + 32);
  v14 = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  sub_10001BC14(v13, v14);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 40))(v16, v17, v18);
  v19 = a3[8];
  v20 = (_QWORD *)(a1 + v19);
  v21 = (uint64_t *)(a2 + v19);
  v23 = *v21;
  v22 = v21[1];
  *v20 = v23;
  v20[1] = v22;
  swift_bridgeObjectRelease();
  v24 = a3[9];
  v25 = (_QWORD *)(a1 + v24);
  v26 = (uint64_t *)(a2 + v24);
  v28 = *v26;
  v27 = v26[1];
  *v25 = v28;
  v25[1] = v27;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100A03D5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100A03D68);
}

uint64_t sub_100A03D68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  int v10;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + *(int *)(a3 + 28), a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 32) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  v10 = v9 - 1;
  if (v10 < 0)
    v10 = -1;
  return (v10 + 1);
}

uint64_t sub_100A03DF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100A03E04);
}

uint64_t sub_100A03E04(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + *(int *)(a4 + 28), a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 32) + 8) = a2;
  return result;
}

uint64_t sub_100A03E84(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[6];

  v4[0] = &unk_100E58A30;
  v4[1] = &unk_100E58A30;
  v4[2] = &unk_100E58A48;
  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v4[3] = *(_QWORD *)(result - 8) + 64;
    v4[4] = &unk_100E58A60;
    v4[5] = &unk_100E58A60;
    swift_initStructMetadata(a1, 256, 6, v4, a1 + 16);
    return 0;
  }
  return result;
}

unint64_t sub_100A03F10(unint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  unint64_t v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  int *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v25 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = v25 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
    {
      v7 = *a2;
      v8 = a2[1];
      sub_10001BBBC(*a2, v8);
      *(_QWORD *)a1 = v7;
      *(_QWORD *)(a1 + 8) = v8;
      v9 = (int *)sub_10001A9A8(&qword_101103680);
      v10 = v9[12];
      v11 = a1 + v10;
      v12 = (char *)a2 + v10;
      v13 = type metadata accessor for UUID(0);
      (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v11, v12, v13);
      v14 = v9[16];
      v15 = (_QWORD *)(a1 + v14);
      v16 = (uint64_t *)((char *)a2 + v14);
      v17 = v16[1];
      *v15 = *v16;
      v15[1] = v17;
      v18 = v9[20];
      v19 = (_QWORD *)(a1 + v18);
      v20 = (uint64_t *)((char *)a2 + v18);
      v21 = v20[1];
      *v19 = *v20;
      v19[1] = v21;
      swift_bridgeObjectRetain(v17);
      swift_bridgeObjectRetain(v21);
      v22 = a1;
      v23 = a3;
      v24 = 1;
    }
    else
    {
      v26 = a2[1];
      if (v26 >> 60 == 15)
      {
        *(_OWORD *)a1 = *(_OWORD *)a2;
      }
      else
      {
        v27 = *a2;
        sub_10001BBBC(*a2, a2[1]);
        *(_QWORD *)a1 = v27;
        *(_QWORD *)(a1 + 8) = v26;
      }
      v28 = a2 + 2;
      v29 = a2[3];
      if (v29 >> 60 == 15)
      {
        *(_OWORD *)(a1 + 16) = *(_OWORD *)v28;
      }
      else
      {
        v30 = *v28;
        sub_10001BBBC(*v28, a2[3]);
        *(_QWORD *)(a1 + 16) = v30;
        *(_QWORD *)(a1 + 24) = v29;
      }
      v31 = a2[4];
      v32 = a2[5];
      sub_10001BBBC(v31, v32);
      *(_QWORD *)(a1 + 32) = v31;
      *(_QWORD *)(a1 + 40) = v32;
      v33 = (int *)sub_10001A9A8(&qword_101103690);
      v34 = v33[20];
      v35 = a1 + v34;
      v36 = (char *)a2 + v34;
      v37 = type metadata accessor for UUID(0);
      (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v37 - 8) + 16))(v35, v36, v37);
      v38 = v33[24];
      v39 = (_QWORD *)(a1 + v38);
      v40 = (uint64_t *)((char *)a2 + v38);
      v41 = v40[1];
      *v39 = *v40;
      v39[1] = v41;
      v42 = v33[28];
      v43 = (_QWORD *)(a1 + v42);
      v44 = (uint64_t *)((char *)a2 + v42);
      v45 = v44[1];
      *v43 = *v44;
      v43[1] = v45;
      swift_bridgeObjectRetain(v41);
      swift_bridgeObjectRetain(v45);
      v22 = a1;
      v23 = a3;
      v24 = 0;
    }
    swift_storeEnumTagMultiPayload(v22, v23, v24);
  }
  return a1;
}

uint64_t sub_100A04118(uint64_t *a1, uint64_t a2)
{
  char *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;

  if (swift_getEnumCaseMultiPayload(a1, a2) == 1)
  {
    sub_10001BC14(*a1, a1[1]);
    v3 = (char *)a1 + *(int *)(sub_10001A9A8(&qword_101103680) + 48);
    v4 = type metadata accessor for UUID(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
    swift_bridgeObjectRelease();
  }
  else
  {
    v5 = a1[1];
    if (v5 >> 60 != 15)
      sub_10001BC14(*a1, v5);
    v6 = a1[3];
    if (v6 >> 60 != 15)
      sub_10001BC14(a1[2], v6);
    sub_10001BC14(a1[4], a1[5]);
    v7 = (char *)a1 + *(int *)(sub_10001A9A8(&qword_101103690) + 80);
    v8 = type metadata accessor for UUID(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
    swift_bridgeObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_100A04228(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  int *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;

  if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
  {
    v6 = *a2;
    v7 = a2[1];
    sub_10001BBBC(*a2, v7);
    *(_QWORD *)a1 = v6;
    *(_QWORD *)(a1 + 8) = v7;
    v8 = (int *)sub_10001A9A8(&qword_101103680);
    v9 = v8[12];
    v10 = a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
    v13 = v8[16];
    v14 = (_QWORD *)(a1 + v13);
    v15 = (uint64_t *)((char *)a2 + v13);
    v16 = v15[1];
    *v14 = *v15;
    v14[1] = v16;
    v17 = v8[20];
    v18 = (_QWORD *)(a1 + v17);
    v19 = (uint64_t *)((char *)a2 + v17);
    v20 = v19[1];
    *v18 = *v19;
    v18[1] = v20;
    v21 = 1;
  }
  else
  {
    v22 = a2[1];
    if (v22 >> 60 == 15)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
    }
    else
    {
      v23 = *a2;
      sub_10001BBBC(*a2, a2[1]);
      *(_QWORD *)a1 = v23;
      *(_QWORD *)(a1 + 8) = v22;
    }
    v24 = a2 + 2;
    v25 = a2[3];
    if (v25 >> 60 == 15)
    {
      *(_OWORD *)(a1 + 16) = *(_OWORD *)v24;
    }
    else
    {
      v26 = *v24;
      sub_10001BBBC(*v24, a2[3]);
      *(_QWORD *)(a1 + 16) = v26;
      *(_QWORD *)(a1 + 24) = v25;
    }
    v27 = a2[4];
    v28 = a2[5];
    sub_10001BBBC(v27, v28);
    *(_QWORD *)(a1 + 32) = v27;
    *(_QWORD *)(a1 + 40) = v28;
    v29 = (int *)sub_10001A9A8(&qword_101103690);
    v30 = v29[20];
    v31 = a1 + v30;
    v32 = (char *)a2 + v30;
    v33 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v33 - 8) + 16))(v31, v32, v33);
    v21 = 0;
    v34 = v29[24];
    v35 = (_QWORD *)(a1 + v34);
    v36 = (uint64_t *)((char *)a2 + v34);
    v16 = v36[1];
    *v35 = *v36;
    v35[1] = v16;
    v37 = v29[28];
    v38 = (_QWORD *)(a1 + v37);
    v39 = (uint64_t *)((char *)a2 + v37);
    v20 = v39[1];
    *v38 = *v39;
    v38[1] = v20;
  }
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRetain(v20);
  swift_storeEnumTagMultiPayload(a1, a3, v21);
  return a1;
}

uint64_t sub_100A043F4(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  int *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;

  if ((uint64_t *)a1 != a2)
  {
    sub_100A045F0(a1);
    if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
    {
      v6 = *a2;
      v7 = a2[1];
      sub_10001BBBC(*a2, v7);
      *(_QWORD *)a1 = v6;
      *(_QWORD *)(a1 + 8) = v7;
      v8 = (int *)sub_10001A9A8(&qword_101103680);
      v9 = v8[12];
      v10 = a1 + v9;
      v11 = (char *)a2 + v9;
      v12 = type metadata accessor for UUID(0);
      (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
      v13 = v8[16];
      v14 = (_QWORD *)(a1 + v13);
      v15 = (uint64_t *)((char *)a2 + v13);
      *v14 = *v15;
      v16 = v15[1];
      v14[1] = v16;
      v17 = v8[20];
      v18 = (_QWORD *)(a1 + v17);
      v19 = (uint64_t *)((char *)a2 + v17);
      *v18 = *v19;
      v20 = v19[1];
      v18[1] = v20;
      v21 = 1;
    }
    else
    {
      v22 = a2[1];
      if (v22 >> 60 == 15)
      {
        *(_OWORD *)a1 = *(_OWORD *)a2;
      }
      else
      {
        v23 = *a2;
        sub_10001BBBC(*a2, a2[1]);
        *(_QWORD *)a1 = v23;
        *(_QWORD *)(a1 + 8) = v22;
      }
      v24 = a2 + 2;
      v25 = a2[3];
      if (v25 >> 60 == 15)
      {
        *(_OWORD *)(a1 + 16) = *(_OWORD *)v24;
      }
      else
      {
        v26 = *v24;
        sub_10001BBBC(*v24, a2[3]);
        *(_QWORD *)(a1 + 16) = v26;
        *(_QWORD *)(a1 + 24) = v25;
      }
      v27 = a2[4];
      v28 = a2[5];
      sub_10001BBBC(v27, v28);
      *(_QWORD *)(a1 + 32) = v27;
      *(_QWORD *)(a1 + 40) = v28;
      v29 = (int *)sub_10001A9A8(&qword_101103690);
      v30 = v29[20];
      v31 = a1 + v30;
      v32 = (char *)a2 + v30;
      v33 = type metadata accessor for UUID(0);
      (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v33 - 8) + 16))(v31, v32, v33);
      v21 = 0;
      v34 = v29[24];
      v35 = (_QWORD *)(a1 + v34);
      v36 = (uint64_t *)((char *)a2 + v34);
      *v35 = *v36;
      v16 = v36[1];
      v35[1] = v16;
      v37 = v29[28];
      v38 = (_QWORD *)(a1 + v37);
      v39 = (uint64_t *)((char *)a2 + v37);
      *v38 = *v39;
      v20 = v39[1];
      v38[1] = v20;
    }
    swift_bridgeObjectRetain(v16);
    swift_bridgeObjectRetain(v20);
    swift_storeEnumTagMultiPayload(a1, a3, v21);
  }
  return a1;
}

uint64_t sub_100A045F0(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for AirPodsLostModeContent.LostModeContent(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

_OWORD *sub_100A0462C(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  int *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  _OWORD *v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  int *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  *a1 = *a2;
  if (EnumCaseMultiPayload == 1)
  {
    v7 = (int *)sub_10001A9A8(&qword_101103680);
    v8 = v7[12];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for UUID(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
    *(_OWORD *)((char *)a1 + v7[16]) = *(_OWORD *)((char *)a2 + v7[16]);
    *(_OWORD *)((char *)a1 + v7[20]) = *(_OWORD *)((char *)a2 + v7[20]);
    v12 = a1;
    v13 = a3;
    v14 = 1;
  }
  else
  {
    v15 = a2[2];
    a1[1] = a2[1];
    a1[2] = v15;
    v16 = (int *)sub_10001A9A8(&qword_101103690);
    v17 = v16[20];
    v18 = (char *)a1 + v17;
    v19 = (char *)a2 + v17;
    v20 = type metadata accessor for UUID(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v18, v19, v20);
    *(_OWORD *)((char *)a1 + v16[24]) = *(_OWORD *)((char *)a2 + v16[24]);
    *(_OWORD *)((char *)a1 + v16[28]) = *(_OWORD *)((char *)a2 + v16[28]);
    v12 = a1;
    v13 = a3;
    v14 = 0;
  }
  swift_storeEnumTagMultiPayload(v12, v13, v14);
  return a1;
}

_OWORD *sub_100A04750(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  int *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  _OWORD *v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  int *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;

  if (a1 != a2)
  {
    sub_100A045F0((uint64_t)a1);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    *a1 = *a2;
    if (EnumCaseMultiPayload == 1)
    {
      v7 = (int *)sub_10001A9A8(&qword_101103680);
      v8 = v7[12];
      v9 = (char *)a1 + v8;
      v10 = (char *)a2 + v8;
      v11 = type metadata accessor for UUID(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
      *(_OWORD *)((char *)a1 + v7[16]) = *(_OWORD *)((char *)a2 + v7[16]);
      *(_OWORD *)((char *)a1 + v7[20]) = *(_OWORD *)((char *)a2 + v7[20]);
      v12 = a1;
      v13 = a3;
      v14 = 1;
    }
    else
    {
      v15 = a2[2];
      a1[1] = a2[1];
      a1[2] = v15;
      v16 = (int *)sub_10001A9A8(&qword_101103690);
      v17 = v16[20];
      v18 = (char *)a1 + v17;
      v19 = (char *)a2 + v17;
      v20 = type metadata accessor for UUID(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 32))(v18, v19, v20);
      *(_OWORD *)((char *)a1 + v16[24]) = *(_OWORD *)((char *)a2 + v16[24]);
      *(_OWORD *)((char *)a1 + v16[28]) = *(_OWORD *)((char *)a2 + v16[28]);
      v12 = a1;
      v13 = a3;
      v14 = 0;
    }
    swift_storeEnumTagMultiPayload(v12, v13, v14);
  }
  return a1;
}

uint64_t sub_100A04884(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  void *v4;
  _BYTE v5[32];
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  _BYTE v12[32];
  _QWORD v13[2];

  v6 = &unk_100E58A30;
  v7 = &unk_100E58A30;
  v8 = &unk_100E58A48;
  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v9 = (void *)(*(_QWORD *)(result - 8) + 64);
    v4 = v9;
    v10 = &unk_100E58A60;
    v11 = &unk_100E58A60;
    swift_getTupleTypeLayout(v12, 0, 6, &v6);
    v13[0] = v12;
    v6 = &unk_100E58A48;
    v7 = v4;
    v8 = &unk_100E58A88;
    v9 = &unk_100E58A88;
    swift_getTupleTypeLayout(v5, 0, 4, &v6);
    v13[1] = v5;
    swift_initEnumMetadataMultiPayload(a1, 256, 2, v13);
    return 0;
  }
  return result;
}

unint64_t sub_100A0495C()
{
  unint64_t result;

  result = qword_10110FDC8;
  if (!qword_10110FDC8)
  {
    result = swift_getWitnessTable(byte_100E58E6C, &type metadata for AirPodsLostModeContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10110FDC8);
  }
  return result;
}

unint64_t sub_100A049A0()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_10110FDD8;
  if (!qword_10110FDD8)
  {
    v1 = sub_10001F784(&qword_10110FDD0);
    v2 = sub_100006204(&qword_10110FDE0, type metadata accessor for AirPodsLostModeContent.Device, (uint64_t)&unk_100E58AA0);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <A> [A], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_10110FDD8);
  }
  return result;
}

uint64_t sub_100A04A1C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD v17[2];
  char v18;

  v3 = sub_10001A9A8(&qword_10110FDE8);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v17[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  sub_10001AA44(a1, v7);
  v9 = sub_100A04C18();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for AirPodsLostModeRequest.CodingKeys, &type metadata for AirPodsLostModeRequest.CodingKeys, v9, v7, v8);
  if (v1)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  }
  else
  {
    v10 = sub_10001A9A8(&qword_101103CB8);
    v18 = 0;
    v11 = sub_10069CCD8(&qword_101103CC0, (uint64_t)&protocol witness table for String, (const char *)&protocol conformance descriptor for <> [A : B]);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v17, v10, &v18, v3, v10, v11);
    v7 = v17[0];
    v18 = 1;
    v13 = sub_100036994();
    swift_bridgeObjectRetain(v7);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v17, &type metadata for Data, &v18, v3, &type metadata for Data, v13);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    v14 = v17[0];
    v15 = v17[1];
    swift_bridgeObjectRetain(v7);
    sub_10001BBBC(v14, v15);
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
    swift_bridgeObjectRelease();
    sub_10001BC14(v14, v15);
  }
  return v7;
}

unint64_t sub_100A04C18()
{
  unint64_t result;

  result = qword_10110FDF0;
  if (!qword_10110FDF0)
  {
    result = swift_getWitnessTable(byte_100E58E1C, &type metadata for AirPodsLostModeRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10110FDF0);
  }
  return result;
}

unint64_t sub_100A04C5C()
{
  unint64_t result;

  result = qword_10110FE08;
  if (!qword_10110FE08)
  {
    result = swift_getWitnessTable(asc_100E58DCC, &type metadata for AirPodsLostModeContent.Device.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10110FE08);
  }
  return result;
}

ValueMetadata *type metadata accessor for AirPodsLostModeContent.Device.CodingKeys()
{
  return &type metadata for AirPodsLostModeContent.Device.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for AirPodsLostModeRequest.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_100A04D00 + 4 * byte_100E589E1[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100A04D34 + 4 * byte_100E589DC[v4]))();
}

uint64_t sub_100A04D34(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100A04D3C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100A04D44);
  return result;
}

uint64_t sub_100A04D50(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100A04D58);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_100A04D5C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100A04D64(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AirPodsLostModeRequest.CodingKeys()
{
  return &type metadata for AirPodsLostModeRequest.CodingKeys;
}

uint64_t _s12searchpartyd22AirPodsLostModeContentV6DeviceV10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_100A04DCC + 4 * byte_100E589EB[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_100A04E00 + 4 * byte_100E589E6[v4]))();
}

uint64_t sub_100A04E00(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100A04E08(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100A04E10);
  return result;
}

uint64_t sub_100A04E1C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100A04E24);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_100A04E28(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100A04E30(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AirPodsLostModeContent.CodingKeys()
{
  return &type metadata for AirPodsLostModeContent.CodingKeys;
}

unint64_t sub_100A04E50()
{
  unint64_t result;

  result = qword_10110FE10;
  if (!qword_10110FE10)
  {
    result = swift_getWitnessTable("œ$", &type metadata for AirPodsLostModeContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10110FE10);
  }
  return result;
}

unint64_t sub_100A04E98()
{
  unint64_t result;

  result = qword_10110FE18;
  if (!qword_10110FE18)
  {
    result = swift_getWitnessTable(asc_100E58CEC, &type metadata for AirPodsLostModeRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10110FE18);
  }
  return result;
}

unint64_t sub_100A04EE0()
{
  unint64_t result;

  result = qword_10110FE20;
  if (!qword_10110FE20)
  {
    result = swift_getWitnessTable(aU_30, &type metadata for AirPodsLostModeContent.Device.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10110FE20);
  }
  return result;
}

unint64_t sub_100A04F28()
{
  unint64_t result;

  result = qword_10110FE28;
  if (!qword_10110FE28)
  {
    result = swift_getWitnessTable(byte_100E58D14, &type metadata for AirPodsLostModeContent.Device.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10110FE28);
  }
  return result;
}

unint64_t sub_100A04F70()
{
  unint64_t result;

  result = qword_10110FE30;
  if (!qword_10110FE30)
  {
    result = swift_getWitnessTable(byte_100E58D3C, &type metadata for AirPodsLostModeContent.Device.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10110FE30);
  }
  return result;
}

unint64_t sub_100A04FB8()
{
  unint64_t result;

  result = qword_10110FE38;
  if (!qword_10110FE38)
  {
    result = swift_getWitnessTable(aU_31, &type metadata for AirPodsLostModeRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10110FE38);
  }
  return result;
}

unint64_t sub_100A05000()
{
  unint64_t result;

  result = qword_10110FE40;
  if (!qword_10110FE40)
  {
    result = swift_getWitnessTable(asc_100E58C84, &type metadata for AirPodsLostModeRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10110FE40);
  }
  return result;
}

unint64_t sub_100A05048()
{
  unint64_t result;

  result = qword_10110FE48;
  if (!qword_10110FE48)
  {
    result = swift_getWitnessTable(asc_100E58BA4, &type metadata for AirPodsLostModeContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10110FE48);
  }
  return result;
}

unint64_t sub_100A05090()
{
  unint64_t result;

  result = qword_10110FE50;
  if (!qword_10110FE50)
  {
    result = swift_getWitnessTable(byte_100E58BCC, &type metadata for AirPodsLostModeContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10110FE50);
  }
  return result;
}

uint64_t sub_100A050D4(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char v11;

  if (a1 == 0x656C746974 && a2 == 0xE500000000000000)
  {
    v5 = 0xE500000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x656C746974, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6567617373656DLL && a2 == 0xE700000000000000)
  {
    v7 = 0xE700000000000000;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6567617373656DLL, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x6C69616D65 && a2 == 0xE500000000000000)
  {
    v8 = 0xE500000000000000;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6C69616D65, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0x6D754E72656E776FLL && a2 == 0xEB00000000726562)
  {
    v9 = 0xEB00000000726562;
LABEL_26:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6D754E72656E776FLL, 0xEB00000000726562, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_26;
  }
  if (a1 == 0x65646F4D74736F6CLL && a2 == 0xEF64656C62616E45)
  {
    v10 = 0xEF64656C62616E45;
LABEL_32:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x65646F4D74736F6CLL, 0xEF64656C62616E45, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_32;
  }
  if (a1 == 0x73656369766564 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease(0xE700000000000000);
    return 5;
  }
  else
  {
    v11 = _stringCompareWithSmolCheck(_:_:expecting:)(0x73656369766564, 0xE700000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v11 & 1) != 0)
      return 5;
    else
      return 6;
  }
}

double sub_100A05380@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  _OWORD v6[2];
  __int128 v7;

  sub_100A05588(a1, v6);
  if (!v2)
  {
    v5 = v6[1];
    *a2 = v6[0];
    a2[1] = v5;
    result = *(double *)&v7;
    a2[2] = v7;
  }
  return result;
}

uint64_t sub_100A053C0(uint64_t a1, unint64_t a2)
{
  return ((uint64_t (*)(void))((char *)&loc_100A053CC + *((int *)qword_100A054D8 + (a2 >> 62))))();
}

uint64_t sub_100A053DC(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (BYTE6(a2) != 32)
  {
    __break(1u);
    JUMPOUT(0x100A054D0);
  }
  return ((uint64_t (*)(void))((char *)&loc_100A05418 + *((int *)qword_100A054E8 + (a4 >> 62))))();
}

ValueMetadata *type metadata accessor for PencilInitiatePairingCommandPayload()
{
  return &type metadata for PencilInitiatePairingCommandPayload;
}

unint64_t sub_100A05518(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = sub_100A05544();
  result = sub_10015CE48();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_100A05544()
{
  unint64_t result;

  result = qword_10110FE58;
  if (!qword_10110FE58)
  {
    result = swift_getWitnessTable(byte_100E58F0C, &type metadata for PencilInitiatePairingCommandPayload);
    atomic_store(result, (unint64_t *)&qword_10110FE58);
  }
  return result;
}

uint64_t sub_100A05588@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  __int128 v19;
  _QWORD v20[3];
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;

  v5 = a1[3];
  v6 = a1[4];
  sub_10001AA44(a1, v5);
  dispatch thunk of BinaryDecoding.container()(v20, v5, v6);
  v7 = v21;
  v8 = v22;
  sub_10009F5D0((uint64_t)v20, v21);
  v9 = dispatch thunk of BinaryDecodingContaining.decode(length:)(32, v7, v8);
  if (v2)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v20);
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  }
  else
  {
    v11 = v9;
    v12 = v10;
    v13 = v21;
    v14 = v22;
    sub_10009F5D0((uint64_t)v20, v21);
    dispatch thunk of BinaryDecodingContaining.decode(length:)(113, v13, v14);
    v26 = v15;
    v17 = v21;
    v16 = v22;
    sub_10009F5D0((uint64_t)v20, v21);
    dispatch thunk of BinaryDecodingContaining.decode(length:)(32, v17, v16);
    sub_100A053C0(v11, v12);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v20);
    result = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
    v19 = v24;
    *a2 = v23;
    a2[1] = v19;
    a2[2] = v25;
  }
  return result;
}

uint64_t *sub_100A05704(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *a1 = *a2;
    v7 = *(int *)(a3 + 20);
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for DateInterval(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
    v11 = *(int *)(a3 + 24);
    v12 = (uint64_t *)((char *)v4 + v11);
    v13 = (uint64_t *)((char *)a2 + v11);
    v14 = *v13;
    v15 = v13[1];
    sub_10012C644(*v13, v15);
    *v12 = v14;
    v12[1] = v15;
  }
  return v4;
}

uint64_t sub_100A057BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for DateInterval(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  return sub_10012C494(*(_QWORD *)(a1 + *(int *)(a2 + 24)), *(_QWORD *)(a1 + *(int *)(a2 + 24) + 8));
}

_QWORD *sub_100A05814(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for DateInterval(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
  v10 = *(int *)(a3 + 24);
  v11 = (_QWORD *)((char *)a1 + v10);
  v12 = (_QWORD *)((char *)a2 + v10);
  v13 = *v12;
  v14 = v12[1];
  sub_10012C644(*v12, v14);
  *v11 = v13;
  v11[1] = v14;
  return a1;
}

_QWORD *sub_100A058A0(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for DateInterval(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  v10 = *(int *)(a3 + 24);
  v11 = (_QWORD *)((char *)a1 + v10);
  v12 = (_QWORD *)((char *)a2 + v10);
  v13 = *v12;
  v14 = v12[1];
  sub_10012C644(*v12, v14);
  v15 = *v11;
  v16 = v11[1];
  *v11 = v13;
  v11[1] = v14;
  sub_10012C494(v15, v16);
  return a1;
}

_QWORD *sub_100A05934(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for DateInterval(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  v10 = *(int *)(a3 + 24);
  v11 = *(_QWORD *)((char *)a1 + v10);
  v12 = *(_QWORD *)((char *)a1 + v10 + 8);
  *(_OWORD *)((char *)a1 + v10) = *(_OWORD *)((char *)a2 + v10);
  sub_10012C494(v11, v12);
  return a1;
}

uint64_t sub_100A059B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100A059C4);
}

uint64_t sub_100A059C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for DateInterval(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + *(int *)(a3 + 20), a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 24) + 8);
  return ((int)(v9 >> 29) >> 31) & (((int)(v9 >> 60 << 30) >> 31)
                                  - 2 * ((v9 & 0x1000000000000000) != 0)
                                  + 4);
}

uint64_t sub_100A05A54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100A05A60);
}

uint64_t sub_100A05A60(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  _QWORD *v10;

  result = type metadata accessor for DateInterval(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + *(int *)(a4 + 20), a2, a2, result);
  v10 = (_QWORD *)(a1 + *(int *)(a4 + 24));
  *v10 = 0;
  v10[1] = (unint64_t)((((-(int)a2 & 2) != 0) - 2 * (_BYTE)a2) & 3) << 60;
  return result;
}

uint64_t type metadata accessor for FamilyCryptoKeysV1(uint64_t a1)
{
  uint64_t result;

  result = qword_10110FEB8;
  if (!qword_10110FEB8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for FamilyCryptoKeysV1);
  return result;
}

uint64_t sub_100A05B28(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = (char *)&value witness table for Builtin.Int64 + 64;
  result = type metadata accessor for DateInterval(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    v4[2] = &unk_100E58F78;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_100A05BA8(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v19;
  char v20;
  __int128 v21;

  v3 = v1;
  v5 = sub_10001A9A8(&qword_10110FF10);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  v11 = sub_100A061C8();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for FamilyCryptoKeysV1.CodingKeys, &type metadata for FamilyCryptoKeysV1.CodingKeys, v11, v9, v10);
  v12 = *v3;
  LOBYTE(v21) = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v12, &v21, v5);
  if (!v2)
  {
    v13 = type metadata accessor for FamilyCryptoKeysV1(0);
    v14 = (char *)v3 + *(int *)(v13 + 20);
    LOBYTE(v21) = 1;
    v15 = type metadata accessor for DateInterval(0);
    v16 = sub_10069B198(&qword_101103BC8, (const char *)&protocol conformance descriptor for DateInterval);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v14, &v21, v5, v15, v16);
    v21 = *(_OWORD *)((char *)v3 + *(int *)(v13 + 24));
    v20 = 2;
    v17 = sub_100A062D0();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v21, &v20, v5, &type metadata for KeyUnion, v17);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100A05D3C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  __int128 v31;
  char v32;

  v25 = a2;
  v28 = type metadata accessor for DateInterval(0);
  v26 = *(_QWORD *)(v28 - 8);
  __chkstk_darwin(v28);
  v27 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = sub_10001A9A8(&qword_10110FEF8);
  v4 = *(_QWORD *)(v29 - 8);
  __chkstk_darwin(v29);
  v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for FamilyCryptoKeysV1(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = a1[3];
  v11 = a1[4];
  sub_10001AA44(a1, v10);
  v12 = sub_100A061C8();
  v13 = v30;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for FamilyCryptoKeysV1.CodingKeys, &type metadata for FamilyCryptoKeysV1.CodingKeys, v12, v10, v11);
  if (v13)
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  v24 = v7;
  v30 = a1;
  v14 = v4;
  v15 = v27;
  v16 = v28;
  LOBYTE(v31) = 0;
  v17 = v29;
  *(_QWORD *)v9 = KeyedDecodingContainer.decode(_:forKey:)(&v31, v29);
  LOBYTE(v31) = 1;
  v18 = sub_10069B198(&qword_101103BB8, (const char *)&protocol conformance descriptor for DateInterval);
  v19 = v15;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v15, v16, &v31, v17, v16, v18);
  v20 = v24;
  (*(void (**)(char *, _QWORD *, uint64_t))(v26 + 32))(&v9[*(int *)(v24 + 20)], v19, v16);
  v32 = 2;
  v21 = sub_100A0620C();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v31, &type metadata for KeyUnion, &v32, v17, &type metadata for KeyUnion, v21);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v6, v17);
  *(_OWORD *)&v9[*(int *)(v20 + 24)] = v31;
  sub_100A06250((uint64_t)v9, v25);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v30);
  return sub_100A06294((uint64_t)v9);
}

uint64_t sub_100A05FE8(char *a1, char *a2)
{
  return sub_100513E70(*a1, *a2);
}

Swift::Int sub_100A05FF4()
{
  char *v0;
  uint64_t v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3);
  String.hash(into:)(v3, qword_100E59130[v1], 0xE100000000000000);
  swift_bridgeObjectRelease(0xE100000000000000);
  return Hasher._finalize()();
}

uint64_t sub_100A0604C(uint64_t a1)
{
  char *v1;

  String.hash(into:)(a1, qword_100E59130[*v1], 0xE100000000000000);
  return swift_bridgeObjectRelease(0xE100000000000000);
}

Swift::Int sub_100A06078()
{
  char *v0;
  uint64_t v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3);
  String.hash(into:)(v3, qword_100E59130[v1], 0xE100000000000000);
  swift_bridgeObjectRelease(0xE100000000000000);
  return Hasher._finalize()();
}

unint64_t sub_100A060CC@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_100A064B8(*a1);
  *a2 = result;
  return result;
}

void sub_100A060F8(_QWORD *a1@<X8>)
{
  char *v1;

  *a1 = qword_100E59130[*v1];
  a1[1] = 0xE100000000000000;
}

uint64_t sub_100A06114()
{
  char *v0;

  return qword_100E59130[*v0];
}

unint64_t sub_100A0612C@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_100A064B8(a1);
  *a2 = result;
  return result;
}

uint64_t sub_100A06150(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100A061C8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100A06178(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100A061C8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100A061A0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100A05D3C(a1, a2);
}

uint64_t sub_100A061B4(_QWORD *a1)
{
  return sub_100A05BA8(a1);
}

unint64_t sub_100A061C8()
{
  unint64_t result;

  result = qword_10110FF00;
  if (!qword_10110FF00)
  {
    result = swift_getWitnessTable(aU_32, &type metadata for FamilyCryptoKeysV1.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10110FF00);
  }
  return result;
}

unint64_t sub_100A0620C()
{
  unint64_t result;

  result = qword_10110FF08;
  if (!qword_10110FF08)
  {
    result = swift_getWitnessTable("Ic#", &type metadata for KeyUnion);
    atomic_store(result, (unint64_t *)&qword_10110FF08);
  }
  return result;
}

uint64_t sub_100A06250(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for FamilyCryptoKeysV1(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100A06294(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for FamilyCryptoKeysV1(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_100A062D0()
{
  unint64_t result;

  result = qword_10110FF18;
  if (!qword_10110FF18)
  {
    result = swift_getWitnessTable("ac#", &type metadata for KeyUnion);
    atomic_store(result, (unint64_t *)&qword_10110FF18);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for FamilyCryptoKeysV1.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_100A06360 + 4 * byte_100E58F55[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_100A06394 + 4 * byte_100E58F50[v4]))();
}

uint64_t sub_100A06394(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100A0639C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100A063A4);
  return result;
}

uint64_t sub_100A063B0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100A063B8);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_100A063BC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100A063C4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FamilyCryptoKeysV1.CodingKeys()
{
  return &type metadata for FamilyCryptoKeysV1.CodingKeys;
}

unint64_t sub_100A063E4()
{
  unint64_t result;

  result = qword_10110FF20;
  if (!qword_10110FF20)
  {
    result = swift_getWitnessTable(byte_100E590B4, &type metadata for FamilyCryptoKeysV1.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10110FF20);
  }
  return result;
}

unint64_t sub_100A0642C()
{
  unint64_t result;

  result = qword_10110FF28;
  if (!qword_10110FF28)
  {
    result = swift_getWitnessTable(byte_100E58FEC, &type metadata for FamilyCryptoKeysV1.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10110FF28);
  }
  return result;
}

unint64_t sub_100A06474()
{
  unint64_t result;

  result = qword_10110FF30;
  if (!qword_10110FF30)
  {
    result = swift_getWitnessTable("Ց$", &type metadata for FamilyCryptoKeysV1.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10110FF30);
  }
  return result;
}

unint64_t sub_100A064B8(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10104BAA8, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 3)
    return 3;
  else
    return v3;
}

uint64_t sub_100A06500(uid_t a1)
{
  uuid_t uu;

  memset(uu, 0, sizeof(uu));
  mbr_uid_to_uuid(a1, uu);
  return UUID.init(uuid:)(uu[0], uu[1], uu[2], uu[3], uu[4], uu[5], uu[6], uu[7], *(_QWORD *)&uu[8]);
}

uint64_t sub_100A06590(uint64_t a1, uint64_t a2, uint64_t a3)
{
  Swift::Int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t result;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  BOOL v19;
  _QWORD v20[9];

  if (*(_QWORD *)(a3 + 16))
  {
    Hasher.init(_seed:)(v20);
    String.hash(into:)(v20, a1, a2);
    v6 = Hasher._finalize()();
    v7 = -1 << *(_BYTE *)(a3 + 32);
    v8 = v6 & ~v7;
    v9 = a3 + 56;
    if (((*(_QWORD *)(a3 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) != 0)
    {
      v10 = *(_QWORD *)(a3 + 48);
      v11 = (_QWORD *)(v10 + 16 * v8);
      v12 = v11[1];
      v13 = *v11 == a1 && v12 == a2;
      if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v11, v12, a1, a2, 0) & 1) != 0)
        return 1;
      v15 = ~v7;
      v16 = (v8 + 1) & v15;
      if (((*(_QWORD *)(v9 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) != 0)
      {
        while (1)
        {
          v17 = (_QWORD *)(v10 + 16 * v16);
          v18 = v17[1];
          v19 = *v17 == a1 && v18 == a2;
          if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v17, v18, a1, a2, 0) & 1) != 0)
            break;
          result = 0;
          v16 = (v16 + 1) & v15;
          if (((*(_QWORD *)(v9 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) == 0)
            return result;
        }
        return 1;
      }
    }
  }
  return 0;
}

uint64_t sub_100A066C4(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v6;
  _QWORD __s1[9];

  if (*(_QWORD *)(a3 + 16))
  {
    Hasher.init(_seed:)(__s1);
    sub_10001BBBC(a1, a2);
    Data.hash(into:)(__s1, a1, a2);
    sub_10001BC14(a1, a2);
    v6 = Hasher._finalize()() & ~(-1 << *(_BYTE *)(a3 + 32));
    if (((*(_QWORD *)(a3 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
      __asm { BR              X8 }
  }
  return 0;
}

uint64_t sub_100A070EC(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD v8[9];

  if (*(_QWORD *)(a2 + 16))
  {
    Hasher.init(_seed:)(v8);
    v4 = sub_100D79CA8(a1);
    String.hash(into:)(v8, v4, v5);
    swift_bridgeObjectRelease();
    v6 = Hasher._finalize()() & ~(-1 << *(_BYTE *)(a2 + 32));
    if (((*(_QWORD *)(a2 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
      __asm { BR              X9 }
  }
  return 0;
}

BOOL sub_100A07598(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL8 result;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  if (!*(_QWORD *)(a2 + 16))
    return 0;
  v4 = static Hasher._hash(seed:_:)(*(_QWORD *)(a2 + 40), a1);
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = v4 & ~v5;
  v7 = a2 + 56;
  if (((*(_QWORD *)(a2 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
    return 0;
  v8 = *(_QWORD *)(a2 + 48);
  if (*(_QWORD *)(v8 + 8 * v6) == a1)
    return 1;
  v10 = ~v5;
  v11 = (v6 + 1) & v10;
  if (((*(_QWORD *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) == 0)
    return 0;
  do
  {
    v12 = *(_QWORD *)(v8 + 8 * v11);
    result = v12 == a1;
    if (v12 == a1)
      break;
    v11 = (v11 + 1) & v10;
  }
  while (((*(_QWORD *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) != 0);
  return result;
}

uint64_t sub_100A07660(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, unint64_t, uint64_t);
  uint64_t v15;
  char v16;
  uint64_t v18;
  uint64_t v19;

  v4 = type metadata accessor for UUID(0);
  v19 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_QWORD *)(a2 + 16)
    && (v7 = *(_QWORD *)(a2 + 40),
        v8 = sub_100006204(&qword_1010F98B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID), v9 = dispatch thunk of Hashable._rawHashValue(seed:)(v7, v4, v8), v10 = -1 << *(_BYTE *)(a2 + 32), v11 = v9 & ~v10, ((*(_QWORD *)(a2 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) != 0))
  {
    v12 = ~v10;
    v13 = *(_QWORD *)(v19 + 72);
    v14 = *(void (**)(char *, unint64_t, uint64_t))(v19 + 16);
    do
    {
      v14(v6, *(_QWORD *)(a2 + 48) + v13 * v11, v4);
      v15 = sub_100006204(&qword_1010EE520, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v16 = dispatch thunk of static Equatable.== infix(_:_:)(v6, a1, v4, v15);
      (*(void (**)(char *, uint64_t))(v19 + 8))(v6, v4);
      if ((v16 & 1) != 0)
        break;
      v11 = (v11 + 1) & v12;
    }
    while (((*(_QWORD *)(a2 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) != 0);
  }
  else
  {
    v16 = 0;
  }
  return v16 & 1;
}

uint64_t sub_100A077E4(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD v8[9];

  if (*(_QWORD *)(a2 + 16))
  {
    Hasher.init(_seed:)(v8);
    v4 = sub_100DC66D8(a1);
    String.hash(into:)(v8, v4, v5);
    swift_bridgeObjectRelease();
    v6 = Hasher._finalize()() & ~(-1 << *(_BYTE *)(a2 + 32));
    if (((*(_QWORD *)(a2 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
      __asm { BR              X9 }
  }
  return 0;
}

BOOL sub_100A07E5C(char a1, uint64_t a2)
{
  Swift::UInt v4;
  Swift::Int v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL8 result;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD v14[9];

  if (!*(_QWORD *)(a2 + 16))
    return 0;
  Hasher.init(_seed:)(v14);
  v4 = qword_100E59228[a1];
  Hasher._combine(_:)(v4);
  v5 = Hasher._finalize()();
  v6 = -1 << *(_BYTE *)(a2 + 32);
  v7 = v5 & ~v6;
  v8 = a2 + 56;
  if (((*(_QWORD *)(a2 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) == 0)
    return 0;
  v9 = *(_QWORD *)(a2 + 48);
  if (qword_100E59228[*(char *)(v9 + v7)] == v4)
    return 1;
  v11 = ~v6;
  v12 = (v7 + 1) & v11;
  if (((*(_QWORD *)(v8 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
    return 0;
  do
  {
    v13 = qword_100E59228[*(char *)(v9 + v12)];
    result = v13 == v4;
    if (v13 == v4)
      break;
    v12 = (v12 + 1) & v11;
  }
  while (((*(_QWORD *)(v8 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) != 0);
  return result;
}

uint64_t sub_100A07F60(unsigned __int8 a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  Swift::UInt v7;
  Swift::Int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  _QWORD v19[9];

  if (!*(_QWORD *)(a4 + 16))
    return 0;
  v7 = a1;
  Hasher.init(_seed:)(v19);
  Hasher._combine(_:)(v7);
  swift_bridgeObjectRetain(a3);
  String.hash(into:)(v19, a2, a3);
  swift_bridgeObjectRelease(a3);
  v8 = Hasher._finalize()();
  v9 = -1 << *(_BYTE *)(a4 + 32);
  v10 = v8 & ~v9;
  v11 = a4 + 56;
  if (((*(_QWORD *)(a4 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
    return 0;
  v12 = ~v9;
  v13 = *(_QWORD *)(a4 + 48);
  while (1)
  {
    v14 = (unsigned __int8 *)(v13 + 24 * v10);
    if (*v14 == (_DWORD)v7)
    {
      v15 = *((_QWORD *)v14 + 1);
      v16 = *((_QWORD *)v14 + 2);
      v17 = v15 == a2 && v16 == a3;
      if (v17 || (_stringCompareWithSmolCheck(_:_:expecting:)(v15, v16, a2, a3, 0) & 1) != 0)
        break;
    }
    v10 = (v10 + 1) & v12;
    if (((*(_QWORD *)(v11 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
      return 0;
  }
  return 1;
}

BOOL sub_100A08088(Swift::UInt8 a1, uint64_t a2)
{
  Swift::Int v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL8 result;
  uint64_t v10;
  unint64_t v11;
  int v12;
  _QWORD v13[9];

  if (!*(_QWORD *)(a2 + 16))
    return 0;
  Hasher.init(_seed:)(v13);
  Hasher._combine(_:)(a1);
  v4 = Hasher._finalize()();
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = v4 & ~v5;
  v7 = a2 + 56;
  if (((*(_QWORD *)(a2 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
    return 0;
  v8 = *(_QWORD *)(a2 + 48);
  if (*(unsigned __int8 *)(v8 + v6) == a1)
    return 1;
  v10 = ~v5;
  v11 = (v6 + 1) & v10;
  if (((*(_QWORD *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) == 0)
    return 0;
  do
  {
    v12 = *(unsigned __int8 *)(v8 + v11);
    result = v12 == a1;
    if (v12 == a1)
      break;
    v11 = (v11 + 1) & v10;
  }
  while (((*(_QWORD *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) != 0);
  return result;
}

BOOL sub_100A08174(unsigned __int8 a1, uint64_t a2)
{
  Swift::UInt32 v3;
  Swift::Int v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL8 result;
  uint64_t v10;
  unint64_t v11;
  int v12;
  _QWORD v13[9];

  if (!*(_QWORD *)(a2 + 16))
    return 0;
  v3 = a1;
  Hasher.init(_seed:)(v13);
  Hasher._combine(_:)(v3);
  v4 = Hasher._finalize()();
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = v4 & ~v5;
  v7 = a2 + 56;
  if (((*(_QWORD *)(a2 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
    return 0;
  v8 = *(_QWORD *)(a2 + 48);
  if (*(unsigned __int8 *)(v8 + v6) == v3)
    return 1;
  v10 = ~v5;
  v11 = (v6 + 1) & v10;
  if (((*(_QWORD *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) == 0)
    return 0;
  do
  {
    v12 = *(unsigned __int8 *)(v8 + v11);
    result = v12 == v3;
    if (v12 == v3)
      break;
    v11 = (v11 + 1) & v10;
  }
  while (((*(_QWORD *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) != 0);
  return result;
}

BOOL sub_100A08260(unsigned __int8 a1, uint64_t a2)
{
  Swift::UInt v3;
  Swift::Int v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL8 result;
  uint64_t v10;
  unint64_t v11;
  int v12;
  _QWORD v13[9];

  if (!*(_QWORD *)(a2 + 16))
    return 0;
  v3 = a1;
  Hasher.init(_seed:)(v13);
  Hasher._combine(_:)(v3);
  v4 = Hasher._finalize()();
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = v4 & ~v5;
  v7 = a2 + 56;
  if (((*(_QWORD *)(a2 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
    return 0;
  v8 = *(_QWORD *)(a2 + 48);
  if (*(unsigned __int8 *)(v8 + v6) == (_DWORD)v3)
    return 1;
  v10 = ~v5;
  v11 = (v6 + 1) & v10;
  if (((*(_QWORD *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) == 0)
    return 0;
  do
  {
    v12 = *(unsigned __int8 *)(v8 + v11);
    result = v12 == (_DWORD)v3;
    if (v12 == (_DWORD)v3)
      break;
    v11 = (v11 + 1) & v10;
  }
  while (((*(_QWORD *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) != 0);
  return result;
}

uint64_t sub_100A0834C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Swift::Int v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  char v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  char v27;
  _QWORD v29[9];

  if (*(_QWORD *)(a2 + 16))
  {
    v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
    v6 = v5;
    Hasher.init(_seed:)(v29);
    String.hash(into:)(v29, v4, v6);
    v7 = Hasher._finalize()();
    swift_bridgeObjectRelease(v6);
    v8 = -1 << *(_BYTE *)(a2 + 32);
    v9 = v7 & ~v8;
    v10 = a2 + 56;
    if (((*(_QWORD *)(a2 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) != 0)
    {
      v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(*(_QWORD *)(a2 + 48) + 8 * v9));
      v13 = v12;
      v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
      if (v11 == v14 && v13 == v15)
      {
LABEL_17:
        swift_bridgeObjectRelease_n(v13, 2);
        goto LABEL_18;
      }
      v17 = v15;
      v18 = _stringCompareWithSmolCheck(_:_:expecting:)(v11, v13, v14, v15, 0);
      swift_bridgeObjectRelease(v13);
      swift_bridgeObjectRelease(v17);
      if ((v18 & 1) != 0)
      {
LABEL_18:
        v27 = 1;
        return v27 & 1;
      }
      v19 = ~v8;
      v20 = (v9 + 1) & v19;
      if (((*(_QWORD *)(v10 + ((v20 >> 3) & 0xFFFFFFFFFFFFF8)) >> v20) & 1) != 0)
      {
        while (1)
        {
          v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(*(_QWORD *)(a2 + 48) + 8 * v20));
          v13 = v22;
          v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
          if (v21 == v23 && v13 == v24)
            break;
          v26 = v24;
          v27 = _stringCompareWithSmolCheck(_:_:expecting:)(v21, v13, v23, v24, 0);
          swift_bridgeObjectRelease(v13);
          swift_bridgeObjectRelease(v26);
          if ((v27 & 1) == 0)
          {
            v20 = (v20 + 1) & v19;
            if (((*(_QWORD *)(v10 + ((v20 >> 3) & 0xFFFFFFFFFFFFF8)) >> v20) & 1) != 0)
              continue;
          }
          return v27 & 1;
        }
        goto LABEL_17;
      }
    }
  }
  v27 = 0;
  return v27 & 1;
}

BOOL sub_100A08510(unsigned __int8 a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL8 result;
  uint64_t v10;
  unint64_t v11;
  int v12;

  if (!*(_QWORD *)(a2 + 16))
    return 0;
  v3 = a1;
  v4 = static Hasher._hash(seed:bytes:count:)(*(_QWORD *)(a2 + 40), a1, 1);
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = v4 & ~v5;
  v7 = a2 + 56;
  if (((*(_QWORD *)(a2 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
    return 0;
  v8 = *(_QWORD *)(a2 + 48);
  if (*(unsigned __int8 *)(v8 + v6) == v3)
    return 1;
  v10 = ~v5;
  v11 = (v6 + 1) & v10;
  if (((*(_QWORD *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) == 0)
    return 0;
  do
  {
    v12 = *(unsigned __int8 *)(v8 + v11);
    result = v12 == v3;
    if (v12 == v3)
      break;
    v11 = (v11 + 1) & v10;
  }
  while (((*(_QWORD *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) != 0);
  return result;
}

BOOL sub_100A085DC(unsigned int a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL8 result;
  uint64_t v10;
  unint64_t v11;
  int v12;

  if (!*(_QWORD *)(a2 + 16))
    return 0;
  v4 = static Hasher._hash(seed:bytes:count:)(*(_QWORD *)(a2 + 40), a1, 4);
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = v4 & ~v5;
  v7 = a2 + 56;
  if (((*(_QWORD *)(a2 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
    return 0;
  v8 = *(_QWORD *)(a2 + 48);
  if (*(_DWORD *)(v8 + 4 * v6) == a1)
    return 1;
  v10 = ~v5;
  v11 = (v6 + 1) & v10;
  if (((*(_QWORD *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) == 0)
    return 0;
  do
  {
    v12 = *(_DWORD *)(v8 + 4 * v11);
    result = v12 == a1;
    if (v12 == a1)
      break;
    v11 = (v11 + 1) & v10;
  }
  while (((*(_QWORD *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) != 0);
  return result;
}

BOOL sub_100A086A8(char a1, uint64_t a2)
{
  Swift::UInt v4;
  Swift::Int v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL8 result;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD v14[9];

  if (!*(_QWORD *)(a2 + 16))
    return 0;
  Hasher.init(_seed:)(v14);
  v4 = qword_100E591F0[a1];
  Hasher._combine(_:)(v4);
  v5 = Hasher._finalize()();
  v6 = -1 << *(_BYTE *)(a2 + 32);
  v7 = v5 & ~v6;
  v8 = a2 + 56;
  if (((*(_QWORD *)(a2 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) == 0)
    return 0;
  v9 = *(_QWORD *)(a2 + 48);
  if (qword_100E591F0[*(char *)(v9 + v7)] == v4)
    return 1;
  v11 = ~v6;
  v12 = (v7 + 1) & v11;
  if (((*(_QWORD *)(v8 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
    return 0;
  do
  {
    v13 = qword_100E591F0[*(char *)(v9 + v12)];
    result = v13 == v4;
    if (v13 == v4)
      break;
    v12 = (v12 + 1) & v11;
  }
  while (((*(_QWORD *)(v8 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) != 0);
  return result;
}

BOOL sub_100A087AC(uint64_t a1, unint64_t a2)
{
  return sub_100A087D4(a1, a2, (uint64_t)&off_101049678, sub_1003B8DAC);
}

BOOL sub_100A087C0(uint64_t a1, unint64_t a2)
{
  return sub_100A087D4(a1, a2, (uint64_t)&off_1010499E8, sub_100CA7F40);
}

BOOL sub_100A087D4(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v19;
  uint64_t v20;

  v8 = type metadata accessor for Endianness(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = a4(a3);
  sub_1001EDA78(a1, a2);
  if (v12 == 76)
  {
    v13 = sub_1001EDBAC(a1, a2);
    v15 = v14;
    static Endianness.current.getter(v13);
    sub_10007D5A4();
    FixedWidthInteger.init(data:ofEndianness:)(&v20, v13, v15, v10);
    if (BYTE4(v20))
      v16 = 0;
    else
      v16 = (int)v20;
    v17 = sub_100A07598(v16, v11);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  return v17;
}

BOOL sub_100A088E4(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v15;
  uint64_t v16;

  v4 = type metadata accessor for Endianness(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_100CA7F40((uint64_t)&off_101047FC0);
  sub_100A11584(&v15, 8216, &qword_10110FF40, (uint64_t)&type metadata for Int);
  sub_100A11584(&v15, 8220, &qword_10110FF40, (uint64_t)&type metadata for Int);
  sub_1001EDA78(a1, a2);
  v7 = v16;
  if (v8 == 76)
  {
    swift_bridgeObjectRetain(v16);
    v9 = sub_1001EDBAC(a1, a2);
    v11 = v10;
    static Endianness.current.getter(v9);
    sub_10007D5A4();
    FixedWidthInteger.init(data:ofEndianness:)(&v15, v9, v11, v6);
    if (BYTE4(v15))
      v12 = 0;
    else
      v12 = (int)v15;
    v13 = sub_100A07598(v12, v7);
    swift_bridgeObjectRelease_n(v7, 2);
  }
  else
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  return v13;
}

BOOL sub_100A08A3C(uint64_t a1, unint64_t a2)
{
  return sub_100A08A6C(a1, a2, (uint64_t)&off_101048FD0, sub_100CA7F40, 8216);
}

BOOL sub_100A08A54(uint64_t a1, unint64_t a2)
{
  return sub_100A08A6C(a1, a2, (uint64_t)&off_101049000, sub_1003B8DAC, 8223);
}

BOOL sub_100A08A6C(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t), uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v21;
  uint64_t v22;

  v10 = type metadata accessor for Endianness(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = a4(a3);
  sub_100A11584(&v21, a5, &qword_10110FF40, (uint64_t)&type metadata for Int);
  sub_1001EDA78(a1, a2);
  v13 = v22;
  if (v14 == 76)
  {
    swift_bridgeObjectRetain(v22);
    v15 = sub_1001EDBAC(a1, a2);
    v17 = v16;
    static Endianness.current.getter(v15);
    sub_10007D5A4();
    FixedWidthInteger.init(data:ofEndianness:)(&v21, v15, v17, v12);
    if (BYTE4(v21))
      v18 = 0;
    else
      v18 = (int)v21;
    v19 = sub_100A07598(v18, v13);
    swift_bridgeObjectRelease_n(v13, 2);
  }
  else
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  return v19;
}

void sub_100A08BB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }
}

uint64_t sub_100A08C10(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, __int16 a10, char __s2, char a12, char a13, char a14, char a15, char a16, char a17, char a18, char a19, char a20,char a21,char a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  BOOL *v37;
  const void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t result;
  uint64_t v42;
  __int16 v43;
  char v44;
  char v45;
  char v46;
  char v47;

  v42 = v39;
  v43 = v40;
  v44 = BYTE2(v40);
  v45 = BYTE3(v40);
  v46 = BYTE4(v40);
  v47 = BYTE5(v40);
  if (!v38)
  {
    __break(1u);
    JUMPOUT(0x100A08DF4);
  }
  result = memcmp(v38, &v42, BYTE6(v40));
  *v37 = (_DWORD)result == 0;
  return result;
}

uint64_t sub_100A08E18@<X0>(uint64_t __s2@<X0>, void *__s1@<X2>, uint64_t a3@<X1>, BOOL *a4@<X8>)
{
  if (__s1)
  {
    if (__s2)
    {
      __s2 = memcmp(__s1, (const void *)__s2, a3 - __s2);
      *a4 = (_DWORD)__s2 == 0;
      return __s2;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return __s2;
}

uint64_t sub_100A08E70(_BYTE *a1, uint64_t a2)
{
  return sub_100A11964(a1, a2, &qword_1011101B8, (uint64_t)&type metadata for BatteryChargeState);
}

uint64_t sub_100A08E84(_BYTE *a1, Swift::Int a2)
{
  uint64_t *v2;
  uint64_t v4;
  unint64_t v5;
  char isUniquelyReferenced_nonNull_native;
  uint64_t result;
  _QWORD *v8;
  _QWORD v10[9];

  v4 = *v2;
  Hasher.init(_seed:)(v10);
  swift_bridgeObjectRetain(v4);
  sub_100515B58((uint64_t)v10, a2);
  v5 = Hasher._finalize()() & ~(-1 << *(_BYTE *)(v4 + 32));
  if (((*(_QWORD *)(v4 + 56 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
    __asm { BR              X9 }
  swift_bridgeObjectRelease();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v8);
  v10[0] = *v8;
  *v8 = 0x8000000000000000;
  sub_100A1BA8C(a2, v5, isUniquelyReferenced_nonNull_native);
  *v8 = v10[0];
  swift_bridgeObjectRelease();
  result = 1;
  *a1 = a2;
  return result;
}

uint64_t sub_100A092C0(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v7;
  Swift::Int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  BOOL v21;
  char isUniquelyReferenced_nonNull_native;
  _QWORD v23[9];

  v7 = *v3;
  Hasher.init(_seed:)(v23);
  swift_bridgeObjectRetain(v7);
  String.hash(into:)(v23, a2, a3);
  v8 = Hasher._finalize()();
  v9 = -1 << *(_BYTE *)(v7 + 32);
  v10 = v8 & ~v9;
  if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = *(_QWORD *)(v7 + 48);
    v12 = (_QWORD *)(v11 + 16 * v10);
    v13 = v12[1];
    v14 = *v12 == a2 && v13 == a3;
    if (v14 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v12, v13, a2, a3, 0) & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v15 = (uint64_t *)(*(_QWORD *)(*v3 + 48) + 16 * v10);
      v16 = v15[1];
      *a1 = *v15;
      a1[1] = v16;
      swift_bridgeObjectRetain(v16);
      return 0;
    }
    v18 = ~v9;
    while (1)
    {
      v10 = (v10 + 1) & v18;
      if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
        break;
      v19 = (_QWORD *)(v11 + 16 * v10);
      v20 = v19[1];
      v21 = *v19 == a2 && v20 == a3;
      if (v21 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v19, v20, a2, a3, 0) & 1) != 0)
        goto LABEL_7;
    }
  }
  swift_bridgeObjectRelease();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  v23[0] = *v3;
  *v3 = 0x8000000000000000;
  swift_bridgeObjectRetain(a3);
  sub_100A1BF18(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  *v3 = v23[0];
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

uint64_t sub_100A0946C(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  uint64_t *v3;
  uint64_t v6;
  unint64_t v7;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v10;
  uint64_t __s1;

  v6 = *v3;
  Hasher.init(_seed:)(&__s1);
  swift_bridgeObjectRetain(v6);
  sub_10001BBBC(a2, a3);
  Data.hash(into:)(&__s1, a2, a3);
  sub_10001BC14(a2, a3);
  v7 = Hasher._finalize()() & ~(-1 << *(_BYTE *)(v6 + 32));
  if (((*(_QWORD *)(v6 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) != 0)
    __asm { BR              X8 }
  swift_bridgeObjectRelease();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v10);
  __s1 = *v10;
  *v10 = 0x8000000000000000;
  sub_10001BBBC(a2, a3);
  sub_100A1C0B0(a2, a3, v7, isUniquelyReferenced_nonNull_native);
  *v10 = __s1;
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

uint64_t sub_100A09F24(_BYTE *a1, uint64_t a2)
{
  return sub_100A11964(a1, a2, &qword_1010F9FA0, (uint64_t)&type metadata for MessagingCapability);
}

uint64_t sub_100A09F38(uint64_t a1, char *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(_QWORD, _QWORD, _QWORD);
  uint64_t v21;
  void (*v22)(_QWORD, _QWORD, _QWORD);
  uint64_t v23;
  char v24;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  char isUniquelyReferenced_nonNull_native;
  char *v28;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;

  v3 = v2;
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v3;
  v11 = *(_QWORD *)(*v3 + 40);
  v13 = sub_100006204(&qword_1010F98B0, v12, (uint64_t)&protocol conformance descriptor for UUID);
  swift_bridgeObjectRetain(v10);
  v34 = a2;
  v14 = dispatch thunk of Hashable._rawHashValue(seed:)(v11, v6, v13);
  v15 = -1 << *(_BYTE *)(v10 + 32);
  v16 = v14 & ~v15;
  v17 = v10;
  v18 = v10 + 56;
  if (((*(_QWORD *)(v10 + 56 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) != 0)
  {
    v30 = v3;
    v31 = a1;
    v32 = ~v15;
    v33 = v7;
    v19 = *(_QWORD *)(v7 + 72);
    v20 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    while (1)
    {
      v21 = v17;
      v22 = v20;
      v20(v9, *(_QWORD *)(v17 + 48) + v19 * v16, v6);
      v23 = sub_100006204(&qword_1010EE520, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v24 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v34, v6, v23);
      v25 = *(void (**)(char *, uint64_t))(v33 + 8);
      v25(v9, v6);
      if ((v24 & 1) != 0)
        break;
      v16 = (v16 + 1) & v32;
      v17 = v21;
      v20 = v22;
      if (((*(_QWORD *)(v18 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        v3 = v30;
        a1 = v31;
        v26 = v33;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    v25(v34, v6);
    v22(v31, *(_QWORD *)(*v30 + 48) + v19 * v16, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    v20 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    v26 = v7;
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v28 = v34;
    v20(v9, v34, v6);
    v35 = *v3;
    *v3 = 0x8000000000000000;
    sub_100A1CCB8((uint64_t)v9, v16, isUniquelyReferenced_nonNull_native);
    *v3 = v35;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, char *, uint64_t))(v26 + 32))(a1, v28, v6);
    return 1;
  }
}

uint64_t sub_100A0A194(uint64_t *a1, uint64_t a2)
{
  return sub_100A11584(a1, a2, &qword_10110FFE8, (uint64_t)&type metadata for Int64);
}

uint64_t sub_100A0A1A8(_BYTE *a1, uint64_t a2)
{
  return sub_100A11964(a1, a2, (uint64_t *)&unk_10110FFA0, (uint64_t)&type metadata for BeaconStore.BeaconsChangedNotificationReason);
}

uint64_t sub_100A0A1BC(uint64_t a1, uint64_t a2)
{
  return sub_100A0C210(a1, a2, type metadata accessor for SharedBeaconRecord, (void (*)(_QWORD *))sub_100D3B724, &qword_101110090, (uint64_t (*)(char *, uint64_t))sub_100D3E924);
}

uint64_t sub_100A0A1E0(_QWORD *a1, void *a2)
{
  return sub_100A104B8(a1, a2, &qword_101110148, (uint64_t (*)(_QWORD))type metadata accessor for SPDisabledReason);
}

uint64_t sub_100A0A1F4(uint64_t *a1, uint64_t a2)
{
  return sub_100A11584(a1, a2, &qword_10110FF40, (uint64_t)&type metadata for Int);
}

uint64_t sub_100A0A208(_BYTE *a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v14;

  v3 = v2;
  v6 = *v2;
  v7 = static Hasher._hash(seed:bytes:count:)(*(_QWORD *)(v6 + 40), a2, 1);
  v8 = -1 << *(_BYTE *)(v6 + 32);
  v9 = v7 & ~v8;
  if (((*(_QWORD *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
  {
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v14 = *v3;
    *v3 = 0x8000000000000000;
    sub_100A1D054(a2, v9, isUniquelyReferenced_nonNull_native);
    *v3 = v14;
    swift_bridgeObjectRelease();
    result = 1;
    goto LABEL_8;
  }
  v10 = *(_QWORD *)(v6 + 48);
  if (*(unsigned __int8 *)(v10 + v9) != a2)
  {
    v11 = ~v8;
    do
    {
      v9 = (v9 + 1) & v11;
      if (((*(_QWORD *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
        goto LABEL_7;
    }
    while (*(unsigned __int8 *)(v10 + v9) != a2);
  }
  result = 0;
LABEL_8:
  *a1 = a2;
  return result;
}

uint64_t sub_100A0A308(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  Swift::Int v12;
  uint64_t v13;
  unint64_t v14;
  char isUniquelyReferenced_nonNull_native;
  _QWORD v17[7];
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t __s1;

  v18 = type metadata accessor for BeaconNamingRecord(0);
  v5 = *(_QWORD *)(v18 - 8);
  v6 = __chkstk_darwin(v18);
  v8 = (char *)v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)v17 - v9;
  v11 = *v2;
  Hasher.init(_seed:)(&__s1);
  swift_bridgeObjectRetain(v11);
  sub_100A00ED0((uint64_t)&__s1);
  v12 = Hasher._finalize()();
  v13 = -1 << *(_BYTE *)(v11 + 32);
  v14 = v12 & ~v13;
  v22 = v11 + 56;
  if (((*(_QWORD *)(v11 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) != 0)
  {
    v17[2] = v10;
    v17[3] = v2;
    v17[4] = a1;
    v19 = ~v13;
    v21 = *(_QWORD *)(v5 + 72);
    v17[6] = a2;
    v20 = v11;
    sub_10005972C(*(_QWORD *)(v11 + 48) + v21 * v14, (uint64_t)v8, type metadata accessor for BeaconNamingRecord);
    __asm { BR              X10 }
  }
  swift_bridgeObjectRelease();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  sub_10005972C(a2, (uint64_t)v10, type metadata accessor for BeaconNamingRecord);
  __s1 = *v2;
  *v2 = 0x8000000000000000;
  sub_100A1D180((uint64_t)v10, v14, isUniquelyReferenced_nonNull_native);
  *v2 = __s1;
  swift_bridgeObjectRelease();
  sub_1000126EC(a2, a1, type metadata accessor for BeaconNamingRecord);
  return 1;
}

uint64_t sub_100A0AE78(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD *v5;
  int v10;
  uint64_t v11;
  Swift::Int v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v26;
  _QWORD v27[9];

  v5 = v4;
  v10 = a4 & 1;
  v11 = *v5;
  Hasher.init(_seed:)(v27);
  swift_bridgeObjectRetain(v11);
  String.hash(into:)(v27, a2, a3);
  Hasher._combine(_:)(a4 & 1);
  v12 = Hasher._finalize()();
  v13 = -1 << *(_BYTE *)(v11 + 32);
  v14 = v12 & ~v13;
  v26 = v5;
  if (((*(_QWORD *)(v11 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) != 0)
  {
    v15 = ~v13;
    v16 = *(_QWORD *)(v11 + 48);
    do
    {
      v17 = v16 + 24 * v14;
      v18 = *(_QWORD *)(v17 + 8);
      v19 = *(unsigned __int8 *)(v17 + 16);
      if (*(_QWORD *)v17 == a2 && v18 == a3)
      {
        if ((v10 == 0) != v19)
          goto LABEL_11;
      }
      else if ((_stringCompareWithSmolCheck(_:_:expecting:)(*(_QWORD *)v17, v18, a2, a3, 0) & 1) != 0
             && (((v10 == 0) ^ v19) & 1) != 0)
      {
LABEL_11:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v21 = *(_QWORD *)(*v26 + 48) + 24 * v14;
        v23 = *(_QWORD *)v21;
        v22 = *(_QWORD *)(v21 + 8);
        LOBYTE(v21) = *(_BYTE *)(v21 + 16);
        *(_QWORD *)a1 = v23;
        *(_QWORD *)(a1 + 8) = v22;
        *(_BYTE *)(a1 + 16) = v21;
        swift_bridgeObjectRetain(v22);
        return 0;
      }
      v14 = (v14 + 1) & v15;
    }
    while (((*(_QWORD *)(v11 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) != 0);
  }
  swift_bridgeObjectRelease();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v26);
  v27[0] = *v26;
  *v26 = 0x8000000000000000;
  swift_bridgeObjectRetain(a3);
  sub_100A1DC80(a2, a3, v10, v14, isUniquelyReferenced_nonNull_native);
  *v26 = v27[0];
  swift_bridgeObjectRelease();
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  result = 1;
  *(_BYTE *)(a1 + 16) = v10;
  return result;
}

uint64_t sub_100A0B060(Swift::Int *a1, void *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  Swift::Int v12;
  Swift::Int v13;
  uint64_t v14;
  unint64_t v15;
  id v16;
  char v17;
  uint64_t v18;
  id v19;
  char v20;
  void *v21;
  id v22;
  Swift::Int v23;
  unint64_t v24;
  uint64_t v25;
  id v26;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v28;
  id v29;
  uint64_t v30;
  Swift::Int v31;

  v3 = v2;
  v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0)
      v7 = *v2;
    else
      v7 = v6 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*v2);
    v8 = a2;
    v9 = __CocoaSet.member(for:)(v8, v7);

    if (v9)
    {
      swift_bridgeObjectRelease();

      v30 = v9;
      v10 = sub_10000F4A0(0, (unint64_t *)&unk_1010F4800, SPBeaconShare_ptr);
      swift_unknownObjectRetain(v9);
      swift_dynamicCast(&v31, &v30, (char *)&type metadata for Swift.AnyObject + 8, v10, 7);
      *a1 = v31;
      swift_unknownObjectRelease(v9);
      return 0;
    }
    result = __CocoaSet.count.getter(v7);
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    v23 = sub_100C7FA98(v7, result + 1);
    v31 = v23;
    v24 = *(_QWORD *)(v23 + 16);
    if (*(_QWORD *)(v23 + 24) <= v24)
    {
      v28 = v24 + 1;
      v29 = v8;
      sub_100A1B1EC(v28, &qword_101110018);
      v25 = v31;
    }
    else
    {
      v25 = v23;
      v26 = v8;
    }
    sub_100C80794((uint64_t)v8, v25);
    *v3 = v25;
  }
  else
  {
    v12 = *(_QWORD *)(v6 + 40);
    swift_bridgeObjectRetain(v6);
    v13 = NSObject._rawHashValue(seed:)(v12);
    v14 = -1 << *(_BYTE *)(v6 + 32);
    v15 = v13 & ~v14;
    if (((*(_QWORD *)(v6 + 56 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) != 0)
    {
      sub_10000F4A0(0, (unint64_t *)&unk_1010F4800, SPBeaconShare_ptr);
      v16 = *(id *)(*(_QWORD *)(v6 + 48) + 8 * v15);
      v17 = static NSObject.== infix(_:_:)(v16, a2);

      if ((v17 & 1) != 0)
      {
LABEL_12:

        swift_bridgeObjectRelease();
        v21 = *(void **)(*(_QWORD *)(*v3 + 48) + 8 * v15);
        *a1 = (Swift::Int)v21;
        v22 = v21;
        return 0;
      }
      v18 = ~v14;
      while (1)
      {
        v15 = (v15 + 1) & v18;
        if (((*(_QWORD *)(v6 + 56 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) == 0)
          break;
        v19 = *(id *)(*(_QWORD *)(v6 + 48) + 8 * v15);
        v20 = static NSObject.== infix(_:_:)(v19, a2);

        if ((v20 & 1) != 0)
          goto LABEL_12;
      }
    }
    swift_bridgeObjectRelease();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v31 = *v3;
    *v3 = 0x8000000000000000;
    v8 = a2;
    sub_100A1E880((uint64_t)v8, v15, isUniquelyReferenced_nonNull_native, &qword_101110018, (unint64_t *)&unk_1010F4800, SPBeaconShare_ptr);
    *v3 = v31;
  }
  swift_bridgeObjectRelease();
  *a1 = (Swift::Int)v8;
  return 1;
}

uint64_t sub_100A0B31C(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  uint64_t *v3;
  uint64_t v6;
  unint64_t v7;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v10;
  uint64_t __s1;

  v6 = *v3;
  Hasher.init(_seed:)(&__s1);
  swift_bridgeObjectRetain(v6);
  Data.hash(into:)(&__s1, a2, a3);
  v7 = Hasher._finalize()() & ~(-1 << *(_BYTE *)(v6 + 32));
  if (((*(_QWORD *)(v6 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8)) >> v7) & 1) != 0)
    __asm { BR              X8 }
  swift_bridgeObjectRelease();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v10);
  __s1 = *v10;
  *v10 = 0x8000000000000000;
  sub_10001BBBC(a2, a3);
  sub_100A1DE3C(a2, a3, v7, isUniquelyReferenced_nonNull_native);
  *v10 = __s1;
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

uint64_t sub_100A0BD48(_BYTE *a1, uint64_t a2)
{
  return sub_100A11964(a1, a2, &qword_1010FA240, (uint64_t)&type metadata for SharingCircleType);
}

uint64_t sub_100A0BD5C(Swift::Int *a1, void *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  Swift::Int v12;
  Swift::Int v13;
  uint64_t v14;
  unint64_t v15;
  id v16;
  char v17;
  uint64_t v18;
  id v19;
  char v20;
  void *v21;
  id v22;
  Swift::Int v23;
  unint64_t v24;
  uint64_t v25;
  id v26;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v28;
  id v29;
  uint64_t v30;
  Swift::Int v31;

  v3 = v2;
  v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0)
      v7 = *v2;
    else
      v7 = v6 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*v2);
    v8 = a2;
    v9 = __CocoaSet.member(for:)(v8, v7);

    if (v9)
    {
      swift_bridgeObjectRelease();

      v30 = v9;
      v10 = sub_10000F4A0(0, (unint64_t *)&qword_10110FFD0, FAFamilyMember_ptr);
      swift_unknownObjectRetain(v9);
      swift_dynamicCast(&v31, &v30, (char *)&type metadata for Swift.AnyObject + 8, v10, 7);
      *a1 = v31;
      swift_unknownObjectRelease(v9);
      return 0;
    }
    result = __CocoaSet.count.getter(v7);
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    v23 = sub_100C7FAE0(v7, result + 1);
    v31 = v23;
    v24 = *(_QWORD *)(v23 + 16);
    if (*(_QWORD *)(v23 + 24) <= v24)
    {
      v28 = v24 + 1;
      v29 = v8;
      sub_100A1B1EC(v28, &qword_10110FFD8);
      v25 = v31;
    }
    else
    {
      v25 = v23;
      v26 = v8;
    }
    sub_100C80794((uint64_t)v8, v25);
    *v3 = v25;
  }
  else
  {
    v12 = *(_QWORD *)(v6 + 40);
    swift_bridgeObjectRetain(v6);
    v13 = NSObject._rawHashValue(seed:)(v12);
    v14 = -1 << *(_BYTE *)(v6 + 32);
    v15 = v13 & ~v14;
    if (((*(_QWORD *)(v6 + 56 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) != 0)
    {
      sub_10000F4A0(0, (unint64_t *)&qword_10110FFD0, FAFamilyMember_ptr);
      v16 = *(id *)(*(_QWORD *)(v6 + 48) + 8 * v15);
      v17 = static NSObject.== infix(_:_:)(v16, a2);

      if ((v17 & 1) != 0)
      {
LABEL_12:

        swift_bridgeObjectRelease();
        v21 = *(void **)(*(_QWORD *)(*v3 + 48) + 8 * v15);
        *a1 = (Swift::Int)v21;
        v22 = v21;
        return 0;
      }
      v18 = ~v14;
      while (1)
      {
        v15 = (v15 + 1) & v18;
        if (((*(_QWORD *)(v6 + 56 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) == 0)
          break;
        v19 = *(id *)(*(_QWORD *)(v6 + 48) + 8 * v15);
        v20 = static NSObject.== infix(_:_:)(v19, a2);

        if ((v20 & 1) != 0)
          goto LABEL_12;
      }
    }
    swift_bridgeObjectRelease();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v31 = *v3;
    *v3 = 0x8000000000000000;
    v8 = a2;
    sub_100A1E880((uint64_t)v8, v15, isUniquelyReferenced_nonNull_native, &qword_10110FFD8, (unint64_t *)&qword_10110FFD0, FAFamilyMember_ptr);
    *v3 = v31;
  }
  swift_bridgeObjectRelease();
  *a1 = (Swift::Int)v8;
  return 1;
}

uint64_t sub_100A0C018(uint64_t a1, unsigned __int8 a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v9;
  Swift::Int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  char isUniquelyReferenced_nonNull_native;
  _QWORD v24[9];

  v9 = *v4;
  Hasher.init(_seed:)(v24);
  Hasher._combine(_:)(a2);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(a4);
  String.hash(into:)(v24, a3, a4);
  swift_bridgeObjectRelease();
  v10 = Hasher._finalize()();
  v11 = -1 << *(_BYTE *)(v9 + 32);
  v12 = v10 & ~v11;
  if (((*(_QWORD *)(v9 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) != 0)
  {
    v13 = ~v11;
    v14 = *(_QWORD *)(v9 + 48);
    while (1)
    {
      v15 = (unsigned __int8 *)(v14 + 24 * v12);
      if (*v15 == a2)
      {
        v16 = *((_QWORD *)v15 + 1);
        v17 = *((_QWORD *)v15 + 2);
        v18 = v16 == a3 && v17 == a4;
        if (v18 || (_stringCompareWithSmolCheck(_:_:expecting:)(v16, v17, a3, a4, 0) & 1) != 0)
          break;
      }
      v12 = (v12 + 1) & v13;
      if (((*(_QWORD *)(v9 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
        goto LABEL_11;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v19 = *(_QWORD *)(*v4 + 48) + 24 * v12;
    v21 = *(_QWORD *)(v19 + 8);
    v20 = *(_QWORD *)(v19 + 16);
    *(_BYTE *)a1 = *(_BYTE *)v19;
    *(_QWORD *)(a1 + 8) = v21;
    *(_QWORD *)(a1 + 16) = v20;
    swift_bridgeObjectRetain(v20);
    return 0;
  }
  else
  {
LABEL_11:
    swift_bridgeObjectRelease();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
    v24[0] = *v4;
    *v4 = 0x8000000000000000;
    swift_bridgeObjectRetain(a4);
    sub_100A1EA10(a2, a3, a4, v12, isUniquelyReferenced_nonNull_native);
    *v4 = v24[0];
    swift_bridgeObjectRelease();
    *(_BYTE *)a1 = a2;
    result = 1;
    *(_QWORD *)(a1 + 8) = a3;
    *(_QWORD *)(a1 + 16) = a4;
  }
  return result;
}

uint64_t sub_100A0C1EC(uint64_t a1, uint64_t a2)
{
  return sub_100A0C210(a1, a2, type metadata accessor for RawSearchResult, (void (*)(_QWORD *))sub_10096370C, (uint64_t *)&unk_10110FFF0, (uint64_t (*)(char *, uint64_t))sub_100964A3C);
}

uint64_t sub_100A0C210(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD), void (*a4)(_QWORD *), uint64_t *a5, uint64_t (*a6)(char *, uint64_t))
{
  _QWORD *v6;
  _QWORD *v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  Swift::Int v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v24;
  _QWORD *v26;
  uint64_t v27;
  void (*v28)(_QWORD *);
  uint64_t *v29;
  uint64_t (*v30)(char *, uint64_t);
  _QWORD v31[9];

  v29 = a5;
  v30 = a6;
  v9 = v6;
  v12 = a3(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v26 - v14;
  v16 = *v6;
  Hasher.init(_seed:)(v31);
  swift_bridgeObjectRetain(v16);
  v28 = a4;
  a4(v31);
  v17 = Hasher._finalize()();
  v18 = -1 << *(_BYTE *)(v16 + 32);
  v19 = v17 & ~v18;
  if (((*(_QWORD *)(v16 + 56 + ((v19 >> 3) & 0xFFFFFFFFFFFFF8)) >> v19) & 1) != 0)
  {
    v26 = v6;
    v27 = a1;
    v20 = ~v18;
    v21 = *(_QWORD *)(v13 + 72);
    while (1)
    {
      sub_10005972C(*(_QWORD *)(v16 + 48) + v21 * v19, (uint64_t)v15, a3);
      v22 = v30(v15, a2);
      sub_1000126B0((uint64_t)v15, a3);
      if ((v22 & 1) != 0)
        break;
      v19 = (v19 + 1) & v20;
      if (((*(_QWORD *)(v16 + 56 + ((v19 >> 3) & 0xFFFFFFFFFFFFF8)) >> v19) & 1) == 0)
      {
        swift_bridgeObjectRelease(v16);
        v9 = v26;
        a1 = v27;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease(v16);
    sub_1000126B0(a2, a3);
    sub_10005972C(*(_QWORD *)(*v26 + 48) + v21 * v19, v27, a3);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease(v16);
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v9);
    sub_10005972C(a2, (uint64_t)v15, a3);
    v31[0] = *v9;
    *v9 = 0x8000000000000000;
    sub_100A1EBC4((uint64_t)v15, v19, isUniquelyReferenced_nonNull_native, a3, v29, v28, v30);
    v24 = *v9;
    *v9 = v31[0];
    swift_bridgeObjectRelease(v24);
    sub_1000126EC(a2, a1, a3);
    return 1;
  }
}

uint64_t sub_100A0C410(_QWORD *a1, void *a2)
{
  return sub_100A104B8(a1, a2, &qword_10110FF48, (uint64_t (*)(_QWORD))type metadata accessor for SPFinderDisabledReason);
}

uint64_t sub_100A0C424(Swift::Int *a1, void *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  Swift::Int v12;
  Swift::Int v13;
  uint64_t v14;
  unint64_t v15;
  id v16;
  char v17;
  uint64_t v18;
  id v19;
  char v20;
  void *v21;
  id v22;
  Swift::Int v23;
  unint64_t v24;
  uint64_t v25;
  id v26;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v28;
  id v29;
  uint64_t v30;
  Swift::Int v31;

  v3 = v2;
  v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0)
      v7 = *v2;
    else
      v7 = v6 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*v2);
    v8 = a2;
    v9 = __CocoaSet.member(for:)(v8, v7);

    if (v9)
    {
      swift_bridgeObjectRelease();

      v30 = v9;
      v10 = sub_10000F4A0(0, &qword_1010F4810, SPLocationProvider_ptr);
      swift_unknownObjectRetain(v9);
      swift_dynamicCast(&v31, &v30, (char *)&type metadata for Swift.AnyObject + 8, v10, 7);
      *a1 = v31;
      swift_unknownObjectRelease(v9);
      return 0;
    }
    result = __CocoaSet.count.getter(v7);
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    v23 = sub_100C7FD00(v7, result + 1);
    v31 = v23;
    v24 = *(_QWORD *)(v23 + 16);
    if (*(_QWORD *)(v23 + 24) <= v24)
    {
      v28 = v24 + 1;
      v29 = v8;
      sub_100A1B1EC(v28, (uint64_t *)&unk_10110FF70);
      v25 = v31;
    }
    else
    {
      v25 = v23;
      v26 = v8;
    }
    sub_100C80794((uint64_t)v8, v25);
    *v3 = v25;
  }
  else
  {
    v12 = *(_QWORD *)(v6 + 40);
    swift_bridgeObjectRetain(v6);
    v13 = NSObject._rawHashValue(seed:)(v12);
    v14 = -1 << *(_BYTE *)(v6 + 32);
    v15 = v13 & ~v14;
    if (((*(_QWORD *)(v6 + 56 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) != 0)
    {
      sub_10000F4A0(0, &qword_1010F4810, SPLocationProvider_ptr);
      v16 = *(id *)(*(_QWORD *)(v6 + 48) + 8 * v15);
      v17 = static NSObject.== infix(_:_:)(v16, a2);

      if ((v17 & 1) != 0)
      {
LABEL_12:

        swift_bridgeObjectRelease();
        v21 = *(void **)(*(_QWORD *)(*v3 + 48) + 8 * v15);
        *a1 = (Swift::Int)v21;
        v22 = v21;
        return 0;
      }
      v18 = ~v14;
      while (1)
      {
        v15 = (v15 + 1) & v18;
        if (((*(_QWORD *)(v6 + 56 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) == 0)
          break;
        v19 = *(id *)(*(_QWORD *)(v6 + 48) + 8 * v15);
        v20 = static NSObject.== infix(_:_:)(v19, a2);

        if ((v20 & 1) != 0)
          goto LABEL_12;
      }
    }
    swift_bridgeObjectRelease();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v31 = *v3;
    *v3 = 0x8000000000000000;
    v8 = a2;
    sub_100A1E880((uint64_t)v8, v15, isUniquelyReferenced_nonNull_native, (uint64_t *)&unk_10110FF70, &qword_1010F4810, SPLocationProvider_ptr);
    *v3 = v31;
  }
  swift_bridgeObjectRelease();
  *a1 = (Swift::Int)v8;
  return 1;
}

uint64_t sub_100A0C6E0(_BYTE *a1, Swift::Int a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char isUniquelyReferenced_nonNull_native;
  uint64_t result;
  _QWORD *v11;
  _QWORD v13[9];

  v4 = *v2;
  Hasher.init(_seed:)(v13);
  v5 = sub_100DC66D8(a2);
  v7 = v6;
  swift_bridgeObjectRetain(v4);
  String.hash(into:)(v13, v5, v7);
  swift_bridgeObjectRelease();
  v8 = Hasher._finalize()() & ~(-1 << *(_BYTE *)(v4 + 32));
  if (((*(_QWORD *)(v4 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) != 0)
    __asm { BR              X9 }
  swift_bridgeObjectRelease();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v11);
  v13[0] = *v11;
  *v11 = 0x8000000000000000;
  sub_100A1EFFC(a2, v8, isUniquelyReferenced_nonNull_native);
  *v11 = v13[0];
  swift_bridgeObjectRelease();
  result = 1;
  *a1 = a2;
  return result;
}

uint64_t sub_100A0CDD4(Swift::Int *a1, void *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  Swift::Int v12;
  Swift::Int v13;
  uint64_t v14;
  unint64_t v15;
  id v16;
  char v17;
  uint64_t v18;
  id v19;
  char v20;
  void *v21;
  id v22;
  Swift::Int v23;
  unint64_t v24;
  uint64_t v25;
  id v26;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v28;
  id v29;
  uint64_t v30;
  Swift::Int v31;

  v3 = v2;
  v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0)
      v7 = *v2;
    else
      v7 = v6 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*v2);
    v8 = a2;
    v9 = __CocoaSet.member(for:)(v8, v7);

    if (v9)
    {
      swift_bridgeObjectRelease();

      v30 = v9;
      v10 = sub_10000F4A0(0, &qword_1011058A0, SPSafeLocation_ptr);
      swift_unknownObjectRetain(v9);
      swift_dynamicCast(&v31, &v30, (char *)&type metadata for Swift.AnyObject + 8, v10, 7);
      *a1 = v31;
      swift_unknownObjectRelease(v9);
      return 0;
    }
    result = __CocoaSet.count.getter(v7);
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    v23 = sub_100C7FD24(v7, result + 1);
    v31 = v23;
    v24 = *(_QWORD *)(v23 + 16);
    if (*(_QWORD *)(v23 + 24) <= v24)
    {
      v28 = v24 + 1;
      v29 = v8;
      sub_100A1B1EC(v28, (uint64_t *)&unk_10111C380);
      v25 = v31;
    }
    else
    {
      v25 = v23;
      v26 = v8;
    }
    sub_100C80794((uint64_t)v8, v25);
    *v3 = v25;
  }
  else
  {
    v12 = *(_QWORD *)(v6 + 40);
    swift_bridgeObjectRetain(v6);
    v13 = NSObject._rawHashValue(seed:)(v12);
    v14 = -1 << *(_BYTE *)(v6 + 32);
    v15 = v13 & ~v14;
    if (((*(_QWORD *)(v6 + 56 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) != 0)
    {
      sub_10000F4A0(0, &qword_1011058A0, SPSafeLocation_ptr);
      v16 = *(id *)(*(_QWORD *)(v6 + 48) + 8 * v15);
      v17 = static NSObject.== infix(_:_:)(v16, a2);

      if ((v17 & 1) != 0)
      {
LABEL_12:

        swift_bridgeObjectRelease();
        v21 = *(void **)(*(_QWORD *)(*v3 + 48) + 8 * v15);
        *a1 = (Swift::Int)v21;
        v22 = v21;
        return 0;
      }
      v18 = ~v14;
      while (1)
      {
        v15 = (v15 + 1) & v18;
        if (((*(_QWORD *)(v6 + 56 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) == 0)
          break;
        v19 = *(id *)(*(_QWORD *)(v6 + 48) + 8 * v15);
        v20 = static NSObject.== infix(_:_:)(v19, a2);

        if ((v20 & 1) != 0)
          goto LABEL_12;
      }
    }
    swift_bridgeObjectRelease();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v31 = *v3;
    *v3 = 0x8000000000000000;
    v8 = a2;
    sub_100A1E880((uint64_t)v8, v15, isUniquelyReferenced_nonNull_native, (uint64_t *)&unk_10111C380, &qword_1011058A0, SPSafeLocation_ptr);
    *v3 = v31;
  }
  swift_bridgeObjectRelease();
  *a1 = (Swift::Int)v8;
  return 1;
}

uint64_t sub_100A0D090(_BYTE *a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v5;
  Swift::UInt v6;
  Swift::Int v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  char isUniquelyReferenced_nonNull_native;
  _QWORD v14[9];

  v5 = *v2;
  Hasher.init(_seed:)(v14);
  v6 = qword_100E59228[(char)a2];
  Hasher._combine(_:)(v6);
  v7 = Hasher._finalize()();
  v8 = -1 << *(_BYTE *)(v5 + 32);
  v9 = v7 & ~v8;
  if (((*(_QWORD *)(v5 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
  {
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
    v14[0] = *v2;
    *v2 = 0x8000000000000000;
    sub_100A1F790(a2, v9, isUniquelyReferenced_nonNull_native);
    *v2 = v14[0];
    swift_bridgeObjectRelease();
    result = 1;
    goto LABEL_8;
  }
  v10 = *(_QWORD *)(v5 + 48);
  if (qword_100E59228[*(char *)(v10 + v9)] != v6)
  {
    v11 = ~v8;
    do
    {
      v9 = (v9 + 1) & v11;
      if (((*(_QWORD *)(v5 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
        goto LABEL_7;
    }
    while (qword_100E59228[*(char *)(v10 + v9)] != v6);
  }
  result = 0;
  LOBYTE(a2) = *(_BYTE *)(*(_QWORD *)(*v2 + 48) + v9);
LABEL_8:
  *a1 = a2;
  return result;
}

uint64_t sub_100A0D1CC(uint64_t a1, uint64_t *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  Swift::Int v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v25;
  _QWORD v27[4];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  int *v32;
  char *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t __s1;

  v3 = v2;
  v29 = a1;
  v5 = (int *)type metadata accessor for OwnerSharingCircle(0);
  v6 = *((_QWORD *)v5 - 1);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (_QWORD *)((char *)v27 - v10);
  v12 = *v2;
  Hasher.init(_seed:)(&__s1);
  v13 = *a2;
  v14 = a2[1];
  swift_bridgeObjectRetain(v12);
  sub_10001BBBC(v13, v14);
  Data.hash(into:)(&__s1, v13, v14);
  sub_10001BC14(v13, v14);
  v15 = (char *)a2 + v5[5];
  v16 = type metadata accessor for UUID(0);
  v17 = sub_100006204(&qword_1010F98B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v33 = v15;
  dispatch thunk of Hashable.hash(into:)(&__s1, v16, v17);
  v31 = (char *)a2 + v5[6];
  dispatch thunk of Hashable.hash(into:)(&__s1, v16, v17);
  v30 = v5[7];
  Hasher._combine(_:)(*((unsigned __int8 *)a2 + v30));
  v28 = v5[8];
  v18 = *(uint64_t *)((char *)a2 + v28);
  swift_bridgeObjectRetain(v18);
  sub_100A2FEA8((uint64_t)&__s1, v18);
  swift_bridgeObjectRelease();
  v32 = v5;
  v19 = v5[9];
  v34 = a2;
  v27[3] = v19;
  Hasher._combine(_:)(*((unsigned __int8 *)a2 + v19));
  v20 = Hasher._finalize()();
  v21 = -1 << *(_BYTE *)(v12 + 32);
  v22 = v20 & ~v21;
  v38 = v12 + 56;
  if (((*(_QWORD *)(v12 + 56 + ((v22 >> 3) & 0xFFFFFFFFFFFFF8)) >> v22) & 1) != 0)
  {
    v27[1] = v11;
    v27[2] = v3;
    v35 = ~v21;
    v37 = *(_QWORD *)(v6 + 72);
    v36 = v12;
    sub_10005972C(*(_QWORD *)(v12 + 48) + v37 * v22, (uint64_t)v9, type metadata accessor for OwnerSharingCircle);
    __asm { BR              X10 }
  }
  swift_bridgeObjectRelease();
  v23 = v29;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  v25 = (uint64_t)v34;
  sub_10005972C((uint64_t)v34, (uint64_t)v11, type metadata accessor for OwnerSharingCircle);
  __s1 = *v3;
  *v3 = 0x8000000000000000;
  sub_100A1F90C(v11, v22, isUniquelyReferenced_nonNull_native);
  *v3 = __s1;
  swift_bridgeObjectRelease();
  sub_1000126EC(v25, v23, type metadata accessor for OwnerSharingCircle);
  return 1;
}

uint64_t sub_100A0DE34(Swift::Int *a1, void *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  Swift::Int v12;
  Swift::Int v13;
  uint64_t v14;
  unint64_t v15;
  id v16;
  char v17;
  uint64_t v18;
  id v19;
  char v20;
  void *v21;
  id v22;
  Swift::Int v23;
  unint64_t v24;
  uint64_t v25;
  id v26;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v28;
  id v29;
  uint64_t v30;
  Swift::Int v31;

  v3 = v2;
  v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0)
      v7 = *v2;
    else
      v7 = v6 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*v2);
    v8 = a2;
    v9 = __CocoaSet.member(for:)(v8, v7);

    if (v9)
    {
      swift_bridgeObjectRelease();

      v30 = v9;
      v10 = sub_10000F4A0(0, (unint64_t *)&qword_1011100A0, SPHandle_ptr);
      swift_unknownObjectRetain(v9);
      swift_dynamicCast(&v31, &v30, (char *)&type metadata for Swift.AnyObject + 8, v10, 7);
      *a1 = v31;
      swift_unknownObjectRelease(v9);
      return 0;
    }
    result = __CocoaSet.count.getter(v7);
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    v23 = sub_100C7FD48(v7, result + 1);
    v31 = v23;
    v24 = *(_QWORD *)(v23 + 16);
    if (*(_QWORD *)(v23 + 24) <= v24)
    {
      v28 = v24 + 1;
      v29 = v8;
      sub_100A1B1EC(v28, (uint64_t *)&unk_10111C360);
      v25 = v31;
    }
    else
    {
      v25 = v23;
      v26 = v8;
    }
    sub_100C80794((uint64_t)v8, v25);
    *v3 = v25;
  }
  else
  {
    v12 = *(_QWORD *)(v6 + 40);
    swift_bridgeObjectRetain(v6);
    v13 = NSObject._rawHashValue(seed:)(v12);
    v14 = -1 << *(_BYTE *)(v6 + 32);
    v15 = v13 & ~v14;
    if (((*(_QWORD *)(v6 + 56 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) != 0)
    {
      sub_10000F4A0(0, (unint64_t *)&qword_1011100A0, SPHandle_ptr);
      v16 = *(id *)(*(_QWORD *)(v6 + 48) + 8 * v15);
      v17 = static NSObject.== infix(_:_:)(v16, a2);

      if ((v17 & 1) != 0)
      {
LABEL_12:

        swift_bridgeObjectRelease();
        v21 = *(void **)(*(_QWORD *)(*v3 + 48) + 8 * v15);
        *a1 = (Swift::Int)v21;
        v22 = v21;
        return 0;
      }
      v18 = ~v14;
      while (1)
      {
        v15 = (v15 + 1) & v18;
        if (((*(_QWORD *)(v6 + 56 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) == 0)
          break;
        v19 = *(id *)(*(_QWORD *)(v6 + 48) + 8 * v15);
        v20 = static NSObject.== infix(_:_:)(v19, a2);

        if ((v20 & 1) != 0)
          goto LABEL_12;
      }
    }
    swift_bridgeObjectRelease();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v31 = *v3;
    *v3 = 0x8000000000000000;
    v8 = a2;
    sub_100A1E880((uint64_t)v8, v15, isUniquelyReferenced_nonNull_native, (uint64_t *)&unk_10111C360, (unint64_t *)&qword_1011100A0, SPHandle_ptr);
    *v3 = v31;
  }
  swift_bridgeObjectRelease();
  *a1 = (Swift::Int)v8;
  return 1;
}

uint64_t sub_100A0E0F0(_BYTE *a1, Swift::Int a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char isUniquelyReferenced_nonNull_native;
  uint64_t result;
  _QWORD *v11;
  _QWORD v13[10];

  v4 = *v2;
  Hasher.init(_seed:)(v13);
  v5 = sub_100D79CA8(a2);
  v7 = v6;
  swift_bridgeObjectRetain(v4);
  String.hash(into:)(v13, v5, v7);
  swift_bridgeObjectRelease();
  v8 = Hasher._finalize()() & ~(-1 << *(_BYTE *)(v4 + 32));
  if (((*(_QWORD *)(v4 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) != 0)
    __asm { BR              X9 }
  swift_bridgeObjectRelease();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v11);
  v13[0] = *v11;
  *v11 = 0x8000000000000000;
  sub_100A204DC(a2, v8, isUniquelyReferenced_nonNull_native);
  *v11 = v13[0];
  swift_bridgeObjectRelease();
  result = 1;
  *a1 = a2;
  return result;
}

uint64_t sub_100A0E614(_QWORD *a1, void *a2)
{
  return sub_100A104B8(a1, a2, &qword_101110010, (uint64_t (*)(_QWORD))type metadata accessor for URLResourceKey);
}

uint64_t sub_100A0E628(_OWORD *a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v5;
  Swift::Int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _OWORD *v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint64_t result;
  char isUniquelyReferenced_nonNull_native;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;
  _OWORD *v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  int v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _OWORD v76[11];

  v5 = *v2;
  Hasher.init(_seed:)(v76);
  swift_bridgeObjectRetain(v5);
  sub_100AA5AA0((uint64_t)v76);
  v6 = Hasher._finalize()();
  v7 = -1 << *(_BYTE *)(v5 + 32);
  v8 = v6 & ~v7;
  v66 = v5 + 56;
  v56 = v2;
  v57 = a1;
  if (((*(_QWORD *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) != 0)
  {
    v63 = ~v7;
    v64 = *(_QWORD *)(v5 + 48);
    v74 = *(_QWORD *)(a2 + 8);
    v75 = *(_QWORD *)a2;
    while (1)
    {
      v9 = v64 + 160 * v8;
      v10 = *(_QWORD *)(v9 + 8);
      v12 = *(_QWORD *)(v9 + 16);
      v11 = *(_QWORD *)(v9 + 24);
      v13 = *(_QWORD *)(v9 + 32);
      v14 = *(_QWORD *)(v9 + 40);
      v15 = *(_QWORD *)(v9 + 48);
      v16 = *(_QWORD *)(v9 + 56);
      v17 = *(_QWORD *)(v9 + 64);
      v18 = *(_QWORD *)(v9 + 72);
      v72 = *(_QWORD *)(v9 + 88);
      v73 = *(_QWORD *)(v9 + 80);
      v70 = *(_QWORD *)(v9 + 104);
      v71 = *(_QWORD *)(v9 + 96);
      v68 = *(_QWORD *)(v9 + 120);
      v69 = *(_QWORD *)(v9 + 112);
      v67 = *(unsigned __int8 *)(v9 + 128);
      v65 = *(unsigned __int8 *)(v9 + 129);
      v61 = *(unsigned __int8 *)(v9 + 131);
      v62 = *(unsigned __int8 *)(v9 + 130);
      v60 = *(unsigned __int8 *)(v9 + 136);
      v19 = *(_QWORD *)v9 == v75 && v10 == v74;
      v58 = *(_QWORD *)(v9 + 152);
      v59 = *(_QWORD *)(v9 + 144);
      if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)(*(_QWORD *)v9, v10, v75, v74, 0) & 1) != 0)
      {
        if ((v20 = *(_QWORD *)(a2 + 16), v21 = *(_QWORD *)(a2 + 24), v12 == v20) && v11 == v21
          || (_stringCompareWithSmolCheck(_:_:expecting:)(v12, v11, v20, v21, 0) & 1) != 0)
        {
          if ((v22 = *(_QWORD *)(a2 + 32), v23 = *(_QWORD *)(a2 + 40), v13 == v22) && v14 == v23
            || (_stringCompareWithSmolCheck(_:_:expecting:)(v13, v14, v22, v23, 0) & 1) != 0)
          {
            if ((v24 = *(_QWORD *)(a2 + 48), v25 = *(_QWORD *)(a2 + 56), v15 == v24) && v16 == v25
              || (_stringCompareWithSmolCheck(_:_:expecting:)(v15, v16, v24, v25, 0) & 1) != 0)
            {
              if ((v26 = *(_QWORD *)(a2 + 64), v27 = *(_QWORD *)(a2 + 72), v17 == v26) && v18 == v27
                || (_stringCompareWithSmolCheck(_:_:expecting:)(v17, v18, v26, v27, 0) & 1) != 0)
              {
                if ((v28 = *(_QWORD *)(a2 + 80), v29 = *(_QWORD *)(a2 + 88), v73 == v28) && v72 == v29
                  || (_stringCompareWithSmolCheck(_:_:expecting:)(v73, v72, v28, v29, 0) & 1) != 0)
                {
                  if ((v30 = *(_QWORD *)(a2 + 96), v31 = *(_QWORD *)(a2 + 104), v71 == v30) && v70 == v31
                    || (_stringCompareWithSmolCheck(_:_:expecting:)(v71, v70, v30, v31, 0) & 1) != 0)
                  {
                    if ((v32 = *(_QWORD *)(a2 + 112), v33 = *(_QWORD *)(a2 + 120), v69 == v32) && v68 == v33
                      || (_stringCompareWithSmolCheck(_:_:expecting:)(v69, v68, v32, v33, 0) & 1) != 0)
                    {
                      if (((v67 ^ *(unsigned __int8 *)(a2 + 128)) & 1) == 0
                        && ((v65 ^ *(unsigned __int8 *)(a2 + 129)) & 1) == 0
                        && ((v62 ^ *(unsigned __int8 *)(a2 + 130)) & 1) == 0
                        && ((v61 ^ *(unsigned __int8 *)(a2 + 131)) & 1) == 0
                        && v60 == *(unsigned __int8 *)(a2 + 136))
                      {
                        v34 = *(_QWORD *)(a2 + 144);
                        v35 = *(_QWORD *)(a2 + 152);
                        if (v59 == v34 && v58 == v35)
                          break;
                        if ((_stringCompareWithSmolCheck(_:_:expecting:)(v59, v58, v34, v35, 0) & 1) != 0)
                          break;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      v8 = (v8 + 1) & v63;
      if (((*(_QWORD *)(v66 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
        goto LABEL_39;
    }
    swift_bridgeObjectRelease();
    sub_10008B200((_QWORD *)a2);
    v36 = (_OWORD *)(*(_QWORD *)(*v56 + 48) + 160 * v8);
    v37 = v36[2];
    v38 = v36[3];
    v39 = v36[5];
    v76[4] = v36[4];
    v76[5] = v39;
    v76[3] = v38;
    v40 = v36[9];
    v42 = v36[6];
    v41 = v36[7];
    v76[8] = v36[8];
    v76[9] = v40;
    v76[6] = v42;
    v76[7] = v41;
    v43 = v36[1];
    v76[0] = *v36;
    v76[1] = v43;
    v76[2] = v37;
    v44 = v36[7];
    v57[6] = v36[6];
    v57[7] = v44;
    v45 = v36[9];
    v57[8] = v36[8];
    v57[9] = v45;
    v46 = v36[3];
    v57[2] = v36[2];
    v57[3] = v46;
    v47 = v36[5];
    v57[4] = v36[4];
    v57[5] = v47;
    v48 = v36[1];
    *v57 = *v36;
    v57[1] = v48;
    sub_10008B118(v76);
    return 0;
  }
  else
  {
LABEL_39:
    swift_bridgeObjectRelease();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v56);
    *(_QWORD *)&v76[0] = *v56;
    *v56 = 0x8000000000000000;
    sub_10008B118((_QWORD *)a2);
    sub_100A20A78(a2, v8, isUniquelyReferenced_nonNull_native);
    *v56 = *(_QWORD *)&v76[0];
    swift_bridgeObjectRelease();
    v51 = *(_OWORD *)(a2 + 112);
    v57[6] = *(_OWORD *)(a2 + 96);
    v57[7] = v51;
    v52 = *(_OWORD *)(a2 + 144);
    v57[8] = *(_OWORD *)(a2 + 128);
    v57[9] = v52;
    v53 = *(_OWORD *)(a2 + 48);
    v57[2] = *(_OWORD *)(a2 + 32);
    v57[3] = v53;
    v54 = *(_OWORD *)(a2 + 80);
    v57[4] = *(_OWORD *)(a2 + 64);
    v57[5] = v54;
    v55 = *(_OWORD *)(a2 + 16);
    result = 1;
    *v57 = *(_OWORD *)a2;
    v57[1] = v55;
  }
  return result;
}

uint64_t sub_100A0EA5C(uint64_t a1, char *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(_QWORD, _QWORD, _QWORD);
  uint64_t v21;
  void (*v22)(_QWORD, _QWORD, _QWORD);
  uint64_t v23;
  char v24;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  char isUniquelyReferenced_nonNull_native;
  char *v28;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;

  v3 = v2;
  v6 = type metadata accessor for MACAddress(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v3;
  v11 = *(_QWORD *)(*v3 + 40);
  v13 = sub_100006204((unint64_t *)&unk_101110150, v12, (uint64_t)&protocol conformance descriptor for MACAddress);
  swift_bridgeObjectRetain(v10);
  v34 = a2;
  v14 = dispatch thunk of Hashable._rawHashValue(seed:)(v11, v6, v13);
  v15 = -1 << *(_BYTE *)(v10 + 32);
  v16 = v14 & ~v15;
  v17 = v10;
  v18 = v10 + 56;
  if (((*(_QWORD *)(v10 + 56 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) != 0)
  {
    v30 = v3;
    v31 = a1;
    v32 = ~v15;
    v33 = v7;
    v19 = *(_QWORD *)(v7 + 72);
    v20 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    while (1)
    {
      v21 = v17;
      v22 = v20;
      v20(v9, *(_QWORD *)(v17 + 48) + v19 * v16, v6);
      v23 = sub_100006204(&qword_10111C3A0, (uint64_t (*)(uint64_t))&type metadata accessor for MACAddress, (uint64_t)&protocol conformance descriptor for MACAddress);
      v24 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v34, v6, v23);
      v25 = *(void (**)(char *, uint64_t))(v33 + 8);
      v25(v9, v6);
      if ((v24 & 1) != 0)
        break;
      v16 = (v16 + 1) & v32;
      v17 = v21;
      v20 = v22;
      if (((*(_QWORD *)(v18 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        v3 = v30;
        a1 = v31;
        v26 = v33;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    v25(v34, v6);
    v22(v31, *(_QWORD *)(*v30 + 48) + v19 * v16, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    v20 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    v26 = v7;
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v28 = v34;
    v20(v9, v34, v6);
    v35 = *v3;
    *v3 = 0x8000000000000000;
    sub_100A20E60((uint64_t)v9, v16, isUniquelyReferenced_nonNull_native);
    *v3 = v35;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, char *, uint64_t))(v26 + 32))(a1, v28, v6);
    return 1;
  }
}

uint64_t sub_100A0ECB8(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v7;
  Swift::Int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  BOOL v21;
  char isUniquelyReferenced_nonNull_native;
  _QWORD v23[9];

  v7 = *v3;
  Hasher.init(_seed:)(v23);
  swift_bridgeObjectRetain(v7);
  String.hash(into:)(v23, a2, a3);
  v8 = Hasher._finalize()();
  v9 = -1 << *(_BYTE *)(v7 + 32);
  v10 = v8 & ~v9;
  if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = *(_QWORD *)(v7 + 48);
    v12 = (_QWORD *)(v11 + 16 * v10);
    v13 = v12[1];
    v14 = *v12 == a2 && v13 == a3;
    if (v14 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v12, v13, a2, a3, 0) & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v15 = (uint64_t *)(*(_QWORD *)(*v3 + 48) + 16 * v10);
      v16 = v15[1];
      *a1 = *v15;
      a1[1] = v16;
      swift_bridgeObjectRetain(v16);
      return 0;
    }
    v18 = ~v9;
    while (1)
    {
      v10 = (v10 + 1) & v18;
      if (((*(_QWORD *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
        break;
      v19 = (_QWORD *)(v11 + 16 * v10);
      v20 = v19[1];
      v21 = *v19 == a2 && v20 == a3;
      if (v21 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v19, v20, a2, a3, 0) & 1) != 0)
        goto LABEL_7;
    }
  }
  swift_bridgeObjectRelease();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  v23[0] = *v3;
  *v3 = 0x8000000000000000;
  swift_bridgeObjectRetain(a3);
  sub_100A210B4(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  *v3 = v23[0];
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

uint64_t sub_100A0EE64(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  Swift::Int v7;
  Swift::Int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char v12;
  char isUniquelyReferenced_nonNull_native;
  __int128 v14;
  uint64_t v16;
  _BYTE v17[40];

  v3 = v2;
  v6 = *v2;
  v7 = *(_QWORD *)(*v2 + 40);
  swift_bridgeObjectRetain(v6);
  v8 = AnyHashable._rawHashValue(seed:)(v7);
  v9 = -1 << *(_BYTE *)(v6 + 32);
  v10 = v8 & ~v9;
  if (((*(_QWORD *)(v6 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = ~v9;
    while (1)
    {
      sub_10010F9DC(*(_QWORD *)(v6 + 48) + 40 * v10, (uint64_t)v17);
      v12 = static AnyHashable.== infix(_:_:)(v17, a2);
      sub_1002EAB4C((uint64_t)v17);
      if ((v12 & 1) != 0)
        break;
      v10 = (v10 + 1) & v11;
      if (((*(_QWORD *)(v6 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
        goto LABEL_5;
    }
    swift_bridgeObjectRelease();
    sub_1002EAB4C(a2);
    sub_10010F9DC(*(_QWORD *)(*v3 + 48) + 40 * v10, a1);
    return 0;
  }
  else
  {
LABEL_5:
    swift_bridgeObjectRelease();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    sub_10010F9DC(a2, (uint64_t)v17);
    v16 = *v3;
    *v3 = 0x8000000000000000;
    sub_100A2124C((uint64_t)v17, v10, isUniquelyReferenced_nonNull_native);
    *v3 = v16;
    swift_bridgeObjectRelease();
    v14 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v14;
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    return 1;
  }
}

uint64_t sub_100A0EFDC(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  Swift::Int v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char isUniquelyReferenced_nonNull_native;
  _QWORD v23[7];
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t __s1;

  v3 = v2;
  v6 = type metadata accessor for OwnedBeaconGroup(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)v23 - v11;
  v13 = *v3;
  Hasher.init(_seed:)(&__s1);
  v24 = a2;
  v25 = v6;
  v14 = a2 + *(int *)(v6 + 24);
  v15 = type metadata accessor for UUID(0);
  v16 = sub_100006204(&qword_1010F98B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  swift_bridgeObjectRetain(v13);
  v23[5] = v14;
  dispatch thunk of Hashable.hash(into:)(&__s1, v15, v16);
  v17 = Hasher._finalize()();
  v18 = -1 << *(_BYTE *)(v13 + 32);
  v19 = v17 & ~v18;
  v28 = v13 + 56;
  if (((*(_QWORD *)(v13 + 56 + ((v19 >> 3) & 0xFFFFFFFFFFFFF8)) >> v19) & 1) != 0)
  {
    v23[1] = v12;
    v23[2] = v3;
    v23[3] = a1;
    v26 = ~v18;
    v27 = *(_QWORD *)(v7 + 72);
    v23[6] = v13;
    sub_10005972C(*(_QWORD *)(v13 + 48) + v27 * v19, (uint64_t)v10, type metadata accessor for OwnedBeaconGroup);
    __asm { BR              X10 }
  }
  swift_bridgeObjectRelease();
  v20 = v24;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  sub_10005972C(v20, (uint64_t)v12, type metadata accessor for OwnedBeaconGroup);
  __s1 = *v3;
  *v3 = 0x8000000000000000;
  sub_100A213B4((uint64_t)v12, v19, isUniquelyReferenced_nonNull_native);
  *v3 = __s1;
  swift_bridgeObjectRelease();
  sub_1000126EC(v20, a1, type metadata accessor for OwnedBeaconGroup);
  return 1;
}

uint64_t sub_100A0FBB0(uint64_t *a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v3 = v2;
  v29 = a2;
  v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0)
      v7 = *v2;
    else
      v7 = v6 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*v2);
    v8 = swift_retain();
    v9 = __CocoaSet.member(for:)(v8, v7);
    swift_release();
    if (v9)
    {
      swift_bridgeObjectRelease();
      swift_release();
      v27 = v9;
      swift_unknownObjectRetain(v9);
      v10 = sub_10001A9A8((uint64_t *)&unk_1010F77F0);
      swift_dynamicCast(&v28, &v27, (char *)&type metadata for Swift.AnyObject + 8, v10, 7);
      *a1 = v28;
      swift_unknownObjectRelease(v9);
      return 0;
    }
    result = __CocoaSet.count.getter(v7);
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    v23 = sub_100C7FD6C(v7, result + 1);
    v28 = v23;
    v24 = *(_QWORD *)(v23 + 16);
    if (*(_QWORD *)(v23 + 24) <= v24)
    {
      v26 = v24 + 1;
      swift_retain();
      sub_100A1852C(v26, &qword_101110008, (uint64_t *)&unk_1010F77F0, (unint64_t *)&unk_10111C070);
      v25 = v28;
    }
    else
    {
      v25 = v23;
      swift_retain();
    }
    sub_100C807AC(a2, v25);
    *v3 = v25;
    swift_bridgeObjectRelease();
    *a1 = a2;
    return 1;
  }
  v12 = *(_QWORD *)(v6 + 40);
  swift_bridgeObjectRetain(*v2);
  v13 = sub_10001A9A8((uint64_t *)&unk_1010F77F0);
  v14 = sub_1000193A4((unint64_t *)&unk_10111C070, (uint64_t *)&unk_1010F77F0, (const char *)&protocol conformance descriptor for XPCSession<A>);
  v15 = dispatch thunk of Hashable._rawHashValue(seed:)(v12, v13, v14);
  v16 = -1 << *(_BYTE *)(v6 + 32);
  v17 = v15 & ~v16;
  if (((*(_QWORD *)(v6 + 56 + ((v17 >> 3) & 0xFFFFFFFFFFFFF8)) >> v17) & 1) == 0)
  {
LABEL_11:
    swift_bridgeObjectRelease();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
    v21 = v29;
    v28 = *v2;
    *v2 = 0x8000000000000000;
    v22 = swift_retain();
    sub_10001D02C(v22, v17, isUniquelyReferenced_nonNull_native, &qword_101110008, (uint64_t *)&unk_1010F77F0, (unint64_t *)&unk_10111C070, &qword_101110000);
    *v2 = v28;
    swift_bridgeObjectRelease();
    *a1 = v21;
    return 1;
  }
  v18 = ~v16;
  v19 = sub_1000193A4(&qword_101110000, (uint64_t *)&unk_1010F77F0, (const char *)&protocol conformance descriptor for XPCSession<A>);
  while (1)
  {
    v28 = *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v17);
    if ((dispatch thunk of static Equatable.== infix(_:_:)(&v28, &v29, v13, v19) & 1) != 0)
      break;
    v17 = (v17 + 1) & v18;
    if (((*(_QWORD *)(v6 + 56 + ((v17 >> 3) & 0xFFFFFFFFFFFFF8)) >> v17) & 1) == 0)
      goto LABEL_11;
  }
  swift_release();
  swift_bridgeObjectRelease();
  *a1 = *(_QWORD *)(*(_QWORD *)(*v2 + 48) + 8 * v17);
  swift_retain();
  return 0;
}

uint64_t sub_100A0FEB0(_QWORD *a1, void *a2)
{
  return sub_100A104B8(a1, a2, &qword_1010FA430, (uint64_t (*)(_QWORD))type metadata accessor for SPBeaconType);
}

uint64_t sub_100A0FEC4(uint64_t *a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v5;
  Swift::Int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v17;
  __int128 v18[4];

  v5 = *v2;
  Hasher.init(_seed:)(v18);
  swift_bridgeObjectRetain(v5);
  sub_100AA422C(v18, a2);
  v6 = Hasher._finalize()();
  v7 = -1 << *(_BYTE *)(v5 + 32);
  v8 = v6 & ~v7;
  if (((*(_QWORD *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) != 0)
  {
    swift_bridgeObjectRetain(*(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v8));
    v10 = sub_10051E5DC(v9, a2);
    swift_bridgeObjectRelease();
    if ((v10 & 1) != 0)
    {
LABEL_6:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v14 = *(_QWORD *)(*(_QWORD *)(*v2 + 48) + 8 * v8);
      *a1 = v14;
      swift_bridgeObjectRetain(v14);
      return 0;
    }
    v11 = ~v7;
    while (1)
    {
      v8 = (v8 + 1) & v11;
      if (((*(_QWORD *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
        break;
      swift_bridgeObjectRetain(*(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v8));
      v13 = sub_10051E5DC(v12, a2);
      swift_bridgeObjectRelease();
      if ((v13 & 1) != 0)
        goto LABEL_6;
    }
  }
  swift_bridgeObjectRelease();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  *(_QWORD *)&v18[0] = *v2;
  *v2 = 0x8000000000000000;
  swift_bridgeObjectRetain(a2);
  sub_100A21F04(v17, v8, isUniquelyReferenced_nonNull_native);
  *v2 = *(_QWORD *)&v18[0];
  swift_bridgeObjectRelease();
  *a1 = a2;
  return 1;
}

uint64_t sub_100A10054(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  Swift::Int v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  int v36;
  int v37;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  _QWORD *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD v56[10];

  v5 = type metadata accessor for BeaconStatus(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v54 = (uint64_t)&v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v44 - v10;
  v12 = __chkstk_darwin(v9);
  v14 = (char *)&v44 - v13;
  v15 = __chkstk_darwin(v12);
  v53 = (uint64_t)&v44 - v16;
  v17 = __chkstk_darwin(v15);
  v19 = (char *)&v44 - v18;
  __chkstk_darwin(v17);
  v46 = (char *)&v44 - v20;
  v47 = v2;
  v21 = *v2;
  Hasher.init(_seed:)(v56);
  v55 = type metadata accessor for UUID(0);
  v22 = sub_100006204(&qword_1010F98B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  swift_bridgeObjectRetain(v21);
  dispatch thunk of Hashable.hash(into:)(v56, v55, v22);
  v49 = v5;
  v55 = a2;
  v23 = type metadata accessor for Date(0);
  v24 = sub_100006204((unint64_t *)&unk_1010ED800, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  dispatch thunk of Hashable.hash(into:)(v56, v23, v24);
  v25 = Hasher._finalize()();
  v26 = -1 << *(_BYTE *)(v21 + 32);
  v27 = v25 & ~v26;
  v28 = v21;
  v52 = v21 + 56;
  if (((*(_QWORD *)(v21 + 56 + ((v27 >> 3) & 0xFFFFFFFFFFFFF8)) >> v27) & 1) == 0)
  {
    swift_bridgeObjectRelease();
    v40 = v47;
    v39 = a1;
    goto LABEL_12;
  }
  v45 = a1;
  v50 = ~v26;
  v51 = *(_QWORD *)(v6 + 72);
  v48 = v14;
  v29 = v55;
  do
  {
    v30 = v28;
    v31 = v51 * v27;
    sub_10005972C(*(_QWORD *)(v28 + 48) + v51 * v27, (uint64_t)v19, type metadata accessor for BeaconStatus);
    v32 = static UUID.== infix(_:_:)(v19, v29);
    v33 = v53;
    sub_10005972C((uint64_t)v19, v53, type metadata accessor for BeaconStatus);
    sub_10005972C(v29, (uint64_t)v14, type metadata accessor for BeaconStatus);
    if ((v32 & 1) == 0)
    {
      sub_1000126B0((uint64_t)v14, type metadata accessor for BeaconStatus);
      sub_1000126B0(v33, type metadata accessor for BeaconStatus);
      sub_10005972C((uint64_t)v19, (uint64_t)v11, type metadata accessor for BeaconStatus);
      sub_10005972C(v55, v54, type metadata accessor for BeaconStatus);
LABEL_4:
      sub_1000126B0(v54, type metadata accessor for BeaconStatus);
      sub_1000126B0((uint64_t)v11, type metadata accessor for BeaconStatus);
      sub_1000126B0((uint64_t)v19, type metadata accessor for BeaconStatus);
      v28 = v30;
      goto LABEL_5;
    }
    v34 = static Date.== infix(_:_:)(v33 + *(int *)(v49 + 24), &v14[*(int *)(v49 + 24)]);
    sub_1000126B0((uint64_t)v14, type metadata accessor for BeaconStatus);
    sub_1000126B0(v33, type metadata accessor for BeaconStatus);
    sub_10005972C((uint64_t)v19, (uint64_t)v11, type metadata accessor for BeaconStatus);
    sub_10005972C(v55, v54, type metadata accessor for BeaconStatus);
    if ((v34 & 1) == 0)
      goto LABEL_4;
    v35 = *(int *)(v49 + 20);
    v36 = v11[v35];
    v37 = *(unsigned __int8 *)(v54 + v35);
    sub_1000126B0(v54, type metadata accessor for BeaconStatus);
    sub_1000126B0((uint64_t)v11, type metadata accessor for BeaconStatus);
    sub_1000126B0((uint64_t)v19, type metadata accessor for BeaconStatus);
    v14 = v48;
    v28 = v30;
    if (v36 == v37)
    {
      swift_bridgeObjectRelease();
      sub_1000126B0(v55, type metadata accessor for BeaconStatus);
      sub_10005972C(*(_QWORD *)(*v47 + 48) + v31, v45, type metadata accessor for BeaconStatus);
      return 0;
    }
LABEL_5:
    v27 = (v27 + 1) & v50;
  }
  while (((*(_QWORD *)(v52 + ((v27 >> 3) & 0xFFFFFFFFFFFFF8)) >> v27) & 1) != 0);
  swift_bridgeObjectRelease();
  v39 = v45;
  v40 = v47;
LABEL_12:
  v41 = (uint64_t)v46;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v40);
  v43 = v55;
  sub_10005972C(v55, v41, type metadata accessor for BeaconStatus);
  v56[0] = *v40;
  *v40 = 0x8000000000000000;
  sub_100A22090(v41, v27, isUniquelyReferenced_nonNull_native);
  *v40 = v56[0];
  swift_bridgeObjectRelease();
  sub_1000126EC(v43, v39, type metadata accessor for BeaconStatus);
  return 1;
}

uint64_t sub_100A104A4(_QWORD *a1, void *a2)
{
  return sub_100A104B8(a1, a2, (uint64_t *)&unk_101110100, (uint64_t (*)(_QWORD))type metadata accessor for SPBeaconTaskName);
}

uint64_t sub_100A104B8(_QWORD *a1, void *a2, uint64_t *a3, uint64_t (*a4)(_QWORD))
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  Swift::Int v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  char v30;
  char isUniquelyReferenced_nonNull_native;
  id v32;
  uint64_t v33;
  void *v35;
  id v36;
  _QWORD v39[9];

  v5 = v4;
  v8 = *v4;
  v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
  v11 = v10;
  Hasher.init(_seed:)(v39);
  swift_bridgeObjectRetain(v8);
  String.hash(into:)(v39, v9, v11);
  v12 = Hasher._finalize()();
  swift_bridgeObjectRelease(v11);
  v13 = -1 << *(_BYTE *)(v8 + 32);
  v14 = v12 & ~v13;
  if (((*(_QWORD *)(v8 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) == 0)
  {
LABEL_15:
    swift_bridgeObjectRelease(v8);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v5);
    v39[0] = *v5;
    *v5 = 0x8000000000000000;
    v32 = a2;
    sub_100A1EDC0(v32, v14, isUniquelyReferenced_nonNull_native, a3, a4);
    v33 = *v5;
    *v5 = v39[0];
    swift_bridgeObjectRelease(v33);
    *a1 = v32;
    return 1;
  }
  v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * v14));
  v17 = v16;
  v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
  if (v15 == v18 && v17 == v19)
  {
LABEL_16:
    swift_bridgeObjectRelease_n(v17, 2);
  }
  else
  {
    v21 = v19;
    v22 = _stringCompareWithSmolCheck(_:_:expecting:)(v15, v17, v18, v19, 0);
    swift_bridgeObjectRelease(v17);
    swift_bridgeObjectRelease(v21);
    if ((v22 & 1) == 0)
    {
      v23 = ~v13;
      do
      {
        v14 = (v14 + 1) & v23;
        if (((*(_QWORD *)(v8 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) == 0)
          goto LABEL_15;
        v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * v14));
        v17 = v25;
        v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
        if (v24 == v26 && v17 == v27)
          goto LABEL_16;
        v29 = v27;
        v30 = _stringCompareWithSmolCheck(_:_:expecting:)(v24, v17, v26, v27, 0);
        swift_bridgeObjectRelease(v17);
        swift_bridgeObjectRelease(v29);
      }
      while ((v30 & 1) == 0);
    }
  }

  swift_bridgeObjectRelease(v8);
  v35 = *(void **)(*(_QWORD *)(*v5 + 48) + 8 * v14);
  *a1 = v35;
  v36 = v35;
  return 0;
}

uint64_t sub_100A106E8(Swift::Int *a1, void *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  Swift::Int v12;
  Swift::Int v13;
  uint64_t v14;
  unint64_t v15;
  id v16;
  char v17;
  uint64_t v18;
  id v19;
  char v20;
  void *v21;
  id v22;
  Swift::Int v23;
  unint64_t v24;
  uint64_t v25;
  id v26;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v28;
  id v29;
  uint64_t v30;
  Swift::Int v31;

  v3 = v2;
  v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0)
      v7 = *v2;
    else
      v7 = v6 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*v2);
    v8 = a2;
    v9 = __CocoaSet.member(for:)(v8, v7);

    if (v9)
    {
      swift_bridgeObjectRelease();

      v30 = v9;
      v10 = sub_10000F4A0(0, &qword_1010F2158, SPBeacon_ptr);
      swift_unknownObjectRetain(v9);
      swift_dynamicCast(&v31, &v30, (char *)&type metadata for Swift.AnyObject + 8, v10, 7);
      *a1 = v31;
      swift_unknownObjectRelease(v9);
      return 0;
    }
    result = __CocoaSet.count.getter(v7);
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    v23 = sub_100C7FFA4(v7, result + 1);
    v31 = v23;
    v24 = *(_QWORD *)(v23 + 16);
    if (*(_QWORD *)(v23 + 24) <= v24)
    {
      v28 = v24 + 1;
      v29 = v8;
      sub_100A1B1EC(v28, (uint64_t *)&unk_1011100E0);
      v25 = v31;
    }
    else
    {
      v25 = v23;
      v26 = v8;
    }
    sub_100C80794((uint64_t)v8, v25);
    *v3 = v25;
  }
  else
  {
    v12 = *(_QWORD *)(v6 + 40);
    swift_bridgeObjectRetain(v6);
    v13 = NSObject._rawHashValue(seed:)(v12);
    v14 = -1 << *(_BYTE *)(v6 + 32);
    v15 = v13 & ~v14;
    if (((*(_QWORD *)(v6 + 56 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) != 0)
    {
      sub_10000F4A0(0, &qword_1010F2158, SPBeacon_ptr);
      v16 = *(id *)(*(_QWORD *)(v6 + 48) + 8 * v15);
      v17 = static NSObject.== infix(_:_:)(v16, a2);

      if ((v17 & 1) != 0)
      {
LABEL_12:

        swift_bridgeObjectRelease();
        v21 = *(void **)(*(_QWORD *)(*v3 + 48) + 8 * v15);
        *a1 = (Swift::Int)v21;
        v22 = v21;
        return 0;
      }
      v18 = ~v14;
      while (1)
      {
        v15 = (v15 + 1) & v18;
        if (((*(_QWORD *)(v6 + 56 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) == 0)
          break;
        v19 = *(id *)(*(_QWORD *)(v6 + 48) + 8 * v15);
        v20 = static NSObject.== infix(_:_:)(v19, a2);

        if ((v20 & 1) != 0)
          goto LABEL_12;
      }
    }
    swift_bridgeObjectRelease();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v31 = *v3;
    *v3 = 0x8000000000000000;
    v8 = a2;
    sub_100A1E880((uint64_t)v8, v15, isUniquelyReferenced_nonNull_native, (uint64_t *)&unk_1011100E0, &qword_1010F2158, SPBeacon_ptr);
    *v3 = v31;
  }
  swift_bridgeObjectRelease();
  *a1 = (Swift::Int)v8;
  return 1;
}

uint64_t sub_100A109A4(uint64_t a1, char *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(_QWORD, _QWORD, _QWORD);
  uint64_t v21;
  void (*v22)(_QWORD, _QWORD, _QWORD);
  uint64_t v23;
  char v24;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  char isUniquelyReferenced_nonNull_native;
  char *v28;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;

  v3 = v2;
  v6 = type metadata accessor for Destination(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v3;
  v11 = *(_QWORD *)(*v3 + 40);
  v13 = sub_100006204(&qword_1011100B8, v12, (uint64_t)&protocol conformance descriptor for Destination);
  swift_bridgeObjectRetain(v10);
  v34 = a2;
  v14 = dispatch thunk of Hashable._rawHashValue(seed:)(v11, v6, v13);
  v15 = -1 << *(_BYTE *)(v10 + 32);
  v16 = v14 & ~v15;
  v17 = v10;
  v18 = v10 + 56;
  if (((*(_QWORD *)(v10 + 56 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) != 0)
  {
    v30 = v3;
    v31 = a1;
    v32 = ~v15;
    v33 = v7;
    v19 = *(_QWORD *)(v7 + 72);
    v20 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    while (1)
    {
      v21 = v17;
      v22 = v20;
      v20(v9, *(_QWORD *)(v17 + 48) + v19 * v16, v6);
      v23 = sub_100006204(&qword_1011100C0, (uint64_t (*)(uint64_t))&type metadata accessor for Destination, (uint64_t)&protocol conformance descriptor for Destination);
      v24 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v34, v6, v23);
      v25 = *(void (**)(char *, uint64_t))(v33 + 8);
      v25(v9, v6);
      if ((v24 & 1) != 0)
        break;
      v16 = (v16 + 1) & v32;
      v17 = v21;
      v20 = v22;
      if (((*(_QWORD *)(v18 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        v3 = v30;
        a1 = v31;
        v26 = v33;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    v25(v34, v6);
    v22(v31, *(_QWORD *)(*v30 + 48) + v19 * v16, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    v20 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    v26 = v7;
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v28 = v34;
    v20(v9, v34, v6);
    v35 = *v3;
    *v3 = 0x8000000000000000;
    sub_100A22718((uint64_t)v9, v16, isUniquelyReferenced_nonNull_native);
    *v3 = v35;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, char *, uint64_t))(v26 + 32))(a1, v28, v6);
    return 1;
  }
}

uint64_t sub_100A10C00(_BYTE *a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v5;
  Swift::Int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  char isUniquelyReferenced_nonNull_native;
  _QWORD v13[9];

  v5 = *v2;
  Hasher.init(_seed:)(v13);
  Hasher._combine(_:)(a2);
  v6 = Hasher._finalize()();
  v7 = -1 << *(_BYTE *)(v5 + 32);
  v8 = v6 & ~v7;
  if (((*(_QWORD *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
  {
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
    v13[0] = *v2;
    *v2 = 0x8000000000000000;
    sub_100A2296C(a2, v8, isUniquelyReferenced_nonNull_native);
    *v2 = v13[0];
    swift_bridgeObjectRelease();
    result = 1;
    goto LABEL_8;
  }
  v9 = *(_QWORD *)(v5 + 48);
  if (*(unsigned __int8 *)(v9 + v8) != a2)
  {
    v10 = ~v7;
    do
    {
      v8 = (v8 + 1) & v10;
      if (((*(_QWORD *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
        goto LABEL_7;
    }
    while (*(unsigned __int8 *)(v9 + v8) != a2);
  }
  result = 0;
  LOBYTE(a2) = *(_BYTE *)(*(_QWORD *)(*v2 + 48) + v8);
LABEL_8:
  *a1 = a2;
  return result;
}

uint64_t sub_100A10D1C(_BYTE *a1, uint64_t a2)
{
  return sub_100A11964(a1, a2, (uint64_t *)&unk_101110040, (uint64_t)&type metadata for ShareType);
}

uint64_t sub_100A10D30(uint64_t *a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v3 = v2;
  v29 = a2;
  v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0)
      v7 = *v2;
    else
      v7 = v6 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*v2);
    v8 = swift_retain();
    v9 = __CocoaSet.member(for:)(v8, v7);
    swift_release();
    if (v9)
    {
      swift_bridgeObjectRelease();
      swift_release();
      v27 = v9;
      v10 = type metadata accessor for AnyCancellable(0);
      swift_unknownObjectRetain(v9);
      swift_dynamicCast(&v28, &v27, (char *)&type metadata for Swift.AnyObject + 8, v10, 7);
      *a1 = v28;
      swift_unknownObjectRelease(v9);
      return 0;
    }
    result = __CocoaSet.count.getter(v7);
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    v23 = sub_100C7FFC8(v7, result + 1);
    v28 = v23;
    v24 = *(_QWORD *)(v23 + 16);
    if (*(_QWORD *)(v23 + 24) <= v24)
    {
      v26 = v24 + 1;
      swift_retain();
      sub_100A19638(v26);
      v25 = v28;
    }
    else
    {
      v25 = v23;
      swift_retain();
    }
    sub_100C809CC(a2, v25);
    *v3 = v25;
    swift_bridgeObjectRelease();
    *a1 = a2;
    return 1;
  }
  v12 = *(_QWORD *)(v6 + 40);
  v13 = type metadata accessor for AnyCancellable(0);
  v14 = sub_100006204((unint64_t *)&unk_101110200, (uint64_t (*)(uint64_t))&type metadata accessor for AnyCancellable, (uint64_t)&protocol conformance descriptor for AnyCancellable);
  swift_bridgeObjectRetain(v6);
  v15 = dispatch thunk of Hashable._rawHashValue(seed:)(v12, v13, v14);
  v16 = -1 << *(_BYTE *)(v6 + 32);
  v17 = v15 & ~v16;
  if (((*(_QWORD *)(v6 + 56 + ((v17 >> 3) & 0xFFFFFFFFFFFFF8)) >> v17) & 1) == 0)
  {
LABEL_11:
    swift_bridgeObjectRelease();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
    v21 = v29;
    v28 = *v2;
    *v2 = 0x8000000000000000;
    v22 = swift_retain();
    sub_100A22ACC(v22, v17, isUniquelyReferenced_nonNull_native);
    *v2 = v28;
    swift_bridgeObjectRelease();
    *a1 = v21;
    return 1;
  }
  v18 = ~v16;
  v19 = sub_100006204((unint64_t *)&unk_10111C3C0, (uint64_t (*)(uint64_t))&type metadata accessor for AnyCancellable, (uint64_t)&protocol conformance descriptor for AnyCancellable);
  while (1)
  {
    v28 = *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v17);
    if ((dispatch thunk of static Equatable.== infix(_:_:)(&v28, &v29, v13, v19) & 1) != 0)
      break;
    v17 = (v17 + 1) & v18;
    if (((*(_QWORD *)(v6 + 56 + ((v17 >> 3) & 0xFFFFFFFFFFFFF8)) >> v17) & 1) == 0)
      goto LABEL_11;
  }
  swift_release();
  swift_bridgeObjectRelease();
  *a1 = *(_QWORD *)(*(_QWORD *)(*v2 + 48) + 8 * v17);
  swift_retain();
  return 0;
}

uint64_t sub_100A10FF8(Swift::Int *a1, void *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  Swift::Int v12;
  Swift::Int v13;
  uint64_t v14;
  unint64_t v15;
  id v16;
  char v17;
  uint64_t v18;
  id v19;
  char v20;
  void *v21;
  id v22;
  Swift::Int v23;
  unint64_t v24;
  uint64_t v25;
  id v26;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v28;
  id v29;
  uint64_t v30;
  Swift::Int v31;

  v3 = v2;
  v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0)
      v7 = *v2;
    else
      v7 = v6 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*v2);
    v8 = a2;
    v9 = __CocoaSet.member(for:)(v8, v7);

    if (v9)
    {
      swift_bridgeObjectRelease();

      v30 = v9;
      v10 = sub_10000F4A0(0, &qword_1010FF850, SPStandaloneBeacon_ptr);
      swift_unknownObjectRetain(v9);
      swift_dynamicCast(&v31, &v30, (char *)&type metadata for Swift.AnyObject + 8, v10, 7);
      *a1 = v31;
      swift_unknownObjectRelease(v9);
      return 0;
    }
    result = __CocoaSet.count.getter(v7);
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    v23 = sub_100C801E8(v7, result + 1);
    v31 = v23;
    v24 = *(_QWORD *)(v23 + 16);
    if (*(_QWORD *)(v23 + 24) <= v24)
    {
      v28 = v24 + 1;
      v29 = v8;
      sub_100A1B1EC(v28, (uint64_t *)&unk_1011101E0);
      v25 = v31;
    }
    else
    {
      v25 = v23;
      v26 = v8;
    }
    sub_100C80794((uint64_t)v8, v25);
    *v3 = v25;
  }
  else
  {
    v12 = *(_QWORD *)(v6 + 40);
    swift_bridgeObjectRetain(v6);
    v13 = NSObject._rawHashValue(seed:)(v12);
    v14 = -1 << *(_BYTE *)(v6 + 32);
    v15 = v13 & ~v14;
    if (((*(_QWORD *)(v6 + 56 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) != 0)
    {
      sub_10000F4A0(0, &qword_1010FF850, SPStandaloneBeacon_ptr);
      v16 = *(id *)(*(_QWORD *)(v6 + 48) + 8 * v15);
      v17 = static NSObject.== infix(_:_:)(v16, a2);

      if ((v17 & 1) != 0)
      {
LABEL_12:

        swift_bridgeObjectRelease();
        v21 = *(void **)(*(_QWORD *)(*v3 + 48) + 8 * v15);
        *a1 = (Swift::Int)v21;
        v22 = v21;
        return 0;
      }
      v18 = ~v14;
      while (1)
      {
        v15 = (v15 + 1) & v18;
        if (((*(_QWORD *)(v6 + 56 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) == 0)
          break;
        v19 = *(id *)(*(_QWORD *)(v6 + 48) + 8 * v15);
        v20 = static NSObject.== infix(_:_:)(v19, a2);

        if ((v20 & 1) != 0)
          goto LABEL_12;
      }
    }
    swift_bridgeObjectRelease();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v31 = *v3;
    *v3 = 0x8000000000000000;
    v8 = a2;
    sub_100A1E880((uint64_t)v8, v15, isUniquelyReferenced_nonNull_native, (uint64_t *)&unk_1011101E0, &qword_1010FF850, SPStandaloneBeacon_ptr);
    *v3 = v31;
  }
  swift_bridgeObjectRelease();
  *a1 = (Swift::Int)v8;
  return 1;
}

uint64_t sub_100A112B4(Swift::Int *a1, void *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  Swift::Int v12;
  Swift::Int v13;
  uint64_t v14;
  unint64_t v15;
  id v16;
  char v17;
  uint64_t v18;
  id v19;
  char v20;
  void *v21;
  id v22;
  Swift::Int v23;
  unint64_t v24;
  uint64_t v25;
  id v26;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v28;
  id v29;
  uint64_t v30;
  Swift::Int v31;

  v3 = v2;
  v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0)
      v7 = *v2;
    else
      v7 = v6 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*v2);
    v8 = a2;
    v9 = __CocoaSet.member(for:)(v8, v7);

    if (v9)
    {
      swift_bridgeObjectRelease();

      v30 = v9;
      v10 = sub_10000F4A0(0, &qword_1010FF808, SPBeaconGroup_ptr);
      swift_unknownObjectRetain(v9);
      swift_dynamicCast(&v31, &v30, (char *)&type metadata for Swift.AnyObject + 8, v10, 7);
      *a1 = v31;
      swift_unknownObjectRelease(v9);
      return 0;
    }
    result = __CocoaSet.count.getter(v7);
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    v23 = sub_100C8020C(v7, result + 1);
    v31 = v23;
    v24 = *(_QWORD *)(v23 + 16);
    if (*(_QWORD *)(v23 + 24) <= v24)
    {
      v28 = v24 + 1;
      v29 = v8;
      sub_100A1B1EC(v28, (uint64_t *)&unk_1011101D0);
      v25 = v31;
    }
    else
    {
      v25 = v23;
      v26 = v8;
    }
    sub_100C80794((uint64_t)v8, v25);
    *v3 = v25;
  }
  else
  {
    v12 = *(_QWORD *)(v6 + 40);
    swift_bridgeObjectRetain(v6);
    v13 = NSObject._rawHashValue(seed:)(v12);
    v14 = -1 << *(_BYTE *)(v6 + 32);
    v15 = v13 & ~v14;
    if (((*(_QWORD *)(v6 + 56 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) != 0)
    {
      sub_10000F4A0(0, &qword_1010FF808, SPBeaconGroup_ptr);
      v16 = *(id *)(*(_QWORD *)(v6 + 48) + 8 * v15);
      v17 = static NSObject.== infix(_:_:)(v16, a2);

      if ((v17 & 1) != 0)
      {
LABEL_12:

        swift_bridgeObjectRelease();
        v21 = *(void **)(*(_QWORD *)(*v3 + 48) + 8 * v15);
        *a1 = (Swift::Int)v21;
        v22 = v21;
        return 0;
      }
      v18 = ~v14;
      while (1)
      {
        v15 = (v15 + 1) & v18;
        if (((*(_QWORD *)(v6 + 56 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) == 0)
          break;
        v19 = *(id *)(*(_QWORD *)(v6 + 48) + 8 * v15);
        v20 = static NSObject.== infix(_:_:)(v19, a2);

        if ((v20 & 1) != 0)
          goto LABEL_12;
      }
    }
    swift_bridgeObjectRelease();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v31 = *v3;
    *v3 = 0x8000000000000000;
    v8 = a2;
    sub_100A1E880((uint64_t)v8, v15, isUniquelyReferenced_nonNull_native, (uint64_t *)&unk_1011101D0, &qword_1010FF808, SPBeaconGroup_ptr);
    *v3 = v31;
  }
  swift_bridgeObjectRelease();
  *a1 = (Swift::Int)v8;
  return 1;
}

uint64_t sub_100A11570(uint64_t *a1, uint64_t a2)
{
  return sub_100A11584(a1, a2, &qword_101110110, (uint64_t)&type metadata for UInt64);
}

uint64_t sub_100A11584(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v18;

  v7 = v4;
  v10 = *v4;
  v11 = static Hasher._hash(seed:_:)(*(_QWORD *)(v10 + 40), a2);
  v12 = -1 << *(_BYTE *)(v10 + 32);
  v13 = v11 & ~v12;
  if (((*(_QWORD *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
  {
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v7);
    v18 = *v7;
    *v7 = 0x8000000000000000;
    sub_100A1CF20(a2, v13, isUniquelyReferenced_nonNull_native, a3, a4);
    *v7 = v18;
    swift_bridgeObjectRelease();
    result = 1;
    goto LABEL_8;
  }
  v14 = *(_QWORD *)(v10 + 48);
  if (*(_QWORD *)(v14 + 8 * v13) != a2)
  {
    v15 = ~v12;
    do
    {
      v13 = (v13 + 1) & v15;
      if (((*(_QWORD *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
        goto LABEL_7;
    }
    while (*(_QWORD *)(v14 + 8 * v13) != a2);
  }
  result = 0;
LABEL_8:
  *a1 = a2;
  return result;
}

uint64_t sub_100A11694(Swift::Int *a1, void *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  Swift::Int v12;
  Swift::Int v13;
  uint64_t v14;
  unint64_t v15;
  id v16;
  char v17;
  uint64_t v18;
  id v19;
  char v20;
  void *v21;
  id v22;
  Swift::Int v23;
  unint64_t v24;
  uint64_t v25;
  id v26;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v28;
  id v29;
  uint64_t v30;
  Swift::Int v31;

  v3 = v2;
  v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0)
      v7 = *v2;
    else
      v7 = v6 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*v2);
    v8 = a2;
    v9 = __CocoaSet.member(for:)(v8, v7);

    if (v9)
    {
      swift_bridgeObjectRelease();

      v30 = v9;
      v10 = sub_10000F4A0(0, &qword_1010FA558, SPTrackingAvoidanceResult_ptr);
      swift_unknownObjectRetain(v9);
      swift_dynamicCast(&v31, &v30, (char *)&type metadata for Swift.AnyObject + 8, v10, 7);
      *a1 = v31;
      swift_unknownObjectRelease(v9);
      return 0;
    }
    result = __CocoaSet.count.getter(v7);
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    v23 = sub_100C80230(v7, result + 1);
    v31 = v23;
    v24 = *(_QWORD *)(v23 + 16);
    if (*(_QWORD *)(v23 + 24) <= v24)
    {
      v28 = v24 + 1;
      v29 = v8;
      sub_100A1B1EC(v28, &qword_1011101F0);
      v25 = v31;
    }
    else
    {
      v25 = v23;
      v26 = v8;
    }
    sub_100C80794((uint64_t)v8, v25);
    *v3 = v25;
  }
  else
  {
    v12 = *(_QWORD *)(v6 + 40);
    swift_bridgeObjectRetain(v6);
    v13 = NSObject._rawHashValue(seed:)(v12);
    v14 = -1 << *(_BYTE *)(v6 + 32);
    v15 = v13 & ~v14;
    if (((*(_QWORD *)(v6 + 56 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) != 0)
    {
      sub_10000F4A0(0, &qword_1010FA558, SPTrackingAvoidanceResult_ptr);
      v16 = *(id *)(*(_QWORD *)(v6 + 48) + 8 * v15);
      v17 = static NSObject.== infix(_:_:)(v16, a2);

      if ((v17 & 1) != 0)
      {
LABEL_12:

        swift_bridgeObjectRelease();
        v21 = *(void **)(*(_QWORD *)(*v3 + 48) + 8 * v15);
        *a1 = (Swift::Int)v21;
        v22 = v21;
        return 0;
      }
      v18 = ~v14;
      while (1)
      {
        v15 = (v15 + 1) & v18;
        if (((*(_QWORD *)(v6 + 56 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) == 0)
          break;
        v19 = *(id *)(*(_QWORD *)(v6 + 48) + 8 * v15);
        v20 = static NSObject.== infix(_:_:)(v19, a2);

        if ((v20 & 1) != 0)
          goto LABEL_12;
      }
    }
    swift_bridgeObjectRelease();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v31 = *v3;
    *v3 = 0x8000000000000000;
    v8 = a2;
    sub_100A1E880((uint64_t)v8, v15, isUniquelyReferenced_nonNull_native, &qword_1011101F0, &qword_1010FA558, SPTrackingAvoidanceResult_ptr);
    *v3 = v31;
  }
  swift_bridgeObjectRelease();
  *a1 = (Swift::Int)v8;
  return 1;
}

uint64_t sub_100A11950(_BYTE *a1, uint64_t a2)
{
  return sub_100A11964(a1, a2, (uint64_t *)&unk_1011101C0, (uint64_t)&type metadata for LocationSource);
}

uint64_t sub_100A11964(_BYTE *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v9;
  Swift::Int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v17;
  _QWORD v18[9];

  v9 = *v4;
  Hasher.init(_seed:)(v18);
  Hasher._combine(_:)(a2);
  v10 = Hasher._finalize()();
  v11 = -1 << *(_BYTE *)(v9 + 32);
  v12 = v10 & ~v11;
  if (((*(_QWORD *)(v9 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
  {
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
    v18[0] = *v4;
    *v4 = 0x8000000000000000;
    sub_100A1CB60(a2, v12, isUniquelyReferenced_nonNull_native, a3, a4);
    v17 = *v4;
    *v4 = v18[0];
    swift_bridgeObjectRelease(v17);
    result = 1;
    goto LABEL_8;
  }
  v13 = *(_QWORD *)(v9 + 48);
  if (*(unsigned __int8 *)(v13 + v12) != a2)
  {
    v14 = ~v11;
    do
    {
      v12 = (v12 + 1) & v14;
      if (((*(_QWORD *)(v9 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
        goto LABEL_7;
    }
    while (*(unsigned __int8 *)(v13 + v12) != a2);
  }
  result = 0;
  LOBYTE(a2) = *(_BYTE *)(*(_QWORD *)(*v4 + 48) + v12);
LABEL_8:
  *a1 = a2;
  return result;
}

uint64_t sub_100A11A98(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  Swift::Int v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  _QWORD v30[9];

  v3 = v2;
  v6 = type metadata accessor for BeaconIdentifier(0);
  v27 = *(_QWORD *)(v6 - 8);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v25 - v10;
  v12 = *v2;
  Hasher.init(_seed:)(v30);
  v13 = type metadata accessor for UUID(0);
  v14 = sub_100006204(&qword_1010F98B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  swift_bridgeObjectRetain(v12);
  dispatch thunk of Hashable.hash(into:)(v30, v13, v14);
  v29 = v6;
  v15 = a2 + *(int *)(v6 + 20);
  dispatch thunk of Hashable.hash(into:)(v30, v13, v14);
  v16 = Hasher._finalize()();
  v17 = -1 << *(_BYTE *)(v12 + 32);
  v18 = v16 & ~v17;
  v19 = *(_QWORD *)(v12 + 56 + ((v18 >> 3) & 0xFFFFFFFFFFFFF8)) >> v18;
  v28 = v11;
  if ((v19 & 1) != 0)
  {
    v25 = v2;
    v26 = a1;
    v20 = ~v17;
    v21 = *(_QWORD *)(v27 + 72);
    do
    {
      sub_10005972C(*(_QWORD *)(v12 + 48) + v21 * v18, (uint64_t)v9, type metadata accessor for BeaconIdentifier);
      if ((static UUID.== infix(_:_:)(v9, a2) & 1) != 0
        && (static UUID.== infix(_:_:)(&v9[*(int *)(v29 + 20)], v15) & 1) != 0)
      {
        sub_1000126B0((uint64_t)v9, type metadata accessor for BeaconIdentifier);
        swift_bridgeObjectRelease();
        sub_1000126B0(a2, type metadata accessor for BeaconIdentifier);
        sub_10005972C(*(_QWORD *)(*v25 + 48) + v21 * v18, v26, type metadata accessor for BeaconIdentifier);
        return 0;
      }
      sub_1000126B0((uint64_t)v9, type metadata accessor for BeaconIdentifier);
      v18 = (v18 + 1) & v20;
    }
    while (((*(_QWORD *)(v12 + 56 + ((v18 >> 3) & 0xFFFFFFFFFFFFF8)) >> v18) & 1) != 0);
    swift_bridgeObjectRelease();
    v3 = v25;
    a1 = v26;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  v24 = (uint64_t)v28;
  sub_10005972C(a2, (uint64_t)v28, type metadata accessor for BeaconIdentifier);
  v30[0] = *v3;
  *v3 = 0x8000000000000000;
  sub_100A22C98(v24, v18, isUniquelyReferenced_nonNull_native);
  *v3 = v30[0];
  swift_bridgeObjectRelease();
  sub_1000126EC(a2, a1, type metadata accessor for BeaconIdentifier);
  return 1;
}

uint64_t sub_100A11D3C(uint64_t a1, uint64_t a2, unint64_t a3, Swift::UInt32 a4)
{
  return sub_100A13D30(a1, a2, a3, a4, (uint64_t *)&unk_10110FF90);
}

uint64_t sub_100A11D90(Swift::Int *a1, void *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  Swift::Int v12;
  Swift::Int v13;
  uint64_t v14;
  unint64_t v15;
  id v16;
  char v17;
  uint64_t v18;
  id v19;
  char v20;
  void *v21;
  id v22;
  Swift::Int v23;
  unint64_t v24;
  uint64_t v25;
  id v26;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v28;
  id v29;
  uint64_t v30;
  Swift::Int v31;

  v3 = v2;
  v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0)
      v7 = *v2;
    else
      v7 = v6 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*v2);
    v8 = a2;
    v9 = __CocoaSet.member(for:)(v8, v7);

    if (v9)
    {
      swift_bridgeObjectRelease();

      v30 = v9;
      v10 = sub_10000F4A0(0, &qword_101110020, SPCBPeripheralManagerSessionKey_ptr);
      swift_unknownObjectRetain(v9);
      swift_dynamicCast(&v31, &v30, (char *)&type metadata for Swift.AnyObject + 8, v10, 7);
      *a1 = v31;
      swift_unknownObjectRelease(v9);
      return 0;
    }
    result = __CocoaSet.count.getter(v7);
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    v23 = sub_100C80278(v7, result + 1);
    v31 = v23;
    v24 = *(_QWORD *)(v23 + 16);
    if (*(_QWORD *)(v23 + 24) <= v24)
    {
      v28 = v24 + 1;
      v29 = v8;
      sub_100A1B1EC(v28, &qword_101110028);
      v25 = v31;
    }
    else
    {
      v25 = v23;
      v26 = v8;
    }
    sub_100C80794((uint64_t)v8, v25);
    *v3 = v25;
  }
  else
  {
    v12 = *(_QWORD *)(v6 + 40);
    swift_bridgeObjectRetain(v6);
    v13 = NSObject._rawHashValue(seed:)(v12);
    v14 = -1 << *(_BYTE *)(v6 + 32);
    v15 = v13 & ~v14;
    if (((*(_QWORD *)(v6 + 56 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) != 0)
    {
      sub_10000F4A0(0, &qword_101110020, SPCBPeripheralManagerSessionKey_ptr);
      v16 = *(id *)(*(_QWORD *)(v6 + 48) + 8 * v15);
      v17 = static NSObject.== infix(_:_:)(v16, a2);

      if ((v17 & 1) != 0)
      {
LABEL_12:

        swift_bridgeObjectRelease();
        v21 = *(void **)(*(_QWORD *)(*v3 + 48) + 8 * v15);
        *a1 = (Swift::Int)v21;
        v22 = v21;
        return 0;
      }
      v18 = ~v14;
      while (1)
      {
        v15 = (v15 + 1) & v18;
        if (((*(_QWORD *)(v6 + 56 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) == 0)
          break;
        v19 = *(id *)(*(_QWORD *)(v6 + 48) + 8 * v15);
        v20 = static NSObject.== infix(_:_:)(v19, a2);

        if ((v20 & 1) != 0)
          goto LABEL_12;
      }
    }
    swift_bridgeObjectRelease();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v31 = *v3;
    *v3 = 0x8000000000000000;
    v8 = a2;
    sub_100A1E880((uint64_t)v8, v15, isUniquelyReferenced_nonNull_native, &qword_101110028, &qword_101110020, SPCBPeripheralManagerSessionKey_ptr);
    *v3 = v31;
  }
  swift_bridgeObjectRelease();
  *a1 = (Swift::Int)v8;
  return 1;
}

uint64_t sub_100A1204C(_DWORD *a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v14;

  v3 = v2;
  v6 = *v2;
  v7 = static Hasher._hash(seed:bytes:count:)(*(_QWORD *)(v6 + 40), a2, 4);
  v8 = -1 << *(_BYTE *)(v6 + 32);
  v9 = v7 & ~v8;
  if (((*(_QWORD *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
  {
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v14 = *v3;
    *v3 = 0x8000000000000000;
    sub_100A22EF4(a2, v9, isUniquelyReferenced_nonNull_native);
    *v3 = v14;
    swift_bridgeObjectRelease();
    result = 1;
    goto LABEL_8;
  }
  v10 = *(_QWORD *)(v6 + 48);
  if (*(_DWORD *)(v10 + 4 * v9) != (_DWORD)a2)
  {
    v11 = ~v8;
    do
    {
      v9 = (v9 + 1) & v11;
      if (((*(_QWORD *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
        goto LABEL_7;
    }
    while (*(_DWORD *)(v10 + 4 * v9) != (_DWORD)a2);
  }
  result = 0;
LABEL_8:
  *a1 = a2;
  return result;
}

uint64_t sub_100A1214C(uint64_t *a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  Swift::Int v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v19;
  Swift::Int v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[9];
  uint64_t v25;

  v3 = v2;
  v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0)
      v7 = *v2;
    else
      v7 = v6 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*v2);
    v8 = swift_retain();
    v9 = __CocoaSet.member(for:)(v8, v7);
    swift_release();
    if (v9)
    {
      swift_bridgeObjectRelease();
      swift_release();
      v25 = v9;
      v10 = type metadata accessor for Service();
      swift_unknownObjectRetain(v9);
      swift_dynamicCast(v24, &v25, (char *)&type metadata for Swift.AnyObject + 8, v10, 7);
      *a1 = v24[0];
      swift_unknownObjectRelease(v9);
      return 0;
    }
    result = __CocoaSet.count.getter(v7);
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    v20 = sub_100C802C0(v7, result + 1);
    v24[0] = v20;
    v21 = *(_QWORD *)(v20 + 16);
    if (*(_QWORD *)(v20 + 24) <= v21)
    {
      v23 = v21 + 1;
      swift_retain();
      sub_100A1A26C(v23);
      v22 = v24[0];
    }
    else
    {
      v22 = v20;
      swift_retain();
    }
    sub_100C80AC0(a2, v22);
    *v3 = v22;
  }
  else
  {
    Hasher.init(_seed:)(v24);
    v12 = *(_QWORD *)(a2 + 32);
    swift_bridgeObjectRetain(v6);
    NSObject.hash(into:)(v24);
    v13 = Hasher._finalize()();
    v14 = -1 << *(_BYTE *)(v6 + 32);
    v15 = v13 & ~v14;
    if (((*(_QWORD *)(v6 + 56 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) != 0)
    {
      v16 = *(_QWORD *)(v6 + 48);
      if (*(_QWORD *)(*(_QWORD *)(v16 + 8 * v15) + 32) == v12)
      {
LABEL_12:
        swift_release();
        swift_bridgeObjectRelease();
        *a1 = *(_QWORD *)(*(_QWORD *)(*v2 + 48) + 8 * v15);
        swift_retain();
        return 0;
      }
      v17 = ~v14;
      while (1)
      {
        v15 = (v15 + 1) & v17;
        if (((*(_QWORD *)(v6 + 56 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) == 0)
          break;
        if (*(_QWORD *)(*(_QWORD *)(v16 + 8 * v15) + 32) == v12)
          goto LABEL_12;
      }
    }
    swift_bridgeObjectRelease();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
    v24[0] = *v2;
    *v2 = 0x8000000000000000;
    v19 = swift_retain();
    sub_100A23018(v19, v15, isUniquelyReferenced_nonNull_native);
    *v2 = v24[0];
  }
  swift_bridgeObjectRelease();
  *a1 = a2;
  return 1;
}

uint64_t sub_100A123B8(uint64_t *a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  Swift::Int v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v19;
  Swift::Int v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[9];
  uint64_t v25;

  v3 = v2;
  v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0)
      v7 = *v2;
    else
      v7 = v6 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*v2);
    v8 = swift_retain();
    v9 = __CocoaSet.member(for:)(v8, v7);
    swift_release();
    if (v9)
    {
      swift_bridgeObjectRelease();
      swift_release();
      v25 = v9;
      v10 = type metadata accessor for Characteristic();
      swift_unknownObjectRetain(v9);
      swift_dynamicCast(v24, &v25, (char *)&type metadata for Swift.AnyObject + 8, v10, 7);
      *a1 = v24[0];
      swift_unknownObjectRelease(v9);
      return 0;
    }
    result = __CocoaSet.count.getter(v7);
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    v20 = sub_100C804D0(v7, result + 1);
    v24[0] = v20;
    v21 = *(_QWORD *)(v20 + 16);
    if (*(_QWORD *)(v20 + 24) <= v21)
    {
      v23 = v21 + 1;
      swift_retain();
      sub_100A1A530(v23);
      v22 = v24[0];
    }
    else
    {
      v22 = v20;
      swift_retain();
    }
    sub_100C80B6C(a2, v22);
    *v3 = v22;
  }
  else
  {
    Hasher.init(_seed:)(v24);
    v12 = *(_QWORD *)(a2 + 40);
    swift_bridgeObjectRetain(v6);
    NSObject.hash(into:)(v24);
    v13 = Hasher._finalize()();
    v14 = -1 << *(_BYTE *)(v6 + 32);
    v15 = v13 & ~v14;
    if (((*(_QWORD *)(v6 + 56 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) != 0)
    {
      v16 = *(_QWORD *)(v6 + 48);
      if (*(_QWORD *)(*(_QWORD *)(v16 + 8 * v15) + 40) == v12)
      {
LABEL_12:
        swift_release();
        swift_bridgeObjectRelease();
        *a1 = *(_QWORD *)(*(_QWORD *)(*v2 + 48) + 8 * v15);
        swift_retain();
        return 0;
      }
      v17 = ~v14;
      while (1)
      {
        v15 = (v15 + 1) & v17;
        if (((*(_QWORD *)(v6 + 56 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) == 0)
          break;
        if (*(_QWORD *)(*(_QWORD *)(v16 + 8 * v15) + 40) == v12)
          goto LABEL_12;
      }
    }
    swift_bridgeObjectRelease();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
    v24[0] = *v2;
    *v2 = 0x8000000000000000;
    v19 = swift_retain();
    sub_100A2318C(v19, v15, isUniquelyReferenced_nonNull_native);
    *v2 = v24[0];
  }
  swift_bridgeObjectRelease();
  *a1 = a2;
  return 1;
}

uint64_t sub_100A12624(_BYTE *a1, uint64_t a2)
{
  return sub_100A11964(a1, a2, &qword_101110190, (uint64_t)&type metadata for SystemInfoDynamic.MeDeviceState);
}

uint64_t sub_100A12638(uint64_t a1, uint64_t *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  Swift::Int v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t result;
  char isUniquelyReferenced_nonNull_native;
  __int128 v48;
  __int128 v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD v58[9];

  v3 = v2;
  v6 = *v2;
  Hasher.init(_seed:)(v58);
  v7 = *a2;
  v8 = a2[1];
  swift_bridgeObjectRetain(v6);
  v56 = v8;
  v57 = v7;
  String.hash(into:)(v58, v7, v8);
  v9 = Hasher._finalize()();
  v10 = -1 << *(_BYTE *)(v6 + 32);
  v11 = v9 & ~v10;
  v55 = v6 + 56;
  v50 = v3;
  v51 = a1;
  if (((*(_QWORD *)(v6 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) != 0)
  {
    v52 = ~v10;
    v53 = *(_QWORD *)(v6 + 48);
    do
    {
      v12 = v53 + 88 * v11;
      v13 = *(_QWORD *)(v12 + 8);
      v15 = *(_QWORD *)(v12 + 16);
      v14 = *(_QWORD *)(v12 + 24);
      v16 = *(unsigned __int8 *)(v12 + 32);
      v18 = *(_QWORD *)(v12 + 40);
      v17 = *(_QWORD *)(v12 + 48);
      v19 = *(_QWORD *)(v12 + 56);
      v20 = *(_QWORD *)(v12 + 64);
      v21 = *(_QWORD *)(v12 + 80);
      v54 = *(_QWORD *)(v12 + 72);
      v22 = *(_QWORD *)v12 == v57 && v13 == v56;
      if (!v22 && (_stringCompareWithSmolCheck(_:_:expecting:)(*(_QWORD *)v12, v13, v57, v56, 0) & 1) == 0)
        goto LABEL_4;
      v23 = a2[2];
      v24 = a2[3];
      v25 = v15 == v23 && v14 == v24;
      if (!v25 && (_stringCompareWithSmolCheck(_:_:expecting:)(v15, v14, v23, v24, 0) & 1) == 0
        || ((v16 ^ *((unsigned __int8 *)a2 + 32)) & 1) != 0)
      {
        goto LABEL_4;
      }
      v26 = a2[6];
      if (v17)
      {
        if (!v26)
          goto LABEL_4;
        v27 = a2[5];
        v28 = v18 == v27 && v17 == v26;
        if (!v28 && (_stringCompareWithSmolCheck(_:_:expecting:)(v18, v17, v27, v26, 0) & 1) == 0)
          goto LABEL_4;
      }
      else if (v26)
      {
        goto LABEL_4;
      }
      v29 = a2[8];
      if (v20)
      {
        if (!v29)
          goto LABEL_4;
        v30 = a2[7];
        v31 = v19 == v30 && v20 == v29;
        if (!v31 && (_stringCompareWithSmolCheck(_:_:expecting:)(v19, v20, v30, v29, 0) & 1) == 0)
          goto LABEL_4;
      }
      else if (v29)
      {
        goto LABEL_4;
      }
      v32 = a2[10];
      if (v21)
      {
        if (v32)
        {
          v33 = a2[9];
          v34 = v54 == v33 && v21 == v32;
          if (v34 || (_stringCompareWithSmolCheck(_:_:expecting:)(v54, v21, v33, v32, 0) & 1) != 0)
          {
LABEL_41:
            swift_bridgeObjectRelease();
            sub_100A2D57C(a2);
            v35 = *(_QWORD *)(*v50 + 48) + 88 * v11;
            v36 = *(_QWORD *)(v35 + 8);
            v37 = *(_QWORD *)(v35 + 16);
            v38 = *(_QWORD *)(v35 + 24);
            v39 = *(_BYTE *)(v35 + 32);
            v40 = *(_QWORD *)(v35 + 40);
            v41 = *(_QWORD *)(v35 + 80);
            *(_QWORD *)v51 = *(_QWORD *)v35;
            *(_QWORD *)(v51 + 8) = v36;
            *(_QWORD *)(v51 + 16) = v37;
            *(_QWORD *)(v51 + 24) = v38;
            *(_BYTE *)(v51 + 32) = v39;
            *(_QWORD *)(v51 + 40) = v40;
            v42 = *(_OWORD *)(v35 + 48);
            v43 = *(_OWORD *)(v35 + 64);
            *(_OWORD *)(v51 + 48) = v42;
            *(_OWORD *)(v51 + 64) = v43;
            *(_QWORD *)(v51 + 80) = v41;
            v44 = v42;
            v45 = v43;
            swift_bridgeObjectRetain(v41);
            swift_bridgeObjectRetain(v36);
            swift_bridgeObjectRetain(v38);
            swift_bridgeObjectRetain(v44);
            swift_bridgeObjectRetain(v45);
            return 0;
          }
        }
      }
      else if (!v32)
      {
        goto LABEL_41;
      }
LABEL_4:
      v11 = (v11 + 1) & v52;
    }
    while (((*(_QWORD *)(v55 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) != 0);
  }
  swift_bridgeObjectRelease();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v50);
  v58[0] = *v50;
  *v50 = 0x8000000000000000;
  sub_100A2D514(a2);
  sub_100A23300(a2, v11, isUniquelyReferenced_nonNull_native);
  *v50 = v58[0];
  swift_bridgeObjectRelease();
  v48 = *((_OWORD *)a2 + 3);
  *(_OWORD *)(v51 + 32) = *((_OWORD *)a2 + 2);
  *(_OWORD *)(v51 + 48) = v48;
  *(_OWORD *)(v51 + 64) = *((_OWORD *)a2 + 4);
  *(_QWORD *)(v51 + 80) = a2[10];
  v49 = *((_OWORD *)a2 + 1);
  result = 1;
  *(_OWORD *)v51 = *(_OWORD *)a2;
  *(_OWORD *)(v51 + 16) = v49;
  return result;
}

uint64_t sub_100A12950(uint64_t a1, _QWORD *a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  Swift::UInt v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  Swift::Int v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v33;
  uint64_t *v34;
  Swift::UInt v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char isUniquelyReferenced_nonNull_native;
  __int128 v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD v56[9];
  _QWORD v57[2];

  v5 = *a2;
  v4 = a2[1];
  v57[0] = a2[2];
  v6 = (_QWORD *)v57[0];
  v7 = *v2;
  Hasher.init(_seed:)(v56);
  swift_bridgeObjectRetain(v7);
  String.hash(into:)(v56, v5, v4);
  v8 = v6[2];
  Hasher._combine(_:)(v8);
  v50 = v6;
  v9 = v6[2];
  if (v9)
  {
    v10 = v6 + 5;
    do
    {
      v11 = *(v10 - 1);
      v12 = *v10;
      swift_bridgeObjectRetain(*v10);
      String.hash(into:)(v56, v11, v12);
      swift_bridgeObjectRelease();
      v10 += 2;
      --v9;
    }
    while (v9);
  }
  v47 = a2;
  v51 = a2[4];
  v52 = a2[3];
  String.hash(into:)(v56, v52, v51);
  v13 = Hasher._finalize()();
  v14 = -1 << *(_BYTE *)(v7 + 32);
  v15 = v13 & ~v14;
  v55 = v7 + 56;
  if (((*(_QWORD *)(v7 + 56 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) == 0)
  {
LABEL_43:
    swift_bridgeObjectRelease();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v48);
    v56[0] = *v48;
    *v48 = 0x8000000000000000;
    swift_bridgeObjectRetain(v4);
    sub_100004F74(v57);
    swift_bridgeObjectRetain(v51);
    sub_100A235B8(v47, v15, isUniquelyReferenced_nonNull_native);
    *v48 = v56[0];
    swift_bridgeObjectRelease();
    v41 = *((_OWORD *)v47 + 1);
    *(_OWORD *)a1 = *(_OWORD *)v47;
    *(_OWORD *)(a1 + 16) = v41;
    *(_QWORD *)(a1 + 32) = v47[4];
    return 1;
  }
  v53 = ~v14;
  v54 = *(_QWORD *)(v7 + 48);
  while (1)
  {
    v16 = (uint64_t *)(v54 + 40 * v15);
    result = *v16;
    v18 = v16[1];
    v20 = (_QWORD *)v16[2];
    v19 = v16[3];
    v21 = v16[4];
    if (*v16 != v5 || v18 != v4)
    {
      result = _stringCompareWithSmolCheck(_:_:expecting:)(result, v18, v5, v4, 0);
      if ((result & 1) == 0)
        goto LABEL_7;
    }
    if (v20[2] != v8)
      goto LABEL_7;
    if (!v8 || v20 == v50)
      goto LABEL_30;
    v23 = v50[2];
    if (!v23)
      goto LABEL_47;
    result = v20[4];
    v24 = v20[5];
    v25 = v50[4];
    v26 = v50[5];
    v27 = result == v25 && v24 == v26;
    if (v27 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(result, v24, v25, v26, 0), (result & 1) != 0))
    {
      if (v8 == 1)
        goto LABEL_30;
      v28 = v23 - 2;
      if (v23 < 2)
        goto LABEL_48;
      result = v20[6];
      v29 = v20[7];
      v30 = v50[6];
      v31 = v50[7];
      if (result == v30 && v29 == v31)
        break;
      result = _stringCompareWithSmolCheck(_:_:expecting:)(result, v29, v30, v31, 0);
      if ((result & 1) != 0)
        break;
    }
LABEL_7:
    v15 = (v15 + 1) & v53;
    if (((*(_QWORD *)(v55 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) == 0)
      goto LABEL_43;
  }
  if (v8 == 2)
  {
LABEL_30:
    if (v19 == v52 && v21 == v51 || (_stringCompareWithSmolCheck(_:_:expecting:)(v19, v21, v52, v51, 0) & 1) != 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1001AE6D8(v57);
      swift_bridgeObjectRelease();
      v42 = (_QWORD *)(*(_QWORD *)(*v48 + 48) + 40 * v15);
      v43 = v42[1];
      v45 = v42[2];
      v44 = v42[3];
      v46 = v42[4];
      *(_QWORD *)a1 = *v42;
      *(_QWORD *)(a1 + 8) = v43;
      *(_QWORD *)(a1 + 16) = v45;
      *(_QWORD *)(a1 + 24) = v44;
      *(_QWORD *)(a1 + 32) = v46;
      swift_bridgeObjectRetain(v43);
      swift_bridgeObjectRetain(v45);
      swift_bridgeObjectRetain(v46);
      return 0;
    }
    goto LABEL_7;
  }
  v33 = v20 + 9;
  v34 = v50 + 9;
  v35 = v8 - 2;
  while (v35)
  {
    if (!v28)
      goto LABEL_46;
    result = *(v33 - 1);
    v36 = *v33;
    v37 = *(v34 - 1);
    v38 = *v34;
    if (result != v37 || v36 != v38)
    {
      result = _stringCompareWithSmolCheck(_:_:expecting:)(result, v36, v37, v38, 0);
      if ((result & 1) == 0)
        goto LABEL_7;
    }
    --v28;
    v34 += 2;
    v33 += 2;
    if (!--v35)
      goto LABEL_30;
  }
  __break(1u);
LABEL_46:
  __break(1u);
LABEL_47:
  __break(1u);
LABEL_48:
  __break(1u);
  return result;
}

uint64_t sub_100A12CEC(uint64_t *a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v3 = v2;
  v29 = a2;
  v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0)
      v7 = *v2;
    else
      v7 = v6 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*v2);
    v8 = swift_retain();
    v9 = __CocoaSet.member(for:)(v8, v7);
    swift_release();
    if (v9)
    {
      swift_bridgeObjectRelease();
      swift_release();
      v27 = v9;
      swift_unknownObjectRetain(v9);
      v10 = sub_10001A9A8(&qword_1010EF800);
      swift_dynamicCast(&v28, &v27, (char *)&type metadata for Swift.AnyObject + 8, v10, 7);
      *a1 = v28;
      swift_unknownObjectRelease(v9);
      return 0;
    }
    result = __CocoaSet.count.getter(v7);
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    v23 = sub_100C806E0(v7, result + 1);
    v28 = v23;
    v24 = *(_QWORD *)(v23 + 16);
    if (*(_QWORD *)(v23 + 24) <= v24)
    {
      v26 = v24 + 1;
      swift_retain();
      sub_100A1852C(v26, (uint64_t *)&unk_10111C080, &qword_1010EF800, (unint64_t *)&qword_1010FB780);
      v25 = v28;
    }
    else
    {
      v25 = v23;
      swift_retain();
    }
    sub_100C80C18(a2, v25);
    *v3 = v25;
    swift_bridgeObjectRelease();
    *a1 = a2;
    return 1;
  }
  v12 = *(_QWORD *)(v6 + 40);
  swift_bridgeObjectRetain(*v2);
  v13 = sub_10001A9A8(&qword_1010EF800);
  v14 = sub_1000193A4((unint64_t *)&qword_1010FB780, &qword_1010EF800, (const char *)&protocol conformance descriptor for XPCSession<A>);
  v15 = dispatch thunk of Hashable._rawHashValue(seed:)(v12, v13, v14);
  v16 = -1 << *(_BYTE *)(v6 + 32);
  v17 = v15 & ~v16;
  if (((*(_QWORD *)(v6 + 56 + ((v17 >> 3) & 0xFFFFFFFFFFFFF8)) >> v17) & 1) == 0)
  {
LABEL_11:
    swift_bridgeObjectRelease();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
    v21 = v29;
    v28 = *v2;
    *v2 = 0x8000000000000000;
    v22 = swift_retain();
    sub_10001D02C(v22, v17, isUniquelyReferenced_nonNull_native, (uint64_t *)&unk_10111C080, &qword_1010EF800, (unint64_t *)&qword_1010FB780, &qword_1011101F8);
    *v2 = v28;
    swift_bridgeObjectRelease();
    *a1 = v21;
    return 1;
  }
  v18 = ~v16;
  v19 = sub_1000193A4(&qword_1011101F8, &qword_1010EF800, (const char *)&protocol conformance descriptor for XPCSession<A>);
  while (1)
  {
    v28 = *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v17);
    if ((dispatch thunk of static Equatable.== infix(_:_:)(&v28, &v29, v13, v19) & 1) != 0)
      break;
    v17 = (v17 + 1) & v18;
    if (((*(_QWORD *)(v6 + 56 + ((v17 >> 3) & 0xFFFFFFFFFFFFF8)) >> v17) & 1) == 0)
      goto LABEL_11;
  }
  swift_release();
  swift_bridgeObjectRelease();
  *a1 = *(_QWORD *)(*(_QWORD *)(*v2 + 48) + 8 * v17);
  swift_retain();
  return 0;
}

uint64_t sub_100A12FEC(uint64_t *a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v3 = v2;
  v29 = a2;
  v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0)
      v7 = *v2;
    else
      v7 = v6 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*v2);
    v8 = swift_retain();
    v9 = __CocoaSet.member(for:)(v8, v7);
    swift_release();
    if (v9)
    {
      swift_bridgeObjectRelease();
      swift_release();
      v27 = v9;
      swift_unknownObjectRetain(v9);
      v10 = sub_10001A9A8((uint64_t *)&unk_1010F78E0);
      swift_dynamicCast(&v28, &v27, (char *)&type metadata for Swift.AnyObject + 8, v10, 7);
      *a1 = v28;
      swift_unknownObjectRelease(v9);
      return 0;
    }
    result = __CocoaSet.count.getter(v7);
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    v23 = sub_100C80704(v7, result + 1);
    v28 = v23;
    v24 = *(_QWORD *)(v23 + 16);
    if (*(_QWORD *)(v23 + 24) <= v24)
    {
      v26 = v24 + 1;
      swift_retain();
      sub_100A1852C(v26, &qword_101110140, (uint64_t *)&unk_1010F78E0, (unint64_t *)&qword_101110130);
      v25 = v28;
    }
    else
    {
      v25 = v23;
      swift_retain();
    }
    sub_100C80C2C(a2, v25);
    *v3 = v25;
    swift_bridgeObjectRelease();
    *a1 = a2;
    return 1;
  }
  v12 = *(_QWORD *)(v6 + 40);
  swift_bridgeObjectRetain(*v2);
  v13 = sub_10001A9A8((uint64_t *)&unk_1010F78E0);
  v14 = sub_1000193A4((unint64_t *)&qword_101110130, (uint64_t *)&unk_1010F78E0, (const char *)&protocol conformance descriptor for XPCSession<A>);
  v15 = dispatch thunk of Hashable._rawHashValue(seed:)(v12, v13, v14);
  v16 = -1 << *(_BYTE *)(v6 + 32);
  v17 = v15 & ~v16;
  if (((*(_QWORD *)(v6 + 56 + ((v17 >> 3) & 0xFFFFFFFFFFFFF8)) >> v17) & 1) == 0)
  {
LABEL_11:
    swift_bridgeObjectRelease();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
    v21 = v29;
    v28 = *v2;
    *v2 = 0x8000000000000000;
    v22 = swift_retain();
    sub_10001D02C(v22, v17, isUniquelyReferenced_nonNull_native, &qword_101110140, (uint64_t *)&unk_1010F78E0, (unint64_t *)&qword_101110130, &qword_101110138);
    *v2 = v28;
    swift_bridgeObjectRelease();
    *a1 = v21;
    return 1;
  }
  v18 = ~v16;
  v19 = sub_1000193A4(&qword_101110138, (uint64_t *)&unk_1010F78E0, (const char *)&protocol conformance descriptor for XPCSession<A>);
  while (1)
  {
    v28 = *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v17);
    if ((dispatch thunk of static Equatable.== infix(_:_:)(&v28, &v29, v13, v19) & 1) != 0)
      break;
    v17 = (v17 + 1) & v18;
    if (((*(_QWORD *)(v6 + 56 + ((v17 >> 3) & 0xFFFFFFFFFFFFF8)) >> v17) & 1) == 0)
      goto LABEL_11;
  }
  swift_release();
  swift_bridgeObjectRelease();
  *a1 = *(_QWORD *)(*(_QWORD *)(*v2 + 48) + 8 * v17);
  swift_retain();
  return 0;
}

uint64_t sub_100A132EC(uint64_t *a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v3 = v2;
  v29 = a2;
  v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0)
      v7 = *v2;
    else
      v7 = v6 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*v2);
    v8 = swift_retain();
    v9 = __CocoaSet.member(for:)(v8, v7);
    swift_release();
    if (v9)
    {
      swift_bridgeObjectRelease();
      swift_release();
      v27 = v9;
      swift_unknownObjectRetain(v9);
      v10 = sub_10001A9A8((uint64_t *)&unk_1010F49A0);
      swift_dynamicCast(&v28, &v27, (char *)&type metadata for Swift.AnyObject + 8, v10, 7);
      *a1 = v28;
      swift_unknownObjectRelease(v9);
      return 0;
    }
    result = __CocoaSet.count.getter(v7);
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    v23 = sub_100C80728(v7, result + 1);
    v28 = v23;
    v24 = *(_QWORD *)(v23 + 16);
    if (*(_QWORD *)(v23 + 24) <= v24)
    {
      v26 = v24 + 1;
      swift_retain();
      sub_100A1852C(v26, (uint64_t *)&unk_10111C350, (uint64_t *)&unk_1010F49A0, &qword_101117070);
      v25 = v28;
    }
    else
    {
      v25 = v23;
      swift_retain();
    }
    sub_100C80C40(a2, v25);
    *v3 = v25;
    swift_bridgeObjectRelease();
    *a1 = a2;
    return 1;
  }
  v12 = *(_QWORD *)(v6 + 40);
  swift_bridgeObjectRetain(*v2);
  v13 = sub_10001A9A8((uint64_t *)&unk_1010F49A0);
  v14 = sub_1000193A4(&qword_101117070, (uint64_t *)&unk_1010F49A0, (const char *)&protocol conformance descriptor for XPCSession<A>);
  v15 = dispatch thunk of Hashable._rawHashValue(seed:)(v12, v13, v14);
  v16 = -1 << *(_BYTE *)(v6 + 32);
  v17 = v15 & ~v16;
  if (((*(_QWORD *)(v6 + 56 + ((v17 >> 3) & 0xFFFFFFFFFFFFF8)) >> v17) & 1) == 0)
  {
LABEL_11:
    swift_bridgeObjectRelease();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
    v21 = v29;
    v28 = *v2;
    *v2 = 0x8000000000000000;
    v22 = swift_retain();
    sub_10001D02C(v22, v17, isUniquelyReferenced_nonNull_native, (uint64_t *)&unk_10111C350, (uint64_t *)&unk_1010F49A0, &qword_101117070, &qword_1010F49B0);
    *v2 = v28;
    swift_bridgeObjectRelease();
    *a1 = v21;
    return 1;
  }
  v18 = ~v16;
  v19 = sub_1000193A4(&qword_1010F49B0, (uint64_t *)&unk_1010F49A0, (const char *)&protocol conformance descriptor for XPCSession<A>);
  while (1)
  {
    v28 = *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v17);
    if ((dispatch thunk of static Equatable.== infix(_:_:)(&v28, &v29, v13, v19) & 1) != 0)
      break;
    v17 = (v17 + 1) & v18;
    if (((*(_QWORD *)(v6 + 56 + ((v17 >> 3) & 0xFFFFFFFFFFFFF8)) >> v17) & 1) == 0)
      goto LABEL_11;
  }
  swift_release();
  swift_bridgeObjectRelease();
  *a1 = *(_QWORD *)(*(_QWORD *)(*v2 + 48) + 8 * v17);
  swift_retain();
  return 0;
}

uint64_t sub_100A135EC(Swift::Int *a1, void *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  Swift::Int v12;
  Swift::Int v13;
  uint64_t v14;
  unint64_t v15;
  id v16;
  char v17;
  uint64_t v18;
  id v19;
  char v20;
  void *v21;
  id v22;
  Swift::Int v23;
  unint64_t v24;
  uint64_t v25;
  id v26;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  Swift::Int v32;

  v3 = v2;
  v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0)
      v7 = *v2;
    else
      v7 = v6 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*v2);
    v8 = a2;
    v9 = __CocoaSet.member(for:)();

    if (v9)
    {
      swift_bridgeObjectRelease(v6);

      v31 = v9;
      v10 = sub_10000F4A0(0, (unint64_t *)&unk_10110FFC0, CKRecordZoneID_ptr);
      swift_unknownObjectRetain(v9);
      swift_dynamicCast(&v32, &v31, (char *)&type metadata for Swift.AnyObject + 8, v10, 7);
      *a1 = v32;
      swift_unknownObjectRelease(v9);
      return 0;
    }
    result = __CocoaSet.count.getter(v7);
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    v23 = sub_100C8074C(v7, result + 1);
    v32 = v23;
    v24 = *(_QWORD *)(v23 + 16);
    if (*(_QWORD *)(v23 + 24) <= v24)
    {
      v29 = v24 + 1;
      v30 = v8;
      sub_100A1B1EC(v29, (uint64_t *)&unk_10110FFB0);
      v25 = v32;
    }
    else
    {
      v25 = v23;
      v26 = v8;
    }
    sub_100C80794((uint64_t)v8, v25);
    v28 = *v3;
    *v3 = v25;
  }
  else
  {
    v12 = *(_QWORD *)(v6 + 40);
    swift_bridgeObjectRetain(v6);
    v13 = NSObject._rawHashValue(seed:)(v12);
    v14 = -1 << *(_BYTE *)(v6 + 32);
    v15 = v13 & ~v14;
    if (((*(_QWORD *)(v6 + 56 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) != 0)
    {
      sub_10000F4A0(0, (unint64_t *)&unk_10110FFC0, CKRecordZoneID_ptr);
      v16 = *(id *)(*(_QWORD *)(v6 + 48) + 8 * v15);
      v17 = static NSObject.== infix(_:_:)(v16, a2);

      if ((v17 & 1) != 0)
      {
LABEL_12:

        swift_bridgeObjectRelease(v6);
        v21 = *(void **)(*(_QWORD *)(*v3 + 48) + 8 * v15);
        *a1 = (Swift::Int)v21;
        v22 = v21;
        return 0;
      }
      v18 = ~v14;
      while (1)
      {
        v15 = (v15 + 1) & v18;
        if (((*(_QWORD *)(v6 + 56 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) == 0)
          break;
        v19 = *(id *)(*(_QWORD *)(v6 + 48) + 8 * v15);
        v20 = static NSObject.== infix(_:_:)(v19, a2);

        if ((v20 & 1) != 0)
          goto LABEL_12;
      }
    }
    swift_bridgeObjectRelease(v6);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v32 = *v3;
    *v3 = 0x8000000000000000;
    v8 = a2;
    sub_100A1E880((uint64_t)v8, v15, isUniquelyReferenced_nonNull_native, (uint64_t *)&unk_10110FFB0, (unint64_t *)&unk_10110FFC0, CKRecordZoneID_ptr);
    v28 = *v3;
    *v3 = v32;
  }
  swift_bridgeObjectRelease(v28);
  *a1 = (Swift::Int)v8;
  return 1;
}

uint64_t sub_100A138A8(uint64_t *a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v3 = v2;
  v29 = a2;
  v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0)
      v7 = *v2;
    else
      v7 = v6 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*v2);
    v8 = swift_retain();
    v9 = __CocoaSet.member(for:)(v8, v7);
    swift_release();
    if (v9)
    {
      swift_bridgeObjectRelease();
      swift_release();
      v27 = v9;
      swift_unknownObjectRetain(v9);
      v10 = sub_10001A9A8((uint64_t *)&unk_10111C050);
      swift_dynamicCast(&v28, &v27, (char *)&type metadata for Swift.AnyObject + 8, v10, 7);
      *a1 = v28;
      swift_unknownObjectRelease(v9);
      return 0;
    }
    result = __CocoaSet.count.getter(v7);
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    v23 = sub_100C80770(v7, result + 1);
    v28 = v23;
    v24 = *(_QWORD *)(v23 + 16);
    if (*(_QWORD *)(v23 + 24) <= v24)
    {
      v26 = v24 + 1;
      swift_retain();
      sub_100A1852C(v26, (uint64_t *)&unk_10110FF50, (uint64_t *)&unk_10111C050, (unint64_t *)&unk_10110FF60);
      v25 = v28;
    }
    else
    {
      v25 = v23;
      swift_retain();
    }
    sub_100C80CD4(a2, v25);
    *v3 = v25;
    swift_bridgeObjectRelease();
    *a1 = a2;
    return 1;
  }
  v12 = *(_QWORD *)(v6 + 40);
  swift_bridgeObjectRetain(*v2);
  v13 = sub_10001A9A8((uint64_t *)&unk_10111C050);
  v14 = sub_1000193A4((unint64_t *)&unk_10110FF60, (uint64_t *)&unk_10111C050, (const char *)&protocol conformance descriptor for XPCSession<A>);
  v15 = dispatch thunk of Hashable._rawHashValue(seed:)(v12, v13, v14);
  v16 = -1 << *(_BYTE *)(v6 + 32);
  v17 = v15 & ~v16;
  if (((*(_QWORD *)(v6 + 56 + ((v17 >> 3) & 0xFFFFFFFFFFFFF8)) >> v17) & 1) == 0)
  {
LABEL_11:
    swift_bridgeObjectRelease();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
    v21 = v29;
    v28 = *v2;
    *v2 = 0x8000000000000000;
    v22 = swift_retain();
    sub_10001D02C(v22, v17, isUniquelyReferenced_nonNull_native, (uint64_t *)&unk_10110FF50, (uint64_t *)&unk_10111C050, (unint64_t *)&unk_10110FF60, (unint64_t *)&unk_10111C060);
    *v2 = v28;
    swift_bridgeObjectRelease();
    *a1 = v21;
    return 1;
  }
  v18 = ~v16;
  v19 = sub_1000193A4((unint64_t *)&unk_10111C060, (uint64_t *)&unk_10111C050, (const char *)&protocol conformance descriptor for XPCSession<A>);
  while (1)
  {
    v28 = *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v17);
    if ((dispatch thunk of static Equatable.== infix(_:_:)(&v28, &v29, v13, v19) & 1) != 0)
      break;
    v17 = (v17 + 1) & v18;
    if (((*(_QWORD *)(v6 + 56 + ((v17 >> 3) & 0xFFFFFFFFFFFFF8)) >> v17) & 1) == 0)
      goto LABEL_11;
  }
  swift_release();
  swift_bridgeObjectRelease();
  *a1 = *(_QWORD *)(*(_QWORD *)(*v2 + 48) + 8 * v17);
  swift_retain();
  return 0;
}

uint64_t sub_100A13BA8(_DWORD *a1, unint64_t a2)
{
  _QWORD *v2;
  unint64_t v3;
  unint64_t v5;
  uint64_t v6;
  Swift::Int v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int *v11;
  int v12;
  int v13;
  char isUniquelyReferenced_nonNull_native;
  uint64_t result;
  _DWORD *v17;
  uint64_t v18[9];

  v3 = a2;
  v5 = HIDWORD(a2);
  v6 = *v2;
  Hasher.init(_seed:)(v18);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v5);
  v7 = Hasher._finalize()();
  v8 = -1 << *(_BYTE *)(v6 + 32);
  v9 = v7 & ~v8;
  if (((*(_QWORD *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) != 0)
  {
    v10 = ~v8;
    while (1)
    {
      v11 = (int *)(*(_QWORD *)(v6 + 48) + 8 * v9);
      v13 = *v11;
      v12 = v11[1];
      if (v13 == (_DWORD)v3 && v12 == (_DWORD)v5)
        break;
      v9 = (v9 + 1) & v10;
      if (((*(_QWORD *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
        goto LABEL_8;
    }
    result = 0;
    v17 = (_DWORD *)(*(_QWORD *)(*v2 + 48) + 8 * v9);
    LODWORD(v3) = *v17;
    LODWORD(v5) = v17[1];
  }
  else
  {
LABEL_8:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
    v18[0] = *v2;
    *v2 = 0x8000000000000000;
    sub_100A23914(v3, v9, isUniquelyReferenced_nonNull_native);
    *v2 = v18[0];
    swift_bridgeObjectRelease();
    result = 1;
  }
  *a1 = v3;
  a1[1] = v5;
  return result;
}

uint64_t sub_100A13CDC(uint64_t a1, uint64_t a2, unint64_t a3, Swift::UInt32 a4)
{
  return sub_100A13D30(a1, a2, a3, a4, &qword_101110058);
}

uint64_t sub_100A13D30(uint64_t a1, uint64_t a2, unint64_t a3, Swift::UInt32 a4, uint64_t *a5)
{
  uint64_t *v5;
  uint64_t v10;
  unint64_t v11;
  char isUniquelyReferenced_nonNull_native;
  uint64_t result;
  _QWORD *v14;
  uint64_t __s1;

  v10 = *v5;
  Hasher.init(_seed:)(&__s1);
  swift_bridgeObjectRetain(v10);
  sub_10001BBBC(a2, a3);
  Data.hash(into:)(&__s1, a2, a3);
  sub_10001BC14(a2, a3);
  Hasher._combine(_:)(a4);
  v11 = Hasher._finalize()() & ~(-1 << *(_BYTE *)(v10 + 32));
  if (((*(_QWORD *)(v10 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) != 0)
    __asm { BR              X8 }
  swift_bridgeObjectRelease();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v14);
  __s1 = *v14;
  *v14 = 0x8000000000000000;
  sub_10001BBBC(a2, a3);
  sub_100A23A74(a2, a3, a4, v11, isUniquelyReferenced_nonNull_native, a5);
  *v14 = __s1;
  swift_bridgeObjectRelease();
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  result = 1;
  *(_DWORD *)(a1 + 16) = a4;
  return result;
}

uint64_t sub_100A14808(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t *v18;
  uint64_t v19[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_10001A9A8(&qword_101110238);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  if (!*(_QWORD *)(v3 + 16))
    goto LABEL_28;
  v18 = v2;
  v6 = 1 << *(_BYTE *)(v3 + 32);
  v7 = (_QWORD *)(v3 + 56);
  if (v6 < 64)
    v8 = ~(-1 << v6);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(v3 + 56);
  v10 = (unint64_t)(v6 + 63) >> 6;
  swift_retain();
  if (v9)
  {
    v11 = __clz(__rbit64(v9));
    goto LABEL_23;
  }
  if (v10 > 1)
  {
    v12 = *(_QWORD *)(v3 + 64);
    v13 = 1;
    if (v12)
      goto LABEL_22;
    v13 = 2;
    if (v10 > 2)
    {
      v12 = *(_QWORD *)(v3 + 72);
      if (v12)
        goto LABEL_22;
      v13 = 3;
      if (v10 > 3)
      {
        v12 = *(_QWORD *)(v3 + 80);
        if (!v12)
        {
          v14 = 4;
          if (v10 > 4)
          {
            v12 = *(_QWORD *)(v3 + 88);
            if (v12)
            {
              v13 = 4;
              goto LABEL_22;
            }
            while (1)
            {
              v13 = v14 + 1;
              if (__OFADD__(v14, 1))
              {
                __break(1u);
                JUMPOUT(0x100A14BE0);
              }
              if (v13 >= v10)
                break;
              v12 = v7[v13];
              ++v14;
              if (v12)
                goto LABEL_22;
            }
          }
          goto LABEL_24;
        }
LABEL_22:
        v11 = __clz(__rbit64(v12)) + (v13 << 6);
LABEL_23:
        v15 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 48) + v11);
        Hasher.init(_seed:)(v19);
        __asm { BR              X8 }
      }
    }
  }
LABEL_24:
  swift_release(v3);
  v2 = v18;
  v16 = 1 << *(_BYTE *)(v3 + 32);
  if (v16 > 63)
    bzero((void *)(v3 + 56), ((unint64_t)(v16 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v7 = -1 << v16;
  *(_QWORD *)(v3 + 16) = 0;
LABEL_28:
  result = swift_release(v3);
  *v2 = v5;
  return result;
}

uint64_t sub_100A14C04(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  _QWORD *v33;
  _QWORD v34[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_10001A9A8(&qword_1010FA4D8);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  v6 = v5;
  if (*(_QWORD *)(v3 + 16))
  {
    v7 = 1 << *(_BYTE *)(v3 + 32);
    v32 = v2;
    v33 = (_QWORD *)(v3 + 56);
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v9 = v8 & *(_QWORD *)(v3 + 56);
    v10 = (unint64_t)(v7 + 63) >> 6;
    v11 = v5 + 56;
    result = swift_retain();
    v13 = 0;
    while (1)
    {
      if (v9)
      {
        v16 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        v17 = v16 | (v13 << 6);
      }
      else
      {
        v18 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v18 >= v10)
          goto LABEL_36;
        v19 = v33[v18];
        ++v13;
        if (!v19)
        {
          v13 = v18 + 1;
          if (v18 + 1 >= v10)
            goto LABEL_36;
          v19 = v33[v13];
          if (!v19)
          {
            v13 = v18 + 2;
            if (v18 + 2 >= v10)
              goto LABEL_36;
            v19 = v33[v13];
            if (!v19)
            {
              v20 = v18 + 3;
              if (v20 >= v10)
              {
LABEL_36:
                swift_release(v3);
                v2 = v32;
                v31 = 1 << *(_BYTE *)(v3 + 32);
                if (v31 > 63)
                  bzero(v33, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v33 = -1 << v31;
                *(_QWORD *)(v3 + 16) = 0;
                break;
              }
              v19 = v33[v20];
              if (!v19)
              {
                while (1)
                {
                  v13 = v20 + 1;
                  if (__OFADD__(v20, 1))
                    goto LABEL_42;
                  if (v13 >= v10)
                    goto LABEL_36;
                  v19 = v33[v13];
                  ++v20;
                  if (v19)
                    goto LABEL_26;
                }
              }
              v13 = v20;
            }
          }
        }
LABEL_26:
        v9 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v13 << 6);
      }
      v21 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v17);
      v22 = *v21;
      v23 = v21[1];
      Hasher.init(_seed:)(v34);
      String.hash(into:)(v34, v22, v23);
      result = Hasher._finalize()();
      v24 = -1 << *(_BYTE *)(v6 + 32);
      v25 = result & ~v24;
      v26 = v25 >> 6;
      if (((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v27 = 0;
        v28 = (unint64_t)(63 - v24) >> 6;
        do
        {
          if (++v26 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v29 = v26 == v28;
          if (v26 == v28)
            v26 = 0;
          v27 |= v29;
          v30 = *(_QWORD *)(v11 + 8 * v26);
        }
        while (v30 == -1);
        v14 = __clz(__rbit64(~v30)) + (v26 << 6);
      }
      *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      v15 = (_QWORD *)(*(_QWORD *)(v6 + 48) + 16 * v14);
      *v15 = v22;
      v15[1] = v23;
      ++*(_QWORD *)(v6 + 16);
    }
  }
  result = swift_release(v3);
  *v2 = v6;
  return result;
}

uint64_t sub_100A14EE0(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  uint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  _QWORD *v33;
  _QWORD v34[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_10001A9A8(&qword_101110170);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  v6 = v5;
  if (*(_QWORD *)(v3 + 16))
  {
    v7 = 1 << *(_BYTE *)(v3 + 32);
    v32 = v2;
    v33 = (_QWORD *)(v3 + 56);
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v9 = v8 & *(_QWORD *)(v3 + 56);
    v10 = (unint64_t)(v7 + 63) >> 6;
    v11 = v5 + 56;
    result = swift_retain();
    v13 = 0;
    while (1)
    {
      if (v9)
      {
        v16 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        v17 = v16 | (v13 << 6);
      }
      else
      {
        v18 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v18 >= v10)
          goto LABEL_36;
        v19 = v33[v18];
        ++v13;
        if (!v19)
        {
          v13 = v18 + 1;
          if (v18 + 1 >= v10)
            goto LABEL_36;
          v19 = v33[v13];
          if (!v19)
          {
            v13 = v18 + 2;
            if (v18 + 2 >= v10)
              goto LABEL_36;
            v19 = v33[v13];
            if (!v19)
            {
              v20 = v18 + 3;
              if (v20 >= v10)
              {
LABEL_36:
                swift_release(v3);
                v2 = v32;
                v31 = 1 << *(_BYTE *)(v3 + 32);
                if (v31 > 63)
                  bzero(v33, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v33 = -1 << v31;
                *(_QWORD *)(v3 + 16) = 0;
                break;
              }
              v19 = v33[v20];
              if (!v19)
              {
                while (1)
                {
                  v13 = v20 + 1;
                  if (__OFADD__(v20, 1))
                    goto LABEL_42;
                  if (v13 >= v10)
                    goto LABEL_36;
                  v19 = v33[v13];
                  ++v20;
                  if (v19)
                    goto LABEL_26;
                }
              }
              v13 = v20;
            }
          }
        }
LABEL_26:
        v9 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v13 << 6);
      }
      v21 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v17);
      v22 = *v21;
      v23 = v21[1];
      Hasher.init(_seed:)(v34);
      sub_10001BBBC(v22, v23);
      Data.hash(into:)(v34, v22, v23);
      sub_10001BC14(v22, v23);
      result = Hasher._finalize()();
      v24 = -1 << *(_BYTE *)(v6 + 32);
      v25 = result & ~v24;
      v26 = v25 >> 6;
      if (((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v27 = 0;
        v28 = (unint64_t)(63 - v24) >> 6;
        do
        {
          if (++v26 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v29 = v26 == v28;
          if (v26 == v28)
            v26 = 0;
          v27 |= v29;
          v30 = *(_QWORD *)(v11 + 8 * v26);
        }
        while (v30 == -1);
        v14 = __clz(__rbit64(~v30)) + (v26 << 6);
      }
      *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      v15 = (uint64_t *)(*(_QWORD *)(v6 + 48) + 16 * v14);
      *v15 = v22;
      v15[1] = v23;
      ++*(_QWORD *)(v6 + 16);
    }
  }
  result = swift_release(v3);
  *v2 = v6;
  return result;
}

uint64_t sub_100A151D4(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  unsigned __int8 v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_10001A9A8((uint64_t *)&unk_10110FF80);
  result = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  v6 = result;
  if (*(_QWORD *)(v3 + 16))
  {
    v29 = v2;
    v7 = 0;
    v8 = (_QWORD *)(v3 + 56);
    v9 = 1 << *(_BYTE *)(v3 + 32);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v3 + 56);
    v12 = (unint64_t)(v9 + 63) >> 6;
    v13 = result + 56;
    while (1)
    {
      if (v11)
      {
        v15 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v16 = v15 | (v7 << 6);
      }
      else
      {
        v17 = v7 + 1;
        if (__OFADD__(v7, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v17 >= v12)
          goto LABEL_36;
        v18 = v8[v17];
        ++v7;
        if (!v18)
        {
          v7 = v17 + 1;
          if (v17 + 1 >= v12)
            goto LABEL_36;
          v18 = v8[v7];
          if (!v18)
          {
            v7 = v17 + 2;
            if (v17 + 2 >= v12)
              goto LABEL_36;
            v18 = v8[v7];
            if (!v18)
            {
              v19 = v17 + 3;
              if (v19 >= v12)
              {
LABEL_36:
                v28 = 1 << *(_BYTE *)(v3 + 32);
                if (v28 > 63)
                  bzero((void *)(v3 + 56), ((unint64_t)(v28 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v8 = -1 << v28;
                v2 = v29;
                *(_QWORD *)(v3 + 16) = 0;
                break;
              }
              v18 = v8[v19];
              if (!v18)
              {
                while (1)
                {
                  v7 = v19 + 1;
                  if (__OFADD__(v19, 1))
                    goto LABEL_42;
                  if (v7 >= v12)
                    goto LABEL_36;
                  v18 = v8[v7];
                  ++v19;
                  if (v18)
                    goto LABEL_26;
                }
              }
              v7 = v19;
            }
          }
        }
LABEL_26:
        v11 = (v18 - 1) & v18;
        v16 = __clz(__rbit64(v18)) + (v7 << 6);
      }
      v20 = *(_BYTE *)(*(_QWORD *)(v3 + 48) + v16);
      result = static Hasher._hash(seed:bytes:count:)(*(_QWORD *)(v6 + 40), v20, 1);
      v21 = -1 << *(_BYTE *)(v6 + 32);
      v22 = result & ~v21;
      v23 = v22 >> 6;
      if (((-1 << v22) & ~*(_QWORD *)(v13 + 8 * (v22 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v22) & ~*(_QWORD *)(v13 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v24 = 0;
        v25 = (unint64_t)(63 - v21) >> 6;
        do
        {
          if (++v23 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v26 = v23 == v25;
          if (v23 == v25)
            v23 = 0;
          v24 |= v26;
          v27 = *(_QWORD *)(v13 + 8 * v23);
        }
        while (v27 == -1);
        v14 = __clz(__rbit64(~v27)) + (v23 << 6);
      }
      *(_QWORD *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      *(_BYTE *)(*(_QWORD *)(v6 + 48) + v14) = v20;
      ++*(_QWORD *)(v6 + 16);
    }
  }
  result = swift_release(v3);
  *v2 = v6;
  return result;
}

uint64_t sub_100A15468(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  int *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t result;
  int64_t i;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char v40;
  unint64_t v41;
  BOOL v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  int64_t v46;
  _QWORD *v47;
  uint64_t v48;
  int64_t v49;
  _QWORD v50[9];

  v2 = v1;
  v4 = (int *)type metadata accessor for BeaconNamingRecord(0);
  v48 = *((_QWORD *)v4 - 1);
  __chkstk_darwin(v4);
  v6 = (uint64_t *)((char *)&v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = *v1;
  if (*(_QWORD *)(*v1 + 24) > a1)
    a1 = *(_QWORD *)(*v1 + 24);
  sub_10001A9A8(&qword_101110088);
  v8 = static _SetStorage.resize(original:capacity:move:)(v7, a1, 1);
  v9 = v8;
  if (!*(_QWORD *)(v7 + 16))
    goto LABEL_42;
  v10 = 1 << *(_BYTE *)(v7 + 32);
  v11 = *(_QWORD *)(v7 + 56);
  v47 = (_QWORD *)(v7 + 56);
  if (v10 < 64)
    v12 = ~(-1 << v10);
  else
    v12 = -1;
  v13 = v12 & v11;
  v45 = v1;
  v46 = (unint64_t)(v10 + 63) >> 6;
  v14 = v8 + 56;
  result = swift_retain();
  for (i = 0; ; i = v49)
  {
    if (v13)
    {
      v18 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v49 = i;
      v19 = v18 | (i << 6);
      goto LABEL_26;
    }
    v20 = i + 1;
    if (__OFADD__(i, 1))
    {
LABEL_43:
      __break(1u);
LABEL_44:
      __break(1u);
      return result;
    }
    if (v20 >= v46)
      goto LABEL_38;
    v21 = v47[v20];
    v22 = i + 1;
    if (!v21)
    {
      v22 = i + 2;
      if (i + 2 >= v46)
        goto LABEL_38;
      v21 = v47[v22];
      if (!v21)
      {
        v22 = i + 3;
        if (i + 3 >= v46)
          goto LABEL_38;
        v21 = v47[v22];
        if (!v21)
          break;
      }
    }
LABEL_25:
    v13 = (v21 - 1) & v21;
    v49 = v22;
    v19 = __clz(__rbit64(v21)) + (v22 << 6);
LABEL_26:
    v24 = v7;
    v25 = *(_QWORD *)(v48 + 72);
    sub_1000126EC(*(_QWORD *)(v7 + 48) + v25 * v19, (uint64_t)v6, type metadata accessor for BeaconNamingRecord);
    v26 = v9;
    Hasher.init(_seed:)(v50);
    v27 = *v6;
    v28 = v6[1];
    sub_10001BBBC(*v6, v28);
    Data.hash(into:)(v50, v27, v28);
    sub_10001BC14(v27, v28);
    v29 = type metadata accessor for UUID(0);
    v30 = sub_100006204(&qword_1010F98B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    dispatch thunk of Hashable.hash(into:)(v50, v29, v30);
    dispatch thunk of Hashable.hash(into:)(v50, v29, v30);
    Hasher._combine(_:)(*(uint64_t *)((char *)v6 + v4[7]));
    v31 = (uint64_t *)((char *)v6 + v4[8]);
    v32 = *v31;
    v33 = v31[1];
    swift_bridgeObjectRetain(v33);
    String.hash(into:)(v50, v32, v33);
    swift_bridgeObjectRelease();
    v34 = (uint64_t *)((char *)v6 + v4[9]);
    v35 = v34[1];
    if (v35)
    {
      v36 = *v34;
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain(v35);
      String.hash(into:)(v50, v36, v35);
      swift_bridgeObjectRelease();
    }
    else
    {
      Hasher._combine(_:)(0);
    }
    result = Hasher._finalize()();
    v9 = v26;
    v37 = -1 << *(_BYTE *)(v26 + 32);
    v38 = result & ~v37;
    v39 = v38 >> 6;
    v7 = v24;
    if (((-1 << v38) & ~*(_QWORD *)(v14 + 8 * (v38 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v38) & ~*(_QWORD *)(v14 + 8 * (v38 >> 6)))) | v38 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v40 = 0;
      v41 = (unint64_t)(63 - v37) >> 6;
      do
      {
        if (++v39 == v41 && (v40 & 1) != 0)
        {
          __break(1u);
          goto LABEL_43;
        }
        v42 = v39 == v41;
        if (v39 == v41)
          v39 = 0;
        v40 |= v42;
        v43 = *(_QWORD *)(v14 + 8 * v39);
      }
      while (v43 == -1);
      v17 = __clz(__rbit64(~v43)) + (v39 << 6);
    }
    *(_QWORD *)(v14 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    result = sub_1000126EC((uint64_t)v6, *(_QWORD *)(v26 + 48) + v17 * v25, type metadata accessor for BeaconNamingRecord);
    ++*(_QWORD *)(v26 + 16);
  }
  v23 = i + 4;
  if (i + 4 < v46)
  {
    v21 = v47[v23];
    if (!v21)
    {
      while (1)
      {
        v22 = v23 + 1;
        if (__OFADD__(v23, 1))
          goto LABEL_44;
        if (v22 >= v46)
          goto LABEL_38;
        v21 = v47[v22];
        ++v23;
        if (v21)
          goto LABEL_25;
      }
    }
    v22 = i + 4;
    goto LABEL_25;
  }
LABEL_38:
  swift_release();
  v2 = v45;
  v44 = 1 << *(_BYTE *)(v7 + 32);
  if (v44 > 63)
    bzero(v47, ((unint64_t)(v44 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v47 = -1 << v44;
  *(_QWORD *)(v7 + 16) = 0;
LABEL_42:
  result = swift_release();
  *v2 = v9;
  return result;
}

uint64_t sub_100A158E8(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  Swift::UInt v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  int64_t v34;
  _QWORD *v35;
  _QWORD v36[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_10001A9A8(&qword_10110AA48);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  v6 = v5;
  if (*(_QWORD *)(v3 + 16))
  {
    v7 = 1 << *(_BYTE *)(v3 + 32);
    v35 = (_QWORD *)(v3 + 56);
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v9 = v8 & *(_QWORD *)(v3 + 56);
    v33 = v2;
    v34 = (unint64_t)(v7 + 63) >> 6;
    v10 = v5 + 56;
    result = swift_retain();
    v12 = 0;
    while (1)
    {
      if (v9)
      {
        v15 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        v16 = v15 | (v12 << 6);
      }
      else
      {
        v17 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v17 >= v34)
          goto LABEL_36;
        v18 = v35[v17];
        ++v12;
        if (!v18)
        {
          v12 = v17 + 1;
          if (v17 + 1 >= v34)
            goto LABEL_36;
          v18 = v35[v12];
          if (!v18)
          {
            v12 = v17 + 2;
            if (v17 + 2 >= v34)
              goto LABEL_36;
            v18 = v35[v12];
            if (!v18)
            {
              v19 = v17 + 3;
              if (v19 >= v34)
              {
LABEL_36:
                swift_release();
                v2 = v33;
                v32 = 1 << *(_BYTE *)(v3 + 32);
                if (v32 > 63)
                  bzero(v35, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v35 = -1 << v32;
                *(_QWORD *)(v3 + 16) = 0;
                break;
              }
              v18 = v35[v19];
              if (!v18)
              {
                while (1)
                {
                  v12 = v19 + 1;
                  if (__OFADD__(v19, 1))
                    goto LABEL_42;
                  if (v12 >= v34)
                    goto LABEL_36;
                  v18 = v35[v12];
                  ++v19;
                  if (v18)
                    goto LABEL_26;
                }
              }
              v12 = v19;
            }
          }
        }
LABEL_26:
        v9 = (v18 - 1) & v18;
        v16 = __clz(__rbit64(v18)) + (v12 << 6);
      }
      v20 = v3;
      v21 = *(_QWORD *)(v3 + 48) + 24 * v16;
      v22 = *(_QWORD *)v21;
      v23 = *(_QWORD *)(v21 + 8);
      v24 = *(unsigned __int8 *)(v21 + 16);
      Hasher.init(_seed:)(v36);
      String.hash(into:)(v36, v22, v23);
      Hasher._combine(_:)(v24);
      result = Hasher._finalize()();
      v25 = -1 << *(_BYTE *)(v6 + 32);
      v26 = result & ~v25;
      v27 = v26 >> 6;
      if (((-1 << v26) & ~*(_QWORD *)(v10 + 8 * (v26 >> 6))) != 0)
      {
        v13 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v10 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v28 = 0;
        v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v30 = v27 == v29;
          if (v27 == v29)
            v27 = 0;
          v28 |= v30;
          v31 = *(_QWORD *)(v10 + 8 * v27);
        }
        while (v31 == -1);
        v13 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(_QWORD *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      v14 = *(_QWORD *)(v6 + 48) + 24 * v13;
      *(_QWORD *)v14 = v22;
      *(_QWORD *)(v14 + 8) = v23;
      *(_BYTE *)(v14 + 16) = v24;
      ++*(_QWORD *)(v6 + 16);
      v3 = v20;
    }
  }
  result = swift_release();
  *v2 = v6;
  return result;
}

uint64_t sub_100A15C00(uint64_t a1)
{
  return sub_100A1B1EC(a1, &qword_101110018);
}

uint64_t sub_100A15C0C(uint64_t a1)
{
  return sub_100A1852C(a1, (uint64_t *)&unk_10111C3D0, (uint64_t *)&unk_1010F7B10, (unint64_t *)&unk_1010EE140);
}

uint64_t sub_100A15C28(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  _QWORD *v33;
  _QWORD v34[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_10001A9A8((uint64_t *)&unk_1011100D0);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  v6 = v5;
  if (*(_QWORD *)(v3 + 16))
  {
    v7 = 1 << *(_BYTE *)(v3 + 32);
    v32 = v2;
    v33 = (_QWORD *)(v3 + 56);
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v9 = v8 & *(_QWORD *)(v3 + 56);
    v10 = (unint64_t)(v7 + 63) >> 6;
    v11 = v5 + 56;
    result = swift_retain();
    v13 = 0;
    while (1)
    {
      if (v9)
      {
        v16 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        v17 = v16 | (v13 << 6);
      }
      else
      {
        v18 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v18 >= v10)
          goto LABEL_36;
        v19 = v33[v18];
        ++v13;
        if (!v19)
        {
          v13 = v18 + 1;
          if (v18 + 1 >= v10)
            goto LABEL_36;
          v19 = v33[v13];
          if (!v19)
          {
            v13 = v18 + 2;
            if (v18 + 2 >= v10)
              goto LABEL_36;
            v19 = v33[v13];
            if (!v19)
            {
              v20 = v18 + 3;
              if (v20 >= v10)
              {
LABEL_36:
                swift_release();
                v2 = v32;
                v31 = 1 << *(_BYTE *)(v3 + 32);
                if (v31 > 63)
                  bzero(v33, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v33 = -1 << v31;
                *(_QWORD *)(v3 + 16) = 0;
                break;
              }
              v19 = v33[v20];
              if (!v19)
              {
                while (1)
                {
                  v13 = v20 + 1;
                  if (__OFADD__(v20, 1))
                    goto LABEL_42;
                  if (v13 >= v10)
                    goto LABEL_36;
                  v19 = v33[v13];
                  ++v20;
                  if (v19)
                    goto LABEL_26;
                }
              }
              v13 = v20;
            }
          }
        }
LABEL_26:
        v9 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v13 << 6);
      }
      v21 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v17);
      v22 = *v21;
      v23 = v21[1];
      Hasher.init(_seed:)(v34);
      Data.hash(into:)(v34, v22, v23);
      result = Hasher._finalize()();
      v24 = -1 << *(_BYTE *)(v6 + 32);
      v25 = result & ~v24;
      v26 = v25 >> 6;
      if (((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v27 = 0;
        v28 = (unint64_t)(63 - v24) >> 6;
        do
        {
          if (++v26 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v29 = v26 == v28;
          if (v26 == v28)
            v26 = 0;
          v27 |= v29;
          v30 = *(_QWORD *)(v11 + 8 * v26);
        }
        while (v30 == -1);
        v14 = __clz(__rbit64(~v30)) + (v26 << 6);
      }
      *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      v15 = (_QWORD *)(*(_QWORD *)(v6 + 48) + 16 * v14);
      *v15 = v22;
      v15[1] = v23;
      ++*(_QWORD *)(v6 + 16);
    }
  }
  result = swift_release();
  *v2 = v6;
  return result;
}

uint64_t sub_100A15F04(uint64_t a1)
{
  return sub_100A1B1EC(a1, &qword_10110FFD8);
}

uint64_t sub_100A15F10(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  unsigned __int8 *v21;
  Swift::UInt v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  int64_t v34;
  _QWORD *v35;
  _QWORD v36[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_10001A9A8(&qword_10110AAD8);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  v6 = v5;
  if (*(_QWORD *)(v3 + 16))
  {
    v7 = 1 << *(_BYTE *)(v3 + 32);
    v35 = (_QWORD *)(v3 + 56);
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v9 = v8 & *(_QWORD *)(v3 + 56);
    v33 = v2;
    v34 = (unint64_t)(v7 + 63) >> 6;
    v10 = v5 + 56;
    result = swift_retain();
    v12 = 0;
    while (1)
    {
      if (v9)
      {
        v15 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        v16 = v15 | (v12 << 6);
      }
      else
      {
        v17 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v17 >= v34)
          goto LABEL_36;
        v18 = v35[v17];
        ++v12;
        if (!v18)
        {
          v12 = v17 + 1;
          if (v17 + 1 >= v34)
            goto LABEL_36;
          v18 = v35[v12];
          if (!v18)
          {
            v12 = v17 + 2;
            if (v17 + 2 >= v34)
              goto LABEL_36;
            v18 = v35[v12];
            if (!v18)
            {
              v19 = v17 + 3;
              if (v19 >= v34)
              {
LABEL_36:
                swift_release();
                v2 = v33;
                v32 = 1 << *(_BYTE *)(v3 + 32);
                if (v32 > 63)
                  bzero(v35, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v35 = -1 << v32;
                *(_QWORD *)(v3 + 16) = 0;
                break;
              }
              v18 = v35[v19];
              if (!v18)
              {
                while (1)
                {
                  v12 = v19 + 1;
                  if (__OFADD__(v19, 1))
                    goto LABEL_42;
                  if (v12 >= v34)
                    goto LABEL_36;
                  v18 = v35[v12];
                  ++v19;
                  if (v18)
                    goto LABEL_26;
                }
              }
              v12 = v19;
            }
          }
        }
LABEL_26:
        v9 = (v18 - 1) & v18;
        v16 = __clz(__rbit64(v18)) + (v12 << 6);
      }
      v20 = v3;
      v21 = (unsigned __int8 *)(*(_QWORD *)(v3 + 48) + 24 * v16);
      v22 = *v21;
      v23 = *((_QWORD *)v21 + 1);
      v24 = *((_QWORD *)v21 + 2);
      Hasher.init(_seed:)(v36);
      Hasher._combine(_:)(v22);
      swift_bridgeObjectRetain(v24);
      String.hash(into:)(v36, v23, v24);
      swift_bridgeObjectRelease();
      result = Hasher._finalize()();
      v25 = -1 << *(_BYTE *)(v6 + 32);
      v26 = result & ~v25;
      v27 = v26 >> 6;
      if (((-1 << v26) & ~*(_QWORD *)(v10 + 8 * (v26 >> 6))) != 0)
      {
        v13 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v10 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v28 = 0;
        v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v30 = v27 == v29;
          if (v27 == v29)
            v27 = 0;
          v28 |= v30;
          v31 = *(_QWORD *)(v10 + 8 * v27);
        }
        while (v31 == -1);
        v13 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(_QWORD *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      v14 = *(_QWORD *)(v6 + 48) + 24 * v13;
      *(_BYTE *)v14 = v22;
      *(_QWORD *)(v14 + 8) = v23;
      *(_QWORD *)(v14 + 16) = v24;
      ++*(_QWORD *)(v6 + 16);
      v3 = v20;
    }
  }
  result = swift_release();
  *v2 = v6;
  return result;
}

uint64_t sub_100A16238(uint64_t a1, uint64_t (*a2)(_QWORD), uint64_t *a3, void (*a4)(_QWORD *))
{
  uint64_t *v4;
  uint64_t *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t result;
  int64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  Swift::Int v26;
  unint64_t v27;
  int64_t v28;
  unint64_t v29;
  int64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  _QWORD *v34;
  int64_t v35;
  void (*v36)(_QWORD *);
  _QWORD v37[9];

  v36 = a4;
  v7 = v4;
  v9 = a2(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v32 - v11;
  v13 = *v7;
  if (*(_QWORD *)(*v7 + 24) > a1)
    a1 = *(_QWORD *)(*v7 + 24);
  sub_10001A9A8(a3);
  v14 = static _SetStorage.resize(original:capacity:move:)(v13, a1, 1);
  v15 = v14;
  if (!*(_QWORD *)(v13 + 16))
    goto LABEL_29;
  v16 = 1 << *(_BYTE *)(v13 + 32);
  v17 = *(_QWORD *)(v13 + 56);
  v33 = v7;
  v34 = (_QWORD *)(v13 + 56);
  if (v16 < 64)
    v18 = ~(-1 << v16);
  else
    v18 = -1;
  v19 = v18 & v17;
  v35 = (unint64_t)(v16 + 63) >> 6;
  v20 = v14 + 56;
  result = swift_retain();
  v22 = 0;
  while (1)
  {
    if (v19)
    {
      v23 = __clz(__rbit64(v19));
      v19 &= v19 - 1;
      v24 = v23 | (v22 << 6);
      goto LABEL_9;
    }
    v28 = v22 + 1;
    if (__OFADD__(v22, 1))
    {
      __break(1u);
LABEL_31:
      __break(1u);
      return result;
    }
    if (v28 >= v35)
      goto LABEL_25;
    v29 = v34[v28];
    ++v22;
    if (!v29)
    {
      v22 = v28 + 1;
      if (v28 + 1 >= v35)
        goto LABEL_25;
      v29 = v34[v22];
      if (!v29)
      {
        v22 = v28 + 2;
        if (v28 + 2 >= v35)
          goto LABEL_25;
        v29 = v34[v22];
        if (!v29)
          break;
      }
    }
LABEL_24:
    v19 = (v29 - 1) & v29;
    v24 = __clz(__rbit64(v29)) + (v22 << 6);
LABEL_9:
    v25 = *(_QWORD *)(v10 + 72);
    sub_1000126EC(*(_QWORD *)(v13 + 48) + v25 * v24, (uint64_t)v12, a2);
    Hasher.init(_seed:)(v37);
    v36(v37);
    v26 = Hasher._finalize()();
    v27 = _HashTable.nextHole(atOrAfter:)(v26 & ~(-1 << *(_BYTE *)(v15 + 32)), v15 + 56, ~(-1 << *(_BYTE *)(v15 + 32)));
    *(_QWORD *)(v20 + ((v27 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v27;
    result = sub_1000126EC((uint64_t)v12, *(_QWORD *)(v15 + 48) + v27 * v25, a2);
    ++*(_QWORD *)(v15 + 16);
  }
  v30 = v28 + 3;
  if (v30 < v35)
  {
    v29 = v34[v30];
    if (!v29)
    {
      while (1)
      {
        v22 = v30 + 1;
        if (__OFADD__(v30, 1))
          goto LABEL_31;
        if (v22 >= v35)
          goto LABEL_25;
        v29 = v34[v22];
        ++v30;
        if (v29)
          goto LABEL_24;
      }
    }
    v22 = v30;
    goto LABEL_24;
  }
LABEL_25:
  swift_release(v13);
  v31 = 1 << *(_BYTE *)(v13 + 32);
  if (v31 > 63)
    bzero(v34, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v34 = -1 << v31;
  v7 = v33;
  *(_QWORD *)(v13 + 16) = 0;
LABEL_29:
  result = swift_release(v13);
  *v7 = v15;
  return result;
}

uint64_t sub_100A1650C(uint64_t a1)
{
  return sub_100A1B1EC(a1, (uint64_t *)&unk_10110FF70);
}

uint64_t sub_100A16518(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_10001A9A8(&qword_1010FA428);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  if (!*(_QWORD *)(v3 + 16))
    goto LABEL_28;
  v6 = 1 << *(_BYTE *)(v3 + 32);
  v7 = (_QWORD *)(v3 + 56);
  if (v6 < 64)
    v8 = ~(-1 << v6);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(v3 + 56);
  v10 = (unint64_t)(v6 + 63) >> 6;
  swift_retain();
  if (v9)
  {
    v11 = __clz(__rbit64(v9));
    goto LABEL_23;
  }
  if (v10 > 1)
  {
    v12 = *(_QWORD *)(v3 + 64);
    v13 = 1;
    if (v12)
      goto LABEL_22;
    v13 = 2;
    if (v10 > 2)
    {
      v12 = *(_QWORD *)(v3 + 72);
      if (v12)
        goto LABEL_22;
      v13 = 3;
      if (v10 > 3)
      {
        v12 = *(_QWORD *)(v3 + 80);
        if (!v12)
        {
          v14 = 4;
          if (v10 > 4)
          {
            v12 = *(_QWORD *)(v3 + 88);
            if (v12)
            {
              v13 = 4;
              goto LABEL_22;
            }
            while (1)
            {
              v13 = v14 + 1;
              if (__OFADD__(v14, 1))
              {
                __break(1u);
                JUMPOUT(0x100A16A50);
              }
              if (v13 >= v10)
                break;
              v12 = v7[v13];
              ++v14;
              if (v12)
                goto LABEL_22;
            }
          }
          goto LABEL_24;
        }
LABEL_22:
        v11 = __clz(__rbit64(v12)) + (v13 << 6);
LABEL_23:
        v15 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 48) + v11);
        Hasher.init(_seed:)(v18);
        __asm { BR              X8 }
      }
    }
  }
LABEL_24:
  swift_release(v3);
  v16 = 1 << *(_BYTE *)(v3 + 32);
  if (v16 > 63)
    bzero((void *)(v3 + 56), ((unint64_t)(v16 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v7 = -1 << v16;
  *(_QWORD *)(v3 + 16) = 0;
LABEL_28:
  result = swift_release(v3);
  *v2 = v5;
  return result;
}

uint64_t sub_100A16AA4(uint64_t a1)
{
  return sub_100A1B1EC(a1, (uint64_t *)&unk_10111C380);
}

Swift::Int sub_100A16AB0(uint64_t a1)
{
  Swift::Int *v1;
  Swift::Int *v2;
  Swift::Int v3;
  uint64_t v4;
  Swift::Int result;
  Swift::Int v6;
  int64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  Swift::Int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  Swift::Int *v29;
  uint64_t v30[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_10001A9A8(&qword_101110038);
  result = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  v6 = result;
  if (*(_QWORD *)(v3 + 16))
  {
    v29 = v2;
    v7 = 0;
    v8 = (_QWORD *)(v3 + 56);
    v9 = 1 << *(_BYTE *)(v3 + 32);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v3 + 56);
    v12 = (unint64_t)(v9 + 63) >> 6;
    v13 = result + 56;
    while (1)
    {
      if (v11)
      {
        v15 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v16 = v15 | (v7 << 6);
      }
      else
      {
        v17 = v7 + 1;
        if (__OFADD__(v7, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v17 >= v12)
          goto LABEL_36;
        v18 = v8[v17];
        ++v7;
        if (!v18)
        {
          v7 = v17 + 1;
          if (v17 + 1 >= v12)
            goto LABEL_36;
          v18 = v8[v7];
          if (!v18)
          {
            v7 = v17 + 2;
            if (v17 + 2 >= v12)
              goto LABEL_36;
            v18 = v8[v7];
            if (!v18)
            {
              v19 = v17 + 3;
              if (v19 >= v12)
              {
LABEL_36:
                v28 = 1 << *(_BYTE *)(v3 + 32);
                if (v28 > 63)
                  bzero((void *)(v3 + 56), ((unint64_t)(v28 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v8 = -1 << v28;
                v2 = v29;
                *(_QWORD *)(v3 + 16) = 0;
                break;
              }
              v18 = v8[v19];
              if (!v18)
              {
                while (1)
                {
                  v7 = v19 + 1;
                  if (__OFADD__(v19, 1))
                    goto LABEL_42;
                  if (v7 >= v12)
                    goto LABEL_36;
                  v18 = v8[v7];
                  ++v19;
                  if (v18)
                    goto LABEL_26;
                }
              }
              v7 = v19;
            }
          }
        }
LABEL_26:
        v11 = (v18 - 1) & v18;
        v16 = __clz(__rbit64(v18)) + (v7 << 6);
      }
      v20 = *(char *)(*(_QWORD *)(v3 + 48) + v16);
      Hasher.init(_seed:)(v30);
      Hasher._combine(_:)(qword_100E59228[v20]);
      result = Hasher._finalize()();
      v21 = -1 << *(_BYTE *)(v6 + 32);
      v22 = result & ~v21;
      v23 = v22 >> 6;
      if (((-1 << v22) & ~*(_QWORD *)(v13 + 8 * (v22 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v22) & ~*(_QWORD *)(v13 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v24 = 0;
        v25 = (unint64_t)(63 - v21) >> 6;
        do
        {
          if (++v23 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v26 = v23 == v25;
          if (v23 == v25)
            v23 = 0;
          v24 |= v26;
          v27 = *(_QWORD *)(v13 + 8 * v23);
        }
        while (v27 == -1);
        v14 = __clz(__rbit64(~v27)) + (v23 << 6);
      }
      *(_QWORD *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      *(_BYTE *)(*(_QWORD *)(v6 + 48) + v14) = v20;
      ++*(_QWORD *)(v6 + 16);
    }
  }
  result = swift_release(v3);
  *v2 = v6;
  return result;
}

uint64_t sub_100A16D64(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  int *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t result;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  Swift::Int v25;
  unint64_t v26;
  int64_t v27;
  unint64_t v28;
  int64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  _QWORD *v33;
  int64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD v37[9];

  v2 = v1;
  v4 = (int *)type metadata accessor for OwnerSharingCircle(0);
  v35 = *((_QWORD *)v4 - 1);
  __chkstk_darwin(v4);
  v6 = (uint64_t *)((char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = *v1;
  if (*(_QWORD *)(*v1 + 24) > a1)
    a1 = *(_QWORD *)(*v1 + 24);
  sub_10001A9A8(&qword_10110AAC8);
  v8 = static _SetStorage.resize(original:capacity:move:)(v7, a1, 1);
  v9 = v8;
  if (!*(_QWORD *)(v7 + 16))
    goto LABEL_30;
  v10 = 1 << *(_BYTE *)(v7 + 32);
  v11 = *(_QWORD *)(v7 + 56);
  v32 = v1;
  v33 = (_QWORD *)(v7 + 56);
  if (v10 < 64)
    v12 = ~(-1 << v10);
  else
    v12 = -1;
  v13 = v12 & v11;
  v34 = (unint64_t)(v10 + 63) >> 6;
  v14 = v8 + 56;
  v36 = v7;
  result = swift_retain();
  v16 = 0;
  while (1)
  {
    if (v13)
    {
      v17 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v18 = v17 | (v16 << 6);
      goto LABEL_9;
    }
    v27 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
      __break(1u);
LABEL_32:
      __break(1u);
      return result;
    }
    if (v27 >= v34)
      goto LABEL_25;
    v28 = v33[v27];
    ++v16;
    if (!v28)
    {
      v16 = v27 + 1;
      if (v27 + 1 >= v34)
        goto LABEL_25;
      v28 = v33[v16];
      if (!v28)
      {
        v16 = v27 + 2;
        if (v27 + 2 >= v34)
          goto LABEL_25;
        v28 = v33[v16];
        if (!v28)
          break;
      }
    }
LABEL_24:
    v13 = (v28 - 1) & v28;
    v18 = __clz(__rbit64(v28)) + (v16 << 6);
LABEL_9:
    v19 = *(_QWORD *)(v35 + 72);
    sub_1000126EC(*(_QWORD *)(v36 + 48) + v19 * v18, (uint64_t)v6, type metadata accessor for OwnerSharingCircle);
    Hasher.init(_seed:)(v37);
    v21 = *v6;
    v20 = v6[1];
    sub_10001BBBC(*v6, v20);
    Data.hash(into:)(v37, v21, v20);
    sub_10001BC14(v21, v20);
    v22 = type metadata accessor for UUID(0);
    v23 = sub_100006204(&qword_1010F98B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    dispatch thunk of Hashable.hash(into:)(v37, v22, v23);
    dispatch thunk of Hashable.hash(into:)(v37, v22, v23);
    Hasher._combine(_:)(*((unsigned __int8 *)v6 + v4[7]));
    v24 = *(uint64_t *)((char *)v6 + v4[8]);
    swift_bridgeObjectRetain(v24);
    sub_100A2FEA8((uint64_t)v37, v24);
    swift_bridgeObjectRelease();
    Hasher._combine(_:)(*((unsigned __int8 *)v6 + v4[9]));
    v25 = Hasher._finalize()();
    v26 = _HashTable.nextHole(atOrAfter:)(v25 & ~(-1 << *(_BYTE *)(v9 + 32)), v9 + 56, ~(-1 << *(_BYTE *)(v9 + 32)));
    *(_QWORD *)(v14 + ((v26 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v26;
    result = sub_1000126EC((uint64_t)v6, *(_QWORD *)(v9 + 48) + v26 * v19, type metadata accessor for OwnerSharingCircle);
    ++*(_QWORD *)(v9 + 16);
  }
  v29 = v27 + 3;
  if (v29 < v34)
  {
    v28 = v33[v29];
    if (!v28)
    {
      while (1)
      {
        v16 = v29 + 1;
        if (__OFADD__(v29, 1))
          goto LABEL_32;
        if (v16 >= v34)
          goto LABEL_25;
        v28 = v33[v16];
        ++v29;
        if (v28)
          goto LABEL_24;
      }
    }
    v16 = v29;
    goto LABEL_24;
  }
LABEL_25:
  v30 = v36;
  swift_release();
  v31 = 1 << *(_BYTE *)(v30 + 32);
  if (v31 > 63)
    bzero(v33, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v33 = -1 << v31;
  v2 = v32;
  *(_QWORD *)(v30 + 16) = 0;
LABEL_30:
  result = swift_release();
  *v2 = v9;
  return result;
}

uint64_t sub_100A17108(uint64_t a1)
{
  return sub_100A1B1EC(a1, (uint64_t *)&unk_10111C360);
}

uint64_t sub_100A17114(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t *v18;
  uint64_t v19[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_10001A9A8(&qword_1010FA4A0);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  if (!*(_QWORD *)(v3 + 16))
    goto LABEL_28;
  v18 = v2;
  v6 = 1 << *(_BYTE *)(v3 + 32);
  v7 = (_QWORD *)(v3 + 56);
  if (v6 < 64)
    v8 = ~(-1 << v6);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(v3 + 56);
  v10 = (unint64_t)(v6 + 63) >> 6;
  swift_retain();
  if (v9)
  {
    v11 = __clz(__rbit64(v9));
    goto LABEL_23;
  }
  if (v10 > 1)
  {
    v12 = *(_QWORD *)(v3 + 64);
    v13 = 1;
    if (v12)
      goto LABEL_22;
    v13 = 2;
    if (v10 > 2)
    {
      v12 = *(_QWORD *)(v3 + 72);
      if (v12)
        goto LABEL_22;
      v13 = 3;
      if (v10 > 3)
      {
        v12 = *(_QWORD *)(v3 + 80);
        if (!v12)
        {
          v14 = 4;
          if (v10 > 4)
          {
            v12 = *(_QWORD *)(v3 + 88);
            if (v12)
            {
              v13 = 4;
              goto LABEL_22;
            }
            while (1)
            {
              v13 = v14 + 1;
              if (__OFADD__(v14, 1))
              {
                __break(1u);
                JUMPOUT(0x100A175A4);
              }
              if (v13 >= v10)
                break;
              v12 = v7[v13];
              ++v14;
              if (v12)
                goto LABEL_22;
            }
          }
          goto LABEL_24;
        }
LABEL_22:
        v11 = __clz(__rbit64(v12)) + (v13 << 6);
LABEL_23:
        v15 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 48) + v11);
        Hasher.init(_seed:)(v19);
        __asm { BR              X8 }
      }
    }
  }
LABEL_24:
  swift_release();
  v2 = v18;
  v16 = 1 << *(_BYTE *)(v3 + 32);
  if (v16 > 63)
    bzero((void *)(v3 + 56), ((unint64_t)(v16 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v7 = -1 << v16;
  *(_QWORD *)(v3 + 16) = 0;
LABEL_28:
  result = swift_release();
  *v2 = v5;
  return result;
}

unint64_t sub_100A175DC(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t result;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  __int128 *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  Swift::Int v21;
  _OWORD *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  int64_t v28;
  unint64_t v29;
  int64_t v30;
  uint64_t v31;
  _QWORD v32[9];
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_10001A9A8((uint64_t *)&unk_101110180);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  if (*(_QWORD *)(v3 + 16))
  {
    v6 = 1 << *(_BYTE *)(v3 + 32);
    v7 = (_QWORD *)(v3 + 56);
    if (v6 < 64)
      v8 = ~(-1 << v6);
    else
      v8 = -1;
    v9 = v8 & *(_QWORD *)(v3 + 56);
    v10 = (unint64_t)(v6 + 63) >> 6;
    result = swift_retain();
    v12 = 0;
    while (1)
    {
      if (v9)
      {
        v13 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        v14 = v13 | (v12 << 6);
      }
      else
      {
        v28 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
          __break(1u);
LABEL_32:
          __break(1u);
          return result;
        }
        if (v28 >= v10)
          goto LABEL_26;
        v29 = v7[v28];
        ++v12;
        if (!v29)
        {
          v12 = v28 + 1;
          if (v28 + 1 >= v10)
            goto LABEL_26;
          v29 = v7[v12];
          if (!v29)
          {
            v12 = v28 + 2;
            if (v28 + 2 >= v10)
              goto LABEL_26;
            v29 = v7[v12];
            if (!v29)
            {
              v30 = v28 + 3;
              if (v30 >= v10)
              {
LABEL_26:
                swift_release();
                v31 = 1 << *(_BYTE *)(v3 + 32);
                if (v31 > 63)
                  bzero((void *)(v3 + 56), ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v7 = -1 << v31;
                *(_QWORD *)(v3 + 16) = 0;
                break;
              }
              v29 = v7[v30];
              if (!v29)
              {
                while (1)
                {
                  v12 = v30 + 1;
                  if (__OFADD__(v30, 1))
                    goto LABEL_32;
                  if (v12 >= v10)
                    goto LABEL_26;
                  v29 = v7[v12];
                  ++v30;
                  if (v29)
                    goto LABEL_25;
                }
              }
              v12 = v30;
            }
          }
        }
LABEL_25:
        v9 = (v29 - 1) & v29;
        v14 = __clz(__rbit64(v29)) + (v12 << 6);
      }
      v15 = (__int128 *)(*(_QWORD *)(v3 + 48) + 160 * v14);
      v16 = v15[7];
      v39 = v15[6];
      v40 = v16;
      v17 = v15[9];
      v41 = v15[8];
      v42 = v17;
      v18 = v15[3];
      v35 = v15[2];
      v36 = v18;
      v19 = v15[5];
      v37 = v15[4];
      v38 = v19;
      v20 = v15[1];
      v33 = *v15;
      v34 = v20;
      Hasher.init(_seed:)(v32);
      sub_100AA5AA0((uint64_t)v32);
      v21 = Hasher._finalize()();
      result = _HashTable.nextHole(atOrAfter:)(v21 & ~(-1 << *(_BYTE *)(v5 + 32)), v5 + 56, ~(-1 << *(_BYTE *)(v5 + 32)));
      *(_QWORD *)(v5 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
      v22 = (_OWORD *)(*(_QWORD *)(v5 + 48) + 160 * result);
      v23 = v40;
      v22[6] = v39;
      v22[7] = v23;
      v24 = v42;
      v22[8] = v41;
      v22[9] = v24;
      v25 = v36;
      v22[2] = v35;
      v22[3] = v25;
      v26 = v38;
      v22[4] = v37;
      v22[5] = v26;
      v27 = v34;
      *v22 = v33;
      v22[1] = v27;
      ++*(_QWORD *)(v5 + 16);
    }
  }
  result = swift_release();
  *v2 = v5;
  return result;
}

uint64_t sub_100A1787C(uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t *a3, unint64_t *a4, uint64_t a5)
{
  uint64_t *v5;
  uint64_t *v7;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t result;
  int64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, unint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char v37;
  unint64_t v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  int64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t (*v47)(uint64_t);
  unint64_t *v48;
  uint64_t v49;

  v48 = a4;
  v49 = a5;
  v7 = v5;
  v47 = a2;
  v9 = a2(0);
  v46 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v11 = (char *)&v42 - v10;
  v12 = *v7;
  if (*(_QWORD *)(*v7 + 24) > a1)
    a1 = *(_QWORD *)(*v7 + 24);
  sub_10001A9A8(a3);
  v13 = static _SetStorage.resize(original:capacity:move:)(v12, a1, 1);
  v14 = v13;
  if (!*(_QWORD *)(v12 + 16))
    goto LABEL_39;
  v15 = 1 << *(_BYTE *)(v12 + 32);
  v16 = *(_QWORD *)(v12 + 56);
  v45 = (_QWORD *)(v12 + 56);
  if (v15 < 64)
    v17 = ~(-1 << v15);
  else
    v17 = -1;
  v18 = v17 & v16;
  v43 = v7;
  v44 = (unint64_t)(v15 + 63) >> 6;
  v19 = v13 + 56;
  result = swift_retain();
  v21 = 0;
  while (1)
  {
    if (v18)
    {
      v23 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      v24 = v23 | (v21 << 6);
      goto LABEL_26;
    }
    v25 = v21 + 1;
    if (__OFADD__(v21, 1))
    {
LABEL_40:
      __break(1u);
LABEL_41:
      __break(1u);
      return result;
    }
    if (v25 >= v44)
      goto LABEL_35;
    v26 = v45[v25];
    ++v21;
    if (!v26)
    {
      v21 = v25 + 1;
      if (v25 + 1 >= v44)
        goto LABEL_35;
      v26 = v45[v21];
      if (!v26)
      {
        v21 = v25 + 2;
        if (v25 + 2 >= v44)
          goto LABEL_35;
        v26 = v45[v21];
        if (!v26)
          break;
      }
    }
LABEL_25:
    v18 = (v26 - 1) & v26;
    v24 = __clz(__rbit64(v26)) + (v21 << 6);
LABEL_26:
    v28 = v12;
    v29 = *(_QWORD *)(v12 + 48);
    v30 = *(_QWORD *)(v46 + 72);
    v31 = *(void (**)(char *, unint64_t, uint64_t))(v46 + 32);
    v31(v11, v29 + v30 * v24, v9);
    v32 = *(_QWORD *)(v14 + 40);
    v33 = sub_100006204(v48, v47, v49);
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v32, v9, v33);
    v34 = -1 << *(_BYTE *)(v14 + 32);
    v35 = result & ~v34;
    v36 = v35 >> 6;
    if (((-1 << v35) & ~*(_QWORD *)(v19 + 8 * (v35 >> 6))) != 0)
    {
      v22 = __clz(__rbit64((-1 << v35) & ~*(_QWORD *)(v19 + 8 * (v35 >> 6)))) | v35 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v37 = 0;
      v38 = (unint64_t)(63 - v34) >> 6;
      do
      {
        if (++v36 == v38 && (v37 & 1) != 0)
        {
          __break(1u);
          goto LABEL_40;
        }
        v39 = v36 == v38;
        if (v36 == v38)
          v36 = 0;
        v37 |= v39;
        v40 = *(_QWORD *)(v19 + 8 * v36);
      }
      while (v40 == -1);
      v22 = __clz(__rbit64(~v40)) + (v36 << 6);
    }
    *(_QWORD *)(v19 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
    result = ((uint64_t (*)(unint64_t, char *, uint64_t))v31)(*(_QWORD *)(v14 + 48) + v22 * v30, v11, v9);
    ++*(_QWORD *)(v14 + 16);
    v12 = v28;
  }
  v27 = v25 + 3;
  if (v27 < v44)
  {
    v26 = v45[v27];
    if (!v26)
    {
      while (1)
      {
        v21 = v27 + 1;
        if (__OFADD__(v27, 1))
          goto LABEL_41;
        if (v21 >= v44)
          goto LABEL_35;
        v26 = v45[v21];
        ++v27;
        if (v26)
          goto LABEL_25;
      }
    }
    v21 = v27;
    goto LABEL_25;
  }
LABEL_35:
  swift_release(v12);
  v7 = v43;
  v41 = 1 << *(_BYTE *)(v12 + 32);
  if (v41 > 63)
    bzero(v45, ((unint64_t)(v41 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v45 = -1 << v41;
  *(_QWORD *)(v12 + 16) = 0;
LABEL_39:
  result = swift_release(v12);
  *v7 = v14;
  return result;
}

uint64_t sub_100A17BDC(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  _QWORD *v33;
  _QWORD v34[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_10001A9A8((uint64_t *)&unk_101110220);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  v6 = v5;
  if (*(_QWORD *)(v3 + 16))
  {
    v7 = 1 << *(_BYTE *)(v3 + 32);
    v32 = v2;
    v33 = (_QWORD *)(v3 + 56);
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v9 = v8 & *(_QWORD *)(v3 + 56);
    v10 = (unint64_t)(v7 + 63) >> 6;
    v11 = v5 + 56;
    result = swift_retain();
    v13 = 0;
    while (1)
    {
      if (v9)
      {
        v16 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        v17 = v16 | (v13 << 6);
      }
      else
      {
        v18 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v18 >= v10)
          goto LABEL_36;
        v19 = v33[v18];
        ++v13;
        if (!v19)
        {
          v13 = v18 + 1;
          if (v18 + 1 >= v10)
            goto LABEL_36;
          v19 = v33[v13];
          if (!v19)
          {
            v13 = v18 + 2;
            if (v18 + 2 >= v10)
              goto LABEL_36;
            v19 = v33[v13];
            if (!v19)
            {
              v20 = v18 + 3;
              if (v20 >= v10)
              {
LABEL_36:
                swift_release();
                v2 = v32;
                v31 = 1 << *(_BYTE *)(v3 + 32);
                if (v31 > 63)
                  bzero(v33, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v33 = -1 << v31;
                *(_QWORD *)(v3 + 16) = 0;
                break;
              }
              v19 = v33[v20];
              if (!v19)
              {
                while (1)
                {
                  v13 = v20 + 1;
                  if (__OFADD__(v20, 1))
                    goto LABEL_42;
                  if (v13 >= v10)
                    goto LABEL_36;
                  v19 = v33[v13];
                  ++v20;
                  if (v19)
                    goto LABEL_26;
                }
              }
              v13 = v20;
            }
          }
        }
LABEL_26:
        v9 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v13 << 6);
      }
      v21 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v17);
      v22 = *v21;
      v23 = v21[1];
      Hasher.init(_seed:)(v34);
      String.hash(into:)(v34, v22, v23);
      result = Hasher._finalize()();
      v24 = -1 << *(_BYTE *)(v6 + 32);
      v25 = result & ~v24;
      v26 = v25 >> 6;
      if (((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v27 = 0;
        v28 = (unint64_t)(63 - v24) >> 6;
        do
        {
          if (++v26 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v29 = v26 == v28;
          if (v26 == v28)
            v26 = 0;
          v27 |= v29;
          v30 = *(_QWORD *)(v11 + 8 * v26);
        }
        while (v30 == -1);
        v14 = __clz(__rbit64(~v30)) + (v26 << 6);
      }
      *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      v15 = (_QWORD *)(*(_QWORD *)(v6 + 48) + 16 * v14);
      *v15 = v22;
      v15[1] = v23;
      ++*(_QWORD *)(v6 + 16);
    }
  }
  result = swift_release();
  *v2 = v6;
  return result;
}

uint64_t sub_100A17EB8(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_10001A9A8(&qword_1010F9F20);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  v6 = v5;
  if (*(_QWORD *)(v3 + 16))
  {
    v31 = v2;
    v7 = 1 << *(_BYTE *)(v3 + 32);
    v8 = (_QWORD *)(v3 + 56);
    if (v7 < 64)
      v9 = ~(-1 << v7);
    else
      v9 = -1;
    v10 = v9 & *(_QWORD *)(v3 + 56);
    v11 = (unint64_t)(v7 + 63) >> 6;
    v12 = v5 + 56;
    result = swift_retain();
    v14 = 0;
    while (1)
    {
      if (v10)
      {
        v17 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        v18 = v17 | (v14 << 6);
      }
      else
      {
        v19 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v19 >= v11)
          goto LABEL_36;
        v20 = v8[v19];
        ++v14;
        if (!v20)
        {
          v14 = v19 + 1;
          if (v19 + 1 >= v11)
            goto LABEL_36;
          v20 = v8[v14];
          if (!v20)
          {
            v14 = v19 + 2;
            if (v19 + 2 >= v11)
              goto LABEL_36;
            v20 = v8[v14];
            if (!v20)
            {
              v21 = v19 + 3;
              if (v21 >= v11)
              {
LABEL_36:
                swift_release();
                v2 = v31;
                v30 = 1 << *(_BYTE *)(v3 + 32);
                if (v30 > 63)
                  bzero((void *)(v3 + 56), ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v8 = -1 << v30;
                *(_QWORD *)(v3 + 16) = 0;
                break;
              }
              v20 = v8[v21];
              if (!v20)
              {
                while (1)
                {
                  v14 = v21 + 1;
                  if (__OFADD__(v21, 1))
                    goto LABEL_42;
                  if (v14 >= v11)
                    goto LABEL_36;
                  v20 = v8[v14];
                  ++v21;
                  if (v20)
                    goto LABEL_26;
                }
              }
              v14 = v21;
            }
          }
        }
LABEL_26:
        v10 = (v20 - 1) & v20;
        v18 = __clz(__rbit64(v20)) + (v14 << 6);
      }
      v22 = *(_QWORD *)(v3 + 48) + 40 * v18;
      v32 = *(_OWORD *)v22;
      v33 = *(_OWORD *)(v22 + 16);
      v34 = *(_QWORD *)(v22 + 32);
      result = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(v6 + 40));
      v23 = -1 << *(_BYTE *)(v6 + 32);
      v24 = result & ~v23;
      v25 = v24 >> 6;
      if (((-1 << v24) & ~*(_QWORD *)(v12 + 8 * (v24 >> 6))) != 0)
      {
        v15 = __clz(__rbit64((-1 << v24) & ~*(_QWORD *)(v12 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v26 = 0;
        v27 = (unint64_t)(63 - v23) >> 6;
        do
        {
          if (++v25 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v28 = v25 == v27;
          if (v25 == v27)
            v25 = 0;
          v26 |= v28;
          v29 = *(_QWORD *)(v12 + 8 * v25);
        }
        while (v29 == -1);
        v15 = __clz(__rbit64(~v29)) + (v25 << 6);
      }
      *(_QWORD *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      v16 = *(_QWORD *)(v6 + 48) + 40 * v15;
      *(_OWORD *)v16 = v32;
      *(_OWORD *)(v16 + 16) = v33;
      *(_QWORD *)(v16 + 32) = v34;
      ++*(_QWORD *)(v6 + 16);
    }
  }
  result = swift_release();
  *v2 = v6;
  return result;
}

uint64_t sub_100A18180(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t result;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  int64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD v40[9];

  v2 = v1;
  v4 = type metadata accessor for OwnedBeaconGroup(0);
  v38 = *(_QWORD *)(v4 - 8);
  v39 = v4;
  __chkstk_darwin(v4);
  v6 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  if (*(_QWORD *)(*v1 + 24) > a1)
    a1 = *(_QWORD *)(*v1 + 24);
  sub_10001A9A8(&qword_101110168);
  v8 = static _SetStorage.resize(original:capacity:move:)(v7, a1, 1);
  v9 = v8;
  if (!*(_QWORD *)(v7 + 16))
    goto LABEL_39;
  v10 = 1 << *(_BYTE *)(v7 + 32);
  v11 = *(_QWORD *)(v7 + 56);
  v37 = (_QWORD *)(v7 + 56);
  if (v10 < 64)
    v12 = ~(-1 << v10);
  else
    v12 = -1;
  v13 = v12 & v11;
  v35 = v1;
  v36 = (unint64_t)(v10 + 63) >> 6;
  v14 = v8 + 56;
  result = swift_retain();
  v16 = 0;
  while (1)
  {
    if (v13)
    {
      v18 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v19 = v18 | (v16 << 6);
      goto LABEL_26;
    }
    v20 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
LABEL_40:
      __break(1u);
LABEL_41:
      __break(1u);
      return result;
    }
    if (v20 >= v36)
      goto LABEL_35;
    v21 = v37[v20];
    ++v16;
    if (!v21)
    {
      v16 = v20 + 1;
      if (v20 + 1 >= v36)
        goto LABEL_35;
      v21 = v37[v16];
      if (!v21)
      {
        v16 = v20 + 2;
        if (v20 + 2 >= v36)
          goto LABEL_35;
        v21 = v37[v16];
        if (!v21)
          break;
      }
    }
LABEL_25:
    v13 = (v21 - 1) & v21;
    v19 = __clz(__rbit64(v21)) + (v16 << 6);
LABEL_26:
    v23 = v7;
    v24 = *(_QWORD *)(v38 + 72);
    sub_1000126EC(*(_QWORD *)(v7 + 48) + v24 * v19, (uint64_t)v6, type metadata accessor for OwnedBeaconGroup);
    Hasher.init(_seed:)(v40);
    v25 = type metadata accessor for UUID(0);
    v26 = sub_100006204(&qword_1010F98B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    dispatch thunk of Hashable.hash(into:)(v40, v25, v26);
    result = Hasher._finalize()();
    v27 = -1 << *(_BYTE *)(v9 + 32);
    v28 = result & ~v27;
    v29 = v28 >> 6;
    if (((-1 << v28) & ~*(_QWORD *)(v14 + 8 * (v28 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v28) & ~*(_QWORD *)(v14 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
      v7 = v23;
    }
    else
    {
      v30 = 0;
      v31 = (unint64_t)(63 - v27) >> 6;
      v7 = v23;
      do
      {
        if (++v29 == v31 && (v30 & 1) != 0)
        {
          __break(1u);
          goto LABEL_40;
        }
        v32 = v29 == v31;
        if (v29 == v31)
          v29 = 0;
        v30 |= v32;
        v33 = *(_QWORD *)(v14 + 8 * v29);
      }
      while (v33 == -1);
      v17 = __clz(__rbit64(~v33)) + (v29 << 6);
    }
    *(_QWORD *)(v14 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    result = sub_1000126EC((uint64_t)v6, *(_QWORD *)(v9 + 48) + v17 * v24, type metadata accessor for OwnedBeaconGroup);
    ++*(_QWORD *)(v9 + 16);
  }
  v22 = v20 + 3;
  if (v22 < v36)
  {
    v21 = v37[v22];
    if (!v21)
    {
      while (1)
      {
        v16 = v22 + 1;
        if (__OFADD__(v22, 1))
          goto LABEL_41;
        if (v16 >= v36)
          goto LABEL_35;
        v21 = v37[v16];
        ++v22;
        if (v21)
          goto LABEL_25;
      }
    }
    v16 = v22;
    goto LABEL_25;
  }
LABEL_35:
  swift_release(v7);
  v2 = v35;
  v34 = 1 << *(_BYTE *)(v7 + 32);
  if (v34 > 63)
    bzero(v37, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v37 = -1 << v34;
  *(_QWORD *)(v7 + 16) = 0;
LABEL_39:
  result = swift_release(v7);
  *v2 = v9;
  return result;
}

uint64_t sub_100A18510(uint64_t a1)
{
  return sub_100A1852C(a1, &qword_101110008, (uint64_t *)&unk_1010F77F0, (unint64_t *)&unk_10111C070);
}

uint64_t sub_100A1852C(uint64_t a1, uint64_t *a2, uint64_t *a3, unint64_t *a4)
{
  uint64_t *v4;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t result;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  int64_t v37;
  _QWORD *v38;

  v6 = v4;
  v7 = *v4;
  if (*(_QWORD *)(*v4 + 24) <= a1)
    v8 = a1;
  else
    v8 = *(_QWORD *)(*v4 + 24);
  sub_10001A9A8(a2);
  v9 = static _SetStorage.resize(original:capacity:move:)(v7, v8, 1);
  v10 = v9;
  if (*(_QWORD *)(v7 + 16))
  {
    v11 = 1 << *(_BYTE *)(v7 + 32);
    v38 = (_QWORD *)(v7 + 56);
    if (v11 < 64)
      v12 = ~(-1 << v11);
    else
      v12 = -1;
    v13 = v12 & *(_QWORD *)(v7 + 56);
    v36 = v6;
    v37 = (unint64_t)(v11 + 63) >> 6;
    v14 = v9 + 56;
    result = swift_retain();
    v16 = 0;
    while (1)
    {
      if (v13)
      {
        v18 = __clz(__rbit64(v13));
        v13 &= v13 - 1;
        v19 = v18 | (v16 << 6);
      }
      else
      {
        v20 = v16 + 1;
        if (__OFADD__(v16, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v20 >= v37)
          goto LABEL_36;
        v21 = v38[v20];
        ++v16;
        if (!v21)
        {
          v16 = v20 + 1;
          if (v20 + 1 >= v37)
            goto LABEL_36;
          v21 = v38[v16];
          if (!v21)
          {
            v16 = v20 + 2;
            if (v20 + 2 >= v37)
              goto LABEL_36;
            v21 = v38[v16];
            if (!v21)
            {
              v22 = v20 + 3;
              if (v22 >= v37)
              {
LABEL_36:
                swift_release(v7);
                v6 = v36;
                v35 = 1 << *(_BYTE *)(v7 + 32);
                if (v35 > 63)
                  bzero(v38, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v38 = -1 << v35;
                *(_QWORD *)(v7 + 16) = 0;
                break;
              }
              v21 = v38[v22];
              if (!v21)
              {
                while (1)
                {
                  v16 = v22 + 1;
                  if (__OFADD__(v22, 1))
                    goto LABEL_42;
                  if (v16 >= v37)
                    goto LABEL_36;
                  v21 = v38[v16];
                  ++v22;
                  if (v21)
                    goto LABEL_26;
                }
              }
              v16 = v22;
            }
          }
        }
LABEL_26:
        v13 = (v21 - 1) & v21;
        v19 = __clz(__rbit64(v21)) + (v16 << 6);
      }
      v23 = v7;
      v24 = *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v19);
      v25 = *(_QWORD *)(v10 + 40);
      v26 = sub_10001A9A8(a3);
      v27 = sub_1000193A4(a4, a3, (const char *)&protocol conformance descriptor for XPCSession<A>);
      result = dispatch thunk of Hashable._rawHashValue(seed:)(v25, v26, v27);
      v28 = -1 << *(_BYTE *)(v10 + 32);
      v29 = result & ~v28;
      v30 = v29 >> 6;
      if (((-1 << v29) & ~*(_QWORD *)(v14 + 8 * (v29 >> 6))) != 0)
      {
        v17 = __clz(__rbit64((-1 << v29) & ~*(_QWORD *)(v14 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v31 = 0;
        v32 = (unint64_t)(63 - v28) >> 6;
        do
        {
          if (++v30 == v32 && (v31 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v33 = v30 == v32;
          if (v30 == v32)
            v30 = 0;
          v31 |= v33;
          v34 = *(_QWORD *)(v14 + 8 * v30);
        }
        while (v34 == -1);
        v17 = __clz(__rbit64(~v34)) + (v30 << 6);
      }
      *(_QWORD *)(v14 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      *(_QWORD *)(*(_QWORD *)(v10 + 48) + 8 * v17) = v24;
      ++*(_QWORD *)(v10 + 16);
      v7 = v23;
    }
  }
  result = swift_release(v7);
  *v6 = v10;
  return result;
}

unint64_t sub_100A18840(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  unint64_t result;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  Swift::Int v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t *v23;
  __int128 v24[4];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_10001A9A8(&qword_1011100F0);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  v6 = v5;
  if (*(_QWORD *)(v3 + 16))
  {
    v23 = v2;
    v7 = 1 << *(_BYTE *)(v3 + 32);
    v8 = (_QWORD *)(v3 + 56);
    if (v7 < 64)
      v9 = ~(-1 << v7);
    else
      v9 = -1;
    v10 = v9 & *(_QWORD *)(v3 + 56);
    v11 = (unint64_t)(v7 + 63) >> 6;
    v12 = v5 + 56;
    result = swift_retain();
    v14 = 0;
    while (1)
    {
      if (v10)
      {
        v15 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        v16 = v15 | (v14 << 6);
      }
      else
      {
        v19 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
          __break(1u);
LABEL_32:
          __break(1u);
          return result;
        }
        if (v19 >= v11)
          goto LABEL_26;
        v20 = v8[v19];
        ++v14;
        if (!v20)
        {
          v14 = v19 + 1;
          if (v19 + 1 >= v11)
            goto LABEL_26;
          v20 = v8[v14];
          if (!v20)
          {
            v14 = v19 + 2;
            if (v19 + 2 >= v11)
              goto LABEL_26;
            v20 = v8[v14];
            if (!v20)
            {
              v21 = v19 + 3;
              if (v21 >= v11)
              {
LABEL_26:
                swift_release(v3);
                v22 = 1 << *(_BYTE *)(v3 + 32);
                if (v22 > 63)
                  bzero((void *)(v3 + 56), ((unint64_t)(v22 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v8 = -1 << v22;
                v2 = v23;
                *(_QWORD *)(v3 + 16) = 0;
                break;
              }
              v20 = v8[v21];
              if (!v20)
              {
                while (1)
                {
                  v14 = v21 + 1;
                  if (__OFADD__(v21, 1))
                    goto LABEL_32;
                  if (v14 >= v11)
                    goto LABEL_26;
                  v20 = v8[v14];
                  ++v21;
                  if (v20)
                    goto LABEL_25;
                }
              }
              v14 = v21;
            }
          }
        }
LABEL_25:
        v10 = (v20 - 1) & v20;
        v16 = __clz(__rbit64(v20)) + (v14 << 6);
      }
      v17 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v16);
      Hasher.init(_seed:)(v24);
      sub_100AA422C(v24, v17);
      v18 = Hasher._finalize()();
      result = _HashTable.nextHole(atOrAfter:)(v18 & ~(-1 << *(_BYTE *)(v6 + 32)), v6 + 56, ~(-1 << *(_BYTE *)(v6 + 32)));
      *(_QWORD *)(v12 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
      *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * result) = v17;
      ++*(_QWORD *)(v6 + 16);
    }
  }
  result = swift_release(v3);
  *v2 = v6;
  return result;
}

uint64_t sub_100A18A84(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t result;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  int64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD v42[9];

  v2 = v1;
  v4 = type metadata accessor for BeaconStatus(0);
  v40 = *(_QWORD *)(v4 - 8);
  v41 = v4;
  __chkstk_darwin(v4);
  v6 = (char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  if (*(_QWORD *)(*v1 + 24) > a1)
    a1 = *(_QWORD *)(*v1 + 24);
  sub_10001A9A8(&qword_1011100F8);
  v8 = static _SetStorage.resize(original:capacity:move:)(v7, a1, 1);
  v9 = v8;
  if (!*(_QWORD *)(v7 + 16))
    goto LABEL_39;
  v10 = 1 << *(_BYTE *)(v7 + 32);
  v11 = *(_QWORD *)(v7 + 56);
  v39 = (_QWORD *)(v7 + 56);
  if (v10 < 64)
    v12 = ~(-1 << v10);
  else
    v12 = -1;
  v13 = v12 & v11;
  v37 = v1;
  v38 = (unint64_t)(v10 + 63) >> 6;
  v14 = v8 + 56;
  result = swift_retain();
  v16 = 0;
  while (1)
  {
    if (v13)
    {
      v18 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v19 = v18 | (v16 << 6);
      goto LABEL_26;
    }
    v20 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
LABEL_40:
      __break(1u);
LABEL_41:
      __break(1u);
      return result;
    }
    if (v20 >= v38)
      goto LABEL_35;
    v21 = v39[v20];
    ++v16;
    if (!v21)
    {
      v16 = v20 + 1;
      if (v20 + 1 >= v38)
        goto LABEL_35;
      v21 = v39[v16];
      if (!v21)
      {
        v16 = v20 + 2;
        if (v20 + 2 >= v38)
          goto LABEL_35;
        v21 = v39[v16];
        if (!v21)
          break;
      }
    }
LABEL_25:
    v13 = (v21 - 1) & v21;
    v19 = __clz(__rbit64(v21)) + (v16 << 6);
LABEL_26:
    v23 = v7;
    v24 = *(_QWORD *)(v40 + 72);
    sub_1000126EC(*(_QWORD *)(v7 + 48) + v24 * v19, (uint64_t)v6, type metadata accessor for BeaconStatus);
    Hasher.init(_seed:)(v42);
    v25 = type metadata accessor for UUID(0);
    v26 = sub_100006204(&qword_1010F98B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    dispatch thunk of Hashable.hash(into:)(v42, v25, v26);
    v27 = type metadata accessor for Date(0);
    v28 = sub_100006204((unint64_t *)&unk_1010ED800, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    dispatch thunk of Hashable.hash(into:)(v42, v27, v28);
    result = Hasher._finalize()();
    v29 = -1 << *(_BYTE *)(v9 + 32);
    v30 = result & ~v29;
    v31 = v30 >> 6;
    if (((-1 << v30) & ~*(_QWORD *)(v14 + 8 * (v30 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v30) & ~*(_QWORD *)(v14 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
      v7 = v23;
    }
    else
    {
      v32 = 0;
      v33 = (unint64_t)(63 - v29) >> 6;
      v7 = v23;
      do
      {
        if (++v31 == v33 && (v32 & 1) != 0)
        {
          __break(1u);
          goto LABEL_40;
        }
        v34 = v31 == v33;
        if (v31 == v33)
          v31 = 0;
        v32 |= v34;
        v35 = *(_QWORD *)(v14 + 8 * v31);
      }
      while (v35 == -1);
      v17 = __clz(__rbit64(~v35)) + (v31 << 6);
    }
    *(_QWORD *)(v14 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    result = sub_1000126EC((uint64_t)v6, *(_QWORD *)(v9 + 48) + v17 * v24, type metadata accessor for BeaconStatus);
    ++*(_QWORD *)(v9 + 16);
  }
  v22 = v20 + 3;
  if (v22 < v38)
  {
    v21 = v39[v22];
    if (!v21)
    {
      while (1)
      {
        v16 = v22 + 1;
        if (__OFADD__(v22, 1))
          goto LABEL_41;
        if (v16 >= v38)
          goto LABEL_35;
        v21 = v39[v16];
        ++v22;
        if (v21)
          goto LABEL_25;
      }
    }
    v16 = v22;
    goto LABEL_25;
  }
LABEL_35:
  swift_release(v7);
  v2 = v37;
  v36 = 1 << *(_BYTE *)(v7 + 32);
  if (v36 > 63)
    bzero(v39, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v39 = -1 << v36;
  *(_QWORD *)(v7 + 16) = 0;
LABEL_39:
  result = swift_release(v7);
  *v2 = v9;
  return result;
}

uint64_t sub_100A18E50(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  Swift::Int v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  int64_t v34;
  _QWORD *v35;
  _QWORD v36[9];

  v3 = v2;
  v4 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v5 = a1;
  else
    v5 = *(_QWORD *)(*v2 + 24);
  sub_10001A9A8(a2);
  v6 = static _SetStorage.resize(original:capacity:move:)(v4, v5, 1);
  v7 = v6;
  if (*(_QWORD *)(v4 + 16))
  {
    v33 = v3;
    v8 = 1 << *(_BYTE *)(v4 + 32);
    v35 = (_QWORD *)(v4 + 56);
    if (v8 < 64)
      v9 = ~(-1 << v8);
    else
      v9 = -1;
    v10 = v9 & *(_QWORD *)(v4 + 56);
    v34 = (unint64_t)(v8 + 63) >> 6;
    v11 = v6 + 56;
    result = swift_retain();
    v13 = 0;
    while (1)
    {
      if (v10)
      {
        v15 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        v16 = v15 | (v13 << 6);
      }
      else
      {
        v17 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v17 >= v34)
          goto LABEL_36;
        v18 = v35[v17];
        ++v13;
        if (!v18)
        {
          v13 = v17 + 1;
          if (v17 + 1 >= v34)
            goto LABEL_36;
          v18 = v35[v13];
          if (!v18)
          {
            v13 = v17 + 2;
            if (v17 + 2 >= v34)
              goto LABEL_36;
            v18 = v35[v13];
            if (!v18)
            {
              v19 = v17 + 3;
              if (v19 >= v34)
              {
LABEL_36:
                swift_release(v4);
                v3 = v33;
                v32 = 1 << *(_BYTE *)(v4 + 32);
                if (v32 > 63)
                  bzero(v35, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v35 = -1 << v32;
                *(_QWORD *)(v4 + 16) = 0;
                break;
              }
              v18 = v35[v19];
              if (!v18)
              {
                while (1)
                {
                  v13 = v19 + 1;
                  if (__OFADD__(v19, 1))
                    goto LABEL_42;
                  if (v13 >= v34)
                    goto LABEL_36;
                  v18 = v35[v13];
                  ++v19;
                  if (v18)
                    goto LABEL_26;
                }
              }
              v13 = v19;
            }
          }
        }
LABEL_26:
        v10 = (v18 - 1) & v18;
        v16 = __clz(__rbit64(v18)) + (v13 << 6);
      }
      v20 = *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v16);
      v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
      v23 = v22;
      Hasher.init(_seed:)(v36);
      String.hash(into:)(v36, v21, v23);
      v24 = Hasher._finalize()();
      result = swift_bridgeObjectRelease(v23);
      v25 = -1 << *(_BYTE *)(v7 + 32);
      v26 = v24 & ~v25;
      v27 = v26 >> 6;
      if (((-1 << v26) & ~*(_QWORD *)(v11 + 8 * (v26 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v11 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v28 = 0;
        v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v30 = v27 == v29;
          if (v27 == v29)
            v27 = 0;
          v28 |= v30;
          v31 = *(_QWORD *)(v11 + 8 * v27);
        }
        while (v31 == -1);
        v14 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v14) = v20;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release(v4);
  *v3 = v7;
  return result;
}

uint64_t sub_100A1915C(uint64_t a1)
{
  return sub_100A1B1EC(a1, (uint64_t *)&unk_1011100E0);
}

uint64_t sub_100A19168(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Swift::UInt64 *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t result;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;

  v2 = v1;
  v4 = type metadata accessor for WildModeTrackingLocation(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (Swift::UInt64 *)((char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = *v2;
  if (*(_QWORD *)(*v2 + 24) > a1)
    a1 = *(_QWORD *)(*v2 + 24);
  sub_10001A9A8(&qword_101110098);
  v9 = static _SetStorage.resize(original:capacity:move:)(v8, a1, 1);
  if (!*(_QWORD *)(v8 + 16))
    goto LABEL_28;
  v10 = 1 << *(_BYTE *)(v8 + 32);
  v11 = (_QWORD *)(v8 + 56);
  v12 = -1;
  if (v10 < 64)
    v12 = ~(-1 << v10);
  v13 = v12 & *(_QWORD *)(v8 + 56);
  v14 = (unint64_t)(v10 + 63) >> 6;
  result = swift_retain();
  v16 = 0;
  while (1)
  {
    if (v13)
    {
      v17 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v18 = v17 | (v16 << 6);
      goto LABEL_8;
    }
    v19 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
      __break(1u);
LABEL_30:
      __break(1u);
      return result;
    }
    if (v19 >= v14)
      goto LABEL_24;
    v20 = v11[v19];
    ++v16;
    if (!v20)
    {
      v16 = v19 + 1;
      if (v19 + 1 >= v14)
        goto LABEL_24;
      v20 = v11[v16];
      if (!v20)
      {
        v16 = v19 + 2;
        if (v19 + 2 >= v14)
          goto LABEL_24;
        v20 = v11[v16];
        if (!v20)
          break;
      }
    }
LABEL_23:
    v13 = (v20 - 1) & v20;
    v18 = __clz(__rbit64(v20)) + (v16 << 6);
LABEL_8:
    sub_1000126EC(*(_QWORD *)(v8 + 48) + *(_QWORD *)(v5 + 72) * v18, (uint64_t)v7, type metadata accessor for WildModeTrackingLocation);
    result = sub_100C8088C(v7, v9);
  }
  v21 = v19 + 3;
  if (v21 < v14)
  {
    v20 = v11[v21];
    if (!v20)
    {
      while (1)
      {
        v16 = v21 + 1;
        if (__OFADD__(v21, 1))
          goto LABEL_30;
        if (v16 >= v14)
          goto LABEL_24;
        v20 = v11[v16];
        ++v21;
        if (v20)
          goto LABEL_23;
      }
    }
    v16 = v21;
    goto LABEL_23;
  }
LABEL_24:
  swift_release();
  v22 = 1 << *(_BYTE *)(v8 + 32);
  if (v22 > 63)
    bzero((void *)(v8 + 56), ((unint64_t)(v22 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v11 = -1 << v22;
  *(_QWORD *)(v8 + 16) = 0;
LABEL_28:
  result = swift_release();
  *v2 = v9;
  return result;
}

Swift::Int sub_100A19390(uint64_t a1)
{
  Swift::Int *v1;
  Swift::Int *v2;
  Swift::Int v3;
  uint64_t v4;
  Swift::Int result;
  Swift::Int v6;
  int64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  Swift::Int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  Swift::UInt32 v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  Swift::Int *v29;
  uint64_t v30[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_10001A9A8(&qword_10110FFE0);
  result = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  v6 = result;
  if (*(_QWORD *)(v3 + 16))
  {
    v29 = v2;
    v7 = 0;
    v8 = (_QWORD *)(v3 + 56);
    v9 = 1 << *(_BYTE *)(v3 + 32);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v3 + 56);
    v12 = (unint64_t)(v9 + 63) >> 6;
    v13 = result + 56;
    while (1)
    {
      if (v11)
      {
        v15 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v16 = v15 | (v7 << 6);
      }
      else
      {
        v17 = v7 + 1;
        if (__OFADD__(v7, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v17 >= v12)
          goto LABEL_36;
        v18 = v8[v17];
        ++v7;
        if (!v18)
        {
          v7 = v17 + 1;
          if (v17 + 1 >= v12)
            goto LABEL_36;
          v18 = v8[v7];
          if (!v18)
          {
            v7 = v17 + 2;
            if (v17 + 2 >= v12)
              goto LABEL_36;
            v18 = v8[v7];
            if (!v18)
            {
              v19 = v17 + 3;
              if (v19 >= v12)
              {
LABEL_36:
                v28 = 1 << *(_BYTE *)(v3 + 32);
                if (v28 > 63)
                  bzero((void *)(v3 + 56), ((unint64_t)(v28 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v8 = -1 << v28;
                v2 = v29;
                *(_QWORD *)(v3 + 16) = 0;
                break;
              }
              v18 = v8[v19];
              if (!v18)
              {
                while (1)
                {
                  v7 = v19 + 1;
                  if (__OFADD__(v19, 1))
                    goto LABEL_42;
                  if (v7 >= v12)
                    goto LABEL_36;
                  v18 = v8[v7];
                  ++v19;
                  if (v18)
                    goto LABEL_26;
                }
              }
              v7 = v19;
            }
          }
        }
LABEL_26:
        v11 = (v18 - 1) & v18;
        v16 = __clz(__rbit64(v18)) + (v7 << 6);
      }
      v20 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 48) + v16);
      Hasher.init(_seed:)(v30);
      Hasher._combine(_:)(v20);
      result = Hasher._finalize()();
      v21 = -1 << *(_BYTE *)(v6 + 32);
      v22 = result & ~v21;
      v23 = v22 >> 6;
      if (((-1 << v22) & ~*(_QWORD *)(v13 + 8 * (v22 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v22) & ~*(_QWORD *)(v13 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v24 = 0;
        v25 = (unint64_t)(63 - v21) >> 6;
        do
        {
          if (++v23 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v26 = v23 == v25;
          if (v23 == v25)
            v23 = 0;
          v24 |= v26;
          v27 = *(_QWORD *)(v13 + 8 * v23);
        }
        while (v27 == -1);
        v14 = __clz(__rbit64(~v27)) + (v23 << 6);
      }
      *(_QWORD *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      *(_BYTE *)(*(_QWORD *)(v6 + 48) + v14) = v20;
      ++*(_QWORD *)(v6 + 16);
    }
  }
  result = swift_release();
  *v2 = v6;
  return result;
}

uint64_t sub_100A19638(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  int64_t v31;
  _QWORD *v32;

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_10001A9A8((uint64_t *)&unk_101110210);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  v6 = v5;
  if (*(_QWORD *)(v3 + 16))
  {
    v7 = 1 << *(_BYTE *)(v3 + 32);
    v32 = (_QWORD *)(v3 + 56);
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v9 = v8 & *(_QWORD *)(v3 + 56);
    v31 = (unint64_t)(v7 + 63) >> 6;
    v10 = v5 + 56;
    result = swift_retain();
    v12 = 0;
    while (1)
    {
      if (v9)
      {
        v14 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        v15 = v14 | (v12 << 6);
      }
      else
      {
        v16 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v16 >= v31)
          goto LABEL_36;
        v17 = v32[v16];
        ++v12;
        if (!v17)
        {
          v12 = v16 + 1;
          if (v16 + 1 >= v31)
            goto LABEL_36;
          v17 = v32[v12];
          if (!v17)
          {
            v12 = v16 + 2;
            if (v16 + 2 >= v31)
              goto LABEL_36;
            v17 = v32[v12];
            if (!v17)
            {
              v18 = v16 + 3;
              if (v18 >= v31)
              {
LABEL_36:
                swift_release();
                v30 = 1 << *(_BYTE *)(v3 + 32);
                if (v30 > 63)
                  bzero(v32, ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v32 = -1 << v30;
                *(_QWORD *)(v3 + 16) = 0;
                break;
              }
              v17 = v32[v18];
              if (!v17)
              {
                while (1)
                {
                  v12 = v18 + 1;
                  if (__OFADD__(v18, 1))
                    goto LABEL_42;
                  if (v12 >= v31)
                    goto LABEL_36;
                  v17 = v32[v12];
                  ++v18;
                  if (v17)
                    goto LABEL_26;
                }
              }
              v12 = v18;
            }
          }
        }
LABEL_26:
        v9 = (v17 - 1) & v17;
        v15 = __clz(__rbit64(v17)) + (v12 << 6);
      }
      v19 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v15);
      v20 = *(_QWORD *)(v6 + 40);
      v21 = type metadata accessor for AnyCancellable(0);
      v22 = sub_100006204((unint64_t *)&unk_101110200, (uint64_t (*)(uint64_t))&type metadata accessor for AnyCancellable, (uint64_t)&protocol conformance descriptor for AnyCancellable);
      result = dispatch thunk of Hashable._rawHashValue(seed:)(v20, v21, v22);
      v23 = -1 << *(_BYTE *)(v6 + 32);
      v24 = result & ~v23;
      v25 = v24 >> 6;
      if (((-1 << v24) & ~*(_QWORD *)(v10 + 8 * (v24 >> 6))) != 0)
      {
        v13 = __clz(__rbit64((-1 << v24) & ~*(_QWORD *)(v10 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v26 = 0;
        v27 = (unint64_t)(63 - v23) >> 6;
        do
        {
          if (++v25 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v28 = v25 == v27;
          if (v25 == v27)
            v25 = 0;
          v26 |= v28;
          v29 = *(_QWORD *)(v10 + 8 * v25);
        }
        while (v29 == -1);
        v13 = __clz(__rbit64(~v29)) + (v25 << 6);
      }
      *(_QWORD *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v13) = v19;
      ++*(_QWORD *)(v6 + 16);
    }
  }
  result = swift_release();
  *v2 = v6;
  return result;
}

uint64_t sub_100A19948(uint64_t a1)
{
  return sub_100A1B1EC(a1, (uint64_t *)&unk_1011101E0);
}

uint64_t sub_100A19954(uint64_t a1)
{
  return sub_100A1B1EC(a1, (uint64_t *)&unk_1011101D0);
}

uint64_t sub_100A19960(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;

  v3 = v2;
  v4 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v5 = a1;
  else
    v5 = *(_QWORD *)(*v2 + 24);
  sub_10001A9A8(a2);
  result = static _SetStorage.resize(original:capacity:move:)(v4, v5, 1);
  v7 = result;
  if (*(_QWORD *)(v4 + 16))
  {
    v8 = 0;
    v9 = (uint64_t *)(v4 + 56);
    v10 = 1 << *(_BYTE *)(v4 + 32);
    v29 = -1 << v10;
    v30 = v3;
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v4 + 56);
    v31 = 1 << *(_BYTE *)(v4 + 32);
    v13 = (unint64_t)(v10 + 63) >> 6;
    v14 = result + 56;
    while (1)
    {
      if (v12)
      {
        v16 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v17 = v16 | (v8 << 6);
      }
      else
      {
        v18 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v18 >= v13)
          goto LABEL_36;
        v19 = v9[v18];
        ++v8;
        if (!v19)
        {
          v8 = v18 + 1;
          if (v18 + 1 >= v13)
            goto LABEL_36;
          v19 = v9[v8];
          if (!v19)
          {
            v8 = v18 + 2;
            if (v18 + 2 >= v13)
              goto LABEL_36;
            v19 = v9[v8];
            if (!v19)
            {
              v20 = v18 + 3;
              if (v20 >= v13)
              {
LABEL_36:
                if (v31 >= 64)
                  bzero((void *)(v4 + 56), 8 * v13);
                else
                  *v9 = v29;
                v3 = v30;
                *(_QWORD *)(v4 + 16) = 0;
                break;
              }
              v19 = v9[v20];
              if (!v19)
              {
                while (1)
                {
                  v8 = v20 + 1;
                  if (__OFADD__(v20, 1))
                    goto LABEL_42;
                  if (v8 >= v13)
                    goto LABEL_36;
                  v19 = v9[v8];
                  ++v20;
                  if (v19)
                    goto LABEL_26;
                }
              }
              v8 = v20;
            }
          }
        }
LABEL_26:
        v12 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v8 << 6);
      }
      v21 = *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v17);
      result = static Hasher._hash(seed:_:)(*(_QWORD *)(v7 + 40), v21);
      v22 = -1 << *(_BYTE *)(v7 + 32);
      v23 = result & ~v22;
      v24 = v23 >> 6;
      if (((-1 << v23) & ~*(_QWORD *)(v14 + 8 * (v23 >> 6))) != 0)
      {
        v15 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v14 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v27 = v24 == v26;
          if (v24 == v26)
            v24 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v14 + 8 * v24);
        }
        while (v28 == -1);
        v15 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(_QWORD *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v15) = v21;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release(v4);
  *v3 = v7;
  return result;
}

uint64_t sub_100A19BDC(uint64_t a1)
{
  return sub_100A1B1EC(a1, &qword_1011101F0);
}

uint64_t sub_100A19BE8(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t result;
  int64_t v15;
  uint64_t (*v16)(uint64_t);
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  int64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD v43[9];

  v2 = v1;
  v4 = type metadata accessor for BeaconIdentifier(0);
  v40 = *(_QWORD *)(v4 - 8);
  v41 = v4;
  __chkstk_darwin(v4);
  v42 = (uint64_t)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *v1;
  if (*(_QWORD *)(*v1 + 24) > a1)
    a1 = *(_QWORD *)(*v1 + 24);
  sub_10001A9A8(&qword_10110A900);
  v7 = static _SetStorage.resize(original:capacity:move:)(v6, a1, 1);
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
    goto LABEL_39;
  v37 = v1;
  v9 = 1 << *(_BYTE *)(v6 + 32);
  v10 = *(_QWORD *)(v6 + 56);
  v39 = (_QWORD *)(v6 + 56);
  if (v9 < 64)
    v11 = ~(-1 << v9);
  else
    v11 = -1;
  v12 = v11 & v10;
  v38 = (unint64_t)(v9 + 63) >> 6;
  v13 = v7 + 56;
  result = swift_retain();
  v15 = 0;
  v16 = type metadata accessor for BeaconIdentifier;
  while (1)
  {
    if (v12)
    {
      v18 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v19 = v18 | (v15 << 6);
      goto LABEL_26;
    }
    v20 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
LABEL_40:
      __break(1u);
LABEL_41:
      __break(1u);
      return result;
    }
    if (v20 >= v38)
      goto LABEL_35;
    v21 = v39[v20];
    ++v15;
    if (!v21)
    {
      v15 = v20 + 1;
      if (v20 + 1 >= v38)
        goto LABEL_35;
      v21 = v39[v15];
      if (!v21)
      {
        v15 = v20 + 2;
        if (v20 + 2 >= v38)
          goto LABEL_35;
        v21 = v39[v15];
        if (!v21)
          break;
      }
    }
LABEL_25:
    v12 = (v21 - 1) & v21;
    v19 = __clz(__rbit64(v21)) + (v15 << 6);
LABEL_26:
    v23 = v6;
    v24 = *(_QWORD *)(v40 + 72);
    v25 = v16;
    sub_1000126EC(*(_QWORD *)(v6 + 48) + v24 * v19, v42, v16);
    Hasher.init(_seed:)(v43);
    v26 = type metadata accessor for UUID(0);
    v27 = sub_100006204(&qword_1010F98B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    dispatch thunk of Hashable.hash(into:)(v43, v26, v27);
    dispatch thunk of Hashable.hash(into:)(v43, v26, v27);
    result = Hasher._finalize()();
    v28 = -1 << *(_BYTE *)(v8 + 32);
    v29 = result & ~v28;
    v30 = v29 >> 6;
    if (((-1 << v29) & ~*(_QWORD *)(v13 + 8 * (v29 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v29) & ~*(_QWORD *)(v13 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
      v6 = v23;
      v16 = v25;
    }
    else
    {
      v31 = 0;
      v32 = (unint64_t)(63 - v28) >> 6;
      v6 = v23;
      v16 = v25;
      do
      {
        if (++v30 == v32 && (v31 & 1) != 0)
        {
          __break(1u);
          goto LABEL_40;
        }
        v33 = v30 == v32;
        if (v30 == v32)
          v30 = 0;
        v31 |= v33;
        v34 = *(_QWORD *)(v13 + 8 * v30);
      }
      while (v34 == -1);
      v17 = __clz(__rbit64(~v34)) + (v30 << 6);
    }
    *(_QWORD *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    result = sub_1000126EC(v42, *(_QWORD *)(v8 + 48) + v17 * v24, v16);
    ++*(_QWORD *)(v8 + 16);
  }
  v22 = v20 + 3;
  if (v22 < v38)
  {
    v21 = v39[v22];
    if (!v21)
    {
      while (1)
      {
        v15 = v22 + 1;
        if (__OFADD__(v22, 1))
          goto LABEL_41;
        if (v15 >= v38)
          goto LABEL_35;
        v21 = v39[v15];
        ++v22;
        if (v21)
          goto LABEL_25;
      }
    }
    v15 = v22;
    goto LABEL_25;
  }
LABEL_35:
  swift_release();
  v2 = v37;
  v35 = 1 << *(_BYTE *)(v6 + 32);
  if (v35 > 63)
    bzero(v39, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v39 = -1 << v35;
  *(_QWORD *)(v6 + 16) = 0;
LABEL_39:
  result = swift_release();
  *v2 = v8;
  return result;
}

uint64_t sub_100A19FA4(uint64_t a1)
{
  return sub_100A1852C(a1, (uint64_t *)&unk_101110120, (uint64_t *)&unk_10111C390, &qword_1010F78C0);
}

uint64_t sub_100A19FC0(uint64_t a1)
{
  return sub_100A1B1EC(a1, &qword_101110028);
}

uint64_t sub_100A19FCC(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  unsigned int v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_10001A9A8(&qword_101110030);
  result = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  v6 = result;
  if (*(_QWORD *)(v3 + 16))
  {
    v7 = 0;
    v8 = (uint64_t *)(v3 + 56);
    v9 = 1 << *(_BYTE *)(v3 + 32);
    v28 = -1 << v9;
    v29 = v2;
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v3 + 56);
    v30 = 1 << *(_BYTE *)(v3 + 32);
    v12 = (unint64_t)(v9 + 63) >> 6;
    v13 = result + 56;
    while (1)
    {
      if (v11)
      {
        v15 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v16 = v15 | (v7 << 6);
      }
      else
      {
        v17 = v7 + 1;
        if (__OFADD__(v7, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v17 >= v12)
          goto LABEL_36;
        v18 = v8[v17];
        ++v7;
        if (!v18)
        {
          v7 = v17 + 1;
          if (v17 + 1 >= v12)
            goto LABEL_36;
          v18 = v8[v7];
          if (!v18)
          {
            v7 = v17 + 2;
            if (v17 + 2 >= v12)
              goto LABEL_36;
            v18 = v8[v7];
            if (!v18)
            {
              v19 = v17 + 3;
              if (v19 >= v12)
              {
LABEL_36:
                if (v30 >= 64)
                  bzero((void *)(v3 + 56), 8 * v12);
                else
                  *v8 = v28;
                v2 = v29;
                *(_QWORD *)(v3 + 16) = 0;
                break;
              }
              v18 = v8[v19];
              if (!v18)
              {
                while (1)
                {
                  v7 = v19 + 1;
                  if (__OFADD__(v19, 1))
                    goto LABEL_42;
                  if (v7 >= v12)
                    goto LABEL_36;
                  v18 = v8[v7];
                  ++v19;
                  if (v18)
                    goto LABEL_26;
                }
              }
              v7 = v19;
            }
          }
        }
LABEL_26:
        v11 = (v18 - 1) & v18;
        v16 = __clz(__rbit64(v18)) + (v7 << 6);
      }
      v20 = *(_DWORD *)(*(_QWORD *)(v3 + 48) + 4 * v16);
      result = static Hasher._hash(seed:bytes:count:)(*(_QWORD *)(v6 + 40), v20, 4);
      v21 = -1 << *(_BYTE *)(v6 + 32);
      v22 = result & ~v21;
      v23 = v22 >> 6;
      if (((-1 << v22) & ~*(_QWORD *)(v13 + 8 * (v22 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v22) & ~*(_QWORD *)(v13 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v24 = 0;
        v25 = (unint64_t)(63 - v21) >> 6;
        do
        {
          if (++v23 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v26 = v23 == v25;
          if (v23 == v25)
            v23 = 0;
          v24 |= v26;
          v27 = *(_QWORD *)(v13 + 8 * v23);
        }
        while (v27 == -1);
        v14 = __clz(__rbit64(~v27)) + (v23 << 6);
      }
      *(_QWORD *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      *(_DWORD *)(*(_QWORD *)(v6 + 48) + 4 * v14) = v20;
      ++*(_QWORD *)(v6 + 16);
    }
  }
  result = swift_release();
  *v2 = v6;
  return result;
}

uint64_t sub_100A1A250(uint64_t a1)
{
  return sub_100A1852C(a1, &qword_1011101A8, &qword_1010F1580, &qword_1010F1588);
}

uint64_t sub_100A1A26C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  _QWORD v32[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_10001A9A8(&qword_1011101A0);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  v6 = v5;
  if (*(_QWORD *)(v3 + 16))
  {
    v31 = v2;
    v7 = 1 << *(_BYTE *)(v3 + 32);
    v8 = (_QWORD *)(v3 + 56);
    if (v7 < 64)
      v9 = ~(-1 << v7);
    else
      v9 = -1;
    v10 = v9 & *(_QWORD *)(v3 + 56);
    v11 = (unint64_t)(v7 + 63) >> 6;
    v12 = v5 + 56;
    result = swift_retain();
    v14 = 0;
    while (1)
    {
      if (v10)
      {
        v16 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        v17 = v16 | (v14 << 6);
      }
      else
      {
        v18 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v18 >= v11)
          goto LABEL_36;
        v19 = v8[v18];
        ++v14;
        if (!v19)
        {
          v14 = v18 + 1;
          if (v18 + 1 >= v11)
            goto LABEL_36;
          v19 = v8[v14];
          if (!v19)
          {
            v14 = v18 + 2;
            if (v18 + 2 >= v11)
              goto LABEL_36;
            v19 = v8[v14];
            if (!v19)
            {
              v20 = v18 + 3;
              if (v20 >= v11)
              {
LABEL_36:
                swift_release();
                v2 = v31;
                v30 = 1 << *(_BYTE *)(v3 + 32);
                if (v30 > 63)
                  bzero((void *)(v3 + 56), ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v8 = -1 << v30;
                *(_QWORD *)(v3 + 16) = 0;
                break;
              }
              v19 = v8[v20];
              if (!v19)
              {
                while (1)
                {
                  v14 = v20 + 1;
                  if (__OFADD__(v20, 1))
                    goto LABEL_42;
                  if (v14 >= v11)
                    goto LABEL_36;
                  v19 = v8[v14];
                  ++v20;
                  if (v19)
                    goto LABEL_26;
                }
              }
              v14 = v20;
            }
          }
        }
LABEL_26:
        v10 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v14 << 6);
      }
      v21 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v17);
      Hasher.init(_seed:)(v32);
      v22 = *(id *)(v21 + 32);
      NSObject.hash(into:)(v32);

      result = Hasher._finalize()();
      v23 = -1 << *(_BYTE *)(v6 + 32);
      v24 = result & ~v23;
      v25 = v24 >> 6;
      if (((-1 << v24) & ~*(_QWORD *)(v12 + 8 * (v24 >> 6))) != 0)
      {
        v15 = __clz(__rbit64((-1 << v24) & ~*(_QWORD *)(v12 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v26 = 0;
        v27 = (unint64_t)(63 - v23) >> 6;
        do
        {
          if (++v25 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v28 = v25 == v27;
          if (v25 == v27)
            v25 = 0;
          v26 |= v28;
          v29 = *(_QWORD *)(v12 + 8 * v25);
        }
        while (v29 == -1);
        v15 = __clz(__rbit64(~v29)) + (v25 << 6);
      }
      *(_QWORD *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v15) = v21;
      ++*(_QWORD *)(v6 + 16);
    }
  }
  result = swift_release();
  *v2 = v6;
  return result;
}

uint64_t sub_100A1A530(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  _QWORD v32[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_10001A9A8(&qword_101110198);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  v6 = v5;
  if (*(_QWORD *)(v3 + 16))
  {
    v31 = v2;
    v7 = 1 << *(_BYTE *)(v3 + 32);
    v8 = (_QWORD *)(v3 + 56);
    if (v7 < 64)
      v9 = ~(-1 << v7);
    else
      v9 = -1;
    v10 = v9 & *(_QWORD *)(v3 + 56);
    v11 = (unint64_t)(v7 + 63) >> 6;
    v12 = v5 + 56;
    result = swift_retain();
    v14 = 0;
    while (1)
    {
      if (v10)
      {
        v16 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        v17 = v16 | (v14 << 6);
      }
      else
      {
        v18 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v18 >= v11)
          goto LABEL_36;
        v19 = v8[v18];
        ++v14;
        if (!v19)
        {
          v14 = v18 + 1;
          if (v18 + 1 >= v11)
            goto LABEL_36;
          v19 = v8[v14];
          if (!v19)
          {
            v14 = v18 + 2;
            if (v18 + 2 >= v11)
              goto LABEL_36;
            v19 = v8[v14];
            if (!v19)
            {
              v20 = v18 + 3;
              if (v20 >= v11)
              {
LABEL_36:
                swift_release();
                v2 = v31;
                v30 = 1 << *(_BYTE *)(v3 + 32);
                if (v30 > 63)
                  bzero((void *)(v3 + 56), ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v8 = -1 << v30;
                *(_QWORD *)(v3 + 16) = 0;
                break;
              }
              v19 = v8[v20];
              if (!v19)
              {
                while (1)
                {
                  v14 = v20 + 1;
                  if (__OFADD__(v20, 1))
                    goto LABEL_42;
                  if (v14 >= v11)
                    goto LABEL_36;
                  v19 = v8[v14];
                  ++v20;
                  if (v19)
                    goto LABEL_26;
                }
              }
              v14 = v20;
            }
          }
        }
LABEL_26:
        v10 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v14 << 6);
      }
      v21 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v17);
      Hasher.init(_seed:)(v32);
      v22 = *(id *)(v21 + 40);
      NSObject.hash(into:)(v32);

      result = Hasher._finalize()();
      v23 = -1 << *(_BYTE *)(v6 + 32);
      v24 = result & ~v23;
      v25 = v24 >> 6;
      if (((-1 << v24) & ~*(_QWORD *)(v12 + 8 * (v24 >> 6))) != 0)
      {
        v15 = __clz(__rbit64((-1 << v24) & ~*(_QWORD *)(v12 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v26 = 0;
        v27 = (unint64_t)(63 - v23) >> 6;
        do
        {
          if (++v25 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v28 = v25 == v27;
          if (v25 == v27)
            v25 = 0;
          v26 |= v28;
          v29 = *(_QWORD *)(v12 + 8 * v25);
        }
        while (v29 == -1);
        v15 = __clz(__rbit64(~v29)) + (v25 << 6);
      }
      *(_QWORD *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v15) = v21;
      ++*(_QWORD *)(v6 + 16);
    }
  }
  result = swift_release();
  *v2 = v6;
  return result;
}

Swift::Int sub_100A1A7F4(uint64_t a1, uint64_t *a2)
{
  Swift::Int *v2;
  Swift::Int *v3;
  Swift::Int v4;
  uint64_t v5;
  Swift::Int result;
  Swift::Int v7;
  int64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  Swift::Int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  Swift::UInt v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  Swift::Int *v30;
  uint64_t v31[9];

  v3 = v2;
  v4 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v5 = a1;
  else
    v5 = *(_QWORD *)(*v2 + 24);
  sub_10001A9A8(a2);
  result = static _SetStorage.resize(original:capacity:move:)(v4, v5, 1);
  v7 = result;
  if (*(_QWORD *)(v4 + 16))
  {
    v30 = v3;
    v8 = 0;
    v9 = (_QWORD *)(v4 + 56);
    v10 = 1 << *(_BYTE *)(v4 + 32);
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v4 + 56);
    v13 = (unint64_t)(v10 + 63) >> 6;
    v14 = result + 56;
    while (1)
    {
      if (v12)
      {
        v16 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v17 = v16 | (v8 << 6);
      }
      else
      {
        v18 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v18 >= v13)
          goto LABEL_36;
        v19 = v9[v18];
        ++v8;
        if (!v19)
        {
          v8 = v18 + 1;
          if (v18 + 1 >= v13)
            goto LABEL_36;
          v19 = v9[v8];
          if (!v19)
          {
            v8 = v18 + 2;
            if (v18 + 2 >= v13)
              goto LABEL_36;
            v19 = v9[v8];
            if (!v19)
            {
              v20 = v18 + 3;
              if (v20 >= v13)
              {
LABEL_36:
                v29 = 1 << *(_BYTE *)(v4 + 32);
                if (v29 > 63)
                  bzero((void *)(v4 + 56), ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v9 = -1 << v29;
                v3 = v30;
                *(_QWORD *)(v4 + 16) = 0;
                break;
              }
              v19 = v9[v20];
              if (!v19)
              {
                while (1)
                {
                  v8 = v20 + 1;
                  if (__OFADD__(v20, 1))
                    goto LABEL_42;
                  if (v8 >= v13)
                    goto LABEL_36;
                  v19 = v9[v8];
                  ++v20;
                  if (v19)
                    goto LABEL_26;
                }
              }
              v8 = v20;
            }
          }
        }
LABEL_26:
        v12 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v8 << 6);
      }
      v21 = *(unsigned __int8 *)(*(_QWORD *)(v4 + 48) + v17);
      Hasher.init(_seed:)(v31);
      Hasher._combine(_:)(v21);
      result = Hasher._finalize()();
      v22 = -1 << *(_BYTE *)(v7 + 32);
      v23 = result & ~v22;
      v24 = v23 >> 6;
      if (((-1 << v23) & ~*(_QWORD *)(v14 + 8 * (v23 >> 6))) != 0)
      {
        v15 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v14 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v25 = 0;
        v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v27 = v24 == v26;
          if (v24 == v26)
            v24 = 0;
          v25 |= v27;
          v28 = *(_QWORD *)(v14 + 8 * v24);
        }
        while (v28 == -1);
        v15 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(_QWORD *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      *(_BYTE *)(*(_QWORD *)(v7 + 48) + v15) = v21;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release(v4);
  *v3 = v7;
  return result;
}

uint64_t sub_100A1AA98(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  int64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int64_t v45;
  _QWORD v46[10];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_10001A9A8(&qword_101110178);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  v6 = v5;
  if (*(_QWORD *)(v3 + 16))
  {
    v7 = 1 << *(_BYTE *)(v3 + 32);
    v38 = (_QWORD *)(v3 + 56);
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v9 = v8 & *(_QWORD *)(v3 + 56);
    v36 = v2;
    v37 = (unint64_t)(v7 + 63) >> 6;
    v10 = v5 + 56;
    result = swift_retain();
    v12 = 0;
    v39 = v3;
    while (1)
    {
      if (v9)
      {
        v15 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        v45 = v12;
        v16 = v15 | (v12 << 6);
      }
      else
      {
        v17 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v17 >= v37)
          goto LABEL_36;
        v18 = v38[v17];
        v19 = v12 + 1;
        if (!v18)
        {
          v19 = v12 + 2;
          if (v12 + 2 >= v37)
            goto LABEL_36;
          v18 = v38[v19];
          if (!v18)
          {
            v19 = v12 + 3;
            if (v12 + 3 >= v37)
              goto LABEL_36;
            v18 = v38[v19];
            if (!v18)
            {
              v20 = v12 + 4;
              if (v12 + 4 >= v37)
              {
LABEL_36:
                swift_release();
                v2 = v36;
                v35 = 1 << *(_BYTE *)(v3 + 32);
                if (v35 > 63)
                  bzero(v38, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v38 = -1 << v35;
                *(_QWORD *)(v3 + 16) = 0;
                break;
              }
              v18 = v38[v20];
              if (!v18)
              {
                while (1)
                {
                  v19 = v20 + 1;
                  if (__OFADD__(v20, 1))
                    goto LABEL_42;
                  if (v19 >= v37)
                    goto LABEL_36;
                  v18 = v38[v19];
                  ++v20;
                  if (v18)
                    goto LABEL_26;
                }
              }
              v19 = v12 + 4;
            }
          }
        }
LABEL_26:
        v9 = (v18 - 1) & v18;
        v45 = v19;
        v16 = __clz(__rbit64(v18)) + (v19 << 6);
      }
      v21 = *(_QWORD *)(v3 + 48) + 88 * v16;
      v22 = *(_QWORD *)v21;
      v23 = *(_QWORD *)(v21 + 8);
      v24 = *(_QWORD *)(v21 + 24);
      v25 = *(_BYTE *)(v21 + 32);
      v27 = *(_QWORD *)(v21 + 40);
      v26 = *(_QWORD *)(v21 + 48);
      v43 = *(_QWORD *)(v21 + 56);
      v44 = *(_QWORD *)(v21 + 16);
      v41 = *(_QWORD *)(v21 + 72);
      v42 = *(_QWORD *)(v21 + 64);
      v40 = *(_QWORD *)(v21 + 80);
      Hasher.init(_seed:)(v46);
      String.hash(into:)(v46, v22, v23);
      result = Hasher._finalize()();
      v28 = -1 << *(_BYTE *)(v6 + 32);
      v29 = result & ~v28;
      v30 = v29 >> 6;
      if (((-1 << v29) & ~*(_QWORD *)(v10 + 8 * (v29 >> 6))) != 0)
      {
        v13 = __clz(__rbit64((-1 << v29) & ~*(_QWORD *)(v10 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v31 = 0;
        v32 = (unint64_t)(63 - v28) >> 6;
        do
        {
          if (++v30 == v32 && (v31 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v33 = v30 == v32;
          if (v30 == v32)
            v30 = 0;
          v31 |= v33;
          v34 = *(_QWORD *)(v10 + 8 * v30);
        }
        while (v34 == -1);
        v13 = __clz(__rbit64(~v34)) + (v30 << 6);
      }
      *(_QWORD *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      v14 = *(_QWORD *)(v6 + 48) + 88 * v13;
      *(_QWORD *)v14 = v22;
      *(_QWORD *)(v14 + 8) = v23;
      v12 = v45;
      *(_QWORD *)(v14 + 16) = v44;
      *(_QWORD *)(v14 + 24) = v24;
      *(_BYTE *)(v14 + 32) = v25;
      *(_QWORD *)(v14 + 40) = v27;
      *(_QWORD *)(v14 + 48) = v26;
      *(_QWORD *)(v14 + 56) = v43;
      *(_QWORD *)(v14 + 64) = v42;
      *(_QWORD *)(v14 + 72) = v41;
      v3 = v39;
      *(_QWORD *)(v14 + 80) = v40;
      ++*(_QWORD *)(v6 + 16);
    }
  }
  result = swift_release();
  *v2 = v6;
  return result;
}

uint64_t sub_100A1AE00(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  int64_t v38;
  _QWORD *v39;
  uint64_t v40;
  int64_t v41;
  __int128 v42;
  _QWORD v43[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_10001A9A8((uint64_t *)&unk_101110070);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  v6 = v5;
  if (*(_QWORD *)(v3 + 16))
  {
    v7 = 1 << *(_BYTE *)(v3 + 32);
    v39 = (_QWORD *)(v3 + 56);
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v9 = v8 & *(_QWORD *)(v3 + 56);
    v37 = v2;
    v38 = (unint64_t)(v7 + 63) >> 6;
    v10 = v5 + 56;
    result = swift_retain();
    v12 = 0;
    v40 = v3;
    while (1)
    {
      if (v9)
      {
        v15 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        v41 = v12;
        v16 = v15 | (v12 << 6);
      }
      else
      {
        v17 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
          return result;
        }
        if (v17 >= v38)
          goto LABEL_39;
        v18 = v39[v17];
        v19 = v12 + 1;
        if (!v18)
        {
          v19 = v12 + 2;
          if (v12 + 2 >= v38)
            goto LABEL_39;
          v18 = v39[v19];
          if (!v18)
          {
            v19 = v12 + 3;
            if (v12 + 3 >= v38)
              goto LABEL_39;
            v18 = v39[v19];
            if (!v18)
            {
              v20 = v12 + 4;
              if (v12 + 4 >= v38)
              {
LABEL_39:
                swift_release();
                v2 = v37;
                v36 = 1 << *(_BYTE *)(v3 + 32);
                if (v36 > 63)
                  bzero(v39, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v39 = -1 << v36;
                *(_QWORD *)(v3 + 16) = 0;
                break;
              }
              v18 = v39[v20];
              if (!v18)
              {
                while (1)
                {
                  v19 = v20 + 1;
                  if (__OFADD__(v20, 1))
                    goto LABEL_45;
                  if (v19 >= v38)
                    goto LABEL_39;
                  v18 = v39[v19];
                  ++v20;
                  if (v18)
                    goto LABEL_26;
                }
              }
              v19 = v12 + 4;
            }
          }
        }
LABEL_26:
        v9 = (v18 - 1) & v18;
        v41 = v19;
        v16 = __clz(__rbit64(v18)) + (v19 << 6);
      }
      v21 = *(_QWORD *)(v3 + 48) + 40 * v16;
      v22 = *(_QWORD *)v21;
      v42 = *(_OWORD *)(v21 + 8);
      v23 = *(_QWORD *)(v21 + 24);
      v24 = *(_QWORD *)(v21 + 32);
      Hasher.init(_seed:)(v43);
      String.hash(into:)(v43, v22, v42);
      Hasher._combine(_:)(*(_QWORD *)(*((_QWORD *)&v42 + 1) + 16));
      v25 = *(_QWORD *)(*((_QWORD *)&v42 + 1) + 16);
      if (v25)
      {
        v26 = (_QWORD *)(*((_QWORD *)&v42 + 1) + 40);
        do
        {
          v27 = *(v26 - 1);
          v28 = *v26;
          swift_bridgeObjectRetain(*v26);
          String.hash(into:)(v43, v27, v28);
          swift_bridgeObjectRelease();
          v26 += 2;
          --v25;
        }
        while (v25);
      }
      String.hash(into:)(v43, v23, v24);
      result = Hasher._finalize()();
      v29 = -1 << *(_BYTE *)(v6 + 32);
      v30 = result & ~v29;
      v31 = v30 >> 6;
      if (((-1 << v30) & ~*(_QWORD *)(v10 + 8 * (v30 >> 6))) != 0)
      {
        v13 = __clz(__rbit64((-1 << v30) & ~*(_QWORD *)(v10 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v32 = 0;
        v33 = (unint64_t)(63 - v29) >> 6;
        do
        {
          if (++v31 == v33 && (v32 & 1) != 0)
          {
            __break(1u);
            goto LABEL_44;
          }
          v34 = v31 == v33;
          if (v31 == v33)
            v31 = 0;
          v32 |= v34;
          v35 = *(_QWORD *)(v10 + 8 * v31);
        }
        while (v35 == -1);
        v13 = __clz(__rbit64(~v35)) + (v31 << 6);
      }
      *(_QWORD *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      v14 = *(_QWORD *)(v6 + 48) + 40 * v13;
      *(_QWORD *)v14 = v22;
      *(_OWORD *)(v14 + 8) = v42;
      *(_QWORD *)(v14 + 24) = v23;
      *(_QWORD *)(v14 + 32) = v24;
      ++*(_QWORD *)(v6 + 16);
      v3 = v40;
      v12 = v41;
    }
  }
  result = swift_release();
  *v2 = v6;
  return result;
}

uint64_t sub_100A1B18C(uint64_t a1)
{
  return sub_100A1852C(a1, (uint64_t *)&unk_10111C080, &qword_1010EF800, (unint64_t *)&qword_1010FB780);
}

uint64_t sub_100A1B1A8(uint64_t a1)
{
  return sub_100A1852C(a1, &qword_101110140, (uint64_t *)&unk_1010F78E0, (unint64_t *)&qword_101110130);
}

uint64_t sub_100A1B1C4(uint64_t a1)
{
  return sub_100A1852C(a1, (uint64_t *)&unk_10111C350, (uint64_t *)&unk_1010F49A0, &qword_101117070);
}

uint64_t sub_100A1B1E0(uint64_t a1)
{
  return sub_100A1B1EC(a1, (uint64_t *)&unk_10110FFB0);
}

uint64_t sub_100A1B1EC(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t result;
  int64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;

  v3 = v2;
  v4 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v5 = a1;
  else
    v5 = *(_QWORD *)(*v2 + 24);
  sub_10001A9A8(a2);
  v6 = static _SetStorage.resize(original:capacity:move:)(v4, v5, 1);
  v7 = v6;
  if (*(_QWORD *)(v4 + 16))
  {
    v31 = v3;
    v8 = 1 << *(_BYTE *)(v4 + 32);
    v9 = (_QWORD *)(v4 + 56);
    if (v8 < 64)
      v10 = ~(-1 << v8);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v4 + 56);
    v12 = (unint64_t)(v8 + 63) >> 6;
    v13 = v6 + 56;
    result = swift_retain();
    v15 = 0;
    while (1)
    {
      if (v11)
      {
        v17 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v18 = v17 | (v15 << 6);
      }
      else
      {
        v19 = v15 + 1;
        if (__OFADD__(v15, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v19 >= v12)
          goto LABEL_36;
        v20 = v9[v19];
        ++v15;
        if (!v20)
        {
          v15 = v19 + 1;
          if (v19 + 1 >= v12)
            goto LABEL_36;
          v20 = v9[v15];
          if (!v20)
          {
            v15 = v19 + 2;
            if (v19 + 2 >= v12)
              goto LABEL_36;
            v20 = v9[v15];
            if (!v20)
            {
              v21 = v19 + 3;
              if (v21 >= v12)
              {
LABEL_36:
                swift_release(v4);
                v3 = v31;
                v30 = 1 << *(_BYTE *)(v4 + 32);
                if (v30 > 63)
                  bzero((void *)(v4 + 56), ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v9 = -1 << v30;
                *(_QWORD *)(v4 + 16) = 0;
                break;
              }
              v20 = v9[v21];
              if (!v20)
              {
                while (1)
                {
                  v15 = v21 + 1;
                  if (__OFADD__(v21, 1))
                    goto LABEL_42;
                  if (v15 >= v12)
                    goto LABEL_36;
                  v20 = v9[v15];
                  ++v21;
                  if (v20)
                    goto LABEL_26;
                }
              }
              v15 = v21;
            }
          }
        }
LABEL_26:
        v11 = (v20 - 1) & v20;
        v18 = __clz(__rbit64(v20)) + (v15 << 6);
      }
      v22 = *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v18);
      result = NSObject._rawHashValue(seed:)(*(_QWORD *)(v7 + 40));
      v23 = -1 << *(_BYTE *)(v7 + 32);
      v24 = result & ~v23;
      v25 = v24 >> 6;
      if (((-1 << v24) & ~*(_QWORD *)(v13 + 8 * (v24 >> 6))) != 0)
      {
        v16 = __clz(__rbit64((-1 << v24) & ~*(_QWORD *)(v13 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v26 = 0;
        v27 = (unint64_t)(63 - v23) >> 6;
        do
        {
          if (++v25 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v28 = v25 == v27;
          if (v25 == v27)
            v25 = 0;
          v26 |= v28;
          v29 = *(_QWORD *)(v13 + 8 * v25);
        }
        while (v29 == -1);
        v16 = __clz(__rbit64(~v29)) + (v25 << 6);
      }
      *(_QWORD *)(v13 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v16) = v22;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release(v4);
  *v3 = v7;
  return result;
}

uint64_t sub_100A1B484(uint64_t a1)
{
  return sub_100A1852C(a1, (uint64_t *)&unk_10110FF50, (uint64_t *)&unk_10111C050, (unint64_t *)&unk_10110FF60);
}

Swift::Int sub_100A1B4A0(uint64_t a1)
{
  Swift::Int *v1;
  Swift::Int *v2;
  Swift::Int v3;
  uint64_t v4;
  Swift::Int result;
  __int128 v6;
  Swift::Int v7;
  int64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  Swift::Int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  Swift::Int *v29;
  __int128 v30;
  uint64_t v31[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_10001A9A8(&qword_10110AAB8);
  result = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1);
  v7 = result;
  if (*(_QWORD *)(v3 + 16))
  {
    v29 = v2;
    v8 = 0;
    v9 = (_QWORD *)(v3 + 56);
    v10 = 1 << *(_BYTE *)(v3 + 32);
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v3 + 56);
    v13 = (unint64_t)(v10 + 63) >> 6;
    v14 = result + 56;
    while (1)
    {
      if (v12)
      {
        v16 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v17 = v16 | (v8 << 6);
      }
      else
      {
        v18 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v18 >= v13)
          goto LABEL_36;
        v19 = v9[v18];
        ++v8;
        if (!v19)
        {
          v8 = v18 + 1;
          if (v18 + 1 >= v13)
            goto LABEL_36;
          v19 = v9[v8];
          if (!v19)
          {
            v8 = v18 + 2;
            if (v18 + 2 >= v13)
              goto LABEL_36;
            v19 = v9[v8];
            if (!v19)
            {
              v20 = v18 + 3;
              if (v20 >= v13)
              {
LABEL_36:
                v28 = 1 << *(_BYTE *)(v3 + 32);
                if (v28 > 63)
                  bzero((void *)(v3 + 56), ((unint64_t)(v28 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v9 = -1 << v28;
                v2 = v29;
                *(_QWORD *)(v3 + 16) = 0;
                break;
              }
              v19 = v9[v20];
              if (!v19)
              {
                while (1)
                {
                  v8 = v20 + 1;
                  if (__OFADD__(v20, 1))
                    goto LABEL_42;
                  if (v8 >= v13)
                    goto LABEL_36;
                  v19 = v9[v8];
                  ++v20;
                  if (v19)
                    goto LABEL_26;
                }
              }
              v8 = v20;
            }
          }
        }
LABEL_26:
        v12 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v8 << 6);
      }
      *(_QWORD *)&v6 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v17);
      v30 = v6;
      Hasher.init(_seed:)(v31);
      Hasher._combine(_:)(v30);
      Hasher._combine(_:)(DWORD1(v30));
      result = Hasher._finalize()();
      v21 = -1 << *(_BYTE *)(v7 + 32);
      v22 = result & ~v21;
      v23 = v22 >> 6;
      if (((-1 << v22) & ~*(_QWORD *)(v14 + 8 * (v22 >> 6))) != 0)
      {
        v15 = __clz(__rbit64((-1 << v22) & ~*(_QWORD *)(v14 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v24 = 0;
        v25 = (unint64_t)(63 - v21) >> 6;
        do
        {
          if (++v23 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v26 = v23 == v25;
          if (v23 == v25)
            v23 = 0;
          v24 |= v26;
          v27 = *(_QWORD *)(v14 + 8 * v23);
        }
        while (v27 == -1);
        v15 = __clz(__rbit64(~v27)) + (v23 << 6);
      }
      *(_QWORD *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      *((_QWORD *)&v6 + 1) = *((_QWORD *)&v30 + 1);
      *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v15) = v30;
      ++*(_QWORD *)(v7 + 16);
    }
  }
  result = swift_release(v3);
  *v2 = v7;
  return result;
}

uint64_t sub_100A1B760(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  Swift::UInt32 v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  int64_t v35;
  _QWORD *v36;
  _QWORD v37[9];

  v3 = v2;
  v4 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v5 = a1;
  else
    v5 = *(_QWORD *)(*v2 + 24);
  sub_10001A9A8(a2);
  v6 = static _SetStorage.resize(original:capacity:move:)(v4, v5, 1);
  v7 = v6;
  if (*(_QWORD *)(v4 + 16))
  {
    v8 = 1 << *(_BYTE *)(v4 + 32);
    v36 = (_QWORD *)(v4 + 56);
    if (v8 < 64)
      v9 = ~(-1 << v8);
    else
      v9 = -1;
    v10 = v9 & *(_QWORD *)(v4 + 56);
    v34 = v3;
    v35 = (unint64_t)(v8 + 63) >> 6;
    v11 = v6 + 56;
    result = swift_retain();
    v13 = 0;
    while (1)
    {
      if (v10)
      {
        v16 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        v17 = v16 | (v13 << 6);
      }
      else
      {
        v18 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v18 >= v35)
          goto LABEL_36;
        v19 = v36[v18];
        ++v13;
        if (!v19)
        {
          v13 = v18 + 1;
          if (v18 + 1 >= v35)
            goto LABEL_36;
          v19 = v36[v13];
          if (!v19)
          {
            v13 = v18 + 2;
            if (v18 + 2 >= v35)
              goto LABEL_36;
            v19 = v36[v13];
            if (!v19)
            {
              v20 = v18 + 3;
              if (v20 >= v35)
              {
LABEL_36:
                swift_release(v4);
                v3 = v34;
                v33 = 1 << *(_BYTE *)(v4 + 32);
                if (v33 > 63)
                  bzero(v36, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v36 = -1 << v33;
                *(_QWORD *)(v4 + 16) = 0;
                break;
              }
              v19 = v36[v20];
              if (!v19)
              {
                while (1)
                {
                  v13 = v20 + 1;
                  if (__OFADD__(v20, 1))
                    goto LABEL_42;
                  if (v13 >= v35)
                    goto LABEL_36;
                  v19 = v36[v13];
                  ++v20;
                  if (v19)
                    goto LABEL_26;
                }
              }
              v13 = v20;
            }
          }
        }
LABEL_26:
        v10 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v13 << 6);
      }
      v21 = v4;
      v22 = *(_QWORD *)(v4 + 48) + 24 * v17;
      v23 = *(_QWORD *)v22;
      v24 = *(_QWORD *)(v22 + 8);
      v25 = *(_DWORD *)(v22 + 16);
      Hasher.init(_seed:)(v37);
      sub_10001BBBC(v23, v24);
      Data.hash(into:)(v37, v23, v24);
      sub_10001BC14(v23, v24);
      Hasher._combine(_:)(v25);
      result = Hasher._finalize()();
      v26 = -1 << *(_BYTE *)(v7 + 32);
      v27 = result & ~v26;
      v28 = v27 >> 6;
      if (((-1 << v27) & ~*(_QWORD *)(v11 + 8 * (v27 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v27) & ~*(_QWORD *)(v11 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v29 = 0;
        v30 = (unint64_t)(63 - v26) >> 6;
        do
        {
          if (++v28 == v30 && (v29 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          v31 = v28 == v30;
          if (v28 == v30)
            v28 = 0;
          v29 |= v31;
          v32 = *(_QWORD *)(v11 + 8 * v28);
        }
        while (v32 == -1);
        v14 = __clz(__rbit64(~v32)) + (v28 << 6);
      }
      *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      v15 = *(_QWORD *)(v7 + 48) + 24 * v14;
      *(_QWORD *)v15 = v23;
      *(_QWORD *)(v15 + 8) = v24;
      *(_DWORD *)(v15 + 16) = v25;
      ++*(_QWORD *)(v7 + 16);
      v4 = v21;
    }
  }
  result = swift_release(v4);
  *v3 = v7;
  return result;
}

Swift::Int sub_100A1BA8C(Swift::Int result, unint64_t a2, char a3)
{
  uint64_t *v3;
  char v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t *v14;
  char v15;
  _QWORD v16[9];

  v5 = result;
  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 <= v6 || (a3 & 1) == 0)
  {
    v8 = v6 + 1;
    if ((a3 & 1) != 0)
    {
      sub_100A14808(v8);
    }
    else
    {
      if (v7 > v6)
      {
        result = (Swift::Int)sub_100A2649C(&qword_101110238);
        goto LABEL_10;
      }
      sub_100A2696C(v8);
    }
    v9 = *v3;
    Hasher.init(_seed:)(v16);
    sub_100515B58((uint64_t)v16, v5);
    result = Hasher._finalize()();
    a2 = result & ~(-1 << *(_BYTE *)(v9 + 32));
    if (((*(_QWORD *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
      __asm { BR              X9 }
  }
LABEL_10:
  v10 = *v14;
  *(_QWORD *)(*v14 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_BYTE *)(*(_QWORD *)(v10 + 48) + a2) = v15;
  v11 = *(_QWORD *)(v10 + 16);
  v12 = __OFADD__(v11, 1);
  v13 = v11 + 1;
  if (v12)
  {
    __break(1u);
    JUMPOUT(0x100A1BEB4);
  }
  *(_QWORD *)(v10 + 16) = v13;
  return result;
}

uint64_t sub_100A1BF18(uint64_t result, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  _QWORD v28[9];

  v5 = v4;
  v8 = result;
  v9 = *(_QWORD *)(*v4 + 16);
  v10 = *(_QWORD *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0)
    goto LABEL_22;
  v11 = v9 + 1;
  if ((a4 & 1) != 0)
  {
    sub_100A14C04(v11);
  }
  else
  {
    if (v10 > v9)
    {
      result = (uint64_t)sub_100A24558();
      goto LABEL_22;
    }
    sub_100A26D34(v11);
  }
  v12 = *v4;
  Hasher.init(_seed:)(v28);
  String.hash(into:)(v28, v8, a2);
  result = Hasher._finalize()();
  v13 = -1 << *(_BYTE *)(v12 + 32);
  a3 = result & ~v13;
  v14 = v12 + 56;
  if (((*(_QWORD *)(v12 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0)
  {
    v15 = *(_QWORD *)(v12 + 48);
    v16 = (_QWORD *)(v15 + 16 * a3);
    v17 = v16[1];
    v18 = *v16 == v8 && v17 == a2;
    if (v18 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(*v16, v17, v8, a2, 0), (result & 1) != 0))
    {
LABEL_21:
      result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
      __break(1u);
    }
    else
    {
      v19 = ~v13;
      while (1)
      {
        a3 = (a3 + 1) & v19;
        if (((*(_QWORD *)(v14 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) == 0)
          break;
        v20 = (_QWORD *)(v15 + 16 * a3);
        v21 = v20[1];
        if (*v20 != v8 || v21 != a2)
        {
          result = _stringCompareWithSmolCheck(_:_:expecting:)(*v20, v21, v8, a2, 0);
          if ((result & 1) == 0)
            continue;
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  v23 = *v5;
  *(_QWORD *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  v24 = (uint64_t *)(*(_QWORD *)(v23 + 48) + 16 * a3);
  *v24 = v8;
  v24[1] = a2;
  v25 = *(_QWORD *)(v23 + 16);
  v26 = __OFADD__(v25, 1);
  v27 = v25 + 1;
  if (v26)
    __break(1u);
  else
    *(_QWORD *)(v23 + 16) = v27;
  return result;
}

Swift::Int sub_100A1C0B0(Swift::Int result, unint64_t a2, unint64_t a3, char a4)
{
  uint64_t *v4;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t __s1;

  v7 = result;
  v8 = *(_QWORD *)(*v4 + 16);
  v9 = *(_QWORD *)(*v4 + 24);
  if (v9 <= v8 || (a4 & 1) == 0)
  {
    v10 = v8 + 1;
    if ((a4 & 1) != 0)
    {
      sub_100A14EE0(v10);
    }
    else
    {
      if (v9 > v8)
      {
        result = (Swift::Int)sub_100A24708();
        goto LABEL_10;
      }
      sub_100A26FE0(v10);
    }
    v11 = *v4;
    Hasher.init(_seed:)(&__s1);
    sub_10001BBBC(v7, a2);
    Data.hash(into:)(&__s1, v7, a2);
    sub_10001BC14(v7, a2);
    result = Hasher._finalize()();
    a3 = result & ~(-1 << *(_BYTE *)(v11 + 32));
    if (((*(_QWORD *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0)
      __asm { BR              X8 }
  }
LABEL_10:
  v12 = *v4;
  *(_QWORD *)(*v4 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  v13 = (uint64_t *)(*(_QWORD *)(v12 + 48) + 16 * a3);
  *v13 = v7;
  v13[1] = a2;
  v14 = *(_QWORD *)(v12 + 16);
  v15 = __OFADD__(v14, 1);
  v16 = v14 + 1;
  if (v15)
  {
    __break(1u);
    JUMPOUT(0x100A1CA84);
  }
  *(_QWORD *)(v12 + 16) = v16;
  return result;
}

uint64_t sub_100A1CB60(uint64_t result, unint64_t a2, char a3, uint64_t *a4, uint64_t a5)
{
  uint64_t *v5;
  Swift::UInt v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  _QWORD v20[9];

  v8 = result;
  v9 = *(_QWORD *)(*v5 + 16);
  v10 = *(_QWORD *)(*v5 + 24);
  if (v10 > v9 && (a3 & 1) != 0)
    goto LABEL_14;
  v11 = v9 + 1;
  if ((a3 & 1) != 0)
  {
    sub_100A1A7F4(v11, a4);
  }
  else
  {
    if (v10 > v9)
    {
      result = (uint64_t)sub_100A2649C(a4);
      goto LABEL_14;
    }
    sub_100A2C264(v11, a4);
  }
  v12 = *v5;
  Hasher.init(_seed:)(v20);
  Hasher._combine(_:)(v8);
  result = Hasher._finalize()();
  v13 = -1 << *(_BYTE *)(v12 + 32);
  a2 = result & ~v13;
  if (((*(_QWORD *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v14 = *(_QWORD *)(v12 + 48);
    if (*(unsigned __int8 *)(v14 + a2) == (_DWORD)v8)
    {
LABEL_13:
      result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(a5);
      __break(1u);
    }
    else
    {
      v15 = ~v13;
      while (1)
      {
        a2 = (a2 + 1) & v15;
        if (((*(_QWORD *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          break;
        if (*(unsigned __int8 *)(v14 + a2) == (_DWORD)v8)
          goto LABEL_13;
      }
    }
  }
LABEL_14:
  v16 = *v5;
  *(_QWORD *)(*v5 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_BYTE *)(*(_QWORD *)(v16 + 48) + a2) = v8;
  v17 = *(_QWORD *)(v16 + 16);
  v18 = __OFADD__(v17, 1);
  v19 = v17 + 1;
  if (v18)
    __break(1u);
  else
    *(_QWORD *)(v16 + 16) = v19;
  return result;
}

uint64_t sub_100A1CCB8(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, unint64_t, uint64_t);
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;

  v30 = a1;
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(*v3 + 16);
  v11 = *(_QWORD *)(*v3 + 24);
  v29 = v3;
  if (v11 > v10 && (a3 & 1) != 0)
    goto LABEL_12;
  v12 = v10 + 1;
  if ((a3 & 1) != 0)
  {
    sub_100A1787C(v12, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, &qword_1010FA238, &qword_1010F98B0, (uint64_t)&protocol conformance descriptor for UUID);
  }
  else
  {
    if (v11 > v10)
    {
      sub_100A25940((uint64_t (*)(_QWORD))&type metadata accessor for UUID, &qword_1010FA238);
      goto LABEL_12;
    }
    sub_100A296B0(v12, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, &qword_1010FA238, &qword_1010F98B0, (uint64_t)&protocol conformance descriptor for UUID);
  }
  v13 = *v3;
  v14 = *(_QWORD *)(*v3 + 40);
  v15 = sub_100006204(&qword_1010F98B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v16 = dispatch thunk of Hashable._rawHashValue(seed:)(v14, v6, v15);
  v17 = -1 << *(_BYTE *)(v13 + 32);
  a2 = v16 & ~v17;
  if (((*(_QWORD *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v18 = ~v17;
    v19 = *(_QWORD *)(v7 + 72);
    v20 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    do
    {
      v20(v9, *(_QWORD *)(v13 + 48) + v19 * a2, v6);
      v21 = sub_100006204(&qword_1010EE520, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v22 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v30, v6, v21);
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      if ((v22 & 1) != 0)
        goto LABEL_15;
      a2 = (a2 + 1) & v18;
    }
    while (((*(_QWORD *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  v23 = v30;
  v24 = *v29;
  *(_QWORD *)(*v29 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 32))(*(_QWORD *)(v24 + 48) + *(_QWORD *)(v7 + 72) * a2, v23, v6);
  v26 = *(_QWORD *)(v24 + 16);
  v27 = __OFADD__(v26, 1);
  v28 = v26 + 1;
  if (!v27)
  {
    *(_QWORD *)(v24 + 16) = v28;
    return result;
  }
  __break(1u);
LABEL_15:
  result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v6);
  __break(1u);
  return result;
}

uint64_t sub_100A1CF0C(uint64_t a1, unint64_t a2, char a3)
{
  return sub_100A1CF20(a1, a2, a3, &qword_10110FF40, (uint64_t)&type metadata for Int);
}

uint64_t sub_100A1CF20(uint64_t result, unint64_t a2, char a3, uint64_t *a4, uint64_t a5)
{
  uint64_t *v5;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;

  v8 = result;
  v9 = *(_QWORD *)(*v5 + 16);
  v10 = *(_QWORD *)(*v5 + 24);
  if (v10 > v9 && (a3 & 1) != 0)
    goto LABEL_14;
  v11 = v9 + 1;
  if ((a3 & 1) != 0)
  {
    sub_100A19960(v11, a4);
  }
  else
  {
    if (v10 > v9)
    {
      result = (uint64_t)sub_100A25B70(a4);
      goto LABEL_14;
    }
    sub_100A2B4F4(v11, a4);
  }
  v12 = *v5;
  result = static Hasher._hash(seed:_:)(*(_QWORD *)(*v5 + 40), v8);
  v13 = -1 << *(_BYTE *)(v12 + 32);
  a2 = result & ~v13;
  if (((*(_QWORD *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v14 = *(_QWORD *)(v12 + 48);
    if (*(_QWORD *)(v14 + 8 * a2) == v8)
    {
LABEL_13:
      result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(a5);
      __break(1u);
    }
    else
    {
      v15 = ~v13;
      while (1)
      {
        a2 = (a2 + 1) & v15;
        if (((*(_QWORD *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          break;
        if (*(_QWORD *)(v14 + 8 * a2) == v8)
          goto LABEL_13;
      }
    }
  }
LABEL_14:
  v16 = *v5;
  *(_QWORD *)(*v5 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v16 + 48) + 8 * a2) = v8;
  v17 = *(_QWORD *)(v16 + 16);
  v18 = __OFADD__(v17, 1);
  v19 = v17 + 1;
  if (v18)
    __break(1u);
  else
    *(_QWORD *)(v16 + 16) = v19;
  return result;
}

uint64_t sub_100A1D054(uint64_t result, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;

  v5 = result;
  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0)
    goto LABEL_14;
  v8 = v6 + 1;
  if ((a3 & 1) != 0)
  {
    sub_100A151D4(v8);
  }
  else
  {
    if (v7 > v6)
    {
      result = (uint64_t)sub_100A2649C((uint64_t *)&unk_10110FF80);
      goto LABEL_14;
    }
    sub_100A272A8(v8);
  }
  v9 = *v3;
  result = static Hasher._hash(seed:bytes:count:)(*(_QWORD *)(*v3 + 40), v5, 1);
  v10 = -1 << *(_BYTE *)(v9 + 32);
  a2 = result & ~v10;
  if (((*(_QWORD *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v11 = *(_QWORD *)(v9 + 48);
    if (*(unsigned __int8 *)(v11 + a2) == (_DWORD)v5)
    {
LABEL_13:
      result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for UInt8);
      __break(1u);
    }
    else
    {
      v12 = ~v10;
      while (1)
      {
        a2 = (a2 + 1) & v12;
        if (((*(_QWORD *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          break;
        if (*(unsigned __int8 *)(v11 + a2) == (_DWORD)v5)
          goto LABEL_13;
      }
    }
  }
LABEL_14:
  v13 = *v3;
  *(_QWORD *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_BYTE *)(*(_QWORD *)(v13 + 48) + a2) = v5;
  v14 = *(_QWORD *)(v13 + 16);
  v15 = __OFADD__(v14, 1);
  v16 = v14 + 1;
  if (v15)
    __break(1u);
  else
    *(_QWORD *)(v13 + 16) = v16;
  return result;
}

uint64_t sub_100A1D180(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  Swift::Int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t __s1;

  v25 = type metadata accessor for BeaconNamingRecord(0);
  v7 = *(_QWORD *)(v25 - 8);
  __chkstk_darwin(v25);
  v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(*v3 + 16);
  v11 = *(_QWORD *)(*v3 + 24);
  v22 = v7;
  v23 = v3;
  if (v11 <= v10 || (a3 & 1) == 0)
  {
    v12 = v10 + 1;
    if ((a3 & 1) != 0)
    {
      sub_100A15468(v12);
    }
    else
    {
      if (v11 > v10)
      {
        sub_100A248EC(type metadata accessor for BeaconNamingRecord, &qword_101110088);
        goto LABEL_10;
      }
      sub_100A2750C(v12);
    }
    v13 = *v3;
    Hasher.init(_seed:)(&__s1);
    sub_100A00ED0((uint64_t)&__s1);
    v14 = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v13 + 32);
    a2 = v14 & ~v15;
    v28 = v13 + 56;
    v29 = v13;
    if (((*(_QWORD *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
    {
      v26 = ~v15;
      v27 = *(_QWORD *)(v7 + 72);
      v24 = a1;
      sub_10005972C(*(_QWORD *)(v29 + 48) + v27 * a2, (uint64_t)v9, type metadata accessor for BeaconNamingRecord);
      __asm { BR              X10 }
    }
  }
LABEL_10:
  v16 = *v23;
  *(_QWORD *)(*v23 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = sub_1000126EC(a1, *(_QWORD *)(v16 + 48) + *(_QWORD *)(v22 + 72) * a2, type metadata accessor for BeaconNamingRecord);
  v18 = *(_QWORD *)(v16 + 16);
  v19 = __OFADD__(v18, 1);
  v20 = v18 + 1;
  if (v19)
  {
    __break(1u);
    JUMPOUT(0x100A1DBC0);
  }
  *(_QWORD *)(v16 + 16) = v20;
  return result;
}

void sub_100A1DC80(uint64_t a1, uint64_t a2, char a3, unint64_t a4, char a5)
{
  uint64_t *v5;
  Swift::UInt v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  Swift::Int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t *v28;
  _QWORD v29[9];

  v9 = a3 & 1;
  v10 = *(_QWORD *)(*v5 + 16);
  v11 = *(_QWORD *)(*v5 + 24);
  if (v11 > v10 && (a5 & 1) != 0)
    goto LABEL_19;
  v12 = v10 + 1;
  if ((a5 & 1) != 0)
  {
    sub_100A158E8(v12);
  }
  else
  {
    if (v11 > v10)
    {
      sub_100A24B04();
      goto LABEL_19;
    }
    sub_100A2794C(v12);
  }
  v13 = *v5;
  Hasher.init(_seed:)(v29);
  String.hash(into:)(v29, a1, a2);
  Hasher._combine(_:)(v9);
  v14 = Hasher._finalize()();
  v15 = -1 << *(_BYTE *)(v13 + 32);
  a4 = v14 & ~v15;
  v16 = v13 + 56;
  if (((*(_QWORD *)(v13 + 56 + ((a4 >> 3) & 0xFFFFFFFFFFFFF8)) >> a4) & 1) != 0)
  {
    v17 = ~v15;
    v18 = *(_QWORD *)(v13 + 48);
    do
    {
      v19 = v18 + 24 * a4;
      v20 = *(_QWORD *)(v19 + 8);
      v21 = *(unsigned __int8 *)(v19 + 16);
      if (*(_QWORD *)v19 == a1 && v20 == a2)
      {
        if (((_DWORD)v9 == 0) != v21)
          goto LABEL_18;
      }
      else if ((_stringCompareWithSmolCheck(_:_:expecting:)(*(_QWORD *)v19, v20, a1, a2, 0) & 1) != 0
             && ((((_DWORD)v9 == 0) ^ v21) & 1) != 0)
      {
LABEL_18:
        ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&_s34DisplayIdentifierAndMembershipTypeVN);
        __break(1u);
        break;
      }
      a4 = (a4 + 1) & v17;
    }
    while (((*(_QWORD *)(v16 + ((a4 >> 3) & 0xFFFFFFFFFFFFF8)) >> a4) & 1) != 0);
  }
LABEL_19:
  v23 = *v28;
  *(_QWORD *)(*v28 + 8 * (a4 >> 6) + 56) |= 1 << a4;
  v24 = *(_QWORD *)(v23 + 48) + 24 * a4;
  *(_QWORD *)v24 = a1;
  *(_QWORD *)(v24 + 8) = a2;
  *(_BYTE *)(v24 + 16) = v9;
  v25 = *(_QWORD *)(v23 + 16);
  v26 = __OFADD__(v25, 1);
  v27 = v25 + 1;
  if (v26)
    __break(1u);
  else
    *(_QWORD *)(v23 + 16) = v27;
}

Swift::Int sub_100A1DE3C(Swift::Int result, Swift::Int a2, unint64_t a3, char a4)
{
  uint64_t *v4;
  Swift::Int v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::Int *v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t __s1;

  v7 = result;
  v8 = *(_QWORD *)(*v4 + 16);
  v9 = *(_QWORD *)(*v4 + 24);
  if (v9 <= v8 || (a4 & 1) == 0)
  {
    v10 = v8 + 1;
    if ((a4 & 1) != 0)
    {
      sub_100A15C28(v10);
    }
    else
    {
      if (v9 > v8)
      {
        result = (Swift::Int)sub_100A24CCC();
        goto LABEL_10;
      }
      sub_100A27C2C(v10);
    }
    v11 = *v4;
    Hasher.init(_seed:)(&__s1);
    Data.hash(into:)(&__s1, v7, a2);
    result = Hasher._finalize()();
    a3 = result & ~(-1 << *(_BYTE *)(v11 + 32));
    if (((*(_QWORD *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0)
      __asm { BR              X8 }
  }
LABEL_10:
  v12 = *v4;
  *(_QWORD *)(*v4 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  v13 = (Swift::Int *)(*(_QWORD *)(v12 + 48) + 16 * a3);
  *v13 = v7;
  v13[1] = a2;
  v14 = *(_QWORD *)(v12 + 16);
  v15 = __OFADD__(v14, 1);
  v16 = v14 + 1;
  if (v15)
  {
    __break(1u);
    JUMPOUT(0x100A1E7A4);
  }
  *(_QWORD *)(v12 + 16) = v16;
  return result;
}

void sub_100A1E880(uint64_t a1, unint64_t a2, char a3, uint64_t *a4, unint64_t *a5, _QWORD *a6)
{
  uint64_t *v6;
  uint64_t *v9;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  Swift::Int v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  char v20;
  uint64_t v21;
  id v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;

  v9 = v6;
  v12 = *(_QWORD *)(*v6 + 16);
  v13 = *(_QWORD *)(*v6 + 24);
  if (v13 > v12 && (a3 & 1) != 0)
    goto LABEL_14;
  v14 = v12 + 1;
  if ((a3 & 1) != 0)
  {
    sub_100A1B1EC(v14, a4);
  }
  else
  {
    if (v13 > v12)
    {
      sub_100A2578C(a4);
      goto LABEL_14;
    }
    sub_100A2CB90(v14, a4);
  }
  v15 = *v6;
  v16 = NSObject._rawHashValue(seed:)(*(_QWORD *)(*v6 + 40));
  v17 = -1 << *(_BYTE *)(v15 + 32);
  a2 = v16 & ~v17;
  if (((*(_QWORD *)(v15 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v18 = sub_10000F4A0(0, a5, a6);
    v19 = *(id *)(*(_QWORD *)(v15 + 48) + 8 * a2);
    v20 = static NSObject.== infix(_:_:)(v19, a1);

    if ((v20 & 1) != 0)
    {
LABEL_13:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v18);
      __break(1u);
    }
    else
    {
      v21 = ~v17;
      while (1)
      {
        a2 = (a2 + 1) & v21;
        if (((*(_QWORD *)(v15 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          break;
        v22 = *(id *)(*(_QWORD *)(v15 + 48) + 8 * a2);
        v23 = static NSObject.== infix(_:_:)(v22, a1);

        if ((v23 & 1) != 0)
          goto LABEL_13;
      }
    }
  }
LABEL_14:
  v24 = *v9;
  *(_QWORD *)(*v9 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v24 + 48) + 8 * a2) = a1;
  v25 = *(_QWORD *)(v24 + 16);
  v26 = __OFADD__(v25, 1);
  v27 = v25 + 1;
  if (v26)
    __break(1u);
  else
    *(_QWORD *)(v24 + 16) = v27;
}

void sub_100A1EA10(unsigned __int8 a1, uint64_t a2, uint64_t a3, unint64_t a4, char a5)
{
  uint64_t *v5;
  uint64_t *v6;
  Swift::UInt v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  Swift::Int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 *v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  _QWORD v29[9];

  v6 = v5;
  v10 = a1;
  v11 = *(_QWORD *)(*v5 + 16);
  v12 = *(_QWORD *)(*v5 + 24);
  if (v12 > v11 && (a5 & 1) != 0)
    goto LABEL_18;
  v13 = v11 + 1;
  if ((a5 & 1) != 0)
  {
    sub_100A15F10(v13);
  }
  else
  {
    if (v12 > v11)
    {
      sub_100A24E7C();
      goto LABEL_18;
    }
    sub_100A27EDC(v13);
  }
  v14 = *v5;
  Hasher.init(_seed:)(v29);
  Hasher._combine(_:)(v10);
  swift_bridgeObjectRetain(a3);
  String.hash(into:)(v29, a2, a3);
  swift_bridgeObjectRelease();
  v15 = Hasher._finalize()();
  v16 = -1 << *(_BYTE *)(v14 + 32);
  a4 = v15 & ~v16;
  v17 = v14 + 56;
  if (((*(_QWORD *)(v14 + 56 + ((a4 >> 3) & 0xFFFFFFFFFFFFF8)) >> a4) & 1) != 0)
  {
    v18 = ~v16;
    v19 = *(_QWORD *)(v14 + 48);
    while (1)
    {
      v20 = (unsigned __int8 *)(v19 + 24 * a4);
      if (*v20 == (_DWORD)v10)
      {
        v21 = *((_QWORD *)v20 + 1);
        v22 = *((_QWORD *)v20 + 2);
        v23 = v21 == a2 && v22 == a3;
        if (v23 || (_stringCompareWithSmolCheck(_:_:expecting:)(v21, v22, a2, a3, 0) & 1) != 0)
          break;
      }
      a4 = (a4 + 1) & v18;
      if (((*(_QWORD *)(v17 + ((a4 >> 3) & 0xFFFFFFFFFFFFF8)) >> a4) & 1) == 0)
        goto LABEL_18;
    }
    ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for MessagingDestination);
    __break(1u);
  }
LABEL_18:
  v24 = *v6;
  *(_QWORD *)(*v6 + 8 * (a4 >> 6) + 56) |= 1 << a4;
  v25 = *(_QWORD *)(v24 + 48) + 24 * a4;
  *(_BYTE *)v25 = v10;
  *(_QWORD *)(v25 + 8) = a2;
  *(_QWORD *)(v25 + 16) = a3;
  v26 = *(_QWORD *)(v24 + 16);
  v27 = __OFADD__(v26, 1);
  v28 = v26 + 1;
  if (v27)
    __break(1u);
  else
    *(_QWORD *)(v24 + 16) = v28;
}

uint64_t sub_100A1EBC4(uint64_t a1, unint64_t a2, char a3, uint64_t (*a4)(_QWORD), uint64_t *a5, void (*a6)(_QWORD *), uint64_t (*a7)(char *, uint64_t))
{
  uint64_t *v7;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  Swift::Int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t result;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  _QWORD v35[9];

  v15 = a4(0);
  v34 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v17 = (char *)&v32 - v16;
  v18 = *(_QWORD *)(*v7 + 16);
  v19 = *(_QWORD *)(*v7 + 24);
  v33 = v7;
  if (v19 > v18 && (a3 & 1) != 0)
    goto LABEL_12;
  v20 = v18 + 1;
  if ((a3 & 1) != 0)
  {
    sub_100A16238(v20, a4, a5, a6);
  }
  else
  {
    if (v19 > v18)
    {
      sub_100A248EC(a4, a5);
      goto LABEL_12;
    }
    sub_100A281C8(v20, a4, a5, a6);
  }
  v21 = *v7;
  Hasher.init(_seed:)(v35);
  a6(v35);
  v22 = Hasher._finalize()();
  v23 = -1 << *(_BYTE *)(v21 + 32);
  a2 = v22 & ~v23;
  if (((*(_QWORD *)(v21 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v32 = v15;
    v24 = ~v23;
    v25 = *(_QWORD *)(v34 + 72);
    do
    {
      sub_10005972C(*(_QWORD *)(v21 + 48) + v25 * a2, (uint64_t)v17, a4);
      v26 = a7(v17, a1);
      sub_1000126B0((uint64_t)v17, a4);
      if ((v26 & 1) != 0)
        goto LABEL_15;
      a2 = (a2 + 1) & v24;
    }
    while (((*(_QWORD *)(v21 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  v27 = *v33;
  *(_QWORD *)(*v33 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = sub_1000126EC(a1, *(_QWORD *)(v27 + 48) + *(_QWORD *)(v34 + 72) * a2, a4);
  v29 = *(_QWORD *)(v27 + 16);
  v30 = __OFADD__(v29, 1);
  v31 = v29 + 1;
  if (!v30)
  {
    *(_QWORD *)(v27 + 16) = v31;
    return result;
  }
  __break(1u);
LABEL_15:
  result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v32);
  __break(1u);
  return result;
}

id sub_100A1EDC0(id result, unint64_t a2, char a3, uint64_t *a4, uint64_t (*a5)(_QWORD))
{
  Swift::Int v5;
  uint64_t *v7;
  id v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  Swift::Int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  Swift::Int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD v38[9];

  v7 = (uint64_t *)v5;
  v9 = result;
  v10 = *(_QWORD *)(*(_QWORD *)v5 + 16);
  v11 = *(_QWORD *)(*(_QWORD *)v5 + 24);
  if (v11 > v10 && (a3 & 1) != 0)
    goto LABEL_22;
  v12 = v10 + 1;
  if ((a3 & 1) != 0)
  {
    sub_100A18E50(v12, a4);
  }
  else
  {
    if (v11 > v10)
    {
      result = sub_100A2578C(a4);
LABEL_22:
      v33 = *v7;
      *(_QWORD *)(*v7 + 8 * (a2 >> 6) + 56) |= 1 << a2;
      *(_QWORD *)(*(_QWORD *)(v33 + 48) + 8 * a2) = v9;
      v34 = *(_QWORD *)(v33 + 16);
      v35 = __OFADD__(v34, 1);
      v36 = v34 + 1;
      if (!v35)
      {
        *(_QWORD *)(v33 + 16) = v36;
        return result;
      }
      __break(1u);
      goto LABEL_25;
    }
    sub_100A2AACC(v12, a4);
  }
  v13 = *(_QWORD *)v5;
  v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
  v16 = v15;
  Hasher.init(_seed:)(v38);
  String.hash(into:)(v38, v14, v16);
  v5 = Hasher._finalize()();
  result = (id)swift_bridgeObjectRelease(v16);
  v17 = -1 << *(_BYTE *)(v13 + 32);
  a2 = v5 & ~v17;
  if (((*(_QWORD *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
    goto LABEL_22;
  v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(*(_QWORD *)(v13 + 48) + 8 * a2));
  v5 = v19;
  v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
  if (v18 == v20 && v5 == v21)
  {
LABEL_25:
    swift_bridgeObjectRelease_n(v5, 2);
    goto LABEL_26;
  }
  v23 = v21;
  v24 = _stringCompareWithSmolCheck(_:_:expecting:)(v18, v5, v20, v21, 0);
  swift_bridgeObjectRelease(v5);
  result = (id)swift_bridgeObjectRelease(v23);
  if ((v24 & 1) == 0)
  {
    v25 = ~v17;
    do
    {
      a2 = (a2 + 1) & v25;
      if (((*(_QWORD *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
        goto LABEL_22;
      v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(*(_QWORD *)(v13 + 48) + 8 * a2));
      v5 = v27;
      v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
      if (v26 == v28 && v5 == v29)
        goto LABEL_25;
      v31 = v29;
      v32 = _stringCompareWithSmolCheck(_:_:expecting:)(v26, v5, v28, v29, 0);
      swift_bridgeObjectRelease(v5);
      result = (id)swift_bridgeObjectRelease(v31);
    }
    while ((v32 & 1) == 0);
  }
LABEL_26:
  v37 = a5(0);
  result = (id)ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v37);
  __break(1u);
  return result;
}

Swift::Int sub_100A1EFFC(Swift::Int result, unint64_t a2, char a3)
{
  uint64_t *v3;
  unsigned __int8 v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t *v16;
  char v17;
  _QWORD v18[9];

  v5 = result;
  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 <= v6 || (a3 & 1) == 0)
  {
    v8 = v6 + 1;
    if ((a3 & 1) != 0)
    {
      sub_100A16518(v8);
    }
    else
    {
      if (v7 > v6)
      {
        result = (Swift::Int)sub_100A2649C(&qword_1010FA428);
        goto LABEL_10;
      }
      sub_100A28464(v8);
    }
    v9 = *v3;
    Hasher.init(_seed:)(v18);
    v10 = sub_100DC66D8(v5);
    String.hash(into:)(v18, v10, v11);
    swift_bridgeObjectRelease();
    result = Hasher._finalize()();
    a2 = result & ~(-1 << *(_BYTE *)(v9 + 32));
    if (((*(_QWORD *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
      __asm { BR              X9 }
  }
LABEL_10:
  v12 = *v16;
  *(_QWORD *)(*v16 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_BYTE *)(*(_QWORD *)(v12 + 48) + a2) = v17;
  v13 = *(_QWORD *)(v12 + 16);
  v14 = __OFADD__(v13, 1);
  v15 = v13 + 1;
  if (v14)
  {
    __break(1u);
    JUMPOUT(0x100A1F6CCLL);
  }
  *(_QWORD *)(v12 + 16) = v15;
  return result;
}

uint64_t sub_100A1F790(uint64_t result, unint64_t a2, char a3)
{
  uint64_t *v3;
  char v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Swift::UInt v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  _QWORD v18[9];

  v5 = result;
  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0)
    goto LABEL_14;
  v8 = v6 + 1;
  if ((a3 & 1) != 0)
  {
    sub_100A16AB0(v8);
  }
  else
  {
    if (v7 > v6)
    {
      result = (uint64_t)sub_100A2649C(&qword_101110038);
      goto LABEL_14;
    }
    sub_100A289BC(v8);
  }
  v9 = *v3;
  Hasher.init(_seed:)(v18);
  v10 = qword_100E59228[v5];
  Hasher._combine(_:)(v10);
  result = Hasher._finalize()();
  v11 = -1 << *(_BYTE *)(v9 + 32);
  a2 = result & ~v11;
  if (((*(_QWORD *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v12 = *(_QWORD *)(v9 + 48);
    if (qword_100E59228[*(char *)(v12 + a2)] == v10)
    {
LABEL_13:
      result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for BeaconObservation.ObservationType);
      __break(1u);
    }
    else
    {
      v13 = ~v11;
      while (1)
      {
        a2 = (a2 + 1) & v13;
        if (((*(_QWORD *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          break;
        if (qword_100E59228[*(char *)(v12 + a2)] == v10)
          goto LABEL_13;
      }
    }
  }
LABEL_14:
  v14 = *v3;
  *(_QWORD *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_BYTE *)(*(_QWORD *)(v14 + 48) + a2) = v5;
  v15 = *(_QWORD *)(v14 + 16);
  v16 = __OFADD__(v15, 1);
  v17 = v15 + 1;
  if (v16)
    __break(1u);
  else
    *(_QWORD *)(v14 + 16) = v17;
  return result;
}

uint64_t sub_100A1F90C(uint64_t *a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  Swift::Int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t __s1;

  v37 = type metadata accessor for OwnerSharingCircle(0);
  v7 = *(_QWORD *)(v37 - 8);
  __chkstk_darwin(v37);
  v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(*v3 + 16);
  v11 = *(_QWORD *)(*v3 + 24);
  v33 = v7;
  v34 = v3;
  if (v11 <= v10 || (a3 & 1) == 0)
  {
    v12 = v10 + 1;
    if ((a3 & 1) != 0)
    {
      sub_100A16D64(v12);
    }
    else
    {
      if (v11 > v10)
      {
        sub_100A248EC(type metadata accessor for OwnerSharingCircle, &qword_10110AAC8);
        goto LABEL_10;
      }
      sub_100A28C40(v12);
    }
    v13 = *v3;
    Hasher.init(_seed:)(&__s1);
    v14 = *a1;
    v15 = a1[1];
    sub_10001BBBC(*a1, v15);
    Data.hash(into:)(&__s1, v14, v15);
    sub_10001BC14(v14, v15);
    v16 = (int *)v37;
    v17 = (char *)a1 + *(int *)(v37 + 20);
    v18 = type metadata accessor for UUID(0);
    v19 = sub_100006204(&qword_1010F98B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v36 = v17;
    dispatch thunk of Hashable.hash(into:)(&__s1, v18, v19);
    v32 = (char *)a1 + v16[6];
    dispatch thunk of Hashable.hash(into:)(&__s1, v18, v19);
    v31 = v16[7];
    Hasher._combine(_:)(*((unsigned __int8 *)a1 + v31));
    v30 = v16[8];
    v20 = *(uint64_t *)((char *)a1 + v30);
    swift_bridgeObjectRetain(v20);
    sub_100A2FEA8((uint64_t)&__s1, v20);
    swift_bridgeObjectRelease();
    v29 = v16[9];
    Hasher._combine(_:)(*((unsigned __int8 *)a1 + v29));
    v21 = Hasher._finalize()();
    v22 = -1 << *(_BYTE *)(v13 + 32);
    a2 = v21 & ~v22;
    v40 = v13 + 56;
    v41 = v13;
    if (((*(_QWORD *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
    {
      v38 = ~v22;
      v39 = *(_QWORD *)(v7 + 72);
      v35 = a1;
      sub_10005972C(*(_QWORD *)(v41 + 48) + v39 * a2, (uint64_t)v9, type metadata accessor for OwnerSharingCircle);
      __asm { BR              X10 }
    }
  }
LABEL_10:
  v23 = *v34;
  *(_QWORD *)(*v34 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = sub_1000126EC((uint64_t)a1, *(_QWORD *)(v23 + 48) + *(_QWORD *)(v33 + 72) * a2, type metadata accessor for OwnerSharingCircle);
  v25 = *(_QWORD *)(v23 + 16);
  v26 = __OFADD__(v25, 1);
  v27 = v25 + 1;
  if (v26)
  {
    __break(1u);
    JUMPOUT(0x100A2041CLL);
  }
  *(_QWORD *)(v23 + 16) = v27;
  return result;
}

Swift::Int sub_100A204DC(Swift::Int result, unint64_t a2, char a3)
{
  uint64_t *v3;
  unsigned __int8 v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t *v16;
  char v17;
  _QWORD v18[9];

  v5 = result;
  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 <= v6 || (a3 & 1) == 0)
  {
    v8 = v6 + 1;
    if ((a3 & 1) != 0)
    {
      sub_100A17114(v8);
    }
    else
    {
      if (v7 > v6)
      {
        result = (Swift::Int)sub_100A2649C(&qword_1010FA4A0);
        goto LABEL_10;
      }
      sub_100A28FA8(v8);
    }
    v9 = *v3;
    Hasher.init(_seed:)(v18);
    v10 = sub_100D79CA8(v5);
    String.hash(into:)(v18, v10, v11);
    swift_bridgeObjectRelease();
    result = Hasher._finalize()();
    a2 = result & ~(-1 << *(_BYTE *)(v9 + 32));
    if (((*(_QWORD *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
      __asm { BR              X9 }
  }
LABEL_10:
  v12 = *v16;
  *(_QWORD *)(*v16 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_BYTE *)(*(_QWORD *)(v12 + 48) + a2) = v17;
  v13 = *(_QWORD *)(v12 + 16);
  v14 = __OFADD__(v13, 1);
  v15 = v13 + 1;
  if (v14)
  {
    __break(1u);
    JUMPOUT(0x100A209ECLL);
  }
  *(_QWORD *)(v12 + 16) = v15;
  return result;
}

uint64_t sub_100A20A78(uint64_t result, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _OWORD *v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  BOOL v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  int v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  int v58;
  int v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD v69[10];

  v5 = result;
  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0)
    goto LABEL_46;
  v8 = v6 + 1;
  if ((a3 & 1) != 0)
  {
    sub_100A175DC(v8);
  }
  else
  {
    if (v7 > v6)
    {
      result = (uint64_t)sub_100A25050();
      goto LABEL_46;
    }
    sub_100A2943C(v8);
  }
  v9 = *v3;
  Hasher.init(_seed:)(v69);
  sub_100AA5AA0((uint64_t)v69);
  result = Hasher._finalize()();
  v10 = -1 << *(_BYTE *)(v9 + 32);
  a2 = result & ~v10;
  v57 = v9 + 56;
  if (((*(_QWORD *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v55 = ~v10;
    v54 = *(_QWORD *)(v9 + 48);
    v67 = *(_QWORD *)(v5 + 8);
    v68 = *(_QWORD *)v5;
    v48 = *(unsigned __int8 *)(v5 + 131);
    v49 = *(unsigned __int8 *)(v5 + 129);
    v46 = *(_QWORD *)(v5 + 152);
    v47 = *(_QWORD *)(v5 + 144);
    while (1)
    {
      v11 = v54 + 160 * a2;
      result = *(_QWORD *)v11;
      v12 = *(_QWORD *)(v11 + 8);
      v14 = *(_QWORD *)(v11 + 16);
      v13 = *(_QWORD *)(v11 + 24);
      v15 = *(_QWORD *)(v11 + 32);
      v16 = *(_QWORD *)(v11 + 40);
      v17 = *(_QWORD *)(v11 + 48);
      v18 = *(_QWORD *)(v11 + 56);
      v19 = *(_QWORD *)(v11 + 64);
      v20 = *(_QWORD *)(v11 + 72);
      v65 = *(_QWORD *)(v11 + 88);
      v66 = *(_QWORD *)(v11 + 80);
      v63 = *(_QWORD *)(v11 + 104);
      v64 = *(_QWORD *)(v11 + 96);
      v61 = *(_QWORD *)(v11 + 120);
      v62 = *(_QWORD *)(v11 + 112);
      v59 = *(unsigned __int8 *)(v11 + 129);
      v60 = *(unsigned __int8 *)(v11 + 128);
      v58 = *(unsigned __int8 *)(v11 + 130);
      v56 = *(unsigned __int8 *)(v11 + 131);
      v53 = *(unsigned __int8 *)(v11 + 136);
      v21 = *(_QWORD *)v11 == v68 && v12 == v67;
      v51 = *(_QWORD *)(v11 + 152);
      v52 = *(_QWORD *)(v11 + 144);
      if (v21 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(result, v12, v68, v67, 0), (result & 1) != 0))
      {
        if ((v22 = *(_QWORD *)(v5 + 16), v23 = *(_QWORD *)(v5 + 24), v14 == v22) && v13 == v23
          || (result = _stringCompareWithSmolCheck(_:_:expecting:)(v14, v13, v22, v23, 0), (result & 1) != 0))
        {
          if ((v24 = *(_QWORD *)(v5 + 32), v25 = *(_QWORD *)(v5 + 40), v15 == v24) && v16 == v25
            || (result = _stringCompareWithSmolCheck(_:_:expecting:)(v15, v16, v24, v25, 0), (result & 1) != 0))
          {
            if ((v26 = *(_QWORD *)(v5 + 48), v27 = *(_QWORD *)(v5 + 56), v17 == v26) && v18 == v27
              || (result = _stringCompareWithSmolCheck(_:_:expecting:)(v17, v18, v26, v27, 0), (result & 1) != 0))
            {
              if ((v28 = *(_QWORD *)(v5 + 64), v29 = *(_QWORD *)(v5 + 72), v19 == v28) && v20 == v29
                || (result = _stringCompareWithSmolCheck(_:_:expecting:)(v19, v20, v28, v29, 0), (result & 1) != 0))
              {
                if ((v30 = *(_QWORD *)(v5 + 80), v31 = *(_QWORD *)(v5 + 88), v66 == v30) && v65 == v31
                  || (result = _stringCompareWithSmolCheck(_:_:expecting:)(v66, v65, v30, v31, 0), (result & 1) != 0))
                {
                  if ((v32 = *(_QWORD *)(v5 + 96), v33 = *(_QWORD *)(v5 + 104), v64 == v32) && v63 == v33
                    || (result = _stringCompareWithSmolCheck(_:_:expecting:)(v64, v63, v32, v33, 0), (result & 1) != 0))
                  {
                    if ((v34 = *(_QWORD *)(v5 + 112), v35 = *(_QWORD *)(v5 + 120), v62 == v34) && v61 == v35
                      || (result = _stringCompareWithSmolCheck(_:_:expecting:)(v62, v61, v34, v35, 0),
                          (result & 1) != 0))
                    {
                      if (((v60 ^ *(unsigned __int8 *)(v5 + 128)) & 1) == 0
                        && ((v59 ^ v49) & 1) == 0
                        && ((v58 ^ *(unsigned __int8 *)(v5 + 130)) & 1) == 0
                        && ((v56 ^ v48) & 1) == 0
                        && v53 == *(unsigned __int8 *)(v5 + 136))
                      {
                        if (v52 == v47 && v51 == v46)
                          break;
                        result = _stringCompareWithSmolCheck(_:_:expecting:)(v52, v51, v47, v46, 0);
                        if ((result & 1) != 0)
                          break;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      a2 = (a2 + 1) & v55;
      if (((*(_QWORD *)(v57 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
        goto LABEL_46;
    }
    result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for MessagingDevice);
    __break(1u);
  }
LABEL_46:
  v36 = *v50;
  *(_QWORD *)(*v50 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  v37 = (_OWORD *)(*(_QWORD *)(v36 + 48) + 160 * a2);
  v38 = *(_OWORD *)(v5 + 80);
  v37[4] = *(_OWORD *)(v5 + 64);
  v37[5] = v38;
  v39 = *(_OWORD *)(v5 + 48);
  v37[2] = *(_OWORD *)(v5 + 32);
  v37[3] = v39;
  v40 = *(_OWORD *)(v5 + 144);
  v37[8] = *(_OWORD *)(v5 + 128);
  v37[9] = v40;
  v41 = *(_OWORD *)(v5 + 112);
  v37[6] = *(_OWORD *)(v5 + 96);
  v37[7] = v41;
  v42 = *(_OWORD *)(v5 + 16);
  *v37 = *(_OWORD *)v5;
  v37[1] = v42;
  v43 = *(_QWORD *)(v36 + 16);
  v44 = __OFADD__(v43, 1);
  v45 = v43 + 1;
  if (v44)
    __break(1u);
  else
    *(_QWORD *)(v36 + 16) = v45;
  return result;
}

uint64_t sub_100A20E60(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, unint64_t, uint64_t);
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;

  v30 = a1;
  v6 = type metadata accessor for MACAddress(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(*v3 + 16);
  v11 = *(_QWORD *)(*v3 + 24);
  v29 = v3;
  if (v11 > v10 && (a3 & 1) != 0)
    goto LABEL_12;
  v12 = v10 + 1;
  if ((a3 & 1) != 0)
  {
    sub_100A1787C(v12, (uint64_t (*)(uint64_t))&type metadata accessor for MACAddress, &qword_101110160, (unint64_t *)&unk_101110150, (uint64_t)&protocol conformance descriptor for MACAddress);
  }
  else
  {
    if (v11 > v10)
    {
      sub_100A25940((uint64_t (*)(_QWORD))&type metadata accessor for MACAddress, &qword_101110160);
      goto LABEL_12;
    }
    sub_100A296B0(v12, (uint64_t (*)(uint64_t))&type metadata accessor for MACAddress, &qword_101110160, (unint64_t *)&unk_101110150, (uint64_t)&protocol conformance descriptor for MACAddress);
  }
  v13 = *v3;
  v14 = *(_QWORD *)(*v3 + 40);
  v15 = sub_100006204((unint64_t *)&unk_101110150, (uint64_t (*)(uint64_t))&type metadata accessor for MACAddress, (uint64_t)&protocol conformance descriptor for MACAddress);
  v16 = dispatch thunk of Hashable._rawHashValue(seed:)(v14, v6, v15);
  v17 = -1 << *(_BYTE *)(v13 + 32);
  a2 = v16 & ~v17;
  if (((*(_QWORD *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v18 = ~v17;
    v19 = *(_QWORD *)(v7 + 72);
    v20 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    do
    {
      v20(v9, *(_QWORD *)(v13 + 48) + v19 * a2, v6);
      v21 = sub_100006204(&qword_10111C3A0, (uint64_t (*)(uint64_t))&type metadata accessor for MACAddress, (uint64_t)&protocol conformance descriptor for MACAddress);
      v22 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v30, v6, v21);
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      if ((v22 & 1) != 0)
        goto LABEL_15;
      a2 = (a2 + 1) & v18;
    }
    while (((*(_QWORD *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  v23 = v30;
  v24 = *v29;
  *(_QWORD *)(*v29 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 32))(*(_QWORD *)(v24 + 48) + *(_QWORD *)(v7 + 72) * a2, v23, v6);
  v26 = *(_QWORD *)(v24 + 16);
  v27 = __OFADD__(v26, 1);
  v28 = v26 + 1;
  if (!v27)
  {
    *(_QWORD *)(v24 + 16) = v28;
    return result;
  }
  __break(1u);
LABEL_15:
  result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v6);
  __break(1u);
  return result;
}

void sub_100A210B4(uint64_t a1, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t *v4;
  uint64_t *v5;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::Int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  _QWORD v29[9];

  v5 = v4;
  v9 = *(_QWORD *)(*v4 + 16);
  v10 = *(_QWORD *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0)
    goto LABEL_22;
  v11 = v9 + 1;
  if ((a4 & 1) != 0)
  {
    sub_100A17BDC(v11);
  }
  else
  {
    if (v10 > v9)
    {
      sub_100A25250();
      goto LABEL_22;
    }
    sub_100A299CC(v11);
  }
  v12 = *v4;
  Hasher.init(_seed:)(v29);
  String.hash(into:)(v29, a1, a2);
  v13 = Hasher._finalize()();
  v14 = -1 << *(_BYTE *)(v12 + 32);
  a3 = v13 & ~v14;
  v15 = v12 + 56;
  if (((*(_QWORD *)(v12 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) != 0)
  {
    v16 = *(_QWORD *)(v12 + 48);
    v17 = (_QWORD *)(v16 + 16 * a3);
    v18 = v17[1];
    v19 = *v17 == a1 && v18 == a2;
    if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v17, v18, a1, a2, 0) & 1) != 0)
    {
LABEL_21:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for MessagingAccount);
      __break(1u);
    }
    else
    {
      v20 = ~v14;
      while (1)
      {
        a3 = (a3 + 1) & v20;
        if (((*(_QWORD *)(v15 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8)) >> a3) & 1) == 0)
          break;
        v21 = (_QWORD *)(v16 + 16 * a3);
        v22 = v21[1];
        v23 = *v21 == a1 && v22 == a2;
        if (v23 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v21, v22, a1, a2, 0) & 1) != 0)
          goto LABEL_21;
      }
    }
  }
LABEL_22:
  v24 = *v5;
  *(_QWORD *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  v25 = (_QWORD *)(*(_QWORD *)(v24 + 48) + 16 * a3);
  *v25 = a1;
  v25[1] = a2;
  v26 = *(_QWORD *)(v24 + 16);
  v27 = __OFADD__(v26, 1);
  v28 = v26 + 1;
  if (v27)
    __break(1u);
  else
    *(_QWORD *)(v24 + 16) = v28;
}

uint64_t sub_100A2124C(uint64_t result, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  _BYTE v20[40];

  v4 = v3;
  v6 = result;
  v7 = *(_QWORD *)(*v3 + 16);
  v8 = *(_QWORD *)(*v3 + 24);
  if (v8 > v7 && (a3 & 1) != 0)
    goto LABEL_12;
  v9 = v7 + 1;
  if ((a3 & 1) != 0)
  {
    sub_100A17EB8(v9);
  }
  else
  {
    if (v8 > v7)
    {
      result = (uint64_t)sub_100A25400();
      goto LABEL_12;
    }
    sub_100A29C78(v9);
  }
  v10 = *v3;
  result = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(*v3 + 40));
  v11 = -1 << *(_BYTE *)(v10 + 32);
  a2 = result & ~v11;
  if (((*(_QWORD *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v12 = ~v11;
    do
    {
      sub_10010F9DC(*(_QWORD *)(v10 + 48) + 40 * a2, (uint64_t)v20);
      v13 = static AnyHashable.== infix(_:_:)(v20, v6);
      result = sub_1002EAB4C((uint64_t)v20);
      if ((v13 & 1) != 0)
        goto LABEL_15;
      a2 = (a2 + 1) & v12;
    }
    while (((*(_QWORD *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  v14 = *v4;
  *(_QWORD *)(*v4 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  v15 = *(_QWORD *)(v14 + 48) + 40 * a2;
  v16 = *(_OWORD *)(v6 + 16);
  *(_OWORD *)v15 = *(_OWORD *)v6;
  *(_OWORD *)(v15 + 16) = v16;
  *(_QWORD *)(v15 + 32) = *(_QWORD *)(v6 + 32);
  v17 = *(_QWORD *)(v14 + 16);
  v18 = __OFADD__(v17, 1);
  v19 = v17 + 1;
  if (!v18)
  {
    *(_QWORD *)(v14 + 16) = v19;
    return result;
  }
  __break(1u);
LABEL_15:
  result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for AnyHashable);
  __break(1u);
  return result;
}

uint64_t sub_100A213B4(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  Swift::Int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  _QWORD v24[3];
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t __s1;

  v28 = type metadata accessor for OwnedBeaconGroup(0);
  v7 = *(_QWORD *)(v28 - 8);
  __chkstk_darwin(v28);
  v9 = (char *)v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(*v3 + 16);
  v11 = *(_QWORD *)(*v3 + 24);
  v25 = v7;
  v26 = v3;
  if (v11 <= v10 || (a3 & 1) == 0)
  {
    v12 = v10 + 1;
    if ((a3 & 1) != 0)
    {
      sub_100A18180(v12);
    }
    else
    {
      if (v11 > v10)
      {
        sub_100A248EC(type metadata accessor for OwnedBeaconGroup, &qword_101110168);
        goto LABEL_10;
      }
      sub_100A29F08(v12);
    }
    v13 = *v3;
    Hasher.init(_seed:)(&__s1);
    v14 = a1 + *(int *)(v28 + 24);
    v15 = type metadata accessor for UUID(0);
    v16 = sub_100006204(&qword_1010F98B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v24[2] = v14;
    dispatch thunk of Hashable.hash(into:)(&__s1, v15, v16);
    v17 = Hasher._finalize()();
    v18 = -1 << *(_BYTE *)(v13 + 32);
    a2 = v17 & ~v18;
    v31 = v13 + 56;
    v32 = v13;
    if (((*(_QWORD *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
    {
      v29 = ~v18;
      v30 = *(_QWORD *)(v7 + 72);
      v27 = a1;
      sub_10005972C(*(_QWORD *)(v32 + 48) + v30 * a2, (uint64_t)v9, type metadata accessor for OwnedBeaconGroup);
      __asm { BR              X10 }
    }
  }
LABEL_10:
  v19 = *v26;
  *(_QWORD *)(*v26 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = sub_1000126EC(a1, *(_QWORD *)(v19 + 48) + *(_QWORD *)(v25 + 72) * a2, type metadata accessor for OwnedBeaconGroup);
  v21 = *(_QWORD *)(v19 + 16);
  v22 = __OFADD__(v21, 1);
  v23 = v21 + 1;
  if (v22)
  {
    __break(1u);
    JUMPOUT(0x100A21E44);
  }
  *(_QWORD *)(v19 + 16) = v23;
  return result;
}

void sub_100A21F04(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  Swift::Int v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  __int128 v22[4];

  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0)
    goto LABEL_14;
  v8 = v6 + 1;
  if ((a3 & 1) != 0)
  {
    sub_100A18840(v8);
  }
  else
  {
    if (v7 > v6)
    {
      sub_100A255D8();
      goto LABEL_14;
    }
    sub_100A2A534(v8);
  }
  v9 = *v3;
  Hasher.init(_seed:)(v22);
  sub_100AA422C(v22, a1);
  v10 = Hasher._finalize()();
  v11 = -1 << *(_BYTE *)(v9 + 32);
  a2 = v10 & ~v11;
  if (((*(_QWORD *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    swift_bridgeObjectRetain(*(_QWORD *)(*(_QWORD *)(v9 + 48) + 8 * a2));
    v13 = sub_10051E5DC(v12, a1);
    swift_bridgeObjectRelease();
    if ((v13 & 1) != 0)
    {
LABEL_13:
      v17 = sub_10001A9A8((uint64_t *)&unk_1010F7790);
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v17);
      __break(1u);
    }
    else
    {
      v14 = ~v11;
      while (1)
      {
        a2 = (a2 + 1) & v14;
        if (((*(_QWORD *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          break;
        swift_bridgeObjectRetain(*(_QWORD *)(*(_QWORD *)(v9 + 48) + 8 * a2));
        v16 = sub_10051E5DC(v15, a1);
        swift_bridgeObjectRelease();
        if ((v16 & 1) != 0)
          goto LABEL_13;
      }
    }
  }
LABEL_14:
  v18 = *v3;
  *(_QWORD *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v18 + 48) + 8 * a2) = a1;
  v19 = *(_QWORD *)(v18 + 16);
  v20 = __OFADD__(v19, 1);
  v21 = v19 + 1;
  if (v20)
    __break(1u);
  else
    *(_QWORD *)(v18 + 16) = v21;
}

uint64_t sub_100A22090(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  Swift::Int v30;
  uint64_t v31;
  char v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  BOOL v37;
  uint64_t v38;
  uint64_t result;
  uint64_t v40;
  BOOL v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD v50[9];

  v7 = type metadata accessor for BeaconStatus(0);
  v44 = *(_QWORD *)(v7 - 8);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v8);
  v13 = (char *)&v43 - v12;
  v14 = __chkstk_darwin(v11);
  v16 = (char *)&v43 - v15;
  v17 = __chkstk_darwin(v14);
  v19 = (char *)&v43 - v18;
  __chkstk_darwin(v17);
  v21 = (char *)&v43 - v20;
  v22 = *(_QWORD *)(*v3 + 16);
  v23 = *(_QWORD *)(*v3 + 24);
  v43 = v3;
  if (v23 > v22 && (a3 & 1) != 0)
    goto LABEL_18;
  v24 = v22 + 1;
  if ((a3 & 1) != 0)
  {
    sub_100A18A84(v24);
  }
  else
  {
    if (v23 > v22)
    {
      sub_100A248EC(type metadata accessor for BeaconStatus, &qword_1011100F8);
      goto LABEL_18;
    }
    sub_100A2A744(v24);
  }
  v25 = *v3;
  Hasher.init(_seed:)(v50);
  v26 = type metadata accessor for UUID(0);
  v27 = sub_100006204(&qword_1010F98B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(v50, v26, v27);
  v28 = type metadata accessor for Date(0);
  v29 = sub_100006204((unint64_t *)&unk_1010ED800, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  dispatch thunk of Hashable.hash(into:)(v50, v28, v29);
  v30 = Hasher._finalize()();
  v31 = -1 << *(_BYTE *)(v25 + 32);
  a2 = v30 & ~v31;
  v48 = v25 + 56;
  v49 = v25;
  if (((*(_QWORD *)(v25 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v47 = ~v31;
    v46 = *(_QWORD *)(v44 + 72);
    while (1)
    {
      sub_10005972C(*(_QWORD *)(v49 + 48) + v46 * a2, (uint64_t)v21, type metadata accessor for BeaconStatus);
      v32 = static UUID.== infix(_:_:)(v21, a1);
      sub_10005972C((uint64_t)v21, (uint64_t)v19, type metadata accessor for BeaconStatus);
      sub_10005972C(a1, (uint64_t)v16, type metadata accessor for BeaconStatus);
      if ((v32 & 1) == 0)
        break;
      v33 = static Date.== infix(_:_:)(&v19[*(int *)(v7 + 24)], &v16[*(int *)(v7 + 24)]);
      sub_1000126B0((uint64_t)v16, type metadata accessor for BeaconStatus);
      sub_1000126B0((uint64_t)v19, type metadata accessor for BeaconStatus);
      sub_10005972C((uint64_t)v21, (uint64_t)v13, type metadata accessor for BeaconStatus);
      sub_10005972C(a1, (uint64_t)v10, type metadata accessor for BeaconStatus);
      if ((v33 & 1) == 0)
        goto LABEL_11;
      v34 = *(int *)(v7 + 20);
      v45 = v13[v34];
      v35 = v7;
      v36 = v10[v34];
      sub_1000126B0((uint64_t)v10, type metadata accessor for BeaconStatus);
      sub_1000126B0((uint64_t)v13, type metadata accessor for BeaconStatus);
      sub_1000126B0((uint64_t)v21, type metadata accessor for BeaconStatus);
      v37 = v45 == v36;
      v7 = v35;
      if (v37)
      {
        ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v35);
        __break(1u);
        goto LABEL_18;
      }
LABEL_12:
      a2 = (a2 + 1) & v47;
      if (((*(_QWORD *)(v48 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
        goto LABEL_18;
    }
    sub_1000126B0((uint64_t)v16, type metadata accessor for BeaconStatus);
    sub_1000126B0((uint64_t)v19, type metadata accessor for BeaconStatus);
    sub_10005972C((uint64_t)v21, (uint64_t)v13, type metadata accessor for BeaconStatus);
    sub_10005972C(a1, (uint64_t)v10, type metadata accessor for BeaconStatus);
LABEL_11:
    sub_1000126B0((uint64_t)v10, type metadata accessor for BeaconStatus);
    sub_1000126B0((uint64_t)v13, type metadata accessor for BeaconStatus);
    sub_1000126B0((uint64_t)v21, type metadata accessor for BeaconStatus);
    goto LABEL_12;
  }
LABEL_18:
  v38 = *v43;
  *(_QWORD *)(*v43 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = sub_1000126EC(a1, *(_QWORD *)(v38 + 48) + *(_QWORD *)(v44 + 72) * a2, type metadata accessor for BeaconStatus);
  v40 = *(_QWORD *)(v38 + 16);
  v41 = __OFADD__(v40, 1);
  v42 = v40 + 1;
  if (v41)
    __break(1u);
  else
    *(_QWORD *)(v38 + 16) = v42;
  return result;
}

uint64_t sub_100A22480(Swift::UInt64 *a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  double *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  Swift::UInt64 v14;
  Swift::UInt64 v15;
  Swift::UInt64 v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  Swift::Int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  _QWORD v32[9];

  v7 = type metadata accessor for WildModeTrackingLocation(0);
  v31 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v9 = (double *)((char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = *(_QWORD *)(*v3 + 16);
  v11 = *(_QWORD *)(*v3 + 24);
  v30 = v3;
  if (v11 > v10 && (a3 & 1) != 0)
    goto LABEL_25;
  v12 = v10 + 1;
  if ((a3 & 1) != 0)
  {
    sub_100A19168(v12);
  }
  else
  {
    if (v11 > v10)
    {
      sub_100A248EC(type metadata accessor for WildModeTrackingLocation, &qword_101110098);
      goto LABEL_25;
    }
    sub_100A2ADA4(v12);
  }
  v13 = *v3;
  Hasher.init(_seed:)(v32);
  if ((*a1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v14 = *a1;
  else
    v14 = 0;
  Hasher._combine(_:)(v14);
  if ((a1[1] & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v15 = a1[1];
  else
    v15 = 0;
  Hasher._combine(_:)(v15);
  if ((a1[2] & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v16 = a1[2];
  else
    v16 = 0;
  Hasher._combine(_:)(v16);
  v17 = (char *)a1 + *(int *)(v7 + 28);
  v18 = type metadata accessor for Date(0);
  v19 = sub_100006204((unint64_t *)&unk_1010ED800, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  dispatch thunk of Hashable.hash(into:)(v32, v18, v19);
  v20 = Hasher._finalize()();
  v21 = -1 << *(_BYTE *)(v13 + 32);
  a2 = v20 & ~v21;
  if (((*(_QWORD *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v22 = ~v21;
    v23 = *(_QWORD *)(v31 + 72);
    while (1)
    {
      sub_10005972C(*(_QWORD *)(v13 + 48) + v23 * a2, (uint64_t)v9, type metadata accessor for WildModeTrackingLocation);
      if (*v9 == *(double *)a1
        && v9[1] == *((double *)a1 + 1)
        && v9[2] == *((double *)a1 + 2)
        && (static Date.== infix(_:_:)((char *)v9 + *(int *)(v7 + 28), v17) & 1) != 0)
      {
        break;
      }
      sub_1000126B0((uint64_t)v9, type metadata accessor for WildModeTrackingLocation);
      a2 = (a2 + 1) & v22;
      if (((*(_QWORD *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
        goto LABEL_25;
    }
    sub_1000126B0((uint64_t)v9, type metadata accessor for WildModeTrackingLocation);
    ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v7);
    __break(1u);
  }
LABEL_25:
  v24 = *v30;
  *(_QWORD *)(*v30 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = sub_1000126EC((uint64_t)a1, *(_QWORD *)(v24 + 48) + *(_QWORD *)(v31 + 72) * a2, type metadata accessor for WildModeTrackingLocation);
  v26 = *(_QWORD *)(v24 + 16);
  v27 = __OFADD__(v26, 1);
  v28 = v26 + 1;
  if (v27)
    __break(1u);
  else
    *(_QWORD *)(v24 + 16) = v28;
  return result;
}

uint64_t sub_100A22718(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, unint64_t, uint64_t);
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;

  v30 = a1;
  v6 = type metadata accessor for Destination(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(*v3 + 16);
  v11 = *(_QWORD *)(*v3 + 24);
  v29 = v3;
  if (v11 > v10 && (a3 & 1) != 0)
    goto LABEL_12;
  v12 = v10 + 1;
  if ((a3 & 1) != 0)
  {
    sub_100A1787C(v12, (uint64_t (*)(uint64_t))&type metadata accessor for Destination, &qword_1011100C8, &qword_1011100B8, (uint64_t)&protocol conformance descriptor for Destination);
  }
  else
  {
    if (v11 > v10)
    {
      sub_100A25940((uint64_t (*)(_QWORD))&type metadata accessor for Destination, &qword_1011100C8);
      goto LABEL_12;
    }
    sub_100A296B0(v12, (uint64_t (*)(uint64_t))&type metadata accessor for Destination, &qword_1011100C8, &qword_1011100B8, (uint64_t)&protocol conformance descriptor for Destination);
  }
  v13 = *v3;
  v14 = *(_QWORD *)(*v3 + 40);
  v15 = sub_100006204(&qword_1011100B8, (uint64_t (*)(uint64_t))&type metadata accessor for Destination, (uint64_t)&protocol conformance descriptor for Destination);
  v16 = dispatch thunk of Hashable._rawHashValue(seed:)(v14, v6, v15);
  v17 = -1 << *(_BYTE *)(v13 + 32);
  a2 = v16 & ~v17;
  if (((*(_QWORD *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v18 = ~v17;
    v19 = *(_QWORD *)(v7 + 72);
    v20 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    do
    {
      v20(v9, *(_QWORD *)(v13 + 48) + v19 * a2, v6);
      v21 = sub_100006204(&qword_1011100C0, (uint64_t (*)(uint64_t))&type metadata accessor for Destination, (uint64_t)&protocol conformance descriptor for Destination);
      v22 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v30, v6, v21);
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      if ((v22 & 1) != 0)
        goto LABEL_15;
      a2 = (a2 + 1) & v18;
    }
    while (((*(_QWORD *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  v23 = v30;
  v24 = *v29;
  *(_QWORD *)(*v29 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 32))(*(_QWORD *)(v24 + 48) + *(_QWORD *)(v7 + 72) * a2, v23, v6);
  v26 = *(_QWORD *)(v24 + 16);
  v27 = __OFADD__(v26, 1);
  v28 = v26 + 1;
  if (!v27)
  {
    *(_QWORD *)(v24 + 16) = v28;
    return result;
  }
  __break(1u);
LABEL_15:
  result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v6);
  __break(1u);
  return result;
}

uint64_t sub_100A2296C(uint64_t result, unint64_t a2, char a3)
{
  uint64_t *v3;
  unsigned __int8 v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  _QWORD v18[9];

  v5 = result;
  v6 = result;
  v7 = *(_QWORD *)(*v3 + 16);
  v8 = *(_QWORD *)(*v3 + 24);
  if (v8 > v7 && (a3 & 1) != 0)
    goto LABEL_14;
  v9 = v7 + 1;
  if ((a3 & 1) != 0)
  {
    sub_100A19390(v9);
  }
  else
  {
    if (v8 > v7)
    {
      result = (uint64_t)sub_100A2649C(&qword_10110FFE0);
      goto LABEL_14;
    }
    sub_100A2AF98(v9);
  }
  v10 = *v3;
  Hasher.init(_seed:)(v18);
  Hasher._combine(_:)(v5);
  result = Hasher._finalize()();
  v11 = -1 << *(_BYTE *)(v10 + 32);
  a2 = result & ~v11;
  if (((*(_QWORD *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v12 = *(_QWORD *)(v10 + 48);
    if (*(unsigned __int8 *)(v12 + a2) == v6)
    {
LABEL_13:
      result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for BeaconSharingMessageType);
      __break(1u);
    }
    else
    {
      v13 = ~v11;
      while (1)
      {
        a2 = (a2 + 1) & v13;
        if (((*(_QWORD *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          break;
        if (*(unsigned __int8 *)(v12 + a2) == v6)
          goto LABEL_13;
      }
    }
  }
LABEL_14:
  v14 = *v3;
  *(_QWORD *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_BYTE *)(*(_QWORD *)(v14 + 48) + a2) = v6;
  v15 = *(_QWORD *)(v14 + 16);
  v16 = __OFADD__(v15, 1);
  v17 = v15 + 1;
  if (v16)
    __break(1u);
  else
    *(_QWORD *)(v14 + 16) = v17;
  return result;
}

uint64_t sub_100A22ACC(uint64_t result, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v6 = result;
  v21 = result;
  v7 = *(_QWORD *)(*v3 + 16);
  v8 = *(_QWORD *)(*v3 + 24);
  if (v8 > v7 && (a3 & 1) != 0)
    goto LABEL_12;
  v9 = v7 + 1;
  if ((a3 & 1) != 0)
  {
    sub_100A19638(v9);
  }
  else
  {
    if (v8 > v7)
    {
      result = (uint64_t)sub_100A262FC((uint64_t *)&unk_101110210);
      goto LABEL_12;
    }
    sub_100A2B210(v9);
  }
  v10 = *v3;
  v11 = *(_QWORD *)(*v3 + 40);
  v4 = type metadata accessor for AnyCancellable(0);
  v12 = sub_100006204((unint64_t *)&unk_101110200, (uint64_t (*)(uint64_t))&type metadata accessor for AnyCancellable, (uint64_t)&protocol conformance descriptor for AnyCancellable);
  result = dispatch thunk of Hashable._rawHashValue(seed:)(v11, v4, v12);
  v13 = -1 << *(_BYTE *)(v10 + 32);
  a2 = result & ~v13;
  if (((*(_QWORD *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v14 = ~v13;
    v15 = sub_100006204((unint64_t *)&unk_10111C3C0, (uint64_t (*)(uint64_t))&type metadata accessor for AnyCancellable, (uint64_t)&protocol conformance descriptor for AnyCancellable);
    do
    {
      v20 = *(_QWORD *)(*(_QWORD *)(v10 + 48) + 8 * a2);
      result = dispatch thunk of static Equatable.== infix(_:_:)(&v20, &v21, v4, v15);
      if ((result & 1) != 0)
        goto LABEL_15;
      a2 = (a2 + 1) & v14;
    }
    while (((*(_QWORD *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  v16 = *v3;
  *(_QWORD *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v16 + 48) + 8 * a2) = v6;
  v17 = *(_QWORD *)(v16 + 16);
  v18 = __OFADD__(v17, 1);
  v19 = v17 + 1;
  if (!v18)
  {
    *(_QWORD *)(v16 + 16) = v19;
    return result;
  }
  __break(1u);
LABEL_15:
  result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v4);
  __break(1u);
  return result;
}

uint64_t sub_100A22C84(uint64_t a1, unint64_t a2, char a3)
{
  return sub_100A1CB60(a1, a2, a3, (uint64_t *)&unk_1011101C0, (uint64_t)&type metadata for LocationSource);
}

uint64_t sub_100A22C98(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  Swift::Int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  _QWORD v29[9];

  v7 = type metadata accessor for BeaconIdentifier(0);
  v28 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(*v3 + 16);
  v11 = *(_QWORD *)(*v3 + 24);
  v27 = v3;
  if (v11 > v10 && (a3 & 1) != 0)
    goto LABEL_14;
  v12 = v10 + 1;
  if ((a3 & 1) != 0)
  {
    sub_100A19BE8(v12);
  }
  else
  {
    if (v11 > v10)
    {
      sub_100A248EC(type metadata accessor for BeaconIdentifier, &qword_10110A900);
      goto LABEL_14;
    }
    sub_100A2B750(v12);
  }
  v13 = *v3;
  Hasher.init(_seed:)(v29);
  v14 = type metadata accessor for UUID(0);
  v15 = sub_100006204(&qword_1010F98B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(v29, v14, v15);
  v16 = a1 + *(int *)(v7 + 20);
  dispatch thunk of Hashable.hash(into:)(v29, v14, v15);
  v17 = Hasher._finalize()();
  v18 = -1 << *(_BYTE *)(v13 + 32);
  a2 = v17 & ~v18;
  if (((*(_QWORD *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v19 = ~v18;
    v20 = *(_QWORD *)(v28 + 72);
    while (1)
    {
      sub_10005972C(*(_QWORD *)(v13 + 48) + v20 * a2, (uint64_t)v9, type metadata accessor for BeaconIdentifier);
      if ((static UUID.== infix(_:_:)(v9, a1) & 1) != 0
        && (static UUID.== infix(_:_:)(&v9[*(int *)(v7 + 20)], v16) & 1) != 0)
      {
        break;
      }
      sub_1000126B0((uint64_t)v9, type metadata accessor for BeaconIdentifier);
      a2 = (a2 + 1) & v19;
      if (((*(_QWORD *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
        goto LABEL_14;
    }
    sub_1000126B0((uint64_t)v9, type metadata accessor for BeaconIdentifier);
    ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v7);
    __break(1u);
  }
LABEL_14:
  v21 = *v27;
  *(_QWORD *)(*v27 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  result = sub_1000126EC(a1, *(_QWORD *)(v21 + 48) + *(_QWORD *)(v28 + 72) * a2, type metadata accessor for BeaconIdentifier);
  v23 = *(_QWORD *)(v21 + 16);
  v24 = __OFADD__(v23, 1);
  v25 = v23 + 1;
  if (v24)
    __break(1u);
  else
    *(_QWORD *)(v21 + 16) = v25;
  return result;
}

uint64_t sub_100A22EF4(uint64_t result, unint64_t a2, char a3)
{
  uint64_t *v3;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;

  v5 = result;
  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0)
    goto LABEL_14;
  v8 = v6 + 1;
  if ((a3 & 1) != 0)
  {
    sub_100A19FCC(v8);
  }
  else
  {
    if (v7 > v6)
    {
      result = (uint64_t)sub_100A25D1C();
      goto LABEL_14;
    }
    sub_100A2BAD0(v8);
  }
  v9 = *v3;
  result = static Hasher._hash(seed:bytes:count:)(*(_QWORD *)(*v3 + 40), v5, 4);
  v10 = -1 << *(_BYTE *)(v9 + 32);
  a2 = result & ~v10;
  if (((*(_QWORD *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v11 = *(_QWORD *)(v9 + 48);
    if (*(_DWORD *)(v11 + 4 * a2) == v5)
    {
LABEL_13:
      result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for UInt32);
      __break(1u);
    }
    else
    {
      v12 = ~v10;
      while (1)
      {
        a2 = (a2 + 1) & v12;
        if (((*(_QWORD *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          break;
        if (*(_DWORD *)(v11 + 4 * a2) == v5)
          goto LABEL_13;
      }
    }
  }
LABEL_14:
  v13 = *v3;
  *(_QWORD *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_DWORD *)(*(_QWORD *)(v13 + 48) + 4 * a2) = v5;
  v14 = *(_QWORD *)(v13 + 16);
  v15 = __OFADD__(v14, 1);
  v16 = v14 + 1;
  if (v15)
    __break(1u);
  else
    *(_QWORD *)(v13 + 16) = v16;
  return result;
}

uint64_t sub_100A23018(uint64_t result, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  _QWORD v19[9];

  v4 = v3;
  v6 = result;
  v7 = *(_QWORD *)(*v3 + 16);
  v8 = *(_QWORD *)(*v3 + 24);
  if (v8 > v7 && (a3 & 1) != 0)
    goto LABEL_13;
  v9 = v7 + 1;
  if ((a3 & 1) != 0)
  {
    sub_100A1A26C(v9);
  }
  else
  {
    if (v8 > v7)
    {
      result = (uint64_t)sub_100A262FC(&qword_1011101A0);
      goto LABEL_13;
    }
    sub_100A2BD34(v9);
  }
  v10 = *v3;
  Hasher.init(_seed:)(v19);
  v11 = *(id *)(v6 + 32);
  NSObject.hash(into:)(v19);

  result = Hasher._finalize()();
  v12 = -1 << *(_BYTE *)(v10 + 32);
  a2 = result & ~v12;
  if (((*(_QWORD *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    result = type metadata accessor for Service();
    v13 = *(_QWORD *)(v10 + 48);
    v14 = *(_QWORD *)(v6 + 32);
    if (*(_QWORD *)(*(_QWORD *)(v13 + 8 * a2) + 32) == v14)
    {
LABEL_12:
      result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(result);
      __break(1u);
    }
    else
    {
      while (1)
      {
        a2 = (a2 + 1) & ~v12;
        if (((*(_QWORD *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          break;
        if (*(_QWORD *)(*(_QWORD *)(v13 + 8 * a2) + 32) == v14)
          goto LABEL_12;
      }
    }
  }
LABEL_13:
  v15 = *v4;
  *(_QWORD *)(*v4 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v15 + 48) + 8 * a2) = v6;
  v16 = *(_QWORD *)(v15 + 16);
  v17 = __OFADD__(v16, 1);
  v18 = v16 + 1;
  if (v17)
    __break(1u);
  else
    *(_QWORD *)(v15 + 16) = v18;
  return result;
}

uint64_t sub_100A2318C(uint64_t result, unint64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  _QWORD v19[9];

  v4 = v3;
  v6 = result;
  v7 = *(_QWORD *)(*v3 + 16);
  v8 = *(_QWORD *)(*v3 + 24);
  if (v8 > v7 && (a3 & 1) != 0)
    goto LABEL_13;
  v9 = v7 + 1;
  if ((a3 & 1) != 0)
  {
    sub_100A1A530(v9);
  }
  else
  {
    if (v8 > v7)
    {
      result = (uint64_t)sub_100A262FC(&qword_101110198);
      goto LABEL_13;
    }
    sub_100A2BFCC(v9);
  }
  v10 = *v3;
  Hasher.init(_seed:)(v19);
  v11 = *(id *)(v6 + 40);
  NSObject.hash(into:)(v19);

  result = Hasher._finalize()();
  v12 = -1 << *(_BYTE *)(v10 + 32);
  a2 = result & ~v12;
  if (((*(_QWORD *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    result = type metadata accessor for Characteristic();
    v13 = *(_QWORD *)(v10 + 48);
    v14 = *(_QWORD *)(v6 + 40);
    if (*(_QWORD *)(*(_QWORD *)(v13 + 8 * a2) + 40) == v14)
    {
LABEL_12:
      result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(result);
      __break(1u);
    }
    else
    {
      while (1)
      {
        a2 = (a2 + 1) & ~v12;
        if (((*(_QWORD *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          break;
        if (*(_QWORD *)(*(_QWORD *)(v13 + 8 * a2) + 40) == v14)
          goto LABEL_12;
      }
    }
  }
LABEL_13:
  v15 = *v4;
  *(_QWORD *)(*v4 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v15 + 48) + 8 * a2) = v6;
  v16 = *(_QWORD *)(v15 + 16);
  v17 = __OFADD__(v16, 1);
  v18 = v16 + 1;
  if (v17)
    __break(1u);
  else
    *(_QWORD *)(v15 + 16) = v18;
  return result;
}

void sub_100A23300(uint64_t *a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  Swift::Int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  BOOL v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD v50[9];

  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0)
    goto LABEL_49;
  v8 = v6 + 1;
  if ((a3 & 1) != 0)
  {
    sub_100A1AA98(v8);
  }
  else
  {
    if (v7 > v6)
    {
      sub_100A25EBC();
      goto LABEL_49;
    }
    sub_100A2C4D8(v8);
  }
  v9 = *v3;
  Hasher.init(_seed:)(v50);
  v10 = a1[1];
  v49 = *a1;
  String.hash(into:)(v50, *a1, v10);
  v11 = Hasher._finalize()();
  v12 = -1 << *(_BYTE *)(v9 + 32);
  a2 = v11 & ~v12;
  v47 = v9 + 56;
  if (((*(_QWORD *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v45 = ~v12;
    v44 = *(_QWORD *)(v9 + 48);
    do
    {
      v13 = v44 + 88 * a2;
      v14 = *(_QWORD *)(v13 + 8);
      v16 = *(_QWORD *)(v13 + 16);
      v15 = *(_QWORD *)(v13 + 24);
      v17 = *(unsigned __int8 *)(v13 + 32);
      v18 = *(_QWORD *)(v13 + 40);
      v19 = *(_QWORD *)(v13 + 48);
      v21 = *(_QWORD *)(v13 + 56);
      v20 = *(_QWORD *)(v13 + 64);
      v46 = *(_QWORD *)(v13 + 72);
      v48 = *(_QWORD *)(v13 + 80);
      v22 = *(_QWORD *)v13 == v49 && v14 == v10;
      if (!v22 && (_stringCompareWithSmolCheck(_:_:expecting:)(*(_QWORD *)v13, v14, v49, v10, 0) & 1) == 0)
        goto LABEL_11;
      v23 = a1[2];
      v24 = a1[3];
      v25 = v16 == v23 && v15 == v24;
      if (!v25 && (_stringCompareWithSmolCheck(_:_:expecting:)(v16, v15, v23, v24, 0) & 1) == 0
        || ((v17 ^ *((unsigned __int8 *)a1 + 32)) & 1) != 0)
      {
        goto LABEL_11;
      }
      v26 = a1[6];
      if (v19)
      {
        if (!v26)
          goto LABEL_11;
        v27 = a1[5];
        v28 = v18 == v27 && v19 == v26;
        if (!v28 && (_stringCompareWithSmolCheck(_:_:expecting:)(v18, v19, v27, v26, 0) & 1) == 0)
          goto LABEL_11;
      }
      else if (v26)
      {
        goto LABEL_11;
      }
      v29 = a1[8];
      if (v20)
      {
        if (!v29)
          goto LABEL_11;
        v30 = a1[7];
        v31 = v21 == v30 && v20 == v29;
        if (!v31 && (_stringCompareWithSmolCheck(_:_:expecting:)(v21, v20, v30, v29, 0) & 1) == 0)
          goto LABEL_11;
      }
      else if (v29)
      {
        goto LABEL_11;
      }
      v32 = a1[10];
      if (v48)
      {
        if (v32)
        {
          v33 = a1[9];
          v34 = v46 == v33 && v48 == v32;
          if (v34 || (_stringCompareWithSmolCheck(_:_:expecting:)(v46, v48, v33, v32, 0) & 1) != 0)
          {
LABEL_48:
            ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for FamilyMember);
            __break(1u);
            break;
          }
        }
      }
      else if (!v32)
      {
        goto LABEL_48;
      }
LABEL_11:
      a2 = (a2 + 1) & v45;
    }
    while (((*(_QWORD *)(v47 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_49:
  v35 = *v43;
  *(_QWORD *)(*v43 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  v36 = *(_QWORD *)(v35 + 48) + 88 * a2;
  v37 = *((_OWORD *)a1 + 1);
  *(_OWORD *)v36 = *(_OWORD *)a1;
  *(_OWORD *)(v36 + 16) = v37;
  *(_QWORD *)(v36 + 80) = a1[10];
  v38 = *((_OWORD *)a1 + 4);
  v39 = *((_OWORD *)a1 + 2);
  *(_OWORD *)(v36 + 48) = *((_OWORD *)a1 + 3);
  *(_OWORD *)(v36 + 64) = v38;
  *(_OWORD *)(v36 + 32) = v39;
  v40 = *(_QWORD *)(v35 + 16);
  v41 = __OFADD__(v40, 1);
  v42 = v40 + 1;
  if (v41)
    __break(1u);
  else
    *(_QWORD *)(v35 + 16) = v42;
}

void sub_100A235B8(_QWORD *a1, unint64_t a2, char a3)
{
  uint64_t *v3;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  Swift::UInt v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  Swift::Int v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  BOOL v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  BOOL v37;
  uint64_t *v38;
  uint64_t *v39;
  Swift::UInt v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  BOOL v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  BOOL v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD v60[10];

  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0)
    goto LABEL_50;
  v8 = v6 + 1;
  if ((a3 & 1) != 0)
  {
    sub_100A1AE00(v8);
  }
  else
  {
    if (v7 > v6)
    {
      sub_100A260D8();
      goto LABEL_50;
    }
    sub_100A2C820(v8);
  }
  v9 = *v3;
  v10 = *a1;
  v11 = a1[1];
  v12 = (_QWORD *)a1[2];
  Hasher.init(_seed:)(v60);
  String.hash(into:)(v60, v10, v11);
  v13 = v12[2];
  Hasher._combine(_:)(v13);
  v55 = v12;
  v14 = v12[2];
  if (v14)
  {
    v15 = v55 + 5;
    do
    {
      v16 = *(v15 - 1);
      v17 = *v15;
      swift_bridgeObjectRetain(*v15);
      String.hash(into:)(v60, v16, v17);
      swift_bridgeObjectRelease();
      v15 += 2;
      --v14;
    }
    while (v14);
  }
  v56 = a1[3];
  v54 = a1[4];
  String.hash(into:)(v60, v56, v54);
  v18 = Hasher._finalize()();
  v19 = -1 << *(_BYTE *)(v9 + 32);
  a2 = v18 & ~v19;
  v59 = v9 + 56;
  if (((*(_QWORD *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v57 = ~v19;
    v58 = *(_QWORD *)(v9 + 48);
    while (1)
    {
      v20 = (_QWORD *)(v58 + 40 * a2);
      v21 = v20[1];
      v23 = (_QWORD *)v20[2];
      v22 = v20[3];
      v24 = v20[4];
      v25 = *v20 == v10 && v21 == v11;
      if (!v25 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v20, v21, v10, v11, 0) & 1) == 0 || v23[2] != v13)
        goto LABEL_14;
      if (!v13 || v23 == v55)
        goto LABEL_37;
      v26 = v55[2];
      if (!v26)
        goto LABEL_54;
      v27 = v23[4];
      v28 = v23[5];
      v29 = v55[4];
      v30 = v55[5];
      v31 = v27 == v29 && v28 == v30;
      if (v31 || (_stringCompareWithSmolCheck(_:_:expecting:)(v27, v28, v29, v30, 0) & 1) != 0)
        break;
LABEL_14:
      a2 = (a2 + 1) & v57;
      if (((*(_QWORD *)(v59 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
        goto LABEL_50;
    }
    if (v13 != 1)
    {
      v32 = v26 - 2;
      if (v26 < 2)
        goto LABEL_56;
      v33 = v23[6];
      v34 = v23[7];
      v35 = v55[6];
      v36 = v55[7];
      v37 = v33 == v35 && v34 == v36;
      if (!v37 && (_stringCompareWithSmolCheck(_:_:expecting:)(v33, v34, v35, v36, 0) & 1) == 0)
        goto LABEL_14;
      if (v13 != 2)
      {
        v38 = v23 + 9;
        v39 = v55 + 9;
        v40 = v13 - 2;
        while (v40)
        {
          if (!v32)
            goto LABEL_53;
          v41 = *(v38 - 1);
          v42 = *v38;
          v43 = *(v39 - 1);
          v44 = *v39;
          v45 = v41 == v43 && v42 == v44;
          if (!v45 && (_stringCompareWithSmolCheck(_:_:expecting:)(v41, v42, v43, v44, 0) & 1) == 0)
            goto LABEL_14;
          --v32;
          v39 += 2;
          v38 += 2;
          if (!--v40)
            goto LABEL_37;
        }
        __break(1u);
LABEL_53:
        __break(1u);
LABEL_54:
        __break(1u);
LABEL_55:
        __break(1u);
LABEL_56:
        __break(1u);
LABEL_57:
        ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for FMFHandle);
        __break(1u);
        return;
      }
    }
LABEL_37:
    if (v22 == v56 && v24 == v54 || (_stringCompareWithSmolCheck(_:_:expecting:)(v22, v24, v56, v54, 0) & 1) != 0)
      goto LABEL_57;
    goto LABEL_14;
  }
LABEL_50:
  v46 = *v52;
  *(_QWORD *)(*v52 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  v47 = *(_QWORD *)(v46 + 48) + 40 * a2;
  v48 = *((_OWORD *)a1 + 1);
  *(_OWORD *)v47 = *(_OWORD *)a1;
  *(_OWORD *)(v47 + 16) = v48;
  *(_QWORD *)(v47 + 32) = a1[4];
  v49 = *(_QWORD *)(v46 + 16);
  v50 = __OFADD__(v49, 1);
  v51 = v49 + 1;
  if (v50)
    goto LABEL_55;
  *(_QWORD *)(v46 + 16) = v51;
}

uint64_t sub_100A23900(uint64_t a1, unint64_t a2, char a3)
{
  return sub_100A1CB60(a1, a2, a3, &qword_101110080, (uint64_t)&type metadata for AcceptanceState);
}

unint64_t sub_100A23914(unint64_t result, unint64_t a2, char a3)
{
  uint64_t *v3;
  Swift::UInt32 v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  int v14;
  int v15;
  uint64_t v17;
  Swift::UInt32 *v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[9];

  v5 = result;
  v6 = HIDWORD(result);
  v7 = *(_QWORD *)(*v3 + 16);
  v8 = *(_QWORD *)(*v3 + 24);
  if (v8 > v7 && (a3 & 1) != 0)
    goto LABEL_15;
  v9 = v7 + 1;
  if ((a3 & 1) != 0)
  {
    sub_100A1B4A0(v9);
  }
  else
  {
    if (v8 > v7)
    {
      result = (unint64_t)sub_100A26624();
      goto LABEL_15;
    }
    sub_100A2CE04(v9);
  }
  v10 = *v3;
  Hasher.init(_seed:)(v23);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  result = Hasher._finalize()();
  v11 = -1 << *(_BYTE *)(v10 + 32);
  a2 = result & ~v11;
  if (((*(_QWORD *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v12 = ~v11;
    do
    {
      v13 = (int *)(*(_QWORD *)(v10 + 48) + 8 * a2);
      v15 = *v13;
      v14 = v13[1];
      if (v15 == v5 && v14 == (_DWORD)v6)
        goto LABEL_18;
      a2 = (a2 + 1) & v12;
    }
    while (((*(_QWORD *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_15:
  v17 = *v3;
  *(_QWORD *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  v18 = (Swift::UInt32 *)(*(_QWORD *)(v17 + 48) + 8 * a2);
  *v18 = v5;
  v18[1] = v6;
  v19 = *(_QWORD *)(v17 + 16);
  v20 = __OFADD__(v19, 1);
  v21 = v19 + 1;
  if (!v20)
  {
    *(_QWORD *)(v17 + 16) = v21;
    return result;
  }
  __break(1u);
LABEL_18:
  v22 = sub_10001A9A8((uint64_t *)&unk_101110060);
  result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v22);
  __break(1u);
  return result;
}

Swift::Int sub_100A23A74(Swift::Int result, unint64_t a2, Swift::UInt32 a3, unint64_t a4, char a5, uint64_t *a6)
{
  uint64_t *v6;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t __s1;

  v10 = result;
  v11 = *(_QWORD *)(*v6 + 16);
  v12 = *(_QWORD *)(*v6 + 24);
  if (v12 <= v11 || (a5 & 1) == 0)
  {
    v13 = v11 + 1;
    if ((a5 & 1) != 0)
    {
      sub_100A1B760(v13, a6);
    }
    else
    {
      if (v12 > v11)
      {
        result = (Swift::Int)sub_100A267B8(a6);
        goto LABEL_10;
      }
      sub_100A2D094(v13, a6);
    }
    v14 = *v6;
    Hasher.init(_seed:)(&__s1);
    sub_10001BBBC(v10, a2);
    Data.hash(into:)(&__s1, v10, a2);
    sub_10001BC14(v10, a2);
    Hasher._combine(_:)(a3);
    result = Hasher._finalize()();
    a4 = result & ~(-1 << *(_BYTE *)(v14 + 32));
    if (((*(_QWORD *)(v14 + 56 + ((a4 >> 3) & 0xFFFFFFFFFFFFF8)) >> a4) & 1) != 0)
      __asm { BR              X8 }
  }
LABEL_10:
  v15 = *v20;
  *(_QWORD *)(*v20 + 8 * (a4 >> 6) + 56) |= 1 << a4;
  v16 = *(_QWORD *)(v15 + 48) + 24 * a4;
  *(_QWORD *)v16 = v10;
  *(_QWORD *)(v16 + 8) = a2;
  *(_DWORD *)(v16 + 16) = a3;
  v17 = *(_QWORD *)(v15 + 16);
  v18 = __OFADD__(v17, 1);
  v19 = v17 + 1;
  if (v18)
  {
    __break(1u);
    JUMPOUT(0x100A24498);
  }
  *(_QWORD *)(v15 + 16) = v19;
  return result;
}

void *sub_100A24558()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  sub_10001A9A8(&qword_1010FA4D8);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_28;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
      {
        v9 = v20 + 2;
        if (v20 + 2 >= v13)
          goto LABEL_28;
        v21 = *(_QWORD *)(v6 + 8 * v9);
        if (!v21)
          break;
      }
    }
LABEL_27:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    v18 = v17[1];
    v19 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v19 = *v17;
    v19[1] = v18;
    result = (void *)swift_bridgeObjectRetain(v18);
  }
  v22 = v20 + 3;
  if (v22 >= v13)
    goto LABEL_28;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_100A24708()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  __int128 v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;

  v1 = v0;
  sub_10001A9A8(&qword_101110170);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v18 >= v13)
      goto LABEL_28;
    v19 = *(_QWORD *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      v9 = v18 + 1;
      if (v18 + 1 >= v13)
        goto LABEL_28;
      v19 = *(_QWORD *)(v6 + 8 * v9);
      if (!v19)
      {
        v9 = v18 + 2;
        if (v18 + 2 >= v13)
          goto LABEL_28;
        v19 = *(_QWORD *)(v6 + 8 * v9);
        if (!v19)
          break;
      }
    }
LABEL_27:
    v12 = (v19 - 1) & v19;
    v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = *(_OWORD *)(*(_QWORD *)(v2 + 48) + v16);
    *(_OWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    result = (void *)sub_10001BBBC(v17, *((unint64_t *)&v17 + 1));
  }
  v20 = v18 + 3;
  if (v20 >= v13)
    goto LABEL_28;
  v19 = *(_QWORD *)(v6 + 8 * v20);
  if (v19)
  {
    v9 = v20;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v19 = *(_QWORD *)(v6 + 8 * v9);
    ++v20;
    if (v19)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_100A248B8()
{
  return sub_100A25940((uint64_t (*)(_QWORD))&type metadata accessor for UUID, &qword_1010FA238);
}

void *sub_100A248CC()
{
  return sub_100A248EC(type metadata accessor for SharedBeaconRecord, &qword_101110090);
}

id sub_100A248E0()
{
  return sub_100A2578C(&qword_101110148);
}

void *sub_100A248EC(uint64_t (*a1)(_QWORD), uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *result;
  uint64_t v14;
  unint64_t v15;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;
  uint64_t v28;
  uint64_t *v29;

  v5 = v2;
  v6 = a1(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v28 - v8;
  sub_10001A9A8(a2);
  v10 = *v2;
  v11 = static _SetStorage.copy(original:)(*v2);
  v12 = v11;
  if (!*(_QWORD *)(v10 + 16))
  {
    result = (void *)swift_release(v10);
LABEL_30:
    *v5 = v12;
    return result;
  }
  v29 = v5;
  result = (void *)(v11 + 56);
  v14 = v10 + 56;
  v15 = (unint64_t)((1 << *(_BYTE *)(v12 + 32)) + 63) >> 6;
  if (v12 != v10 || (unint64_t)result >= v10 + 56 + 8 * v15)
    result = memmove(result, (const void *)(v10 + 56), 8 * v15);
  v17 = 0;
  *(_QWORD *)(v12 + 16) = *(_QWORD *)(v10 + 16);
  v18 = 1 << *(_BYTE *)(v10 + 32);
  v19 = -1;
  if (v18 < 64)
    v19 = ~(-1 << v18);
  v20 = v19 & *(_QWORD *)(v10 + 56);
  v21 = (unint64_t)(v18 + 63) >> 6;
  while (1)
  {
    if (v20)
    {
      v22 = __clz(__rbit64(v20));
      v20 &= v20 - 1;
      v23 = v22 | (v17 << 6);
      goto LABEL_12;
    }
    v25 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v25 >= v21)
      goto LABEL_28;
    v26 = *(_QWORD *)(v14 + 8 * v25);
    ++v17;
    if (!v26)
    {
      v17 = v25 + 1;
      if (v25 + 1 >= v21)
        goto LABEL_28;
      v26 = *(_QWORD *)(v14 + 8 * v17);
      if (!v26)
      {
        v17 = v25 + 2;
        if (v25 + 2 >= v21)
          goto LABEL_28;
        v26 = *(_QWORD *)(v14 + 8 * v17);
        if (!v26)
          break;
      }
    }
LABEL_27:
    v20 = (v26 - 1) & v26;
    v23 = __clz(__rbit64(v26)) + (v17 << 6);
LABEL_12:
    v24 = *(_QWORD *)(v7 + 72) * v23;
    sub_10005972C(*(_QWORD *)(v10 + 48) + v24, (uint64_t)v9, a1);
    result = (void *)sub_1000126EC((uint64_t)v9, *(_QWORD *)(v12 + 48) + v24, a1);
  }
  v27 = v25 + 3;
  if (v27 >= v21)
  {
LABEL_28:
    result = (void *)swift_release(v10);
    v5 = v29;
    goto LABEL_30;
  }
  v26 = *(_QWORD *)(v14 + 8 * v27);
  if (v26)
  {
    v17 = v27;
    goto LABEL_27;
  }
  while (1)
  {
    v17 = v27 + 1;
    if (__OFADD__(v27, 1))
      break;
    if (v17 >= v21)
      goto LABEL_28;
    v26 = *(_QWORD *)(v14 + 8 * v17);
    ++v27;
    if (v26)
      goto LABEL_27;
  }
LABEL_32:
  __break(1u);
  return result;
}

void sub_100A24B04()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;

  v1 = v0;
  sub_10001A9A8(&qword_10110AA48);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    swift_release();
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 56 + 8 * v7)
    memmove(v5, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v21 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v21 >= v13)
      goto LABEL_28;
    v22 = *(_QWORD *)(v6 + 8 * v21);
    ++v9;
    if (!v22)
    {
      v9 = v21 + 1;
      if (v21 + 1 >= v13)
        goto LABEL_28;
      v22 = *(_QWORD *)(v6 + 8 * v9);
      if (!v22)
      {
        v9 = v21 + 2;
        if (v21 + 2 >= v13)
          goto LABEL_28;
        v22 = *(_QWORD *)(v6 + 8 * v9);
        if (!v22)
          break;
      }
    }
LABEL_27:
    v12 = (v22 - 1) & v22;
    v15 = __clz(__rbit64(v22)) + (v9 << 6);
LABEL_12:
    v16 = 24 * v15;
    v17 = *(_QWORD *)(v2 + 48) + v16;
    v19 = *(_QWORD *)v17;
    v18 = *(_QWORD *)(v17 + 8);
    LOBYTE(v17) = *(_BYTE *)(v17 + 16);
    v20 = *(_QWORD *)(v4 + 48) + v16;
    *(_QWORD *)v20 = v19;
    *(_QWORD *)(v20 + 8) = v18;
    *(_BYTE *)(v20 + 16) = v17;
    swift_bridgeObjectRetain(v18);
  }
  v23 = v21 + 3;
  if (v23 >= v13)
    goto LABEL_28;
  v22 = *(_QWORD *)(v6 + 8 * v23);
  if (v22)
  {
    v9 = v23;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v22 = *(_QWORD *)(v6 + 8 * v9);
    ++v23;
    if (v22)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
}

void *sub_100A24CC0()
{
  return sub_100A262FC((uint64_t *)&unk_10111C3D0);
}

void *sub_100A24CCC()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  __int128 v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;

  v1 = v0;
  sub_10001A9A8((uint64_t *)&unk_1011100D0);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v18 >= v13)
      goto LABEL_28;
    v19 = *(_QWORD *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      v9 = v18 + 1;
      if (v18 + 1 >= v13)
        goto LABEL_28;
      v19 = *(_QWORD *)(v6 + 8 * v9);
      if (!v19)
      {
        v9 = v18 + 2;
        if (v18 + 2 >= v13)
          goto LABEL_28;
        v19 = *(_QWORD *)(v6 + 8 * v9);
        if (!v19)
          break;
      }
    }
LABEL_27:
    v12 = (v19 - 1) & v19;
    v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = *(_OWORD *)(*(_QWORD *)(v2 + 48) + v16);
    *(_OWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    result = (void *)sub_10001BBBC(v17, *((unint64_t *)&v17 + 1));
  }
  v20 = v18 + 3;
  if (v20 >= v13)
    goto LABEL_28;
  v19 = *(_QWORD *)(v6 + 8 * v20);
  if (v19)
  {
    v9 = v20;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v19 = *(_QWORD *)(v6 + 8 * v9);
    ++v20;
    if (v19)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

void sub_100A24E7C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;

  v1 = v0;
  sub_10001A9A8(&qword_10110AAD8);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    swift_release();
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 56 + 8 * v7)
    memmove(v5, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v21 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v21 >= v13)
      goto LABEL_28;
    v22 = *(_QWORD *)(v6 + 8 * v21);
    ++v9;
    if (!v22)
    {
      v9 = v21 + 1;
      if (v21 + 1 >= v13)
        goto LABEL_28;
      v22 = *(_QWORD *)(v6 + 8 * v9);
      if (!v22)
      {
        v9 = v21 + 2;
        if (v21 + 2 >= v13)
          goto LABEL_28;
        v22 = *(_QWORD *)(v6 + 8 * v9);
        if (!v22)
          break;
      }
    }
LABEL_27:
    v12 = (v22 - 1) & v22;
    v15 = __clz(__rbit64(v22)) + (v9 << 6);
LABEL_12:
    v16 = 24 * v15;
    v17 = *(_QWORD *)(v2 + 48) + v16;
    v19 = *(_QWORD *)(v17 + 8);
    v18 = *(_QWORD *)(v17 + 16);
    v20 = *(_QWORD *)(v4 + 48) + v16;
    *(_BYTE *)v20 = *(_BYTE *)v17;
    *(_QWORD *)(v20 + 8) = v19;
    *(_QWORD *)(v20 + 16) = v18;
    swift_bridgeObjectRetain(v18);
  }
  v23 = v21 + 3;
  if (v23 >= v13)
    goto LABEL_28;
  v22 = *(_QWORD *)(v6 + 8 * v23);
  if (v22)
  {
    v9 = v23;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v22 = *(_QWORD *)(v6 + 8 * v9);
    ++v23;
    if (v22)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
}

void *sub_100A25038()
{
  return sub_100A2649C(&qword_1010FA428);
}

id sub_100A25044()
{
  return sub_100A2578C((uint64_t *)&unk_10111C360);
}

void *sub_100A25050()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _OWORD *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;
  _OWORD v28[10];

  v1 = v0;
  sub_10001A9A8((uint64_t *)&unk_101110180);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v25 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v25 >= v13)
      goto LABEL_28;
    v26 = *(_QWORD *)(v6 + 8 * v25);
    ++v9;
    if (!v26)
    {
      v9 = v25 + 1;
      if (v25 + 1 >= v13)
        goto LABEL_28;
      v26 = *(_QWORD *)(v6 + 8 * v9);
      if (!v26)
      {
        v9 = v25 + 2;
        if (v25 + 2 >= v13)
          goto LABEL_28;
        v26 = *(_QWORD *)(v6 + 8 * v9);
        if (!v26)
          break;
      }
    }
LABEL_27:
    v12 = (v26 - 1) & v26;
    v15 = __clz(__rbit64(v26)) + (v9 << 6);
LABEL_12:
    v16 = 160 * v15;
    v17 = (_OWORD *)(*(_QWORD *)(v2 + 48) + v16);
    v18 = v17[2];
    v19 = v17[3];
    v20 = v17[5];
    v28[4] = v17[4];
    v28[5] = v20;
    v28[3] = v19;
    v21 = v17[6];
    v22 = v17[7];
    v23 = v17[9];
    v28[8] = v17[8];
    v28[9] = v23;
    v28[6] = v21;
    v28[7] = v22;
    v24 = v17[1];
    v28[0] = *v17;
    v28[1] = v24;
    v28[2] = v18;
    memmove((void *)(*(_QWORD *)(v4 + 48) + v16), v17, 0xA0uLL);
    result = sub_10008B118(v28);
  }
  v27 = v25 + 3;
  if (v27 >= v13)
    goto LABEL_28;
  v26 = *(_QWORD *)(v6 + 8 * v27);
  if (v26)
  {
    v9 = v27;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v27 + 1;
    if (__OFADD__(v27, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v26 = *(_QWORD *)(v6 + 8 * v9);
    ++v27;
    if (v26)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_100A2523C()
{
  return sub_100A25940((uint64_t (*)(_QWORD))&type metadata accessor for MACAddress, &qword_101110160);
}

void sub_100A25250()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  sub_10001A9A8((uint64_t *)&unk_101110220);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    swift_release();
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 56 + 8 * v7)
    memmove(v5, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_28;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
      {
        v9 = v20 + 2;
        if (v20 + 2 >= v13)
          goto LABEL_28;
        v21 = *(_QWORD *)(v6 + 8 * v9);
        if (!v21)
          break;
      }
    }
LABEL_27:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    v18 = v17[1];
    v19 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v19 = *v17;
    v19[1] = v18;
    swift_bridgeObjectRetain(v18);
  }
  v22 = v20 + 3;
  if (v22 >= v13)
    goto LABEL_28;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
}

void *sub_100A25400()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  _OWORD v23[2];
  uint64_t v24;

  v1 = v0;
  sub_10001A9A8(&qword_1010F9F20);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_28;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
      {
        v9 = v20 + 2;
        if (v20 + 2 >= v13)
          goto LABEL_28;
        v21 = *(_QWORD *)(v6 + 8 * v9);
        if (!v21)
          break;
      }
    }
LABEL_27:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 40 * v15;
    result = (void *)sub_10010F9DC(*(_QWORD *)(v2 + 48) + 40 * v15, (uint64_t)v23);
    v17 = *(_QWORD *)(v4 + 48) + v16;
    v18 = v23[0];
    v19 = v23[1];
    *(_QWORD *)(v17 + 32) = v24;
    *(_OWORD *)v17 = v18;
    *(_OWORD *)(v17 + 16) = v19;
  }
  v22 = v20 + 3;
  if (v22 >= v13)
    goto LABEL_28;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_100A255CC()
{
  return sub_100A262FC(&qword_101110008);
}

void sub_100A255D8()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;

  v1 = v0;
  sub_10001A9A8(&qword_1011100F0);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 56 + 8 * v7)
    memmove(v5, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v18 >= v13)
      goto LABEL_28;
    v19 = *(_QWORD *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      v9 = v18 + 1;
      if (v18 + 1 >= v13)
        goto LABEL_28;
      v19 = *(_QWORD *)(v6 + 8 * v9);
      if (!v19)
      {
        v9 = v18 + 2;
        if (v18 + 2 >= v13)
          goto LABEL_28;
        v19 = *(_QWORD *)(v6 + 8 * v9);
        if (!v19)
          break;
      }
    }
LABEL_27:
    v12 = (v19 - 1) & v19;
    v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    swift_bridgeObjectRetain(v17);
  }
  v20 = v18 + 3;
  if (v20 >= v13)
    goto LABEL_28;
  v19 = *(_QWORD *)(v6 + 8 * v20);
  if (v19)
  {
    v9 = v20;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v19 = *(_QWORD *)(v6 + 8 * v9);
    ++v20;
    if (v19)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
}

id sub_100A25780()
{
  return sub_100A2578C((uint64_t *)&unk_101110100);
}

id sub_100A2578C(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id result;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  void *v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;

  v2 = v1;
  sub_10001A9A8(a1);
  v3 = *v1;
  v4 = static _SetStorage.copy(original:)(*v1);
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_28:
    result = (id)swift_release(v3);
    *v2 = v5;
    return result;
  }
  result = (id)(v4 + 56);
  v7 = v3 + 56;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 56 + 8 * v8)
    result = memmove(result, (const void *)(v3 + 56), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 56);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v19 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v19 >= v14)
      goto LABEL_28;
    v20 = *(_QWORD *)(v7 + 8 * v19);
    ++v10;
    if (!v20)
    {
      v10 = v19 + 1;
      if (v19 + 1 >= v14)
        goto LABEL_28;
      v20 = *(_QWORD *)(v7 + 8 * v10);
      if (!v20)
      {
        v10 = v19 + 2;
        if (v19 + 2 >= v14)
          goto LABEL_28;
        v20 = *(_QWORD *)(v7 + 8 * v10);
        if (!v20)
          break;
      }
    }
LABEL_27:
    v13 = (v20 - 1) & v20;
    v16 = __clz(__rbit64(v20)) + (v10 << 6);
LABEL_12:
    v17 = 8 * v16;
    v18 = *(void **)(*(_QWORD *)(v3 + 48) + v17);
    *(_QWORD *)(*(_QWORD *)(v5 + 48) + v17) = v18;
    result = v18;
  }
  v21 = v19 + 3;
  if (v21 >= v14)
    goto LABEL_28;
  v20 = *(_QWORD *)(v7 + 8 * v21);
  if (v20)
  {
    v10 = v21;
    goto LABEL_27;
  }
  while (1)
  {
    v10 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v10 >= v14)
      goto LABEL_28;
    v20 = *(_QWORD *)(v7 + 8 * v10);
    ++v21;
    if (v20)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_100A2592C()
{
  return sub_100A25940((uint64_t (*)(_QWORD))&type metadata accessor for CorrelationIdentifier, &qword_1011100B0);
}

void *sub_100A25940(uint64_t (*a1)(_QWORD), uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *result;
  uint64_t v13;
  unint64_t v14;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  uint64_t *v28;

  v4 = v2;
  v5 = a1(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v27 - v7;
  sub_10001A9A8(a2);
  v9 = *v2;
  v10 = static _SetStorage.copy(original:)(*v2);
  v11 = v10;
  if (!*(_QWORD *)(v9 + 16))
  {
    result = (void *)swift_release(v9);
LABEL_30:
    *v4 = v11;
    return result;
  }
  v28 = v4;
  result = (void *)(v10 + 56);
  v13 = v9 + 56;
  v14 = (unint64_t)((1 << *(_BYTE *)(v11 + 32)) + 63) >> 6;
  if (v11 != v9 || (unint64_t)result >= v9 + 56 + 8 * v14)
    result = memmove(result, (const void *)(v9 + 56), 8 * v14);
  v16 = 0;
  *(_QWORD *)(v11 + 16) = *(_QWORD *)(v9 + 16);
  v17 = 1 << *(_BYTE *)(v9 + 32);
  v18 = -1;
  if (v17 < 64)
    v18 = ~(-1 << v17);
  v19 = v18 & *(_QWORD *)(v9 + 56);
  v20 = (unint64_t)(v17 + 63) >> 6;
  while (1)
  {
    if (v19)
    {
      v21 = __clz(__rbit64(v19));
      v19 &= v19 - 1;
      v22 = v21 | (v16 << 6);
      goto LABEL_12;
    }
    v24 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v24 >= v20)
      goto LABEL_28;
    v25 = *(_QWORD *)(v13 + 8 * v24);
    ++v16;
    if (!v25)
    {
      v16 = v24 + 1;
      if (v24 + 1 >= v20)
        goto LABEL_28;
      v25 = *(_QWORD *)(v13 + 8 * v16);
      if (!v25)
      {
        v16 = v24 + 2;
        if (v24 + 2 >= v20)
          goto LABEL_28;
        v25 = *(_QWORD *)(v13 + 8 * v16);
        if (!v25)
          break;
      }
    }
LABEL_27:
    v19 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v16 << 6);
LABEL_12:
    v23 = *(_QWORD *)(v6 + 72) * v22;
    (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v8, *(_QWORD *)(v9 + 48) + v23, v5);
    result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v6 + 32))(*(_QWORD *)(v11 + 48) + v23, v8, v5);
  }
  v26 = v24 + 3;
  if (v26 >= v20)
  {
LABEL_28:
    result = (void *)swift_release(v9);
    v4 = v28;
    goto LABEL_30;
  }
  v25 = *(_QWORD *)(v13 + 8 * v26);
  if (v25)
  {
    v16 = v26;
    goto LABEL_27;
  }
  while (1)
  {
    v16 = v26 + 1;
    if (__OFADD__(v26, 1))
      break;
    if (v16 >= v20)
      goto LABEL_28;
    v25 = *(_QWORD *)(v13 + 8 * v16);
    ++v26;
    if (v25)
      goto LABEL_27;
  }
LABEL_32:
  __break(1u);
  return result;
}

void *sub_100A25B64()
{
  return sub_100A262FC((uint64_t *)&unk_101110210);
}

void *sub_100A25B70(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *result;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;

  v2 = v1;
  sub_10001A9A8(a1);
  v3 = *v1;
  v4 = static _SetStorage.copy(original:)(*v1);
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_28:
    result = (void *)swift_release(v3);
    *v2 = v5;
    return result;
  }
  result = (void *)(v4 + 56);
  v7 = v3 + 56;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 56 + 8 * v8)
    result = memmove(result, (const void *)(v3 + 56), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 56);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v17 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v17 >= v14)
      goto LABEL_28;
    v18 = *(_QWORD *)(v7 + 8 * v17);
    ++v10;
    if (!v18)
    {
      v10 = v17 + 1;
      if (v17 + 1 >= v14)
        goto LABEL_28;
      v18 = *(_QWORD *)(v7 + 8 * v10);
      if (!v18)
      {
        v10 = v17 + 2;
        if (v17 + 2 >= v14)
          goto LABEL_28;
        v18 = *(_QWORD *)(v7 + 8 * v10);
        if (!v18)
          break;
      }
    }
LABEL_27:
    v13 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v10 << 6);
LABEL_12:
    *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v16) = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v16);
  }
  v19 = v17 + 3;
  if (v19 >= v14)
    goto LABEL_28;
  v18 = *(_QWORD *)(v7 + 8 * v19);
  if (v18)
  {
    v10 = v19;
    goto LABEL_27;
  }
  while (1)
  {
    v10 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v10 >= v14)
      goto LABEL_28;
    v18 = *(_QWORD *)(v7 + 8 * v10);
    ++v19;
    if (v18)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_100A25CFC()
{
  return sub_100A248EC(type metadata accessor for BeaconIdentifier, &qword_10110A900);
}

void *sub_100A25D10()
{
  return sub_100A262FC((uint64_t *)&unk_101110120);
}

void *sub_100A25D1C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  v1 = v0;
  sub_10001A9A8(&qword_101110030);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release();
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      v9 = v16 + 1;
      if (v16 + 1 >= v13)
        goto LABEL_28;
      v17 = *(_QWORD *)(v6 + 8 * v9);
      if (!v17)
      {
        v9 = v16 + 2;
        if (v16 + 2 >= v13)
          goto LABEL_28;
        v17 = *(_QWORD *)(v6 + 8 * v9);
        if (!v17)
          break;
      }
    }
LABEL_27:
    v12 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(_DWORD *)(*(_QWORD *)(v4 + 48) + 4 * v15) = *(_DWORD *)(*(_QWORD *)(v2 + 48) + 4 * v15);
  }
  v18 = v16 + 3;
  if (v18 >= v13)
    goto LABEL_28;
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v9);
    ++v18;
    if (v17)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_100A25EB0()
{
  return sub_100A262FC(&qword_1011101A8);
}

void sub_100A25EBC()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  int64_t v28;
  unint64_t v29;
  int64_t v30;
  uint64_t *v31;

  sub_10001A9A8(&qword_101110178);
  v31 = v0;
  v1 = *v0;
  v2 = static _SetStorage.copy(original:)(*v0);
  v3 = v2;
  if (!*(_QWORD *)(v1 + 16))
  {
LABEL_28:
    swift_release();
    *v31 = v3;
    return;
  }
  v4 = (void *)(v2 + 56);
  v5 = v1 + 56;
  v6 = (unint64_t)((1 << *(_BYTE *)(v3 + 32)) + 63) >> 6;
  if (v3 != v1 || (unint64_t)v4 >= v1 + 56 + 8 * v6)
    memmove(v4, (const void *)(v1 + 56), 8 * v6);
  v8 = 0;
  *(_QWORD *)(v3 + 16) = *(_QWORD *)(v1 + 16);
  v9 = 1 << *(_BYTE *)(v1 + 32);
  v10 = -1;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  v11 = v10 & *(_QWORD *)(v1 + 56);
  v12 = (unint64_t)(v9 + 63) >> 6;
  while (1)
  {
    if (v11)
    {
      v13 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v14 = v13 | (v8 << 6);
      goto LABEL_12;
    }
    v28 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v28 >= v12)
      goto LABEL_28;
    v29 = *(_QWORD *)(v5 + 8 * v28);
    ++v8;
    if (!v29)
    {
      v8 = v28 + 1;
      if (v28 + 1 >= v12)
        goto LABEL_28;
      v29 = *(_QWORD *)(v5 + 8 * v8);
      if (!v29)
      {
        v8 = v28 + 2;
        if (v28 + 2 >= v12)
          goto LABEL_28;
        v29 = *(_QWORD *)(v5 + 8 * v8);
        if (!v29)
          break;
      }
    }
LABEL_27:
    v11 = (v29 - 1) & v29;
    v14 = __clz(__rbit64(v29)) + (v8 << 6);
LABEL_12:
    v15 = 88 * v14;
    v16 = *(_QWORD *)(v1 + 48) + v15;
    v17 = *(_QWORD *)(v16 + 8);
    v18 = *(_QWORD *)(v16 + 16);
    v19 = *(_QWORD *)(v16 + 24);
    v20 = *(_BYTE *)(v16 + 32);
    v21 = *(_QWORD *)(v16 + 40);
    v22 = *(_QWORD *)(v16 + 80);
    v23 = *(_QWORD *)(v3 + 48) + v15;
    v24 = *(_OWORD *)(v16 + 48);
    v25 = *(_OWORD *)(v16 + 64);
    *(_QWORD *)v23 = *(_QWORD *)v16;
    *(_QWORD *)(v23 + 8) = v17;
    *(_QWORD *)(v23 + 16) = v18;
    *(_QWORD *)(v23 + 24) = v19;
    *(_BYTE *)(v23 + 32) = v20;
    *(_QWORD *)(v23 + 40) = v21;
    *(_OWORD *)(v23 + 48) = v24;
    *(_OWORD *)(v23 + 64) = v25;
    *(_QWORD *)(v23 + 80) = v22;
    v26 = v24;
    v27 = v25;
    swift_bridgeObjectRetain(v22);
    swift_bridgeObjectRetain(v17);
    swift_bridgeObjectRetain(v19);
    swift_bridgeObjectRetain(v26);
    swift_bridgeObjectRetain(v27);
  }
  v30 = v28 + 3;
  if (v30 >= v12)
    goto LABEL_28;
  v29 = *(_QWORD *)(v5 + 8 * v30);
  if (v29)
  {
    v8 = v30;
    goto LABEL_27;
  }
  while (1)
  {
    v8 = v30 + 1;
    if (__OFADD__(v30, 1))
      break;
    if (v8 >= v12)
      goto LABEL_28;
    v29 = *(_QWORD *)(v5 + 8 * v8);
    ++v30;
    if (v29)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
}

void sub_100A260D8()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  __int128 v24;

  v1 = v0;
  sub_10001A9A8((uint64_t *)&unk_101110070);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    swift_release();
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 56 + 8 * v7)
    memmove(v5, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v21 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v21 >= v13)
      goto LABEL_28;
    v22 = *(_QWORD *)(v6 + 8 * v21);
    ++v9;
    if (!v22)
    {
      v9 = v21 + 1;
      if (v21 + 1 >= v13)
        goto LABEL_28;
      v22 = *(_QWORD *)(v6 + 8 * v9);
      if (!v22)
      {
        v9 = v21 + 2;
        if (v21 + 2 >= v13)
          goto LABEL_28;
        v22 = *(_QWORD *)(v6 + 8 * v9);
        if (!v22)
          break;
      }
    }
LABEL_27:
    v12 = (v22 - 1) & v22;
    v15 = __clz(__rbit64(v22)) + (v9 << 6);
LABEL_12:
    v16 = 40 * v15;
    v17 = *(_QWORD *)(v2 + 48) + v16;
    v18 = *(_QWORD *)(v17 + 24);
    v19 = *(_QWORD *)(v17 + 32);
    v20 = *(_QWORD *)(v4 + 48) + v16;
    v24 = *(_OWORD *)(v17 + 8);
    *(_QWORD *)v20 = *(_QWORD *)v17;
    *(_OWORD *)(v20 + 8) = v24;
    *(_QWORD *)(v20 + 24) = v18;
    *(_QWORD *)(v20 + 32) = v19;
    swift_bridgeObjectRetain(v24);
    swift_bridgeObjectRetain(*((_QWORD *)&v24 + 1));
    swift_bridgeObjectRetain(v19);
  }
  v23 = v21 + 3;
  if (v23 >= v13)
    goto LABEL_28;
  v22 = *(_QWORD *)(v6 + 8 * v23);
  if (v22)
  {
    v9 = v23;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v22 = *(_QWORD *)(v6 + 8 * v9);
    ++v23;
    if (v22)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
}

void *sub_100A262C0()
{
  return sub_100A262FC((uint64_t *)&unk_10111C080);
}

void *sub_100A262CC()
{
  return sub_100A262FC(&qword_101110140);
}

void *sub_100A262D8()
{
  return sub_100A262FC((uint64_t *)&unk_10111C350);
}

id sub_100A262E4()
{
  return sub_100A2578C((uint64_t *)&unk_10110FFB0);
}

void *sub_100A262F0()
{
  return sub_100A262FC((uint64_t *)&unk_10110FF50);
}

void *sub_100A262FC(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *result;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;

  v2 = v1;
  sub_10001A9A8(a1);
  v3 = *v1;
  v4 = static _SetStorage.copy(original:)(*v1);
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_28:
    result = (void *)swift_release(v3);
    *v2 = v5;
    return result;
  }
  result = (void *)(v4 + 56);
  v7 = v3 + 56;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 56 + 8 * v8)
    result = memmove(result, (const void *)(v3 + 56), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 56);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v17 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v17 >= v14)
      goto LABEL_28;
    v18 = *(_QWORD *)(v7 + 8 * v17);
    ++v10;
    if (!v18)
    {
      v10 = v17 + 1;
      if (v17 + 1 >= v14)
        goto LABEL_28;
      v18 = *(_QWORD *)(v7 + 8 * v10);
      if (!v18)
      {
        v10 = v17 + 2;
        if (v17 + 2 >= v14)
          goto LABEL_28;
        v18 = *(_QWORD *)(v7 + 8 * v10);
        if (!v18)
          break;
      }
    }
LABEL_27:
    v13 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v10 << 6);
LABEL_12:
    *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v16) = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v16);
    result = (void *)swift_retain();
  }
  v19 = v17 + 3;
  if (v19 >= v14)
    goto LABEL_28;
  v18 = *(_QWORD *)(v7 + 8 * v19);
  if (v18)
  {
    v10 = v19;
    goto LABEL_27;
  }
  while (1)
  {
    v10 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v10 >= v14)
      goto LABEL_28;
    v18 = *(_QWORD *)(v7 + 8 * v10);
    ++v19;
    if (v18)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_100A2649C(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *result;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;

  v2 = v1;
  sub_10001A9A8(a1);
  v3 = *v1;
  v4 = static _SetStorage.copy(original:)(*v1);
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_28:
    result = (void *)swift_release(v3);
    *v2 = v5;
    return result;
  }
  result = (void *)(v4 + 56);
  v7 = v3 + 56;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 56 + 8 * v8)
    result = memmove(result, (const void *)(v3 + 56), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 56);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v17 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v17 >= v14)
      goto LABEL_28;
    v18 = *(_QWORD *)(v7 + 8 * v17);
    ++v10;
    if (!v18)
    {
      v10 = v17 + 1;
      if (v17 + 1 >= v14)
        goto LABEL_28;
      v18 = *(_QWORD *)(v7 + 8 * v10);
      if (!v18)
      {
        v10 = v17 + 2;
        if (v17 + 2 >= v14)
          goto LABEL_28;
        v18 = *(_QWORD *)(v7 + 8 * v10);
        if (!v18)
          break;
      }
    }
LABEL_27:
    v13 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v10 << 6);
LABEL_12:
    *(_BYTE *)(*(_QWORD *)(v5 + 48) + v16) = *(_BYTE *)(*(_QWORD *)(v3 + 48) + v16);
  }
  v19 = v17 + 3;
  if (v19 >= v14)
    goto LABEL_28;
  v18 = *(_QWORD *)(v7 + 8 * v19);
  if (v18)
  {
    v10 = v19;
    goto LABEL_27;
  }
  while (1)
  {
    v10 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v10 >= v14)
      goto LABEL_28;
    v18 = *(_QWORD *)(v7 + 8 * v10);
    ++v19;
    if (v18)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_100A26624()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  v1 = v0;
  sub_10001A9A8(&qword_10110AAB8);
  v2 = *v0;
  v3 = static _SetStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_28:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 56);
  v6 = v2 + 56;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      v9 = v16 + 1;
      if (v16 + 1 >= v13)
        goto LABEL_28;
      v17 = *(_QWORD *)(v6 + 8 * v9);
      if (!v17)
      {
        v9 = v16 + 2;
        if (v16 + 2 >= v13)
          goto LABEL_28;
        v17 = *(_QWORD *)(v6 + 8 * v9);
        if (!v17)
          break;
      }
    }
LABEL_27:
    v12 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v15) = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
  }
  v18 = v16 + 3;
  if (v18 >= v13)
    goto LABEL_28;
  v17 = *(_QWORD *)(v6 + 8 * v18);
  if (v17)
  {
    v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    v9 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v9 >= v13)
      goto LABEL_28;
    v17 = *(_QWORD *)(v6 + 8 * v9);
    ++v18;
    if (v17)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_100A267B8(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *result;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v2 = v1;
  sub_10001A9A8(a1);
  v3 = *v1;
  v4 = static _SetStorage.copy(original:)(*v1);
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_28:
    result = (void *)swift_release(v3);
    *v2 = v5;
    return result;
  }
  result = (void *)(v4 + 56);
  v7 = v3 + 56;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 56 + 8 * v8)
    result = memmove(result, (const void *)(v3 + 56), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 56);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v22 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v14)
      goto LABEL_28;
    v23 = *(_QWORD *)(v7 + 8 * v22);
    ++v10;
    if (!v23)
    {
      v10 = v22 + 1;
      if (v22 + 1 >= v14)
        goto LABEL_28;
      v23 = *(_QWORD *)(v7 + 8 * v10);
      if (!v23)
      {
        v10 = v22 + 2;
        if (v22 + 2 >= v14)
          goto LABEL_28;
        v23 = *(_QWORD *)(v7 + 8 * v10);
        if (!v23)
          break;
      }
    }
LABEL_27:
    v13 = (v23 - 1) & v23;
    v16 = __clz(__rbit64(v23)) + (v10 << 6);
LABEL_12:
    v17 = 24 * v16;
    v18 = *(_QWORD *)(v3 + 48) + v17;
    v19 = *(_QWORD *)v18;
    v20 = *(_QWORD *)(v18 + 8);
    LODWORD(v18) = *(_DWORD *)(v18 + 16);
    v21 = *(_QWORD *)(v5 + 48) + v17;
    *(_QWORD *)v21 = v19;
    *(_QWORD *)(v21 + 8) = v20;
    *(_DWORD *)(v21 + 16) = v18;
    result = (void *)sub_10001BBBC(v19, v20);
  }
  v24 = v22 + 3;
  if (v24 >= v14)
    goto LABEL_28;
  v23 = *(_QWORD *)(v7 + 8 * v24);
  if (v23)
  {
    v10 = v24;
    goto LABEL_27;
  }
  while (1)
  {
    v10 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v10 >= v14)
      goto LABEL_28;
    v23 = *(_QWORD *)(v7 + 8 * v10);
    ++v24;
    if (v23)
      goto LABEL_27;
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_100A2696C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t *v16;
  uint64_t v17[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_10001A9A8(&qword_101110238);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  if (!*(_QWORD *)(v3 + 16))
  {
    result = swift_release(v3);
    goto LABEL_26;
  }
  v16 = v2;
  v6 = 1 << *(_BYTE *)(v3 + 32);
  if (v6 < 64)
    v7 = ~(-1 << v6);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(v3 + 56);
  v9 = (unint64_t)(v6 + 63) >> 6;
  swift_retain();
  if (v8)
  {
    v10 = __clz(__rbit64(v8));
    goto LABEL_23;
  }
  if (v9 > 1)
  {
    v11 = *(_QWORD *)(v3 + 64);
    v12 = 1;
    if (v11)
      goto LABEL_22;
    v12 = 2;
    if (v9 > 2)
    {
      v11 = *(_QWORD *)(v3 + 72);
      if (v11)
        goto LABEL_22;
      v12 = 3;
      if (v9 > 3)
      {
        v11 = *(_QWORD *)(v3 + 80);
        if (!v11)
        {
          v13 = 4;
          if (v9 > 4)
          {
            v11 = *(_QWORD *)(v3 + 88);
            if (v11)
            {
              v12 = 4;
              goto LABEL_22;
            }
            while (1)
            {
              v12 = v13 + 1;
              if (__OFADD__(v13, 1))
              {
                __break(1u);
                JUMPOUT(0x100A26D10);
              }
              if (v12 >= v9)
                break;
              v11 = *(_QWORD *)(v3 + 56 + 8 * v12);
              ++v13;
              if (v11)
                goto LABEL_22;
            }
          }
          goto LABEL_24;
        }
LABEL_22:
        v10 = __clz(__rbit64(v11)) + (v12 << 6);
LABEL_23:
        v14 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 48) + v10);
        Hasher.init(_seed:)(v17);
        __asm { BR              X8 }
      }
    }
  }
LABEL_24:
  result = swift_release_n(v3, 2);
  v2 = v16;
LABEL_26:
  *v2 = v5;
  return result;
}

uint64_t sub_100A26D34(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t *v31;
  int64_t v32;
  _QWORD v33[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_10001A9A8(&qword_1010FA4D8);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  v6 = v5;
  if (!*(_QWORD *)(v3 + 16))
  {
    result = swift_release(v3);
LABEL_38:
    *v2 = v6;
    return result;
  }
  v7 = 1 << *(_BYTE *)(v3 + 32);
  v8 = v3 + 56;
  if (v7 < 64)
    v9 = ~(-1 << v7);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v3 + 56);
  v31 = v2;
  v32 = (unint64_t)(v7 + 63) >> 6;
  v11 = v5 + 56;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v17 = v16 | (v13 << 6);
      goto LABEL_27;
    }
    v18 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v18 >= v32)
      goto LABEL_36;
    v19 = *(_QWORD *)(v8 + 8 * v18);
    ++v13;
    if (!v19)
    {
      v13 = v18 + 1;
      if (v18 + 1 >= v32)
        goto LABEL_36;
      v19 = *(_QWORD *)(v8 + 8 * v13);
      if (!v19)
      {
        v13 = v18 + 2;
        if (v18 + 2 >= v32)
          goto LABEL_36;
        v19 = *(_QWORD *)(v8 + 8 * v13);
        if (!v19)
          break;
      }
    }
LABEL_26:
    v10 = (v19 - 1) & v19;
    v17 = __clz(__rbit64(v19)) + (v13 << 6);
LABEL_27:
    v21 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v17);
    v22 = *v21;
    v23 = v21[1];
    Hasher.init(_seed:)(v33);
    swift_bridgeObjectRetain(v23);
    String.hash(into:)(v33, v22, v23);
    result = Hasher._finalize()();
    v24 = -1 << *(_BYTE *)(v6 + 32);
    v25 = result & ~v24;
    v26 = v25 >> 6;
    if (((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6))) != 0)
    {
      v14 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v24) >> 6;
      do
      {
        if (++v26 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v29 = v26 == v28;
        if (v26 == v28)
          v26 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v11 + 8 * v26);
      }
      while (v30 == -1);
      v14 = __clz(__rbit64(~v30)) + (v26 << 6);
    }
    *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    v15 = (_QWORD *)(*(_QWORD *)(v6 + 48) + 16 * v14);
    *v15 = v22;
    v15[1] = v23;
    ++*(_QWORD *)(v6 + 16);
  }
  v20 = v18 + 3;
  if (v20 >= v32)
  {
LABEL_36:
    result = swift_release_n(v3, 2);
    v2 = v31;
    goto LABEL_38;
  }
  v19 = *(_QWORD *)(v8 + 8 * v20);
  if (v19)
  {
    v13 = v20;
    goto LABEL_26;
  }
  while (1)
  {
    v13 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v13 >= v32)
      goto LABEL_36;
    v19 = *(_QWORD *)(v8 + 8 * v13);
    ++v20;
    if (v19)
      goto LABEL_26;
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t sub_100A26FE0(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  uint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t *v31;
  int64_t v32;
  _QWORD v33[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_10001A9A8(&qword_101110170);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  v6 = v5;
  if (!*(_QWORD *)(v3 + 16))
  {
    result = swift_release(v3);
LABEL_38:
    *v2 = v6;
    return result;
  }
  v7 = 1 << *(_BYTE *)(v3 + 32);
  v8 = v3 + 56;
  if (v7 < 64)
    v9 = ~(-1 << v7);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v3 + 56);
  v31 = v2;
  v32 = (unint64_t)(v7 + 63) >> 6;
  v11 = v5 + 56;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v17 = v16 | (v13 << 6);
      goto LABEL_27;
    }
    v18 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v18 >= v32)
      goto LABEL_36;
    v19 = *(_QWORD *)(v8 + 8 * v18);
    ++v13;
    if (!v19)
    {
      v13 = v18 + 1;
      if (v18 + 1 >= v32)
        goto LABEL_36;
      v19 = *(_QWORD *)(v8 + 8 * v13);
      if (!v19)
      {
        v13 = v18 + 2;
        if (v18 + 2 >= v32)
          goto LABEL_36;
        v19 = *(_QWORD *)(v8 + 8 * v13);
        if (!v19)
          break;
      }
    }
LABEL_26:
    v10 = (v19 - 1) & v19;
    v17 = __clz(__rbit64(v19)) + (v13 << 6);
LABEL_27:
    v21 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v17);
    v22 = *v21;
    v23 = v21[1];
    Hasher.init(_seed:)(v33);
    sub_10001BBBC(v22, v23);
    sub_10001BBBC(v22, v23);
    Data.hash(into:)(v33, v22, v23);
    sub_10001BC14(v22, v23);
    result = Hasher._finalize()();
    v24 = -1 << *(_BYTE *)(v6 + 32);
    v25 = result & ~v24;
    v26 = v25 >> 6;
    if (((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6))) != 0)
    {
      v14 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v24) >> 6;
      do
      {
        if (++v26 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v29 = v26 == v28;
        if (v26 == v28)
          v26 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v11 + 8 * v26);
      }
      while (v30 == -1);
      v14 = __clz(__rbit64(~v30)) + (v26 << 6);
    }
    *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    v15 = (uint64_t *)(*(_QWORD *)(v6 + 48) + 16 * v14);
    *v15 = v22;
    v15[1] = v23;
    ++*(_QWORD *)(v6 + 16);
  }
  v20 = v18 + 3;
  if (v20 >= v32)
  {
LABEL_36:
    result = swift_release_n(v3, 2);
    v2 = v31;
    goto LABEL_38;
  }
  v19 = *(_QWORD *)(v8 + 8 * v20);
  if (v19)
  {
    v13 = v20;
    goto LABEL_26;
  }
  while (1)
  {
    v13 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v13 >= v32)
      goto LABEL_36;
    v19 = *(_QWORD *)(v8 + 8 * v13);
    ++v20;
    if (v19)
      goto LABEL_26;
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t sub_100A272A8(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  unsigned __int8 v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t *v28;

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_10001A9A8((uint64_t *)&unk_10110FF80);
  result = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  v6 = result;
  if (!*(_QWORD *)(v3 + 16))
  {
    result = swift_release(v3);
LABEL_38:
    *v2 = v6;
    return result;
  }
  v28 = v2;
  v7 = 0;
  v8 = v3 + 56;
  v9 = 1 << *(_BYTE *)(v3 + 32);
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v3 + 56);
  v12 = (unint64_t)(v9 + 63) >> 6;
  v13 = result + 56;
  while (1)
  {
    if (v11)
    {
      v15 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v16 = v15 | (v7 << 6);
      goto LABEL_27;
    }
    v17 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v12)
      goto LABEL_36;
    v18 = *(_QWORD *)(v8 + 8 * v17);
    ++v7;
    if (!v18)
    {
      v7 = v17 + 1;
      if (v17 + 1 >= v12)
        goto LABEL_36;
      v18 = *(_QWORD *)(v8 + 8 * v7);
      if (!v18)
      {
        v7 = v17 + 2;
        if (v17 + 2 >= v12)
          goto LABEL_36;
        v18 = *(_QWORD *)(v8 + 8 * v7);
        if (!v18)
          break;
      }
    }
LABEL_26:
    v11 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v7 << 6);
LABEL_27:
    v20 = *(_BYTE *)(*(_QWORD *)(v3 + 48) + v16);
    result = static Hasher._hash(seed:bytes:count:)(*(_QWORD *)(v6 + 40), v20, 1);
    v21 = -1 << *(_BYTE *)(v6 + 32);
    v22 = result & ~v21;
    v23 = v22 >> 6;
    if (((-1 << v22) & ~*(_QWORD *)(v13 + 8 * (v22 >> 6))) != 0)
    {
      v14 = __clz(__rbit64((-1 << v22) & ~*(_QWORD *)(v13 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v24 = 0;
      v25 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v26 = v23 == v25;
        if (v23 == v25)
          v23 = 0;
        v24 |= v26;
        v27 = *(_QWORD *)(v13 + 8 * v23);
      }
      while (v27 == -1);
      v14 = __clz(__rbit64(~v27)) + (v23 << 6);
    }
    *(_QWORD *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    *(_BYTE *)(*(_QWORD *)(v6 + 48) + v14) = v20;
    ++*(_QWORD *)(v6 + 16);
  }
  v19 = v17 + 3;
  if (v19 >= v12)
  {
LABEL_36:
    result = swift_release(v3);
    v2 = v28;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v8 + 8 * v19);
  if (v18)
  {
    v7 = v19;
    goto LABEL_26;
  }
  while (1)
  {
    v7 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v7 >= v12)
      goto LABEL_36;
    v18 = *(_QWORD *)(v8 + 8 * v7);
    ++v19;
    if (v18)
      goto LABEL_26;
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t sub_100A2750C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  int *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t result;
  int64_t v16;
  uint64_t (*v17)(uint64_t);
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(uint64_t);
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char v41;
  unint64_t v42;
  BOOL v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  int64_t v48;
  uint64_t v49;
  uint64_t v50;
  int64_t v51;
  _QWORD v52[9];

  v2 = v1;
  v4 = (int *)type metadata accessor for BeaconNamingRecord(0);
  v50 = *((_QWORD *)v4 - 1);
  __chkstk_darwin(v4);
  v6 = (uint64_t *)((char *)&v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = *v1;
  if (*(_QWORD *)(*v1 + 24) > a1)
    a1 = *(_QWORD *)(*v1 + 24);
  sub_10001A9A8(&qword_101110088);
  v8 = static _SetStorage.resize(original:capacity:move:)(v7, a1, 0);
  v9 = v8;
  if (!*(_QWORD *)(v7 + 16))
  {
    result = swift_release();
LABEL_40:
    *v2 = v9;
    return result;
  }
  v10 = 1 << *(_BYTE *)(v7 + 32);
  v11 = *(_QWORD *)(v7 + 56);
  v46 = v2;
  v47 = v7 + 56;
  if (v10 < 64)
    v12 = ~(-1 << v10);
  else
    v12 = -1;
  v13 = v12 & v11;
  v48 = (unint64_t)(v10 + 63) >> 6;
  v14 = v8 + 56;
  result = swift_retain();
  v16 = 0;
  v17 = type metadata accessor for BeaconNamingRecord;
  v49 = v7;
  while (1)
  {
    if (v13)
    {
      v19 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v51 = v16;
      v20 = v19 | (v16 << 6);
      goto LABEL_26;
    }
    v21 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
LABEL_41:
      __break(1u);
      goto LABEL_42;
    }
    if (v21 >= v48)
      goto LABEL_38;
    v22 = *(_QWORD *)(v47 + 8 * v21);
    v23 = v16 + 1;
    if (!v22)
    {
      v23 = v16 + 2;
      if (v16 + 2 >= v48)
        goto LABEL_38;
      v22 = *(_QWORD *)(v47 + 8 * v23);
      if (!v22)
      {
        v23 = v16 + 3;
        if (v16 + 3 >= v48)
          goto LABEL_38;
        v22 = *(_QWORD *)(v47 + 8 * v23);
        if (!v22)
          break;
      }
    }
LABEL_25:
    v13 = (v22 - 1) & v22;
    v51 = v23;
    v20 = __clz(__rbit64(v22)) + (v23 << 6);
LABEL_26:
    v25 = *(_QWORD *)(v50 + 72);
    v26 = v17;
    sub_10005972C(*(_QWORD *)(v7 + 48) + v25 * v20, (uint64_t)v6, v17);
    v27 = v9;
    Hasher.init(_seed:)(v52);
    v28 = *v6;
    v29 = v6[1];
    sub_10001BBBC(*v6, v29);
    Data.hash(into:)(v52, v28, v29);
    sub_10001BC14(v28, v29);
    v30 = type metadata accessor for UUID(0);
    v31 = sub_100006204(&qword_1010F98B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    dispatch thunk of Hashable.hash(into:)(v52, v30, v31);
    dispatch thunk of Hashable.hash(into:)(v52, v30, v31);
    Hasher._combine(_:)(*(uint64_t *)((char *)v6 + v4[7]));
    v32 = (uint64_t *)((char *)v6 + v4[8]);
    v33 = *v32;
    v34 = v32[1];
    swift_bridgeObjectRetain(v34);
    String.hash(into:)(v52, v33, v34);
    swift_bridgeObjectRelease();
    v35 = (uint64_t *)((char *)v6 + v4[9]);
    v36 = v35[1];
    if (v36)
    {
      v37 = *v35;
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain(v36);
      String.hash(into:)(v52, v37, v36);
      swift_bridgeObjectRelease();
    }
    else
    {
      Hasher._combine(_:)(0);
    }
    result = Hasher._finalize()();
    v9 = v27;
    v38 = -1 << *(_BYTE *)(v27 + 32);
    v39 = result & ~v38;
    v40 = v39 >> 6;
    v7 = v49;
    v17 = v26;
    if (((-1 << v39) & ~*(_QWORD *)(v14 + 8 * (v39 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v39) & ~*(_QWORD *)(v14 + 8 * (v39 >> 6)))) | v39 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v41 = 0;
      v42 = (unint64_t)(63 - v38) >> 6;
      do
      {
        if (++v40 == v42 && (v41 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        v43 = v40 == v42;
        if (v40 == v42)
          v40 = 0;
        v41 |= v43;
        v44 = *(_QWORD *)(v14 + 8 * v40);
      }
      while (v44 == -1);
      v18 = __clz(__rbit64(~v44)) + (v40 << 6);
    }
    *(_QWORD *)(v14 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    result = sub_1000126EC((uint64_t)v6, *(_QWORD *)(v27 + 48) + v18 * v25, v26);
    ++*(_QWORD *)(v27 + 16);
    v16 = v51;
  }
  v24 = v16 + 4;
  if (v16 + 4 >= v48)
  {
LABEL_38:
    result = swift_release_n(v7, 2);
    v2 = v46;
    goto LABEL_40;
  }
  v22 = *(_QWORD *)(v47 + 8 * v24);
  if (v22)
  {
    v23 = v16 + 4;
    goto LABEL_25;
  }
  while (1)
  {
    v23 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v23 >= v48)
      goto LABEL_38;
    v22 = *(_QWORD *)(v47 + 8 * v23);
    ++v24;
    if (v22)
      goto LABEL_25;
  }
LABEL_42:
  __break(1u);
  return result;
}

uint64_t sub_100A2794C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  Swift::UInt v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  int64_t v32;
  _QWORD v33[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_10001A9A8(&qword_10110AA48);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  v6 = v5;
  if (!*(_QWORD *)(v3 + 16))
  {
    result = swift_release();
LABEL_38:
    *v2 = v6;
    return result;
  }
  v7 = 1 << *(_BYTE *)(v3 + 32);
  v31 = v3 + 56;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(v3 + 56);
  v32 = (unint64_t)(v7 + 63) >> 6;
  v10 = v5 + 56;
  result = swift_retain();
  v12 = 0;
  while (1)
  {
    if (v9)
    {
      v15 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v16 = v15 | (v12 << 6);
      goto LABEL_27;
    }
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v32)
      goto LABEL_36;
    v18 = *(_QWORD *)(v31 + 8 * v17);
    ++v12;
    if (!v18)
    {
      v12 = v17 + 1;
      if (v17 + 1 >= v32)
        goto LABEL_36;
      v18 = *(_QWORD *)(v31 + 8 * v12);
      if (!v18)
      {
        v12 = v17 + 2;
        if (v17 + 2 >= v32)
          goto LABEL_36;
        v18 = *(_QWORD *)(v31 + 8 * v12);
        if (!v18)
          break;
      }
    }
LABEL_26:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v12 << 6);
LABEL_27:
    v20 = *(_QWORD *)(v3 + 48) + 24 * v16;
    v21 = *(_QWORD *)v20;
    v22 = *(_QWORD *)(v20 + 8);
    v23 = *(unsigned __int8 *)(v20 + 16);
    Hasher.init(_seed:)(v33);
    swift_bridgeObjectRetain(v22);
    String.hash(into:)(v33, v21, v22);
    Hasher._combine(_:)(v23);
    result = Hasher._finalize()();
    v24 = -1 << *(_BYTE *)(v6 + 32);
    v25 = result & ~v24;
    v26 = v25 >> 6;
    if (((-1 << v25) & ~*(_QWORD *)(v10 + 8 * (v25 >> 6))) != 0)
    {
      v13 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v10 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v24) >> 6;
      do
      {
        if (++v26 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v29 = v26 == v28;
        if (v26 == v28)
          v26 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v10 + 8 * v26);
      }
      while (v30 == -1);
      v13 = __clz(__rbit64(~v30)) + (v26 << 6);
    }
    *(_QWORD *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
    v14 = *(_QWORD *)(v6 + 48) + 24 * v13;
    *(_QWORD *)v14 = v21;
    *(_QWORD *)(v14 + 8) = v22;
    *(_BYTE *)(v14 + 16) = v23;
    ++*(_QWORD *)(v6 + 16);
  }
  v19 = v17 + 3;
  if (v19 >= v32)
  {
LABEL_36:
    result = swift_release_n(v3, 2);
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v31 + 8 * v19);
  if (v18)
  {
    v12 = v19;
    goto LABEL_26;
  }
  while (1)
  {
    v12 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v12 >= v32)
      goto LABEL_36;
    v18 = *(_QWORD *)(v31 + 8 * v12);
    ++v19;
    if (v18)
      goto LABEL_26;
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t sub_100A27C2C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  uint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t *v31;
  int64_t v32;
  _QWORD v33[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_10001A9A8((uint64_t *)&unk_1011100D0);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  v6 = v5;
  if (!*(_QWORD *)(v3 + 16))
  {
    result = swift_release();
LABEL_38:
    *v2 = v6;
    return result;
  }
  v7 = 1 << *(_BYTE *)(v3 + 32);
  v8 = v3 + 56;
  if (v7 < 64)
    v9 = ~(-1 << v7);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v3 + 56);
  v31 = v2;
  v32 = (unint64_t)(v7 + 63) >> 6;
  v11 = v5 + 56;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v17 = v16 | (v13 << 6);
      goto LABEL_27;
    }
    v18 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v18 >= v32)
      goto LABEL_36;
    v19 = *(_QWORD *)(v8 + 8 * v18);
    ++v13;
    if (!v19)
    {
      v13 = v18 + 1;
      if (v18 + 1 >= v32)
        goto LABEL_36;
      v19 = *(_QWORD *)(v8 + 8 * v13);
      if (!v19)
      {
        v13 = v18 + 2;
        if (v18 + 2 >= v32)
          goto LABEL_36;
        v19 = *(_QWORD *)(v8 + 8 * v13);
        if (!v19)
          break;
      }
    }
LABEL_26:
    v10 = (v19 - 1) & v19;
    v17 = __clz(__rbit64(v19)) + (v13 << 6);
LABEL_27:
    v21 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v17);
    v22 = *v21;
    v23 = v21[1];
    Hasher.init(_seed:)(v33);
    sub_10001BBBC(v22, v23);
    Data.hash(into:)(v33, v22, v23);
    result = Hasher._finalize()();
    v24 = -1 << *(_BYTE *)(v6 + 32);
    v25 = result & ~v24;
    v26 = v25 >> 6;
    if (((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6))) != 0)
    {
      v14 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v24) >> 6;
      do
      {
        if (++v26 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v29 = v26 == v28;
        if (v26 == v28)
          v26 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v11 + 8 * v26);
      }
      while (v30 == -1);
      v14 = __clz(__rbit64(~v30)) + (v26 << 6);
    }
    *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    v15 = (uint64_t *)(*(_QWORD *)(v6 + 48) + 16 * v14);
    *v15 = v22;
    v15[1] = v23;
    ++*(_QWORD *)(v6 + 16);
  }
  v20 = v18 + 3;
  if (v20 >= v32)
  {
LABEL_36:
    result = swift_release_n(v3, 2);
    v2 = v31;
    goto LABEL_38;
  }
  v19 = *(_QWORD *)(v8 + 8 * v20);
  if (v19)
  {
    v13 = v20;
    goto LABEL_26;
  }
  while (1)
  {
    v13 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v13 >= v32)
      goto LABEL_36;
    v19 = *(_QWORD *)(v8 + 8 * v13);
    ++v20;
    if (v19)
      goto LABEL_26;
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t sub_100A27EDC(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  unsigned __int8 *v20;
  Swift::UInt v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  int64_t v32;
  _QWORD v33[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_10001A9A8(&qword_10110AAD8);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  v6 = v5;
  if (!*(_QWORD *)(v3 + 16))
  {
    result = swift_release();
LABEL_38:
    *v2 = v6;
    return result;
  }
  v7 = 1 << *(_BYTE *)(v3 + 32);
  v31 = v3 + 56;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(v3 + 56);
  v32 = (unint64_t)(v7 + 63) >> 6;
  v10 = v5 + 56;
  result = swift_retain();
  v12 = 0;
  while (1)
  {
    if (v9)
    {
      v15 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v16 = v15 | (v12 << 6);
      goto LABEL_27;
    }
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v32)
      goto LABEL_36;
    v18 = *(_QWORD *)(v31 + 8 * v17);
    ++v12;
    if (!v18)
    {
      v12 = v17 + 1;
      if (v17 + 1 >= v32)
        goto LABEL_36;
      v18 = *(_QWORD *)(v31 + 8 * v12);
      if (!v18)
      {
        v12 = v17 + 2;
        if (v17 + 2 >= v32)
          goto LABEL_36;
        v18 = *(_QWORD *)(v31 + 8 * v12);
        if (!v18)
          break;
      }
    }
LABEL_26:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v12 << 6);
LABEL_27:
    v20 = (unsigned __int8 *)(*(_QWORD *)(v3 + 48) + 24 * v16);
    v21 = *v20;
    v22 = *((_QWORD *)v20 + 1);
    v23 = *((_QWORD *)v20 + 2);
    Hasher.init(_seed:)(v33);
    Hasher._combine(_:)(v21);
    swift_bridgeObjectRetain_n(v23, 2);
    String.hash(into:)(v33, v22, v23);
    swift_bridgeObjectRelease();
    result = Hasher._finalize()();
    v24 = -1 << *(_BYTE *)(v6 + 32);
    v25 = result & ~v24;
    v26 = v25 >> 6;
    if (((-1 << v25) & ~*(_QWORD *)(v10 + 8 * (v25 >> 6))) != 0)
    {
      v13 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v10 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v24) >> 6;
      do
      {
        if (++v26 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v29 = v26 == v28;
        if (v26 == v28)
          v26 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v10 + 8 * v26);
      }
      while (v30 == -1);
      v13 = __clz(__rbit64(~v30)) + (v26 << 6);
    }
    *(_QWORD *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
    v14 = *(_QWORD *)(v6 + 48) + 24 * v13;
    *(_BYTE *)v14 = v21;
    *(_QWORD *)(v14 + 8) = v22;
    *(_QWORD *)(v14 + 16) = v23;
    ++*(_QWORD *)(v6 + 16);
  }
  v19 = v17 + 3;
  if (v19 >= v32)
  {
LABEL_36:
    result = swift_release_n(v3, 2);
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v31 + 8 * v19);
  if (v18)
  {
    v12 = v19;
    goto LABEL_26;
  }
  while (1)
  {
    v12 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v12 >= v32)
      goto LABEL_36;
    v18 = *(_QWORD *)(v31 + 8 * v12);
    ++v19;
    if (v18)
      goto LABEL_26;
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t sub_100A281C8(uint64_t a1, uint64_t (*a2)(_QWORD), uint64_t *a3, void (*a4)(_QWORD *))
{
  uint64_t *v4;
  uint64_t *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t result;
  int64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  Swift::Int v26;
  unint64_t v27;
  int64_t v28;
  unint64_t v29;
  int64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  int64_t v34;
  void (*v35)(_QWORD *);
  _QWORD v36[9];

  v35 = a4;
  v7 = v4;
  v9 = a2(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v31 - v11;
  v13 = *v7;
  if (*(_QWORD *)(*v7 + 24) > a1)
    a1 = *(_QWORD *)(*v7 + 24);
  sub_10001A9A8(a3);
  v14 = static _SetStorage.resize(original:capacity:move:)(v13, a1, 0);
  v15 = v14;
  if (!*(_QWORD *)(v13 + 16))
  {
    result = swift_release(v13);
LABEL_27:
    *v7 = v15;
    return result;
  }
  v16 = 1 << *(_BYTE *)(v13 + 32);
  v17 = *(_QWORD *)(v13 + 56);
  v32 = v7;
  v33 = v13 + 56;
  if (v16 < 64)
    v18 = ~(-1 << v16);
  else
    v18 = -1;
  v19 = v18 & v17;
  v34 = (unint64_t)(v16 + 63) >> 6;
  v20 = v14 + 56;
  result = swift_retain();
  v22 = 0;
  while (1)
  {
    if (v19)
    {
      v23 = __clz(__rbit64(v19));
      v19 &= v19 - 1;
      v24 = v23 | (v22 << 6);
      goto LABEL_9;
    }
    v28 = v22 + 1;
    if (__OFADD__(v22, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v28 >= v34)
      goto LABEL_25;
    v29 = *(_QWORD *)(v33 + 8 * v28);
    ++v22;
    if (!v29)
    {
      v22 = v28 + 1;
      if (v28 + 1 >= v34)
        goto LABEL_25;
      v29 = *(_QWORD *)(v33 + 8 * v22);
      if (!v29)
      {
        v22 = v28 + 2;
        if (v28 + 2 >= v34)
          goto LABEL_25;
        v29 = *(_QWORD *)(v33 + 8 * v22);
        if (!v29)
          break;
      }
    }
LABEL_24:
    v19 = (v29 - 1) & v29;
    v24 = __clz(__rbit64(v29)) + (v22 << 6);
LABEL_9:
    v25 = *(_QWORD *)(v10 + 72);
    sub_10005972C(*(_QWORD *)(v13 + 48) + v25 * v24, (uint64_t)v12, a2);
    Hasher.init(_seed:)(v36);
    v35(v36);
    v26 = Hasher._finalize()();
    v27 = _HashTable.nextHole(atOrAfter:)(v26 & ~(-1 << *(_BYTE *)(v15 + 32)), v15 + 56, ~(-1 << *(_BYTE *)(v15 + 32)));
    *(_QWORD *)(v20 + ((v27 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v27;
    result = sub_1000126EC((uint64_t)v12, *(_QWORD *)(v15 + 48) + v27 * v25, a2);
    ++*(_QWORD *)(v15 + 16);
  }
  v30 = v28 + 3;
  if (v30 >= v34)
  {
LABEL_25:
    result = swift_release_n(v13, 2);
    v7 = v32;
    goto LABEL_27;
  }
  v29 = *(_QWORD *)(v33 + 8 * v30);
  if (v29)
  {
    v22 = v30;
    goto LABEL_24;
  }
  while (1)
  {
    v22 = v30 + 1;
    if (__OFADD__(v30, 1))
      break;
    if (v22 >= v34)
      goto LABEL_25;
    v29 = *(_QWORD *)(v33 + 8 * v22);
    ++v30;
    if (v29)
      goto LABEL_24;
  }
LABEL_29:
  __break(1u);
  return result;
}

uint64_t sub_100A28464(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_10001A9A8(&qword_1010FA428);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  if (!*(_QWORD *)(v3 + 16))
  {
    result = swift_release(v3);
    goto LABEL_26;
  }
  v6 = 1 << *(_BYTE *)(v3 + 32);
  if (v6 < 64)
    v7 = ~(-1 << v6);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(v3 + 56);
  v9 = (unint64_t)(v6 + 63) >> 6;
  swift_retain();
  if (v8)
  {
    v10 = __clz(__rbit64(v8));
    goto LABEL_23;
  }
  if (v9 > 1)
  {
    v11 = *(_QWORD *)(v3 + 64);
    v12 = 1;
    if (v11)
      goto LABEL_22;
    v12 = 2;
    if (v9 > 2)
    {
      v11 = *(_QWORD *)(v3 + 72);
      if (v11)
        goto LABEL_22;
      v12 = 3;
      if (v9 > 3)
      {
        v11 = *(_QWORD *)(v3 + 80);
        if (!v11)
        {
          v13 = 4;
          if (v9 > 4)
          {
            v11 = *(_QWORD *)(v3 + 88);
            if (v11)
            {
              v12 = 4;
              goto LABEL_22;
            }
            while (1)
            {
              v12 = v13 + 1;
              if (__OFADD__(v13, 1))
              {
                __break(1u);
                JUMPOUT(0x100A28968);
              }
              if (v12 >= v9)
                break;
              v11 = *(_QWORD *)(v3 + 56 + 8 * v12);
              ++v13;
              if (v11)
                goto LABEL_22;
            }
          }
          goto LABEL_24;
        }
LABEL_22:
        v10 = __clz(__rbit64(v11)) + (v12 << 6);
LABEL_23:
        v14 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 48) + v10);
        Hasher.init(_seed:)(v16);
        __asm { BR              X8 }
      }
    }
  }
LABEL_24:
  result = swift_release_n(v3, 2);
LABEL_26:
  *v2 = v5;
  return result;
}

Swift::Int sub_100A289BC(uint64_t a1)
{
  Swift::Int *v1;
  Swift::Int *v2;
  Swift::Int v3;
  uint64_t v4;
  Swift::Int result;
  Swift::Int v6;
  int64_t v7;
  Swift::Int v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  Swift::Int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  Swift::Int *v28;
  uint64_t v29[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_10001A9A8(&qword_101110038);
  result = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  v6 = result;
  if (!*(_QWORD *)(v3 + 16))
  {
    result = swift_release(v3);
LABEL_38:
    *v2 = v6;
    return result;
  }
  v28 = v2;
  v7 = 0;
  v8 = v3 + 56;
  v9 = 1 << *(_BYTE *)(v3 + 32);
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v3 + 56);
  v12 = (unint64_t)(v9 + 63) >> 6;
  v13 = result + 56;
  while (1)
  {
    if (v11)
    {
      v15 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v16 = v15 | (v7 << 6);
      goto LABEL_27;
    }
    v17 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v12)
      goto LABEL_36;
    v18 = *(_QWORD *)(v8 + 8 * v17);
    ++v7;
    if (!v18)
    {
      v7 = v17 + 1;
      if (v17 + 1 >= v12)
        goto LABEL_36;
      v18 = *(_QWORD *)(v8 + 8 * v7);
      if (!v18)
      {
        v7 = v17 + 2;
        if (v17 + 2 >= v12)
          goto LABEL_36;
        v18 = *(_QWORD *)(v8 + 8 * v7);
        if (!v18)
          break;
      }
    }
LABEL_26:
    v11 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v7 << 6);
LABEL_27:
    v20 = *(char *)(*(_QWORD *)(v3 + 48) + v16);
    Hasher.init(_seed:)(v29);
    Hasher._combine(_:)(qword_100E59228[v20]);
    result = Hasher._finalize()();
    v21 = -1 << *(_BYTE *)(v6 + 32);
    v22 = result & ~v21;
    v23 = v22 >> 6;
    if (((-1 << v22) & ~*(_QWORD *)(v13 + 8 * (v22 >> 6))) != 0)
    {
      v14 = __clz(__rbit64((-1 << v22) & ~*(_QWORD *)(v13 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v24 = 0;
      v25 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v26 = v23 == v25;
        if (v23 == v25)
          v23 = 0;
        v24 |= v26;
        v27 = *(_QWORD *)(v13 + 8 * v23);
      }
      while (v27 == -1);
      v14 = __clz(__rbit64(~v27)) + (v23 << 6);
    }
    *(_QWORD *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    *(_BYTE *)(*(_QWORD *)(v6 + 48) + v14) = v20;
    ++*(_QWORD *)(v6 + 16);
  }
  v19 = v17 + 3;
  if (v19 >= v12)
  {
LABEL_36:
    result = swift_release(v3);
    v2 = v28;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v8 + 8 * v19);
  if (v18)
  {
    v7 = v19;
    goto LABEL_26;
  }
  while (1)
  {
    v7 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v7 >= v12)
      goto LABEL_36;
    v18 = *(_QWORD *)(v8 + 8 * v7);
    ++v19;
    if (v18)
      goto LABEL_26;
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t sub_100A28C40(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  int *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  Swift::Int v26;
  unint64_t v27;
  int64_t v28;
  unint64_t v29;
  int64_t v30;
  uint64_t *v31;
  uint64_t v32;
  int64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v36[9];

  v2 = v1;
  v4 = (int *)type metadata accessor for OwnerSharingCircle(0);
  v34 = *((_QWORD *)v4 - 1);
  __chkstk_darwin(v4);
  v6 = (uint64_t *)((char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v8 = a1;
  else
    v8 = *(_QWORD *)(*v2 + 24);
  sub_10001A9A8(&qword_10110AAC8);
  v9 = static _SetStorage.resize(original:capacity:move:)(v7, v8, 0);
  v10 = v9;
  if (!*(_QWORD *)(v7 + 16))
  {
    result = swift_release();
LABEL_28:
    *v2 = v10;
    return result;
  }
  v11 = 1 << *(_BYTE *)(v7 + 32);
  v12 = *(_QWORD *)(v7 + 56);
  v31 = v2;
  v32 = v7 + 56;
  if (v11 < 64)
    v13 = ~(-1 << v11);
  else
    v13 = -1;
  v14 = v13 & v12;
  v33 = (unint64_t)(v11 + 63) >> 6;
  v15 = v9 + 56;
  v35 = v7;
  swift_retain();
  v16 = 0;
  while (1)
  {
    if (v14)
    {
      v17 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      v18 = v17 | (v16 << 6);
      result = v35;
      goto LABEL_10;
    }
    v28 = v16 + 1;
    result = v35;
    if (__OFADD__(v16, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v28 >= v33)
      goto LABEL_26;
    v29 = *(_QWORD *)(v32 + 8 * v28);
    ++v16;
    if (!v29)
    {
      v16 = v28 + 1;
      if (v28 + 1 >= v33)
        goto LABEL_26;
      v29 = *(_QWORD *)(v32 + 8 * v16);
      if (!v29)
      {
        v16 = v28 + 2;
        if (v28 + 2 >= v33)
          goto LABEL_26;
        v29 = *(_QWORD *)(v32 + 8 * v16);
        if (!v29)
          break;
      }
    }
LABEL_25:
    v14 = (v29 - 1) & v29;
    v18 = __clz(__rbit64(v29)) + (v16 << 6);
LABEL_10:
    v20 = *(_QWORD *)(v34 + 72);
    sub_10005972C(*(_QWORD *)(result + 48) + v20 * v18, (uint64_t)v6, type metadata accessor for OwnerSharingCircle);
    Hasher.init(_seed:)(v36);
    v21 = *v6;
    v22 = v6[1];
    sub_10001BBBC(*v6, v22);
    Data.hash(into:)(v36, v21, v22);
    sub_10001BC14(v21, v22);
    v23 = type metadata accessor for UUID(0);
    v24 = sub_100006204(&qword_1010F98B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    dispatch thunk of Hashable.hash(into:)(v36, v23, v24);
    dispatch thunk of Hashable.hash(into:)(v36, v23, v24);
    Hasher._combine(_:)(*((unsigned __int8 *)v6 + v4[7]));
    v25 = *(uint64_t *)((char *)v6 + v4[8]);
    swift_bridgeObjectRetain(v25);
    sub_100A2FEA8((uint64_t)v36, v25);
    swift_bridgeObjectRelease();
    Hasher._combine(_:)(*((unsigned __int8 *)v6 + v4[9]));
    v26 = Hasher._finalize()();
    v27 = _HashTable.nextHole(atOrAfter:)(v26 & ~(-1 << *(_BYTE *)(v10 + 32)), v10 + 56, ~(-1 << *(_BYTE *)(v10 + 32)));
    *(_QWORD *)(v15 + ((v27 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v27;
    sub_1000126EC((uint64_t)v6, *(_QWORD *)(v10 + 48) + v27 * v20, type metadata accessor for OwnerSharingCircle);
    ++*(_QWORD *)(v10 + 16);
  }
  v30 = v28 + 3;
  if (v30 >= v33)
  {
LABEL_26:
    result = swift_release_n(v35, 2);
    v2 = v31;
    goto LABEL_28;
  }
  v29 = *(_QWORD *)(v32 + 8 * v30);
  if (v29)
  {
    v16 = v30;
    goto LABEL_25;
  }
  while (1)
  {
    v16 = v30 + 1;
    if (__OFADD__(v30, 1))
      break;
    if (v16 >= v33)
      goto LABEL_26;
    v29 = *(_QWORD *)(v32 + 8 * v16);
    ++v30;
    if (v29)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_100A28FA8(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t *v16;
  uint64_t v17[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_10001A9A8(&qword_1010FA4A0);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  if (!*(_QWORD *)(v3 + 16))
  {
    result = swift_release();
    goto LABEL_26;
  }
  v16 = v2;
  v6 = 1 << *(_BYTE *)(v3 + 32);
  if (v6 < 64)
    v7 = ~(-1 << v6);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(v3 + 56);
  v9 = (unint64_t)(v6 + 63) >> 6;
  swift_retain();
  if (v8)
  {
    v10 = __clz(__rbit64(v8));
    goto LABEL_23;
  }
  if (v9 > 1)
  {
    v11 = *(_QWORD *)(v3 + 64);
    v12 = 1;
    if (v11)
      goto LABEL_22;
    v12 = 2;
    if (v9 > 2)
    {
      v11 = *(_QWORD *)(v3 + 72);
      if (v11)
        goto LABEL_22;
      v12 = 3;
      if (v9 > 3)
      {
        v11 = *(_QWORD *)(v3 + 80);
        if (!v11)
        {
          v13 = 4;
          if (v9 > 4)
          {
            v11 = *(_QWORD *)(v3 + 88);
            if (v11)
            {
              v12 = 4;
              goto LABEL_22;
            }
            while (1)
            {
              v12 = v13 + 1;
              if (__OFADD__(v13, 1))
              {
                __break(1u);
                JUMPOUT(0x100A29404);
              }
              if (v12 >= v9)
                break;
              v11 = *(_QWORD *)(v3 + 56 + 8 * v12);
              ++v13;
              if (v11)
                goto LABEL_22;
            }
          }
          goto LABEL_24;
        }
LABEL_22:
        v10 = __clz(__rbit64(v11)) + (v12 << 6);
LABEL_23:
        v14 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 48) + v10);
        Hasher.init(_seed:)(v17);
        __asm { BR              X8 }
      }
    }
  }
LABEL_24:
  result = swift_release_n(v3, 2);
  v2 = v16;
LABEL_26:
  *v2 = v5;
  return result;
}

unint64_t sub_100A2943C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t result;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  __int128 *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  Swift::Int v23;
  _OWORD *v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  int64_t v32;
  unint64_t v33;
  int64_t v34;
  _QWORD v35[9];
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_10001A9A8((uint64_t *)&unk_101110180);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  if (!*(_QWORD *)(v3 + 16))
  {
    result = swift_release();
LABEL_28:
    *v2 = v5;
    return result;
  }
  v6 = 1 << *(_BYTE *)(v3 + 32);
  v7 = v3 + 56;
  if (v6 < 64)
    v8 = ~(-1 << v6);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(v3 + 56);
  v10 = (unint64_t)(v6 + 63) >> 6;
  result = swift_retain();
  v12 = 0;
  while (1)
  {
    if (v9)
    {
      v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v14 = v13 | (v12 << 6);
      goto LABEL_10;
    }
    v32 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v32 >= v10)
      goto LABEL_26;
    v33 = *(_QWORD *)(v7 + 8 * v32);
    ++v12;
    if (!v33)
    {
      v12 = v32 + 1;
      if (v32 + 1 >= v10)
        goto LABEL_26;
      v33 = *(_QWORD *)(v7 + 8 * v12);
      if (!v33)
      {
        v12 = v32 + 2;
        if (v32 + 2 >= v10)
          goto LABEL_26;
        v33 = *(_QWORD *)(v7 + 8 * v12);
        if (!v33)
          break;
      }
    }
LABEL_25:
    v9 = (v33 - 1) & v33;
    v14 = __clz(__rbit64(v33)) + (v12 << 6);
LABEL_10:
    v15 = (__int128 *)(*(_QWORD *)(v3 + 48) + 160 * v14);
    v16 = v15[5];
    v18 = v15[2];
    v17 = v15[3];
    v40 = v15[4];
    v41 = v16;
    v38 = v18;
    v39 = v17;
    v19 = v15[6];
    v20 = v15[7];
    v21 = v15[9];
    v44 = v15[8];
    v45 = v21;
    v42 = v19;
    v43 = v20;
    v22 = v15[1];
    v36 = *v15;
    v37 = v22;
    Hasher.init(_seed:)(v35);
    sub_10008B118(&v36);
    sub_100AA5AA0((uint64_t)v35);
    v23 = Hasher._finalize()();
    result = _HashTable.nextHole(atOrAfter:)(v23 & ~(-1 << *(_BYTE *)(v5 + 32)), v5 + 56, ~(-1 << *(_BYTE *)(v5 + 32)));
    *(_QWORD *)(v5 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v24 = (_OWORD *)(*(_QWORD *)(v5 + 48) + 160 * result);
    v25 = v37;
    *v24 = v36;
    v24[1] = v25;
    v26 = v41;
    v28 = v38;
    v27 = v39;
    v24[4] = v40;
    v24[5] = v26;
    v24[2] = v28;
    v24[3] = v27;
    v29 = v42;
    v30 = v43;
    v31 = v45;
    v24[8] = v44;
    v24[9] = v31;
    v24[6] = v29;
    v24[7] = v30;
    ++*(_QWORD *)(v5 + 16);
  }
  v34 = v32 + 3;
  if (v34 >= v10)
  {
LABEL_26:
    result = swift_release_n(v3, 2);
    goto LABEL_28;
  }
  v33 = *(_QWORD *)(v7 + 8 * v34);
  if (v33)
  {
    v12 = v34;
    goto LABEL_25;
  }
  while (1)
  {
    v12 = v34 + 1;
    if (__OFADD__(v34, 1))
      break;
    if (v12 >= v10)
      goto LABEL_26;
    v33 = *(_QWORD *)(v7 + 8 * v12);
    ++v34;
    if (v33)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_100A296B0(uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t *a3, unint64_t *a4, uint64_t a5)
{
  uint64_t *v5;
  uint64_t *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t result;
  int64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char v35;
  unint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  int64_t v41;
  uint64_t (*v42)(uint64_t);
  unint64_t *v43;
  uint64_t v44;

  v43 = a4;
  v44 = a5;
  v7 = v5;
  v42 = a2;
  v9 = a2(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v39 - v11;
  v13 = *v7;
  if (*(_QWORD *)(*v7 + 24) > a1)
    a1 = *(_QWORD *)(*v7 + 24);
  sub_10001A9A8(a3);
  v14 = static _SetStorage.resize(original:capacity:move:)(v13, a1, 0);
  v15 = v14;
  if (!*(_QWORD *)(v13 + 16))
  {
    result = swift_release(v13);
LABEL_37:
    *v7 = v15;
    return result;
  }
  v16 = 1 << *(_BYTE *)(v13 + 32);
  v17 = *(_QWORD *)(v13 + 56);
  v39 = v7;
  v40 = v13 + 56;
  if (v16 < 64)
    v18 = ~(-1 << v16);
  else
    v18 = -1;
  v19 = v18 & v17;
  v41 = (unint64_t)(v16 + 63) >> 6;
  v20 = v14 + 56;
  result = swift_retain();
  v22 = 0;
  while (1)
  {
    if (v19)
    {
      v24 = __clz(__rbit64(v19));
      v19 &= v19 - 1;
      v25 = v24 | (v22 << 6);
      goto LABEL_26;
    }
    v26 = v22 + 1;
    if (__OFADD__(v22, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v26 >= v41)
      goto LABEL_35;
    v27 = *(_QWORD *)(v40 + 8 * v26);
    ++v22;
    if (!v27)
    {
      v22 = v26 + 1;
      if (v26 + 1 >= v41)
        goto LABEL_35;
      v27 = *(_QWORD *)(v40 + 8 * v22);
      if (!v27)
      {
        v22 = v26 + 2;
        if (v26 + 2 >= v41)
          goto LABEL_35;
        v27 = *(_QWORD *)(v40 + 8 * v22);
        if (!v27)
          break;
      }
    }
LABEL_25:
    v19 = (v27 - 1) & v27;
    v25 = __clz(__rbit64(v27)) + (v22 << 6);
LABEL_26:
    v29 = *(_QWORD *)(v10 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v10 + 16))(v12, *(_QWORD *)(v13 + 48) + v29 * v25, v9);
    v30 = *(_QWORD *)(v15 + 40);
    v31 = sub_100006204(v43, v42, v44);
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v30, v9, v31);
    v32 = -1 << *(_BYTE *)(v15 + 32);
    v33 = result & ~v32;
    v34 = v33 >> 6;
    if (((-1 << v33) & ~*(_QWORD *)(v20 + 8 * (v33 >> 6))) != 0)
    {
      v23 = __clz(__rbit64((-1 << v33) & ~*(_QWORD *)(v20 + 8 * (v33 >> 6)))) | v33 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v35 = 0;
      v36 = (unint64_t)(63 - v32) >> 6;
      do
      {
        if (++v34 == v36 && (v35 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v37 = v34 == v36;
        if (v34 == v36)
          v34 = 0;
        v35 |= v37;
        v38 = *(_QWORD *)(v20 + 8 * v34);
      }
      while (v38 == -1);
      v23 = __clz(__rbit64(~v38)) + (v34 << 6);
    }
    *(_QWORD *)(v20 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v10 + 32))(*(_QWORD *)(v15 + 48) + v23 * v29, v12, v9);
    ++*(_QWORD *)(v15 + 16);
  }
  v28 = v26 + 3;
  if (v28 >= v41)
  {
LABEL_35:
    result = swift_release_n(v13, 2);
    v7 = v39;
    goto LABEL_37;
  }
  v27 = *(_QWORD *)(v40 + 8 * v28);
  if (v27)
  {
    v22 = v28;
    goto LABEL_25;
  }
  while (1)
  {
    v22 = v28 + 1;
    if (__OFADD__(v28, 1))
      break;
    if (v22 >= v41)
      goto LABEL_35;
    v27 = *(_QWORD *)(v40 + 8 * v22);
    ++v28;
    if (v27)
      goto LABEL_25;
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t sub_100A299CC(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t *v31;
  int64_t v32;
  _QWORD v33[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_10001A9A8((uint64_t *)&unk_101110220);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  v6 = v5;
  if (!*(_QWORD *)(v3 + 16))
  {
    result = swift_release();
LABEL_38:
    *v2 = v6;
    return result;
  }
  v7 = 1 << *(_BYTE *)(v3 + 32);
  v8 = v3 + 56;
  if (v7 < 64)
    v9 = ~(-1 << v7);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v3 + 56);
  v31 = v2;
  v32 = (unint64_t)(v7 + 63) >> 6;
  v11 = v5 + 56;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v17 = v16 | (v13 << 6);
      goto LABEL_27;
    }
    v18 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v18 >= v32)
      goto LABEL_36;
    v19 = *(_QWORD *)(v8 + 8 * v18);
    ++v13;
    if (!v19)
    {
      v13 = v18 + 1;
      if (v18 + 1 >= v32)
        goto LABEL_36;
      v19 = *(_QWORD *)(v8 + 8 * v13);
      if (!v19)
      {
        v13 = v18 + 2;
        if (v18 + 2 >= v32)
          goto LABEL_36;
        v19 = *(_QWORD *)(v8 + 8 * v13);
        if (!v19)
          break;
      }
    }
LABEL_26:
    v10 = (v19 - 1) & v19;
    v17 = __clz(__rbit64(v19)) + (v13 << 6);
LABEL_27:
    v21 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v17);
    v22 = *v21;
    v23 = v21[1];
    Hasher.init(_seed:)(v33);
    swift_bridgeObjectRetain(v23);
    String.hash(into:)(v33, v22, v23);
    result = Hasher._finalize()();
    v24 = -1 << *(_BYTE *)(v6 + 32);
    v25 = result & ~v24;
    v26 = v25 >> 6;
    if (((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6))) != 0)
    {
      v14 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v24) >> 6;
      do
      {
        if (++v26 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v29 = v26 == v28;
        if (v26 == v28)
          v26 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v11 + 8 * v26);
      }
      while (v30 == -1);
      v14 = __clz(__rbit64(~v30)) + (v26 << 6);
    }
    *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    v15 = (_QWORD *)(*(_QWORD *)(v6 + 48) + 16 * v14);
    *v15 = v22;
    v15[1] = v23;
    ++*(_QWORD *)(v6 + 16);
  }
  v20 = v18 + 3;
  if (v20 >= v32)
  {
LABEL_36:
    result = swift_release_n(v3, 2);
    v2 = v31;
    goto LABEL_38;
  }
  v19 = *(_QWORD *)(v8 + 8 * v20);
  if (v19)
  {
    v13 = v20;
    goto LABEL_26;
  }
  while (1)
  {
    v13 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v13 >= v32)
      goto LABEL_36;
    v19 = *(_QWORD *)(v8 + 8 * v13);
    ++v20;
    if (v19)
      goto LABEL_26;
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t sub_100A29C78(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  unint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t *v31;
  _OWORD v32[2];
  uint64_t v33;

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_10001A9A8(&qword_1010F9F20);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  v6 = v5;
  if (!*(_QWORD *)(v3 + 16))
  {
    result = swift_release();
LABEL_38:
    *v2 = v6;
    return result;
  }
  v31 = v2;
  v7 = 1 << *(_BYTE *)(v3 + 32);
  v8 = v3 + 56;
  if (v7 < 64)
    v9 = ~(-1 << v7);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v3 + 56);
  v11 = (unint64_t)(v7 + 63) >> 6;
  v12 = v5 + 56;
  result = swift_retain();
  v14 = 0;
  while (1)
  {
    if (v10)
    {
      v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v20 = v19 | (v14 << 6);
      goto LABEL_27;
    }
    v21 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v21 >= v11)
      goto LABEL_36;
    v22 = *(_QWORD *)(v8 + 8 * v21);
    ++v14;
    if (!v22)
    {
      v14 = v21 + 1;
      if (v21 + 1 >= v11)
        goto LABEL_36;
      v22 = *(_QWORD *)(v8 + 8 * v14);
      if (!v22)
      {
        v14 = v21 + 2;
        if (v21 + 2 >= v11)
          goto LABEL_36;
        v22 = *(_QWORD *)(v8 + 8 * v14);
        if (!v22)
          break;
      }
    }
LABEL_26:
    v10 = (v22 - 1) & v22;
    v20 = __clz(__rbit64(v22)) + (v14 << 6);
LABEL_27:
    sub_10010F9DC(*(_QWORD *)(v3 + 48) + 40 * v20, (uint64_t)v32);
    result = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(v6 + 40));
    v24 = -1 << *(_BYTE *)(v6 + 32);
    v25 = result & ~v24;
    v26 = v25 >> 6;
    if (((-1 << v25) & ~*(_QWORD *)(v12 + 8 * (v25 >> 6))) != 0)
    {
      v15 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v12 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v24) >> 6;
      do
      {
        if (++v26 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v29 = v26 == v28;
        if (v26 == v28)
          v26 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v12 + 8 * v26);
      }
      while (v30 == -1);
      v15 = __clz(__rbit64(~v30)) + (v26 << 6);
    }
    *(_QWORD *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    v16 = *(_QWORD *)(v6 + 48) + 40 * v15;
    v17 = v32[0];
    v18 = v32[1];
    *(_QWORD *)(v16 + 32) = v33;
    *(_OWORD *)v16 = v17;
    *(_OWORD *)(v16 + 16) = v18;
    ++*(_QWORD *)(v6 + 16);
  }
  v23 = v21 + 3;
  if (v23 >= v11)
  {
LABEL_36:
    result = swift_release_n(v3, 2);
    v2 = v31;
    goto LABEL_38;
  }
  v22 = *(_QWORD *)(v8 + 8 * v23);
  if (v22)
  {
    v14 = v23;
    goto LABEL_26;
  }
  while (1)
  {
    v14 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v14 >= v11)
      goto LABEL_36;
    v22 = *(_QWORD *)(v8 + 8 * v14);
    ++v23;
    if (v22)
      goto LABEL_26;
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t sub_100A29F08(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t result;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  int64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD v38[9];

  v2 = v1;
  v4 = type metadata accessor for OwnedBeaconGroup(0);
  v36 = *(_QWORD *)(v4 - 8);
  v37 = v4;
  __chkstk_darwin(v4);
  v6 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v2;
  if (*(_QWORD *)(*v2 + 24) > a1)
    a1 = *(_QWORD *)(*v2 + 24);
  sub_10001A9A8(&qword_101110168);
  v8 = static _SetStorage.resize(original:capacity:move:)(v7, a1, 0);
  v9 = v8;
  if (!*(_QWORD *)(v7 + 16))
  {
    result = swift_release(v7);
LABEL_37:
    *v2 = v9;
    return result;
  }
  v10 = 1 << *(_BYTE *)(v7 + 32);
  v11 = *(_QWORD *)(v7 + 56);
  v33 = v2;
  v34 = v7 + 56;
  if (v10 < 64)
    v12 = ~(-1 << v10);
  else
    v12 = -1;
  v13 = v12 & v11;
  v35 = (unint64_t)(v10 + 63) >> 6;
  v14 = v8 + 56;
  result = swift_retain();
  v16 = 0;
  while (1)
  {
    if (v13)
    {
      v18 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v19 = v18 | (v16 << 6);
      goto LABEL_26;
    }
    v20 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v20 >= v35)
      goto LABEL_35;
    v21 = *(_QWORD *)(v34 + 8 * v20);
    ++v16;
    if (!v21)
    {
      v16 = v20 + 1;
      if (v20 + 1 >= v35)
        goto LABEL_35;
      v21 = *(_QWORD *)(v34 + 8 * v16);
      if (!v21)
      {
        v16 = v20 + 2;
        if (v20 + 2 >= v35)
          goto LABEL_35;
        v21 = *(_QWORD *)(v34 + 8 * v16);
        if (!v21)
          break;
      }
    }
LABEL_25:
    v13 = (v21 - 1) & v21;
    v19 = __clz(__rbit64(v21)) + (v16 << 6);
LABEL_26:
    v23 = *(_QWORD *)(v36 + 72);
    sub_10005972C(*(_QWORD *)(v7 + 48) + v23 * v19, (uint64_t)v6, type metadata accessor for OwnedBeaconGroup);
    Hasher.init(_seed:)(v38);
    v24 = type metadata accessor for UUID(0);
    v25 = sub_100006204(&qword_1010F98B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    dispatch thunk of Hashable.hash(into:)(v38, v24, v25);
    result = Hasher._finalize()();
    v26 = -1 << *(_BYTE *)(v9 + 32);
    v27 = result & ~v26;
    v28 = v27 >> 6;
    if (((-1 << v27) & ~*(_QWORD *)(v14 + 8 * (v27 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v27) & ~*(_QWORD *)(v14 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v29 = 0;
      v30 = (unint64_t)(63 - v26) >> 6;
      do
      {
        if (++v28 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v31 = v28 == v30;
        if (v28 == v30)
          v28 = 0;
        v29 |= v31;
        v32 = *(_QWORD *)(v14 + 8 * v28);
      }
      while (v32 == -1);
      v17 = __clz(__rbit64(~v32)) + (v28 << 6);
    }
    *(_QWORD *)(v14 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    result = sub_1000126EC((uint64_t)v6, *(_QWORD *)(v9 + 48) + v17 * v23, type metadata accessor for OwnedBeaconGroup);
    ++*(_QWORD *)(v9 + 16);
  }
  v22 = v20 + 3;
  if (v22 >= v35)
  {
LABEL_35:
    result = swift_release_n(v7, 2);
    v2 = v33;
    goto LABEL_37;
  }
  v21 = *(_QWORD *)(v34 + 8 * v22);
  if (v21)
  {
    v16 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v16 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v16 >= v35)
      goto LABEL_35;
    v21 = *(_QWORD *)(v34 + 8 * v16);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t sub_100A2A258(uint64_t a1, uint64_t *a2, uint64_t *a3, unint64_t *a4)
{
  uint64_t *v4;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t result;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  int64_t v36;

  v6 = v4;
  v7 = *v4;
  if (*(_QWORD *)(*v4 + 24) <= a1)
    v8 = a1;
  else
    v8 = *(_QWORD *)(*v4 + 24);
  sub_10001A9A8(a2);
  v9 = static _SetStorage.resize(original:capacity:move:)(v7, v8, 0);
  v10 = v9;
  if (!*(_QWORD *)(v7 + 16))
  {
    result = swift_release(v7);
LABEL_38:
    *v6 = v10;
    return result;
  }
  v11 = 1 << *(_BYTE *)(v7 + 32);
  v34 = v6;
  v35 = v7 + 56;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  else
    v12 = -1;
  v13 = v12 & *(_QWORD *)(v7 + 56);
  v36 = (unint64_t)(v11 + 63) >> 6;
  v14 = v9 + 56;
  result = swift_retain();
  v16 = 0;
  while (1)
  {
    if (v13)
    {
      v18 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v19 = v18 | (v16 << 6);
      goto LABEL_27;
    }
    v20 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v20 >= v36)
      goto LABEL_36;
    v21 = *(_QWORD *)(v35 + 8 * v20);
    ++v16;
    if (!v21)
    {
      v16 = v20 + 1;
      if (v20 + 1 >= v36)
        goto LABEL_36;
      v21 = *(_QWORD *)(v35 + 8 * v16);
      if (!v21)
      {
        v16 = v20 + 2;
        if (v20 + 2 >= v36)
          goto LABEL_36;
        v21 = *(_QWORD *)(v35 + 8 * v16);
        if (!v21)
          break;
      }
    }
LABEL_26:
    v13 = (v21 - 1) & v21;
    v19 = __clz(__rbit64(v21)) + (v16 << 6);
LABEL_27:
    v23 = *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v19);
    v24 = *(_QWORD *)(v10 + 40);
    swift_retain();
    v25 = sub_10001A9A8(a3);
    v26 = sub_1000193A4(a4, a3, (const char *)&protocol conformance descriptor for XPCSession<A>);
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v24, v25, v26);
    v27 = -1 << *(_BYTE *)(v10 + 32);
    v28 = result & ~v27;
    v29 = v28 >> 6;
    if (((-1 << v28) & ~*(_QWORD *)(v14 + 8 * (v28 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v28) & ~*(_QWORD *)(v14 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v30 = 0;
      v31 = (unint64_t)(63 - v27) >> 6;
      do
      {
        if (++v29 == v31 && (v30 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v32 = v29 == v31;
        if (v29 == v31)
          v29 = 0;
        v30 |= v32;
        v33 = *(_QWORD *)(v14 + 8 * v29);
      }
      while (v33 == -1);
      v17 = __clz(__rbit64(~v33)) + (v29 << 6);
    }
    *(_QWORD *)(v14 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    *(_QWORD *)(*(_QWORD *)(v10 + 48) + 8 * v17) = v23;
    ++*(_QWORD *)(v10 + 16);
  }
  v22 = v20 + 3;
  if (v22 >= v36)
  {
LABEL_36:
    result = swift_release_n(v7, 2);
    v6 = v34;
    goto LABEL_38;
  }
  v21 = *(_QWORD *)(v35 + 8 * v22);
  if (v21)
  {
    v16 = v22;
    goto LABEL_26;
  }
  while (1)
  {
    v16 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v16 >= v36)
      goto LABEL_36;
    v21 = *(_QWORD *)(v35 + 8 * v16);
    ++v22;
    if (v21)
      goto LABEL_26;
  }
LABEL_40:
  __break(1u);
  return result;
}

unint64_t sub_100A2A534(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  unint64_t result;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  Swift::Int v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t *v22;
  __int128 v23[4];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_10001A9A8(&qword_1011100F0);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  v6 = v5;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_27:
    result = swift_release(v3);
    *v2 = v6;
    return result;
  }
  v22 = v2;
  v7 = 1 << *(_BYTE *)(v3 + 32);
  v8 = v3 + 56;
  if (v7 < 64)
    v9 = ~(-1 << v7);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v3 + 56);
  v11 = (unint64_t)(v7 + 63) >> 6;
  v12 = v5 + 56;
  result = swift_retain();
  v14 = 0;
  while (1)
  {
    if (v10)
    {
      v15 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v16 = v15 | (v14 << 6);
      goto LABEL_10;
    }
    v19 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v19 >= v11)
      goto LABEL_26;
    v20 = *(_QWORD *)(v8 + 8 * v19);
    ++v14;
    if (!v20)
    {
      v14 = v19 + 1;
      if (v19 + 1 >= v11)
        goto LABEL_26;
      v20 = *(_QWORD *)(v8 + 8 * v14);
      if (!v20)
      {
        v14 = v19 + 2;
        if (v19 + 2 >= v11)
          goto LABEL_26;
        v20 = *(_QWORD *)(v8 + 8 * v14);
        if (!v20)
          break;
      }
    }
LABEL_25:
    v10 = (v20 - 1) & v20;
    v16 = __clz(__rbit64(v20)) + (v14 << 6);
LABEL_10:
    v17 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v16);
    Hasher.init(_seed:)(v23);
    swift_bridgeObjectRetain(v17);
    sub_100AA422C(v23, v17);
    v18 = Hasher._finalize()();
    result = _HashTable.nextHole(atOrAfter:)(v18 & ~(-1 << *(_BYTE *)(v6 + 32)), v6 + 56, ~(-1 << *(_BYTE *)(v6 + 32)));
    *(_QWORD *)(v12 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * result) = v17;
    ++*(_QWORD *)(v6 + 16);
  }
  v21 = v19 + 3;
  if (v21 >= v11)
  {
LABEL_26:
    swift_release(v3);
    v2 = v22;
    goto LABEL_27;
  }
  v20 = *(_QWORD *)(v8 + 8 * v21);
  if (v20)
  {
    v14 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    v14 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v14 >= v11)
      goto LABEL_26;
    v20 = *(_QWORD *)(v8 + 8 * v14);
    ++v21;
    if (v20)
      goto LABEL_25;
  }
LABEL_29:
  __break(1u);
  return result;
}

uint64_t sub_100A2A744(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t result;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  int64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD v40[9];

  v2 = v1;
  v4 = type metadata accessor for BeaconStatus(0);
  v38 = *(_QWORD *)(v4 - 8);
  v39 = v4;
  __chkstk_darwin(v4);
  v6 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  if (*(_QWORD *)(*v1 + 24) > a1)
    a1 = *(_QWORD *)(*v1 + 24);
  sub_10001A9A8(&qword_1011100F8);
  v8 = static _SetStorage.resize(original:capacity:move:)(v7, a1, 0);
  v9 = v8;
  if (!*(_QWORD *)(v7 + 16))
  {
    result = swift_release(v7);
LABEL_37:
    *v2 = v9;
    return result;
  }
  v10 = 1 << *(_BYTE *)(v7 + 32);
  v11 = *(_QWORD *)(v7 + 56);
  v35 = v1;
  v36 = v7 + 56;
  if (v10 < 64)
    v12 = ~(-1 << v10);
  else
    v12 = -1;
  v13 = v12 & v11;
  v37 = (unint64_t)(v10 + 63) >> 6;
  v14 = v8 + 56;
  result = swift_retain();
  v16 = 0;
  while (1)
  {
    if (v13)
    {
      v18 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v19 = v18 | (v16 << 6);
      goto LABEL_26;
    }
    v20 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v20 >= v37)
      goto LABEL_35;
    v21 = *(_QWORD *)(v36 + 8 * v20);
    ++v16;
    if (!v21)
    {
      v16 = v20 + 1;
      if (v20 + 1 >= v37)
        goto LABEL_35;
      v21 = *(_QWORD *)(v36 + 8 * v16);
      if (!v21)
      {
        v16 = v20 + 2;
        if (v20 + 2 >= v37)
          goto LABEL_35;
        v21 = *(_QWORD *)(v36 + 8 * v16);
        if (!v21)
          break;
      }
    }
LABEL_25:
    v13 = (v21 - 1) & v21;
    v19 = __clz(__rbit64(v21)) + (v16 << 6);
LABEL_26:
    v23 = *(_QWORD *)(v38 + 72);
    sub_10005972C(*(_QWORD *)(v7 + 48) + v23 * v19, (uint64_t)v6, type metadata accessor for BeaconStatus);
    Hasher.init(_seed:)(v40);
    v24 = type metadata accessor for UUID(0);
    v25 = sub_100006204(&qword_1010F98B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    dispatch thunk of Hashable.hash(into:)(v40, v24, v25);
    v26 = type metadata accessor for Date(0);
    v27 = sub_100006204((unint64_t *)&unk_1010ED800, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    dispatch thunk of Hashable.hash(into:)(v40, v26, v27);
    result = Hasher._finalize()();
    v28 = -1 << *(_BYTE *)(v9 + 32);
    v29 = result & ~v28;
    v30 = v29 >> 6;
    if (((-1 << v29) & ~*(_QWORD *)(v14 + 8 * (v29 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v29) & ~*(_QWORD *)(v14 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v31 = 0;
      v32 = (unint64_t)(63 - v28) >> 6;
      do
      {
        if (++v30 == v32 && (v31 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v33 = v30 == v32;
        if (v30 == v32)
          v30 = 0;
        v31 |= v33;
        v34 = *(_QWORD *)(v14 + 8 * v30);
      }
      while (v34 == -1);
      v17 = __clz(__rbit64(~v34)) + (v30 << 6);
    }
    *(_QWORD *)(v14 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    result = sub_1000126EC((uint64_t)v6, *(_QWORD *)(v9 + 48) + v17 * v23, type metadata accessor for BeaconStatus);
    ++*(_QWORD *)(v9 + 16);
  }
  v22 = v20 + 3;
  if (v22 >= v37)
  {
LABEL_35:
    result = swift_release_n(v7, 2);
    v2 = v35;
    goto LABEL_37;
  }
  v21 = *(_QWORD *)(v36 + 8 * v22);
  if (v21)
  {
    v16 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v16 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v16 >= v37)
      goto LABEL_35;
    v21 = *(_QWORD *)(v36 + 8 * v16);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t sub_100A2AACC(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  Swift::Int v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  int64_t v35;
  _QWORD v36[9];

  v3 = v2;
  v4 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v5 = a1;
  else
    v5 = *(_QWORD *)(*v2 + 24);
  sub_10001A9A8(a2);
  v6 = static _SetStorage.resize(original:capacity:move:)(v4, v5, 0);
  v7 = v6;
  if (!*(_QWORD *)(v4 + 16))
  {
    result = swift_release(v4);
LABEL_38:
    *v3 = v7;
    return result;
  }
  v8 = 1 << *(_BYTE *)(v4 + 32);
  v33 = v3;
  v34 = v4 + 56;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v4 + 56);
  v35 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 56;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v15 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v16 = v15 | (v13 << 6);
      goto LABEL_27;
    }
    v17 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v35)
      goto LABEL_36;
    v18 = *(_QWORD *)(v34 + 8 * v17);
    ++v13;
    if (!v18)
    {
      v13 = v17 + 1;
      if (v17 + 1 >= v35)
        goto LABEL_36;
      v18 = *(_QWORD *)(v34 + 8 * v13);
      if (!v18)
      {
        v13 = v17 + 2;
        if (v17 + 2 >= v35)
          goto LABEL_36;
        v18 = *(_QWORD *)(v34 + 8 * v13);
        if (!v18)
          break;
      }
    }
LABEL_26:
    v10 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v13 << 6);
LABEL_27:
    v20 = *(void **)(*(_QWORD *)(v4 + 48) + 8 * v16);
    v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
    v23 = v22;
    Hasher.init(_seed:)(v36);
    v24 = v20;
    String.hash(into:)(v36, v21, v23);
    v25 = Hasher._finalize()();
    result = swift_bridgeObjectRelease(v23);
    v26 = -1 << *(_BYTE *)(v7 + 32);
    v27 = v25 & ~v26;
    v28 = v27 >> 6;
    if (((-1 << v27) & ~*(_QWORD *)(v11 + 8 * (v27 >> 6))) != 0)
    {
      v14 = __clz(__rbit64((-1 << v27) & ~*(_QWORD *)(v11 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v29 = 0;
      v30 = (unint64_t)(63 - v26) >> 6;
      do
      {
        if (++v28 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v31 = v28 == v30;
        if (v28 == v30)
          v28 = 0;
        v29 |= v31;
        v32 = *(_QWORD *)(v11 + 8 * v28);
      }
      while (v32 == -1);
      v14 = __clz(__rbit64(~v32)) + (v28 << 6);
    }
    *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v14) = v24;
    ++*(_QWORD *)(v7 + 16);
  }
  v19 = v17 + 3;
  if (v19 >= v35)
  {
LABEL_36:
    result = swift_release_n(v4, 2);
    v3 = v33;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v34 + 8 * v19);
  if (v18)
  {
    v13 = v19;
    goto LABEL_26;
  }
  while (1)
  {
    v13 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v13 >= v35)
      goto LABEL_36;
    v18 = *(_QWORD *)(v34 + 8 * v13);
    ++v19;
    if (v18)
      goto LABEL_26;
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t sub_100A2ADA4(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Swift::UInt64 *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t result;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;

  v2 = v1;
  v4 = type metadata accessor for WildModeTrackingLocation(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (Swift::UInt64 *)((char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = *v2;
  if (*(_QWORD *)(*v2 + 24) > a1)
    a1 = *(_QWORD *)(*v2 + 24);
  sub_10001A9A8(&qword_101110098);
  v9 = static _SetStorage.resize(original:capacity:move:)(v8, a1, 0);
  if (!*(_QWORD *)(v8 + 16))
  {
    result = swift_release();
LABEL_26:
    *v2 = v9;
    return result;
  }
  v10 = 1 << *(_BYTE *)(v8 + 32);
  v11 = v8 + 56;
  v12 = -1;
  if (v10 < 64)
    v12 = ~(-1 << v10);
  v13 = v12 & *(_QWORD *)(v8 + 56);
  v14 = (unint64_t)(v10 + 63) >> 6;
  result = swift_retain();
  v16 = 0;
  while (1)
  {
    if (v13)
    {
      v17 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v18 = v17 | (v16 << 6);
      goto LABEL_8;
    }
    v19 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v14)
      goto LABEL_24;
    v20 = *(_QWORD *)(v11 + 8 * v19);
    ++v16;
    if (!v20)
    {
      v16 = v19 + 1;
      if (v19 + 1 >= v14)
        goto LABEL_24;
      v20 = *(_QWORD *)(v11 + 8 * v16);
      if (!v20)
      {
        v16 = v19 + 2;
        if (v19 + 2 >= v14)
          goto LABEL_24;
        v20 = *(_QWORD *)(v11 + 8 * v16);
        if (!v20)
          break;
      }
    }
LABEL_23:
    v13 = (v20 - 1) & v20;
    v18 = __clz(__rbit64(v20)) + (v16 << 6);
LABEL_8:
    sub_10005972C(*(_QWORD *)(v8 + 48) + *(_QWORD *)(v5 + 72) * v18, (uint64_t)v7, type metadata accessor for WildModeTrackingLocation);
    result = sub_100C8088C(v7, v9);
  }
  v21 = v19 + 3;
  if (v21 >= v14)
  {
LABEL_24:
    result = swift_release_n(v8, 2);
    goto LABEL_26;
  }
  v20 = *(_QWORD *)(v11 + 8 * v21);
  if (v20)
  {
    v16 = v21;
    goto LABEL_23;
  }
  while (1)
  {
    v16 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v16 >= v14)
      goto LABEL_24;
    v20 = *(_QWORD *)(v11 + 8 * v16);
    ++v21;
    if (v20)
      goto LABEL_23;
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_100A2AF98(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  Swift::UInt32 v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_10001A9A8(&qword_10110FFE0);
  result = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  v6 = result;
  if (!*(_QWORD *)(v3 + 16))
  {
    result = swift_release();
LABEL_38:
    *v2 = v6;
    return result;
  }
  v28 = v2;
  v7 = 0;
  v8 = v3 + 56;
  v9 = 1 << *(_BYTE *)(v3 + 32);
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v3 + 56);
  v12 = (unint64_t)(v9 + 63) >> 6;
  v13 = result + 56;
  while (1)
  {
    if (v11)
    {
      v15 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v16 = v15 | (v7 << 6);
      goto LABEL_27;
    }
    v17 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v12)
      goto LABEL_36;
    v18 = *(_QWORD *)(v8 + 8 * v17);
    ++v7;
    if (!v18)
    {
      v7 = v17 + 1;
      if (v17 + 1 >= v12)
        goto LABEL_36;
      v18 = *(_QWORD *)(v8 + 8 * v7);
      if (!v18)
      {
        v7 = v17 + 2;
        if (v17 + 2 >= v12)
          goto LABEL_36;
        v18 = *(_QWORD *)(v8 + 8 * v7);
        if (!v18)
          break;
      }
    }
LABEL_26:
    v11 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v7 << 6);
LABEL_27:
    v20 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 48) + v16);
    Hasher.init(_seed:)(v29);
    Hasher._combine(_:)(v20);
    result = Hasher._finalize()();
    v21 = -1 << *(_BYTE *)(v6 + 32);
    v22 = result & ~v21;
    v23 = v22 >> 6;
    if (((-1 << v22) & ~*(_QWORD *)(v13 + 8 * (v22 >> 6))) != 0)
    {
      v14 = __clz(__rbit64((-1 << v22) & ~*(_QWORD *)(v13 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v24 = 0;
      v25 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v26 = v23 == v25;
        if (v23 == v25)
          v23 = 0;
        v24 |= v26;
        v27 = *(_QWORD *)(v13 + 8 * v23);
      }
      while (v27 == -1);
      v14 = __clz(__rbit64(~v27)) + (v23 << 6);
    }
    *(_QWORD *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    *(_BYTE *)(*(_QWORD *)(v6 + 48) + v14) = v20;
    ++*(_QWORD *)(v6 + 16);
  }
  v19 = v17 + 3;
  if (v19 >= v12)
  {
LABEL_36:
    result = swift_release();
    v2 = v28;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v8 + 8 * v19);
  if (v18)
  {
    v7 = v19;
    goto LABEL_26;
  }
  while (1)
  {
    v7 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v7 >= v12)
      goto LABEL_36;
    v18 = *(_QWORD *)(v8 + 8 * v7);
    ++v19;
    if (v18)
      goto LABEL_26;
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t sub_100A2B210(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  int64_t v32;

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_10001A9A8((uint64_t *)&unk_101110210);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  v6 = v5;
  if (!*(_QWORD *)(v3 + 16))
  {
    result = swift_release();
LABEL_38:
    *v2 = v6;
    return result;
  }
  v7 = 1 << *(_BYTE *)(v3 + 32);
  v30 = v2;
  v31 = v3 + 56;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(v3 + 56);
  v32 = (unint64_t)(v7 + 63) >> 6;
  v10 = v5 + 56;
  result = swift_retain();
  v12 = 0;
  while (1)
  {
    if (v9)
    {
      v14 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v15 = v14 | (v12 << 6);
      goto LABEL_27;
    }
    v16 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v16 >= v32)
      goto LABEL_36;
    v17 = *(_QWORD *)(v31 + 8 * v16);
    ++v12;
    if (!v17)
    {
      v12 = v16 + 1;
      if (v16 + 1 >= v32)
        goto LABEL_36;
      v17 = *(_QWORD *)(v31 + 8 * v12);
      if (!v17)
      {
        v12 = v16 + 2;
        if (v16 + 2 >= v32)
          goto LABEL_36;
        v17 = *(_QWORD *)(v31 + 8 * v12);
        if (!v17)
          break;
      }
    }
LABEL_26:
    v9 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v12 << 6);
LABEL_27:
    v19 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v15);
    v20 = *(_QWORD *)(v6 + 40);
    v21 = type metadata accessor for AnyCancellable(0);
    v22 = sub_100006204((unint64_t *)&unk_101110200, (uint64_t (*)(uint64_t))&type metadata accessor for AnyCancellable, (uint64_t)&protocol conformance descriptor for AnyCancellable);
    swift_retain();
    result = dispatch thunk of Hashable._rawHashValue(seed:)(v20, v21, v22);
    v23 = -1 << *(_BYTE *)(v6 + 32);
    v24 = result & ~v23;
    v25 = v24 >> 6;
    if (((-1 << v24) & ~*(_QWORD *)(v10 + 8 * (v24 >> 6))) != 0)
    {
      v13 = __clz(__rbit64((-1 << v24) & ~*(_QWORD *)(v10 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (++v25 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v28 = v25 == v27;
        if (v25 == v27)
          v25 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v10 + 8 * v25);
      }
      while (v29 == -1);
      v13 = __clz(__rbit64(~v29)) + (v25 << 6);
    }
    *(_QWORD *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
    *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v13) = v19;
    ++*(_QWORD *)(v6 + 16);
  }
  v18 = v16 + 3;
  if (v18 >= v32)
  {
LABEL_36:
    result = swift_release_n(v3, 2);
    v2 = v30;
    goto LABEL_38;
  }
  v17 = *(_QWORD *)(v31 + 8 * v18);
  if (v17)
  {
    v12 = v18;
    goto LABEL_26;
  }
  while (1)
  {
    v12 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v12 >= v32)
      goto LABEL_36;
    v17 = *(_QWORD *)(v31 + 8 * v12);
    ++v18;
    if (v17)
      goto LABEL_26;
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t sub_100A2B4F4(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;

  v3 = v2;
  v4 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v5 = a1;
  else
    v5 = *(_QWORD *)(*v2 + 24);
  sub_10001A9A8(a2);
  result = static _SetStorage.resize(original:capacity:move:)(v4, v5, 0);
  v7 = result;
  if (!*(_QWORD *)(v4 + 16))
  {
    result = swift_release(v4);
LABEL_38:
    *v3 = v7;
    return result;
  }
  v29 = v3;
  v8 = 0;
  v9 = v4 + 56;
  v10 = 1 << *(_BYTE *)(v4 + 32);
  if (v10 < 64)
    v11 = ~(-1 << v10);
  else
    v11 = -1;
  v12 = v11 & *(_QWORD *)(v4 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  v14 = result + 56;
  while (1)
  {
    if (v12)
    {
      v16 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v17 = v16 | (v8 << 6);
      goto LABEL_27;
    }
    v18 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v18 >= v13)
      goto LABEL_36;
    v19 = *(_QWORD *)(v9 + 8 * v18);
    ++v8;
    if (!v19)
    {
      v8 = v18 + 1;
      if (v18 + 1 >= v13)
        goto LABEL_36;
      v19 = *(_QWORD *)(v9 + 8 * v8);
      if (!v19)
      {
        v8 = v18 + 2;
        if (v18 + 2 >= v13)
          goto LABEL_36;
        v19 = *(_QWORD *)(v9 + 8 * v8);
        if (!v19)
          break;
      }
    }
LABEL_26:
    v12 = (v19 - 1) & v19;
    v17 = __clz(__rbit64(v19)) + (v8 << 6);
LABEL_27:
    v21 = *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v17);
    result = static Hasher._hash(seed:_:)(*(_QWORD *)(v7 + 40), v21);
    v22 = -1 << *(_BYTE *)(v7 + 32);
    v23 = result & ~v22;
    v24 = v23 >> 6;
    if (((-1 << v23) & ~*(_QWORD *)(v14 + 8 * (v23 >> 6))) != 0)
    {
      v15 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v14 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v27 = v24 == v26;
        if (v24 == v26)
          v24 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v14 + 8 * v24);
      }
      while (v28 == -1);
      v15 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(_QWORD *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v15) = v21;
    ++*(_QWORD *)(v7 + 16);
  }
  v20 = v18 + 3;
  if (v20 >= v13)
  {
LABEL_36:
    result = swift_release(v4);
    v3 = v29;
    goto LABEL_38;
  }
  v19 = *(_QWORD *)(v9 + 8 * v20);
  if (v19)
  {
    v8 = v20;
    goto LABEL_26;
  }
  while (1)
  {
    v8 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v8 >= v13)
      goto LABEL_36;
    v19 = *(_QWORD *)(v9 + 8 * v8);
    ++v20;
    if (v19)
      goto LABEL_26;
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t sub_100A2B750(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t result;
  int64_t v15;
  uint64_t (*v16)(uint64_t);
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  int64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD v43[9];

  v2 = v1;
  v4 = type metadata accessor for BeaconIdentifier(0);
  v40 = *(_QWORD *)(v4 - 8);
  v41 = v4;
  __chkstk_darwin(v4);
  v42 = (uint64_t)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *v2;
  if (*(_QWORD *)(*v2 + 24) > a1)
    a1 = *(_QWORD *)(*v2 + 24);
  sub_10001A9A8(&qword_10110A900);
  v7 = static _SetStorage.resize(original:capacity:move:)(v6, a1, 0);
  v8 = v7;
  if (!*(_QWORD *)(v6 + 16))
  {
    result = swift_release();
LABEL_37:
    *v2 = v8;
    return result;
  }
  v9 = 1 << *(_BYTE *)(v6 + 32);
  v10 = *(_QWORD *)(v6 + 56);
  v37 = v2;
  v38 = v6 + 56;
  if (v9 < 64)
    v11 = ~(-1 << v9);
  else
    v11 = -1;
  v12 = v11 & v10;
  v39 = (unint64_t)(v9 + 63) >> 6;
  v13 = v7 + 56;
  result = swift_retain();
  v15 = 0;
  v16 = type metadata accessor for BeaconIdentifier;
  while (1)
  {
    if (v12)
    {
      v18 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v19 = v18 | (v15 << 6);
      goto LABEL_26;
    }
    v20 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v20 >= v39)
      goto LABEL_35;
    v21 = *(_QWORD *)(v38 + 8 * v20);
    ++v15;
    if (!v21)
    {
      v15 = v20 + 1;
      if (v20 + 1 >= v39)
        goto LABEL_35;
      v21 = *(_QWORD *)(v38 + 8 * v15);
      if (!v21)
      {
        v15 = v20 + 2;
        if (v20 + 2 >= v39)
          goto LABEL_35;
        v21 = *(_QWORD *)(v38 + 8 * v15);
        if (!v21)
          break;
      }
    }
LABEL_25:
    v12 = (v21 - 1) & v21;
    v19 = __clz(__rbit64(v21)) + (v15 << 6);
LABEL_26:
    v23 = v6;
    v24 = *(_QWORD *)(v40 + 72);
    v25 = *(_QWORD *)(v6 + 48) + v24 * v19;
    v26 = v16;
    sub_10005972C(v25, v42, v16);
    Hasher.init(_seed:)(v43);
    v27 = type metadata accessor for UUID(0);
    v28 = sub_100006204(&qword_1010F98B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    dispatch thunk of Hashable.hash(into:)(v43, v27, v28);
    dispatch thunk of Hashable.hash(into:)(v43, v27, v28);
    result = Hasher._finalize()();
    v29 = -1 << *(_BYTE *)(v8 + 32);
    v30 = result & ~v29;
    v31 = v30 >> 6;
    if (((-1 << v30) & ~*(_QWORD *)(v13 + 8 * (v30 >> 6))) != 0)
    {
      v17 = __clz(__rbit64((-1 << v30) & ~*(_QWORD *)(v13 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
      v16 = v26;
    }
    else
    {
      v32 = 0;
      v33 = (unint64_t)(63 - v29) >> 6;
      v16 = v26;
      do
      {
        if (++v31 == v33 && (v32 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v34 = v31 == v33;
        if (v31 == v33)
          v31 = 0;
        v32 |= v34;
        v35 = *(_QWORD *)(v13 + 8 * v31);
      }
      while (v35 == -1);
      v17 = __clz(__rbit64(~v35)) + (v31 << 6);
    }
    *(_QWORD *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    result = sub_1000126EC(v42, *(_QWORD *)(v8 + 48) + v17 * v24, v16);
    ++*(_QWORD *)(v8 + 16);
    v6 = v23;
  }
  v22 = v20 + 3;
  if (v22 >= v39)
  {
LABEL_35:
    result = swift_release_n(v6, 2);
    v2 = v37;
    goto LABEL_37;
  }
  v21 = *(_QWORD *)(v38 + 8 * v22);
  if (v21)
  {
    v15 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v15 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v15 >= v39)
      goto LABEL_35;
    v21 = *(_QWORD *)(v38 + 8 * v15);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t sub_100A2BAD0(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  unsigned int v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t *v28;

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_10001A9A8(&qword_101110030);
  result = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  v6 = result;
  if (!*(_QWORD *)(v3 + 16))
  {
    result = swift_release();
LABEL_38:
    *v2 = v6;
    return result;
  }
  v28 = v2;
  v7 = 0;
  v8 = v3 + 56;
  v9 = 1 << *(_BYTE *)(v3 + 32);
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v3 + 56);
  v12 = (unint64_t)(v9 + 63) >> 6;
  v13 = result + 56;
  while (1)
  {
    if (v11)
    {
      v15 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v16 = v15 | (v7 << 6);
      goto LABEL_27;
    }
    v17 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v12)
      goto LABEL_36;
    v18 = *(_QWORD *)(v8 + 8 * v17);
    ++v7;
    if (!v18)
    {
      v7 = v17 + 1;
      if (v17 + 1 >= v12)
        goto LABEL_36;
      v18 = *(_QWORD *)(v8 + 8 * v7);
      if (!v18)
      {
        v7 = v17 + 2;
        if (v17 + 2 >= v12)
          goto LABEL_36;
        v18 = *(_QWORD *)(v8 + 8 * v7);
        if (!v18)
          break;
      }
    }
LABEL_26:
    v11 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v7 << 6);
LABEL_27:
    v20 = *(_DWORD *)(*(_QWORD *)(v3 + 48) + 4 * v16);
    result = static Hasher._hash(seed:bytes:count:)(*(_QWORD *)(v6 + 40), v20, 4);
    v21 = -1 << *(_BYTE *)(v6 + 32);
    v22 = result & ~v21;
    v23 = v22 >> 6;
    if (((-1 << v22) & ~*(_QWORD *)(v13 + 8 * (v22 >> 6))) != 0)
    {
      v14 = __clz(__rbit64((-1 << v22) & ~*(_QWORD *)(v13 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v24 = 0;
      v25 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v26 = v23 == v25;
        if (v23 == v25)
          v23 = 0;
        v24 |= v26;
        v27 = *(_QWORD *)(v13 + 8 * v23);
      }
      while (v27 == -1);
      v14 = __clz(__rbit64(~v27)) + (v23 << 6);
    }
    *(_QWORD *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    *(_DWORD *)(*(_QWORD *)(v6 + 48) + 4 * v14) = v20;
    ++*(_QWORD *)(v6 + 16);
  }
  v19 = v17 + 3;
  if (v19 >= v12)
  {
LABEL_36:
    result = swift_release();
    v2 = v28;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v8 + 8 * v19);
  if (v18)
  {
    v7 = v19;
    goto LABEL_26;
  }
  while (1)
  {
    v7 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v7 >= v12)
      goto LABEL_36;
    v18 = *(_QWORD *)(v8 + 8 * v7);
    ++v19;
    if (v18)
      goto LABEL_26;
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t sub_100A2BD34(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  void *v22;
  id v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t *v31;
  _QWORD v32[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_10001A9A8(&qword_1011101A0);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  v6 = v5;
  if (!*(_QWORD *)(v3 + 16))
  {
    result = swift_release();
LABEL_38:
    *v2 = v6;
    return result;
  }
  v31 = v2;
  v7 = 1 << *(_BYTE *)(v3 + 32);
  v8 = v3 + 56;
  if (v7 < 64)
    v9 = ~(-1 << v7);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v3 + 56);
  v11 = (unint64_t)(v7 + 63) >> 6;
  v12 = v5 + 56;
  result = swift_retain();
  v14 = 0;
  while (1)
  {
    if (v10)
    {
      v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v17 = v16 | (v14 << 6);
      goto LABEL_27;
    }
    v18 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v18 >= v11)
      goto LABEL_36;
    v19 = *(_QWORD *)(v8 + 8 * v18);
    ++v14;
    if (!v19)
    {
      v14 = v18 + 1;
      if (v18 + 1 >= v11)
        goto LABEL_36;
      v19 = *(_QWORD *)(v8 + 8 * v14);
      if (!v19)
      {
        v14 = v18 + 2;
        if (v18 + 2 >= v11)
          goto LABEL_36;
        v19 = *(_QWORD *)(v8 + 8 * v14);
        if (!v19)
          break;
      }
    }
LABEL_26:
    v10 = (v19 - 1) & v19;
    v17 = __clz(__rbit64(v19)) + (v14 << 6);
LABEL_27:
    v21 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v17);
    Hasher.init(_seed:)(v32);
    v22 = *(void **)(v21 + 32);
    swift_retain();
    v23 = v22;
    NSObject.hash(into:)(v32);

    result = Hasher._finalize()();
    v24 = -1 << *(_BYTE *)(v6 + 32);
    v25 = result & ~v24;
    v26 = v25 >> 6;
    if (((-1 << v25) & ~*(_QWORD *)(v12 + 8 * (v25 >> 6))) != 0)
    {
      v15 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v12 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v24) >> 6;
      do
      {
        if (++v26 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v29 = v26 == v28;
        if (v26 == v28)
          v26 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v12 + 8 * v26);
      }
      while (v30 == -1);
      v15 = __clz(__rbit64(~v30)) + (v26 << 6);
    }
    *(_QWORD *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v15) = v21;
    ++*(_QWORD *)(v6 + 16);
  }
  v20 = v18 + 3;
  if (v20 >= v11)
  {
LABEL_36:
    result = swift_release_n(v3, 2);
    v2 = v31;
    goto LABEL_38;
  }
  v19 = *(_QWORD *)(v8 + 8 * v20);
  if (v19)
  {
    v14 = v20;
    goto LABEL_26;
  }
  while (1)
  {
    v14 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v14 >= v11)
      goto LABEL_36;
    v19 = *(_QWORD *)(v8 + 8 * v14);
    ++v20;
    if (v19)
      goto LABEL_26;
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t sub_100A2BFCC(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  void *v22;
  id v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t *v31;
  _QWORD v32[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_10001A9A8(&qword_101110198);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  v6 = v5;
  if (!*(_QWORD *)(v3 + 16))
  {
    result = swift_release();
LABEL_38:
    *v2 = v6;
    return result;
  }
  v31 = v2;
  v7 = 1 << *(_BYTE *)(v3 + 32);
  v8 = v3 + 56;
  if (v7 < 64)
    v9 = ~(-1 << v7);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v3 + 56);
  v11 = (unint64_t)(v7 + 63) >> 6;
  v12 = v5 + 56;
  result = swift_retain();
  v14 = 0;
  while (1)
  {
    if (v10)
    {
      v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v17 = v16 | (v14 << 6);
      goto LABEL_27;
    }
    v18 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v18 >= v11)
      goto LABEL_36;
    v19 = *(_QWORD *)(v8 + 8 * v18);
    ++v14;
    if (!v19)
    {
      v14 = v18 + 1;
      if (v18 + 1 >= v11)
        goto LABEL_36;
      v19 = *(_QWORD *)(v8 + 8 * v14);
      if (!v19)
      {
        v14 = v18 + 2;
        if (v18 + 2 >= v11)
          goto LABEL_36;
        v19 = *(_QWORD *)(v8 + 8 * v14);
        if (!v19)
          break;
      }
    }
LABEL_26:
    v10 = (v19 - 1) & v19;
    v17 = __clz(__rbit64(v19)) + (v14 << 6);
LABEL_27:
    v21 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v17);
    Hasher.init(_seed:)(v32);
    v22 = *(void **)(v21 + 40);
    swift_retain();
    v23 = v22;
    NSObject.hash(into:)(v32);

    result = Hasher._finalize()();
    v24 = -1 << *(_BYTE *)(v6 + 32);
    v25 = result & ~v24;
    v26 = v25 >> 6;
    if (((-1 << v25) & ~*(_QWORD *)(v12 + 8 * (v25 >> 6))) != 0)
    {
      v15 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v12 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v24) >> 6;
      do
      {
        if (++v26 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v29 = v26 == v28;
        if (v26 == v28)
          v26 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v12 + 8 * v26);
      }
      while (v30 == -1);
      v15 = __clz(__rbit64(~v30)) + (v26 << 6);
    }
    *(_QWORD *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    *(_QWORD *)(*(_QWORD *)(v6 + 48) + 8 * v15) = v21;
    ++*(_QWORD *)(v6 + 16);
  }
  v20 = v18 + 3;
  if (v20 >= v11)
  {
LABEL_36:
    result = swift_release_n(v3, 2);
    v2 = v31;
    goto LABEL_38;
  }
  v19 = *(_QWORD *)(v8 + 8 * v20);
  if (v19)
  {
    v14 = v20;
    goto LABEL_26;
  }
  while (1)
  {
    v14 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v14 >= v11)
      goto LABEL_36;
    v19 = *(_QWORD *)(v8 + 8 * v14);
    ++v20;
    if (v19)
      goto LABEL_26;
  }
LABEL_40:
  __break(1u);
  return result;
}

Swift::Int sub_100A2C264(uint64_t a1, uint64_t *a2)
{
  Swift::Int *v2;
  Swift::Int *v3;
  Swift::Int v4;
  uint64_t v5;
  Swift::Int result;
  Swift::Int v7;
  int64_t v8;
  Swift::Int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  Swift::Int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  Swift::UInt v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  Swift::Int *v29;
  uint64_t v30[9];

  v3 = v2;
  v4 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v5 = a1;
  else
    v5 = *(_QWORD *)(*v2 + 24);
  sub_10001A9A8(a2);
  result = static _SetStorage.resize(original:capacity:move:)(v4, v5, 0);
  v7 = result;
  if (!*(_QWORD *)(v4 + 16))
  {
    result = swift_release(v4);
LABEL_38:
    *v3 = v7;
    return result;
  }
  v29 = v3;
  v8 = 0;
  v9 = v4 + 56;
  v10 = 1 << *(_BYTE *)(v4 + 32);
  if (v10 < 64)
    v11 = ~(-1 << v10);
  else
    v11 = -1;
  v12 = v11 & *(_QWORD *)(v4 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  v14 = result + 56;
  while (1)
  {
    if (v12)
    {
      v16 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v17 = v16 | (v8 << 6);
      goto LABEL_27;
    }
    v18 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v18 >= v13)
      goto LABEL_36;
    v19 = *(_QWORD *)(v9 + 8 * v18);
    ++v8;
    if (!v19)
    {
      v8 = v18 + 1;
      if (v18 + 1 >= v13)
        goto LABEL_36;
      v19 = *(_QWORD *)(v9 + 8 * v8);
      if (!v19)
      {
        v8 = v18 + 2;
        if (v18 + 2 >= v13)
          goto LABEL_36;
        v19 = *(_QWORD *)(v9 + 8 * v8);
        if (!v19)
          break;
      }
    }
LABEL_26:
    v12 = (v19 - 1) & v19;
    v17 = __clz(__rbit64(v19)) + (v8 << 6);
LABEL_27:
    v21 = *(unsigned __int8 *)(*(_QWORD *)(v4 + 48) + v17);
    Hasher.init(_seed:)(v30);
    Hasher._combine(_:)(v21);
    result = Hasher._finalize()();
    v22 = -1 << *(_BYTE *)(v7 + 32);
    v23 = result & ~v22;
    v24 = v23 >> 6;
    if (((-1 << v23) & ~*(_QWORD *)(v14 + 8 * (v23 >> 6))) != 0)
    {
      v15 = __clz(__rbit64((-1 << v23) & ~*(_QWORD *)(v14 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v27 = v24 == v26;
        if (v24 == v26)
          v24 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v14 + 8 * v24);
      }
      while (v28 == -1);
      v15 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(_QWORD *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    *(_BYTE *)(*(_QWORD *)(v7 + 48) + v15) = v21;
    ++*(_QWORD *)(v7 + 16);
  }
  v20 = v18 + 3;
  if (v20 >= v13)
  {
LABEL_36:
    result = swift_release(v4);
    v3 = v29;
    goto LABEL_38;
  }
  v19 = *(_QWORD *)(v9 + 8 * v20);
  if (v19)
  {
    v8 = v20;
    goto LABEL_26;
  }
  while (1)
  {
    v8 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v8 >= v13)
      goto LABEL_36;
    v19 = *(_QWORD *)(v9 + 8 * v8);
    ++v20;
    if (v19)
      goto LABEL_26;
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t sub_100A2C4D8(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  int64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  int64_t v44;
  _QWORD v45[10];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_10001A9A8(&qword_101110178);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  v6 = v5;
  if (!*(_QWORD *)(v3 + 16))
  {
    result = swift_release();
LABEL_38:
    *v2 = v6;
    return result;
  }
  v7 = 1 << *(_BYTE *)(v3 + 32);
  v35 = v2;
  v36 = v3 + 56;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(v3 + 56);
  v37 = (unint64_t)(v7 + 63) >> 6;
  v10 = v5 + 56;
  result = swift_retain();
  v12 = 0;
  v38 = v3;
  while (1)
  {
    if (v9)
    {
      v15 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v44 = v12;
      v16 = v15 | (v12 << 6);
      goto LABEL_27;
    }
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v37)
      goto LABEL_36;
    v18 = *(_QWORD *)(v36 + 8 * v17);
    v19 = v12 + 1;
    if (!v18)
    {
      v19 = v12 + 2;
      if (v12 + 2 >= v37)
        goto LABEL_36;
      v18 = *(_QWORD *)(v36 + 8 * v19);
      if (!v18)
      {
        v19 = v12 + 3;
        if (v12 + 3 >= v37)
          goto LABEL_36;
        v18 = *(_QWORD *)(v36 + 8 * v19);
        if (!v18)
          break;
      }
    }
LABEL_26:
    v9 = (v18 - 1) & v18;
    v44 = v19;
    v16 = __clz(__rbit64(v18)) + (v19 << 6);
LABEL_27:
    v21 = *(_QWORD *)(v3 + 48) + 88 * v16;
    v22 = *(_QWORD *)v21;
    v23 = *(_QWORD *)(v21 + 8);
    v24 = *(_QWORD *)(v21 + 24);
    v43 = *(_QWORD *)(v21 + 16);
    v42 = *(_BYTE *)(v21 + 32);
    v25 = *(_QWORD *)(v21 + 48);
    v26 = *(_QWORD *)(v21 + 64);
    v40 = *(_QWORD *)(v21 + 56);
    v41 = *(_QWORD *)(v21 + 40);
    v27 = *(_QWORD *)(v21 + 80);
    v39 = *(_QWORD *)(v21 + 72);
    Hasher.init(_seed:)(v45);
    swift_bridgeObjectRetain(v27);
    swift_bridgeObjectRetain(v23);
    swift_bridgeObjectRetain(v24);
    swift_bridgeObjectRetain(v25);
    swift_bridgeObjectRetain(v26);
    String.hash(into:)(v45, v22, v23);
    result = Hasher._finalize()();
    v28 = -1 << *(_BYTE *)(v6 + 32);
    v29 = result & ~v28;
    v30 = v29 >> 6;
    if (((-1 << v29) & ~*(_QWORD *)(v10 + 8 * (v29 >> 6))) != 0)
    {
      v13 = __clz(__rbit64((-1 << v29) & ~*(_QWORD *)(v10 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v31 = 0;
      v32 = (unint64_t)(63 - v28) >> 6;
      do
      {
        if (++v30 == v32 && (v31 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v33 = v30 == v32;
        if (v30 == v32)
          v30 = 0;
        v31 |= v33;
        v34 = *(_QWORD *)(v10 + 8 * v30);
      }
      while (v34 == -1);
      v13 = __clz(__rbit64(~v34)) + (v30 << 6);
    }
    *(_QWORD *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
    v14 = *(_QWORD *)(v6 + 48) + 88 * v13;
    *(_QWORD *)v14 = v22;
    *(_QWORD *)(v14 + 8) = v23;
    v12 = v44;
    *(_QWORD *)(v14 + 16) = v43;
    *(_QWORD *)(v14 + 24) = v24;
    *(_BYTE *)(v14 + 32) = v42;
    *(_QWORD *)(v14 + 40) = v41;
    *(_QWORD *)(v14 + 48) = v25;
    *(_QWORD *)(v14 + 56) = v40;
    *(_QWORD *)(v14 + 64) = v26;
    v3 = v38;
    *(_QWORD *)(v14 + 72) = v39;
    *(_QWORD *)(v14 + 80) = v27;
    ++*(_QWORD *)(v6 + 16);
  }
  v20 = v12 + 4;
  if (v12 + 4 >= v37)
  {
LABEL_36:
    result = swift_release_n(v3, 2);
    v2 = v35;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v36 + 8 * v20);
  if (v18)
  {
    v19 = v12 + 4;
    goto LABEL_26;
  }
  while (1)
  {
    v19 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v19 >= v37)
      goto LABEL_36;
    v18 = *(_QWORD *)(v36 + 8 * v19);
    ++v20;
    if (v18)
      goto LABEL_26;
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t sub_100A2C820(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  int64_t v38;
  uint64_t v39;
  int64_t v40;
  __int128 v41;
  _QWORD v42[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_10001A9A8((uint64_t *)&unk_101110070);
  v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  v6 = v5;
  if (!*(_QWORD *)(v3 + 16))
  {
    result = swift_release();
LABEL_41:
    *v2 = v6;
    return result;
  }
  v7 = 1 << *(_BYTE *)(v3 + 32);
  v36 = v2;
  v37 = v3 + 56;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(v3 + 56);
  v38 = (unint64_t)(v7 + 63) >> 6;
  v10 = v5 + 56;
  result = swift_retain();
  v12 = 0;
  v39 = v3;
  while (1)
  {
    if (v9)
    {
      v15 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v40 = v12;
      v16 = v15 | (v12 << 6);
      goto LABEL_27;
    }
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
LABEL_42:
      __break(1u);
      goto LABEL_43;
    }
    if (v17 >= v38)
      goto LABEL_39;
    v18 = *(_QWORD *)(v37 + 8 * v17);
    v19 = v12 + 1;
    if (!v18)
    {
      v19 = v12 + 2;
      if (v12 + 2 >= v38)
        goto LABEL_39;
      v18 = *(_QWORD *)(v37 + 8 * v19);
      if (!v18)
      {
        v19 = v12 + 3;
        if (v12 + 3 >= v38)
          goto LABEL_39;
        v18 = *(_QWORD *)(v37 + 8 * v19);
        if (!v18)
          break;
      }
    }
LABEL_26:
    v9 = (v18 - 1) & v18;
    v40 = v19;
    v16 = __clz(__rbit64(v18)) + (v19 << 6);
LABEL_27:
    v21 = *(_QWORD *)(v3 + 48) + 40 * v16;
    v22 = *(_QWORD *)v21;
    v41 = *(_OWORD *)(v21 + 8);
    v23 = *(_QWORD *)(v21 + 24);
    v24 = *(_QWORD *)(v21 + 32);
    Hasher.init(_seed:)(v42);
    swift_bridgeObjectRetain(v41);
    swift_bridgeObjectRetain(*((_QWORD *)&v41 + 1));
    swift_bridgeObjectRetain(v24);
    String.hash(into:)(v42, v22, v41);
    Hasher._combine(_:)(*(_QWORD *)(*((_QWORD *)&v41 + 1) + 16));
    v25 = *(_QWORD *)(*((_QWORD *)&v41 + 1) + 16);
    if (v25)
    {
      v26 = (_QWORD *)(*((_QWORD *)&v41 + 1) + 40);
      do
      {
        v27 = *(v26 - 1);
        v28 = *v26;
        swift_bridgeObjectRetain(*v26);
        String.hash(into:)(v42, v27, v28);
        swift_bridgeObjectRelease();
        v26 += 2;
        --v25;
      }
      while (v25);
    }
    String.hash(into:)(v42, v23, v24);
    result = Hasher._finalize()();
    v29 = -1 << *(_BYTE *)(v6 + 32);
    v30 = result & ~v29;
    v31 = v30 >> 6;
    if (((-1 << v30) & ~*(_QWORD *)(v10 + 8 * (v30 >> 6))) != 0)
    {
      v13 = __clz(__rbit64((-1 << v30) & ~*(_QWORD *)(v10 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v32 = 0;
      v33 = (unint64_t)(63 - v29) >> 6;
      do
      {
        if (++v31 == v33 && (v32 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        v34 = v31 == v33;
        if (v31 == v33)
          v31 = 0;
        v32 |= v34;
        v35 = *(_QWORD *)(v10 + 8 * v31);
      }
      while (v35 == -1);
      v13 = __clz(__rbit64(~v35)) + (v31 << 6);
    }
    *(_QWORD *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
    v14 = *(_QWORD *)(v6 + 48) + 40 * v13;
    *(_QWORD *)v14 = v22;
    *(_OWORD *)(v14 + 8) = v41;
    *(_QWORD *)(v14 + 24) = v23;
    *(_QWORD *)(v14 + 32) = v24;
    ++*(_QWORD *)(v6 + 16);
    v3 = v39;
    v12 = v40;
  }
  v20 = v12 + 4;
  if (v12 + 4 >= v38)
  {
LABEL_39:
    result = swift_release_n(v3, 2);
    v2 = v36;
    goto LABEL_41;
  }
  v18 = *(_QWORD *)(v37 + 8 * v20);
  if (v18)
  {
    v19 = v12 + 4;
    goto LABEL_26;
  }
  while (1)
  {
    v19 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v19 >= v38)
      goto LABEL_39;
    v18 = *(_QWORD *)(v37 + 8 * v19);
    ++v20;
    if (v18)
      goto LABEL_26;
  }
LABEL_43:
  __break(1u);
  return result;
}

uint64_t sub_100A2CB90(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t result;
  int64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  Swift::Int v22;
  id v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t *v31;

  v3 = v2;
  v4 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v5 = a1;
  else
    v5 = *(_QWORD *)(*v2 + 24);
  sub_10001A9A8(a2);
  v6 = static _SetStorage.resize(original:capacity:move:)(v4, v5, 0);
  v7 = v6;
  if (!*(_QWORD *)(v4 + 16))
  {
    result = swift_release(v4);
LABEL_38:
    *v3 = v7;
    return result;
  }
  v31 = v3;
  v8 = 1 << *(_BYTE *)(v4 + 32);
  v9 = v4 + 56;
  if (v8 < 64)
    v10 = ~(-1 << v8);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v4 + 56);
  v12 = (unint64_t)(v8 + 63) >> 6;
  v13 = v6 + 56;
  result = swift_retain();
  v15 = 0;
  while (1)
  {
    if (v11)
    {
      v17 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v18 = v17 | (v15 << 6);
      goto LABEL_27;
    }
    v19 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v19 >= v12)
      goto LABEL_36;
    v20 = *(_QWORD *)(v9 + 8 * v19);
    ++v15;
    if (!v20)
    {
      v15 = v19 + 1;
      if (v19 + 1 >= v12)
        goto LABEL_36;
      v20 = *(_QWORD *)(v9 + 8 * v15);
      if (!v20)
      {
        v15 = v19 + 2;
        if (v19 + 2 >= v12)
          goto LABEL_36;
        v20 = *(_QWORD *)(v9 + 8 * v15);
        if (!v20)
          break;
      }
    }
LABEL_26:
    v11 = (v20 - 1) & v20;
    v18 = __clz(__rbit64(v20)) + (v15 << 6);
LABEL_27:
    v22 = *(_QWORD *)(v7 + 40);
    v23 = *(id *)(*(_QWORD *)(v4 + 48) + 8 * v18);
    result = NSObject._rawHashValue(seed:)(v22);
    v24 = -1 << *(_BYTE *)(v7 + 32);
    v25 = result & ~v24;
    v26 = v25 >> 6;
    if (((-1 << v25) & ~*(_QWORD *)(v13 + 8 * (v25 >> 6))) != 0)
    {
      v16 = __clz(__rbit64((-1 << v25) & ~*(_QWORD *)(v13 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v24) >> 6;
      do
      {
        if (++v26 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v29 = v26 == v28;
        if (v26 == v28)
          v26 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v13 + 8 * v26);
      }
      while (v30 == -1);
      v16 = __clz(__rbit64(~v30)) + (v26 << 6);
    }
    *(_QWORD *)(v13 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
    *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v16) = v23;
    ++*(_QWORD *)(v7 + 16);
  }
  v21 = v19 + 3;
  if (v21 >= v12)
  {
LABEL_36:
    result = swift_release_n(v4, 2);
    v3 = v31;
    goto LABEL_38;
  }
  v20 = *(_QWORD *)(v9 + 8 * v21);
  if (v20)
  {
    v15 = v21;
    goto LABEL_26;
  }
  while (1)
  {
    v15 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v15 >= v12)
      goto LABEL_36;
    v20 = *(_QWORD *)(v9 + 8 * v15);
    ++v21;
    if (v20)
      goto LABEL_26;
  }
LABEL_40:
  __break(1u);
  return result;
}

Swift::Int sub_100A2CE04(uint64_t a1)
{
  Swift::Int *v1;
  Swift::Int *v2;
  Swift::Int v3;
  uint64_t v4;
  Swift::Int result;
  __int128 v6;
  Swift::Int v7;
  int64_t v8;
  Swift::Int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  Swift::Int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  Swift::Int *v28;
  __int128 v29;
  uint64_t v30[9];

  v2 = v1;
  v3 = *v1;
  if (*(_QWORD *)(*v1 + 24) <= a1)
    v4 = a1;
  else
    v4 = *(_QWORD *)(*v1 + 24);
  sub_10001A9A8(&qword_10110AAB8);
  result = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0);
  v7 = result;
  if (!*(_QWORD *)(v3 + 16))
  {
    result = swift_release(v3);
LABEL_38:
    *v2 = v7;
    return result;
  }
  v28 = v2;
  v8 = 0;
  v9 = v3 + 56;
  v10 = 1 << *(_BYTE *)(v3 + 32);
  if (v10 < 64)
    v11 = ~(-1 << v10);
  else
    v11 = -1;
  v12 = v11 & *(_QWORD *)(v3 + 56);
  v13 = (unint64_t)(v10 + 63) >> 6;
  v14 = result + 56;
  while (1)
  {
    if (v12)
    {
      v16 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v17 = v16 | (v8 << 6);
      goto LABEL_27;
    }
    v18 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v18 >= v13)
      goto LABEL_36;
    v19 = *(_QWORD *)(v9 + 8 * v18);
    ++v8;
    if (!v19)
    {
      v8 = v18 + 1;
      if (v18 + 1 >= v13)
        goto LABEL_36;
      v19 = *(_QWORD *)(v9 + 8 * v8);
      if (!v19)
      {
        v8 = v18 + 2;
        if (v18 + 2 >= v13)
          goto LABEL_36;
        v19 = *(_QWORD *)(v9 + 8 * v8);
        if (!v19)
          break;
      }
    }
LABEL_26:
    v12 = (v19 - 1) & v19;
    v17 = __clz(__rbit64(v19)) + (v8 << 6);
LABEL_27:
    *(_QWORD *)&v6 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v17);
    v29 = v6;
    Hasher.init(_seed:)(v30);
    Hasher._combine(_:)(v29);
    Hasher._combine(_:)(DWORD1(v29));
    result = Hasher._finalize()();
    v21 = -1 << *(_BYTE *)(v7 + 32);
    v22 = result & ~v21;
    v23 = v22 >> 6;
    if (((-1 << v22) & ~*(_QWORD *)(v14 + 8 * (v22 >> 6))) != 0)
    {
      v15 = __clz(__rbit64((-1 << v22) & ~*(_QWORD *)(v14 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v24 = 0;
      v25 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v26 = v23 == v25;
        if (v23 == v25)
          v23 = 0;
        v24 |= v26;
        v27 = *(_QWORD *)(v14 + 8 * v23);
      }
      while (v27 == -1);
      v15 = __clz(__rbit64(~v27)) + (v23 << 6);
    }
    *(_QWORD *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    *((_QWORD *)&v6 + 1) = *((_QWORD *)&v29 + 1);
    *(_QWORD *)(*(_QWORD *)(v7 + 48) + 8 * v15) = v29;
    ++*(_QWORD *)(v7 + 16);
  }
  v20 = v18 + 3;
  if (v20 >= v13)
  {
LABEL_36:
    result = swift_release(v3);
    v2 = v28;
    goto LABEL_38;
  }
  v19 = *(_QWORD *)(v9 + 8 * v20);
  if (v19)
  {
    v8 = v20;
    goto LABEL_26;
  }
  while (1)
  {
    v8 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v8 >= v13)
      goto LABEL_36;
    v19 = *(_QWORD *)(v9 + 8 * v8);
    ++v20;
    if (v19)
      goto LABEL_26;
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t sub_100A2D094(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  Swift::UInt32 v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  _QWORD v34[9];

  v3 = v2;
  v4 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v5 = a1;
  else
    v5 = *(_QWORD *)(*v2 + 24);
  sub_10001A9A8(a2);
  v6 = static _SetStorage.resize(original:capacity:move:)(v4, v5, 0);
  v7 = v6;
  if (!*(_QWORD *)(v4 + 16))
  {
    result = swift_release(v4);
LABEL_38:
    *v3 = v7;
    return result;
  }
  v8 = 1 << *(_BYTE *)(v4 + 32);
  v32 = v4 + 56;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  else
    v9 = -1;
  v10 = v9 & *(_QWORD *)(v4 + 56);
  v33 = (unint64_t)(v8 + 63) >> 6;
  v11 = v6 + 56;
  result = swift_retain();
  v13 = 0;
  while (1)
  {
    if (v10)
    {
      v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v17 = v16 | (v13 << 6);
      goto LABEL_27;
    }
    v18 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (v18 >= v33)
      goto LABEL_36;
    v19 = *(_QWORD *)(v32 + 8 * v18);
    ++v13;
    if (!v19)
    {
      v13 = v18 + 1;
      if (v18 + 1 >= v33)
        goto LABEL_36;
      v19 = *(_QWORD *)(v32 + 8 * v13);
      if (!v19)
      {
        v13 = v18 + 2;
        if (v18 + 2 >= v33)
          goto LABEL_36;
        v19 = *(_QWORD *)(v32 + 8 * v13);
        if (!v19)
          break;
      }
    }
LABEL_26:
    v10 = (v19 - 1) & v19;
    v17 = __clz(__rbit64(v19)) + (v13 << 6);
LABEL_27:
    v21 = *(_QWORD *)(v4 + 48) + 24 * v17;
    v22 = *(_QWORD *)v21;
    v23 = *(_QWORD *)(v21 + 8);
    v24 = *(_DWORD *)(v21 + 16);
    Hasher.init(_seed:)(v34);
    sub_10001BBBC(v22, v23);
    sub_10001BBBC(v22, v23);
    Data.hash(into:)(v34, v22, v23);
    sub_10001BC14(v22, v23);
    Hasher._combine(_:)(v24);
    result = Hasher._finalize()();
    v25 = -1 << *(_BYTE *)(v7 + 32);
    v26 = result & ~v25;
    v27 = v26 >> 6;
    if (((-1 << v26) & ~*(_QWORD *)(v11 + 8 * (v26 >> 6))) != 0)
    {
      v14 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v11 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v28 = 0;
      v29 = (unint64_t)(63 - v25) >> 6;
      do
      {
        if (++v27 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v30 = v27 == v29;
        if (v27 == v29)
          v27 = 0;
        v28 |= v30;
        v31 = *(_QWORD *)(v11 + 8 * v27);
      }
      while (v31 == -1);
      v14 = __clz(__rbit64(~v31)) + (v27 << 6);
    }
    *(_QWORD *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    v15 = *(_QWORD *)(v7 + 48) + 24 * v14;
    *(_QWORD *)v15 = v22;
    *(_QWORD *)(v15 + 8) = v23;
    *(_DWORD *)(v15 + 16) = v24;
    ++*(_QWORD *)(v7 + 16);
  }
  v20 = v18 + 3;
  if (v20 >= v33)
  {
LABEL_36:
    result = swift_release_n(v4, 2);
    goto LABEL_38;
  }
  v19 = *(_QWORD *)(v32 + 8 * v20);
  if (v19)
  {
    v13 = v20;
    goto LABEL_26;
  }
  while (1)
  {
    v13 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v13 >= v33)
      goto LABEL_36;
    v19 = *(_QWORD *)(v32 + 8 * v13);
    ++v20;
    if (v19)
      goto LABEL_26;
  }
LABEL_40:
  __break(1u);
  return result;
}

BOOL sub_100A2D38C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v8[2];
  uint64_t v9;

  if (qword_1010E9D08 != -1)
    swift_once(&qword_1010E9D08, sub_10059A6E0);
  OS_dispatch_queue.sync<A>(execute:)(sub_100003D88, qword_1011B71A8, &type metadata for Configuration);
  v4 = sub_100C1B8B8(v9);
  swift_bridgeObjectRelease();
  v5 = sub_100CA7F40(v4);
  swift_bridgeObjectRelease();
  v9 = v5;
  sub_100A11584(v8, 8212, &qword_10110FF40, (uint64_t)&type metadata for Int);
  sub_100A11584(v8, 8213, &qword_10110FF40, (uint64_t)&type metadata for Int);
  sub_100A11584(v8, 8216, &qword_10110FF40, (uint64_t)&type metadata for Int);
  sub_100A11584(v8, 8219, &qword_10110FF40, (uint64_t)&type metadata for Int);
  sub_100A11584(v8, 8220, &qword_10110FF40, (uint64_t)&type metadata for Int);
  sub_100A11584(v8, 8223, &qword_10110FF40, (uint64_t)&type metadata for Int);
  v6 = a1 == 76 && sub_100A07598(a2, v9);
  swift_bridgeObjectRelease();
  return v6;
}

_QWORD *sub_100A2D514(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = a1[1];
  v3 = a1[3];
  v4 = a1[6];
  v5 = a1[8];
  swift_bridgeObjectRetain(a1[10]);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  return a1;
}

_QWORD *sub_100A2D57C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = a1[1];
  v3 = a1[6];
  v4 = a1[8];
  v5 = a1[10];
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v5);
  return a1;
}

uint64_t storeEnumTagSinglePayload for VerifyFindMyNetworkIdResponsePayload(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_100A2D630 + 4 * byte_100E59395[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100A2D664 + 4 * byte_100E59390[v4]))();
}

uint64_t sub_100A2D664(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100A2D66C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100A2D674);
  return result;
}

uint64_t sub_100A2D680(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100A2D688);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_100A2D68C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100A2D694(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for VerifyFindMyNetworkIdResponsePayload()
{
  return &type metadata for VerifyFindMyNetworkIdResponsePayload;
}

uint64_t sub_100A2D6B0(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD v13[2];
  _QWORD v14[3];
  uint64_t v15;
  uint64_t v16;

  v3 = a1[3];
  v4 = a1[4];
  sub_10001AA44(a1, v3);
  dispatch thunk of BinaryEncoding.container()(v14, v3, v4);
  Bool.intValue.getter(a2);
  v5 = sub_100024908();
  v6 = FixedWidthInteger.data.getter(&type metadata for Int, v5);
  v8 = v7;
  v13[0] = v6;
  v13[1] = v7;
  v9 = v15;
  v10 = v16;
  sub_10009F5D0((uint64_t)v14, v15);
  v11 = sub_1000DCC90();
  dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)(v13, &type metadata for Data, v11, v9, v10);
  sub_10001BC14(v6, v8);
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v14);
}

uint64_t sub_100A2D78C@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = sub_100A2D840(a1);
  if (!v2)
    *a2 = result & 1;
  return result;
}

unint64_t sub_100A2D7B8(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = sub_100A2D7E4();
  result = sub_100439F50();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_100A2D7E4()
{
  unint64_t result;

  result = qword_101110240;
  if (!qword_101110240)
  {
    result = swift_getWitnessTable(aY_61, &type metadata for VerifyFindMyNetworkIdResponsePayload);
    atomic_store(result, (unint64_t *)&qword_101110240);
  }
  return result;
}

uint64_t sub_100A2D828(_QWORD *a1)
{
  unsigned __int8 *v1;

  return sub_100A2D6B0(a1, *v1);
}

uint64_t sub_100A2D840(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD v15[3];
  uint64_t v16;
  uint64_t v17;

  v3 = a1[3];
  v4 = a1[4];
  sub_10001AA44(a1, v3);
  dispatch thunk of BinaryDecoding.container()(v15, v3, v4);
  v5 = v16;
  v6 = v17;
  v7 = sub_10009F5D0((uint64_t)v15, v16);
  v8 = dispatch thunk of BinaryDecodingContaining.decode(length:)(1, v5, v6);
  if (!v1)
  {
    v10 = v8;
    v11 = v9;
    v12 = sub_100035530();
    DataProtocol.intValue.getter(&type metadata for Data, v12);
    v13 = sub_100024908();
    v7 = FixedWidthInteger.BOOLValue.getter(&type metadata for Int, v13);
    sub_10001BC14(v10, v11);
  }
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v15);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  return v7 & 1;
}

uint64_t *sub_100A2D93C(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = *a2;
    v8 = a2[1];
    sub_10001BBBC(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    v9 = a3[5];
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for UUID(0);
    v13 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
    v13(v10, v11, v12);
    v13((char *)a1 + a3[6], (char *)a2 + a3[6], v12);
    v14 = a3[8];
    *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
    v15 = *(uint64_t *)((char *)a2 + v14);
    *(uint64_t *)((char *)a1 + v14) = v15;
    *((_BYTE *)a1 + a3[9]) = *((_BYTE *)a2 + a3[9]);
    swift_bridgeObjectRetain(v15);
  }
  return a1;
}

uint64_t sub_100A2DA24(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);

  sub_10001BC14(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for UUID(0);
  v6 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v6(v4, v5);
  v6(a1 + *(int *)(a2 + 24), v5);
  return swift_bridgeObjectRelease();
}

uint64_t *sub_100A2DAA0(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  uint64_t v14;

  v6 = *a2;
  v7 = a2[1];
  sub_10001BBBC(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  v8 = a3[5];
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for UUID(0);
  v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
  v12(v9, v10, v11);
  v12((char *)a1 + a3[6], (char *)a2 + a3[6], v11);
  v13 = a3[8];
  *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
  v14 = *(uint64_t *)((char *)a2 + v13);
  *(uint64_t *)((char *)a1 + v13) = v14;
  *((_BYTE *)a1 + a3[9]) = *((_BYTE *)a2 + a3[9]);
  swift_bridgeObjectRetain(v14);
  return a1;
}

uint64_t *sub_100A2DB5C(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  void (*v14)(char *, char *, uint64_t);
  uint64_t v15;
  uint64_t v16;

  v6 = *a2;
  v7 = a2[1];
  sub_10001BBBC(*a2, v7);
  v8 = *a1;
  v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  sub_10001BC14(v8, v9);
  v10 = a3[5];
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for UUID(0);
  v14 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 24);
  v14(v11, v12, v13);
  v14((char *)a1 + a3[6], (char *)a2 + a3[6], v13);
  *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
  v15 = a3[8];
  v16 = *(uint64_t *)((char *)a2 + v15);
  *(uint64_t *)((char *)a1 + v15) = v16;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRelease();
  *((_BYTE *)a1 + a3[9]) = *((_BYTE *)a2 + a3[9]);
  return a1;
}

char *sub_100A2DC30(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for UUID(0);
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v10(&a1[a3[6]], &a2[a3[6]], v9);
  v11 = a3[8];
  a1[a3[7]] = a2[a3[7]];
  *(_QWORD *)&a1[v11] = *(_QWORD *)&a2[v11];
  a1[a3[9]] = a2[a3[9]];
  return a1;
}

uint64_t *sub_100A2DCDC(uint64_t *a1, char *a2, int *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;

  v6 = *a1;
  v7 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_10001BC14(v6, v7);
  v8 = a3[5];
  v9 = (char *)a1 + v8;
  v10 = &a2[v8];
  v11 = type metadata accessor for UUID(0);
  v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 40);
  v12(v9, v10, v11);
  v12((char *)a1 + a3[6], &a2[a3[6]], v11);
  v13 = a3[8];
  *((_BYTE *)a1 + a3[7]) = a2[a3[7]];
  *(uint64_t *)((char *)a1 + v13) = *(_QWORD *)&a2[v13];
  swift_bridgeObjectRelease();
  *((_BYTE *)a1 + a3[9]) = a2[a3[9]];
  return a1;
}

uint64_t sub_100A2DD9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100A2DDA8);
}

uint64_t sub_100A2DDA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + *(int *)(a3 + 20), a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 32));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_100A2DE28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100A2DE34);
}

uint64_t sub_100A2DE34(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + *(int *)(a4 + 20), a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 32)) = (a2 - 1);
  return result;
}

uint64_t sub_100A2DEB0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  char *v8;
  void *v9;

  v4 = &unk_100E59488;
  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v5 = *(_QWORD *)(result - 8) + 64;
    v6 = v5;
    v7 = &unk_100E594A0;
    v8 = (char *)&value witness table for Builtin.BridgeObject + 64;
    v9 = &unk_100E594B8;
    swift_initStructMetadata(a1, 256, 6, &v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_100A2DF48()
{
  return sub_100006204((unint64_t *)&unk_1011102F0, type metadata accessor for OwnerSharingCircle, (uint64_t)&unk_100E59510);
}

void sub_100A2DF74(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  id v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int (*v24)(char *, uint64_t, uint64_t);
  unint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  id v28;
  NSString v29;
  id v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  _BYTE *v34;
  unint64_t v35;
  _BYTE *v36;
  NSString v37;
  id v38;
  unint64_t v39;
  NSString v40;
  id v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  _BYTE *v54;
  void (*v55)(char *, uint64_t);
  unint64_t v56;
  uint64_t v57;
  _BYTE *v58;
  uint64_t v59;
  NSString v60;
  id v61;
  int v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  _BYTE *v67;
  void *v68;
  id v69;
  id v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  int *v76;
  void (*v77)(char *, char *, uint64_t);
  uint64_t v78;
  uint64_t v79;
  int v80;
  unint64_t v81;
  unint64_t v82;
  void (*v83)(char *, char *, uint64_t);
  char *v84;
  uint64_t *v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;

  v85 = a2;
  v3 = sub_10001A9A8(&qword_1010ED860);
  v4 = __chkstk_darwin(v3);
  v6 = (char *)&v78 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v78 - v7;
  v9 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v78 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v11);
  v87 = (char *)&v78 - v15;
  v16 = CKRecord.recordType.getter(v14);
  if (v16 == 0xD000000000000012 && v17 == 0x8000000100E59450)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v18 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v17, 0xD000000000000012, 0x8000000100E59450, 0);
    swift_bridgeObjectRelease();
    if ((v18 & 1) == 0)
    {
      v35 = sub_100A2F910();
      v26 = swift_allocError(&type metadata for OwnerSharingCircle.ConversionError, v35, 0, 0);
      *v36 = 0;
      goto LABEL_13;
    }
  }
  v84 = v13;
  v19 = objc_msgSend(a1, "recordID");
  v20 = objc_msgSend(v19, "recordName");

  v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
  v23 = v22;

  UUID.init(uuidString:)(v21, v23);
  swift_bridgeObjectRelease();
  v24 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
  if (v24(v8, 1, v9) != 1)
  {
    v83 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
    v83(v87, v8, v9);
    v28 = objc_msgSend(a1, "encryptedValues");
    v29 = String._bridgeToObjectiveC()();
    v30 = objc_msgSend(v28, "objectForKeyedSubscript:", v29);

    if (!v30)
      goto LABEL_11;
    v90 = (unint64_t)v30;
    v31 = sub_10001A9A8((uint64_t *)&unk_1010ED8D0);
    if ((swift_dynamicCast(&v88, &v90, v31, &type metadata for String, 6) & 1) == 0)
      goto LABEL_11;
    UUID.init(uuidString:)(v88, v89);
    swift_bridgeObjectRelease();
    if (v24(v6, 1, v9) == 1)
    {
      sub_1001C0844((uint64_t)v6);
LABEL_11:
      v32 = sub_100A2F910();
      v33 = swift_allocError(&type metadata for OwnerSharingCircle.ConversionError, v32, 0, 0);
      *v34 = 2;
      swift_willThrow(v33);
      swift_unknownObjectRelease(v28);

      (*(void (**)(char *, uint64_t))(v10 + 8))(v87, v9);
      return;
    }
    v83(v84, v6, v9);
    v37 = String._bridgeToObjectiveC()();
    v38 = objc_msgSend(v28, "objectForKeyedSubscript:", v37);

    if (v38)
    {
      v88 = (uint64_t)v38;
      if ((swift_dynamicCast(&v90, &v88, v31, &type metadata for Int, 6) & 1) != 0)
      {
        v39 = v90;
        if (v90 <= 2)
        {
          v40 = String._bridgeToObjectiveC()();
          v41 = objc_msgSend(v28, "objectForKeyedSubscript:", v40);

          v42 = v84;
          if (v41
            && (v90 = (unint64_t)v41, (swift_dynamicCast(&v88, &v90, v31, &type metadata for Data, 6) & 1) != 0))
          {
            v43 = v88;
            v81 = v39;
            v82 = v89;
            v44 = type metadata accessor for PropertyListDecoder(0);
            swift_allocObject(v44, *(unsigned int *)(v44 + 48), *(unsigned __int16 *)(v44 + 52));
            v45 = PropertyListDecoder.init()();
            v46 = sub_10001A9A8(&qword_101110318);
            v47 = sub_100A2F954();
            v48 = v43;
            v49 = v43;
            v50 = v82;
            v51 = v86;
            dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(v46, v49, v82, v46, v47);
            if (v51)
            {
              swift_release(v45);
              sub_10001BC14(v48, v50);
LABEL_23:
              swift_unknownObjectRelease(v28);

              v55 = *(void (**)(char *, uint64_t))(v10 + 8);
              v55(v84, v9);
LABEL_24:
              v55(v87, v9);
              return;
            }
            v86 = v48;
            swift_release(v45);
            v59 = v88;
            v60 = String._bridgeToObjectiveC()();
            v61 = objc_msgSend(v28, "objectForKeyedSubscript:", v60);

            if (v61)
            {
              v88 = (uint64_t)v61;
              if ((swift_dynamicCast(&v90, &v88, v31, &type metadata for Int, 6) & 1) != 0)
              {
                v62 = sub_100357784(v90);
                if (v62 != 6)
                {
                  v80 = v62;
                  v68 = objc_autoreleasePoolPush();
                  v69 = objc_msgSend(objc_allocWithZone((Class)NSKeyedArchiver), "initRequiringSecureCoding:", 1);
                  objc_msgSend(a1, "encodeSystemFieldsWithCoder:", v69);
                  objc_msgSend(v69, "finishEncoding");
                  v70 = objc_msgSend(v69, "encodedData");
                  v71 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v70);
                  v79 = v72;

                  objc_autoreleasePoolPop(v68);
                  sub_10001BC14(v86, v82);
                  swift_unknownObjectRelease(v28);
                  v73 = v59;
                  v74 = v85;
                  v75 = v79;
                  *v85 = v71;
                  v74[1] = v75;
                  v76 = (int *)type metadata accessor for OwnerSharingCircle(0);
                  v77 = v83;
                  v83((char *)v74 + v76[5], v87, v9);
                  v77((char *)v74 + v76[6], v84, v9);
                  *(uint64_t *)((char *)v74 + v76[8]) = v73;
                  *((_BYTE *)v74 + v76[7]) = v81;
                  *((_BYTE *)v74 + v76[9]) = v80;
                  return;
                }
              }
            }
            swift_bridgeObjectRelease();
            v42 = v84;
            v63 = v82;
            v64 = v86;
            v65 = sub_100A2F910();
            v66 = swift_allocError(&type metadata for OwnerSharingCircle.ConversionError, v65, 0, 0);
            *v67 = 5;
            swift_willThrow(v66);
            sub_10001BC14(v64, v63);
          }
          else
          {
            v56 = sub_100A2F910();
            v57 = swift_allocError(&type metadata for OwnerSharingCircle.ConversionError, v56, 0, 0);
            *v58 = 4;
            swift_willThrow(v57);
          }
          swift_unknownObjectRelease(v28);

          v55 = *(void (**)(char *, uint64_t))(v10 + 8);
          v55(v42, v9);
          goto LABEL_24;
        }
      }
    }
    v52 = sub_100A2F910();
    v53 = swift_allocError(&type metadata for OwnerSharingCircle.ConversionError, v52, 0, 0);
    *v54 = 3;
    swift_willThrow(v53);
    goto LABEL_23;
  }
  sub_1001C0844((uint64_t)v8);
  v25 = sub_100A2F910();
  v26 = swift_allocError(&type metadata for OwnerSharingCircle.ConversionError, v25, 0, 0);
  *v27 = 1;
LABEL_13:
  swift_willThrow(v26);

}

uint64_t sub_100A2E708(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_100A2E740 + 4 * byte_100E59440[a1]))(0xD000000000000010, 0x8000000100EC2FE0);
}

uint64_t sub_100A2E740()
{
  return 0x696669746E656469;
}

uint64_t sub_100A2E780()
{
  return 0x737265626D656DLL;
}

uint64_t sub_100A2E798()
{
  return 0x6E61747065636361;
}

Swift::Int sub_100A2E7BC()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  unint64_t v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[9];

  v1 = v0;
  Hasher.init(_seed:)(v9);
  v2 = *v0;
  v3 = v1[1];
  sub_10001BBBC(v2, v3);
  Data.hash(into:)(v9, v2, v3);
  sub_10001BC14(v2, v3);
  v4 = (int *)type metadata accessor for OwnerSharingCircle(0);
  v5 = type metadata accessor for UUID(0);
  v6 = sub_100006204(&qword_1010F98B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(v9, v5, v6);
  dispatch thunk of Hashable.hash(into:)(v9, v5, v6);
  Hasher._combine(_:)(*((unsigned __int8 *)v1 + v4[7]));
  v7 = *(uint64_t *)((char *)v1 + v4[8]);
  swift_bridgeObjectRetain(v7);
  sub_100A2FEA8((uint64_t)v9, v7);
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(*((unsigned __int8 *)v1 + v4[9]));
  return Hasher._finalize()();
}

void sub_100A2E8E0(_QWORD *a1@<X8>)
{
  *a1 = &off_10104DE88;
}

uint64_t sub_100A2E8F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100A30B28();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_100A2E94C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100A30B28();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

unint64_t sub_100A2E998()
{
  _BYTE *v0;
  unint64_t v1;

  v1 = 0xD000000000000015;
  if (*v0 != 1)
    v1 = 0x726168536D657469;
  if (*v0)
    return v1;
  else
    return 0xD000000000000018;
}

uint64_t sub_100A2EA04()
{
  unsigned __int8 *v0;

  return sub_100A2E708(*v0);
}

uint64_t sub_100A2EA0C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100A30890(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100A2EA30(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100A303A8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100A2EA58(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100A303A8();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_100A2EA88(uint64_t a1, int *a2)
{
  uint64_t *v2;
  uint64_t *v4;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = v2;
  v6 = *v2;
  v7 = v4[1];
  sub_10001BBBC(v6, v7);
  Data.hash(into:)(a1, v6, v7);
  sub_10001BC14(v6, v7);
  v8 = type metadata accessor for UUID(0);
  v9 = sub_100006204(&qword_1010F98B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(a1, v8, v9);
  dispatch thunk of Hashable.hash(into:)(a1, v8, v9);
  Hasher._combine(_:)(*((unsigned __int8 *)v4 + a2[7]));
  v10 = *(uint64_t *)((char *)v4 + a2[8]);
  swift_bridgeObjectRetain(v10);
  sub_100A2FEA8(a1, v10);
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(*((unsigned __int8 *)v4 + a2[9]));
}

Swift::Int sub_100A2EB8C(uint64_t a1, int *a2)
{
  uint64_t *v2;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[9];

  v4 = v2;
  Hasher.init(_seed:)(v11);
  v5 = *v2;
  v6 = v4[1];
  sub_10001BBBC(v5, v6);
  Data.hash(into:)(v11, v5, v6);
  sub_10001BC14(v5, v6);
  v7 = type metadata accessor for UUID(0);
  v8 = sub_100006204(&qword_1010F98B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(v11, v7, v8);
  dispatch thunk of Hashable.hash(into:)(v11, v7, v8);
  Hasher._combine(_:)(*((unsigned __int8 *)v4 + a2[7]));
  v9 = *(uint64_t *)((char *)v4 + a2[8]);
  swift_bridgeObjectRetain(v9);
  sub_100A2FEA8((uint64_t)v11, v9);
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(*((unsigned __int8 *)v4 + a2[9]));
  return Hasher._finalize()();
}

uint64_t sub_100A2ECA4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v6;

  v0 = type metadata accessor for URL(0);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = __chkstk_darwin(v0);
  v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000234D8(v2, qword_1011B7B10);
  sub_10001A9E8(v0, (uint64_t)qword_1011B7B10);
  type metadata accessor for BeaconStore(0);
  sub_1007EC9B8((uint64_t)v4);
  URL.appendingPathComponent(_:isDirectory:)(0xD000000000000012, 0x8000000100E59450, 1);
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v4, v0);
}

uint64_t sub_100A2ED74(id *a1)
{
  uint64_t v1;
  uint64_t v2;
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t ObjectType;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  void *v32;

  v2 = v1;
  v3 = *a1;
  v4 = objc_msgSend(*a1, "encryptedValues");
  v5 = static os_log_type_t.debug.getter(v4);
  if (qword_1010EA260 != -1)
    swift_once(&qword_1010EA260, sub_100B5DA30);
  v6 = qword_1011B7D40;
  v7 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v8 = swift_allocObject(v7, 72, 7);
  *(_OWORD *)(v8 + 16) = xmmword_100E22B00;
  v9 = v3;
  v10 = objc_msgSend(v9, "description", 1, 2);
  v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
  v13 = v12;

  *(_QWORD *)(v8 + 56) = &type metadata for String;
  *(_QWORD *)(v8 + 64) = sub_10001AA00();
  *(_QWORD *)(v8 + 32) = v11;
  *(_QWORD *)(v8 + 40) = v13;
  os_log(_:dso:log:_:_:)(v5, &_mh_execute_header, v6, "Updating OwnerSharingCircle record: %@", 38, 2, v8);
  swift_bridgeObjectRelease();
  v14 = type metadata accessor for PropertyListEncoder(0);
  v15 = swift_allocObject(v14, *(unsigned int *)(v14 + 48), *(unsigned __int16 *)(v14 + 52));
  PropertyListEncoder.init()(v15);
  v16 = (int *)type metadata accessor for OwnerSharingCircle(0);
  v29 = *(_QWORD *)(v2 + v16[8]);
  swift_bridgeObjectRetain(v29);
  v17 = sub_10001A9A8(&qword_101110318);
  v18 = sub_100A302E0();
  v19 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(&v29, v17, v18);
  v21 = v20;
  ObjectType = swift_getObjectType(v4);
  swift_release();
  v23 = swift_bridgeObjectRelease();
  v24 = UUID.uuidString.getter(v23);
  v31 = &type metadata for String;
  v32 = &protocol witness table for String;
  v29 = v24;
  v30 = v25;
  CKRecordKeyValueSetting.subscript.setter(&v29, 0xD000000000000010, 0x8000000100EC28D0, ObjectType);
  v31 = &type metadata for Data;
  v32 = &protocol witness table for Data;
  v29 = v19;
  v30 = v21;
  sub_10001BBBC(v19, v21);
  CKRecordKeyValueSetting.subscript.setter(&v29, 0x737265626D656DLL, 0xE700000000000000, ObjectType);
  v26 = *(unsigned __int8 *)(v2 + v16[7]);
  v31 = &type metadata for Int;
  v32 = &protocol witness table for Int;
  v29 = v26;
  CKRecordKeyValueSetting.subscript.setter(&v29, 0xD000000000000011, 0x8000000100EEC620, ObjectType);
  v27 = *(unsigned __int8 *)(v2 + v16[9]);
  v31 = &type metadata for Int;
  v32 = &protocol witness table for Int;
  v29 = v27;
  CKRecordKeyValueSetting.subscript.setter(&v29, 0x6E61747065636361, 0xEF65746174536563, ObjectType);
  swift_unknownObjectRelease(v4);
  return sub_10001BC14(v19, v21);
}

uint64_t sub_100A2F130(_QWORD *a1)
{
  _OWORD *v1;
  uint64_t v2;
  _OWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  __int128 v23;
  char v24;

  v3 = v1;
  v5 = sub_10001A9A8((uint64_t *)&unk_101110378);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  v11 = sub_100A303A8();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for OwnerSharingCircle.CodingKeys, &type metadata for OwnerSharingCircle.CodingKeys, v11, v9, v10);
  v23 = *v3;
  v24 = 0;
  v12 = sub_100036A58();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v23, &v24, v5, &type metadata for Data, v12);
  if (!v2)
  {
    v13 = (int *)type metadata accessor for OwnerSharingCircle(0);
    v14 = (char *)v3 + v13[5];
    LOBYTE(v23) = 1;
    v15 = type metadata accessor for UUID(0);
    v16 = sub_100006204(&qword_1010EDAC0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v14, &v23, v5, v15, v16);
    v17 = (char *)v3 + v13[6];
    LOBYTE(v23) = 2;
    KeyedEncodingContainer.encode<A>(_:forKey:)(v17, &v23, v5, v15, v16);
    LOBYTE(v23) = *((_BYTE *)v3 + v13[7]);
    v24 = 3;
    v18 = sub_100A30430();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v23, &v24, v5, &type metadata for SharingCircleType, v18);
    *(_QWORD *)&v23 = *(_QWORD *)((char *)v3 + v13[8]);
    v24 = 4;
    v19 = sub_10001A9A8(&qword_101110318);
    v20 = sub_100A302E0();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v23, &v24, v5, v19, v20);
    LOBYTE(v23) = *((_BYTE *)v3 + v13[9]);
    v24 = 5;
    v21 = sub_100200B34();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v23, &v24, v5, &type metadata for AcceptanceState, v21);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100A2F3B8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  void (*v26)(char *, _QWORD *, uint64_t);
  _QWORD *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  __int128 v44;
  char v45;

  v37 = a2;
  v38 = type metadata accessor for UUID(0);
  v40 = *(_QWORD *)(v38 - 8);
  v3 = __chkstk_darwin(v38);
  v5 = (char *)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v7 = (uint64_t *)((char *)&v34 - v6);
  v41 = sub_10001A9A8(&qword_101110350);
  v8 = *(_QWORD *)(v41 - 8);
  __chkstk_darwin(v41);
  v10 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = (int *)type metadata accessor for OwnerSharingCircle(0);
  __chkstk_darwin(v11);
  v13 = (char *)&v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1[3];
  v15 = a1[4];
  v42 = a1;
  sub_10001AA44(a1, v14);
  v16 = sub_100A303A8();
  v39 = v10;
  v17 = v43;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for OwnerSharingCircle.CodingKeys, &type metadata for OwnerSharingCircle.CodingKeys, v16, v14, v15);
  if (v17)
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v42);
  v18 = v5;
  v43 = v8;
  v19 = v40;
  v20 = v13;
  v21 = v38;
  v45 = 0;
  v22 = sub_100036994();
  v23 = v41;
  v24 = v39;
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v44, &type metadata for Data, &v45, v41, &type metadata for Data, v22);
  *(_OWORD *)v20 = v44;
  LOBYTE(v44) = 1;
  v36 = sub_100006204((unint64_t *)&qword_1010EDA90, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  KeyedDecodingContainer.decode<A>(_:forKey:)(v7, v21, &v44, v23, v21, v36);
  v25 = &v20[v11[5]];
  v35 = v20;
  v26 = *(void (**)(char *, _QWORD *, uint64_t))(v19 + 32);
  v26(v25, v7, v21);
  LOBYTE(v44) = 2;
  v27 = v18;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v18, v21, &v44, v23, v21, v36);
  v28 = (uint64_t)v35;
  v26(&v35[v11[6]], v27, v21);
  v45 = 3;
  v29 = sub_100A303EC();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v44, &type metadata for SharingCircleType, &v45, v41, &type metadata for SharingCircleType, v29);
  *(_BYTE *)(v28 + v11[7]) = v44;
  v30 = sub_10001A9A8(&qword_101110318);
  v45 = 4;
  v31 = sub_100A2F954();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v44, v30, &v45, v41, v30, v31);
  *(_QWORD *)(v28 + v11[8]) = v44;
  v45 = 5;
  v32 = sub_100200A70();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v44, &type metadata for AcceptanceState, &v45, v41, &type metadata for AcceptanceState, v32);
  (*(void (**)(char *, uint64_t))(v43 + 8))(v24, v41);
  *(_BYTE *)(v28 + v11[9]) = v44;
  sub_1001EFC30(v28, v37);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v42);
  return sub_1001EFC74(v28);
}

uint64_t sub_100A2F850@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100A2F3B8(a1, a2);
}

uint64_t sub_100A2F864(_QWORD *a1)
{
  return sub_100A2F130(a1);
}

uint64_t sub_100A2F878(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_100006204(&qword_1011115E0, type metadata accessor for OwnerSharingCircle, (uint64_t)&unk_100E59560);
  result = sub_100006204(&qword_101110300, type metadata accessor for OwnerSharingCircle, (uint64_t)&unk_100E59538);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t sub_100A2F8D4(uint64_t a1)
{
  uint64_t result;

  result = sub_100006204((unint64_t *)&unk_101108120, type metadata accessor for OwnerSharingCircle, (uint64_t)&unk_100E59588);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100A2F910()
{
  unint64_t result;

  result = qword_101110308;
  if (!qword_101110308)
  {
    result = swift_getWitnessTable("͍$", &type metadata for OwnerSharingCircle.ConversionError);
    atomic_store(result, (unint64_t *)&qword_101110308);
  }
  return result;
}

unint64_t sub_100A2F954()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_101110320;
  if (!qword_101110320)
  {
    v1 = sub_10001F784(&qword_101110318);
    v2[0] = sub_100006204((unint64_t *)&qword_1010EDA90, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v2[1] = sub_100A2F9D8();
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> [A : B], v1, v2);
    atomic_store(result, (unint64_t *)&qword_101110320);
  }
  return result;
}

unint64_t sub_100A2F9D8()
{
  unint64_t result;

  result = qword_101110330;
  if (!qword_101110330)
  {
    result = swift_getWitnessTable(byte_100E38718, &type metadata for OwnerCircleMemberState);
    atomic_store(result, (unint64_t *)&qword_101110330);
  }
  return result;
}

void sub_100A2FA1C(__int128 *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  unint64_t v20;
  uint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  int64_t v32;
  uint64_t v33;
  int64_t v34;
  char *v35;
  uint64_t v36;
  int64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;

  v4 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A9A8(&qword_1010F7AB0);
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (unsigned __int8 *)&v32 - v12;
  v14 = *(_QWORD *)(a2 + 64);
  v33 = a2 + 64;
  v15 = 1 << *(_BYTE *)(a2 + 32);
  v16 = -1;
  if (v15 < 64)
    v16 = ~(-1 << v15);
  v17 = v16 & v14;
  v34 = (unint64_t)(v15 + 63) >> 6;
  v32 = v34 - 1;
  v36 = a2;
  swift_bridgeObjectRetain(a2);
  v37 = 0;
  v35 = v7;
  if (v17)
  {
    v18 = __clz(__rbit64(v17)) | (v37 << 6);
LABEL_5:
    v19 = *(_BYTE *)(*(_QWORD *)(v36 + 48) + v18);
    v20 = *(_QWORD *)(v36 + 56) + *(_QWORD *)(v5 + 72) * v18;
    v21 = sub_10001A9A8(&qword_1010F7AB8);
    (*(void (**)(_BYTE *, unint64_t, uint64_t))(v5 + 16))(&v11[*(int *)(v21 + 48)], v20, v4);
    *v11 = v19;
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v11, 0, 1, v21);
    v7 = v35;
    goto LABEL_22;
  }
  v22 = v37 + 1;
  if (__OFADD__(v37, 1))
  {
    __break(1u);
LABEL_26:
    __break(1u);
    JUMPOUT(0x100A2FE88);
  }
  if (v22 < v34)
  {
    v23 = *(_QWORD *)(v33 + 8 * v22);
    if (v23)
    {
LABEL_9:
      v18 = __clz(__rbit64(v23)) + (v22 << 6);
      v37 = v22;
      goto LABEL_5;
    }
    v24 = v37 + 2;
    ++v37;
    if (v22 + 1 < v34)
    {
      v23 = *(_QWORD *)(v33 + 8 * v24);
      if (v23)
      {
        ++v22;
        goto LABEL_9;
      }
      v25 = v22 + 2;
      v37 = v22 + 1;
      if (v22 + 2 < v34)
      {
        v23 = *(_QWORD *)(v33 + 8 * v25);
        if (v23)
        {
          v22 += 2;
          goto LABEL_9;
        }
        while (1)
        {
          v22 = v25 + 1;
          if (__OFADD__(v25, 1))
            goto LABEL_26;
          if (v22 >= v34)
            break;
          v23 = *(_QWORD *)(v33 + 8 * v22);
          ++v25;
          if (v23)
            goto LABEL_9;
        }
        v37 = v32;
      }
    }
  }
  v26 = sub_10001A9A8(&qword_1010F7AB8);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v11, 1, 1, v26);
LABEL_22:
  sub_100005CF0((uint64_t)v11, (uint64_t)v13, &qword_1010F7AB0);
  v27 = sub_10001A9A8(&qword_1010F7AB8);
  if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 48))(v13, 1, v27) != 1)
  {
    v28 = *v13;
    (*(void (**)(char *, unsigned __int8 *, uint64_t))(v5 + 32))(v7, &v13[*(int *)(v27 + 48)], v4);
    v29 = *((_QWORD *)a1 + 8);
    v30 = a1[1];
    v38 = *a1;
    v39 = v30;
    v31 = a1[3];
    v40 = a1[2];
    v41 = v31;
    v42 = v29;
    __asm { BR              X8 }
  }
  swift_release();
  Hasher._combine(_:)(0);
}

void sub_100A2FEA8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  __n128 v18;
  Swift::UInt v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;
  int64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  Swift::UInt v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  int64_t v38;
  uint64_t v39;
  int64_t v40;
  uint64_t v41;
  int64_t v42;
  _OWORD v43[4];
  uint64_t v44;

  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A9A8((uint64_t *)&unk_1010F7820);
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)&v37 - v12;
  v14 = *(_QWORD *)(a2 + 64);
  v39 = a2 + 64;
  v15 = 1 << *(_BYTE *)(a2 + 32);
  v16 = -1;
  if (v15 < 64)
    v16 = ~(-1 << v15);
  v17 = v16 & v14;
  v40 = (unint64_t)(v15 + 63) >> 6;
  v41 = a2;
  v38 = v40 - 1;
  v18 = swift_bridgeObjectRetain(a2);
  v19 = 0;
  v42 = 0;
  if (!v17)
    goto LABEL_6;
LABEL_4:
  v20 = __clz(__rbit64(v17));
  v17 &= v17 - 1;
  v21 = v20 | (v42 << 6);
LABEL_5:
  v22 = v41;
  (*(void (**)(char *, unint64_t, uint64_t, __n128))(v5 + 16))(v11, *(_QWORD *)(v41 + 48) + *(_QWORD *)(v5 + 72) * v21, v4, v18);
  v23 = *(_BYTE *)(*(_QWORD *)(v22 + 56) + v21);
  v24 = sub_10001A9A8(&qword_1010F2B78);
  v11[*(int *)(v24 + 48)] = v23;
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v11, 0, 1, v24);
  while (1)
  {
    sub_100005CF0((uint64_t)v11, (uint64_t)v13, (uint64_t *)&unk_1010F7820);
    v30 = sub_10001A9A8(&qword_1010F2B78);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 48))(v13, 1, v30) == 1)
    {
      swift_release();
      Hasher._combine(_:)(v19);
      return;
    }
    v31 = *(int *)(v30 + 48);
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v13, v4);
    v32 = v13[v31];
    v33 = *(_QWORD *)(a1 + 64);
    v34 = *(_OWORD *)(a1 + 16);
    v43[0] = *(_OWORD *)a1;
    v43[1] = v34;
    v35 = *(_OWORD *)(a1 + 48);
    v43[2] = *(_OWORD *)(a1 + 32);
    v43[3] = v35;
    v44 = v33;
    v36 = sub_100006204(&qword_1010F98B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    dispatch thunk of Hashable.hash(into:)(v43, v4, v36);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    Hasher._combine(_:)(v32);
    v19 ^= Hasher._finalize()();
    if (v17)
      goto LABEL_4;
LABEL_6:
    v25 = v42 + 1;
    if (__OFADD__(v42, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v25 < v40)
    {
      v26 = *(_QWORD *)(v39 + 8 * v25);
      if (v26)
        goto LABEL_9;
      v27 = v42 + 2;
      ++v42;
      if (v25 + 1 < v40)
      {
        v26 = *(_QWORD *)(v39 + 8 * v27);
        if (v26)
        {
          ++v25;
LABEL_9:
          v17 = (v26 - 1) & v26;
          v21 = __clz(__rbit64(v26)) + (v25 << 6);
          v42 = v25;
          goto LABEL_5;
        }
        v28 = v25 + 2;
        v42 = v25 + 1;
        if (v25 + 2 < v40)
          break;
      }
    }
LABEL_21:
    v29 = sub_10001A9A8(&qword_1010F2B78);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v11, 1, 1, v29);
    v17 = 0;
  }
  v26 = *(_QWORD *)(v39 + 8 * v28);
  if (v26)
  {
    v25 += 2;
    goto LABEL_9;
  }
  while (1)
  {
    v25 = v28 + 1;
    if (__OFADD__(v28, 1))
      break;
    if (v25 >= v40)
    {
      v42 = v38;
      goto LABEL_21;
    }
    v26 = *(_QWORD *)(v39 + 8 * v25);
    ++v28;
    if (v26)
      goto LABEL_9;
  }
LABEL_27:
  __break(1u);
}

BOOL sub_100A3022C(uint64_t *a1, uint64_t a2)
{
  char v4;
  int *v5;

  _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(*a1, a1[1]);
  if ((v4 & 1) != 0
    && (v5 = (int *)type metadata accessor for OwnerSharingCircle(0),
        (static UUID.== infix(_:_:)((char *)a1 + v5[5], a2 + v5[5]) & 1) != 0)
    && (static UUID.== infix(_:_:)((char *)a1 + v5[6], a2 + v5[6]) & 1) != 0
    && *((unsigned __int8 *)a1 + v5[7]) == *(unsigned __int8 *)(a2 + v5[7])
    && (sub_100326834(*(uint64_t *)((char *)a1 + v5[8]), *(_QWORD *)(a2 + v5[8])) & 1) != 0)
  {
    return *((unsigned __int8 *)a1 + v5[9]) == *(unsigned __int8 *)(a2 + v5[9]);
  }
  else
  {
    return 0;
  }
}

unint64_t sub_100A302E0()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_101110338;
  if (!qword_101110338)
  {
    v1 = sub_10001F784(&qword_101110318);
    v2[0] = sub_100006204(&qword_1010EDAC0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v2[1] = sub_100A30364();
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> [A : B], v1, v2);
    atomic_store(result, (unint64_t *)&qword_101110338);
  }
  return result;
}

unint64_t sub_100A30364()
{
  unint64_t result;

  result = qword_101110348;
  if (!qword_101110348)
  {
    result = swift_getWitnessTable(byte_100E386F0, &type metadata for OwnerCircleMemberState);
    atomic_store(result, (unint64_t *)&qword_101110348);
  }
  return result;
}

unint64_t sub_100A303A8()
{
  unint64_t result;

  result = qword_101110358;
  if (!qword_101110358)
  {
    result = swift_getWitnessTable(asc_100E597F4, &type metadata for OwnerSharingCircle.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_101110358);
  }
  return result;
}

unint64_t sub_100A303EC()
{
  unint64_t result;

  result = qword_101110368;
  if (!qword_101110368)
  {
    result = swift_getWitnessTable(byte_100E597CC, &type metadata for SharingCircleType);
    atomic_store(result, (unint64_t *)&qword_101110368);
  }
  return result;
}

unint64_t sub_100A30430()
{
  unint64_t result;

  result = qword_101110388;
  if (!qword_101110388)
  {
    result = swift_getWitnessTable(byte_100E597A4, &type metadata for SharingCircleType);
    atomic_store(result, (unint64_t *)&qword_101110388);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for OwnerSharingCircle.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_100A304C0 + 4 * byte_100E59450[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_100A304F4 + 4 * byte_100E5944B[v4]))();
}

uint64_t sub_100A304F4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100A304FC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100A30504);
  return result;
}

uint64_t sub_100A30510(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100A30518);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_100A3051C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100A30524(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for OwnerSharingCircle.CodingKeys()
{
  return &type metadata for OwnerSharingCircle.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for OwnerSharingCircle.ConversionError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_100A3058C + 4 * byte_100E5945A[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_100A305C0 + 4 * byte_100E59455[v4]))();
}

uint64_t sub_100A305C0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100A305C8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100A305D0);
  return result;
}

uint64_t sub_100A305DC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100A305E4);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_100A305E8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100A305F0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for OwnerSharingCircle.ConversionError()
{
  return &type metadata for OwnerSharingCircle.ConversionError;
}

uint64_t storeEnumTagSinglePayload for SharingCircleType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_100A30658 + 4 * byte_100E59464[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_100A3068C + 4 * byte_100E5945F[v4]))();
}

uint64_t sub_100A3068C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100A30694(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100A3069CLL);
  return result;
}

uint64_t sub_100A306A8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100A306B0);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_100A306B4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100A306BC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SharingCircleType()
{
  return &type metadata for SharingCircleType;
}

unint64_t sub_100A306DC()
{
  unint64_t result;

  result = qword_1011103A0;
  if (!qword_1011103A0)
  {
    result = swift_getWitnessTable(byte_100E596C4, &type metadata for OwnerSharingCircle.ConversionError);
    atomic_store(result, (unint64_t *)&qword_1011103A0);
  }
  return result;
}

unint64_t sub_100A30724()
{
  unint64_t result;

  result = qword_1011103A8;
  if (!qword_1011103A8)
  {
    result = swift_getWitnessTable(a5_16, &type metadata for OwnerSharingCircle.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1011103A8);
  }
  return result;
}

unint64_t sub_100A3076C()
{
  unint64_t result;

  result = qword_1011103B0;
  if (!qword_1011103B0)
  {
    result = swift_getWitnessTable(byte_100E596EC, &type metadata for OwnerSharingCircle.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1011103B0);
  }
  return result;
}

unint64_t sub_100A307B4()
{
  unint64_t result;

  result = qword_1011103B8;
  if (!qword_1011103B8)
  {
    result = swift_getWitnessTable(asc_100E59714, &type metadata for OwnerSharingCircle.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1011103B8);
  }
  return result;
}

unint64_t sub_100A307FC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1011103C0;
  if (!qword_1011103C0)
  {
    v1 = sub_10001F784(&qword_1011103C8);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_1011103C0);
  }
  return result;
}

unint64_t sub_100A3084C()
{
  unint64_t result;

  result = qword_1011103D0;
  if (!qword_1011103D0)
  {
    result = swift_getWitnessTable(aU_33, &type metadata for SharingCircleType);
    atomic_store(result, (unint64_t *)&qword_1011103D0);
  }
  return result;
}

uint64_t sub_100A30890(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char v10;

  if (a1 == 0xD000000000000010)
  {
    v4 = 0x8000000100EC2FE0;
    if (a2 == 0x8000000100EC2FE0)
      goto LABEL_5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x8000000100EC2FE0, a1, a2, 0) & 1) != 0)
  {
    v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  if (a1 == 0x696669746E656469 && a2 == 0xEA00000000007265)
  {
    v6 = 0xEA00000000007265;
LABEL_11:
    swift_bridgeObjectRelease(v6);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x696669746E656469, 0xEA00000000007265, a1, a2, 0) & 1) != 0)
  {
    v6 = a2;
    goto LABEL_11;
  }
  if (a1 == 0xD000000000000010)
  {
    v7 = 0x8000000100EC28D0;
    if (a2 == 0x8000000100EC28D0)
      goto LABEL_16;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x8000000100EC28D0, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
LABEL_16:
    swift_bridgeObjectRelease(v7);
    return 2;
  }
  if (a1 == 0xD000000000000011 && a2 == 0x8000000100EEC620)
  {
    v8 = 0x8000000100EEC620;
LABEL_22:
    swift_bridgeObjectRelease(v8);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x8000000100EEC620, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_22;
  }
  if (a1 == 0x737265626D656DLL && a2 == 0xE700000000000000)
  {
    v9 = 0xE700000000000000;
LABEL_28:
    swift_bridgeObjectRelease(v9);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x737265626D656DLL, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_28;
  }
  if (a1 == 0x6E61747065636361 && a2 == 0xEF65746174536563)
  {
    swift_bridgeObjectRelease(0xEF65746174536563);
    return 5;
  }
  else
  {
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6E61747065636361, 0xEF65746174536563, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v10 & 1) != 0)
      return 5;
    else
      return 6;
  }
}

unint64_t sub_100A30B28()
{
  unint64_t result;

  result = qword_1011103D8;
  if (!qword_1011103D8)
  {
    result = swift_getWitnessTable("ݏ$", &type metadata for SharingCircleType);
    atomic_store(result, (unint64_t *)&qword_1011103D8);
  }
  return result;
}

uint64_t sub_100A30B6C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4;

  *(_BYTE *)(v4 + 48) = a4;
  *(_QWORD *)(v4 + 32) = a2;
  *(_QWORD *)(v4 + 40) = a3;
  *(_QWORD *)(v4 + 24) = a1;
  return swift_task_switch(sub_100A30B90, a1, 0);
}

uint64_t sub_100A30B90()
{
  uint64_t v0;

  sub_100A32284(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(unsigned __int8 *)(v0 + 48));
  return swift_task_switch(sub_100A30BD4, 0, 0);
}

uint64_t sub_100A30BD4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v11;
  uint64_t v12;

  if (qword_1010E99A0 != -1)
    swift_once(&qword_1010E99A0, sub_100146CAC);
  v1 = *(_QWORD *)(v0 + 40);
  v2 = type metadata accessor for Logger(0);
  sub_10001A9E8(v2, (uint64_t)qword_1011B67F0);
  swift_bridgeObjectRetain_n(v1, 2);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v11 = *(unsigned __int8 *)(v0 + 48);
    v7 = *(_QWORD *)(v0 + 32);
    v6 = *(_QWORD *)(v0 + 40);
    v8 = swift_slowAlloc(28, -1);
    v9 = swift_slowAlloc(32, -1);
    v12 = v9;
    *(_DWORD *)v8 = 141558531;
    *(_QWORD *)(v0 + 16) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v8 + 4, v8 + 12);
    *(_WORD *)(v8 + 12) = 2081;
    swift_bridgeObjectRetain(v6);
    *(_QWORD *)(v0 + 16) = sub_100016940(v7, v6, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v8 + 14, v8 + 22);
    swift_bridgeObjectRelease_n(v6, 3);
    *(_WORD *)(v8 + 22) = 1024;
    *(_DWORD *)(v0 + 16) = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 20, v8 + 24, v8 + 28);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Connected status for: %{private,mask.hash}s: %{BOOL}d", (uint8_t *)v8, 0x1Cu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 40), 2);
  }

  return swift_task_switch(sub_100A30DDC, *(_QWORD *)(v0 + 24), 0);
}

uint64_t sub_100A30DDC()
{
  uint64_t v0;

  sub_100A3269C();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100A30E10(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  unint64_t v3;

  v2[18] = a1;
  v2[19] = a2;
  v3 = (*(_QWORD *)(*(_QWORD *)(sub_10001A9A8((uint64_t *)&unk_1010EA690) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[20] = swift_task_alloc(v3);
  v2[21] = swift_task_alloc(v3);
  return swift_task_switch(sub_100A30E7C, 0, 0);
}

uint64_t sub_100A30E7C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v1 = *(_QWORD *)(v0 + 144);
  v2 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v0 + 176) = v2;
  if (v2)
  {
    v3 = *(_QWORD *)(v0 + 152);
    v4 = OBJC_IVAR____TtC12searchpartyd20PairedBluetoothState_monitorStartDate;
    *(_QWORD *)(v0 + 184) = OBJC_IVAR____TtC12searchpartyd20PairedBluetoothState_dictionaryOfConnected;
    *(_QWORD *)(v0 + 192) = v4;
    *(_QWORD *)(v0 + 200) = 0;
    v5 = v1 + 32;
    swift_bridgeObjectRetain(v1);
    sub_100030784(v5, v0 + 16);
    return swift_task_switch(sub_100A30F28, v3, 0);
  }
  else
  {
    v7 = *(_QWORD *)(v0 + 160);
    swift_task_dealloc(*(_QWORD *)(v0 + 168));
    swift_task_dealloc(v7);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100A30F28()
{
  uint64_t v0;

  sub_100030784(*(_QWORD *)(v0 + 152) + 112, v0 + 56);
  return swift_task_switch(sub_100A30F6C, 0, 0);
}

uint64_t sub_100A30F6C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;

  v1 = *(_QWORD *)(v0 + 152);
  v2 = sub_10001AA44((_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 80));
  sub_100A33A6C(v0 + 16, v1, *v2);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 56));
  v3 = *(_QWORD *)(v0 + 40);
  v4 = *(_QWORD *)(v0 + 48);
  sub_10001AA44((_QWORD *)(v0 + 16), v3);
  *(_QWORD *)(v0 + 208) = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 16))(v3, v4);
  *(_QWORD *)(v0 + 216) = v5;
  if (v5)
  {
    v6 = *(_QWORD *)(v0 + 152);
    v7 = sub_100A31134;
  }
  else
  {
    if (qword_1010E99A0 != -1)
      swift_once(&qword_1010E99A0, sub_100146CAC);
    v8 = type metadata accessor for Logger(0);
    v9 = sub_10001A9E8(v8, (uint64_t)qword_1011B67F0);
    v10 = Logger.logObject.getter(v9);
    v11 = static os_log_type_t.error.getter(v10);
    if (os_log_type_enabled(v10, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Cannot read udid from paired device.", v12, 2u);
      swift_slowDealloc(v12, -1, -1);
    }

    v13 = *(_QWORD *)(v0 + 176);
    v14 = *(_QWORD *)(v0 + 200) + 1;
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
    if (v14 == v13)
    {
      swift_bridgeObjectRelease();
      v15 = *(_QWORD *)(v0 + 160);
      swift_task_dealloc(*(_QWORD *)(v0 + 168));
      swift_task_dealloc(v15);
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
    v17 = *(_QWORD *)(v0 + 200) + 1;
    *(_QWORD *)(v0 + 200) = v17;
    v18 = *(_QWORD *)(v0 + 152);
    sub_100030784(*(_QWORD *)(v0 + 144) + 40 * v17 + 32, v0 + 16);
    v7 = sub_100A30F28;
    v6 = v18;
  }
  return swift_task_switch(v7, v6, 0);
}

uint64_t sub_100A31134()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  uint64_t v11;

  v2 = v0[26];
  v1 = v0[27];
  v3 = v0[20];
  v4 = v0[21];
  v5 = v0[19];
  v6 = v5 + v0[24];
  v7 = (_QWORD *)(v5 + v0[23]);
  swift_beginAccess(v7, v0 + 12, 33, 0);
  swift_bridgeObjectRetain(v1);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v7);
  v11 = *v7;
  *v7 = 0x8000000000000000;
  sub_10010E0AC(0, v2, v1, isUniquelyReferenced_nonNull_native);
  *v7 = v11;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_endAccess(v0 + 12);
  static Date.trustedNow.getter(v4);
  v9 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v4, 0, 1, v9);
  sub_1000A7378(v4, v3);
  swift_beginAccess(v6, v0 + 15, 33, 0);
  sub_1008FB460(v3, v6);
  swift_endAccess(v0 + 15);
  return swift_task_switch(sub_100A31274, 0, 0);
}

uint64_t sub_100A31274()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (qword_1010E99A0 != -1)
    swift_once(&qword_1010E99A0, sub_100146CAC);
  v1 = *(_QWORD *)(v0 + 216);
  v2 = type metadata accessor for Logger(0);
  sub_10001A9E8(v2, (uint64_t)qword_1011B67F0);
  swift_bridgeObjectRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter(v4);
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 216);
  if (v6)
  {
    v8 = *(_QWORD *)(v0 + 208);
    v9 = swift_slowAlloc(22, -1);
    v10 = swift_slowAlloc(32, -1);
    v17 = v10;
    *(_DWORD *)v9 = 141558275;
    *(_QWORD *)(v9 + 4) = 1752392040;
    *(_WORD *)(v9 + 12) = 2081;
    swift_bridgeObjectRetain(v7);
    *(_QWORD *)(v9 + 14) = sub_100016940(v8, v7, &v17);
    swift_bridgeObjectRelease_n(v7, 3);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Currently monitoring bluetooth status for %{private,mask.hash}s", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v9, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v7, 2);
  }
  v11 = *(_QWORD *)(v0 + 176);
  v12 = *(_QWORD *)(v0 + 200) + 1;
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
  if (v12 == v11)
  {
    swift_bridgeObjectRelease();
    v13 = *(_QWORD *)(v0 + 160);
    swift_task_dealloc(*(_QWORD *)(v0 + 168));
    swift_task_dealloc(v13);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v15 = *(_QWORD *)(v0 + 200) + 1;
    *(_QWORD *)(v0 + 200) = v15;
    v16 = *(_QWORD *)(v0 + 152);
    sub_100030784(*(_QWORD *)(v0 + 144) + 40 * v15 + 32, v0 + 16);
    return swift_task_switch(sub_100A30F28, v16, 0);
  }
}

uint64_t sub_100A31498()
{
  _QWORD *v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 32) = v0;
  *(_QWORD *)(v1 + 40) = *v0;
  return swift_task_switch(sub_100A314B8, v0, 0);
}

uint64_t sub_100A314B8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t (*v12)(void);
  uint64_t v13;

  if (qword_1010E99A0 != -1)
    swift_once(&qword_1010E99A0, sub_100146CAC);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_10001A9E8(v1, (uint64_t)qword_1011B67F0);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = v0[5];
    v6 = swift_slowAlloc(22, -1);
    v7 = swift_slowAlloc(64, -1);
    v13 = v7;
    *(_DWORD *)v6 = 136446466;
    v8 = _typeName(_:qualified:)(v5, 0);
    v0[2] = sub_100016940(v8, v9, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 2, v0 + 3, v6 + 4, v6 + 12);
    swift_bridgeObjectRelease();
    *(_WORD *)(v6 + 12) = 2082;
    v0[3] = sub_100016940(0xD000000000000010, 0x8000000100EEC7B0, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 3, v0 + 4, v6 + 14, v6 + 22);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "%{public}s.%{public}s.", (uint8_t *)v6, 0x16u);
    swift_arrayDestroy(v7, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);
  }

  v12 = (uint64_t (*)(void))((char *)&async function pointer to dispatch thunk of WorkItemQueue.invalidate()
                          + async function pointer to dispatch thunk of WorkItemQueue.invalidate());
  v10 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of WorkItemQueue.invalidate()
                                   + 1));
  v0[6] = v10;
  *v10 = v0;
  v10[1] = sub_100A316B4;
  return v12();
}

uint64_t sub_100A316B4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 32);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 48));
  return swift_task_switch(sub_100A3170C, v1, 0);
}

uint64_t sub_100A3170C()
{
  uint64_t v0;

  sub_100A32F6C();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100A3173C(double a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  *(_QWORD *)(v2 + 112) = v1;
  *(double *)(v2 + 104) = a1;
  v3 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  *(_QWORD *)(v2 + 120) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Date(0);
  *(_QWORD *)(v2 + 128) = v4;
  v5 = *(_QWORD *)(v4 - 8);
  *(_QWORD *)(v2 + 136) = v5;
  v6 = (*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v2 + 144) = swift_task_alloc(v6);
  *(_QWORD *)(v2 + 152) = swift_task_alloc(v6);
  return swift_task_switch(sub_100A317D4, v1, 0);
}

uint64_t sub_100A317D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  double v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  void (*v24)(uint64_t, uint64_t);
  double v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;

  v1 = *(_QWORD *)(v0 + 128);
  v2 = *(_QWORD *)(v0 + 136);
  v3 = *(_QWORD *)(v0 + 120);
  v4 = *(_QWORD *)(v0 + 112) + OBJC_IVAR____TtC12searchpartyd20PairedBluetoothState_monitorStartDate;
  swift_beginAccess(v4, v0 + 16, 0, 0);
  sub_10000F9B8(v4, v3, (uint64_t *)&unk_1010EA690);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_100004048(*(_QWORD *)(v0 + 120), (uint64_t *)&unk_1010EA690);
    if (qword_1010E99A0 != -1)
      swift_once(&qword_1010E99A0, sub_100146CAC);
    v5 = type metadata accessor for Logger(0);
    v6 = sub_10001A9E8(v5, (uint64_t)qword_1011B67F0);
    v7 = Logger.logObject.getter(v6);
    v8 = static os_log_type_t.error.getter(v7);
    if (os_log_type_enabled(v7, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Reading connected devices before starting the monitor!", v9, 2u);
      swift_slowDealloc(v9, -1, -1);
    }
    v10 = *(_QWORD *)(v0 + 112);

    v11 = (_QWORD *)(v10 + OBJC_IVAR____TtC12searchpartyd20PairedBluetoothState_dictionaryOfConnected);
    swift_beginAccess(v10 + OBJC_IVAR____TtC12searchpartyd20PairedBluetoothState_dictionaryOfConnected, v0 + 40, 0, 0);
    swift_bridgeObjectRetain(*v11);
    v13 = sub_100A3351C(v12, (uint64_t (*)(char *, unint64_t, uint64_t))sub_100A33678);
    swift_bridgeObjectRelease();
    v14 = sub_100508CB4(v13);
    swift_release();
    v15 = *(_QWORD *)(v0 + 144);
    v16 = *(_QWORD *)(v0 + 120);
    swift_task_dealloc(*(_QWORD *)(v0 + 152));
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    return (*(uint64_t (**)(_QWORD *))(v0 + 8))(v14);
  }
  else
  {
    v18 = *(double *)(v0 + 104);
    v20 = *(_QWORD *)(v0 + 144);
    v19 = *(_QWORD *)(v0 + 152);
    v21 = *(_QWORD *)(v0 + 128);
    v22 = *(_QWORD *)(v0 + 136);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v22 + 32))(v19, *(_QWORD *)(v0 + 120), v21);
    static Date.trustedNow.getter(v20);
    v23 = Date.timeIntervalSince(_:)(v19);
    v24 = *(void (**)(uint64_t, uint64_t))(v22 + 8);
    *(_QWORD *)(v0 + 160) = v24;
    v24(v20, v21);
    if (qword_1010E99A0 != -1)
      swift_once(&qword_1010E99A0, sub_100146CAC);
    v25 = v18 - v23;
    v26 = type metadata accessor for Logger(0);
    v27 = sub_10001A9E8(v26, (uint64_t)qword_1011B67F0);
    *(_QWORD *)(v0 + 168) = v27;
    v28 = Logger.logObject.getter(v27);
    v29 = static os_log_type_t.default.getter(v28);
    if (os_log_type_enabled(v28, v29))
    {
      v30 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v30 = 134217984;
      *(double *)(v0 + 96) = v25;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 96, v0 + 104, v30 + 4, v30 + 12);
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "Waiting up to %f to find connected devices.", v30, 0xCu);
      swift_slowDealloc(v30, -1, -1);
    }

    v31 = static Duration.seconds(_:)(v25);
    v33 = v32;
    v34 = async function pointer to withTimeout<A>(_:block:)[1];
    swift_retain();
    v35 = (_QWORD *)swift_task_alloc(v34);
    *(_QWORD *)(v0 + 176) = v35;
    v36 = sub_10001A9A8(&qword_1011063B0);
    *v35 = v0;
    v35[1] = sub_100A31B74;
    return withTimeout<A>(_:block:)(v0 + 88, v31, v33, &unk_1011105B0, *(_QWORD *)(v0 + 112), v36);
  }
}

uint64_t sub_100A31B74()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 176);
  *(_QWORD *)(*v1 + 184) = v0;
  swift_task_dealloc(v3);
  v4 = *(_QWORD *)(v2 + 112);
  if (v0)
  {
    v5 = sub_100A31C44;
  }
  else
  {
    swift_release();
    v5 = sub_100A31BE4;
  }
  return swift_task_switch(v5, v4, 0);
}

uint64_t sub_100A31BE4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  (*(void (**)(_QWORD, _QWORD))(v0 + 160))(*(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 128));
  v1 = *(_QWORD *)(v0 + 88);
  v2 = *(_QWORD *)(v0 + 144);
  v3 = *(_QWORD *)(v0 + 120);
  swift_task_dealloc(*(_QWORD *)(v0 + 152));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v1);
}

uint64_t sub_100A31C44()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;

  v1 = swift_release();
  v2 = Logger.logObject.getter(v1);
  v3 = static os_log_type_t.default.getter(v2);
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Sending the device list we have now because of time out.", v4, 2u);
    swift_slowDealloc(v4, -1, -1);
  }
  v5 = *(_QWORD *)(v0 + 184);
  v6 = *(_QWORD *)(v0 + 152);
  v7 = *(void (**)(uint64_t, uint64_t))(v0 + 160);
  v8 = *(_QWORD *)(v0 + 128);
  v9 = *(_QWORD *)(v0 + 112);

  v10 = (_QWORD *)(v9 + OBJC_IVAR____TtC12searchpartyd20PairedBluetoothState_dictionaryOfConnected);
  swift_beginAccess(v9 + OBJC_IVAR____TtC12searchpartyd20PairedBluetoothState_dictionaryOfConnected, v0 + 64, 0, 0);
  swift_bridgeObjectRetain(*v10);
  v12 = sub_100A3351C(v11, (uint64_t (*)(char *, unint64_t, uint64_t))sub_100A33678);
  swift_bridgeObjectRelease();
  v13 = sub_100508CB4(v12);
  swift_release();
  swift_errorRelease(v5);
  v7(v6, v8);
  v14 = *(_QWORD *)(v0 + 144);
  v15 = *(_QWORD *)(v0 + 120);
  swift_task_dealloc(*(_QWORD *)(v0 + 152));
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  return (*(uint64_t (**)(_QWORD *))(v0 + 8))(v13);
}

uint64_t sub_100A31DA0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return swift_task_switch(sub_100A31DB8, 0, 0);
}

uint64_t sub_100A31DB8()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;

  v1 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  v0[4] = v1;
  v2 = sub_10001A9A8(&qword_1011063B0);
  *v1 = v0;
  v1[1] = sub_100A31E40;
  return withCheckedContinuation<A>(isolation:function:_:)(v0[2], 0, 0, 0xD00000000000002ELL, 0x8000000100EEC780, sub_100A3396C, v0[3], v2);
}

uint64_t sub_100A31E40()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 32));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_100A31E8C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v4 = sub_10001A9A8(&qword_101109210);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  __chkstk_darwin(v4);
  v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  v8 = *(unsigned __int8 *)(v5 + 80);
  v9 = (v8 + 24) & ~v8;
  v10 = swift_allocObject(&unk_1010A2760, v9 + v6, v8 | 7);
  *(_QWORD *)(v10 + 16) = a2;
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(v10 + v9, v7, v4);
  swift_retain();
  dispatch thunk of WorkItemQueue.enqueue(_:)(&unk_1011105C0, v10);
  swift_release();
  return swift_release();
}

uint64_t sub_100A31F7C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 48) = a1;
  *(_QWORD *)(v2 + 56) = a2;
  return swift_task_switch(sub_100A31F98, a1, 0);
}

uint64_t sub_100A31F98()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v1 = v0[6];
  v2 = OBJC_IVAR____TtC12searchpartyd20PairedBluetoothState_dictionaryOfConnected;
  v0[8] = OBJC_IVAR____TtC12searchpartyd20PairedBluetoothState_dictionaryOfConnected;
  v3 = (_QWORD *)(v1 + v2);
  swift_beginAccess(v1 + v2, v0 + 2, 0, 0);
  swift_bridgeObjectRetain(*v3);
  v5 = sub_100A3351C(v4, (uint64_t (*)(char *, unint64_t, uint64_t))sub_100A337C4);
  v0[9] = 0;
  swift_bridgeObjectRelease();
  v0[10] = *(_QWORD *)(v5 + 16);
  swift_release();
  return swift_task_switch(sub_100A32038, 0, 0);
}

uint64_t sub_100A32038()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;

  if (v0[10])
  {
    v1 = (_QWORD *)swift_task_alloc(dword_101110444);
    v0[11] = v1;
    *v1 = v0;
    v1[1] = sub_100A32168;
    return sub_100A32C58(v0[7]);
  }
  else
  {
    if (qword_1010E99A0 != -1)
      swift_once(&qword_1010E99A0, sub_100146CAC);
    v3 = type metadata accessor for Logger(0);
    v4 = sub_10001A9E8(v3, (uint64_t)qword_1011B67F0);
    v5 = Logger.logObject.getter(v4);
    v6 = static os_log_type_t.default.getter(v5);
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Fetching devices without timeout.", v7, 2u);
      swift_slowDealloc(v7, -1, -1);
    }
    v8 = v0[6];

    return swift_task_switch(sub_100A321B4, v8, 0);
  }
}

uint64_t sub_100A32168()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 88));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_100A321B4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRetain(*(_QWORD *)(v0[6] + v0[8]));
  v2 = sub_100A3351C(v1, (uint64_t (*)(char *, unint64_t, uint64_t))sub_100A33678);
  swift_bridgeObjectRelease();
  v0[12] = sub_100508CB4(v2);
  swift_release();
  return swift_task_switch(sub_100A32230, 0, 0);
}

uint64_t sub_100A32230()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v0 + 40) = *(_QWORD *)(v0 + 96);
  v1 = sub_10001A9A8(&qword_101109210);
  CheckedContinuation.resume(returning:)(v0 + 40, v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_100A32284(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  unsigned int (*v22)(uint64_t, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  unint64_t v28;
  char v29;
  void (*v30)(char *, uint64_t);
  _QWORD *v31;
  uint64_t v32;
  char isUniquelyReferenced_nonNull_native;
  char v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE v40[24];

  v36 = a3;
  v37 = a1;
  v38 = a2;
  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A9A8((uint64_t *)&unk_10110EE90);
  __chkstk_darwin(v8);
  v10 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10001A9A8(&qword_1010ED860);
  v12 = __chkstk_darwin(v11);
  v14 = (char *)&v35 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v12);
  v17 = (char *)&v35 - v16;
  v18 = __chkstk_darwin(v15);
  v20 = (char *)&v35 - v19;
  v35 = v3;
  WorkItemQueue.id.getter(v18);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v20, 0, 1, v4);
  type metadata accessor for WorkItemQueue(0);
  static WorkItemQueue.currentWorkItemQueueIdentifier.getter();
  v21 = (uint64_t)&v10[*(int *)(v8 + 48)];
  sub_10000F9B8((uint64_t)v20, (uint64_t)v10, &qword_1010ED860);
  sub_10000F9B8((uint64_t)v17, v21, &qword_1010ED860);
  v22 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (v22((uint64_t)v10, 1, v4) == 1)
  {
    sub_100004048((uint64_t)v17, &qword_1010ED860);
    sub_100004048((uint64_t)v20, &qword_1010ED860);
    if (v22(v21, 1, v4) == 1)
    {
      sub_100004048((uint64_t)v10, &qword_1010ED860);
LABEL_13:
      v31 = (_QWORD *)(v35 + OBJC_IVAR____TtC12searchpartyd20PairedBluetoothState_dictionaryOfConnected);
      swift_beginAccess(v35 + OBJC_IVAR____TtC12searchpartyd20PairedBluetoothState_dictionaryOfConnected, v40, 33, 0);
      v32 = v38;
      swift_bridgeObjectRetain(v38);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v31);
      v39 = *v31;
      *v31 = 0x8000000000000000;
      if ((v36 & 1) != 0)
        v34 = 1;
      else
        v34 = 2;
      sub_10010E0AC(v34, v37, v32, isUniquelyReferenced_nonNull_native);
      *v31 = v39;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_endAccess(v40);
      return;
    }
    goto LABEL_6;
  }
  sub_10000F9B8((uint64_t)v10, (uint64_t)v14, &qword_1010ED860);
  if (v22(v21, 1, v4) == 1)
  {
    sub_100004048((uint64_t)v17, &qword_1010ED860);
    sub_100004048((uint64_t)v20, &qword_1010ED860);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v14, v4);
LABEL_6:
    sub_100004048((uint64_t)v10, (uint64_t *)&unk_10110EE90);
    goto LABEL_7;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 32))(v7, v21, v4);
  v28 = sub_10024B788();
  v29 = dispatch thunk of static Equatable.== infix(_:_:)(v14, v7, v4, v28);
  v30 = *(void (**)(char *, uint64_t))(v5 + 8);
  v30(v7, v4);
  sub_100004048((uint64_t)v17, &qword_1010ED860);
  sub_100004048((uint64_t)v20, &qword_1010ED860);
  v30(v14, v4);
  sub_100004048((uint64_t)v10, &qword_1010ED860);
  if ((v29 & 1) != 0)
    goto LABEL_13;
LABEL_7:
  if (qword_1010E99A0 != -1)
    swift_once(&qword_1010E99A0, sub_100146CAC);
  v23 = type metadata accessor for Logger(0);
  v24 = sub_10001A9E8(v23, (uint64_t)qword_1011B67F0);
  v25 = Logger.logObject.getter(v24);
  v26 = static os_log_type_t.error.getter(v25);
  if (os_log_type_enabled(v25, v26))
  {
    v27 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v27 = 0;
    _os_log_impl((void *)&_mh_execute_header, v25, v26, "Incorrect work item queue usage for setIsNearby.", v27, 2u);
    swift_slowDealloc(v27, -1, -1);
  }

}

void sub_100A3269C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  unsigned int (*v21)(uint64_t, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  const char *v27;
  char *v28;
  unint64_t v29;
  char v30;
  void (*v31)(char *, uint64_t);
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(char *, uint64_t, uint64_t);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  _QWORD *v55;
  char v56[24];
  char v57[24];

  v1 = sub_10001A9A8(&qword_101109210);
  v51 = *(_QWORD *)(v1 - 8);
  v52 = v1;
  __chkstk_darwin(v1);
  v3 = (char *)&v51 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v53 = (char *)&v51 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10001A9A8((uint64_t *)&unk_10110EE90);
  __chkstk_darwin(v7);
  v9 = (char *)&v51 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10001A9A8(&qword_1010ED860);
  v11 = __chkstk_darwin(v10);
  v13 = (char *)&v51 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v11);
  v16 = (char *)&v51 - v15;
  v17 = __chkstk_darwin(v14);
  v19 = (char *)&v51 - v18;
  v54 = v0;
  WorkItemQueue.id.getter(v17);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v19, 0, 1, v4);
  type metadata accessor for WorkItemQueue(0);
  static WorkItemQueue.currentWorkItemQueueIdentifier.getter();
  v20 = (uint64_t)&v9[*(int *)(v7 + 48)];
  sub_10000F9B8((uint64_t)v19, (uint64_t)v9, &qword_1010ED860);
  sub_10000F9B8((uint64_t)v16, v20, &qword_1010ED860);
  v21 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (v21((uint64_t)v9, 1, v4) != 1)
  {
    sub_10000F9B8((uint64_t)v9, (uint64_t)v13, &qword_1010ED860);
    if (v21(v20, 1, v4) != 1)
    {
      v28 = v53;
      (*(void (**)(char *, uint64_t, uint64_t))(v5 + 32))(v53, v20, v4);
      v29 = sub_10024B788();
      v30 = dispatch thunk of static Equatable.== infix(_:_:)(v13, v28, v4, v29);
      v31 = *(void (**)(char *, uint64_t))(v5 + 8);
      v31(v28, v4);
      sub_100004048((uint64_t)v16, &qword_1010ED860);
      sub_100004048((uint64_t)v19, &qword_1010ED860);
      v31(v13, v4);
      sub_100004048((uint64_t)v9, &qword_1010ED860);
      if ((v30 & 1) != 0)
        goto LABEL_14;
LABEL_7:
      if (qword_1010E99A0 != -1)
        swift_once(&qword_1010E99A0, sub_100146CAC);
      v22 = type metadata accessor for Logger(0);
      v23 = sub_10001A9E8(v22, (uint64_t)qword_1011B67F0);
      v24 = Logger.logObject.getter(v23);
      v25 = static os_log_type_t.error.getter(v24);
      if (!os_log_type_enabled(v24, v25))
        goto LABEL_12;
      v26 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v26 = 0;
      v27 = "Incorrect work item queue usage for resumeContinuationsIfNeeded.";
      goto LABEL_11;
    }
    sub_100004048((uint64_t)v16, &qword_1010ED860);
    sub_100004048((uint64_t)v19, &qword_1010ED860);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v13, v4);
LABEL_6:
    sub_100004048((uint64_t)v9, (uint64_t *)&unk_10110EE90);
    goto LABEL_7;
  }
  sub_100004048((uint64_t)v16, &qword_1010ED860);
  sub_100004048((uint64_t)v19, &qword_1010ED860);
  if (v21(v20, 1, v4) != 1)
    goto LABEL_6;
  sub_100004048((uint64_t)v9, &qword_1010ED860);
LABEL_14:
  v32 = v54;
  v33 = (uint64_t *)(v54 + OBJC_IVAR____TtC12searchpartyd20PairedBluetoothState_continuations);
  swift_beginAccess(v54 + OBJC_IVAR____TtC12searchpartyd20PairedBluetoothState_continuations, v57, 1, 0);
  v34 = *v33;
  v35 = (_QWORD *)(v32 + OBJC_IVAR____TtC12searchpartyd20PairedBluetoothState_dictionaryOfConnected);
  swift_beginAccess(v32 + OBJC_IVAR____TtC12searchpartyd20PairedBluetoothState_dictionaryOfConnected, v56, 0, 0);
  v36 = *v35;
  swift_bridgeObjectRetain(v34);
  swift_bridgeObjectRetain(v36);
  v38 = sub_100A3351C(v37, (uint64_t (*)(char *, unint64_t, uint64_t))sub_100A337C4);
  swift_bridgeObjectRelease();
  v39 = *(_QWORD *)(v38 + 16);
  swift_release();
  if (!v39 && *(_QWORD *)(*v33 + 16))
  {
    *v33 = (uint64_t)_swiftEmptyArrayStorage;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain(*v35);
    v41 = sub_100A3351C(v40, (uint64_t (*)(char *, unint64_t, uint64_t))sub_100A33678);
    swift_bridgeObjectRelease();
    v42 = sub_100508CB4(v41);
    swift_release();
    v43 = *(_QWORD *)(v34 + 16);
    if (v43)
    {
      v45 = v51;
      v44 = v52;
      v46 = v34 + ((*(unsigned __int8 *)(v51 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v51 + 80));
      v47 = *(_QWORD *)(v51 + 72);
      v48 = *(void (**)(char *, uint64_t, uint64_t))(v51 + 16);
      do
      {
        v48(v3, v46, v44);
        v55 = v42;
        swift_retain();
        CheckedContinuation.resume(returning:)(&v55, v44);
        (*(void (**)(char *, uint64_t))(v45 + 8))(v3, v44);
        v46 += v47;
        --v43;
      }
      while (v43);
    }
    swift_release();
    swift_bridgeObjectRelease();
    if (qword_1010E99A0 != -1)
      swift_once(&qword_1010E99A0, sub_100146CAC);
    v49 = type metadata accessor for Logger(0);
    v50 = sub_10001A9E8(v49, (uint64_t)qword_1011B67F0);
    v24 = Logger.logObject.getter(v50);
    v25 = static os_log_type_t.default.getter(v24);
    if (!os_log_type_enabled(v24, v25))
      goto LABEL_12;
    v26 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v26 = 0;
    v27 = "Removed and resumed all continuations.";
LABEL_11:
    _os_log_impl((void *)&_mh_execute_header, v24, v25, v27, v26, 2u);
    swift_slowDealloc(v26, -1, -1);
LABEL_12:

    return;
  }
  swift_bridgeObjectRelease();
}

uint64_t sub_100A32C58(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2[7] = a1;
  v2[8] = v1;
  v2[9] = *v1;
  v3 = sub_10001A9A8(&qword_101109210);
  v2[10] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[11] = v4;
  v2[12] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100A32CC4, v1, 0);
}

uint64_t sub_100A32CC4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;

  if (qword_1010E99A0 != -1)
    swift_once(&qword_1010E99A0, sub_100146CAC);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_10001A9E8(v1, (uint64_t)qword_1011B67F0);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = *(_QWORD *)(v0 + 72);
    v6 = swift_slowAlloc(22, -1);
    v7 = swift_slowAlloc(64, -1);
    v20 = v7;
    *(_DWORD *)v6 = 136446466;
    v8 = _typeName(_:qualified:)(v5, 0);
    *(_QWORD *)(v0 + 40) = sub_100016940(v8, v9, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v6 + 4, v6 + 12);
    swift_bridgeObjectRelease();
    *(_WORD *)(v6 + 12) = 2082;
    *(_QWORD *)(v0 + 48) = sub_100016940(0xD00000000000001ELL, 0x8000000100EEC760, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56, v6 + 14, v6 + 22);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "%{public}s.%{public}s.", (uint8_t *)v6, 0x16u);
    swift_arrayDestroy(v7, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);
  }

  v10 = *(_QWORD *)(v0 + 64);
  (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 88) + 16))(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 80));
  v11 = (unint64_t *)(v10 + OBJC_IVAR____TtC12searchpartyd20PairedBluetoothState_continuations);
  swift_beginAccess(v11, v0 + 16, 33, 0);
  v12 = *v11;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v11);
  *v11 = v12;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v12 = sub_1007C88D8(0, *(_QWORD *)(v12 + 16) + 1, 1, v12);
    *v11 = v12;
  }
  v15 = *(_QWORD *)(v12 + 16);
  v14 = *(_QWORD *)(v12 + 24);
  if (v15 >= v14 >> 1)
  {
    v12 = sub_1007C88D8(v14 > 1, v15 + 1, 1, v12);
    *v11 = v12;
  }
  v16 = *(_QWORD *)(v0 + 88);
  v17 = *(_QWORD *)(v0 + 96);
  v18 = *(_QWORD *)(v0 + 80);
  *(_QWORD *)(v12 + 16) = v15 + 1;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v16 + 32))(v12+ ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80))+ *(_QWORD *)(v16 + 72) * v15, v17, v18);
  swift_endAccess(v0 + 16);
  swift_task_dealloc(v17);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100A32F6C()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  __n128 v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  void (*v22)(char *, unint64_t, uint64_t, __n128);
  __n128 v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint64_t v27;
  void (*v28)(char *, unint64_t, uint64_t, __n128);
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint8_t *v32;
  uint8_t *v33;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40[3];

  v1 = v0;
  v2 = *v0;
  v3 = sub_10001A9A8(&qword_101109210);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1010E99A0 != -1)
    swift_once(&qword_1010E99A0, sub_100146CAC);
  v7 = type metadata accessor for Logger(0);
  v38 = sub_10001A9E8(v7, (uint64_t)qword_1011B67F0);
  v8 = Logger.logObject.getter(v38);
  v9 = static os_log_type_t.default.getter(v8);
  if (os_log_type_enabled(v8, v9))
  {
    v10 = swift_slowAlloc(22, -1);
    v36 = swift_slowAlloc(64, -1);
    v40[0] = v36;
    *(_DWORD *)v10 = 136446466;
    v11 = _typeName(_:qualified:)(v2, 0);
    v39 = sub_100016940(v11, v12, v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, v40, v10 + 4, v10 + 12);
    swift_bridgeObjectRelease();
    *(_WORD *)(v10 + 12) = 2082;
    v39 = sub_100016940(0xD000000000000017, 0x8000000100EEC740, v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, v40, v10 + 14, v10 + 22);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "%{public}s.%{public}s.", (uint8_t *)v10, 0x16u);
    v13 = v36;
    swift_arrayDestroy(v36, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v13, -1, -1);
    swift_slowDealloc(v10, -1, -1);
  }

  v14 = (_QWORD *)((char *)v1 + OBJC_IVAR____TtC12searchpartyd20PairedBluetoothState_continuations);
  v15 = swift_beginAccess((char *)v1 + OBJC_IVAR____TtC12searchpartyd20PairedBluetoothState_continuations, v40, 1, 0);
  v16 = *v14;
  v17 = _swiftEmptyArrayStorage;
  *v14 = (uint64_t)_swiftEmptyArrayStorage;
  v18 = *(_QWORD *)(v16 + 16);
  if (v18)
  {
    v19 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
    v36 = v16;
    v37 = v6;
    v20 = v16 + v19;
    v21 = *(_QWORD *)(v4 + 72);
    v22 = *(void (**)(char *, unint64_t, uint64_t, __n128))(v4 + 16);
    v22(v6, v16 + v19, v3, v15);
    while (1)
    {
      v39 = (uint64_t)v17;
      v24 = CheckedContinuation.resume(returning:)(&v39, v3);
      v25 = Logger.logObject.getter(v24);
      v26 = static os_log_type_t.debug.getter(v25);
      if (os_log_type_enabled(v25, v26))
      {
        v27 = v3;
        v28 = v22;
        v29 = v21;
        v30 = v17;
        v31 = v4;
        v32 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v32 = 0;
        _os_log_impl((void *)&_mh_execute_header, v25, v26, "Resumed a continuation during clear / stop.", v32, 2u);
        v33 = v32;
        v4 = v31;
        v17 = v30;
        v21 = v29;
        v22 = v28;
        v3 = v27;
        v6 = v37;
        swift_slowDealloc(v33, -1, -1);
      }

      (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
      v20 += v21;
      if (!--v18)
        break;
      v22(v6, v20, v3, v23);
    }
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_100A332C0()
{
  uint64_t v0;

  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 112));
  swift_release();
  sub_100004048(v0 + OBJC_IVAR____TtC12searchpartyd20PairedBluetoothState_monitorStartDate, (uint64_t *)&unk_1010EA690);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_defaultActor_destroy(v0);
  return swift_defaultActor_deallocate(v0);
}

uint64_t sub_100A33324()
{
  return type metadata accessor for PairedBluetoothState(0);
}

uint64_t type metadata accessor for PairedBluetoothState(uint64_t a1)
{
  uint64_t result;

  result = qword_101110420;
  if (!qword_101110420)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for PairedBluetoothState);
  return result;
}

void sub_100A33368(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[6];

  v4[1] = &unk_100E59990;
  v4[2] = (char *)&value witness table for Builtin.NativeObject + 64;
  sub_1000A813C(319);
  if (v3 <= 0x3F)
  {
    v4[3] = *(_QWORD *)(v2 - 8) + 64;
    v4[4] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[5] = (char *)&value witness table for Builtin.BridgeObject + 64;
    swift_updateClassMetadata2(a1, 256, 6, v4, a1 + 80);
  }
}

uint64_t storeEnumTagSinglePayload for PairedBluetoothState.ConnectedState(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_100A33454 + 4 * byte_100E59905[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_100A33488 + 4 * byte_100E59900[v4]))();
}

uint64_t sub_100A33488(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100A33490(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100A33498);
  return result;
}

uint64_t sub_100A334A4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100A334ACLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_100A334B0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100A334B8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PairedBluetoothState.ConnectedState()
{
  return &type metadata for PairedBluetoothState.ConnectedState;
}

unint64_t sub_100A334D8()
{
  unint64_t result;

  result = qword_1011105A0;
  if (!qword_1011105A0)
  {
    result = swift_getWitnessTable(byte_100E599F8, &type metadata for PairedBluetoothState.ConnectedState);
    atomic_store(result, &qword_1011105A0);
  }
  return result;
}

uint64_t sub_100A3351C(uint64_t isStackAllocationSafe, uint64_t (*a2)(char *, unint64_t, uint64_t))
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char v6;
  unsigned int v7;
  unint64_t v8;
  unint64_t v9;
  size_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v14;

  v4 = v2;
  v5 = isStackAllocationSafe;
  v6 = *(_BYTE *)(isStackAllocationSafe + 32);
  v7 = v6 & 0x3F;
  v8 = (1 << v6) + 63;
  v9 = v8 >> 6;
  v10 = 8 * (v8 >> 6);
  if (v7 <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v8 >> 6), 8), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v14 - ((v10 + 15) & 0x3FFFFFFFFFFFFFF0), v10);
    v11 = a2((char *)&v14 - ((v10 + 15) & 0x3FFFFFFFFFFFFFF0), v9, v5);
    if (v2)
      swift_willThrow(v11);
    else
      return v11;
  }
  else
  {
    v12 = (void *)swift_slowAlloc(v10, -1);
    bzero(v12, v10);
    v4 = a2((char *)v12, v9, v5);
    swift_slowDealloc(v12, -1, -1);
  }
  return v4;
}

unint64_t *sub_100A33678(unint64_t *result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;

  v4 = 0;
  v5 = 0;
  v6 = a3 + 64;
  v7 = 1 << *(_BYTE *)(a3 + 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & *(_QWORD *)(a3 + 64);
  v10 = (unint64_t)(v7 + 63) >> 6;
  while (1)
  {
    if (v9)
    {
      v11 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v12 = v11 | (v5 << 6);
      goto LABEL_5;
    }
    v13 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v13 >= v10)
      return (unint64_t *)sub_10041C2C8(result, a2, v4, a3);
    v14 = *(_QWORD *)(v6 + 8 * v13);
    ++v5;
    if (!v14)
    {
      v5 = v13 + 1;
      if (v13 + 1 >= v10)
        return (unint64_t *)sub_10041C2C8(result, a2, v4, a3);
      v14 = *(_QWORD *)(v6 + 8 * v5);
      if (!v14)
      {
        v5 = v13 + 2;
        if (v13 + 2 >= v10)
          return (unint64_t *)sub_10041C2C8(result, a2, v4, a3);
        v14 = *(_QWORD *)(v6 + 8 * v5);
        if (!v14)
          break;
      }
    }
LABEL_20:
    v9 = (v14 - 1) & v14;
    v12 = __clz(__rbit64(v14)) + (v5 << 6);
LABEL_5:
    if (*(_BYTE *)(*(_QWORD *)(a3 + 56) + v12) == 1)
    {
      *(unint64_t *)((char *)result + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      if (__OFADD__(v4++, 1))
      {
        __break(1u);
        return (unint64_t *)sub_10041C2C8(result, a2, v4, a3);
      }
    }
  }
  v15 = v13 + 3;
  if (v15 >= v10)
    return (unint64_t *)sub_10041C2C8(result, a2, v4, a3);
  v14 = *(_QWORD *)(v6 + 8 * v15);
  if (v14)
  {
    v5 = v15;
    goto LABEL_20;
  }
  while (1)
  {
    v5 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v5 >= v10)
      return (unint64_t *)sub_10041C2C8(result, a2, v4, a3);
    v14 = *(_QWORD *)(v6 + 8 * v5);
    ++v15;
    if (v14)
      goto LABEL_20;
  }
LABEL_26:
  __break(1u);
  return result;
}

unint64_t *sub_100A337C4(unint64_t *result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;

  v4 = 0;
  v5 = 0;
  v6 = a3 + 64;
  v7 = 1 << *(_BYTE *)(a3 + 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & *(_QWORD *)(a3 + 64);
  v10 = (unint64_t)(v7 + 63) >> 6;
  while (1)
  {
    if (v9)
    {
      v11 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v12 = v11 | (v5 << 6);
      goto LABEL_5;
    }
    v13 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v13 >= v10)
      return (unint64_t *)sub_10041C2C8(result, a2, v4, a3);
    v14 = *(_QWORD *)(v6 + 8 * v13);
    ++v5;
    if (!v14)
    {
      v5 = v13 + 1;
      if (v13 + 1 >= v10)
        return (unint64_t *)sub_10041C2C8(result, a2, v4, a3);
      v14 = *(_QWORD *)(v6 + 8 * v5);
      if (!v14)
      {
        v5 = v13 + 2;
        if (v13 + 2 >= v10)
          return (unint64_t *)sub_10041C2C8(result, a2, v4, a3);
        v14 = *(_QWORD *)(v6 + 8 * v5);
        if (!v14)
          break;
      }
    }
LABEL_20:
    v9 = (v14 - 1) & v14;
    v12 = __clz(__rbit64(v14)) + (v5 << 6);
LABEL_5:
    if (!*(_BYTE *)(*(_QWORD *)(a3 + 56) + v12))
    {
      *(unint64_t *)((char *)result + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      if (__OFADD__(v4++, 1))
      {
        __break(1u);
        return (unint64_t *)sub_10041C2C8(result, a2, v4, a3);
      }
    }
  }
  v15 = v13 + 3;
  if (v15 >= v10)
    return (unint64_t *)sub_10041C2C8(result, a2, v4, a3);
  v14 = *(_QWORD *)(v6 + 8 * v15);
  if (v14)
  {
    v5 = v15;
    goto LABEL_20;
  }
  while (1)
  {
    v5 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v5 >= v10)
      return (unint64_t *)sub_10041C2C8(result, a2, v4, a3);
    v14 = *(_QWORD *)(v6 + 8 * v5);
    ++v15;
    if (v14)
      goto LABEL_20;
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_100A3390C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;

  v4 = (_QWORD *)swift_task_alloc(dword_1011105AC);
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_100004C28;
  v4[2] = a1;
  v4[3] = v1;
  return swift_task_switch(sub_100A31DB8, 0, 0);
}

uint64_t sub_100A3396C(uint64_t a1)
{
  uint64_t v1;

  return sub_100A31E8C(a1, v1);
}

uint64_t sub_100A33974()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = sub_10001A9A8(&qword_101109210);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100A339EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(sub_10001A9A8(&qword_101109210) - 8) + 80);
  v3 = *(_QWORD *)(v0 + 16);
  v4 = v0 + ((v2 + 24) & ~v2);
  v5 = (_QWORD *)swift_task_alloc(dword_1011105BC);
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_100004A74;
  v5[6] = v3;
  v5[7] = v4;
  return swift_task_switch(sub_100A31F98, v3, 0);
}

void sub_100A33A6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  void *v7;
  NSObject *v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  NSObject *v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  NSObject **v18;
  NSObject *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  id v26;
  os_unfair_lock_s *v27;
  uint64_t v28;
  id v29;
  NSObject *v30;
  os_log_type_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE v39[32];

  sub_100030784(a1, (uint64_t)&v38);
  v5 = sub_10001A9A8(&qword_1010ED560);
  v6 = sub_1001477D8();
  if (!swift_dynamicCast(&v37, &v38, v5, v6, 6))
    return;
  v7 = (void *)v37;
  v8 = sub_1004E38D4();
  if (!v8)
  {
    if (qword_1010E99A0 != -1)
      swift_once(&qword_1010E99A0, sub_100146CAC);
    v21 = type metadata accessor for Logger(0);
    v22 = sub_10001A9E8(v21, (uint64_t)qword_1011B67F0);
    v9 = Logger.logObject.getter(v22);
    v23 = static os_log_type_t.error.getter(v9);
    if (!os_log_type_enabled(v9, v23))
    {

      return;
    }
    v24 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v24 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, v23, "Cannot start monitor for device without identifier.", v24, 2u);
    swift_slowDealloc(v24, -1, -1);

    goto LABEL_22;
  }
  v9 = v8;
  v10 = OBJC_IVAR____TtC12searchpartyd27BluetoothConnectionObserver_currentlyMonitoringDevices;
  v11 = *(_QWORD *)(a3 + OBJC_IVAR____TtC12searchpartyd27BluetoothConnectionObserver_currentlyMonitoringDevices);
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v11 + 24));
  sub_1004E4458((uint64_t *)(v11 + 16), v7, (BOOL *)&v38);
  os_unfair_lock_unlock((os_unfair_lock_t)(v11 + 24));
  v12 = v38;
  swift_release();
  if ((v12 & 1) == 0)
  {
    v25 = a3 + OBJC_IVAR____TtC12searchpartyd27BluetoothConnectionObserver_delegate;
    *(_QWORD *)(v25 + 8) = &off_1010A2740;
    swift_unknownObjectWeakAssign(v25, a2);
    v26 = objc_msgSend(objc_allocWithZone((Class)NRDeviceMonitor), "initWithDeviceIdentifier:delegate:queue:", v9, a3, *(_QWORD *)(a3 + OBJC_IVAR____TtC12searchpartyd27BluetoothConnectionObserver_bluetoothObserverQueue));
    v27 = *(os_unfair_lock_s **)(a3 + v10);
    swift_retain();
    os_unfair_lock_lock(v27 + 6);
    sub_1004E3A78((uint64_t)&v27[4], v7, v26);
    os_unfair_lock_unlock(v27 + 6);
    swift_release();
    if (qword_1010E99A0 != -1)
      swift_once(&qword_1010E99A0, sub_100146CAC);
    v28 = type metadata accessor for Logger(0);
    sub_10001A9E8(v28, (uint64_t)qword_1011B67F0);
    v29 = v7;
    v30 = Logger.logObject.getter(v29);
    v31 = static os_log_type_t.default.getter(v30);
    if (os_log_type_enabled(v30, v31))
    {
      v32 = swift_slowAlloc(22, -1);
      v33 = swift_slowAlloc(32, -1);
      *(_DWORD *)v32 = 141558275;
      v37 = 1752392040;
      v38 = v33;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, &v38, v32 + 4, v32 + 12);
      *(_WORD *)(v32 + 12) = 2081;
      v34 = sub_1004DC360();
      if (v35)
      {
        v36 = v35;
      }
      else
      {
        v34 = 0;
        v36 = 0xE000000000000000;
      }
      v37 = sub_100016940(v34, v36, &v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, &v38, v32 + 14, v32 + 22);

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "Monitor started for %{private,mask.hash}s", (uint8_t *)v32, 0x16u);
      swift_arrayDestroy(v33, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v33, -1, -1);
      swift_slowDealloc(v32, -1, -1);

      return;
    }

LABEL_22:
    return;
  }
  if (qword_1010E99A0 != -1)
    swift_once(&qword_1010E99A0, sub_100146CAC);
  v13 = type metadata accessor for Logger(0);
  sub_10001A9E8(v13, (uint64_t)qword_1011B67F0);
  v14 = v9;
  v15 = Logger.logObject.getter(v14);
  v16 = static os_log_type_t.default.getter(v15);
  if (os_log_type_enabled(v15, v16))
  {
    v17 = swift_slowAlloc(22, -1);
    v18 = (NSObject **)swift_slowAlloc(8, -1);
    *(_DWORD *)v17 = 141558275;
    v38 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, v39, v17 + 4, v17 + 12);
    *(_WORD *)(v17 + 12) = 2113;
    v38 = (uint64_t)v14;
    v19 = v14;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, v39, v17 + 14, v17 + 22);
    *v18 = v9;

    _os_log_impl((void *)&_mh_execute_header, v15, v16, "Monitor already started for device %{private,mask.hash}@.", (uint8_t *)v17, 0x16u);
    v20 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v18, 1, v20);
    swift_slowDealloc(v18, -1, -1);
    swift_slowDealloc(v17, -1, -1);

  }
  else
  {

  }
}

uint64_t sub_100A33FD8(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  NSObject *v8;
  _QWORD *v9;
  uint64_t v10;
  void *v11;
  id v12;
  char isEscapingClosureAtFileLocation;
  uint64_t result;
  _QWORD v15[6];

  v7 = static os_log_type_t.debug.getter(a1);
  if (qword_1010EA310 != -1)
    swift_once(&qword_1010EA310, sub_100B5E2C8);
  os_log(_:dso:log:_:_:)(v7, &_mh_execute_header, qword_1011B7DF0, "AccessoryDiscoveryService.initiatePairing", 41, 2, _swiftEmptyArrayStorage);
  v8 = *(NSObject **)(v3 + 48);
  v9 = (_QWORD *)swift_allocObject(&unk_1010A2B00, 48, 7);
  v9[2] = a2;
  v9[3] = a3;
  v9[4] = a1;
  v9[5] = v3;
  v10 = swift_allocObject(&unk_1010A2B28, 32, 7);
  *(_QWORD *)(v10 + 16) = sub_100A39EA8;
  *(_QWORD *)(v10 + 24) = v9;
  v15[4] = sub_10005CBA4;
  v15[5] = v10;
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 1107296256;
  v15[2] = sub_10001D8B8;
  v15[3] = &unk_1010A2B40;
  v11 = _Block_copy(v15);
  swift_retain();
  v12 = a1;
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v8, v11);
  _Block_release(v11);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v10, "", 130, 253, 27, 1);
  swift_release();
  result = swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    __break(1u);
  return result;
}

uint64_t sub_100A34180()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_1000234D8(v0, qword_1011B7B28);
  sub_10001A9E8(v0, (uint64_t)qword_1011B7B28);
  return Logger.init(subsystem:category:)(0xD00000000000001DLL, 0x8000000100EC5D30, 0xD000000000000012, 0x8000000100EEC8B0);
}

Swift::Int sub_100A34200()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  String.hash(into:)(v1, 0xD000000000000030, 0x8000000100EC5370);
  return Hasher._finalize()();
}

uint64_t sub_100A34254(uint64_t a1)
{
  return String.hash(into:)(a1, 0xD000000000000030, 0x8000000100EC5370);
}

Swift::Int sub_100A34270()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  String.hash(into:)(v1, 0xD000000000000030, 0x8000000100EC5370);
  return Hasher._finalize()();
}

uint64_t sub_100A342C0@<X0>(uint64_t *a1@<X0>, BOOL *a2@<X8>)
{
  Swift::String v3;
  void *v4;
  Swift::Int v5;
  uint64_t result;

  v3._countAndFlagsBits = *a1;
  v4 = (void *)a1[1];
  v3._object = v4;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10104D2D0, v3);
  result = swift_bridgeObjectRelease(v4);
  *a2 = v5 != 0;
  return result;
}

void sub_100A34310(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000030;
  a1[1] = 0x8000000100EC5370;
}

uint64_t sub_100A34330()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_1000234D8(v0, qword_1011B7B40);
  v1 = sub_10001A9E8(v0, (uint64_t)qword_1011B7B40);
  if (qword_1010EA120 != -1)
    swift_once(&qword_1010EA120, sub_100A34180);
  v2 = sub_10001A9E8(v0, (uint64_t)qword_1011B7B28);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

id sub_100A343C0()
{
  uint64_t v0;
  void *v1;
  id v2;
  objc_class *v3;
  char *v4;
  id v5;
  void *v6;
  id v7;
  objc_super v9;

  v1 = *(void **)(v0 + 64);
  if (v1)
  {
    v2 = *(id *)(v0 + 64);
  }
  else
  {
    v3 = (objc_class *)type metadata accessor for AccessoryDiscoveryTrampoline();
    v4 = (char *)objc_allocWithZone(v3);
    *(_QWORD *)&v4[OBJC_IVAR____TtC12searchpartyd28AccessoryDiscoveryTrampoline_implementation] = v0;
    v9.receiver = v4;
    v9.super_class = v3;
    swift_retain();
    v5 = objc_msgSendSuper2(&v9, "init");
    v6 = *(void **)(v0 + 64);
    *(_QWORD *)(v0 + 64) = v5;
    v2 = v5;

    v1 = 0;
  }
  v7 = v1;
  return v2;
}

uint64_t sub_100A34458(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;

  v3 = v2;
  v22 = a1;
  v23 = a2;
  v4 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(v3 + 16) = 0xD000000000000019;
  *(_QWORD *)(v3 + 24) = 0x8000000100E59AA0;
  sub_10001F6FC();
  v14 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v11 + 104))(v13, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v10);
  static DispatchQoS.unspecified.getter(v14);
  v24 = _swiftEmptyArrayStorage;
  v15 = sub_100006204((unint64_t *)&qword_1010F0E20, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v16 = sub_10001A9A8((uint64_t *)&unk_1010EA6B0);
  v17 = sub_1000193A4((unint64_t *)&qword_1010F0E30, (uint64_t *)&unk_1010EA6B0, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v24, v16, v17, v4, v15);
  *(_QWORD *)(v3 + 48) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD00000000000003FLL, 0x8000000100EECBB0, v9, v6, v13, 0);
  v18 = type metadata accessor for XPCSessionManager(0);
  swift_allocObject(v18, *(unsigned int *)(v18 + 48), *(unsigned __int16 *)(v18 + 52));
  *(_QWORD *)(v3 + 56) = XPCSessionManager.init(name:)(0xD000000000000019, 0x8000000100E59AA0);
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  v19 = v23;
  *(_QWORD *)(v3 + 32) = v22;
  *(_QWORD *)(v3 + 40) = v19;
  return v3;
}

uint64_t sub_100A34688()
{
  uint64_t v0;
  NSObject *v1;
  uint64_t v2;
  void *v3;
  uint64_t result;
  _QWORD v5[6];

  v1 = *(NSObject **)(v0 + 48);
  v2 = swift_allocObject(&unk_1010A2880, 32, 7);
  *(_QWORD *)(v2 + 16) = sub_100A35828;
  *(_QWORD *)(v2 + 24) = v0;
  v5[4] = sub_10001D850;
  v5[5] = v2;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 1107296256;
  v5[2] = sub_10001D8B8;
  v5[3] = &unk_1010A2898;
  v3 = _Block_copy(v5);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v1, v3);
  _Block_release(v3);
  LOBYTE(v1) = swift_isEscapingClosureAtFileLocation(v2, "", 130, 48, 27, 1);
  swift_release();
  result = swift_release();
  if ((v1 & 1) != 0)
    __break(1u);
  return result;
}

uint64_t sub_100A34790(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  void *v16;
  id v17;
  void *v18;
  void *v19;
  id v20;
  id v21;
  uint64_t v23;
  uint64_t v24;

  v2 = type metadata accessor for XPCServiceDescription(0);
  v23 = *(_QWORD *)(v2 - 8);
  v24 = v2;
  __chkstk_darwin(v2);
  v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for MachServiceName(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v23 - v10;
  v12 = (_QWORD *)type metadata accessor for DispatchPredicate(0);
  v13 = *(v12 - 1);
  __chkstk_darwin(v12);
  v15 = (uint64_t *)((char *)&v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v16 = *(void **)(a1 + 48);
  *v15 = v16;
  (*(void (**)(_QWORD *, _QWORD, _QWORD *))(v13 + 104))(v15, enum case for DispatchPredicate.onQueue(_:), v12);
  v17 = v16;
  LOBYTE(v16) = _dispatchPreconditionTest(_:)(v15);
  (*(void (**)(_QWORD *, _QWORD *))(v13 + 8))(v15, v12);
  if ((v16 & 1) == 0)
  {
    __break(1u);
    goto LABEL_5;
  }
  MachServiceName.init(_:)(0xD000000000000037, 0x8000000100EEC870);
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v9, v11, v5);
  v12 = sub_100A343C0();
  if (qword_1010EA130 != -1)
LABEL_5:
    swift_once(&qword_1010EA130, sub_100A34F30);
  v18 = (void *)qword_1011105E0;
  v19 = (void *)objc_opt_self(NSXPCInterface);
  v20 = v18;
  v21 = objc_msgSend(v19, "interfaceWithProtocol:", &OBJC_PROTOCOL___SPAccessoryDiscoveryXPCClientProtocol);
  swift_retain_n(a1, 3);
  XPCServiceDescription.init(name:options:exportedObject:exportedInterface:remoteObjectInterface:shouldAccept:interruptionHandler:invalidationHandler:)(v9, 0, v12, v20, v21, sub_100A35840, a1, sub_100A35844, a1, sub_100A35848, a1);
  XPCSessionManager.register(service:)(v4);
  (*(void (**)(char *, uint64_t))(v23 + 8))(v4, v24);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v11, v5);
}

uint64_t sub_100A34A10(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  void **v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  void ***v9;
  void **v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void **v16;
  char isEscapingClosureAtFileLocation;
  uint64_t result;
  void **v19;
  _QWORD v20[5];

  v2 = v1;
  if (qword_1010EA120 != -1)
    swift_once(&qword_1010EA120, sub_100A34180);
  v4 = type metadata accessor for Logger(0);
  sub_10001A9E8(v4, (uint64_t)qword_1011B7B28);
  v5 = a1;
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.default.getter(v6);
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = (void ***)swift_slowAlloc(8, -1);
    *(_DWORD *)v8 = 138412290;
    v19 = v5;
    v10 = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, v20, v8 + 4, v8 + 12);
    *v9 = v5;

    _os_log_impl((void *)&_mh_execute_header, v6, v7, "interruptionHandler: %@", v8, 0xCu);
    v11 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v9, 1, v11);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

  }
  else
  {

  }
  v12 = *(NSObject **)(v2 + 48);
  v13 = swift_allocObject(&unk_1010A29C0, 32, 7);
  *(_QWORD *)(v13 + 16) = v2;
  *(_QWORD *)(v13 + 24) = v5;
  v14 = swift_allocObject(&unk_1010A29E8, 32, 7);
  *(_QWORD *)(v14 + 16) = sub_100A381B8;
  *(_QWORD *)(v14 + 24) = v13;
  v20[3] = sub_10005CBA4;
  v20[4] = v14;
  v19 = _NSConcreteStackBlock;
  v20[0] = 1107296256;
  v20[1] = sub_10001D8B8;
  v20[2] = &unk_1010A2A00;
  v15 = _Block_copy(&v19);
  v16 = v5;
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v12, v15);
  _Block_release(v15);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v14, "", 130, 101, 27, 1);
  swift_release();
  result = swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    __break(1u);
  return result;
}

uint64_t sub_100A34CA0(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  void **v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  void ***v9;
  void **v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void **v16;
  char isEscapingClosureAtFileLocation;
  uint64_t result;
  void **v19;
  _QWORD v20[5];

  v2 = v1;
  if (qword_1010EA120 != -1)
    swift_once(&qword_1010EA120, sub_100A34180);
  v4 = type metadata accessor for Logger(0);
  sub_10001A9E8(v4, (uint64_t)qword_1011B7B28);
  v5 = a1;
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.default.getter(v6);
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = (void ***)swift_slowAlloc(8, -1);
    *(_DWORD *)v8 = 138412290;
    v19 = v5;
    v10 = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, v20, v8 + 4, v8 + 12);
    *v9 = v5;

    _os_log_impl((void *)&_mh_execute_header, v6, v7, "invalidationHandler: %@", v8, 0xCu);
    v11 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v9, 1, v11);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

  }
  else
  {

  }
  v12 = *(NSObject **)(v2 + 48);
  v13 = swift_allocObject(&unk_1010A28D0, 32, 7);
  *(_QWORD *)(v13 + 16) = v2;
  *(_QWORD *)(v13 + 24) = v5;
  v14 = swift_allocObject(&unk_1010A28F8, 32, 7);
  *(_QWORD *)(v14 + 16) = sub_100A3A0DC;
  *(_QWORD *)(v14 + 24) = v13;
  v20[3] = sub_10005CBA4;
  v20[4] = v14;
  v19 = _NSConcreteStackBlock;
  v20[0] = 1107296256;
  v20[1] = sub_10001D8B8;
  v20[2] = &unk_1010A2910;
  v15 = _Block_copy(&v19);
  v16 = v5;
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v12, v15);
  _Block_release(v15);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v14, "", 130, 95, 27, 1);
  swift_release();
  result = swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    __break(1u);
  return result;
}

id sub_100A34F30()
{
  id result;

  result = objc_msgSend((id)objc_opt_self(NSXPCInterface), "interfaceWithProtocol:", &OBJC_PROTOCOL___SPAccessoryDiscoveryXPCProtocol);
  qword_1011105E0 = (uint64_t)result;
  return result;
}

uint64_t sub_100A34F7C(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  void *v8;
  id v9;
  uint64_t result;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  id v16;
  char isEscapingClosureAtFileLocation;
  _QWORD aBlock[6];

  v2 = v1;
  v4 = type metadata accessor for DispatchPredicate(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (_QWORD *)((char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = (void *)v2[6];
  *v7 = v8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v5 + 104))(v7, enum case for DispatchPredicate.onQueue(_:), v4);
  v9 = v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)(v7);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v5 + 8))(v7, v4);
  if ((v8 & 1) == 0)
  {
    __break(1u);
    goto LABEL_9;
  }
  v11 = v2[9];
  if (!v11)
    return result;
  v12 = *(NSObject **)(v11 + 16);
  v13 = swift_allocObject(&unk_1010A2948, 32, 7);
  *(_QWORD *)(v13 + 16) = v11;
  *(_QWORD *)(v13 + 24) = a1;
  v14 = swift_allocObject(&unk_1010A2970, 32, 7);
  *(_QWORD *)(v14 + 16) = sub_100A3819C;
  *(_QWORD *)(v14 + 24) = v13;
  aBlock[4] = sub_10005CBA4;
  aBlock[5] = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10001D8B8;
  aBlock[3] = &unk_1010A2988;
  v15 = _Block_copy(aBlock);
  swift_retain_n(v11, 2);
  v16 = a1;
  swift_retain();
  swift_release();
  dispatch_sync(v12, v15);
  _Block_release(v15);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v14, "", 110, 87, 27, 1);
  swift_release();
  result = swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
LABEL_9:
    __break(1u);
    return result;
  }
  swift_retain();
  OS_dispatch_queue.sync<A>(execute:)(sub_100750FD8, v11, &type metadata for Bool);
  swift_release();
  if (LOBYTE(aBlock[0]) == 1)
  {
    sub_100427C84();
    swift_release();
    v2[9] = 0;
    swift_release();
    v2[10] = 0;
  }
  return swift_release();
}

uint64_t sub_100A351B4(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  Swift::String v14;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;

  v4 = *(_QWORD *)(a1 + 72);
  if (v4)
  {
    v5 = v4;
  }
  else
  {
    v6 = type metadata accessor for AccessoryDiscoverySession(0);
    swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
    v5 = sub_1004276D0();
    if (qword_1010EA120 != -1)
      swift_once(&qword_1010EA120, sub_100A34180);
    v7 = type metadata accessor for Logger(0);
    sub_10001A9E8(v7, (uint64_t)qword_1011B7B28);
    v8 = swift_retain_n(v5, 2);
    v9 = Logger.logObject.getter(v8);
    v10 = static os_log_type_t.default.getter(v9);
    if (os_log_type_enabled(v9, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc(12, -1);
      v19 = swift_slowAlloc(32, -1);
      *(_DWORD *)v11 = 136315138;
      v21 = 0xE100000000000000;
      v22 = v19;
      swift_retain();
      v12 = sub_10001A9A8((uint64_t *)&unk_1011106E0);
      v13 = sub_1000193A4(&qword_1010F7B00, (uint64_t *)&unk_1011106E0, aQ_54);
      v14._countAndFlagsBits = CustomStringConvertible.typeDescription.getter(v12, v13);
      String.append(_:)(v14);
      swift_bridgeObjectRelease();
      v15._countAndFlagsBits = 8250;
      v15._object = (void *)0xE200000000000000;
      String.append(_:)(v15);
      v16._countAndFlagsBits = CustomStringConvertible<>.addressDescription.getter(v12, v13);
      String.append(_:)(v16);
      swift_bridgeObjectRelease();
      v17._countAndFlagsBits = 62;
      v17._object = (void *)0xE100000000000000;
      String.append(_:)(v17);
      swift_release();
      v20 = sub_100016940(60, 0xE100000000000000, &v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, &v21, v11 + 4, v11 + 12);
      swift_release_n(v5, 2);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Created new AccessoryDiscoverySession: %s", v11, 0xCu);
      swift_arrayDestroy(v19, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v19, -1, -1);
      swift_slowDealloc(v11, -1, -1);

    }
    else
    {

      swift_release_n(v5, 2);
    }
    *(_QWORD *)(a1 + 72) = v5;
    swift_retain();
    swift_release();
  }
  swift_retain();
  swift_retain();
  sub_100308474(a2);
  swift_release_n(v5, 2);
  return swift_release();
}

uint64_t sub_100A35490(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  Swift::String v18;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;

  v4 = *(_QWORD *)(a1 + 88);
  if (v4)
  {
    v5 = v4;
  }
  else
  {
    v6 = type metadata accessor for LocalFindableAccessoryDiscoverySession(0);
    v7 = swift_allocObject(v6, 40, 7);
    v5 = sub_100B1AC90(v7);
    if (qword_1010EA120 != -1)
      swift_once(&qword_1010EA120, sub_100A34180);
    v8 = type metadata accessor for Logger(0);
    sub_10001A9E8(v8, (uint64_t)qword_1011B7B28);
    v9 = swift_retain_n(v5, 2);
    v10 = Logger.logObject.getter(v9);
    v11 = static os_log_type_t.default.getter(v10);
    if (os_log_type_enabled(v10, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc(12, -1);
      v20 = swift_slowAlloc(32, -1);
      *(_DWORD *)v12 = 136315138;
      v22 = 0xE100000000000000;
      v23 = v20;
      swift_retain();
      v13 = sub_10001A9A8((uint64_t *)&unk_1011106E0);
      v14 = sub_1000193A4(&qword_1010F7B00, (uint64_t *)&unk_1011106E0, aQ_54);
      v15._countAndFlagsBits = CustomStringConvertible.typeDescription.getter(v13, v14);
      String.append(_:)(v15);
      swift_bridgeObjectRelease();
      v16._countAndFlagsBits = 8250;
      v16._object = (void *)0xE200000000000000;
      String.append(_:)(v16);
      v17._countAndFlagsBits = CustomStringConvertible<>.addressDescription.getter(v13, v14);
      String.append(_:)(v17);
      swift_bridgeObjectRelease();
      v18._countAndFlagsBits = 62;
      v18._object = (void *)0xE100000000000000;
      String.append(_:)(v18);
      swift_release();
      v21 = sub_100016940(60, 0xE100000000000000, &v23);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22, v12 + 4, v12 + 12);
      swift_release_n(v5, 2);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Created new LocalFindableAccessoryDiscoverySession: %s", v12, 0xCu);
      swift_arrayDestroy(v20, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v20, -1, -1);
      swift_slowDealloc(v12, -1, -1);

    }
    else
    {

      swift_release_n(v5, 2);
    }
    *(_QWORD *)(a1 + 88) = v5;
    swift_retain();
    swift_release();
  }
  swift_retain();
  swift_retain();
  sub_100308474(a2);
  swift_release_n(v5, 2);
  return swift_release();
}

uint64_t sub_100A3576C()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 32));
  swift_release(*(_QWORD *)(v0 + 40));

  swift_release(*(_QWORD *)(v0 + 56));
  swift_release(*(_QWORD *)(v0 + 72));
  swift_release(*(_QWORD *)(v0 + 80));
  swift_release(*(_QWORD *)(v0 + 88));
  return v0;
}

uint64_t sub_100A357C8()
{
  uint64_t v0;

  sub_100A3576C();
  return swift_deallocClassInstance(v0, 96, 7);
}

uint64_t type metadata accessor for AccessoryDiscoveryService()
{
  return objc_opt_self(_TtC12searchpartyd25AccessoryDiscoveryService);
}

uint64_t sub_100A35808()
{
  return sub_100A34688();
}

uint64_t sub_100A35828()
{
  uint64_t v0;

  return sub_100A34790(v0);
}

uint64_t sub_100A35830()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100A35850()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100A35860(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  void **v18;
  id v19;
  uint64_t v20;
  void **v21;
  uint64_t v22;
  os_log_type_t v23;
  NSObject *v24;
  void **v25;
  uint64_t v26;
  uint8_t *v27;
  void **v28;
  void ***v29;
  uint64_t v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void **v36;
  uint64_t v37;
  void **v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  void *v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  void *v92;
  void ***v94;
  void *v95;
  uint64_t v96;
  uint64_t v97;
  void **v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD *v107;
  void **aBlock;
  uint64_t v109;
  uint64_t (*v110)(uint64_t);
  void *v111;
  void (*v112)();
  uint64_t v113;

  v99 = a4;
  v105 = a1;
  v106 = a2;
  v5 = type metadata accessor for DispatchWorkItemFlags(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v104 = (char *)&v94 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v103 = (char *)&v94 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS.QoSClass(0);
  v101 = *(_QWORD *)(v11 - 8);
  v102 = v11;
  __chkstk_darwin(v11);
  v100 = (char *)&v94 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for UUID(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v94 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_10001A9A8((uint64_t *)&unk_1011106F0);
  unsafeFromAsyncTask<A>(_:)(&aBlock, &unk_101121848, 0, v17);
  v18 = aBlock;
  if (aBlock)
  {
    v95 = a3;
    v96 = v6;
    v19 = objc_msgSend(a3, "identifier");
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v19);

    __chkstk_darwin(v20);
    *(&v94 - 2) = (void ***)v16;
    *(&v94 - 1) = (void ***)v18;
    v98 = v18;
    sub_10001A9A8(&qword_101110700);
    Lock.callAsFunction<A>(_:)(sub_100A39EE8);
    v21 = aBlock;
    v22 = (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v16, v13);
    if (v21)
    {
      v23 = static os_log_type_t.debug.getter(v22);
      if (qword_1010EA310 != -1)
        swift_once(&qword_1010EA310, sub_100B5E2C8);
      v24 = qword_1011B7DF0;
      if (os_log_type_enabled((os_log_t)qword_1011B7DF0, v23))
      {
        v25 = v21;
        v26 = swift_slowAlloc(12, -1);
        v97 = v9;
        v27 = (uint8_t *)v26;
        v94 = (void ***)swift_slowAlloc(8, -1);
        *(_DWORD *)v27 = 138412290;
        aBlock = v25;
        v28 = v25;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, &v109, v27 + 4, v27 + 12);
        v29 = v94;
        *v94 = v21;

        _os_log_impl((void *)&_mh_execute_header, v24, v23, "TRACE: Create AccessoryPairingSession for %@", v27, 0xCu);
        v30 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
        swift_arrayDestroy(v29, 1, v30);
        swift_slowDealloc(v29, -1, -1);
        v31 = v27;
        v9 = v97;
        swift_slowDealloc(v31, -1, -1);
      }
      v32 = v99;
      v33 = *(_QWORD *)(v99 + 32);
      v34 = *(_QWORD *)(v99 + 40);
      v35 = type metadata accessor for AccessoryPairingSession();
      swift_allocObject(v35, 144, 7);
      v36 = v21;
      swift_retain();
      swift_retain();
      v37 = sub_1007CDE74(v33, v34, v36);
      if (v37)
      {
        v38 = (void **)v37;
        v39 = static os_log_type_t.default.getter(v37);
        v40 = qword_1011B7DF0;
        v41 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
        v42 = swift_allocObject(v41, 72, 7);
        *(_OWORD *)(v42 + 16) = xmmword_100E22B00;
        aBlock = v38;
        swift_retain();
        v43 = String.init<A>(describing:)(&aBlock, v35);
        v45 = v44;
        *(_QWORD *)(v42 + 56) = &type metadata for String;
        *(_QWORD *)(v42 + 64) = sub_10001AA00();
        *(_QWORD *)(v42 + 32) = v43;
        *(_QWORD *)(v42 + 40) = v45;
        os_log(_:dso:log:_:_:)(v39, &_mh_execute_header, v40, "Created new AccessoryPairingSession: %@ ", 40, 2, v42);
        swift_bridgeObjectRelease();
        *(_QWORD *)(v32 + 80) = v38;
        swift_retain();
        swift_release();
        sub_1007CE510(v95, v105, v106);

      }
      else
      {
        v78 = static os_log_type_t.error.getter(0);
        os_log(_:dso:log:_:_:)(v78, &_mh_execute_header, qword_1011B7DF0, "Unable to create a new pairing session!", 39, 2, _swiftEmptyArrayStorage);
        sub_10001F6FC();
        v80 = v100;
        v79 = v101;
        v81 = v102;
        (*(void (**)(char *, _QWORD, uint64_t))(v101 + 104))(v100, enum case for DispatchQoS.QoSClass.default(_:), v102);
        v99 = static OS_dispatch_queue.global(qos:)(v80);
        (*(void (**)(char *, uint64_t))(v79 + 8))(v80, v81);
        v82 = swift_allocObject(&unk_1010A2C18, 32, 7);
        v83 = v106;
        *(_QWORD *)(v82 + 16) = v105;
        *(_QWORD *)(v82 + 24) = v83;
        v112 = sub_100A3A08C;
        v113 = v82;
        aBlock = _NSConcreteStackBlock;
        v109 = 1107296256;
        v110 = sub_100016FB8;
        v111 = &unk_1010A2C30;
        v84 = _Block_copy(&aBlock);
        v85 = swift_retain();
        v86 = v103;
        static DispatchQoS.unspecified.getter(v85);
        v107 = _swiftEmptyArrayStorage;
        v87 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
        v88 = v9;
        v89 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
        v90 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
        v91 = v104;
        dispatch thunk of SetAlgebra.init<A>(_:)(&v107, v89, v90, v5, v87);
        v92 = (void *)v99;
        OS_dispatch_queue.async(group:qos:flags:execute:)(0, v86, v91, v84);

        _Block_release(v84);
        (*(void (**)(char *, uint64_t))(v96 + 8))(v91, v5);
        (*(void (**)(char *, uint64_t))(v88 + 8))(v86, v8);
      }
    }
    else
    {
      v64 = static os_log_type_t.error.getter(v22);
      if (qword_1010EA310 != -1)
        swift_once(&qword_1010EA310, sub_100B5E2C8);
      os_log(_:dso:log:_:_:)(v64, &_mh_execute_header, qword_1011B7DF0, "No peripheral for accessory.", 28, 2, _swiftEmptyArrayStorage);
      sub_10001F6FC();
      v66 = v100;
      v65 = v101;
      v67 = v102;
      (*(void (**)(char *, _QWORD, uint64_t))(v101 + 104))(v100, enum case for DispatchQoS.QoSClass.default(_:), v102);
      v68 = (void *)static OS_dispatch_queue.global(qos:)(v66);
      (*(void (**)(char *, uint64_t))(v65 + 8))(v66, v67);
      v69 = swift_allocObject(&unk_1010A2BC8, 32, 7);
      v70 = v106;
      *(_QWORD *)(v69 + 16) = v105;
      *(_QWORD *)(v69 + 24) = v70;
      v112 = sub_100A39F00;
      v113 = v69;
      aBlock = _NSConcreteStackBlock;
      v109 = 1107296256;
      v110 = sub_100016FB8;
      v111 = &unk_1010A2BE0;
      v71 = _Block_copy(&aBlock);
      v72 = swift_retain();
      v73 = v103;
      static DispatchQoS.unspecified.getter(v72);
      v107 = _swiftEmptyArrayStorage;
      v74 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      v75 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
      v76 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
      v77 = v104;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v107, v75, v76, v5, v74);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0, v73, v77, v71);

      _Block_release(v71);
      (*(void (**)(char *, uint64_t))(v96 + 8))(v77, v5);
      (*(void (**)(char *, uint64_t))(v9 + 8))(v73, v8);
    }
  }
  else
  {
    v97 = v9;
    v46 = sub_100059390();
    v47 = swift_allocError(&type metadata for CentralManager.Error, v46, 0, 0);
    *(_QWORD *)v48 = 15;
    *(_OWORD *)(v48 + 8) = 0u;
    *(_OWORD *)(v48 + 24) = 0u;
    *(_BYTE *)(v48 + 40) = 11;
    swift_willThrow(v47);
    v49 = swift_errorRelease(v47);
    v50 = static os_log_type_t.error.getter(v49);
    if (qword_1010EA310 != -1)
      swift_once(&qword_1010EA310, sub_100B5E2C8);
    os_log(_:dso:log:_:_:)(v50, &_mh_execute_header, qword_1011B7DF0, "Cannot initiate pairing without central manager.", 48, 2, _swiftEmptyArrayStorage);
    sub_10001F6FC();
    v52 = v100;
    v51 = v101;
    v53 = v102;
    (*(void (**)(char *, _QWORD, uint64_t))(v101 + 104))(v100, enum case for DispatchQoS.QoSClass.default(_:), v102);
    v54 = (void *)static OS_dispatch_queue.global(qos:)(v52);
    (*(void (**)(char *, uint64_t))(v51 + 8))(v52, v53);
    v55 = swift_allocObject(&unk_1010A2B78, 32, 7);
    v56 = v106;
    *(_QWORD *)(v55 + 16) = v105;
    *(_QWORD *)(v55 + 24) = v56;
    v112 = sub_100A3A08C;
    v113 = v55;
    aBlock = _NSConcreteStackBlock;
    v109 = 1107296256;
    v110 = sub_100016FB8;
    v111 = &unk_1010A2B90;
    v57 = _Block_copy(&aBlock);
    v58 = swift_retain();
    v59 = v103;
    static DispatchQoS.unspecified.getter(v58);
    v107 = _swiftEmptyArrayStorage;
    v60 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v61 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v62 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
    v63 = v104;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v107, v61, v62, v5, v60);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v59, v63, v57);
    _Block_release(v57);

    (*(void (**)(char *, uint64_t))(v6 + 8))(v63, v5);
    (*(void (**)(char *, uint64_t))(v97 + 8))(v59, v8);
  }
  return swift_release();
}

void sub_100A362B4(void (*a1)(void *))
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;

  type metadata accessor for SPPairingSessionError(0);
  v3 = v2;
  v7 = 1;
  v4 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
  v5 = sub_100006204(&qword_1010EB450, (uint64_t (*)(uint64_t))type metadata accessor for SPPairingSessionError, (uint64_t)&unk_100E217DC);
  _BridgedStoredNSError.init(_:userInfo:)(&v8, &v7, v4, v3, v5);
  v6 = v8;
  a1(v8);

}

uint64_t sub_100A3635C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v4[24] = a3;
  v4[25] = a4;
  v4[22] = a1;
  v4[23] = a2;
  v5 = sub_10001A9A8(&qword_1010EF7C0);
  v4[26] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[27] = v6;
  v7 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[28] = swift_task_alloc(v7);
  v4[29] = swift_task_alloc(v7);
  v8 = type metadata accessor for UUID(0);
  v4[30] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v4[31] = v9;
  v10 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[32] = swift_task_alloc(v10);
  v4[33] = swift_task_alloc(v10);
  return swift_task_switch(sub_100A3640C, 0, 0);
}

uint64_t sub_100A3640C()
{
  uint64_t v0;
  uint64_t result;
  _QWORD *v2;
  uint64_t (__cdecl *v3)();

  if (qword_1010EA5B0 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v0 + 96, 0, 0);
  result = sub_10008180C((uint64_t)&xmmword_10111E6C0, v0 + 56);
  if (*(_QWORD *)(v0 + 80))
  {
    sub_10000F9FC((__int128 *)(v0 + 56), v0 + 16);
    sub_10001AA44((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
    v3 = (uint64_t (__cdecl *)())((char *)&dword_1010EBC18 + dword_1010EBC18);
    v2 = (_QWORD *)swift_task_alloc(unk_1010EBC1C);
    *(_QWORD *)(v0 + 272) = v2;
    *v2 = v0;
    v2[1] = sub_100A364F0;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100A364F0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 272);
  *(_QWORD *)(*(_QWORD *)v1 + 280) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100A3654C, 0, 0);
}

uint64_t sub_100A3654C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  void *v3;
  id v4;
  unsigned __int8 v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  void *v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  _BOOL4 v20;
  void *v21;
  uint8_t *v22;
  id v23;
  id v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  os_log_type_t v36;
  NSObject *v37;
  uint8_t *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(id, uint64_t);
  id v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;

  v1 = (_QWORD *)(v0 + 16);
  v2 = v0 + 152;
  if (*(_QWORD *)(v0 + 280))
  {
    v3 = *(void **)(v0 + 176);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    v4 = objc_msgSend(v3, "identifier");
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v4);

    LOBYTE(v4) = objc_msgSend(v3, "checkSerialNumber");
    v5 = objc_msgSend(v3, "verifyFMNID");
    v6 = objc_msgSend(v3, "verifyWithServer");
    if ((v4 & 1) != 0)
    {
      if ((v5 & 1) != 0)
      {
        if (v6)
        {
          v7 = *(_QWORD *)(v0 + 256);
          (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 248) + 16))(v7, *(_QWORD *)(v0 + 264), *(_QWORD *)(v0 + 240));
          v8 = type metadata accessor for Peripheral(0);
          Identifier.init(_:)(v7, v8);
          v9 = (_QWORD *)swift_task_alloc(dword_10110FA5C);
          *(_QWORD *)(v0 + 312) = v9;
          *v9 = v0;
          v9[1] = sub_100A36C9C;
          return sub_1009DDE8C(*(_QWORD *)(v0 + 224));
        }
      }
      else if ((v6 & 1) == 0)
      {
        v47 = *(_QWORD *)(v0 + 256);
        (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v0 + 248) + 16))(v47, *(_QWORD *)(v0 + 264), *(_QWORD *)(v0 + 240));
        v48 = type metadata accessor for Peripheral(0);
        Identifier.init(_:)(v47, v48);
        v49 = (_QWORD *)swift_task_alloc(dword_10110FA9C);
        *(_QWORD *)(v0 + 288) = v49;
        *v49 = v0;
        v49[1] = sub_100A36B4C;
        return sub_1009D8680(*(_QWORD *)(v0 + 232));
      }
    }
    v15 = (_QWORD *)(v0 + 168);
    if (qword_1010EA120 != -1)
      swift_once(&qword_1010EA120, sub_100A34180);
    v16 = *(void **)(v0 + 176);
    v17 = type metadata accessor for Logger(0);
    sub_10001A9E8(v17, (uint64_t)qword_1011B7B28);
    v18 = Logger.logObject.getter(v16);
    v19 = static os_log_type_t.error.getter(v18);
    v20 = os_log_type_enabled(v18, v19);
    v21 = *(void **)(v0 + 176);
    if (v20)
    {
      v22 = (uint8_t *)swift_slowAlloc(12, -1);
      v50 = swift_slowAlloc(32, -1);
      v51 = v50;
      *(_DWORD *)v22 = 136446210;
      v23 = v21;
      v24 = objc_msgSend(v23, "description");
      v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
      v27 = v26;

      *(_QWORD *)(v0 + 160) = sub_100016940(v25, v27, &v51);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 160, v0 + 168, v22 + 4, v22 + 12);
      swift_bridgeObjectRelease();

      v15 = (_QWORD *)(v0 + 168);
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Invalid request %{public}s!", v22, 0xCu);
      swift_arrayDestroy(v50, 1, (char *)&type metadata for Any + 8);
      v2 = v0 + 152;
      swift_slowDealloc(v50, -1, -1);
      swift_slowDealloc(v22, -1, -1);
    }
    else
    {

    }
    v28 = *(_QWORD *)(v0 + 264);
    v29 = *(_QWORD *)(v0 + 240);
    v30 = *(_QWORD *)(v0 + 248);
    type metadata accessor for SPAccessoryDiscoverySessionError(0);
    v32 = v31;
    *(_QWORD *)(v0 + 152) = 3;
    v33 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
    v34 = sub_100006204(&qword_1010EB1C8, (uint64_t (*)(uint64_t))type metadata accessor for SPAccessoryDiscoverySessionError, (uint64_t)&unk_100E20B38);
    v35 = _BridgedStoredNSError.init(_:userInfo:)(v15, v2, v33, v32, v34);
    v12 = *(_QWORD *)(v0 + 168);
    swift_willThrow(v35);
    swift_release();
    v14 = (*(uint64_t (**)(uint64_t, uint64_t))(v30 + 8))(v28, v29);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    v11 = sub_100033220();
    v12 = swift_allocError(&type metadata for DaemonError, v11, 0, 0);
    *v13 = 0xD000000000000014;
    v13[1] = 0x8000000100ED7130;
    v14 = swift_willThrow(v12);
  }
  v36 = static os_log_type_t.error.getter(v14);
  if (qword_1010EA310 != -1)
    swift_once(&qword_1010EA310, sub_100B5E2C8);
  v37 = qword_1011B7DF0;
  if (os_log_type_enabled((os_log_t)qword_1011B7DF0, v36))
  {
    swift_errorRetain(v12);
    swift_errorRetain(v12);
    v38 = (uint8_t *)swift_slowAlloc(12, -1);
    v39 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v38 = 138543362;
    swift_errorRetain(v12);
    v40 = _swift_stdlib_bridgeErrorToNSError(v12);
    *(_QWORD *)(v0 + 144) = v40;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 144, v2, v38 + 4, v38 + 12);
    *v39 = v40;
    swift_errorRelease(v12);
    swift_errorRelease(v12);
    _os_log_impl((void *)&_mh_execute_header, v37, v36, "Pairing status related error %{public}@", v38, 0xCu);
    v41 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v39, 1, v41);
    swift_slowDealloc(v39, -1, -1);
    swift_slowDealloc(v38, -1, -1);
  }
  v42 = *(void (**)(id, uint64_t))(v0 + 184);
  v43 = objc_msgSend(objc_allocWithZone((Class)SPAccessoryDiscoveryPairingStatusResult), "initWithPairingStatus:lostModeInfo:", 0, 0);
  swift_errorRetain(v12);
  v42(v43, v12);
  swift_errorRelease(v12);

  swift_errorRelease(v12);
  v44 = *(_QWORD *)(v0 + 256);
  v46 = *(_QWORD *)(v0 + 224);
  v45 = *(_QWORD *)(v0 + 232);
  swift_task_dealloc(*(_QWORD *)(v0 + 264));
  swift_task_dealloc(v44);
  swift_task_dealloc(v45);
  swift_task_dealloc(v46);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100A36B4C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)();

  v4 = *(_QWORD **)v2;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 288);
  v6 = *(_QWORD *)(*(_QWORD *)v2 + 216);
  *(_QWORD *)(*(_QWORD *)v2 + 296) = v1;
  swift_task_dealloc(v5);
  v7 = v4[29];
  v8 = v4[26];
  if (v1)
  {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v7, v8);
    v9 = sub_100A373B8;
  }
  else
  {
    v4[38] = a1;
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v7, v8);
    v9 = sub_100A36BDC;
  }
  return swift_task_switch(v9, 0, 0);
}

uint64_t sub_100A36BDC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(id, _QWORD);
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *(_QWORD *)(v0 + 280);
  v2 = *(_QWORD *)(v0 + 264);
  v3 = *(_QWORD *)(v0 + 240);
  v4 = *(_QWORD *)(v0 + 248);
  v5 = *(void (**)(id, _QWORD))(v0 + 184);
  v6 = objc_msgSend(objc_allocWithZone((Class)SPAccessoryDiscoveryPairingStatusResult), "initWithPairingStatus:lostModeInfo:", *(_QWORD *)(v0 + 304), 0);
  v5(v6, 0);
  swift_release(v1);

  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  v7 = *(_QWORD *)(v0 + 256);
  v9 = *(_QWORD *)(v0 + 224);
  v8 = *(_QWORD *)(v0 + 232);
  swift_task_dealloc(*(_QWORD *)(v0 + 264));
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100A36C9C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 312);
  v3[40] = a1;
  v3[41] = v1;
  swift_task_dealloc(v4);
  (*(void (**)(_QWORD, _QWORD))(v3[27] + 8))(v3[28], v3[26]);
  if (v1)
    v5 = sub_100A375D0;
  else
    v5 = sub_100A36D18;
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_100A36D18(id a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t Strong;
  _QWORD *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(id, _QWORD);
  id v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(id, _QWORD);
  uint64_t v19;
  id v20;

  if (*(_QWORD *)(v1 + 320) == 3 && (a1 = objc_msgSend(*(id *)(v1 + 176), "wantsLostModeInfo"), (_DWORD)a1))
  {
    v2 = static os_log_type_t.default.getter(a1);
    if (qword_1010EA310 != -1)
      swift_once(&qword_1010EA310, sub_100B5E2C8);
    v3 = *(_QWORD *)(v1 + 200) + 16;
    os_log(_:dso:log:_:_:)(v2, &_mh_execute_header, qword_1011B7DF0, "Paired to another account and request wants lost mode info", 58, 2, _swiftEmptyArrayStorage);
    swift_beginAccess(v3, v1 + 120, 0, 0);
    Strong = swift_weakLoadStrong(v3);
    *(_QWORD *)(v1 + 336) = Strong;
    if (Strong)
    {
      v5 = (_QWORD *)swift_task_alloc(dword_1011106D4);
      *(_QWORD *)(v1 + 344) = v5;
      *v5 = v1;
      v5[1] = sub_100A36FB8;
      return sub_100A39490(*(_QWORD *)(v1 + 264));
    }
    v9 = *(_QWORD *)(v1 + 264);
    v10 = *(_QWORD *)(v1 + 240);
    v11 = *(_QWORD *)(v1 + 248);
    v18 = *(void (**)(id, _QWORD))(v1 + 184);
    v19 = static os_log_type_t.default.getter(0);
    os_log(_:dso:log:_:_:)(v19, &_mh_execute_header, qword_1011B7DF0, "No lost mode info, so just return pairing status", 48, 2, _swiftEmptyArrayStorage);
    v20 = objc_msgSend(objc_allocWithZone((Class)SPAccessoryDiscoveryPairingStatusResult), "initWithPairingStatus:lostModeInfo:", 3, 0);
    v14 = v20;
    v18(v20, 0);
  }
  else
  {
    v7 = static os_log_type_t.default.getter(a1);
    if (qword_1010EA310 != -1)
      swift_once(&qword_1010EA310, sub_100B5E2C8);
    v8 = *(_QWORD *)(v1 + 320);
    v9 = *(_QWORD *)(v1 + 264);
    v10 = *(_QWORD *)(v1 + 240);
    v11 = *(_QWORD *)(v1 + 248);
    v12 = *(void (**)(id, _QWORD))(v1 + 184);
    os_log(_:dso:log:_:_:)(v7, &_mh_execute_header, qword_1011B7DF0, "Neither paired to another account nor in lost mode, so just return pairing status", 81, 2, _swiftEmptyArrayStorage);
    v13 = objc_msgSend(objc_allocWithZone((Class)SPAccessoryDiscoveryPairingStatusResult), "initWithPairingStatus:lostModeInfo:", v8, 0);
    v14 = v13;
    v12(v13, 0);
  }
  swift_release();

  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
  v15 = *(_QWORD *)(v1 + 256);
  v17 = *(_QWORD *)(v1 + 224);
  v16 = *(_QWORD *)(v1 + 232);
  swift_task_dealloc(*(_QWORD *)(v1 + 264));
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_100A36FB8(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 344);
  *(_QWORD *)(v3 + 352) = a1;
  *(_QWORD *)(v3 + 360) = v1;
  swift_task_dealloc(v4);
  swift_release();
  if (v1)
    v5 = sub_100A371A0;
  else
    v5 = sub_100A3702C;
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_100A3702C()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(id, _QWORD);
  uint64_t v7;
  id v8;
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v1 = *(void **)(v0 + 352);
  v2 = *(_QWORD *)(v0 + 280);
  v3 = *(_QWORD *)(v0 + 264);
  v4 = *(_QWORD *)(v0 + 240);
  v5 = *(_QWORD *)(v0 + 248);
  v6 = *(void (**)(id, _QWORD))(v0 + 184);
  v7 = static os_log_type_t.default.getter();
  if (v1)
  {
    os_log(_:dso:log:_:_:)(v7, &_mh_execute_header, qword_1011B7DF0, "Fetched lost mode info, returning with pairing status and lost mode info", 72, 2, &_swiftEmptyArrayStorage);
    v8 = objc_msgSend(objc_allocWithZone((Class)SPAccessoryDiscoveryPairingStatusResult), "initWithPairingStatus:lostModeInfo:", 3, v1);
    v9 = v8;
    v6(v8, 0);
    swift_release(v2);

  }
  else
  {
    os_log(_:dso:log:_:_:)(v7, &_mh_execute_header, qword_1011B7DF0, "No lost mode info, so just return pairing status", 48, 2, &_swiftEmptyArrayStorage);
    v10 = objc_msgSend(objc_allocWithZone((Class)SPAccessoryDiscoveryPairingStatusResult), "initWithPairingStatus:lostModeInfo:", 3, 0);
    v9 = v10;
    v6(v10, 0);
    swift_release(v2);
    v1 = v9;
  }

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v4);
  v11 = *(_QWORD *)(v0 + 256);
  v13 = *(_QWORD *)(v0 + 224);
  v12 = *(_QWORD *)(v0 + 232);
  swift_task_dealloc(*(_QWORD *)(v0 + 264));
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100A371A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  os_log_type_t v6;
  NSObject *v7;
  uint8_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(id, uint64_t);
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v1 = *(_QWORD *)(v0 + 264);
  v2 = *(_QWORD *)(v0 + 240);
  v3 = *(_QWORD *)(v0 + 248);
  swift_release();
  v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  v5 = *(_QWORD *)(v0 + 360);
  v6 = static os_log_type_t.error.getter(v4);
  if (qword_1010EA310 != -1)
    swift_once(&qword_1010EA310, sub_100B5E2C8);
  v7 = qword_1011B7DF0;
  if (os_log_type_enabled((os_log_t)qword_1011B7DF0, v6))
  {
    swift_errorRetain(v5);
    swift_errorRetain(v5);
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v8 = 138543362;
    swift_errorRetain(v5);
    v10 = _swift_stdlib_bridgeErrorToNSError(v5);
    *(_QWORD *)(v0 + 144) = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 144, v0 + 152, v8 + 4, v8 + 12);
    *v9 = v10;
    swift_errorRelease(v5);
    swift_errorRelease(v5);
    _os_log_impl((void *)&_mh_execute_header, v7, v6, "Pairing status related error %{public}@", v8, 0xCu);
    v11 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v9, 1, v11);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }
  v12 = *(void (**)(id, uint64_t))(v0 + 184);
  v13 = objc_msgSend(objc_allocWithZone((Class)SPAccessoryDiscoveryPairingStatusResult), "initWithPairingStatus:lostModeInfo:", 0, 0);
  swift_errorRetain(v5);
  v12(v13, v5);
  swift_errorRelease(v5);

  swift_errorRelease(v5);
  v14 = *(_QWORD *)(v0 + 256);
  v16 = *(_QWORD *)(v0 + 224);
  v15 = *(_QWORD *)(v0 + 232);
  swift_task_dealloc(*(_QWORD *)(v0 + 264));
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100A373B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  os_log_type_t v6;
  NSObject *v7;
  uint8_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(id, uint64_t);
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v1 = *(_QWORD *)(v0 + 264);
  v2 = *(_QWORD *)(v0 + 240);
  v3 = *(_QWORD *)(v0 + 248);
  swift_release();
  v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  v5 = *(_QWORD *)(v0 + 296);
  v6 = static os_log_type_t.error.getter(v4);
  if (qword_1010EA310 != -1)
    swift_once(&qword_1010EA310, sub_100B5E2C8);
  v7 = qword_1011B7DF0;
  if (os_log_type_enabled((os_log_t)qword_1011B7DF0, v6))
  {
    swift_errorRetain(v5);
    swift_errorRetain(v5);
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v8 = 138543362;
    swift_errorRetain(v5);
    v10 = _swift_stdlib_bridgeErrorToNSError(v5);
    *(_QWORD *)(v0 + 144) = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 144, v0 + 152, v8 + 4, v8 + 12);
    *v9 = v10;
    swift_errorRelease(v5);
    swift_errorRelease(v5);
    _os_log_impl((void *)&_mh_execute_header, v7, v6, "Pairing status related error %{public}@", v8, 0xCu);
    v11 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v9, 1, v11);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }
  v12 = *(void (**)(id, uint64_t))(v0 + 184);
  v13 = objc_msgSend(objc_allocWithZone((Class)SPAccessoryDiscoveryPairingStatusResult), "initWithPairingStatus:lostModeInfo:", 0, 0);
  swift_errorRetain(v5);
  v12(v13, v5);
  swift_errorRelease(v5);

  swift_errorRelease(v5);
  v14 = *(_QWORD *)(v0 + 256);
  v16 = *(_QWORD *)(v0 + 224);
  v15 = *(_QWORD *)(v0 + 232);
  swift_task_dealloc(*(_QWORD *)(v0 + 264));
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100A375D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  os_log_type_t v6;
  NSObject *v7;
  uint8_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(id, uint64_t);
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v1 = *(_QWORD *)(v0 + 264);
  v2 = *(_QWORD *)(v0 + 240);
  v3 = *(_QWORD *)(v0 + 248);
  swift_release();
  v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  v5 = *(_QWORD *)(v0 + 328);
  v6 = static os_log_type_t.error.getter(v4);
  if (qword_1010EA310 != -1)
    swift_once(&qword_1010EA310, sub_100B5E2C8);
  v7 = qword_1011B7DF0;
  if (os_log_type_enabled((os_log_t)qword_1011B7DF0, v6))
  {
    swift_errorRetain(v5);
    swift_errorRetain(v5);
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v8 = 138543362;
    swift_errorRetain(v5);
    v10 = _swift_stdlib_bridgeErrorToNSError(v5);
    *(_QWORD *)(v0 + 144) = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 144, v0 + 152, v8 + 4, v8 + 12);
    *v9 = v10;
    swift_errorRelease(v5);
    swift_errorRelease(v5);
    _os_log_impl((void *)&_mh_execute_header, v7, v6, "Pairing status related error %{public}@", v8, 0xCu);
    v11 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v9, 1, v11);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }
  v12 = *(void (**)(id, uint64_t))(v0 + 184);
  v13 = objc_msgSend(objc_allocWithZone((Class)SPAccessoryDiscoveryPairingStatusResult), "initWithPairingStatus:lostModeInfo:", 0, 0);
  swift_errorRetain(v5);
  v12(v13, v5);
  swift_errorRelease(v5);

  swift_errorRelease(v5);
  v14 = *(_QWORD *)(v0 + 256);
  v16 = *(_QWORD *)(v0 + 224);
  v15 = *(_QWORD *)(v0 + 232);
  swift_task_dealloc(*(_QWORD *)(v0 + 264));
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100A377E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3[19] = a2;
  v3[20] = a3;
  v3[18] = a1;
  v4 = type metadata accessor for UUID(0);
  v3[21] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[22] = v5;
  v3[23] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10001A9A8(&qword_1010EF7C0);
  v3[24] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v3[25] = v7;
  v3[26] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100A37878, 0, 0);
}

uint64_t sub_100A37878()
{
  uint64_t v0;
  uint64_t result;
  _QWORD *v2;
  uint64_t (__cdecl *v3)();

  if (qword_1010EA5B0 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v0 + 96, 0, 0);
  result = sub_10008180C((uint64_t)&xmmword_10111E6C0, v0 + 56);
  if (*(_QWORD *)(v0 + 80))
  {
    sub_10000F9FC((__int128 *)(v0 + 56), v0 + 16);
    sub_10001AA44((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
    v3 = (uint64_t (__cdecl *)())((char *)&dword_1010EBC18 + dword_1010EBC18);
    v2 = (_QWORD *)swift_task_alloc(unk_1010EBC1C);
    *(_QWORD *)(v0 + 216) = v2;
    *v2 = v0;
    v2[1] = sub_100A3795C;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100A3795C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 216);
  *(_QWORD *)(*(_QWORD *)v1 + 224) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100A379B8, 0, 0);
}

uint64_t sub_100A379B8()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, _QWORD);
  uint64_t v22;
  uint64_t v23;

  v1 = (_QWORD *)(v0 + 16);
  if (*(_QWORD *)(v0 + 224))
  {
    v3 = *(_QWORD *)(v0 + 176);
    v2 = *(_QWORD *)(v0 + 184);
    v4 = *(_QWORD *)(v0 + 168);
    v5 = *(_QWORD *)(v0 + 144);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v5, v4);
    v6 = type metadata accessor for Peripheral(0);
    Identifier.init(_:)(v2, v6);
    v7 = (_QWORD *)swift_task_alloc(dword_10110FAD4);
    *(_QWORD *)(v0 + 232) = v7;
    *v7 = v0;
    v7[1] = sub_100A37CFC;
    return sub_1009D4988(*(_QWORD *)(v0 + 208));
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    v9 = sub_100033220();
    v10 = swift_allocError(&type metadata for DaemonError, v9, 0, 0);
    *v11 = 0xD000000000000014;
    v11[1] = 0x8000000100ED7130;
    swift_willThrow(v10);
    if (qword_1010EA120 != -1)
      swift_once(&qword_1010EA120, sub_100A34180);
    v12 = type metadata accessor for Logger(0);
    sub_10001A9E8(v12, (uint64_t)qword_1011B7B28);
    swift_errorRetain(v10);
    v13 = swift_errorRetain(v10);
    v14 = Logger.logObject.getter(v13);
    v15 = static os_log_type_t.default.getter(v14);
    if (os_log_type_enabled(v14, v15))
    {
      v16 = swift_slowAlloc(22, -1);
      v17 = (uint64_t *)swift_slowAlloc(8, -1);
      v18 = swift_slowAlloc(32, -1);
      v23 = v18;
      *(_DWORD *)v16 = 136446466;
      *(_QWORD *)(v0 + 120) = sub_100016940(0xD000000000000039, 0x8000000100EECA80, &v23);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 120, v0 + 128, v16 + 4, v16 + 12);
      *(_WORD *)(v16 + 12) = 2114;
      swift_errorRetain(v10);
      v19 = _swift_stdlib_bridgeErrorToNSError(v10);
      *(_QWORD *)(v0 + 128) = v19;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 128, v0 + 136, v16 + 14, v16 + 22);
      *v17 = v19;
      swift_errorRelease(v10);
      swift_errorRelease(v10);
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "%{public}s failed with %{public}@!", (uint8_t *)v16, 0x16u);
      v20 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
      swift_arrayDestroy(v17, 1, v20);
      swift_slowDealloc(v17, -1, -1);
      swift_arrayDestroy(v18, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v18, -1, -1);
      swift_slowDealloc(v16, -1, -1);
    }
    else
    {
      swift_errorRelease(v10);
      swift_errorRelease(v10);
    }

    v21 = *(void (**)(uint64_t, _QWORD))(v0 + 152);
    swift_errorRetain(v10);
    v21(v10, 0);
    swift_errorRelease(v10);
    swift_errorRelease(v10);
    v22 = *(_QWORD *)(v0 + 184);
    swift_task_dealloc(*(_QWORD *)(v0 + 208));
    swift_task_dealloc(v22);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100A37CFC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t (*v5)();

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 232);
  v3[30] = a1;
  v3[31] = v1;
  swift_task_dealloc(v4);
  (*(void (**)(_QWORD, _QWORD))(v3[25] + 8))(v3[26], v3[24]);
  if (v1)
    v5 = sub_100A37F28;
  else
    v5 = sub_100A37D78;
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_100A37D78()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v10;

  if (qword_1010EA120 != -1)
    swift_once(&qword_1010EA120, sub_100A34180);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_10001A9E8(v1, (uint64_t)qword_1011B7B28);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = swift_slowAlloc(32, -1);
    v10 = v6;
    *(_DWORD *)v5 = 136446210;
    *(_QWORD *)(v0 + 136) = sub_100016940(0xD000000000000039, 0x8000000100EECA80, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 136, v0 + 144, v5 + 4, v5 + 12);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "%{public}s completed successfully!", v5, 0xCu);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);
  }

  v7 = *(void **)(v0 + 240);
  (*(void (**)(_QWORD, void *))(v0 + 152))(0, v7);
  swift_release();

  v8 = *(_QWORD *)(v0 + 184);
  swift_task_dealloc(*(_QWORD *)(v0 + 208));
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100A37F28()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, _QWORD);
  uint64_t v12;
  uint64_t v14;

  swift_release();
  v1 = *(_QWORD *)(v0 + 248);
  if (qword_1010EA120 != -1)
    swift_once(&qword_1010EA120, sub_100A34180);
  v2 = type metadata accessor for Logger(0);
  sub_10001A9E8(v2, (uint64_t)qword_1011B7B28);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = swift_slowAlloc(22, -1);
    v7 = (uint64_t *)swift_slowAlloc(8, -1);
    v8 = swift_slowAlloc(32, -1);
    v14 = v8;
    *(_DWORD *)v6 = 136446466;
    *(_QWORD *)(v0 + 120) = sub_100016940(0xD000000000000039, 0x8000000100EECA80, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 120, v0 + 128, v6 + 4, v6 + 12);
    *(_WORD *)(v6 + 12) = 2114;
    swift_errorRetain(v1);
    v9 = _swift_stdlib_bridgeErrorToNSError(v1);
    *(_QWORD *)(v0 + 128) = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 128, v0 + 136, v6 + 14, v6 + 22);
    *v7 = v9;
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "%{public}s failed with %{public}@!", (uint8_t *)v6, 0x16u);
    v10 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v7, 1, v10);
    swift_slowDealloc(v7, -1, -1);
    swift_arrayDestroy(v8, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v6, -1, -1);
  }
  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
  }

  v11 = *(void (**)(uint64_t, _QWORD))(v0 + 152);
  swift_errorRetain(v1);
  v11(v1, 0);
  swift_errorRelease(v1);
  swift_errorRelease(v1);
  v12 = *(_QWORD *)(v0 + 184);
  swift_task_dealloc(*(_QWORD *)(v0 + 208));
  swift_task_dealloc(v12);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_100A3819C()
{
  uint64_t v0;

  sub_10032A764(*(uint64_t **)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_100A381A4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100A381B8()
{
  uint64_t v0;

  return sub_100A34F7C(*(void **)(v0 + 24));
}

uint64_t sub_100A381DC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

void sub_100A381EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  id v13;
  void *v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  void *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD aBlock[6];
  uint64_t v41;

  v4 = sub_10001A9A8(&qword_101110708);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&aBlock[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1010EA120 != -1)
    swift_once(&qword_1010EA120, sub_100A34180);
  v8 = type metadata accessor for Logger(0);
  v9 = sub_10001A9E8(v8, (uint64_t)qword_1011B7B28);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.default.getter(v10);
  if (os_log_type_enabled(v10, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v12 = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "AccessoryDiscoveryService.start", v12, 2u);
    swift_slowDealloc(v12, -1, -1);
  }

  v13 = objc_msgSend((id)objc_opt_self(NSXPCConnection), "currentConnection");
  if (v13)
  {
    v14 = v13;
    v39 = v5;
    v15 = *(NSObject **)(a1 + 48);
    v16 = swift_allocObject(&unk_1010A2C68, 32, 7);
    *(_QWORD *)(v16 + 16) = a1;
    *(_QWORD *)(v16 + 24) = v14;
    v17 = swift_allocObject(&unk_1010A2C90, 32, 7);
    *(_QWORD *)(v17 + 16) = sub_100A39F1C;
    *(_QWORD *)(v17 + 24) = v16;
    aBlock[4] = sub_10005CBA4;
    aBlock[5] = v17;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_10001D8B8;
    aBlock[3] = &unk_1010A2CA8;
    v18 = _Block_copy(aBlock);
    swift_retain();
    swift_retain();
    v19 = v14;
    swift_release();
    dispatch_sync(v15, v18);
    _Block_release(v18);
    LOBYTE(v15) = swift_isEscapingClosureAtFileLocation(v17, "", 130, 106, 27, 1);
    swift_release();
    swift_release();
    if ((v15 & 1) != 0)
    {
      __break(1u);
    }
    else
    {
      v20 = *(_QWORD *)(a1 + 72);
      if (v20)
      {
        if (*(_QWORD *)(v20 + 72))
        {
          swift_retain();
        }
        else
        {
          swift_retain();
          aBlock[0] = sub_100E02BCC();
          v33 = sub_10001A9A8(&qword_101110710);
          v34 = sub_1000193A4(&qword_101110718, &qword_101110710, (const char *)&protocol conformance descriptor for AnyPublisher<A, B>);
          v35 = sub_100006204(&qword_101110720, (uint64_t (*)(uint64_t))type metadata accessor for CBManagerState, (uint64_t)&unk_100E1E09C);
          Publisher<>.removeDuplicates()(v33, v34, v35);
          swift_release();
          v36 = swift_allocObject(&unk_1010A2CE0, 24, 7);
          swift_weakInit(v36 + 16, v20);
          v37 = sub_1000193A4((unint64_t *)&unk_101110728, &qword_101110708, (const char *)&protocol conformance descriptor for Publishers.RemoveDuplicates<A>);
          v38 = Publisher<>.sink(receiveValue:)(sub_100A39F58, v36, v4, v37);
          swift_release();
          (*(void (**)(char *, uint64_t))(v39 + 8))(v7, v4);
          *(_QWORD *)(v20 + 72) = v38;
          swift_release();
        }
        sub_10042992C();
        (*(void (**)(uint64_t, _QWORD))(a2 + 16))(a2, 0);

        swift_release();
      }
      else
      {
        type metadata accessor for SPAccessoryDiscoverySessionError(0);
        v28 = v27;
        v41 = 2;
        v29 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
        v30 = sub_100006204(&qword_1010EB1C8, (uint64_t (*)(uint64_t))type metadata accessor for SPAccessoryDiscoverySessionError, (uint64_t)&unk_100E20B38);
        _BridgedStoredNSError.init(_:userInfo:)(aBlock, &v41, v29, v28, v30);
        v31 = (void *)aBlock[0];
        v32 = (void *)_convertErrorToNSError(_:)(aBlock[0]);
        (*(void (**)(uint64_t, void *))(a2 + 16))(a2, v32);

      }
    }
  }
  else
  {
    type metadata accessor for SPAccessoryDiscoverySessionError(0);
    v22 = v21;
    v41 = 2;
    v23 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
    v24 = sub_100006204(&qword_1010EB1C8, (uint64_t (*)(uint64_t))type metadata accessor for SPAccessoryDiscoverySessionError, (uint64_t)&unk_100E20B38);
    _BridgedStoredNSError.init(_:userInfo:)(aBlock, &v41, v23, v22, v24);
    v25 = (void *)aBlock[0];
    v26 = (void *)_convertErrorToNSError(_:)(aBlock[0]);
    (*(void (**)(uint64_t, void *))(a2 + 16))(a2, v26);

  }
}

void sub_100A386A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  void *v16;

  if (qword_1010EA120 != -1)
    swift_once(&qword_1010EA120, sub_100A34180);
  v4 = type metadata accessor for Logger(0);
  v5 = sub_10001A9E8(v4, (uint64_t)qword_1011B7B28);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.default.getter(v6);
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "AccessoryDiscoveryService.stopAccessoryDiscovery", v8, 2u);
    swift_slowDealloc(v8, -1, -1);
  }

  if (*(_QWORD *)(a1 + 72))
  {
    swift_retain();
    sub_100427C84();
    (*(void (**)(uint64_t, _QWORD))(a2 + 16))(a2, 0);
    swift_release();
  }
  else
  {
    type metadata accessor for SPAccessoryDiscoverySessionError(0);
    v10 = v9;
    v15 = 2;
    v11 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
    v12 = sub_100006204(&qword_1010EB1C8, (uint64_t (*)(uint64_t))type metadata accessor for SPAccessoryDiscoverySessionError, (uint64_t)&unk_100E20B38);
    _BridgedStoredNSError.init(_:userInfo:)(&v16, &v15, v11, v10, v12);
    v13 = v16;
    v14 = (void *)_convertErrorToNSError(_:)(v16);
    (*(void (**)(uint64_t, void *))(a2 + 16))(a2, v14);

  }
}

void sub_100A38848(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  id v9;
  void *v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  void *v26;
  _QWORD aBlock[6];
  uint64_t v28;

  if (qword_1010EA120 != -1)
    swift_once(&qword_1010EA120, sub_100A34180);
  v4 = type metadata accessor for Logger(0);
  v5 = sub_10001A9E8(v4, (uint64_t)qword_1011B7B28);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.default.getter(v6);
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "AccessoryDiscoveryService.startLocalFindableAccessoryDiscovery", v8, 2u);
    swift_slowDealloc(v8, -1, -1);
  }

  v9 = objc_msgSend((id)objc_opt_self(NSXPCConnection), "currentConnection");
  if (!v9)
  {
    type metadata accessor for SPAccessoryDiscoverySessionError(0);
    v17 = v16;
    v28 = 2;
    v18 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
    v19 = sub_100006204(&qword_1010EB1C8, (uint64_t (*)(uint64_t))type metadata accessor for SPAccessoryDiscoverySessionError, (uint64_t)&unk_100E20B38);
    _BridgedStoredNSError.init(_:userInfo:)(aBlock, &v28, v18, v17, v19);
    v20 = (void *)aBlock[0];
    v21 = (void *)_convertErrorToNSError(_:)(aBlock[0]);
    (*(void (**)(uint64_t, void *))(a2 + 16))(a2, v21);

LABEL_11:
    return;
  }
  v10 = v9;
  v11 = *(NSObject **)(a1 + 48);
  v12 = swift_allocObject(&unk_1010A2A88, 32, 7);
  *(_QWORD *)(v12 + 16) = a1;
  *(_QWORD *)(v12 + 24) = v10;
  v13 = swift_allocObject(&unk_1010A2AB0, 32, 7);
  *(_QWORD *)(v13 + 16) = sub_100A39E5C;
  *(_QWORD *)(v13 + 24) = v12;
  aBlock[4] = sub_10005CBA4;
  aBlock[5] = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10001D8B8;
  aBlock[3] = &unk_1010A2AC8;
  v14 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  v15 = v10;
  swift_release();
  dispatch_sync(v11, v14);
  _Block_release(v14);
  LOBYTE(v11) = swift_isEscapingClosureAtFileLocation(v13, "", 130, 138, 27, 1);
  swift_release();
  swift_release();
  if ((v11 & 1) == 0)
  {
    if (*(_QWORD *)(a1 + 88))
    {
      swift_retain();
      sub_10012DE98();
      (*(void (**)(uint64_t, _QWORD))(a2 + 16))(a2, 0);

      swift_release();
      return;
    }
    type metadata accessor for SPAccessoryDiscoverySessionError(0);
    v23 = v22;
    v28 = 2;
    v24 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
    v25 = sub_100006204(&qword_1010EB1C8, (uint64_t (*)(uint64_t))type metadata accessor for SPAccessoryDiscoverySessionError, (uint64_t)&unk_100E20B38);
    _BridgedStoredNSError.init(_:userInfo:)(aBlock, &v28, v24, v23, v25);
    v26 = (void *)aBlock[0];
    v21 = (void *)_convertErrorToNSError(_:)(aBlock[0]);
    (*(void (**)(uint64_t, void *))(a2 + 16))(a2, v21);

    goto LABEL_11;
  }
  __break(1u);
}

void sub_100A38B94(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  uint64_t v24;
  void *v25;

  if (qword_1010EA120 != -1)
    swift_once(&qword_1010EA120, sub_100A34180);
  v4 = type metadata accessor for Logger(0);
  v5 = sub_10001A9E8(v4, (uint64_t)qword_1011B7B28);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.default.getter(v6);
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "AccessoryDiscoveryService.stopLocalFindableAccessoryDiscovery", v8, 2u);
    swift_slowDealloc(v8, -1, -1);
  }

  if (qword_1010EA128 != -1)
    swift_once(&qword_1010EA128, sub_100A34330);
  v9 = sub_10001A9E8(v4, (uint64_t)qword_1011B7B40);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.debug.getter(v10);
  if (os_log_type_enabled(v10, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v12 = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "TRACE: stopLocalFindableAccessoryDiscovery() ", v12, 2u);
    swift_slowDealloc(v12, -1, -1);
  }

  if (*(_QWORD *)(a1 + 88))
  {
    v13 = qword_1010E9990;
    swift_retain();
    if (v13 != -1)
      swift_once(&qword_1010E9990, sub_10012DE08);
    v14 = sub_10001A9E8(v4, (uint64_t)qword_1011B67C0);
    v15 = Logger.logObject.getter(v14);
    v16 = static os_log_type_t.default.getter(v15);
    if (os_log_type_enabled(v15, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v17 = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "TRACE: stopScanning()", v17, 2u);
      swift_slowDealloc(v17, -1, -1);
    }

    (*(void (**)(uint64_t, _QWORD))(a2 + 16))(a2, 0);
    swift_release();
  }
  else
  {
    type metadata accessor for SPAccessoryDiscoverySessionError(0);
    v19 = v18;
    v24 = 2;
    v20 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
    v21 = sub_100006204(&qword_1010EB1C8, (uint64_t (*)(uint64_t))type metadata accessor for SPAccessoryDiscoverySessionError, (uint64_t)&unk_100E20B38);
    _BridgedStoredNSError.init(_:userInfo:)(&v25, &v24, v20, v19, v21);
    v22 = v25;
    v23 = (void *)_convertErrorToNSError(_:)(v25);
    (*(void (**)(uint64_t, void *))(a2 + 16))(a2, v23);

  }
}

void sub_100A38E8C(void *a1, void *a2, uint64_t a3, void (**a4)(_QWORD, _QWORD, _QWORD))
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t v17;
  void *v18;

  v8 = swift_allocObject(&unk_1010A2A60, 24, 7);
  *(_QWORD *)(v8 + 16) = a4;
  v9 = _Block_copy(a4);
  v10 = static os_log_type_t.debug.getter(v9);
  if (qword_1010EA310 != -1)
    swift_once(&qword_1010EA310, sub_100B5E2C8);
  os_log(_:dso:log:_:_:)(v10, &_mh_execute_header, qword_1011B7DF0, "AccessoryDiscoveryService.finalizePairing", 41, 2, _swiftEmptyArrayStorage);
  if (*(_QWORD *)(a3 + 80))
  {
    swift_retain();
    sub_1007D094C(a1, a2, (uint64_t)sub_10015A53C, v8);
    swift_release();
    swift_release();
  }
  else
  {
    type metadata accessor for SPPairingSessionError(0);
    v12 = v11;
    v17 = 2;
    v13 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
    v14 = sub_100006204(&qword_1010EB450, (uint64_t (*)(uint64_t))type metadata accessor for SPPairingSessionError, (uint64_t)&unk_100E217DC);
    _BridgedStoredNSError.init(_:userInfo:)(&v18, &v17, v13, v12, v14);
    v15 = v18;
    v16 = (void *)_convertErrorToNSError(_:)(v18);
    ((void (**)(_QWORD, _QWORD, void *))a4)[2](a4, 0, v16);
    swift_release();

  }
}

void sub_100A39030(void *a1, uint64_t a2, void (**a3)(_QWORD, _QWORD))
{
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  void *v16;

  v6 = swift_allocObject(&unk_1010A2A38, 24, 7);
  *(_QWORD *)(v6 + 16) = a3;
  v7 = _Block_copy(a3);
  v8 = static os_log_type_t.debug.getter(v7);
  if (qword_1010EA310 != -1)
    swift_once(&qword_1010EA310, sub_100B5E2C8);
  os_log(_:dso:log:_:_:)(v8, &_mh_execute_header, qword_1011B7DF0, "AccessoryDiscoveryService.invalidatePairing", 43, 2, _swiftEmptyArrayStorage);
  if (*(_QWORD *)(a2 + 80))
  {
    swift_retain();
    sub_1007D1F60(a1, (uint64_t)sub_10001D1F0, v6);
    swift_release();
    swift_release();
  }
  else
  {
    type metadata accessor for SPPairingSessionError(0);
    v10 = v9;
    v15 = 2;
    v11 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
    v12 = sub_100006204(&qword_1010EB450, (uint64_t (*)(uint64_t))type metadata accessor for SPPairingSessionError, (uint64_t)&unk_100E217DC);
    _BridgedStoredNSError.init(_:userInfo:)(&v16, &v15, v11, v10, v12);
    v13 = v16;
    v14 = (void *)_convertErrorToNSError(_:)(v16);
    ((void (**)(_QWORD, void *))a3)[2](a3, v14);
    swift_release();

  }
}

uint64_t sub_100A391C8(void *a1)
{
  uint64_t v2;
  NSObject *v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  NSObject **v7;
  NSObject *v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  NSObject *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  NSObject **v16;
  NSObject *v17;
  uint64_t v18;
  NSObject *v20;
  uint64_t v21;

  if (qword_1010EA120 != -1)
    swift_once(&qword_1010EA120, sub_100A34180);
  v2 = type metadata accessor for Logger(0);
  sub_10001A9E8(v2, (uint64_t)qword_1011B7B28);
  v3 = a1;
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = (NSObject **)swift_slowAlloc(8, -1);
    *(_DWORD *)v6 = 138412290;
    v20 = v3;
    v8 = v3;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, &v21, v6 + 4, v6 + 12);
    *v7 = v3;

    _os_log_impl((void *)&_mh_execute_header, v4, v5, "shouldAccept: %@", v6, 0xCu);
    v9 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v7, 1, v9);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);

  }
  else
  {

  }
  v10 = sub_1002E3AC8();
  v11 = NSXPCConnection.hasEntitlement<A>(_:)(v10, &type metadata for AccessoryDiscoveryEntitlement, v10);
  if ((v11 & 1) == 0)
  {
    v12 = v3;
    v13 = Logger.logObject.getter(v12);
    v14 = static os_log_type_t.error.getter(v13);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = (uint8_t *)swift_slowAlloc(12, -1);
      v16 = (NSObject **)swift_slowAlloc(8, -1);
      *(_DWORD *)v15 = 138412290;
      v20 = v12;
      v17 = v12;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, &v21, v15 + 4, v15 + 12);
      *v16 = v12;

      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Missing entitlement: %@", v15, 0xCu);
      v18 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
      swift_arrayDestroy(v16, 1, v18);
      swift_slowDealloc(v16, -1, -1);
      swift_slowDealloc(v15, -1, -1);
    }
    else
    {

      v13 = v12;
    }

  }
  return v11 & 1;
}

uint64_t sub_100A39490(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1[17] = a1;
  v2 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  v1[18] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for UUID(0);
  v1[19] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v1[20] = v4;
  v1[21] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10001A9A8(&qword_1010EF7C0);
  v1[22] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v1[23] = v6;
  v1[24] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for LostModeAlertInfo(0);
  v1[25] = v7;
  v1[26] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100A39564, 0, 0);
}

uint64_t sub_100A39564()
{
  uint64_t v0;
  uint64_t result;
  _QWORD *v2;
  uint64_t (__cdecl *v3)();

  if (qword_1010EA5B0 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v0 + 96, 0, 0);
  result = sub_10008180C((uint64_t)&xmmword_10111E6C0, v0 + 56);
  if (*(_QWORD *)(v0 + 80))
  {
    sub_10000F9FC((__int128 *)(v0 + 56), v0 + 16);
    sub_10001AA44((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
    v3 = (uint64_t (__cdecl *)())((char *)&dword_1010EBDC0 + dword_1010EBDC0);
    v2 = (_QWORD *)swift_task_alloc(unk_1010EBDC4);
    *(_QWORD *)(v0 + 216) = v2;
    *v2 = v0;
    v2[1] = sub_100A39648;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100A39648(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 216);
  *(_QWORD *)(*(_QWORD *)v1 + 224) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100A396A4, 0, 0);
}

uint64_t sub_100A396A4()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v1 = (_QWORD *)(v0 + 16);
  if (*(_QWORD *)(v0 + 224))
  {
    v3 = *(_QWORD *)(v0 + 160);
    v2 = *(_QWORD *)(v0 + 168);
    v4 = *(_QWORD *)(v0 + 152);
    v5 = *(_QWORD *)(v0 + 136);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v5, v4);
    v6 = type metadata accessor for Peripheral(0);
    Identifier.init(_:)(v2, v6);
    v7 = (_QWORD *)swift_task_alloc(dword_10110299C);
    *(_QWORD *)(v0 + 232) = v7;
    *v7 = v0;
    v7[1] = sub_100A399F8;
    return sub_100659C64(*(_QWORD *)(v0 + 208), *(_QWORD *)(v0 + 192));
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    v9 = sub_100033220();
    v10 = swift_allocError(&type metadata for DaemonError, v9, 0, 0);
    *v11 = 0xD000000000000025;
    v11[1] = 0x8000000100ED5D50;
    swift_willThrow(v10);
    if (qword_1010EA120 != -1)
      swift_once(&qword_1010EA120, sub_100A34180);
    v12 = type metadata accessor for Logger(0);
    sub_10001A9E8(v12, (uint64_t)qword_1011B7B28);
    swift_errorRetain(v10);
    v13 = swift_errorRetain(v10);
    v14 = Logger.logObject.getter(v13);
    v15 = static os_log_type_t.error.getter(v14);
    if (os_log_type_enabled(v14, v15))
    {
      v16 = swift_slowAlloc(22, -1);
      v17 = (uint64_t *)swift_slowAlloc(8, -1);
      v18 = swift_slowAlloc(32, -1);
      v24 = v18;
      *(_DWORD *)v16 = 136446466;
      *(_QWORD *)(v0 + 120) = sub_100016940(0xD00000000000001ELL, 0x8000000100EECA00, &v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 120, v0 + 128, v16 + 4, v16 + 12);
      *(_WORD *)(v16 + 12) = 2114;
      swift_errorRetain(v10);
      v19 = _swift_stdlib_bridgeErrorToNSError(v10);
      *(_QWORD *)(v0 + 128) = v19;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 128, v0 + 136, v16 + 14, v16 + 22);
      *v17 = v19;
      swift_errorRelease(v10);
      swift_errorRelease(v10);
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "%{public}s failed with lost mode related error %{public}@!", (uint8_t *)v16, 0x16u);
      v20 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
      swift_arrayDestroy(v17, 1, v20);
      swift_slowDealloc(v17, -1, -1);
      swift_arrayDestroy(v18, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v18, -1, -1);
      swift_slowDealloc(v16, -1, -1);

      swift_errorRelease(v10);
    }
    else
    {
      swift_errorRelease(v10);
      swift_errorRelease(v10);
      swift_errorRelease(v10);

    }
    v21 = *(_QWORD *)(v0 + 192);
    v22 = *(_QWORD *)(v0 + 168);
    v23 = *(_QWORD *)(v0 + 144);
    swift_task_dealloc(*(_QWORD *)(v0 + 208));
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
  }
}

uint64_t sub_100A399F8()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 232);
  *(_QWORD *)(*(_QWORD *)v1 + 240) = v0;
  swift_task_dealloc(v3);
  (*(void (**)(_QWORD, _QWORD))(v2[23] + 8))(v2[24], v2[22]);
  if (v0)
    v4 = sub_100A39B7C;
  else
    v4 = sub_100A39A6C;
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_100A39A6C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v1 = *(_QWORD *)(v0 + 200);
  v2 = *(_QWORD *)(v0 + 208);
  v3 = *(_QWORD *)(v0 + 144);
  v4 = (uint64_t *)(v2 + *(int *)(v1 + 20));
  v5 = *v4;
  v6 = v4[1];
  v7 = (uint64_t *)(v2 + *(int *)(v1 + 24));
  v8 = *v7;
  v9 = v7[1];
  v10 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v3, 1, 1, v10);
  v11 = objc_allocWithZone((Class)SPLostModeInfo);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v6);
  v12 = sub_10084F34C(0, 0, v5, v6, v8, v9, v3);
  swift_release();
  sub_100A39DF8(v2);
  v13 = *(_QWORD *)(v0 + 192);
  v14 = *(_QWORD *)(v0 + 168);
  v15 = *(_QWORD *)(v0 + 144);
  swift_task_dealloc(*(_QWORD *)(v0 + 208));
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  return (*(uint64_t (**)(id))(v0 + 8))(v12);
}

uint64_t sub_100A39B7C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  swift_release();
  v1 = *(_QWORD *)(v0 + 240);
  if (qword_1010EA120 != -1)
    swift_once(&qword_1010EA120, sub_100A34180);
  v2 = type metadata accessor for Logger(0);
  sub_10001A9E8(v2, (uint64_t)qword_1011B7B28);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = swift_slowAlloc(22, -1);
    v7 = (uint64_t *)swift_slowAlloc(8, -1);
    v8 = swift_slowAlloc(32, -1);
    v15 = v8;
    *(_DWORD *)v6 = 136446466;
    *(_QWORD *)(v0 + 120) = sub_100016940(0xD00000000000001ELL, 0x8000000100EECA00, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 120, v0 + 128, v6 + 4, v6 + 12);
    *(_WORD *)(v6 + 12) = 2114;
    swift_errorRetain(v1);
    v9 = _swift_stdlib_bridgeErrorToNSError(v1);
    *(_QWORD *)(v0 + 128) = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 128, v0 + 136, v6 + 14, v6 + 22);
    *v7 = v9;
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "%{public}s failed with lost mode related error %{public}@!", (uint8_t *)v6, 0x16u);
    v10 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v7, 1, v10);
    swift_slowDealloc(v7, -1, -1);
    swift_arrayDestroy(v8, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v6, -1, -1);

    swift_errorRelease(v1);
  }
  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    swift_errorRelease(v1);

  }
  v11 = *(_QWORD *)(v0 + 192);
  v12 = *(_QWORD *)(v0 + 168);
  v13 = *(_QWORD *)(v0 + 144);
  swift_task_dealloc(*(_QWORD *)(v0 + 208));
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

uint64_t sub_100A39DF8(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for LostModeAlertInfo(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100A39E34()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100A39E5C()
{
  uint64_t v0;

  return sub_100A35490(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_100A39E64()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100A39E74()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));

  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100A39EA8()
{
  uint64_t v0;

  return sub_100A35860(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(void **)(v0 + 32), *(_QWORD *)(v0 + 40));
}

uint64_t sub_100A39EB4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100A39EC4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

void sub_100A39EE8(_QWORD *a1@<X8>)
{
  uint64_t v1;

  sub_100E03BD4(*(uint64_t **)(v1 + 16), *(char **)(v1 + 24), a1);
}

void sub_100A39F00()
{
  uint64_t v0;

  sub_100A362B4(*(void (**)(void *))(v0 + 16));
}

uint64_t sub_100A39F1C()
{
  uint64_t v0;

  return sub_100A351B4(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_100A39F24()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100A39F34()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

_QWORD *sub_100A39F58(_QWORD *a1)
{
  uint64_t v1;

  return sub_100428190(a1, v1);
}

uint64_t storeEnumTagSinglePayload for AccessoryDiscoveryEntitlement(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_100A39FA0 + 4 * byte_100E59A60[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_100A39FC0 + 4 * byte_100E59A65[v4]))();
}

_BYTE *sub_100A39FA0(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_100A39FC0(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100A39FC8(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100A39FD0(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100A39FD8(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100A39FE0(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for AccessoryDiscoveryEntitlement()
{
  return &type metadata for AccessoryDiscoveryEntitlement;
}

unint64_t sub_100A3A000()
{
  unint64_t result;

  result = qword_101110738;
  if (!qword_101110738)
  {
    result = swift_getWitnessTable(a1_29, &type metadata for AccessoryDiscoveryEntitlement);
    atomic_store(result, (unint64_t *)&qword_101110738);
  }
  return result;
}

unint64_t sub_100A3A048()
{
  unint64_t result;

  result = qword_101110740;
  if (!qword_101110740)
  {
    result = swift_getWitnessTable(aA_48, &type metadata for AccessoryDiscoveryEntitlement);
    atomic_store(result, (unint64_t *)&qword_101110740);
  }
  return result;
}

uint64_t sub_100A3A0E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100A3A0EC);
}

uint64_t sub_100A3A0EC(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for FMNAccountType(0);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 20)], a2, v8);
  }
}

uint64_t sub_100A3A168(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100A3A174);
}

char *sub_100A3A174(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for FMNAccountType(0);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 20)], a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for FetchEndpoint(uint64_t a1)
{
  uint64_t result;

  result = qword_1011107A8;
  if (!qword_1011107A8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for FetchEndpoint);
  return result;
}

uint64_t sub_100A3A224()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t *, _QWORD);
  Swift::String v5;
  uint64_t v7;

  v1 = *v0;
  v2 = sub_10001A9A8(&qword_1010EBF60);
  v3 = OS_dispatch_queue.sync<A>(execute:)(sub_10003403C, v1, v2);
  URLComponents.init()(v3);
  URLComponents.scheme.setter(0x7370747468, 0xE500000000000000);
  URLComponents.host.setter();
  URLComponents.path.setter();
  v4 = (uint64_t (*)(uint64_t *, _QWORD))URLComponents.path.modify(&v7);
  v5._countAndFlagsBits = 0x68637465662FLL;
  v5._object = (void *)0xE600000000000000;
  String.append(_:)(v5);
  return v4(&v7, 0);
}

_QWORD *sub_100A3A2FC(unint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *result;
  uint64_t v4;
  uint64_t v5;
  id v6;
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;

  v1 = a1;
  if (a1 >> 62)
    goto LABEL_15;
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (!v2)
      return _swiftEmptyArrayStorage;
    result = (_QWORD *)sub_10009A2F4(0, v2 & ~(v2 >> 63), 0);
    if (v2 < 0)
      break;
    v4 = 0;
    v17 = v1 & 0xC000000000000001;
    v5 = v1;
    while (v2 != v4)
    {
      if (v17)
        v6 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v4, v1);
      else
        v6 = *(id *)(v1 + 8 * v4 + 32);
      v7 = v6;
      v8 = objc_msgSend(v7, "request");
      v9 = objc_msgSend(v8, "identifier");
      v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
      v12 = v11;

      v14 = _swiftEmptyArrayStorage[2];
      v13 = _swiftEmptyArrayStorage[3];
      if (v14 >= v13 >> 1)
        sub_10009A2F4(v13 > 1, v14 + 1, 1);
      ++v4;
      _swiftEmptyArrayStorage[2] = v14 + 1;
      v15 = &_swiftEmptyArrayStorage[2 * v14];
      v15[4] = v10;
      v15[5] = v12;
      v1 = v5;
      if (v2 == v4)
        return _swiftEmptyArrayStorage;
    }
    __break(1u);
LABEL_15:
    if (v1 < 0)
      v16 = v1;
    else
      v16 = v1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v1);
    v2 = _CocoaArrayWrapper.endIndex.getter(v16);
    swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

uint64_t sub_100A3A4A8()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_1000234D8(v0, qword_1011B7B58);
  sub_10001A9E8(v0, (uint64_t)qword_1011B7B58);
  return Logger.init(subsystem:category:)(0xD00000000000001DLL, 0x8000000100EC5D30, 0xD000000000000011, 0x8000000100EECC30);
}

uint64_t sub_100A3A528()
{
  uint64_t v0;
  uint64_t result;

  v0 = type metadata accessor for UserNotificationPublisher();
  result = swift_allocObject(v0, 24, 7);
  *(_QWORD *)(result + 16) = _swiftEmptyArrayStorage;
  qword_1011B7B70 = result;
  return result;
}

uint64_t sub_100A3A55C(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, BOOL))
{
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  os_log_type_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v28;
  _BYTE v29[32];
  uint64_t v30;
  _QWORD v31[5];

  if (!a1)
  {
    if (qword_1010EA138 != -1)
      swift_once(&qword_1010EA138, sub_100A3A4A8);
    v21 = type metadata accessor for Logger(0);
    sub_10001A9E8(v21, (uint64_t)qword_1011B7B58);
    v22 = sub_100030784(a2, (uint64_t)v31);
    v8 = Logger.logObject.getter(v22);
    v23 = static os_log_type_t.default.getter(v8);
    if (os_log_type_enabled(v8, v23))
    {
      v10 = swift_slowAlloc(12, -1);
      v11 = swift_slowAlloc(32, -1);
      v30 = v11;
      *(_DWORD *)v10 = 136315138;
      sub_100030784((uint64_t)v31, (uint64_t)&v28);
      v24 = sub_10001A9A8(&qword_101106FF0);
      v25 = String.init<A>(describing:)(&v28, v24);
      v28 = sub_100016940(v25, v26, &v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, v29, v10 + 4, v10 + 12);
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v31);
      _os_log_impl((void *)&_mh_execute_header, v8, v23, "Successfuly posted user notification for notification: %s", (uint8_t *)v10, 0xCu);
      v18 = (char *)&type metadata for Any + 8;
      v19 = v11;
      v20 = 1;
LABEL_10:
      swift_arrayDestroy(v19, v20, v18);
      swift_slowDealloc(v11, -1, -1);
      swift_slowDealloc(v10, -1, -1);

      if (!a3)
        return sub_10077F500(a1, a1 != 0);
      goto LABEL_13;
    }
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v31);

    if (!a3)
      return sub_10077F500(a1, a1 != 0);
LABEL_13:
    a3(a1, a1 != 0);
    return sub_10077F500(a1, a1 != 0);
  }
  swift_errorRetain(a1);
  if (qword_1010EA138 != -1)
    swift_once(&qword_1010EA138, sub_100A3A4A8);
  v6 = type metadata accessor for Logger(0);
  sub_10001A9E8(v6, (uint64_t)qword_1011B7B58);
  sub_100030784(a2, (uint64_t)v31);
  swift_errorRetain(a1);
  v7 = swift_errorRetain(a1);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter(v8);
  if (os_log_type_enabled(v8, v9))
  {
    v10 = swift_slowAlloc(22, -1);
    v11 = swift_slowAlloc(64, -1);
    v30 = v11;
    *(_DWORD *)v10 = 136315394;
    sub_100030784((uint64_t)v31, (uint64_t)&v28);
    v12 = sub_10001A9A8(&qword_101106FF0);
    v13 = String.init<A>(describing:)(&v28, v12);
    v28 = sub_100016940(v13, v14, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, v29, v10 + 4, v10 + 12);
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v31);
    *(_WORD *)(v10 + 12) = 2080;
    v28 = a1;
    swift_errorRetain(a1);
    v15 = sub_10001A9A8((uint64_t *)&unk_1010EB920);
    v16 = String.init<A>(describing:)(&v28, v15);
    v28 = sub_100016940(v16, v17, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, v29, v10 + 14, v10 + 22);
    swift_bridgeObjectRelease();
    swift_errorRelease(a1);
    swift_errorRelease(a1);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Failed to post user notification for notification: %s due to error: %s", (uint8_t *)v10, 0x16u);
    v18 = (char *)&type metadata for Any + 8;
    v19 = v11;
    v20 = 2;
    goto LABEL_10;
  }
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v31);
  swift_errorRelease(a1);
  swift_errorRelease(a1);

  if (a3)
    goto LABEL_13;
  return sub_10077F500(a1, a1 != 0);
}

void sub_100A3A944(unint64_t a1, uint64_t a2, void *a3)
{
  void *v5;
  Class isa;
  _QWORD v7[4];

  v7[2] = a2;
  swift_bridgeObjectRetain(a1);
  v5 = sub_10008BE70(sub_100A3C32C, v7, a1);
  sub_100A3A2FC((unint64_t)v5);
  swift_bridgeObjectRelease();
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(a3, "removeDeliveredNotificationsWithIdentifiers:", isa);

}

void sub_100A3A9E0(char a1)
{
  __asm { BR              X12 }
}

uint64_t sub_100A3AA24()
{
  int v0;
  _QWORD *v1;

  if ((v0 - 1) > 1)
    v1 = &SPSeparationAlertLeftBehindDevicesCategoryIdentifier;
  else
    v1 = &SPSeparationAlertLeftBehindItemsCategoryIdentifier;
  return static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
}

uint64_t sub_100A3AAFC@<X0>(uint64_t a1@<X8>)
{
  return a1 - 27;
}

void sub_100A3AB0C()
{
  JUMPOUT(0x100A3AB18);
}

unint64_t sub_100A3AB28()
{
  return 0xD00000000000003FLL;
}

uint64_t sub_100A3AB54(id *a1, _QWORD *a2)
{
  return sub_100A3AB6C(a1, a2) & 1;
}

uint64_t sub_100A3AB6C(id *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v20;
  char v21;
  id v22;
  id v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  id v34;
  _QWORD v35[3];
  uint64_t v36;
  uint64_t v37;

  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v35[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = *a1;
  v8 = objc_msgSend(v34, "request");
  v9 = objc_msgSend(v8, "identifier");

  v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
  v12 = v11;

  v14 = a2[3];
  v13 = a2[4];
  sub_10001AA44(a2, v14);
  v15 = (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 16))(v14, v13);
  v16 = UUID.uuidString.getter(v15);
  v18 = v17;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  if (v10 == v16 && v12 == v18)
  {
    swift_bridgeObjectRelease_n(v12, 2);
    sub_100030784((uint64_t)a2, (uint64_t)v35);
  }
  else
  {
    v20 = _stringCompareWithSmolCheck(_:_:expecting:)(v10, v12, v16, v18, 0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_100030784((uint64_t)a2, (uint64_t)v35);
    v21 = 0;
    if ((v20 & 1) == 0)
      goto LABEL_13;
  }
  v22 = objc_msgSend(v34, "request");
  v23 = objc_msgSend(v22, "content");

  v24 = objc_msgSend(v23, "categoryIdentifier");
  v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
  v27 = v26;

  v28 = v36;
  v29 = v37;
  sub_10001AA44(v35, v36);
  v30 = (*(uint64_t (**)(uint64_t, uint64_t))(v29 + 8))(v28, v29);
  sub_100A3A9E0(v30);
  if (v25 == v31 && v27 == v32)
    v21 = 1;
  else
    v21 = _stringCompareWithSmolCheck(_:_:expecting:)(v25, v27, v31, v32, 0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_13:
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v35);
  return v21 & 1;
}

uint64_t sub_100A3ADE8(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, BOOL))
{
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  const char *v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v29;
  _BYTE v30[32];
  uint64_t v31;
  uint64_t v32;
  _BYTE v33[32];
  _QWORD v34[5];

  if (!a1)
  {
    if (qword_1010EA138 != -1)
      swift_once(&qword_1010EA138, sub_100A3A4A8);
    v21 = type metadata accessor for Logger(0);
    sub_10001A9E8(v21, (uint64_t)qword_1011B7B58);
    sub_100030784(a2, (uint64_t)v34);
    v22 = sub_100030784(a3, (uint64_t)&v32);
    v9 = Logger.logObject.getter(v22);
    v10 = static os_log_type_t.default.getter(v9);
    if (os_log_type_enabled(v9, v10))
    {
      v11 = swift_slowAlloc(22, -1);
      v12 = swift_slowAlloc(64, -1);
      v31 = v12;
      *(_DWORD *)v11 = 136315394;
      sub_100030784((uint64_t)v34, (uint64_t)&v29);
      v23 = sub_10001A9A8(&qword_101106FF0);
      v24 = String.init<A>(describing:)(&v29, v23);
      v29 = sub_100016940(v24, v25, &v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, v30, v11 + 4, v11 + 12);
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v34);
      *(_WORD *)(v11 + 12) = 2080;
      sub_100030784((uint64_t)&v32, (uint64_t)&v29);
      v26 = String.init<A>(describing:)(&v29, v23);
      v29 = sub_100016940(v26, v27, &v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, v30, v11 + 14, v11 + 22);
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v32);
      v19 = "Successfuly updated user notification %s with %s";
LABEL_10:
      _os_log_impl((void *)&_mh_execute_header, v9, v10, v19, (uint8_t *)v11, 0x16u);
      swift_arrayDestroy(v12, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v12, -1, -1);
      swift_slowDealloc(v11, -1, -1);

      if (!a4)
        return sub_10077F500(a1, a1 != 0);
      goto LABEL_13;
    }
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v34);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v32);

    if (!a4)
      return sub_10077F500(a1, a1 != 0);
LABEL_13:
    a4(a1, a1 != 0);
    return sub_10077F500(a1, a1 != 0);
  }
  swift_errorRetain(a1);
  if (qword_1010EA138 != -1)
    swift_once(&qword_1010EA138, sub_100A3A4A8);
  v7 = type metadata accessor for Logger(0);
  sub_10001A9E8(v7, (uint64_t)qword_1011B7B58);
  sub_100030784(a3, (uint64_t)v34);
  swift_errorRetain(a1);
  v8 = swift_errorRetain(a1);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.default.getter(v9);
  if (os_log_type_enabled(v9, v10))
  {
    v11 = swift_slowAlloc(22, -1);
    v12 = swift_slowAlloc(64, -1);
    v29 = v12;
    *(_DWORD *)v11 = 136315394;
    sub_100030784((uint64_t)v34, (uint64_t)&v32);
    v13 = sub_10001A9A8(&qword_101106FF0);
    v14 = String.init<A>(describing:)(&v32, v13);
    v32 = sub_100016940(v14, v15, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, v33, v11 + 4, v11 + 12);
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v34);
    *(_WORD *)(v11 + 12) = 2080;
    v32 = a1;
    swift_errorRetain(a1);
    v16 = sub_10001A9A8((uint64_t *)&unk_1010EB920);
    v17 = String.init<A>(describing:)(&v32, v16);
    v32 = sub_100016940(v17, v18, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, v33, v11 + 14, v11 + 22);
    swift_bridgeObjectRelease();
    swift_errorRelease(a1);
    swift_errorRelease(a1);
    v19 = "Failed to update notification for notification: %s due to error: %s";
    goto LABEL_10;
  }
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v34);
  swift_errorRelease(a1);
  swift_errorRelease(a1);

  if (a4)
    goto LABEL_13;
  return sub_10077F500(a1, a1 != 0);
}

uint64_t sub_100A3B218()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocClassInstance(v0, 24, 7);
}

uint64_t type metadata accessor for UserNotificationPublisher()
{
  return objc_opt_self(_TtC12searchpartyd25UserNotificationPublisher);
}

uint64_t sub_100A3B25C(unsigned __int8 *a1)
{
  return sub_100A3B2A4(*a1);
}

uint64_t sub_100A3B268@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;

  v2 = type metadata accessor for URL(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(a1, 1, 1, v2);
}

uint64_t sub_100A3B2A4(unsigned __int8 a1)
{
  return ((uint64_t (*)(void))((char *)sub_100A3B2C8 + 4 * byte_100E59C6D[a1 >> 5]))();
}

BOOL sub_100A3B2C8@<W0>(unsigned int a1@<W8>)
{
  int v1;

  return a1 <= 0x1F && v1 == a1;
}

id sub_100A3B3C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  NSURL *v16;
  void *v17;
  void *v18;
  id v19;
  uint64_t (*v20)(uint64_t, uint64_t);
  char v21;
  NSString v22;
  NSString v23;
  NSString v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v29;
  Class isa;
  uint64_t v32;
  uint64_t v33;
  _OWORD v34[2];
  __int128 v35;
  void *v36;

  v6 = sub_10001A9A8(&qword_1010FBA40);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(a2 - 8);
  __chkstk_darwin(v7);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a1, a2);
  v13 = objc_msgSend(objc_allocWithZone((Class)UNMutableNotificationContent), "init");
  (*(void (**)(uint64_t, uint64_t))(a3 + 96))(a2, a3);
  v14 = type metadata accessor for URL(0);
  v15 = *(_QWORD *)(v14 - 8);
  v17 = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v9, 1, v14) != 1)
  {
    URL._bridgeToObjectiveC()(v16);
    v17 = v18;
    (*(void (**)(char *, uint64_t))(v15 + 8))(v9, v14);
  }
  objc_msgSend(v13, "setDefaultActionURL:", v17);

  v19 = objc_msgSend((id)objc_opt_self(UNNotificationSound), "defaultCriticalSound");
  objc_msgSend(v13, "setSound:", v19);

  v20 = *(uint64_t (**)(uint64_t, uint64_t))(a3 + 8);
  v21 = v20(a2, a3);
  sub_100A3A9E0(v21);
  v22 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  objc_msgSend(v13, "setCategoryIdentifier:", v22);

  (*(void (**)(uint64_t, uint64_t))(a3 + 24))(a2, a3);
  v23 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  objc_msgSend(v13, "setTitle:", v23);

  (*(void (**)(uint64_t, uint64_t))(a3 + 32))(a2, a3);
  v24 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  objc_msgSend(v13, "setBody:", v24);

  if (v20(a2, a3) == 67)
    v25 = 1;
  else
    v25 = 2;
  objc_msgSend(v13, "setInterruptionLevel:", v25);
  v26 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 40))(a2, a3);
  v27 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 64))(a2, a3);
  v36 = &type metadata for Bool;
  LOBYTE(v35) = v27 & 1;
  sub_10010F90C(&v35, v34);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v26);
  v33 = v26;
  sub_10010A7E4(v34, 0xD000000000000023, 0x8000000100EECE00, isUniquelyReferenced_nonNull_native);
  v29 = v33;
  swift_bridgeObjectRelease();
  sub_10047ACFC(v29);
  swift_bridgeObjectRelease();
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v13, "setUserInfo:", isa);

  objc_msgSend(v13, "setShouldIgnoreDoNotDisturb:", (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 48))(a2, a3) & 1);
  objc_msgSend(v13, "setShouldUseRequestIdentifierForDismissalSync:", (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 80))(a2, a3) & 1);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, a2);
  return v13;
}

uint64_t sub_100A3B794(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  id v15;
  NSString v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  NSString v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint8_t *v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint8_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  id v46;
  void *v47;
  uint8_t *v49;
  uint64_t v50;
  uint64_t (*v51)(uint64_t, uint64_t);
  void (*v52)(char *, uint64_t);
  id v53;
  id v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD aBlock[3];
  void *v58;
  uint64_t (*v59)(uint64_t);
  uint64_t v60;
  __int128 v61[2];
  uint64_t v62;
  _QWORD v63[6];

  v10 = type metadata accessor for UUID(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v49 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v63[3] = a4;
  v63[4] = a5;
  v14 = sub_100018F08(v63);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 16))(v14, a1, a4);
  if (((*(uint64_t (**)(uint64_t, uint64_t))(a5 + 72))(a4, a5) & 1) != 0)
  {
    v55 = a3;
    (*(void (**)(uint64_t, uint64_t))(a5 + 88))(a4, a5);
    v15 = objc_allocWithZone((Class)UNUserNotificationCenter);
    v16 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    v54 = objc_msgSend(v15, "initWithBundleIdentifier:", v16);

    v17 = sub_100A3B3C8((uint64_t)v14, a4, a5);
    if (((*(uint64_t (**)(uint64_t, uint64_t))(a5 + 56))(a4, a5) & 1) != 0)
      v18 = 15;
    else
      v18 = 7;
    v51 = *(uint64_t (**)(uint64_t, uint64_t))(a5 + 16);
    v19 = v51(a4, a5);
    UUID.uuidString.getter(v19);
    v56 = a2;
    v52 = *(void (**)(char *, uint64_t))(v11 + 8);
    v52(v13, v10);
    v20 = v17;
    v21 = String._bridgeToObjectiveC()();
    v22 = v56;
    swift_bridgeObjectRelease();
    v53 = objc_msgSend((id)objc_opt_self(UNNotificationRequest), "requestWithIdentifier:content:trigger:destinations:", v21, v20, 0, v18);

    if (((*(uint64_t (**)(uint64_t, uint64_t))(a5 + 64))(a4, a5) & 1) == 0)
    {
      if (qword_1010EA138 != -1)
        swift_once(&qword_1010EA138, sub_100A3A4A8);
      v23 = type metadata accessor for Logger(0);
      sub_10001A9E8(v23, (uint64_t)qword_1011B7B58);
      v24 = sub_100030784((uint64_t)v63, (uint64_t)aBlock);
      v25 = Logger.logObject.getter(v24);
      v26 = static os_log_type_t.error.getter(v25);
      if (os_log_type_enabled(v25, v26))
      {
        v27 = (uint8_t *)swift_slowAlloc(12, -1);
        v50 = swift_slowAlloc(32, -1);
        *(_QWORD *)&v61[0] = v50;
        *(_DWORD *)v27 = 136315138;
        v49 = v27 + 4;
        sub_10001AA44(aBlock, (uint64_t)v58);
        v51(a4, a5);
        v28 = sub_1001D4C18();
        v29 = dispatch thunk of CustomStringConvertible.description.getter(v10, v28);
        v31 = v30;
        v52(v13, v10);
        v62 = sub_100016940(v29, v31, (uint64_t *)v61);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v62, v63, v49, v27 + 12);
        swift_bridgeObjectRelease();
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(aBlock);
        _os_log_impl((void *)&_mh_execute_header, v25, v26, "Notification with identifier %s **WILL NOT** be forwarded to the companion", v27, 0xCu);
        v32 = v50;
        swift_arrayDestroy(v50, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v32, -1, -1);
        v33 = v27;
        v22 = v56;
        swift_slowDealloc(v33, -1, -1);
      }
      else
      {
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(aBlock);
      }

    }
    sub_100030784((uint64_t)v63, (uint64_t)v61);
    v43 = swift_allocObject(&unk_1010A2E40, 72, 7);
    sub_10000F9FC(v61, v43 + 16);
    v44 = v55;
    *(_QWORD *)(v43 + 56) = v22;
    *(_QWORD *)(v43 + 64) = v44;
    v59 = sub_100216F78;
    v60 = v43;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100555E2C;
    v58 = &unk_1010A2E58;
    v45 = _Block_copy(aBlock);
    sub_10001D898(v22, v44);
    swift_release();
    v47 = v53;
    v46 = v54;
    objc_msgSend(v54, "addNotificationRequest:withCompletionHandler:", v53, v45);

    _Block_release(v45);
  }
  else
  {
    if (qword_1010EA138 != -1)
      swift_once(&qword_1010EA138, sub_100A3A4A8);
    v34 = type metadata accessor for Logger(0);
    sub_10001A9E8(v34, (uint64_t)qword_1011B7B58);
    v35 = sub_100030784((uint64_t)v63, (uint64_t)aBlock);
    v36 = Logger.logObject.getter(v35);
    v37 = static os_log_type_t.default.getter(v36);
    if (os_log_type_enabled(v36, v37))
    {
      v38 = (uint8_t *)swift_slowAlloc(12, -1);
      v39 = swift_slowAlloc(32, -1);
      v62 = v39;
      *(_DWORD *)v38 = 136315138;
      sub_100030784((uint64_t)aBlock, (uint64_t)v61);
      v40 = sub_10001A9A8(&qword_101106FF0);
      v41 = String.init<A>(describing:)(v61, v40);
      *(_QWORD *)&v61[0] = sub_100016940(v41, v42, &v62);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v61, (char *)v61 + 8, v38 + 4, v38 + 12);
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(aBlock);
      _os_log_impl((void *)&_mh_execute_header, v36, v37, "Refusing to post disabled notification: %s", v38, 0xCu);
      swift_arrayDestroy(v39, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v39, -1, -1);
      swift_slowDealloc(v38, -1, -1);
    }
    else
    {
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(aBlock);
    }

  }
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v63);
}

_QWORD *sub_100A3BDF0(unsigned __int8 a1)
{
  id v2;
  NSString v3;
  id v4;
  id v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  id v11;
  id v12;
  id v13;
  uint64_t v14;

  v2 = objc_allocWithZone((Class)UNUserNotificationCenter);
  v3 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  v4 = objc_msgSend(v2, "initWithBundleIdentifier:", v3);

  v5 = objc_msgSend(v4, "deliveredNotifications");
  v6 = sub_100A3C2F0();
  v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v5, v6);

  if ((unint64_t)v7 >> 62)
  {
    if (v7 < 0)
      v14 = v7;
    else
      v14 = v7 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v7);
    v8 = _CocoaArrayWrapper.endIndex.getter(v14);
    swift_bridgeObjectRelease();
    if (v8)
    {
LABEL_3:
      if (v8 >= 1)
      {
        v9 = a1 >> 5;
        if ((v7 & 0xC000000000000001) != 0)
          v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v7);
        else
          v10 = *(id *)(v7 + 32);
        v11 = objc_msgSend(v10, "request");
        v12 = objc_msgSend(v11, "content");

        v13 = objc_msgSend(v12, "categoryIdentifier");
        static String._unconditionallyBridgeFromObjectiveC(_:)(v13);

        __asm { BR              X8 }
      }
      __break(1u);
      JUMPOUT(0x100A3C2BCLL);
    }
  }
  else
  {
    v8 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v8)
      goto LABEL_3;
  }
  swift_bridgeObjectRelease();

  return _swiftEmptyArrayStorage;
}

unint64_t sub_100A3C2F0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_101119470;
  if (!qword_101119470)
  {
    v1 = objc_opt_self(UNNotification);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_101119470);
  }
  return result;
}

uint64_t sub_100A3C32C(id *a1)
{
  uint64_t v1;

  return sub_100A3AB6C(a1, *(_QWORD **)(v1 + 16)) & 1;
}

uint64_t sub_100A3C348()
{
  uint64_t v0;

  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
  if (*(_QWORD *)(v0 + 56))
    swift_release();
  return swift_deallocObject(v0, 72, 7);
}

void sub_100A3C37C(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  NSString v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSString v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD aBlock[6];
  __int128 v30[2];
  __int128 v31[2];

  v27 = a3;
  v28 = a4;
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = a1[3];
  v11 = a1[4];
  sub_10001AA44(a1, v10);
  (*(void (**)(uint64_t, uint64_t))(v11 + 88))(v10, v11);
  v12 = objc_allocWithZone((Class)UNUserNotificationCenter);
  v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  v14 = objc_msgSend(v12, "initWithBundleIdentifier:", v13);

  v15 = a2[3];
  v16 = a2[4];
  v17 = sub_10001AA44(a2, v15);
  v18 = sub_100A3B3C8((uint64_t)v17, v15, v16);
  v20 = a1[3];
  v19 = a1[4];
  sub_10001AA44(a1, v20);
  v21 = (*(uint64_t (**)(uint64_t, uint64_t))(v19 + 16))(v20, v19);
  UUID.uuidString.getter(v21);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  v22 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  sub_100030784((uint64_t)a1, (uint64_t)v31);
  sub_100030784((uint64_t)a2, (uint64_t)v30);
  v23 = swift_allocObject(&unk_1010A2E90, 112, 7);
  sub_10000F9FC(v31, v23 + 16);
  sub_10000F9FC(v30, v23 + 56);
  v25 = v27;
  v24 = v28;
  *(_QWORD *)(v23 + 96) = v27;
  *(_QWORD *)(v23 + 104) = v24;
  aBlock[4] = sub_100A3C638;
  aBlock[5] = v23;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100555E2C;
  aBlock[3] = &unk_1010A2EA8;
  v26 = _Block_copy(aBlock);
  sub_10001D898(v25, v24);
  swift_release();
  objc_msgSend(v14, "replaceContentForRequestWithIdentifier:replacementContent:completionHandler:", v22, v18, v26);
  _Block_release(v26);

}

uint64_t sub_100A3C5FC()
{
  _QWORD *v0;

  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 7);
  if (v0[12])
    swift_release();
  return swift_deallocObject(v0, 112, 7);
}

uint64_t sub_100A3C638(uint64_t a1)
{
  uint64_t v1;

  return sub_100A3ADE8(a1, v1 + 16, v1 + 56, *(void (**)(uint64_t, BOOL))(v1 + 96));
}

unint64_t destroy for UserNotificationPublisher.Error(unint64_t *a1)
{
  unint64_t result;
  int v2;

  result = *a1;
  v2 = -1;
  if (result < 0xFFFFFFFF)
    v2 = result;
  if (v2 - 1 < 0)
    return swift_errorRelease(result);
  return result;
}

_QWORD *_s12searchpartyd25UserNotificationPublisherC5ErrorOwCP_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  LODWORD(v4) = -1;
  if (*a2 < 0xFFFFFFFFuLL)
    v4 = *a2;
  if ((int)v4 - 1 < 0)
    swift_errorRetain(*a2);
  *a1 = v3;
  return a1;
}

_QWORD *assignWithCopy for UserNotificationPublisher.Error(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;

  v3 = *a1;
  LODWORD(v4) = -1;
  if (*a1 >= 0xFFFFFFFFuLL)
    LODWORD(v5) = -1;
  else
    v5 = *a1;
  v6 = v5 - 1;
  v7 = *a2;
  if (*a2 < 0xFFFFFFFFuLL)
    v4 = *a2;
  v8 = v4 - 1;
  if (v6 < 0)
  {
    if (v8 < 0)
    {
      swift_errorRetain(*a2);
      *a1 = v7;
      swift_errorRelease(v3);
    }
    else
    {
      swift_errorRelease(*a1);
      *a1 = *a2;
    }
  }
  else
  {
    if (v8 < 0)
      swift_errorRetain(*a2);
    *a1 = v7;
  }
  return a1;
}

unint64_t *assignWithTake for UserNotificationPublisher.Error(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;
  int v4;
  unint64_t v5;
  unint64_t v6;

  v3 = *a1;
  v4 = -1;
  if (v3 < 0xFFFFFFFF)
    v4 = v3;
  v5 = *a2;
  if (v4 - 1 < 0)
  {
    LODWORD(v6) = -1;
    if (v5 < 0xFFFFFFFF)
      v6 = *a2;
    if ((int)v6 - 1 < 0)
    {
      *a1 = v5;
      swift_errorRelease(v3);
      return a1;
    }
    swift_errorRelease(v3);
  }
  *a1 = v5;
  return a1;
}

uint64_t getEnumTagSinglePayload for UserNotificationPublisher.Error(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFE && *((_BYTE *)a1 + 8))
    return (*(_DWORD *)a1 + 2147483646);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  if ((v4 + 1) >= 2)
    return v4;
  else
    return 0;
}

uint64_t sub_100A3C804(uint64_t *a1)
{
  uint64_t v1;
  int v2;

  v1 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  v2 = v1 - 1;
  if (v2 < 0)
    v2 = -1;
  return (v2 + 1);
}

_QWORD *sub_100A3C828(_QWORD *result, unsigned int a2)
{
  if (a2 > 0x7FFFFFFE)
  {
    a2 -= 0x7FFFFFFF;
    goto LABEL_5;
  }
  if (a2)
LABEL_5:
    *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for UserNotificationPublisher.Error()
{
  return &type metadata for UserNotificationPublisher.Error;
}

uint64_t storeEnumTagSinglePayload for UserNotificationDestination(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_100A3C8AC + 4 * byte_100E59C7F[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_100A3C8E0 + 4 * byte_100E59C7A[v4]))();
}

uint64_t sub_100A3C8E0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100A3C8E8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100A3C8F0);
  return result;
}

uint64_t sub_100A3C8FC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100A3C904);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_100A3C908(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100A3C910(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for UserNotificationDestination()
{
  return &type metadata for UserNotificationDestination;
}

unint64_t sub_100A3C930()
{
  unint64_t result;

  result = qword_1011108D8;
  if (!qword_1011108D8)
  {
    result = swift_getWitnessTable(aU_34, &type metadata for UserNotificationDestination);
    atomic_store(result, (unint64_t *)&qword_1011108D8);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for UserNotificationCategory(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;

  if (!a2)
    return 0;
  if (a2 < 0x3C)
    goto LABEL_17;
  if (a2 + 196 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 196) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 196;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 196;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 196;
  }
LABEL_17:
  v6 = ((*a1 >> 5) & 0xFFFFFFC7 | (8 * ((*a1 >> 2) & 7))) ^ 0x3F;
  if (v6 >= 0x3B)
    v6 = -1;
  return v6 + 1;
}

uint64_t storeEnumTagSinglePayload for UserNotificationCategory(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 196 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 196) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0x3C)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0x3B)
    return ((uint64_t (*)(void))((char *)&loc_100A3CA60 + 4 * byte_100E59C89[v4]))();
  *a1 = a2 - 60;
  return ((uint64_t (*)(void))((char *)sub_100A3CA94 + 4 * byte_100E59C84[v4]))();
}

uint64_t sub_100A3CA94(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100A3CA9C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100A3CAA4);
  return result;
}

uint64_t sub_100A3CABC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100A3CAC4);
  *(_BYTE *)result = 4 * (((-a2 >> 3) & 7) - 8 * a2);
  return result;
}

uint64_t sub_100A3CAC8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100A3CAD0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100A3CADC(unsigned __int8 *a1)
{
  unsigned int v1;

  v1 = *a1;
  if (v1 <= 0x3F)
    return v1 >> 5;
  else
    return (v1 & 3 | (4 * (v1 >> 5))) - 6;
}

_BYTE *sub_100A3CAFC(_BYTE *result)
{
  *result &= 0x1Fu;
  return result;
}

_BYTE *sub_100A3CB0C(_BYTE *result, unsigned int a2)
{
  if (a2 < 2)
    *result = *result & 3 | (32 * a2);
  else
    *result = ((a2 - 2) & 3 | (32 * ((a2 - 2) >> 2))) + 64;
  return result;
}

ValueMetadata *type metadata accessor for UserNotificationCategory()
{
  return &type metadata for UserNotificationCategory;
}

unint64_t sub_100A3CB58(unint64_t a1, uint64_t a2, int *a3)
{
  int v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v24 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = v24 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    v7 = *(_QWORD *)a2;
    v8 = *(_QWORD *)(a2 + 8);
    sub_10001BBBC(*(_QWORD *)a2, v8);
    *(_QWORD *)a1 = v7;
    *(_QWORD *)(a1 + 8) = v8;
    v9 = *(_QWORD *)(a2 + 16);
    v10 = *(_QWORD *)(a2 + 24);
    sub_10001BBBC(v9, v10);
    *(_QWORD *)(a1 + 16) = v9;
    *(_QWORD *)(a1 + 24) = v10;
    *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
    v11 = *(_QWORD *)(a2 + 40);
    v12 = *(_QWORD *)(a2 + 48);
    sub_10001BBBC(v11, v12);
    *(_QWORD *)(a1 + 40) = v11;
    *(_QWORD *)(a1 + 48) = v12;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    v13 = a3[9];
    v14 = a1 + v13;
    v15 = a2 + v13;
    v16 = type metadata accessor for Date(0);
    v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 16);
    v17(v14, v15, v16);
    v18 = a3[11];
    *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
    v19 = (_QWORD *)(a1 + v18);
    v20 = (_QWORD *)(a2 + v18);
    v21 = type metadata accessor for CachedHistoricalLocation(0);
    v22 = *(_QWORD *)(v21 - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
    {
      v23 = sub_10001A9A8(&qword_1010F0ED8);
      memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    }
    else
    {
      *(_OWORD *)v19 = *(_OWORD *)v20;
      v19[2] = v20[2];
      v17((uint64_t)v19 + *(int *)(v21 + 28), (uint64_t)v20 + *(int *)(v21 + 28), v16);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
    }
    *(_BYTE *)(a1 + a3[12]) = *(_BYTE *)(a2 + a3[12]);
  }
  return a1;
}

uint64_t type metadata accessor for CachedHistoricalLocation(uint64_t a1)
{
  return sub_10001B630(a1, qword_1011109F0, (uint64_t)&nominal type descriptor for CachedHistoricalLocation);
}

uint64_t sub_100A3CD04(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  void (*v9)(uint64_t, uint64_t);

  sub_10001BC14(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  sub_10001BC14(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
  sub_10001BC14(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
  v4 = a1 + *(int *)(a2 + 36);
  v5 = type metadata accessor for Date(0);
  v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v9(v4, v5);
  v6 = a1 + *(int *)(a2 + 44);
  v7 = type metadata accessor for CachedHistoricalLocation(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7);
  if (!(_DWORD)result)
    return ((uint64_t (*)(uint64_t, uint64_t))v9)(v6 + *(int *)(v7 + 28), v5);
  return result;
}

uint64_t sub_100A3CDD0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  void (*v16)(char *, char *, uint64_t);
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = *(_QWORD *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  sub_10001BBBC(*(_QWORD *)a2, v7);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  v8 = *(_QWORD *)(a2 + 16);
  v9 = *(_QWORD *)(a2 + 24);
  sub_10001BBBC(v8, v9);
  *(_QWORD *)(a1 + 16) = v8;
  *(_QWORD *)(a1 + 24) = v9;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v10 = *(_QWORD *)(a2 + 40);
  v11 = *(_QWORD *)(a2 + 48);
  sub_10001BBBC(v10, v11);
  *(_QWORD *)(a1 + 40) = v10;
  *(_QWORD *)(a1 + 48) = v11;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  v12 = a3[9];
  v13 = (char *)(a1 + v12);
  v14 = (char *)(a2 + v12);
  v15 = type metadata accessor for Date(0);
  v16 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16);
  v16(v13, v14, v15);
  v17 = a3[11];
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  v18 = (_QWORD *)(a1 + v17);
  v19 = (_QWORD *)(a2 + v17);
  v20 = type metadata accessor for CachedHistoricalLocation(0);
  v21 = *(_QWORD *)(v20 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
  {
    v22 = sub_10001A9A8(&qword_1010F0ED8);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
  }
  else
  {
    *(_OWORD *)v18 = *(_OWORD *)v19;
    v18[2] = v19[2];
    v16((char *)v18 + *(int *)(v20 + 28), (char *)v19 + *(int *)(v20 + 28), v15);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
  }
  *(_BYTE *)(a1 + a3[12]) = *(_BYTE *)(a2 + a3[12]);
  return a1;
}

uint64_t sub_100A3CF3C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t, uint64_t);
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(_QWORD *, uint64_t, uint64_t);
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v33;
  int *v34;

  v6 = *(_QWORD *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  sub_10001BBBC(*(_QWORD *)a2, v7);
  v8 = *(_QWORD *)a1;
  v9 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  sub_10001BC14(v8, v9);
  v10 = *(_QWORD *)(a2 + 16);
  v11 = *(_QWORD *)(a2 + 24);
  sub_10001BBBC(v10, v11);
  v12 = *(_QWORD *)(a1 + 16);
  v13 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(a1 + 24) = v11;
  sub_10001BC14(v12, v13);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v14 = *(_QWORD *)(a2 + 40);
  v15 = *(_QWORD *)(a2 + 48);
  sub_10001BBBC(v14, v15);
  v16 = *(_QWORD *)(a1 + 40);
  v17 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = v14;
  *(_QWORD *)(a1 + 48) = v15;
  sub_10001BC14(v16, v17);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  v18 = a3[9];
  v19 = a1 + v18;
  v20 = a2 + v18;
  v21 = type metadata accessor for Date(0);
  v33 = *(_QWORD *)(v21 - 8);
  v22 = *(void (**)(uint64_t, uint64_t, uint64_t))(v33 + 24);
  v22(v19, v20, v21);
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  v34 = a3;
  v23 = a3[11];
  v24 = (_QWORD *)(a1 + v23);
  v25 = (_QWORD *)(a2 + v23);
  v26 = type metadata accessor for CachedHistoricalLocation(0);
  v27 = *(_QWORD *)(v26 - 8);
  v28 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v27 + 48);
  v29 = v28(v24, 1, v26);
  v30 = v28(v25, 1, v26);
  if (!v29)
  {
    if (!v30)
    {
      *v24 = *v25;
      v24[1] = v25[1];
      v24[2] = v25[2];
      v22((uint64_t)v24 + *(int *)(v26 + 28), (uint64_t)v25 + *(int *)(v26 + 28), v21);
      goto LABEL_7;
    }
    sub_100A3D13C((uint64_t)v24);
    goto LABEL_6;
  }
  if (v30)
  {
LABEL_6:
    v31 = sub_10001A9A8(&qword_1010F0ED8);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
    goto LABEL_7;
  }
  *v24 = *v25;
  v24[1] = v25[1];
  v24[2] = v25[2];
  (*(void (**)(char *, char *, uint64_t))(v33 + 16))((char *)v24 + *(int *)(v26 + 28), (char *)v25 + *(int *)(v26 + 28), v21);
  (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
LABEL_7:
  *(_BYTE *)(a1 + v34[12]) = *(_BYTE *)(a2 + v34[12]);
  return a1;
}

uint64_t sub_100A3D13C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for CachedHistoricalLocation(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100A3D178(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  v7 = a3[9];
  v8 = (char *)(a1 + v7);
  v9 = (char *)(a2 + v7);
  v10 = type metadata accessor for Date(0);
  v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32);
  v11(v8, v9, v10);
  v12 = a3[11];
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  v13 = (_QWORD *)(a1 + v12);
  v14 = (_QWORD *)(a2 + v12);
  v15 = type metadata accessor for CachedHistoricalLocation(0);
  v16 = *(_QWORD *)(v15 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
  {
    v17 = sub_10001A9A8(&qword_1010F0ED8);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    *(_OWORD *)v13 = *(_OWORD *)v14;
    v13[2] = v14[2];
    v11((char *)v13 + *(int *)(v15 + 28), (char *)v14 + *(int *)(v15 + 28), v10);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  }
  *(_BYTE *)(a1 + a3[12]) = *(_BYTE *)(a2 + a3[12]);
  return a1;
}

uint64_t sub_100A3D2B8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(_QWORD *, uint64_t, uint64_t);
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v27;
  int *v28;

  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_10001BC14(v6, v7);
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  sub_10001BC14(v8, v9);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v10 = *(_QWORD *)(a1 + 40);
  v11 = *(_QWORD *)(a1 + 48);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  sub_10001BC14(v10, v11);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  v12 = a3[9];
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = type metadata accessor for Date(0);
  v27 = *(_QWORD *)(v15 - 8);
  v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(v27 + 40);
  v16(v13, v14, v15);
  v17 = a3[11];
  v28 = a3;
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  v18 = (_QWORD *)(a1 + v17);
  v19 = (_QWORD *)(a2 + v17);
  v20 = type metadata accessor for CachedHistoricalLocation(0);
  v21 = *(_QWORD *)(v20 - 8);
  v22 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v21 + 48);
  v23 = v22(v18, 1, v20);
  v24 = v22(v19, 1, v20);
  if (!v23)
  {
    if (!v24)
    {
      *(_OWORD *)v18 = *(_OWORD *)v19;
      v18[2] = v19[2];
      v16((uint64_t)v18 + *(int *)(v20 + 28), (uint64_t)v19 + *(int *)(v20 + 28), v15);
      goto LABEL_7;
    }
    sub_100A3D13C((uint64_t)v18);
    goto LABEL_6;
  }
  if (v24)
  {
LABEL_6:
    v25 = sub_10001A9A8(&qword_1010F0ED8);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    goto LABEL_7;
  }
  *(_OWORD *)v18 = *(_OWORD *)v19;
  v18[2] = v19[2];
  (*(void (**)(char *, char *, uint64_t))(v27 + 32))((char *)v18 + *(int *)(v20 + 28), (char *)v19 + *(int *)(v20 + 28), v15);
  (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
LABEL_7:
  *(_BYTE *)(a1 + v28[12]) = *(_BYTE *)(a2 + v28[12]);
  return a1;
}

uint64_t sub_100A3D484(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100A3D490);
}

uint64_t sub_100A3D490(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v12;
  int v13;

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = a3[9];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v10 = sub_10001A9A8(&qword_1010F0ED8);
  v7 = *(_QWORD *)(v10 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v10;
    v9 = a3[11];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v12 = *(unsigned __int8 *)(a1 + a3[12]);
  if (v12 >= 2)
    v13 = ((v12 + 2147483646) & 0x7FFFFFFF) - 1;
  else
    v13 = -2;
  if (v13 < 0)
    v13 = -1;
  return (v13 + 1);
}

uint64_t sub_100A3D554(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100A3D560);
}

uint64_t sub_100A3D560(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;

  v8 = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = a4[9];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
  }
  result = sub_10001A9A8(&qword_1010F0ED8);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = a4[11];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
  }
  *(_BYTE *)(a1 + a4[12]) = a2 + 2;
  return result;
}

uint64_t type metadata accessor for BeaconPayload(uint64_t a1)
{
  return sub_10001B630(a1, (uint64_t *)&unk_101110938, (uint64_t)&nominal type descriptor for BeaconPayload);
}

void sub_100A3D618(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[9];

  v6[0] = &unk_100E59E10;
  v6[1] = &unk_100E59E10;
  v6[2] = (char *)&value witness table for Builtin.Int8 + 64;
  v6[3] = &unk_100E59E10;
  v6[4] = (char *)&value witness table for Builtin.Int64 + 64;
  v2 = type metadata accessor for Date(319);
  if (v3 <= 0x3F)
  {
    v6[5] = *(_QWORD *)(v2 - 8) + 64;
    v6[6] = &unk_100E59E28;
    sub_100A3D6D8(319);
    if (v5 <= 0x3F)
    {
      v6[7] = *(_QWORD *)(v4 - 8) + 64;
      v6[8] = &unk_100E59E40;
      swift_initStructMetadata(a1, 256, 9, v6, a1 + 16);
    }
  }
}

void sub_100A3D6D8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_101110948)
  {
    v2 = type metadata accessor for CachedHistoricalLocation(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_101110948);
  }
}

uint64_t sub_100A3D72C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100A3D738);
}

uint64_t sub_100A3D738(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a1 + *(int *)(a3 + 28);
  v5 = type metadata accessor for Date(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, a2, v5);
}

uint64_t sub_100A3D778(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100A3D784);
}

uint64_t sub_100A3D784(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = a1 + *(int *)(a4 + 28);
  v6 = type metadata accessor for Date(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, a2, a2, v6);
}

uint64_t sub_100A3D7C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_100A3D84C(v2 + *(int *)(a1 + 44), a2);
}

unint64_t sub_100A3D7E0(uint64_t a1)
{
  unint64_t result;

  result = sub_100A3D804();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100A3D804()
{
  unint64_t result;
  uint64_t v1;

  result = qword_101110A30;
  if (!qword_101110A30)
  {
    v1 = type metadata accessor for CachedHistoricalLocation(255);
    result = swift_getWitnessTable(byte_100E59E7C, v1);
    atomic_store(result, (unint64_t *)&qword_101110A30);
  }
  return result;
}

uint64_t sub_100A3D84C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001A9A8(&qword_1010F0ED8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

BOOL sub_100A3D894(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char v20;
  char v21;
  char v22;
  uint64_t v23;
  unsigned int (*v24)(uint64_t, uint64_t, uint64_t);
  uint64_t v25;
  int v26;
  int v27;
  uint64_t *v28;
  uint64_t v29;
  char v30;
  _BOOL4 v32;
  uint64_t v33;
  int *v34;

  v4 = type metadata accessor for CachedHistoricalLocation(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (double *)((char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = sub_10001A9A8(&qword_101110A38);
  __chkstk_darwin(v8);
  v10 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10001A9A8(&qword_1010F0ED8);
  v12 = __chkstk_darwin(v11);
  v14 = (double *)((char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v15 = __chkstk_darwin(v12);
  v17 = (char *)&v33 - v16;
  __chkstk_darwin(v15);
  v19 = (char *)&v33 - v18;
  _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  if ((v20 & 1) == 0)
    return 0;
  _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
  if ((v21 & 1) == 0)
    return 0;
  if (*(unsigned __int8 *)(a1 + 32) != *(unsigned __int8 *)(a2 + 32))
    return 0;
  _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
  if ((v22 & 1) == 0)
    return 0;
  if (*(_QWORD *)(a1 + 56) != *(_QWORD *)(a2 + 56))
    return 0;
  v34 = (int *)type metadata accessor for BeaconPayload(0);
  if ((static Date.== infix(_:_:)(a1 + v34[9], a2 + v34[9]) & 1) == 0
    || *(unsigned __int8 *)(a1 + v34[10]) != *(unsigned __int8 *)(a2 + v34[10]))
  {
    return 0;
  }
  sub_100A3D84C(a1 + v34[11], (uint64_t)v19);
  sub_100A3D84C(a2 + v34[11], (uint64_t)v17);
  v23 = (uint64_t)&v10[*(int *)(v8 + 48)];
  sub_100A3D84C((uint64_t)v19, (uint64_t)v10);
  sub_100A3D84C((uint64_t)v17, v23);
  v24 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (v24((uint64_t)v10, 1, v4) == 1)
  {
    sub_100004048((uint64_t)v17, &qword_1010F0ED8);
    sub_100004048((uint64_t)v19, &qword_1010F0ED8);
    if (v24(v23, 1, v4) == 1)
    {
      sub_100004048((uint64_t)v10, &qword_1010F0ED8);
      goto LABEL_11;
    }
    goto LABEL_16;
  }
  sub_100A3D84C((uint64_t)v10, (uint64_t)v14);
  if (v24(v23, 1, v4) == 1)
  {
    sub_100004048((uint64_t)v17, &qword_1010F0ED8);
    sub_100004048((uint64_t)v19, &qword_1010F0ED8);
    sub_100A3D13C((uint64_t)v14);
LABEL_16:
    v28 = &qword_101110A38;
    v29 = (uint64_t)v10;
LABEL_23:
    sub_100004048(v29, v28);
    return 0;
  }
  sub_100A3DC64(v23, (uint64_t)v7);
  if (*v14 != *v7 || v14[1] != v7[1] || v14[2] != v7[2])
  {
    sub_100A3D13C((uint64_t)v7);
    sub_100004048((uint64_t)v17, &qword_1010F0ED8);
    sub_100004048((uint64_t)v19, &qword_1010F0ED8);
    sub_100A3D13C((uint64_t)v14);
    v29 = (uint64_t)v10;
    v28 = &qword_1010F0ED8;
    goto LABEL_23;
  }
  v30 = static Date.== infix(_:_:)((char *)v14 + *(int *)(v4 + 28), (char *)v7 + *(int *)(v4 + 28));
  sub_100A3D13C((uint64_t)v7);
  sub_100004048((uint64_t)v17, &qword_1010F0ED8);
  sub_100004048((uint64_t)v19, &qword_1010F0ED8);
  sub_100A3D13C((uint64_t)v14);
  sub_100004048((uint64_t)v10, &qword_1010F0ED8);
  if ((v30 & 1) == 0)
    return 0;
LABEL_11:
  v25 = v34[12];
  v26 = *(unsigned __int8 *)(a1 + v25);
  v27 = *(unsigned __int8 *)(a2 + v25);
  if (v26 != 2)
  {
    v32 = (v26 & 1) == 0;
    return v27 != 2 && ((v32 ^ v27) & 1) != 0;
  }
  return v27 == 2;
}

uint64_t sub_100A3DC64(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CachedHistoricalLocation(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100A3DCA8(double *a1, double *a2)
{
  uint64_t v4;

  if (*a1 != *a2 || a1[1] != a2[1] || a1[2] != a2[2])
    return 0;
  v4 = *(int *)(type metadata accessor for CachedHistoricalLocation(0) + 28);
  return static Date.== infix(_:_:)((char *)a1 + v4, (char *)a2 + v4);
}

uint64_t sub_100A3DD1C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);

  v4 = *(_QWORD *)(result + 16);
  if (v4)
  {
    v8 = result;
    v9 = (_QWORD *)(swift_bridgeObjectRetain(result) + 40);
    do
    {
      v11 = (void (*)(uint64_t, uint64_t, uint64_t))*(v9 - 1);
      v10 = *v9;
      swift_retain(*v9);
      v11(a2, a3, a4);
      swift_release(v10);
      v9 += 2;
      --v4;
    }
    while (v4);
    return swift_bridgeObjectRelease(v8);
  }
  return result;
}

uint64_t sub_100A3DDAC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int64_t v7;
  _QWORD *v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  _QWORD v32[2];
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;

  v3 = type metadata accessor for MACAddress(0);
  v37 = *(_QWORD *)(v3 - 8);
  v38 = v3;
  v4 = __chkstk_darwin(v3);
  v36 = (char *)v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v35 = (char *)v32 - v6;
  v7 = *(_QWORD *)(a1 + 16);
  v8 = _swiftEmptyArrayStorage;
  if (!v7)
    return (uint64_t)v8;
  v32[1] = v1;
  v41 = _swiftEmptyArrayStorage;
  sub_10009A2F4(0, v7, 0);
  result = sub_1003B2D14(a1);
  v10 = result;
  v12 = v11;
  v14 = v13 & 1;
  v33 = a1;
  v34 = a1 + 56;
  v16 = v36;
  v15 = v37;
  while ((v10 & 0x8000000000000000) == 0 && v10 < 1 << *(_BYTE *)(a1 + 32))
  {
    if (((*(_QWORD *)(v34 + (((unint64_t)v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
      goto LABEL_15;
    if (*(_DWORD *)(a1 + 36) != (_DWORD)v12)
      goto LABEL_16;
    v17 = *(_QWORD *)(a1 + 48) + *(_QWORD *)(v15 + 72) * v10;
    v18 = v35;
    v19 = v38;
    (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v35, v17, v38);
    v20 = (*(uint64_t (**)(char *, char *, uint64_t))(v15 + 32))(v16, v18, v19);
    v21 = MACAddress.dataRepresentation.getter(v20);
    v23 = v22;
    v24 = Data.hexString.getter(v21, v22);
    v39 = v25;
    v40 = v24;
    sub_10001BC14(v21, v23);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v16, v19);
    v8 = v41;
    if ((swift_isUniquelyReferenced_nonNull_native(v41) & 1) == 0)
    {
      sub_10009A2F4(0, v8[2] + 1, 1);
      v8 = v41;
    }
    v27 = v8[2];
    v26 = v8[3];
    if (v27 >= v26 >> 1)
    {
      sub_10009A2F4(v26 > 1, v27 + 1, 1);
      v8 = v41;
    }
    v8[2] = v27 + 1;
    v28 = &v8[2 * v27];
    v29 = v39;
    v28[4] = v40;
    v28[5] = v29;
    a1 = v33;
    result = sub_1003B2DB8(v10, v12, v14 & 1, v33);
    v10 = result;
    v12 = v30;
    v14 = v31 & 1;
    if (!--v7)
    {
      sub_1000FE2A4(result, v30, v31 & 1);
      return (uint64_t)v8;
    }
  }
  __break(1u);
LABEL_15:
  __break(1u);
LABEL_16:
  __break(1u);
  return result;
}

_QWORD *sub_100A3E00C(uint64_t a1)
{
  int64_t v1;
  uint64_t v3;
  int v4;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_10009A92C(0, v1, 0);
    v3 = sub_100CA7C8C(a1);
    if (v3 < 0 || v3 >= 1 << *(_BYTE *)(a1 + 32))
    {
      __break(1u);
    }
    else if ((*(_QWORD *)(a1 + 64 + 8 * ((unint64_t)v3 >> 6)) & (1 << v3)) != 0)
    {
      if (*(_DWORD *)(a1 + 36) == v4)
        __asm { BR              X9 }
LABEL_10:
      __break(1u);
      JUMPOUT(0x100A3E354);
    }
    __break(1u);
    goto LABEL_10;
  }
  return _swiftEmptyArrayStorage;
}

Swift::Int sub_100A3E380(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  Swift::Int result;
  uint64_t v6[2];

  v2 = *(_QWORD *)(type metadata accessor for OwnedBeaconRecord(0) - 8);
  v3 = (_QWORD *)*a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
    v3 = (_QWORD *)sub_10088F164(v3);
  v4 = v3[2];
  v6[0] = (uint64_t)v3 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v6[1] = v4;
  result = sub_100A6F174(v6);
  *a1 = v3;
  return result;
}

uint64_t sub_100A3E400(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  NSObject *v15;
  NSObject *v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  _BYTE *v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36[3];

  v34 = type metadata accessor for OwnedBeaconGroup(0);
  v3 = __chkstk_darwin(v34);
  v33 = (uint64_t)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v6 = (char *)&v33 - v5;
  v7 = type metadata accessor for DispatchTime(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)&v33 - v12;
  v14 = swift_allocObject(&unk_1010A3360, 24, 7);
  *(_QWORD *)(v14 + 16) = 0;
  v15 = dispatch_group_create();
  dispatch_group_enter(v15);
  swift_retain();
  v16 = v15;
  sub_10085AA40(a1, v1, v14, v16);
  swift_release(v14);

  static DispatchTime.now()(v17);
  + infix(_:_:)(v11, 60.0);
  v18 = *(void (**)(char *, uint64_t))(v8 + 8);
  v18(v11, v7);
  v19 = OS_dispatch_group.wait(timeout:)(v13) & 1;
  v18(v13, v7);
  if ((static DispatchTimeoutResult.== infix(_:_:)(v19, 1) & 1) != 0)
  {
    if (qword_1010E9F80 != -1)
      swift_once(&qword_1010E9F80, sub_1007FA778);
    v20 = type metadata accessor for Logger(0);
    sub_10001A9E8(v20, (uint64_t)qword_1011B77E8);
    v21 = sub_10005972C(a1, (uint64_t)v6, type metadata accessor for OwnedBeaconGroup);
    v22 = Logger.logObject.getter(v21);
    v23 = static os_log_type_t.error.getter(v22);
    if (os_log_type_enabled(v22, v23))
    {
      v24 = (uint8_t *)swift_slowAlloc(12, -1);
      v25 = swift_slowAlloc(32, -1);
      v36[0] = v25;
      *(_DWORD *)v24 = 136315138;
      v26 = v33;
      sub_10005972C((uint64_t)v6, v33, type metadata accessor for OwnedBeaconGroup);
      v27 = String.init<A>(describing:)(v26, v34);
      v35 = sub_100016940(v27, v28, v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, v36, v24 + 4, v24 + 12);
      swift_bridgeObjectRelease();
      sub_1000126B0((uint64_t)v6, type metadata accessor for OwnedBeaconGroup);
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "Timed out removing %s", v24, 0xCu);
      swift_arrayDestroy(v25, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v25, -1, -1);
      swift_slowDealloc(v24, -1, -1);
    }
    else
    {
      sub_1000126B0((uint64_t)v6, type metadata accessor for OwnedBeaconGroup);
    }

    v30 = sub_10008806C();
    v29 = swift_allocError(&type metadata for BeaconStore.BeaconStoreError, v30, 0, 0);
    *v31 = 16;
    swift_release(v14);

  }
  else
  {

    swift_beginAccess(v14 + 16, v36, 0, 0);
    v29 = *(_QWORD *)(v14 + 16);
    swift_errorRetain(v29);
    swift_release(v14);
  }
  return v29;
}

BOOL sub_100A3E794(char *a1, char *a2)
{
  return qword_100E5A130[*a1] == qword_100E5A130[*a2];
}

Swift::Int sub_100A3E7B8()
{
  char *v0;
  uint64_t v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(qword_100E5A130[v1]);
  return Hasher._finalize()();
}

void sub_100A3E804()
{
  char *v0;

  Hasher._combine(_:)(qword_100E5A130[*v0]);
}

Swift::Int sub_100A3E838()
{
  char *v0;
  uint64_t v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(qword_100E5A130[v1]);
  return Hasher._finalize()();
}

uint64_t sub_100A3E880@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_100A71EB4(*a1);
  *a2 = result;
  return result;
}

void sub_100A3E8A8(_QWORD *a1@<X8>)
{
  char *v1;

  *a1 = qword_100E5A130[*v1];
}

uint64_t sub_100A3E8C0(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;

  v4 = sub_100A75904();
  v5 = sub_100024908();
  return Error<>._code.getter(a1, a2, v4, v5);
}

uint64_t sub_100A3E904(uint64_t a1)
{
  return sub_1000DD95C(a1, qword_101110A40);
}

uint64_t sub_100A3E910(uint64_t a1)
{
  return sub_1000DD95C(a1, qword_101110A58);
}

uint64_t sub_100A3E91C@<X0>(uint64_t result@<X0>, char *a2@<X8>)
{
  char v3;
  char v4;
  char v5;

  if ((*(_BYTE *)(result + 168) & 1) != 0
    || (result = QueueSynchronizer.conditionalSync<A>(_:)(sub_100A725D8), (v5 & 1) != 0))
  {
    v3 = 1;
  }
  else
  {
    result = QueueSynchronizer.conditionalSync<A>(_:)(sub_100A7597C);
    v3 = v4;
  }
  *a2 = v3;
  return result;
}

uint64_t sub_100A3E9A0@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  char v4;
  char v5;

  v3 = *(_QWORD *)(result + 216);
  if (v3)
  {
    swift_retain();
    OS_dispatch_queue.sync<A>(execute:)(sub_100A725FC, v3, &type metadata for Bool);
    result = swift_release();
    v4 = v5;
  }
  else
  {
    v4 = 0;
  }
  *a2 = v4;
  return result;
}

void *sub_100A3EA24()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  void *v14;
  id v15;
  void *result;
  id v17;
  NSString v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  _QWORD *v26;
  uint64_t v27;
  __n128 v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  void (*v32)(char *, char *, uint64_t);
  char *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  _QWORD v38[2];
  unint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  _OWORD v44[2];
  _QWORD v45[4];

  v1 = sub_10001A9A8((uint64_t *)&unk_1010F9890);
  __chkstk_darwin(v1);
  v3 = (char *)v38 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for MACAddress(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v41 = (char *)v38 - v9;
  v10 = type metadata accessor for DispatchPredicate(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (_QWORD *)((char *)v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v14 = *(void **)(v0 + 16);
  *v13 = v14;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v11 + 104))(v13, enum case for DispatchPredicate.onQueue(_:), v10);
  v15 = v14;
  LOBYTE(v14) = _dispatchPreconditionTest(_:)(v13);
  result = (void *)(*(uint64_t (**)(_QWORD *, uint64_t))(v11 + 8))(v13, v10);
  if ((v14 & 1) != 0)
  {
    v17 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
    v18 = String._bridgeToObjectiveC()();
    v19 = objc_msgSend(v17, "objectForKey:", v18);

    if (v19)
    {
      _bridgeAnyObjectToAny(_:)(v44, v19);
      swift_unknownObjectRelease(v19);
    }
    else
    {
      memset(v44, 0, sizeof(v44));
    }
    sub_100005CF0((uint64_t)v44, (uint64_t)v45, (uint64_t *)&unk_1010F6390);
    if (v45[3])
    {
      v20 = sub_10001A9A8(&qword_1011063B0);
      if ((swift_dynamicCast(&v43, v45, (char *)&type metadata for Any + 8, v20, 6) & 1) != 0)
      {
        v21 = v43;
        v22 = *(_QWORD *)(v43 + 16);
        if (v22)
        {
          swift_bridgeObjectRetain(v43);
          v23 = sub_1000330C8();
          v24 = 0;
          v38[1] = v21;
          v25 = (uint64_t *)(v21 + 40);
          v26 = _swiftEmptyArrayStorage;
          v39 = v23;
          v40 = v8;
          while (1)
          {
            v27 = *v25;
            v45[0] = *(v25 - 1);
            v45[1] = v27;
            v28 = swift_bridgeObjectRetain_n(v27, 2);
            v29 = Data.init<A>(hexString:)(v45, &type metadata for String, v23, v28);
            if (v30 >> 60 != 15)
            {
              MACAddress.init(dataRepresentation:)(v29, v30);
              if (!v24)
              {
                v31 = 0;
                goto LABEL_15;
              }
              swift_errorRelease(v24);
              v24 = 0;
            }
            v31 = 1;
LABEL_15:
            (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v3, v31, 1, v4);
            swift_bridgeObjectRelease();
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4) == 1)
            {
              sub_100004048((uint64_t)v3, (uint64_t *)&unk_1010F9890);
            }
            else
            {
              v42 = v24;
              v32 = *(void (**)(char *, char *, uint64_t))(v5 + 32);
              v33 = v41;
              v32(v41, v3, v4);
              v32(v8, v33, v4);
              if ((swift_isUniquelyReferenced_nonNull_native(v26) & 1) == 0)
                v26 = (_QWORD *)sub_1007CA820(0, v26[2] + 1, 1, (unint64_t)v26);
              v35 = v26[2];
              v34 = v26[3];
              if (v35 >= v34 >> 1)
                v26 = (_QWORD *)sub_1007CA820(v34 > 1, v35 + 1, 1, (unint64_t)v26);
              v26[2] = v35 + 1;
              v36 = (unint64_t)v26
                  + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
                  + *(_QWORD *)(v5 + 72) * v35;
              v8 = v40;
              v32((char *)v36, v40, v4);
              v23 = v39;
              v24 = v42;
            }
            v25 += 2;
            if (!--v22)
            {
              swift_bridgeObjectRelease();
              goto LABEL_26;
            }
          }
        }
        v26 = _swiftEmptyArrayStorage;
LABEL_26:
        swift_bridgeObjectRelease();
        v37 = sub_100CA91E0((uint64_t)v26);
        swift_bridgeObjectRelease();
        return (void *)v37;
      }
    }
    else
    {
      sub_100004048((uint64_t)v45, (uint64_t *)&unk_1010F6390);
    }
    return &_swiftEmptySetSingleton;
  }
  __break(1u);
  return result;
}

void sub_100A3EE54(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  id v8;
  id v9;
  Class isa;
  NSString v11;
  _BYTE v12[16];

  v3 = type metadata accessor for DispatchPredicate(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = &v12[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = *(void **)(v1 + 16);
  *v6 = v7;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v4 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v3);
  v8 = v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)(v6);
  (*(void (**)(_QWORD *, uint64_t))(v4 + 8))(v6, v3);
  if ((v7 & 1) != 0)
  {
    v9 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
    sub_100A3DDAC(a1);
    swift_bridgeObjectRelease();
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v11 = String._bridgeToObjectiveC()();
    objc_msgSend(v9, "setObject:forKey:", isa, v11);

  }
  else
  {
    __break(1u);
  }
}

unint64_t sub_100A3EFAC()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  void *v5;
  id v6;
  id v7;
  NSString v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  _OWORD v30[2];
  uint64_t v31[4];

  v1 = type metadata accessor for DispatchPredicate(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (uint64_t *)((char *)&v27 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = *(void **)(v0 + 16);
  *v4 = v5;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v2 + 104))(v4, enum case for DispatchPredicate.onQueue(_:), v1);
  v6 = v5;
  LOBYTE(v5) = _dispatchPreconditionTest(_:)(v4);
  (*(void (**)(_QWORD *, uint64_t))(v2 + 8))(v4, v1);
  if ((v5 & 1) == 0)
  {
    __break(1u);
    swift_once(&qword_1010EA318, sub_100B5E330);
    v16 = type metadata accessor for Logger(0);
    sub_10001A9E8(v16, (uint64_t)qword_1011B7DF8);
    swift_errorRetain(v4);
    v17 = swift_errorRetain(v4);
    v18 = Logger.logObject.getter(v17);
    v19 = static os_log_type_t.error.getter(v18);
    if (os_log_type_enabled(v18, v19))
    {
      v20 = (uint8_t *)swift_slowAlloc(12, -1);
      v21 = swift_slowAlloc(32, -1);
      v31[0] = v21;
      *(_DWORD *)v20 = 136446210;
      *(_QWORD *)&v30[0] = v4;
      swift_errorRetain(v4);
      v22 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
      v23 = String.init<A>(describing:)(v30, v22);
      *(_QWORD *)&v30[0] = sub_100016940(v23, v24, v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v30, (char *)v30 + 8, v20 + 4, v20 + 12);
      swift_bridgeObjectRelease();
      swift_errorRelease(v4);
      swift_errorRelease(v4);
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Unable to retrieve pairing tokens due to %{public}s", v20, 0xCu);
      swift_arrayDestroy(v21, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v21, -1, -1);
      swift_slowDealloc(v20, -1, -1);
    }
    else
    {
      swift_errorRelease(v4);
      swift_errorRelease(v4);
    }

    v25 = sub_1006BB7F8((uint64_t)_swiftEmptyArrayStorage);
    swift_errorRelease(v4);
    goto LABEL_14;
  }
  v7 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v8 = String._bridgeToObjectiveC()();
  v9 = objc_msgSend(v7, "objectForKey:", v8);

  if (v9)
  {
    _bridgeAnyObjectToAny(_:)(v30, v9);
    swift_unknownObjectRelease(v9);
  }
  else
  {
    memset(v30, 0, sizeof(v30));
  }
  sub_100005CF0((uint64_t)v30, (uint64_t)v31, (uint64_t *)&unk_1010F6390);
  if (v31[3])
  {
    if ((swift_dynamicCast(&v28, v31, (char *)&type metadata for Any + 8, &type metadata for Data, 6) & 1) != 0)
    {
      v1 = v28;
      v2 = v29;
      sub_10001BBBC(v28, v29);
      v10 = type metadata accessor for MACAddress(0);
      v11 = sub_100006C64(&qword_1010F08B8, 255, (uint64_t (*)(uint64_t))&type metadata accessor for MACAddress, (uint64_t)&protocol conformance descriptor for MACAddress);
      v12 = sub_100006C64(&qword_1010F9860, 255, (uint64_t (*)(uint64_t))&type metadata accessor for MACAddress, (uint64_t)&protocol conformance descriptor for MACAddress);
      v13 = sub_100006C64((unint64_t *)&unk_101110150, 255, (uint64_t (*)(uint64_t))&type metadata accessor for MACAddress, (uint64_t)&protocol conformance descriptor for MACAddress);
      v14 = sub_100036994();
      v15 = sub_100036A58();
      v25 = Dictionary<>.init(dataRepresentation:)(v1, v2, v10, &type metadata for Data, v11, v12, v13, v14, v15);
LABEL_14:
      sub_10001BC14(v1, v2);
      return v25;
    }
  }
  else
  {
    sub_100004048((uint64_t)v31, (uint64_t *)&unk_1010F6390);
  }
  return sub_1006BB7F8((uint64_t)_swiftEmptyArrayStorage);
}

void sub_100A3F3E4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  Class isa;
  NSString v20;
  uint64_t v21;

  v3 = type metadata accessor for DispatchPredicate(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (uint64_t *)((char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = *(void **)(v1 + 16);
  *v6 = v7;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v4 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v3);
  v8 = v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)(v6);
  (*(void (**)(_QWORD *, uint64_t))(v4 + 8))(v6, v3);
  if ((v7 & 1) != 0)
  {
    v9 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
    v10 = type metadata accessor for MACAddress(0);
    v11 = sub_100006C64(&qword_1010F08B8, 255, (uint64_t (*)(uint64_t))&type metadata accessor for MACAddress, (uint64_t)&protocol conformance descriptor for MACAddress);
    v12 = sub_100006C64(&qword_1010F9860, 255, (uint64_t (*)(uint64_t))&type metadata accessor for MACAddress, (uint64_t)&protocol conformance descriptor for MACAddress);
    v13 = sub_100006C64((unint64_t *)&unk_101110150, 255, (uint64_t (*)(uint64_t))&type metadata accessor for MACAddress, (uint64_t)&protocol conformance descriptor for MACAddress);
    v14 = sub_100036994();
    v15 = sub_100036A58();
    v16 = Dictionary<>.dataRepresentation.getter(a1, v10, &type metadata for Data, v11, v12, v13, v14, v15);
    v18 = v17;
    swift_bridgeObjectRelease();
    isa = Data._bridgeToObjectiveC()().super.isa;
    sub_10001BC14(v16, v18);
    v20 = String._bridgeToObjectiveC()();
    objc_msgSend(v9, "setObject:forKey:", isa, v20);

  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_100A3F5DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  Swift::String v12;
  id v13;
  id v14;
  uint64_t v15;
  void *v16;
  void *v17;
  Swift::String v18;
  uint64_t v20;

  v1 = v0;
  _StringGuts.grow(_:)(43);
  v2 = type metadata accessor for AirPodsPairingManager();
  v4 = sub_100006C64(&qword_101111078, v3, (uint64_t (*)(uint64_t))type metadata accessor for AirPodsPairingManager, (uint64_t)&unk_100E5A008);
  v5 = CustomStringConvertible.typeDescription.getter(v2, v4);
  swift_bridgeObjectRelease();
  v20 = v5;
  v6._countAndFlagsBits = 8250;
  v6._object = (void *)0xE200000000000000;
  String.append(_:)(v6);
  v7._countAndFlagsBits = CustomStringConvertible<>.addressDescription.getter(v2, v4);
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._object = (void *)0x8000000100EED1E0;
  v8._countAndFlagsBits = 0xD000000000000014;
  String.append(_:)(v8);
  if (*(_BYTE *)(v1 + 72))
    v9 = 1702195828;
  else
    v9 = 0x65736C6166;
  if (*(_BYTE *)(v1 + 72))
    v10 = 0xE400000000000000;
  else
    v10 = 0xE500000000000000;
  v11 = v10;
  String.append(_:)(*(Swift::String *)&v9);
  swift_bridgeObjectRelease();
  v12._countAndFlagsBits = 0x6568706972657020;
  v12._object = (void *)0xED0000203A6C6172;
  String.append(_:)(v12);
  v13 = *(id *)(v1 + 64);
  v14 = objc_msgSend(v13, "description");
  v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
  v17 = v16;

  v18._countAndFlagsBits = v15;
  v18._object = v17;
  String.append(_:)(v18);

  swift_bridgeObjectRelease();
  return v20;
}

uint64_t sub_100A3F788(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, int a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  void *v37;
  uint64_t v38;
  char *v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v48;
  char *v49;
  int v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;

  v6 = v5;
  v50 = a5;
  v53 = a2;
  v54 = a4;
  v51 = a3;
  v52 = a1;
  v7 = type metadata accessor for UUID(0);
  __chkstk_darwin(v7);
  v49 = (char *)&v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v12);
  v14 = (char *)&v48 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (char *)&v48 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000F4A0(0, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr);
  v19 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v16 + 104))(v18, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v15);
  static DispatchQoS.unspecified.getter(v19);
  v55 = _swiftEmptyArrayStorage;
  v20 = sub_100006C64((unint64_t *)&qword_1010F0E20, 255, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v21 = sub_10001A9A8((uint64_t *)&unk_1010EA6B0);
  v22 = sub_1000193A4((unint64_t *)&qword_1010F0E30, (uint64_t *)&unk_1010EA6B0, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v55, v21, v22, v9, v20);
  *(_QWORD *)(v6 + 16) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD00000000000003BLL, 0x8000000100EED260, v14, v11, v18, 0);
  *(_QWORD *)(v6 + 88) = &_swiftEmptySetSingleton;
  *(_QWORD *)(v6 + 96) = 0;
  *(_QWORD *)(v6 + 104) = 0;
  *(_QWORD *)(v6 + 112) = 0;
  v23 = sub_10001A9A8(&qword_101111080);
  swift_allocObject(v23, *(unsigned int *)(v23 + 48), *(unsigned __int16 *)(v23 + 52));
  *(_QWORD *)(v6 + 120) = PassthroughSubject.init()();
  *(_QWORD *)(v6 + 128) = 0;
  *(_QWORD *)(v6 + 136) = 0;
  *(_QWORD *)(v6 + 144) = 0;
  *(_QWORD *)(v6 + 152) = 0xF000000000000000;
  *(_QWORD *)(v6 + 160) = _swiftEmptyArrayStorage;
  *(_BYTE *)(v6 + 168) = 0;
  *(_QWORD *)(v6 + 200) = &type metadata for AirpodsPairingSpec1_0;
  *(_QWORD *)(v6 + 208) = sub_100A74900();
  *(_QWORD *)(v6 + 216) = 0;
  *(_BYTE *)(v6 + 224) = 0;
  *(_QWORD *)(v6 + 232) = 0;
  if (qword_1010EA318 != -1)
    swift_once(&qword_1010EA318, sub_100B5E330);
  v24 = type metadata accessor for Logger(0);
  v25 = sub_10001A9E8(v24, (uint64_t)qword_1011B7DF8);
  v26 = Logger.logObject.getter(v25);
  v27 = static os_log_type_t.debug.getter(v26);
  if (os_log_type_enabled(v26, v27))
  {
    v28 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v28 = 0;
    _os_log_impl((void *)&_mh_execute_header, v26, v27, "AirPodsPairingManager.init", v28, 2u);
    swift_slowDealloc(v28, -1, -1);
  }

  v29 = v53;
  *(_QWORD *)(v6 + 32) = v52;
  *(_QWORD *)(v6 + 40) = v29;
  *(_QWORD *)(v6 + 48) = v54;
  v30 = type metadata accessor for AccessoryPairingValidator();
  v31 = swift_allocObject(v30, 32, 7);
  v32 = type metadata accessor for DeviceIdentityUtility(0);
  v33 = swift_allocObject(v32, *(unsigned int *)(v32 + 48), *(unsigned __int16 *)(v32 + 52));
  swift_retain();
  swift_retain();
  swift_retain();
  swift_defaultActor_initialize(v33);
  v34 = v33 + OBJC_IVAR____TtC12searchpartyd21DeviceIdentityUtility_certExpiryDate;
  v35 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 56))(v34, 1, 1, v35);
  *(_QWORD *)(v33 + OBJC_IVAR____TtC12searchpartyd21DeviceIdentityUtility_refKey) = 0;
  *(_QWORD *)(v33 + OBJC_IVAR____TtC12searchpartyd21DeviceIdentityUtility_certs) = _swiftEmptyArrayStorage;
  *(_BYTE *)(v33 + OBJC_IVAR____TtC12searchpartyd21DeviceIdentityUtility_signingType) = 5;
  *(_QWORD *)(v31 + 16) = v33;
  *(_QWORD *)(v31 + 24) = 0;
  v36 = v51;
  *(_QWORD *)(v6 + 56) = v31;
  *(_QWORD *)(v6 + 64) = v36;
  *(_BYTE *)(v6 + 72) = v50 & 1;
  v37 = *(void **)(v6 + 16);
  v38 = type metadata accessor for QueueSynchronizer(0);
  swift_allocObject(v38, *(unsigned int *)(v38 + 48), *(unsigned __int16 *)(v38 + 52));
  v39 = v36;
  *(_QWORD *)(v6 + 24) = QueueSynchronizer.init(queue:)(v37);
  v40 = objc_msgSend(*(id *)&v39[OBJC_IVAR____TtC12searchpartyd10Peripheral_underlyingObject], "identifier");
  v41 = (uint64_t)v49;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v40);

  v42 = *(_QWORD *)(v6 + 56);
  v43 = *(void **)(v6 + 16);
  v44 = type metadata accessor for AccessoryPairingCoordinator(0);
  swift_allocObject(v44, *(unsigned int *)(v44 + 48), *(unsigned __int16 *)(v44 + 52));
  swift_retain();
  v45 = sub_100C9728C(v41, v42, v43);
  swift_release();
  swift_release();

  swift_release();
  if (v45)
  {
    *(_QWORD *)(v6 + 80) = v45;
  }
  else
  {

    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();

    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    sub_10001D8A8(*(_QWORD *)(v6 + 128), *(_QWORD *)(v6 + 136));
    sub_10001EF3C(*(_QWORD *)(v6 + 144), *(_QWORD *)(v6 + 152));
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v6 + 176));
    swift_release();
    swift_release();
    v46 = type metadata accessor for AirPodsPairingManager();
    swift_deallocPartialClassInstance(v6, v46, 240, 7);
    return 0;
  }
  return v6;
}

uint64_t sub_100A3FD08()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;

  v1 = v0;
  if (qword_1010EA318 != -1)
    swift_once(&qword_1010EA318, sub_100B5E330);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_10001A9E8(v2, (uint64_t)qword_1011B7DF8);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.debug.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "AirPodsPairingManager.deinit", v6, 2u);
    swift_slowDealloc(v6, -1, -1);
  }

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  sub_10001D8A8(*(_QWORD *)(v1 + 128), *(_QWORD *)(v1 + 136));
  sub_10001EF3C(*(_QWORD *)(v1 + 144), *(_QWORD *)(v1 + 152));
  swift_bridgeObjectRelease();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v1 + 176));
  swift_release();
  swift_release();
  return v1;
}

uint64_t sub_100A3FE74()
{
  uint64_t v0;

  sub_100A3FD08();
  return swift_deallocClassInstance(v0, 240, 7);
}

uint64_t type metadata accessor for AirPodsPairingManager()
{
  return objc_opt_self(_TtC12searchpartyd21AirPodsPairingManager);
}

uint64_t sub_100A3FEB4@<X0>(_QWORD *a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v6;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  unint64_t v24;
  char *v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  _BOOL4 v36;
  uint8_t *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  NSObject *v49;
  os_log_type_t v50;
  uint8_t *v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t result;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70[5];
  char v71;
  uint64_t v72;
  uint64_t v73;

  v69 = a6;
  v67 = type metadata accessor for BluetoothManagerDevice(0);
  __chkstk_darwin(v67);
  v68 = (uint64_t)&v58 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_10001A9A8(&qword_101111080);
  swift_allocObject(v13, *(unsigned int *)(v13 + 48), *(unsigned __int16 *)(v13 + 52));
  v14 = PassthroughSubject.init()();
  a1[15] = v14;
  swift_retain();
  swift_release();
  v65 = a1[3];
  QueueSynchronizer.conditionalSync<A>(_:)(sub_1002DCB54);
  if ((v70[0] & 1) != 0)
  {
    if (qword_1010EA318 != -1)
      swift_once(&qword_1010EA318, sub_100B5E330);
    v15 = type metadata accessor for Logger(0);
    v16 = sub_10001A9E8(v15, (uint64_t)qword_1011B7DF8);
    v17 = Logger.logObject.getter(v16);
    v18 = static os_log_type_t.error.getter(v17);
    if (os_log_type_enabled(v17, v18))
    {
      v19 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v19 = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Existing pairing session in progress!", v19, 2u);
      swift_slowDealloc(v19, -1, -1);
    }

    v70[0] = v14;
    v20 = sub_1000193A4(&qword_101111098, &qword_101111080, (const char *)&protocol conformance descriptor for PassthroughSubject<A, B>);
    v21 = Publisher.eraseToAnyPublisher()(v13, v20);
  }
  else
  {
    v59 = a4;
    v60 = a5;
    v66 = a3;
    v62 = v6;
    v63 = v13;
    v22 = type metadata accessor for AnalyticsEvent(0);
    v23 = (char *)swift_allocObject(v22, *(unsigned int *)(v22 + 48), *(unsigned __int16 *)(v22 + 52));
    swift_defaultActor_initialize(v23);
    v24 = sub_1006B8B38((uint64_t)_swiftEmptyArrayStorage);
    *((_QWORD *)v23 + 14) = v24;
    UUID.init()(v24);
    v25 = &v23[OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_startTime];
    v26 = type metadata accessor for DispatchTime(0);
    v27 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56);
    v27(v25, 1, 1, v26);
    v27(&v23[OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_endTime], 1, 1, v26);
    *((_QWORD *)v23 + 15) = 0xD00000000000002CLL;
    *((_QWORD *)v23 + 16) = 0x8000000100EC7FD0;
    a1[29] = v23;
    swift_retain();
    swift_release();
    type metadata accessor for Transaction(0);
    v28 = swift_allocObject(&unk_1010A7640, 25, 7);
    *(_QWORD *)(v28 + 16) = v23;
    v61 = a2;
    *(_BYTE *)(v28 + 24) = a2 & 1;
    swift_retain();
    static Transaction.asyncTask(name:block:)("AirPodsPairAnalytics", 20, 2, &unk_101111090, v28);
    swift_release();
    if (qword_1010EA318 != -1)
      swift_once(&qword_1010EA318, sub_100B5E330);
    v29 = type metadata accessor for Logger(0);
    v30 = sub_10001A9E8(v29, (uint64_t)qword_1011B7DF8);
    v31 = v66;
    v32 = v68;
    v33 = sub_10005972C(v66, v68, type metadata accessor for BluetoothManagerDevice);
    v58 = v30;
    v34 = Logger.logObject.getter(v33);
    v35 = static os_log_type_t.default.getter(v34);
    v36 = os_log_type_enabled(v34, v35);
    v64 = v14;
    if (v36)
    {
      v37 = (uint8_t *)swift_slowAlloc(12, -1);
      v38 = swift_slowAlloc(32, -1);
      v70[0] = v38;
      *(_DWORD *)v37 = 136446210;
      v39 = sub_10015AE8C();
      v72 = sub_100016940(v39, v40, v70);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v72, &v73, v37 + 4, v37 + 12);
      swift_bridgeObjectRelease();
      sub_1000126B0(v68, type metadata accessor for BluetoothManagerDevice);
      _os_log_impl((void *)&_mh_execute_header, v34, v35, "Start pairing AirPods. BluetoothDevice: %{public}s.", v37, 0xCu);
      swift_arrayDestroy(v38, 1, (char *)&type metadata for Any + 8);
      v31 = v66;
      swift_slowDealloc(v38, -1, -1);
      swift_slowDealloc(v37, -1, -1);
    }
    else
    {
      sub_1000126B0(v32, type metadata accessor for BluetoothManagerDevice);
    }

    v41 = a1[8];
    v42 = (uint64_t *)(v31 + *(int *)(v67 + 20));
    v43 = *v42;
    v44 = v42[1];
    sub_100787638();
    __chkstk_darwin(v45);
    *(&v58 - 4) = v41;
    *(&v58 - 3) = v43;
    *(&v58 - 2) = v44;
    OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_100A757D4, &v58 - 6, v46, &type metadata for () + 1, &type metadata for () + 1);
    sub_100A4CAEC((uint64_t)v70);
    v47 = v61;
    if (v71 == 1)
    {
      v48 = sub_100004048((uint64_t)v70, &qword_1010EECC0);
      v49 = Logger.logObject.getter(v48);
      v50 = static os_log_type_t.error.getter(v49);
      if (os_log_type_enabled(v49, v50))
      {
        v51 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v51 = 0;
        _os_log_impl((void *)&_mh_execute_header, v49, v50, "Failed to create pairing coordinator!", v51, 2u);
        swift_slowDealloc(v51, -1, -1);
      }

      v70[0] = v64;
      v52 = sub_1000193A4(&qword_101111098, &qword_101111080, (const char *)&protocol conformance descriptor for PassthroughSubject<A, B>);
    }
    else
    {
      swift_release();
      v53 = (_QWORD *)(*(_QWORD *)(a1[10] + OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingInfo)
                     + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_forcePairSNs);
      swift_beginAccess(v53, v70, 1, 0);
      v54 = v59;
      *v53 = v59;
      swift_bridgeObjectRetain(v54);
      v55 = swift_bridgeObjectRelease();
      __chkstk_darwin(v55);
      *(&v58 - 2) = (uint64_t)a1;
      *((_BYTE *)&v58 - 8) = 1;
      QueueSynchronizer.conditionalSync<A>(_:)(sub_100A75CA0);
      sub_100A46734(v31);
      v56 = v60;
      sub_100A4758C(v60, v47 & 1);
      sub_100A46A58(v56);
      v72 = v64;
      v52 = sub_1000193A4(&qword_101111098, &qword_101111080, (const char *)&protocol conformance descriptor for PassthroughSubject<A, B>);
    }
    v21 = Publisher.eraseToAnyPublisher()(v63, v52);
    swift_release();
  }
  result = swift_release();
  *v69 = v21;
  return result;
}

uint64_t sub_100A405C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;

  v10 = sub_10001A9A8(&qword_101111080);
  swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
  *(_QWORD *)(a1 + 120) = PassthroughSubject.init()();
  swift_retain();
  swift_release();
  sub_100A6C88C(a2, 1, a3, a4);
  v11 = sub_1000193A4(&qword_101111098, &qword_101111080, (const char *)&protocol conformance descriptor for PassthroughSubject<A, B>);
  v12 = Publisher.eraseToAnyPublisher()(v10, v11);
  result = swift_release();
  *a5 = v12;
  return result;
}

uint64_t sub_100A406AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  void *v16;
  id v17;
  uint64_t v18;
  uint64_t (*v19)(char *, uint64_t, uint64_t);
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint64_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint8_t *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  uint8_t *v40;
  uint64_t (*v41)(char *, uint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v4 = v3;
  v45 = a2;
  v46 = a1;
  v6 = type metadata accessor for MACAddress(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v9 = __chkstk_darwin(v6);
  v44 = (char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v11 = (char *)&v39 - v10;
  v12 = type metadata accessor for DispatchPredicate(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (uint64_t *)((char *)&v39 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v16 = *(void **)(v4 + 16);
  *v15 = v16;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v13 + 104))(v15, enum case for DispatchPredicate.onQueue(_:), v12);
  v17 = v16;
  LOBYTE(v16) = _dispatchPreconditionTest(_:)(v15);
  (*(void (**)(_QWORD *, uint64_t))(v13 + 8))(v15, v12);
  if ((v16 & 1) != 0)
  {
    v43 = a3;
    if (qword_1010EA318 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_1010EA318, sub_100B5E330);
LABEL_3:
  v18 = type metadata accessor for Logger(0);
  sub_10001A9E8(v18, (uint64_t)qword_1011B7DF8);
  v19 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 16);
  v20 = v19(v11, v46, v6);
  v21 = Logger.logObject.getter(v20);
  v22 = static os_log_type_t.default.getter(v21);
  if (os_log_type_enabled(v21, v22))
  {
    v23 = swift_slowAlloc(12, -1);
    v41 = v19;
    v24 = (uint8_t *)v23;
    v25 = swift_slowAlloc(32, -1);
    v42 = v4;
    v26 = v25;
    v48 = v25;
    *(_DWORD *)v24 = 136446210;
    v40 = v24 + 4;
    v27 = sub_100006C64((unint64_t *)&qword_1010FBAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for MACAddress, (uint64_t)&protocol conformance descriptor for MACAddress);
    v28 = dispatch thunk of CustomStringConvertible.description.getter(v6, v27);
    v47 = sub_100016940(v28, v29, &v48);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48, v40, v24 + 12);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v11, v6);
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "unpairAirPodsLE with classic MAC address: %{public}s", v24, 0xCu);
    swift_arrayDestroy(v26, 1, (char *)&type metadata for Any + 8);
    v30 = v26;
    v4 = v42;
    swift_slowDealloc(v30, -1, -1);
    v31 = v24;
    v19 = v41;
    swift_slowDealloc(v31, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v11, v6);
  }

  type metadata accessor for Transaction(0);
  v32 = v44;
  v19(v44, v46, v6);
  v33 = *(unsigned __int8 *)(v7 + 80);
  v34 = (v33 + 32) & ~v33;
  v35 = (v8 + v34 + 7) & 0xFFFFFFFFFFFFFFF8;
  v36 = swift_allocObject(&unk_1010A7618, v35 + 8, v33 | 7);
  v37 = v43;
  *(_QWORD *)(v36 + 16) = v45;
  *(_QWORD *)(v36 + 24) = v37;
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v36 + v34, v32, v6);
  *(_QWORD *)(v36 + v35) = v4;
  swift_retain();
  swift_retain();
  static Transaction.asyncTask(name:block:)("unpairAirPodsLE", 15, 2, &unk_101111070, v36);
  return swift_release();
}

uint64_t sub_100A40A2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  v3[18] = a2;
  v3[19] = a3;
  v3[17] = a1;
  return swift_task_switch(sub_100A40A48, 0, 0);
}

uint64_t sub_100A40A48()
{
  uint64_t v0;
  uint64_t result;
  _QWORD *v2;
  uint64_t (__cdecl *v3)();

  if (qword_1010EA5B0 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v0 + 96, 0, 0);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 56, &qword_1010EE220);
  if (*(_QWORD *)(v0 + 80))
  {
    sub_10000F9FC((__int128 *)(v0 + 56), v0 + 16);
    sub_10001AA44((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
    v3 = (uint64_t (__cdecl *)())((char *)&dword_1010EBC70 + dword_1010EBC70);
    v2 = (_QWORD *)swift_task_alloc(unk_1010EBC74);
    *(_QWORD *)(v0 + 160) = v2;
    *v2 = v0;
    v2[1] = sub_100A40B34;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100A40B34(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 160);
  *(_QWORD *)(*(_QWORD *)v1 + 168) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100A40B90, 0, 0);
}

uint64_t sub_100A40B90()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t (*v9)(uint64_t);

  v1 = (_QWORD *)(v0 + 16);
  if (*(_QWORD *)(v0 + 168))
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    v9 = (uint64_t (*)(uint64_t))((char *)&dword_1011218D0 + dword_1011218D0);
    v2 = (_QWORD *)swift_task_alloc(unk_1011218D4);
    *(_QWORD *)(v0 + 176) = v2;
    *v2 = v0;
    v2[1] = sub_100A40CD8;
    return v9(*(_QWORD *)(v0 + 152));
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    if (qword_1010EA318 != -1)
      swift_once(&qword_1010EA318, sub_100B5E330);
    v4 = type metadata accessor for Logger(0);
    v5 = sub_10001A9E8(v4, (uint64_t)qword_1011B7DF8);
    v6 = Logger.logObject.getter(v5);
    v7 = static os_log_type_t.error.getter(v6);
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Missing StandaloneBeaconService!", v8, 2u);
      swift_slowDealloc(v8, -1, -1);
    }

    (*(void (**)(void))(v0 + 136))();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100A40CD8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 176);
  *(_QWORD *)(*(_QWORD *)v1 + 184) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_100A40D74;
  else
    v3 = sub_100A40D3C;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_100A40D3C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = swift_release(*(_QWORD *)(v0 + 168));
  (*(void (**)(uint64_t))(v0 + 136))(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100A40D74()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  BOOL v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;

  if (qword_1010EA318 != -1)
    swift_once(&qword_1010EA318, sub_100B5E330);
  v1 = *(_QWORD *)(v0 + 184);
  v2 = type metadata accessor for Logger(0);
  sub_10001A9E8(v2, (uint64_t)qword_1011B7DF8);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter(v4);
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 184);
  if (v6)
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = swift_slowAlloc(32, -1);
    v15 = v9;
    *(_DWORD *)v8 = 136446210;
    *(_QWORD *)(v0 + 120) = v7;
    swift_errorRetain(v7);
    v10 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
    v11 = String.init<A>(describing:)(v0 + 120, v10);
    *(_QWORD *)(v0 + 128) = sub_100016940(v11, v12, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 128, v0 + 136, v8 + 4, v8 + 12);
    swift_bridgeObjectRelease();
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Unable to remove standalone beacons due to %{public}s.", v8, 0xCu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);
    swift_release();

    v13 = swift_errorRelease(v7);
  }
  else
  {
    swift_release();
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    swift_errorRelease(v7);

  }
  (*(void (**)(uint64_t))(v0 + 136))(v13);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100A40F84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t (*v13)(char *, uint64_t, uint64_t);
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33[2];

  v4 = v3;
  v8 = type metadata accessor for MACAddress(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1010EA318 != -1)
    swift_once(&qword_1010EA318, sub_100B5E330);
  v12 = type metadata accessor for Logger(0);
  sub_10001A9E8(v12, (uint64_t)qword_1011B7DF8);
  v13 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 16);
  v31 = a1;
  v14 = v13(v11, a1, v8);
  v15 = Logger.logObject.getter(v14);
  v16 = static os_log_type_t.default.getter(v15);
  if (os_log_type_enabled(v15, v16))
  {
    v17 = swift_slowAlloc(12, -1);
    v30 = a3;
    v18 = (uint8_t *)v17;
    v19 = swift_slowAlloc(32, -1);
    v33[0] = v19;
    v28 = v3;
    v29 = a2;
    *(_DWORD *)v18 = 136446210;
    v20 = sub_100006C64((unint64_t *)&qword_1010FBAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for MACAddress, (uint64_t)&protocol conformance descriptor for MACAddress);
    v21 = dispatch thunk of CustomStringConvertible.description.getter(v8, v20);
    v32 = sub_100016940(v21, v22, v33);
    v4 = v28;
    a2 = v29;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, v33, v18 + 4, v18 + 12);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "Unpairing AirPods with %{public}s.", v18, 0xCu);
    swift_arrayDestroy(v19, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v19, -1, -1);
    v23 = v18;
    a3 = v30;
    swift_slowDealloc(v23, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }

  v24 = type metadata accessor for Transaction(0);
  __chkstk_darwin(v24);
  v25 = v31;
  *(&v27 - 4) = v4;
  *(&v27 - 3) = v25;
  *(&v27 - 2) = a2;
  *(&v27 - 1) = a3;
  return static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd.AirPodsPairingManager.unpairAirPods", 65, 2, sub_100A74E38, &v27 - 6);
}

uint64_t sub_100A4121C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD aBlock[6];
  _QWORD *v40;

  v31 = a4;
  v32 = a5;
  v35 = type metadata accessor for DispatchWorkItemFlags(0);
  v38 = *(_QWORD *)(v35 - 8);
  __chkstk_darwin(v35);
  v33 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS(0);
  v36 = *(_QWORD *)(v9 - 8);
  v37 = v9;
  __chkstk_darwin(v9);
  v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for MACAddress(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(_QWORD *)(v13 + 64);
  __chkstk_darwin(v12);
  v15 = (char *)&v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = *(_QWORD *)(a2 + 16);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a3, v12);
  v16 = *(unsigned __int8 *)(v13 + 80);
  v17 = (v16 + 32) & ~v16;
  v18 = (v14 + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
  v19 = swift_allocObject(&unk_1010A7438, v18 + 16, v16 | 7);
  *(_QWORD *)(v19 + 16) = a1;
  *(_QWORD *)(v19 + 24) = a2;
  (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(v19 + v17, v15, v12);
  v20 = (_QWORD *)(v19 + v18);
  v21 = v32;
  *v20 = v31;
  v20[1] = v21;
  aBlock[4] = sub_100A74EF0;
  aBlock[5] = v19;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_1010A7450;
  v22 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  v23 = swift_retain();
  static DispatchQoS.unspecified.getter(v23);
  v40 = _swiftEmptyArrayStorage;
  v24 = sub_100006C64((unint64_t *)&qword_1010F0E50, 255, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v25 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v26 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  v27 = v33;
  v28 = v35;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v40, v25, v26, v35, v24);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v11, v27, v22);
  _Block_release(v22);
  (*(void (**)(char *, uint64_t))(v38 + 8))(v27, v28);
  (*(void (**)(char *, uint64_t))(v36 + 8))(v11, v37);
  return swift_release();
}

uint64_t sub_100A414C8(char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE *v40;
  uint64_t v41;
  uint64_t v42;
  _BYTE *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _BYTE *v54;
  uint64_t v55;
  uint64_t v56;
  _BYTE *v57;
  uint64_t v59;
  void (*v60)(_BYTE *);
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _BYTE *v65;
  uint64_t v66;
  _BYTE *v67;
  uint64_t v68;
  NSObject *v69;
  os_log_type_t v70;
  int v71;
  _BOOL4 v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  _BYTE *v81;
  uint64_t v82;
  uint64_t v83;
  _BYTE *v84;
  uint64_t v85;
  uint64_t *v86;
  NSObject *v87;
  uint64_t v88;
  uint64_t v89;
  NSObject *v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  unint64_t v94;
  char *v95;
  uint64_t v96;
  void (*v97)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v98;
  __n128 v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  NSObject *v103;
  os_log_type_t v104;
  uint8_t *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  _BYTE *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  _BYTE *v116;
  _BYTE *v117;
  uint64_t v118;
  NSObject *v119;
  os_log_type_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  _BYTE *v126;
  _BYTE *v127;
  _BYTE *v128;
  _BYTE *v129;
  _BYTE *v130;
  void (*v131)(_BYTE *, _BYTE *, uint64_t);
  _BYTE *v132;
  uint64_t v133;
  void (*v134)(_BYTE *, _BYTE *, uint64_t);
  unint64_t v135;
  uint64_t v136;
  unint64_t v137;
  _BYTE *v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  uint64_t v145;
  uint64_t v146;
  _BYTE *v147;
  _QWORD *v148;
  uint64_t v149;
  uint64_t My;
  _QWORD *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  int *v158;
  _BYTE *v159;
  _BYTE *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  int EnumCaseMultiPayload;
  unint64_t v167;
  unint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  unint64_t v172;
  uint64_t v173;
  uint64_t v174;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v176;
  uint64_t v177;
  unint64_t v178;
  _BYTE *v179;
  uint64_t v180;
  void (*v181)(uint64_t, _BYTE *, uint64_t);
  char v182;
  char v183;
  _BYTE *v184;
  uint64_t v185;
  uint64_t v186;
  _BYTE *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  _BYTE *v191;
  void (*v192)(_BYTE *, uint64_t);
  uint64_t v193;
  void (*v194)(_BYTE *, uint64_t);
  uint64_t v195;
  _BYTE *v196;
  _BYTE *v197;
  _BYTE *v198;
  uint64_t (*v199)(_BYTE *, _BYTE *, uint64_t);
  _BYTE *v200;
  uint64_t v201;
  NSObject *v202;
  os_log_type_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  unint64_t v208;
  _BYTE *v209;
  _BYTE *v210;
  uint64_t v211;
  _BYTE *v212;
  _BYTE *v213;
  unint64_t v214;
  uint64_t v215;
  _QWORD *v216;
  _BYTE v217[4];
  int v218;
  uint64_t v219;
  void (*v220)(_BYTE *, uint64_t);
  NSObject *v221;
  void (*v222)(_BYTE *, uint64_t, uint64_t);
  _BYTE *v223;
  _BYTE *v224;
  _BYTE *v225;
  _BYTE *v226;
  _BYTE *v227;
  uint64_t v228;
  uint64_t v229;
  _BYTE *v230;
  _BYTE *v231;
  _BYTE *v232;
  _BYTE *v233;
  uint64_t v234;
  uint64_t v235;
  char *v236;
  _BYTE *v237;
  _BYTE *v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  _BYTE *v243;
  uint64_t v244;
  _BYTE *v245;
  _BYTE *v246;
  uint64_t v247;
  void (*v248)(_BYTE *);
  _BYTE *v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  _BYTE *v253;
  _BYTE *v254;
  uint64_t v255;
  _BYTE *v256;
  _BYTE *v257;
  _BYTE *v258;
  _BYTE *v259;
  uint64_t v260;
  uint64_t v261;
  _BYTE *v262;
  uint64_t v263;
  char v264[8];
  uint64_t v265;
  char v266[8];
  uint64_t v267;
  uint64_t v268;
  char v269[8];
  uint64_t v270;

  v251 = a5;
  v250 = a4;
  v8 = type metadata accessor for Endianness(0);
  __chkstk_darwin(v8);
  v256 = &v217[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v242 = type metadata accessor for StableIdentifier(0);
  __chkstk_darwin(v242);
  v254 = &v217[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = sub_10001A9A8((uint64_t *)&unk_1010F47C0);
  __chkstk_darwin(v11);
  v226 = &v217[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v255 = type metadata accessor for OwnedBeaconRecord(0);
  v228 = *(_QWORD *)(v255 - 8);
  v13 = __chkstk_darwin(v255);
  v227 = &v217[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v13);
  v225 = &v217[-v15];
  v16 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v16);
  v232 = &v217[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v252 = type metadata accessor for MACAddress(0);
  v260 = *(_QWORD *)(v252 - 8);
  v18 = __chkstk_darwin(v252);
  v243 = &v217[-((v19 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v20 = __chkstk_darwin(v18);
  v258 = &v217[-v21];
  v234 = v22;
  __chkstk_darwin(v20);
  v231 = &v217[-v23];
  v261 = type metadata accessor for UUID(0);
  v259 = *(_BYTE **)(v261 - 8);
  v24 = __chkstk_darwin(v261);
  v230 = &v217[-((v25 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v26 = __chkstk_darwin(v24);
  v223 = &v217[-v27];
  v28 = __chkstk_darwin(v26);
  v224 = &v217[-v29];
  v30 = __chkstk_darwin(v28);
  v249 = &v217[-v31];
  v32 = __chkstk_darwin(v30);
  v246 = &v217[-v33];
  v34 = __chkstk_darwin(v32);
  v233 = &v217[-v35];
  v36 = __chkstk_darwin(v34);
  v257 = &v217[-v37];
  v244 = v38;
  __chkstk_darwin(v36);
  v40 = &v217[-v39];
  v41 = sub_10001A9A8((uint64_t *)&unk_1010FF7F0);
  __chkstk_darwin(v41);
  v43 = &v217[-((v42 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v44 = type metadata accessor for OwnedBeaconGroup(0);
  v45 = *(_QWORD *)(v44 - 8);
  v46 = __chkstk_darwin(v44);
  v262 = &v217[-((v47 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v48 = __chkstk_darwin(v46);
  v245 = &v217[-v49];
  v50 = __chkstk_darwin(v48);
  v237 = &v217[-v51];
  v247 = v52;
  __chkstk_darwin(v50);
  v54 = &v217[-v53];
  v55 = sub_10001A9A8((uint64_t *)&unk_1010F9890);
  __chkstk_darwin(v55);
  v57 = &v217[-((v56 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v236 = (char *)a1;
  Transaction.capture()();
  v270 = (uint64_t)sub_100A3EA24();
  sub_100C8280C(a3, (uint64_t)v57);
  sub_100004048((uint64_t)v57, (uint64_t *)&unk_1010F9890);
  sub_100A3EE54(v270);
  v239 = *(_QWORD *)(a2 + 32);
  sub_10081F5CC(a3, (uint64_t)v43);
  v240 = v45;
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v45 + 48))(v43, 1, v44) == 1)
  {
    sub_100004048((uint64_t)v43, (uint64_t *)&unk_1010FF7F0);
    return sub_100A406AC(a3, v250, v251);
  }
  v235 = a3;
  sub_1000126EC((uint64_t)v43, (uint64_t)v54, type metadata accessor for OwnedBeaconGroup);
  v59 = *(int *)(v44 + 24);
  v253 = v54;
  v60 = (void (*)(_BYTE *))*((_QWORD *)v259 + 2);
  v221 = &v54[v59];
  v61 = v261;
  v60(v40);
  if (qword_1010EA318 != -1)
    swift_once(&qword_1010EA318, sub_100B5E330);
  v62 = type metadata accessor for Logger(0);
  v63 = sub_10001A9E8(v62, (uint64_t)qword_1011B7DF8);
  v64 = v260;
  v65 = v231;
  v66 = v252;
  v222 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v260 + 16);
  v222(v231, v235, v252);
  v67 = v257;
  v238 = v40;
  v68 = ((uint64_t (*)(_BYTE *, _BYTE *, uint64_t))v60)(v257, v40, v61);
  v229 = v63;
  v69 = Logger.logObject.getter(v68);
  v70 = static os_log_type_t.default.getter(v69);
  v71 = v70;
  v72 = os_log_type_enabled(v69, v70);
  v248 = v60;
  if (v72)
  {
    v73 = swift_slowAlloc(42, -1);
    v219 = swift_slowAlloc(64, -1);
    v270 = v219;
    *(_DWORD *)v73 = 141558787;
    v265 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v265, v266, v73 + 4, v73 + 12);
    *(_WORD *)(v73 + 12) = 2081;
    v74 = sub_100006C64((unint64_t *)&qword_1010FBAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for MACAddress, (uint64_t)&protocol conformance descriptor for MACAddress);
    v218 = v71;
    v75 = dispatch thunk of CustomStringConvertible.description.getter(v66, v74);
    v265 = sub_100016940(v75, v76, &v270);
    v61 = v261;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v265, v266, v73 + 14, v73 + 22);
    swift_bridgeObjectRelease();
    v220 = *(void (**)(_BYTE *, uint64_t))(v260 + 8);
    v220(v65, v66);
    *(_WORD *)(v73 + 22) = 2160;
    v265 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v265, v266, v73 + 24, v73 + 32);
    *(_WORD *)(v73 + 32) = 2081;
    v77 = a2;
    v78 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v79 = dispatch thunk of CustomStringConvertible.description.getter(v61, v78);
    v265 = sub_100016940(v79, v80, &v270);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v265, v266, v73 + 34, v73 + 42);
    swift_bridgeObjectRelease();
    v81 = v259;
    v257 = (_BYTE *)*((_QWORD *)v259 + 1);
    ((void (*)(_BYTE *, uint64_t))v257)(v67, v61);
    _os_log_impl((void *)&_mh_execute_header, v69, (os_log_type_t)v218, "Unpairing AirPods with MAC %{private,mask.hash}s. GroupId: %{private,mask.hash}s", (uint8_t *)v73, 0x2Au);
    v82 = v219;
    swift_arrayDestroy(v219, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v82, -1, -1);
    v83 = v73;
    v60 = v248;
    swift_slowDealloc(v83, -1, -1);

  }
  else
  {
    v220 = *(void (**)(_BYTE *, uint64_t))(v64 + 8);
    v220(v65, v66);
    v84 = v259;
    v257 = (_BYTE *)*((_QWORD *)v259 + 1);
    ((void (*)(_BYTE *, uint64_t))v257)(v67, v61);

    v77 = a2;
    v81 = v84;
  }
  sub_100A4319C(v239, (uint64_t)&v270);
  v85 = swift_allocObject(&unk_1010A3360, 24, 7);
  *(_QWORD *)(v85 + 16) = 0;
  v86 = (uint64_t *)(v85 + 16);
  v87 = dispatch_group_create();
  dispatch_group_enter(v87);
  v88 = *(_QWORD *)(v77 + 56);
  v89 = (uint64_t)v232;
  ((void (*)(_BYTE *, NSObject *, uint64_t))v60)(v232, v221, v61);
  (*((void (**)(uint64_t, _QWORD, uint64_t, uint64_t))v81 + 7))(v89, 0, 1, v61);
  v90 = v87;
  v91 = (uint64_t)v236;
  swift_retain();
  swift_retain();
  sub_100701B18(v89, (uint64_t)&v270, v88, v90, v91, v85);
  v231 = (_BYTE *)v85;
  swift_release();

  swift_release();
  sub_1009F6A84(&v270);
  sub_100004048(v89, &qword_1010ED860);
  v221 = v90;
  OS_dispatch_group.wait()();
  v92 = type metadata accessor for AnalyticsEvent(0);
  v93 = (char *)swift_allocObject(v92, *(unsigned int *)(v92 + 48), *(unsigned __int16 *)(v92 + 52));
  swift_defaultActor_initialize(v93);
  v94 = sub_1006B8B38((uint64_t)_swiftEmptyArrayStorage);
  *((_QWORD *)v93 + 14) = v94;
  UUID.init()(v94);
  v95 = &v93[OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_startTime];
  v96 = type metadata accessor for DispatchTime(0);
  v97 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v96 - 8) + 56);
  v97(v95, 1, 1, v96);
  v97(&v93[OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_endTime], 1, 1, v96);
  *((_QWORD *)v93 + 15) = 0xD00000000000002ELL;
  *((_QWORD *)v93 + 16) = 0x8000000100EED120;
  v98 = type metadata accessor for Transaction(0);
  swift_retain();
  v232 = (_BYTE *)v98;
  static Transaction.asyncTask(name:block:)("UnpairAirPodsAnalytics", 22, 2, &unk_101111018, v93);
  swift_release();
  v99 = swift_beginAccess(v86, v269, 0, 0);
  v100 = *v86;
  v101 = v77;
  v236 = v93;
  if (v100)
  {
    swift_errorRetain(v100);
    swift_errorRetain(v100);
    v102 = swift_errorRetain(v100);
    v103 = Logger.logObject.getter(v102);
    v104 = static os_log_type_t.error.getter(v103);
    if (os_log_type_enabled(v103, v104))
    {
      v105 = (uint8_t *)swift_slowAlloc(12, -1);
      v106 = swift_slowAlloc(32, -1);
      v265 = v106;
      *(_DWORD *)v105 = 136446210;
      v263 = v100;
      swift_errorRetain(v100);
      v107 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
      v108 = String.init<A>(describing:)(&v263, v107);
      v263 = sub_100016940(v108, v109, &v265);
      v110 = (uint64_t)v253;
      v93 = v236;
      v61 = v261;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v263, v264, v105 + 4, v105 + 12);
      swift_bridgeObjectRelease();
      swift_errorRelease(v100);
      swift_errorRelease(v100);
      _os_log_impl((void *)&_mh_execute_header, v103, v104, "Failed to remove pairing lock due to %{public}s", v105, 0xCu);
      swift_arrayDestroy(v106, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v106, -1, -1);
      swift_slowDealloc(v105, -1, -1);

      v111 = v247;
    }
    else
    {
      swift_errorRelease(v100);
      swift_errorRelease(v100);

      v111 = v247;
      v110 = (uint64_t)v253;
    }
    v112 = v237;
    sub_10005972C(v110, (uint64_t)v237, type metadata accessor for OwnedBeaconGroup);
    v113 = *(unsigned __int8 *)(v240 + 80);
    v114 = (v113 + 32) & ~v113;
    v115 = swift_allocObject(&unk_1010A7500, v114 + v111, v113 | 7);
    *(_QWORD *)(v115 + 16) = v93;
    *(_QWORD *)(v115 + 24) = v100;
    sub_1000126EC((uint64_t)v112, v115 + v114, type metadata accessor for OwnedBeaconGroup);
    swift_retain();
    swift_errorRetain(v100);
    static Transaction.asyncTask(name:block:)("UnpairAnalytics", 15, 2, &unk_101111048, v115);
    swift_errorRelease(v100);
    swift_release();
  }
  v241 = v101;
  v116 = v233;
  v117 = v238;
  v118 = ((uint64_t (*)(_BYTE *, _BYTE *, uint64_t, __n128))v248)(v233, v238, v61, v99);
  v119 = Logger.logObject.getter(v118);
  v120 = static os_log_type_t.default.getter(v119);
  if (os_log_type_enabled(v119, v120))
  {
    v121 = swift_slowAlloc(22, -1);
    v122 = swift_slowAlloc(32, -1);
    v265 = v122;
    *(_DWORD *)v121 = 141558275;
    v263 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v263, v264, v121 + 4, v121 + 12);
    *(_WORD *)(v121 + 12) = 2081;
    v123 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v124 = dispatch thunk of CustomStringConvertible.description.getter(v261, v123);
    v263 = sub_100016940(v124, v125, &v265);
    v61 = v261;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v263, v264, v121 + 14, v121 + 22);
    swift_bridgeObjectRelease();
    ((void (*)(_BYTE *, uint64_t))v257)(v116, v61);
    _os_log_impl((void *)&_mh_execute_header, v119, v120, "Successfully removed pairing lock for %{private,mask.hash}s", (uint8_t *)v121, 0x16u);
    swift_arrayDestroy(v122, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v122, -1, -1);
    v117 = v238;
    swift_slowDealloc(v121, -1, -1);
  }
  else
  {
    ((void (*)(_BYTE *, uint64_t))v257)(v116, v61);
  }

  v126 = v243;
  v127 = v249;
  v128 = v262;
  v129 = v245;
  sub_10005972C((uint64_t)v253, (uint64_t)v245, type metadata accessor for OwnedBeaconGroup);
  v130 = v246;
  v131 = (void (*)(_BYTE *, _BYTE *, uint64_t))v248;
  ((void (*)(_BYTE *, _BYTE *, uint64_t))v248)(v246, v117, v61);
  v132 = v258;
  v133 = v252;
  v134 = (void (*)(_BYTE *, _BYTE *, uint64_t))v222;
  v222(v258, v235, v252);
  sub_10005972C((uint64_t)v129, (uint64_t)v128, type metadata accessor for OwnedBeaconGroup);
  v131(v127, v130, v61);
  v134(v126, v132, v133);
  v135 = *(unsigned __int8 *)(v240 + 80);
  v136 = (v135 + 24) & ~v135;
  v137 = (v247 + v136 + 7) & 0xFFFFFFFFFFFFFFF8;
  v138 = v259;
  v139 = v259[80];
  v235 = ~v139;
  v140 = (v139 + v137 + 8) & ~v139;
  v222 = (void (*)(_BYTE *, uint64_t, uint64_t))v135;
  v233 = (_BYTE *)v139;
  v141 = *(unsigned __int8 *)(v260 + 80);
  v142 = (v244 + v141 + v140) & ~v141;
  v219 = v139 | v135;
  v143 = v61;
  v144 = (v234 + v142 + 7) & 0xFFFFFFFFFFFFFFF8;
  v145 = swift_allocObject(&unk_1010A7488, v144 + 16, v139 | v135 | v141 | 7);
  *(_QWORD *)(v145 + 16) = v241;
  sub_1000126EC((uint64_t)v245, v145 + v136, type metadata accessor for OwnedBeaconGroup);
  *(_QWORD *)(v145 + v137) = v236;
  v146 = v145 + v140;
  v147 = (_BYTE *)*((_QWORD *)v138 + 4);
  ((void (*)(uint64_t, _BYTE *, uint64_t))v147)(v146, v246, v143);
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(v260 + 32))(v145 + v142, v258, v133);
  v148 = (_QWORD *)(v145 + v144);
  v149 = v251;
  *v148 = v250;
  v148[1] = v149;
  My = type metadata accessor for Feature.FindMy(0);
  v267 = My;
  v268 = sub_100006C64((unint64_t *)&qword_1010EE1B0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for Feature.FindMy, (uint64_t)&protocol conformance descriptor for Feature.FindMy);
  v151 = sub_100018F08(&v265);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(My - 8) + 104))(v151, enum case for Feature.FindMy.managedCBPeripheral(_:), My);
  swift_retain();
  swift_retain();
  swift_retain();
  LOBYTE(My) = isFeatureEnabled(_:)(&v265);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v265);
  v240 = v145;
  if ((My & 1) != 0)
  {
    v246 = v147;
    sub_10036AC6C();
    v153 = v152;
    swift_retain();
    sub_10028B45C(v153);
    v155 = v154;
    swift_release();
    swift_bridgeObjectRelease();
    v156 = *(_QWORD *)(v155 + 16);
    v157 = v261;
    v158 = (int *)v255;
    v159 = v262;
    v160 = (_BYTE *)v155;
    v161 = (uint64_t)v254;
    v162 = v241;
    v163 = (uint64_t)v227;
    v260 = v156;
    if (v156)
    {
      v259 = &v160[(*(unsigned __int8 *)(v228 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v228 + 80)];
      v258 = *(_BYTE **)(v228 + 72);
      v245 = v160;
      swift_bridgeObjectRetain(v160);
      v164 = 0;
      v165 = v242;
      while (1)
      {
        sub_10005972C((uint64_t)&v259[(_QWORD)v258 * v164], v163, type metadata accessor for OwnedBeaconRecord);
        sub_10005972C(v163 + v158[6], v161, type metadata accessor for StableIdentifier);
        EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v161, v165);
        if (EnumCaseMultiPayload == 3)
          break;
        if (EnumCaseMultiPayload == 2)
        {
          sub_10001A9A8(&qword_101106F40);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
LABEL_25:
          swift_bridgeObjectRelease();
          ((void (*)(uint64_t, uint64_t))v257)(v161, v157);
          sub_1001EE37C(*(_QWORD *)(v163 + v158[16]), *(_QWORD *)(v163 + v158[17]));
          if (v167 >> 60 != 15)
          {
            v168 = v167;
            v169 = Set.init(minimumCapacity:)(1);
            v170 = static Hasher._hash(seed:_:)(*(_QWORD *)(v169 + 40), 8213);
            v171 = -1 << *(_BYTE *)(v169 + 32);
            v172 = v170 & ~v171;
            if (((*(_QWORD *)(v169 + 56 + ((v172 >> 3) & 0xFFFFFFFFFFFFF8)) >> v172) & 1) == 0)
              goto LABEL_33;
            v173 = *(_QWORD *)(v169 + 48);
            if (*(_QWORD *)(v173 + 8 * v172) != 8213)
            {
              v174 = ~v171;
              while (1)
              {
                v172 = (v172 + 1) & v174;
                if (((*(_QWORD *)(v169 + 56 + ((v172 >> 3) & 0xFFFFFFFFFFFFF8)) >> v172) & 1) == 0)
                  break;
                if (*(_QWORD *)(v173 + 8 * v172) == 8213)
                  goto LABEL_34;
              }
LABEL_33:
              isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v169);
              v263 = v169;
              sub_100A1CF0C(8213, v172, isUniquelyReferenced_nonNull_native);
              v169 = v263;
              swift_bridgeObjectRelease();
            }
LABEL_34:
            v265 = v169;
            sub_100A0A1F4(&v263, 8216);
            sub_100A0A1F4(&v263, 8220);
            __asm { BR              X10 }
          }
          v159 = v262;
          goto LABEL_20;
        }
        sub_1000126B0(v161, type metadata accessor for StableIdentifier);
LABEL_20:
        ++v164;
        sub_1000126B0(v163, type metadata accessor for OwnedBeaconRecord);
        if (v164 == v260)
        {
          swift_bridgeObjectRelease();
          v162 = v241;
          v176 = (uint64_t)v226;
          goto LABEL_37;
        }
      }
      sub_10001A9A8((uint64_t *)&unk_1010F46F0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_25;
    }
    v176 = (uint64_t)v226;
LABEL_37:
    v177 = v228;
    (*(void (**)(uint64_t, uint64_t, uint64_t, int *))(v228 + 56))(v176, 1, 1, v158);
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(uint64_t, uint64_t, int *))(v177 + 48))(v176, 1, v158) != 1)
    {
      v220(v243, v252);
      v194 = (void (*)(_BYTE *, uint64_t))v257;
      ((void (*)(_BYTE *, uint64_t))v257)(v249, v157);
      sub_1000126B0((uint64_t)v159, type metadata accessor for OwnedBeaconGroup);
      v195 = v176;
      v196 = v225;
      sub_1000126EC(v195, (uint64_t)v225, type metadata accessor for OwnedBeaconRecord);
      v197 = &v196[v158[5]];
      v198 = v224;
      v199 = (uint64_t (*)(_BYTE *, _BYTE *, uint64_t))v248;
      ((void (*)(_BYTE *, _BYTE *, uint64_t))v248)(v224, v197, v157);
      v200 = v223;
      v201 = v199(v223, v198, v157);
      v202 = Logger.logObject.getter(v201);
      v203 = static os_log_type_t.default.getter(v202);
      if (os_log_type_enabled(v202, v203))
      {
        v204 = swift_slowAlloc(22, -1);
        v205 = swift_slowAlloc(32, -1);
        v265 = v205;
        *(_DWORD *)v204 = 141558275;
        v263 = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v263, v264, v204 + 4, v204 + 12);
        *(_WORD *)(v204 + 12) = 2081;
        v206 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v207 = dispatch thunk of CustomStringConvertible.description.getter(v261, v206);
        v263 = sub_100016940(v207, v208, &v265);
        v157 = v261;
        v194 = (void (*)(_BYTE *, uint64_t))v257;
        v162 = v241;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v263, v264, v204 + 14, v204 + 22);
        swift_bridgeObjectRelease();
        v194(v200, v157);
        _os_log_impl((void *)&_mh_execute_header, v202, v203, "Sending unpair to managed peripheral %{private,mask.hash}s", (uint8_t *)v204, 0x16u);
        swift_arrayDestroy(v205, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v205, -1, -1);
        swift_slowDealloc(v204, -1, -1);
      }
      else
      {
        v194(v200, v157);
      }

      v209 = v238;
      v210 = v230;
      v211 = v244;
      v212 = v233;
      v213 = v224;
      v199(v230, v224, v157);
      v214 = (unint64_t)v212;
      v215 = (unint64_t)(v212 + 40) & v235;
      v216 = (_QWORD *)swift_allocObject(&unk_1010A74D8, v215 + v211, v214 | 7);
      v216[2] = v162;
      v216[3] = sub_100A750EC;
      v216[4] = v240;
      ((void (*)(char *, _BYTE *, uint64_t))v246)((char *)v216 + v215, v210, v157);
      swift_retain();
      swift_retain();
      static Transaction.asyncTask(name:block:)("UnpairManagedPeripheral", 23, 2, &unk_101111038, v216);

      swift_release();
      swift_release();
      swift_release();
      v194(v213, v157);
      sub_1000126B0((uint64_t)v225, type metadata accessor for OwnedBeaconRecord);
      v194(v209, v157);
      v193 = (uint64_t)v253;
      goto LABEL_44;
    }
    sub_100004048(v176, (uint64_t *)&unk_1010F47C0);
    v147 = v246;
  }
  v178 = (unint64_t)v222;
  v179 = v262;
  v180 = sub_100A45570((uint64_t)v262);
  v181 = (void (*)(uint64_t, _BYTE *, uint64_t))v147;
  v183 = v182 & 1;
  v184 = v230;
  v185 = v261;
  ((void (*)(_BYTE *, _BYTE *, uint64_t))v248)(v230, v249, v261);
  v186 = (uint64_t)v179;
  v187 = v237;
  sub_10005972C(v186, (uint64_t)v237, type metadata accessor for OwnedBeaconGroup);
  v188 = (unint64_t)(v233 + 33) & v235;
  v189 = (v244 + v178 + v188) & ~v178;
  v190 = swift_allocObject(&unk_1010A74B0, v189 + v247, v219 | 7);
  *(_QWORD *)(v190 + 16) = v236;
  *(_QWORD *)(v190 + 24) = v180;
  *(_BYTE *)(v190 + 32) = v183;
  v181(v190 + v188, v184, v185);
  sub_1000126EC((uint64_t)v187, v190 + v189, type metadata accessor for OwnedBeaconGroup);
  swift_retain();
  sub_1002437C4(v180, v183);
  static Transaction.asyncTask(name:block:)("UnpairAirPodsAnalytics", 22, 2, &unk_101111028, v190);
  swift_release();
  v191 = v243;
  sub_100A406AC((uint64_t)v243, v250, v251);
  sub_10010F948(v180, v183);

  swift_release();
  swift_release();
  v220(v191, v252);
  v192 = (void (*)(_BYTE *, uint64_t))v257;
  ((void (*)(_BYTE *, uint64_t))v257)(v249, v185);
  sub_1000126B0((uint64_t)v262, type metadata accessor for OwnedBeaconGroup);
  v192(v238, v185);
  v193 = (uint64_t)v253;
LABEL_44:
  sub_1000126B0(v193, type metadata accessor for OwnedBeaconGroup);
  return swift_release();
}

id sub_100A4319C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  id result;
  void *v22;
  uint64_t uniqueChipID;
  uint64_t v24;
  void *v25;
  uint64_t chipID;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v3 = v2;
  v37 = type metadata accessor for OwnedBeaconGroup(0);
  swift_bridgeObjectRetain(*(_QWORD *)(v3 + *(int *)(v37 + 40)));
  v7 = sub_100265568(v6);
  swift_bridgeObjectRelease();
  swift_retain();
  v8 = sub_100A71C58(v7, a1);
  swift_bridgeObjectRelease();
  swift_release();
  if (qword_1010EA318 != -1)
    swift_once(&qword_1010EA318, sub_100B5E330);
  v9 = type metadata accessor for Logger(0);
  sub_10001A9E8(v9, (uint64_t)qword_1011B7DF8);
  swift_bridgeObjectRetain_n(v8, 2);
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.default.getter(v11);
  if (os_log_type_enabled(v11, v12))
  {
    v13 = (uint8_t *)swift_slowAlloc(12, -1);
    v14 = swift_slowAlloc(32, -1);
    v39 = v14;
    *(_DWORD *)v13 = 136315138;
    v15 = type metadata accessor for AirPodsUnpairData.DeviceUnpairData(0);
    swift_bridgeObjectRetain(v8);
    v17 = Array.description.getter(v16, v15);
    v19 = v18;
    swift_bridgeObjectRelease();
    v38 = sub_100016940(v17, v19, &v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39, v13 + 4, v13 + 12);
    swift_bridgeObjectRelease_n(v8, 2);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "unpairDevices: %s", v13, 0xCu);
    swift_arrayDestroy(v14, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v14, -1, -1);
    swift_slowDealloc(v13, -1, -1);

  }
  else
  {

    v20 = swift_bridgeObjectRelease_n(v8, 2);
  }
  result = (id)MobileGestalt_get_current_device(v20);
  if (result)
  {
    v22 = result;
    uniqueChipID = MobileGestalt_get_uniqueChipID();

    result = (id)MobileGestalt_get_current_device(v24);
    if (result)
    {
      v25 = result;
      chipID = MobileGestalt_get_chipID();

      v39 = uniqueChipID;
      v27 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int64, &protocol witness table for Int64);
      v29 = v28;
      v39 = chipID;
      v30 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int64, &protocol witness table for Int64);
      v32 = v31;
      v33 = sub_100B118D0();
      v35 = v34;
      result = (id)MACAddress.udid.getter(v33);
      *(_QWORD *)a2 = v27;
      *(_QWORD *)(a2 + 8) = v29;
      *(_QWORD *)(a2 + 16) = v30;
      *(_QWORD *)(a2 + 24) = v32;
      *(_QWORD *)(a2 + 32) = v33;
      *(_QWORD *)(a2 + 40) = v35;
      *(_QWORD *)(a2 + 48) = result;
      *(_QWORD *)(a2 + 56) = v36;
      *(_BYTE *)(a2 + 64) = 0;
      *(_QWORD *)(a2 + 72) = v8;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

void sub_100A43498(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  _BYTE v9[24];

  v7 = a4 + 16;
  Transaction.capture()();
  swift_beginAccess(v7, v9, 1, 0);
  v8 = *(_QWORD *)(a4 + 16);
  *(_QWORD *)(a4 + 16) = a1;
  swift_errorRetain(a1);
  swift_errorRelease(v8);
  dispatch_group_leave(a2);
}

uint64_t sub_100A43514(uint64_t a1)
{
  _QWORD *v1;
  unint64_t v3;

  v1[5] = a1;
  v3 = (*(_QWORD *)(*(_QWORD *)(sub_10001A9A8(&qword_1010EBE20) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[6] = swift_task_alloc(v3);
  v1[7] = swift_task_alloc(v3);
  return swift_task_switch(sub_100A43584, a1, 0);
}

uint64_t sub_100A43584(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD *)(v1 + 48);
  v2 = *(_QWORD *)(v1 + 56);
  v4 = *(_QWORD *)(v1 + 40);
  static DispatchTime.now()(a1);
  v5 = type metadata accessor for DispatchTime(0);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v2, 0, 1, v5);
  sub_100005CF0(v2, v3, &qword_1010EBE20);
  v6 = v4 + OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_startTime;
  swift_beginAccess(v6, v1 + 16, 33, 0);
  sub_100004084(v3, v6, &qword_1010EBE20);
  swift_endAccess(v1 + 16);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_100A43658(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  return swift_task_switch(sub_100A43674, 0, 0);
}

uint64_t sub_100A43674()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = swift_task_alloc(32);
  *(_QWORD *)(v0 + 40) = v2;
  *(_OWORD *)(v2 + 16) = *(_OWORD *)(v0 + 24);
  return swift_task_switch(sub_100A436C0, v1, 0);
}

uint64_t sub_100A436C0()
{
  uint64_t v0;

  sub_100CCC4A0((uint64_t (*)(uint64_t))sub_100A754BC);
  swift_task_dealloc(*(_QWORD *)(v0 + 40));
  return swift_task_switch(sub_100A43740, 0, 0);
}

uint64_t sub_100A43740()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t **v3;

  v1 = type metadata accessor for AnalyticsPublisher();
  v2 = swift_allocObject(v1, 112, 15);
  v0[6] = v2;
  swift_defaultActor_initialize(v2);
  v3 = (uint64_t **)swift_task_alloc(dword_10111D22C);
  v0[7] = (uint64_t)v3;
  *v3 = v0;
  v3[1] = (uint64_t *)sub_100A437AC;
  return sub_100CD63AC(v0[2]);
}

uint64_t sub_100A437AC()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v3;

  v1 = *(_QWORD *)(*v0 + 48);
  v3 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 56));
  swift_release(v1);
  return (*(uint64_t (**)(void))(v3 + 8))();
}

unint64_t sub_100A437FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t inited;
  NSString v6;
  unint64_t result;
  _QWORD v8[3];
  _BYTE v9[8];
  _QWORD v10[3];
  _BYTE v11[8];
  _BYTE v12[160];

  v4 = sub_10001A9A8(&qword_1010EEBD0);
  inited = swift_initStackObject(v4, v12);
  *(_OWORD *)(inited + 16) = xmmword_100E26E00;
  *(_QWORD *)(inited + 32) = 0x6563637553736177;
  *(_QWORD *)(inited + 40) = 0xEA00000000007373;
  *(_QWORD *)(inited + 48) = 0;
  *(_BYTE *)(inited + 56) = 1;
  *(_QWORD *)(inited + 64) = 0x6D6F44726F727265;
  *(_QWORD *)(inited + 72) = 0xEB000000006E6961;
  swift_getErrorValue(a1, v11, v10);
  Error.domain.getter(v10[1], v10[2]);
  v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  *(_QWORD *)(inited + 80) = v6;
  *(_BYTE *)(inited + 88) = 0;
  *(_QWORD *)(inited + 96) = 0x646F43726F727265;
  *(_QWORD *)(inited + 104) = 0xE900000000000065;
  swift_getErrorValue(a1, v9, v8);
  Error.code.getter(v8[1], v8[2]);
  *(NSNumber *)(inited + 112) = Int._bridgeToObjectiveC()();
  *(_BYTE *)(inited + 120) = 0;
  strcpy((char *)(inited + 128), "numberOfParts");
  *(_WORD *)(inited + 142) = -4864;
  if (*(_QWORD *)(*(_QWORD *)(a2 + *(int *)(type metadata accessor for OwnedBeaconGroup(0) + 40)) + 16) >= 0x100uLL)
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 3455, 0);
    __break(1u);
  }
  else
  {
    *(NSNumber *)(inited + 144) = UInt8._bridgeToObjectiveC()();
    *(_BYTE *)(inited + 152) = 0;
    return sub_1006B9444(inited);
  }
  return result;
}

uint64_t sub_100A439B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v31 = a6;
  v32 = a7;
  v29 = a1;
  v30 = a5;
  v26 = a4;
  v28 = a3;
  v8 = type metadata accessor for OwnedBeaconGroup(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  __chkstk_darwin(v8);
  v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for UUID(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(_QWORD *)(v13 + 64);
  __chkstk_darwin(v12);
  v15 = (char *)&v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_100A45570(a2);
  v18 = v17 & 1;
  v27 = type metadata accessor for Transaction(0);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, v26, v12);
  sub_10005972C(a2, (uint64_t)v11, type metadata accessor for OwnedBeaconGroup);
  v19 = *(unsigned __int8 *)(v13 + 80);
  v20 = (v19 + 33) & ~v19;
  v21 = *(unsigned __int8 *)(v9 + 80);
  v22 = (v14 + v21 + v20) & ~v21;
  v23 = swift_allocObject(&unk_1010A75F0, v22 + v10, v19 | v21 | 7);
  *(_QWORD *)(v23 + 16) = v28;
  *(_QWORD *)(v23 + 24) = v16;
  *(_BYTE *)(v23 + 32) = v18;
  (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(v23 + v20, v15, v12);
  sub_1000126EC((uint64_t)v11, v23 + v22, type metadata accessor for OwnedBeaconGroup);
  swift_retain();
  sub_1002437C4(v16, v18);
  static Transaction.asyncTask(name:block:)("UnpairAirPodsAnalytics", 22, 2, &unk_101111060, v23);
  swift_release();
  sub_100A406AC(v30, v31, v32);
  return sub_10010F948(v16, v18);
}

uint64_t sub_100A43B8C(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  *(_QWORD *)(v5 + 32) = a4;
  *(_QWORD *)(v5 + 40) = a5;
  *(_BYTE *)(v5 + 72) = a3;
  *(_QWORD *)(v5 + 16) = a1;
  *(_QWORD *)(v5 + 24) = a2;
  return swift_task_switch(sub_100A43BAC, 0, 0);
}

uint64_t sub_100A43BAC()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;

  v1 = *(_BYTE *)(v0 + 72);
  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  v4 = swift_task_alloc(48);
  *(_QWORD *)(v0 + 48) = v4;
  v5 = *(_OWORD *)(v0 + 32);
  *(_QWORD *)(v4 + 16) = v3;
  *(_BYTE *)(v4 + 24) = v1 & 1;
  *(_OWORD *)(v4 + 32) = v5;
  return swift_task_switch(sub_100A43C10, v2, 0);
}

uint64_t sub_100A43C10()
{
  uint64_t v0;

  sub_100CCC4A0((uint64_t (*)(uint64_t))sub_100A75550);
  swift_task_dealloc(*(_QWORD *)(v0 + 48));
  return swift_task_switch(sub_100A43C90, 0, 0);
}

uint64_t sub_100A43C90()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t **v3;

  v1 = type metadata accessor for AnalyticsPublisher();
  v2 = swift_allocObject(v1, 112, 15);
  v0[7] = v2;
  swift_defaultActor_initialize(v2);
  v3 = (uint64_t **)swift_task_alloc(dword_10111D22C);
  v0[8] = (uint64_t)v3;
  *v3 = v0;
  v3[1] = (uint64_t *)sub_100A43CFC;
  return sub_100CD63AC(v0[2]);
}

uint64_t sub_100A43CFC()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v3;

  v1 = *(_QWORD *)(*v0 + 56);
  v3 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 64));
  swift_release(v1);
  return (*(uint64_t (**)(void))(v3 + 8))();
}

unint64_t sub_100A43D4C(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  os_log_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t inited;
  NSString v44;
  unint64_t result;
  os_log_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD v52[3];
  uint64_t v53;
  _QWORD v54[3];
  uint64_t v55;
  uint64_t v56;

  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v46 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v46 - v13;
  if ((a2 & 1) != 0)
  {
    swift_errorRetain(a1);
    if (qword_1010EA318 != -1)
      swift_once(&qword_1010EA318, sub_100B5E330);
    v24 = type metadata accessor for Logger(0);
    sub_10001A9E8(v24, (uint64_t)qword_1011B7DF8);
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, a3, v8);
    sub_1002437C4(a1, 1);
    v25 = swift_errorRetain(a1);
    v26 = Logger.logObject.getter(v25);
    v27 = static os_log_type_t.error.getter(v26);
    v28 = v27;
    if (os_log_type_enabled(v26, v27))
    {
      v29 = swift_slowAlloc(32, -1);
      v30 = swift_slowAlloc(64, -1);
      v48 = v30;
      *(_DWORD *)v29 = 141558531;
      v50 = 1752392040;
      v51 = v30;
      LODWORD(v47) = v28;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v50, &v51, v29 + 4, v29 + 12);
      *(_WORD *)(v29 + 12) = 2081;
      v31 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v46 = v26;
      v32 = dispatch thunk of CustomStringConvertible.description.getter(v8, v31);
      v50 = sub_100016940(v32, v33, &v51);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v50, &v51, v29 + 14, v29 + 22);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
      *(_WORD *)(v29 + 22) = 2082;
      v50 = a1;
      swift_errorRetain(a1);
      v34 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
      v35 = String.init<A>(describing:)(&v50, v34);
      v50 = sub_100016940(v35, v36, &v51);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v50, &v51, v29 + 24, v29 + 32);
      swift_bridgeObjectRelease();
      sub_10010F948(a1, 1);
      sub_10010F948(a1, 1);
      v37 = v46;
      _os_log_impl((void *)&_mh_execute_header, v46, (os_log_type_t)v47, "Remove related records failed for %{private,mask.hash}s. Error %{public}s", (uint8_t *)v29, 0x20u);
      v38 = v48;
      swift_arrayDestroy(v48, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v38, -1, -1);
      swift_slowDealloc(v29, -1, -1);

    }
    else
    {
      (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
      sub_10010F948(a1, 1);
      sub_10010F948(a1, 1);

    }
    v42 = sub_10001A9A8(&qword_1010EEBD0);
    inited = swift_initStackObject(v42, &v56);
    *(_OWORD *)(inited + 16) = xmmword_100E26E00;
    *(_QWORD *)(inited + 32) = 0x6563637553736177;
    *(_QWORD *)(inited + 40) = 0xEA00000000007373;
    *(_QWORD *)(inited + 48) = 0;
    *(_BYTE *)(inited + 56) = 1;
    *(_QWORD *)(inited + 64) = 0x6D6F44726F727265;
    *(_QWORD *)(inited + 72) = 0xEB000000006E6961;
    swift_getErrorValue(a1, &v55, v54);
    Error.domain.getter(v54[1], v54[2]);
    v44 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    *(_QWORD *)(inited + 80) = v44;
    *(_BYTE *)(inited + 88) = 0;
    *(_QWORD *)(inited + 96) = 0x646F43726F727265;
    *(_QWORD *)(inited + 104) = 0xE900000000000065;
    swift_getErrorValue(a1, &v53, v52);
    Error.code.getter(v52[1], v52[2]);
    *(NSNumber *)(inited + 112) = Int._bridgeToObjectiveC()();
    *(_BYTE *)(inited + 120) = 0;
    strcpy((char *)(inited + 128), "numberOfParts");
    *(_WORD *)(inited + 142) = -4864;
    if (*(_QWORD *)(*(_QWORD *)(a4 + *(int *)(type metadata accessor for OwnedBeaconGroup(0) + 40)) + 16) < 0x100uLL)
    {
      *(NSNumber *)(inited + 144) = UInt8._bridgeToObjectiveC()();
      *(_BYTE *)(inited + 152) = 0;
      v41 = sub_1006B9444(inited);
      sub_10010F948(a1, 1);
      return v41;
    }
  }
  else
  {
    if (qword_1010EA318 != -1)
      swift_once(&qword_1010EA318, sub_100B5E330);
    v15 = type metadata accessor for Logger(0);
    sub_10001A9E8(v15, (uint64_t)qword_1011B7DF8);
    v16 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 16))(v14, a3, v8);
    v17 = Logger.logObject.getter(v16);
    v18 = static os_log_type_t.default.getter(v17);
    if (os_log_type_enabled(v17, v18))
    {
      v19 = swift_slowAlloc(22, -1);
      v20 = swift_slowAlloc(32, -1);
      *(_DWORD *)v19 = 141558275;
      v50 = 1752392040;
      v51 = v20;
      v48 = a4;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v50, &v51, v19 + 4, v19 + 12);
      *(_WORD *)(v19 + 12) = 2081;
      v47 = v19 + 14;
      v21 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v22 = dispatch thunk of CustomStringConvertible.description.getter(v8, v21);
      v50 = sub_100016940(v22, v23, &v51);
      a4 = v48;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v50, &v51, v47, v19 + 22);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v8);
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Successfully removed related records for %{private,mask.hash}s", (uint8_t *)v19, 0x16u);
      swift_arrayDestroy(v20, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v20, -1, -1);
      swift_slowDealloc(v19, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v8);
    }

    v39 = sub_10001A9A8(&qword_1010EEBD0);
    v40 = swift_initStackObject(v39, &v49);
    *(_OWORD *)(v40 + 16) = xmmword_100E22B10;
    *(_QWORD *)(v40 + 32) = 0x6563637553736177;
    *(_QWORD *)(v40 + 40) = 0xEA00000000007373;
    *(_QWORD *)(v40 + 48) = 1;
    *(_BYTE *)(v40 + 56) = 1;
    strcpy((char *)(v40 + 64), "numberOfParts");
    *(_WORD *)(v40 + 78) = -4864;
    if (*(_QWORD *)(*(_QWORD *)(a4 + *(int *)(type metadata accessor for OwnedBeaconGroup(0) + 40)) + 16) < 0x100uLL)
    {
      *(NSNumber *)(v40 + 80) = UInt8._bridgeToObjectiveC()();
      *(_BYTE *)(v40 + 88) = 0;
      return sub_1006B9444(v40);
    }
  }
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 3455, 0);
  __break(1u);
  return result;
}

uint64_t sub_100A44498(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;

  v4[34] = a3;
  v4[35] = a4;
  v4[32] = a1;
  v4[33] = a2;
  v5 = type metadata accessor for DispatchWorkItemFlags(0);
  v4[36] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[37] = v6;
  v4[38] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  v4[39] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v4[40] = v8;
  v4[41] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for UUID(0);
  v4[42] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v4[43] = v10;
  v11 = *(_QWORD *)(v10 + 64);
  v4[44] = v11;
  v12 = (v11 + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[45] = swift_task_alloc(v12);
  v4[46] = swift_task_alloc(v12);
  return swift_task_switch(sub_100A44560, 0, 0);
}

uint64_t sub_100A44560()
{
  uint64_t v0;
  uint64_t result;
  _QWORD *v2;
  uint64_t (__cdecl *v3)();

  if (qword_1010EA5B0 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v0 + 192, 0, 0);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 112, &qword_1010EE220);
  if (*(_QWORD *)(v0 + 136))
  {
    sub_10000F9FC((__int128 *)(v0 + 112), v0 + 152);
    sub_10001AA44((_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 176));
    v3 = (uint64_t (__cdecl *)())((char *)&dword_1010EBC88 + dword_1010EBC88);
    v2 = (_QWORD *)swift_task_alloc(unk_1010EBC8C);
    *(_QWORD *)(v0 + 376) = v2;
    *v2 = v0;
    v2[1] = sub_100A4464C;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100A4464C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 376);
  *(_QWORD *)(*(_QWORD *)v1 + 384) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100A446A8, 0, 0);
}

uint64_t sub_100A446A8()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v1 = v0 + 19;
  v2 = v0[48];
  if (v2)
  {
    v3 = v0[46];
    v5 = v0[43];
    v4 = v0[44];
    v6 = v0[42];
    v7 = v0[35];
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    v0[49] = v8;
    v8(v3, v7, v6);
    v9 = *(unsigned __int8 *)(v5 + 80);
    v10 = (v9 + 24) & ~v9;
    v11 = swift_allocObject(&unk_1010A7578, v10 + v4, v9 | 7);
    v0[50] = v11;
    *(_QWORD *)(v11 + 16) = v2;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(v11 + v10, v3, v6);
    v12 = async function pointer to retry<A>(times:retryDelay:shouldRetry:block:)[1];
    swift_retain();
    v13 = (_QWORD *)swift_task_alloc(v12);
    v0[51] = v13;
    *v13 = v0;
    v13[1] = sub_100A44A1C;
    return retry<A>(times:retryDelay:shouldRetry:block:)();
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    if (qword_1010EA318 != -1)
      swift_once(&qword_1010EA318, sub_100B5E330);
    v15 = type metadata accessor for Logger(0);
    v16 = sub_10001A9E8(v15, (uint64_t)qword_1011B7DF8);
    v17 = Logger.logObject.getter(v16);
    v18 = static os_log_type_t.error.getter(v17);
    if (os_log_type_enabled(v17, v18))
    {
      v19 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v19 = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Missing OwnerCommandService to send unpair!", v19, 2u);
      swift_slowDealloc(v19, -1, -1);
    }
    v20 = v0[41];
    v21 = v0[38];
    v35 = v0[40];
    v36 = v0[39];
    v22 = v0[36];
    v34 = v0[37];
    v23 = v0[33];
    v24 = v0[34];

    v25 = swift_allocObject(&unk_1010A7528, 32, 7);
    *(_QWORD *)(v25 + 16) = v23;
    *(_QWORD *)(v25 + 24) = v24;
    v0[12] = sub_1000A18BC;
    v0[13] = v25;
    v0[8] = _NSConcreteStackBlock;
    v0[9] = 1107296256;
    v0[10] = sub_100016FB8;
    v0[11] = &unk_1010A7540;
    v26 = _Block_copy(v0 + 8);
    v27 = swift_retain();
    static DispatchQoS.unspecified.getter(v27);
    v0[27] = _swiftEmptyArrayStorage;
    v28 = sub_100006C64((unint64_t *)&qword_1010F0E50, 255, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v29 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v30 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
    dispatch thunk of SetAlgebra.init<A>(_:)(v0 + 27, v29, v30, v22, v28);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v20, v21, v26);
    _Block_release(v26);
    (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v21, v22);
    (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v20, v36);
    swift_release();
    v31 = v0[45];
    v32 = v0[41];
    v33 = v0[38];
    swift_task_dealloc(v0[46]);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    return ((uint64_t (*)(void))v0[1])();
  }
}

uint64_t sub_100A44A1C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 408);
  *(_QWORD *)(*(_QWORD *)v1 + 416) = v0;
  swift_task_dealloc(v2);
  if (v0)
  {
    v3 = sub_100A44C60;
  }
  else
  {
    swift_release();
    v3 = sub_100A44A88;
  }
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_100A44A88()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v1 = v0[41];
  v17 = v0[40];
  v2 = v0[38];
  v18 = v0[39];
  v3 = v0[36];
  v16 = v0[37];
  v5 = v0[33];
  v4 = v0[34];
  v6 = swift_allocObject(&unk_1010A75A0, 32, 7);
  *(_QWORD *)(v6 + 16) = v5;
  *(_QWORD *)(v6 + 24) = v4;
  v0[6] = sub_10001D858;
  v0[7] = v6;
  v0[2] = _NSConcreteStackBlock;
  v0[3] = 1107296256;
  v0[4] = sub_100016FB8;
  v0[5] = &unk_1010A75B8;
  v7 = _Block_copy(v0 + 2);
  v8 = swift_retain();
  static DispatchQoS.unspecified.getter(v8);
  v0[28] = _swiftEmptyArrayStorage;
  v9 = sub_100006C64((unint64_t *)&qword_1010F0E50, 255, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v10 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v11 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(v0 + 28, v10, v11, v3, v9);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v1, v2, v7);
  _Block_release(v7);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v2, v3);
  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v1, v18);
  swift_release();
  v12 = v0[45];
  v13 = v0[41];
  v14 = v0[38];
  swift_task_dealloc(v0[46]);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  return ((uint64_t (*)(void))v0[1])();
}

uint64_t sub_100A44C60()
{
  _QWORD *v0;
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t *v37;
  NSObject *log;
  os_log_t loga;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  swift_release();
  if (qword_1010EA318 != -1)
    swift_once(&qword_1010EA318, sub_100B5E330);
  v1 = v0[52];
  v2 = (void (*)(uint64_t, uint64_t, uint64_t))v0[49];
  v3 = v0[45];
  v4 = v0[42];
  v5 = v0[35];
  v6 = type metadata accessor for Logger(0);
  sub_10001A9E8(v6, (uint64_t)qword_1011B7DF8);
  v2(v3, v5, v4);
  swift_errorRetain(v1);
  v7 = swift_errorRetain(v1);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter(v8);
  v10 = os_log_type_enabled(v8, v9);
  v11 = v0[52];
  v12 = v0[45];
  v14 = v0[42];
  v13 = v0[43];
  if (v10)
  {
    log = v8;
    v15 = swift_slowAlloc(32, -1);
    v37 = (uint64_t *)swift_slowAlloc(8, -1);
    v40 = swift_slowAlloc(32, -1);
    v42 = v40;
    *(_DWORD *)v15 = 141558531;
    v0[29] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 29, v0 + 30, v15 + 4, v15 + 12);
    *(_WORD *)(v15 + 12) = 2081;
    v16 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v17 = dispatch thunk of CustomStringConvertible.description.getter(v14, v16);
    v0[30] = sub_100016940(v17, v18, &v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 30, v0 + 31, v15 + 14, v15 + 22);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v14);
    *(_WORD *)(v15 + 22) = 2114;
    swift_errorRetain(v11);
    v19 = _swift_stdlib_bridgeErrorToNSError(v11);
    v0[31] = v19;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 31, v0 + 32, v15 + 24, v15 + 32);
    *v37 = v19;
    swift_errorRelease(v11);
    swift_errorRelease(v11);
    _os_log_impl((void *)&_mh_execute_header, log, v9, "RX Unpaired %{private,mask.hash}s failed with error %{public}@", (uint8_t *)v15, 0x20u);
    v20 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v37, 1, v20);
    swift_slowDealloc(v37, -1, -1);
    swift_arrayDestroy(v40, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v40, -1, -1);
    swift_slowDealloc(v15, -1, -1);

    swift_errorRelease(v11);
  }
  else
  {
    swift_errorRelease(v0[52]);
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v14);
    swift_errorRelease(v11);
    swift_errorRelease(v11);

  }
  v21 = v0[41];
  loga = (os_log_t)v0[40];
  v22 = v0[38];
  v41 = v0[39];
  v23 = v0[36];
  v36 = v0[37];
  v25 = v0[33];
  v24 = v0[34];
  v26 = swift_allocObject(&unk_1010A75A0, 32, 7);
  *(_QWORD *)(v26 + 16) = v25;
  *(_QWORD *)(v26 + 24) = v24;
  v0[6] = sub_10001D858;
  v0[7] = v26;
  v0[2] = _NSConcreteStackBlock;
  v0[3] = 1107296256;
  v0[4] = sub_100016FB8;
  v0[5] = &unk_1010A75B8;
  v27 = _Block_copy(v0 + 2);
  v28 = swift_retain();
  static DispatchQoS.unspecified.getter(v28);
  v0[28] = _swiftEmptyArrayStorage;
  v29 = sub_100006C64((unint64_t *)&qword_1010F0E50, 255, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v30 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v31 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(v0 + 28, v30, v31, v23, v29);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v21, v22, v27);
  _Block_release(v27);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v22, v23);
  ((void (*)(uint64_t, uint64_t))loga[1].isa)(v21, v41);
  swift_release();
  v32 = v0[45];
  v33 = v0[41];
  v34 = v0[38];
  swift_task_dealloc(v0[46]);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  return ((uint64_t (*)(void))v0[1])();
}

uint64_t sub_100A450E8()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;

  if (qword_1010EA318 != -1)
    swift_once(&qword_1010EA318, sub_100B5E330);
  v0 = type metadata accessor for Logger(0);
  v1 = sub_10001A9E8(v0, (uint64_t)qword_1011B7DF8);
  v2 = Logger.logObject.getter(v1);
  v3 = static os_log_type_t.default.getter(v2);
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "RX Unpair failed. Retrying...", v4, 2u);
    swift_slowDealloc(v4, -1, -1);
  }

  return 1;
}

uint64_t sub_100A451B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3[4] = a2;
  v3[5] = a3;
  v4 = type metadata accessor for UUID(0);
  v3[6] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[7] = v5;
  v3[8] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100A45218, 0, 0);
}

uint64_t sub_100A45218()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t **v6;

  if (qword_1010EA318 != -1)
    swift_once(&qword_1010EA318, sub_100B5E330);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_10001A9E8(v1, (uint64_t)qword_1011B7DF8);
  v0[9] = v2;
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Trying RX Unpair", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }

  v6 = (uint64_t **)swift_task_alloc(dword_10111F184);
  v0[10] = (uint64_t)v6;
  *v6 = v0;
  v6[1] = (uint64_t *)sub_100A45320;
  return sub_100D5055C(v0[5], 0);
}

uint64_t sub_100A45320()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 80);
  v4 = *v1;
  swift_task_dealloc(v3);
  if (!v0)
    return swift_task_switch(sub_100A45390, 0, 0);
  swift_task_dealloc(*(_QWORD *)(v2 + 64));
  return (*(uint64_t (**)(void))(v4 + 8))();
}

uint64_t sub_100A45390()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;
  uint64_t v13;

  v1 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 56) + 16))(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48));
  v2 = Logger.logObject.getter(v1);
  v3 = static os_log_type_t.default.getter(v2);
  if (os_log_type_enabled(v2, v3))
  {
    v4 = *(_QWORD *)(v0 + 64);
    v12 = *(_QWORD *)(v0 + 56);
    v5 = *(_QWORD *)(v0 + 48);
    v6 = swift_slowAlloc(22, -1);
    v7 = swift_slowAlloc(32, -1);
    *(_QWORD *)(v0 + 16) = 1752392040;
    v13 = v7;
    *(_DWORD *)v6 = 141558275;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v6 + 4, v6 + 12);
    *(_WORD *)(v6 + 12) = 2081;
    v8 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v9 = dispatch thunk of CustomStringConvertible.description.getter(v5, v8);
    *(_QWORD *)(v0 + 24) = sub_100016940(v9, v10, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v6 + 14, v6 + 22);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v4, v5);
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Successfully sent RX Unpair to %{private,mask.hash}s", (uint8_t *)v6, 0x16u);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 56) + 8))(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 48));
  }

  swift_task_dealloc(*(_QWORD *)(v0 + 64));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100A45570(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  void *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35[2];
  uint64_t v36;

  v2 = v1;
  v4 = *v1;
  v5 = type metadata accessor for OwnedBeaconGroup(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v33 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A9A8((uint64_t *)&unk_1010FF7F0);
  __chkstk_darwin(v8);
  v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchPredicate(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (uint64_t *)((char *)&v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v15 = (void *)v2[2];
  *v14 = v15;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v12 + 104))(v14, enum case for DispatchPredicate.onQueue(_:), v11);
  v16 = v15;
  LOBYTE(v15) = _dispatchPreconditionTest(_:)(v14);
  (*(void (**)(_QWORD *, uint64_t))(v12 + 8))(v14, v11);
  if ((v15 & 1) == 0)
  {
    __break(1u);
LABEL_11:
    swift_once(&qword_1010EA318, sub_100B5E330);
    goto LABEL_5;
  }
  v36 = 0;
  sub_10036AC6C();
  v18 = v17;
  __chkstk_darwin(v17);
  *(&v32 - 4) = (uint64_t)v2;
  *(&v32 - 3) = (uint64_t)&v36;
  *(&v32 - 2) = a1;
  *(&v32 - 1) = v4;
  sub_1003F08EC((void (*)(char *))sub_100A74988, (uint64_t)(&v32 - 6), v18);
  swift_bridgeObjectRelease();
  sub_10081EDA8(a1 + *(int *)(v5 + 24), (uint64_t)v10);
  LODWORD(v18) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 48))(v10, 1, v5);
  sub_100004048((uint64_t)v10, (uint64_t *)&unk_1010FF7F0);
  if ((_DWORD)v18 == 1)
    return v36;
  if (qword_1010EA318 != -1)
    goto LABEL_11;
LABEL_5:
  v20 = type metadata accessor for Logger(0);
  sub_10001A9E8(v20, (uint64_t)qword_1011B7DF8);
  v21 = v33;
  v22 = sub_10005972C(a1, v33, type metadata accessor for OwnedBeaconGroup);
  v23 = Logger.logObject.getter(v22);
  v24 = static os_log_type_t.default.getter(v23);
  if (os_log_type_enabled(v23, v24))
  {
    v25 = swift_slowAlloc(22, -1);
    v26 = swift_slowAlloc(32, -1);
    *(_DWORD *)v25 = 141558275;
    v34 = 1752392040;
    v35[0] = v26;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, v35, v25 + 4, v25 + 12);
    *(_WORD *)(v25 + 12) = 2081;
    v32 = v25 + 14;
    v27 = type metadata accessor for UUID(0);
    v28 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v29 = dispatch thunk of CustomStringConvertible.description.getter(v27, v28);
    v34 = sub_100016940(v29, v30, v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, v35, v32, v25 + 22);
    swift_bridgeObjectRelease();
    sub_1000126B0(v21, type metadata accessor for OwnedBeaconGroup);
    _os_log_impl((void *)&_mh_execute_header, v23, v24, "Group %{private,mask.hash}s still exists. Need to clean up", (uint8_t *)v25, 0x16u);
    swift_arrayDestroy(v26, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v26, -1, -1);
    swift_slowDealloc(v25, -1, -1);
  }
  else
  {
    sub_1000126B0(v21, type metadata accessor for OwnedBeaconGroup);
  }

  v19 = sub_100A3E400(a1);
  swift_errorRelease(v36);
  return v19;
}

void sub_100A45950(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  void (*v26)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  unsigned int (*v29)(char *, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  NSObject *v59;
  os_log_type_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  _QWORD v70[2];
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;

  v82 = a2;
  v78 = a5;
  v73 = a3;
  v74 = a4;
  v83 = (char *)a1;
  v5 = type metadata accessor for OwnedBeaconGroup(0);
  v75 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v76 = v6;
  v77 = (uint64_t)v70 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  v80 = v7;
  v81 = v8;
  __chkstk_darwin(v7);
  v79 = (char *)v70 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10001A9A8((uint64_t *)&unk_1010F47C0);
  __chkstk_darwin(v10);
  v12 = (char *)v70 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for OwnedBeaconRecord(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(_QWORD *)(v14 + 64);
  v16 = __chkstk_darwin(v13);
  v71 = (uint64_t)v70 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v16);
  v72 = (uint64_t)v70 - v18;
  __chkstk_darwin(v17);
  v20 = (char *)v70 - v19;
  v21 = type metadata accessor for AnalyticsEvent(0);
  v22 = (char *)swift_allocObject(v21, *(unsigned int *)(v21 + 48), *(unsigned __int16 *)(v21 + 52));
  swift_defaultActor_initialize(v22);
  v23 = sub_1006B8B38((uint64_t)_swiftEmptyArrayStorage);
  *((_QWORD *)v22 + 14) = v23;
  UUID.init()(v23);
  v24 = &v22[OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_startTime];
  v25 = type metadata accessor for DispatchTime(0);
  v26 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56);
  v26(v24, 1, 1, v25);
  v26(&v22[OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_endTime], 1, 1, v25);
  *((_QWORD *)v22 + 15) = 0xD00000000000002ELL;
  *((_QWORD *)v22 + 16) = 0x8000000100EED120;
  v27 = type metadata accessor for Transaction(0);
  swift_retain();
  static Transaction.asyncTask(name:block:)("UnpairAirPodsAnalytics", 22, 2, &unk_101110FF8, v22);
  v84 = v22;
  swift_release();
  v28 = (uint64_t)v83;
  sub_10080B950((uint64_t)v83, (uint64_t)v12);
  v82 = v14;
  v29 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48);
  v70[1] = v13;
  if (v29(v12, 1, v13) == 1)
  {
    sub_100004048((uint64_t)v12, (uint64_t *)&unk_1010F47C0);
    if (qword_1010EA318 != -1)
      swift_once(&qword_1010EA318, sub_100B5E330);
    v30 = type metadata accessor for Logger(0);
    sub_10001A9E8(v30, (uint64_t)qword_1011B7DF8);
    v32 = v80;
    v31 = v81;
    v33 = v79;
    v34 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v81 + 16))(v79, v28, v80);
    v35 = Logger.logObject.getter(v34);
    v36 = static os_log_type_t.error.getter(v35);
    if (os_log_type_enabled(v35, v36))
    {
      v37 = swift_slowAlloc(22, -1);
      v38 = swift_slowAlloc(32, -1);
      v87 = v38;
      *(_DWORD *)v37 = 141558275;
      v85 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v85, &v86, v37 + 4, v37 + 12);
      *(_WORD *)(v37 + 12) = 2081;
      v39 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v40 = dispatch thunk of CustomStringConvertible.description.getter(v32, v39);
      v85 = sub_100016940(v40, v41, &v87);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v85, &v86, v37 + 14, v37 + 22);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v81 + 8))(v33, v32);
      _os_log_impl((void *)&_mh_execute_header, v35, v36, "Missing beacon record for %{private,mask.hash}s", (uint8_t *)v37, 0x16u);
      swift_arrayDestroy(v38, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v38, -1, -1);
      swift_slowDealloc(v37, -1, -1);
      swift_release();
    }
    else
    {
      swift_release();
      (*(void (**)(char *, uint64_t))(v31 + 8))(v33, v32);
    }

  }
  else
  {
    v81 = v27;
    sub_1000126EC((uint64_t)v12, (uint64_t)v20, type metadata accessor for OwnedBeaconRecord);
    v42 = sub_1009FCEE0((uint64_t)v20, 1, 0);
    v43 = v42;
    v44 = v73;
    if (!v42)
    {
      v43 = *v73;
      swift_errorRetain(*v73);
    }
    v45 = *v44;
    *v44 = v43;
    swift_errorRetain(v42);
    swift_errorRelease(v45);
    v46 = v72;
    sub_10005972C((uint64_t)v20, v72, type metadata accessor for OwnedBeaconRecord);
    v47 = v77;
    sub_10005972C(v74, v77, type metadata accessor for OwnedBeaconGroup);
    v48 = *(unsigned __int8 *)(v82 + 80);
    v83 = v20;
    v49 = (v48 + 24) & ~v48;
    v50 = (v15 + v49 + 7) & 0xFFFFFFFFFFFFFFF8;
    v51 = *(unsigned __int8 *)(v75 + 80);
    v52 = (v51 + v50 + 8) & ~v51;
    v53 = (v76 + v52 + 7) & 0xFFFFFFFFFFFFFFF8;
    v54 = swift_allocObject(&unk_1010A7410, v53 + 8, v48 | v51 | 7);
    *(_QWORD *)(v54 + 16) = v84;
    sub_1000126EC(v46, v54 + v49, type metadata accessor for OwnedBeaconRecord);
    *(_QWORD *)(v54 + v50) = v42;
    sub_1000126EC(v47, v54 + v52, type metadata accessor for OwnedBeaconGroup);
    *(_QWORD *)(v54 + v53) = v78;
    swift_retain();
    swift_errorRetain(v42);
    static Transaction.asyncTask(name:block:)("UnpairAirPodsAnalytics", 22, 2, &unk_101111008, v54);
    swift_release();
    if (v42)
    {
      v55 = (uint64_t)v83;
      swift_errorRetain(v42);
      if (qword_1010EA318 != -1)
        swift_once(&qword_1010EA318, sub_100B5E330);
      v56 = type metadata accessor for Logger(0);
      sub_10001A9E8(v56, (uint64_t)qword_1011B7DF8);
      v57 = v71;
      sub_10005972C(v55, v71, type metadata accessor for OwnedBeaconRecord);
      swift_errorRetain(v42);
      v58 = swift_errorRetain(v42);
      v59 = Logger.logObject.getter(v58);
      v60 = static os_log_type_t.error.getter(v59);
      if (os_log_type_enabled(v59, v60))
      {
        v61 = swift_slowAlloc(32, -1);
        v62 = swift_slowAlloc(64, -1);
        v87 = v62;
        *(_DWORD *)v61 = 141558531;
        v85 = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v85, &v86, v61 + 4, v61 + 12);
        *(_WORD *)(v61 + 12) = 2081;
        v63 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v64 = dispatch thunk of CustomStringConvertible.description.getter(v80, v63);
        v85 = sub_100016940(v64, v65, &v87);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v85, &v86, v61 + 14, v61 + 22);
        swift_bridgeObjectRelease();
        sub_1000126B0(v57, type metadata accessor for OwnedBeaconRecord);
        *(_WORD *)(v61 + 22) = 2082;
        v85 = v42;
        swift_errorRetain(v42);
        v66 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
        v67 = String.init<A>(describing:)(&v85, v66);
        v85 = sub_100016940(v67, v68, &v87);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v85, &v86, v61 + 24, v61 + 32);
        swift_bridgeObjectRelease();
        swift_errorRelease(v42);
        swift_errorRelease(v42);
        _os_log_impl((void *)&_mh_execute_header, v59, v60, "Failed to remove %{private,mask.hash}s due to %{public}s", (uint8_t *)v61, 0x20u);
        swift_arrayDestroy(v62, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v62, -1, -1);
        swift_slowDealloc(v61, -1, -1);

        swift_errorRelease(v42);
        swift_errorRelease(v42);
        swift_release();
        v69 = (uint64_t)v83;
      }
      else
      {

        swift_errorRelease(v42);
        swift_errorRelease(v42);
        sub_1000126B0(v57, type metadata accessor for OwnedBeaconRecord);
        swift_errorRelease(v42);
        swift_errorRelease(v42);
        swift_release();
        v69 = v55;
      }
      sub_1000126B0(v69, type metadata accessor for OwnedBeaconRecord);
    }
    else
    {
      sub_1000126B0((uint64_t)v83, type metadata accessor for OwnedBeaconRecord);
      swift_release();
    }
  }
}

uint64_t sub_100A4621C(uint64_t a1)
{
  _QWORD *v1;
  unint64_t v3;

  v1[5] = a1;
  v3 = (*(_QWORD *)(*(_QWORD *)(sub_10001A9A8(&qword_1010EBE20) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[6] = swift_task_alloc(v3);
  v1[7] = swift_task_alloc(v3);
  return swift_task_switch(sub_100A75CD0, a1, 0);
}

uint64_t sub_100A4628C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;

  v5[5] = a4;
  v5[6] = a5;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  return swift_task_switch(sub_100A462AC, 0, 0);
}

uint64_t sub_100A462AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;

  v2 = *(_QWORD *)(v0 + 24);
  v1 = *(_QWORD *)(v0 + 32);
  v3 = *(_QWORD *)(v0 + 16);
  v4 = swift_task_alloc(48);
  *(_QWORD *)(v0 + 56) = v4;
  v5 = *(_OWORD *)(v0 + 40);
  *(_QWORD *)(v4 + 16) = v2;
  *(_QWORD *)(v4 + 24) = v1;
  *(_OWORD *)(v4 + 32) = v5;
  return swift_task_switch(sub_100A46308, v3, 0);
}

uint64_t sub_100A46308()
{
  uint64_t v0;

  sub_100CCC4A0((uint64_t (*)(uint64_t))sub_100A74E2C);
  swift_task_dealloc(*(_QWORD *)(v0 + 56));
  return swift_task_switch(sub_100A46388, 0, 0);
}

uint64_t sub_100A46388()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t **v3;

  v1 = type metadata accessor for AnalyticsPublisher();
  v2 = swift_allocObject(v1, 112, 15);
  v0[8] = v2;
  swift_defaultActor_initialize(v2);
  v3 = (uint64_t **)swift_task_alloc(dword_10111D22C);
  v0[9] = (uint64_t)v3;
  *v3 = v0;
  v3[1] = (uint64_t *)sub_100A463F4;
  return sub_100CD63AC(v0[2]);
}

uint64_t sub_100A463F4()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v3;

  v1 = *(_QWORD *)(*v0 + 64);
  v3 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 72));
  swift_release(v1);
  return (*(uint64_t (**)(void))(v3 + 8))();
}

unint64_t sub_100A46444(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t inited;
  uint64_t v7;
  uint64_t v8;
  NSString v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t result;
  _QWORD v14[3];
  _BYTE v15[8];
  _QWORD v16[3];
  _BYTE v17[8];
  _BYTE v18[192];
  _BYTE v19[128];

  sub_1009A2B44();
  if (a2)
  {
    v5 = sub_10001A9A8(&qword_1010EEBD0);
    inited = swift_initStackObject(v5, v18);
    *(_OWORD *)(inited + 16) = xmmword_100E27910;
    *(_QWORD *)(inited + 32) = 0x6563637553736177;
    *(_QWORD *)(inited + 40) = 0xEA00000000007373;
    *(_QWORD *)(inited + 48) = 0;
    *(_BYTE *)(inited + 56) = 1;
    *(_QWORD *)(inited + 64) = 0x6D6F44726F727265;
    *(_QWORD *)(inited + 72) = 0xEB000000006E6961;
    swift_getErrorValue(a2, v17, v16);
    v7 = v16[1];
    v8 = v16[2];
    swift_errorRetain(a2);
    Error.domain.getter(v7, v8);
    v9 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    *(_QWORD *)(inited + 80) = v9;
    *(_BYTE *)(inited + 88) = 0;
    *(_QWORD *)(inited + 96) = 0x646F43726F727265;
    *(_QWORD *)(inited + 104) = 0xE900000000000065;
    swift_getErrorValue(a2, v15, v14);
    Error.code.getter(v14[1], v14[2]);
    *(NSNumber *)(inited + 112) = Int._bridgeToObjectiveC()();
    *(_BYTE *)(inited + 120) = 0;
    *(_QWORD *)(inited + 128) = 0x626D754E74726170;
    *(_QWORD *)(inited + 136) = 0xEA00000000007265;
    *(NSNumber *)(inited + 144) = UInt8._bridgeToObjectiveC()();
    *(_BYTE *)(inited + 152) = 0;
    strcpy((char *)(inited + 160), "numberOfParts");
    *(_WORD *)(inited + 174) = -4864;
    if (*(_QWORD *)(*(_QWORD *)(a3 + *(int *)(type metadata accessor for OwnedBeaconGroup(0) + 40)) + 16) <= 0xFFuLL)
    {
      *(NSNumber *)(inited + 176) = UInt8._bridgeToObjectiveC()();
      *(_BYTE *)(inited + 184) = 0;
      v10 = sub_1006B9444(inited);
      swift_errorRelease(a2);
      return v10;
    }
  }
  else
  {
    v11 = sub_10001A9A8(&qword_1010EEBD0);
    v12 = swift_initStackObject(v11, v19);
    *(_OWORD *)(v12 + 16) = xmmword_100E221E0;
    *(_QWORD *)(v12 + 32) = 0x6563637553736177;
    *(_QWORD *)(v12 + 40) = 0xEA00000000007373;
    *(_QWORD *)(v12 + 48) = 1;
    *(_BYTE *)(v12 + 56) = 1;
    *(_QWORD *)(v12 + 64) = 0x626D754E74726170;
    *(_QWORD *)(v12 + 72) = 0xEA00000000007265;
    *(NSNumber *)(v12 + 80) = UInt8._bridgeToObjectiveC()();
    *(_BYTE *)(v12 + 88) = 0;
    strcpy((char *)(v12 + 96), "numberOfParts");
    *(_WORD *)(v12 + 110) = -4864;
    if (*(_QWORD *)(*(_QWORD *)(a3 + *(int *)(type metadata accessor for OwnedBeaconGroup(0) + 40)) + 16) < 0x100uLL)
    {
      *(NSNumber *)(v12 + 112) = UInt8._bridgeToObjectiveC()();
      *(_BYTE *)(v12 + 120) = 0;
      return sub_1006B9444(v12);
    }
  }
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 3455, 0);
  __break(1u);
  return result;
}

void sub_100A46734(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  void *v8;
  id v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v23[3];
  __int128 v24[2];
  __int128 v25;
  ValueMetadata *v26;
  unint64_t v27;

  v2 = v1;
  v4 = type metadata accessor for DispatchPredicate(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (uint64_t *)((char *)&v23[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = *(void **)(v2 + 16);
  *v7 = v8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v5 + 104))(v7, enum case for DispatchPredicate.onQueue(_:), v4);
  v9 = v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)(v7);
  (*(void (**)(_QWORD *, uint64_t))(v5 + 8))(v7, v4);
  if ((v8 & 1) != 0)
  {
    v10 = a1 + *(int *)(type metadata accessor for BluetoothManagerDevice(0) + 36);
    v11 = *(_QWORD *)(v10 + 8);
    if (v11 >> 60 != 15)
    {
      v12 = *(_QWORD *)v10;
      sub_10001BBBC(*(_QWORD *)v10, *(_QWORD *)(v10 + 8));
      if (sub_100A087C0(v12, v11))
      {
        v26 = &type metadata for AirpodsPairingSpec1_1;
        v27 = sub_100A74944();
        sub_10001EF3C(v12, v11);
        goto LABEL_7;
      }
      sub_10001EF3C(v12, v11);
    }
    v26 = &type metadata for AirpodsPairingSpec1_0;
    v27 = sub_100A74900();
LABEL_7:
    sub_10000F9FC(&v25, (uint64_t)v24);
    swift_beginAccess(v2 + 176, v23, 33, 0);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v2 + 176));
    sub_10000F9FC(v24, v2 + 176);
    swift_endAccess(v23);
    if (qword_1010EA318 == -1)
      goto LABEL_8;
    goto LABEL_12;
  }
  __break(1u);
LABEL_12:
  swift_once(&qword_1010EA318, sub_100B5E330);
LABEL_8:
  v13 = type metadata accessor for Logger(0);
  sub_10001A9E8(v13, (uint64_t)qword_1011B7DF8);
  v14 = swift_retain_n(v2, 2);
  v15 = Logger.logObject.getter(v14);
  v16 = static os_log_type_t.default.getter(v15);
  if (os_log_type_enabled(v15, v16))
  {
    v17 = (uint8_t *)swift_slowAlloc(12, -1);
    v18 = swift_slowAlloc(32, -1);
    v23[0] = v18;
    *(_DWORD *)v17 = 136446210;
    swift_beginAccess(v2 + 176, v24, 0, 0);
    sub_100030784(v2 + 176, (uint64_t)&v25);
    v19 = sub_10001A9A8(&qword_101110FE0);
    v20 = String.init<A>(describing:)(&v25, v19);
    *(_QWORD *)&v25 = sub_100016940(v20, v21, v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, (char *)&v25 + 8, v17 + 4, v17 + 12);
    swift_release_n(v2, 2);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "Using PairingSpec: %{public}s", v17, 0xCu);
    swift_arrayDestroy(v18, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v18, -1, -1);
    swift_slowDealloc(v17, -1, -1);

  }
  else
  {

    swift_release_n(v2, 2);
  }
}

uint64_t sub_100A46A58(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  void *v8;
  id v9;
  uint64_t result;
  uint64_t v11;
  _BYTE v12[16];

  v3 = *v1;
  v4 = type metadata accessor for DispatchPredicate(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = &v12[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = (void *)v1[2];
  *v7 = v8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v5 + 104))(v7, enum case for DispatchPredicate.onQueue(_:), v4);
  v9 = v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)(v7);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v5 + 8))(v7, v4);
  if ((v8 & 1) != 0)
  {
    v11 = type metadata accessor for Transaction(0);
    __chkstk_darwin(v11);
    *(_QWORD *)&v12[-32] = v1;
    *(_QWORD *)&v12[-24] = a1;
    *(_QWORD *)&v12[-16] = v3;
    return static Transaction.named<A>(_:with:)("AirPodsPairingManager.checkPairingEligibility", 45, 2, sub_100A75CBC, &v12[-48]);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100A46B84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  void (*v20)(uint64_t, unint64_t, uint64_t, uint64_t);
  void *v21;
  id v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t, uint64_t, uint64_t);
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  id v72[3];
  uint64_t v73;
  uint64_t v74;
  char v75;
  char v76[24];
  uint64_t v77;
  uint64_t v78;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  id v81;

  v71 = a3;
  v68 = a1;
  v4 = sub_10001A9A8(&qword_1010EECC8);
  __chkstk_darwin(v4);
  v6 = (char *)&v56 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v58 = sub_10001A9A8(&qword_101110F30);
  v57 = *(_QWORD *)(v58 - 8);
  __chkstk_darwin(v58);
  v70 = (char *)&v56 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v61 = sub_10001A9A8(&qword_101110F38);
  v60 = *(_QWORD *)(v61 - 8);
  __chkstk_darwin(v61);
  v59 = (char *)&v56 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v64 = sub_10001A9A8(&qword_101110F40);
  v63 = *(_QWORD *)(v64 - 8);
  __chkstk_darwin(v64);
  v62 = (char *)&v56 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10001A9A8(&qword_101110F48);
  v66 = *(_QWORD *)(v10 - 8);
  v67 = v10;
  __chkstk_darwin(v10);
  v65 = (char *)&v56 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess(a2 + 176, v76, 0, 0);
  sub_100030784(a2 + 176, (uint64_t)v72);
  v12 = v73;
  v13 = v74;
  sub_10001AA44(v72, v73);
  v14 = type metadata accessor for __DataStorage(0);
  swift_allocObject(v14, *(unsigned int *)(v14 + 48), *(unsigned __int16 *)(v14 + 52));
  v15 = __DataStorage.init(length:)(60);
  v77 = 0x3C00000000;
  v78 = v15;
  sub_10051ED28((int *)&v77, 0);
  sub_100C4DABC(v77, v78 | 0x4000000000000000);
  v17 = v16;
  v19 = v18;
  v20 = *(void (**)(uint64_t, unint64_t, uint64_t, uint64_t))(v13 + 64);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v13, v12, &unk_100F32BA8, &unk_100F32BB8);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v13, v12, AssociatedTypeWitness, &unk_100F32BA8, &unk_100F32BB0);
  sub_100018F08(&v77);
  v20(v17, v19, v12, v13);
  sub_10001BC14(v17, v19);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v72);
  sub_100030784((uint64_t)&v77, (uint64_t)v72);
  v75 = 0;
  v21 = (void *)sub_100A4CE80((uint64_t)v72, v71);
  sub_100004048((uint64_t)v72, &qword_101110ED0);
  v72[0] = v21;
  v69 = a2;
  v81 = *(id *)(a2 + 16);
  v22 = v81;
  v23 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
  v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56);
  v24(v6, 1, 1, v23);
  v25 = v22;
  v26 = sub_10001A9A8(&qword_101110ED8);
  v27 = sub_10000F4A0(0, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr);
  v28 = sub_1000193A4(&qword_101110F50, &qword_101110ED8, (const char *)&protocol conformance descriptor for Future<A, B>);
  v29 = sub_1001C7EF4();
  Publisher.receive<A>(on:options:)(&v81, v6, v26, v27, v28, v29);
  sub_100004048((uint64_t)v6, &qword_1010EECC8);

  swift_release();
  if (qword_1010EA150 != -1)
    swift_once(&qword_1010EA150, sub_100A3E910);
  v30 = type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride(0);
  v31 = sub_10001A9E8(v30, (uint64_t)qword_101110A58);
  v72[0] = v25;
  v24(v6, 1, 1, v23);
  v32 = sub_1000193A4(&qword_101110F58, &qword_101110F30, (const char *)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  v33 = v25;
  v34 = v59;
  v35 = v31;
  v36 = v58;
  v37 = v32;
  v38 = v70;
  Publisher.timeout<A>(_:scheduler:options:customError:)(v35, v72, v6, sub_1000E2DBC, 0, v58, v27, v37, v29);
  sub_100004048((uint64_t)v6, &qword_1010EECC8);

  (*(void (**)(char *, uint64_t))(v57 + 8))(v38, v36);
  v39 = sub_10001A9A8(&qword_101110ED0);
  v40 = sub_1000193A4(&qword_101110F60, &qword_101110F38, (const char *)&protocol conformance descriptor for Publishers.Timeout<A, B>);
  v41 = v62;
  v42 = v61;
  Publisher.map<A>(_:)(sub_100A4723C, 0, v61, v39, v40);
  (*(void (**)(char *, uint64_t))(v60 + 8))(v34, v42);
  v43 = sub_10001A9A8(&qword_101110F68);
  v44 = sub_1000193A4(&qword_101110F70, &qword_101110F40, (const char *)&protocol conformance descriptor for Publishers.Map<A, B>);
  v45 = sub_1000193A4(&qword_101110F78, &qword_101110F68, (const char *)&protocol conformance descriptor for Just<A>);
  v46 = v65;
  v47 = v64;
  Publisher.catch<A>(_:)(sub_100A47264, 0, v64, v43, v44, v45);
  (*(void (**)(char *, uint64_t))(v63 + 8))(v41, v47);
  v48 = swift_allocObject(&unk_1010A3220, 24, 7);
  v49 = v69;
  swift_weakInit(v48 + 16, v69);
  v50 = (_QWORD *)swift_allocObject(&unk_1010A7370, 40, 7);
  v51 = v68;
  v50[2] = v48;
  v50[3] = v51;
  v50[4] = v71;
  v52 = sub_1000193A4(&qword_101110F80, &qword_101110F48, (const char *)&protocol conformance descriptor for Publishers.Catch<A, B>);
  swift_retain();
  swift_retain();
  v53 = v67;
  v54 = Publisher<>.sink(receiveValue:)(sub_100A74828, v50, v67, v52);
  swift_release();
  (*(void (**)(char *, uint64_t))(v66 + 8))(v46, v53);
  *(_QWORD *)(v49 + 104) = v54;
  swift_release();
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v77);
}

uint64_t sub_100A4723C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;

  result = sub_100030784(a1, a2);
  *(_BYTE *)(a2 + 41) = 0;
  return result;
}

uint64_t sub_100A47268(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[6];
  _QWORD v28[6];
  _BYTE v29[48];
  _BYTE v30[24];

  v6 = a2 + 16;
  swift_beginAccess(a2 + 16, v30, 0, 0);
  result = swift_weakLoadStrong(v6);
  if (result)
  {
    v8 = result;
    Transaction.capture()();
    sub_10000F9B8(a1, (uint64_t)v29, &qword_101110ED0);
    if ((v29[41] & 1) != 0)
    {
      sub_100059244((uint64_t)v29, (uint64_t)v28);
      if (qword_1010EA318 != -1)
        swift_once(&qword_1010EA318, sub_100B5E330);
      v9 = type metadata accessor for Logger(0);
      sub_10001A9E8(v9, (uint64_t)qword_1011B7DF8);
      v10 = sub_100059280(v28, (uint64_t)v27);
      v11 = Logger.logObject.getter(v10);
      v12 = static os_log_type_t.default.getter(v11);
      if (os_log_type_enabled(v11, v12))
      {
        v13 = (uint8_t *)swift_slowAlloc(12, -1);
        v14 = swift_slowAlloc(32, -1);
        v26 = v14;
        *(_DWORD *)v13 = 136315138;
        sub_100E01294();
        v25 = sub_100016940(v15, v16, &v26);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, &v26, v13 + 4, v13 + 12);
        swift_bridgeObjectRelease();
        sub_1000593D4(v27);
        _os_log_impl((void *)&_mh_execute_header, v11, v12, "Failed to request pairing eligibility data. Error %s", v13, 0xCu);
        swift_arrayDestroy(v14, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v14, -1, -1);
        swift_slowDealloc(v13, -1, -1);
      }
      else
      {
        sub_1000593D4(v27);
      }

      sub_100A4A928(a4, 1);
      v22 = sub_100059390();
      v23 = swift_allocError(&type metadata for CentralManager.Error, v22, 0, 0);
      sub_100059280(v28, v24);
      sub_100A6D3BC(v23);
      swift_release();
      sub_1000593D4(v28);
      return swift_errorRelease(v23);
    }
    else
    {
      if (qword_1010EA318 != -1)
        swift_once(&qword_1010EA318, sub_100B5E330);
      v17 = type metadata accessor for Logger(0);
      v18 = sub_10001A9E8(v17, (uint64_t)qword_1011B7DF8);
      v19 = Logger.logObject.getter(v18);
      v20 = static os_log_type_t.default.getter(v19);
      if (os_log_type_enabled(v19, v20))
      {
        v21 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v21 = 0;
        _os_log_impl((void *)&_mh_execute_header, v19, v20, "Requested pairing eligibility data. Waiting for AirPods to respond.", v21, 2u);
        swift_slowDealloc(v21, -1, -1);
      }

      *(_QWORD *)(v8 + 104) = 0;
      swift_release();
      swift_release();
      return sub_100004048((uint64_t)v29, &qword_101110ED0);
    }
  }
  return result;
}

uint64_t sub_100A4758C(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  void *v10;
  id v11;
  uint64_t result;
  uint64_t v13;
  _BYTE v14[16];

  v5 = *v2;
  v6 = type metadata accessor for DispatchPredicate(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = &v14[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = (void *)v2[2];
  *v9 = v10;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v7 + 104))(v9, enum case for DispatchPredicate.onQueue(_:), v6);
  v11 = v10;
  LOBYTE(v10) = _dispatchPreconditionTest(_:)(v9);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v7 + 8))(v9, v6);
  if ((v10 & 1) != 0)
  {
    v13 = type metadata accessor for Transaction(0);
    __chkstk_darwin(v13);
    *(_QWORD *)&v14[-32] = v2;
    *(_QWORD *)&v14[-24] = a1;
    v14[-16] = a2 & 1;
    *(_QWORD *)&v14[-8] = v5;
    return static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd.AirPodsPairingManager.handleNotify", 64, 2, sub_100A7594C, &v14[-48]);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100A476C4(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  id v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  id v86;
  unint64_t v87;
  void (*v88)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  int v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  id v118;
  id v119;

  v117 = a2;
  v104 = a4;
  v113 = a1;
  v5 = sub_10001A9A8(&qword_1010EECC8);
  __chkstk_darwin(v5);
  v115 = (char *)&v86 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10001A9A8(&qword_1010EED38);
  v99 = *(_QWORD *)(v7 - 8);
  v100 = v7;
  __chkstk_darwin(v7);
  v98 = (char *)&v86 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10001A9A8(&qword_1010EED40);
  v102 = *(_QWORD *)(v9 - 8);
  v103 = v9;
  __chkstk_darwin(v9);
  v101 = (char *)&v86 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10001A9A8(&qword_101110F88);
  v106 = *(_QWORD *)(v11 - 8);
  v107 = v11;
  __chkstk_darwin(v11);
  v105 = (char *)&v86 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v110 = sub_10001A9A8(&qword_101110F90);
  v108 = *(_QWORD *)(v110 - 8);
  __chkstk_darwin(v110);
  v114 = (char *)&v86 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_10001A9A8(&qword_101110F98);
  v111 = *(_QWORD *)(v14 - 8);
  v112 = v14;
  __chkstk_darwin(v14);
  v16 = (char *)&v86 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_10001A9A8(&qword_101110FA0);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v20 = (char *)&v86 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_10001A9A8(&qword_101110FA8);
  v22 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin(v21);
  v24 = (char *)&v86 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = *(_QWORD *)(a3 + 16);
  v26 = sub_10001A9A8((uint64_t *)&unk_1010FB900);
  v109 = a3;
  v27 = v25;
  v28 = v26;
  v29 = v116;
  OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_1000F9DF4, a3, v27, &type metadata for () + 1, v26);
  if (v29)
  {
    swift_errorRelease(v29);
    v30 = 0;
    v31 = v117;
  }
  else
  {
    v91 = v16;
    v92 = v20;
    v94 = v18;
    v93 = v17;
    v95 = 0;
    v96 = v24;
    v97 = v22;
    v116 = v21;
    v31 = v117;
    v118 = *(id *)(v117 + 16);
    v32 = v118;
    v33 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
    v34 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 56);
    v35 = (uint64_t)v115;
    v89 = v33;
    v88 = v34;
    ((void (*)(char *, uint64_t, uint64_t))v34)(v115, 1, 1);
    v36 = sub_10000F4A0(0, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr);
    v37 = sub_1000193A4(&qword_1010FB910, (uint64_t *)&unk_1010FB900, (const char *)&protocol conformance descriptor for AnyPublisher<A, B>);
    v38 = sub_1001C7EF4();
    v86 = v32;
    v39 = v98;
    v90 = v36;
    v87 = v38;
    Publisher.receive<A>(on:options:)(&v118, v35, v28, v36, v37, v38);
    sub_100004048(v35, &qword_1010EECC8);

    swift_release();
    v40 = swift_retain();
    v41 = static Subscribers.Demand.unlimited.getter(v40);
    v42 = sub_10001A9A8(&qword_1010EC530);
    v43 = sub_10001A9A8(&qword_1010EEC28);
    v44 = sub_1000193A4(&qword_1010EED78, &qword_1010EED38, (const char *)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
    v45 = sub_1000193A4(&qword_1010EED80, &qword_1010EEC28, (const char *)&protocol conformance descriptor for Future<A, B>);
    v46 = v100;
    v47 = v101;
    Publisher.flatMap<A, B>(maxPublishers:_:)(v41, sub_100A74834, v31, v100, v42, v43, v44, v45);
    swift_release();
    (*(void (**)(char *, uint64_t))(v99 + 8))(v39, v46);
    v48 = swift_allocObject(&unk_1010A7398, 25, 7);
    *(_QWORD *)(v48 + 16) = v31;
    v104 &= 1u;
    *(_BYTE *)(v48 + 24) = v104;
    swift_retain();
    v49 = sub_10001A9A8(&qword_101110ED0);
    v50 = sub_1000193A4(&qword_1010EED88, &qword_1010EED40, (const char *)&protocol conformance descriptor for Publishers.FlatMap<A, B>);
    v51 = v105;
    v52 = v103;
    v100 = v49;
    Publisher.map<A>(_:)(sub_100A74884, v48, v103, v49, v50);
    swift_release();
    (*(void (**)(char *, uint64_t))(v102 + 8))(v47, v52);
    v53 = swift_allocObject(&unk_1010A73C0, 32, 7);
    v54 = v109;
    *(_QWORD *)(v53 + 16) = v31;
    *(_QWORD *)(v53 + 24) = v54;
    swift_retain();
    v55 = swift_retain();
    v56 = static Subscribers.Demand.unlimited.getter(v55);
    v57 = sub_10001A9A8(&qword_101110F18);
    v58 = sub_10001A9A8(&qword_101110ED8);
    v59 = sub_1000193A4(&qword_101110FB0, &qword_101110F88, (const char *)&protocol conformance descriptor for Publishers.Map<A, B>);
    v60 = sub_1000193A4(&qword_101110F50, &qword_101110ED8, (const char *)&protocol conformance descriptor for Future<A, B>);
    v61 = v107;
    Publisher.flatMap<A, B>(maxPublishers:_:)(v56, sub_100A748B4, v53, v107, v57, v58, v59, v60);
    swift_release();
    (*(void (**)(char *, uint64_t))(v106 + 8))(v51, v61);
    v62 = v54;
    if (qword_1010EA148 != -1)
      swift_once(&qword_1010EA148, sub_100A3E904);
    v63 = type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride(0);
    v64 = sub_10001A9E8(v63, (uint64_t)qword_101110A40);
    v65 = v86;
    v119 = v86;
    v66 = (uint64_t)v115;
    v88(v115, 1, 1, v89);
    v67 = sub_1000193A4(&qword_101110FB8, &qword_101110F90, (const char *)&protocol conformance descriptor for Publishers.FlatMap<A, B>);
    v68 = v65;
    v69 = v91;
    v70 = v64;
    v71 = v110;
    v72 = v114;
    Publisher.timeout<A>(_:scheduler:options:customError:)(v70, &v119, v66, sub_1000FC3D0, 0, v110, v90, v67, v87);
    sub_100004048(v66, &qword_1010EECC8);

    (*(void (**)(char *, uint64_t))(v108 + 8))(v72, v71);
    v73 = sub_1000193A4(&qword_101110FC0, &qword_101110F98, (const char *)&protocol conformance descriptor for Publishers.Timeout<A, B>);
    v74 = v92;
    v75 = v112;
    Publisher.map<A>(_:)(sub_100A75948, 0, v112, v100, v73);
    (*(void (**)(char *, uint64_t))(v111 + 8))(v69, v75);
    v76 = sub_10001A9A8(&qword_101110F68);
    v77 = sub_1000193A4(&qword_101110FC8, &qword_101110FA0, (const char *)&protocol conformance descriptor for Publishers.Map<A, B>);
    v78 = sub_1000193A4(&qword_101110F78, &qword_101110F68, (const char *)&protocol conformance descriptor for Just<A>);
    v79 = v96;
    v80 = v93;
    Publisher.catch<A>(_:)(sub_100A47264, 0, v93, v76, v77, v78);
    (*(void (**)(char *, uint64_t))(v94 + 8))(v74, v80);
    v81 = swift_allocObject(&unk_1010A3220, 24, 7);
    swift_weakInit(v81 + 16, v31);
    v82 = swift_allocObject(&unk_1010A73E8, 41, 7);
    *(_QWORD *)(v82 + 16) = v81;
    *(_QWORD *)(v82 + 24) = v113;
    *(_QWORD *)(v82 + 32) = v62;
    *(_BYTE *)(v82 + 40) = v104;
    v83 = sub_1000193A4(&qword_101110FD0, &qword_101110FA8, (const char *)&protocol conformance descriptor for Publishers.Catch<A, B>);
    swift_retain();
    swift_retain();
    v84 = v116;
    v30 = Publisher<>.sink(receiveValue:)(sub_100A748F0, v82, v116, v83);
    swift_release();
    (*(void (**)(char *, uint64_t))(v97 + 8))(v79, v84);
  }
  *(_QWORD *)(v31 + 96) = v30;
  return swift_release();
}

uint64_t sub_100A47FC8(void (*a1)(_QWORD, _QWORD), uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v8;
  uint64_t result;
  _BYTE v10[24];

  v8 = a2 + 16;
  swift_beginAccess(a2 + 16, v10, 0, 0);
  result = swift_weakLoadStrong(v8);
  if (result)
  {
    Transaction.capture()();
    sub_100A48050(a1, a4, a5 & 1);
    return swift_release();
  }
  return result;
}

_QWORD *sub_100A48050(void (*a1)(_QWORD, _QWORD), uint64_t a2, int a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  void *v43;
  void (*v44)(_QWORD);
  void (*v45)(_QWORD *, uint64_t);
  uint64_t v46;
  uint64_t v47;
  void (*v48)(_QWORD, _QWORD);
  uint64_t v49;
  NSObject *v50;
  os_log_type_t v51;
  _BOOL4 v52;
  uint64_t v53;
  uint8_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint8_t *v60;
  void (*v61)(_QWORD *, uint64_t, uint64_t);
  uint64_t v62;
  NSObject *v63;
  os_log_type_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  NSObject *v74;
  os_log_type_t v75;
  uint8_t *v76;
  Swift::Int v77;
  uint64_t v78;
  BOOL v79;
  uint64_t v80;
  NSObject *v81;
  os_log_type_t v82;
  uint8_t *v83;
  const char *v84;
  uint64_t v85;
  NSObject *v86;
  os_log_type_t v87;
  uint8_t *v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint8_t *v92;
  NSObject *v93;
  os_log_type_t v94;
  uint8_t *v95;
  NSObject *v96;
  os_log_type_t v97;
  uint8_t *v98;
  NSObject *v99;
  os_log_type_t v100;
  uint8_t *v101;
  uint64_t v102;
  uint64_t v103;
  int v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  NSObject *v108;
  os_log_type_t v109;
  uint8_t *v110;
  _QWORD *v111;
  void *v112;
  uint64_t v113;
  id v114;
  uint64_t (*v115)(_QWORD *, uint64_t);
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  id v119;
  char v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  unsigned int (*v124)(char *, uint64_t, uint64_t);
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  NSObject *v128;
  os_log_type_t v129;
  uint8_t *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  NSObject *v142;
  os_log_type_t v143;
  uint8_t *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  int64_t v150;
  int64_t v151;
  unint64_t v152;
  unint64_t i;
  int64_t v154;
  unint64_t v155;
  int64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  void (*v162)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  NSObject *v170;
  os_log_type_t v171;
  uint8_t *v172;
  uint64_t v173;
  void (*v174)(char *, uint64_t, uint64_t);
  char *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v179;
  int v180;
  uint64_t v181;
  uint64_t v182;
  char v183;
  NSObject *v184;
  os_log_type_t v185;
  uint8_t *v186;
  unint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  char *v191;
  uint64_t v192;
  NSObject *v193;
  uint64_t *v194;
  unint64_t v195;
  uint64_t v196;
  unint64_t v197;
  uint64_t v198;
  unint64_t v199;
  unint64_t v200;
  os_log_type_t v201;
  uint8_t *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  NSObject *v206;
  os_log_type_t v207;
  uint8_t *v208;
  char *v209;
  uint64_t v210;
  _QWORD *v211;
  char *v212;
  char *v213;
  char *v214;
  uint64_t (*v215)(_QWORD *, uint64_t);
  id v216;
  _QWORD *v217;
  uint64_t v218;
  uint64_t v219;
  char *v220;
  uint64_t v221;
  NSObject *v222;
  uint64_t v223;
  char *v224;
  uint64_t v225;
  unsigned int v226;
  uint64_t v227;
  uint64_t v228;
  int v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  char *v233;
  uint64_t v234;
  uint64_t v235;
  void (*v236)(_QWORD);
  uint64_t v237;
  uint64_t v238;
  void (*v239)(_QWORD, _QWORD);
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  char v245[8];
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250[2];
  char v251;
  __int128 v252;
  char v253;

  v4 = v3;
  v229 = a3;
  v232 = a2;
  v239 = a1;
  v223 = *v3;
  v5 = type metadata accessor for MultipartAccessoryPairingInfo(0);
  v243 = *(_QWORD *)(v5 - 8);
  v6 = __chkstk_darwin(v5);
  v241 = (uint64_t)&v210 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v240 = (uint64_t)&v210 - v8;
  v9 = sub_10001A9A8(&qword_1010EC008);
  __chkstk_darwin(v9);
  v225 = (uint64_t)&v210 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10001A9A8((uint64_t *)&unk_1010F9890);
  __chkstk_darwin(v11);
  v13 = (char *)&v210 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_10001A9A8(&qword_101110EB8);
  __chkstk_darwin(v14);
  v16 = (char *)&v210 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_10001A9A8((uint64_t *)&unk_1010FF7F0);
  v18 = __chkstk_darwin(v17);
  v228 = (uint64_t)&v210 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __chkstk_darwin(v18);
  v227 = (uint64_t)&v210 - v21;
  __chkstk_darwin(v20);
  v23 = (char *)&v210 - v22;
  v24 = type metadata accessor for OwnedBeaconGroup(0);
  v231 = *(_QWORD *)(v24 - 8);
  v25 = __chkstk_darwin(v24);
  v222 = ((char *)&v210 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0));
  v27 = __chkstk_darwin(v25);
  v219 = (uint64_t)&v210 - v28;
  v29 = __chkstk_darwin(v27);
  v221 = (uint64_t)&v210 - v30;
  __chkstk_darwin(v29);
  v230 = (uint64_t)&v210 - v31;
  v237 = type metadata accessor for MACAddress(0);
  v235 = *(_QWORD *)(v237 - 8);
  v32 = __chkstk_darwin(v237);
  v212 = (char *)&v210 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = __chkstk_darwin(v32);
  v213 = (char *)&v210 - v35;
  v36 = __chkstk_darwin(v34);
  v214 = (char *)&v210 - v37;
  __chkstk_darwin(v36);
  v233 = (char *)&v210 - v38;
  v39 = type metadata accessor for DispatchPredicate(0);
  v40 = *(_QWORD *)(v39 - 8);
  __chkstk_darwin(v39);
  v42 = (uint64_t *)((char *)&v210 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0));
  v43 = (void *)v4[2];
  *v42 = v43;
  v44 = *(void (**)(_QWORD))(v40 + 104);
  v226 = enum case for DispatchPredicate.onQueue(_:);
  v236 = v44;
  v44(v42);
  v216 = v43;
  LOBYTE(v43) = _dispatchPreconditionTest(_:)(v42);
  v45 = *(void (**)(_QWORD *, uint64_t))(v40 + 8);
  v217 = v42;
  v218 = v39;
  v45(v42, v39);
  if ((v43 & 1) != 0)
  {
    v215 = (uint64_t (*)(_QWORD *, uint64_t))v45;
    v242 = v5;
    v234 = v24;
    if (qword_1010EA318 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_1010EA318, sub_100B5E330);
LABEL_3:
  v46 = type metadata accessor for Logger(0);
  v47 = sub_10001A9E8(v46, (uint64_t)qword_1011B7DF8);
  v48 = v239;
  v49 = sub_10000F9B8((uint64_t)v239, (uint64_t)&v252, &qword_101110ED0);
  v50 = Logger.logObject.getter(v49);
  v51 = static os_log_type_t.debug.getter(v50);
  v52 = os_log_type_enabled(v50, v51);
  v238 = v47;
  v224 = v13;
  v220 = v16;
  if (v52)
  {
    v53 = swift_slowAlloc(12, -1);
    v211 = v4;
    v54 = (uint8_t *)v53;
    v55 = swift_slowAlloc(32, -1);
    v250[0] = v55;
    *(_DWORD *)v54 = 136315138;
    sub_10000F9B8((uint64_t)&v252, (uint64_t)&v244, &qword_101110ED0);
    v56 = sub_10001A9A8(&qword_101110ED0);
    v57 = String.init<A>(describing:)(&v244, v56);
    v244 = sub_100016940(v57, v58, v250);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v244, v245, v54 + 4, v54 + 12);
    swift_bridgeObjectRelease();
    sub_100004048((uint64_t)&v252, &qword_101110ED0);
    _os_log_impl((void *)&_mh_execute_header, v50, v51, "handlePublisherUpdate %s", v54, 0xCu);
    swift_arrayDestroy(v55, 1, (char *)&type metadata for Any + 8);
    v59 = v55;
    v48 = v239;
    swift_slowDealloc(v59, -1, -1);
    v60 = v54;
    v4 = v211;
    swift_slowDealloc(v60, -1, -1);
  }
  else
  {
    sub_100004048((uint64_t)&v252, &qword_101110ED0);
  }

  v61 = (void (*)(_QWORD *, uint64_t, uint64_t))v236;
  sub_10000F9B8((uint64_t)v48, (uint64_t)&v252, &qword_101110ED0);
  if ((v253 & 1) == 0)
  {
    sub_10000F9FC(&v252, (uint64_t)&v244);
    v71 = v246;
    v72 = v247;
    sub_10001AA44(&v244, v246);
    v73 = (*(uint64_t (**)(uint64_t, uint64_t))(v72 + 320))(v71, v72);
    switch((char)v73)
    {
      case 0:
        v74 = Logger.logObject.getter(v73);
        v75 = static os_log_type_t.default.getter(v74);
        if (os_log_type_enabled(v74, v75))
        {
          v76 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v76 = 0;
          _os_log_impl((void *)&_mh_execute_header, v74, v75, "Requested beacon group data.", v76, 2u);
          swift_slowDealloc(v76, -1, -1);
        }

        *(_BYTE *)(v4[10] + OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingState) = 1;
        return (_QWORD *)_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v244);
      case 2:
        v93 = Logger.logObject.getter(v73);
        v94 = static os_log_type_t.default.getter(v93);
        if (os_log_type_enabled(v93, v94))
        {
          v95 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v95 = 0;
          _os_log_impl((void *)&_mh_execute_header, v93, v94, "Sent initiate pairing.", v95, 2u);
          swift_slowDealloc(v95, -1, -1);
        }

        *(_BYTE *)(v4[10] + OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingState) = 0;
        return (_QWORD *)_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v244);
      case 6:
        v96 = Logger.logObject.getter(v73);
        v97 = static os_log_type_t.default.getter(v96);
        if (os_log_type_enabled(v96, v97))
        {
          v98 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v98 = 0;
          _os_log_impl((void *)&_mh_execute_header, v96, v97, "Sent finalize pairing.", v98, 2u);
          swift_slowDealloc(v98, -1, -1);
        }

        *(_BYTE *)(v4[10] + OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingState) = 4;
        return (_QWORD *)_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v244);
      case 8:
        v99 = Logger.logObject.getter(v73);
        v100 = static os_log_type_t.default.getter(v99);
        if (os_log_type_enabled(v99, v100))
        {
          v101 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v101 = 0;
          _os_log_impl((void *)&_mh_execute_header, v99, v100, "Sent pairing complete.", v101, 2u);
          swift_slowDealloc(v101, -1, -1);
        }

        sub_100A6CF58(v229 & 1);
        sub_100A62E44();
        v102 = v4[10];
        v103 = OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingState;
        v104 = *(unsigned __int8 *)(v102 + OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingState);
        v105 = *(_QWORD *)(v102 + OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingInfo)
             + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_forcePairSNs;
        swift_beginAccess(v105, v250, 0, 0);
        v107 = v226;
        if (*(_QWORD *)(*(_QWORD *)v105 + 16))
        {
          v108 = Logger.logObject.getter(v106);
          v109 = static os_log_type_t.default.getter(v108);
          if (os_log_type_enabled(v108, v109))
          {
            v110 = (uint8_t *)swift_slowAlloc(2, -1);
            *(_WORD *)v110 = 0;
            _os_log_impl((void *)&_mh_execute_header, v108, v109, "Force Re-Pairing next serial number.", v110, 2u);
            swift_slowDealloc(v110, -1, -1);
          }

          v111 = v217;
          v112 = v216;
          *v217 = v216;
          v113 = v218;
          v61(v111, v107, v218);
          v114 = v112;
          LOBYTE(v112) = _dispatchPreconditionTest(_:)(v111);
          v115 = v215;
          v215(v111, v113);
          v116 = v223;
          if ((v112 & 1) != 0)
          {
            v117 = type metadata accessor for Transaction(0);
            __chkstk_darwin(v117);
            v118 = v232;
            *(&v210 - 4) = (uint64_t)v4;
            *(&v210 - 3) = v118;
            *((_BYTE *)&v210 - 16) = v229 & 1;
            *(&v210 - 1) = v116;
            static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd.AirPodsPairingManager.handleNotify", 64, 2, sub_100A747DC, &v210 - 6);
            *v111 = v114;
            v61(v111, v226, v113);
            v119 = v114;
            v120 = _dispatchPreconditionTest(_:)(v111);
            v121 = v115(v111, v113);
            if ((v120 & 1) != 0)
            {
              __chkstk_darwin(v121);
              v122 = v232;
              *(&v210 - 4) = (uint64_t)v4;
              *(&v210 - 3) = v122;
              *(&v210 - 2) = v223;
              static Transaction.named<A>(_:with:)("AirPodsPairingManager.checkPairingEligibility", 45, 2, sub_100A747FC, &v210 - 6);
              return (_QWORD *)_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v244);
            }
          }
          else
          {
LABEL_122:
            __break(1u);
          }
          __break(1u);
          goto LABEL_124;
        }
        if (v104 == 10)
        {
          v206 = Logger.logObject.getter(v106);
          v207 = static os_log_type_t.default.getter(v206);
          if (os_log_type_enabled(v206, v207))
          {
            v208 = (uint8_t *)swift_slowAlloc(2, -1);
            *(_WORD *)v208 = 0;
            _os_log_impl((void *)&_mh_execute_header, v206, v207, "Pairing has been completed for all serial numbers over classic. Need LE pairing", v208, 2u);
            swift_slowDealloc(v208, -1, -1);
          }

          sub_100A4A928(v232, 0);
          v209 = v233;
          sub_100786FB4(v233);
          sub_100A6C88C((uint64_t)v209, 0, 0, 0xF000000000000000);
          (*(void (**)(char *, uint64_t))(v235 + 8))(v209, v237);
        }
        else if (v104 == 9)
        {
          v86 = Logger.logObject.getter(v106);
          v201 = static os_log_type_t.default.getter(v86);
          if (os_log_type_enabled(v86, v201))
          {
            v202 = (uint8_t *)swift_slowAlloc(2, -1);
            *(_WORD *)v202 = 0;
            _os_log_impl((void *)&_mh_execute_header, v86, v201, "Pairing has been completed for all serial numbers.", v202, 2u);
            v92 = v202;
LABEL_22:
            swift_slowDealloc(v92, -1, -1);
          }

LABEL_86:
          sub_100A4A928(v232, 1);
        }
        else
        {
          *(_BYTE *)(v102 + v103) = 6;
          sub_100A49BB0(v232);
        }
        return (_QWORD *)_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v244);
      default:
        v85 = swift_retain_n(v4, 2);
        v86 = Logger.logObject.getter(v85);
        v87 = static os_log_type_t.error.getter(v86);
        if (os_log_type_enabled(v86, v87))
        {
          v88 = (uint8_t *)swift_slowAlloc(12, -1);
          v89 = swift_slowAlloc(32, -1);
          v250[0] = v89;
          *(_DWORD *)v88 = 136315138;
          v90 = sub_100C9706C(*(_BYTE *)(v4[10]
                                       + OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingState));
          v249 = sub_100016940(v90, v91, v250);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v249, v250, v88 + 4, v88 + 12);
          swift_release_n(v4, 2);
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v86, v87, "Invalid pairing state %s!", v88, 0xCu);
          swift_arrayDestroy(v89, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v89, -1, -1);
          v92 = v88;
          goto LABEL_22;
        }

        swift_release_n(v4, 2);
        goto LABEL_86;
    }
  }
  sub_100059244((uint64_t)&v252, (uint64_t)&v244);
  sub_100059280(&v244, (uint64_t)v250);
  v62 = swift_retain_n(v4, 2);
  v63 = Logger.logObject.getter(v62);
  v64 = static os_log_type_t.error.getter(v63);
  if (os_log_type_enabled(v63, v64))
  {
    v65 = swift_slowAlloc(22, -1);
    v66 = swift_slowAlloc(64, -1);
    v249 = v66;
    *(_DWORD *)v65 = 136446466;
    sub_100E01294();
    v248 = sub_100016940(v67, v68, &v249);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v248, &v249, v65 + 4, v65 + 12);
    swift_bridgeObjectRelease();
    sub_1000593D4(v250);
    *(_WORD *)(v65 + 12) = 2082;
    v69 = sub_100C9706C(*(_BYTE *)(v4[10] + OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingState));
    v248 = sub_100016940(v69, v70, &v249);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v248, &v249, v65 + 14, v65 + 22);
    swift_release_n(v4, 2);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v63, v64, "Pairing error %{public}s. Pairing state: %{public}s", (uint8_t *)v65, 0x16u);
    swift_arrayDestroy(v66, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v66, -1, -1);
    swift_slowDealloc(v65, -1, -1);

  }
  else
  {
    sub_1000593D4(v250);

    swift_release_n(v4, 2);
  }
  v77 = sub_1003D7FD8((uint64_t)&off_10104DED8);
  sub_100059280(&v244, (uint64_t)v250);
  if (v251)
  {
    swift_bridgeObjectRelease();
    sub_1000593D4(v250);
  }
  else
  {
    v249 = v250[0];
    v78 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
    if ((swift_dynamicCast(&v248, &v249, v78, &type metadata for AirPodsPairingManager.AirPodsPairingManagerError, 6) & 1) != 0)
    {
      v79 = sub_100A086A8(v248, v77);
      v80 = swift_bridgeObjectRelease();
      if (v79)
      {
        v81 = Logger.logObject.getter(v80);
        v82 = static os_log_type_t.default.getter(v81);
        if (os_log_type_enabled(v81, v82))
        {
          v83 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v83 = 0;
          v84 = "Need LE pairing. Not sending pairing completion.";
          goto LABEL_94;
        }
LABEL_95:

        goto LABEL_96;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
  v123 = v233;
  sub_100786FB4(v233);
  sub_10081F5CC((uint64_t)v123, (uint64_t)v23);
  v239 = *(void (**)(_QWORD, _QWORD))(v235 + 8);
  v239(v123, v237);
  v124 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v231 + 48);
  if (v124(v23, 1, v234) == 1)
  {
    sub_100004048((uint64_t)v23, (uint64_t *)&unk_1010FF7F0);
  }
  else
  {
    v125 = v230;
    sub_1000126EC((uint64_t)v23, v230, type metadata accessor for OwnedBeaconGroup);
    if ((sub_10036F59C() & 1) != 0)
    {
      v126 = v221;
      v127 = sub_10005972C(v125, v221, type metadata accessor for OwnedBeaconGroup);
      v128 = Logger.logObject.getter(v127);
      v129 = static os_log_type_t.default.getter(v128);
      if (os_log_type_enabled(v128, v129))
      {
        v130 = (uint8_t *)swift_slowAlloc(12, -1);
        v131 = swift_slowAlloc(32, -1);
        v250[0] = v131;
        *(_DWORD *)v130 = 136446210;
        v132 = type metadata accessor for UUID(0);
        v133 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v134 = dispatch thunk of CustomStringConvertible.description.getter(v132, v133);
        v249 = sub_100016940(v134, v135, v250);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v249, v250, v130 + 4, v130 + 12);
        swift_bridgeObjectRelease();
        sub_1000126B0(v126, type metadata accessor for OwnedBeaconGroup);
        _os_log_impl((void *)&_mh_execute_header, v128, v129, "Buds pairing failed but we have beacon group %{public}s to start LE pairing. Not sending pairing completion.", v130, 0xCu);
        swift_arrayDestroy(v131, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v131, -1, -1);
        swift_slowDealloc(v130, -1, -1);
      }
      else
      {
        sub_1000126B0(v126, type metadata accessor for OwnedBeaconGroup);
      }

      v165 = (uint64_t)v220;
      v166 = v230;
      sub_100367170(v238);
      v167 = sub_10036FA1C();
      sub_1000FC644(v167, (uint64_t *)v165);
      swift_bridgeObjectRelease();
      v168 = sub_10001A9A8(&qword_1010EEFD0);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v168 - 8) + 48))(v165, 1, v168) == 1)
      {
        v169 = sub_100004048(v165, &qword_101110EB8);
        v170 = Logger.logObject.getter(v169);
        v171 = static os_log_type_t.error.getter(v170);
        if (os_log_type_enabled(v170, v171))
        {
          v172 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v172 = 0;
          _os_log_impl((void *)&_mh_execute_header, v170, v171, "Missing MAC address to start LE pairing", v172, 2u);
          swift_slowDealloc(v172, -1, -1);
        }

      }
      else
      {
        sub_10001BC14(*(_QWORD *)v165, *(_QWORD *)(v165 + 8));
        v173 = v165 + *(int *)(v168 + 48);
        v174 = *(void (**)(char *, uint64_t, uint64_t))(v235 + 32);
        v175 = v213;
        v176 = v237;
        v174(v213, v173, v237);
        v177 = (uint64_t)v214;
        v174(v214, (uint64_t)v175, v176);
        sub_100A6B0BC(v177, 0, v229 & 1);
        v239(v177, v176);
      }
      sub_1000126B0(v166, type metadata accessor for OwnedBeaconGroup);
      goto LABEL_96;
    }
    sub_1000126B0(v125, type metadata accessor for OwnedBeaconGroup);
  }
  v136 = v4[10];
  if (*(unsigned __int8 *)(v136 + OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingState) < 2u)
    goto LABEL_100;
  v137 = v233;
  sub_100786FB4(v233);
  v138 = v227;
  sub_10081F5CC((uint64_t)v137, v227);
  v239(v137, v237);
  if (v124((char *)v138, 1, v234) != 1)
  {
    v140 = v219;
    sub_1000126EC(v138, v219, type metadata accessor for OwnedBeaconGroup);
    v141 = sub_10036F59C();
    if ((v141 & 1) != 0)
    {
      v139 = sub_1000126B0(v140, type metadata accessor for OwnedBeaconGroup);
      goto LABEL_50;
    }
    v184 = Logger.logObject.getter(v141);
    v185 = static os_log_type_t.default.getter(v184);
    if (os_log_type_enabled(v184, v185))
    {
      v186 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v186 = 0;
      _os_log_impl((void *)&_mh_execute_header, v184, v185, "Buds pairing failed. LE pairing not needed. Sending pairing completion.", v186, 2u);
      swift_slowDealloc(v186, -1, -1);
    }

    sub_1000126B0(v140, type metadata accessor for OwnedBeaconGroup);
LABEL_100:
    v187 = sub_100059390();
    v188 = swift_allocError(&type metadata for CentralManager.Error, v187, 0, 0);
    sub_100059280(&v244, v189);
    sub_100A6D3BC(v188);
    swift_errorRelease(v188);
    v183 = 1;
    goto LABEL_101;
  }
  v139 = sub_100004048(v138, (uint64_t *)&unk_1010FF7F0);
LABEL_50:
  v142 = Logger.logObject.getter(v139);
  v143 = static os_log_type_t.default.getter(v142);
  if (os_log_type_enabled(v142, v143))
  {
    v144 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v144 = 0;
    _os_log_impl((void *)&_mh_execute_header, v142, v143, "Buds pairing failed but we have beacon group data to start LE pairing. Not sending pairing completion.", v144, 2u);
    swift_slowDealloc(v144, -1, -1);
  }

  v145 = *(_QWORD *)(*(_QWORD *)(v136 + OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingInfo)
                   + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_allSerialNumbersAndPartIds);
  v146 = v145 + 64;
  v147 = 1 << *(_BYTE *)(v145 + 32);
  v148 = -1;
  if (v147 < 64)
    v148 = ~(-1 << v147);
  v149 = v148 & *(_QWORD *)(v145 + 64);
  v150 = (unint64_t)(v147 + 63) >> 6;
  swift_bridgeObjectRetain_n(v145, 2);
  v151 = 0;
  if (!v149)
    goto LABEL_56;
LABEL_55:
  v152 = __clz(__rbit64(v149));
  v149 &= v149 - 1;
  for (i = v152 | (v151 << 6); ; i = __clz(__rbit64(v155)) + (v151 << 6))
  {
    v157 = v240;
    sub_10005972C(*(_QWORD *)(v145 + 56) + *(_QWORD *)(v243 + 72) * i, v240, type metadata accessor for MultipartAccessoryPairingInfo);
    v158 = v157;
    v159 = v241;
    sub_1000126EC(v158, v241, type metadata accessor for MultipartAccessoryPairingInfo);
    if (*(_BYTE *)(v159 + *(int *)(v242 + 28)) == 2)
    {
      swift_release();
      v160 = v225;
      sub_1000126EC(v159, v225, type metadata accessor for MultipartAccessoryPairingInfo);
      v161 = v243;
      v162 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v243 + 56);
      v163 = v160;
      v164 = 0;
      goto LABEL_89;
    }
    sub_1000126B0(v159, type metadata accessor for MultipartAccessoryPairingInfo);
    if (v149)
      goto LABEL_55;
LABEL_56:
    v154 = v151 + 1;
    if (__OFADD__(v151, 1))
    {
      __break(1u);
      goto LABEL_122;
    }
    if (v154 >= v150)
      goto LABEL_88;
    v155 = *(_QWORD *)(v146 + 8 * v154);
    ++v151;
    if (!v155)
    {
      v151 = v154 + 1;
      if (v154 + 1 >= v150)
        goto LABEL_88;
      v155 = *(_QWORD *)(v146 + 8 * v151);
      if (!v155)
      {
        v151 = v154 + 2;
        if (v154 + 2 >= v150)
          goto LABEL_88;
        v155 = *(_QWORD *)(v146 + 8 * v151);
        if (!v155)
        {
          v151 = v154 + 3;
          if (v154 + 3 >= v150)
            goto LABEL_88;
          v155 = *(_QWORD *)(v146 + 8 * v151);
          if (!v155)
          {
            v151 = v154 + 4;
            if (v154 + 4 >= v150)
              goto LABEL_88;
            v155 = *(_QWORD *)(v146 + 8 * v151);
            if (!v155)
              break;
          }
        }
      }
    }
LABEL_73:
    v149 = (v155 - 1) & v155;
  }
  v156 = v154 + 5;
  if (v156 < v150)
  {
    v155 = *(_QWORD *)(v146 + 8 * v156);
    if (!v155)
    {
      while (1)
      {
        v151 = v156 + 1;
        if (__OFADD__(v156, 1))
          break;
        if (v151 >= v150)
          goto LABEL_88;
        v155 = *(_QWORD *)(v146 + 8 * v151);
        ++v156;
        if (v155)
          goto LABEL_73;
      }
LABEL_124:
      __break(1u);
      JUMPOUT(0x100A49B8CLL);
    }
    v151 = v156;
    goto LABEL_73;
  }
LABEL_88:
  swift_release();
  v161 = v243;
  v162 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v243 + 56);
  v160 = v225;
  v163 = v225;
  v164 = 1;
LABEL_89:
  v179 = v242;
  v162(v163, v164, 1, v242);
  swift_bridgeObjectRelease();
  v180 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v161 + 48))(v160, 1, v179);
  v181 = (uint64_t)v224;
  if (v180 == 1)
  {
    sub_100004048(v160, &qword_1010EC008);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v235 + 56))(v181, 1, 1, v237);
    goto LABEL_92;
  }
  sub_10000F9B8(v160 + *(int *)(v179 + 24), (uint64_t)v224, (uint64_t *)&unk_1010F9890);
  sub_1000126B0(v160, type metadata accessor for MultipartAccessoryPairingInfo);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v235 + 48))(v181, 1, v237) == 1)
  {
LABEL_92:
    v182 = sub_100004048(v181, (uint64_t *)&unk_1010F9890);
    v81 = Logger.logObject.getter(v182);
    v82 = static os_log_type_t.error.getter(v81);
    if (os_log_type_enabled(v81, v82))
    {
      v83 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v83 = 0;
      v84 = "Missing MAC address to start LE pairing";
LABEL_94:
      _os_log_impl((void *)&_mh_execute_header, v81, v82, v84, v83, 2u);
      swift_slowDealloc(v83, -1, -1);
    }
    goto LABEL_95;
  }
  v203 = (uint64_t)v212;
  v204 = v181;
  v205 = v237;
  (*(void (**)(char *, uint64_t, uint64_t))(v235 + 32))(v212, v204, v237);
  sub_100A6B0BC(v203, 0, v229 & 1);
  v239(v203, v205);
LABEL_96:
  v183 = 0;
LABEL_101:
  sub_100A4A928(v232, v183);
  v190 = v4[10];
  if (*(unsigned __int8 *)(v190 + OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingState) >= 4u)
  {
    v191 = v233;
    sub_100786FB4(v233);
    v192 = v228;
    sub_10081F5CC((uint64_t)v191, v228);
    (*(void (**)(char *, uint64_t))(v235 + 8))(v191, v237);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v231 + 48))(v192, 1, v234) == 1)
    {
      sub_1000593D4(&v244);
      return (_QWORD *)sub_100004048(v192, (uint64_t *)&unk_1010FF7F0);
    }
    v193 = v222;
    sub_1000126EC(v192, (uint64_t)v222, type metadata accessor for OwnedBeaconGroup);
    v194 = (uint64_t *)(*(_QWORD *)(v190 + OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingInfo)
                     + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessorySerialNumber);
    v195 = v194[1];
    if (v195 >> 60 != 15)
    {
      v250[0] = *v194;
      v196 = v250[0];
      v250[1] = v195;
      sub_10001BBBC(v250[0], v195);
      v197 = sub_100035530();
      if ((DataProtocol.isNull.getter(&type metadata for Data, v197) & 1) == 0)
      {
        v198 = Data.trimmed.getter(v196, v195);
        v200 = v199;
        sub_100A66FDC(v198, v199, v193);
        sub_10001BC14(v198, v200);
      }
      sub_10001EF3C(v196, v195);
    }
    sub_1000126B0((uint64_t)v193, type metadata accessor for OwnedBeaconGroup);
  }
  return sub_1000593D4(&v244);
}

uint64_t sub_100A49BB0(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  void *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  void (*v37)(uint64_t, unint64_t, uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44[24];
  _QWORD v45[3];
  uint64_t v46;
  uint64_t v47;
  _QWORD v48[3];
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;

  v2 = (uint64_t)v1;
  v43 = a1;
  v41 = *v1;
  v42 = type metadata accessor for MACAddress(0);
  v3 = *(_QWORD *)(v42 - 8);
  __chkstk_darwin(v42);
  v5 = (char *)&v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10001A9A8((uint64_t *)&unk_1010FF7F0);
  __chkstk_darwin(v6);
  v8 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for OwnedBeaconGroup(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v40 = (uint64_t)&v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DispatchPredicate(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (uint64_t *)((char *)&v40 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v16 = *(void **)(v2 + 16);
  *v15 = v16;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v13 + 104))(v15, enum case for DispatchPredicate.onQueue(_:), v12);
  v17 = v16;
  LOBYTE(v16) = _dispatchPreconditionTest(_:)(v15);
  (*(void (**)(_QWORD *, uint64_t))(v13 + 8))(v15, v12);
  if ((v16 & 1) != 0)
  {
    if (qword_1010EA318 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_1010EA318, sub_100B5E330);
LABEL_3:
  v18 = type metadata accessor for Logger(0);
  v19 = sub_10001A9E8(v18, (uint64_t)qword_1011B7DF8);
  v20 = Logger.logObject.getter(v19);
  v21 = static os_log_type_t.default.getter(v20);
  if (os_log_type_enabled(v20, v21))
  {
    v22 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v22 = 0;
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "continuePairing...", v22, 2u);
    swift_slowDealloc(v22, -1, -1);
  }

  *(_BYTE *)(*(_QWORD *)(v2 + 80) + OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingState) = 7;
  sub_100786FB4(v5);
  sub_10081F5CC((uint64_t)v5, (uint64_t)v8);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v42);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    v23 = sub_100004048((uint64_t)v8, (uint64_t *)&unk_1010FF7F0);
    v24 = Logger.logObject.getter(v23);
    v25 = static os_log_type_t.error.getter(v24);
    if (os_log_type_enabled(v24, v25))
    {
      v26 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v26 = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "Missing beacon group to continue pairing!", v26, 2u);
      swift_slowDealloc(v26, -1, -1);
    }

    return sub_100A4A928(v43, 1);
  }
  else
  {
    v28 = v40;
    sub_1000126EC((uint64_t)v8, v40, type metadata accessor for OwnedBeaconGroup);
    swift_beginAccess(v2 + 176, v44, 0, 0);
    sub_100030784(v2 + 176, (uint64_t)v45);
    v29 = v46;
    v30 = v47;
    sub_10001AA44(v45, v46);
    v31 = sub_1003700FC();
    sub_100C4DABC(v31, v32);
    v34 = v33;
    v36 = v35;
    v37 = *(void (**)(uint64_t, unint64_t, uint64_t, uint64_t))(v30 + 64);
    AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v30, v29, &unk_100F32BA8, &unk_100F32BB8);
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v30, v29, AssociatedTypeWitness, &unk_100F32BA8, &unk_100F32BB0);
    sub_100018F08(v48);
    v37(v34, v36, v29, v30);
    sub_10001BC14(v34, v36);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v45);
    v38 = type metadata accessor for Transaction(0);
    __chkstk_darwin(v38);
    *(&v40 - 4) = v2;
    *(&v40 - 3) = (uint64_t)v48;
    v39 = v41;
    *(&v40 - 2) = v43;
    *(&v40 - 1) = v39;
    static Transaction.named<A>(_:with:)("AirPodsPairingManager.continuePairing", 37, 2, sub_100A74778, &v40 - 6);
    sub_1000126B0(v28, type metadata accessor for OwnedBeaconGroup);
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v48);
  }
}

uint64_t sub_100A4A048(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  id v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t, uint64_t, uint64_t);
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  id v70[5];
  char v71;
  id v72;

  v8 = sub_10001A9A8(&qword_1010EECC8);
  __chkstk_darwin(v8);
  v10 = (char *)&v54 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v55 = sub_10001A9A8(&qword_101110F30);
  v54 = *(_QWORD *)(v55 - 8);
  __chkstk_darwin(v55);
  v69 = (char *)&v54 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10001A9A8(&qword_101110F38);
  v57 = *(_QWORD *)(v12 - 8);
  v58 = v12;
  __chkstk_darwin(v12);
  v56 = (char *)&v54 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_10001A9A8(&qword_101110F40);
  v60 = *(_QWORD *)(v14 - 8);
  v61 = v14;
  __chkstk_darwin(v14);
  v59 = (char *)&v54 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_10001A9A8(&qword_101110F48);
  v64 = *(_QWORD *)(v16 - 8);
  v65 = v16;
  v17 = __chkstk_darwin(v16);
  v62 = (char *)&v54 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v68 = a1;
  v63 = Transaction.subscriptionCleaner.getter(v17);
  sub_100030784(a3, (uint64_t)v70);
  v71 = 0;
  v67 = a4;
  v19 = (void *)sub_100A4CE80((uint64_t)v70, a4);
  sub_100004048((uint64_t)v70, &qword_101110ED0);
  v70[0] = v19;
  v66 = a2;
  v72 = *(id *)(a2 + 16);
  v20 = v72;
  v21 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
  v22 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56);
  v22(v10, 1, 1, v21);
  v23 = v20;
  v24 = sub_10001A9A8(&qword_101110ED8);
  v25 = sub_10000F4A0(0, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr);
  v26 = sub_1000193A4(&qword_101110F50, &qword_101110ED8, (const char *)&protocol conformance descriptor for Future<A, B>);
  v27 = sub_1001C7EF4();
  Publisher.receive<A>(on:options:)(&v72, v10, v24, v25, v26, v27);
  sub_100004048((uint64_t)v10, &qword_1010EECC8);

  swift_release();
  if (qword_1010EA150 != -1)
    swift_once(&qword_1010EA150, sub_100A3E910);
  v28 = type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride(0);
  v29 = sub_10001A9E8(v28, (uint64_t)qword_101110A58);
  v70[0] = v23;
  v22(v10, 1, 1, v21);
  v30 = sub_1000193A4(&qword_101110F58, &qword_101110F30, (const char *)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  v31 = v23;
  v32 = v56;
  v33 = v29;
  v34 = v55;
  v35 = v30;
  v36 = v69;
  Publisher.timeout<A>(_:scheduler:options:customError:)(v33, v70, v10, sub_1000FC3D0, 0, v55, v25, v35, v27);
  sub_100004048((uint64_t)v10, &qword_1010EECC8);

  (*(void (**)(char *, uint64_t))(v54 + 8))(v36, v34);
  v37 = sub_10001A9A8(&qword_101110ED0);
  v38 = sub_1000193A4(&qword_101110F60, &qword_101110F38, (const char *)&protocol conformance descriptor for Publishers.Timeout<A, B>);
  v39 = v58;
  v40 = v59;
  Publisher.map<A>(_:)(sub_100A75948, 0, v58, v37, v38);
  (*(void (**)(char *, uint64_t))(v57 + 8))(v32, v39);
  v41 = sub_10001A9A8(&qword_101110F68);
  v42 = sub_1000193A4(&qword_101110F70, &qword_101110F40, (const char *)&protocol conformance descriptor for Publishers.Map<A, B>);
  v43 = sub_1000193A4(&qword_101110F78, &qword_101110F68, (const char *)&protocol conformance descriptor for Just<A>);
  v44 = v61;
  v45 = v62;
  Publisher.catch<A>(_:)(sub_100A47264, 0, v61, v41, v42, v43);
  (*(void (**)(char *, uint64_t))(v60 + 8))(v40, v44);
  v46 = swift_allocObject(&unk_1010A3220, 24, 7);
  swift_weakInit(v46 + 16, v66);
  v47 = (_QWORD *)swift_allocObject(&unk_1010A7348, 48, 7);
  v47[2] = v46;
  v49 = v67;
  v48 = v68;
  v47[3] = v68;
  v47[4] = v49;
  v50 = v63;
  v47[5] = v63;
  v51 = sub_1000193A4(&qword_101110F80, &qword_101110F48, (const char *)&protocol conformance descriptor for Publishers.Catch<A, B>);
  swift_retain();
  swift_retain();
  swift_unknownObjectRetain(v50);
  v52 = v65;
  Publisher<>.sink(receiveValue:)(sub_100A747D0, v47, v65, v51);
  swift_release();
  (*(void (**)(char *, uint64_t))(v64 + 8))(v45, v52);
  AnyCancellable.store(in:)(v48);
  swift_unknownObjectRelease(v50);
  return swift_release();
}

uint64_t sub_100A4A5C4(_QWORD *a1)
{
  uint64_t v1;
  _BYTE v3[48];

  sub_100059280(a1, (uint64_t)v3);
  v3[41] = 1;
  v1 = sub_10001A9A8(&qword_101110ED0);
  return Just.init(_:)(v3, v1);
}

uint64_t sub_100A4A614(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[6];
  _QWORD v27[6];
  _BYTE v28[48];
  _BYTE v29[24];

  v6 = a2 + 16;
  swift_beginAccess(a2 + 16, v29, 0, 0);
  result = swift_weakLoadStrong(v6);
  if (result)
  {
    Transaction.capture()();
    sub_10000F9B8(a1, (uint64_t)v28, &qword_101110ED0);
    if ((v28[41] & 1) != 0)
    {
      sub_100059244((uint64_t)v28, (uint64_t)v27);
      if (qword_1010EA318 != -1)
        swift_once(&qword_1010EA318, sub_100B5E330);
      v8 = type metadata accessor for Logger(0);
      sub_10001A9E8(v8, (uint64_t)qword_1011B7DF8);
      v9 = sub_100059280(v27, (uint64_t)v26);
      v10 = Logger.logObject.getter(v9);
      v11 = static os_log_type_t.default.getter(v10);
      if (os_log_type_enabled(v10, v11))
      {
        v12 = (uint8_t *)swift_slowAlloc(12, -1);
        v13 = swift_slowAlloc(32, -1);
        v25 = v13;
        *(_DWORD *)v12 = 136315138;
        sub_100E01294();
        v24 = sub_100016940(v14, v15, &v25);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, &v25, v12 + 4, v12 + 12);
        swift_bridgeObjectRelease();
        sub_1000593D4(v26);
        _os_log_impl((void *)&_mh_execute_header, v10, v11, "Failed to request pairing eligibility data on pairing continue. Error %s", v12, 0xCu);
        swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v13, -1, -1);
        swift_slowDealloc(v12, -1, -1);
      }
      else
      {
        sub_1000593D4(v26);
      }

      sub_100A4A928(a4, 1);
      v21 = sub_100059390();
      v22 = swift_allocError(&type metadata for CentralManager.Error, v21, 0, 0);
      sub_100059280(v27, v23);
      sub_100A6D3BC(v22);
      swift_release();
      sub_1000593D4(v27);
      return swift_errorRelease(v22);
    }
    else
    {
      if (qword_1010EA318 != -1)
        swift_once(&qword_1010EA318, sub_100B5E330);
      v16 = type metadata accessor for Logger(0);
      v17 = sub_10001A9E8(v16, (uint64_t)qword_1011B7DF8);
      v18 = Logger.logObject.getter(v17);
      v19 = static os_log_type_t.default.getter(v18);
      if (os_log_type_enabled(v18, v19))
      {
        v20 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v20 = 0;
        _os_log_impl((void *)&_mh_execute_header, v18, v19, "Requested pairing eligibility data on pairing continue. Waiting for AirPods to respond.", v20, 2u);
        swift_slowDealloc(v20, -1, -1);
      }

      swift_release();
      return sub_100004048((uint64_t)v28, &qword_101110ED0);
    }
  }
  return result;
}

uint64_t sub_100A4A928(uint64_t a1, char a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t result;
  void *v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  char v27;

  v3 = v2;
  v6 = type metadata accessor for DispatchPredicate(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (uint64_t *)((char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = (void *)v3[2];
  *v9 = v10;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v7 + 104))(v9, enum case for DispatchPredicate.onQueue(_:), v6);
  v11 = v10;
  LOBYTE(v10) = _dispatchPreconditionTest(_:)(v9);
  (*(void (**)(_QWORD *, uint64_t))(v7 + 8))(v9, v6);
  if ((v10 & 1) != 0)
  {
    if (qword_1010EA318 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_1010EA318, sub_100B5E330);
LABEL_3:
  v12 = type metadata accessor for Logger(0);
  v13 = sub_10001A9E8(v12, (uint64_t)qword_1011B7DF8);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.debug.getter(v14);
  if (os_log_type_enabled(v14, v15))
  {
    v16 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v16 = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Clean up.", v16, 2u);
    swift_slowDealloc(v16, -1, -1);
  }

  v3[12] = 0;
  swift_release();
  v3[13] = 0;
  v17 = swift_release();
  if (a1)
  {
    OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_1000F9D48, a1, *(_QWORD *)(a1 + 16), &type metadata for () + 1, &type metadata for () + 1);
    v24 = 12;
    v25 = 0u;
    v26 = 0u;
    v27 = 11;
    sub_1007C63BC(&v24);
    v17 = (uint64_t)sub_1000593D4(&v24);
  }
  __chkstk_darwin(v17);
  *(&v23 - 2) = (uint64_t)v3;
  *((_BYTE *)&v23 - 8) = 0;
  QueueSynchronizer.conditionalSync<A>(_:)(sub_100A74768);
  v18 = v3[18];
  v19 = v3[19];
  *((_OWORD *)v3 + 9) = xmmword_100E22B20;
  result = sub_10001EF3C(v18, v19);
  if ((a2 & 1) != 0)
  {
    v24 = v3[8];
    v21 = (void *)v24;
    LOBYTE(v25) = 0;
    swift_retain();
    v22 = v21;
    PassthroughSubject.send(_:)(&v24);

    swift_release();
    LOBYTE(v24) = 1;
    swift_retain();
    PassthroughSubject.send(completion:)(&v24);
    return swift_release();
  }
  return result;
}

uint64_t sub_100A4ABC4()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v15;
  uint64_t v16[3];
  _BYTE v17[24];

  v3 = *(_QWORD *)(*(_QWORD *)(v1 + 80) + OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingInfo);
  v4 = (uint64_t *)(v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_forcePairSNs);
  swift_beginAccess(v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_forcePairSNs, v17, 0, 0);
  if (!*(_QWORD *)(*v4 + 16))
    return 0;
  *(_BYTE *)(v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_forcePair) = 1;
  swift_beginAccess(v4, v16, 33, 0);
  v5 = *v4;
  if (!*(_QWORD *)(*v4 + 16))
  {
    __break(1u);
    goto LABEL_11;
  }
  v0 = *(_QWORD *)(v5 + 32);
  v2 = *(_QWORD *)(v5 + 40);
  swift_retain();
  sub_10001BBBC(v0, v2);
  sub_100779578(0, 1);
  swift_endAccess(v16);
  swift_release();
  if (qword_1010EA318 != -1)
LABEL_11:
    swift_once(&qword_1010EA318, sub_100B5E330);
  v6 = type metadata accessor for Logger(0);
  sub_10001A9E8(v6, (uint64_t)qword_1011B7DF8);
  sub_10001BBBC(v0, v2);
  v7 = sub_10001BBBC(v0, v2);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter(v8);
  if (os_log_type_enabled(v8, v9))
  {
    v10 = swift_slowAlloc(32, -1);
    v11 = swift_slowAlloc(64, -1);
    v16[0] = v11;
    *(_DWORD *)v10 = 136446723;
    v15 = sub_100016940(0xD000000000000011, 0x8000000100EED050, v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, v16, v10 + 4, v10 + 12);
    *(_WORD *)(v10 + 12) = 2160;
    v15 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, v16, v10 + 14, v10 + 22);
    *(_WORD *)(v10 + 22) = 2081;
    v12 = Data.hexString.getter(v0, v2);
    v15 = sub_100016940(v12, v13, v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, v16, v10 + 24, v10 + 32);
    swift_bridgeObjectRelease();
    sub_10001BC14(v0, v2);
    sub_10001BC14(v0, v2);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "%{public}s %{private,mask.hash}s", (uint8_t *)v10, 0x20u);
    swift_arrayDestroy(v11, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v11, -1, -1);
    swift_slowDealloc(v10, -1, -1);
  }
  else
  {
    sub_10001BC14(v0, v2);
    sub_10001BC14(v0, v2);
  }

  return v0;
}

void sub_100A4AEB4(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  unsigned int (*v34)(char *, uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  uint8_t *v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  NSObject *v49;
  os_log_type_t v50;
  uint8_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  NSObject *v58;
  os_log_type_t v59;
  _BOOL4 v60;
  uint8_t *v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  unint64_t v72;
  NSObject *v73;
  os_log_type_t v74;
  uint8_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  NSObject *v84;
  os_log_type_t v85;
  uint8_t *v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  const char *v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t *v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t v99;
  NSObject *v100;
  os_log_type_t v101;
  uint8_t *v102;
  uint64_t v103;
  char v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  BOOL v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  NSObject *v120;
  os_log_type_t v121;
  uint8_t *v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  unint64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  NSObject *v134;
  os_log_type_t v135;
  _BOOL4 v136;
  uint64_t v137;
  uint8_t *v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  char v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t v151;
  unint64_t v152;
  unint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  void (*v158)(uint64_t *, uint64_t, uint64_t);
  uint64_t v159;
  NSObject *v160;
  os_log_type_t v161;
  uint64_t v162;
  unint64_t v163;
  uint8_t *v164;
  uint8_t *v165;
  uint64_t v166;
  char v167;
  uint64_t v168;
  unint64_t v169;
  uint64_t v170;
  BOOL v171;
  uint64_t v172;
  unint64_t v173;
  unint64_t v174;
  uint64_t v175;
  unint64_t v176;
  uint64_t v177;
  unint64_t v178;
  uint64_t v179;
  unint64_t v180;
  unint64_t v181;
  unint64_t v182;
  uint64_t v183;
  unint64_t v184;
  unint64_t v185;
  unint64_t v186;
  uint64_t v187;
  unint64_t v188;
  NSObject *v189;
  uint64_t v190;
  NSObject *v191;
  os_log_type_t v192;
  uint8_t *v193;
  NSObject *v194;
  uint64_t v195;
  uint64_t v196;
  unint64_t v197;
  uint64_t v198;
  uint64_t v199;
  unint64_t v200;
  unint64_t v201;
  NSObject *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  unint64_t v206;
  uint64_t v207;
  NSObject *v208;
  os_log_type_t v209;
  uint8_t *v210;
  uint64_t v211;
  uint64_t v212;
  unint64_t v213;
  unint64_t v214;
  uint64_t v215;
  unint64_t v216;
  uint64_t v217;
  uint64_t v218;
  NSObject *v219;
  _BOOL4 v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  char *v225;
  uint64_t v226;
  unint64_t v227;
  uint64_t v228;
  unint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  unint64_t v233;
  NSObject *v234;
  uint64_t v235;
  uint64_t v236;
  unint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint8_t *v240;
  uint64_t (*v241)(uint64_t, uint64_t, uint64_t);
  uint64_t v242;
  char *v243;
  unint64_t v244;
  uint64_t v245;
  uint64_t v246;
  char *v247;
  uint64_t v248;
  unint64_t v249;
  uint8_t *v250;
  NSObject *v251;
  unint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  unint64_t v256;
  uint64_t v257;
  uint8_t *v258;
  uint64_t v259;
  unint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  _QWORD v266[3];
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  _BYTE v270[16];
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  _BYTE v273[24];
  uint64_t v274;
  uint64_t v275;
  unint64_t v276;
  uint64_t v277;
  unint64_t v278;
  uint64_t v279;
  unint64_t v280;
  unint64_t v281;
  unint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  unint64_t v286;
  uint64_t v287;
  unint64_t v288;
  uint64_t v289;
  unint64_t v290;
  unint64_t v291;
  unint64_t v292;
  uint64_t v293;
  uint64_t v294;

  LODWORD(v254) = a2;
  v5 = type metadata accessor for String.Encoding(0);
  __chkstk_darwin(v5);
  v247 = (char *)&v238 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for MACAddress(0);
  v257 = *(_QWORD *)(v7 - 8);
  v258 = (uint8_t *)v7;
  __chkstk_darwin(v7);
  v9 = (char *)&v238 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10001A9A8((uint64_t *)&unk_1010FF7F0);
  v11 = __chkstk_darwin(v10);
  v248 = (uint64_t)&v238 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v256 = (unint64_t)&v238 - v13;
  v14 = type metadata accessor for OwnedBeaconGroup(0);
  v259 = *(_QWORD *)(v14 - 8);
  v260 = v14;
  v15 = __chkstk_darwin(v14);
  v252 = (unint64_t)&v238 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v15);
  v251 = ((char *)&v238 - v18);
  __chkstk_darwin(v17);
  v255 = (uint64_t)&v238 - v19;
  v20 = sub_10001A9A8((uint64_t *)&unk_10111C0A0);
  v21 = __chkstk_darwin(v20);
  v253 = (uint64_t)&v238 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __chkstk_darwin(v21);
  v249 = (unint64_t)&v238 - v24;
  __chkstk_darwin(v23);
  v26 = (char *)&v238 - v25;
  v27 = type metadata accessor for AccessoryProductInfo(0);
  v28 = *(_QWORD *)(v27 - 8);
  v29 = __chkstk_darwin(v27);
  v250 = (uint8_t *)&v238 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v29);
  v32 = (char *)&v238 - v31;
  v262 = OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingInfo;
  v263 = a1;
  v33 = *(_QWORD *)(a1 + OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingInfo)
      + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_productInfo;
  swift_beginAccess(v33, &v274, 0, 0);
  sub_10000F9B8(v33, (uint64_t)v26, (uint64_t *)&unk_10111C0A0);
  v34 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48);
  if (v34(v26, 1, v27) == 1)
  {
    sub_100004048((uint64_t)v26, (uint64_t *)&unk_10111C0A0);
    if (qword_1010EA318 != -1)
      swift_once(&qword_1010EA318, sub_100B5E330);
    v35 = type metadata accessor for Logger(0);
    v36 = sub_10001A9E8(v35, (uint64_t)qword_1011B7DF8);
    v37 = Logger.logObject.getter(v36);
    v38 = static os_log_type_t.error.getter(v37);
    if (os_log_type_enabled(v37, v38))
    {
      v39 = (uint8_t *)swift_slowAlloc(12, -1);
      v40 = swift_slowAlloc(32, -1);
      v285 = v40;
      *(_DWORD *)v39 = 136446210;
      v275 = sub_100016940(0xD000000000000030, 0x8000000100EED010, &v285);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v275, &v276, v39 + 4, v39 + 12);
      _os_log_impl((void *)&_mh_execute_header, v37, v38, "%{public}s Missing productInfo!", v39, 0xCu);
      swift_arrayDestroy(v40, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v40, -1, -1);
      swift_slowDealloc(v39, -1, -1);
    }

    *(_QWORD *)a3 = 7;
    *(_OWORD *)(a3 + 8) = 0u;
    *(_OWORD *)(a3 + 24) = 0u;
    *(_WORD *)(a3 + 40) = 267;
    return;
  }
  sub_1000126EC((uint64_t)v26, (uint64_t)v32, type metadata accessor for AccessoryProductInfo);
  v245 = v27;
  v41 = (uint64_t *)&v32[*(int *)(v27 + 92)];
  v42 = *v41;
  v43 = v41[1];
  swift_retain();
  sub_10001BD08(v42, v43);
  v264 = sub_100B60988(v42, v43);
  v45 = v44;
  sub_10001EF3C(v42, v43);
  swift_release();
  if (v45 >> 60 != 15)
  {
    v241 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v34;
    v52 = a3;
    if (qword_1010EA318 != -1)
      swift_once(&qword_1010EA318, sub_100B5E330);
    v53 = type metadata accessor for Logger(0);
    v54 = sub_10001A9E8(v53, (uint64_t)qword_1011B7DF8);
    v55 = v264;
    sub_10001BBBC(v264, v45);
    v56 = sub_10001BBBC(v55, v45);
    v57 = v45;
    v246 = v54;
    v58 = Logger.logObject.getter(v56);
    v59 = static os_log_type_t.debug.getter(v58);
    v60 = os_log_type_enabled(v58, v59);
    v243 = v32;
    v244 = v57;
    if (v60)
    {
      v61 = (uint8_t *)swift_slowAlloc(12, -1);
      v242 = swift_slowAlloc(32, -1);
      v285 = v242;
      *(_DWORD *)v61 = 136315138;
      v240 = v61 + 4;
      sub_10001BBBC(v264, v57);
      v62 = v52;
      v63 = Data.hexString.getter(v264, v57);
      v65 = v64;
      sub_10001EF3C(v264, v57);
      v66 = v63;
      v52 = v62;
      v275 = sub_100016940(v66, v65, &v285);
      v55 = v264;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v275, &v276, v240, v61 + 12);
      swift_bridgeObjectRelease();
      sub_10001EF3C(v55, v57);
      sub_10001EF3C(v55, v57);
      _os_log_impl((void *)&_mh_execute_header, v58, v59, "E1: %s", v61, 0xCu);
      v67 = v242;
      swift_arrayDestroy(v242, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v67, -1, -1);
      swift_slowDealloc(v61, -1, -1);
    }
    else
    {
      sub_10001EF3C(v55, v57);
      sub_10001EF3C(v55, v57);
    }

    v69 = v262;
    v70 = v263;
    v71 = (uint64_t *)(*(_QWORD *)(v263 + v262) + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_findMyNetworkId);
    v72 = v71[1];
    if (v72 >> 60 == 15)
    {
      v73 = Logger.logObject.getter(v68);
      v74 = static os_log_type_t.error.getter(v73);
      if (os_log_type_enabled(v73, v74))
      {
        v75 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v75 = 0;
        _os_log_impl((void *)&_mh_execute_header, v73, v74, "Missing FindMyNetworkId to generate init pairing.", v75, 2u);
        swift_slowDealloc(v75, -1, -1);
      }

      sub_10001EF3C(v55, v244);
      goto LABEL_39;
    }
    v242 = *v71;
    v240 = (uint8_t *)v72;
    sub_10001BBBC(v242, v72);
    sub_100786FB4(v9);
    v76 = v256;
    sub_10081F5CC((uint64_t)v9, v256);
    (*(void (**)(char *, uint8_t *))(v257 + 8))(v9, v258);
    if ((*(unsigned int (**)(uint64_t, uint64_t, unint64_t))(v259 + 48))(v76, 1, v260) == 1)
    {
      sub_100004048(v76, (uint64_t *)&unk_1010FF7F0);
      v77 = *(_QWORD *)(v70 + v69) + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_productInfo;
      swift_beginAccess(v77, v273, 0, 0);
      v78 = v253;
      sub_10000F9B8(v77, v253, (uint64_t *)&unk_10111C0A0);
      v79 = v245;
      v80 = v241(v78, 1, v245);
      v239 = v52;
      if (v80)
      {
        sub_100004048(v78, (uint64_t *)&unk_10111C0A0);
      }
      else
      {
        v103 = (uint64_t)v250;
        sub_10005972C(v78, (uint64_t)v250, type metadata accessor for AccessoryProductInfo);
        sub_100004048(v78, (uint64_t *)&unk_10111C0A0);
        v104 = *(_BYTE *)(v103 + *(int *)(v79 + 44));
        sub_1000126B0(v103, type metadata accessor for AccessoryProductInfo);
        if ((v104 & 1) != 0)
          goto LABEL_43;
      }
      v105 = *(_QWORD *)(v70 + v69);
      v106 = *(_QWORD *)(v105 + 112);
      if (v106 >> 60 == 15
        || (v107 = *(_QWORD *)(v105 + 104),
            sub_10001BBBC(v107, *(_QWORD *)(v105 + 112)),
            v108 = sub_100A08A3C(v107, v106),
            sub_10001EF3C(v107, v106),
            !v108))
      {
        v111 = 0;
        v110 = 0xF000000000000000;
        goto LABEL_45;
      }
LABEL_43:
      v109 = type metadata accessor for __DataStorage(0);
      swift_allocObject(v109, *(unsigned int *)(v109 + 48), *(unsigned __int16 *)(v109 + 52));
      v110 = __DataStorage.init(length:)(96) | 0x4000000000000000;
      v111 = 0x6000000000;
LABEL_45:
      v112 = *(_QWORD *)(v70 + v69);
      v113 = *(_QWORD *)(v112 + 16);
      v114 = *(_QWORD *)(v112 + 24);
      v115 = type metadata accessor for __DataStorage(0);
      swift_allocObject(v115, *(unsigned int *)(v115 + 48), *(unsigned __int16 *)(v115 + 52));
      sub_10001BD08(v55, v244);
      sub_10001BD08(v242, (unint64_t)v240);
      sub_10001BBBC(v113, v114);
      sub_10001BD08(v111, v110);
      v116 = __DataStorage.init(length:)(60);
      v285 = 0x3C00000000;
      v286 = v116;
      sub_10051ED28((int *)&v285, 0);
      v260 = v110;
      v259 = v111;
      v117 = v114;
      v118 = v263;
      sub_1005101D8(v113, v117);
      v119 = swift_retain_n(v118, 2);
      v120 = Logger.logObject.getter(v119);
      v121 = static os_log_type_t.default.getter(v120);
      if (os_log_type_enabled(v120, v121))
      {
        v122 = (uint8_t *)swift_slowAlloc(12, -1);
        v123 = swift_slowAlloc(32, -1);
        *(_DWORD *)v122 = 136315138;
        v285 = v123;
        v258 = v122 + 4;
        v124 = *(_QWORD *)(v118 + v262);
        v126 = *(_QWORD *)(v124 + 16);
        v125 = *(_QWORD *)(v124 + 24);
        sub_10001BBBC(v126, v125);
        v127 = Data.hexString.getter(v126, v125);
        v129 = v128;
        sub_10001BC14(v126, v125);
        v269 = sub_100016940(v127, v129, &v285);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v269, v270, v258, v122 + 12);
        swift_release_n(v263, 2);
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v120, v121, "sessionNonce: %s", v122, 0xCu);
        swift_arrayDestroy(v123, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v123, -1, -1);
        swift_slowDealloc(v122, -1, -1);

      }
      else
      {

        swift_release_n(v118, 2);
      }
      v130 = (uint64_t)v243;
      v132 = v259;
      v131 = v260;
      sub_10001BD08(v259, v260);
      v133 = sub_10001BD08(v132, v131);
      v134 = Logger.logObject.getter(v133);
      v135 = static os_log_type_t.default.getter(v134);
      v136 = os_log_type_enabled(v134, v135);
      v137 = v264;
      if (!v136)
      {
        sub_10001EF3C(v242, (unint64_t)v240);

        sub_10001EF3C(v132, v131);
        sub_10001EF3C(v132, v131);
        sub_10001EF3C(v132, v131);
        sub_10001EF3C(v137, v244);
        v142 = v130;
LABEL_58:
        sub_1000126B0(v142, type metadata accessor for AccessoryProductInfo);
        v263 = v283;
        v264 = v284;
        v262 = v282;
        v259 = v279;
        v260 = v281;
        v258 = (uint8_t *)v280;
        v151 = v277;
        v152 = v278;
        v154 = v275;
        v153 = v276;
        v285 = v275;
        v286 = v276;
        v287 = v277;
        v288 = v278;
        v289 = v279;
        v290 = v280;
        v291 = v281;
        v292 = v282;
        v155 = v261 + 176;
        v293 = v283;
        v294 = v284;
        swift_beginAccess(v261 + 176, &v265, 0, 0);
        sub_100030784(v155, (uint64_t)v266);
        v156 = v267;
        v157 = v268;
        sub_10001AA44(v266, v267);
        v158 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v157 + 40);
        AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v157, v156, &unk_100F32BA8, &unk_100F32BB8);
        AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v157, v156, AssociatedTypeWitness, &unk_100F32BA8, &unk_100F32BB0);
        sub_100018F08(&v269);
        v158(&v285, v156, v157);
        sub_10001BC14(v154, v153);
        sub_10001BC14(v151, v152);
        sub_10001BC14(v259, (unint64_t)v258);
        sub_10001BC14(v260, v262);
        sub_10001EF3C(v263, v264);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v266);
        v159 = v239;
        sub_100030784((uint64_t)&v269, v239);
        *(_BYTE *)(v159 + 41) = 0;
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v269);
        return;
      }
      v138 = (uint8_t *)swift_slowAlloc(12, -1);
      v139 = swift_slowAlloc(32, -1);
      v285 = v139;
      *(_DWORD *)v138 = 136315138;
      if (v131 >> 60 == 15)
      {
        v140 = 0;
        v141 = 0xE000000000000000;
      }
      else
      {
        sub_10001BBBC(v132, v131);
        v140 = Data.hexString.getter(v132, v131);
        v141 = v150;
        sub_10001EF3C(v132, v131);
      }
      v269 = sub_100016940(v140, v141, &v285);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v269, v270, v138 + 4, v138 + 12);
      swift_bridgeObjectRelease();
      sub_10001EF3C(v132, v131);
      sub_10001EF3C(v132, v131);
      _os_log_impl((void *)&_mh_execute_header, v134, v135, "companionSessionNonce: %s", v138, 0xCu);
      swift_arrayDestroy(v139, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v139, -1, -1);
      swift_slowDealloc(v138, -1, -1);
      sub_10001EF3C(v242, (unint64_t)v240);

      sub_10001EF3C(v264, v244);
      sub_10001EF3C(v132, v131);
LABEL_57:
      v142 = (uint64_t)v243;
      goto LABEL_58;
    }
    v81 = v255;
    sub_1000126EC(v76, v255, type metadata accessor for OwnedBeaconGroup);
    if ((v254 & 1) != 0)
    {
      v82 = (uint64_t)v251;
      v83 = sub_10005972C(v81, (uint64_t)v251, type metadata accessor for OwnedBeaconGroup);
      v84 = Logger.logObject.getter(v83);
      v85 = static os_log_type_t.default.getter(v84);
      if (os_log_type_enabled(v84, v85))
      {
        v86 = (uint8_t *)swift_slowAlloc(12, -1);
        v87 = swift_slowAlloc(32, -1);
        v285 = v87;
        *(_DWORD *)v86 = 136315138;
        v88 = sub_10036F350();
        v275 = sub_100016940(v88, v89, &v285);
        v81 = v255;
        v69 = v262;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v275, &v276, v86 + 4, v86 + 12);
        swift_bridgeObjectRelease();
        sub_1000126B0((uint64_t)v251, type metadata accessor for OwnedBeaconGroup);
        v90 = "Retry pairing for %s";
LABEL_30:
        _os_log_impl((void *)&_mh_execute_header, v84, v85, v90, v86, 0xCu);
        swift_arrayDestroy(v87, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v87, -1, -1);
        swift_slowDealloc(v86, -1, -1);
        goto LABEL_32;
      }
    }
    else
    {
      v82 = v252;
      v91 = sub_10005972C(v81, v252, type metadata accessor for OwnedBeaconGroup);
      v84 = Logger.logObject.getter(v91);
      v85 = static os_log_type_t.default.getter(v84);
      if (os_log_type_enabled(v84, v85))
      {
        v86 = (uint8_t *)swift_slowAlloc(12, -1);
        v87 = swift_slowAlloc(32, -1);
        v285 = v87;
        *(_DWORD *)v86 = 136315138;
        v92 = sub_10036F350();
        v275 = sub_100016940(v92, v93, &v285);
        v81 = v255;
        v69 = v262;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v275, &v276, v86 + 4, v86 + 12);
        swift_bridgeObjectRelease();
        sub_1000126B0(v252, type metadata accessor for OwnedBeaconGroup);
        v90 = "Pairing already completed for %s. Will proceed with pairing as usual and let server decide if clean up is needed.";
        goto LABEL_30;
      }
    }
    sub_1000126B0(v82, type metadata accessor for OwnedBeaconGroup);
LABEL_32:

    v95 = v264;
    v96 = (uint64_t *)(*(_QWORD *)(v70 + v69) + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessorySerialNumber);
    v97 = v96[1];
    if (v97 >> 60 == 15)
    {
LABEL_35:
      v100 = Logger.logObject.getter(v94);
      v101 = static os_log_type_t.error.getter(v100);
      if (os_log_type_enabled(v100, v101))
      {
        v102 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v102 = 0;
        _os_log_impl((void *)&_mh_execute_header, v100, v101, "Missing accessorySerialNumber to generate init pairing.", v102, 2u);
        swift_slowDealloc(v102, -1, -1);
      }
      sub_10001EF3C(v242, (unint64_t)v240);

LABEL_38:
      sub_10001EF3C(v95, v244);
      sub_1000126B0(v81, type metadata accessor for OwnedBeaconGroup);
LABEL_39:
      sub_1000126B0((uint64_t)v243, type metadata accessor for AccessoryProductInfo);
      *(_OWORD *)v52 = 0u;
      *(_OWORD *)(v52 + 16) = 0u;
      *(_QWORD *)(v52 + 32) = 0;
      *(_WORD *)(v52 + 40) = 267;
      return;
    }
    v285 = *v96;
    v98 = v285;
    v286 = v97;
    sub_10001BBBC(v285, v97);
    v99 = sub_100035530();
    if ((DataProtocol.isNull.getter(&type metadata for Data, v99) & 1) != 0)
    {
      v94 = sub_10001EF3C(v98, v97);
      goto LABEL_35;
    }
    v257 = Data.trimmed.getter(v98, v97);
    v258 = (uint8_t *)v143;
    v144 = sub_1003692E4(v257, v143);
    if ((v144 & 0x100) != 0)
    {
      v160 = Logger.logObject.getter(v144);
      v161 = static os_log_type_t.error.getter(v160);
      if (os_log_type_enabled(v160, v161))
      {
        v162 = v98;
        v163 = v97;
        v164 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v164 = 0;
        _os_log_impl((void *)&_mh_execute_header, v160, v161, "Missing accessoryPartId!", v164, 2u);
        v165 = v164;
        v97 = v163;
        v98 = v162;
        swift_slowDealloc(v165, -1, -1);
      }
      sub_10001BC14(v257, (unint64_t)v258);
      sub_10001EF3C(v242, (unint64_t)v240);

      sub_10001EF3C(v98, v97);
      goto LABEL_38;
    }
    v145 = v144;
    v252 = v97;
    v253 = v98;
    v146 = *(_QWORD *)(v70 + v69) + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_productInfo;
    swift_beginAccess(v146, v273, 0, 0);
    v147 = v146;
    v148 = v249;
    sub_10000F9B8(v147, v249, (uint64_t *)&unk_10111C0A0);
    v149 = v245;
    if (v241(v148, 1, v245))
    {
      sub_100004048(v148, (uint64_t *)&unk_10111C0A0);
    }
    else
    {
      v166 = (uint64_t)v250;
      sub_10005972C(v148, (uint64_t)v250, type metadata accessor for AccessoryProductInfo);
      sub_100004048(v148, (uint64_t *)&unk_10111C0A0);
      v167 = *(_BYTE *)(v166 + *(int *)(v149 + 44));
      sub_1000126B0(v166, type metadata accessor for AccessoryProductInfo);
      if ((v167 & 1) != 0)
        goto LABEL_65;
    }
    v168 = *(_QWORD *)(v70 + v69);
    v169 = *(_QWORD *)(v168 + 112);
    if (v169 >> 60 == 15
      || (v170 = *(_QWORD *)(v168 + 104),
          sub_10001BBBC(v170, *(_QWORD *)(v168 + 112)),
          v171 = sub_100A08A3C(v170, v169),
          sub_10001EF3C(v170, v169),
          !v171))
    {
      v254 = 0;
      v174 = 0xF000000000000000;
LABEL_67:
      v175 = sub_100A4ABC4();
      v239 = v52;
      v256 = v174;
      if (v176 >> 60 != 15)
      {
        v177 = v175;
        v178 = v176;
        v285 = v175;
        v286 = v176;
        sub_10001BBBC(v175, v176);
        if ((DataProtocol.isNull.getter(&type metadata for Data, v99) & 1) != 0)
        {
          sub_10001EF3C(v177, v178);
        }
        else
        {
          v179 = Data.trimmed.getter(v177, v178);
          v180 = v178;
          v182 = v181;
          sub_10001EF3C(v177, v180);
          v183 = sub_10037123C(v179, v182);
          if (v184 >> 60 != 15)
          {
            v215 = v183;
            v216 = v184;
            sub_10001BBBC(v179, v182);
            sub_10001BD08(v215, v216);
            sub_10001BD08(v177, v180);
            sub_10001BBBC(v179, v182);
            v217 = sub_10001BD08(v215, v216);
            v218 = v215;
            v219 = Logger.logObject.getter(v217);
            LODWORD(v250) = static os_log_type_t.default.getter(v219);
            v251 = v219;
            v220 = os_log_type_enabled(v219, (os_log_type_t)v250);
            v259 = v177;
            if (v220)
            {
              v249 = v216;
              v221 = v218;
              v260 = v180;
              v222 = swift_slowAlloc(32, -1);
              v223 = swift_slowAlloc(64, -1);
              v285 = v223;
              *(_DWORD *)v222 = 141558531;
              v275 = 1752392040;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v275, &v276, v222 + 4, v222 + 12);
              *(_WORD *)(v222 + 12) = 2081;
              v224 = sub_10001BBBC(v179, v182);
              v225 = v247;
              static String.Encoding.utf8.getter(v224);
              v226 = String.init(data:encoding:)(v179, v182, v225);
              if (!v227)
                v226 = Data.hexString.getter(v179, v182);
              v228 = v226;
              v229 = v227;
              sub_10001BC14(v179, v182);
              v275 = sub_100016940(v228, v229, &v285);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v275, &v276, v222 + 14, v222 + 22);
              swift_bridgeObjectRelease();
              sub_10001BC14(v179, v182);
              sub_10001BC14(v179, v182);
              *(_WORD *)(v222 + 22) = 2082;
              v230 = v221;
              v231 = v221;
              v216 = v249;
              v232 = Data.hexString.getter(v231, v249);
              v275 = sub_100016940(v232, v233, &v285);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v275, &v276, v222 + 24, v222 + 32);
              swift_bridgeObjectRelease();
              sub_10001EF3C(v230, v216);
              sub_10001EF3C(v230, v216);
              v234 = v251;
              _os_log_impl((void *)&_mh_execute_header, v251, (os_log_type_t)v250, "Force pairing %{private,mask.hash}s with\nexisting sessionNonce: %{public}s", (uint8_t *)v222, 0x20u);
              swift_arrayDestroy(v223, 2, (char *)&type metadata for Any + 8);
              swift_slowDealloc(v223, -1, -1);
              swift_slowDealloc(v222, -1, -1);

              v218 = v230;
              sub_10001BC14(v179, v182);
              v186 = v260;
              sub_10001EF3C(v259, v260);
              v70 = v263;
            }
            else
            {
              sub_10001EF3C(v177, v180);
              sub_10001BC14(v179, v182);
              sub_10001BC14(v179, v182);
              sub_10001BC14(v179, v182);
              sub_10001EF3C(v218, v216);
              sub_10001EF3C(v218, v216);

              v186 = v180;
            }
            v69 = v262;
            v235 = *(_QWORD *)(v70 + v262);
            v236 = *(_QWORD *)(v235 + 16);
            v237 = *(_QWORD *)(v235 + 24);
            *(_QWORD *)(v235 + 16) = v218;
            *(_QWORD *)(v235 + 24) = v216;
            sub_10001BC14(v236, v237);
            goto LABEL_74;
          }
          sub_10001BC14(v179, v182);
          v69 = v262;
          v178 = v180;
        }
        sub_10001EF3C(v177, v178);
      }
      v259 = sub_1003700FC();
      v186 = v185;
LABEL_74:
      v260 = v186;
      v187 = *(_QWORD *)(v70 + v69);
      v189 = *(NSObject **)(v187 + 16);
      v250 = *(uint8_t **)(v187 + 24);
      v188 = (unint64_t)v250;
      v251 = v189;
      sub_10001BD08(v264, v244);
      sub_10001BD08(v242, (unint64_t)v240);
      sub_10001BBBC((uint64_t)v189, v188);
      sub_10001BBBC(v259, v186);
      sub_10001BD08(v254, v256);
      sub_1005101D8((uint64_t)v251, (uint64_t)v250);
      v190 = swift_retain_n(v70, 2);
      v191 = Logger.logObject.getter(v190);
      v192 = static os_log_type_t.default.getter(v191);
      if (os_log_type_enabled(v191, v192))
      {
        v193 = (uint8_t *)swift_slowAlloc(12, -1);
        v194 = swift_slowAlloc(32, -1);
        v251 = v194;
        *(_DWORD *)v193 = 136446210;
        v285 = (uint64_t)v194;
        v250 = v193 + 4;
        v195 = *(_QWORD *)(v70 + v69);
        v196 = v70;
        v198 = *(_QWORD *)(v195 + 16);
        v197 = *(_QWORD *)(v195 + 24);
        sub_10001BBBC(v198, v197);
        v199 = Data.hexString.getter(v198, v197);
        v201 = v200;
        sub_10001BC14(v198, v197);
        v269 = sub_100016940(v199, v201, &v285);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v269, v270, v250, v193 + 12);
        swift_release_n(v196, 2);
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v191, v192, "sessionNonce: %{public}s", v193, 0xCu);
        v202 = v251;
        swift_arrayDestroy(v251, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v202, -1, -1);
        swift_slowDealloc(v193, -1, -1);

      }
      else
      {

        swift_release_n(v70, 2);
      }
      v203 = (uint64_t)v243;
      v204 = v253;
      v205 = v254;
      v206 = v256;
      sub_10001BD08(v254, v256);
      v207 = sub_10001BD08(v205, v206);
      v208 = Logger.logObject.getter(v207);
      v209 = static os_log_type_t.default.getter(v208);
      if (!os_log_type_enabled(v208, v209))
      {
        sub_10001BC14(v257, (unint64_t)v258);
        sub_10001EF3C(v242, (unint64_t)v240);

        sub_10001EF3C(v205, v206);
        sub_10001EF3C(v205, v206);
        sub_10001EF3C(v204, v252);
        sub_10001EF3C(v264, v244);
        sub_10001BC14(v259, v260);
        sub_10001EF3C(v205, v206);
        sub_1000126B0(v255, type metadata accessor for OwnedBeaconGroup);
        v142 = v203;
        goto LABEL_58;
      }
      v210 = (uint8_t *)swift_slowAlloc(12, -1);
      v211 = swift_slowAlloc(32, -1);
      v285 = v211;
      *(_DWORD *)v210 = 136446210;
      if (v206 >> 60 == 15)
      {
        v212 = 0;
        v213 = 0xE000000000000000;
      }
      else
      {
        sub_10001BBBC(v205, v206);
        v212 = Data.hexString.getter(v205, v206);
        v213 = v214;
        sub_10001EF3C(v205, v206);
      }
      v269 = sub_100016940(v212, v213, &v285);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v269, v270, v210 + 4, v210 + 12);
      swift_bridgeObjectRelease();
      sub_10001EF3C(v205, v206);
      sub_10001EF3C(v205, v206);
      _os_log_impl((void *)&_mh_execute_header, v208, v209, "companionSessionNonce: %{public}s", v210, 0xCu);
      swift_arrayDestroy(v211, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v211, -1, -1);
      swift_slowDealloc(v210, -1, -1);
      sub_10001BC14(v257, (unint64_t)v258);
      sub_10001EF3C(v242, (unint64_t)v240);

      sub_10001EF3C(v253, v252);
      sub_10001EF3C(v264, v244);
      sub_10001BC14(v259, v260);
      sub_10001EF3C(v205, v206);
      sub_1000126B0(v255, type metadata accessor for OwnedBeaconGroup);
      goto LABEL_57;
    }
LABEL_65:
    v172 = v248;
    sub_10005972C(v81, v248, type metadata accessor for OwnedBeaconGroup);
    (*(void (**)(uint64_t, _QWORD, uint64_t, unint64_t))(v259 + 56))(v172, 0, 1, v260);
    v254 = sub_100C99384(v172, v145);
    v174 = v173;
    sub_100004048(v172, (uint64_t *)&unk_1010FF7F0);
    goto LABEL_67;
  }
  v46 = (uint64_t)v32;
  if (qword_1010EA318 != -1)
    swift_once(&qword_1010EA318, sub_100B5E330);
  v47 = type metadata accessor for Logger(0);
  v48 = sub_10001A9E8(v47, (uint64_t)qword_1011B7DF8);
  v49 = Logger.logObject.getter(v48);
  v50 = static os_log_type_t.error.getter(v49);
  if (os_log_type_enabled(v49, v50))
  {
    v51 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v51 = 0;
    _os_log_impl((void *)&_mh_execute_header, v49, v50, "Unable to generate E1 blob.", v51, 2u);
    swift_slowDealloc(v51, -1, -1);
  }

  sub_1000126B0(v46, type metadata accessor for AccessoryProductInfo);
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_QWORD *)(a3 + 32) = 0;
  *(_WORD *)(a3 + 40) = 267;
}

void sub_100A4CAEC(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  void *v8;
  id v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint64_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  unint64_t v33;
  uint8_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v2 = v1;
  v4 = type metadata accessor for DispatchPredicate(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (uint8_t **)((char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = *(void **)(v2 + 16);
  *v7 = v8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v5 + 104))(v7, enum case for DispatchPredicate.onQueue(_:), v4);
  v9 = v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)(v7);
  (*(void (**)(_QWORD *, uint64_t))(v5 + 8))(v7, v4);
  if ((v8 & 1) == 0)
  {
    __break(1u);
    goto LABEL_14;
  }
  v10 = sub_100B656E4();
  if (v11 >> 60 == 15)
  {
    if (qword_1010EA318 == -1)
    {
LABEL_4:
      v12 = type metadata accessor for Logger(0);
      v13 = sub_10001A9E8(v12, (uint64_t)qword_1011B7DF8);
      v14 = Logger.logObject.getter(v13);
      v15 = static os_log_type_t.error.getter(v14);
      if (os_log_type_enabled(v14, v15))
      {
        v16 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v16 = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, v15, "Unable to generate FindMyNetworkId.", v16, 2u);
        swift_slowDealloc(v16, -1, -1);
      }

      *(_QWORD *)(a1 + 32) = 0;
      *(_OWORD *)a1 = 0u;
      *(_OWORD *)(a1 + 16) = 0u;
      *(_WORD *)(a1 + 40) = 267;
      return;
    }
LABEL_14:
    swift_once(&qword_1010EA318, sub_100B5E330);
    goto LABEL_4;
  }
  v17 = v10;
  v18 = v11;
  if (qword_1010EA318 != -1)
    swift_once(&qword_1010EA318, sub_100B5E330);
  v19 = type metadata accessor for Logger(0);
  sub_10001A9E8(v19, (uint64_t)qword_1011B7DF8);
  sub_10001BBBC(v17, v18);
  v20 = sub_10001BBBC(v17, v18);
  v21 = Logger.logObject.getter(v20);
  v22 = static os_log_type_t.debug.getter(v21);
  if (os_log_type_enabled(v21, v22))
  {
    v23 = swift_slowAlloc(12, -1);
    v35 = v2;
    v24 = (uint8_t *)v23;
    v25 = swift_slowAlloc(32, -1);
    v37 = v25;
    *(_DWORD *)v24 = 136315138;
    v34 = v24 + 4;
    sub_10001BBBC(v17, v18);
    v26 = Data.hexString.getter(v17, v18);
    v28 = v27;
    sub_10001EF3C(v17, v18);
    v36 = sub_100016940(v26, v28, &v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, &v37, v34, v24 + 12);
    swift_bridgeObjectRelease();
    sub_10001EF3C(v17, v18);
    sub_10001EF3C(v17, v18);
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "findMyNetworkId: %s", v24, 0xCu);
    swift_arrayDestroy(v25, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v25, -1, -1);
    v29 = v24;
    v2 = v35;
    swift_slowDealloc(v29, -1, -1);
  }
  else
  {
    sub_10001EF3C(v17, v18);
    sub_10001EF3C(v17, v18);
  }

  v30 = *(_QWORD *)(v2 + 80);
  v31 = (uint64_t *)(*(_QWORD *)(v30 + OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingInfo)
                  + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_findMyNetworkId);
  v32 = *v31;
  v33 = v31[1];
  *v31 = v17;
  v31[1] = v18;
  sub_10001EF3C(v32, v33);
  *(_QWORD *)a1 = v30;
  *(_BYTE *)(a1 + 41) = 0;
  swift_retain();
}

uint64_t sub_100A4CE80(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[6];
  _QWORD v31[6];
  __int128 v32[2];
  char v33;

  v3 = v2;
  v6 = type metadata accessor for DispatchPredicate(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (uint64_t *)((char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = *(void **)(v3 + 16);
  *v9 = v10;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v7 + 104))(v9, enum case for DispatchPredicate.onQueue(_:), v6);
  v11 = v10;
  LOBYTE(v10) = _dispatchPreconditionTest(_:)(v9);
  (*(void (**)(_QWORD *, uint64_t))(v7 + 8))(v9, v6);
  if ((v10 & 1) == 0)
  {
    __break(1u);
LABEL_11:
    swift_once(&qword_1010EA318, sub_100B5E330);
    goto LABEL_5;
  }
  sub_10000F9B8(a1, (uint64_t)v32, &qword_101110ED0);
  if ((v33 & 1) != 0)
  {
    sub_100059244((uint64_t)v32, (uint64_t)v31);
    sub_100059280(v31, (uint64_t)v30);
    v12 = swift_allocObject(&unk_1010A7320, 57, 7);
    sub_100059244((uint64_t)v30, v12 + 16);
    v13 = sub_10001A9A8(&qword_101110ED8);
    swift_allocObject(v13, *(unsigned int *)(v13 + 48), *(unsigned __int16 *)(v13 + 52));
    v15 = Future.init(_:)(sub_100A74708, v12, v14);
    sub_1000593D4(v31);
    return v15;
  }
  sub_10000F9FC(v32, (uint64_t)v31);
  if (qword_1010EA318 != -1)
    goto LABEL_11;
LABEL_5:
  v16 = type metadata accessor for Logger(0);
  sub_10001A9E8(v16, (uint64_t)qword_1011B7DF8);
  v17 = sub_100030784((uint64_t)v31, (uint64_t)v30);
  v18 = Logger.logObject.getter(v17);
  v19 = static os_log_type_t.default.getter(v18);
  if (os_log_type_enabled(v18, v19))
  {
    v20 = (uint8_t *)swift_slowAlloc(12, -1);
    v21 = swift_slowAlloc(32, -1);
    v29 = v21;
    *(_DWORD *)v20 = 136446210;
    sub_100030784((uint64_t)v30, (uint64_t)&v27);
    v22 = sub_10001A9A8(&qword_101110F18);
    v23 = String.init<A>(describing:)(&v27, v22);
    v27 = sub_100016940(v23, v24, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, &v28, v20 + 4, v20 + 12);
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v30);
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "Sending %{public}s", v20, 0xCu);
    swift_arrayDestroy(v21, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v21, -1, -1);
    swift_slowDealloc(v20, -1, -1);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v30);
  }

  v15 = sub_100A68DC0((uint64_t)v31, a2);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v31);
  return v15;
}

#error "100A4D184: too big function (funcsize=0)"

void sub_100A604B8(uint64_t a1, NSObject *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33[3];
  uint64_t v34;
  uint64_t v35;

  v6 = type metadata accessor for BluetoothCommunicationCoordinator.Error(0);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)v33 - v10;
  v12 = sub_10001A9A8((uint64_t *)&unk_10111C0A0);
  __chkstk_darwin(v12);
  v14 = (char *)v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_10001A9A8(&qword_1010F37F0);
  __chkstk_darwin(v15);
  v17 = (char *)v33 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000F9B8(a1, (uint64_t)v17, &qword_1010F37F0);
  if (swift_getEnumCaseMultiPayload(v17, v15) == 1)
  {
    sub_1000126EC((uint64_t)v17, (uint64_t)v11, type metadata accessor for BluetoothCommunicationCoordinator.Error);
    if (qword_1010EA318 != -1)
      swift_once(&qword_1010EA318, sub_100B5E330);
    v18 = type metadata accessor for Logger(0);
    sub_10001A9E8(v18, (uint64_t)qword_1011B7DF8);
    v19 = sub_10005972C((uint64_t)v11, (uint64_t)v9, type metadata accessor for BluetoothCommunicationCoordinator.Error);
    v20 = Logger.logObject.getter(v19);
    v21 = static os_log_type_t.error.getter(v20);
    if (os_log_type_enabled(v20, v21))
    {
      v22 = (uint8_t *)swift_slowAlloc(12, -1);
      v23 = swift_slowAlloc(32, -1);
      v33[0] = v23;
      *(_DWORD *)v22 = 136446210;
      sub_100D07804();
      v34 = sub_100016940(v24, v25, v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, &v35, v22 + 4, v22 + 12);
      swift_bridgeObjectRelease();
      sub_1000126B0((uint64_t)v9, type metadata accessor for BluetoothCommunicationCoordinator.Error);
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "Failed to validate accessory due to %{public}s", v22, 0xCu);
      swift_arrayDestroy(v23, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v23, -1, -1);
      swift_slowDealloc(v22, -1, -1);

    }
    else
    {

      sub_1000126B0((uint64_t)v9, type metadata accessor for BluetoothCommunicationCoordinator.Error);
    }
    sub_1000126B0((uint64_t)v11, type metadata accessor for BluetoothCommunicationCoordinator.Error);
  }
  else
  {
    v26 = *(_QWORD *)v17;
    v27 = *(_QWORD *)(*(_QWORD *)(a3 + 80) + OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingInfo);
    v28 = *(_QWORD *)(*(_QWORD *)v17 + 16);
    v29 = type metadata accessor for AccessoryProductInfo(0);
    v30 = *(_QWORD *)(v29 - 8);
    if (v28)
    {
      sub_10005972C(v26 + ((*(unsigned __int8 *)(v30 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80)), (uint64_t)v14, type metadata accessor for AccessoryProductInfo);
      v31 = 0;
    }
    else
    {
      v31 = 1;
    }
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v30 + 56))(v14, v31, 1, v29);
    swift_retain();
    swift_bridgeObjectRelease();
    v32 = v27 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_productInfo;
    swift_beginAccess(v27 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_productInfo, v33, 33, 0);
    sub_100004084((uint64_t)v14, v32, (uint64_t *)&unk_10111C0A0);
    swift_endAccess(v33);
    swift_release();
  }
  dispatch_group_leave(a2);
}

uint64_t sub_100A6085C(uint64_t a1)
{
  _QWORD *v1;
  unint64_t v2;

  v1 = (_QWORD *)(a1 + *(int *)(type metadata accessor for AccessoryProductInfo(0) + 92));
  v2 = v1[1];
  if (v2 >> 60 == 15)
    return 0;
  else
    return Data.hexString.getter(*v1, v2);
}

uint64_t sub_100A608AC(uint64_t a1)
{
  _QWORD *v1;
  unint64_t v2;

  v1 = (_QWORD *)(a1 + *(int *)(type metadata accessor for AccessoryProductInfo(0) + 96));
  v2 = v1[1];
  if (v2 >> 60 == 15)
    return 0;
  else
    return Data.hexString.getter(*v1, v2);
}

uint64_t sub_100A608FC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingInfo);
  v2 = *(_QWORD *)(v1 + 16);
  v3 = *(_QWORD *)(v1 + 24);
  sub_10001BBBC(v2, v3);
  v4 = Data.hexString.getter(v2, v3);
  sub_10001BC14(v2, v3);
  return v4;
}

uint64_t sub_100A60968()
{
  uint64_t v0;
  int64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  char *v19;
  uint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  int v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  char isUniquelyReferenced_nonNull_native;
  int64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t *v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int64_t v62;
  unint64_t v63;
  int64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  unint64_t v71;
  uint64_t v72;
  _BOOL8 v73;
  uint64_t v74;
  char v75;
  uint64_t v76;
  char v77;
  uint64_t *v78;
  uint64_t v79;
  BOOL v80;
  uint64_t v81;
  uint64_t result;
  _QWORD v83[2];
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  int64_t v87;
  uint64_t v88;
  uint64_t v89;
  _BOOL4 v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t *v93;
  uint64_t *v94;
  int64_t v95;
  uint8_t *v96;
  uint64_t v97;
  uint64_t v98[2];
  uint64_t v99;
  uint64_t v100;

  v2 = v0;
  v3 = sub_10001A9A8((uint64_t *)&unk_1010F9890);
  v89 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v96 = (uint8_t *)v83 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10001A9A8(&qword_101110F20);
  v6 = __chkstk_darwin(v5);
  v94 = (_QWORD *)((char *)v83 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v6);
  v93 = (_QWORD *)((char *)v83 - v8);
  v9 = type metadata accessor for MultipartAccessoryPairingInfo(0);
  v92 = *(_QWORD *)(v9 - 8);
  v10 = __chkstk_darwin(v9);
  v97 = (uint64_t)v83 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)v83 - v13;
  v15 = __chkstk_darwin(v12);
  v17 = (_QWORD *)((char *)v83 - v16);
  __chkstk_darwin(v15);
  v19 = (char *)v83 - v18;
  v20 = *(uint64_t **)(v0 + 32);
  v21 = *(_QWORD *)(v0 + 40);
  v98[0] = (uint64_t)v20;
  v98[1] = v21;
  sub_10001BBBC((uint64_t)v20, v21);
  v22 = sub_100035530();
  if ((DataProtocol.isNull.getter(&type metadata for Data, v22) & 1) != 0)
  {
    sub_10001BC14((uint64_t)v20, v21);
    if (qword_1010EA318 != -1)
LABEL_50:
      swift_once(&qword_1010EA318, sub_100B5E330);
    v23 = type metadata accessor for Logger(0);
    sub_10001A9E8(v23, (uint64_t)qword_1011B7DF8);
    sub_100A73918((uint64_t *)v2, (void (*)(uint64_t, uint64_t))sub_10001BBBC);
    v24 = sub_100A73918((uint64_t *)v2, (void (*)(uint64_t, uint64_t))sub_10001BBBC);
    v25 = Logger.logObject.getter(v24);
    v26 = static os_log_type_t.error.getter(v25);
    if (os_log_type_enabled(v25, v26))
    {
      v27 = (uint8_t *)swift_slowAlloc(12, -1);
      v97 = swift_slowAlloc(32, -1);
      v98[0] = v97;
      *(_DWORD *)v27 = 136315138;
      v96 = v27 + 4;
      sub_10001BBBC((uint64_t)v20, v21);
      v28 = Data.description.getter(v20, v21);
      v17 = v29;
      sub_10001BC14((uint64_t)v20, v21);
      v99 = sub_100016940(v28, (unint64_t)v17, v98);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v99, &v100, v96, v27 + 12);
      swift_bridgeObjectRelease();
      sub_100A73918((uint64_t *)v2, (void (*)(uint64_t, uint64_t))sub_10001BC14);
      sub_100A73918((uint64_t *)v2, (void (*)(uint64_t, uint64_t))sub_10001BC14);
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "Invalid serial number %s!", v27, 0xCu);
      v30 = v97;
      swift_arrayDestroy(v97, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v30, -1, -1);
      swift_slowDealloc(v27, -1, -1);
    }
    else
    {
      sub_100A73918((uint64_t *)v2, (void (*)(uint64_t, uint64_t))sub_10001BC14);
      sub_100A73918((uint64_t *)v2, (void (*)(uint64_t, uint64_t))sub_10001BC14);
    }

    v45 = type metadata accessor for BinaryEncodingError(0);
    v46 = sub_100006C64((unint64_t *)&qword_1010EC000, 255, (uint64_t (*)(uint64_t))&type metadata accessor for BinaryEncodingError, (uint64_t)&protocol conformance descriptor for BinaryEncodingError);
    swift_allocError(v45, v46, 0, 0);
    v48 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v45 - 8) + 104))(v47, enum case for BinaryEncodingError.encodingError(_:), v45);
    swift_willThrow(v48);
    return (uint64_t)v17;
  }
  v31 = Data.trimmed.getter(v20, v21);
  v33 = v32;
  v34 = (uint64_t)v20;
  v35 = v21;
  v36 = v31;
  v37 = v33;
  sub_10001BC14(v34, v35);
  v38 = *(unsigned __int8 *)(v0 + 160);
  v39 = *(int *)(v9 + 24);
  v95 = v1;
  v40 = &v19[v39];
  v41 = type metadata accessor for MACAddress(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 56))(v40, 1, 1, v41);
  v90 = v38;
  *v19 = v38;
  v19[1] = 0;
  v19[*(int *)(v9 + 28)] = 1;
  sub_1000126EC((uint64_t)v19, (uint64_t)v17, type metadata accessor for MultipartAccessoryPairingInfo);
  sub_10001BBBC(v36, v37);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  v98[0] = (uint64_t)_swiftEmptyDictionarySingleton;
  sub_100109A84((uint64_t)v17, v36, v37, isUniquelyReferenced_nonNull_native);
  v17 = (_QWORD *)v98[0];
  swift_bridgeObjectRelease();
  sub_10001BC14(v36, v37);
  v43 = v95;
  v44 = sub_10004F450();
  if (v43)
  {
    swift_bridgeObjectRelease();
    sub_10001BC14(v36, v37);
    return (uint64_t)v17;
  }
  v83[1] = 0;
  v84 = v36;
  v91 = v9;
  v95 = 0;
  v88 = v44;
  v49 = *(_QWORD *)(v44 + 64);
  v85 = v37;
  v86 = v44 + 64;
  v50 = 1 << *(_BYTE *)(v44 + 32);
  v51 = -1;
  if (v50 < 64)
    v51 = ~(-1 << v50);
  v52 = v51 & v49;
  v90 = !v90;
  v87 = (unint64_t)(v50 + 63) >> 6;
  v83[0] = v87 - 1;
  v20 = &qword_101110F28;
  v53 = v93;
  v2 = 1;
  while (1)
  {
    v21 = (uint64_t)v94;
    if (v52)
    {
      v54 = __clz(__rbit64(v52));
      v52 &= v52 - 1;
      v55 = v54 | (v95 << 6);
LABEL_16:
      v56 = *(_QWORD *)(v88 + 56);
      v57 = (uint64_t *)(*(_QWORD *)(v88 + 48) + 16 * v55);
      v58 = *v57;
      v59 = v57[1];
      *v94 = *v57;
      *(_QWORD *)(v21 + 8) = v59;
      v60 = v56 + *(_QWORD *)(v89 + 72) * v55;
      v61 = sub_10001A9A8(&qword_101110F28);
      sub_10000F9B8(v60, v21 + *(int *)(v61 + 48), (uint64_t *)&unk_1010F9890);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v61 - 8) + 56))(v21, 0, 1, v61);
      sub_10001BBBC(v58, v59);
      goto LABEL_35;
    }
    v62 = v95 + 1;
    if (__OFADD__(v95, 1))
      goto LABEL_49;
    if (v62 < v87)
    {
      v63 = *(_QWORD *)(v86 + 8 * v62);
      if (v63)
        goto LABEL_20;
      v64 = v95 + 2;
      ++v95;
      if (v62 + 1 < v87)
      {
        v63 = *(_QWORD *)(v86 + 8 * v64);
        if (v63)
          goto LABEL_23;
        v95 = v62 + 1;
        if (v62 + 2 < v87)
        {
          v63 = *(_QWORD *)(v86 + 8 * (v62 + 2));
          if (v63)
          {
            v62 += 2;
            goto LABEL_20;
          }
          v64 = v62 + 3;
          v95 = v62 + 2;
          if (v62 + 3 < v87)
            break;
        }
      }
    }
LABEL_34:
    v65 = sub_10001A9A8(&qword_101110F28);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v65 - 8) + 56))(v21, 1, 1, v65);
    v52 = 0;
LABEL_35:
    sub_100005CF0(v21, (uint64_t)v53, &qword_101110F20);
    v66 = sub_10001A9A8(&qword_101110F28);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v66 - 8) + 48))(v53, 1, v66) == 1)
    {
      swift_release();
      sub_10001BC14(v84, v85);
      return (uint64_t)v17;
    }
    v21 = *v53;
    v20 = (uint64_t *)v53[1];
    v67 = (uint64_t)v53 + *(int *)(v66 + 48);
    v68 = (uint64_t)v96;
    sub_100005CF0(v67, (uint64_t)v96, (uint64_t *)&unk_1010F9890);
    v69 = v91;
    sub_10000F9B8(v68, (uint64_t)&v14[*(int *)(v91 + 24)], (uint64_t *)&unk_1010F9890);
    *v14 = v90;
    v14[1] = 0;
    v14[*(int *)(v69 + 28)] = 1;
    sub_1000126EC((uint64_t)v14, v97, type metadata accessor for MultipartAccessoryPairingInfo);
    sub_10001BBBC(v21, (unint64_t)v20);
    v2 = swift_isUniquelyReferenced_nonNull_native(v17);
    v98[0] = (uint64_t)v17;
    v71 = sub_100518E4C(v21, (unint64_t)v20);
    v72 = v17[2];
    v73 = (v70 & 1) == 0;
    v74 = v72 + v73;
    if (__OFADD__(v72, v73))
    {
      __break(1u);
LABEL_48:
      __break(1u);
LABEL_49:
      __break(1u);
      goto LABEL_50;
    }
    v75 = v70;
    if (v17[3] >= v74)
    {
      if ((v2 & 1) == 0)
        sub_100A99950();
    }
    else
    {
      sub_100A84704(v74, v2);
      v76 = sub_100518E4C(v21, (unint64_t)v20);
      if ((v75 & 1) != (v77 & 1))
        goto LABEL_52;
      v71 = v76;
    }
    v2 = 1;
    v17 = (_QWORD *)v98[0];
    if ((v75 & 1) != 0)
    {
      sub_10010FA18(v97, *(_QWORD *)(v98[0] + 56) + *(_QWORD *)(v92 + 72) * v71, type metadata accessor for MultipartAccessoryPairingInfo);
    }
    else
    {
      *(_QWORD *)(v98[0] + 8 * (v71 >> 6) + 64) |= 1 << v71;
      v78 = (uint64_t *)(v17[6] + 16 * v71);
      *v78 = v21;
      v78[1] = (uint64_t)v20;
      sub_1000126EC(v97, v17[7] + *(_QWORD *)(v92 + 72) * v71, type metadata accessor for MultipartAccessoryPairingInfo);
      v79 = v17[2];
      v80 = __OFADD__(v79, 1);
      v81 = v79 + 1;
      if (v80)
        goto LABEL_48;
      v17[2] = v81;
      sub_10001BBBC(v21, (unint64_t)v20);
    }
    swift_bridgeObjectRelease();
    sub_10001BC14(v21, (unint64_t)v20);
    sub_10001BC14(v21, (unint64_t)v20);
    sub_100004048((uint64_t)v96, (uint64_t *)&unk_1010F9890);
    v53 = v93;
    v20 = &qword_101110F28;
  }
  v63 = *(_QWORD *)(v86 + 8 * v64);
  if (v63)
  {
LABEL_23:
    v62 = v64;
LABEL_20:
    v52 = (v63 - 1) & v63;
    v55 = __clz(__rbit64(v63)) + (v62 << 6);
    v95 = v62;
    goto LABEL_16;
  }
  while (1)
  {
    v62 = v64 + 1;
    if (__OFADD__(v64, 1))
      break;
    if (v62 >= v87)
    {
      v95 = v83[0];
      goto LABEL_34;
    }
    v63 = *(_QWORD *)(v86 + 8 * v62);
    ++v64;
    if (v63)
      goto LABEL_20;
  }
  __break(1u);
LABEL_52:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for OwnedBeaconGroup.SerialNumber);
  __break(1u);
  return result;
}

uint64_t sub_100A612AC()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  __int128 *v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  os_log_type_t v31;
  uint8_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40[4];
  _QWORD *v41;

  v41 = _swiftEmptyDictionarySingleton;
  *(_OWORD *)v40 = *(_OWORD *)(v0 + 16);
  v1 = sub_100035530();
  v2 = DataProtocol.intValue.getter(&type metadata for Data, v1);
  if (qword_1010EA318 != -1)
    swift_once(&qword_1010EA318, sub_100B5E330);
  v3 = type metadata accessor for Logger(0);
  v4 = sub_10001A9E8(v3, (uint64_t)qword_1011B7DF8);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.default.getter(v5);
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v7 = 134349056;
    v40[0] = v2;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v40, &v40[1], v7 + 4, v7 + 12);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Number of beacons: %{public}ld", v7, 0xCu);
    swift_slowDealloc(v7, -1, -1);
  }

  if (v2 < 2)
    return (uint64_t)v41;
  v10 = *(_QWORD *)(v0 + 48);
  v9 = *(_QWORD *)(v0 + 56);
  v11 = static MACAddress.length.getter(v8);
  v12 = __OFADD__(v11, 20);
  result = v11 + 20;
  if (v12)
  {
    __break(1u);
  }
  else
  {
    v14 = Data.chunked(into:)(result, v10, v9);
    v15 = *(_QWORD *)(v14 + 16);
    if (v15)
    {
      v16 = (__int128 *)(v14 + 32);
      do
      {
        v17 = *v16++;
        *(_OWORD *)v40 = v17;
        sub_100A6DC50(v40);
        --v15;
      }
      while (v15);
    }
    v18 = swift_bridgeObjectRelease();
    v19 = v41[2];
    v20 = Logger.logObject.getter(v18);
    v21 = v20;
    if (v19 == v2 - 1)
    {
      v22 = static os_log_type_t.default.getter(v20);
      if (os_log_type_enabled(v21, v22))
      {
        v23 = (uint8_t *)swift_slowAlloc(12, -1);
        v24 = swift_slowAlloc(32, -1);
        v40[0] = v24;
        *(_DWORD *)v23 = 136315138;
        swift_beginAccess(&v41, &v38, 0, 0);
        v25 = v41;
        swift_bridgeObjectRetain(v41);
        v26 = sub_10001A9A8((uint64_t *)&unk_1010F9890);
        v27 = sub_100059BCC();
        v28 = Dictionary.description.getter(v25, &type metadata for OwnedBeaconGroup.SerialNumber, v26, v27);
        v30 = v29;
        swift_bridgeObjectRelease();
        v37 = sub_100016940(v28, v30, v40);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, &v38, v23 + 4, v23 + 12);
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v21, v22, "serialNumbersAndMacAddressesMap: %s", v23, 0xCu);
        swift_arrayDestroy(v24, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v24, -1, -1);
        swift_slowDealloc(v23, -1, -1);
      }

      swift_beginAccess(&v41, v40, 0, 0);
      return (uint64_t)v41;
    }
    v31 = static os_log_type_t.error.getter(v20);
    if (os_log_type_enabled(v21, v31))
    {
      v32 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v32 = 134349056;
      swift_beginAccess(&v41, v40, 0, 0);
      v38 = v41[2];
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39, v32 + 4, v32 + 12);
      _os_log_impl((void *)&_mh_execute_header, v21, v31, "Unexpected number of other serial numbers: %{public}ld", v32, 0xCu);
      swift_slowDealloc(v32, -1, -1);
    }

    v33 = type metadata accessor for BinaryEncodingError(0);
    v34 = sub_100006C64((unint64_t *)&qword_1010EC000, 255, (uint64_t (*)(uint64_t))&type metadata accessor for BinaryEncodingError, (uint64_t)&protocol conformance descriptor for BinaryEncodingError);
    swift_allocError(v33, v34, 0, 0);
    v36 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v33 - 8) + 104))(v35, enum case for BinaryEncodingError.encodingError(_:), v33);
    swift_willThrow(v36);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_100A61704()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;
  __int128 v11;
  uint64_t result;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  _QWORD *v22;

  v22 = _swiftEmptyDictionarySingleton;
  v21 = *(_OWORD *)(v0 + 16);
  v1 = sub_100035530();
  v2 = DataProtocol.intValue.getter(&type metadata for Data, v1);
  if (qword_1010EA318 != -1)
    swift_once(&qword_1010EA318, sub_100B5E330);
  v3 = type metadata accessor for Logger(0);
  v4 = sub_10001A9E8(v3, (uint64_t)qword_1011B7DF8);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.default.getter(v5);
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v7 = 134349056;
    *(_QWORD *)&v21 = v2;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, (char *)&v21 + 8, v7 + 4, v7 + 12);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Number of beacons: %{public}ld", v7, 0xCu);
    swift_slowDealloc(v7, -1, -1);
  }

  if (v2 < 2)
    return (uint64_t)v22;
  v8 = Data.chunked(into:)(21, *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72));
  v9 = *(_QWORD *)(v8 + 16);
  if (v9)
  {
    v10 = (__int128 *)(v8 + 32);
    do
    {
      v11 = *v10++;
      v21 = v11;
      sub_100A6D830(&v21);
      --v9;
    }
    while (v9);
  }
  swift_bridgeObjectRelease();
  result = (uint64_t)v22;
  if (v22[2] != v2 - 1)
  {
    v13 = Logger.logObject.getter(v22);
    v14 = static os_log_type_t.error.getter(v13);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v15 = 134349056;
      swift_beginAccess(&v22, &v21, 0, 0);
      v20 = v22[2];
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, &v21, v15 + 4, v15 + 12);
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Unexpected number of other serial numbers: %{public}ld", v15, 0xCu);
      swift_slowDealloc(v15, -1, -1);
    }

    v16 = type metadata accessor for BinaryEncodingError(0);
    v17 = sub_100006C64((unint64_t *)&qword_1010EC000, 255, (uint64_t (*)(uint64_t))&type metadata accessor for BinaryEncodingError, (uint64_t)&protocol conformance descriptor for BinaryEncodingError);
    swift_allocError(v16, v17, 0, 0);
    v19 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v16 - 8) + 104))(v18, enum case for BinaryEncodingError.encodingError(_:), v16);
    swift_willThrow(v19);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_100A619E4(uint64_t a1)
{
  uint64_t v1;
  _BYTE v3[40];

  sub_100030784(a1, (uint64_t)v3);
  v1 = sub_10001A9A8(&qword_101110F18);
  return String.init<A>(describing:)(v3, v1);
}

void sub_100A61A1C(int64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (**v7)(uint64_t, uint64_t, uint64_t, unint64_t);
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  void *v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  int64_t v27;
  uint64_t (*v28)(uint64_t);
  unint64_t v29;
  unint64_t i;
  int64_t v31;
  unint64_t v32;
  int64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  uint8_t *v41;
  uint64_t v42;
  uint64_t v43;
  NSObject *v44;
  os_log_type_t v45;
  uint8_t *v46;
  unint64_t v47;
  uint64_t v48;
  _BYTE *v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  NSObject *v55;
  os_log_type_t v56;
  uint8_t *v57;
  uint64_t v58;
  NSObject *v59;
  os_log_type_t v60;
  uint8_t *v61;
  unint64_t v62;
  uint64_t v63;
  _BYTE *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t (*v67)(uint64_t);
  char *v68;
  uint64_t v69;
  int64_t v70;
  uint64_t v71;
  uint64_t v72;
  void (**v73)(uint64_t, uint64_t, uint64_t, unint64_t);
  unint64_t v74;
  _QWORD v75[5];
  char v76;
  _BYTE v77[56];

  v3 = type metadata accessor for MultipartAccessoryPairingInfo(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = (void (**)(uint64_t, uint64_t, uint64_t, unint64_t))((char *)&v65
                                                                         - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v5);
  v9 = (char *)&v65 - v8;
  v10 = sub_10001A9A8(&qword_1010EC008);
  __chkstk_darwin(v10);
  v71 = (uint64_t)&v65 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10001A9A8((uint64_t *)&unk_1010F9890);
  __chkstk_darwin(v12);
  v72 = (uint64_t)&v65 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for MACAddress(0);
  v73 = *(void (***)(uint64_t, uint64_t, uint64_t, unint64_t))(v14 - 8);
  v74 = v14;
  __chkstk_darwin(v14);
  v68 = (char *)&v65 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for DispatchPredicate(0);
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v19 = (uint64_t *)((char *)&v65 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  v20 = *(void **)(v1 + 16);
  *v19 = v20;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v17 + 104))(v19, enum case for DispatchPredicate.onQueue(_:), v16);
  v21 = v20;
  LOBYTE(v20) = _dispatchPreconditionTest(_:)(v19);
  (*(void (**)(_QWORD *, uint64_t))(v17 + 8))(v19, v16);
  if ((v20 & 1) == 0)
    goto LABEL_54;
  v69 = v1;
  v70 = a1;
  v67 = *(uint64_t (**)(uint64_t))(v1 + 80);
  v66 = OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingInfo;
  v22 = *(_QWORD *)(*(_QWORD *)((char *)v67 + OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingInfo)
                  + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_allSerialNumbersAndPartIds);
  v23 = v22 + 64;
  v24 = 1 << *(_BYTE *)(v22 + 32);
  v25 = -1;
  if (v24 < 64)
    v25 = ~(-1 << v24);
  v26 = v25 & *(_QWORD *)(v22 + 64);
  a1 = (unint64_t)(v24 + 63) >> 6;
  swift_bridgeObjectRetain_n(v22, 2);
  v27 = 0;
  v28 = type metadata accessor for MultipartAccessoryPairingInfo;
  if (!v26)
    goto LABEL_6;
LABEL_5:
  v29 = __clz(__rbit64(v26));
  v26 &= v26 - 1;
  for (i = v29 | (v27 << 6); ; i = __clz(__rbit64(v32)) + (v27 << 6))
  {
    sub_10005972C(*(_QWORD *)(v22 + 56) + *(_QWORD *)(v4 + 72) * i, (uint64_t)v9, type metadata accessor for MultipartAccessoryPairingInfo);
    sub_1000126EC((uint64_t)v9, (uint64_t)v7, type metadata accessor for MultipartAccessoryPairingInfo);
    if (*((_BYTE *)v7 + *(int *)(v3 + 28)) == 2)
    {
      swift_release();
      v34 = v71;
      sub_1000126EC((uint64_t)v7, v71, type metadata accessor for MultipartAccessoryPairingInfo);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v4 + 56))(v34, 0, 1, v3);
      goto LABEL_29;
    }
    sub_1000126B0((uint64_t)v7, type metadata accessor for MultipartAccessoryPairingInfo);
    if (v26)
      goto LABEL_5;
LABEL_6:
    v31 = v27 + 1;
    if (__OFADD__(v27, 1))
      break;
    if (v31 >= a1)
      goto LABEL_28;
    v32 = *(_QWORD *)(v23 + 8 * v31);
    ++v27;
    if (!v32)
    {
      v27 = v31 + 1;
      if (v31 + 1 >= a1)
        goto LABEL_28;
      v32 = *(_QWORD *)(v23 + 8 * v27);
      if (!v32)
      {
        v27 = v31 + 2;
        if (v31 + 2 >= a1)
          goto LABEL_28;
        v32 = *(_QWORD *)(v23 + 8 * v27);
        if (!v32)
        {
          v27 = v31 + 3;
          if (v31 + 3 >= a1)
            goto LABEL_28;
          v32 = *(_QWORD *)(v23 + 8 * v27);
          if (!v32)
          {
            v27 = v31 + 4;
            if (v31 + 4 >= a1)
              goto LABEL_28;
            v32 = *(_QWORD *)(v23 + 8 * v27);
            if (!v32)
            {
              v33 = v31 + 5;
              if (v33 < a1)
              {
                v32 = *(_QWORD *)(v23 + 8 * v33);
                if (v32)
                {
                  v27 = v33;
                  goto LABEL_23;
                }
                while (1)
                {
                  v27 = v33 + 1;
                  if (__OFADD__(v33, 1))
                    break;
                  if (v27 >= a1)
                    goto LABEL_28;
                  v32 = *(_QWORD *)(v23 + 8 * v27);
                  ++v33;
                  if (v32)
                    goto LABEL_23;
                }
                __break(1u);
LABEL_57:
                swift_once(&qword_1010EA318, sub_100B5E330);
LABEL_39:
                v42 = type metadata accessor for Logger(0);
                v43 = sub_10001A9E8(v42, (uint64_t)qword_1011B7DF8);
                v44 = Logger.logObject.getter(v43);
                v45 = static os_log_type_t.default.getter(v44);
                if (os_log_type_enabled(v44, v45))
                {
                  v46 = (uint8_t *)swift_slowAlloc(2, -1);
                  *(_WORD *)v46 = 0;
                  _os_log_impl((void *)&_mh_execute_header, v44, v45, "Standalone: Skipping BA pairing over classic and proceed with LE Pairing", v46, 2u);
                  swift_slowDealloc(v46, -1, -1);
                }

                v47 = sub_100A729E8();
                v48 = swift_allocError(&type metadata for AirPodsPairingManager.AirPodsPairingManagerError, v47, 0, 0);
                *v49 = 4;
                v75[0] = v48;
                v76 = 0;
                sub_100059244((uint64_t)v75, (uint64_t)v77);
                v50 = *(_QWORD *)((char *)v28 + v22);
                v51 = *(_QWORD *)(v50 + 16);
                v52 = *(_QWORD *)(v50 + 24);
                sub_10001BBBC(v51, v52);
                sub_100A71EDC((uint64_t)v9);
                sub_10001BC14(v51, v52);
                goto LABEL_52;
              }
LABEL_28:
              swift_release();
              v34 = v71;
              (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 56))(v71, 1, 1, v3);
LABEL_29:
              swift_bridgeObjectRelease();
              v35 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v34, 1, v3);
              a1 = v70;
              v7 = v73;
              v26 = v74;
              v36 = v72;
              if (v35 == 1)
              {
                sub_100004048(v34, &qword_1010EC008);
                v7[7](v36, 1, 1, v26);
              }
              else
              {
                sub_10000F9B8(v34 + *(int *)(v3 + 24), v72, (uint64_t *)&unk_1010F9890);
                sub_1000126B0(v34, type metadata accessor for MultipartAccessoryPairingInfo);
                if (((unsigned int (*)(uint64_t, uint64_t, unint64_t))v7[6])(v36, 1, v26) != 1)
                {
                  v9 = v68;
                  ((void (*)(char *, uint64_t, unint64_t))v7[4])(v68, v36, v26);
                  v28 = v67;
                  v22 = v66;
                  *(_BYTE *)(*(_QWORD *)((char *)v67 + v66)
                           + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_skippedClassic) = 1;
                  if (*(_BYTE *)(v69 + 72) == 1)
                  {
                    if (qword_1010EA318 != -1)
                      goto LABEL_57;
                    goto LABEL_39;
                  }
                  if (qword_1010EA318 != -1)
                    swift_once(&qword_1010EA318, sub_100B5E330);
                  v53 = type metadata accessor for Logger(0);
                  v54 = sub_10001A9E8(v53, (uint64_t)qword_1011B7DF8);
                  v55 = Logger.logObject.getter(v54);
                  v56 = static os_log_type_t.default.getter(v55);
                  if (os_log_type_enabled(v55, v56))
                  {
                    v57 = (uint8_t *)swift_slowAlloc(2, -1);
                    *(_WORD *)v57 = 0;
                    _os_log_impl((void *)&_mh_execute_header, v55, v56, "Skipping classic pairing and start LE pairing", v57, 2u);
                    swift_slowDealloc(v57, -1, -1);
                  }

                  v58 = QueueSynchronizer.conditionalSync<A>(_:)(sub_100A725D8);
                  if ((v75[0] & 1) != 0
                    || (v58 = QueueSynchronizer.conditionalSync<A>(_:)(sub_100A7597C), (v75[0] & 1) != 0))
                  {
                    v59 = Logger.logObject.getter(v58);
                    v60 = static os_log_type_t.default.getter(v59);
                    if (os_log_type_enabled(v59, v60))
                    {
                      v61 = (uint8_t *)swift_slowAlloc(2, -1);
                      *(_WORD *)v61 = 0;
                      _os_log_impl((void *)&_mh_execute_header, v59, v60, "LE Pairing is in progress!", v61, 2u);
                      swift_slowDealloc(v61, -1, -1);
                    }

                    ((void (*)(char *, unint64_t))v7[1])(v9, v26);
                    goto LABEL_36;
                  }
                  v62 = sub_100A729E8();
                  v63 = swift_allocError(&type metadata for AirPodsPairingManager.AirPodsPairingManagerError, v62, 0, 0);
                  *v64 = 5;
                  v75[0] = v63;
                  v76 = 0;
                  sub_100059244((uint64_t)v75, (uint64_t)v77);
                  sub_100A6B0BC((uint64_t)v9, 0, 0);
LABEL_52:
                  ((void (*)(char *, unint64_t))v7[1])(v9, v26);
                  sub_100059244((uint64_t)v77, a1);
                  *(_BYTE *)(a1 + 41) = 1;
                  return;
                }
              }
              sub_100004048(v36, (uint64_t *)&unk_1010F9890);
              if (qword_1010EA318 != -1)
                goto LABEL_55;
              goto LABEL_33;
            }
          }
        }
      }
    }
LABEL_23:
    v26 = (v32 - 1) & v32;
  }
  __break(1u);
LABEL_54:
  __break(1u);
LABEL_55:
  swift_once(&qword_1010EA318, sub_100B5E330);
LABEL_33:
  v37 = type metadata accessor for Logger(0);
  v38 = sub_10001A9E8(v37, (uint64_t)qword_1011B7DF8);
  v39 = Logger.logObject.getter(v38);
  v40 = static os_log_type_t.error.getter(v39);
  if (os_log_type_enabled(v39, v40))
  {
    v41 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v41 = 0;
    _os_log_impl((void *)&_mh_execute_header, v39, v40, "Missing MAC address to start LE pairing", v41, 2u);
    swift_slowDealloc(v41, -1, -1);
  }

LABEL_36:
  *(_QWORD *)a1 = 7;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_WORD *)(a1 + 40) = 267;
}

void sub_100A622B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  void *v22;
  id v23;
  id v24;
  unsigned int v25;
  char *v26;
  void (*v27)(char *, uint64_t);
  uint64_t v28;
  void (*v29)(char *, _QWORD, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  NSObject *v52;
  os_log_type_t v53;
  uint8_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char *v59;
  void (*v60)(char *, uint64_t);
  char *v61;
  unint64_t v62;
  id v63;
  void *v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void (*v85)(char *, _QWORD, uint64_t);
  uint64_t v86;
  void (*v87)(char *, uint64_t);
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  void (*v91)(char *, uint64_t);
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  __int128 v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;

  v4 = v3;
  v88 = a2;
  v89 = a3;
  v90 = a1;
  v92 = type metadata accessor for LocalizationUtility.Table(0);
  v5 = *(_QWORD *)(v92 - 8);
  __chkstk_darwin(v92);
  v7 = (char *)&v79 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v93 = type metadata accessor for MACAddress(0);
  v8 = *(_QWORD *)(v93 - 8);
  v9 = __chkstk_darwin(v93);
  v91 = (void (*)(char *, uint64_t))((char *)&v79 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v79 - v12;
  v14 = __chkstk_darwin(v11);
  v16 = (char *)&v79 - v15;
  __chkstk_darwin(v14);
  v94 = (char *)&v79 - v17;
  v18 = type metadata accessor for DispatchPredicate(0);
  v19 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18);
  v21 = (char *)&v79 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = *(void **)(v4 + 16);
  *(_QWORD *)v21 = v22;
  (*(void (**)(char *, _QWORD, uint64_t))(v19 + 104))(v21, enum case for DispatchPredicate.onQueue(_:), v18);
  v23 = v22;
  LOBYTE(v22) = _dispatchPreconditionTest(_:)(v21);
  (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v18);
  if ((v22 & 1) == 0)
  {
    __break(1u);
LABEL_20:
    swift_once(&qword_1010EA318, sub_100B5E330);
    goto LABEL_7;
  }
  v24 = objc_msgSend((id)objc_opt_self(FMSystemInfo), "sharedInstance");
  v25 = objc_msgSend(v24, "isInternalBuild");

  if (!v25)
    return;
  v26 = v94;
  v86 = *(_QWORD *)(v4 + 64);
  sub_100786FB4(v94);
  v21 = *(char **)(v8 + 16);
  v19 = v93;
  ((void (*)(char *, char *, uint64_t))v21)(v13, v26, v93);
  *(_QWORD *)&v96 = sub_100A3EA24();
  LOBYTE(v26) = sub_100A0EA5C((uint64_t)v16, v13);
  v27 = *(void (**)(char *, uint64_t))(v8 + 8);
  v27(v16, v19);
  sub_100A3EE54(v96);
  v87 = v27;
  if ((v26 & 1) != 0)
  {
    v28 = enum case for LocalizationUtility.Table.default(_:);
    v29 = *(void (**)(char *, _QWORD, uint64_t))(v5 + 104);
    v30 = v92;
    v29(v7, enum case for LocalizationUtility.Table.default(_:), v92);
    v85 = (void (*)(char *, _QWORD, uint64_t))static LocalizationUtility.localizedString(key:table:)(0xD000000000000013, 0x8000000100EECF90, v7);
    v32 = v31;
    v91 = *(void (**)(char *, uint64_t))(v5 + 8);
    v91(v7, v30);
    v80 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v33 = swift_allocObject(v80, 72, 7);
    *(_OWORD *)(v33 + 16) = xmmword_100E22B00;
    *(_QWORD *)&v96 = v90;
    v34 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    v36 = v35;
    *(_QWORD *)(v33 + 56) = &type metadata for String;
    v37 = sub_10001AA00();
    *(_QWORD *)(v33 + 64) = v37;
    *(_QWORD *)(v33 + 32) = v34;
    *(_QWORD *)(v33 + 40) = v36;
    v84 = String.init(format:_:)(v85, v32, v33);
    v39 = v38;
    swift_bridgeObjectRelease();
    LODWORD(v90) = v28;
    v85 = v29;
    v29(v7, v28, v30);
    v81 = static LocalizationUtility.localizedString(key:table:)(0xD000000000000015, 0x8000000100EECFB0, v7);
    v82 = v40;
    v91(v7, v30);
    v41 = swift_allocObject(v80, 152, 7);
    v42 = (_QWORD *)v41;
    *(_OWORD *)(v41 + 16) = xmmword_100E221E0;
    v43 = *(_QWORD *)(v86 + OBJC_IVAR____TtC12searchpartyd10Peripheral_injectedName + 8);
    v83 = v39;
    if (v43)
    {
      v44 = *(_QWORD *)(v86 + OBJC_IVAR____TtC12searchpartyd10Peripheral_injectedName);
      v45 = v43;
      *(_QWORD *)(v41 + 56) = &type metadata for String;
      *(_QWORD *)(v41 + 64) = v37;
      v46 = v88;
      v47 = v89;
LABEL_17:
      v42[4] = v44;
      v42[5] = v45;
      *(_QWORD *)&v96 = v46;
      swift_bridgeObjectRetain(v43);
      v66 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
      v42[12] = &type metadata for String;
      v42[13] = v37;
      v42[9] = v66;
      v42[10] = v67;
      *(_QWORD *)&v96 = v47;
      v68 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
      v42[17] = &type metadata for String;
      v42[18] = v37;
      v42[14] = v68;
      v42[15] = v69;
      v70 = String.init(format:_:)(v81, v82, v42);
      v72 = v71;
      swift_bridgeObjectRelease();
      v73 = v92;
      v85(v7, v90, v92);
      v74 = static LocalizationUtility.localizedString(key:table:)(0xD00000000000001CLL, 0x8000000100EECFD0, v7);
      v76 = v75;
      v91(v7, v73);
      v77 = v83;
      *(_QWORD *)&v96 = v84;
      *((_QWORD *)&v96 + 1) = v83;
      v97 = v70;
      v98 = v72;
      v99 = v74;
      v100 = v76;
      v78 = type metadata accessor for SBAlertHelper();
      v101 = 0u;
      v102 = 0u;
      v103 = 0u;
      swift_allocObject(v78, 272, 7);
      sub_100C45E78(&v96);
      swift_bridgeObjectRetain(v77);
      swift_bridgeObjectRetain(v72);
      swift_bridgeObjectRetain(v76);
      sub_10001D898(0, 0);
      sub_10001D898(0, 0);
      sub_100C468AC();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      sub_10001D8A8(0, 0);
      sub_10001D8A8(0, 0);
      v87(v94, v93);
      return;
    }
    v62 = v37;
    v63 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v86
                                                                + OBJC_IVAR____TtC12searchpartyd10Peripheral_underlyingObject), "name"));
    if (v63)
    {
      v64 = v63;
      v44 = static String._unconditionallyBridgeFromObjectiveC(_:)(v63);
      v45 = v65;

      v42[7] = &type metadata for String;
      v42[8] = v62;
      v46 = v88;
      v47 = v89;
      if (v45)
      {
LABEL_16:
        v37 = v62;
        goto LABEL_17;
      }
    }
    else
    {
      v42[7] = &type metadata for String;
      v42[8] = v37;
      v46 = v88;
      v47 = v89;
    }
    v44 = 0;
    v45 = 0xE000000000000000;
    goto LABEL_16;
  }
  if (qword_1010EA318 != -1)
    goto LABEL_20;
LABEL_7:
  v48 = type metadata accessor for Logger(0);
  sub_10001A9E8(v48, (uint64_t)qword_1011B7DF8);
  v49 = (char *)v91;
  v50 = v94;
  v51 = ((uint64_t (*)(void (*)(char *, uint64_t), char *, uint64_t))v21)(v91, v94, v19);
  v52 = Logger.logObject.getter(v51);
  v53 = static os_log_type_t.default.getter(v52);
  if (os_log_type_enabled(v52, v53))
  {
    v54 = (uint8_t *)swift_slowAlloc(12, -1);
    v55 = swift_slowAlloc(32, -1);
    *(_QWORD *)&v96 = v55;
    *(_DWORD *)v54 = 136446210;
    v56 = sub_100006C64((unint64_t *)&qword_1010FBAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for MACAddress, (uint64_t)&protocol conformance descriptor for MACAddress);
    v57 = dispatch thunk of CustomStringConvertible.description.getter(v19, v56);
    v95 = sub_100016940(v57, v58, (uint64_t *)&v96);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v95, &v96, v54 + 4, v54 + 12);
    swift_bridgeObjectRelease();
    v59 = v49;
    v60 = v87;
    v87(v59, v19);
    _os_log_impl((void *)&_mh_execute_header, v52, v53, "Limit reached alert has already been shown for %{public}s.", v54, 0xCu);
    swift_arrayDestroy(v55, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v55, -1, -1);
    swift_slowDealloc(v54, -1, -1);

  }
  else
  {

    v61 = v49;
    v60 = v87;
    v87(v61, v19);
  }
  v60(v50, v19);
}

uint64_t sub_100A62A6C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  void *v17;
  id v18;
  uint64_t result;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  NSObject *v27;
  uint64_t v28;
  NSObject *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  _QWORD v41[3];
  uint64_t v42;

  v3 = v2;
  v40 = a1;
  v5 = sub_10001A9A8(&qword_101104EC8);
  __chkstk_darwin(v5);
  v7 = (uint64_t *)((char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = type metadata accessor for AirPodsPairingLockCheckResponse(0);
  v9 = __chkstk_darwin(v8);
  v38 = (uint64_t)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v12 = (char *)&v35 - v11;
  v13 = type metadata accessor for DispatchPredicate(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (uint64_t *)((char *)&v35 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  v17 = *(void **)(v3 + 16);
  *v16 = v17;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v14 + 104))(v16, enum case for DispatchPredicate.onQueue(_:), v13);
  v18 = v17;
  LOBYTE(v17) = _dispatchPreconditionTest(_:)(v16);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v14 + 8))(v16, v13);
  if ((v17 & 1) != 0)
  {
    v36 = v8;
    v39 = a2;
    v20 = swift_allocBox(v5);
    v22 = v21;
    type metadata accessor for SPPairingSessionError(0);
    v24 = v23;
    v42 = 1;
    v25 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
    v26 = sub_100006C64(&qword_1010EB450, 255, (uint64_t (*)(uint64_t))type metadata accessor for SPPairingSessionError, (uint64_t)&unk_100E217DC);
    _BridgedStoredNSError.init(_:userInfo:)(v41, &v42, v25, v24, v26);
    *v22 = v41[0];
    swift_storeEnumTagMultiPayload(v22, v5, 1);
    v27 = dispatch_group_create();
    dispatch_group_enter(v27);
    v37 = v3;
    v28 = swift_allocObject(&unk_1010A3400, 32, 7);
    *(_QWORD *)(v28 + 16) = v20;
    *(_QWORD *)(v28 + 24) = v27;
    swift_retain();
    v29 = v27;
    sub_1006F7EAC(v40, sub_100A72ED8, v28);
    swift_release();
    OS_dispatch_group.wait()();
    swift_beginAccess(v22, v41, 0, 0);
    sub_10000F9B8((uint64_t)v22, (uint64_t)v7, &qword_101104EC8);
    if (swift_getEnumCaseMultiPayload(v7, v5) == 1)
    {
      v42 = *v7;
      v30 = (void *)v42;
      v31 = sub_100006C64(&qword_1010EB048, 255, (uint64_t (*)(uint64_t))type metadata accessor for SPPairingSessionError, (uint64_t)&unk_100E20E9C);
      swift_willThrowTypedImpl(&v42, v24, v31);

    }
    else
    {
      v32 = v38;
      sub_1000126EC((uint64_t)v7, v38, type metadata accessor for AirPodsPairingLockCheckResponse);

      sub_1000126EC(v32, (uint64_t)v12, type metadata accessor for AirPodsPairingLockCheckResponse);
      v33 = *(_QWORD *)(*(_QWORD *)(v37 + 80) + OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingInfo);
      v34 = *(_QWORD *)&v12[*(int *)(v36 + 48)];
      swift_retain();
      sub_1000126B0((uint64_t)v12, type metadata accessor for AirPodsPairingLockCheckResponse);
      *(_QWORD *)(v33 + 32) = v34;
      swift_release();
    }
    sub_10000F9B8((uint64_t)v22, v39, &qword_101104EC8);
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_100A62DDC(uint64_t a1, uint64_t a2, NSObject *a3)
{
  uint64_t v5;
  _BYTE v6[24];

  v5 = swift_projectBox(a2);
  swift_beginAccess(v5, v6, 1, 0);
  sub_1000F8EF4(a1, v5, &qword_101104EC8);
  dispatch_group_leave(a3);
}

void sub_100A62E44()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  _BYTE v18[16];
  _BYTE v19[208];
  _OWORD v20[13];
  _OWORD v21[13];

  v1 = v0;
  v2 = type metadata accessor for MACAddress(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = &v18[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  swift_retain();
  sub_100786FB4(v5);
  v6 = sub_100A3EFAC();
  if (*(_QWORD *)(v6 + 16) && (v7 = sub_1005193C8((uint64_t)v5), (v8 & 1) != 0))
  {
    v9 = (uint64_t *)(*(_QWORD *)(v6 + 56) + 16 * v7);
    v10 = *v9;
    v11 = v9[1];
    sub_10001BBBC(*v9, v11);
  }
  else
  {
    v10 = 0;
    v11 = 0xF000000000000000;
  }
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  sub_100B63464(v10, v11, (uint64_t)v19);
  swift_release();
  sub_10001EF3C(v10, v11);
  sub_100005CF0((uint64_t)v19, (uint64_t)v20, &qword_101110F00);
  if (sub_100057AD4((uint64_t)v20) == 1)
  {
    if (qword_1010EA318 != -1)
      swift_once(&qword_1010EA318, sub_100B5E330);
    v12 = type metadata accessor for Logger(0);
    v13 = sub_10001A9E8(v12, (uint64_t)qword_1011B7DF8);
    v14 = Logger.logObject.getter(v13);
    v15 = static os_log_type_t.error.getter(v14);
    if (os_log_type_enabled(v14, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Unable to generate ack data!", v16, 2u);
      swift_slowDealloc(v16, -1, -1);
    }

  }
  else
  {
    v21[10] = v20[10];
    v21[11] = v20[11];
    v21[12] = v20[12];
    v21[6] = v20[6];
    v21[7] = v20[7];
    v21[8] = v20[8];
    v21[9] = v20[9];
    v21[2] = v20[2];
    v21[3] = v20[3];
    v21[4] = v20[4];
    v21[5] = v20[5];
    v21[0] = v20[0];
    v21[1] = v20[1];
    v17 = type metadata accessor for Transaction(0);
    __chkstk_darwin(v17);
    *(_QWORD *)&v18[-16] = v1;
    *(_QWORD *)&v18[-8] = v21;
    static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd-AirPodsAckRegister", 48, 2, sub_100A72CA0, &v18[-32]);
    sub_100A72CB8((uint64_t)v19);
  }
}

uint64_t sub_100A630EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = swift_allocObject(&unk_1010A3220, 24, 7);
  swift_weakInit(v6 + 16, a2);
  v7 = swift_allocObject(&unk_1010A3388, 32, 7);
  *(_QWORD *)(v7 + 16) = v6;
  *(_QWORD *)(v7 + 24) = a1;
  swift_retain();
  swift_retain();
  sub_1006FC014(a3, (uint64_t)sub_100A72E5C, v7);
  swift_release();
  return swift_release();
}

uint64_t sub_100A631A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  void **v21;
  uint64_t result;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  _QWORD *v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  uint8_t *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  void *v46;
  _QWORD *v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint8_t *v63;
  _QWORD *v64;
  uint64_t aBlock[6];
  char v66[24];

  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  v63 = *(uint8_t **)(v6 - 8);
  __chkstk_darwin(v6);
  v62 = (char *)&v56 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  v60 = *(_QWORD *)(v8 - 8);
  v61 = v8;
  __chkstk_darwin(v8);
  v59 = (char *)&v56 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for AirPodsPairingLockAckResponse(0);
  v11 = __chkstk_darwin(v10);
  v13 = (char *)&v56 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v11);
  v16 = (char *)&v56 - v15;
  __chkstk_darwin(v14);
  v18 = (char *)&v56 - v17;
  v19 = sub_10001A9A8(&qword_101104EC0);
  __chkstk_darwin(v19);
  v21 = (void **)((char *)&v56 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  a2 += 16;
  swift_beginAccess(a2, v66, 0, 0);
  result = swift_weakLoadStrong(a2);
  if (result)
  {
    v23 = result;
    v57 = v6;
    v58 = a3;
    Transaction.capture()();
    sub_10000F9B8(a1, (uint64_t)v21, &qword_101104EC0);
    if (swift_getEnumCaseMultiPayload(v21, v19) == 1)
    {
      v24 = *v21;
      if (qword_1010EA318 != -1)
        swift_once(&qword_1010EA318, sub_100B5E330);
      v25 = type metadata accessor for Logger(0);
      sub_10001A9E8(v25, (uint64_t)qword_1011B7DF8);
      v26 = v24;
      v27 = Logger.logObject.getter(v26);
      v28 = static os_log_type_t.error.getter(v27);
      if (os_log_type_enabled(v27, v28))
      {
        v29 = (uint8_t *)swift_slowAlloc(12, -1);
        v30 = swift_slowAlloc(32, -1);
        v64 = v26;
        aBlock[0] = v30;
        *(_DWORD *)v29 = 136446210;
        type metadata accessor for SPPairingSessionError(0);
        v32 = v31;
        v33 = v26;
        v34 = String.init<A>(describing:)(&v64, v32);
        v64 = (_QWORD *)sub_100016940(v34, v35, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v64, aBlock, v29 + 4, v29 + 12);

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v27, v28, "Ack register failed with error - %{public}s", v29, 0xCu);
        swift_arrayDestroy(v30, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v30, -1, -1);
        swift_slowDealloc(v29, -1, -1);

      }
      else
      {

      }
      v44 = v58;
      v45 = (_QWORD *)swift_allocObject(&unk_1010A33B0, 40, 7);
      v45[2] = v44;
      v45[3] = v23;
      v45[4] = v26;
      aBlock[4] = (uint64_t)sub_100A72E98;
      aBlock[5] = (uint64_t)v45;
      aBlock[0] = (uint64_t)_NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = (uint64_t)sub_100016FB8;
      aBlock[3] = (uint64_t)&unk_1010A33C8;
      v46 = _Block_copy(aBlock);
      v47 = v26;
      swift_retain();
      v48 = swift_retain();
      v49 = v59;
      static DispatchQoS.unspecified.getter(v48);
      v64 = _swiftEmptyArrayStorage;
      v50 = sub_100006C64((unint64_t *)&qword_1010F0E50, 255, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      v51 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
      v52 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
      v53 = v62;
      v54 = v51;
      v55 = v57;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v64, v54, v52, v57, v50);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0, v49, v53, v46);
      _Block_release(v46);

      (*((void (**)(char *, uint64_t))v63 + 1))(v53, v55);
      (*(void (**)(char *, uint64_t))(v60 + 8))(v49, v61);
      swift_release();
      return swift_release();
    }
    else
    {
      sub_1000126EC((uint64_t)v21, (uint64_t)v18, type metadata accessor for AirPodsPairingLockAckResponse);
      if (qword_1010EA318 != -1)
        swift_once(&qword_1010EA318, sub_100B5E330);
      v36 = type metadata accessor for Logger(0);
      sub_10001A9E8(v36, (uint64_t)qword_1011B7DF8);
      v37 = sub_10005972C((uint64_t)v18, (uint64_t)v16, type metadata accessor for AirPodsPairingLockAckResponse);
      v38 = Logger.logObject.getter(v37);
      v39 = static os_log_type_t.default.getter(v38);
      if (os_log_type_enabled(v38, v39))
      {
        v40 = (uint8_t *)swift_slowAlloc(12, -1);
        v41 = swift_slowAlloc(32, -1);
        aBlock[0] = v41;
        *(_DWORD *)v40 = 136446210;
        v63 = v40 + 4;
        sub_10005972C((uint64_t)v16, (uint64_t)v13, type metadata accessor for AirPodsPairingLockAckResponse);
        v42 = String.init<A>(describing:)(v13, v10);
        v64 = (_QWORD *)sub_100016940(v42, v43, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v64, aBlock, v63, v40 + 12);
        swift_bridgeObjectRelease();
        sub_1000126B0((uint64_t)v16, type metadata accessor for AirPodsPairingLockAckResponse);
        _os_log_impl((void *)&_mh_execute_header, v38, v39, "Ack register was success. %{public}s", v40, 0xCu);
        swift_arrayDestroy(v41, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v41, -1, -1);
        swift_slowDealloc(v40, -1, -1);
        swift_release();

      }
      else
      {

        sub_1000126B0((uint64_t)v16, type metadata accessor for AirPodsPairingLockAckResponse);
        swift_release();
      }
      return sub_1000126B0((uint64_t)v18, type metadata accessor for AirPodsPairingLockAckResponse);
    }
  }
  return result;
}

void sub_100A6381C(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  void *v41;
  id v42;
  uint64_t v43;
  uint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  NSObject *v48;
  os_log_type_t v49;
  _BOOL4 v50;
  uint64_t v51;
  uint8_t *v52;
  unint64_t v53;
  const char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void (*v60)(__int128 *, char *, uint64_t, unint64_t, uint64_t, uint64_t);
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  NSObject *v64;
  os_log_type_t v65;
  _BOOL4 v66;
  uint8_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  NSObject *v75;
  os_log_type_t v76;
  _BOOL4 v77;
  uint64_t v78;
  uint8_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  char *v96;
  unint64_t v97;
  unint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  char *v106;
  _QWORD *v107;
  unint64_t v108;
  int64_t v109;
  unint64_t v110;
  int64_t v111;
  char *v112;
  uint64_t v113;
  uint64_t *v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t *v121;
  uint64_t *v122;
  uint64_t v123;
  uint64_t *v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  uint64_t v132;
  uint64_t *v133;
  uint64_t v134;
  uint64_t v135;
  _OWORD *v136;
  _BYTE *v137;
  uint64_t v138;
  _OWORD *v139;
  uint64_t v140;
  _QWORD *v141;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v143;
  unint64_t v144;
  uint64_t v145;
  _BOOL8 v146;
  uint64_t v147;
  char v148;
  uint64_t v149;
  char v150;
  uint64_t *v151;
  uint64_t v152;
  BOOL v153;
  uint64_t v154;
  unint64_t v155;
  unint64_t v156;
  char v157;
  uint64_t *v158;
  uint64_t v159;
  unint64_t v160;
  uint64_t v161;
  NSObject *v162;
  os_log_type_t v163;
  _BOOL4 v164;
  uint64_t v165;
  uint8_t *v166;
  unint64_t v167;
  const char *v168;
  __int16 v169;
  id *v170;
  id v171;
  NSObject *v172;
  os_log_type_t v173;
  uint8_t *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  id v178;
  uint64_t v179;
  unint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  NSObject *v185;
  os_log_type_t v186;
  uint8_t *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  _QWORD *v191;
  unint64_t v192;
  uint64_t v193;
  unint64_t v194;
  id v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  unint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  char *v209;
  uint64_t *v210;
  uint64_t v211;
  unint64_t v212;
  unint64_t v213;
  double v214;
  unint64_t v215;
  char v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  unint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  unint64_t v225;
  uint64_t v226;
  void (*v227)(char *, uint64_t);
  uint64_t v228;
  unint64_t v229;
  char *v230;
  char *v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  char *v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  id *v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  int64_t v243;
  uint64_t v244;
  uint8_t *v245;
  char *v246;
  uint64_t v247;
  uint64_t *v248;
  uint64_t *v249;
  uint64_t *v250;
  _OWORD *v251;
  _OWORD *v252;
  uint64_t v253;
  char *v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  char *v258;
  uint64_t v259;
  unint64_t v260;
  char *v261;
  _QWORD *v262;
  uint64_t *v263;
  uint64_t v264;
  __int128 v265;
  uint64_t v266;
  __int128 v267[3];
  uint64_t v268;
  _QWORD v269[5];
  _QWORD v270[3];
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275[40];
  __int128 v276[21];

  v244 = a1;
  v2 = sub_10001A9A8(&qword_1010ED860);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)&v223 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v7 = (char *)&v223 - v6;
  v237 = type metadata accessor for AirPodsPairingLockCheckResponse(0);
  v8 = __chkstk_darwin(v237);
  v236 = (uint64_t)&v223 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v240 = (uint64_t)&v223 - v10;
  v238 = sub_10001A9A8(&qword_101104EC8);
  __chkstk_darwin(v238);
  v239 = (id *)((char *)&v223 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v255 = type metadata accessor for OwnedBeaconGroup.PairingState(0);
  v247 = *(_QWORD *)(v255 - 8);
  v12 = __chkstk_darwin(v255);
  v264 = (uint64_t)&v223 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v254 = (char *)&v223 - v14;
  v253 = sub_10001A9A8(&qword_1010EBFF8);
  v15 = __chkstk_darwin(v253);
  v252 = (_OWORD *)((char *)&v223 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  v17 = __chkstk_darwin(v15);
  v251 = (_OWORD *)((char *)&v223 - v18);
  v19 = __chkstk_darwin(v17);
  v250 = (uint64_t *)((char *)&v223 - v20);
  v21 = __chkstk_darwin(v19);
  v249 = (uint64_t *)((char *)&v223 - v22);
  v23 = __chkstk_darwin(v21);
  v263 = (uint64_t *)((char *)&v223 - v24);
  __chkstk_darwin(v23);
  v248 = (uint64_t *)((char *)&v223 - v25);
  v241 = type metadata accessor for MACAddress(0);
  v262 = *(_QWORD **)(v241 - 8);
  v26 = __chkstk_darwin(v241);
  v235 = (char *)&v223 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = __chkstk_darwin(v26);
  v30 = (char *)&v223 - v29;
  __chkstk_darwin(v28);
  v261 = (char *)&v223 - v31;
  v32 = sub_10001A9A8((uint64_t *)&unk_1010FF7F0);
  __chkstk_darwin(v32);
  v34 = (char *)&v223 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = type metadata accessor for HashAlgorithm(0);
  v259 = *(_QWORD *)(v35 - 8);
  v260 = v35;
  __chkstk_darwin(v35);
  v258 = (char *)&v223 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = type metadata accessor for DispatchPredicate(0);
  v38 = *(_QWORD *)(v37 - 8);
  __chkstk_darwin(v37);
  v40 = (uint64_t *)((char *)&v223 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0));
  v41 = *(void **)(v1 + 16);
  *v40 = v41;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v38 + 104))(v40, enum case for DispatchPredicate.onQueue(_:), v37);
  v42 = v41;
  LOBYTE(v41) = _dispatchPreconditionTest(_:)(v40);
  (*(void (**)(_QWORD *, uint64_t))(v38 + 8))(v40, v37);
  if ((v41 & 1) == 0)
  {
LABEL_88:
    __break(1u);
    goto LABEL_89;
  }
  v257 = (uint64_t)v34;
  v43 = *(_QWORD *)(v1 + 80);
  v44 = (uint64_t *)(*(_QWORD *)(v43 + OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingInfo)
                  + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_collaborativeKeyC1);
  v45 = v44[1];
  if (v45 >> 60 == 15)
  {
    if (qword_1010EA318 == -1)
    {
LABEL_4:
      v46 = type metadata accessor for Logger(0);
      v47 = sub_10001A9E8(v46, (uint64_t)qword_1011B7DF8);
      v48 = Logger.logObject.getter(v47);
      v49 = static os_log_type_t.error.getter(v48);
      v50 = os_log_type_enabled(v48, v49);
      v51 = v244;
      if (v50)
      {
        v52 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v52 = 0;
        _os_log_impl((void *)&_mh_execute_header, v48, v49, "Missing C1 from accessory!", v52, 2u);
        swift_slowDealloc(v52, -1, -1);
      }

      v53 = 0xD00000000000001ALL;
      v54 = "Missing C1 from accessory!";
LABEL_13:
      *(_QWORD *)v51 = v53;
      *(_QWORD *)(v51 + 8) = (unint64_t)(v54 - 32) | 0x8000000000000000;
      *(_WORD *)(v51 + 40) = 265;
      return;
    }
LABEL_89:
    swift_once(&qword_1010EA318, sub_100B5E330);
    goto LABEL_4;
  }
  v55 = v1;
  v246 = v30;
  v233 = OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingInfo;
  v234 = v43;
  v230 = v7;
  v231 = v5;
  v56 = *v44;
  v57 = v1 + 176;
  swift_beginAccess(v57, &v268, 0, 0);
  sub_100030784(v57, (uint64_t)v275);
  v58 = v275[3];
  v59 = v275[4];
  sub_10001AA44(v275, v275[3]);
  v60 = *(void (**)(__int128 *, char *, uint64_t, unint64_t, uint64_t, uint64_t))(v59 + 72);
  sub_10001BBBC(v56, v45);
  sub_10001BBBC(v56, v45);
  v61 = v45;
  v60(v276, (char *)&v276[2] + 8, v56, v45, v58, v59);
  v232 = v55;
  sub_10001EF3C(v56, v45);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v275);
  if (!*((_QWORD *)&v276[1] + 1))
  {
    sub_100004048((uint64_t)v276, &qword_1010EC590);
    if (qword_1010EA318 != -1)
      swift_once(&qword_1010EA318, sub_100B5E330);
    v62 = type metadata accessor for Logger(0);
    v63 = sub_10001A9E8(v62, (uint64_t)qword_1011B7DF8);
    v64 = Logger.logObject.getter(v63);
    v65 = static os_log_type_t.error.getter(v64);
    v66 = os_log_type_enabled(v64, v65);
    v51 = v244;
    if (v66)
    {
      v67 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v67 = 0;
      _os_log_impl((void *)&_mh_execute_header, v64, v65, "collaborativeKeyC2 generation error.", v67, 2u);
      swift_slowDealloc(v67, -1, -1);
    }

    sub_10001EF3C(v56, v61);
    v53 = 0xD000000000000026;
    v54 = "Unable to generate collaborativeKeyC2!";
    goto LABEL_13;
  }
  v224 = v56;
  v225 = v45;
  sub_10000F9FC(v276, (uint64_t)v270);
  sub_10000F9FC((__int128 *)((char *)&v276[2] + 8), (uint64_t)v269);
  v68 = v234;
  v69 = *(_QWORD *)(v234 + v233);
  sub_100030784((uint64_t)v270, (uint64_t)v276);
  sub_100005CF0((uint64_t)v276, (uint64_t)v275, &qword_1010EC598);
  v70 = v69 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_collaborativeKeyC2;
  swift_beginAccess(v69 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_collaborativeKeyC2, &v273, 33, 0);
  swift_retain();
  sub_100004084((uint64_t)v275, v70, &qword_1010EC598);
  swift_endAccess(&v273);
  swift_release();
  sub_100030784((uint64_t)v269, (uint64_t)v276);
  sub_100005CF0((uint64_t)v276, (uint64_t)v275, &qword_1010EC418);
  v71 = v68 + OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingOwnerContext;
  swift_beginAccess(v68 + OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingOwnerContext, &v273, 33, 0);
  sub_100004084((uint64_t)v275, v71, &qword_1010EC418);
  swift_endAccess(&v273);
  if (qword_1010EA318 != -1)
    swift_once(&qword_1010EA318, sub_100B5E330);
  v72 = type metadata accessor for Logger(0);
  v73 = sub_10001A9E8(v72, (uint64_t)qword_1011B7DF8);
  v74 = sub_100030784((uint64_t)v270, (uint64_t)v276);
  v223 = v73;
  v75 = Logger.logObject.getter(v74);
  v76 = static os_log_type_t.debug.getter(v75);
  v77 = os_log_type_enabled(v75, v76);
  v78 = v257;
  if (v77)
  {
    v79 = (uint8_t *)swift_slowAlloc(12, -1);
    v256 = swift_slowAlloc(32, -1);
    v275[0] = v256;
    *(_DWORD *)v79 = 136315138;
    v245 = v79 + 4;
    v80 = *((_QWORD *)&v276[1] + 1);
    v81 = *(_QWORD *)&v276[2];
    sub_10001AA44(v276, *((uint64_t *)&v276[1] + 1));
    v82 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v81 + 8) + 8) + 40))(v80);
    v84 = v83;
    v85 = Data.hexString.getter(v82, v83);
    v87 = v86;
    sub_10001BC14(v82, v84);
    v273 = sub_100016940(v85, v87, v275);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v273, &v274, v245, v79 + 12);
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v276);
    _os_log_impl((void *)&_mh_execute_header, v75, v76, "C2: %s", v79, 0xCu);
    v88 = v256;
    swift_arrayDestroy(v256, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v88, -1, -1);
    swift_slowDealloc(v79, -1, -1);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v276);
  }

  v89 = v246;
  v90 = v271;
  v91 = v272;
  sub_10001AA44(v270, v271);
  v92 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v91 + 8) + 8) + 40))(v90);
  v94 = v93;
  v96 = v258;
  v95 = v259;
  v97 = v260;
  (*(void (**)(char *, _QWORD, unint64_t))(v259 + 104))(v258, enum case for HashAlgorithm.sha256(_:), v260);
  v228 = Data.hash(algorithm:)(v96, v92, v94);
  v229 = v98;
  sub_10001BC14(v92, v94);
  (*(void (**)(char *, unint64_t))(v95 + 8))(v96, v97);
  v99 = v261;
  v226 = *(_QWORD *)(v232 + 64);
  sub_100786FB4(v261);
  sub_10081F5CC((uint64_t)v99, v78);
  v227 = (void (*)(char *, uint64_t))v262[1];
  v227(v99, v241);
  v100 = type metadata accessor for OwnedBeaconGroup(0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v100 - 8) + 48))(v78, 1, v100) == 1)
  {
    sub_100004048(v78, (uint64_t *)&unk_1010FF7F0);
    v101 = *(_QWORD *)(*(_QWORD *)(v234 + v233)
                     + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_allSerialNumbersAndPartIds);
    v102 = *(_QWORD *)(v101 + 64);
    v242 = v101 + 64;
    v103 = 1 << *(_BYTE *)(v101 + 32);
    v104 = -1;
    if (v103 < 64)
      v104 = ~(-1 << v103);
    v105 = v104 & v102;
    v243 = (unint64_t)(v103 + 63) >> 6;
    v245 = (uint8_t *)v101;
    swift_bridgeObjectRetain_n(v101, 2);
    v106 = 0;
    v107 = _swiftEmptyDictionarySingleton;
    while (1)
    {
      v262 = v107;
      if (v105)
      {
        v257 = (v105 - 1) & v105;
        v258 = v106;
        v108 = __clz(__rbit64(v105)) | ((_QWORD)v106 << 6);
      }
      else
      {
        v109 = (int64_t)(v106 + 1);
        if (__OFADD__(v106, 1))
          goto LABEL_87;
        if (v109 >= v243)
        {
LABEL_54:
          swift_release();
          swift_bridgeObjectRelease();
          goto LABEL_55;
        }
        v110 = *(_QWORD *)(v242 + 8 * v109);
        v111 = (int64_t)(v106 + 1);
        if (!v110)
        {
          v111 = (int64_t)(v106 + 2);
          if ((uint64_t)(v106 + 2) >= v243)
            goto LABEL_54;
          v110 = *(_QWORD *)(v242 + 8 * v111);
          if (!v110)
          {
            v111 = (int64_t)(v106 + 3);
            if ((uint64_t)(v106 + 3) >= v243)
              goto LABEL_54;
            v110 = *(_QWORD *)(v242 + 8 * v111);
            if (!v110)
            {
              v111 = (int64_t)(v106 + 4);
              if ((uint64_t)(v106 + 4) >= v243)
                goto LABEL_54;
              v110 = *(_QWORD *)(v242 + 8 * v111);
              if (!v110)
              {
                v112 = v106 + 5;
                if ((uint64_t)(v106 + 5) >= v243)
                  goto LABEL_54;
                v110 = *(_QWORD *)(v242 + 8 * (_QWORD)v112);
                if (!v110)
                {
                  while (1)
                  {
                    v111 = (int64_t)(v112 + 1);
                    if (__OFADD__(v112, 1))
                      break;
                    if (v111 >= v243)
                      goto LABEL_54;
                    v110 = *(_QWORD *)(v242 + 8 * v111);
                    ++v112;
                    if (v110)
                      goto LABEL_43;
                  }
                  __break(1u);
LABEL_91:
                  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for OwnedBeaconGroup.SerialNumber);
                  __break(1u);
                  return;
                }
                v111 = (int64_t)(v106 + 5);
              }
            }
          }
        }
LABEL_43:
        v257 = (v110 - 1) & v110;
        v258 = (char *)v111;
        v108 = __clz(__rbit64(v110)) + (v111 << 6);
      }
      v113 = *((_QWORD *)v245 + 7);
      v114 = (uint64_t *)(*((_QWORD *)v245 + 6) + 16 * v108);
      v115 = v114[1];
      v259 = *v114;
      v116 = v259;
      v260 = v115;
      v117 = type metadata accessor for MultipartAccessoryPairingInfo(0);
      v118 = *(_QWORD *)(v117 - 8);
      v261 = (char *)v117;
      v119 = v113 + *(_QWORD *)(v118 + 72) * v108;
      v120 = v253;
      v121 = v248;
      sub_10005972C(v119, (uint64_t)v248 + *(int *)(v253 + 48), type metadata accessor for MultipartAccessoryPairingInfo);
      *v121 = v116;
      v121[1] = v115;
      v122 = v263;
      sub_100005CF0((uint64_t)v121, (uint64_t)v263, &qword_1010EBFF8);
      v123 = *(int *)(v120 + 48);
      v124 = v249;
      v125 = (uint64_t)v249 + v123;
      v126 = (uint64_t)v122 + v123;
      v128 = *v122;
      v127 = v122[1];
      *v249 = *v122;
      v124[1] = v127;
      v256 = (uint64_t)v124 + v123;
      sub_10005972C((uint64_t)v122 + v123, v125, type metadata accessor for MultipartAccessoryPairingInfo);
      v129 = sub_10001A9A8((uint64_t *)&unk_1010F98D0);
      v130 = (uint64_t)v254;
      v131 = &v254[*(int *)(v129 + 48)];
      v132 = *(int *)(v120 + 48);
      v133 = v250;
      v134 = (uint64_t)v250 + v132;
      *v250 = v128;
      v133[1] = v127;
      sub_10005972C(v126, (uint64_t)v133 + v132, type metadata accessor for MultipartAccessoryPairingInfo);
      sub_10000F9B8(v134 + *(int *)(v117 + 24), v130, (uint64_t *)&unk_1010F9890);
      sub_10001BBBC(v259, v260);
      sub_10001BBBC(v128, v127);
      sub_1000126B0(v134, type metadata accessor for MultipartAccessoryPairingInfo);
      v135 = *(int *)(v120 + 48);
      v136 = v251;
      v137 = (char *)v251 + v135;
      *v251 = *(_OWORD *)v122;
      sub_10005972C(v126, (uint64_t)v136 + v135, type metadata accessor for MultipartAccessoryPairingInfo);
      LOBYTE(v117) = *v137;
      sub_1000126B0((uint64_t)v137, type metadata accessor for MultipartAccessoryPairingInfo);
      v138 = *(int *)(v120 + 48);
      v139 = v252;
      v140 = (uint64_t)v252 + v138;
      *v252 = *(_OWORD *)v122;
      sub_10005972C(v126, (uint64_t)v139 + v138, type metadata accessor for MultipartAccessoryPairingInfo);
      LOBYTE(v120) = *(_BYTE *)(v140 + *((int *)v261 + 7));
      sub_1000126B0(v140, type metadata accessor for MultipartAccessoryPairingInfo);
      *v131 = v117;
      v131[1] = 0;
      v131[2] = v120;
      swift_storeEnumTagMultiPayload(v130, v255, 0);
      sub_1000126EC(v130, v264, type metadata accessor for OwnedBeaconGroup.PairingState);
      v141 = v262;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v262);
      *(_QWORD *)&v276[0] = v141;
      v144 = sub_100518E4C(v128, v127);
      v145 = v141[2];
      v146 = (v143 & 1) == 0;
      v147 = v145 + v146;
      if (__OFADD__(v145, v146))
        break;
      v148 = v143;
      if (v141[3] >= v147)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          sub_100A99F50();
      }
      else
      {
        sub_100A850F8(v147, isUniquelyReferenced_nonNull_native);
        v149 = sub_100518E4C(v128, v127);
        if ((v148 & 1) != (v150 & 1))
          goto LABEL_91;
        v144 = v149;
      }
      v89 = v246;
      v107 = *(_QWORD **)&v276[0];
      if ((v148 & 1) != 0)
      {
        sub_10010FA18(v264, *(_QWORD *)(*(_QWORD *)&v276[0] + 56) + *(_QWORD *)(v247 + 72) * v144, type metadata accessor for OwnedBeaconGroup.PairingState);
      }
      else
      {
        *(_QWORD *)(*(_QWORD *)&v276[0] + 8 * (v144 >> 6) + 64) |= 1 << v144;
        v151 = (uint64_t *)(v107[6] + 16 * v144);
        *v151 = v128;
        v151[1] = v127;
        sub_1000126EC(v264, v107[7] + *(_QWORD *)(v247 + 72) * v144, type metadata accessor for OwnedBeaconGroup.PairingState);
        v152 = v107[2];
        v153 = __OFADD__(v152, 1);
        v154 = v152 + 1;
        if (v153)
          goto LABEL_86;
        v107[2] = v154;
        sub_10001BBBC(v128, v127);
      }
      swift_bridgeObjectRelease();
      sub_10001BC14(v128, v127);
      sub_1000126B0(v256, type metadata accessor for MultipartAccessoryPairingInfo);
      sub_100004048((uint64_t)v263, &qword_1010EBFF8);
      v105 = v257;
      v106 = v258;
    }
    __break(1u);
LABEL_86:
    __break(1u);
LABEL_87:
    __break(1u);
    goto LABEL_88;
  }
  v107 = *(_QWORD **)(v78 + *(int *)(v100 + 40));
  swift_bridgeObjectRetain(v107);
  sub_1000126B0(v78, type metadata accessor for OwnedBeaconGroup);
LABEL_55:
  swift_retain();
  sub_100786FB4(v89);
  v155 = sub_100A3EFAC();
  if (*(_QWORD *)(v155 + 16) && (v156 = sub_1005193C8((uint64_t)v89), (v157 & 1) != 0))
  {
    v158 = (uint64_t *)(*(_QWORD *)(v155 + 56) + 16 * v156);
    v159 = *v158;
    v160 = v158[1];
    sub_10001BBBC(*v158, v160);
  }
  else
  {
    v159 = 0;
    v160 = 0xF000000000000000;
  }
  swift_bridgeObjectRelease();
  v227(v89, v241);
  sub_100B6374C(v228, v229, v159, v160, (uint64_t)v107, (uint64_t)&v273);
  swift_bridgeObjectRelease();
  swift_release();
  sub_10001EF3C(v159, v160);
  sub_100005CF0((uint64_t)&v273, (uint64_t)v275, &qword_101110EF0);
  v161 = sub_100059714((uint64_t)v275);
  if ((_DWORD)v161 == 1)
  {
    v162 = Logger.logObject.getter(v161);
    v163 = static os_log_type_t.error.getter(v162);
    v164 = os_log_type_enabled(v162, v163);
    v165 = v244;
    if (v164)
    {
      v166 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v166 = 0;
      _os_log_impl((void *)&_mh_execute_header, v162, v163, "Unable to create pairing check data.", v166, 2u);
      swift_slowDealloc(v166, -1, -1);
    }

    sub_10001EF3C(v224, v225);
    sub_10001BC14(v228, v229);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v269);
    v167 = 0xD00000000000001ALL;
    v168 = "Invalid E2 from accessory!";
LABEL_63:
    *(_QWORD *)v165 = v167;
    *(_QWORD *)(v165 + 8) = (unint64_t)(v168 - 32) | 0x8000000000000000;
    v169 = 265;
    goto LABEL_64;
  }
  memcpy(v276, v275, 0x140uLL);
  v170 = v239;
  sub_100A62A6C((uint64_t *)v276, (uint64_t)v239);
  if (swift_getEnumCaseMultiPayload(v170, v238) != 1)
  {
    v181 = (uint64_t)v170;
    v182 = v240;
    sub_1000126EC(v181, v240, type metadata accessor for AirPodsPairingLockCheckResponse);
    v183 = v236;
    v184 = sub_10005972C(v182, v236, type metadata accessor for AirPodsPairingLockCheckResponse);
    v185 = Logger.logObject.getter(v184);
    v186 = static os_log_type_t.default.getter(v185);
    if (os_log_type_enabled(v185, v186))
    {
      v187 = (uint8_t *)swift_slowAlloc(12, -1);
      v188 = swift_slowAlloc(32, -1);
      v189 = v183;
      v190 = v188;
      *(_QWORD *)&v267[0] = v188;
      *(_DWORD *)v187 = 136446210;
      v191 = (_QWORD *)(v189 + *(int *)(v237 + 44));
      v192 = v191[1];
      if (v192 >> 60 == 15)
      {
        v193 = 0;
        v194 = 0xE000000000000000;
      }
      else
      {
        v193 = Data.hexString.getter(*v191, v192);
        v194 = v199;
      }
      *(_QWORD *)&v265 = sub_100016940(v193, v194, (uint64_t *)v267);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v265, (char *)&v265 + 8, v187 + 4, v187 + 12);
      swift_bridgeObjectRelease();
      sub_1000126B0(v236, type metadata accessor for AirPodsPairingLockCheckResponse);
      _os_log_impl((void *)&_mh_execute_header, v185, v186, "Received SeedS and S3 from server. Pairing token: %{public}s", v187, 0xCu);
      swift_arrayDestroy(v190, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v190, -1, -1);
      swift_slowDealloc(v187, -1, -1);

      v182 = v240;
    }
    else
    {
      sub_1000126B0(v183, type metadata accessor for AirPodsPairingLockCheckResponse);

    }
    v200 = *(_QWORD *)(v234 + v233);
    v201 = v237;
    v202 = v182;
    v203 = v182 + *(int *)(v237 + 36);
    v204 = type metadata accessor for UUID(0);
    v205 = *(_QWORD *)(v204 - 8);
    v206 = (uint64_t)v230;
    (*(void (**)(char *, uint64_t, uint64_t))(v205 + 16))(v230, v203, v204);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v205 + 56))(v206, 0, 1, v204);
    v207 = (uint64_t)v231;
    sub_100005CF0(v206, (uint64_t)v231, &qword_1010ED860);
    v208 = v200 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_fmnaId;
    swift_beginAccess(v200 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_fmnaId, v267, 33, 0);
    swift_retain();
    sub_100004084(v207, v208, &qword_1010ED860);
    swift_endAccess(v267);
    swift_release();
    v209 = v235;
    sub_100786FB4(v235);
    v210 = (uint64_t *)(v202 + *(int *)(v201 + 44));
    v211 = *v210;
    v212 = v210[1];
    sub_10001BD08(*v210, v212);
    v213 = sub_100A3EFAC();
    *(_QWORD *)&v265 = v213;
    if (v212 >> 60 == 15)
    {
      v214 = sub_1001042A4((uint64_t)v209, v267);
      ((void (*)(char *, uint64_t, double))v227)(v209, v241, v214);
      sub_10001EF3C(*(uint64_t *)&v267[0], *((unint64_t *)&v267[0] + 1));
    }
    else
    {
      v215 = v213;
      v216 = swift_isUniquelyReferenced_nonNull_native(v213);
      *(_QWORD *)&v267[0] = v215;
      sub_10010E1CC(v211, v212, (uint64_t)v209, v216);
      *(_QWORD *)&v265 = *(_QWORD *)&v267[0];
      swift_bridgeObjectRelease();
      v227(v209, v241);
    }
    v165 = v244;
    sub_100A3F3E4(v265);
    v217 = v271;
    v218 = v272;
    sub_10001AA44(v270, v271);
    v219 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v218 + 8) + 8) + 40))(v217);
    v221 = v220;
    v222 = v240;
    sub_100A656B4(v240, v219, v220, (uint64_t)&v265);
    sub_10001BC14(v219, v221);
    if (v266)
    {
      sub_10001EF3C(v224, v225);
      sub_10001BC14(v228, v229);
      sub_100A72A58((uint64_t)&v273);
      sub_1000126B0(v222, type metadata accessor for AirPodsPairingLockCheckResponse);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v269);
      sub_10000F9FC(&v265, (uint64_t)v267);
      sub_10000F9FC(v267, v165);
      *(_BYTE *)(v165 + 41) = 0;
      goto LABEL_65;
    }
    sub_100004048((uint64_t)&v265, &qword_101110EF8);
    sub_10001EF3C(v224, v225);
    sub_10001BC14(v228, v229);
    sub_100A72A58((uint64_t)&v273);
    sub_1000126B0(v222, type metadata accessor for AirPodsPairingLockCheckResponse);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v269);
    v167 = 0xD000000000000019;
    v168 = "Invalid token from server";
    goto LABEL_63;
  }
  v171 = *v170;
  v172 = Logger.logObject.getter(v171);
  v173 = static os_log_type_t.error.getter(v172);
  if (os_log_type_enabled(v172, v173))
  {
    v174 = (uint8_t *)swift_slowAlloc(12, -1);
    v175 = swift_slowAlloc(32, -1);
    *(_QWORD *)&v267[0] = v175;
    *(_DWORD *)v174 = 136446210;
    *(_QWORD *)&v265 = v171;
    type metadata accessor for SPPairingSessionError(0);
    v177 = v176;
    v178 = v171;
    v179 = String.init<A>(describing:)(&v265, v177);
    *(_QWORD *)&v265 = sub_100016940(v179, v180, (uint64_t *)v267);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v265, (char *)&v265 + 8, v174 + 4, v174 + 12);

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v172, v173, "Pairing lock check failed. Error %{public}s", v174, 0xCu);
    swift_arrayDestroy(v175, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v175, -1, -1);
    swift_slowDealloc(v174, -1, -1);

  }
  else
  {

  }
  v165 = v244;
  v195 = v171;
  sub_100A6D3BC((uint64_t)v195);

  *(_QWORD *)&v265 = v195;
  type metadata accessor for SPPairingSessionError(0);
  v197 = v196;
  v198 = sub_100006C64(&qword_1010EB450, 255, (uint64_t (*)(uint64_t))type metadata accessor for SPPairingSessionError, (uint64_t)&unk_100E217DC);
  _BridgedStoredNSError.code.getter(v267, v197, v198);
  if (*(_QWORD *)&v267[0] == 18)
  {
    sub_100A64F48(v234, v165);
    sub_10001EF3C(v224, v225);
    sub_10001BC14(v228, v229);
    sub_100A72A58((uint64_t)&v273);

    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v269);
    goto LABEL_65;
  }
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v269);
  sub_10001EF3C(v224, v225);
  sub_10001BC14(v228, v229);
  sub_100A72A58((uint64_t)&v273);
  *(_QWORD *)v165 = v195;
  v169 = 256;
LABEL_64:
  *(_WORD *)(v165 + 40) = v169;
LABEL_65:
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v270);
}

double sub_100A64F48@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  void *v16;
  id v17;
  uint64_t v18;
  uint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  double result;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  int v36;
  _BOOL4 v37;
  uint8_t *v38;
  uint8_t *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  NSObject *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  id v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  os_log_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74[2];

  v3 = v2;
  v71 = type metadata accessor for MACAddress(0);
  v6 = *(_QWORD *)(v71 - 8);
  __chkstk_darwin(v71);
  v8 = (char *)&v60 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for String.Encoding(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v60 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DispatchPredicate(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (uint64_t *)((char *)&v60 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v16 = (void *)v3[2];
  *v15 = v16;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v13 + 104))(v15, enum case for DispatchPredicate.onQueue(_:), v12);
  v17 = v16;
  LOBYTE(v16) = _dispatchPreconditionTest(_:)(v15);
  (*(void (**)(_QWORD *, uint64_t))(v13 + 8))(v15, v12);
  if ((v16 & 1) == 0)
  {
    __break(1u);
    goto LABEL_25;
  }
  v70 = v8;
  v18 = OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingInfo;
  v19 = (uint64_t *)(*(_QWORD *)(a1 + OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingInfo)
                  + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessorySerialNumber);
  v20 = v19[1];
  if (v20 >> 60 != 15)
  {
    v74[0] = *v19;
    v21 = v74[0];
    v74[1] = v20;
    sub_10001BBBC(v74[0], v20);
    v22 = sub_100035530();
    if ((DataProtocol.isNull.getter(&type metadata for Data, v22) & 1) != 0)
    {
      sub_10001EF3C(v21, v20);
      goto LABEL_5;
    }
    v69 = a1;
    v66 = v6;
    v29 = Data.trimmed.getter(v21, v20);
    v31 = v30;
    if (qword_1010EA318 != -1)
      swift_once(&qword_1010EA318, sub_100B5E330);
    v32 = type metadata accessor for Logger(0);
    v33 = sub_10001A9E8(v32, (uint64_t)qword_1011B7DF8);
    sub_10001BBBC(v29, v31);
    v34 = sub_10001BBBC(v29, v31);
    v63 = v33;
    v35 = Logger.logObject.getter(v34);
    v36 = static os_log_type_t.debug.getter(v35);
    v37 = os_log_type_enabled(v35, (os_log_type_t)v36);
    v67 = v29;
    v64 = v21;
    if (v37)
    {
      v62 = v36;
      v38 = (uint8_t *)swift_slowAlloc(12, -1);
      v61 = swift_slowAlloc(32, -1);
      v74[0] = v61;
      v39 = v38;
      *(_DWORD *)v38 = 136315138;
      v40 = sub_10001BBBC(v29, v31);
      static String.Encoding.utf8.getter(v40);
      v41 = String.init(data:encoding:)(v29, v31, v11);
      v65 = v35;
      if (!v42)
        v41 = Data.hexString.getter(v29, v31);
      v43 = v41;
      v44 = v42;
      sub_10001BC14(v29, v31);
      v72 = sub_100016940(v43, v44, v74);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v72, &v73, v39 + 4, v39 + 12);
      swift_bridgeObjectRelease();
      sub_10001BC14(v29, v31);
      sub_10001BC14(v29, v31);
      v35 = v65;
      _os_log_impl((void *)&_mh_execute_header, v65, (os_log_type_t)v62, "Accessory serial number: %s.", v39, 0xCu);
      v45 = v61;
      swift_arrayDestroy(v61, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v45, -1, -1);
      swift_slowDealloc(v39, -1, -1);
    }
    else
    {
      sub_10001BC14(v29, v31);
      sub_10001BC14(v29, v31);
    }

    v68 = v31;
    v46 = *(_QWORD *)(*(_QWORD *)(v69 + v18)
                    + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_allSerialNumbersAndPartIds);
    v47 = v3[4];
    v48 = v3[8];
    v49 = *(_QWORD *)(v48 + OBJC_IVAR____TtC12searchpartyd10Peripheral_injectedName + 8);
    v65 = v47;
    if (v49)
    {
      v50 = *(_QWORD *)(v48 + OBJC_IVAR____TtC12searchpartyd10Peripheral_injectedName);
      swift_bridgeObjectRetain(v46);
      v51 = v49;
    }
    else
    {
      v52 = objc_msgSend(*(id *)(v48 + OBJC_IVAR____TtC12searchpartyd10Peripheral_underlyingObject), "name", swift_bridgeObjectRetain(v46).n128_f64[0]);
      if (!v52)
      {
        v55 = v46;
        v50 = 0;
        v51 = 0xE000000000000000;
        goto LABEL_22;
      }
      v53 = v52;
      v50 = static String._unconditionallyBridgeFromObjectiveC(_:)(v52);
      v51 = v54;

      v49 = 0;
    }
    v55 = v46;
    swift_bridgeObjectRetain(v49);
LABEL_22:
    v56 = v70;
    sub_100786FB4(v70);
    v57 = *(_QWORD *)(v69 + v18);
    swift_retain();
    v59 = v67;
    v58 = v68;
    sub_1008E20AC(v67, v68, v50, v51, (uint64_t)v56, v55, v57);
    (*(void (**)(char *, uint64_t))(v66 + 8))(v56, v71);
    sub_10001EF3C(v64, v20);
    sub_10001BC14(v59, v58);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    goto LABEL_9;
  }
LABEL_5:
  if (qword_1010EA318 != -1)
LABEL_25:
    swift_once(&qword_1010EA318, sub_100B5E330);
  v23 = type metadata accessor for Logger(0);
  v24 = sub_10001A9E8(v23, (uint64_t)qword_1011B7DF8);
  v25 = Logger.logObject.getter(v24);
  v26 = static os_log_type_t.error.getter(v25);
  if (os_log_type_enabled(v25, v26))
  {
    v27 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v27 = 0;
    _os_log_impl((void *)&_mh_execute_header, v25, v26, "Invalid serial number.", v27, 2u);
    swift_slowDealloc(v27, -1, -1);
  }

LABEL_9:
  *(_QWORD *)a2 = 8;
  result = 0.0;
  *(_OWORD *)(a2 + 8) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_WORD *)(a2 + 40) = 267;
  return result;
}

double sub_100A656B4@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t v30;
  double result;
  _BYTE v32[16];
  uint64_t v33;
  _BYTE *v34;
  _BYTE *v35;
  uint64_t v36;
  _BYTE *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _BYTE *v41;
  _BYTE *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;

  v43 = a2;
  v44 = a3;
  v38 = type metadata accessor for MACAddress(0);
  v36 = *(_QWORD *)(v38 - 8);
  __chkstk_darwin(v38);
  v35 = &v32[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = sub_10001A9A8((uint64_t *)&unk_1010FF7F0);
  __chkstk_darwin(v7);
  v37 = &v32[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = sub_10001A9A8(&qword_1010EC008);
  __chkstk_darwin(v9);
  v41 = &v32[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v40 = type metadata accessor for MultipartAccessoryPairingInfo(0);
  v39 = *(_QWORD *)(v40 - 8);
  __chkstk_darwin(v40);
  v34 = &v32[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = type metadata accessor for AccessoryProductInfo(0);
  v45 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v42 = &v32[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v14 = sub_10001A9A8((uint64_t *)&unk_10111C0A0);
  __chkstk_darwin(v14);
  v15 = type metadata accessor for String.Encoding(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = &v32[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v33 = type metadata accessor for AirPodsPairingLockCheckResponse(0);
  v19 = (uint64_t *)(a1 + *(int *)(v33 + 40));
  v21 = *v19;
  v20 = v19[1];
  static String.Encoding.utf8.getter(v33);
  v22 = String.data(using:allowLossyConversion:)(v18, 0, v21, v20);
  v24 = v23;
  (*(void (**)(_BYTE *, uint64_t))(v16 + 8))(v18, v15);
  if (v24 >> 60 != 15)
  {
    v48 = v22;
    v49 = v24;
    v30 = *(_QWORD *)(a1 + 72);
    v46 = *(_QWORD *)(a1 + 64);
    v47 = v30;
    __asm { BR              X11 }
  }
  if (qword_1010EA318 != -1)
    swift_once(&qword_1010EA318, sub_100B5E330);
  v25 = type metadata accessor for Logger(0);
  v26 = sub_10001A9E8(v25, (uint64_t)qword_1011B7DF8);
  v27 = Logger.logObject.getter(v26);
  v28 = static os_log_type_t.error.getter(v27);
  if (os_log_type_enabled(v27, v28))
  {
    v29 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v29 = 0;
    _os_log_impl((void *)&_mh_execute_header, v27, v28, "Unable to decode masked apple ID", v29, 2u);
    swift_slowDealloc(v29, -1, -1);
  }

  *(_QWORD *)(a4 + 32) = 0;
  result = 0.0;
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  return result;
}

uint64_t sub_100A66684@<X0>(__int128 *a1@<X0>, uint64_t *a2@<X8>)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  unint64_t v27;
  uint64_t v28;
  _BYTE *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  _BOOL4 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  NSObject *v53;
  os_log_type_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  void (*v67)(_QWORD, _QWORD, _QWORD);
  uint64_t v68;
  void (*v69)(_QWORD, _QWORD, _QWORD);
  void *v70;
  id v71;
  void *v72;
  void (*v73)(_QWORD, _QWORD, _QWORD);
  char *v74;
  void **v75;
  uint64_t v76;
  void *v77;
  char *v78;
  uint64_t v79;
  id v80;
  NSObject *v81;
  os_log_type_t v82;
  uint8_t *v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  char *v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  __int128 *v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102[5];

  v3 = v2;
  v98 = a1;
  v100 = a2;
  v4 = type metadata accessor for MACAddress(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v87 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for OwnedBeaconGroup(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v87 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for OwnedBeaconRecord(0);
  __chkstk_darwin(v11);
  v13 = (char *)&v87 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for String.Encoding(0);
  __chkstk_darwin(v14);
  v16 = (char *)&v87 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingInfo;
  v99 = v3[10];
  v18 = (uint64_t *)(*(_QWORD *)(v99 + OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingInfo)
                  + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessorySerialNumber);
  v19 = v18[1];
  if (v19 >> 60 == 15)
    goto LABEL_4;
  v96 = v7;
  v97 = v5;
  v102[0] = *v18;
  v20 = v102[0];
  v102[1] = v19;
  sub_10001BBBC(v102[0], v19);
  v21 = sub_100035530();
  if ((DataProtocol.isNull.getter(&type metadata for Data, v21) & 1) == 0)
  {
    v88 = v11;
    v91 = v20;
    v92 = v4;
    v35 = Data.trimmed.getter(v20, v19);
    v37 = v36;
    if (qword_1010EA318 != -1)
      swift_once(&qword_1010EA318, sub_100B5E330);
    v38 = type metadata accessor for Logger(0);
    v39 = sub_10001A9E8(v38, (uint64_t)qword_1011B7DF8);
    sub_10001BBBC(v35, v37);
    v40 = sub_10001BBBC(v35, v37);
    v95 = v39;
    v41 = Logger.logObject.getter(v40);
    v42 = static os_log_type_t.default.getter(v41);
    v43 = os_log_type_enabled(v41, v42);
    v93 = v13;
    v94 = v10;
    v89 = v35;
    v90 = v37;
    if (v43)
    {
      v44 = v35;
      v45 = swift_slowAlloc(22, -1);
      v46 = swift_slowAlloc(32, -1);
      v87 = v46;
      *(_DWORD *)v45 = 141558275;
      v101 = 1752392040;
      v102[0] = v46;
      v47 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v101, v102, v45 + 4, v45 + 12);
      *(_WORD *)(v45 + 12) = 2081;
      static String.Encoding.utf8.getter(v47);
      v48 = String.init(data:encoding:)(v44, v37, v16);
      if (!v49)
        v48 = Data.hexString.getter(v44, v37);
      v101 = sub_100016940(v48, v49, v102);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v101, v102, v45 + 14, v45 + 22);
      swift_bridgeObjectRelease();
      sub_10001BC14(v44, v37);
      sub_10001BC14(v44, v37);
      _os_log_impl((void *)&_mh_execute_header, v41, v42, "Creating beacon for %{private,mask.hash}s", (uint8_t *)v45, 0x16u);
      v50 = v87;
      swift_arrayDestroy(v87, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v50, -1, -1);
      swift_slowDealloc(v45, -1, -1);

      v13 = v93;
      v10 = v94;
    }
    else
    {
      sub_10001BC14(v35, v37);
      sub_10001BC14(v35, v37);

    }
    v51 = *(_QWORD *)(*(_QWORD *)(v99 + v17)
                    + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_allSerialNumbersAndPartIds);
    swift_bridgeObjectRetain_n(v51, 5);
    v53 = Logger.logObject.getter(v52);
    v54 = static os_log_type_t.debug.getter(v53);
    if (os_log_type_enabled(v53, v54))
    {
      v55 = swift_slowAlloc(22, -1);
      v87 = swift_slowAlloc(32, -1);
      v102[0] = v87;
      *(_DWORD *)v55 = 136315394;
      v56 = type metadata accessor for MultipartAccessoryPairingInfo(0);
      v57 = sub_100059BCC();
      swift_bridgeObjectRetain(v51);
      v59 = Dictionary.description.getter(v58, &type metadata for OwnedBeaconGroup.SerialNumber, v56, v57);
      v61 = v60;
      swift_bridgeObjectRelease();
      v101 = sub_100016940(v59, v61, v102);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v101, v102, v55 + 4, v55 + 12);
      swift_bridgeObjectRelease_n(v51, 2);
      swift_bridgeObjectRelease();
      *(_WORD *)(v55 + 12) = 2048;
      v62 = *(_QWORD *)(v51 + 16);
      swift_bridgeObjectRelease();
      v101 = v62;
      v13 = v93;
      v10 = v94;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v101, v102, v55 + 14, v55 + 22);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v53, v54, "All serials: %s. Count %ld", (uint8_t *)v55, 0x16u);
      v63 = v87;
      swift_arrayDestroy(v87, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v63, -1, -1);
      swift_slowDealloc(v55, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v51, 4);
    }
    v64 = *(_QWORD **)(v99 + v17);
    v65 = v3[4];
    v66 = v3[8];
    v67 = *(void (**)(_QWORD, _QWORD, _QWORD))(v66
                                                        + OBJC_IVAR____TtC12searchpartyd10Peripheral_injectedName
                                                        + 8);
    if (v67)
    {
      v68 = *(_QWORD *)(v66 + OBJC_IVAR____TtC12searchpartyd10Peripheral_injectedName);
      swift_retain();
      v69 = v67;
    }
    else
    {
      v70 = *(void **)(v66 + OBJC_IVAR____TtC12searchpartyd10Peripheral_underlyingObject);
      swift_retain();
      v71 = objc_msgSend(v70, "name");
      if (!v71)
      {
        v68 = 0;
        v69 = (void (*)(_QWORD, _QWORD, _QWORD))0xE000000000000000;
        goto LABEL_25;
      }
      v72 = v71;
      v68 = static String._unconditionallyBridgeFromObjectiveC(_:)(v71);
      v69 = v73;

      v67 = 0;
    }
    swift_bridgeObjectRetain(v67);
LABEL_25:
    v74 = v96;
    sub_100786FB4(v96);
    sub_1008E2C44((uint64_t)v13, (uint64_t)v10, v98, v64, v68, v69, (uint64_t)v74, v51);
    (*(void (**)(char *, uint64_t))(v97 + 8))(v74, v92);
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    v75 = (void **)(*(_QWORD *)(v99 + OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_locationMonitor)
                  + OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor_currentLocation);
    swift_beginAccess(v75, v102, 0, 0);
    v77 = *v75;
    if (*v75)
    {
      v78 = &v13[*(int *)(v88 + 20)];
      v79 = type metadata accessor for Transaction(0);
      __chkstk_darwin(v79);
      *((_BYTE *)&v87 - 32) = 0;
      *(&v87 - 3) = (uint64_t)v77;
      *(&v87 - 2) = (uint64_t)v78;
      *(&v87 - 1) = v65;
      v80 = v77;
      static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd.BeaconStore.saveEstimatedLocation", 63, 2, sub_10005A56C, &v87 - 6, &type metadata for () + 1);
      sub_10001EF3C(v91, v19);
      sub_10001BC14(v89, v90);

    }
    else
    {
      v81 = Logger.logObject.getter(v76);
      v82 = static os_log_type_t.error.getter(v81);
      if (os_log_type_enabled(v81, v82))
      {
        v83 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v83 = 0;
        _os_log_impl((void *)&_mh_execute_header, v81, v82, "Unable to retrieve current location from CL for pairing", v83, 2u);
        swift_slowDealloc(v83, -1, -1);

        sub_10001BC14(v89, v90);
        sub_10001EF3C(v91, v19);
      }
      else
      {
        sub_10001EF3C(v91, v19);
        sub_10001BC14(v89, v90);

      }
    }
    v84 = sub_10001A9A8(&qword_101111E00);
    v85 = v100;
    v86 = (uint64_t)v100 + *(int *)(v84 + 48);
    sub_1000126EC((uint64_t)v13, (uint64_t)v100, type metadata accessor for OwnedBeaconRecord);
    sub_1000126EC((uint64_t)v10, v86, type metadata accessor for OwnedBeaconGroup);
    v31 = sub_10001A9A8(&qword_101110EE8);
    v32 = v85;
    v33 = 0;
    return swift_storeEnumTagMultiPayload(v32, v31, v33);
  }
  sub_10001EF3C(v20, v19);
LABEL_4:
  if (qword_1010EA318 != -1)
    swift_once(&qword_1010EA318, sub_100B5E330);
  v22 = type metadata accessor for Logger(0);
  v23 = sub_10001A9E8(v22, (uint64_t)qword_1011B7DF8);
  v24 = Logger.logObject.getter(v23);
  v25 = static os_log_type_t.error.getter(v24);
  if (os_log_type_enabled(v24, v25))
  {
    v26 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v26 = 0;
    _os_log_impl((void *)&_mh_execute_header, v24, v25, "Invalid serial number.", v26, 2u);
    swift_slowDealloc(v26, -1, -1);
  }

  v27 = sub_100A729E8();
  v28 = swift_allocError(&type metadata for AirPodsPairingManager.AirPodsPairingManagerError, v27, 0, 0);
  *v29 = 1;
  v30 = v100;
  *v100 = v28;
  v31 = sub_10001A9A8(&qword_101110EE8);
  v32 = v30;
  v33 = 1;
  return swift_storeEnumTagMultiPayload(v32, v31, v33);
}

void sub_100A66FDC(uint64_t a1, unint64_t a2, NSObject *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  _BOOL4 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  NSObject *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  NSObject *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  NSObject *v47;
  os_log_type_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  NSObject *v65;
  os_log_type_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  NSObject *v94;
  uint64_t v95;
  uint64_t v96;

  v94 = a3;
  v5 = sub_10001A9A8((uint64_t *)&unk_1010FF7F0);
  __chkstk_darwin(v5);
  v87 = (uint64_t)&v81 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for OwnedBeaconGroup(0);
  v86 = *(_QWORD *)(v7 - 8);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v81 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v8);
  v13 = (char *)&v81 - v12;
  __chkstk_darwin(v11);
  v85 = (uint64_t)&v81 - v14;
  v15 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v15);
  v90 = (uint64_t)&v81 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for UUID(0);
  v92 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v88 = (char *)&v81 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for String.Encoding(0);
  __chkstk_darwin(v19);
  v21 = (char *)&v81 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1010EA318 != -1)
    swift_once(&qword_1010EA318, sub_100B5E330);
  v84 = v13;
  v22 = type metadata accessor for Logger(0);
  v23 = sub_10001A9E8(v22, (uint64_t)qword_1011B7DF8);
  sub_10001BBBC(a1, a2);
  v24 = sub_10001BBBC(a1, a2);
  v91 = v23;
  v25 = Logger.logObject.getter(v24);
  v26 = static os_log_type_t.default.getter(v25);
  v27 = os_log_type_enabled(v25, v26);
  v93 = v7;
  if (v27)
  {
    v82 = v10;
    v83 = v17;
    v28 = swift_slowAlloc(22, -1);
    v29 = swift_slowAlloc(32, -1);
    *(_DWORD *)v28 = 141558275;
    v95 = 1752392040;
    v96 = v29;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v95, &v96, v28 + 4, v28 + 12);
    *(_WORD *)(v28 + 12) = 2081;
    v30 = sub_10001BBBC(a1, a2);
    static String.Encoding.utf8.getter(v30);
    v31 = String.init(data:encoding:)(a1, a2, v21);
    if (!v32)
      v31 = Data.hexString.getter(a1, a2);
    v33 = v31;
    v34 = v32;
    sub_10001BC14(a1, a2);
    v95 = sub_100016940(v33, v34, &v96);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v95, &v96, v28 + 14, v28 + 22);
    swift_bridgeObjectRelease();
    sub_10001BC14(a1, a2);
    sub_10001BC14(a1, a2);
    _os_log_impl((void *)&_mh_execute_header, v25, v26, "Clean up pending pairing for %{private,mask.hash}s", (uint8_t *)v28, 0x16u);
    swift_arrayDestroy(v29, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v29, -1, -1);
    swift_slowDealloc(v28, -1, -1);

    v10 = v82;
    v17 = v83;
    v7 = v93;
  }
  else
  {
    sub_10001BC14(a1, a2);
    sub_10001BC14(a1, a2);

  }
  v35 = swift_allocBox(v7);
  v36 = (uint64_t)v94;
  sub_10005972C((uint64_t)v94, v37, type metadata accessor for OwnedBeaconGroup);
  if ((sub_10036A524(a1, a2) & 1) != 0)
  {
    v38 = v36;
    v39 = dispatch_group_create();
    dispatch_group_enter(v39);
    v40 = *(_QWORD *)(v89 + 32);
    v41 = swift_allocObject(&unk_1010A3338, 24, 7);
    *(_QWORD *)(v41 + 16) = v39;
    swift_retain();
    v42 = v17;
    v43 = v39;
    v89 = v40;
    sub_1007A0418(v38, 0, (void (*)(uint64_t))sub_1000F8530, (uint64_t)v35, sub_100A72A50, (void (*)(uint64_t))v41);
    swift_release();
    swift_release();
    OS_dispatch_group.wait()();
    v44 = v90;
    sub_10036A9C8(a1, a2, v90);
    v45 = v92;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v92 + 48))(v44, 1, v42) == 1)
    {

      sub_100004048(v44, &qword_1010ED860);
    }
    else
    {
      v57 = (uint64_t)v88;
      (*(void (**)(char *, uint64_t, uint64_t))(v45 + 32))(v88, v44, v42);
      v58 = v87;
      sub_10081EDA8(v57, v87);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v86 + 48))(v58, 1, v7) == 1)
      {
        (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v57, v42);

        sub_100004048(v58, (uint64_t *)&unk_1010FF7F0);
      }
      else
      {
        v59 = v42;
        v60 = v85;
        sub_1000126EC(v58, v85, type metadata accessor for OwnedBeaconGroup);
        v61 = sub_100A3E400(v60);
        if (v61)
        {
          v62 = v61;
          v94 = v43;
          v63 = (uint64_t)v84;
          sub_10005972C(v60, (uint64_t)v84, type metadata accessor for OwnedBeaconGroup);
          swift_errorRetain(v62);
          v64 = swift_errorRetain(v62);
          v65 = Logger.logObject.getter(v64);
          v66 = static os_log_type_t.error.getter(v65);
          if (os_log_type_enabled(v65, v66))
          {
            v67 = swift_slowAlloc(32, -1);
            v68 = swift_slowAlloc(64, -1);
            v91 = v68;
            *(_DWORD *)v67 = 141558531;
            v95 = 1752392040;
            v96 = v68;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v95, &v96, v67 + 4, v67 + 12);
            *(_WORD *)(v67 + 12) = 2081;
            v69 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
            v70 = dispatch thunk of CustomStringConvertible.description.getter(v59, v69);
            v95 = sub_100016940(v70, v71, &v96);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v95, &v96, v67 + 14, v67 + 22);
            swift_bridgeObjectRelease();
            sub_1000126B0(v63, type metadata accessor for OwnedBeaconGroup);
            *(_WORD *)(v67 + 22) = 2082;
            v95 = v62;
            swift_errorRetain(v62);
            v72 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
            v73 = String.init<A>(describing:)(&v95, v72);
            v95 = sub_100016940(v73, v74, &v96);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v95, &v96, v67 + 24, v67 + 32);
            swift_bridgeObjectRelease();
            swift_errorRelease(v62);
            swift_errorRelease(v62);
            _os_log_impl((void *)&_mh_execute_header, v65, v66, "Failed to delete pending record %{private,mask.hash}s due to %{public}s", (uint8_t *)v67, 0x20u);
            v75 = v91;
            swift_arrayDestroy(v91, 2, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v75, -1, -1);
            swift_slowDealloc(v67, -1, -1);

            swift_errorRelease(v62);
            sub_1000126B0(v85, type metadata accessor for OwnedBeaconGroup);
          }
          else
          {

            swift_errorRelease(v62);
            swift_errorRelease(v62);
            sub_1000126B0(v63, type metadata accessor for OwnedBeaconGroup);
            swift_errorRelease(v62);

            sub_1000126B0(v60, type metadata accessor for OwnedBeaconGroup);
          }
          (*(void (**)(char *, uint64_t))(v92 + 8))(v88, v59);
        }
        else
        {

          sub_1000126B0(v60, type metadata accessor for OwnedBeaconGroup);
          (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v57, v42);
        }
      }
    }
    swift_release();
  }
  else
  {
    sub_10005972C(v36, (uint64_t)v10, type metadata accessor for OwnedBeaconGroup);
    sub_10001BBBC(a1, a2);
    v46 = sub_10001BBBC(a1, a2);
    v47 = Logger.logObject.getter(v46);
    v48 = static os_log_type_t.error.getter(v47);
    if (os_log_type_enabled(v47, v48))
    {
      v94 = v35;
      v49 = swift_slowAlloc(32, -1);
      v50 = swift_slowAlloc(64, -1);
      v92 = v50;
      *(_DWORD *)v49 = 141558531;
      v95 = 1752392040;
      v96 = v50;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v95, &v96, v49 + 4, v49 + 12);
      *(_WORD *)(v49 + 12) = 2081;
      v51 = sub_10001BBBC(a1, a2);
      static String.Encoding.utf8.getter(v51);
      v52 = String.init(data:encoding:)(a1, a2, v21);
      if (v53)
      {
        v54 = v52;
        v55 = v53;
        v56 = (uint64_t)v10;
      }
      else
      {
        v56 = (uint64_t)v10;
        v54 = Data.hexString.getter(a1, a2);
        v55 = v76;
      }
      sub_10001BC14(a1, a2);
      v95 = sub_100016940(v54, v55, &v96);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v95, &v96, v49 + 14, v49 + 22);
      swift_bridgeObjectRelease();
      sub_10001BC14(a1, a2);
      sub_10001BC14(a1, a2);
      *(_WORD *)(v49 + 22) = 2080;
      v77 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v78 = dispatch thunk of CustomStringConvertible.description.getter(v17, v77);
      v95 = sub_100016940(v78, v79, &v96);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v95, &v96, v49 + 24, v49 + 32);
      swift_bridgeObjectRelease();
      sub_1000126B0(v56, type metadata accessor for OwnedBeaconGroup);
      _os_log_impl((void *)&_mh_execute_header, v47, v48, "Unable to unpair %{private,mask.hash}s from %s!", (uint8_t *)v49, 0x20u);
      v80 = v92;
      swift_arrayDestroy(v92, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v80, -1, -1);
      swift_slowDealloc(v49, -1, -1);
    }
    else
    {
      sub_10001BC14(a1, a2);
      sub_10001BC14(a1, a2);
      sub_1000126B0((uint64_t)v10, type metadata accessor for OwnedBeaconGroup);
    }
    swift_release();

  }
}

void sub_100A67A7C(uint64_t a1, NSObject *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  uint64_t v38;
  uint64_t v39;

  v4 = type metadata accessor for OwnedBeaconGroup(0);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v36 - v8;
  v10 = sub_10001A9A8(&qword_1010EEC50);
  __chkstk_darwin(v10);
  v12 = (uint64_t *)((char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10000F9B8(a1, (uint64_t)v12, &qword_1010EEC50);
  if (swift_getEnumCaseMultiPayload(v12, v10) == 1)
  {
    v13 = *v12;
    if (qword_1010EA318 != -1)
      swift_once(&qword_1010EA318, sub_100B5E330);
    v14 = type metadata accessor for Logger(0);
    sub_10001A9E8(v14, (uint64_t)qword_1011B7DF8);
    swift_errorRetain(v13);
    v15 = swift_errorRetain(v13);
    v16 = Logger.logObject.getter(v15);
    v17 = static os_log_type_t.error.getter(v16);
    if (os_log_type_enabled(v16, v17))
    {
      v18 = (uint8_t *)swift_slowAlloc(12, -1);
      v19 = swift_slowAlloc(32, -1);
      v38 = v13;
      v39 = v19;
      *(_DWORD *)v18 = 136446210;
      swift_errorRetain(v13);
      v20 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
      v21 = String.init<A>(describing:)(&v38, v20);
      v38 = sub_100016940(v21, v22, &v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39, v18 + 4, v18 + 12);
      swift_bridgeObjectRelease();
      swift_errorRelease(v13);
      swift_errorRelease(v13);
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Unable to modify existing group. Error %{public}s", v18, 0xCu);
      swift_arrayDestroy(v19, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v19, -1, -1);
      swift_slowDealloc(v18, -1, -1);

      swift_errorRelease(v13);
    }
    else
    {
      swift_errorRelease(v13);
      swift_errorRelease(v13);
      swift_errorRelease(v13);

    }
  }
  else
  {
    sub_1000126EC((uint64_t)v12, (uint64_t)v9, type metadata accessor for OwnedBeaconGroup);
    if (qword_1010EA318 != -1)
      swift_once(&qword_1010EA318, sub_100B5E330);
    v23 = type metadata accessor for Logger(0);
    v24 = sub_10001A9E8(v23, (uint64_t)qword_1011B7DF8);
    v25 = sub_10005972C((uint64_t)v9, (uint64_t)v7, type metadata accessor for OwnedBeaconGroup);
    v26 = Logger.logObject.getter(v25);
    v27 = static os_log_type_t.default.getter(v26);
    if (os_log_type_enabled(v26, v27))
    {
      v28 = swift_slowAlloc(22, -1);
      v29 = swift_slowAlloc(32, -1);
      v37 = a2;
      v30 = v29;
      *(_DWORD *)v28 = 141558275;
      v38 = 1752392040;
      v39 = v29;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39, v28 + 4, v28 + 12);
      *(_WORD *)(v28 + 12) = 2081;
      v36 = v28 + 14;
      v31 = type metadata accessor for UUID(0);
      v32 = sub_100006C64((unint64_t *)&qword_1010EDAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v33 = dispatch thunk of CustomStringConvertible.description.getter(v31, v32);
      v38 = sub_100016940(v33, v34, &v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39, v36, v28 + 22);
      swift_bridgeObjectRelease();
      sub_1000126B0((uint64_t)v7, type metadata accessor for OwnedBeaconGroup);
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "Successfully modified existing group %{private,mask.hash}s", (uint8_t *)v28, 0x16u);
      swift_arrayDestroy(v30, 1, (char *)&type metadata for Any + 8);
      v35 = v30;
      a2 = v37;
      swift_slowDealloc(v35, -1, -1);
      swift_slowDealloc(v28, -1, -1);
    }
    else
    {
      sub_1000126B0((uint64_t)v7, type metadata accessor for OwnedBeaconGroup);
    }

    sub_100367170(v24);
    sub_1000126B0((uint64_t)v9, type metadata accessor for OwnedBeaconGroup);
  }
  dispatch_group_leave(a2);
}

uint64_t sub_100A67F24(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  __n128 v19;
  uint64_t v21;

  v3 = v2;
  v6 = type metadata accessor for DispatchPredicate(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (uint64_t *)((char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = *(void **)(v3 + 16);
  *v9 = v10;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v7 + 104))(v9, enum case for DispatchPredicate.onQueue(_:), v6);
  v11 = v10;
  LOBYTE(v10) = _dispatchPreconditionTest(_:)(v9);
  (*(void (**)(_QWORD *, uint64_t))(v7 + 8))(v9, v6);
  if ((v10 & 1) != 0)
  {
    if (qword_1010EA318 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_1010EA318, sub_100B5E330);
LABEL_3:
  v12 = type metadata accessor for Logger(0);
  sub_10001A9E8(v12, (uint64_t)qword_1011B7DF8);
  v13 = sub_10001BBBC(a1, a2);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.info.getter(v14);
  if (os_log_type_enabled(v14, v15))
  {
    *(_DWORD *)swift_slowAlloc(12, -1) = 134217984;
    __asm { BR              X10 }
  }
  sub_10001BC14(a1, a2);

  v16 = swift_allocObject(&unk_1010A3220, 24, 7);
  swift_weakInit(v16 + 16, v3);
  v17 = (_QWORD *)swift_allocObject(&unk_1010A3310, 40, 7);
  v17[2] = v16;
  v17[3] = a1;
  v17[4] = a2;
  v18 = sub_10001A9A8(&qword_1010EEC28);
  swift_allocObject(v18, *(unsigned int *)(v18 + 48), *(unsigned __int16 *)(v18 + 52));
  sub_10001BBBC(a1, a2);
  return Future.init(_:)(sub_100A729DC, v17, v19);
}

uint64_t sub_100A681C0(void (*a1)(__int128 *), char *a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t Strong;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  __int128 v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  _BOOL4 v35;
  uint64_t v36;
  uint8_t *v37;
  char *v38;
  _QWORD *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint8_t *v48;
  char *v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  __int16 v54;
  __int16 v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  _BYTE *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  NSObject *v66;
  os_log_type_t v67;
  uint8_t *v68;
  char *v69;
  uint64_t v70;
  int v71;
  char *v72;
  uint64_t (*v73)(char *, uint64_t);
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  NSObject *v84;
  os_log_type_t v85;
  uint8_t *v86;
  _QWORD *v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  _QWORD *v104;
  uint8_t *v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  char *v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  char *v121;
  void (*v122)(__int128 *);
  char v123[24];
  char v124[24];
  char v125[24];
  uint64_t v126;
  _BYTE v127[16];
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  __int128 v132;
  __int128 v133;
  uint64_t v134;
  uint64_t v135;
  char v136;
  char v137[8];

  v122 = a1;
  v9 = type metadata accessor for BinaryDecodingError(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v106 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for BinaryDecoder(0);
  v112 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v113 = (char *)&v106 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_10001A9A8(&qword_1010EEC30);
  __chkstk_darwin(v15);
  v119 = (char *)&v106 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for Bit(0);
  v120 = *(_QWORD *)(v17 - 8);
  v18 = __chkstk_darwin(v17);
  v114 = (char *)&v106 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v121 = (char *)&v106 - v20;
  a3 += 16;
  swift_beginAccess(a3, v137, 0, 0);
  Strong = swift_weakLoadStrong(a3);
  if (!Strong)
  {
    v134 = 0;
    v132 = 0u;
    v133 = 0u;
    LOBYTE(v135) = 11;
    v136 = 1;
    v122(&v132);
    return sub_100004048((uint64_t)&v132, &qword_1010EEC38);
  }
  v22 = (_QWORD *)Strong;
  v109 = v13;
  v118 = v17;
  v116 = v12;
  v111 = v10;
  v23 = *(_QWORD *)(Strong + 144);
  v24 = v22[19];
  if (v24 >> 60 == 15)
    v25 = 0;
  else
    v25 = v23;
  v26 = 0xC000000000000000;
  if (v24 >> 60 != 15)
    v26 = v22[19];
  v130 = v25;
  v131 = v26;
  sub_10001BD08(v23, v24);
  sub_10001BBBC(a4, a5);
  sub_100AEF294(1, a4, a5);
  v27 = v132;
  Data.append(_:)(v132, *((_QWORD *)&v132 + 1));
  sub_10001BC14(v27, *((unint64_t *)&v27 + 1));
  v28 = v130;
  v29 = v131;
  v30 = v22[18];
  v31 = v22[19];
  v22[18] = v130;
  v22[19] = v29;
  sub_10001BBBC(v28, v29);
  sub_10001EF3C(v30, v31);
  if (qword_1010EA318 != -1)
    swift_once(&qword_1010EA318, sub_100B5E330);
  v32 = type metadata accessor for Logger(0);
  v115 = sub_10001A9E8(v32, (uint64_t)qword_1011B7DF8);
  v33 = Logger.logObject.getter(v115);
  v34 = static os_log_type_t.info.getter(v33);
  v35 = os_log_type_enabled(v33, v34);
  v117 = v9;
  if (v35)
  {
    v36 = swift_slowAlloc(12, -1);
    v108 = a5;
    v37 = (uint8_t *)v36;
    v107 = swift_slowAlloc(32, -1);
    *(_QWORD *)&v132 = v107;
    *(_DWORD *)v37 = 136315138;
    v106 = v37 + 4;
    swift_beginAccess(&v130, v123, 0, 0);
    v38 = a2;
    v39 = v22;
    v40 = v130;
    v41 = v131;
    sub_10001BBBC(v130, v131);
    v42 = Data.description.getter(v40, v41);
    v110 = a4;
    v44 = v43;
    v45 = v40;
    a2 = v38;
    v46 = v41;
    v22 = v39;
    sub_10001BC14(v45, v46);
    v126 = sub_100016940(v42, v44, (uint64_t *)&v132);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v126, v127, v106, v37 + 12);
    a4 = v110;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v33, v34, "localReadBuffer %s", v37, 0xCu);
    v47 = v107;
    swift_arrayDestroy(v107, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v47, -1, -1);
    v48 = v37;
    a5 = v108;
    swift_slowDealloc(v48, -1, -1);
  }

  v49 = v116;
  v50 = v118;
  v51 = v121;
  v52 = v120;
  v53 = (uint64_t)v119;
  sub_10001BBBC(a4, a5);
  sub_1000FC3EC(a4, a5);
  v55 = v54;
  sub_10001BC14(a4, a5);
  if ((v55 & 0x100) != 0)
    goto LABEL_18;
  LOBYTE(v132) = v55;
  v56 = sub_100059570();
  v57 = FixedWidthInteger.bits()(&type metadata for UInt8, v56);
  if (*(_QWORD *)(v57 + 16))
  {
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v52 + 16))(v53, v57 + ((*(unsigned __int8 *)(v52 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v52 + 80)), v50);
    v58 = 0;
  }
  else
  {
    v58 = 1;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v52 + 56))(v53, v58, 1, v50);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v52 + 48))(v53, 1, v50) == 1)
  {
    sub_100004048(v53, &qword_1010EEC30);
LABEL_18:
    v59 = sub_100A729E8();
    v60 = swift_allocError(&type metadata for AirPodsPairingManager.AirPodsPairingManagerError, v59, 0, 0);
    *v61 = 2;
    swift_willThrow(v60);
    sub_10001BC14(v130, v131);
    goto LABEL_19;
  }
  v110 = a4;
  (*(void (**)(char *, uint64_t, uint64_t))(v52 + 32))(v51, v53, v50);
  v69 = v114;
  (*(void (**)(char *, _QWORD, uint64_t))(v52 + 104))(v114, enum case for Bit.one(_:), v50);
  v70 = sub_100006C64((unint64_t *)&qword_1010EDCA0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for Bit, (uint64_t)&protocol conformance descriptor for Bit);
  dispatch thunk of RawRepresentable.rawValue.getter(&v132, v50, v70);
  dispatch thunk of RawRepresentable.rawValue.getter(&v126, v50, v70);
  LODWORD(v70) = v132;
  v71 = v126;
  v72 = v69;
  v73 = *(uint64_t (**)(char *, uint64_t))(v52 + 8);
  v74 = v73(v72, v50);
  if ((_DWORD)v70 == v71)
  {
    v75 = v113;
    BinaryDecoder.init()(v74);
    swift_beginAccess(v22 + 22, v125, 0, 0);
    v76 = v22[25];
    v77 = v22[26];
    sub_10001AA44(v22 + 22, v76);
    v78 = sub_100C4DF68(v76, v77);
    AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v77, v76, &unk_100F32BA8, &unk_100F32BB8);
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v77, v76, AssociatedTypeWitness, &unk_100F32BA8, &unk_100F32BB0);
    swift_beginAccess(&v130, v124, 0, 0);
    v81 = v130;
    v82 = v131;
    v128 = v78;
    v129 = AssociatedConformanceWitness;
    sub_100018F08(&v126);
    sub_10001BBBC(v81, v82);
    BinaryDecoder.decode<A>(_:from:)(v78, v81, v82, v78, *(_QWORD *)(AssociatedConformanceWitness + 8));
    sub_10001BC14(v81, v82);
    v99 = v22[18];
    v100 = v22[19];
    *((_OWORD *)v22 + 9) = xmmword_100E22B20;
    sub_10001EF3C(v99, v100);
    v101 = v128;
    v102 = v129;
    v103 = sub_10001AA44(&v126, v128);
    *((_QWORD *)&v133 + 1) = v101;
    v134 = *(_QWORD *)(v102 + 8);
    v135 = *(_QWORD *)(v102 + 16);
    v104 = sub_100018F08(&v132);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v101 - 8) + 16))(v104, v103, v101);
    v136 = 0;
    v122(&v132);
    swift_release();
    (*(void (**)(char *, uint64_t))(v112 + 8))(v75, v109);
    v73(v121, v118);
    sub_100004048((uint64_t)&v132, &qword_1010EEC38);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v126);
    return sub_10001BC14(v130, v131);
  }
  v95 = sub_100006C64((unint64_t *)&qword_1010EC010, 255, (uint64_t (*)(uint64_t))&type metadata accessor for BinaryDecodingError, (uint64_t)&protocol conformance descriptor for BinaryDecodingError);
  v96 = v117;
  v60 = swift_allocError(v117, v95, 0, 0);
  v98 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v111 + 104))(v97, enum case for BinaryDecodingError.insufficientData(_:), v96);
  swift_willThrow(v98);
  v73(v51, v50);
  sub_10001BC14(v130, v131);
  a4 = v110;
LABEL_19:
  *(_QWORD *)&v132 = v60;
  swift_errorRetain(v60);
  v62 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
  v63 = v117;
  if (!swift_dynamicCast(v49, &v132, v62, v117, 0))
  {
LABEL_26:
    swift_errorRelease(v132);
    sub_10001BBBC(a4, a5);
    v83 = sub_10001BBBC(a4, a5);
    v84 = Logger.logObject.getter(v83);
    v85 = static os_log_type_t.error.getter(v84);
    if (os_log_type_enabled(v84, v85))
    {
      v121 = a2;
      v86 = (uint8_t *)swift_slowAlloc(12, -1);
      v120 = swift_slowAlloc(32, -1);
      *(_QWORD *)&v132 = v120;
      *(_DWORD *)v86 = 136446210;
      v119 = (char *)(v86 + 4);
      sub_10001BBBC(a4, a5);
      v87 = v22;
      v88 = Data.description.getter(a4, a5);
      v90 = v89;
      sub_10001BC14(a4, a5);
      v91 = v88;
      v22 = v87;
      v126 = sub_100016940(v91, v90, (uint64_t *)&v132);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v126, v127, v119, v86 + 12);
      swift_bridgeObjectRelease();
      sub_10001BC14(a4, a5);
      sub_10001BC14(a4, a5);
      _os_log_impl((void *)&_mh_execute_header, v84, v85, "Failed to decode data %{public}s", v86, 0xCu);
      v92 = v120;
      swift_arrayDestroy(v120, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v92, -1, -1);
      swift_slowDealloc(v86, -1, -1);
    }
    else
    {
      sub_10001BC14(a4, a5);
      sub_10001BC14(a4, a5);
    }

    v93 = v22[18];
    v94 = v22[19];
    *((_OWORD *)v22 + 9) = xmmword_100E22B20;
    sub_10001EF3C(v93, v94);
    *(_QWORD *)&v132 = v60;
    LOBYTE(v135) = 10;
    v136 = 1;
    swift_errorRetain(v60);
    v122(&v132);
    swift_release();
    swift_errorRelease(v60);
    return sub_100004048((uint64_t)&v132, &qword_1010EEC38);
  }
  v64 = v111;
  if ((*(unsigned int (**)(char *, uint64_t))(v111 + 88))(v49, v63) != enum case for BinaryDecodingError.insufficientData(_:))
  {
    (*(void (**)(char *, uint64_t))(v64 + 8))(v49, v63);
    goto LABEL_26;
  }
  v65 = swift_errorRelease(v60);
  v66 = Logger.logObject.getter(v65);
  v67 = static os_log_type_t.info.getter(v66);
  if (os_log_type_enabled(v66, v67))
  {
    v68 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v68 = 0;
    _os_log_impl((void *)&_mh_execute_header, v66, v67, "insufficientData. Keep reading...", v68, 2u);
    swift_slowDealloc(v68, -1, -1);
    swift_release();

  }
  else
  {

    swift_release();
  }
  return swift_errorRelease(v132);
}

uint64_t sub_100A68DC0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  void *v9;
  id v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  __int128 v17[2];

  v5 = type metadata accessor for DispatchPredicate(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (uint64_t *)((char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = *(void **)(v2 + 16);
  *v8 = v9;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v6 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v5);
  v10 = v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)(v8);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v6 + 8))(v8, v5);
  if ((v9 & 1) != 0)
  {
    v12 = swift_allocObject(&unk_1010A3220, 24, 7);
    swift_weakInit(v12 + 16, v2);
    sub_100030784(a1, (uint64_t)v17);
    v13 = swift_allocObject(&unk_1010A32E8, 72, 7);
    *(_QWORD *)(v13 + 16) = v12;
    sub_10000F9FC(v17, v13 + 24);
    *(_QWORD *)(v13 + 64) = a2;
    v14 = sub_10001A9A8(&qword_101110ED8);
    swift_allocObject(v14, *(unsigned int *)(v14 + 48), *(unsigned __int16 *)(v14 + 52));
    swift_retain();
    return Future.init(_:)(sub_100A729A0, v13, v15);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100A68F18(void (*a1)(_OWORD *), uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t Strong;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v25;
  uint64_t v26;
  void *v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  int v34;
  NSObject *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  _BYTE v61[24];
  _OWORD v62[2];
  uint64_t v63;
  __int16 v64;
  char v65[32];

  v10 = type metadata accessor for BinaryEncoder(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v50 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  a3 += 16;
  swift_beginAccess(a3, v65, 0, 0);
  Strong = swift_weakLoadStrong(a3);
  if (!Strong)
  {
    v63 = 0;
    memset(v62, 0, sizeof(v62));
    v64 = 267;
    a1(v62);
    return sub_100004048((uint64_t)v62, &qword_101110ED0);
  }
  v15 = Strong;
  v57 = a5;
  v16 = *(_QWORD *)(Strong + 128);
  v17 = *(_QWORD *)(Strong + 136);
  *(_QWORD *)(Strong + 128) = a1;
  *(_QWORD *)(Strong + 136) = a2;
  swift_retain();
  v18 = sub_10001D8A8(v16, v17);
  BinaryEncoder.init()(v18);
  v20 = a4[3];
  v19 = a4[4];
  v21 = sub_10001AA44(a4, v20);
  v22 = 0;
  v23 = BinaryEncoder.encode<A>(_:)(v21, v20, *(_QWORD *)(v19 + 16));
  v54 = v25;
  v55 = v23;
  v26 = *(_QWORD *)(*(_QWORD *)(v15 + 64) + OBJC_IVAR____TtC12searchpartyd10Peripheral_lock);
  __chkstk_darwin(v23);
  *(&v50 - 2) = (uint64_t)v27;
  v28 = v27;
  OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_1000F83D8, &v50 - 4, v26, &type metadata for () + 1, &type metadata for Int);

  v29 = *(_QWORD *)&v62[0];
  if (__OFSUB__(*(_QWORD *)&v62[0], 1))
  {
    __break(1u);
    goto LABEL_11;
  }
  v56 = v11;
  v22 = Data.chunked(into:)(*(_QWORD *)&v62[0] - 1, v55, v54);
  if (qword_1010EA318 != -1)
LABEL_11:
    swift_once(&qword_1010EA318, sub_100B5E330);
  v30 = type metadata accessor for Logger(0);
  sub_10001A9E8(v30, (uint64_t)qword_1011B7DF8);
  swift_retain_n(v15, 4);
  swift_bridgeObjectRetain_n(v22, 2);
  v32 = Logger.logObject.getter(v31);
  v33 = static os_log_type_t.info.getter(v32);
  v34 = v33;
  v35 = v32;
  if (os_log_type_enabled(v32, v33))
  {
    v36 = swift_slowAlloc(42, -1);
    v52 = v34;
    v37 = v36;
    v51 = swift_slowAlloc(64, -1);
    *(_QWORD *)&v62[0] = v51;
    *(_DWORD *)v37 = 136315906;
    v58 = v13;
    swift_bridgeObjectRetain(v22);
    v39 = Array.description.getter(v38, &type metadata for Data);
    v53 = v10;
    v40 = v39;
    v42 = v41;
    swift_bridgeObjectRelease();
    v60 = sub_100016940(v40, v42, (uint64_t *)v62);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, v61, v37 + 4, v37 + 12);
    swift_bridgeObjectRelease_n(v22, 2);
    swift_bridgeObjectRelease();
    *(_WORD *)(v37 + 12) = 2048;
    v60 = v29;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, v61, v37 + 14, v37 + 22);
    *(_WORD *)(v37 + 22) = 2048;
    swift_beginAccess(v15 + 160, &v60, 0, 0);
    v43 = *(_QWORD *)(*(_QWORD *)(v15 + 160) + 16);
    swift_release();
    v59 = v43;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v59, &v60, v37 + 24, v37 + 32);
    swift_release();
    *(_WORD *)(v37 + 32) = 2080;
    swift_bridgeObjectRetain(*(_QWORD *)(v15 + 160));
    v45 = Array.description.getter(v44, &type metadata for Data);
    v47 = v46;
    swift_bridgeObjectRelease();
    v59 = sub_100016940(v45, v47, (uint64_t *)v62);
    v10 = v53;
    v13 = v58;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v59, &v60, v37 + 34, v37 + 42);
    swift_release_n(v15, 2);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v35, (os_log_type_t)v52, "Enqueuing %s. MTU %ld. Current queue [%ld] %s", (uint8_t *)v37, 0x2Au);
    v48 = v51;
    swift_arrayDestroy(v51, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v48, -1, -1);
    swift_slowDealloc(v37, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v22, 2);
    swift_release_n(v15, 4);
  }
  v49 = sub_1000F7B84(v22);
  swift_bridgeObjectRelease();
  swift_beginAccess(v15 + 160, v62, 33, 0);
  sub_10030294C((uint64_t)v49);
  swift_endAccess(v62);
  sub_100A695E8(v57, (uint64_t)a4);
  sub_10001BC14(v55, v54);
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v56 + 8))(v13, v10);
}

void sub_100A695E8(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  void *v16;
  id v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  _BOOL4 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  void (*v36)(uint64_t *);
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  uint64_t v42;
  NSObject *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  void (*v49)(char *, NSObject *);
  NSObject *v50;
  uint64_t v51;
  uint64_t v52;
  NSObject *v53;
  os_log_type_t v54;
  uint8_t *v55;
  uint64_t v56;
  NSObject *v57;
  os_log_type_t v58;
  uint8_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  NSObject *v66;
  os_log_type_t v67;
  int v68;
  NSObject *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  void (*v77)(uint64_t *);
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  NSObject *v88;
  char *v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _WORD v94[20];
  uint64_t v95;
  _BYTE v96[40];
  uint64_t v97[5];
  char v98;
  char v99[24];
  char v100[8];

  v3 = v2;
  v6 = type metadata accessor for DispatchTime(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v89 = (char *)&v82 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v11 = (char *)&v82 - v10;
  v12 = type metadata accessor for DispatchPredicate(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (uint64_t *)((char *)&v82 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v16 = (void *)v3[2];
  *v15 = v16;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v13 + 104))(v15, enum case for DispatchPredicate.onQueue(_:), v12);
  v17 = v16;
  LOBYTE(v16) = _dispatchPreconditionTest(_:)(v15);
  (*(void (**)(_QWORD *, uint64_t))(v13 + 8))(v15, v12);
  if ((v16 & 1) == 0)
  {
    __break(1u);
    goto LABEL_29;
  }
  v18 = v3 + 20;
  swift_beginAccess(v3 + 20, v100, 0, 0);
  if (*(_QWORD *)(v3[20] + 16))
  {
    swift_beginAccess(v3 + 20, v97, 33, 0);
    v19 = *v18;
    if (*(_QWORD *)(*v18 + 16))
    {
      v86 = v11;
      v87 = v7;
      v88 = v6;
      v6 = *(_QWORD *)(v19 + 32);
      v90 = *(_QWORD *)(v19 + 40);
      sub_10001BBBC(v6, v90);
      sub_100779578(0, 1);
      swift_endAccess(v97);
      if (qword_1010EA318 == -1)
        goto LABEL_5;
      goto LABEL_30;
    }
LABEL_29:
    __break(1u);
LABEL_30:
    swift_once(&qword_1010EA318, sub_100B5E330);
LABEL_5:
    v20 = type metadata accessor for Logger(0);
    v21 = sub_10001A9E8(v20, (uint64_t)qword_1011B7DF8);
    v22 = v90;
    sub_10001BBBC(v6, v90);
    swift_retain();
    sub_10001BBBC(v6, v22);
    v23 = swift_retain();
    v85 = v21;
    v24 = Logger.logObject.getter(v23);
    v25 = static os_log_type_t.info.getter(v24);
    v26 = os_log_type_enabled(v24, v25);
    v83 = a2;
    if (v26)
    {
      v27 = a1;
      v28 = swift_slowAlloc(22, -1);
      v29 = swift_slowAlloc(64, -1);
      v97[0] = v29;
      *(_DWORD *)v28 = 136315394;
      v30 = v90;
      v31 = Data.hexString.getter(v6, v90);
      v93 = sub_100016940(v31, v32, v97);
      v84 = v3;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v93, v94, v28 + 4, v28 + 12);
      swift_bridgeObjectRelease();
      sub_10001BC14(v6, v30);
      sub_10001BC14(v6, v30);
      *(_WORD *)(v28 + 12) = 2082;
      swift_retain();
      v33 = sub_1007C6C74();
      v35 = v34;
      swift_release();
      v93 = sub_100016940(v33, v35, v97);
      v3 = v84;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v93, v94, v28 + 14, v28 + 22);
      swift_release_n(v27, 2);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "processQueuedUpdates: writing %s. Characteristic %{public}s.", (uint8_t *)v28, 0x16u);
      swift_arrayDestroy(v29, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v29, -1, -1);
      swift_slowDealloc(v28, -1, -1);

    }
    else
    {
      v38 = v90;
      sub_10001BC14(v6, v90);
      sub_10001BC14(v6, v38);

      swift_release_n(a1, 2);
      v27 = a1;
    }
    v39 = swift_allocObject(&unk_1010A3298, 58, 7);
    *(_OWORD *)(v39 + 16) = 0u;
    v40 = v39 + 16;
    *(_OWORD *)(v39 + 32) = 0u;
    *(_QWORD *)(v39 + 48) = 0;
    *(_WORD *)(v39 + 56) = 267;
    v41 = dispatch_group_create();
    dispatch_group_enter(v41);
    v82 = v27;
    v97[0] = sub_1007C5C3C(v6, v90);
    v42 = swift_allocObject(&unk_1010A32C0, 32, 7);
    *(_QWORD *)(v42 + 16) = v39;
    *(_QWORD *)(v42 + 24) = v41;
    v84 = (_QWORD *)v39;
    swift_retain();
    v43 = v41;
    v44 = sub_10001A9A8(&qword_1010EEBE8);
    v45 = sub_1000193A4(&qword_1010EEBF0, &qword_1010EEBE8, (const char *)&protocol conformance descriptor for AnyPublisher<A, B>);
    Publisher.oneshot(_:)(sub_1000F7F80, v42, v44, v45);
    swift_release();
    v46 = swift_release();
    v47 = v89;
    static DispatchTime.now()(v46);
    v48 = v86;
    + infix(_:_:)(v47, 30.0);
    v49 = *(void (**)(char *, NSObject *))(v87 + 8);
    v50 = v88;
    v49(v47, v88);
    v51 = OS_dispatch_group.wait(timeout:)(v48) & 1;
    v49(v48, v50);
    v52 = static DispatchTimeoutResult.== infix(_:_:)(v51, 1);
    if ((v52 & 1) != 0)
    {
      v53 = Logger.logObject.getter(v52);
      v54 = static os_log_type_t.error.getter(v53);
      if (os_log_type_enabled(v53, v54))
      {
        v55 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v55 = 0;
        _os_log_impl((void *)&_mh_execute_header, v53, v54, "Timed out waiting for writeFuture", v55, 2u);
        swift_slowDealloc(v55, -1, -1);
      }

    }
    swift_beginAccess(v40, v99, 0, 0);
    sub_10000F9B8(v40, (uint64_t)v97, &qword_1010EEBF8);
    if ((v98 & 1) != 0)
    {
      v88 = v43;
      sub_100059244((uint64_t)v97, (uint64_t)&v95);
      v56 = sub_100059280(&v95, (uint64_t)&v93);
      v57 = Logger.logObject.getter(v56);
      v58 = static os_log_type_t.error.getter(v57);
      if (os_log_type_enabled(v57, v58))
      {
        v59 = (uint8_t *)swift_slowAlloc(12, -1);
        v60 = swift_slowAlloc(32, -1);
        v89 = (char *)v6;
        v61 = v60;
        v92 = v60;
        *(_DWORD *)v59 = 136446210;
        sub_100E01294();
        v91 = sub_100016940(v62, v63, &v92);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v91, &v92, v59 + 4, v59 + 12);
        swift_bridgeObjectRelease();
        sub_1000593D4(&v93);
        _os_log_impl((void *)&_mh_execute_header, v57, v58, "writeFuture error: %{public}s", v59, 0xCu);
        swift_arrayDestroy(v61, 1, (char *)&type metadata for Any + 8);
        v64 = v61;
        v6 = (uint64_t)v89;
        swift_slowDealloc(v64, -1, -1);
        swift_slowDealloc(v59, -1, -1);
      }
      else
      {
        sub_1000593D4(&v93);
      }

      v69 = v88;
      v77 = (void (*)(uint64_t *))v3[16];
      if (v77)
      {
        v78 = v3[17];
        v79 = sub_100059390();
        v80 = swift_allocError(&type metadata for CentralManager.Error, v79, 0, 0);
        sub_100059280(&v95, v81);
        v93 = v80;
        v94[16] = 256;
        swift_retain();
        v77(&v93);
        sub_10001D8A8((uint64_t)v77, v78);

        sub_10001BC14(v6, v90);
        sub_100004048((uint64_t)&v93, &qword_101110ED0);
        sub_1000593D4(&v95);
LABEL_26:
        swift_release();
        return;
      }
      sub_1000593D4(&v95);
    }
    else
    {
      v65 = swift_retain_n(v3, 2);
      v66 = Logger.logObject.getter(v65);
      v67 = static os_log_type_t.info.getter(v66);
      v68 = v67;
      v69 = v43;
      if (os_log_type_enabled(v66, v67))
      {
        v70 = swift_slowAlloc(22, -1);
        v71 = swift_slowAlloc(32, -1);
        v93 = v71;
        *(_DWORD *)v70 = 134218242;
        v95 = *(_QWORD *)(v3[20] + 16);
        LODWORD(v88) = v68;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v95, v96, v70 + 4, v70 + 12);
        *(_WORD *)(v70 + 12) = 2080;
        v87 = v70 + 14;
        swift_bridgeObjectRetain(v3[20]);
        v73 = v3;
        v74 = Array.description.getter(v72, &type metadata for Data);
        v89 = (char *)v6;
        v76 = v75;
        swift_bridgeObjectRelease();
        v95 = sub_100016940(v74, v76, &v93);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v95, v96, v87, v70 + 22);
        swift_release_n(v73, 2);
        v6 = (uint64_t)v89;
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v66, (os_log_type_t)v88, "writeFuture success. writeQueue [%ld] %s", (uint8_t *)v70, 0x16u);
        swift_arrayDestroy(v71, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v71, -1, -1);
        swift_slowDealloc(v70, -1, -1);

      }
      else
      {

        swift_release_n(v3, 2);
      }
      sub_100A695E8(v82, v83);
    }

    sub_10001BC14(v6, v90);
    goto LABEL_26;
  }
  v36 = (void (*)(uint64_t *))v3[16];
  if (v36)
  {
    v37 = v3[17];
    sub_100030784(a2, (uint64_t)v97);
    v98 = 0;
    swift_retain();
    v36(v97);
    sub_10001D8A8((uint64_t)v36, v37);
    sub_100004048((uint64_t)v97, &qword_101110ED0);
  }
}

uint64_t sub_100A6A004()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;

  v1 = v0;
  v2 = type metadata accessor for DispatchPredicate(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (uint64_t *)((char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = *(void **)(v1 + 16);
  *v5 = v6;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for DispatchPredicate.onQueue(_:), v2);
  v7 = v6;
  LOBYTE(v6) = _dispatchPreconditionTest(_:)(v5);
  (*(void (**)(_QWORD *, uint64_t))(v3 + 8))(v5, v2);
  if ((v6 & 1) != 0)
  {
    if (qword_1010EA318 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_1010EA318, sub_100B5E330);
LABEL_3:
  v8 = type metadata accessor for Logger(0);
  v9 = sub_10001A9E8(v8, (uint64_t)qword_1011B7DF8);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.info.getter(v10);
  if (os_log_type_enabled(v10, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v12 = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Creating new AirPodsLEPairingManager.", v12, 2u);
    swift_slowDealloc(v12, -1, -1);
  }

  v13 = *(_QWORD *)(v1 + 32);
  v14 = *(_QWORD *)(v1 + 40);
  v15 = *(unsigned __int8 *)(v1 + 72);
  v16 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 80)
                              + OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingInfo)
                  + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_allSerialNumbersAndPartIds);
  v17 = type metadata accessor for AirPodsLEPairingManager();
  swift_allocObject(v17, 216, 7);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain(v16);
  v18 = sub_1000DD9A8(v13, v14, v15, v16);
  *(_QWORD *)(v1 + 216) = v18;
  swift_retain();
  swift_release();
  return v18;
}

uint64_t sub_100A6A1F4(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v2[30] = a1;
  v2[31] = a2;
  v3 = type metadata accessor for DispatchWorkItemFlags(0);
  v2[32] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[33] = v4;
  v2[34] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchQoS(0);
  v2[35] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v2[36] = v6;
  v2[37] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for MACAddress(0);
  v2[38] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v2[39] = v8;
  v9 = *(_QWORD *)(v8 + 64);
  v2[40] = v9;
  v10 = (v9 + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[41] = swift_task_alloc(v10);
  v2[42] = swift_task_alloc(v10);
  return swift_task_switch(sub_100A6A2B8, 0, 0);
}

uint64_t sub_100A6A2B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t Strong;
  uint64_t result;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (__cdecl *v8)();

  v1 = *(_QWORD *)(v0 + 240) + 16;
  swift_beginAccess(v1, v0 + 144, 0, 0);
  Strong = swift_weakLoadStrong(v1);
  *(_QWORD *)(v0 + 344) = Strong;
  if (Strong)
  {
    if (qword_1010EA5B0 != -1)
      swift_once(&qword_1010EA5B0, sub_100D37418);
    swift_beginAccess(&xmmword_10111E6C0, v0 + 168, 0, 0);
    result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 104, &qword_1010EE220);
    if (*(_QWORD *)(v0 + 128))
    {
      sub_10000F9FC((__int128 *)(v0 + 104), v0 + 64);
      sub_10001AA44((_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 88));
      v8 = (uint64_t (__cdecl *)())((char *)&dword_1010EBC70 + dword_1010EBC70);
      v4 = (_QWORD *)swift_task_alloc(unk_1010EBC74);
      *(_QWORD *)(v0 + 352) = v4;
      *v4 = v0;
      v4[1] = sub_100A6A410;
      return v8();
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    v5 = *(_QWORD *)(v0 + 328);
    v6 = *(_QWORD *)(v0 + 296);
    v7 = *(_QWORD *)(v0 + 272);
    swift_task_dealloc(*(_QWORD *)(v0 + 336));
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  return result;
}

uint64_t sub_100A6A410(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 352);
  *(_QWORD *)(*(_QWORD *)v1 + 360) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100A6A46C, 0, 0);
}

uint64_t sub_100A6A46C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = *(_QWORD *)(v0 + 360);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 64));
  if (v1)
    return swift_task_switch(sub_100A6A5C0, *(_QWORD *)(v0 + 360), 0);
  if (qword_1010EA318 != -1)
    swift_once(&qword_1010EA318, sub_100B5E330);
  v3 = type metadata accessor for Logger(0);
  v4 = sub_10001A9E8(v3, (uint64_t)qword_1011B7DF8);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.error.getter(v5);
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Missing StandaloneBeaconService!", v7, 2u);
    swift_slowDealloc(v7, -1, -1);

    swift_release();
  }
  else
  {
    swift_release();

  }
  v8 = *(_QWORD *)(v0 + 328);
  v9 = *(_QWORD *)(v0 + 296);
  v10 = *(_QWORD *)(v0 + 272);
  swift_task_dealloc(*(_QWORD *)(v0 + 336));
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100A6A5C0()
{
  uint64_t *v0;
  _QWORD *v1;

  v1 = sub_100B8AEB4(v0[31], *(_QWORD *)(v0[45] + 128));
  v0[46] = 0;
  v0[47] = dispatch thunk of _AnySequenceBox.__copyToContiguousArray()(v1);
  swift_release();
  return swift_task_switch(sub_100A6A638, 0, 0);
}

uint64_t sub_100A6A638()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  _BOOL4 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  _BOOL4 v25;
  uint64_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v1 = *(_QWORD *)(v0 + 376);
  if (*(_QWORD *)(v1 + 16))
  {
    v38 = v0 + 208;
    if (qword_1010EA318 != -1)
      swift_once(&qword_1010EA318, sub_100B5E330);
    v2 = *(_QWORD *)(v0 + 328);
    v3 = *(_QWORD *)(v0 + 304);
    v4 = *(_QWORD *)(v0 + 312);
    v5 = *(_QWORD *)(v0 + 248);
    v6 = type metadata accessor for Logger(0);
    sub_10001A9E8(v6, (uint64_t)qword_1011B7DF8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v2, v5, v3);
    v7 = swift_retain();
    v8 = Logger.logObject.getter(v7);
    v9 = static os_log_type_t.error.getter(v8);
    v10 = os_log_type_enabled(v8, v9);
    v11 = *(_QWORD *)(v0 + 328);
    v12 = *(_QWORD *)(v0 + 304);
    v13 = *(_QWORD *)(v0 + 312);
    if (v10)
    {
      v14 = swift_slowAlloc(22, -1);
      v37 = v13;
      v15 = swift_slowAlloc(32, -1);
      v39 = v15;
      *(_DWORD *)v14 = 134218242;
      *(_QWORD *)(v0 + 208) = *(_QWORD *)(v1 + 16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v38, v0 + 216, v14 + 4, v14 + 12);
      swift_release();
      *(_WORD *)(v14 + 12) = 2082;
      v16 = sub_100006C64((unint64_t *)&qword_1010FBAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for MACAddress, (uint64_t)&protocol conformance descriptor for MACAddress);
      v17 = dispatch thunk of CustomStringConvertible.description.getter(v12, v16);
      *(_QWORD *)(v0 + 216) = sub_100016940(v17, v18, &v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 216, v0 + 224, v14 + 14, v14 + 22);
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v11, v12);
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Found %ld beacons matching %{public}s", (uint8_t *)v14, 0x16u);
      swift_arrayDestroy(v15, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v15, -1, -1);
      swift_slowDealloc(v14, -1, -1);
    }
    else
    {
      swift_release();
      (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v11, v12);
    }

    v22 = swift_retain();
    v23 = Logger.logObject.getter(v22);
    v24 = static os_log_type_t.debug.getter(v23);
    v25 = os_log_type_enabled(v23, v24);
    v26 = *(_QWORD *)(v0 + 376);
    if (v25)
    {
      v27 = (uint8_t *)swift_slowAlloc(12, -1);
      v28 = swift_slowAlloc(32, -1);
      v39 = v28;
      *(_DWORD *)v27 = 136315138;
      v29 = type metadata accessor for StandaloneBeacon(0);
      v30 = swift_retain();
      v31 = Array.description.getter(v30, v29);
      v33 = v32;
      swift_release();
      *(_QWORD *)(v0 + 200) = sub_100016940(v31, v33, &v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 200, v38, v27 + 4, v27 + 12);
      swift_bridgeObjectRelease();
      swift_release_n(v26, 2);
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Existing standalone beacons: %s", v27, 0xCu);
      swift_arrayDestroy(v28, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v28, -1, -1);
      swift_slowDealloc(v27, -1, -1);
      swift_release();
    }
    else
    {
      swift_release();
      swift_release_n(v26, 2);
    }

    swift_release();
    v34 = *(_QWORD *)(v0 + 328);
    v35 = *(_QWORD *)(v0 + 296);
    v36 = *(_QWORD *)(v0 + 272);
    swift_task_dealloc(*(_QWORD *)(v0 + 336));
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    swift_task_dealloc(v36);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    swift_release();
    v19 = async function pointer to unsafeBlocking<A>(_:)[1];
    swift_retain();
    v20 = (_QWORD *)swift_task_alloc(v19);
    *(_QWORD *)(v0 + 384) = v20;
    *v20 = v0;
    v20[1] = sub_100A6AAAC;
    return unsafeBlocking<A>(_:)(v0 + 392, sub_100A72F58, *(_QWORD *)(v0 + 344), &type metadata for Bool);
  }
}

uint64_t sub_100A6AAAC()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 384));
  swift_release();
  return swift_task_switch(sub_100A6AB0C, 0, 0);
}

uint64_t sub_100A6AB0C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  if ((v0[49] & 1) != 0)
  {
    if (qword_1010E9B08 != -1)
      swift_once(&qword_1010E9B08, sub_1002B4720);
    v1 = type metadata accessor for Logger(0);
    v2 = sub_10001A9E8(v1, (uint64_t)qword_1011B6CA8);
    v3 = Logger.logObject.getter(v2);
    v4 = static os_log_type_t.default.getter(v3);
    if (os_log_type_enabled(v3, v4))
    {
      v5 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "AirPods Pairing in progress. Not pairing.", v5, 2u);
      swift_slowDealloc(v5, -1, -1);
    }
    swift_release();

  }
  else
  {
    v7 = v0[42];
    v6 = v0[43];
    v9 = v0[39];
    v8 = v0[40];
    v10 = v0[37];
    v11 = v0[38];
    v27 = v0[36];
    v12 = v0[34];
    v28 = v0[35];
    v13 = v0[32];
    v26 = v0[33];
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v9 + 16))(v7, v0[31], v11);
    v14 = *(unsigned __int8 *)(v9 + 80);
    v15 = (v14 + 24) & ~v14;
    v16 = swift_allocObject(&unk_1010A3450, v15 + v8, v14 | 7);
    *(_QWORD *)(v16 + 16) = v6;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 32))(v16 + v15, v7, v11);
    v0[6] = sub_100A72F6C;
    v0[7] = v16;
    v0[2] = _NSConcreteStackBlock;
    v0[3] = 1107296256;
    v0[4] = sub_100016FB8;
    v0[5] = &unk_1010A3468;
    v17 = _Block_copy(v0 + 2);
    v18 = swift_retain();
    static DispatchQoS.unspecified.getter(v18);
    v0[29] = _swiftEmptyArrayStorage;
    v19 = sub_100006C64((unint64_t *)&qword_1010F0E50, 255, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v20 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v21 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
    dispatch thunk of SetAlgebra.init<A>(_:)(v0 + 29, v20, v21, v13, v19);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v10, v12, v17);
    _Block_release(v17);
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v12, v13);
    (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v10, v28);
    swift_release();
  }
  swift_release();
  v22 = v0[41];
  v23 = v0[37];
  v24 = v0[34];
  swift_task_dealloc(v0[42]);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  return ((uint64_t (*)(void))v0[1])();
}

uint64_t sub_100A6AE08()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  BOOL v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  swift_release();
  swift_release();
  if (qword_1010EA318 != -1)
    swift_once(&qword_1010EA318, sub_100B5E330);
  v1 = *(_QWORD *)(v0 + 368);
  v2 = type metadata accessor for Logger(0);
  sub_10001A9E8(v2, (uint64_t)qword_1011B7DF8);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter(v4);
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 368);
  if (v6)
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = swift_slowAlloc(32, -1);
    v17 = v9;
    *(_DWORD *)v8 = 136446210;
    *(_QWORD *)(v0 + 224) = v7;
    swift_errorRetain(v7);
    v10 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
    v11 = String.init<A>(describing:)(v0 + 224, v10);
    *(_QWORD *)(v0 + 192) = sub_100016940(v11, v12, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 192, v0 + 200, v8 + 4, v8 + 12);
    swift_bridgeObjectRelease();
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Failed to startStandaloneLEPairing due to %{public}s", v8, 0xCu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

    swift_errorRelease(v7);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 368));
    swift_errorRelease(v7);
    swift_errorRelease(v7);

  }
  v13 = *(_QWORD *)(v0 + 328);
  v14 = *(_QWORD *)(v0 + 296);
  v15 = *(_QWORD *)(v0 + 272);
  swift_task_dealloc(*(_QWORD *)(v0 + 336));
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100A6B034@<X0>(char *a1@<X8>)
{
  uint64_t result;
  char v3;
  char v4;
  char v5;

  result = QueueSynchronizer.conditionalSync<A>(_:)(sub_100A725D8);
  if ((v5 & 1) != 0)
  {
    v3 = 1;
  }
  else
  {
    result = QueueSynchronizer.conditionalSync<A>(_:)(sub_100A7597C);
    v3 = v4;
  }
  *a1 = v3;
  return result;
}

void sub_100A6B0BC(uint64_t a1, int a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  void *v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  uint64_t v32;
  BOOL v33;
  uint64_t My;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  uint8_t *v40;
  uint64_t v41;
  char *v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  char v47;
  uint64_t v48;
  uint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char v56;
  char *v57;
  uint64_t *v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void (*v62)(char *, uint64_t);
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  id v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  char *v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  void (*v84)(char *, uint64_t, uint64_t);
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  void (*v93)(uint64_t, char *, uint64_t);
  _QWORD *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  NSObject *v98;
  os_log_type_t v99;
  uint8_t *v100;
  uint64_t v101;
  uint64_t v102;
  id v103;
  int v104;
  int v105;
  char *v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  id v114;
  _QWORD v115[5];

  v4 = v3;
  v104 = a3;
  v105 = a2;
  v6 = sub_10001A9A8(&qword_1010EECC8);
  __chkstk_darwin(v6);
  v106 = (char *)&v101 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A9A8(&qword_10110ACD8);
  v108 = *(_QWORD *)(v8 - 8);
  v109 = v8;
  __chkstk_darwin(v8);
  v107 = (char *)&v101 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for MACAddress(0);
  v11 = *(_QWORD *)(v10 - 8);
  v111 = v10;
  v112 = v11;
  v12 = *(_QWORD *)(v11 + 64);
  v13 = __chkstk_darwin(v10);
  v14 = (char *)&v101 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v13);
  v17 = (char *)&v101 - v16;
  v18 = __chkstk_darwin(v15);
  v110 = (char *)&v101 - v19;
  v20 = __chkstk_darwin(v18);
  v22 = (char *)&v101 - v21;
  __chkstk_darwin(v20);
  v113 = (char *)&v101 - v23;
  v24 = type metadata accessor for DispatchPredicate(0);
  v25 = *(_QWORD *)(v24 - 8);
  __chkstk_darwin(v24);
  v27 = (uint64_t *)((char *)&v101 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0));
  v28 = *(void **)(v4 + 16);
  *v27 = v28;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v25 + 104))(v27, enum case for DispatchPredicate.onQueue(_:), v24);
  v103 = v28;
  LOBYTE(v28) = _dispatchPreconditionTest(_:)(v27);
  (*(void (**)(_QWORD *, uint64_t))(v25 + 8))(v27, v24);
  if ((v28 & 1) == 0)
  {
    __break(1u);
LABEL_28:
    swift_once(&qword_1010EA318, sub_100B5E330);
LABEL_8:
    v36 = type metadata accessor for Logger(0);
    v37 = sub_10001A9E8(v36, (uint64_t)qword_1011B7DF8);
    v38 = Logger.logObject.getter(v37);
    v39 = static os_log_type_t.default.getter(v38);
    if (os_log_type_enabled(v38, v39))
    {
      v40 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v40 = 0;
      _os_log_impl((void *)&_mh_execute_header, v38, v39, "Starting AirPods LE pairing using FindMyBluetooth", v40, 2u);
      swift_slowDealloc(v40, -1, -1);
    }
    v41 = a1;

    v42 = v113;
    sub_100786FB4(v113);
    v43 = sub_100A3EFAC();
    if (*(_QWORD *)(v43 + 16))
    {
      v44 = v4;
      v45 = sub_1005193C8((uint64_t)v42);
      v46 = v22;
      if ((v47 & 1) != 0)
      {
        v48 = v111;
        v49 = (uint64_t *)(*(_QWORD *)(v43 + 56) + 16 * v45);
        v50 = v49[1];
        v109 = *v49;
        sub_10001BBBC(v109, v50);
LABEL_21:
        swift_bridgeObjectRelease();
        v111 = type metadata accessor for Transaction(0);
        v83 = v112;
        v84 = *(void (**)(char *, uint64_t, uint64_t))(v112 + 16);
        v85 = v46;
        v84(v46, v41, v48);
        v86 = v110;
        v84(v110, (uint64_t)v113, v48);
        v87 = *(unsigned __int8 *)(v83 + 80);
        v88 = (v87 + 24) & ~v87;
        v89 = (v12 + v87 + v88) & ~v87;
        v90 = (v12 + v89 + 7) & 0xFFFFFFFFFFFFFFF8;
        v91 = swift_allocObject(&unk_1010A3270, v90 + 16, v87 | 7);
        *(_QWORD *)(v91 + 16) = v44;
        v92 = v91 + v88;
        v93 = *(void (**)(uint64_t, char *, uint64_t))(v83 + 32);
        v93(v92, v85, v48);
        v93(v91 + v89, v86, v48);
        v94 = (_QWORD *)(v91 + v90);
        v95 = v109;
        *v94 = v109;
        v94[1] = v50;
        swift_retain();
        sub_10001BD08(v95, v50);
        static Transaction.asyncTask(name:block:)("startDiscoveryAndPairingSession", 31, 2, &unk_101110EC8, v91);
        swift_release();
        sub_10001EF3C(v95, v50);
        (*(void (**)(char *, uint64_t))(v83 + 8))(v113, v48);
        return;
      }
    }
    else
    {
      v46 = v22;
      v44 = v4;
    }
    v48 = v111;
    v109 = 0;
    v50 = 0xF000000000000000;
    goto LABEL_21;
  }
  v29 = *(_QWORD *)(*(_QWORD *)(v4 + 80) + OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingInfo);
  v30 = *(_QWORD *)(v29 + 112);
  if (v30 >> 60 == 15)
  {
    v31 = 1;
  }
  else
  {
    v32 = *(_QWORD *)(v29 + 104);
    sub_10001BBBC(v32, *(_QWORD *)(v29 + 112));
    v33 = sub_100A087C0(v32, v30);
    sub_10001EF3C(v32, v30);
    v31 = !v33;
  }
  My = type metadata accessor for Feature.FindMy(0);
  v115[3] = My;
  v115[4] = sub_100006C64((unint64_t *)&qword_1010EE1B0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for Feature.FindMy, (uint64_t)&protocol conformance descriptor for Feature.FindMy);
  v35 = sub_100018F08(v115);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(My - 8) + 104))(v35, enum case for Feature.FindMy.smilingWheel(_:), My);
  LOBYTE(My) = isFeatureEnabled(_:)(v115);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v115);
  if ((My & 1) != 0 && (v31 & 1) == 0)
  {
    if (qword_1010EA318 == -1)
      goto LABEL_8;
    goto LABEL_28;
  }
  v51 = sub_100A6A004();
  if (v51)
  {
    v52 = v51;
    v113 = v22;
    sub_100786FB4(v17);
    sub_100786FB4(v14);
    v53 = sub_100A3EFAC();
    v54 = *(_QWORD *)(v53 + 16);
    v102 = a1;
    if (v54 && (v55 = sub_1005193C8((uint64_t)v14), (v56 & 1) != 0))
    {
      v57 = (char *)v52;
      v58 = (uint64_t *)(*(_QWORD *)(v53 + 56) + 16 * v55);
      v60 = *v58;
      v59 = v58[1];
      sub_10001BBBC(*v58, v59);
    }
    else
    {
      v57 = (char *)v52;
      v60 = 0;
      v59 = 0xF000000000000000;
    }
    swift_bridgeObjectRelease();
    v61 = v112;
    v62 = *(void (**)(char *, uint64_t))(v112 + 8);
    v63 = v111;
    v62((char *)&v101 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v111);
    v110 = v57;
    v64 = sub_1000DE18C(v102, (uint64_t)v17, v104 & 1, v60, v59, v105 & 1);
    sub_10001EF3C(v60, v59);
    v65 = v63;
    v62(v17, v63);
    v115[0] = v64;
    v66 = v103;
    v114 = v103;
    v67 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
    v68 = (uint64_t)v106;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v67 - 8) + 56))(v106, 1, 1, v67);
    v69 = v66;
    v70 = sub_10001A9A8(&qword_1010FAA88);
    v71 = sub_10000F4A0(0, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr);
    v72 = sub_1000193A4(&qword_1010FAA90, &qword_1010FAA88, (const char *)&protocol conformance descriptor for AnyPublisher<A, B>);
    v73 = sub_1001C7EF4();
    v74 = v107;
    Publisher.receive<A>(on:options:)(&v114, v68, v70, v71, v72, v73);
    sub_100004048(v68, &qword_1010EECC8);

    swift_release();
    v75 = swift_allocObject(&unk_1010A3220, 24, 7);
    swift_weakInit(v75 + 16, v4);
    v76 = v113;
    (*(void (**)(char *, uint64_t, uint64_t))(v61 + 16))(v113, v102, v65);
    v77 = *(unsigned __int8 *)(v61 + 80);
    v78 = (v77 + 24) & ~v77;
    v79 = swift_allocObject(&unk_1010A3248, v78 + v12, v77 | 7);
    *(_QWORD *)(v79 + 16) = v75;
    (*(void (**)(uint64_t, char *, uint64_t))(v61 + 32))(v79 + v78, v76, v65);
    v80 = sub_1000193A4(&qword_10110ACF8, &qword_10110ACD8, (const char *)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
    v81 = v109;
    Publisher<>.sink(receiveValue:)(sub_100A72644, v79, v109, v80);
    swift_release();
    (*(void (**)(char *, uint64_t))(v108 + 8))(v74, v81);
    v82 = v4 + 88;
    swift_beginAccess(v82, v115, 33, 0);
    AnyCancellable.store(in:)(v82);
    swift_endAccess(v115);
    swift_release();
    swift_release();
  }
  else
  {
    if (qword_1010EA318 != -1)
      swift_once(&qword_1010EA318, sub_100B5E330);
    v96 = type metadata accessor for Logger(0);
    v97 = sub_10001A9E8(v96, (uint64_t)qword_1011B7DF8);
    v98 = Logger.logObject.getter(v97);
    v99 = static os_log_type_t.error.getter(v98);
    if (os_log_type_enabled(v98, v99))
    {
      v100 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v100 = 0;
      _os_log_impl((void *)&_mh_execute_header, v98, v99, "Unable to create pairing manager to start LE pairing!", v100, 2u);
      swift_slowDealloc(v100, -1, -1);
    }

  }
}

uint64_t sub_100A6B930(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;

  v5[26] = a4;
  v5[27] = a5;
  v5[24] = a2;
  v5[25] = a3;
  v5[23] = a1;
  return swift_task_switch(sub_100A6B950, 0, 0);
}

uint64_t sub_100A6B950()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v2 = (_QWORD *)swift_task_alloc(v1);
  *(_QWORD *)(v0 + 224) = v2;
  *v2 = v0;
  v2[1] = sub_100A6B9BC;
  return unsafeBlocking<A>(_:)(v2, sub_100A727F4, *(_QWORD *)(v0 + 184), &type metadata for () + 1);
}

uint64_t sub_100A6B9BC()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 224));
  swift_release();
  return swift_task_switch(sub_100A6BA1C, 0, 0);
}

uint64_t sub_100A6BA1C()
{
  uint64_t v0;
  uint64_t result;
  _QWORD *v2;
  uint64_t (__cdecl *v3)();

  if (qword_1010EA5B0 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v0 + 96, 0, 0);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 56, &qword_1010EE220);
  if (*(_QWORD *)(v0 + 80))
  {
    sub_10000F9FC((__int128 *)(v0 + 56), v0 + 16);
    sub_10001AA44((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
    v3 = (uint64_t (__cdecl *)())((char *)&dword_1010EBD00 + dword_1010EBD00);
    v2 = (_QWORD *)swift_task_alloc(unk_1010EBD04);
    *(_QWORD *)(v0 + 232) = v2;
    *v2 = v0;
    v2[1] = sub_100A6BB08;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100A6BB08(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 232);
  *(_QWORD *)(*(_QWORD *)v1 + 240) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100A6BB64, 0, 0);
}

uint64_t sub_100A6BB64()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  unint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  _QWORD *v20;

  v1 = (_QWORD *)(v0 + 16);
  if (*(_QWORD *)(v0 + 240))
  {
    v2 = *(_QWORD *)(v0 + 184);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    LOBYTE(v2) = *(_BYTE *)(v2 + 72);
    v3 = (_QWORD *)swift_task_alloc(dword_1010EC21C);
    *(_QWORD *)(v0 + 248) = v3;
    *v3 = v0;
    v3[1] = sub_100A6BE84;
    return sub_100039174(*(_QWORD *)(v0 + 192), *(_QWORD *)(v0 + 200), *(_QWORD *)(v0 + 208), *(_QWORD *)(v0 + 216), v2, 0);
  }
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
  if (qword_1010EA318 != -1)
    swift_once(&qword_1010EA318, sub_100B5E330);
  v5 = (unint64_t *)(v0 + 176);
  v6 = type metadata accessor for Logger(0);
  v7 = sub_10001A9E8(v6, (uint64_t)qword_1011B7DF8);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.error.getter(v8);
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Unable to get AirPodsLEPairingService", v10, 2u);
    swift_slowDealloc(v10, -1, -1);
  }

  v11 = sub_100033220();
  v12 = swift_allocError(&type metadata for DaemonError, v11, 0, 0);
  *v13 = 0xD000000000000017;
  v13[1] = 0x8000000100EECF30;
  swift_willThrow(v12);
  *(_QWORD *)(v0 + 272) = v12;
  *(_QWORD *)(v0 + 152) = v12;
  swift_errorRetain(v12);
  v14 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
  if (!swift_dynamicCast(v0 + 176, v0 + 152, v14, &type metadata for AirPodsLEPairingService.Error, 0))
    goto LABEL_15;
  if (*v5 != 0x800000000000000ELL)
  {
    sub_100058554(*v5);
LABEL_15:
    swift_errorRelease(*(_QWORD *)(v0 + 152));
    v19 = async function pointer to unsafeBlocking<A>(_:)[1];
    swift_retain();
    v20 = (_QWORD *)swift_task_alloc(v19);
    *(_QWORD *)(v0 + 280) = v20;
    *v20 = v0;
    v20[1] = sub_100A6C0FC;
    return unsafeBlocking<A>(_:)(v20, sub_100A72850, *(_QWORD *)(v0 + 184), &type metadata for () + 1);
  }
  swift_errorRelease(v12);
  if (qword_1010EA318 != -1)
    swift_once(&qword_1010EA318, sub_100B5E330);
  v15 = sub_10001A9E8(v6, (uint64_t)qword_1011B7DF8);
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.error.getter(v16);
  if (os_log_type_enabled(v16, v17))
  {
    v18 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v18 = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Existing pairing session in progress!", v18, 2u);
    swift_slowDealloc(v18, -1, -1);
  }

  swift_errorRelease(*(_QWORD *)(v0 + 152));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100A6BE84()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 248);
  *(_QWORD *)(*(_QWORD *)v1 + 256) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_100A6C3FC;
  else
    v3 = sub_100A6BEE8;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_100A6BEE8()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v2 = (_QWORD *)swift_task_alloc(v1);
  *(_QWORD *)(v0 + 264) = v2;
  *v2 = v0;
  v2[1] = sub_100A6BF54;
  return unsafeBlocking<A>(_:)(v2, sub_100A7285C, *(_QWORD *)(v0 + 184), &type metadata for () + 1);
}

uint64_t sub_100A6BF54()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 264));
  swift_release();
  return swift_task_switch(sub_100A6BFB4, 0, 0);
}

uint64_t sub_100A6BFB4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  void *v7;
  char v8;
  id v9;

  if (qword_1010EA318 != -1)
    swift_once(&qword_1010EA318, sub_100B5E330);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_10001A9E8(v1, (uint64_t)qword_1011B7DF8);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Pairing has been completed for all serial numbers.", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }
  v6 = *(_QWORD *)(v0 + 184);

  v7 = *(void **)(v6 + 64);
  v8 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v6 + 80)
                            + OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingInfo)
                + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_skippedClassic);
  *(_QWORD *)(v0 + 120) = v7;
  *(_BYTE *)(v0 + 128) = v8;
  swift_retain();
  v9 = v7;
  PassthroughSubject.send(_:)(v0 + 120);
  swift_release();
  swift_release();

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100A6C0FC()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 280));
  swift_release();
  return swift_task_switch(sub_100A6C15C, 0, 0);
}

uint64_t sub_100A6C15C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  id v16;
  uint64_t v18;

  if (qword_1010EA318 != -1)
    swift_once(&qword_1010EA318, sub_100B5E330);
  v1 = *(_QWORD *)(v0 + 272);
  v2 = type metadata accessor for Logger(0);
  sub_10001A9E8(v2, (uint64_t)qword_1011B7DF8);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter(v4);
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 272);
  if (v6)
  {
    v8 = swift_slowAlloc(22, -1);
    v9 = (uint64_t *)swift_slowAlloc(8, -1);
    v10 = swift_slowAlloc(32, -1);
    v18 = v10;
    *(_DWORD *)v8 = 136315394;
    *(_QWORD *)(v0 + 160) = sub_100016940(0xD00000000000003ELL, 0x8000000100EECF50, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 160, v0 + 168, v8 + 4, v8 + 12);
    *(_WORD *)(v8 + 12) = 2114;
    swift_errorRetain(v7);
    v11 = _swift_stdlib_bridgeErrorToNSError(v7);
    *(_QWORD *)(v0 + 168) = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 168, v0 + 176, v8 + 14, v8 + 22);
    *v9 = v11;
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "%s error: %{public}@", (uint8_t *)v8, 0x16u);
    v12 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v9, 1, v12);
    swift_slowDealloc(v9, -1, -1);
    swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 272));
    swift_errorRelease(v7);
  }

  v13 = *(_QWORD *)(v0 + 272);
  v14 = *(_QWORD *)(v0 + 184);
  v15 = *(void **)(v14 + 64);
  LOBYTE(v14) = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v14 + 80)
                                     + OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingInfo)
                         + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_skippedClassic);
  *(_QWORD *)(v0 + 136) = v15;
  *(_BYTE *)(v0 + 144) = v14;
  swift_retain();
  v16 = v15;
  PassthroughSubject.send(_:)(v0 + 136);
  swift_release();
  swift_errorRelease(v13);

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100A6C3FC()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v10;
  _QWORD *v11;

  swift_release();
  v1 = *(_QWORD *)(v0 + 256);
  *(_QWORD *)(v0 + 152) = v1;
  v2 = (unint64_t *)(v0 + 176);
  *(_QWORD *)(v0 + 272) = v1;
  swift_errorRetain(v1);
  v3 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
  if (!swift_dynamicCast(v0 + 176, v0 + 152, v3, &type metadata for AirPodsLEPairingService.Error, 0))
    goto LABEL_9;
  if (*v2 != 0x800000000000000ELL)
  {
    sub_100058554(*v2);
LABEL_9:
    swift_errorRelease(*(_QWORD *)(v0 + 152));
    v10 = async function pointer to unsafeBlocking<A>(_:)[1];
    swift_retain();
    v11 = (_QWORD *)swift_task_alloc(v10);
    *(_QWORD *)(v0 + 280) = v11;
    *v11 = v0;
    v11[1] = sub_100A6C0FC;
    return unsafeBlocking<A>(_:)(v11, sub_100A72850, *(_QWORD *)(v0 + 184), &type metadata for () + 1);
  }
  swift_errorRelease(v1);
  if (qword_1010EA318 != -1)
    swift_once(&qword_1010EA318, sub_100B5E330);
  v4 = type metadata accessor for Logger(0);
  v5 = sub_10001A9E8(v4, (uint64_t)qword_1011B7DF8);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.error.getter(v6);
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Existing pairing session in progress!", v8, 2u);
    swift_slowDealloc(v8, -1, -1);
  }

  swift_errorRelease(*(_QWORD *)(v0 + 152));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100A6C5B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t result;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  void *v20;
  char v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  char v27;
  _BYTE v28[24];

  v5 = type metadata accessor for MACAddress(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  a2 += 16;
  swift_beginAccess(a2, v28, 0, 0);
  result = swift_weakLoadStrong(a2);
  if (result)
  {
    v10 = (_QWORD *)result;
    if (qword_1010EA318 != -1)
      swift_once(&qword_1010EA318, sub_100B5E330);
    v11 = type metadata accessor for Logger(0);
    sub_10001A9E8(v11, (uint64_t)qword_1011B7DF8);
    v12 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a3, v5);
    v13 = Logger.logObject.getter(v12);
    v14 = static os_log_type_t.default.getter(v13);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = swift_slowAlloc(22, -1);
      v16 = swift_slowAlloc(32, -1);
      *(_DWORD *)v15 = 141558275;
      v25 = 1752392040;
      v26 = (void *)v16;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, &v26, v15 + 4, v15 + 12);
      *(_WORD *)(v15 + 12) = 2081;
      v24 = v15 + 14;
      v17 = sub_100006C64((unint64_t *)&qword_1010FBAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for MACAddress, (uint64_t)&protocol conformance descriptor for MACAddress);
      v18 = dispatch thunk of CustomStringConvertible.description.getter(v5, v17);
      v25 = sub_100016940(v18, v19, (uint64_t *)&v26);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, &v26, v24, v15 + 22);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "LE Pairing completed for %{private,mask.hash}s", (uint8_t *)v15, 0x16u);
      swift_arrayDestroy(v16, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v16, -1, -1);
      swift_slowDealloc(v15, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    }

    v21 = *(_BYTE *)(*(_QWORD *)(v10[10] + OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingInfo)
                   + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_skippedClassic);
    v26 = (void *)v10[8];
    v20 = v26;
    v27 = v21;
    swift_retain();
    v22 = v20;
    PassthroughSubject.send(_:)(&v26);

    swift_release();
    v10[27] = 0;
    swift_release();
    return swift_release();
  }
  return result;
}

void sub_100A6C88C(uint64_t a1, int a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  void *v27;
  id v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint64_t v32;
  char *v33;
  uint8_t *v34;
  uint8_t *v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  uint8_t *v39;
  const char *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  NSObject *v56;
  os_log_type_t v57;
  uint8_t *v58;
  _BOOL4 v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  char *v63;
  char *v64;
  int v65;
  char *v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  char v73;

  v5 = v4;
  v68 = a4;
  v61 = a3;
  v65 = a2;
  v71 = a1;
  v6 = type metadata accessor for MACAddress(0);
  v67 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v64 = (char *)&v61 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A9A8(&qword_101110EB8);
  __chkstk_darwin(v8);
  v62 = (uint64_t *)((char *)&v61 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = sub_10001A9A8((uint64_t *)&unk_1010F9890);
  v11 = __chkstk_darwin(v10);
  v66 = (char *)&v61 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v11);
  v63 = (char *)&v61 - v14;
  __chkstk_darwin(v13);
  v16 = (char *)&v61 - v15;
  v17 = sub_10001A9A8((uint64_t *)&unk_1010FF7F0);
  __chkstk_darwin(v17);
  v19 = (char *)&v61 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for OwnedBeaconGroup(0);
  v21 = *(_QWORD *)(v20 - 8);
  __chkstk_darwin(v20);
  v69 = (uint64_t)&v61 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for DispatchPredicate(0);
  v24 = *(_QWORD *)(v23 - 8);
  __chkstk_darwin(v23);
  v26 = (uint64_t *)((char *)&v61 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0));
  v27 = *(void **)(v5 + 16);
  *v26 = v27;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v24 + 104))(v26, enum case for DispatchPredicate.onQueue(_:), v23);
  v28 = v27;
  LOBYTE(v27) = _dispatchPreconditionTest(_:)(v26);
  (*(void (**)(_QWORD *, uint64_t))(v24 + 8))(v26, v23);
  if ((v27 & 1) != 0)
  {
    if (qword_1010EA318 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_1010EA318, sub_100B5E330);
LABEL_3:
  v29 = type metadata accessor for Logger(0);
  v70 = sub_10001A9E8(v29, (uint64_t)qword_1011B7DF8);
  v30 = Logger.logObject.getter(v70);
  v31 = static os_log_type_t.default.getter(v30);
  if (os_log_type_enabled(v30, v31))
  {
    v32 = v6;
    v33 = v16;
    v34 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v34 = 0;
    _os_log_impl((void *)&_mh_execute_header, v30, v31, "Starting LE pairing", v34, 2u);
    v35 = v34;
    v16 = v33;
    v6 = v32;
    swift_slowDealloc(v35, -1, -1);
  }

  QueueSynchronizer.conditionalSync<A>(_:)(sub_100A725D8);
  if ((v73 & 1) != 0 || (QueueSynchronizer.conditionalSync<A>(_:)(sub_100A725F0), (v72 & 1) != 0))
  {
    if (qword_1010E9B08 != -1)
      swift_once(&qword_1010E9B08, sub_1002B4720);
    v36 = sub_10001A9E8(v29, (uint64_t)qword_1011B6CA8);
    v37 = Logger.logObject.getter(v36);
    v38 = static os_log_type_t.default.getter(v37);
    if (!os_log_type_enabled(v37, v38))
      goto LABEL_12;
    v39 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v39 = 0;
    v40 = "LE Pairing in progress. Not pairing.";
    goto LABEL_11;
  }
  sub_10081F5CC(v71, (uint64_t)v19);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20) == 1)
  {
    v41 = sub_100004048((uint64_t)v19, (uint64_t *)&unk_1010FF7F0);
    v37 = Logger.logObject.getter(v41);
    v38 = static os_log_type_t.error.getter(v37);
    if (!os_log_type_enabled(v37, v38))
      goto LABEL_12;
    v39 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v39 = 0;
    v40 = "Missing beacon group to start LE pairing!";
LABEL_11:
    _os_log_impl((void *)&_mh_execute_header, v37, v38, v40, v39, 2u);
    swift_slowDealloc(v39, -1, -1);
LABEL_12:

    return;
  }
  v42 = v69;
  sub_1000126EC((uint64_t)v19, v69, type metadata accessor for OwnedBeaconGroup);
  v43 = v68;
  v44 = v68 >> 60;
  if (v68 >> 60 == 15)
  {
    v48 = sub_10036FA1C();
    v49 = v62;
    sub_1000FC644(v48, v62);
    swift_bridgeObjectRelease();
    v50 = sub_10001A9A8(&qword_1010EEFD0);
    v51 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v50 - 8) + 48))(v49, 1, v50);
    v47 = v67;
    if (v51 == 1)
    {
      sub_100004048((uint64_t)v49, &qword_101110EB8);
      v52 = 1;
      v46 = (uint64_t)v66;
      v53 = (uint64_t)v63;
    }
    else
    {
      sub_10001BC14(*v49, v49[1]);
      v54 = (char *)v49 + *(int *)(v50 + 48);
      v53 = (uint64_t)v63;
      (*(void (**)(char *, char *, uint64_t))(v47 + 32))(v63, v54, v6);
      v52 = 0;
      v46 = (uint64_t)v66;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v47 + 56))(v53, v52, 1, v6);
    sub_100005CF0(v53, (uint64_t)v16, (uint64_t *)&unk_1010F9890);
  }
  else
  {
    v45 = v61;
    sub_10001BBBC(v61, v68);
    sub_10036B124(v45, v43, (uint64_t)v16);
    sub_10001EF3C(v45, v43);
    v46 = (uint64_t)v66;
    v47 = v67;
  }
  sub_10000F9B8((uint64_t)v16, v46, (uint64_t *)&unk_1010F9890);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v47 + 48))(v46, 1, v6) == 1)
  {
    v55 = sub_100004048(v46, (uint64_t *)&unk_1010F9890);
    v56 = Logger.logObject.getter(v55);
    v57 = static os_log_type_t.error.getter(v56);
    if (os_log_type_enabled(v56, v57))
    {
      v58 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v58 = 0;
      _os_log_impl((void *)&_mh_execute_header, v56, v57, "Invalid state. No MAC address to start LE pairing", v58, 2u);
      swift_slowDealloc(v58, -1, -1);
    }

  }
  else
  {
    v59 = v44 < 0xF;
    v60 = (uint64_t)v64;
    (*(void (**)(char *, uint64_t, uint64_t))(v47 + 32))(v64, v46, v6);
    sub_100A6B0BC(v60, v59, v65 & 1);
    (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v60, v6);
  }
  sub_100004048((uint64_t)v16, (uint64_t *)&unk_1010F9890);
  sub_1000126B0(v42, type metadata accessor for OwnedBeaconGroup);
}

void sub_100A6CF58(char a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  char *v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t v30;

  v2 = v1;
  v4 = *v1;
  v5 = type metadata accessor for DispatchPredicate(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (uint64_t *)((char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = (void *)v2[2];
  *v8 = v9;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v6 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v5);
  v10 = v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)(v8);
  (*(void (**)(_QWORD *, uint64_t))(v6 + 8))(v8, v5);
  if ((v9 & 1) != 0)
  {
    if (qword_1010EA318 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_1010EA318, sub_100B5E330);
LABEL_3:
  v11 = type metadata accessor for Logger(0);
  v12 = sub_10001A9E8(v11, (uint64_t)qword_1011B7DF8);
  v13 = Logger.logObject.getter(v12);
  v14 = static os_log_type_t.default.getter(v13);
  if (os_log_type_enabled(v13, v14))
  {
    v15 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v15 = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "pairingCompleteAnalyticsEvent", v15, 2u);
    swift_slowDealloc(v15, -1, -1);
  }

  v17 = v2[29];
  if (v17)
  {
    v18 = *(_QWORD *)(v2[10] + OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingInfo);
    type metadata accessor for Transaction(0);
    v19 = (_QWORD *)swift_allocObject(&unk_1010A31D0, 40, 7);
    v19[2] = v17;
    v19[3] = v18;
    v19[4] = v4;
    swift_retain_n(v17, 2);
    swift_retain_n(v18, 2);
    static Transaction.asyncTask(name:block:)("UnpairAirPodsAnalytics", 22, 2, &unk_101110EA0, v19);
    swift_release();
    v20 = type metadata accessor for AnalyticsEvent(0);
    v21 = (char *)swift_allocObject(v20, *(unsigned int *)(v20 + 48), *(unsigned __int16 *)(v20 + 52));
    swift_defaultActor_initialize(v21);
    v22 = sub_1006B8B38((uint64_t)_swiftEmptyArrayStorage);
    *((_QWORD *)v21 + 14) = v22;
    UUID.init()(v22);
    v23 = &v21[OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_startTime];
    v24 = type metadata accessor for DispatchTime(0);
    v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56);
    v25(v23, 1, 1, v24);
    v25(&v21[OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_endTime], 1, 1, v24);
    *((_QWORD *)v21 + 15) = 0xD00000000000002CLL;
    *((_QWORD *)v21 + 16) = 0x8000000100EC7FD0;
    v2[29] = v21;
    swift_retain();
    swift_release();
    v26 = swift_allocObject(&unk_1010A31F8, 25, 7);
    *(_QWORD *)(v26 + 16) = v21;
    *(_BYTE *)(v26 + 24) = a1 & 1;
    swift_retain();
    static Transaction.asyncTask(name:block:)("pairingCompleteAnalyticsEvent.continuePairing", 45, 2, &unk_101110EB0, v26);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    v27 = Logger.logObject.getter(v16);
    v28 = static os_log_type_t.error.getter(v27);
    if (os_log_type_enabled(v27, v28))
    {
      v29 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v29 = 0;
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "No analytics event!", v29, 2u);
      swift_slowDealloc(v29, -1, -1);
    }

  }
}

uint64_t sub_100A6D300(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return swift_task_switch(sub_100A6D318, 0, 0);
}

uint64_t sub_100A6D318()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_retain();
  return swift_task_switch(sub_100A6D354, v1, 0);
}

uint64_t sub_100A6D354()
{
  uint64_t v0;

  sub_100CF20B0(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
  swift_release();
  return swift_task_switch(sub_1000F6CB4, 0, 0);
}

void sub_100A6D3BC(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v2 = v1;
  v4 = *v1;
  v5 = type metadata accessor for DispatchPredicate(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (uint64_t *)((char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = (void *)v2[2];
  *v8 = v9;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v6 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v5);
  v10 = v9;
  LOBYTE(v9) = _dispatchPreconditionTest(_:)(v8);
  (*(void (**)(_QWORD *, uint64_t))(v6 + 8))(v8, v5);
  if ((v9 & 1) != 0)
  {
    if (qword_1010EA318 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_1010EA318, sub_100B5E330);
LABEL_3:
  v11 = type metadata accessor for Logger(0);
  sub_10001A9E8(v11, (uint64_t)qword_1011B7DF8);
  swift_errorRetain(a1);
  v12 = swift_errorRetain(a1);
  v13 = Logger.logObject.getter(v12);
  v14 = static os_log_type_t.default.getter(v13);
  if (os_log_type_enabled(v13, v14))
  {
    v15 = (uint8_t *)swift_slowAlloc(12, -1);
    v16 = swift_slowAlloc(32, -1);
    v30 = v4;
    v31 = a1;
    v17 = v16;
    v32 = v16;
    *(_DWORD *)v15 = 136446210;
    swift_errorRetain(a1);
    v18 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
    v19 = String.init<A>(describing:)(&v31, v18);
    v31 = sub_100016940(v19, v20, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32, v15 + 4, v15 + 12);
    swift_bridgeObjectRelease();
    swift_errorRelease(a1);
    swift_errorRelease(a1);
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "pairingFailureAnalyticsEvent %{public}s", v15, 0xCu);
    swift_arrayDestroy(v17, 1, (char *)&type metadata for Any + 8);
    v21 = v17;
    v4 = v30;
    swift_slowDealloc(v21, -1, -1);
    swift_slowDealloc(v15, -1, -1);
  }
  else
  {
    swift_errorRelease(a1);
    swift_errorRelease(a1);
  }

  v23 = v2[29];
  if (v23)
  {
    v24 = *(_QWORD *)(v2[10] + OBJC_IVAR____TtC12searchpartyd27AccessoryPairingCoordinator_pairingInfo);
    type metadata accessor for Transaction(0);
    v25 = (_QWORD *)swift_allocObject(&unk_1010A31A8, 48, 7);
    v25[2] = v23;
    v25[3] = v24;
    v25[4] = a1;
    v25[5] = v4;
    swift_retain();
    swift_retain();
    swift_errorRetain(a1);
    swift_retain();
    swift_retain();
    static Transaction.asyncTask(name:block:)("pairingFailureAnalyticsEvent", 28, 2, &unk_101110E90, v25);
    swift_release();
    swift_release();
    swift_release();
    v2[29] = 0;
    swift_release();
  }
  else
  {
    v26 = Logger.logObject.getter(v22);
    v27 = static os_log_type_t.default.getter(v26);
    if (os_log_type_enabled(v26, v27))
    {
      v28 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v28 = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "No analytics event!", v28, 2u);
      swift_slowDealloc(v28, -1, -1);
    }

  }
}

uint64_t sub_100A6D738(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  return swift_task_switch(sub_100A6D754, 0, 0);
}

uint64_t sub_100A6D754()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 32);
  v2 = *(_QWORD *)(v0 + 16);
  swift_retain();
  swift_errorRetain(v1);
  return swift_task_switch(sub_100A6D79C, v2, 0);
}

uint64_t sub_100A6D79C()
{
  uint64_t *v0;

  sub_100CF20D4(v0[2], v0[3], v0[4]);
  swift_errorRelease(v0[4]);
  swift_release();
  return swift_task_switch(sub_1000F7614, 0, 0);
}

uint64_t sub_100A6D810()
{
  return sub_100A3F5DC();
}

void sub_100A6D830(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14[2];
  uint64_t v15;
  uint64_t v16;

  v1 = a1[1];
  v2 = Data.subdata(in:)(0, 20, *a1, v1);
  v4 = v3;
  v14[0] = v2;
  v14[1] = v3;
  v5 = sub_100035530();
  if ((DataProtocol.isNull.getter(&type metadata for Data, v5) & 1) == 0)
  {
    Data.trimmed.getter(v2, v4);
    __asm { BR              X10 }
  }
  if (qword_1010EA318 != -1)
    swift_once(&qword_1010EA318, sub_100B5E330);
  v6 = type metadata accessor for Logger(0);
  sub_10001A9E8(v6, (uint64_t)qword_1011B7DF8);
  sub_10001BBBC(v2, v4);
  v7 = sub_10001BBBC(v2, v4);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.error.getter(v8);
  if (os_log_type_enabled(v8, v9))
  {
    v10 = swift_slowAlloc(22, -1);
    v11 = swift_slowAlloc(32, -1);
    *(_DWORD *)v10 = 141558275;
    v15 = 1752392040;
    v14[0] = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, &v16, v10 + 4, v10 + 12);
    *(_WORD *)(v10 + 12) = 2081;
    v12 = Data.hexString.getter(v2, v4);
    v15 = sub_100016940(v12, v13, v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, &v16, v10 + 14, v10 + 22);
    swift_bridgeObjectRelease();
    sub_10001BC14(v2, v4);
    sub_10001BC14(v2, v4);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Invalid serial number %{private,mask.hash}s", (uint8_t *)v10, 0x16u);
    swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v11, -1, -1);
    swift_slowDealloc(v10, -1, -1);

    sub_10001BC14(v2, v4);
  }
  else
  {
    sub_10001BC14(v2, v4);
    sub_10001BC14(v2, v4);
    sub_10001BC14(v2, v4);

  }
}

void sub_100A6DC50(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18[2];
  uint64_t v19;
  uint64_t v20;

  v2 = sub_10001A9A8(&qword_1010EC5E8);
  __chkstk_darwin(v2);
  v3 = sub_10001A9A8((uint64_t *)&unk_1010F9890);
  v4 = __chkstk_darwin(v3);
  __chkstk_darwin(v4);
  v5 = a1[1];
  v6 = Data.subdata(in:)(0, 20, *a1, v5);
  v8 = v7;
  v18[0] = v6;
  v18[1] = v7;
  v9 = sub_100035530();
  if ((DataProtocol.isNull.getter(&type metadata for Data, v9) & 1) == 0)
  {
    Data.trimmed.getter(v6, v8);
    __asm { BR              X10 }
  }
  if (qword_1010EA318 != -1)
    swift_once(&qword_1010EA318, sub_100B5E330);
  v10 = type metadata accessor for Logger(0);
  sub_10001A9E8(v10, (uint64_t)qword_1011B7DF8);
  sub_10001BBBC(v6, v8);
  v11 = sub_10001BBBC(v6, v8);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.error.getter(v12);
  if (os_log_type_enabled(v12, v13))
  {
    v14 = swift_slowAlloc(22, -1);
    v17 = swift_slowAlloc(32, -1);
    v18[0] = v17;
    *(_DWORD *)v14 = 141558275;
    v19 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, &v20, v14 + 4, v14 + 12);
    *(_WORD *)(v14 + 12) = 2081;
    v15 = Data.hexString.getter(v6, v8);
    v19 = sub_100016940(v15, v16, v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, &v20, v14 + 14, v14 + 22);
    swift_bridgeObjectRelease();
    sub_10001BC14(v6, v8);
    sub_10001BC14(v6, v8);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "Invalid serial number %{private,mask.hash}s", (uint8_t *)v14, 0x16u);
    swift_arrayDestroy(v17, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v17, -1, -1);
    swift_slowDealloc(v14, -1, -1);

    sub_10001BC14(v6, v8);
  }
  else
  {
    sub_10001BC14(v6, v8);
    sub_10001BC14(v6, v8);
    sub_10001BC14(v6, v8);

  }
}

uint64_t sub_100A6E0E8@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int EnumCaseMultiPayload;
  int *v45;
  char *v46;
  _QWORD *v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  _QWORD *v51;
  char *v52;
  _QWORD *v53;
  uint64_t v54;
  unint64_t v55;
  __n128 v56;
  uint64_t v57;
  unint64_t v58;
  __n128 v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  NSObject *v64;
  os_log_type_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  int *v71;
  uint64_t *v72;
  _QWORD *v73;
  _QWORD *v74;
  int *v76;
  char *v77;
  uint64_t v78;
  _QWORD *v79;
  char *v80;
  _QWORD *v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  _QWORD *v85;
  char *v86;
  unint64_t v87;
  __n128 v88;
  uint64_t v89;
  unint64_t v90;
  __n128 v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  NSObject *v95;
  os_log_type_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  _QWORD *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  unint64_t v106;
  unint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  unint64_t v111;
  __n128 v112;
  uint64_t *v113;
  uint64_t v114;
  uint64_t *v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  _QWORD *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  unint64_t v132;
  unint64_t v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  _QWORD *v137;
  uint64_t v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t *v144;
  char *v145;
  int *v146;
  uint64_t *v147;
  _QWORD *v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t v151;
  unint64_t v152;
  unint64_t v153;
  uint64_t v154;
  char *v155;
  uint64_t v156;
  unint64_t v157;
  uint64_t *v158;
  int *v159;
  uint64_t *v160;
  char *v161;
  _QWORD *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  char *v167;
  char *v168;
  char *v169;
  uint64_t v170;
  uint64_t *v171;
  uint64_t v172;
  uint64_t v173;
  _QWORD *v174;
  _QWORD *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;

  v171 = a2;
  v4 = type metadata accessor for String.Encoding(0);
  __chkstk_darwin(v4);
  v168 = (char *)&v163 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10001A9A8(&qword_1010ED860);
  v7 = __chkstk_darwin(v6);
  v163 = (uint64_t)&v163 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v165 = (uint64_t)&v163 - v9;
  v10 = type metadata accessor for UUID(0);
  v173 = *(_QWORD *)(v10 - 8);
  v174 = (_QWORD *)v10;
  v11 = __chkstk_darwin(v10);
  v167 = (char *)&v163 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v169 = (char *)&v163 - v13;
  v14 = type metadata accessor for StableIdentifier(0);
  __chkstk_darwin(v14);
  v16 = (char *)&v163 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_10001A9A8((uint64_t *)&unk_1010F47C0);
  __chkstk_darwin(v17);
  v19 = (char *)&v163 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for OwnedBeaconRecord(0);
  v21 = *(_QWORD *)(v20 - 8);
  v22 = __chkstk_darwin(v20);
  v166 = (uint64_t)&v163 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = __chkstk_darwin(v22);
  v164 = (uint64_t)&v163 - v25;
  __chkstk_darwin(v24);
  v172 = (uint64_t)&v163 - v26;
  v27 = *a1;
  v28 = a1[1];
  v175 = sub_10080BC6C(v27, v28);
  swift_bridgeObjectRetain(v175);
  sub_100A3E380(&v175);
  v170 = v2;
  if (v2)
  {
    swift_release();
    __break(1u);
    JUMPOUT(0x100A6F0DCLL);
  }
  swift_bridgeObjectRelease();
  if (v175[2])
  {
    sub_10005972C((uint64_t)v175 + ((*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80)), (uint64_t)v19, type metadata accessor for OwnedBeaconRecord);
    v29 = 0;
  }
  else
  {
    v29 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v21 + 56))(v19, v29, 1, v20);
  swift_release();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20) == 1)
  {
    sub_100004048((uint64_t)v19, (uint64_t *)&unk_1010F47C0);
    if (qword_1010EA318 != -1)
      swift_once(&qword_1010EA318, sub_100B5E330);
    v30 = type metadata accessor for Logger(0);
    sub_10001A9E8(v30, (uint64_t)qword_1011B7DF8);
    sub_10001BBBC(v27, v28);
    v31 = sub_10001BBBC(v27, v28);
    v32 = Logger.logObject.getter(v31);
    v33 = static os_log_type_t.default.getter(v32);
    if (os_log_type_enabled(v32, v33))
    {
      v34 = swift_slowAlloc(22, -1);
      v35 = (_QWORD *)swift_slowAlloc(32, -1);
      v175 = v35;
      *(_DWORD *)v34 = 141558275;
      v177 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v177, &v178, v34 + 4, v34 + 12);
      *(_WORD *)(v34 + 12) = 2081;
      v36 = sub_10001BBBC(v27, v28);
      v37 = v168;
      static String.Encoding.utf8.getter(v36);
      v38 = String.init(data:encoding:)(v27, v28, v37);
      if (!v39)
        v38 = Data.hexString.getter(v27, v28);
      v40 = v38;
      v41 = v39;
      sub_10001BC14(v27, v28);
      v177 = sub_100016940(v40, v41, (uint64_t *)&v175);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v177, &v178, v34 + 14, v34 + 22);
      swift_bridgeObjectRelease();
      sub_10001BC14(v27, v28);
      sub_10001BC14(v27, v28);
      _os_log_impl((void *)&_mh_execute_header, v32, v33, "Missing beacon record for %{private,mask.hash}s.", (uint8_t *)v34, 0x16u);
      swift_arrayDestroy(v35, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v35, -1, -1);
      swift_slowDealloc(v34, -1, -1);
    }
    else
    {
      sub_10001BC14(v27, v28);
      sub_10001BC14(v27, v28);
    }

    v71 = (int *)type metadata accessor for AirPodsUnpairData.DeviceUnpairData(0);
    v72 = v171;
    (*(void (**)(char *, uint64_t, uint64_t, _QWORD *))(v173 + 56))((char *)v171 + v71[7], 1, 1, v174);
    *(_OWORD *)v72 = xmmword_100E22B20;
    *((_OWORD *)v72 + 1) = xmmword_100E22B20;
    v72[4] = v27;
    v72[5] = v28;
    v73 = (uint64_t *)((char *)v72 + v71[8]);
    *v73 = 0;
    v73[1] = 0;
    v74 = (uint64_t *)((char *)v72 + v71[9]);
    *v74 = 0;
    v74[1] = 0;
    (*(void (**)(uint64_t *, _QWORD, uint64_t, int *))(*((_QWORD *)v71 - 1) + 56))(v72, 0, 1, v71);
    return sub_10001BBBC(v27, v28);
  }
  v42 = (uint64_t)v19;
  v43 = v172;
  sub_1000126EC(v42, v172, type metadata accessor for OwnedBeaconRecord);
  sub_10005972C(v43 + *(int *)(v20 + 24), (uint64_t)v16, type metadata accessor for StableIdentifier);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v16, v14);
  if (EnumCaseMultiPayload == 3)
  {
    v76 = (int *)sub_10001A9A8((uint64_t *)&unk_1010F46F0);
    v77 = &v16[v76[12]];
    v79 = *(_QWORD **)v77;
    v78 = *((_QWORD *)v77 + 1);
    v80 = &v16[v76[16]];
    v81 = *(_QWORD **)v80;
    v82 = *((_QWORD *)v80 + 1);
    v83 = &v16[v76[20]];
    v85 = *(_QWORD **)v83;
    v84 = *((_QWORD *)v83 + 1);
    v86 = v167;
    (*(void (**)(char *, char *, _QWORD *))(v173 + 32))(v167, v16, v174);
    v175 = v81;
    v176 = v82;
    v87 = sub_1000330C8();
    v89 = Data.init<A>(hexString:)(&v175, &type metadata for String, v87, v88);
    if (v90 >> 60 == 15)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      v108 = v89;
      v109 = v90;
      v175 = v79;
      v176 = v78;
      v110 = Data.init<A>(hexString:)(&v175, &type metadata for String, v87, v91);
      if (v111 >> 60 == 15)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        v117 = v110;
        v118 = v111;
        v175 = v85;
        v176 = v84;
        v119 = Data.init<A>(hexString:)(&v175, &type metadata for String, v87, v112);
        if (v120 >> 60 != 15)
        {
          v136 = v120;
          v169 = (char *)v119;
          v138 = v173;
          v137 = v174;
          v139 = v86;
          v140 = v163;
          (*(void (**)(uint64_t, char *, _QWORD *))(v173 + 16))(v163, v139, v174);
          (*(void (**)(uint64_t, _QWORD, uint64_t, _QWORD *))(v138 + 56))(v140, 0, 1, v137);
          v141 = sub_1009A1DCC();
          if (v142 >> 60 == 15)
          {
            v143 = 0;
            v168 = 0;
          }
          else
          {
            v149 = v141;
            v150 = v142;
            v151 = sub_1001EDBAC(v141, v142);
            v153 = v152;
            sub_10001EF3C(v149, v150);
            v154 = Data.hexString.getter(v151, v153);
            v168 = v155;
            v156 = v151;
            v143 = v154;
            sub_10001BC14(v156, v153);
          }
          sub_1009A1DCC();
          if (v157 >> 60 != 15)
          {
            v166 = v143;
            __asm { BR              X11 }
          }
          (*(void (**)(char *, _QWORD *))(v173 + 8))(v167, v174);
          sub_1000126B0(v172, type metadata accessor for OwnedBeaconRecord);
          v158 = v171;
          *v171 = v108;
          v158[1] = v109;
          v158[2] = v117;
          v158[3] = v118;
          v158[4] = (uint64_t)v169;
          v158[5] = v136;
          v159 = (int *)type metadata accessor for AirPodsUnpairData.DeviceUnpairData(0);
          sub_100005CF0(v163, (uint64_t)v158 + v159[7], &qword_1010ED860);
          v160 = (uint64_t *)((char *)v158 + v159[8]);
          v161 = v168;
          *v160 = v143;
          v160[1] = (uint64_t)v161;
          v162 = (uint64_t *)((char *)v158 + v159[9]);
          *v162 = 0;
          v162[1] = 0;
          return (*(uint64_t (**)(uint64_t *, _QWORD, uint64_t, int *))(*((_QWORD *)v159 - 1) + 56))(v158, 0, 1, v159);
        }
        sub_10001EF3C(v117, v118);
      }
      sub_10001EF3C(v108, v109);
    }
    (*(void (**)(char *, _QWORD *))(v173 + 8))(v86, v174);
    sub_1000126B0(v43, type metadata accessor for OwnedBeaconRecord);
    v121 = type metadata accessor for AirPodsUnpairData.DeviceUnpairData(0);
    return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v121 - 8) + 56))(v171, 1, 1, v121);
  }
  if (EnumCaseMultiPayload == 2)
  {
    v45 = (int *)sub_10001A9A8(&qword_101106F40);
    v46 = &v16[v45[12]];
    v47 = *(_QWORD **)v46;
    v48 = *((_QWORD *)v46 + 1);
    v49 = &v16[v45[16]];
    v51 = *(_QWORD **)v49;
    v50 = *((_QWORD *)v49 + 1);
    v52 = &v16[v45[20]];
    v53 = *(_QWORD **)v52;
    v54 = *((_QWORD *)v52 + 1);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, char *, _QWORD *))(v173 + 32))(v169, v16, v174);
    v175 = v53;
    v176 = v54;
    v55 = sub_1000330C8();
    v57 = Data.init<A>(hexString:)(&v175, &type metadata for String, v55, v56);
    if (v58 >> 60 == 15)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (qword_1010EA318 != -1)
        swift_once(&qword_1010EA318, sub_100B5E330);
      v60 = type metadata accessor for Logger(0);
      sub_10001A9E8(v60, (uint64_t)qword_1011B7DF8);
      v61 = v172;
      v62 = v164;
      v63 = sub_10005972C(v172, v164, type metadata accessor for OwnedBeaconRecord);
      v64 = Logger.logObject.getter(v63);
      v65 = static os_log_type_t.error.getter(v64);
      if (os_log_type_enabled(v64, v65))
      {
        v66 = swift_slowAlloc(22, -1);
        v67 = (_QWORD *)swift_slowAlloc(32, -1);
        v175 = v67;
        *(_DWORD *)v66 = 141558275;
        v177 = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v177, &v178, v66 + 4, v66 + 12);
        *(_WORD *)(v66 + 12) = 2081;
        sub_100C6ED38();
        v177 = sub_100016940(v68, v69, (uint64_t *)&v175);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v177, &v178, v66 + 14, v66 + 22);
        swift_bridgeObjectRelease();
        sub_1000126B0(v62, type metadata accessor for OwnedBeaconRecord);
        _os_log_impl((void *)&_mh_execute_header, v64, v65, "Invalid serialNumber for %{private,mask.hash}s", (uint8_t *)v66, 0x16u);
        swift_arrayDestroy(v67, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v67, -1, -1);
        swift_slowDealloc(v66, -1, -1);

        (*(void (**)(char *, _QWORD *))(v173 + 8))(v169, v174);
        v70 = v172;
      }
      else
      {

        sub_1000126B0(v62, type metadata accessor for OwnedBeaconRecord);
        (*(void (**)(char *, _QWORD *))(v173 + 8))(v169, v174);
        v70 = v61;
      }
      sub_1000126B0(v70, type metadata accessor for OwnedBeaconRecord);
      v115 = v171;
      v116 = type metadata accessor for AirPodsUnpairData.DeviceUnpairData(0);
      return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v116 - 8) + 56))(v115, 1, 1, v116);
    }
    v102 = v57;
    v103 = v58;
    if (v50)
    {
      v175 = v51;
      v176 = v50;
      v104 = Data.init<A>(hexString:)(&v175, &type metadata for String, v55, v59);
      v167 = v105;
      v168 = (char *)v104;
      if (v48)
      {
LABEL_29:
        v175 = v47;
        v176 = v48;
        v166 = Data.init<A>(hexString:)(&v175, &type metadata for String, v55, v59);
        v107 = v106;
LABEL_42:
        v123 = v173;
        v122 = v174;
        v124 = v165;
        (*(void (**)(uint64_t, char *, _QWORD *))(v173 + 16))(v165, v169, v174);
        (*(void (**)(uint64_t, _QWORD, uint64_t, _QWORD *))(v123 + 56))(v124, 0, 1, v122);
        v125 = sub_1009A1DCC();
        if (v126 >> 60 == 15)
        {
          v127 = 0;
          v128 = 0;
        }
        else
        {
          v129 = v125;
          v130 = v126;
          v131 = sub_1001EDBAC(v125, v126);
          v133 = v132;
          sub_10001EF3C(v129, v130);
          v127 = Data.hexString.getter(v131, v133);
          v128 = v134;
          sub_10001BC14(v131, v133);
        }
        sub_1009A1DCC();
        if (v135 >> 60 != 15)
          __asm { BR              X11 }
        (*(void (**)(char *, _QWORD *))(v173 + 8))(v169, v174);
        sub_1000126B0(v172, type metadata accessor for OwnedBeaconRecord);
        v144 = v171;
        v145 = v167;
        *v171 = (uint64_t)v168;
        v144[1] = (uint64_t)v145;
        v144[2] = v166;
        v144[3] = v107;
        v144[4] = v102;
        v144[5] = v103;
        v146 = (int *)type metadata accessor for AirPodsUnpairData.DeviceUnpairData(0);
        sub_100005CF0(v165, (uint64_t)v144 + v146[7], &qword_1010ED860);
        v147 = (uint64_t *)((char *)v144 + v146[8]);
        *v147 = v127;
        v147[1] = v128;
        v148 = (uint64_t *)((char *)v144 + v146[9]);
        *v148 = 0;
        v148[1] = 0;
        return (*(uint64_t (**)(uint64_t *, _QWORD, uint64_t, int *))(*((_QWORD *)v146 - 1) + 56))(v144, 0, 1, v146);
      }
    }
    else
    {
      v167 = (char *)0xF000000000000000;
      v168 = 0;
      if (v48)
        goto LABEL_29;
    }
    v166 = 0;
    v107 = 0xF000000000000000;
    goto LABEL_42;
  }
  if (qword_1010EA318 != -1)
    swift_once(&qword_1010EA318, sub_100B5E330);
  v92 = type metadata accessor for Logger(0);
  sub_10001A9E8(v92, (uint64_t)qword_1011B7DF8);
  v93 = v166;
  v94 = sub_10005972C(v43, v166, type metadata accessor for OwnedBeaconRecord);
  v95 = Logger.logObject.getter(v94);
  v96 = static os_log_type_t.error.getter(v95);
  if (os_log_type_enabled(v95, v96))
  {
    v97 = swift_slowAlloc(22, -1);
    v174 = (_QWORD *)swift_slowAlloc(32, -1);
    v175 = v174;
    *(_DWORD *)v97 = 141558275;
    v177 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v177, &v178, v97 + 4, v97 + 12);
    *(_WORD *)(v97 + 12) = 2081;
    sub_100C6ED38();
    v177 = sub_100016940(v98, v99, (uint64_t *)&v175);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v177, &v178, v97 + 14, v97 + 22);
    swift_bridgeObjectRelease();
    sub_1000126B0(v93, type metadata accessor for OwnedBeaconRecord);
    _os_log_impl((void *)&_mh_execute_header, v95, v96, "Invalid beacon %{private,mask.hash}s", (uint8_t *)v97, 0x16u);
    v100 = v174;
    swift_arrayDestroy(v174, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v100, -1, -1);
    swift_slowDealloc(v97, -1, -1);

    v101 = v172;
  }
  else
  {

    sub_1000126B0(v93, type metadata accessor for OwnedBeaconRecord);
    v101 = v43;
  }
  sub_1000126B0(v101, type metadata accessor for OwnedBeaconRecord);
  v113 = v171;
  v114 = type metadata accessor for AirPodsUnpairData.DeviceUnpairData(0);
  (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v114 - 8) + 56))(v113, 1, 1, v114);
  return sub_1000126B0((uint64_t)v16, type metadata accessor for StableIdentifier);
}

uint64_t sub_100A6F0FC()
{
  return sub_100007DD4((void (*)(_QWORD))&_swift_errorRelease, 48);
}

uint64_t sub_100A6F10C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;

  v2 = *(_QWORD *)(v0 + 32);
  v3 = swift_task_alloc(dword_101110E8C);
  v4 = *(_OWORD *)(v0 + 16);
  *(_QWORD *)(v1 + 16) = v3;
  *(_QWORD *)v3 = v1;
  *(_QWORD *)(v3 + 8) = sub_100004A74;
  *(_QWORD *)(v3 + 32) = v2;
  *(_OWORD *)(v3 + 16) = v4;
  return swift_task_switch(sub_100A6D754, 0, 0);
}

Swift::Int sub_100A6F174(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  Swift::Int v51;
  Swift::Int result;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  Swift::Int v57;
  char *v58;
  uint64_t v59;
  Swift::Int v60;
  unint64_t v61;
  Swift::Int v62;
  Swift::Int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  uint64_t v68;
  void *v69;
  char *v70;
  void (*v71)(char *, uint64_t);
  Swift::Int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  Swift::Int v84;
  unint64_t v85;
  uint64_t v86;
  Swift::Int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  char *v94;
  char *v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  BOOL v107;
  unint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  BOOL v117;
  uint64_t v118;
  char v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  BOOL v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  char *v136;
  char *v137;
  uint64_t v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  char *v143;
  _QWORD *v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  unint64_t v152;
  _QWORD *v153;
  Swift::Int v154;
  char *v155;
  uint64_t v156;
  char *v157;
  char *v158;
  Swift::Int v159;
  char *v160;
  uint64_t v161;
  char *v162;
  char *v163;
  Swift::Int v164;
  char *v165;
  char *v166;
  uint64_t v167;
  char *v168;
  char *v169;
  char *v170;
  uint64_t v171;
  uint64_t v172;
  char *v173;
  char *v174;
  __int128 v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  char *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  char *v184;
  char *v185;
  Swift::Int v186;
  char *v187;
  char *v188;
  void (*v189)(_QWORD, _QWORD);
  void *v190;
  uint64_t v191;
  char *v192;
  uint64_t v193;
  Swift::Int v194;
  uint64_t *v195;
  uint64_t v196;

  v2 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)&v153 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __chkstk_darwin(v3);
  v174 = (char *)&v153 - v7;
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v153 - v9;
  v11 = __chkstk_darwin(v8);
  v187 = (char *)&v153 - v12;
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v153 - v14;
  v16 = __chkstk_darwin(v13);
  v158 = (char *)&v153 - v17;
  v18 = __chkstk_darwin(v16);
  v165 = (char *)&v153 - v19;
  __chkstk_darwin(v18);
  v163 = (char *)&v153 - v20;
  v21 = type metadata accessor for Date(0);
  v196 = *(_QWORD *)(v21 - 8);
  v22 = __chkstk_darwin(v21);
  v24 = (char *)&v153 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = __chkstk_darwin(v22);
  v192 = (char *)&v153 - v26;
  v27 = __chkstk_darwin(v25);
  v162 = (char *)&v153 - v28;
  v29 = __chkstk_darwin(v27);
  v168 = (char *)&v153 - v30;
  v31 = __chkstk_darwin(v29);
  v33 = (char *)&v153 - v32;
  __chkstk_darwin(v31);
  v157 = (char *)&v153 - v34;
  v176 = type metadata accessor for OwnedBeaconRecord(0);
  v171 = *(_QWORD *)(v176 - 8);
  v35 = __chkstk_darwin(v176);
  v161 = (uint64_t)&v153 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = __chkstk_darwin(v35);
  v188 = (char *)&v153 - v38;
  v39 = __chkstk_darwin(v37);
  v41 = (char *)&v153 - v40;
  v42 = __chkstk_darwin(v39);
  v191 = (uint64_t)&v153 - v43;
  v44 = __chkstk_darwin(v42);
  v172 = (uint64_t)&v153 - v45;
  v46 = __chkstk_darwin(v44);
  v167 = (uint64_t)&v153 - v47;
  v48 = __chkstk_darwin(v46);
  v169 = (char *)&v153 - v49;
  __chkstk_darwin(v48);
  v156 = (uint64_t)&v153 - v50;
  v195 = a1;
  v51 = a1[1];
  result = _minimumMergeRunLength(_:)(v51);
  if (result >= v51)
  {
    if ((v51 & 0x8000000000000000) == 0)
    {
      if (v51)
        return sub_100A710D8(0, v51, 1, v195);
      return result;
    }
    goto LABEL_131;
  }
  if (v51 >= 0)
    v53 = v51;
  else
    v53 = v51 + 1;
  if (v51 < -1)
  {
LABEL_139:
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
    __break(1u);
    JUMPOUT(0x100A71098);
  }
  v185 = v10;
  v154 = result;
  v155 = v15;
  if (v51 < 2)
  {
    v170 = (char *)_swiftEmptyArrayStorage
         + ((*(unsigned __int8 *)(v171 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v171 + 80));
    v153 = _swiftEmptyArrayStorage;
    if (v51 != 1)
    {
      v61 = _swiftEmptyArrayStorage[2];
      v58 = (char *)_swiftEmptyArrayStorage;
LABEL_96:
      v145 = v177;
      if (v61 < 2)
      {
        v144 = v153;
        goto LABEL_109;
      }
      v146 = *v195;
      v144 = v153;
      while (1)
      {
        v147 = v61 - 2;
        if (v61 < 2)
          goto LABEL_126;
        if (!v146)
          goto LABEL_137;
        v148 = v58;
        v149 = *(_QWORD *)&v58[16 * v147 + 32];
        v150 = *(_QWORD *)&v58[16 * v61 + 24];
        sub_1002829A0(v146 + *(_QWORD *)(v171 + 72) * v149, v146 + *(_QWORD *)(v171 + 72) * *(_QWORD *)&v58[16 * v61 + 16], v146 + *(_QWORD *)(v171 + 72) * v150, v170);
        if (v145)
          goto LABEL_109;
        if (v150 < v149)
          goto LABEL_127;
        if ((swift_isUniquelyReferenced_nonNull_native(v148) & 1) == 0)
          v148 = sub_10088F088((uint64_t)v148);
        if (v147 >= *((_QWORD *)v148 + 2))
          goto LABEL_128;
        v151 = &v148[16 * v147 + 32];
        *(_QWORD *)v151 = v149;
        *((_QWORD *)v151 + 1) = v150;
        v152 = *((_QWORD *)v148 + 2);
        if (v61 > v152)
          goto LABEL_129;
        memmove(&v148[16 * v61 + 16], &v148[16 * v61 + 32], 16 * (v152 - v61));
        v58 = v148;
        *((_QWORD *)v148 + 2) = v152 - 1;
        v61 = v152 - 1;
        if (v152 <= 2)
          goto LABEL_109;
      }
    }
  }
  else
  {
    v54 = v53 >> 1;
    v55 = static Array._allocateBufferUninitialized(minimumCapacity:)(v53 >> 1, v176);
    *(_QWORD *)(v55 + 16) = v54;
    v56 = *(unsigned __int8 *)(v171 + 80);
    v153 = (_QWORD *)v55;
    v170 = (char *)(v55 + ((v56 + 32) & ~v56));
  }
  v57 = 0;
  v58 = (char *)_swiftEmptyArrayStorage;
  v175 = xmmword_100E22B00;
  v173 = v5;
  v193 = v21;
  v180 = v24;
  v166 = v33;
  v184 = v41;
  v59 = (uint64_t)v169;
  v60 = v51;
  while (1)
  {
    v62 = v57;
    v63 = v57 + 1;
    v160 = v58;
    v164 = v57;
    v194 = v60;
    if (v57 + 1 >= v60)
    {
      v72 = v57 + 1;
      goto LABEL_44;
    }
    v64 = *v195;
    v65 = *(_QWORD *)(v171 + 72);
    v66 = v156;
    sub_10005972C(*v195 + v65 * v63, v156, type metadata accessor for OwnedBeaconRecord);
    v179 = v64;
    sub_10005972C(v64 + v65 * v62, v59, type metadata accessor for OwnedBeaconRecord);
    v67 = objc_autoreleasePoolPush();
    v68 = v177;
    sub_10084EE10(v66);
    if (v68)
    {
      objc_autoreleasePoolPop(v67);
      __break(1u);
      goto LABEL_139;
    }
    objc_autoreleasePoolPop(v67);
    v69 = objc_autoreleasePoolPush();
    sub_10084EE10(v59);
    v177 = 0;
    objc_autoreleasePoolPop(v69);
    v70 = v157;
    v190 = (void *)Date.compare(_:)(v33);
    v71 = *(void (**)(char *, uint64_t))(v196 + 8);
    v71(v33, v21);
    v189 = (void (*)(_QWORD, _QWORD))v71;
    v71(v70, v21);
    sub_1000126B0(v59, type metadata accessor for OwnedBeaconRecord);
    sub_1000126B0(v156, type metadata accessor for OwnedBeaconRecord);
    v72 = v62 + 2;
    if (v62 + 2 < v194)
    {
      v73 = v65 * v63;
      v74 = v179;
      v182 = v65 * v72;
      v183 = v73;
      v186 = v62 + 2;
      v75 = v167;
      sub_10005972C(v179 + v65 * v72, v167, type metadata accessor for OwnedBeaconRecord);
      sub_10005972C(v74 + v183, v172, type metadata accessor for OwnedBeaconRecord);
      v76 = objc_autoreleasePoolPush();
      __asm { BR              X9 }
    }
    v58 = v160;
    if (v190 != (void *)1)
      goto LABEL_33;
    if (v72 < v62)
      goto LABEL_132;
    if (v62 < v72)
    {
      v77 = 0;
      v78 = v65 * (v62 + 1);
      v79 = v72 * v65;
      v80 = v62 * v65;
      v178 = v65;
      do
      {
        if (v62 != v72 + v77 - 1)
        {
          v83 = v179;
          if (!v179)
            goto LABEL_136;
          v84 = v72;
          v85 = v179 + v80;
          v190 = (void *)(v179 + v78);
          sub_1000126EC(v179 + v80, v161, type metadata accessor for OwnedBeaconRecord);
          if (v80 < v78 || v85 >= v83 + v79)
          {
            v81 = v83 + v80;
            v82 = (uint64_t)v190;
            swift_arrayInitWithTakeFrontToBack(v81, v190, 1, v176);
          }
          else
          {
            v82 = (uint64_t)v190;
            if (v80 != v78)
              swift_arrayInitWithTakeBackToFront(v85, v190);
          }
          sub_1000126EC(v161, v82, type metadata accessor for OwnedBeaconRecord);
          v58 = v160;
          v72 = v84;
          v65 = v178;
        }
        ++v62;
        --v77;
        v78 -= v65;
        v79 -= v65;
        v80 += v65;
      }
      while (v62 < v72 + v77);
      v33 = v166;
      v86 = (uint64_t)v184;
      v59 = (uint64_t)v169;
      v62 = v164;
      if (v72 >= v194)
        goto LABEL_44;
    }
    else
    {
LABEL_33:
      v86 = (uint64_t)v184;
      if (v72 >= v194)
        goto LABEL_44;
    }
    if (__OFSUB__(v72, v62))
      goto LABEL_130;
    if (v72 - v62 < v154)
    {
      if (__OFADD__(v62, v154))
        goto LABEL_133;
      v87 = v194;
      if (v62 + v154 < v194)
        v87 = v62 + v154;
      if (v87 < v62)
        goto LABEL_134;
      if (v72 != v87)
      {
        v88 = *(_QWORD *)(v171 + 72);
        v89 = v88 * (v72 - 1);
        v181 = v88;
        v194 = v72 * v88;
        v159 = v87;
        v186 = v72;
        v182 = v89;
        v90 = *v195;
        v91 = v191;
        sub_10005972C(v72 * v88 + *v195, v191, type metadata accessor for OwnedBeaconRecord);
        v189 = (void (*)(_QWORD, _QWORD))v89;
        sub_10005972C(v89 + v90, v86, type metadata accessor for OwnedBeaconRecord);
        v190 = objc_autoreleasePoolPush();
        __asm { BR              X9 }
      }
    }
LABEL_44:
    if (v72 < v62)
      goto LABEL_125;
    v186 = v72;
    if ((swift_isUniquelyReferenced_nonNull_native(v58) & 1) != 0)
      v58 = v160;
    else
      v58 = sub_10088E710(0, *((_QWORD *)v160 + 2) + 1, 1, v160);
    v93 = *((_QWORD *)v58 + 2);
    v92 = *((_QWORD *)v58 + 3);
    v61 = v93 + 1;
    v57 = v186;
    if (v93 >= v92 >> 1)
    {
      v143 = sub_10088E710((char *)(v92 > 1), v93 + 1, 1, v58);
      v57 = v186;
      v58 = v143;
    }
    *((_QWORD *)v58 + 2) = v61;
    v94 = v58 + 32;
    v95 = &v58[16 * v93 + 32];
    *(_QWORD *)v95 = v62;
    *((_QWORD *)v95 + 1) = v57;
    if (v93)
      break;
    v61 = 1;
LABEL_14:
    v60 = v195[1];
    if (v57 >= v60)
      goto LABEL_96;
  }
  while (1)
  {
    v96 = v61 - 1;
    if (v61 >= 4)
    {
      v101 = &v94[16 * v61];
      v102 = *((_QWORD *)v101 - 8);
      v103 = *((_QWORD *)v101 - 7);
      v107 = __OFSUB__(v103, v102);
      v104 = v103 - v102;
      if (v107)
        goto LABEL_114;
      v106 = *((_QWORD *)v101 - 6);
      v105 = *((_QWORD *)v101 - 5);
      v107 = __OFSUB__(v105, v106);
      v99 = v105 - v106;
      v100 = v107;
      if (v107)
        goto LABEL_115;
      v108 = v61 - 2;
      v109 = &v94[16 * v61 - 32];
      v111 = *(_QWORD *)v109;
      v110 = *((_QWORD *)v109 + 1);
      v107 = __OFSUB__(v110, v111);
      v112 = v110 - v111;
      if (v107)
        goto LABEL_117;
      v107 = __OFADD__(v99, v112);
      v113 = v99 + v112;
      if (v107)
        goto LABEL_120;
      if (v113 >= v104)
      {
        v131 = &v94[16 * v96];
        v133 = *(_QWORD *)v131;
        v132 = *((_QWORD *)v131 + 1);
        v107 = __OFSUB__(v132, v133);
        v134 = v132 - v133;
        if (v107)
          goto LABEL_124;
        v124 = v99 < v134;
        goto LABEL_81;
      }
    }
    else
    {
      if (v61 != 3)
      {
        v125 = *((_QWORD *)v58 + 4);
        v126 = *((_QWORD *)v58 + 5);
        v107 = __OFSUB__(v126, v125);
        v118 = v126 - v125;
        v119 = v107;
        goto LABEL_75;
      }
      v98 = *((_QWORD *)v58 + 4);
      v97 = *((_QWORD *)v58 + 5);
      v107 = __OFSUB__(v97, v98);
      v99 = v97 - v98;
      v100 = v107;
    }
    if ((v100 & 1) != 0)
      goto LABEL_116;
    v108 = v61 - 2;
    v114 = &v94[16 * v61 - 32];
    v116 = *(_QWORD *)v114;
    v115 = *((_QWORD *)v114 + 1);
    v117 = __OFSUB__(v115, v116);
    v118 = v115 - v116;
    v119 = v117;
    if (v117)
      goto LABEL_119;
    v120 = &v94[16 * v96];
    v122 = *(_QWORD *)v120;
    v121 = *((_QWORD *)v120 + 1);
    v107 = __OFSUB__(v121, v122);
    v123 = v121 - v122;
    if (v107)
      goto LABEL_122;
    if (__OFADD__(v118, v123))
      goto LABEL_123;
    if (v118 + v123 >= v99)
    {
      v124 = v99 < v123;
LABEL_81:
      if (v124)
        v96 = v108;
      goto LABEL_83;
    }
LABEL_75:
    if ((v119 & 1) != 0)
      goto LABEL_118;
    v127 = &v94[16 * v96];
    v129 = *(_QWORD *)v127;
    v128 = *((_QWORD *)v127 + 1);
    v107 = __OFSUB__(v128, v129);
    v130 = v128 - v129;
    if (v107)
      goto LABEL_121;
    if (v130 < v118)
      goto LABEL_14;
LABEL_83:
    v135 = v96 - 1;
    if (v96 - 1 >= v61)
    {
      __break(1u);
LABEL_111:
      __break(1u);
LABEL_112:
      __break(1u);
LABEL_113:
      __break(1u);
LABEL_114:
      __break(1u);
LABEL_115:
      __break(1u);
LABEL_116:
      __break(1u);
LABEL_117:
      __break(1u);
LABEL_118:
      __break(1u);
LABEL_119:
      __break(1u);
LABEL_120:
      __break(1u);
LABEL_121:
      __break(1u);
LABEL_122:
      __break(1u);
LABEL_123:
      __break(1u);
LABEL_124:
      __break(1u);
LABEL_125:
      __break(1u);
LABEL_126:
      __break(1u);
LABEL_127:
      __break(1u);
LABEL_128:
      __break(1u);
LABEL_129:
      __break(1u);
LABEL_130:
      __break(1u);
LABEL_131:
      __break(1u);
LABEL_132:
      __break(1u);
LABEL_133:
      __break(1u);
LABEL_134:
      __break(1u);
      JUMPOUT(0x100A71028);
    }
    if (!*v195)
    {
      __break(1u);
LABEL_136:
      __break(1u);
LABEL_137:
      __break(1u);
    }
    v136 = v58;
    v137 = &v94[16 * v135];
    v138 = *(_QWORD *)v137;
    v139 = &v94[16 * v96];
    v140 = *((_QWORD *)v139 + 1);
    v141 = v177;
    sub_1002829A0(*v195 + *(_QWORD *)(v171 + 72) * *(_QWORD *)v137, *v195 + *(_QWORD *)(v171 + 72) * *(_QWORD *)v139, *v195 + *(_QWORD *)(v171 + 72) * v140, v170);
    v177 = v141;
    if (v141)
      break;
    if (v140 < v138)
      goto LABEL_111;
    if (v96 > *((_QWORD *)v136 + 2))
      goto LABEL_112;
    *(_QWORD *)v137 = v138;
    *(_QWORD *)&v94[16 * v135 + 8] = v140;
    v142 = *((_QWORD *)v136 + 2);
    if (v96 >= v142)
      goto LABEL_113;
    v61 = v142 - 1;
    memmove(&v94[16 * v96], v139 + 16, 16 * (v142 - 1 - v96));
    v58 = v136;
    *((_QWORD *)v136 + 2) = v142 - 1;
    v124 = v142 > 2;
    v33 = v166;
    v59 = (uint64_t)v169;
    v57 = v186;
    if (!v124)
      goto LABEL_14;
  }
  v144 = v153;
LABEL_109:
  swift_bridgeObjectRelease();
  v144[2] = 0;
  return swift_bridgeObjectRelease();
}

uint64_t sub_100A710D8(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  _QWORD v32[4];
  __int128 v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v32[1] = a1;
  v7 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v8);
  v13 = (char *)v32 - v12;
  v14 = __chkstk_darwin(v11);
  v16 = (char *)v32 - v15;
  __chkstk_darwin(v14);
  v39 = (char *)v32 - v17;
  v18 = type metadata accessor for Date(0);
  v47 = *(_QWORD *)(v18 - 8);
  v19 = __chkstk_darwin(v18);
  v38 = (char *)v32 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v46 = (char *)v32 - v21;
  v34 = type metadata accessor for OwnedBeaconRecord(0);
  v22 = __chkstk_darwin(v34);
  v41 = (char *)v32 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = __chkstk_darwin(v22);
  v50 = (uint64_t)v32 - v25;
  result = __chkstk_darwin(v24);
  v45 = (uint64_t)v32 - v28;
  v32[0] = a2;
  if (a3 != a2)
  {
    v32[2] = v13;
    v32[3] = v10;
    v40 = *(_QWORD *)(v27 + 72);
    v48 = v40 * a3;
    v49 = v40 * (a3 - 1);
    v33 = xmmword_100E22B00;
    v35 = a4;
    v37 = v16;
    v44 = v18;
    v36 = a3;
    v29 = *a4;
    v43 = v40 * a3;
    v30 = v45;
    sub_10005972C(v40 * a3 + v29, v45, type metadata accessor for OwnedBeaconRecord);
    v42 = v49;
    sub_10005972C(v49 + v29, v50, type metadata accessor for OwnedBeaconRecord);
    v31 = objc_autoreleasePoolPush();
    __asm { BR              X9 }
  }
  return result;
}

_QWORD *sub_100A71C58(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t *v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD v20[2];
  uint64_t v21;
  uint64_t v22;
  uint64_t v23[4];

  v23[3] = a2;
  v4 = sub_10001A9A8(&qword_1010F4918);
  __chkstk_darwin(v4);
  v6 = (_QWORD *)((char *)v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v22 = type metadata accessor for AirPodsUnpairData.DeviceUnpairData(0);
  v7 = *(_QWORD *)(v22 - 8);
  v8 = __chkstk_darwin(v22);
  v21 = (uint64_t)v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v11 = (char *)v20 - v10;
  v12 = *(_QWORD *)(a1 + 16);
  if (!v12)
    return _swiftEmptyArrayStorage;
  swift_bridgeObjectRetain(a1);
  v20[1] = a1;
  v13 = (unint64_t *)(a1 + 40);
  v14 = _swiftEmptyArrayStorage;
  do
  {
    v15 = *(v13 - 1);
    v16 = *v13;
    v23[0] = v15;
    v23[1] = v16;
    sub_10001BBBC(v15, v16);
    sub_100A6E0E8(v23, v6);
    if (v2)
    {
      sub_10001BC14(v15, v16);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v14;
    }
    sub_10001BC14(v15, v16);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v7 + 48))(v6, 1, v22) == 1)
    {
      sub_100004048((uint64_t)v6, &qword_1010F4918);
    }
    else
    {
      sub_1000126EC((uint64_t)v6, (uint64_t)v11, type metadata accessor for AirPodsUnpairData.DeviceUnpairData);
      sub_1000126EC((uint64_t)v11, v21, type metadata accessor for AirPodsUnpairData.DeviceUnpairData);
      if ((swift_isUniquelyReferenced_nonNull_native(v14) & 1) == 0)
        v14 = (_QWORD *)sub_1007C8FE8(0, v14[2] + 1, 1, (unint64_t)v14);
      v18 = v14[2];
      v17 = v14[3];
      if (v18 >= v17 >> 1)
        v14 = (_QWORD *)sub_1007C8FE8(v17 > 1, v18 + 1, 1, (unint64_t)v14);
      v14[2] = v18 + 1;
      sub_1000126EC(v21, (uint64_t)v14+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(_QWORD *)(v7 + 72) * v18, type metadata accessor for AirPodsUnpairData.DeviceUnpairData);
    }
    v13 += 2;
    --v12;
  }
  while (v12);
  swift_bridgeObjectRelease();
  return v14;
}

uint64_t sub_100A71EB4(unint64_t a1)
{
  if (a1 >= 7)
    return 7;
  else
    return (0x3010504060200uLL >> (8 * a1));
}

uint64_t sub_100A71EDC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  id v14;
  char v15;
  uint64_t v16;
  uint64_t (*v17)(char *, uint64_t, uint64_t);
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t (*v35)(char *, uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;

  v3 = type metadata accessor for MACAddress(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v38 = v6;
  v39 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v8 = (char *)&v34 - v7;
  v9 = type metadata accessor for DispatchPredicate(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (uint64_t *)((char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v37 = v1;
  v13 = *(void **)(v1 + 16);
  *v12 = v13;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v10 + 104))(v12, enum case for DispatchPredicate.onQueue(_:), v9);
  v14 = v13;
  v15 = _dispatchPreconditionTest(_:)(v12);
  (*(void (**)(_QWORD *, uint64_t))(v10 + 8))(v12, v9);
  if ((v15 & 1) != 0)
  {
    if (qword_1010EA318 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_1010EA318, sub_100B5E330);
LABEL_3:
  v16 = type metadata accessor for Logger(0);
  sub_10001A9E8(v16, (uint64_t)qword_1011B7DF8);
  v17 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v4 + 16);
  v36 = a1;
  v18 = v17(v8, a1, v3);
  v19 = Logger.logObject.getter(v18);
  v20 = static os_log_type_t.default.getter(v19);
  if (os_log_type_enabled(v19, v20))
  {
    v21 = (uint8_t *)swift_slowAlloc(12, -1);
    v22 = swift_slowAlloc(32, -1);
    v35 = v17;
    v23 = v22;
    v41 = v22;
    *(_DWORD *)v21 = 136446210;
    v24 = sub_100006C64((unint64_t *)&qword_1010FBAE0, 255, (uint64_t (*)(uint64_t))&type metadata accessor for MACAddress, (uint64_t)&protocol conformance descriptor for MACAddress);
    v25 = dispatch thunk of CustomStringConvertible.description.getter(v3, v24);
    v40 = sub_100016940(v25, v26, &v41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, &v41, v21 + 4, v21 + 12);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v8, v3);
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "startStandaloneLEPairing for %{public}s", v21, 0xCu);
    swift_arrayDestroy(v23, 1, (char *)&type metadata for Any + 8);
    v27 = v23;
    v17 = v35;
    swift_slowDealloc(v27, -1, -1);
    swift_slowDealloc(v21, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v4 + 8))(v8, v3);
  }

  type metadata accessor for Transaction(0);
  v28 = swift_allocObject(&unk_1010A3220, 24, 7);
  swift_weakInit(v28 + 16, v37);
  v29 = v39;
  v17(v39, v36, v3);
  v30 = *(unsigned __int8 *)(v4 + 80);
  v31 = (v30 + 24) & ~v30;
  v32 = swift_allocObject(&unk_1010A3428, v31 + v38, v30 | 7);
  *(_QWORD *)(v32 + 16) = v28;
  (*(void (**)(uint64_t, char *, uint64_t))(v4 + 32))(v32 + v31, v29, v3);
  swift_retain();
  static Transaction.asyncTask(name:block:)("startStandaloneLEPairing", 24, 2, &unk_101110F10, v32);
  swift_release();
  return swift_release();
}

unint64_t sub_100A7225C()
{
  uint64_t v0;
  uint64_t inited;
  uint64_t v3;

  v0 = sub_10001A9A8(&qword_1010EEBD0);
  inited = swift_initStackObject(v0, &v3);
  *(_OWORD *)(inited + 16) = xmmword_100E221E0;
  *(_QWORD *)(inited + 32) = 0x6563637553736177;
  *(_QWORD *)(inited + 40) = 0xEA00000000007373;
  *(_QWORD *)(inited + 48) = 1;
  *(_BYTE *)(inited + 56) = 1;
  *(_QWORD *)(inited + 64) = 0x626D754E74726170;
  *(_QWORD *)(inited + 72) = 0xEA00000000007265;
  *(NSNumber *)(inited + 80) = UInt8._bridgeToObjectiveC()();
  *(_BYTE *)(inited + 88) = 0;
  strcpy((char *)(inited + 96), "numberOfParts");
  *(_WORD *)(inited + 110) = -4864;
  *(NSNumber *)(inited + 112) = Int._bridgeToObjectiveC()();
  *(_BYTE *)(inited + 120) = 0;
  return sub_1006B9444(inited);
}

unint64_t sub_100A72364(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t inited;
  NSString v5;
  _QWORD v7[3];
  _BYTE v8[8];
  _QWORD v9[3];
  _BYTE v10[8];
  _BYTE v11[192];

  v3 = sub_10001A9A8(&qword_1010EEBD0);
  inited = swift_initStackObject(v3, v11);
  *(_OWORD *)(inited + 16) = xmmword_100E27910;
  *(_QWORD *)(inited + 32) = 0x6563637553736177;
  *(_QWORD *)(inited + 40) = 0xEA00000000007373;
  *(_QWORD *)(inited + 48) = 0;
  *(_BYTE *)(inited + 56) = 1;
  *(_QWORD *)(inited + 64) = 0x6D6F44726F727265;
  *(_QWORD *)(inited + 72) = 0xEB000000006E6961;
  swift_getErrorValue(a2, v10, v9);
  Error.domain.getter(v9[1], v9[2]);
  v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  *(_QWORD *)(inited + 80) = v5;
  *(_BYTE *)(inited + 88) = 0;
  *(_QWORD *)(inited + 96) = 0x646F43726F727265;
  *(_QWORD *)(inited + 104) = 0xE900000000000065;
  swift_getErrorValue(a2, v8, v7);
  Error.code.getter(v7[1], v7[2]);
  *(NSNumber *)(inited + 112) = Int._bridgeToObjectiveC()();
  *(_BYTE *)(inited + 120) = 0;
  strcpy((char *)(inited + 128), "numberOfParts");
  *(_WORD *)(inited + 142) = -4864;
  *(NSNumber *)(inited + 144) = Int._bridgeToObjectiveC()();
  *(_BYTE *)(inited + 152) = 0;
  *(_QWORD *)(inited + 160) = 0x626D754E74726170;
  *(_QWORD *)(inited + 168) = 0xEA00000000007265;
  *(NSNumber *)(inited + 176) = UInt8._bridgeToObjectiveC()();
  *(_BYTE *)(inited + 184) = 0;
  return sub_1006B9444(inited);
}

uint64_t sub_100A7251C()
{
  return sub_1003E8FD4(40);
}

uint64_t sub_100A72524()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;

  v2 = swift_task_alloc(dword_101110E9C);
  v3 = *(_OWORD *)(v0 + 16);
  *(_QWORD *)(v1 + 16) = v2;
  *(_QWORD *)v2 = v1;
  *(_QWORD *)(v2 + 8) = sub_100004A74;
  *(_OWORD *)(v2 + 16) = v3;
  return swift_task_switch(sub_100A6D318, 0, 0);
}

uint64_t sub_100A72584()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  _QWORD *v4;

  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(_BYTE *)(v0 + 24);
  v4 = (_QWORD *)swift_task_alloc(dword_101110EAC);
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_100004A74;
  return sub_1000DF918(v2, v3);
}

uint64_t sub_100A725D8@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;

  return sub_100A3E9A0(v1, a1);
}

void sub_100A725F0(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 224);
}

uint64_t sub_100A725FC@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;

  return sub_1000E0C14(v1, a1);
}

uint64_t sub_100A72614()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100A72638()
{
  return sub_1006AF578((uint64_t (*)(_QWORD))&type metadata accessor for MACAddress);
}

uint64_t sub_100A72644(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for MACAddress(0) - 8) + 80);
  return sub_100A6C5B8(a1, *(_QWORD *)(v1 + 16), v1 + ((v3 + 24) & ~v3));
}

uint64_t sub_100A72684()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  unint64_t v9;

  v1 = type metadata accessor for MACAddress(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = (v5 + v3 + v4) & ~v3;
  v7 = (v5 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  v8 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v8(v0 + v4, v1);
  v8(v0 + v6, v1);
  v9 = *(_QWORD *)(v0 + v7 + 8);
  if (v9 >> 60 != 15)
    sub_10001BC14(*(_QWORD *)(v0 + v7), v9);
  return swift_deallocObject(v0, v7 + 16, v3 | 7);
}

uint64_t sub_100A72738()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v2 = *(_QWORD *)(type metadata accessor for MACAddress(0) - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = (v5 + v3 + v4) & ~v3;
  v7 = *(_QWORD *)(v0 + 16);
  v8 = v0 + v4;
  v9 = v0 + v6;
  v10 = (uint64_t *)(v0 + ((v5 + v6 + 7) & 0xFFFFFFFFFFFFFFF8));
  v11 = *v10;
  v12 = v10[1];
  v13 = (_QWORD *)swift_task_alloc(dword_101110EC4);
  *(_QWORD *)(v1 + 16) = v13;
  *v13 = v1;
  v13[1] = sub_100004C28;
  v13[26] = v11;
  v13[27] = v12;
  v13[24] = v8;
  v13[25] = v9;
  v13[23] = v7;
  return swift_task_switch(sub_100A6B950, 0, 0);
}

uint64_t sub_100A727F4()
{
  return QueueSynchronizer.conditionalSync<A>(_:)(sub_100A75C8C);
}

uint64_t sub_100A72850()
{
  return sub_100A72868((uint64_t)sub_100A75C8C);
}

uint64_t sub_100A7285C()
{
  return sub_100A72868((uint64_t)sub_100A728B8);
}

uint64_t sub_100A72868(uint64_t a1)
{
  return QueueSynchronizer.conditionalSync<A>(_:)(a1);
}

void sub_100A728B8()
{
  uint64_t v0;

  *(_BYTE *)(*(_QWORD *)(v0 + 16) + 224) = *(_BYTE *)(v0 + 24);
}

uint64_t sub_100A728C8()
{
  uint64_t v0;
  id *v1;
  id v2;

  if (*(_BYTE *)(v0 + 57) == 1)
  {
    v1 = (id *)(v0 + 16);
    switch(*(_BYTE *)(v0 + 56))
    {
      case 0:
      case 7:
      case 0xA:
        v2 = *v1;
        goto LABEL_10;
      case 1:
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
        return swift_deallocObject(v0, 58, 7);
      case 2:

        goto LABEL_9;
      case 3:

        return swift_deallocObject(v0, 58, 7);
      case 4:
      case 5:
      case 6:
        swift_release();
        return swift_deallocObject(v0, 58, 7);
      case 8:
        swift_release();
LABEL_9:
        v2 = *(id *)(v0 + 24);
LABEL_10:
        swift_errorRelease(v2);
        break;
      case 9:
        swift_bridgeObjectRelease();
        break;
      default:
        return swift_deallocObject(v0, 58, 7);
    }
  }
  return swift_deallocObject(v0, 58, 7);
}

uint64_t sub_100A7296C()
{
  uint64_t v0;

  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 24));
  swift_release();
  return swift_deallocObject(v0, 72, 7);
}

uint64_t sub_100A729A0(void (*a1)(_OWORD *), uint64_t a2)
{
  uint64_t *v2;

  return sub_100A68F18(a1, a2, v2[2], v2 + 3, v2[8]);
}

uint64_t sub_100A729B0()
{
  uint64_t v0;

  swift_release();
  sub_10001BC14(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100A729DC(void (*a1)(__int128 *), char *a2)
{
  uint64_t v2;

  return sub_100A681C0(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32));
}

unint64_t sub_100A729E8()
{
  unint64_t result;

  result = qword_101110EE0;
  if (!qword_101110EE0)
  {
    result = swift_getWitnessTable(asc_100E5A0EC, &type metadata for AirPodsPairingManager.AirPodsPairingManagerError);
    atomic_store(result, (unint64_t *)&qword_101110EE0);
  }
  return result;
}

uint64_t sub_100A72A2C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

void sub_100A72A50(uint64_t a1)
{
  uint64_t v1;

  sub_100A67A7C(a1, *(NSObject **)(v1 + 16));
}

uint64_t sub_100A72A58(uint64_t a1)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  v6 = *(_OWORD *)(a1 + 272);
  v7 = *(_OWORD *)(a1 + 288);
  v4 = *(_OWORD *)(a1 + 240);
  v5 = *(_OWORD *)(a1 + 256);
  v3 = *(_OWORD *)(a1 + 208);
  sub_100A72AE0(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_QWORD *)(a1 + 152),
    *(_QWORD *)(a1 + 160),
    *(_QWORD *)(a1 + 168),
    *(_QWORD *)(a1 + 176),
    *(_QWORD *)(a1 + 184),
    *(_QWORD *)(a1 + 192),
    *(_QWORD *)(a1 + 200),
    v3,
    *((unint64_t *)&v3 + 1),
    *(_QWORD *)(a1 + 224),
    *(_QWORD *)(a1 + 232),
    v4,
    *((unint64_t *)&v4 + 1),
    v5,
    *((unint64_t *)&v5 + 1),
    v6,
    *((unint64_t *)&v6 + 1),
    v7,
    *((uint64_t *)&v7 + 1),
    *(_QWORD *)(a1 + 304),
    *(_QWORD *)(a1 + 312));
  return a1;
}

uint64_t sub_100A72AE0(uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, unint64_t a15, uint64_t a16, unint64_t a17, uint64_t a18, unint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,unint64_t a26,uint64_t a27,unint64_t a28,uint64_t a29,unint64_t a30,uint64_t a31,unint64_t a32,uint64_t a33,unint64_t a34,uint64_t a35,unint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,unint64_t a40)
{
  if (a22)
  {
    sub_10001BC14(result, a2);
    sub_10001BC14(a3, a4);
    sub_10001EF3C(a5, a6);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10001BC14(a14, a15);
    sub_10001BC14(a16, a17);
    sub_10001BC14(a18, a19);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10001BC14(a25, a26);
    sub_10001BC14(a27, a28);
    sub_10001BC14(a29, a30);
    sub_10001BC14(a31, a32);
    sub_10001BC14(a33, a34);
    sub_10001EF3C(a35, a36);
    swift_bridgeObjectRelease();
    return sub_10001EF3C(a39, a40);
  }
  return result;
}

uint64_t sub_100A72CA0(uint64_t a1)
{
  uint64_t v1;

  return sub_100A630EC(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_100A72CB8(uint64_t a1)
{
  sub_100A72D20(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_QWORD *)(a1 + 152),
    *(_QWORD *)(a1 + 160),
    *(_QWORD *)(a1 + 168),
    *(_QWORD *)(a1 + 176),
    *(_QWORD *)(a1 + 184),
    *(_QWORD *)(a1 + 192),
    *(_QWORD *)(a1 + 200));
  return a1;
}

uint64_t sub_100A72D20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8, uint64_t a9, unint64_t a10, uint64_t a11, unint64_t a12, uint64_t a13, unint64_t a14, uint64_t a15, unint64_t a16, uint64_t a17, unint64_t a18, uint64_t a19, unint64_t a20,uint64_t a21,unint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,unint64_t a26)
{
  uint64_t result;

  if (a2 != 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10001BC14(a7, a8);
    sub_10001BC14(a9, a10);
    sub_10001BC14(a11, a12);
    sub_10001BC14(a13, a14);
    sub_10001BC14(a15, a16);
    sub_10001BC14(a17, a18);
    sub_10001BC14(a19, a20);
    sub_10001EF3C(a21, a22);
    swift_bridgeObjectRelease();
    return sub_10001EF3C(a25, a26);
  }
  return result;
}

uint64_t sub_100A72E54()
{
  return sub_1003E8FD4(32);
}

uint64_t sub_100A72E5C(uint64_t a1)
{
  uint64_t v1;

  return sub_100A631A0(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_100A72E64()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));

  return swift_deallocObject(v0, 40, 7);
}

void sub_100A72E98()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  Transaction.capture()();
  sub_100A6D3BC(v1);
}

void sub_100A72ED8(uint64_t a1)
{
  uint64_t v1;

  sub_100A62DDC(a1, *(_QWORD *)(v1 + 16), *(NSObject **)(v1 + 24));
}

uint64_t sub_100A72EE0()
{
  return sub_1006AF578((uint64_t (*)(_QWORD))&type metadata accessor for MACAddress);
}

uint64_t sub_100A72EEC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for MACAddress(0) - 8) + 80);
  v3 = *(_QWORD *)(v0 + 16);
  v4 = v0 + ((v2 + 24) & ~v2);
  v5 = (_QWORD *)swift_task_alloc(dword_101110F0C);
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_100004A74;
  return sub_100A6A1F4(v3, v4);
}

uint64_t sub_100A72F58@<X0>(char *a1@<X8>)
{
  return sub_100A6B034(a1);
}

uint64_t sub_100A72F60()
{
  return sub_1006AF578((uint64_t (*)(_QWORD))&type metadata accessor for MACAddress);
}

void sub_100A72F6C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for MACAddress(0) - 8) + 80);
  sub_100A6B0BC(v0 + ((v1 + 24) & ~v1), 0, 0);
}

uint64_t sub_100A72FB4()
{
  uint64_t v0;

  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_100A72FD8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100A72FE8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100A72FF8()
{
  uint64_t v0;

  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100A7301C()
{
  uint64_t v0;

  return sub_100A619E4(v0 + 16);
}

uint64_t sub_100A73024()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100A73034()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100A73044()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100A73054()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100A73064()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100A73078()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100A73088()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100A73098()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100A730A8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100A730B8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100A730CC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100A730DC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100A730F0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100A73100()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100A73110()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100A73120()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100A73130()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100A73140()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100A73150()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100A73164()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100A73174()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100A73184()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100A73194()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100A731A4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100A731B8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100A731C8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100A731DC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100A731EC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100A731FC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100A7320C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100A73220()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100A73230()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100A73240()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100A73250()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100A73260()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100A73274()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100A73284()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100A73298()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100A732A8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100A732BC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100A732CC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100A732E0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100A732F0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100A73304()
{
  uint64_t v0;

  return Data.hexString.getter(*(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 168));
}

uint64_t sub_100A7330C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100A7331C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100A73330()
{
  uint64_t v0;

  sub_10001BC14(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
  sub_10001BC14(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
  sub_10001BC14(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56));
  sub_10001BC14(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72));
  sub_10001BC14(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88));
  sub_10001BC14(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104));
  sub_10001BC14(*(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 120));
  sub_10001BC14(*(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 136));
  sub_10001BC14(*(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 152));
  sub_10001BC14(*(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 168));
  sub_10001BC14(*(_QWORD *)(v0 + 176), *(_QWORD *)(v0 + 184));
  sub_10001BC14(*(_QWORD *)(v0 + 200), *(_QWORD *)(v0 + 208));
  return swift_deallocObject(v0, 216, 7);
}

uint64_t sub_100A733AC()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 192);
}

uint64_t sub_100A733B4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100A733C4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100A733D4()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100A733F8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100A73408()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100A73418()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100A73428()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t *sub_100A73438(uint64_t *a1, void (*a2)(uint64_t, uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v4 = a1[2];
  v5 = a1[3];
  v6 = a1[4];
  v7 = a1[5];
  v8 = a1[6];
  v9 = a1[7];
  v10 = a1[8];
  v11 = a1[9];
  v13 = a1[11];
  v14 = a1[10];
  v15 = a1[13];
  v16 = a1[12];
  v17 = a1[15];
  v18 = a1[14];
  v19 = a1[17];
  v20 = a1[16];
  v21 = a1[19];
  v22 = a1[18];
  v23 = a1[21];
  v24 = a1[20];
  v26 = a1[23];
  v25 = a1[24];
  a2(*a1, a1[1]);
  a2(v4, v5);
  a2(v6, v7);
  a2(v8, v9);
  a2(v10, v11);
  a2(v14, v13);
  a2(v16, v15);
  a2(v18, v17);
  a2(v20, v19);
  a2(v22, v21);
  a2(v24, v23);
  a2(v26, v25);
  return a1;
}

uint64_t sub_100A73560()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100A73570()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100A73580()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100A73590()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100A735A0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100A735B0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100A735C0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100A735D0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100A735E0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100A735F4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100A73604()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100A73614()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100A73624()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100A73634()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100A73648()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100A73658()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100A7366C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100A7367C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100A73690()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100A736A0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100A736B4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100A736C4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100A736D8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100A736E8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100A736F8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100A73708()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100A73718()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100A73728()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100A73738()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100A73748()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100A73758()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100A73768()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100A73778()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100A73788()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100A73798()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100A737A8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100A737B8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100A737CC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100A737DC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100A737EC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100A737FC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100A7380C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100A73820()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100A73830()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100A73844()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100A73854()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100A73868()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100A73878()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100A7388C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100A7389C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100A738B0()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 176);
}

uint64_t sub_100A738B8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100A738C8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100A738D8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100A738E8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100A738F8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100A73908()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t *sub_100A73918(uint64_t *a1, void (*a2)(uint64_t, uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v4 = a1[2];
  v5 = a1[3];
  v6 = a1[4];
  v7 = a1[5];
  v8 = a1[6];
  v9 = a1[7];
  v10 = a1[8];
  v11 = a1[9];
  v13 = a1[11];
  v14 = a1[10];
  v15 = a1[13];
  v16 = a1[12];
  v17 = a1[15];
  v18 = a1[14];
  v19 = a1[17];
  v20 = a1[16];
  v21 = a1[19];
  v22 = a1[18];
  v23 = a1[22];
  v24 = a1[21];
  a2(*a1, a1[1]);
  a2(v4, v5);
  a2(v6, v7);
  a2(v8, v9);
  a2(v10, v11);
  a2(v14, v13);
  a2(v16, v15);
  a2(v18, v17);
  a2(v20, v19);
  a2(v22, v21);
  a2(v24, v23);
  return a1;
}

uint64_t sub_100A73A24()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100A73A48()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100A73A58()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100A73A68()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100A73A78()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100A73A88()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100A73A98()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100A73AA8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100A73AB8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100A73AC8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100A73AD8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100A73AE8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100A73AFC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100A73B0C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100A73B20()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100A73B30()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100A73B44()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100A73B54()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100A73B64()
{
  uint64_t v0;

  swift_errorRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100A73B88()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100A73B98()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100A73BA8()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100A73BCC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100A73BDC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100A73BF0()
{
  uint64_t v0;

  return sub_10004F148(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
}

uint64_t sub_100A73C0C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100A73C1C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100A73C30()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100A73C40()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100A73C54()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100A73C64()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100A73C74()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100A73C84()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100A73C94()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100A73CA4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100A73CB8()
{
  uint64_t v0;
  __int128 v1;
  __int128 v2;
  _OWORD v4[5];
  uint64_t v5;

  v1 = *(_OWORD *)(v0 + 64);
  v4[2] = *(_OWORD *)(v0 + 48);
  v4[3] = v1;
  v4[4] = *(_OWORD *)(v0 + 80);
  v5 = *(_QWORD *)(v0 + 96);
  v2 = *(_OWORD *)(v0 + 32);
  v4[0] = *(_OWORD *)(v0 + 16);
  v4[1] = v2;
  sub_100A73E8C((uint64_t *)(v0 + 16), (void (*)(uint64_t, uint64_t))sub_10001BBBC);
  return String.init<A>(describing:)(v4, &type metadata for AirPodsPairingEligibilityDataResponseCommandPayload);
}

uint64_t sub_100A73D10()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100A73D20()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100A73D34()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100A73D44()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100A73D58@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v1;
  __int128 v3;

  v3 = *(_OWORD *)(v1 + 32);
  *a1 = v3;
  return sub_100059DE8((uint64_t)&v3);
}

uint64_t sub_100A73D84()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100A73D94()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

void sub_100A73DA8(_DWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_DWORD *)(v1 + 48);
}

uint64_t sub_100A73DB4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100A73DC4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100A73DD8()
{
  uint64_t v0;

  return Data.hexString.getter(*(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64));
}

uint64_t sub_100A73DE0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100A73DF0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100A73E04()
{
  uint64_t v0;

  return Data.hexString.getter(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80));
}

uint64_t sub_100A73E0C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100A73E1C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100A73E30()
{
  uint64_t v0;

  return Data.hexString.getter(*(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 96));
}

uint64_t sub_100A73E38()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100A73E48()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100A73E58()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

void sub_100A73E84(uint64_t a1)
{
  uint64_t v1;

  sub_100A604B8(a1, *(NSObject **)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t *sub_100A73E8C(uint64_t *a1, void (*a2)(uint64_t, uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = a1[2];
  v5 = a1[3];
  v6 = a1[5];
  v7 = a1[6];
  v8 = a1[7];
  v9 = a1[8];
  v10 = a1[9];
  v11 = a1[10];
  a2(*a1, a1[1]);
  a2(v4, v5);
  a2(v6, v7);
  a2(v8, v9);
  a2(v10, v11);
  return a1;
}

uint64_t sub_100A73F20@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for AccessoryProductInfo(0) - 8) + 80);
  return sub_10005972C(v1 + ((v3 + 16) & ~v3), a1, type metadata accessor for AccessoryProductInfo);
}

uint64_t sub_100A73F68()
{
  uint64_t v0;

  return sub_1000D7570(*(uint64_t (**)(uint64_t))(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_100A73F70()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100A73F80()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100A73F94()
{
  return sub_100A7437C(sub_100A6085C);
}

uint64_t sub_100A73FA0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100A73FB0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100A73FC4()
{
  uint64_t v0;
  uint64_t v1;
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t *v20;
  unint64_t v21;
  void (*v22)(uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;

  v1 = v0;
  v2 = (int *)type metadata accessor for AccessoryProductInfo(0);
  v3 = *((_QWORD *)v2 - 1);
  v4 = *(unsigned __int8 *)(v3 + 80);
  v5 = (v4 + 16) & ~v4;
  v25 = *(_QWORD *)(v3 + 64);
  v6 = v0 + v5;
  v7 = v0 + v5 + v2[5];
  v8 = type metadata accessor for ServerStatusCode(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v9 = v0 + v5 + v2[16];
  v10 = type metadata accessor for URL(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
  if (!v12(v9, 1, v10))
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
  v13 = v6 + v2[17];
  if (!v12(v13, 1, v10))
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v13, v10);
  swift_bridgeObjectRelease();
  v14 = v6 + v2[20];
  v15 = type metadata accessor for AccessoryInfoResponseContent.Configuration(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 48))(v14, 1, v15))
  {
    v24 = v1;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v16 = v14 + *(int *)(v15 + 40);
    if (!v12(v16, 1, v10))
      (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v16, v10);
    v17 = v14 + *(int *)(v15 + 44);
    if (!v12(v17, 1, v10))
      (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v17, v10);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v1 = v24;
  }
  swift_bridgeObjectRelease();
  v18 = (uint64_t *)(v6 + v2[23]);
  v19 = v18[1];
  if (v19 >> 60 != 15)
    sub_10001BC14(*v18, v19);
  v20 = (uint64_t *)(v6 + v2[24]);
  v21 = v20[1];
  if (v21 >> 60 != 15)
    sub_10001BC14(*v20, v21);
  v22 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
  v22(v6 + v2[25], v10);
  v22(v6 + v2[26], v10);
  v22(v6 + v2[27], v10);
  v22(v6 + v2[28], v10);
  v22(v6 + v2[29], v10);
  v22(v6 + v2[30], v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v22(v6 + v2[37], v10);
  v22(v6 + v2[38], v10);
  v22(v6 + v2[39], v10);
  v22(v6 + v2[40], v10);
  v22(v6 + v2[41], v10);
  v22(v6 + v2[42], v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject(v1, v5 + v25, v4 | 7);
}

uint64_t sub_100A74370()
{
  return sub_100A7437C(sub_100A608AC);
}

uint64_t sub_100A7437C(uint64_t (*a1)(uint64_t))
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for AccessoryProductInfo(0) - 8) + 80);
  return a1(v1 + ((v2 + 16) & ~v2));
}

uint64_t sub_100A743B8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100A743C8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100A743D8()
{
  uint64_t v0;

  sub_10001BC14(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100A743FC()
{
  uint64_t v0;

  return sub_1000D73B0(*(_QWORD *(**)(_QWORD *__return_ptr, uint64_t))(v0 + 16));
}

uint64_t sub_100A74404()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100A74414()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100A74424()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100A74434()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100A74444()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100A74454()
{
  uint64_t v0;

  return sub_100A608FC(v0);
}

uint64_t sub_100A7445C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100A7446C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100A7447C()
{
  uint64_t v0;
  unint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  if (v1 >> 60 != 15)
    sub_10001BC14(*(_QWORD *)(v0 + 16), v1);
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100A744B0()
{
  uint64_t v0;
  unint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  if (v1 >> 60 == 15)
    return 0;
  else
    return Data.hexString.getter(*(_QWORD *)(v0 + 16), v1);
}

uint64_t sub_100A744E8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100A744F8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t *sub_100A74508(uint64_t *a1, void (*a2)(uint64_t, uint64_t), void (*a3)(uint64_t, uint64_t))
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = a1[2];
  v6 = a1[3];
  v7 = a1[4];
  v8 = a1[5];
  v9 = a1[6];
  v10 = a1[7];
  v11 = a1[8];
  v12 = a1[9];
  sub_10001BC14(*a1, a1[1]);
  sub_10001BC14(v5, v6);
  sub_10001BC14(v7, v8);
  a2(v9, v10);
  a3(v11, v12);
  return a1;
}

uint64_t sub_100A745AC()
{
  uint64_t v0;

  sub_10001BC14(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
  sub_10001BC14(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
  sub_10001BC14(*(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64));
  sub_10001BC14(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80));
  sub_10001BC14(*(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 96));
  return swift_deallocObject(v0, 104, 7);
}

uint64_t sub_100A745F0@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v1;
  __int128 v3;

  v3 = *(_OWORD *)(v1 + 16);
  *a1 = v3;
  return sub_100059DE8((uint64_t)&v3);
}

uint64_t sub_100A7461C()
{
  uint64_t v0;

  return sub_1000D78DC(*(void (**)(uint64_t *__return_ptr))(v0 + 16));
}

uint64_t sub_100A74624()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100A74634()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100A74644()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100A74654()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100A74664()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100A74674()
{
  uint64_t v0;
  id *v1;
  id v2;

  v1 = (id *)(v0 + 16);
  switch(*(_BYTE *)(v0 + 56))
  {
    case 0:
    case 7:
    case 0xA:
      v2 = *v1;
      goto LABEL_9;
    case 1:
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
      return swift_deallocObject(v0, 57, 7);
    case 2:

      goto LABEL_8;
    case 3:

      return swift_deallocObject(v0, 57, 7);
    case 4:
    case 5:
    case 6:
      swift_release();
      return swift_deallocObject(v0, 57, 7);
    case 8:
      swift_release();
LABEL_8:
      v2 = *(id *)(v0 + 24);
LABEL_9:
      swift_errorRelease(v2);
      break;
    case 9:
      swift_bridgeObjectRelease();
      break;
    default:
      return swift_deallocObject(v0, 57, 7);
  }
  return swift_deallocObject(v0, 57, 7);
}

uint64_t sub_100A74708(void (*a1)(_BYTE *))
{
  uint64_t v1;
  _BYTE v4[48];

  sub_100059280((_QWORD *)(v1 + 16), (uint64_t)v4);
  v4[41] = 1;
  a1(v4);
  return sub_100004048((uint64_t)v4, &qword_101110ED0);
}

void sub_100A74768()
{
  uint64_t v0;

  *(_BYTE *)(*(_QWORD *)(v0 + 16) + 168) = *(_BYTE *)(v0 + 24);
}

uint64_t sub_100A74778(uint64_t a1)
{
  uint64_t *v1;

  return sub_100A4A048(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_100A74794()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[3]);
  swift_release(v0[4]);
  swift_unknownObjectRelease(v0[5]);
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100A747D0(uint64_t a1)
{
  uint64_t *v1;

  return sub_100A4A614(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_100A747DC(uint64_t a1)
{
  uint64_t v1;

  return sub_100A476C4(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(unsigned __int8 *)(v1 + 32));
}

uint64_t sub_100A747FC(uint64_t a1)
{
  uint64_t v1;

  return sub_100A46B84(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_100A74818()
{
  return sub_100007DD4((void (*)(_QWORD))&_swift_release, 40);
}

uint64_t sub_100A74828(uint64_t a1)
{
  uint64_t *v1;

  return sub_100A47268(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_100A74834@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = sub_100A67F24(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  *a2 = result;
  return result;
}

uint64_t sub_100A74860()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 25, 7);
}

uint64_t sub_100A74884(uint64_t a1)
{
  uint64_t v1;

  return sub_100A4D184(a1, *(unsigned __int8 *)(v1 + 24));
}

uint64_t sub_100A748AC()
{
  return sub_1003E8FD4(32);
}

uint64_t sub_100A748B4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = sub_100A4CE80(a1, *(_QWORD *)(v2 + 24));
  *a2 = result;
  return result;
}

uint64_t sub_100A748E0()
{
  return sub_100007DD4((void (*)(_QWORD))&_swift_release, 41);
}

uint64_t sub_100A748F0(void (*a1)(_QWORD, _QWORD))
{
  uint64_t v1;

  return sub_100A47FC8(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_BYTE *)(v1 + 40));
}

unint64_t sub_100A74900()
{
  unint64_t result;

  result = qword_101110FD8;
  if (!qword_101110FD8)
  {
    result = swift_getWitnessTable(byte_100E4F4D8, &type metadata for AirpodsPairingSpec1_0);
    atomic_store(result, (unint64_t *)&qword_101110FD8);
  }
  return result;
}

unint64_t sub_100A74944()
{
  unint64_t result;

  result = qword_101110FE8;
  if (!qword_101110FE8)
  {
    result = swift_getWitnessTable(byte_100E64B48, &type metadata for AirpodsPairingSpec1_1);
    atomic_store(result, &qword_101110FE8);
  }
  return result;
}

void sub_100A74988(uint64_t a1)
{
  uint64_t v1;

  sub_100A45950(a1, *(_QWORD *)(v1 + 16), *(uint64_t **)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40));
}

uint64_t sub_100A749A4()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v2 = (_QWORD *)swift_task_alloc(dword_101110FF4);
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = sub_100004A74;
  return sub_100A4621C(v0);
}

uint64_t sub_100A749EC()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  unint64_t v18;
  void (*v19)(uint64_t, uint64_t);
  uint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v1 = (int *)type metadata accessor for OwnedBeaconRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v28 = *(_QWORD *)(v2 + 64);
  v4 = type metadata accessor for OwnedBeaconGroup(0);
  v5 = *(_QWORD *)(v4 - 8);
  v30 = *(unsigned __int8 *)(v5 + 80);
  v27 = *(_QWORD *)(v5 + 64);
  swift_release();
  v29 = (v3 + 24) & ~v3;
  v6 = v0 + v29;
  sub_10001BC14(*(_QWORD *)v6, *(_QWORD *)(v6 + 8));
  v7 = v0 + v29 + v1[5];
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v10(v7, v8);
  v11 = v0 + v29 + v1[6];
  v12 = type metadata accessor for StableIdentifier(0);
  switch(swift_getEnumCaseMultiPayload(v11, v12))
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v10(v11, v8);
      v13 = v3;
      sub_10001A9A8(&qword_101106F40);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v10(v11, v8);
      v13 = v3;
      sub_10001A9A8((uint64_t *)&unk_1010F46F0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      v3 = v13;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }
  v14 = v6 + v1[7];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v14, 1, v8))
    v10(v14, v8);
  v15 = v6 + v1[8];
  v16 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v15, v16);
  sub_10001BC14(*(_QWORD *)(v6 + v1[9]), *(_QWORD *)(v6 + v1[9] + 8));
  v17 = (uint64_t *)(v6 + v1[10]);
  v18 = v17[1];
  if (v18 >> 60 != 15)
    sub_10001BC14(*v17, v18);
  v19 = v10;
  v20 = (uint64_t *)(v6 + v1[11]);
  v21 = v20[1];
  if (v21 >> 60 != 15)
    sub_10001BC14(*v20, v21);
  v22 = (v28 + v29 + 7) & 0xFFFFFFFFFFFFFFF8;
  v23 = (v22 + v30 + 8) & ~v30;
  sub_10001BC14(*(_QWORD *)(v6 + v1[12]), *(_QWORD *)(v6 + v1[12] + 8));
  sub_10001BC14(*(_QWORD *)(v6 + v1[13]), *(_QWORD *)(v6 + v1[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_errorRelease(*(_QWORD *)(v0 + v22));
  sub_10001BC14(*(_QWORD *)(v0 + v23), *(_QWORD *)(v0 + v23 + 8));
  v19(v0 + v23 + *(int *)(v4 + 24), v8);
  v24 = v0 + v23 + *(int *)(v4 + 28);
  v25 = type metadata accessor for MACAddress(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 8))(v24, v25);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, ((v27 + v23 + 7) & 0xFFFFFFFFFFFFFFF8) + 8, v3 | v30 | 7);
}

uint64_t sub_100A74D50()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v2 = *(_QWORD *)(type metadata accessor for OwnedBeaconRecord(0) - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  v5 = *(_QWORD *)(type metadata accessor for OwnedBeaconGroup(0) - 8);
  v6 = (v4 + *(unsigned __int8 *)(v5 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = *(_QWORD *)(v0 + 16);
  v8 = *(_QWORD *)(v0 + v4);
  v9 = v0 + v3;
  v10 = v0 + v6;
  v11 = *(_QWORD *)(v0 + ((*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFF8));
  v12 = (_QWORD *)swift_task_alloc(dword_101111004);
  *(_QWORD *)(v1 + 16) = v12;
  *v12 = v1;
  v12[1] = sub_100004A74;
  v12[5] = v10;
  v12[6] = v11;
  v12[3] = v9;
  v12[4] = v8;
  v12[2] = v7;
  return swift_task_switch(sub_100A462AC, 0, 0);
}

unint64_t sub_100A74E2C()
{
  uint64_t *v0;

  return sub_100A46444(v0[2], v0[3], v0[4]);
}

uint64_t sub_100A74E38(uint64_t a1)
{
  uint64_t *v1;

  return sub_100A4121C(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t sub_100A74E54()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for MACAddress(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(_QWORD *)(v0 + v6 + 8));
  return swift_deallocObject(v0, v6 + 16, v5);
}

uint64_t sub_100A74EF0()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t *v3;

  v1 = *(_QWORD *)(type metadata accessor for MACAddress(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (uint64_t *)(v0 + ((*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8));
  return sub_100A414C8(*(char **)(v0 + 16), *(_QWORD *)(v0 + 24), v0 + v2, *v3, v3[1]);
}

uint64_t sub_100A74F38()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v2 = (_QWORD *)swift_task_alloc(dword_101111014);
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = sub_100004A74;
  return sub_100A43514(v0);
}

uint64_t sub_100A74F80()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t);
  void (*v16)(uint64_t, uint64_t);
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;

  v1 = type metadata accessor for OwnedBeaconGroup(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v18 = type metadata accessor for UUID(0);
  v6 = *(_QWORD *)(v18 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = (v5 + v7 + 8) & ~v7;
  v9 = *(_QWORD *)(v6 + 64);
  v10 = type metadata accessor for MACAddress(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(unsigned __int8 *)(v11 + 80);
  v13 = (v8 + v9 + v12) & ~v12;
  v19 = ((*(_QWORD *)(v11 + 64) + v13 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  v20 = v3 | v7 | v12 | 7;
  swift_release();
  v14 = v0 + v4;
  sub_10001BC14(*(_QWORD *)v14, *(_QWORD *)(v14 + 8));
  v15 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v15(v14 + *(int *)(v1 + 24), v18);
  v16 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
  v16(v14 + *(int *)(v1 + 28), v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  v15(v0 + v8, v18);
  v16(v0 + v13, v10);
  swift_release();
  return swift_deallocObject(v0, v19, v20);
}

uint64_t sub_100A750EC()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;

  v1 = *(_QWORD *)(type metadata accessor for OwnedBeaconGroup(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  v4 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v5 = (v3 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = *(_QWORD *)(v4 + 64);
  v7 = *(_QWORD *)(type metadata accessor for MACAddress(0) - 8);
  v8 = (v5 + v6 + *(unsigned __int8 *)(v7 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v9 = (uint64_t *)(v0 + ((*(_QWORD *)(v7 + 64) + v8 + 7) & 0xFFFFFFFFFFFFFFF8));
  return sub_100A439B8(*(_QWORD *)(v0 + 16), v0 + v2, *(_QWORD *)(v0 + v3), v0 + v5, v0 + v8, *v9, v9[1]);
}

uint64_t sub_100A751A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 33) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = *(_QWORD *)(v2 + 64);
  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for OwnedBeaconGroup(0) - 8) + 80);
  v6 = v3 + v4 + v5;
  v7 = *(_QWORD *)(v0 + 16);
  v8 = *(_QWORD *)(v0 + 24);
  v9 = *(_BYTE *)(v0 + 32);
  v10 = v0 + v3;
  v11 = v0 + (v6 & ~v5);
  v12 = swift_task_alloc(dword_101111024);
  *(_QWORD *)(v1 + 16) = v12;
  *(_QWORD *)v12 = v1;
  *(_QWORD *)(v12 + 8) = sub_100004A74;
  *(_QWORD *)(v12 + 32) = v10;
  *(_QWORD *)(v12 + 40) = v11;
  *(_BYTE *)(v12 + 72) = v9;
  *(_QWORD *)(v12 + 16) = v7;
  *(_QWORD *)(v12 + 24) = v8;
  return swift_task_switch(sub_100A43BAC, 0, 0);
}

uint64_t sub_100A75264()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100A752E0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for UUID(0) - 8) + 80);
  v3 = v0[2];
  v4 = v0[3];
  v5 = v0[4];
  v6 = (uint64_t)v0 + ((v2 + 40) & ~v2);
  v7 = (_QWORD *)swift_task_alloc(dword_101111034);
  *(_QWORD *)(v1 + 16) = v7;
  *v7 = v1;
  v7[1] = sub_100004A74;
  return sub_100A44498(v3, v4, v5, v6);
}

uint64_t sub_100A75360()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = type metadata accessor for OwnedBeaconGroup(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_release();
  swift_errorRelease(*(_QWORD *)(v0 + 24));
  v7 = v0 + v4;
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v8 = v0 + v4 + *(int *)(v1 + 24);
  v9 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  v10 = v7 + *(int *)(v1 + 28);
  v11 = type metadata accessor for MACAddress(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100A7543C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for OwnedBeaconGroup(0) - 8) + 80);
  v3 = v0 + ((v2 + 32) & ~v2);
  v4 = swift_task_alloc(dword_101111044);
  v5 = *(_OWORD *)(v0 + 16);
  *(_QWORD *)(v1 + 16) = v4;
  *(_QWORD *)v4 = v1;
  *(_QWORD *)(v4 + 8) = sub_100004A74;
  *(_QWORD *)(v4 + 32) = v3;
  *(_OWORD *)(v4 + 16) = v5;
  return swift_task_switch(sub_100A43674, 0, 0);
}

unint64_t sub_100A754BC()
{
  uint64_t v0;

  return sub_100A437FC(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_100A754C4()
{
  return sub_1006AF578((uint64_t (*)(_QWORD))&type metadata accessor for UUID);
}

uint64_t sub_100A754D0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for UUID(0) - 8) + 80);
  v5 = *(_QWORD *)(v1 + 16);
  v6 = v1 + ((v4 + 24) & ~v4);
  v7 = (_QWORD *)swift_task_alloc(dword_101111054);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_100004C28;
  return sub_100A451B8(a1, v5, v6);
}

unint64_t sub_100A75550()
{
  uint64_t v0;

  return sub_100A43D4C(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
}

uint64_t sub_100A75564()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 33) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = type metadata accessor for OwnedBeaconGroup(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v4 + v5 + v8) & ~v8;
  v10 = v9 + *(_QWORD *)(v7 + 64);
  v11 = v3 | v8 | 7;
  swift_release();
  sub_10010F948(*(_QWORD *)(v0 + 24), *(_BYTE *)(v0 + 32));
  v12 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v12(v0 + v4, v1);
  sub_10001BC14(*(_QWORD *)(v0 + v9), *(_QWORD *)(v0 + v9 + 8));
  v12(v0 + v9 + *(int *)(v6 + 24), v1);
  v13 = v0 + v9 + *(int *)(v6 + 28);
  v14 = type metadata accessor for MACAddress(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, v10, v11);
}

uint64_t sub_100A75670()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for MACAddress(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release(*(_QWORD *)(v0 + 24));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(_QWORD *)(v0 + v6));
  return swift_deallocObject(v0, v6 + 8, v5);
}

uint64_t sub_100A75700()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for MACAddress(0) - 8) + 80);
  v3 = v0 + ((v2 + 32) & ~v2);
  v4 = swift_task_alloc(dword_10111106C);
  v5 = *(_OWORD *)(v0 + 16);
  *(_QWORD *)(v1 + 16) = v4;
  *(_QWORD *)v4 = v1;
  *(_QWORD *)(v4 + 8) = sub_100004A74;
  *(_QWORD *)(v4 + 152) = v3;
  *(_OWORD *)(v4 + 136) = v5;
  return swift_task_switch(sub_100A40A48, 0, 0);
}

uint64_t sub_100A75780()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  _QWORD *v4;

  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(_BYTE *)(v0 + 24);
  v4 = (_QWORD *)swift_task_alloc(dword_10111108C);
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_100004A74;
  return sub_1000DF918(v2, v3);
}

uint64_t sub_100A757D4()
{
  uint64_t *v0;

  return sub_100787B1C(v0[2], v0[3], v0[4]);
}

uint64_t storeEnumTagSinglePayload for AirPodsPairingManager.AirPodsPairingManagerError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_100A7583C + 4 * byte_100E59F30[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_100A75870 + 4 * byte_100E59F2B[v4]))();
}

uint64_t sub_100A75870(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100A75878(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100A75880);
  return result;
}

uint64_t sub_100A7588C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100A75894);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_100A75898(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100A758A0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AirPodsPairingManager.AirPodsPairingManagerError()
{
  return &type metadata for AirPodsPairingManager.AirPodsPairingManagerError;
}

unint64_t sub_100A758C0()
{
  unint64_t result;

  result = qword_1011110A0;
  if (!qword_1011110A0)
  {
    result = swift_getWitnessTable(byte_100E5A0C4, &type metadata for AirPodsPairingManager.AirPodsPairingManagerError);
    atomic_store(result, (unint64_t *)&qword_1011110A0);
  }
  return result;
}

unint64_t sub_100A75904()
{
  unint64_t result;

  result = qword_1011110A8;
  if (!qword_1011110A8)
  {
    result = swift_getWitnessTable(byte_100E5A04C, &type metadata for AirPodsPairingManager.AirPodsPairingManagerError);
    atomic_store(result, (unint64_t *)&qword_1011110A8);
  }
  return result;
}

uint64_t sub_100A7594C(uint64_t a1)
{
  return sub_100A747DC(a1);
}

void sub_100A7597C(_BYTE *a1@<X8>)
{
  sub_100A725F0(a1);
}

void sub_100A75C8C()
{
  sub_100A728B8();
}

void sub_100A75CA0()
{
  sub_100A74768();
}

uint64_t sub_100A75CBC(uint64_t a1)
{
  return sub_100A747FC(a1);
}

ValueMetadata *type metadata accessor for AccessoryKeyrollIndicationPayload()
{
  return &type metadata for AccessoryKeyrollIndicationPayload;
}

unint64_t sub_100A75CE4(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = sub_100A75D10();
  result = sub_1001E9B5C();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_100A75D10()
{
  unint64_t result;

  result = qword_1011110B0;
  if (!qword_1011110B0)
  {
    result = swift_getWitnessTable(byte_100E5A194, &type metadata for AccessoryKeyrollIndicationPayload);
    atomic_store(result, (unint64_t *)&qword_1011110B0);
  }
  return result;
}

void sub_100A75D54(void (*a1)(_QWORD *__return_ptr, _QWORD, __n128), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __n128 v9;
  int64_t v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v15;
  int64_t v16;
  char v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  void (*v25)(_QWORD *__return_ptr, _QWORD, __n128);
  uint64_t v26;
  uint64_t v27;
  int64_t v28;
  _QWORD v29[2];
  char v30;
  uint64_t v31;
  char v32;

  v4 = a3;
  v27 = a3 + 56;
  v6 = 1 << *(_BYTE *)(a3 + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(a3 + 56);
  v28 = (unint64_t)(v6 + 63) >> 6;
  v9 = swift_bridgeObjectRetain(a3);
  v10 = 0;
  v11 = _swiftEmptyArrayStorage;
  v26 = v4;
  v25 = a1;
  while (1)
  {
    if (v8)
    {
      v12 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v13 = v12 | (v10 << 6);
      goto LABEL_19;
    }
    if (__OFADD__(v10++, 1))
    {
      __break(1u);
      goto LABEL_33;
    }
    if (v10 >= v28)
      goto LABEL_31;
    v15 = *(_QWORD *)(v27 + 8 * v10);
    if (!v15)
      break;
LABEL_18:
    v8 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v10 << 6);
LABEL_19:
    v32 = *(_BYTE *)(*(_QWORD *)(v4 + 48) + v13);
    a1(v29, &v32, v9);
    if (v3)
    {
      swift_bridgeObjectRelease();
LABEL_31:
      swift_release();
      return;
    }
    v17 = v30;
    if (v30 != 2)
    {
      v19 = v29[0];
      v18 = v29[1];
      v20 = v31;
      if ((swift_isUniquelyReferenced_nonNull_native(v11) & 1) == 0)
        v11 = sub_1007C7B14(0, v11[2] + 1, 1, v11);
      v22 = v11[2];
      v21 = v11[3];
      v23 = v11;
      if (v22 >= v21 >> 1)
        v23 = sub_1007C7B14((_QWORD *)(v21 > 1), v22 + 1, 1, v11);
      v23[2] = v22 + 1;
      v11 = v23;
      v24 = &v23[4 * v22];
      *((_BYTE *)v24 + 32) = v19;
      v24[5] = v18;
      *((_BYTE *)v24 + 48) = v17 & 1;
      v24[7] = v20;
      v4 = v26;
      a1 = v25;
    }
  }
  v16 = v10 + 1;
  if (v10 + 1 >= v28)
    goto LABEL_31;
  v15 = *(_QWORD *)(v27 + 8 * v16);
  if (v15)
    goto LABEL_17;
  v16 = v10 + 2;
  if (v10 + 2 >= v28)
    goto LABEL_31;
  v15 = *(_QWORD *)(v27 + 8 * v16);
  if (v15)
    goto LABEL_17;
  v16 = v10 + 3;
  if (v10 + 3 >= v28)
    goto LABEL_31;
  v15 = *(_QWORD *)(v27 + 8 * v16);
  if (v15)
    goto LABEL_17;
  v16 = v10 + 4;
  if (v10 + 4 >= v28)
    goto LABEL_31;
  v15 = *(_QWORD *)(v27 + 8 * v16);
  if (v15)
  {
LABEL_17:
    v10 = v16;
    goto LABEL_18;
  }
  while (1)
  {
    v10 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v10 >= v28)
      goto LABEL_31;
    v15 = *(_QWORD *)(v27 + 8 * v10);
    ++v16;
    if (v15)
      goto LABEL_18;
  }
LABEL_33:
  __break(1u);
}

_QWORD *sub_100A75FC4(void (*a1)(_QWORD, __n128), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD v22[2];
  void (*v23)(_QWORD, __n128);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v6 = sub_10001A9A8(&qword_101111A08);
  __chkstk_darwin(v6);
  v8 = (char *)v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = type metadata accessor for KeyDropCreateRequest.Member(0);
  v9 = *(_QWORD *)(v27 - 8);
  v10 = __chkstk_darwin(v27);
  v26 = (uint64_t)v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v24 = (uint64_t)v22 - v12;
  v13 = *(_QWORD *)(a3 + 16);
  if (!v13)
    return _swiftEmptyArrayStorage;
  v14 = *(_QWORD *)(type metadata accessor for OwnerPeerTrust(0) - 8);
  v15 = a3 + ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80));
  v25 = *(_QWORD *)(v14 + 72);
  v22[1] = a3;
  v16 = swift_bridgeObjectRetain(a3);
  v17 = _swiftEmptyArrayStorage;
  v23 = a1;
  do
  {
    a1(v15, v16);
    if (v3)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v17;
    }
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v8, 1, v27) == 1)
    {
      sub_100004048((uint64_t)v8, &qword_101111A08);
    }
    else
    {
      v18 = v24;
      sub_1000126EC((uint64_t)v8, v24, type metadata accessor for KeyDropCreateRequest.Member);
      sub_1000126EC(v18, v26, type metadata accessor for KeyDropCreateRequest.Member);
      if ((swift_isUniquelyReferenced_nonNull_native(v17) & 1) == 0)
        v17 = (_QWORD *)sub_1007C8220(0, v17[2] + 1, 1, (unint64_t)v17);
      v20 = v17[2];
      v19 = v17[3];
      if (v20 >= v19 >> 1)
        v17 = (_QWORD *)sub_1007C8220(v19 > 1, v20 + 1, 1, (unint64_t)v17);
      v17[2] = v20 + 1;
      sub_1000126EC(v26, (uint64_t)v17+ ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))+ *(_QWORD *)(v9 + 72) * v20, type metadata accessor for KeyDropCreateRequest.Member);
      a1 = v23;
    }
    v15 += v25;
    --v13;
  }
  while (v13);
  swift_bridgeObjectRelease();
  return v17;
}

_QWORD *sub_100A76230(void (*a1)(__int128 *__return_ptr, uint64_t, __n128), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  char v12;
  __int16 v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v17;
  __int128 v19;
  __n128 v20;
  __int128 v21;
  uint64_t v22;
  __n128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v26 = a2;
  v4 = *(_QWORD *)(a3 + 16);
  if (!v4)
    return _swiftEmptyArrayStorage;
  v6 = *(_QWORD *)(sub_10001A9A8((uint64_t *)&unk_101109390) - 8);
  v7 = a3 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  v17 = *(_QWORD *)(v6 + 72);
  v8 = swift_bridgeObjectRetain(a3);
  v9 = _swiftEmptyArrayStorage;
  do
  {
    a1(&v21, v7, v8);
    if (v3)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v9;
    }
    v11 = v25;
    if (v25)
    {
      v12 = v22;
      v19 = v21;
      v20 = v23;
      v13 = v24;
      if ((swift_isUniquelyReferenced_nonNull_native(v9) & 1) == 0)
        v9 = sub_1007C839C(0, v9[2] + 1, 1, v9);
      v15 = v9[2];
      v14 = v9[3];
      if (v15 >= v14 >> 1)
        v9 = sub_1007C839C((_QWORD *)(v14 > 1), v15 + 1, 1, v9);
      v9[2] = v15 + 1;
      v10 = &v9[7 * v15];
      *((_OWORD *)v10 + 2) = v19;
      *((_BYTE *)v10 + 48) = v12;
      v8 = v20;
      *(__n128 *)(v10 + 7) = v20;
      *((_WORD *)v10 + 36) = v13;
      v10[10] = v11;
    }
    v7 += v17;
    --v4;
  }
  while (v4);
  swift_bridgeObjectRelease();
  return v9;
}

void sub_100A763CC(void (*a1)(char *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  __n128 v24;
  int64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v29;
  int64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  int64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(char *);
  uint64_t v48;

  v46 = a2;
  v47 = a1;
  v5 = sub_10001A9A8((uint64_t *)&unk_1010F47C0);
  __chkstk_darwin(v5);
  v7 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for OwnedBeaconRecord(0);
  v9 = *(_QWORD *)(v8 - 8);
  v44 = v8;
  v45 = v9;
  v10 = __chkstk_darwin(v8);
  v40 = (uint64_t)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v39 = (uint64_t)&v38 - v12;
  v13 = type metadata accessor for UUID(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v38 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v17);
  v19 = (char *)&v38 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = *(_QWORD *)(a3 + 56);
  v42 = a3 + 56;
  v21 = 1 << *(_BYTE *)(a3 + 32);
  v22 = -1;
  if (v21 < 64)
    v22 = ~(-1 << v21);
  v23 = v22 & v20;
  v43 = (unint64_t)(v21 + 63) >> 6;
  v48 = a3;
  v24 = swift_bridgeObjectRetain(a3);
  v25 = 0;
  v41 = _swiftEmptyArrayStorage;
  while (1)
  {
    if (v23)
    {
      v26 = __clz(__rbit64(v23));
      v23 &= v23 - 1;
      v27 = v26 | (v25 << 6);
      goto LABEL_19;
    }
    if (__OFADD__(v25++, 1))
    {
      __break(1u);
      goto LABEL_37;
    }
    if (v25 >= v43)
      goto LABEL_34;
    v29 = *(_QWORD *)(v42 + 8 * v25);
    if (!v29)
      break;
LABEL_18:
    v23 = (v29 - 1) & v29;
    v27 = __clz(__rbit64(v29)) + (v25 << 6);
LABEL_19:
    (*(void (**)(char *, unint64_t, uint64_t, __n128))(v14 + 16))(v19, *(_QWORD *)(v48 + 48) + *(_QWORD *)(v14 + 72) * v27, v13, v24);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v19, 0, 1, v13);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v19, 1, v13) == 1)
      goto LABEL_35;
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v16, v19, v13);
    v47(v16);
    if (v3)
    {
      (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
      swift_bridgeObjectRelease();
LABEL_35:
      swift_release();
      return;
    }
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v45 + 48))(v7, 1, v44) == 1)
    {
      sub_100004048((uint64_t)v7, (uint64_t *)&unk_1010F47C0);
    }
    else
    {
      v31 = v39;
      sub_1000126EC((uint64_t)v7, v39, type metadata accessor for OwnedBeaconRecord);
      sub_1000126EC(v31, v40, type metadata accessor for OwnedBeaconRecord);
      if ((swift_isUniquelyReferenced_nonNull_native(v41) & 1) == 0)
        v41 = (_QWORD *)sub_1007C8520(0, v41[2] + 1, 1, (unint64_t)v41);
      v33 = v41[2];
      v32 = v41[3];
      v34 = v33 + 1;
      if (v33 >= v32 >> 1)
      {
        v38 = v33 + 1;
        v37 = (_QWORD *)sub_1007C8520(v32 > 1, v33 + 1, 1, (unint64_t)v41);
        v34 = v38;
        v41 = v37;
      }
      v35 = v40;
      v36 = v41;
      v41[2] = v34;
      sub_1000126EC(v35, (uint64_t)v36+ ((*(unsigned __int8 *)(v45 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v45 + 80))+ *(_QWORD *)(v45 + 72) * v33, type metadata accessor for OwnedBeaconRecord);
    }
  }
  v30 = v25 + 1;
  if (v25 + 1 >= v43)
    goto LABEL_34;
  v29 = *(_QWORD *)(v42 + 8 * v30);
  if (v29)
    goto LABEL_17;
  v30 = v25 + 2;
  if (v25 + 2 >= v43)
    goto LABEL_34;
  v29 = *(_QWORD *)(v42 + 8 * v30);
  if (v29)
    goto LABEL_17;
  v30 = v25 + 3;
  if (v25 + 3 >= v43)
    goto LABEL_34;
  v29 = *(_QWORD *)(v42 + 8 * v30);
  if (v29)
    goto LABEL_17;
  v30 = v25 + 4;
  if (v25 + 4 >= v43)
  {
LABEL_34:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v14 + 56))(v19, 1, 1, v13, v24);
    goto LABEL_35;
  }
  v29 = *(_QWORD *)(v42 + 8 * v30);
  if (v29)
  {
LABEL_17:
    v25 = v30;
    goto LABEL_18;
  }
  while (1)
  {
    v25 = v30 + 1;
    if (__OFADD__(v30, 1))
      break;
    if (v25 >= v43)
      goto LABEL_34;
    v29 = *(_QWORD *)(v42 + 8 * v25);
    ++v30;
    if (v29)
      goto LABEL_18;
  }
LABEL_37:
  __break(1u);
}

_QWORD *sub_100A7684C(void (*a1)(_QWORD, __n128), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v21;
  void (*v22)(_QWORD, __n128);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v6 = sub_10001A9A8(&qword_1011118E8);
  __chkstk_darwin(v6);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = sub_10001A9A8(&qword_1011118F0);
  v9 = *(_QWORD *)(v26 - 8);
  v10 = __chkstk_darwin(v26);
  v25 = (uint64_t)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v24 = (uint64_t)&v21 - v12;
  v13 = *(_QWORD *)(a3 + 16);
  if (!v13)
    return _swiftEmptyArrayStorage;
  v14 = swift_bridgeObjectRetain(a3);
  v15 = 0;
  v16 = _swiftEmptyArrayStorage;
  v22 = a1;
  v23 = a3;
  do
  {
    v27 = *(_QWORD *)(a3 + 8 * v15 + 32);
    a1(&v27, v14);
    if (v3)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v16;
    }
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v8, 1, v26) == 1)
    {
      sub_100004048((uint64_t)v8, &qword_1011118E8);
    }
    else
    {
      v17 = v24;
      sub_100005CF0((uint64_t)v8, v24, &qword_1011118F0);
      sub_100005CF0(v17, v25, &qword_1011118F0);
      if ((swift_isUniquelyReferenced_nonNull_native(v16) & 1) == 0)
        v16 = (_QWORD *)sub_1007C95F4(0, v16[2] + 1, 1, (unint64_t)v16);
      v19 = v16[2];
      v18 = v16[3];
      if (v19 >= v18 >> 1)
        v16 = (_QWORD *)sub_1007C95F4(v18 > 1, v19 + 1, 1, (unint64_t)v16);
      v16[2] = v19 + 1;
      sub_100005CF0(v25, (uint64_t)v16+ ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))+ *(_QWORD *)(v9 + 72) * v19, &qword_1011118F0);
      a1 = v22;
      a3 = v23;
    }
    ++v15;
  }
  while (v13 != v15);
  swift_bridgeObjectRelease();
  return v16;
}

uint64_t sub_100A76AA0(void (*a1)(_QWORD), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  _QWORD *v16;
  uint64_t result;
  unint64_t v18;
  unint64_t v19;
  void (*v21)(_QWORD);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v8 = sub_10001A9A8((uint64_t *)&unk_1010F0EE0);
  __chkstk_darwin(v8);
  v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = type metadata accessor for TimeBasedKey(0);
  v11 = *(_QWORD *)(v24 - 8);
  v12 = __chkstk_darwin(v24);
  v23 = (uint64_t)&v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v15 = (char *)&v21 - v14;
  v16 = _swiftEmptyArrayStorage;
  v21 = a1;
  v22 = a4;
  while (1)
  {
    v25 = a3;
    a1(&v25);
    if (v4)
      break;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v10, 1, v24) == 1)
    {
      result = sub_100004048((uint64_t)v10, (uint64_t *)&unk_1010F0EE0);
      if (a4 == a3)
        return (uint64_t)v16;
    }
    else
    {
      sub_1000126EC((uint64_t)v10, (uint64_t)v15, type metadata accessor for TimeBasedKey);
      sub_1000126EC((uint64_t)v15, v23, type metadata accessor for TimeBasedKey);
      if ((swift_isUniquelyReferenced_nonNull_native(v16) & 1) == 0)
        v16 = (_QWORD *)sub_1007C80D0(0, v16[2] + 1, 1, (unint64_t)v16);
      v19 = v16[2];
      v18 = v16[3];
      if (v19 >= v18 >> 1)
        v16 = (_QWORD *)sub_1007C80D0(v18 > 1, v19 + 1, 1, (unint64_t)v16);
      v16[2] = v19 + 1;
      result = sub_1000126EC(v23, (uint64_t)v16+ ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80))+ *(_QWORD *)(v11 + 72) * v19, type metadata accessor for TimeBasedKey);
      a1 = v21;
      a4 = v22;
      if (v22 == a3)
        return (uint64_t)v16;
    }
    if (__CFADD__(a3++, 1))
    {
      __break(1u);
      return result;
    }
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v16;
}

void *sub_100A76CC4(_QWORD *(*a1)(uint64_t *__return_ptr, uint64_t), uint64_t a2, uint64_t a3)
{
  return sub_100A770E4(a1, a2, a3, type metadata accessor for TimeBasedKey);
}

void *sub_100A76CE0(_QWORD *(*a1)(uint64_t *__return_ptr, uint64_t), uint64_t a2, uint64_t a3)
{
  return sub_100A770E4(a1, a2, a3, _s18ConnectionKeyGroupVMa);
}

_QWORD *sub_100A76CFC(void (*a1)(_QWORD, __n128), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v21;
  void (*v22)(_QWORD, __n128);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v6 = sub_10001A9A8(&qword_1011118E0);
  __chkstk_darwin(v6);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = _s18ConnectionKeyGroupVMa(0);
  v9 = *(_QWORD *)(v26 - 8);
  v10 = __chkstk_darwin(v26);
  v25 = (uint64_t)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v24 = (uint64_t)&v21 - v12;
  v13 = *(_QWORD *)(a3 + 16);
  if (!v13)
    return _swiftEmptyArrayStorage;
  v14 = swift_bridgeObjectRetain(a3);
  v15 = 0;
  v16 = _swiftEmptyArrayStorage;
  v22 = a1;
  v23 = a3;
  do
  {
    v27 = *(_QWORD *)(a3 + 8 * v15 + 32);
    a1(&v27, v14);
    if (v3)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v16;
    }
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v8, 1, v26) == 1)
    {
      sub_100004048((uint64_t)v8, &qword_1011118E0);
    }
    else
    {
      v17 = v24;
      sub_1000126EC((uint64_t)v8, v24, _s18ConnectionKeyGroupVMa);
      sub_1000126EC(v17, v25, _s18ConnectionKeyGroupVMa);
      if ((swift_isUniquelyReferenced_nonNull_native(v16) & 1) == 0)
        v16 = (_QWORD *)sub_1007C8E64(0, v16[2] + 1, 1, (unint64_t)v16);
      v19 = v16[2];
      v18 = v16[3];
      if (v19 >= v18 >> 1)
        v16 = (_QWORD *)sub_1007C8E64(v18 > 1, v19 + 1, 1, (unint64_t)v16);
      v16[2] = v19 + 1;
      sub_1000126EC(v25, (uint64_t)v16+ ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))+ *(_QWORD *)(v9 + 72) * v19, _s18ConnectionKeyGroupVMa);
      a1 = v22;
      a3 = v23;
    }
    ++v15;
  }
  while (v13 != v15);
  swift_bridgeObjectRelease();
  return v16;
}

void *sub_100A76F4C(void (*a1)(uint64_t *__return_ptr, id *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t i;
  uint64_t v8;
  id v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v16;
  uint64_t v18;
  id v19;
  unint64_t v20;

  v4 = v3;
  v20 = (unint64_t)&_swiftEmptyArrayStorage;
  if ((unint64_t)a3 >> 62)
    goto LABEL_17;
  v6 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a3);
  for (; v6; v6 = _CocoaArrayWrapper.endIndex.getter(v16))
  {
    for (i = 4; ; ++i)
    {
      v9 = (a3 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i - 4, a3)
         : *(id *)(a3 + 8 * i);
      v10 = v9;
      v11 = i - 3;
      if (__OFADD__(i - 4, 1))
        break;
      v19 = v9;
      a1(&v18, &v19);
      if (v4)
      {
        swift_bridgeObjectRelease(a3);

        return (void *)swift_bridgeObjectRelease(v20);
      }

      v12 = v18;
      if (v18)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        v14 = *(_QWORD *)((v20 & 0xFFFFFFFFFFFFFF8) + 0x10);
        v13 = *(_QWORD *)((v20 & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (v14 >= v13 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v13 > 1, v14 + 1, 1);
        v8 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v14, v12);
        specialized Array._endMutation()(v8);
      }
      if (v11 == v6)
      {
        swift_bridgeObjectRelease(a3);
        return (void *)v20;
      }
    }
    __break(1u);
LABEL_17:
    if (a3 < 0)
      v16 = a3;
    else
      v16 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
  }
  swift_bridgeObjectRelease(a3);
  return &_swiftEmptyArrayStorage;
}

void *sub_100A770E4(_QWORD *(*a1)(uint64_t *__return_ptr, uint64_t), uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v4;
  uint64_t v6;
  void *result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;

  v6 = *(_QWORD *)(a3 + 16);
  result = &_swiftEmptyArrayStorage;
  v18 = (unint64_t)&_swiftEmptyArrayStorage;
  if (v6)
  {
    v9 = *(_QWORD *)(a4(0) - 8);
    v10 = a3 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    v11 = *(_QWORD *)(v9 + 72);
    swift_bridgeObjectRetain(a3);
    do
    {
      v13 = a1(&v17, v10);
      if (v4)
      {
        swift_bridgeObjectRelease(a3);
        return (void *)swift_bridgeObjectRelease(v18);
      }
      v14 = v17;
      if (v17)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v13);
        v16 = *(_QWORD *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10);
        v15 = *(_QWORD *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (v16 >= v15 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v15 > 1, v16 + 1, 1);
        v12 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v16, v14);
        specialized Array._endMutation()(v12);
      }
      v10 += v11;
      --v6;
    }
    while (v6);
    swift_bridgeObjectRelease(a3);
    return (void *)v18;
  }
  return result;
}

_QWORD *sub_100A7721C(void (*a1)(uint64_t *__return_ptr, _BYTE *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  _BYTE v26[8];
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  void (*v32)(uint64_t *__return_ptr, _BYTE *);

  v4 = v3;
  v32 = a1;
  v5 = *(_QWORD *)(a3 + 16);
  if (!v5)
    return _swiftEmptyArrayStorage;
  swift_bridgeObjectRetain(a3);
  v7 = (unint64_t *)(a3 + 72);
  v8 = _swiftEmptyArrayStorage;
  do
  {
    v11 = *(v7 - 2);
    v10 = *(v7 - 1);
    v12 = *v7;
    v13 = *(v7 - 4);
    v14 = *(v7 - 3);
    v26[0] = *((_BYTE *)v7 - 40);
    v27 = v13;
    v28 = v14;
    v29 = v11;
    v30 = v10;
    v31 = v12;
    sub_10001BBBC(v14, v11);
    sub_10001BBBC(v10, v12);
    v32(&v22, v26);
    if (v4)
    {
      sub_10001BC14(v14, v11);
      sub_10001BC14(v10, v12);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v8;
    }
    sub_10001BC14(v14, v11);
    sub_10001BC14(v10, v12);
    v15 = v22;
    if (v22 != 3)
    {
      v20 = v24;
      v21 = v23;
      v16 = v25;
      if ((swift_isUniquelyReferenced_nonNull_native(v8) & 1) == 0)
        v8 = sub_1007C8FFC(0, v8[2] + 1, 1, v8);
      v18 = v8[2];
      v17 = v8[3];
      if (v18 >= v17 >> 1)
        v8 = sub_1007C8FFC((_QWORD *)(v17 > 1), v18 + 1, 1, v8);
      v8[2] = v18 + 1;
      v9 = &v8[6 * v18];
      *((_BYTE *)v9 + 32) = v15;
      *(_OWORD *)(v9 + 5) = v21;
      *(_OWORD *)(v9 + 7) = v20;
      v9[9] = v16;
    }
    v7 += 6;
    --v5;
  }
  while (v5);
  swift_bridgeObjectRelease();
  return v8;
}

_QWORD *sub_100A773E4(void (*a1)(char *), uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v29)(char *, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(char *);
  uint64_t v34;
  uint64_t v35;

  v33 = a1;
  v4 = sub_10001A9A8(&qword_10110F130);
  __chkstk_darwin(v4);
  v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = type metadata accessor for SharingCircleSecretValue(0);
  v35 = *(_QWORD *)(v32 - 8);
  v7 = __chkstk_darwin(v32);
  v31 = (uint64_t)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v28 = (uint64_t)&v27 - v9;
  v10 = type metadata accessor for SharingCircleSecret(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_10001A9A8((uint64_t *)&unk_101111620);
  __chkstk_darwin(v14);
  v16 = (char *)&v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = swift_retain();
  v18 = dispatch thunk of _AnySequenceBox._makeIterator()(v17);
  v19 = swift_release();
  v34 = v18;
  dispatch thunk of _AnyIteratorBoxBase.next()(v19);
  v29 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  v30 = v10;
  v20 = v29(v16, 1, v10);
  v21 = _swiftEmptyArrayStorage;
  if (v20 != 1)
  {
    v27 = a2;
    while (1)
    {
      sub_1000126EC((uint64_t)v16, (uint64_t)v13, type metadata accessor for SharingCircleSecret);
      v33(v13);
      if (v2)
        break;
      sub_1000126B0((uint64_t)v13, type metadata accessor for SharingCircleSecret);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v6, 1, v32) == 1)
      {
        v22 = sub_100004048((uint64_t)v6, &qword_10110F130);
      }
      else
      {
        v23 = v28;
        sub_1000126EC((uint64_t)v6, v28, type metadata accessor for SharingCircleSecretValue);
        sub_1000126EC(v23, v31, type metadata accessor for SharingCircleSecretValue);
        if ((swift_isUniquelyReferenced_nonNull_native(v21) & 1) == 0)
          v21 = (_QWORD *)sub_1007CA418(0, v21[2] + 1, 1, (unint64_t)v21);
        v25 = v21[2];
        v24 = v21[3];
        if (v25 >= v24 >> 1)
          v21 = (_QWORD *)sub_1007CA418(v24 > 1, v25 + 1, 1, (unint64_t)v21);
        v21[2] = v25 + 1;
        v22 = sub_1000126EC(v31, (uint64_t)v21+ ((*(unsigned __int8 *)(v35 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v35 + 80))+ *(_QWORD *)(v35 + 72) * v25, type metadata accessor for SharingCircleSecretValue);
      }
      dispatch thunk of _AnyIteratorBoxBase.next()(v22);
      if (v29(v16, 1, v30) == 1)
        goto LABEL_13;
    }
    sub_1000126B0((uint64_t)v13, type metadata accessor for SharingCircleSecret);
    swift_bridgeObjectRelease();
  }
LABEL_13:
  swift_release();
  return v21;
}

void sub_100A7771C(uint64_t (*a1)(uint64_t *), uint64_t a2, uint64_t a3)
{
  sub_100A77774(a1, a2, a3, (uint64_t (*)(uint64_t))type metadata accessor for Service, &qword_101111810, (uint64_t)&unk_100E6C758);
}

void sub_100A77748(uint64_t (*a1)(uint64_t *), uint64_t a2, uint64_t a3)
{
  sub_100A77774(a1, a2, a3, (uint64_t (*)(uint64_t))type metadata accessor for Characteristic, &qword_1011074B0, (uint64_t)&unk_100E50578);
}

void sub_100A77774(uint64_t (*a1)(uint64_t *), uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t), unint64_t *a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  int64_t v33;
  char v34;
  int64_t v35;
  int64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD v40[5];
  uint64_t v41;

  v7 = v6;
  v8 = a3;
  if ((a3 & 0xC000000000000001) != 0)
  {
    if (a3 < 0)
      v13 = a3;
    else
      v13 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v14 = __CocoaSet.makeIterator()(v13);
    v15 = a4(0);
    v16 = sub_100006C64(a5, 255, a4, a6);
    v17 = Set.Iterator.init(_cocoa:)(v40, v14, v15, v16);
    v8 = v40[0];
    v38 = v40[1];
    v18 = v40[2];
    v19 = v40[3];
    v20 = v40[4];
  }
  else
  {
    v21 = -1 << *(_BYTE *)(a3 + 32);
    v38 = a3 + 56;
    v22 = ~v21;
    v23 = -v21;
    if (v23 < 64)
      v24 = ~(-1 << v23);
    else
      v24 = -1;
    v20 = v24 & *(_QWORD *)(a3 + 56);
    swift_bridgeObjectRetain(a3);
    v18 = v22;
    v19 = 0;
  }
  v37 = (unint64_t)(v18 + 64) >> 6;
  if ((v8 & 0x8000000000000000) == 0)
    goto LABEL_14;
LABEL_11:
  v25 = __CocoaSet.Iterator.next()(v17);
  if (!v25)
    goto LABEL_39;
  v26 = v25;
  v39 = v25;
  v27 = a4(0);
  swift_unknownObjectRetain(v26);
  swift_dynamicCast(&v41, &v39, (char *)&type metadata for Swift.AnyObject + 8, v27, 7);
  v28 = v41;
  swift_unknownObjectRelease(v26);
  v29 = v19;
  v30 = v20;
  if (!v28)
    goto LABEL_39;
  while (1)
  {
    v41 = v28;
    v34 = a1(&v41);
    if (v7)
    {
      swift_release();
      goto LABEL_39;
    }
    if ((v34 & 1) != 0)
      goto LABEL_39;
    v17 = (_QWORD *)swift_release();
    v19 = v29;
    v20 = v30;
    if (v8 < 0)
      goto LABEL_11;
LABEL_14:
    if (!v20)
      break;
    v30 = (v20 - 1) & v20;
    v31 = __clz(__rbit64(v20)) | (v19 << 6);
    v29 = v19;
LABEL_27:
    v28 = *(_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * v31);
    swift_retain();
    if (!v28)
      goto LABEL_39;
  }
  v29 = v19 + 1;
  if (__OFADD__(v19, 1))
  {
    __break(1u);
    return;
  }
  if (v29 >= v37)
    goto LABEL_39;
  v32 = *(_QWORD *)(v38 + 8 * v29);
  if (v32)
  {
LABEL_26:
    v30 = (v32 - 1) & v32;
    v31 = __clz(__rbit64(v32)) + (v29 << 6);
    goto LABEL_27;
  }
  v33 = v19 + 2;
  if (v19 + 2 >= v37)
    goto LABEL_39;
  v32 = *(_QWORD *)(v38 + 8 * v33);
  if (v32)
    goto LABEL_25;
  v33 = v19 + 3;
  if (v19 + 3 >= v37)
    goto LABEL_39;
  v32 = *(_QWORD *)(v38 + 8 * v33);
  if (v32)
    goto LABEL_25;
  v33 = v19 + 4;
  if (v19 + 4 >= v37)
    goto LABEL_39;
  v32 = *(_QWORD *)(v38 + 8 * v33);
  if (v32)
  {
LABEL_25:
    v29 = v33;
    goto LABEL_26;
  }
  v29 = v19 + 5;
  if (v19 + 5 >= v37)
    goto LABEL_39;
  v32 = *(_QWORD *)(v38 + 8 * v29);
  if (v32)
    goto LABEL_26;
  v35 = v19 + 6;
  while (v37 != v35)
  {
    v32 = *(_QWORD *)(v38 + 8 * v35++);
    if (v32)
    {
      v29 = v35 - 1;
      goto LABEL_26;
    }
  }
LABEL_39:
  sub_10007CC38(v8);
}

uint64_t sub_100A77A98@<X0>(uint64_t (*a1)(char *)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v7 = type metadata accessor for BeaconKeyManager.IndexInformation(0);
  __chkstk_darwin(v7);
  v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(a2 + 16);
  if (v12)
  {
    v18 = v9;
    v19 = v8;
    v20 = a3;
    v13 = a2 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    v14 = *(_QWORD *)(v9 + 72);
    swift_bridgeObjectRetain(a2);
    while (1)
    {
      sub_10005972C(v13, (uint64_t)v11, type metadata accessor for BeaconKeyManager.IndexInformation);
      v15 = a1(v11);
      if (v3)
      {
        sub_1000126B0((uint64_t)v11, type metadata accessor for BeaconKeyManager.IndexInformation);
        return swift_bridgeObjectRelease();
      }
      if ((v15 & 1) != 0)
        break;
      sub_1000126B0((uint64_t)v11, type metadata accessor for BeaconKeyManager.IndexInformation);
      v13 += v14;
      if (!--v12)
      {
        swift_bridgeObjectRelease();
        v16 = 1;
        a3 = v20;
        goto LABEL_10;
      }
    }
    swift_bridgeObjectRelease();
    a3 = v20;
    sub_1000126EC((uint64_t)v11, v20, type metadata accessor for BeaconKeyManager.IndexInformation);
    v16 = 0;
LABEL_10:
    v9 = v18;
    v8 = v19;
  }
  else
  {
    v16 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a3, v16, 1, v8);
}

void sub_100A77C0C(uint64_t (*a1)(uint64_t)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  __n128 v20;
  int64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  unint64_t i;
  BOOL v26;
  int64_t v27;
  unint64_t v28;
  int64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  void (*v33)(char *, unint64_t, uint64_t, __n128);
  uint64_t v34;
  char *v35;
  void (*v36)(char *, char *, uint64_t);
  uint64_t v37;
  void (*v38)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int64_t v51;
  uint64_t v52;
  uint64_t (*v53)(uint64_t);
  char *v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int64_t v63;
  uint64_t v64;

  v4 = v3;
  v53 = a1;
  v49 = a3;
  v6 = sub_10001A9A8(&qword_1010EE170);
  v59 = *(_QWORD *)(v6 - 8);
  v60 = v6;
  __chkstk_darwin(v6);
  v52 = (uint64_t)&v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  v57 = v8;
  v58 = v9;
  v10 = __chkstk_darwin(v8);
  v56 = (char *)&v48 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v54 = (char *)&v48 - v12;
  v13 = sub_10001A9A8(&qword_1010EE178);
  __chkstk_darwin(v13);
  v15 = (char *)&v48 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(_QWORD *)(a2 + 64);
  v50 = a2 + 64;
  v17 = 1 << *(_BYTE *)(a2 + 32);
  v18 = -1;
  if (v17 < 64)
    v18 = ~(-1 << v17);
  v19 = v18 & v16;
  v51 = (unint64_t)(v17 + 63) >> 6;
  v61 = a2;
  v20 = swift_bridgeObjectRetain(a2);
  v21 = 0;
  v55 = v15;
  v22 = v54;
  v23 = v56;
  v24 = v57;
  if (!v19)
    goto LABEL_5;
LABEL_4:
  v64 = v4;
  v62 = (v19 - 1) & v19;
  v63 = v21;
  for (i = __clz(__rbit64(v19)) | (v21 << 6); ; i = __clz(__rbit64(v28)) + (v27 << 6))
  {
    v30 = v61;
    v31 = v58;
    v32 = *(_QWORD *)(v58 + 72) * i;
    v33 = *(void (**)(char *, unint64_t, uint64_t, __n128))(v58 + 16);
    v33(v22, *(_QWORD *)(v61 + 48) + v32, v24, v20);
    ((void (*)(char *, unint64_t, uint64_t))v33)(v23, *(_QWORD *)(v30 + 56) + v32, v24);
    v34 = v60;
    v15 = v55;
    v35 = &v55[*(int *)(v60 + 48)];
    v36 = *(void (**)(char *, char *, uint64_t))(v31 + 32);
    v36(v55, v22, v24);
    v36(v35, v23, v24);
    v37 = v59;
    v38 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v59 + 56);
    v38(v15, 0, 1, v34);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v37 + 48))(v15, 1, v34) == 1)
    {
      swift_release();
      v42 = v60;
      v43 = v49;
      goto LABEL_31;
    }
    v39 = v52;
    sub_100005CF0((uint64_t)v15, v52, &qword_1010EE170);
    v40 = v64;
    v41 = v53(v39);
    v4 = v40;
    if (v40)
    {
      sub_100004048(v39, &qword_1010EE170);
      swift_release();
      return;
    }
    if ((v41 & 1) != 0)
    {
      swift_release();
      v44 = v49;
      sub_100005CF0(v39, v49, &qword_1010EE170);
      v45 = v44;
      v46 = 0;
      v47 = v60;
LABEL_32:
      v38((char *)v45, v46, 1, v47);
      return;
    }
    sub_100004048(v39, &qword_1010EE170);
    v19 = v62;
    v21 = v63;
    if (v62)
      goto LABEL_4;
LABEL_5:
    v26 = __OFADD__(v21, 1);
    v27 = v21 + 1;
    if (v26)
      break;
    if (v27 >= v51)
      goto LABEL_30;
    v28 = *(_QWORD *)(v50 + 8 * v27);
    if (!v28)
    {
      v29 = v27 + 1;
      if (v27 + 1 >= v51)
        goto LABEL_30;
      v28 = *(_QWORD *)(v50 + 8 * v29);
      if (v28)
        goto LABEL_16;
      v29 = v27 + 2;
      if (v27 + 2 >= v51)
        goto LABEL_30;
      v28 = *(_QWORD *)(v50 + 8 * v29);
      if (v28)
        goto LABEL_16;
      v29 = v27 + 3;
      if (v27 + 3 >= v51)
        goto LABEL_30;
      v28 = *(_QWORD *)(v50 + 8 * v29);
      if (v28)
      {
LABEL_16:
        v27 = v29;
        goto LABEL_17;
      }
      v29 = v27 + 4;
      if (v27 + 4 < v51)
      {
        v28 = *(_QWORD *)(v50 + 8 * v29);
        if (!v28)
        {
          while (1)
          {
            v27 = v29 + 1;
            if (__OFADD__(v29, 1))
              goto LABEL_34;
            if (v27 >= v51)
              goto LABEL_30;
            v28 = *(_QWORD *)(v50 + 8 * v27);
            ++v29;
            if (v28)
              goto LABEL_17;
          }
        }
        goto LABEL_16;
      }
LABEL_30:
      v42 = v60;
      v43 = v49;
      v38 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v59 + 56);
      ((void (*)(char *, uint64_t, uint64_t, uint64_t, __n128))v38)(v15, 1, 1, v60, v20);
      swift_release();
LABEL_31:
      v45 = v43;
      v46 = 1;
      v47 = v42;
      goto LABEL_32;
    }
LABEL_17:
    v64 = v4;
    v62 = (v28 - 1) & v28;
    v63 = v27;
  }
  __break(1u);
LABEL_34:
  __break(1u);
}

void sub_100A7802C(uint64_t (*a1)(char *)@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  unint64_t i;
  unint64_t v19;
  int64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int64_t v28;
  uint64_t v29;

  v26 = a3;
  v25 = type metadata accessor for BeaconStatus(0);
  v29 = *(_QWORD *)(v25 - 8);
  v6 = __chkstk_darwin(v25);
  v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v25 - v9;
  v11 = *(_QWORD *)(a2 + 56);
  v27 = a2 + 56;
  v12 = 1 << *(_BYTE *)(a2 + 32);
  v13 = -1;
  if (v12 < 64)
    v13 = ~(-1 << v12);
  v14 = v13 & v11;
  v28 = (unint64_t)(v12 + 63) >> 6;
  swift_bridgeObjectRetain(a2);
  v15 = 0;
  if (!v14)
    goto LABEL_5;
LABEL_4:
  v16 = __clz(__rbit64(v14));
  v14 &= v14 - 1;
  for (i = v16 | (v15 << 6); ; i = __clz(__rbit64(v19)) + (v15 << 6))
  {
    sub_10005972C(*(_QWORD *)(a2 + 48) + *(_QWORD *)(v29 + 72) * i, (uint64_t)v10, type metadata accessor for BeaconStatus);
    sub_1000126EC((uint64_t)v10, (uint64_t)v8, type metadata accessor for BeaconStatus);
    v21 = a1(v8);
    if (v3)
    {
      sub_1000126B0((uint64_t)v8, type metadata accessor for BeaconStatus);
      swift_release(a2);
      return;
    }
    if ((v21 & 1) != 0)
    {
      swift_release(a2);
      v22 = v26;
      sub_1000126EC((uint64_t)v8, v26, type metadata accessor for BeaconStatus);
      v23 = 0;
      v24 = v25;
      goto LABEL_29;
    }
    sub_1000126B0((uint64_t)v8, type metadata accessor for BeaconStatus);
    if (v14)
      goto LABEL_4;
LABEL_5:
    if (__OFADD__(v15++, 1))
      break;
    if (v15 >= v28)
      goto LABEL_28;
    v19 = *(_QWORD *)(v27 + 8 * v15);
    if (!v19)
    {
      v20 = v15 + 1;
      if (v15 + 1 >= v28)
        goto LABEL_28;
      v19 = *(_QWORD *)(v27 + 8 * v20);
      if (v19)
        goto LABEL_16;
      v20 = v15 + 2;
      if (v15 + 2 >= v28)
        goto LABEL_28;
      v19 = *(_QWORD *)(v27 + 8 * v20);
      if (v19)
        goto LABEL_16;
      v20 = v15 + 3;
      if (v15 + 3 >= v28)
        goto LABEL_28;
      v19 = *(_QWORD *)(v27 + 8 * v20);
      if (v19)
      {
LABEL_16:
        v15 = v20;
        goto LABEL_17;
      }
      v20 = v15 + 4;
      if (v15 + 4 < v28)
      {
        v19 = *(_QWORD *)(v27 + 8 * v20);
        if (!v19)
        {
          while (1)
          {
            v15 = v20 + 1;
            if (__OFADD__(v20, 1))
              goto LABEL_31;
            if (v15 >= v28)
              goto LABEL_28;
            v19 = *(_QWORD *)(v27 + 8 * v15);
            ++v20;
            if (v19)
              goto LABEL_17;
          }
        }
        goto LABEL_16;
      }
LABEL_28:
      v24 = v25;
      v22 = v26;
      swift_release(a2);
      v23 = 1;
LABEL_29:
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v29 + 56))(v22, v23, 1, v24);
      return;
    }
LABEL_17:
    v14 = (v19 - 1) & v19;
  }
  __break(1u);
LABEL_31:
  __break(1u);
}

void sub_100A782E4(uint64_t (*a1)(_QWORD *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  id v22;
  int64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  int64_t v27;
  uint64_t v28;
  void *v29;
  char v30;
  int64_t v31;
  char *v32;
  int64_t v33;
  uint64_t v34;
  _QWORD v36[2];
  uint64_t v37;

  v4 = v3;
  if ((a3 & 0xC000000000000001) != 0)
  {
    if (a3 < 0)
      v6 = a3;
    else
      v6 = a3 & 0xFFFFFFFFFFFFFF8;
    v34 = 0;
    v7 = 0;
    v8 = 0;
    v9 = __CocoaDictionary.makeIterator()(v6) | 0x8000000000000000;
  }
  else
  {
    v10 = -1 << *(_BYTE *)(a3 + 32);
    v7 = ~v10;
    v34 = a3 + 64;
    v11 = -v10;
    if (v11 < 64)
      v12 = ~(-1 << v11);
    else
      v12 = -1;
    v8 = v12 & *(_QWORD *)(a3 + 64);
    v9 = a3;
  }
  v13 = swift_bridgeObjectRetain(a3);
  v14 = 0;
  v33 = (unint64_t)(v7 + 64) >> 6;
  v32 = (char *)&type metadata for Swift.AnyObject + 8;
  if ((v9 & 0x8000000000000000) == 0)
    goto LABEL_14;
LABEL_11:
  v15 = __CocoaDictionary.Iterator.next()(v13);
  v17 = v15;
  if (!v15)
    goto LABEL_39;
  v18 = v16;
  v37 = v15;
  v19 = sub_10000F4A0(0, (unint64_t *)&qword_101111D20, NRDevice_ptr);
  swift_unknownObjectRetain(v17);
  swift_dynamicCast(v36, &v37, v32, v19, 7);
  v20 = (id)v36[0];
  swift_unknownObjectRelease(v17);
  v37 = v18;
  v21 = sub_10000F4A0(0, &qword_101111D28, NRDeviceMonitor_ptr);
  swift_unknownObjectRetain(v18);
  swift_dynamicCast(v36, &v37, v32, v21, 7);
  v22 = (id)v36[0];
  swift_unknownObjectRelease(v18);
  v23 = v14;
  v24 = v8;
  if (!v20)
    goto LABEL_39;
  while (1)
  {
    v36[0] = v20;
    v36[1] = v22;
    v30 = a1(v36);
    if (v4)
    {

      sub_10007CC38(v9);
      return;
    }
    if ((v30 & 1) != 0)
      goto LABEL_39;

    v14 = v23;
    v8 = v24;
    if ((v9 & 0x8000000000000000) != 0)
      goto LABEL_11;
LABEL_14:
    if (!v8)
      break;
    v24 = (v8 - 1) & v8;
    v25 = __clz(__rbit64(v8)) | (v14 << 6);
    v23 = v14;
LABEL_27:
    v28 = 8 * v25;
    v29 = *(void **)(*(_QWORD *)(v9 + 56) + v28);
    v20 = *(id *)(*(_QWORD *)(v9 + 48) + v28);
    v22 = v29;
    if (!v20)
      goto LABEL_39;
  }
  v23 = v14 + 1;
  if (__OFADD__(v14, 1))
  {
    __break(1u);
    return;
  }
  if (v23 >= v33)
    goto LABEL_39;
  v26 = *(_QWORD *)(v34 + 8 * v23);
  if (v26)
  {
LABEL_26:
    v24 = (v26 - 1) & v26;
    v25 = __clz(__rbit64(v26)) + (v23 << 6);
    goto LABEL_27;
  }
  v27 = v14 + 2;
  if (v14 + 2 >= v33)
    goto LABEL_39;
  v26 = *(_QWORD *)(v34 + 8 * v27);
  if (v26)
    goto LABEL_25;
  v27 = v14 + 3;
  if (v14 + 3 >= v33)
    goto LABEL_39;
  v26 = *(_QWORD *)(v34 + 8 * v27);
  if (v26)
    goto LABEL_25;
  v27 = v14 + 4;
  if (v14 + 4 >= v33)
    goto LABEL_39;
  v26 = *(_QWORD *)(v34 + 8 * v27);
  if (v26)
  {
LABEL_25:
    v23 = v27;
    goto LABEL_26;
  }
  v23 = v14 + 5;
  if (v14 + 5 >= v33)
    goto LABEL_39;
  v26 = *(_QWORD *)(v34 + 8 * v23);
  if (v26)
    goto LABEL_26;
  v31 = v14 + 6;
  while (v33 != v31)
  {
    v26 = *(_QWORD *)(v34 + 8 * v31++);
    if (v26)
    {
      v23 = v31 - 1;
      goto LABEL_26;
    }
  }
LABEL_39:
  sub_10007CC38(v9);
}

uint64_t sub_100A78648(uint64_t (*a1)(uint64_t *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  unint64_t i;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;

  v6 = a3 + 56;
  v7 = 1 << *(_BYTE *)(a3 + 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & *(_QWORD *)(a3 + 56);
  v10 = (unint64_t)(v7 + 63) >> 6;
  result = swift_bridgeObjectRetain(a3);
  v12 = 0;
  if (!v9)
    goto LABEL_5;
LABEL_4:
  v13 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  for (i = v13 | (v12 << 6); ; i = __clz(__rbit64(v16)) + (v12 << 6))
  {
    v18 = *(_QWORD *)(*(_QWORD *)(a3 + 48) + 8 * i);
    v20 = v18;
    swift_bridgeObjectRetain(v18);
    v19 = a1(&v20);
    if (v3)
    {
      swift_release(a3);
      swift_bridgeObjectRelease(v18);
      return v18;
    }
    if ((v19 & 1) != 0)
    {
      swift_release(a3);
      return v18;
    }
    result = swift_bridgeObjectRelease(v18);
    if (v9)
      goto LABEL_4;
LABEL_5:
    if (__OFADD__(v12++, 1))
      break;
    if (v12 >= v10)
      goto LABEL_28;
    v16 = *(_QWORD *)(v6 + 8 * v12);
    if (!v16)
    {
      v17 = v12 + 1;
      if (v12 + 1 >= v10)
        goto LABEL_28;
      v16 = *(_QWORD *)(v6 + 8 * v17);
      if (v16)
        goto LABEL_16;
      v17 = v12 + 2;
      if (v12 + 2 >= v10)
        goto LABEL_28;
      v16 = *(_QWORD *)(v6 + 8 * v17);
      if (v16)
        goto LABEL_16;
      v17 = v12 + 3;
      if (v12 + 3 >= v10)
        goto LABEL_28;
      v16 = *(_QWORD *)(v6 + 8 * v17);
      if (v16)
      {
LABEL_16:
        v12 = v17;
        goto LABEL_17;
      }
      v17 = v12 + 4;
      if (v12 + 4 < v10)
      {
        v16 = *(_QWORD *)(v6 + 8 * v17);
        if (!v16)
        {
          while (1)
          {
            v12 = v17 + 1;
            if (__OFADD__(v17, 1))
              goto LABEL_31;
            if (v12 >= v10)
              goto LABEL_28;
            v16 = *(_QWORD *)(v6 + 8 * v12);
            ++v17;
            if (v16)
              goto LABEL_17;
          }
        }
        goto LABEL_16;
      }
LABEL_28:
      swift_release(a3);
      return 0;
    }
LABEL_17:
    v9 = (v16 - 1) & v16;
  }
  __break(1u);
LABEL_31:
  __break(1u);
  return result;
}

void sub_100A78800(uint64_t (*a1)(uint64_t)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t (*v3)(_QWORD, _QWORD, _QWORD);
  uint64_t (*v4)(_QWORD, _QWORD, _QWORD);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t (*v41)(_QWORD, _QWORD, _QWORD);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int (*v45)(char *, uint64_t, uint64_t);
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  void *v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t (*v66)(_QWORD, _QWORD, _QWORD);
  char v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  unsigned int (*v74)(char *, uint64_t, uint64_t);
  uint64_t (*v75)(uint64_t);
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t (*v87)(_QWORD, _QWORD, _QWORD);
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;

  v4 = v3;
  v75 = a1;
  v76 = a2;
  v70 = a3;
  v5 = type metadata accessor for MemberSharingCircle(0);
  v91 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v79 = (uint64_t)&v70 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10001A9A8(&qword_1010FBA40);
  __chkstk_darwin(v7);
  v86 = (char *)&v70 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v95 = type metadata accessor for URL(0);
  v94 = *(_QWORD *)(v95 - 8);
  __chkstk_darwin(v95);
  v82 = (char *)&v70 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10001A9A8((uint64_t *)&unk_1010F77A0);
  __chkstk_darwin(v10);
  v12 = (char *)&v70 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v93 = type metadata accessor for DirectorySequence(0);
  v90 = *(_QWORD *)(v93 - 8);
  __chkstk_darwin(v93);
  v92 = (char *)&v70 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_10001A9A8((uint64_t *)&unk_101111430);
  v15 = __chkstk_darwin(v14);
  v81 = (uint64_t)&v70 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v89 = (uint64_t)&v70 - v17;
  v18 = sub_10001A9A8(&qword_10110B460);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = __chkstk_darwin(v18);
  v85 = (uint64_t)&v70 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v84 = (uint64_t)&v70 - v22;
  v23 = sub_10001A9A8(&qword_101105800);
  __chkstk_darwin(v23);
  v25 = (char *)&v70 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = sub_10001A9A8((uint64_t *)&unk_1011057F0);
  v27 = *(_QWORD *)(v26 - 8);
  __chkstk_darwin(v26);
  v83 = (uint64_t)&v70 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = sub_10001A9A8((uint64_t *)&unk_101111440);
  __chkstk_darwin(v29);
  v77 = (uint64_t)&v70 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = sub_10001A9A8(&qword_1010FB1F0);
  __chkstk_darwin(v31);
  v33 = (char *)&v70 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000F9B8((uint64_t)v87, (uint64_t)v33, &qword_1010FB1F0);
  v80 = v33;
  v34 = (uint64_t)v33;
  v35 = v26;
  sub_10000F9B8(v34, (uint64_t)v25, &qword_101105800);
  v71 = v27;
  v74 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48);
  if (v74(v25, 1, v26) == 1)
  {
    v36 = v91;
LABEL_3:
    sub_100004048((uint64_t)v25, &qword_101105800);
    v37 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v36 + 56);
    v37(v77, 1, 1, v5);
    goto LABEL_4;
  }
  v36 = v91;
  v73 = v5;
  v88 = v19;
  v72 = v25;
  v78 = v26;
  while (1)
  {
    v41 = v4;
    v42 = v83;
    sub_100005CF0((uint64_t)v25, v83, (uint64_t *)&unk_1011057F0);
    v43 = v42 + *(int *)(v35 + 40);
    sub_10000F9B8(v43, (uint64_t)v12, (uint64_t *)&unk_1010F77A0);
    v44 = v90;
    v45 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v90 + 48);
    if (v45(v12, 1, v93) != 1)
      break;
LABEL_16:
    v87 = v41;
    sub_100004048((uint64_t)v12, (uint64_t *)&unk_1010F77A0);
    v53 = v89;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v88 + 56))(v89, 1, 1, v18);
LABEL_18:
    sub_100004048(v83, (uint64_t *)&unk_1011057F0);
    sub_100004048(v53, (uint64_t *)&unk_101111430);
    v61 = (uint64_t)v80;
    sub_100004048((uint64_t)v80, &qword_101105800);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v71 + 56))(v61, 1, 1, v78);
    v37 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v36 + 56);
    v62 = v77;
    v63 = v73;
    v37(v77, 1, 1, v73);
LABEL_19:
    v25 = v72;
    v64 = v63;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v36 + 48))(v62, 1, v63) == 1)
    {
      v5 = v63;
LABEL_4:
      sub_100004048((uint64_t)v80, &qword_1010FB1F0);
      v38 = v70;
      v39 = 1;
      v40 = v5;
LABEL_5:
      v37(v38, v39, 1, v40);
      return;
    }
    v65 = v79;
    sub_1000126EC(v62, v79, type metadata accessor for MemberSharingCircle);
    v66 = v87;
    v67 = v75(v65);
    v4 = v66;
    if (v66)
    {
      sub_1000126B0(v79, type metadata accessor for MemberSharingCircle);
      sub_100004048((uint64_t)v80, &qword_1010FB1F0);
      return;
    }
    if ((v67 & 1) != 0)
    {
      sub_100004048((uint64_t)v80, &qword_1010FB1F0);
      v69 = v70;
      sub_1000126EC(v79, v70, type metadata accessor for MemberSharingCircle);
      v38 = v69;
      v39 = 0;
      v40 = v64;
      goto LABEL_5;
    }
    sub_1000126B0(v79, type metadata accessor for MemberSharingCircle);
    sub_10000F9B8((uint64_t)v80, (uint64_t)v25, &qword_101105800);
    v35 = v78;
    v68 = v74(v25, 1, v78);
    v36 = v91;
    v5 = v64;
    if (v68 == 1)
      goto LABEL_3;
  }
  v87 = *(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v44 + 32);
  v46 = v93;
  while (1)
  {
    v47 = v92;
    v48 = v12;
    v49 = v87(v92, v12, v46);
    v50 = (uint64_t)v86;
    DirectorySequence.next()(v49);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v94 + 48))(v50, 1, v95) == 1)
    {
      v51 = v90;
      (*(void (**)(char *, uint64_t))(v90 + 8))(v47, v46);
      sub_100004048(v50, &qword_1010FBA40);
      sub_100004048(v43, (uint64_t *)&unk_1010F77A0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v51 + 56))(v43, 1, 1, v46);
      v52 = v88;
      v53 = v89;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v88 + 56))(v89, 1, 1, v18);
      v12 = v48;
      goto LABEL_13;
    }
    v54 = v82;
    (*(void (**)(char *, uint64_t, uint64_t))(v94 + 32))(v82, v50, v95);
    v55 = objc_autoreleasePoolPush();
    v56 = v81;
    sub_100A7F310((void (*)(_QWORD))v54, v83, (uint64_t *)&unk_101111440, type metadata accessor for MemberSharingCircle, (uint64_t *)&unk_1011057F0, &qword_10110B4A0, (uint64_t)sub_100A83C7C, &qword_10110B460, v81);
    if (v41)
      break;
    v41 = 0;
    objc_autoreleasePoolPop(v55);
    (*(void (**)(char *, uint64_t))(v90 + 8))(v92, v93);
    (*(void (**)(char *, uint64_t))(v94 + 8))(v54, v95);
    v53 = v89;
    sub_100005CF0(v56, v89, (uint64_t *)&unk_101111430);
    v12 = v48;
    v52 = v88;
LABEL_13:
    v57 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v52 + 48))(v53, 1, v18);
    v36 = v91;
    if (v57 == 1)
    {
      v87 = v41;
      goto LABEL_18;
    }
    v58 = v84;
    sub_100005CF0(v53, v84, &qword_10110B460);
    v59 = v58;
    v60 = v85;
    sub_100005CF0(v59, v85, &qword_10110B460);
    if (swift_getEnumCaseMultiPayload(v60, v18) != 1)
    {
      sub_100004048(v83, (uint64_t *)&unk_1011057F0);
      v62 = v77;
      sub_1000126EC(v60, v77, type metadata accessor for MemberSharingCircle);
      v37 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v36 + 56);
      v63 = v73;
      v37(v62, 0, 1, v73);
      v87 = v41;
      goto LABEL_19;
    }
    sub_100004048(v60, &qword_10110B460);
    sub_10000F9B8(v43, (uint64_t)v12, (uint64_t *)&unk_1010F77A0);
    v46 = v93;
    if (v45(v12, 1, v93) == 1)
      goto LABEL_16;
  }
  objc_autoreleasePoolPop(v55);
  __break(1u);
}

unint64_t sub_100A790A4(uint64_t a1)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  int8x16_t v5;
  uint64x2_t *v6;
  unint64_t v7;
  int8x16_t v8;
  int8x16_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(a1 + 32);
  v3 = v1 - 1;
  if (v1 != 1)
  {
    if (v1 >= 5)
    {
      v4 = v3 & 0xFFFFFFFFFFFFFFFCLL | 1;
      v5 = (int8x16_t)vdupq_n_s64(v2);
      v6 = (uint64x2_t *)(a1 + 56);
      v7 = v3 & 0xFFFFFFFFFFFFFFFCLL;
      v8 = v5;
      do
      {
        v5 = vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v5, v6[-1]), v5, (int8x16_t)v6[-1]);
        v8 = vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v8, *v6), v8, *(int8x16_t *)v6);
        v6 += 2;
        v7 -= 4;
      }
      while (v7);
      v9 = vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v5, (uint64x2_t)v8), v5, v8);
      v10 = vextq_s8(v9, v9, 8uLL).u64[0];
      v2 = (unint64_t)vbsl_s8((int8x8_t)vcgtd_u64(v9.u64[0], v10), *(int8x8_t *)v9.i8, (int8x8_t)v10);
      if (v3 == (v3 & 0xFFFFFFFFFFFFFFFCLL))
        return v2;
    }
    else
    {
      v4 = 1;
    }
    v11 = v1 - v4;
    v12 = (unint64_t *)(a1 + 8 * v4 + 32);
    do
    {
      v14 = *v12++;
      v13 = v14;
      if (v2 <= v14)
        v2 = v13;
      --v11;
    }
    while (v11);
  }
  return v2;
}

uint64_t sub_100A79158@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t, uint64_t, uint64_t);
  unsigned int (*v19)(char *, uint64_t, uint64_t);
  void (*v20)(char *, char *, uint64_t);
  __n128 v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  unint64_t v27;
  uint64_t v28;
  char v29;
  void (*v30)(char *, uint64_t);
  uint64_t v31;
  char *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(char *, unint64_t, uint64_t);

  v4 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v31 - v8;
  v10 = type metadata accessor for Date(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v16 = (char *)&v31 - v15;
  v17 = *(_QWORD *)(a1 + 16);
  if (!v17)
  {
    v18 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56);
    v18(v9, 1, 1, v10);
    goto LABEL_7;
  }
  v33 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  v36 = *(void (**)(char *, unint64_t, uint64_t))(v11 + 16);
  v36(v9, a1 + v33, v10);
  v34 = a1;
  v18 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56);
  v18(v9, 0, 1, v10);
  v19 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
  if (v19(v9, 1, v10) == 1)
  {
LABEL_7:
    sub_100004048((uint64_t)v9, (uint64_t *)&unk_1010EA690);
    v24 = a2;
    v25 = 1;
    return ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v18)(v24, v25, 1, v10);
  }
  v32 = a2;
  v20 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
  v20(v16, v9, v10);
  v21 = swift_bridgeObjectRetain(v34);
  v22 = v17 - 1;
  if (v22)
  {
    v35 = *(_QWORD *)(v11 + 72);
    v27 = v34 + v35 + v33;
    while (1)
    {
      ((void (*)(char *, unint64_t, uint64_t, __n128))v36)(v7, v27, v10, v21);
      v18(v7, 0, 1, v10);
      if (v19(v7, 1, v10) == 1)
        break;
      v20(v14, v7, v10);
      v28 = sub_100006C64((unint64_t *)&qword_1010F4820, 255, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
      v29 = dispatch thunk of static Comparable.< infix(_:_:)(v16, v14, v10, v28);
      v30 = *(void (**)(char *, uint64_t))(v11 + 8);
      if ((v29 & 1) != 0)
      {
        v30(v16, v10);
        v20(v16, v14, v10);
      }
      else
      {
        v30(v14, v10);
      }
      v27 += v35;
      if (!--v22)
        goto LABEL_4;
    }
  }
  else
  {
LABEL_4:
    ((void (*)(char *, uint64_t, uint64_t, uint64_t, __n128))v18)(v7, 1, 1, v10, v21);
  }
  swift_bridgeObjectRelease();
  sub_100004048((uint64_t)v7, (uint64_t *)&unk_1010EA690);
  v23 = v32;
  v20(v32, v16, v10);
  v24 = v23;
  v25 = 0;
  return ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v18)(v24, v25, 1, v10);
}

uint64_t sub_100A79444@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v4 = type metadata accessor for BeaconEstimatedLocation(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v17 - v9;
  v11 = *(_QWORD *)(a1 + 16);
  if (!v11)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 56))(a2, 1, 1, v4);
  v12 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  sub_10005972C(a1 + v12, (uint64_t)&v17 - v9, type metadata accessor for BeaconEstimatedLocation);
  swift_bridgeObjectRetain(a1);
  v13 = v11 - 1;
  if (v11 != 1)
  {
    v15 = *(_QWORD *)(v5 + 72);
    v16 = a1 + v15 + v12;
    do
    {
      sub_10005972C(v16, (uint64_t)v8, type metadata accessor for BeaconEstimatedLocation);
      if ((static Date.< infix(_:_:)(&v10[*(int *)(v4 + 40)], &v8[*(int *)(v4 + 40)]) & 1) != 0)
      {
        sub_1000126B0((uint64_t)v10, type metadata accessor for BeaconEstimatedLocation);
        sub_1000126EC((uint64_t)v8, (uint64_t)v10, type metadata accessor for BeaconEstimatedLocation);
      }
      else
      {
        sub_1000126B0((uint64_t)v8, type metadata accessor for BeaconEstimatedLocation);
      }
      v16 += v15;
      --v13;
    }
    while (v13);
  }
  swift_bridgeObjectRelease();
  sub_1000126EC((uint64_t)v10, a2, type metadata accessor for BeaconEstimatedLocation);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v5 + 56))(a2, 0, 1, v4);
}

uint64_t sub_100A795F0(uint64_t result)
{
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v1 = result + 64;
  v2 = *(_BYTE *)(result + 32);
  v3 = 1 << v2;
  v4 = -1;
  if (1 << v2 < 64)
    v4 = ~(-1 << (1 << v2));
  v5 = v4 & *(_QWORD *)(result + 64);
  if (v5)
  {
    v6 = 0;
    v7 = __clz(__rbit64(v5));
    v8 = (v5 - 1) & v5;
    v9 = (unint64_t)(v3 + 63) >> 6;
  }
  else
  {
    LODWORD(v6) = v2 & 0x3F;
    if (v6 <= 6)
      return 0;
    v9 = (unint64_t)(v3 + 63) >> 6;
    v17 = *(_QWORD *)(result + 72);
    if (v17)
    {
      v6 = 1;
    }
    else
    {
      if (v6 < 8)
        return 0;
      v17 = *(_QWORD *)(result + 80);
      if (v17)
      {
        v6 = 2;
      }
      else
      {
        v17 = *(_QWORD *)(result + 88);
        if (v17)
        {
          v6 = 3;
        }
        else
        {
LABEL_37:
          if (v6 < 9)
            return 0;
          v17 = *(_QWORD *)(result + 96);
          if (v17)
          {
            v6 = 4;
          }
          else
          {
            v17 = *(_QWORD *)(result + 104);
            if (!v17)
              goto LABEL_43;
            v6 = 5;
          }
        }
      }
    }
LABEL_30:
    v8 = (v17 - 1) & v17;
    v7 = __clz(__rbit64(v17)) + (v6 << 6);
  }
  v10 = *(_QWORD *)(result + 56);
  result = *(_QWORD *)(v10 + 8 * v7);
  while (v8)
  {
    v11 = __clz(__rbit64(v8));
    v8 &= v8 - 1;
    v12 = v11 | (v6 << 6);
LABEL_7:
    v13 = *(_QWORD *)(v10 + 8 * v12);
    if (result <= v13)
      result = v13;
  }
  v14 = v6 + 1;
  if (__OFADD__(v6, 1))
  {
    __break(1u);
    goto LABEL_37;
  }
  if (v14 >= v9)
    return result;
  v15 = *(_QWORD *)(v1 + 8 * v14);
  ++v6;
  if (v15)
    goto LABEL_25;
  v6 = v14 + 1;
  if (v14 + 1 >= v9)
    return result;
  v15 = *(_QWORD *)(v1 + 8 * v6);
  if (v15)
    goto LABEL_25;
  v6 = v14 + 2;
  if (v14 + 2 >= v9)
    return result;
  v15 = *(_QWORD *)(v1 + 8 * v6);
  if (v15)
    goto LABEL_25;
  v6 = v14 + 3;
  if (v14 + 3 >= v9)
    return result;
  v15 = *(_QWORD *)(v1 + 8 * v6);
  if (v15)
  {
LABEL_25:
    v8 = (v15 - 1) & v15;
    v12 = __clz(__rbit64(v15)) + (v6 << 6);
    goto LABEL_7;
  }
  v16 = v14 + 4;
  if (v16 >= v9)
    return result;
  v15 = *(_QWORD *)(v1 + 8 * v16);
  if (v15)
  {
    v6 = v16;
    goto LABEL_25;
  }
  while (1)
  {
    v6 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v6 >= v9)
      return result;
    v15 = *(_QWORD *)(v1 + 8 * v6);
    ++v16;
    if (v15)
      goto LABEL_25;
  }
  __break(1u);
LABEL_43:
  v18 = 0;
  v19 = 6;
  if (v9 > 6)
    v19 = v9;
  v20 = v19 - 6;
  while (v20 != v18)
  {
    v17 = *(_QWORD *)(result + 112 + 8 * v18++);
    if (v17)
    {
      v6 = v18 + 5;
      goto LABEL_30;
    }
  }
  return 0;
}

uint64_t sub_100A797E8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v4 = type metadata accessor for BeaconObservation(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v17 - v9;
  v11 = *(_QWORD *)(a1 + 16);
  if (!v11)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 56))(a2, 1, 1, v4);
  v12 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  sub_10005972C(a1 + v12, (uint64_t)&v17 - v9, type metadata accessor for BeaconObservation);
  swift_bridgeObjectRetain(a1);
  v13 = v11 - 1;
  if (v11 != 1)
  {
    v15 = *(_QWORD *)(v5 + 72);
    v16 = a1 + v15 + v12;
    do
    {
      sub_10005972C(v16, (uint64_t)v8, type metadata accessor for BeaconObservation);
      if ((static Date.< infix(_:_:)(&v10[*(int *)(v4 + 20)], &v8[*(int *)(v4 + 20)]) & 1) != 0)
      {
        sub_1000126B0((uint64_t)v10, type metadata accessor for BeaconObservation);
        sub_1000126EC((uint64_t)v8, (uint64_t)v10, type metadata accessor for BeaconObservation);
      }
      else
      {
        sub_1000126B0((uint64_t)v8, type metadata accessor for BeaconObservation);
      }
      v16 += v15;
      --v13;
    }
    while (v13);
  }
  swift_bridgeObjectRelease();
  sub_1000126EC((uint64_t)v10, a2, type metadata accessor for BeaconObservation);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v5 + 56))(a2, 0, 1, v4);
}

void sub_100A79994(uint64_t (*a1)(uint64_t), uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int (*v43)(char *, uint64_t, uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  void (*v51)(_QWORD);
  void *v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int EnumCaseMultiPayload;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  _QWORD *v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  unsigned int (*v72)(char *, uint64_t, uint64_t);
  uint64_t v73;
  uint64_t v74;
  uint64_t (*v75)(uint64_t);
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  void (*v82)(_QWORD);
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  uint64_t (*v92)(char *, char *, uint64_t);
  unsigned int (*v93)(char *, uint64_t, uint64_t);
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  _QWORD *v100;

  v3 = v2;
  v76 = a2;
  v75 = a1;
  v4 = sub_10001A9A8(&qword_1010FBA40);
  __chkstk_darwin(v4);
  v98 = (char *)&v69 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v91 = type metadata accessor for URL(0);
  v6 = *(_QWORD *)(v91 - 8);
  __chkstk_darwin(v91);
  v8 = (char *)&v69 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10001A9A8((uint64_t *)&unk_1010F77A0);
  __chkstk_darwin(v9);
  v11 = (char *)&v69 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v99 = type metadata accessor for DirectorySequence(0);
  v85 = *(_QWORD *)(v99 - 8);
  __chkstk_darwin(v99);
  v83 = (char *)&v69 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_10001A9A8(&qword_10110B468);
  v14 = __chkstk_darwin(v13);
  v89 = (char *)&v69 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v95 = (uint64_t)&v69 - v16;
  v84 = sub_10001A9A8((uint64_t *)&unk_1011115C0);
  v94 = *(_QWORD *)(v84 - 8);
  v17 = __chkstk_darwin(v84);
  v90 = (char *)&v69 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v87 = (uint64_t)&v69 - v19;
  v20 = sub_10001A9A8((uint64_t *)&unk_1010F77C0);
  __chkstk_darwin(v20);
  v22 = (char *)&v69 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = sub_10001A9A8((uint64_t *)&unk_1011115B0);
  v24 = *(_QWORD *)(v23 - 8);
  __chkstk_darwin(v23);
  v86 = (uint64_t)&v69 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = sub_10001A9A8(&qword_1010EE0E0);
  __chkstk_darwin(v26);
  v78 = (uint64_t)&v69 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v77 = type metadata accessor for OwnerSharingCircle(0);
  v79 = *(_QWORD *)(v77 - 8);
  v28 = __chkstk_darwin(v77);
  v73 = (uint64_t)&v69 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v28);
  v74 = (uint64_t)&v69 - v30;
  v31 = sub_10001A9A8((uint64_t *)&unk_1010F77B0);
  __chkstk_darwin(v31);
  v33 = (char *)&v69 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v100 = _swiftEmptyArrayStorage;
  sub_100005CF0(v97, (uint64_t)v33, (uint64_t *)&unk_1010F77B0);
  v81 = v33;
  sub_10000F9B8((uint64_t)v33, (uint64_t)v22, (uint64_t *)&unk_1010F77C0);
  v70 = v24;
  v72 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48);
  if (v72(v22, 1, v23) == 1)
  {
LABEL_2:
    sub_100004048((uint64_t)v22, (uint64_t *)&unk_1010F77C0);
    v34 = v78;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v79 + 56))(v78, 1, 1, v77);
LABEL_3:
    sub_100004048((uint64_t)v81, (uint64_t *)&unk_1010F77B0);
    sub_100004048(v34, &qword_1010EE0E0);
    return;
  }
  v88 = v6;
  v35 = v94;
  v82 = (void (*)(_QWORD))v8;
  v71 = v22;
  v80 = v23;
  while (1)
  {
    v96 = v3;
    v36 = v86;
    sub_100005CF0((uint64_t)v22, v86, (uint64_t *)&unk_1011115B0);
    v97 = v36 + *(int *)(v23 + 40);
    sub_10000F9B8(v97, (uint64_t)v11, (uint64_t *)&unk_1010F77A0);
    v37 = v85;
    v93 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v85 + 48);
    if (v93(v11, 1, v99) != 1)
      break;
    v38 = v84;
LABEL_17:
    sub_100004048((uint64_t)v11, (uint64_t *)&unk_1010F77A0);
    v60 = v95;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v35 + 56))(v95, 1, 1, v38);
    v3 = v96;
LABEL_19:
    v22 = v71;
    sub_100004048(v86, (uint64_t *)&unk_1011115B0);
    sub_100004048(v60, &qword_10110B468);
    v61 = (uint64_t)v81;
    sub_100004048((uint64_t)v81, (uint64_t *)&unk_1010F77C0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v70 + 56))(v61, 1, 1, v80);
LABEL_20:
    v62 = v79;
    v34 = v78;
    v63 = v77;
    (*(void (**)(void))(v79 + 56))();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v62 + 48))(v34, 1, v63) == 1)
      goto LABEL_3;
    v64 = v74;
    sub_1000126EC(v34, v74, type metadata accessor for OwnerSharingCircle);
    v65 = v75(v64);
    if (v3)
    {
      sub_1000126B0(v64, type metadata accessor for OwnerSharingCircle);
      sub_100004048((uint64_t)v81, (uint64_t *)&unk_1010F77B0);
      swift_release(v100);
      return;
    }
    if ((v65 & 1) != 0)
    {
      sub_1000126EC(v64, v73, type metadata accessor for OwnerSharingCircle);
      v66 = v100;
      if ((swift_isUniquelyReferenced_nonNull_native(v100) & 1) == 0)
      {
        sub_10009A520(0, v66[2] + 1, 1);
        v66 = v100;
      }
      v68 = v66[2];
      v67 = v66[3];
      if (v68 >= v67 >> 1)
      {
        sub_10009A520(v67 > 1, v68 + 1, 1);
        v66 = v100;
      }
      v66[2] = v68 + 1;
      sub_1000126EC(v73, (uint64_t)v66+ ((*(unsigned __int8 *)(v79 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v79 + 80))+ *(_QWORD *)(v79 + 72) * v68, type metadata accessor for OwnerSharingCircle);
      v35 = v94;
    }
    else
    {
      sub_1000126B0(v64, type metadata accessor for OwnerSharingCircle);
    }
    sub_10000F9B8((uint64_t)v81, (uint64_t)v22, (uint64_t *)&unk_1010F77C0);
    v23 = v80;
    if (v72(v22, 1, v80) == 1)
      goto LABEL_2;
  }
  v92 = *(uint64_t (**)(char *, char *, uint64_t))(v37 + 32);
  v39 = v83;
  v38 = v84;
  while (1)
  {
    v40 = (uint64_t)v89;
    v41 = v92(v39, v11, v99);
    DirectorySequence.next()(v41);
    v42 = (uint64_t)v98;
    v43 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48);
    v44 = v6;
    v45 = v91;
    if (v43(v98, 1, v91) == 1)
    {
      v46 = v99;
      (*(void (**)(char *, uint64_t))(v37 + 8))(v39, v99);
      sub_100004048(v42, &qword_1010FBA40);
      v47 = v97;
      sub_100004048(v97, (uint64_t *)&unk_1010F77A0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v37 + 56))(v47, 1, 1, v46);
      v35 = v94;
      v48 = v95;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v94 + 56))(v95, 1, 1, v38);
      goto LABEL_14;
    }
    v49 = v99;
    v50 = v11;
    v51 = v82;
    (*(void (**)(void (*)(_QWORD), uint64_t, uint64_t))(v44 + 32))(v82, v42, v45);
    v52 = objc_autoreleasePoolPush();
    v53 = v96;
    sub_100A7F310(v51, v86, &qword_1010EE0E0, type metadata accessor for OwnerSharingCircle, (uint64_t *)&unk_1011115B0, &qword_1011115D0, (uint64_t)sub_100AA4624, (uint64_t *)&unk_1011115C0, v40);
    v96 = v53;
    if (v53)
      break;
    objc_autoreleasePoolPop(v52);
    v54 = v85;
    v39 = v83;
    (*(void (**)(char *, uint64_t))(v85 + 8))(v83, v49);
    (*(void (**)(void (*)(_QWORD), uint64_t))(v44 + 8))(v51, v45);
    v48 = v95;
    sub_100005CF0(v40, v95, &qword_10110B468);
    v11 = v50;
    v37 = v54;
    v38 = v84;
    v35 = v94;
LABEL_14:
    v55 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v35 + 48))(v48, 1, v38);
    v56 = (uint64_t)v90;
    if (v55 == 1)
    {
      v3 = v96;
      v60 = v48;
      v6 = v88;
      goto LABEL_19;
    }
    v57 = v48;
    v58 = v87;
    sub_100005CF0(v57, v87, (uint64_t *)&unk_1011115C0);
    sub_100005CF0(v58, v56, (uint64_t *)&unk_1011115C0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v56, v38);
    v6 = v88;
    if (EnumCaseMultiPayload != 1)
    {
      sub_100004048(v86, (uint64_t *)&unk_1011115B0);
      sub_1000126EC(v56, v78, type metadata accessor for OwnerSharingCircle);
      v3 = v96;
      v22 = v71;
      goto LABEL_20;
    }
    sub_100004048(v56, (uint64_t *)&unk_1011115C0);
    sub_10000F9B8(v97, (uint64_t)v11, (uint64_t *)&unk_1010F77A0);
    if (v93(v11, 1, v99) == 1)
      goto LABEL_17;
  }
  objc_autoreleasePoolPop(v52);
  __break(1u);
}

