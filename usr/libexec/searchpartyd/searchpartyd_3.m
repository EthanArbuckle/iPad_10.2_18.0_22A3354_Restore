uint64_t sub_1001C46A0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  int64_t v5;
  int64_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  int64_t v15;
  int64_t v16;
  int isUniquelyReferenced_nonNull_native;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  unint64_t v26;
  uint64_t v27;
  char *v28;
  unint64_t v29;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t result;
  uint64_t v35;

  v35 = a1 + 64;
  v2 = 1 << *(_BYTE *)(a1 + 32);
  v3 = -1;
  if (v2 < 64)
    v3 = ~(-1 << v2);
  v4 = v3 & *(_QWORD *)(a1 + 64);
  v5 = (unint64_t)(v2 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  v6 = 0;
  v7 = _swiftEmptyArrayStorage;
  while (1)
  {
    if (v4)
    {
      v8 = __clz(__rbit64(v4));
      v4 &= v4 - 1;
      v9 = v8 | (v6 << 6);
    }
    else
    {
      v10 = v6 + 1;
      if (__OFADD__(v6, 1))
        goto LABEL_47;
      if (v10 >= v5)
      {
LABEL_42:
        swift_release(a1);
        return (uint64_t)v7;
      }
      v11 = *(_QWORD *)(v35 + 8 * v10);
      ++v6;
      if (!v11)
      {
        v6 = v10 + 1;
        if (v10 + 1 >= v5)
          goto LABEL_42;
        v11 = *(_QWORD *)(v35 + 8 * v6);
        if (!v11)
        {
          v6 = v10 + 2;
          if (v10 + 2 >= v5)
            goto LABEL_42;
          v11 = *(_QWORD *)(v35 + 8 * v6);
          if (!v11)
          {
            v6 = v10 + 3;
            if (v10 + 3 >= v5)
              goto LABEL_42;
            v11 = *(_QWORD *)(v35 + 8 * v6);
            if (!v11)
            {
              v12 = v10 + 4;
              if (v12 >= v5)
                goto LABEL_42;
              v11 = *(_QWORD *)(v35 + 8 * v12);
              if (!v11)
              {
                while (1)
                {
                  v6 = v12 + 1;
                  if (__OFADD__(v12, 1))
                    goto LABEL_48;
                  if (v6 >= v5)
                    goto LABEL_42;
                  v11 = *(_QWORD *)(v35 + 8 * v6);
                  ++v12;
                  if (v11)
                    goto LABEL_23;
                }
              }
              v6 = v12;
            }
          }
        }
      }
LABEL_23:
      v4 = (v11 - 1) & v11;
      v9 = __clz(__rbit64(v11)) + (v6 << 6);
    }
    v13 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v9);
    v14 = *(_QWORD *)(v13 + 16);
    v15 = v7[2];
    v16 = v15 + v14;
    if (__OFADD__(v15, v14))
      break;
    swift_bridgeObjectRetain(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v9));
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v7);
    if (isUniquelyReferenced_nonNull_native && v16 <= v7[3] >> 1)
    {
      if (!*(_QWORD *)(v13 + 16))
        goto LABEL_4;
    }
    else
    {
      if (v15 <= v16)
        v18 = v15 + v14;
      else
        v18 = v15;
      v7 = (_QWORD *)sub_1007C77C0(isUniquelyReferenced_nonNull_native, v18, 1, (unint64_t)v7);
      if (!*(_QWORD *)(v13 + 16))
      {
LABEL_4:
        if (v14)
          goto LABEL_44;
        goto LABEL_5;
      }
    }
    v19 = v7[2];
    v20 = (v7[3] >> 1) - v19;
    v21 = type metadata accessor for Date(0);
    if (v20 < v14)
      goto LABEL_45;
    v22 = *(_QWORD *)(v21 - 8);
    v23 = (*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
    v24 = *(_QWORD *)(v22 + 72);
    v25 = (char *)v7 + v23 + v24 * v19;
    v26 = v13 + v23;
    v27 = v24 * v14;
    v28 = &v25[v27];
    v29 = v26 + v27;
    if (v26 < (unint64_t)v28 && (unint64_t)v25 < v29)
      goto LABEL_49;
    swift_arrayInitWithCopy(v25);
    if (v14)
    {
      v31 = v7[2];
      v32 = __OFADD__(v31, v14);
      v33 = v31 + v14;
      if (v32)
        goto LABEL_46;
      v7[2] = v33;
    }
LABEL_5:
    swift_bridgeObjectRelease();
  }
  __break(1u);
LABEL_44:
  __break(1u);
LABEL_45:
  __break(1u);
LABEL_46:
  __break(1u);
LABEL_47:
  __break(1u);
LABEL_48:
  __break(1u);
LABEL_49:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1001C4958@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_100C1ADE8(*a1);
  *a2 = result & 1;
  return result;
}

uint64_t sub_1001C4984@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = sub_100C1AE00(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1001C49AC@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = sub_100C1B0B8(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1001C49D4@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = sub_100C1B1AC(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1001C49FC()
{
  void *v0;
  uint64_t v1;
  uint64_t result;

  v0 = (void *)SPFinderStateChangedNotification;
  v1 = type metadata accessor for DarwinNotificationHelper(0);
  swift_allocObject(v1, *(unsigned int *)(v1 + 48), *(unsigned __int16 *)(v1 + 52));
  result = DarwinNotificationHelper.init(notificationName:rateLimit:)(v0, 0.0);
  qword_1011B69F8 = result;
  return result;
}

uint64_t sub_1001C4A4C(unsigned __int8 *a1)
{
  int v1;
  uint64_t v2;

  v1 = *a1;
  v2 = swift_allocObject(&unk_10105D6A8, 17, 7);
  *(_BYTE *)(v2 + 16) = v1;
  sub_1001C5AEC(2, v1, 2, (uint64_t)sub_1001C7F64, v2);
  return swift_release();
}

void sub_1001C4AB0(uint64_t a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;

  if (a1)
  {
    v3 = static os_log_type_t.error.getter(a1);
    if (qword_1010EA228 != -1)
      swift_once(&qword_1010EA228, sub_100B5D7D4);
    v4 = qword_1011B7CF8;
    v5 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v6 = swift_allocObject(v5, 72, 7);
    *(_OWORD *)(v6 + 16) = xmmword_100E22B00;
    v21 = a1;
    swift_errorRetain(a1);
    v7 = sub_10001A9A8((uint64_t *)&unk_1010EB920);
    v8 = String.init<A>(describing:)(&v21, v7);
    v10 = v9;
    *(_QWORD *)(v6 + 56) = &type metadata for String;
    *(_QWORD *)(v6 + 64) = sub_10001AA00();
    *(_QWORD *)(v6 + 32) = v8;
    *(_QWORD *)(v6 + 40) = v10;
    os_log(_:dso:log:_:_:)(v3, &_mh_execute_header, v4, "FinderStateManager: Failed updateFinderStateInfo, optInScreenOffScan %@", 71, 2, v6);
    swift_bridgeObjectRelease();
  }
  else
  {
    v12 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v13 = swift_allocObject(v12, 72, 7);
    v14 = v13;
    *(_OWORD *)(v13 + 16) = xmmword_100E22B00;
    v15 = (a2 & 1) == 0;
    if ((a2 & 1) != 0)
      v16 = 1702195828;
    else
      v16 = 0x65736C6166;
    if (v15)
      v17 = 0xE500000000000000;
    else
      v17 = 0xE400000000000000;
    *(_QWORD *)(v13 + 56) = &type metadata for String;
    *(_QWORD *)(v13 + 64) = sub_10001AA00();
    *(_QWORD *)(v14 + 32) = v16;
    *(_QWORD *)(v14 + 40) = v17;
    v18 = sub_10000F4A0(0, (unint64_t *)&qword_1010ED8F0, OS_os_log_ptr);
    v20 = (id)static OS_os_log.default.getter(v18);
    v19 = static os_log_type_t.default.getter(v20);
    os_log(_:dso:log:type:_:)("FinderStateManager: Completed updateFinderStateInfo, optInScreenOffScan %@", 74, 2, &_mh_execute_header, v20, v19, v14);
    swift_bridgeObjectRelease();

  }
}

uint64_t sub_1001C4C9C(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  BOOL v12;
  void *v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  id v25[2];

  v2 = v1;
  v4 = sub_10001A9A8(&qword_1010EECC8);
  __chkstk_darwin(v4);
  v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10001A9A8(&qword_1010F2078);
  __chkstk_darwin(v7);
  v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = OBJC_IVAR____TtC12searchpartyd18FinderStateManager_beaconFindMyAccessoryAssociatedPublisher;
  if (*(_QWORD *)(v1 + OBJC_IVAR____TtC12searchpartyd18FinderStateManager_beaconFindMyAccessoryAssociatedPublisher))
    v12 = 1;
  else
    v12 = a1 == 0;
  if (!v12)
  {
    v13 = *(void **)(v1 + 16);
    v25[0] = v13;
    v25[1] = a1;
    v24 = v8;
    v14 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v6, 1, 1, v14);
    swift_retain();
    v15 = v13;
    v16 = sub_10001A9A8(&qword_1010F2080);
    v17 = sub_10000F4A0(0, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr);
    v18 = sub_1000193A4(&qword_1010F2088, &qword_1010F2080, (const char *)&protocol conformance descriptor for AnyPublisher<A, B>);
    v19 = sub_1001C7EF4();
    Publisher.receive<A>(on:options:)(v25, v6, v16, v17, v18, v19);
    sub_100004048((uint64_t)v6, &qword_1010EECC8);

    swift_release();
    v20 = sub_1000193A4(&qword_1010F2090, &qword_1010F2078, (const char *)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
    swift_retain();
    v21 = Publisher<>.sink(receiveValue:)(sub_1001C7F4C, v2, v7, v20);
    swift_release();
    (*(void (**)(char *, uint64_t))(v24 + 8))(v10, v7);
    *(_QWORD *)(v2 + OBJC_IVAR____TtC12searchpartyd18FinderStateManager_cancellable) = v21;
    swift_release();
  }
  *(_QWORD *)(v2 + v11) = a1;
  return swift_release();
}

uint64_t sub_1001C4EC4@<X0>(_BYTE *a1@<X8>)
{
  char v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;

  if (qword_1010E9D08 != -1)
    swift_once(&qword_1010E9D08, sub_10059A6E0);
  OS_dispatch_queue.sync<A>(execute:)(sub_100003D88, qword_1011B71A8, &type metadata for Configuration);
  v2 = sub_100C1ADE8(v10);
  v3 = sub_100C1AE00(v10);
  v4 = swift_bridgeObjectRelease();
  v5 = v3 != -1;
  LOBYTE(v3) = sub_1001C7598(v4);
  v6 = sub_1001E8718();
  v7 = sub_1001C46A0(v6);
  swift_bridgeObjectRelease();
  v8 = type metadata accessor for FinderStateInfo(0);
  sub_100A79158(v7, &a1[*(int *)(v8 + 28)]);
  swift_bridgeObjectRelease();
  result = sub_1001E7B34((uint64_t)&a1[*(int *)(v8 + 32)]);
  *a1 = v2 & 1;
  a1[1] = v3 & 1;
  a1[2] = v5;
  return result;
}

uint64_t sub_1001C4FE8@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  char v10;
  uint64_t v11;
  char v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;

  v4 = type metadata accessor for FinderStateInfo(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 16));
  v7 = swift_retain();
  v8 = sub_100AEECA4(v7);
  v10 = sub_100AEE4EC(v8, v9 & 0x10101);
  v11 = swift_release();
  v12 = sub_1001C7598(v11);
  sub_1001C4EC4(v6);
  v13 = v6[2];
  sub_1000126B0((uint64_t)v6, type metadata accessor for FinderStateInfo);
  v14 = sub_1001E8718();
  v15 = sub_1001C46A0(v14);
  swift_bridgeObjectRelease();
  sub_100A79158(v15, &a2[*(int *)(v4 + 28)]);
  swift_bridgeObjectRelease();
  result = sub_1001E7B34((uint64_t)&a2[*(int *)(v4 + 32)]);
  *a2 = v10 & 1;
  a2[1] = v12 & 1;
  a2[2] = v13;
  return result;
}

uint64_t sub_1001C5128(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t, uint64_t, uint64_t, uint64_t);
  id v28;
  uint64_t v29;
  void *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  _QWORD aBlock[3];
  void *v42;
  uint64_t (*v43)();
  uint64_t v44;

  v2 = v1;
  v4 = sub_10001A9A8((uint64_t *)&unk_101107EF0);
  __chkstk_darwin(v4);
  v40 = (uint64_t)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10001A9A8(&qword_1010F2070);
  __chkstk_darwin(v6);
  v39 = (uint64_t)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v11);
  v13 = (char *)&v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v39 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000F4A0(0, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr);
  v18 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v15 + 104))(v17, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v14);
  static DispatchQoS.unspecified.getter(v18);
  aBlock[0] = _swiftEmptyArrayStorage;
  v19 = sub_100006204((unint64_t *)&qword_1010F0E20, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v20 = sub_10001A9A8((uint64_t *)&unk_1010EA6B0);
  v21 = sub_1000193A4((unint64_t *)&qword_1010F0E30, (uint64_t *)&unk_1010EA6B0, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v20, v21, v8, v19);
  *(_QWORD *)(v2 + 16) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD00000000000003CLL, 0x8000000100ECA8E0, v13, v10, v17, 0);
  v22 = v2 + OBJC_IVAR____TtC12searchpartyd18FinderStateManager_configurationSubscription;
  v23 = sub_10001A9A8(&qword_1010FAA80);
  v24 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56);
  v24(v22, 1, 1, v23);
  v25 = v2 + OBJC_IVAR____TtC12searchpartyd18FinderStateManager_fmipStateSubscription;
  v26 = sub_10001A9A8(&qword_1010ED508);
  v27 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56);
  v27(v25, 1, 1, v26);
  *(_QWORD *)(v2 + OBJC_IVAR____TtC12searchpartyd18FinderStateManager_cancellable) = 0;
  *(_QWORD *)(v2 + OBJC_IVAR____TtC12searchpartyd18FinderStateManager_beaconFindMyAccessoryAssociatedPublisher) = 0;
  *(_QWORD *)(v2 + OBJC_IVAR____TtC12searchpartyd18FinderStateManager_fmipStateManager) = a1;
  v28 = objc_msgSend(objc_allocWithZone((Class)FMStateCapture), "init", swift_retain_n(a1, 2).n128_f64[0]);
  v29 = swift_allocObject(&unk_10105D5B8, 32, 7);
  *(_QWORD *)(v29 + 16) = sub_1001C7928;
  *(_QWORD *)(v29 + 24) = a1;
  v43 = sub_1001C7954;
  v44 = v29;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10009A0A8;
  v42 = &unk_10105D5D0;
  v30 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  objc_msgSend(v28, "setStateCaptureBlock:", v30);
  _Block_release(v30);
  swift_release();
  *(_QWORD *)(v2 + OBJC_IVAR____TtC12searchpartyd18FinderStateManager_stateCapture) = v28;
  v31 = sub_1006B9680((uint64_t)&off_101049280);
  v32 = type metadata accessor for DarwinNotificationHelper(0);
  swift_allocObject(v32, *(unsigned int *)(v32 + 48), *(unsigned __int16 *)(v32 + 52));
  *(_QWORD *)(v2 + OBJC_IVAR____TtC12searchpartyd18FinderStateManager_notificationListener) = DarwinNotificationHelper.init(notificationHandlers:)(v31);
  v33 = type metadata accessor for FinderStateManager(0);
  v42 = (void *)v33;
  v43 = (uint64_t (*)())&off_10105D590;
  aBlock[0] = v2;
  swift_retain();
  v34 = v39;
  sub_100343F60((uint64_t)aBlock, v39);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(aBlock);
  v27(v34, 0, 1, v26);
  v35 = v2 + OBJC_IVAR____TtC12searchpartyd18FinderStateManager_fmipStateSubscription;
  swift_beginAccess(v2 + OBJC_IVAR____TtC12searchpartyd18FinderStateManager_fmipStateSubscription, aBlock, 33, 0);
  sub_100004084(v34, v35, &qword_1010F2070);
  swift_endAccess(aBlock);
  if (qword_1010E9D08 != -1)
    swift_once(&qword_1010E9D08, sub_10059A6E0);
  v42 = (void *)v33;
  v43 = (uint64_t (*)())&off_10105D558;
  aBlock[0] = v2;
  swift_retain();
  v36 = v40;
  sub_1000995F8((uint64_t)aBlock, v40);
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(aBlock);
  v24(v36, 0, 1, v23);
  v37 = v2 + OBJC_IVAR____TtC12searchpartyd18FinderStateManager_configurationSubscription;
  swift_beginAccess(v2 + OBJC_IVAR____TtC12searchpartyd18FinderStateManager_configurationSubscription, aBlock, 33, 0);
  sub_100004084(v36, v37, (uint64_t *)&unk_101107EF0);
  swift_endAccess(aBlock);
  return v2;
}

uint64_t sub_1001C5670@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v4;
  char v5;
  char v6;

  v2 = swift_retain();
  result = sub_100AEECA4(v2);
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = v4 & 1;
  *(_BYTE *)(a1 + 9) = v5 & 1;
  *(_BYTE *)(a1 + 10) = v6 & 1;
  return result;
}

uint64_t sub_1001C56B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  __n128 v13;
  _BYTE v15[24];
  _BYTE v16[24];

  v1 = v0;
  v2 = sub_10001A9A8(&qword_1010ED508);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = &v15[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = sub_10001A9A8(&qword_1010FAA80);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = &v15[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = v1 + OBJC_IVAR____TtC12searchpartyd18FinderStateManager_configurationSubscription;
  v11 = swift_beginAccess(v1 + OBJC_IVAR____TtC12searchpartyd18FinderStateManager_configurationSubscription, v16, 0, 0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t, __n128))(v7 + 48))(v10, 1, v6, v11))
  {
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(v7 + 16))(v9, v10, v6);
    Subscription.unsubscribe(completion:)(sub_1001C58C4, 0, v6);
    (*(void (**)(_BYTE *, uint64_t))(v7 + 8))(v9, v6);
  }
  v12 = v1 + OBJC_IVAR____TtC12searchpartyd18FinderStateManager_fmipStateSubscription;
  v13 = swift_beginAccess(v1 + OBJC_IVAR____TtC12searchpartyd18FinderStateManager_fmipStateSubscription, v15, 0, 0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t, __n128))(v3 + 48))(v12, 1, v2, v13))
  {
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(v3 + 16))(v5, v12, v2);
    Subscription.unsubscribe(completion:)(sub_1001C58C4, 0, v2);
    (*(void (**)(_BYTE *, uint64_t))(v3 + 8))(v5, v2);
  }

  sub_100004048(v10, (uint64_t *)&unk_101107EF0);
  sub_100004048(v12, &qword_1010F2070);
  swift_release();

  swift_release();
  swift_release();
  swift_release();
  return v1;
}

uint64_t sub_1001C58C8(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;

  if (result)
  {
    v1 = result;
    v2 = swift_errorRetain(result);
    v3 = static os_log_type_t.error.getter(v2);
    v4 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v5 = swift_allocObject(v4, 72, 7);
    *(_OWORD *)(v5 + 16) = xmmword_100E22B00;
    v12 = v1;
    swift_errorRetain(v1);
    v6 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
    v7 = String.init<A>(describing:)(&v12, v6);
    v9 = v8;
    *(_QWORD *)(v5 + 56) = &type metadata for String;
    *(_QWORD *)(v5 + 64) = sub_10001AA00();
    *(_QWORD *)(v5 + 32) = v7;
    *(_QWORD *)(v5 + 40) = v9;
    v10 = sub_10000F4A0(0, (unint64_t *)&qword_1010ED8F0, OS_os_log_ptr);
    v11 = (void *)static OS_os_log.default.getter(v10);
    os_log(_:dso:log:_:_:)(v3, &_mh_execute_header, v11, "FinderStateManager could not unsubscribe %@", 43, 2, v5);
    swift_bridgeObjectRelease();

    return swift_errorRelease(v1);
  }
  return result;
}

uint64_t sub_1001C59D8()
{
  uint64_t v0;

  sub_1001C56B0();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_1001C59FC()
{
  return type metadata accessor for FinderStateManager(0);
}

uint64_t type metadata accessor for FinderStateManager(uint64_t a1)
{
  return sub_10001B630(a1, (uint64_t *)&unk_1010F1E60, (uint64_t)&nominal type descriptor for FinderStateManager);
}

void sub_1001C5A18(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[8];

  v6[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  sub_1001C5C94(319, (unint64_t *)&qword_1010EFAF8, &qword_1010FAA80);
  if (v3 <= 0x3F)
  {
    v6[1] = *(_QWORD *)(v2 - 8) + 64;
    sub_1001C5C94(319, (unint64_t *)&unk_1010F1E70, &qword_1010ED508);
    if (v5 <= 0x3F)
    {
      v6[2] = *(_QWORD *)(v4 - 8) + 64;
      v6[3] = (char *)&value witness table for Builtin.NativeObject + 64;
      v6[4] = (char *)&value witness table for Builtin.UnknownObject + 64;
      v6[5] = (char *)&value witness table for Builtin.NativeObject + 64;
      v6[6] = "\b";
      v6[7] = "\b";
      swift_updateClassMetadata2(a1, 256, 8, v6, a1 + 80);
    }
  }
}

uint64_t sub_1001C5AEC(char a1, int a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  int v23;
  int v24;
  uint64_t v25;
  _QWORD aBlock[6];

  v6 = v5;
  v23 = a3;
  v24 = a2;
  v10 = type metadata accessor for DispatchQoS(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for DispatchWorkItemFlags(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = __chkstk_darwin(v14);
  v18 = (char *)&v23 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = *(_QWORD *)(v6 + 16);
  static DispatchWorkItemFlags.barrier.getter(v16);
  v19 = swift_allocObject(&unk_10105D608, 43, 7);
  *(_QWORD *)(v19 + 16) = v6;
  *(_QWORD *)(v19 + 24) = a4;
  *(_QWORD *)(v19 + 32) = a5;
  *(_BYTE *)(v19 + 40) = a1;
  *(_BYTE *)(v19 + 41) = v23;
  *(_BYTE *)(v19 + 42) = v24;
  aBlock[4] = sub_1001C7988;
  aBlock[5] = v19;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_10105D620;
  v20 = _Block_copy(aBlock);
  swift_retain();
  v21 = swift_retain();
  static DispatchQoS.unspecified.getter(v21);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v13, v18, v20);
  _Block_release(v20);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
  return swift_release();
}

void sub_1001C5C94(uint64_t a1, unint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!*a2)
  {
    v5 = sub_10001F784(a3);
    v6 = type metadata accessor for Optional(a1, v5);
    if (!v7)
      atomic_store(v6, a2);
  }
}

_QWORD *sub_1001C5CE0(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  void *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(char *, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v14 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_WORD *)a1 = *(_WORD *)a2;
    *(_BYTE *)(a1 + 2) = *((_BYTE *)a2 + 2);
    v7 = *(int *)(a3 + 28);
    v8 = (void *)(a1 + v7);
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for Date(0);
    v11 = *(_QWORD *)(v10 - 8);
    v12 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
    if (v12(v9, 1, v10))
    {
      v13 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
    }
    v15 = *(int *)(a3 + 32);
    v16 = (char *)v4 + v15;
    v17 = (char *)a2 + v15;
    if (v12(v17, 1, v10))
    {
      v18 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
      memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v16, v17, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v16, 0, 1, v10);
    }
  }
  return v4;
}

uint64_t sub_1001C5E50(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t result;

  v4 = a1 + *(int *)(a2 + 28);
  v5 = type metadata accessor for Date(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
  if (!v7(v4, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  v8 = a1 + *(int *)(a2 + 32);
  result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v7)(v8, 1, v5);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v8, v5);
  return result;
}

uint64_t sub_1001C5EFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int (*v11)(const void *, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  void *v14;
  const void *v15;
  uint64_t v16;

  *(_WORD *)a1 = *(_WORD *)a2;
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  v6 = *(int *)(a3 + 28);
  v7 = (void *)(a1 + v6);
  v8 = (const void *)(a2 + v6);
  v9 = type metadata accessor for Date(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48);
  if (v11(v8, 1, v9))
  {
    v12 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 16))(v7, v8, v9);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  v13 = *(int *)(a3 + 32);
  v14 = (void *)(a1 + v13);
  v15 = (const void *)(a2 + v13);
  if (v11(v15, 1, v9))
  {
    v16 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 16))(v14, v15, v9);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v14, 0, 1, v9);
  }
  return a1;
}

_BYTE *sub_1001C6040(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(_BYTE *, uint64_t, uint64_t);
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  _BYTE *v17;
  int v18;
  int v19;
  uint64_t v20;

  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  v6 = *(int *)(a3 + 28);
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for Date(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 16))(v7, v8, v9);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(_BYTE *, uint64_t))(v10 + 8))(v7, v9);
LABEL_6:
    v14 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 24))(v7, v8, v9);
LABEL_7:
  v15 = *(int *)(a3 + 32);
  v16 = &a1[v15];
  v17 = &a2[v15];
  v18 = v11(&a1[v15], 1, v9);
  v19 = v11(v17, 1, v9);
  if (!v18)
  {
    if (!v19)
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 24))(v16, v17, v9);
      return a1;
    }
    (*(void (**)(_BYTE *, uint64_t))(v10 + 8))(v16, v9);
    goto LABEL_12;
  }
  if (v19)
  {
LABEL_12:
    v20 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    return a1;
  }
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 16))(v16, v17, v9);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v16, 0, 1, v9);
  return a1;
}

uint64_t sub_1001C621C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int (*v11)(const void *, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  void *v14;
  const void *v15;
  uint64_t v16;

  *(_WORD *)a1 = *(_WORD *)a2;
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  v6 = *(int *)(a3 + 28);
  v7 = (void *)(a1 + v6);
  v8 = (const void *)(a2 + v6);
  v9 = type metadata accessor for Date(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48);
  if (v11(v8, 1, v9))
  {
    v12 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  v13 = *(int *)(a3 + 32);
  v14 = (void *)(a1 + v13);
  v15 = (const void *)(a2 + v13);
  if (v11(v15, 1, v9))
  {
    v16 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v14, v15, v9);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v14, 0, 1, v9);
  }
  return a1;
}

_BYTE *sub_1001C6360(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(_BYTE *, uint64_t, uint64_t);
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  _BYTE *v17;
  int v18;
  int v19;
  uint64_t v20;

  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  v6 = *(int *)(a3 + 28);
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for Date(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 32))(v7, v8, v9);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(_BYTE *, uint64_t))(v10 + 8))(v7, v9);
LABEL_6:
    v14 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 40))(v7, v8, v9);
LABEL_7:
  v15 = *(int *)(a3 + 32);
  v16 = &a1[v15];
  v17 = &a2[v15];
  v18 = v11(&a1[v15], 1, v9);
  v19 = v11(v17, 1, v9);
  if (!v18)
  {
    if (!v19)
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 40))(v16, v17, v9);
      return a1;
    }
    (*(void (**)(_BYTE *, uint64_t))(v10 + 8))(v16, v9);
    goto LABEL_12;
  }
  if (v19)
  {
LABEL_12:
    v20 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    return a1;
  }
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 32))(v16, v17, v9);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v16, 0, 1, v9);
  return a1;
}

uint64_t sub_1001C653C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001C6548);
}

uint64_t sub_1001C6548(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4;
  BOOL v5;
  int v6;
  uint64_t v10;

  if ((_DWORD)a2 == 254)
  {
    v4 = *a1;
    v5 = v4 >= 2;
    v6 = (v4 + 2147483646) & 0x7FFFFFFF;
    if (v5)
      return (v6 + 1);
    else
      return 0;
  }
  else
  {
    v10 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
    return (*(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(&a1[*(int *)(a3 + 28)], a2, v10);
  }
}

uint64_t sub_1001C65C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001C65D4);
}

_BYTE *sub_1001C65D4(_BYTE *result, uint64_t a2, int a3, uint64_t a4)
{
  _BYTE *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 254)
  {
    *result = a2 + 1;
  }
  else
  {
    v7 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
    return (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 28)], a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for FinderStateInfo(uint64_t a1)
{
  return sub_10001B630(a1, qword_1010F2028, (uint64_t)&nominal type descriptor for FinderStateInfo);
}

void sub_1001C665C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[3];
  uint64_t v5;
  uint64_t v6;

  v4[0] = &unk_100E2B630;
  v4[1] = &unk_100E2B630;
  v4[2] = &unk_100E2B630;
  sub_1000A813C(319);
  if (v3 <= 0x3F)
  {
    v5 = *(_QWORD *)(v2 - 8) + 64;
    v6 = v5;
    swift_initStructMetadata(a1, 256, 5, v4, a1 + 16);
  }
}

uint64_t sub_1001C66D4(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4, unsigned __int8 a5, char a6)
{
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 *v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  uint64_t v26;
  unsigned __int8 *v27;
  int v28;
  unsigned __int8 v29;
  unsigned __int8 v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  int v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v39 = a2;
  v40 = a3;
  v37 = a5;
  v7 = a4;
  v8 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  v9 = __chkstk_darwin(v8);
  v38 = (uint64_t)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v12 = (char *)&v35 - v11;
  v13 = type metadata accessor for FinderStateInfo(0);
  v14 = __chkstk_darwin(v13);
  v16 = (char *)&v35 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v14);
  v19 = (char *)&v35 - v18;
  v20 = __chkstk_darwin(v17);
  v22 = (unsigned __int8 *)&v35 - v21;
  v23 = __chkstk_darwin(v20);
  v25 = (char *)&v35 - v24;
  __chkstk_darwin(v23);
  v27 = (unsigned __int8 *)&v35 - v26;
  sub_1001C4EC4(v25);
  sub_10005972C((uint64_t)v25, (uint64_t)v22, type metadata accessor for FinderStateInfo);
  if (v7 == 2)
    v28 = *v22;
  else
    v28 = v7 & 1;
  v36 = v28;
  sub_1000126B0((uint64_t)v22, type metadata accessor for FinderStateInfo);
  sub_10005972C((uint64_t)v25, (uint64_t)v19, type metadata accessor for FinderStateInfo);
  if (v37 == 2)
    v29 = v19[2];
  else
    v29 = v37 & 1;
  sub_1000126B0((uint64_t)v19, type metadata accessor for FinderStateInfo);
  sub_10005972C((uint64_t)v25, (uint64_t)v16, type metadata accessor for FinderStateInfo);
  if (a6 == 2)
    v30 = v16[1];
  else
    v30 = a6 & 1;
  sub_1000126B0((uint64_t)v16, type metadata accessor for FinderStateInfo);
  v31 = sub_1001E8718();
  v32 = sub_1001C46A0(v31);
  swift_bridgeObjectRelease();
  sub_100A79158(v32, v12);
  swift_bridgeObjectRelease();
  v33 = v38;
  sub_1001E7B34(v38);
  sub_1000126B0((uint64_t)v25, type metadata accessor for FinderStateInfo);
  *v27 = v36;
  v27[1] = v30;
  v27[2] = v29;
  sub_100005CF0((uint64_t)v12, (uint64_t)&v27[*(int *)(v13 + 28)], (uint64_t *)&unk_1010EA690);
  sub_100005CF0(v33, (uint64_t)&v27[*(int *)(v13 + 32)], (uint64_t *)&unk_1010EA690);
  sub_1001C7C24(v27, v39, v40);
  return sub_1000126B0((uint64_t)v27, type metadata accessor for FinderStateInfo);
}

uint64_t sub_1001C698C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1001C69AC(a1, a2, a3, "FinderStateManager: FMIP State changed", 38);
}

uint64_t sub_1001C699C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1001C69AC(a1, a2, a3, "FinderStateManager: FMIP location services state changed", 56);
}

uint64_t sub_1001C69AC(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5)
{
  uint64_t v7;
  void *v8;
  uint64_t v9;

  v7 = sub_10000F4A0(0, (unint64_t *)&qword_1010ED8F0, OS_os_log_ptr);
  v8 = (void *)static OS_os_log.default.getter(v7);
  v9 = static os_log_type_t.default.getter(v8);
  os_log(_:dso:log:type:_:)(a4, a5, 2, &_mh_execute_header, v8, v9, _swiftEmptyArrayStorage);

  if (qword_1010E99D8 != -1)
    swift_once(&qword_1010E99D8, sub_1001C49FC);
  return dispatch thunk of DarwinNotificationHelper.post(bypassRateLimit:)(0);
}

uint64_t sub_1001C6A88(void (*a1)(id, _QWORD), uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  id v19;
  char v20;
  id v21;
  char v22;
  id v23;
  char v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  char v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  id v36;
  id v37;
  id v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(id, _QWORD);
  id v45[2];
  _QWORD *v46;

  v43 = a2;
  v44 = a1;
  v3 = type metadata accessor for FinderStateInfo(0);
  __chkstk_darwin(v3);
  v5 = (char *)&v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  v7 = __chkstk_darwin(v6);
  v41 = (uint64_t)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v10 = (char *)&v40 - v9;
  v11 = type metadata accessor for Date(0);
  __chkstk_darwin(v11);
  v13 = (char *)&v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = v2;
  v14 = swift_retain();
  v15 = sub_100AEECA4(v14);
  v17 = v16;
  if (qword_1010E9D08 != -1)
    swift_once(&qword_1010E9D08, sub_10059A6E0);
  OS_dispatch_queue.sync<A>(execute:)(sub_100003D88, qword_1011B71A8, &type metadata for Configuration);
  v18 = sub_100C1B1AC((uint64_t)v46);
  swift_bridgeObjectRelease();
  v46 = &_swiftEmptySetSingleton;
  v19 = SPDisabledReasoniCloudSignedOut;
  v20 = sub_1001C43C8((uint64_t)v19, v18);

  if ((v20 & 1) != 0)
  {
    sub_100A0C410(v45, SPFinderDisabledReasoniCloudSignedOut);

  }
  v21 = SPDisabledReasonLowAccountSecurity;
  v22 = sub_1001C43C8((uint64_t)v21, v18);

  if ((v22 & 1) != 0)
  {
    sub_100A0C410(v45, SPFinderDisabledReasonLowAccountSecurity);

  }
  v23 = SPDisabledReasonUserOptOut;
  v24 = sub_1001C43C8((uint64_t)v23, v18);
  swift_bridgeObjectRelease();

  if ((v24 & 1) != 0)
  {
    sub_100A0C410(v45, SPFinderDisabledReasonUserOptOut);

  }
  if ((sub_1003435F8() & 1) != 0)
  {
    if ((v17 & 1) != 0)
      goto LABEL_11;
  }
  else
  {
    sub_100A0C410(v45, SPFinderDisabledReasonFindMyiPhoneOff);

    if ((v17 & 1) != 0)
    {
LABEL_11:
      if ((sub_100B1198C() & 1) != 0)
        goto LABEL_13;
      goto LABEL_12;
    }
  }
  sub_100A0C410(v45, SPFinderDisabledReasonServiceDisabled);

  if ((sub_100B1198C() & 1) == 0)
  {
LABEL_12:
    sub_100A0C410(v45, SPFinderDisabledReasonLocationServices);

  }
LABEL_13:
  v25 = sub_1003433AC();
  *(&v40 - 2) = __chkstk_darwin(v25);
  type metadata accessor for CLAuthorizationStatus(0);
  OS_dispatch_queue.sync<A>(execute:)(sub_1001C786C, &v40 - 4, v26);

  if ((LODWORD(v45[0]) - 3) >= 2)
  {
    sub_100A0C410(v45, SPFinderDisabledReasonLocationServicesFindMyFramework);

  }
  if ((v17 & 0x10000) == 0)
  {
    sub_100A0C410(v45, SPFinderDisabledReasonCannotPublishAnonymously);

  }
  if (!v46[2])
  {
    sub_100A0C410(v45, SPFinderDisabledReasonNone);

  }
  v27 = sub_100AEE4EC(v15, v17 & 0x10101);
  v28 = v27;
  v29 = sub_1001C7598(v27);
  v30 = v29;
  Date.init()(v29);
  v31 = sub_1001E8718();
  v32 = sub_1001C46A0(v31);
  swift_bridgeObjectRelease();
  sub_100A79158(v32, v10);
  swift_bridgeObjectRelease();
  v33 = v41;
  sub_1001E7B34(v41);
  sub_1001C4EC4(v5);
  v34 = v5[2];
  sub_1000126B0((uint64_t)v5, type metadata accessor for FinderStateInfo);
  if (v34)
    v35 = 1;
  else
    v35 = -1;
  v36 = objc_allocWithZone((Class)SPFinderStateInfo);
  v37 = sub_1001C7154(v28 & 1, v30 & 1, (uint64_t)v13, (uint64_t)v10, v33, v35);
  v38 = v37;
  v44(v37, 0);

  return swift_release();
}

uint64_t sub_1001C6FA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1001C6FC8(a1, a2, a3, a4, "trying to enableFinderMode", 26, 1);
}

uint64_t sub_1001C6FB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1001C6FC8(a1, a2, a3, a4, "trying to disableFinderMode", 27, 0);
}

uint64_t sub_1001C6FC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5, uint64_t a6, char a7)
{
  uint64_t v12;
  void *v13;
  uint64_t v14;

  v12 = sub_10000F4A0(0, (unint64_t *)&qword_1010ED8F0, OS_os_log_ptr);
  v13 = (void *)static OS_os_log.default.getter(v12);
  v14 = static os_log_type_t.default.getter(v13);
  os_log(_:dso:log:type:_:)(a5, a6, 2, &_mh_execute_header, v13, v14, _swiftEmptyArrayStorage);

  return sub_1001C5AEC(a7, 2, 2, a1, a2);
}

uint64_t sub_1001C7080(void (*a1)(id, _QWORD), uint64_t a2)
{
  return sub_1001C6A88(a1, a2);
}

uint64_t sub_1001C70A0(char a1, uint64_t a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;

  v5 = a1 & 1;
  v6 = sub_10000F4A0(0, (unint64_t *)&qword_1010ED8F0, OS_os_log_ptr);
  v7 = (void *)static OS_os_log.default.getter(v6);
  v8 = static os_log_type_t.default.getter(v7);
  os_log(_:dso:log:type:_:)("trying to set(activeCache:completion:)", 38, 2, &_mh_execute_header, v7, v8, _swiftEmptyArrayStorage);

  return sub_1001C5AEC(2, 2, v5, a2, a3);
}

uint64_t sub_1001C714C(uint64_t a1, uint64_t a2)
{
  return sub_1001C7458(a2);
}

id sub_1001C7154(char a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  NSDate v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(uint64_t, uint64_t, uint64_t);
  Class isa;
  Class v14;
  Class v15;
  id v16;
  void *v20;

  v9.super.isa = Date._bridgeToObjectiveC()().super.isa;
  v10 = type metadata accessor for Date(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
  isa = 0;
  if (v12(a4, 1, v10) != 1)
  {
    isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(a4, v10);
  }
  if (v12(a5, 1, v10) == 1)
  {
    v14 = 0;
  }
  else
  {
    v14 = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(a5, v10);
  }
  type metadata accessor for SPFinderDisabledReason(0);
  sub_100006204(&qword_1010EB5E0, (uint64_t (*)(uint64_t))type metadata accessor for SPFinderDisabledReason, (uint64_t)&unk_100E21EA8);
  v15 = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v16 = objc_msgSend(v20, "initWithState:optInScreenOffScan:lastUpdated:lastPublishDate:lastScheduledPublishActivityDate:activeCache:disabledReasons:", a1 & 1, a2 & 1, v9.super.isa, isa, v14, a6, v15);

  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(a3, v10);
  return v16;
}

BOOL sub_1001C72DC(uint64_t a1, uint64_t a2, void *__s1)
{
  uint64_t __s2;
  __int16 v5;
  char v6;
  char v7;
  char v8;
  char v9;

  __s2 = a1;
  v5 = a2;
  v6 = BYTE2(a2);
  v7 = BYTE3(a2);
  v8 = BYTE4(a2);
  v9 = BYTE5(a2);
  if (!__s1)
    __break(1u);
  return memcmp(__s1, &__s2, BYTE6(a2)) == 0;
}

uint64_t sub_1001C73BC(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4)
{
  uint64_t result;
  char *v8;
  BOOL v9;
  int64_t v10;
  size_t v11;

  result = __DataStorage._bytes.getter();
  v8 = (char *)result;
  if (result)
  {
    result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_12:
      __break(1u);
      goto LABEL_13;
    }
    v8 += a1 - result;
  }
  v9 = __OFSUB__(a2, a1);
  v10 = a2 - a1;
  if (v9)
  {
    __break(1u);
    goto LABEL_12;
  }
  result = __DataStorage._length.getter();
  if (!a4)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (!v8)
  {
LABEL_14:
    __break(1u);
    return result;
  }
  if (result >= v10)
    v11 = v10;
  else
    v11 = result;
  return memcmp(a4, v8, v11) == 0;
}

uint64_t sub_1001C7458(uint64_t a1)
{
  uint64_t KeyPath;
  char v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t result;

  type metadata accessor for AnyKeyPath(0);
  KeyPath = swift_getKeyPath(&unk_100E2B678);
  v3 = static AnyKeyPath.== infix(_:_:)(a1, KeyPath);
  swift_release();
  if ((v3 & 1) != 0)
    goto LABEL_5;
  v4 = swift_getKeyPath(&unk_100E2B6A0);
  v5 = static AnyKeyPath.== infix(_:_:)(a1, v4);
  swift_release();
  if ((v5 & 1) != 0
    || (v6 = swift_getKeyPath(&unk_100E2B6C8),
        v7 = static AnyKeyPath.== infix(_:_:)(a1, v6),
        swift_release(),
        (v7 & 1) != 0)
    || (v8 = swift_getKeyPath(&unk_100E2B6F0),
        v9 = static AnyKeyPath.== infix(_:_:)(a1, v8),
        result = swift_release(),
        (v9 & 1) != 0))
  {
LABEL_5:
    if (qword_1010E99D8 != -1)
      swift_once(&qword_1010E99D8, sub_1001C49FC);
    return dispatch thunk of DarwinNotificationHelper.post(bypassRateLimit:)(0);
  }
  return result;
}

uint64_t sub_1001C7598(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;
  NSString v7;
  id v8;
  int v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  NSString v16;
  id v17;
  uint64_t result;
  unsigned __int8 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[24];
  uint64_t v23;

  v1 = static os_log_type_t.debug.getter(a1);
  if (qword_1010EA228 != -1)
    swift_once(&qword_1010EA228, sub_100B5D7D4);
  v2 = qword_1011B7CF8;
  v3 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v4 = swift_allocObject(v3, 72, 7);
  *(_OWORD *)(v4 + 16) = xmmword_100E22B00;
  v5 = (void *)objc_opt_self(NSUserDefaults);
  v6 = objc_msgSend(v5, "standardUserDefaults");
  v7 = String._bridgeToObjectiveC()();
  v8 = objc_msgSend(v6, "objectForKey:", v7);

  if (v8)
  {
    _bridgeAnyObjectToAny(_:)(&v20, v8);
    swift_unknownObjectRelease(v8);
  }
  else
  {
    v20 = 0u;
    v21 = 0u;
  }
  sub_100005CF0((uint64_t)&v20, (uint64_t)v22, (uint64_t *)&unk_1010F6390);
  if (v23)
  {
    v9 = swift_dynamicCast(&v19, v22, (char *)&type metadata for Any + 8, &type metadata for Bool, 6);
    v10 = v19;
    if (!v9)
      v10 = 2;
  }
  else
  {
    sub_100004048((uint64_t)v22, (uint64_t *)&unk_1010F6390);
    v10 = 2;
  }
  v22[0] = v10;
  v11 = sub_10001A9A8(&qword_1010FBAA0);
  v12 = String.init<A>(describing:)(v22, v11);
  v14 = v13;
  *(_QWORD *)(v4 + 56) = &type metadata for String;
  *(_QWORD *)(v4 + 64) = sub_10001AA00();
  *(_QWORD *)(v4 + 32) = v12;
  *(_QWORD *)(v4 + 40) = v14;
  os_log(_:dso:log:_:_:)(v1, &_mh_execute_header, v2, "FinderStateManager: optInScreenOffScan get, %@", 46, 2, v4);
  swift_bridgeObjectRelease();
  v15 = objc_msgSend(v5, "standardUserDefaults");
  v16 = String._bridgeToObjectiveC()();
  v17 = objc_msgSend(v15, "objectForKey:", v16);

  if (v17)
  {
    _bridgeAnyObjectToAny(_:)(&v20, v17);
    swift_unknownObjectRelease(v17);
  }
  else
  {
    v20 = 0u;
    v21 = 0u;
  }
  sub_100005CF0((uint64_t)&v20, (uint64_t)v22, (uint64_t *)&unk_1010F6390);
  if (v23)
  {
    result = swift_dynamicCast(&v19, v22, (char *)&type metadata for Any + 8, &type metadata for Bool, 6);
    if ((_DWORD)result)
      return v19;
  }
  else
  {
    sub_100004048((uint64_t)v22, (uint64_t *)&unk_1010F6390);
    return 0;
  }
  return result;
}

uint64_t sub_1001C786C@<X0>(_DWORD *a1@<X8>)
{
  uint64_t v1;

  return sub_100355F7C(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_1001C7884@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_100C1ADE8(*a1);
  *a2 = result & 1;
  return result;
}

uint64_t sub_1001C78B0@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = sub_100C1AE00(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1001C78D8@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = sub_100C1B0B8(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1001C7900@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = sub_100C1B1AC(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1001C7928@<X0>(uint64_t a1@<X8>)
{
  return sub_1001C5670(a1);
}

uint64_t sub_1001C7930()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001C7954()
{
  uint64_t v0;

  return sub_1007F58F0(*(void (**)(_QWORD *__return_ptr))(v0 + 16));
}

uint64_t sub_1001C795C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 43, 7);
}

uint64_t sub_1001C7988()
{
  uint64_t v0;

  return sub_1001C66D4(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_BYTE *)(v0 + 40), *(_BYTE *)(v0 + 41), *(_BYTE *)(v0 + 42));
}

uint64_t sub_1001C79A0(unsigned __int8 *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  id v5;
  uint64_t v6;
  NSString v7;
  uint64_t v8;
  NSString v9;
  uint64_t v10;
  NSString v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;

  v2 = type metadata accessor for FinderStateInfo(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v6 = *a1;
  v7 = String._bridgeToObjectiveC()();
  objc_msgSend(v5, "setBool:forKey:", v6, v7);

  if (a1[2])
    v8 = 1;
  else
    v8 = -1;
  v9 = String._bridgeToObjectiveC()();
  objc_msgSend(v5, "setInteger:forKey:", v8, v9);

  v10 = a1[1];
  v11 = String._bridgeToObjectiveC()();
  objc_msgSend(v5, "setBool:forKey:", v10, v11);

  v13 = static os_log_type_t.debug.getter(v12);
  if (qword_1010EA228 != -1)
    swift_once(&qword_1010EA228, sub_100B5D7D4);
  v14 = qword_1011B7CF8;
  v15 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v16 = swift_allocObject(v15, 72, 7);
  *(_OWORD *)(v16 + 16) = xmmword_100E22B00;
  sub_10005972C((uint64_t)a1, (uint64_t)v4, type metadata accessor for FinderStateInfo);
  v17 = String.init<A>(describing:)(v4, v2);
  v19 = v18;
  *(_QWORD *)(v16 + 56) = &type metadata for String;
  *(_QWORD *)(v16 + 64) = sub_10001AA00();
  *(_QWORD *)(v16 + 32) = v17;
  *(_QWORD *)(v16 + 40) = v19;
  os_log(_:dso:log:_:_:)(v13, &_mh_execute_header, v14, "FinderStateManager: save stateInfo, %@ (notification)", 53, 2, v16);
  swift_bridgeObjectRelease();
  if (qword_1010E99D8 != -1)
    swift_once(&qword_1010E99D8, sub_1001C49FC);
  dispatch thunk of DarwinNotificationHelper.post(bypassRateLimit:)(0);

  return 0;
}

uint64_t sub_1001C7C24(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  void *v16;
  _QWORD *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD aBlock[6];

  v25 = a2;
  v5 = type metadata accessor for DispatchWorkItemFlags(0);
  v28 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  v26 = *(_QWORD *)(v8 - 8);
  v27 = v8;
  __chkstk_darwin(v8);
  v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS.QoSClass(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_1001C79A0(a1);
  sub_10000F4A0(0, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr);
  (*(void (**)(char *, _QWORD, uint64_t))(v12 + 104))(v14, enum case for DispatchQoS.QoSClass.default(_:), v11);
  v16 = (void *)static OS_dispatch_queue.global(qos:)(v14);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  v17 = (_QWORD *)swift_allocObject(&unk_10105D658, 40, 7);
  v17[2] = v25;
  v17[3] = a3;
  v17[4] = v15;
  aBlock[4] = sub_100016FE4;
  aBlock[5] = v17;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_10105D670;
  v18 = _Block_copy(aBlock);
  swift_retain();
  v19 = swift_errorRetain(v15);
  static DispatchQoS.unspecified.getter(v19);
  v29 = _swiftEmptyArrayStorage;
  v20 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v21 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v22 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v29, v21, v22, v5, v20);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v10, v7, v18);
  _Block_release(v18);

  swift_errorRelease(v15);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v7, v5);
  (*(void (**)(char *, uint64_t))(v26 + 8))(v10, v27);
  return swift_release();
}

uint64_t sub_1001C7EC8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  swift_errorRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

unint64_t sub_1001C7EF4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10111C120;
  if (!qword_10111C120)
  {
    v1 = sub_10000F4A0(255, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for OS_dispatch_queue, v1);
    atomic_store(result, (unint64_t *)&qword_10111C120);
  }
  return result;
}

uint64_t sub_1001C7F4C(unsigned __int8 *a1)
{
  return sub_1001C4A4C(a1);
}

uint64_t sub_1001C7F54()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

void sub_1001C7F64(uint64_t a1)
{
  uint64_t v1;

  sub_1001C4AB0(a1, *(_BYTE *)(v1 + 16));
}

void sub_1001C7F7C()
{
  qword_1010F2098 = qword_1010F20A0;
}

uint64_t sub_1001C7F90(_QWORD *a1, __int16 a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v18;
  _QWORD v19[3];
  uint64_t v20;
  uint64_t v21;

  v6 = a1[3];
  v7 = a1[4];
  sub_10001AA44(a1, v6);
  dispatch thunk of BinaryEncoding.container()(v19, v6, v7);
  LOBYTE(v18) = a2;
  v8 = v20;
  v9 = v21;
  sub_10009F5D0((uint64_t)v19, v20);
  v10 = sub_1001CA350();
  dispatch thunk of BinaryEncodingContaining.encode<A>(_:)(&v18, &type metadata for VerifyFindMyNetworkIdResponseV2Payload.FindMyNetworkIdStatus, v10, v8, v9);
  if (!v3)
  {
    LOBYTE(v18) = HIBYTE(a2);
    v11 = v20;
    v12 = v21;
    sub_10009F5D0((uint64_t)v19, v20);
    v13 = sub_100059570();
    dispatch thunk of BinaryEncodingContaining.encode<A>(_:)(&v18, &type metadata for UInt8, v13, v11, v12);
    v18 = a3;
    v14 = v20;
    v15 = v21;
    sub_10009F5D0((uint64_t)v19, v20);
    v16 = sub_1001CA394();
    dispatch thunk of BinaryEncodingContaining.encode<A>(_:)(&v18, &type metadata for VerifyFindMyNetworkIdResponseV2Payload.FindMyNetworkIdPairingStatus, v16, v14, v15);
  }
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v19);
}

_QWORD *sub_1001C80C4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v5;

  result = sub_1001CA000(a1);
  if (!v2)
  {
    *(_WORD *)a2 = (_WORD)result;
    *(_QWORD *)(a2 + 8) = v5;
  }
  return result;
}

uint64_t sub_1001C80F8(_QWORD *a1)
{
  uint64_t v1;

  return sub_1001C7F90(a1, *(_WORD *)v1, *(_QWORD *)(v1 + 8));
}

void sub_1001C8114(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1001C8144()
{
  unint64_t v0;
  Swift::String v1;
  uint64_t v3;

  v0 = sub_1001CAE54();
  v3 = CustomStringConvertible.typeDescription.getter(&type metadata for VerifyFindMyNetworkIdResponseV2Payload.FindMyNetworkIdStatus, v0);
  v1._countAndFlagsBits = 0x72696150746F6E2ELL;
  v1._object = (void *)0xEA00000000006465;
  String.append(_:)(v1);
  return v3;
}

uint64_t sub_1001C8294(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1001C8A04(a1, a2, a3, (uint64_t (*)(void))sub_1001CAAC0);
}

uint64_t sub_1001C82B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1001C8A88(a1, a2, a3, (uint64_t (*)(void))sub_1001CAAC0);
}

void sub_1001C82CC()
{
  char *v0;

  sub_1001C8114(*v0);
}

uint64_t sub_1001C82D4(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  unint64_t v15;
  _QWORD v16[3];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v4 = a1[3];
  v5 = a1[4];
  sub_10001AA44(a1, v4);
  dispatch thunk of BinaryEncoding.container()(v16, v4, v5);
  v14 = a2;
  swift_bridgeObjectRetain_n(a2, 2);
  sub_1001C9610(&v14);
  if (v2)
  {
    swift_release();
    __break(1u);
    JUMPOUT(0x1001C8538);
  }
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v14 + 16))
  {
    v19 = swift_retain();
    __asm { BR              X9 }
  }
  swift_release();
  v6 = 4 - *(_QWORD *)(a2 + 16);
  if ((unsigned __int128)(v6 * (__int128)21) >> 64 != (21 * v6) >> 63)
  {
    __break(1u);
    JUMPOUT(0x1001C8528);
  }
  v14 = sub_10060C584(21 * v6);
  v15 = v7;
  sub_10051EB40((uint64_t)&v14);
  v8 = v14;
  v9 = v15;
  v10 = v17;
  v11 = v18;
  sub_10009F5D0((uint64_t)v16, v17);
  v12 = sub_1000DCC90();
  dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)(&v14, &type metadata for Data, v12, v10, v11);
  sub_10001BC14(v8, v9);
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v16);
}

uint64_t sub_1001C8548(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  unint64_t v7;
  uint64_t v8;
  Swift::String v9;
  Swift::String v10;
  Swift::String v11;
  Swift::String v12;
  Swift::String v13;
  Swift::String v14;

  _StringGuts.grow(_:)(48);
  v7 = sub_1001C89A4();
  v8 = CustomStringConvertible.typeDescription.getter(&type metadata for VerifyFindMyNetworkIdResponseV2Payload.PartStatus, v7);
  swift_bridgeObjectRelease();
  v9._countAndFlagsBits = 0x3A44497472617020;
  v9._object = (void *)0xE900000000000020;
  String.append(_:)(v9);
  v10._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt8, &protocol witness table for UInt8);
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  v11._countAndFlagsBits = 0x4E6C616972657320;
  v11._object = (void *)0xEF203A7265626D75;
  String.append(_:)(v11);
  v12._countAndFlagsBits = Data.hexString.getter(a2, a3);
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  v13._object = (void *)0x8000000100ECAA70;
  v13._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v13);
  v14._countAndFlagsBits = sub_1001C88B4(a4);
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t sub_1001C86B8@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = sub_1001CA3D8(a1);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t sub_1001C86E0(_QWORD *a1)
{
  uint64_t *v1;

  return sub_1001C82D4(a1, *v1);
}

Swift::Int sub_1001C86F8()
{
  uint64_t *v0;
  uint64_t v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3);
  sub_1009698C0((uint64_t)v3, v1);
  return Hasher._finalize()();
}

void sub_1001C873C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  Swift::UInt v5;
  Swift::UInt8 *v6;
  uint64_t v7;
  unint64_t v8;
  Swift::UInt8 v9;
  Swift::UInt8 v10;

  v2 = v1;
  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 16);
  Hasher._combine(_:)(v5);
  if (v5)
  {
    v6 = (Swift::UInt8 *)(v4 + 56);
    do
    {
      v7 = *((_QWORD *)v6 - 2);
      v8 = *((_QWORD *)v6 - 1);
      v9 = *(v6 - 24);
      v10 = *v6;
      v6 += 32;
      Hasher._combine(_:)(v9);
      sub_10001BBBC(v7, v8);
      Data.hash(into:)(a1, v7, v8);
      Hasher._combine(_:)(v10);
      sub_10001BC14(v7, v8);
      --v5;
    }
    while (v5);
  }
}

Swift::Int sub_1001C87CC()
{
  uint64_t *v0;
  uint64_t v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3);
  sub_1009698C0((uint64_t)v3, v1);
  return Hasher._finalize()();
}

uint64_t sub_1001C880C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  Swift::String v4;
  uint64_t v5;
  _QWORD *v6;
  Swift::String v7;
  uint64_t v9;

  v3 = *v2;
  v9 = CustomStringConvertible.typeDescription.getter(a1, a2);
  v4._countAndFlagsBits = 8250;
  v4._object = (void *)0xE200000000000000;
  String.append(_:)(v4);
  swift_bridgeObjectRetain(v3);
  v6 = sub_100AEF18C(v5);
  swift_bridgeObjectRelease();
  v7._countAndFlagsBits = Array.description.getter(v6, &type metadata for String);
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v9;
}

uint64_t sub_1001C88A8(uint64_t *a1, uint64_t *a2)
{
  return sub_1002479B8(*a1, *a2);
}

uint64_t sub_1001C88B4(char a1)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;

  if (a1)
  {
    if (a1 == 1)
    {
      v1 = sub_1001C8AF0();
      v7 = CustomStringConvertible.typeDescription.getter(&type metadata for VerifyFindMyNetworkIdResponseV2Payload.PartPairingStatus, v1);
      v2 = 0x6465726961702ELL;
      v3 = 0xE700000000000000;
    }
    else
    {
      v5 = sub_1001C8AF0();
      v7 = CustomStringConvertible.typeDescription.getter(&type metadata for VerifyFindMyNetworkIdResponseV2Payload.PartPairingStatus, v5);
      v2 = 0x65726961706E752ELL;
      v3 = 0xE900000000000064;
    }
  }
  else
  {
    v4 = sub_1001C8AF0();
    v7 = CustomStringConvertible.typeDescription.getter(&type metadata for VerifyFindMyNetworkIdResponseV2Payload.PartPairingStatus, v4);
    v2 = 0x6E776F6E6B6E752ELL;
    v3 = 0xE800000000000000;
  }
  String.append(_:)(*(Swift::String *)&v2);
  return v7;
}

unint64_t sub_1001C89A4()
{
  unint64_t result;

  result = qword_1010F20A8;
  if (!qword_1010F20A8)
  {
    result = swift_getWitnessTable(byte_100E2BBB4, &type metadata for VerifyFindMyNetworkIdResponseV2Payload.PartStatus);
    atomic_store(result, (unint64_t *)&qword_1010F20A8);
  }
  return result;
}

uint64_t sub_1001C89E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1001C8A04(a1, a2, a3, (uint64_t (*)(void))sub_1001C95CC);
}

uint64_t sub_1001C8A04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v7;
  unint64_t v8;

  v7 = a4();
  v8 = sub_100059570();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v7, v8);
}

uint64_t sub_1001C8A6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1001C8A88(a1, a2, a3, (uint64_t (*)(void))sub_1001C95CC);
}

uint64_t sub_1001C8A88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v7;
  unint64_t v8;

  v7 = a4();
  v8 = sub_100059570();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v7, v8);
}

uint64_t sub_1001C8AE8()
{
  char *v0;

  return sub_1001C88B4(*v0);
}

unint64_t sub_1001C8AF0()
{
  unint64_t result;

  result = qword_1010F20B0;
  if (!qword_1010F20B0)
  {
    result = swift_getWitnessTable(byte_100E2BB8C, &type metadata for VerifyFindMyNetworkIdResponseV2Payload.PartPairingStatus);
    atomic_store(result, (unint64_t *)&qword_1010F20B0);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for VerifyFindMyNetworkIdResponseV2Payload.PartPairingStatus(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1001C8B80 + 4 * byte_100E2B889[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1001C8BB4 + 4 * byte_100E2B884[v4]))();
}

uint64_t sub_1001C8BB4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001C8BBC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1001C8BC4);
  return result;
}

uint64_t sub_1001C8BD0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1001C8BD8);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1001C8BDC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001C8BE4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for VerifyFindMyNetworkIdResponseV2Payload.PartPairingStatus()
{
  return &type metadata for VerifyFindMyNetworkIdResponseV2Payload.PartPairingStatus;
}

uint64_t destroy for VerifyFindMyNetworkIdResponseV2Payload.PartStatus(uint64_t a1)
{
  return sub_10001BC14(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
}

uint64_t initializeWithCopy for VerifyFindMyNetworkIdResponseV2Payload.PartStatus(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  sub_10001BBBC(v4, v5);
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return a1;
}

uint64_t assignWithCopy for VerifyFindMyNetworkIdResponseV2Payload.PartStatus(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  sub_10001BBBC(v4, v5);
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  sub_10001BC14(v6, v7);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return a1;
}

__n128 initializeWithTake for VerifyFindMyNetworkIdResponseV2Payload.PartStatus(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for VerifyFindMyNetworkIdResponseV2Payload.PartStatus(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  sub_10001BC14(v4, v5);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for VerifyFindMyNetworkIdResponseV2Payload.PartStatus(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 25))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 24);
  v4 = v3 >= 3;
  v5 = v3 - 3;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for VerifyFindMyNetworkIdResponseV2Payload.PartStatus(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 25) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 25) = 0;
    if (a2)
      *(_BYTE *)(result + 24) = a2 + 2;
  }
  return result;
}

ValueMetadata *type metadata accessor for VerifyFindMyNetworkIdResponseV2Payload.PartStatus()
{
  return &type metadata for VerifyFindMyNetworkIdResponseV2Payload.PartStatus;
}

uint64_t destroy for MessagingAccount(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
}

uint64_t _s12searchpartyd38VerifyFindMyNetworkIdResponseV2PayloadVwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_WORD *)a1 = *(_WORD *)a2;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v3;
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t assignWithCopy for VerifyFindMyNetworkIdResponseV2Payload(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  v3 = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v3;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t assignWithTake for VerifyFindMyNetworkIdResponseV2Payload(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_WORD *)a1 = *(_WORD *)a2;
  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease(v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for MessagingAccount(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MessagingAccount(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for VerifyFindMyNetworkIdResponseV2Payload()
{
  return &type metadata for VerifyFindMyNetworkIdResponseV2Payload;
}

ValueMetadata *type metadata accessor for VerifyFindMyNetworkIdResponseV2Payload.FindMyNetworkIdPairingStatus()
{
  return &type metadata for VerifyFindMyNetworkIdResponseV2Payload.FindMyNetworkIdPairingStatus;
}

unint64_t sub_1001C8F14()
{
  unint64_t result;

  result = qword_1010F20B8;
  if (!qword_1010F20B8)
  {
    result = swift_getWitnessTable(byte_100E2B910, &type metadata for VerifyFindMyNetworkIdResponseV2Payload.FindMyNetworkIdPairingStatus);
    atomic_store(result, (unint64_t *)&qword_1010F20B8);
  }
  return result;
}

unint64_t sub_1001C8F58(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = sub_1001C8F84();
  result = sub_1001C8FC8();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_1001C8F84()
{
  unint64_t result;

  result = qword_1010F20C0;
  if (!qword_1010F20C0)
  {
    result = swift_getWitnessTable("A #", &type metadata for VerifyFindMyNetworkIdResponseV2Payload);
    atomic_store(result, (unint64_t *)&qword_1010F20C0);
  }
  return result;
}

unint64_t sub_1001C8FC8()
{
  unint64_t result;

  result = qword_1010F20C8;
  if (!qword_1010F20C8)
  {
    result = swift_getWitnessTable("Y #", &type metadata for VerifyFindMyNetworkIdResponseV2Payload);
    atomic_store(result, (unint64_t *)&qword_1010F20C8);
  }
  return result;
}

uint64_t sub_1001C900C(_QWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD v17[2];
  _QWORD v18[3];
  uint64_t v19;
  uint64_t v20;

  v8 = a1[3];
  v9 = a1[4];
  sub_10001AA44(a1, v8);
  dispatch thunk of BinaryEncoding.container()(v18, v8, v9);
  v17[0] = a2;
  v17[1] = a3;
  v10 = v19;
  v11 = v20;
  sub_10009F5D0((uint64_t)v18, v19);
  v12 = sub_1000DCC90();
  dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)(v17, &type metadata for Data, v12, v10, v11);
  if (!v4)
  {
    LOBYTE(v17[0]) = a4;
    v13 = v19;
    v14 = v20;
    sub_10009F5D0((uint64_t)v18, v19);
    v15 = sub_1001CADCC();
    dispatch thunk of BinaryEncodingContaining.encode<A>(_:)(v17, &type metadata for VerifyFindMyNetworkIdResponseV2Payload.PartPairingStatus, v15, v13, v14);
  }
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v18);
}

uint64_t sub_1001C9104(uint64_t a1, uint64_t a2, char a3)
{
  unint64_t v6;
  uint64_t v7;
  Swift::String v8;
  Swift::String v9;
  Swift::String v10;
  Swift::String v11;

  _StringGuts.grow(_:)(37);
  v6 = sub_1001CAE10();
  v7 = CustomStringConvertible.typeDescription.getter(&type metadata for VerifyFindMyNetworkIdResponseV2Payload.DecodedPartStatus, v6);
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = 0x4E6C616972657320;
  v8._object = (void *)0xEF203A7265626D75;
  String.append(_:)(v8);
  v9._countAndFlagsBits = Data.hexString.getter(a1, a2);
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  v10._object = (void *)0x8000000100ECAA70;
  v10._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v10);
  v11._countAndFlagsBits = sub_1001C88B4(a3);
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t sub_1001C9214@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  char v6;

  result = sub_1001CAB04(a1);
  if (!v2)
  {
    *(_QWORD *)a2 = result;
    *(_QWORD *)(a2 + 8) = v5;
    *(_BYTE *)(a2 + 16) = v6;
  }
  return result;
}

uint64_t sub_1001C9240(_QWORD *a1)
{
  uint64_t v1;

  return sub_1001C900C(a1, *(_QWORD *)v1, *(_QWORD *)(v1 + 8), *(_BYTE *)(v1 + 16));
}

Swift::Int sub_1001C925C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  Swift::UInt8 v3;
  _QWORD v5[9];

  v1 = *v0;
  v2 = v0[1];
  v3 = *((_BYTE *)v0 + 16);
  Hasher.init(_seed:)(v5);
  Data.hash(into:)(v5, v1, v2);
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

void sub_1001C92BC(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  Swift::UInt8 v4;

  v2 = *v1;
  v3 = v1[1];
  v4 = *((_BYTE *)v1 + 16);
  Data.hash(into:)(a1, v2, v3);
  Hasher._combine(_:)(v4);
}

Swift::Int sub_1001C92F0()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  Swift::UInt8 v3;
  _QWORD v5[9];

  v1 = *v0;
  v2 = v0[1];
  v3 = *((_BYTE *)v0 + 16);
  Hasher.init(_seed:)(v5);
  Data.hash(into:)(v5, v1, v2);
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

uint64_t sub_1001C934C()
{
  uint64_t v0;

  return sub_1001C9104(*(_QWORD *)v0, *(_QWORD *)(v0 + 8), *(_BYTE *)(v0 + 16));
}

uint64_t sub_1001C9358(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  unsigned __int8 v4;

  v2 = *(unsigned __int8 *)(a1 + 16);
  v3 = *(unsigned __int8 *)(a2 + 16);
  _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  return v4 & (v2 == v3);
}

Swift::Int sub_1001C9398()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  Swift::UInt8 v3;
  Swift::UInt8 v4;
  _QWORD v6[9];

  v1 = *(_QWORD *)(v0 + 8);
  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(_BYTE *)v0;
  v4 = *(_BYTE *)(v0 + 24);
  Hasher.init(_seed:)(v6);
  Hasher._combine(_:)(v3);
  Data.hash(into:)(v6, v1, v2);
  Hasher._combine(_:)(v4);
  return Hasher._finalize()();
}

void sub_1001C9410(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  Swift::UInt8 v5;

  v3 = *(_QWORD *)(v1 + 8);
  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_BYTE *)(v1 + 24);
  Hasher._combine(_:)(*(_BYTE *)v1);
  Data.hash(into:)(a1, v3, v4);
  Hasher._combine(_:)(v5);
}

Swift::Int sub_1001C9468()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  Swift::UInt8 v3;
  Swift::UInt8 v4;
  _QWORD v6[9];

  v1 = *(_QWORD *)(v0 + 8);
  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(_BYTE *)v0;
  v4 = *(_BYTE *)(v0 + 24);
  Hasher.init(_seed:)(v6);
  Hasher._combine(_:)(v3);
  Data.hash(into:)(v6, v1, v2);
  Hasher._combine(_:)(v4);
  return Hasher._finalize()();
}

uint64_t sub_1001C94DC()
{
  unsigned __int8 *v0;

  return sub_1001C8548(*v0, *((_QWORD *)v0 + 1), *((_QWORD *)v0 + 2), v0[24]);
}

uint64_t sub_1001C94EC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2;
  int v3;
  unsigned __int8 v4;

  if (*a1 != *a2)
    return 0;
  v2 = a2[24];
  v3 = a1[24];
  _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(*((_QWORD *)a1 + 1), *((_QWORD *)a1 + 2));
  return v4 & (v3 == v2);
}

unint64_t sub_1001C9540()
{
  unint64_t result;

  result = qword_1010F20D0;
  if (!qword_1010F20D0)
  {
    result = swift_getWitnessTable(byte_100E2BA34, &type metadata for VerifyFindMyNetworkIdResponseV2Payload.PartStatus);
    atomic_store(result, (unint64_t *)&qword_1010F20D0);
  }
  return result;
}

unint64_t sub_1001C9588()
{
  unint64_t result;

  result = qword_1010F20D8;
  if (!qword_1010F20D8)
  {
    result = swift_getWitnessTable(byte_100E2BB64, &type metadata for VerifyFindMyNetworkIdResponseV2Payload.PartPairingStatus);
    atomic_store(result, (unint64_t *)&qword_1010F20D8);
  }
  return result;
}

unint64_t sub_1001C95CC()
{
  unint64_t result;

  result = qword_1010F20E0;
  if (!qword_1010F20E0)
  {
    result = swift_getWitnessTable(byte_100E2BB2C, &type metadata for VerifyFindMyNetworkIdResponseV2Payload.PartPairingStatus);
    atomic_store(result, (unint64_t *)&qword_1010F20E0);
  }
  return result;
}

Swift::Int sub_1001C9610(uint64_t *a1)
{
  uint64_t v2;
  unsigned __int8 *v3;
  Swift::Int result;
  unsigned __int8 *v5[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
    v2 = sub_10088F150(v2);
  v3 = *(unsigned __int8 **)(v2 + 16);
  v5[0] = (unsigned __int8 *)(v2 + 32);
  v5[1] = v3;
  result = sub_1001C9678(v5);
  *a1 = v2;
  return result;
}

Swift::Int sub_1001C9678(unsigned __int8 **a1)
{
  uint64_t v1;
  Swift::Int v3;
  Swift::Int result;
  uint64_t v5;
  Swift::Int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  Swift::Int v10;
  unsigned __int8 *v11;
  char *v12;
  unint64_t v13;
  Swift::Int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  unsigned __int8 *v18;
  uint64_t v19;
  Swift::Int v20;
  Swift::Int v21;
  __int128 v22;
  unsigned __int8 *v23;
  unsigned __int8 *v24;
  unsigned __int8 *v25;
  unsigned __int8 v26;
  __int128 v27;
  unsigned __int8 v28;
  Swift::Int v29;
  uint64_t v30;
  Swift::Int v31;
  uint64_t v32;
  _OWORD *v33;
  unsigned int v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  unint64_t v38;
  unint64_t v39;
  char *v40;
  char *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  BOOL v53;
  unint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  BOOL v63;
  uint64_t v64;
  char v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  BOOL v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  unint64_t v87;
  char *v88;
  unsigned __int8 *v89;
  uint64_t v90;
  uint64_t v91;
  unsigned __int8 *v92;
  uint64_t v93;
  unsigned __int8 *v94;
  unsigned int v95;
  unsigned __int8 v96;
  __int128 v97;
  __int128 v98;
  char *v100;
  uint64_t v101;
  unint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t *v109;
  uint64_t v110;
  _QWORD *v111;
  Swift::Int v112;
  Swift::Int v113;
  unsigned __int8 *v114;
  char *__dst;

  v3 = (Swift::Int)a1[1];
  result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0)
      goto LABEL_141;
    if ((unint64_t)v3 >= 2)
    {
      v89 = *a1;
      v90 = -1;
      v91 = 1;
      v92 = *a1;
      do
      {
        v93 = v90;
        v94 = v92;
        do
        {
          v95 = v94[32];
          if (v95 >= *v94)
            break;
          if (!v89)
            goto LABEL_145;
          v96 = v94[56];
          v97 = *(_OWORD *)(v94 + 40);
          v98 = *((_OWORD *)v94 + 1);
          *((_OWORD *)v94 + 2) = *(_OWORD *)v94;
          *((_OWORD *)v94 + 3) = v98;
          *v94 = v95;
          *(_OWORD *)(v94 + 8) = v97;
          v94[24] = v96;
          v94 -= 32;
        }
        while (!__CFADD__(v93++, 1));
        ++v91;
        v92 += 32;
        --v90;
      }
      while (v91 != v3);
    }
    return result;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_150;
  v6 = result;
  v109 = (uint64_t *)a1;
  if (v3 < 2)
  {
    v9 = _swiftEmptyArrayStorage;
    __dst = (char *)&_swiftEmptyArrayStorage[4];
    if (v3 != 1)
    {
      v13 = _swiftEmptyArrayStorage[2];
      v12 = (char *)_swiftEmptyArrayStorage;
LABEL_107:
      v100 = v12;
      v111 = v9;
      if (v13 >= 2)
      {
        v101 = *v109;
        do
        {
          v102 = v13 - 2;
          if (v13 < 2)
            goto LABEL_136;
          if (!v101)
            goto LABEL_149;
          v103 = v100;
          v104 = *(_QWORD *)&v100[16 * v102 + 32];
          v105 = *(_QWORD *)&v100[16 * v13 + 24];
          sub_1001C9D84((unsigned __int8 *)(v101 + 32 * v104), (unsigned __int8 *)(v101 + 32 * *(_QWORD *)&v100[16 * v13 + 16]), v101 + 32 * v105, __dst);
          if (v1)
            break;
          if (v105 < v104)
            goto LABEL_137;
          if ((swift_isUniquelyReferenced_nonNull_native(v103) & 1) == 0)
            v103 = sub_10088F088((uint64_t)v103);
          if (v102 >= *((_QWORD *)v103 + 2))
            goto LABEL_138;
          v106 = &v103[16 * v102 + 32];
          *(_QWORD *)v106 = v104;
          *((_QWORD *)v106 + 1) = v105;
          v107 = *((_QWORD *)v103 + 2);
          if (v13 > v107)
            goto LABEL_139;
          memmove(&v103[16 * v13 + 16], &v103[16 * v13 + 32], 16 * (v107 - v13));
          v100 = v103;
          *((_QWORD *)v103 + 2) = v107 - 1;
          v13 = v107 - 1;
        }
        while (v107 > 2);
      }
LABEL_97:
      swift_bridgeObjectRelease();
      v111[2] = 0;
      return swift_bridgeObjectRelease();
    }
    v111 = _swiftEmptyArrayStorage;
  }
  else
  {
    v7 = v5 >> 1;
    v8 = static Array._allocateBufferUninitialized(minimumCapacity:)(v5 >> 1, &type metadata for VerifyFindMyNetworkIdResponseV2Payload.PartStatus);
    *(_QWORD *)(v8 + 16) = v7;
    v111 = (_QWORD *)v8;
    __dst = (char *)(v8 + 32);
  }
  v10 = 0;
  v11 = *a1;
  v110 = (uint64_t)(*a1 + 64);
  v108 = (uint64_t)(*a1 + 24);
  v12 = (char *)_swiftEmptyArrayStorage;
  v112 = v6;
  v113 = v3;
  v114 = v11;
  while (1)
  {
    v14 = v10++;
    if (v10 < v3)
    {
      v15 = v11[32 * v10];
      v16 = 32 * v14;
      v17 = v11[32 * v14];
      v10 = v14 + 2;
      if (v14 + 2 < v3)
      {
        v18 = (unsigned __int8 *)(v110 + 32 * v14);
        while (v15 < v17 != *v18 >= *(v18 - 32))
        {
          v18 += 32;
          if (v3 == ++v10)
          {
            v10 = v3;
            break;
          }
        }
      }
      if (v15 < v17)
      {
        if (v10 < v14)
          goto LABEL_142;
        if (v14 < v10)
        {
          v19 = 32 * v10 - 32;
          v20 = v10;
          v21 = v14;
          do
          {
            if (v21 != --v20)
            {
              if (!v11)
                goto LABEL_148;
              v24 = &v11[v16];
              v25 = &v11[v19];
              v26 = v11[v16];
              v27 = *(_OWORD *)&v11[v16 + 8];
              v28 = v11[v16 + 24];
              if (v16 != v19 || v24 >= v25 + 32)
              {
                v22 = *((_OWORD *)v25 + 1);
                *(_OWORD *)v24 = *(_OWORD *)v25;
                *((_OWORD *)v24 + 1) = v22;
              }
              v23 = &v11[v19];
              *v23 = v26;
              *(_OWORD *)(v23 + 8) = v27;
              v23[24] = v28;
            }
            ++v21;
            v19 -= 32;
            v16 += 32;
          }
          while (v21 < v20);
        }
      }
    }
    if (v10 >= v3)
      goto LABEL_50;
    if (__OFSUB__(v10, v14))
      goto LABEL_140;
    if (v10 - v14 >= v6)
      goto LABEL_50;
    v29 = v14 + v6;
    if (__OFADD__(v14, v6))
      goto LABEL_143;
    if (v29 >= v3)
      v29 = v3;
    if (v29 < v14)
      break;
    if (v10 != v29)
    {
      v30 = v108 + 32 * v10;
      do
      {
        v31 = v14;
        v32 = v30;
        do
        {
          v33 = (_OWORD *)(v32 - 24);
          v34 = *(unsigned __int8 *)(v32 - 24);
          if (v34 >= *(unsigned __int8 *)(v32 - 56))
            break;
          if (!v11)
            goto LABEL_146;
          v36 = *(_OWORD *)(v32 - 56);
          v35 = *(_OWORD *)(v32 - 40);
          *(_BYTE *)(v32 - 32) = *(_BYTE *)v32;
          v32 -= 32;
          v37 = *(_OWORD *)(v32 + 16);
          *v33 = v36;
          v33[1] = v35;
          *(_BYTE *)(v32 - 24) = v34;
          *(_OWORD *)(v32 - 16) = v37;
          ++v31;
        }
        while (v10 != v31);
        ++v10;
        v30 += 32;
      }
      while (v10 != v29);
      v10 = v29;
    }
LABEL_50:
    if (v10 < v14)
      goto LABEL_135;
    if ((swift_isUniquelyReferenced_nonNull_native(v12) & 1) == 0)
      v12 = sub_10088E710(0, *((_QWORD *)v12 + 2) + 1, 1, v12);
    v39 = *((_QWORD *)v12 + 2);
    v38 = *((_QWORD *)v12 + 3);
    v13 = v39 + 1;
    v11 = v114;
    if (v39 >= v38 >> 1)
    {
      v88 = sub_10088E710((char *)(v38 > 1), v39 + 1, 1, v12);
      v11 = v114;
      v12 = v88;
    }
    *((_QWORD *)v12 + 2) = v13;
    v40 = v12 + 32;
    v41 = &v12[16 * v39 + 32];
    *(_QWORD *)v41 = v14;
    *((_QWORD *)v41 + 1) = v10;
    if (v39)
    {
      while (1)
      {
        v42 = v13 - 1;
        if (v13 >= 4)
        {
          v47 = &v40[16 * v13];
          v48 = *((_QWORD *)v47 - 8);
          v49 = *((_QWORD *)v47 - 7);
          v53 = __OFSUB__(v49, v48);
          v50 = v49 - v48;
          if (v53)
            goto LABEL_124;
          v52 = *((_QWORD *)v47 - 6);
          v51 = *((_QWORD *)v47 - 5);
          v53 = __OFSUB__(v51, v52);
          v45 = v51 - v52;
          v46 = v53;
          if (v53)
            goto LABEL_125;
          v54 = v13 - 2;
          v55 = &v40[16 * v13 - 32];
          v57 = *(_QWORD *)v55;
          v56 = *((_QWORD *)v55 + 1);
          v53 = __OFSUB__(v56, v57);
          v58 = v56 - v57;
          if (v53)
            goto LABEL_127;
          v53 = __OFADD__(v45, v58);
          v59 = v45 + v58;
          if (v53)
            goto LABEL_130;
          if (v59 >= v50)
          {
            v77 = &v40[16 * v42];
            v79 = *(_QWORD *)v77;
            v78 = *((_QWORD *)v77 + 1);
            v53 = __OFSUB__(v78, v79);
            v80 = v78 - v79;
            if (v53)
              goto LABEL_134;
            v70 = v45 < v80;
            goto LABEL_87;
          }
        }
        else
        {
          if (v13 != 3)
          {
            v71 = *((_QWORD *)v12 + 4);
            v72 = *((_QWORD *)v12 + 5);
            v53 = __OFSUB__(v72, v71);
            v64 = v72 - v71;
            v65 = v53;
            goto LABEL_81;
          }
          v44 = *((_QWORD *)v12 + 4);
          v43 = *((_QWORD *)v12 + 5);
          v53 = __OFSUB__(v43, v44);
          v45 = v43 - v44;
          v46 = v53;
        }
        if ((v46 & 1) != 0)
          goto LABEL_126;
        v54 = v13 - 2;
        v60 = &v40[16 * v13 - 32];
        v62 = *(_QWORD *)v60;
        v61 = *((_QWORD *)v60 + 1);
        v63 = __OFSUB__(v61, v62);
        v64 = v61 - v62;
        v65 = v63;
        if (v63)
          goto LABEL_129;
        v66 = &v40[16 * v42];
        v68 = *(_QWORD *)v66;
        v67 = *((_QWORD *)v66 + 1);
        v53 = __OFSUB__(v67, v68);
        v69 = v67 - v68;
        if (v53)
          goto LABEL_132;
        if (__OFADD__(v64, v69))
          goto LABEL_133;
        if (v64 + v69 >= v45)
        {
          v70 = v45 < v69;
LABEL_87:
          if (v70)
            v42 = v54;
          goto LABEL_89;
        }
LABEL_81:
        if ((v65 & 1) != 0)
          goto LABEL_128;
        v73 = &v40[16 * v42];
        v75 = *(_QWORD *)v73;
        v74 = *((_QWORD *)v73 + 1);
        v53 = __OFSUB__(v74, v75);
        v76 = v74 - v75;
        if (v53)
          goto LABEL_131;
        if (v76 < v64)
          goto LABEL_15;
LABEL_89:
        v81 = v42 - 1;
        if (v42 - 1 >= v13)
        {
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
          goto LABEL_144;
        }
        if (!v11)
          goto LABEL_147;
        v82 = v12;
        v83 = &v40[16 * v81];
        v84 = *(_QWORD *)v83;
        v85 = &v40[16 * v42];
        v86 = *((_QWORD *)v85 + 1);
        sub_1001C9D84(&v11[32 * *(_QWORD *)v83], &v11[32 * *(_QWORD *)v85], (unint64_t)&v11[32 * v86], __dst);
        if (v1)
          goto LABEL_97;
        if (v86 < v84)
          goto LABEL_121;
        if (v42 > *((_QWORD *)v82 + 2))
          goto LABEL_122;
        *(_QWORD *)v83 = v84;
        *(_QWORD *)&v40[16 * v81 + 8] = v86;
        v87 = *((_QWORD *)v82 + 2);
        if (v42 >= v87)
          goto LABEL_123;
        v12 = v82;
        v13 = v87 - 1;
        memmove(&v40[16 * v42], v85 + 16, 16 * (v87 - 1 - v42));
        *((_QWORD *)v82 + 2) = v87 - 1;
        v11 = v114;
        if (v87 <= 2)
          goto LABEL_15;
      }
    }
    v13 = 1;
LABEL_15:
    v6 = v112;
    v3 = v113;
    if (v10 >= v113)
    {
      v9 = v111;
      goto LABEL_107;
    }
  }
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  __break(1u);
LABEL_147:
  __break(1u);
LABEL_148:
  __break(1u);
LABEL_149:
  __break(1u);
LABEL_150:
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
  __break(1u);
  return result;
}

uint64_t sub_1001C9D84(unsigned __int8 *__src, unsigned __int8 *a2, unint64_t a3, char *__dst)
{
  unsigned __int8 *v4;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  size_t v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  unsigned __int8 *v22;
  unsigned __int8 *v23;
  unsigned int v24;
  __int128 v25;
  __int128 v26;
  uint64_t result;
  char v28;
  unsigned __int8 *v29;
  char *v30;
  unsigned __int8 *v31;

  v4 = (unsigned __int8 *)__dst;
  v6 = a2;
  v7 = __src;
  v8 = a2 - __src;
  v9 = a2 - __src + 31;
  if (a2 - __src >= 0)
    v9 = a2 - __src;
  v10 = v9 >> 5;
  v11 = a3 - (_QWORD)a2;
  v12 = a3 - (_QWORD)a2 + 31;
  if ((uint64_t)(a3 - (_QWORD)a2) >= 0)
    v12 = a3 - (_QWORD)a2;
  v13 = v12 >> 5;
  v30 = __dst;
  v31 = __src;
  if (v10 >= v13)
  {
    if (v11 >= -31)
    {
      v19 = 32 * v13;
      if (__dst != (char *)a2 || &a2[v19] <= (unsigned __int8 *)__dst)
        memmove(__dst, a2, 32 * v13);
      v20 = &v4[v19];
      v29 = &v4[v19];
      v31 = v6;
      if (v7 < v6 && (unint64_t)(v11 - 32) <= 0xFFFFFFFFFFFFFFC0)
      {
        v21 = (unsigned __int8 *)(a3 - 32);
        v22 = v6;
        while (1)
        {
          v23 = v21 + 32;
          v24 = *(v22 - 32);
          v22 -= 32;
          if (*(v20 - 32) >= v24)
          {
            v29 = v20 - 32;
            if (v23 < v20 || v21 >= v20 || v23 != v20)
            {
              v26 = *((_OWORD *)v20 - 1);
              *(_OWORD *)v21 = *((_OWORD *)v20 - 2);
              *((_OWORD *)v21 + 1) = v26;
            }
            v22 = v6;
            v20 -= 32;
            if (v6 <= v7)
              goto LABEL_42;
          }
          else
          {
            if (v23 != v6 || v21 >= v6)
            {
              v25 = *((_OWORD *)v22 + 1);
              *(_OWORD *)v21 = *(_OWORD *)v22;
              *((_OWORD *)v21 + 1) = v25;
            }
            v31 = v22;
            if (v22 <= v7)
              goto LABEL_42;
          }
          v21 -= 32;
          v6 = v22;
          if (v20 <= v4)
            goto LABEL_42;
        }
      }
      goto LABEL_42;
    }
  }
  else if (v8 >= -31)
  {
    v14 = 32 * v10;
    if (__dst != (char *)__src || &__src[v14] <= (unsigned __int8 *)__dst)
      memmove(__dst, __src, v14);
    v15 = &v4[v14];
    v29 = &v4[v14];
    if ((unint64_t)v6 < a3 && (unint64_t)(v8 - 32) <= 0xFFFFFFFFFFFFFFC0)
    {
      do
      {
        if (*v6 >= *v4)
        {
          if (v7 != v4)
          {
            v18 = *((_OWORD *)v4 + 1);
            *(_OWORD *)v7 = *(_OWORD *)v4;
            *((_OWORD *)v7 + 1) = v18;
          }
          v4 += 32;
          v30 = (char *)v4;
          v16 = v6;
        }
        else
        {
          v16 = v6 + 32;
          if (v7 < v6 || v7 >= v16 || v7 != v6)
          {
            v17 = *((_OWORD *)v6 + 1);
            *(_OWORD *)v7 = *(_OWORD *)v6;
            *((_OWORD *)v7 + 1) = v17;
          }
        }
        v7 += 32;
        if (v4 >= v15)
          break;
        v6 = v16;
      }
      while ((unint64_t)v16 < a3);
      v31 = v7;
    }
LABEL_42:
    sub_10088E91C(&v31, &v30, &v29);
    return 1;
  }
  v28 = 2;
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v28, 1046, 0);
  __break(1u);
  return result;
}

_QWORD *sub_1001CA000(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *result;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[3];
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v3 = a1[3];
  v4 = a1[4];
  sub_10001AA44(a1, v3);
  dispatch thunk of BinaryDecoding.container()(v28, v3, v4);
  v5 = v29;
  v6 = v30;
  sub_10009F5D0((uint64_t)v28, v29);
  v7 = sub_100059570();
  dispatch thunk of BinaryDecodingContaining.decode<A>(_:)(&v31, &type metadata for UInt8, &type metadata for UInt8, v7, v5, v6);
  if (v1)
  {
LABEL_12:
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v28);
    return (_QWORD *)_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  }
  v8 = v31;
  if (v31 >= 4u)
  {
    if (qword_1010EA328 != -1)
      swift_once(&qword_1010EA328, sub_100B5E37C);
    v19 = type metadata accessor for Logger(0);
    v20 = sub_10001A9E8(v19, (uint64_t)qword_1011B7E28);
    v21 = Logger.logObject.getter(v20);
    v22 = static os_log_type_t.error.getter(v21);
    if (os_log_type_enabled(v21, v22))
    {
      v23 = (uint8_t *)swift_slowAlloc(5, -1);
      *(_DWORD *)v23 = 16777472;
      LOBYTE(v31) = v8;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, (char *)&v31 + 1, v23 + 4, v23 + 5);
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Invalid findMyNetworkIdStatus: %hhu", v23, 5u);
      swift_slowDealloc(v23, -1, -1);
    }

    v24 = type metadata accessor for BinaryEncodingError(0);
    v25 = sub_100006204((unint64_t *)&qword_1010EC000, (uint64_t (*)(uint64_t))&type metadata accessor for BinaryEncodingError, (uint64_t)&protocol conformance descriptor for BinaryEncodingError);
    swift_allocError(v24, v25, 0, 0);
    v27 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v24 - 8) + 104))(v26, enum case for BinaryEncodingError.encodingError(_:), v24);
    swift_willThrow(v27);
    goto LABEL_12;
  }
  v9 = v29;
  v10 = v30;
  sub_10009F5D0((uint64_t)v28, v29);
  dispatch thunk of BinaryDecodingContaining.decode<A>(_:)(&v31, &type metadata for UInt8, &type metadata for UInt8, v7, v9, v10);
  v11 = v31;
  if (qword_1010E99E0 != -1)
    swift_once(&qword_1010E99E0, sub_1001C7F7C);
  v12 = qword_1010F2098;
  v13 = v29;
  v14 = v30;
  sub_10009F5D0((uint64_t)v28, v29);
  v15 = dispatch thunk of BinaryDecodingContaining.decode(length:)(v12, v13, v14);
  v17 = v16;
  sub_1001CA30C();
  result = BinaryDecodable.init(data:)(&v31, v15, v17);
  if (v11 > 4)
  {
    __break(1u);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v28);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
    return (_QWORD *)(v8 | (v11 << 8));
  }
  return result;
}

unint64_t sub_1001CA30C()
{
  unint64_t result;

  result = qword_1010F20E8;
  if (!qword_1010F20E8)
  {
    result = swift_getWitnessTable(byte_100E2B9A0, &type metadata for VerifyFindMyNetworkIdResponseV2Payload.FindMyNetworkIdPairingStatus);
    atomic_store(result, (unint64_t *)&qword_1010F20E8);
  }
  return result;
}

unint64_t sub_1001CA350()
{
  unint64_t result;

  result = qword_1010F20F0;
  if (!qword_1010F20F0)
  {
    result = swift_getWitnessTable(asc_100E2BE18, &type metadata for VerifyFindMyNetworkIdResponseV2Payload.FindMyNetworkIdStatus);
    atomic_store(result, (unint64_t *)&qword_1010F20F0);
  }
  return result;
}

unint64_t sub_1001CA394()
{
  unint64_t result;

  result = qword_1010F20F8;
  if (!qword_1010F20F8)
  {
    result = swift_getWitnessTable(byte_100E2B978, &type metadata for VerifyFindMyNetworkIdResponseV2Payload.FindMyNetworkIdPairingStatus);
    atomic_store(result, (unint64_t *)&qword_1010F20F8);
  }
  return result;
}

uint64_t sub_1001CA3D8(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  int v24;
  _QWORD *v25;
  unsigned __int8 v27;
  _QWORD v28[3];
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v3 = type metadata accessor for Data.Iterator(0);
  v21 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v4 = type metadata accessor for BinaryDecoder(0);
  v18 = *(_QWORD *)(v4 - 8);
  v19 = v4;
  __chkstk_darwin(v4);
  v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  v20 = a1;
  sub_10001AA44(a1, v7);
  v9 = dispatch thunk of BinaryDecoding.container()(v28, v7, v8);
  v22 = v6;
  BinaryDecoder.init()(v9);
  v25 = _swiftEmptyArrayStorage;
  v10 = v29;
  v11 = v30;
  sub_10009F5D0((uint64_t)v28, v29);
  v12 = dispatch thunk of BinaryDecodingContaining.decode(length:)(21, v10, v11);
  if (!v1)
  {
    v14 = v12;
    v15 = v13;
    v16 = sub_1001CA768();
    BinaryDecoder.decode<A>(_:from:)(&type metadata for VerifyFindMyNetworkIdResponseV2Payload.DecodedPartStatus, v14, v15, &type metadata for VerifyFindMyNetworkIdResponseV2Payload.DecodedPartStatus, v16);
    v24 = 0;
    v31 = 1;
    v23 = v27;
    __asm { BR              X9 }
  }
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v18 + 8))(v22, v19);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v28);
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v20);
}

unint64_t sub_1001CA768()
{
  unint64_t result;

  result = qword_1010F2100;
  if (!qword_1010F2100)
  {
    result = swift_getWitnessTable(aA_6, &type metadata for VerifyFindMyNetworkIdResponseV2Payload.DecodedPartStatus);
    atomic_store(result, (unint64_t *)&qword_1010F2100);
  }
  return result;
}

unint64_t sub_1001CA7AC()
{
  unint64_t result;

  result = qword_1010F2110;
  if (!qword_1010F2110)
  {
    result = swift_getWitnessTable(aY_26, &type metadata for VerifyFindMyNetworkIdResponseV2Payload.DecodedPartStatus);
    atomic_store(result, (unint64_t *)&qword_1010F2110);
  }
  return result;
}

uint64_t sub_1001CA7F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  sub_10001BBBC(*(_QWORD *)a2, v5);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

uint64_t assignWithCopy for VerifyFindMyNetworkIdResponseV2Payload.DecodedPartStatus(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  sub_10001BBBC(*(_QWORD *)a2, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  sub_10001BC14(v6, v7);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

uint64_t assignWithTake for VerifyFindMyNetworkIdResponseV2Payload.DecodedPartStatus(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;

  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_10001BC14(v4, v5);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for VerifyFindMyNetworkIdResponseV2Payload.DecodedPartStatus(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 16);
  v4 = v3 >= 3;
  v5 = v3 - 3;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for VerifyFindMyNetworkIdResponseV2Payload.DecodedPartStatus(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 254;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = a2 + 2;
  }
  return result;
}

ValueMetadata *type metadata accessor for VerifyFindMyNetworkIdResponseV2Payload.DecodedPartStatus()
{
  return &type metadata for VerifyFindMyNetworkIdResponseV2Payload.DecodedPartStatus;
}

uint64_t storeEnumTagSinglePayload for VerifyFindMyNetworkIdResponseV2Payload.FindMyNetworkIdStatus(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1001CA9B0 + 4 * byte_100E2B897[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1001CA9E4 + 4 * byte_100E2B892[v4]))();
}

uint64_t sub_1001CA9E4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001CA9EC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1001CA9F4);
  return result;
}

uint64_t sub_1001CAA00(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1001CAA08);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1001CAA0C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001CAA14(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for VerifyFindMyNetworkIdResponseV2Payload.FindMyNetworkIdStatus()
{
  return &type metadata for VerifyFindMyNetworkIdResponseV2Payload.FindMyNetworkIdStatus;
}

unint64_t sub_1001CAA34()
{
  unint64_t result;

  result = qword_1010F2118;
  if (!qword_1010F2118)
  {
    result = swift_getWitnessTable(byte_100E2BD10, &type metadata for VerifyFindMyNetworkIdResponseV2Payload.FindMyNetworkIdStatus);
    atomic_store(result, (unint64_t *)&qword_1010F2118);
  }
  return result;
}

unint64_t sub_1001CAA7C()
{
  unint64_t result;

  result = qword_1010F2120;
  if (!qword_1010F2120)
  {
    result = swift_getWitnessTable(byte_100E2BD38, &type metadata for VerifyFindMyNetworkIdResponseV2Payload.DecodedPartStatus);
    atomic_store(result, (unint64_t *)&qword_1010F2120);
  }
  return result;
}

unint64_t sub_1001CAAC0()
{
  unint64_t result;

  result = qword_1010F2128;
  if (!qword_1010F2128)
  {
    result = swift_getWitnessTable(aQ_2, &type metadata for VerifyFindMyNetworkIdResponseV2Payload.FindMyNetworkIdStatus);
    atomic_store(result, (unint64_t *)&qword_1010F2128);
  }
  return result;
}

uint64_t sub_1001CAB04(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v24[3];
  uint64_t v25;
  uint64_t v26;

  v3 = a1[3];
  v4 = a1[4];
  sub_10001AA44(a1, v3);
  dispatch thunk of BinaryDecoding.container()((_QWORD *)((char *)v24 + 1), v3, v4);
  v5 = v25;
  v6 = v26;
  sub_10009F5D0((uint64_t)v24 + 1, v25);
  v7 = dispatch thunk of BinaryDecodingContaining.decode(length:)(20, v5, v6);
  if (!v1)
  {
    v5 = v7;
    v9 = v8;
    v10 = v25;
    v11 = v26;
    sub_10009F5D0((uint64_t)v24 + 1, v25);
    v12 = sub_100059570();
    dispatch thunk of BinaryDecodingContaining.decode<A>(_:)(v24, &type metadata for UInt8, &type metadata for UInt8, v12, v10, v11);
    v13 = v24[0];
    if (LOBYTE(v24[0]) < 3u)
      __asm { BR              X10 }
    if (qword_1010EA328 != -1)
      swift_once(&qword_1010EA328, sub_100B5E37C);
    v14 = type metadata accessor for Logger(0);
    v15 = sub_10001A9E8(v14, (uint64_t)qword_1011B7E28);
    v16 = Logger.logObject.getter(v15);
    v17 = static os_log_type_t.error.getter(v16);
    if (os_log_type_enabled(v16, v17))
    {
      v18 = (uint8_t *)swift_slowAlloc(5, -1);
      *(_DWORD *)v18 = 16777472;
      LOBYTE(v24[0]) = v13;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v24, (char *)v24 + 1, v18 + 4, v18 + 5);
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Invalid PartPairingStatus: %hhu", v18, 5u);
      swift_slowDealloc(v18, -1, -1);
    }

    v19 = type metadata accessor for BinaryEncodingError(0);
    v20 = sub_100006204((unint64_t *)&qword_1010EC000, (uint64_t (*)(uint64_t))&type metadata accessor for BinaryEncodingError, (uint64_t)&protocol conformance descriptor for BinaryEncodingError);
    swift_allocError(v19, v20, 0, 0);
    v22 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v19 - 8) + 104))(v21, enum case for BinaryEncodingError.encodingError(_:), v19);
    swift_willThrow(v22);
    sub_10001BC14(v5, v9);
  }
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)((char *)v24 + 1));
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  return v5;
}

unint64_t sub_1001CADCC()
{
  unint64_t result;

  result = qword_1010F2130;
  if (!qword_1010F2130)
  {
    result = swift_getWitnessTable(aE_3, &type metadata for VerifyFindMyNetworkIdResponseV2Payload.PartPairingStatus);
    atomic_store(result, (unint64_t *)&qword_1010F2130);
  }
  return result;
}

unint64_t sub_1001CAE10()
{
  unint64_t result;

  result = qword_1010F2138;
  if (!qword_1010F2138)
  {
    result = swift_getWitnessTable(asc_100E2BD60, &type metadata for VerifyFindMyNetworkIdResponseV2Payload.DecodedPartStatus);
    atomic_store(result, (unint64_t *)&qword_1010F2138);
  }
  return result;
}

unint64_t sub_1001CAE54()
{
  unint64_t result;

  result = qword_1010F2140;
  if (!qword_1010F2140)
  {
    result = swift_getWitnessTable(asc_100E2BC48, &type metadata for VerifyFindMyNetworkIdResponseV2Payload.FindMyNetworkIdStatus);
    atomic_store(result, &qword_1010F2140);
  }
  return result;
}

uint64_t sub_1001CAE98(uint64_t a1, uint64_t a2)
{
  char *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  char *v15;
  uint64_t ObjectType;

  v5 = static os_log_type_t.default.getter(a1);
  if (qword_1010EA228 != -1)
    swift_once(&qword_1010EA228, sub_100B5D7D4);
  v6 = qword_1011B7CF8;
  v7 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v8 = swift_allocObject(v7, 112, 7);
  *(_OWORD *)(v8 + 16) = xmmword_100E22B10;
  ObjectType = swift_getObjectType(v2);
  v9 = sub_10001A9A8((uint64_t *)&unk_1011169C0);
  v10 = String.init<A>(describing:)(&ObjectType, v9);
  v12 = v11;
  *(_QWORD *)(v8 + 56) = &type metadata for String;
  v13 = sub_10001AA00();
  *(_QWORD *)(v8 + 32) = v10;
  *(_QWORD *)(v8 + 40) = v12;
  *(_QWORD *)(v8 + 96) = &type metadata for String;
  *(_QWORD *)(v8 + 104) = v13;
  *(_QWORD *)(v8 + 64) = v13;
  *(_QWORD *)(v8 + 72) = 0xD00000000000002BLL;
  *(_QWORD *)(v8 + 80) = 0x8000000100ECB150;
  os_log(_:dso:log:_:_:)(v5, &_mh_execute_header, v6, "%@: %@", 6, 2, v8);
  swift_bridgeObjectRelease();
  sub_10001AA44(&v2[OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation], *(_QWORD *)&v2[OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24]);
  v14 = (_QWORD *)swift_allocObject(&unk_10105DE58, 40, 7);
  v14[2] = v2;
  v14[3] = a1;
  v14[4] = a2;
  v15 = v2;
  swift_retain();
  sub_1001CB77C((uint64_t)sub_1001D3330, (uint64_t)v14);
  return swift_release();
}

uint64_t sub_1001CB03C(char a1, char *a2, uint64_t (*a3)(_QWORD *))
{
  _QWORD *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  int v16;

  if ((a1 & 1) == 0)
    return a3(_swiftEmptyArrayStorage);
  sub_10001AA44(&a2[OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation], *(_QWORD *)&a2[OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24]);
  v5 = sub_1001CBD58();
  v6 = a2;
  v7 = (uint64_t)sub_1001D1420((uint64_t)v5, (uint64_t)v6);
  swift_bridgeObjectRelease();

  v9 = static os_log_type_t.default.getter(v8);
  if (qword_1010EA300 != -1)
    swift_once(&qword_1010EA300, sub_100B5E204);
  v10 = qword_1011B7DE0;
  v11 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v12 = swift_allocObject(v11, 72, 7);
  *(_OWORD *)(v12 + 16) = xmmword_100E22B00;
  if ((unint64_t)v7 >> 62)
  {
    if (v7 < 0)
      v15 = v7;
    else
      v15 = v7 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v7);
    v13 = _CocoaArrayWrapper.endIndex.getter(v15);
    swift_bridgeObjectRelease();
  }
  else
  {
    v13 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  *(_QWORD *)(v12 + 56) = &type metadata for Int;
  *(_QWORD *)(v12 + 64) = &protocol witness table for Int;
  *(_QWORD *)(v12 + 32) = v13;
  os_log(_:dso:log:_:_:)(v9, &_mh_execute_header, v10, "Returning %i records", v16);
  swift_bridgeObjectRelease();
  a3((_QWORD *)v7);
  return swift_bridgeObjectRelease();
}

void sub_1001CB24C(uint64_t a1, uint64_t a2)
{
  Class isa;

  sub_10000F4A0(0, &qword_1010F2158, SPBeacon_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  (*(void (**)(uint64_t, Class))(a2 + 16))(a2, isa);

}

uint64_t sub_1001CB50C(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t ObjectType;

  v7 = static os_log_type_t.default.getter(a1);
  if (qword_1010EA300 != -1)
    swift_once(&qword_1010EA300, sub_100B5E204);
  v8 = qword_1011B7DE0;
  v9 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v10 = swift_allocObject(v9, 112, 7);
  *(_OWORD *)(v10 + 16) = xmmword_100E22B10;
  ObjectType = swift_getObjectType(v3);
  v11 = sub_10001A9A8((uint64_t *)&unk_1011169C0);
  v12 = String.init<A>(describing:)(&ObjectType, v11);
  v14 = v13;
  *(_QWORD *)(v10 + 56) = &type metadata for String;
  v15 = sub_10001AA00();
  *(_QWORD *)(v10 + 32) = v12;
  *(_QWORD *)(v10 + 40) = v14;
  *(_QWORD *)(v10 + 96) = &type metadata for String;
  *(_QWORD *)(v10 + 104) = v15;
  *(_QWORD *)(v10 + 64) = v15;
  *(_QWORD *)(v10 + 72) = 0xD00000000000002BLL;
  *(_QWORD *)(v10 + 80) = 0x8000000100ECAB00;
  os_log(_:dso:log:_:_:)(v7, &_mh_execute_header, v8, "%@: %@", 6, 2, v10);
  swift_bridgeObjectRelease();
  sub_10001AA44((_QWORD *)(v3 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation), *(_QWORD *)(v3 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24));
  return sub_1001D0674(a1, a2, a3);
}

uint64_t sub_1001CB758()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001CB77C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v16[2];

  v3 = v2;
  v6 = sub_10001A9A8(&qword_1010F46C0);
  __chkstk_darwin(v6);
  v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1010E9CF0 != -1)
    swift_once(&qword_1010E9CF0, sub_10058CADC);
  v9 = qword_1011B7160;
  v10 = sub_10001A9A8(&qword_1010F21C8);
  OS_dispatch_queue.sync<A>(execute:)(sub_1001D333C, v9, v10);
  sub_10088FD00(v16[1]);
  v12 = v11;
  swift_bridgeObjectRelease();
  v13 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v8, 1, 1, v13);
  v14 = (_QWORD *)swift_allocObject(&unk_10105DE80, 64, 7);
  v14[2] = 0;
  v14[3] = 0;
  v14[4] = v12;
  v14[5] = v3;
  v14[6] = a1;
  v14[7] = a2;
  swift_retain();
  swift_retain();
  sub_100691AC0((uint64_t)v8, (uint64_t)&unk_1010F21D8, (uint64_t)v14);
  return swift_release();
}

uint64_t sub_1001CB8DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v7[4] = a6;
  v7[5] = a7;
  v7[2] = a4;
  v7[3] = a5;
  v8 = *(_QWORD *)(type metadata accessor for BeaconObservation(0) - 8);
  v7[6] = v8;
  v7[7] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for UUID(0);
  v7[8] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v7[9] = v10;
  v7[10] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1001CB964, 0, 0);
}

uint64_t sub_1001CB964()
{
  _QWORD *v0;
  uint64_t v1;
  int64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v18;

  v1 = v0[2];
  v2 = *(_QWORD *)(v1 + 16);
  v3 = _swiftEmptyArrayStorage;
  if (v2)
  {
    v4 = v0[9];
    v5 = v0[6];
    v18 = _swiftEmptyArrayStorage;
    sub_10009A578(0, v2, 0);
    v6 = v1 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    v7 = *(_QWORD *)(v5 + 72);
    v3 = _swiftEmptyArrayStorage;
    do
    {
      v8 = v0[10];
      v10 = v0[7];
      v9 = v0[8];
      sub_10005972C(v6, v10, type metadata accessor for BeaconObservation);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v8, v10, v9);
      sub_1000126B0(v10, type metadata accessor for BeaconObservation);
      if ((swift_isUniquelyReferenced_nonNull_native(v3) & 1) == 0)
      {
        sub_10009A578(0, v3[2] + 1, 1);
        v3 = v18;
      }
      v12 = v3[2];
      v11 = v3[3];
      if (v12 >= v11 >> 1)
      {
        sub_10009A578(v11 > 1, v12 + 1, 1);
        v3 = v18;
      }
      v13 = v0[10];
      v14 = v0[8];
      v3[2] = v12 + 1;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v4 + 32))((unint64_t)v3+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(_QWORD *)(v4 + 72) * v12, v13, v14);
      v18 = v3;
      v6 += v7;
      --v2;
    }
    while (v2);
  }
  v15 = sub_10001B664((uint64_t)v3);
  v0[11] = v15;
  swift_bridgeObjectRelease();
  v16 = (_QWORD *)swift_task_alloc(dword_1010F092C);
  v0[12] = v16;
  *v16 = v0;
  v16[1] = sub_1001CBB1C;
  return sub_10014CE4C(v15);
}

uint64_t sub_1001CBB1C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 96);
  *(_QWORD *)(*(_QWORD *)v1 + 104) = a1;
  swift_task_dealloc(v2);
  swift_bridgeObjectRelease();
  return swift_task_switch(sub_1001CBB80, 0, 0);
}

uint64_t sub_1001CBB80()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v9;
  void (*v10)(_QWORD);
  uint64_t v11;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 104) + 16);
  v2 = swift_bridgeObjectRelease();
  if (v1)
  {
    v4 = *(_QWORD *)(v0 + 32);
    v3 = *(_QWORD *)(v0 + 40);
    v5 = swift_allocObject(&unk_10105DEA8, 32, 7);
    *(_QWORD *)(v0 + 112) = v5;
    *(_QWORD *)(v5 + 16) = v4;
    *(_QWORD *)(v5 + 24) = v3;
    v6 = async function pointer to unsafeBlocking<A>(_:)[1];
    swift_retain();
    v7 = (_QWORD *)swift_task_alloc(v6);
    *(_QWORD *)(v0 + 120) = v7;
    *v7 = v0;
    v7[1] = sub_1001CBCC0;
    return unsafeBlocking<A>(_:)(v7, sub_1001D3440, v5, (char *)&type metadata for () + 8);
  }
  else
  {
    v9 = static os_log_type_t.error.getter(v2);
    if (qword_1010EA300 != -1)
      swift_once(&qword_1010EA300, sub_100B5E204);
    v10 = *(void (**)(_QWORD))(v0 + 32);
    os_log(_:dso:log:_:_:)(v9, &_mh_execute_header, qword_1011B7DE0, "Not providing pending updates (candidate beacons). Enabled identifiers not found.", 81, 2, _swiftEmptyArrayStorage);
    v10(0);
    v11 = *(_QWORD *)(v0 + 56);
    swift_task_dealloc(*(_QWORD *)(v0 + 80));
    swift_task_dealloc(v11);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1001CBCC0()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 120));
  swift_release();
  return swift_task_switch(sub_1001CBD1C, 0, 0);
}

uint64_t sub_1001CBD1C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 56);
  swift_task_dealloc(*(_QWORD *)(v0 + 80));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

_QWORD *sub_1001CBD58()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v0 = sub_10014B710();
  swift_retain();
  v1 = sub_10000BCB4(v0);
  swift_bridgeObjectRelease();
  v2 = swift_release();
  v3 = static os_log_type_t.default.getter(v2);
  if (qword_1010EA300 != -1)
    swift_once(&qword_1010EA300, sub_100B5E204);
  v4 = qword_1011B7DE0;
  v5 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v6 = swift_allocObject(v5, 72, 7);
  *(_OWORD *)(v6 + 16) = xmmword_100E22B00;
  v11 = v1[2];
  v7 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  v9 = v8;
  *(_QWORD *)(v6 + 56) = &type metadata for String;
  *(_QWORD *)(v6 + 64) = sub_10001AA00();
  *(_QWORD *)(v6 + 32) = v7;
  *(_QWORD *)(v6 + 40) = v9;
  os_log(_:dso:log:_:_:)(v3, &_mh_execute_header, v4, "Beacon store has %@ records for identifiers that are pending.", 61, 2, v6, v11);
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t sub_1001CBEA8(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  _BYTE *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  _BYTE *v36;
  _BYTE v38[12];
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _BYTE *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _BYTE *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD aBlock[7];

  v8 = v7;
  v44 = a6;
  v45 = a7;
  v41 = a4;
  v42 = a5;
  v40 = a3;
  v39 = a2;
  v48 = type metadata accessor for DispatchWorkItemFlags(0);
  v51 = *(_QWORD *)(v48 - 8);
  __chkstk_darwin(v48);
  v47 = &v38[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = type metadata accessor for DispatchQoS(0);
  v49 = *(_QWORD *)(v11 - 8);
  v50 = v11;
  __chkstk_darwin(v11);
  v43 = &v38[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = type metadata accessor for UUID(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(_QWORD *)(v14 + 64);
  __chkstk_darwin(v13);
  v16 = &v38[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v46 = *(_QWORD *)(v8 + 56);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v14 + 16))(v16, a1, v13);
  v17 = *(unsigned __int8 *)(v14 + 80);
  v18 = (v17 + 24) & ~v17;
  v19 = v18 + v15;
  v20 = (v18 + v15) & 0xFFFFFFFFFFFFFFF8;
  v21 = (v20 + 31) & 0xFFFFFFFFFFFFFFF8;
  v22 = (v21 + 15) & 0xFFFFFFFFFFFFFFF8;
  v23 = swift_allocObject(&unk_10105DB38, v22 + 16, v17 | 7);
  v24 = v20 + v23;
  *(_QWORD *)(v23 + 16) = v8;
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(v14 + 32))(v23 + v18, v16, v13);
  *(_BYTE *)(v23 + v19) = v39;
  v25 = v41;
  *(_QWORD *)(v24 + 8) = v40;
  *(_QWORD *)(v24 + 16) = v25;
  v26 = v42;
  *(_QWORD *)(v23 + v21) = v42;
  v27 = (_QWORD *)(v23 + v22);
  v28 = v45;
  *v27 = v44;
  v27[1] = v28;
  aBlock[4] = sub_1001D1CC8;
  aBlock[5] = v23;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_10105DB50;
  v29 = _Block_copy(aBlock);
  swift_retain();
  swift_bridgeObjectRetain(v25);
  swift_errorRetain(v26);
  v30 = swift_retain();
  v31 = v43;
  static DispatchQoS.unspecified.getter(v30);
  v52 = _swiftEmptyArrayStorage;
  v32 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v33 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v34 = sub_10001371C();
  v36 = v47;
  v35 = v48;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v52, v33, v34, v48, v32);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v31, v36, v29);
  _Block_release(v29);
  (*(void (**)(_BYTE *, uint64_t))(v51 + 8))(v36, v35);
  (*(void (**)(_BYTE *, uint64_t))(v49 + 8))(v31, v50);
  return swift_release();
}

uint64_t sub_1001CC16C(uint64_t a1, char *a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD aBlock[6];

  v33 = a7;
  v34 = a8;
  v31 = a5;
  v32 = a6;
  v11 = type metadata accessor for DispatchWorkItemFlags(0);
  v37 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v13 = (char *)&v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for DispatchQoS(0);
  v35 = *(_QWORD *)(v14 - 8);
  v36 = v14;
  __chkstk_darwin(v14);
  v16 = (char *)&v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for DispatchQoS.QoSClass(0);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v20 = (char *)&v31 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_1001CC404(a2, a3, a4, v31, v32);
  sub_10000F4A0(0, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr);
  (*(void (**)(char *, _QWORD, uint64_t))(v18 + 104))(v20, enum case for DispatchQoS.QoSClass.default(_:), v17);
  v22 = (void *)static OS_dispatch_queue.global(qos:)(v20);
  (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
  v23 = swift_allocObject(&unk_10105DB88, 33, 7);
  v24 = v34;
  *(_QWORD *)(v23 + 16) = v33;
  *(_QWORD *)(v23 + 24) = v24;
  *(_BYTE *)(v23 + 32) = v21 & 1;
  aBlock[4] = sub_1001D1D50;
  aBlock[5] = v23;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_10105DBA0;
  v25 = _Block_copy(aBlock);
  v26 = swift_retain();
  static DispatchQoS.unspecified.getter(v26);
  v38 = _swiftEmptyArrayStorage;
  v27 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v28 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v29 = sub_10001371C();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v38, v28, v29, v11, v27);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v16, v13, v25);
  _Block_release(v25);

  (*(void (**)(char *, uint64_t))(v37 + 8))(v13, v11);
  (*(void (**)(char *, uint64_t))(v35 + 8))(v16, v36);
  return swift_release();
}

uint64_t sub_1001CC404(char *a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  void *v45;
  id v46;
  unsigned int v47;
  uint64_t v48;
  char *v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  char **v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  _QWORD *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  unint64_t v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  char v125;
  char *v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  __int128 v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  _QWORD v143[3];
  uint64_t v144;
  uint64_t v145;

  v136 = a5;
  v10 = type metadata accessor for UUID(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v135 = v12;
  v13 = (char *)&v126 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for DispatchWorkItemFlags(0);
  v133 = *(_QWORD *)(v14 - 8);
  v134 = v14;
  __chkstk_darwin(v14);
  v16 = (char *)&v126 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10080B648((uint64_t)a1, (uint64_t)&v137);
  if (v138)
  {
    v126 = v16;
    v129 = v11;
    v130 = v13;
    v131 = v10;
    v127 = a4;
    v128 = (char *)a3;
    v132 = v5;
    v17 = sub_10000F9FC(&v137, (uint64_t)v143);
    v18 = static os_log_type_t.default.getter(v17);
    if (qword_1010EA300 != -1)
      swift_once(&qword_1010EA300, sub_100B5E204);
    v19 = qword_1011B7DE0;
    v20 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v21 = swift_allocObject(v20, 112, 7);
    *(_OWORD *)(v21 + 16) = xmmword_100E22B10;
    v22 = UUID.uuidString.getter(v21);
    v24 = v23;
    *(_QWORD *)(v21 + 56) = &type metadata for String;
    v25 = sub_10001AA00();
    *(_QWORD *)(v21 + 64) = v25;
    *(_QWORD *)(v21 + 32) = v22;
    *(_QWORD *)(v21 + 40) = v24;
    sub_1006EB054(a2);
    *(_QWORD *)(v21 + 96) = &type metadata for String;
    *(_QWORD *)(v21 + 104) = v25;
    *(_QWORD *)(v21 + 72) = v26;
    *(_QWORD *)(v21 + 80) = v27;
    os_log(_:dso:log:_:_:)(v18, &_mh_execute_header, v19, "Updating beacon (UUID: %@) with observation: %@", 47, 2, v21);
    swift_bridgeObjectRelease();
    if (qword_1010E9CF0 != -1)
      swift_once(&qword_1010E9CF0, sub_10058CADC);
    v28 = qword_1011B7160;
    v29 = sub_1001D1ED0(qword_1011B7160, a1, a2, v136);
    switch(a2)
    {
      case 6:
        type metadata accessor for Transaction(0);
        v30 = v129;
        v32 = v130;
        v31 = v131;
        (*(void (**)(char *, char *, uint64_t))(v129 + 16))(v130, a1, v131);
        v33 = *(unsigned __int8 *)(v30 + 80);
        v34 = (v33 + 24) & ~v33;
        v35 = swift_allocObject(&unk_10105DC28, v34 + v135, v33 | 7);
        *(_QWORD *)(v35 + 16) = v132;
        (*(void (**)(uint64_t, char *, uint64_t))(v30 + 32))(v35 + v34, v32, v31);
        swift_retain();
        static Transaction.asyncTask(name:block:)("analyticsFirmwareUpdateInProgress", 33, 2, &unk_1010F2198, v35);
        goto LABEL_32;
      case 7:
        sub_100030784((uint64_t)v143, (uint64_t)&v137);
        if (qword_1010E9F58 != -1)
          swift_once(&qword_1010E9F58, sub_1007C3ED8);
        v142 = qword_1011B77C0;
        v140 = 0;
        v141 = 0;
        v45 = (void *)objc_opt_self(FMSystemInfo);
        swift_retain();
        v46 = objc_msgSend(v45, "sharedInstance");
        v47 = objc_msgSend(v46, "isInternalBuild");

        v48 = v127;
        v49 = v126;
        if (v47)
          sub_1007C4D38((uint64_t)a1);
        v50 = sub_1001D2C80(&v137);
        v51 = static DispatchWorkItemFlags.barrier.getter(v50);
        __chkstk_darwin(v51);
        *(&v126 - 4) = (char *)v28;
        *(&v126 - 3) = a1;
        *(&v126 - 2) = (char *)sub_1001CD040;
        *(&v126 - 1) = 0;
        OS_dispatch_queue.sync<A>(flags:execute:)(v49, sub_1001D3478);
        (*(void (**)(char *, uint64_t))(v133 + 8))(v49, v134);
        sub_100030784((uint64_t)v143, (uint64_t)&v137);
        v52 = v132;
        if (v48)
        {
          v136 = (uint64_t)v128;
          v53 = v48;
        }
        else
        {
          v98 = v138;
          v99 = v139;
          sub_10001AA44(&v137, v138);
          v136 = (*(uint64_t (**)(uint64_t, uint64_t))(v99 + 24))(v98, v99);
          v53 = v100;
        }
        swift_bridgeObjectRetain(v48);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v137);
        type metadata accessor for Transaction(0);
        v101 = v129;
        v102 = v130;
        v103 = a1;
        v104 = v131;
        (*(void (**)(char *, char *, uint64_t))(v129 + 16))(v130, v103, v131);
        v105 = *(unsigned __int8 *)(v101 + 80);
        v106 = (v105 + 24) & ~v105;
        v107 = (v135 + v106 + 7) & 0xFFFFFFFFFFFFFFF8;
        v108 = swift_allocObject(&unk_10105DC50, v107 + 16, v105 | 7);
        *(_QWORD *)(v108 + 16) = v52;
        (*(void (**)(uint64_t, char *, uint64_t))(v101 + 32))(v108 + v106, v102, v104);
        v109 = (_QWORD *)(v108 + v107);
        *v109 = v136;
        v109[1] = v53;
        swift_retain();
        swift_bridgeObjectRetain(v53);
        static Transaction.asyncTask(name:block:)("analyticsFirmwareUpdateComplete", 31, 2, &unk_1010F21A8, v108);
        swift_bridgeObjectRelease();
        swift_release();
        if (!v48)
        {
          _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v143);
          goto LABEL_11;
        }
        LOBYTE(v44) = sub_1001CD044((uint64_t)v128, v48, (uint64_t)v143);
LABEL_29:
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v143);
        break;
      case 8:
        v54 = static os_log_type_t.default.getter(v29);
        v55 = qword_1011B7DE0;
        v56 = swift_allocObject(v20, 152, 7);
        *(_OWORD *)(v56 + 16) = xmmword_100E221E0;
        v58 = v144;
        v57 = v145;
        sub_10001AA44(v143, v144);
        v59 = v130;
        v60 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v57 + 8) + 8) + 32))(v58);
        v61 = UUID.uuidString.getter(v60);
        v63 = v62;
        (*(void (**)(char *, uint64_t))(v129 + 8))(v59, v131);
        *(_QWORD *)(v56 + 56) = &type metadata for String;
        *(_QWORD *)(v56 + 64) = v25;
        *(_QWORD *)(v56 + 32) = v61;
        *(_QWORD *)(v56 + 40) = v63;
        v64 = v144;
        v65 = v145;
        sub_10001AA44(v143, v144);
        v66 = (*(uint64_t (**)(uint64_t, uint64_t))(v65 + 24))(v64, v65);
        *(_QWORD *)(v56 + 96) = &type metadata for String;
        *(_QWORD *)(v56 + 104) = v25;
        *(_QWORD *)(v56 + 72) = v66;
        *(_QWORD *)(v56 + 80) = v67;
        *(_QWORD *)&v137 = v136;
        swift_errorRetain(v136);
        v68 = sub_10001A9A8((uint64_t *)&unk_1010EB920);
        v69 = String.init<A>(describing:)(&v137, v68);
        *(_QWORD *)(v56 + 136) = &type metadata for String;
        *(_QWORD *)(v56 + 144) = v25;
        *(_QWORD *)(v56 + 112) = v69;
        *(_QWORD *)(v56 + 120) = v70;
        os_log(_:dso:log:_:_:)(v54, &_mh_execute_header, v55, "Firmware Update failed beacon (UUID: %@), systemVersion: %@, error: %@", 70, 2, v56);
        v71 = swift_bridgeObjectRelease();
        v72 = qword_1011B7160;
        v73 = v126;
        v74 = static DispatchWorkItemFlags.barrier.getter(v71);
        __chkstk_darwin(v74);
        *(&v126 - 4) = (char *)v72;
        *(&v126 - 3) = a1;
        *(&v126 - 2) = (char *)sub_1001CD040;
        *(&v126 - 1) = 0;
        OS_dispatch_queue.sync<A>(flags:execute:)(v73, sub_100151538);
        (*(void (**)(char *, uint64_t))(v133 + 8))(v73, v134);
        sub_100030784((uint64_t)v143, (uint64_t)&v137);
        v75 = v127;
        if (v127)
        {
          v76 = v127;
          v77 = v132;
          v78 = (uint64_t)v128;
        }
        else
        {
          v110 = v138;
          v111 = v139;
          sub_10001AA44(&v137, v138);
          v78 = (*(uint64_t (**)(uint64_t, uint64_t))(v111 + 24))(v110, v111);
          v76 = v112;
          v77 = v132;
        }
        swift_bridgeObjectRetain(v75);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v137);
        v134 = type metadata accessor for Transaction(0);
        v113 = v129;
        v114 = v130;
        v115 = a1;
        v116 = v131;
        (*(void (**)(char *, char *, uint64_t))(v129 + 16))(v130, v115, v131);
        v117 = *(unsigned __int8 *)(v113 + 80);
        v118 = (v117 + 24) & ~v117;
        v119 = (v118 + v135 + 7) & 0xFFFFFFFFFFFFFFF8;
        v120 = (v118 + v135 + 31) & 0xFFFFFFFFFFFFFFF8;
        v121 = swift_allocObject(&unk_10105DBD8, v120 + 8, v117 | 7);
        *(_QWORD *)(v121 + 16) = v77;
        (*(void (**)(uint64_t, char *, uint64_t))(v113 + 32))(v121 + v118, v114, v116);
        v122 = v121 + v119;
        *(_QWORD *)v122 = v78;
        *(_QWORD *)(v122 + 8) = v76;
        *(_BYTE *)(v122 + 16) = 0;
        v123 = v136;
        *(_QWORD *)(v121 + v120) = v136;
        swift_retain();
        swift_errorRetain(v123);
        swift_bridgeObjectRetain(v76);
        static Transaction.asyncTask(name:block:)("analyticsFirmwareUpdateFailed", 29, 2, &unk_1010F2178, v121);
        swift_bridgeObjectRelease();
LABEL_32:
        swift_release();
        goto LABEL_33;
      case 11:
        v79 = v126;
        v80 = static DispatchWorkItemFlags.barrier.getter(v29);
        __chkstk_darwin(v80);
        *(&v126 - 4) = (char *)v28;
        *(&v126 - 3) = a1;
        *(&v126 - 2) = (char *)sub_1001CD040;
        *(&v126 - 1) = 0;
        OS_dispatch_queue.sync<A>(flags:execute:)(v79, sub_1001D3478);
        (*(void (**)(char *, uint64_t))(v133 + 8))(v79, v134);
        type metadata accessor for Transaction(0);
        v81 = v129;
        v83 = v130;
        v82 = v131;
        (*(void (**)(char *, char *, uint64_t))(v129 + 16))(v130, a1, v131);
        v84 = *(unsigned __int8 *)(v81 + 80);
        v85 = (v84 + 24) & ~v84;
        v86 = (v135 + v85 + 7) & 0xFFFFFFFFFFFFFFF8;
        v87 = swift_allocObject(&unk_10105DC00, v86 + 16, v84 | 7);
        *(_QWORD *)(v87 + 16) = v132;
        (*(void (**)(uint64_t, char *, uint64_t))(v81 + 32))(v87 + v85, v83, v82);
        v88 = (char **)(v87 + v86);
        v89 = v127;
        *v88 = v128;
        v88[1] = (char *)v89;
        swift_bridgeObjectRetain(v89);
        swift_retain();
        static Transaction.asyncTask(name:block:)("analyticsFirmwareUpdateNotRequired", 34, 2, &unk_1010F2188, v87);
        swift_release();
        if (v89)
        {
          v90 = v144;
          v91 = v145;
          sub_10001AA44(v143, v144);
          v93 = (*(uint64_t (**)(uint64_t, uint64_t))(v91 + 24))(v90, v91);
          if ((char *)v93 == v128 && v92 == v127)
          {
            swift_bridgeObjectRelease();
          }
          else
          {
            v125 = _stringCompareWithSmolCheck(_:_:expecting:)(v128, v127, v93, v92, 0);
            swift_bridgeObjectRelease();
            if ((v125 & 1) == 0)
              sub_1001CD044((uint64_t)v128, v127, (uint64_t)v143);
          }
        }
        goto LABEL_33;
      case 13:
        v44 = *(char **)(v132 + 176);
        if (!v44)
          goto LABEL_29;
        v94 = swift_retain();
        v95 = static os_log_type_t.default.getter(v94);
        os_log(_:dso:log:_:_:)(v95, &_mh_execute_header, qword_1011B7DE0, "#Accessory - marking as fw update available", 43, 2, _swiftEmptyArrayStorage);
        v96 = type metadata accessor for Transaction(0);
        __chkstk_darwin(v96);
        *(&v126 - 4) = v44;
        *(&v126 - 3) = a1;
        v97 = v127;
        *(&v126 - 2) = v128;
        *(&v126 - 1) = (char *)v97;
        static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd.AccessoryFirmwareUpdate.updateAvailable", 69, 2, sub_1001D2A04, &v126 - 6, (char *)&type metadata for () + 8);
        swift_release();
LABEL_33:
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v143);
        LOBYTE(v44) = 1;
        return v44 & 1;
      default:
        goto LABEL_33;
    }
  }
  else
  {
    v36 = sub_100004048((uint64_t)&v137, (uint64_t *)&unk_1010EE310);
    v37 = static os_log_type_t.error.getter(v36);
    if (qword_1010EA300 != -1)
      swift_once(&qword_1010EA300, sub_100B5E204);
    v38 = qword_1011B7DE0;
    v39 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v40 = swift_allocObject(v39, 72, 7);
    *(_OWORD *)(v40 + 16) = xmmword_100E22B00;
    v41 = UUID.uuidString.getter(v40);
    v43 = v42;
    *(_QWORD *)(v40 + 56) = &type metadata for String;
    *(_QWORD *)(v40 + 64) = sub_10001AA00();
    *(_QWORD *)(v40 + 32) = v41;
    *(_QWORD *)(v40 + 40) = v43;
    os_log(_:dso:log:_:_:)(v37, &_mh_execute_header, v38, "No record found to update observation %@", 40, 2, v40);
    swift_bridgeObjectRelease();
LABEL_11:
    LOBYTE(v44) = 0;
  }
  return v44 & 1;
}

uint64_t sub_1001CD044(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t (*v27)(uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _BYTE v54[40];
  _QWORD v55[5];

  v4 = v3;
  v50 = type metadata accessor for SharedBeaconRecord(0);
  v8 = __chkstk_darwin(v50);
  v48 = (uint64_t)&v46 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v49 = (char *)&v46 - v10;
  v53 = type metadata accessor for OwnedBeaconRecord(0);
  v11 = __chkstk_darwin(v53);
  v51 = (uint64_t)&v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v46 - v14;
  v16 = static os_log_type_t.default.getter(v13);
  if (qword_1010EA300 != -1)
    swift_once(&qword_1010EA300, sub_100B5E204);
  v17 = qword_1011B7DE0;
  v47 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v18 = swift_allocObject(v47, 112, 7);
  *(_OWORD *)(v18 + 16) = xmmword_100E22B10;
  *(_QWORD *)(v18 + 56) = &type metadata for String;
  v19 = sub_10001AA00();
  *(_QWORD *)(v18 + 64) = v19;
  *(_QWORD *)(v18 + 32) = a1;
  *(_QWORD *)(v18 + 40) = a2;
  sub_100030784(a3, (uint64_t)v55);
  swift_bridgeObjectRetain(a2);
  v20 = sub_10001A9A8((uint64_t *)&unk_1010F7720);
  v52 = a1;
  v21 = v20;
  v22 = String.init<A>(describing:)(v55, v20);
  *(_QWORD *)(v18 + 96) = &type metadata for String;
  *(_QWORD *)(v18 + 104) = v19;
  *(_QWORD *)(v18 + 72) = v22;
  *(_QWORD *)(v18 + 80) = v23;
  os_log(_:dso:log:_:_:)(v16, &_mh_execute_header, v17, "Updating system version to %@ for record %@", 43, 2, v18);
  swift_bridgeObjectRelease();
  v24 = PressuredExitTransactionManager.begin(_:)("com.apple.icloud.searchpartyd.FirmwareUpdateProtocol.updateComplete", 67, 2);
  v25 = swift_allocObject(&unk_10105DCF0, 32, 7);
  *(_QWORD *)(v25 + 16) = v4;
  *(_QWORD *)(v25 + 24) = v24;
  v26 = a3;
  sub_100030784(a3, (uint64_t)v55);
  swift_retain_n(v24, 2);
  swift_retain();
  if (swift_dynamicCast(v15, v55, v21, v53, 0))
  {
    v27 = type metadata accessor for OwnedBeaconRecord;
    v28 = (uint64_t)v15;
    v29 = v51;
    sub_1000126EC(v28, v51, type metadata accessor for OwnedBeaconRecord);
    v30 = swift_allocObject(&unk_10105DD68, 32, 7);
    *(_QWORD *)(v30 + 16) = v52;
    *(_QWORD *)(v30 + 24) = a2;
    v31 = swift_allocObject(&unk_10105DD90, 48, 7);
    *(_QWORD *)(v31 + 16) = sub_1001D3184;
    *(_QWORD *)(v31 + 24) = v25;
    *(_QWORD *)(v31 + 32) = sub_1001D3178;
    *(_QWORD *)(v31 + 40) = v24;
    swift_bridgeObjectRetain(a2);
    swift_retain();
    swift_retain();
    sub_1007A09E0(v29, 0, (void (*)(uint64_t))sub_1001D31E0, v30, (void (*)(uint64_t))sub_1001D3218, (void (*)(uint64_t))v31);
    swift_release();
    swift_release_n(v24, 2);
    swift_release();
    swift_release();
    v32 = v29;
  }
  else
  {
    v33 = v52;
    v34 = (uint64_t)v49;
    v35 = swift_dynamicCast(v49, v55, v21, v50, 0);
    if (!(_DWORD)v35)
    {
      v40 = static os_log_type_t.error.getter(v35);
      v41 = qword_1011B7DE0;
      v42 = swift_allocObject(v47, 72, 7);
      *(_OWORD *)(v42 + 16) = xmmword_100E22B00;
      sub_100030784(v26, (uint64_t)v54);
      v43 = String.init<A>(describing:)(v54, v21);
      *(_QWORD *)(v42 + 56) = &type metadata for String;
      *(_QWORD *)(v42 + 64) = v19;
      *(_QWORD *)(v42 + 32) = v43;
      *(_QWORD *)(v42 + 40) = v44;
      os_log(_:dso:log:_:_:)(v40, &_mh_execute_header, v41, "Unexpected record type %@", 25, 2, v42);
      swift_bridgeObjectRelease();
      Transaction.end()();
      swift_release();
      swift_release_n(v24, 2);
      v39 = 0;
      goto LABEL_9;
    }
    v27 = type metadata accessor for SharedBeaconRecord;
    v36 = v48;
    sub_1000126EC(v34, v48, type metadata accessor for SharedBeaconRecord);
    v37 = swift_allocObject(&unk_10105DD18, 32, 7);
    *(_QWORD *)(v37 + 16) = v33;
    *(_QWORD *)(v37 + 24) = a2;
    v38 = swift_allocObject(&unk_10105DD40, 48, 7);
    *(_QWORD *)(v38 + 16) = sub_1001D3184;
    *(_QWORD *)(v38 + 24) = v25;
    *(_QWORD *)(v38 + 32) = sub_1001D3178;
    *(_QWORD *)(v38 + 40) = v24;
    swift_bridgeObjectRetain(a2);
    swift_retain();
    swift_retain();
    sub_1007A0FE4(v36, 0, (void (*)(uint64_t))sub_1001D31B0, v37, (void (*)(uint64_t))sub_1001D31BC, (void (*)(uint64_t))v38);
    swift_release();
    swift_release_n(v24, 2);
    swift_release();
    swift_release();
    v32 = v36;
  }
  sub_1000126B0(v32, v27);
  v39 = 1;
LABEL_9:
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v55);
  return v39;
}

BOOL sub_1001CD548(uint64_t a1)
{
  return *(_BYTE *)(a1 + *(int *)(type metadata accessor for BeaconObservation(0) + 24)) == 10;
}

uint64_t sub_1001CD57C(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;

  v2[11] = a1;
  v2[12] = a2;
  v3 = sub_10001A9A8((uint64_t *)&unk_1010F47C0);
  v2[13] = v3;
  v2[14] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for OwnedBeaconRecord(0);
  v2[15] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v2[16] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v2[17] = v6;
  v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[18] = swift_task_alloc(v7);
  v2[19] = swift_task_alloc(v7);
  v8 = (*(_QWORD *)(*(_QWORD *)(sub_10001A9A8(&qword_1010EBE20) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[20] = swift_task_alloc(v8);
  v2[21] = swift_task_alloc(v8);
  v9 = type metadata accessor for UUID(0);
  v2[22] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v2[23] = v10;
  v11 = *(_QWORD *)(v10 + 64);
  v2[24] = v11;
  v12 = (v11 + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[25] = swift_task_alloc(v12);
  v2[26] = swift_task_alloc(v12);
  return swift_task_switch(sub_1001CD688, 0, 0);
}

uint64_t sub_1001CD688()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);

  v1 = v0[26];
  v2 = v0[22];
  v3 = v0[23];
  v4 = v0[12];
  v5 = *(_QWORD *)(v0[11] + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_firmwareUpdateService);
  v0[27] = v5;
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v0[28] = v6;
  v6(v1, v4, v2);
  return swift_task_switch(sub_1001CD6E8, v5, 0);
}

uint64_t sub_1001CD6E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 216);
  swift_beginAccess(v1 + 144, v0 + 16, 0, 0);
  v2 = *(_QWORD *)(v1 + 144);
  *(_QWORD *)(v0 + 232) = v2;
  swift_bridgeObjectRetain(v2);
  return swift_task_switch(sub_1001CD740, 0, 0);
}

uint64_t sub_1001CD740()
{
  uint64_t v0;
  unint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (*(_QWORD *)(*(_QWORD *)(v0 + 232) + 16) && (v1 = sub_100003FB0(*(_QWORD *)(v0 + 208)), (v2 & 1) != 0))
  {
    v3 = *(_QWORD *)(v0 + 208);
    v4 = *(_QWORD *)(v0 + 176);
    v5 = *(_QWORD *)(v0 + 184);
    v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v0 + 232) + 56) + 8 * v1);
    *(_QWORD *)(v0 + 240) = v6;
    swift_retain();
    swift_bridgeObjectRelease();
    v7 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
    *(_QWORD *)(v0 + 248) = v7;
    v7(v3, v4);
    return swift_task_switch(sub_1001CD858, v6, 0);
  }
  else
  {
    v9 = *(_QWORD *)(v0 + 208);
    v10 = *(_QWORD *)(v0 + 176);
    v11 = *(_QWORD *)(v0 + 184);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
    v12 = *(_QWORD *)(v0 + 200);
    v14 = *(_QWORD *)(v0 + 160);
    v13 = *(_QWORD *)(v0 + 168);
    v16 = *(_QWORD *)(v0 + 144);
    v15 = *(_QWORD *)(v0 + 152);
    v17 = *(_QWORD *)(v0 + 112);
    swift_task_dealloc(*(_QWORD *)(v0 + 208));
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1001CD858()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 256) = sub_100CBE904(0xD000000000000013, 0x8000000100EC9290);
  return swift_task_switch(sub_1001CD8B0, 0, 0);
}

uint64_t sub_1001CD8B0()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = *(void **)(v0 + 256);
  if (v1)
  {
    v2 = objc_opt_self(NSString);
    v3 = swift_dynamicCastObjCClass(v1, v2);
    *(_QWORD *)(v0 + 264) = v3;
    if (v3)
      return swift_task_switch(sub_1001CD994, *(_QWORD *)(v0 + 240), 0);
    swift_release();

  }
  else
  {
    swift_release();
  }
  v5 = *(_QWORD *)(v0 + 200);
  v7 = *(_QWORD *)(v0 + 160);
  v6 = *(_QWORD *)(v0 + 168);
  v9 = *(_QWORD *)(v0 + 144);
  v8 = *(_QWORD *)(v0 + 152);
  v10 = *(_QWORD *)(v0 + 112);
  swift_task_dealloc(*(_QWORD *)(v0 + 208));
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001CD994()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 272) = sub_100CBE904(0x496E6F6973736573, 0xE900000000000044);
  return swift_task_switch(sub_1001CD9EC, 0, 0);
}

uint64_t sub_1001CD9EC()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = *(void **)(v0 + 272);
  if (v1)
  {
    v2 = objc_opt_self(NSString);
    v3 = swift_dynamicCastObjCClass(v1, v2);
    *(_QWORD *)(v0 + 280) = v3;
    if (v3)
      return swift_task_switch(sub_1001CDADC, *(_QWORD *)(v0 + 240), 0);
    v5 = *(void **)(v0 + 256);
    swift_release();

  }
  else
  {
    v5 = *(void **)(v0 + 256);
    swift_release();
  }

  v6 = *(_QWORD *)(v0 + 200);
  v8 = *(_QWORD *)(v0 + 160);
  v7 = *(_QWORD *)(v0 + 168);
  v10 = *(_QWORD *)(v0 + 144);
  v9 = *(_QWORD *)(v0 + 152);
  v11 = *(_QWORD *)(v0 + 112);
  swift_task_dealloc(*(_QWORD *)(v0 + 208));
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001CDADC()
{
  uint64_t v0;

  sub_100CBF9E8(*(_QWORD *)(v0 + 240));
  *(_QWORD *)(v0 + 288) = 0;
  return swift_task_switch(sub_1001CDB40, 0, 0);
}

uint64_t sub_1001CDB40()
{
  _QWORD *v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  char *v4;
  uint64_t v5;
  void (*v6)(char *, uint64_t, uint64_t, uint64_t);

  v0[37] = v0[36];
  v1 = type metadata accessor for AnalyticsEvent(0);
  v2 = (char *)swift_allocObject(v1, *(unsigned int *)(v1 + 48), *(unsigned __int16 *)(v1 + 52));
  v0[38] = v2;
  swift_defaultActor_initialize(v2);
  v3 = sub_1006B8B38((uint64_t)_swiftEmptyArrayStorage);
  *((_QWORD *)v2 + 14) = v3;
  UUID.init()(v3);
  v4 = &v2[OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_startTime];
  v5 = type metadata accessor for DispatchTime(0);
  v0[39] = v5;
  v6 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56);
  v0[40] = v6;
  v6(v4, 1, 1, v5);
  v6(&v2[OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_endTime], 1, 1, v5);
  *((_QWORD *)v2 + 15) = 0xD000000000000032;
  *((_QWORD *)v2 + 16) = 0x8000000100ECAEE0;
  return swift_task_switch(sub_1001CDC44, v2, 0);
}

uint64_t sub_1001CDC44(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  void (*v3)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = v1[39];
  v3 = (void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v1[40];
  v4 = v1[38];
  v6 = v1[20];
  v5 = v1[21];
  static DispatchTime.now()(a1);
  v3(v5, 0, 1, v2);
  sub_1001D2DE0(v5, v6);
  v7 = v4 + OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_startTime;
  swift_beginAccess(v4 + OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_startTime, v1 + 5, 33, 0);
  sub_100033150(v6, v7);
  swift_endAccess(v1 + 5);
  return swift_task_switch(sub_1001CDCF8, 0, 0);
}

uint64_t sub_1001CDCF8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v2 = *(_QWORD *)(v0 + 192);
  v1 = *(_QWORD *)(v0 + 200);
  v3 = *(_QWORD *)(v0 + 176);
  v4 = *(_QWORD *)(v0 + 184);
  v5 = *(_QWORD *)(v0 + 88);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v0 + 224))(v1, *(_QWORD *)(v0 + 96), v3);
  v6 = *(unsigned __int8 *)(v4 + 80);
  v7 = (v6 + 24) & ~v6;
  v8 = swift_allocObject(&unk_10105DC78, v7 + v2, v6 | 7);
  *(_QWORD *)(v0 + 328) = v8;
  *(_QWORD *)(v8 + 16) = v5;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v8 + v7, v1, v3);
  v9 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v10 = (_QWORD *)swift_task_alloc(v9);
  *(_QWORD *)(v0 + 336) = v10;
  *v10 = v0;
  v10[1] = sub_1001CDDCC;
  return unsafeBlocking<A>(_:)(*(_QWORD *)(v0 + 112), sub_1001D2E2C, v8, *(_QWORD *)(v0 + 104));
}

uint64_t sub_1001CDDCC()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 336));
  swift_release();
  return swift_task_switch(sub_1001CDE28, 0, 0);
}

uint64_t sub_1001CDE28()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t (*v14)(_QWORD);

  v1 = *(_QWORD *)(v0 + 128);
  v2 = *(_QWORD *)(v0 + 112);
  if ((*(unsigned int (**)(uint64_t, uint64_t, _QWORD))(v1 + 48))(v2, 1, *(_QWORD *)(v0 + 120)) == 1)
  {
    sub_100004048(v2, (uint64_t *)&unk_1010F47C0);
    v14 = (uint64_t (*)(_QWORD))((char *)&dword_10111D5C8 + dword_10111D5C8);
    v3 = (_QWORD *)swift_task_alloc(unk_10111D5CC);
    *(_QWORD *)(v0 + 344) = v3;
    *v3 = v0;
    v3[1] = sub_1001CDFBC;
    return v14(*(_QWORD *)(v0 + 304));
  }
  else
  {
    v6 = *(_QWORD *)(v0 + 144);
    v5 = *(_QWORD *)(v0 + 152);
    v7 = *(_QWORD *)(v0 + 136);
    v8 = *(_QWORD *)(v0 + 88);
    sub_1000126EC(v2, v5, type metadata accessor for OwnedBeaconRecord);
    sub_10005972C(v5, v6, type metadata accessor for OwnedBeaconRecord);
    LODWORD(v9) = *(_DWORD *)(v1 + 80);
    *(_DWORD *)(v0 + 392) = v9;
    v9 = v9;
    v10 = (v9 + 24) & ~v9;
    v11 = swift_allocObject(&unk_10105DCA0, v10 + v7, v9 | 7);
    *(_QWORD *)(v0 + 352) = v11;
    *(_QWORD *)(v11 + 16) = v8;
    sub_1000126EC(v6, v11 + v10, type metadata accessor for OwnedBeaconRecord);
    v12 = async function pointer to unsafeBlocking<A>(_:)[1];
    swift_retain();
    v13 = (_QWORD *)swift_task_alloc(v12);
    *(_QWORD *)(v0 + 360) = v13;
    *v13 = v0;
    v13[1] = sub_1001CE018;
    return unsafeBlocking<A>(_:)(v0 + 396, sub_1001D2E34, v11, &type metadata for Bool);
  }
}

uint64_t sub_1001CDFBC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  swift_task_dealloc(*(_QWORD *)(*v1 + 344));
  if (v0)
    swift_errorRelease(v0);
  return swift_task_switch(sub_1001CE304, *(_QWORD *)(v2 + 216), 0);
}

uint64_t sub_1001CE018()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 360));
  swift_release();
  return swift_task_switch(sub_1001CE074, 0, 0);
}

uint64_t sub_1001CE074()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v1 = *(unsigned __int8 *)(v0 + 392);
  v3 = *(_QWORD *)(v0 + 144);
  v2 = *(_QWORD *)(v0 + 152);
  v4 = *(_QWORD *)(v0 + 88);
  v5 = (v1 + 24) & ~v1;
  v6 = v5 + *(_QWORD *)(v0 + 136);
  v7 = v1 | 7;
  *(_BYTE *)(v0 + 398) = *(_BYTE *)(v0 + 396);
  sub_10005972C(v2, v3, type metadata accessor for OwnedBeaconRecord);
  v8 = swift_allocObject(&unk_10105DCC8, v6, v7);
  *(_QWORD *)(v0 + 368) = v8;
  *(_QWORD *)(v8 + 16) = v4;
  sub_1000126EC(v3, v8 + v5, type metadata accessor for OwnedBeaconRecord);
  v9 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v10 = (_QWORD *)swift_task_alloc(v9);
  *(_QWORD *)(v0 + 376) = v10;
  *v10 = v0;
  v10[1] = sub_1001CE16C;
  return unsafeBlocking<A>(_:)(v0 + 397, sub_1001D3124, v8, &type metadata for Bool);
}

uint64_t sub_1001CE16C()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 376));
  swift_release();
  return swift_task_switch(sub_1001CE1C8, 0, 0);
}

uint64_t sub_1001CE1C8()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;

  v1 = *(_BYTE *)(v0 + 398);
  v2 = *(_QWORD *)(v0 + 304);
  v3 = *(_QWORD *)(v0 + 280);
  v4 = *(_QWORD *)(v0 + 264);
  v5 = *(_QWORD *)(v0 + 152);
  v6 = *(_BYTE *)(v0 + 397);
  v7 = swift_task_alloc(48);
  *(_QWORD *)(v0 + 384) = v7;
  *(_QWORD *)(v7 + 16) = v3;
  *(_QWORD *)(v7 + 24) = v5;
  *(_QWORD *)(v7 + 32) = v4;
  *(_BYTE *)(v7 + 40) = v1;
  *(_BYTE *)(v7 + 41) = v6;
  return swift_task_switch(sub_1001CE244, v2, 0);
}

uint64_t sub_1001CE244()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v1 = *(_QWORD *)(v0 + 296);
  sub_100CCC4A0((uint64_t (*)(uint64_t))sub_1001D3164);
  v2 = *(_QWORD *)(v0 + 384);
  if (v1)
  {
    swift_errorRelease(v1);
    swift_task_dealloc(v2);
    v3 = sub_1001D3494;
  }
  else
  {
    swift_task_dealloc(*(_QWORD *)(v0 + 384));
    v3 = sub_1001CE2C0;
  }
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1001CE2C0()
{
  uint64_t v0;

  sub_1000126B0(*(_QWORD *)(v0 + 152), type metadata accessor for OwnedBeaconRecord);
  return swift_task_switch(sub_1001CE304, *(_QWORD *)(v0 + 216), 0);
}

uint64_t sub_1001CE304()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v8;

  v1 = *(_QWORD *)(v0 + 304);
  v2 = *(void (**)(uint64_t, uint64_t))(v0 + 248);
  v3 = *(_QWORD *)(v0 + 216);
  v4 = *(_QWORD *)(v0 + 200);
  v5 = *(_QWORD *)(v0 + 176);
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v0 + 224))(v4, *(_QWORD *)(v0 + 96), v5);
  swift_beginAccess(v3 + 152, v0 + 64, 33, 0);
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v3 + 152));
  v8 = *(_QWORD *)(v3 + 152);
  *(_QWORD *)(v3 + 152) = 0x8000000000000000;
  sub_10010A294(v1, v4, isUniquelyReferenced_nonNull_native);
  *(_QWORD *)(v3 + 152) = v8;
  swift_bridgeObjectRelease();
  v2(v4, v5);
  swift_endAccess(v0 + 64);
  return swift_task_switch(sub_1001CE3E4, 0, 0);
}

uint64_t sub_1001CE3E4()
{
  uint64_t v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = *(void **)(v0 + 272);
  v2 = *(void **)(v0 + 256);
  v3 = *(_QWORD *)(v0 + 240);
  swift_release(*(_QWORD *)(v0 + 304));
  swift_release(v3);

  v4 = *(_QWORD *)(v0 + 200);
  v6 = *(_QWORD *)(v0 + 160);
  v5 = *(_QWORD *)(v0 + 168);
  v8 = *(_QWORD *)(v0 + 144);
  v7 = *(_QWORD *)(v0 + 152);
  v9 = *(_QWORD *)(v0 + 112);
  swift_task_dealloc(*(_QWORD *)(v0 + 208));
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001CE484()
{
  _QWORD *v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  char *v4;
  uint64_t v5;
  void (*v6)(char *, uint64_t, uint64_t, uint64_t);

  v0[37] = 0;
  v1 = type metadata accessor for AnalyticsEvent(0);
  v2 = (char *)swift_allocObject(v1, *(unsigned int *)(v1 + 48), *(unsigned __int16 *)(v1 + 52));
  v0[38] = v2;
  swift_defaultActor_initialize(v2);
  v3 = sub_1006B8B38((uint64_t)_swiftEmptyArrayStorage);
  *((_QWORD *)v2 + 14) = v3;
  UUID.init()(v3);
  v4 = &v2[OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_startTime];
  v5 = type metadata accessor for DispatchTime(0);
  v0[39] = v5;
  v6 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56);
  v0[40] = v6;
  v6(v4, 1, 1, v5);
  v6(&v2[OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_endTime], 1, 1, v5);
  *((_QWORD *)v2 + 15) = 0xD000000000000032;
  *((_QWORD *)v2 + 16) = 0x8000000100ECAEE0;
  return swift_task_switch(sub_1001CDC44, v2, 0);
}

uint64_t sub_1001CE584@<X0>(uint64_t a1@<X1>, _BYTE *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  char v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  v4 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  __chkstk_darwin(v4);
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(int *)(type metadata accessor for OwnedBeaconRecord(0) + 20);
  if (qword_1010E9CF0 != -1)
    swift_once(&qword_1010E9CF0, sub_10058CADC);
  v8 = a1 + v7;
  v9 = qword_1011B7160;
  v10 = objc_autoreleasePoolPush();
  sub_10058DC14(v9, v8, 0, 0, &v14);
  objc_autoreleasePoolPop(v10);
  v11 = sub_10082B1AC((uint64_t)v6, v8, v14, 0);
  swift_bridgeObjectRelease();
  result = sub_100004048((uint64_t)v6, (uint64_t *)&unk_1010EA690);
  *a2 = v11 & 1;
  return result;
}

unint64_t sub_1001CE6A4(void *a1, uint64_t a2, void *a3, uint64_t a4, int a5)
{
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t inited;
  uint64_t v12;
  uint64_t v13;
  id v14;
  id v15;
  id v16;
  unint64_t v17;
  id v18;
  uint64_t v19;
  NSString v20;
  char isUniquelyReferenced_nonNull_native;
  NSString v22;
  char v23;
  uint64_t v25;
  int v26;
  unint64_t v27;
  uint64_t v28;

  v26 = a5;
  v25 = type metadata accessor for StableIdentifier(0);
  __chkstk_darwin(v25);
  v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10001A9A8(&qword_1010EEBD0);
  inited = swift_initStackObject(v10, &v28);
  *(_OWORD *)(inited + 16) = xmmword_100E22340;
  *(_QWORD *)(inited + 32) = 0x496E6F6973736573;
  *(_QWORD *)(inited + 40) = 0xE900000000000044;
  *(_QWORD *)(inited + 48) = a1;
  *(_BYTE *)(inited + 56) = 0;
  strcpy((char *)(inited + 64), "batteryLevel");
  *(_BYTE *)(inited + 77) = 0;
  *(_WORD *)(inited + 78) = -5120;
  v12 = type metadata accessor for OwnedBeaconRecord(0);
  v13 = *(unsigned __int8 *)(a2 + *(int *)(v12 + 76));
  v14 = objc_allocWithZone((Class)NSNumber);
  v15 = a1;
  *(_QWORD *)(inited + 80) = objc_msgSend(v14, "initWithInteger:", v13);
  *(_BYTE *)(inited + 88) = 0;
  strcpy((char *)(inited + 96), "updateRequired");
  *(_BYTE *)(inited + 111) = -18;
  *(_QWORD *)(inited + 112) = 1;
  *(_BYTE *)(inited + 120) = 1;
  *(_QWORD *)(inited + 128) = 0x737265566D6F7266;
  *(_QWORD *)(inited + 136) = 0xEB000000006E6F69;
  *(_QWORD *)(inited + 144) = String._bridgeToObjectiveC()();
  *(_BYTE *)(inited + 152) = 0;
  *(_QWORD *)(inited + 160) = 0xD000000000000013;
  *(_QWORD *)(inited + 168) = 0x8000000100EC9290;
  *(_QWORD *)(inited + 176) = a3;
  *(_BYTE *)(inited + 184) = 0;
  *(_QWORD *)(inited + 192) = 0x6563697665447369;
  *(_QWORD *)(inited + 200) = 0xEF6465687361654CLL;
  v16 = a3;
  *(NSNumber *)(inited + 208) = Bool._bridgeToObjectiveC()();
  *(_BYTE *)(inited + 216) = 0;
  *(_QWORD *)(inited + 224) = 0xD000000000000011;
  *(_QWORD *)(inited + 232) = 0x8000000100ECAF20;
  *(NSNumber *)(inited + 240) = Bool._bridgeToObjectiveC()();
  *(_BYTE *)(inited + 248) = 0;
  v17 = sub_1006B9444(inited);
  v18 = objc_msgSend((id)objc_opt_self(FMSystemInfo), "sharedInstance");
  LODWORD(v13) = objc_msgSend(v18, "isInternalBuild");

  if ((_DWORD)v13)
  {
    UUID.uuidString.getter(v19);
    v20 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v17);
    v27 = v17;
    sub_10010AC08((uint64_t)v20, 0, 0x6544646572696170, 0xEE00444965636976, isUniquelyReferenced_nonNull_native);
    v17 = v27;
    swift_bridgeObjectRelease();
    sub_10005972C(a2 + *(int *)(v12 + 24), (uint64_t)v9, type metadata accessor for StableIdentifier);
    if (swift_getEnumCaseMultiPayload(v9, v25) == 1)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v22 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      v23 = swift_isUniquelyReferenced_nonNull_native(v17);
      v27 = v17;
      sub_10010AC08((uint64_t)v22, 0, 0xD000000000000018, 0x8000000100ECAF40, v23);
      v17 = v27;
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_1000126B0((uint64_t)v9, type metadata accessor for StableIdentifier);
    }
  }
  return v17;
}

uint64_t sub_1001CEA3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v4[7] = a3;
  v4[8] = a4;
  v4[5] = a1;
  v4[6] = a2;
  v5 = type metadata accessor for UUID(0);
  v4[9] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[10] = v6;
  v4[11] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1001CEAA0, 0, 0);
}

uint64_t sub_1001CEAA0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = v0[10];
  v1 = v0[11];
  v3 = v0[9];
  v4 = v0[6];
  v5 = *(_QWORD *)(v0[5] + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_firmwareUpdateService);
  v0[12] = v5;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4, v3);
  return swift_task_switch(sub_1001CEAFC, v5, 0);
}

uint64_t sub_1001CEAFC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 96);
  swift_beginAccess(v1 + 152, v0 + 16, 0, 0);
  v2 = *(_QWORD *)(v1 + 152);
  *(_QWORD *)(v0 + 104) = v2;
  swift_bridgeObjectRetain(v2);
  return swift_task_switch(sub_1001CEB54, 0, 0);
}

uint64_t sub_1001CEB54()
{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t **v12;

  v1 = v0[11];
  if (*(_QWORD *)(v0[13] + 16))
  {
    v2 = sub_100003FB0(v0[11]);
    v4 = v0[10];
    v3 = v0[11];
    v5 = v0[9];
    if ((v6 & 1) != 0)
    {
      v7 = v0[8];
      v8 = *(_QWORD *)(*(_QWORD *)(v0[13] + 56) + 8 * v2);
      v0[14] = v8;
      swift_retain();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
      swift_retain();
      swift_bridgeObjectRetain(v7);
      return swift_task_switch(sub_1001CEC7C, v8, 0);
    }
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  }
  else
  {
    v10 = v0[9];
    v11 = v0[10];
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v1, v10);
  }
  v0[15] = 0;
  v12 = (uint64_t **)swift_task_alloc(dword_1010F091C);
  v0[16] = (uint64_t)v12;
  *v12 = v0;
  v12[1] = (uint64_t *)sub_1001CED0C;
  return sub_10014A958(v0[6]);
}

uint64_t sub_1001CEC7C()
{
  uint64_t *v0;
  uint64_t **v1;

  sub_100CE0F74(v0[14], v0[7], v0[8]);
  swift_bridgeObjectRelease();
  swift_release();
  v0[15] = v0[14];
  v1 = (uint64_t **)swift_task_alloc(dword_1010F091C);
  v0[16] = (uint64_t)v1;
  *v1 = v0;
  v1[1] = (uint64_t *)sub_1001CED0C;
  return sub_10014A958(v0[6]);
}

uint64_t sub_1001CED0C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 96);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 128));
  return swift_task_switch(sub_1001CED64, v1, 0);
}

uint64_t sub_1001CED64()
{
  uint64_t v0;

  sub_10014ACA8(*(_QWORD *)(v0 + 48));
  return swift_task_switch(sub_1001CEDA4, 0, 0);
}

uint64_t sub_1001CEDA4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 88);
  swift_release(*(_QWORD *)(v0 + 120));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

unint64_t sub_1001CEDE0()
{
  uint64_t v0;
  uint64_t inited;
  uint64_t v3;

  v0 = sub_10001A9A8(&qword_1010EEBD0);
  inited = swift_initStackObject(v0, &v3);
  *(_OWORD *)(inited + 16) = xmmword_100E221E0;
  *(_QWORD *)(inited + 32) = 0x6563637553736177;
  *(_QWORD *)(inited + 40) = 0xEA00000000007373;
  *(_QWORD *)(inited + 48) = 1;
  *(_BYTE *)(inited + 56) = 1;
  *(_QWORD *)(inited + 64) = 0x6F69737265566F74;
  *(_QWORD *)(inited + 72) = 0xE90000000000006ELL;
  *(_QWORD *)(inited + 80) = String._bridgeToObjectiveC()();
  *(_BYTE *)(inited + 88) = 0;
  strcpy((char *)(inited + 96), "didShowAlert");
  *(_BYTE *)(inited + 109) = 0;
  *(_WORD *)(inited + 110) = -5120;
  *(_QWORD *)(inited + 112) = 0;
  *(_BYTE *)(inited + 120) = 1;
  return sub_1006B9444(inited);
}

uint64_t sub_1001CEEBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  *(_QWORD *)(v6 + 88) = a4;
  *(_QWORD *)(v6 + 96) = a6;
  *(_BYTE *)(v6 + 232) = a5;
  *(_QWORD *)(v6 + 72) = a2;
  *(_QWORD *)(v6 + 80) = a3;
  *(_QWORD *)(v6 + 64) = a1;
  v7 = type metadata accessor for UUID(0);
  *(_QWORD *)(v6 + 104) = v7;
  v8 = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v6 + 112) = v8;
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v6 + 120) = swift_task_alloc(v9);
  *(_QWORD *)(v6 + 128) = swift_task_alloc(v9);
  return swift_task_switch(sub_1001CEF38, 0, 0);
}

uint64_t sub_1001CEF38()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);

  v1 = v0[16];
  v2 = v0[13];
  v3 = v0[14];
  v4 = v0[9];
  v5 = *(_QWORD *)(v0[8] + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_firmwareUpdateService);
  v0[17] = v5;
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v0[18] = v6;
  v6(v1, v4, v2);
  return swift_task_switch(sub_1001CEF98, v5, 0);
}

uint64_t sub_1001CEF98()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 136);
  swift_beginAccess(v1 + 144, v0 + 16, 0, 0);
  v2 = *(_QWORD *)(v1 + 144);
  *(_QWORD *)(v0 + 152) = v2;
  swift_bridgeObjectRetain(v2);
  return swift_task_switch(sub_1001CEFF0, 0, 0);
}

uint64_t sub_1001CEFF0()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t (*v9)();
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);
  uint64_t v14;

  v1 = *(_QWORD *)(v0 + 128);
  if (!*(_QWORD *)(*(_QWORD *)(v0 + 152) + 16))
  {
    v11 = *(_QWORD *)(v0 + 104);
    v12 = *(_QWORD *)(v0 + 112);
    swift_bridgeObjectRelease();
    v13 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
    v13(v1, v11);
LABEL_6:
    *(_QWORD *)(v0 + 184) = 0;
    *(_QWORD *)(v0 + 192) = v13;
    v14 = *(_QWORD *)(v0 + 136);
    (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 144))(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 104));
    v9 = sub_1001CF1B4;
    v10 = v14;
    return swift_task_switch(v9, v10, 0);
  }
  v2 = sub_100003FB0(*(_QWORD *)(v0 + 128));
  v3 = *(_QWORD *)(v0 + 128);
  v4 = *(_QWORD *)(v0 + 104);
  v5 = *(_QWORD *)(v0 + 112);
  if ((v6 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    v13 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
    v13(v3, v4);
    goto LABEL_6;
  }
  v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v0 + 152) + 56) + 8 * v2);
  *(_QWORD *)(v0 + 160) = v7;
  swift_retain();
  swift_bridgeObjectRelease();
  v8 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  *(_QWORD *)(v0 + 168) = v8;
  v8(v3, v4);
  v9 = sub_1001CF0E8;
  v10 = v7;
  return swift_task_switch(v9, v10, 0);
}

uint64_t sub_1001CF0E8()
{
  uint64_t v0;

  sub_100CBFA04(*(_QWORD *)(v0 + 160));
  *(_QWORD *)(v0 + 176) = 0;
  swift_release();
  return swift_task_switch(sub_1001CF160, 0, 0);
}

uint64_t sub_1001CF160()
{
  uint64_t v0;
  uint64_t v1;

  *(int8x16_t *)(v0 + 184) = vextq_s8(*(int8x16_t *)(v0 + 168), *(int8x16_t *)(v0 + 168), 8uLL);
  v1 = *(_QWORD *)(v0 + 136);
  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 144))(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 104));
  return swift_task_switch(sub_1001CF1B4, v1, 0);
}

uint64_t sub_1001CF1B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 136);
  swift_beginAccess(v1 + 152, v0 + 40, 0, 0);
  v2 = *(_QWORD *)(v1 + 152);
  *(_QWORD *)(v0 + 200) = v2;
  swift_bridgeObjectRetain(v2);
  return swift_task_switch(sub_1001CF20C, 0, 0);
}

uint64_t sub_1001CF20C()
{
  uint64_t *v0;
  unint64_t v1;
  void (*v2)(uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t **v13;

  if (*(_QWORD *)(v0[25] + 16))
  {
    v1 = sub_100003FB0(v0[15]);
    v2 = (void (*)(uint64_t, uint64_t))v0[24];
    v3 = v0[15];
    v4 = v0[13];
    if ((v5 & 1) != 0)
    {
      v7 = v0[11];
      v6 = v0[12];
      v8 = *(_QWORD *)(*(_QWORD *)(v0[25] + 56) + 8 * v1);
      v0[26] = v8;
      swift_retain();
      swift_bridgeObjectRelease();
      v2(v3, v4);
      swift_retain();
      swift_bridgeObjectRetain(v7);
      swift_errorRetain(v6);
      return swift_task_switch(sub_1001CF344, v8, 0);
    }
    swift_bridgeObjectRelease();
    v2(v3, v4);
  }
  else
  {
    v10 = (void (*)(uint64_t, uint64_t))v0[24];
    v11 = v0[15];
    v12 = v0[13];
    swift_bridgeObjectRelease();
    v10(v11, v12);
  }
  v0[27] = 0;
  v13 = (uint64_t **)swift_task_alloc(dword_1010F091C);
  v0[28] = (uint64_t)v13;
  *v13 = v0;
  v13[1] = (uint64_t *)sub_1001CF3E4;
  return sub_10014A958(v0[9]);
}

uint64_t sub_1001CF344()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = *(_QWORD *)(v0 + 184);
  sub_100CE0F98(*(_QWORD *)(v0 + 208), *(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88), *(_BYTE *)(v0 + 232), *(_QWORD *)(v0 + 96));
  swift_errorRelease(*(_QWORD *)(v0 + 96));
  swift_bridgeObjectRelease();
  if (v1)
    swift_errorRelease(v1);
  swift_release();
  *(_QWORD *)(v0 + 216) = *(_QWORD *)(v0 + 208);
  v2 = (_QWORD *)swift_task_alloc(dword_1010F091C);
  *(_QWORD *)(v0 + 224) = v2;
  *v2 = v0;
  v2[1] = sub_1001CF3E4;
  return sub_10014A958(*(_QWORD *)(v0 + 72));
}

uint64_t sub_1001CF3E4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 136);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 224));
  return swift_task_switch(sub_1001CF43C, v1, 0);
}

uint64_t sub_1001CF43C()
{
  uint64_t v0;

  sub_10014ACA8(*(_QWORD *)(v0 + 72));
  return swift_task_switch(sub_1001CF47C, 0, 0);
}

uint64_t sub_1001CF47C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 120);
  v2 = *(_QWORD *)(v0 + 128);
  swift_release(*(_QWORD *)(v0 + 216));
  swift_task_dealloc(v2);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001CF4C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 168);
  *(_QWORD *)(v0 + 184) = 0;
  *(_QWORD *)(v0 + 192) = v1;
  v2 = *(_QWORD *)(v0 + 136);
  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 144))(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 104));
  return swift_task_switch(sub_1001CF1B4, v2, 0);
}

unint64_t sub_1001CF510(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t inited;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSString v10;
  char isUniquelyReferenced_nonNull_native;
  Class isa;
  char v13;
  _QWORD v15[3];
  _BYTE v16[8];
  unint64_t v17;
  _QWORD v18[3];
  _BYTE v19[8];
  _BYTE v20[128];

  v5 = sub_10001A9A8(&qword_1010EEBD0);
  inited = swift_initStackObject(v5, v20);
  *(_OWORD *)(inited + 16) = xmmword_100E221E0;
  *(_QWORD *)(inited + 32) = 0x6563637553736177;
  *(_QWORD *)(inited + 40) = 0xEA00000000007373;
  sub_10000F4A0(0, (unint64_t *)&qword_101103A90, NSNumber_ptr);
  *(NSNumber *)(inited + 48) = NSNumber.init(BOOLeanLiteral:)(0);
  *(_BYTE *)(inited + 56) = 0;
  *(_QWORD *)(inited + 64) = 0x6F69737265566F74;
  *(_QWORD *)(inited + 72) = 0xE90000000000006ELL;
  *(_QWORD *)(inited + 80) = String._bridgeToObjectiveC()();
  *(_BYTE *)(inited + 88) = 0;
  strcpy((char *)(inited + 96), "didShowAlert");
  *(_BYTE *)(inited + 109) = 0;
  *(_WORD *)(inited + 110) = -5120;
  *(NSNumber *)(inited + 112) = Bool._bridgeToObjectiveC()();
  *(_BYTE *)(inited + 120) = 0;
  v7 = sub_1006B9444(inited);
  if (a4)
  {
    swift_getErrorValue(a4, v19, v18);
    v8 = v18[1];
    v9 = v18[2];
    swift_errorRetain(a4);
    Error.domain.getter(v8, v9);
    v10 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v7);
    v17 = v7;
    sub_10010AC08((uint64_t)v10, 0, 0x6D6F44726F727265, 0xEB000000006E6961, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
    swift_getErrorValue(a4, v16, v15);
    Error.code.getter(v15[1], v15[2]);
    isa = Int._bridgeToObjectiveC()().super.super.isa;
    v13 = swift_isUniquelyReferenced_nonNull_native(v7);
    v17 = v7;
    sub_10010AC08((uint64_t)isa, 0, 0x646F43726F727265, 0xE900000000000065, v13);
    v7 = v17;
    swift_bridgeObjectRelease();
    swift_errorRelease(a4);
  }
  return v7;
}

uint64_t sub_1001CF734(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v4[7] = a3;
  v4[8] = a4;
  v4[5] = a1;
  v4[6] = a2;
  v5 = type metadata accessor for UUID(0);
  v4[9] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v4[10] = v6;
  v7 = *(_QWORD *)(v6 + 64);
  v4[11] = v7;
  v8 = (v7 + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[12] = swift_task_alloc(v8);
  v4[13] = swift_task_alloc(v8);
  v9 = sub_10001A9A8((uint64_t *)&unk_1010F47C0);
  v4[14] = v9;
  v4[15] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1001CF7D4, 0, 0);
}

uint64_t sub_1001CF7D4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v1 = v0[13];
  v3 = v0[10];
  v2 = v0[11];
  v4 = v0[9];
  v6 = v0[5];
  v5 = v0[6];
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v0[16] = v7;
  v7(v1, v5, v4);
  v8 = *(unsigned __int8 *)(v3 + 80);
  v9 = (v8 + 24) & ~v8;
  v10 = swift_allocObject(&unk_10105DE08, v9 + v2, v8 | 7);
  v0[17] = v10;
  *(_QWORD *)(v10 + 16) = v6;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v10 + v9, v1, v4);
  v11 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v12 = (_QWORD *)swift_task_alloc(v11);
  v0[18] = v12;
  *v12 = v0;
  v12[1] = sub_1001CF8B0;
  return unsafeBlocking<A>(_:)(v0[15], sub_1001D2E2C, v10, v0[14]);
}

uint64_t sub_1001CF8B0()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 144));
  swift_release();
  return swift_task_switch(sub_1001CF90C, 0, 0);
}

uint64_t sub_1001CF90C()
{
  _QWORD *v0;
  void (*v1)(uint64_t, uint64_t, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = (void (*)(uint64_t, uint64_t, uint64_t))v0[16];
  v2 = v0[12];
  v3 = v0[9];
  v4 = v0[6];
  v5 = *(_QWORD *)(v0[5] + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_firmwareUpdateService);
  v0[19] = v5;
  v1(v2, v4, v3);
  return swift_task_switch(sub_1001CF968, v5, 0);
}

uint64_t sub_1001CF968()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 152);
  swift_beginAccess(v1 + 152, v0 + 16, 0, 0);
  v2 = *(_QWORD *)(v1 + 152);
  *(_QWORD *)(v0 + 160) = v2;
  swift_bridgeObjectRetain(v2);
  return swift_task_switch(sub_1001CF9C0, 0, 0);
}

uint64_t sub_1001CF9C0()
{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t **v15;

  v1 = v0[12];
  if (*(_QWORD *)(v0[20] + 16))
  {
    v2 = sub_100003FB0(v0[12]);
    if ((v3 & 1) != 0)
    {
      v4 = v0[15];
      v5 = v0[12];
      v6 = v0[9];
      v7 = v0[10];
      v9 = v0[7];
      v8 = v0[8];
      v10 = *(_QWORD *)(*(_QWORD *)(v0[20] + 56) + 8 * v2);
      v0[21] = v10;
      swift_retain();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
      v11 = (_QWORD *)swift_task_alloc(48);
      v0[22] = (uint64_t)v11;
      v11[2] = v4;
      v11[3] = v9;
      v11[4] = v8;
      swift_retain();
      return swift_task_switch(sub_1001CFAF0, v10, 0);
    }
    v1 = v0[12];
  }
  v13 = v0[9];
  v14 = v0[10];
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v1, v13);
  v0[23] = 0;
  v15 = (uint64_t **)swift_task_alloc(dword_1010F091C);
  v0[24] = (uint64_t)v15;
  *v15 = v0;
  v15[1] = (uint64_t *)sub_1001CFB84;
  return sub_10014A958(v0[6]);
}

uint64_t sub_1001CFAF0()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t **v2;

  sub_100CCC4A0((uint64_t (*)(uint64_t))sub_1001D32E8);
  v1 = v0[22];
  swift_release();
  swift_task_dealloc(v1);
  v0[23] = v0[21];
  v2 = (uint64_t **)swift_task_alloc(dword_1010F091C);
  v0[24] = (uint64_t)v2;
  *v2 = v0;
  v2[1] = (uint64_t *)sub_1001CFB84;
  return sub_10014A958(v0[6]);
}

uint64_t sub_1001CFB84()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 152);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 192));
  return swift_task_switch(sub_1001CFBDC, v1, 0);
}

uint64_t sub_1001CFBDC()
{
  uint64_t v0;

  sub_10014ACA8(*(_QWORD *)(v0 + 48));
  return swift_task_switch(sub_1001CFC1C, 0, 0);
}

uint64_t sub_1001CFC1C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 120);
  v3 = *(_QWORD *)(v0 + 96);
  v2 = *(_QWORD *)(v0 + 104);
  swift_release();
  sub_100004048(v1, (uint64_t *)&unk_1010F47C0);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

unint64_t sub_1001CFC84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  _BYTE *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t inited;
  NSString v18;
  _BYTE v20[160];

  v5 = sub_10001A9A8((uint64_t *)&unk_1010F47C0);
  __chkstk_darwin(v5);
  v7 = &v20[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = type metadata accessor for OwnedBeaconRecord(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = &v20[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v10);
  v14 = &v20[-v13];
  sub_10000F9B8(a1, (uint64_t)v7, (uint64_t *)&unk_1010F47C0);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
  {
    sub_100004048((uint64_t)v7, (uint64_t *)&unk_1010F47C0);
    return sub_1006B9444((uint64_t)_swiftEmptyArrayStorage);
  }
  else
  {
    sub_1000126EC((uint64_t)v7, (uint64_t)v14, type metadata accessor for OwnedBeaconRecord);
    v16 = sub_10001A9A8(&qword_1010EEBD0);
    inited = swift_initStackObject(v16, v20);
    *(_OWORD *)(inited + 16) = xmmword_100E26E00;
    strcpy((char *)(inited + 32), "updateRequired");
    *(_BYTE *)(inited + 47) = -18;
    *(_QWORD *)(inited + 48) = 0;
    *(_BYTE *)(inited + 56) = 1;
    *(_QWORD *)(inited + 64) = 0x6563637553736177;
    *(_QWORD *)(inited + 72) = 0xEA00000000007373;
    *(_QWORD *)(inited + 80) = 0;
    *(_BYTE *)(inited + 88) = 1;
    *(_QWORD *)(inited + 96) = 0x6F69737265566F74;
    *(_QWORD *)(inited + 104) = 0xE90000000000006ELL;
    sub_10005972C((uint64_t)v14, (uint64_t)v12, type metadata accessor for OwnedBeaconRecord);
    if (!a3)
      swift_bridgeObjectRetain(*(_QWORD *)&v12[*(int *)(v8 + 60) + 8]);
    swift_bridgeObjectRetain(a3);
    sub_1000126B0((uint64_t)v12, type metadata accessor for OwnedBeaconRecord);
    v18 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    *(_QWORD *)(inited + 112) = v18;
    *(_BYTE *)(inited + 120) = 0;
    strcpy((char *)(inited + 128), "didShowAlert");
    *(_BYTE *)(inited + 141) = 0;
    *(_WORD *)(inited + 142) = -5120;
    *(_QWORD *)(inited + 144) = 0;
    *(_BYTE *)(inited + 152) = 1;
    v15 = sub_1006B9444(inited);
    sub_1000126B0((uint64_t)v14, type metadata accessor for OwnedBeaconRecord);
  }
  return v15;
}

uint64_t sub_1001CFF10(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v16;

  v4 = type metadata accessor for BeaconObservation(0);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v5);
  v10 = (char *)&v16 - v9;
  v11 = *(int *)(v8 + 24);
  v12 = qword_100E2BE68[*(char *)(a1 + v11)];
  v13 = qword_100E2BE68[*(char *)(a2 + v11)];
  sub_10005972C(a1, (uint64_t)&v16 - v9, type metadata accessor for BeaconObservation);
  sub_10005972C(a2, (uint64_t)v7, type metadata accessor for BeaconObservation);
  if (v12 == v13)
    v14 = static Date.== infix(_:_:)(&v10[*(int *)(v4 + 20)], &v7[*(int *)(v4 + 20)]);
  else
    v14 = 0;
  sub_1000126B0((uint64_t)v7, type metadata accessor for BeaconObservation);
  sub_1000126B0((uint64_t)v10, type metadata accessor for BeaconObservation);
  return v14 & 1;
}

void sub_1001D002C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = static os_log_type_t.error.getter(a1);
  v3 = sub_10000F4A0(0, (unint64_t *)&qword_1010ED8F0, OS_os_log_ptr);
  v4 = (void *)static OS_os_log.default.getter(v3);
  v5 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v6 = swift_allocObject(v5, 72, 7);
  *(_OWORD *)(v6 + 16) = xmmword_100E22B00;
  v11 = a1;
  swift_errorRetain(a1);
  v7 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
  v8 = String.init<A>(describing:)(&v11, v7);
  v10 = v9;
  *(_QWORD *)(v6 + 56) = &type metadata for String;
  *(_QWORD *)(v6 + 64) = sub_10001AA00();
  *(_QWORD *)(v6 + 32) = v8;
  *(_QWORD *)(v6 + 40) = v10;
  os_log(_:dso:log:_:_:)(v2, &_mh_execute_header, v4, "FirmwareUpdateProtocol update failed %@.", 40, 2, v6);

  swift_bridgeObjectRelease();
  Transaction.end()();
}

uint64_t sub_1001D0138(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD aBlock[6];

  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v28 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  v26 = *(_QWORD *)(v7 - 8);
  v27 = v7;
  __chkstk_darwin(v7);
  v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS.QoSClass(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = static os_log_type_t.default.getter(v12);
  v16 = sub_10000F4A0(0, (unint64_t *)&qword_1010ED8F0, OS_os_log_ptr);
  v17 = (void *)static OS_os_log.default.getter(v16);
  os_log(_:dso:log:_:_:)(v15, &_mh_execute_header, v17, "FirmwareUpdateProtocol update success.", 38, 2, _swiftEmptyArrayStorage);

  sub_10000F4A0(0, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr);
  (*(void (**)(char *, _QWORD, uint64_t))(v11 + 104))(v14, enum case for DispatchQoS.QoSClass.default(_:), v10);
  v18 = (void *)static OS_dispatch_queue.global(qos:)(v14);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
  v19 = swift_allocObject(&unk_10105DDB8, 32, 7);
  *(_QWORD *)(v19 + 16) = a1;
  *(_QWORD *)(v19 + 24) = a2;
  aBlock[4] = sub_1001D326C;
  aBlock[5] = v19;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_10105DDD0;
  v20 = _Block_copy(aBlock);
  swift_retain();
  v21 = swift_retain();
  static DispatchQoS.unspecified.getter(v21);
  v29 = _swiftEmptyArrayStorage;
  v22 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v23 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v24 = sub_10001371C();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v29, v23, v24, v4, v22);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v9, v6, v20);
  _Block_release(v20);

  (*(void (**)(char *, uint64_t))(v28 + 8))(v6, v4);
  (*(void (**)(char *, uint64_t))(v26 + 8))(v9, v27);
  return swift_release();
}

uint64_t sub_1001D0400(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(a1 + *(int *)(type metadata accessor for OwnedBeaconRecord(0) + 60));
  swift_bridgeObjectRetain(a3);
  result = swift_bridgeObjectRelease();
  *v5 = a2;
  v5[1] = a3;
  return result;
}

uint64_t sub_1001D0454(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(a1 + *(int *)(type metadata accessor for SharedBeaconRecord(0) + 40));
  swift_bridgeObjectRetain(a3);
  result = swift_bridgeObjectRelease();
  *v5 = a2;
  v5[1] = a3;
  return result;
}

uint64_t sub_1001D04A8(uint64_t a1, void (*a2)(void), uint64_t a3, void (*a4)(_QWORD), uint64_t a5, uint64_t *a6)
{
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v15;

  v10 = sub_10001A9A8(a6);
  __chkstk_darwin(v10);
  v12 = (uint64_t *)((char *)&v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10000F9B8(a1, (uint64_t)v12, a6);
  if (swift_getEnumCaseMultiPayload(v12, v10) == 1)
  {
    v13 = *v12;
    a4(*v12);
    return swift_errorRelease(v13);
  }
  else
  {
    a2();
    return sub_100004048((uint64_t)v12, a6);
  }
}

uint64_t sub_1001D057C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 16) = a1;
  v2 = sub_10001A9A8(&qword_1010ED860);
  *(_QWORD *)(v1 + 24) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v2 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1001D05D8, 0, 0);
}

uint64_t sub_1001D05D8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 16) + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_firmwareUpdateService);
  *(_QWORD *)(v0 + 32) = v1;
  return swift_task_switch(sub_1001D0600, v1, 0);
}

uint64_t sub_1001D0600()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 24);
  v2 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
  sub_10014BF94(4, v1);
  sub_100004048(v1, &qword_1010ED860);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001D0674(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  void (*v33)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  int v61;
  BOOL v62;
  int v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  id v74;
  Class isa;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  id v85;
  unint64_t v87;
  uint64_t v88;
  void (*v89)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v90;
  void *v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  char *v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  _QWORD *v112;

  v4 = v3;
  v100 = a2;
  v101 = a3;
  v6 = type metadata accessor for UUID(0);
  v98 = *(_QWORD *)(v6 - 8);
  v99 = v6;
  __chkstk_darwin(v6);
  v96 = v7;
  v97 = (char *)&v87 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A9A8(&qword_1010EF660);
  __chkstk_darwin(v8);
  v92 = (char *)&v87 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for BeaconObservation(0);
  v108 = *(_QWORD *)(v10 - 8);
  v109 = v10;
  v11 = __chkstk_darwin(v10);
  v111 = (uint64_t)&v87 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v11);
  v110 = (uint64_t)&v87 - v14;
  v15 = __chkstk_darwin(v13);
  v17 = (char *)&v87 - v16;
  v18 = __chkstk_darwin(v15);
  v20 = (char *)&v87 - v19;
  v21 = __chkstk_darwin(v18);
  v107 = (uint64_t)&v87 - v22;
  v23 = __chkstk_darwin(v21);
  v25 = (char *)&v87 - v24;
  __chkstk_darwin(v23);
  v90 = (uint64_t)&v87 - v26;
  v27 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  v28 = __chkstk_darwin(v27);
  v95 = (char *)&v87 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v28);
  v31 = (char *)&v87 - v30;
  v32 = type metadata accessor for Date(0);
  v93 = *(_QWORD *)(v32 - 8);
  v94 = v32;
  v33 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v93 + 56);
  v102 = v31;
  v89 = v33;
  v34 = ((uint64_t (*)(char *, uint64_t, uint64_t))v33)(v31, 1, 1);
  v35 = static os_log_type_t.default.getter(v34);
  if (qword_1010EA300 != -1)
LABEL_38:
    swift_once(&qword_1010EA300, sub_100B5E204);
  v36 = qword_1011B7DE0;
  v37 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v38 = swift_allocObject(v37, 72, 7);
  *(_OWORD *)(v38 + 16) = xmmword_100E22B00;
  v39 = UUID.uuidString.getter(v38);
  v41 = v40;
  *(_QWORD *)(v38 + 56) = &type metadata for String;
  *(_QWORD *)(v38 + 64) = sub_10001AA00();
  *(_QWORD *)(v38 + 32) = v39;
  *(_QWORD *)(v38 + 40) = v41;
  os_log(_:dso:log:_:_:)(v35, &_mh_execute_header, v36, "Retrieving firmware update state for beacon: %@", 47, 2, v38);
  swift_bridgeObjectRelease();
  if (qword_1010E9CF0 != -1)
    swift_once(&qword_1010E9CF0, sub_10058CADC);
  v42 = qword_1011B7160;
  v91 = objc_autoreleasePoolPush();
  v43 = sub_10001A9A8(&qword_1010F7770);
  OS_dispatch_queue.sync<A>(execute:)(sub_10007CAD4, v42, v43);
  v44 = v112;
  v45 = (uint64_t)v102;
  v46 = v109;
  if (v112[2] && (v47 = sub_100003FB0(a1), (v48 & 1) != 0))
  {
    v49 = *(_QWORD *)(v44[7] + 8 * v47);
    swift_bridgeObjectRetain(v49);
    swift_bridgeObjectRelease();
    v50 = sub_100508D98(v49);
    swift_bridgeObjectRelease();
    sub_10088FD00((uint64_t)v50);
    v35 = v51;
    swift_release();
    v52 = (uint64_t)_swiftEmptyArrayStorage;
    v112 = _swiftEmptyArrayStorage;
    v106 = *(_QWORD *)(v35 + 16);
    if (v106)
    {
      v87 = a1;
      v88 = v4;
      a1 = 0;
      v103 = v17;
      v104 = v20;
      v105 = v35;
      while (1)
      {
        if (a1 >= *(_QWORD *)(v35 + 16))
        {
          __break(1u);
          goto LABEL_38;
        }
        v53 = (uint64_t)v20;
        v17 = (char *)((*(unsigned __int8 *)(v108 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v108 + 80));
        v4 = *(_QWORD *)(v108 + 72);
        sub_10005972C((uint64_t)&v17[v35 + v4 * a1], (uint64_t)v25, type metadata accessor for BeaconObservation);
        v54 = v25[*(int *)(v46 + 24)];
        v55 = v107;
        sub_10005972C((uint64_t)v25, v107, type metadata accessor for BeaconObservation);
        if (v54 == 7)
          break;
        v56 = *(unsigned __int8 *)(v55 + *(int *)(v46 + 24));
        sub_1000126B0(v55, type metadata accessor for BeaconObservation);
        sub_10005972C((uint64_t)v25, v53, type metadata accessor for BeaconObservation);
        if (v56 == 8)
          goto LABEL_12;
        v61 = *(unsigned __int8 *)(v53 + *(int *)(v46 + 24));
        sub_1000126B0(v53, type metadata accessor for BeaconObservation);
        v57 = (uint64_t)v103;
        sub_10005972C((uint64_t)v25, (uint64_t)v103, type metadata accessor for BeaconObservation);
        v62 = v61 == 11;
        v58 = v110;
        if (v62)
          goto LABEL_13;
        v63 = *(unsigned __int8 *)(v57 + *(int *)(v46 + 24));
        sub_1000126B0(v57, type metadata accessor for BeaconObservation);
        sub_10005972C((uint64_t)v25, v110, type metadata accessor for BeaconObservation);
        v62 = v63 == 6;
        v58 = v110;
        if (v62)
          goto LABEL_14;
        v64 = *(unsigned __int8 *)(v110 + *(int *)(v46 + 24));
        sub_1000126B0(v110, type metadata accessor for BeaconObservation);
        v20 = v104;
        if (v64 == 9)
          goto LABEL_15;
        sub_1000126B0((uint64_t)v25, type metadata accessor for BeaconObservation);
LABEL_20:
        v35 = v105;
        if (v106 == ++a1)
        {
          v52 = (uint64_t)v112;
          a1 = v87;
          v45 = (uint64_t)v102;
          goto LABEL_27;
        }
      }
      sub_1000126B0(v55, type metadata accessor for BeaconObservation);
      sub_10005972C((uint64_t)v25, v53, type metadata accessor for BeaconObservation);
LABEL_12:
      sub_1000126B0(v53, type metadata accessor for BeaconObservation);
      v57 = (uint64_t)v103;
      sub_10005972C((uint64_t)v25, (uint64_t)v103, type metadata accessor for BeaconObservation);
      v58 = v110;
LABEL_13:
      sub_1000126B0(v57, type metadata accessor for BeaconObservation);
      sub_10005972C((uint64_t)v25, v58, type metadata accessor for BeaconObservation);
LABEL_14:
      sub_1000126B0(v58, type metadata accessor for BeaconObservation);
      v20 = v104;
LABEL_15:
      sub_1000126EC((uint64_t)v25, v111, type metadata accessor for BeaconObservation);
      if ((swift_isUniquelyReferenced_nonNull_native(v52) & 1) == 0)
        sub_10009AAC8(0, *(_QWORD *)(v52 + 16) + 1, 1);
      v52 = (uint64_t)v112;
      v60 = v112[2];
      v59 = v112[3];
      if (v60 >= v59 >> 1)
      {
        sub_10009AAC8(v59 > 1, v60 + 1, 1);
        v52 = (uint64_t)v112;
      }
      *(_QWORD *)(v52 + 16) = v60 + 1;
      sub_1000126EC(v111, (uint64_t)&v17[v52 + v60 * v4], type metadata accessor for BeaconObservation);
      v46 = v109;
      goto LABEL_20;
    }
LABEL_27:
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
    v52 = (uint64_t)_swiftEmptyArrayStorage;
  }
  v66 = v94;
  v65 = (uint64_t)v95;
  v67 = v93;
  v68 = (uint64_t)v92;
  objc_autoreleasePoolPop(v91);
  sub_100A797E8(v52, v68);
  swift_bridgeObjectRelease();
  v69 = v109;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v108 + 48))(v68, 1, v109) == 1)
  {
    sub_100004048(v68, &qword_1010EF660);
  }
  else
  {
    sub_100004048(v45, (uint64_t *)&unk_1010EA690);
    v70 = v68;
    v71 = v90;
    sub_1000126EC(v70, v90, type metadata accessor for BeaconObservation);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v67 + 16))(v45, v71 + *(int *)(v69 + 20), v66);
    v89(v45, 0, 1, v66);
    v72 = *(unsigned __int8 *)(v71 + *(int *)(v69 + 24));
    sub_1000126B0(v71, type metadata accessor for BeaconObservation);
    if ((v72 - 6) <= 5)
    {
      v73 = qword_100E2BFC8[(char)(v72 - 6)];
      goto LABEL_33;
    }
  }
  v73 = -1;
LABEL_33:
  v74 = objc_msgSend(objc_allocWithZone((Class)SPFirmwareUpdateStateResult), "init");
  objc_msgSend(v74, "setState:", v73);
  sub_10000F9B8(v45, v65, (uint64_t *)&unk_1010EA690);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v67 + 48))(v65, 1, v66) == 1)
  {
    isa = 0;
  }
  else
  {
    isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(v67 + 8))(v65, v66);
  }
  objc_msgSend(v74, "setStateDate:", isa, v87, v88);

  v77 = v97;
  v76 = v98;
  v78 = v99;
  (*(void (**)(char *, unint64_t, uint64_t))(v98 + 16))(v97, a1, v99);
  v79 = *(unsigned __int8 *)(v76 + 80);
  v80 = (v79 + 24) & ~v79;
  v81 = (v96 + v80 + 7) & 0xFFFFFFFFFFFFFFF8;
  v82 = swift_allocObject(&unk_10105DAE8, v81 + 16, v79 | 7);
  *(_QWORD *)(v82 + 16) = v74;
  (*(void (**)(uint64_t, char *, uint64_t))(v76 + 32))(v82 + v80, v77, v78);
  v83 = (_QWORD *)(v82 + v81);
  v84 = v101;
  *v83 = v100;
  v83[1] = v84;
  v85 = v74;
  swift_retain();
  sub_10047D7E8(a1, (void (*)(_QWORD))sub_1001D13C8, v82);

  swift_release();
  return sub_100004048(v45, (uint64_t *)&unk_1010EA690);
}

uint64_t sub_1001D0F30(void *a1, void *a2, uint64_t a3, uint64_t (*a4)(void *))
{
  id v5;
  NSString v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v27;
  void *v28;

  if (a1)
  {
    v5 = a1;
    v6 = objc_msgSend(v5, "systemVersion");
    if (!v6)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)(0);
      v6 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
    }
    objc_msgSend(a2, "setCurrentSystemVersion:", v6);

  }
  else
  {
    type metadata accessor for FirmwareUpdateError(0);
    v8 = v7;
    v27 = 1;
    v9 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
    v10 = sub_100006204(&qword_1010EB190, (uint64_t (*)(uint64_t))type metadata accessor for FirmwareUpdateError, (uint64_t)&unk_100E20A38);
    _BridgedStoredNSError.init(_:userInfo:)(&v28, &v27, v9, v8, v10);
    v11 = v28;
    v6 = (NSString)_convertErrorToNSError(_:)(v28);

    objc_msgSend(a2, "setError:", v6);
  }

  v13 = static os_log_type_t.default.getter(v12);
  if (qword_1010EA300 != -1)
    swift_once(&qword_1010EA300, sub_100B5E204);
  v14 = qword_1011B7DE0;
  v15 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v16 = swift_allocObject(v15, 112, 7);
  *(_OWORD *)(v16 + 16) = xmmword_100E22B10;
  v17 = UUID.uuidString.getter(v16);
  v19 = v18;
  *(_QWORD *)(v16 + 56) = &type metadata for String;
  v20 = sub_10001AA00();
  *(_QWORD *)(v16 + 64) = v20;
  *(_QWORD *)(v16 + 32) = v17;
  *(_QWORD *)(v16 + 40) = v19;
  v21 = objc_msgSend(a2, "description");
  v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
  v24 = v23;

  *(_QWORD *)(v16 + 96) = &type metadata for String;
  *(_QWORD *)(v16 + 104) = v20;
  *(_QWORD *)(v16 + 72) = v22;
  *(_QWORD *)(v16 + 80) = v24;
  os_log(_:dso:log:_:_:)(v13, &_mh_execute_header, v14, "Firmware Update State for beacon %@ is %@", 41, 2, v16);
  swift_bridgeObjectRelease();
  return a4(a2);
}

_QWORD *sub_1001D1160(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  char v20;

  v4 = static os_log_type_t.default.getter(a1);
  if (qword_1010EA300 != -1)
    swift_once(&qword_1010EA300, sub_100B5E204);
  v5 = qword_1011B7DE0;
  v6 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v7 = swift_allocObject(v6, 112, 7);
  *(_OWORD *)(v7 + 16) = xmmword_100E22B10;
  v20 = a1;
  v8 = sub_10001A9A8(&qword_1010F2160);
  v9 = String.init<A>(describing:)(&v20, v8);
  v11 = v10;
  *(_QWORD *)(v7 + 56) = &type metadata for String;
  v12 = sub_10001AA00();
  *(_QWORD *)(v7 + 64) = v12;
  *(_QWORD *)(v7 + 32) = v9;
  *(_QWORD *)(v7 + 40) = v11;
  v13 = type metadata accessor for DateInterval(0);
  v14 = sub_100006204(&qword_1010F2168, (uint64_t (*)(uint64_t))&type metadata accessor for DateInterval, (uint64_t)&protocol conformance descriptor for DateInterval);
  v15 = dispatch thunk of CustomStringConvertible.description.getter(v13, v14);
  *(_QWORD *)(v7 + 96) = &type metadata for String;
  *(_QWORD *)(v7 + 104) = v12;
  *(_QWORD *)(v7 + 72) = v15;
  *(_QWORD *)(v7 + 80) = v16;
  os_log(_:dso:log:_:_:)(v4, &_mh_execute_header, v5, "Retrieving beacons with observation type: %@, date interval: %@", 63, 2, v7);
  swift_bridgeObjectRelease();
  if (qword_1010E9CF0 != -1)
    swift_once(&qword_1010E9CF0, sub_10058CADC);
  v17 = sub_100C5B660(a1, a2);
  swift_retain();
  v18 = sub_10000BCB4((uint64_t)v17);
  swift_bridgeObjectRelease();
  swift_release();
  return v18;
}

uint64_t sub_1001D1334()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(_QWORD *)(v0 + v6 + 8));
  return swift_deallocObject(v0, v6 + 16, v5);
}

uint64_t sub_1001D13C8(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;

  v3 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  return sub_1001D0F30(a1, *(void **)(v1 + 16), v1 + v4, *(uint64_t (**)(void *))(v1 + ((*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8)));
}

_QWORD *sub_1001D1420(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *result;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;

  v3 = *(_QWORD *)(a1 + 16);
  result = _swiftEmptyArrayStorage;
  if (v3)
  {
    specialized ContiguousArray.reserveCapacity(_:)(v3);
    v6 = (_QWORD *)(a1 + 32);
    v7 = *(_QWORD *)(a2 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_beaconStore);
    do
    {
      v8 = v6[3];
      v9 = v6[4];
      v10 = sub_10001AA44(v6, v8);
      v11 = sub_100854C8C((uint64_t)v10, v7, v8, v9);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v11);
      v12 = _swiftEmptyArrayStorage[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v12);
      v13 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v12, v11);
      specialized ContiguousArray._endMutation()(v13);
      v6 += 5;
      --v3;
    }
    while (v3);
    return _swiftEmptyArrayStorage;
  }
  return result;
}

uint64_t sub_1001D14FC(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void (**a7)(_QWORD, _QWORD))
{
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t ObjectType;

  v10 = swift_allocObject(&unk_10105DB10, 24, 7);
  *(_QWORD *)(v10 + 16) = a7;
  v11 = _Block_copy(a7);
  v12 = static os_log_type_t.default.getter(v11);
  if (qword_1010EA300 != -1)
    swift_once(&qword_1010EA300, sub_100B5E204);
  v13 = qword_1011B7DE0;
  v14 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v15 = swift_allocObject(v14, 112, 7);
  *(_OWORD *)(v15 + 16) = xmmword_100E22B10;
  ObjectType = swift_getObjectType(a6);
  v16 = sub_10001A9A8((uint64_t *)&unk_1011169C0);
  v17 = String.init<A>(describing:)(&ObjectType, v16);
  v19 = v18;
  *(_QWORD *)(v15 + 56) = &type metadata for String;
  v20 = sub_10001AA00();
  *(_QWORD *)(v15 + 32) = v17;
  *(_QWORD *)(v15 + 40) = v19;
  *(_QWORD *)(v15 + 96) = &type metadata for String;
  *(_QWORD *)(v15 + 104) = v20;
  *(_QWORD *)(v15 + 64) = v20;
  *(_QWORD *)(v15 + 72) = 0xD000000000000047;
  *(_QWORD *)(v15 + 80) = 0x8000000100ECACC0;
  os_log(_:dso:log:_:_:)(v12, &_mh_execute_header, v13, "%@: %@", 6, 2, v15);
  swift_bridgeObjectRelease();
  if (a2 <= 6 && ((0x5Fu >> a2) & 1) != 0)
  {
    sub_10001AA44((_QWORD *)(a6 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation), *(_QWORD *)(a6 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24));
    sub_1001CBEA8(a1, 0xD070B0A070806uLL >> (8 * a2), a3, a4, a5, (uint64_t)sub_1001D1C04, v10);
  }
  else
  {
    a7[2](a7, 0);
  }
  return swift_release();
}

void sub_1001D16E8(unint64_t a1, uint64_t a2, char *a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  NSArray v16;
  _QWORD *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t ObjectType;

  v7 = static os_log_type_t.default.getter(a1);
  if (qword_1010EA300 != -1)
    swift_once(&qword_1010EA300, sub_100B5E204);
  v8 = qword_1011B7DE0;
  v9 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v10 = swift_allocObject(v9, 112, 7);
  *(_OWORD *)(v10 + 16) = xmmword_100E22B10;
  ObjectType = swift_getObjectType(a3);
  v11 = sub_10001A9A8((uint64_t *)&unk_1011169C0);
  v12 = String.init<A>(describing:)(&ObjectType, v11);
  v14 = v13;
  *(_QWORD *)(v10 + 56) = &type metadata for String;
  v15 = sub_10001AA00();
  *(_QWORD *)(v10 + 32) = v12;
  *(_QWORD *)(v10 + 40) = v14;
  *(_QWORD *)(v10 + 96) = &type metadata for String;
  *(_QWORD *)(v10 + 104) = v15;
  *(_QWORD *)(v10 + 64) = v15;
  *(_QWORD *)(v10 + 72) = 0xD000000000000029;
  *(_QWORD *)(v10 + 80) = 0x8000000100ECAC30;
  os_log(_:dso:log:_:_:)(v7, &_mh_execute_header, v8, "%@: %@", 6, 2, v10);
  swift_bridgeObjectRelease();
  if (a1 <= 6 && ((0x5Fu >> a1) & 1) != 0)
  {
    sub_10001AA44(&a3[OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation], *(_QWORD *)&a3[OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24]);
    v17 = sub_1001D1160(0xD070B0A070806uLL >> (8 * a1), a2);
    v18 = a3;
    v19 = (uint64_t)sub_1001D1420((uint64_t)v17, (uint64_t)v18);
    swift_bridgeObjectRelease();

    v21 = static os_log_type_t.default.getter(v20);
    v22 = qword_1011B7DE0;
    v23 = swift_allocObject(v9, 72, 7);
    *(_OWORD *)(v23 + 16) = xmmword_100E22B00;
    if ((unint64_t)v19 >> 62)
    {
      if (v19 < 0)
        v25 = v19;
      else
        v25 = v19 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v19);
      v24 = _CocoaArrayWrapper.endIndex.getter(v25);
      swift_bridgeObjectRelease();
    }
    else
    {
      v24 = *(_QWORD *)((v19 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    *(_QWORD *)(v23 + 56) = &type metadata for Int;
    *(_QWORD *)(v23 + 64) = &protocol witness table for Int;
    *(_QWORD *)(v23 + 32) = v24;
    os_log(_:dso:log:_:_:)(v21, &_mh_execute_header, v22, "Returning %i records", a2);
    swift_bridgeObjectRelease();
    sub_10000F4A0(0, &qword_1010F2158, SPBeacon_ptr);
    v16.super.isa = Array._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, Class))(a4 + 16))(a4, v16.super.isa);
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_10000F4A0(0, &qword_1010F2158, SPBeacon_ptr);
    v16.super.isa = Array._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, Class))(a4 + 16))(a4, v16.super.isa);
  }

}

uint64_t sub_1001D19EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t ObjectType;

  v4 = static os_log_type_t.default.getter(a1);
  if (qword_1010EA300 != -1)
    swift_once(&qword_1010EA300, sub_100B5E204);
  v5 = qword_1011B7DE0;
  v6 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v7 = swift_allocObject(v6, 112, 7);
  *(_OWORD *)(v7 + 16) = xmmword_100E22B10;
  ObjectType = swift_getObjectType(a1);
  v8 = sub_10001A9A8((uint64_t *)&unk_1011169C0);
  v9 = String.init<A>(describing:)(&ObjectType, v8);
  v11 = v10;
  *(_QWORD *)(v7 + 56) = &type metadata for String;
  v12 = sub_10001AA00();
  *(_QWORD *)(v7 + 32) = v9;
  *(_QWORD *)(v7 + 40) = v11;
  *(_QWORD *)(v7 + 96) = &type metadata for String;
  *(_QWORD *)(v7 + 104) = v12;
  *(_QWORD *)(v7 + 64) = v12;
  *(_QWORD *)(v7 + 72) = 0xD000000000000038;
  *(_QWORD *)(v7 + 80) = 0x8000000100ECAB90;
  os_log(_:dso:log:_:_:)(v4, &_mh_execute_header, v5, "%@: %@", 6, 2, v7);
  swift_bridgeObjectRelease();
  v13 = sub_10001AA44((_QWORD *)(a1 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation), *(_QWORD *)(a1 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24));
  v14 = *v13;
  v15 = static os_log_type_t.default.getter(v13);
  os_log(_:dso:log:_:_:)(v15, &_mh_execute_header, qword_1011B7DE0, "Initiating firmware update check", 32, 2, _swiftEmptyArrayStorage);
  type metadata accessor for Transaction(0);
  swift_retain();
  static Transaction.asyncTask(name:block:)("initiateFirmwareUpdateForAllEligibleBeacons", 43, 2, &unk_1010F2150, v14);
  swift_release();
  return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a2, 1);
}

uint64_t sub_1001D1BBC()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v2 = (_QWORD *)swift_task_alloc(dword_1010F214C);
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = v1;
  v2[1] = sub_100004A74;
  return sub_1001D057C(v0);
}

uint64_t sub_1001D1C04(char a1)
{
  uint64_t v1;

  return sub_100B8F1BC(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_1001D1C0C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  v7 = (v5 & 0xFFFFFFFFFFFFFFF8) + v0;
  v8 = ((v5 & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8;
  v9 = (v8 + 15) & 0xFFFFFFFFFFFFFFF8;
  swift_release(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + 16));
  swift_errorRelease(*(_QWORD *)(v0 + v8));
  swift_release(*(_QWORD *)(v0 + v9 + 8));
  return swift_deallocObject(v0, v9 + 16, v6);
}

uint64_t sub_1001D1CC8()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = v2 + *(_QWORD *)(v1 + 64);
  return sub_1001CC16C(*(_QWORD *)(v0 + 16), (char *)(v0 + v2), *(_BYTE *)(v0 + v3), *(_QWORD *)((v3 & 0xFFFFFFFFFFFFFFF8) + v0 + 8), *(_QWORD *)((v3 & 0xFFFFFFFFFFFFFFF8) + v0 + 16), *(_QWORD *)(v0 + (((v3 & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v0 + (((((v3 & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v0+ (((((v3 & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)+ 8));
}

uint64_t sub_1001D1D2C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 33, 7);
}

uint64_t sub_1001D1D50()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(v0 + 16))(*(unsigned __int8 *)(v0 + 32));
}

uint64_t sub_1001D1D78(unsigned __int8 a1, void *a2)
{
  int v3;
  uint64_t v4;
  uint64_t inited;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  char v17;
  _BYTE v19[56];

  v3 = a1;
  v4 = sub_10001A9A8(&qword_1010F21B8);
  inited = swift_initStackObject(v4, v19);
  *(_OWORD *)(inited + 16) = xmmword_100E22B00;
  *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(kCLErrorDomainPrivate);
  *(_QWORD *)(inited + 40) = v6;
  v7 = sub_10001A9A8(&qword_1010F21C0);
  v8 = swift_allocObject(v7, 48, 7);
  *(_OWORD *)(v8 + 16) = xmmword_100E22B10;
  *(_OWORD *)(v8 + 32) = xmmword_100E2BE40;
  *(_QWORD *)(inited + 48) = v8;
  v9 = sub_1006B96A0(inited);
  if (v3 != 8)
    goto LABEL_6;
  v10 = objc_msgSend(a2, "domain");
  v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
  v13 = v12;

  if (!*(_QWORD *)(v9 + 16) || (v14 = sub_100518DA0(v11, v13), (v15 & 1) == 0))
  {
    swift_bridgeObjectRelease();
LABEL_6:
    swift_bridgeObjectRelease();
    v17 = 0;
    return v17 & 1;
  }
  v16 = *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v14);
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v17 = sub_1001C0B24((uint64_t)objc_msgSend(a2, "code"), v16);
  swift_bridgeObjectRelease();
  return v17 & 1;
}

uint64_t sub_1001D1ED0(unint64_t a1, _QWORD *a2, unsigned __int8 a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  void *v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  _QWORD *v40;
  uint64_t v41;
  unint64_t v42;
  char v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  char *v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  unint64_t v84;
  char v85;
  uint64_t v86;
  _QWORD *v87;
  _QWORD *v88;
  _QWORD *v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  _QWORD *v110;
  char *v111;
  uint64_t v112;
  id v113;
  void *v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  _QWORD *v118;
  uint64_t v119;
  _QWORD *v120;
  char *v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unsigned int (*v126)(uint64_t, uint64_t, char *);
  char *v127;
  uint64_t v128;
  _QWORD *v129;

  v8 = type metadata accessor for DispatchWorkItemFlags(0);
  v123 = *(_QWORD *)(v8 - 8);
  v124 = v8;
  __chkstk_darwin(v8);
  v122 = (char *)&v110 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10001A9A8(&qword_1010EF660);
  v11 = __chkstk_darwin(v10);
  v121 = (char *)&v110 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v14 = (char *)&v110 - v13;
  v128 = type metadata accessor for BeaconObservation(0);
  v15 = *(_QWORD *)(v128 - 8);
  v16 = __chkstk_darwin(v128);
  v18 = (char *)&v110 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __chkstk_darwin(v16);
  v125 = (uint64_t)&v110 - v20;
  v21 = __chkstk_darwin(v19);
  v23 = (char *)&v110 - v22;
  v24 = __chkstk_darwin(v21);
  v25 = __chkstk_darwin(v24);
  v126 = (unsigned int (*)(uint64_t, uint64_t, char *))((char *)&v110 - v26);
  v27 = __chkstk_darwin(v25);
  v29 = (char *)&v110 - v28;
  __chkstk_darwin(v27);
  v32 = (char *)&v110 - v31;
  if (!a4)
    goto LABEL_18;
  v117 = v30;
  v33 = (void *)_convertErrorToNSError(_:)(a4);
  v34 = sub_1001D1D78(a3, v33);
  if ((v34 & 1) == 0)
  {

LABEL_18:
    v53 = type metadata accessor for UUID(0);
    (*(void (**)(char *, _QWORD *, uint64_t))(*(_QWORD *)(v53 - 8) + 16))(v18, a2, v53);
    v54 = v128;
    static Date.trustedNow.getter((uint64_t)&v18[*(int *)(v128 + 20)]);
    v18[*(int *)(v54 + 24)] = a3;
    v55 = sub_10001A9A8((uint64_t *)&unk_1010F78F0);
    v56 = *(unsigned __int8 *)(v15 + 80);
    v57 = (v56 + 32) & ~v56;
    v58 = swift_allocObject(v55, v57 + *(_QWORD *)(v15 + 72), v56 | 7);
    *(_OWORD *)(v58 + 16) = xmmword_100E22B00;
    sub_10005972C((uint64_t)v18, v58 + v57, type metadata accessor for BeaconObservation);
    v59 = type metadata accessor for Transaction(0);
    __chkstk_darwin(v59);
    *(&v110 - 4) = (_QWORD *)a1;
    *(&v110 - 3) = (_QWORD *)v58;
    *(&v110 - 2) = 0;
    *(&v110 - 1) = 0;
    static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd.BeaconObservationStore.save", 57, 2, sub_1001514CC, &v110 - 6, (char *)&type metadata for () + 8);
    swift_bridgeObjectRelease();
    v60 = (uint64_t)v18;
    return sub_1000126B0(v60, type metadata accessor for BeaconObservation);
  }
  v115 = v14;
  v111 = v32;
  v113 = v33;
  v35 = (_QWORD *)static os_log_type_t.default.getter(v34);
  if (qword_1010EA300 != -1)
    goto LABEL_50;
  while (1)
  {
    v36 = _swiftEmptyArrayStorage;
    os_log(_:dso:log:_:_:)(v35, &_mh_execute_header, qword_1011B7DE0, "Failed to connect to the beacon. Removing last firmware update observations", 75, 2, _swiftEmptyArrayStorage, v110);
    v114 = objc_autoreleasePoolPush();
    v37 = *(_QWORD *)(a1 + OBJC_IVAR____TtC12searchpartyd22BeaconObservationStore_observationsConcurrentQueue);
    v38 = sub_10001A9A8(&qword_1010F7770);
    v116 = v37;
    v39 = 0;
    OS_dispatch_queue.sync<A>(execute:)(sub_10007CAD4, a1, v38);
    v40 = v129;
    v41 = v129[2];
    v118 = a2;
    v127 = v23;
    if (!v41)
      goto LABEL_20;
    v42 = sub_100003FB0((uint64_t)a2);
    if ((v43 & 1) != 0)
    {
      v112 = v38;
      v44 = *(_QWORD *)(v40[7] + 8 * v42);
      swift_bridgeObjectRetain(v44);
      swift_bridgeObjectRelease();
      v45 = sub_100508D98(v44);
      swift_bridgeObjectRelease();
      sub_10088FD00((uint64_t)v45);
      v47 = v46;
      swift_release();
      v129 = _swiftEmptyArrayStorage;
      a2 = *(_QWORD **)(v47 + 16);
      if (a2)
      {
        v110 = (_QWORD *)a1;
        a1 = 0;
        v35 = _swiftEmptyArrayStorage;
        v119 = v15;
        v120 = a2;
        while (a1 < *(_QWORD *)(v47 + 16))
        {
          v48 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
          v49 = *(_QWORD *)(v15 + 72);
          sub_10005972C(v47 + v48 + v49 * a1, (uint64_t)v29, type metadata accessor for BeaconObservation);
          if (v29[*(int *)(v128 + 24)] == 9)
          {
            v50 = v39;
            sub_1000126EC((uint64_t)v29, (uint64_t)v126, type metadata accessor for BeaconObservation);
            if ((swift_isUniquelyReferenced_nonNull_native(v35) & 1) == 0)
              sub_10009AAC8(0, v35[2] + 1, 1);
            v35 = v129;
            v52 = v129[2];
            v51 = v129[3];
            if (v52 >= v51 >> 1)
            {
              sub_10009AAC8(v51 > 1, v52 + 1, 1);
              v35 = v129;
            }
            v35[2] = v52 + 1;
            sub_1000126EC((uint64_t)v126, (uint64_t)v35 + v48 + v52 * v49, type metadata accessor for BeaconObservation);
            v39 = v50;
            v15 = v119;
            a2 = v120;
          }
          else
          {
            sub_1000126B0((uint64_t)v29, type metadata accessor for BeaconObservation);
          }
          ++a1;
          v23 = v127;
          if (a2 == (_QWORD *)a1)
          {
            v62 = v129;
            a1 = (unint64_t)v110;
            goto LABEL_23;
          }
        }
        __break(1u);
        goto LABEL_49;
      }
      v62 = _swiftEmptyArrayStorage;
LABEL_23:
      swift_release();
      v29 = (char *)v128;
      v36 = _swiftEmptyArrayStorage;
      v38 = v112;
    }
    else
    {
LABEL_20:
      swift_bridgeObjectRelease();
      v62 = _swiftEmptyArrayStorage;
      v29 = (char *)v128;
    }
    objc_autoreleasePoolPop(v114);
    v63 = (uint64_t)v115;
    sub_100A797E8((uint64_t)v62, (uint64_t)v115);
    swift_bridgeObjectRelease();
    v126 = *(unsigned int (**)(uint64_t, uint64_t, char *))(v15 + 48);
    if (v126(v63, 1, v29) == 1)
    {
      sub_100004048(v63, &qword_1010EF660);
    }
    else
    {
      v112 = v38;
      v64 = (uint64_t)v111;
      v65 = sub_1000126EC(v63, (uint64_t)v111, type metadata accessor for BeaconObservation);
      v66 = __chkstk_darwin(v65);
      *(&v110 - 2) = (_QWORD *)v64;
      v67 = v122;
      v68 = static DispatchWorkItemFlags.barrier.getter(v66);
      __chkstk_darwin(v68);
      *(&v110 - 4) = (_QWORD *)a1;
      *(&v110 - 3) = v69;
      *(&v110 - 2) = sub_1001D32F4;
      *(&v110 - 1) = &v110 - 4;
      OS_dispatch_queue.sync<A>(flags:execute:)(v67, sub_1001D3478);
      v120 = v39;
      v70 = (*(uint64_t (**)(char *, uint64_t))(v123 + 8))(v67, v124);
      v23 = v127;
      v71 = static os_log_type_t.default.getter(v70);
      v72 = qword_1011B7DE0;
      v73 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
      v74 = swift_allocObject(v73, 72, 7);
      *(_OWORD *)(v74 + 16) = xmmword_100E22B00;
      v75 = type metadata accessor for Date(0);
      v76 = sub_100006204(&qword_1010EE0F0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
      v77 = dispatch thunk of CustomStringConvertible.description.getter(v75, v76);
      v79 = v78;
      *(_QWORD *)(v74 + 56) = &type metadata for String;
      *(_QWORD *)(v74 + 64) = sub_10001AA00();
      *(_QWORD *)(v74 + 32) = v77;
      *(_QWORD *)(v74 + 40) = v79;
      v80 = v72;
      v39 = (char *)v120;
      v36 = _swiftEmptyArrayStorage;
      os_log(_:dso:log:_:_:)(v71, &_mh_execute_header, v80, "Last firmwareUpdateNotified observation is removed. Observation Date: %@", 72, 2, v74);
      v29 = (char *)v128;
      swift_bridgeObjectRelease();
      v81 = v64;
      v38 = v112;
      sub_1000126B0(v81, type metadata accessor for BeaconObservation);
    }
    v120 = objc_autoreleasePoolPush();
    OS_dispatch_queue.sync<A>(execute:)(sub_10007CAD4, a1, v38);
    v115 = v39;
    v82 = v129;
    if (!v129[2])
    {
      swift_bridgeObjectRelease();
      v83 = (uint64_t)v118;
LABEL_42:
      v94 = (uint64_t)v121;
      goto LABEL_45;
    }
    v83 = (uint64_t)v118;
    v84 = sub_100003FB0((uint64_t)v118);
    if ((v85 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      goto LABEL_42;
    }
    v86 = *(_QWORD *)(v82[7] + 8 * v84);
    swift_bridgeObjectRetain(v86);
    swift_bridgeObjectRelease();
    v87 = sub_100508D98(v86);
    swift_bridgeObjectRelease();
    sub_10088FD00((uint64_t)v87);
    a2 = v88;
    swift_release();
    v129 = _swiftEmptyArrayStorage;
    v89 = (_QWORD *)a2[2];
    if (!v89)
      break;
    v110 = (_QWORD *)a1;
    a1 = 0;
    v35 = _swiftEmptyArrayStorage;
    while (a1 < a2[2])
    {
      v90 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
      v91 = *(_QWORD *)(v15 + 72);
      sub_10005972C((uint64_t)a2 + v90 + v91 * a1, (uint64_t)v23, type metadata accessor for BeaconObservation);
      if (v23[*((int *)v29 + 6)] == 6)
      {
        sub_1000126EC((uint64_t)v23, v125, type metadata accessor for BeaconObservation);
        if ((swift_isUniquelyReferenced_nonNull_native(v35) & 1) == 0)
          sub_10009AAC8(0, v35[2] + 1, 1);
        v35 = v129;
        v93 = v129[2];
        v92 = v129[3];
        if (v93 >= v92 >> 1)
        {
          sub_10009AAC8(v92 > 1, v93 + 1, 1);
          v35 = v129;
        }
        v35[2] = v93 + 1;
        sub_1000126EC(v125, (uint64_t)v35 + v90 + v93 * v91, type metadata accessor for BeaconObservation);
        v23 = v127;
        v29 = (char *)v128;
      }
      else
      {
        sub_1000126B0((uint64_t)v23, type metadata accessor for BeaconObservation);
      }
      if (v89 == (_QWORD *)++a1)
      {
        v36 = v129;
        a1 = (unint64_t)v110;
        goto LABEL_44;
      }
    }
LABEL_49:
    __break(1u);
LABEL_50:
    swift_once(&qword_1010EA300, sub_100B5E204);
  }
LABEL_44:
  swift_release();
  v83 = (uint64_t)v118;
  v94 = (uint64_t)v121;
LABEL_45:
  objc_autoreleasePoolPop(v120);
  sub_100A797E8((uint64_t)v36, v94);
  swift_bridgeObjectRelease();
  if (v126(v94, 1, v29) != 1)
  {
    v95 = v117;
    v96 = sub_1000126EC(v94, v117, type metadata accessor for BeaconObservation);
    v97 = __chkstk_darwin(v96);
    *(&v110 - 2) = (_QWORD *)v95;
    v98 = v122;
    v99 = static DispatchWorkItemFlags.barrier.getter(v97);
    __chkstk_darwin(v99);
    *(&v110 - 4) = (_QWORD *)a1;
    *(&v110 - 3) = (_QWORD *)v83;
    *(&v110 - 2) = sub_1001D32F4;
    *(&v110 - 1) = &v110 - 4;
    OS_dispatch_queue.sync<A>(flags:execute:)(v98, sub_1001D3478);
    v100 = (*(uint64_t (**)(char *, uint64_t))(v123 + 8))(v98, v124);
    v101 = static os_log_type_t.default.getter(v100);
    v102 = qword_1011B7DE0;
    v103 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v104 = swift_allocObject(v103, 72, 7);
    *(_OWORD *)(v104 + 16) = xmmword_100E22B00;
    v105 = type metadata accessor for Date(0);
    v106 = sub_100006204(&qword_1010EE0F0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    v107 = dispatch thunk of CustomStringConvertible.description.getter(v105, v106);
    v109 = v108;
    *(_QWORD *)(v104 + 56) = &type metadata for String;
    *(_QWORD *)(v104 + 64) = sub_10001AA00();
    *(_QWORD *)(v104 + 32) = v107;
    *(_QWORD *)(v104 + 40) = v109;
    os_log(_:dso:log:_:_:)(v101, &_mh_execute_header, v102, "Last firmwareUpdateInProgress observation is removed. Observation Date: %@", 74, 2, v104);

    swift_bridgeObjectRelease();
    v60 = v95;
    return sub_1000126B0(v60, type metadata accessor for BeaconObservation);
  }

  return sub_100004048(v94, &qword_1010EF660);
}

uint64_t sub_1001D2A04(uint64_t a1)
{
  uint64_t *v1;

  return sub_100BF87F4(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t sub_1001D2A20()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  v7 = (v5 + 7) & 0xFFFFFFFFFFFFF8;
  v8 = (v5 + 31) & 0xFFFFFFFFFFFFFFF8;
  swift_release(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v7 + 8));
  swift_errorRelease(*(_QWORD *)(v0 + v8));
  return swift_deallocObject(v0, v8 + 8, v6);
}

uint64_t sub_1001D2AC4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  _QWORD *v12;

  v2 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = v3 + *(_QWORD *)(v2 + 64);
  v5 = (v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = *(_QWORD *)(v0 + 16);
  v7 = v0 + v3;
  v8 = *(_QWORD *)(v0 + v5);
  v9 = *(_QWORD *)(v0 + v5 + 8);
  v10 = *(_BYTE *)(v0 + v5 + 16);
  v11 = *(_QWORD *)(v0 + ((v4 + 31) & 0xFFFFFFFFFFFFF8));
  v12 = (_QWORD *)swift_task_alloc(dword_1010F2174);
  *(_QWORD *)(v1 + 16) = v12;
  *v12 = v1;
  v12[1] = sub_100004A74;
  return sub_1001CEEBC(v6, v7, v8, v9, v10, v11);
}

uint64_t sub_1001D2B7C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v2 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = *(_QWORD *)(v0 + 16);
  v5 = v0 + v3;
  v6 = (uint64_t *)(v0 + ((*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8));
  v7 = *v6;
  v8 = v6[1];
  v9 = (_QWORD *)swift_task_alloc(dword_1010F2184);
  *(_QWORD *)(v1 + 16) = v9;
  *v9 = v1;
  v9[1] = sub_100004A74;
  return sub_1001CF734(v4, v5, v7, v8);
}

uint64_t sub_1001D2C14()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for UUID(0) - 8) + 80);
  v3 = *(_QWORD *)(v0 + 16);
  v4 = v0 + ((v2 + 24) & ~v2);
  v5 = (_QWORD *)swift_task_alloc(dword_1010F2194);
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_100004A74;
  return sub_1001CD57C(v3, v4);
}

_QWORD *sub_1001D2C80(_QWORD *a1)
{
  destroy for FirmwareUpdateAlertService(a1);
  return a1;
}

uint64_t sub_1001D2CB8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v6 + 8));
  return swift_deallocObject(v0, v6 + 16, v5);
}

uint64_t sub_1001D2D4C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v2 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = *(_QWORD *)(v0 + 16);
  v5 = v0 + v3;
  v6 = (uint64_t *)(v0 + ((*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8));
  v7 = *v6;
  v8 = v6[1];
  v9 = (_QWORD *)swift_task_alloc(dword_1010F21A4);
  *(_QWORD *)(v1 + 16) = v9;
  *v9 = v1;
  v9[1] = sub_100004A74;
  return sub_1001CEA3C(v4, v5, v7, v8);
}

uint64_t sub_1001D2DE0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001A9A8(&qword_1010EBE20);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001D2E34@<X0>(BOOL *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for OwnedBeaconRecord(0) - 8) + 80);
  result = sub_1004A6EE4(v1 + ((v3 + 24) & ~v3), *(_QWORD *)(v1 + 16));
  *a1 = result == 0;
  return result;
}

uint64_t sub_1001D2E84()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t v21;

  v1 = (int *)type metadata accessor for OwnedBeaconRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_release();
  v6 = v0 + v4;
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v7 = v0 + v4 + v1[5];
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v10(v7, v8);
  v11 = v0 + v4 + v1[6];
  v12 = type metadata accessor for StableIdentifier(0);
  switch(swift_getEnumCaseMultiPayload(v11, v12))
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v10(v11, v8);
      v21 = v5;
      sub_10001A9A8(&qword_101106F40);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v10(v11, v8);
      v21 = v5;
      sub_10001A9A8((uint64_t *)&unk_1010F46F0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      v5 = v21;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }
  v13 = v6 + v1[7];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v13, 1, v8))
    v10(v13, v8);
  v14 = v6 + v1[8];
  v15 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v14, v15);
  sub_10001BC14(*(_QWORD *)(v6 + v1[9]), *(_QWORD *)(v6 + v1[9] + 8));
  v16 = (uint64_t *)(v6 + v1[10]);
  v17 = v16[1];
  if (v17 >> 60 != 15)
    sub_10001BC14(*v16, v17);
  v18 = (uint64_t *)(v6 + v1[11]);
  v19 = v18[1];
  if (v19 >> 60 != 15)
    sub_10001BC14(*v18, v19);
  sub_10001BC14(*(_QWORD *)(v6 + v1[12]), *(_QWORD *)(v6 + v1[12] + 8));
  sub_10001BC14(*(_QWORD *)(v6 + v1[13]), *(_QWORD *)(v6 + v1[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_1001D3124@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for OwnedBeaconRecord(0) - 8) + 80);
  return sub_1001CE584(v1 + ((v3 + 24) & ~v3), a1);
}

unint64_t sub_1001D3164()
{
  uint64_t v0;

  return sub_1001CE6A4(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), *(void **)(v0 + 32), *(unsigned __int8 *)(v0 + 40), *(unsigned __int8 *)(v0 + 41));
}

void sub_1001D3178(uint64_t a1)
{
  sub_1001D002C(a1);
}

uint64_t sub_1001D3184()
{
  uint64_t v0;

  return sub_1001D0138(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1001D318C()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001D31B0(uint64_t a1)
{
  uint64_t v1;

  return sub_1001D0454(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_1001D31BC(uint64_t a1)
{
  uint64_t v1;

  return sub_1001D04A8(a1, *(void (**)(void))(v1 + 16), *(_QWORD *)(v1 + 24), *(void (**)(_QWORD))(v1 + 32), *(_QWORD *)(v1 + 40), &qword_1010F21B0);
}

uint64_t sub_1001D31E0(uint64_t a1)
{
  uint64_t v1;

  return sub_1001D0400(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_1001D31EC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1001D3218(uint64_t a1)
{
  uint64_t v1;

  return sub_1001D04A8(a1, *(void (**)(void))(v1 + 16), *(_QWORD *)(v1 + 24), *(void (**)(_QWORD))(v1 + 32), *(_QWORD *)(v1 + 40), (uint64_t *)&unk_101108050);
}

uint64_t sub_1001D3240()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

void sub_1001D326C()
{
  sub_1007EEF64(18);
  Transaction.end()();
}

uint64_t sub_1001D32A0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for UUID(0) - 8) + 80);
  return sub_10080B950(v1 + ((v3 + 24) & ~v3), a1);
}

unint64_t sub_1001D32E8()
{
  uint64_t *v0;

  return sub_1001CFC84(v0[2], v0[3], v0[4]);
}

uint64_t sub_1001D32F4(uint64_t a1)
{
  uint64_t v1;

  return sub_1001CFF10(a1, *(_QWORD *)(v1 + 16));
}

void sub_1001D32FC(uint64_t a1)
{
  uint64_t v1;

  sub_1001CB24C(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_1001D3304()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1001D3330(char a1)
{
  uint64_t v1;

  return sub_1001CB03C(a1, *(char **)(v1 + 16), *(uint64_t (**)(_QWORD *))(v1 + 24));
}

void sub_1001D333C(_QWORD *a1@<X8>)
{
  uint64_t v1;

  sub_10058ED88(v1, a1);
}

uint64_t sub_1001D3354()
{
  _QWORD *v0;

  swift_unknownObjectRelease(v0[2]);
  swift_bridgeObjectRelease(v0[4]);
  swift_release(v0[5]);
  swift_release(v0[7]);
  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_1001D3390(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v9 = v1[6];
  v8 = v1[7];
  v10 = (_QWORD *)swift_task_alloc(dword_1010F21D4);
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = sub_100004C28;
  return sub_1001CB8DC(a1, v4, v5, v6, v7, v9, v8);
}

uint64_t sub_1001D341C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001D3440()
{
  uint64_t v0;

  return (*(uint64_t (**)(uint64_t))(v0 + 16))(1);
}

void sub_1001D3478()
{
  sub_100151538();
}

double sub_1001D3498@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t updated;
  int *v18;
  _UNKNOWN **v19;
  _QWORD *v20;
  char *v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  double result;
  __int128 v28;
  uint64_t v29;
  _UNKNOWN **v30;

  if ((a4 & 1) != 0)
  {
    if ((a8 & 1) != 0)
    {
      updated = type metadata accessor for ItemShareAirTagCircleUpdateWithBlockedContactUserNotification(0);
      v18 = (int *)updated;
      v19 = &off_10105E068;
    }
    else
    {
      updated = type metadata accessor for ItemShareAirTagCircleUpdateUserNotification(0);
      v18 = (int *)updated;
      v19 = &off_10105E0A8;
    }
  }
  else if ((a8 & 1) != 0)
  {
    updated = type metadata accessor for ItemShareCircleUpdateWithBlockedContactUserNotification(0);
    v18 = (int *)updated;
    v19 = &off_10105E0E8;
  }
  else
  {
    updated = type metadata accessor for ItemShareCircleUpdateUserNotification(0);
    v18 = (int *)updated;
    v19 = &off_10105E128;
  }
  v29 = updated;
  v30 = v19;
  v20 = sub_100018F08(&v28);
  sub_10005972C(a1, (uint64_t)v20, type metadata accessor for MemberSharingCircle);
  v21 = (char *)v20 + v18[6];
  v22 = type metadata accessor for UUID(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v21, a5, v22);
  v23 = (_QWORD *)((char *)v20 + v18[5]);
  *v23 = a2;
  v23[1] = a3;
  v24 = (_QWORD *)((char *)v20 + v18[7]);
  *v24 = a6;
  v24[1] = a7;
  v25 = (_QWORD *)((char *)v20 + v18[8]);
  *v25 = a10;
  v25[1] = a11;
  sub_10000F9FC(&v28, a9);
  swift_bridgeObjectRetain(a3);
  swift_bridgeObjectRetain(a7);
  *(_QWORD *)&result = swift_bridgeObjectRetain(a11).n128_u64[0];
  return result;
}

uint64_t type metadata accessor for ItemShareCircleUpdateUserNotification(uint64_t a1)
{
  return sub_10001B630(a1, qword_1010F2418, (uint64_t)&nominal type descriptor for ItemShareCircleUpdateUserNotification);
}

uint64_t type metadata accessor for ItemShareCircleUpdateWithBlockedContactUserNotification(uint64_t a1)
{
  return sub_10001B630(a1, qword_1010F2378, (uint64_t)&nominal type descriptor for ItemShareCircleUpdateWithBlockedContactUserNotification);
}

uint64_t type metadata accessor for ItemShareAirTagCircleUpdateUserNotification(uint64_t a1)
{
  return sub_10001B630(a1, qword_1010F22D8, (uint64_t)&nominal type descriptor for ItemShareAirTagCircleUpdateUserNotification);
}

uint64_t type metadata accessor for ItemShareAirTagCircleUpdateWithBlockedContactUserNotification(uint64_t a1)
{
  return sub_10001B630(a1, qword_1010F2238, (uint64_t)&nominal type descriptor for ItemShareAirTagCircleUpdateWithBlockedContactUserNotification);
}

uint64_t sub_1001D3650(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001D365C);
}

uint64_t sub_1001D3660(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001D366C);
}

uint64_t sub_1001D3674(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001D3680);
}

uint64_t sub_1001D3684(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001D3690);
}

uint64_t sub_1001D3694(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001D36A0);
}

uint64_t sub_1001D36A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001D36B0);
}

uint64_t *sub_1001D36B4(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  unint64_t v8;
  int *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  void (*v14)(char *, char *, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  __n128 v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v33 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v33 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = *a2;
    v8 = a2[1];
    sub_10001BBBC(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    v9 = (int *)type metadata accessor for MemberSharingCircle(0);
    v10 = v9[5];
    v11 = (char *)a1 + v10;
    v12 = (char *)a2 + v10;
    v13 = type metadata accessor for UUID(0);
    v14 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16);
    v14(v11, v12, v13);
    v14((char *)a1 + v9[6], (char *)a2 + v9[6], v13);
    v14((char *)a1 + v9[7], (char *)a2 + v9[7], v13);
    v14((char *)a1 + v9[8], (char *)a2 + v9[8], v13);
    v15 = v9[9];
    v16 = *(uint64_t *)((char *)a2 + v15);
    *(uint64_t *)((char *)a1 + v15) = v16;
    *((_BYTE *)a1 + v9[10]) = *((_BYTE *)a2 + v9[10]);
    v17 = a3[5];
    v18 = a3[6];
    v19 = (uint64_t *)((char *)a1 + v17);
    v20 = (uint64_t *)((char *)a2 + v17);
    v21 = v20[1];
    *v19 = *v20;
    v19[1] = v21;
    v22 = (char *)a1 + v18;
    v23 = (char *)a2 + v18;
    swift_bridgeObjectRetain(v16);
    v24 = swift_bridgeObjectRetain(v21);
    ((void (*)(char *, char *, uint64_t, __n128))v14)(v22, v23, v13, v24);
    v25 = a3[7];
    v26 = a3[8];
    v27 = (uint64_t *)((char *)a1 + v25);
    v28 = (uint64_t *)((char *)a2 + v25);
    v29 = v28[1];
    *v27 = *v28;
    v27[1] = v29;
    v30 = (uint64_t *)((char *)a1 + v26);
    v31 = (uint64_t *)((char *)a2 + v26);
    v32 = v31[1];
    *v30 = *v31;
    v30[1] = v32;
    swift_bridgeObjectRetain(v29);
    swift_bridgeObjectRetain(v32);
  }
  return a1;
}

uint64_t sub_1001D382C(uint64_t a1, uint64_t a2)
{
  int *v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);

  sub_10001BC14(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  v4 = (int *)type metadata accessor for MemberSharingCircle(0);
  v5 = a1 + v4[5];
  v6 = type metadata accessor for UUID(0);
  v7 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8);
  v7(v5, v6);
  v7(a1 + v4[6], v6);
  v7(a1 + v4[7], v6);
  v7(a1 + v4[8], v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v7(a1 + *(int *)(a2 + 24), v6);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t *sub_1001D3914(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  unint64_t v7;
  int *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  __n128 v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;

  v6 = *a2;
  v7 = a2[1];
  sub_10001BBBC(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  v8 = (int *)type metadata accessor for MemberSharingCircle(0);
  v9 = v8[5];
  v10 = (char *)a1 + v9;
  v11 = (char *)a2 + v9;
  v12 = type metadata accessor for UUID(0);
  v13 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
  v13(v10, v11, v12);
  v13((char *)a1 + v8[6], (char *)a2 + v8[6], v12);
  v13((char *)a1 + v8[7], (char *)a2 + v8[7], v12);
  v13((char *)a1 + v8[8], (char *)a2 + v8[8], v12);
  v14 = v8[9];
  v15 = *(uint64_t *)((char *)a2 + v14);
  *(uint64_t *)((char *)a1 + v14) = v15;
  *((_BYTE *)a1 + v8[10]) = *((_BYTE *)a2 + v8[10]);
  v16 = a3[5];
  v17 = a3[6];
  v18 = (uint64_t *)((char *)a1 + v16);
  v19 = (uint64_t *)((char *)a2 + v16);
  v20 = v19[1];
  *v18 = *v19;
  v18[1] = v20;
  v21 = (char *)a1 + v17;
  v22 = (char *)a2 + v17;
  swift_bridgeObjectRetain(v15);
  v23 = swift_bridgeObjectRetain(v20);
  ((void (*)(char *, char *, uint64_t, __n128))v13)(v21, v22, v12, v23);
  v24 = a3[7];
  v25 = a3[8];
  v26 = (uint64_t *)((char *)a1 + v24);
  v27 = (uint64_t *)((char *)a2 + v24);
  v28 = v27[1];
  *v26 = *v27;
  v26[1] = v28;
  v29 = (uint64_t *)((char *)a1 + v25);
  v30 = (uint64_t *)((char *)a2 + v25);
  v31 = v30[1];
  *v29 = *v30;
  v29[1] = v31;
  swift_bridgeObjectRetain(v28);
  swift_bridgeObjectRetain(v31);
  return a1;
}

uint64_t *sub_1001D3A60(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  void (*v15)(char *, char *, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;

  v6 = *a2;
  v7 = a2[1];
  sub_10001BBBC(*a2, v7);
  v8 = *a1;
  v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  sub_10001BC14(v8, v9);
  v10 = (int *)type metadata accessor for MemberSharingCircle(0);
  v11 = v10[5];
  v12 = (char *)a1 + v11;
  v13 = (char *)a2 + v11;
  v14 = type metadata accessor for UUID(0);
  v15 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 24);
  v15(v12, v13, v14);
  v15((char *)a1 + v10[6], (char *)a2 + v10[6], v14);
  v15((char *)a1 + v10[7], (char *)a2 + v10[7], v14);
  v15((char *)a1 + v10[8], (char *)a2 + v10[8], v14);
  v16 = v10[9];
  v17 = *(uint64_t *)((char *)a2 + v16);
  *(uint64_t *)((char *)a1 + v16) = v17;
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRelease();
  *((_BYTE *)a1 + v10[10]) = *((_BYTE *)a2 + v10[10]);
  v18 = a3[5];
  v19 = (uint64_t *)((char *)a1 + v18);
  v20 = (uint64_t *)((char *)a2 + v18);
  *v19 = *v20;
  v21 = v20[1];
  v19[1] = v21;
  swift_bridgeObjectRetain(v21);
  swift_bridgeObjectRelease();
  v15((char *)a1 + a3[6], (char *)a2 + a3[6], v14);
  v22 = a3[7];
  v23 = (uint64_t *)((char *)a1 + v22);
  v24 = (uint64_t *)((char *)a2 + v22);
  *v23 = *v24;
  v25 = v24[1];
  v23[1] = v25;
  swift_bridgeObjectRetain(v25);
  swift_bridgeObjectRelease();
  v26 = a3[8];
  v27 = (uint64_t *)((char *)a1 + v26);
  v28 = (uint64_t *)((char *)a2 + v26);
  *v27 = *v28;
  v29 = v28[1];
  v27[1] = v29;
  swift_bridgeObjectRetain(v29);
  swift_bridgeObjectRelease();
  return a1;
}

char *sub_1001D3BF4(char *a1, char *a2, int *a3)
{
  int *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  void (*v11)(char *, char *, uint64_t);
  uint64_t v12;
  uint64_t v13;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = (int *)type metadata accessor for MemberSharingCircle(0);
  v7 = v6[5];
  v8 = &a1[v7];
  v9 = &a2[v7];
  v10 = type metadata accessor for UUID(0);
  v11 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 32);
  v11(v8, v9, v10);
  v11(&a1[v6[6]], &a2[v6[6]], v10);
  v11(&a1[v6[7]], &a2[v6[7]], v10);
  v11(&a1[v6[8]], &a2[v6[8]], v10);
  *(_QWORD *)&a1[v6[9]] = *(_QWORD *)&a2[v6[9]];
  a1[v6[10]] = a2[v6[10]];
  v12 = a3[6];
  *(_OWORD *)&a1[a3[5]] = *(_OWORD *)&a2[a3[5]];
  v11(&a1[v12], &a2[v12], v10);
  v13 = a3[8];
  *(_OWORD *)&a1[a3[7]] = *(_OWORD *)&a2[a3[7]];
  *(_OWORD *)&a1[v13] = *(_OWORD *)&a2[v13];
  return a1;
}

uint64_t *sub_1001D3CFC(uint64_t *a1, char *a2, int *a3)
{
  uint64_t v6;
  unint64_t v7;
  int *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;

  v6 = *a1;
  v7 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_10001BC14(v6, v7);
  v8 = (int *)type metadata accessor for MemberSharingCircle(0);
  v9 = v8[5];
  v10 = (char *)a1 + v9;
  v11 = &a2[v9];
  v12 = type metadata accessor for UUID(0);
  v13 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 40);
  v13(v10, v11, v12);
  v13((char *)a1 + v8[6], &a2[v8[6]], v12);
  v13((char *)a1 + v8[7], &a2[v8[7]], v12);
  v13((char *)a1 + v8[8], &a2[v8[8]], v12);
  *(uint64_t *)((char *)a1 + v8[9]) = *(_QWORD *)&a2[v8[9]];
  swift_bridgeObjectRelease();
  *((_BYTE *)a1 + v8[10]) = a2[v8[10]];
  v14 = a3[5];
  v15 = (uint64_t *)((char *)a1 + v14);
  v16 = (uint64_t *)&a2[v14];
  v18 = *v16;
  v17 = v16[1];
  *v15 = v18;
  v15[1] = v17;
  swift_bridgeObjectRelease();
  v13((char *)a1 + a3[6], &a2[a3[6]], v12);
  v19 = a3[7];
  v20 = (uint64_t *)((char *)a1 + v19);
  v21 = (uint64_t *)&a2[v19];
  v23 = *v21;
  v22 = v21[1];
  *v20 = v23;
  v20[1] = v22;
  swift_bridgeObjectRelease();
  v24 = a3[8];
  v25 = (uint64_t *)((char *)a1 + v24);
  v26 = (uint64_t *)&a2[v24];
  v28 = *v26;
  v27 = v26[1];
  *v25 = v28;
  v25[1] = v27;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1001D3E50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001D3E5C);
}

uint64_t sub_1001D3E60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  unint64_t v11;

  v6 = type metadata accessor for MemberSharingCircle(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    v8 = type metadata accessor for UUID(0);
    v10 = a1 + *(int *)(a3 + 24);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
    return v9(v10, a2, v8);
  }
  v11 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8);
  if (v11 >= 0xFFFFFFFF)
    LODWORD(v11) = -1;
  return (v11 + 1);
}

uint64_t sub_1001D3F0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001D3F18);
}

uint64_t sub_1001D3F1C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  result = type metadata accessor for MemberSharingCircle(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    if (a3 == 0x7FFFFFFF)
    {
      *(_QWORD *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
      return result;
    }
    v10 = type metadata accessor for UUID(0);
    v12 = a1 + *(int *)(a4 + 24);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t sub_1001D3FC4(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[5];

  result = type metadata accessor for MemberSharingCircle(319);
  if (v3 <= 0x3F)
  {
    v5[0] = *(_QWORD *)(result - 8) + 64;
    v5[1] = &unk_100E2C080;
    result = type metadata accessor for UUID(319);
    if (v4 <= 0x3F)
    {
      v5[2] = *(_QWORD *)(result - 8) + 64;
      v5[3] = &unk_100E2C080;
      v5[4] = &unk_100E2C080;
      swift_initStructMetadata(a1, 256, 5, v5, a1 + 16);
      return 0;
    }
  }
  return result;
}

uint64_t sub_1001D4054(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t inited;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _BYTE v17[48];

  v3 = type metadata accessor for LocalizationUtility.Table(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = &v17[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = sub_10001A9A8(&qword_101106C20);
  inited = swift_initStackObject(v7, v17);
  *(_OWORD *)(inited + 16) = xmmword_100E22B00;
  v9 = (_QWORD *)(v1 + *(int *)(a1(0) + 20));
  v10 = v9[1];
  *(_QWORD *)(inited + 32) = *v9;
  *(_QWORD *)(inited + 40) = v10;
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v4 + 104))(v6, enum case for LocalizationUtility.Table.itemSharing(_:), v3);
  swift_bridgeObjectRetain(v10);
  v11 = static LocalizationUtility.localizedString(key:table:)(0xD00000000000002DLL, 0x8000000100ECB270, v6);
  v13 = v12;
  (*(void (**)(_BYTE *, uint64_t))(v4 + 8))(v6, v3);
  v14 = sub_1007EDC10(inited);
  swift_setDeallocating(inited);
  swift_arrayDestroy(inited + 32, *(_QWORD *)(inited + 16), &type metadata for String);
  v15 = String.init(format:arguments:)(v11, v13, v14);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v15;
}

uint64_t sub_1001D41C0(uint64_t (*a1)(_QWORD), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t inited;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  _BYTE v32[64];

  v30 = a2;
  v31 = a3;
  v5 = type metadata accessor for LocalizationUtility.Table(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10001A9A8(&qword_101106C20);
  inited = swift_initStackObject(v9, v32);
  *(_OWORD *)(inited + 16) = xmmword_100E22B10;
  v11 = a1(0);
  v12 = (uint64_t *)(v3 + *(int *)(v11 + 32));
  v13 = *v12;
  v14 = v12[1];
  swift_bridgeObjectRetain(v14);
  v15 = sub_100C73E1C(v13, v14);
  v17 = v16;
  swift_bridgeObjectRelease();
  *(_QWORD *)(inited + 32) = v15;
  *(_QWORD *)(inited + 40) = v17;
  v18 = (uint64_t *)(v3 + *(int *)(v11 + 28));
  v19 = *v18;
  v20 = v18[1];
  swift_bridgeObjectRetain(v20);
  v21 = sub_100C73E1C(v19, v20);
  v23 = v22;
  swift_bridgeObjectRelease();
  *(_QWORD *)(inited + 48) = v21;
  *(_QWORD *)(inited + 56) = v23;
  (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v8, enum case for LocalizationUtility.Table.itemSharing(_:), v5);
  v24 = static LocalizationUtility.localizedString(key:table:)(v30, v31, v8);
  v26 = v25;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v27 = sub_1007EDC10(inited);
  swift_setDeallocating(inited);
  swift_arrayDestroy(inited + 32, *(_QWORD *)(inited + 16), &type metadata for String);
  v28 = String.init(format:arguments:)(v24, v26, v27);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v28;
}

unint64_t sub_1001D4378(uint64_t (*a1)(_QWORD), void (*a2)(uint64_t *, char *), uint64_t (*a3)(uint64_t))
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, char *, uint64_t);
  void (*v26)(char *, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v29)(_QWORD);
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint64_t v34;
  uint64_t (*v35)(uint64_t);
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t (*v42)(uint64_t);
  unint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t inited;
  uint64_t v47;
  uint64_t v48;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t (*v55)(_QWORD);
  uint64_t (*v56)(uint64_t);
  uint64_t v57;
  uint64_t v58;
  _BYTE v59[16];
  char *v60;
  _BYTE v61[80];
  uint64_t v62;
  uint64_t v63[3];

  v56 = a3;
  v55 = a1;
  v52 = a1(0);
  v5 = __chkstk_darwin(v52);
  v57 = (uint64_t)&v50 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v54 = (uint64_t)&v50 - v7;
  v8 = type metadata accessor for MemberSharingCircle(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v50 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10001A9A8(&qword_1010EE178);
  __chkstk_darwin(v11);
  v13 = (char *)&v50 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v14);
  v16 = (char *)&v50 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for UUID(0);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v51 = (char *)&v50 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10005972C(v3, (uint64_t)v10, type metadata accessor for MemberSharingCircle);
  v53 = v8;
  v20 = swift_bridgeObjectRetain(*(_QWORD *)&v10[*(int *)(v8 + 36)]);
  v21 = sub_100508A54(v20);
  swift_bridgeObjectRelease();
  v60 = v10;
  v22 = sub_100307244((uint64_t)_swiftEmptyDictionarySingleton, a2, (uint64_t)v59, v21);
  swift_release();
  sub_1000126B0((uint64_t)v10, type metadata accessor for MemberSharingCircle);
  v58 = v3;
  sub_100A77C0C(v56, v22, (uint64_t)v13);
  swift_bridgeObjectRelease();
  v23 = sub_10001A9A8(&qword_1010EE170);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 48))(v13, 1, v23) == 1)
  {
    sub_100004048((uint64_t)v13, &qword_1010EE178);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v18 + 56))(v16, 1, 1, v17);
  }
  else
  {
    v24 = &v13[*(int *)(v23 + 48)];
    v25 = *(void (**)(char *, char *, uint64_t))(v18 + 32);
    v25(v16, v13, v17);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v16, 0, 1, v17);
    v26 = *(void (**)(char *, uint64_t))(v18 + 8);
    v26(v24, v17);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17) != 1)
    {
      v44 = v51;
      v25(v51, v16, v17);
      v45 = sub_10001A9A8((uint64_t *)&unk_1010EB910);
      inited = swift_initStackObject(v45, v61);
      *(_OWORD *)(inited + 16) = xmmword_100E22B00;
      *(_QWORD *)(inited + 32) = 0x6564496572616873;
      *(_QWORD *)(inited + 40) = 0xEF7265696669746ELL;
      v47 = UUID.uuidString.getter(inited);
      *(_QWORD *)(inited + 72) = &type metadata for String;
      *(_QWORD *)(inited + 48) = v47;
      *(_QWORD *)(inited + 56) = v48;
      v43 = sub_1006B8B10(inited);
      v26(v44, v17);
      return v43;
    }
  }
  sub_100004048((uint64_t)v16, &qword_1010ED860);
  if (qword_1010E9938 != -1)
    swift_once(&qword_1010E9938, sub_1000AFBB0);
  v27 = type metadata accessor for Logger(0);
  sub_10001A9E8(v27, (uint64_t)qword_1011B6748);
  v28 = v54;
  v29 = v55;
  sub_10005972C(v3, v54, v55);
  v30 = v57;
  v31 = sub_10005972C(v3, v57, v29);
  v32 = Logger.logObject.getter(v31);
  v33 = static os_log_type_t.error.getter(v32);
  if (os_log_type_enabled(v32, v33))
  {
    v34 = swift_slowAlloc(42, -1);
    v35 = (uint64_t (*)(uint64_t))swift_slowAlloc(64, -1);
    v56 = v35;
    *(_DWORD *)v34 = 141558787;
    v62 = 1752392040;
    v63[0] = (uint64_t)v35;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v62, v63, v34 + 4, v34 + 12);
    *(_WORD *)(v34 + 12) = 2081;
    v36 = sub_1001D4C18();
    v37 = dispatch thunk of CustomStringConvertible.description.getter(v17, v36);
    v62 = sub_100016940(v37, v38, v63);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v62, v63, v34 + 14, v34 + 22);
    swift_bridgeObjectRelease();
    sub_1000126B0(v28, v29);
    *(_WORD *)(v34 + 22) = 2160;
    v62 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v62, v63, v34 + 24, v34 + 32);
    *(_WORD *)(v34 + 32) = 2081;
    v39 = v57;
    v40 = dispatch thunk of CustomStringConvertible.description.getter(v17, v36);
    v62 = sub_100016940(v40, v41, v63);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v62, v63, v34 + 34, v34 + 42);
    swift_bridgeObjectRelease();
    sub_1000126B0(v39, v29);
    _os_log_impl((void *)&_mh_execute_header, v32, v33, "Failed to find client share identifier for transparency notification. Member %{private,mask.hash}s,\ncircle: %{private,mask.hash}s.", (uint8_t *)v34, 0x2Au);
    v42 = v56;
    swift_arrayDestroy(v56, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v42, -1, -1);
    swift_slowDealloc(v34, -1, -1);
  }
  else
  {
    sub_1000126B0(v28, v29);
    sub_1000126B0(v30, v29);
  }

  return sub_1006B8B10((uint64_t)_swiftEmptyArrayStorage);
}

uint64_t sub_1001D499C()
{
  return 99;
}

uint64_t sub_1001D49A8()
{
  return sub_1001D4054(type metadata accessor for ItemShareCircleUpdateUserNotification);
}

uint64_t sub_1001D49C4()
{
  return sub_1001D41C0(type metadata accessor for ItemShareCircleUpdateUserNotification, 0xD000000000000035, 0x8000000100ECB330);
}

unint64_t sub_1001D49F8()
{
  return sub_1001D4378(type metadata accessor for ItemShareCircleUpdateUserNotification, (void (*)(uint64_t *, char *))sub_1001D4D2C, sub_1001D4D0C);
}

uint64_t sub_1001D4A24()
{
  return sub_1001D4054(type metadata accessor for ItemShareAirTagCircleUpdateUserNotification);
}

uint64_t sub_1001D4A40()
{
  return sub_1001D41C0(type metadata accessor for ItemShareAirTagCircleUpdateUserNotification, 0xD000000000000037, 0x8000000100ECB2A0);
}

unint64_t sub_1001D4A74()
{
  return sub_1001D4378(type metadata accessor for ItemShareAirTagCircleUpdateUserNotification, (void (*)(uint64_t *, char *))sub_1001D4D2C, sub_1001D4C60);
}

uint64_t sub_1001D4AA0()
{
  return sub_1001D4054(type metadata accessor for ItemShareCircleUpdateWithBlockedContactUserNotification);
}

uint64_t sub_1001D4ABC()
{
  return sub_1001D41C0(type metadata accessor for ItemShareCircleUpdateWithBlockedContactUserNotification, 0xD000000000000044, 0x8000000100ECB2E0);
}

unint64_t sub_1001D4AF0()
{
  return sub_1001D4378(type metadata accessor for ItemShareCircleUpdateWithBlockedContactUserNotification, (void (*)(uint64_t *, char *))sub_1001D4D2C, sub_1001D4CEC);
}

uint64_t sub_1001D4B1C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for MemberSharingCircle(0) + 28);
  v4 = type metadata accessor for UUID(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t sub_1001D4B64()
{
  return sub_1001D4054(type metadata accessor for ItemShareAirTagCircleUpdateWithBlockedContactUserNotification);
}

uint64_t sub_1001D4B80()
{
  return sub_1001D41C0(type metadata accessor for ItemShareAirTagCircleUpdateWithBlockedContactUserNotification, 0xD000000000000046, 0x8000000100ECB220);
}

unint64_t sub_1001D4BB4()
{
  return sub_1001D4378(type metadata accessor for ItemShareAirTagCircleUpdateWithBlockedContactUserNotification, (void (*)(uint64_t *, char *))sub_1001D4BE0, sub_1001D4BF8);
}

uint64_t sub_1001D4BE0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1000D708C(a1, a2, *(_QWORD *)(v2 + 16));
}

uint64_t sub_1001D4BF8(uint64_t a1)
{
  return sub_1001D4C80(a1, type metadata accessor for ItemShareAirTagCircleUpdateWithBlockedContactUserNotification) & 1;
}

unint64_t sub_1001D4C18()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1010EDAE0;
  if (!qword_1010EDAE0)
  {
    v1 = type metadata accessor for UUID(255);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for UUID, v1);
    atomic_store(result, (unint64_t *)&qword_1010EDAE0);
  }
  return result;
}

uint64_t sub_1001D4C60(uint64_t a1)
{
  return sub_1001D4C80(a1, type metadata accessor for ItemShareAirTagCircleUpdateUserNotification) & 1;
}

uint64_t sub_1001D4C80(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)(v2 + 16);
  v5 = a1 + *(int *)(sub_10001A9A8(&qword_1010EE170) + 48);
  v6 = a2(0);
  return static UUID.== infix(_:_:)(v5, v4 + *(int *)(v6 + 24)) & 1;
}

uint64_t sub_1001D4CEC(uint64_t a1)
{
  return sub_1001D4C80(a1, type metadata accessor for ItemShareCircleUpdateWithBlockedContactUserNotification) & 1;
}

uint64_t sub_1001D4D0C(uint64_t a1)
{
  return sub_1001D4C80(a1, type metadata accessor for ItemShareCircleUpdateUserNotification) & 1;
}

uint64_t sub_1001D4D2C(uint64_t a1, uint64_t a2)
{
  return sub_1001D4BE0(a1, a2);
}

uint64_t sub_1001D4D40()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_1000234D8(v0, qword_1011B6A18);
  v1 = sub_10001A9E8(v0, (uint64_t)qword_1011B6A18);
  if (qword_1010E99F0 != -1)
    swift_once(&qword_1010E99F0, sub_1001D69A8);
  v2 = sub_10001A9E8(v0, (uint64_t)qword_1011B6A30);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_1001D4DD0(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;

  v2[29] = a1;
  v2[30] = v1;
  v3 = type metadata accessor for Duration.UnitsFormatStyle.Unit(0);
  v2[31] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[32] = v4;
  v2[33] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Logger(0);
  v2[34] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v2[35] = v6;
  v2[36] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for ContinuousClock.Instant(0);
  v2[37] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v2[38] = v8;
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[39] = swift_task_alloc(v9);
  v2[40] = swift_task_alloc(v9);
  v2[41] = swift_task_alloc(v9);
  v10 = type metadata accessor for ContinuousClock(0);
  v2[42] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v2[43] = v11;
  v12 = (*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[44] = swift_task_alloc(v12);
  v2[45] = swift_task_alloc(v12);
  return swift_task_switch(sub_1001D4ED4, v1, 0);
}

uint64_t sub_1001D4ED4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  id v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  if (qword_1010EA1D0 != -1)
    swift_once(&qword_1010EA1D0, sub_100B11444);
  *(_QWORD *)(v0 + 200) = 0x7365547265646E75;
  *(_QWORD *)(v0 + 208) = 0xE900000000000074;
  SynchronousCache.cachedValue<A>(key:computeBlock:)((_QWORD *)(v0 + 392), v0 + 200, sub_10001F628, 0, &type metadata for Bool);
  v1 = swift_bridgeObjectRelease();
  if ((*(_BYTE *)(v0 + 392) & 1) != 0)
  {
    v2 = type metadata accessor for GenericError(0);
    v3 = sub_100006C64((unint64_t *)&qword_1010ECC40, 255, (uint64_t (*)(uint64_t))&type metadata accessor for GenericError, (uint64_t)&protocol conformance descriptor for GenericError);
    swift_allocError(v2, v3, 0, 0);
    *v4 = 0xD00000000000001ELL;
    v4[1] = 0x8000000100ECB3C0;
    v5 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v2 - 8) + 104))(v4, enum case for GenericError.error(_:), v2);
    swift_willThrow(v5);
  }
  else
  {
    ContinuousClock.init()(v1);
    if (qword_1010E99E8 != -1)
      swift_once(&qword_1010E99E8, sub_1001D4D40);
    v6 = sub_10001A9E8(*(_QWORD *)(v0 + 272), (uint64_t)qword_1011B6A18);
    *(_QWORD *)(v0 + 368) = v6;
    v7 = Logger.logObject.getter(v6);
    v8 = static os_log_type_t.default.getter(v7);
    if (os_log_type_enabled(v7, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Retrieving fmipAccount info...", v9, 2u);
      swift_slowDealloc(v9, -1, -1);
    }

    ContinuousClock.now.getter(v10);
    v11 = objc_msgSend((id)objc_opt_self(ACAccountStore), "defaultStore");
    *(_QWORD *)(v0 + 376) = v11;
    if (v11)
    {
      v12 = v11;
      v13 = v0 + 16;
      *(_QWORD *)(v0 + 56) = v0 + 216;
      *(_QWORD *)(v0 + 16) = v0;
      *(_QWORD *)(v0 + 24) = sub_1001D524C;
      v14 = swift_continuation_init(v0 + 16, 1);
      *(_QWORD *)(v0 + 160) = _NSConcreteStackBlock;
      v15 = (_QWORD *)(v0 + 160);
      v15[1] = 0x40000000;
      v15[2] = sub_1001D57E8;
      v15[3] = &unk_10105E1F8;
      v15[4] = v14;
      objc_msgSend(v12, "aa_primaryAppleAccountWithCompletion:", v15);
      return swift_continuation_await(v13);
    }
    v17 = *(_QWORD *)(v0 + 360);
    v18 = *(_QWORD *)(v0 + 336);
    v19 = *(_QWORD *)(v0 + 344);
    v20 = *(_QWORD *)(v0 + 328);
    v21 = *(_QWORD *)(v0 + 296);
    v22 = *(_QWORD *)(v0 + 304);
    v23 = sub_1001D6A28();
    v24 = swift_allocError(&type metadata for AccountService.Error, v23, 0, 0);
    *v25 = 0;
    v25[1] = 0;
    swift_willThrow(v24);
    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v20, v21);
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v17, v18);
  }
  v26 = *(_QWORD *)(v0 + 352);
  v28 = *(_QWORD *)(v0 + 320);
  v27 = *(_QWORD *)(v0 + 328);
  v29 = *(_QWORD *)(v0 + 312);
  v30 = *(_QWORD *)(v0 + 288);
  v31 = *(_QWORD *)(v0 + 264);
  swift_task_dealloc(*(_QWORD *)(v0 + 360));
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001D524C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 48);
  *(_QWORD *)(*v0 + 384) = v2;
  if (v2)
    v3 = sub_1001D5718;
  else
    v3 = sub_1001D52AC;
  return swift_task_switch(v3, *(_QWORD *)(v1 + 240), 0);
}

uint64_t sub_1001D52AC(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  _BOOL4 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  void (*v36)(uint64_t, uint64_t);
  void (*v37)(uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t (*v49)(void);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _OWORD *v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  NSObject *log;
  uint64_t v64;
  uint64_t v65;
  os_log_type_t type;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;

  v2 = *(void **)(v1 + 216);
  if (!v2)
  {

    goto LABEL_5;
  }
  if ((static SystemInfo.underTest.getter(a1) & 1) != 0)
  {

LABEL_5:
    v3 = *(_QWORD *)(v1 + 360);
    v4 = *(_QWORD *)(v1 + 336);
    v5 = *(_QWORD *)(v1 + 344);
    v6 = *(_QWORD *)(v1 + 328);
    v7 = *(_QWORD *)(v1 + 296);
    v8 = *(_QWORD *)(v1 + 304);
    v9 = sub_1001D6A28();
    v10 = swift_allocError(&type metadata for AccountService.Error, v9, 0, 0);
    *v11 = 0;
    v11[1] = 0;
    swift_willThrow(v10);
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v4);
    v43 = *(_QWORD *)(v1 + 352);
    v45 = *(_QWORD *)(v1 + 320);
    v44 = *(_QWORD *)(v1 + 328);
    v46 = *(_QWORD *)(v1 + 312);
    v47 = *(_QWORD *)(v1 + 288);
    v48 = *(_QWORD *)(v1 + 264);
    swift_task_dealloc(*(_QWORD *)(v1 + 360));
    swift_task_dealloc(v43);
    swift_task_dealloc(v44);
    swift_task_dealloc(v45);
    swift_task_dealloc(v46);
    swift_task_dealloc(v47);
    swift_task_dealloc(v48);
    v49 = *(uint64_t (**)(void))(v1 + 8);
    return v49();
  }
  v69 = v2;
  v72 = *(_QWORD *)(v1 + 360);
  v13 = *(_QWORD *)(v1 + 344);
  v12 = *(_QWORD *)(v1 + 352);
  v15 = *(_QWORD *)(v1 + 328);
  v14 = *(_QWORD *)(v1 + 336);
  v16 = *(_QWORD *)(v1 + 320);
  v18 = *(_QWORD *)(v1 + 296);
  v17 = *(_QWORD *)(v1 + 304);
  (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v1 + 280) + 16))(*(_QWORD *)(v1 + 288), *(_QWORD *)(v1 + 368), *(_QWORD *)(v1 + 272));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16))(v16, v15, v18);
  v19 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 16))(v12, v72, v14);
  v20 = Logger.logObject.getter(v19);
  v21 = static os_log_type_t.default.getter(v20);
  v22 = os_log_type_enabled(v20, v21);
  v24 = *(_QWORD *)(v1 + 344);
  v23 = *(_QWORD *)(v1 + 352);
  v25 = *(_QWORD *)(v1 + 320);
  if (v22)
  {
    v65 = *(_QWORD *)(v1 + 344);
    v26 = *(_QWORD *)(v1 + 312);
    v61 = *(_QWORD *)(v1 + 304);
    v27 = *(_QWORD *)(v1 + 296);
    v73 = *(_QWORD *)(v1 + 288);
    v28 = *(_QWORD *)(v1 + 264);
    v67 = *(_QWORD *)(v1 + 280);
    v68 = *(_QWORD *)(v1 + 272);
    v29 = *(_QWORD *)(v1 + 256);
    v60 = *(_QWORD *)(v1 + 248);
    type = v21;
    v62 = *(_QWORD *)(v1 + 336);
    log = v20;
    v30 = (uint8_t *)swift_slowAlloc(12, -1);
    v64 = swift_slowAlloc(32, -1);
    v75 = v64;
    *(_DWORD *)v30 = 136315138;
    v31 = ContinuousClock.now.getter(v64);
    static Duration.UnitsFormatStyle.Unit.milliseconds.getter(v31);
    v32 = sub_100006C64(&qword_101116030, 255, (uint64_t (*)(uint64_t))&type metadata accessor for ContinuousClock.Instant, (uint64_t)&protocol conformance descriptor for ContinuousClock.Instant);
    v33 = static Duration.description<A>(_:_:units:)(v25, v26, v28, v27, v32);
    v59 = v23;
    v35 = v34;
    (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v28, v60);
    v36 = *(void (**)(uint64_t, uint64_t))(v61 + 8);
    v36(v26, v27);
    *(_QWORD *)(v1 + 224) = sub_100016940(v33, v35, &v75);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 224, v1 + 232, v30 + 4, v30 + 12);
    swift_bridgeObjectRelease();
    v36(v25, v27);
    v37 = *(void (**)(uint64_t, uint64_t))(v65 + 8);
    v37(v59, v62);
    _os_log_impl((void *)&_mh_execute_header, log, type, "aa_primaryAppleAccount fetch duration: %s", v30, 0xCu);
    swift_arrayDestroy(v64, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v64, -1, -1);
    swift_slowDealloc(v30, -1, -1);

    (*(void (**)(uint64_t, uint64_t))(v67 + 8))(v73, v68);
  }
  else
  {
    v38 = *(_QWORD *)(v1 + 336);
    v40 = *(_QWORD *)(v1 + 280);
    v39 = *(_QWORD *)(v1 + 288);
    v41 = *(_QWORD *)(v1 + 272);
    v36 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 + 304) + 8);
    v36(*(_QWORD *)(v1 + 320), *(_QWORD *)(v1 + 296));
    v37 = *(void (**)(uint64_t, uint64_t))(v24 + 8);
    v37(v23, v38);

    (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v39, v41);
  }
  sub_1001D6A6C(v69, *(void **)(v1 + 376), (uint64_t *)(v1 + 80));
  v42 = *(_QWORD *)(v1 + 360);
  v51 = *(_QWORD *)(v1 + 352);
  v53 = *(_QWORD *)(v1 + 328);
  v52 = *(_QWORD *)(v1 + 336);
  v54 = *(_QWORD *)(v1 + 320);
  v70 = *(_QWORD *)(v1 + 312);
  v71 = *(_QWORD *)(v1 + 288);
  v74 = *(_QWORD *)(v1 + 264);
  v55 = *(_OWORD **)(v1 + 232);
  v36(v53, *(_QWORD *)(v1 + 296));
  v37(v42, v52);
  *v55 = *(_OWORD *)(v1 + 80);
  v56 = *(_OWORD *)(v1 + 96);
  v57 = *(_OWORD *)(v1 + 112);
  v58 = *(_OWORD *)(v1 + 144);
  v55[3] = *(_OWORD *)(v1 + 128);
  v55[4] = v58;
  v55[1] = v56;
  v55[2] = v57;
  swift_task_dealloc(v42);
  swift_task_dealloc(v51);
  swift_task_dealloc(v53);
  swift_task_dealloc(v54);
  swift_task_dealloc(v70);
  swift_task_dealloc(v71);
  swift_task_dealloc(v74);
  v49 = *(uint64_t (**)(void))(v1 + 8);
  return v49();
}

uint64_t sub_1001D5718(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *(void **)(v1 + 376);
  v3 = *(_QWORD *)(v1 + 360);
  v4 = *(_QWORD *)(v1 + 336);
  v5 = *(_QWORD *)(v1 + 344);
  v6 = *(_QWORD *)(v1 + 328);
  v7 = *(_QWORD *)(v1 + 296);
  v8 = *(_QWORD *)(v1 + 304);
  swift_willThrow(a1);

  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v4);
  v9 = *(_QWORD *)(v1 + 352);
  v11 = *(_QWORD *)(v1 + 320);
  v10 = *(_QWORD *)(v1 + 328);
  v12 = *(_QWORD *)(v1 + 312);
  v13 = *(_QWORD *)(v1 + 288);
  v14 = *(_QWORD *)(v1 + 264);
  swift_task_dealloc(*(_QWORD *)(v1 + 360));
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_1001D57E8(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  id v8;
  uint64_t v10;
  id v11;
  void *v12;

  v3 = *(_QWORD *)(a1 + 32);
  if (a3)
  {
    v5 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
    v6 = swift_allocError(v5, &protocol self-conformance witness table for Error, 0, 0);
    *v7 = a3;
    v8 = a3;
    return swift_continuation_throwingResumeWithError(v3, v6);
  }
  else
  {
    v12 = a2;
    v10 = *(_QWORD *)(*(_QWORD *)(v3 + 64) + 40);
    v11 = a2;
    sub_100005CF0((uint64_t)&v12, v10, &qword_1010F2538);
    return swift_continuation_throwingResume(v3);
  }
}

uint64_t sub_1001D5890(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;

  v2[19] = a1;
  v2[20] = v1;
  v3 = type metadata accessor for Duration.UnitsFormatStyle.Unit(0);
  v2[21] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[22] = v4;
  v2[23] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Logger(0);
  v2[24] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v2[25] = v6;
  v2[26] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for ContinuousClock.Instant(0);
  v2[27] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v2[28] = v8;
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[29] = swift_task_alloc(v9);
  v2[30] = swift_task_alloc(v9);
  v2[31] = swift_task_alloc(v9);
  v10 = type metadata accessor for ContinuousClock(0);
  v2[32] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v2[33] = v11;
  v12 = (*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[34] = swift_task_alloc(v12);
  v2[35] = swift_task_alloc(v12);
  return swift_task_switch(sub_1001D5994, v1, 0);
}

uint64_t sub_1001D5994()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  id v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  if (qword_1010EA1D0 != -1)
    swift_once(&qword_1010EA1D0, sub_100B11444);
  *(_QWORD *)(v0 + 120) = 0x7365547265646E75;
  *(_QWORD *)(v0 + 128) = 0xE900000000000074;
  SynchronousCache.cachedValue<A>(key:computeBlock:)((_QWORD *)(v0 + 312), v0 + 120, sub_10001F628, 0, &type metadata for Bool);
  v1 = swift_bridgeObjectRelease();
  if ((*(_BYTE *)(v0 + 312) & 1) != 0)
  {
    v2 = type metadata accessor for GenericError(0);
    v3 = sub_100006C64((unint64_t *)&qword_1010ECC40, 255, (uint64_t (*)(uint64_t))&type metadata accessor for GenericError, (uint64_t)&protocol conformance descriptor for GenericError);
    swift_allocError(v2, v3, 0, 0);
    *v4 = 0xD00000000000001ELL;
    v4[1] = 0x8000000100ECB3C0;
    v5 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v2 - 8) + 104))(v4, enum case for GenericError.error(_:), v2);
    swift_willThrow(v5);
  }
  else
  {
    ContinuousClock.init()(v1);
    if (qword_1010E99E8 != -1)
      swift_once(&qword_1010E99E8, sub_1001D4D40);
    v6 = sub_10001A9E8(*(_QWORD *)(v0 + 192), (uint64_t)qword_1011B6A18);
    *(_QWORD *)(v0 + 288) = v6;
    v7 = Logger.logObject.getter(v6);
    v8 = static os_log_type_t.default.getter(v7);
    if (os_log_type_enabled(v7, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Retrieving searchpartyAccount info...", v9, 2u);
      swift_slowDealloc(v9, -1, -1);
    }

    ContinuousClock.now.getter(v10);
    v11 = objc_msgSend((id)objc_opt_self(ACAccountStore), "defaultStore");
    *(_QWORD *)(v0 + 296) = v11;
    if (v11)
    {
      v12 = v11;
      v13 = v0 + 16;
      *(_QWORD *)(v0 + 56) = v0 + 136;
      *(_QWORD *)(v0 + 16) = v0;
      *(_QWORD *)(v0 + 24) = sub_1001D5D0C;
      v14 = swift_continuation_init(v0 + 16, 1);
      *(_QWORD *)(v0 + 80) = _NSConcreteStackBlock;
      v15 = (_QWORD *)(v0 + 80);
      v15[1] = 0x40000000;
      v15[2] = sub_1001D57E8;
      v15[3] = &unk_10105E1E0;
      v15[4] = v14;
      objc_msgSend(v12, "aa_primaryAppleAccountWithCompletion:", v15);
      return swift_continuation_await(v13);
    }
    v17 = *(_QWORD *)(v0 + 280);
    v18 = *(_QWORD *)(v0 + 256);
    v19 = *(_QWORD *)(v0 + 264);
    v20 = *(_QWORD *)(v0 + 248);
    v21 = *(_QWORD *)(v0 + 216);
    v22 = *(_QWORD *)(v0 + 224);
    v23 = sub_1001D6A28();
    v24 = swift_allocError(&type metadata for AccountService.Error, v23, 0, 0);
    *v25 = 0;
    v25[1] = 0;
    swift_willThrow(v24);
    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v20, v21);
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v17, v18);
  }
  v26 = *(_QWORD *)(v0 + 272);
  v28 = *(_QWORD *)(v0 + 240);
  v27 = *(_QWORD *)(v0 + 248);
  v29 = *(_QWORD *)(v0 + 232);
  v30 = *(_QWORD *)(v0 + 208);
  v31 = *(_QWORD *)(v0 + 184);
  swift_task_dealloc(*(_QWORD *)(v0 + 280));
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001D5D0C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 48);
  *(_QWORD *)(*v0 + 304) = v2;
  if (v2)
    v3 = sub_1001D61BC;
  else
    v3 = sub_1001D5D6C;
  return swift_task_switch(v3, *(_QWORD *)(v1 + 160), 0);
}

uint64_t sub_1001D5D6C(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  _BOOL4 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  unint64_t v34;
  unint64_t v35;
  void (*v36)(uint64_t, uint64_t);
  void (*v37)(uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t (*v49)(void);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  os_log_type_t type;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;

  v2 = *(void **)(v1 + 136);
  if (!v2)
  {

    goto LABEL_5;
  }
  if ((static SystemInfo.underTest.getter(a1) & 1) != 0)
  {

LABEL_5:
    v3 = *(_QWORD *)(v1 + 280);
    v4 = *(_QWORD *)(v1 + 256);
    v5 = *(_QWORD *)(v1 + 264);
    v6 = *(_QWORD *)(v1 + 248);
    v7 = *(_QWORD *)(v1 + 216);
    v8 = *(_QWORD *)(v1 + 224);
    v9 = sub_1001D6A28();
    v10 = swift_allocError(&type metadata for AccountService.Error, v9, 0, 0);
    *v11 = 0;
    v11[1] = 0;
    swift_willThrow(v10);
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v4);
    v43 = *(_QWORD *)(v1 + 272);
    v45 = *(_QWORD *)(v1 + 240);
    v44 = *(_QWORD *)(v1 + 248);
    v46 = *(_QWORD *)(v1 + 232);
    v47 = *(_QWORD *)(v1 + 208);
    v48 = *(_QWORD *)(v1 + 184);
    swift_task_dealloc(*(_QWORD *)(v1 + 280));
    swift_task_dealloc(v43);
    swift_task_dealloc(v44);
    swift_task_dealloc(v45);
    swift_task_dealloc(v46);
    swift_task_dealloc(v47);
    swift_task_dealloc(v48);
    v49 = *(uint64_t (**)(void))(v1 + 8);
    return v49();
  }
  v66 = v2;
  v67 = *(_QWORD *)(v1 + 280);
  v12 = *(_QWORD *)(v1 + 264);
  v13 = *(_QWORD *)(v1 + 272);
  v15 = *(_QWORD *)(v1 + 248);
  v14 = *(_QWORD *)(v1 + 256);
  v16 = *(_QWORD *)(v1 + 240);
  v18 = *(_QWORD *)(v1 + 216);
  v17 = *(_QWORD *)(v1 + 224);
  (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v1 + 200) + 16))(*(_QWORD *)(v1 + 208), *(_QWORD *)(v1 + 288), *(_QWORD *)(v1 + 192));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16))(v16, v15, v18);
  v19 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(v13, v67, v14);
  v20 = Logger.logObject.getter(v19);
  v21 = static os_log_type_t.default.getter(v20);
  v22 = os_log_type_enabled(v20, v21);
  v24 = *(_QWORD *)(v1 + 264);
  v23 = *(_QWORD *)(v1 + 272);
  v25 = *(_QWORD *)(v1 + 240);
  if (v22)
  {
    v60 = *(_QWORD *)(v1 + 272);
    v26 = *(_QWORD *)(v1 + 232);
    v59 = *(_QWORD *)(v1 + 224);
    v27 = *(_QWORD *)(v1 + 216);
    v68 = *(_QWORD *)(v1 + 208);
    v28 = *(_QWORD *)(v1 + 184);
    v64 = *(_QWORD *)(v1 + 200);
    v65 = *(_QWORD *)(v1 + 192);
    v57 = *(_QWORD *)(v1 + 176);
    v58 = *(_QWORD *)(v1 + 168);
    type = v21;
    v61 = *(_QWORD *)(v1 + 256);
    v29 = (uint8_t *)swift_slowAlloc(12, -1);
    v62 = swift_slowAlloc(32, -1);
    v70 = v62;
    *(_DWORD *)v29 = 136315138;
    v30 = ContinuousClock.now.getter(v62);
    static Duration.UnitsFormatStyle.Unit.milliseconds.getter(v30);
    v31 = sub_100006C64(&qword_101116030, 255, (uint64_t (*)(uint64_t))&type metadata accessor for ContinuousClock.Instant, (uint64_t)&protocol conformance descriptor for ContinuousClock.Instant);
    v32 = static Duration.description<A>(_:_:units:)(v25, v26, v28, v27, v31);
    v33 = v20;
    v35 = v34;
    (*(void (**)(uint64_t, uint64_t))(v57 + 8))(v28, v58);
    v36 = *(void (**)(uint64_t, uint64_t))(v59 + 8);
    v36(v26, v27);
    *(_QWORD *)(v1 + 144) = sub_100016940(v32, v35, &v70);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 144, v1 + 152, v29 + 4, v29 + 12);
    swift_bridgeObjectRelease();
    v36(v25, v27);
    v37 = *(void (**)(uint64_t, uint64_t))(v24 + 8);
    v37(v60, v61);
    _os_log_impl((void *)&_mh_execute_header, v33, type, "aa_primaryAppleAccount fetch duration: %s", v29, 0xCu);
    swift_arrayDestroy(v62, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v62, -1, -1);
    swift_slowDealloc(v29, -1, -1);

    (*(void (**)(uint64_t, uint64_t))(v64 + 8))(v68, v65);
  }
  else
  {
    v38 = *(_QWORD *)(v1 + 256);
    v39 = *(_QWORD *)(v1 + 200);
    v40 = *(_QWORD *)(v1 + 208);
    v41 = *(_QWORD *)(v1 + 192);
    v36 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 + 224) + 8);
    v36(*(_QWORD *)(v1 + 240), *(_QWORD *)(v1 + 216));
    v37 = *(void (**)(uint64_t, uint64_t))(v24 + 8);
    v37(v23, v38);

    (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v40, v41);
  }
  sub_1001D628C(*(id *)(v1 + 296), v66, *(uint64_t **)(v1 + 152));
  v42 = *(_QWORD *)(v1 + 280);
  v51 = *(_QWORD *)(v1 + 272);
  v53 = *(_QWORD *)(v1 + 248);
  v52 = *(_QWORD *)(v1 + 256);
  v54 = *(_QWORD *)(v1 + 232);
  v55 = *(_QWORD *)(v1 + 240);
  v56 = *(_QWORD *)(v1 + 208);
  v69 = *(_QWORD *)(v1 + 184);
  v36(v53, *(_QWORD *)(v1 + 216));
  v37(v42, v52);
  swift_task_dealloc(v42);
  swift_task_dealloc(v51);
  swift_task_dealloc(v53);
  swift_task_dealloc(v55);
  swift_task_dealloc(v54);
  swift_task_dealloc(v56);
  swift_task_dealloc(v69);
  v49 = *(uint64_t (**)(void))(v1 + 8);
  return v49();
}

uint64_t sub_1001D61BC(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *(void **)(v1 + 296);
  v3 = *(_QWORD *)(v1 + 280);
  v4 = *(_QWORD *)(v1 + 256);
  v5 = *(_QWORD *)(v1 + 264);
  v6 = *(_QWORD *)(v1 + 248);
  v7 = *(_QWORD *)(v1 + 216);
  v8 = *(_QWORD *)(v1 + 224);
  swift_willThrow(a1);

  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v4);
  v9 = *(_QWORD *)(v1 + 272);
  v11 = *(_QWORD *)(v1 + 240);
  v10 = *(_QWORD *)(v1 + 248);
  v12 = *(_QWORD *)(v1 + 232);
  v13 = *(_QWORD *)(v1 + 208);
  v14 = *(_QWORD *)(v1 + 184);
  swift_task_dealloc(*(_QWORD *)(v1 + 280));
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

void sub_1001D628C(id a1@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  id v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  void *v23;
  uint64_t v24;
  id v25;
  unint64_t v26;
  uint64_t v27;
  __int128 *v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  unint64_t v39;
  _QWORD *v40;
  void (*v41)(char *, char *, uint64_t);
  id v42;
  void *v43;
  id v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  _OWORD *v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  id v57;
  uint64_t v58;
  uint64_t v59;
  _OWORD v60[2];
  __int128 v61;
  __int128 v62;
  uint64_t v63;

  v6 = sub_10001A9A8(&qword_1010FBA40);
  __chkstk_darwin(v6);
  v8 = (char *)&v54 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for URL(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v54 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = objc_msgSend(a2, "aa_personID");
  if (!v13)
    goto LABEL_7;
  v14 = v13;
  v59 = v10;
  v15 = v9;
  v58 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
  v17 = v16;

  v18 = objc_msgSend(a2, "username");
  if (!v18)
  {
    swift_bridgeObjectRelease();
LABEL_7:
    v26 = sub_1001D6A28();
    v27 = swift_allocError(&type metadata for AccountService.Error, v26, 0, 0);
    v29 = xmmword_100E2C1E0;
LABEL_19:
    *v28 = v29;
LABEL_20:
    swift_willThrow(v27);

    return;
  }
  v19 = v18;
  v63 = v17;
  v56 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
  v21 = v20;

  v22 = objc_msgSend(a2, "dataclassProperties");
  if (!v22)
  {
    v61 = 0u;
    v62 = 0u;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_16:
    sub_100004048((uint64_t)&v61, (uint64_t *)&unk_1010F6390);
LABEL_18:
    v34 = sub_1001D6A28();
    v27 = swift_allocError(&type metadata for AccountService.Error, v34, 0, 0);
    v29 = xmmword_100E2C1D0;
    goto LABEL_19;
  }
  v23 = v22;
  v55 = a3;
  v57 = a1;
  *(_QWORD *)&v60[0] = 0xD00000000000001FLL;
  *((_QWORD *)&v60[0] + 1) = 0x8000000100ECB3E0;
  v24 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(v60, &type metadata for String);
  v25 = objc_msgSend(v23, "__swift_objectForKeyedSubscript:", v24);

  swift_unknownObjectRelease(v24);
  if (v25)
  {
    _bridgeAnyObjectToAny(_:)(v60, v25);
    swift_unknownObjectRelease(v25);
  }
  else
  {
    memset(v60, 0, sizeof(v60));
  }
  sub_100005CF0((uint64_t)v60, (uint64_t)&v61, (uint64_t *)&unk_1010F6390);
  if (!*((_QWORD *)&v62 + 1))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    a1 = v57;
    goto LABEL_16;
  }
  v30 = sub_10001A9A8((uint64_t *)&unk_1010FBF20);
  if ((swift_dynamicCast(v60, &v61, (char *)&type metadata for Any + 8, v30, 6) & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    a1 = v57;
    goto LABEL_18;
  }
  v31 = *(_QWORD *)&v60[0];
  if (*(_QWORD *)(*(_QWORD *)&v60[0] + 16)
    && (v32 = sub_100518DA0(0xD000000000000017, 0x8000000100ECB400), (v33 & 1) != 0))
  {
    sub_100016A30(*(_QWORD *)(v31 + 56) + 32 * v32, (uint64_t)&v61);
  }
  else
  {
    v61 = 0u;
    v62 = 0u;
  }
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v62 + 1))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_100004048((uint64_t)&v61, (uint64_t *)&unk_1010F6390);
LABEL_28:
    a1 = v57;
    v39 = sub_1001D6A28();
    v27 = swift_allocError(&type metadata for AccountService.Error, v39, 0, 0);
    *v40 = 0xD000000000000017;
    v40[1] = 0x8000000100ECB400;
    goto LABEL_20;
  }
  if ((swift_dynamicCast(v60, &v61, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_28;
  }
  URL.init(string:)(*(_QWORD *)&v60[0], *((_QWORD *)&v60[0] + 1));
  swift_bridgeObjectRelease();
  v35 = v59;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v59 + 48))(v8, 1, v15) == 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_100004048((uint64_t)v8, &qword_1010FBA40);
    v36 = sub_1001D6A28();
    v37 = swift_allocError(&type metadata for AccountService.Error, v36, 0, 0);
    *v38 = 0xD000000000000017;
    v38[1] = 0x8000000100ECB400;
    swift_willThrow(v37);

    return;
  }
  v41 = *(void (**)(char *, char *, uint64_t))(v35 + 32);
  v41(v12, v8, v15);
  v42 = objc_msgSend(v57, "credentialForAccount:", a2);
  if (v42)
  {
    v43 = v42;
    v44 = objc_msgSend(v42, "credentialItemForKey:", ACSearchPartyTokenKey);
    if (v44)
    {
      v45 = v44;
      v59 = static String._unconditionallyBridgeFromObjectiveC(_:)(v44);
      v47 = v46;

      v48 = v55;
      *v55 = v56;
      v48[1] = v21;
      v49 = v63;
      v48[2] = v58;
      v48[3] = v49;
      v48[4] = v59;
      v48[5] = v47;
      v50 = type metadata accessor for SearchpartyAccount(0);
      v41((char *)v48 + *(int *)(v50 + 28), v12, v15);
      return;
    }

  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v51 = sub_1001D6A28();
  v52 = swift_allocError(&type metadata for AccountService.Error, v51, 0, 0);
  *v53 = xmmword_100E2C1C0;
  swift_willThrow(v52);

  (*(void (**)(char *, uint64_t))(v59 + 8))(v12, v15);
}

uint64_t type metadata accessor for AccountService()
{
  return objc_opt_self(_TtC12searchpartyd14AccountService);
}

uint64_t sub_1001D6854(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = sub_100006C64(&qword_1010F2528, a2, (uint64_t (*)(uint64_t))type metadata accessor for AccountService, (uint64_t)&unk_100E2C240);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1001D6890(uint64_t a1, void *a2)
{
  unint64_t result;
  Swift::String v4;
  Swift::String v5;

  result = 0xD000000000000016;
  switch((unint64_t)a2)
  {
    case 0uLL:
      return result;
    case 1uLL:
    case 3uLL:
    case 4uLL:
      result = 0xD000000000000013;
      break;
    case 2uLL:
      result = 0xD00000000000001BLL;
      break;
    default:
      _StringGuts.grow(_:)(29);
      swift_bridgeObjectRelease(0xE000000000000000);
      v4._countAndFlagsBits = 0xD000000000000016;
      v4._object = a2;
      String.append(_:)(v4);
      v5._countAndFlagsBits = 41;
      v5._object = (void *)0xE100000000000000;
      String.append(_:)(v5);
      result = 0xD00000000000001ALL;
      break;
  }
  return result;
}

unint64_t sub_1001D69A0()
{
  uint64_t v0;

  return sub_1001D6890(*(_QWORD *)v0, *(void **)(v0 + 8));
}

uint64_t sub_1001D69A8()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_1000234D8(v0, qword_1011B6A30);
  sub_10001A9E8(v0, (uint64_t)qword_1011B6A30);
  return Logger.init(subsystem:category:)(0xD00000000000001DLL, 0x8000000100EC5D30, 0x53746E756F636341, 0xEE00656369767265);
}

unint64_t sub_1001D6A28()
{
  unint64_t result;

  result = qword_1010F2530;
  if (!qword_1010F2530)
  {
    result = swift_getWitnessTable(") #", &type metadata for AccountService.Error);
    atomic_store(result, (unint64_t *)&qword_1010F2530);
  }
  return result;
}

void sub_1001D6A6C(id a1@<X1>, void *a2@<X0>, uint64_t *a3@<X8>)
{
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  void *v17;
  uint64_t v18;
  id v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  void *v32;
  id v33;
  id v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  _OWORD v52[2];
  __int128 v53;
  __int128 v54;
  uint64_t v55;

  v6 = objc_msgSend(a1, "aa_personID");
  if (!v6)
    goto LABEL_7;
  v7 = v6;
  v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
  v10 = v9;

  v11 = objc_msgSend(a1, "username");
  if (!v11)
  {
    swift_bridgeObjectRelease();
LABEL_7:
    v20 = sub_1001D6A28();
    v21 = swift_allocError(&type metadata for AccountService.Error, v20, 0, 0);
    v23 = 1;
LABEL_18:
    *v22 = 0;
    v22[1] = v23;
    swift_willThrow(v21);

    return;
  }
  v12 = v11;
  v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
  v15 = v14;

  v16 = objc_msgSend(a1, "dataclassProperties");
  if (!v16)
  {
    v53 = 0u;
    v54 = 0u;
LABEL_15:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_100004048((uint64_t)&v53, (uint64_t *)&unk_1010F6390);
LABEL_17:
    v28 = sub_1001D6A28();
    v21 = swift_allocError(&type metadata for AccountService.Error, v28, 0, 0);
    v23 = 2;
    goto LABEL_18;
  }
  v17 = v16;
  v51 = v13;
  v55 = v8;
  *(_QWORD *)&v52[0] = 0xD000000000000021;
  *((_QWORD *)&v52[0] + 1) = 0x8000000100ECB420;
  v18 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(v52, &type metadata for String);
  v19 = objc_msgSend(v17, "__swift_objectForKeyedSubscript:", v18);

  swift_unknownObjectRelease(v18);
  if (v19)
  {
    _bridgeAnyObjectToAny(_:)(v52, v19);
    swift_unknownObjectRelease(v19);
  }
  else
  {
    memset(v52, 0, sizeof(v52));
  }
  sub_100005CF0((uint64_t)v52, (uint64_t)&v53, (uint64_t *)&unk_1010F6390);
  if (!*((_QWORD *)&v54 + 1))
    goto LABEL_15;
  v24 = sub_10001A9A8((uint64_t *)&unk_1010FBF20);
  if ((swift_dynamicCast(v52, &v53, (char *)&type metadata for Any + 8, v24, 6) & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_17;
  }
  v25 = *(_QWORD *)&v52[0];
  if (*(_QWORD *)(*(_QWORD *)&v52[0] + 16)
    && (v26 = sub_100518DA0(0x6E74736F48707061, 0xEB00000000656D61), (v27 & 1) != 0))
  {
    sub_100016A30(*(_QWORD *)(v25 + 56) + 32 * v26, (uint64_t)&v53);
  }
  else
  {
    v53 = 0u;
    v54 = 0u;
  }
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v54 + 1))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_100004048((uint64_t)&v53, (uint64_t *)&unk_1010F6390);
LABEL_29:
    v43 = sub_1001D6A28();
    v21 = swift_allocError(&type metadata for AccountService.Error, v43, 0, 0);
    v23 = 3;
    goto LABEL_18;
  }
  if ((swift_dynamicCast(v52, &v53, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_29;
  }
  v30 = *((_QWORD *)&v52[0] + 1);
  v29 = *(_QWORD *)&v52[0];
  v31 = objc_msgSend(a1, "aa_fmipAccount");
  if (!v31)
  {
LABEL_32:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v44 = sub_1001D6A28();
    v21 = swift_allocError(&type metadata for AccountService.Error, v44, 0, 0);
    v23 = 4;
    goto LABEL_18;
  }
  v32 = v31;
  v33 = objc_msgSend(a2, "credentialForAccount:", v31);
  if (!v33)
  {
LABEL_31:

    goto LABEL_32;
  }
  v50 = v30;
  v49 = v33;
  v34 = objc_msgSend(v33, "credentialItemForKey:", ACFindMyiPhoneAppTokenKey);
  if (!v34)
  {

    v32 = v49;
    goto LABEL_31;
  }
  v35 = v34;
  v36 = static String._unconditionallyBridgeFromObjectiveC(_:)(v34);
  v47 = v37;
  v48 = v36;

  v38 = objc_msgSend(a1, "aa_authToken");
  if (v38)
  {
    v46 = v29;
    v39 = v38;
    v40 = static String._unconditionallyBridgeFromObjectiveC(_:)(v38);
    v45 = v41;

    v42 = v45;
    v29 = v46;
  }
  else
  {

    v40 = 0;
    v42 = 0;
  }
  *a3 = v51;
  a3[1] = v15;
  a3[2] = v55;
  a3[3] = v10;
  a3[4] = v40;
  a3[5] = v42;
  a3[6] = v48;
  a3[7] = v47;
  a3[8] = v29;
  a3[9] = v50;
}

unint64_t destroy for AccountService.Error(uint64_t a1)
{
  unint64_t result;

  result = *(_QWORD *)(a1 + 8);
  if (result >= 0xFFFFFFFF)
    return swift_bridgeObjectRelease(result);
  return result;
}

uint64_t _s12searchpartyd14AccountServiceC5ErrorOwCP_0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 < 0xFFFFFFFF)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v3;
    swift_bridgeObjectRetain(v3);
  }
  return a1;
}

_QWORD *assignWithCopy for AccountService.Error(_QWORD *a1, _QWORD *a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = a1[1];
  v5 = a2[1];
  if (v4 < 0xFFFFFFFF)
  {
    if (v5 >= 0xFFFFFFFF)
    {
      *a1 = *a2;
      v7 = a2[1];
      a1[1] = v7;
      swift_bridgeObjectRetain(v7);
      return a1;
    }
LABEL_7:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  if (v5 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease(a1[1]);
    goto LABEL_7;
  }
  *a1 = *a2;
  v6 = a2[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t assignWithTake for AccountService.Error(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4 < 0xFFFFFFFF)
    goto LABEL_5;
  v5 = *(_QWORD *)(a2 + 8);
  if (v5 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease(v4);
LABEL_5:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v5;
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for AccountService.Error(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unsigned int v4;
  unsigned int v5;

  if (!a2)
    return 0;
  if (a2 > 0x7FFFFFFA && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 2147483643);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 + 1;
  v5 = v3 - 4;
  if (v4 >= 6)
    return v5;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for AccountService.Error(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 >= 0x7FFFFFFB)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 2147483643;
    if (a3 >= 0x7FFFFFFB)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFB)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2 + 4;
  }
  return result;
}

uint64_t sub_1001D7100(uint64_t a1)
{
  unint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

_QWORD *sub_1001D7118(_QWORD *result, int a2)
{
  if (a2 < 0)
  {
    *result = a2 ^ 0x80000000;
    result[1] = 0;
  }
  else if (a2)
  {
    result[1] = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for AccountService.Error()
{
  return &type metadata for AccountService.Error;
}

BOOL sub_1001D7148()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;

  v1 = type metadata accessor for Endianness(0);
  __chkstk_darwin(v1);
  v3 = (char *)&v20 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_10001A9A8(&qword_101115E60);
  __chkstk_darwin(v4);
  v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for WildModeAssociationRecord(0);
  sub_10000F9B8(v0 + *(int *)(v7 + 56), (uint64_t)v6, &qword_101115E60);
  v8 = type metadata accessor for AccessoryMetadata(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v6, 1, v8) == 1)
  {
    sub_100004048((uint64_t)v6, &qword_101115E60);
    return 0;
  }
  else
  {
    v10 = (uint64_t *)&v6[*(int *)(v8 + 20)];
    v11 = *v10;
    v12 = v10[1];
    sub_10001BBBC(*v10, v12);
    sub_1000126B0((uint64_t)v6, type metadata accessor for AccessoryMetadata);
    sub_1001EDA78(v11, v12);
    v14 = v13;
    v15 = sub_1001EDBAC(v11, v12);
    v17 = v16;
    static Endianness.current.getter();
    sub_10007D5A4();
    FixedWidthInteger.init(data:ofEndianness:)(&v21, v15, v17, v3);
    if (BYTE4(v21))
      v18 = 0;
    else
      v18 = (int)v21;
    v9 = sub_100A2D38C(v14, v18);
    sub_10001BC14(v11, v12);
  }
  return v9;
}

unint64_t sub_1001D72F0@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = _s12searchpartyd20MessagingDestinationV0C4TypeO8rawValueAESgSi_tcfC_0(*a1);
  *a2 = result;
  return result;
}

void sub_1001D7318(_QWORD *a1@<X8>)
{
  unsigned __int8 *v1;

  *a1 = *v1;
}

uint64_t sub_1001D7324(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1001E4380();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1001D7380(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1001E4380();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

void sub_1001D73CC(char *a1)
{
  sub_10051218C(*a1);
}

void sub_1001D73D8()
{
  char *v0;

  sub_100516750(0, *v0);
}

void sub_1001D73E4(uint64_t a1)
{
  char *v1;

  sub_1005156E8(a1, *v1);
}

void sub_1001D73EC(uint64_t a1)
{
  char *v1;

  sub_100516750(a1, *v1);
}

unint64_t sub_1001D73F4@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_1001E4260(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1001D7420()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_1001D7450 + 4 * byte_100E2C2E0[*v0]))();
}

void sub_1001D7450(_QWORD *a1@<X8>)
{
  *a1 = 0x646567617473;
  a1[1] = 0xE600000000000000;
}

void sub_1001D7468(_QWORD *a1@<X8>)
{
  *a1 = 0x796669746F6ELL;
  a1[1] = 0xE600000000000000;
}

void sub_1001D7480(_QWORD *a1@<X8>)
{
  *a1 = 0x657461647075;
  a1[1] = 0xE600000000000000;
}

void sub_1001D7498(_QWORD *a1@<X8>)
{
  *a1 = 0x6465676174736E75;
  a1[1] = 0xE800000000000000;
}

void sub_1001D74B4(_QWORD *a1@<X8>)
{
  *a1 = 0x7761726468746977;
  a1[1] = 0xE800000000000000;
}

void sub_1001D74D0(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = 0x6465726F6E6769;
  a1[1] = v1;
}

void sub_1001D74E8(_QWORD *a1@<X8>)
{
  *a1 = 0x7265766F63736964;
  a1[1] = 0xEA00000000006465;
}

uint64_t sub_1001D7508(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1001E43C4();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1001D7564(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1001E43C4();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_1001D75B0(_QWORD *a1)
{
  double *v1;
  uint64_t v2;
  double *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  double v12;
  double v13;
  double v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  char v20;
  char v21;
  char v22;
  char v23;

  v3 = v1;
  v5 = sub_10001A9A8(&qword_1010F27F8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  v11 = sub_1001E433C();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for WildModeTrackingLocation.CodingKeys, &type metadata for WildModeTrackingLocation.CodingKeys, v11, v9, v10);
  v12 = *v3;
  v23 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(&v23, v5, v12);
  if (!v2)
  {
    v13 = v3[1];
    v22 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(&v22, v5, v13);
    v14 = v3[2];
    v21 = 2;
    KeyedEncodingContainer.encode(_:forKey:)(&v21, v5, v14);
    v15 = (char *)v3 + *(int *)(type metadata accessor for WildModeTrackingLocation(0) + 28);
    v20 = 3;
    v16 = type metadata accessor for Date(0);
    v17 = sub_100006204((unint64_t *)&unk_1010ED6F0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v15, &v20, v5, v16, v17);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

Swift::Int sub_1001D7754()
{
  Swift::UInt64 *v0;
  Swift::UInt64 v1;
  Swift::UInt64 v2;
  Swift::UInt64 v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[9];

  Hasher.init(_seed:)(v7);
  if ((*v0 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v1 = *v0;
  else
    v1 = 0;
  Hasher._combine(_:)(v1);
  if ((v0[1] & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v2 = v0[1];
  else
    v2 = 0;
  Hasher._combine(_:)(v2);
  if ((v0[2] & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v3 = v0[2];
  else
    v3 = 0;
  Hasher._combine(_:)(v3);
  type metadata accessor for WildModeTrackingLocation(0);
  v4 = type metadata accessor for Date(0);
  v5 = sub_100006204((unint64_t *)&unk_1010ED800, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  dispatch thunk of Hashable.hash(into:)(v7, v4, v5);
  return Hasher._finalize()();
}

uint64_t sub_1001D7810@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  char v31;
  char v32;
  char v33;

  v24 = a2;
  v27 = type metadata accessor for Date(0);
  v25 = *(_QWORD *)(v27 - 8);
  __chkstk_darwin(v27);
  v26 = (char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = sub_10001A9A8(&qword_1010F27D8);
  v4 = *(_QWORD *)(v28 - 8);
  __chkstk_darwin(v28);
  v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for WildModeTrackingLocation(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = a1[3];
  v11 = a1[4];
  sub_10001AA44(a1, v10);
  v12 = sub_1001E433C();
  v13 = v29;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for WildModeTrackingLocation.CodingKeys, &type metadata for WildModeTrackingLocation.CodingKeys, v12, v10, v11);
  if (!v13)
  {
    v29 = v7;
    v14 = v4;
    v16 = v26;
    v15 = v27;
    v33 = 0;
    v17 = v28;
    KeyedDecodingContainer.decode(_:forKey:)(&v33, v28);
    *(_QWORD *)v9 = v18;
    v32 = 1;
    KeyedDecodingContainer.decode(_:forKey:)(&v32, v17);
    *((_QWORD *)v9 + 1) = v19;
    v31 = 2;
    KeyedDecodingContainer.decode(_:forKey:)(&v31, v17);
    *((_QWORD *)v9 + 2) = v21;
    v30 = 3;
    v22 = sub_100006204(&qword_1010ED6D0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v16, v15, &v30, v17, v15, v22);
    (*(void (**)(char *, uint64_t))(v14 + 8))(v6, v17);
    v23 = v24;
    (*(void (**)(char *, _QWORD *, uint64_t))(v25 + 32))(&v9[*(int *)(v29 + 28)], v16, v15);
    sub_1000126EC((uint64_t)v9, v23, type metadata accessor for WildModeTrackingLocation);
  }
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
}

uint64_t sub_1001D7A90()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1001D7AC0 + 4 * byte_100E2C2E8[*v0]))(0x656475746974616CLL, 0xE800000000000000);
}

uint64_t sub_1001D7AC0()
{
  return 0x64757469676E6F6CLL;
}

unint64_t sub_1001D7ADC()
{
  return 0xD000000000000012;
}

uint64_t sub_1001D7AF8()
{
  return 0x6D617473656D6974;
}

uint64_t sub_1001D7B18(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001E433C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001D7B40(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001E433C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1001D7B68@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1001D7810(a1, a2);
}

uint64_t sub_1001D7B7C(_QWORD *a1)
{
  return sub_1001D75B0(a1);
}

_QWORD *sub_1001D7B98@<X0>(_QWORD *result@<X0>, char *a2@<X8>)
{
  char v2;
  char v3;

  if (*result == 1)
    v2 = 1;
  else
    v2 = 2;
  if (*result)
    v3 = v2;
  else
    v3 = 0;
  *a2 = v3;
  return result;
}

uint64_t sub_1001D7BB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1001E42F8();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1001D7C14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1001E42F8();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

Swift::Int sub_1001D7C60()
{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;
  _QWORD v4[9];

  v1 = *v0;
  v2 = v0[1];
  Hasher.init(_seed:)(v4);
  if (v2 >> 60 == 11)
  {
    Hasher._combine(_:)(1uLL);
  }
  else if (v2 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(2uLL);
    sub_10001BBBC(v1, v2);
    Data.hash(into:)(v4, v1, v2);
    sub_1001DAFB8(v1, v2);
  }
  return Hasher._finalize()();
}

void sub_1001D7D00(uint64_t a1)
{
  uint64_t *v1;
  unint64_t v3;
  Swift::UInt v4;
  uint64_t v5;

  v3 = v1[1];
  if (v3 >> 60 == 11)
  {
    v4 = 1;
    goto LABEL_5;
  }
  if (v3 >> 60 == 15)
  {
    v4 = 0;
LABEL_5:
    Hasher._combine(_:)(v4);
    return;
  }
  v5 = *v1;
  Hasher._combine(_:)(2uLL);
  sub_10001BBBC(v5, v3);
  Data.hash(into:)(a1, v5, v3);
  sub_1001DAFB8(v5, v3);
}

Swift::Int sub_1001D7D94()
{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;
  _QWORD v4[9];

  v1 = *v0;
  v2 = v0[1];
  Hasher.init(_seed:)(v4);
  if (v2 >> 60 == 11)
  {
    Hasher._combine(_:)(1uLL);
  }
  else if (v2 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(2uLL);
    sub_10001BBBC(v1, v2);
    Data.hash(into:)(v4, v1, v2);
    sub_1001DAFB8(v1, v2);
  }
  return Hasher._finalize()();
}

BOOL sub_1001D7E30(uint64_t *a1, uint64_t *a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;

  v2 = a1[1];
  v3 = a2[1];
  if (v2 >> 60 == 11)
    return v3 >> 60 == 11;
  if (v2 >> 60 == 15)
    return v3 >> 60 == 15;
  if (((v3 >> 60) | 4) == 0xF)
    return 0;
  v5 = *a1;
  v6 = *a2;
  sub_1001DD474(*a1, v2);
  sub_1001DD474(v6, v3);
  _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v5, v2);
  v8 = v7;
  sub_1001DAFB8(v6, v3);
  sub_1001DAFB8(v5, v2);
  return v8 & 1;
}

uint64_t sub_1001D7F04()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v6;

  v0 = type metadata accessor for URL(0);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = __chkstk_darwin(v0);
  v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000234D8(v2, qword_1011B6A48);
  sub_10001A9E8(v0, (uint64_t)qword_1011B6A48);
  type metadata accessor for BeaconStore(0);
  sub_1007EC9B8((uint64_t)v4);
  URL.appendingPathComponent(_:isDirectory:)(0xD000000000000019, 0x8000000100E2C3A0, 1);
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v4, v0);
}

uint64_t sub_1001D7FD4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, int a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, __int128 a10, uint64_t a11, unsigned __int8 a12, uint64_t a13, uint64_t a14, unsigned __int8 a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, unsigned __int8 a20,unsigned __int16 a21)
{
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(void);
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(uint64_t, uint64_t, uint64_t);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  char v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t result;
  _QWORD *v80;
  uint64_t v81;
  _WORD *v82;
  char *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  int v93;
  uint64_t v94;
  __int128 v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unsigned int v99;
  _WORD *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  int v109;
  int v110;
  void (*v111)(void);
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;

  v115 = a8;
  v116 = a7;
  LODWORD(v112) = a6;
  v96 = a5;
  v117 = a4;
  v118 = a1;
  v119 = a2;
  v109 = a20;
  v110 = a21;
  v107 = a18;
  v108 = a19;
  v106 = a17;
  v103 = a16;
  v99 = a15;
  v113 = a14;
  v114 = a13;
  LODWORD(v98) = a12;
  v97 = a11;
  v93 = a3 & 1;
  v95 = a10;
  v22 = type metadata accessor for Date(0);
  v23 = *(_QWORD *)(v22 - 8);
  __chkstk_darwin(v22);
  v83 = (char *)&v83 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  v26 = __chkstk_darwin(v25);
  v84 = (char *)&v83 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = __chkstk_darwin(v26);
  v86 = (uint64_t)&v83 - v29;
  __chkstk_darwin(v28);
  v85 = (uint64_t)&v83 - v30;
  v31 = (int *)type metadata accessor for WildModeAssociationRecord(0);
  v87 = a9 + v31[5];
  v32 = v87;
  v33 = type metadata accessor for UUID(0);
  v34 = *(_QWORD *)(v33 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v34 + 56))(v32, 1, 1, v33);
  v35 = v31[6];
  *(_BYTE *)(a9 + v35) = 0;
  v91 = a9 + v31[11];
  v36 = *(void (**)(void))(v23 + 56);
  v36();
  v37 = (_QWORD *)(a9 + v31[12]);
  *v37 = 0;
  v37[1] = 0;
  v37[2] = 0;
  v90 = a9 + v31[14];
  v38 = v90;
  v39 = type metadata accessor for AccessoryMetadata(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 56))(v38, 1, 1, v39);
  v89 = a9 + v31[15];
  v40 = v89;
  v41 = type metadata accessor for AccessoryProductInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 56))(v40, 1, 1, v41);
  v88 = v31[16];
  *(_BYTE *)(a9 + v88) = 8;
  v42 = v31[17];
  v43 = sub_1006B96D8((uint64_t)_swiftEmptyArrayStorage);
  v92 = v42;
  *(_QWORD *)(a9 + v42) = v43;
  v44 = a9 + v31[18];
  static Date.trustedNow.getter(v44);
  v94 = v44;
  ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v36)(v44, 0, 1, v22);
  v102 = a9 + v31[19];
  v111 = v36;
  v36();
  v101 = v31[21];
  *(_BYTE *)(a9 + v101) = 2;
  v100 = (_WORD *)(a9 + v31[22]);
  *v100 = 256;
  v104 = v34;
  v105 = v33;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v34 + 16))(a9, v118, v33);
  sub_1000F8EF4(v119, v87, &qword_1010ED860);
  *(_BYTE *)(a9 + v35) = v93;
  v45 = a9 + v31[7];
  v46 = type metadata accessor for MACAddress(0);
  v47 = *(_QWORD *)(v46 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v47 + 16))(v45, v117, v46);
  *(_QWORD *)(a9 + v31[8]) = v96;
  *(_BYTE *)(a9 + v31[9]) = v112;
  v48 = a9 + v31[10];
  v112 = v23;
  v49 = *(void (**)(uint64_t, uint64_t, uint64_t))(v23 + 16);
  v50 = v116;
  v49(v48, v116, v22);
  v51 = v115;
  sub_1000F8EF4(v115, v91, (uint64_t *)&unk_1010EA690);
  swift_bridgeObjectRelease();
  *(_OWORD *)v37 = v95;
  v37[2] = v97;
  v52 = v114;
  *(_BYTE *)(a9 + v31[13]) = v98;
  sub_1000F8EF4(v52, v90, &qword_101115E60);
  v53 = v113;
  v54 = v99;
  sub_1000F8EF4(v113, v89, (uint64_t *)&unk_10111C0A0);
  *(_BYTE *)(a9 + v88) = v54;
  if ((_DWORD)v54 == 8)
  {
    v55 = v52;
    v56 = sub_1006B96D8((uint64_t)_swiftEmptyArrayStorage);
    sub_100004048(v103, (uint64_t *)&unk_1010EA690);
    sub_100004048(v53, (uint64_t *)&unk_10111C0A0);
    sub_100004048(v55, &qword_101115E60);
    sub_100004048(v51, (uint64_t *)&unk_1010EA690);
    (*(void (**)(uint64_t, uint64_t))(v112 + 8))(v50, v22);
    (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v117, v46);
    sub_100004048(v119, &qword_1010ED860);
    (*(void (**)(uint64_t, uint64_t))(v104 + 8))(v118, v105);
    *(_QWORD *)(a9 + v92) = v56;
    swift_bridgeObjectRelease();
    v57 = v94;
    sub_100004048(v94, (uint64_t *)&unk_1010EA690);
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v111)(v57, 1, 1, v22);
  }
  else
  {
    v97 = v47;
    v98 = v46;
    v58 = v92;
    v59 = v85;
    static Date.trustedNow.getter(v85);
    ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v111)(v59, 0, 1, v22);
    v60 = v59;
    v61 = v94;
    sub_100004084(v60, v94, (uint64_t *)&unk_1010EA690);
    v62 = v61;
    v63 = v86;
    sub_10000F9B8(v62, v86, (uint64_t *)&unk_1010EA690);
    v64 = v112;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v112 + 48))(v63, 1, v22) == 1)
    {
      sub_100004048(v63, (uint64_t *)&unk_1010EA690);
      swift_bridgeObjectRetain(*(_QWORD *)(a9 + v58));
      v65 = sub_100518D70(v54);
      v67 = v66;
      swift_bridgeObjectRelease();
      v68 = v115;
      v69 = v98;
      if ((v67 & 1) != 0)
      {
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(a9 + v58));
        v71 = *(_QWORD *)(a9 + v58);
        v120 = v71;
        *(_QWORD *)(a9 + v58) = 0x8000000000000000;
        v72 = (uint64_t)v84;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_100A9B690();
          v71 = v120;
        }
        (*(void (**)(uint64_t, unint64_t, uint64_t))(v112 + 32))(v72, *(_QWORD *)(v71 + 56) + *(_QWORD *)(v112 + 72) * v65, v22);
        sub_100105FD0(v65, v71);
        *(_QWORD *)(a9 + v58) = v71;
        swift_bridgeObjectRelease();
        v73 = 0;
        v74 = v118;
      }
      else
      {
        v73 = 1;
        v74 = v118;
        v72 = (uint64_t)v84;
      }
      ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v111)(v72, v73, 1, v22);
      sub_100004048(v72, (uint64_t *)&unk_1010EA690);
      v77 = v119;
      v78 = v116;
      v64 = v112;
    }
    else
    {
      v75 = (uint64_t)v83;
      (*(void (**)(char *, uint64_t, uint64_t))(v64 + 32))(v83, v63, v22);
      v76 = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(a9 + v58));
      v120 = *(_QWORD *)(a9 + v58);
      *(_QWORD *)(a9 + v58) = 0x8000000000000000;
      sub_10010AD50(v75, v54, v76);
      *(_QWORD *)(a9 + v58) = v120;
      swift_bridgeObjectRelease();
      v74 = v118;
      v77 = v119;
      v68 = v115;
      v78 = v116;
      v69 = v98;
    }
    sub_100004048(v103, (uint64_t *)&unk_1010EA690);
    sub_100004048(v113, (uint64_t *)&unk_10111C0A0);
    sub_100004048(v114, &qword_101115E60);
    sub_100004048(v68, (uint64_t *)&unk_1010EA690);
    (*(void (**)(uint64_t, uint64_t))(v64 + 8))(v78, v22);
    (*(void (**)(uint64_t, uint64_t))(v97 + 8))(v117, v69);
    sub_100004048(v77, &qword_1010ED860);
    (*(void (**)(uint64_t, uint64_t))(v104 + 8))(v74, v105);
  }
  result = sub_100004084(v106, v102, (uint64_t *)&unk_1010EA690);
  v80 = (_QWORD *)(a9 + v31[20]);
  v81 = v108;
  *v80 = v107;
  v80[1] = v81;
  *(_BYTE *)(a9 + v101) = v109;
  BYTE1(v80) = BYTE1(v110);
  v82 = v100;
  *(_BYTE *)v100 = v110;
  *((_BYTE *)v82 + 1) = BYTE1(v80) & 1;
  return result;
}

void sub_1001D87DC(__int128 *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  int *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(uint64_t, uint64_t, uint64_t);
  int v37;
  char *v38;
  unsigned __int8 *v39;
  uint64_t v40;
  uint64_t v41;
  Swift::UInt v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  char *v53;
  uint64_t v54;
  char *v55;
  uint64_t *v56;
  unint64_t v57;
  Swift::UInt v58;
  uint64_t v59;
  int v60;
  Swift::UInt8 v61;
  Swift::UInt8 *v62;
  Swift::UInt8 v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;

  v2 = v1;
  v4 = type metadata accessor for AccessoryProductInfo(0);
  v73 = *(_QWORD *)(v4 - 8);
  v74 = v4;
  __chkstk_darwin(v4);
  v66 = (uint64_t)&v64 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10001A9A8((uint64_t *)&unk_10111C0A0);
  __chkstk_darwin(v6);
  v72 = (uint64_t)&v64 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for AccessoryMetadata(0);
  v69 = *(_QWORD *)(v8 - 8);
  v70 = v8;
  __chkstk_darwin(v8);
  v65 = (uint64_t)&v64 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10001A9A8(&qword_101115E60);
  __chkstk_darwin(v10);
  v68 = (uint64_t)&v64 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Date(0);
  v77 = *(_QWORD *)(v12 - 8);
  v78 = v12;
  __chkstk_darwin(v12);
  v79 = (char *)&v64 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  v15 = __chkstk_darwin(v14);
  v76 = (uint64_t)&v64 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v15);
  v75 = (uint64_t)&v64 - v18;
  __chkstk_darwin(v17);
  v67 = (uint64_t)&v64 - v19;
  v20 = type metadata accessor for UUID(0);
  v21 = *(_QWORD *)(v20 - 8);
  __chkstk_darwin(v20);
  v23 = (char *)&v64 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v24);
  v26 = (char *)&v64 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = sub_100006204(&qword_1010F98B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(a1, v20, v27);
  v28 = (int *)type metadata accessor for WildModeAssociationRecord(0);
  sub_10000F9B8(v1 + v28[5], (uint64_t)v26, &qword_1010ED860);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v26, 1, v20) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v23, v26, v20);
    Hasher._combine(_:)(1u);
    dispatch thunk of Hashable.hash(into:)(a1, v20, v27);
    (*(void (**)(char *, uint64_t))(v21 + 8))(v23, v20);
  }
  Hasher._combine(_:)(*(unsigned __int8 *)(v1 + v28[6]));
  v29 = type metadata accessor for MACAddress(0);
  v30 = sub_100006204((unint64_t *)&unk_101110150, (uint64_t (*)(uint64_t))&type metadata accessor for MACAddress, (uint64_t)&protocol conformance descriptor for MACAddress);
  dispatch thunk of Hashable.hash(into:)(a1, v29, v30);
  v31 = *(_QWORD *)(v1 + v28[8]);
  swift_bridgeObjectRetain(*(_QWORD *)(v2 + v28[8]));
  sub_100969C3C((uint64_t)a1, v31);
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(*(unsigned __int8 *)(v2 + v28[9]));
  v32 = sub_100006204((unint64_t *)&unk_1010ED800, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  v33 = v78;
  dispatch thunk of Hashable.hash(into:)(a1, v78, v32);
  v34 = v67;
  sub_10000F9B8(v2 + v28[11], v67, (uint64_t *)&unk_1010EA690);
  v35 = v77;
  v36 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v77 + 48);
  v37 = v36(v34, 1, v33);
  v71 = v32;
  if (v37 == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v38 = v79;
    (*(void (**)(char *, uint64_t, uint64_t))(v35 + 32))(v79, v34, v33);
    Hasher._combine(_:)(1u);
    dispatch thunk of Hashable.hash(into:)(a1, v33, v32);
    (*(void (**)(char *, uint64_t))(v35 + 8))(v38, v33);
  }
  v39 = (unsigned __int8 *)(v2 + v28[12]);
  v40 = *((_QWORD *)v39 + 2);
  if (v40)
  {
    v41 = *((_QWORD *)v39 + 1);
    v42 = *v39;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v42);
    swift_bridgeObjectRetain(v40);
    String.hash(into:)(a1, v41, v40);
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  v43 = *(unsigned __int8 *)(v2 + v28[13]);
  if (v43 == 4)
    LOBYTE(v43) = 0;
  else
    Hasher._combine(_:)(1u);
  Hasher._combine(_:)(v43);
  v44 = v68;
  sub_10000F9B8(v2 + v28[14], v68, &qword_101115E60);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v69 + 48))(v44, 1, v70) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v45 = v65;
    sub_1000126EC(v44, v65, type metadata accessor for AccessoryMetadata);
    Hasher._combine(_:)(1u);
    sub_100131B10((uint64_t)a1);
    sub_1000126B0(v45, type metadata accessor for AccessoryMetadata);
  }
  v46 = v72;
  sub_10000F9B8(v2 + v28[15], v72, (uint64_t *)&unk_10111C0A0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v73 + 48))(v46, 1, v74) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v47 = v66;
    sub_1000126EC(v46, v66, type metadata accessor for AccessoryProductInfo);
    Hasher._combine(_:)(1u);
    sub_100D175D4((uint64_t)a1);
    sub_1000126B0(v47, type metadata accessor for AccessoryProductInfo);
  }
  v48 = v71;
  v49 = *(unsigned __int8 *)(v2 + v28[16]);
  if ((_DWORD)v49 != 8)
  {
    Hasher._combine(_:)(1u);
    __asm { BR              X9 }
  }
  Hasher._combine(_:)(0);
  v50 = *(_QWORD *)(v2 + v28[17]);
  swift_bridgeObjectRetain(v50);
  sub_100A2FA1C(a1, v50);
  swift_bridgeObjectRelease();
  v51 = v75;
  sub_10000F9B8(v2 + v28[18], v75, (uint64_t *)&unk_1010EA690);
  v52 = v36(v51, 1, v33);
  if (v52 == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v53 = v79;
    (*(void (**)(char *, uint64_t, uint64_t))(v35 + 32))(v79, v51, v33);
    Hasher._combine(_:)(1u);
    dispatch thunk of Hashable.hash(into:)(a1, v33, v48);
    (*(void (**)(char *, uint64_t))(v35 + 8))(v53, v33);
  }
  v54 = v76;
  sub_10000F9B8(v2 + v28[19], v76, (uint64_t *)&unk_1010EA690);
  if (v36(v54, 1, v33) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v55 = v79;
    (*(void (**)(char *, uint64_t, uint64_t))(v35 + 32))(v79, v54, v33);
    Hasher._combine(_:)(1u);
    dispatch thunk of Hashable.hash(into:)(a1, v33, v48);
    (*(void (**)(char *, uint64_t))(v35 + 8))(v55, v33);
  }
  v56 = (uint64_t *)(v2 + v28[20]);
  v57 = v56[1];
  if (v57 >> 60 == 11)
  {
    v58 = 1;
    goto LABEL_32;
  }
  if (v57 >> 60 == 15)
  {
    v58 = 0;
LABEL_32:
    Hasher._combine(_:)(v58);
    goto LABEL_34;
  }
  v59 = *v56;
  Hasher._combine(_:)(2uLL);
  sub_10001BBBC(v59, v57);
  Data.hash(into:)(a1, v59, v57);
  sub_1001DAFB8(v59, v57);
LABEL_34:
  v60 = *(unsigned __int8 *)(v2 + v28[21]);
  if (v60 == 2)
  {
    v61 = 0;
  }
  else
  {
    v61 = v60 & 1;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v61);
  v62 = (Swift::UInt8 *)(v2 + v28[22]);
  if ((v62[1] & 1) != 0)
  {
    v63 = 0;
  }
  else
  {
    v63 = *v62;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v63);
}

uint64_t sub_1001D9118(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1001D9154 + 4 * byte_100E2C2F4[a1]))(0x696669746E656469, 0xEA00000000007265);
}

unint64_t sub_1001D9154()
{
  return 0xD000000000000010;
}

void sub_1001D92E4()
{
  JUMPOUT(0x1001D92F8);
}

uint64_t sub_1001D9304()
{
  return 0x68736F507369;
}

uint64_t sub_1001D9318()
{
  return 0x496B726F7774656ELL;
}

uint64_t sub_1001D9334(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1001D9370 + 4 * byte_100E2C307[a1]))(0x696669746E656469, 0xEA00000000007265);
}

unint64_t sub_1001D9370()
{
  return 0xD000000000000010;
}

void sub_1001D9500()
{
  JUMPOUT(0x1001D9514);
}

uint64_t sub_1001D9520()
{
  return 0x68736F507369;
}

uint64_t sub_1001D9534()
{
  return 0x496B726F7774656ELL;
}

Swift::Int sub_1001D9550()
{
  __int128 v1[4];

  Hasher.init(_seed:)(v1);
  sub_1001D87DC(v1);
  return Hasher._finalize()();
}

Swift::Int sub_1001D9590()
{
  __int128 v1[4];

  Hasher.init(_seed:)(v1);
  sub_1001D87DC(v1);
  return Hasher._finalize()();
}

uint64_t sub_1001D95CC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v9;

  v2 = *a2;
  v3 = sub_1001D9118(*a1);
  v5 = v4;
  v6 = sub_1001D9118(v2);
  if (v3 == v6 && v5 == v7)
    v9 = 1;
  else
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v9 & 1;
}

Swift::Int sub_1001D9654()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5);
  v2 = sub_1001D9118(v1);
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t sub_1001D96B4(uint64_t a1)
{
  unsigned __int8 *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = sub_1001D9118(*v1);
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease();
}

Swift::Int sub_1001D96F4()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5);
  v2 = sub_1001D9118(v1);
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t sub_1001D9750@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_1001E42A8(*a1, a1[1]);
  *a2 = result;
  return result;
}

uint64_t sub_1001D977C@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1001D9118(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1001D97A4()
{
  unsigned __int8 *v0;

  return sub_1001D9334(*v0);
}

uint64_t sub_1001D97AC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1001E42A8(a1, a2);
  *a3 = result;
  return result;
}

void sub_1001D97D0(_BYTE *a1@<X8>)
{
  *a1 = 19;
}

uint64_t sub_1001D97DC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001DAF74();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001D9804(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001DAF74();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1001D982C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  int *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  void (*v30)(void);
  uint64_t v31;
  void (*v32)(void);
  char *v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  void (*v39)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t result;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  int *v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  char *v74;
  _QWORD *v75;
  int v76;
  int v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t (*v84)(char *, uint64_t, uint64_t);
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  _QWORD *v92;
  uint64_t v93;
  int *v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  unint64_t v104;
  uint64_t v105;
  char *v106;
  unint64_t v107;
  _QWORD *v108;
  uint64_t v109;
  _QWORD *v110;
  uint64_t v111;
  _QWORD *v112;
  _QWORD *v113;
  unint64_t v114;
  _QWORD *v115;
  uint64_t v116;
  unint64_t v117;
  _QWORD *v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  _QWORD *v122;
  _QWORD *v123;
  char v124;
  _QWORD *v125;
  __int16 v126;
  __int16 v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  _QWORD *v140;
  _QWORD *v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  __int128 v150;
  _QWORD *v151;
  uint64_t v152;
  uint64_t v153;
  int *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  char *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  char *v162;
  uint64_t v163;
  char *v164;
  _QWORD *v165;
  __int128 v166;
  uint64_t v167;
  char v168;

  v165 = a1;
  v134 = a2;
  v2 = sub_10001A9A8((uint64_t *)&unk_10111C0A0);
  __chkstk_darwin(v2);
  v137 = (uint64_t)&v130 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_10001A9A8(&qword_101115E60);
  __chkstk_darwin(v4);
  v138 = (uint64_t)&v130 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  v7 = __chkstk_darwin(v6);
  v135 = (uint64_t)&v130 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v7);
  v136 = (uint64_t)&v130 - v10;
  __chkstk_darwin(v9);
  v139 = (char *)&v130 - v11;
  v12 = type metadata accessor for Date(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v140 = (uint64_t *)((char *)&v130 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v15 = sub_10001A9A8((uint64_t *)&unk_1010F9890);
  __chkstk_darwin(v15);
  v142 = (char *)&v130 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v146 = type metadata accessor for MACAddress(0);
  v147 = *(_QWORD *)(v146 - 8);
  __chkstk_darwin(v146);
  v141 = (uint64_t *)((char *)&v130 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  v18 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v18);
  v149 = (char *)&v130 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for UUID(0);
  v21 = *(_QWORD *)(v20 - 8);
  __chkstk_darwin(v20);
  v151 = (uint64_t *)((char *)&v130 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  *(_QWORD *)&v150 = sub_10001A9A8(&qword_1010F2540);
  v152 = *(_QWORD *)(v150 - 8);
  __chkstk_darwin(v150);
  v24 = (char *)&v130 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = (int *)type metadata accessor for WildModeAssociationRecord(0);
  v26 = __chkstk_darwin(v25);
  v28 = (char *)&v130 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = (uint64_t)&v28[*(int *)(v26 + 20)];
  v148 = v21;
  v30 = *(void (**)(void))(v21 + 56);
  v161 = v29;
  v153 = v20;
  v30();
  v143 = v25[6];
  v28[v143] = 0;
  v31 = (uint64_t)&v28[v25[11]];
  v144 = v13;
  v32 = *(void (**)(void))(v13 + 56);
  v163 = v31;
  v32();
  v33 = &v28[v25[12]];
  *(_QWORD *)v33 = 0;
  *((_QWORD *)v33 + 1) = 0;
  v162 = v33;
  *((_QWORD *)v33 + 2) = 0;
  v34 = (uint64_t)&v28[v25[14]];
  v35 = type metadata accessor for AccessoryMetadata(0);
  v36 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 56);
  v160 = v34;
  v36(v34, 1, 1, v35);
  v37 = (uint64_t)&v28[v25[15]];
  v38 = type metadata accessor for AccessoryProductInfo(0);
  v39 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 56);
  v159 = v37;
  v39(v37, 1, 1, v38);
  v40 = v25[16];
  v28[v40] = 8;
  v41 = v25[17];
  v42 = sub_1006B96D8((uint64_t)_swiftEmptyArrayStorage);
  v157 = v41;
  *(_QWORD *)&v28[v41] = v42;
  v43 = (uint64_t)&v28[v25[18]];
  static Date.trustedNow.getter(v43);
  v156 = v43;
  ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v32)(v43, 0, 1, v12);
  v158 = &v28[v25[19]];
  v145 = v12;
  v32();
  v44 = v25[21];
  v28[v44] = 2;
  v154 = v25;
  v45 = v25[22];
  v164 = v28;
  v46 = &v28[v45];
  v47 = v24;
  v48 = v46;
  *(_WORD *)v46 = 256;
  v50 = v165[3];
  v49 = v165[4];
  sub_10001AA44(v165, v50);
  v51 = sub_1001DAF74();
  v52 = v155;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for WildModeAssociationRecord.CodingKeys, &type metadata for WildModeAssociationRecord.CodingKeys, v51, v50, v49);
  if (v52)
  {
    v53 = v161;
    v61 = (uint64_t)v164;
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v165);
    sub_100004048(v53, &qword_1010ED860);
    v62 = 0;
    goto LABEL_4;
  }
  v54 = (uint64_t)v149;
  v155 = v35;
  v133 = v38;
  v132 = v40;
  v130 = v44;
  v131 = v48;
  LOBYTE(v166) = 0;
  v55 = sub_100006204((unint64_t *)&qword_1010EDA90, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v56 = v151;
  v57 = v153;
  v58 = v150;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v151, v153, &v166, v150, v153, v55);
  v59 = v57;
  v60 = v58;
  v61 = (uint64_t)v164;
  (*(void (**)(char *, _QWORD *, uint64_t))(v148 + 32))(v164, v56, v59);
  LOBYTE(v166) = 1;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v59, &v166, v60, v59, v55);
  v64 = v161;
  sub_100004084(v54, v161, &qword_1010ED860);
  v168 = 2;
  v65 = sub_1001DAFD0();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&type metadata for UnauthorizedTrackingType, &v168, v60, &type metadata for UnauthorizedTrackingType, v65);
  v66 = v147;
  *(_BYTE *)(v61 + v143) = v166 & 1;
  v168 = 3;
  v67 = sub_1001BCA8C();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&type metadata for Advertisement, &v168, v60, &type metadata for Advertisement, v67);
  v151 = 0;
  v149 = v47;
  v69 = *((_QWORD *)&v166 + 1);
  v70 = v61 + v154[20];
  if (*((_QWORD *)&v166 + 1) >> 60 == 15)
  {
    *(_OWORD *)v70 = xmmword_100E22B20;
    LOBYTE(v166) = 4;
    v71 = sub_100006204(&qword_1010F08B8, (uint64_t (*)(uint64_t))&type metadata accessor for MACAddress, (uint64_t)&protocol conformance descriptor for MACAddress);
    v72 = v141;
    v73 = v146;
    v74 = v149;
    v75 = v151;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v141, v146, &v166, v60, v146, v71);
    v151 = v75;
    if (v75)
    {
      (*(void (**)(char *, uint64_t))(v152 + 8))(v74, v60);
      v76 = 0;
      v77 = 0;
      v78 = 0;
      v62 = 1;
      goto LABEL_7;
    }
    (*(void (**)(uint64_t, _QWORD *, uint64_t))(v66 + 32))(v61 + v154[7], v72, v73);
    v87 = v145;
    v88 = v144;
  }
  else
  {
    v79 = v60;
    v80 = v166;
    *(_QWORD *)v70 = v166;
    *(_QWORD *)(v70 + 8) = v69;
    sub_10001BBBC(v80, v69);
    v81 = sub_10001BBBC(v80, v69);
    v82 = static MACAddress.length.getter(v81);
    sub_1002F7C0C(v82, v80, v69);
    v83 = v142;
    MACAddress.init(data:type:)(v166);
    v84 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v66 + 48);
    v85 = v66;
    v86 = v146;
    result = v84(v83, 1, v146);
    v87 = v145;
    v88 = v144;
    if ((_DWORD)result == 1)
    {
      __break(1u);
      return result;
    }
    (*(void (**)(char *, char *, uint64_t))(v85 + 32))(&v164[v154[7]], v83, v86);
    sub_10001EF3C(v80, v69);
    v66 = v85;
    v60 = v79;
  }
  v89 = sub_10001A9A8(&qword_1010F2558);
  v168 = 5;
  v90 = sub_1001DBDCC(&qword_1010F2560, &qword_1010F2568, (uint64_t)&unk_100E2CA24, (const char *)&protocol conformance descriptor for <A> [A]);
  v91 = v149;
  v92 = v151;
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v166, v89, &v168, v60, v89, v90);
  if (v92)
  {
    v151 = v92;
    (*(void (**)(char *, uint64_t))(v152 + 8))(v91, v60);
    v77 = 0;
    v78 = 0;
    v76 = 1;
LABEL_23:
    v62 = 1;
    v61 = (uint64_t)v164;
    goto LABEL_7;
  }
  v93 = v87;
  v94 = v154;
  v95 = (uint64_t)v164;
  *(_QWORD *)&v164[v154[8]] = v166;
  v168 = 6;
  v96 = sub_1001DB028();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v166, &type metadata for WildModeAlertState, &v168, v60, &type metadata for WildModeAlertState, v96);
  *(_BYTE *)(v95 + v94[9]) = v166;
  LOBYTE(v166) = 7;
  v97 = sub_100006204(&qword_1010ED6D0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  v98 = v140;
  v99 = v93;
  v100 = v97;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v140, v99, &v166, 0, v99, v97);
  v151 = 0;
  (*(void (**)(char *, _QWORD *, uint64_t))(v88 + 32))(&v164[v154[10]], v98, v99);
  LOBYTE(v166) = 8;
  v101 = (uint64_t)v139;
  v102 = v100;
  v103 = v151;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v99, &v166, 0, v99, v100);
  if (v103)
  {
    v151 = v103;
    (*(void (**)(char *, uint64_t))(v152 + 8))(v91, v60);
    v76 = 1;
    v77 = 1;
    v78 = 1;
    goto LABEL_23;
  }
  sub_100004084(v101, v163, (uint64_t *)&unk_1010EA690);
  v168 = 9;
  v104 = sub_1000A8368();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&type metadata for MessagingDestination, &v168, v60, &type metadata for MessagingDestination, v104);
  v151 = 0;
  v150 = v166;
  v105 = v167;
  v106 = v162;
  swift_bridgeObjectRelease();
  *(_OWORD *)v106 = v150;
  *((_QWORD *)v106 + 2) = v105;
  v168 = 10;
  v107 = sub_1001DB06C();
  v108 = v151;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&type metadata for Type18Status.DeviceType, &v168, v60, &type metadata for Type18Status.DeviceType, v107);
  v151 = v108;
  if (!v108)
  {
    v164[v154[13]] = v166;
    LOBYTE(v166) = 11;
    v109 = sub_100006204(&qword_1010F2580, type metadata accessor for AccessoryMetadata, (uint64_t)&unk_100E28038);
    v110 = v151;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v155, &v166, v60, v155, v109);
    v151 = v110;
    if (!v110)
    {
      sub_100004084(v138, v160, &qword_101115E60);
      LOBYTE(v166) = 12;
      v111 = sub_100006204(&qword_1010F2588, type metadata accessor for AccessoryProductInfo, (uint64_t)&unk_100E6E468);
      v112 = v151;
      KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v133, &v166, v60, v133, v111);
      v151 = v112;
      if (!v112)
      {
        sub_100004084(v137, v159, (uint64_t *)&unk_10111C0A0);
        LOBYTE(v166) = 14;
        v113 = v151;
        KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v145, &v166, v60, v145, v102);
        v151 = v113;
        if (!v113)
        {
          sub_100004084(v136, (uint64_t)v158, (uint64_t *)&unk_1010EA690);
          v168 = 15;
          v114 = sub_1001DB0B0();
          v115 = v151;
          KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&type metadata for WildModeObservationState, &v168, v60, &type metadata for WildModeObservationState, v114);
          v151 = v115;
          if (!v115)
          {
            v164[v132] = v166;
            v116 = sub_10001A9A8(&qword_1010F2598);
            v168 = 16;
            v117 = sub_1001DB0F4();
            v118 = v151;
            KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v116, &v168, v60, v116, v117);
            v151 = v118;
            if (!v118)
            {
              v119 = v166;
              if (!(_QWORD)v166)
                v119 = sub_1006B96D8((uint64_t)_swiftEmptyArrayStorage);
              v120 = v157;
              v121 = (uint64_t)v164;
              swift_bridgeObjectRelease();
              *(_QWORD *)(v121 + v120) = v119;
              LOBYTE(v166) = 13;
              v122 = v151;
              KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v145, &v166, v60, v145, v102);
              v151 = v122;
              if (!v122)
              {
                sub_100004084(v135, v156, (uint64_t *)&unk_1010EA690);
                LOBYTE(v166) = 17;
                v123 = v151;
                v124 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v166, v60);
                v151 = v123;
                if (!v123)
                {
                  v164[v130] = v124;
                  LOBYTE(v166) = 18;
                  v125 = v151;
                  v126 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v166, v60);
                  v151 = v125;
                  if (!v125)
                  {
                    v127 = v126;
                    (*(void (**)(char *, uint64_t))(v152 + 8))(v149, v60);
                    v128 = v131;
                    *v131 = v127;
                    v128[1] = HIBYTE(v127) & 1;
                    v129 = (uint64_t)v164;
                    sub_1001DB178((uint64_t)v164, v134);
                    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v165);
                    return sub_1000126B0(v129, type metadata accessor for WildModeAssociationRecord);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  (*(void (**)(char *, uint64_t))(v152 + 8))(v149, v60);
  v76 = 1;
  v77 = 1;
  v78 = 1;
  v62 = 1;
  v66 = v147;
  v64 = v161;
  v61 = (uint64_t)v164;
LABEL_7:
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v165);
  (*(void (**)(uint64_t, uint64_t))(v148 + 8))(v61, v153);
  sub_100004048(v64, &qword_1010ED860);
  if (v76)
  {
    v68 = v154;
    (*(void (**)(uint64_t, uint64_t))(v66 + 8))(v61 + v154[7], v146);
    if ((v77 & 1) == 0)
      goto LABEL_9;
  }
  else
  {
    v68 = v154;
    if (!v77)
    {
LABEL_9:
      if (!v78)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  swift_bridgeObjectRelease();
  if ((v78 & 1) != 0)
LABEL_10:
    (*(void (**)(uint64_t, uint64_t))(v144 + 8))(v61 + v68[10], v145);
LABEL_4:
  sub_100004048(v163, (uint64_t *)&unk_1010EA690);
  swift_bridgeObjectRelease();
  sub_100004048(v160, &qword_101115E60);
  sub_100004048(v159, (uint64_t *)&unk_10111C0A0);
  swift_bridgeObjectRelease();
  sub_100004048(v156, (uint64_t *)&unk_1010EA690);
  result = sub_100004048((uint64_t)v158, (uint64_t *)&unk_1010EA690);
  if (v62)
    return sub_1001DAFB8(*(_QWORD *)(v61 + v154[20]), *(_QWORD *)(v61 + v154[20] + 8));
  return result;
}

uint64_t sub_1001DA848(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 *v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned __int8 *v46;
  unsigned int v47;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  char v53;

  v3 = v1;
  v5 = sub_10001A9A8(&qword_1010F25A8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v49 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  v11 = sub_1001DAF74();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for WildModeAssociationRecord.CodingKeys, &type metadata for WildModeAssociationRecord.CodingKeys, v11, v9, v10);
  LOBYTE(v51) = 0;
  v12 = type metadata accessor for UUID(0);
  v13 = sub_100006204(&qword_1010EDAC0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v3, &v51, v5, v12, v13);
  if (!v2)
  {
    v14 = (int *)type metadata accessor for WildModeAssociationRecord(0);
    v15 = v3 + v14[5];
    LOBYTE(v51) = 1;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v15, &v51, v5, v12, v13);
    LOBYTE(v51) = *(_BYTE *)(v3 + v14[6]);
    v53 = 2;
    v16 = sub_1001DBD24();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v51, &v53, v5, &type metadata for UnauthorizedTrackingType, v16);
    v17 = v3 + v14[7];
    LOBYTE(v51) = 4;
    v18 = type metadata accessor for MACAddress(0);
    v19 = sub_100006204(&qword_1010F9860, (uint64_t (*)(uint64_t))&type metadata accessor for MACAddress, (uint64_t)&protocol conformance descriptor for MACAddress);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v17, &v51, v5, v18, v19);
    v20 = v3 + v14[20];
    v21 = *(_QWORD *)(v20 + 8);
    if (((v21 >> 60) | 4) == 0xF)
    {
      v22 = 0;
      v21 = 0xF000000000000000;
    }
    else
    {
      v22 = *(_QWORD *)v20;
      sub_10001BBBC(*(_QWORD *)v20, *(_QWORD *)(v20 + 8));
    }
    *(_QWORD *)&v51 = v22;
    *((_QWORD *)&v51 + 1) = v21;
    v53 = 3;
    v23 = sub_10001A9A8(&qword_1010F25B8);
    v24 = sub_1001DBD68();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v51, &v53, v5, v23, v24);
    sub_10001EF3C(v22, v21);
    *(_QWORD *)&v51 = *(_QWORD *)(v3 + v14[8]);
    v53 = 5;
    v25 = sub_10001A9A8(&qword_1010F2558);
    v26 = sub_1001DBDCC(&qword_1010F25C8, &qword_1010F25D0, (uint64_t)&unk_100E2C984, (const char *)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v51, &v53, v5, v25, v26);
    LOBYTE(v51) = *(_BYTE *)(v3 + v14[9]);
    v53 = 6;
    v27 = sub_1001DBE50();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v51, &v53, v5, &type metadata for WildModeAlertState, v27);
    v28 = v3 + v14[10];
    LOBYTE(v51) = 7;
    v29 = type metadata accessor for Date(0);
    v30 = sub_100006204((unint64_t *)&unk_1010ED6F0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v28, &v51, v5, v29, v30);
    v31 = v3 + v14[11];
    LOBYTE(v51) = 8;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v31, &v51, v5, v29, v30);
    v32 = (__int128 *)(v3 + v14[12]);
    v33 = *((_QWORD *)v32 + 2);
    v51 = *v32;
    v52 = v33;
    v53 = 9;
    v34 = sub_1000A82E0();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v51, &v53, v5, &type metadata for MessagingDestination, v34);
    LOBYTE(v51) = *(_BYTE *)(v3 + v14[13]);
    v53 = 10;
    v35 = sub_1001DBE94();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v51, &v53, v5, &type metadata for Type18Status.DeviceType, v35);
    v50 = v3 + v14[14];
    LOBYTE(v51) = 11;
    v36 = type metadata accessor for AccessoryMetadata(0);
    v37 = sub_100006204(&qword_1010F25E8, type metadata accessor for AccessoryMetadata, (uint64_t)&unk_100E28010);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v50, &v51, v5, v36, v37);
    v50 = v3 + v14[15];
    LOBYTE(v51) = 12;
    v38 = type metadata accessor for AccessoryProductInfo(0);
    v39 = sub_100006204(&qword_1010F25F0, type metadata accessor for AccessoryProductInfo, (uint64_t)&unk_100E6E440);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v50, &v51, v5, v38, v39);
    v40 = v3 + v14[19];
    LOBYTE(v51) = 14;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v40, &v51, v5, v29, v30);
    LOBYTE(v51) = *(_BYTE *)(v3 + v14[16]);
    v53 = 15;
    v41 = sub_1001DBED8();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v51, &v53, v5, &type metadata for WildModeObservationState, v41);
    *(_QWORD *)&v51 = *(_QWORD *)(v3 + v14[17]);
    v53 = 16;
    v42 = sub_10001A9A8(&qword_1010F2598);
    v43 = sub_1001DBF1C();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v51, &v53, v5, v42, v43);
    v44 = v3 + v14[18];
    LOBYTE(v51) = 13;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v44, &v51, v5, v29, v30);
    v45 = *(unsigned __int8 *)(v3 + v14[21]);
    LOBYTE(v51) = 17;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v45, &v51, v5);
    v46 = (unsigned __int8 *)(v3 + v14[22]);
    v47 = *v46;
    LODWORD(v46) = v46[1];
    LOBYTE(v51) = 18;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v47 | ((_DWORD)v46 << 8), &v51, v5);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1001DAEF0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1001D982C(a1, a2);
}

uint64_t sub_1001DAF04(_QWORD *a1)
{
  return sub_1001DA848(a1);
}

uint64_t sub_1001DAF18(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_100006204(&qword_101111AD0, type metadata accessor for WildModeAssociationRecord, (uint64_t)&unk_100E2C374);
  result = sub_100006204(&qword_1011082A0, type metadata accessor for WildModeAssociationRecord, (uint64_t)&unk_100E2C34C);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_1001DAF74()
{
  unint64_t result;

  result = qword_1010F2548;
  if (!qword_1010F2548)
  {
    result = swift_getWitnessTable(byte_100E2CA74, &type metadata for WildModeAssociationRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F2548);
  }
  return result;
}

uint64_t sub_1001DAFB8(uint64_t result, unint64_t a2)
{
  if (((a2 >> 60) | 4) != 0xF)
    return sub_10001BC14(result, a2);
  return result;
}

unint64_t sub_1001DAFD0()
{
  unint64_t result;

  result = qword_1010F2550;
  if (!qword_1010F2550)
  {
    result = swift_getWitnessTable(aM_4, &type metadata for UnauthorizedTrackingType);
    atomic_store(result, (unint64_t *)&qword_1010F2550);
  }
  return result;
}

uint64_t type metadata accessor for WildModeTrackingLocation(uint64_t a1)
{
  return sub_10001B630(a1, qword_1010F2748, (uint64_t)&nominal type descriptor for WildModeTrackingLocation);
}

unint64_t sub_1001DB028()
{
  unint64_t result;

  result = qword_1010F2570;
  if (!qword_1010F2570)
  {
    result = swift_getWitnessTable(byte_100E2C9FC, &type metadata for WildModeAlertState);
    atomic_store(result, (unint64_t *)&qword_1010F2570);
  }
  return result;
}

unint64_t sub_1001DB06C()
{
  unint64_t result;

  result = qword_1010F2578;
  if (!qword_1010F2578)
  {
    result = swift_getWitnessTable(byte_100E26600, &type metadata for Type18Status.DeviceType);
    atomic_store(result, (unint64_t *)&qword_1010F2578);
  }
  return result;
}

unint64_t sub_1001DB0B0()
{
  unint64_t result;

  result = qword_1010F2590;
  if (!qword_1010F2590)
  {
    result = swift_getWitnessTable(byte_100E2C9D4, &type metadata for WildModeObservationState);
    atomic_store(result, (unint64_t *)&qword_1010F2590);
  }
  return result;
}

unint64_t sub_1001DB0F4()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1010F25A0;
  if (!qword_1010F25A0)
  {
    v1 = sub_10001F784(&qword_1010F2598);
    v2[0] = sub_1001DB0B0();
    v2[1] = sub_100006204(&qword_1010ED6D0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> [A : B], v1, v2);
    atomic_store(result, (unint64_t *)&qword_1010F25A0);
  }
  return result;
}

uint64_t sub_1001DB178(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for WildModeAssociationRecord(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001DB1BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  int *v16;
  int *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  _QWORD *v28;
  void *v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t (*v42)(uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  BOOL v47;
  uint64_t *v48;
  void *v49;
  uint64_t v50;
  Swift::String v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  void (*v55)(_BYTE *);
  uint64_t v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  id v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  const char *v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  id v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _BYTE v88[4];
  unsigned int v89;
  void (*v90)(_BYTE *, uint64_t);
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;

  v1 = v0;
  v2 = sub_10001A9A8(&qword_101115E60);
  __chkstk_darwin(v2);
  v4 = &v88[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = type metadata accessor for AccessoryMetadata(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = &v88[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = sub_10001A9A8((uint64_t *)&unk_10111C0A0);
  __chkstk_darwin(v9);
  v11 = &v88[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = type metadata accessor for LocalizationUtility.Table(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = &v88[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v16 = (int *)type metadata accessor for WildModeAssociationRecord(0);
  v17 = v16;
  if (*(unsigned __int8 *)(v1 + v16[13]) - 2 < 3)
  {
    v92 = v13;
    sub_10000F9B8(v1 + v16[15], (uint64_t)v11, (uint64_t *)&unk_10111C0A0);
    v18 = type metadata accessor for AccessoryProductInfo(0);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 48))(v11, 1, v18) != 1)
    {
      v39 = (uint64_t *)&v11[*(int *)(v18 + 48)];
      v40 = *v39;
      v41 = v39[1];
      swift_bridgeObjectRetain(v41);
      v42 = type metadata accessor for AccessoryProductInfo;
      v43 = (uint64_t)v11;
      goto LABEL_22;
    }
    sub_100004048((uint64_t)v11, (uint64_t *)&unk_10111C0A0);
    sub_10000F9B8(v1 + v17[14], (uint64_t)v4, &qword_101115E60);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
    {
      sub_100004048((uint64_t)v4, &qword_101115E60);
      v19 = v1 + v17[12];
      v20 = *(void **)(v19 + 16);
      if (v20)
      {
        v21 = *(_QWORD *)(v19 + 8);
        v22 = *(_BYTE *)v19;
LABEL_25:
        v73 = v92;
        v74 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
        v28 = (_QWORD *)swift_allocObject(v74, 72, 7);
        *((_OWORD *)v28 + 1) = xmmword_100E22B00;
        v75 = (void *)sub_100ACD7B4(v22, v21, v20);
        v76 = objc_msgSend(v75, "description");

        v77 = static String._unconditionallyBridgeFromObjectiveC(_:)(v76);
        v79 = v78;

        v80 = sub_100C73E1C(v77, v79);
        v82 = v81;
        swift_bridgeObjectRelease();
        v28[7] = &type metadata for String;
        v28[8] = sub_10001AA00();
        v28[4] = v80;
        v28[5] = v82;
        v71 = 0xD000000000000035;
        v83 = 0x8000000100ECB570;
LABEL_31:
        (*(void (**)(_BYTE *, _QWORD, uint64_t))(v73 + 104))(v15, enum case for LocalizationUtility.Table.default(_:), v12);
        v44 = static LocalizationUtility.localizedString(key:table:)(v71, v83, v15);
        v46 = v85;
        swift_bridgeObjectRelease();
        (*(void (**)(_BYTE *, uint64_t))(v73 + 8))(v15, v12);
        goto LABEL_32;
      }
      goto LABEL_29;
    }
    sub_1000126EC((uint64_t)v4, (uint64_t)v8, type metadata accessor for AccessoryMetadata);
    v47 = sub_1001D7148();
    v48 = (uint64_t *)&v8[*(int *)(v5 + 28)];
    if (v47)
    {
      v49 = (void *)v48[1];
      v91 = (unint64_t)"WING_SUBTITLE_HAWKEYE";
      if (v49)
      {
        v50 = *v48;
        v93 = 0;
        v94 = 0xE000000000000000;
        swift_bridgeObjectRetain(v49);
        _StringGuts.grow(_:)(31);
        swift_bridgeObjectRelease();
        v93 = 0xD00000000000001DLL;
        v94 = 0x8000000100ECA0A0;
        v51._countAndFlagsBits = v50;
        v51._object = v49;
        String.append(_:)(v51);
        swift_bridgeObjectRelease();
        v53 = v93;
        v52 = v94;
      }
      else
      {
        v52 = 0x8000000100ECA050;
        v53 = 0xD00000000000001CLL;
      }
      v54 = v92;
      v55 = *(void (**)(_BYTE *))(v92 + 104);
      v89 = enum case for LocalizationUtility.Table.default(_:);
      v55(v15);
      v40 = static LocalizationUtility.localizedString(key:table:)(v53, v52, v15);
      v56 = v54;
      v41 = v57;
      v90 = *(void (**)(_BYTE *, uint64_t))(v56 + 8);
      v90(v15, v12);
      if (v40 == v53 && v41 == v52)
      {
        swift_bridgeObjectRelease();
LABEL_20:
        swift_bridgeObjectRelease();
        ((void (*)(_BYTE *, _QWORD, uint64_t))v55)(v15, v89, v12);
        v40 = static LocalizationUtility.localizedString(key:table:)(0xD00000000000001CLL, v91 | 0x8000000000000000, v15);
        v41 = v59;
        v90(v15, v12);
        goto LABEL_21;
      }
      v58 = _stringCompareWithSmolCheck(_:_:expecting:)(v40, v41, v53, v52, 0);
      swift_bridgeObjectRelease();
      if ((v58 & 1) != 0)
        goto LABEL_20;
    }
    else
    {
      v40 = *v48;
      v41 = v48[1];
      swift_bridgeObjectRetain(v41);
    }
LABEL_21:
    v42 = type metadata accessor for AccessoryMetadata;
    v43 = (uint64_t)v8;
LABEL_22:
    sub_1000126B0(v43, v42);
    v60 = v1 + v17[12];
    v20 = *(void **)(v60 + 16);
    if (v20)
    {
      v21 = *(_QWORD *)(v60 + 8);
      v22 = *(_BYTE *)v60;
      if (!v41)
        goto LABEL_25;
      v61 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
      v28 = (_QWORD *)swift_allocObject(v61, 112, 7);
      *((_OWORD *)v28 + 1) = xmmword_100E22B10;
      v62 = (void *)sub_100ACD7B4(v22, v21, v20);
      v63 = objc_msgSend(v62, "description");

      v64 = static String._unconditionallyBridgeFromObjectiveC(_:)(v63);
      v66 = v65;

      v67 = sub_100C73E1C(v64, v66);
      v69 = v68;
      swift_bridgeObjectRelease();
      v28[7] = &type metadata for String;
      v70 = sub_10001AA00();
      v28[4] = v67;
      v28[5] = v69;
      v28[12] = &type metadata for String;
      v28[13] = v70;
      v28[8] = v70;
      v28[9] = v40;
      v28[10] = v41;
      v71 = 0xD00000000000002DLL;
      v72 = "ALERT_ITEM_FOLLOWING_WITH_HANDLE_NAME_HAWKEYE";
    }
    else
    {
      if (!v41)
      {
LABEL_29:
        v71 = 0xD000000000000029;
        v83 = 0x8000000100ECB510;
        v28 = _swiftEmptyArrayStorage;
        goto LABEL_30;
      }
      v84 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
      v28 = (_QWORD *)swift_allocObject(v84, 72, 7);
      *((_OWORD *)v28 + 1) = xmmword_100E22B00;
      v28[7] = &type metadata for String;
      v28[8] = sub_10001AA00();
      v28[4] = v40;
      v28[5] = v41;
      v71 = 0xD000000000000021;
      v72 = "ALERT_ITEM_FOLLOWING_NAME_HAWKEYE";
    }
    v83 = (unint64_t)(v72 - 32) | 0x8000000000000000;
LABEL_30:
    v73 = v92;
    goto LABEL_31;
  }
  v23 = v1 + v16[12];
  v24 = *(void **)(v23 + 16);
  if (v24)
  {
    v25 = *(_QWORD *)(v23 + 8);
    v26 = *(_BYTE *)v23;
    v27 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v28 = (_QWORD *)swift_allocObject(v27, 72, 7);
    *((_OWORD *)v28 + 1) = xmmword_100E22B00;
    v29 = (void *)sub_100ACD7B4(v26, v25, v24);
    v30 = objc_msgSend(v29, "description");

    v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(v30);
    v33 = v32;

    v34 = sub_100C73E1C(v31, v33);
    v36 = v35;
    swift_bridgeObjectRelease();
    v28[7] = &type metadata for String;
    v28[8] = sub_10001AA00();
    v28[4] = v34;
    v28[5] = v36;
    v37 = 0xD000000000000025;
    v38 = 0x8000000100ECB600;
  }
  else
  {
    v37 = 0xD000000000000019;
    v38 = 0x8000000100ECB5E0;
    v28 = _swiftEmptyArrayStorage;
  }
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v13 + 104))(v15, enum case for LocalizationUtility.Table.default(_:), v12);
  v44 = static LocalizationUtility.localizedString(key:table:)(v37, v38, v15);
  v46 = v45;
  swift_bridgeObjectRelease();
  (*(void (**)(_BYTE *, uint64_t))(v13 + 8))(v15, v12);
LABEL_32:
  v86 = String.init(format:arguments:)(v44, v46, v28);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v86;
}

uint64_t sub_1001DB970()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unsigned int v15;
  char v16;
  uint64_t v18;

  v1 = sub_10001A9A8(&qword_101115E60);
  __chkstk_darwin(v1);
  v3 = (char *)&v18 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_10001A9A8((uint64_t *)&unk_10111C0A0);
  __chkstk_darwin(v4);
  v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for AccessoryProductInfo(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for WildModeAssociationRecord(0);
  sub_10000F9B8(v0 + *(int *)(v11 + 60), (uint64_t)v6, (uint64_t *)&unk_10111C0A0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    sub_100004048((uint64_t)v6, (uint64_t *)&unk_10111C0A0);
    sub_10000F9B8(v0 + *(int *)(v11 + 56), (uint64_t)v3, &qword_101115E60);
    v12 = type metadata accessor for AccessoryMetadata(0);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 48))(v3, 1, v12) == 1)
    {
      sub_100004048((uint64_t)v3, &qword_101115E60);
      return 0;
    }
    else
    {
      v14 = &v3[*(int *)(v12 + 48)];
      v15 = *(_DWORD *)v14;
      v16 = v14[4];
      sub_1000126B0((uint64_t)v3, type metadata accessor for AccessoryMetadata);
      if ((v16 & 1) != 0)
        return 0;
      else
        return (v15 >> 8) & 1;
    }
  }
  else
  {
    sub_1000126EC((uint64_t)v6, (uint64_t)v10, type metadata accessor for AccessoryProductInfo);
    v13 = (*(_DWORD *)&v10[*(int *)(v7 + 84)] >> 8) & 1;
    sub_1000126B0((uint64_t)v10, type metadata accessor for AccessoryProductInfo);
  }
  return v13;
}

BOOL sub_1001DBB5C()
{
  uint64_t v0;
  int *v1;
  _BYTE *v2;

  v1 = (int *)type metadata accessor for WildModeAssociationRecord(0);
  v2 = (_BYTE *)(v0 + v1[22]);
  if ((v2[1] & 1) != 0)
  {
    if ((*(_BYTE *)(v0 + v1[21]) & 1) != 0)
      return 0;
    return (*(_BYTE *)(v0 + v1[13]) & 0xFD) != 4;
  }
  if ((*(_BYTE *)(v0 + v1[21]) & 1) == 0)
    return (*(_BYTE *)(v0 + v1[13]) & 0xFD) != 4;
  return *v2 == 1;
}

uint64_t sub_1001DBBCC()
{
  uint64_t v0;
  int *v1;
  _BYTE *v2;

  v1 = (int *)type metadata accessor for WildModeAssociationRecord(0);
  v2 = (_BYTE *)(v0 + v1[22]);
  if (v2[1] == 1)
  {
    if ((*(_BYTE *)(v0 + v1[21]) & 1) != 0)
      return 6;
    return *(unsigned __int8 *)(v0 + v1[13]);
  }
  if ((*(_BYTE *)(v0 + v1[21]) & 1) == 0)
    return *(unsigned __int8 *)(v0 + v1[13]);
  if (*v2 == 1)
    return 5;
  return 6;
}

uint64_t sub_1001DBC34@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  int *v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = (int *)type metadata accessor for WildModeAssociationRecord(0);
  v4 = (_BYTE *)(v1 + v3[22]);
  if ((v4[1] & 1) != 0)
  {
    if ((*(_BYTE *)(v1 + v3[21]) & 1) != 0)
      goto LABEL_9;
  }
  else if ((*(_BYTE *)(v1 + v3[21]) & 1) != 0)
  {
    if (*v4 != 1)
    {
LABEL_9:
      v12 = v1 + v3[7];
      v13 = type metadata accessor for MACAddress(0);
      v14 = *(_QWORD *)(v13 - 8);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16))(a1, v12, v13);
      v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
      v7 = a1;
      v8 = 0;
      v5 = v13;
      return v6(v7, v8, 1, v5);
    }
LABEL_8:
    v9 = MACAddress.data.getter(v3);
    return MACAddress.init(addressToSanitize:type:)(v9, v10, 1);
  }
  if (*(_BYTE *)(v1 + v3[13]) != 4)
    goto LABEL_8;
  v5 = type metadata accessor for MACAddress(0);
  v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56);
  v7 = a1;
  v8 = 1;
  return v6(v7, v8, 1, v5);
}

unint64_t sub_1001DBD24()
{
  unint64_t result;

  result = qword_1010F25B0;
  if (!qword_1010F25B0)
  {
    result = swift_getWitnessTable(byte_100E2C9AC, &type metadata for UnauthorizedTrackingType);
    atomic_store(result, (unint64_t *)&qword_1010F25B0);
  }
  return result;
}

unint64_t sub_1001DBD68()
{
  unint64_t result;
  uint64_t v1;
  unint64_t v2;

  result = qword_1010F25C0;
  if (!qword_1010F25C0)
  {
    v1 = sub_10001F784(&qword_1010F25B8);
    v2 = sub_1001BBFE0();
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <A> A?, v1, &v2);
    atomic_store(result, (unint64_t *)&qword_1010F25C0);
  }
  return result;
}

uint64_t sub_1001DBDCC(unint64_t *a1, unint64_t *a2, uint64_t a3, const char *a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;

  result = *a1;
  if (!result)
  {
    v9 = sub_10001F784(&qword_1010F2558);
    v10 = sub_100006204(a2, type metadata accessor for WildModeTrackingLocation, a3);
    result = swift_getWitnessTable(a4, v9, &v10);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1001DBE50()
{
  unint64_t result;

  result = qword_1010F25D8;
  if (!qword_1010F25D8)
  {
    result = swift_getWitnessTable(asc_100E2C95C, &type metadata for WildModeAlertState);
    atomic_store(result, (unint64_t *)&qword_1010F25D8);
  }
  return result;
}

unint64_t sub_1001DBE94()
{
  unint64_t result;

  result = qword_1010F25E0;
  if (!qword_1010F25E0)
  {
    result = swift_getWitnessTable(a1_0, &type metadata for Type18Status.DeviceType);
    atomic_store(result, (unint64_t *)&qword_1010F25E0);
  }
  return result;
}

unint64_t sub_1001DBED8()
{
  unint64_t result;

  result = qword_1010F25F8;
  if (!qword_1010F25F8)
  {
    result = swift_getWitnessTable(aU_2, &type metadata for WildModeObservationState);
    atomic_store(result, (unint64_t *)&qword_1010F25F8);
  }
  return result;
}

unint64_t sub_1001DBF1C()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1010F2600;
  if (!qword_1010F2600)
  {
    v1 = sub_10001F784(&qword_1010F2598);
    v2[0] = sub_1001DBED8();
    v2[1] = sub_100006204((unint64_t *)&unk_1010ED6F0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> [A : B], v1, v2);
    atomic_store(result, (unint64_t *)&qword_1010F2600);
  }
  return result;
}

uint64_t sub_1001DBFA0(double *a1, double *a2)
{
  uint64_t v4;

  if (*a1 != *a2 || a1[1] != a2[1] || a1[2] != a2[2])
    return 0;
  v4 = *(int *)(type metadata accessor for WildModeTrackingLocation(0) + 28);
  return static Date.== infix(_:_:)((char *)a1 + v4, (char *)a2 + v4);
}

BOOL sub_1001DC014(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int (*v66)(uint64_t, uint64_t, uint64_t);
  uint64_t *v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  char v71;
  void (*v72)(char *, uint64_t);
  int *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  char v88;
  void (*v89)(char *, uint64_t);
  uint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char v100;
  _BOOL8 result;
  uint64_t v102;
  int v103;
  int v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unsigned int (*v108)(uint64_t, uint64_t, uint64_t);
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unsigned int (*v118)(uint64_t, uint64_t, uint64_t);
  uint64_t v119;
  uint64_t v120;
  char v121;
  uint64_t v122;
  int v123;
  int v124;
  char v125;
  int *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  char v136;
  void (*v137)(char *, uint64_t);
  int *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  char *v145;
  uint64_t v146;
  uint64_t v147;
  char v148;
  void (*v149)(char *, uint64_t);
  uint64_t v150;
  uint64_t v151;
  unint64_t v152;
  uint64_t *v153;
  unint64_t v154;
  uint64_t v155;
  uint64_t v156;
  char v157;
  char v158;
  uint64_t v159;
  int v160;
  int v161;
  uint64_t v162;
  uint64_t v163;
  int *v164;
  BOOL v165;
  char v166;
  uint64_t v167;
  unsigned __int8 *v168;
  unsigned __int8 *v169;
  char v170;
  uint64_t v171;
  uint64_t v172;
  int *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  char *v197;
  char *v198;
  char *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  char *v207;

  v4 = type metadata accessor for AccessoryProductInfo(0);
  v188 = *(_QWORD *)(v4 - 8);
  v189 = v4;
  __chkstk_darwin(v4);
  v184 = (uint64_t)&v171 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v187 = sub_10001A9A8(&qword_1010F2608);
  __chkstk_darwin(v187);
  v191 = (uint64_t)&v171 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10001A9A8((uint64_t *)&unk_10111C0A0);
  v8 = __chkstk_darwin(v7);
  v186 = (uint64_t)&v171 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v8);
  v192 = (uint64_t)&v171 - v11;
  __chkstk_darwin(v10);
  v193 = (uint64_t)&v171 - v12;
  v200 = type metadata accessor for AccessoryMetadata(0);
  v195 = *(_QWORD *)(v200 - 8);
  __chkstk_darwin(v200);
  v185 = (uint64_t)&v171 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v194 = sub_10001A9A8(&qword_1010F2610);
  __chkstk_darwin(v194);
  v196 = (uint64_t)&v171 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_10001A9A8(&qword_101115E60);
  v16 = __chkstk_darwin(v15);
  v190 = (uint64_t)&v171 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v16);
  v198 = (char *)&v171 - v19;
  __chkstk_darwin(v18);
  v199 = (char *)&v171 - v20;
  v21 = type metadata accessor for Date(0);
  v204 = *(_QWORD *)(v21 - 8);
  v205 = v21;
  __chkstk_darwin(v21);
  v197 = (char *)&v171 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = sub_10001A9A8(&qword_1010ED570);
  v24 = __chkstk_darwin(v23);
  v179 = (uint64_t)&v171 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = __chkstk_darwin(v24);
  v183 = (uint64_t)&v171 - v27;
  __chkstk_darwin(v26);
  v203 = (uint64_t)&v171 - v28;
  v29 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  v30 = __chkstk_darwin(v29);
  v176 = (uint64_t)&v171 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = __chkstk_darwin(v30);
  v177 = (uint64_t)&v171 - v33;
  v34 = __chkstk_darwin(v32);
  v178 = (uint64_t)&v171 - v35;
  v36 = __chkstk_darwin(v34);
  v180 = (uint64_t)&v171 - v37;
  v38 = __chkstk_darwin(v36);
  v181 = (uint64_t)&v171 - v39;
  v40 = __chkstk_darwin(v38);
  v182 = (uint64_t)&v171 - v41;
  v42 = __chkstk_darwin(v40);
  v201 = (uint64_t)&v171 - v43;
  v44 = __chkstk_darwin(v42);
  v206 = (uint64_t)&v171 - v45;
  __chkstk_darwin(v44);
  v202 = (uint64_t)&v171 - v46;
  v47 = type metadata accessor for UUID(0);
  v48 = *(_QWORD *)(v47 - 8);
  __chkstk_darwin(v47);
  v207 = (char *)&v171 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = sub_10001A9A8((uint64_t *)&unk_10110EE90);
  __chkstk_darwin(v50);
  v52 = (char *)&v171 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0);
  v53 = sub_10001A9A8(&qword_1010ED860);
  v54 = __chkstk_darwin(v53);
  v56 = (char *)&v171 - ((v55 + 15) & 0xFFFFFFFFFFFFFFF0);
  v57 = __chkstk_darwin(v54);
  v59 = (char *)&v171 - v58;
  __chkstk_darwin(v57);
  v61 = (char *)&v171 - v60;
  if ((static UUID.== infix(_:_:)(a1, a2) & 1) == 0)
    return 0;
  v172 = v23;
  v62 = type metadata accessor for WildModeAssociationRecord(0);
  v63 = *(int *)(v62 + 20);
  v175 = a1;
  sub_10000F9B8(a1 + v63, (uint64_t)v61, &qword_1010ED860);
  v173 = (int *)v62;
  v64 = *(int *)(v62 + 20);
  v174 = a2;
  sub_10000F9B8(a2 + v64, (uint64_t)v59, &qword_1010ED860);
  v65 = (uint64_t)&v52[*(int *)(v50 + 48)];
  sub_10000F9B8((uint64_t)v61, (uint64_t)v52, &qword_1010ED860);
  sub_10000F9B8((uint64_t)v59, v65, &qword_1010ED860);
  v66 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v48 + 48);
  if (v66((uint64_t)v52, 1, v47) == 1)
  {
    sub_100004048((uint64_t)v59, &qword_1010ED860);
    sub_100004048((uint64_t)v61, &qword_1010ED860);
    if (v66(v65, 1, v47) == 1)
    {
      sub_100004048((uint64_t)v52, &qword_1010ED860);
      goto LABEL_10;
    }
LABEL_7:
    v67 = (uint64_t *)&unk_10110EE90;
    v68 = (uint64_t)v52;
    goto LABEL_8;
  }
  sub_10000F9B8((uint64_t)v52, (uint64_t)v56, &qword_1010ED860);
  if (v66(v65, 1, v47) == 1)
  {
    sub_100004048((uint64_t)v59, &qword_1010ED860);
    sub_100004048((uint64_t)v61, &qword_1010ED860);
    (*(void (**)(char *, uint64_t))(v48 + 8))(v56, v47);
    goto LABEL_7;
  }
  v69 = v207;
  (*(void (**)(char *, uint64_t, uint64_t))(v48 + 32))(v207, v65, v47);
  v70 = sub_100006204(&qword_1010EE520, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v71 = dispatch thunk of static Equatable.== infix(_:_:)(v56, v69, v47, v70);
  v72 = *(void (**)(char *, uint64_t))(v48 + 8);
  v72(v69, v47);
  sub_100004048((uint64_t)v59, &qword_1010ED860);
  sub_100004048((uint64_t)v61, &qword_1010ED860);
  v72(v56, v47);
  sub_100004048((uint64_t)v52, &qword_1010ED860);
  if ((v71 & 1) == 0)
    return 0;
LABEL_10:
  v73 = v173;
  v74 = v175;
  v75 = v174;
  if (*(unsigned __int8 *)(v175 + v173[6]) != *(unsigned __int8 *)(v174 + v173[6])
    || (static MACAddress.== infix(_:_:)(v175 + v173[7], v174 + v173[7]) & 1) == 0
    || (sub_100248530(*(_QWORD *)(v74 + v73[8]), *(_QWORD *)(v75 + v73[8])) & 1) == 0
    || *(unsigned __int8 *)(v74 + v73[9]) != *(unsigned __int8 *)(v75 + v73[9])
    || (static Date.== infix(_:_:)(v74 + v73[10], v75 + v73[10]) & 1) == 0)
  {
    return 0;
  }
  v76 = v202;
  sub_10000F9B8(v74 + v73[11], v202, (uint64_t *)&unk_1010EA690);
  v77 = v206;
  sub_10000F9B8(v75 + v73[11], v206, (uint64_t *)&unk_1010EA690);
  v78 = v203;
  v79 = v203 + *(int *)(v172 + 48);
  sub_10000F9B8(v76, v203, (uint64_t *)&unk_1010EA690);
  sub_10000F9B8(v77, v79, (uint64_t *)&unk_1010EA690);
  v80 = v204;
  v81 = v205;
  v82 = *(char **)(v204 + 48);
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v82)(v78, 1, v205) == 1)
  {
    sub_100004048(v77, (uint64_t *)&unk_1010EA690);
    sub_100004048(v76, (uint64_t *)&unk_1010EA690);
    if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v82)(v79, 1, v81) == 1)
    {
      v207 = v82;
      sub_100004048(v78, (uint64_t *)&unk_1010EA690);
      goto LABEL_22;
    }
LABEL_20:
    v67 = &qword_1010ED570;
    v68 = v78;
    goto LABEL_8;
  }
  v83 = v80;
  v84 = v201;
  sub_10000F9B8(v78, v201, (uint64_t *)&unk_1010EA690);
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v82)(v79, 1, v81) == 1)
  {
    sub_100004048(v206, (uint64_t *)&unk_1010EA690);
    sub_100004048(v76, (uint64_t *)&unk_1010EA690);
    (*(void (**)(uint64_t, uint64_t))(v83 + 8))(v84, v81);
    goto LABEL_20;
  }
  v207 = v82;
  v85 = v76;
  v86 = v197;
  (*(void (**)(char *, uint64_t, uint64_t))(v83 + 32))(v197, v79, v81);
  v87 = sub_100006204(&qword_1010EDA20, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  v88 = dispatch thunk of static Equatable.== infix(_:_:)(v84, v86, v81, v87);
  v89 = *(void (**)(char *, uint64_t))(v83 + 8);
  v89(v86, v81);
  sub_100004048(v206, (uint64_t *)&unk_1010EA690);
  sub_100004048(v85, (uint64_t *)&unk_1010EA690);
  v89((char *)v84, v81);
  v74 = v175;
  sub_100004048(v78, (uint64_t *)&unk_1010EA690);
  if ((v88 & 1) == 0)
    return 0;
LABEL_22:
  v90 = v73[12];
  v91 = (_QWORD *)(v74 + v90);
  v92 = *(_QWORD *)(v74 + v90 + 16);
  v93 = (_QWORD *)(v75 + v90);
  v94 = v93[2];
  if (!v92)
  {
    v96 = (uint64_t)v199;
    v95 = v200;
    v97 = (uint64_t)v198;
    if (v94)
      return 0;
LABEL_30:
    v102 = v73[13];
    v103 = *(unsigned __int8 *)(v74 + v102);
    v104 = *(unsigned __int8 *)(v75 + v102);
    if (v103 == 4)
    {
      if (v104 != 4)
        return 0;
    }
    else
    {
      result = 0;
      if (v104 == 4 || v103 != v104)
        return result;
    }
    sub_10000F9B8(v74 + v73[14], v96, &qword_101115E60);
    sub_10000F9B8(v75 + v73[14], v97, &qword_101115E60);
    v105 = v196;
    v106 = v196 + *(int *)(v194 + 48);
    sub_10000F9B8(v96, v196, &qword_101115E60);
    v107 = v105;
    sub_10000F9B8(v97, v106, &qword_101115E60);
    v108 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v195 + 48);
    if (v108(v107, 1, v95) == 1)
    {
      sub_100004048(v97, &qword_101115E60);
      sub_100004048(v96, &qword_101115E60);
      if (v108(v106, 1, v95) == 1)
      {
        sub_100004048(v196, &qword_101115E60);
        goto LABEL_42;
      }
    }
    else
    {
      v109 = v107;
      v110 = v190;
      sub_10000F9B8(v109, v190, &qword_101115E60);
      if (v108(v106, 1, v95) != 1)
      {
        v111 = v185;
        sub_1000126EC(v106, v185, type metadata accessor for AccessoryMetadata);
        v112 = sub_100134E68(v110, v111);
        sub_1000126B0(v111, type metadata accessor for AccessoryMetadata);
        sub_100004048(v97, &qword_101115E60);
        sub_100004048(v96, &qword_101115E60);
        sub_1000126B0(v110, type metadata accessor for AccessoryMetadata);
        sub_100004048(v196, &qword_101115E60);
        if ((v112 & 1) == 0)
          return 0;
LABEL_42:
        v113 = v193;
        sub_10000F9B8(v175 + v73[15], v193, (uint64_t *)&unk_10111C0A0);
        v114 = v192;
        sub_10000F9B8(v75 + v73[15], v192, (uint64_t *)&unk_10111C0A0);
        v115 = v191;
        v116 = v191 + *(int *)(v187 + 48);
        sub_10000F9B8(v113, v191, (uint64_t *)&unk_10111C0A0);
        sub_10000F9B8(v114, v116, (uint64_t *)&unk_10111C0A0);
        v117 = v189;
        v118 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v188 + 48);
        if (v118(v115, 1, v189) == 1)
        {
          sub_100004048(v192, (uint64_t *)&unk_10111C0A0);
          sub_100004048(v193, (uint64_t *)&unk_10111C0A0);
          if (v118(v116, 1, v117) == 1)
          {
            sub_100004048(v115, (uint64_t *)&unk_10111C0A0);
            goto LABEL_49;
          }
        }
        else
        {
          sub_10000F9B8(v115, v186, (uint64_t *)&unk_10111C0A0);
          if (v118(v116, 1, v117) != 1)
          {
            v119 = v184;
            sub_1000126EC(v116, v184, type metadata accessor for AccessoryProductInfo);
            v120 = v186;
            v121 = sub_100D18118(v186, v119);
            sub_1000126B0(v119, type metadata accessor for AccessoryProductInfo);
            sub_100004048(v192, (uint64_t *)&unk_10111C0A0);
            sub_100004048(v193, (uint64_t *)&unk_10111C0A0);
            sub_1000126B0(v120, type metadata accessor for AccessoryProductInfo);
            sub_100004048(v191, (uint64_t *)&unk_10111C0A0);
            if ((v121 & 1) == 0)
              return 0;
LABEL_49:
            v122 = v173[16];
            v123 = *(unsigned __int8 *)(v175 + v122);
            v124 = *(unsigned __int8 *)(v174 + v122);
            if (v123 == 8)
            {
              if (v124 != 8)
                return 0;
            }
            else
            {
              if (v124 == 8)
                return 0;
              sub_10051218C(v123);
              if ((v125 & 1) == 0)
                return 0;
            }
            if ((sub_1003257C4(*(_QWORD *)(v175 + v173[17]), *(_QWORD *)(v174 + v173[17])) & 1) == 0)
              return 0;
            v126 = v173;
            v127 = v182;
            sub_10000F9B8(v175 + v173[18], v182, (uint64_t *)&unk_1010EA690);
            v128 = v181;
            sub_10000F9B8(v174 + v126[18], v181, (uint64_t *)&unk_1010EA690);
            v129 = v183;
            v130 = v183 + *(int *)(v172 + 48);
            sub_10000F9B8(v127, v183, (uint64_t *)&unk_1010EA690);
            sub_10000F9B8(v128, v130, (uint64_t *)&unk_1010EA690);
            if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v207)(v129, 1, v205) == 1)
            {
              sub_100004048(v181, (uint64_t *)&unk_1010EA690);
              sub_100004048(v182, (uint64_t *)&unk_1010EA690);
              if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v207)(v130, 1, v205) == 1)
              {
                sub_100004048(v183, (uint64_t *)&unk_1010EA690);
LABEL_62:
                v138 = v173;
                v139 = v178;
                sub_10000F9B8(v175 + v173[19], v178, (uint64_t *)&unk_1010EA690);
                v140 = v177;
                sub_10000F9B8(v174 + v138[19], v177, (uint64_t *)&unk_1010EA690);
                v141 = v179;
                v142 = v179 + *(int *)(v172 + 48);
                sub_10000F9B8(v139, v179, (uint64_t *)&unk_1010EA690);
                sub_10000F9B8(v140, v142, (uint64_t *)&unk_1010EA690);
                if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v207)(v141, 1, v205) == 1)
                {
                  sub_100004048(v177, (uint64_t *)&unk_1010EA690);
                  sub_100004048(v178, (uint64_t *)&unk_1010EA690);
                  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v207)(v142, 1, v205) == 1)
                  {
                    sub_100004048(v179, (uint64_t *)&unk_1010EA690);
LABEL_69:
                    v150 = v173[20];
                    v151 = v175 + v150;
                    v152 = *(_QWORD *)(v175 + v150 + 8);
                    v153 = (uint64_t *)(v174 + v150);
                    v154 = v153[1];
                    if (v152 >> 60 == 11)
                    {
                      if (v154 >> 60 != 11)
                        return 0;
                    }
                    else if (v152 >> 60 == 15)
                    {
                      if (v154 >> 60 != 15)
                        return 0;
                    }
                    else
                    {
                      if (((v154 >> 60) | 4) == 0xF)
                        return 0;
                      v155 = *(_QWORD *)v151;
                      v156 = *v153;
                      sub_1001DD474(*(_QWORD *)v151, *(_QWORD *)(v151 + 8));
                      sub_1001DD474(v156, v154);
                      _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v155, v152);
                      v158 = v157;
                      sub_1001DAFB8(v156, v154);
                      sub_1001DAFB8(v155, v152);
                      if ((v158 & 1) == 0)
                        return 0;
                    }
                    v159 = v173[21];
                    v160 = *(unsigned __int8 *)(v175 + v159);
                    v161 = *(unsigned __int8 *)(v174 + v159);
                    if (v160 == 2)
                    {
                      v162 = v174;
                      v163 = v175;
                      v164 = v173;
                      if (v161 != 2)
                        return 0;
                    }
                    else
                    {
                      result = 0;
                      v165 = (v160 & 1) == 0;
                      if (v161 == 2)
                        return result;
                      v166 = v165 ^ v161;
                      v162 = v174;
                      v163 = v175;
                      v164 = v173;
                      if ((v166 & 1) == 0)
                        return result;
                    }
                    v167 = v164[22];
                    v168 = (unsigned __int8 *)(v163 + v167);
                    v169 = (unsigned __int8 *)(v162 + v167);
                    v170 = v169[1];
                    if ((v168[1] & 1) == 0)
                    {
                      if (*v168 != *v169)
                        v170 = 1;
                      return (v170 & 1) == 0;
                    }
                    return (v169[1] & 1) != 0;
                  }
                }
                else
                {
                  sub_10000F9B8(v179, v176, (uint64_t *)&unk_1010EA690);
                  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v207)(v142, 1, v205) != 1)
                  {
                    v143 = v204;
                    v144 = v205;
                    v145 = v197;
                    (*(void (**)(char *, uint64_t, uint64_t))(v204 + 32))(v197, v142, v205);
                    v146 = sub_100006204(&qword_1010EDA20, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
                    v147 = v176;
                    v148 = dispatch thunk of static Equatable.== infix(_:_:)(v176, v145, v144, v146);
                    v149 = *(void (**)(char *, uint64_t))(v143 + 8);
                    v149(v145, v144);
                    sub_100004048(v177, (uint64_t *)&unk_1010EA690);
                    sub_100004048(v178, (uint64_t *)&unk_1010EA690);
                    v149((char *)v147, v144);
                    sub_100004048(v179, (uint64_t *)&unk_1010EA690);
                    if ((v148 & 1) == 0)
                      return 0;
                    goto LABEL_69;
                  }
                  sub_100004048(v177, (uint64_t *)&unk_1010EA690);
                  sub_100004048(v178, (uint64_t *)&unk_1010EA690);
                  (*(void (**)(uint64_t, uint64_t))(v204 + 8))(v176, v205);
                }
                v67 = &qword_1010ED570;
                v68 = v179;
LABEL_8:
                sub_100004048(v68, v67);
                return 0;
              }
            }
            else
            {
              sub_10000F9B8(v183, v180, (uint64_t *)&unk_1010EA690);
              if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v207)(v130, 1, v205) != 1)
              {
                v131 = v204;
                v132 = v205;
                v133 = v197;
                (*(void (**)(char *, uint64_t, uint64_t))(v204 + 32))(v197, v130, v205);
                v134 = sub_100006204(&qword_1010EDA20, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
                v135 = v180;
                v136 = dispatch thunk of static Equatable.== infix(_:_:)(v180, v133, v132, v134);
                v137 = *(void (**)(char *, uint64_t))(v131 + 8);
                v137(v133, v132);
                sub_100004048(v181, (uint64_t *)&unk_1010EA690);
                sub_100004048(v182, (uint64_t *)&unk_1010EA690);
                v137((char *)v135, v132);
                sub_100004048(v183, (uint64_t *)&unk_1010EA690);
                if ((v136 & 1) == 0)
                  return 0;
                goto LABEL_62;
              }
              sub_100004048(v181, (uint64_t *)&unk_1010EA690);
              sub_100004048(v182, (uint64_t *)&unk_1010EA690);
              (*(void (**)(uint64_t, uint64_t))(v204 + 8))(v180, v205);
            }
            v67 = &qword_1010ED570;
            v68 = v183;
            goto LABEL_8;
          }
          sub_100004048(v192, (uint64_t *)&unk_10111C0A0);
          sub_100004048(v193, (uint64_t *)&unk_10111C0A0);
          sub_1000126B0(v186, type metadata accessor for AccessoryProductInfo);
          v115 = v191;
        }
        v67 = &qword_1010F2608;
        v68 = v115;
        goto LABEL_8;
      }
      sub_100004048(v97, &qword_101115E60);
      sub_100004048(v96, &qword_101115E60);
      sub_1000126B0(v110, type metadata accessor for AccessoryMetadata);
    }
    v67 = &qword_1010F2610;
    v68 = v196;
    goto LABEL_8;
  }
  v96 = (uint64_t)v199;
  v95 = v200;
  v97 = (uint64_t)v198;
  if (!v94 || *v93 != *v91)
    return 0;
  v98 = v91[1];
  v99 = v93[1];
  if (v98 == v99 && v92 == v94)
    goto LABEL_30;
  v100 = _stringCompareWithSmolCheck(_:_:expecting:)(v98, v92, v99, v94, 0);
  result = 0;
  if ((v100 & 1) != 0)
    goto LABEL_30;
  return result;
}

uint64_t sub_1001DD474(uint64_t result, unint64_t a2)
{
  if (((a2 >> 60) | 4) != 0xF)
    return sub_10001BBBC(result, a2);
  return result;
}

uint64_t *destroy for WildModeAssociationRecord.AdvertisementType(uint64_t *result)
{
  unint64_t v1;

  v1 = result[1];
  if ((v1 & 0x3000000000000000) == 0)
    return (uint64_t *)sub_10001BC14(*result, v1);
  return result;
}

uint64_t _s12searchpartyd25WildModeAssociationRecordV17AdvertisementTypeOwCP_0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  if ((v3 & 0x3000000000000000) != 0)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    v4 = *a2;
    sub_10001BBBC(*a2, a2[1]);
    *(_QWORD *)a1 = v4;
    *(_QWORD *)(a1 + 8) = v3;
  }
  return a1;
}

uint64_t *assignWithCopy for WildModeAssociationRecord.AdvertisementType(uint64_t *a1, uint64_t *a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v4 = a1[1];
  v5 = a2[1];
  v6 = v5 & 0x3000000000000000;
  if ((v4 & 0x3000000000000000) == 0)
  {
    if (!v6)
    {
      v9 = *a2;
      sub_10001BBBC(v9, v5);
      v10 = *a1;
      v11 = a1[1];
      *a1 = v9;
      a1[1] = v5;
      sub_10001BC14(v10, v11);
      return a1;
    }
    sub_10001BC14(*a1, v4);
    goto LABEL_6;
  }
  if (v6)
  {
LABEL_6:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  v7 = *a2;
  sub_10001BBBC(v7, v5);
  *a1 = v7;
  a1[1] = v5;
  return a1;
}

uint64_t *assignWithTake for WildModeAssociationRecord.AdvertisementType(uint64_t *a1, uint64_t *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v4 = a1[1];
  if ((v4 & 0x3000000000000000) == 0)
  {
    v5 = a2[1];
    if ((v5 & 0x3000000000000000) == 0)
    {
      v7 = *a1;
      *a1 = *a2;
      a1[1] = v5;
      sub_10001BC14(v7, v4);
      return a1;
    }
    sub_10001BC14(*a1, v4);
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  return a1;
}

uint64_t getEnumTagSinglePayload for WildModeAssociationRecord.AdvertisementType(uint64_t a1, unsigned int a2)
{
  uint64_t v3;
  unsigned int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xB && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 11);
  v3 = *(_QWORD *)(a1 + 8) >> 60;
  if (((4 * (_DWORD)v3) & 0xC) != 0)
    v4 = 16 - ((4 * v3) & 0xC | (v3 >> 2));
  else
    v4 = 0;
  if (v4 >= 3)
    return v4 - 2;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for WildModeAssociationRecord.AdvertisementType(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xA)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 11;
    if (a3 >= 0xB)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0xB)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = (unint64_t)((4 * (14 - a2)) | ((14 - a2) >> 2)) << 60;
    }
  }
  return result;
}

uint64_t sub_1001DD69C(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8) >> 60;
  if (((4 * (_DWORD)v1) & 0xC) != 0)
    return 16 - ((4 * (_DWORD)v1) & 0xC | (v1 >> 2));
  else
    return 0;
}

_QWORD *sub_1001DD6C4(_QWORD *result, unsigned int a2)
{
  if (a2 > 0xC)
  {
    *result = a2 - 13;
    result[1] = 0;
  }
  else if (a2)
  {
    *result = 0;
    result[1] = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
  }
  return result;
}

ValueMetadata *type metadata accessor for WildModeAssociationRecord.AdvertisementType()
{
  return &type metadata for WildModeAssociationRecord.AdvertisementType;
}

uint64_t storeEnumTagSinglePayload for WildModeObservationState(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_1001DD750 + 4 * byte_100E2C31F[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_1001DD784 + 4 * byte_100E2C31A[v4]))();
}

uint64_t sub_1001DD784(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001DD78C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1001DD794);
  return result;
}

uint64_t sub_1001DD7A0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1001DD7A8);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_1001DD7AC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001DD7B4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for WildModeObservationState()
{
  return &type metadata for WildModeObservationState;
}

uint64_t storeEnumTagSinglePayload for WildModeAlertState(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1001DD81C + 4 * byte_100E2C329[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1001DD850 + 4 * byte_100E2C324[v4]))();
}

uint64_t sub_1001DD850(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001DD858(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1001DD860);
  return result;
}

uint64_t sub_1001DD86C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1001DD874);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1001DD878(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001DD880(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for WildModeAlertState()
{
  return &type metadata for WildModeAlertState;
}

uint64_t storeEnumTagSinglePayload for UnauthorizedTrackingType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1001DD8E8 + 4 * byte_100E2C333[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1001DD91C + 4 * byte_100E2C32E[v4]))();
}

uint64_t sub_1001DD91C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001DD924(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1001DD92CLL);
  return result;
}

uint64_t sub_1001DD938(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1001DD940);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1001DD944(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001DD94C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for UnauthorizedTrackingType()
{
  return &type metadata for UnauthorizedTrackingType;
}

uint64_t getEnumTagSinglePayload for LocationSource(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xEE)
    goto LABEL_17;
  if (a2 + 18 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 18) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 18;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 18;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 18;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x13;
  v8 = v6 - 19;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for WildModeAssociationRecord.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 18 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 18) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xEE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xED)
    return ((uint64_t (*)(void))((char *)&loc_1001DDA44 + 4 * byte_100E2C33D[v4]))();
  *a1 = a2 + 18;
  return ((uint64_t (*)(void))((char *)sub_1001DDA78 + 4 * byte_100E2C338[v4]))();
}

uint64_t sub_1001DDA78(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001DDA80(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1001DDA88);
  return result;
}

uint64_t sub_1001DDA94(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1001DDA9CLL);
  *(_BYTE *)result = a2 + 18;
  return result;
}

uint64_t sub_1001DDAA0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001DDAA8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for WildModeAssociationRecord.CodingKeys()
{
  return &type metadata for WildModeAssociationRecord.CodingKeys;
}

char *sub_1001DDAC4(char *a1, char *a2, int *a3)
{
  char *v3;
  int v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(char *, char *, uint64_t);
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, char *, uint64_t, __n128);
  __n128 v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  int *v42;
  uint64_t v43;
  unsigned int (*v44)(char *, uint64_t, int *, __n128);
  __n128 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t *v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  void (*v76)(char *, _QWORD, uint64_t, int *, __n128);
  __n128 v77;
  uint64_t v78;
  uint64_t v79;
  void (*v80)(char *, char *, uint64_t);
  uint64_t v81;
  char *v82;
  char *v83;
  int *v84;
  uint64_t v85;
  uint64_t v86;
  unsigned int (*v87)(char *, uint64_t, uint64_t, __n128);
  uint64_t v88;
  _BYTE *v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  char *v94;
  uint64_t v95;
  _QWORD *v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  _BYTE *v104;
  char *v105;
  uint64_t v106;
  _QWORD *v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unsigned int (*v112)(char *, uint64_t, uint64_t);
  __n128 v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  _BYTE *v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  _QWORD *v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  _QWORD *v125;
  char *v126;
  int *v127;
  uint64_t v128;
  unsigned int (*v129)(char *, uint64_t, int *, __n128);
  __n128 v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  char *v139;
  __n128 v140;
  _QWORD *v141;
  uint64_t v142;
  uint64_t v143;
  char *v144;
  char *v145;
  uint64_t v146;
  char *v147;
  uint64_t v148;
  uint64_t v149;
  char *v150;
  char *v151;
  uint64_t v152;
  _QWORD *v153;
  char *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  _QWORD *v158;
  char *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  char *v164;
  char *v165;
  uint64_t v166;
  char *v167;
  char *v168;
  void (*v169)(_QWORD *, _QWORD, uint64_t, int *, __n128);
  __n128 v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  _BYTE *v174;
  char *v175;
  unint64_t v176;
  uint64_t v177;
  uint64_t v178;
  _BYTE *v179;
  char *v180;
  unint64_t v181;
  uint64_t v182;
  void (*v183)(_BYTE *, char *, uint64_t);
  uint64_t v184;
  _QWORD *v185;
  char *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  _QWORD *v191;
  char *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  _BYTE *v197;
  char *v198;
  uint64_t v199;
  _BYTE *v200;
  char *v201;
  uint64_t v202;
  __n128 v203;
  uint64_t v204;
  _QWORD *v205;
  char *v206;
  uint64_t v207;
  uint64_t v208;
  _QWORD *v209;
  char *v210;
  uint64_t v211;
  void (*v212)(_BYTE *, _QWORD, uint64_t, int *, __n128);
  __n128 v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  char *v217;
  char *v218;
  __n128 v219;
  uint64_t v220;
  uint64_t v221;
  char *v222;
  char *v223;
  uint64_t v224;
  uint64_t v225;
  char *v226;
  char *v227;
  unint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v232;
  int *v233;
  _BYTE *__dst;
  char *__dsta;
  char *__dstb;
  char *v237;
  char *v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  unsigned int (*v242)(char *, uint64_t, uint64_t);
  uint64_t v243;
  char *v244;
  void (*v245)(char *, char *, uint64_t);
  uint64_t v246;
  _BYTE *v247;
  unsigned int (*v248)(char *, uint64_t, uint64_t);
  void (*v249)(char *, char *, uint64_t);
  uint64_t v250;
  uint64_t v251;

  v3 = a2;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v14 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = (char *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v6 = a3;
    v7 = type metadata accessor for UUID(0);
    v8 = *(_QWORD *)(v7 - 8);
    v9 = *(void (**)(char *, char *, uint64_t))(v8 + 16);
    v9(a1, v3, v7);
    v10 = v6[5];
    v11 = &a1[v10];
    v12 = &v3[v10];
    v245 = v9;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(&v3[v10], 1, v7))
    {
      v13 = sub_10001A9A8(&qword_1010ED860);
      memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    }
    else
    {
      v9(v11, v12, v7);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v11, 0, 1, v7);
    }
    v15 = v6[7];
    a1[v6[6]] = v3[v6[6]];
    v16 = &a1[v15];
    v17 = &v3[v15];
    v18 = type metadata accessor for MACAddress(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
    v19 = v6[8];
    v20 = v6[9];
    v21 = *(_QWORD *)&v3[v19];
    *(_QWORD *)&a1[v19] = v21;
    a1[v20] = v3[v20];
    v22 = v6[10];
    v23 = &a1[v22];
    v24 = &v3[v22];
    v25 = type metadata accessor for Date(0);
    v26 = *(_QWORD *)(v25 - 8);
    v27 = *(void (**)(char *, char *, uint64_t, __n128))(v26 + 16);
    v28 = swift_bridgeObjectRetain(v21);
    v27(v23, v24, v25, v28);
    v29 = v6[11];
    v30 = &a1[v29];
    v31 = &v3[v29];
    v251 = v25;
    v249 = (void (*)(char *, char *, uint64_t))v27;
    v250 = v26;
    v248 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48);
    if (v248(&v3[v29], 1, v25))
    {
      v32 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
      memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
    }
    else
    {
      ((void (*)(char *, char *, uint64_t))v27)(v30, v31, v25);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v30, 0, 1, v25);
    }
    v33 = v6[12];
    v34 = v6[13];
    v35 = &a1[v33];
    v36 = &v3[v33];
    *v35 = *v36;
    v37 = *((_QWORD *)v36 + 1);
    v38 = *((_QWORD *)v36 + 2);
    LOBYTE(v36) = v3[v34];
    *((_QWORD *)v35 + 1) = v37;
    *((_QWORD *)v35 + 2) = v38;
    a1[v34] = (char)v36;
    v39 = v6[14];
    v40 = &a1[v39];
    v41 = &v3[v39];
    v42 = (int *)type metadata accessor for AccessoryMetadata(0);
    v43 = *((_QWORD *)v42 - 1);
    v44 = *(unsigned int (**)(char *, uint64_t, int *, __n128))(v43 + 48);
    v45 = swift_bridgeObjectRetain(v38);
    if (v44(v41, 1, v42, v45))
    {
      v46 = sub_10001A9A8(&qword_101115E60);
      memcpy(v40, v41, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
    }
    else
    {
      v245(v40, v41, v7);
      v47 = v42[5];
      v48 = (uint64_t *)&v40[v47];
      v49 = (uint64_t *)&v41[v47];
      v50 = *v49;
      v51 = v49[1];
      sub_10001BBBC(*v49, v51);
      *v48 = v50;
      v48[1] = v51;
      v52 = v42[6];
      v53 = &v40[v52];
      v54 = &v41[v52];
      v55 = *((_QWORD *)v54 + 1);
      *(_QWORD *)v53 = *(_QWORD *)v54;
      *((_QWORD *)v53 + 1) = v55;
      v56 = v42[7];
      v57 = &v40[v56];
      v58 = &v41[v56];
      v59 = *((_QWORD *)v58 + 1);
      *(_QWORD *)v57 = *(_QWORD *)v58;
      *((_QWORD *)v57 + 1) = v59;
      *(_DWORD *)&v40[v42[8]] = *(_DWORD *)&v41[v42[8]];
      v60 = v42[9];
      v61 = &v40[v60];
      v62 = &v41[v60];
      *(_DWORD *)v61 = *(_DWORD *)v62;
      v61[4] = v62[4];
      v63 = v42[10];
      v64 = &v40[v63];
      v65 = &v41[v63];
      *(_OWORD *)v64 = *(_OWORD *)v65;
      v64[16] = v65[16];
      v66 = v42[11];
      v67 = &v40[v66];
      v68 = &v41[v66];
      v67[8] = v68[8];
      *(_QWORD *)v67 = *(_QWORD *)v68;
      v69 = v42[12];
      v70 = &v40[v69];
      v71 = &v41[v69];
      *(_DWORD *)v70 = *(_DWORD *)v71;
      v70[4] = v71[4];
      v40[v42[13]] = v41[v42[13]];
      v40[v42[14]] = v41[v42[14]];
      v72 = v42[15];
      v73 = &v40[v72];
      v74 = &v41[v72];
      v75 = *((_QWORD *)v74 + 1);
      *(_QWORD *)v73 = *(_QWORD *)v74;
      *((_QWORD *)v73 + 1) = v75;
      v76 = *(void (**)(char *, _QWORD, uint64_t, int *, __n128))(v43 + 56);
      swift_bridgeObjectRetain(v55);
      swift_bridgeObjectRetain(v59);
      v77 = swift_bridgeObjectRetain(v75);
      v76(v40, 0, 1, v42, v77);
    }
    v78 = v251;
    v80 = v249;
    v79 = v250;
    v81 = v6[15];
    v82 = &a1[v81];
    v83 = &v3[v81];
    v84 = (int *)type metadata accessor for AccessoryProductInfo(0);
    v85 = *((_QWORD *)v84 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v85 + 48))(v83, 1, v84))
    {
      v86 = sub_10001A9A8((uint64_t *)&unk_10111C0A0);
      memcpy(v82, v83, *(_QWORD *)(*(_QWORD *)(v86 - 8) + 64));
      v87 = (unsigned int (*)(char *, uint64_t, uint64_t, __n128))v248;
    }
    else
    {
      v238 = v3;
      v239 = v85;
      *(_QWORD *)v82 = *(_QWORD *)v83;
      v82[8] = v83[8];
      v88 = v84[5];
      v89 = &v82[v88];
      v90 = &v83[v88];
      v91 = type metadata accessor for ServerStatusCode(0);
      (*(void (**)(_BYTE *, char *, uint64_t))(*(_QWORD *)(v91 - 8) + 16))(v89, v90, v91);
      v82[v84[6]] = v83[v84[6]];
      v82[v84[7]] = v83[v84[7]];
      v92 = v84[8];
      v93 = &v82[v92];
      v94 = &v83[v92];
      v241 = *((_QWORD *)v94 + 1);
      *v93 = *(_QWORD *)v94;
      v93[1] = v241;
      v82[v84[9]] = v83[v84[9]];
      v82[v84[10]] = v83[v84[10]];
      v82[v84[11]] = v83[v84[11]];
      v95 = v84[12];
      v96 = &v82[v95];
      v97 = &v83[v95];
      v98 = *((_QWORD *)v97 + 1);
      *v96 = *(_QWORD *)v97;
      v96[1] = v98;
      v99 = v84[13];
      v100 = &v82[v99];
      v101 = &v83[v99];
      v102 = *((_QWORD *)v101 + 1);
      *v100 = *(_QWORD *)v101;
      v100[1] = v102;
      v103 = v84[14];
      v104 = &v82[v103];
      v105 = &v83[v103];
      *(_QWORD *)v104 = *(_QWORD *)v105;
      v104[8] = v105[8];
      v106 = v84[15];
      v107 = &v82[v106];
      v108 = &v83[v106];
      v109 = *((_QWORD *)v108 + 1);
      *v107 = *(_QWORD *)v108;
      v107[1] = v109;
      v110 = v84[16];
      __dst = &v82[v110];
      v237 = &v83[v110];
      v111 = type metadata accessor for URL(0);
      v246 = *(_QWORD *)(v111 - 8);
      v112 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v246 + 48);
      swift_bridgeObjectRetain(v241);
      swift_bridgeObjectRetain(v98);
      swift_bridgeObjectRetain(v102);
      v113 = swift_bridgeObjectRetain(v109);
      v242 = v112;
      if (((unsigned int (*)(char *, uint64_t, uint64_t, __n128))v112)(v237, 1, v111, v113))
      {
        v114 = sub_10001A9A8(&qword_1010FBA40);
        memcpy(__dst, v237, *(_QWORD *)(*(_QWORD *)(v114 - 8) + 64));
        v115 = v246;
      }
      else
      {
        v115 = v246;
        (*(void (**)(_BYTE *, char *, uint64_t))(v246 + 16))(__dst, v237, v111);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v246 + 56))(__dst, 0, 1, v111);
      }
      v116 = v84[17];
      v117 = &v82[v116];
      v118 = &v83[v116];
      v240 = v111;
      v233 = v6;
      if (v242(&v83[v116], 1, v111))
      {
        v119 = sub_10001A9A8(&qword_1010FBA40);
        memcpy(v117, v118, *(_QWORD *)(*(_QWORD *)(v119 - 8) + 64));
      }
      else
      {
        (*(void (**)(_BYTE *, char *, uint64_t))(v115 + 16))(v117, v118, v111);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v115 + 56))(v117, 0, 1, v111);
      }
      v120 = v84[18];
      v121 = &v82[v120];
      v122 = &v83[v120];
      v123 = *((_QWORD *)v122 + 1);
      *v121 = *(_QWORD *)v122;
      v121[1] = v123;
      *(_QWORD *)&v82[v84[19]] = *(_QWORD *)&v83[v84[19]];
      v124 = v84[20];
      v125 = &v82[v124];
      v126 = &v83[v124];
      v127 = (int *)type metadata accessor for AccessoryInfoResponseContent.Configuration(0);
      v128 = *((_QWORD *)v127 - 1);
      v129 = *(unsigned int (**)(char *, uint64_t, int *, __n128))(v128 + 48);
      v130 = swift_bridgeObjectRetain(v123);
      if (v129(v126, 1, v127, v130))
      {
        v131 = sub_10001A9A8(&qword_1010FBA50);
        memcpy(v125, v126, *(_QWORD *)(*(_QWORD *)(v131 - 8) + 64));
        v132 = v246;
        v6 = v233;
      }
      else
      {
        v232 = v128;
        v133 = *((_QWORD *)v126 + 1);
        *v125 = *(_QWORD *)v126;
        v125[1] = v133;
        v134 = *((_QWORD *)v126 + 3);
        v125[2] = *((_QWORD *)v126 + 2);
        v125[3] = v134;
        v135 = *((_QWORD *)v126 + 5);
        v125[4] = *((_QWORD *)v126 + 4);
        v125[5] = v135;
        *((_WORD *)v125 + 24) = *((_WORD *)v126 + 24);
        *((_BYTE *)v125 + 72) = v126[72];
        v136 = *((_QWORD *)v126 + 8);
        v125[7] = *((_QWORD *)v126 + 7);
        v125[8] = v136;
        __dsta = v126;
        v137 = v127[10];
        v138 = (char *)v125 + v137;
        v139 = &__dsta[v137];
        swift_bridgeObjectRetain(v133);
        swift_bridgeObjectRetain(v134);
        v140 = swift_bridgeObjectRetain(v135);
        v141 = v125;
        if (((unsigned int (*)(char *, uint64_t, uint64_t, __n128))v242)(v139, 1, v240, v140))
        {
          v142 = sub_10001A9A8(&qword_1010FBA40);
          memcpy(v138, v139, *(_QWORD *)(*(_QWORD *)(v142 - 8) + 64));
          v143 = v246;
        }
        else
        {
          v144 = v139;
          v143 = v246;
          (*(void (**)(char *, char *, uint64_t))(v246 + 16))(v138, v144, v240);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v246 + 56))(v138, 0, 1, v240);
        }
        v6 = v233;
        v145 = __dsta;
        v146 = v127[11];
        __dstb = (char *)v141 + v146;
        v147 = &v145[v146];
        if (((unsigned int (*)(void))v242)())
        {
          v148 = sub_10001A9A8(&qword_1010FBA40);
          memcpy(__dstb, v147, *(_QWORD *)(*(_QWORD *)(v148 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v143 + 16))(__dstb, v147, v240);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v143 + 56))(__dstb, 0, 1, v240);
        }
        v149 = v127[12];
        v150 = (char *)v141 + v149;
        v151 = &v145[v149];
        *(_QWORD *)v150 = *(_QWORD *)v151;
        v150[8] = v151[8];
        v152 = v127[13];
        v153 = (_QWORD *)((char *)v141 + v152);
        v154 = &v145[v152];
        v155 = *((_QWORD *)v154 + 1);
        *v153 = *(_QWORD *)v154;
        v153[1] = v155;
        v156 = v127[14];
        v243 = *(_QWORD *)&v145[v156];
        *(_QWORD *)((char *)v141 + v156) = v243;
        v157 = v127[15];
        v158 = (_QWORD *)((char *)v141 + v157);
        v159 = &v145[v157];
        v160 = *((_QWORD *)v159 + 1);
        *v158 = *(_QWORD *)v159;
        v158[1] = v160;
        v161 = v127[16];
        v162 = *(_QWORD *)&v145[v161];
        *(_QWORD *)((char *)v141 + v161) = v162;
        v163 = v127[17];
        v164 = (char *)v141 + v163;
        v165 = &v145[v163];
        *(_OWORD *)v164 = *(_OWORD *)v165;
        v164[16] = v165[16];
        v166 = v127[18];
        v167 = (char *)v141 + v166;
        v168 = &v145[v166];
        *(_OWORD *)v167 = *(_OWORD *)v168;
        v167[16] = v168[16];
        v169 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *, __n128))(v232 + 56);
        swift_bridgeObjectRetain(v155);
        swift_bridgeObjectRetain(v243);
        swift_bridgeObjectRetain(v160);
        v170 = swift_bridgeObjectRetain(v162);
        v169(v141, 0, 1, v127, v170);
        v132 = v246;
      }
      *(_DWORD *)&v82[v84[21]] = *(_DWORD *)&v83[v84[21]];
      v171 = v84[22];
      v172 = *(_QWORD *)&v83[v171];
      *(_QWORD *)&v82[v171] = v172;
      v173 = v84[23];
      v174 = &v82[v173];
      v175 = &v83[v173];
      v176 = *(_QWORD *)&v83[v173 + 8];
      swift_bridgeObjectRetain(v172);
      if (v176 >> 60 == 15)
      {
        *(_OWORD *)v174 = *(_OWORD *)v175;
      }
      else
      {
        v177 = *(_QWORD *)v175;
        sub_10001BBBC(v177, v176);
        *(_QWORD *)v174 = v177;
        *((_QWORD *)v174 + 1) = v176;
      }
      v178 = v84[24];
      v179 = &v82[v178];
      v180 = &v83[v178];
      v181 = *((_QWORD *)v180 + 1);
      if (v181 >> 60 == 15)
      {
        *(_OWORD *)v179 = *(_OWORD *)v180;
      }
      else
      {
        v182 = *(_QWORD *)v180;
        sub_10001BBBC(*(_QWORD *)v180, *((_QWORD *)v180 + 1));
        *(_QWORD *)v179 = v182;
        *((_QWORD *)v179 + 1) = v181;
      }
      v183 = *(void (**)(_BYTE *, char *, uint64_t))(v132 + 16);
      v183(&v82[v84[25]], &v83[v84[25]], v240);
      v183(&v82[v84[26]], &v83[v84[26]], v240);
      v183(&v82[v84[27]], &v83[v84[27]], v240);
      v183(&v82[v84[28]], &v83[v84[28]], v240);
      v183(&v82[v84[29]], &v83[v84[29]], v240);
      v183(&v82[v84[30]], &v83[v84[30]], v240);
      v184 = v84[31];
      v185 = &v82[v184];
      v186 = &v83[v184];
      v187 = *((_QWORD *)v186 + 1);
      *v185 = *(_QWORD *)v186;
      v185[1] = v187;
      v188 = v84[32];
      v189 = *(_QWORD *)&v83[v188];
      *(_QWORD *)&v82[v188] = v189;
      v190 = v84[33];
      v191 = &v82[v190];
      v192 = &v83[v190];
      v193 = *((_QWORD *)v192 + 1);
      *v191 = *(_QWORD *)v192;
      v191[1] = v193;
      v194 = v84[34];
      v195 = *(_QWORD *)&v83[v194];
      *(_QWORD *)&v82[v194] = v195;
      v196 = v84[35];
      v197 = &v82[v196];
      v198 = &v83[v196];
      *(_OWORD *)v197 = *(_OWORD *)v198;
      v197[16] = v198[16];
      v199 = v84[36];
      v200 = &v82[v199];
      v201 = &v83[v199];
      *(_OWORD *)v200 = *(_OWORD *)v201;
      v200[16] = v201[16];
      v202 = v84[37];
      v244 = &v83[v202];
      v247 = &v82[v202];
      swift_bridgeObjectRetain(v187);
      swift_bridgeObjectRetain(v189);
      swift_bridgeObjectRetain(v193);
      v203 = swift_bridgeObjectRetain(v195);
      ((void (*)(_BYTE *, char *, uint64_t, __n128))v183)(v247, v244, v240, v203);
      v183(&v82[v84[38]], &v83[v84[38]], v240);
      v183(&v82[v84[39]], &v83[v84[39]], v240);
      v183(&v82[v84[40]], &v83[v84[40]], v240);
      v183(&v82[v84[41]], &v83[v84[41]], v240);
      v183(&v82[v84[42]], &v83[v84[42]], v240);
      v82[v84[43]] = v83[v84[43]];
      v82[v84[44]] = v83[v84[44]];
      v82[v84[45]] = v83[v84[45]];
      v204 = v84[46];
      v205 = &v82[v204];
      v206 = &v83[v204];
      v207 = *((_QWORD *)v206 + 1);
      *v205 = *(_QWORD *)v206;
      v205[1] = v207;
      v208 = v84[47];
      v209 = &v82[v208];
      v210 = &v83[v208];
      v211 = *((_QWORD *)v210 + 1);
      *v209 = *(_QWORD *)v210;
      v209[1] = v211;
      v212 = *(void (**)(_BYTE *, _QWORD, uint64_t, int *, __n128))(v239 + 56);
      swift_bridgeObjectRetain(v207);
      v213 = swift_bridgeObjectRetain(v211);
      v212(v82, 0, 1, v84, v213);
      v78 = v251;
      v80 = v249;
      v79 = v250;
      v87 = (unsigned int (*)(char *, uint64_t, uint64_t, __n128))v248;
      v3 = v238;
    }
    v214 = v6[17];
    a1[v6[16]] = v3[v6[16]];
    v215 = *(_QWORD *)&v3[v214];
    *(_QWORD *)&a1[v214] = v215;
    v216 = v6[18];
    v217 = &a1[v216];
    v218 = &v3[v216];
    v219 = swift_bridgeObjectRetain(v215);
    if (v87(v218, 1, v78, v219))
    {
      v220 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
      memcpy(v217, v218, *(_QWORD *)(*(_QWORD *)(v220 - 8) + 64));
    }
    else
    {
      v80(v217, v218, v78);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v79 + 56))(v217, 0, 1, v78);
    }
    v221 = v6[19];
    v222 = &a1[v221];
    v223 = &v3[v221];
    if (((unsigned int (*)(char *, uint64_t, uint64_t))v87)(&v3[v221], 1, v78))
    {
      v224 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
      memcpy(v222, v223, *(_QWORD *)(*(_QWORD *)(v224 - 8) + 64));
    }
    else
    {
      v80(v222, v223, v78);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v79 + 56))(v222, 0, 1, v78);
    }
    v225 = v6[20];
    v226 = &a1[v225];
    v227 = &v3[v225];
    v228 = *((_QWORD *)v227 + 1);
    if (((v228 >> 60) | 4) == 0xF)
    {
      *(_OWORD *)v226 = *(_OWORD *)v227;
    }
    else
    {
      v229 = *(_QWORD *)v227;
      sub_10001BBBC(*(_QWORD *)v227, *((_QWORD *)v227 + 1));
      *(_QWORD *)v226 = v229;
      *((_QWORD *)v226 + 1) = v228;
    }
    v230 = v6[22];
    a1[v6[21]] = v3[v6[21]];
    *(_WORD *)&a1[v230] = *(_WORD *)&v3[v230];
  }
  return a1;
}

uint64_t sub_1001DE7B4(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);
  uint64_t v14;
  unsigned int (*v15)(uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int (*v24)(uint64_t, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  unint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  void (*v34)(uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t result;
  uint64_t *v38;
  unint64_t v39;
  void (*v40)(uint64_t, uint64_t);
  unsigned int (*v41)(uint64_t, uint64_t, uint64_t);
  uint64_t v42;

  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v6(a1, v4);
  v7 = a1 + a2[5];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v7, 1, v4))
    v6(v7, v4);
  v8 = a1 + a2[7];
  v9 = type metadata accessor for MACAddress(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  swift_bridgeObjectRelease();
  v10 = a1 + a2[10];
  v11 = type metadata accessor for Date(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
  v13(v10, v11);
  v14 = a1 + a2[11];
  v15 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  if (!v15(v14, 1, v11))
    v13(v14, v11);
  swift_bridgeObjectRelease();
  v16 = a1 + a2[14];
  v17 = type metadata accessor for AccessoryMetadata(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 48))(v16, 1, v17))
  {
    v6(v16, v4);
    sub_10001BC14(*(_QWORD *)(v16 + *(int *)(v17 + 20)), *(_QWORD *)(v16 + *(int *)(v17 + 20) + 8));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v18 = a1 + a2[15];
  v19 = (int *)type metadata accessor for AccessoryProductInfo(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(*((_QWORD *)v19 - 1) + 48))(v18, 1, v19))
  {
    v20 = v18 + v19[5];
    v21 = type metadata accessor for ServerStatusCode(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 8))(v20, v21);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v22 = v18 + v19[16];
    v23 = type metadata accessor for URL(0);
    v42 = *(_QWORD *)(v23 - 8);
    v24 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v42 + 48);
    if (!v24(v22, 1, v23))
      (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v22, v23);
    v41 = v15;
    v25 = v18 + v19[17];
    if (!v24(v25, 1, v23))
      (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v25, v23);
    swift_bridgeObjectRelease();
    v26 = v18 + v19[20];
    v27 = type metadata accessor for AccessoryInfoResponseContent.Configuration(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 48))(v26, 1, v27))
    {
      v40 = v13;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v28 = v26 + *(int *)(v27 + 40);
      if (!v24(v28, 1, v23))
        (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v28, v23);
      v29 = v26 + *(int *)(v27 + 44);
      if (!v24(v29, 1, v23))
        (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v29, v23);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v13 = v40;
    }
    swift_bridgeObjectRelease();
    v30 = (uint64_t *)(v18 + v19[23]);
    v31 = v30[1];
    v15 = v41;
    if (v31 >> 60 != 15)
      sub_10001BC14(*v30, v31);
    v32 = (uint64_t *)(v18 + v19[24]);
    v33 = v32[1];
    if (v33 >> 60 != 15)
      sub_10001BC14(*v32, v33);
    v34 = *(void (**)(uint64_t, uint64_t))(v42 + 8);
    v34(v18 + v19[25], v23);
    v34(v18 + v19[26], v23);
    v34(v18 + v19[27], v23);
    v34(v18 + v19[28], v23);
    v34(v18 + v19[29], v23);
    v34(v18 + v19[30], v23);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v34(v18 + v19[37], v23);
    v34(v18 + v19[38], v23);
    v34(v18 + v19[39], v23);
    v34(v18 + v19[40], v23);
    v34(v18 + v19[41], v23);
    v34(v18 + v19[42], v23);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  v35 = a1 + a2[18];
  if (!v15(v35, 1, v11))
    v13(v35, v11);
  v36 = a1 + a2[19];
  result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v15)(v36, 1, v11);
  if (!(_DWORD)result)
    result = ((uint64_t (*)(uint64_t, uint64_t))v13)(v36, v11);
  v38 = (uint64_t *)(a1 + a2[20]);
  v39 = v38[1];
  if (((v39 >> 60) | 4) != 0xF)
    return sub_10001BC14(*v38, v39);
  return result;
}

uint64_t sub_1001DED6C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  void *v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, uint64_t, uint64_t, __n128);
  __n128 v26;
  uint64_t v27;
  void *v28;
  const void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  int *v40;
  uint64_t v41;
  unsigned int (*v42)(char *, uint64_t, int *, __n128);
  __n128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  void (*v74)(char *, _QWORD, uint64_t, int *, __n128);
  __n128 v75;
  uint64_t v76;
  int *v77;
  uint64_t v78;
  _BYTE *v79;
  _BYTE *v80;
  int *v81;
  uint64_t v82;
  uint64_t v83;
  void (*v84)(void *, const void *, uint64_t);
  unsigned int (*v85)(const void *, uint64_t, uint64_t, __n128);
  uint64_t v86;
  _BYTE *v87;
  _BYTE *v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  _QWORD *v92;
  uint64_t v93;
  _QWORD *v94;
  _QWORD *v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  _QWORD *v99;
  uint64_t v100;
  uint64_t v101;
  _BYTE *v102;
  _BYTE *v103;
  uint64_t v104;
  _QWORD *v105;
  _QWORD *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unsigned int (*v111)(void);
  __n128 v112;
  uint64_t v113;
  uint64_t v114;
  _BYTE *v115;
  _BYTE *v116;
  unsigned int (*v117)(void);
  uint64_t v118;
  uint64_t v119;
  _QWORD *v120;
  _QWORD *v121;
  uint64_t v122;
  uint64_t v123;
  _QWORD *v124;
  _QWORD *v125;
  int *v126;
  uint64_t v127;
  unsigned int (*v128)(_QWORD *, uint64_t, int *, __n128);
  __n128 v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  __n128 v137;
  uint64_t v138;
  uint64_t v139;
  char *v140;
  char *v141;
  uint64_t v142;
  uint64_t v143;
  char *v144;
  char *v145;
  uint64_t v146;
  _QWORD *v147;
  _QWORD *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  _QWORD *v153;
  _QWORD *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  char *v159;
  char *v160;
  uint64_t v161;
  char *v162;
  char *v163;
  void (*v164)(_QWORD *, _QWORD, uint64_t, int *, __n128);
  __n128 v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  _BYTE *v169;
  uint64_t *v170;
  unint64_t v171;
  uint64_t v172;
  uint64_t v173;
  _BYTE *v174;
  _BYTE *v175;
  unint64_t v176;
  uint64_t v177;
  void (*v178)(_BYTE *, _BYTE *, void *);
  uint64_t v179;
  _QWORD *v180;
  _QWORD *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  _QWORD *v186;
  _QWORD *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  _BYTE *v192;
  _BYTE *v193;
  uint64_t v194;
  _BYTE *v195;
  _BYTE *v196;
  uint64_t v197;
  _BYTE *v198;
  _BYTE *v199;
  __n128 v200;
  uint64_t v201;
  _QWORD *v202;
  _QWORD *v203;
  uint64_t v204;
  uint64_t v205;
  _QWORD *v206;
  _QWORD *v207;
  uint64_t v208;
  void (*v209)(_BYTE *, _QWORD, uint64_t, int *, __n128);
  __n128 v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  void *v214;
  const void *v215;
  __n128 v216;
  uint64_t v217;
  uint64_t v218;
  void *v219;
  const void *v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t *v224;
  unint64_t v225;
  uint64_t v226;
  uint64_t v227;
  _BYTE *v229;
  char *v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  _BYTE *__dst;
  void *__dsta;
  void (*v238)(char *, char *, uint64_t);
  uint64_t v239;
  uint64_t v240;
  unsigned int (*v241)(uint64_t, uint64_t, uint64_t);
  void (*v242)(void *, const void *, uint64_t);
  uint64_t v243;
  int *v244;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16);
  v8(a1, a2, v6);
  v9 = a3[5];
  v10 = (void *)(a1 + v9);
  v11 = (const void *)(a2 + v9);
  v238 = (void (*)(char *, char *, uint64_t))v8;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a2 + v9, 1, v6))
  {
    v12 = sub_10001A9A8(&qword_1010ED860);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    v8((uint64_t)v10, (uint64_t)v11, v6);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v10, 0, 1, v6);
  }
  v13 = a3[7];
  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  v14 = a1 + v13;
  v15 = a2 + v13;
  v16 = type metadata accessor for MACAddress(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v14, v15, v16);
  v17 = a3[8];
  v18 = a3[9];
  v19 = *(_QWORD *)(a2 + v17);
  *(_QWORD *)(a1 + v17) = v19;
  *(_BYTE *)(a1 + v18) = *(_BYTE *)(a2 + v18);
  v20 = a3[10];
  v21 = a1 + v20;
  v22 = a2 + v20;
  v23 = type metadata accessor for Date(0);
  v24 = *(_QWORD *)(v23 - 8);
  v25 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v24 + 16);
  v26 = swift_bridgeObjectRetain(v19);
  v25(v21, v22, v23, v26);
  v27 = a3[11];
  v28 = (void *)(a1 + v27);
  v29 = (const void *)(a2 + v27);
  v242 = (void (*)(void *, const void *, uint64_t))v25;
  v243 = v23;
  v240 = v24;
  v241 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v24 + 48);
  if (v241(a2 + v27, 1, v23))
  {
    v30 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
    memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
  }
  else
  {
    ((void (*)(void *, const void *, uint64_t))v25)(v28, v29, v23);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v28, 0, 1, v23);
  }
  v31 = a3[12];
  v32 = a3[13];
  v33 = a1 + v31;
  v34 = a2 + v31;
  *(_BYTE *)v33 = *(_BYTE *)v34;
  v35 = *(_QWORD *)(v34 + 8);
  v36 = *(_QWORD *)(v34 + 16);
  LOBYTE(v34) = *(_BYTE *)(a2 + v32);
  *(_QWORD *)(v33 + 8) = v35;
  *(_QWORD *)(v33 + 16) = v36;
  *(_BYTE *)(a1 + v32) = v34;
  v244 = a3;
  v37 = a3[14];
  v38 = (char *)(a1 + v37);
  v39 = (char *)(a2 + v37);
  v40 = (int *)type metadata accessor for AccessoryMetadata(0);
  v41 = *((_QWORD *)v40 - 1);
  v42 = *(unsigned int (**)(char *, uint64_t, int *, __n128))(v41 + 48);
  v43 = swift_bridgeObjectRetain(v36);
  if (v42(v39, 1, v40, v43))
  {
    v44 = sub_10001A9A8(&qword_101115E60);
    memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
  }
  else
  {
    v238(v38, v39, v6);
    v45 = v40[5];
    v46 = (uint64_t *)&v38[v45];
    v47 = (uint64_t *)&v39[v45];
    v48 = *v47;
    v49 = v47[1];
    sub_10001BBBC(*v47, v49);
    *v46 = v48;
    v46[1] = v49;
    v50 = v40[6];
    v51 = &v38[v50];
    v52 = &v39[v50];
    v53 = *((_QWORD *)v52 + 1);
    *(_QWORD *)v51 = *(_QWORD *)v52;
    *((_QWORD *)v51 + 1) = v53;
    v54 = v40[7];
    v55 = &v38[v54];
    v56 = &v39[v54];
    v57 = *((_QWORD *)v56 + 1);
    *(_QWORD *)v55 = *(_QWORD *)v56;
    *((_QWORD *)v55 + 1) = v57;
    *(_DWORD *)&v38[v40[8]] = *(_DWORD *)&v39[v40[8]];
    v58 = v40[9];
    v59 = &v38[v58];
    v60 = &v39[v58];
    *(_DWORD *)v59 = *(_DWORD *)v60;
    v59[4] = v60[4];
    v61 = v40[10];
    v62 = &v38[v61];
    v63 = &v39[v61];
    *(_OWORD *)v62 = *(_OWORD *)v63;
    v62[16] = v63[16];
    v64 = v40[11];
    v65 = &v38[v64];
    v66 = &v39[v64];
    v65[8] = v66[8];
    *(_QWORD *)v65 = *(_QWORD *)v66;
    v67 = v40[12];
    v68 = &v38[v67];
    v69 = &v39[v67];
    *(_DWORD *)v68 = *(_DWORD *)v69;
    v68[4] = v69[4];
    v38[v40[13]] = v39[v40[13]];
    v38[v40[14]] = v39[v40[14]];
    v70 = v40[15];
    v71 = &v38[v70];
    v72 = &v39[v70];
    v73 = *((_QWORD *)v72 + 1);
    *(_QWORD *)v71 = *(_QWORD *)v72;
    *((_QWORD *)v71 + 1) = v73;
    v74 = *(void (**)(char *, _QWORD, uint64_t, int *, __n128))(v41 + 56);
    swift_bridgeObjectRetain(v53);
    swift_bridgeObjectRetain(v57);
    v75 = swift_bridgeObjectRetain(v73);
    v74(v38, 0, 1, v40, v75);
  }
  v76 = v243;
  v77 = v244;
  v78 = v244[15];
  v79 = (_BYTE *)(a1 + v78);
  v80 = (_BYTE *)(a2 + v78);
  v81 = (int *)type metadata accessor for AccessoryProductInfo(0);
  v82 = *((_QWORD *)v81 - 1);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, int *))(v82 + 48))(v80, 1, v81))
  {
    v83 = sub_10001A9A8((uint64_t *)&unk_10111C0A0);
    memcpy(v79, v80, *(_QWORD *)(*(_QWORD *)(v83 - 8) + 64));
    v85 = (unsigned int (*)(const void *, uint64_t, uint64_t, __n128))v241;
    v84 = v242;
  }
  else
  {
    v233 = a1;
    v234 = v82;
    v235 = a2;
    *(_QWORD *)v79 = *(_QWORD *)v80;
    v79[8] = v80[8];
    v86 = v81[5];
    v87 = &v79[v86];
    v88 = &v80[v86];
    v89 = type metadata accessor for ServerStatusCode(0);
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v89 - 8) + 16))(v87, v88, v89);
    v79[v81[6]] = v80[v81[6]];
    v79[v81[7]] = v80[v81[7]];
    v90 = v81[8];
    v91 = &v79[v90];
    v92 = &v80[v90];
    v231 = v92[1];
    *v91 = *v92;
    v91[1] = v231;
    v79[v81[9]] = v80[v81[9]];
    v79[v81[10]] = v80[v81[10]];
    v79[v81[11]] = v80[v81[11]];
    v93 = v81[12];
    v94 = &v79[v93];
    v95 = &v80[v93];
    v96 = v95[1];
    *v94 = *v95;
    v94[1] = v96;
    v97 = v81[13];
    v98 = &v79[v97];
    v99 = &v80[v97];
    v100 = v99[1];
    *v98 = *v99;
    v98[1] = v100;
    v101 = v81[14];
    v102 = &v79[v101];
    v103 = &v80[v101];
    *(_QWORD *)v102 = *(_QWORD *)v103;
    v102[8] = v103[8];
    v104 = v81[15];
    v105 = &v79[v104];
    v106 = &v80[v104];
    v107 = v106[1];
    *v105 = *v106;
    v105[1] = v107;
    v108 = v81[16];
    __dst = &v79[v108];
    v229 = &v80[v108];
    v109 = type metadata accessor for URL(0);
    v110 = *(_QWORD *)(v109 - 8);
    v111 = *(unsigned int (**)(void))(v110 + 48);
    swift_bridgeObjectRetain(v231);
    swift_bridgeObjectRetain(v96);
    swift_bridgeObjectRetain(v100);
    v112 = swift_bridgeObjectRetain(v107);
    v239 = v110;
    if (((unsigned int (*)(_BYTE *, uint64_t, uint64_t, __n128))v111)(v229, 1, v109, v112))
    {
      v113 = sub_10001A9A8(&qword_1010FBA40);
      memcpy(__dst, v229, *(_QWORD *)(*(_QWORD *)(v113 - 8) + 64));
    }
    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v110 + 16))(__dst, v229, v109);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v110 + 56))(__dst, 0, 1, v109);
    }
    v114 = v81[17];
    v115 = &v79[v114];
    v116 = &v80[v114];
    v117 = v111;
    __dsta = (void *)v109;
    if (((unsigned int (*)(_BYTE *, uint64_t, uint64_t))v111)(&v80[v114], 1, v109))
    {
      v118 = sub_10001A9A8(&qword_1010FBA40);
      memcpy(v115, v116, *(_QWORD *)(*(_QWORD *)(v118 - 8) + 64));
    }
    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v239 + 16))(v115, v116, v109);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v239 + 56))(v115, 0, 1, v109);
    }
    v119 = v81[18];
    v120 = &v79[v119];
    v121 = &v80[v119];
    v122 = v121[1];
    *v120 = *v121;
    v120[1] = v122;
    *(_QWORD *)&v79[v81[19]] = *(_QWORD *)&v80[v81[19]];
    v123 = v81[20];
    v124 = &v79[v123];
    v125 = &v80[v123];
    v126 = (int *)type metadata accessor for AccessoryInfoResponseContent.Configuration(0);
    v127 = *((_QWORD *)v126 - 1);
    v128 = *(unsigned int (**)(_QWORD *, uint64_t, int *, __n128))(v127 + 48);
    v129 = swift_bridgeObjectRetain(v122);
    if (v128(v125, 1, v126, v129))
    {
      v130 = sub_10001A9A8(&qword_1010FBA50);
      memcpy(v124, v125, *(_QWORD *)(*(_QWORD *)(v130 - 8) + 64));
    }
    else
    {
      v232 = v127;
      v131 = v125[1];
      *v124 = *v125;
      v124[1] = v131;
      v132 = v125[3];
      v124[2] = v125[2];
      v124[3] = v132;
      v133 = v125[5];
      v124[4] = v125[4];
      v124[5] = v133;
      *((_WORD *)v124 + 24) = *((_WORD *)v125 + 24);
      *((_BYTE *)v124 + 72) = *((_BYTE *)v125 + 72);
      v134 = v125[8];
      v124[7] = v125[7];
      v124[8] = v134;
      v135 = v126[10];
      v230 = (char *)v124 + v135;
      v136 = (char *)v125 + v135;
      swift_bridgeObjectRetain(v131);
      swift_bridgeObjectRetain(v132);
      v137 = swift_bridgeObjectRetain(v133);
      if (((unsigned int (*)(char *, uint64_t, void *, __n128))v117)(v136, 1, __dsta, v137))
      {
        v138 = sub_10001A9A8(&qword_1010FBA40);
        memcpy(v230, v136, *(_QWORD *)(*(_QWORD *)(v138 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, void *))(v239 + 16))(v230, v136, __dsta);
        (*(void (**)(char *, _QWORD, uint64_t, void *))(v239 + 56))(v230, 0, 1, __dsta);
      }
      v139 = v126[11];
      v140 = (char *)v124 + v139;
      v141 = (char *)v125 + v139;
      if (v117())
      {
        v142 = sub_10001A9A8(&qword_1010FBA40);
        memcpy(v140, v141, *(_QWORD *)(*(_QWORD *)(v142 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, void *))(v239 + 16))(v140, v141, __dsta);
        (*(void (**)(char *, _QWORD, uint64_t, void *))(v239 + 56))(v140, 0, 1, __dsta);
      }
      v143 = v126[12];
      v144 = (char *)v124 + v143;
      v145 = (char *)v125 + v143;
      *(_QWORD *)v144 = *(_QWORD *)v145;
      v144[8] = v145[8];
      v146 = v126[13];
      v147 = (_QWORD *)((char *)v124 + v146);
      v148 = (_QWORD *)((char *)v125 + v146);
      v149 = v148[1];
      *v147 = *v148;
      v147[1] = v149;
      v150 = v126[14];
      v151 = *(_QWORD *)((char *)v125 + v150);
      *(_QWORD *)((char *)v124 + v150) = v151;
      v152 = v126[15];
      v153 = (_QWORD *)((char *)v124 + v152);
      v154 = (_QWORD *)((char *)v125 + v152);
      v155 = v154[1];
      *v153 = *v154;
      v153[1] = v155;
      v156 = v126[16];
      v157 = *(_QWORD *)((char *)v125 + v156);
      *(_QWORD *)((char *)v124 + v156) = v157;
      v158 = v126[17];
      v159 = (char *)v124 + v158;
      v160 = (char *)v125 + v158;
      *(_OWORD *)v159 = *(_OWORD *)v160;
      v159[16] = v160[16];
      v161 = v126[18];
      v162 = (char *)v124 + v161;
      v163 = (char *)v125 + v161;
      *(_OWORD *)v162 = *(_OWORD *)v163;
      v162[16] = v163[16];
      v164 = *(void (**)(_QWORD *, _QWORD, uint64_t, int *, __n128))(v232 + 56);
      swift_bridgeObjectRetain(v149);
      swift_bridgeObjectRetain(v151);
      swift_bridgeObjectRetain(v155);
      v165 = swift_bridgeObjectRetain(v157);
      v164(v124, 0, 1, v126, v165);
    }
    *(_DWORD *)&v79[v81[21]] = *(_DWORD *)&v80[v81[21]];
    v166 = v81[22];
    v167 = *(_QWORD *)&v80[v166];
    *(_QWORD *)&v79[v166] = v167;
    v168 = v81[23];
    v169 = &v79[v168];
    v170 = (uint64_t *)&v80[v168];
    v171 = *(_QWORD *)&v80[v168 + 8];
    swift_bridgeObjectRetain(v167);
    if (v171 >> 60 == 15)
    {
      *(_OWORD *)v169 = *(_OWORD *)v170;
    }
    else
    {
      v172 = *v170;
      sub_10001BBBC(*v170, v171);
      *(_QWORD *)v169 = v172;
      *((_QWORD *)v169 + 1) = v171;
    }
    v173 = v81[24];
    v174 = &v79[v173];
    v175 = &v80[v173];
    v176 = *((_QWORD *)v175 + 1);
    if (v176 >> 60 == 15)
    {
      *(_OWORD *)v174 = *(_OWORD *)v175;
    }
    else
    {
      v177 = *(_QWORD *)v175;
      sub_10001BBBC(*(_QWORD *)v175, *((_QWORD *)v175 + 1));
      *(_QWORD *)v174 = v177;
      *((_QWORD *)v174 + 1) = v176;
    }
    v178 = *(void (**)(_BYTE *, _BYTE *, void *))(v239 + 16);
    v178(&v79[v81[25]], &v80[v81[25]], __dsta);
    v178(&v79[v81[26]], &v80[v81[26]], __dsta);
    v178(&v79[v81[27]], &v80[v81[27]], __dsta);
    v178(&v79[v81[28]], &v80[v81[28]], __dsta);
    v178(&v79[v81[29]], &v80[v81[29]], __dsta);
    v178(&v79[v81[30]], &v80[v81[30]], __dsta);
    v179 = v81[31];
    v180 = &v79[v179];
    v181 = &v80[v179];
    v182 = v181[1];
    *v180 = *v181;
    v180[1] = v182;
    v183 = v81[32];
    v184 = *(_QWORD *)&v80[v183];
    *(_QWORD *)&v79[v183] = v184;
    v185 = v81[33];
    v186 = &v79[v185];
    v187 = &v80[v185];
    v188 = v187[1];
    *v186 = *v187;
    v186[1] = v188;
    v189 = v81[34];
    v190 = *(_QWORD *)&v80[v189];
    *(_QWORD *)&v79[v189] = v190;
    v191 = v81[35];
    v192 = &v79[v191];
    v193 = &v80[v191];
    *(_OWORD *)v192 = *(_OWORD *)v193;
    v192[16] = v193[16];
    v194 = v81[36];
    v195 = &v79[v194];
    v196 = &v80[v194];
    *(_OWORD *)v195 = *(_OWORD *)v196;
    v195[16] = v196[16];
    v197 = v81[37];
    v198 = &v79[v197];
    v199 = &v80[v197];
    swift_bridgeObjectRetain(v182);
    swift_bridgeObjectRetain(v184);
    swift_bridgeObjectRetain(v188);
    v200 = swift_bridgeObjectRetain(v190);
    ((void (*)(_BYTE *, _BYTE *, void *, __n128))v178)(v198, v199, __dsta, v200);
    v178(&v79[v81[38]], &v80[v81[38]], __dsta);
    v178(&v79[v81[39]], &v80[v81[39]], __dsta);
    v178(&v79[v81[40]], &v80[v81[40]], __dsta);
    v178(&v79[v81[41]], &v80[v81[41]], __dsta);
    v178(&v79[v81[42]], &v80[v81[42]], __dsta);
    v79[v81[43]] = v80[v81[43]];
    v79[v81[44]] = v80[v81[44]];
    v79[v81[45]] = v80[v81[45]];
    v201 = v81[46];
    v202 = &v79[v201];
    v203 = &v80[v201];
    v204 = v203[1];
    *v202 = *v203;
    v202[1] = v204;
    v205 = v81[47];
    v206 = &v79[v205];
    v207 = &v80[v205];
    v208 = v207[1];
    *v206 = *v207;
    v206[1] = v208;
    v209 = *(void (**)(_BYTE *, _QWORD, uint64_t, int *, __n128))(v234 + 56);
    swift_bridgeObjectRetain(v204);
    v210 = swift_bridgeObjectRetain(v208);
    v209(v79, 0, 1, v81, v210);
    a2 = v235;
    v76 = v243;
    v77 = v244;
    v85 = (unsigned int (*)(const void *, uint64_t, uint64_t, __n128))v241;
    v84 = v242;
    a1 = v233;
  }
  v211 = v77[17];
  *(_BYTE *)(a1 + v77[16]) = *(_BYTE *)(a2 + v77[16]);
  v212 = *(_QWORD *)(a2 + v211);
  *(_QWORD *)(a1 + v211) = v212;
  v213 = v77[18];
  v214 = (void *)(a1 + v213);
  v215 = (const void *)(a2 + v213);
  v216 = swift_bridgeObjectRetain(v212);
  if (v85(v215, 1, v76, v216))
  {
    v217 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
    memcpy(v214, v215, *(_QWORD *)(*(_QWORD *)(v217 - 8) + 64));
  }
  else
  {
    v84(v214, v215, v76);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v240 + 56))(v214, 0, 1, v76);
  }
  v218 = v77[19];
  v219 = (void *)(a1 + v218);
  v220 = (const void *)(a2 + v218);
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v85)(a2 + v218, 1, v76))
  {
    v221 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
    memcpy(v219, v220, *(_QWORD *)(*(_QWORD *)(v221 - 8) + 64));
  }
  else
  {
    v84(v219, v220, v76);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v240 + 56))(v219, 0, 1, v76);
  }
  v222 = v77[20];
  v223 = a1 + v222;
  v224 = (uint64_t *)(a2 + v222);
  v225 = v224[1];
  if (((v225 >> 60) | 4) == 0xF)
  {
    *(_OWORD *)v223 = *(_OWORD *)v224;
  }
  else
  {
    v226 = *v224;
    sub_10001BBBC(*v224, v224[1]);
    *(_QWORD *)v223 = v226;
    *(_QWORD *)(v223 + 8) = v225;
  }
  v227 = v77[22];
  *(_BYTE *)(a1 + v77[21]) = *(_BYTE *)(a2 + v77[21]);
  *(_WORD *)(a1 + v227) = *(_WORD *)(a2 + v227);
  return a1;
}

uint64_t sub_1001DFA10(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const void *v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t);
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  const void *v28;
  uint64_t (*v29)(uint64_t, uint64_t, uint64_t);
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _BYTE *v37;
  _BYTE *v38;
  int *v39;
  uint64_t v40;
  uint64_t (*v41)(_BYTE *, uint64_t, int *);
  int v42;
  int v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  int v60;
  uint64_t v61;
  char *v62;
  char *v63;
  __int128 v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  _QWORD *v73;
  _QWORD *v74;
  uint64_t v75;
  void (*v76)(_BYTE *, _QWORD, uint64_t, int *, __n128);
  __n128 v77;
  uint64_t v78;
  uint64_t v79;
  int *v80;
  uint64_t v81;
  uint64_t v82;
  _BYTE *v83;
  _BYTE *v84;
  int *v85;
  uint64_t v86;
  uint64_t (*v87)(_BYTE *, uint64_t, int *);
  int v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  _BYTE *v92;
  _BYTE *v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  _QWORD *v97;
  uint64_t v98;
  _QWORD *v99;
  _QWORD *v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  _QWORD *v104;
  uint64_t v105;
  uint64_t v106;
  _BYTE *v107;
  _BYTE *v108;
  char v109;
  uint64_t v110;
  _QWORD *v111;
  _QWORD *v112;
  uint64_t v113;
  uint64_t v114;
  _BYTE *v115;
  uint64_t v116;
  uint64_t v117;
  unsigned int (*v118)(_BYTE *, uint64_t, uint64_t, __n128);
  __n128 v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t (*v122)(uint64_t, uint64_t, uint64_t);
  uint64_t v123;
  uint64_t *v124;
  uint64_t *v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  _QWORD *v131;
  _QWORD *v132;
  uint64_t v133;
  uint64_t v134;
  _QWORD *v135;
  _QWORD *v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  char *v140;
  uint64_t v141;
  char *v142;
  char *v143;
  int v144;
  uint64_t v145;
  char *v146;
  char *v147;
  __int128 v148;
  uint64_t v149;
  char *v150;
  char *v151;
  uint64_t v152;
  uint64_t v153;
  char *v154;
  char *v155;
  uint64_t v156;
  _QWORD *v157;
  _QWORD *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  _BYTE *v162;
  _BYTE *v163;
  uint64_t v164;
  uint64_t v165;
  _QWORD *v166;
  _QWORD *v167;
  uint64_t v168;
  uint64_t v169;
  _QWORD *v170;
  _QWORD *v171;
  uint64_t v172;
  uint64_t v173;
  _QWORD *v174;
  _QWORD *v175;
  uint64_t v176;
  uint64_t v177;
  _BYTE *v178;
  _BYTE *v179;
  uint64_t v180;
  uint64_t v181;
  _QWORD *v182;
  _QWORD *v183;
  uint64_t v184;
  uint64_t v185;
  _BYTE *v186;
  _BYTE *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t (*v190)(_BYTE *, uint64_t, uint64_t);
  int v191;
  int v192;
  uint64_t v193;
  _BYTE *v194;
  _BYTE *v195;
  uint64_t v196;
  uint64_t v197;
  _QWORD *v198;
  _QWORD *v199;
  uint64_t v200;
  uint64_t v201;
  _QWORD *v202;
  _QWORD *v203;
  int *v204;
  _QWORD *v205;
  unsigned int (*v206)(_QWORD *, uint64_t, int *, __n128);
  __n128 v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  char *v214;
  __n128 v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  _BYTE *v219;
  _BYTE *v220;
  int v221;
  int v222;
  uint64_t v223;
  uint64_t v224;
  _QWORD *v225;
  _QWORD *v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  _BYTE *v230;
  int *v231;
  uint64_t (*v232)(uint64_t, uint64_t, int *);
  int v233;
  int v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  _BYTE *v240;
  __n128 v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  char *v245;
  char *v246;
  uint64_t v247;
  uint64_t v248;
  char *v249;
  char *v250;
  uint64_t v251;
  uint64_t v252;
  _QWORD *v253;
  _QWORD *v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  _QWORD *v259;
  _QWORD *v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  char *v265;
  char *v266;
  __int128 v267;
  uint64_t v268;
  char *v269;
  char *v270;
  __int128 v271;
  void (*v272)(_QWORD *, _QWORD, uint64_t, int *, __n128);
  __n128 v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  _BYTE *v277;
  _OWORD *v278;
  unint64_t v279;
  uint64_t v280;
  uint64_t v281;
  _BYTE *v282;
  _BYTE *v283;
  unint64_t v284;
  uint64_t v285;
  void (*v286)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v287;
  _QWORD *v288;
  _QWORD *v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  _QWORD *v294;
  _QWORD *v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  _BYTE *v300;
  _BYTE *v301;
  char v302;
  uint64_t v303;
  _BYTE *v304;
  _BYTE *v305;
  char v306;
  uint64_t v307;
  _BYTE *v308;
  _BYTE *v309;
  __n128 v310;
  uint64_t v311;
  _QWORD *v312;
  _QWORD *v313;
  uint64_t v314;
  uint64_t v315;
  _QWORD *v316;
  _QWORD *v317;
  uint64_t v318;
  void (*v319)(_BYTE *, _QWORD, uint64_t, int *, __n128);
  __n128 v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  void *v324;
  const void *v325;
  int v326;
  int v327;
  uint64_t v328;
  uint64_t v329;
  void *v330;
  const void *v331;
  int v332;
  int v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t *v336;
  uint64_t *v337;
  unint64_t v338;
  uint64_t v339;
  unint64_t v340;
  uint64_t v342;
  uint64_t v343;
  unint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  _BYTE *v350;
  int v351;
  int v352;
  size_t v353;
  void *v354;
  uint64_t v355;
  void *v356;
  _BYTE *v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  _BYTE *v361;
  uint64_t v362;
  uint64_t v363;
  _QWORD *v364;
  _QWORD *v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  _QWORD *v369;
  _QWORD *v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  _BYTE *v375;
  __int128 v376;
  uint64_t v377;
  uint64_t v378;
  _BYTE *v379;
  __int128 v380;
  void (*v381)(uint64_t, _QWORD, uint64_t, int *, __n128);
  __n128 v382;
  uint64_t v383;
  _BYTE *v384;
  int v385;
  int v386;
  size_t v387;
  void *v388;
  uint64_t v389;
  uint64_t v390;
  _BYTE *v391;
  uint64_t v392;
  uint64_t v393;
  _QWORD *v394;
  _QWORD *v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  _QWORD *v400;
  _QWORD *v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  _BYTE *v407;
  __int128 v408;
  uint64_t v409;
  uint64_t v410;
  _BYTE *v411;
  __int128 v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t *v416;
  uint64_t *v417;
  unint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  unint64_t v422;
  uint64_t v423;
  uint64_t *v424;
  uint64_t *v425;
  unint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  unint64_t v430;
  void (*v431)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v432;
  _QWORD *v433;
  _QWORD *v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  _QWORD *v439;
  _QWORD *v440;
  uint64_t v441;
  uint64_t v442;
  uint64_t v443;
  uint64_t v444;
  _BYTE *v445;
  _BYTE *v446;
  __int128 v447;
  uint64_t v448;
  _BYTE *v449;
  _BYTE *v450;
  __int128 v451;
  uint64_t v452;
  _QWORD *v453;
  _QWORD *v454;
  uint64_t v455;
  uint64_t v456;
  _QWORD *v457;
  _QWORD *v458;
  uint64_t v459;
  _BYTE *__dst;
  _QWORD *__dsta;
  void *__dstb;
  void *__dstc;
  void *__dste;
  void *__dstd;
  void *__srcb;
  char *__src;
  _QWORD *__srca;
  uint64_t v469;
  uint64_t v470;
  unsigned int (*v471)(_BYTE *, uint64_t, uint64_t, __n128);
  uint64_t v472;
  uint64_t v473;
  int *v474;
  void (*v475)(uint64_t, uint64_t, uint64_t);
  uint64_t v476;
  uint64_t v477;
  void (*v478)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v479)(uint64_t, uint64_t, uint64_t);
  int *v480;
  uint64_t v481;
  uint64_t v482;
  uint64_t v483;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  v475 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 24);
  v475(a1, a2, v6);
  v8 = a3[5];
  v9 = (void *)(a1 + v8);
  v10 = (const void *)(a2 + v8);
  v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  v12 = v11(a1 + v8, 1, v6);
  v13 = v11((uint64_t)v10, 1, v6);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(v9, v10, v6);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v9, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(void *, uint64_t))(v7 + 8))(v9, v6);
LABEL_6:
    v14 = sub_10001A9A8(&qword_1010ED860);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  v475((uint64_t)v9, (uint64_t)v10, v6);
LABEL_7:
  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = type metadata accessor for MACAddress(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 24))(v16, v17, v18);
  v19 = a3[8];
  v20 = *(_QWORD *)(a2 + v19);
  *(_QWORD *)(a1 + v19) = v20;
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  v21 = a3[10];
  v22 = a1 + v21;
  v23 = a2 + v21;
  v24 = type metadata accessor for Date(0);
  v25 = *(_QWORD *)(v24 - 8);
  v478 = *(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 24);
  v478(v22, v23, v24);
  v26 = a3[11];
  v27 = (void *)(a1 + v26);
  v28 = (const void *)(a2 + v26);
  v483 = v25;
  v29 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v25 + 48);
  LODWORD(v25) = v29(a1 + v26, 1, v24);
  v479 = v29;
  v30 = v29((uint64_t)v28, 1, v24);
  v482 = v24;
  if ((_DWORD)v25)
  {
    if (!v30)
    {
      (*(void (**)(void *, const void *, uint64_t))(v483 + 16))(v27, v28, v24);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v483 + 56))(v27, 0, 1, v24);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v30)
  {
    (*(void (**)(void *, uint64_t))(v483 + 8))(v27, v24);
LABEL_12:
    v31 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
    memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
    goto LABEL_13;
  }
  v478((uint64_t)v27, (uint64_t)v28, v24);
LABEL_13:
  v32 = a3[12];
  v33 = a1 + v32;
  v34 = a2 + v32;
  *(_BYTE *)v33 = *(_BYTE *)v34;
  *(_QWORD *)(v33 + 8) = *(_QWORD *)(v34 + 8);
  v35 = *(_QWORD *)(v34 + 16);
  *(_QWORD *)(v33 + 16) = v35;
  swift_bridgeObjectRetain(v35);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + a3[13]) = *(_BYTE *)(a2 + a3[13]);
  v480 = a3;
  v481 = a2;
  v36 = a3[14];
  v37 = (_BYTE *)(a1 + v36);
  v38 = (_BYTE *)(a2 + v36);
  v39 = (int *)type metadata accessor for AccessoryMetadata(0);
  v40 = *((_QWORD *)v39 - 1);
  v41 = *(uint64_t (**)(_BYTE *, uint64_t, int *))(v40 + 48);
  v42 = v41(v37, 1, v39);
  v43 = v41(v38, 1, v39);
  if (v42)
  {
    if (!v43)
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v7 + 16))(v37, v38, v6);
      v44 = v39[5];
      v45 = (uint64_t *)&v37[v44];
      v46 = (uint64_t *)&v38[v44];
      v47 = *v46;
      v48 = v46[1];
      sub_10001BBBC(*v46, v48);
      *v45 = v47;
      v45[1] = v48;
      v49 = v39[6];
      v50 = &v37[v49];
      v51 = &v38[v49];
      *v50 = *v51;
      v52 = v51[1];
      v50[1] = v52;
      v53 = v39[7];
      v54 = &v37[v53];
      v55 = &v38[v53];
      *v54 = *v55;
      v56 = v55[1];
      v54[1] = v56;
      *(_DWORD *)&v37[v39[8]] = *(_DWORD *)&v38[v39[8]];
      v57 = v39[9];
      v58 = &v37[v57];
      v59 = &v38[v57];
      v60 = *(_DWORD *)v59;
      v58[4] = v59[4];
      *(_DWORD *)v58 = v60;
      v61 = v39[10];
      v62 = &v37[v61];
      v63 = &v38[v61];
      v64 = *(_OWORD *)v63;
      v62[16] = v63[16];
      *(_OWORD *)v62 = v64;
      v65 = v39[11];
      v66 = &v37[v65];
      v67 = &v38[v65];
      v68 = *(_QWORD *)v67;
      v66[8] = v67[8];
      *(_QWORD *)v66 = v68;
      v69 = v39[12];
      v70 = &v37[v69];
      v71 = &v38[v69];
      LODWORD(v68) = *(_DWORD *)v71;
      v70[4] = v71[4];
      *(_DWORD *)v70 = v68;
      v37[v39[13]] = v38[v39[13]];
      v37[v39[14]] = v38[v39[14]];
      v72 = v39[15];
      v73 = &v37[v72];
      v74 = &v38[v72];
      *v73 = *v74;
      v75 = v74[1];
      v73[1] = v75;
      v76 = *(void (**)(_BYTE *, _QWORD, uint64_t, int *, __n128))(v40 + 56);
      swift_bridgeObjectRetain(v52);
      swift_bridgeObjectRetain(v56);
      v77 = swift_bridgeObjectRetain(v75);
      v76(v37, 0, 1, v39, v77);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v43)
  {
    sub_1000126B0((uint64_t)v37, type metadata accessor for AccessoryMetadata);
LABEL_18:
    v78 = sub_10001A9A8(&qword_101115E60);
    memcpy(v37, v38, *(_QWORD *)(*(_QWORD *)(v78 - 8) + 64));
    goto LABEL_19;
  }
  v475((uint64_t)v37, (uint64_t)v38, v6);
  v123 = v39[5];
  v124 = (uint64_t *)&v37[v123];
  v125 = (uint64_t *)&v38[v123];
  v126 = *v125;
  v127 = v125[1];
  sub_10001BBBC(*v125, v127);
  v128 = *v124;
  v129 = v124[1];
  *v124 = v126;
  v124[1] = v127;
  sub_10001BC14(v128, v129);
  v130 = v39[6];
  v131 = &v37[v130];
  v132 = &v38[v130];
  *v131 = *v132;
  v133 = v132[1];
  v131[1] = v133;
  swift_bridgeObjectRetain(v133);
  swift_bridgeObjectRelease();
  v134 = v39[7];
  v135 = &v37[v134];
  v136 = &v38[v134];
  *v135 = *v136;
  v137 = v136[1];
  v135[1] = v137;
  swift_bridgeObjectRetain(v137);
  swift_bridgeObjectRelease();
  v138 = v39[8];
  v139 = &v37[v138];
  v140 = &v38[v138];
  *(_WORD *)v139 = *(_WORD *)v140;
  v139[2] = v140[2];
  v139[3] = v140[3];
  v141 = v39[9];
  v142 = &v37[v141];
  v143 = &v38[v141];
  v144 = *(_DWORD *)v143;
  v142[4] = v143[4];
  *(_DWORD *)v142 = v144;
  v145 = v39[10];
  v146 = &v37[v145];
  v147 = &v38[v145];
  v148 = *(_OWORD *)v147;
  v146[16] = v147[16];
  *(_OWORD *)v146 = v148;
  v149 = v39[11];
  v150 = &v37[v149];
  v151 = &v38[v149];
  v152 = *(_QWORD *)v151;
  v150[8] = v151[8];
  *(_QWORD *)v150 = v152;
  v153 = v39[12];
  v154 = &v37[v153];
  v155 = &v38[v153];
  LODWORD(v152) = *(_DWORD *)v155;
  v154[4] = v155[4];
  *(_DWORD *)v154 = v152;
  v37[v39[13]] = v38[v39[13]];
  v37[v39[14]] = v38[v39[14]];
  v156 = v39[15];
  v157 = &v37[v156];
  v158 = &v38[v156];
  *v157 = *v158;
  v159 = v158[1];
  v157[1] = v159;
  swift_bridgeObjectRetain(v159);
  swift_bridgeObjectRelease();
LABEL_19:
  v80 = v480;
  v79 = v481;
  v81 = v482;
  v82 = v480[15];
  v83 = (_BYTE *)(a1 + v82);
  v84 = (_BYTE *)(v481 + v82);
  v85 = (int *)type metadata accessor for AccessoryProductInfo(0);
  v86 = *((_QWORD *)v85 - 1);
  v87 = *(uint64_t (**)(_BYTE *, uint64_t, int *))(v86 + 48);
  v88 = v87(v83, 1, v85);
  v89 = v87(v84, 1, v85);
  if (!v88)
  {
    if (v89)
    {
      sub_1000126B0((uint64_t)v83, type metadata accessor for AccessoryProductInfo);
      goto LABEL_25;
    }
    v160 = *(_QWORD *)v84;
    v83[8] = v84[8];
    *(_QWORD *)v83 = v160;
    v161 = v85[5];
    v162 = &v83[v161];
    v163 = &v84[v161];
    v164 = type metadata accessor for ServerStatusCode(0);
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v164 - 8) + 24))(v162, v163, v164);
    v83[v85[6]] = v84[v85[6]];
    v83[v85[7]] = v84[v85[7]];
    v165 = v85[8];
    v166 = &v83[v165];
    v167 = &v84[v165];
    *v166 = *v167;
    v168 = v167[1];
    v166[1] = v168;
    swift_bridgeObjectRetain(v168);
    swift_bridgeObjectRelease();
    v83[v85[9]] = v84[v85[9]];
    v83[v85[10]] = v84[v85[10]];
    v83[v85[11]] = v84[v85[11]];
    v169 = v85[12];
    v170 = &v83[v169];
    v171 = &v84[v169];
    *v170 = *v171;
    v172 = v171[1];
    v170[1] = v172;
    swift_bridgeObjectRetain(v172);
    swift_bridgeObjectRelease();
    v173 = v85[13];
    v174 = &v83[v173];
    v175 = &v84[v173];
    *v174 = *v175;
    v176 = v175[1];
    v174[1] = v176;
    swift_bridgeObjectRetain(v176);
    swift_bridgeObjectRelease();
    v177 = v85[14];
    v178 = &v83[v177];
    v179 = &v84[v177];
    v180 = *(_QWORD *)v179;
    v178[8] = v179[8];
    *(_QWORD *)v178 = v180;
    v181 = v85[15];
    v182 = &v83[v181];
    v183 = &v84[v181];
    *v182 = *v183;
    v184 = v183[1];
    v182[1] = v184;
    swift_bridgeObjectRetain(v184);
    swift_bridgeObjectRelease();
    v185 = v85[16];
    v186 = &v83[v185];
    v187 = &v84[v185];
    v188 = type metadata accessor for URL(0);
    v189 = *(_QWORD *)(v188 - 8);
    v190 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v189 + 48);
    v191 = v190(v186, 1, v188);
    v192 = v190(v187, 1, v188);
    if (v191)
    {
      if (!v192)
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v189 + 16))(v186, v187, v188);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v189 + 56))(v186, 0, 1, v188);
        goto LABEL_44;
      }
    }
    else
    {
      if (!v192)
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v189 + 24))(v186, v187, v188);
LABEL_44:
        v218 = v85[17];
        v219 = &v83[v218];
        v220 = &v84[v218];
        v221 = v190(&v83[v218], 1, v188);
        v222 = v190(v220, 1, v188);
        v477 = v189;
        v471 = (unsigned int (*)(_BYTE *, uint64_t, uint64_t, __n128))v190;
        if (v221)
        {
          if (!v222)
          {
            (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v189 + 16))(v219, v220, v188);
            (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v189 + 56))(v219, 0, 1, v188);
            goto LABEL_50;
          }
        }
        else
        {
          if (!v222)
          {
            (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v189 + 24))(v219, v220, v188);
LABEL_50:
            v224 = v85[18];
            v225 = &v83[v224];
            v226 = &v84[v224];
            *v225 = *v226;
            v227 = v226[1];
            v225[1] = v227;
            swift_bridgeObjectRetain(v227);
            swift_bridgeObjectRelease();
            *(_QWORD *)&v83[v85[19]] = *(_QWORD *)&v84[v85[19]];
            v228 = v85[20];
            v229 = (uint64_t)&v83[v228];
            v230 = &v84[v228];
            v231 = (int *)type metadata accessor for AccessoryInfoResponseContent.Configuration(0);
            __srca = (_QWORD *)*((_QWORD *)v231 - 1);
            v232 = (uint64_t (*)(uint64_t, uint64_t, int *))__srca[6];
            v233 = v232(v229, 1, v231);
            v474 = v231;
            v234 = v232((uint64_t)v230, 1, v231);
            if (v233)
            {
              if (!v234)
              {
                *(_QWORD *)v229 = *(_QWORD *)v230;
                v235 = *((_QWORD *)v230 + 1);
                *(_QWORD *)(v229 + 8) = v235;
                *(_QWORD *)(v229 + 16) = *((_QWORD *)v230 + 2);
                v236 = *((_QWORD *)v230 + 3);
                *(_QWORD *)(v229 + 24) = v236;
                *(_QWORD *)(v229 + 32) = *((_QWORD *)v230 + 4);
                v237 = *((_QWORD *)v230 + 5);
                *(_QWORD *)(v229 + 40) = v237;
                *(_WORD *)(v229 + 48) = *((_WORD *)v230 + 24);
                *(_QWORD *)(v229 + 56) = *((_QWORD *)v230 + 7);
                v238 = *((_QWORD *)v230 + 8);
                *(_BYTE *)(v229 + 72) = v230[72];
                *(_QWORD *)(v229 + 64) = v238;
                v239 = v231[10];
                __dstb = (void *)(v229 + v239);
                v240 = &v230[v239];
                swift_bridgeObjectRetain(v235);
                swift_bridgeObjectRetain(v236);
                v241 = swift_bridgeObjectRetain(v237);
                if (v471(v240, 1, v188, v241))
                {
                  v242 = sub_10001A9A8(&qword_1010FBA40);
                  memcpy(__dstb, v240, *(_QWORD *)(*(_QWORD *)(v242 - 8) + 64));
                }
                else
                {
                  (*(void (**)(void *, _BYTE *, uint64_t))(v477 + 16))(__dstb, v240, v188);
                  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v477 + 56))(__dstb, 0, 1, v188);
                }
                v355 = v474[11];
                v356 = (void *)(v229 + v355);
                v357 = &v230[v355];
                if (((unsigned int (*)(_BYTE *, uint64_t, uint64_t))v471)(&v230[v355], 1, v188))
                {
                  v358 = sub_10001A9A8(&qword_1010FBA40);
                  memcpy(v356, v357, *(_QWORD *)(*(_QWORD *)(v358 - 8) + 64));
                }
                else
                {
                  (*(void (**)(void *, _BYTE *, uint64_t))(v477 + 16))(v356, v357, v188);
                  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v477 + 56))(v356, 0, 1, v188);
                }
                v359 = v474[12];
                v360 = v229 + v359;
                v361 = &v230[v359];
                v362 = *(_QWORD *)v361;
                *(_BYTE *)(v360 + 8) = v361[8];
                *(_QWORD *)v360 = v362;
                v363 = v474[13];
                v364 = (_QWORD *)(v229 + v363);
                v365 = &v230[v363];
                *v364 = *v365;
                v366 = v365[1];
                v364[1] = v366;
                v367 = v474[14];
                v472 = *(_QWORD *)&v230[v367];
                *(_QWORD *)(v229 + v367) = v472;
                v368 = v474[15];
                v369 = (_QWORD *)(v229 + v368);
                v370 = &v230[v368];
                *v369 = *v370;
                v371 = v370[1];
                v369[1] = v371;
                v372 = v474[16];
                __dste = *(void **)&v230[v372];
                *(_QWORD *)(v229 + v372) = __dste;
                v373 = v474[17];
                v374 = v229 + v373;
                v375 = &v230[v373];
                v376 = *(_OWORD *)v375;
                *(_BYTE *)(v374 + 16) = v375[16];
                *(_OWORD *)v374 = v376;
                v377 = v474[18];
                v378 = v229 + v377;
                v379 = &v230[v377];
                v380 = *(_OWORD *)v379;
                *(_BYTE *)(v378 + 16) = v379[16];
                *(_OWORD *)v378 = v380;
                v381 = (void (*)(uint64_t, _QWORD, uint64_t, int *, __n128))__srca[7];
                swift_bridgeObjectRetain(v366);
                swift_bridgeObjectRetain(v472);
                swift_bridgeObjectRetain(v371);
                v382 = swift_bridgeObjectRetain(__dste);
                v381(v229, 0, 1, v474, v382);
LABEL_115:
                *(_DWORD *)&v83[v85[21]] = *(_DWORD *)&v84[v85[21]];
                v413 = v85[22];
                v414 = *(_QWORD *)&v84[v413];
                *(_QWORD *)&v83[v413] = v414;
                swift_bridgeObjectRetain(v414);
                swift_bridgeObjectRelease();
                v415 = v85[23];
                v416 = (uint64_t *)&v83[v415];
                v417 = (uint64_t *)&v84[v415];
                v418 = *(_QWORD *)&v84[v415 + 8];
                if (*(_QWORD *)&v83[v415 + 8] >> 60 == 15)
                {
                  if (v418 >> 60 != 15)
                  {
                    v419 = *v417;
                    sub_10001BBBC(*v417, v418);
                    *v416 = v419;
                    v416[1] = v418;
                    goto LABEL_122;
                  }
                }
                else
                {
                  if (v418 >> 60 != 15)
                  {
                    v420 = *v417;
                    sub_10001BBBC(*v417, v418);
                    v421 = *v416;
                    v422 = v416[1];
                    *v416 = v420;
                    v416[1] = v418;
                    sub_10001BC14(v421, v422);
LABEL_122:
                    v423 = v85[24];
                    v424 = (uint64_t *)&v83[v423];
                    v425 = (uint64_t *)&v84[v423];
                    v426 = *(_QWORD *)&v84[v423 + 8];
                    if (*(_QWORD *)&v83[v423 + 8] >> 60 == 15)
                    {
                      if (v426 >> 60 != 15)
                      {
                        v427 = *v425;
                        sub_10001BBBC(*v425, v426);
                        *v424 = v427;
                        v424[1] = v426;
LABEL_129:
                        v80 = v480;
                        v79 = v481;
                        v431 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v477 + 24);
                        v431(&v83[v85[25]], &v84[v85[25]], v188);
                        v431(&v83[v85[26]], &v84[v85[26]], v188);
                        v431(&v83[v85[27]], &v84[v85[27]], v188);
                        v431(&v83[v85[28]], &v84[v85[28]], v188);
                        v431(&v83[v85[29]], &v84[v85[29]], v188);
                        v431(&v83[v85[30]], &v84[v85[30]], v188);
                        v432 = v85[31];
                        v433 = &v83[v432];
                        v434 = &v84[v432];
                        *v433 = *v434;
                        v435 = v434[1];
                        v433[1] = v435;
                        swift_bridgeObjectRetain(v435);
                        swift_bridgeObjectRelease();
                        v436 = v85[32];
                        v437 = *(_QWORD *)&v84[v436];
                        *(_QWORD *)&v83[v436] = v437;
                        swift_bridgeObjectRetain(v437);
                        swift_bridgeObjectRelease();
                        v438 = v85[33];
                        v439 = &v83[v438];
                        v440 = &v84[v438];
                        *v439 = *v440;
                        v441 = v440[1];
                        v439[1] = v441;
                        swift_bridgeObjectRetain(v441);
                        swift_bridgeObjectRelease();
                        v442 = v85[34];
                        v443 = *(_QWORD *)&v84[v442];
                        *(_QWORD *)&v83[v442] = v443;
                        swift_bridgeObjectRetain(v443);
                        swift_bridgeObjectRelease();
                        v444 = v85[35];
                        v445 = &v83[v444];
                        v446 = &v84[v444];
                        v447 = *(_OWORD *)v446;
                        v445[16] = v446[16];
                        *(_OWORD *)v445 = v447;
                        v448 = v85[36];
                        v449 = &v83[v448];
                        v450 = &v84[v448];
                        v451 = *(_OWORD *)v450;
                        v449[16] = v450[16];
                        *(_OWORD *)v449 = v451;
                        v431(&v83[v85[37]], &v84[v85[37]], v188);
                        v431(&v83[v85[38]], &v84[v85[38]], v188);
                        v431(&v83[v85[39]], &v84[v85[39]], v188);
                        v431(&v83[v85[40]], &v84[v85[40]], v188);
                        v431(&v83[v85[41]], &v84[v85[41]], v188);
                        v431(&v83[v85[42]], &v84[v85[42]], v188);
                        v83[v85[43]] = v84[v85[43]];
                        v83[v85[44]] = v84[v85[44]];
                        v83[v85[45]] = v84[v85[45]];
                        v452 = v85[46];
                        v453 = &v83[v452];
                        v454 = &v84[v452];
                        *v453 = *v454;
                        v455 = v454[1];
                        v453[1] = v455;
                        swift_bridgeObjectRetain(v455);
                        swift_bridgeObjectRelease();
                        v456 = v85[47];
                        v457 = &v83[v456];
                        v458 = &v84[v456];
                        *v457 = *v458;
                        v459 = v458[1];
                        v457[1] = v459;
                        swift_bridgeObjectRetain(v459);
                        swift_bridgeObjectRelease();
                        v81 = v482;
                        goto LABEL_26;
                      }
                    }
                    else
                    {
                      if (v426 >> 60 != 15)
                      {
                        v428 = *v425;
                        sub_10001BBBC(*v425, v426);
                        v429 = *v424;
                        v430 = v424[1];
                        *v424 = v428;
                        v424[1] = v426;
                        sub_10001BC14(v429, v430);
                        goto LABEL_129;
                      }
                      sub_1000DC964((uint64_t)v424);
                    }
                    *(_OWORD *)v424 = *(_OWORD *)v425;
                    goto LABEL_129;
                  }
                  sub_1000DC964((uint64_t)v416);
                }
                *(_OWORD *)v416 = *(_OWORD *)v417;
                goto LABEL_122;
              }
LABEL_56:
              v243 = sub_10001A9A8(&qword_1010FBA50);
              memcpy((void *)v229, v230, *(_QWORD *)(*(_QWORD *)(v243 - 8) + 64));
              goto LABEL_115;
            }
            if (v234)
            {
              sub_1000126B0(v229, type metadata accessor for AccessoryInfoResponseContent.Configuration);
              goto LABEL_56;
            }
            *(_QWORD *)v229 = *(_QWORD *)v230;
            v345 = *((_QWORD *)v230 + 1);
            *(_QWORD *)(v229 + 8) = v345;
            swift_bridgeObjectRetain(v345);
            swift_bridgeObjectRelease();
            *(_QWORD *)(v229 + 16) = *((_QWORD *)v230 + 2);
            v346 = *((_QWORD *)v230 + 3);
            *(_QWORD *)(v229 + 24) = v346;
            swift_bridgeObjectRetain(v346);
            swift_bridgeObjectRelease();
            *(_QWORD *)(v229 + 32) = *((_QWORD *)v230 + 4);
            v347 = *((_QWORD *)v230 + 5);
            *(_QWORD *)(v229 + 40) = v347;
            swift_bridgeObjectRetain(v347);
            swift_bridgeObjectRelease();
            *(_WORD *)(v229 + 48) = *((_WORD *)v230 + 24);
            *(_QWORD *)(v229 + 56) = *((_QWORD *)v230 + 7);
            v348 = *((_QWORD *)v230 + 8);
            *(_BYTE *)(v229 + 72) = v230[72];
            *(_QWORD *)(v229 + 64) = v348;
            v349 = v231[10];
            v350 = &v230[v349];
            __dstc = (void *)(v229 + v349);
            v351 = ((uint64_t (*)(void))v471)();
            v352 = ((uint64_t (*)(_BYTE *, uint64_t, uint64_t))v471)(v350, 1, v188);
            if (v351)
            {
              if (v352)
              {
                v353 = *(_QWORD *)(*(_QWORD *)(sub_10001A9A8(&qword_1010FBA40) - 8) + 64);
                v354 = __dstc;
LABEL_103:
                memcpy(v354, v350, v353);
                goto LABEL_106;
              }
              (*(void (**)(void *, _BYTE *, uint64_t))(v477 + 16))(__dstc, v350, v188);
              (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v477 + 56))(__dstc, 0, 1, v188);
            }
            else
            {
              if (v352)
              {
                (*(void (**)(void *, uint64_t))(v477 + 8))(__dstc, v188);
                v353 = *(_QWORD *)(*(_QWORD *)(sub_10001A9A8(&qword_1010FBA40) - 8) + 64);
                v354 = __dstc;
                goto LABEL_103;
              }
              (*(void (**)(void *, _BYTE *, uint64_t))(v477 + 24))(__dstc, v350, v188);
            }
LABEL_106:
            v383 = v231[11];
            v384 = &v230[v383];
            __dstd = (void *)(v229 + v383);
            v385 = ((uint64_t (*)(void))v471)();
            v386 = ((uint64_t (*)(_BYTE *, uint64_t, uint64_t))v471)(v384, 1, v188);
            if (v385)
            {
              if (!v386)
              {
                (*(void (**)(void *, _BYTE *, uint64_t))(v477 + 16))(__dstd, v384, v188);
                (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v477 + 56))(__dstd, 0, 1, v188);
                goto LABEL_114;
              }
              v387 = *(_QWORD *)(*(_QWORD *)(sub_10001A9A8(&qword_1010FBA40) - 8) + 64);
              v388 = __dstd;
            }
            else
            {
              if (!v386)
              {
                (*(void (**)(void *, _BYTE *, uint64_t))(v477 + 24))(__dstd, v384, v188);
                goto LABEL_114;
              }
              (*(void (**)(void *, uint64_t))(v477 + 8))(__dstd, v188);
              v387 = *(_QWORD *)(*(_QWORD *)(sub_10001A9A8(&qword_1010FBA40) - 8) + 64);
              v388 = __dstd;
            }
            memcpy(v388, v384, v387);
LABEL_114:
            v389 = v231[12];
            v390 = v229 + v389;
            v391 = &v230[v389];
            v392 = *(_QWORD *)v391;
            *(_BYTE *)(v390 + 8) = v391[8];
            *(_QWORD *)v390 = v392;
            v393 = v231[13];
            v394 = (_QWORD *)(v229 + v393);
            v395 = &v230[v393];
            *v394 = *v395;
            v396 = v395[1];
            v394[1] = v396;
            swift_bridgeObjectRetain(v396);
            swift_bridgeObjectRelease();
            v397 = v231[14];
            v398 = *(_QWORD *)&v230[v397];
            *(_QWORD *)(v229 + v397) = v398;
            swift_bridgeObjectRetain(v398);
            swift_bridgeObjectRelease();
            v399 = v231[15];
            v400 = (_QWORD *)(v229 + v399);
            v401 = &v230[v399];
            *v400 = *v401;
            v402 = v401[1];
            v400[1] = v402;
            swift_bridgeObjectRetain(v402);
            swift_bridgeObjectRelease();
            v403 = v231[16];
            v404 = *(_QWORD *)&v230[v403];
            *(_QWORD *)(v229 + v403) = v404;
            swift_bridgeObjectRetain(v404);
            swift_bridgeObjectRelease();
            v405 = v231[17];
            v406 = v229 + v405;
            v407 = &v230[v405];
            v408 = *(_OWORD *)v407;
            *(_BYTE *)(v406 + 16) = v407[16];
            *(_OWORD *)v406 = v408;
            v409 = v231[18];
            v410 = v229 + v409;
            v411 = &v230[v409];
            v412 = *(_OWORD *)v411;
            *(_BYTE *)(v410 + 16) = v411[16];
            *(_OWORD *)v410 = v412;
            goto LABEL_115;
          }
          (*(void (**)(_BYTE *, uint64_t))(v189 + 8))(v219, v188);
        }
        v223 = sub_10001A9A8(&qword_1010FBA40);
        memcpy(v219, v220, *(_QWORD *)(*(_QWORD *)(v223 - 8) + 64));
        goto LABEL_50;
      }
      (*(void (**)(_BYTE *, uint64_t))(v189 + 8))(v186, v188);
    }
    v217 = sub_10001A9A8(&qword_1010FBA40);
    memcpy(v186, v187, *(_QWORD *)(*(_QWORD *)(v217 - 8) + 64));
    goto LABEL_44;
  }
  if (v89)
  {
LABEL_25:
    v121 = sub_10001A9A8((uint64_t *)&unk_10111C0A0);
    memcpy(v83, v84, *(_QWORD *)(*(_QWORD *)(v121 - 8) + 64));
LABEL_26:
    v122 = v479;
    goto LABEL_69;
  }
  v469 = a1;
  v470 = v86;
  v90 = *(_QWORD *)v84;
  v83[8] = v84[8];
  *(_QWORD *)v83 = v90;
  v91 = v85[5];
  v92 = &v83[v91];
  v93 = &v84[v91];
  v94 = type metadata accessor for ServerStatusCode(0);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v94 - 8) + 16))(v92, v93, v94);
  v83[v85[6]] = v84[v85[6]];
  v83[v85[7]] = v84[v85[7]];
  v95 = v85[8];
  v96 = &v83[v95];
  v97 = &v84[v95];
  *v96 = *v97;
  __srcb = (void *)v97[1];
  v96[1] = __srcb;
  v83[v85[9]] = v84[v85[9]];
  v83[v85[10]] = v84[v85[10]];
  v83[v85[11]] = v84[v85[11]];
  v98 = v85[12];
  v99 = &v83[v98];
  v100 = &v84[v98];
  *v99 = *v100;
  v101 = v100[1];
  v99[1] = v101;
  v102 = v85[13];
  v103 = &v83[v102];
  v104 = &v84[v102];
  *v103 = *v104;
  v105 = v104[1];
  v103[1] = v105;
  v106 = v85[14];
  v107 = &v83[v106];
  v108 = &v84[v106];
  v109 = v108[8];
  *(_QWORD *)v107 = *(_QWORD *)v108;
  v107[8] = v109;
  v110 = v85[15];
  v111 = &v83[v110];
  v112 = &v84[v110];
  *v111 = *v112;
  v113 = v112[1];
  v111[1] = v113;
  v114 = v85[16];
  __dst = &v83[v114];
  v115 = &v84[v114];
  v116 = type metadata accessor for URL(0);
  v117 = *(_QWORD *)(v116 - 8);
  v118 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t, __n128))(v117 + 48);
  swift_bridgeObjectRetain(__srcb);
  swift_bridgeObjectRetain(v101);
  swift_bridgeObjectRetain(v105);
  v119 = swift_bridgeObjectRetain(v113);
  if (v118(v115, 1, v116, v119))
  {
    v120 = sub_10001A9A8(&qword_1010FBA40);
    memcpy(__dst, v115, *(_QWORD *)(*(_QWORD *)(v120 - 8) + 64));
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v117 + 16))(__dst, v115, v116);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v117 + 56))(__dst, 0, 1, v116);
  }
  v193 = v85[17];
  v194 = &v83[v193];
  v195 = &v84[v193];
  v473 = v117;
  v476 = v116;
  if (((unsigned int (*)(_BYTE *, uint64_t, uint64_t))v118)(&v84[v193], 1, v116))
  {
    v196 = sub_10001A9A8(&qword_1010FBA40);
    memcpy(v194, v195, *(_QWORD *)(*(_QWORD *)(v196 - 8) + 64));
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v117 + 16))(v194, v195, v116);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v117 + 56))(v194, 0, 1, v116);
  }
  v197 = v85[18];
  v198 = &v83[v197];
  v199 = &v84[v197];
  *v198 = *v199;
  v200 = v199[1];
  v198[1] = v200;
  *(_QWORD *)&v83[v85[19]] = *(_QWORD *)&v84[v85[19]];
  v201 = v85[20];
  v202 = &v83[v201];
  v203 = &v84[v201];
  v204 = (int *)type metadata accessor for AccessoryInfoResponseContent.Configuration(0);
  v205 = (_QWORD *)*((_QWORD *)v204 - 1);
  v206 = (unsigned int (*)(_QWORD *, uint64_t, int *, __n128))v205[6];
  v207 = swift_bridgeObjectRetain(v200);
  if (v206(v203, 1, v204, v207))
  {
    v208 = sub_10001A9A8(&qword_1010FBA50);
    memcpy(v202, v203, *(_QWORD *)(*(_QWORD *)(v208 - 8) + 64));
  }
  else
  {
    __dsta = v205;
    *v202 = *v203;
    v209 = v203[1];
    v202[1] = v209;
    v202[2] = v203[2];
    v210 = v203[3];
    v202[3] = v210;
    v202[4] = v203[4];
    v211 = v203[5];
    v202[5] = v211;
    *((_WORD *)v202 + 24) = *((_WORD *)v203 + 24);
    v202[7] = v203[7];
    v212 = v203[8];
    *((_BYTE *)v202 + 72) = *((_BYTE *)v203 + 72);
    v202[8] = v212;
    v213 = v204[10];
    __src = (char *)v202 + v213;
    v214 = (char *)v203 + v213;
    swift_bridgeObjectRetain(v209);
    swift_bridgeObjectRetain(v210);
    v215 = swift_bridgeObjectRetain(v211);
    if (v118(v214, 1, v476, v215))
    {
      v216 = sub_10001A9A8(&qword_1010FBA40);
      memcpy(__src, v214, *(_QWORD *)(*(_QWORD *)(v216 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v473 + 16))(__src, v214, v476);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v473 + 56))(__src, 0, 1, v476);
    }
    v244 = v204[11];
    v245 = (char *)v202 + v244;
    v246 = (char *)v203 + v244;
    if (((unsigned int (*)(char *, uint64_t, uint64_t))v118)((char *)v203 + v244, 1, v476))
    {
      v247 = sub_10001A9A8(&qword_1010FBA40);
      memcpy(v245, v246, *(_QWORD *)(*(_QWORD *)(v247 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v473 + 16))(v245, v246, v476);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v473 + 56))(v245, 0, 1, v476);
    }
    v248 = v204[12];
    v249 = (char *)v202 + v248;
    v250 = (char *)v203 + v248;
    v251 = *(_QWORD *)v250;
    v249[8] = v250[8];
    *(_QWORD *)v249 = v251;
    v252 = v204[13];
    v253 = (_QWORD *)((char *)v202 + v252);
    v254 = (_QWORD *)((char *)v203 + v252);
    *v253 = *v254;
    v255 = v254[1];
    v253[1] = v255;
    v256 = v204[14];
    v257 = *(_QWORD *)((char *)v203 + v256);
    *(_QWORD *)((char *)v202 + v256) = v257;
    v258 = v204[15];
    v259 = (_QWORD *)((char *)v202 + v258);
    v260 = (_QWORD *)((char *)v203 + v258);
    *v259 = *v260;
    v261 = v260[1];
    v259[1] = v261;
    v262 = v204[16];
    v263 = *(_QWORD *)((char *)v203 + v262);
    *(_QWORD *)((char *)v202 + v262) = v263;
    v264 = v204[17];
    v265 = (char *)v202 + v264;
    v266 = (char *)v203 + v264;
    v267 = *(_OWORD *)v266;
    v265[16] = v266[16];
    *(_OWORD *)v265 = v267;
    v268 = v204[18];
    v269 = (char *)v202 + v268;
    v270 = (char *)v203 + v268;
    v271 = *(_OWORD *)v270;
    v269[16] = v270[16];
    *(_OWORD *)v269 = v271;
    v272 = (void (*)(_QWORD *, _QWORD, uint64_t, int *, __n128))__dsta[7];
    swift_bridgeObjectRetain(v255);
    swift_bridgeObjectRetain(v257);
    swift_bridgeObjectRetain(v261);
    v273 = swift_bridgeObjectRetain(v263);
    v272(v202, 0, 1, v204, v273);
  }
  *(_DWORD *)&v83[v85[21]] = *(_DWORD *)&v84[v85[21]];
  v274 = v85[22];
  v275 = *(_QWORD *)&v84[v274];
  *(_QWORD *)&v83[v274] = v275;
  v276 = v85[23];
  v277 = &v83[v276];
  v278 = &v84[v276];
  v279 = *(_QWORD *)&v84[v276 + 8];
  swift_bridgeObjectRetain(v275);
  if (v279 >> 60 == 15)
  {
    *(_OWORD *)v277 = *v278;
  }
  else
  {
    v280 = *(_QWORD *)v278;
    sub_10001BBBC(v280, v279);
    *(_QWORD *)v277 = v280;
    *((_QWORD *)v277 + 1) = v279;
  }
  v281 = v85[24];
  v282 = &v83[v281];
  v283 = &v84[v281];
  v284 = *((_QWORD *)v283 + 1);
  if (v284 >> 60 == 15)
  {
    *(_OWORD *)v282 = *(_OWORD *)v283;
  }
  else
  {
    v285 = *(_QWORD *)v283;
    sub_10001BBBC(*(_QWORD *)v283, *((_QWORD *)v283 + 1));
    *(_QWORD *)v282 = v285;
    *((_QWORD *)v282 + 1) = v284;
  }
  v286 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v473 + 16);
  v286(&v83[v85[25]], &v84[v85[25]], v476);
  v286(&v83[v85[26]], &v84[v85[26]], v476);
  v286(&v83[v85[27]], &v84[v85[27]], v476);
  v286(&v83[v85[28]], &v84[v85[28]], v476);
  v286(&v83[v85[29]], &v84[v85[29]], v476);
  v286(&v83[v85[30]], &v84[v85[30]], v476);
  v287 = v85[31];
  v288 = &v83[v287];
  v289 = &v84[v287];
  *v288 = *v289;
  v290 = v289[1];
  v288[1] = v290;
  v291 = v85[32];
  v292 = *(_QWORD *)&v84[v291];
  *(_QWORD *)&v83[v291] = v292;
  v293 = v85[33];
  v294 = &v83[v293];
  v295 = &v84[v293];
  *v294 = *v295;
  v296 = v295[1];
  v294[1] = v296;
  v297 = v85[34];
  v298 = *(_QWORD *)&v84[v297];
  *(_QWORD *)&v83[v297] = v298;
  v299 = v85[35];
  v300 = &v83[v299];
  v301 = &v84[v299];
  v302 = v301[16];
  *(_OWORD *)v300 = *(_OWORD *)v301;
  v300[16] = v302;
  v303 = v85[36];
  v304 = &v83[v303];
  v305 = &v84[v303];
  v306 = v305[16];
  *(_OWORD *)v304 = *(_OWORD *)v305;
  v304[16] = v306;
  v307 = v85[37];
  v308 = &v83[v307];
  v309 = &v84[v307];
  swift_bridgeObjectRetain(v290);
  swift_bridgeObjectRetain(v292);
  swift_bridgeObjectRetain(v296);
  v310 = swift_bridgeObjectRetain(v298);
  ((void (*)(_BYTE *, _BYTE *, uint64_t, __n128))v286)(v308, v309, v476, v310);
  v286(&v83[v85[38]], &v84[v85[38]], v476);
  v286(&v83[v85[39]], &v84[v85[39]], v476);
  v286(&v83[v85[40]], &v84[v85[40]], v476);
  v286(&v83[v85[41]], &v84[v85[41]], v476);
  v286(&v83[v85[42]], &v84[v85[42]], v476);
  v83[v85[43]] = v84[v85[43]];
  v83[v85[44]] = v84[v85[44]];
  v83[v85[45]] = v84[v85[45]];
  v311 = v85[46];
  v312 = &v83[v311];
  v313 = &v84[v311];
  *v312 = *v313;
  v314 = v313[1];
  v312[1] = v314;
  v315 = v85[47];
  v316 = &v83[v315];
  v317 = &v84[v315];
  *v316 = *v317;
  v318 = v317[1];
  v316[1] = v318;
  v319 = *(void (**)(_BYTE *, _QWORD, uint64_t, int *, __n128))(v470 + 56);
  swift_bridgeObjectRetain(v314);
  v320 = swift_bridgeObjectRetain(v318);
  v319(v83, 0, 1, v85, v320);
  v80 = v480;
  v79 = v481;
  v81 = v482;
  v122 = v479;
  a1 = v469;
LABEL_69:
  *(_BYTE *)(a1 + v80[16]) = *(_BYTE *)(v79 + v80[16]);
  v321 = v80[17];
  v322 = *(_QWORD *)(v79 + v321);
  *(_QWORD *)(a1 + v321) = v322;
  swift_bridgeObjectRetain(v322);
  swift_bridgeObjectRelease();
  v323 = v80[18];
  v324 = (void *)(a1 + v323);
  v325 = (const void *)(v79 + v323);
  v326 = v122(a1 + v323, 1, v81);
  v327 = v122((uint64_t)v325, 1, v81);
  if (v326)
  {
    if (!v327)
    {
      (*(void (**)(void *, const void *, uint64_t))(v483 + 16))(v324, v325, v81);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v483 + 56))(v324, 0, 1, v81);
      goto LABEL_75;
    }
    goto LABEL_74;
  }
  if (v327)
  {
    (*(void (**)(void *, uint64_t))(v483 + 8))(v324, v81);
LABEL_74:
    v328 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
    memcpy(v324, v325, *(_QWORD *)(*(_QWORD *)(v328 - 8) + 64));
    goto LABEL_75;
  }
  v478((uint64_t)v324, (uint64_t)v325, v81);
LABEL_75:
  v329 = v80[19];
  v330 = (void *)(a1 + v329);
  v331 = (const void *)(v79 + v329);
  v332 = v122(a1 + v329, 1, v81);
  v333 = v122((uint64_t)v331, 1, v81);
  if (v332)
  {
    if (!v333)
    {
      (*(void (**)(void *, const void *, uint64_t))(v483 + 16))(v330, v331, v81);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v483 + 56))(v330, 0, 1, v81);
      goto LABEL_81;
    }
    goto LABEL_80;
  }
  if (v333)
  {
    (*(void (**)(void *, uint64_t))(v483 + 8))(v330, v81);
LABEL_80:
    v334 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
    memcpy(v330, v331, *(_QWORD *)(*(_QWORD *)(v334 - 8) + 64));
    goto LABEL_81;
  }
  v478((uint64_t)v330, (uint64_t)v331, v81);
LABEL_81:
  v335 = v80[20];
  v336 = (uint64_t *)(a1 + v335);
  v337 = (uint64_t *)(v79 + v335);
  if (((*(_QWORD *)(a1 + v335 + 8) >> 60) | 4) != 0xF)
  {
    v340 = v337[1];
    if (((v340 >> 60) | 4) != 0xF)
    {
      v342 = *v337;
      sub_10001BBBC(v342, v340);
      v343 = *v336;
      v344 = v336[1];
      *v336 = v342;
      v336[1] = v340;
      sub_10001BC14(v343, v344);
      goto LABEL_87;
    }
    sub_100163378((uint64_t)v336);
    goto LABEL_86;
  }
  v338 = v337[1];
  if (((v338 >> 60) | 4) == 0xF)
  {
LABEL_86:
    *(_OWORD *)v336 = *(_OWORD *)v337;
    goto LABEL_87;
  }
  v339 = *v337;
  sub_10001BBBC(v339, v338);
  *v336 = v339;
  v336[1] = v338;
LABEL_87:
  *(_BYTE *)(a1 + v80[21]) = *(_BYTE *)(v79 + v80[21]);
  *(_WORD *)(a1 + v80[22]) = *(_WORD *)(v79 + v80[22]);
  return a1;
}

uint64_t sub_1001E1730(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  void *v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  void *v25;
  const void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  char *v34;
  char *v35;
  int *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  char *v49;
  char *v50;
  void (*v51)(void *, const void *, uint64_t);
  uint64_t v52;
  _BYTE *v53;
  _BYTE *v54;
  int *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _BYTE *v60;
  _BYTE *v61;
  uint64_t v62;
  uint64_t v63;
  _BYTE *v64;
  _BYTE *v65;
  uint64_t v66;
  _BYTE *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _BYTE *v72;
  _BYTE *v73;
  uint64_t v74;
  uint64_t v75;
  _OWORD *v76;
  _OWORD *v77;
  int *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  __int128 v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  char *v92;
  char *v93;
  uint64_t v94;
  char *v95;
  char *v96;
  void (*v97)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v98;
  _BYTE *v99;
  _BYTE *v100;
  uint64_t v101;
  _BYTE *v102;
  _BYTE *v103;
  uint64_t v104;
  uint64_t v105;
  void *v106;
  const void *v107;
  uint64_t v108;
  uint64_t v109;
  void *v110;
  const void *v111;
  uint64_t v112;
  uint64_t v113;
  char *__src;
  char *__srca;
  _OWORD *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  _BYTE *__dst;
  char *__dsta;
  char *__dstb;
  unsigned int (*v124)(void);
  uint64_t v125;
  unsigned int (*v126)(uint64_t, uint64_t, uint64_t);
  uint64_t v127;
  void (*v128)(uint64_t, uint64_t, uint64_t);

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32);
  v8(a1, a2, v6);
  v9 = a3[5];
  v10 = (void *)(a1 + v9);
  v11 = (const void *)(a2 + v9);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a2 + v9, 1, v6))
  {
    v12 = sub_10001A9A8(&qword_1010ED860);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    v8((uint64_t)v10, (uint64_t)v11, v6);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v10, 0, 1, v6);
  }
  v13 = a3[7];
  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  v14 = a1 + v13;
  v15 = a2 + v13;
  v16 = type metadata accessor for MACAddress(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 32))(v14, v15, v16);
  v17 = a3[9];
  *(_QWORD *)(a1 + a3[8]) = *(_QWORD *)(a2 + a3[8]);
  *(_BYTE *)(a1 + v17) = *(_BYTE *)(a2 + v17);
  v18 = a3[10];
  v19 = a1 + v18;
  v20 = a2 + v18;
  v21 = type metadata accessor for Date(0);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = *(void (**)(uint64_t, uint64_t, uint64_t))(v22 + 32);
  v23(v19, v20, v21);
  v24 = a3[11];
  v25 = (void *)(a1 + v24);
  v26 = (const void *)(a2 + v24);
  v126 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v22 + 48);
  v127 = v22;
  v128 = v23;
  if (v126(a2 + v24, 1, v21))
  {
    v27 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
    memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
  }
  else
  {
    v23((uint64_t)v25, (uint64_t)v26, v21);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v25, 0, 1, v21);
  }
  v28 = a3[12];
  v29 = a3[13];
  v30 = a1 + v28;
  v31 = a2 + v28;
  *(_OWORD *)v30 = *(_OWORD *)v31;
  v32 = *(_BYTE *)(a2 + v29);
  *(_QWORD *)(v30 + 16) = *(_QWORD *)(v31 + 16);
  *(_BYTE *)(a1 + v29) = v32;
  v33 = a3[14];
  v34 = (char *)(a1 + v33);
  v35 = (char *)(a2 + v33);
  v36 = (int *)type metadata accessor for AccessoryMetadata(0);
  v37 = *((_QWORD *)v36 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v37 + 48))(v35, 1, v36))
  {
    v38 = sub_10001A9A8(&qword_101115E60);
    memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
  }
  else
  {
    v8((uint64_t)v34, (uint64_t)v35, v6);
    *(_OWORD *)&v34[v36[5]] = *(_OWORD *)&v35[v36[5]];
    *(_OWORD *)&v34[v36[6]] = *(_OWORD *)&v35[v36[6]];
    *(_OWORD *)&v34[v36[7]] = *(_OWORD *)&v35[v36[7]];
    *(_DWORD *)&v34[v36[8]] = *(_DWORD *)&v35[v36[8]];
    v39 = v36[9];
    v40 = &v34[v39];
    v41 = &v35[v39];
    *(_DWORD *)v40 = *(_DWORD *)v41;
    v40[4] = v41[4];
    v42 = v36[10];
    v43 = &v34[v42];
    v44 = &v35[v42];
    *(_OWORD *)v43 = *(_OWORD *)v44;
    v43[16] = v44[16];
    v45 = v36[11];
    v46 = &v34[v45];
    v47 = &v35[v45];
    v46[8] = v47[8];
    *(_QWORD *)v46 = *(_QWORD *)v47;
    v48 = v36[12];
    v49 = &v34[v48];
    v50 = &v35[v48];
    *(_DWORD *)v49 = *(_DWORD *)v50;
    v49[4] = v50[4];
    v34[v36[13]] = v35[v36[13]];
    v34[v36[14]] = v35[v36[14]];
    *(_OWORD *)&v34[v36[15]] = *(_OWORD *)&v35[v36[15]];
    (*(void (**)(char *, _QWORD, uint64_t, int *))(v37 + 56))(v34, 0, 1, v36);
  }
  v51 = (void (*)(void *, const void *, uint64_t))v128;
  v52 = a3[15];
  v53 = (_BYTE *)(a1 + v52);
  v54 = (_BYTE *)(a2 + v52);
  v55 = (int *)type metadata accessor for AccessoryProductInfo(0);
  v56 = *((_QWORD *)v55 - 1);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, int *))(v56 + 48))(v54, 1, v55))
  {
    v57 = sub_10001A9A8((uint64_t *)&unk_10111C0A0);
    memcpy(v53, v54, *(_QWORD *)(*(_QWORD *)(v57 - 8) + 64));
    v58 = v127;
  }
  else
  {
    v119 = v56;
    *(_QWORD *)v53 = *(_QWORD *)v54;
    v53[8] = v54[8];
    v59 = v55[5];
    v60 = &v53[v59];
    v61 = &v54[v59];
    v62 = type metadata accessor for ServerStatusCode(0);
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v62 - 8) + 32))(v60, v61, v62);
    v53[v55[6]] = v54[v55[6]];
    v53[v55[7]] = v54[v55[7]];
    *(_OWORD *)&v53[v55[8]] = *(_OWORD *)&v54[v55[8]];
    v53[v55[9]] = v54[v55[9]];
    v53[v55[10]] = v54[v55[10]];
    v53[v55[11]] = v54[v55[11]];
    *(_OWORD *)&v53[v55[12]] = *(_OWORD *)&v54[v55[12]];
    *(_OWORD *)&v53[v55[13]] = *(_OWORD *)&v54[v55[13]];
    v63 = v55[14];
    v64 = &v53[v63];
    v65 = &v54[v63];
    v64[8] = v65[8];
    *(_QWORD *)v64 = *(_QWORD *)v65;
    *(_OWORD *)&v53[v55[15]] = *(_OWORD *)&v54[v55[15]];
    v66 = v55[16];
    __dst = &v53[v66];
    v67 = &v54[v66];
    v68 = type metadata accessor for URL(0);
    v69 = *(_QWORD *)(v68 - 8);
    v124 = *(unsigned int (**)(void))(v69 + 48);
    v125 = v69;
    if (((unsigned int (*)(_BYTE *, uint64_t, uint64_t))v124)(v67, 1, v68))
    {
      v70 = sub_10001A9A8(&qword_1010FBA40);
      memcpy(__dst, v67, *(_QWORD *)(*(_QWORD *)(v70 - 8) + 64));
    }
    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v69 + 32))(__dst, v67, v68);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v69 + 56))(__dst, 0, 1, v68);
    }
    v71 = v55[17];
    v72 = &v53[v71];
    v73 = &v54[v71];
    v120 = v21;
    v118 = v68;
    if (((unsigned int (*)(_BYTE *, uint64_t, uint64_t))v124)(&v54[v71], 1, v68))
    {
      v74 = sub_10001A9A8(&qword_1010FBA40);
      memcpy(v72, v73, *(_QWORD *)(*(_QWORD *)(v74 - 8) + 64));
    }
    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v125 + 32))(v72, v73, v68);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v125 + 56))(v72, 0, 1, v68);
    }
    *(_OWORD *)&v53[v55[18]] = *(_OWORD *)&v54[v55[18]];
    *(_QWORD *)&v53[v55[19]] = *(_QWORD *)&v54[v55[19]];
    v75 = v55[20];
    v76 = &v53[v75];
    v77 = &v54[v75];
    v78 = (int *)type metadata accessor for AccessoryInfoResponseContent.Configuration(0);
    v79 = *((_QWORD *)v78 - 1);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v79 + 48))(v77, 1, v78))
    {
      v80 = sub_10001A9A8(&qword_1010FBA50);
      memcpy(v76, v77, *(_QWORD *)(*(_QWORD *)(v80 - 8) + 64));
      v81 = v118;
    }
    else
    {
      v117 = v76;
      v82 = v77[1];
      *v76 = *v77;
      v76[1] = v82;
      v76[2] = v77[2];
      *((_WORD *)v76 + 24) = *((_WORD *)v77 + 24);
      v83 = *((_QWORD *)v77 + 8);
      *((_QWORD *)v76 + 7) = *((_QWORD *)v77 + 7);
      *((_QWORD *)v76 + 8) = v83;
      *((_BYTE *)v76 + 72) = *((_BYTE *)v77 + 72);
      v84 = v78[10];
      __dsta = (char *)v76 + v84;
      __src = (char *)v77 + v84;
      v81 = v118;
      if (v124())
      {
        v85 = sub_10001A9A8(&qword_1010FBA40);
        memcpy(__dsta, __src, *(_QWORD *)(*(_QWORD *)(v85 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v125 + 32))(__dsta, __src, v118);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v125 + 56))(__dsta, 0, 1, v118);
      }
      v86 = v78[11];
      __dstb = (char *)v117 + v86;
      __srca = (char *)v77 + v86;
      if (v124())
      {
        v87 = sub_10001A9A8(&qword_1010FBA40);
        memcpy(__dstb, __srca, *(_QWORD *)(*(_QWORD *)(v87 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v125 + 32))(__dstb, __srca, v118);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v125 + 56))(__dstb, 0, 1, v118);
      }
      v88 = v78[12];
      v89 = (char *)v117 + v88;
      v90 = (char *)v77 + v88;
      *(_QWORD *)v89 = *(_QWORD *)v90;
      v89[8] = v90[8];
      *(_OWORD *)((char *)v117 + v78[13]) = *(_OWORD *)((char *)v77 + v78[13]);
      *(_QWORD *)((char *)v117 + v78[14]) = *(_QWORD *)((char *)v77 + v78[14]);
      *(_OWORD *)((char *)v117 + v78[15]) = *(_OWORD *)((char *)v77 + v78[15]);
      *(_QWORD *)((char *)v117 + v78[16]) = *(_QWORD *)((char *)v77 + v78[16]);
      v91 = v78[17];
      v92 = (char *)v117 + v91;
      v93 = (char *)v77 + v91;
      v92[16] = v93[16];
      *(_OWORD *)v92 = *(_OWORD *)v93;
      v94 = v78[18];
      v95 = (char *)v117 + v94;
      v96 = (char *)v77 + v94;
      v95[16] = v96[16];
      *(_OWORD *)v95 = *(_OWORD *)v96;
      (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v79 + 56))(v117, 0, 1, v78);
    }
    *(_DWORD *)&v53[v55[21]] = *(_DWORD *)&v54[v55[21]];
    *(_QWORD *)&v53[v55[22]] = *(_QWORD *)&v54[v55[22]];
    *(_OWORD *)&v53[v55[23]] = *(_OWORD *)&v54[v55[23]];
    *(_OWORD *)&v53[v55[24]] = *(_OWORD *)&v54[v55[24]];
    v97 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v125 + 32);
    v97(&v53[v55[25]], &v54[v55[25]], v81);
    v97(&v53[v55[26]], &v54[v55[26]], v81);
    v97(&v53[v55[27]], &v54[v55[27]], v81);
    v97(&v53[v55[28]], &v54[v55[28]], v81);
    v97(&v53[v55[29]], &v54[v55[29]], v81);
    v97(&v53[v55[30]], &v54[v55[30]], v81);
    *(_OWORD *)&v53[v55[31]] = *(_OWORD *)&v54[v55[31]];
    *(_QWORD *)&v53[v55[32]] = *(_QWORD *)&v54[v55[32]];
    *(_OWORD *)&v53[v55[33]] = *(_OWORD *)&v54[v55[33]];
    *(_QWORD *)&v53[v55[34]] = *(_QWORD *)&v54[v55[34]];
    v98 = v55[35];
    v99 = &v53[v98];
    v100 = &v54[v98];
    v99[16] = v100[16];
    *(_OWORD *)v99 = *(_OWORD *)v100;
    v101 = v55[36];
    v102 = &v53[v101];
    v103 = &v54[v101];
    v102[16] = v103[16];
    *(_OWORD *)v102 = *(_OWORD *)v103;
    v97(&v53[v55[37]], &v54[v55[37]], v81);
    v97(&v53[v55[38]], &v54[v55[38]], v81);
    v97(&v53[v55[39]], &v54[v55[39]], v81);
    v97(&v53[v55[40]], &v54[v55[40]], v81);
    v97(&v53[v55[41]], &v54[v55[41]], v81);
    v97(&v53[v55[42]], &v54[v55[42]], v81);
    v53[v55[43]] = v54[v55[43]];
    v53[v55[44]] = v54[v55[44]];
    v53[v55[45]] = v54[v55[45]];
    *(_OWORD *)&v53[v55[46]] = *(_OWORD *)&v54[v55[46]];
    *(_OWORD *)&v53[v55[47]] = *(_OWORD *)&v54[v55[47]];
    (*(void (**)(_BYTE *, _QWORD, uint64_t, int *))(v119 + 56))(v53, 0, 1, v55);
    v21 = v120;
    v58 = v127;
    v51 = (void (*)(void *, const void *, uint64_t))v128;
  }
  v104 = a3[17];
  *(_BYTE *)(a1 + a3[16]) = *(_BYTE *)(a2 + a3[16]);
  *(_QWORD *)(a1 + v104) = *(_QWORD *)(a2 + v104);
  v105 = a3[18];
  v106 = (void *)(a1 + v105);
  v107 = (const void *)(a2 + v105);
  if (v126(a2 + v105, 1, v21))
  {
    v108 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
    memcpy(v106, v107, *(_QWORD *)(*(_QWORD *)(v108 - 8) + 64));
  }
  else
  {
    v51(v106, v107, v21);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v58 + 56))(v106, 0, 1, v21);
  }
  v109 = a3[19];
  v110 = (void *)(a1 + v109);
  v111 = (const void *)(a2 + v109);
  if (v126(a2 + v109, 1, v21))
  {
    v112 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
    memcpy(v110, v111, *(_QWORD *)(*(_QWORD *)(v112 - 8) + 64));
  }
  else
  {
    v51(v110, v111, v21);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v58 + 56))(v110, 0, 1, v21);
  }
  v113 = a3[21];
  *(_OWORD *)(a1 + a3[20]) = *(_OWORD *)(a2 + a3[20]);
  *(_BYTE *)(a1 + v113) = *(_BYTE *)(a2 + v113);
  *(_WORD *)(a1 + a3[22]) = *(_WORD *)(a2 + a3[22]);
  return a1;
}

uint64_t sub_1001E21F4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  void *v10;
  const void *v11;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t);
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  void *v28;
  uint64_t (*v29)(void *, uint64_t, uint64_t);
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _BYTE *v41;
  _BYTE *v42;
  int *v43;
  uint64_t v44;
  uint64_t (*v45)(_BYTE *, uint64_t, int *);
  int v46;
  int v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  int *v61;
  uint64_t v62;
  uint64_t v63;
  _BYTE *v64;
  _BYTE *v65;
  int *v66;
  uint64_t v67;
  uint64_t (*v68)(_BYTE *, uint64_t, int *);
  int v69;
  int v70;
  uint64_t v71;
  _BYTE *v72;
  _BYTE *v73;
  uint64_t v74;
  uint64_t v75;
  _BYTE *v76;
  _BYTE *v77;
  uint64_t v78;
  _BYTE *v79;
  _BYTE *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  char *v100;
  uint64_t v101;
  char *v102;
  char *v103;
  uint64_t v104;
  char *v105;
  char *v106;
  uint64_t v107;
  char *v108;
  char *v109;
  uint64_t v110;
  _QWORD *v111;
  uint64_t *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  _BYTE *v116;
  _BYTE *v117;
  uint64_t v118;
  uint64_t v119;
  _QWORD *v120;
  uint64_t *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  _QWORD *v125;
  uint64_t *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  _QWORD *v130;
  uint64_t *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  _BYTE *v135;
  _BYTE *v136;
  uint64_t v137;
  _QWORD *v138;
  uint64_t *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  _BYTE *v143;
  _BYTE *v144;
  uint64_t v145;
  uint64_t (*v146)(void);
  int v147;
  int v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  _BYTE *v152;
  _BYTE *v153;
  uint64_t v154;
  uint64_t v155;
  _OWORD *v156;
  _OWORD *v157;
  int *v158;
  uint64_t v159;
  uint64_t v160;
  __int128 v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  char *v169;
  char *v170;
  uint64_t v171;
  char *v172;
  char *v173;
  uint64_t v174;
  char *v175;
  char *v176;
  void (*v177)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v178;
  _BYTE *v179;
  _BYTE *v180;
  uint64_t v181;
  _BYTE *v182;
  _BYTE *v183;
  uint64_t v184;
  _BYTE *v185;
  _BYTE *v186;
  int v187;
  int v188;
  uint64_t v189;
  uint64_t v190;
  _QWORD *v191;
  uint64_t *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  char *v196;
  char *v197;
  int *v198;
  uint64_t (*v199)(char *, uint64_t, int *);
  uint64_t v200;
  int v201;
  __int128 v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  char *v215;
  int v216;
  size_t v217;
  void *v218;
  uint64_t v219;
  char *v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  char *v224;
  uint64_t v225;
  uint64_t v226;
  char *v227;
  uint64_t v228;
  uint64_t v229;
  char *v230;
  uint64_t v231;
  char *v232;
  int v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  char *v238;
  uint64_t v239;
  _QWORD *v240;
  char *v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  _QWORD *v245;
  char *v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  char *v251;
  uint64_t v252;
  uint64_t v253;
  char *v254;
  uint64_t v255;
  uint64_t v256;
  _BYTE *v257;
  unint64_t v258;
  unint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t *v262;
  uint64_t *v263;
  unint64_t v264;
  unint64_t v265;
  uint64_t v266;
  void (*v267)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v268;
  _QWORD *v269;
  uint64_t *v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  _QWORD *v274;
  uint64_t *v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  _BYTE *v279;
  _BYTE *v280;
  uint64_t v281;
  _BYTE *v282;
  _BYTE *v283;
  uint64_t v284;
  _QWORD *v285;
  uint64_t *v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  _QWORD *v290;
  uint64_t *v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  void *v296;
  const void *v297;
  int v298;
  int v299;
  uint64_t v300;
  uint64_t v301;
  void *v302;
  const void *v303;
  int v304;
  int v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t *v308;
  uint64_t *v309;
  unint64_t v310;
  unint64_t v311;
  uint64_t v312;
  uint64_t v314;
  char *v315;
  int v316;
  int v317;
  void *__dst;
  void *__dsta;
  uint64_t v320;
  void *v321;
  void *v322;
  char *v323;
  char *v324;
  int *v325;
  char *__src;
  char *__srca;
  char *__srcb;
  uint64_t (*v329)(void);
  uint64_t v330;
  void (*v331)(uint64_t, uint64_t, uint64_t);
  uint64_t v332;
  uint64_t v333;
  void (*v334)(uint64_t, uint64_t, uint64_t);
  uint64_t v335;
  unsigned int (*v336)(void);
  uint64_t v337;
  uint64_t v338;
  uint64_t (*v339)(uint64_t, uint64_t, uint64_t);
  int *v340;
  uint64_t v341;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 40);
  v8(a1, a2, v6);
  v9 = a3[5];
  v10 = (void *)(a1 + v9);
  v11 = (const void *)(a2 + v9);
  v335 = v7;
  v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  LODWORD(v7) = v12(a1 + v9, 1, v6);
  v13 = v12((uint64_t)v11, 1, v6);
  v331 = v8;
  if ((_DWORD)v7)
  {
    if (!v13)
    {
      (*(void (**)(void *, const void *, uint64_t))(v335 + 32))(v10, v11, v6);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v335 + 56))(v10, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(void *, uint64_t))(v335 + 8))(v10, v6);
LABEL_6:
    v14 = sub_10001A9A8(&qword_1010ED860);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  v8((uint64_t)v10, (uint64_t)v11, v6);
LABEL_7:
  v15 = a3[7];
  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = type metadata accessor for MACAddress(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 40))(v16, v17, v18);
  *(_QWORD *)(a1 + a3[8]) = *(_QWORD *)(a2 + a3[8]);
  swift_bridgeObjectRelease();
  v19 = a3[10];
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = type metadata accessor for Date(0);
  v23 = *(_QWORD *)(v22 - 8);
  v334 = *(void (**)(uint64_t, uint64_t, uint64_t))(v23 + 40);
  v334(v20, v21, v22);
  v24 = a3[11];
  v25 = a1;
  v26 = (void *)(a1 + v24);
  v27 = a2;
  v28 = (void *)(a2 + v24);
  v29 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v23 + 48);
  v30 = v29(v26, 1, v22);
  v339 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v29;
  v31 = v29(v28, 1, v22);
  v341 = v22;
  v338 = v23;
  if (v30)
  {
    if (!v31)
    {
      (*(void (**)(void *, void *, uint64_t))(v23 + 32))(v26, v28, v22);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v26, 0, 1, v22);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v31)
  {
    (*(void (**)(void *, uint64_t))(v23 + 8))(v26, v22);
LABEL_12:
    v32 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
    memcpy(v26, v28, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
    goto LABEL_13;
  }
  v334((uint64_t)v26, (uint64_t)v28, v22);
LABEL_13:
  v33 = v27;
  v34 = v25;
  v35 = a3[12];
  v36 = v25 + v35;
  v37 = v33 + v35;
  *(_BYTE *)v36 = *(_BYTE *)v37;
  v39 = *(_QWORD *)(v37 + 8);
  v38 = *(_QWORD *)(v37 + 16);
  *(_QWORD *)(v36 + 8) = v39;
  *(_QWORD *)(v36 + 16) = v38;
  swift_bridgeObjectRelease();
  v40 = a3[14];
  v340 = a3;
  *(_BYTE *)(v25 + a3[13]) = *(_BYTE *)(v33 + a3[13]);
  v41 = (_BYTE *)(v25 + v40);
  v42 = (_BYTE *)(v33 + v40);
  v43 = (int *)type metadata accessor for AccessoryMetadata(0);
  v44 = *((_QWORD *)v43 - 1);
  v45 = *(uint64_t (**)(_BYTE *, uint64_t, int *))(v44 + 48);
  v46 = v45(v41, 1, v43);
  v47 = v45(v42, 1, v43);
  if (v46)
  {
    if (!v47)
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v335 + 32))(v41, v42, v6);
      *(_OWORD *)&v41[v43[5]] = *(_OWORD *)&v42[v43[5]];
      *(_OWORD *)&v41[v43[6]] = *(_OWORD *)&v42[v43[6]];
      *(_OWORD *)&v41[v43[7]] = *(_OWORD *)&v42[v43[7]];
      *(_DWORD *)&v41[v43[8]] = *(_DWORD *)&v42[v43[8]];
      v48 = v43[9];
      v49 = &v41[v48];
      v50 = &v42[v48];
      *(_DWORD *)v49 = *(_DWORD *)v50;
      v49[4] = v50[4];
      v51 = v43[10];
      v52 = &v41[v51];
      v53 = &v42[v51];
      *(_OWORD *)v52 = *(_OWORD *)v53;
      v52[16] = v53[16];
      v54 = v43[11];
      v55 = &v41[v54];
      v56 = &v42[v54];
      v55[8] = v56[8];
      *(_QWORD *)v55 = *(_QWORD *)v56;
      v57 = v43[12];
      v58 = &v41[v57];
      v59 = &v42[v57];
      *(_DWORD *)v58 = *(_DWORD *)v59;
      v58[4] = v59[4];
      v41[v43[13]] = v42[v43[13]];
      v41[v43[14]] = v42[v43[14]];
      *(_OWORD *)&v41[v43[15]] = *(_OWORD *)&v42[v43[15]];
      (*(void (**)(_BYTE *, _QWORD, uint64_t, int *))(v44 + 56))(v41, 0, 1, v43);
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  if (v47)
  {
    sub_1000126B0((uint64_t)v41, type metadata accessor for AccessoryMetadata);
LABEL_18:
    v60 = sub_10001A9A8(&qword_101115E60);
    memcpy(v41, v42, *(_QWORD *)(*(_QWORD *)(v60 - 8) + 64));
    goto LABEL_19;
  }
  v331((uint64_t)v41, (uint64_t)v42, v6);
  v85 = v43[5];
  v86 = *(_QWORD *)&v41[v85];
  v87 = *(_QWORD *)&v41[v85 + 8];
  *(_OWORD *)&v41[v85] = *(_OWORD *)&v42[v85];
  sub_10001BC14(v86, v87);
  v88 = v43[6];
  v89 = &v41[v88];
  v90 = (uint64_t *)&v42[v88];
  v92 = *v90;
  v91 = v90[1];
  *v89 = v92;
  v89[1] = v91;
  swift_bridgeObjectRelease();
  v93 = v43[7];
  v94 = &v41[v93];
  v95 = (uint64_t *)&v42[v93];
  v97 = *v95;
  v96 = v95[1];
  *v94 = v97;
  v94[1] = v96;
  swift_bridgeObjectRelease();
  *(_DWORD *)&v41[v43[8]] = *(_DWORD *)&v42[v43[8]];
  v98 = v43[9];
  v99 = &v41[v98];
  v100 = &v42[v98];
  *(_DWORD *)v99 = *(_DWORD *)v100;
  v99[4] = v100[4];
  v101 = v43[10];
  v102 = &v41[v101];
  v103 = &v42[v101];
  *(_OWORD *)v102 = *(_OWORD *)v103;
  v102[16] = v103[16];
  v104 = v43[11];
  v105 = &v41[v104];
  v106 = &v42[v104];
  *(_QWORD *)v105 = *(_QWORD *)v106;
  v105[8] = v106[8];
  v107 = v43[12];
  v108 = &v41[v107];
  v109 = &v42[v107];
  *(_DWORD *)v108 = *(_DWORD *)v109;
  v108[4] = v109[4];
  v41[v43[13]] = v42[v43[13]];
  v41[v43[14]] = v42[v43[14]];
  v110 = v43[15];
  v111 = &v41[v110];
  v112 = (uint64_t *)&v42[v110];
  v114 = *v112;
  v113 = v112[1];
  *v111 = v114;
  v111[1] = v113;
  swift_bridgeObjectRelease();
LABEL_19:
  v61 = v340;
  v62 = v341;
  v63 = v340[15];
  v64 = (_BYTE *)(v25 + v63);
  v65 = (_BYTE *)(v33 + v63);
  v66 = (int *)type metadata accessor for AccessoryProductInfo(0);
  v67 = *((_QWORD *)v66 - 1);
  v68 = *(uint64_t (**)(_BYTE *, uint64_t, int *))(v67 + 48);
  v69 = v68(v64, 1, v66);
  v70 = v68(v65, 1, v66);
  if (v69)
  {
    if (!v70)
    {
      *(_QWORD *)v64 = *(_QWORD *)v65;
      v64[8] = v65[8];
      v71 = v66[5];
      v72 = &v64[v71];
      v73 = &v65[v71];
      v74 = type metadata accessor for ServerStatusCode(0);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v74 - 8) + 32))(v72, v73, v74);
      v64[v66[6]] = v65[v66[6]];
      v64[v66[7]] = v65[v66[7]];
      *(_OWORD *)&v64[v66[8]] = *(_OWORD *)&v65[v66[8]];
      v64[v66[9]] = v65[v66[9]];
      v64[v66[10]] = v65[v66[10]];
      v64[v66[11]] = v65[v66[11]];
      *(_OWORD *)&v64[v66[12]] = *(_OWORD *)&v65[v66[12]];
      *(_OWORD *)&v64[v66[13]] = *(_OWORD *)&v65[v66[13]];
      v75 = v66[14];
      v76 = &v64[v75];
      v77 = &v65[v75];
      v76[8] = v77[8];
      *(_QWORD *)v76 = *(_QWORD *)v77;
      *(_OWORD *)&v64[v66[15]] = *(_OWORD *)&v65[v66[15]];
      v78 = v66[16];
      v79 = &v64[v78];
      v80 = &v65[v78];
      v81 = type metadata accessor for URL(0);
      v82 = *(_QWORD *)(v81 - 8);
      v336 = *(unsigned int (**)(void))(v82 + 48);
      if (((unsigned int (*)(_BYTE *, uint64_t, uint64_t))v336)(v80, 1, v81))
      {
        v83 = sub_10001A9A8(&qword_1010FBA40);
        memcpy(v79, v80, *(_QWORD *)(*(_QWORD *)(v83 - 8) + 64));
      }
      else
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v82 + 32))(v79, v80, v81);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v82 + 56))(v79, 0, 1, v81);
      }
      v151 = v66[17];
      v152 = &v64[v151];
      v153 = &v65[v151];
      v330 = v67;
      v333 = v82;
      if (((unsigned int (*)(_BYTE *, uint64_t, uint64_t))v336)(&v65[v151], 1, v81))
      {
        v154 = sub_10001A9A8(&qword_1010FBA40);
        memcpy(v152, v153, *(_QWORD *)(*(_QWORD *)(v154 - 8) + 64));
      }
      else
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v82 + 32))(v152, v153, v81);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v82 + 56))(v152, 0, 1, v81);
      }
      *(_OWORD *)&v64[v66[18]] = *(_OWORD *)&v65[v66[18]];
      *(_QWORD *)&v64[v66[19]] = *(_QWORD *)&v65[v66[19]];
      v155 = v66[20];
      v156 = &v64[v155];
      v157 = &v65[v155];
      v158 = (int *)type metadata accessor for AccessoryInfoResponseContent.Configuration(0);
      v159 = *((_QWORD *)v158 - 1);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v159 + 48))(v157, 1, v158))
      {
        v160 = sub_10001A9A8(&qword_1010FBA50);
        memcpy(v156, v157, *(_QWORD *)(*(_QWORD *)(v160 - 8) + 64));
      }
      else
      {
        v161 = v157[1];
        *v156 = *v157;
        v156[1] = v161;
        v156[2] = v157[2];
        *((_WORD *)v156 + 24) = *((_WORD *)v157 + 24);
        v162 = *((_QWORD *)v157 + 8);
        *((_QWORD *)v156 + 7) = *((_QWORD *)v157 + 7);
        *((_QWORD *)v156 + 8) = v162;
        *((_BYTE *)v156 + 72) = *((_BYTE *)v157 + 72);
        v163 = v158[10];
        v323 = (char *)v157 + v163;
        __src = (char *)v156 + v163;
        if (v336())
        {
          v164 = sub_10001A9A8(&qword_1010FBA40);
          memcpy(__src, v323, *(_QWORD *)(*(_QWORD *)(v164 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v333 + 32))(__src, v323, v81);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v333 + 56))(__src, 0, 1, v81);
        }
        v166 = v158[11];
        v324 = (char *)v157 + v166;
        __srca = (char *)v156 + v166;
        if (v336())
        {
          v167 = sub_10001A9A8(&qword_1010FBA40);
          memcpy(__srca, v324, *(_QWORD *)(*(_QWORD *)(v167 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v333 + 32))(__srca, v324, v81);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v333 + 56))(__srca, 0, 1, v81);
        }
        v168 = v158[12];
        v169 = (char *)v156 + v168;
        v170 = (char *)v157 + v168;
        *(_QWORD *)v169 = *(_QWORD *)v170;
        v169[8] = v170[8];
        *(_OWORD *)((char *)v156 + v158[13]) = *(_OWORD *)((char *)v157 + v158[13]);
        *(_QWORD *)((char *)v156 + v158[14]) = *(_QWORD *)((char *)v157 + v158[14]);
        *(_OWORD *)((char *)v156 + v158[15]) = *(_OWORD *)((char *)v157 + v158[15]);
        *(_QWORD *)((char *)v156 + v158[16]) = *(_QWORD *)((char *)v157 + v158[16]);
        v171 = v158[17];
        v172 = (char *)v156 + v171;
        v173 = (char *)v157 + v171;
        v172[16] = v173[16];
        *(_OWORD *)v172 = *(_OWORD *)v173;
        v174 = v158[18];
        v175 = (char *)v156 + v174;
        v176 = (char *)v157 + v174;
        v175[16] = v176[16];
        *(_OWORD *)v175 = *(_OWORD *)v176;
        (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v159 + 56))(v156, 0, 1, v158);
      }
      v61 = v340;
      *(_DWORD *)&v64[v66[21]] = *(_DWORD *)&v65[v66[21]];
      *(_QWORD *)&v64[v66[22]] = *(_QWORD *)&v65[v66[22]];
      *(_OWORD *)&v64[v66[23]] = *(_OWORD *)&v65[v66[23]];
      *(_OWORD *)&v64[v66[24]] = *(_OWORD *)&v65[v66[24]];
      v177 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v333 + 32);
      v177(&v64[v66[25]], &v65[v66[25]], v81);
      v177(&v64[v66[26]], &v65[v66[26]], v81);
      v177(&v64[v66[27]], &v65[v66[27]], v81);
      v177(&v64[v66[28]], &v65[v66[28]], v81);
      v177(&v64[v66[29]], &v65[v66[29]], v81);
      v177(&v64[v66[30]], &v65[v66[30]], v81);
      *(_OWORD *)&v64[v66[31]] = *(_OWORD *)&v65[v66[31]];
      *(_QWORD *)&v64[v66[32]] = *(_QWORD *)&v65[v66[32]];
      *(_OWORD *)&v64[v66[33]] = *(_OWORD *)&v65[v66[33]];
      *(_QWORD *)&v64[v66[34]] = *(_QWORD *)&v65[v66[34]];
      v178 = v66[35];
      v179 = &v64[v178];
      v180 = &v65[v178];
      v179[16] = v180[16];
      *(_OWORD *)v179 = *(_OWORD *)v180;
      v181 = v66[36];
      v182 = &v64[v181];
      v183 = &v65[v181];
      v182[16] = v183[16];
      *(_OWORD *)v182 = *(_OWORD *)v183;
      v177(&v64[v66[37]], &v65[v66[37]], v81);
      v177(&v64[v66[38]], &v65[v66[38]], v81);
      v177(&v64[v66[39]], &v65[v66[39]], v81);
      v177(&v64[v66[40]], &v65[v66[40]], v81);
      v177(&v64[v66[41]], &v65[v66[41]], v81);
      v177(&v64[v66[42]], &v65[v66[42]], v81);
      v64[v66[43]] = v65[v66[43]];
      v64[v66[44]] = v65[v66[44]];
      v64[v66[45]] = v65[v66[45]];
      *(_OWORD *)&v64[v66[46]] = *(_OWORD *)&v65[v66[46]];
      *(_OWORD *)&v64[v66[47]] = *(_OWORD *)&v65[v66[47]];
      (*(void (**)(_BYTE *, _QWORD, uint64_t, int *))(v330 + 56))(v64, 0, 1, v66);
      goto LABEL_97;
    }
LABEL_25:
    v84 = sub_10001A9A8((uint64_t *)&unk_10111C0A0);
    memcpy(v64, v65, *(_QWORD *)(*(_QWORD *)(v84 - 8) + 64));
    goto LABEL_98;
  }
  if (v70)
  {
    sub_1000126B0((uint64_t)v64, type metadata accessor for AccessoryProductInfo);
    goto LABEL_25;
  }
  *(_QWORD *)v64 = *(_QWORD *)v65;
  v64[8] = v65[8];
  v115 = v66[5];
  v116 = &v64[v115];
  v117 = &v65[v115];
  v118 = type metadata accessor for ServerStatusCode(0);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v118 - 8) + 40))(v116, v117, v118);
  v64[v66[6]] = v65[v66[6]];
  v64[v66[7]] = v65[v66[7]];
  v119 = v66[8];
  v120 = &v64[v119];
  v121 = (uint64_t *)&v65[v119];
  v123 = *v121;
  v122 = v121[1];
  *v120 = v123;
  v120[1] = v122;
  swift_bridgeObjectRelease();
  v64[v66[9]] = v65[v66[9]];
  v64[v66[10]] = v65[v66[10]];
  v64[v66[11]] = v65[v66[11]];
  v124 = v66[12];
  v125 = &v64[v124];
  v126 = (uint64_t *)&v65[v124];
  v128 = *v126;
  v127 = v126[1];
  *v125 = v128;
  v125[1] = v127;
  swift_bridgeObjectRelease();
  v129 = v66[13];
  v130 = &v64[v129];
  v131 = (uint64_t *)&v65[v129];
  v133 = *v131;
  v132 = v131[1];
  *v130 = v133;
  v130[1] = v132;
  swift_bridgeObjectRelease();
  v134 = v66[14];
  v135 = &v64[v134];
  v136 = &v65[v134];
  *(_QWORD *)v135 = *(_QWORD *)v136;
  v135[8] = v136[8];
  v137 = v66[15];
  v138 = &v64[v137];
  v139 = (uint64_t *)&v65[v137];
  v141 = *v139;
  v140 = v139[1];
  *v138 = v141;
  v138[1] = v140;
  swift_bridgeObjectRelease();
  v142 = v66[16];
  v143 = &v64[v142];
  v144 = &v65[v142];
  v145 = type metadata accessor for URL(0);
  v337 = *(_QWORD *)(v145 - 8);
  v146 = *(uint64_t (**)(void))(v337 + 48);
  v147 = ((uint64_t (*)(_BYTE *, uint64_t, uint64_t))v146)(v143, 1, v145);
  v329 = v146;
  v332 = v145;
  v148 = ((uint64_t (*)(_BYTE *, uint64_t, uint64_t))v146)(v144, 1, v145);
  if (v147)
  {
    if (v148)
    {
      v149 = sub_10001A9A8(&qword_1010FBA40);
      memcpy(v143, v144, *(_QWORD *)(*(_QWORD *)(v149 - 8) + 64));
      v150 = v145;
    }
    else
    {
      v150 = v145;
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v337 + 32))(v143, v144, v145);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v337 + 56))(v143, 0, 1, v145);
    }
  }
  else
  {
    v150 = v145;
    if (v148)
    {
      (*(void (**)(_BYTE *, uint64_t))(v337 + 8))(v143, v145);
      v165 = sub_10001A9A8(&qword_1010FBA40);
      memcpy(v143, v144, *(_QWORD *)(*(_QWORD *)(v165 - 8) + 64));
    }
    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v337 + 40))(v143, v144, v145);
    }
  }
  v184 = v66[17];
  v185 = &v64[v184];
  v186 = &v65[v184];
  v187 = ((uint64_t (*)(_BYTE *, uint64_t, uint64_t))v329)(&v64[v184], 1, v150);
  v188 = ((uint64_t (*)(_BYTE *, uint64_t, uint64_t))v329)(v186, 1, v150);
  if (v187)
  {
    if (!v188)
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v337 + 32))(v185, v186, v145);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v337 + 56))(v185, 0, 1, v145);
      goto LABEL_56;
    }
    goto LABEL_55;
  }
  if (v188)
  {
    (*(void (**)(_BYTE *, uint64_t))(v337 + 8))(v185, v145);
LABEL_55:
    v189 = sub_10001A9A8(&qword_1010FBA40);
    memcpy(v185, v186, *(_QWORD *)(*(_QWORD *)(v189 - 8) + 64));
    goto LABEL_56;
  }
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v337 + 40))(v185, v186, v145);
LABEL_56:
  v190 = v66[18];
  v191 = &v64[v190];
  v192 = (uint64_t *)&v65[v190];
  v194 = *v192;
  v193 = v192[1];
  *v191 = v194;
  v191[1] = v193;
  swift_bridgeObjectRelease();
  *(_QWORD *)&v64[v66[19]] = *(_QWORD *)&v65[v66[19]];
  v195 = v66[20];
  v196 = &v64[v195];
  v197 = &v65[v195];
  v198 = (int *)type metadata accessor for AccessoryInfoResponseContent.Configuration(0);
  v320 = *((_QWORD *)v198 - 1);
  v199 = *(uint64_t (**)(char *, uint64_t, int *))(v320 + 48);
  v200 = (uint64_t)v196;
  LODWORD(v196) = v199(v196, 1, v198);
  v325 = v198;
  __srcb = v197;
  v201 = v199(v197, 1, v198);
  if (!(_DWORD)v196)
  {
    if (v201)
    {
      sub_1000126B0(v200, type metadata accessor for AccessoryInfoResponseContent.Configuration);
      goto LABEL_62;
    }
    v210 = *((_QWORD *)v197 + 1);
    *(_QWORD *)v200 = *(_QWORD *)v197;
    *(_QWORD *)(v200 + 8) = v210;
    swift_bridgeObjectRelease();
    v211 = *((_QWORD *)v197 + 3);
    *(_QWORD *)(v200 + 16) = *((_QWORD *)v197 + 2);
    *(_QWORD *)(v200 + 24) = v211;
    swift_bridgeObjectRelease();
    v212 = *((_QWORD *)v197 + 5);
    *(_QWORD *)(v200 + 32) = *((_QWORD *)v197 + 4);
    *(_QWORD *)(v200 + 40) = v212;
    swift_bridgeObjectRelease();
    *(_WORD *)(v200 + 48) = *((_WORD *)v197 + 24);
    v213 = *((_QWORD *)v197 + 8);
    *(_QWORD *)(v200 + 56) = *((_QWORD *)v197 + 7);
    *(_QWORD *)(v200 + 64) = v213;
    *(_BYTE *)(v200 + 72) = v197[72];
    v214 = v198[10];
    v215 = &v197[v214];
    v321 = (void *)(v200 + v214);
    v316 = v329();
    v216 = ((uint64_t (*)(char *, uint64_t, uint64_t))v329)(v215, 1, v332);
    if (v316)
    {
      if (!v216)
      {
        (*(void (**)(void *, char *, uint64_t))(v337 + 32))(v321, v215, v332);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v337 + 56))(v321, 0, 1, v332);
        goto LABEL_77;
      }
      v217 = *(_QWORD *)(*(_QWORD *)(sub_10001A9A8(&qword_1010FBA40) - 8) + 64);
      v218 = v321;
    }
    else
    {
      if (!v216)
      {
        (*(void (**)(void *, char *, uint64_t))(v337 + 40))(v321, v215, v332);
        goto LABEL_77;
      }
      (*(void (**)(void *, uint64_t))(v337 + 8))(v321, v332);
      v217 = *(_QWORD *)(*(_QWORD *)(sub_10001A9A8(&qword_1010FBA40) - 8) + 64);
      v218 = v321;
    }
    memcpy(v218, v215, v217);
LABEL_77:
    v231 = v198[11];
    v232 = &v197[v231];
    v322 = (void *)(v200 + v231);
    v317 = v329();
    v233 = ((uint64_t (*)(char *, uint64_t, uint64_t))v329)(v232, 1, v332);
    if (v317)
    {
      if (v233)
      {
        v234 = sub_10001A9A8(&qword_1010FBA40);
        memcpy(v322, v232, *(_QWORD *)(*(_QWORD *)(v234 - 8) + 64));
        v206 = v332;
      }
      else
      {
        v206 = v332;
        (*(void (**)(void *, char *, uint64_t))(v337 + 32))(v322, v232, v332);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v337 + 56))(v322, 0, 1, v332);
      }
    }
    else
    {
      v206 = v332;
      if (v233)
      {
        (*(void (**)(void *, uint64_t))(v337 + 8))(v322, v332);
        v235 = sub_10001A9A8(&qword_1010FBA40);
        memcpy(v322, v232, *(_QWORD *)(*(_QWORD *)(v235 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, char *, uint64_t))(v337 + 40))(v322, v232, v332);
      }
    }
    v236 = v198[12];
    v237 = v200 + v236;
    v238 = &__srcb[v236];
    *(_QWORD *)v237 = *(_QWORD *)v238;
    *(_BYTE *)(v237 + 8) = v238[8];
    v239 = v198[13];
    v240 = (_QWORD *)(v200 + v239);
    v241 = &__srcb[v239];
    v243 = *(_QWORD *)v241;
    v242 = *((_QWORD *)v241 + 1);
    *v240 = v243;
    v240[1] = v242;
    swift_bridgeObjectRelease();
    *(_QWORD *)(v200 + v198[14]) = *(_QWORD *)&__srcb[v198[14]];
    swift_bridgeObjectRelease();
    v244 = v198[15];
    v245 = (_QWORD *)(v200 + v244);
    v246 = &__srcb[v244];
    v248 = *(_QWORD *)v246;
    v247 = *((_QWORD *)v246 + 1);
    *v245 = v248;
    v245[1] = v247;
    swift_bridgeObjectRelease();
    *(_QWORD *)(v200 + v198[16]) = *(_QWORD *)&__srcb[v198[16]];
    swift_bridgeObjectRelease();
    v249 = v198[17];
    v250 = v200 + v249;
    v251 = &__srcb[v249];
    *(_OWORD *)v250 = *(_OWORD *)v251;
    *(_BYTE *)(v250 + 16) = v251[16];
    v252 = v198[18];
    v253 = v200 + v252;
    v254 = &__srcb[v252];
    *(_BYTE *)(v253 + 16) = v254[16];
    *(_OWORD *)v253 = *(_OWORD *)v254;
    goto LABEL_85;
  }
  if (v201)
  {
LABEL_62:
    v208 = sub_10001A9A8(&qword_1010FBA50);
    memcpy((void *)v200, v197, *(_QWORD *)(*(_QWORD *)(v208 - 8) + 64));
    v209 = v337;
    v206 = v332;
    goto LABEL_86;
  }
  v202 = *((_OWORD *)v197 + 1);
  v203 = v200;
  *(_OWORD *)v200 = *(_OWORD *)v197;
  *(_OWORD *)(v200 + 16) = v202;
  *(_OWORD *)(v200 + 32) = *((_OWORD *)v197 + 2);
  *(_WORD *)(v200 + 48) = *((_WORD *)v197 + 24);
  v204 = *((_QWORD *)v197 + 8);
  *(_QWORD *)(v200 + 56) = *((_QWORD *)v197 + 7);
  *(_QWORD *)(v200 + 64) = v204;
  *(_BYTE *)(v200 + 72) = v197[72];
  v205 = v325[10];
  v315 = &v197[v205];
  __dst = (void *)(v200 + v205);
  v206 = v332;
  if (v329())
  {
    v207 = sub_10001A9A8(&qword_1010FBA40);
    memcpy(__dst, v315, *(_QWORD *)(*(_QWORD *)(v207 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(v337 + 32))(__dst, v315, v332);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v337 + 56))(__dst, 0, 1, v332);
  }
  v219 = v325[11];
  __dsta = (void *)(v200 + v219);
  v220 = &__srcb[v219];
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v329)(&__srcb[v219], 1, v332))
  {
    v221 = sub_10001A9A8(&qword_1010FBA40);
    memcpy(__dsta, v220, *(_QWORD *)(*(_QWORD *)(v221 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(v337 + 32))(__dsta, v220, v332);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v337 + 56))(__dsta, 0, 1, v332);
  }
  v222 = v325[12];
  v223 = v203 + v222;
  v224 = &__srcb[v222];
  *(_QWORD *)v223 = *(_QWORD *)v224;
  *(_BYTE *)(v223 + 8) = v224[8];
  *(_OWORD *)(v203 + v325[13]) = *(_OWORD *)&__srcb[v325[13]];
  *(_QWORD *)(v203 + v325[14]) = *(_QWORD *)&__srcb[v325[14]];
  *(_OWORD *)(v203 + v325[15]) = *(_OWORD *)&__srcb[v325[15]];
  *(_QWORD *)(v203 + v325[16]) = *(_QWORD *)&__srcb[v325[16]];
  v225 = v325[17];
  v226 = v203 + v225;
  v227 = &__srcb[v225];
  *(_BYTE *)(v226 + 16) = v227[16];
  *(_OWORD *)v226 = *(_OWORD *)v227;
  v228 = v325[18];
  v229 = v203 + v228;
  v230 = &__srcb[v228];
  *(_BYTE *)(v229 + 16) = v230[16];
  *(_OWORD *)v229 = *(_OWORD *)v230;
  (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v320 + 56))(v203, 0, 1, v325);
LABEL_85:
  v209 = v337;
LABEL_86:
  *(_DWORD *)&v64[v66[21]] = *(_DWORD *)&v65[v66[21]];
  *(_QWORD *)&v64[v66[22]] = *(_QWORD *)&v65[v66[22]];
  swift_bridgeObjectRelease();
  v255 = v66[23];
  v256 = (uint64_t)&v64[v255];
  v257 = &v65[v255];
  v258 = *(_QWORD *)&v64[v255 + 8];
  if (v258 >> 60 == 15)
  {
LABEL_89:
    *(_OWORD *)v256 = *(_OWORD *)v257;
    goto LABEL_91;
  }
  v259 = *((_QWORD *)v257 + 1);
  if (v259 >> 60 == 15)
  {
    sub_1000DC964(v256);
    goto LABEL_89;
  }
  v260 = *(_QWORD *)v256;
  *(_QWORD *)v256 = *(_QWORD *)v257;
  *(_QWORD *)(v256 + 8) = v259;
  sub_10001BC14(v260, v258);
LABEL_91:
  v261 = v66[24];
  v262 = (uint64_t *)&v64[v261];
  v263 = (uint64_t *)&v65[v261];
  v264 = *(_QWORD *)&v64[v261 + 8];
  if (v264 >> 60 != 15)
  {
    v265 = v263[1];
    if (v265 >> 60 != 15)
    {
      v266 = *v262;
      *v262 = *v263;
      v262[1] = v265;
      sub_10001BC14(v266, v264);
      goto LABEL_96;
    }
    sub_1000DC964((uint64_t)v262);
  }
  *(_OWORD *)v262 = *(_OWORD *)v263;
LABEL_96:
  v267 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v209 + 40);
  v267(&v64[v66[25]], &v65[v66[25]], v206);
  v267(&v64[v66[26]], &v65[v66[26]], v206);
  v267(&v64[v66[27]], &v65[v66[27]], v206);
  v267(&v64[v66[28]], &v65[v66[28]], v206);
  v267(&v64[v66[29]], &v65[v66[29]], v206);
  v267(&v64[v66[30]], &v65[v66[30]], v206);
  v268 = v66[31];
  v269 = &v64[v268];
  v270 = (uint64_t *)&v65[v268];
  v272 = *v270;
  v271 = v270[1];
  *v269 = v272;
  v269[1] = v271;
  swift_bridgeObjectRelease();
  *(_QWORD *)&v64[v66[32]] = *(_QWORD *)&v65[v66[32]];
  swift_bridgeObjectRelease();
  v273 = v66[33];
  v274 = &v64[v273];
  v275 = (uint64_t *)&v65[v273];
  v277 = *v275;
  v276 = v275[1];
  *v274 = v277;
  v274[1] = v276;
  swift_bridgeObjectRelease();
  *(_QWORD *)&v64[v66[34]] = *(_QWORD *)&v65[v66[34]];
  swift_bridgeObjectRelease();
  v278 = v66[35];
  v279 = &v64[v278];
  v280 = &v65[v278];
  *(_OWORD *)v279 = *(_OWORD *)v280;
  v279[16] = v280[16];
  v281 = v66[36];
  v282 = &v64[v281];
  v283 = &v65[v281];
  v282[16] = v283[16];
  *(_OWORD *)v282 = *(_OWORD *)v283;
  v267(&v64[v66[37]], &v65[v66[37]], v206);
  v267(&v64[v66[38]], &v65[v66[38]], v206);
  v267(&v64[v66[39]], &v65[v66[39]], v206);
  v267(&v64[v66[40]], &v65[v66[40]], v206);
  v267(&v64[v66[41]], &v65[v66[41]], v206);
  v267(&v64[v66[42]], &v65[v66[42]], v206);
  v64[v66[43]] = v65[v66[43]];
  v64[v66[44]] = v65[v66[44]];
  v64[v66[45]] = v65[v66[45]];
  v284 = v66[46];
  v285 = &v64[v284];
  v286 = (uint64_t *)&v65[v284];
  v288 = *v286;
  v287 = v286[1];
  *v285 = v288;
  v285[1] = v287;
  swift_bridgeObjectRelease();
  v289 = v66[47];
  v290 = &v64[v289];
  v291 = (uint64_t *)&v65[v289];
  v293 = *v291;
  v292 = v291[1];
  *v290 = v293;
  v290[1] = v292;
  swift_bridgeObjectRelease();
  v61 = v340;
LABEL_97:
  v62 = v341;
LABEL_98:
  v294 = v61[17];
  *(_BYTE *)(v34 + v61[16]) = *(_BYTE *)(v33 + v61[16]);
  *(_QWORD *)(v34 + v294) = *(_QWORD *)(v33 + v294);
  swift_bridgeObjectRelease();
  v295 = v61[18];
  v296 = (void *)(v34 + v295);
  v297 = (const void *)(v33 + v295);
  v298 = v339(v34 + v295, 1, v62);
  v299 = v339((uint64_t)v297, 1, v62);
  if (v298)
  {
    if (!v299)
    {
      (*(void (**)(void *, const void *, uint64_t))(v338 + 32))(v296, v297, v62);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v338 + 56))(v296, 0, 1, v62);
      goto LABEL_104;
    }
    goto LABEL_103;
  }
  if (v299)
  {
    (*(void (**)(void *, uint64_t))(v338 + 8))(v296, v62);
LABEL_103:
    v300 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
    memcpy(v296, v297, *(_QWORD *)(*(_QWORD *)(v300 - 8) + 64));
    goto LABEL_104;
  }
  v334((uint64_t)v296, (uint64_t)v297, v62);
LABEL_104:
  v301 = v61[19];
  v302 = (void *)(v34 + v301);
  v303 = (const void *)(v33 + v301);
  v304 = v339(v34 + v301, 1, v62);
  v305 = v339((uint64_t)v303, 1, v62);
  if (v304)
  {
    if (!v305)
    {
      (*(void (**)(void *, const void *, uint64_t))(v338 + 32))(v302, v303, v62);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v338 + 56))(v302, 0, 1, v62);
      goto LABEL_110;
    }
    goto LABEL_109;
  }
  if (v305)
  {
    (*(void (**)(void *, uint64_t))(v338 + 8))(v302, v62);
LABEL_109:
    v306 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
    memcpy(v302, v303, *(_QWORD *)(*(_QWORD *)(v306 - 8) + 64));
    goto LABEL_110;
  }
  v334((uint64_t)v302, (uint64_t)v303, v62);
LABEL_110:
  v307 = v61[20];
  v308 = (uint64_t *)(v34 + v307);
  v309 = (uint64_t *)(v33 + v307);
  v310 = *(_QWORD *)(v34 + v307 + 8);
  if (((v310 >> 60) | 4) != 0xF)
  {
    v311 = v309[1];
    if (((v311 >> 60) | 4) != 0xF)
    {
      v314 = *v308;
      *v308 = *v309;
      v308[1] = v311;
      sub_10001BC14(v314, v310);
      goto LABEL_114;
    }
    sub_100163378((uint64_t)v308);
  }
  *(_OWORD *)v308 = *(_OWORD *)v309;
LABEL_114:
  v312 = v61[22];
  *(_BYTE *)(v34 + v61[21]) = *(_BYTE *)(v33 + v61[21]);
  *(_WORD *)(v34 + v312) = *(_WORD *)(v33 + v312);
  return v34;
}

uint64_t sub_1001E3AC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001E3AD0);
}

uint64_t sub_1001E3AD0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = sub_10001A9A8(&qword_1010ED860);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v13 = a3[5];
LABEL_18:
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  v14 = type metadata accessor for MACAddress(0);
  v12 = *(_QWORD *)(v14 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v14;
    v13 = a3[7];
    goto LABEL_18;
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    v17 = type metadata accessor for Date(0);
    v12 = *(_QWORD *)(v17 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      v8 = v17;
      v13 = a3[10];
    }
    else
    {
      v18 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
      v12 = *(_QWORD *)(v18 - 8);
      if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
      {
        v8 = v18;
        v13 = a3[11];
      }
      else
      {
        v19 = sub_10001A9A8(&qword_101115E60);
        v12 = *(_QWORD *)(v19 - 8);
        if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
        {
          v8 = v19;
          v13 = a3[14];
        }
        else
        {
          v8 = sub_10001A9A8((uint64_t *)&unk_10111C0A0);
          v12 = *(_QWORD *)(v8 - 8);
          v13 = a3[15];
        }
      }
    }
    goto LABEL_18;
  }
  v15 = *(_QWORD *)(a1 + a3[8]);
  if (v15 >= 0xFFFFFFFF)
    LODWORD(v15) = -1;
  return (v15 + 1);
}

uint64_t sub_1001E3C3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001E3C48);
}

uint64_t sub_1001E3C48(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v13 = sub_10001A9A8(&qword_1010ED860);
    v14 = *(_QWORD *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = v13;
      v15 = a4[5];
    }
    else
    {
      result = type metadata accessor for MACAddress(0);
      v14 = *(_QWORD *)(result - 8);
      if (*(_DWORD *)(v14 + 84) == a3)
      {
        v10 = result;
        v15 = a4[7];
      }
      else
      {
        if (a3 == 0x7FFFFFFF)
        {
          *(_QWORD *)(a1 + a4[8]) = (a2 - 1);
          return result;
        }
        v17 = type metadata accessor for Date(0);
        v14 = *(_QWORD *)(v17 - 8);
        if (*(_DWORD *)(v14 + 84) == a3)
        {
          v10 = v17;
          v15 = a4[10];
        }
        else
        {
          v18 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
          v14 = *(_QWORD *)(v18 - 8);
          if (*(_DWORD *)(v14 + 84) == a3)
          {
            v10 = v18;
            v15 = a4[11];
          }
          else
          {
            v19 = sub_10001A9A8(&qword_101115E60);
            v14 = *(_QWORD *)(v19 - 8);
            if (*(_DWORD *)(v14 + 84) == a3)
            {
              v10 = v19;
              v15 = a4[14];
            }
            else
            {
              v10 = sub_10001A9A8((uint64_t *)&unk_10111C0A0);
              v14 = *(_QWORD *)(v10 - 8);
              v15 = a4[15];
            }
          }
        }
      }
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_1001E3DB0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD v17[19];

  v2 = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v17[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_100149C5C(319, (unint64_t *)&qword_101107400, (uint64_t (*)(uint64_t))&type metadata accessor for UUID);
    if (v5 <= 0x3F)
    {
      v17[1] = *(_QWORD *)(v4 - 8) + 64;
      v17[2] = &unk_100E2C468;
      v6 = type metadata accessor for MACAddress(319);
      if (v7 <= 0x3F)
      {
        v17[3] = *(_QWORD *)(v6 - 8) + 64;
        v17[4] = (char *)&value witness table for Builtin.BridgeObject + 64;
        v17[5] = &unk_100E2C480;
        v8 = type metadata accessor for Date(319);
        if (v9 <= 0x3F)
        {
          v17[6] = *(_QWORD *)(v8 - 8) + 64;
          sub_100149C5C(319, (unint64_t *)&qword_10110D930, (uint64_t (*)(uint64_t))&type metadata accessor for Date);
          if (v11 <= 0x3F)
          {
            v12 = *(_QWORD *)(v10 - 8) + 64;
            v17[7] = v12;
            v17[8] = &unk_100E2C498;
            v17[9] = &unk_100E2C480;
            sub_100149C5C(319, (unint64_t *)&unk_1010F1B78, type metadata accessor for AccessoryMetadata);
            if (v14 <= 0x3F)
            {
              v17[10] = *(_QWORD *)(v13 - 8) + 64;
              sub_100149C5C(319, (unint64_t *)&qword_1010F00C0, type metadata accessor for AccessoryProductInfo);
              if (v16 <= 0x3F)
              {
                v17[11] = *(_QWORD *)(v15 - 8) + 64;
                v17[12] = &unk_100E2C4B0;
                v17[13] = (char *)&value witness table for Builtin.BridgeObject + 64;
                v17[14] = v12;
                v17[15] = v12;
                v17[16] = &unk_100E2C4C8;
                v17[17] = &unk_100E2C4E0;
                v17[18] = &unk_100E2C4F8;
                swift_initStructMetadata(a1, 256, 19, v17, a1 + 16);
              }
            }
          }
        }
      }
    }
  }
}

uint64_t sub_1001E3F64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001E3F70);
}

uint64_t sub_1001E3F70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a1 + *(int *)(a3 + 28);
  v5 = type metadata accessor for Date(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, a2, v5);
}

uint64_t sub_1001E3FB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001E3FBC);
}

uint64_t sub_1001E3FBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = a1 + *(int *)(a4 + 28);
  v6 = type metadata accessor for Date(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, a2, a2, v6);
}

uint64_t sub_1001E4000()
{
  return sub_100006204(&qword_1010F2788, type metadata accessor for WildModeAssociationRecord, (uint64_t)&unk_100E2C554);
}

unint64_t sub_1001E4030()
{
  unint64_t result;

  result = qword_1010F2790;
  if (!qword_1010F2790)
  {
    result = swift_getWitnessTable("- #", &type metadata for WildModeAssociationRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F2790);
  }
  return result;
}

unint64_t sub_1001E4078()
{
  unint64_t result;

  result = qword_1010F2798;
  if (!qword_1010F2798)
  {
    result = swift_getWitnessTable(byte_100E2C724, &type metadata for UnauthorizedTrackingType);
    atomic_store(result, (unint64_t *)&qword_1010F2798);
  }
  return result;
}

unint64_t sub_1001E40C0()
{
  unint64_t result;

  result = qword_1010F27A0;
  if (!qword_1010F27A0)
  {
    result = swift_getWitnessTable(byte_100E2C7C4, &type metadata for WildModeAlertState);
    atomic_store(result, (unint64_t *)&qword_1010F27A0);
  }
  return result;
}

unint64_t sub_1001E4108()
{
  unint64_t result;

  result = qword_1010F27A8;
  if (!qword_1010F27A8)
  {
    result = swift_getWitnessTable(aM_5, &type metadata for WildModeObservationState);
    atomic_store(result, (unint64_t *)&qword_1010F27A8);
  }
  return result;
}

unint64_t sub_1001E4150()
{
  unint64_t result;

  result = qword_1010F27B0;
  if (!qword_1010F27B0)
  {
    result = swift_getWitnessTable(asc_100E2C88C, &type metadata for WildModeAssociationRecord.AdvertisementType);
    atomic_store(result, (unint64_t *)&qword_1010F27B0);
  }
  return result;
}

uint64_t sub_1001E4194()
{
  return sub_100006204(&qword_1010F27B8, type metadata accessor for WildModeTrackingLocation, (uint64_t)&unk_100E2C52C);
}

unint64_t sub_1001E41C4()
{
  unint64_t result;

  result = qword_1010F27C0;
  if (!qword_1010F27C0)
  {
    result = swift_getWitnessTable("-!#", &type metadata for WildModeAssociationRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F27C0);
  }
  return result;
}

unint64_t sub_1001E420C()
{
  unint64_t result;

  result = qword_1010F27C8;
  if (!qword_1010F27C8)
  {
    result = swift_getWitnessTable(byte_100E2C5E4, &type metadata for WildModeAssociationRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F27C8);
  }
  return result;
}

unint64_t _s12searchpartyd20MessagingDestinationV0C4TypeO8rawValueAESgSi_tcfC_0(unint64_t result)
{
  if (result >= 5)
    return 5;
  return result;
}

unint64_t sub_1001E4260(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_101049388, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 8)
    return 8;
  else
    return v3;
}

uint64_t sub_1001E42A8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = _findStringSwitchCaseWithCache(cases:string:cache:)(&off_101049468, a1, a2, &unk_1010EA660);
  swift_bridgeObjectRelease(a2);
  if (v3 >= 0x13)
    return 19;
  else
    return v3;
}

unint64_t sub_1001E42F8()
{
  unint64_t result;

  result = qword_1010F27D0;
  if (!qword_1010F27D0)
  {
    result = swift_getWitnessTable(byte_100E2C6EC, &type metadata for UnauthorizedTrackingType);
    atomic_store(result, (unint64_t *)&qword_1010F27D0);
  }
  return result;
}

unint64_t sub_1001E433C()
{
  unint64_t result;

  result = qword_1010F27E0;
  if (!qword_1010F27E0)
  {
    result = swift_getWitnessTable(byte_100E2CB7C, &type metadata for WildModeTrackingLocation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F27E0);
  }
  return result;
}

unint64_t sub_1001E4380()
{
  unint64_t result;

  result = qword_1010F27E8;
  if (!qword_1010F27E8)
  {
    result = swift_getWitnessTable(byte_100E2C74C, &type metadata for WildModeAlertState);
    atomic_store(result, (unint64_t *)&qword_1010F27E8);
  }
  return result;
}

unint64_t sub_1001E43C4()
{
  unint64_t result;

  result = qword_1010F27F0;
  if (!qword_1010F27F0)
  {
    result = swift_getWitnessTable(byte_100E2C7EC, &type metadata for WildModeObservationState);
    atomic_store(result, (unint64_t *)&qword_1010F27F0);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for WildModeTrackingLocation.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1001E4454 + 4 * byte_100E2C347[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1001E4488 + 4 * byte_100E2C342[v4]))();
}

uint64_t sub_1001E4488(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001E4490(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1001E4498);
  return result;
}

uint64_t sub_1001E44A4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1001E44ACLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1001E44B0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001E44B8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for WildModeTrackingLocation.CodingKeys()
{
  return &type metadata for WildModeTrackingLocation.CodingKeys;
}

unint64_t sub_1001E44D8()
{
  unint64_t result;

  result = qword_1010F2800;
  if (!qword_1010F2800)
  {
    result = swift_getWitnessTable("]\x1B#", &type metadata for WildModeTrackingLocation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F2800);
  }
  return result;
}

unint64_t sub_1001E4520()
{
  unint64_t result;

  result = qword_1010F2808;
  if (!qword_1010F2808)
  {
    result = swift_getWitnessTable(asc_100E2CAC4, &type metadata for WildModeTrackingLocation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F2808);
  }
  return result;
}

unint64_t sub_1001E4568()
{
  unint64_t result;

  result = qword_1010F2810;
  if (!qword_1010F2810)
  {
    result = swift_getWitnessTable(asc_100E2CAEC, &type metadata for WildModeTrackingLocation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F2810);
  }
  return result;
}

uint64_t sub_1001E45AC(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  char v23;
  _QWORD v24[3];
  uint64_t v25;
  uint64_t v26;

  v4 = a1[3];
  v5 = a1[4];
  sub_10001AA44(a1, v4);
  dispatch thunk of BinaryEncoding.container()(v24, v4, v5);
  if (a2 == 2 || (a2 & 0x10000) != 0)
  {
    v23 = 2;
    v15 = v25;
    v16 = v26;
    sub_10009F5D0((uint64_t)v24, v25);
    v12 = sub_100059570();
    v13 = v15;
    v14 = v16;
LABEL_8:
    dispatch thunk of BinaryEncodingContaining.encode<A>(_:)(&v23, &type metadata for UInt8, v12, v13, v14);
    if (!v2)
    {
      v23 = BYTE3(a2);
      v17 = v25;
      v18 = v26;
      sub_10009F5D0((uint64_t)v24, v25);
      v19 = sub_100059570();
      dispatch thunk of BinaryEncodingContaining.encode<A>(_:)(&v23, &type metadata for UInt8, v19, v17, v18);
      v23 = BYTE4(a2);
      v20 = v25;
      v21 = v26;
      sub_10009F5D0((uint64_t)v24, v25);
      dispatch thunk of BinaryEncodingContaining.encode<A>(_:)(&v23, &type metadata for UInt8, v19, v20, v21);
    }
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v24);
  }
  v23 = 3;
  v6 = v25;
  v7 = v26;
  sub_10009F5D0((uint64_t)v24, v25);
  v8 = sub_100059570();
  dispatch thunk of BinaryEncodingContaining.encode<A>(_:)(&v23, &type metadata for UInt8, v8, v6, v7);
  if (v2)
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v24);
  v9 = Bool.intValue.getter(a2 & 1);
  if ((v9 & 0x8000000000000000) != 0)
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 3451, 0);
  }
  else
  {
    if (v9 < 0x100)
    {
      v23 = v9 & BYTE1(a2);
      v10 = v25;
      v11 = v26;
      sub_10009F5D0((uint64_t)v24, v25);
      v12 = v8;
      v13 = v10;
      v14 = v11;
      goto LABEL_8;
    }
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 3455, 0);
  }
  __break(1u);
  return result;
}

uint64_t sub_1001E4818(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v15;
  char v16;
  char v17;
  _BYTE v18[2];
  char v19;
  char v20;

  v5 = sub_10001A9A8(&qword_1010F2838);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  v11 = sub_1001E55C0();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for AdvInfo.CodingKeys, &type metadata for AdvInfo.CodingKeys, v11, v9, v10);
  v20 = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(a2, &v20, v5);
  if (!v2)
  {
    v19 = 1;
    HIDWORD(v12) = WORD1(a2) & 1;
    LODWORD(v12) = (_DWORD)a2 << 16;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)((v12 >> 24), &v19, v5);
    v18[0] = BYTE3(a2);
    v17 = 2;
    v13 = sub_1001717CC();
    KeyedEncodingContainer.encode<A>(_:forKey:)(v18, &v17, v5, &type metadata for ExtraKeyBits, v13);
    v16 = 3;
    KeyedEncodingContainer.encode(_:forKey:)(HIDWORD(a2), &v16, v5);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1001E499C()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1001E49D0 + 4 * byte_100E2CBCC[*v0]))(0x656E774F7261656ELL, 0xE900000000000072);
}

uint64_t sub_1001E49D0()
{
  return 0x6465767265736572;
}

uint64_t sub_1001E49E8()
{
  return 0x79654B6172747865;
}

uint64_t sub_1001E4A08()
{
  return 1953393000;
}

uint64_t sub_1001E4A18@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1001E5220(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1001E4A3C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001E55C0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001E4A64(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001E55C0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1001E4A8C@<X0>(uint64_t a1@<X8>)
{
  return sub_1001E4AE0((uint64_t (*)(void))sub_1001E5040, a1);
}

uint64_t sub_1001E4AA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1001E4B44(a1, a2, a3, (uint64_t (*)(uint64_t, unint64_t))sub_1001E45AC);
}

uint64_t sub_1001E4AC4@<X0>(uint64_t a1@<X8>)
{
  return sub_1001E4AE0((uint64_t (*)(void))sub_1001E53EC, a1);
}

uint64_t sub_1001E4AE0@<X0>(uint64_t (*a1)(void)@<X3>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = a1();
  if (!v2)
  {
    *(_WORD *)a2 = result;
    *(_BYTE *)(a2 + 2) = BYTE2(result) & 1;
    *(_BYTE *)(a2 + 3) = BYTE3(result);
    *(_BYTE *)(a2 + 4) = BYTE4(result);
  }
  return result;
}

uint64_t sub_1001E4B28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1001E4B44(a1, a2, a3, (uint64_t (*)(uint64_t, unint64_t))sub_1001E4818);
}

uint64_t sub_1001E4B44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, unint64_t))
{
  unsigned __int8 *v4;

  return a4(a1, *(unsigned __int16 *)v4 | ((unint64_t)v4[3] << 24) | ((unint64_t)v4[4] << 32) | ((unint64_t)v4[2] << 16));
}

BOOL sub_1001E4B84(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1001E4BD8(*(unsigned __int16 *)a1 | ((unint64_t)a1[3] << 24) | ((unint64_t)a1[4] << 32) | ((unint64_t)a1[2] << 16), *(unsigned __int16 *)a2 | ((unint64_t)a2[3] << 24) | ((unint64_t)a2[4] << 32) | ((unint64_t)a2[2] << 16));
}

BOOL sub_1001E4BD8(uint64_t a1, uint64_t a2)
{
  if (a1 == 2)
  {
    if (a2 != 2)
      return 0;
  }
  else if (a2 == 2 || ((((a1 & 1) == 0) ^ a2) & 1) == 0)
  {
    return 0;
  }
  if ((a1 & 0x10000) != 0)
  {
    if ((a2 & 0x10000) == 0)
      return 0;
  }
  else if ((a2 & 0x10000) != 0 || BYTE1(a1) != BYTE1(a2))
  {
    return 0;
  }
  if (BYTE3(a1) != BYTE3(a2))
    return 0;
  return BYTE4(a1) == BYTE4(a2);
}

void sub_1001E4C64(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

unint64_t sub_1001E4E50()
{
  unint64_t result;

  result = qword_1010F2818;
  if (!qword_1010F2818)
  {
    result = swift_getWitnessTable(asc_100E2CD24, &type metadata for AdvInfo.Error);
    atomic_store(result, (unint64_t *)&qword_1010F2818);
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for AdvInfo(uint64_t result, int *a2)
{
  int v2;

  v2 = *a2;
  *(_BYTE *)(result + 4) = *((_BYTE *)a2 + 4);
  *(_DWORD *)result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for AdvInfo(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && a1[5])
    return (*(_DWORD *)a1 + 254);
  v3 = *a1;
  if (v3 >= 2)
    v4 = ((v3 + 2147483646) & 0x7FFFFFFF) - 1;
  else
    v4 = -2;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for AdvInfo(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_BYTE *)(result + 4) = 0;
    *(_DWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 5) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 5) = 0;
    if (a2)
      *(_BYTE *)result = a2 + 2;
  }
  return result;
}

ValueMetadata *type metadata accessor for AdvInfo()
{
  return &type metadata for AdvInfo;
}

uint64_t storeEnumTagSinglePayload for AdvInfo.Error(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1001E4F9C + 4 * byte_100E2CBD0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1001E4FBC + 4 * byte_100E2CBD5[v4]))();
}

_BYTE *sub_1001E4F9C(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1001E4FBC(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1001E4FC4(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1001E4FCC(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1001E4FD4(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1001E4FDC(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for AdvInfo.Error()
{
  return &type metadata for AdvInfo.Error;
}

unint64_t sub_1001E4FFC()
{
  unint64_t result;

  result = qword_1010F2820;
  if (!qword_1010F2820)
  {
    result = swift_getWitnessTable(byte_100E2CC34, &type metadata for AdvInfo.Error);
    atomic_store(result, (unint64_t *)&qword_1010F2820);
  }
  return result;
}

unint64_t sub_1001E5040(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v25[3];
  uint64_t v26;
  uint64_t v27;

  v3 = a1[3];
  v4 = a1[4];
  sub_10001AA44(a1, v3);
  dispatch thunk of BinaryDecoding.container()(v25, v3, v4);
  v5 = v26;
  v6 = v27;
  sub_10009F5D0((uint64_t)v25, v26);
  v7 = dispatch thunk of BinaryDecodingContaining.decode(length:)(1, v5, v6);
  if (v1)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v25);
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  }
  else
  {
    v9 = v7;
    v10 = v8;
    v11 = sub_100035530();
    v12 = DataProtocol.intValue.getter(&type metadata for Data, v11);
    v13 = v26;
    v14 = v27;
    sub_10009F5D0((uint64_t)v25, v26);
    v15 = dispatch thunk of BinaryDecodingContaining.decode(length:)(v12, v13, v14);
    v17 = v16;
    sub_10001BBBC(v9, v10);
    sub_10001BBBC(v15, v17);
    sub_10078E27C(v15, v17);
    sub_10001BC14(v15, v17);
    sub_100626210(v9, v10);
    v19 = v18;
    v21 = v20;
    sub_1001E4C64(v18, v20);
    v23 = v22;
    sub_10001BC14(v19, v21);
    sub_10001BC14(v15, v17);
    sub_10001BC14(v9, v10);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v25);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
    return v23 & 0xFFFF00FFFFLL | ((unint64_t)(BYTE2(v23) & 1) << 16);
  }
}

uint64_t sub_1001E5220(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  char v9;

  if (a1 == 0x656E774F7261656ELL && a2 == 0xE900000000000072)
  {
    v5 = 0xE900000000000072;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x656E774F7261656ELL, 0xE900000000000072, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6465767265736572 && a2 == 0xE800000000000000)
  {
    v7 = 0xE800000000000000;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6465767265736572, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x79654B6172747865 && a2 == 0xEC00000073746942)
  {
    v8 = 0xEC00000073746942;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x79654B6172747865, 0xEC00000073746942, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 1953393000 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease(0xE400000000000000);
    return 3;
  }
  else
  {
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(1953393000, 0xE400000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v9 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

unint64_t sub_1001E53EC(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unsigned __int8 v10;
  __int16 v11;
  unint64_t v12;
  uint64_t v13;
  unsigned __int8 v14;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t v19;

  v3 = sub_10001A9A8(&qword_1010F2828);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  sub_10001AA44(a1, v7);
  v9 = sub_1001E55C0();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for AdvInfo.CodingKeys, &type metadata for AdvInfo.CodingKeys, v9, v7, v8);
  if (v1)
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  BYTE2(v19) = 0;
  v10 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)((char *)&v19 + 2, v3);
  BYTE1(v19) = 1;
  v11 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)((char *)&v19 + 1, v3);
  v18 = 2;
  v12 = sub_1001716BC();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v19, &type metadata for ExtraKeyBits, &v18, v3, &type metadata for ExtraKeyBits, v12);
  v13 = v19;
  v17 = 3;
  v14 = KeyedDecodingContainer.decode(_:forKey:)(&v17, v3);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  return (v13 << 24) | ((unint64_t)v14 << 32) | ((unint64_t)(HIBYTE(v11) & 1) << 16) | ((unint64_t)v11 << 8) | v10;
}

unint64_t sub_1001E55C0()
{
  unint64_t result;

  result = qword_1010F2830;
  if (!qword_1010F2830)
  {
    result = swift_getWitnessTable(byte_100E2CE28, &type metadata for AdvInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F2830);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for AdvInfo.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1001E5650 + 4 * byte_100E2CBDF[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1001E5684 + 4 * byte_100E2CBDA[v4]))();
}

uint64_t sub_1001E5684(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001E568C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1001E5694);
  return result;
}

uint64_t sub_1001E56A0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1001E56A8);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1001E56AC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001E56B4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AdvInfo.CodingKeys()
{
  return &type metadata for AdvInfo.CodingKeys;
}

unint64_t sub_1001E56D4()
{
  unint64_t result;

  result = qword_1010F2840;
  if (!qword_1010F2840)
  {
    result = swift_getWitnessTable("1\x1B#", &type metadata for AdvInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F2840);
  }
  return result;
}

unint64_t sub_1001E571C()
{
  unint64_t result;

  result = qword_1010F2848;
  if (!qword_1010F2848)
  {
    result = swift_getWitnessTable(a9_0, &type metadata for AdvInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F2848);
  }
  return result;
}

unint64_t sub_1001E5764()
{
  unint64_t result;

  result = qword_1010F2850;
  if (!qword_1010F2850)
  {
    result = swift_getWitnessTable(asc_100E2CD98, &type metadata for AdvInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F2850);
  }
  return result;
}

uint64_t sub_1001E57A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1001E5B90();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1001E5804(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1001E5B90();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_1001E5850(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1001E5BD4();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1001E58AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1001E5BD4();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_1001E58F8(double a1)
{
  if (a1 >= 0.0 && a1 < 65.0)
    return 3;
  if (a1 >= 65.0 && a1 < 400.0)
    return 2;
  if (a1 <= 9.22337204e18)
    return a1 >= 400.0;
  return 0;
}

uint64_t storeEnumTagSinglePayload for BeaconPayloadMetaData.BeaconType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1001E59A4 + 4 * byte_100E2CE85[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1001E59D8 + 4 * byte_100E2CE80[v4]))();
}

uint64_t sub_1001E59D8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001E59E0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1001E59E8);
  return result;
}

uint64_t sub_1001E59F4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1001E59FCLL);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1001E5A00(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001E5A08(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BeaconPayloadMetaData.BeaconType()
{
  return &type metadata for BeaconPayloadMetaData.BeaconType;
}

ValueMetadata *type metadata accessor for BeaconPayloadMetaData()
{
  return &type metadata for BeaconPayloadMetaData;
}

uint64_t storeEnumTagSinglePayload for BeaconPayloadMetaData.ConfidenceScore(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1001E5A80 + 4 * byte_100E2CE8F[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1001E5AB4 + 4 * byte_100E2CE8A[v4]))();
}

uint64_t sub_1001E5AB4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001E5ABC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1001E5AC4);
  return result;
}

uint64_t sub_1001E5AD0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1001E5AD8);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1001E5ADC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001E5AE4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BeaconPayloadMetaData.ConfidenceScore()
{
  return &type metadata for BeaconPayloadMetaData.ConfidenceScore;
}

unint64_t sub_1001E5B04()
{
  unint64_t result;

  result = qword_1010F2858;
  if (!qword_1010F2858)
  {
    result = swift_getWitnessTable(asc_100E2CF90, &type metadata for BeaconPayloadMetaData.ConfidenceScore);
    atomic_store(result, (unint64_t *)&qword_1010F2858);
  }
  return result;
}

unint64_t sub_1001E5B4C()
{
  unint64_t result;

  result = qword_1010F2860;
  if (!qword_1010F2860)
  {
    result = swift_getWitnessTable(byte_100E2D0E0, &type metadata for BeaconPayloadMetaData.BeaconType);
    atomic_store(result, (unint64_t *)&qword_1010F2860);
  }
  return result;
}

unint64_t sub_1001E5B90()
{
  unint64_t result;

  result = qword_1010F2868;
  if (!qword_1010F2868)
  {
    result = swift_getWitnessTable("1\x1B#", &type metadata for BeaconPayloadMetaData.BeaconType);
    atomic_store(result, (unint64_t *)&qword_1010F2868);
  }
  return result;
}

unint64_t sub_1001E5BD4()
{
  unint64_t result;

  result = qword_1010F2870;
  if (!qword_1010F2870)
  {
    result = swift_getWitnessTable(byte_100E2CEC8, &type metadata for BeaconPayloadMetaData.ConfidenceScore);
    atomic_store(result, (unint64_t *)&qword_1010F2870);
  }
  return result;
}

uint64_t sub_1001E5C18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001E5C24);
}

uint64_t sub_1001E5C24(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for FMNAccountType(0);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 20)], a2, v8);
  }
}

uint64_t sub_1001E5CA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001E5CAC);
}

char *sub_1001E5CAC(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for FMNAccountType(0);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 20)], a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for PencilUnpairEndPoint(uint64_t a1)
{
  uint64_t result;

  result = qword_1010F28D0;
  if (!qword_1010F28D0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for PencilUnpairEndPoint);
  return result;
}

void sub_1001E5D5C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t *, _QWORD);
  Swift::String v5;
  void *v6;
  id v7;
  unsigned int v8;
  NSString v9;
  id v10;
  uint64_t v11;

  v1 = *v0;
  v2 = sub_10001A9A8(&qword_1010EBF60);
  v3 = OS_dispatch_queue.sync<A>(execute:)(sub_10003403C, v1, v2);
  URLComponents.init()(v3);
  URLComponents.scheme.setter(0x7370747468, 0xE500000000000000);
  URLComponents.host.setter();
  URLComponents.path.setter();
  v4 = (void (*)(uint64_t *, _QWORD))URLComponents.path.modify(&v11);
  v5._countAndFlagsBits = 0xD000000000000015;
  v5._object = (void *)0x8000000100ECB630;
  String.append(_:)(v5);
  v4(&v11, 0);
  if (qword_1010EA198 != -1)
    swift_once(&qword_1010EA198, sub_100ACDE4C);
  v6 = (void *)qword_1011B7C08;
  v7 = objc_msgSend((id)objc_opt_self(FMSystemInfo), "sharedInstance");
  v8 = objc_msgSend(v7, "isInternalBuild");

  if (v8)
  {
    v9 = String._bridgeToObjectiveC()();
    v10 = objc_msgSend(v6, "stringForKey:", v9);

    if (v10)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)(v10);

      URLComponents.host.setter();
    }
  }
}

unint64_t sub_1001E5F20(uint64_t a1)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  int8x16_t v5;
  uint64x2_t *v6;
  unint64_t v7;
  int8x16_t v8;
  int8x16_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return 0;
  v2 = *(_QWORD *)(a1 + 32);
  v3 = v1 - 1;
  if (v1 != 1)
  {
    if (v1 >= 5)
    {
      v4 = v3 & 0xFFFFFFFFFFFFFFFCLL | 1;
      v5 = (int8x16_t)vdupq_n_s64(v2);
      v6 = (uint64x2_t *)(a1 + 56);
      v7 = v3 & 0xFFFFFFFFFFFFFFFCLL;
      v8 = v5;
      do
      {
        v5 = vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v5, v6[-1]), (int8x16_t)v6[-1], v5);
        v8 = vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v8, *v6), *(int8x16_t *)v6, v8);
        v6 += 2;
        v7 -= 4;
      }
      while (v7);
      v9 = vbslq_s8((int8x16_t)vcgtq_u64((uint64x2_t)v8, (uint64x2_t)v5), v5, v8);
      v10 = vextq_s8(v9, v9, 8uLL).u64[0];
      v2 = (unint64_t)vbsl_s8((int8x8_t)vcgtd_u64(v10, v9.u64[0]), *(int8x8_t *)v9.i8, (int8x8_t)v10);
      if (v3 == (v3 & 0xFFFFFFFFFFFFFFFCLL))
        return v2;
    }
    else
    {
      v4 = 1;
    }
    v11 = v1 - v4;
    v12 = (unint64_t *)(a1 + 8 * v4 + 32);
    do
    {
      v14 = *v12++;
      v13 = v14;
      if (v14 < v2)
        v2 = v13;
      --v11;
    }
    while (v11);
  }
  return v2;
}

uint64_t sub_1001E5FD4@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t, uint64_t, uint64_t);
  void (*v19)(char *, char *, uint64_t);
  __n128 v20;
  uint64_t v21;
  void (*v22)(char *, unint64_t, uint64_t, __n128);
  char *v23;
  char *v24;
  uint64_t v25;
  unint64_t v27;
  uint64_t v28;
  char v29;
  void (*v30)(char *, uint64_t);
  char *v31;
  unint64_t v32;
  uint64_t v33;
  void (*v34)(char *, unint64_t, uint64_t);
  uint64_t v35;
  unsigned int (*v36)(char *, uint64_t, uint64_t);

  v4 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v31 - v8;
  v10 = type metadata accessor for Date(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v16 = (char *)&v31 - v15;
  v17 = *(_QWORD *)(a1 + 16);
  if (!v17)
  {
    v18 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56);
    v18(v9, 1, 1, v10);
    goto LABEL_7;
  }
  v32 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  v34 = *(void (**)(char *, unint64_t, uint64_t))(v11 + 16);
  v34(v9, a1 + v32, v10);
  v18 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56);
  v18(v9, 0, 1, v10);
  v36 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
  if (v36(v9, 1, v10) == 1)
  {
LABEL_7:
    sub_100004048((uint64_t)v9, (uint64_t *)&unk_1010EA690);
    v24 = a2;
    v25 = 1;
    return ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v18)(v24, v25, 1, v10);
  }
  v31 = a2;
  v19 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
  v19(v16, v9, v10);
  v33 = a1;
  v20 = swift_bridgeObjectRetain(a1);
  v21 = v17 - 1;
  v22 = (void (*)(char *, unint64_t, uint64_t, __n128))v34;
  if (v21)
  {
    v35 = *(_QWORD *)(v11 + 72);
    v27 = v33 + v35 + v32;
    while (1)
    {
      v22(v7, v27, v10, v20);
      v18(v7, 0, 1, v10);
      if (v36(v7, 1, v10) == 1)
        break;
      v19(v14, v7, v10);
      v28 = sub_1001E86D8((unint64_t *)&qword_1010F4820, (const char *)&protocol conformance descriptor for Date);
      v29 = dispatch thunk of static Comparable.< infix(_:_:)(v14, v16, v10, v28);
      v30 = *(void (**)(char *, uint64_t))(v11 + 8);
      if ((v29 & 1) != 0)
      {
        v30(v16, v10);
        v19(v16, v14, v10);
      }
      else
      {
        v30(v14, v10);
      }
      v27 += v35;
      if (!--v21)
        goto LABEL_4;
    }
  }
  else
  {
LABEL_4:
    ((void (*)(char *, uint64_t, uint64_t, uint64_t, __n128))v18)(v7, 1, 1, v10, v20);
  }
  swift_bridgeObjectRelease();
  sub_100004048((uint64_t)v7, (uint64_t *)&unk_1010EA690);
  v23 = v31;
  v19(v31, v16, v10);
  v24 = v23;
  v25 = 0;
  return ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v18)(v24, v25, 1, v10);
}

uint64_t sub_1001E62BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  unsigned __int8 v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  v4 = sub_10001A9A8(&qword_1010ED1A0);
  v5 = __chkstk_darwin(v4);
  v54 = (uint64_t)&v47 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v5);
  v56 = (uint64_t)&v47 - v8;
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v47 - v10;
  __chkstk_darwin(v9);
  v14 = (char *)&v47 - v12;
  v15 = *(_QWORD *)(a1 + 16);
  if (v15)
  {
    v47 = a2;
    v49 = v13;
    v16 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
    sub_1001E8854(a1 + v16, (uint64_t)&v47 - v12);
    v48 = a1;
    swift_bridgeObjectRetain(a1);
    v17 = v15 - 1;
    if (v15 == 1)
    {
LABEL_3:
      swift_bridgeObjectRelease();
      v18 = v47;
      sub_100005CF0((uint64_t)v14, v47, &qword_1010ED1A0);
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v49 + 56))(v18, 0, 1, v4);
    }
    v20 = *(_QWORD *)(v49 + 72);
    v52 = v4;
    v53 = v20;
    v21 = v48 + v20 + v16;
    v50 = v11;
    v51 = v14;
    while (1)
    {
      v55 = v17;
      sub_1001E8854(v21, (uint64_t)v11);
      v22 = &v11[*(int *)(v4 + 32)];
      v23 = (uint64_t)v11;
      v24 = *((_QWORD *)v22 + 3);
      v25 = *((_QWORD *)v22 + 4);
      sub_10001AA44(v22, v24);
      v26 = (*(unsigned __int8 (**)(uint64_t, uint64_t))(v25 + 16))(v24, v25);
      v27 = &v14[*(int *)(v4 + 32)];
      v29 = *((_QWORD *)v27 + 3);
      v28 = *((_QWORD *)v27 + 4);
      sub_10001AA44(v27, v29);
      v30 = (*(uint64_t (**)(uint64_t, uint64_t))(v28 + 16))(v29, v28);
      sub_1001E8854(v23, v56);
      v31 = (uint64_t)v14;
      v32 = v54;
      sub_1001E8854(v31, v54);
      if (v26 == v30)
        break;
      v33 = (_QWORD *)(v56 + *(int *)(v4 + 32));
      v34 = v33[3];
      v35 = v33[4];
      sub_10001AA44(v33, v34);
      v36 = (*(uint64_t (**)(uint64_t, uint64_t))(v35 + 8))(v34, v35);
      v37 = (_QWORD *)(v32 + *(int *)(v4 + 32));
      v39 = v37[3];
      v38 = v37[4];
      sub_10001AA44(v37, v39);
      v40 = (*(uint64_t (**)(uint64_t, uint64_t))(v38 + 8))(v39, v38);
      sub_100004048(v56, &qword_1010ED1A0);
      sub_100004048(v32, &qword_1010ED1A0);
      if (v36 == v40)
        goto LABEL_11;
      v41 = *((_QWORD *)v22 + 3);
      v42 = *((_QWORD *)v22 + 4);
      sub_10001AA44(v22, v41);
      v43 = (*(uint64_t (**)(uint64_t, uint64_t))(v42 + 8))(v41, v42);
      v44 = *((_QWORD *)v27 + 3);
      v45 = *((_QWORD *)v27 + 4);
      sub_10001AA44(v27, v44);
      v46 = (*(uint64_t (**)(uint64_t, uint64_t))(v45 + 8))(v44, v45);
      v14 = v51;
      v4 = v52;
      v11 = v50;
      if (v43 < v46)
      {
LABEL_14:
        sub_100004048((uint64_t)v14, &qword_1010ED1A0);
        sub_100005CF0((uint64_t)v11, (uint64_t)v14, &qword_1010ED1A0);
        goto LABEL_7;
      }
LABEL_6:
      sub_100004048((uint64_t)v11, &qword_1010ED1A0);
LABEL_7:
      v21 += v53;
      v17 = v55 - 1;
      if (v55 == 1)
        goto LABEL_3;
    }
    sub_100004048(v56, &qword_1010ED1A0);
    sub_100004048(v32, &qword_1010ED1A0);
LABEL_11:
    v14 = v51;
    v4 = v52;
    v11 = v50;
    if ((static Date.> infix(_:_:)(&v50[*(int *)(v52 + 28)], &v51[*(int *)(v52 + 28)]) & 1) != 0)
      goto LABEL_14;
    goto LABEL_6;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 56))(a2, 1, 1, v4);
}

uint64_t sub_1001E6664@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v4 = type metadata accessor for BeaconEstimatedLocation(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v17 - v9;
  v11 = *(_QWORD *)(a1 + 16);
  if (!v11)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 56))(a2, 1, 1, v4);
  v12 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  sub_10005972C(a1 + v12, (uint64_t)&v17 - v9, type metadata accessor for BeaconEstimatedLocation);
  swift_bridgeObjectRetain(a1);
  v13 = v11 - 1;
  if (v11 != 1)
  {
    v15 = *(_QWORD *)(v5 + 72);
    v16 = a1 + v15 + v12;
    do
    {
      sub_10005972C(v16, (uint64_t)v8, type metadata accessor for BeaconEstimatedLocation);
      if ((static Date.< infix(_:_:)(&v8[*(int *)(v4 + 40)], &v10[*(int *)(v4 + 40)]) & 1) != 0)
      {
        sub_1000126B0((uint64_t)v10, type metadata accessor for BeaconEstimatedLocation);
        sub_1000126EC((uint64_t)v8, (uint64_t)v10, type metadata accessor for BeaconEstimatedLocation);
      }
      else
      {
        sub_1000126B0((uint64_t)v8, type metadata accessor for BeaconEstimatedLocation);
      }
      v16 += v15;
      --v13;
    }
    while (v13);
  }
  swift_bridgeObjectRelease();
  sub_1000126EC((uint64_t)v10, a2, type metadata accessor for BeaconEstimatedLocation);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v5 + 56))(a2, 0, 1, v4);
}

uint64_t sub_1001E6810@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v4 = type metadata accessor for BeaconObservation(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v17 - v9;
  v11 = *(_QWORD *)(a1 + 16);
  if (!v11)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 56))(a2, 1, 1, v4);
  v12 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  sub_10005972C(a1 + v12, (uint64_t)&v17 - v9, type metadata accessor for BeaconObservation);
  swift_bridgeObjectRetain(a1);
  v13 = v11 - 1;
  if (v11 != 1)
  {
    v15 = *(_QWORD *)(v5 + 72);
    v16 = a1 + v15 + v12;
    do
    {
      sub_10005972C(v16, (uint64_t)v8, type metadata accessor for BeaconObservation);
      if ((static Date.< infix(_:_:)(&v8[*(int *)(v4 + 20)], &v10[*(int *)(v4 + 20)]) & 1) != 0)
      {
        sub_1000126B0((uint64_t)v10, type metadata accessor for BeaconObservation);
        sub_1000126EC((uint64_t)v8, (uint64_t)v10, type metadata accessor for BeaconObservation);
      }
      else
      {
        sub_1000126B0((uint64_t)v8, type metadata accessor for BeaconObservation);
      }
      v16 += v15;
      --v13;
    }
    while (v13);
  }
  swift_bridgeObjectRelease();
  sub_1000126EC((uint64_t)v10, a2, type metadata accessor for BeaconObservation);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v5 + 56))(a2, 0, 1, v4);
}

uint64_t sub_1001E69BC(uint64_t a1, uint64_t a2)
{
  return sub_1001E69D4(a1, a2, (void (*)(uint64_t))sub_100A79158);
}

uint64_t sub_1001E69C8(uint64_t a1, uint64_t a2)
{
  return sub_1001E69D4(a1, a2, (void (*)(uint64_t))sub_1001E5FD4);
}

uint64_t sub_1001E69D4(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  unint64_t v4;
  uint64_t v5;

  v4 = sub_1001E7CC8();
  v5 = sub_1001C46A0(v4);
  swift_bridgeObjectRelease();
  a3(v5);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1001E6A30(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  unint64_t v4;
  uint64_t v5;

  v4 = sub_1001E8734();
  v5 = sub_1001C46A0(v4);
  swift_bridgeObjectRelease();
  a3(v5);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1001E6AA4(char a1, char a2)
{
  unsigned int v2;

  if ((a2 & 1) != 0)
    v2 = 2;
  else
    v2 = 3;
  if ((a1 & 1) != 0)
    return v2;
  else
    return (a2 & 1) == 0;
}

uint64_t sub_1001E6ACC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  unint64_t v26;
  uint64_t v27;
  unsigned int (*v28)(char *, uint64_t, uint64_t);
  void (*v29)(char *, char *, uint64_t);
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  _DWORD *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  double v42;
  void (*v43)(char *, uint64_t);
  double v44;
  char *v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  NSObject *v49;
  int v50;
  _DWORD *v51;
  uint64_t v53;
  uint64_t v54;
  int v55;
  char *v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;

  v59 = a1;
  v60 = a2;
  v2 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)&v53 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v7 = (char *)&v53 - v6;
  v8 = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v53 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v10);
  v61 = (char *)&v53 - v14;
  v15 = __chkstk_darwin(v13);
  v56 = (char *)&v53 - v16;
  v17 = __chkstk_darwin(v15);
  v57 = (char *)&v53 - v18;
  v19 = __chkstk_darwin(v17);
  v21 = (char *)&v53 - v20;
  v22 = __chkstk_darwin(v19);
  v58 = (char *)&v53 - v23;
  __chkstk_darwin(v22);
  v25 = (char *)&v53 - v24;
  v26 = sub_1001E7CC8();
  v27 = sub_1001C46A0(v26);
  swift_bridgeObjectRelease();
  sub_1001E5FD4(v27, v7);
  swift_bridgeObjectRelease();
  v28 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48);
  if (v28(v7, 1, v8) == 1)
  {
    v5 = v7;
LABEL_5:
    v32 = sub_100004048((uint64_t)v5, (uint64_t *)&unk_1010EA690);
    v33 = v61;
    Date.init()(v32);
    if (qword_1010E98D0 != -1)
      swift_once(&qword_1010E98D0, sub_100027E30);
    v34 = type metadata accessor for Logger(0);
    sub_10001A9E8(v34, (uint64_t)qword_1011B6650);
    v35 = (*(uint64_t (**)(char *, char *, uint64_t))(v9 + 16))(v12, v33, v8);
    v36 = Logger.logObject.getter(v35);
    v37 = static os_log_type_t.default.getter(v36);
    if (os_log_type_enabled(v36, v37))
    {
      v38 = (_DWORD *)swift_slowAlloc(22, -1);
      v62 = swift_slowAlloc(64, -1);
      *v38 = 136446466;
      __asm { BR              X10 }
    }
    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);

    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v9 + 32))(v60, v33, v8);
  }
  v29 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
  v29(v25, v7, v8);
  v30 = sub_1001E7CC8();
  v31 = sub_1001C46A0(v30);
  swift_bridgeObjectRelease();
  sub_100A79158(v31, v5);
  swift_bridgeObjectRelease();
  if (v28(v5, 1, v8) == 1)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v25, v8);
    goto LABEL_5;
  }
  v39 = v58;
  v29(v58, v5, v8);
  sub_1001E83D8(v59);
  if (v40 <= 1)
    v41 = 1;
  else
    v41 = v40;
  Date.addingTimeInterval(_:)(86400.0);
  v42 = Date.timeIntervalSince(_:)(v39);
  v43 = *(void (**)(char *, uint64_t))(v9 + 8);
  v43(v21, v8);
  v61 = (char *)v41;
  v44 = v42 / (double)v41;
  v45 = v57;
  Date.addingTimeInterval(_:)(v44);
  if (qword_1010E98D0 != -1)
    swift_once(&qword_1010E98D0, sub_100027E30);
  v46 = type metadata accessor for Logger(0);
  sub_10001A9E8(v46, (uint64_t)qword_1011B6650);
  v47 = v56;
  v48 = (*(uint64_t (**)(char *, char *, uint64_t))(v9 + 16))(v56, v45, v8);
  v49 = Logger.logObject.getter(v48);
  v50 = static os_log_type_t.default.getter(v49);
  if (os_log_type_enabled(v49, (os_log_type_t)v50))
  {
    v55 = v50;
    v51 = (_DWORD *)swift_slowAlloc(52, -1);
    v54 = swift_slowAlloc(64, -1);
    v62 = v54;
    *v51 = 136447234;
    __asm { BR              X10 }
  }

  v43(v47, v8);
  v43(v58, v8);
  v43(v25, v8);
  return ((uint64_t (*)(uint64_t, char *, uint64_t))v29)(v60, v45, v8);
}

uint64_t sub_1001E7310@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  unsigned int (*v29)(char *, uint64_t, uint64_t);
  char *v30;
  void (*v31)(char *, char *, uint64_t);
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  _DWORD *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  double v43;
  void (*v44)(char *, uint64_t);
  char *v45;
  uint64_t v46;
  uint64_t (*v47)(char *, char *, uint64_t);
  char *v48;
  uint64_t v49;
  NSObject *v50;
  os_log_type_t v51;
  _DWORD *v52;
  uint64_t v54;
  char *v55;
  char *v56;
  char *v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;

  v60 = a1;
  v61 = a4;
  v6 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  v7 = __chkstk_darwin(v6);
  v9 = (char *)&v54 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v54 - v10;
  v12 = type metadata accessor for Date(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v58 = (char *)&v54 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v14);
  v59 = (char *)&v54 - v17;
  v18 = __chkstk_darwin(v16);
  v55 = (char *)&v54 - v19;
  v20 = __chkstk_darwin(v18);
  v56 = (char *)&v54 - v21;
  v22 = __chkstk_darwin(v20);
  v24 = (char *)&v54 - v23;
  v25 = __chkstk_darwin(v22);
  v57 = (char *)&v54 - v26;
  __chkstk_darwin(v25);
  v28 = (char *)&v54 - v27;
  (*(void (**)(uint64_t, uint64_t))(a3 + 24))(a2, a3);
  v29 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
  if (v29(v11, 1, v12) == 1)
  {
    v9 = v11;
LABEL_5:
    v32 = sub_100004048((uint64_t)v9, (uint64_t *)&unk_1010EA690);
    v33 = v59;
    Date.init()(v32);
    v34 = v58;
    if (qword_1010E98D0 != -1)
      swift_once(&qword_1010E98D0, sub_100027E30);
    v35 = type metadata accessor for Logger(0);
    sub_10001A9E8(v35, (uint64_t)qword_1011B6650);
    v36 = (*(uint64_t (**)(char *, char *, uint64_t))(v13 + 16))(v34, v33, v12);
    v37 = Logger.logObject.getter(v36);
    v38 = static os_log_type_t.default.getter(v37);
    if (os_log_type_enabled(v37, v38))
    {
      v39 = (_DWORD *)swift_slowAlloc(22, -1);
      v57 = (char *)swift_slowAlloc(64, -1);
      v62 = v57;
      *v39 = 136446466;
      __asm { BR              X10 }
    }
    (*(void (**)(char *, uint64_t))(v13 + 8))(v34, v12);

    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v13 + 32))(v61, v33, v12);
  }
  v30 = v11;
  v31 = *(void (**)(char *, char *, uint64_t))(v13 + 32);
  v31(v28, v30, v12);
  (*(void (**)(uint64_t, uint64_t))(a3 + 8))(a2, a3);
  if (v29(v9, 1, v12) == 1)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v28, v12);
    goto LABEL_5;
  }
  v40 = v57;
  v59 = (char *)v31;
  v31(v57, v9, v12);
  v41 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a3 + 72))(v60, a2, a3);
  if (v41 <= 1)
    v42 = 1;
  else
    v42 = v41;
  Date.addingTimeInterval(_:)(86400.0);
  v43 = Date.timeIntervalSince(_:)(v40);
  v44 = *(void (**)(char *, uint64_t))(v13 + 8);
  v44(v24, v12);
  v45 = v56;
  Date.addingTimeInterval(_:)(v43 / (double)v42);
  if (qword_1010E98D0 != -1)
    swift_once(&qword_1010E98D0, sub_100027E30);
  v46 = type metadata accessor for Logger(0);
  sub_10001A9E8(v46, (uint64_t)qword_1011B6650);
  v47 = *(uint64_t (**)(char *, char *, uint64_t))(v13 + 16);
  v48 = v55;
  v49 = v47(v55, v45, v12);
  v50 = Logger.logObject.getter(v49);
  v51 = static os_log_type_t.default.getter(v50);
  if (os_log_type_enabled(v50, v51))
  {
    v58 = v28;
    v52 = (_DWORD *)swift_slowAlloc(52, -1);
    v54 = swift_slowAlloc(64, -1);
    v62 = (char *)v54;
    *v52 = 136447234;
    __asm { BR              X10 }
  }

  v44(v48, v12);
  v44(v57, v12);
  v44(v28, v12);
  return ((uint64_t (*)(uint64_t, char *, uint64_t))v59)(v61, v45, v12);
}

uint64_t sub_1001E7B34@<X0>(uint64_t a1@<X8>)
{
  id v2;
  NSString v3;
  id v4;
  uint64_t v5;
  int v6;
  uint64_t v8;
  _OWORD v9[2];
  _BYTE v10[24];
  uint64_t v11;

  v2 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v3 = String._bridgeToObjectiveC()();
  v4 = objc_msgSend(v2, "objectForKey:", v3);

  if (v4)
  {
    _bridgeAnyObjectToAny(_:)(v9, v4);
    swift_unknownObjectRelease(v4);
  }
  else
  {
    memset(v9, 0, sizeof(v9));
  }
  sub_100005CF0((uint64_t)v9, (uint64_t)v10, (uint64_t *)&unk_1010F6390);
  if (v11)
  {
    v5 = type metadata accessor for Date(0);
    v6 = swift_dynamicCast(a1, v10, (char *)&type metadata for Any + 8, v5, 6);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(a1, v6 ^ 1u, 1, v5);
  }
  else
  {
    sub_100004048((uint64_t)v10, (uint64_t *)&unk_1010F6390);
    v8 = type metadata accessor for Date(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(a1, 1, 1, v8);
  }
}

uint64_t sub_1001E7C88(uint64_t a1, uint64_t a2)
{
  return sub_1001E6A30(a1, a2, (void (*)(uint64_t))sub_100A79158);
}

uint64_t sub_1001E7CA4(uint64_t a1, uint64_t a2)
{
  return sub_1001E6A30(a1, a2, (void (*)(uint64_t))sub_1001E5FD4);
}

unint64_t sub_1001E7CC8()
{
  id v0;
  NSString v1;
  id v2;
  uint64_t v3;
  uint64_t v5;
  _OWORD v6[2];
  _BYTE v7[24];
  uint64_t v8;

  v0 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v1 = String._bridgeToObjectiveC()();
  v2 = objc_msgSend(v0, "objectForKey:", v1);

  if (v2)
  {
    _bridgeAnyObjectToAny(_:)(v6, v2);
    swift_unknownObjectRelease(v2);
  }
  else
  {
    memset(v6, 0, sizeof(v6));
  }
  sub_100005CF0((uint64_t)v6, (uint64_t)v7, (uint64_t *)&unk_1010F6390);
  if (v8)
  {
    v3 = sub_10001A9A8(&qword_1010F2908);
    if ((swift_dynamicCast(&v5, v7, (char *)&type metadata for Any + 8, v3, 6) & 1) != 0)
      return v5;
  }
  else
  {
    sub_100004048((uint64_t)v7, (uint64_t *)&unk_1010F6390);
  }
  return sub_1006B8B2C((uint64_t)_swiftEmptyArrayStorage);
}

void sub_1001E7DF0(char a1)
{
  __asm { BR              X10 }
}

double sub_1001E7E24()
{
  double v0;
  double v1;
  uint64_t v3;

  if (qword_1010E9D08 != -1)
    swift_once(&qword_1010E9D08, sub_10059A6E0);
  OS_dispatch_queue.sync<A>(execute:)(sub_100003D88, qword_1011B71A8, &type metadata for Configuration);
  sub_100C1B340(v3);
  v1 = v0;
  swift_bridgeObjectRelease();
  return v1;
}

void sub_1001E7FC8(char a1)
{
  unint64_t v2;
  double v3;
  double v4;
  uint64_t v5;
  char v6;
  double v7;
  double v8;
  uint64_t v9;
  char v10;
  double v11;
  double v12;
  double v13;
  uint64_t v14;
  char v15;
  double v16;
  double v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;

  v2 = sub_1001E8734();
  v3 = 0.0;
  v4 = 0.0;
  if (*(_QWORD *)(v2 + 16))
  {
    v5 = sub_100518DA0(0x4669577265776F70, 0xE900000000000069);
    if ((v6 & 1) != 0)
      v4 = (double)*(uint64_t *)(*(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * v5) + 16);
  }
  sub_1001E7DF0(0);
  v8 = v4 / v7;
  if (*(_QWORD *)(v2 + 16))
  {
    v9 = sub_100518DA0(0x6C65437265776F70, 0xE90000000000006CLL);
    if ((v10 & 1) != 0)
      v3 = (double)*(uint64_t *)(*(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * v9) + 16);
  }
  sub_1001E7DF0(1);
  v12 = v8 + v3 / v11;
  v13 = 0.0;
  if (*(_QWORD *)(v2 + 16))
  {
    v14 = sub_100518DA0(0x5779726574746162, 0xEB00000000694669);
    if ((v15 & 1) != 0)
      v13 = (double)*(uint64_t *)(*(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * v14) + 16);
  }
  sub_1001E7DF0(2);
  v17 = v12 + v13 / v16;
  if (*(_QWORD *)(v2 + 16) && (v18 = sub_100518DA0(0x4379726574746162, 0xEB000000006C6C65), (v19 & 1) != 0))
  {
    v20 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * v18);
    swift_bridgeObjectRetain(v20);
    swift_bridgeObjectRelease();
    v21 = *(_QWORD *)(v20 + 16);
    swift_bridgeObjectRelease();
    v22 = (double)v21;
  }
  else
  {
    swift_bridgeObjectRelease();
    v22 = 0.0;
  }
  sub_1001E7DF0(3);
  v24 = 24.0 - (v17 + v22 / v23);
  sub_1001E7DF0(a1);
  v26 = v25 * v24;
  if ((~*(_QWORD *)&v26 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_19;
  }
  if (v26 <= -9.22337204e18)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if (v26 >= 9.22337204e18)
LABEL_20:
    __break(1u);
}

void sub_1001E8200(char a1)
{
  __asm { BR              X10 }
}

double sub_1001E8234()
{
  double v0;
  double v1;
  uint64_t v3;

  if (qword_1010E9D08 != -1)
    swift_once(&qword_1010E9D08, sub_10059A6E0);
  OS_dispatch_queue.sync<A>(execute:)(sub_100003D88, qword_1011B71A8, &type metadata for Configuration);
  sub_100C1B340(v3);
  v1 = v0;
  swift_bridgeObjectRelease();
  return v1;
}

void sub_1001E83D8(char a1)
{
  unint64_t v2;
  double v3;
  uint64_t v4;
  char v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  uint64_t v11;
  char v12;
  double v13;
  double v14;
  double v15;
  uint64_t v16;
  char v17;
  double v18;
  double v19;
  double v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  uint64_t v30;

  v2 = sub_1001E7CC8();
  v3 = 0.0;
  if (*(_QWORD *)(v2 + 16))
  {
    v4 = sub_100518DA0(0x4669577265776F70, 0xE900000000000069);
    if ((v5 & 1) != 0)
      v3 = (double)*(uint64_t *)(*(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * v4) + 16);
  }
  if (qword_1010E9D08 != -1)
    swift_once(&qword_1010E9D08, sub_10059A6E0);
  OS_dispatch_queue.sync<A>(execute:)(sub_100003D88, qword_1011B71A8, &type metadata for Configuration);
  sub_100C1B340(v30);
  v7 = v6;
  swift_bridgeObjectRelease();
  v8 = 0.0;
  v9 = 0.0;
  v10 = v3 / v7;
  if (*(_QWORD *)(v2 + 16))
  {
    v11 = sub_100518DA0(0x6C65437265776F70, 0xE90000000000006CLL);
    if ((v12 & 1) != 0)
      v9 = (double)*(uint64_t *)(*(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * v11) + 16);
  }
  OS_dispatch_queue.sync<A>(execute:)(sub_100003D88, qword_1011B71A8, &type metadata for Configuration);
  sub_100C1B34C(v30);
  v14 = v13;
  swift_bridgeObjectRelease();
  v15 = v10 + v9 / v14;
  if (*(_QWORD *)(v2 + 16))
  {
    v16 = sub_100518DA0(0x5779726574746162, 0xEB00000000694669);
    if ((v17 & 1) != 0)
      v8 = (double)*(uint64_t *)(*(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * v16) + 16);
  }
  OS_dispatch_queue.sync<A>(execute:)(sub_100003D88, qword_1011B71A8, &type metadata for Configuration);
  sub_100C1B358(v30);
  v19 = v18;
  swift_bridgeObjectRelease();
  v20 = v15 + v8 / v19;
  if (*(_QWORD *)(v2 + 16) && (v21 = sub_100518DA0(0x4379726574746162, 0xEB000000006C6C65), (v22 & 1) != 0))
  {
    v23 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * v21);
    swift_bridgeObjectRetain(v23);
    swift_bridgeObjectRelease();
    v24 = *(_QWORD *)(v23 + 16);
    swift_bridgeObjectRelease();
    v25 = (double)v24;
  }
  else
  {
    swift_bridgeObjectRelease();
    v25 = 0.0;
  }
  OS_dispatch_queue.sync<A>(execute:)(sub_100003D88, qword_1011B71A8, &type metadata for Configuration);
  sub_100C1B364(v30);
  v27 = v26;
  swift_bridgeObjectRelease();
  sub_1001E8200(a1);
  v29 = v28 * (24.0 - (v20 + v25 / v27));
  if ((~*(_QWORD *)&v29 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_21;
  }
  if (v29 <= -9.22337204e18)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  if (v29 >= 9.22337204e18)
LABEL_22:
    __break(1u);
}

uint64_t sub_1001E86D8(unint64_t *a1, const char *a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for Date(255);
    result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1001E8718()
{
  return sub_1001E8734();
}

unint64_t sub_1001E8734()
{
  id v0;
  NSString v1;
  id v2;
  uint64_t v3;
  uint64_t v5;
  _OWORD v6[2];
  _BYTE v7[24];
  uint64_t v8;

  v0 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v1 = String._bridgeToObjectiveC()();
  v2 = objc_msgSend(v0, "objectForKey:", v1);

  if (v2)
  {
    _bridgeAnyObjectToAny(_:)(v6, v2);
    swift_unknownObjectRelease(v2);
  }
  else
  {
    memset(v6, 0, sizeof(v6));
  }
  sub_100005CF0((uint64_t)v6, (uint64_t)v7, (uint64_t *)&unk_1010F6390);
  if (v8)
  {
    v3 = sub_10001A9A8(&qword_1010F2908);
    if (swift_dynamicCast(&v5, v7, (char *)&type metadata for Any + 8, v3, 6))
      return v5;
  }
  else
  {
    sub_100004048((uint64_t)v7, (uint64_t *)&unk_1010F6390);
  }
  return sub_1006B8B2C((uint64_t)_swiftEmptyArrayStorage);
}

uint64_t sub_1001E8854(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001A9A8(&qword_1010ED1A0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_1001E889C(char a1)
{
  __asm { BR              X10 }
}

ValueMetadata *sub_1001E88C4()
{
  sub_10005A334();
  return &type metadata for AccessoryGenericPayload;
}

void sub_1001E88E4()
{
  sub_1001E9DA8();
  JUMPOUT(0x1001E88D0);
}

void sub_1001E88F4()
{
  sub_1001E9C28();
  JUMPOUT(0x1001E88D0);
}

void sub_1001E8904()
{
  sub_1001E9D38();
  JUMPOUT(0x1001E88D0);
}

void sub_1001E8914()
{
  sub_1001E9BE4();
  JUMPOUT(0x1001E88D0);
}

void sub_1001E8924()
{
  sub_1001E9C6C();
  JUMPOUT(0x1001E88D0);
}

void sub_1001E8934()
{
  sub_1001E9CF4();
  JUMPOUT(0x1001E88D0);
}

void sub_1001E8944()
{
  sub_1001E9CB0();
  JUMPOUT(0x1001E88D0);
}

uint64_t sub_1001E8954(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1001E8990 + 4 * byte_100E2D203[a1]))(0x7453646E756F732ELL, 0xEB00000000747261);
}

unint64_t sub_1001E899C()
{
  return 0xD00000000000001BLL;
}

uint64_t sub_1001E8B5C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  return ((uint64_t (*)())((char *)sub_1001E8B88 + 4
                                                * byte_100E2D216[(a4 >> 59) & 6 | ((a2 & 0x2000000000000000) != 0)]))();
}

uint64_t sub_1001E8B88()
{
  return 10;
}

uint64_t sub_1001E8B90()
{
  return 14;
}

uint64_t sub_1001E8B98()
{
  return 17;
}

uint64_t sub_1001E8BA0()
{
  return 9;
}

uint64_t sub_1001E8BA8()
{
  return 11;
}

uint64_t sub_1001E8BB4()
{
  return 13;
}

void sub_1001E8D98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }
}

unint64_t sub_1001E8DE0()
{
  uint64_t v0;
  char v1;
  unint64_t result;

  *(_QWORD *)(v0 + 24) = &type metadata for AccessorySetMaxConnectionsPayload;
  result = sub_1001E9DA8();
  *(_QWORD *)(v0 + 32) = result;
  *(_BYTE *)v0 = v1;
  return result;
}

uint64_t sub_1001E9090(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v22[5];
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[3];
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v23 = type metadata accessor for Endianness(0);
  v10 = *(_QWORD *)(v23 - 8);
  __chkstk_darwin(v23);
  v12 = (char *)v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1[3];
  v13 = a1[4];
  sub_10001AA44(a1, v14);
  dispatch thunk of BinaryEncoding.container()(v26, v14, v13);
  v22[1] = a2;
  v22[2] = a3;
  v22[3] = a4;
  v22[4] = a5;
  v15 = sub_1001E8B5C(a2, a3, a4, a5);
  v16 = v15;
  LOWORD(v24) = word_100E2D386[v15];
  static Endianness.current.getter(v15);
  v17 = sub_100112060();
  FixedWidthInteger.convert(to:)(&v25, v12, &type metadata for UInt16, v17);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v23);
  LOWORD(v24) = v25;
  v18 = v27;
  v19 = v28;
  sub_10009F5D0((uint64_t)v26, v27);
  v20 = v29;
  dispatch thunk of BinaryEncodingContaining.encode<A>(_:)(&v24, &type metadata for UInt16, v17, v18, v19);
  if (!v20)
    __asm { BR              X10 }
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v26);
}

__int16 *sub_1001E95E8@<X0>(_QWORD *a1@<X0>, __int16 **a2@<X8>)
{
  uint64_t v2;
  __int16 *result;
  __int16 *v5;
  __int16 *v6;
  __int16 *v7;

  result = sub_1001EA524(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
    a2[3] = v7;
  }
  return result;
}

uint64_t sub_1001E9614(_QWORD *a1)
{
  uint64_t v1;

  return sub_1001E9090(a1, *(_QWORD *)v1, *(_QWORD *)(v1 + 8), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_1001E9630(__int16 a1)
{
  if ((unsigned __int16)(a1 - 512) > 0x13u)
    return 19;
  else
    return byte_100E2D3AC[(__int16)(a1 - 512)];
}

uint64_t destroy for AccessoryConfigCommand(uint64_t a1)
{
  return sub_1001E9684(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), sub_10001BC14);
}

uint64_t sub_1001E9684(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t (*a5)(uint64_t, unint64_t))
{
  int v5;
  unint64_t v7;

  v5 = (a4 >> 59) & 6 | ((a2 & 0x2000000000000000) != 0);
  if (v5 == 6 || v5 == 4)
    return a5(result, a2 & 0xDFFFFFFFFFFFFFFFLL);
  if (v5 == 1)
  {
    v7 = a4 & 0xCFFFFFFFFFFFFFFFLL;
    a5(result, a2 & 0xDFFFFFFFFFFFFFFFLL);
    return a5(a3, v7);
  }
  return result;
}

uint64_t *initializeWithCopy for AccessoryConfigCommand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = a2[3];
  sub_1001E9684(*a2, v4, v5, v6, sub_10001BBBC);
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  return a1;
}

uint64_t *assignWithCopy for AccessoryConfigCommand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = a2[3];
  sub_1001E9684(*a2, v4, v5, v6, sub_10001BBBC);
  v7 = *a1;
  v8 = a1[1];
  v9 = a1[2];
  v10 = a1[3];
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  sub_1001E9684(v7, v8, v9, v10, sub_10001BC14);
  return a1;
}

__n128 initializeWithTake for FeatureSupportMatrixProductType(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t *assignWithTake for AccessoryConfigCommand(uint64_t *a1, _OWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  __int128 v7;

  v3 = *a1;
  v5 = a1[1];
  v4 = a1[2];
  v6 = a1[3];
  v7 = a2[1];
  *(_OWORD *)a1 = *a2;
  *((_OWORD *)a1 + 1) = v7;
  sub_1001E9684(v3, v5, v4, v6, sub_10001BC14);
  return a1;
}

uint64_t getEnumTagSinglePayload for AccessoryConfigCommand(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 9 && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 9);
  v3 = ((((*(_QWORD *)(a1 + 24) >> 58) & 0xC | (*(_QWORD *)(a1 + 8) >> 60) & 2) >> 1) & 0xFFFFFFF7 | (8 * ((*(_QWORD *)(a1 + 8) & 0x1000000000000000) != 0))) ^ 0xF;
  if (v3 >= 8)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for AccessoryConfigCommand(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 8)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 9;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 9)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if (a3 >= 9)
      *(_BYTE *)(result + 32) = 0;
    if (a2)
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = (unint64_t)((-2 * (_BYTE)a2) & 2 | 1u) << 60;
      *(_QWORD *)(result + 16) = 0;
      *(_QWORD *)(result + 24) = ((unint64_t)((-2 * a2) & 0x1E | 1) << 58) & 0x3000000000000000;
    }
  }
  return result;
}

uint64_t sub_1001E98DC(uint64_t a1)
{
  unsigned int v1;

  v1 = (*(_QWORD *)(a1 + 24) >> 59) & 6 | ((*(_QWORD *)(a1 + 8) & 0x2000000000000000) != 0);
  if (v1 == 7)
    return (*(_DWORD *)a1 + 7);
  else
    return v1;
}

uint64_t sub_1001E9908(uint64_t result)
{
  unint64_t v1;

  v1 = *(_QWORD *)(result + 24) & 0xCFFFFFFFFFFFFFFFLL;
  *(_QWORD *)(result + 8) &= ~0x2000000000000000uLL;
  *(_QWORD *)(result + 24) = v1;
  return result;
}

_QWORD *sub_1001E9924(_QWORD *result, unsigned int a2)
{
  unint64_t v2;

  if (a2 < 7)
  {
    v2 = result[3] & 0xCFFFFFFFFFFFFFFFLL | ((((unint64_t)a2 >> 1) & 3) << 60);
    result[1] = result[1] & 0xCFFFFFFFFFFFFFFFLL | ((unint64_t)(a2 & 1) << 61);
    result[3] = v2;
  }
  else
  {
    *result = a2 - 7;
    *(_OWORD *)(result + 1) = xmmword_100E2D3C0;
    result[3] = 0x3000000000000000;
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessoryConfigCommand()
{
  return &type metadata for AccessoryConfigCommand;
}

unint64_t sub_1001E9980()
{
  unint64_t result;

  result = qword_1010F2910;
  if (!qword_1010F2910)
  {
    result = swift_getWitnessTable(byte_100E2D344, &type metadata for AccessoryConfigCommand.AccessoryConfigCommandError);
    atomic_store(result, (unint64_t *)&qword_1010F2910);
  }
  return result;
}

unint64_t sub_1001E99C4()
{
  unint64_t result;

  result = qword_1010F2918;
  if (!qword_1010F2918)
  {
    result = swift_getWitnessTable(aQ_3, &type metadata for AccessoryGenericPayload);
    atomic_store(result, (unint64_t *)&qword_1010F2918);
  }
  return result;
}

unint64_t sub_1001E9A08()
{
  unint64_t result;

  result = qword_1010F2920;
  if (!qword_1010F2920)
  {
    result = swift_getWitnessTable("}1$", &type metadata for AccessoryTXPowerResponsePayload);
    atomic_store(result, (unint64_t *)&qword_1010F2920);
  }
  return result;
}

unint64_t sub_1001E9A4C()
{
  unint64_t result;

  result = qword_1010F2928;
  if (!qword_1010F2928)
  {
    result = swift_getWitnessTable(aU_3, &type metadata for AccessoryStartAggressiveAdvertisingPayload);
    atomic_store(result, (unint64_t *)&qword_1010F2928);
  }
  return result;
}

unint64_t sub_1001E9A90()
{
  unint64_t result;

  result = qword_1010F2930;
  if (!qword_1010F2930)
  {
    result = swift_getWitnessTable(byte_100E58910, &type metadata for AccessoryLatchSeparatedKeyResponsePayload);
    atomic_store(result, (unint64_t *)&qword_1010F2930);
  }
  return result;
}

unint64_t sub_1001E9AD4()
{
  unint64_t result;

  result = qword_1010F2938;
  if (!qword_1010F2938)
  {
    result = swift_getWitnessTable(aA_7, &type metadata for AccessoryMultistatusResponsePayload);
    atomic_store(result, (unint64_t *)&qword_1010F2938);
  }
  return result;
}

unint64_t sub_1001E9B18()
{
  unint64_t result;

  result = qword_1010F2940;
  if (!qword_1010F2940)
  {
    result = swift_getWitnessTable(byte_100E304F4, &type metadata for AccessoryCommandResponsePayload);
    atomic_store(result, (unint64_t *)&qword_1010F2940);
  }
  return result;
}

unint64_t sub_1001E9B5C()
{
  unint64_t result;

  result = qword_1010F2948;
  if (!qword_1010F2948)
  {
    result = swift_getWitnessTable(aQ_4, &type metadata for AccessoryKeyrollIndicationPayload);
    atomic_store(result, (unint64_t *)&qword_1010F2948);
  }
  return result;
}

unint64_t sub_1001E9BA0()
{
  unint64_t result;

  result = qword_1010F2950;
  if (!qword_1010F2950)
  {
    result = swift_getWitnessTable("1Y$", &type metadata for AccessorySetMaxConnectionsPayload);
    atomic_store(result, (unint64_t *)&qword_1010F2950);
  }
  return result;
}

unint64_t sub_1001E9BE4()
{
  unint64_t result;

  result = qword_1010F2958;
  if (!qword_1010F2958)
  {
    result = swift_getWitnessTable(aU_4, &type metadata for AccessoryMultistatusResponsePayload);
    atomic_store(result, (unint64_t *)&qword_1010F2958);
  }
  return result;
}

unint64_t sub_1001E9C28()
{
  unint64_t result;

  result = qword_1010F2960;
  if (!qword_1010F2960)
  {
    result = swift_getWitnessTable(byte_100E5A1BC, &type metadata for AccessoryKeyrollIndicationPayload);
    atomic_store(result, (unint64_t *)&qword_1010F2960);
  }
  return result;
}

unint64_t sub_1001E9C6C()
{
  unint64_t result;

  result = qword_1010F2968;
  if (!qword_1010F2968)
  {
    result = swift_getWitnessTable(byte_100E588F4, &type metadata for AccessoryLatchSeparatedKeyResponsePayload);
    atomic_store(result, (unint64_t *)&qword_1010F2968);
  }
  return result;
}

unint64_t sub_1001E9CB0()
{
  unint64_t result;

  result = qword_1010F2970;
  if (!qword_1010F2970)
  {
    result = swift_getWitnessTable(byte_100E512F8, &type metadata for AccessoryTXPowerResponsePayload);
    atomic_store(result, (unint64_t *)&qword_1010F2970);
  }
  return result;
}

unint64_t sub_1001E9CF4()
{
  unint64_t result;

  result = qword_1010F2978;
  if (!qword_1010F2978)
  {
    result = swift_getWitnessTable(asc_100E6CB0C, &type metadata for AccessoryStartAggressiveAdvertisingPayload);
    atomic_store(result, (unint64_t *)&qword_1010F2978);
  }
  return result;
}

unint64_t sub_1001E9D38()
{
  unint64_t result;

  result = qword_1010F2980;
  if (!qword_1010F2980)
  {
    result = swift_getWitnessTable(byte_100E3051C, &type metadata for AccessoryCommandResponsePayload);
    atomic_store(result, (unint64_t *)&qword_1010F2980);
  }
  return result;
}

uint64_t sub_1001E9D7C()
{
  uint64_t v0;

  sub_10001BC14(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
  sub_10001BC14(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

unint64_t sub_1001E9DA8()
{
  unint64_t result;

  result = qword_1010F2988;
  if (!qword_1010F2988)
  {
    result = swift_getWitnessTable("EY$", &type metadata for AccessorySetMaxConnectionsPayload);
    atomic_store(result, (unint64_t *)&qword_1010F2988);
  }
  return result;
}

void sub_1001E9DEC(char a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t DynamicType;
  _QWORD v8[3];
  uint64_t v9;

  sub_100030784(a2, (uint64_t)v8);
  sub_1001E889C(a1);
  v4 = v3;
  v5 = v9;
  v6 = sub_10001AA44(v8, v9);
  DynamicType = swift_getDynamicType(v6, v5, 1);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v8);
  if (v4 == DynamicType)
    __asm { BR              X10 }
  __break(1u);
  JUMPOUT(0x1001EA4D8);
}

__int16 *sub_1001EA524(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int16 *v11;
  unint64_t v12;
  _QWORD *v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int16 *v24;
  _QWORD v26[5];
  _QWORD v27[5];
  _QWORD v28[3];
  uint64_t v29;
  uint64_t v30;
  __int16 v31;

  v3 = type metadata accessor for Endianness(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v26[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  sub_10001AA44(a1, v7);
  dispatch thunk of BinaryDecoding.container()(v28, v7, v8);
  v9 = v29;
  v10 = v30;
  v11 = (__int16 *)sub_10009F5D0((uint64_t)v28, v29);
  v12 = sub_100112060();
  v13 = dispatch thunk of BinaryDecodingContaining.decode<A>(_:)(v26, &type metadata for UInt16, &type metadata for UInt16, v12, v9, v10);
  if (v1)
    goto LABEL_5;
  v31 = v26[0];
  static Endianness.current.getter(v13);
  v11 = &v31;
  FixedWidthInteger.convert(to:)(v27, v6, &type metadata for UInt16, v12);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  v14 = sub_1001E9630(v27[0]);
  if (v14 == 19)
  {
    v15 = sub_1001E9980();
    v16 = swift_allocError(&type metadata for AccessoryConfigCommand.AccessoryConfigCommandError, v15, 0, 0);
    *v17 = 1;
    swift_willThrow(v16);
LABEL_5:
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v28);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
    return v11;
  }
  v18 = v14;
  sub_1001E889C(v14);
  v20 = v19;
  v22 = v21;
  sub_100030784((uint64_t)a1, (uint64_t)v26);
  v27[3] = v20;
  v27[4] = v22;
  sub_100018F08(v27);
  dispatch thunk of BinaryDecodable.init(from:)(v26, v20, *(_QWORD *)(v22 + 8));
  sub_100030784((uint64_t)v27, (uint64_t)v26);
  sub_1001E9DEC(v18, (uint64_t)v26);
  v11 = v24;
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v27);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v28);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  return v11;
}

uint64_t storeEnumTagSinglePayload for AccessoryConfigCommand.AccessoryConfigCommandError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1001EA7AC + 4 * byte_100E2D23E[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1001EA7E0 + 4 * byte_100E2D239[v4]))();
}

uint64_t sub_1001EA7E0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001EA7E8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1001EA7F0);
  return result;
}

uint64_t sub_1001EA7FC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1001EA804);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1001EA808(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001EA810(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AccessoryConfigCommand.AccessoryConfigCommandError()
{
  return &type metadata for AccessoryConfigCommand.AccessoryConfigCommandError;
}

unint64_t sub_1001EA830()
{
  unint64_t result;

  result = qword_1010F2990;
  if (!qword_1010F2990)
  {
    result = swift_getWitnessTable(byte_100E2D31C, &type metadata for AccessoryConfigCommand.AccessoryConfigCommandError);
    atomic_store(result, (unint64_t *)&qword_1010F2990);
  }
  return result;
}

void sub_1001EA874(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  id v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  id v24;
  NSString v25;
  id v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char *v30;
  char v31;
  unint64_t v32;
  _BYTE *v33;
  NSString v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  NSString v44;
  id v45;
  uint64_t v46;
  NSString v47;
  id v48;
  char v49;
  unint64_t v50;
  uint64_t v51;
  char *v52;
  char v53;
  unint64_t v54;
  _QWORD v55[5];
  uint64_t v56;
  unint64_t v57;
  int v58;
  void (*v59)(char *, char *, uint64_t);
  uint64_t v60;
  unint64_t v61;
  char *v62;
  uint64_t v63;
  unint64_t v64;
  id v65;

  v60 = a2;
  v3 = type metadata accessor for PeerCommunicationIdentifier(0);
  __chkstk_darwin(v3);
  v62 = (char *)v55 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v5);
  v7 = (char *)v55 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)v55 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = CKRecord.recordType.getter(v10);
  if (v13 == 0x65655072656E774FLL && v14 == 0xEE00747375725472)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v15 = _stringCompareWithSmolCheck(_:_:expecting:)(v13, v14, 0x65655072656E774FLL, 0xEE00747375725472, 0);
    swift_bridgeObjectRelease();
    if ((v15 & 1) == 0)
    {
      v32 = sub_1001EC540();
      v22 = swift_allocError(&type metadata for OwnerPeerTrust.ConversionError, v32, 0, 0);
      *v33 = 0;
      goto LABEL_17;
    }
  }
  v16 = objc_msgSend(a1, "recordID");
  v17 = objc_msgSend(v16, "recordName");

  v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
  v20 = v19;

  UUID.init(uuidString:)(v18, v20);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) != 1)
  {
    v59 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
    v59(v12, v7, v8);
    v24 = objc_msgSend(a1, "encryptedValues");
    v25 = String._bridgeToObjectiveC()();
    v26 = objc_msgSend(v24, "objectForKeyedSubscript:", v25);

    if (v26)
    {
      v63 = (uint64_t)v26;
      v27 = sub_10001A9A8((uint64_t *)&unk_1010ED8D0);
      if ((swift_dynamicCast(&v65, &v63, v27, &type metadata for Int, 6) & 1) != 0)
      {
        if (!v65)
        {
          v58 = 0;
LABEL_20:
          v34 = String._bridgeToObjectiveC()();
          v35 = objc_msgSend(v24, "objectForKeyedSubscript:", v34);

          if (v35)
          {
            v65 = v35;
            if ((swift_dynamicCast(&v63, &v65, v27, &type metadata for Data, 6) & 1) != 0)
            {
              v36 = v63;
              v57 = v64;
              v37 = type metadata accessor for PropertyListDecoder(0);
              swift_allocObject(v37, *(unsigned int *)(v37 + 48), *(unsigned __int16 *)(v37 + 52));
              v38 = PropertyListDecoder.init()();
              v39 = sub_100006204((unint64_t *)&unk_101112610, type metadata accessor for PeerCommunicationIdentifier, (uint64_t)&unk_100E4C060);
              v40 = v61;
              v56 = v36;
              v41 = v36;
              v42 = v57;
              dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(v3, v41, v57, v3, v39);
              if (!v40)
              {
                swift_release(v38);
                v44 = String._bridgeToObjectiveC()();
                v45 = objc_msgSend(v24, "objectForKeyedSubscript:", v44);

                v46 = (uint64_t)v62;
                if (v45 && (v65 = v45, (swift_dynamicCast(&v63, &v65, v27, &type metadata for String, 6) & 1) != 0))
                {
                  v55[4] = v63;
                  v61 = v64;
                  v47 = String._bridgeToObjectiveC()();
                  v48 = objc_msgSend(v24, "objectForKeyedSubscript:", v47);

                  if (v48)
                  {
                    v65 = v48;
                    v49 = swift_dynamicCast(&v63, &v65, v27, &type metadata for Data, 6);
                    v46 = (uint64_t)v62;
                    if ((v49 & 1) != 0)
                      __asm { BR              X10 }
                    swift_bridgeObjectRelease();
                  }
                  else
                  {
                    swift_bridgeObjectRelease();
                    v46 = (uint64_t)v62;
                  }
                  v54 = sub_1001EC540();
                  v51 = swift_allocError(&type metadata for OwnerPeerTrust.ConversionError, v54, 0, 0);
                  v53 = 5;
                }
                else
                {
                  v50 = sub_1001EC540();
                  v51 = swift_allocError(&type metadata for OwnerPeerTrust.ConversionError, v50, 0, 0);
                  v53 = 4;
                }
                *v52 = v53;
                swift_willThrow(v51);
                sub_10001BC14(v56, v57);
                swift_unknownObjectRelease(v24);

                sub_1000126B0(v46, type metadata accessor for PeerCommunicationIdentifier);
                goto LABEL_15;
              }
              swift_release(v38);
              swift_unknownObjectRelease(v24);
              sub_10001BC14(v56, v42);
LABEL_14:

LABEL_15:
              (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
              return;
            }
          }
          v43 = sub_1001EC540();
          v29 = swift_allocError(&type metadata for OwnerPeerTrust.ConversionError, v43, 0, 0);
          v31 = 3;
LABEL_13:
          *v30 = v31;
          swift_willThrow(v29);
          swift_unknownObjectRelease(v24);
          goto LABEL_14;
        }
        if (v65 == (id)1)
        {
          v58 = 1;
          goto LABEL_20;
        }
      }
    }
    v28 = sub_1001EC540();
    v29 = swift_allocError(&type metadata for OwnerPeerTrust.ConversionError, v28, 0, 0);
    v31 = 2;
    goto LABEL_13;
  }
  sub_1001C0844((uint64_t)v7);
  v21 = sub_1001EC540();
  v22 = swift_allocError(&type metadata for OwnerPeerTrust.ConversionError, v21, 0, 0);
  *v23 = 1;
LABEL_17:
  swift_willThrow(v22);

}

void sub_1001EB16C()
{
  NSString v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v0 = String._bridgeToObjectiveC()();
  v1 = (void *)IDSCopyIDForEmailAddress();

  if (v1)
  {
    v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);
    v4 = v3;

    byte_1011B6A60 = 0;
    qword_1011B6A68 = v2;
    qword_1011B6A70 = v4;
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_1001EB1EC()
{
  uint64_t v0;

  v0 = type metadata accessor for UUID(0);
  sub_1000234D8(v0, qword_1011B6A78);
  sub_10001A9E8(v0, (uint64_t)qword_1011B6A78);
  return UUID.init(uuid:)(0, 0, 0, 0, 0, 0, 0, 0, 0);
}

void sub_1001EB260(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  unint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;

  v2 = v1;
  v4 = *v1;
  v5 = v2[1];
  sub_10001BBBC(v4, v5);
  Data.hash(into:)(a1, v4, v5);
  sub_10001BC14(v4, v5);
  v6 = (int *)type metadata accessor for OwnerPeerTrust(0);
  v7 = type metadata accessor for UUID(0);
  v8 = sub_100006204(&qword_1010F98B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(a1, v7, v8);
  Hasher._combine(_:)(*((unsigned __int8 *)v2 + v6[6]));
  sub_100728C18();
  v9 = (uint64_t *)((char *)v2 + v6[8]);
  v10 = *v9;
  v11 = v9[1];
  swift_bridgeObjectRetain(v11);
  String.hash(into:)(a1, v10, v11);
  swift_bridgeObjectRelease();
  v12 = (uint64_t *)((char *)v2 + v6[9]);
  v13 = *v12;
  v14 = v12[1];
  sub_10001BBBC(*v12, v14);
  Data.hash(into:)(a1, v13, v14);
  sub_10001BC14(v13, v14);
  Hasher._combine(_:)(*((unsigned __int8 *)v2 + v6[10]));
}

uint64_t sub_1001EB39C(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1001EB3D4 + 4 * byte_100E2D3D0[a1]))(0xD000000000000010, 0x8000000100EC2FE0);
}

uint64_t sub_1001EB3D4()
{
  return 0x696669746E656469;
}

uint64_t sub_1001EB3F0()
{
  return 1701869940;
}

uint64_t sub_1001EB400(uint64_t a1)
{
  return a1 + 8;
}

uint64_t sub_1001EB438()
{
  return 0x6574617473;
}

uint64_t sub_1001EB44C()
{
  unsigned __int8 *v0;

  return sub_1001EB39C(*v0);
}

uint64_t sub_1001EB454@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1001ED76C(a1, a2);
  *a3 = result;
  return result;
}

void sub_1001EB478(_BYTE *a1@<X8>)
{
  *a1 = 7;
}

uint64_t sub_1001EB484(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001EC2DC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001EB4AC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001EC2DC();
  return CodingKey.debugDescription.getter(a1, v2);
}

Swift::Int sub_1001EB4D4()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  sub_1001EB260((uint64_t)v1);
  return Hasher._finalize()();
}

Swift::Int sub_1001EB514()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  sub_1001EB260((uint64_t)v1);
  return Hasher._finalize()();
}

uint64_t *sub_1001EB550@<X0>(uint64_t *result@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  v2 = *result;
  if ((unint64_t)*result >= 3)
    LOBYTE(v2) = 3;
  *a2 = v2;
  return result;
}

uint64_t sub_1001EB568(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1001EDA24();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1001EB5C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1001EDA24();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_1001EB610()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v6;

  v0 = type metadata accessor for URL(0);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = __chkstk_darwin(v0);
  v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000234D8(v2, qword_1011B6A90);
  sub_10001A9E8(v0, (uint64_t)qword_1011B6A90);
  type metadata accessor for BeaconStore(0);
  sub_1007EC9B8((uint64_t)v4);
  URL.appendingPathComponent(_:isDirectory:)(0x65655072656E774FLL, 0xEE00747375725472, 1);
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v4, v0);
}

uint64_t sub_1001EB6E8(id *a1)
{
  uint64_t v1;
  uint64_t v2;
  id v3;
  id v4;
  uint64_t ObjectType;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  void *v36;

  v2 = v1;
  v3 = *a1;
  v4 = objc_msgSend(*a1, "encryptedValues");
  ObjectType = swift_getObjectType(v4);
  v6 = static os_log_type_t.debug.getter(ObjectType);
  if (qword_1010EA260 != -1)
    swift_once(&qword_1010EA260, sub_100B5DA30);
  v7 = qword_1011B7D40;
  v8 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v9 = swift_allocObject(v8, 72, 7);
  *(_OWORD *)(v9 + 16) = xmmword_100E22B00;
  v10 = v3;
  v11 = objc_msgSend(v10, "description");
  v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
  v14 = v13;

  *(_QWORD *)(v9 + 56) = &type metadata for String;
  *(_QWORD *)(v9 + 64) = sub_10001AA00();
  *(_QWORD *)(v9 + 32) = v12;
  *(_QWORD *)(v9 + 40) = v14;
  os_log(_:dso:log:_:_:)(v6, &_mh_execute_header, v7, "Updating OwnerPeerTrust record: %@", 34, 2, v9);
  swift_bridgeObjectRelease();
  v15 = (int *)type metadata accessor for OwnerPeerTrust(0);
  v16 = *(unsigned __int8 *)(v2 + v15[6]);
  v35 = &type metadata for Int;
  v36 = &protocol witness table for Int;
  v33 = v16;
  CKRecordKeyValueSetting.subscript.setter(&v33, 0x7375725472656570, 0xED00006570795474, ObjectType);
  v17 = type metadata accessor for PropertyListEncoder(0);
  v18 = swift_allocObject(v17, *(unsigned int *)(v17 + 48), *(unsigned __int16 *)(v17 + 52));
  PropertyListEncoder.init()(v18);
  v19 = v2 + v15[7];
  v20 = type metadata accessor for PeerCommunicationIdentifier(0);
  v21 = sub_100006204(&qword_1010F29B8, type metadata accessor for PeerCommunicationIdentifier, (uint64_t)&unk_100E4C0B0);
  v22 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(v19, v20, v21);
  v24 = v23;
  swift_release();
  v35 = &type metadata for Data;
  v36 = &protocol witness table for Data;
  v33 = v22;
  v34 = v24;
  CKRecordKeyValueSetting.subscript.setter(&v33, 0xD000000000000018, 0x8000000100ECB8B0, ObjectType);
  v25 = (uint64_t *)(v2 + v15[8]);
  v27 = *v25;
  v26 = v25[1];
  v35 = &type metadata for String;
  v36 = &protocol witness table for String;
  v33 = v27;
  v34 = v26;
  swift_bridgeObjectRetain(v26);
  CKRecordKeyValueSetting.subscript.setter(&v33, 0xD000000000000011, 0x8000000100ECB8D0, ObjectType);
  v28 = (uint64_t *)(v2 + v15[9]);
  v29 = *v28;
  v30 = v28[1];
  v35 = &type metadata for Data;
  v36 = &protocol witness table for Data;
  v33 = v29;
  v34 = v30;
  sub_10001BBBC(v29, v30);
  CKRecordKeyValueSetting.subscript.setter(&v33, 0xD000000000000015, 0x8000000100ECB8F0, ObjectType);
  v31 = *(unsigned __int8 *)(v2 + v15[10]);
  v35 = &type metadata for Int;
  v36 = &protocol witness table for Int;
  v33 = v31;
  CKRecordKeyValueSetting.subscript.setter(&v33, 0x6574617473, 0xE500000000000000, ObjectType);
  return swift_unknownObjectRelease(v4);
}

uint64_t sub_1001EBA20(_QWORD *a1)
{
  _OWORD *v1;
  uint64_t v2;
  _OWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v27;
  char v28;
  __int128 v29;

  v3 = v1;
  v5 = sub_10001A9A8(&qword_1010F29F0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  v11 = sub_1001EC2DC();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for OwnerPeerTrust.CodingKeys, &type metadata for OwnerPeerTrust.CodingKeys, v11, v9, v10);
  v29 = *v3;
  v28 = 0;
  v12 = sub_100036A58();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v29, &v28, v5, &type metadata for Data, v12);
  if (!v2)
  {
    v13 = (int *)type metadata accessor for OwnerPeerTrust(0);
    v14 = (char *)v3 + v13[5];
    LOBYTE(v29) = 1;
    v15 = type metadata accessor for UUID(0);
    v16 = sub_100006204(&qword_1010EDAC0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v14, &v29, v5, v15, v16);
    LOBYTE(v29) = *((_BYTE *)v3 + v13[6]);
    v28 = 2;
    v17 = sub_1001EC474();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v29, &v28, v5, &type metadata for PeerTrustType, v17);
    v18 = (char *)v3 + v13[7];
    LOBYTE(v29) = 3;
    v19 = type metadata accessor for PeerCommunicationIdentifier(0);
    v20 = sub_100006204(&qword_1010F29B8, type metadata accessor for PeerCommunicationIdentifier, (uint64_t)&unk_100E4C0B0);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v18, &v29, v5, v19, v20);
    v21 = (uint64_t *)((char *)v3 + v13[8]);
    v22 = *v21;
    v23 = v21[1];
    LOBYTE(v29) = 4;
    KeyedEncodingContainer.encode(_:forKey:)(v22, v23, &v29, v5);
    v29 = *(_OWORD *)((char *)v3 + v13[9]);
    v28 = 5;
    v24 = sub_1001EC4B8();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v29, &v28, v5, &type metadata for SharedSecretKey, v24);
    LOBYTE(v29) = *((_BYTE *)v3 + v13[10]);
    v28 = 6;
    v25 = sub_1001EC4FC();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v29, &v28, v5, &type metadata for OwnerPeerTrust.State, v25);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1001EBCEC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int *v10;
  uint64_t v11;
  _OWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  __int128 v43;
  char v44;

  v35 = a2;
  v36 = type metadata accessor for PeerCommunicationIdentifier(0);
  __chkstk_darwin(v36);
  v37 = (uint64_t *)((char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v38 = type metadata accessor for UUID(0);
  v4 = *(_QWORD *)(v38 - 8);
  __chkstk_darwin(v38);
  v6 = (uint64_t *)((char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v40 = sub_10001A9A8(&qword_1010F29C0);
  v7 = *(_QWORD *)(v40 - 8);
  __chkstk_darwin(v40);
  v9 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = (int *)type metadata accessor for OwnerPeerTrust(0);
  __chkstk_darwin(v10);
  v12 = (_OWORD *)((char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = a1[3];
  v14 = a1[4];
  v41 = a1;
  sub_10001AA44(a1, v13);
  v15 = sub_1001EC2DC();
  v39 = v9;
  v16 = v42;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for OwnerPeerTrust.CodingKeys, &type metadata for OwnerPeerTrust.CodingKeys, v15, v13, v14);
  if (v16)
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v41);
  v17 = v7;
  v42 = v4;
  v44 = 0;
  v18 = sub_100036994();
  v19 = v39;
  v20 = v40;
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v43, &type metadata for Data, &v44, v40, &type metadata for Data, v18);
  v21 = (uint64_t)v12;
  *v12 = v43;
  LOBYTE(v43) = 1;
  v22 = sub_100006204((unint64_t *)&qword_1010EDA90, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v23 = v6;
  v24 = v38;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v6, v38, &v43, v20, v38, v22);
  v25 = v17;
  (*(void (**)(uint64_t, _QWORD *, uint64_t))(v42 + 32))(v21 + v10[5], v23, v24);
  v44 = 2;
  v26 = sub_1001EC320();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v43, &type metadata for PeerTrustType, &v44, v20, &type metadata for PeerTrustType, v26);
  *(_BYTE *)(v21 + v10[6]) = v43;
  LOBYTE(v43) = 3;
  v27 = sub_100006204((unint64_t *)&unk_101112610, type metadata accessor for PeerCommunicationIdentifier, (uint64_t)&unk_100E4C060);
  v28 = v37;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v37, v36, &v43, v20, v36, v27);
  sub_1001EC364((uint64_t)v28, v21 + v10[7]);
  LOBYTE(v43) = 4;
  v29 = KeyedDecodingContainer.decode(_:forKey:)(&v43, v20);
  v30 = (uint64_t *)(v21 + v10[8]);
  *v30 = v29;
  v30[1] = v31;
  v44 = 5;
  v32 = sub_1001EC3A8();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v43, &type metadata for SharedSecretKey, &v44, v20, &type metadata for SharedSecretKey, v32);
  *(_OWORD *)(v21 + v10[9]) = v43;
  v44 = 6;
  v33 = sub_1001EC3EC();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v43, &type metadata for OwnerPeerTrust.State, &v44, v20, &type metadata for OwnerPeerTrust.State, v33);
  (*(void (**)(char *, uint64_t))(v25 + 8))(v19, v20);
  *(_BYTE *)(v21 + v10[10]) = v43;
  sub_1001EC430(v21, v35);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v41);
  return sub_1000126B0(v21, type metadata accessor for OwnerPeerTrust);
}

uint64_t sub_1001EC21C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1001EBCEC(a1, a2);
}

uint64_t sub_1001EC230(_QWORD *a1)
{
  return sub_1001EBA20(a1);
}

uint64_t sub_1001EC244(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_100006204(&qword_1010F29A0, type metadata accessor for OwnerPeerTrust, (uint64_t)&unk_100E2D43C);
  result = sub_100006204(&qword_1010F29A8, type metadata accessor for OwnerPeerTrust, (uint64_t)&unk_100E2D414);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t sub_1001EC2A0(uint64_t a1)
{
  uint64_t result;

  result = sub_100006204(&qword_1010F29B0, type metadata accessor for OwnerPeerTrust, (uint64_t)&unk_100E2D464);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1001EC2DC()
{
  unint64_t result;

  result = qword_1010F29C8;
  if (!qword_1010F29C8)
  {
    result = swift_getWitnessTable(aI_1, &type metadata for OwnerPeerTrust.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F29C8);
  }
  return result;
}

unint64_t sub_1001EC320()
{
  unint64_t result;

  result = qword_1010F29D0;
  if (!qword_1010F29D0)
  {
    result = swift_getWitnessTable(byte_100E4C088, &type metadata for PeerTrustType);
    atomic_store(result, (unint64_t *)&qword_1010F29D0);
  }
  return result;
}

uint64_t sub_1001EC364(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PeerCommunicationIdentifier(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_1001EC3A8()
{
  unint64_t result;

  result = qword_1010F29E0;
  if (!qword_1010F29E0)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for SharedSecretKey, &type metadata for SharedSecretKey);
    atomic_store(result, (unint64_t *)&qword_1010F29E0);
  }
  return result;
}

unint64_t sub_1001EC3EC()
{
  unint64_t result;

  result = qword_1010F29E8;
  if (!qword_1010F29E8)
  {
    result = swift_getWitnessTable(byte_100E2D7C8, &type metadata for OwnerPeerTrust.State);
    atomic_store(result, (unint64_t *)&qword_1010F29E8);
  }
  return result;
}

uint64_t sub_1001EC430(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for OwnerPeerTrust(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_1001EC474()
{
  unint64_t result;

  result = qword_1010F29F8;
  if (!qword_1010F29F8)
  {
    result = swift_getWitnessTable(byte_100E4C038, &type metadata for PeerTrustType);
    atomic_store(result, (unint64_t *)&qword_1010F29F8);
  }
  return result;
}

unint64_t sub_1001EC4B8()
{
  unint64_t result;

  result = qword_1010F2A00;
  if (!qword_1010F2A00)
  {
    result = swift_getWitnessTable("Յ#", &type metadata for SharedSecretKey);
    atomic_store(result, (unint64_t *)&qword_1010F2A00);
  }
  return result;
}

unint64_t sub_1001EC4FC()
{
  unint64_t result;

  result = qword_1010F2A08;
  if (!qword_1010F2A08)
  {
    result = swift_getWitnessTable(byte_100E2D7A0, &type metadata for OwnerPeerTrust.State);
    atomic_store(result, (unint64_t *)&qword_1010F2A08);
  }
  return result;
}

unint64_t sub_1001EC540()
{
  unint64_t result;

  result = qword_1010F2A18;
  if (!qword_1010F2A18)
  {
    result = swift_getWitnessTable(byte_100E2D760, &type metadata for OwnerPeerTrust.ConversionError);
    atomic_store(result, (unint64_t *)&qword_1010F2A18);
  }
  return result;
}

BOOL sub_1001EC584(uint64_t *a1, uint64_t a2)
{
  char v4;
  int *v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  BOOL v12;
  char v13;
  _BOOL8 result;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  char v22;

  _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(*a1, a1[1]);
  if ((v4 & 1) == 0)
    return 0;
  v5 = (int *)type metadata accessor for OwnerPeerTrust(0);
  if ((static UUID.== infix(_:_:)((char *)a1 + v5[5], a2 + v5[5]) & 1) == 0)
    return 0;
  if (*((unsigned __int8 *)a1 + v5[6]) != *(unsigned __int8 *)(a2 + v5[6]))
    return 0;
  sub_10072AC1C((uint64_t)a1 + v5[7], a2 + v5[7]);
  if ((v6 & 1) == 0)
    return 0;
  v7 = v5[8];
  v8 = *(uint64_t *)((char *)a1 + v7);
  v9 = *(uint64_t *)((char *)a1 + v7 + 8);
  v10 = (_QWORD *)(a2 + v7);
  v11 = v10[1];
  v12 = v8 == *v10 && v9 == v11;
  if (v12 || (v13 = _stringCompareWithSmolCheck(_:_:expecting:)(v8, v9, *v10, v11, 0), result = 0, (v13 & 1) != 0))
  {
    v15 = v5[9];
    v16 = *(uint64_t *)((char *)a1 + v15);
    v17 = *(uint64_t *)((char *)a1 + v15 + 8);
    v18 = (uint64_t *)(a2 + v15);
    v19 = *v18;
    v20 = v18[1];
    sub_10001BBBC(v16, v17);
    sub_10001BBBC(v19, v20);
    _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v16, v17);
    v22 = v21;
    sub_10001BC14(v19, v20);
    sub_10001BC14(v16, v17);
    if ((v22 & 1) != 0)
      return *((unsigned __int8 *)a1 + v5[10]) == *(unsigned __int8 *)(a2 + v5[10]);
    return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for OwnerPeerTrust.ConversionError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_1001EC714 + 4 * byte_100E2D3E2[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_1001EC748 + 4 * byte_100E2D3DD[v4]))();
}

uint64_t sub_1001EC748(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001EC750(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1001EC758);
  return result;
}

uint64_t sub_1001EC764(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1001EC76CLL);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_1001EC770(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001EC778(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for OwnerPeerTrust.ConversionError()
{
  return &type metadata for OwnerPeerTrust.ConversionError;
}

uint64_t storeEnumTagSinglePayload for OwnerPeerTrust.State(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1001EC7E0 + 4 * byte_100E2D3EC[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1001EC814 + 4 * byte_100E2D3E7[v4]))();
}

uint64_t sub_1001EC814(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001EC81C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1001EC824);
  return result;
}

uint64_t sub_1001EC830(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1001EC838);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1001EC83C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001EC844(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for OwnerPeerTrust.State()
{
  return &type metadata for OwnerPeerTrust.State;
}

uint64_t storeEnumTagSinglePayload for OwnerPeerTrust.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_1001EC8AC + 4 * byte_100E2D3F6[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_1001EC8E0 + 4 * byte_100E2D3F1[v4]))();
}

uint64_t sub_1001EC8E0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001EC8E8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1001EC8F0);
  return result;
}

uint64_t sub_1001EC8FC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1001EC904);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_1001EC908(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001EC910(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for OwnerPeerTrust.CodingKeys()
{
  return &type metadata for OwnerPeerTrust.CodingKeys;
}

uint64_t *sub_1001EC92C(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;
  _QWORD *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  unint64_t v39;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v22 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v22 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = *a2;
    v8 = a2[1];
    sub_10001BBBC(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    v9 = a3[5];
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for UUID(0);
    v13 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
    v13(v10, v11, v12);
    v14 = a3[7];
    *((_BYTE *)a1 + a3[6]) = *((_BYTE *)a2 + a3[6]);
    v15 = (uint64_t *)((char *)a1 + v14);
    v16 = (char *)a2 + v14;
    v17 = type metadata accessor for PeerCommunicationIdentifier(0);
    switch(swift_getEnumCaseMultiPayload(v16, v17))
    {
      case 0u:
        v18 = *((_QWORD *)v16 + 1);
        *v15 = *(_QWORD *)v16;
        v15[1] = v18;
        swift_bridgeObjectRetain(v18);
        v19 = v15;
        v20 = v17;
        v21 = 0;
        goto LABEL_11;
      case 1u:
        v13((char *)v15, v16, v12);
        v19 = v15;
        v20 = v17;
        v21 = 1;
        goto LABEL_11;
      case 2u:
        *(_OWORD *)v15 = *(_OWORD *)v16;
        v23 = *((_QWORD *)v16 + 2);
        v15[2] = v23;
        swift_bridgeObjectRetain(v23);
        v19 = v15;
        v20 = v17;
        v21 = 2;
        goto LABEL_11;
      case 3u:
        *(_BYTE *)v15 = *v16;
        v24 = *((_QWORD *)v16 + 2);
        v15[1] = *((_QWORD *)v16 + 1);
        v15[2] = v24;
        swift_bridgeObjectRetain(v24);
        v19 = v15;
        v20 = v17;
        v21 = 3;
        goto LABEL_11;
      case 4u:
        *(_BYTE *)v15 = *v16;
        v25 = *((_QWORD *)v16 + 2);
        v15[1] = *((_QWORD *)v16 + 1);
        v15[2] = v25;
        v26 = *((_QWORD *)v16 + 3);
        v27 = *((_QWORD *)v16 + 4);
        v15[3] = v26;
        v15[4] = v27;
        swift_bridgeObjectRetain(v25);
        swift_bridgeObjectRetain(v27);
        v19 = v15;
        v20 = v17;
        v21 = 4;
        goto LABEL_11;
      case 5u:
        v28 = *((_QWORD *)v16 + 1);
        *v15 = *(_QWORD *)v16;
        v15[1] = v28;
        *((_BYTE *)v15 + 16) = v16[16];
        v29 = *((_QWORD *)v16 + 4);
        v15[3] = *((_QWORD *)v16 + 3);
        v15[4] = v29;
        v30 = *((_QWORD *)v16 + 5);
        v31 = *((_QWORD *)v16 + 6);
        v15[5] = v30;
        v15[6] = v31;
        swift_bridgeObjectRetain(v28);
        swift_bridgeObjectRetain(v29);
        swift_bridgeObjectRetain(v31);
        v19 = v15;
        v20 = v17;
        v21 = 5;
LABEL_11:
        swift_storeEnumTagMultiPayload(v19, v20, v21);
        break;
      default:
        memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
        break;
    }
    v32 = a3[8];
    v33 = a3[9];
    v34 = (uint64_t *)((char *)a1 + v32);
    v35 = (uint64_t *)((char *)a2 + v32);
    v36 = v35[1];
    *v34 = *v35;
    v34[1] = v36;
    v37 = (uint64_t *)((char *)a1 + v33);
    v38 = *(uint64_t *)((char *)a2 + v33);
    v39 = *(uint64_t *)((char *)a2 + v33 + 8);
    swift_bridgeObjectRetain(v36);
    sub_10001BBBC(v38, v39);
    *v37 = v38;
    v37[1] = v39;
    *((_BYTE *)a1 + a3[10]) = *((_BYTE *)a2 + a3[10]);
  }
  return a1;
}

uint64_t sub_1001ECB80(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;

  sub_10001BC14(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  v4 = a1 + a2[5];
  v5 = type metadata accessor for UUID(0);
  v6 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v6(v4, v5);
  v7 = a1 + a2[7];
  v8 = type metadata accessor for PeerCommunicationIdentifier(0);
  switch(swift_getEnumCaseMultiPayload(v7, v8))
  {
    case 0u:
    case 2u:
    case 3u:
      goto LABEL_5;
    case 1u:
      v6(v7, v5);
      break;
    case 4u:
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 5u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }
  swift_bridgeObjectRelease();
  return sub_10001BC14(*(_QWORD *)(a1 + a2[9]), *(_QWORD *)(a1 + a2[9] + 8));
}

uint64_t *sub_1001ECC88(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  unint64_t v37;

  v6 = *a2;
  v7 = a2[1];
  sub_10001BBBC(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  v8 = a3[5];
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for UUID(0);
  v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
  v12(v9, v10, v11);
  v13 = a3[7];
  *((_BYTE *)a1 + a3[6]) = *((_BYTE *)a2 + a3[6]);
  v14 = (uint64_t *)((char *)a1 + v13);
  v15 = (char *)a2 + v13;
  v16 = type metadata accessor for PeerCommunicationIdentifier(0);
  switch(swift_getEnumCaseMultiPayload(v15, v16))
  {
    case 0u:
      v17 = *((_QWORD *)v15 + 1);
      *v14 = *(_QWORD *)v15;
      v14[1] = v17;
      swift_bridgeObjectRetain(v17);
      v18 = v14;
      v19 = v16;
      v20 = 0;
      goto LABEL_9;
    case 1u:
      v12((char *)v14, v15, v11);
      v18 = v14;
      v19 = v16;
      v20 = 1;
      goto LABEL_9;
    case 2u:
      *(_OWORD *)v14 = *(_OWORD *)v15;
      v21 = *((_QWORD *)v15 + 2);
      v14[2] = v21;
      swift_bridgeObjectRetain(v21);
      v18 = v14;
      v19 = v16;
      v20 = 2;
      goto LABEL_9;
    case 3u:
      *(_BYTE *)v14 = *v15;
      v22 = *((_QWORD *)v15 + 2);
      v14[1] = *((_QWORD *)v15 + 1);
      v14[2] = v22;
      swift_bridgeObjectRetain(v22);
      v18 = v14;
      v19 = v16;
      v20 = 3;
      goto LABEL_9;
    case 4u:
      *(_BYTE *)v14 = *v15;
      v23 = *((_QWORD *)v15 + 2);
      v14[1] = *((_QWORD *)v15 + 1);
      v14[2] = v23;
      v24 = *((_QWORD *)v15 + 3);
      v25 = *((_QWORD *)v15 + 4);
      v14[3] = v24;
      v14[4] = v25;
      swift_bridgeObjectRetain(v23);
      swift_bridgeObjectRetain(v25);
      v18 = v14;
      v19 = v16;
      v20 = 4;
      goto LABEL_9;
    case 5u:
      v26 = *((_QWORD *)v15 + 1);
      *v14 = *(_QWORD *)v15;
      v14[1] = v26;
      *((_BYTE *)v14 + 16) = v15[16];
      v27 = *((_QWORD *)v15 + 4);
      v14[3] = *((_QWORD *)v15 + 3);
      v14[4] = v27;
      v28 = *((_QWORD *)v15 + 5);
      v29 = *((_QWORD *)v15 + 6);
      v14[5] = v28;
      v14[6] = v29;
      swift_bridgeObjectRetain(v26);
      swift_bridgeObjectRetain(v27);
      swift_bridgeObjectRetain(v29);
      v18 = v14;
      v19 = v16;
      v20 = 5;
LABEL_9:
      swift_storeEnumTagMultiPayload(v18, v19, v20);
      break;
    default:
      memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
      break;
  }
  v30 = a3[8];
  v31 = a3[9];
  v32 = (uint64_t *)((char *)a1 + v30);
  v33 = (uint64_t *)((char *)a2 + v30);
  v34 = v33[1];
  *v32 = *v33;
  v32[1] = v34;
  v35 = (uint64_t *)((char *)a1 + v31);
  v36 = *(uint64_t *)((char *)a2 + v31);
  v37 = *(uint64_t *)((char *)a2 + v31 + 8);
  swift_bridgeObjectRetain(v34);
  sub_10001BBBC(v36, v37);
  *v35 = v36;
  v35[1] = v37;
  *((_BYTE *)a1 + a3[10]) = *((_BYTE *)a2 + a3[10]);
  return a1;
}

uint64_t *sub_1001ECEB0(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;

  v6 = *a2;
  v7 = a2[1];
  sub_10001BBBC(*a2, v7);
  v8 = *a1;
  v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  sub_10001BC14(v8, v9);
  v10 = a3[5];
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for UUID(0);
  v14 = *(_QWORD *)(v13 - 8);
  (*(void (**)(char *, char *, uint64_t))(v14 + 24))(v11, v12, v13);
  *((_BYTE *)a1 + a3[6]) = *((_BYTE *)a2 + a3[6]);
  if (a1 != a2)
  {
    v15 = a3[7];
    v16 = (uint64_t *)((char *)a1 + v15);
    v17 = (uint64_t *)((char *)a2 + v15);
    sub_1000126B0((uint64_t)a1 + v15, type metadata accessor for PeerCommunicationIdentifier);
    v18 = type metadata accessor for PeerCommunicationIdentifier(0);
    switch(swift_getEnumCaseMultiPayload(v17, v18))
    {
      case 0u:
        *v16 = *v17;
        v19 = v17[1];
        v16[1] = v19;
        swift_bridgeObjectRetain(v19);
        swift_storeEnumTagMultiPayload(v16, v18, 0);
        break;
      case 1u:
        (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v14 + 16))(v16, v17, v13);
        swift_storeEnumTagMultiPayload(v16, v18, 1);
        break;
      case 2u:
        *v16 = *v17;
        v16[1] = v17[1];
        v20 = v17[2];
        v16[2] = v20;
        swift_bridgeObjectRetain(v20);
        swift_storeEnumTagMultiPayload(v16, v18, 2);
        break;
      case 3u:
        *(_BYTE *)v16 = *(_BYTE *)v17;
        v16[1] = v17[1];
        v21 = v17[2];
        v16[2] = v21;
        swift_bridgeObjectRetain(v21);
        swift_storeEnumTagMultiPayload(v16, v18, 3);
        break;
      case 4u:
        *(_BYTE *)v16 = *(_BYTE *)v17;
        v16[1] = v17[1];
        v22 = v17[2];
        v16[2] = v22;
        v16[3] = v17[3];
        v23 = v17[4];
        v16[4] = v23;
        swift_bridgeObjectRetain(v22);
        swift_bridgeObjectRetain(v23);
        swift_storeEnumTagMultiPayload(v16, v18, 4);
        break;
      case 5u:
        *v16 = *v17;
        v24 = v17[1];
        v16[1] = v24;
        *((_BYTE *)v16 + 16) = *((_BYTE *)v17 + 16);
        v16[3] = v17[3];
        v25 = v17[4];
        v16[4] = v25;
        v16[5] = v17[5];
        v26 = v17[6];
        v16[6] = v26;
        swift_bridgeObjectRetain(v24);
        swift_bridgeObjectRetain(v25);
        swift_bridgeObjectRetain(v26);
        swift_storeEnumTagMultiPayload(v16, v18, 5);
        break;
      default:
        memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
        break;
    }
  }
  v27 = a3[8];
  v28 = (uint64_t *)((char *)a1 + v27);
  v29 = (uint64_t *)((char *)a2 + v27);
  *v28 = *v29;
  v30 = v29[1];
  v28[1] = v30;
  swift_bridgeObjectRetain(v30);
  swift_bridgeObjectRelease();
  v31 = a3[9];
  v32 = (uint64_t *)((char *)a1 + v31);
  v33 = (uint64_t *)((char *)a2 + v31);
  v34 = *v33;
  v35 = v33[1];
  sub_10001BBBC(*v33, v35);
  v36 = *v32;
  v37 = v32[1];
  *v32 = v34;
  v32[1] = v35;
  sub_10001BC14(v36, v37);
  *((_BYTE *)a1 + a3[10]) = *((_BYTE *)a2 + a3[10]);
  return a1;
}

_OWORD *sub_1001ED174(_OWORD *a1, _OWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for UUID(0);
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v11 = a3[7];
  *((_BYTE *)a1 + a3[6]) = *((_BYTE *)a2 + a3[6]);
  v12 = (char *)a1 + v11;
  v13 = (char *)a2 + v11;
  v14 = type metadata accessor for PeerCommunicationIdentifier(0);
  if (swift_getEnumCaseMultiPayload(v13, v14) == 1)
  {
    v10(v12, v13, v9);
    swift_storeEnumTagMultiPayload(v12, v14, 1);
  }
  else
  {
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  v15 = a3[9];
  *(_OWORD *)((char *)a1 + a3[8]) = *(_OWORD *)((char *)a2 + a3[8]);
  *(_OWORD *)((char *)a1 + v15) = *(_OWORD *)((char *)a2 + v15);
  *((_BYTE *)a1 + a3[10]) = *((_BYTE *)a2 + a3[10]);
  return a1;
}

uint64_t *sub_1001ED278(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;

  v6 = *a1;
  v7 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_10001BC14(v6, v7);
  v8 = a3[5];
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for UUID(0);
  v12 = *(_QWORD *)(v11 - 8);
  (*(void (**)(char *, char *, uint64_t))(v12 + 40))(v9, v10, v11);
  *((_BYTE *)a1 + a3[6]) = *((_BYTE *)a2 + a3[6]);
  if (a1 != a2)
  {
    v13 = a3[7];
    v14 = (char *)a1 + v13;
    v15 = (char *)a2 + v13;
    sub_1000126B0((uint64_t)a1 + v13, type metadata accessor for PeerCommunicationIdentifier);
    v16 = type metadata accessor for PeerCommunicationIdentifier(0);
    if (swift_getEnumCaseMultiPayload(v15, v16) == 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v14, v15, v11);
      swift_storeEnumTagMultiPayload(v14, v16, 1);
    }
    else
    {
      memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    }
  }
  v17 = a3[8];
  v18 = (uint64_t *)((char *)a1 + v17);
  v19 = (uint64_t *)((char *)a2 + v17);
  v21 = *v19;
  v20 = v19[1];
  *v18 = v21;
  v18[1] = v20;
  swift_bridgeObjectRelease();
  v22 = a3[9];
  v23 = *(uint64_t *)((char *)a1 + v22);
  v24 = *(uint64_t *)((char *)a1 + v22 + 8);
  *(_OWORD *)((char *)a1 + v22) = *(_OWORD *)((char *)a2 + v22);
  sub_10001BC14(v23, v24);
  *((_BYTE *)a1 + a3[10]) = *((_BYTE *)a2 + a3[10]);
  return a1;
}

uint64_t sub_1001ED3C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001ED3D4);
}

uint64_t sub_1001ED3D4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v12;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = a3[5];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v10 = type metadata accessor for PeerCommunicationIdentifier(0);
  v7 = *(_QWORD *)(v10 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v10;
    v9 = a3[7];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v12 = *(_QWORD *)(a1 + a3[8] + 8);
  if (v12 >= 0xFFFFFFFF)
    LODWORD(v12) = -1;
  return (v12 + 1);
}

uint64_t sub_1001ED47C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001ED488);
}

uint64_t sub_1001ED488(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;

  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = a4[5];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
  }
  result = type metadata accessor for PeerCommunicationIdentifier(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = a4[7];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
  }
  *(_QWORD *)(a1 + a4[8] + 8) = (a2 - 1);
  return result;
}

uint64_t sub_1001ED52C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[7];

  v5[0] = &unk_100E2D4D8;
  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v5[1] = *(_QWORD *)(result - 8) + 64;
    v5[2] = &unk_100E2D4F0;
    result = type metadata accessor for PeerCommunicationIdentifier(319);
    if (v4 <= 0x3F)
    {
      v5[3] = *(_QWORD *)(result - 8) + 64;
      v5[4] = &unk_100E2D508;
      v5[5] = &unk_100E2D4D8;
      v5[6] = &unk_100E2D520;
      swift_initStructMetadata(a1, 256, 7, v5, a1 + 16);
      return 0;
    }
  }
  return result;
}

uint64_t sub_1001ED5D8()
{
  return sub_100006204(&qword_1010F2AD0, type metadata accessor for OwnerPeerTrust, (uint64_t)&unk_100E2D538);
}

unint64_t sub_1001ED608()
{
  unint64_t result;

  result = qword_1010F2AD8;
  if (!qword_1010F2AD8)
  {
    result = swift_getWitnessTable(aI_2, &type metadata for OwnerPeerTrust.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F2AD8);
  }
  return result;
}

unint64_t sub_1001ED650()
{
  unint64_t result;

  result = qword_1010F2AE0;
  if (!qword_1010F2AE0)
  {
    result = swift_getWitnessTable(byte_100E2D6D0, &type metadata for OwnerPeerTrust.State);
    atomic_store(result, (unint64_t *)&qword_1010F2AE0);
  }
  return result;
}

unint64_t sub_1001ED698()
{
  unint64_t result;

  result = qword_1010F2AE8;
  if (!qword_1010F2AE8)
  {
    result = swift_getWitnessTable(aA_8, &type metadata for OwnerPeerTrust.ConversionError);
    atomic_store(result, (unint64_t *)&qword_1010F2AE8);
  }
  return result;
}

unint64_t sub_1001ED6E0()
{
  unint64_t result;

  result = qword_1010F2AF0;
  if (!qword_1010F2AF0)
  {
    result = swift_getWitnessTable("1\x1B#", &type metadata for OwnerPeerTrust.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F2AF0);
  }
  return result;
}

unint64_t sub_1001ED728()
{
  unint64_t result;

  result = qword_1010F2AF8;
  if (!qword_1010F2AF8)
  {
    result = swift_getWitnessTable(byte_100E2D5C8, &type metadata for OwnerPeerTrust.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F2AF8);
  }
  return result;
}

uint64_t sub_1001ED76C(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char v11;

  if (a1 == 0xD000000000000010)
  {
    v4 = 0x8000000100EC2FE0;
    if (a2 == 0x8000000100EC2FE0)
      goto LABEL_5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x8000000100EC2FE0, a1, a2, 0) & 1) != 0)
  {
    v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  if (a1 == 0x696669746E656469 && a2 == 0xEA00000000007265)
  {
    v6 = 0xEA00000000007265;
LABEL_11:
    swift_bridgeObjectRelease(v6);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x696669746E656469, 0xEA00000000007265, a1, a2, 0) & 1) != 0)
  {
    v6 = a2;
    goto LABEL_11;
  }
  if (a1 == 1701869940 && a2 == 0xE400000000000000)
  {
    v7 = 0xE400000000000000;
LABEL_17:
    swift_bridgeObjectRelease(v7);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1701869940, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_17;
  }
  if (a1 == 0xD000000000000018 && a2 == 0x8000000100ECB8B0)
  {
    v8 = 0x8000000100ECB8B0;
LABEL_23:
    swift_bridgeObjectRelease(v8);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000018, 0x8000000100ECB8B0, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_23;
  }
  if (a1 == 0xD000000000000011 && a2 == 0x8000000100ECB8D0)
  {
    v9 = 0x8000000100ECB8D0;
LABEL_29:
    swift_bridgeObjectRelease(v9);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x8000000100ECB8D0, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_29;
  }
  if (a1 == 0xD000000000000015 && a2 == 0x8000000100ECB8F0)
  {
    v10 = 0x8000000100ECB8F0;
LABEL_35:
    swift_bridgeObjectRelease(v10);
    return 5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000015, 0x8000000100ECB8F0, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_35;
  }
  if (a1 == 0x6574617473 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease(0xE500000000000000);
    return 6;
  }
  else
  {
    v11 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6574617473, 0xE500000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v11 & 1) != 0)
      return 6;
    else
      return 7;
  }
}

unint64_t sub_1001EDA24()
{
  unint64_t result;

  result = qword_1010F2B00;
  if (!qword_1010F2B00)
  {
    result = swift_getWitnessTable(byte_100E2D658, &type metadata for OwnerPeerTrust.State);
    atomic_store(result, (unint64_t *)&qword_1010F2B00);
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessoryProductData()
{
  return &type metadata for AccessoryProductData;
}

void sub_1001EDA78(uint64_t a1, uint64_t a2)
{
  type metadata accessor for Endianness(0);
  __chkstk_darwin();
  __asm { BR              X11 }
}

uint64_t sub_1001EDAE8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = Data.subdata(in:)(0, (uint64_t)BYTE6(v1) >> 1, v2, v1);
  v6 = v5;
  static Endianness.current.getter(v4);
  sub_10007D5A4();
  FixedWidthInteger.init(data:ofEndianness:)((_QWORD *)(v3 - 40), v4, v6, v0);
  if (*(_BYTE *)(v3 - 36))
    return 0;
  else
    return *(int *)(v3 - 40);
}

uint64_t sub_1001EDBAC(uint64_t a1, unint64_t a2)
{
  return ((uint64_t (*)(_QWORD, _QWORD, uint64_t, unint64_t))((char *)&loc_1001EDBC4
                                                                            + *((int *)qword_1001EDC38 + (a2 >> 62))))(0, 0, a1, a2);
}

uint64_t sub_1001EDBD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (BYTE6(a4) < (uint64_t)(BYTE6(a4) >> 1))
  {
    __break(1u);
    JUMPOUT(0x1001EDC30);
  }
  return Data.subdata(in:)();
}

uint64_t sub_1001EDC48(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  Swift::String v11;
  uint64_t v12;
  Swift::String v13;
  Swift::String v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  Swift::String v19;
  Swift::String v20;
  Swift::String v21;
  Swift::String v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  Swift::String v27;
  Swift::String v28;
  _QWORD v30[2];
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;

  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Endianness(0);
  __chkstk_darwin(v8);
  v10 = (char *)v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = 0;
  v34 = 0xE000000000000000;
  _StringGuts.grow(_:)(57);
  v11._countAndFlagsBits = 0x49726F646E65763CLL;
  v11._object = (void *)0xEB00000000203A64;
  String.append(_:)(v11);
  sub_1001EDA78(a1, a2);
  v31 = v12;
  v13._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  v14._countAndFlagsBits = 0x746375646F727020;
  v14._object = (void *)0xEC000000203A6449;
  String.append(_:)(v14);
  v15 = sub_1001EDBAC(a1, a2);
  v17 = v16;
  static Endianness.current.getter(v15);
  sub_10007D5A4();
  FixedWidthInteger.init(data:ofEndianness:)(&v31, v15, v17, v10);
  v18 = (int)v31;
  if (BYTE4(v31))
    v18 = 0;
  v31 = v18;
  v19._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  String.append(_:)(v19);
  swift_bridgeObjectRelease();
  v20._object = (void *)0xEB00000000203A65;
  v20._countAndFlagsBits = 0x756C615677617220;
  String.append(_:)(v20);
  v21._countAndFlagsBits = Data.hexString.getter(a1, a2);
  String.append(_:)(v21);
  swift_bridgeObjectRelease();
  v22._countAndFlagsBits = 0x746375646F727020;
  v22._object = (void *)0xEE00203A44495555;
  String.append(_:)(v22);
  if (qword_1010E9A18 != -1)
    swift_once(&qword_1010E9A18, sub_1001EE150);
  v31 = qword_1010F2B08;
  v32 = qword_1010F2B10;
  sub_10001BBBC(qword_1010F2B08, qword_1010F2B10);
  Data.append(_:)(a1, a2);
  v23 = v31;
  v24 = v32;
  v30[0] = v31;
  v30[1] = v32;
  v25 = sub_100035530();
  DataProtocol.stableUUID.getter(&type metadata for Data, v25);
  sub_10001BC14(v23, v24);
  v26 = sub_1001D4C18();
  v27._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v4, v26);
  String.append(_:)(v27);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  v28._countAndFlagsBits = 62;
  v28._object = (void *)0xE100000000000000;
  String.append(_:)(v28);
  return v33;
}

uint64_t sub_1001EDF40(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD v16[2];

  v6 = sub_10001A9A8(&qword_1010F2B48);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = a1[3];
  v11 = a1[4];
  sub_10001AA44(a1, v10);
  v12 = sub_1001EE800();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for AccessoryProductData.CodingKeys, &type metadata for AccessoryProductData.CodingKeys, v12, v10, v11);
  v16[0] = a2;
  v16[1] = a3;
  v13 = sub_100036A58();
  KeyedEncodingContainer.encode<A>(_:forKey:)(v16, v14, v6, &type metadata for Data, v13);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t sub_1001EE044(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001EE800();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001EE06C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001EE800();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_1001EE094(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;

  sub_1001EE65C(*a1, a1[1]);
  *a2 = v3;
  a2[1] = v4;
}

_QWORD *sub_1001EE0C0@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v5;

  result = sub_1001EE6DC(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }
  return result;
}

uint64_t sub_1001EE0E8(_QWORD *a1)
{
  uint64_t *v1;

  return sub_1001EDF40(a1, *v1, v1[1]);
}

uint64_t sub_1001EE100()
{
  uint64_t v0;

  return sub_1001EDC48(*(_QWORD *)v0, *(_QWORD *)(v0 + 8));
}

unint64_t sub_1001EE10C()
{
  unint64_t result;

  result = qword_1010F2B30;
  if (!qword_1010F2B30)
  {
    result = swift_getWitnessTable(byte_100E2D868, &type metadata for AccessoryProductData);
    atomic_store(result, (unint64_t *)&qword_1010F2B30);
  }
  return result;
}

uint64_t sub_1001EE150()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;

  v0 = type metadata accessor for UUID(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin();
  v3 = (char *)&v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = UUID.init(uuid:)(113, 248, 20, 73, 47, 84, 72, 29, 0x8F67B3C3EE7C3D93);
  v5 = UUID.data.getter(v4);
  v7 = v6;
  result = (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  qword_1010F2B08 = v5;
  unk_1010F2B10 = v7;
  return result;
}

uint64_t sub_1001EE21C()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_1000234D8(v0, qword_1010F2B18);
  sub_10001A9E8(v0, (uint64_t)qword_1010F2B18);
  return Logger.init(subsystem:category:)(0xD00000000000001DLL, 0x8000000100EC5D30, 0xD000000000000014, 0x8000000100ECB910);
}

uint64_t sub_1001EE2A4(uint64_t *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr))
{
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  a4(&v7);
  v5 = *a1 + 1;
  result = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v7, (char *)&v7 + 1, *a1, v5);
  *a1 = v5;
  return result;
}

uint64_t sub_1001EE2FC(uint64_t *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr))
{
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  a4(&v7);
  v5 = *a1 + 8;
  result = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v7, &v8, *a1, v5);
  *a1 = v5;
  return result;
}

uint64_t sub_1001EE354@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = a1();
  *a2 = result;
  return result;
}

uint64_t sub_1001EE37C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  uint64_t v16;
  unint64_t v17;

  if (a1 == (int)a1)
  {
    if (a2 == (int)a2)
    {
      v10 = sub_10007D5A4();
      v16 = FixedWidthInteger.data.getter(&type metadata for Int32, v10);
      v17 = v11;
      v15 = a2;
      v12 = FixedWidthInteger.data.getter(&type metadata for Int32, v10);
      v14 = v13;
      Data.append(_:)(v12, v13);
      sub_10001BC14(v12, v14);
      __asm { BR              X10 }
    }
    if (qword_1010EA1D0 != -1)
      swift_once(&qword_1010EA1D0, sub_100B11444);
    v16 = 0x7365547265646E75;
    v17 = 0xE900000000000074;
  }
  else
  {
    if (qword_1010EA1D0 != -1)
      swift_once(&qword_1010EA1D0, sub_100B11444);
    v16 = 0x7365547265646E75;
    v17 = 0xE900000000000074;
  }
  SynchronousCache.cachedValue<A>(key:computeBlock:)(&v15, &v16, sub_10001F628, 0, &type metadata for Bool);
  swift_bridgeObjectRelease();
  if ((v15 & 1) == 0)
  {
    if (qword_1010E9A20 != -1)
      swift_once(&qword_1010E9A20, sub_1001EE21C);
    v4 = type metadata accessor for Logger(0);
    v5 = sub_10001A9E8(v4, (uint64_t)qword_1010F2B18);
    v6 = Logger.logObject.getter(v5);
    v7 = static os_log_type_t.fault.getter(v6);
    if (os_log_type_enabled(v6, v7))
    {
      v8 = swift_slowAlloc(22, -1);
      *(_DWORD *)v8 = 134218240;
      v16 = a1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v16, &v17, v8 + 4, v8 + 12);
      *(_WORD *)(v8 + 12) = 2048;
      v16 = a2;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v16, &v17, v8 + 14, v8 + 22);
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Invalid vendorId: %ld productId: %ld", (uint8_t *)v8, 0x16u);
      swift_slowDealloc(v8, -1, -1);
    }

  }
  return 0;
}

void sub_1001EE65C(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1001EE680(uint64_t result, unint64_t a2)
{
  if (BYTE6(a2) != 8)
  {
    sub_10001BC14(result, a2);
    return 0;
  }
  return result;
}

_QWORD *sub_1001EE6DC(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v14;

  v3 = sub_10001A9A8(&qword_1010F2B38);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  v9 = sub_10001AA44(a1, v7);
  v10 = sub_1001EE800();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for AccessoryProductData.CodingKeys, &type metadata for AccessoryProductData.CodingKeys, v10, v7, v8);
  if (v1)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  }
  else
  {
    v11 = sub_100036994();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v14, &type metadata for Data, v12, v3, &type metadata for Data, v11);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    v9 = v14;
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  }
  return v9;
}

unint64_t sub_1001EE800()
{
  unint64_t result;

  result = qword_1010F2B40;
  if (!qword_1010F2B40)
  {
    result = swift_getWitnessTable(byte_100E2DA44, &type metadata for AccessoryProductData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F2B40);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for AccessoryProductData.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1001EE884 + 4 * byte_100E2D840[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1001EE8A4 + 4 * byte_100E2D845[v4]))();
}

_BYTE *sub_1001EE884(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1001EE8A4(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1001EE8AC(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1001EE8B4(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1001EE8BC(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1001EE8C4(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for AccessoryProductData.CodingKeys()
{
  return &type metadata for AccessoryProductData.CodingKeys;
}

unint64_t sub_1001EE8E4()
{
  unint64_t result;

  result = qword_1010F2B50;
  if (!qword_1010F2B50)
  {
    result = swift_getWitnessTable(aE_4, &type metadata for AccessoryProductData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F2B50);
  }
  return result;
}

unint64_t sub_1001EE92C()
{
  unint64_t result;

  result = qword_1010F2B58;
  if (!qword_1010F2B58)
  {
    result = swift_getWitnessTable(asc_100E2D98C, &type metadata for AccessoryProductData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F2B58);
  }
  return result;
}

unint64_t sub_1001EE974()
{
  unint64_t result;

  result = qword_1010F2B60;
  if (!qword_1010F2B60)
  {
    result = swift_getWitnessTable(byte_100E2D9B4, &type metadata for AccessoryProductData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F2B60);
  }
  return result;
}

void sub_1001EE9B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  __n128 v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  char *v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;
  uint64_t v29;
  void (*v30)(char *, unint64_t, uint64_t, __n128);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  void (*v39)(char *, uint64_t);
  _QWORD v40[2];
  uint64_t v41;
  int64_t v42;
  unint64_t v43;
  int64_t v44;
  char *v45;
  uint64_t v46;
  int64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;

  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v50 = (char *)v40 - v9;
  v10 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v10);
  v12 = (char *)v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_QWORD *)(a2 + 16);
  if (!v13)
    return;
  v14 = *(_QWORD *)(a1 + 16);
  if (!v14)
    return;
  v45 = v12;
  if (v13 >= v14)
    v15 = a1;
  else
    v15 = a2;
  if (v13 >= v14)
    v16 = a2;
  else
    v16 = a1;
  v17 = *(_QWORD *)(v15 + 56);
  v41 = v15 + 56;
  v18 = -1 << *(_BYTE *)(v15 + 32);
  v40[1] = ~v18;
  if (-v18 < 64)
    v19 = ~(-1 << -(char)v18);
  else
    v19 = -1;
  v20 = v19 & v17;
  v42 = (unint64_t)(63 - v18) >> 6;
  v49 = v16 + 56;
  v46 = v15;
  swift_bridgeObjectRetain(v15);
  v21 = swift_bridgeObjectRetain(v16);
  v22 = 0;
  while (1)
  {
    if (v20)
    {
      v48 = (v20 - 1) & v20;
      v23 = __clz(__rbit64(v20)) | (v22 << 6);
      v24 = v22;
      v25 = v45;
      goto LABEL_28;
    }
    v26 = v22 + 1;
    v25 = v45;
    if (__OFADD__(v22, 1))
    {
      __break(1u);
      goto LABEL_41;
    }
    if (v26 >= v42)
      goto LABEL_39;
    v27 = *(_QWORD *)(v41 + 8 * v26);
    v24 = v22 + 1;
    if (!v27)
    {
      v24 = v22 + 2;
      if (v22 + 2 >= v42)
        goto LABEL_39;
      v27 = *(_QWORD *)(v41 + 8 * v24);
      if (!v27)
        break;
    }
LABEL_27:
    v48 = (v27 - 1) & v27;
    v23 = __clz(__rbit64(v27)) + (v24 << 6);
LABEL_28:
    v29 = *(_QWORD *)(v5 + 72);
    v30 = *(void (**)(char *, unint64_t, uint64_t, __n128))(v5 + 16);
    v30(v25, *(_QWORD *)(v46 + 48) + v29 * v23, v4, v21);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v25, 0, 1, v4);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v25, 1, v4) == 1)
    {
      swift_bridgeObjectRelease();
LABEL_37:
      sub_10007CC38(v46);
      return;
    }
    v47 = v24;
    v43 = v20;
    v44 = v22;
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v50, v25, v4);
    if (*(_QWORD *)(v16 + 16))
    {
      v31 = *(_QWORD *)(v16 + 40);
      v32 = sub_100006204(&qword_1010F98B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v33 = dispatch thunk of Hashable._rawHashValue(seed:)(v31, v4, v32);
      v34 = -1 << *(_BYTE *)(v16 + 32);
      v35 = v33 & ~v34;
      if (((*(_QWORD *)(v49 + ((v35 >> 3) & 0xFFFFFFFFFFFFF8)) >> v35) & 1) != 0)
      {
        v36 = ~v34;
        while (1)
        {
          ((void (*)(char *, unint64_t, uint64_t))v30)(v8, *(_QWORD *)(v16 + 48) + v35 * v29, v4);
          v37 = sub_100006204(&qword_1010EE520, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
          v38 = dispatch thunk of static Equatable.== infix(_:_:)(v8, v50, v4, v37);
          v39 = *(void (**)(char *, uint64_t))(v5 + 8);
          v39(v8, v4);
          if ((v38 & 1) != 0)
            break;
          v35 = (v35 + 1) & v36;
          if (((*(_QWORD *)(v49 + ((v35 >> 3) & 0xFFFFFFFFFFFFF8)) >> v35) & 1) == 0)
            goto LABEL_13;
        }
        swift_bridgeObjectRelease();
        v39(v50, v4);
        goto LABEL_37;
      }
    }
LABEL_13:
    (*(void (**)(char *, uint64_t))(v5 + 8))(v50, v4);
    v22 = v47;
    v20 = v48;
  }
  v28 = v22 + 3;
  if (v22 + 3 >= v42)
  {
LABEL_39:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v5 + 56))(v45, 1, 1, v4, v21);
    swift_bridgeObjectRelease();
    goto LABEL_37;
  }
  v27 = *(_QWORD *)(v41 + 8 * v28);
  if (v27)
  {
    v24 = v22 + 3;
    goto LABEL_27;
  }
  while (1)
  {
    v24 = v28 + 1;
    if (__OFADD__(v28, 1))
      break;
    if (v24 >= v42)
      goto LABEL_39;
    v27 = *(_QWORD *)(v41 + 8 * v24);
    ++v28;
    if (v27)
      goto LABEL_27;
  }
LABEL_41:
  __break(1u);
}

void sub_1001EEDC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  os_log_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v29 = a2;
  v5 = type metadata accessor for UUID(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for OwnerSharingCircle(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1010E9938 != -1)
    swift_once(&qword_1010E9938, sub_1000AFBB0);
  v12 = type metadata accessor for Logger(0);
  sub_10001A9E8(v12, (uint64_t)qword_1011B6748);
  sub_1001EFC30(a1, (uint64_t)v11);
  v13 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a3, v5);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.default.getter(v14);
  v16 = v15;
  if (os_log_type_enabled(v14, v15))
  {
    v17 = swift_slowAlloc(52, -1);
    v28 = swift_slowAlloc(64, -1);
    v32 = v28;
    *(_DWORD *)v17 = 134350083;
    v18 = v29;
    v29 = v6;
    v30 = v18;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31, v17 + 4, v17 + 12);
    *(_WORD *)(v17 + 12) = 2160;
    v30 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31, v17 + 14, v17 + 22);
    *(_WORD *)(v17 + 22) = 2081;
    v27 = v16;
    v26 = v14;
    v19 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v20 = dispatch thunk of CustomStringConvertible.description.getter(v5, v19);
    v30 = sub_100016940(v20, v21, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31, v17 + 24, v17 + 32);
    swift_bridgeObjectRelease();
    sub_1001EFC74((uint64_t)v11);
    *(_WORD *)(v17 + 32) = 2160;
    v30 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31, v17 + 34, v17 + 42);
    *(_WORD *)(v17 + 42) = 2081;
    v22 = dispatch thunk of CustomStringConvertible.description.getter(v5, v19);
    v30 = sub_100016940(v22, v23, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31, v17 + 44, v17 + 52);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v29 + 8))(v8, v5);
    v14 = v26;
    _os_log_impl((void *)&_mh_execute_header, v26, (os_log_type_t)v27, "Deleting circle of type: %{public}ld\ncircle: %{private,mask.hash}s,\nfor beacon:%{private,mask.hash}s.", (uint8_t *)v17, 0x34u);
    v24 = v28;
    swift_arrayDestroy(v28, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v24, -1, -1);
    swift_slowDealloc(v17, -1, -1);
  }
  else
  {
    sub_1001EFC74((uint64_t)v11);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }

}

uint64_t sub_1001EF114(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v31;
  int v32;
  os_log_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v5 = type metadata accessor for OwnerSharingCircle(0);
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v6);
  v11 = (char *)&v31 - v10;
  v12 = *(_QWORD *)(*(_QWORD *)(a1 + *(int *)(v9 + 32)) + 16);
  if (v12)
    v13 = v12 > a2;
  else
    v13 = 0;
  v14 = v13;
  if ((_DWORD)v14 == 1)
  {
    if (qword_1010E9938 != -1)
      swift_once(&qword_1010E9938, sub_1000AFBB0);
    v15 = type metadata accessor for Logger(0);
    sub_10001A9E8(v15, (uint64_t)qword_1011B6748);
    sub_1001EFC30(a1, (uint64_t)v11);
    v16 = sub_1001EFC30(a1, (uint64_t)v8);
    v17 = Logger.logObject.getter(v16);
    v18 = static os_log_type_t.error.getter(v17);
    v19 = v18;
    if (os_log_type_enabled(v17, v18))
    {
      v20 = swift_slowAlloc(62, -1);
      v35 = v2;
      v21 = v20;
      v34 = swift_slowAlloc(64, -1);
      v38 = v34;
      *(_DWORD *)v21 = 134219267;
      v36 = v12;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, &v37, v21 + 4, v21 + 12);
      *(_WORD *)(v21 + 12) = 2048;
      v36 = a2;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, &v37, v21 + 14, v21 + 22);
      *(_WORD *)(v21 + 22) = 2160;
      v36 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, &v37, v21 + 24, v21 + 32);
      *(_WORD *)(v21 + 32) = 2081;
      v31 = v21 + 34;
      v33 = v17;
      v22 = type metadata accessor for UUID(0);
      v23 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v32 = v19;
      v24 = v23;
      v25 = dispatch thunk of CustomStringConvertible.description.getter(v22, v23);
      v36 = sub_100016940(v25, v26, &v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, &v37, v31, v21 + 42);
      swift_bridgeObjectRelease();
      sub_1001EFC74((uint64_t)v11);
      *(_WORD *)(v21 + 42) = 2160;
      v36 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, &v37, v21 + 44, v21 + 52);
      *(_WORD *)(v21 + 52) = 2081;
      v27 = dispatch thunk of CustomStringConvertible.description.getter(v22, v24);
      v36 = sub_100016940(v27, v28, &v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, &v37, v21 + 54, v21 + 62);
      swift_bridgeObjectRelease();
      sub_1001EFC74((uint64_t)v8);
      v17 = v33;
      _os_log_impl((void *)&_mh_execute_header, v33, (os_log_type_t)v32, "BeaconSharingService: cannot create new circle. memberCount: %ld > maxCircleMembers: %lu.\nBeaconIdentifier: %{private,mask.hash}s,\nShareId: %{private,mask.hash}s.", (uint8_t *)v21, 0x3Eu);
      v29 = v34;
      swift_arrayDestroy(v34, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v29, -1, -1);
      swift_slowDealloc(v21, -1, -1);
    }
    else
    {
      sub_1001EFC74((uint64_t)v11);
      sub_1001EFC74((uint64_t)v8);
    }

  }
  return v14;
}

uint64_t sub_1001EF47C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v4 = *(int *)(sub_10001A9A8(&qword_1010F2B78) + 48);
  v5 = *(int *)(sub_10001A9A8(&qword_1010F2B70) + 48);
  LOBYTE(v4) = *(_BYTE *)(a1 + v4);
  v6 = type metadata accessor for UUID(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a2, a1, v6);
  *(_BYTE *)(a2 + v5) = v4;
  return result;
}

uint64_t sub_1001EF4EC(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  void (*v22)(char *, char *, uint64_t);
  char v23;
  uint64_t v24;
  char v25;
  _QWORD *v26;
  char v27;
  unint64_t v28;
  uint64_t v29;
  _BOOL8 v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  char v34;
  _QWORD *v35;
  uint64_t v36;
  BOOL v37;
  uint64_t v38;
  _QWORD v39[3];
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v48 = type metadata accessor for UUID(0);
  v40 = *(_QWORD *)(v48 - 8);
  __chkstk_darwin(v48);
  v11 = (char *)v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10001A9A8(&qword_1010F2B68);
  __chkstk_darwin(v12);
  v14 = (char *)v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = -1 << *(_BYTE *)(a1 + 32);
  v16 = ~v15;
  v17 = *(_QWORD *)(a1 + 64);
  v18 = -v15;
  v41 = a1;
  v42 = a1 + 64;
  if (v18 < 64)
    v19 = ~(-1 << v18);
  else
    v19 = -1;
  v43 = v16;
  v44 = 0;
  v45 = v19 & v17;
  v46 = a2;
  v47 = a3;
  v39[2] = a1;
  swift_bridgeObjectRetain(a1);
  v39[1] = a3;
  swift_retain();
  sub_100B280FC((uint64_t)v14);
  v20 = sub_10001A9A8(&qword_1010F2B70);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 48))(v14, 1, v20) == 1)
  {
LABEL_5:
    swift_release();
    swift_bridgeObjectRelease();
    sub_10007CC38(v41);
    return swift_release();
  }
  v22 = *(void (**)(char *, char *, uint64_t))(v40 + 32);
  while (1)
  {
    v24 = *(int *)(v20 + 48);
    v22(v11, v14, v48);
    v25 = v14[v24];
    v26 = *(_QWORD **)a5;
    v28 = sub_100003FB0((uint64_t)v11);
    v29 = v26[2];
    v30 = (v27 & 1) == 0;
    v31 = v29 + v30;
    if (__OFADD__(v29, v30))
      break;
    v32 = v27;
    if (v26[3] >= v31)
    {
      if ((a4 & 1) != 0)
      {
        v35 = *(_QWORD **)a5;
        if ((v27 & 1) != 0)
          goto LABEL_7;
      }
      else
      {
        sub_100A9A608();
        v35 = *(_QWORD **)a5;
        if ((v32 & 1) != 0)
          goto LABEL_7;
      }
    }
    else
    {
      sub_100A862AC(v31, a4 & 1);
      v33 = sub_100003FB0((uint64_t)v11);
      if ((v32 & 1) != (v34 & 1))
        goto LABEL_22;
      v28 = v33;
      v35 = *(_QWORD **)a5;
      if ((v32 & 1) != 0)
      {
LABEL_7:
        v23 = *(_BYTE *)(v35[7] + v28);
        (*(void (**)(char *, uint64_t))(v40 + 8))(v11, v48);
        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)a5 + 56) + v28) = v23;
        goto LABEL_8;
      }
    }
    v35[(v28 >> 6) + 8] |= 1 << v28;
    v22((char *)(v35[6] + *(_QWORD *)(v40 + 72) * v28), v11, v48);
    *(_BYTE *)(v35[7] + v28) = v25;
    v36 = v35[2];
    v37 = __OFADD__(v36, 1);
    v38 = v36 + 1;
    if (v37)
      goto LABEL_21;
    v35[2] = v38;
LABEL_8:
    sub_100B280FC((uint64_t)v14);
    v20 = sub_10001A9A8(&qword_1010F2B70);
    a4 = 1;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 48))(v14, 1, v20) == 1)
      goto LABEL_5;
  }
  __break(1u);
LABEL_21:
  __break(1u);
LABEL_22:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v48);
  __break(1u);
  return result;
}

uint64_t sub_1001EF7F4(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  char v23;
  void (*v24)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v25;
  _QWORD *v26;
  char v27;
  unint64_t v28;
  uint64_t v29;
  _BOOL8 v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  char v34;
  _QWORD *v35;
  uint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  _QWORD *v42;
  char v43;
  unint64_t v44;
  uint64_t v45;
  _BOOL8 v46;
  uint64_t v47;
  char v48;
  unint64_t v49;
  char v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  _BYTE v54[12];
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;

  v10 = type metadata accessor for UUID(0);
  v65 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v12 = &v54[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = sub_10001A9A8(&qword_1010F2B68);
  __chkstk_darwin(v13);
  v15 = &v54[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v16 = -1 << *(_BYTE *)(a1 + 32);
  v17 = ~v16;
  v18 = *(_QWORD *)(a1 + 64);
  v19 = -v16;
  v58 = a1;
  v59 = a1 + 64;
  if (v19 < 64)
    v20 = ~(-1 << v19);
  else
    v20 = -1;
  v60 = v17;
  v61 = 0;
  v62 = v20 & v18;
  v63 = a2;
  v64 = a3;
  v57 = a1;
  swift_bridgeObjectRetain(a1);
  v56 = a3;
  swift_retain();
  sub_100B280FC((uint64_t)v15);
  v21 = sub_10001A9A8(&qword_1010F2B70);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 48))(v15, 1, v21) == 1)
  {
LABEL_5:
    swift_release();
    swift_bridgeObjectRelease();
    sub_10007CC38(v58);
    return swift_release();
  }
  v23 = a4;
  v24 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v65 + 32);
  v25 = *(int *)(v21 + 48);
  v24(v12, v15, v10);
  v55 = v15[v25];
  v26 = *(_QWORD **)a5;
  v28 = sub_100003FB0((uint64_t)v12);
  v29 = v26[2];
  v30 = (v27 & 1) == 0;
  v31 = v29 + v30;
  if (__OFADD__(v29, v30))
  {
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  v32 = v27;
  if (v26[3] >= v31)
  {
    if ((v23 & 1) != 0)
    {
      if ((v27 & 1) == 0)
        goto LABEL_15;
    }
    else
    {
      sub_100A9A608();
      if ((v32 & 1) == 0)
        goto LABEL_15;
    }
    goto LABEL_13;
  }
  sub_100A862AC(v31, v23 & 1);
  v33 = sub_100003FB0((uint64_t)v12);
  if ((v32 & 1) == (v34 & 1))
  {
    v28 = v33;
    if ((v32 & 1) == 0)
    {
LABEL_15:
      v35 = *(_QWORD **)a5;
      *(_QWORD *)(*(_QWORD *)a5 + 8 * (v28 >> 6) + 64) |= 1 << v28;
      v24((_BYTE *)(v35[6] + *(_QWORD *)(v65 + 72) * v28), v12, v10);
      *(_BYTE *)(v35[7] + v28) = v55;
      v36 = v35[2];
      v37 = __OFADD__(v36, 1);
      v38 = v36 + 1;
      if (!v37)
      {
        v35[2] = v38;
LABEL_18:
        while (1)
        {
          sub_100B280FC((uint64_t)v15);
          v39 = sub_10001A9A8(&qword_1010F2B70);
          if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 48))(v15, 1, v39) == 1)
            goto LABEL_5;
          v40 = *(int *)(v39 + 48);
          v24(v12, v15, v10);
          v41 = v15[v40];
          v42 = *(_QWORD **)a5;
          v44 = sub_100003FB0((uint64_t)v12);
          v45 = v42[2];
          v46 = (v43 & 1) == 0;
          v47 = v45 + v46;
          if (__OFADD__(v45, v46))
            goto LABEL_26;
          v48 = v43;
          if (v42[3] < v47)
          {
            sub_100A862AC(v47, 1);
            v49 = sub_100003FB0((uint64_t)v12);
            if ((v48 & 1) != (v50 & 1))
              goto LABEL_28;
            v44 = v49;
          }
          if ((v48 & 1) != 0)
          {
            (*(void (**)(_BYTE *, uint64_t))(v65 + 8))(v12, v10);
            *(_BYTE *)(*(_QWORD *)(*(_QWORD *)a5 + 56) + v44) = v41;
          }
          else
          {
            v51 = *(_QWORD **)a5;
            *(_QWORD *)(*(_QWORD *)a5 + 8 * (v44 >> 6) + 64) |= 1 << v44;
            v24((_BYTE *)(v51[6] + *(_QWORD *)(v65 + 72) * v44), v12, v10);
            *(_BYTE *)(v51[7] + v44) = v41;
            v52 = v51[2];
            v37 = __OFADD__(v52, 1);
            v53 = v52 + 1;
            if (v37)
              goto LABEL_27;
            v51[2] = v53;
          }
        }
      }
      goto LABEL_27;
    }
LABEL_13:
    (*(void (**)(_BYTE *, uint64_t))(v65 + 8))(v12, v10);
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)a5 + 56) + v28) = v55;
    goto LABEL_18;
  }
LABEL_28:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v10);
  __break(1u);
  return result;
}

uint64_t sub_1001EFBE8(unint64_t a1, unint64_t a2, int a3, uint64_t a4, NSObject *a5, NSObject *a6, int a7)
{
  return sub_1001F0228(a1, a2, a3, a4, a5, a6, a7, (uint64_t (*)(char *))sub_1001EFC18, (uint64_t)sub_100003D88);
}

uint64_t sub_1001EFC18(uint64_t a1)
{
  return sub_1001F1B98(a1) & 1;
}

uint64_t sub_1001EFC30(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for OwnerSharingCircle(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001EFC74(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for OwnerSharingCircle(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1001EFCB0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for OwnerSharingCircle(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for BeaconSharingCircleTransformer.Error(uint64_t a1)
{
  uint64_t result;

  result = qword_1010F2C00;
  if (!qword_1010F2C00)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for BeaconSharingCircleTransformer.Error);
  return result;
}

uint64_t sub_1001EFD30(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  char *v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t);
  BOOL v21;
  unint64_t i;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  void (*v29)(char *, unint64_t, uint64_t);
  char v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  void (*v34)(uint64_t, uint64_t);
  uint64_t v35;
  unint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  int64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  int64_t v45;
  uint64_t v46;

  v35 = a2;
  v36 = a1;
  v42 = sub_10001A9A8(&qword_1010F2B78);
  v6 = __chkstk_darwin(v42);
  v41 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v46 = (uint64_t)&v35 - v8;
  v9 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v9 - 8);
  result = __chkstk_darwin(v9);
  v13 = (char *)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = 0;
  v43 = (_QWORD *)a3;
  v15 = *(_QWORD *)(a3 + 64);
  v37 = 0;
  v38 = a3 + 64;
  v16 = 1 << *(_BYTE *)(a3 + 32);
  v17 = -1;
  if (v16 < 64)
    v17 = ~(-1 << v16);
  v18 = v17 & v15;
  v39 = (unint64_t)(v16 + 63) >> 6;
  v40 = v13;
  v19 = v46;
  if (v18)
    goto LABEL_7;
LABEL_8:
  v23 = v14 + 1;
  if (!__OFADD__(v14, 1))
  {
    if (v23 < v39)
    {
      v24 = *(_QWORD *)(v38 + 8 * v23);
      v25 = v14 + 1;
      if (v24)
        goto LABEL_21;
      v25 = v14 + 2;
      if (v14 + 2 >= v39)
        return sub_10041C2BC(v36, v35, v37, v43);
      v24 = *(_QWORD *)(v38 + 8 * v25);
      if (v24)
        goto LABEL_21;
      v25 = v14 + 3;
      if (v14 + 3 >= v39)
        return sub_10041C2BC(v36, v35, v37, v43);
      v24 = *(_QWORD *)(v38 + 8 * v25);
      if (v24)
      {
LABEL_21:
        v44 = (v24 - 1) & v24;
        v45 = v25;
        for (i = __clz(__rbit64(v24)) + (v25 << 6); ; i = __clz(__rbit64(v18)) | (v14 << 6))
        {
          v27 = v43;
          v28 = v10;
          v29 = *(void (**)(char *, unint64_t, uint64_t))(v10 + 16);
          v29(v13, v43[6] + *(_QWORD *)(v10 + 72) * i, v9);
          v30 = *(_BYTE *)(v27[7] + i);
          v29((char *)v19, (unint64_t)v13, v9);
          v31 = (uint64_t)v41;
          v32 = *(int *)(v42 + 48);
          *(_BYTE *)(v19 + v32) = v30;
          v29((char *)v31, v19, v9);
          *(_BYTE *)(v31 + v32) = v30;
          if (*(_QWORD *)(a4 + 16) && (sub_100003FB0(v31), (v33 & 1) != 0))
          {
            sub_100004048(v46, &qword_1010F2B78);
            v10 = v28;
            v34 = *(void (**)(uint64_t, uint64_t))(v28 + 8);
            v34(v31, v9);
            v13 = v40;
            result = ((uint64_t (*)(char *, uint64_t))v34)(v40, v9);
            v18 = v44;
            v14 = v45;
            if (!v44)
              goto LABEL_8;
          }
          else
          {
            sub_100004048(v46, &qword_1010F2B78);
            v10 = v28;
            v20 = *(void (**)(uint64_t, uint64_t))(v28 + 8);
            v20(v31, v9);
            v13 = v40;
            result = ((uint64_t (*)(char *, uint64_t))v20)(v40, v9);
            *(unint64_t *)((char *)v36 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
            v21 = __OFADD__(v37++, 1);
            v18 = v44;
            v14 = v45;
            if (v21)
              goto LABEL_29;
            if (!v44)
              goto LABEL_8;
          }
LABEL_7:
          v44 = (v18 - 1) & v18;
          v45 = v14;
        }
      }
      v26 = v14 + 4;
      if (v14 + 4 < v39)
      {
        v24 = *(_QWORD *)(v38 + 8 * v26);
        if (v24)
        {
          v25 = v14 + 4;
          goto LABEL_21;
        }
        while (1)
        {
          v25 = v26 + 1;
          if (__OFADD__(v26, 1))
            goto LABEL_28;
          if (v25 >= v39)
            return sub_10041C2BC(v36, v35, v37, v43);
          v24 = *(_QWORD *)(v38 + 8 * v25);
          ++v26;
          if (v24)
            goto LABEL_21;
        }
      }
    }
    return sub_10041C2BC(v36, v35, v37, v43);
  }
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
  return result;
}

uint64_t sub_1001F0074(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v5;
  unsigned int v6;
  unint64_t v7;
  size_t v8;
  uint64_t isStackAllocationSafe;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v14;

  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v7 = (unint64_t)((1 << v5) + 63) >> 6;
  v8 = 8 * v7;
  swift_bridgeObjectRetain_n(a2, 2);
  if (v6 <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(v8, 8), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v14 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0), v8);
    swift_bridgeObjectRetain(a2);
    v10 = sub_1001EFD30((unint64_t *)((char *)&v14 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0)), v7, a1, a2);
    v11 = swift_bridgeObjectRelease();
    if (v2)
      swift_willThrow(v11);
    swift_bridgeObjectRelease_n(a2, 2);
  }
  else
  {
    v12 = (void *)swift_slowAlloc(v8, -1);
    bzero(v12, v8);
    swift_bridgeObjectRetain(a2);
    v10 = sub_1001EFD30((unint64_t *)v12, v7, a1, a2);
    swift_bridgeObjectRelease();
    swift_slowDealloc(v12, -1, -1);
    swift_bridgeObjectRelease_n(a2, 2);
  }
  return v10;
}

uint64_t sub_1001F0228(unint64_t a1, unint64_t a2, int a3, uint64_t a4, NSObject *a5, NSObject *a6, int a7, uint64_t (*a8)(char *), uint64_t a9)
{
  unint64_t v9;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t (*v34)(unint64_t, unint64_t, unint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  __n128 v60;
  unint64_t v61;
  unint64_t v62;
  void (*v63)(uint64_t *, unint64_t);
  unint64_t isUniquelyReferenced_nonNull_native;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  int64_t v69;
  unint64_t v70;
  unint64_t v71;
  void (*v72)(char *, unint64_t, unint64_t, __n128);
  void (*v73)(char *, unint64_t, unint64_t);
  char *v74;
  unint64_t v75;
  _BOOL8 v76;
  uint64_t v77;
  unint64_t v78;
  char v79;
  uint64_t v80;
  BOOL v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char v97;
  char *v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  __n128 v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char v107;
  char v108;
  unint64_t v109;
  uint64_t v110;
  _OWORD *v111;
  char *v112;
  unint64_t v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  unint64_t v120;
  uint64_t v121;
  NSObject *v122;
  os_log_type_t v123;
  int v124;
  _BOOL4 v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  unint64_t v131;
  uint64_t v132;
  unint64_t v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  int *v141;
  NSObject *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  void (*v149)(uint64_t, char *, unint64_t);
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  char v153;
  _BOOL8 v154;
  uint64_t v155;
  char v156;
  unint64_t v157;
  char v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  char v164;
  _BOOL8 v165;
  uint64_t v166;
  char v167;
  unint64_t v168;
  char v169;
  uint64_t v170;
  uint64_t v171;
  char *v172;
  uint64_t v173;
  uint64_t v174;
  unint64_t v175;
  uint64_t (*v176)(char *, unint64_t, unint64_t);
  uint64_t v177;
  char *v178;
  uint64_t v179;
  NSObject *v180;
  os_log_type_t v181;
  int v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  unint64_t v187;
  char *v188;
  uint64_t v189;
  unint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  unint64_t v195;
  unint64_t v196;
  int64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  unint64_t v207;
  uint64_t v208;
  _QWORD *v209;
  uint64_t result;
  uint64_t v211;
  char *v212;
  uint64_t v213;
  uint64_t v214;
  char *v215;
  char *v216;
  unint64_t v217;
  unint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t (*v221)(char *);
  char *v222;
  char *v223;
  int v224;
  _OWORD *v225;
  unint64_t v226;
  uint64_t v227;
  char *v228;
  __int128 v229;
  int64_t v230;
  char *v231;
  uint64_t (*v232)(unint64_t, unint64_t, unint64_t);
  char *v233;
  unint64_t v234;
  char *v235;
  NSObject *v236;
  NSObject *v237;
  unint64_t v238;
  char *v239;
  uint64_t v240;
  char *v241;
  uint64_t *v242;
  uint64_t v243;
  _QWORD *v244;
  unint64_t v245;
  char *v246;
  uint64_t v247[7];
  uint64_t v248;
  _BYTE v249[4];
  char *v250;

  v221 = a8;
  v224 = a7;
  v236 = a5;
  v237 = a6;
  v220 = a4;
  LODWORD(v233) = a3;
  v226 = a1;
  v11 = sub_10001A9A8(&qword_1010F2B68);
  __chkstk_darwin(v11);
  v13 = (char *)&v211 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v243 = type metadata accessor for OwnerSharingCircle(0);
  v240 = *(_QWORD *)(v243 - 8);
  v14 = __chkstk_darwin(v243);
  v16 = (char *)&v211 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v14);
  v214 = (uint64_t)&v211 - v18;
  v19 = __chkstk_darwin(v17);
  v216 = (char *)&v211 - v20;
  v21 = __chkstk_darwin(v19);
  v23 = (char *)&v211 - v22;
  v24 = __chkstk_darwin(v21);
  v219 = (uint64_t)&v211 - v25;
  v26 = __chkstk_darwin(v24);
  v218 = (unint64_t)&v211 - v27;
  v28 = __chkstk_darwin(v26);
  v225 = (_OWORD *)((char *)&v211 - v29);
  v30 = __chkstk_darwin(v28);
  v227 = (uint64_t)&v211 - v31;
  v32 = __chkstk_darwin(v30);
  v34 = (uint64_t (*)(unint64_t, unint64_t, unint64_t))((char *)&v211 - v33);
  v35 = __chkstk_darwin(v32);
  v239 = (char *)&v211 - v36;
  v37 = __chkstk_darwin(v35);
  v223 = (char *)&v211 - v38;
  v39 = __chkstk_darwin(v37);
  v234 = (unint64_t)&v211 - v40;
  __chkstk_darwin(v39);
  v228 = (char *)&v211 - v41;
  v42 = type metadata accessor for UUID(0);
  v43 = *(_QWORD *)(v42 - 8);
  v44 = __chkstk_darwin(v42);
  v215 = (char *)&v211 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = __chkstk_darwin(v44);
  v246 = (char *)&v211 - v47;
  v48 = __chkstk_darwin(v46);
  v50 = (unint64_t)&v211 - v49;
  v51 = __chkstk_darwin(v48);
  v242 = (uint64_t *)((char *)&v211 - v52);
  __chkstk_darwin(v51);
  v241 = (char *)&v211 - v53;
  v54 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v54);
  v235 = (char *)&v211 - ((v55 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(_QWORD *)(a2 + 16))
  {
    v82 = type metadata accessor for BeaconSharingCircleTransformer.Error(0);
    v83 = sub_100006204(&qword_1010EC8F0, type metadata accessor for BeaconSharingCircleTransformer.Error, (uint64_t)&unk_100E2DAE0);
    swift_allocError(v82, v83, 0, 0);
    v85 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unint64_t))(v43 + 56))(v84, 1, 1, v42);
    swift_willThrow(v85);
    return (uint64_t)v34;
  }
  v232 = v34;
  v231 = v23;
  v212 = v16;
  v213 = a9;
  v56 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)&v229 = a2 + 56;
  v57 = 1 << *(_BYTE *)(a2 + 32);
  v58 = -1;
  if (v57 < 64)
    v58 = ~(-1 << v57);
  v59 = v58 & v56;
  v230 = (unint64_t)(v57 + 63) >> 6;
  v60 = swift_bridgeObjectRetain(a2);
  v61 = 0;
  v62 = (unint64_t)_swiftEmptyDictionarySingleton;
  v244 = (_QWORD *)v43;
  v245 = v42;
  v217 = v50;
  while (1)
  {
    isUniquelyReferenced_nonNull_native = (unint64_t)v235;
    if (v59)
    {
      v65 = __clz(__rbit64(v59));
      v59 &= v59 - 1;
      v238 = v61;
      v66 = v65 | (v61 << 6);
      goto LABEL_27;
    }
    v67 = v61 + 1;
    if (__OFADD__(v61, 1))
      goto LABEL_141;
    if ((uint64_t)v67 >= v230)
    {
LABEL_39:
      (*(void (**)(char *, uint64_t, uint64_t, unint64_t, __n128))(v43 + 56))(v235, 1, 1, v42, v60);
LABEL_40:
      v86 = swift_release();
      isUniquelyReferenced_nonNull_native = (unint64_t)&v211;
      __chkstk_darwin(v86);
      *(&v211 - 2) = v226;
      v87 = v220;
      swift_bridgeObjectRetain(v220);
      v88 = v222;
      v50 = sub_10008B4C0(v221, (unint64_t *)&v211 - 4, v87);
      v241 = v88;
      v247[0] = (uint64_t)_swiftEmptyArrayStorage;
      v9 = (unint64_t)v223;
      v242 = *(uint64_t **)(v50 + 16);
      if (v242)
      {
        v238 = v62;
        v62 = 0;
        v42 = (unint64_t)_swiftEmptyArrayStorage;
        isUniquelyReferenced_nonNull_native = (unint64_t)v228;
        while (1)
        {
          v67 = *(_QWORD *)(v50 + 16);
          if (v62 >= v67)
            break;
          v43 = (*(unsigned __int8 *)(v240 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v240 + 80);
          v89 = *(_QWORD *)(v240 + 72);
          sub_1001EFC30(v50 + v43 + v89 * v62, isUniquelyReferenced_nonNull_native);
          if (*(unsigned __int8 *)(isUniquelyReferenced_nonNull_native + *(int *)(v243 + 28)) == v237)
          {
            sub_1001EFCB0(isUniquelyReferenced_nonNull_native, v234);
            if ((swift_isUniquelyReferenced_nonNull_native(v42) & 1) == 0)
              sub_10009A520(0, *(_QWORD *)(v42 + 16) + 1, 1);
            v42 = v247[0];
            v91 = *(_QWORD *)(v247[0] + 16);
            v90 = *(_QWORD *)(v247[0] + 24);
            if (v91 >= v90 >> 1)
            {
              sub_10009A520(v90 > 1, v91 + 1, 1);
              v42 = v247[0];
            }
            *(_QWORD *)(v42 + 16) = v91 + 1;
            sub_1001EFCB0(v234, v42 + v43 + v91 * v89);
            isUniquelyReferenced_nonNull_native = (unint64_t)v228;
          }
          else
          {
            sub_1001EFC74(isUniquelyReferenced_nonNull_native);
          }
          if (v242 == (uint64_t *)++v62)
          {
            v92 = (char *)v247[0];
            v62 = v238;
            goto LABEL_53;
          }
        }
LABEL_137:
        __break(1u);
LABEL_138:
        __break(1u);
LABEL_139:
        __break(1u);
LABEL_140:
        __break(1u);
LABEL_141:
        __break(1u);
LABEL_142:
        v9 = sub_1007C80BC(v67 > 1, isUniquelyReferenced_nonNull_native, 1, v9);
LABEL_74:
        v114 = v217;
        *(_QWORD *)(v9 + 16) = isUniquelyReferenced_nonNull_native;
        v234 = (*(unsigned __int8 *)(v240 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v240 + 80);
        v115 = *(_QWORD *)(v240 + 72);
        sub_1001EFCB0(v50, v9 + v234 + v115 * v42);
        if (qword_1010E9938 != -1)
          swift_once(&qword_1010E9938, sub_1000AFBB0);
        v230 = v9;
        v116 = type metadata accessor for Logger(0);
        v117 = sub_10001A9E8(v116, (uint64_t)qword_1011B6748);
        v118 = v219;
        sub_1001EFC30((uint64_t)v225, v219);
        v119 = v62;
        v120 = v245;
        v121 = v232(v114, v119, v245);
        v228 = (char *)v117;
        v122 = Logger.logObject.getter(v121);
        v123 = static os_log_type_t.default.getter(v122);
        v124 = v123;
        v125 = os_log_type_enabled(v122, v123);
        v240 = v115;
        if (v125)
        {
          v126 = swift_slowAlloc(52, -1);
          v239 = (char *)swift_slowAlloc(64, -1);
          v247[0] = (uint64_t)v239;
          *(_DWORD *)v126 = 134350083;
          v248 = v237;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v248, v249, v126 + 4, v126 + 12);
          *(_WORD *)(v126 + 12) = 2160;
          v248 = 1752392040;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v248, v249, v126 + 14, v126 + 22);
          *(_WORD *)(v126 + 22) = 2081;
          LODWORD(v227) = v124;
          v127 = v120;
          v128 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
          v129 = dispatch thunk of CustomStringConvertible.description.getter(v127, v128);
          v248 = sub_100016940(v129, v130, v247);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v248, v249, v126 + 24, v126 + 32);
          swift_bridgeObjectRelease();
          sub_1001EFC74(v118);
          *(_WORD *)(v126 + 32) = 2160;
          v248 = 1752392040;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v248, v249, v126 + 34, v126 + 42);
          *(_WORD *)(v126 + 42) = 2081;
          v131 = v217;
          v132 = dispatch thunk of CustomStringConvertible.description.getter(v127, v128);
          v248 = sub_100016940(v132, v133, v247);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v248, v249, v126 + 44, v126 + 52);
          swift_bridgeObjectRelease();
          v134 = v127;
          v115 = v240;
          v242 = (uint64_t *)v244[1];
          ((void (*)(unint64_t, unint64_t))v242)(v131, v134);
          _os_log_impl((void *)&_mh_execute_header, v122, (os_log_type_t)v227, "Create a new type: %{public}ld\ncircle: %{private,mask.hash}s,\nfor beacon:%{private,mask.hash}s.", (uint8_t *)v126, 0x34u);
          v135 = (uint64_t)v239;
          swift_arrayDestroy(v239, 2, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v135, -1, -1);
          swift_slowDealloc(v126, -1, -1);
        }
        else
        {
          sub_1001EFC74(v118);
          v242 = *(uint64_t **)(v43 + 8);
          ((void (*)(unint64_t, unint64_t))v242)(v114, v120);
        }

        v136 = (uint64_t)v231;
        v137 = v241;
        v250 = v235;
        v138 = *((_QWORD *)v235 + 2);
        v139 = v226;
        if (v138)
        {
          v140 = (uint64_t)&v235[v234];
          swift_retain();
          v122 = v237;
          do
          {
            sub_1001EEDC0(v140, (uint64_t)v122, v139);
            v140 += v115;
            --v138;
          }
          while (v138);
          swift_release();
        }
        v62 = v245;
        v141 = (int *)v243;
        v237 = *((_QWORD *)v233 + 2);
        if (!v237)
        {
          swift_release();
          swift_bridgeObjectRelease();
          v193 = v213;
          v34 = (uint64_t (*)(unint64_t, unint64_t, unint64_t))v230;
          goto LABEL_123;
        }
        v241 = v137;
        v239 = &v233[v234];
        swift_retain();
        v142 = 0;
        v9 = (unint64_t)_swiftEmptyDictionarySingleton;
        do
        {
          sub_1001EFC30((uint64_t)&v239[(_QWORD)v142 * v240], v136);
          v43 = *(_QWORD *)(v136 + v141[8]);
          swift_bridgeObjectRetain(v43);
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v9);
          v143 = -1 << *(_BYTE *)(v43 + 32);
          v144 = ~v143;
          v145 = *(_QWORD *)(v43 + 64);
          v146 = -v143;
          if (v146 < 64)
            v147 = ~(-1 << v146);
          else
            v147 = -1;
          v247[0] = v43;
          v247[1] = v43 + 64;
          v247[2] = v144;
          v247[3] = 0;
          v247[4] = v147 & v145;
          v247[5] = (uint64_t)sub_1001EF47C;
          v247[6] = 0;
          v248 = v9;
          swift_bridgeObjectRetain(v43);
          sub_100B280FC((uint64_t)v13);
          v148 = sub_10001A9A8(&qword_1010F2B70);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v148 - 8) + 48))(v13, 1, v148) != 1)
          {
            v149 = (void (*)(uint64_t, char *, unint64_t))v244[4];
            v150 = *(int *)(v148 + 48);
            v151 = (uint64_t)v246;
            v149((uint64_t)v246, v13, v62);
            LODWORD(v235) = v13[v150];
            v152 = v151;
            v42 = v9;
            v50 = sub_100003FB0(v152);
            v67 = *(_QWORD *)(v9 + 16);
            v154 = (v153 & 1) == 0;
            v155 = v67 + v154;
            if (__OFADD__(v67, v154))
            {
LABEL_135:
              __break(1u);
LABEL_136:
              __break(1u);
              goto LABEL_137;
            }
            v156 = v153;
            if (*(_QWORD *)(v9 + 24) >= v155)
            {
              if ((isUniquelyReferenced_nonNull_native & 1) != 0)
              {
                if ((v153 & 1) == 0)
                  goto LABEL_94;
              }
              else
              {
                v42 = (unint64_t)&v248;
                sub_100A9A608();
                if ((v156 & 1) == 0)
                  goto LABEL_94;
              }
            }
            else
            {
              sub_100A862AC(v155, isUniquelyReferenced_nonNull_native);
              v42 = v248;
              v157 = sub_100003FB0((uint64_t)v246);
              if ((v156 & 1) != (v158 & 1))
                goto LABEL_146;
              v50 = v157;
              if ((v156 & 1) == 0)
              {
LABEL_94:
                v9 = v248;
                *(_QWORD *)(v248 + 8 * (v50 >> 6) + 64) |= 1 << v50;
                v62 = v245;
                v149(*(_QWORD *)(v9 + 48) + v244[9] * v50, v246, v245);
                *(_BYTE *)(*(_QWORD *)(v9 + 56) + v50) = (_BYTE)v235;
                v159 = *(_QWORD *)(v9 + 16);
                v81 = __OFADD__(v159, 1);
                v67 = v159 + 1;
                if (!v81)
                {
                  *(_QWORD *)(v9 + 16) = v67;
                  goto LABEL_100;
                }
                goto LABEL_136;
              }
            }
            v62 = v245;
            ((void (*)(char *, unint64_t))v242)(v246, v245);
            v9 = v248;
            *(_BYTE *)(*(_QWORD *)(v248 + 56) + v50) = (_BYTE)v235;
LABEL_100:
            while (1)
            {
              sub_100B280FC((uint64_t)v13);
              v160 = sub_10001A9A8(&qword_1010F2B70);
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v160 - 8) + 48))(v13, 1, v160) == 1)break;
              v161 = *(int *)(v160 + 48);
              v162 = (uint64_t)v246;
              v149((uint64_t)v246, v13, v62);
              v50 = v13[v161];
              v163 = v162;
              v42 = v9;
              isUniquelyReferenced_nonNull_native = sub_100003FB0(v163);
              v67 = *(_QWORD *)(v9 + 16);
              v165 = (v164 & 1) == 0;
              v166 = v67 + v165;
              if (__OFADD__(v67, v165))
                goto LABEL_135;
              v167 = v164;
              if (*(_QWORD *)(v9 + 24) < v166)
              {
                sub_100A862AC(v166, 1);
                v42 = v248;
                v168 = sub_100003FB0((uint64_t)v246);
                if ((v167 & 1) != (v169 & 1))
                  goto LABEL_146;
                isUniquelyReferenced_nonNull_native = v168;
              }
              if ((v167 & 1) != 0)
              {
                v62 = v245;
                ((void (*)(char *, unint64_t))v242)(v246, v245);
                v9 = v248;
                *(_BYTE *)(*(_QWORD *)(v248 + 56) + isUniquelyReferenced_nonNull_native) = v50;
              }
              else
              {
                v9 = v248;
                *(_QWORD *)(v248 + 8 * (isUniquelyReferenced_nonNull_native >> 6) + 64) |= 1 << isUniquelyReferenced_nonNull_native;
                v62 = v245;
                v149(*(_QWORD *)(v9 + 48) + v244[9] * isUniquelyReferenced_nonNull_native, v246, v245);
                *(_BYTE *)(*(_QWORD *)(v9 + 56) + isUniquelyReferenced_nonNull_native) = v50;
                v170 = *(_QWORD *)(v9 + 16);
                v81 = __OFADD__(v170, 1);
                v67 = v170 + 1;
                if (v81)
                  goto LABEL_136;
                *(_QWORD *)(v9 + 16) = v67;
              }
            }
          }
          v142 = ((char *)v142 + 1);
          swift_bridgeObjectRelease();
          sub_10007CC38(v247[0]);
          swift_release();
          swift_bridgeObjectRelease();
          v136 = (uint64_t)v231;
          sub_1001EFC74((uint64_t)v231);
          v141 = (int *)v243;
        }
        while (v142 != v237);
        v13 = v233;
        swift_release();
        v171 = v238;
        swift_bridgeObjectRetain(v238);
        v172 = v241;
        v173 = sub_1001F0074(v9, v171);
        v137 = v172;
        swift_bridgeObjectRelease();
        v174 = swift_bridgeObjectRelease_n(v171, 2);
        if (!*(_QWORD *)(v173 + 16))
        {
          swift_release();
          v122 = v236;
          v193 = v213;
          v34 = (uint64_t (*)(unint64_t, unint64_t, unint64_t))v230;
          goto LABEL_118;
        }
        v115 = (uint64_t)v216;
        UUID.init()(v174);
        v175 = v226;
        v176 = (uint64_t (*)(char *, unint64_t, unint64_t))v232;
        v232(v115 + v141[6], v226, v62);
        *(_OWORD *)v115 = v229;
        v122 = v236;
        *(_BYTE *)(v115 + v141[7]) = (_BYTE)v236;
        *(_QWORD *)(v115 + v141[8]) = v173;
        *(_BYTE *)(v115 + v141[9]) = v224;
        v177 = v214;
        sub_1001EFC30(v115, v214);
        v178 = v215;
        v179 = v176(v215, v175, v62);
        v180 = Logger.logObject.getter(v179);
        v181 = static os_log_type_t.default.getter(v180);
        v182 = v181;
        if (os_log_type_enabled(v180, v181))
        {
          v183 = swift_slowAlloc(52, -1);
          v246 = (char *)swift_slowAlloc(64, -1);
          v247[0] = (uint64_t)v246;
          *(_DWORD *)v183 = 134350083;
          v248 = v236;
          v241 = v172;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v248, v249, v183 + 4, v183 + 12);
          *(_WORD *)(v183 + 12) = 2160;
          v248 = 1752392040;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v248, v249, v183 + 14, v183 + 22);
          *(_WORD *)(v183 + 22) = 2081;
          LODWORD(v245) = v182;
          v184 = v177;
          v185 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
          v186 = dispatch thunk of CustomStringConvertible.description.getter(v62, v185);
          v248 = sub_100016940(v186, v187, v247);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v248, v249, v183 + 24, v183 + 32);
          swift_bridgeObjectRelease();
          sub_1001EFC74(v184);
          *(_WORD *)(v183 + 32) = 2160;
          v248 = 1752392040;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v248, v249, v183 + 34, v183 + 42);
          *(_WORD *)(v183 + 42) = 2081;
          v188 = v215;
          v115 = (uint64_t)v216;
          v189 = dispatch thunk of CustomStringConvertible.description.getter(v62, v185);
          v248 = sub_100016940(v189, v190, v247);
          v137 = v241;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v248, v249, v183 + 44, v183 + 52);
          swift_bridgeObjectRelease();
          ((void (*)(char *, unint64_t))v242)(v188, v62);
          _os_log_impl((void *)&_mh_execute_header, v180, (os_log_type_t)v245, "Create a new type: %{public}ld\ncircle: %{private,mask.hash}s,\nfor beacon:%{private,mask.hash}s.", (uint8_t *)v183, 0x34u);
          v191 = (uint64_t)v246;
          swift_arrayDestroy(v246, 2, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v191, -1, -1);
          v192 = v183;
          v122 = v236;
          swift_slowDealloc(v192, -1, -1);
        }
        else
        {
          sub_1001EFC74(v177);
          ((void (*)(char *, unint64_t))v242)(v178, v62);
        }

        v194 = (uint64_t)v212;
        v193 = v213;
        sub_1001EFC30(v115, (uint64_t)v212);
        v34 = (uint64_t (*)(unint64_t, unint64_t, unint64_t))v230;
        v196 = *(_QWORD *)(v230 + 16);
        v195 = *(_QWORD *)(v230 + 24);
        v197 = v196 + 1;
        v13 = v233;
        if (v196 >= v195 >> 1)
          goto LABEL_144;
        while (1)
        {
          *((_QWORD *)v34 + 2) = v197;
          sub_1001EFCB0(v194, (uint64_t)v34 + v234 + v196 * v240);
          sub_1001EFC74(v115);
LABEL_118:
          v198 = swift_retain();
          sub_100302464(v198);
          v199 = *((_QWORD *)v13 + 2);
          v200 = (uint64_t)v239;
          v115 = v240;
          if (v199)
          {
            swift_retain();
            v201 = v226;
            do
            {
              sub_1001EEDC0(v200, (uint64_t)v122, v201);
              v200 += v115;
              --v199;
            }
            while (v199);
            swift_release_n(v13, 2);
          }
          else
          {
            swift_release();
          }
LABEL_123:
          v202 = qword_1010E9D08;
          swift_bridgeObjectRetain(v34);
          if (v202 != -1)
            swift_once(&qword_1010E9D08, sub_10059A6E0);
          OS_dispatch_queue.sync<A>(execute:)(v193, qword_1011B71A8, &type metadata for Configuration);
          v197 = (int64_t)v137;
          v194 = sub_10001ED80(v247[0]);
          swift_bridgeObjectRelease();
          v196 = v194 - 1;
          if (v194)
            break;
          __break(1u);
LABEL_144:
          v34 = (uint64_t (*)(unint64_t, unint64_t, unint64_t))sub_1007C80BC(v195 > 1, v197, 1, (unint64_t)v34);
        }
        v203 = *((_QWORD *)v34 + 2);
        if (v203)
        {
          v204 = (uint64_t)v34 + v234;
          swift_bridgeObjectRetain(v34);
          while ((sub_1001EF114(v204, v196) & 1) == 0)
          {
            v204 += v115;
            if (!--v203)
            {
              swift_bridgeObjectRelease_n(v34, 2);
              goto LABEL_132;
            }
          }
          swift_bridgeObjectRelease_n(v34, 2);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          type metadata accessor for SPBeaconSharingError(0);
          v206 = v205;
          v248 = 6;
          v207 = sub_10001D6AC((uint64_t)_swiftEmptyArrayStorage);
          v208 = sub_100006204((unint64_t *)&qword_1010EB490, (uint64_t (*)(uint64_t))type metadata accessor for SPBeaconSharingError, (uint64_t)&unk_100E21930);
          v209 = _BridgedStoredNSError.init(_:userInfo:)(v247, &v248, v207, v206, v208);
          swift_willThrow(v209);
          sub_1001EFC74((uint64_t)v225);
        }
        else
        {
          swift_bridgeObjectRelease();
LABEL_132:
          sub_1001EFC74((uint64_t)v225);
        }
        return (uint64_t)v34;
      }
      v92 = (char *)_swiftEmptyArrayStorage;
LABEL_53:
      v93 = *((_QWORD *)v92 + 2);
      v235 = v92;
      if (v93)
      {
        isUniquelyReferenced_nonNull_native = (unint64_t)&v92[(*(unsigned __int8 *)(v240 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v240 + 80)];
        v94 = *(_QWORD *)(v240 + 72);
        swift_retain();
        do
        {
          sub_1001EFC30(isUniquelyReferenced_nonNull_native, v9);
          v95 = v62;
          v96 = *(_QWORD *)(v9 + *(int *)(v243 + 32));
          swift_bridgeObjectRetain(v96);
          v97 = swift_isUniquelyReferenced_nonNull_native(v95);
          v247[0] = v95;
          v98 = v241;
          sub_1001EF4EC(v96, (uint64_t)sub_1001EF47C, 0, v97, (uint64_t)v247);
          v241 = v98;
          if (v98)
            goto LABEL_147;
          v62 = v247[0];
          swift_bridgeObjectRelease();
          sub_1001EFC74(v9);
          isUniquelyReferenced_nonNull_native += v94;
          --v93;
        }
        while (v93);
        swift_release();
      }
      v247[0] = (uint64_t)_swiftEmptyArrayStorage;
      v42 = v243;
      v238 = v62;
      if (!v242)
      {
        v233 = (char *)_swiftEmptyArrayStorage;
LABEL_73:
        v110 = swift_bridgeObjectRelease();
        v250 = (char *)_swiftEmptyArrayStorage;
        v111 = v225;
        UUID.init()(v110);
        v112 = (char *)v111 + *(int *)(v42 + 24);
        v43 = (unint64_t)v244;
        v62 = v226;
        v232 = (uint64_t (*)(unint64_t, unint64_t, unint64_t))v244[2];
        v232((unint64_t)v112, v226, v245);
        v229 = xmmword_100E22FC0;
        *v111 = xmmword_100E22FC0;
        v113 = v238;
        *((_BYTE *)v111 + *(int *)(v42 + 28)) = (_BYTE)v237;
        *(_QWORD *)((char *)v111 + *(int *)(v42 + 32)) = v113;
        *((_BYTE *)v111 + *(int *)(v42 + 36)) = v224;
        v50 = v218;
        sub_1001EFC30((uint64_t)v111, v218);
        swift_bridgeObjectRetain(v113);
        v9 = sub_1007C80BC(0, 1, 1, (unint64_t)_swiftEmptyArrayStorage);
        v42 = *(_QWORD *)(v9 + 16);
        v67 = *(_QWORD *)(v9 + 24);
        isUniquelyReferenced_nonNull_native = v42 + 1;
        if (v42 < v67 >> 1)
          goto LABEL_74;
        goto LABEL_142;
      }
      v43 = 0;
      while (1)
      {
        v67 = *(_QWORD *)(v50 + 16);
        if (v43 >= v67)
          goto LABEL_138;
        v99 = (uint64_t)v239;
        v100 = (*(unsigned __int8 *)(v240 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v240 + 80);
        v101 = *(_QWORD *)(v240 + 72);
        sub_1001EFC30(v50 + v100 + v101 * v43, (uint64_t)v239);
        isUniquelyReferenced_nonNull_native = *(unsigned __int8 *)(v99 + *(int *)(v42 + 28));
        v102 = v99;
        v9 = (unint64_t)v232;
        sub_1001EFC30(v102, (uint64_t)v232);
        if ((_DWORD)isUniquelyReferenced_nonNull_native == v236)
        {
          v103 = swift_bridgeObjectRetain(*(_QWORD *)(v9 + *(int *)(v42 + 32)));
          v104 = sub_100508A54(v103);
          swift_bridgeObjectRelease();
          isUniquelyReferenced_nonNull_native = sub_10001B664(v104);
          swift_release();
          swift_bridgeObjectRetain(v62);
          v106 = sub_100CA4858(v105);
          sub_1001EE9B8(v106, isUniquelyReferenced_nonNull_native);
          v108 = v107;
          swift_bridgeObjectRelease();
          v42 = v243;
          swift_bridgeObjectRelease();
          sub_1001EFC74(v9);
          if ((v108 & 1) == 0)
          {
            sub_1001EFCB0((uint64_t)v239, v227);
            isUniquelyReferenced_nonNull_native = v247[0];
            if ((swift_isUniquelyReferenced_nonNull_native(v247[0]) & 1) == 0)
            {
              sub_10009A520(0, *(_QWORD *)(isUniquelyReferenced_nonNull_native + 16) + 1, 1);
              v42 = v243;
              isUniquelyReferenced_nonNull_native = v247[0];
            }
            v9 = *(_QWORD *)(isUniquelyReferenced_nonNull_native + 16);
            v109 = *(_QWORD *)(isUniquelyReferenced_nonNull_native + 24);
            if (v9 >= v109 >> 1)
            {
              sub_10009A520(v109 > 1, v9 + 1, 1);
              v42 = v243;
              isUniquelyReferenced_nonNull_native = v247[0];
            }
            *(_QWORD *)(isUniquelyReferenced_nonNull_native + 16) = v9 + 1;
            sub_1001EFCB0(v227, isUniquelyReferenced_nonNull_native + v100 + v9 * v101);
            goto LABEL_62;
          }
        }
        else
        {
          sub_1001EFC74(v9);
        }
        sub_1001EFC74((uint64_t)v239);
LABEL_62:
        ++v43;
        v62 = v238;
        if (v242 == (uint64_t *)v43)
        {
          v233 = (char *)v247[0];
          goto LABEL_73;
        }
      }
    }
    v68 = *(_QWORD *)(v229 + 8 * v67);
    v69 = v61 + 1;
    if (v68)
      goto LABEL_26;
    v69 = v61 + 2;
    if ((uint64_t)(v61 + 2) >= v230)
      goto LABEL_39;
    v68 = *(_QWORD *)(v229 + 8 * v69);
    if (v68)
      goto LABEL_26;
    v69 = v61 + 3;
    if ((uint64_t)(v61 + 3) >= v230)
      goto LABEL_39;
    v68 = *(_QWORD *)(v229 + 8 * v69);
    if (v68)
      goto LABEL_26;
    v69 = v61 + 4;
    if ((uint64_t)(v61 + 4) >= v230)
      goto LABEL_39;
    v68 = *(_QWORD *)(v229 + 8 * v69);
    if (v68)
      goto LABEL_26;
    v69 = v61 + 5;
    if ((uint64_t)(v61 + 5) >= v230)
      goto LABEL_39;
    v68 = *(_QWORD *)(v229 + 8 * v69);
    if (v68)
      goto LABEL_26;
    v70 = v61 + 6;
    if ((uint64_t)(v61 + 6) >= v230)
      goto LABEL_39;
    v68 = *(_QWORD *)(v229 + 8 * v70);
    if (!v68)
      break;
    v69 = v61 + 6;
LABEL_26:
    v59 = (v68 - 1) & v68;
    v238 = v69;
    v66 = __clz(__rbit64(v68)) + (v69 << 6);
LABEL_27:
    v9 = a2;
    v50 = *(_QWORD *)(v43 + 72);
    v71 = *(_QWORD *)(a2 + 48) + v50 * v66;
    v72 = *(void (**)(char *, unint64_t, unint64_t, __n128))(v43 + 16);
    v72(v235, v71, v42, v60);
    (*(void (**)(unint64_t, _QWORD, uint64_t, unint64_t))(v43 + 56))(isUniquelyReferenced_nonNull_native, 0, 1, v42);
    if ((*(unsigned int (**)(unint64_t, uint64_t, unint64_t))(v43 + 48))(isUniquelyReferenced_nonNull_native, 1, v42) == 1)goto LABEL_40;
    v73 = *(void (**)(char *, unint64_t, unint64_t))(v43 + 32);
    v74 = v241;
    v73(v241, isUniquelyReferenced_nonNull_native, v42);
    isUniquelyReferenced_nonNull_native = (unint64_t)v242;
    ((void (*)(uint64_t *, char *, unint64_t))v72)(v242, v74, v42);
    v42 = v62;
    v62 = swift_isUniquelyReferenced_nonNull_native(v62);
    v247[0] = v42;
    v43 = sub_100003FB0(isUniquelyReferenced_nonNull_native);
    v67 = *(_QWORD *)(v42 + 16);
    v76 = (v75 & 1) == 0;
    v77 = v67 + v76;
    if (__OFADD__(v67, v76))
      goto LABEL_139;
    isUniquelyReferenced_nonNull_native = v75;
    if (*(_QWORD *)(v42 + 24) >= v77)
    {
      if ((v62 & 1) == 0)
        sub_100A9A608();
    }
    else
    {
      sub_100A862AC(v77, v62);
      v78 = sub_100003FB0((uint64_t)v242);
      if ((isUniquelyReferenced_nonNull_native & 1) != (v79 & 1))
        goto LABEL_146;
      v43 = v78;
    }
    v42 = v245;
    v62 = v247[0];
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      *(_BYTE *)(*(_QWORD *)(v247[0] + 56) + v43) = (_BYTE)v233;
    }
    else
    {
      *(_QWORD *)(v247[0] + 8 * (v43 >> 6) + 64) |= 1 << v43;
      ((void (*)(unint64_t, uint64_t *, unint64_t))v72)(*(_QWORD *)(v62 + 48) + v43 * v50, v242, v42);
      *(_BYTE *)(*(_QWORD *)(v62 + 56) + v43) = (_BYTE)v233;
      v80 = *(_QWORD *)(v62 + 16);
      v81 = __OFADD__(v80, 1);
      v67 = v80 + 1;
      if (v81)
        goto LABEL_140;
      *(_QWORD *)(v62 + 16) = v67;
    }
    swift_bridgeObjectRelease();
    v43 = (unint64_t)v244;
    v63 = (void (*)(uint64_t *, unint64_t))v244[1];
    v63(v242, v42);
    v63((uint64_t *)v241, v42);
    a2 = v9;
    v61 = v238;
  }
  while (1)
  {
    v69 = v70 + 1;
    if (__OFADD__(v70, 1))
      break;
    if (v69 >= v230)
      goto LABEL_39;
    v68 = *(_QWORD *)(v229 + 8 * v69);
    ++v70;
    if (v68)
      goto LABEL_26;
  }
  __break(1u);
LABEL_146:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v245);
  __break(1u);
LABEL_147:
  result = swift_bridgeObjectRelease();
  __break(1u);
  return result;
}

uint64_t sub_1001F1B98(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(v1 + 16);
  v4 = type metadata accessor for OwnerSharingCircle(0);
  return static UUID.== infix(_:_:)(a1 + *(int *)(v4 + 24), v3) & 1;
}

_QWORD *sub_1001F1BE4(uint64_t a1, uint64_t a2)
{
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _OWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v29;
  uint64_t v30;

  v4 = (int *)type metadata accessor for OwnerSharingCircle(0);
  v5 = *((_QWORD *)v4 - 1);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (_OWORD *)((char *)&v29 - v9);
  v11 = sub_10001A9A8(&qword_1010EE360);
  v12 = *(_QWORD *)(v5 + 72);
  v13 = *(unsigned __int8 *)(v5 + 80);
  v14 = (v13 + 32) & ~v13;
  v15 = swift_allocObject(v11, v14 + v12, v13 | 7);
  *(_OWORD *)(v15 + 16) = xmmword_100E22B00;
  sub_1001EFC30(a2, v15 + v14);
  v16 = *(_QWORD *)(a2 + v4[8]);
  if (*(_QWORD *)(v16 + 16) < 2uLL)
    return _swiftEmptyArrayStorage;
  v30 = *(_QWORD *)(a2 + v4[8]);
  swift_bridgeObjectRetain(v16);
  v17 = sub_100102EF8(a1);
  UUID.init()(v17);
  v18 = v4[6];
  v19 = a2 + v18;
  v20 = (char *)v10 + v18;
  v21 = type metadata accessor for UUID(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(v20, v19, v21);
  v22 = v4[7];
  v23 = *(_BYTE *)(a2 + v22);
  v24 = v30;
  *v10 = xmmword_100E22FC0;
  *((_BYTE *)v10 + v22) = v23;
  *(_QWORD *)((char *)v10 + v4[8]) = v24;
  *((_BYTE *)v10 + v4[9]) = 1;
  sub_1001EFC30((uint64_t)v10, (uint64_t)v8);
  v25 = sub_1007C80BC(0, 1, 1, (unint64_t)_swiftEmptyArrayStorage);
  v27 = *(_QWORD *)(v25 + 16);
  v26 = *(_QWORD *)(v25 + 24);
  if (v27 >= v26 >> 1)
    v25 = sub_1007C80BC(v26 > 1, v27 + 1, 1, v25);
  *(_QWORD *)(v25 + 16) = v27 + 1;
  sub_1001EFCB0((uint64_t)v8, v25 + v14 + v27 * v12);
  sub_1001EFC74((uint64_t)v10);
  return (_QWORD *)v25;
}

unint64_t sub_1001F1DDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v40;
  char v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v48;
  void (*v49)(uint64_t, uint64_t, uint64_t);
  char *v50;
  uint64_t v51;
  unint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;

  v54 = a3;
  v5 = sub_10001A9A8(&qword_1010EE0E0);
  __chkstk_darwin(v5);
  v7 = (char *)&v48 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = (int *)type metadata accessor for OwnerSharingCircle(0);
  v9 = *((_QWORD *)v8 - 1);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v48 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v10);
  v15 = (_OWORD *)((char *)&v48 - v14);
  v16 = __chkstk_darwin(v13);
  v18 = (char *)&v48 - v17;
  __chkstk_darwin(v16);
  v55 = (uint64_t)&v48 - v19;
  v21 = (unint64_t)sub_1001F1BE4(a1, a2);
  if (*(_BYTE *)(a2 + v8[7]))
  {
    v50 = v18;
    v51 = a2;
    v52 = v20;
    v53 = v12;
    v22 = sub_10001A9A8(&qword_1010F2B88);
    v23 = v9;
    v24 = sub_10001A9A8(&qword_1010F2B70);
    v25 = *(_QWORD *)(v24 - 8);
    v26 = *(_QWORD *)(v25 + 72);
    v27 = *(unsigned __int8 *)(v25 + 80);
    v28 = (v27 + 32) & ~v27;
    v29 = swift_allocObject(v22, v28 + v26, v27 | 7);
    *(_OWORD *)(v29 + 16) = xmmword_100E22B00;
    v30 = v29 + v28;
    v31 = *(int *)(v24 + 48);
    v32 = type metadata accessor for UUID(0);
    v49 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 16);
    v49(v30, a1, v32);
    *(_BYTE *)(v30 + v31) = 1;
    v33 = v23;
    v34 = sub_1006B9870(v29);
    sub_10000F9B8(v54, (uint64_t)v7, &qword_1010EE0E0);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v23 + 48))(v7, 1, v8) == 1)
    {
      v35 = sub_100004048((uint64_t)v7, &qword_1010EE0E0);
      v36 = v51;
    }
    else
    {
      v37 = v55;
      sub_1001EFCB0((uint64_t)v7, v55);
      v38 = *(_QWORD *)(v37 + v8[8]);
      swift_bridgeObjectRetain(v38);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v34);
      v56 = v34;
      sub_1001EF7F4(v38, (uint64_t)sub_1001EF47C, 0, isUniquelyReferenced_nonNull_native, (uint64_t)&v56);
      v40 = v52;
      v34 = v56;
      swift_bridgeObjectRelease();
      sub_1001EFC30(v37, (uint64_t)v50);
      v41 = swift_isUniquelyReferenced_nonNull_native(v40);
      v36 = v51;
      if ((v41 & 1) == 0)
        v40 = sub_1007C80BC(0, *(_QWORD *)(v40 + 16) + 1, 1, v40);
      v43 = *(_QWORD *)(v40 + 16);
      v42 = *(_QWORD *)(v40 + 24);
      if (v43 >= v42 >> 1)
        v40 = sub_1007C80BC(v42 > 1, v43 + 1, 1, v40);
      *(_QWORD *)(v40 + 16) = v43 + 1;
      sub_1001EFCB0((uint64_t)v50, v40+ ((*(unsigned __int8 *)(v33 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v33 + 80))+ *(_QWORD *)(v33 + 72) * v43);
      v35 = sub_1001EFC74(v55);
    }
    UUID.init()(v35);
    v49((uint64_t)v15 + v8[6], v36 + v8[6], v32);
    *v15 = xmmword_100E22FC0;
    *((_BYTE *)v15 + v8[7]) = 0;
    *(_QWORD *)((char *)v15 + v8[8]) = v34;
    *((_BYTE *)v15 + v8[9]) = 1;
    v44 = (uint64_t)v53;
    sub_1001EFC30((uint64_t)v15, (uint64_t)v53);
    if ((swift_isUniquelyReferenced_nonNull_native(v21) & 1) == 0)
      v21 = sub_1007C80BC(0, *(_QWORD *)(v21 + 16) + 1, 1, v21);
    v46 = *(_QWORD *)(v21 + 16);
    v45 = *(_QWORD *)(v21 + 24);
    if (v46 >= v45 >> 1)
      v21 = sub_1007C80BC(v45 > 1, v46 + 1, 1, v21);
    *(_QWORD *)(v21 + 16) = v46 + 1;
    sub_1001EFCB0(v44, v21+ ((*(unsigned __int8 *)(v33 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v33 + 80))+ *(_QWORD *)(v33 + 72) * v46);
    sub_1001EFC74((uint64_t)v15);
  }
  return v21;
}

void sub_1001F21F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  char v70;
  char v71;
  uint64_t v72;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v74;
  uint64_t v75;
  __int128 *v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  unint64_t v80;
  unint64_t v81;
  _QWORD *v82;
  unsigned int (*v83)(_QWORD, _QWORD, _QWORD);
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  __n128 v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char v102;
  uint64_t v103;
  void (*v104)(uint64_t, uint64_t, uint64_t, int *, __n128);
  uint64_t v105;
  __n128 v106;
  _QWORD *v107;
  uint64_t v108;
  uint64_t v109;
  __n128 v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  _QWORD *v116;
  __int128 v117;
  uint64_t v118;
  __int128 v119;
  __int128 *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t i;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  void (*v132)(uint64_t, uint64_t, uint64_t, int *, __n128);
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  void *v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t v140;
  unsigned int (*v141)(_QWORD, _QWORD, _QWORD);
  char *v142;
  uint64_t v143;
  _QWORD *v144;
  uint64_t v145;
  void *v146;

  v131 = a3;
  v134 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v134 - 8);
  __chkstk_darwin(v134);
  v136 = (char *)&v117 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10001A9A8(&qword_1010F2B80);
  v8 = __chkstk_darwin(v7);
  v129 = (uint64_t)&v117 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v128 = (uint64_t)&v117 - v10;
  v11 = (int *)type metadata accessor for OwnerSharingCircle(0);
  v138 = *((_QWORD *)v11 - 1);
  v12 = __chkstk_darwin(v11);
  v14 = (char *)&v117 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v12);
  v118 = (uint64_t)&v117 - v16;
  v17 = __chkstk_darwin(v15);
  v19 = (char *)&v117 - v18;
  v20 = __chkstk_darwin(v17);
  v135 = (uint64_t)&v117 - v21;
  v22 = __chkstk_darwin(v20);
  v123 = (uint64_t)&v117 - v23;
  v24 = __chkstk_darwin(v22);
  v26 = (uint64_t *)((char *)&v117 - v25);
  v27 = __chkstk_darwin(v24);
  v29 = (char *)&v117 - v28;
  v30 = __chkstk_darwin(v27);
  v121 = (uint64_t)&v117 - v31;
  v32 = __chkstk_darwin(v30);
  v120 = (__int128 *)((char *)&v117 - v33);
  __chkstk_darwin(v32);
  v35 = (char *)&v117 - v34;
  v36 = sub_10001A9A8(&qword_1010EE0E0);
  v37 = __chkstk_darwin(v36);
  v124 = (uint64_t)&v117 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = __chkstk_darwin(v37);
  v126 = (uint64_t)&v117 - v40;
  v41 = __chkstk_darwin(v39);
  v127 = (uint64_t)&v117 - v42;
  __chkstk_darwin(v41);
  v137 = &_swiftEmptySetSingleton;
  v146 = &_swiftEmptySetSingleton;
  v130 = (uint64_t)&v117 - v43;
  sub_10000F9B8(v131, (uint64_t)&v117 - v43, &qword_1010EE0E0);
  v133 = a1;
  v44 = a1;
  v45 = v134;
  v142 = v35;
  sub_1001EFC30(v44, (uint64_t)v35);
  v46 = *(_QWORD *)(a2 + 16);
  v122 = a2;
  swift_bridgeObjectRetain(a2);
  v140 = 0;
  v119 = xmmword_100E22B00;
  v117 = xmmword_100E22FC0;
  v139 = v5;
  for (i = v46; ; v46 = i)
  {
    if (v140 == v46)
    {
      v50 = sub_10001A9A8(&qword_1011090E0);
      v51 = v129;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v50 - 8) + 56))(v129, 1, 1, v50);
      v140 = v46;
      goto LABEL_8;
    }
    if (v140 >= v46)
      break;
    v52 = sub_10001A9A8(&qword_1011090E0);
    v53 = *(_QWORD *)(v52 - 8);
    v54 = v140;
    v51 = v129;
    sub_10000F9B8(v122+ ((*(unsigned __int8 *)(v53 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v53 + 80))+ *(_QWORD *)(v53 + 72) * v140, v129, &qword_1011090E0);
    v140 = v54 + 1;
    v45 = v134;
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v53 + 56))(v51, 0, 1, v52);
LABEL_8:
    v55 = v128;
    sub_1001F2CD8(v51, v128);
    v56 = sub_10001A9A8(&qword_1011090E0);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v56 - 8) + 48))(v55, 1, v56) == 1)
    {
      swift_bridgeObjectRelease();
LABEL_52:
      sub_100508EA4((uint64_t)v137);
      swift_bridgeObjectRelease();
      sub_100508EA4((uint64_t)v146);
      swift_bridgeObjectRelease();
      sub_1001EFC74((uint64_t)v142);
      sub_100004048(v130, &qword_1010EE0E0);
      return;
    }
    v57 = v55;
    v58 = *(unsigned __int8 *)(v55 + *(int *)(v56 + 48));
    v59 = (uint64_t)v136;
    (*(void (**)(char *, uint64_t, uint64_t))(v139 + 32))(v136, v57, v45);
    if (v58 == 1)
    {
      v60 = (_QWORD *)sub_1001F1DDC(v59, (uint64_t)v142, v130);
      v143 = v61;
    }
    else
    {
      v62 = sub_10001A9A8(&qword_1010EE360);
      v63 = *(_QWORD **)(v138 + 72);
      v64 = *(unsigned __int8 *)(v138 + 80);
      v65 = (v64 + 32) & ~v64;
      v66 = swift_allocObject(v62, (char *)v63 + v65, v64 | 7);
      *(_OWORD *)(v66 + 16) = v119;
      v143 = v66;
      v67 = (uint64_t)v142;
      sub_1001EFC30((uint64_t)v142, v66 + v65);
      v68 = *(_QWORD *)(v67 + v11[8]);
      if (*(_QWORD *)(v68 + 16) < 2uLL)
      {
        v60 = _swiftEmptyArrayStorage;
      }
      else
      {
        v141 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))v65;
        swift_bridgeObjectRetain_n(v68, 2);
        v69 = sub_100003FB0(v59);
        v71 = v70;
        v72 = swift_bridgeObjectRelease();
        v144 = v63;
        if ((v71 & 1) != 0)
        {
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v68);
          v145 = v68;
          if (!isUniquelyReferenced_nonNull_native)
          {
            sub_100A9A608();
            v68 = v145;
          }
          v74 = v139;
          v75 = v134;
          (*(void (**)(unint64_t, uint64_t))(v139 + 8))(*(_QWORD *)(v68 + 48) + *(_QWORD *)(v139 + 72) * v69, v134);
          v68 = v145;
          sub_1001055FC(v69, v145);
          v72 = swift_bridgeObjectRelease();
        }
        else
        {
          v75 = v134;
          v74 = v139;
        }
        v76 = v120;
        UUID.init()(v72);
        v77 = (uint64_t)v142;
        (*(void (**)(char *, char *, uint64_t))(v74 + 16))((char *)v76 + v11[6], &v142[v11[6]], v75);
        v78 = v11[7];
        v79 = *(_BYTE *)(v77 + v78);
        *v76 = v117;
        *((_BYTE *)v76 + v78) = v79;
        *(_QWORD *)((char *)v76 + v11[8]) = v68;
        *((_BYTE *)v76 + v11[9]) = 1;
        sub_1001EFC30((uint64_t)v76, v121);
        v60 = (_QWORD *)sub_1007C80BC(0, 1, 1, (unint64_t)_swiftEmptyArrayStorage);
        v81 = v60[2];
        v80 = v60[3];
        if (v81 >= v80 >> 1)
          v60 = (_QWORD *)sub_1007C80BC(v80 > 1, v81 + 1, 1, (unint64_t)v60);
        v82 = v144;
        v83 = v141;
        v60[2] = v81 + 1;
        sub_1001EFCB0(v121, (uint64_t)v83 + (_QWORD)v60 + v81 * (_QWORD)v82);
        sub_1001EFC74((uint64_t)v120);
      }
    }
    v84 = (uint64_t)v137;
    v85 = v138;
    v144 = v60;
    v145 = (uint64_t)v137;
    v86 = v60[2];
    if (v86)
    {
      v87 = v60;
      v88 = (uint64_t)v60
          + ((*(unsigned __int8 *)(v138 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v138 + 80));
      swift_bridgeObjectRetain(v87);
      v89 = *(_QWORD *)(v85 + 72);
      v90 = v86;
      do
      {
        sub_1001EFC30(v88, (uint64_t)v26);
        sub_100A0D1CC((uint64_t)v29, v26);
        sub_1001EFC74((uint64_t)v29);
        v88 += v89;
        --v90;
      }
      while (v90);
      v60 = v144;
      swift_bridgeObjectRelease();
      v84 = v145;
      v85 = v138;
    }
    v91 = v143;
    swift_bridgeObjectRetain(v143);
    v137 = sub_10063EA60(v92, v84);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain(v91);
    v93 = sub_1001C0B88(v133, v91);
    swift_bridgeObjectRelease();
    if ((v93 & 1) != 0)
    {
      sub_1001EFC30(v133, (uint64_t)v26);
      sub_100A0D1CC((uint64_t)v29, v26);
      sub_1001EFC74((uint64_t)v29);
    }
    v94 = v127;
    sub_10000F9B8(v131, v127, &qword_1010EE0E0);
    v141 = *(unsigned int (**)(_QWORD, _QWORD, _QWORD))(v85 + 48);
    if (v141(v94, 1, v11) == 1)
    {
      sub_100004048(v94, &qword_1010EE0E0);
      if (v86)
        goto LABEL_29;
    }
    else
    {
      v99 = v94;
      v100 = v123;
      sub_1001EFCB0(v99, v123);
      v101 = v143;
      swift_bridgeObjectRetain(v143);
      v102 = sub_1001C0B88(v100, v101);
      swift_bridgeObjectRelease();
      v103 = v100;
      if ((v102 & 1) != 0)
      {
        sub_1001EFC30(v100, (uint64_t)v26);
        sub_100A0D1CC((uint64_t)v29, v26);
        sub_1001EFC74((uint64_t)v29);
        v103 = v123;
      }
      sub_1001EFC74(v103);
      v60 = v144;
      if (v86)
      {
LABEL_29:
        v95 = (uint64_t)v60
            + ((*(unsigned __int8 *)(v85 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v85 + 80));
        swift_bridgeObjectRetain(v60);
        v96 = *(_QWORD *)(v85 + 72);
        v97 = v86;
        while (1)
        {
          sub_1001EFC30(v95, (uint64_t)v19);
          if (v19[v11[7]] == 2)
            break;
          sub_1001EFC74((uint64_t)v19);
          v95 += v96;
          if (!--v97)
            goto LABEL_37;
        }
        v105 = v126;
        sub_1001EFCB0((uint64_t)v19, v126);
        v104 = *(void (**)(uint64_t, uint64_t, uint64_t, int *, __n128))(v85 + 56);
        v104(v105, 0, 1, v11, v106);
        goto LABEL_39;
      }
    }
    v98 = swift_bridgeObjectRetain(v60);
LABEL_37:
    v104 = *(void (**)(uint64_t, uint64_t, uint64_t, int *, __n128))(v85 + 56);
    v105 = v126;
    v104(v126, 1, 1, v11, v98);
LABEL_39:
    v107 = v144;
    swift_bridgeObjectRelease();
    if (v141(v105, 1, v11) == 1)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v139 + 8))(v136, v134);
      swift_bridgeObjectRelease();
      sub_100004048(v105, &qword_1010EE0E0);
      goto LABEL_52;
    }
    sub_1001EFCB0(v105, v135);
    v132 = v104;
    if (v86)
    {
      v108 = (uint64_t)v107
           + ((*(unsigned __int8 *)(v85 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v85 + 80));
      swift_bridgeObjectRetain(v107);
      v109 = *(_QWORD *)(v85 + 72);
      while (1)
      {
        sub_1001EFC30(v108, (uint64_t)v14);
        if (!v14[v11[7]])
          break;
        sub_1001EFC74((uint64_t)v14);
        v108 += v109;
        if (!--v86)
          goto LABEL_46;
      }
      v111 = v124;
      sub_1001EFCB0((uint64_t)v14, v124);
      v112 = v111;
      v113 = 0;
    }
    else
    {
      v110 = swift_bridgeObjectRetain(v107);
LABEL_46:
      v111 = v124;
      v112 = v124;
      v113 = 1;
    }
    v104(v112, v113, 1, v11, v110);
    v45 = v134;
    v114 = v139;
    v115 = v136;
    v116 = v144;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n(v116, 2);
    (*(void (**)(char *, uint64_t))(v114 + 8))(v115, v45);
    sub_1001EFC74((uint64_t)v142);
    if (v141(v111, 1, v11) == 1)
    {
      sub_100004048(v111, &qword_1010EE0E0);
    }
    else
    {
      v47 = v130;
      sub_100004048(v130, &qword_1010EE0E0);
      v48 = v111;
      v49 = v118;
      sub_1001EFCB0(v48, v118);
      sub_1001EFCB0(v49, v47);
      ((void (*)(uint64_t, _QWORD, uint64_t, int *))v132)(v47, 0, 1, v11);
    }
    sub_1001EFCB0(v135, (uint64_t)v142);
  }
  __break(1u);
}

uint64_t sub_1001F2CD8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001A9A8(&qword_1010F2B80);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t *sub_1001F2D20(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain(v9);
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      memcpy(a1, a2, *(_QWORD *)(v5 + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
  }
  return a1;
}

uint64_t sub_1001F2DE8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = type metadata accessor for UUID(0);
  v3 = *(_QWORD *)(v2 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(a1, 1, v2);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
  return result;
}

void *sub_1001F2E50(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  return a1;
}

void *sub_1001F2EF4(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void *, uint64_t, uint64_t);
  int v9;
  int v10;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 24))(a1, a2, v6);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v7 + 16))(a1, a2, v6);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  return a1;
}

void *sub_1001F2FE4(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  return a1;
}

void *sub_1001F3088(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void *, uint64_t, uint64_t);
  int v9;
  int v10;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 1, v6);
  v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 40))(a1, a2, v6);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v7 + 32))(a1, a2, v6);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  return a1;
}

uint64_t sub_1001F3178(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001F3184);
}

uint64_t sub_1001F3184(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;

  v4 = type metadata accessor for UUID(0);
  v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
  if (v5 >= 2)
    return v5 - 1;
  else
    return 0;
}

uint64_t sub_1001F31D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001F31DC);
}

uint64_t sub_1001F31DC(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  if (a2)
    v5 = (a2 + 1);
  else
    v5 = 0;
  v6 = type metadata accessor for UUID(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(a1, v5, a3, v6);
}

uint64_t sub_1001F322C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for UUID(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(a1, 1, v2);
}

uint64_t sub_1001F3264(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for UUID(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, 1, v4);
}

uint64_t sub_1001F32A4(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;

  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload(a1, 256, *(_QWORD *)(result - 8) + 64, 1);
    return 0;
  }
  return result;
}

uint64_t sub_1001F32F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(char *, char *, uint64_t);
  uint64_t v24;

  v4 = sub_10001A9A8(&qword_1010F2C10);
  __chkstk_darwin(v4);
  v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for URLComponents(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for OfflineLostModeInfoLookupEndpoint(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = URL.absoluteString.getter(v13);
  v18 = HIBYTE(v17) & 0xF;
  if ((v17 & 0x2000000000000000) == 0)
    v18 = v16 & 0xFFFFFFFFFFFFLL;
  if (v18)
  {
    URLComponents.init(string:)(v16, v17);
    swift_bridgeObjectRelease();
    v19 = type metadata accessor for URL(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 8))(a1, v19);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) != 1)
    {
      v22 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
      v22(v10, v6, v7);
      v22(v15, v10, v7);
      sub_1001F3548((uint64_t)v15, a2);
      v21 = 0;
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 56))(a2, v21, 1, v11);
    }
    sub_1001F3508((uint64_t)v6);
  }
  else
  {
    v20 = type metadata accessor for URL(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 8))(a1, v20);
    swift_bridgeObjectRelease();
  }
  v21 = 1;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 56))(a2, v21, 1, v11);
}

uint64_t type metadata accessor for OfflineLostModeInfoLookupEndpoint(uint64_t a1)
{
  uint64_t result;

  result = qword_1010F2C70;
  if (!qword_1010F2C70)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for OfflineLostModeInfoLookupEndpoint);
  return result;
}

uint64_t sub_1001F3508(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10001A9A8(&qword_1010F2C10);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1001F3548(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for OfflineLostModeInfoLookupEndpoint(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001F358C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for URLComponents(0);
  return (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8))(a1, a2, v4);
}

uint64_t sub_1001F35C8(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for URLComponents(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t sub_1001F35FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for URLComponents(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t sub_1001F3640(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for URLComponents(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t sub_1001F3684(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for URLComponents(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t sub_1001F36C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for URLComponents(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t sub_1001F370C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001F3718);
}

uint64_t sub_1001F3718(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for URLComponents(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t sub_1001F3754(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001F3760);
}

uint64_t sub_1001F3760(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for URLComponents(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t sub_1001F37A0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;

  result = type metadata accessor for URLComponents(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 1, &v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_1001F3808@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for URLComponents(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t sub_1001F3840(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  unint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t result;
  unint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t *v51;
  _QWORD v52[3];
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;

  v4 = _swiftEmptyArrayStorage;
  if (!a4)
    return (uint64_t)v4;
  if (a4 != 1)
  {
    v58 = _swiftEmptyArrayStorage;
    v22 = *(_QWORD *)(a1 + 16);
    swift_bridgeObjectRetain(a1);
    if (v22)
    {
      v23 = a1 + 32;
      do
      {
        sub_100030784(v23, (uint64_t)&v55);
        v24 = v56;
        v25 = v57;
        sub_10001AA44(&v55, v56);
        if (((*(uint64_t (**)(uint64_t, uint64_t))(v25 + 112))(v24, v25) & 1) != 0)
        {
          sub_10000F9FC(&v55, (uint64_t)v52);
          v26 = v58;
          if ((swift_isUniquelyReferenced_nonNull_native(v58) & 1) == 0)
          {
            sub_10009A628(0, v26[2] + 1, 1);
            v26 = v58;
          }
          v28 = v26[2];
          v27 = v26[3];
          if (v28 >= v27 >> 1)
            sub_10009A628(v27 > 1, v28 + 1, 1);
          v29 = v53;
          v30 = v54;
          v31 = sub_10009F5D0((uint64_t)v52, v53);
          __chkstk_darwin(v31);
          v33 = (char *)&v49 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
          (*(void (**)(char *))(v34 + 16))(v33);
          sub_1004AA86C(v28, (uint64_t)v33, (uint64_t *)&v58, v29, v30);
          _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v52);
        }
        else
        {
          _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v55);
        }
        v23 += 40;
        --v22;
      }
      while (v22);
      v4 = v58;
    }
    swift_bridgeObjectRelease();
    return (uint64_t)v4;
  }
  v8 = (unint64_t *)swift_allocObject(&unk_10105F3B8, 24, 7);
  v8[2] = (unint64_t)&off_101049650;
  v58 = _swiftEmptyArrayStorage;
  v9 = *(_QWORD *)(a1 + 16);
  swift_bridgeObjectRetain(a1);
  v51 = v8;
  if (v9)
  {
    v50 = a1;
    v10 = a1 + 32;
    do
    {
      sub_100030784(v10, (uint64_t)&v55);
      v11 = v56;
      v12 = v57;
      sub_10001AA44(&v55, v56);
      if (((*(uint64_t (**)(uint64_t, uint64_t))(v12 + 112))(v11, v12) & 1) != 0)
      {
        sub_10000F9FC(&v55, (uint64_t)v52);
        v13 = v58;
        if ((swift_isUniquelyReferenced_nonNull_native(v58) & 1) == 0)
        {
          sub_10009A628(0, v13[2] + 1, 1);
          v13 = v58;
        }
        v15 = v13[2];
        v14 = v13[3];
        if (v15 >= v14 >> 1)
          sub_10009A628(v14 > 1, v15 + 1, 1);
        v16 = v53;
        v17 = v54;
        v18 = sub_10009F5D0((uint64_t)v52, v53);
        __chkstk_darwin(v18);
        v20 = (char *)&v49 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
        (*(void (**)(char *))(v21 + 16))(v20);
        sub_1004AA86C(v15, (uint64_t)v20, (uint64_t *)&v58, v16, v17);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v52);
      }
      else
      {
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v55);
      }
      v10 += 40;
      --v9;
    }
    while (v9);
    v35 = v58;
    v8 = v51;
  }
  else
  {
    v35 = _swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRelease();
  v58 = _swiftEmptyArrayStorage;
  v36 = v35[2];
  swift_retain_n(a3, 2);
  swift_retain_n(a2, 2);
  result = swift_retain_n(v8, 2);
  if (!v36)
  {
LABEL_39:
    swift_release_n(a2, 2);
    swift_release_n(a3, 2);
    swift_release_n(v8, 3);
    swift_release();
    return (uint64_t)v4;
  }
  v38 = 0;
  v39 = (uint64_t)(v35 + 4);
  v50 = a2;
  while (v38 < v35[2])
  {
    sub_100030784(v39, (uint64_t)&v55);
    if (sub_1001F3DFC(&v55, a3, a2, (uint64_t (*)(char *))sub_1001F3DF4, v8))
    {
      sub_10000F9FC(&v55, (uint64_t)v52);
      v40 = v58;
      if ((swift_isUniquelyReferenced_nonNull_native(v58) & 1) == 0)
      {
        sub_10009A628(0, v40[2] + 1, 1);
        v40 = v58;
      }
      v42 = v40[2];
      v41 = v40[3];
      if (v42 >= v41 >> 1)
        sub_10009A628(v41 > 1, v42 + 1, 1);
      v43 = v53;
      v44 = v54;
      v45 = sub_10009F5D0((uint64_t)v52, v53);
      __chkstk_darwin(v45);
      v47 = (char *)&v49 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *))(v48 + 16))(v47);
      sub_1004AA86C(v42, (uint64_t)v47, (uint64_t *)&v58, v43, v44);
      result = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v52);
      a2 = v50;
      v8 = v51;
    }
    else
    {
      result = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v55);
    }
    ++v38;
    v39 += 40;
    if (v36 == v38)
    {
      v4 = v58;
      goto LABEL_39;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1001F3D34(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  uint64_t v8;
  uint64_t v9;

  result = type metadata accessor for BeaconObservation(0);
  v5 = *(_QWORD *)(a2 + 16);
  if (!v5)
    return 0;
  v6 = qword_100E2DB70[*(char *)(a1 + *(int *)(result + 24))];
  if (qword_100E2DB70[*(char *)(a2 + 32)] == v6)
    return 1;
  if (v5 == 1)
    return 0;
  for (i = 33; ; ++i)
  {
    v8 = i - 31;
    if (__OFADD__(i - 32, 1))
      break;
    v9 = qword_100E2DB70[*(char *)(a2 + i)];
    result = v9 == v6;
    if (v9 == v6 || v8 == v5)
      return result;
  }
  __break(1u);
  return result;
}

uint64_t sub_1001F3DD0()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001F3DF4(uint64_t a1)
{
  uint64_t v1;

  return sub_1001F3D34(a1, *(_QWORD *)(v1 + 16));
}

BOOL sub_1001F3DFC(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(char *), unint64_t *a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t *v53;
  _QWORD *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  double v65;
  void (*v66)(uint64_t, uint64_t);
  uint64_t v68;
  uint64_t (*v69)(char *);
  unint64_t *v70;
  void (*v71)(uint64_t, uint64_t);
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;

  v69 = a4;
  v70 = a5;
  v73 = a3;
  v75 = a2;
  v6 = sub_10001A9A8(&qword_1010EF660);
  __chkstk_darwin(v6);
  v82 = (uint64_t)&v68 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  __chkstk_darwin(v8);
  v83 = (char *)&v68 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10001A9A8((uint64_t *)&unk_101102F70);
  __chkstk_darwin(v10);
  v12 = (char *)&v68 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v84 = type metadata accessor for UUID(0);
  v74 = *(_QWORD *)(v84 - 8);
  v13 = __chkstk_darwin(v84);
  v76 = (char *)&v68 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v16 = (char *)&v68 - v15;
  v17 = sub_10001A9A8(&qword_1010F2CA8);
  __chkstk_darwin(v17);
  v19 = (char *)&v68 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for BeaconStatus(0);
  v21 = *(_QWORD *)(v20 - 8);
  __chkstk_darwin(v20);
  v23 = (char *)&v68 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = type metadata accessor for Date(0);
  v81 = *(_QWORD *)(v24 - 8);
  v25 = __chkstk_darwin(v24);
  v80 = (uint64_t)&v68 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = __chkstk_darwin(v25);
  v79 = (char *)&v68 - v28;
  v29 = __chkstk_darwin(v27);
  v78 = (char *)&v68 - v30;
  __chkstk_darwin(v29);
  v77 = (char *)&v68 - v31;
  v32 = a1[3];
  v33 = a1[4];
  v34 = sub_10001AA44(a1, v32);
  v35 = *(_QWORD *)(*(_QWORD *)(v33 + 8) + 8);
  v71 = *(void (**)(uint64_t, uint64_t))(v35 + 32);
  v72 = v34;
  v71(v32, v35);
  sub_1008202EC((uint64_t)v16, (uint64_t)v12);
  v36 = sub_10001A9A8(&qword_101102F80);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 48))(v12, 1, v36) == 1)
  {
    sub_100004048((uint64_t)v12, (uint64_t *)&unk_101102F70);
    v37 = 1;
  }
  else
  {
    sub_1001F44C4((uint64_t)v12, (uint64_t)v19);
    v37 = 0;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v21 + 56))(v19, v37, 1, v20);
  v74 = *(_QWORD *)(v74 + 8);
  ((void (*)(char *, uint64_t))v74)(v16, v84);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20) == 1)
  {
    v38 = sub_100004048((uint64_t)v19, &qword_1010F2CA8);
    v39 = v77;
  }
  else
  {
    sub_1001F44C4((uint64_t)v19, (uint64_t)v23);
    v39 = v77;
    if ((v23[*(int *)(v20 + 32)] & 1) == 0)
    {
      v42 = &v23[*(int *)(v20 + 24)];
      v41 = v81;
      (*(void (**)(char *, char *, uint64_t))(v81 + 16))(v77, v42, v24);
      sub_1000126B0((uint64_t)v23, type metadata accessor for BeaconStatus);
      v40 = (uint64_t)v76;
      goto LABEL_10;
    }
    v38 = sub_1000126B0((uint64_t)v23, type metadata accessor for BeaconStatus);
  }
  v40 = (uint64_t)v76;
  static Date.distantPast.getter(v38);
  v41 = v81;
LABEL_10:
  v71(v32, v35);
  v43 = objc_autoreleasePoolPush();
  v44 = v75;
  v45 = sub_10001A9A8(&qword_1010F7770);
  OS_dispatch_queue.sync<A>(execute:)(sub_10007CAD4, v44, v45);
  v46 = v85;
  if (*(_QWORD *)(v85 + 16) && (v47 = sub_100003FB0(v40), (v48 & 1) != 0))
  {
    v49 = *(_QWORD *)(*(_QWORD *)(v46 + 56) + 8 * v47);
    swift_bridgeObjectRetain(v49);
    swift_bridgeObjectRelease();
    v50 = sub_100508D98(v49);
    swift_bridgeObjectRelease();
    sub_10088FD00((uint64_t)v50);
    v52 = v51;
    swift_release();
    v53 = v70;
    swift_retain();
    v54 = (_QWORD *)sub_10008B5E0(v69, v53, v52);
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
    v54 = _swiftEmptyArrayStorage;
  }
  v55 = v78;
  objc_autoreleasePoolPop(v43);
  ((void (*)(uint64_t, uint64_t))v74)(v40, v84);
  v56 = v82;
  sub_100A797E8((uint64_t)v54, v82);
  swift_bridgeObjectRelease();
  v57 = type metadata accessor for BeaconObservation(0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v57 - 8) + 48))(v56, 1, v57) == 1)
  {
    sub_100004048(v56, &qword_1010EF660);
    v58 = (uint64_t)v83;
    v59 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v41 + 56))(v83, 1, 1, v24);
LABEL_17:
    static Date.distantPast.getter(v59);
    sub_100004048(v58, (uint64_t *)&unk_1010EA690);
    goto LABEL_19;
  }
  v60 = v56 + *(int *)(v57 + 20);
  v58 = (uint64_t)v83;
  (*(void (**)(char *, uint64_t, uint64_t))(v41 + 16))(v83, v60, v24);
  sub_1000126B0(v56, type metadata accessor for BeaconObservation);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v41 + 56))(v58, 0, 1, v24);
  v59 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v41 + 48))(v58, 1, v24);
  if ((_DWORD)v59 == 1)
    goto LABEL_17;
  (*(void (**)(char *, uint64_t, uint64_t))(v41 + 32))(v55, v58, v24);
LABEL_19:
  v61 = sub_1001F447C();
  if ((dispatch thunk of static Comparable.>= infix(_:_:)(v55, v39, v24, v61) & 1) != 0)
    v62 = v55;
  else
    v62 = v39;
  v63 = v79;
  (*(void (**)(char *, char *, uint64_t))(v41 + 16))(v79, v62, v24);
  v64 = v80;
  static Date.trustedNow.getter(v80);
  v65 = Date.timeIntervalSince(_:)(v64);
  v66 = *(void (**)(uint64_t, uint64_t))(v41 + 8);
  v66(v64, v24);
  v66((uint64_t)v63, v24);
  v66((uint64_t)v55, v24);
  v66((uint64_t)v39, v24);
  return fabs(v65) <= 1800.0;
}

unint64_t sub_1001F447C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1010F4820;
  if (!qword_1010F4820)
  {
    v1 = type metadata accessor for Date(255);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for Date, v1);
    atomic_store(result, (unint64_t *)&qword_1010F4820);
  }
  return result;
}

uint64_t sub_1001F44C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for BeaconStatus(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_1001F4508(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = sub_1001F4534();
  result = sub_1001F4578();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_1001F4534()
{
  unint64_t result;

  result = qword_1010F2CB0;
  if (!qword_1010F2CB0)
  {
    result = swift_getWitnessTable(byte_100E2DD14, &type metadata for AirPodsFinalizePairingCommandPayload);
    atomic_store(result, (unint64_t *)&qword_1010F2CB0);
  }
  return result;
}

unint64_t sub_1001F4578()
{
  unint64_t result;

  result = qword_1010F2CB8;
  if (!qword_1010F2CB8)
  {
    result = swift_getWitnessTable(byte_100E2DCEC, &type metadata for AirPodsFinalizePairingCommandPayload);
    atomic_store(result, (unint64_t *)&qword_1010F2CB8);
  }
  return result;
}

uint64_t sub_1001F45BC(_QWORD *a1)
{
  __int128 *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  _QWORD v20[3];
  uint64_t v21;
  uint64_t v22;
  _BYTE v23[16];
  _BYTE v24[16];
  __int128 v25;
  __int128 v26;

  v3 = a1[3];
  v4 = a1[4];
  sub_10001AA44(a1, v3);
  dispatch thunk of BinaryEncoding.container()(v20, v3, v4);
  v19 = *v1;
  v5 = v21;
  v6 = v22;
  sub_10009F5D0((uint64_t)v20, v21);
  v7 = sub_1000DCC90();
  dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)(&v19, &type metadata for Data, v7, v5, v6);
  if (!v2)
  {
    v19 = v1[1];
    v8 = v21;
    v9 = v22;
    sub_10009F5D0((uint64_t)v20, v21);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)(&v19, &type metadata for Data, v7, v8, v9);
    v19 = v1[3];
    v10 = v21;
    v11 = v22;
    sub_10009F5D0((uint64_t)v20, v21);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)(&v19, &type metadata for Data, v7, v10, v11);
    v19 = v1[2];
    v12 = v21;
    v13 = v22;
    sub_10009F5D0((uint64_t)v20, v21);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)(&v19, &type metadata for Data, v7, v12, v13);
    sub_10016924C((uint64_t)(v1 + 4), (uint64_t)v24);
    sub_10016924C((uint64_t)v24, (uint64_t)&v25);
    if (*((_QWORD *)&v25 + 1) >> 60 != 15)
    {
      v19 = v25;
      v15 = v21;
      v16 = v22;
      sub_10009F5D0((uint64_t)v20, v21);
      dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)(&v19, &type metadata for Data, v7, v15, v16);
    }
    sub_10016924C((uint64_t)(v1 + 5), (uint64_t)v23);
    sub_10016924C((uint64_t)v23, (uint64_t)&v26);
    if (*((_QWORD *)&v26 + 1) >> 60 != 15)
    {
      v19 = v26;
      v17 = v21;
      v18 = v22;
      sub_10009F5D0((uint64_t)v20, v21);
      dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)(&v19, &type metadata for Data, v7, v17, v18);
    }
  }
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v20);
}

double sub_1001F4810@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  _OWORD v8[6];

  sub_1001F4A5C(a1, v8);
  if (!v2)
  {
    v5 = v8[3];
    a2[2] = v8[2];
    a2[3] = v5;
    v6 = v8[5];
    a2[4] = v8[4];
    a2[5] = v6;
    result = *(double *)v8;
    v7 = v8[1];
    *a2 = v8[0];
    a2[1] = v7;
  }
  return result;
}

uint64_t sub_1001F4858(_QWORD *a1)
{
  return sub_1001F45BC(a1);
}

uint64_t sub_1001F4898(uint64_t a1, unint64_t a2)
{
  return ((uint64_t (*)(void))((char *)&loc_1001F48AC + dword_1001F4A1C[a2 >> 62]))();
}

uint64_t sub_1001F48BC(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (BYTE6(a2) != 89)
  {
    __break(1u);
    JUMPOUT(0x1001F4A10);
  }
  return ((uint64_t (*)(void))((char *)&loc_1001F48F8 + dword_1001F4A2C[a4 >> 62]))();
}

uint64_t sub_1001F4A5C@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  _QWORD v28[3];
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;

  v5 = a1[3];
  v6 = a1[4];
  sub_10001AA44(a1, v5);
  dispatch thunk of BinaryDecoding.container()(v28, v5, v6);
  v7 = v29;
  v8 = v30;
  sub_10009F5D0((uint64_t)v28, v29);
  v9 = dispatch thunk of BinaryDecodingContaining.decode(length:)(89, v7, v8);
  if (v2)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v28);
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  }
  else
  {
    v11 = v9;
    v12 = v10;
    v13 = v29;
    v14 = v30;
    sub_10009F5D0((uint64_t)v28, v29);
    dispatch thunk of BinaryDecodingContaining.decode(length:)(32, v13, v14);
    v37 = v15;
    v17 = v29;
    v16 = v30;
    sub_10009F5D0((uint64_t)v28, v29);
    dispatch thunk of BinaryDecodingContaining.decode(length:)(100, v17, v16);
    v18 = v29;
    v19 = v30;
    sub_10009F5D0((uint64_t)v28, v29);
    dispatch thunk of BinaryDecodingContaining.decode(length:)(60, v18, v19);
    v20 = v29;
    v21 = v30;
    sub_10009F5D0((uint64_t)v28, v29);
    dispatch thunk of BinaryDecodingContaining.decode(length:)(8, v20, v21);
    v22 = v29;
    v23 = v30;
    sub_10009F5D0((uint64_t)v28, v29);
    dispatch thunk of BinaryDecodingContaining.decode(length:)(24, v22, v23);
    sub_1001F4898(v11, v12);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v28);
    result = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
    v25 = v34;
    a2[2] = v33;
    a2[3] = v25;
    v26 = v36;
    a2[4] = v35;
    a2[5] = v26;
    v27 = v32;
    *a2 = v31;
    a2[1] = v27;
  }
  return result;
}

uint64_t destroy for AirPodsFinalizePairingCommandPayload(uint64_t *a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;

  sub_10001BC14(*a1, a1[1]);
  sub_10001BC14(a1[2], a1[3]);
  sub_10001BC14(a1[4], a1[5]);
  result = sub_10001BC14(a1[6], a1[7]);
  v3 = a1[9];
  if (v3 >> 60 != 15)
    result = sub_10001BC14(a1[8], v3);
  v4 = a1[11];
  if (v4 >> 60 != 15)
    return sub_10001BC14(a1[10], v4);
  return result;
}

uint64_t initializeWithCopy for AirPodsFinalizePairingCommandPayload(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  unint64_t v16;
  uint64_t v17;

  v4 = *a2;
  v5 = a2[1];
  sub_10001BBBC(*a2, v5);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  v6 = a2[2];
  v7 = a2[3];
  sub_10001BBBC(v6, v7);
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  v8 = a2[4];
  v9 = a2[5];
  sub_10001BBBC(v8, v9);
  *(_QWORD *)(a1 + 32) = v8;
  *(_QWORD *)(a1 + 40) = v9;
  v10 = a2[6];
  v11 = a2[7];
  sub_10001BBBC(v10, v11);
  *(_QWORD *)(a1 + 48) = v10;
  *(_QWORD *)(a1 + 56) = v11;
  v12 = a2 + 8;
  v13 = a2[9];
  if (v13 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 64) = *(_OWORD *)v12;
  }
  else
  {
    v14 = *v12;
    sub_10001BBBC(*v12, a2[9]);
    *(_QWORD *)(a1 + 64) = v14;
    *(_QWORD *)(a1 + 72) = v13;
  }
  v15 = a2 + 10;
  v16 = a2[11];
  if (v16 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 80) = *(_OWORD *)v15;
  }
  else
  {
    v17 = *v15;
    sub_10001BBBC(*v15, v16);
    *(_QWORD *)(a1 + 80) = v17;
    *(_QWORD *)(a1 + 88) = v16;
  }
  return a1;
}

uint64_t *assignWithCopy for AirPodsFinalizePairingCommandPayload(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;

  v4 = *a2;
  v5 = a2[1];
  sub_10001BBBC(*a2, v5);
  v6 = *a1;
  v7 = a1[1];
  *a1 = v4;
  a1[1] = v5;
  sub_10001BC14(v6, v7);
  v8 = a2[2];
  v9 = a2[3];
  sub_10001BBBC(v8, v9);
  v10 = a1[2];
  v11 = a1[3];
  a1[2] = v8;
  a1[3] = v9;
  sub_10001BC14(v10, v11);
  v12 = a2[4];
  v13 = a2[5];
  sub_10001BBBC(v12, v13);
  v14 = a1[4];
  v15 = a1[5];
  a1[4] = v12;
  a1[5] = v13;
  sub_10001BC14(v14, v15);
  v16 = a2[6];
  v17 = a2[7];
  sub_10001BBBC(v16, v17);
  v18 = a1[6];
  v19 = a1[7];
  a1[6] = v16;
  a1[7] = v17;
  sub_10001BC14(v18, v19);
  v20 = a2 + 8;
  v21 = a2[9];
  if ((unint64_t)a1[9] >> 60 == 15)
  {
    if (v21 >> 60 != 15)
    {
      v22 = *v20;
      sub_10001BBBC(*v20, a2[9]);
      a1[8] = v22;
      a1[9] = v21;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v21 >> 60 == 15)
  {
    sub_1000DC964((uint64_t)(a1 + 8));
LABEL_6:
    *((_OWORD *)a1 + 4) = *(_OWORD *)v20;
    goto LABEL_8;
  }
  v23 = *v20;
  sub_10001BBBC(*v20, a2[9]);
  v24 = a1[8];
  v25 = a1[9];
  a1[8] = v23;
  a1[9] = v21;
  sub_10001BC14(v24, v25);
LABEL_8:
  v26 = a2 + 10;
  v27 = a2[11];
  if ((unint64_t)a1[11] >> 60 != 15)
  {
    if (v27 >> 60 != 15)
    {
      v29 = *v26;
      sub_10001BBBC(*v26, v27);
      v30 = a1[10];
      v31 = a1[11];
      a1[10] = v29;
      a1[11] = v27;
      sub_10001BC14(v30, v31);
      return a1;
    }
    sub_1000DC964((uint64_t)(a1 + 10));
    goto LABEL_13;
  }
  if (v27 >> 60 == 15)
  {
LABEL_13:
    *((_OWORD *)a1 + 5) = *(_OWORD *)v26;
    return a1;
  }
  v28 = *v26;
  sub_10001BBBC(*v26, v27);
  a1[10] = v28;
  a1[11] = v27;
  return a1;
}

__n128 initializeWithTake for AirPodsFinalizePairingCommandPayload(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 48) = v4;
  return result;
}

uint64_t assignWithTake for AirPodsFinalizePairingCommandPayload(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _OWORD *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;

  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_10001BC14(v4, v5);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  sub_10001BC14(v6, v7);
  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  sub_10001BC14(v8, v9);
  v10 = *(_QWORD *)(a1 + 48);
  v11 = *(_QWORD *)(a1 + 56);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  sub_10001BC14(v10, v11);
  v12 = (_OWORD *)(a2 + 64);
  v13 = *(_QWORD *)(a1 + 72);
  if (v13 >> 60 == 15)
    goto LABEL_4;
  v14 = *(_QWORD *)(a2 + 72);
  if (v14 >> 60 == 15)
  {
    sub_1000DC964(a1 + 64);
LABEL_4:
    *(_OWORD *)(a1 + 64) = *v12;
    goto LABEL_6;
  }
  v15 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)v12;
  *(_QWORD *)(a1 + 72) = v14;
  sub_10001BC14(v15, v13);
LABEL_6:
  v16 = (_QWORD *)(a2 + 80);
  v17 = *(_QWORD *)(a1 + 88);
  if (v17 >> 60 != 15)
  {
    v18 = *(_QWORD *)(a2 + 88);
    if (v18 >> 60 != 15)
    {
      v19 = *(_QWORD *)(a1 + 80);
      *(_QWORD *)(a1 + 80) = *v16;
      *(_QWORD *)(a1 + 88) = v18;
      sub_10001BC14(v19, v17);
      return a1;
    }
    sub_1000DC964(a1 + 80);
  }
  *(_OWORD *)(a1 + 80) = *(_OWORD *)v16;
  return a1;
}

uint64_t getEnumTagSinglePayload for AirPodsFinalizePairingCommandPayload(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xD && *(_BYTE *)(a1 + 96))
    return (*(_DWORD *)a1 + 13);
  v3 = (((*(_QWORD *)(a1 + 8) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(_QWORD *)(a1 + 8) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for AirPodsFinalizePairingCommandPayload(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(_QWORD *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 13;
    if (a3 >= 0xD)
      *(_BYTE *)(result + 96) = 1;
  }
  else
  {
    if (a3 >= 0xD)
      *(_BYTE *)(result + 96) = 0;
    if (a2)
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AirPodsFinalizePairingCommandPayload()
{
  return &type metadata for AirPodsFinalizePairingCommandPayload;
}

uint64_t sub_1001F51A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_1000234D8(v0, qword_1010F2CC0);
  v1 = sub_10001A9E8(v0, (uint64_t)qword_1010F2CC0);
  if (qword_1010E9A90 != -1)
    swift_once(&qword_1010E9A90, sub_1001F9F98);
  v2 = sub_10001A9E8(v0, (uint64_t)qword_1011B6BC8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_1001F5230@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 24);
  *a2 = v2;
  return swift_retain(v2);
}

uint64_t sub_1001F524C()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_10001A9A8(&qword_1010EF3B8);
  sub_1000234D8(v0, qword_1011B6AA8);
  sub_10001A9E8(v0, (uint64_t)qword_1011B6AA8);
  v1 = sub_1000193A4(&qword_1010F2E28, &qword_1010EF3B8, (const char *)&protocol conformance descriptor for Expression<A>);
  return ExpressionType.init(_:)(0x6E65644972657375, 0xEE00726569666974, v0, v1);
}

uint64_t sub_1001F52E8()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_10001A9A8(&qword_1010EF3B8);
  sub_1000234D8(v0, qword_1011B6AC0);
  sub_10001A9E8(v0, (uint64_t)qword_1011B6AC0);
  v1 = sub_1000193A4(&qword_1010F2E28, &qword_1010EF3B8, (const char *)&protocol conformance descriptor for Expression<A>);
  return ExpressionType.init(_:)(0xD000000000000010, 0x8000000100EC28D0, v0, v1);
}

uint64_t sub_1001F537C()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_10001A9A8(&qword_1010EF430);
  sub_1000234D8(v0, qword_1011B6AD8);
  sub_10001A9E8(v0, (uint64_t)qword_1011B6AD8);
  v1 = sub_1000193A4(&qword_1010F2E18, &qword_1010EF430, (const char *)&protocol conformance descriptor for Expression<A>);
  return ExpressionType.init(_:)(0x7865646E69, 0xE500000000000000, v0, v1);
}

uint64_t sub_1001F5408()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_10001A9A8(&qword_1010EF3E8);
  sub_1000234D8(v0, qword_1011B6AF0);
  sub_10001A9E8(v0, (uint64_t)qword_1011B6AF0);
  v1 = sub_1000193A4(&qword_1010F2E20, &qword_1010EF3E8, (const char *)&protocol conformance descriptor for Expression<A>);
  return ExpressionType.init(_:)(0x65636E6575716573, 0xE800000000000000, v0, v1);
}

uint64_t sub_1001F5498()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_10001A9A8(&qword_1010EF408);
  sub_1000234D8(v0, qword_1011B6B08);
  sub_10001A9E8(v0, (uint64_t)qword_1011B6B08);
  v1 = sub_1000193A4(&qword_1010EF4E8, &qword_1010EF408, (const char *)&protocol conformance descriptor for Expression<A>);
  return ExpressionType.init(_:)(0xD000000000000016, 0x8000000100ECBA10, v0, v1);
}

uint64_t sub_1001F552C()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_10001A9A8(&qword_1010EF408);
  sub_1000234D8(v0, qword_1011B6B20);
  sub_10001A9E8(v0, (uint64_t)qword_1011B6B20);
  v1 = sub_1000193A4(&qword_1010EF4E8, &qword_1010EF408, (const char *)&protocol conformance descriptor for Expression<A>);
  return ExpressionType.init(_:)(0x7369747265766461, 0xED0000746E656D65, v0, v1);
}

uint64_t sub_1001F55C8()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_10001A9A8(&qword_1010EF408);
  sub_1000234D8(v0, qword_1011B6B38);
  sub_10001A9E8(v0, (uint64_t)qword_1011B6B38);
  v1 = sub_1000193A4(&qword_1010EF4E8, &qword_1010EF408, (const char *)&protocol conformance descriptor for Expression<A>);
  return ExpressionType.init(_:)(0x697463656E6E6F63, 0xED000079654B6E6FLL, v0, v1);
}

uint64_t sub_1001F5664()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_10001A9A8(&qword_1010F2E50);
  sub_1000234D8(v0, qword_1011B6B50);
  sub_10001A9E8(v0, (uint64_t)qword_1011B6B50);
  v1 = sub_1000193A4(&qword_1010F2E58, &qword_1010F2E50, (const char *)&protocol conformance descriptor for Expression<A>);
  return ExpressionType.init(_:)(1701667182, 0xE400000000000000, v0, v1);
}

uint64_t sub_1001F56EC()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_10001A9A8(&qword_1010EF4E0);
  sub_1000234D8(v0, qword_1011B6B68);
  sub_10001A9E8(v0, (uint64_t)qword_1011B6B68);
  v1 = sub_1000193A4(&qword_1010F2E60, &qword_1010EF4E0, (const char *)&protocol conformance descriptor for Expression<A>);
  return ExpressionType.init(_:)(0x6E656449656C6F72, 0xEE00726569666974, v0, v1);
}

uint64_t sub_1001F5788()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_10001A9A8(&qword_1010F2E40);
  sub_1000234D8(v0, qword_1011B6B80);
  sub_10001A9E8(v0, (uint64_t)qword_1011B6B80);
  v1 = sub_1000193A4(&qword_1010F2E48, &qword_1010F2E40, (const char *)&protocol conformance descriptor for Expression<A>);
  return ExpressionType.init(_:)(0x696A6F6D65, 0xE500000000000000, v0, v1);
}

uint64_t sub_1001F5814()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_10001A9A8(&qword_1010F2E50);
  sub_1000234D8(v0, qword_1011B6B98);
  sub_10001A9E8(v0, (uint64_t)qword_1011B6B98);
  v1 = sub_1000193A4(&qword_1010F2E58, &qword_1010F2E50, (const char *)&protocol conformance descriptor for Expression<A>);
  return ExpressionType.init(_:)(0x65566D6574737973, 0xED00006E6F697372, v0, v1);
}

uint64_t sub_1001F58B0()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_10001A9A8(&qword_1010F2E40);
  sub_1000234D8(v0, qword_1011B6BB0);
  sub_10001A9E8(v0, (uint64_t)qword_1011B6BB0);
  v1 = sub_1000193A4(&qword_1010F2E48, &qword_1010F2E40, (const char *)&protocol conformance descriptor for Expression<A>);
  return ExpressionType.init(_:)(0x754E6C6169726573, 0xEC0000007265626DLL, v0, v1);
}

uint64_t sub_1001F5948(char a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = sub_10001A9A8(&qword_1010FAAF0);
  v4 = swift_allocObject(v3, 20, 7);
  *(_DWORD *)(v4 + 16) = 0;
  *(_QWORD *)(v1 + 16) = v4;
  *(_QWORD *)(v1 + 24) = 0;
  *(_DWORD *)(v1 + 32) = 5;
  Table.init(_:database:)(1937335627, 0xE400000000000000, 0, 0);
  Table.init(_:database:)(0x656E774F7261654ELL, 0xED00007379654B72, 0, 0);
  Table.init(_:database:)(0x697463656E6E6F43, 0xEE007379654B6E6FLL, 0, 0);
  Table.init(_:database:)(0xD000000000000010, 0x8000000100ECBA50, 0, 0);
  *(_BYTE *)(v1 + 36) = a1;
  *(_BYTE *)(v1 + 37) = a1 ^ 1;
  if (qword_1010E9A28 != -1)
    swift_once(&qword_1010E9A28, sub_1001F51A0);
  v5 = type metadata accessor for Logger(0);
  v6 = sub_10001A9E8(v5, (uint64_t)qword_1010F2CC0);
  sub_1001F5AA0(v6);
  return v1;
}

uint64_t sub_1001F5AA0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  void (*v15)(char *, uint64_t, uint64_t);
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t);
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  void (*v33)(char *, uint64_t, uint64_t);
  char *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v2 = sub_10001A9A8(&qword_1010F46C0);
  __chkstk_darwin(v2);
  v36 = (char *)&v32 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for SystemInfo.DeviceLockState(0);
  v38 = *(_QWORD *)(v4 - 8);
  v5 = __chkstk_darwin(v4);
  v37 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v8 = (char *)&v32 - v7;
  v9 = type metadata accessor for Logger(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  v12 = __chkstk_darwin(v9);
  __chkstk_darwin(v12);
  v14 = (char *)&v32 - v13;
  v15 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v15((char *)&v32 - v13, a1, v9);
  v16 = v39;
  if (*(_BYTE *)(v39 + 37) == 1)
  {
    v32 = v11;
    v33 = v15;
    v34 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
    v35 = a1;
    static SystemInfo.lockState.getter(v39);
    v17 = v37;
    v18 = v38;
    (*(void (**)(char *, _QWORD, uint64_t))(v38 + 104))(v37, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v4);
    v19 = sub_100006204((unint64_t *)&unk_1010F4700, (uint64_t (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState, (uint64_t)&protocol conformance descriptor for SystemInfo.DeviceLockState);
    dispatch thunk of RawRepresentable.rawValue.getter(&v41, v4, v19);
    dispatch thunk of RawRepresentable.rawValue.getter(&v40, v4, v19);
    v21 = v40;
    v20 = v41;
    v22 = *(void (**)(char *, uint64_t))(v18 + 8);
    v22(v17, v4);
    v22(v8, v4);
    if (v20 == v21)
    {
      (*(void (**)(char *, uint64_t))(v10 + 8))(v14, v9);
      v23 = type metadata accessor for TaskPriority(0);
      v24 = (uint64_t)v36;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v36, 1, 1, v23);
      v25 = v34;
      v33(v34, v35, v9);
      v26 = *(unsigned __int8 *)(v10 + 80);
      v27 = (v26 + 32) & ~v26;
      v28 = (v32 + v27 + 7) & 0xFFFFFFFFFFFFFFF8;
      v29 = swift_allocObject(&unk_10105F540, v28 + 8, v26 | 7);
      *(_QWORD *)(v29 + 16) = 0;
      *(_QWORD *)(v29 + 24) = 0;
      (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(v29 + v27, v25, v9);
      *(_QWORD *)(v29 + v28) = v39;
      swift_retain();
      v30 = sub_100691AC0(v24, (uint64_t)&unk_1010F2E38, v29);
      return swift_release(v30);
    }
    v16 = v39;
  }
  sub_1001FA02C(v16, (uint64_t)v14, (uint64_t (*)(void))sub_100C64BB0);
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v14, v9);
}

uint64_t sub_1001F5D8C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  void (*v15)(char *, uint64_t, uint64_t);
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t);
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v31;
  void (*v32)(char *, uint64_t, uint64_t);
  char *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v2 = sub_10001A9A8(&qword_1010F46C0);
  __chkstk_darwin(v2);
  v35 = (char *)&v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for SystemInfo.DeviceLockState(0);
  v37 = *(_QWORD *)(v4 - 8);
  v5 = __chkstk_darwin(v4);
  v36 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v8 = (char *)&v31 - v7;
  v9 = type metadata accessor for Logger(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  v12 = __chkstk_darwin(v9);
  __chkstk_darwin(v12);
  v14 = (char *)&v31 - v13;
  v15 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v15((char *)&v31 - v13, a1, v9);
  v16 = v38;
  if (*(_BYTE *)(v38 + 41) == 1)
  {
    v31 = v11;
    v32 = v15;
    v33 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
    v34 = a1;
    static SystemInfo.lockState.getter(v38);
    v17 = v36;
    v18 = v37;
    (*(void (**)(char *, _QWORD, uint64_t))(v37 + 104))(v36, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v4);
    v19 = sub_100006204((unint64_t *)&unk_1010F4700, (uint64_t (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState, (uint64_t)&protocol conformance descriptor for SystemInfo.DeviceLockState);
    dispatch thunk of RawRepresentable.rawValue.getter(&v40, v4, v19);
    dispatch thunk of RawRepresentable.rawValue.getter(&v39, v4, v19);
    v21 = v39;
    v20 = v40;
    v22 = *(void (**)(char *, uint64_t))(v18 + 8);
    v22(v17, v4);
    v22(v8, v4);
    if (v20 == v21)
    {
      (*(void (**)(char *, uint64_t))(v10 + 8))(v14, v9);
      v23 = type metadata accessor for TaskPriority(0);
      v24 = (uint64_t)v35;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v35, 1, 1, v23);
      v25 = v33;
      v32(v33, v34, v9);
      v26 = *(unsigned __int8 *)(v10 + 80);
      v27 = (v26 + 32) & ~v26;
      v28 = (v31 + v27 + 7) & 0xFFFFFFFFFFFFFFF8;
      v29 = swift_allocObject(&unk_10105F590, v28 + 8, v26 | 7);
      *(_QWORD *)(v29 + 16) = 0;
      *(_QWORD *)(v29 + 24) = 0;
      (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(v29 + v27, v25, v9);
      *(_QWORD *)(v29 + v28) = v38;
      swift_retain();
      sub_100691AC0(v24, (uint64_t)&unk_1010F2E88, v29);
      return swift_release();
    }
    v16 = v38;
  }
  sub_1001FA02C(v16, (uint64_t)v14, (uint64_t (*)(void))sub_100C6467C);
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v14, v9);
}

uint64_t sub_1001F6078(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  void (*v17)(char *, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t);
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v31;
  void (*v32)(char *, uint64_t, uint64_t);
  char *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v2 = sub_10001A9A8(&qword_1010F46C0);
  __chkstk_darwin(v2);
  v35 = (char *)&v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for SystemInfo.DeviceLockState(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v31 - v9;
  v11 = type metadata accessor for Logger(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  v14 = __chkstk_darwin(v11);
  v33 = (char *)&v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v16 = (char *)&v31 - v15;
  v17 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v34 = a1;
  v32 = v17;
  v18 = ((uint64_t (*)(char *, uint64_t, uint64_t))v17)((char *)&v31 - v15, a1, v11);
  static SystemInfo.lockState.getter(v18);
  (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v8, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v4);
  v19 = sub_100006204((unint64_t *)&unk_1010F4700, (uint64_t (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState, (uint64_t)&protocol conformance descriptor for SystemInfo.DeviceLockState);
  dispatch thunk of RawRepresentable.rawValue.getter(&v38, v4, v19);
  dispatch thunk of RawRepresentable.rawValue.getter(&v37, v4, v19);
  v21 = v37;
  v20 = v38;
  v22 = *(void (**)(char *, uint64_t))(v5 + 8);
  v22(v8, v4);
  v22(v10, v4);
  if (v20 == v21)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v16, v11);
    v23 = type metadata accessor for TaskPriority(0);
    v24 = (uint64_t)v35;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v35, 1, 1, v23);
    v25 = v33;
    v32(v33, v34, v11);
    v26 = *(unsigned __int8 *)(v12 + 80);
    v27 = (v26 + 32) & ~v26;
    v28 = (v13 + v27 + 7) & 0xFFFFFFFFFFFFFFF8;
    v29 = swift_allocObject(&unk_10105F568, v28 + 8, v26 | 7);
    *(_QWORD *)(v29 + 16) = 0;
    *(_QWORD *)(v29 + 24) = 0;
    (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(v29 + v27, v25, v11);
    *(_QWORD *)(v29 + v28) = v36;
    swift_retain();
    sub_100691AC0(v24, (uint64_t)&unk_1010F2E70, v29);
    return swift_release();
  }
  else
  {
    sub_1001FA02C(v36, (uint64_t)v16, (uint64_t (*)(void))sub_100C65054);
    return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v16, v11);
  }
}

uint64_t sub_1001F633C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  void (*v25)(char *, uint64_t);
  void *v26;
  NSURL *v27;
  void *v28;
  void *v29;
  unsigned int v30;
  id v31;
  char *v32;
  char *v33;
  id v34;
  NSURL *v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  void *v40;
  unsigned int v41;
  id v42;
  id v43;
  NSURL *v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  void *v49;
  id v50;
  unsigned int v51;
  id v52;
  id v53;
  id v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint8_t *v58;
  void *v59;
  uint64_t v60;
  char *v61;
  char *v62;
  id v63;
  uint64_t v64;
  id v65;

  v3 = type metadata accessor for URL(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = (char *)&v57 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v5);
  v10 = (char *)&v57 - v9;
  v11 = __chkstk_darwin(v8);
  v13 = (char *)&v57 - v12;
  __chkstk_darwin(v11);
  v15 = (char *)&v57 - v14;
  result = *(_QWORD *)(a1 + 24);
  if (result)
  {
    *(_QWORD *)(a1 + 24) = 0;
    result = swift_release();
    if ((*(_BYTE *)(a1 + 36) & 1) == 0)
    {
      v60 = v1;
      v61 = v13;
      v62 = v10;
      sub_1001F67A0();
      v63 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
      if (qword_1010E9A28 != -1)
        swift_once(&qword_1010E9A28, sub_1001F51A0);
      v17 = type metadata accessor for Logger(0);
      sub_10001A9E8(v17, (uint64_t)qword_1010F2CC0);
      v18 = (*(uint64_t (**)(char *, char *, uint64_t))(v4 + 16))(v7, v15, v3);
      v19 = Logger.logObject.getter(v18);
      v20 = static os_log_type_t.default.getter(v19);
      if (os_log_type_enabled(v19, v20))
      {
        v21 = (uint8_t *)swift_slowAlloc(12, -1);
        v59 = (void *)swift_slowAlloc(32, -1);
        v65 = v59;
        *(_DWORD *)v21 = 136446210;
        v58 = v21 + 4;
        v22 = sub_100006204((unint64_t *)&qword_101108070, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
        v23 = dispatch thunk of CustomStringConvertible.description.getter(v3, v22);
        v64 = sub_100016940(v23, v24, (uint64_t *)&v65);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v64, &v65, v58, v21 + 12);
        swift_bridgeObjectRelease();
        v25 = *(void (**)(char *, uint64_t))(v4 + 8);
        v25(v7, v3);
        _os_log_impl((void *)&_mh_execute_header, v19, v20, "Purging database: %{public}s", v21, 0xCu);
        v26 = v59;
        swift_arrayDestroy(v59, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v26, -1, -1);
        swift_slowDealloc(v21, -1, -1);
      }
      else
      {
        v25 = *(void (**)(char *, uint64_t))(v4 + 8);
        v25(v7, v3);
      }

      URL._bridgeToObjectiveC()(v27);
      v29 = v28;
      v65 = 0;
      v30 = objc_msgSend(v63, "removeItemAtURL:error:", v28, &v65);

      v31 = v65;
      v33 = v61;
      v32 = v62;
      if (v30)
      {
        v34 = v65;
      }
      else
      {
        v36 = v65;
        v37 = _convertNSErrorToError(_:)(v31);

        swift_willThrow(v38);
        swift_errorRelease(v37);
      }
      URL._bridgeToObjectiveC()(v35);
      v40 = v39;
      v65 = 0;
      v41 = objc_msgSend(v63, "removeItemAtURL:error:", v39, &v65);

      v42 = v65;
      if (v41)
      {
        v43 = v65;
      }
      else
      {
        v45 = v65;
        v46 = _convertNSErrorToError(_:)(v42);

        swift_willThrow(v47);
        swift_errorRelease(v46);
      }
      URL._bridgeToObjectiveC()(v44);
      v49 = v48;
      v65 = 0;
      v50 = v63;
      v51 = objc_msgSend(v63, "removeItemAtURL:error:", v48, &v65);

      v52 = v65;
      if (v51)
      {
        v53 = v65;

      }
      else
      {
        v54 = v65;
        v55 = _convertNSErrorToError(_:)(v52);

        swift_willThrow(v56);
        swift_errorRelease(v55);
      }
      v25(v32, v3);
      v25(v33, v3);
      return ((uint64_t (*)(char *, uint64_t))v25)(v15, v3);
    }
  }
  return result;
}

uint64_t sub_1001F67A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  void (*v4)(char *, uint64_t);
  uint64_t v6;

  v0 = type metadata accessor for URL(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for BeaconStore(0);
  sub_1007EC9B8((uint64_t)v3);
  URL.appendingPathComponent(_:isDirectory:)(0xD000000000000012, 0x8000000100ECB9B0, 0);
  v4 = *(void (**)(char *, uint64_t))(v1 + 8);
  v4(v3, v0);
  sub_1007EC9B8((uint64_t)v3);
  URL.appendingPathComponent(_:isDirectory:)(0xD000000000000016, 0x8000000100ECB9D0, 0);
  v4(v3, v0);
  sub_1007EC9B8((uint64_t)v3);
  URL.appendingPathComponent(_:isDirectory:)(0xD000000000000016, 0x8000000100ECB9F0, 0);
  return ((uint64_t (*)(char *, uint64_t))v4)(v3, v0);
}

void (*sub_1001F68EC(uint64_t a1, uint64_t a2))(uint64_t, _QWORD *)
{
  uint64_t v2;
  uint64_t v5;
  void *v6;
  unsigned int v7;
  uint64_t v8;
  void (*result)(uint64_t, _QWORD *);
  uint64_t v10;

  if (qword_1010E9A28 != -1)
    swift_once(&qword_1010E9A28, sub_1001F51A0);
  v5 = type metadata accessor for Logger(0);
  v6 = (void *)sub_10001A9E8(v5, (uint64_t)qword_1010F2CC0);
  v7 = *(unsigned __int8 *)(a1 + 36);
  v8 = sub_100006204(&qword_1010F2E10, type metadata accessor for ItemSharingKeyDatabase, (uint64_t)&unk_100E2DE10);
  result = static Database.establishConnection(logger:temporary:)(v6, v7, a2, v8);
  if (!v2)
  {
    v10 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = result;
    return (void (*)(uint64_t, _QWORD *))swift_release(v10);
  }
  return result;
}

void sub_1001F69B4(int a1, int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  Swift::String v18;
  uint64_t v19;
  Swift::String v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)();
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  int v51;
  uint64_t v52;

  v4 = v3;
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v49 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(_BYTE *)(v3 + 36) & 1) == 0)
  {
    v49 = a3;
    if (qword_1010E9A28 != -1)
      swift_once(&qword_1010E9A28, sub_1001F51A0);
    v13 = type metadata accessor for Logger(0);
    v14 = sub_10001A9E8(v13, (uint64_t)qword_1010F2CC0);
    v15 = Logger.logObject.getter(v14);
    v16 = static os_log_type_t.default.getter(v15);
    if (os_log_type_enabled(v15, v16))
    {
      v17 = swift_slowAlloc(14, -1);
      *(_DWORD *)v17 = 67109376;
      v51 = a1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, &v52, v17 + 4, v17 + 8);
      *(_WORD *)(v17 + 8) = 1024;
      v50 = a2;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v50, &v51, v17 + 10, v17 + 14);
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Migrate schema %d -> %d", (uint8_t *)v17, 0xEu);
      swift_slowDealloc(v17, -1, -1);
    }

    a3 = v49;
  }
  switch(a2)
  {
    case 1:
      v18._countAndFlagsBits = 0xD00000000000001FLL;
      v18._object = (void *)0x8000000100ECBA70;
      Connection.execute(_:)(v18);
      if (!v19)
      {
        v20._object = (void *)0x8000000100ECBA90;
        v20._countAndFlagsBits = 0xD000000000000018;
        Connection.execute(_:)(v20);
        if (!v22)
        {
          v23 = __chkstk_darwin(v21);
          *(&v49 - 2) = a3;
          *(&v49 - 1) = v4;
          v24 = UUID.init()(v23);
          v25 = UUID.uuidString.getter(v24);
          v27 = v26;
          (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
          v28 = sub_1001FBDD4;
          v29 = v25;
          v30 = v27;
          v31 = &v49 - 4;
          goto LABEL_17;
        }
      }
      return;
    case 2:
      v35 = __chkstk_darwin(v10);
      v36 = &v49 - 4;
      *(&v49 - 2) = a3;
      *(&v49 - 1) = v4;
      v37 = UUID.init()(v35);
      v38 = UUID.uuidString.getter(v37);
      v27 = v39;
      (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
      v28 = sub_1001FBDEC;
      goto LABEL_16;
    case 3:
      v40 = __chkstk_darwin(v10);
      v36 = &v49 - 4;
      *(&v49 - 2) = a3;
      *(&v49 - 1) = v4;
      v41 = UUID.init()(v40);
      v38 = UUID.uuidString.getter(v41);
      v27 = v42;
      (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
      v28 = sub_1001FBE04;
      goto LABEL_16;
    case 4:
      v43 = __chkstk_darwin(v10);
      v36 = &v49 - 4;
      *(&v49 - 2) = a3;
      *(&v49 - 1) = v4;
      v44 = UUID.init()(v43);
      v38 = UUID.uuidString.getter(v44);
      v27 = v45;
      (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
      v28 = sub_1001FBE1C;
      goto LABEL_16;
    case 5:
      v46 = __chkstk_darwin(v10);
      v36 = &v49 - 4;
      *(&v49 - 2) = a3;
      *(&v49 - 1) = v4;
      v47 = UUID.init()(v46);
      v38 = UUID.uuidString.getter(v47);
      v27 = v48;
      (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
      v28 = sub_1001FBE34;
LABEL_16:
      v29 = v38;
      v30 = v27;
      v31 = v36;
LABEL_17:
      Connection.savepoint(_:block:)(v29, v30, v28, v31);
      swift_bridgeObjectRelease(v27);
      break;
    default:
      v32 = sub_10012C434();
      v33 = swift_allocError(&type metadata for DatabaseError, v32, 0, 0);
      *(_DWORD *)v34 = a2;
      *(_BYTE *)(v34 + 4) = 0;
      swift_willThrow(v33);
      break;
  }
}

uint64_t sub_1001F6DEC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  void (*v12)(_QWORD *, uint64_t, uint64_t);
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v1 = Table.create(temporary:ifNotExists:withoutRowid:block:)(0, 0, 0, sub_1001F7120, 0);
  v3 = v2;
  v4 = Connection.run(_:_:)(v1, v2, _swiftEmptyArrayStorage);
  if (v0)
    return swift_bridgeObjectRelease(v3);
  v5 = v4;
  swift_bridgeObjectRelease(v3);
  swift_release(v5);
  v6 = sub_10001A9A8(&qword_1010EF3C8);
  v7 = swift_allocObject(v6, 192, 7);
  *(_OWORD *)(v7 + 16) = xmmword_100E26E00;
  if (qword_1010E9A30 != -1)
    swift_once(&qword_1010E9A30, sub_1001F524C);
  v8 = sub_10001A9A8(&qword_1010EF3B8);
  v9 = sub_10001A9E8(v8, (uint64_t)qword_1011B6AA8);
  *(_QWORD *)(v7 + 56) = v8;
  v10 = sub_1000193A4(&qword_1010EF3C0, &qword_1010EF3B8, (const char *)&protocol conformance descriptor for Expression<A>);
  *(_QWORD *)(v7 + 64) = v10;
  v11 = sub_100018F08((_QWORD *)(v7 + 32));
  v12 = *(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
  v12(v11, v9, v8);
  if (qword_1010E9A38 != -1)
    swift_once(&qword_1010E9A38, sub_1001F52E8);
  v13 = sub_10001A9E8(v8, (uint64_t)qword_1011B6AC0);
  *(_QWORD *)(v7 + 96) = v8;
  *(_QWORD *)(v7 + 104) = v10;
  v14 = sub_100018F08((_QWORD *)(v7 + 72));
  v12(v14, v13, v8);
  if (qword_1010E9A48 != -1)
    swift_once(&qword_1010E9A48, sub_1001F5408);
  v15 = sub_10001A9A8(&qword_1010EF3E8);
  v16 = sub_10001A9E8(v15, (uint64_t)qword_1011B6AF0);
  *(_QWORD *)(v7 + 136) = v15;
  *(_QWORD *)(v7 + 144) = sub_1000193A4(&qword_1010EF3F0, &qword_1010EF3E8, (const char *)&protocol conformance descriptor for Expression<A>);
  v17 = sub_100018F08((_QWORD *)(v7 + 112));
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v17, v16, v15);
  if (qword_1010E9A40 != -1)
    swift_once(&qword_1010E9A40, sub_1001F537C);
  v18 = sub_10001A9A8(&qword_1010EF430);
  v19 = sub_10001A9E8(v18, (uint64_t)qword_1011B6AD8);
  *(_QWORD *)(v7 + 176) = v18;
  *(_QWORD *)(v7 + 184) = sub_1000193A4(&qword_1010F2E98, &qword_1010EF430, (const char *)&protocol conformance descriptor for Expression<A>);
  v20 = sub_100018F08((_QWORD *)(v7 + 152));
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v20, v19, v18);
  v21 = Table.createIndex(_:unique:ifNotExists:)(v7, 1, 0);
  v23 = v22;
  swift_bridgeObjectRelease(v7);
  v24 = Connection.run(_:_:)(v21, v23, _swiftEmptyArrayStorage);
  swift_bridgeObjectRelease(v23);
  return swift_release(v24);
}

uint64_t sub_1001F7120(uint64_t a1)
{
  return sub_1001F7EE0(a1, &qword_1010E9A58, (uint64_t)qword_1011B6B20, 28, (uint64_t)sub_1001F552C);
}

uint64_t sub_1001F7140()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  void (*v12)(_QWORD *, uint64_t, uint64_t);
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v1 = Table.create(temporary:ifNotExists:withoutRowid:block:)(0, 0, 0, sub_1001F735C, 0);
  v3 = v2;
  v4 = Connection.run(_:_:)(v1, v2, _swiftEmptyArrayStorage);
  if (v0)
    return swift_bridgeObjectRelease(v3);
  v5 = v4;
  swift_bridgeObjectRelease(v3);
  swift_release(v5);
  v6 = sub_10001A9A8(&qword_1010EF3C8);
  v7 = swift_allocObject(v6, 112, 7);
  *(_OWORD *)(v7 + 16) = xmmword_100E22B10;
  if (qword_1010E9A30 != -1)
    swift_once(&qword_1010E9A30, sub_1001F524C);
  v8 = sub_10001A9A8(&qword_1010EF3B8);
  v9 = sub_10001A9E8(v8, (uint64_t)qword_1011B6AA8);
  *(_QWORD *)(v7 + 56) = v8;
  v10 = sub_1000193A4(&qword_1010EF3C0, &qword_1010EF3B8, (const char *)&protocol conformance descriptor for Expression<A>);
  *(_QWORD *)(v7 + 64) = v10;
  v11 = sub_100018F08((_QWORD *)(v7 + 32));
  v12 = *(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16);
  v12(v11, v9, v8);
  if (qword_1010E9A38 != -1)
    swift_once(&qword_1010E9A38, sub_1001F52E8);
  v13 = sub_10001A9E8(v8, (uint64_t)qword_1011B6AC0);
  *(_QWORD *)(v7 + 96) = v8;
  *(_QWORD *)(v7 + 104) = v10;
  v14 = sub_100018F08((_QWORD *)(v7 + 72));
  v12(v14, v13, v8);
  v15 = Table.createIndex(_:unique:ifNotExists:)(v7, 1, 0);
  v17 = v16;
  swift_bridgeObjectRelease(v7);
  v18 = Connection.run(_:_:)(v15, v17, _swiftEmptyArrayStorage);
  swift_bridgeObjectRelease(v17);
  return swift_release(v18);
}

uint64_t sub_1001F735C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, uint64_t, uint64_t, uint64_t);
  void (*v15)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  char *v30;

  v0 = sub_10001A9A8(&qword_1010F2EC8);
  __chkstk_darwin(v0);
  v30 = (char *)&v29 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = sub_10001A9A8(&qword_1010F2ED0);
  __chkstk_darwin(v2);
  v4 = (char *)&v29 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10001A9A8(&qword_1010F2EB8);
  __chkstk_darwin(v5);
  v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A9A8(&qword_1010F2EC0);
  __chkstk_darwin(v8);
  v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1010E9A30 != -1)
    swift_once(&qword_1010E9A30, sub_1001F524C);
  v11 = sub_10001A9A8(&qword_1010EF3B8);
  v12 = sub_10001A9E8(v11, (uint64_t)qword_1011B6AA8);
  v13 = sub_10001A9A8(&qword_1010EF358);
  v14 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56);
  v14(v10, 1, 1, v13);
  v15 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56);
  v15(v7, 1, 1, v11);
  v16 = type metadata accessor for UUID(0);
  TableBuilder.column<A>(_:unique:check:defaultValue:)(v12, 0, v10, v7, v16, &protocol witness table for UUID);
  sub_100004048((uint64_t)v7, &qword_1010F2EB8);
  sub_100004048((uint64_t)v10, &qword_1010F2EC0);
  if (qword_1010E9A38 != -1)
    swift_once(&qword_1010E9A38, sub_1001F52E8);
  v17 = sub_10001A9E8(v11, (uint64_t)qword_1011B6AC0);
  v14(v10, 1, 1, v13);
  v15(v7, 1, 1, v11);
  TableBuilder.column<A>(_:unique:check:defaultValue:)(v17, 0, v10, v7, v16, &protocol witness table for UUID);
  sub_100004048((uint64_t)v7, &qword_1010F2EB8);
  sub_100004048((uint64_t)v10, &qword_1010F2EC0);
  if (qword_1010E9A68 != -1)
    swift_once(&qword_1010E9A68, sub_1001F5664);
  v18 = sub_10001A9A8(&qword_1010F2E50);
  v19 = sub_10001A9E8(v18, (uint64_t)qword_1011B6B50);
  v14(v10, 1, 1, v13);
  v20 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56);
  v20(v4, 1, 1, v18);
  TableBuilder.column<A>(_:unique:check:defaultValue:)(v19, 0, v10, v4, &type metadata for String, &protocol witness table for String);
  sub_100004048((uint64_t)v4, &qword_1010F2ED0);
  sub_100004048((uint64_t)v10, &qword_1010F2EC0);
  if (qword_1010E9A70 != -1)
    swift_once(&qword_1010E9A70, sub_1001F56EC);
  v21 = sub_10001A9A8(&qword_1010EF4E0);
  v22 = sub_10001A9E8(v21, (uint64_t)qword_1011B6B68);
  v14(v10, 1, 1, v13);
  v23 = (uint64_t)v30;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v30, 1, 1, v21);
  TableBuilder.column<A>(_:unique:check:defaultValue:)(v22, 0, v10, v23, &type metadata for Int, &protocol witness table for Int);
  sub_100004048(v23, &qword_1010F2EC8);
  sub_100004048((uint64_t)v10, &qword_1010F2EC0);
  if (qword_1010E9A78 != -1)
    swift_once(&qword_1010E9A78, sub_1001F5788);
  v24 = sub_10001A9A8(&qword_1010F2E40);
  v25 = sub_10001A9E8(v24, (uint64_t)qword_1011B6B80);
  v14(v10, 1, 1, v13);
  v20(v4, 1, 1, v18);
  TableBuilder.column<A>(_:unique:check:defaultValue:)(v25, 0, v10, v4, &type metadata for String, &protocol witness table for String);
  sub_100004048((uint64_t)v4, &qword_1010F2ED0);
  sub_100004048((uint64_t)v10, &qword_1010F2EC0);
  if (qword_1010E9A80 != -1)
    swift_once(&qword_1010E9A80, sub_1001F5814);
  v26 = sub_10001A9E8(v18, (uint64_t)qword_1011B6B98);
  v14(v10, 1, 1, v13);
  v20(v4, 1, 1, v18);
  TableBuilder.column<A>(_:unique:check:defaultValue:)(v26, 0, v10, v4, &type metadata for String, &protocol witness table for String);
  sub_100004048((uint64_t)v4, &qword_1010F2ED0);
  sub_100004048((uint64_t)v10, &qword_1010F2EC0);
  if (qword_1010E9A88 != -1)
    swift_once(&qword_1010E9A88, sub_1001F58B0);
  v27 = sub_10001A9E8(v24, (uint64_t)qword_1011B6BB0);
  v14(v10, 1, 1, v13);
  v20(v4, 1, 1, v18);
  TableBuilder.column<A>(_:unique:check:defaultValue:)(v27, 0, v10, v4, &type metadata for String, &protocol witness table for String);
  sub_100004048((uint64_t)v4, &qword_1010F2ED0);
  return sub_100004048((uint64_t)v10, &qword_1010F2EC0);
}

uint64_t sub_1001F7984()
{
  uint64_t v0;
  Swift::String v1;
  uint64_t v2;
  uint64_t v3;
  Swift::String v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  void (*v15)(_QWORD *, uint64_t, uint64_t);
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  void (*v25)(_QWORD *, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(_QWORD *, uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  type metadata accessor for Table(0);
  v1 = SchemaType.drop(ifExists:)(0);
  v2 = Connection.run(_:_:)(v1._countAndFlagsBits, v1._object, _swiftEmptyArrayStorage);
  if (v0)
    return swift_bridgeObjectRelease(v1._object);
  v3 = v2;
  swift_bridgeObjectRelease(v1._object);
  swift_release(v3);
  v4 = SchemaType.drop(ifExists:)(0);
  v5 = Connection.run(_:_:)(v4._countAndFlagsBits, v4._object, _swiftEmptyArrayStorage);
  swift_bridgeObjectRelease(v4._object);
  swift_release(v5);
  v6 = Table.create(temporary:ifNotExists:withoutRowid:block:)(0, 0, 0, sub_1001F7EC0, 0);
  v8 = v7;
  v9 = Connection.run(_:_:)(v6, v7, _swiftEmptyArrayStorage);
  swift_bridgeObjectRelease(v8);
  swift_release(v9);
  v49 = sub_10001A9A8(&qword_1010EF3C8);
  v10 = swift_allocObject(v49, 192, 7);
  *(_OWORD *)(v10 + 16) = xmmword_100E26E00;
  if (qword_1010E9A30 != -1)
    swift_once(&qword_1010E9A30, sub_1001F524C);
  v11 = sub_10001A9A8(&qword_1010EF3B8);
  v12 = sub_10001A9E8(v11, (uint64_t)qword_1011B6AA8);
  *(_QWORD *)(v10 + 56) = v11;
  v13 = sub_1000193A4(&qword_1010EF3C0, &qword_1010EF3B8, (const char *)&protocol conformance descriptor for Expression<A>);
  *(_QWORD *)(v10 + 64) = v13;
  v14 = sub_100018F08((_QWORD *)(v10 + 32));
  v15 = *(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
  v47 = v12;
  v15(v14, v12, v11);
  if (qword_1010E9A38 != -1)
    swift_once(&qword_1010E9A38, sub_1001F52E8);
  v16 = sub_10001A9E8(v11, (uint64_t)qword_1011B6AC0);
  *(_QWORD *)(v10 + 96) = v11;
  *(_QWORD *)(v10 + 104) = v13;
  v45 = v13;
  v17 = sub_100018F08((_QWORD *)(v10 + 72));
  v44 = v16;
  v48 = v11;
  v46 = v15;
  v15(v17, v16, v11);
  if (qword_1010E9A48 != -1)
    swift_once(&qword_1010E9A48, sub_1001F5408);
  v18 = sub_10001A9A8(&qword_1010EF3E8);
  v19 = sub_10001A9E8(v18, (uint64_t)qword_1011B6AF0);
  *(_QWORD *)(v10 + 136) = v18;
  *(_QWORD *)(v10 + 144) = sub_1000193A4(&qword_1010EF3F0, &qword_1010EF3E8, (const char *)&protocol conformance descriptor for Expression<A>);
  v20 = sub_100018F08((_QWORD *)(v10 + 112));
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v20, v19, v18);
  if (qword_1010E9A40 != -1)
    swift_once(&qword_1010E9A40, sub_1001F537C);
  v21 = sub_10001A9A8(&qword_1010EF430);
  v22 = sub_10001A9E8(v21, (uint64_t)qword_1011B6AD8);
  *(_QWORD *)(v10 + 176) = v21;
  v23 = sub_1000193A4(&qword_1010F2E98, &qword_1010EF430, (const char *)&protocol conformance descriptor for Expression<A>);
  *(_QWORD *)(v10 + 184) = v23;
  v24 = sub_100018F08((_QWORD *)(v10 + 152));
  v25 = *(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 16);
  v43 = v22;
  v25(v24, v22, v21);
  v26 = Table.createIndex(_:unique:ifNotExists:)(v10, 1, 0);
  v28 = v27;
  swift_bridgeObjectRelease(v10);
  v29 = Connection.run(_:_:)(v26, v28, _swiftEmptyArrayStorage);
  swift_bridgeObjectRelease(v28);
  swift_release(v29);
  v30 = Table.create(temporary:ifNotExists:withoutRowid:block:)(0, 0, 0, sub_1001F8564, 0);
  v32 = v31;
  v33 = Connection.run(_:_:)(v30, v31, _swiftEmptyArrayStorage);
  swift_bridgeObjectRelease(v32);
  swift_release(v33);
  v34 = swift_allocObject(v49, 152, 7);
  *(_OWORD *)(v34 + 16) = xmmword_100E221E0;
  *(_QWORD *)(v34 + 56) = v48;
  *(_QWORD *)(v34 + 64) = v45;
  v35 = sub_100018F08((_QWORD *)(v34 + 32));
  v46(v35, v47, v48);
  *(_QWORD *)(v34 + 96) = v48;
  *(_QWORD *)(v34 + 104) = v45;
  v36 = sub_100018F08((_QWORD *)(v34 + 72));
  v46(v36, v44, v48);
  *(_QWORD *)(v34 + 136) = v21;
  *(_QWORD *)(v34 + 144) = v23;
  v37 = sub_100018F08((_QWORD *)(v34 + 112));
  v25(v37, v43, v21);
  v38 = Table.createIndex(_:unique:ifNotExists:)(v34, 1, 0);
  v40 = v39;
  swift_bridgeObjectRelease(v34);
  v41 = Connection.run(_:_:)(v38, v40, _swiftEmptyArrayStorage);
  swift_bridgeObjectRelease(v40);
  return swift_release(v41);
}

uint64_t sub_1001F7EC0(uint64_t a1)
{
  return sub_1001F7EE0(a1, &qword_1010E9A50, (uint64_t)qword_1011B6B08, 6, (uint64_t)sub_1001F5498);
}

uint64_t sub_1001F7EE0(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, uint64_t, uint64_t, uint64_t);
  void (*v27)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  void (*v42)(char *, uint64_t);
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  __int16 v56;
  uint64_t v57;

  v44 = a5;
  v52 = a4;
  v48 = a2;
  v49 = a3;
  v55 = a1;
  v5 = sub_10001A9A8(&qword_1010EF4E0);
  v53 = *(_QWORD *)(v5 - 8);
  v54 = v5;
  __chkstk_darwin(v5);
  v51 = (char *)&v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10001A9A8(&qword_1010EF358);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10001A9A8(&qword_1010F2EA0);
  __chkstk_darwin(v11);
  v47 = (char *)&v44 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_10001A9A8(&qword_1010F2EA8);
  __chkstk_darwin(v13);
  v46 = (char *)&v44 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_10001A9A8(&qword_1010F2EB0);
  __chkstk_darwin(v15);
  v17 = (char *)&v44 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_10001A9A8(&qword_1010F2EB8);
  __chkstk_darwin(v18);
  v20 = (char *)&v44 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_10001A9A8(&qword_1010F2EC0);
  __chkstk_darwin(v21);
  v23 = (char *)&v44 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1010E9A30 != -1)
    swift_once(&qword_1010E9A30, sub_1001F524C);
  v24 = sub_10001A9A8(&qword_1010EF3B8);
  v25 = sub_10001A9E8(v24, (uint64_t)qword_1011B6AA8);
  v50 = v8;
  v26 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56);
  v26(v23, 1, 1, v7);
  v27 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56);
  v27(v20, 1, 1, v24);
  v28 = type metadata accessor for UUID(0);
  TableBuilder.column<A>(_:unique:check:defaultValue:)(v25, 0, v23, v20, v28, &protocol witness table for UUID);
  sub_100004048((uint64_t)v20, &qword_1010F2EB8);
  sub_100004048((uint64_t)v23, &qword_1010F2EC0);
  if (qword_1010E9A38 != -1)
    swift_once(&qword_1010E9A38, sub_1001F52E8);
  v29 = sub_10001A9E8(v24, (uint64_t)qword_1011B6AC0);
  v26(v23, 1, 1, v7);
  v27(v20, 1, 1, v24);
  TableBuilder.column<A>(_:unique:check:defaultValue:)(v29, 0, v23, v20, v28, &protocol witness table for UUID);
  sub_100004048((uint64_t)v20, &qword_1010F2EB8);
  sub_100004048((uint64_t)v23, &qword_1010F2EC0);
  if (qword_1010E9A48 != -1)
    swift_once(&qword_1010E9A48, sub_1001F5408);
  v30 = sub_10001A9A8(&qword_1010EF3E8);
  v31 = sub_10001A9E8(v30, (uint64_t)qword_1011B6AF0);
  v26(v23, 1, 1, v7);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(v17, 1, 1, v30);
  v32 = sub_10012C49C();
  v45 = v31;
  TableBuilder.column<A>(_:unique:check:defaultValue:)(v31, 0, v23, v17, &type metadata for UInt8, v32);
  sub_100004048((uint64_t)v17, &qword_1010F2EB0);
  sub_100004048((uint64_t)v23, &qword_1010F2EC0);
  if (qword_1010E9A40 != -1)
    swift_once(&qword_1010E9A40, sub_1001F537C);
  v33 = sub_10001A9A8(&qword_1010EF430);
  v34 = sub_10001A9E8(v33, (uint64_t)qword_1011B6AD8);
  v26(v23, 1, 1, v7);
  v35 = (uint64_t)v46;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 56))(v46, 1, 1, v33);
  v36 = sub_10012C5BC();
  TableBuilder.column<A>(_:unique:check:defaultValue:)(v34, 0, v23, v35, &type metadata for UInt64, v36);
  sub_100004048(v35, &qword_1010F2EA8);
  sub_100004048((uint64_t)v23, &qword_1010F2EC0);
  if (*v48 != -1)
    swift_once(v48, v44);
  v37 = sub_10001A9A8(&qword_1010EF408);
  v38 = sub_10001A9E8(v37, v49);
  v26(v23, 1, 1, v7);
  v39 = (uint64_t)v47;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 56))(v47, 1, 1, v37);
  TableBuilder.column<A>(_:unique:check:defaultValue:)(v38, 0, v23, v39, &type metadata for Data, &protocol witness table for Data);
  sub_100004048(v39, &qword_1010F2EA0);
  sub_100004048((uint64_t)v23, &qword_1010F2EC0);
  v40 = sub_1000193A4(&qword_1010EF4E8, &qword_1010EF408, (const char *)&protocol conformance descriptor for Expression<A>);
  v41 = v51;
  ExpressionType<>.length.getter(v37, v40);
  v57 = v52;
  == infix<A>(_:_:)(v41, &v57, &type metadata for Int, &protocol witness table for Int, &protocol witness table for Int64);
  (*(void (**)(char *, uint64_t))(v53 + 8))(v41, v54);
  TableBuilder.check(_:)(v10);
  v42 = *(void (**)(char *, uint64_t))(v50 + 8);
  v42(v10, v7);
  v56 = 512;
  ~= infix<A>(_:_:)(&v56, v45, &type metadata for UInt8, &protocol witness table for UInt8, v32, &protocol witness table for Int64, &protocol witness table for Int64);
  TableBuilder.check(_:)(v10);
  return ((uint64_t (*)(char *, uint64_t))v42)(v10, v7);
}

uint64_t sub_1001F8564()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t, uint64_t, uint64_t);
  void (*v19)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v0 = sub_10001A9A8(&qword_1010EF4E0);
  v37 = *(_QWORD *)(v0 - 8);
  v38 = v0;
  __chkstk_darwin(v0);
  v36 = (char *)&v32 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = sub_10001A9A8(&qword_1010EF358);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v34 = (char *)&v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10001A9A8(&qword_1010F2EA0);
  __chkstk_darwin(v5);
  v33 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10001A9A8(&qword_1010F2EA8);
  __chkstk_darwin(v7);
  v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10001A9A8(&qword_1010F2EB8);
  __chkstk_darwin(v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_10001A9A8(&qword_1010F2EC0);
  __chkstk_darwin(v13);
  v15 = (char *)&v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1010E9A30 != -1)
    swift_once(&qword_1010E9A30, sub_1001F524C);
  v16 = sub_10001A9A8(&qword_1010EF3B8);
  v17 = sub_10001A9E8(v16, (uint64_t)qword_1011B6AA8);
  v35 = v3;
  v18 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56);
  v18(v15, 1, 1, v2);
  v19 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56);
  v19(v12, 1, 1, v16);
  v20 = type metadata accessor for UUID(0);
  TableBuilder.column<A>(_:unique:check:defaultValue:)(v17, 0, v15, v12, v20, &protocol witness table for UUID);
  sub_100004048((uint64_t)v12, &qword_1010F2EB8);
  sub_100004048((uint64_t)v15, &qword_1010F2EC0);
  if (qword_1010E9A38 != -1)
    swift_once(&qword_1010E9A38, sub_1001F52E8);
  v21 = sub_10001A9E8(v16, (uint64_t)qword_1011B6AC0);
  v18(v15, 1, 1, v2);
  v19(v12, 1, 1, v16);
  TableBuilder.column<A>(_:unique:check:defaultValue:)(v21, 0, v15, v12, v20, &protocol witness table for UUID);
  sub_100004048((uint64_t)v12, &qword_1010F2EB8);
  sub_100004048((uint64_t)v15, &qword_1010F2EC0);
  if (qword_1010E9A40 != -1)
    swift_once(&qword_1010E9A40, sub_1001F537C);
  v22 = sub_10001A9A8(&qword_1010EF430);
  v23 = sub_10001A9E8(v22, (uint64_t)qword_1011B6AD8);
  v18(v15, 1, 1, v2);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v9, 1, 1, v22);
  v24 = sub_10012C5BC();
  TableBuilder.column<A>(_:unique:check:defaultValue:)(v23, 0, v15, v9, &type metadata for UInt64, v24);
  sub_100004048((uint64_t)v9, &qword_1010F2EA8);
  sub_100004048((uint64_t)v15, &qword_1010F2EC0);
  if (qword_1010E9A60 != -1)
    swift_once(&qword_1010E9A60, sub_1001F55C8);
  v25 = sub_10001A9A8(&qword_1010EF408);
  v26 = sub_10001A9E8(v25, (uint64_t)qword_1011B6B38);
  v18(v15, 1, 1, v2);
  v27 = (uint64_t)v33;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v33, 1, 1, v25);
  TableBuilder.column<A>(_:unique:check:defaultValue:)(v26, 0, v15, v27, &type metadata for Data, &protocol witness table for Data);
  sub_100004048(v27, &qword_1010F2EA0);
  sub_100004048((uint64_t)v15, &qword_1010F2EC0);
  v28 = sub_1000193A4(&qword_1010EF4E8, &qword_1010EF408, (const char *)&protocol conformance descriptor for Expression<A>);
  v29 = v36;
  ExpressionType<>.length.getter(v25, v28);
  v39 = 32;
  v30 = v34;
  == infix<A>(_:_:)(v29, &v39, &type metadata for Int, &protocol witness table for Int, &protocol witness table for Int64);
  (*(void (**)(char *, uint64_t))(v37 + 8))(v29, v38);
  TableBuilder.check(_:)(v30);
  return (*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v30, v2);
}

uint64_t sub_1001F8AA0()
{
  uint64_t v0;
  Swift::String v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  type metadata accessor for Table(0);
  v1 = SchemaType.drop(ifExists:)(0);
  v2 = Connection.run(_:_:)(v1._countAndFlagsBits, v1._object, _swiftEmptyArrayStorage);
  if (v0)
    return swift_bridgeObjectRelease(v1._object);
  v3 = v2;
  swift_bridgeObjectRelease(v1._object);
  swift_release(v3);
  v4 = Table.create(temporary:ifNotExists:withoutRowid:block:)(0, 0, 0, sub_1001F8DC4, 0);
  v6 = v5;
  v7 = Connection.run(_:_:)(v4, v5, _swiftEmptyArrayStorage);
  swift_bridgeObjectRelease(v6);
  swift_release(v7);
  v8 = sub_10001A9A8(&qword_1010EF3C8);
  v9 = swift_allocObject(v8, 152, 7);
  *(_OWORD *)(v9 + 16) = xmmword_100E221E0;
  if (qword_1010E9A38 != -1)
    swift_once(&qword_1010E9A38, sub_1001F52E8);
  v10 = sub_10001A9A8(&qword_1010EF3B8);
  v11 = sub_10001A9E8(v10, (uint64_t)qword_1011B6AC0);
  *(_QWORD *)(v9 + 56) = v10;
  *(_QWORD *)(v9 + 64) = sub_1000193A4(&qword_1010EF3C0, &qword_1010EF3B8, (const char *)&protocol conformance descriptor for Expression<A>);
  v12 = sub_100018F08((_QWORD *)(v9 + 32));
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v12, v11, v10);
  if (qword_1010E9A48 != -1)
    swift_once(&qword_1010E9A48, sub_1001F5408);
  v13 = sub_10001A9A8(&qword_1010EF3E8);
  v14 = sub_10001A9E8(v13, (uint64_t)qword_1011B6AF0);
  *(_QWORD *)(v9 + 96) = v13;
  *(_QWORD *)(v9 + 104) = sub_1000193A4(&qword_1010EF3F0, &qword_1010EF3E8, (const char *)&protocol conformance descriptor for Expression<A>);
  v15 = sub_100018F08((_QWORD *)(v9 + 72));
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v15, v14, v13);
  if (qword_1010E9A40 != -1)
    swift_once(&qword_1010E9A40, sub_1001F537C);
  v16 = sub_10001A9A8(&qword_1010EF430);
  v17 = sub_10001A9E8(v16, (uint64_t)qword_1011B6AD8);
  *(_QWORD *)(v9 + 136) = v16;
  *(_QWORD *)(v9 + 144) = sub_1000193A4(&qword_1010F2E98, &qword_1010EF430, (const char *)&protocol conformance descriptor for Expression<A>);
  v18 = sub_100018F08((_QWORD *)(v9 + 112));
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v18, v17, v16);
  v19 = Table.createIndex(_:unique:ifNotExists:)(v9, 1, 0);
  v21 = v20;
  swift_bridgeObjectRelease(v9);
  v22 = Connection.run(_:_:)(v19, v21, _swiftEmptyArrayStorage);
  swift_bridgeObjectRelease(v21);
  return swift_release(v22);
}

uint64_t sub_1001F8DC4(uint64_t a1)
{
  return sub_1001F91E0(a1, 0);
}

uint64_t sub_1001F8DCC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v33)(_QWORD *, uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  void (*v36)(_QWORD *, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;

  v1 = Table.create(temporary:ifNotExists:withoutRowid:block:)(0, 0, 0, sub_1001F91D8, 0);
  v3 = v2;
  v4 = Connection.run(_:_:)(v1, v2, _swiftEmptyArrayStorage);
  if (v0)
    return swift_bridgeObjectRelease(v3);
  v5 = v4;
  swift_bridgeObjectRelease(v3);
  swift_release(v5);
  v6 = Table.create(temporary:ifNotExists:withoutRowid:block:)(0, 0, 0, sub_1001F97C8, 0);
  v8 = v7;
  v9 = Connection.run(_:_:)(v6, v7, _swiftEmptyArrayStorage);
  swift_bridgeObjectRelease(v8);
  swift_release(v9);
  v38 = sub_10001A9A8(&qword_1010EF3C8);
  v10 = swift_allocObject(v38, 152, 7);
  *(_OWORD *)(v10 + 16) = xmmword_100E221E0;
  if (qword_1010E9A38 != -1)
    swift_once(&qword_1010E9A38, sub_1001F52E8);
  v11 = sub_10001A9A8(&qword_1010EF3B8);
  v12 = sub_10001A9E8(v11, (uint64_t)qword_1011B6AC0);
  *(_QWORD *)(v10 + 56) = v11;
  v35 = sub_1000193A4(&qword_1010EF3C0, &qword_1010EF3B8, (const char *)&protocol conformance descriptor for Expression<A>);
  *(_QWORD *)(v10 + 64) = v35;
  v13 = sub_100018F08((_QWORD *)(v10 + 32));
  v36 = *(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
  v37 = v12;
  v36(v13, v12, v11);
  if (qword_1010E9A48 != -1)
    swift_once(&qword_1010E9A48, sub_1001F5408);
  v14 = sub_10001A9A8(&qword_1010EF3E8);
  v15 = sub_10001A9E8(v14, (uint64_t)qword_1011B6AF0);
  *(_QWORD *)(v10 + 96) = v14;
  *(_QWORD *)(v10 + 104) = sub_1000193A4(&qword_1010EF3F0, &qword_1010EF3E8, (const char *)&protocol conformance descriptor for Expression<A>);
  v16 = sub_100018F08((_QWORD *)(v10 + 72));
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v16, v15, v14);
  if (qword_1010E9A40 != -1)
    swift_once(&qword_1010E9A40, sub_1001F537C);
  v17 = sub_10001A9A8(&qword_1010EF430);
  v18 = sub_10001A9E8(v17, (uint64_t)qword_1011B6AD8);
  *(_QWORD *)(v10 + 136) = v17;
  v19 = sub_1000193A4(&qword_1010F2E98, &qword_1010EF430, (const char *)&protocol conformance descriptor for Expression<A>);
  *(_QWORD *)(v10 + 144) = v19;
  v20 = sub_100018F08((_QWORD *)(v10 + 112));
  v33 = *(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 16);
  v34 = v18;
  v33(v20, v18, v17);
  v21 = Table.createIndex(_:unique:ifNotExists:)(v10, 1, 0);
  v23 = v22;
  swift_bridgeObjectRelease(v10);
  v24 = Connection.run(_:_:)(v21, v23, _swiftEmptyArrayStorage);
  swift_bridgeObjectRelease(v23);
  swift_release(v24);
  v25 = swift_allocObject(v38, 112, 7);
  *(_OWORD *)(v25 + 16) = xmmword_100E22B10;
  *(_QWORD *)(v25 + 56) = v11;
  *(_QWORD *)(v25 + 64) = v35;
  v26 = sub_100018F08((_QWORD *)(v25 + 32));
  v36(v26, v37, v11);
  *(_QWORD *)(v25 + 96) = v17;
  *(_QWORD *)(v25 + 104) = v19;
  v27 = sub_100018F08((_QWORD *)(v25 + 72));
  v33(v27, v34, v17);
  v28 = Table.createIndex(_:unique:ifNotExists:)(v25, 1, 0);
  v30 = v29;
  swift_bridgeObjectRelease(v25);
  v31 = Connection.run(_:_:)(v28, v30, _swiftEmptyArrayStorage);
  swift_bridgeObjectRelease(v30);
  return swift_release(v31);
}

uint64_t sub_1001F91D8(uint64_t a1)
{
  return sub_1001F91E0(a1, 1);
}

uint64_t sub_1001F91E0(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  void (*v37)(char *, uint64_t);
  uint64_t v39;
  char *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  _BYTE v46[2];
  uint64_t v47;

  v45 = a2;
  v2 = sub_10001A9A8(&qword_1010EF4E0);
  v43 = *(_QWORD *)(v2 - 8);
  v44 = v2;
  __chkstk_darwin(v2);
  v42 = (char *)&v39 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_10001A9A8(&qword_1010EF358);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A9A8(&qword_1010F2EA0);
  __chkstk_darwin(v8);
  v40 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10001A9A8(&qword_1010F2EA8);
  __chkstk_darwin(v10);
  v12 = (char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_10001A9A8(&qword_1010F2EB0);
  __chkstk_darwin(v13);
  v15 = (char *)&v39 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_10001A9A8(&qword_1010F2EB8);
  __chkstk_darwin(v16);
  v18 = (char *)&v39 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_10001A9A8(&qword_1010F2EC0);
  __chkstk_darwin(v19);
  v21 = (char *)&v39 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1010E9A38 != -1)
    swift_once(&qword_1010E9A38, sub_1001F52E8);
  v22 = sub_10001A9A8(&qword_1010EF3B8);
  v23 = sub_10001A9E8(v22, (uint64_t)qword_1011B6AC0);
  v41 = v5;
  v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v24(v21, 1, 1, v4);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v18, 1, 1, v22);
  v25 = type metadata accessor for UUID(0);
  TableBuilder.column<A>(_:unique:check:defaultValue:)(v23, 0, v21, v18, v25, &protocol witness table for UUID);
  sub_100004048((uint64_t)v18, &qword_1010F2EB8);
  sub_100004048((uint64_t)v21, &qword_1010F2EC0);
  if (qword_1010E9A48 != -1)
    swift_once(&qword_1010E9A48, sub_1001F5408);
  v26 = sub_10001A9A8(&qword_1010EF3E8);
  v27 = sub_10001A9E8(v26, (uint64_t)qword_1011B6AF0);
  v24(v21, 1, 1, v4);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v15, 1, 1, v26);
  v28 = sub_10012C49C();
  v39 = v27;
  TableBuilder.column<A>(_:unique:check:defaultValue:)(v27, 0, v21, v15, &type metadata for UInt8, v28);
  sub_100004048((uint64_t)v15, &qword_1010F2EB0);
  sub_100004048((uint64_t)v21, &qword_1010F2EC0);
  if (qword_1010E9A40 != -1)
    swift_once(&qword_1010E9A40, sub_1001F537C);
  v29 = sub_10001A9A8(&qword_1010EF430);
  v30 = sub_10001A9E8(v29, (uint64_t)qword_1011B6AD8);
  v24(v21, 1, 1, v4);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v12, 1, 1, v29);
  v31 = sub_10012C5BC();
  TableBuilder.column<A>(_:unique:check:defaultValue:)(v30, 0, v21, v12, &type metadata for UInt64, v31);
  sub_100004048((uint64_t)v12, &qword_1010F2EA8);
  sub_100004048((uint64_t)v21, &qword_1010F2EC0);
  if (qword_1010E9A50 != -1)
    swift_once(&qword_1010E9A50, sub_1001F5498);
  v32 = sub_10001A9A8(&qword_1010EF408);
  v33 = sub_10001A9E8(v32, (uint64_t)qword_1011B6B08);
  v24(v21, 1, 1, v4);
  v34 = (uint64_t)v40;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 56))(v40, 1, 1, v32);
  TableBuilder.column<A>(_:unique:check:defaultValue:)(v33, 0, v21, v34, &type metadata for Data, &protocol witness table for Data);
  sub_100004048(v34, &qword_1010F2EA0);
  sub_100004048((uint64_t)v21, &qword_1010F2EC0);
  v35 = sub_1000193A4(&qword_1010EF4E8, &qword_1010EF408, (const char *)&protocol conformance descriptor for Expression<A>);
  v36 = v42;
  ExpressionType<>.length.getter(v32, v35);
  v47 = 6;
  == infix<A>(_:_:)(v36, &v47, &type metadata for Int, &protocol witness table for Int, &protocol witness table for Int64);
  (*(void (**)(char *, uint64_t))(v43 + 8))(v36, v44);
  TableBuilder.check(_:)(v7);
  v37 = *(void (**)(char *, uint64_t))(v41 + 8);
  v37(v7, v4);
  v46[0] = v45;
  v46[1] = 2;
  ~= infix<A>(_:_:)(v46, v39, &type metadata for UInt8, &protocol witness table for UInt8, v28, &protocol witness table for Int64, &protocol witness table for Int64);
  TableBuilder.check(_:)(v7);
  return ((uint64_t (*)(char *, uint64_t))v37)(v7, v4);
}

uint64_t sub_1001F97C8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v35 = a1;
  v1 = sub_10001A9A8(&qword_1010EF4E0);
  v33 = *(_QWORD *)(v1 - 8);
  v34 = v1;
  __chkstk_darwin(v1);
  v3 = (char *)&v31 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_10001A9A8(&qword_1010EF358);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A9A8(&qword_1010F2EA0);
  __chkstk_darwin(v8);
  v10 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10001A9A8(&qword_1010F2EA8);
  __chkstk_darwin(v11);
  v13 = (char *)&v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_10001A9A8(&qword_1010F2EB8);
  __chkstk_darwin(v14);
  v16 = (char *)&v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_10001A9A8(&qword_1010F2EC0);
  __chkstk_darwin(v17);
  v19 = (char *)&v31 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1010E9A38 != -1)
    swift_once(&qword_1010E9A38, sub_1001F52E8);
  v20 = sub_10001A9A8(&qword_1010EF3B8);
  v21 = sub_10001A9E8(v20, (uint64_t)qword_1011B6AC0);
  v32 = v5;
  v22 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v22(v19, 1, 1, v4);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v16, 1, 1, v20);
  v23 = type metadata accessor for UUID(0);
  TableBuilder.column<A>(_:unique:check:defaultValue:)(v21, 0, v19, v16, v23, &protocol witness table for UUID);
  sub_100004048((uint64_t)v16, &qword_1010F2EB8);
  sub_100004048((uint64_t)v19, &qword_1010F2EC0);
  if (qword_1010E9A40 != -1)
    swift_once(&qword_1010E9A40, sub_1001F537C);
  v24 = sub_10001A9A8(&qword_1010EF430);
  v25 = sub_10001A9E8(v24, (uint64_t)qword_1011B6AD8);
  v22(v19, 1, 1, v4);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v13, 1, 1, v24);
  v26 = sub_10012C5BC();
  TableBuilder.column<A>(_:unique:check:defaultValue:)(v25, 0, v19, v13, &type metadata for UInt64, v26);
  sub_100004048((uint64_t)v13, &qword_1010F2EA8);
  sub_100004048((uint64_t)v19, &qword_1010F2EC0);
  if (qword_1010E9A60 != -1)
    swift_once(&qword_1010E9A60, sub_1001F55C8);
  v27 = sub_10001A9A8(&qword_1010EF408);
  v28 = sub_10001A9E8(v27, (uint64_t)qword_1011B6B38);
  v22(v19, 1, 1, v4);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v10, 1, 1, v27);
  TableBuilder.column<A>(_:unique:check:defaultValue:)(v28, 0, v19, v10, &type metadata for Data, &protocol witness table for Data);
  sub_100004048((uint64_t)v10, &qword_1010F2EA0);
  sub_100004048((uint64_t)v19, &qword_1010F2EC0);
  v29 = sub_1000193A4(&qword_1010EF4E8, &qword_1010EF408, (const char *)&protocol conformance descriptor for Expression<A>);
  ExpressionType<>.length.getter(v27, v29);
  v36 = 32;
  == infix<A>(_:_:)(v3, &v36, &type metadata for Int, &protocol witness table for Int, &protocol witness table for Int64);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v3, v34);
  TableBuilder.check(_:)(v7);
  return (*(uint64_t (**)(char *, uint64_t))(v32 + 8))(v7, v4);
}

uint64_t sub_1001F9C44()
{
  char *v0;
  char *v1;
  uint64_t v2;
  void (*v3)(char *, uint64_t);

  swift_release(*((_QWORD *)v0 + 2));
  swift_release(*((_QWORD *)v0 + 3));
  v1 = &v0[OBJC_IVAR____TtC12searchpartyd22ItemSharingKeyDatabase_keys];
  v2 = type metadata accessor for Table(0);
  v3 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8);
  v3(v1, v2);
  v3(&v0[OBJC_IVAR____TtC12searchpartyd22ItemSharingKeyDatabase_nearOwnerKeys], v2);
  v3(&v0[OBJC_IVAR____TtC12searchpartyd22ItemSharingKeyDatabase_connectionKeys], v2);
  v3(&v0[OBJC_IVAR____TtC12searchpartyd22ItemSharingKeyDatabase_beaconAttributes], v2);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_1001F9CEC()
{
  return type metadata accessor for ItemSharingKeyDatabase(0);
}

uint64_t type metadata accessor for ItemSharingKeyDatabase(uint64_t a1)
{
  uint64_t result;

  result = qword_1010F2D00;
  if (!qword_1010F2D00)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ItemSharingKeyDatabase);
  return result;
}

uint64_t sub_1001F9D30(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[5];
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4[0] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[1] = "\b";
  v4[2] = (char *)&value witness table for Builtin.Int32 + 64;
  v4[3] = &unk_100E2DDD0;
  v4[4] = &unk_100E2DDD0;
  result = type metadata accessor for Table(319);
  if (v3 <= 0x3F)
  {
    v5 = *(_QWORD *)(result - 8) + 64;
    v6 = v5;
    v7 = v5;
    v8 = v5;
    result = swift_updateClassMetadata2(a1, 256, 9, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_1001F9DD4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = sub_10001A9A8(&qword_1010EF360);
  OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_1001FB988, v0, v1, (char *)&type metadata for () + 8, v2);
  return v4;
}

uint64_t sub_1001F9E3C()
{
  return 5;
}

uint64_t sub_1001F9E44()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 36);
}

uint64_t sub_1001F9E4C()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 37);
}

uint64_t sub_1001F9E54()
{
  return sub_1001FB7C8();
}

uint64_t sub_1001F9E68()
{
  return sub_1001F67A0();
}

void sub_1001F9E7C(int a1, int a2, uint64_t a3)
{
  sub_1001F69B4(a1, a2, a3);
}

uint64_t sub_1001F9E90(uint64_t a1, uint64_t a2)
{
  return sub_1001F9EC8(a1, a2, (uint64_t)sub_1001FA014);
}

uint64_t sub_1001F9EAC(uint64_t a1, uint64_t a2)
{
  return sub_1001F9EC8(a1, a2, (uint64_t)sub_1001F9F80);
}

uint64_t sub_1001F9EC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v5;
  _QWORD v7[4];

  v5 = v3[2];
  v7[3] = *v3;
  return OSAllocatedUnfairLock.callAsFunction<A>(_:)(a3, v7, v5, (char *)&type metadata for () + 8, (char *)&type metadata for () + 8);
}

uint64_t sub_1001F9F08(uint64_t a1)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(byte_100E2DE10, a1);
  return Database.description.getter(a1, WitnessTable);
}

uint64_t sub_1001F9F44(uint64_t a1)
{
  uint64_t result;

  result = sub_100006204(&qword_1010F2E08, type metadata accessor for ItemSharingKeyDatabase, (uint64_t)&unk_100E2DDE8);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

void (*sub_1001F9F80())(uint64_t, _QWORD *)
{
  uint64_t v0;

  return sub_1001F68EC(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1001F9F98()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_1000234D8(v0, qword_1011B6BC8);
  sub_10001A9E8(v0, (uint64_t)qword_1011B6BC8);
  return Logger.init(subsystem:category:)(0xD00000000000001DLL, 0x8000000100EC5D30, 0x626174614479656BLL, 0xEB00000000657361);
}

uint64_t sub_1001FA014()
{
  uint64_t v0;

  return sub_1001F633C(*(_QWORD *)(v0 + 16));
}

uint64_t sub_1001FA02C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3();
}

uint64_t sub_1001FA1A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  *(_QWORD *)(v5 + 160) = a4;
  *(_QWORD *)(v5 + 168) = a5;
  return swift_task_switch(sub_1001FA1C0, 0, 0);
}

uint64_t sub_1001FA1C0()
{
  uint64_t v0;
  uint64_t result;
  _QWORD *v2;
  uint64_t (__cdecl *v3)();

  if (qword_1010EA5B0 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v0 + 96, 0, 0);
  result = sub_10008180C((uint64_t)&xmmword_10111E6C0, v0 + 56);
  if (*(_QWORD *)(v0 + 80))
  {
    sub_10000F9FC((__int128 *)(v0 + 56), v0 + 16);
    sub_10001AA44((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
    v3 = (uint64_t (__cdecl *)())((char *)&dword_1010EBD58 + dword_1010EBD58);
    v2 = (_QWORD *)swift_task_alloc(unk_1010EBD5C);
    *(_QWORD *)(v0 + 176) = v2;
    *v2 = v0;
    v2[1] = sub_1001FA2A4;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1001FA2A4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 176);
  *(_QWORD *)(*(_QWORD *)v1 + 184) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1001FA300, 0, 0);
}

uint64_t sub_1001FA300()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  BOOL v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;

  v1 = (_QWORD *)(v0 + 16);
  if (*(_QWORD *)(v0 + 184))
  {
    v2 = *(_QWORD *)(v0 + 168);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    v3 = swift_retain_n(v2, 2);
    v4 = Logger.logObject.getter(v3);
    v5 = static os_log_type_t.default.getter(v4);
    v6 = os_log_type_enabled(v4, v5);
    v7 = *(_QWORD *)(v0 + 168);
    if (v6)
    {
      v8 = (uint8_t *)swift_slowAlloc(12, -1);
      v20 = swift_slowAlloc(32, -1);
      v21 = v20;
      *(_DWORD *)v8 = 136446210;
      *(_QWORD *)(v0 + 144) = v7;
      v9 = type metadata accessor for ItemSharingKeyDatabase(0);
      v10 = sub_100006204(&qword_1010F2E08, type metadata accessor for ItemSharingKeyDatabase, (uint64_t)&unk_100E2DDE8);
      v11 = CustomStringConvertible.typeDescription.getter(v9, v10);
      *(_QWORD *)(v0 + 152) = sub_100016940(v11, v12, &v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 152, v0 + 160, v8 + 4, v8 + 12);
      swift_bridgeObjectRelease();
      swift_release_n(v7, 2);
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Waiting for first unlock to open encrypted SQLite database for %{public}s", v8, 0xCu);
      swift_arrayDestroy(v20, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v20, -1, -1);
      swift_slowDealloc(v8, -1, -1);

    }
    else
    {

      swift_release_n(v7, 2);
    }
    v19 = (_QWORD *)swift_task_alloc(dword_1010FC394);
    *(_QWORD *)(v0 + 192) = v19;
    *v19 = v0;
    v19[1] = sub_1001FA5B4;
    return sub_10044B510();
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    if (qword_1010EA430 != -1)
      swift_once(&qword_1010EA430, sub_100C4DCC8);
    v13 = type metadata accessor for Logger(0);
    v14 = sub_10001A9E8(v13, (uint64_t)qword_1011B7F98);
    v15 = Logger.logObject.getter(v14);
    v16 = static os_log_type_t.error.getter(v15);
    if (os_log_type_enabled(v15, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v17 = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Unable to get FirstUnlockService", v17, 2u);
      swift_slowDealloc(v17, -1, -1);
    }

    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1001FA5B4()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 192));
  return swift_task_switch(sub_1001FA608, 0, 0);
}

uint64_t sub_1001FA608()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  BOOL v4;
  uint64_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v13;

  sub_100C64BB0();
  v1 = swift_retain_n(*(_QWORD *)(v0 + 168), 2);
  v2 = Logger.logObject.getter(v1);
  v3 = static os_log_type_t.default.getter(v2);
  v4 = os_log_type_enabled(v2, v3);
  v5 = *(_QWORD *)(v0 + 168);
  if (v4)
  {
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    v13 = v7;
    *(_DWORD *)v6 = 136315138;
    *(_QWORD *)(v0 + 128) = v5;
    v8 = type metadata accessor for ItemSharingKeyDatabase(0);
    v9 = sub_100006204(&qword_1010F2E08, type metadata accessor for ItemSharingKeyDatabase, (uint64_t)&unk_100E2DDE8);
    v10 = CustomStringConvertible.typeDescription.getter(v8, v9);
    *(_QWORD *)(v0 + 136) = sub_100016940(v10, v11, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 136, v0 + 144, v6 + 4, v6 + 12);
    swift_bridgeObjectRelease();
    swift_release_n(v5, 2);
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "SQLite database for %s opened successfully after device unlock.", v6, 0xCu);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);

  }
  else
  {

    swift_release_n(v5, 2);
  }
  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001FA908(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  *(_QWORD *)(v5 + 160) = a4;
  *(_QWORD *)(v5 + 168) = a5;
  return swift_task_switch(sub_1001FA920, 0, 0);
}

uint64_t sub_1001FA920()
{
  uint64_t v0;
  uint64_t result;
  _QWORD *v2;
  uint64_t (__cdecl *v3)();

  if (qword_1010EA5B0 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v0 + 96, 0, 0);
  result = sub_10008180C((uint64_t)&xmmword_10111E6C0, v0 + 56);
  if (*(_QWORD *)(v0 + 80))
  {
    sub_10000F9FC((__int128 *)(v0 + 56), v0 + 16);
    sub_10001AA44((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
    v3 = (uint64_t (__cdecl *)())((char *)&dword_1010EBD58 + dword_1010EBD58);
    v2 = (_QWORD *)swift_task_alloc(unk_1010EBD5C);
    *(_QWORD *)(v0 + 176) = v2;
    *v2 = v0;
    v2[1] = sub_1001FAA04;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1001FAA04(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 176);
  *(_QWORD *)(*(_QWORD *)v1 + 184) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1001FAA60, 0, 0);
}

uint64_t sub_1001FAA60()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  BOOL v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;

  v1 = (_QWORD *)(v0 + 16);
  if (*(_QWORD *)(v0 + 184))
  {
    v2 = *(_QWORD *)(v0 + 168);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    v3 = swift_retain_n(v2, 2);
    v4 = Logger.logObject.getter(v3);
    v5 = static os_log_type_t.default.getter(v4);
    v6 = os_log_type_enabled(v4, v5);
    v7 = *(_QWORD *)(v0 + 168);
    if (v6)
    {
      v8 = (uint8_t *)swift_slowAlloc(12, -1);
      v20 = swift_slowAlloc(32, -1);
      v21 = v20;
      *(_DWORD *)v8 = 136446210;
      *(_QWORD *)(v0 + 144) = v7;
      v9 = type metadata accessor for ObservationDatabase(0);
      v10 = sub_100006204(&qword_1010F2E90, type metadata accessor for ObservationDatabase, (uint64_t)&unk_100E6F098);
      v11 = CustomStringConvertible.typeDescription.getter(v9, v10);
      *(_QWORD *)(v0 + 152) = sub_100016940(v11, v12, &v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 152, v0 + 160, v8 + 4, v8 + 12);
      swift_bridgeObjectRelease();
      swift_release_n(v7, 2);
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Waiting for first unlock to open encrypted SQLite database for %{public}s", v8, 0xCu);
      swift_arrayDestroy(v20, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v20, -1, -1);
      swift_slowDealloc(v8, -1, -1);

    }
    else
    {

      swift_release_n(v7, 2);
    }
    v19 = (_QWORD *)swift_task_alloc(dword_1010FC394);
    *(_QWORD *)(v0 + 192) = v19;
    *v19 = v0;
    v19[1] = sub_1001FAD14;
    return sub_10044B510();
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    if (qword_1010EA430 != -1)
      swift_once(&qword_1010EA430, sub_100C4DCC8);
    v13 = type metadata accessor for Logger(0);
    v14 = sub_10001A9E8(v13, (uint64_t)qword_1011B7F98);
    v15 = Logger.logObject.getter(v14);
    v16 = static os_log_type_t.error.getter(v15);
    if (os_log_type_enabled(v15, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v17 = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Unable to get FirstUnlockService", v17, 2u);
      swift_slowDealloc(v17, -1, -1);
    }

    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1001FAD14()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 192));
  return swift_task_switch(sub_1001FAD68, 0, 0);
}

uint64_t sub_1001FAD68()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  BOOL v4;
  uint64_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v13;

  sub_100C6467C();
  v1 = swift_retain_n(*(_QWORD *)(v0 + 168), 2);
  v2 = Logger.logObject.getter(v1);
  v3 = static os_log_type_t.default.getter(v2);
  v4 = os_log_type_enabled(v2, v3);
  v5 = *(_QWORD *)(v0 + 168);
  if (v4)
  {
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    v13 = v7;
    *(_DWORD *)v6 = 136315138;
    *(_QWORD *)(v0 + 128) = v5;
    v8 = type metadata accessor for ObservationDatabase(0);
    v9 = sub_100006204(&qword_1010F2E90, type metadata accessor for ObservationDatabase, (uint64_t)&unk_100E6F098);
    v10 = CustomStringConvertible.typeDescription.getter(v8, v9);
    *(_QWORD *)(v0 + 136) = sub_100016940(v10, v11, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 136, v0 + 144, v6 + 4, v6 + 12);
    swift_bridgeObjectRelease();
    swift_release_n(v5, 2);
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "SQLite database for %s opened successfully after device unlock.", v6, 0xCu);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);

  }
  else
  {

    swift_release_n(v5, 2);
  }
  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001FB068(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  *(_QWORD *)(v5 + 160) = a4;
  *(_QWORD *)(v5 + 168) = a5;
  return swift_task_switch(sub_1001FB080, 0, 0);
}

uint64_t sub_1001FB080()
{
  uint64_t v0;
  uint64_t result;
  _QWORD *v2;
  uint64_t (__cdecl *v3)();

  if (qword_1010EA5B0 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v0 + 96, 0, 0);
  result = sub_10008180C((uint64_t)&xmmword_10111E6C0, v0 + 56);
  if (*(_QWORD *)(v0 + 80))
  {
    sub_10000F9FC((__int128 *)(v0 + 56), v0 + 16);
    sub_10001AA44((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
    v3 = (uint64_t (__cdecl *)())((char *)&dword_1010EBD58 + dword_1010EBD58);
    v2 = (_QWORD *)swift_task_alloc(unk_1010EBD5C);
    *(_QWORD *)(v0 + 176) = v2;
    *v2 = v0;
    v2[1] = sub_1001FB164;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1001FB164(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 176);
  *(_QWORD *)(*(_QWORD *)v1 + 184) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1001FB1C0, 0, 0);
}

uint64_t sub_1001FB1C0()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  BOOL v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;

  v1 = (_QWORD *)(v0 + 16);
  if (*(_QWORD *)(v0 + 184))
  {
    v2 = *(_QWORD *)(v0 + 168);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    v3 = swift_retain_n(v2, 2);
    v4 = Logger.logObject.getter(v3);
    v5 = static os_log_type_t.default.getter(v4);
    v6 = os_log_type_enabled(v4, v5);
    v7 = *(_QWORD *)(v0 + 168);
    if (v6)
    {
      v8 = (uint8_t *)swift_slowAlloc(12, -1);
      v20 = swift_slowAlloc(32, -1);
      v21 = v20;
      *(_DWORD *)v8 = 136446210;
      *(_QWORD *)(v0 + 144) = v7;
      v9 = type metadata accessor for StandaloneBeaconDatabase(0);
      v10 = sub_100006204(&qword_1010F2E78, type metadata accessor for StandaloneBeaconDatabase, (uint64_t)&unk_100E46070);
      v11 = CustomStringConvertible.typeDescription.getter(v9, v10);
      *(_QWORD *)(v0 + 152) = sub_100016940(v11, v12, &v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 152, v0 + 160, v8 + 4, v8 + 12);
      swift_bridgeObjectRelease();
      swift_release_n(v7, 2);
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Waiting for first unlock to open encrypted SQLite database for %{public}s", v8, 0xCu);
      swift_arrayDestroy(v20, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v20, -1, -1);
      swift_slowDealloc(v8, -1, -1);

    }
    else
    {

      swift_release_n(v7, 2);
    }
    v19 = (_QWORD *)swift_task_alloc(dword_1010FC394);
    *(_QWORD *)(v0 + 192) = v19;
    *v19 = v0;
    v19[1] = sub_1001FB474;
    return sub_10044B510();
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    if (qword_1010EA430 != -1)
      swift_once(&qword_1010EA430, sub_100C4DCC8);
    v13 = type metadata accessor for Logger(0);
    v14 = sub_10001A9E8(v13, (uint64_t)qword_1011B7F98);
    v15 = Logger.logObject.getter(v14);
    v16 = static os_log_type_t.error.getter(v15);
    if (os_log_type_enabled(v15, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v17 = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Unable to get FirstUnlockService", v17, 2u);
      swift_slowDealloc(v17, -1, -1);
    }

    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1001FB474()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 192));
  return swift_task_switch(sub_1001FB4C8, 0, 0);
}

uint64_t sub_1001FB4C8()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  BOOL v4;
  uint64_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v13;

  sub_100C65054();
  v1 = swift_retain_n(*(_QWORD *)(v0 + 168), 2);
  v2 = Logger.logObject.getter(v1);
  v3 = static os_log_type_t.default.getter(v2);
  v4 = os_log_type_enabled(v2, v3);
  v5 = *(_QWORD *)(v0 + 168);
  if (v4)
  {
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    v13 = v7;
    *(_DWORD *)v6 = 136315138;
    *(_QWORD *)(v0 + 128) = v5;
    v8 = type metadata accessor for StandaloneBeaconDatabase(0);
    v9 = sub_100006204(&qword_1010F2E78, type metadata accessor for StandaloneBeaconDatabase, (uint64_t)&unk_100E46070);
    v10 = CustomStringConvertible.typeDescription.getter(v8, v9);
    *(_QWORD *)(v0 + 136) = sub_100016940(v10, v11, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 136, v0 + 144, v6 + 4, v6 + 12);
    swift_bridgeObjectRelease();
    swift_release_n(v5, 2);
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "SQLite database for %s opened successfully after device unlock.", v6, 0xCu);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);

  }
  else
  {

    swift_release_n(v5, 2);
  }
  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001FB7C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD v12[2];

  v2 = type metadata accessor for Keychain.DataProtectionClass(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = static Keychain.data(account:service:)(0x6170686372616573, 0xEB00000000797472, 0x626174614479654BLL);
  if (!v1)
  {
    if (v7 >> 60 == 15)
    {
      v0 = static Data.random(bytes:)(32);
      v9 = v8;
      v12[0] = v0;
      v12[1] = v8;
      (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for Keychain.DataProtectionClass.c(_:), v2);
      sub_10001BBBC(v0, v9);
      v10 = sub_100035530();
      static Keychain.set<A>(data:account:service:dataProtectionClass:)(v12, 0x6170686372616573, 0xEB00000000797472, 0x626174614479654BLL, 0xEB00000000657361, v5, &type metadata for Data, v10);
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      sub_10001BC14(v0, v9);
    }
    else
    {
      return v6;
    }
  }
  return v0;
}

uint64_t sub_1001FB988@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 24);
  *a1 = v2;
  return swift_retain(v2);
}

uint64_t sub_1001FB9A4()
{
  static Keychain.deleteData(account:service:)(0x6170686372616573, 0xEB00000000797472, 0x626174614479654BLL, 0xEB00000000657361);
  return 1;
}

uint64_t sub_1001FBC28()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v2 = *(_QWORD *)(type metadata accessor for Logger(0) - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = v0 + v3;
  v5 = *(_QWORD *)(v0 + ((*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFF8));
  v6 = (_QWORD *)swift_task_alloc(dword_1010F2E34);
  *(_QWORD *)(v1 + 16) = v6;
  *v6 = v1;
  v6[1] = sub_100004A74;
  v6[20] = v4;
  v6[21] = v5;
  return swift_task_switch(sub_1001FA1C0, 0, 0);
}

uint64_t sub_1001FBCB8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v2 = *(_QWORD *)(type metadata accessor for Logger(0) - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = v0 + v3;
  v5 = *(_QWORD *)(v0 + ((*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFF8));
  v6 = (_QWORD *)swift_task_alloc(dword_1010F2E6C);
  *(_QWORD *)(v1 + 16) = v6;
  *v6 = v1;
  v6[1] = sub_100004A74;
  v6[20] = v4;
  v6[21] = v5;
  return swift_task_switch(sub_1001FB080, 0, 0);
}

uint64_t sub_1001FBD48()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v2 = *(_QWORD *)(type metadata accessor for Logger(0) - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = v0 + v3;
  v5 = *(_QWORD *)(v0 + ((*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFF8));
  v6 = (_QWORD *)swift_task_alloc(dword_1010F2E84);
  *(_QWORD *)(v1 + 16) = v6;
  *v6 = v1;
  v6[1] = sub_100004C28;
  v6[20] = v4;
  v6[21] = v5;
  return swift_task_switch(sub_1001FA920, 0, 0);
}

uint64_t sub_1001FBDD4()
{
  return sub_1001F8DCC();
}

uint64_t sub_1001FBDEC()
{
  return sub_1001F8AA0();
}

uint64_t sub_1001FBE04()
{
  return sub_1001F7984();
}

uint64_t sub_1001FBE1C()
{
  return sub_1001F7140();
}

uint64_t sub_1001FBE34()
{
  return sub_1001F6DEC();
}

uint64_t sub_1001FBE4C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) == 0)
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    v5 = a2[2];
    *(_QWORD *)(a1 + 8) = a2[1];
    *(_QWORD *)(a1 + 16) = v5;
    v6 = *(int *)(a3 + 24);
    v7 = (uint64_t *)(a1 + v6);
    v8 = (uint64_t)a2 + v6;
    v9 = *(uint64_t *)((char *)a2 + v6);
    v10 = *(uint64_t *)((char *)a2 + v6 + 8);
    swift_bridgeObjectRetain(v5);
    sub_10001BBBC(v9, v10);
    *v7 = v9;
    v7[1] = v10;
    v11 = type metadata accessor for OwnedBeaconRecord(0);
    v12 = *(int *)(v11 + 20);
    v13 = (char *)v7 + v12;
    v14 = v8 + v12;
    v15 = type metadata accessor for UUID(0);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
    v16 = v8 + *(int *)(v11 + 24);
    v21 = type metadata accessor for StableIdentifier(0);
    v17 = (char *)&loc_1001FBF40 + 4 * byte_100E2DE30[swift_getEnumCaseMultiPayload(v16, v21)];
    __asm { BR              X10 }
  }
  v18 = *a2;
  *(_QWORD *)a1 = *a2;
  v19 = v18 + ((v4 + 16) & ~(unint64_t)v4);
  swift_retain();
  return v19;
}

uint64_t sub_1001FC370(uint64_t a1, int *a2)
{
  uint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t result;
  void (*v22)(uint64_t, uint64_t);

  swift_bridgeObjectRelease();
  v4 = a1 + a2[6];
  sub_10001BC14(*(_QWORD *)v4, *(_QWORD *)(v4 + 8));
  v5 = (int *)type metadata accessor for OwnedBeaconRecord(0);
  v6 = v4 + v5[5];
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v9(v6, v7);
  v10 = v4 + v5[6];
  v11 = type metadata accessor for StableIdentifier(0);
  switch(swift_getEnumCaseMultiPayload(v10, v11))
  {
    case 0u:
    case 4u:
      goto LABEL_5;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 2u:
      v9(v10, v7);
      sub_10001A9A8(&qword_101106F40);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v9(v10, v7);
      sub_10001A9A8((uint64_t *)&unk_1010F46F0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }
  v12 = v4 + v5[7];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v12, 1, v7))
    v9(v12, v7);
  v13 = v4 + v5[8];
  v14 = type metadata accessor for Date(0);
  v15 = *(_QWORD *)(v14 - 8);
  v22 = *(void (**)(uint64_t, uint64_t))(v15 + 8);
  v22(v13, v14);
  sub_10001BC14(*(_QWORD *)(v4 + v5[9]), *(_QWORD *)(v4 + v5[9] + 8));
  v16 = (uint64_t *)(v4 + v5[10]);
  v17 = v16[1];
  if (v17 >> 60 != 15)
    sub_10001BC14(*v16, v17);
  v18 = (uint64_t *)(v4 + v5[11]);
  v19 = v18[1];
  if (v19 >> 60 != 15)
    sub_10001BC14(*v18, v19);
  sub_10001BC14(*(_QWORD *)(v4 + v5[12]), *(_QWORD *)(v4 + v5[12] + 8));
  sub_10001BC14(*(_QWORD *)(v4 + v5[13]), *(_QWORD *)(v4 + v5[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v9(a1 + a2[8], v7);
  v20 = a1 + a2[9];
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v20, 1, v14);
  if (!(_DWORD)result)
    return ((uint64_t (*)(uint64_t, uint64_t))v22)(v20, v14);
  return result;
}

void sub_1001FC65C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v4;
  v5 = *(int *)(a3 + 24);
  v6 = (uint64_t *)(a1 + v5);
  v7 = a2 + v5;
  v8 = *(_QWORD *)(a2 + v5);
  v9 = *(_QWORD *)(a2 + v5 + 8);
  swift_bridgeObjectRetain(v4);
  sub_10001BBBC(v8, v9);
  *v6 = v8;
  v6[1] = v9;
  v10 = type metadata accessor for OwnedBeaconRecord(0);
  v11 = *(int *)(v10 + 20);
  v12 = (char *)v6 + v11;
  v13 = v7 + v11;
  v14 = type metadata accessor for UUID(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
  v15 = v7 + *(int *)(v10 + 24);
  v16 = type metadata accessor for StableIdentifier(0);
  v17 = (char *)sub_1001FC740 + 4 * byte_100E2DE3A[swift_getEnumCaseMultiPayload(v15, v16)];
  __asm { BR              X10 }
}

uint64_t sub_1001FC740()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  __n128 v60;
  uint64_t v61;
  void *v62;
  const void *v63;
  uint64_t v64;
  uint64_t v66;
  int *v67;
  uint64_t v68;
  void (*v69)(void *, const void *, uint64_t);
  uint64_t v70;

  v9 = v8[1];
  *v5 = *v8;
  v5[1] = v9;
  swift_bridgeObjectRetain(v9);
  swift_storeEnumTagMultiPayload(v5, v6, v3);
  v10 = v4[7];
  v11 = (void *)(v7 + v10);
  v12 = (const void *)(v1 + v10);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v66 + 48))(v1 + v10, 1, v2))
  {
    v13 = sub_10001A9A8(&qword_1010ED860);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    v69(v11, v12, v2);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v66 + 56))(v11, 0, 1, v2);
  }
  v14 = v4[8];
  v15 = v7 + v14;
  v16 = v1 + v14;
  v17 = type metadata accessor for Date(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 16);
  v19(v15, v16, v17);
  v20 = v4[9];
  v21 = (uint64_t *)(v7 + v20);
  v22 = (uint64_t *)(v1 + v20);
  v23 = *v22;
  v24 = v22[1];
  sub_10001BBBC(*v22, v24);
  *v21 = v23;
  v21[1] = v24;
  v25 = v4[10];
  v26 = v7 + v25;
  v27 = (uint64_t *)(v1 + v25);
  v28 = v27[1];
  if (v28 >> 60 == 15)
  {
    *(_OWORD *)v26 = *(_OWORD *)v27;
  }
  else
  {
    v29 = *v27;
    sub_10001BBBC(*v27, v27[1]);
    *(_QWORD *)v26 = v29;
    *(_QWORD *)(v26 + 8) = v28;
  }
  v30 = v4[11];
  v31 = v7 + v30;
  v32 = (uint64_t *)(v1 + v30);
  v33 = v32[1];
  if (v33 >> 60 == 15)
  {
    *(_OWORD *)v31 = *(_OWORD *)v32;
  }
  else
  {
    v34 = *v32;
    sub_10001BBBC(*v32, v32[1]);
    *(_QWORD *)v31 = v34;
    *(_QWORD *)(v31 + 8) = v33;
  }
  v35 = v4[12];
  v36 = (uint64_t *)(v7 + v35);
  v37 = (uint64_t *)(v1 + v35);
  v38 = *v37;
  v39 = v37[1];
  sub_10001BBBC(*v37, v39);
  *v36 = v38;
  v36[1] = v39;
  v40 = v4[13];
  v41 = (uint64_t *)(v7 + v40);
  v42 = (uint64_t *)(v1 + v40);
  v43 = *v42;
  v44 = v42[1];
  sub_10001BBBC(*v42, v44);
  *v41 = v43;
  v41[1] = v44;
  v45 = v4[14];
  v46 = (_QWORD *)(v7 + v45);
  v47 = (_QWORD *)(v1 + v45);
  v48 = v47[1];
  *v46 = *v47;
  v46[1] = v48;
  v49 = v4[15];
  v50 = (_QWORD *)(v7 + v49);
  v51 = (_QWORD *)(v1 + v49);
  v52 = v51[1];
  *v50 = *v51;
  v50[1] = v52;
  *(_QWORD *)(v7 + v4[16]) = *(_QWORD *)(v1 + v4[16]);
  *(_QWORD *)(v7 + v4[17]) = *(_QWORD *)(v1 + v4[17]);
  *(_BYTE *)(v7 + v4[18]) = *(_BYTE *)(v1 + v4[18]);
  *(_BYTE *)(v7 + v4[19]) = *(_BYTE *)(v1 + v4[19]);
  *(_BYTE *)(v7 + v4[20]) = *(_BYTE *)(v1 + v4[20]);
  v53 = v67[7];
  v54 = v67[8];
  v55 = v0 + v53;
  v56 = v68 + v53;
  *(_BYTE *)v55 = *(_BYTE *)v56;
  v57 = *(_QWORD *)(v56 + 16);
  *(_QWORD *)(v55 + 8) = *(_QWORD *)(v56 + 8);
  *(_QWORD *)(v55 + 16) = v57;
  v58 = v0 + v54;
  v59 = v68 + v54;
  swift_bridgeObjectRetain(v48);
  swift_bridgeObjectRetain(v52);
  v60 = swift_bridgeObjectRetain(v57);
  ((void (*)(uint64_t, uint64_t, uint64_t, __n128))v69)(v58, v59, v70, v60);
  v61 = v67[9];
  v62 = (void *)(v0 + v61);
  v63 = (const void *)(v68 + v61);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))(v68 + v61, 1, v17))
  {
    v64 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
    memcpy(v62, v63, *(_QWORD *)(*(_QWORD *)(v64 - 8) + 64));
  }
  else
  {
    v19((uint64_t)v62, (uint64_t)v63, v17);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v62, 0, 1, v17);
  }
  return v0;
}

uint64_t sub_1001FCB48(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t (*v27)(char *, uint64_t, uint64_t);
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(char *, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t *v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t *v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t *v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  const void *v88;
  uint64_t (*v89)(uint64_t, uint64_t, uint64_t);
  int v90;
  int v91;
  uint64_t v92;
  int *v94;
  uint64_t v95;
  uint64_t v96;
  void (*v97)(char *, uint64_t, uint64_t);

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 16) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease();
  v94 = a3;
  v7 = a3[6];
  v8 = (uint64_t *)(a1 + v7);
  v9 = a2 + v7;
  v10 = *(_QWORD *)(a2 + v7);
  v11 = *(_QWORD *)(a2 + v7 + 8);
  sub_10001BBBC(v10, v11);
  v12 = *v8;
  v13 = v8[1];
  *v8 = v10;
  v8[1] = v11;
  sub_10001BC14(v12, v13);
  v14 = (int *)type metadata accessor for OwnedBeaconRecord(0);
  v15 = v14[5];
  v16 = (char *)v8 + v15;
  v17 = v9 + v15;
  v18 = type metadata accessor for UUID(0);
  v19 = *(_QWORD *)(v18 - 8);
  v97 = *(void (**)(char *, uint64_t, uint64_t))(v19 + 24);
  v97(v16, v17, v18);
  v95 = a2;
  v96 = a1;
  if (a1 != a2)
  {
    v20 = v14[6];
    v21 = v9 + v20;
    sub_1001FD22C((uint64_t)v8 + v20);
    v22 = type metadata accessor for StableIdentifier(0);
    v23 = (char *)&loc_1001FCC60 + 4 * byte_100E2DE3F[swift_getEnumCaseMultiPayload(v21, v22)];
    __asm { BR              X10 }
  }
  v24 = v14[7];
  v25 = (char *)v8 + v24;
  v26 = (char *)(v9 + v24);
  v27 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v19 + 48);
  v28 = v27((char *)v8 + v24, 1, v18);
  v29 = v27(v26, 1, v18);
  if (v28)
  {
    if (!v29)
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v25, v26, v18);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v25, 0, 1, v18);
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  if (v29)
  {
    (*(void (**)(char *, uint64_t))(v19 + 8))(v25, v18);
LABEL_8:
    v30 = sub_10001A9A8(&qword_1010ED860);
    memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
    goto LABEL_9;
  }
  v97(v25, (uint64_t)v26, v18);
LABEL_9:
  v31 = v14[8];
  v32 = (char *)v8 + v31;
  v33 = v9 + v31;
  v34 = type metadata accessor for Date(0);
  v35 = *(_QWORD *)(v34 - 8);
  v36 = *(void (**)(char *, uint64_t, uint64_t))(v35 + 24);
  v36(v32, v33, v34);
  v37 = v14[9];
  v38 = (uint64_t *)((char *)v8 + v37);
  v39 = (uint64_t *)(v9 + v37);
  v40 = *v39;
  v41 = v39[1];
  sub_10001BBBC(*v39, v41);
  v42 = *v38;
  v43 = v38[1];
  *v38 = v40;
  v38[1] = v41;
  sub_10001BC14(v42, v43);
  v44 = v14[10];
  v45 = (uint64_t *)((char *)v8 + v44);
  v46 = (uint64_t *)(v9 + v44);
  v47 = *(_QWORD *)(v9 + v44 + 8);
  if (*(unint64_t *)((char *)v8 + v44 + 8) >> 60 == 15)
  {
    if (v47 >> 60 != 15)
    {
      v48 = *v46;
      sub_10001BBBC(v48, v47);
      *v45 = v48;
      v45[1] = v47;
      goto LABEL_16;
    }
    goto LABEL_14;
  }
  if (v47 >> 60 == 15)
  {
    sub_1001FD268((uint64_t)v45);
LABEL_14:
    *(_OWORD *)v45 = *(_OWORD *)v46;
    goto LABEL_16;
  }
  v49 = *v46;
  sub_10001BBBC(v49, v47);
  v50 = *v45;
  v51 = v45[1];
  *v45 = v49;
  v45[1] = v47;
  sub_10001BC14(v50, v51);
LABEL_16:
  v52 = v14[11];
  v53 = (uint64_t *)((char *)v8 + v52);
  v54 = (uint64_t *)(v9 + v52);
  v55 = *(_QWORD *)(v9 + v52 + 8);
  if (*(unint64_t *)((char *)v8 + v52 + 8) >> 60 == 15)
  {
    if (v55 >> 60 != 15)
    {
      v56 = *v54;
      sub_10001BBBC(v56, v55);
      *v53 = v56;
      v53[1] = v55;
      goto LABEL_23;
    }
    goto LABEL_21;
  }
  if (v55 >> 60 == 15)
  {
    sub_1001FD268((uint64_t)v53);
LABEL_21:
    *(_OWORD *)v53 = *(_OWORD *)v54;
    goto LABEL_23;
  }
  v57 = *v54;
  sub_10001BBBC(v57, v55);
  v58 = *v53;
  v59 = v53[1];
  *v53 = v57;
  v53[1] = v55;
  sub_10001BC14(v58, v59);
LABEL_23:
  v60 = v14[12];
  v61 = (uint64_t *)((char *)v8 + v60);
  v62 = (uint64_t *)(v9 + v60);
  v63 = *v62;
  v64 = v62[1];
  sub_10001BBBC(*v62, v64);
  v65 = *v61;
  v66 = v61[1];
  *v61 = v63;
  v61[1] = v64;
  sub_10001BC14(v65, v66);
  v67 = v14[13];
  v68 = (uint64_t *)((char *)v8 + v67);
  v69 = (uint64_t *)(v9 + v67);
  v70 = *v69;
  v71 = v69[1];
  sub_10001BBBC(*v69, v71);
  v72 = *v68;
  v73 = v68[1];
  *v68 = v70;
  v68[1] = v71;
  sub_10001BC14(v72, v73);
  v74 = v14[14];
  v75 = (uint64_t *)((char *)v8 + v74);
  v76 = (_QWORD *)(v9 + v74);
  *v75 = *v76;
  v77 = v76[1];
  v75[1] = v77;
  swift_bridgeObjectRetain(v77);
  swift_bridgeObjectRelease();
  v78 = v14[15];
  v79 = (uint64_t *)((char *)v8 + v78);
  v80 = (_QWORD *)(v9 + v78);
  *v79 = *v80;
  v81 = v80[1];
  v79[1] = v81;
  swift_bridgeObjectRetain(v81);
  swift_bridgeObjectRelease();
  *(uint64_t *)((char *)v8 + v14[16]) = *(_QWORD *)(v9 + v14[16]);
  *(uint64_t *)((char *)v8 + v14[17]) = *(_QWORD *)(v9 + v14[17]);
  *((_BYTE *)v8 + v14[18]) = *(_BYTE *)(v9 + v14[18]);
  *((_BYTE *)v8 + v14[19]) = *(_BYTE *)(v9 + v14[19]);
  *((_BYTE *)v8 + v14[20]) = *(_BYTE *)(v9 + v14[20]);
  v82 = v94[7];
  v83 = v96 + v82;
  v84 = v95 + v82;
  *(_BYTE *)v83 = *(_BYTE *)v84;
  *(_QWORD *)(v83 + 8) = *(_QWORD *)(v84 + 8);
  v85 = *(_QWORD *)(v84 + 16);
  *(_QWORD *)(v83 + 16) = v85;
  swift_bridgeObjectRetain(v85);
  swift_bridgeObjectRelease();
  v97((char *)(v96 + v94[8]), v95 + v94[8], v18);
  v86 = v94[9];
  v87 = (char *)(v96 + v86);
  v88 = (const void *)(v95 + v86);
  v89 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v35 + 48);
  v90 = v89(v96 + v86, 1, v34);
  v91 = v89((uint64_t)v88, 1, v34);
  if (!v90)
  {
    if (!v91)
    {
      v36(v87, (uint64_t)v88, v34);
      return v96;
    }
    (*(void (**)(char *, uint64_t))(v35 + 8))(v87, v34);
    goto LABEL_28;
  }
  if (v91)
  {
LABEL_28:
    v92 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
    memcpy(v87, v88, *(_QWORD *)(*(_QWORD *)(v92 - 8) + 64));
    return v96;
  }
  (*(void (**)(char *, const void *, uint64_t))(v35 + 16))(v87, v88, v34);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v35 + 56))(v87, 0, 1, v34);
  return v96;
}

uint64_t sub_1001FD22C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for StableIdentifier(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1001FD268(uint64_t a1)
{
  destroy for KeyRepresentableInternal();
  return a1;
}

uint64_t sub_1001FD29C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  _BYTE *v15;
  _BYTE *v16;
  uint64_t v17;
  int EnumCaseMultiPayload;
  int *v19;
  int *v20;
  uint64_t v21;
  void *v22;
  const void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(uint64_t, uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  const void *v38;
  uint64_t v39;
  void (*v41)(uint64_t, uint64_t, uint64_t);

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v4 = a3[6];
  v5 = a1 + v4;
  v6 = a2 + v4;
  *(_OWORD *)(a1 + v4) = *(_OWORD *)(a2 + v4);
  v7 = (int *)type metadata accessor for OwnedBeaconRecord(0);
  v8 = v7[5];
  v9 = v5 + v8;
  v10 = v6 + v8;
  v11 = type metadata accessor for UUID(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 32);
  v13(v9, v10, v11);
  v14 = v7[6];
  v15 = (_BYTE *)(v5 + v14);
  v16 = (_BYTE *)(v6 + v14);
  v17 = type metadata accessor for StableIdentifier(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v16, v17);
  if (EnumCaseMultiPayload == 3)
  {
    v13((uint64_t)v15, (uint64_t)v16, v11);
    v20 = (int *)sub_10001A9A8((uint64_t *)&unk_1010F46F0);
    *(_OWORD *)&v15[v20[12]] = *(_OWORD *)&v16[v20[12]];
    *(_OWORD *)&v15[v20[16]] = *(_OWORD *)&v16[v20[16]];
    *(_OWORD *)&v15[v20[20]] = *(_OWORD *)&v16[v20[20]];
    v15[v20[24]] = v16[v20[24]];
    swift_storeEnumTagMultiPayload(v15, v17, 3);
  }
  else if (EnumCaseMultiPayload == 2)
  {
    v13((uint64_t)v15, (uint64_t)v16, v11);
    v19 = (int *)sub_10001A9A8(&qword_101106F40);
    *(_OWORD *)&v15[v19[12]] = *(_OWORD *)&v16[v19[12]];
    *(_OWORD *)&v15[v19[16]] = *(_OWORD *)&v16[v19[16]];
    *(_OWORD *)&v15[v19[20]] = *(_OWORD *)&v16[v19[20]];
    *(_WORD *)&v15[v19[24]] = *(_WORD *)&v16[v19[24]];
    *(_OWORD *)&v15[v19[28]] = *(_OWORD *)&v16[v19[28]];
    swift_storeEnumTagMultiPayload(v15, v17, 2);
  }
  else
  {
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  v21 = v7[7];
  v22 = (void *)(v5 + v21);
  v23 = (const void *)(v6 + v21);
  v41 = v13;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v6 + v21, 1, v11))
  {
    v24 = sub_10001A9A8(&qword_1010ED860);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
  }
  else
  {
    v13((uint64_t)v22, (uint64_t)v23, v11);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v22, 0, 1, v11);
  }
  v25 = v7[8];
  v26 = v5 + v25;
  v27 = v6 + v25;
  v28 = type metadata accessor for Date(0);
  v29 = *(_QWORD *)(v28 - 8);
  v30 = v26;
  v31 = *(void (**)(uint64_t, uint64_t, uint64_t))(v29 + 32);
  v31(v30, v27, v28);
  *(_OWORD *)(v5 + v7[9]) = *(_OWORD *)(v6 + v7[9]);
  *(_OWORD *)(v5 + v7[10]) = *(_OWORD *)(v6 + v7[10]);
  *(_OWORD *)(v5 + v7[11]) = *(_OWORD *)(v6 + v7[11]);
  *(_OWORD *)(v5 + v7[12]) = *(_OWORD *)(v6 + v7[12]);
  *(_OWORD *)(v5 + v7[13]) = *(_OWORD *)(v6 + v7[13]);
  *(_OWORD *)(v5 + v7[14]) = *(_OWORD *)(v6 + v7[14]);
  *(_OWORD *)(v5 + v7[15]) = *(_OWORD *)(v6 + v7[15]);
  *(_QWORD *)(v5 + v7[16]) = *(_QWORD *)(v6 + v7[16]);
  *(_QWORD *)(v5 + v7[17]) = *(_QWORD *)(v6 + v7[17]);
  *(_BYTE *)(v5 + v7[18]) = *(_BYTE *)(v6 + v7[18]);
  *(_BYTE *)(v5 + v7[19]) = *(_BYTE *)(v6 + v7[19]);
  *(_BYTE *)(v5 + v7[20]) = *(_BYTE *)(v6 + v7[20]);
  v32 = a3[7];
  v33 = a3[8];
  v34 = a1 + v32;
  v35 = a2 + v32;
  *(_QWORD *)(v34 + 16) = *(_QWORD *)(v35 + 16);
  *(_OWORD *)v34 = *(_OWORD *)v35;
  v41(a1 + v33, a2 + v33, v11);
  v36 = a3[9];
  v37 = (void *)(a1 + v36);
  v38 = (const void *)(a2 + v36);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v29 + 48))(v38, 1, v28))
  {
    v39 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
    memcpy(v37, v38, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
  }
  else
  {
    v31((uint64_t)v37, (uint64_t)v38, v28);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v37, 0, 1, v28);
  }
  return a1;
}

uint64_t sub_1001FD638(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  _BYTE *v20;
  uint64_t v21;
  int EnumCaseMultiPayload;
  int *v23;
  int *v24;
  uint64_t v25;
  void *v26;
  const void *v27;
  uint64_t (*v28)(uint64_t, uint64_t, uint64_t);
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(uint64_t, uint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  const void *v78;
  uint64_t (*v79)(uint64_t, uint64_t, uint64_t);
  int v80;
  int v81;
  uint64_t v82;
  uint64_t v84;
  uint64_t v85;
  int *v86;
  void (*v87)(uint64_t, uint64_t, uint64_t);

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v6;
  swift_bridgeObjectRelease();
  v86 = a3;
  v7 = a3[6];
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = *(_QWORD *)(a1 + v7);
  v11 = *(_QWORD *)(a1 + v7 + 8);
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  sub_10001BC14(v10, v11);
  v12 = (int *)type metadata accessor for OwnedBeaconRecord(0);
  v13 = v12[5];
  v14 = v8 + v13;
  v15 = v9 + v13;
  v16 = type metadata accessor for UUID(0);
  v17 = *(_QWORD *)(v16 - 8);
  v87 = *(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 40);
  v87(v14, v15, v16);
  if (a1 != a2)
  {
    v18 = v12[6];
    v19 = (_BYTE *)(v8 + v18);
    v20 = (_BYTE *)(v9 + v18);
    sub_1001FD22C(v8 + v18);
    v21 = type metadata accessor for StableIdentifier(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v20, v21);
    if (EnumCaseMultiPayload == 3)
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v17 + 32))(v19, v20, v16);
      v24 = (int *)sub_10001A9A8((uint64_t *)&unk_1010F46F0);
      *(_OWORD *)&v19[v24[12]] = *(_OWORD *)&v20[v24[12]];
      *(_OWORD *)&v19[v24[16]] = *(_OWORD *)&v20[v24[16]];
      *(_OWORD *)&v19[v24[20]] = *(_OWORD *)&v20[v24[20]];
      v19[v24[24]] = v20[v24[24]];
      swift_storeEnumTagMultiPayload(v19, v21, 3);
    }
    else if (EnumCaseMultiPayload == 2)
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v17 + 32))(v19, v20, v16);
      v23 = (int *)sub_10001A9A8(&qword_101106F40);
      *(_OWORD *)&v19[v23[12]] = *(_OWORD *)&v20[v23[12]];
      *(_OWORD *)&v19[v23[16]] = *(_OWORD *)&v20[v23[16]];
      *(_OWORD *)&v19[v23[20]] = *(_OWORD *)&v20[v23[20]];
      *(_WORD *)&v19[v23[24]] = *(_WORD *)&v20[v23[24]];
      *(_OWORD *)&v19[v23[28]] = *(_OWORD *)&v20[v23[28]];
      swift_storeEnumTagMultiPayload(v19, v21, 2);
    }
    else
    {
      memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    }
  }
  v84 = a1;
  v25 = v12[7];
  v26 = (void *)(v8 + v25);
  v27 = (const void *)(v9 + v25);
  v28 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v17 + 48);
  v29 = v28(v8 + v25, 1, v16);
  v30 = v28((uint64_t)v27, 1, v16);
  if (v29)
  {
    if (v30)
    {
      v31 = sub_10001A9A8(&qword_1010ED860);
      memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v17 + 32))(v26, v27, v16);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v26, 0, 1, v16);
    }
  }
  else if (v30)
  {
    (*(void (**)(void *, uint64_t))(v17 + 8))(v26, v16);
    v32 = sub_10001A9A8(&qword_1010ED860);
    memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
  }
  else
  {
    v87((uint64_t)v26, (uint64_t)v27, v16);
  }
  v33 = v84;
  v34 = v12[8];
  v35 = v8 + v34;
  v36 = v9 + v34;
  v37 = type metadata accessor for Date(0);
  v85 = *(_QWORD *)(v37 - 8);
  v38 = v36;
  v39 = *(void (**)(uint64_t, uint64_t, uint64_t))(v85 + 40);
  v39(v35, v38, v37);
  v40 = v12[9];
  v41 = *(_QWORD *)(v8 + v40);
  v42 = *(_QWORD *)(v8 + v40 + 8);
  *(_OWORD *)(v8 + v40) = *(_OWORD *)(v9 + v40);
  sub_10001BC14(v41, v42);
  v43 = v12[10];
  v44 = v8 + v43;
  v45 = v9 + v43;
  v46 = *(_QWORD *)(v8 + v43 + 8);
  if (v46 >> 60 == 15)
    goto LABEL_17;
  v47 = *(_QWORD *)(v45 + 8);
  if (v47 >> 60 == 15)
  {
    sub_1001FD268(v44);
LABEL_17:
    *(_OWORD *)v44 = *(_OWORD *)v45;
    goto LABEL_19;
  }
  v48 = *(_QWORD *)v44;
  *(_QWORD *)v44 = *(_QWORD *)v45;
  *(_QWORD *)(v44 + 8) = v47;
  sub_10001BC14(v48, v46);
LABEL_19:
  v49 = v12[11];
  v50 = v8 + v49;
  v51 = v9 + v49;
  v52 = *(_QWORD *)(v8 + v49 + 8);
  if (v52 >> 60 == 15)
  {
LABEL_22:
    *(_OWORD *)v50 = *(_OWORD *)v51;
    goto LABEL_24;
  }
  v53 = *(_QWORD *)(v51 + 8);
  if (v53 >> 60 == 15)
  {
    sub_1001FD268(v50);
    goto LABEL_22;
  }
  v54 = *(_QWORD *)v50;
  *(_QWORD *)v50 = *(_QWORD *)v51;
  *(_QWORD *)(v50 + 8) = v53;
  sub_10001BC14(v54, v52);
LABEL_24:
  v55 = v12[12];
  v56 = *(_QWORD *)(v8 + v55);
  v57 = *(_QWORD *)(v8 + v55 + 8);
  *(_OWORD *)(v8 + v55) = *(_OWORD *)(v9 + v55);
  sub_10001BC14(v56, v57);
  v58 = v12[13];
  v59 = *(_QWORD *)(v8 + v58);
  v60 = *(_QWORD *)(v8 + v58 + 8);
  *(_OWORD *)(v8 + v58) = *(_OWORD *)(v9 + v58);
  sub_10001BC14(v59, v60);
  v61 = v12[14];
  v62 = (_QWORD *)(v8 + v61);
  v63 = (uint64_t *)(v9 + v61);
  v65 = *v63;
  v64 = v63[1];
  *v62 = v65;
  v62[1] = v64;
  swift_bridgeObjectRelease();
  v66 = v12[15];
  v67 = (_QWORD *)(v8 + v66);
  v68 = (uint64_t *)(v9 + v66);
  v70 = *v68;
  v69 = v68[1];
  *v67 = v70;
  v67[1] = v69;
  swift_bridgeObjectRelease();
  *(_QWORD *)(v8 + v12[16]) = *(_QWORD *)(v9 + v12[16]);
  *(_QWORD *)(v8 + v12[17]) = *(_QWORD *)(v9 + v12[17]);
  *(_BYTE *)(v8 + v12[18]) = *(_BYTE *)(v9 + v12[18]);
  *(_BYTE *)(v8 + v12[19]) = *(_BYTE *)(v9 + v12[19]);
  *(_BYTE *)(v8 + v12[20]) = *(_BYTE *)(v9 + v12[20]);
  v71 = v86[7];
  v72 = v33 + v71;
  v73 = a2 + v71;
  *(_BYTE *)v72 = *(_BYTE *)v73;
  v75 = *(_QWORD *)(v73 + 8);
  v74 = *(_QWORD *)(v73 + 16);
  *(_QWORD *)(v72 + 8) = v75;
  *(_QWORD *)(v72 + 16) = v74;
  swift_bridgeObjectRelease();
  v87(v33 + v86[8], a2 + v86[8], v16);
  v76 = v86[9];
  v77 = (void *)(v33 + v76);
  v78 = (const void *)(a2 + v76);
  v79 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v85 + 48);
  v80 = v79(v33 + v76, 1, v37);
  v81 = v79((uint64_t)v78, 1, v37);
  if (!v80)
  {
    if (!v81)
    {
      v39((uint64_t)v77, (uint64_t)v78, v37);
      return v33;
    }
    (*(void (**)(void *, uint64_t))(v85 + 8))(v77, v37);
    goto LABEL_29;
  }
  if (v81)
  {
LABEL_29:
    v82 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
    memcpy(v77, v78, *(_QWORD *)(*(_QWORD *)(v82 - 8) + 64));
    return v33;
  }
  (*(void (**)(void *, const void *, uint64_t))(v85 + 32))(v77, v78, v37);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v85 + 56))(v77, 0, 1, v37);
  return v33;
}

uint64_t sub_1001FDBB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001FDBC4);
}

uint64_t sub_1001FDBC4(uint64_t a1, uint64_t a2, int *a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for OwnedBeaconRecord(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = a3[6];
    }
    else
    {
      v12 = type metadata accessor for UUID(0);
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
      {
        v10 = v12;
        v11 = a3[8];
      }
      else
      {
        v10 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
        v9 = *(_QWORD *)(v10 - 8);
        v11 = a3[9];
      }
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t sub_1001FDC8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001FDC98);
}

uint64_t sub_1001FDC98(uint64_t result, uint64_t a2, int a3, int *a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 16) = (a2 - 1);
  }
  else
  {
    v8 = type metadata accessor for OwnedBeaconRecord(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = a4[6];
    }
    else
    {
      v12 = type metadata accessor for UUID(0);
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == a3)
      {
        v10 = v12;
        v11 = a4[8];
      }
      else
      {
        v10 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
        v9 = *(_QWORD *)(v10 - 8);
        v11 = a4[9];
      }
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

uint64_t type metadata accessor for ShareInstruction(uint64_t a1)
{
  uint64_t result;

  result = qword_1010F2F30;
  if (!qword_1010F2F30)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ShareInstruction);
  return result;
}

void sub_1001FDD98(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[6];

  v8[0] = &unk_100E2DE68;
  v8[1] = &unk_100E2DE80;
  v2 = type metadata accessor for OwnedBeaconRecord(319);
  if (v3 <= 0x3F)
  {
    v8[2] = *(_QWORD *)(v2 - 8) + 64;
    v8[3] = &unk_100E2DE98;
    v4 = type metadata accessor for UUID(319);
    if (v5 <= 0x3F)
    {
      v8[4] = *(_QWORD *)(v4 - 8) + 64;
      sub_1000A813C(319);
      if (v7 <= 0x3F)
      {
        v8[5] = *(_QWORD *)(v6 - 8) + 64;
        swift_initStructMetadata(a1, 256, 6, v8, a1 + 16);
      }
    }
  }
}

void sub_1001FDE54(uint64_t a1)
{
  unsigned __int8 *v1;
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v2 = v1;
  v4 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  __chkstk_darwin(v8);
  v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  Hasher._combine(_:)(*v1);
  v11 = *((_QWORD *)v1 + 1);
  v12 = *((_QWORD *)v2 + 2);
  swift_bridgeObjectRetain(v12);
  String.hash(into:)(a1, v11, v12);
  swift_bridgeObjectRelease();
  v13 = type metadata accessor for ShareInstruction(0);
  sub_1009A31E0(a1);
  v14 = &v2[*(int *)(v13 + 28)];
  v15 = *((_QWORD *)v14 + 1);
  v16 = *((_QWORD *)v14 + 2);
  Hasher._combine(_:)(*v14);
  swift_bridgeObjectRetain(v16);
  String.hash(into:)(a1, v15, v16);
  swift_bridgeObjectRelease();
  v17 = type metadata accessor for UUID(0);
  v18 = sub_100006204(&qword_1010F98B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(a1, v17, v18);
  sub_10001F674((uint64_t)&v2[*(int *)(v13 + 36)], (uint64_t)v10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v10, 1, v4) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v10, v4);
    Hasher._combine(_:)(1u);
    v19 = sub_100006204((unint64_t *)&unk_1010ED800, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    dispatch thunk of Hashable.hash(into:)(a1, v4, v19);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
}

Swift::Int sub_1001FE068()
{
  unsigned __int8 *v0;
  unsigned __int8 *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v20[9];

  v1 = v0;
  v2 = type metadata accessor for Date(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v20[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  __chkstk_darwin(v6);
  v8 = (char *)&v20[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  Hasher.init(_seed:)(v20);
  Hasher._combine(_:)(*v0);
  v9 = *((_QWORD *)v0 + 1);
  v10 = *((_QWORD *)v1 + 2);
  swift_bridgeObjectRetain(v10);
  String.hash(into:)(v20, v9, v10);
  swift_bridgeObjectRelease();
  v11 = type metadata accessor for ShareInstruction(0);
  sub_1009A31E0((uint64_t)v20);
  v12 = &v1[*(int *)(v11 + 28)];
  v13 = *((_QWORD *)v12 + 1);
  v14 = *((_QWORD *)v12 + 2);
  Hasher._combine(_:)(*v12);
  swift_bridgeObjectRetain(v14);
  String.hash(into:)(v20, v13, v14);
  swift_bridgeObjectRelease();
  v15 = type metadata accessor for UUID(0);
  v16 = sub_100006204(&qword_1010F98B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(v20, v15, v16);
  sub_10001F674((uint64_t)&v1[*(int *)(v11 + 36)], (uint64_t)v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v8, 1, v2) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v5, v8, v2);
    Hasher._combine(_:)(1u);
    v17 = sub_100006204((unint64_t *)&unk_1010ED800, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    dispatch thunk of Hashable.hash(into:)(v20, v2, v17);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
  return Hasher._finalize()();
}

Swift::Int sub_1001FE298(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v2;
  unsigned __int8 *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v22[9];

  v4 = v2;
  v5 = type metadata accessor for Date(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v22[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  __chkstk_darwin(v9);
  v11 = (char *)&v22[-1] - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  Hasher.init(_seed:)(v22);
  Hasher._combine(_:)(*v2);
  v12 = *((_QWORD *)v2 + 1);
  v13 = *((_QWORD *)v4 + 2);
  swift_bridgeObjectRetain(v13);
  String.hash(into:)(v22, v12, v13);
  swift_bridgeObjectRelease();
  sub_1009A31E0((uint64_t)v22);
  v14 = &v4[*(int *)(a2 + 28)];
  v15 = *((_QWORD *)v14 + 1);
  v16 = *((_QWORD *)v14 + 2);
  Hasher._combine(_:)(*v14);
  swift_bridgeObjectRetain(v16);
  String.hash(into:)(v22, v15, v16);
  swift_bridgeObjectRelease();
  v17 = type metadata accessor for UUID(0);
  v18 = sub_100006204(&qword_1010F98B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(v22, v17, v18);
  sub_10001F674((uint64_t)&v4[*(int *)(a2 + 36)], (uint64_t)v11);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v11, 1, v5) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v11, v5);
    Hasher._combine(_:)(1u);
    v19 = sub_100006204((unint64_t *)&unk_1010ED800, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    dispatch thunk of Hashable.hash(into:)(v22, v5, v19);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
  return Hasher._finalize()();
}

uint64_t sub_1001FE4C0()
{
  return sub_100006204(&qword_1010F2F78, type metadata accessor for ShareInstruction, (uint64_t)&unk_100E2DEB0);
}

BOOL sub_1001FE4EC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  _BOOL8 result;
  int *v26;
  uint64_t v27;
  unsigned __int8 *v28;
  int v29;
  unsigned __int8 *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int (*v39)(uint64_t, uint64_t, uint64_t);
  uint64_t v40;
  char v41;
  void (*v42)(char *, uint64_t);
  uint64_t v43;
  char *v44;

  v4 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A9A8(&qword_1010ED570);
  __chkstk_darwin(v8);
  v10 = (char *)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  v12 = __chkstk_darwin(v11);
  v14 = (char *)&v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v12);
  v17 = (char *)&v43 - v16;
  __chkstk_darwin(v15);
  v19 = (char *)&v43 - v18;
  if (*a1 != *a2)
    return 0;
  v44 = v10;
  v20 = *((_QWORD *)a1 + 1);
  v21 = *((_QWORD *)a1 + 2);
  v22 = *((_QWORD *)a2 + 1);
  v23 = *((_QWORD *)a2 + 2);
  if (v20 == v22 && v21 == v23
    || (v24 = _stringCompareWithSmolCheck(_:_:expecting:)(v20, v21, v22, v23, 0), result = 0, (v24 & 1) != 0))
  {
    v26 = (int *)type metadata accessor for ShareInstruction(0);
    if ((sub_1009A6610((uint64_t *)&a1[v26[6]], (uint64_t)&a2[v26[6]]) & 1) == 0)
      return 0;
    v27 = v26[7];
    v28 = &a1[v27];
    v29 = a1[v27];
    v30 = &a2[v27];
    if (v29 != *v30)
      return 0;
    v31 = *((_QWORD *)v28 + 1);
    v32 = *((_QWORD *)v28 + 2);
    v33 = *((_QWORD *)v30 + 1);
    v34 = *((_QWORD *)v30 + 2);
    if (v31 == v33 && v32 == v34
      || (v35 = _stringCompareWithSmolCheck(_:_:expecting:)(v31, v32, v33, v34, 0), result = 0, (v35 & 1) != 0))
    {
      if ((static UUID.== infix(_:_:)(&a1[v26[8]], &a2[v26[8]]) & 1) != 0)
      {
        sub_10001F674((uint64_t)&a1[v26[9]], (uint64_t)v19);
        sub_10001F674((uint64_t)&a2[v26[9]], (uint64_t)v17);
        v36 = *(int *)(v8 + 48);
        v37 = (uint64_t)v44;
        v38 = (uint64_t)&v44[v36];
        sub_10001F674((uint64_t)v19, (uint64_t)v44);
        sub_10001F674((uint64_t)v17, v38);
        v39 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
        if (v39(v37, 1, v4) == 1)
        {
          sub_100004048((uint64_t)v17, (uint64_t *)&unk_1010EA690);
          sub_100004048((uint64_t)v19, (uint64_t *)&unk_1010EA690);
          if (v39(v38, 1, v4) == 1)
          {
            sub_100004048(v37, (uint64_t *)&unk_1010EA690);
            return 1;
          }
        }
        else
        {
          sub_10001F674(v37, (uint64_t)v14);
          if (v39(v38, 1, v4) != 1)
          {
            (*(void (**)(char *, uint64_t, uint64_t))(v5 + 32))(v7, v38, v4);
            v40 = sub_100006204(&qword_1010EDA20, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
            v41 = dispatch thunk of static Equatable.== infix(_:_:)(v14, v7, v4, v40);
            v42 = *(void (**)(char *, uint64_t))(v5 + 8);
            v42(v7, v4);
            sub_100004048((uint64_t)v17, (uint64_t *)&unk_1010EA690);
            sub_100004048((uint64_t)v19, (uint64_t *)&unk_1010EA690);
            v42(v14, v4);
            sub_100004048(v37, (uint64_t *)&unk_1010EA690);
            return (v41 & 1) != 0;
          }
          sub_100004048((uint64_t)v17, (uint64_t *)&unk_1010EA690);
          sub_100004048((uint64_t)v19, (uint64_t *)&unk_1010EA690);
          (*(void (**)(char *, uint64_t))(v5 + 8))(v14, v4);
        }
        sub_100004048(v37, &qword_1010ED570);
      }
      return 0;
    }
  }
  return result;
}

uint64_t *sub_1001FE888(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v17 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = *a2;
    v8 = a2[1];
    sub_10001BBBC(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    v9 = a3[5];
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for UUID(0);
    v13 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
    v13(v10, v11, v12);
    v13((char *)a1 + a3[6], (char *)a2 + a3[6], v12);
    v13((char *)a1 + a3[7], (char *)a2 + a3[7], v12);
    v13((char *)a1 + a3[8], (char *)a2 + a3[8], v12);
    v14 = a3[9];
    v15 = a3[10];
    v16 = *(uint64_t *)((char *)a2 + v14);
    *(uint64_t *)((char *)a1 + v14) = v16;
    *((_BYTE *)a1 + v15) = *((_BYTE *)a2 + v15);
    swift_bridgeObjectRetain(v16);
  }
  return a1;
}

uint64_t sub_1001FE98C(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);

  sub_10001BC14(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  v4 = a1 + a2[5];
  v5 = type metadata accessor for UUID(0);
  v6 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v6(v4, v5);
  v6(a1 + a2[6], v5);
  v6(a1 + a2[7], v5);
  v6(a1 + a2[8], v5);
  return swift_bridgeObjectRelease();
}

uint64_t *sub_1001FEA28(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = *a2;
  v7 = a2[1];
  sub_10001BBBC(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  v8 = a3[5];
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for UUID(0);
  v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
  v12(v9, v10, v11);
  v12((char *)a1 + a3[6], (char *)a2 + a3[6], v11);
  v12((char *)a1 + a3[7], (char *)a2 + a3[7], v11);
  v12((char *)a1 + a3[8], (char *)a2 + a3[8], v11);
  v13 = a3[9];
  v14 = a3[10];
  v15 = *(uint64_t *)((char *)a2 + v13);
  *(uint64_t *)((char *)a1 + v13) = v15;
  *((_BYTE *)a1 + v14) = *((_BYTE *)a2 + v14);
  swift_bridgeObjectRetain(v15);
  return a1;
}

uint64_t *sub_1001FEB00(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  void (*v14)(char *, char *, uint64_t);
  uint64_t v15;
  uint64_t v16;

  v6 = *a2;
  v7 = a2[1];
  sub_10001BBBC(*a2, v7);
  v8 = *a1;
  v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  sub_10001BC14(v8, v9);
  v10 = a3[5];
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for UUID(0);
  v14 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 24);
  v14(v11, v12, v13);
  v14((char *)a1 + a3[6], (char *)a2 + a3[6], v13);
  v14((char *)a1 + a3[7], (char *)a2 + a3[7], v13);
  v14((char *)a1 + a3[8], (char *)a2 + a3[8], v13);
  v15 = a3[9];
  v16 = *(uint64_t *)((char *)a2 + v15);
  *(uint64_t *)((char *)a1 + v15) = v16;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRelease();
  *((_BYTE *)a1 + a3[10]) = *((_BYTE *)a2 + a3[10]);
  return a1;
}

char *sub_1001FEBF0(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for UUID(0);
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v10(&a1[a3[6]], &a2[a3[6]], v9);
  v10(&a1[a3[7]], &a2[a3[7]], v9);
  v10(&a1[a3[8]], &a2[a3[8]], v9);
  v11 = a3[10];
  *(_QWORD *)&a1[a3[9]] = *(_QWORD *)&a2[a3[9]];
  a1[v11] = a2[v11];
  return a1;
}

uint64_t *sub_1001FECB8(uint64_t *a1, char *a2, int *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);

  v6 = *a1;
  v7 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_10001BC14(v6, v7);
  v8 = a3[5];
  v9 = (char *)a1 + v8;
  v10 = &a2[v8];
  v11 = type metadata accessor for UUID(0);
  v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 40);
  v12(v9, v10, v11);
  v12((char *)a1 + a3[6], &a2[a3[6]], v11);
  v12((char *)a1 + a3[7], &a2[a3[7]], v11);
  v12((char *)a1 + a3[8], &a2[a3[8]], v11);
  *(uint64_t *)((char *)a1 + a3[9]) = *(_QWORD *)&a2[a3[9]];
  swift_bridgeObjectRelease();
  *((_BYTE *)a1 + a3[10]) = a2[a3[10]];
  return a1;
}

uint64_t sub_1001FED98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + *(int *)(a3 + 20), a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 36));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_1001FEE18(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + *(int *)(a4 + 20), a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 36)) = (a2 - 1);
  return result;
}

uint64_t sub_1001FEE94(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  void *v10;

  v4 = &unk_100E2DF68;
  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v5 = *(_QWORD *)(result - 8) + 64;
    v6 = v5;
    v7 = v5;
    v8 = v5;
    v9 = (char *)&value witness table for Builtin.BridgeObject + 64;
    v10 = &unk_100E2DF80;
    swift_initStructMetadata(a1, 256, 7, &v4, a1 + 16);
    return 0;
  }
  return result;
}

void sub_1001FEF24(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  id v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int (*v33)(char *, uint64_t, uint64_t);
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  _BYTE *v37;
  id v38;
  NSString v39;
  void *v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  _BYTE *v46;
  unint64_t v47;
  _BYTE *v48;
  NSString v49;
  id v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  _BYTE *v54;
  void (*v55)(char *, uint64_t);
  char *v56;
  uint64_t v57;
  NSString v58;
  id v59;
  char *v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  _BYTE *v64;
  char *v65;
  char *v66;
  NSString v67;
  id v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  _BYTE *v78;
  NSString v79;
  id v80;
  unint64_t v81;
  uint64_t v82;
  _BYTE *v83;
  id v84;
  id v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  int *v90;
  uint64_t v91;
  void (*v92)(char *, char *, uint64_t);
  void *v93;
  uint64_t v94;
  void (*v95)(char *, char *, uint64_t);
  char *v96;
  uint64_t *v97;
  uint64_t v98;
  char *v99;
  char *v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;

  v97 = a2;
  v3 = sub_10001A9A8(&qword_1010ED860);
  v4 = __chkstk_darwin(v3);
  v6 = (char *)&v93 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v4);
  v9 = (char *)&v93 - v8;
  v10 = __chkstk_darwin(v7);
  v12 = (char *)&v93 - v11;
  __chkstk_darwin(v10);
  v14 = (char *)&v93 - v13;
  v102 = type metadata accessor for UUID(0);
  v15 = *(_QWORD *)(v102 - 8);
  v16 = __chkstk_darwin(v102);
  v99 = (char *)&v93 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v16);
  v100 = (char *)&v93 - v19;
  v20 = __chkstk_darwin(v18);
  v22 = (char *)&v93 - v21;
  v23 = __chkstk_darwin(v20);
  v101 = (char *)&v93 - v24;
  v25 = CKRecord.recordType.getter(v23);
  if (v25 == 0xD000000000000013 && v26 == 0x8000000100E2DF30)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v27 = _stringCompareWithSmolCheck(_:_:expecting:)(v25, v26, 0xD000000000000013, 0x8000000100E2DF30, 0);
    swift_bridgeObjectRelease();
    if ((v27 & 1) == 0)
    {
      v47 = sub_100200B78();
      v36 = swift_allocError(&type metadata for MemberSharingCircle.ConversionError, v47, 0, 0);
      *v48 = 0;
      goto LABEL_13;
    }
  }
  v96 = v22;
  v28 = objc_msgSend(a1, "recordID");
  v29 = objc_msgSend(v28, "recordName");

  v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
  v32 = v31;

  UUID.init(uuidString:)(v30, v32);
  swift_bridgeObjectRelease();
  v33 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48);
  v34 = v102;
  if (v33(v14, 1, v102) != 1)
  {
    v95 = *(void (**)(char *, char *, uint64_t))(v15 + 32);
    v95(v101, v14, v34);
    v38 = objc_msgSend(a1, "encryptedValues");
    v39 = String._bridgeToObjectiveC()();
    v40 = v38;
    v41 = objc_msgSend(v38, "objectForKeyedSubscript:", v39);

    if (!v41)
      goto LABEL_11;
    v105 = (unint64_t)v41;
    v42 = sub_10001A9A8((uint64_t *)&unk_1010ED8D0);
    if ((swift_dynamicCast(&v103, &v105, v42, &type metadata for String, 6) & 1) == 0)
      goto LABEL_11;
    UUID.init(uuidString:)(v103, v104);
    swift_bridgeObjectRelease();
    v43 = v102;
    if (v33(v12, 1, v102) == 1)
    {
      sub_1001C0844((uint64_t)v12);
LABEL_11:
      v44 = sub_100200B78();
      v45 = swift_allocError(&type metadata for MemberSharingCircle.ConversionError, v44, 0, 0);
      *v46 = 2;
      swift_willThrow(v45);
      swift_unknownObjectRelease(v40);

      (*(void (**)(char *, uint64_t))(v15 + 8))(v101, v102);
      return;
    }
    v94 = v42;
    v95(v96, v12, v43);
    v49 = String._bridgeToObjectiveC()();
    v50 = objc_msgSend(v40, "objectForKeyedSubscript:", v49);

    if (!v50)
      goto LABEL_19;
    v105 = (unint64_t)v50;
    if ((swift_dynamicCast(&v103, &v105, v94, &type metadata for String, 6) & 1) == 0)
      goto LABEL_19;
    UUID.init(uuidString:)(v103, v104);
    swift_bridgeObjectRelease();
    v51 = v102;
    if (v33(v9, 1, v102) == 1)
    {
      sub_1001C0844((uint64_t)v9);
LABEL_19:
      v52 = sub_100200B78();
      v53 = swift_allocError(&type metadata for MemberSharingCircle.ConversionError, v52, 0, 0);
      *v54 = 3;
      swift_willThrow(v53);
      swift_unknownObjectRelease(v40);

      v55 = *(void (**)(char *, uint64_t))(v15 + 8);
      v56 = v96;
      v57 = v102;
LABEL_20:
      v55(v56, v57);
      v55(v101, v57);
      return;
    }
    v95(v100, v9, v51);
    v58 = String._bridgeToObjectiveC()();
    v59 = objc_msgSend(v40, "objectForKeyedSubscript:", v58);

    v60 = v96;
    if (v59)
    {
      v105 = (unint64_t)v59;
      if ((swift_dynamicCast(&v103, &v105, v94, &type metadata for String, 6) & 1) != 0)
      {
        UUID.init(uuidString:)(v103, v104);
        swift_bridgeObjectRelease();
        v61 = v102;
        if (v33(v6, 1, v102) != 1)
        {
          v66 = v99;
          v95(v99, v6, v61);
          v67 = String._bridgeToObjectiveC()();
          v68 = objc_msgSend(v40, "objectForKeyedSubscript:", v67);

          v60 = v96;
          if (v68
            && (v105 = (unint64_t)v68,
                (swift_dynamicCast(&v103, &v105, v94, &type metadata for Data, 6) & 1) != 0))
          {
            v70 = v103;
            v69 = v104;
            v71 = type metadata accessor for PropertyListDecoder(0);
            swift_allocObject(v71, *(unsigned int *)(v71 + 48), *(unsigned __int16 *)(v71 + 52));
            v72 = PropertyListDecoder.init()();
            v73 = sub_10001A9A8(&qword_1010F3040);
            v74 = sub_1002009A8();
            v75 = v98;
            dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(v73, v70, v69, v73, v74);
            if (v75)
            {
              swift_release(v72);
              sub_10001BC14(v70, v69);
              swift_unknownObjectRelease(v40);

              v55 = *(void (**)(char *, uint64_t))(v15 + 8);
              v57 = v102;
              v55(v66, v102);
              v55(v100, v57);
              v56 = v96;
              goto LABEL_20;
            }
            swift_release(v72);
            v98 = v103;
            v79 = String._bridgeToObjectiveC()();
            v80 = objc_msgSend(v40, "objectForKeyedSubscript:", v79);

            if (v80)
            {
              v103 = (uint64_t)v80;
              if ((swift_dynamicCast(&v105, &v103, v94, &type metadata for Int, 6) & 1) != 0)
              {
                LODWORD(v94) = sub_100357784(v105);
                if (v94 != 6)
                {
                  v93 = objc_autoreleasePoolPush();
                  v84 = objc_msgSend(objc_allocWithZone((Class)NSKeyedArchiver), "initRequiringSecureCoding:", 1);
                  objc_msgSend(a1, "encodeSystemFieldsWithCoder:", v84);
                  objc_msgSend(v84, "finishEncoding");
                  v85 = objc_msgSend(v84, "encodedData");
                  v86 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v85);
                  v88 = v87;

                  objc_autoreleasePoolPop(v93);
                  sub_10001BC14(v70, v69);
                  swift_unknownObjectRelease(v40);
                  v89 = v97;
                  *v97 = v86;
                  v89[1] = v88;
                  v90 = (int *)type metadata accessor for MemberSharingCircle(0);
                  v91 = v102;
                  v92 = v95;
                  v95((char *)v89 + v90[5], v101, v102);
                  v92((char *)v89 + v90[6], v96, v91);
                  v92((char *)v89 + v90[7], v100, v91);
                  v92((char *)v89 + v90[8], v99, v91);
                  *(uint64_t *)((char *)v89 + v90[9]) = v98;
                  *((_BYTE *)v89 + v90[10]) = v94;
                  return;
                }
              }
              swift_bridgeObjectRelease();
              v60 = v96;
              v66 = v99;
            }
            else
            {
              swift_bridgeObjectRelease();
              v60 = v96;
            }
            v81 = sub_100200B78();
            v82 = swift_allocError(&type metadata for MemberSharingCircle.ConversionError, v81, 0, 0);
            *v83 = 6;
            swift_willThrow(v82);
            sub_10001BC14(v70, v69);
          }
          else
          {
            v76 = sub_100200B78();
            v77 = swift_allocError(&type metadata for MemberSharingCircle.ConversionError, v76, 0, 0);
            *v78 = 5;
            swift_willThrow(v77);
          }
          swift_unknownObjectRelease(v40);

          v55 = *(void (**)(char *, uint64_t))(v15 + 8);
          v57 = v102;
          v55(v66, v102);
          v65 = v100;
          goto LABEL_26;
        }
        sub_1001C0844((uint64_t)v6);
      }
    }
    v62 = sub_100200B78();
    v63 = swift_allocError(&type metadata for MemberSharingCircle.ConversionError, v62, 0, 0);
    *v64 = 4;
    swift_willThrow(v63);
    swift_unknownObjectRelease(v40);

    v55 = *(void (**)(char *, uint64_t))(v15 + 8);
    v65 = v100;
    v57 = v102;
LABEL_26:
    v55(v65, v57);
    v56 = v60;
    goto LABEL_20;
  }
  sub_1001C0844((uint64_t)v14);
  v35 = sub_100200B78();
  v36 = swift_allocError(&type metadata for MemberSharingCircle.ConversionError, v35, 0, 0);
  *v37 = 1;
LABEL_13:
  swift_willThrow(v36);

}

uint64_t sub_1001FF908(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1001FF940 + 4 * byte_100E2DF20[a1]))(0xD000000000000010, 0x8000000100EC2FE0);
}

uint64_t sub_1001FF940()
{
  return 0x696669746E656469;
}

uint64_t sub_1001FF980()
{
  return 0x72656E776FLL;
}

uint64_t sub_1001FF994()
{
  return 0x737265626D656DLL;
}

uint64_t sub_1001FF9AC()
{
  return 0x6E61747065636361;
}

uint64_t sub_1001FF9D0()
{
  unsigned __int8 *v0;

  return sub_1001FF908(*v0);
}

uint64_t sub_1001FF9D8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100200F3C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1001FF9FC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100200964();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001FFA24(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100200964();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_1001FFA50()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  void *v5;
  uint64_t v6;

  v0 = type metadata accessor for URL(0);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = __chkstk_darwin(v0);
  v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000234D8(v2, qword_1011B6C00);
  sub_10001A9E8(v0, (uint64_t)qword_1011B6C00);
  v5 = objc_autoreleasePoolPush();
  type metadata accessor for BeaconStore(0);
  sub_1007EC9B8((uint64_t)v4);
  URL.appendingPathComponent(_:isDirectory:)(0xD000000000000013, 0x8000000100E2DF30, 1);
  (*(void (**)(char *, uint64_t))(v1 + 8))(v4, v0);
  objc_autoreleasePoolPop(v5);
}

uint64_t sub_1001FFB30(id *a1)
{
  uint64_t v1;
  uint64_t v2;
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t ObjectType;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  void *v37;

  v2 = v1;
  v3 = *a1;
  v4 = objc_msgSend(*a1, "encryptedValues");
  v5 = static os_log_type_t.debug.getter(v4);
  if (qword_1010EA260 != -1)
    swift_once(&qword_1010EA260, sub_100B5DA30);
  v6 = qword_1011B7D40;
  v7 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v8 = swift_allocObject(v7, 72, 7);
  *(_OWORD *)(v8 + 16) = xmmword_100E22B00;
  v9 = v3;
  v10 = objc_msgSend(v9, "description", 1, 2);
  v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
  v13 = v12;

  *(_QWORD *)(v8 + 56) = &type metadata for String;
  *(_QWORD *)(v8 + 64) = sub_10001AA00();
  *(_QWORD *)(v8 + 32) = v11;
  *(_QWORD *)(v8 + 40) = v13;
  os_log(_:dso:log:_:_:)(v5, &_mh_execute_header, v6, "Updating MemberSharingCircle record: %@", 39, 2, v8);
  swift_bridgeObjectRelease();
  v14 = type metadata accessor for PropertyListEncoder(0);
  v15 = swift_allocObject(v14, *(unsigned int *)(v14 + 48), *(unsigned __int16 *)(v14 + 52));
  PropertyListEncoder.init()(v15);
  v16 = type metadata accessor for MemberSharingCircle(0);
  v34 = *(_QWORD *)(v2 + *(int *)(v16 + 36));
  swift_bridgeObjectRetain(v34);
  v17 = sub_10001A9A8(&qword_1010F3040);
  v18 = sub_100200860();
  v19 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(&v34, v17, v18);
  v21 = v20;
  ObjectType = swift_getObjectType(v4);
  swift_release();
  v23 = swift_bridgeObjectRelease();
  v24 = UUID.uuidString.getter(v23);
  v36 = &type metadata for String;
  v37 = &protocol witness table for String;
  v34 = v24;
  v35 = v25;
  v26 = CKRecordKeyValueSetting.subscript.setter(&v34, 0xD000000000000010, 0x8000000100EC28D0, ObjectType);
  v27 = UUID.uuidString.getter(v26);
  v36 = &type metadata for String;
  v37 = &protocol witness table for String;
  v34 = v27;
  v35 = v28;
  v29 = CKRecordKeyValueSetting.subscript.setter(&v34, 0xD000000000000017, 0x8000000100ECBB00, ObjectType);
  v30 = UUID.uuidString.getter(v29);
  v36 = &type metadata for String;
  v37 = &protocol witness table for String;
  v34 = v30;
  v35 = v31;
  CKRecordKeyValueSetting.subscript.setter(&v34, 0x72656E776FLL, 0xE500000000000000, ObjectType);
  v36 = &type metadata for Data;
  v37 = &protocol witness table for Data;
  v34 = v19;
  v35 = v21;
  sub_10001BBBC(v19, v21);
  CKRecordKeyValueSetting.subscript.setter(&v34, 0x737265626D656DLL, 0xE700000000000000, ObjectType);
  v32 = *(unsigned __int8 *)(v2 + *(int *)(v16 + 40));
  v36 = &type metadata for Int;
  v37 = &protocol witness table for Int;
  v34 = v32;
  CKRecordKeyValueSetting.subscript.setter(&v34, 0x6E61747065636361, 0xEF65746174536563, ObjectType);
  swift_unknownObjectRelease(v4);
  return sub_10001BC14(v19, v21);
}

uint64_t sub_1001FFF28(_QWORD *a1)
{
  _OWORD *v1;
  uint64_t v2;
  _OWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  __int128 v24;
  char v25;

  v3 = v1;
  v5 = sub_10001A9A8((uint64_t *)&unk_1010F3098);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  v11 = sub_100200964();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for MemberSharingCircle.CodingKeys, &type metadata for MemberSharingCircle.CodingKeys, v11, v9, v10);
  v24 = *v3;
  v25 = 0;
  v12 = sub_100036A58();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v24, &v25, v5, &type metadata for Data, v12);
  if (!v2)
  {
    v13 = (int *)type metadata accessor for MemberSharingCircle(0);
    v14 = (char *)v3 + v13[5];
    LOBYTE(v24) = 1;
    v15 = type metadata accessor for UUID(0);
    v16 = sub_100006204(&qword_1010EDAC0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v14, &v24, v5, v15, v16);
    v17 = (char *)v3 + v13[6];
    LOBYTE(v24) = 2;
    KeyedEncodingContainer.encode<A>(_:forKey:)(v17, &v24, v5, v15, v16);
    v18 = (char *)v3 + v13[7];
    LOBYTE(v24) = 3;
    KeyedEncodingContainer.encode<A>(_:forKey:)(v18, &v24, v5, v15, v16);
    v19 = (char *)v3 + v13[8];
    LOBYTE(v24) = 4;
    KeyedEncodingContainer.encode<A>(_:forKey:)(v19, &v24, v5, v15, v16);
    *(_QWORD *)&v24 = *(_QWORD *)((char *)v3 + v13[9]);
    v25 = 5;
    v20 = sub_10001A9A8(&qword_1010F3040);
    v21 = sub_100200860();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v24, &v25, v5, v20, v21);
    LOBYTE(v24) = *((_BYTE *)v3 + v13[10]);
    v25 = 6;
    v22 = sub_100200B34();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v24, &v25, v5, &type metadata for AcceptanceState, v22);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1002001D4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  int *v23;
  _QWORD *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  char *v40;
  void (*v41)(char *, _QWORD *, uint64_t);
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  int *v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  _QWORD *v63;
  int *v64;
  __int128 v65;
  char v66;

  v56 = a2;
  v3 = type metadata accessor for UUID(0);
  v4 = *(_QWORD *)(v3 - 8);
  v59 = v3;
  v60 = v4;
  v5 = __chkstk_darwin(v3);
  v57 = (uint64_t *)((char *)&v53 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = __chkstk_darwin(v5);
  v58 = (uint64_t *)((char *)&v53 - v8);
  v9 = __chkstk_darwin(v7);
  v11 = (uint64_t *)((char *)&v53 - v10);
  __chkstk_darwin(v9);
  v13 = (char *)&v53 - v12;
  v61 = sub_10001A9A8(&qword_1010F3070);
  v14 = *(_QWORD *)(v61 - 8);
  __chkstk_darwin(v61);
  v16 = (char *)&v53 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for MemberSharingCircle(0);
  __chkstk_darwin(v17);
  v19 = (char *)&v53 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = a1[3];
  v20 = a1[4];
  v63 = a1;
  sub_10001AA44(a1, v21);
  v22 = sub_100200964();
  v62 = v16;
  v23 = v64;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for MemberSharingCircle.CodingKeys, &type metadata for MemberSharingCircle.CodingKeys, v22, v21, v20);
  if (v23)
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v63);
  v24 = v13;
  v55 = v11;
  v64 = (int *)v17;
  v25 = v19;
  v27 = v59;
  v26 = v60;
  v66 = 0;
  v28 = sub_100036994();
  v29 = v61;
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v65, &type metadata for Data, &v66, v61, &type metadata for Data, v28);
  *(_OWORD *)v25 = v65;
  LOBYTE(v65) = 1;
  v30 = sub_100006204((unint64_t *)&qword_1010EDA90, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v31 = v24;
  v32 = v24;
  v33 = v27;
  v34 = v27;
  v35 = v27;
  v36 = v30;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v32, v34, &v65, v29, v35, v30);
  v37 = v29;
  v38 = &v25[v64[5]];
  v39 = v26;
  v40 = v25;
  v41 = *(void (**)(char *, _QWORD *, uint64_t))(v39 + 32);
  v41(v38, v31, v33);
  LOBYTE(v65) = 2;
  v42 = v55;
  v43 = v36;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v55, v33, &v65, v37, v33, v36);
  v44 = v64[6];
  v54 = (uint64_t)v40;
  v41(&v40[v44], v42, v33);
  LOBYTE(v65) = 3;
  v45 = v58;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v58, v33, &v65, v61, v33, v36);
  v46 = v64;
  v41((char *)(v54 + v64[7]), v45, v33);
  LOBYTE(v65) = 4;
  v47 = v57;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v57, v33, &v65, v61, v33, v43);
  v48 = v54;
  v41((char *)(v54 + v46[8]), v47, v33);
  v49 = sub_10001A9A8(&qword_1010F3040);
  v66 = 5;
  v50 = sub_1002009A8();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v65, v49, &v66, v61, v49, v50);
  *(_QWORD *)(v48 + v46[9]) = v65;
  v66 = 6;
  v51 = sub_100200A70();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v65, &type metadata for AcceptanceState, &v66, v61, &type metadata for AcceptanceState, v51);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v62, v61);
  *(_BYTE *)(v48 + v46[10]) = v65;
  sub_100200AB4(v48, v56);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v63);
  return sub_100200AF8(v48);
}

uint64_t sub_1002007A0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1002001D4(a1, a2);
}

uint64_t sub_1002007B4(_QWORD *a1)
{
  return sub_1001FFF28(a1);
}

uint64_t sub_1002007C8(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_100006204(&qword_1010F3028, type metadata accessor for MemberSharingCircle, (uint64_t)&unk_100E2DFE8);
  result = sub_100006204((unint64_t *)&unk_1010F3030, type metadata accessor for MemberSharingCircle, (uint64_t)&unk_100E2DFC0);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t sub_100200824(uint64_t a1)
{
  uint64_t result;

  result = sub_100006204(&qword_101108130, type metadata accessor for MemberSharingCircle, (uint64_t)&unk_100E2E010);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100200860()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1010F3048;
  if (!qword_1010F3048)
  {
    v1 = sub_10001F784(&qword_1010F3040);
    v2[0] = sub_100006204(&qword_1010EDAC0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v2[1] = sub_1002008E4();
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> [A : B], v1, v2);
    atomic_store(result, (unint64_t *)&qword_1010F3048);
  }
  return result;
}

unint64_t sub_1002008E4()
{
  unint64_t result;

  result = qword_1010F3058;
  if (!qword_1010F3058)
  {
    result = swift_getWitnessTable(byte_100E387B8, &type metadata for MemberCircleMemberState);
    atomic_store(result, (unint64_t *)&qword_1010F3058);
  }
  return result;
}

unint64_t sub_100200928()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1010F3060;
  if (!qword_1010F3060)
  {
    v1 = objc_opt_self(NSError);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1010F3060);
  }
  return result;
}

unint64_t sub_100200964()
{
  unint64_t result;

  result = qword_1010F3078;
  if (!qword_1010F3078)
  {
    result = swift_getWitnessTable(aM_6, &type metadata for MemberSharingCircle.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F3078);
  }
  return result;
}

unint64_t sub_1002009A8()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1010F3080;
  if (!qword_1010F3080)
  {
    v1 = sub_10001F784(&qword_1010F3040);
    v2[0] = sub_100006204((unint64_t *)&qword_1010EDA90, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v2[1] = sub_100200A2C();
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> [A : B], v1, v2);
    atomic_store(result, (unint64_t *)&qword_1010F3080);
  }
  return result;
}

unint64_t sub_100200A2C()
{
  unint64_t result;

  result = qword_1010F3088;
  if (!qword_1010F3088)
  {
    result = swift_getWitnessTable("Im#", &type metadata for MemberCircleMemberState);
    atomic_store(result, (unint64_t *)&qword_1010F3088);
  }
  return result;
}

unint64_t sub_100200A70()
{
  unint64_t result;

  result = qword_1010F3090;
  if (!qword_1010F3090)
  {
    result = swift_getWitnessTable("qm#", &type metadata for AcceptanceState);
    atomic_store(result, (unint64_t *)&qword_1010F3090);
  }
  return result;
}

uint64_t sub_100200AB4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MemberSharingCircle(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100200AF8(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for MemberSharingCircle(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_100200B34()
{
  unint64_t result;

  result = qword_101110390;
  if (!qword_101110390)
  {
    result = swift_getWitnessTable(byte_100E38740, &type metadata for AcceptanceState);
    atomic_store(result, (unint64_t *)&qword_101110390);
  }
  return result;
}

unint64_t sub_100200B78()
{
  unint64_t result;

  result = qword_1010F30A8;
  if (!qword_1010F30A8)
  {
    result = swift_getWitnessTable(byte_100E2E18C, &type metadata for MemberSharingCircle.ConversionError);
    atomic_store(result, (unint64_t *)&qword_1010F30A8);
  }
  return result;
}

BOOL sub_100200BBC(uint64_t *a1, uint64_t a2)
{
  char v4;
  int *v5;

  _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(*a1, a1[1]);
  if ((v4 & 1) != 0
    && (v5 = (int *)type metadata accessor for MemberSharingCircle(0),
        (static UUID.== infix(_:_:)((char *)a1 + v5[5], a2 + v5[5]) & 1) != 0)
    && (static UUID.== infix(_:_:)((char *)a1 + v5[6], a2 + v5[6]) & 1) != 0
    && (static UUID.== infix(_:_:)((char *)a1 + v5[7], a2 + v5[7]) & 1) != 0
    && (static UUID.== infix(_:_:)((char *)a1 + v5[8], a2 + v5[8]) & 1) != 0
    && (sub_100326820(*(uint64_t *)((char *)a1 + v5[9]), *(_QWORD *)(a2 + v5[9])) & 1) != 0)
  {
    return *((unsigned __int8 *)a1 + v5[10]) == *(unsigned __int8 *)(a2 + v5[10]);
  }
  else
  {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for MemberSharingCircle.ConversionError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_100200CD0 + 4 * byte_100E2DF32[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_100200D04 + 4 * byte_100E2DF2D[v4]))();
}

uint64_t sub_100200D04(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100200D0C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100200D14);
  return result;
}

uint64_t sub_100200D20(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100200D28);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_100200D2C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100200D34(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MemberSharingCircle.ConversionError()
{
  return &type metadata for MemberSharingCircle.ConversionError;
}

uint64_t storeEnumTagSinglePayload for MemberSharingCircle.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_100200D9C + 4 * byte_100E2DF3C[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_100200DD0 + 4 * byte_100E2DF37[v4]))();
}

uint64_t sub_100200DD0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100200DD8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100200DE0);
  return result;
}

uint64_t sub_100200DEC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100200DF4);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_100200DF8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100200E00(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MemberSharingCircle.CodingKeys()
{
  return &type metadata for MemberSharingCircle.CodingKeys;
}

unint64_t sub_100200E20()
{
  unint64_t result;

  result = qword_1010F30B8;
  if (!qword_1010F30B8)
  {
    result = swift_getWitnessTable(byte_100E2E0FC, &type metadata for MemberSharingCircle.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F30B8);
  }
  return result;
}

unint64_t sub_100200E68()
{
  unint64_t result;

  result = qword_1010F30C0;
  if (!qword_1010F30C0)
  {
    result = swift_getWitnessTable(asc_100E2E164, &type metadata for MemberSharingCircle.ConversionError);
    atomic_store(result, (unint64_t *)&qword_1010F30C0);
  }
  return result;
}

unint64_t sub_100200EB0()
{
  unint64_t result;

  result = qword_1010F30C8;
  if (!qword_1010F30C8)
  {
    result = swift_getWitnessTable(asc_100E2E06C, &type metadata for MemberSharingCircle.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F30C8);
  }
  return result;
}

unint64_t sub_100200EF8()
{
  unint64_t result;

  result = qword_1010F30D0;
  if (!qword_1010F30D0)
  {
    result = swift_getWitnessTable(aE_5, &type metadata for MemberSharingCircle.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F30D0);
  }
  return result;
}

uint64_t sub_100200F3C(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char v11;

  if (a1 == 0xD000000000000010)
  {
    v4 = 0x8000000100EC2FE0;
    if (a2 == 0x8000000100EC2FE0)
      goto LABEL_5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x8000000100EC2FE0, a1, a2, 0) & 1) != 0)
  {
    v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  if (a1 == 0x696669746E656469 && a2 == 0xEA00000000007265)
  {
    v6 = 0xEA00000000007265;
LABEL_11:
    swift_bridgeObjectRelease(v6);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x696669746E656469, 0xEA00000000007265, a1, a2, 0) & 1) != 0)
  {
    v6 = a2;
    goto LABEL_11;
  }
  if (a1 == 0xD000000000000010)
  {
    v7 = 0x8000000100EC28D0;
    if (a2 == 0x8000000100EC28D0)
      goto LABEL_16;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x8000000100EC28D0, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
LABEL_16:
    swift_bridgeObjectRelease(v7);
    return 2;
  }
  if (a1 == 0xD000000000000017 && a2 == 0x8000000100ECBB00)
  {
    v8 = 0x8000000100ECBB00;
LABEL_22:
    swift_bridgeObjectRelease(v8);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000017, 0x8000000100ECBB00, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_22;
  }
  if (a1 == 0x72656E776FLL && a2 == 0xE500000000000000)
  {
    v9 = 0xE500000000000000;
LABEL_28:
    swift_bridgeObjectRelease(v9);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x72656E776FLL, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_28;
  }
  if (a1 == 0x737265626D656DLL && a2 == 0xE700000000000000)
  {
    v10 = 0xE700000000000000;
LABEL_34:
    swift_bridgeObjectRelease(v10);
    return 5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x737265626D656DLL, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_34;
  }
  if (a1 == 0x6E61747065636361 && a2 == 0xEF65746174536563)
  {
    swift_bridgeObjectRelease(0xEF65746174536563);
    return 6;
  }
  else
  {
    v11 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6E61747065636361, 0xEF65746174536563, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v11 & 1) != 0)
      return 6;
    else
      return 7;
  }
}

uint64_t sub_100201230(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10020123C);
}

uint64_t sub_10020123C(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for FMNAccountType(0);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 20)], a2, v8);
  }
}

uint64_t sub_1002012B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1002012C4);
}

char *sub_1002012C4(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for FMNAccountType(0);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 20)], a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for SubmitEndpoint(uint64_t a1)
{
  uint64_t result;

  result = qword_1010F3138;
  if (!qword_1010F3138)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SubmitEndpoint);
  return result;
}

uint64_t sub_100201374()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t *, _QWORD);
  Swift::String v5;
  uint64_t v7;

  v1 = *v0;
  v2 = sub_10001A9A8(&qword_1010EBF60);
  v3 = OS_dispatch_queue.sync<A>(execute:)(sub_10003403C, v1, v2);
  URLComponents.init()(v3);
  URLComponents.scheme.setter(0x7370747468, 0xE500000000000000);
  URLComponents.host.setter();
  URLComponents.path.setter();
  v4 = (uint64_t (*)(uint64_t *, _QWORD))URLComponents.path.modify(&v7);
  v5._countAndFlagsBits = 0x74696D6275732FLL;
  v5._object = (void *)0xE700000000000000;
  String.append(_:)(v5);
  return v4(&v7, 0);
}

uint64_t sub_100201450()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_1000234D8(v0, qword_1011B6C18);
  sub_10001A9E8(v0, (uint64_t)qword_1011B6C18);
  return Logger.init(subsystem:category:)(0xD00000000000001DLL, 0x8000000100EC5D30, 0x6857796669746F6ELL, 0xEF646E756F466E65);
}

uint64_t sub_1002014D0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  id v53;
  _QWORD *v54;

  v2 = v1;
  v49 = a1;
  v3 = sub_10001A9A8(&qword_1010EECC8);
  __chkstk_darwin(v3);
  v5 = (char *)&v49 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10001A9A8(&qword_1010F33F0);
  v7 = *(_QWORD *)(v6 - 8);
  v51 = v6;
  v52 = v7;
  __chkstk_darwin(v6);
  v50 = (char *)&v49 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v12);
  v14 = (char *)&v49 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (char *)&v49 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for DeviceIdentityUtility(0);
  v20 = swift_allocObject(v19, *(unsigned int *)(v19 + 48), *(unsigned __int16 *)(v19 + 52));
  swift_defaultActor_initialize(v20);
  v21 = v20 + OBJC_IVAR____TtC12searchpartyd21DeviceIdentityUtility_certExpiryDate;
  v22 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v21, 1, 1, v22);
  *(_QWORD *)(v20 + OBJC_IVAR____TtC12searchpartyd21DeviceIdentityUtility_refKey) = 0;
  *(_QWORD *)(v20 + OBJC_IVAR____TtC12searchpartyd21DeviceIdentityUtility_certs) = _swiftEmptyArrayStorage;
  *(_BYTE *)(v20 + OBJC_IVAR____TtC12searchpartyd21DeviceIdentityUtility_signingType) = 0;
  *(_QWORD *)(v2 + 24) = v20;
  *(_QWORD *)(v2 + 32) = 0;
  v23 = sub_10001F6FC();
  v24 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v16 + 104))(v18, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v15);
  static DispatchQoS.unspecified.getter(v24);
  v54 = _swiftEmptyArrayStorage;
  v25 = sub_100006204((unint64_t *)&qword_1010F0E20, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v26 = sub_10001A9A8((uint64_t *)&unk_1010EA6B0);
  v27 = sub_1000193A4((unint64_t *)&qword_1010F0E30, (uint64_t *)&unk_1010EA6B0, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v54, v26, v27, v9, v25);
  v28 = (void *)OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000016, 0x8000000100E2E2A0, v14, v11, v18, 0);
  *(_QWORD *)(v2 + 40) = v28;
  *(_QWORD *)(v2 + 56) = &_swiftEmptySetSingleton;
  v29 = sub_10001A9A8(&qword_1010FAAF0);
  v30 = swift_allocObject(v29, 20, 7);
  *(_DWORD *)(v30 + 16) = 0;
  *(_QWORD *)(v2 + 64) = v30;
  v31 = type metadata accessor for QueueSynchronizer(0);
  *(_QWORD *)(v2 + 72) = 0;
  *(_QWORD *)(v2 + 80) = 0;
  *(_BYTE *)(v2 + 88) = 0;
  swift_allocObject(v31, *(unsigned int *)(v31 + 48), *(unsigned __int16 *)(v31 + 52));
  v32 = v28;
  *(_QWORD *)(v2 + 48) = QueueSynchronizer.init(queue:)(v32);
  v33 = v49;
  *(_QWORD *)(v2 + 16) = v49;
  v54 = *(_QWORD **)(v33 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_estimatedLocationSubject);
  swift_retain();
  v34 = sub_10001A9A8((uint64_t *)&unk_101107F00);
  v35 = sub_1000193A4(&qword_1010F33F8, (uint64_t *)&unk_101107F00, (const char *)&protocol conformance descriptor for PassthroughSubject<A, B>);
  v36 = Publisher.eraseToAnyPublisher()(v34, v35);
  v53 = v32;
  v54 = (_QWORD *)v36;
  v37 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 56))(v5, 1, 1, v37);
  v38 = v32;
  v39 = sub_10001A9A8((uint64_t *)&unk_101107F10);
  v40 = sub_1000193A4(&qword_1010F3400, (uint64_t *)&unk_101107F10, (const char *)&protocol conformance descriptor for AnyPublisher<A, B>);
  v41 = sub_100006204((unint64_t *)&qword_10111C120, (uint64_t (*)(uint64_t))sub_10001F6FC, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue);
  v42 = v50;
  Publisher.receive<A>(on:options:)(&v53, v5, v39, v23, v40, v41);
  sub_100004048((uint64_t)v5, &qword_1010EECC8);

  swift_release();
  v43 = swift_allocObject(&unk_10105FB00, 24, 7);
  swift_weakInit(v43 + 16, v2);
  v44 = swift_allocObject(&unk_10105FB28, 32, 7);
  *(_QWORD *)(v44 + 16) = sub_100216E88;
  *(_QWORD *)(v44 + 24) = v43;
  v45 = sub_1000193A4(&qword_1010F3408, &qword_1010F33F0, (const char *)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  v46 = v51;
  v47 = Publisher<>.sink(receiveValue:)(sub_100216EB4, v44, v51, v45);
  swift_release();
  swift_release();
  (*(void (**)(char *, uint64_t))(v52 + 8))(v42, v46);
  *(_QWORD *)(v2 + 80) = v47;
  swift_release();
  return v2;
}

uint64_t sub_1002019BC(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  _BYTE v13[24];

  v5 = type metadata accessor for UUID(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = &v13[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  a3 += 16;
  swift_beginAccess(a3, v13, 0, 0);
  result = swift_weakLoadStrong(a3);
  if (result)
  {
    v10 = a2[3];
    v11 = a2[4];
    sub_10001AA44(a2, v10);
    (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v11 + 8) + 8) + 32))(v10);
    sub_100210088((uint64_t)v8);
    swift_release();
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
  return result;
}

uint64_t sub_100201AAC()
{
  QueueSynchronizer.conditionalSync<A>(_:)(sub_100217404);
  sub_10001A9A8((uint64_t *)&unk_1010EE3B0);
  return QueueSynchronizer.conditionalSync<A>(_:)(sub_100215C88);
}

uint64_t sub_100201B28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v8[7] = a7;
  v8[8] = a8;
  v8[5] = a4;
  v8[6] = a6;
  v10 = type metadata accessor for UUID(0);
  v8[9] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v8[10] = v11;
  v8[11] = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (_QWORD *)swift_task_alloc(dword_1010F319C);
  v8[12] = v12;
  *v12 = v8;
  v12[1] = sub_100201BAC;
  return sub_100209C7C(a5);
}

uint64_t sub_100201BAC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 96);
  *(_QWORD *)(*(_QWORD *)v1 + 104) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_100201E28;
  else
    v3 = sub_100201C10;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_100201C10()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  _BOOL4 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  void (*v18)(_QWORD);
  uint64_t v20;

  if (qword_1010E9AA0 != -1)
    swift_once(&qword_1010E9AA0, sub_100201450);
  v2 = *(_QWORD *)(v0 + 80);
  v1 = *(_QWORD *)(v0 + 88);
  v3 = *(_QWORD *)(v0 + 72);
  v4 = *(_QWORD *)(v0 + 48);
  v5 = type metadata accessor for Logger(0);
  sub_10001A9E8(v5, (uint64_t)qword_1011B6C18);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4, v3);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.default.getter(v7);
  v9 = os_log_type_enabled(v7, v8);
  v11 = *(_QWORD *)(v0 + 80);
  v10 = *(_QWORD *)(v0 + 88);
  v12 = *(_QWORD *)(v0 + 72);
  if (v9)
  {
    v13 = (uint8_t *)swift_slowAlloc(12, -1);
    v14 = swift_slowAlloc(32, -1);
    v20 = v14;
    *(_DWORD *)v13 = 136315138;
    v15 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v16 = dispatch thunk of CustomStringConvertible.description.getter(v12, v15);
    *(_QWORD *)(v0 + 32) = sub_100016940(v16, v17, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v13 + 4, v13 + 12);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Enabled notify when found for group %s.", v13, 0xCu);
    swift_arrayDestroy(v14, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v14, -1, -1);
    swift_slowDealloc(v13, -1, -1);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v11 + 8))(*(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 72));
  }

  v18 = *(void (**)(_QWORD))(v0 + 56);
  sub_1007EEF64(17);
  v18(0);
  swift_task_dealloc(*(_QWORD *)(v0 + 88));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100201E28()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  BOOL v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t);
  uint64_t v16;

  if (qword_1010E9AA0 != -1)
    swift_once(&qword_1010E9AA0, sub_100201450);
  v1 = *(_QWORD *)(v0 + 104);
  v2 = type metadata accessor for Logger(0);
  sub_10001A9E8(v2, (uint64_t)qword_1011B6C18);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter(v4);
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 104);
  if (v6)
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = swift_slowAlloc(32, -1);
    v16 = v9;
    *(_DWORD *)v8 = 136446210;
    *(_QWORD *)(v0 + 16) = v7;
    swift_errorRetain(v7);
    v10 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
    v11 = String.init<A>(describing:)(v0 + 16, v10);
    *(_QWORD *)(v0 + 24) = sub_100016940(v11, v12, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v8 + 4, v8 + 12);
    swift_bridgeObjectRelease();
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Error publishing notifyWhenFound keys: %{public}s", v8, 0xCu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 104));
    swift_errorRelease(v7);
  }

  v13 = *(_QWORD *)(v0 + 104);
  v14 = *(void (**)(uint64_t))(v0 + 56);
  swift_errorRetain(v13);
  v14(v13);
  swift_errorRelease(v13);
  swift_errorRelease(v13);
  swift_task_dealloc(*(_QWORD *)(v0 + 88));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100202034(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;

  v8[7] = a7;
  v8[8] = a8;
  v8[5] = a5;
  v8[6] = a6;
  v8[4] = a4;
  return swift_task_switch(sub_100202054, 0, 0);
}

uint64_t sub_100202054()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v1 = v0[5];
  v2 = v0[6];
  v3 = sub_10001A9A8(&qword_1010F33D8);
  v4 = sub_10001A9A8((uint64_t *)&unk_1011093F0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 72);
  v7 = *(unsigned __int8 *)(v5 + 80);
  v8 = (v7 + 32) & ~v7;
  v9 = swift_allocObject(v3, v8 + v6, v7 | 7);
  v0[9] = v9;
  *(_OWORD *)(v9 + 16) = xmmword_100E22B00;
  v10 = v9 + v8 + *(int *)(v4 + 48);
  sub_100030784(v1, v9 + v8);
  sub_10005972C(v2, v10, type metadata accessor for NotifyWhenFoundRecord);
  v11 = (_QWORD *)swift_task_alloc(dword_1010F319C);
  v0[10] = v11;
  *v11 = v0;
  v11[1] = sub_100202134;
  return sub_100209C7C(v9);
}

uint64_t sub_100202134()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 80);
  *(_QWORD *)(*(_QWORD *)v1 + 88) = v0;
  swift_task_dealloc(v2);
  if (v0)
  {
    v3 = sub_1002021F0;
  }
  else
  {
    swift_bridgeObjectRelease();
    v3 = sub_1002021A0;
  }
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1002021A0()
{
  uint64_t v0;
  void (*v1)(_QWORD);

  v1 = *(void (**)(_QWORD))(v0 + 56);
  sub_1007EEF64(17);
  v1(0);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1002021F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  BOOL v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t);
  uint64_t v16;

  swift_bridgeObjectRelease();
  if (qword_1010E9AA0 != -1)
    swift_once(&qword_1010E9AA0, sub_100201450);
  v1 = *(_QWORD *)(v0 + 88);
  v2 = type metadata accessor for Logger(0);
  sub_10001A9E8(v2, (uint64_t)qword_1011B6C18);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter(v4);
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 88);
  if (v6)
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = swift_slowAlloc(32, -1);
    v16 = v9;
    *(_DWORD *)v8 = 136446210;
    *(_QWORD *)(v0 + 16) = v7;
    swift_errorRetain(v7);
    v10 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
    v11 = String.init<A>(describing:)(v0 + 16, v10);
    *(_QWORD *)(v0 + 24) = sub_100016940(v11, v12, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v8 + 4, v8 + 12);
    swift_bridgeObjectRelease();
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Error publishing notifyWhenFound keys: %{public}s", v8, 0xCu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 88));
    swift_errorRelease(v7);
  }

  v13 = *(_QWORD *)(v0 + 88);
  v14 = *(void (**)(uint64_t))(v0 + 56);
  swift_errorRetain(v13);
  v14(v13);
  swift_errorRelease(v13);
  swift_errorRelease(v13);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1002023FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t found;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  _QWORD *v20;
  void (*v21)(uint64_t, uint64_t, uint64_t, uint64_t);
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(char *, uint64_t, uint64_t);
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  uint8_t *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  NSObject *v47;
  NSObject *v48;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t (*v54)(char *, uint64_t, uint64_t);
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void (*v60)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v61;
  uint64_t v62;
  uint64_t v63[3];

  v58 = a1;
  v61 = a3;
  v5 = type metadata accessor for UUID(0);
  v55 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v7 = (char *)&v52 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = sub_10001A9A8(&qword_1010F33A8);
  __chkstk_darwin(v56);
  v9 = (char *)&v52 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  found = type metadata accessor for NotifyWhenFoundRecord(0);
  v11 = *(_QWORD *)(found - 8);
  v12 = __chkstk_darwin(found);
  v14 = (char *)&v52 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v12);
  v17 = (char *)&v52 - v16;
  __chkstk_darwin(v15);
  v19 = (char *)&v52 - v18;
  v57 = *(_QWORD *)(v3 + 16);
  v59 = a2;
  v20 = sub_10088AE54(a2);
  if (v20[2])
  {
    sub_10005972C((uint64_t)v20 + ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80)), (uint64_t)v9, type metadata accessor for NotifyWhenFoundRecord);
    v21 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56);
    v22 = v9;
    v23 = 0;
  }
  else
  {
    v21 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56);
    v22 = v9;
    v23 = 1;
  }
  v60 = v21;
  v21((uint64_t)v22, v23, 1, found);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, found) == 1)
  {
    sub_100004048((uint64_t)v9, &qword_1010F33A8);
    if (qword_1010E9AA0 != -1)
      swift_once(&qword_1010E9AA0, sub_100201450);
    v24 = type metadata accessor for Logger(0);
    sub_10001A9E8(v24, (uint64_t)qword_1011B6C18);
    v25 = v55;
    v26 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v55 + 16);
    v27 = v26(v7, v59, v5);
    v28 = Logger.logObject.getter(v27);
    v29 = static os_log_type_t.default.getter(v28);
    if (os_log_type_enabled(v28, v29))
    {
      v30 = swift_slowAlloc(22, -1);
      v31 = swift_slowAlloc(32, -1);
      v53 = v31;
      *(_DWORD *)v30 = 141558275;
      v62 = 1752392040;
      v63[0] = v31;
      v54 = v26;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v62, v63, v30 + 4, v30 + 12);
      *(_WORD *)(v30 + 12) = 2081;
      v52 = v30 + 14;
      v32 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v33 = dispatch thunk of CustomStringConvertible.description.getter(v5, v32);
      v62 = sub_100016940(v33, v34, v63);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v62, v63, v52, v30 + 22);
      swift_bridgeObjectRelease();
      v26 = v54;
      (*(void (**)(char *, uint64_t))(v25 + 8))(v7, v5);
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "Creating new NWF record for %{private,mask.hash}s", (uint8_t *)v30, 0x16u);
      v35 = v53;
      swift_arrayDestroy(v53, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v35, -1, -1);
      swift_slowDealloc(v30, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v25 + 8))(v7, v5);
    }

    v44 = swift_allocBox(v56);
    v46 = v45;
    v60(v45, 1, 1, found);
    v26(&v14[*(int *)(found + 20)], v58, v5);
    v26(&v14[*(int *)(found + 24)], v59, v5);
    *(_OWORD *)v14 = xmmword_100E22FC0;
    v47 = dispatch_group_create();
    dispatch_group_enter(v47);
    v48 = v47;
    swift_retain();
    sub_100862AC8((uint64_t)v14, 0, v57, v48, v44);

    swift_release();
    OS_dispatch_group.wait()();

    sub_1000126B0((uint64_t)v14, type metadata accessor for NotifyWhenFoundRecord);
    swift_beginAccess(v46, v63, 0, 0);
    sub_10000F9B8(v46, v61, &qword_1010F33A8);
    return swift_release();
  }
  else
  {
    sub_1000126EC((uint64_t)v9, (uint64_t)v19, type metadata accessor for NotifyWhenFoundRecord);
    if (qword_1010E9AA0 != -1)
      swift_once(&qword_1010E9AA0, sub_100201450);
    v36 = type metadata accessor for Logger(0);
    sub_10001A9E8(v36, (uint64_t)qword_1011B6C18);
    v37 = sub_10005972C((uint64_t)v19, (uint64_t)v17, type metadata accessor for NotifyWhenFoundRecord);
    v38 = Logger.logObject.getter(v37);
    v39 = static os_log_type_t.default.getter(v38);
    if (os_log_type_enabled(v38, v39))
    {
      v40 = (uint8_t *)swift_slowAlloc(12, -1);
      v41 = swift_slowAlloc(32, -1);
      v63[0] = v41;
      *(_DWORD *)v40 = 136315138;
      sub_10005972C((uint64_t)v17, (uint64_t)v14, type metadata accessor for NotifyWhenFoundRecord);
      v42 = String.init<A>(describing:)(v14, found);
      v62 = sub_100016940(v42, v43, v63);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v62, v63, v40 + 4, v40 + 12);
      swift_bridgeObjectRelease();
      sub_1000126B0((uint64_t)v17, type metadata accessor for NotifyWhenFoundRecord);
      _os_log_impl((void *)&_mh_execute_header, v38, v39, "Found existing NWF record %s", v40, 0xCu);
      swift_arrayDestroy(v41, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v41, -1, -1);
      swift_slowDealloc(v40, -1, -1);
    }
    else
    {
      sub_1000126B0((uint64_t)v17, type metadata accessor for NotifyWhenFoundRecord);
    }

    v50 = (uint64_t)v19;
    v51 = v61;
    sub_1000126EC(v50, v61, type metadata accessor for NotifyWhenFoundRecord);
    return ((uint64_t (*)(uint64_t, _QWORD, uint64_t, uint64_t))v60)(v51, 0, 1, found);
  }
}

void sub_100202A4C(uint64_t a1, NSObject *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t found;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint8_t *v41;
  uint64_t v42;
  uint64_t v43;
  dispatch_group_t v44;
  uint64_t v45[3];
  uint64_t v46;
  uint64_t v47;

  v44 = a2;
  v5 = sub_10001A9A8(&qword_1010F33A8);
  __chkstk_darwin(v5);
  v7 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  found = type metadata accessor for NotifyWhenFoundRecord(0);
  v43 = *(_QWORD *)(found - 8);
  v9 = __chkstk_darwin(found);
  v11 = (char *)&v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v9);
  v14 = (char *)&v41 - v13;
  __chkstk_darwin(v12);
  v16 = (char *)&v41 - v15;
  v17 = sub_10001A9A8(&qword_1010F3448);
  __chkstk_darwin(v17);
  v19 = (uint64_t *)((char *)&v41 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  v20 = swift_projectBox(a3);
  sub_10000F9B8(a1, (uint64_t)v19, &qword_1010F3448);
  if (swift_getEnumCaseMultiPayload(v19, v17) == 1)
  {
    v21 = *v19;
    if (qword_1010E9AA0 != -1)
      swift_once(&qword_1010E9AA0, sub_100201450);
    v22 = type metadata accessor for Logger(0);
    sub_10001A9E8(v22, (uint64_t)qword_1011B6C18);
    swift_errorRetain(v21);
    v23 = swift_errorRetain(v21);
    v24 = Logger.logObject.getter(v23);
    v25 = static os_log_type_t.error.getter(v24);
    if (os_log_type_enabled(v24, v25))
    {
      v26 = (uint8_t *)swift_slowAlloc(12, -1);
      v27 = swift_slowAlloc(32, -1);
      v45[0] = v27;
      *(_DWORD *)v26 = 136446210;
      v46 = v21;
      swift_errorRetain(v21);
      v28 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
      v29 = String.init<A>(describing:)(&v46, v28);
      v46 = sub_100016940(v29, v30, v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, &v47, v26 + 4, v26 + 12);
      swift_bridgeObjectRelease();
      swift_errorRelease(v21);
      swift_errorRelease(v21);
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "Error saving CK record for notifyWhenFound: %{public}s", v26, 0xCu);
      swift_arrayDestroy(v27, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v27, -1, -1);
      swift_slowDealloc(v26, -1, -1);

      swift_errorRelease(v21);
    }
    else
    {
      swift_errorRelease(v21);
      swift_errorRelease(v21);
      swift_errorRelease(v21);

    }
  }
  else
  {
    sub_1000126EC((uint64_t)v19, (uint64_t)v16, type metadata accessor for NotifyWhenFoundRecord);
    if (qword_1010E9AA0 != -1)
      swift_once(&qword_1010E9AA0, sub_100201450);
    v31 = type metadata accessor for Logger(0);
    sub_10001A9E8(v31, (uint64_t)qword_1011B6C18);
    v32 = sub_10005972C((uint64_t)v16, (uint64_t)v14, type metadata accessor for NotifyWhenFoundRecord);
    v33 = Logger.logObject.getter(v32);
    v34 = static os_log_type_t.default.getter(v33);
    if (os_log_type_enabled(v33, v34))
    {
      v35 = (uint8_t *)swift_slowAlloc(12, -1);
      v36 = swift_slowAlloc(32, -1);
      v42 = v20;
      v37 = v36;
      v45[0] = v36;
      *(_DWORD *)v35 = 136315138;
      v41 = v35 + 4;
      sub_10005972C((uint64_t)v14, (uint64_t)v11, type metadata accessor for NotifyWhenFoundRecord);
      v38 = String.init<A>(describing:)(v11, found);
      v46 = sub_100016940(v38, v39, v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, &v47, v41, v35 + 12);
      swift_bridgeObjectRelease();
      sub_1000126B0((uint64_t)v14, type metadata accessor for NotifyWhenFoundRecord);
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "Successfully saved new: %s", v35, 0xCu);
      swift_arrayDestroy(v37, 1, (char *)&type metadata for Any + 8);
      v40 = v37;
      v20 = v42;
      swift_slowDealloc(v40, -1, -1);
      swift_slowDealloc(v35, -1, -1);
    }
    else
    {
      sub_1000126B0((uint64_t)v14, type metadata accessor for NotifyWhenFoundRecord);
    }

    sub_1000126EC((uint64_t)v16, (uint64_t)v7, type metadata accessor for NotifyWhenFoundRecord);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v43 + 56))(v7, 0, 1, found);
    swift_beginAccess(v20, v45, 1, 0);
    sub_1002173BC((uint64_t)v7, v20);
  }
  dispatch_group_leave(v44);
}

uint64_t sub_100202F50(uint64_t a1, uint64_t a2, void (*a3)(void), void (*a4)(void))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  void (*v22)(void);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  _BYTE *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(void);
  void (*v46)(void);
  __int128 v47;
  uint64_t v48;
  uint64_t v49[3];
  uint64_t v50;
  uint64_t v51;

  v5 = v4;
  v45 = a4;
  v46 = a3;
  v44 = a1;
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10001A9A8((uint64_t *)&unk_1010FF7F0);
  __chkstk_darwin(v11);
  v13 = (char *)&v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for OwnedBeaconGroup(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v17 = (char *)&v41 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10080B648(a2, (uint64_t)&v47);
  if (v48)
  {
    sub_10000F9FC(&v47, (uint64_t)v49);
    v18 = v50;
    v19 = v51;
    v20 = sub_10001AA44(v49, v50);
    sub_1002118C4(v44, (uint64_t)v20, v46, v45, v5, v18, v19);
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v49);
  }
  else
  {
    v41 = v4;
    v42 = v10;
    v43 = v8;
    v22 = v46;
    sub_100004048((uint64_t)&v47, (uint64_t *)&unk_1010EE310);
    sub_10081EDA8(a2, (uint64_t)v13);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14) == 1)
    {
      v23 = a2;
      sub_100004048((uint64_t)v13, (uint64_t *)&unk_1010FF7F0);
      if (qword_1010E9AA0 != -1)
        swift_once(&qword_1010E9AA0, sub_100201450);
      v24 = type metadata accessor for Logger(0);
      sub_10001A9E8(v24, (uint64_t)qword_1011B6C18);
      v26 = v42;
      v25 = v43;
      v27 = v23;
      v28 = v7;
      v29 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v43 + 16))(v42, v27, v7);
      v30 = Logger.logObject.getter(v29);
      v31 = static os_log_type_t.error.getter(v30);
      if (os_log_type_enabled(v30, v31))
      {
        v32 = swift_slowAlloc(22, -1);
        v33 = swift_slowAlloc(32, -1);
        v49[0] = v33;
        *(_DWORD *)v32 = 141558275;
        *(_QWORD *)&v47 = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, (char *)&v47 + 8, v32 + 4, v32 + 12);
        *(_WORD *)(v32 + 12) = 2081;
        v34 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v35 = dispatch thunk of CustomStringConvertible.description.getter(v28, v34);
        *(_QWORD *)&v47 = sub_100016940(v35, v36, v49);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, (char *)&v47 + 8, v32 + 14, v32 + 22);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v25 + 8))(v26, v28);
        _os_log_impl((void *)&_mh_execute_header, v30, v31, "Beacon/group does not exist for given UUID %{private,mask.hash}s", (uint8_t *)v32, 0x16u);
        swift_arrayDestroy(v33, 1, (char *)&type metadata for Any + 8);
        v37 = v33;
        v22 = v46;
        swift_slowDealloc(v37, -1, -1);
        swift_slowDealloc(v32, -1, -1);
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v25 + 8))(v26, v28);
      }

      v38 = sub_100215AC8();
      v39 = swift_allocError(&type metadata for NotifyWhenFoundManager.NotifyWhenFoundError, v38, 0, 0);
      *v40 = 0;
      v22();
      return swift_errorRelease(v39);
    }
    else
    {
      sub_1000126EC((uint64_t)v13, (uint64_t)v17, type metadata accessor for OwnedBeaconGroup);
      sub_10020332C(v44, (uint64_t)v17, v22, v45);
      return sub_1000126B0((uint64_t)v17, type metadata accessor for OwnedBeaconGroup);
    }
  }
}

uint64_t sub_10020332C(uint64_t a1, uint64_t a2, void (*a3)(void), void (*a4)(void))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  void (*v30)(char *, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  int v36;
  _BOOL4 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t *v44;
  void (*v45)(char *, uint64_t);
  char *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  NSObject *v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  NSObject *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  void (*v69)(uint64_t, char *, uint64_t);
  uint64_t v70;
  void (**v71)(void);
  void (*v72)(void);
  void *v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  NSObject *v86;
  os_log_type_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  void (*v93)(void);
  unint64_t v94;
  uint64_t v95;
  _BYTE *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t *v99;
  os_log_t v100;
  int v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  void (*v116)(void);
  void (*v117)(void);
  void (*v118)(char *, char *, uint64_t);
  uint64_t v119;
  char *v120;
  char *v121;
  uint64_t v122;
  uint64_t aBlock[7];

  v5 = v4;
  v116 = a3;
  v117 = a4;
  v8 = type metadata accessor for DispatchWorkItemFlags(0);
  v114 = *(_QWORD *)(v8 - 8);
  v115 = v8;
  __chkstk_darwin(v8);
  v113 = (char *)&v97 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS(0);
  v111 = *(_QWORD *)(v10 - 8);
  v112 = v10;
  __chkstk_darwin(v10);
  v110 = (char *)&v97 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for OwnedBeaconRecord(0);
  v106 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v14 = (char *)&v97 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for UUID(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = __chkstk_darwin(v15);
  v105 = (char *)&v97 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __chkstk_darwin(v17);
  v108 = (char *)&v97 - v20;
  v21 = __chkstk_darwin(v19);
  v120 = (char *)&v97 - v22;
  v23 = __chkstk_darwin(v21);
  v25 = (char *)&v97 - v24;
  v107 = v26;
  __chkstk_darwin(v23);
  v28 = (char *)&v97 - v27;
  v29 = type metadata accessor for OwnedBeaconGroup(0);
  v30 = *(void (**)(char *, uint64_t, uint64_t))(v16 + 16);
  v30(v28, a2 + *(int *)(v29 + 24), v15);
  if (qword_1010E9AA0 != -1)
    swift_once(&qword_1010E9AA0, sub_100201450);
  v31 = type metadata accessor for Logger(0);
  v32 = sub_10001A9E8(v31, (uint64_t)qword_1011B6C18);
  v121 = v28;
  v30(v25, (uint64_t)v28, v15);
  v118 = (void (*)(char *, char *, uint64_t))v30;
  v33 = ((uint64_t (*)(char *, uint64_t, uint64_t))v30)(v120, a1, v15);
  v104 = v32;
  v34 = Logger.logObject.getter(v33);
  v35 = static os_log_type_t.default.getter(v34);
  v36 = v35;
  v37 = os_log_type_enabled(v34, v35);
  v119 = v15;
  v109 = v16;
  if (v37)
  {
    v38 = swift_slowAlloc(32, -1);
    v39 = swift_slowAlloc(64, -1);
    v102 = v39;
    *(_DWORD *)v38 = 141558531;
    v122 = 1752392040;
    aBlock[0] = v39;
    v99 = aBlock;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v122, aBlock, v38 + 4, v38 + 12);
    *(_WORD *)(v38 + 12) = 2081;
    v101 = v36;
    v98 = v38 + 14;
    v40 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v103 = a2;
    v41 = v40;
    v100 = v34;
    v42 = dispatch thunk of CustomStringConvertible.description.getter(v15, v40);
    v122 = sub_100016940(v42, v43, aBlock);
    v44 = v99;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v122, v99, v98, v38 + 22);
    swift_bridgeObjectRelease();
    v45 = *(void (**)(char *, uint64_t))(v16 + 8);
    v45(v25, v15);
    *(_WORD *)(v38 + 22) = 2082;
    v98 = v38 + 24;
    v46 = v120;
    v47 = dispatch thunk of CustomStringConvertible.description.getter(v15, v41);
    v122 = sub_100016940(v47, v48, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v122, v44, v98, v38 + 32);
    swift_bridgeObjectRelease();
    v45(v46, v15);
    v34 = v100;
    _os_log_impl((void *)&_mh_execute_header, v100, (os_log_type_t)v101, "disableNotifyWhenFound for %{private,mask.hash}s, commandId %{public}s", (uint8_t *)v38, 0x20u);
    v49 = v102;
    swift_arrayDestroy(v102, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v49, -1, -1);
    swift_slowDealloc(v38, -1, -1);
  }
  else
  {
    v45 = *(void (**)(char *, uint64_t))(v16 + 8);
    v45(v25, v15);
    v45(v120, v15);
  }

  sub_10036AC6C();
  v51 = v50;
  swift_retain();
  sub_100212190(v51, v5);
  v53 = v52;
  swift_bridgeObjectRelease();
  swift_release();
  v54 = *((_QWORD *)v53 + 2);
  if (v54)
  {
    v120 = (char *)v45;
    v55 = dispatch_group_create();
    v56 = swift_allocObject(&unk_10105F8F8, 24, 7);
    *(_QWORD *)(v56 + 16) = 0;
    v57 = (*(unsigned __int8 *)(v106 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v106 + 80);
    v105 = v53;
    v58 = (uint64_t)&v53[v57];
    v59 = *(_QWORD *)(v106 + 72);
    do
    {
      sub_10005972C(v58, (uint64_t)v14, type metadata accessor for OwnedBeaconRecord);
      dispatch_group_enter(v55);
      swift_retain();
      v60 = v55;
      sub_100214208(a1, (uint64_t)v14, v5, v56, v60);

      swift_release();
      sub_1000126B0((uint64_t)v14, type metadata accessor for OwnedBeaconRecord);
      v58 += v59;
      --v54;
    }
    while (v54);
    swift_bridgeObjectRelease();
    v106 = *(_QWORD *)(v5 + 40);
    v61 = v108;
    v118(v108, v121, v119);
    v62 = v109;
    v63 = *(unsigned __int8 *)(v109 + 80);
    v64 = (v63 + 16) & ~v63;
    v65 = (v107 + v64 + 7) & 0xFFFFFFFFFFFFFFF8;
    v66 = (v65 + 15) & 0xFFFFFFFFFFFFFFF8;
    v67 = (v66 + 15) & 0xFFFFFFFFFFFFFFF8;
    v68 = swift_allocObject(&unk_10105FC40, v67 + 16, v63 | 7);
    v69 = *(void (**)(uint64_t, char *, uint64_t))(v62 + 32);
    v70 = v119;
    v69(v68 + v64, v61, v119);
    *(_QWORD *)(v68 + v65) = v56;
    *(_QWORD *)(v68 + v66) = v5;
    v71 = (void (**)(void))(v68 + v67);
    v72 = v117;
    *v71 = v116;
    v71[1] = v72;
    aBlock[4] = (uint64_t)sub_100215CC8;
    aBlock[5] = v68;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_100016FB8;
    aBlock[3] = (uint64_t)&unk_10105FC58;
    v73 = _Block_copy(aBlock);
    swift_retain();
    swift_retain();
    v74 = swift_retain();
    v75 = v110;
    static DispatchQoS.unspecified.getter(v74);
    v122 = (uint64_t)_swiftEmptyArrayStorage;
    v76 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v77 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v78 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
    v79 = v113;
    v80 = v77;
    v81 = v115;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v122, v80, v78, v115, v76);
    OS_dispatch_group.notify(qos:flags:queue:execute:)(v75, v79, v106, v73);
    _Block_release(v73);

    (*(void (**)(char *, uint64_t))(v114 + 8))(v79, v81);
    (*(void (**)(char *, uint64_t))(v111 + 8))(v75, v112);
    ((void (*)(char *, uint64_t))v120)(v121, v70);
    swift_release();
    return swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
    v83 = v105;
    v84 = v119;
    v85 = ((uint64_t (*)(char *, char *, uint64_t))v118)(v105, v121, v119);
    v86 = Logger.logObject.getter(v85);
    v87 = static os_log_type_t.error.getter(v86);
    if (os_log_type_enabled(v86, v87))
    {
      v88 = swift_slowAlloc(22, -1);
      v89 = swift_slowAlloc(32, -1);
      *(_DWORD *)v88 = 141558275;
      v122 = 1752392040;
      aBlock[0] = v89;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v122, aBlock, v88 + 4, v88 + 12);
      *(_WORD *)(v88 + 12) = 2081;
      v90 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v91 = dispatch thunk of CustomStringConvertible.description.getter(v84, v90);
      v122 = sub_100016940(v91, v92, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v122, aBlock, v88 + 14, v88 + 22);
      swift_bridgeObjectRelease();
      v45(v83, v84);
      _os_log_impl((void *)&_mh_execute_header, v86, v87, "No eligible member beacon to disable notify when found for group %{private,mask.hash}s", (uint8_t *)v88, 0x16u);
      swift_arrayDestroy(v89, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v89, -1, -1);
      swift_slowDealloc(v88, -1, -1);
    }
    else
    {
      v45(v83, v84);
    }

    v93 = v116;
    v94 = sub_100215AC8();
    v95 = swift_allocError(&type metadata for NotifyWhenFoundManager.NotifyWhenFoundError, v94, 0, 0);
    *v96 = 0;
    v93();
    swift_errorRelease(v95);
    return ((uint64_t (*)(char *, uint64_t))v45)(v121, v84);
  }
}

void sub_100203C68(uint64_t a1, uint64_t a2, NSObject *a3)
{
  uint64_t v6;
  _BYTE v7[24];

  swift_beginAccess(a2 + 16, v7, 1, 0);
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = a1;
  swift_errorRetain(a1);
  swift_errorRelease(v6);
  dispatch_group_leave(a3);
}

uint64_t sub_100203CD0(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t), uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  _BYTE v38[16];
  uint64_t v39[3];

  v10 = type metadata accessor for UUID(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1010E9AA0 != -1)
    swift_once(&qword_1010E9AA0, sub_100201450);
  v35 = (_QWORD *)(a2 + 16);
  v14 = type metadata accessor for Logger(0);
  sub_10001A9E8(v14, (uint64_t)qword_1011B6C18);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a1, v10);
  v15 = swift_retain_n(a2, 2);
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.default.getter(v16);
  v18 = v17;
  if (os_log_type_enabled(v16, v17))
  {
    v19 = swift_slowAlloc(32, -1);
    v34 = a5;
    v20 = v19;
    v32 = swift_slowAlloc(64, -1);
    v39[0] = v32;
    *(_DWORD *)v20 = 141558531;
    v37 = 1752392040;
    v33 = a3;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, v38, v20 + 4, v20 + 12);
    *(_WORD *)(v20 + 12) = 2081;
    v21 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    HIDWORD(v31) = v18;
    v22 = dispatch thunk of CustomStringConvertible.description.getter(v10, v21);
    v37 = sub_100016940(v22, v23, v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, v38, v20 + 14, v20 + 22);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    *(_WORD *)(v20 + 22) = 2082;
    v24 = v35;
    swift_beginAccess(v35, &v37, 0, 0);
    v36 = *(_QWORD *)(a2 + 16);
    swift_errorRetain(v36);
    v25 = sub_10001A9A8((uint64_t *)&unk_1010EB920);
    v26 = String.init<A>(describing:)(&v36, v25);
    v36 = sub_100016940(v26, v27, v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, &v37, v20 + 24, v20 + 32);
    swift_release_n(a2, 2);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v16, BYTE4(v31), "Disabled notify when found for group %{private,mask.hash}s. Error %{public}s", (uint8_t *)v20, 0x20u);
    v28 = v32;
    swift_arrayDestroy(v32, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v28, -1, -1);
    swift_slowDealloc(v20, -1, -1);

  }
  else
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);

    swift_release_n(a2, 2);
    v24 = v35;
  }
  sub_1007EEF64(17);
  swift_beginAccess(v24, v39, 0, 0);
  v29 = *v24;
  swift_errorRetain(*v24);
  a4(v29);
  return swift_errorRelease(v29);
}

uint64_t sub_100204020(char a1, uint64_t a2, void (*a3)(void), void (*a4)(void), uint64_t a5)
{
  uint64_t found;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  void (**v21)(void);
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  _BYTE *v33;
  uint64_t v34;
  void (*v35)(void);
  uint64_t v36;
  uint64_t v37;

  found = type metadata accessor for NotifyWhenFoundRecord(0);
  v11 = *(_QWORD *)(found - 8);
  v12 = *(_QWORD *)(v11 + 64);
  v13 = __chkstk_darwin(found);
  v14 = (char *)&v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v16 = (char *)&v34 - v15;
  if ((a1 & 1) != 0)
  {
    sub_10005972C(a2, (uint64_t)&v34 - v15, type metadata accessor for NotifyWhenFoundRecord);
    v17 = *(unsigned __int8 *)(v11 + 80);
    v18 = (v17 + 24) & ~v17;
    v19 = (v12 + v18 + 7) & 0xFFFFFFFFFFFFFFF8;
    v20 = swift_allocObject(&unk_10105F8D0, v19 + 16, v17 | 7);
    *(_QWORD *)(v20 + 16) = a5;
    sub_1000126EC((uint64_t)v16, v20 + v18, type metadata accessor for NotifyWhenFoundRecord);
    v21 = (void (**)(void))(v20 + v19);
    *v21 = a3;
    v21[1] = a4;
    swift_retain();
    swift_retain();
    unsafeFromAsyncTask<A>(_:)(&type metadata for (), &unk_1010F33B8, v20, &type metadata for () + 1);
    return swift_release();
  }
  else
  {
    if (qword_1010E9AA0 != -1)
      swift_once(&qword_1010E9AA0, sub_100201450);
    v23 = type metadata accessor for Logger(0);
    sub_10001A9E8(v23, (uint64_t)qword_1011B6C18);
    v24 = sub_10005972C(a2, (uint64_t)v14, type metadata accessor for NotifyWhenFoundRecord);
    v25 = Logger.logObject.getter(v24);
    v26 = static os_log_type_t.error.getter(v25);
    if (os_log_type_enabled(v25, v26))
    {
      v27 = (uint8_t *)swift_slowAlloc(12, -1);
      v28 = swift_slowAlloc(32, -1);
      v37 = v28;
      v35 = a3;
      *(_DWORD *)v27 = 136315138;
      sub_10005972C((uint64_t)v14, (uint64_t)v16, type metadata accessor for NotifyWhenFoundRecord);
      v29 = String.init<A>(describing:)(v16, found);
      v36 = sub_100016940(v29, v30, &v37);
      a3 = v35;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, &v37, v27 + 4, v27 + 12);
      swift_bridgeObjectRelease();
      sub_1000126B0((uint64_t)v14, type metadata accessor for NotifyWhenFoundRecord);
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "Failed to delete: %s", v27, 0xCu);
      swift_arrayDestroy(v28, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v28, -1, -1);
      swift_slowDealloc(v27, -1, -1);
    }
    else
    {
      sub_1000126B0((uint64_t)v14, type metadata accessor for NotifyWhenFoundRecord);
    }

    v31 = sub_100215AC8();
    v32 = swift_allocError(&type metadata for NotifyWhenFoundManager.NotifyWhenFoundError, v31, 0, 0);
    *v33 = 3;
    a3();
    return swift_errorRelease(v32);
  }
}

uint64_t sub_10020432C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;

  v5[6] = a4;
  v5[7] = a5;
  v5[4] = a2;
  v5[5] = a3;
  return swift_task_switch(sub_100204348, 0, 0);
}

uint64_t sub_100204348()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v1 = v0[5];
  v2 = sub_10001A9A8(&qword_1010F33C0);
  v3 = *(_QWORD *)(type metadata accessor for NotifyWhenFoundRecord(0) - 8);
  v4 = *(_QWORD *)(v3 + 72);
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject(v2, v6 + v4, v5 | 7);
  v0[8] = v7;
  *(_OWORD *)(v7 + 16) = xmmword_100E22B00;
  sub_10005972C(v1, v7 + v6, type metadata accessor for NotifyWhenFoundRecord);
  v8 = (_QWORD *)swift_task_alloc(dword_1010F31A4);
  v0[9] = v8;
  *v8 = v0;
  v8[1] = sub_100204408;
  return sub_10020B084(v7);
}

uint64_t sub_100204408()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 72);
  *(_QWORD *)(*(_QWORD *)v1 + 80) = v0;
  swift_task_dealloc(v2);
  if (v0)
  {
    v3 = sub_100204590;
  }
  else
  {
    swift_bridgeObjectRelease();
    v3 = sub_100204474;
  }
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_100204474()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  v2 = (_QWORD *)swift_task_alloc(v1);
  *(_QWORD *)(v0 + 88) = v2;
  *v2 = v0;
  v2[1] = sub_1002044E0;
  return unsafeBlocking<A>(_:)(v2, sub_100215C80, *(_QWORD *)(v0 + 32), (char *)&type metadata for () + 8);
}

uint64_t sub_1002044E0()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 88));
  swift_release();
  return swift_task_switch(sub_100204540, 0, 0);
}

uint64_t sub_100204540()
{
  uint64_t v0;
  void (*v1)(_QWORD);

  v1 = *(void (**)(_QWORD))(v0 + 48);
  sub_1007EEF64(17);
  v1(0);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100204590()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  BOOL v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t);
  uint64_t v16;

  swift_bridgeObjectRelease();
  if (qword_1010E9AA0 != -1)
    swift_once(&qword_1010E9AA0, sub_100201450);
  v1 = *(_QWORD *)(v0 + 80);
  v2 = type metadata accessor for Logger(0);
  sub_10001A9E8(v2, (uint64_t)qword_1011B6C18);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter(v4);
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 80);
  if (v6)
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = swift_slowAlloc(32, -1);
    v16 = v9;
    *(_DWORD *)v8 = 136446210;
    *(_QWORD *)(v0 + 16) = v7;
    swift_errorRetain(v7);
    v10 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
    v11 = String.init<A>(describing:)(v0 + 16, v10);
    *(_QWORD *)(v0 + 24) = sub_100016940(v11, v12, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v8 + 4, v8 + 12);
    swift_bridgeObjectRelease();
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Error unsubscribing to notifyWhenFound: %{public}s", v8, 0xCu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 80));
    swift_errorRelease(v7);
  }

  v13 = *(_QWORD *)(v0 + 80);
  v14 = *(void (**)(uint64_t))(v0 + 48);
  swift_errorRetain(v13);
  v14(v13);
  swift_errorRelease(v13);
  swift_errorRelease(v13);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10020479C()
{
  sub_10001A9A8((uint64_t *)&unk_1010EE3B0);
  return QueueSynchronizer.conditionalSync<A>(_:)(sub_100215C88);
}

uint64_t sub_1002047F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  v4 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1010E9AA0 != -1)
    swift_once(&qword_1010E9AA0, sub_100201450);
  v7 = type metadata accessor for Logger(0);
  v8 = sub_10001A9E8(v7, (uint64_t)qword_1011B6C18);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.default.getter(v9);
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Registering new xpc activity for Notify WhenFound.", v11, 2u);
    swift_slowDealloc(v11, -1, -1);
  }

  static DispatchQoS.default.getter();
  v12 = swift_allocObject(&unk_10105FB00, 24, 7);
  swift_weakInit(v12 + 16, a1);
  v13 = swift_allocObject(&unk_10105FC90, 32, 7);
  *(_QWORD *)(v13 + 16) = v12;
  *(_QWORD *)(v13 + 24) = a2;
  v14 = swift_allocObject(&unk_10105FB00, 24, 7);
  swift_weakInit(v14 + 16, a1);
  v15 = type metadata accessor for XPCActivity();
  swift_allocObject(v15, 112, 7);
  v16 = sub_100734F68(0xD000000000000026, (void *)0x8000000100ECBCC0, (uint64_t)v6, (uint64_t)sub_100217440, v13, (uint64_t)sub_100217448, v14);
  swift_release();
  swift_release();
  *(_QWORD *)(a1 + 32) = v16;
  return swift_release();
}

uint64_t sub_1002049F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  _QWORD *v12;
  uint64_t v13;
  uint64_t found;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33[24];
  _QWORD v34[5];
  _BYTE v35[24];
  uint64_t v36;

  sub_100005CF0(a1, (uint64_t)v34, &qword_101106350);
  v7 = v34[0];
  v6 = v34[1];
  v8 = v34[2];
  v9 = v34[3];
  a2 += 16;
  v10 = v34[4];
  swift_beginAccess(a2, v33, 0, 0);
  result = swift_weakLoadStrong(a2);
  if (!result)
    goto LABEL_8;
  v30 = v6;
  v31 = a1;
  swift_retain();
  v12 = sub_10088AE78();
  swift_release();
  v13 = v12[2];
  if (!v13)
  {
    swift_release();
    result = swift_bridgeObjectRelease();
LABEL_8:
    v20 = 0;
    v21 = 0;
    v22 = 0;
    v10 = 0;
    v19 = 2;
LABEL_9:
    *a3 = v19;
    a3[1] = v20;
    a3[2] = v21;
    a3[3] = v22;
    a3[4] = v10;
    return result;
  }
  v28 = v7;
  v29 = v8;
  found = type metadata accessor for NotifyWhenFoundRecord(0);
  v15 = *(_QWORD *)(found - 8);
  v16 = (char *)v12 + ((*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80));
  v17 = *(_QWORD *)(v15 + 72);
  swift_bridgeObjectRetain(v12);
  while (1)
  {
    sub_10080B648((uint64_t)&v16[*(int *)(found + 24)], (uint64_t)v35);
    v18 = v36;
    sub_100004048((uint64_t)v35, (uint64_t *)&unk_1010EE310);
    if (v18)
      break;
    v16 += v17;
    if (!--v13)
    {
      swift_release();
      v19 = 2;
      result = swift_bridgeObjectRelease_n(v12, 2);
      v20 = 0;
      v21 = 0;
      v22 = 0;
      v10 = 0;
      goto LABEL_9;
    }
  }
  swift_bridgeObjectRelease_n(v12, 2);
  sub_100005CF0(v31, (uint64_t)v35, &qword_101106350);
  if (v35[0] != 2)
  {
    result = swift_release();
    v22 = v9;
    v21 = v29;
    v19 = v28;
    v20 = v30;
    goto LABEL_9;
  }
  if (qword_1010E9D08 != -1)
    swift_once(&qword_1010E9D08, sub_10059A6E0);
  OS_dispatch_queue.sync<A>(execute:)(sub_100003D88, qword_1011B71A8, &type metadata for Configuration);
  v23 = sub_100C1B050(v32);
  result = swift_bridgeObjectRelease();
  v24 = 60 * v23;
  if ((unsigned __int128)(v23 * (__int128)60) >> 64 != (60 * v23) >> 63)
  {
    __break(1u);
    goto LABEL_19;
  }
  OS_dispatch_queue.sync<A>(execute:)(sub_100003D88, qword_1011B71A8, &type metadata for Configuration);
  v25 = sub_100C1B078(v32);
  result = swift_bridgeObjectRelease();
  v26 = (unsigned __int128)(v25 * (__int128)60) >> 64;
  v21 = 60 * v25;
  if (v26 != v21 >> 63)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  OS_dispatch_queue.sync<A>(execute:)(sub_100003D88, qword_1011B71A8, &type metadata for Configuration);
  v27 = sub_100C1B050(v32);
  swift_release();
  result = swift_bridgeObjectRelease();
  v22 = 60 * v27;
  if ((unsigned __int128)(v27 * (__int128)60) >> 64 == (60 * v27) >> 63)
  {
    v20 = v24 / 10;
    v10 = 707;
    v19 = 256;
    goto LABEL_9;
  }
LABEL_20:
  __break(1u);
  return result;
}

void sub_100204D14(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  _BYTE v6[24];

  Transaction.capture()();
  if (a3 == 3)
  {
    sub_1007329F0();
  }
  else if (a3 == 2)
  {
    swift_beginAccess(a4 + 16, v6, 0, 0);
    if (swift_weakLoadStrong(a4 + 16))
    {
      sub_100204E2C();
      swift_release();
    }
    sub_100732A0C();
  }
}

uint64_t sub_100204DAC@<X0>(uint64_t result@<X0>, BOOL *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(result + 32);
  if (v3)
  {
    v4 = *(_QWORD *)(v3 + 40);
    swift_retain();
    OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_100139464, v3, v4, (char *)&type metadata for () + 8, (char *)&type metadata for () + 8);
    result = swift_release();
  }
  *a2 = v3 == 0;
  return result;
}

void sub_100204E2C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  os_log_type_t v15;
  uint8_t *v16;
  NSObject *v17;

  v1 = v0;
  v2 = sub_10001A9A8(&qword_1010F46C0);
  __chkstk_darwin(v2);
  v4 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1010E9AA0 != -1)
    swift_once(&qword_1010E9AA0, sub_100201450);
  v5 = type metadata accessor for Logger(0);
  v6 = sub_10001A9E8(v5, (uint64_t)qword_1011B6C18);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.default.getter(v7);
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "schedulerFired", v9, 2u);
    swift_slowDealloc(v9, -1, -1);
  }

  v10 = sub_100017368();
  swift_retain();
  v11 = sub_1002125D8(v10, v1);
  swift_bridgeObjectRelease();
  swift_release();
  if (v11[2])
  {
    v12 = type metadata accessor for TaskPriority(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v4, 1, 1, v12);
    v13 = (_QWORD *)swift_allocObject(&unk_10105FC18, 48, 7);
    v13[2] = 0;
    v13[3] = 0;
    v13[4] = v1;
    v13[5] = v11;
    swift_retain();
    sub_100691AC0((uint64_t)v4, (uint64_t)&unk_1010F3440, (uint64_t)v13);
    swift_release();
  }
  else
  {
    v14 = swift_bridgeObjectRelease();
    v17 = Logger.logObject.getter(v14);
    v15 = static os_log_type_t.default.getter(v17);
    if (os_log_type_enabled(v17, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, v15, "No notify records to publish", v16, 2u);
      swift_slowDealloc(v16, -1, -1);
    }

  }
}

uint64_t sub_10020507C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v7;

  v7 = (_QWORD *)swift_task_alloc(dword_1010F319C);
  *(_QWORD *)(v5 + 32) = v7;
  *v7 = v5;
  v7[1] = sub_1002050D0;
  return sub_100209C7C(a5);
}

uint64_t sub_1002050D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 32);
  *(_QWORD *)(*(_QWORD *)v1 + 40) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_100205210;
  else
    v3 = sub_100205134;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_100205134()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;

  if (qword_1010E9AA0 != -1)
    swift_once(&qword_1010E9AA0, sub_100201450);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_10001A9E8(v1, (uint64_t)qword_1011B6C18);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Successfully published", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100205210()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  BOOL v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;

  if (qword_1010E9AA0 != -1)
    swift_once(&qword_1010E9AA0, sub_100201450);
  v1 = *(_QWORD *)(v0 + 40);
  v2 = type metadata accessor for Logger(0);
  sub_10001A9E8(v2, (uint64_t)qword_1011B6C18);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter(v4);
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 40);
  if (v6)
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = swift_slowAlloc(32, -1);
    v14 = v9;
    *(_DWORD *)v8 = 136446210;
    *(_QWORD *)(v0 + 16) = v7;
    swift_errorRetain(v7);
    v10 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
    v11 = String.init<A>(describing:)(v0 + 16, v10);
    *(_QWORD *)(v0 + 24) = sub_100016940(v11, v12, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v8 + 4, v8 + 12);
    swift_bridgeObjectRelease();
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Failed to publish keys: %{public}s", v8, 0xCu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

    swift_errorRelease(v7);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 40));
    swift_errorRelease(v7);
    swift_errorRelease(v7);

  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_100205400(uint64_t a1, _QWORD *a2, char *a3, int a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  int *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  char v35;
  _QWORD v36[4];
  unint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(char *, uint64_t);
  char *v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t *v48;

  v43 = a4;
  v42 = a3;
  v36[0] = a1;
  v6 = type metadata accessor for TimeBasedKey(0);
  v7 = *(_QWORD *)(v6 - 8);
  v36[1] = v6;
  v36[2] = v7;
  __chkstk_darwin(v6);
  v46 = (char *)v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  __chkstk_darwin(v9);
  v36[3] = (char *)v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = (void (*)(char *, uint64_t))type metadata accessor for UUID(0);
  v39 = *((_QWORD *)v41 - 1);
  __chkstk_darwin(v41);
  v38 = (char *)v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DateInterval(0);
  v44 = *(_QWORD *)(v12 - 8);
  v45 = v12;
  __chkstk_darwin(v12);
  v14 = (char *)v36 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = type metadata accessor for Date(0);
  v47 = *(_QWORD *)(v40 - 8);
  __chkstk_darwin(v40);
  v16 = (char *)v36 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *(_QWORD *)(v4 + 16);
  v18 = *(_QWORD *)(v17 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_beaconKeyManagerLock);
  v19 = type metadata accessor for BeaconKeyManager(0);
  OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_10021724C, v17, v18, (char *)&type metadata for () + 8, v19);
  v20 = v48;
  v37 = sub_1004DF310(v16, a2, v17);
  v22 = a2[3];
  v21 = a2[4];
  sub_10001AA44(a2, v22);
  LOBYTE(v21) = (*(uint64_t (**)(uint64_t, uint64_t))(v21 + 112))(v22, v21);
  v24 = a2[3];
  v23 = a2[4];
  sub_10001AA44(a2, v24);
  v25 = (uint64_t)v38;
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v23 + 8) + 8) + 32))(v24);
  sub_1004DE5E4(v21 & 1, (uint64_t)v16, v25, (uint64_t)v14);
  (*(void (**)(uint64_t, _QWORD *))(v39 + 8))(v25, v41);
  v26 = a2[3];
  v27 = a2[4];
  v28 = sub_10001AA44(a2, v26);
  LODWORD(v24) = v43;
  v29 = (int *)sub_1004E1BAC((uint64_t)v28, (uint64_t)v14, v37, (unint64_t)v16, v43, v20, v26, v27);
  v31 = v30;
  v41 = *(void (**)(char *, uint64_t))(v44 + 8);
  v42 = v14;
  v41(v14, v45);
  (*(void (**)(char *))(v47 + 8))(v16);
  v32 = a2[3];
  v33 = a2[4];
  v34 = sub_10001AA44(a2, v32);
  sub_1004DF978((unint64_t)v34, v29, v31, v24, 0, 0, v20, v32, v33);
  LOBYTE(v29) = v35;
  swift_release();
  __asm { BR              X10 }
}

_QWORD *sub_10020571C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  _BOOL4 v10;
  uint64_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  _QWORD *result;

  v5 = qword_1010E9AA0;
  *(_QWORD *)(v4 - 144) = v0;
  swift_bridgeObjectRetain(v0);
  if (v5 != -1)
    swift_once(&qword_1010E9AA0, sub_100201450);
  v6 = type metadata accessor for Logger(0);
  v7 = sub_10001A9E8(v6, (uint64_t)qword_1011B6C18);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter(v8);
  v10 = os_log_type_enabled(v8, v9);
  v11 = *(_QWORD *)(v4 - 112);
  if (v10)
  {
    v12 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v12 = 0;
    swift_slowDealloc(v12, -1, -1);
  }

  v13 = *(_QWORD *)(v4 - 144);
  sub_100217264(v13, v2, 0);
  v14 = *(_QWORD *)(v4 - 200);
  if (!*(_QWORD *)(v13 + 16))
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(v11 + 56))(*(_QWORD *)(v4 - 200), 1, 1, v3);
    goto LABEL_17;
  }
  v15 = *(unsigned __int8 *)(*(_QWORD *)(v4 - 208) + 80);
  v16 = v13 + ((v15 + 32) & ~v15);
  v17 = *(_QWORD *)(v4 - 128);
  v18 = *(_QWORD *)(v4 - 152);
  v19 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 136) + 16))(v18, v16 + *(int *)(*(_QWORD *)(v4 - 216) + 20), v17);
  DateInterval.start.getter(v19);
  (*(void (**)(uint64_t, uint64_t))(v4 - 160))(v18, v17);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v11 + 56))(v14, 0, 1, v3);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v14, 1, v3) == 1)
  {
LABEL_17:
    swift_bridgeObjectRelease();
    sub_100004048(v14, (uint64_t *)&unk_1010EA690);
    v25 = sub_100215AC8();
    v26 = swift_allocError(&type metadata for NotifyWhenFoundManager.NotifyWhenFoundError, v25, 0, 0);
    *v27 = 0;
    swift_willThrow(v26);
    return (_QWORD *)v13;
  }
  (*(void (**)(_QWORD, uint64_t, uint64_t))(v11 + 32))(*(_QWORD *)(v4 - 224), v14, v3);
  v20 = *(_QWORD *)(v13 + 16);
  if (!v20)
  {
    swift_bridgeObjectRelease();
    return _swiftEmptyArrayStorage;
  }
  *(_QWORD *)(v4 - 72) = _swiftEmptyArrayStorage;
  sub_10009A92C(0, v20, 0);
  v21 = *(_QWORD *)(*(_QWORD *)(v4 - 208) + 72);
  while (1)
  {
    v22 = *(_QWORD *)(v4 - 120);
    sub_10005972C(v16, v22, type metadata accessor for TimeBasedKey);
    sub_100205B28(v22, (uint64_t *)(v4 - 96));
    if (v1)
      break;
    v1 = 0;
    sub_1000126B0(v22, type metadata accessor for TimeBasedKey);
    *(_OWORD *)(v4 - 112) = *(_OWORD *)(v4 - 96);
    v13 = *(_QWORD *)(v4 - 72);
    if ((swift_isUniquelyReferenced_nonNull_native(v13) & 1) == 0)
    {
      sub_10009A92C(0, *(_QWORD *)(v13 + 16) + 1, 1);
      v13 = *(_QWORD *)(v4 - 72);
    }
    v24 = *(_QWORD *)(v13 + 16);
    v23 = *(_QWORD *)(v13 + 24);
    if (v24 >= v23 >> 1)
    {
      sub_10009A92C(v23 > 1, v24 + 1, 1);
      v13 = *(_QWORD *)(v4 - 72);
    }
    *(_QWORD *)(v13 + 16) = v24 + 1;
    *(_OWORD *)(v13 + 16 * v24 + 32) = *(_OWORD *)(v4 - 112);
    v16 += v21;
    if (!--v20)
    {
      swift_bridgeObjectRelease();
      return (_QWORD *)v13;
    }
  }
  sub_1000126B0(v22, type metadata accessor for TimeBasedKey);
  result = (_QWORD *)swift_release();
  __break(1u);
  return result;
}

void sub_100205B28(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  __int128 *v10;
  __int128 v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  _BYTE v36[12];
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  unint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;

  v40 = a2;
  v3 = type metadata accessor for TimeBasedKey(0);
  __chkstk_darwin(v3);
  v5 = &v36[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = type metadata accessor for HashAlgorithm(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = &v36[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v39 = v3;
  v10 = (__int128 *)(a1 + *(int *)(v3 + 24));
  v11 = v10[1];
  v43 = *v10;
  v44 = v11;
  v45 = v10[2];
  v12 = sub_1007DFD44();
  v14 = v13;
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v7 + 104))(v9, enum case for HashAlgorithm.sha256(_:), v6);
  v15 = Data.hash(algorithm:)(v9, v12, v14);
  v17 = v16;
  (*(void (**)(_BYTE *, uint64_t))(v7 + 8))(v9, v6);
  sub_10001BC14(v12, v14);
  if (qword_1010E9AA0 != -1)
    swift_once(&qword_1010E9AA0, sub_100201450);
  v18 = type metadata accessor for Logger(0);
  sub_10001A9E8(v18, (uint64_t)qword_1011B6C18);
  sub_10005972C(a1, (uint64_t)v5, type metadata accessor for TimeBasedKey);
  sub_10001BBBC(v15, v17);
  sub_10001BBBC(v15, v17);
  sub_10001BBBC(v15, v17);
  v19 = sub_10001BBBC(v15, v17);
  v20 = Logger.logObject.getter(v19);
  v21 = static os_log_type_t.info.getter(v20);
  v22 = v21;
  if (os_log_type_enabled(v20, v21))
  {
    v23 = swift_slowAlloc(32, -1);
    v38 = swift_slowAlloc(96, -1);
    v46 = v38;
    *(_DWORD *)v23 = 136315650;
    v41 = v15;
    v42 = v17;
    v24 = sub_100153D50();
    v37 = v22;
    v25 = v24;
    v26 = RawRepresentable<>.hexString.getter(&type metadata for HashedAdvertisement, v24);
    v41 = sub_100016940(v26, v27, &v46);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, &v42, v23 + 4, v23 + 12);
    swift_bridgeObjectRelease();
    sub_10001BC14(v15, v17);
    sub_10001BC14(v15, v17);
    *(_WORD *)(v23 + 12) = 2080;
    v41 = v15;
    v42 = v17;
    v28 = RawRepresentable<>.base64EncodedString(options:)(0, &type metadata for HashedAdvertisement, v25);
    v41 = sub_100016940(v28, v29, &v46);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, &v42, v23 + 14, v23 + 22);
    swift_bridgeObjectRelease();
    sub_10001BC14(v15, v17);
    sub_10001BC14(v15, v17);
    *(_WORD *)(v23 + 22) = 2080;
    v30 = type metadata accessor for DateInterval(0);
    v31 = sub_100006204(&qword_1010F2168, (uint64_t (*)(uint64_t))&type metadata accessor for DateInterval, (uint64_t)&protocol conformance descriptor for DateInterval);
    v32 = dispatch thunk of CustomStringConvertible.description.getter(v30, v31);
    v41 = sub_100016940(v32, v33, &v46);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, &v42, v23 + 24, v23 + 32);
    swift_bridgeObjectRelease();
    sub_1000126B0((uint64_t)v5, type metadata accessor for TimeBasedKey);
    _os_log_impl((void *)&_mh_execute_header, v20, (os_log_type_t)v37, "Key hashed: %s, base64: %s, dateInterval: %s.", (uint8_t *)v23, 0x20u);
    v34 = v38;
    swift_arrayDestroy(v38, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v34, -1, -1);
    swift_slowDealloc(v23, -1, -1);
  }
  else
  {
    sub_10001BC14(v15, v17);
    sub_10001BC14(v15, v17);
    sub_10001BC14(v15, v17);
    sub_10001BC14(v15, v17);
    sub_1000126B0((uint64_t)v5, type metadata accessor for TimeBasedKey);
  }

  v35 = v40;
  *v40 = v15;
  v35[1] = v17;
}

_QWORD *sub_100205F4C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __int128 *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  __n128 v75;
  uint64_t v76;
  void (*v77)(char *, uint64_t);
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  NSObject *v82;
  os_log_type_t v83;
  _BOOL4 v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  _UNKNOWN **v89;
  ValueMetadata *v90;
  uint64_t (*v91)(uint64_t);
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  void (*v108)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t (*v113)(uint64_t, char *, uint64_t);
  char *v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  NSObject *v126;
  os_log_type_t v127;
  uint8_t *v128;
  uint64_t v129;
  _UNKNOWN **v130;
  ValueMetadata *v131;
  uint64_t (*v132)(uint64_t);
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  unint64_t v137;
  double v138;
  double v139;
  char *v140;
  uint64_t v141;
  double v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  char v148;
  char *v149;
  void (*v150)(uint64_t, char *, uint64_t);
  char *v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  _QWORD *v155;
  uint64_t v156;
  uint64_t v157;
  _QWORD *v158;
  _QWORD *v159;
  char *v160;
  void (*v161)(char *, uint64_t, uint64_t);
  uint64_t v162;
  void (*v163)(char *, uint64_t, uint64_t);
  char *v164;
  __n128 v165;
  uint64_t v166;
  NSObject *v167;
  os_log_type_t v168;
  _BOOL4 v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  char *v173;
  _UNKNOWN **v174;
  ValueMetadata *v175;
  uint64_t (*v176)(uint64_t);
  uint64_t v177;
  uint64_t v178;
  unint64_t v179;
  unint64_t v180;
  void (*v181)(uint64_t (*)(uint64_t), uint64_t);
  uint64_t (*v182)(uint64_t);
  uint64_t v183;
  uint64_t v184;
  char **v185;
  uint64_t v186;
  uint64_t v187;
  _QWORD *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t *v194;
  uint64_t v195;
  _QWORD *v196;
  char *v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  NSObject *v201;
  os_log_type_t v202;
  uint64_t v203;
  char *v204;
  _UNKNOWN **v205;
  ValueMetadata *v206;
  uint64_t (*v207)(uint64_t);
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  unint64_t v211;
  unint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  unint64_t v216;
  uint64_t v217;
  void (*v218)(char *, uint64_t);
  uint64_t v219;
  void (*v220)(char *, uint64_t);
  uint64_t v221;
  char *v222;
  uint64_t v223;
  NSObject *v224;
  os_log_type_t v225;
  _BOOL4 v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  char *v230;
  uint64_t v231;
  _UNKNOWN **v232;
  ValueMetadata *v233;
  uint64_t (*v234)(uint64_t);
  uint64_t v235;
  uint64_t v236;
  unint64_t v237;
  unint64_t v238;
  uint64_t (*v239)(uint64_t);
  uint64_t v240;
  void (*v241)(char *, uint64_t);
  uint64_t v242;
  uint64_t v243;
  uint64_t *v244;
  char *v245;
  void (*v246)(char *, char *, uint64_t);
  char *v247;
  __n128 v248;
  uint64_t v249;
  NSObject *v250;
  os_log_type_t v251;
  _BOOL4 v252;
  uint64_t v253;
  uint64_t v254;
  char *v255;
  _UNKNOWN **v256;
  ValueMetadata *v257;
  uint64_t (*v258)(uint64_t);
  uint64_t v259;
  uint64_t v260;
  unint64_t v261;
  unint64_t v262;
  char *v263;
  uint64_t v264;
  uint64_t v265;
  char *v266;
  uint64_t v267;
  uint64_t *v268;
  char *v269;
  uint64_t v270;
  void (*v271)(char *, uint64_t, uint64_t);
  char *v272;
  __n128 v273;
  char *v274;
  uint64_t v275;
  void (*v276)(char *, uint64_t, __n128);
  char *v277;
  void (*v278)(char *, uint64_t, uint64_t);
  __n128 v279;
  uint64_t v280;
  NSObject *v281;
  os_log_type_t v282;
  _BOOL4 v283;
  uint64_t v284;
  uint64_t v285;
  char *v286;
  _UNKNOWN **v287;
  ValueMetadata *v288;
  uint64_t (*v289)(uint64_t);
  uint64_t v290;
  uint64_t v291;
  unint64_t v292;
  unint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  char *v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  NSObject *v301;
  os_log_type_t v302;
  int v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  unint64_t v308;
  unint64_t *v309;
  uint64_t v310;
  uint64_t v311;
  unint64_t v312;
  uint64_t v313;
  char *v314;
  uint64_t v315;
  uint64_t v316;
  unint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  void (*v326)(uint64_t (*)(uint64_t), uint64_t);
  uint64_t v327;
  unint64_t v328;
  unint64_t v329;
  unint64_t v330;
  uint64_t v331;
  uint64_t My;
  _QWORD *v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  int v337;
  void (*v338)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  unint64_t v343;
  _QWORD *v344;
  unint64_t v345;
  uint64_t v346;
  uint64_t v347;
  NSObject *v348;
  os_log_type_t v349;
  uint64_t v350;
  char *v351;
  _UNKNOWN **v352;
  ValueMetadata *v353;
  uint64_t v354;
  uint64_t (*v355)(uint64_t);
  uint64_t v356;
  uint64_t v357;
  unint64_t v358;
  unint64_t v359;
  uint64_t v360;
  unint64_t v361;
  uint64_t v362;
  uint64_t v363;
  NSObject *v364;
  os_log_type_t v365;
  uint64_t v366;
  uint64_t v367;
  void (*v368)(uint64_t (*)(uint64_t), uint64_t);
  char *v369;
  _UNKNOWN **v370;
  ValueMetadata *v371;
  uint64_t (*v372)(uint64_t);
  uint64_t v373;
  uint64_t v374;
  unint64_t v375;
  unint64_t v376;
  _QWORD *v377;
  uint64_t v378;
  unint64_t *v379;
  uint64_t v380;
  unint64_t v381;
  uint64_t v382;
  unint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  int v389;
  unint64_t v390;
  char *v391;
  void (*v392)(char *, uint64_t);
  void (*v393)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  int *v401;
  uint64_t v402;
  uint64_t *v403;
  uint64_t v404;
  uint64_t v405;
  NSObject *v406;
  os_log_type_t v407;
  uint8_t *v408;
  uint64_t v409;
  uint64_t v410;
  unint64_t v411;
  unint64_t v412;
  unint64_t v413;
  unint64_t v414;
  unint64_t v415;
  uint64_t v416;
  uint64_t v417;
  void (*v418)(char *, uint64_t);
  _QWORD *v419;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  unint64_t v443;
  uint64_t v444;
  _BYTE *v445;
  Swift::String v446;
  uint64_t v447;
  _QWORD *v448;
  uint64_t v449;
  char *v450;
  uint64_t v451;
  __n128 v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t *v455;
  char *v456;
  unint64_t *v457;
  unsigned int v458;
  uint64_t found;
  uint64_t v460;
  uint64_t v461;
  char *v462;
  char *v463;
  uint64_t v464;
  uint64_t v465;
  char *v466;
  __n128 v467;
  _QWORD *v468;
  _QWORD *v469;
  char *v470;
  char *v471;
  char *v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  void (*v477)(char *, uint64_t);
  int v478;
  char *v479;
  uint64_t v480;
  uint64_t v481;
  uint64_t v482;
  _QWORD *v483;
  __n128 v484;
  uint64_t v485;
  uint64_t v486;
  char *v487;
  char *v488;
  uint64_t v489;
  char *v490;
  uint64_t v491;
  uint64_t v492;
  void (*v493)(char *, uint64_t, uint64_t);
  __n128 v494;
  uint64_t v495;
  void (*v496)(uint64_t, char *, uint64_t);
  uint64_t v497;
  __int128 *v498;
  unsigned int v499;
  uint64_t v500;
  uint64_t v501;
  uint64_t v502;
  uint64_t v503;
  uint64_t v504;
  char *v505;
  char *v506;
  char *v507;
  char *v508;
  char *v509;
  uint64_t v510;
  uint64_t v511;
  char *v512;
  uint64_t v513;
  uint64_t v514;
  char *v515;
  void (*v516)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v517;
  uint64_t (*v518)(uint64_t, char *, uint64_t);
  uint64_t (*v519)(uint64_t);
  uint64_t v520;
  char *v521;
  char *v522;
  void (*v523)(uint64_t, uint64_t);
  char *v524;
  uint64_t v525;
  void (*v526)(char *, uint64_t);
  uint64_t v527;
  char *v528;
  char *v529;
  char *v530;
  uint64_t v531;
  uint64_t v532;
  uint64_t v533;
  uint64_t v534;
  uint64_t v535;
  uint64_t v536;
  unint64_t v537;
  char v538[8];
  uint64_t v539;
  uint64_t v540;
  char v541[8];
  uint64_t v542;
  char v543;
  uint64_t v544;
  unint64_t v545;
  uint64_t v546;
  uint64_t v547;
  ValueMetadata *v548;
  _UNKNOWN **v549;
  uint64_t v550;
  uint64_t v551;
  uint64_t v552;

  v2 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v2);
  v462 = (char *)&v448 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v461 = type metadata accessor for NotifyMeRequest.Subscription(0);
  v460 = *(_QWORD *)(v461 - 8);
  v4 = __chkstk_darwin(v461);
  v482 = (uint64_t)&v448 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __chkstk_darwin(v4);
  v470 = (char *)&v448 - v7;
  __chkstk_darwin(v6);
  v485 = (uint64_t)&v448 - v8;
  v481 = type metadata accessor for HashAlgorithm(0);
  v480 = *(_QWORD *)(v481 - 8);
  __chkstk_darwin(v481);
  v479 = (char *)&v448 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10001A9A8(&qword_1010F1958);
  __chkstk_darwin(v10);
  v449 = (uint64_t)&v448 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v474 = type metadata accessor for OwnedBeaconRecord(0);
  v473 = *(_QWORD *)(v474 - 8);
  __chkstk_darwin(v474);
  v453 = (uint64_t)&v448 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_10001A9A8((uint64_t *)&unk_1010F47C0);
  v14 = __chkstk_darwin(v13);
  v456 = (char *)&v448 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v465 = (uint64_t)&v448 - v16;
  v491 = sub_10001A9A8(&qword_1010F3430);
  v17 = __chkstk_darwin(v491);
  v455 = (uint64_t *)((char *)&v448 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  v19 = __chkstk_darwin(v17);
  v469 = (_QWORD **)((char *)&v448 - v20);
  v21 = __chkstk_darwin(v19);
  v471 = (char *)&v448 - v22;
  v23 = __chkstk_darwin(v21);
  v466 = (char *)&v448 - v24;
  __chkstk_darwin(v23);
  v26 = (char *)&v448 - v25;
  v495 = type metadata accessor for DateInterval(0);
  v27 = *(_QWORD *)(v495 - 8);
  v28 = __chkstk_darwin(v495);
  v472 = (char *)&v448 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = __chkstk_darwin(v28);
  v522 = (char *)&v448 - v31;
  __chkstk_darwin(v30);
  v521 = (char *)&v448 - v32;
  v514 = type metadata accessor for Calendar.Component(0);
  v513 = *(_QWORD *)(v514 - 8);
  __chkstk_darwin(v514);
  v512 = (char *)&v448 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v511 = type metadata accessor for Calendar(0);
  v510 = *(_QWORD *)(v511 - 8);
  __chkstk_darwin(v511);
  v509 = (char *)&v448 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = sub_10001A9A8(&qword_1010F7AE0);
  __chkstk_darwin(v35);
  v37 = (char *)&v448 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  v454 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  v38 = __chkstk_darwin(v454);
  v464 = (uint64_t)&v448 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = __chkstk_darwin(v38);
  v486 = (uint64_t)&v448 - v41;
  v42 = __chkstk_darwin(v40);
  v508 = (char *)&v448 - v43;
  v44 = __chkstk_darwin(v42);
  v518 = (uint64_t (*)(uint64_t, char *, uint64_t))((char *)&v448 - v45);
  __chkstk_darwin(v44);
  v536 = (uint64_t)&v448 - v46;
  v534 = type metadata accessor for UUID(0);
  v525 = *(_QWORD *)(v534 - 8);
  v47 = __chkstk_darwin(v534);
  v530 = (char *)&v448 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v47);
  v519 = (uint64_t (*)(uint64_t))((char *)&v448 - v49);
  found = type metadata accessor for NotifyWhenFoundRecord(0);
  __chkstk_darwin(found);
  v532 = (uint64_t)&v448 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = sub_10001A9A8((uint64_t *)&unk_1011093F0);
  v52 = *(_QWORD *)(v51 - 8);
  __chkstk_darwin(v51);
  v54 = (__int128 *)((char *)&v448 - ((v53 + 15) & 0xFFFFFFFFFFFFFFF0));
  v55 = type metadata accessor for Date(0);
  v56 = *(_QWORD *)(v55 - 8);
  v57 = __chkstk_darwin(v55);
  v463 = (char *)&v448 - ((v58 + 15) & 0xFFFFFFFFFFFFFFF0);
  v59 = __chkstk_darwin(v57);
  v487 = (char *)&v448 - v60;
  v61 = __chkstk_darwin(v59);
  v507 = (char *)&v448 - v62;
  v63 = __chkstk_darwin(v61);
  v490 = (char *)&v448 - v64;
  v65 = __chkstk_darwin(v63);
  v506 = (char *)&v448 - v66;
  v67 = __chkstk_darwin(v65);
  v489 = (uint64_t)&v448 - v68;
  v69 = __chkstk_darwin(v67);
  v505 = (char *)&v448 - v70;
  v71 = __chkstk_darwin(v69);
  v529 = (char *)&v448 - v72;
  __chkstk_darwin(v71);
  v74 = (char *)&v448 - v73;
  static Date.trustedNow.getter((uint64_t)&v448 - v73);
  v504 = *(_QWORD *)(a1 + 16);
  v535 = v55;
  if (!v504)
  {
    v77 = *(void (**)(char *, uint64_t))(v56 + 8);
    v419 = _swiftEmptyArrayStorage;
    goto LABEL_89;
  }
  v502 = (uint64_t)v54 + *(int *)(v51 + 48);
  v501 = a1 + ((*(unsigned __int8 *)(v52 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v52 + 80));
  v500 = *(_QWORD *)(v52 + 72);
  v515 = &v543;
  v499 = enum case for Calendar.Component.minute(_:);
  v457 = &v545;
  v458 = enum case for Feature.FindMy.networkScalingImprovements(_:);
  v478 = enum case for HashAlgorithm.sha256(_:);
  v451 = a1;
  v75 = swift_bridgeObjectRetain(a1);
  v76 = 0;
  v537 = 0;
  v468 = v26;
  v75.n128_u64[0] = 141558275;
  v494 = v75;
  v488 = (char *)&type metadata for Any + 8;
  v520 = v56;
  v75.n128_u64[0] = 136315138;
  v484 = v75;
  v75.n128_u64[0] = 136315650;
  v452 = v75;
  v75.n128_u64[0] = 141558531;
  v467 = v75;
  v450 = (char *)&type metadata for () + 8;
  v483 = _swiftEmptyArrayStorage;
  v492 = v27;
  v524 = v37;
  v498 = v54;
  v528 = v74;
  do
  {
    sub_10000F9B8(v501 + v500 * v76, (uint64_t)v54, (uint64_t *)&unk_1011093F0);
    sub_10000F9FC(v54, (uint64_t)&v550);
    sub_1000126EC(v502, v532, type metadata accessor for NotifyWhenFoundRecord);
    if (qword_1010E9AA0 != -1)
      swift_once(&qword_1010E9AA0, sub_100201450);
    v503 = type metadata accessor for Logger(0);
    v80 = sub_10001A9E8(v503, (uint64_t)qword_1011B6C18);
    v81 = sub_100030784((uint64_t)&v550, (uint64_t)&v546);
    v533 = v80;
    v82 = Logger.logObject.getter(v81);
    v83 = static os_log_type_t.default.getter(v82);
    v84 = os_log_type_enabled(v82, v83);
    v85 = v531;
    v527 = v76;
    if (v84)
    {
      v86 = swift_slowAlloc(22, -1);
      v87 = swift_slowAlloc(32, -1);
      v544 = v87;
      *(_DWORD *)v86 = v494.n128_u32[0];
      v542 = 1752392040;
      v88 = v515;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v542, v515, v86 + 4, v86 + 12);
      *(_WORD *)(v86 + 12) = 2081;
      v526 = (void (*)(char *, uint64_t))(v86 + 14);
      v90 = v548;
      v89 = v549;
      sub_10001AA44(&v546, (uint64_t)v548);
      v91 = v519;
      (*(void (**)(ValueMetadata *))(*((_QWORD *)v89[1] + 1) + 32))(v90);
      v92 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v93 = v534;
      v94 = dispatch thunk of CustomStringConvertible.description.getter(v534, v92);
      v96 = v95;
      (*(void (**)(uint64_t (*)(uint64_t), uint64_t))(v525 + 8))(v91, v93);
      v542 = sub_100016940(v94, v96, &v544);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v542, v88, v526, v86 + 22);
      v37 = v524;
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v546);
      _os_log_impl((void *)&_mh_execute_header, v82, v83, "publishKeys for beacon: %{private,mask.hash}s", (uint8_t *)v86, 0x16u);
      swift_arrayDestroy(v87, 1, v488);
      v97 = v87;
      v85 = v531;
      swift_slowDealloc(v97, -1, -1);
      swift_slowDealloc(v86, -1, -1);
    }
    else
    {
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v546);
    }

    if (qword_1010E9D08 != -1)
      swift_once(&qword_1010E9D08, sub_10059A6E0);
    v98 = v537;
    OS_dispatch_queue.sync<A>(execute:)(sub_100003D88, qword_1011B71A8, &type metadata for Configuration);
    v99 = sub_100C1B08C(v546);
    swift_bridgeObjectRelease();
    v100 = 60 * v99;
    if ((unsigned __int128)(v99 * (__int128)60) >> 64 != (60 * v99) >> 63)
    {
      __break(1u);
LABEL_91:
      __break(1u);
      JUMPOUT(0x1002094E8);
    }
    OS_dispatch_queue.sync<A>(execute:)(sub_100003D88, qword_1011B71A8, &type metadata for Configuration);
    v101 = sub_100C1B064(v546);
    swift_bridgeObjectRelease();
    v102 = 60 * v101;
    if ((unsigned __int128)(v101 * (__int128)60) >> 64 != (60 * v101) >> 63)
      goto LABEL_91;
    v523 = (void (*)(uint64_t, uint64_t))v100;
    v103 = v551;
    v104 = v552;
    sub_10001AA44(&v550, v551);
    v105 = (uint64_t)v530;
    (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v104 + 8) + 8) + 32))(v103);
    v517 = *(_QWORD *)(v85 + 16);
    sub_10081AECC(v105, (uint64_t)v37);
    v106 = type metadata accessor for KeySyncRecord(0);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v106 - 8) + 48))(v37, 1, v106) == 1)
    {
      sub_100004048((uint64_t)v37, &qword_1010F7AE0);
      v107 = v520;
      v108 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v520 + 56);
      v109 = v536;
      v110 = v535;
      v108(v536, 1, 1, v535);
    }
    else
    {
      v107 = v520;
      v111 = v536;
      v110 = v535;
      (*(void (**)(uint64_t, char *, uint64_t))(v520 + 16))(v536, &v37[*(int *)(v106 + 28)], v535);
      v112 = (uint64_t)v37;
      v109 = v111;
      sub_1000126B0(v112, type metadata accessor for KeySyncRecord);
      v108 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v107 + 56);
      v108(v109, 0, 1, v110);
    }
    v526 = *(void (**)(char *, uint64_t))(v525 + 8);
    v526(v530, v534);
    v113 = v518;
    v516 = v108;
    v108((uint64_t)v518, 1, 1, v110);
    OS_dispatch_queue.sync<A>(execute:)(sub_100003D88, qword_1011B71A8, &type metadata for Configuration);
    v537 = v98;
    v548 = &type metadata for Configuration;
    v549 = &off_10105B898;
    v114 = v529;
    sub_10064C894(&v550, (uint64_t)v528, v113, v109, 0, &v546, v529);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v546);
    v115 = sub_100004048((uint64_t)v113, (uint64_t *)&unk_1010EA690);
    v116 = v509;
    static Calendar.current.getter(v115);
    v117 = v513;
    v118 = v512;
    v119 = v514;
    (*(void (**)(char *, _QWORD, uint64_t))(v513 + 104))(v512, v499, v514);
    v120 = (uint64_t)v508;
    Calendar.date(byAdding:value:to:wrappingComponents:)(v118, -30, v114, 0);
    (*(void (**)(char *, uint64_t))(v117 + 8))(v118, v119);
    v121 = v116;
    v122 = v120;
    (*(void (**)(char *, uint64_t))(v510 + 8))(v121, v511);
    v123 = v107;
    v124 = v110;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v107 + 48))(v120, 1, v110) == 1)
    {
      sub_100004048(v120, (uint64_t *)&unk_1010EA690);
      v125 = sub_100030784((uint64_t)&v550, (uint64_t)&v546);
      v126 = Logger.logObject.getter(v125);
      v127 = static os_log_type_t.error.getter(v126);
      if (!os_log_type_enabled(v126, v127))
      {

        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v546);
        v77 = *(void (**)(char *, uint64_t))(v107 + 8);
        v77(v529, v124);
        v78 = v536;
LABEL_4:
        sub_100004048(v78, (uint64_t *)&unk_1010EA690);
        sub_1000126B0(v532, type metadata accessor for NotifyWhenFoundRecord);
        v37 = v524;
        v54 = v498;
        v74 = v528;
        v79 = v527;
        goto LABEL_5;
      }
      v128 = (uint8_t *)swift_slowAlloc(12, -1);
      v129 = swift_slowAlloc(32, -1);
      v544 = v129;
      *(_DWORD *)v128 = v484.n128_u32[0];
      v131 = v548;
      v130 = v549;
      sub_10001AA44(&v546, (uint64_t)v548);
      v132 = v519;
      (*(void (**)(ValueMetadata *))(*((_QWORD *)v130[1] + 1) + 32))(v131);
      v133 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v134 = v534;
      v135 = dispatch thunk of CustomStringConvertible.description.getter(v534, v133);
      v137 = v136;
      v526((char *)v132, v134);
      v542 = sub_100016940(v135, v137, &v544);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v542, v515, v128 + 4, v128 + 12);
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v546);
      _os_log_impl((void *)&_mh_execute_header, v126, v127, "Failed to adjust start date by 30 minutes for beacon %s", v128, 0xCu);
      swift_arrayDestroy(v129, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v129, -1, -1);
      swift_slowDealloc(v128, -1, -1);

      v77 = *(void (**)(char *, uint64_t))(v520 + 8);
      v77(v529, v535);
LABEL_38:
      v78 = v536;
      goto LABEL_4;
    }
    v138 = (double)(uint64_t)v523;
    v139 = (double)v102;
    v140 = v505;
    v493 = *(void (**)(char *, uint64_t, uint64_t))(v107 + 32);
    v493(v505, v122, v110);
    v141 = v489;
    static Date.trustedNow.getter(v489);
    v142 = Date.timeIntervalSince(_:)(v140);
    v523 = *(void (**)(uint64_t, uint64_t))(v123 + 8);
    v523(v141, v110);
    v143 = v551;
    v144 = v552;
    sub_10001AA44(&v550, v551);
    LODWORD(v497) = (*(uint64_t (**)(uint64_t, uint64_t))(v144 + 112))(v143, v144);
    v145 = v110;
    v146 = v551;
    v147 = v552;
    sub_10001AA44(&v550, v551);
    v148 = (*(uint64_t (**)(uint64_t, uint64_t))(v147 + 112))(v146, v147);
    v149 = v506;
    Date.addingTimeInterval(_:)(v138);
    v150 = *(void (**)(uint64_t, char *, uint64_t))(v123 + 16);
    v150(v141, v140, v145);
    v151 = v490;
    v150((uint64_t)v490, v149, v145);
    DateInterval.init(start:end:)(v141, v151);
    v152 = v507;
    Date.addingTimeInterval(_:)(v139);
    v150(v141, v140, v145);
    v496 = (void (*)(_QWORD, _QWORD, _QWORD))v150;
    v150((uint64_t)v151, v152, v145);
    DateInterval.init(start:end:)(v141, v151);
    if ((v497 & 1) == 0 || v142 <= v138)
    {
      v186 = v491;
      v187 = *(int *)(v491 + 48);
      if ((v148 & 1) != 0)
      {
        v188 = v469;
        v189 = (uint64_t)v469 + v187;
        v190 = v537;
        sub_100205400((uint64_t)v469 + v187, &v550, v521, 0);
        v192 = v190;
        if (!v190)
        {
          *v188 = v191;
          v193 = v191;
          v194 = v455;
          v195 = (uint64_t)v455 + *(int *)(v186 + 48);
          sub_100205400(v195, &v550, v522, 1);
          v537 = 0;
          *v194 = v267;
          v268 = (uint64_t *)v466;
          v269 = &v466[*(int *)(v186 + 48)];
          v270 = v535;
          v271 = (void (*)(char *, uint64_t, uint64_t))v496;
          v496(v269, v189, v535);
          v493(v487, (uint64_t)v269, v270);
          v272 = (char *)v268 + *(int *)(v186 + 48);
          *v268 = v193;
          v271(v272, v189, v270);
          v497 = v193;
          v273 = swift_bridgeObjectRetain(v193);
          v274 = v272;
          v275 = v186;
          v276 = (void (*)(char *, uint64_t, __n128))v523;
          ((void (*)(char *, uint64_t, __n128))v523)(v274, v270, v273);
          v277 = (char *)v268 + *(int *)(v275 + 48);
          v278 = (_QWORD *)*v194;
          *v268 = *v194;
          v271(v277, v195, v270);
          v493 = (void (*)(char *, uint64_t, uint64_t))v278;
          v279 = swift_bridgeObjectRetain((void (*)(char *, uint64_t, uint64_t))v278);
          v276(v277, v270, v279);
          v280 = sub_100030784((uint64_t)&v550, (uint64_t)&v546);
          v281 = Logger.logObject.getter(v280);
          v282 = static os_log_type_t.default.getter(v281);
          v283 = os_log_type_enabled(v281, v282);
          v170 = v534;
          if (v283)
          {
            v284 = swift_slowAlloc(22, -1);
            v285 = swift_slowAlloc(32, -1);
            v544 = v285;
            *(_DWORD *)v284 = v494.n128_u32[0];
            v542 = 1752392040;
            v286 = v515;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v542, v515, v284 + 4, v284 + 12);
            *(_WORD *)(v284 + 12) = 2081;
            v477 = (void (*)(char *, uint64_t))(v284 + 14);
            v288 = v548;
            v287 = v549;
            sub_10001AA44(&v546, (uint64_t)v548);
            v289 = v519;
            (*(void (**)(ValueMetadata *))(*((_QWORD *)v287[1] + 1) + 32))(v288);
            v290 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
            v291 = dispatch thunk of CustomStringConvertible.description.getter(v170, v290);
            v293 = v292;
            v181 = (void (*)(uint64_t (*)(uint64_t), uint64_t))v526;
            v526((char *)v289, v170);
            v542 = sub_100016940(v291, v293, &v544);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v542, v286, v477, v284 + 22);
            v182 = v289;
            swift_bridgeObjectRelease();
            _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v546);
            _os_log_impl((void *)&_mh_execute_header, v281, v282, "Subscribing primary and secondary keys for beacon: %{private,mask.hash}s", (uint8_t *)v284, 0x16u);
            swift_arrayDestroy(v285, 1, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v285, -1, -1);
            swift_slowDealloc(v284, -1, -1);

            sub_100004048((uint64_t)v455, &qword_1010F3430);
            sub_100004048((uint64_t)v469, &qword_1010F3430);
            v184 = v535;
            goto LABEL_44;
          }

          _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v546);
          sub_100004048((uint64_t)v194, &qword_1010F3430);
          sub_100004048((uint64_t)v469, &qword_1010F3430);
          v182 = v519;
          v184 = v535;
LABEL_50:
          v266 = v463;
          v181 = (void (*)(uint64_t (*)(uint64_t), uint64_t))v526;
          goto LABEL_51;
        }
        v537 = 0;
        v153 = v536;
      }
      else
      {
        v196 = v471;
        v197 = &v471[v187];
        v157 = v537;
        sub_100205400((uint64_t)&v471[v187], &v550, v521, 0);
        v153 = v536;
        if (!v157)
        {
          v243 = v198;
          v537 = 0;
          *v196 = v198;
          v244 = (uint64_t *)v466;
          v245 = &v466[*(int *)(v186 + 48)];
          v184 = v535;
          v246 = (void (*)(char *, char *, uint64_t))v496;
          v496(v245, v197, v535);
          v493(v487, (uint64_t)v245, v184);
          v247 = (char *)v244 + *(int *)(v186 + 48);
          *v244 = v243;
          v246(v247, v197, v184);
          v497 = v243;
          v248 = swift_bridgeObjectRetain(v243);
          ((void (*)(char *, uint64_t, __n128))v523)(v247, v184, v248);
          v249 = sub_100030784((uint64_t)&v550, (uint64_t)&v546);
          v250 = Logger.logObject.getter(v249);
          v251 = static os_log_type_t.default.getter(v250);
          v252 = os_log_type_enabled(v250, v251);
          v170 = v534;
          if (v252)
          {
            v253 = swift_slowAlloc(22, -1);
            v254 = swift_slowAlloc(32, -1);
            v544 = v254;
            *(_DWORD *)v253 = v494.n128_u32[0];
            v542 = 1752392040;
            v255 = v515;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v542, v515, v253 + 4, v253 + 12);
            *(_WORD *)(v253 + 12) = 2081;
            v493 = (void (*)(char *, uint64_t, uint64_t))(v253 + 14);
            v257 = v548;
            v256 = v549;
            sub_10001AA44(&v546, (uint64_t)v548);
            v258 = v519;
            (*(void (**)(ValueMetadata *))(*((_QWORD *)v256[1] + 1) + 32))(v257);
            v259 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
            v260 = dispatch thunk of CustomStringConvertible.description.getter(v170, v259);
            v262 = v261;
            v181 = (void (*)(uint64_t (*)(uint64_t), uint64_t))v526;
            v526((char *)v258, v170);
            v542 = sub_100016940(v260, v262, &v544);
            v263 = v255;
            v264 = (uint64_t)v471;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v542, v263, v493, v253 + 22);
            v182 = v258;
            swift_bridgeObjectRelease();
            _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v546);
            _os_log_impl((void *)&_mh_execute_header, v250, v251, "Subscribing primary keys for beacon: %{private,mask.hash}s", (uint8_t *)v253, 0x16u);
            swift_arrayDestroy(v254, 1, (char *)&type metadata for Any + 8);
            v265 = v254;
            v184 = v535;
            swift_slowDealloc(v265, -1, -1);
            swift_slowDealloc(v253, -1, -1);

            sub_100004048(v264, &qword_1010F3430);
            v185 = (char **)&v523;
            goto LABEL_43;
          }

          _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v546);
          sub_100004048((uint64_t)v196, &qword_1010F3430);
          v493 = (void (*)(char *, uint64_t, uint64_t))_swiftEmptyArrayStorage;
          v182 = v519;
          goto LABEL_50;
        }
LABEL_32:
        v192 = v157;
        v537 = 0;
      }
      v199 = v535;
      sub_100030784((uint64_t)&v550, (uint64_t)&v546);
      swift_errorRetain(v192);
      v200 = swift_errorRetain(v192);
      v201 = Logger.logObject.getter(v200);
      v202 = static os_log_type_t.error.getter(v201);
      if (os_log_type_enabled(v201, v202))
      {
        v203 = swift_slowAlloc(32, -1);
        v533 = swift_slowAlloc(64, -1);
        v544 = v533;
        *(_DWORD *)v203 = v467.n128_u32[0];
        v542 = 1752392040;
        v204 = v515;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v542, v515, v203 + 4, v203 + 12);
        *(_WORD *)(v203 + 12) = 2081;
        v206 = v548;
        v205 = v549;
        sub_10001AA44(&v546, (uint64_t)v548);
        v207 = v519;
        (*(void (**)(ValueMetadata *))(*((_QWORD *)v205[1] + 1) + 32))(v206);
        v208 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v209 = v534;
        v210 = dispatch thunk of CustomStringConvertible.description.getter(v534, v208);
        v212 = v211;
        v526((char *)v207, v209);
        v542 = sub_100016940(v210, v212, &v544);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v542, v204, v203 + 14, v203 + 22);
        v213 = v535;
        swift_bridgeObjectRelease();
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v546);
        *(_WORD *)(v203 + 22) = 2082;
        v542 = v192;
        swift_errorRetain(v192);
        v214 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
        v215 = String.init<A>(describing:)(&v542, v214);
        v542 = sub_100016940(v215, v216, &v544);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v542, v204, v203 + 24, v203 + 32);
        swift_bridgeObjectRelease();
        swift_errorRelease(v192);
        swift_errorRelease(v192);
        _os_log_impl((void *)&_mh_execute_header, v201, v202, "Could not obtain keys for %{private,mask.hash}s - %{public}s", (uint8_t *)v203, 0x20u);
        v217 = v533;
        swift_arrayDestroy(v533, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v217, -1, -1);
        swift_slowDealloc(v203, -1, -1);

        swift_errorRelease(v192);
        v218 = *(void (**)(char *, uint64_t))(v492 + 8);
        v219 = v495;
        v218(v522, v495);
        v77 = (void (*)(char *, uint64_t))v523;
        v523((uint64_t)v507, v213);
        v218(v521, v219);
        v77(v506, v213);
        v77(v505, v213);
        v77(v529, v213);
        goto LABEL_38;
      }

      swift_errorRelease(v192);
      swift_errorRelease(v192);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v546);
      swift_errorRelease(v192);
      v220 = *(void (**)(char *, uint64_t))(v492 + 8);
      v221 = v495;
      v220(v522, v495);
      v222 = v507;
LABEL_40:
      v77 = (void (*)(char *, uint64_t))v523;
      v523((uint64_t)v222, v199);
      v220(v521, v221);
      v77(v506, v199);
      v77(v505, v199);
      v77(v529, v199);
      v78 = v153;
      goto LABEL_4;
    }
    v153 = v536;
    v154 = v491;
    if ((v148 & 1) == 0)
    {
      v223 = sub_100030784((uint64_t)&v550, (uint64_t)&v546);
      v224 = Logger.logObject.getter(v223);
      v225 = static os_log_type_t.error.getter(v224);
      v226 = os_log_type_enabled(v224, v225);
      v227 = v534;
      if (v226)
      {
        v228 = swift_slowAlloc(22, -1);
        v229 = swift_slowAlloc(32, -1);
        v544 = v229;
        *(_DWORD *)v228 = v494.n128_u32[0];
        v542 = 1752392040;
        v230 = v515;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v542, v515, v228 + 4, v228 + 12);
        *(_WORD *)(v228 + 12) = 2081;
        v231 = v227;
        v233 = v548;
        v232 = v549;
        sub_10001AA44(&v546, (uint64_t)v548);
        v234 = v519;
        (*(void (**)(ValueMetadata *))(*((_QWORD *)v232[1] + 1) + 32))(v233);
        v235 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v236 = dispatch thunk of CustomStringConvertible.description.getter(v231, v235);
        v238 = v237;
        v239 = v234;
        v240 = v535;
        v526((char *)v239, v231);
        v542 = sub_100016940(v236, v238, &v544);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v542, v230, v228 + 14, v228 + 22);
        swift_bridgeObjectRelease();
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v546);
        _os_log_impl((void *)&_mh_execute_header, v224, v225, "Not subscribing beacon: %{private,mask.hash}s", (uint8_t *)v228, 0x16u);
        swift_arrayDestroy(v229, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v229, -1, -1);
        swift_slowDealloc(v228, -1, -1);

        v241 = *(void (**)(char *, uint64_t))(v492 + 8);
        v242 = v495;
        v241(v522, v495);
        v77 = (void (*)(char *, uint64_t))v523;
        v523((uint64_t)v507, v240);
        v241(v521, v242);
        v77(v506, v240);
        v77(v505, v240);
        v77(v529, v240);
        goto LABEL_38;
      }

      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v546);
      v220 = *(void (**)(char *, uint64_t))(v492 + 8);
      v221 = v495;
      v220(v522, v495);
      v222 = v507;
      v199 = v535;
      goto LABEL_40;
    }
    v155 = v468;
    v156 = (uint64_t)v468 + *(int *)(v491 + 48);
    v157 = v537;
    sub_100205400(v156, &v550, v522, 1);
    if (v157)
      goto LABEL_32;
    v537 = 0;
    *v155 = v158;
    v159 = v466;
    v160 = &v466[*(int *)(v154 + 48)];
    v161 = v158;
    v162 = v535;
    v163 = (void (*)(char *, uint64_t, uint64_t))v496;
    v496(v160, v156, v535);
    v493(v487, (uint64_t)v160, v162);
    v164 = (char *)v159 + *(int *)(v154 + 48);
    *v159 = v161;
    v163(v164, v156, v162);
    v493 = (void (*)(char *, uint64_t, uint64_t))v161;
    v165 = swift_bridgeObjectRetain((void (*)(char *, uint64_t, uint64_t))v161);
    ((void (*)(char *, uint64_t, __n128))v523)(v164, v162, v165);
    v166 = sub_100030784((uint64_t)&v550, (uint64_t)&v546);
    v167 = Logger.logObject.getter(v166);
    v168 = static os_log_type_t.default.getter(v167);
    v169 = os_log_type_enabled(v167, v168);
    v170 = v534;
    if (v169)
    {
      v171 = swift_slowAlloc(22, -1);
      v172 = swift_slowAlloc(32, -1);
      v544 = v172;
      *(_DWORD *)v171 = v494.n128_u32[0];
      v542 = 1752392040;
      v173 = v515;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v542, v515, v171 + 4, v171 + 12);
      *(_WORD *)(v171 + 12) = 2081;
      v497 = v171 + 14;
      v175 = v548;
      v174 = v549;
      sub_10001AA44(&v546, (uint64_t)v548);
      v176 = v519;
      (*(void (**)(ValueMetadata *))(*((_QWORD *)v174[1] + 1) + 32))(v175);
      v177 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v178 = dispatch thunk of CustomStringConvertible.description.getter(v170, v177);
      v180 = v179;
      v181 = (void (*)(uint64_t (*)(uint64_t), uint64_t))v526;
      v526((char *)v176, v170);
      v542 = sub_100016940(v178, v180, &v544);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v542, v173, v497, v171 + 22);
      v182 = v176;
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v546);
      _os_log_impl((void *)&_mh_execute_header, v167, v168, "Subscribing secondary keys for beacon: %{private,mask.hash}s", (uint8_t *)v171, 0x16u);
      swift_arrayDestroy(v172, 1, (char *)&type metadata for Any + 8);
      v183 = v172;
      v184 = v535;
      swift_slowDealloc(v183, -1, -1);
      swift_slowDealloc(v171, -1, -1);

      sub_100004048((uint64_t)v468, &qword_1010F3430);
      v185 = &v529;
LABEL_43:
      *(v185 - 32) = (char *)_swiftEmptyArrayStorage;
LABEL_44:
      v266 = v463;
      goto LABEL_51;
    }

    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v546);
    sub_100004048((uint64_t)v155, &qword_1010F3430);
    v497 = (uint64_t)_swiftEmptyArrayStorage;
    v182 = v519;
    v266 = v463;
    v181 = (void (*)(uint64_t (*)(uint64_t), uint64_t))v526;
    v184 = v535;
LABEL_51:
    type metadata accessor for NotifyWhenFoundManager();
    v295 = v551;
    v294 = v552;
    sub_10001AA44(&v550, v551);
    (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v294 + 8) + 8) + 32))(v295);
    sub_1002098E4(v182, v486);
    v181(v182, v170);
    v296 = v464;
    sub_10000F9B8(v536, v464, (uint64_t *)&unk_1010EA690);
    v496(v266, v487, v184);
    v297 = v472;
    v298 = v492;
    v299 = v495;
    v300 = (*(uint64_t (**)(char *, char *, uint64_t))(v492 + 16))(v472, v522, v495);
    v301 = Logger.logObject.getter(v300);
    v302 = static os_log_type_t.default.getter(v301);
    v303 = v302;
    if (os_log_type_enabled(v301, v302))
    {
      v304 = swift_slowAlloc(32, -1);
      v305 = swift_slowAlloc(96, -1);
      v546 = v305;
      *(_DWORD *)v304 = v452.n128_u32[0];
      LODWORD(v476) = v303;
      v306 = (uint64_t)v518;
      sub_10000F9B8(v296, (uint64_t)v518, (uint64_t *)&unk_1010EA690);
      v307 = String.init<A>(describing:)(v306, v454);
      v544 = sub_100016940(v307, v308, &v546);
      v309 = v457;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v544, v457, v304 + 4, v304 + 12);
      swift_bridgeObjectRelease();
      sub_100004048(v296, (uint64_t *)&unk_1010EA690);
      *(_WORD *)(v304 + 12) = 2080;
      v310 = sub_100006204(&qword_1010EE0F0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
      v311 = dispatch thunk of CustomStringConvertible.description.getter(v184, v310);
      v544 = sub_100016940(v311, v312, &v546);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v544, v309, v304 + 14, v304 + 22);
      swift_bridgeObjectRelease();
      v523((uint64_t)v266, v184);
      *(_WORD *)(v304 + 22) = 2080;
      v313 = sub_100006204(&qword_1010F2168, (uint64_t (*)(uint64_t))&type metadata accessor for DateInterval, (uint64_t)&protocol conformance descriptor for DateInterval);
      v314 = v472;
      v315 = v495;
      v316 = dispatch thunk of CustomStringConvertible.description.getter(v495, v313);
      v544 = sub_100016940(v316, v317, &v546);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v544, v309, v304 + 24, v304 + 32);
      swift_bridgeObjectRelease();
      v477 = *(void (**)(char *, uint64_t))(v492 + 8);
      v477(v314, v315);
      _os_log_impl((void *)&_mh_execute_header, v301, (os_log_type_t)v476, "lastGoodKeyDate: %s, startDate: %s, secondaryDateInterval: %s", (uint8_t *)v304, 0x20u);
      swift_arrayDestroy(v305, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v305, -1, -1);
      swift_slowDealloc(v304, -1, -1);
    }
    else
    {
      sub_100004048(v296, (uint64_t *)&unk_1010EA690);
      v523((uint64_t)v266, v184);
      v477 = *(void (**)(char *, uint64_t))(v298 + 8);
      v477(v297, v299);
    }

    v318 = (uint64_t)v470;
    v320 = v551;
    v319 = v552;
    sub_10001AA44(&v550, v551);
    v321 = (uint64_t)v519;
    (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v319 + 8) + 8) + 32))(v320);
    v322 = v465;
    v323 = v517;
    sub_10080B950(v321, v465);
    v324 = v321;
    v325 = v534;
    v326 = (void (*)(uint64_t (*)(uint64_t), uint64_t))v526;
    v526((char *)v324, v534);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v473 + 48))(v322, 1, v474) == 1)
    {
      sub_100004048(v322, (uint64_t *)&unk_1010F47C0);
LABEL_57:
      v476 = 0;
      v475 = 0;
      goto LABEL_59;
    }
    v327 = sub_1009A1DCC();
    v329 = v328;
    sub_1000126B0(v322, type metadata accessor for OwnedBeaconRecord);
    if (v329 >> 60 == 15)
      goto LABEL_57;
    v546 = v327;
    v547 = v329;
    v330 = sub_100133250();
    v476 = RawRepresentable<>.hexString.getter(&type metadata for AccessoryProductData, v330);
    v475 = v331;
    sub_10001EF3C(v327, v329);
LABEL_59:
    My = type metadata accessor for Feature.FindMy(0);
    v548 = (ValueMetadata *)My;
    v549 = (_UNKNOWN **)sub_100006204((unint64_t *)&qword_1010EE1B0, (uint64_t (*)(uint64_t))&type metadata accessor for Feature.FindMy, (uint64_t)&protocol conformance descriptor for Feature.FindMy);
    v333 = sub_100018F08(&v546);
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(My - 8) + 104))(v333, v458, My);
    LOBYTE(My) = isFeatureEnabled(_:)(&v546);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v546);
    if ((My & 1) != 0)
    {
      sub_100030784((uint64_t)&v550, (uint64_t)&v546);
      v334 = sub_10001A9A8((uint64_t *)&unk_1010F7720);
      v335 = (uint64_t)v456;
      v336 = v474;
      v337 = swift_dynamicCast(v456, &v546, v334, v474, 6);
      v338 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v473 + 56);
      if (v337)
      {
        v338(v335, 0, 1, v336);
        v339 = v453;
        sub_1000126EC(v335, v453, type metadata accessor for OwnedBeaconRecord);
        v340 = v336;
        v341 = *(_QWORD *)(v323 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_beaconKeyManagerLock);
        v342 = type metadata accessor for BeaconKeyManager(0);
        v343 = v537;
        OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_10021724C, v323, v341, v450, v342);
        v344 = sub_100DD1298(v339 + *(int *)(v340 + 20));
        v345 = v343;
        if (!v343)
        {
          v377 = v344;
          swift_release();
          v378 = v377[2];
          v448 = v377;
          if (v378)
          {
            v379 = v377 + 7;
            v526 = (void (*)(char *, uint64_t))_swiftEmptyArrayStorage;
            v517 = v378;
            v380 = v377[4];
            v381 = *(v379 - 2);
            v382 = *(v379 - 1);
            v383 = *v379;
            sub_10001BBBC(*(v379 - 3), v381);
            sub_10001BBBC(v382, v383);
            sub_10001BC14(v382, v383);
            sub_10001BBBC(v380, v381);
            sub_1007E7118(v380, v381);
            v385 = v384;
            v542 = 57;
            v386 = type metadata accessor for __DataStorage(0);
            swift_allocObject(v386, *(unsigned int *)(v386 + 48), *(unsigned __int16 *)(v386 + 52));
            v387 = __DataStorage.init(length:)(57);
            v546 = 0x3900000000;
            v547 = v387 | 0x4000000000000000;
            sub_1004A5040((uint64_t)&v546);
            v389 = v388;
            if (!(_DWORD)v388)
            {
              sub_1002F7C0C(v542, v546, v547);
              v390 = v545;
              CCECCryptorRelease(v385);
              sub_10001BC14(v380, v381);
              v391 = (char *)&loc_100208DA4 + dword_1002098D4[v390 >> 62];
              v537 = v381;
              __asm { BR              X9 }
            }
            v421 = v380;
            v422 = static os_log_type_t.error.getter(v388);
            if (qword_1010E9F78 != -1)
              swift_once(&qword_1010E9F78, sub_1007E28B4);
            v423 = qword_1011B77E0;
            v424 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
            v425 = swift_allocObject(v424, 72, 7);
            *(_OWORD *)(v425 + 16) = xmmword_100E22B00;
            *(_QWORD *)(v425 + 56) = &type metadata for Int32;
            *(_QWORD *)(v425 + 64) = &protocol witness table for Int32;
            *(_DWORD *)(v425 + 32) = v389;
            os_log(_:dso:log:_:_:)(v422, &_mh_execute_header, v423, "Error running CCECCryptorExportKey. Code: %d.", (_DWORD)v448);
            swift_bridgeObjectRelease();
            v426 = v449;
            CryptoError.init(rawValue:)(v389);
            v427 = type metadata accessor for CryptoError(0);
            v428 = sub_100006204((unint64_t *)&qword_101111450, (uint64_t (*)(uint64_t))&type metadata accessor for CryptoError, (uint64_t)&protocol conformance descriptor for CryptoError);
            v429 = swift_allocError(v427, v428, 0, 0);
            v431 = v430;
            v432 = *(_QWORD *)(v427 - 8);
            if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v432 + 48))(v426, 1, v427) == 1)
            {
              (*(void (**)(uint64_t, _QWORD, uint64_t))(v432 + 104))(v431, enum case for CryptoError.unspecifiedError(_:), v427);
              v433 = sub_100004048(v449, &qword_1010F1958);
            }
            else
            {
              v433 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v432 + 32))(v431, v449, v427);
            }
            swift_willThrow(v433);
            v434 = sub_10001BC14(v546, v547);
            v435 = static os_log_type_t.error.getter(v434);
            if (qword_1010E9F78 != -1)
              swift_once(&qword_1010E9F78, sub_1007E28B4);
            v436 = qword_1011B77E0;
            v437 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
            v438 = swift_allocObject(v437, 72, 7);
            *(_OWORD *)(v438 + 16) = xmmword_100E22B00;
            v546 = v429;
            swift_errorRetain(v429);
            v439 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
            v440 = String.init<A>(describing:)(&v546, v439);
            v442 = v441;
            *(_QWORD *)(v438 + 56) = &type metadata for String;
            *(_QWORD *)(v438 + 64) = sub_10001AA00();
            *(_QWORD *)(v438 + 32) = v440;
            *(_QWORD *)(v438 + 40) = v442;
            os_log(_:dso:log:_:_:)(v435, &_mh_execute_header, v436, "Error deriving advertisementKey: %@", 35, 2, v438);
            swift_bridgeObjectRelease();
            v443 = sub_1000D95A8();
            v444 = swift_allocError(&type metadata for CryptoTokenError, v443, 0, 0);
            *v445 = 0;
            swift_willThrow(v444);
            swift_errorRelease(v429);
            sub_10001BC14(v421, v381);
            v546 = 0;
            v547 = 0xE000000000000000;
            _StringGuts.grow(_:)(35);
            v446._object = (void *)0x8000000100EC7AC0;
            v446._countAndFlagsBits = 0xD000000000000021;
            String.append(_:)(v446);
            v544 = v444;
            v447 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
            _print_unlocked<A, B>(_:_:)(&v544, &v546, v447, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
            _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v546, v547, "searchpartyd/KeyRepresentable.swift", 35, 2, 256, 0);
            __break(1u);
            JUMPOUT(0x1002098C4);
          }
          v526 = (void (*)(char *, uint64_t))_swiftEmptyArrayStorage;
          swift_bridgeObjectRelease();
          sub_1000126B0(v453, type metadata accessor for OwnedBeaconRecord);
          v537 = 0;
          v318 = (uint64_t)v470;
          v393 = v516;
          v392 = v526;
          goto LABEL_78;
        }
        swift_release();
        v346 = v534;
        if (qword_1010EA620 != -1)
          swift_once(&qword_1010EA620, sub_100DC7BE8);
        v537 = 0;
        sub_10001A9E8(v503, (uint64_t)qword_1011B8520);
        sub_100030784((uint64_t)&v550, (uint64_t)&v546);
        swift_errorRetain(v345);
        v347 = swift_errorRetain(v345);
        v348 = Logger.logObject.getter(v347);
        v349 = static os_log_type_t.error.getter(v348);
        if (os_log_type_enabled(v348, v349))
        {
          v350 = swift_slowAlloc(32, -1);
          v517 = swift_slowAlloc(64, -1);
          v544 = v517;
          *(_DWORD *)v350 = v467.n128_u32[0];
          v542 = 1752392040;
          v351 = v515;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v542, v515, v350 + 4, v350 + 12);
          *(_WORD *)(v350 + 12) = 2081;
          v503 = v350 + 14;
          v353 = v548;
          v352 = v549;
          sub_10001AA44(&v546, (uint64_t)v548);
          v354 = v346;
          v355 = v519;
          (*(void (**)(ValueMetadata *))(*((_QWORD *)v352[1] + 1) + 32))(v353);
          v356 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
          v357 = dispatch thunk of CustomStringConvertible.description.getter(v354, v356);
          v359 = v358;
          v326(v355, v354);
          v542 = sub_100016940(v357, v359, &v544);
          v184 = v535;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v542, v351, v503, v350 + 22);
          swift_bridgeObjectRelease();
          _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v546);
          *(_WORD *)(v350 + 22) = 2080;
          swift_getErrorValue(v345, v541, v538);
          v360 = Error.localizedDescription.getter(v539, v540);
          v542 = sub_100016940(v360, v361, &v544);
          v318 = (uint64_t)v470;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v542, v351, v350 + 24, v350 + 32);
          swift_bridgeObjectRelease();
          swift_errorRelease(v345);
          swift_errorRelease(v345);
          _os_log_impl((void *)&_mh_execute_header, v348, v349, "Unable to get ownedDevice keys for %{private,mask.hash}s error: %s.", (uint8_t *)v350, 0x20u);
          v362 = v517;
          swift_arrayDestroy(v517, 2, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v362, -1, -1);
          swift_slowDealloc(v350, -1, -1);

        }
        else
        {

          swift_errorRelease(v345);
          swift_errorRelease(v345);
          _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v546);
        }
        swift_errorRelease(v345);
        sub_1000126B0(v453, type metadata accessor for OwnedBeaconRecord);
      }
      else
      {
        v338(v335, 1, 1, v336);
        sub_100004048(v335, (uint64_t *)&unk_1010F47C0);
        if (qword_1010EA620 != -1)
          swift_once(&qword_1010EA620, sub_100DC7BE8);
        sub_10001A9E8(v503, (uint64_t)qword_1011B8520);
        v363 = sub_100030784((uint64_t)&v550, (uint64_t)&v546);
        v364 = Logger.logObject.getter(v363);
        v365 = static os_log_type_t.error.getter(v364);
        if (os_log_type_enabled(v364, v365))
        {
          v366 = swift_slowAlloc(22, -1);
          v367 = swift_slowAlloc(32, -1);
          v544 = v367;
          *(_DWORD *)v366 = v494.n128_u32[0];
          v542 = 1752392040;
          v368 = v326;
          v369 = v515;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v542, v515, v366 + 4, v366 + 12);
          *(_WORD *)(v366 + 12) = 2081;
          v517 = v366 + 14;
          v371 = v548;
          v370 = v549;
          sub_10001AA44(&v546, (uint64_t)v548);
          v372 = v519;
          (*(void (**)(ValueMetadata *))(*((_QWORD *)v370[1] + 1) + 32))(v371);
          v373 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
          v374 = dispatch thunk of CustomStringConvertible.description.getter(v325, v373);
          v376 = v375;
          v368(v372, v325);
          v542 = sub_100016940(v374, v376, &v544);
          v318 = (uint64_t)v470;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v542, v369, v517, v366 + 22);
          v184 = v535;
          swift_bridgeObjectRelease();
          _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v546);
          _os_log_impl((void *)&_mh_execute_header, v364, v365, "Not an OwnedBeaconRecord not including the owned device keys %{private,mask.hash}s.", (uint8_t *)v366, 0x16u);
          swift_arrayDestroy(v367, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v367, -1, -1);
          swift_slowDealloc(v366, -1, -1);
        }
        else
        {
          _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v546);
        }

      }
    }
    v392 = _swiftEmptyArrayStorage;
    v393 = v516;
LABEL_78:
    v394 = (uint64_t)v518;
    v496(v518, v487, v184);
    v393(v394, 0, 1, v184);
    v395 = v532 + *(int *)(found + 20);
    v397 = v551;
    v396 = v552;
    sub_10001AA44(&v550, v551);
    v398 = (uint64_t)v462;
    (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v396 + 8) + 8) + 32))(v397);
    v399 = v525;
    v400 = v534;
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v525 + 56))(v398, 0, 1, v534);
    v401 = (int *)v461;
    v402 = v485;
    sub_10000F9B8(v486, v485 + *(int *)(v461 + 36), (uint64_t *)&unk_1010EA690);
    sub_100005CF0(v394, v402, (uint64_t *)&unk_1010EA690);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v399 + 16))(v402 + v401[5], v395, v400);
    *(_BYTE *)(v402 + v401[6]) = 1;
    sub_100005CF0(v398, v402 + v401[7], &qword_1010ED860);
    *(_QWORD *)(v402 + v401[8]) = v497;
    v403 = (uint64_t *)(v402 + v401[10]);
    v404 = v475;
    *v403 = v476;
    v403[1] = v404;
    *(_QWORD *)(v402 + v401[11]) = v493;
    *(_QWORD *)(v402 + v401[12]) = v392;
    v405 = sub_10005972C(v402, v318, type metadata accessor for NotifyMeRequest.Subscription);
    v406 = Logger.logObject.getter(v405);
    v407 = static os_log_type_t.default.getter(v406);
    if (os_log_type_enabled(v406, v407))
    {
      v408 = (uint8_t *)swift_slowAlloc(12, -1);
      v409 = swift_slowAlloc(32, -1);
      v546 = v409;
      *(_DWORD *)v408 = v484.n128_u32[0];
      v410 = sub_100298288();
      v544 = sub_100016940(v410, v411, &v546);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v544, v457, v408 + 4, v408 + 12);
      swift_bridgeObjectRelease();
      sub_1000126B0(v318, type metadata accessor for NotifyMeRequest.Subscription);
      _os_log_impl((void *)&_mh_execute_header, v406, v407, "publishKeys subscription: %s.", v408, 0xCu);
      swift_arrayDestroy(v409, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v409, -1, -1);
      swift_slowDealloc(v408, -1, -1);
    }
    else
    {
      sub_1000126B0(v318, type metadata accessor for NotifyMeRequest.Subscription);
    }

    v37 = v524;
    v54 = v498;
    v74 = v528;
    v79 = v527;
    v412 = (unint64_t)v483;
    sub_10005972C(v485, v482, type metadata accessor for NotifyMeRequest.Subscription);
    if ((swift_isUniquelyReferenced_nonNull_native(v412) & 1) == 0)
      v412 = sub_1007C8F84(0, *(_QWORD *)(v412 + 16) + 1, 1, v412);
    v414 = *(_QWORD *)(v412 + 16);
    v413 = *(_QWORD *)(v412 + 24);
    if (v414 >= v413 >> 1)
      v412 = sub_1007C8F84(v413 > 1, v414 + 1, 1, v412);
    *(_QWORD *)(v412 + 16) = v414 + 1;
    v415 = (*(unsigned __int8 *)(v460 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v460 + 80);
    v483 = (_QWORD *)v412;
    sub_1000126EC(v482, v412 + v415 + *(_QWORD *)(v460 + 72) * v414, type metadata accessor for NotifyMeRequest.Subscription);
    sub_1000126B0(v485, type metadata accessor for NotifyMeRequest.Subscription);
    sub_100004048(v486, (uint64_t *)&unk_1010EA690);
    v416 = v535;
    v77 = (void (*)(char *, uint64_t))v523;
    v523((uint64_t)v487, v535);
    v417 = v495;
    v418 = v477;
    v477(v522, v495);
    v77(v507, v416);
    v418(v521, v417);
    v77(v506, v416);
    v77(v505, v416);
    v77(v529, v416);
    sub_100004048(v536, (uint64_t *)&unk_1010EA690);
    sub_1000126B0(v532, type metadata accessor for NotifyWhenFoundRecord);
LABEL_5:
    v76 = v79 + 1;
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v550);
  }
  while (v76 != v504);
  swift_bridgeObjectRelease();
  v419 = v483;
LABEL_89:
  v77(v74, v535);
  return v419;
}

uint64_t sub_1002098E4@<X0>(uint64_t (*a1)(uint64_t a1)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;

  v4 = type metadata accessor for BeaconObservation(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v32 - v9;
  v11 = sub_10001A9A8(&qword_1010EF660);
  __chkstk_darwin(v11);
  v13 = (unint64_t)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1010E9CF0 != -1)
    goto LABEL_22;
  while (1)
  {
    v14 = qword_1011B7160;
    v34 = objc_autoreleasePoolPush();
    v15 = sub_10001A9A8(&qword_1010F7770);
    OS_dispatch_queue.sync<A>(execute:)(sub_10007CAD4, v14, v15);
    v16 = v38;
    if (!v38[2] || (v17 = sub_100003FB0((uint64_t)a1), (v18 & 1) == 0))
    {
      swift_bridgeObjectRelease();
      v23 = _swiftEmptyArrayStorage;
      goto LABEL_18;
    }
    v19 = *(_QWORD *)(v16[7] + 8 * v17);
    swift_bridgeObjectRetain(v19);
    swift_bridgeObjectRelease();
    v20 = sub_100508D98(v19);
    swift_bridgeObjectRelease();
    sub_10088FD00((uint64_t)v20);
    v22 = v21;
    swift_release();
    v23 = _swiftEmptyArrayStorage;
    v38 = _swiftEmptyArrayStorage;
    v37 = *(_QWORD *)(v22 + 16);
    if (!v37)
      break;
    v32 = v13;
    v33 = a2;
    v13 = 0;
    a1 = type metadata accessor for BeaconObservation;
    v35 = v4;
    v36 = v5;
    while (v13 < *(_QWORD *)(v22 + 16))
    {
      v24 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
      a2 = *(_QWORD *)(v5 + 72);
      sub_10005972C(v22 + v24 + a2 * v13, (uint64_t)v10, type metadata accessor for BeaconObservation);
      if (v10[*(int *)(v4 + 24)])
      {
        sub_1000126B0((uint64_t)v10, type metadata accessor for BeaconObservation);
      }
      else
      {
        sub_1000126EC((uint64_t)v10, (uint64_t)v8, type metadata accessor for BeaconObservation);
        if ((swift_isUniquelyReferenced_nonNull_native(v23) & 1) == 0)
          sub_10009AAC8(0, v23[2] + 1, 1);
        v23 = v38;
        v26 = v38[2];
        v25 = v38[3];
        if (v26 >= v25 >> 1)
        {
          sub_10009AAC8(v25 > 1, v26 + 1, 1);
          v23 = v38;
        }
        v23[2] = v26 + 1;
        sub_1000126EC((uint64_t)v8, (uint64_t)v23 + v24 + v26 * a2, type metadata accessor for BeaconObservation);
        v4 = v35;
        v5 = v36;
      }
      if (v37 == ++v13)
      {
        v23 = v38;
        v13 = v32;
        a2 = v33;
        goto LABEL_17;
      }
    }
    __break(1u);
LABEL_22:
    swift_once(&qword_1010E9CF0, sub_10058CADC);
  }
LABEL_17:
  swift_release();
LABEL_18:
  objc_autoreleasePoolPop(v34);
  sub_100A797E8((uint64_t)v23, v13);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v5 + 48))(v13, 1, v4) == 1)
  {
    sub_100004048(v13, &qword_1010EF660);
    v27 = type metadata accessor for Date(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(a2, 1, 1, v27);
  }
  else
  {
    v29 = v13 + *(int *)(v4 + 20);
    v30 = type metadata accessor for Date(0);
    v31 = *(_QWORD *)(v30 - 8);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v31 + 16))(a2, v29, v30);
    sub_1000126B0(v13, type metadata accessor for BeaconObservation);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v31 + 56))(a2, 0, 1, v30);
  }
}

uint64_t sub_100209C7C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v2[13] = a1;
  v2[14] = v1;
  v3 = sub_10001A9A8((uint64_t *)&unk_1010FBA20);
  v2[15] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for FMNAccountType(0);
  v2[16] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v2[17] = v5;
  v2[18] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for NotifyMeEndpoint(0);
  v2[19] = v6;
  v7 = (*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[20] = swift_task_alloc(v7);
  v2[21] = swift_task_alloc(v7);
  v8 = type metadata accessor for FMNServerInteractionController.FMNResponseFields(0);
  v2[22] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v2[23] = v9;
  v10 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[24] = swift_task_alloc(v10);
  v2[25] = swift_task_alloc(v10);
  v2[26] = swift_task_alloc(v10);
  v2[27] = swift_task_alloc(v10);
  return swift_task_switch(sub_100209D84, 0, 0);
}

uint64_t sub_100209D84()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t (*v20)(uint64_t, uint64_t);
  uint64_t v21;

  if (qword_1010E9AA0 != -1)
    swift_once(&qword_1010E9AA0, sub_100201450);
  v1 = v0[13];
  v2 = type metadata accessor for Logger(0);
  v0[28] = sub_10001A9E8(v2, (uint64_t)qword_1011B6C18);
  swift_bridgeObjectRetain_n(v1, 2);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter(v4);
  v6 = os_log_type_enabled(v4, v5);
  v7 = v0[13];
  if (v6)
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = swift_slowAlloc(32, -1);
    v21 = v9;
    *(_DWORD *)v8 = 136315138;
    swift_bridgeObjectRetain(v7);
    v10 = sub_10001A9A8((uint64_t *)&unk_1011093F0);
    v11 = Array.description.getter(v7, v10);
    v13 = v12;
    swift_bridgeObjectRelease();
    v0[12] = sub_100016940(v11, v13, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 12, v0 + 13, v8 + 4, v8 + 12);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n(v7, 2);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "publishKeys for beacons: %s", v8, 0xCu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(v0[13], 2);
  }

  v14 = v0[14];
  v15 = sub_100205F4C(v0[13]);
  v16 = *(_QWORD *)(v14 + 24);
  v17 = unk_1010F4B24;
  v20 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_1010F4B20 + dword_1010F4B20);
  swift_retain();
  v18 = (_QWORD *)swift_task_alloc(v17);
  v0[29] = v18;
  *v18 = v0;
  v18[1] = sub_100209FC4;
  return v20((uint64_t)v15, v16);
}

uint64_t sub_100209FC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  v4 = *(_QWORD **)v3;
  v5 = *(_QWORD *)(*(_QWORD *)v3 + 232);
  v4[30] = a1;
  v4[31] = a2;
  v4[32] = a3;
  swift_task_dealloc(v5);
  return swift_task_switch(sub_10020A024, 0, 0);
}

uint64_t sub_10020A024(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  NSObject *v18;
  uint64_t v19;
  uint8_t *v20;
  unint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v2 = *(_QWORD *)(v1 + 240);
  if (v2)
  {
    v3 = *(_QWORD *)(v1 + 248);
    v4 = *(_QWORD *)(v1 + 256);
    v5 = *(_QWORD **)(v1 + 168);
    v33 = *(_QWORD *)(v1 + 160);
    v6 = *(_QWORD *)(v1 + 144);
    v7 = *(_QWORD *)(v1 + 128);
    v31 = *(_QWORD *)(v1 + 152);
    v32 = *(_QWORD *)(v1 + 120);
    v8 = enum case for FMNAccountType.searchParty(_:);
    v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 + 136) + 104);
    v9(v6, enum case for FMNAccountType.searchParty(_:), v7);
    v10 = type metadata accessor for AccountURLComponents();
    swift_allocObject(v10, 56, 7);
    swift_bridgeObjectRetain(v2);
    sub_10001BBBC(v3, v4);
    *v5 = sub_100C511C4(v6);
    v9((uint64_t)v5 + *(int *)(v31 + 20), v8, v7);
    v11 = type metadata accessor for SearchPartyURLSessionFactory(0);
    swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
    v12 = type metadata accessor for FMNMockingPreferences(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v32, 1, 1, v12);
    v13 = FMNURLSessionFactory.init(mockSessionCreationBlock:preferences:)(0, 0, v32);
    v14 = type metadata accessor for ServerInteractionController(0);
    v15 = swift_allocObject(v14, *(unsigned int *)(v14 + 48), *(unsigned __int16 *)(v14 + 52));
    sub_10005972C((uint64_t)v5, v33, type metadata accessor for NotifyMeEndpoint);
    *(_QWORD *)(v1 + 264) = sub_10041D74C(v33, v13, v15);
    sub_1000126B0((uint64_t)v5, type metadata accessor for NotifyMeEndpoint);
    *(_QWORD *)(v1 + 40) = &type metadata for NotifyMeRequest;
    *(_QWORD *)(v1 + 48) = sub_100217208();
    *(_QWORD *)(v1 + 16) = v2;
    *(_QWORD *)(v1 + 24) = v3;
    *(_QWORD *)(v1 + 32) = v4;
    swift_bridgeObjectRetain(v2);
    sub_10001BBBC(v3, v4);
    v16 = (_QWORD *)swift_task_alloc(dword_1010F7D04);
    *(_QWORD *)(v1 + 272) = v16;
    *v16 = v1;
    v16[1] = sub_10020A324;
    return sub_100338A60(*(_QWORD *)(v1 + 216), v1 + 16);
  }
  else
  {
    v18 = Logger.logObject.getter(a1);
    v19 = static os_log_type_t.error.getter(v18);
    if (os_log_type_enabled(v18, (os_log_type_t)v19))
    {
      v20 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v20 = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, (os_log_type_t)v19, "Could not create notify me request", v20, 2u);
      swift_slowDealloc(v20, -1, -1);
    }

    v21 = sub_100215AC8();
    v22 = swift_allocError(&type metadata for NotifyWhenFoundManager.NotifyWhenFoundError, v21, 0, 0);
    *v23 = 4;
    swift_willThrow(v22);
    v24 = *(_QWORD *)(v1 + 208);
    v26 = *(_QWORD *)(v1 + 192);
    v25 = *(_QWORD *)(v1 + 200);
    v28 = *(_QWORD *)(v1 + 160);
    v27 = *(_QWORD *)(v1 + 168);
    v29 = *(_QWORD *)(v1 + 144);
    v30 = *(_QWORD *)(v1 + 120);
    swift_task_dealloc(*(_QWORD *)(v1 + 216));
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_10020A324()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 272);
  *(_QWORD *)(*v1 + 280) = v0;
  swift_task_dealloc(v3);
  swift_release();
  if (v0)
  {
    v4 = sub_10020AC34;
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v2 + 16));
    v4 = sub_10020A3A4;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_10020A3A4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  void (*v15)(uint64_t, uint64_t);
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  _BOOL4 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  void (*v27)(uint64_t, uint64_t);
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  _BOOL4 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint8_t *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  void (*v39)(uint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  _BYTE *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  _BYTE *v54;
  uint64_t v55;
  NSObject *v56;
  os_log_type_t v57;
  uint8_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77[2];

  v2 = FMNServerInteractionController.FMNResponseFields.statusCode.getter(a1);
  if (v2 == 500 || v2 == 404)
  {
    v16 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v1 + 184) + 16))(*(_QWORD *)(v1 + 200), *(_QWORD *)(v1 + 216), *(_QWORD *)(v1 + 176));
    v17 = Logger.logObject.getter(v16);
    v18 = static os_log_type_t.error.getter(v17);
    v19 = os_log_type_enabled(v17, v18);
    v20 = *(_QWORD *)(v1 + 200);
    v22 = *(_QWORD *)(v1 + 176);
    v21 = *(_QWORD *)(v1 + 184);
    v76 = v1 + 72;
    if (v19)
    {
      v23 = (uint8_t *)swift_slowAlloc(12, -1);
      v74 = swift_slowAlloc(32, -1);
      v77[0] = v74;
      *(_DWORD *)v23 = 136446210;
      v24 = sub_100006204((unint64_t *)&qword_1010FBA30, (uint64_t (*)(uint64_t))&type metadata accessor for FMNServerInteractionController.FMNResponseFields, (uint64_t)&protocol conformance descriptor for FMNServerInteractionController.FMNResponseFields);
      v25 = dispatch thunk of CustomStringConvertible.description.getter(v22, v24);
      *(_QWORD *)(v1 + 80) = sub_100016940(v25, v26, v77);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 80, v1 + 88, v23 + 4, v23 + 12);
      swift_bridgeObjectRelease();
      v27 = *(void (**)(uint64_t, uint64_t))(v21 + 8);
      v27(v20, v22);
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Publish failed: %{public}s", v23, 0xCu);
      swift_arrayDestroy(v74, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v74, -1, -1);
      swift_slowDealloc(v23, -1, -1);
    }
    else
    {
      v27 = *(void (**)(uint64_t, uint64_t))(v21 + 8);
      v27(v20, v22);
    }

    v40 = *(_QWORD *)(v1 + 216);
    v41 = *(_QWORD *)(v1 + 176);
    v42 = sub_100215AC8();
    v43 = swift_allocError(&type metadata for NotifyWhenFoundManager.NotifyWhenFoundError, v42, 0, 0);
    *v44 = 0;
    swift_willThrow(v43);
    v27(v40, v41);
  }
  else
  {
    if (v2 == 200)
    {
      v3 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v1 + 184) + 16))(*(_QWORD *)(v1 + 208), *(_QWORD *)(v1 + 216), *(_QWORD *)(v1 + 176));
      v4 = Logger.logObject.getter(v3);
      v5 = static os_log_type_t.default.getter(v4);
      v6 = os_log_type_enabled(v4, v5);
      v7 = *(_QWORD *)(v1 + 208);
      v9 = *(_QWORD *)(v1 + 176);
      v8 = *(_QWORD *)(v1 + 184);
      if (v6)
      {
        v10 = (uint8_t *)swift_slowAlloc(12, -1);
        v11 = swift_slowAlloc(32, -1);
        *(_DWORD *)v10 = 136315138;
        v77[0] = v11;
        v12 = sub_100006204((unint64_t *)&qword_1010FBA30, (uint64_t (*)(uint64_t))&type metadata accessor for FMNServerInteractionController.FMNResponseFields, (uint64_t)&protocol conformance descriptor for FMNServerInteractionController.FMNResponseFields);
        v13 = dispatch thunk of CustomStringConvertible.description.getter(v9, v12);
        *(_QWORD *)(v1 + 88) = sub_100016940(v13, v14, v77);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 88, v1 + 96, v10 + 4, v10 + 12);
        swift_bridgeObjectRelease();
        v15 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
        v15(v7, v9);
        _os_log_impl((void *)&_mh_execute_header, v4, v5, "Publish success: %s", v10, 0xCu);
        swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v11, -1, -1);
        swift_slowDealloc(v10, -1, -1);
      }
      else
      {
        v15 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
        v15(*(_QWORD *)(v1 + 208), *(_QWORD *)(v1 + 176));
      }

      *(_QWORD *)(v1 + 288) = v15;
      v46 = FMNServerInteractionController.FMNResponseFields.data.getter(v45);
      v48 = v47;
      *(_QWORD *)(v1 + 296) = v46;
      *(_QWORD *)(v1 + 304) = v47;
      v49 = (_QWORD *)swift_task_alloc(dword_1010F31AC);
      *(_QWORD *)(v1 + 312) = v49;
      *v49 = v1;
      v49[1] = sub_10020AAE4;
      return sub_10020D94C(v46, v48);
    }
    v28 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v1 + 184) + 16))(*(_QWORD *)(v1 + 192), *(_QWORD *)(v1 + 216), *(_QWORD *)(v1 + 176));
    v29 = Logger.logObject.getter(v28);
    v30 = static os_log_type_t.error.getter(v29);
    v31 = os_log_type_enabled(v29, v30);
    v33 = *(_QWORD *)(v1 + 184);
    v32 = *(_QWORD *)(v1 + 192);
    v34 = *(_QWORD *)(v1 + 176);
    v76 = v1 + 72;
    if (v31)
    {
      v35 = (uint8_t *)swift_slowAlloc(12, -1);
      v75 = swift_slowAlloc(32, -1);
      v77[0] = v75;
      *(_DWORD *)v35 = 136446210;
      v36 = sub_100006204((unint64_t *)&qword_1010FBA30, (uint64_t (*)(uint64_t))&type metadata accessor for FMNServerInteractionController.FMNResponseFields, (uint64_t)&protocol conformance descriptor for FMNServerInteractionController.FMNResponseFields);
      v37 = dispatch thunk of CustomStringConvertible.description.getter(v34, v36);
      *(_QWORD *)(v1 + 72) = sub_100016940(v37, v38, v77);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 72, v1 + 80, v35 + 4, v35 + 12);
      swift_bridgeObjectRelease();
      v39 = *(void (**)(uint64_t, uint64_t))(v33 + 8);
      v39(v32, v34);
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "Publish failed: %{public}s", v35, 0xCu);
      swift_arrayDestroy(v75, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v75, -1, -1);
      swift_slowDealloc(v35, -1, -1);
    }
    else
    {
      v39 = *(void (**)(uint64_t, uint64_t))(v33 + 8);
      v39(v32, v34);
    }

    v51 = *(_QWORD *)(v1 + 216);
    v52 = *(_QWORD *)(v1 + 176);
    v53 = sub_100215AC8();
    v43 = swift_allocError(&type metadata for NotifyWhenFoundManager.NotifyWhenFoundError, v53, 0, 0);
    *v54 = 2;
    swift_willThrow(v43);
    v39(v51, v52);
  }
  swift_errorRetain(v43);
  v55 = swift_errorRetain(v43);
  v56 = Logger.logObject.getter(v55);
  v57 = static os_log_type_t.error.getter(v56);
  if (os_log_type_enabled(v56, v57))
  {
    v58 = (uint8_t *)swift_slowAlloc(12, -1);
    v59 = swift_slowAlloc(32, -1);
    v77[0] = v59;
    *(_DWORD *)v58 = 136446210;
    *(_QWORD *)(v1 + 56) = v43;
    swift_errorRetain(v43);
    v60 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
    v61 = String.init<A>(describing:)(v1 + 56, v60);
    *(_QWORD *)(v1 + 64) = sub_100016940(v61, v62, v77);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 64, v76, v58 + 4, v58 + 12);
    swift_bridgeObjectRelease();
    swift_errorRelease(v43);
    swift_errorRelease(v43);
    _os_log_impl((void *)&_mh_execute_header, v56, v57, "Server error publishing keys: %{public}s", v58, 0xCu);
    swift_arrayDestroy(v59, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v59, -1, -1);
    swift_slowDealloc(v58, -1, -1);
  }
  else
  {
    swift_errorRelease(v43);
    swift_errorRelease(v43);
  }

  v63 = *(_QWORD *)(v1 + 248);
  v64 = *(_QWORD *)(v1 + 256);
  v65 = *(_QWORD *)(v1 + 240);
  swift_willThrow(v66);
  sub_100153D94(v65, v63, v64);
  sub_100153D94(v65, v63, v64);
  v67 = *(_QWORD *)(v1 + 208);
  v69 = *(_QWORD *)(v1 + 192);
  v68 = *(_QWORD *)(v1 + 200);
  v71 = *(_QWORD *)(v1 + 160);
  v70 = *(_QWORD *)(v1 + 168);
  v72 = *(_QWORD *)(v1 + 144);
  v73 = *(_QWORD *)(v1 + 120);
  swift_task_dealloc(*(_QWORD *)(v1 + 216));
  swift_task_dealloc(v67);
  swift_task_dealloc(v68);
  swift_task_dealloc(v69);
  swift_task_dealloc(v70);
  swift_task_dealloc(v71);
  swift_task_dealloc(v72);
  swift_task_dealloc(v73);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_10020AAE4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 312);
  *(_QWORD *)(*v1 + 320) = v0;
  swift_task_dealloc(v3);
  sub_10001BC14(*(_QWORD *)(v2 + 296), *(_QWORD *)(v2 + 304));
  if (v0)
    v4 = sub_10020AE58;
  else
    v4 = sub_10020AB50;
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_10020AB50()
{
  uint64_t v0;
  void (*v1)(uint64_t, uint64_t);
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v1 = *(void (**)(uint64_t, uint64_t))(v0 + 288);
  v2 = *(_QWORD *)(v0 + 248);
  v3 = *(_QWORD *)(v0 + 256);
  v4 = *(_QWORD *)(v0 + 240);
  v6 = *(_QWORD *)(v0 + 208);
  v5 = *(_QWORD *)(v0 + 216);
  v8 = *(_QWORD *)(v0 + 192);
  v7 = *(_QWORD *)(v0 + 200);
  v9 = *(_QWORD *)(v0 + 176);
  v11 = *(_QWORD *)(v0 + 168);
  v12 = *(_QWORD *)(v0 + 160);
  v13 = *(_QWORD *)(v0 + 144);
  v14 = *(_QWORD *)(v0 + 120);
  sub_100153D94(v4, v2, v3);
  sub_100153D94(v4, v2, v3);
  v1(v5, v9);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10020AC34()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;

  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
  v1 = *(_QWORD *)(v0 + 280);
  swift_errorRetain(v1);
  v2 = swift_errorRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = swift_slowAlloc(32, -1);
    *(_DWORD *)v5 = 136446210;
    v22 = v6;
    *(_QWORD *)(v0 + 56) = v1;
    swift_errorRetain(v1);
    v7 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
    v8 = String.init<A>(describing:)(v0 + 56, v7);
    *(_QWORD *)(v0 + 64) = sub_100016940(v8, v9, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72, v5 + 4, v5 + 12);
    swift_bridgeObjectRelease();
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Server error publishing keys: %{public}s", v5, 0xCu);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);
  }
  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
  }

  v11 = *(_QWORD *)(v0 + 248);
  v10 = *(_QWORD *)(v0 + 256);
  v12 = *(_QWORD *)(v0 + 240);
  swift_willThrow(v13);
  sub_100153D94(v12, v11, v10);
  sub_100153D94(v12, v11, v10);
  v14 = *(_QWORD *)(v0 + 208);
  v16 = *(_QWORD *)(v0 + 192);
  v15 = *(_QWORD *)(v0 + 200);
  v18 = *(_QWORD *)(v0 + 160);
  v17 = *(_QWORD *)(v0 + 168);
  v19 = *(_QWORD *)(v0 + 144);
  v20 = *(_QWORD *)(v0 + 120);
  swift_task_dealloc(*(_QWORD *)(v0 + 216));
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10020AE58()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;

  (*(void (**)(_QWORD, _QWORD))(v0 + 288))(*(_QWORD *)(v0 + 216), *(_QWORD *)(v0 + 176));
  v1 = *(_QWORD *)(v0 + 320);
  swift_errorRetain(v1);
  v2 = swift_errorRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = swift_slowAlloc(32, -1);
    *(_DWORD *)v5 = 136446210;
    v22 = v6;
    *(_QWORD *)(v0 + 56) = v1;
    swift_errorRetain(v1);
    v7 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
    v8 = String.init<A>(describing:)(v0 + 56, v7);
    *(_QWORD *)(v0 + 64) = sub_100016940(v8, v9, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72, v5 + 4, v5 + 12);
    swift_bridgeObjectRelease();
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Server error publishing keys: %{public}s", v5, 0xCu);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);
  }
  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
  }

  v11 = *(_QWORD *)(v0 + 248);
  v10 = *(_QWORD *)(v0 + 256);
  v12 = *(_QWORD *)(v0 + 240);
  swift_willThrow(v13);
  sub_100153D94(v12, v11, v10);
  sub_100153D94(v12, v11, v10);
  v14 = *(_QWORD *)(v0 + 208);
  v16 = *(_QWORD *)(v0 + 192);
  v15 = *(_QWORD *)(v0 + 200);
  v18 = *(_QWORD *)(v0 + 160);
  v17 = *(_QWORD *)(v0 + 168);
  v19 = *(_QWORD *)(v0 + 144);
  v20 = *(_QWORD *)(v0 + 120);
  swift_task_dealloc(*(_QWORD *)(v0 + 216));
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10020B084(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t found;
  uint64_t v19;
  unint64_t v20;

  v2[15] = a1;
  v2[16] = v1;
  v3 = type metadata accessor for UUID(0);
  v2[17] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[18] = v4;
  v2[19] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10001A9A8((uint64_t *)&unk_1010FBA20);
  v2[20] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for FMNAccountType(0);
  v2[21] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v2[22] = v7;
  v2[23] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for NotifyMeEndpoint(0);
  v2[24] = v8;
  v9 = (*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[25] = swift_task_alloc(v9);
  v2[26] = swift_task_alloc(v9);
  v10 = type metadata accessor for FMNServerInteractionController.FMNResponseFields(0);
  v2[27] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v2[28] = v11;
  v12 = (*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[29] = swift_task_alloc(v12);
  v2[30] = swift_task_alloc(v12);
  v2[31] = swift_task_alloc(v12);
  v2[32] = swift_task_alloc(v12);
  v13 = type metadata accessor for NotifyMeRequest.Subscription(0);
  v2[33] = v13;
  v14 = *(_QWORD *)(v13 - 8);
  v2[34] = v14;
  v15 = (*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[35] = swift_task_alloc(v15);
  v2[36] = swift_task_alloc(v15);
  v16 = type metadata accessor for StableIdentifier(0);
  v2[37] = v16;
  v2[38] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v16 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_10001A9A8((uint64_t *)&unk_1010F47C0);
  v2[39] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v17 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  found = type metadata accessor for NotifyWhenFoundRecord(0);
  v2[40] = found;
  v19 = *(_QWORD *)(found - 8);
  v2[41] = v19;
  v20 = (*(_QWORD *)(v19 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[42] = swift_task_alloc(v20);
  v2[43] = swift_task_alloc(v20);
  return swift_task_switch(sub_10020B26C, 0, 0);
}

uint64_t sub_10020B26C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int EnumCaseMultiPayload;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(uint64_t, uint64_t, uint64_t, uint64_t);
  void (*v43)(uint64_t, uint64_t, uint64_t);
  uint64_t v44;
  uint64_t *v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v55;
  int *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;

  if (qword_1010E9AA0 != -1)
    swift_once(&qword_1010E9AA0, sub_100201450);
  v1 = v0[15];
  v2 = type metadata accessor for Logger(0);
  v0[44] = sub_10001A9E8(v2, (uint64_t)qword_1011B6C18);
  swift_bridgeObjectRetain_n(v1, 2);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = v0[40];
    v7 = v0[15];
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = swift_slowAlloc(32, -1);
    v67 = v9;
    *(_DWORD *)v8 = 136315138;
    swift_bridgeObjectRetain(v7);
    v11 = Array.description.getter(v10, v6);
    v13 = v12;
    swift_bridgeObjectRelease();
    v0[14] = sub_100016940(v11, v13, &v67);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 14, v0 + 15, v8 + 4, v8 + 12);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n(v7, 2);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Unsubscribe for beacons: %s", v8, 0xCu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(v0[15], 2);
  }

  v14 = v0[15];
  v15 = *(_QWORD *)(v14 + 16);
  v0[45] = v15;
  v16 = _swiftEmptyArrayStorage;
  if (v15)
  {
    v17 = v0[41];
    v65 = v0[40];
    v56 = (int *)v0[33];
    v57 = v0[34];
    v58 = v0[18];
    v18 = v14 + ((*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80));
    v55 = *(_QWORD *)(v17 + 72);
    swift_bridgeObjectRetain(v14);
    while (1)
    {
      v19 = v0[43];
      v20 = v0[39];
      v63 = v18;
      sub_10005972C(v18, v19, type metadata accessor for NotifyWhenFoundRecord);
      v62 = v19 + *(int *)(v65 + 24);
      sub_10080B950(v62, v20);
      v21 = (int *)type metadata accessor for OwnedBeaconRecord(0);
      v22 = (*(uint64_t (**)(uint64_t, uint64_t, int *))(*((_QWORD *)v21 - 1) + 48))(v20, 1, v21);
      v23 = v0[39];
      v59 = v15;
      v64 = (unint64_t)v16;
      if (v22 == 1)
        break;
      v25 = v0[37];
      v24 = v0[38];
      sub_10005972C(v23 + v21[6], v24, type metadata accessor for StableIdentifier);
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v24, v25);
      if (EnumCaseMultiPayload == 3)
      {
        sub_10001A9A8((uint64_t *)&unk_1010F46F0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        if (EnumCaseMultiPayload != 2)
        {
          v36 = v0[39];
          sub_1000126B0(v0[38], type metadata accessor for StableIdentifier);
          sub_1000126B0(v36, type metadata accessor for OwnedBeaconRecord);
          goto LABEL_17;
        }
        sub_10001A9A8(&qword_101106F40);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      v28 = v0[38];
      v27 = v0[39];
      v29 = v0[17];
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v58 + 8))(v28, v29);
      v30 = sub_1001EE37C(*(_QWORD *)(v27 + v21[16]), *(_QWORD *)(v27 + v21[17]));
      v32 = v31;
      sub_1000126B0(v27, type metadata accessor for OwnedBeaconRecord);
      if (v32 >> 60 == 15)
        goto LABEL_17;
      v0[7] = v30;
      v0[8] = v32;
      v33 = sub_100133250();
      v34 = RawRepresentable<>.hexString.getter(&type metadata for AccessoryProductData, v33);
      v60 = v35;
      v61 = v34;
      sub_10001EF3C(v30, v32);
LABEL_18:
      v37 = v0[43];
      v39 = v0[35];
      v38 = v0[36];
      v40 = v0[17];
      v41 = type metadata accessor for Date(0);
      v42 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 56);
      v42(v38, 1, 1, v41);
      v43 = *(void (**)(uint64_t, uint64_t, uint64_t))(v58 + 16);
      v43(v38 + v56[5], v37 + *(int *)(v65 + 20), v40);
      v44 = v38 + v56[7];
      v43(v44, v62, v40);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v58 + 56))(v44, 0, 1, v40);
      v42(v38 + v56[9], 1, 1, v41);
      *(_BYTE *)(v38 + v56[6]) = 0;
      *(_QWORD *)(v38 + v56[8]) = _swiftEmptyArrayStorage;
      v45 = (uint64_t *)(v38 + v56[10]);
      *v45 = v61;
      v45[1] = v60;
      *(_QWORD *)(v38 + v56[11]) = _swiftEmptyArrayStorage;
      *(_QWORD *)(v38 + v56[12]) = _swiftEmptyArrayStorage;
      sub_10005972C(v38, v39, type metadata accessor for NotifyMeRequest.Subscription);
      v16 = (_QWORD *)v64;
      if ((swift_isUniquelyReferenced_nonNull_native(v64) & 1) == 0)
        v16 = (_QWORD *)sub_1007C8F84(0, *(_QWORD *)(v64 + 16) + 1, 1, v64);
      v47 = v16[2];
      v46 = v16[3];
      if (v47 >= v46 >> 1)
        v16 = (_QWORD *)sub_1007C8F84(v46 > 1, v47 + 1, 1, (unint64_t)v16);
      v48 = v0[43];
      v49 = v0[35];
      v50 = v0[36];
      v16[2] = v47 + 1;
      sub_1000126EC(v49, (uint64_t)v16+ ((*(unsigned __int8 *)(v57 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v57 + 80))+ *(_QWORD *)(v57 + 72) * v47, type metadata accessor for NotifyMeRequest.Subscription);
      sub_1000126B0(v50, type metadata accessor for NotifyMeRequest.Subscription);
      sub_1000126B0(v48, type metadata accessor for NotifyWhenFoundRecord);
      v18 = v63 + v55;
      v15 = v59 - 1;
      if (v59 == 1)
      {
        swift_bridgeObjectRelease();
        goto LABEL_24;
      }
    }
    sub_100004048(v23, (uint64_t *)&unk_1010F47C0);
LABEL_17:
    v60 = 0;
    v61 = 0;
    goto LABEL_18;
  }
LABEL_24:
  v0[46] = v16;
  v51 = *(_QWORD *)(v0[16] + 24);
  v52 = unk_1010F4B24;
  v66 = (char *)&dword_1010F4B20 + dword_1010F4B20;
  swift_bridgeObjectRetain(v16);
  swift_retain();
  v53 = (_QWORD *)swift_task_alloc(v52);
  v0[47] = v53;
  *v53 = v0;
  v53[1] = sub_10020B8C0;
  return ((uint64_t (*)(_QWORD *, uint64_t))v66)(v16, v51);
}

uint64_t sub_10020B8C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  v4 = *(_QWORD **)v3;
  v5 = *(_QWORD *)(*(_QWORD *)v3 + 376);
  v4[48] = a1;
  v4[49] = a2;
  v4[50] = a3;
  swift_task_dealloc(v5);
  return swift_task_switch(sub_10020B920, 0, 0);
}

uint64_t sub_10020B920()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v17;
  NSObject *v18;
  uint64_t v19;
  uint8_t *v20;
  unint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v1 = *(_QWORD *)(v0 + 384);
  if (v1)
  {
    v2 = *(_QWORD *)(v0 + 392);
    v3 = *(_QWORD *)(v0 + 400);
    v4 = *(_QWORD **)(v0 + 208);
    v39 = *(_QWORD *)(v0 + 200);
    v5 = *(_QWORD *)(v0 + 184);
    v6 = *(_QWORD *)(v0 + 168);
    v33 = *(_QWORD *)(v0 + 192);
    v35 = *(_QWORD *)(v0 + 160);
    v7 = enum case for FMNAccountType.searchParty(_:);
    v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 176) + 104);
    v8(v5, enum case for FMNAccountType.searchParty(_:), v6);
    v9 = type metadata accessor for AccountURLComponents();
    swift_allocObject(v9, 56, 7);
    swift_bridgeObjectRetain(v1);
    sub_10001BBBC(v2, v3);
    *v4 = sub_100C511C4(v5);
    v8((uint64_t)v4 + *(int *)(v33 + 20), v7, v6);
    v10 = type metadata accessor for SearchPartyURLSessionFactory(0);
    swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
    v11 = type metadata accessor for FMNMockingPreferences(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v35, 1, 1, v11);
    v12 = FMNURLSessionFactory.init(mockSessionCreationBlock:preferences:)(0, 0, v35);
    v13 = type metadata accessor for ServerInteractionController(0);
    v14 = swift_allocObject(v13, *(unsigned int *)(v13 + 48), *(unsigned __int16 *)(v13 + 52));
    sub_10005972C((uint64_t)v4, v39, type metadata accessor for NotifyMeEndpoint);
    *(_QWORD *)(v0 + 408) = sub_10041D74C(v39, v12, v14);
    sub_1000126B0((uint64_t)v4, type metadata accessor for NotifyMeEndpoint);
    *(_QWORD *)(v0 + 40) = &type metadata for NotifyMeRequest;
    *(_QWORD *)(v0 + 48) = sub_100217208();
    *(_QWORD *)(v0 + 16) = v1;
    *(_QWORD *)(v0 + 24) = v2;
    *(_QWORD *)(v0 + 32) = v3;
    swift_bridgeObjectRetain(v1);
    sub_10001BBBC(v2, v3);
    v15 = (_QWORD *)swift_task_alloc(dword_1010F7D04);
    *(_QWORD *)(v0 + 416) = v15;
    *v15 = v0;
    v15[1] = sub_10020BC84;
    return sub_100338A60(*(_QWORD *)(v0 + 256), v0 + 16);
  }
  else
  {
    v17 = swift_bridgeObjectRelease();
    v18 = Logger.logObject.getter(v17);
    v19 = static os_log_type_t.error.getter(v18);
    if (os_log_type_enabled(v18, (os_log_type_t)v19))
    {
      v20 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v20 = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, (os_log_type_t)v19, "Could not create notify me request", v20, 2u);
      swift_slowDealloc(v20, -1, -1);
    }

    v21 = sub_100215AC8();
    v40 = swift_allocError(&type metadata for NotifyWhenFoundManager.NotifyWhenFoundError, v21, 0, 0);
    *v22 = 3;
    swift_willThrow(v40);
    v23 = *(_QWORD *)(v0 + 336);
    v25 = *(_QWORD *)(v0 + 304);
    v24 = *(_QWORD *)(v0 + 312);
    v27 = *(_QWORD *)(v0 + 280);
    v26 = *(_QWORD *)(v0 + 288);
    v29 = *(_QWORD *)(v0 + 248);
    v28 = *(_QWORD *)(v0 + 256);
    v30 = *(_QWORD *)(v0 + 232);
    v31 = *(_QWORD *)(v0 + 240);
    v32 = *(_QWORD *)(v0 + 208);
    v34 = *(_QWORD *)(v0 + 200);
    v36 = *(_QWORD *)(v0 + 184);
    v37 = *(_QWORD *)(v0 + 160);
    v38 = *(_QWORD *)(v0 + 152);
    swift_task_dealloc(*(_QWORD *)(v0 + 344));
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v31);
    swift_task_dealloc(v30);
    swift_task_dealloc(v32);
    swift_task_dealloc(v34);
    swift_task_dealloc(v36);
    swift_task_dealloc(v37);
    swift_task_dealloc(v38);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_10020BC84()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 416);
  *(_QWORD *)(*v1 + 424) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    swift_bridgeObjectRelease();
    swift_release();
    v4 = sub_10020C858;
  }
  else
  {
    swift_release();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v2 + 16));
    v4 = sub_10020BD10;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_10020BD10(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  void (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  _BOOL4 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  void (*v27)(uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  _BOOL4 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint8_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _BYTE *v51;
  unint64_t v52;
  _BYTE *v53;
  uint64_t v54;
  NSObject *v55;
  os_log_type_t v56;
  uint8_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84[2];

  v2 = FMNServerInteractionController.FMNResponseFields.statusCode.getter(a1);
  if (v2 == 200)
  {
    v3 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v1 + 224) + 16))(*(_QWORD *)(v1 + 248), *(_QWORD *)(v1 + 256), *(_QWORD *)(v1 + 216));
    v4 = Logger.logObject.getter(v3);
    v5 = static os_log_type_t.default.getter(v4);
    v6 = os_log_type_enabled(v4, v5);
    v7 = *(_QWORD *)(v1 + 248);
    v9 = *(_QWORD *)(v1 + 216);
    v8 = *(_QWORD *)(v1 + 224);
    if (v6)
    {
      v10 = (uint8_t *)swift_slowAlloc(12, -1);
      v80 = swift_slowAlloc(32, -1);
      v84[0] = v80;
      *(_DWORD *)v10 = 136315138;
      v11 = sub_100006204((unint64_t *)&qword_1010FBA30, (uint64_t (*)(uint64_t))&type metadata accessor for FMNServerInteractionController.FMNResponseFields, (uint64_t)&protocol conformance descriptor for FMNServerInteractionController.FMNResponseFields);
      v12 = dispatch thunk of CustomStringConvertible.description.getter(v9, v11);
      *(_QWORD *)(v1 + 96) = sub_100016940(v12, v13, v84);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 96, v1 + 104, v10 + 4, v10 + 12);
      swift_bridgeObjectRelease();
      v14 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
      v14(v7, v9);
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Unsubscribe success: %s", v10, 0xCu);
      swift_arrayDestroy(v80, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v80, -1, -1);
      swift_slowDealloc(v10, -1, -1);
    }
    else
    {
      v14 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
      v14(*(_QWORD *)(v1 + 248), *(_QWORD *)(v1 + 216));
    }

    *(_QWORD *)(v1 + 432) = v14;
    v29 = FMNServerInteractionController.FMNResponseFields.data.getter(v28);
    v31 = v30;
    *(_QWORD *)(v1 + 440) = v29;
    *(_QWORD *)(v1 + 448) = v30;
    v32 = (_QWORD *)swift_task_alloc(dword_1010F31AC);
    *(_QWORD *)(v1 + 456) = v32;
    *v32 = v1;
    v32[1] = sub_10020C4C0;
    return sub_10020D94C(v29, v31);
  }
  else
  {
    v15 = v2;
    v82 = (uint64_t *)(v1 + 104);
    v78 = (uint64_t *)(v1 + 80);
    swift_bridgeObjectRelease();
    if (v15 == 500 || v15 == 404)
    {
      v16 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v1 + 224) + 16))(*(_QWORD *)(v1 + 240), *(_QWORD *)(v1 + 256), *(_QWORD *)(v1 + 216));
      v17 = Logger.logObject.getter(v16);
      v18 = static os_log_type_t.error.getter(v17);
      v19 = os_log_type_enabled(v17, v18);
      v20 = *(_QWORD *)(v1 + 240);
      v22 = *(_QWORD *)(v1 + 216);
      v21 = *(_QWORD *)(v1 + 224);
      if (v19)
      {
        v23 = (uint8_t *)swift_slowAlloc(12, -1);
        v81 = swift_slowAlloc(32, -1);
        v84[0] = v81;
        *(_DWORD *)v23 = 136446210;
        v24 = sub_100006204((unint64_t *)&qword_1010FBA30, (uint64_t (*)(uint64_t))&type metadata accessor for FMNServerInteractionController.FMNResponseFields, (uint64_t)&protocol conformance descriptor for FMNServerInteractionController.FMNResponseFields);
        v25 = dispatch thunk of CustomStringConvertible.description.getter(v22, v24);
        *(_QWORD *)(v1 + 88) = sub_100016940(v25, v26, v84);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 88, v1 + 96, v23 + 4, v23 + 12);
        swift_bridgeObjectRelease();
        v27 = *(void (**)(uint64_t, uint64_t))(v21 + 8);
        v27(v20, v22);
        _os_log_impl((void *)&_mh_execute_header, v17, v18, "Unsubscribe failed: %{public}s", v23, 0xCu);
        swift_arrayDestroy(v81, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v81, -1, -1);
        swift_slowDealloc(v23, -1, -1);
      }
      else
      {
        v27 = *(void (**)(uint64_t, uint64_t))(v21 + 8);
        v27(*(_QWORD *)(v1 + 240), *(_QWORD *)(v1 + 216));
      }

      v46 = *(_QWORD *)(v1 + 256);
      v47 = *(_QWORD *)(v1 + 216);
      v48 = sub_100215AC8();
      v49 = swift_allocError(&type metadata for NotifyWhenFoundManager.NotifyWhenFoundError, v48, 0, 0);
      v50 = v49;
      *v51 = 0;
    }
    else
    {
      v34 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v1 + 224) + 16))(*(_QWORD *)(v1 + 232), *(_QWORD *)(v1 + 256), *(_QWORD *)(v1 + 216));
      v35 = Logger.logObject.getter(v34);
      v36 = static os_log_type_t.error.getter(v35);
      v37 = os_log_type_enabled(v35, v36);
      v39 = *(_QWORD *)(v1 + 224);
      v38 = *(_QWORD *)(v1 + 232);
      v40 = *(_QWORD *)(v1 + 216);
      if (v37)
      {
        v41 = (uint8_t *)swift_slowAlloc(12, -1);
        v42 = swift_slowAlloc(32, -1);
        v84[0] = v42;
        *(_DWORD *)v41 = 136446210;
        v43 = sub_100006204((unint64_t *)&qword_1010FBA30, (uint64_t (*)(uint64_t))&type metadata accessor for FMNServerInteractionController.FMNResponseFields, (uint64_t)&protocol conformance descriptor for FMNServerInteractionController.FMNResponseFields);
        v44 = dispatch thunk of CustomStringConvertible.description.getter(v40, v43);
        *v78 = sub_100016940(v44, v45, v84);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v78, v1 + 88, v41 + 4, v41 + 12);
        swift_bridgeObjectRelease();
        v27 = *(void (**)(uint64_t, uint64_t))(v39 + 8);
        v27(v38, v40);
        _os_log_impl((void *)&_mh_execute_header, v35, v36, "Unsubscribe failed: %{public}s", v41, 0xCu);
        swift_arrayDestroy(v42, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v42, -1, -1);
        swift_slowDealloc(v41, -1, -1);
      }
      else
      {
        v27 = *(void (**)(uint64_t, uint64_t))(v39 + 8);
        v27(*(_QWORD *)(v1 + 232), *(_QWORD *)(v1 + 216));
      }

      v46 = *(_QWORD *)(v1 + 256);
      v47 = *(_QWORD *)(v1 + 216);
      v52 = sub_100215AC8();
      v49 = swift_allocError(&type metadata for NotifyWhenFoundManager.NotifyWhenFoundError, v52, 0, 0);
      v50 = v49;
      *v53 = 2;
    }
    swift_willThrow(v49);
    v27(v46, v47);
    swift_errorRetain(v50);
    v54 = swift_errorRetain(v50);
    v55 = Logger.logObject.getter(v54);
    v56 = static os_log_type_t.error.getter(v55);
    if (os_log_type_enabled(v55, v56))
    {
      v57 = (uint8_t *)swift_slowAlloc(12, -1);
      v58 = swift_slowAlloc(32, -1);
      v84[0] = v58;
      *(_DWORD *)v57 = 136446210;
      *v82 = v50;
      swift_errorRetain(v50);
      v59 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
      v60 = String.init<A>(describing:)(v82, v59);
      *(_QWORD *)(v1 + 72) = sub_100016940(v60, v61, v84);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 72, v78, v57 + 4, v57 + 12);
      swift_bridgeObjectRelease();
      swift_errorRelease(v50);
      swift_errorRelease(v50);
      _os_log_impl((void *)&_mh_execute_header, v55, v56, "Server error unsubscribing: %{public}s", v57, 0xCu);
      swift_arrayDestroy(v58, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v58, -1, -1);
      swift_slowDealloc(v57, -1, -1);
    }
    else
    {
      swift_errorRelease(v50);
      swift_errorRelease(v50);
    }

    v62 = *(_QWORD *)(v1 + 392);
    v63 = *(_QWORD *)(v1 + 400);
    v64 = *(_QWORD *)(v1 + 384);
    swift_willThrow(v65);
    sub_100153D94(v64, v62, v63);
    sub_100153D94(v64, v62, v63);
    v66 = *(_QWORD *)(v1 + 336);
    v68 = *(_QWORD *)(v1 + 304);
    v67 = *(_QWORD *)(v1 + 312);
    v70 = *(_QWORD *)(v1 + 280);
    v69 = *(_QWORD *)(v1 + 288);
    v72 = *(_QWORD *)(v1 + 248);
    v71 = *(_QWORD *)(v1 + 256);
    v73 = *(_QWORD *)(v1 + 232);
    v74 = *(_QWORD *)(v1 + 240);
    v75 = *(_QWORD *)(v1 + 208);
    v76 = *(_QWORD *)(v1 + 200);
    v77 = *(_QWORD *)(v1 + 184);
    v79 = *(_QWORD *)(v1 + 160);
    v83 = *(_QWORD *)(v1 + 152);
    swift_task_dealloc(*(_QWORD *)(v1 + 344));
    swift_task_dealloc(v66);
    swift_task_dealloc(v67);
    swift_task_dealloc(v68);
    swift_task_dealloc(v69);
    swift_task_dealloc(v70);
    swift_task_dealloc(v71);
    swift_task_dealloc(v72);
    swift_task_dealloc(v74);
    swift_task_dealloc(v73);
    swift_task_dealloc(v75);
    swift_task_dealloc(v76);
    swift_task_dealloc(v77);
    swift_task_dealloc(v79);
    swift_task_dealloc(v83);
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_10020C4C0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t (*v6)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 456);
  *(_QWORD *)(*v1 + 464) = v0;
  swift_task_dealloc(v3);
  v4 = *(_QWORD *)(v2 + 440);
  v5 = *(_QWORD *)(v2 + 448);
  if (v0)
  {
    swift_bridgeObjectRelease();
    sub_10001BC14(v4, v5);
    v6 = sub_10020CAD8;
  }
  else
  {
    sub_10001BC14(*(_QWORD *)(v2 + 440), *(_QWORD *)(v2 + 448));
    v6 = sub_10020C550;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_10020C550()
{
  uint64_t v0;
  int64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;

  v1 = *(_QWORD *)(v0 + 360);
  if (v1)
  {
    v2 = *(_QWORD *)(v0 + 328);
    v40 = *(_QWORD *)(v0 + 320);
    v3 = *(_QWORD *)(v0 + 144);
    v4 = *(_QWORD *)(v0 + 120);
    v42 = _swiftEmptyArrayStorage;
    sub_10009A578(0, v1, 0);
    v5 = 0;
    v6 = v4 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
    v7 = *(_QWORD *)(v2 + 72);
    v8 = _swiftEmptyArrayStorage;
    do
    {
      v9 = *(_QWORD *)(v0 + 336);
      v10 = *(_QWORD *)(v0 + 152);
      v11 = *(_QWORD *)(v0 + 136);
      sub_10005972C(v6, v9, type metadata accessor for NotifyWhenFoundRecord);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v10, v9 + *(int *)(v40 + 24), v11);
      sub_1000126B0(v9, type metadata accessor for NotifyWhenFoundRecord);
      if ((swift_isUniquelyReferenced_nonNull_native(v8) & 1) == 0)
      {
        sub_10009A578(0, v8[2] + 1, 1);
        v8 = v42;
      }
      v13 = v8[2];
      v12 = v8[3];
      if (v13 >= v12 >> 1)
      {
        sub_10009A578(v12 > 1, v13 + 1, 1);
        v8 = v42;
      }
      v14 = *(_QWORD *)(v0 + 360);
      v15 = *(_QWORD *)(v0 + 152);
      v16 = *(_QWORD *)(v0 + 136);
      ++v5;
      v8[2] = v13 + 1;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v3 + 32))((unint64_t)v8+ ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))+ *(_QWORD *)(v3 + 72) * v13, v15, v16);
      v42 = v8;
      v6 += v7;
    }
    while (v5 != v14);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    v8 = _swiftEmptyArrayStorage;
  }
  v18 = *(_QWORD *)(v0 + 392);
  v17 = *(_QWORD *)(v0 + 400);
  v19 = *(_QWORD *)(v0 + 384);
  v26 = *(_QWORD *)(v0 + 344);
  v27 = *(void (**)(uint64_t, uint64_t))(v0 + 432);
  v28 = *(_QWORD *)(v0 + 336);
  v29 = *(_QWORD *)(v0 + 312);
  v30 = *(_QWORD *)(v0 + 304);
  v31 = *(_QWORD *)(v0 + 288);
  v20 = *(_QWORD *)(v0 + 256);
  v32 = *(_QWORD *)(v0 + 280);
  v33 = *(_QWORD *)(v0 + 248);
  v34 = *(_QWORD *)(v0 + 240);
  v35 = *(_QWORD *)(v0 + 232);
  v25 = *(_QWORD *)(v0 + 216);
  v36 = *(_QWORD *)(v0 + 208);
  v37 = *(_QWORD *)(v0 + 200);
  v38 = *(_QWORD *)(v0 + 184);
  v39 = *(_QWORD *)(v0 + 160);
  v41 = *(_QWORD *)(v0 + 152);
  v21 = *(_QWORD *)(v0 + 128);
  v22 = *(_QWORD *)(v21 + 64);
  v23 = swift_task_alloc(32);
  *(_QWORD *)(v23 + 16) = v8;
  *(_QWORD *)(v23 + 24) = v21;
  OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_100217588, v23, v22, (char *)&type metadata for () + 8, (char *)&type metadata for () + 8);
  swift_bridgeObjectRelease();
  sub_100153D94(v19, v18, v17);
  sub_100153D94(v19, v18, v17);
  swift_task_dealloc(v23);
  v27(v20, v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v20);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  swift_task_dealloc(v41);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10020C858()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
  v1 = *(_QWORD *)(v0 + 424);
  swift_errorRetain(v1);
  v2 = swift_errorRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = swift_slowAlloc(32, -1);
    *(_DWORD *)v5 = 136446210;
    v29 = v6;
    *(_QWORD *)(v0 + 104) = v1;
    swift_errorRetain(v1);
    v7 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
    v8 = String.init<A>(describing:)(v0 + 104, v7);
    *(_QWORD *)(v0 + 72) = sub_100016940(v8, v9, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 72, v0 + 80, v5 + 4, v5 + 12);
    swift_bridgeObjectRelease();
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Server error unsubscribing: %{public}s", v5, 0xCu);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);
  }
  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
  }

  v11 = *(_QWORD *)(v0 + 392);
  v10 = *(_QWORD *)(v0 + 400);
  v12 = *(_QWORD *)(v0 + 384);
  swift_willThrow(v13);
  sub_100153D94(v12, v11, v10);
  sub_100153D94(v12, v11, v10);
  v14 = *(_QWORD *)(v0 + 336);
  v16 = *(_QWORD *)(v0 + 304);
  v15 = *(_QWORD *)(v0 + 312);
  v18 = *(_QWORD *)(v0 + 280);
  v17 = *(_QWORD *)(v0 + 288);
  v20 = *(_QWORD *)(v0 + 248);
  v19 = *(_QWORD *)(v0 + 256);
  v21 = *(_QWORD *)(v0 + 232);
  v22 = *(_QWORD *)(v0 + 240);
  v24 = *(_QWORD *)(v0 + 208);
  v25 = *(_QWORD *)(v0 + 200);
  v26 = *(_QWORD *)(v0 + 184);
  v27 = *(_QWORD *)(v0 + 160);
  v28 = *(_QWORD *)(v0 + 152);
  swift_task_dealloc(*(_QWORD *)(v0 + 344));
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v22);
  swift_task_dealloc(v21);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10020CAD8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  (*(void (**)(_QWORD, _QWORD))(v0 + 432))(*(_QWORD *)(v0 + 256), *(_QWORD *)(v0 + 216));
  v1 = *(_QWORD *)(v0 + 464);
  swift_errorRetain(v1);
  v2 = swift_errorRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = swift_slowAlloc(32, -1);
    *(_DWORD *)v5 = 136446210;
    v29 = v6;
    *(_QWORD *)(v0 + 104) = v1;
    swift_errorRetain(v1);
    v7 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
    v8 = String.init<A>(describing:)(v0 + 104, v7);
    *(_QWORD *)(v0 + 72) = sub_100016940(v8, v9, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 72, v0 + 80, v5 + 4, v5 + 12);
    swift_bridgeObjectRelease();
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Server error unsubscribing: %{public}s", v5, 0xCu);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);
  }
  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
  }

  v11 = *(_QWORD *)(v0 + 392);
  v10 = *(_QWORD *)(v0 + 400);
  v12 = *(_QWORD *)(v0 + 384);
  swift_willThrow(v13);
  sub_100153D94(v12, v11, v10);
  sub_100153D94(v12, v11, v10);
  v14 = *(_QWORD *)(v0 + 336);
  v16 = *(_QWORD *)(v0 + 304);
  v15 = *(_QWORD *)(v0 + 312);
  v18 = *(_QWORD *)(v0 + 280);
  v17 = *(_QWORD *)(v0 + 288);
  v20 = *(_QWORD *)(v0 + 248);
  v19 = *(_QWORD *)(v0 + 256);
  v21 = *(_QWORD *)(v0 + 232);
  v22 = *(_QWORD *)(v0 + 240);
  v24 = *(_QWORD *)(v0 + 208);
  v25 = *(_QWORD *)(v0 + 200);
  v26 = *(_QWORD *)(v0 + 184);
  v27 = *(_QWORD *)(v0 + 160);
  v28 = *(_QWORD *)(v0 + 152);
  swift_task_dealloc(*(_QWORD *)(v0 + 344));
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v22);
  swift_task_dealloc(v21);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10020CD60(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(_QWORD, _QWORD, _QWORD);
  __n128 v21;
  void (*v22)(char *, uint64_t);
  uint64_t v23;
  __n128 v24;
  void (*v25)(char *, uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(char *, uint64_t, uint64_t, uint64_t, __n128);
  __n128 v39;
  _QWORD v41[3];
  char *v42;
  __n128 v43;
  char *v44;
  void (*v45)(char *, uint64_t, uint64_t, uint64_t, __n128);
  void (*v46)(_QWORD, _QWORD, _QWORD);
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52[3];
  uint64_t v53;

  v3 = v2;
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)v41 - v11;
  v13 = sub_10001A9A8(&qword_1010ED860);
  v14 = __chkstk_darwin(v13);
  v51 = (uint64_t)v41 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v17 = (char *)v41 - v16;
  v18 = *(_QWORD *)(a1 + 16);
  v41[1] = a1;
  v41[2] = v3;
  if (v18)
  {
    v19 = a1 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
    v47 = *(_QWORD *)(v7 + 72);
    v48 = a2 + 56;
    v20 = *(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16);
    v21 = swift_bridgeObjectRetain(a1);
    v21.n128_u64[0] = 141558275;
    v43 = v21;
    v42 = (char *)&type metadata for Any + 8;
    v49 = v17;
    v50 = v7;
    v44 = v12;
    v46 = v20;
    while (1)
    {
      v53 = v18;
      v20(v17, v19, v6);
      v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v7 + 56);
      ((void (*)(char *, _QWORD, uint64_t, uint64_t))v25)(v17, 0, 1, v6);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v17, 1, v6) == 1)
        break;
      v45 = v25;
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v12, v17, v6);
      if (qword_1010E9AA0 != -1)
        swift_once(&qword_1010E9AA0, sub_100201450);
      v26 = type metadata accessor for Logger(0);
      sub_10001A9E8(v26, (uint64_t)qword_1011B6C18);
      v27 = ((uint64_t (*)(char *, char *, uint64_t))v20)(v10, v12, v6);
      v28 = Logger.logObject.getter(v27);
      v29 = static os_log_type_t.default.getter(v28);
      if (os_log_type_enabled(v28, v29))
      {
        v30 = v10;
        v31 = swift_slowAlloc(22, -1);
        v32 = swift_slowAlloc(32, -1);
        v52[0] = v32;
        *(_DWORD *)v31 = v43.n128_u32[0];
        *(_QWORD *)(v31 + 4) = 1752392040;
        *(_WORD *)(v31 + 12) = 2081;
        v33 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v34 = dispatch thunk of CustomStringConvertible.description.getter(v6, v33);
        *(_QWORD *)(v31 + 14) = sub_100016940(v34, v35, v52);
        swift_bridgeObjectRelease();
        v22 = *(void (**)(char *, uint64_t))(v50 + 8);
        v22(v30, v6);
        _os_log_impl((void *)&_mh_execute_header, v28, v29, "Removing beacon %{private,mask.hash}s from pending force publish.", (uint8_t *)v31, 0x16u);
        swift_arrayDestroy(v32, 1, v42);
        v36 = v32;
        v7 = v50;
        swift_slowDealloc(v36, -1, -1);
        v37 = v31;
        v10 = v30;
        v12 = v44;
        swift_slowDealloc(v37, -1, -1);
      }
      else
      {
        v22 = *(void (**)(char *, uint64_t))(v7 + 8);
        v22(v10, v6);
      }

      swift_beginAccess(v48, v52, 33, 0);
      v23 = v51;
      sub_100C81CDC((uint64_t)v12, v51);
      sub_100004048(v23, &qword_1010ED860);
      swift_endAccess(v52);
      v22(v12, v6);
      v20 = v46;
      v19 += v47;
      v18 = v53 - 1;
      v17 = v49;
      if (v53 == 1)
      {
        v45(v49, 1, 1, v6, v24);
        return swift_bridgeObjectRelease();
      }
    }
  }
  else
  {
    v38 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v7 + 56);
    v39 = swift_bridgeObjectRetain(a1);
    v38(v17, 1, 1, v6, v39);
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_10020D134(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t found;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  char v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  void (*v35)(char *, uint64_t);
  void *v36;
  char *v37;
  uint8_t *v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43[2];

  v2 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  __chkstk_darwin(v2);
  v4 = (char *)&v39 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Date(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v40 = (char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v39 - v10;
  __chkstk_darwin(v9);
  v41 = (char *)&v39 - v12;
  v13 = sub_10001A9A8(&qword_1010F33A8);
  __chkstk_darwin(v13);
  v15 = (char *)&v39 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  found = type metadata accessor for NotifyWhenFoundRecord(0);
  v17 = *(_QWORD *)(found - 8);
  __chkstk_darwin(found);
  v19 = (char *)&v39 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_10088AE54(a1);
  if (v20[2])
  {
    sub_10005972C((uint64_t)v20 + ((*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80)), (uint64_t)v15, type metadata accessor for NotifyWhenFoundRecord);
    v21 = 0;
  }
  else
  {
    v21 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v17 + 56))(v15, v21, 1, found);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, found) == 1)
  {
    v22 = &qword_1010F33A8;
    v23 = (uint64_t)v15;
LABEL_8:
    sub_100004048(v23, v22);
    v24 = 0;
    return v24 & 1;
  }
  sub_1000126EC((uint64_t)v15, (uint64_t)v19, type metadata accessor for NotifyWhenFoundRecord);
  type metadata accessor for NotifyWhenFoundManager();
  sub_10020D5A4(a1, (unint64_t)v4);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    sub_1000126B0((uint64_t)v19, type metadata accessor for NotifyWhenFoundRecord);
    v22 = (uint64_t *)&unk_1010EA690;
    v23 = (uint64_t)v4;
    goto LABEL_8;
  }
  v25 = v41;
  (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v41, v4, v5);
  if (qword_1010E9AA0 != -1)
    swift_once(&qword_1010E9AA0, sub_100201450);
  v26 = type metadata accessor for Logger(0);
  sub_10001A9E8(v26, (uint64_t)qword_1011B6C18);
  v27 = (*(uint64_t (**)(char *, char *, uint64_t))(v6 + 16))(v11, v25, v5);
  v28 = Logger.logObject.getter(v27);
  v29 = static os_log_type_t.default.getter(v28);
  if (os_log_type_enabled(v28, v29))
  {
    v30 = (uint8_t *)swift_slowAlloc(12, -1);
    v31 = swift_slowAlloc(32, -1);
    v43[0] = v31;
    *(_DWORD *)v30 = 136315138;
    v39 = v30 + 4;
    v32 = sub_100006204(&qword_1010EE0F0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    v33 = dispatch thunk of CustomStringConvertible.description.getter(v5, v32);
    v42 = sub_100016940(v33, v34, v43);
    v25 = v41;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, v43, v39, v30 + 12);
    swift_bridgeObjectRelease();
    v35 = *(void (**)(char *, uint64_t))(v6 + 8);
    v35(v11, v5);
    _os_log_impl((void *)&_mh_execute_header, v28, v29, "postedLocalNotification lastPosted: %s.", v30, 0xCu);
    swift_arrayDestroy(v31, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v31, -1, -1);
    swift_slowDealloc(v30, -1, -1);
  }
  else
  {
    v35 = *(void (**)(char *, uint64_t))(v6 + 8);
    v35(v11, v5);
  }

  v36 = objc_autoreleasePoolPush();
  v37 = v40;
  sub_10084EE10((uint64_t)v19);
  objc_autoreleasePoolPop(v36);
  v24 = static Date.> infix(_:_:)(v25, v37);
  v35(v37, v5);
  v35(v25, v5);
  sub_1000126B0((uint64_t)v19, type metadata accessor for NotifyWhenFoundRecord);
  return v24 & 1;
}

uint64_t sub_10020D5A4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  void *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;

  v4 = type metadata accessor for BeaconObservation(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v32 - v9;
  v11 = sub_10001A9A8(&qword_1010EF660);
  __chkstk_darwin(v11);
  v13 = (unint64_t)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1010E9CF0 != -1)
    goto LABEL_22;
  while (1)
  {
    v14 = qword_1011B7160;
    v34 = objc_autoreleasePoolPush();
    v15 = sub_10001A9A8(&qword_1010F7770);
    OS_dispatch_queue.sync<A>(execute:)(sub_10007CAD4, v14, v15);
    v16 = v38;
    if (!v38[2] || (v17 = sub_100003FB0(a1), (v18 & 1) == 0))
    {
      swift_bridgeObjectRelease();
      v23 = _swiftEmptyArrayStorage;
      goto LABEL_18;
    }
    v19 = *(_QWORD *)(v16[7] + 8 * v17);
    swift_bridgeObjectRetain(v19);
    swift_bridgeObjectRelease();
    v20 = sub_100508D98(v19);
    swift_bridgeObjectRelease();
    sub_10088FD00((uint64_t)v20);
    v22 = v21;
    swift_release();
    v23 = _swiftEmptyArrayStorage;
    v38 = _swiftEmptyArrayStorage;
    a1 = *(_QWORD *)(v22 + 16);
    if (!a1)
      break;
    v35 = v8;
    v8 = (char *)v4;
    v32 = v13;
    v33 = a2;
    v13 = 0;
    v36 = a1;
    v37 = v5;
    while (v13 < *(_QWORD *)(v22 + 16))
    {
      a2 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
      v4 = *(_QWORD *)(v5 + 72);
      sub_10005972C(v22 + a2 + v4 * v13, (uint64_t)v10, type metadata accessor for BeaconObservation);
      if (v10[*((int *)v8 + 6)] == 28)
      {
        v24 = (uint64_t)v35;
        sub_1000126EC((uint64_t)v10, (uint64_t)v35, type metadata accessor for BeaconObservation);
        if ((swift_isUniquelyReferenced_nonNull_native(v23) & 1) == 0)
          sub_10009AAC8(0, v23[2] + 1, 1);
        v23 = v38;
        v26 = v38[2];
        v25 = v38[3];
        if (v26 >= v25 >> 1)
        {
          sub_10009AAC8(v25 > 1, v26 + 1, 1);
          v23 = v38;
        }
        v23[2] = v26 + 1;
        sub_1000126EC(v24, (uint64_t)v23 + a2 + v26 * v4, type metadata accessor for BeaconObservation);
        a1 = v36;
        v5 = v37;
      }
      else
      {
        sub_1000126B0((uint64_t)v10, type metadata accessor for BeaconObservation);
      }
      if (a1 == ++v13)
      {
        v23 = v38;
        v13 = v32;
        a2 = v33;
        v4 = (uint64_t)v8;
        goto LABEL_17;
      }
    }
    __break(1u);
LABEL_22:
    swift_once(&qword_1010E9CF0, sub_10058CADC);
  }
LABEL_17:
  swift_release();
LABEL_18:
  objc_autoreleasePoolPop(v34);
  sub_100A797E8((uint64_t)v23, v13);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v5 + 48))(v13, 1, v4) == 1)
  {
    sub_100004048(v13, &qword_1010EF660);
    v27 = type metadata accessor for Date(0);
    return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(a2, 1, 1, v27);
  }
  else
  {
    v29 = v13 + *(int *)(v4 + 20);
    v30 = type metadata accessor for Date(0);
    v31 = *(_QWORD *)(v30 - 8);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v31 + 16))(a2, v29, v30);
    sub_1000126B0(v13, type metadata accessor for BeaconObservation);
    return (*(uint64_t (**)(unint64_t, _QWORD, uint64_t, uint64_t))(v31 + 56))(a2, 0, 1, v30);
  }
}

uint64_t sub_10020D94C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t found;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;

  v3[7] = a2;
  v3[8] = v2;
  v3[6] = a1;
  v4 = sub_10001A9A8(&qword_1010F33A8);
  v3[9] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  found = type metadata accessor for NotifyWhenFoundRecord(0);
  v3[10] = found;
  v6 = *(_QWORD *)(found - 8);
  v3[11] = v6;
  v7 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[12] = swift_task_alloc(v7);
  v3[13] = swift_task_alloc(v7);
  v3[14] = swift_task_alloc(v7);
  v8 = type metadata accessor for UUID(0);
  v3[15] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v3[16] = v9;
  v3[17] = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for NotifyMeResponseResult(0);
  v3[18] = v10;
  v11 = *(_QWORD *)(v10 - 8);
  v3[19] = v11;
  v12 = (*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[20] = swift_task_alloc(v12);
  v3[21] = swift_task_alloc(v12);
  v3[22] = swift_task_alloc(v12);
  return swift_task_switch(sub_10020DA5C, 0, 0);
}

uint64_t sub_10020DA5C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  _BOOL4 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  NSObject *v54;
  os_log_type_t v55;
  _BOOL4 v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint8_t *v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71[2];

  v1 = *(_QWORD *)(v0 + 48);
  v2 = *(_QWORD *)(v0 + 56);
  v3 = type metadata accessor for JSONDecoder(0);
  v4 = swift_allocObject(v3, *(unsigned int *)(v3 + 48), *(unsigned __int16 *)(v3 + 52));
  *(_QWORD *)(v0 + 184) = JSONDecoder.init()(v4);
  v5 = sub_100217038();
  dispatch thunk of JSONDecoder.decode<A>(_:from:)(&type metadata for NotifyMeResponse, v1, v2, &type metadata for NotifyMeResponse, v5);
  v6 = *(_QWORD *)(v0 + 16);
  *(_QWORD *)(v0 + 192) = v6;
  if (qword_1010E9AA0 != -1)
    swift_once(&qword_1010E9AA0, sub_100201450);
  v7 = type metadata accessor for Logger(0);
  *(_QWORD *)(v0 + 200) = sub_10001A9E8(v7, (uint64_t)qword_1011B6C18);
  swift_bridgeObjectRetain_n(v6, 2);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.default.getter(v9);
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc(12, -1);
    v12 = swift_slowAlloc(32, -1);
    v71[0] = v12;
    *(_DWORD *)v11 = 136315138;
    *(_QWORD *)(v0 + 32) = v6;
    swift_bridgeObjectRetain(v6);
    v13 = String.init<A>(describing:)(v0 + 32, &type metadata for NotifyMeResponse);
    *(_QWORD *)(v0 + 40) = sub_100016940(v13, v14, v71);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v11 + 4, v11 + 12);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n(v6, 2);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "NotifyMeResponse: %s", v11, 0xCu);
    swift_arrayDestroy(v12, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v12, -1, -1);
    swift_slowDealloc(v11, -1, -1);

  }
  else
  {
    swift_bridgeObjectRelease_n(v6, 2);

  }
  v15 = *(_QWORD *)(v6 + 16);
  *(_QWORD *)(v0 + 208) = v15;
  if (!v15)
  {
LABEL_18:
    swift_bridgeObjectRelease();
    swift_release();
    v43 = *(_QWORD *)(v0 + 168);
    v44 = *(_QWORD *)(v0 + 160);
    v45 = *(_QWORD *)(v0 + 136);
    v47 = *(_QWORD *)(v0 + 104);
    v46 = *(_QWORD *)(v0 + 112);
    v48 = *(_QWORD *)(v0 + 96);
    v49 = *(_QWORD *)(v0 + 72);
    swift_task_dealloc(*(_QWORD *)(v0 + 176));
    swift_task_dealloc(v43);
    swift_task_dealloc(v44);
    swift_task_dealloc(v45);
    swift_task_dealloc(v46);
    swift_task_dealloc(v47);
    swift_task_dealloc(v48);
    swift_task_dealloc(v49);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v16 = 0;
  v17 = *(_QWORD *)(v0 + 152);
  *(_DWORD *)(v0 + 248) = *(_DWORD *)(v17 + 80);
  *(_QWORD *)(v0 + 216) = *(_QWORD *)(v17 + 72);
  while (1)
  {
    *(_QWORD *)(v0 + 224) = v16;
    v19 = *(_QWORD *)(v0 + 176);
    v20 = *(_QWORD *)(v0 + 136);
    v21 = *(_QWORD *)(v0 + 144);
    v22 = *(_QWORD *)(v0 + 120);
    v23 = *(_QWORD *)(v0 + 128);
    sub_10005972C(*(_QWORD *)(v0 + 192)+ ((*(unsigned __int8 *)(v0 + 248) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 248))+ *(_QWORD *)(v0 + 216) * v16, v19, type metadata accessor for NotifyMeResponseResult);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v23 + 16))(v20, v19, v22);
    if (*(_BYTE *)(v19 + *(int *)(v21 + 20)))
      break;
    v18 = *(_QWORD *)(v0 + 176);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 128) + 8))(*(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 120));
LABEL_9:
    sub_1000126B0(v18, type metadata accessor for NotifyMeResponseResult);
LABEL_10:
    v16 = *(_QWORD *)(v0 + 224) + 1;
    if (v16 == *(_QWORD *)(v0 + 208))
      goto LABEL_18;
  }
  if (*(_BYTE *)(v19 + *(int *)(v21 + 20)) != 1)
  {
    v29 = sub_10005972C(*(_QWORD *)(v0 + 176), *(_QWORD *)(v0 + 168), type metadata accessor for NotifyMeResponseResult);
    v30 = Logger.logObject.getter(v29);
    v31 = static os_log_type_t.error.getter(v30);
    v32 = os_log_type_enabled(v30, v31);
    v33 = *(_QWORD *)(v0 + 168);
    v18 = *(_QWORD *)(v0 + 176);
    if (v32)
    {
      v34 = *(_QWORD *)(v0 + 160);
      v35 = *(_QWORD *)(v0 + 144);
      v68 = *(_QWORD *)(v0 + 128);
      v69 = *(_QWORD *)(v0 + 120);
      v70 = *(_QWORD *)(v0 + 136);
      v36 = swift_slowAlloc(12, -1);
      v37 = swift_slowAlloc(32, -1);
      v71[0] = v37;
      *(_DWORD *)v36 = 136446210;
      sub_10005972C(v33, v34, type metadata accessor for NotifyMeResponseResult);
      v38 = String.init<A>(describing:)(v34, v35);
      *(_QWORD *)(v36 + 4) = sub_100016940(v38, v39, v71);
      swift_bridgeObjectRelease();
      sub_1000126B0(v33, type metadata accessor for NotifyMeResponseResult);
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "Failed to process notify request: %{public}s", (uint8_t *)v36, 0xCu);
      swift_arrayDestroy(v37, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v37, -1, -1);
      swift_slowDealloc(v36, -1, -1);

      (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v70, v69);
    }
    else
    {
      v41 = *(_QWORD *)(v0 + 128);
      v40 = *(_QWORD *)(v0 + 136);
      v42 = *(_QWORD *)(v0 + 120);

      sub_1000126B0(v33, type metadata accessor for NotifyMeResponseResult);
      (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v40, v42);
    }
    goto LABEL_9;
  }
  v24 = *(_QWORD *)(v0 + 80);
  v25 = *(_QWORD *)(v0 + 88);
  v26 = *(_QWORD *)(v0 + 72);
  sub_10088AE9C(*(_QWORD *)(v0 + 136), v26);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v25 + 48))(v26, 1, v24) == 1)
  {
    v27 = *(_QWORD *)(v0 + 176);
    v28 = *(_QWORD *)(v0 + 72);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 128) + 8))(*(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 120));
    sub_1000126B0(v27, type metadata accessor for NotifyMeResponseResult);
    sub_100004048(v28, &qword_1010F33A8);
    goto LABEL_10;
  }
  v52 = *(_QWORD *)(v0 + 104);
  v51 = *(_QWORD *)(v0 + 112);
  sub_1000126EC(*(_QWORD *)(v0 + 72), v51, type metadata accessor for NotifyWhenFoundRecord);
  v53 = sub_10005972C(v51, v52, type metadata accessor for NotifyWhenFoundRecord);
  v54 = Logger.logObject.getter(v53);
  v55 = static os_log_type_t.default.getter(v54);
  v56 = os_log_type_enabled(v54, v55);
  v57 = *(_QWORD *)(v0 + 104);
  if (v56)
  {
    v58 = *(_QWORD *)(v0 + 96);
    v59 = *(_QWORD *)(v0 + 80);
    v60 = (uint8_t *)swift_slowAlloc(12, -1);
    v61 = swift_slowAlloc(32, -1);
    v71[0] = v61;
    *(_DWORD *)v60 = 136315138;
    sub_10005972C(v57, v58, type metadata accessor for NotifyWhenFoundRecord);
    v62 = String.init<A>(describing:)(v58, v59);
    *(_QWORD *)(v0 + 24) = sub_100016940(v62, v63, v71);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v60 + 4, v60 + 12);
    swift_bridgeObjectRelease();
    sub_1000126B0(v57, type metadata accessor for NotifyWhenFoundRecord);
    _os_log_impl((void *)&_mh_execute_header, v54, v55, "Delete notification record (204 response): %s", v60, 0xCu);
    swift_arrayDestroy(v61, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v61, -1, -1);
    swift_slowDealloc(v60, -1, -1);
  }
  else
  {
    sub_1000126B0(*(_QWORD *)(v0 + 104), type metadata accessor for NotifyWhenFoundRecord);
  }

  v64 = *(_QWORD *)(v0 + 112);
  v65 = *(_QWORD *)(v0 + 64);
  v66 = swift_task_alloc(32);
  *(_QWORD *)(v0 + 232) = v66;
  *(_QWORD *)(v66 + 16) = v65;
  *(_QWORD *)(v66 + 24) = v64;
  v67 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v0 + 240) = v67;
  *v67 = v0;
  v67[1] = sub_10020E25C;
  return withCheckedContinuation<A>(isolation:function:_:)(v67, 0, 0, 0xD000000000000012, 0x8000000100ECBCA0, sub_10021707C, v66, (char *)&type metadata for () + 8);
}

uint64_t sub_10020E25C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 232);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 240));
  swift_task_dealloc(v1);
  return swift_task_switch(sub_10020E2B8, 0, 0);
}

uint64_t sub_10020E2B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  _BOOL4 v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  NSObject *v44;
  os_log_type_t v45;
  _BOOL4 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint8_t *v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;

  v1 = *(_QWORD *)(v0 + 176);
  v2 = *(_QWORD *)(v0 + 112);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 128) + 8))(*(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 120));
  sub_1000126B0(v1, type metadata accessor for NotifyMeResponseResult);
  sub_1000126B0(v2, type metadata accessor for NotifyWhenFoundRecord);
  v3 = *(_QWORD *)(v0 + 224) + 1;
  if (v3 == *(_QWORD *)(v0 + 208))
  {
LABEL_2:
    swift_bridgeObjectRelease();
    swift_release();
    v4 = *(_QWORD *)(v0 + 168);
    v5 = *(_QWORD *)(v0 + 160);
    v6 = *(_QWORD *)(v0 + 136);
    v8 = *(_QWORD *)(v0 + 104);
    v7 = *(_QWORD *)(v0 + 112);
    v9 = *(_QWORD *)(v0 + 96);
    v10 = *(_QWORD *)(v0 + 72);
    swift_task_dealloc(*(_QWORD *)(v0 + 176));
    swift_task_dealloc(v4);
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v12 = &qword_1010F33A8;
  while (1)
  {
    *(_QWORD *)(v0 + 224) = v3;
    v15 = *(_QWORD *)(v0 + 176);
    v16 = *(_QWORD *)(v0 + 136);
    v17 = *(_QWORD *)(v0 + 144);
    v18 = *(_QWORD *)(v0 + 120);
    v19 = *(_QWORD *)(v0 + 128);
    sub_10005972C(*(_QWORD *)(v0 + 192)+ ((*(unsigned __int8 *)(v0 + 248) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 248))+ *(_QWORD *)(v0 + 216) * v3, v15, type metadata accessor for NotifyMeResponseResult);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 16))(v16, v15, v18);
    if (!*(_BYTE *)(v15 + *(int *)(v17 + 20)))
    {
      v13 = *(_QWORD *)(v0 + 176);
      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 128) + 8))(*(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 120));
      goto LABEL_5;
    }
    if (*(_BYTE *)(v15 + *(int *)(v17 + 20)) == 1)
      break;
    v26 = sub_10005972C(*(_QWORD *)(v0 + 176), *(_QWORD *)(v0 + 168), type metadata accessor for NotifyMeResponseResult);
    v27 = Logger.logObject.getter(v26);
    v28 = static os_log_type_t.error.getter(v27);
    v29 = os_log_type_enabled(v27, v28);
    v30 = *(_QWORD *)(v0 + 168);
    v13 = *(_QWORD *)(v0 + 176);
    if (v29)
    {
      v61 = *(_QWORD *)(v0 + 176);
      v31 = v12;
      v32 = *(_QWORD *)(v0 + 160);
      v33 = *(_QWORD *)(v0 + 144);
      v58 = *(_QWORD *)(v0 + 128);
      v59 = *(_QWORD *)(v0 + 120);
      v60 = *(_QWORD *)(v0 + 136);
      v34 = swift_slowAlloc(12, -1);
      v35 = swift_slowAlloc(32, -1);
      v62 = v35;
      *(_DWORD *)v34 = 136446210;
      sub_10005972C(v30, v32, type metadata accessor for NotifyMeResponseResult);
      v36 = String.init<A>(describing:)(v32, v33);
      *(_QWORD *)(v34 + 4) = sub_100016940(v36, v37, &v62);
      v12 = v31;
      swift_bridgeObjectRelease();
      sub_1000126B0(v30, type metadata accessor for NotifyMeResponseResult);
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "Failed to process notify request: %{public}s", (uint8_t *)v34, 0xCu);
      swift_arrayDestroy(v35, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v35, -1, -1);
      swift_slowDealloc(v34, -1, -1);

      (*(void (**)(uint64_t, uint64_t))(v58 + 8))(v60, v59);
      v14 = v61;
      goto LABEL_6;
    }
    v39 = *(_QWORD *)(v0 + 128);
    v38 = *(_QWORD *)(v0 + 136);
    v40 = *(_QWORD *)(v0 + 120);

    sub_1000126B0(v30, type metadata accessor for NotifyMeResponseResult);
    (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v38, v40);
LABEL_5:
    v14 = v13;
LABEL_6:
    sub_1000126B0(v14, type metadata accessor for NotifyMeResponseResult);
LABEL_7:
    v3 = *(_QWORD *)(v0 + 224) + 1;
    if (v3 == *(_QWORD *)(v0 + 208))
      goto LABEL_2;
  }
  v20 = *(_QWORD *)(v0 + 80);
  v21 = *(_QWORD *)(v0 + 88);
  v22 = *(_QWORD *)(v0 + 72);
  sub_10088AE9C(*(_QWORD *)(v0 + 136), v22);
  v23 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v21 + 48))(v22, 1, v20);
  v24 = *(_QWORD *)(v0 + 72);
  if (v23 == 1)
  {
    v25 = *(_QWORD *)(v0 + 176);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 128) + 8))(*(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 120));
    sub_1000126B0(v25, type metadata accessor for NotifyMeResponseResult);
    sub_100004048(v24, v12);
    goto LABEL_7;
  }
  v42 = *(_QWORD *)(v0 + 104);
  v41 = *(_QWORD *)(v0 + 112);
  sub_1000126EC(*(_QWORD *)(v0 + 72), v41, type metadata accessor for NotifyWhenFoundRecord);
  v43 = sub_10005972C(v41, v42, type metadata accessor for NotifyWhenFoundRecord);
  v44 = Logger.logObject.getter(v43);
  v45 = static os_log_type_t.default.getter(v44);
  v46 = os_log_type_enabled(v44, v45);
  v47 = *(_QWORD *)(v0 + 104);
  if (v46)
  {
    v48 = *(_QWORD *)(v0 + 96);
    v49 = *(_QWORD *)(v0 + 80);
    v50 = (uint8_t *)swift_slowAlloc(12, -1);
    v51 = swift_slowAlloc(32, -1);
    v62 = v51;
    *(_DWORD *)v50 = 136315138;
    sub_10005972C(v47, v48, type metadata accessor for NotifyWhenFoundRecord);
    v52 = String.init<A>(describing:)(v48, v49);
    *(_QWORD *)(v0 + 24) = sub_100016940(v52, v53, &v62);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v50 + 4, v50 + 12);
    swift_bridgeObjectRelease();
    sub_1000126B0(v47, type metadata accessor for NotifyWhenFoundRecord);
    _os_log_impl((void *)&_mh_execute_header, v44, v45, "Delete notification record (204 response): %s", v50, 0xCu);
    swift_arrayDestroy(v51, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v51, -1, -1);
    swift_slowDealloc(v50, -1, -1);
  }
  else
  {
    sub_1000126B0(*(_QWORD *)(v0 + 104), type metadata accessor for NotifyWhenFoundRecord);
  }

  v54 = *(_QWORD *)(v0 + 112);
  v55 = *(_QWORD *)(v0 + 64);
  v56 = swift_task_alloc(32);
  *(_QWORD *)(v0 + 232) = v56;
  *(_QWORD *)(v56 + 16) = v55;
  *(_QWORD *)(v56 + 24) = v54;
  v57 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v0 + 240) = v57;
  *v57 = v0;
  v57[1] = sub_10020E25C;
  return withCheckedContinuation<A>(isolation:function:_:)(v57, 0, 0, 0xD000000000000012, 0x8000000100ECBCA0, sub_10021707C, v56, (char *)&type metadata for () + 8);
}

uint64_t sub_10020E84C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t (*v15)(_QWORD);
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t found;
  uint64_t v34;
  uint64_t v35;

  v32 = a1;
  v5 = sub_10001A9A8(&qword_101108DF0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  __chkstk_darwin(v5);
  v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  found = type metadata accessor for NotifyWhenFoundRecord(0);
  v9 = *(_QWORD *)(found - 8);
  v10 = *(_QWORD *)(v9 + 64);
  v11 = __chkstk_darwin(found);
  v12 = (char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v14 = (char *)&v32 - v13;
  v34 = *(_QWORD *)(a2 + 16);
  v35 = a3;
  sub_10005972C(a3, (uint64_t)&v32 - v13, v15);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v32, v5);
  v16 = *(unsigned __int8 *)(v9 + 80);
  v17 = (v16 + 16) & ~v16;
  v18 = (v10 + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
  v19 = *(unsigned __int8 *)(v6 + 80);
  v20 = (v19 + v18 + 8) & ~v19;
  v21 = swift_allocObject(&unk_10105FBF0, v20 + v7, v16 | v19 | 7);
  sub_1000126EC((uint64_t)v14, v21 + v17, type metadata accessor for NotifyWhenFoundRecord);
  *(_QWORD *)(v21 + v18) = a2;
  (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(v21 + v20, v8, v5);
  v22 = swift_retain();
  v23 = static os_log_type_t.default.getter(v22);
  if (qword_1010EA258 != -1)
    swift_once(&qword_1010EA258, sub_100B5D9CC);
  v24 = qword_1011B7D38;
  v25 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v26 = swift_allocObject(v25, 72, 7);
  *(_OWORD *)(v26 + 16) = xmmword_100E22B00;
  v27 = v35;
  sub_10005972C(v35, (uint64_t)v12, type metadata accessor for NotifyWhenFoundRecord);
  v28 = String.init<A>(describing:)(v12, found);
  v30 = v29;
  *(_QWORD *)(v26 + 56) = &type metadata for String;
  *(_QWORD *)(v26 + 64) = sub_10001AA00();
  *(_QWORD *)(v26 + 32) = v28;
  *(_QWORD *)(v26 + 40) = v30;
  os_log(_:dso:log:_:_:)(v23, &_mh_execute_header, v24, "Attempting to remove: %@", 24, 2, v26);
  swift_bridgeObjectRelease();
  swift_retain();
  sub_1008631E4(v27, v34, (void (*)(uint64_t))sub_10021718C, v21);
  return swift_release_n(v21, 2);
}

uint64_t sub_10020EAD0(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t found;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39[2];

  found = type metadata accessor for NotifyWhenFoundRecord(0);
  v8 = __chkstk_darwin(found);
  v10 = (char *)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v8);
  v13 = (char *)&v37 - v12;
  __chkstk_darwin(v11);
  v15 = (char *)&v37 - v14;
  if ((a1 & 1) == 0)
  {
    if (qword_1010E9AA0 != -1)
      swift_once(&qword_1010E9AA0, sub_100201450);
    v26 = type metadata accessor for Logger(0);
    sub_10001A9E8(v26, (uint64_t)qword_1011B6C18);
    v27 = sub_10005972C(a2, (uint64_t)v10, type metadata accessor for NotifyWhenFoundRecord);
    v18 = Logger.logObject.getter(v27);
    v28 = static os_log_type_t.error.getter(v18);
    if (os_log_type_enabled(v18, v28))
    {
      v29 = (uint8_t *)swift_slowAlloc(12, -1);
      v30 = swift_slowAlloc(32, -1);
      v37 = a4;
      v31 = v30;
      v39[0] = v30;
      *(_DWORD *)v29 = 136315138;
      sub_10005972C((uint64_t)v10, (uint64_t)v13, type metadata accessor for NotifyWhenFoundRecord);
      v32 = String.init<A>(describing:)(v13, found);
      v38 = sub_100016940(v32, v33, v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, v39, v29 + 4, v29 + 12);
      swift_bridgeObjectRelease();
      sub_1000126B0((uint64_t)v10, type metadata accessor for NotifyWhenFoundRecord);
      _os_log_impl((void *)&_mh_execute_header, v18, v28, "Failed to delete notify record: %s", v29, 0xCu);
      swift_arrayDestroy(v31, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v31, -1, -1);
      v25 = v29;
      goto LABEL_10;
    }
    v34 = (uint64_t)v10;
LABEL_13:
    sub_1000126B0(v34, type metadata accessor for NotifyWhenFoundRecord);
    goto LABEL_14;
  }
  if (qword_1010E9AA0 != -1)
    swift_once(&qword_1010E9AA0, sub_100201450);
  v16 = type metadata accessor for Logger(0);
  sub_10001A9E8(v16, (uint64_t)qword_1011B6C18);
  v17 = sub_10005972C(a2, (uint64_t)v15, type metadata accessor for NotifyWhenFoundRecord);
  v18 = Logger.logObject.getter(v17);
  v19 = static os_log_type_t.default.getter(v18);
  if (!os_log_type_enabled(v18, v19))
  {
    v34 = (uint64_t)v15;
    goto LABEL_13;
  }
  v20 = (uint8_t *)swift_slowAlloc(12, -1);
  v21 = swift_slowAlloc(32, -1);
  v37 = a4;
  v22 = v21;
  v39[0] = v21;
  *(_DWORD *)v20 = 136315138;
  sub_10005972C((uint64_t)v15, (uint64_t)v13, type metadata accessor for NotifyWhenFoundRecord);
  v23 = String.init<A>(describing:)(v13, found);
  v38 = sub_100016940(v23, v24, v39);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, v39, v20 + 4, v20 + 12);
  swift_bridgeObjectRelease();
  sub_1000126B0((uint64_t)v15, type metadata accessor for NotifyWhenFoundRecord);
  _os_log_impl((void *)&_mh_execute_header, v18, v19, "Successfully deleted notify record: %s", v20, 0xCu);
  swift_arrayDestroy(v22, 1, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v22, -1, -1);
  v25 = v20;
LABEL_10:
  swift_slowDealloc(v25, -1, -1);
LABEL_14:

  sub_10001A9A8((uint64_t *)&unk_1010EE3B0);
  QueueSynchronizer.conditionalSync<A>(_:)(sub_100215C88);
  v35 = sub_10001A9A8(&qword_101108DF0);
  return CheckedContinuation.resume(returning:)(v35, v35);
}

uint64_t sub_10020EEDC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v21[2];
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD aBlock[6];

  v3 = type metadata accessor for DispatchWorkItemFlags(0);
  v24 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v5 = (char *)v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  v22 = *(_QWORD *)(v6 - 8);
  v23 = v6;
  __chkstk_darwin(v6);
  v8 = (char *)v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  __chkstk_darwin(v9);
  v21[1] = *(_QWORD *)(v1 + 40);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))((char *)v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v9);
  v12 = *(unsigned __int8 *)(v10 + 80);
  v13 = (v12 + 24) & ~v12;
  v14 = swift_allocObject(&unk_10105FBA0, v13 + v11, v12 | 7);
  *(_QWORD *)(v14 + 16) = v1;
  (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(v14 + v13, (char *)v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v9);
  aBlock[4] = sub_100216FF8;
  aBlock[5] = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100016FB8;
  aBlock[3] = &unk_10105FBB8;
  v15 = _Block_copy(aBlock);
  v16 = swift_retain();
  static DispatchQoS.unspecified.getter(v16);
  v25 = _swiftEmptyArrayStorage;
  v17 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v18 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
  v19 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v25, v18, v19, v3, v17);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v8, v5, v15);
  _Block_release(v15);
  (*(void (**)(char *, uint64_t))(v24 + 8))(v5, v3);
  (*(void (**)(char *, uint64_t))(v22 + 8))(v8, v23);
  return swift_release();
}

uint64_t sub_10020F140(uint64_t a1)
{
  void (*v1)(uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  void (*v43)(char *, uint64_t);
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  NSObject *v55;
  os_log_type_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  void (*v64)(char *, uint64_t);
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  NSObject *v81;
  os_log_type_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  char *v90;
  char *v92;
  uint64_t v93;
  NSObject *v94;
  os_log_type_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  char *v103;
  void (*v104)(uint64_t, uint64_t);
  void (*v105)(char *, uint64_t, uint64_t);
  uint64_t v106;
  uint64_t v107;
  _WORD *v108;
  int *v109;
  uint64_t v110;
  uint64_t *v111;
  _QWORD *v112;
  id v113;
  NSString v114;
  id v115;
  id v116;
  id v117;
  NSString v118;
  id v119;
  uint64_t v120;
  void *v121;
  uint64_t v122;
  uint64_t v123;
  void (*v124)(uint64_t, uint64_t);
  _QWORD v125[2];
  char *v126;
  char *v127;
  char *v128;
  char *v129;
  char *v130;
  uint64_t v131;
  uint64_t found;
  char *v133;
  uint64_t v134;
  char *v135;
  void (*v136)(uint64_t, uint64_t);
  uint64_t v137;
  uint64_t v138;
  __int128 aBlock;
  void (*v140)(uint64_t, void *);
  void *v141;
  uint64_t (*v142)(uint64_t);
  uint64_t v143;
  __int128 v144[2];
  uint64_t v145;
  _QWORD v146[4];
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;

  found = type metadata accessor for NotifyWhenFoundUserNotification(0);
  __chkstk_darwin(found);
  v133 = (char *)v125 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_10001A9A8(&qword_1010ED860);
  v5 = __chkstk_darwin(v4);
  v131 = (uint64_t)v125 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v134 = (uint64_t)v125 - v7;
  v8 = sub_10001A9A8((uint64_t *)&unk_1010FF7F0);
  __chkstk_darwin(v8);
  v10 = (char *)v125 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for BeaconObservation(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)v125 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for UUID(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = __chkstk_darwin(v15);
  v19 = (char *)v125 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __chkstk_darwin(v17);
  v130 = (char *)v125 - v21;
  v22 = __chkstk_darwin(v20);
  v129 = (char *)v125 - v23;
  v24 = __chkstk_darwin(v22);
  v128 = (char *)v125 - v25;
  v26 = __chkstk_darwin(v24);
  v135 = (char *)v125 - v27;
  __chkstk_darwin(v26);
  v29 = (char *)v125 - v28;
  v30 = a1 + *(int *)(type metadata accessor for NotifyWhenFoundRecord(0) + 24);
  v137 = v16;
  v31 = *(void (**)(char *, uint64_t, uint64_t))(v16 + 16);
  v138 = v15;
  v31(v29, v30, v15);
  v32 = (uint64_t)v29;
  v136 = v1;
  if ((sub_10020D134((uint64_t)v29) & 1) != 0)
  {
    if (qword_1010E9AA0 != -1)
      swift_once(&qword_1010E9AA0, sub_100201450);
    v33 = type metadata accessor for Logger(0);
    sub_10001A9E8(v33, (uint64_t)qword_1011B6C18);
    v34 = ((uint64_t (*)(char *, char *, uint64_t))v31)(v19, v29, v138);
    v35 = Logger.logObject.getter(v34);
    v36 = static os_log_type_t.info.getter(v35);
    if (!os_log_type_enabled(v35, v36))
    {

      v43 = *(void (**)(char *, uint64_t))(v137 + 8);
      v66 = v138;
      v43(v19, v138);
      v44 = v29;
      v67 = v66;
      return ((uint64_t (*)(char *, uint64_t))v43)(v44, v67);
    }
    v37 = swift_slowAlloc(22, -1);
    v38 = swift_slowAlloc(32, -1);
    *(_QWORD *)&aBlock = v38;
    *(_DWORD *)v37 = 141558275;
    v147 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v147, &v148, v37 + 4, v37 + 12);
    *(_WORD *)(v37 + 12) = 2081;
    v127 = v29;
    v39 = v138;
    v40 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v41 = dispatch thunk of CustomStringConvertible.description.getter(v39, v40);
    v147 = sub_100016940(v41, v42, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v147, &v148, v37 + 14, v37 + 22);
    swift_bridgeObjectRelease();
    v43 = *(void (**)(char *, uint64_t))(v137 + 8);
    v43(v19, v39);
    _os_log_impl((void *)&_mh_execute_header, v35, v36, "Already posted local notification for beacon %{private,mask.hash}s.", (uint8_t *)v37, 0x16u);
    swift_arrayDestroy(v38, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v38, -1, -1);
    swift_slowDealloc(v37, -1, -1);

    v44 = v127;
LABEL_20:
    v67 = v39;
    return ((uint64_t (*)(char *, uint64_t))v43)(v44, v67);
  }
  v126 = v10;
  if (qword_1010E9CF0 != -1)
    swift_once(&qword_1010E9CF0, sub_10058CADC);
  v45 = qword_1011B7160;
  v31(v14, (uint64_t)v29, v138);
  static Date.trustedNow.getter((uint64_t)&v14[*(int *)(v11 + 20)]);
  v14[*(int *)(v11 + 24)] = 28;
  v46 = sub_10001A9A8((uint64_t *)&unk_1010F78F0);
  v47 = *(unsigned __int8 *)(v12 + 80);
  v48 = (v47 + 32) & ~v47;
  v49 = swift_allocObject(v46, v48 + *(_QWORD *)(v12 + 72), v47 | 7);
  *(_OWORD *)(v49 + 16) = xmmword_100E22B00;
  sub_10005972C((uint64_t)v14, v49 + v48, type metadata accessor for BeaconObservation);
  v50 = type metadata accessor for Transaction(0);
  __chkstk_darwin(v50);
  v125[-4] = v45;
  v125[-3] = v49;
  v125[-2] = 0;
  v125[-1] = 0;
  static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd.BeaconObservationStore.save", 57, 2, sub_1001514CC, &v125[-6], (char *)&type metadata for () + 8);
  swift_bridgeObjectRelease();
  sub_1000126B0((uint64_t)v14, type metadata accessor for BeaconObservation);
  if (qword_1010E9AA0 != -1)
    swift_once(&qword_1010E9AA0, sub_100201450);
  v51 = type metadata accessor for Logger(0);
  v52 = sub_10001A9E8(v51, (uint64_t)qword_1011B6C18);
  v53 = v135;
  v54 = ((uint64_t (*)(char *, uint64_t, uint64_t))v31)(v135, v32, v138);
  v55 = Logger.logObject.getter(v54);
  v56 = static os_log_type_t.default.getter(v55);
  if (os_log_type_enabled(v55, v56))
  {
    v57 = swift_slowAlloc(22, -1);
    v58 = swift_slowAlloc(32, -1);
    v127 = (char *)v32;
    v125[1] = v52;
    v59 = v138;
    v60 = v58;
    *(_QWORD *)&aBlock = v58;
    *(_DWORD *)v57 = 141558275;
    v147 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v147, &v148, v57 + 4, v57 + 12);
    *(_WORD *)(v57 + 12) = 2081;
    v61 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v62 = dispatch thunk of CustomStringConvertible.description.getter(v59, v61);
    v147 = sub_100016940(v62, v63, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v147, &v148, v57 + 14, v57 + 22);
    swift_bridgeObjectRelease();
    v64 = *(void (**)(char *, uint64_t))(v137 + 8);
    v64(v53, v59);
    _os_log_impl((void *)&_mh_execute_header, v55, v56, "Showing local NWF notification for beacon %{private,mask.hash}s.", (uint8_t *)v57, 0x16u);
    swift_arrayDestroy(v60, 1, (char *)&type metadata for Any + 8);
    v65 = v60;
    v32 = (uint64_t)v127;
    swift_slowDealloc(v65, -1, -1);
    swift_slowDealloc(v57, -1, -1);
  }
  else
  {
    v64 = *(void (**)(char *, uint64_t))(v137 + 8);
    v64(v53, v138);
  }

  sub_10080B648(v32, (uint64_t)&aBlock);
  if (v141)
  {
    v136 = (void (*)(uint64_t, uint64_t))v64;
    sub_10000F9FC(&aBlock, (uint64_t)&v147);
    v68 = sub_1007EFA24(v32);
    if (v69)
    {
      v70 = v68;
      v71 = v69;
      v72 = v149;
      v73 = v150;
      sub_10001AA44(&v147, v149);
      v74 = v134;
      v75 = v137;
      (*(void (**)(uint64_t, uint64_t))(v73 + 192))(v72, v73);
      v76 = v131;
      sub_10000F9B8(v74, v131, &qword_1010ED860);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v75 + 48))(v76, 1, v138) == 1)
      {
        v77 = type metadata accessor for OwnedBeaconGroup(0);
        v78 = (uint64_t)v126;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v77 - 8) + 56))(v126, 1, 1, v77);
        swift_retain();
      }
      else
      {
        v105 = *(void (**)(char *, uint64_t, uint64_t))(v75 + 32);
        v106 = (uint64_t)v128;
        v107 = v138;
        v105(v128, v76, v138);
        swift_retain();
        v78 = (uint64_t)v126;
        sub_10081EDA8(v106, (uint64_t)v126);
        v136(v106, v107);
      }
      v108 = v133;
      v109 = (int *)found;
      sub_100004048(v134, &qword_1010ED860);
      swift_release();
      sub_100030784((uint64_t)&v147, (uint64_t)v108 + v109[8]);
      v110 = sub_10000F9B8(v78, (uint64_t)v108 + v109[9], (uint64_t *)&unk_1010FF7F0);
      *v108 = 24577;
      UUID.init()(v110);
      v111 = (uint64_t *)((char *)v108 + v109[7]);
      *v111 = v70;
      v111[1] = v71;
      if (qword_1010EA140 != -1)
        swift_once(&qword_1010EA140, sub_100A3A528);
      v146[2] = v109;
      v146[3] = &off_1010C2E98;
      v112 = sub_100018F08(&v145);
      sub_10005972C((uint64_t)v108, (uint64_t)v112, type metadata accessor for NotifyWhenFoundUserNotification);
      v113 = objc_allocWithZone((Class)UNUserNotificationCenter);
      v114 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      v115 = objc_msgSend(v113, "initWithBundleIdentifier:", v114);

      v116 = sub_100C0B078((uint64_t)v112);
      UUID.uuidString.getter(v116);
      v117 = v116;
      v118 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      v119 = objc_msgSend((id)objc_opt_self(UNNotificationRequest), "requestWithIdentifier:content:trigger:destinations:", v118, v117, 0, 7);

      sub_100030784((uint64_t)&v145, (uint64_t)v144);
      v120 = swift_allocObject(&unk_10105FB50, 72, 7);
      sub_10000F9FC(v144, v120 + 16);
      *(_QWORD *)(v120 + 56) = 0;
      *(_QWORD *)(v120 + 64) = 0;
      v142 = sub_100216F78;
      v143 = v120;
      *(_QWORD *)&aBlock = _NSConcreteStackBlock;
      *((_QWORD *)&aBlock + 1) = 1107296256;
      v140 = sub_100555E2C;
      v141 = &unk_10105FB68;
      v121 = _Block_copy(&aBlock);
      swift_release();
      objc_msgSend(v115, "addNotificationRequest:withCompletionHandler:", v119, v121);

      _Block_release(v121);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v145);
      sub_1000126B0((uint64_t)v108, type metadata accessor for NotifyWhenFoundUserNotification);
      sub_100004048(v78, (uint64_t *)&unk_1010FF7F0);
      v136(v32, v138);
    }
    else
    {
      v92 = v129;
      v93 = ((uint64_t (*)(char *, uint64_t, uint64_t))v31)(v129, v32, v138);
      v94 = Logger.logObject.getter(v93);
      v95 = static os_log_type_t.error.getter(v94);
      if (os_log_type_enabled(v94, v95))
      {
        v96 = v92;
        v97 = swift_slowAlloc(22, -1);
        v98 = swift_slowAlloc(32, -1);
        *(_QWORD *)&aBlock = v98;
        *(_DWORD *)v97 = 141558275;
        v145 = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v145, v146, v97 + 4, v97 + 12);
        *(_WORD *)(v97 + 12) = 2081;
        v99 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v100 = v138;
        v101 = dispatch thunk of CustomStringConvertible.description.getter(v138, v99);
        v145 = sub_100016940(v101, v102, (uint64_t *)&aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v145, v146, v97 + 14, v97 + 22);
        swift_bridgeObjectRelease();
        v103 = v96;
        v104 = v136;
        v136((uint64_t)v103, v100);
        _os_log_impl((void *)&_mh_execute_header, v94, v95, "Can't construct beacon name for beacon %{private,mask.hash}s.", (uint8_t *)v97, 0x16u);
        swift_arrayDestroy(v98, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v98, -1, -1);
        swift_slowDealloc(v97, -1, -1);

        v104(v32, v100);
      }
      else
      {

        v123 = v138;
        v124 = v136;
        v136((uint64_t)v92, v138);
        v124(v32, v123);
      }
    }
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v147);
  }
  else
  {
    sub_100004048((uint64_t)&aBlock, (uint64_t *)&unk_1010EE310);
    v79 = v130;
    v80 = ((uint64_t (*)(char *, uint64_t, uint64_t))v31)(v130, v32, v138);
    v81 = Logger.logObject.getter(v80);
    v82 = static os_log_type_t.error.getter(v81);
    if (os_log_type_enabled(v81, v82))
    {
      v83 = swift_slowAlloc(22, -1);
      v136 = (void (*)(uint64_t, uint64_t))v64;
      v84 = v83;
      v85 = v79;
      v86 = swift_slowAlloc(32, -1);
      *(_QWORD *)&aBlock = v86;
      *(_DWORD *)v84 = 141558275;
      v147 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v147, &v148, v84 + 4, v84 + 12);
      *(_WORD *)(v84 + 12) = 2081;
      v87 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v39 = v138;
      v88 = dispatch thunk of CustomStringConvertible.description.getter(v138, v87);
      v147 = sub_100016940(v88, v89, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v147, &v148, v84 + 14, v84 + 22);
      swift_bridgeObjectRelease();
      v90 = v85;
      v43 = (void (*)(char *, uint64_t))v136;
      v136((uint64_t)v90, v39);
      _os_log_impl((void *)&_mh_execute_header, v81, v82, "No beaconRecord for %{private,mask.hash}s", (uint8_t *)v84, 0x16u);
      swift_arrayDestroy(v86, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v86, -1, -1);
      swift_slowDealloc(v84, -1, -1);

      v44 = (char *)v32;
      goto LABEL_20;
    }

    v122 = v138;
    v64(v79, v138);
    return ((uint64_t (*)(uint64_t, uint64_t))v64)(v32, v122);
  }
}

void sub_100210088(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t found;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  void *v21;
  id v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  NSObject *v44;
  os_log_type_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  os_log_type_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  uint64_t v70;
  uint64_t v71;

  v2 = v1;
  v4 = type metadata accessor for UUID(0);
  v67 = *(_QWORD *)(v4 - 8);
  v68 = v4;
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v63 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v5);
  v65 = (char *)&v63 - v9;
  __chkstk_darwin(v8);
  v64 = (char *)&v63 - v10;
  v11 = sub_10001A9A8(&qword_1010F33A8);
  __chkstk_darwin(v11);
  v13 = (char *)&v63 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  found = type metadata accessor for NotifyWhenFoundRecord(0);
  v15 = *(_QWORD *)(found - 8);
  __chkstk_darwin(found);
  v66 = (uint64_t)&v63 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for DispatchPredicate(0);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v20 = (uint64_t *)((char *)&v63 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  v21 = *(void **)(v2 + 40);
  *v20 = v21;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v18 + 104))(v20, enum case for DispatchPredicate.onQueue(_:), v17);
  v22 = v21;
  LOBYTE(v21) = _dispatchPreconditionTest(_:)(v20);
  (*(void (**)(_QWORD *, uint64_t))(v18 + 8))(v20, v17);
  if ((v21 & 1) == 0)
  {
    __break(1u);
    goto LABEL_27;
  }
  v23 = sub_10088AE54(a1);
  v18 = a1;
  if (v23[2])
  {
    sub_10005972C((uint64_t)v23 + ((*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80)), (uint64_t)v13, type metadata accessor for NotifyWhenFoundRecord);
    v24 = 0;
  }
  else
  {
    v24 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56))(v13, v24, 1, found);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, found) != 1)
  {
    v36 = v66;
    v37 = sub_1000126EC((uint64_t)v13, v66, type metadata accessor for NotifyWhenFoundRecord);
    v38 = *(_QWORD *)(v2 + 64);
    __chkstk_darwin(v37);
    *(&v63 - 2) = v2;
    *(&v63 - 1) = a1;
    OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_100216EBC, &v63 - 4, v38, (char *)&type metadata for () + 8, &type metadata for Bool);
    if (v69 == 1)
    {
      sub_10020F140(v36);
      swift_retain();
      unsafeFromAsyncTask<A>(_:)(&unk_1010F3418, v2, (char *)&type metadata for () + 8);
      swift_release();
      v53 = v67;
      if (qword_1010E9AA0 != -1)
        swift_once(&qword_1010E9AA0, sub_100201450);
      v54 = type metadata accessor for Logger(0);
      sub_10001A9E8(v54, (uint64_t)qword_1011B6C18);
      v55 = v64;
      v56 = v68;
      v57 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v53 + 16))(v64, a1, v68);
      v44 = Logger.logObject.getter(v57);
      v58 = static os_log_type_t.default.getter(v44);
      if (!os_log_type_enabled(v44, v58))
      {

        (*(void (**)(char *, uint64_t))(v53 + 8))(v55, v56);
        goto LABEL_24;
      }
      v46 = swift_slowAlloc(22, -1);
      v59 = swift_slowAlloc(32, -1);
      *(_DWORD *)v46 = 141558275;
      v70 = 1752392040;
      v71 = v59;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, &v71, v46 + 4, v46 + 12);
      *(_WORD *)(v46 + 12) = 2081;
      v60 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v61 = dispatch thunk of CustomStringConvertible.description.getter(v56, v60);
      v70 = sub_100016940(v61, v62, &v71);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, &v71, v46 + 14, v46 + 22);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v53 + 8))(v55, v56);
      _os_log_impl((void *)&_mh_execute_header, v44, v58, "Force publish succeeded for beacon %{private,mask.hash}s.", (uint8_t *)v46, 0x16u);
      swift_arrayDestroy(v59, 1, (char *)&type metadata for Any + 8);
      v51 = v59;
    }
    else
    {
      if (qword_1010E9AA0 != -1)
        swift_once(&qword_1010E9AA0, sub_100201450);
      v39 = type metadata accessor for Logger(0);
      sub_10001A9E8(v39, (uint64_t)qword_1011B6C18);
      v41 = v67;
      v40 = v68;
      v42 = v65;
      v43 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v67 + 16))(v65, v18, v68);
      v44 = Logger.logObject.getter(v43);
      v45 = static os_log_type_t.info.getter(v44);
      if (!os_log_type_enabled(v44, v45))
      {

        (*(void (**)(char *, uint64_t))(v41 + 8))(v42, v40);
        v52 = v36;
LABEL_25:
        sub_1000126B0(v52, type metadata accessor for NotifyWhenFoundRecord);
        return;
      }
      v46 = swift_slowAlloc(22, -1);
      v47 = swift_slowAlloc(32, -1);
      *(_DWORD *)v46 = 141558275;
      v70 = 1752392040;
      v71 = v47;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, &v71, v46 + 4, v46 + 12);
      *(_WORD *)(v46 + 12) = 2081;
      v48 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v49 = dispatch thunk of CustomStringConvertible.description.getter(v40, v48);
      v70 = sub_100016940(v49, v50, &v71);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, &v71, v46 + 14, v46 + 22);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v41 + 8))(v42, v40);
      _os_log_impl((void *)&_mh_execute_header, v44, v45, "Found pending force publish for beacon %{private,mask.hash}s", (uint8_t *)v46, 0x16u);
      swift_arrayDestroy(v47, 1, (char *)&type metadata for Any + 8);
      v51 = v47;
    }
    swift_slowDealloc(v51, -1, -1);
    swift_slowDealloc(v46, -1, -1);

LABEL_24:
    v52 = v66;
    goto LABEL_25;
  }
  sub_100004048((uint64_t)v13, &qword_1010F33A8);
  if (qword_1010E9AA0 != -1)
LABEL_27:
    swift_once(&qword_1010E9AA0, sub_100201450);
  v25 = type metadata accessor for Logger(0);
  sub_10001A9E8(v25, (uint64_t)qword_1011B6C18);
  v27 = v67;
  v26 = v68;
  v28 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v67 + 16))(v7, v18, v68);
  v29 = Logger.logObject.getter(v28);
  v30 = static os_log_type_t.info.getter(v29);
  if (os_log_type_enabled(v29, v30))
  {
    v31 = swift_slowAlloc(22, -1);
    v32 = swift_slowAlloc(32, -1);
    *(_DWORD *)v31 = 141558275;
    v70 = 1752392040;
    v71 = v32;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, &v71, v31 + 4, v31 + 12);
    *(_WORD *)(v31 + 12) = 2081;
    v33 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v34 = dispatch thunk of CustomStringConvertible.description.getter(v26, v33);
    v70 = sub_100016940(v34, v35, &v71);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, &v71, v31 + 14, v31 + 22);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v27 + 8))(v7, v26);
    _os_log_impl((void *)&_mh_execute_header, v29, v30, "No NWF record for beacon %{private,mask.hash}s. No need to publish", (uint8_t *)v31, 0x16u);
    swift_arrayDestroy(v32, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v32, -1, -1);
    swift_slowDealloc(v31, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v27 + 8))(v7, v26);
  }

}

uint64_t sub_100210A20@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t result;
  _BYTE v15[24];

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = &v15[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v8);
  v12 = &v15[-v11 - 8];
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, a2, v6);
  swift_beginAccess(a1 + 56, v15, 33, 0);
  LOBYTE(a2) = sub_100A09F38((uint64_t)v12, v10);
  (*(void (**)(_BYTE *, uint64_t))(v7 + 8))(v12, v6);
  result = swift_endAccess(v15);
  *a3 = a2 & 1;
  return result;
}

uint64_t sub_100210B1C()
{
  return swift_task_switch(sub_100210B30, 0, 0);
}

uint64_t sub_100210B30()
{
  uint64_t v0;
  uint64_t result;
  _QWORD *v2;
  uint64_t (__cdecl *v3)();

  if (qword_1010EA5B0 != -1)
    swift_once(&qword_1010EA5B0, sub_100D37418);
  swift_beginAccess(&xmmword_10111E6C0, v0 + 176, 0, 0);
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 96, &qword_1010EE220);
  if (*(_QWORD *)(v0 + 120))
  {
    sub_10000F9FC((__int128 *)(v0 + 96), v0 + 16);
    sub_10001AA44((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40));
    v3 = (uint64_t (__cdecl *)())((char *)&dword_1010EBB88 + dword_1010EBB88);
    v2 = (_QWORD *)swift_task_alloc(unk_1010EBB8C);
    *(_QWORD *)(v0 + 216) = v2;
    *v2 = v0;
    v2[1] = sub_100210C1C;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100210C1C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 216);
  *(_QWORD *)(*(_QWORD *)v1 + 224) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100210C78, 0, 0);
}

uint64_t sub_100210C78()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t result;
  __int128 *v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t (__cdecl *v17)();

  v1 = v0 + 2;
  if (v0[28])
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    v2 = (_QWORD *)swift_task_alloc(dword_101103F64);
    v0[29] = v2;
    *v2 = v0;
    v2[1] = sub_100210F44;
    return sub_1006B1EAC(0);
  }
  else
  {
    v4 = (__int128 *)(v0 + 7);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    v5 = sub_100033220();
    v6 = swift_allocError(&type metadata for DaemonError, v5, 0, 0);
    *v7 = 0xD00000000000001DLL;
    v7[1] = 0x8000000100EC5EF0;
    swift_willThrow(v6);
    if (qword_1010E9AA0 != -1)
      swift_once(&qword_1010E9AA0, sub_100201450);
    v8 = type metadata accessor for Logger(0);
    sub_10001A9E8(v8, (uint64_t)qword_1011B6C18);
    swift_errorRetain(v6);
    v9 = swift_errorRetain(v6);
    v10 = Logger.logObject.getter(v9);
    v11 = static os_log_type_t.error.getter(v10);
    if (os_log_type_enabled(v10, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc(12, -1);
      v13 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v12 = 138543362;
      swift_errorRetain(v6);
      v14 = _swift_stdlib_bridgeErrorToNSError(v6);
      v0[26] = v14;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 26, v0 + 27, v12 + 4, v12 + 12);
      *v13 = v14;
      v4 = (__int128 *)(v0 + 7);
      swift_errorRelease(v6);
      swift_errorRelease(v6);
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Force publish FMN failed. Error - %{public}@", v12, 0xCu);
      v15 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
      swift_arrayDestroy(v13, 1, v15);
      swift_slowDealloc(v13, -1, -1);
      swift_slowDealloc(v12, -1, -1);
    }
    else
    {
      swift_errorRelease(v6);
      swift_errorRelease(v6);
    }

    v0[31] = v6;
    result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, (uint64_t)v4, &qword_1010EE220);
    if (v0[10])
    {
      sub_10000F9FC(v4, (uint64_t)(v0 + 17));
      sub_10001AA44(v0 + 17, v0[20]);
      v17 = (uint64_t (__cdecl *)())((char *)&dword_1010EBCE8 + dword_1010EBCE8);
      v16 = (_QWORD *)swift_task_alloc(unk_1010EBCEC);
      v0[32] = v16;
      *v16 = v0;
      v16[1] = sub_100211068;
      return v17();
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

uint64_t sub_100210F44(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t (*v5)();

  v4 = *(_QWORD *)(*(_QWORD *)v2 + 232);
  *(_QWORD *)(*(_QWORD *)v2 + 240) = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    v5 = sub_1002113FC;
  }
  else
  {
    swift_release();

    v5 = sub_100210FC0;
  }
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_100210FC0()
{
  uint64_t v0;
  uint64_t result;
  _QWORD *v2;
  uint64_t (*v3)(void);

  *(_QWORD *)(v0 + 248) = 0;
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, v0 + 56, &qword_1010EE220);
  if (*(_QWORD *)(v0 + 80))
  {
    sub_10000F9FC((__int128 *)(v0 + 56), v0 + 136);
    sub_10001AA44((_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 160));
    v3 = (uint64_t (*)(void))((char *)&dword_1010EBCE8 + dword_1010EBCE8);
    v2 = (_QWORD *)swift_task_alloc(unk_1010EBCEC);
    *(_QWORD *)(v0 + 256) = v2;
    *v2 = v0;
    v2[1] = sub_100211068;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100211068(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 256);
  *(_QWORD *)(*(_QWORD *)v1 + 264) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1002110C4, 0, 0);
}

uint64_t sub_1002110C4()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  _BOOL4 v11;
  uint64_t v12;
  uint8_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v1 = (_QWORD *)(v0 + 136);
  if (*(_QWORD *)(v0 + 264))
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    v2 = (_QWORD *)swift_task_alloc(dword_10110181C);
    *(_QWORD *)(v0 + 272) = v2;
    *v2 = v0;
    v2[1] = sub_100211340;
    return sub_10061A894();
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    v4 = sub_100033220();
    v5 = swift_allocError(&type metadata for DaemonError, v4, 0, 0);
    *v6 = 0xD00000000000001CLL;
    v6[1] = 0x8000000100ECBC60;
    swift_willThrow(v5);
    if (qword_1010E9AA0 != -1)
      swift_once(&qword_1010E9AA0, sub_100201450);
    v7 = type metadata accessor for Logger(0);
    sub_10001A9E8(v7, (uint64_t)qword_1011B6C18);
    swift_errorRetain(v5);
    v8 = swift_errorRetain(v5);
    v9 = Logger.logObject.getter(v8);
    v10 = static os_log_type_t.error.getter(v9);
    v11 = os_log_type_enabled(v9, v10);
    v12 = *(_QWORD *)(v0 + 248);
    if (v11)
    {
      v18 = *(_QWORD *)(v0 + 248);
      v13 = (uint8_t *)swift_slowAlloc(12, -1);
      v14 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v13 = 138543362;
      swift_errorRetain(v5);
      v15 = _swift_stdlib_bridgeErrorToNSError(v5);
      *(_QWORD *)(v0 + 200) = v15;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 200, v0 + 208, v13 + 4, v13 + 12);
      *v14 = v15;
      swift_errorRelease(v5);
      swift_errorRelease(v5);
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Force publish owned device failed. Error - %{public}@", v13, 0xCu);
      v16 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
      swift_arrayDestroy(v14, 1, v16);
      swift_slowDealloc(v14, -1, -1);
      swift_slowDealloc(v13, -1, -1);

      swift_errorRelease(v18);
    }
    else
    {
      swift_errorRelease(v5);
      swift_errorRelease(v5);
      swift_errorRelease(v12);

    }
    v17 = swift_errorRetain(v5);
    swift_willThrow(v17);
    swift_errorRelease(v5);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100211340()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 272);
  *(_QWORD *)(*(_QWORD *)v1 + 280) = v0;
  swift_task_dealloc(v2);
  if (v0)
  {
    v3 = sub_100211638;
  }
  else
  {
    swift_release();
    v3 = sub_1002113AC;
  }
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1002113AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 248);
  if (v1)
  {
    v2 = swift_errorRetain(*(_QWORD *)(v0 + 248));
    swift_willThrow(v2);
    swift_errorRelease(v1);
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1002113FC()
{
  _QWORD *v0;
  __int128 *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  _QWORD *v12;
  uint64_t (__cdecl *v13)();

  v1 = (__int128 *)(v0 + 7);
  swift_release();
  v2 = v0[30];
  if (qword_1010E9AA0 != -1)
    swift_once(&qword_1010E9AA0, sub_100201450);
  v3 = type metadata accessor for Logger(0);
  sub_10001A9E8(v3, (uint64_t)qword_1011B6C18);
  swift_errorRetain(v2);
  v4 = swift_errorRetain(v2);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.error.getter(v5);
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(12, -1);
    v8 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v7 = 138543362;
    swift_errorRetain(v2);
    v9 = _swift_stdlib_bridgeErrorToNSError(v2);
    v0[26] = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 26, v0 + 27, v7 + 4, v7 + 12);
    *v8 = v9;
    v1 = (__int128 *)(v0 + 7);
    swift_errorRelease(v2);
    swift_errorRelease(v2);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Force publish FMN failed. Error - %{public}@", v7, 0xCu);
    v10 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v8, 1, v10);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v7, -1, -1);
  }
  else
  {
    swift_errorRelease(v2);
    swift_errorRelease(v2);
  }

  v0[31] = v2;
  result = sub_10000F9B8((uint64_t)&xmmword_10111E6C0, (uint64_t)v1, &qword_1010EE220);
  if (v0[10])
  {
    sub_10000F9FC(v1, (uint64_t)(v0 + 17));
    sub_10001AA44(v0 + 17, v0[20]);
    v13 = (uint64_t (__cdecl *)())((char *)&dword_1010EBCE8 + dword_1010EBCE8);
    v12 = (_QWORD *)swift_task_alloc(unk_1010EBCEC);
    v0[32] = v12;
    *v12 = v0;
    v12[1] = sub_100211068;
    return v13();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100211638()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  swift_release();
  v1 = *(_QWORD *)(v0 + 280);
  if (qword_1010E9AA0 != -1)
    swift_once(&qword_1010E9AA0, sub_100201450);
  v2 = type metadata accessor for Logger(0);
  sub_10001A9E8(v2, (uint64_t)qword_1011B6C18);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter(v4);
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 248);
  if (v6)
  {
    v14 = *(_QWORD *)(v0 + 248);
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v8 = 138543362;
    swift_errorRetain(v1);
    v10 = _swift_stdlib_bridgeErrorToNSError(v1);
    *(_QWORD *)(v0 + 200) = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 200, v0 + 208, v8 + 4, v8 + 12);
    *v9 = v10;
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Force publish owned device failed. Error - %{public}@", v8, 0xCu);
    v11 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v9, 1, v11);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

    swift_errorRelease(v14);
  }
  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    swift_errorRelease(v7);

  }
  v12 = swift_errorRetain(v1);
  swift_willThrow(v12);
  swift_errorRelease(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100211828()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 32));

  swift_release(*(_QWORD *)(v0 + 48));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 56));
  swift_release(*(_QWORD *)(v0 + 64));
  swift_release(*(_QWORD *)(v0 + 72));
  swift_release(*(_QWORD *)(v0 + 80));
  return v0;
}

uint64_t sub_100211884()
{
  uint64_t v0;

  sub_100211828();
  return swift_deallocClassInstance(v0, 89, 7);
}

uint64_t type metadata accessor for NotifyWhenFoundManager()
{
  return objc_opt_self(_TtC12searchpartyd22NotifyWhenFoundManager);
}

uint64_t sub_1002118C4(uint64_t a1, uint64_t a2, void (*a3)(void), void (*a4)(void), uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  _QWORD *v28;
  void (*v29)(_QWORD *, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  void (*v43)(char *, uint64_t);
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(uint64_t);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  NSObject *v58;
  os_log_type_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  void (**v75)(void);
  void (*v76)(void);
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  _BYTE *v88;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  _QWORD *v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t found;
  void (*v104)(void);
  void (*v105)(void);
  void (*v106)(uint64_t);
  uint64_t v107;
  void (*v108)(char *, uint64_t);
  uint64_t v109;
  uint64_t v110;
  _QWORD v111[3];
  uint64_t v112;
  _QWORD v113[6];

  v102 = a5;
  v104 = a3;
  v105 = a4;
  v11 = sub_10001A9A8(&qword_1010F33A8);
  __chkstk_darwin(v11);
  v13 = (char *)&v90 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  found = type metadata accessor for NotifyWhenFoundRecord(0);
  v101 = *(_QWORD *)(found - 8);
  v14 = __chkstk_darwin(found);
  v95 = (uint64_t)&v90 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v14);
  v94 = (uint64_t)&v90 - v17;
  v93 = v18;
  __chkstk_darwin(v16);
  v97 = (uint64_t)&v90 - v19;
  v20 = type metadata accessor for UUID(0);
  v21 = *(_QWORD *)(v20 - 8);
  v22 = __chkstk_darwin(v20);
  v100 = (char *)&v90 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = __chkstk_darwin(v22);
  v98 = (char *)&v90 - v25;
  __chkstk_darwin(v24);
  v27 = (char *)&v90 - v26;
  v113[3] = a6;
  v113[4] = a7;
  v28 = sub_100018F08(v113);
  v29 = *(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(a6 - 8) + 16);
  v99 = v28;
  v29(v28, a2, a6);
  if (qword_1010E9AA0 != -1)
    swift_once(&qword_1010E9AA0, sub_100201450);
  v30 = type metadata accessor for Logger(0);
  v31 = sub_10001A9E8(v30, (uint64_t)qword_1011B6C18);
  sub_100030784((uint64_t)v113, (uint64_t)v111);
  v32 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v21 + 16))(v27, a1, v20);
  v92 = v31;
  v33 = Logger.logObject.getter(v32);
  v34 = static os_log_type_t.default.getter(v33);
  if (os_log_type_enabled(v33, v34))
  {
    v35 = swift_slowAlloc(22, -1);
    v96 = a6;
    v36 = v35;
    v90 = swift_slowAlloc(64, -1);
    v110 = v90;
    *(_DWORD *)v36 = 136315394;
    v108 = (void (*)(char *, uint64_t))(v36 + 4);
    sub_10001AA44(v111, v112);
    v37 = *(_QWORD *)(*(_QWORD *)(a7 + 8) + 8);
    v106 = *(void (**)(uint64_t))(v37 + 32);
    v107 = v37;
    v38 = v98;
    v106(v96);
    v39 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v40 = dispatch thunk of CustomStringConvertible.description.getter(v20, v39);
    v91 = v13;
    v42 = v41;
    v43 = *(void (**)(char *, uint64_t))(v21 + 8);
    v43(v38, v20);
    v109 = sub_100016940(v40, v42, &v110);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v109, &v110, v108, v36 + 12);
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v111);
    *(_WORD *)(v36 + 12) = 2080;
    v44 = dispatch thunk of CustomStringConvertible.description.getter(v20, v39);
    v109 = sub_100016940(v44, v45, &v110);
    v13 = v91;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v109, &v110, v36 + 14, v36 + 22);
    swift_bridgeObjectRelease();
    v108 = v43;
    v43(v27, v20);
    _os_log_impl((void *)&_mh_execute_header, v33, v34, "disableNotifyWhenFound for %s, commandId %s", (uint8_t *)v36, 0x16u);
    v46 = v90;
    swift_arrayDestroy(v90, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v46, -1, -1);
    v47 = v36;
    a6 = v96;
    swift_slowDealloc(v47, -1, -1);

    v49 = v106;
    v48 = v107;
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v111);
    v108 = *(void (**)(char *, uint64_t))(v21 + 8);
    v108(v27, v20);

    v48 = *(_QWORD *)(*(_QWORD *)(a7 + 8) + 8);
    v49 = *(void (**)(uint64_t))(v48 + 32);
  }
  v50 = v102;
  v51 = *(_QWORD *)(v102 + 16);
  v52 = (uint64_t)v100;
  v106 = v49;
  v107 = v48;
  v49(a6);
  v53 = sub_10088AE54(v52);
  v54 = found;
  v55 = v101;
  if (v53[2])
  {
    sub_10005972C((uint64_t)v53 + ((*(unsigned __int8 *)(v101 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v101 + 80)), (uint64_t)v13, type metadata accessor for NotifyWhenFoundRecord);
    v56 = 0;
  }
  else
  {
    v56 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v55 + 56))(v13, v56, 1, v54);
  swift_bridgeObjectRelease();
  v108((char *)v52, v20);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v55 + 48))(v13, 1, v54) == 1)
  {
    sub_100004048((uint64_t)v13, &qword_1010F33A8);
    v57 = sub_100030784((uint64_t)v113, (uint64_t)v111);
    v58 = Logger.logObject.getter(v57);
    v59 = static os_log_type_t.default.getter(v58);
    if (os_log_type_enabled(v58, v59))
    {
      v60 = a6;
      v61 = swift_slowAlloc(22, -1);
      v62 = swift_slowAlloc(32, -1);
      *(_DWORD *)v61 = 141558275;
      v109 = 1752392040;
      v110 = v62;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v109, &v110, v61 + 4, v61 + 12);
      *(_WORD *)(v61 + 12) = 2081;
      sub_10001AA44(v111, v112);
      v63 = v98;
      ((void (*)(uint64_t, uint64_t))v106)(v60, v107);
      v64 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v65 = dispatch thunk of CustomStringConvertible.description.getter(v20, v64);
      v67 = v66;
      v108(v63, v20);
      v109 = sub_100016940(v65, v67, &v110);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v109, &v110, v61 + 14, v61 + 22);
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v111);
      _os_log_impl((void *)&_mh_execute_header, v58, v59, "No notify when found record for beacon %{private,mask.hash}s.", (uint8_t *)v61, 0x16u);
      swift_arrayDestroy(v62, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v62, -1, -1);
      swift_slowDealloc(v61, -1, -1);
    }
    else
    {
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v111);
    }

    v86 = sub_100215AC8();
    v87 = swift_allocError(&type metadata for NotifyWhenFoundManager.NotifyWhenFoundError, v86, 0, 0);
    *v88 = 0;
    v104();
    swift_errorRelease(v87);
  }
  else
  {
    v68 = v97;
    sub_1000126EC((uint64_t)v13, v97, type metadata accessor for NotifyWhenFoundRecord);
    v69 = v94;
    sub_10005972C(v68, v94, type metadata accessor for NotifyWhenFoundRecord);
    v70 = *(unsigned __int8 *)(v55 + 80);
    v71 = (v70 + 16) & ~v70;
    v72 = (v93 + v71 + 7) & 0xFFFFFFFFFFFFFFF8;
    v73 = (v72 + 23) & 0xFFFFFFFFFFFFFFF8;
    v74 = swift_allocObject(&unk_10105F8A8, v73 + 8, v70 | 7);
    sub_1000126EC(v69, v74 + v71, type metadata accessor for NotifyWhenFoundRecord);
    v75 = (void (**)(void))(v74 + v72);
    v76 = v105;
    *v75 = v104;
    v75[1] = v76;
    *(_QWORD *)(v74 + v73) = v50;
    swift_retain();
    v77 = swift_retain();
    v78 = static os_log_type_t.default.getter(v77);
    if (qword_1010EA258 != -1)
      swift_once(&qword_1010EA258, sub_100B5D9CC);
    v79 = qword_1011B7D38;
    v80 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v81 = swift_allocObject(v80, 72, 7);
    *(_OWORD *)(v81 + 16) = xmmword_100E22B00;
    v82 = v95;
    sub_10005972C(v68, v95, type metadata accessor for NotifyWhenFoundRecord);
    v83 = String.init<A>(describing:)(v82, v54);
    v85 = v84;
    *(_QWORD *)(v81 + 56) = &type metadata for String;
    *(_QWORD *)(v81 + 64) = sub_10001AA00();
    *(_QWORD *)(v81 + 32) = v83;
    *(_QWORD *)(v81 + 40) = v85;
    os_log(_:dso:log:_:_:)(v78, &_mh_execute_header, v79, "Attempting to remove: %@", 24, 2, v81);
    swift_bridgeObjectRelease();
    swift_retain();
    sub_1008631E4(v68, v51, (void (*)(uint64_t))sub_100215B10, v74);
    swift_release_n(v74, 2);
    sub_1000126B0(v68, type metadata accessor for NotifyWhenFoundRecord);
  }
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v113);
}

void sub_100212190(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  __n128 v20;
  int64_t v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  int64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v42 = a2;
  v3 = sub_10001A9A8((uint64_t *)&unk_1010F47C0);
  __chkstk_darwin(v3);
  v5 = (char *)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = type metadata accessor for OwnedBeaconRecord(0);
  v43 = *(_QWORD *)(v41 - 8);
  v6 = __chkstk_darwin(v41);
  v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v36 = (uint64_t)&v34 - v8;
  v9 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v13);
  v15 = (char *)&v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(_QWORD *)(a1 + 56);
  v39 = a1 + 56;
  v17 = 1 << *(_BYTE *)(a1 + 32);
  v18 = -1;
  if (v17 < 64)
    v18 = ~(-1 << v17);
  v19 = v18 & v16;
  v40 = (unint64_t)(v17 + 63) >> 6;
  v20 = swift_bridgeObjectRetain(a1);
  v21 = 0;
  v38 = _swiftEmptyArrayStorage;
  while (1)
  {
    if (v19)
    {
      v22 = __clz(__rbit64(v19));
      v19 &= v19 - 1;
      v23 = v22 | (v21 << 6);
      goto LABEL_22;
    }
    v24 = v21 + 1;
    if (__OFADD__(v21, 1))
    {
      __break(1u);
      goto LABEL_33;
    }
    if (v24 >= v40)
      goto LABEL_30;
    v25 = *(_QWORD *)(v39 + 8 * v24);
    ++v21;
    if (!v25)
    {
      v21 = v24 + 1;
      if (v24 + 1 >= v40)
        goto LABEL_30;
      v25 = *(_QWORD *)(v39 + 8 * v21);
      if (!v25)
      {
        v21 = v24 + 2;
        if (v24 + 2 >= v40)
          goto LABEL_30;
        v25 = *(_QWORD *)(v39 + 8 * v21);
        if (!v25)
        {
          v21 = v24 + 3;
          if (v24 + 3 >= v40)
            goto LABEL_30;
          v25 = *(_QWORD *)(v39 + 8 * v21);
          if (!v25)
            break;
        }
      }
    }
LABEL_21:
    v19 = (v25 - 1) & v25;
    v23 = __clz(__rbit64(v25)) + (v21 << 6);
LABEL_22:
    (*(void (**)(char *, unint64_t, uint64_t, __n128))(v10 + 16))(v15, *(_QWORD *)(a1 + 48) + *(_QWORD *)(v10 + 72) * v23, v9, v20);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v15, 0, 1, v9);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v15, 1, v9) == 1)
      goto LABEL_31;
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v15, v9);
    sub_10080B950((uint64_t)v12, (uint64_t)v5);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v43 + 48))(v5, 1, v41) == 1)
    {
      sub_100004048((uint64_t)v5, (uint64_t *)&unk_1010F47C0);
    }
    else
    {
      v27 = v36;
      sub_1000126EC((uint64_t)v5, v36, type metadata accessor for OwnedBeaconRecord);
      sub_1000126EC(v27, v37, type metadata accessor for OwnedBeaconRecord);
      if ((swift_isUniquelyReferenced_nonNull_native(v38) & 1) == 0)
        v38 = (_QWORD *)sub_1007C8520(0, v38[2] + 1, 1, (unint64_t)v38);
      v29 = v38[2];
      v28 = v38[3];
      v30 = v29 + 1;
      if (v29 >= v28 >> 1)
      {
        v35 = v29 + 1;
        v33 = (_QWORD *)sub_1007C8520(v28 > 1, v29 + 1, 1, (unint64_t)v38);
        v30 = v35;
        v38 = v33;
      }
      v31 = v37;
      v32 = v38;
      v38[2] = v30;
      sub_1000126EC(v31, (uint64_t)v32+ ((*(unsigned __int8 *)(v43 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v43 + 80))+ *(_QWORD *)(v43 + 72) * v29, type metadata accessor for OwnedBeaconRecord);
    }
  }
  v26 = v24 + 4;
  if (v26 >= v40)
  {
LABEL_30:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v10 + 56))(v15, 1, 1, v9, v20);
LABEL_31:
    swift_release();
    return;
  }
  v25 = *(_QWORD *)(v39 + 8 * v26);
  if (v25)
  {
    v21 = v26;
    goto LABEL_21;
  }
  while (1)
  {
    v21 = v26 + 1;
    if (__OFADD__(v26, 1))
      break;
    if (v21 >= v40)
      goto LABEL_30;
    v25 = *(_QWORD *)(v39 + 8 * v21);
    ++v26;
    if (v25)
      goto LABEL_21;
  }
LABEL_33:
  __break(1u);
}

_QWORD *sub_1002125D8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t found;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD v34[2];
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v45 = type metadata accessor for UUID(0);
  v44 = *(_QWORD *)(v45 - 8);
  __chkstk_darwin(v45);
  v6 = (char *)v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10001A9A8(&qword_1010F33A8);
  __chkstk_darwin(v7);
  v9 = (char *)v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  found = type metadata accessor for NotifyWhenFoundRecord(0);
  v11 = *(_QWORD *)(found - 8);
  __chkstk_darwin(found);
  v41 = (uint64_t)v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_10001A9A8((uint64_t *)&unk_1011093F0);
  v39 = *(_QWORD *)(v13 - 8);
  v40 = v13;
  v14 = __chkstk_darwin(v13);
  v43 = (uint64_t)v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v14);
  v38 = (uint64_t)v34 - v17;
  __chkstk_darwin(v16);
  v37 = (uint64_t)v34 - v18;
  v19 = *(_QWORD *)(a1 + 16);
  if (!v19)
    return _swiftEmptyArrayStorage;
  v34[0] = a1;
  v34[1] = v2;
  v20 = (_QWORD *)(a1 + 32);
  v42 = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain(a1);
  v21 = _swiftEmptyArrayStorage;
  v35 = v11;
  v36 = v6;
  do
  {
    v22 = v20[3];
    v23 = v20[4];
    sub_10001AA44(v20, v22);
    (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v23 + 8) + 8) + 32))(v22);
    v24 = sub_10088AE54((uint64_t)v6);
    if (v24[2])
    {
      sub_10005972C((uint64_t)v24 + ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80)), (uint64_t)v9, type metadata accessor for NotifyWhenFoundRecord);
      v25 = 0;
    }
    else
    {
      v25 = 1;
    }
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56))(v9, v25, 1, found);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v44 + 8))(v6, v45);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, found) == 1)
    {
      sub_100004048((uint64_t)v9, &qword_1010F33A8);
    }
    else
    {
      v26 = found;
      v27 = v41;
      sub_1000126EC((uint64_t)v9, v41, type metadata accessor for NotifyWhenFoundRecord);
      v28 = v38;
      v29 = v38 + *(int *)(v40 + 48);
      sub_100030784((uint64_t)v20, v38);
      sub_1000126EC(v27, v29, type metadata accessor for NotifyWhenFoundRecord);
      v30 = v37;
      sub_100005CF0(v28, v37, (uint64_t *)&unk_1011093F0);
      sub_100005CF0(v30, v43, (uint64_t *)&unk_1011093F0);
      if ((swift_isUniquelyReferenced_nonNull_native(v21) & 1) == 0)
        v21 = (_QWORD *)sub_1007C8D44(0, v21[2] + 1, 1, (unint64_t)v21);
      v32 = v21[2];
      v31 = v21[3];
      found = v26;
      if (v32 >= v31 >> 1)
        v21 = (_QWORD *)sub_1007C8D44(v31 > 1, v32 + 1, 1, (unint64_t)v21);
      v11 = v35;
      v21[2] = v32 + 1;
      sub_100005CF0(v43, (uint64_t)v21+ ((*(unsigned __int8 *)(v39 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v39 + 80))+ *(_QWORD *)(v39 + 72) * v32, (uint64_t *)&unk_1011093F0);
      v6 = v36;
    }
    v20 += 5;
    --v19;
  }
  while (v19);
  swift_bridgeObjectRelease();
  return v21;
}

_QWORD *sub_100212994(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  _QWORD *result;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  char v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;

  v39 = a2;
  v4 = sub_10001A9A8((uint64_t *)&unk_1010EA690);
  __chkstk_darwin(v4);
  v38 = (uint64_t)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = type metadata accessor for OwnedBeaconRecord(0);
  v6 = __chkstk_darwin(v37);
  v36 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v34 - v9;
  result = _swiftEmptyArrayStorage;
  v42 = _swiftEmptyArrayStorage;
  v12 = *(_QWORD *)(a1 + 16);
  if (v12)
  {
    v40 = v2;
    v13 = _swiftEmptyArrayStorage;
    v34 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
    v14 = a1 + v34;
    v35 = *(_QWORD *)(v8 + 72);
    do
    {
      sub_10005972C(v14, (uint64_t)v10, type metadata accessor for OwnedBeaconRecord);
      v16 = *(int *)(v37 + 20);
      if (qword_1010E9CF0 != -1)
        swift_once(&qword_1010E9CF0, sub_10058CADC);
      v17 = (uint64_t)v10;
      v18 = (uint64_t)&v10[v16];
      v19 = qword_1011B7160;
      v20 = objc_autoreleasePoolPush();
      v21 = sub_10001A9A8(&qword_1010F7770);
      v22 = v40;
      OS_dispatch_queue.sync<A>(execute:)(sub_10007CAD4, v19, v21);
      v40 = v22;
      v23 = v41;
      if (*(_QWORD *)(v41 + 16) && (v24 = sub_100003FB0(v18), (v25 & 1) != 0))
      {
        v26 = *(_QWORD *)(*(_QWORD *)(v23 + 56) + 8 * v24);
        swift_bridgeObjectRetain(v26);
        swift_bridgeObjectRelease();
        v27 = sub_100508D98(v26);
        swift_bridgeObjectRelease();
        sub_10088FD00((uint64_t)v27);
        v29 = v28;
        swift_release();
      }
      else
      {
        swift_bridgeObjectRelease();
        v29 = _swiftEmptyArrayStorage;
      }
      objc_autoreleasePoolPop(v20);
      v30 = v38;
      v31 = sub_10082B1AC(v38, v18, (uint64_t)v29, 1);
      swift_bridgeObjectRelease();
      sub_100004048(v30, (uint64_t *)&unk_1010EA690);
      v10 = (char *)v17;
      if ((v31 & 1) != 0)
      {
        sub_1000126B0(v17, type metadata accessor for OwnedBeaconRecord);
        v15 = v35;
      }
      else
      {
        sub_1000126EC(v17, v36, type metadata accessor for OwnedBeaconRecord);
        if ((swift_isUniquelyReferenced_nonNull_native(v13) & 1) == 0)
          sub_10009A680(0, v13[2] + 1, 1);
        v13 = v42;
        v33 = v42[2];
        v32 = v42[3];
        if (v33 >= v32 >> 1)
        {
          sub_10009A680(v32 > 1, v33 + 1, 1);
          v13 = v42;
        }
        v13[2] = v33 + 1;
        v15 = v35;
        sub_1000126EC(v36, (uint64_t)v13 + v34 + v33 * v35, type metadata accessor for OwnedBeaconRecord);
      }
      v14 += v15;
      --v12;
    }
    while (v12);
    return v42;
  }
  return result;
}

uint64_t sub_100212CC4(uint64_t a1, _QWORD *a2, uint64_t a3, void (**a4)(_QWORD, _QWORD))
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(char *, uint64_t, uint64_t);
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  void (*v39)(char *, uint64_t);
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  NSObject *v50;
  os_log_type_t v51;
  uint8_t *v52;
  unint64_t v53;
  uint64_t v54;
  _BYTE *v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  _QWORD *v64;
  void (**v65)(uint64_t);
  uint64_t v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  void (**v71)(_QWORD, _QWORD);
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t found;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  __int128 v85;
  uint64_t v86;
  uint64_t v87;

  v8 = sub_10001A9A8(&qword_1010F46C0);
  __chkstk_darwin(v8);
  v77 = (char *)&v67 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10001A9A8(&qword_1010F33A8);
  __chkstk_darwin(v10);
  v80 = (uint64_t)&v67 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  found = type metadata accessor for NotifyWhenFoundRecord(0);
  v81 = *(_QWORD *)(found - 8);
  v12 = __chkstk_darwin(found);
  v74 = v13;
  v75 = (uint64_t)&v67 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v76 = (uint64_t)&v67 - v14;
  v15 = type metadata accessor for UUID(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = __chkstk_darwin(v15);
  v19 = (char *)&v67 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v21 = (char *)&v67 - v20;
  v22 = swift_allocObject(&unk_10105F9C0, 24, 7);
  *(_QWORD *)(v22 + 16) = a4;
  _Block_copy(a4);
  if (qword_1010E9AA0 != -1)
    swift_once(&qword_1010E9AA0, sub_100201450);
  v23 = type metadata accessor for Logger(0);
  v24 = sub_10001A9E8(v23, (uint64_t)qword_1011B6C18);
  v82 = a2;
  sub_100030784((uint64_t)a2, (uint64_t)&v85);
  v25 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 16);
  v79 = a1;
  v26 = v25(v21, a1, v15);
  v73 = v24;
  v27 = Logger.logObject.getter(v26);
  v28 = static os_log_type_t.default.getter(v27);
  v29 = v28;
  if (os_log_type_enabled(v27, v28))
  {
    v30 = swift_slowAlloc(32, -1);
    v72 = v22;
    v31 = v30;
    v32 = swift_slowAlloc(64, -1);
    v69 = v32;
    *(_DWORD *)v31 = 141558531;
    v83 = 1752392040;
    v84 = v32;
    v70 = a3;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v83, &v84, v31 + 4, v31 + 12);
    *(_WORD *)(v31 + 12) = 2081;
    v67 = v31 + 14;
    v68 = v29;
    v34 = v86;
    v33 = v87;
    sub_10001AA44(&v85, v86);
    (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v33 + 8) + 8) + 32))(v34);
    v35 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v36 = dispatch thunk of CustomStringConvertible.description.getter(v15, v35);
    v71 = a4;
    v38 = v37;
    v39 = *(void (**)(char *, uint64_t))(v16 + 8);
    v39(v19, v15);
    v83 = sub_100016940(v36, v38, &v84);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v83, &v84, v67, v31 + 22);
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v85);
    *(_WORD *)(v31 + 22) = 2082;
    v40 = dispatch thunk of CustomStringConvertible.description.getter(v15, v35);
    v83 = sub_100016940(v40, v41, &v84);
    a3 = v70;
    a4 = v71;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v83, &v84, v31 + 24, v31 + 32);
    swift_bridgeObjectRelease();
    v39(v21, v15);
    _os_log_impl((void *)&_mh_execute_header, v27, (os_log_type_t)v68, "enableNotifyWhenFound for %{private,mask.hash}s, commandId %{public}s", (uint8_t *)v31, 0x20u);
    v42 = v69;
    swift_arrayDestroy(v69, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v42, -1, -1);
    v43 = v31;
    v22 = v72;
    swift_slowDealloc(v43, -1, -1);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v85);
    v39 = *(void (**)(char *, uint64_t))(v16 + 8);
    v39(v21, v15);
  }

  v44 = v82;
  v45 = v82[3];
  v46 = v82[4];
  sub_10001AA44(v82, v45);
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v46 + 8) + 8) + 32))(v45);
  v47 = v80;
  sub_1002023FC(v79, (uint64_t)v19, v80);
  v39(v19, v15);
  v48 = v81;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v81 + 48))(v47, 1, found) == 1)
  {
    v49 = sub_100004048(v47, &qword_1010F33A8);
    v50 = Logger.logObject.getter(v49);
    v51 = static os_log_type_t.error.getter(v50);
    if (os_log_type_enabled(v50, v51))
    {
      v52 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v52 = 0;
      _os_log_impl((void *)&_mh_execute_header, v50, v51, "Failed to save new notify when found record.", v52, 2u);
      swift_slowDealloc(v52, -1, -1);
    }

    v53 = sub_100215AC8();
    v54 = swift_allocError(&type metadata for NotifyWhenFoundManager.NotifyWhenFoundError, v53, 0, 0);
    *v55 = 2;
    v56 = (void *)_convertErrorToNSError(_:)(v54);
    ((void (**)(_QWORD, void *))a4)[2](a4, v56);

    swift_errorRelease(v54);
  }
  else
  {
    v57 = v76;
    sub_1000126EC(v47, v76, type metadata accessor for NotifyWhenFoundRecord);
    v58 = type metadata accessor for TaskPriority(0);
    v59 = (uint64_t)v77;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v58 - 8) + 56))(v77, 1, 1, v58);
    sub_100030784((uint64_t)v44, (uint64_t)&v85);
    v60 = v75;
    sub_10005972C(v57, v75, type metadata accessor for NotifyWhenFoundRecord);
    v61 = *(unsigned __int8 *)(v48 + 80);
    v62 = (v61 + 80) & ~v61;
    v63 = (v74 + v62 + 7) & 0xFFFFFFFFFFFFFFF8;
    v64 = (_QWORD *)swift_allocObject(&unk_10105F9E8, v63 + 16, v61 | 7);
    v64[2] = 0;
    v64[3] = 0;
    v64[4] = a3;
    sub_10000F9FC(&v85, (uint64_t)(v64 + 5));
    sub_1000126EC(v60, (uint64_t)v64 + v62, type metadata accessor for NotifyWhenFoundRecord);
    v65 = (void (**)(uint64_t))((char *)v64 + v63);
    *v65 = sub_10001D1F0;
    v65[1] = (void (*)(uint64_t))v22;
    swift_retain();
    swift_retain();
    sub_100691AC0(v59, (uint64_t)&unk_1010F33D0, (uint64_t)v64);
    swift_release();
    sub_1000126B0(v57, type metadata accessor for NotifyWhenFoundRecord);
  }
  return swift_release();
}

uint64_t sub_100213344(void (*a1)(char *, uint64_t), uint64_t a2, uint64_t a3, void (**a4)(const void *, void *))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t found;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  int v40;
  _BOOL4 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char *v47;
  void (*v48)(char *, uint64_t);
  uint64_t v49;
  unint64_t v50;
  os_log_t v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(char *, uint64_t);
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  char *v62;
  unint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  NSObject *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  void (*v92)(char *, uint64_t);
  void (**v93)(const void *, void *);
  unint64_t v94;
  uint64_t v95;
  _BYTE *v96;
  void *v97;
  os_log_t v99;
  int v100;
  uint64_t v101;
  void (**v102)(const void *, void *);
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  void (*v109)(char *, uint64_t, uint64_t);
  uint64_t v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  void (*v121)(char *, uint64_t);
  uint64_t v122;
  uint64_t v123;
  __int128 v124;
  uint64_t v125;
  uint64_t v126;

  v121 = a1;
  v122 = a3;
  v116 = a2;
  v5 = sub_10001A9A8(&qword_1010F46C0);
  __chkstk_darwin(v5);
  v107 = (char *)&v99 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10001A9A8((uint64_t *)&unk_1011093F0);
  v112 = *(_QWORD *)(v7 - 8);
  v113 = v7;
  __chkstk_darwin(v7);
  v120 = (uint64_t)&v99 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10001A9A8(&qword_1010F33A8);
  __chkstk_darwin(v9);
  v11 = (char *)&v99 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  found = type metadata accessor for NotifyWhenFoundRecord(0);
  v118 = *(_QWORD *)(found - 8);
  v119 = found;
  __chkstk_darwin(found);
  v117 = (uint64_t)&v99 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v114 = type metadata accessor for OwnedBeaconRecord(0);
  v105 = *(_QWORD *)(v114 - 8);
  __chkstk_darwin(v114);
  v15 = (char *)&v99 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for UUID(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = __chkstk_darwin(v16);
  v20 = (char *)&v99 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __chkstk_darwin(v18);
  v104 = (char *)&v99 - v22;
  v23 = __chkstk_darwin(v21);
  v25 = (char *)&v99 - v24;
  v26 = __chkstk_darwin(v23);
  v28 = (char *)&v99 - v27;
  v106 = v29;
  __chkstk_darwin(v26);
  v31 = (char *)&v99 - v30;
  v32 = swift_allocObject(&unk_10105FA10, 24, 7);
  *(_QWORD *)(v32 + 16) = a4;
  v33 = v116 + *(int *)(type metadata accessor for OwnedBeaconGroup(0) + 24);
  v110 = v17;
  v34 = *(void (**)(char *, uint64_t, uint64_t))(v17 + 16);
  v34(v31, v33, v16);
  v102 = a4;
  _Block_copy(a4);
  if (qword_1010E9AA0 != -1)
    swift_once(&qword_1010E9AA0, sub_100201450);
  v35 = type metadata accessor for Logger(0);
  v36 = sub_10001A9E8(v35, (uint64_t)qword_1011B6C18);
  v111 = v31;
  v34(v28, (uint64_t)v31, v16);
  v37 = ((uint64_t (*)(char *, void (*)(char *, uint64_t), uint64_t))v34)(v25, v121, v16);
  v103 = v36;
  v38 = Logger.logObject.getter(v37);
  v39 = static os_log_type_t.default.getter(v38);
  v40 = v39;
  v41 = os_log_type_enabled(v38, v39);
  v115 = v16;
  v108 = v32;
  v109 = v34;
  if (v41)
  {
    v42 = swift_slowAlloc(32, -1);
    v43 = swift_slowAlloc(64, -1);
    v101 = v43;
    *(_DWORD *)v42 = 141558531;
    v123 = 1752392040;
    *(_QWORD *)&v124 = v43;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v123, &v124, v42 + 4, v42 + 12);
    *(_WORD *)(v42 + 12) = 2081;
    v121 = (void (*)(char *, uint64_t))(v42 + 14);
    v44 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v100 = v40;
    v45 = dispatch thunk of CustomStringConvertible.description.getter(v115, v44);
    v123 = sub_100016940(v45, v46, (uint64_t *)&v124);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v123, &v124, v121, v42 + 22);
    swift_bridgeObjectRelease();
    v47 = v28;
    v48 = *(void (**)(char *, uint64_t))(v110 + 8);
    v48(v47, v115);
    *(_WORD *)(v42 + 22) = 2082;
    v99 = v38;
    v49 = dispatch thunk of CustomStringConvertible.description.getter(v115, v44);
    v123 = sub_100016940(v49, v50, (uint64_t *)&v124);
    v34 = v109;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v123, &v124, v42 + 24, v42 + 32);
    swift_bridgeObjectRelease();
    v121 = v48;
    v48(v25, v115);
    v51 = v99;
    _os_log_impl((void *)&_mh_execute_header, v99, (os_log_type_t)v100, "enableNotifyWhenFound for group %{private,mask.hash}s, commandId %{public}s", (uint8_t *)v42, 0x20u);
    v52 = v101;
    swift_arrayDestroy(v101, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v52, -1, -1);
    v53 = v42;
    v16 = v115;
    swift_slowDealloc(v53, -1, -1);

  }
  else
  {
    v54 = *(void (**)(char *, uint64_t))(v110 + 8);
    v54(v28, v16);
    v121 = v54;
    v54(v25, v16);

  }
  sub_10036AC6C();
  v56 = v55;
  v57 = v122;
  swift_retain();
  sub_100212190(v56, v57);
  v59 = v58;
  swift_bridgeObjectRelease();
  swift_release();
  swift_retain();
  v60 = (char *)sub_100212994(v59, v57);
  swift_bridgeObjectRelease();
  swift_release();
  v61 = *((_QWORD *)v60 + 2);
  v62 = v111;
  if (v61)
  {
    v63 = (*(unsigned __int8 *)(v105 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v105 + 80);
    v104 = v60;
    v64 = (uint64_t)&v60[v63];
    v116 = *(_QWORD *)(v105 + 72);
    v65 = _swiftEmptyArrayStorage;
    v66 = v114;
    do
    {
      v67 = sub_10005972C(v64, (uint64_t)v15, type metadata accessor for OwnedBeaconRecord);
      UUID.init()(v67);
      sub_1002023FC((uint64_t)v20, (uint64_t)&v15[*(int *)(v66 + 20)], (uint64_t)v11);
      v121(v20, v16);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v118 + 48))(v11, 1, v119) == 1)
      {
        sub_1000126B0((uint64_t)v15, type metadata accessor for OwnedBeaconRecord);
        sub_100004048((uint64_t)v11, &qword_1010F33A8);
      }
      else
      {
        v68 = v117;
        sub_1000126EC((uint64_t)v11, v117, type metadata accessor for NotifyWhenFoundRecord);
        v125 = v66;
        v126 = sub_100006204(&qword_1010ECCB8, type metadata accessor for OwnedBeaconRecord, (uint64_t)&unk_100E57B60);
        v69 = sub_100018F08(&v124);
        sub_10005972C((uint64_t)v15, (uint64_t)v69, type metadata accessor for OwnedBeaconRecord);
        v70 = v120 + *(int *)(v113 + 48);
        sub_10000F9FC(&v124, v120);
        sub_10005972C(v68, v70, type metadata accessor for NotifyWhenFoundRecord);
        if ((swift_isUniquelyReferenced_nonNull_native(v65) & 1) == 0)
          v65 = (_QWORD *)sub_1007C8D44(0, v65[2] + 1, 1, (unint64_t)v65);
        v72 = v65[2];
        v71 = v65[3];
        if (v72 >= v71 >> 1)
          v65 = (_QWORD *)sub_1007C8D44(v71 > 1, v72 + 1, 1, (unint64_t)v65);
        v65[2] = v72 + 1;
        sub_100005CF0(v120, (uint64_t)v65+ ((*(unsigned __int8 *)(v112 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v112 + 80))+ *(_QWORD *)(v112 + 72) * v72, (uint64_t *)&unk_1011093F0);
        sub_1000126B0(v117, type metadata accessor for NotifyWhenFoundRecord);
        sub_1000126B0((uint64_t)v15, type metadata accessor for OwnedBeaconRecord);
        v66 = v114;
        v16 = v115;
      }
      v64 += v116;
      --v61;
    }
    while (v61);
    swift_bridgeObjectRelease();
    v73 = type metadata accessor for TaskPriority(0);
    v74 = (uint64_t)v107;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v73 - 8) + 56))(v107, 1, 1, v73);
    v75 = v111;
    v109(v20, (uint64_t)v111, v16);
    v76 = v110;
    v77 = *(unsigned __int8 *)(v110 + 80);
    v78 = (v77 + 48) & ~v77;
    v79 = (v106 + v78 + 7) & 0xFFFFFFFFFFFFFFF8;
    v80 = (char *)swift_allocObject(&unk_10105FA38, v79 + 16, v77 | 7);
    *((_QWORD *)v80 + 2) = 0;
    *((_QWORD *)v80 + 3) = 0;
    *((_QWORD *)v80 + 4) = v122;
    *((_QWORD *)v80 + 5) = v65;
    (*(void (**)(char *, char *, uint64_t))(v76 + 32))(&v80[v78], v20, v16);
    v81 = &v80[v79];
    v82 = v108;
    *(_QWORD *)v81 = sub_10001D1EC;
    *((_QWORD *)v81 + 1) = v82;
    swift_retain();
    swift_retain();
    sub_100691AC0(v74, (uint64_t)&unk_1010F33E8, (uint64_t)v80);
    swift_release();
    v121(v75, v16);
  }
  else
  {
    swift_bridgeObjectRelease();
    v83 = v104;
    v84 = ((uint64_t (*)(char *, char *, uint64_t))v34)(v104, v62, v16);
    v85 = Logger.logObject.getter(v84);
    v86 = static os_log_type_t.error.getter(v85);
    if (os_log_type_enabled(v85, (os_log_type_t)v86))
    {
      v87 = swift_slowAlloc(22, -1);
      v88 = swift_slowAlloc(32, -1);
      *(_DWORD *)v87 = 141558275;
      v123 = 1752392040;
      *(_QWORD *)&v124 = v88;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v123, &v124, v87 + 4, v87 + 12);
      *(_WORD *)(v87 + 12) = 2081;
      v89 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v90 = dispatch thunk of CustomStringConvertible.description.getter(v16, v89);
      v123 = sub_100016940(v90, v91, (uint64_t *)&v124);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v123, &v124, v87 + 14, v87 + 22);
      swift_bridgeObjectRelease();
      v92 = v121;
      v121(v83, v16);
      _os_log_impl((void *)&_mh_execute_header, v85, (os_log_type_t)v86, "No eligible member beacon to enable notify when found for group %{private,mask.hash}s", (uint8_t *)v87, 0x16u);
      swift_arrayDestroy(v88, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v88, -1, -1);
      swift_slowDealloc(v87, -1, -1);
    }
    else
    {
      v92 = v121;
      v121(v83, v16);
    }

    v93 = v102;
    v94 = sub_100215AC8();
    v95 = swift_allocError(&type metadata for NotifyWhenFoundManager.NotifyWhenFoundError, v94, 0, 0);
    *v96 = 0;
    v97 = (void *)_convertErrorToNSError(_:)(v95);
    v93[2](v93, v97);

    swift_errorRelease(v95);
    v92(v62, v16);
  }
  return swift_release();
}

void sub_100213DC8(void (*a1)(char *, uint64_t), uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  void (**v17)(const void *, void *);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  _BOOL4 v26;
  void (**v27)(const void *, void *);
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  void (**v34)(const void *, void *);
  unint64_t v35;
  uint64_t v36;
  _BYTE *v37;
  void *v38;
  uint64_t v39;
  char *v40;
  void (**v41)(const void *, void *);
  uint64_t v42;
  uint64_t v43;
  void (*v44)(char *, uint64_t);
  __int128 v45;
  uint64_t v46;
  uint64_t v47[5];

  v44 = a1;
  v7 = type metadata accessor for UUID(0);
  v42 = *(_QWORD *)(v7 - 8);
  v43 = v7;
  __chkstk_darwin(v7);
  v9 = (char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10001A9A8((uint64_t *)&unk_1010FF7F0);
  __chkstk_darwin(v10);
  v12 = (char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for OwnedBeaconGroup(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v39 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  _Block_copy(a4);
  _Block_copy(a4);
  sub_10080B648(a2, (uint64_t)&v45);
  if (v46)
  {
    sub_10000F9FC(&v45, (uint64_t)v47);
    _Block_copy(a4);
    sub_100212CC4((uint64_t)v44, v47, a3, (void (**)(_QWORD, _QWORD))a4);
    _Block_release(a4);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v47);
    _Block_release(a4);
    v17 = (void (**)(const void *, void *))a4;
  }
  else
  {
    v40 = v9;
    v41 = (void (**)(const void *, void *))a4;
    v18 = v43;
    sub_100004048((uint64_t)&v45, (uint64_t *)&unk_1010EE310);
    sub_10081EDA8(a2, (uint64_t)v12);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
    {
      sub_100004048((uint64_t)v12, (uint64_t *)&unk_1010FF7F0);
      if (qword_1010E9AA0 != -1)
        swift_once(&qword_1010E9AA0, sub_100201450);
      v19 = type metadata accessor for Logger(0);
      sub_10001A9E8(v19, (uint64_t)qword_1011B6C18);
      v20 = v42;
      v21 = v40;
      v22 = v18;
      v23 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v42 + 16))(v40, a2, v18);
      v24 = Logger.logObject.getter(v23);
      v25 = static os_log_type_t.error.getter(v24);
      v26 = os_log_type_enabled(v24, v25);
      v27 = v41;
      if (v26)
      {
        v28 = swift_slowAlloc(22, -1);
        v29 = v21;
        v30 = swift_slowAlloc(32, -1);
        v47[0] = v30;
        *(_DWORD *)v28 = 141558275;
        *(_QWORD *)&v45 = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, (char *)&v45 + 8, v28 + 4, v28 + 12);
        *(_WORD *)(v28 + 12) = 2081;
        v31 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v32 = dispatch thunk of CustomStringConvertible.description.getter(v22, v31);
        *(_QWORD *)&v45 = sub_100016940(v32, v33, v47);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, (char *)&v45 + 8, v28 + 14, v28 + 22);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v42 + 8))(v29, v22);
        _os_log_impl((void *)&_mh_execute_header, v24, v25, "Beacon/group does not exist for given UUID %{private,mask.hash}s", (uint8_t *)v28, 0x16u);
        swift_arrayDestroy(v30, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v30, -1, -1);
        swift_slowDealloc(v28, -1, -1);
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v20 + 8))(v21, v18);
      }

      v35 = sub_100215AC8();
      v36 = swift_allocError(&type metadata for NotifyWhenFoundManager.NotifyWhenFoundError, v35, 0, 0);
      *v37 = 0;
      v38 = (void *)_convertErrorToNSError(_:)(v36);
      v27[2](v27, v38);

      swift_errorRelease(v36);
      _Block_release(v27);
      v17 = v27;
    }
    else
    {
      sub_1000126EC((uint64_t)v12, (uint64_t)v16, type metadata accessor for OwnedBeaconGroup);
      v34 = v41;
      _Block_copy(v41);
      sub_100213344(v44, (uint64_t)v16, a3, v34);
      _Block_release(v34);
      sub_1000126B0((uint64_t)v16, type metadata accessor for OwnedBeaconGroup);
      _Block_release(v34);
      v17 = v34;
    }
  }
  _Block_release(v17);
}

uint64_t sub_100214208(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v30)(char *, uint64_t, uint64_t);
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  int v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  void (*v46)(char *, uint64_t);
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  os_log_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  NSObject *v64;
  os_log_type_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  void (**v82)(uint64_t);
  void (*v83)(uint64_t);
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  _BYTE *v96;
  uint64_t v97;
  uint64_t v98;
  char *v100;
  int v101;
  os_log_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  dispatch_group_t v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  _QWORD *v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  _QWORD *found;
  void (*v119)(char *, uint64_t);
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  _QWORD v123[3];
  uint64_t v124;
  _QWORD v125[5];

  v117 = a3;
  v9 = sub_10001A9A8(&qword_1010F33A8);
  __chkstk_darwin(v9);
  v11 = (char *)&v100 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  found = (_QWORD *)type metadata accessor for NotifyWhenFoundRecord(0);
  v116 = *(found - 1);
  v12 = __chkstk_darwin(found);
  v108 = (uint64_t)&v100 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v12);
  v107 = (uint64_t)&v100 - v15;
  v106 = v16;
  __chkstk_darwin(v14);
  v110 = (uint64_t)&v100 - v17;
  v18 = type metadata accessor for UUID(0);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = __chkstk_darwin(v18);
  v114 = (char *)&v100 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __chkstk_darwin(v20);
  v112 = (char *)&v100 - v23;
  __chkstk_darwin(v22);
  v25 = (char *)&v100 - v24;
  v26 = swift_allocObject(&unk_10105F970, 32, 7);
  *(_QWORD *)(v26 + 16) = a4;
  *(_QWORD *)(v26 + 24) = a5;
  v120 = v26;
  v115 = type metadata accessor for OwnedBeaconRecord(0);
  v125[3] = v115;
  v125[4] = sub_100006204(&qword_1010ECCB8, type metadata accessor for OwnedBeaconRecord, (uint64_t)&unk_100E57B60);
  v113 = sub_100018F08(v125);
  sub_10005972C(a2, (uint64_t)v113, type metadata accessor for OwnedBeaconRecord);
  v27 = qword_1010E9AA0;
  v111 = a4;
  swift_retain();
  v109 = a5;
  if (v27 != -1)
    swift_once(&qword_1010E9AA0, sub_100201450);
  v28 = type metadata accessor for Logger(0);
  v29 = sub_10001A9E8(v28, (uint64_t)qword_1011B6C18);
  sub_100030784((uint64_t)v125, (uint64_t)v123);
  v30 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v19 + 16);
  v31 = v30(v25, a1, v18);
  v105 = v29;
  v32 = Logger.logObject.getter(v31);
  v33 = static os_log_type_t.default.getter(v32);
  v34 = v33;
  if (os_log_type_enabled(v32, v33))
  {
    v35 = swift_slowAlloc(22, -1);
    v103 = swift_slowAlloc(64, -1);
    v122 = v103;
    *(_DWORD *)v35 = 136315394;
    v119 = (void (*)(char *, uint64_t))(v35 + 4);
    v36 = sub_10001AA44(v123, v124);
    v37 = v115;
    v38 = (char *)v36 + *(int *)(v115 + 20);
    v102 = v32;
    v39 = v112;
    v30(v112, (uint64_t)v38, v18);
    v40 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v104 = v11;
    v41 = v40;
    v42 = dispatch thunk of CustomStringConvertible.description.getter(v18, v40);
    v101 = v34;
    v43 = v42;
    v45 = v44;
    v100 = v25;
    v46 = *(void (**)(char *, uint64_t))(v19 + 8);
    v46(v39, v18);
    v47 = v43;
    v48 = v37;
    v121 = sub_100016940(v47, v45, &v122);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v121, &v122, v119, v35 + 12);
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v123);
    *(_WORD *)(v35 + 12) = 2080;
    v49 = v100;
    v50 = v41;
    v11 = v104;
    v51 = dispatch thunk of CustomStringConvertible.description.getter(v18, v50);
    v121 = sub_100016940(v51, v52, &v122);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v121, &v122, v35 + 14, v35 + 22);
    swift_bridgeObjectRelease();
    v119 = v46;
    v46(v49, v18);
    v53 = v102;
    _os_log_impl((void *)&_mh_execute_header, v102, (os_log_type_t)v101, "disableNotifyWhenFound for %s, commandId %s", (uint8_t *)v35, 0x16u);
    v54 = v103;
    swift_arrayDestroy(v103, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v54, -1, -1);
    swift_slowDealloc(v35, -1, -1);

    v55 = found;
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v123);
    v119 = *(void (**)(char *, uint64_t))(v19 + 8);
    v119(v25, v18);

    v55 = found;
    v48 = v115;
  }
  v56 = (uint64_t)v114;
  v57 = v117;
  v58 = *(_QWORD *)(v117 + 16);
  v59 = (char *)v113 + *(int *)(v48 + 20);
  found = v30;
  v30(v114, (uint64_t)v59, v18);
  v60 = sub_10088AE54(v56);
  v61 = v116;
  if (v60[2])
  {
    sub_10005972C((uint64_t)v60 + ((*(unsigned __int8 *)(v116 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v116 + 80)), (uint64_t)v11, type metadata accessor for NotifyWhenFoundRecord);
    v62 = 0;
  }
  else
  {
    v62 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, _QWORD *))(v61 + 56))(v11, v62, 1, v55);
  swift_bridgeObjectRelease();
  v119((char *)v56, v18);
  if ((*(unsigned int (**)(char *, uint64_t, _QWORD *))(v61 + 48))(v11, 1, v55) == 1)
  {
    sub_100004048((uint64_t)v11, &qword_1010F33A8);
    v63 = sub_100030784((uint64_t)v125, (uint64_t)v123);
    v64 = Logger.logObject.getter(v63);
    v65 = static os_log_type_t.default.getter(v64);
    if (os_log_type_enabled(v64, v65))
    {
      v66 = v48;
      v67 = swift_slowAlloc(22, -1);
      v68 = swift_slowAlloc(32, -1);
      *(_DWORD *)v67 = 141558275;
      v121 = 1752392040;
      v122 = v68;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v121, &v122, v67 + 4, v67 + 12);
      *(_WORD *)(v67 + 12) = 2081;
      v69 = (char *)sub_10001AA44(v123, v124) + *(int *)(v66 + 20);
      v70 = v112;
      ((void (*)(char *, char *, uint64_t))found)(v112, v69, v18);
      v71 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v72 = dispatch thunk of CustomStringConvertible.description.getter(v18, v71);
      v74 = v73;
      v119(v70, v18);
      v121 = sub_100016940(v72, v74, &v122);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v121, &v122, v67 + 14, v67 + 22);
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v123);
      _os_log_impl((void *)&_mh_execute_header, v64, v65, "No notify when found record for beacon %{private,mask.hash}s.", (uint8_t *)v67, 0x16u);
      swift_arrayDestroy(v68, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v68, -1, -1);
      swift_slowDealloc(v67, -1, -1);
    }
    else
    {
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v123);
    }

    v94 = sub_100215AC8();
    v95 = swift_allocError(&type metadata for NotifyWhenFoundManager.NotifyWhenFoundError, v94, 0, 0);
    *v96 = 0;
    v97 = v111;
    swift_beginAccess(v111 + 16, v123, 1, 0);
    v98 = *(_QWORD *)(v97 + 16);
    *(_QWORD *)(v97 + 16) = v95;
    swift_errorRetain(v95);
    swift_errorRelease(v98);
    dispatch_group_leave(v109);
    swift_errorRelease(v95);
  }
  else
  {
    v75 = v110;
    sub_1000126EC((uint64_t)v11, v110, type metadata accessor for NotifyWhenFoundRecord);
    v76 = v107;
    sub_10005972C(v75, v107, type metadata accessor for NotifyWhenFoundRecord);
    v77 = *(unsigned __int8 *)(v61 + 80);
    v78 = (v77 + 16) & ~v77;
    v79 = (v106 + v78 + 7) & 0xFFFFFFFFFFFFFFF8;
    v80 = (v79 + 23) & 0xFFFFFFFFFFFFFFF8;
    v81 = swift_allocObject(&unk_10105F998, v80 + 8, v77 | 7);
    sub_1000126EC(v76, v81 + v78, type metadata accessor for NotifyWhenFoundRecord);
    v82 = (void (**)(uint64_t))(v81 + v79);
    v83 = (void (*)(uint64_t))v120;
    *v82 = sub_100215CF8;
    v82[1] = v83;
    *(_QWORD *)(v81 + v80) = v57;
    swift_retain();
    v84 = swift_retain();
    v85 = static os_log_type_t.default.getter(v84);
    if (qword_1010EA258 != -1)
      swift_once(&qword_1010EA258, sub_100B5D9CC);
    v86 = qword_1011B7D38;
    v87 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v88 = swift_allocObject(v87, 72, 7);
    *(_OWORD *)(v88 + 16) = xmmword_100E22B00;
    v89 = v108;
    sub_10005972C(v75, v108, type metadata accessor for NotifyWhenFoundRecord);
    v90 = String.init<A>(describing:)(v89, v55);
    v91 = v75;
    v93 = v92;
    *(_QWORD *)(v88 + 56) = &type metadata for String;
    *(_QWORD *)(v88 + 64) = sub_10001AA00();
    *(_QWORD *)(v88 + 32) = v90;
    *(_QWORD *)(v88 + 40) = v93;
    os_log(_:dso:log:_:_:)(v85, &_mh_execute_header, v86, "Attempting to remove: %@", 24, 2, v88);
    swift_bridgeObjectRelease();
    swift_retain();
    sub_1008631E4(v91, v58, (void (*)(uint64_t))sub_100215B10, v81);
    swift_release_n(v81, 2);
    sub_1000126B0(v91, type metadata accessor for NotifyWhenFoundRecord);
  }
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v125);
  return swift_release();
}

uint64_t sub_100214B78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t a1))
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  _BOOL4 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t *v43;
  char *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  NSObject *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  NSObject *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t (**v70)(uint64_t);
  uint64_t (*v71)(uint64_t);
  void *v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  NSObject *v84;
  os_log_type_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  char *v91;
  uint64_t *v92;
  char *v93;
  unint64_t v94;
  uint64_t v95;
  _BYTE *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v106;
  os_log_t v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  int v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  void (*v123)(char *, char *, uint64_t);
  uint64_t *v124;
  uint64_t (*v125)(uint64_t);
  uint64_t v126;
  char *v127;
  char *v128;
  _QWORD v129[3];
  char v130[8];
  uint64_t v131;
  uint64_t aBlock[6];

  v8 = type metadata accessor for DispatchWorkItemFlags(0);
  v120 = *(_QWORD *)(v8 - 8);
  v121 = v8;
  __chkstk_darwin(v8);
  v119 = (char *)&v106 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v118 = type metadata accessor for DispatchQoS(0);
  v117 = *(_QWORD *)(v118 - 8);
  __chkstk_darwin(v118);
  v116 = (char *)&v106 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for OwnedBeaconRecord(0);
  v112 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v13 = (char *)&v106 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for UUID(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = __chkstk_darwin(v14);
  v114 = (char *)&v106 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v16);
  v110 = (char *)&v106 - v19;
  v20 = __chkstk_darwin(v18);
  v128 = (char *)&v106 - v21;
  v22 = __chkstk_darwin(v20);
  v24 = (char *)&v106 - v23;
  v113 = v25;
  __chkstk_darwin(v22);
  v27 = (char *)&v106 - v26;
  v28 = *(int *)(type metadata accessor for OwnedBeaconGroup(0) + 24);
  v122 = a2;
  v29 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 16);
  v29(v27, a2 + v28, v14);
  v30 = qword_1010E9AA0;
  v125 = a4;
  swift_retain();
  if (v30 != -1)
    swift_once(&qword_1010E9AA0, sub_100201450);
  v31 = type metadata accessor for Logger(0);
  v32 = sub_10001A9E8(v31, (uint64_t)qword_1011B6C18);
  v29(v24, (uint64_t)v27, v14);
  v123 = (void (*)(char *, char *, uint64_t))v29;
  v33 = ((uint64_t (*)(char *, uint64_t, uint64_t))v29)(v128, a1, v14);
  v109 = v32;
  v34 = Logger.logObject.getter(v33);
  v35 = static os_log_type_t.default.getter(v34);
  v111 = v35;
  v36 = os_log_type_enabled(v34, v35);
  v126 = v14;
  v127 = v27;
  v115 = v15;
  if (v36)
  {
    v37 = v14;
    v38 = swift_slowAlloc(32, -1);
    v39 = swift_slowAlloc(64, -1);
    v108 = v39;
    *(_DWORD *)v38 = 141558531;
    v131 = 1752392040;
    aBlock[0] = v39;
    v124 = aBlock;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v131, aBlock, v38 + 4, v38 + 12);
    *(_WORD *)(v38 + 12) = 2081;
    v106 = v38 + 14;
    v40 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v107 = v34;
    v41 = dispatch thunk of CustomStringConvertible.description.getter(v37, v40);
    v131 = sub_100016940(v41, v42, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v131, aBlock, v106, v38 + 22);
    swift_bridgeObjectRelease();
    v43 = *(uint64_t **)(v15 + 8);
    ((void (*)(char *, uint64_t))v43)(v24, v37);
    *(_WORD *)(v38 + 22) = 2082;
    v44 = v128;
    v45 = dispatch thunk of CustomStringConvertible.description.getter(v37, v40);
    v131 = sub_100016940(v45, v46, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v131, v124, v38 + 24, v38 + 32);
    swift_bridgeObjectRelease();
    v124 = v43;
    ((void (*)(char *, uint64_t))v43)(v44, v37);
    v34 = v107;
    _os_log_impl((void *)&_mh_execute_header, v107, (os_log_type_t)v111, "disableNotifyWhenFound for %{private,mask.hash}s, commandId %{public}s", (uint8_t *)v38, 0x20u);
    v47 = v108;
    swift_arrayDestroy(v108, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v47, -1, -1);
    v48 = v38;
    v27 = v127;
    swift_slowDealloc(v48, -1, -1);
  }
  else
  {
    v49 = *(uint64_t **)(v15 + 8);
    ((void (*)(char *, uint64_t))v49)(v24, v14);
    v124 = v49;
    ((void (*)(char *, uint64_t))v49)(v128, v14);
  }

  sub_10036AC6C();
  v51 = v50;
  swift_retain();
  sub_100212190(v51, a3);
  v53 = v52;
  swift_bridgeObjectRelease();
  swift_release();
  v128 = v53;
  v54 = *((_QWORD *)v53 + 2);
  if (v54)
  {
    v55 = dispatch_group_create();
    v56 = swift_allocObject(&unk_10105F8F8, 24, 7);
    *(_QWORD *)(v56 + 16) = 0;
    v57 = (uint64_t)&v128[(*(unsigned __int8 *)(v112 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v112 + 80)];
    v58 = *(_QWORD *)(v112 + 72);
    do
    {
      sub_10005972C(v57, (uint64_t)v13, type metadata accessor for OwnedBeaconRecord);
      dispatch_group_enter(v55);
      swift_retain();
      v59 = v55;
      sub_100214208(a1, (uint64_t)v13, a3, v56, v59);

      swift_release();
      sub_1000126B0((uint64_t)v13, type metadata accessor for OwnedBeaconRecord);
      v57 += v58;
      --v54;
    }
    while (v54);
    swift_bridgeObjectRelease();
    v128 = *(char **)(a3 + 40);
    v60 = v114;
    v123(v114, v127, v126);
    v61 = v115;
    v62 = *(unsigned __int8 *)(v115 + 80);
    v63 = (v62 + 16) & ~v62;
    v64 = (v113 + v63 + 7) & 0xFFFFFFFFFFFFFFF8;
    v65 = (v64 + 15) & 0xFFFFFFFFFFFFFFF8;
    v66 = (v65 + 15) & 0xFFFFFFFFFFFFFFF8;
    v67 = swift_allocObject(&unk_10105F920, v66 + 16, v62 | 7);
    v68 = v60;
    v69 = v126;
    (*(void (**)(uint64_t, char *, uint64_t))(v61 + 32))(v67 + v63, v68, v126);
    *(_QWORD *)(v67 + v64) = v56;
    *(_QWORD *)(v67 + v65) = a3;
    v70 = (uint64_t (**)(uint64_t))(v67 + v66);
    v71 = v125;
    *v70 = sub_100215AC0;
    v70[1] = v71;
    aBlock[4] = (uint64_t)sub_100215CC8;
    aBlock[5] = v67;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_100016FB8;
    aBlock[3] = (uint64_t)&unk_10105F938;
    v72 = _Block_copy(aBlock);
    swift_retain();
    swift_retain();
    v73 = swift_retain();
    v74 = v116;
    static DispatchQoS.unspecified.getter(v73);
    v131 = (uint64_t)_swiftEmptyArrayStorage;
    v75 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v76 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v77 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
    v78 = v119;
    v79 = v76;
    v80 = v121;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v131, v79, v77, v121, v75);
    OS_dispatch_group.notify(qos:flags:queue:execute:)(v74, v78, v128, v72);
    _Block_release(v72);

    (*(void (**)(char *, uint64_t))(v120 + 8))(v78, v80);
    (*(void (**)(char *, uint64_t))(v117 + 8))(v74, v118);
    ((void (*)(char *, uint64_t))v124)(v127, v69);
    swift_release();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
    v81 = v110;
    v82 = v126;
    v83 = ((uint64_t (*)(char *, char *, uint64_t))v123)(v110, v27, v126);
    v84 = Logger.logObject.getter(v83);
    v85 = static os_log_type_t.error.getter(v84);
    if (os_log_type_enabled(v84, v85))
    {
      v86 = swift_slowAlloc(22, -1);
      v87 = swift_slowAlloc(32, -1);
      *(_DWORD *)v86 = 141558275;
      v131 = 1752392040;
      aBlock[0] = v87;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v131, aBlock, v86 + 4, v86 + 12);
      *(_WORD *)(v86 + 12) = 2081;
      v88 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v89 = dispatch thunk of CustomStringConvertible.description.getter(v82, v88);
      v131 = sub_100016940(v89, v90, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v131, aBlock, v86 + 14, v86 + 22);
      swift_bridgeObjectRelease();
      v91 = v81;
      v92 = v124;
      ((void (*)(char *, uint64_t))v124)(v91, v82);
      _os_log_impl((void *)&_mh_execute_header, v84, v85, "No eligible member beacon to disable notify when found for group %{private,mask.hash}s", (uint8_t *)v86, 0x16u);
      swift_arrayDestroy(v87, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v87, -1, -1);
      swift_slowDealloc(v86, -1, -1);
    }
    else
    {
      v93 = v81;
      v92 = v124;
      ((void (*)(char *, uint64_t))v124)(v93, v82);
    }

    v94 = sub_100215AC8();
    v95 = swift_allocError(&type metadata for NotifyWhenFoundManager.NotifyWhenFoundError, v94, 0, 0);
    *v96 = 0;
    Transaction.capture()();
    v97 = swift_errorRetain(v95);
    v98 = static os_log_type_t.error.getter(v97);
    if (qword_1010EA2A8 != -1)
      swift_once(&qword_1010EA2A8, sub_100B5DDB4);
    v99 = qword_1011B7D88;
    v100 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v101 = swift_allocObject(v100, 72, 7);
    *(_OWORD *)(v101 + 16) = xmmword_100E22B00;
    swift_getErrorValue(v95, v130, v129);
    v102 = Error.localizedDescription.getter(v129[1], v129[2]);
    v104 = v103;
    *(_QWORD *)(v101 + 56) = &type metadata for String;
    *(_QWORD *)(v101 + 64) = sub_10001AA00();
    *(_QWORD *)(v101 + 32) = v102;
    *(_QWORD *)(v101 + 40) = v104;
    os_log(_:dso:log:_:_:)(v98, &_mh_execute_header, v99, "Disable notify when found for beacon error - %@", 47, 2, v101);
    swift_bridgeObjectRelease();
    swift_errorRelease(v95);
    swift_errorRelease(v95);
    ((void (*)(char *, uint64_t))v92)(v27, v82);
  }
  return swift_release();
}

uint64_t sub_1002155C8(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v40;
  uint64_t v41;
  _BYTE *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD v55[3];
  char v56[8];
  __int128 v57;
  uint64_t v58;
  uint64_t v59[3];
  uint64_t v60;
  uint64_t v61;

  v54 = a1;
  v7 = type metadata accessor for UUID(0);
  v52 = *(_QWORD *)(v7 - 8);
  v53 = v7;
  __chkstk_darwin(v7);
  v9 = (char *)&v51 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10001A9A8((uint64_t *)&unk_1010FF7F0);
  __chkstk_darwin(v10);
  v12 = (char *)&v51 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for OwnedBeaconGroup(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v51 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = a3;
  swift_retain_n(a4, 2);
  v18 = a2;
  sub_10080B648(a2, (uint64_t)&v57);
  if (v58)
  {
    sub_10000F9FC(&v57, (uint64_t)v59);
    v19 = v60;
    v20 = v61;
    v21 = sub_10001AA44(v59, v60);
    sub_1002118C4(v54, (uint64_t)v21, (void (*)(void))sub_100215AC0, a4, v17, v19, v20);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v59);
LABEL_9:
    v38 = (uint64_t)a4;
    return swift_release_n(v38, 2);
  }
  v51 = v9;
  v22 = v53;
  sub_100004048((uint64_t)&v57, (uint64_t *)&unk_1010EE310);
  sub_10081EDA8(v18, (uint64_t)v12);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) != 1)
  {
    sub_1000126EC((uint64_t)v12, (uint64_t)v16, type metadata accessor for OwnedBeaconGroup);
    swift_retain();
    sub_100214B78(v54, (uint64_t)v16, a3, (uint64_t (*)(uint64_t))a4);
    swift_release();
    sub_1000126B0((uint64_t)v16, type metadata accessor for OwnedBeaconGroup);
    goto LABEL_9;
  }
  sub_100004048((uint64_t)v12, (uint64_t *)&unk_1010FF7F0);
  v23 = (uint64_t)a4;
  if (qword_1010E9AA0 != -1)
    swift_once(&qword_1010E9AA0, sub_100201450);
  v24 = type metadata accessor for Logger(0);
  sub_10001A9E8(v24, (uint64_t)qword_1011B6C18);
  v25 = v51;
  v26 = v52;
  v27 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v52 + 16))(v51, v18, v22);
  v28 = Logger.logObject.getter(v27);
  v29 = static os_log_type_t.error.getter(v28);
  if (os_log_type_enabled(v28, v29))
  {
    v30 = v26;
    v31 = swift_slowAlloc(22, -1);
    v32 = swift_slowAlloc(32, -1);
    v54 = (uint64_t)a4;
    v33 = v32;
    v59[0] = v32;
    *(_DWORD *)v31 = 141558275;
    *(_QWORD *)&v57 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, (char *)&v57 + 8, v31 + 4, v31 + 12);
    *(_WORD *)(v31 + 12) = 2081;
    v34 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v35 = dispatch thunk of CustomStringConvertible.description.getter(v22, v34);
    *(_QWORD *)&v57 = sub_100016940(v35, v36, v59);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, (char *)&v57 + 8, v31 + 14, v31 + 22);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v30 + 8))(v25, v22);
    _os_log_impl((void *)&_mh_execute_header, v28, v29, "Beacon/group does not exist for given UUID %{private,mask.hash}s", (uint8_t *)v31, 0x16u);
    swift_arrayDestroy(v33, 1, (char *)&type metadata for Any + 8);
    v37 = v33;
    v23 = v54;
    swift_slowDealloc(v37, -1, -1);
    swift_slowDealloc(v31, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v26 + 8))(v25, v22);
  }

  v40 = sub_100215AC8();
  v41 = swift_allocError(&type metadata for NotifyWhenFoundManager.NotifyWhenFoundError, v40, 0, 0);
  *v42 = 0;
  Transaction.capture()();
  v43 = swift_errorRetain(v41);
  v44 = static os_log_type_t.error.getter(v43);
  if (qword_1010EA2A8 != -1)
    swift_once(&qword_1010EA2A8, sub_100B5DDB4);
  v45 = qword_1011B7D88;
  v46 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v47 = swift_allocObject(v46, 72, 7);
  *(_OWORD *)(v47 + 16) = xmmword_100E22B00;
  swift_getErrorValue(v41, v56, v55);
  v48 = Error.localizedDescription.getter(v55[1], v55[2]);
  v50 = v49;
  *(_QWORD *)(v47 + 56) = &type metadata for String;
  *(_QWORD *)(v47 + 64) = sub_10001AA00();
  *(_QWORD *)(v47 + 32) = v48;
  *(_QWORD *)(v47 + 40) = v50;
  os_log(_:dso:log:_:_:)(v44, &_mh_execute_header, v45, "Disable notify when found for beacon error - %@", 47, 2, v47);
  swift_bridgeObjectRelease();
  swift_errorRelease(v41);
  swift_errorRelease(v41);
  v38 = v23;
  return swift_release_n(v38, 2);
}

uint64_t sub_100215AC0(uint64_t a1)
{
  return sub_10027DBD0(a1);
}

unint64_t sub_100215AC8()
{
  unint64_t result;

  result = qword_1010F33A0;
  if (!qword_1010F33A0)
  {
    result = swift_getWitnessTable(byte_100E2E370, &type metadata for NotifyWhenFoundManager.NotifyWhenFoundError);
    atomic_store(result, (unint64_t *)&qword_1010F33A0);
  }
  return result;
}

uint64_t sub_100215B14()
{
  uint64_t v0;
  uint64_t found;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);

  found = type metadata accessor for NotifyWhenFoundRecord(0);
  v2 = *(_QWORD *)(found - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v3 | 7;
  v6 = ((*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  swift_release();
  v7 = v0 + v4;
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v8 = v0 + v4 + *(int *)(found + 20);
  v9 = type metadata accessor for UUID(0);
  v10 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8);
  v10(v8, v9);
  v10(v7 + *(int *)(found + 24), v9);
  swift_release();
  return swift_deallocObject(v0, v6, v5);
}

uint64_t sub_100215BE4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;

  v2 = *(_QWORD *)(type metadata accessor for NotifyWhenFoundRecord(0) - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFF8;
  v5 = *(_QWORD *)(v0 + 16);
  v6 = v0 + v3;
  v7 = swift_task_alloc(dword_1010F33B4);
  v8 = *(_OWORD *)(v0 + v4);
  *(_QWORD *)(v1 + 16) = v7;
  *(_QWORD *)v7 = v1;
  *(_QWORD *)(v7 + 8) = sub_100004A74;
  *(_OWORD *)(v7 + 48) = v8;
  *(_QWORD *)(v7 + 32) = v5;
  *(_QWORD *)(v7 + 40) = v6;
  return swift_task_switch(sub_100204348, 0, 0);
}

uint64_t sub_100215C80()
{
  return sub_10020479C();
}

uint64_t sub_100215C88@<X0>(BOOL *a1@<X8>)
{
  uint64_t v1;

  return sub_100204DAC(v1, a1);
}

uint64_t sub_100215CA0()
{
  uint64_t v0;

  swift_errorRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100215CCC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 32, 7);
}

void sub_100215CF8(uint64_t a1)
{
  uint64_t v1;

  sub_100203C68(a1, *(_QWORD *)(v1 + 16), *(NSObject **)(v1 + 24));
}

uint64_t sub_100215D04(char a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v3 = *(_QWORD *)(type metadata accessor for NotifyWhenFoundRecord(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = (*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_100204020(a1, v1 + v4, *(void (**)(void))(v1 + v5), *(void (**)(void))(v1 + v5 + 8), *(_QWORD *)(v1 + ((v5 + 23) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_100215D64()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100215D88()
{
  uint64_t v0;
  uint64_t found;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);

  found = type metadata accessor for NotifyWhenFoundRecord(0);
  v2 = *(_QWORD *)(found - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 80) & ~v3;
  v5 = v3 | 7;
  v6 = ((*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 40));
  v7 = v0 + v4;
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v8 = v0 + v4 + *(int *)(found + 20);
  v9 = type metadata accessor for UUID(0);
  v10 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8);
  v10(v8, v9);
  v10(v7 + *(int *)(found + 24), v9);
  swift_release();
  return swift_deallocObject(v0, v6, v5);
}

uint64_t sub_100215E68()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;

  v2 = *(_QWORD *)(type metadata accessor for NotifyWhenFoundRecord(0) - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 80) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFF8;
  v5 = *(_QWORD *)(v0 + 32);
  v6 = v0 + v3;
  v7 = swift_task_alloc(dword_1010F33CC);
  v8 = *(_OWORD *)(v0 + v4);
  *(_QWORD *)(v1 + 16) = v7;
  *(_QWORD *)v7 = v1;
  *(_QWORD *)(v7 + 8) = sub_100004A74;
  *(_OWORD *)(v7 + 56) = v8;
  *(_QWORD *)(v7 + 40) = v0 + 40;
  *(_QWORD *)(v7 + 48) = v6;
  *(_QWORD *)(v7 + 32) = v5;
  return swift_task_switch(sub_100202054, 0, 0);
}

uint64_t sub_100215F14()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 48) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_unknownObjectRelease(*((_QWORD *)v0 + 2));
  swift_release(*((_QWORD *)v0 + 4));
  swift_bridgeObjectRelease(*((_QWORD *)v0 + 5));
  (*(void (**)(char *, uint64_t))(v2 + 8))(&v0[v4], v1);
  swift_release(*(_QWORD *)&v0[v6 + 8]);
  return swift_deallocObject(v0, v6 + 16, v5);
}

uint64_t sub_100215FB8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v4 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = v1[2];
  v7 = v1[3];
  v8 = v1[4];
  v9 = v1[5];
  v10 = (uint64_t)v1 + v5;
  v11 = (_QWORD *)((char *)v1 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  v12 = *v11;
  v13 = v11[1];
  v14 = (_QWORD *)swift_task_alloc(dword_1010F33E4);
  *(_QWORD *)(v2 + 16) = v14;
  *v14 = v2;
  v14[1] = sub_100004C28;
  return sub_100201B28(a1, v6, v7, v8, v9, v10, v12, v13);
}

uint64_t sub_100216078(uint64_t a1, uint64_t a2, uint64_t a3, void (**a4)(const void *, void *))
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  void (*v30)(char *, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  int v36;
  _BOOL4 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  void (*v44)(char *, uint64_t);
  char *v45;
  uint64_t v46;
  unint64_t v47;
  os_log_t v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(char *, uint64_t);
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  NSObject *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  NSObject *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  void *v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  NSObject *v87;
  os_log_type_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  void (*v95)(char *, uint64_t);
  void (**v96)(const void *, void *);
  unint64_t v97;
  uint64_t v98;
  _BYTE *v99;
  void *v100;
  uint64_t *v102;
  int v103;
  os_log_t v104;
  uint64_t v105;
  uint64_t v106;
  void (**v107)(const void *, void *);
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  void (*v120)(char *, char *, uint64_t);
  uint64_t v121;
  uint64_t v122;
  char *v123;
  char *v124;
  uint64_t v125;
  uint64_t aBlock[8];

  v8 = type metadata accessor for DispatchWorkItemFlags(0);
  v116 = *(_QWORD *)(v8 - 8);
  v117 = v8;
  __chkstk_darwin(v8);
  v115 = (char *)&v102 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS(0);
  v113 = *(_QWORD *)(v10 - 8);
  v114 = v10;
  __chkstk_darwin(v10);
  v112 = (char *)&v102 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for OwnedBeaconRecord(0);
  v109 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v14 = (char *)&v102 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for UUID(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = __chkstk_darwin(v15);
  v111 = (char *)&v102 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __chkstk_darwin(v17);
  v118 = (char *)&v102 - v20;
  v21 = __chkstk_darwin(v19);
  v124 = (char *)&v102 - v22;
  v23 = __chkstk_darwin(v21);
  v25 = (char *)&v102 - v24;
  v110 = v26;
  __chkstk_darwin(v23);
  v28 = (char *)&v102 - v27;
  v119 = swift_allocObject(&unk_10105FA88, 24, 7);
  *(_QWORD *)(v119 + 16) = a4;
  v29 = a2 + *(int *)(type metadata accessor for OwnedBeaconGroup(0) + 24);
  v121 = v16;
  v30 = *(void (**)(char *, uint64_t, uint64_t))(v16 + 16);
  v30(v28, v29, v15);
  v107 = a4;
  _Block_copy(a4);
  if (qword_1010E9AA0 != -1)
    swift_once(&qword_1010E9AA0, sub_100201450);
  v31 = type metadata accessor for Logger(0);
  v32 = sub_10001A9E8(v31, (uint64_t)qword_1011B6C18);
  v30(v25, (uint64_t)v28, v15);
  v120 = (void (*)(char *, char *, uint64_t))v30;
  v33 = ((uint64_t (*)(char *, uint64_t, uint64_t))v30)(v124, a1, v15);
  v108 = v32;
  v34 = Logger.logObject.getter(v33);
  v35 = static os_log_type_t.default.getter(v34);
  v36 = v35;
  v37 = os_log_type_enabled(v34, v35);
  v122 = v15;
  v123 = v28;
  if (v37)
  {
    v38 = swift_slowAlloc(32, -1);
    v39 = swift_slowAlloc(64, -1);
    v105 = v39;
    *(_DWORD *)v38 = 141558531;
    v125 = 1752392040;
    aBlock[0] = v39;
    v102 = aBlock;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v125, aBlock, v38 + 4, v38 + 12);
    *(_WORD *)(v38 + 12) = 2081;
    v106 = a2;
    v40 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v104 = v34;
    v41 = v40;
    v103 = v36;
    v42 = dispatch thunk of CustomStringConvertible.description.getter(v15, v40);
    v125 = sub_100016940(v42, v43, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v125, aBlock, v38 + 14, v38 + 22);
    swift_bridgeObjectRelease();
    v44 = *(void (**)(char *, uint64_t))(v121 + 8);
    v44(v25, v15);
    *(_WORD *)(v38 + 22) = 2082;
    v45 = v124;
    v46 = dispatch thunk of CustomStringConvertible.description.getter(v15, v41);
    v125 = sub_100016940(v46, v47, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v125, v102, v38 + 24, v38 + 32);
    swift_bridgeObjectRelease();
    v124 = (char *)v44;
    v44(v45, v15);
    v48 = v104;
    _os_log_impl((void *)&_mh_execute_header, v104, (os_log_type_t)v103, "disableNotifyWhenFound for %{private,mask.hash}s, commandId %{public}s", (uint8_t *)v38, 0x20u);
    v49 = v105;
    swift_arrayDestroy(v105, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v49, -1, -1);
    v50 = v38;
    v28 = v123;
    swift_slowDealloc(v50, -1, -1);

  }
  else
  {
    v51 = *(void (**)(char *, uint64_t))(v121 + 8);
    v51(v25, v15);
    v52 = v124;
    v124 = (char *)v51;
    v51(v52, v15);

  }
  sub_10036AC6C();
  v54 = v53;
  swift_retain();
  sub_100212190(v54, a3);
  v56 = v55;
  swift_bridgeObjectRelease();
  swift_release();
  v57 = *((_QWORD *)v56 + 2);
  if (v57)
  {
    v58 = dispatch_group_create();
    v59 = swift_allocObject(&unk_10105F8F8, 24, 7);
    *(_QWORD *)(v59 + 16) = 0;
    v60 = *(unsigned __int8 *)(v109 + 80);
    v118 = v56;
    v61 = (uint64_t)&v56[(v60 + 32) & ~v60];
    v62 = *(_QWORD *)(v109 + 72);
    do
    {
      sub_10005972C(v61, (uint64_t)v14, type metadata accessor for OwnedBeaconRecord);
      dispatch_group_enter(v58);
      swift_retain();
      v63 = v58;
      sub_100214208(a1, (uint64_t)v14, a3, v59, v63);

      swift_release();
      sub_1000126B0((uint64_t)v14, type metadata accessor for OwnedBeaconRecord);
      v61 += v62;
      --v57;
    }
    while (v57);
    swift_bridgeObjectRelease();
    v118 = *(char **)(a3 + 40);
    v64 = v111;
    v120(v111, v123, v122);
    v65 = v121;
    v66 = *(unsigned __int8 *)(v121 + 80);
    v67 = (v66 + 16) & ~v66;
    v68 = (v110 + v67 + 7) & 0xFFFFFFFFFFFFFFF8;
    v69 = (v68 + 15) & 0xFFFFFFFFFFFFFFF8;
    v70 = (v69 + 15) & 0xFFFFFFFFFFFFFFF8;
    v71 = swift_allocObject(&unk_10105FAB0, v70 + 16, v66 | 7);
    v72 = v64;
    v73 = v122;
    (*(void (**)(uint64_t, char *, uint64_t))(v65 + 32))(v71 + v67, v72, v122);
    *(_QWORD *)(v71 + v68) = v59;
    *(_QWORD *)(v71 + v69) = a3;
    v74 = (_QWORD *)(v71 + v70);
    v75 = v119;
    *v74 = sub_10001D1EC;
    v74[1] = v75;
    aBlock[4] = (uint64_t)sub_100215CC8;
    aBlock[5] = v71;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_100016FB8;
    aBlock[3] = (uint64_t)&unk_10105FAC8;
    v76 = _Block_copy(aBlock);
    swift_retain();
    swift_retain();
    v77 = swift_retain();
    v78 = v112;
    static DispatchQoS.unspecified.getter(v77);
    v125 = (uint64_t)_swiftEmptyArrayStorage;
    v79 = sub_100006204((unint64_t *)&qword_1010F0E50, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v80 = sub_10001A9A8((uint64_t *)&unk_1010F1570);
    v81 = sub_1000193A4((unint64_t *)&qword_1010F0E60, (uint64_t *)&unk_1010F1570, (const char *)&protocol conformance descriptor for [A]);
    v82 = v115;
    v83 = v80;
    v84 = v117;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v125, v83, v81, v117, v79);
    OS_dispatch_group.notify(qos:flags:queue:execute:)(v78, v82, v118, v76);
    _Block_release(v76);

    (*(void (**)(char *, uint64_t))(v116 + 8))(v82, v84);
    (*(void (**)(char *, uint64_t))(v113 + 8))(v78, v114);
    ((void (*)(char *, uint64_t))v124)(v123, v73);
    swift_release();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
    v85 = v122;
    v86 = ((uint64_t (*)(char *, char *, uint64_t))v120)(v118, v28, v122);
    v87 = Logger.logObject.getter(v86);
    v88 = static os_log_type_t.error.getter(v87);
    if (os_log_type_enabled(v87, v88))
    {
      v89 = swift_slowAlloc(22, -1);
      v90 = swift_slowAlloc(32, -1);
      *(_DWORD *)v89 = 141558275;
      v125 = 1752392040;
      aBlock[0] = v90;
      v91 = v118;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v125, aBlock, v89 + 4, v89 + 12);
      *(_WORD *)(v89 + 12) = 2081;
      v92 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v93 = dispatch thunk of CustomStringConvertible.description.getter(v85, v92);
      v125 = sub_100016940(v93, v94, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v125, aBlock, v89 + 14, v89 + 22);
      swift_bridgeObjectRelease();
      v95 = (void (*)(char *, uint64_t))v124;
      ((void (*)(char *, uint64_t))v124)(v91, v85);
      _os_log_impl((void *)&_mh_execute_header, v87, v88, "No eligible member beacon to disable notify when found for group %{private,mask.hash}s", (uint8_t *)v89, 0x16u);
      swift_arrayDestroy(v90, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v90, -1, -1);
      swift_slowDealloc(v89, -1, -1);
    }
    else
    {
      v95 = (void (*)(char *, uint64_t))v124;
      ((void (*)(char *, uint64_t))v124)(v118, v85);
    }

    v96 = v107;
    v97 = sub_100215AC8();
    v98 = swift_allocError(&type metadata for NotifyWhenFoundManager.NotifyWhenFoundError, v97, 0, 0);
    *v99 = 0;
    v100 = (void *)_convertErrorToNSError(_:)(v98);
    v96[2](v96, v100);

    swift_errorRelease(v98);
    v95(v28, v85);
  }
  return swift_release();
}

void sub_1002169FC(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  void (**v22)(void *, void *);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  void (**v37)(void *, void *);
  unint64_t v38;
  uint64_t v39;
  _BYTE *v40;
  void *v41;
  const void *v42[2];
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49[3];
  uint64_t v50;
  uint64_t v51;

  v46 = a1;
  v7 = type metadata accessor for UUID(0);
  v44 = *(_QWORD *)(v7 - 8);
  v45 = v7;
  __chkstk_darwin(v7);
  v43 = (char *)v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10001A9A8((uint64_t *)&unk_1010FF7F0);
  __chkstk_darwin(v9);
  v11 = (char *)v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for OwnedBeaconGroup(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)v42 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = swift_allocObject(&unk_10105FA60, 24, 7);
  *(_QWORD *)(v16 + 16) = a4;
  v17 = a3;
  _Block_copy(a4);
  _Block_copy(a4);
  v18 = a2;
  sub_10080B648(a2, (uint64_t)&v47);
  if (v48)
  {
    sub_10000F9FC(&v47, (uint64_t)v49);
    v19 = v50;
    v20 = v51;
    v21 = sub_10001AA44(v49, v50);
    sub_1002118C4(v46, (uint64_t)v21, (void (*)(void))sub_10001D1EC, (void (*)(void))v16, v17, v19, v20);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v49);
    swift_release();
    v22 = (void (**)(void *, void *))a4;
  }
  else
  {
    v42[0] = a4;
    v42[1] = (const void *)v16;
    v23 = v44;
    v24 = v45;
    sub_100004048((uint64_t)&v47, (uint64_t *)&unk_1010EE310);
    sub_10081EDA8(v18, (uint64_t)v11);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
    {
      sub_100004048((uint64_t)v11, (uint64_t *)&unk_1010FF7F0);
      if (qword_1010E9AA0 != -1)
        swift_once(&qword_1010E9AA0, sub_100201450);
      v25 = type metadata accessor for Logger(0);
      sub_10001A9E8(v25, (uint64_t)qword_1011B6C18);
      v26 = v43;
      v27 = v24;
      v28 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v23 + 16))(v43, v18, v24);
      v29 = Logger.logObject.getter(v28);
      v30 = static os_log_type_t.error.getter(v29);
      if (os_log_type_enabled(v29, v30))
      {
        v31 = swift_slowAlloc(22, -1);
        v32 = swift_slowAlloc(32, -1);
        v49[0] = v32;
        *(_DWORD *)v31 = 141558275;
        *(_QWORD *)&v47 = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, (char *)&v47 + 8, v31 + 4, v31 + 12);
        *(_WORD *)(v31 + 12) = 2081;
        v33 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v34 = dispatch thunk of CustomStringConvertible.description.getter(v27, v33);
        *(_QWORD *)&v47 = sub_100016940(v34, v35, v49);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, (char *)&v47 + 8, v31 + 14, v31 + 22);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v23 + 8))(v26, v27);
        _os_log_impl((void *)&_mh_execute_header, v29, v30, "Beacon/group does not exist for given UUID %{private,mask.hash}s", (uint8_t *)v31, 0x16u);
        swift_arrayDestroy(v32, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v32, -1, -1);
        swift_slowDealloc(v31, -1, -1);
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v23 + 8))(v26, v27);
      }

      v37 = (void (**)(void *, void *))v42[0];
      v38 = sub_100215AC8();
      v39 = swift_allocError(&type metadata for NotifyWhenFoundManager.NotifyWhenFoundError, v38, 0, 0);
      *v40 = 0;
      v41 = (void *)_convertErrorToNSError(_:)(v39);
      v37[2](v37, v41);

      swift_errorRelease(v39);
    }
    else
    {
      v36 = (uint64_t)v15;
      sub_1000126EC((uint64_t)v11, (uint64_t)v15, type metadata accessor for OwnedBeaconGroup);
      v37 = (void (**)(void *, void *))v42[0];
      _Block_copy(v42[0]);
      sub_100216078(v46, v36, a3, (void (**)(const void *, void *))v37);
      _Block_release(v37);
      sub_1000126B0(v36, type metadata accessor for OwnedBeaconGroup);
    }
    swift_release();
    v22 = v37;
  }
  _Block_release(v22);
}

uint64_t sub_100216E64()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100216E88(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  return sub_1002019BC(a1, a2, v2);
}

uint64_t sub_100216E90()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100216EB4(uint64_t a1)
{
  uint64_t v1;

  return sub_100791358(a1, *(uint64_t (**)(uint64_t, uint64_t))(v1 + 16));
}

uint64_t sub_100216EBC@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;

  return sub_100210A20(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t sub_100216ED4()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_1010F3414);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_100004C28;
  return swift_task_switch(sub_100210B30, 0, 0);
}

uint64_t sub_100216F2C()
{
  uint64_t v0;

  return sub_10020CD60(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_100216F44()
{
  uint64_t v0;

  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
  if (*(_QWORD *)(v0 + 56))
    swift_release();
  return swift_deallocObject(v0, 72, 7);
}

uint64_t sub_100216F78(uint64_t a1)
{
  uint64_t v1;

  return sub_100A3A55C(a1, v1 + 16, *(void (**)(uint64_t, BOOL))(v1 + 56));
}

uint64_t sub_100216F84()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_release(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

void sub_100216FF8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for UUID(0) - 8) + 80);
  sub_100210088(v0 + ((v1 + 24) & ~v1));
}

unint64_t sub_100217038()
{
  unint64_t result;

  result = qword_1010F3420;
  if (!qword_1010F3420)
  {
    result = swift_getWitnessTable(byte_100E5DF78, &type metadata for NotifyMeResponse);
    atomic_store(result, (unint64_t *)&qword_1010F3420);
  }
  return result;
}

uint64_t sub_10021707C(uint64_t a1)
{
  uint64_t v1;

  return sub_10020E84C(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_100217084()
{
  uint64_t v0;
  uint64_t found;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;

  found = type metadata accessor for NotifyWhenFoundRecord(0);
  v2 = *(_QWORD *)(found - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = sub_10001A9A8(&qword_101108DF0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v5 + v8 + 8) & ~v8;
  v15 = v3 | v8 | 7;
  v16 = v9 + *(_QWORD *)(v7 + 64);
  v10 = v0 + v4;
  sub_10001BC14(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v11 = v0 + v4 + *(int *)(found + 20);
  v12 = type metadata accessor for UUID(0);
  v13 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8);
  v13(v11, v12);
  v13(v10 + *(int *)(found + 24), v12);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v9, v6);
  return swift_deallocObject(v0, v16, v15);
}

uint64_t sub_10021718C(char a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD *)(type metadata accessor for NotifyWhenFoundRecord(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = (*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = *(unsigned __int8 *)(*(_QWORD *)(sub_10001A9A8(&qword_101108DF0) - 8) + 80);
  return sub_10020EAD0(a1, v1 + v4, *(_QWORD *)(v1 + v5), v1 + ((v5 + v6 + 8) & ~v6));
}

unint64_t sub_100217208()
{
  unint64_t result;

  result = qword_1010F3428;
  if (!qword_1010F3428)
  {
    result = swift_getWitnessTable(byte_100E2FB38, &type metadata for NotifyMeRequest);
    atomic_store(result, (unint64_t *)&qword_1010F3428);
  }
  return result;
}

uint64_t sub_10021724C@<X0>(uint64_t *a1@<X8>)
{
  return sub_1007FE4DC(a1);
}

uint64_t sub_100217264(uint64_t result, uint64_t a2, unsigned __int8 a3)
{
  if (a3 - 1 < 2)
    return swift_bridgeObjectRelease(result);
  if (!a3)
  {
    swift_bridgeObjectRelease(result);
    return swift_bridgeObjectRelease(a2);
  }
  return result;
}

uint64_t sub_1002172B0()
{
  _QWORD *v0;

  swift_unknownObjectRelease(v0[2]);
  swift_release(v0[4]);
  swift_bridgeObjectRelease(v0[5]);
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1002172E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;

  v2 = *(_QWORD *)(v0 + 40);
  v3 = (_QWORD *)swift_task_alloc(dword_1010F343C);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_100004A74;
  v4 = (_QWORD *)swift_task_alloc(dword_1010F319C);
  v3[4] = v4;
  *v4 = v3;
  v4[1] = sub_1002050D0;
  return sub_100209C7C(v2);
}

uint64_t sub_100217360()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_100203CD0(v0 + v2, *(_QWORD *)(v0 + v3), *(_QWORD *)(v0 + ((v3 + 15) & 0xFFFFFFFFFFFFFFF8)), *(void (**)(uint64_t))(v0 + ((((v3 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v0 + ((((v3 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8));
}

uint64_t sub_1002173BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001A9A8(&qword_1010F33A8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_100217404()
{
  uint64_t v0;

  return sub_1002047F4(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_10021741C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100217440@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return sub_1002049F4(a1, *(_QWORD *)(v2 + 16), a2);
}

void sub_100217448(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;

  sub_100204D14(a1, a2, a3, v3);
}

uint64_t storeEnumTagSinglePayload for NotifyWhenFoundManager.NotifyWhenFoundError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_10021749C + 4 * byte_100E2E269[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1002174D0 + 4 * byte_100E2E264[v4]))();
}

uint64_t sub_1002174D0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1002174D8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1002174E0);
  return result;
}

uint64_t sub_1002174EC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1002174F4);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1002174F8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100217500(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for NotifyWhenFoundManager.NotifyWhenFoundError()
{
  return &type metadata for NotifyWhenFoundManager.NotifyWhenFoundError;
}

unint64_t sub_100217520()
{
  unint64_t result;

  result = qword_1010F3450;
  if (!qword_1010F3450)
  {
    result = swift_getWitnessTable(a1_5, &type metadata for NotifyWhenFoundManager.NotifyWhenFoundError);
    atomic_store(result, (unint64_t *)&qword_1010F3450);
  }
  return result;
}

uint64_t sub_100217588()
{
  return sub_100216F2C();
}

uint64_t sub_10021759C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return swift_task_switch(sub_1002175B8, 0, 0);
}

uint64_t sub_1002175B8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;

  v2 = v0[3];
  v1 = v0[4];
  v3 = (_QWORD *)swift_task_alloc(48);
  v0[5] = v3;
  v3[2] = v1;
  v3[3] = v2;
  v3[4] = v1;
  v4 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  v0[6] = v4;
  v5 = type metadata accessor for AccessoryMetadata(0);
  *v4 = v0;
  v4[1] = sub_100217664;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0[2], 0, 0, 0xD000000000000026, 0x8000000100ECC060, sub_10024348C, v3, v5);
}

uint64_t sub_100217664()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*v1 + 48);
  v3 = *v1;
  *(_QWORD *)(v3 + 56) = v0;
  swift_task_dealloc(v2);
  if (v0)
    return swift_task_switch(sub_1002176D8, 0, 0);
  swift_task_dealloc(*(_QWORD *)(v3 + 40));
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_1002176D8()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(v0 + 40));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10021770C(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;

  *(_BYTE *)(v3 + 128) = a3;
  *(_QWORD *)(v3 + 72) = a1;
  *(_QWORD *)(v3 + 80) = a2;
  return swift_task_switch(sub_100217728, 0, 0);
}

uint64_t sub_100217728()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  char *v13;

  v1 = *(_QWORD *)(v0 + 80);
  v2 = objc_msgSend((id)objc_opt_self(FMSystemInfo), "sharedInstance");
  objc_msgSend(v2, "isInternalBuild");

  v3 = sub_10001A9A8(&qword_1010FBA60);
  v4 = *(_QWORD *)(type metadata accessor for AccessoryMetadata(0) - 8);
  v5 = *(_QWORD *)(v4 + 72);
  v6 = *(unsigned __int8 *)(v4 + 80);
  v7 = (v6 + 32) & ~v6;
  v8 = swift_allocObject(v3, v7 + v5, v6 | 7);
  *(_OWORD *)(v8 + 16) = xmmword_100E22B00;
  sub_10005972C(v1, v8 + v7, type metadata accessor for AccessoryMetadata);
  if (qword_1010E9AB0 != -1)
    swift_once(&qword_1010E9AB0, sub_100217C2C);
  v9 = qword_1011B6C48;
  v10 = unk_10111391C;
  v13 = (char *)&dword_101113918 + dword_101113918;
  swift_retain();
  v11 = (_QWORD *)swift_task_alloc(v10);
  *(_QWORD *)(v0 + 88) = v11;
  *v11 = v0;
  v11[1] = sub_100217874;
  return ((uint64_t (*)(uint64_t, _QWORD, _QWORD, uint64_t))v13)(v8, 0, *(unsigned __int8 *)(v0 + 128), v9);
}

uint64_t sub_100217874(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;

  v4 = (_QWORD *)*v3;
  v4[2] = v3;
  v4[3] = a1;
  v4[4] = a2;
  v4[5] = a3;
  v5 = v4[11];
  v4[12] = a1;
  swift_task_dealloc(v5);
  return swift_task_switch(sub_1002178D8, 0, 0);
}

uint64_t sub_1002178D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v1 = *(_QWORD *)(v0 + 96);
  if (v1)
  {
    v2 = *(_QWORD *)(v0 + 80);
    *(_QWORD *)(v0 + 48) = v1;
    *(_OWORD *)(v0 + 56) = *(_OWORD *)(v0 + 32);
    v3 = swift_task_alloc(32);
    *(_QWORD *)(v0 + 104) = v3;
    *(_QWORD *)(v3 + 16) = v2;
    *(_QWORD *)(v3 + 24) = v0 + 48;
    v4 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
    *(_QWORD *)(v0 + 112) = v4;
    v5 = sub_10001A9A8((uint64_t *)&unk_10111C0A0);
    *v4 = v0;
    v4[1] = sub_100217ABC;
    return withCheckedThrowingContinuation<A>(isolation:function:_:)(*(_QWORD *)(v0 + 72), 0, 0, 0xD000000000000023, 0x8000000100ECBDC0, sub_10024329C, v3, v5);
  }
  else
  {
    if (qword_1010E9AA8 != -1)
      swift_once(&qword_1010E9AA8, sub_100217BB8);
    v7 = type metadata accessor for Logger(0);
    v8 = sub_10001A9E8(v7, (uint64_t)qword_1011B6C30);
    v9 = Logger.logObject.getter(v8);
    v10 = static os_log_type_t.error.getter(v9);
    if (os_log_type_enabled(v9, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "retrieveProductInfo: invalid parameters", v11, 2u);
      swift_slowDealloc(v11, -1, -1);
    }

    v12 = type metadata accessor for AccessoryMetadataManager.Error(0);
    v13 = sub_100006204(&qword_1010F37D8, type metadata accessor for AccessoryMetadataManager.Error, (uint64_t)&unk_100E2E588);
    swift_allocError(v12, v13, 0, 0);
    v15 = swift_storeEnumTagMultiPayload(v14, v12, 7);
    swift_willThrow(v15);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100217ABC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 112);
  *(_QWORD *)(*v1 + 120) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_100217B6C;
  }
  else
  {
    swift_task_dealloc(*(_QWORD *)(v2 + 104));
    v4 = sub_100217B28;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_100217B28()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  v1 = *(_QWORD *)(v0 + 56);
  v2 = *(_QWORD *)(v0 + 64);
  swift_bridgeObjectRelease();
  sub_10001BC14(v1, v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100217B6C()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  swift_task_dealloc(*(_QWORD *)(v0 + 104));
  v1 = *(_QWORD *)(v0 + 56);
  v2 = *(_QWORD *)(v0 + 64);
  swift_bridgeObjectRelease();
  sub_10001BC14(v1, v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100217BB8()
{
  uint64_t v0;

  v0 = type metadata accessor for Logger(0);
  sub_1000234D8(v0, qword_1011B6C30);
  sub_10001A9E8(v0, (uint64_t)qword_1011B6C30);
  return Logger.init(subsystem:category:)(0xD00000000000001DLL, 0x8000000100EC5D30, 0x617461646174656DLL, 0xE800000000000000);
}

uint64_t sub_100217C2C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v0 = type metadata accessor for DeviceIdentityUtility(0);
  v1 = swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  swift_defaultActor_initialize(v1);
  v2 = v1 + OBJC_IVAR____TtC12searchpartyd21DeviceIdentityUtility_certExpiryDate;
  v3 = type metadata accessor for Date(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v2, 1, 1, v3);
  *(_QWORD *)(v1 + OBJC_IVAR____TtC12searchpartyd21DeviceIdentityUtility_refKey) = 0;
  *(_QWORD *)(v1 + OBJC_IVAR____TtC12searchpartyd21DeviceIdentityUtility_certs) = _swiftEmptyArrayStorage;
  *(_BYTE *)(v1 + OBJC_IVAR____TtC12searchpartyd21DeviceIdentityUtility_signingType) = 3;
  qword_1011B6C48 = v1;
  return result;
}

void sub_100217CC8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t (*v6)(_QWORD);
  char *v7;
  uint64_t v8;

  v1 = type metadata accessor for AccessoryMetadata(0);
  __chkstk_darwin(v1);
  v2 = type metadata accessor for MACAddress(0);
  __chkstk_darwin(v2);
  v3 = type metadata accessor for AccessoryMetadataManager.Error(0);
  __chkstk_darwin(v3);
  v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10005972C(v0, (uint64_t)v5, v6);
  v7 = (char *)sub_100217DD8 + 4 * byte_100E2E440[swift_getEnumCaseMultiPayload(v5, v3)];
  __asm { BR              X10 }
}

uint64_t sub_100217DD8()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  Swift::String v4;

  v2 = *v0;
  *(_QWORD *)(v1 - 80) = 0;
  *(_QWORD *)(v1 - 72) = 0xE000000000000000;
  _StringGuts.grow(_:)(21);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v1 - 80) = 0xD000000000000013;
  *(_QWORD *)(v1 - 72) = 0x8000000100EC8440;
  *(_QWORD *)(v1 - 88) = v2;
  swift_errorRetain(v2);
  v3 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
  v4._countAndFlagsBits = String.init<A>(describing:)(v1 - 88, v3);
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  swift_errorRelease(v2);
  return *(_QWORD *)(v1 - 80);
}

uint64_t sub_1002180A4()
{
  uint64_t v0;

  swift_release();
  sub_1000126B0(v0+ OBJC_IVAR____TtCC12searchpartyd24AccessoryMetadataManagerP33_9E4B9D7C2AC40BB201ED52E047F00DA919MetadataCoordinator_info, type metadata accessor for AccessoryMetadataManager.MetadataInfo);
  swift_bridgeObjectRelease();
  sub_10001EF3C(*(_QWORD *)(v0+ OBJC_IVAR____TtCC12searchpartyd24AccessoryMetadataManagerP33_9E4B9D7C2AC40BB201ED52E047F00DA919MetadataCoordinator_readBuffer), *(_QWORD *)(v0+ OBJC_IVAR____TtCC12searchpartyd24AccessoryMetadataManagerP33_9E4B9D7C2AC40BB201ED52E047F00DA919MetadataCoordinator_readBuffer+ 8));
  sub_10001D8A8(*(_QWORD *)(v0+ OBJC_IVAR____TtCC12searchpartyd24AccessoryMetadataManagerP33_9E4B9D7C2AC40BB201ED52E047F00DA919MetadataCoordinator_writePromise), *(_QWORD *)(v0+ OBJC_IVAR____TtCC12searchpartyd24AccessoryMetadataManagerP33_9E4B9D7C2AC40BB201ED52E047F00DA919MetadataCoordinator_writePromise+ 8));
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

_QWORD *sub_10021811C(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  _QWORD *v22;

  v3 = v2;
  v21 = a2;
  v5 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v5);
  v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000F4A0(0, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr);
  v15 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v12 + 104))(v14, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v11);
  static DispatchQoS.unspecified.getter(v15);
  v22 = _swiftEmptyArrayStorage;
  v16 = sub_100006204((unint64_t *)&qword_1010F0E20, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v17 = sub_10001A9A8((uint64_t *)&unk_1010EA6B0);
  v18 = sub_1000193A4((unint64_t *)&qword_1010F0E30, (uint64_t *)&unk_1010EA6B0, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v22, v17, v18, v5, v16);
  v3[4] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000018, 0x8000000100E2E480, v10, v7, v14, 0);
  v3[5] = &_swiftEmptySetSingleton;
  v3[6] = _swiftEmptyDictionarySingleton;
  v19 = v21;
  v3[2] = a1;
  v3[3] = v19;
  return v3;
}

uint64_t sub_100218318(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[8];

  v2 = *v1;
  v5[3] = a1;
  v5[4] = v2;
  v3 = sub_10001A9A8((uint64_t *)&unk_10111C1A0);
  OS_dispatch_queue.sync<A>(execute:)(sub_1002448B8, v5, v3);
  return v5[7];
}

void sub_100218380(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  int *v42;
  _QWORD *v43;
  uint64_t v44;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60[3];
  char v61[24];
  uint64_t v62;
  uint64_t v63;

  v53 = a3;
  v56 = a4;
  v52 = type metadata accessor for UUID(0);
  v6 = *(_QWORD *)(v52 - 8);
  __chkstk_darwin(v52);
  v8 = (char *)&v51 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for MACAddress(0);
  v10 = *(_QWORD *)(v9 - 8);
  v57 = v9;
  v58 = v10;
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v51 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v51 - v14;
  v16 = sub_10001A9A8(&qword_1010F3A10);
  v17 = *(unsigned int *)(v16 + 48);
  v18 = *(unsigned __int16 *)(v16 + 52);
  v54 = v16;
  swift_allocObject(v16, v17, v18);
  v55 = PassthroughSubject.init()();
  swift_beginAccess(a1 + 48, v61, 0, 0);
  if (*(_QWORD *)(*(_QWORD *)(a1 + 48) + 16)
    && (swift_bridgeObjectRetain(*(_QWORD *)(a1 + 48)),
        sub_1005193C8(a2),
        v21 = v20,
        v19 = swift_bridgeObjectRelease(),
        (v21 & 1) != 0))
  {
    if (qword_1010E9AA8 != -1)
      swift_once(&qword_1010E9AA8, sub_100217BB8);
    v22 = type metadata accessor for Logger(0);
    sub_10001A9E8(v22, (uint64_t)qword_1011B6C30);
    v24 = v57;
    v23 = v58;
    v25 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v58 + 16))(v13, a2, v57);
    v26 = Logger.logObject.getter(v25);
    v27 = static os_log_type_t.error.getter(v26);
    if (os_log_type_enabled(v26, v27))
    {
      v28 = swift_slowAlloc(22, -1);
      v29 = swift_slowAlloc(32, -1);
      v60[0] = v29;
      *(_DWORD *)v28 = 141558275;
      v62 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v62, &v63, v28 + 4, v28 + 12);
      *(_WORD *)(v28 + 12) = 2081;
      v30 = sub_100006204((unint64_t *)&qword_1010FBAE0, (uint64_t (*)(uint64_t))&type metadata accessor for MACAddress, (uint64_t)&protocol conformance descriptor for MACAddress);
      v31 = dispatch thunk of CustomStringConvertible.description.getter(v24, v30);
      v62 = sub_100016940(v31, v32, v60);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v62, &v63, v28 + 14, v28 + 22);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v58 + 8))(v13, v24);
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "Existing metadata session for %{private,mask.hash}s in progress!", (uint8_t *)v28, 0x16u);
      swift_arrayDestroy(v29, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v29, -1, -1);
      swift_slowDealloc(v28, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v23 + 8))(v13, v24);
    }

    v60[0] = v55;
    v50 = sub_1000193A4(&qword_1010F3A18, &qword_1010F3A10, (const char *)&protocol conformance descriptor for PassthroughSubject<A, B>);
    v48 = Publisher.eraseToAnyPublisher()(v54, v50);
    swift_release();
  }
  else
  {
    __chkstk_darwin(v19);
    *((_QWORD *)&v51 - 2) = a2;
    *((_QWORD *)&v51 - 1) = v33;
    sub_10001A9A8(&qword_101110700);
    v34 = v59;
    Lock.callAsFunction<A>(_:)(sub_100245650);
    v59 = v34;
    v35 = (char *)v60[0];
    if (v60[0])
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v58 + 16))(v15, a2, v57);
      v36 = objc_msgSend(*(id *)&v35[OBJC_IVAR____TtC12searchpartyd10Peripheral_underlyingObject], "identifier");
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v36);

      v37 = type metadata accessor for AccessoryMetadataManager.MetadataCoordinator(0);
      v38 = swift_allocObject(v37, *(unsigned int *)(v37 + 48), *(unsigned __int16 *)(v37 + 52));
      *(_QWORD *)(v38
                + OBJC_IVAR____TtCC12searchpartyd24AccessoryMetadataManagerP33_9E4B9D7C2AC40BB201ED52E047F00DA919MetadataCoordinator_writeQueue) = _swiftEmptyArrayStorage;
      v51 = xmmword_100E22B20;
      *(_OWORD *)(v38
                + OBJC_IVAR____TtCC12searchpartyd24AccessoryMetadataManagerP33_9E4B9D7C2AC40BB201ED52E047F00DA919MetadataCoordinator_readBuffer) = xmmword_100E22B20;
      v39 = (_QWORD *)(v38
                     + OBJC_IVAR____TtCC12searchpartyd24AccessoryMetadataManagerP33_9E4B9D7C2AC40BB201ED52E047F00DA919MetadataCoordinator_writePromise);
      *v39 = 0;
      v39[1] = 0;
      v40 = v55;
      *(_QWORD *)(v38 + 16) = v55;
      v41 = v38
          + OBJC_IVAR____TtCC12searchpartyd24AccessoryMetadataManagerP33_9E4B9D7C2AC40BB201ED52E047F00DA919MetadataCoordinator_info;
      (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(v38+ OBJC_IVAR____TtCC12searchpartyd24AccessoryMetadataManagerP33_9E4B9D7C2AC40BB201ED52E047F00DA919MetadataCoordinator_info, v8, v52);
      v42 = (int *)type metadata accessor for AccessoryMetadataManager.MetadataInfo(0);
      *(_OWORD *)(v41 + v42[5]) = v51;
      v43 = (_QWORD *)(v41 + v42[6]);
      *v43 = 0;
      v43[1] = 0;
      v44 = v41 + v42[7];
      *(_DWORD *)v44 = 0;
      *(_BYTE *)(v44 + 4) = 1;
      *(_DWORD *)(v41 + v42[8]) = 0;
      swift_beginAccess(a1 + 48, v60, 33, 0);
      swift_retain();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(a1 + 48));
      v62 = *(_QWORD *)(a1 + 48);
      *(_QWORD *)(a1 + 48) = 0x8000000000000000;
      sub_10010AE90(v38, (uint64_t)v15, isUniquelyReferenced_nonNull_native);
      *(_QWORD *)(a1 + 48) = v62;
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v58 + 8))(v15, v57);
      swift_endAccess(v60);
      v46 = type metadata accessor for Transaction(0);
      __chkstk_darwin(v46);
      *((_QWORD *)&v51 - 4) = v35;
      *((_QWORD *)&v51 - 3) = a1;
      *((_QWORD *)&v51 - 2) = v53;
      static Transaction.named<A>(_:with:)("AccessoryMetadataManager.readMetadata", 37, 2, sub_1002448D4, &v51 - 3);
      v60[0] = v40;
      v47 = sub_1000193A4(&qword_1010F3A18, &qword_1010F3A10, (const char *)&protocol conformance descriptor for PassthroughSubject<A, B>);
      v48 = Publisher.eraseToAnyPublisher()(v54, v47);
      swift_release();

    }
    else
    {
      v60[0] = v55;
      v49 = sub_1000193A4(&qword_1010F3A18, &qword_1010F3A10, (const char *)&protocol conformance descriptor for PassthroughSubject<A, B>);
      v48 = Publisher.eraseToAnyPublisher()(v54, v49);
      swift_release();
    }
  }
  *v56 = v48;
}

uint64_t sub_1002189B0(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  id v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v45;
  id v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  id v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  id v78;
  uint64_t v79;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void (*v85)(char *, uint64_t, uint64_t, uint64_t);
  id v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  _QWORD *v117;
  uint64_t v118;
  uint64_t v119;
  id v120;
  id v121;
  uint64_t v122;

  v118 = a3;
  v119 = a1;
  v4 = sub_10001A9A8(&qword_1010EECC8);
  __chkstk_darwin(v4);
  v6 = (char *)&v81 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v90 = sub_10001A9A8(&qword_1010F3980);
  v89 = *(_QWORD *)(v90 - 8);
  __chkstk_darwin(v90);
  v88 = (char *)&v81 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v93 = sub_10001A9A8(&qword_1010F3988);
  v92 = *(_QWORD *)(v93 - 8);
  __chkstk_darwin(v93);
  v91 = (char *)&v81 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v96 = sub_10001A9A8(&qword_1010F3990);
  v95 = *(_QWORD *)(v96 - 8);
  __chkstk_darwin(v96);
  v94 = (char *)&v81 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v99 = sub_10001A9A8(&qword_1010F3998);
  v98 = *(_QWORD *)(v99 - 8);
  __chkstk_darwin(v99);
  v97 = (char *)&v81 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v103 = sub_10001A9A8(&qword_1010F39A0);
  v101 = *(_QWORD *)(v103 - 8);
  __chkstk_darwin(v103);
  v100 = (char *)&v81 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10001A9A8(&qword_1010F39A8);
  v105 = *(_QWORD *)(v12 - 8);
  v106 = v12;
  __chkstk_darwin(v12);
  v102 = (char *)&v81 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_10001A9A8(&qword_1010F39B0);
  v107 = *(_QWORD *)(v14 - 8);
  v108 = v14;
  __chkstk_darwin(v14);
  v104 = (char *)&v81 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_10001A9A8(&qword_1010F39B8);
  v110 = *(_QWORD *)(v16 - 8);
  v111 = v16;
  __chkstk_darwin(v16);
  v109 = (char *)&v81 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_10001A9A8(&qword_1010F39C0);
  v113 = *(_QWORD *)(v18 - 8);
  v114 = v18;
  __chkstk_darwin(v18);
  v112 = (char *)&v81 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1010E9AA8 != -1)
    swift_once(&qword_1010E9AA8, sub_100217BB8);
  v20 = type metadata accessor for Logger(0);
  sub_10001A9E8(v20, (uint64_t)qword_1011B6C30);
  v21 = a2;
  v22 = Logger.logObject.getter(v21);
  v23 = static os_log_type_t.default.getter(v22);
  if (os_log_type_enabled(v22, v23))
  {
    v24 = (uint8_t *)swift_slowAlloc(12, -1);
    v117 = (_QWORD *)swift_slowAlloc(8, -1);
    *(_DWORD *)v24 = 138412290;
    v121 = v21;
    v25 = v21;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v121, &v122, v24 + 4, v24 + 12);
    v26 = v117;
    *v117 = v21;

    _os_log_impl((void *)&_mh_execute_header, v22, v23, "readMetadata peripheral: %@", v24, 0xCu);
    v27 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v26, 1, v27);
    swift_slowDealloc(v26, -1, -1);
    swift_slowDealloc(v24, -1, -1);

  }
  else
  {

  }
  v86 = v21;
  v87 = Transaction.subscriptionCleaner.getter(v28);
  v29 = v118;
  v121 = (id)sub_100E0799C((char *)v21, 0);
  v30 = *(void **)(v29 + 32);
  v120 = v30;
  v84 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
  v85 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v84 - 8) + 56);
  v31 = (uint64_t)v6;
  v85(v6, 1, 1, v84);
  v32 = v30;
  v33 = sub_10001A9A8((uint64_t *)&unk_1010FB890);
  v34 = sub_10000F4A0(0, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr);
  v116 = v34;
  v35 = sub_1000193A4((unint64_t *)&unk_1010FB8A0, (uint64_t *)&unk_1010FB890, (const char *)&protocol conformance descriptor for AnyPublisher<A, B>);
  v117 = (_QWORD *)sub_10001AC90((unint64_t *)&qword_10111C120, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr, (const char *)&protocol conformance descriptor for OS_dispatch_queue);
  v36 = v88;
  v82 = v33;
  v83 = v35;
  Publisher.receive<A>(on:options:)(&v120, v31, v33, v34, v35, v117);
  sub_100004048(v31, &qword_1010EECC8);

  v37 = swift_release();
  v38 = static Subscribers.Demand.unlimited.getter(v37);
  v39 = type metadata accessor for Peripheral(0);
  v115 = v39;
  v40 = sub_1000193A4(&qword_1010F39D0, &qword_1010F3980, (const char *)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  v41 = v91;
  v42 = v90;
  Publisher.flatMap<A, B>(maxPublishers:_:)(v38, sub_10021944C, 0, v90, v39, v33, v40, v35);
  (*(void (**)(char *, uint64_t))(v89 + 8))(v36, v42);
  v121 = v32;
  v43 = v84;
  v44 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v85;
  v85((char *)v31, 1, 1, v84);
  v45 = sub_1000193A4(&qword_1010F39D8, &qword_1010F3988, (const char *)&protocol conformance descriptor for Publishers.FlatMap<A, B>);
  v46 = v32;
  v47 = v94;
  v48 = v93;
  Publisher.receive<A>(on:options:)(&v121, v31, v93, v116, v45, v117);
  sub_100004048(v31, &qword_1010EECC8);

  v49 = (*(uint64_t (**)(char *, uint64_t))(v92 + 8))(v41, v48);
  v50 = static Subscribers.Demand.unlimited.getter(v49);
  v51 = sub_1000193A4(&qword_1010F39E0, &qword_1010F3990, (const char *)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  v52 = v97;
  v53 = v96;
  Publisher.flatMap<A, B>(maxPublishers:_:)(v50, sub_100219454, 0, v96, v115, v82, v51, v83);
  (*(void (**)(char *, uint64_t))(v95 + 8))(v47, v53);
  v121 = v46;
  v44(v31, 1, 1, v43);
  v54 = sub_1000193A4(&qword_1010F39E8, &qword_1010F3998, (const char *)&protocol conformance descriptor for Publishers.FlatMap<A, B>);
  v55 = v46;
  v56 = v100;
  v57 = v99;
  Publisher.receive<A>(on:options:)(&v121, v31, v99, v116, v54, v117);
  sub_100004048(v31, &qword_1010EECC8);

  (*(void (**)(char *, uint64_t))(v98 + 8))(v52, v57);
  v58 = sub_1000193A4(&qword_1010F39F0, &qword_1010F39A0, (const char *)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  v60 = v102;
  v59 = v103;
  Publisher.timeout(_:queue:customError:)(v55, sub_1000E2DBC, 0, v103, v58, 180.0);
  (*(void (**)(char *, uint64_t))(v101 + 8))(v56, v59);
  v61 = sub_1000193A4(&qword_1010F39F8, &qword_1010F39A8, (const char *)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  v62 = v104;
  v63 = v106;
  Publisher.compactMap<A>(_:)(sub_1000E0680, 0, v106, v115, v61);
  (*(void (**)(char *, uint64_t))(v105 + 8))(v60, v63);
  v64 = sub_10001A9A8(&qword_1011074A0);
  v65 = v108;
  v66 = v109;
  Publishers.CompactMap.map<A>(_:)(sub_1000E068C, 0, v108, v64);
  (*(void (**)(char *, uint64_t))(v107 + 8))(v62, v65);
  v67 = sub_10001A9A8(&qword_1010EEE90);
  v68 = sub_1000193A4(&qword_1010F3A00, &qword_1010F39B8, (const char *)&protocol conformance descriptor for Publishers.CompactMap<A, B>);
  v69 = sub_1000193A4(&qword_1010EEEA0, &qword_1010EEE90, (const char *)&protocol conformance descriptor for Just<A>);
  v70 = v111;
  v71 = v112;
  Publisher.catch<A>(_:)(sub_1002197E4, 0, v111, v67, v68, v69);
  (*(void (**)(char *, uint64_t))(v110 + 8))(v66, v70);
  v72 = swift_allocObject(&unk_101061DC0, 24, 7);
  swift_weakInit(v72 + 16, v118);
  v73 = (_QWORD *)swift_allocObject(&unk_101062040, 48, 7);
  v74 = v119;
  v73[2] = v119;
  v73[3] = v72;
  v75 = v86;
  v76 = v87;
  v73[4] = v86;
  v73[5] = v76;
  v77 = sub_1000193A4(&qword_1010F3A08, &qword_1010F39C0, (const char *)&protocol conformance descriptor for Publishers.Catch<A, B>);
  v78 = v75;
  swift_retain();
  swift_unknownObjectRetain(v76);
  v79 = v114;
  Publisher<>.sink(receiveValue:)(sub_100244930, v73, v114, v77);
  swift_release();
  (*(void (**)(char *, uint64_t))(v113 + 8))(v71, v79);
  AnyCancellable.store(in:)(v74);
  swift_unknownObjectRelease(v76);
  return swift_release();
}

uint64_t sub_10021944C@<X0>(uint64_t *a1@<X8>)
{
  return sub_10021B3AC(1, a1);
}

uint64_t sub_100219454@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint8_t *v30;
  uint8_t *v31;
  uint64_t v32;
  char *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  char v38[16];
  _QWORD *v39;
  char v40[24];
  _QWORD v41[5];

  v4 = sub_10001A9A8(&qword_1010EEEB0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A9A8((uint64_t *)&unk_1010FBA80);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (char *)*a1;
  v41[3] = &type metadata for BAServiceIdentifier;
  v41[4] = &off_101077A98;
  LOBYTE(v41[0]) = 1;
  v13 = (uint64_t *)&v12[OBJC_IVAR____TtC12searchpartyd10Peripheral_services];
  swift_beginAccess(&v12[OBJC_IVAR____TtC12searchpartyd10Peripheral_services], v40, 0, 0);
  v14 = *v13;
  v39 = v41;
  swift_bridgeObjectRetain(v14);
  sub_100A7771C((uint64_t (*)(uint64_t *))sub_1000FC260, (uint64_t)v38, v14);
  v16 = v15;
  swift_bridgeObjectRelease();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v41);
  if (v16)
  {
    v17 = sub_10001A9A8(&qword_1010ED388);
    v18 = swift_allocObject(v17, 72, 7);
    *(_OWORD *)(v18 + 16) = xmmword_100E22B00;
    *(_QWORD *)(v18 + 56) = &type metadata for BACharacteristicIdentifier.FindMy;
    *(_QWORD *)(v18 + 64) = &off_101077A78;
    *(_BYTE *)(v18 + 32) = 2;
    v19 = swift_allocObject(&unk_101062068, 32, 7);
    *(_QWORD *)(v19 + 16) = v16;
    *(_QWORD *)(v19 + 24) = v18;
    v20 = sub_10001A9A8((uint64_t *)&unk_1010FBA90);
    swift_allocObject(v20, *(unsigned int *)(v20 + 48), *(unsigned __int16 *)(v20 + 52));
    swift_retain();
    v21 = swift_bridgeObjectRetain(v18);
    v41[0] = Future.init(_:)(sub_100245664, v19, v21);
    v22 = sub_1000193A4((unint64_t *)&qword_101121800, (uint64_t *)&unk_1010FBA90, (const char *)&protocol conformance descriptor for Future<A, B>);
    v23 = Publisher.eraseToAnyPublisher()(v20, v22);
    swift_bridgeObjectRelease();
    swift_release();
    result = swift_release();
  }
  else
  {
    if (qword_1010E9AA8 != -1)
      swift_once(&qword_1010E9AA8, sub_100217BB8);
    v25 = type metadata accessor for Logger(0);
    v26 = sub_10001A9E8(v25, (uint64_t)qword_1011B6C30);
    v27 = Logger.logObject.getter(v26);
    v28 = static os_log_type_t.error.getter(v27);
    if (os_log_type_enabled(v27, v28))
    {
      v29 = (uint8_t *)swift_slowAlloc(2, -1);
      v37 = a2;
      v30 = v29;
      *(_WORD *)v29 = 0;
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "No FindMy service", v29, 2u);
      v31 = v30;
      a2 = v37;
      swift_slowDealloc(v31, -1, -1);
    }

    v41[0] = v12;
    v32 = type metadata accessor for Peripheral(0);
    v33 = v12;
    Just.init(_:)(v41, v32);
    v34 = sub_100059390();
    Just.setFailureType<A>(to:)(&type metadata for CentralManager.Error, v4, &type metadata for CentralManager.Error, v34);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    v35 = sub_1000193A4(&qword_1010EEEB8, (uint64_t *)&unk_1010FBA80, (const char *)&protocol conformance descriptor for Result<A, B>.Publisher);
    v23 = Publisher.eraseToAnyPublisher()(v8, v35);
    result = (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }
  *a2 = v23;
  return result;
}

uint64_t sub_1002197E4(_QWORD *a1)
{
  return sub_10021D8E0(a1, &qword_1011074A0);
}

_QWORD *sub_1002197F0(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v6;
  _QWORD *result;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  void *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  _BYTE v36[16];
  _QWORD *v37;
  uint64_t v38[4];
  uint64_t v39;
  _QWORD v40[6];
  _QWORD v41[3];
  ValueMetadata *v42;
  _UNKNOWN **v43;
  _QWORD v44[5];
  char v45;
  _BYTE v46[24];

  v6 = a3 + 16;
  Transaction.capture()();
  swift_beginAccess(v6, v46, 0, 0);
  result = (_QWORD *)swift_weakLoadStrong(v6);
  if (result)
  {
    sub_10000F9B8(a1, (uint64_t)v44, &qword_1011074A0);
    if ((v45 & 1) != 0)
    {
      sub_100059244((uint64_t)v44, (uint64_t)v41);
      if (qword_1010E9AA8 != -1)
        swift_once(&qword_1010E9AA8, sub_100217BB8);
      v8 = type metadata accessor for Logger(0);
      sub_10001A9E8(v8, (uint64_t)qword_1011B6C30);
      v9 = sub_100059280(v41, (uint64_t)v40);
      v10 = Logger.logObject.getter(v9);
      v11 = static os_log_type_t.error.getter(v10);
      if (os_log_type_enabled(v10, v11))
      {
        v12 = (uint8_t *)swift_slowAlloc(12, -1);
        v13 = swift_slowAlloc(32, -1);
        v38[0] = v13;
        *(_DWORD *)v12 = 136446210;
        sub_100E01294();
        v39 = sub_100016940(v14, v15, v38);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, v40, v12 + 4, v12 + 12);
        swift_bridgeObjectRelease();
        sub_1000593D4(v40);
        _os_log_impl((void *)&_mh_execute_header, v10, v11, "readMetadata failed due to %{public}s", v12, 0xCu);
        swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v13, -1, -1);
        swift_slowDealloc(v12, -1, -1);
      }
      else
      {
        sub_1000593D4(v40);
      }

      sub_10021C1E8(a4);
      swift_release();
      return sub_1000593D4(v41);
    }
    else
    {
      v16 = (void *)v44[0];
      v42 = &type metadata for BAServiceIdentifier;
      v43 = &off_101077A98;
      LOBYTE(v41[0]) = 1;
      v17 = (uint64_t *)(v44[0] + OBJC_IVAR____TtC12searchpartyd10Peripheral_services);
      swift_beginAccess(v44[0] + OBJC_IVAR____TtC12searchpartyd10Peripheral_services, v40, 0, 0);
      v18 = *v17;
      __chkstk_darwin(v19);
      v37 = v41;
      swift_bridgeObjectRetain(v18);
      sub_100A7771C((uint64_t (*)(uint64_t *))sub_1000FC260, (uint64_t)v36, v18);
      v21 = v20;
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v41);
      if (v21)
      {
        v42 = &type metadata for BACharacteristicIdentifier.FindMy;
        v43 = &off_101077A78;
        LOBYTE(v41[0]) = 2;
        swift_beginAccess(v21 + 40, v38, 0, 0);
        v22 = *(_QWORD *)(v21 + 40);
        __chkstk_darwin(v23);
        v37 = v41;
        swift_bridgeObjectRetain(v22);
        sub_100A77748((uint64_t (*)(uint64_t *))sub_100245470, (uint64_t)v36, v22);
        v25 = v24;
        swift_bridgeObjectRelease();
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v41);
        if (v25)
        {
          sub_10021CF14((uint64_t)v16, v25);
          sub_10021C624((uint64_t)v16, v25);

          swift_release();
        }
        else
        {
          if (qword_1010E9AA8 != -1)
            swift_once(&qword_1010E9AA8, sub_100217BB8);
          v31 = type metadata accessor for Logger(0);
          v32 = sub_10001A9E8(v31, (uint64_t)qword_1011B6C30);
          v33 = Logger.logObject.getter(v32);
          v34 = static os_log_type_t.error.getter(v33);
          if (os_log_type_enabled(v33, v34))
          {
            v35 = (uint8_t *)swift_slowAlloc(2, -1);
            *(_WORD *)v35 = 0;
            _os_log_impl((void *)&_mh_execute_header, v33, v34, "Missing Paired Owner Characteristic!", v35, 2u);
            swift_slowDealloc(v35, -1, -1);
          }

        }
        swift_release();
      }
      else
      {
        if (qword_1010E9AA8 != -1)
          swift_once(&qword_1010E9AA8, sub_100217BB8);
        v26 = type metadata accessor for Logger(0);
        v27 = sub_10001A9E8(v26, (uint64_t)qword_1011B6C30);
        v28 = Logger.logObject.getter(v27);
        v29 = static os_log_type_t.error.getter(v28);
        if (os_log_type_enabled(v28, v29))
        {
          v30 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v30 = 0;
          _os_log_impl((void *)&_mh_execute_header, v28, v29, "No FindMy service", v30, 2u);
          swift_slowDealloc(v30, -1, -1);
        }

      }
      return (_QWORD *)swift_release();
    }
  }
  return result;
}

uint64_t sub_100219CE8(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v18[2];

  v3 = *v1;
  v4 = type metadata accessor for MACAddress(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  __chkstk_darwin(v4);
  v7 = (char *)v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = swift_allocObject(&unk_101061DC0, 24, 7);
  swift_weakInit(v8 + 16, v1);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  v9 = *(unsigned __int8 *)(v5 + 80);
  v10 = (v9 + 24) & ~v9;
  v11 = (v6 + v10 + 7) & 0xFFFFFFFFFFFFFFF8;
  v12 = swift_allocObject(&unk_101061F50, v11 + 8, v9 | 7);
  *(_QWORD *)(v12 + 16) = v8;
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(v12 + v10, v7, v4);
  *(_QWORD *)(v12 + v11) = v3;
  v13 = sub_10001A9A8(&qword_1010F3978);
  swift_allocObject(v13, *(unsigned int *)(v13 + 48), *(unsigned __int16 *)(v13 + 52));
  v18[1] = Future.init(_:)(sub_100244708, v12, v14);
  v15 = sub_1000193A4((unint64_t *)&unk_10111C230, &qword_1010F3978, (const char *)&protocol conformance descriptor for Future<A, B>);
  v16 = Publisher.eraseToAnyPublisher()(v13, v15);
  swift_release();
  return v16;
}

uint64_t sub_100219E5C(void (*a1)(char *), void (*a2)(char *), uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t Strong;
  uint64_t v30;
  uint64_t v31;
  objc_class *v32;
  void **v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  NSObject *v38;
  void (**v39)(char *);
  void (*v40)(char *);
  uint64_t v41;
  void *v42;
  void **v43;
  char isEscapingClosureAtFileLocation;
  uint64_t v45;
  NSObject *v46;
  NSObject *v47;
  os_log_type_t v48;
  uint8_t *v49;
  uint64_t *v50;
  NSObject *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  dispatch_queue_t v56;
  uint64_t v57;
  NSObject *v58;
  os_log_type_t v59;
  uint64_t v60;
  void **v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  objc_class *v65;
  void **v66;
  id v67;
  uint64_t v68;
  uint64_t v69;
  id v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  objc_class *v83;
  void **v84;
  uint64_t v85;
  void (*v86)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v87;
  void **v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  void **v97;
  uint64_t v98;
  void **v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  _QWORD *v117;
  void *v118;
  void (*v119)(char *);
  uint64_t v120;
  id v121;
  uint64_t v122;
  id v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  void (*v131)(char *, uint64_t, uint64_t, uint64_t);
  id v132;
  uint64_t v133;
  uint64_t v134;
  dispatch_queue_t v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  char *v145;
  uint64_t v146;
  uint64_t v147;
  char *v148;
  uint64_t v149;
  char *v150;
  uint64_t v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  char *v157;
  char *v158;
  uint64_t v159;
  uint64_t v160;
  char *v161;
  objc_class *v162;
  void (*v163)(char *);
  uint64_t v164;
  void (*v165)(char *);
  void **aBlock;
  _QWORD v167[5];
  uint64_t v168;
  char v169[8];
  char v170[8];

  v164 = a4;
  v165 = a1;
  v6 = sub_10001A9A8(&qword_1010EECC8);
  __chkstk_darwin(v6);
  v158 = (char *)&v126 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v138 = sub_10001A9A8(&qword_1010F3980);
  v137 = *(_QWORD *)(v138 - 8);
  __chkstk_darwin(v138);
  v136 = (char *)&v126 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v141 = sub_10001A9A8(&qword_1010F3988);
  v140 = *(_QWORD *)(v141 - 8);
  __chkstk_darwin(v141);
  v139 = (char *)&v126 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v144 = sub_10001A9A8(&qword_1010F3990);
  v143 = *(_QWORD *)(v144 - 8);
  __chkstk_darwin(v144);
  v142 = (char *)&v126 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v147 = sub_10001A9A8(&qword_1010F3998);
  v146 = *(_QWORD *)(v147 - 8);
  __chkstk_darwin(v147);
  v145 = (char *)&v126 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v151 = sub_10001A9A8(&qword_1010F39A0);
  v149 = *(_QWORD *)(v151 - 8);
  __chkstk_darwin(v151);
  v148 = (char *)&v126 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v154 = sub_10001A9A8(&qword_1010F39A8);
  v153 = *(_QWORD *)(v154 - 8);
  __chkstk_darwin(v154);
  v150 = (char *)&v126 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v156 = sub_10001A9A8(&qword_1010F39B0);
  v155 = *(_QWORD *)(v156 - 8);
  __chkstk_darwin(v156);
  v152 = (char *)&v126 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_10001A9A8(&qword_1010F39B8);
  v159 = *(_QWORD *)(v15 - 8);
  v160 = v15;
  __chkstk_darwin(v15);
  v157 = (char *)&v126 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_10001A9A8(&qword_1010F39C0);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v161 = (char *)&v126 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for MACAddress(0);
  v21 = *(_QWORD *)(v20 - 8);
  v22 = *(_QWORD *)(v21 + 64);
  v23 = __chkstk_darwin(v20);
  v24 = (char *)&v126 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  v135 = (dispatch_queue_t)((char *)&v126 - v25);
  v26 = sub_10001A9A8(&qword_1010F39C8);
  __chkstk_darwin(v26);
  v28 = (char *)&v126 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  a3 += 16;
  swift_beginAccess(a3, v170, 0, 0);
  Strong = swift_weakLoadStrong(a3);
  if (!Strong)
  {
    v53 = type metadata accessor for BluetoothCommunicationCoordinator.Error(0);
    swift_storeEnumTagMultiPayload(v28, v53, 3);
    swift_storeEnumTagMultiPayload(v28, v26, 1);
    v165(v28);
    return sub_100004048((uint64_t)v28, &qword_1010F39C8);
  }
  v132 = (id)v26;
  v133 = v18;
  v134 = v17;
  v163 = a2;
  v30 = __chkstk_darwin(Strong);
  *(&v126 - 2) = v164;
  *(&v126 - 1) = v31;
  v32 = (objc_class *)v30;
  swift_retain();
  sub_10001A9A8(&qword_101110700);
  Lock.callAsFunction<A>(_:)(sub_1000FA494);
  swift_release();
  v33 = aBlock;
  v162 = v32;
  if (!aBlock)
  {
    v54 = v164;
    if (qword_1010E9AA8 != -1)
      swift_once(&qword_1010E9AA8, sub_100217BB8);
    v55 = type metadata accessor for Logger(0);
    sub_10001A9E8(v55, (uint64_t)qword_1011B6C30);
    v56 = v135;
    v57 = (*(uint64_t (**)(dispatch_queue_t, uint64_t, uint64_t))(v21 + 16))(v135, v54, v20);
    v58 = Logger.logObject.getter(v57);
    v59 = static os_log_type_t.error.getter(v58);
    if (os_log_type_enabled(v58, v59))
    {
      v60 = swift_slowAlloc(22, -1);
      v61 = (void **)swift_slowAlloc(32, -1);
      aBlock = v61;
      *(_DWORD *)v60 = 141558275;
      v168 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v168, v169, v60 + 4, v60 + 12);
      *(_WORD *)(v60 + 12) = 2081;
      v164 = v60 + 14;
      v62 = sub_100006204((unint64_t *)&qword_1010FBAE0, (uint64_t (*)(uint64_t))&type metadata accessor for MACAddress, (uint64_t)&protocol conformance descriptor for MACAddress);
      v63 = dispatch thunk of CustomStringConvertible.description.getter(v20, v62);
      v168 = sub_100016940(v63, v64, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v168, v169, v164, v60 + 22);
      swift_bridgeObjectRelease();
      (*(void (**)(dispatch_queue_t, uint64_t))(v21 + 8))(v56, v20);
      _os_log_impl((void *)&_mh_execute_header, v58, v59, "Unable to retrieve peripheral for %{private,mask.hash}s", (uint8_t *)v60, 0x16u);
      swift_arrayDestroy(v61, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v61, -1, -1);
      swift_slowDealloc(v60, -1, -1);
    }
    else
    {
      (*(void (**)(dispatch_queue_t, uint64_t))(v21 + 8))(v56, v20);
    }

    v124 = v132;
    v125 = type metadata accessor for BluetoothCommunicationCoordinator.Error(0);
    swift_storeEnumTagMultiPayload(v28, v125, 7);
    swift_storeEnumTagMultiPayload(v28, v124, 1);
    v165(v28);
    swift_release();
    return sub_100004048((uint64_t)v28, &qword_1010F39C8);
  }
  v135 = (dispatch_queue_t)*((_QWORD *)v32 + 4);
  (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v24, v164, v20);
  v34 = *(unsigned __int8 *)(v21 + 80);
  v35 = (v34 + 24) & ~v34;
  v36 = (v22 + v35 + 7) & 0xFFFFFFFFFFFFFFF8;
  v37 = (v36 + 23) & 0xFFFFFFFFFFFFFFF8;
  v38 = swift_allocObject(&unk_101061F78, v37 + 8, v34 | 7);
  v38[2].isa = v32;
  (*(void (**)(char *, char *, uint64_t))(v21 + 32))((char *)v38 + v35, v24, v20);
  v39 = (void (**)(char *))((char *)v38 + v36);
  v40 = v163;
  *v39 = v165;
  v39[1] = v40;
  *(Class *)((char *)&v38->isa + v37) = (Class)v33;
  v41 = swift_allocObject(&unk_101061FA0, 32, 7);
  *(_QWORD *)(v41 + 16) = sub_100244810;
  *(_QWORD *)(v41 + 24) = v38;
  v167[3] = sub_10001D850;
  v167[4] = v41;
  aBlock = _NSConcreteStackBlock;
  v167[0] = 1107296256;
  v167[1] = sub_10001D8B8;
  v167[2] = &unk_101061FB8;
  v42 = _Block_copy(&aBlock);
  swift_retain();
  swift_retain();
  v164 = (uint64_t)v33;
  v43 = v33;
  swift_retain();
  swift_release();
  dispatch_sync(v135, v42);
  _Block_release(v42);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v41, "", 133, 174, 35, 1);
  swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
    __break(1u);
    goto LABEL_18;
  }
  if (qword_1010E9AA8 != -1)
LABEL_18:
    swift_once(&qword_1010E9AA8, sub_100217BB8);
  v135 = v38;
  v45 = type metadata accessor for Logger(0);
  sub_10001A9E8(v45, (uint64_t)qword_1011B6C30);
  v46 = v43;
  v47 = Logger.logObject.getter(v46);
  v48 = static os_log_type_t.default.getter(v47);
  if (os_log_type_enabled(v47, v48))
  {
    v49 = (uint8_t *)swift_slowAlloc(12, -1);
    v50 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v49 = 138412290;
    aBlock = (void **)&v46->isa;
    v51 = v46;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v167, v49 + 4, v49 + 12);
    *v50 = v164;

    _os_log_impl((void *)&_mh_execute_header, v47, v48, "readMetadataAirTag peripheral: %@", v49, 0xCu);
    v52 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v50, 1, v52);
    swift_slowDealloc(v50, -1, -1);
    swift_slowDealloc(v49, -1, -1);
  }
  else
  {

    v47 = v46;
  }

  v65 = v162;
  swift_retain();
  v132 = v46;
  v66 = (void **)sub_100E0799C((char *)v46, 0);
  swift_release();
  aBlock = v66;
  v168 = *((_QWORD *)v65 + 4);
  v67 = (id)v168;
  v68 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
  v131 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v68 - 8) + 56);
  v69 = (uint64_t)v158;
  v130 = v68;
  v131(v158, 1, 1, v68);
  v70 = v67;
  v71 = sub_10001A9A8((uint64_t *)&unk_1010FB890);
  v72 = sub_10000F4A0(0, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr);
  v73 = sub_1000193A4((unint64_t *)&unk_1010FB8A0, (uint64_t *)&unk_1010FB890, (const char *)&protocol conformance descriptor for AnyPublisher<A, B>);
  v164 = sub_10001AC90((unint64_t *)&qword_10111C120, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr, (const char *)&protocol conformance descriptor for OS_dispatch_queue);
  v74 = v136;
  v129 = v71;
  v127 = v72;
  Publisher.receive<A>(on:options:)(&v168, v69, v71, v72, v73, v164);
  sub_100004048(v69, &qword_1010EECC8);

  v75 = swift_release();
  v76 = static Subscribers.Demand.unlimited.getter(v75);
  v77 = type metadata accessor for Peripheral(0);
  v128 = v77;
  v78 = sub_1000193A4(&qword_1010F39D0, &qword_1010F3980, (const char *)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  v79 = v139;
  v80 = v138;
  v81 = v71;
  v82 = v73;
  Publisher.flatMap<A, B>(maxPublishers:_:)(v76, sub_10021B3A4, 0, v138, v77, v81, v78, v73);
  (*(void (**)(char *, uint64_t))(v137 + 8))(v74, v80);
  v83 = v162;
  aBlock = (void **)*((_QWORD *)v162 + 4);
  v84 = aBlock;
  v85 = v68;
  v86 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v131;
  v131((char *)v69, 1, 1, v85);
  v87 = sub_1000193A4(&qword_1010F39D8, &qword_1010F3988, (const char *)&protocol conformance descriptor for Publishers.FlatMap<A, B>);
  v88 = v84;
  v89 = v142;
  v90 = v141;
  Publisher.receive<A>(on:options:)(&aBlock, v69, v141, v72, v87, v164);
  sub_100004048(v69, &qword_1010EECC8);

  v91 = (*(uint64_t (**)(char *, uint64_t))(v140 + 8))(v79, v90);
  v92 = static Subscribers.Demand.unlimited.getter(v91);
  v93 = sub_1000193A4(&qword_1010F39E0, &qword_1010F3990, (const char *)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  v94 = v145;
  v95 = v144;
  v96 = v128;
  Publisher.flatMap<A, B>(maxPublishers:_:)(v92, sub_10021B458, 0, v144, v128, v129, v93, v82);
  (*(void (**)(char *, uint64_t))(v143 + 8))(v89, v95);
  aBlock = (void **)*((_QWORD *)v83 + 4);
  v97 = aBlock;
  v86(v69, 1, 1, v130);
  v98 = sub_1000193A4(&qword_1010F39E8, &qword_1010F3998, (const char *)&protocol conformance descriptor for Publishers.FlatMap<A, B>);
  v99 = v97;
  v100 = v148;
  v101 = v147;
  Publisher.receive<A>(on:options:)(&aBlock, v69, v147, v127, v98, v164);
  sub_100004048(v69, &qword_1010EECC8);

  (*(void (**)(char *, uint64_t))(v146 + 8))(v94, v101);
  v102 = *((_QWORD *)v83 + 4);
  v103 = sub_1000193A4(&qword_1010F39F0, &qword_1010F39A0, (const char *)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  v104 = v150;
  v105 = v151;
  Publisher.timeout(_:queue:customError:)(v102, sub_1000FC3D0, 0, v151, v103, 60.0);
  (*(void (**)(char *, uint64_t))(v149 + 8))(v100, v105);
  v106 = sub_1000193A4(&qword_1010F39F8, &qword_1010F39A8, (const char *)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  v107 = v152;
  v108 = v154;
  Publisher.compactMap<A>(_:)(sub_10024546C, 0, v154, v96, v106);
  (*(void (**)(char *, uint64_t))(v153 + 8))(v104, v108);
  v109 = sub_10001A9A8(&qword_1011074A0);
  v110 = v156;
  v111 = v157;
  Publishers.CompactMap.map<A>(_:)(sub_100245644, 0, v156, v109);
  (*(void (**)(char *, uint64_t))(v155 + 8))(v107, v110);
  v112 = sub_10001A9A8(&qword_1010EEE90);
  v113 = sub_1000193A4(&qword_1010F3A00, &qword_1010F39B8, (const char *)&protocol conformance descriptor for Publishers.CompactMap<A, B>);
  v114 = sub_1000193A4(&qword_1010EEEA0, &qword_1010EEE90, (const char *)&protocol conformance descriptor for Just<A>);
  v115 = v160;
  v116 = v161;
  Publisher.catch<A>(_:)(sub_1002197E4, 0, v160, v112, v113, v114);
  (*(void (**)(char *, uint64_t))(v159 + 8))(v111, v115);
  v117 = (_QWORD *)swift_allocObject(&unk_101061FF0, 48, 7);
  v118 = v132;
  v117[2] = v83;
  v117[3] = v118;
  v119 = v163;
  v117[4] = v165;
  v117[5] = v119;
  v120 = sub_1000193A4(&qword_1010F3A08, &qword_1010F39C0, (const char *)&protocol conformance descriptor for Publishers.Catch<A, B>);
  swift_retain();
  swift_retain();
  v121 = v118;
  v122 = v134;
  Publisher<>.sink(receiveValue:)(sub_1002448A8, v117, v134, v120);
  swift_release();
  (*(void (**)(char *, uint64_t))(v133 + 8))(v116, v122);
  swift_beginAccess((char *)v83 + 40, &aBlock, 33, 0);
  AnyCancellable.store(in:)((char *)v83 + 40);
  swift_endAccess(&aBlock);
  swift_release();
  swift_release();

  return swift_release();
}

uint64_t sub_10021AE8C(uint64_t a1, uint64_t a2, void (*a3)(uint64_t), uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t *v19;
  __n128 v20;
  char v21;
  char v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  int *v40;
  _QWORD *v41;
  uint64_t v42;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  void (*v52)(uint64_t);
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56[3];
  char v57[24];

  v52 = a3;
  *(_QWORD *)&v53 = a5;
  v51 = a4;
  v49 = sub_10001A9A8(&qword_1010F39C8);
  __chkstk_darwin(v49);
  v50 = (char *)&v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for MACAddress(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v48 = (char *)&v47 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v17 = (char *)&v47 - v16;
  v18 = sub_10001A9A8(&qword_1010F3A10);
  swift_allocObject(v18, *(unsigned int *)(v18 + 48), *(unsigned __int16 *)(v18 + 52));
  v54 = PassthroughSubject.init()();
  v19 = (uint64_t *)(a1 + 48);
  v20 = swift_beginAccess(a1 + 48, v57, 0, 0);
  if (*(_QWORD *)(*(_QWORD *)(a1 + 48) + 16)
    && (swift_bridgeObjectRetain(*(_QWORD *)(a1 + 48)),
        sub_1005193C8(a2),
        v22 = v21,
        swift_bridgeObjectRelease(),
        (v22 & 1) != 0))
  {
    if (qword_1010E9AA8 != -1)
      swift_once(&qword_1010E9AA8, sub_100217BB8);
    v23 = type metadata accessor for Logger(0);
    sub_10001A9E8(v23, (uint64_t)qword_1011B6C30);
    v24 = v48;
    v25 = v12;
    v26 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 16))(v48, a2, v12);
    v27 = Logger.logObject.getter(v26);
    v28 = static os_log_type_t.error.getter(v27);
    if (os_log_type_enabled(v27, v28))
    {
      v29 = swift_slowAlloc(22, -1);
      v30 = swift_slowAlloc(32, -1);
      *(_DWORD *)v29 = 141558275;
      v55 = 1752392040;
      v56[0] = v30;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, v56, v29 + 4, v29 + 12);
      *(_WORD *)(v29 + 12) = 2081;
      v31 = sub_100006204((unint64_t *)&qword_1010FBAE0, (uint64_t (*)(uint64_t))&type metadata accessor for MACAddress, (uint64_t)&protocol conformance descriptor for MACAddress);
      v32 = dispatch thunk of CustomStringConvertible.description.getter(v25, v31);
      v55 = sub_100016940(v32, v33, v56);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, v56, v29 + 14, v29 + 22);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v13 + 8))(v24, v25);
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "Existing metadata session for %{private,mask.hash}s in progress!", (uint8_t *)v29, 0x16u);
      swift_arrayDestroy(v30, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v30, -1, -1);
      swift_slowDealloc(v29, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v13 + 8))(v24, v12);
    }

    v45 = type metadata accessor for BluetoothCommunicationCoordinator.Error(0);
    v46 = (uint64_t)v50;
    swift_storeEnumTagMultiPayload(v50, v45, 4);
    swift_storeEnumTagMultiPayload(v46, v49, 1);
    v52(v46);
    swift_release();
    return sub_100004048(v46, &qword_1010F39C8);
  }
  else
  {
    v34 = v12;
    (*(void (**)(char *, uint64_t, uint64_t, __n128))(v13 + 16))(v17, a2, v12, v20);
    v35 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v53
                                                                + OBJC_IVAR____TtC12searchpartyd10Peripheral_underlyingObject), "identifier"));
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v35);

    v36 = type metadata accessor for AccessoryMetadataManager.MetadataCoordinator(0);
    v37 = swift_allocObject(v36, *(unsigned int *)(v36 + 48), *(unsigned __int16 *)(v36 + 52));
    *(_QWORD *)(v37
              + OBJC_IVAR____TtCC12searchpartyd24AccessoryMetadataManagerP33_9E4B9D7C2AC40BB201ED52E047F00DA919MetadataCoordinator_writeQueue) = _swiftEmptyArrayStorage;
    v53 = xmmword_100E22B20;
    *(_OWORD *)(v37
              + OBJC_IVAR____TtCC12searchpartyd24AccessoryMetadataManagerP33_9E4B9D7C2AC40BB201ED52E047F00DA919MetadataCoordinator_readBuffer) = xmmword_100E22B20;
    v38 = (_QWORD *)(v37
                   + OBJC_IVAR____TtCC12searchpartyd24AccessoryMetadataManagerP33_9E4B9D7C2AC40BB201ED52E047F00DA919MetadataCoordinator_writePromise);
    *v38 = 0;
    v38[1] = 0;
    *(_QWORD *)(v37 + 16) = v54;
    v39 = v37
        + OBJC_IVAR____TtCC12searchpartyd24AccessoryMetadataManagerP33_9E4B9D7C2AC40BB201ED52E047F00DA919MetadataCoordinator_info;
    (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(v37+ OBJC_IVAR____TtCC12searchpartyd24AccessoryMetadataManagerP33_9E4B9D7C2AC40BB201ED52E047F00DA919MetadataCoordinator_info, v11, v8);
    v40 = (int *)type metadata accessor for AccessoryMetadataManager.MetadataInfo(0);
    *(_OWORD *)(v39 + v40[5]) = v53;
    v41 = (_QWORD *)(v39 + v40[6]);
    *v41 = 0;
    v41[1] = 0;
    v42 = v39 + v40[7];
    *(_DWORD *)v42 = 0;
    *(_BYTE *)(v42 + 4) = 1;
    *(_DWORD *)(v39 + v40[8]) = 0;
    swift_beginAccess(v19, v56, 33, 0);
    swift_retain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v19);
    v55 = *v19;
    *v19 = 0x8000000000000000;
    sub_10010AE90(v37, (uint64_t)v17, isUniquelyReferenced_nonNull_native);
    *v19 = v55;
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v13 + 8))(v17, v34);
    swift_endAccess(v56);
    return swift_release();
  }
}

uint64_t sub_10021B3A4@<X0>(uint64_t *a1@<X8>)
{
  return sub_10021B3AC(2, a1);
}

uint64_t sub_10021B3AC@<X0>(char a1@<W1>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t inited;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  _BYTE v9[72];

  v4 = sub_10001A9A8(&qword_1010ED4E8);
  inited = swift_initStackObject(v4, v9);
  *(_OWORD *)(inited + 16) = xmmword_100E22B00;
  *(_QWORD *)(inited + 56) = &type metadata for BAServiceIdentifier;
  *(_QWORD *)(inited + 64) = &off_101077A98;
  *(_BYTE *)(inited + 32) = a1;
  v6 = sub_10078921C(inited);
  swift_setDeallocating(inited);
  v7 = sub_10001A9A8(&qword_1010ED4F0);
  result = swift_arrayDestroy(inited + 32, 1, v7);
  *a2 = v6;
  return result;
}

uint64_t sub_10021B458@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint8_t *v30;
  uint8_t *v31;
  uint64_t v32;
  char *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  char v38[16];
  _QWORD *v39;
  char v40[24];
  _QWORD v41[5];

  v4 = sub_10001A9A8(&qword_1010EEEB0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A9A8((uint64_t *)&unk_1010FBA80);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (char *)*a1;
  v41[3] = &type metadata for BAServiceIdentifier;
  v41[4] = &off_101077A98;
  LOBYTE(v41[0]) = 2;
  v13 = (uint64_t *)&v12[OBJC_IVAR____TtC12searchpartyd10Peripheral_services];
  swift_beginAccess(&v12[OBJC_IVAR____TtC12searchpartyd10Peripheral_services], v40, 0, 0);
  v14 = *v13;
  v39 = v41;
  swift_bridgeObjectRetain(v14);
  sub_100A7771C((uint64_t (*)(uint64_t *))sub_1000FC260, (uint64_t)v38, v14);
  v16 = v15;
  swift_bridgeObjectRelease();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v41);
  if (v16)
  {
    v17 = sub_10001A9A8(&qword_1010ED388);
    v18 = swift_allocObject(v17, 72, 7);
    *(_OWORD *)(v18 + 16) = xmmword_100E22B00;
    *(_QWORD *)(v18 + 56) = &type metadata for BACharacteristicIdentifier.UnauthorizedAirTag;
    *(_QWORD *)(v18 + 64) = &off_101077A68;
    *(_BYTE *)(v18 + 32) = 0;
    v19 = swift_allocObject(&unk_101062018, 32, 7);
    *(_QWORD *)(v19 + 16) = v16;
    *(_QWORD *)(v19 + 24) = v18;
    v20 = sub_10001A9A8((uint64_t *)&unk_1010FBA90);
    swift_allocObject(v20, *(unsigned int *)(v20 + 48), *(unsigned __int16 *)(v20 + 52));
    swift_retain();
    v21 = swift_bridgeObjectRetain(v18);
    v41[0] = Future.init(_:)(sub_1000FA48C, v19, v21);
    v22 = sub_1000193A4((unint64_t *)&qword_101121800, (uint64_t *)&unk_1010FBA90, (const char *)&protocol conformance descriptor for Future<A, B>);
    v23 = Publisher.eraseToAnyPublisher()(v20, v22);
    swift_bridgeObjectRelease();
    swift_release();
    result = swift_release();
  }
  else
  {
    if (qword_1010E9AA8 != -1)
      swift_once(&qword_1010E9AA8, sub_100217BB8);
    v25 = type metadata accessor for Logger(0);
    v26 = sub_10001A9E8(v25, (uint64_t)qword_1011B6C30);
    v27 = Logger.logObject.getter(v26);
    v28 = static os_log_type_t.error.getter(v27);
    if (os_log_type_enabled(v27, v28))
    {
      v29 = (uint8_t *)swift_slowAlloc(2, -1);
      v37 = a2;
      v30 = v29;
      *(_WORD *)v29 = 0;
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "No UT service", v29, 2u);
      v31 = v30;
      a2 = v37;
      swift_slowDealloc(v31, -1, -1);
    }

    v41[0] = v12;
    v32 = type metadata accessor for Peripheral(0);
    v33 = v12;
    Just.init(_:)(v41, v32);
    v34 = sub_100059390();
    Just.setFailureType<A>(to:)(&type metadata for CentralManager.Error, v4, &type metadata for CentralManager.Error, v34);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    v35 = sub_1000193A4(&qword_1010EEEB8, (uint64_t *)&unk_1010FBA80, (const char *)&protocol conformance descriptor for Result<A, B>.Publisher);
    v23 = Publisher.eraseToAnyPublisher()(v8, v35);
    result = (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }
  *a2 = v23;
  return result;
}

unint64_t sub_10021B7E4(uint64_t a1, uint64_t a2, void *a3, void (*a4)(uint64_t *), uint64_t a5)
{
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  void (*v39)(uint64_t);
  id v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  NSObject *v44;
  os_log_type_t v45;
  BOOL v46;
  uint8_t *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  NSObject *v56;
  os_log_type_t v57;
  BOOL v58;
  void (*v59)(uint64_t);
  id v60;
  uint8_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  NSObject *v65;
  os_log_type_t v66;
  _BOOL4 v67;
  uint8_t *v68;
  uint64_t v69;
  unint64_t result;
  uint64_t v71;
  unint64_t v72;
  id v73;
  __int16 v74;
  unint64_t v75;
  unint64_t v76;
  char *v77;
  char *v78;
  char *v79;
  uint64_t v80;
  char *v81;
  char *v82;
  char *v83;
  char *v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t *v92;
  char *v93;
  void (*v94)(uint64_t);
  void *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98[4];
  uint64_t v99;
  _QWORD v100[6];
  _QWORD v101[3];
  ValueMetadata *v102;
  _UNKNOWN **v103;
  _QWORD v104[5];
  char v105;

  v97 = a2;
  v96 = sub_10001A9A8(&qword_1010F39C8);
  __chkstk_darwin(v96);
  v10 = (uint64_t *)((char *)&v88 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = type metadata accessor for UUID(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v88 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = (int *)type metadata accessor for AccessoryMetadata(0);
  __chkstk_darwin(v15);
  v17 = (char *)&v88 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000F9B8(a1, (uint64_t)v104, &qword_1011074A0);
  if ((v105 & 1) != 0)
  {
    sub_100059244((uint64_t)v104, (uint64_t)v101);
    if (qword_1010E9AA8 != -1)
      swift_once(&qword_1010E9AA8, sub_100217BB8);
    v18 = type metadata accessor for Logger(0);
    sub_10001A9E8(v18, (uint64_t)qword_1011B6C30);
    v19 = sub_100059280(v101, (uint64_t)v100);
    v20 = Logger.logObject.getter(v19);
    v21 = static os_log_type_t.error.getter(v20);
    if (os_log_type_enabled(v20, v21))
    {
      v22 = (uint8_t *)swift_slowAlloc(12, -1);
      v23 = swift_slowAlloc(32, -1);
      v95 = a3;
      v24 = v23;
      v98[0] = v23;
      *(_DWORD *)v22 = 136446210;
      sub_100E01294();
      v99 = sub_100016940(v25, v26, v98);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v99, v100, v22 + 4, v22 + 12);
      swift_bridgeObjectRelease();
      sub_1000593D4(v100);
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "readMetadata failed due to %{public}s", v22, 0xCu);
      swift_arrayDestroy(v24, 1, (char *)&type metadata for Any + 8);
      v27 = v24;
      a3 = v95;
      swift_slowDealloc(v27, -1, -1);
      swift_slowDealloc(v22, -1, -1);
    }
    else
    {
      sub_1000593D4(v100);
    }

    v50 = sub_100059390();
    v51 = swift_allocError(&type metadata for CentralManager.Error, v50, 0, 0);
    sub_100059280(v101, v52);
    *v10 = v51;
    v53 = type metadata accessor for BluetoothCommunicationCoordinator.Error(0);
    swift_storeEnumTagMultiPayload(v10, v53, 0);
    swift_storeEnumTagMultiPayload(v10, v96, 1);
    a4(v10);
    sub_100004048((uint64_t)v10, &qword_1010F39C8);
    sub_1000593D4(v101);
    return sub_10021C1E8(a3);
  }
  v94 = (void (*)(uint64_t))a4;
  v92 = v10;
  v95 = a3;
  v102 = &type metadata for BAServiceIdentifier;
  v103 = &off_101077A98;
  LOBYTE(v101[0]) = 2;
  v93 = (char *)v104[0];
  v28 = (uint64_t *)(v104[0] + OBJC_IVAR____TtC12searchpartyd10Peripheral_services);
  swift_beginAccess(v104[0] + OBJC_IVAR____TtC12searchpartyd10Peripheral_services, v100, 0, 0);
  v29 = *v28;
  __chkstk_darwin(v30);
  *(&v88 - 2) = (uint64_t)v101;
  swift_bridgeObjectRetain(v29);
  sub_100A7771C((uint64_t (*)(uint64_t *))sub_1000FA448, (uint64_t)(&v88 - 4), v29);
  v32 = v31;
  swift_bridgeObjectRelease();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v101);
  if (!v32)
  {
    if (qword_1010E9AA8 != -1)
      swift_once(&qword_1010E9AA8, sub_100217BB8);
    v54 = type metadata accessor for Logger(0);
    v55 = sub_10001A9E8(v54, (uint64_t)qword_1011B6C30);
    v56 = Logger.logObject.getter(v55);
    v57 = static os_log_type_t.error.getter(v56);
    v58 = os_log_type_enabled(v56, v57);
    a3 = v95;
    v41 = (uint64_t)v92;
    v59 = v94;
    v60 = v93;
    if (v58)
    {
      v61 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v61 = 0;
      _os_log_impl((void *)&_mh_execute_header, v56, v57, "No UT service", v61, 2u);
      swift_slowDealloc(v61, -1, -1);
    }

    v62 = type metadata accessor for BluetoothCommunicationCoordinator.Error(0);
    swift_storeEnumTagMultiPayload(v41, v62, 5);
    swift_storeEnumTagMultiPayload(v41, v96, 1);
    v59(v41);

    goto LABEL_27;
  }
  v91 = a5;
  v102 = &type metadata for BACharacteristicIdentifier.UnauthorizedAirTag;
  v103 = &off_101077A68;
  LOBYTE(v101[0]) = 0;
  swift_beginAccess(v32 + 40, v98, 0, 0);
  v90 = v32;
  v33 = *(_QWORD *)(v32 + 40);
  __chkstk_darwin(v34);
  *(&v88 - 2) = (uint64_t)v101;
  swift_bridgeObjectRetain(v33);
  sub_100A77748((uint64_t (*)(uint64_t *))sub_1000FA464, (uint64_t)(&v88 - 4), v33);
  v36 = v35;
  swift_bridgeObjectRelease();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v101);
  swift_release();
  if (!v36)
  {
    v41 = (uint64_t)v92;
    v39 = v94;
    v40 = v93;
    if (qword_1010E9AA8 != -1)
      swift_once(&qword_1010E9AA8, sub_100217BB8);
    v63 = type metadata accessor for Logger(0);
    v64 = sub_10001A9E8(v63, (uint64_t)qword_1011B6C30);
    v65 = Logger.logObject.getter(v64);
    v66 = static os_log_type_t.error.getter(v65);
    v67 = os_log_type_enabled(v65, v66);
    a3 = v95;
    if (v67)
    {
      v68 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v68 = 0;
      _os_log_impl((void *)&_mh_execute_header, v65, v66, "Missing UT Ranging Characteristic!", v68, 2u);
      swift_slowDealloc(v68, -1, -1);
    }

    v69 = type metadata accessor for BluetoothCommunicationCoordinator.Error(0);
    swift_storeEnumTagMultiPayload(v41, v69, 6);
    swift_storeEnumTagMultiPayload(v41, v96, 1);
    v49 = v41;
    goto LABEL_26;
  }
  v37 = sub_1001EE37C(76, 21760);
  v39 = v94;
  v40 = v93;
  if (v38 >> 60 == 15)
  {
    v41 = (uint64_t)v92;
    if (qword_1010E9AA8 != -1)
      swift_once(&qword_1010E9AA8, sub_100217BB8);
    v42 = type metadata accessor for Logger(0);
    v43 = sub_10001A9E8(v42, (uint64_t)qword_1011B6C30);
    v44 = Logger.logObject.getter(v43);
    v45 = static os_log_type_t.error.getter(v44);
    v46 = os_log_type_enabled(v44, v45);
    a3 = v95;
    if (v46)
    {
      v47 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v47 = 0;
      _os_log_impl((void *)&_mh_execute_header, v44, v45, "Invalid AirTag productData", v47, 2u);
      swift_slowDealloc(v47, -1, -1);
    }

    v48 = type metadata accessor for BluetoothCommunicationCoordinator.Error(0);
    swift_storeEnumTagMultiPayload(v41, v48, 12);
    swift_storeEnumTagMultiPayload(v41, v96, 1);
    v49 = v41;
LABEL_26:
    v39(v49);

    swift_release();
LABEL_27:
    sub_100004048(v41, &qword_1010F39C8);
    return sub_10021C1E8(a3);
  }
  v71 = v37;
  v72 = v38;
  v73 = objc_msgSend(*(id *)&v93[OBJC_IVAR____TtC12searchpartyd10Peripheral_underlyingObject], "identifier");
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v73);

  v89 = v71;
  sub_10001BBBC(v71, v72);
  result = sub_10072D700(0x302E302E31, 0xE500000000000000);
  if ((result & 0x100000000) == 0)
  {
    v74 = result;
    v75 = result >> 16;
    v76 = result >> 24;
    v77 = &v17[v15[10]];
    *(_QWORD *)v77 = 0;
    *((_QWORD *)v77 + 1) = 0;
    v77[16] = 1;
    v78 = &v17[v15[15]];
    *(_QWORD *)v78 = 0;
    *((_QWORD *)v78 + 1) = 0xE000000000000000;
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v17, v14, v11);
    v79 = &v17[v15[5]];
    v80 = v89;
    *(_QWORD *)v79 = v89;
    *((_QWORD *)v79 + 1) = v72;
    v81 = &v17[v15[8]];
    *(_WORD *)v81 = v74;
    v81[2] = v75;
    v81[3] = v76;
    v82 = &v17[v15[7]];
    *(_QWORD *)v82 = 0;
    *((_QWORD *)v82 + 1) = 0;
    v83 = &v17[v15[6]];
    *(_QWORD *)v83 = 0;
    *((_QWORD *)v83 + 1) = 0;
    v84 = &v17[v15[9]];
    *(_DWORD *)v84 = 0;
    v84[4] = 1;
    v85 = &v17[v15[11]];
    *(_QWORD *)v85 = 0;
    v85[8] = 1;
    v86 = &v17[v15[12]];
    *(_DWORD *)v86 = 257;
    v86[4] = 0;
    v17[v15[13]] = 4;
    v17[v15[14]] = 5;
    v87 = (uint64_t)v92;
    sub_10005972C((uint64_t)v17, (uint64_t)v92, type metadata accessor for AccessoryMetadata);
    swift_storeEnumTagMultiPayload(v87, v96, 0);
    v94(v87);

    swift_release();
    sub_10001EF3C(v80, v72);
    sub_100004048(v87, &qword_1010F39C8);
    sub_1000126B0((uint64_t)v17, type metadata accessor for AccessoryMetadata);
    a3 = v95;
    return sub_10021C1E8(a3);
  }
  __break(1u);
  return result;
}

uint64_t sub_10021C1E8(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  void *v14;
  id v15;
  char v16;
  uint64_t v17;
  id v18;
  NSObject *v19;
  os_log_type_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __n128 v30;
  uint64_t v31;
  char v32;
  void (*v33)(char *, uint64_t, __n128);
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _BYTE v43[16];
  uint64_t v44[3];

  v2 = v1;
  v4 = type metadata accessor for MACAddress(0);
  v41 = *(_QWORD *)(v4 - 8);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v9 = (char *)&v36 - v8;
  v10 = type metadata accessor for DispatchPredicate(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (uint64_t *)((char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v14 = *(void **)(v2 + 32);
  *v13 = v14;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v11 + 104))(v13, enum case for DispatchPredicate.onQueue(_:), v10);
  v15 = v14;
  v16 = _dispatchPreconditionTest(_:)(v13);
  (*(void (**)(_QWORD *, uint64_t))(v11 + 8))(v13, v10);
  if ((v16 & 1) != 0)
  {
    v40 = v4;
    if (qword_1010E9AA8 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_1010E9AA8, sub_100217BB8);
LABEL_3:
  v17 = type metadata accessor for Logger(0);
  sub_10001A9E8(v17, (uint64_t)qword_1011B6C30);
  v18 = a1;
  v19 = Logger.logObject.getter(v18);
  v20 = static os_log_type_t.default.getter(v19);
  if (os_log_type_enabled(v19, v20))
  {
    v21 = swift_slowAlloc(22, -1);
    v38 = swift_slowAlloc(32, -1);
    v44[0] = v38;
    *(_DWORD *)v21 = 141558275;
    v42 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, v43, v21 + 4, v21 + 12);
    *(_WORD *)(v21 + 12) = 2081;
    v37 = v21 + 14;
    sub_100786FB4(v9);
    v22 = sub_100006204((unint64_t *)&qword_1010FBAE0, (uint64_t (*)(uint64_t))&type metadata accessor for MACAddress, (uint64_t)&protocol conformance descriptor for MACAddress);
    v23 = v7;
    v24 = v40;
    v25 = dispatch thunk of CustomStringConvertible.description.getter(v40, v22);
    v39 = v2;
    v27 = v26;
    v28 = v24;
    v7 = v23;
    (*(void (**)(char *, uint64_t))(v41 + 8))(v9, v28);
    v42 = sub_100016940(v25, v27, v44);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, v43, v37, v21 + 22);

    v2 = v39;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "Cleaning up for %{private,mask.hash}s", (uint8_t *)v21, 0x16u);
    v29 = v38;
    swift_arrayDestroy(v38, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v29, -1, -1);
    swift_slowDealloc(v21, -1, -1);

  }
  else
  {

  }
  sub_100786FB4(v7);
  v30 = swift_beginAccess(v2 + 48, v44, 0, 0);
  if (!*(_QWORD *)(*(_QWORD *)(v2 + 48) + 16))
  {
    v31 = v40;
    v34 = v41;
LABEL_11:
    v33 = *(void (**)(char *, uint64_t, __n128))(v34 + 8);
    v33(v7, v31, v30);
    goto LABEL_12;
  }
  swift_bridgeObjectRetain(*(_QWORD *)(v2 + 48));
  sub_1005193C8((uint64_t)v7);
  v31 = v40;
  if ((v32 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    v34 = v41;
    goto LABEL_11;
  }
  swift_retain();
  swift_bridgeObjectRelease();
  v33 = *(void (**)(char *, uint64_t, __n128))(v41 + 8);
  ((void (*)(char *, uint64_t))v33)(v7, v31);
  swift_retain();
  swift_release();
  LOBYTE(v42) = 1;
  PassthroughSubject.send(completion:)(&v42);
  swift_release();
LABEL_12:
  sub_100786FB4(v9);
  swift_beginAccess(v2 + 48, &v42, 33, 0);
  sub_100103590((uint64_t)v9);
  ((void (*)(char *, uint64_t))v33)(v9, v31);
  swift_endAccess(&v42);
  swift_release();
  sub_100E08534(v18);
  return swift_release();
}

uint64_t sub_10021C624(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  void *v10;
  id v11;
  uint64_t result;
  uint64_t v13;
  _BYTE v14[16];

  v5 = *v2;
  v6 = type metadata accessor for DispatchPredicate(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = &v14[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = (void *)v2[4];
  *v9 = v10;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v7 + 104))(v9, enum case for DispatchPredicate.onQueue(_:), v6);
  v11 = v10;
  LOBYTE(v10) = _dispatchPreconditionTest(_:)(v9);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v7 + 8))(v9, v6);
  if ((v10 & 1) != 0)
  {
    v13 = type metadata accessor for Transaction(0);
    __chkstk_darwin(v13);
    *(_QWORD *)&v14[-32] = v2;
    *(_QWORD *)&v14[-24] = a2;
    *(_QWORD *)&v14[-16] = a1;
    *(_QWORD *)&v14[-8] = v5;
    return static Transaction.named<A>(_:with:)("AccessoryMetadataManager.getProductData", 39, 2, sub_10024465C, &v14[-48]);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10021C754(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  id v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  _QWORD v68[4];
  char v69;
  char v70;
  id v71;

  v58 = a3;
  v8 = sub_10001A9A8(&qword_1010EECC8);
  __chkstk_darwin(v8);
  v10 = (char *)&v51 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10001A9A8(&qword_1010F3938);
  v59 = *(_QWORD *)(v11 - 8);
  v60 = v11;
  __chkstk_darwin(v11);
  v13 = (char *)&v51 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_10001A9A8(&qword_1010F3940);
  v61 = *(_QWORD *)(v14 - 8);
  v62 = v14;
  __chkstk_darwin(v14);
  v16 = (char *)&v51 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_10001A9A8(&qword_1010F3948);
  v64 = *(_QWORD *)(v17 - 8);
  v65 = v17;
  __chkstk_darwin(v17);
  v63 = (char *)&v51 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_10001A9A8(&qword_1010F3950);
  v67 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v66 = (char *)&v51 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100244454();
  v22 = BinaryDecodable.init(data:)(v21, 0, 0xC000000000000000);
  if (v4)
    return swift_errorRelease(v4);
  v57 = 0;
  v56 = Transaction.subscriptionCleaner.getter(v22);
  v68[0] = 1;
  v68[1] = 0;
  v68[2] = 0;
  v68[3] = 0x2000000000000000;
  v69 = 1;
  v70 = 0;
  v24 = sub_10021DC10((uint64_t)v68, v58, a4);
  sub_100004048((uint64_t)v68, &qword_1010F38A8);
  v68[0] = v24;
  v55 = a1;
  v71 = *(id *)(a2 + 32);
  v25 = v71;
  v26 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v10, 1, 1, v26);
  v52 = v25;
  v27 = sub_10001A9A8(&qword_1010F38B0);
  v58 = v19;
  v54 = a4;
  v28 = sub_10000F4A0(0, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr);
  v29 = sub_1000193A4(&qword_1010F3900, &qword_1010F38B0, (const char *)&protocol conformance descriptor for Future<A, B>);
  v53 = a2;
  v30 = v29;
  v31 = sub_10001AC90((unint64_t *)&qword_10111C120, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr, (const char *)&protocol conformance descriptor for OS_dispatch_queue);
  Publisher.receive<A>(on:options:)(&v71, v10, v27, v28, v30, v31);
  sub_100004048((uint64_t)v10, &qword_1010EECC8);

  swift_release();
  v32 = sub_1000193A4(&qword_1010F3958, &qword_1010F3938, (const char *)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  v33 = v60;
  Publisher.timeout(_:queue:customError:)(v52, sub_1000FC3D0, 0, v60, v32, 60.0);
  (*(void (**)(char *, uint64_t))(v59 + 8))(v13, v33);
  v34 = sub_10001A9A8(&qword_1010F38A8);
  v35 = sub_1000193A4(&qword_1010F3960, &qword_1010F3940, (const char *)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  v36 = v62;
  v37 = v63;
  Publisher.map<A>(_:)(sub_10021CC9C, 0, v62, v34, v35);
  (*(void (**)(char *, uint64_t))(v61 + 8))(v16, v36);
  v38 = sub_10001A9A8(&qword_1010F3918);
  v39 = sub_1000193A4(&qword_1010F3968, &qword_1010F3948, (const char *)&protocol conformance descriptor for Publishers.Map<A, B>);
  v40 = sub_1000193A4(&qword_1010F3928, &qword_1010F3918, (const char *)&protocol conformance descriptor for Just<A>);
  v41 = v65;
  v42 = v66;
  Publisher.catch<A>(_:)(sub_10021CCA0, 0, v65, v38, v39, v40);
  (*(void (**)(char *, uint64_t))(v64 + 8))(v37, v41);
  v43 = swift_allocObject(&unk_101061DC0, 24, 7);
  swift_weakInit(v43 + 16, v53);
  v44 = (_QWORD *)swift_allocObject(&unk_101061F28, 48, 7);
  v46 = v54;
  v45 = v55;
  v44[2] = v43;
  v44[3] = v45;
  v47 = v56;
  v44[4] = v46;
  v44[5] = v47;
  v48 = sub_1000193A4(&qword_1010F3970, &qword_1010F3950, (const char *)&protocol conformance descriptor for Publishers.Catch<A, B>);
  swift_retain();
  v49 = v46;
  swift_unknownObjectRetain(v47);
  v50 = v58;
  Publisher<>.sink(receiveValue:)(sub_10024467C, v44, v58, v48);
  swift_release();
  (*(void (**)(char *, uint64_t))(v67 + 8))(v42, v50);
  AnyCancellable.store(in:)(v45);
  swift_unknownObjectRelease(v47);
  return swift_release();
}

uint64_t sub_10021CCA0(_QWORD *a1)
{
  return sub_10021D8E0(a1, &qword_1010F38A8);
}

uint64_t sub_10021CCAC(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE v20[48];
  _BYTE v21[24];

  v6 = a2 + 16;
  swift_beginAccess(a2 + 16, v21, 0, 0);
  result = swift_weakLoadStrong(v6);
  if (result)
  {
    Transaction.capture()();
    if (qword_1010E9AA8 != -1)
      swift_once(&qword_1010E9AA8, sub_100217BB8);
    v8 = type metadata accessor for Logger(0);
    sub_10001A9E8(v8, (uint64_t)qword_1011B6C30);
    v9 = sub_10000F9B8(a1, (uint64_t)v20, &qword_1010F38A8);
    v10 = Logger.logObject.getter(v9);
    v11 = static os_log_type_t.info.getter(v10);
    if (os_log_type_enabled(v10, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc(12, -1);
      v13 = swift_slowAlloc(32, -1);
      v19 = v13;
      *(_DWORD *)v12 = 136315138;
      sub_10000F9B8((uint64_t)v20, (uint64_t)&v17, &qword_1010F38A8);
      v14 = sub_10001A9A8(&qword_1010F38A8);
      v15 = String.init<A>(describing:)(&v17, v14);
      v17 = sub_100016940(v15, v16, &v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v17, &v18, v12 + 4, v12 + 12);
      swift_bridgeObjectRelease();
      sub_100004048((uint64_t)v20, &qword_1010F38A8);
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "getProductData result: %s", v12, 0xCu);
      swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v13, -1, -1);
      swift_slowDealloc(v12, -1, -1);
    }
    else
    {
      sub_100004048((uint64_t)v20, &qword_1010F38A8);
    }

    sub_10000F9B8(a1, (uint64_t)v20, &qword_1010F38A8);
    if ((v20[41] & 1) != 0)
    {
      sub_100004048((uint64_t)v20, &qword_1010F38A8);
      sub_10021C1E8(a4);
      return swift_release();
    }
    else
    {
      swift_release();
      return sub_100004048((uint64_t)v20, &qword_1010F38A8);
    }
  }
  return result;
}

uint64_t sub_10021CF14(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  void *v10;
  id v11;
  uint64_t result;
  uint64_t v13;
  _BYTE v14[16];

  v5 = *v2;
  v6 = type metadata accessor for DispatchPredicate(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = &v14[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = (void *)v2[4];
  *v9 = v10;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v7 + 104))(v9, enum case for DispatchPredicate.onQueue(_:), v6);
  v11 = v10;
  LOBYTE(v10) = _dispatchPreconditionTest(_:)(v9);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v7 + 8))(v9, v6);
  if ((v10 & 1) != 0)
  {
    v13 = type metadata accessor for Transaction(0);
    __chkstk_darwin(v13);
    *(_QWORD *)&v14[-32] = a2;
    *(_QWORD *)&v14[-24] = v2;
    *(_QWORD *)&v14[-16] = a1;
    *(_QWORD *)&v14[-8] = v5;
    return static Transaction.named<A>(_:with:)("AccessoryMetadataManager.didNotify", 34, 2, sub_10024456C, &v14[-48]);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10021D044(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  id v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  id v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  id v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  void *v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  id v110[2];

  v88 = a4;
  v109 = a3;
  v7 = sub_10001A9A8(&qword_1010EECC8);
  __chkstk_darwin(v7);
  v9 = (char *)&v82 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v90 = sub_10001A9A8(&qword_1010EED38);
  v89 = *(_QWORD *)(v90 - 8);
  __chkstk_darwin(v90);
  v11 = (char *)&v82 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10001A9A8(&qword_1010EED40);
  v92 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v91 = (char *)&v82 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_10001A9A8(&qword_1010F38D0);
  v94 = *(_QWORD *)(v14 - 8);
  v95 = v14;
  __chkstk_darwin(v14);
  v93 = (char *)&v82 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v100 = sub_10001A9A8(&qword_1010F38D8);
  v98 = *(_QWORD *)(v100 - 8);
  __chkstk_darwin(v100);
  v96 = (char *)&v82 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_10001A9A8(&qword_1010F38E0);
  v101 = *(_QWORD *)(v17 - 8);
  v102 = v17;
  __chkstk_darwin(v17);
  v99 = (char *)&v82 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_10001A9A8(&qword_1010F38E8);
  v104 = *(_QWORD *)(v19 - 8);
  v105 = v19;
  __chkstk_darwin(v19);
  v103 = (char *)&v82 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_10001A9A8(&qword_1010F38F0);
  v107 = *(_QWORD *)(v21 - 8);
  v108 = v21;
  v22 = __chkstk_darwin(v21);
  v106 = (char *)&v82 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = Transaction.subscriptionCleaner.getter(v22);
  v25 = *(_QWORD *)(a2 + 16);
  v26 = sub_10001A9A8((uint64_t *)&unk_1010FB900);
  v97 = a2;
  OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_1000F9DF4, a2, v25, &type metadata for () + 1, v26);
  if (v4)
  {
    swift_errorRelease(v4);
    return swift_unknownObjectRelease(v24);
  }
  else
  {
    v86 = v24;
    v28 = v109;
    v110[0] = *(id *)(v109 + 32);
    v29 = v110[0];
    v87 = 0;
    v30 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(v9, 1, 1, v30);
    v83 = v12;
    v31 = v28;
    v32 = sub_10000F4A0(0, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr);
    v85 = a1;
    v33 = v32;
    v34 = sub_1000193A4(&qword_1010FB910, (uint64_t *)&unk_1010FB900, (const char *)&protocol conformance descriptor for AnyPublisher<A, B>);
    v35 = sub_10001AC90((unint64_t *)&qword_10111C120, (unint64_t *)&qword_1010EA6A0, OS_dispatch_queue_ptr, (const char *)&protocol conformance descriptor for OS_dispatch_queue);
    v84 = v29;
    Publisher.receive<A>(on:options:)(v110, v9, v26, v33, v34, v35);
    sub_100004048((uint64_t)v9, &qword_1010EECC8);

    swift_release();
    v36 = swift_allocObject(&unk_101061E88, 32, 7);
    v37 = v88;
    *(_QWORD *)(v36 + 16) = v31;
    *(_QWORD *)(v36 + 24) = v37;
    swift_retain();
    v38 = v37;
    v39 = static Subscribers.Demand.unlimited.getter(v38);
    v40 = sub_10001A9A8(&qword_1010EC530);
    v41 = sub_10001A9A8(&qword_1010EEC28);
    v42 = sub_1000193A4(&qword_1010EED78, &qword_1010EED38, (const char *)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
    v43 = sub_1000193A4(&qword_1010EED80, &qword_1010EEC28, (const char *)&protocol conformance descriptor for Future<A, B>);
    v44 = v90;
    v45 = v91;
    Publisher.flatMap<A, B>(maxPublishers:_:)(v39, sub_10024458C, v36, v90, v40, v41, v42, v43);
    swift_release();
    (*(void (**)(char *, uint64_t))(v89 + 8))(v11, v44);
    v46 = swift_allocObject(&unk_101061EB0, 32, 7);
    v47 = v109;
    *(_QWORD *)(v46 + 16) = v109;
    *(_QWORD *)(v46 + 24) = v38;
    v48 = v47;
    swift_retain();
    v49 = v38;
    v50 = sub_10001A9A8(&qword_1010F38A8);
    v51 = sub_1000193A4(&qword_1010EED88, &qword_1010EED40, (const char *)&protocol conformance descriptor for Publishers.FlatMap<A, B>);
    v52 = v93;
    v53 = v83;
    Publisher.map<A>(_:)(sub_1002445C4, v46, v83, v50, v51);
    swift_release();
    (*(void (**)(char *, uint64_t))(v92 + 8))(v45, v53);
    v54 = (_QWORD *)swift_allocObject(&unk_101061ED8, 40, 7);
    v55 = v97;
    v54[2] = v48;
    v54[3] = v55;
    v54[4] = v49;
    swift_retain();
    v56 = v49;
    v57 = swift_retain();
    v58 = static Subscribers.Demand.unlimited.getter(v57);
    v59 = sub_10001A9A8(&qword_1010F38B0);
    v60 = sub_1000193A4(&qword_1010F38F8, &qword_1010F38D0, (const char *)&protocol conformance descriptor for Publishers.Map<A, B>);
    v61 = sub_1000193A4(&qword_1010F3900, &qword_1010F38B0, (const char *)&protocol conformance descriptor for Future<A, B>);
    v62 = v95;
    v63 = v96;
    Publisher.flatMap<A, B>(maxPublishers:_:)(v58, sub_10024461C, v54, v95, &type metadata for AccessoryNonOwnerCommand, v59, v60, v61);
    swift_release();
    (*(void (**)(char *, uint64_t))(v94 + 8))(v52, v62);
    v64 = sub_1000193A4(&qword_1010F3908, &qword_1010F38D8, (const char *)&protocol conformance descriptor for Publishers.FlatMap<A, B>);
    v66 = v99;
    v65 = v100;
    Publisher.timeout(_:queue:customError:)(v84, sub_1000FC3D0, 0, v100, v64, 60.0);
    (*(void (**)(char *, uint64_t))(v98 + 8))(v63, v65);
    v67 = sub_1000193A4(&qword_1010F3910, &qword_1010F38E0, (const char *)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
    v68 = v102;
    v69 = v103;
    Publisher.map<A>(_:)(sub_10021CC9C, 0, v102, v50, v67);
    (*(void (**)(char *, uint64_t))(v101 + 8))(v66, v68);
    v70 = sub_10001A9A8(&qword_1010F3918);
    v71 = sub_1000193A4(&qword_1010F3920, &qword_1010F38E8, (const char *)&protocol conformance descriptor for Publishers.Map<A, B>);
    v72 = sub_1000193A4(&qword_1010F3928, &qword_1010F3918, (const char *)&protocol conformance descriptor for Just<A>);
    v74 = v105;
    v73 = v106;
    Publisher.catch<A>(_:)(sub_10021CCA0, 0, v105, v70, v71, v72);
    (*(void (**)(char *, uint64_t))(v104 + 8))(v69, v74);
    v75 = swift_allocObject(&unk_101061DC0, 24, 7);
    swift_weakInit(v75 + 16, v109);
    v76 = (_QWORD *)swift_allocObject(&unk_101061F00, 48, 7);
    v77 = v85;
    v76[2] = v75;
    v76[3] = v77;
    v78 = v86;
    v76[4] = v56;
    v76[5] = v78;
    v79 = sub_1000193A4(&qword_1010F3930, &qword_1010F38F0, (const char *)&protocol conformance descriptor for Publishers.Catch<A, B>);
    v80 = v56;
    swift_retain();
    swift_unknownObjectRetain(v78);
    v81 = v108;
    Publisher<>.sink(receiveValue:)(sub_100244650, v76, v108, v79);
    swift_release();
    (*(void (**)(char *, uint64_t))(v107 + 8))(v73, v81);
    AnyCancellable.store(in:)(v77);
    swift_release();
    return swift_unknownObjectRelease(v78);
  }
}

double sub_10021D8BC@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char v6;

  v3 = *(_QWORD *)a1;
  v2 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(_BYTE *)(a1 + 32);
  *(_QWORD *)a2 = *(_QWORD *)a1;
  *(_QWORD *)(a2 + 8) = v2;
  *(_QWORD *)(a2 + 16) = v4;
  *(_QWORD *)(a2 + 24) = v5;
  *(_BYTE *)(a2 + 32) = v6;
  *(_BYTE *)(a2 + 41) = 0;
  return sub_1002441DC(v3, v2, v4, v5, v6);
}

uint64_t sub_10021D8E0(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  _BYTE v5[48];

  sub_100059280(a1, (uint64_t)v5);
  v5[41] = 1;
  v3 = sub_10001A9A8(a2);
  return Just.init(_:)(v5, v3);
}

uint64_t sub_10021D930(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24[4];
  char v25;
  char v26;
  _BYTE v27[24];

  v6 = a2 + 16;
  swift_beginAccess(a2 + 16, v27, 0, 0);
  result = swift_weakLoadStrong(v6);
  if (result)
  {
    Transaction.capture()();
    if (qword_1010E9AA8 != -1)
      swift_once(&qword_1010E9AA8, sub_100217BB8);
    v8 = type metadata accessor for Logger(0);
    sub_10001A9E8(v8, (uint64_t)qword_1011B6C30);
    v9 = sub_10000F9B8(a1, (uint64_t)v24, &qword_1010F38A8);
    v10 = Logger.logObject.getter(v9);
    v11 = static os_log_type_t.info.getter(v10);
    if (os_log_type_enabled(v10, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc(12, -1);
      v13 = swift_slowAlloc(32, -1);
      v23 = v13;
      *(_DWORD *)v12 = 136315138;
      sub_10000F9B8((uint64_t)v24, (uint64_t)&v21, &qword_1010F38A8);
      v14 = sub_10001A9A8(&qword_1010F38A8);
      v15 = String.init<A>(describing:)(&v21, v14);
      v21 = sub_100016940(v15, v16, &v23);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22, v12 + 4, v12 + 12);
      swift_bridgeObjectRelease();
      sub_100004048((uint64_t)v24, &qword_1010F38A8);
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "didNotify result: %s", v12, 0xCu);
      swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v13, -1, -1);
      swift_slowDealloc(v12, -1, -1);
    }
    else
    {
      sub_100004048((uint64_t)v24, &qword_1010F38A8);
    }

    sub_10000F9B8(a1, (uint64_t)v24, &qword_1010F38A8);
    if ((v26 & 1) != 0)
    {
      sub_10021C1E8(a4);
      swift_release();
      return sub_100004048((uint64_t)v24, &qword_1010F38A8);
    }
    else
    {
      v17 = sub_1002442EC(v24[0], v24[1], v24[2], v24[3], v25);
      v18 = Logger.logObject.getter(v17);
      v19 = static os_log_type_t.default.getter(v18);
      if (os_log_type_enabled(v18, v19))
      {
        v20 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v20 = 0;
        _os_log_impl((void *)&_mh_execute_header, v18, v19, "handleNotify success!", v20, 2u);
        swift_slowDealloc(v20, -1, -1);
      }

      return swift_release();
    }
  }
  return result;
}

uint64_t sub_10021DC10(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  void *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[6];
  _BYTE v31[56];

  v4 = v3;
  v8 = type metadata accessor for DispatchPredicate(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (uint64_t *)((char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = *(void **)(v4 + 32);
  *v11 = v12;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v9 + 104))(v11, enum case for DispatchPredicate.onQueue(_:), v8);
  v13 = v12;
  LOBYTE(v12) = _dispatchPreconditionTest(_:)(v11);
  (*(void (**)(_QWORD *, uint64_t))(v9 + 8))(v11, v8);
  if ((v12 & 1) == 0)
  {
    __break(1u);
LABEL_11:
    swift_once(&qword_1010E9AA8, sub_100217BB8);
    goto LABEL_5;
  }
  sub_10000F9B8(a1, (uint64_t)v31, &qword_1010F38A8);
  if ((v31[41] & 1) != 0)
  {
    sub_100059244((uint64_t)v31, (uint64_t)v30);
    sub_100059280(v30, (uint64_t)&v28);
    v14 = swift_allocObject(&unk_101061E60, 57, 7);
    sub_100059244((uint64_t)&v28, v14 + 16);
    v15 = sub_10001A9A8(&qword_1010F38B0);
    swift_allocObject(v15, *(unsigned int *)(v15 + 48), *(unsigned __int16 *)(v15 + 52));
    v17 = Future.init(_:)(sub_10024452C, v14, v16);
    sub_1000593D4(v30);
    return v17;
  }
  sub_1002441A0((uint64_t)v31, (uint64_t)v30);
  if (qword_1010E9AA8 != -1)
    goto LABEL_11;
LABEL_5:
  v18 = type metadata accessor for Logger(0);
  sub_10001A9E8(v18, (uint64_t)qword_1011B6C30);
  sub_100244534((uint64_t)v30, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1002441DC);
  v19 = sub_100244534((uint64_t)v30, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1002441DC);
  v20 = Logger.logObject.getter(v19);
  v21 = static os_log_type_t.info.getter(v20);
  if (os_log_type_enabled(v20, v21))
  {
    v22 = (uint8_t *)swift_slowAlloc(12, -1);
    v23 = swift_slowAlloc(32, -1);
    v27 = v23;
    *(_DWORD *)v22 = 136315138;
    sub_1002441A0((uint64_t)v30, (uint64_t)&v28);
    sub_100244534((uint64_t)v30, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1002441DC);
    v24 = String.init<A>(describing:)(&v28, &type metadata for AccessoryNonOwnerCommand);
    v28 = sub_100016940(v24, v25, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29, v22 + 4, v22 + 12);
    swift_bridgeObjectRelease();
    sub_100244534((uint64_t)v30, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1002442EC);
    sub_100244534((uint64_t)v30, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1002442EC);
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "Sending: %s", v22, 0xCu);
    swift_arrayDestroy(v23, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v23, -1, -1);
    swift_slowDealloc(v22, -1, -1);
  }
  else
  {
    sub_100244534((uint64_t)v30, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1002442EC);
    sub_100244534((uint64_t)v30, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1002442EC);
  }

  v17 = sub_1002208BC((uint64_t)v30, a2, a3);
  sub_100244534((uint64_t)v30, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1002442EC);
  return v17;
}

uint64_t sub_10021DF6C(void (*a1)(_QWORD *), uint64_t a2, _QWORD *a3)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[5];
  __int16 v10;

  v5 = sub_100059390();
  v6 = swift_allocError(&type metadata for CentralManager.Error, v5, 0, 0);
  sub_100059280(a3, v7);
  v9[0] = v6;
  v10 = 256;
  a1(v9);
  return sub_100004048((uint64_t)v9, &qword_1010F38A8);
}

void sub_10021DFEC(char *a1@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  void *v23;
  id v24;
  uint64_t v25;
  __n128 v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  void (*v30)(char *, uint64_t);
  void (*v31)(char *, uint64_t);
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint8_t *v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  uint8_t *v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint8_t *v49;
  uint8_t *v50;
  uint64_t v51;
  uint64_t v52;
  id v53;
  NSObject *v54;
  os_log_type_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  NSObject *v68;
  os_log_type_t v69;
  uint8_t *v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  NSObject *v76;
  os_log_type_t v77;
  uint8_t *v78;
  uint64_t v79;
  unint64_t v80;
  int *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  NSObject *v85;
  os_log_type_t v86;
  uint8_t *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  NSObject *v91;
  os_log_type_t v92;
  uint8_t *v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  _QWORD *v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  char *v101;
  NSObject *v102;
  os_log_type_t v103;
  uint8_t *v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t v111;
  void (*v112)(char *, uint64_t);
  uint64_t v113;
  void *v114;
  void *v115;
  Swift::String v116;
  uint64_t v117;
  void *v118;
  Swift::String v119;
  uint8_t *v120;
  uint64_t v121;
  int v122;
  int v123;
  int v124;
  uint64_t *v125;
  uint64_t v126;
  unint64_t v127;
  _QWORD *v128;
  uint64_t *v129;
  _QWORD *v130;
  uint8_t *v131;
  int v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  int v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  NSObject *v141;
  os_log_type_t v142;
  uint8_t *v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint8_t *v149;
  uint8_t *v150;
  uint64_t v151;
  int v152;
  int v153;
  int v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  char *v158;
  uint8_t *v159;
  uint8_t *v160;
  int *v161;
  void (*v162)(char *, uint64_t);
  uint64_t *v163;
  unint64_t v164;
  unint64_t v165[2];
  unint64_t v166;
  unsigned __int8 v167;
  uint64_t v168;
  uint64_t v169;
  unint64_t v170[3];
  char v171;
  char v172[32];

  v4 = v3;
  v162 = (void (*)(char *, uint64_t))a1;
  v163 = a3;
  v161 = (int *)type metadata accessor for AccessoryMetadataManager.MetadataInfo(0);
  __chkstk_darwin(v161);
  v157 = (uint64_t)&v149 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10001A9A8(&qword_101115E60);
  __chkstk_darwin(v7);
  v159 = (uint8_t *)&v149 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v156 = type metadata accessor for AccessoryMetadata(0);
  v155 = *(_QWORD *)(v156 - 8);
  v9 = __chkstk_darwin(v156);
  v158 = (char *)&v149 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v160 = (uint8_t *)&v149 - v11;
  v12 = type metadata accessor for MACAddress(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v16 = (char *)&v149 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v18 = (char *)&v149 - v17;
  v19 = type metadata accessor for DispatchPredicate(0);
  v20 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19);
  v22 = (uint8_t **)((char *)&v149 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  v23 = *(void **)(v4 + 32);
  *v22 = v23;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v20 + 104))(v22, enum case for DispatchPredicate.onQueue(_:), v19);
  v24 = v23;
  v25 = _dispatchPreconditionTest(_:)(v22);
  (*(void (**)(_QWORD *, uint64_t))(v20 + 8))(v22, v19);
  if ((v25 & 1) == 0)
  {
    __break(1u);
    goto LABEL_61;
  }
  sub_100786FB4(v18);
  v26 = swift_beginAccess(v4 + 48, v172, 0, 0);
  v27 = *(_QWORD *)(v4 + 48);
  if (!*(_QWORD *)(v27 + 16))
  {
LABEL_14:
    v25 = *(_QWORD *)(v13 + 8);
    ((void (*)(char *, uint64_t, __n128))v25)(v18, v12, v26);
    if (qword_1010E9AA8 == -1)
    {
LABEL_15:
      v52 = type metadata accessor for Logger(0);
      sub_10001A9E8(v52, (uint64_t)qword_1011B6C30);
      v53 = a2;
      v54 = Logger.logObject.getter(v53);
      v55 = static os_log_type_t.error.getter(v54);
      if (os_log_type_enabled(v54, v55))
      {
        v56 = swift_slowAlloc(22, -1);
        v162 = (void (*)(char *, uint64_t))v25;
        v57 = v56;
        v58 = swift_slowAlloc(32, -1);
        v169 = v58;
        *(_DWORD *)v57 = 141558275;
        v164 = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v164, v165, v57 + 4, v57 + 12);
        *(_WORD *)(v57 + 12) = 2081;
        v161 = (int *)(v57 + 14);
        sub_100786FB4(v16);
        v59 = sub_100006204((unint64_t *)&qword_1010FBAE0, (uint64_t (*)(uint64_t))&type metadata accessor for MACAddress, (uint64_t)&protocol conformance descriptor for MACAddress);
        v60 = dispatch thunk of CustomStringConvertible.description.getter(v12, v59);
        v62 = v61;
        v162(v16, v12);
        v164 = sub_100016940(v60, v62, &v169);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v164, v165, v161, v57 + 22);

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v54, v55, "Missing coordinator for %{private,mask.hash}s", (uint8_t *)v57, 0x16u);
        swift_arrayDestroy(v58, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v58, -1, -1);
        swift_slowDealloc(v57, -1, -1);

      }
      else
      {

      }
      v63 = 7;
      goto LABEL_19;
    }
LABEL_61:
    swift_once(&qword_1010E9AA8, sub_100217BB8);
    goto LABEL_15;
  }
  swift_bridgeObjectRetain(*(_QWORD *)(v4 + 48));
  v28 = sub_1005193C8((uint64_t)v18);
  if ((v29 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_14;
  }
  v30 = *(void (**)(char *, uint64_t))(*(_QWORD *)(v27 + 56) + 8 * v28);
  swift_retain();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v13 + 8))(v18, v12);
  v31 = v162;
  sub_100057DB8((uint64_t)v162, (uint64_t)&v169);
  v32 = sub_10001A9A8(&qword_1010EC530);
  if ((swift_dynamicCast(&v164, &v169, v32, &type metadata for AccessoryNonOwnerCommand, 6) & 1) != 0)
  {
    v33 = v164;
    v34 = v165[0];
    v35 = v165[1];
    v36 = v166;
    LODWORD(v37) = v167;
    if (v167)
      v38 = 4;
    else
      v38 = 0;
    switch((v166 >> 60) & 3 | v38)
    {
      case 2uLL:
        sub_10001BBBC(v164, v165[0]);
        if (qword_1010E9AA8 != -1)
          swift_once(&qword_1010E9AA8, sub_100217BB8);
        v39 = type metadata accessor for Logger(0);
        sub_10001A9E8(v39, (uint64_t)qword_1011B6C30);
        sub_1002441DC(v33, v34, v35, v36, (char)v37);
        v40 = sub_10001BBBC(v33, v34);
        v41 = Logger.logObject.getter(v40);
        v42 = static os_log_type_t.default.getter(v41);
        if (os_log_type_enabled(v41, v42))
        {
          v43 = (uint8_t *)swift_slowAlloc(12, -1);
          v160 = (uint8_t *)swift_slowAlloc(32, -1);
          v169 = (uint64_t)v160;
          v44 = v35;
          v45 = (char)v37;
          v159 = v43;
          *(_DWORD *)v43 = 136315138;
          v37 = v43 + 12;
          v158 = (char *)(v43 + 4);
          sub_10001BBBC(v33, v34);
          v46 = sub_1001EDC48(v33, v34);
          v162 = v30;
          v48 = v47;
          sub_1002442EC(v33, v34, v44, v36, v45);
          v164 = sub_100016940(v46, v48, &v169);
          v49 = v37;
          LOBYTE(v37) = v45;
          v35 = v44;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v164, v165, v158, v49);
          v30 = v162;
          swift_bridgeObjectRelease();
          sub_1002442EC(v33, v34, v44, v36, (char)v37);
          sub_1002442EC(v33, v34, v44, v36, (char)v37);
          v50 = v159;
          _os_log_impl((void *)&_mh_execute_header, v41, v42, "Received productData %s", v159, 0xCu);
          v51 = (uint64_t)v160;
          swift_arrayDestroy(v160, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v51, -1, -1);
          swift_slowDealloc(v50, -1, -1);
        }
        else
        {
          sub_1002442EC(v33, v34, v35, v36, (char)v37);
          sub_1002442EC(v33, v34, v35, v36, (char)v37);
        }

        v125 = (uint64_t *)((char *)v30
                         + OBJC_IVAR____TtCC12searchpartyd24AccessoryMetadataManagerP33_9E4B9D7C2AC40BB201ED52E047F00DA919MetadataCoordinator_info
                         + v161[5]);
        v126 = *v125;
        v127 = v125[1];
        *v125 = v33;
        v125[1] = v34;
        sub_10001BBBC(v33, v34);
        sub_10001EF3C(v126, v127);
        sub_100244454();
        BinaryDecodable.init(data:)(v128, 0, 0xC000000000000000);
        sub_1002442EC(v33, v34, v35, v36, (char)v37);
        swift_release();
        sub_1002442EC(v33, v34, v35, v36, (char)v37);
        v65 = 0;
        v147 = 2;
        break;
      case 3uLL:
        v82 = qword_1010E9AA8;
        swift_bridgeObjectRetain(v165[0]);
        if (v82 != -1)
          swift_once(&qword_1010E9AA8, sub_100217BB8);
        v83 = type metadata accessor for Logger(0);
        sub_10001A9E8(v83, (uint64_t)qword_1011B6C30);
        swift_bridgeObjectRetain_n(v34, 2);
        v85 = Logger.logObject.getter(v84);
        v86 = static os_log_type_t.default.getter(v85);
        if (os_log_type_enabled(v85, v86))
        {
          v160 = (uint8_t *)v35;
          v87 = (uint8_t *)swift_slowAlloc(12, -1);
          v88 = swift_slowAlloc(32, -1);
          v169 = v88;
          LODWORD(v162) = (_DWORD)v37;
          *(_DWORD *)v87 = 136315138;
          swift_bridgeObjectRetain(v34);
          v164 = sub_100016940(v33, v34, &v169);
          v35 = (uint64_t)v160;
          LOBYTE(v37) = (_BYTE)v162;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v164, v165, v87 + 4, v87 + 12);
          sub_1002442EC(v33, v34, v35, v36, (char)v37);
          sub_1002442EC(v33, v34, v35, v36, (char)v37);
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v85, v86, "Received modelName %s", v87, 0xCu);
          swift_arrayDestroy(v88, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v88, -1, -1);
          swift_slowDealloc(v87, -1, -1);
        }
        else
        {
          sub_1002442EC(v33, v34, v35, v36, (char)v37);
          sub_1002442EC(v33, v34, v35, v36, (char)v37);
        }

        v129 = (uint64_t *)((char *)v30
                         + OBJC_IVAR____TtCC12searchpartyd24AccessoryMetadataManagerP33_9E4B9D7C2AC40BB201ED52E047F00DA919MetadataCoordinator_info
                         + v161[6]);
        *v129 = v33;
        v129[1] = v34;
        swift_bridgeObjectRelease();
        sub_100244454();
        BinaryDecodable.init(data:)(v130, 0, 0xC000000000000000);
        swift_release();
        sub_1002442EC(v33, v34, v35, v36, (char)v37);
        v65 = 0;
        v147 = 3;
        break;
      case 4uLL:
        if (qword_1010E9AA8 != -1)
          swift_once(&qword_1010E9AA8, sub_100217BB8);
        v89 = type metadata accessor for Logger(0);
        v90 = sub_10001A9E8(v89, (uint64_t)qword_1011B6C30);
        v91 = Logger.logObject.getter(v90);
        v92 = static os_log_type_t.default.getter(v91);
        if (os_log_type_enabled(v91, v92))
        {
          v93 = (uint8_t *)swift_slowAlloc(12, -1);
          v94 = swift_slowAlloc(32, -1);
          v169 = v94;
          *(_DWORD *)v93 = 136315138;
          v95 = sub_100C6C7C8(v33);
          v164 = sub_100016940(v95, v96, &v169);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v164, v165, v93 + 4, v93 + 12);
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v91, v92, "Received capabilities %s", v93, 0xCu);
          swift_arrayDestroy(v94, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v94, -1, -1);
          swift_slowDealloc(v93, -1, -1);
        }

        *(_DWORD *)((char *)v30
                  + OBJC_IVAR____TtCC12searchpartyd24AccessoryMetadataManagerP33_9E4B9D7C2AC40BB201ED52E047F00DA919MetadataCoordinator_info
                  + v161[8]) = v33;
        sub_100244454();
        BinaryDecodable.init(data:)(v97, 0, 0xC000000000000000);
        swift_release();
        v65 = 0;
        v147 = 4;
        break;
      case 5uLL:
        v98 = v164 >> 16;
        v99 = v164 >> 24;
        if (qword_1010E9AA8 != -1)
          swift_once(&qword_1010E9AA8, sub_100217BB8);
        v100 = type metadata accessor for Logger(0);
        v101 = (char *)sub_10001A9E8(v100, (uint64_t)qword_1011B6C30);
        v102 = Logger.logObject.getter(v101);
        v103 = static os_log_type_t.default.getter(v102);
        if (os_log_type_enabled(v102, v103))
        {
          v104 = (uint8_t *)swift_slowAlloc(12, -1);
          v151 = swift_slowAlloc(32, -1);
          v164 = v151;
          v162 = (void (*)(char *, uint64_t))v101;
          v150 = v104;
          *(_DWORD *)v104 = 136315138;
          v149 = v104 + 4;
          v153 = (_DWORD)v99 << 24;
          v154 = v98 << 16;
          v152 = (unsigned __int16)v33;
          v105 = ((_DWORD)v99 << 24) | v154 | (unsigned __int16)v33;
          v106 = sub_10072CDE0();
          v108 = v107;
          v169 = 0x756C615677617220;
          v170[0] = 0xEA00000000002065;
          v109 = sub_10072CEBC(v105);
          v111 = v110;
          v112 = v30;
          v113 = Data.hexString.getter(v109, v110);
          v115 = v114;
          sub_10001BC14(v109, v111);
          v116._countAndFlagsBits = v113;
          v30 = v112;
          v116._object = v115;
          String.append(_:)(v116);
          swift_bridgeObjectRelease();
          v117 = v169;
          v118 = (void *)v170[0];
          v169 = v106;
          v170[0] = v108;
          swift_bridgeObjectRetain(v108);
          v119._countAndFlagsBits = v117;
          v119._object = v118;
          String.append(_:)(v119);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v169 = sub_100016940(v169, v170[0], (uint64_t *)&v164);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v169, v170, v149, v104 + 12);
          swift_bridgeObjectRelease();
          v120 = v150;
          _os_log_impl((void *)&_mh_execute_header, v102, v103, "Received firmwareVersion %s", v150, 0xCu);
          v121 = v151;
          swift_arrayDestroy(v151, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v121, -1, -1);
          swift_slowDealloc(v120, -1, -1);

          v122 = v152;
          v123 = v154;
          v124 = v153;
        }
        else
        {

          v122 = (unsigned __int16)v33;
          v123 = v98 << 16;
          v124 = (_DWORD)v99 << 24;
        }
        v131 = v159;
        v132 = v122 | v123 | v124;
        v133 = (uint64_t)v30
             + OBJC_IVAR____TtCC12searchpartyd24AccessoryMetadataManagerP33_9E4B9D7C2AC40BB201ED52E047F00DA919MetadataCoordinator_info;
        v134 = (uint64_t)v30
             + OBJC_IVAR____TtCC12searchpartyd24AccessoryMetadataManagerP33_9E4B9D7C2AC40BB201ED52E047F00DA919MetadataCoordinator_info
             + v161[7];
        *(_DWORD *)v134 = v132;
        *(_BYTE *)(v134 + 4) = 0;
        v135 = v157;
        sub_10005972C(v133, v157, type metadata accessor for AccessoryMetadataManager.MetadataInfo);
        sub_10021F464(v135, (uint64_t)v131);
        v136 = (*(uint64_t (**)(uint8_t *, uint64_t, uint64_t))(v155 + 48))(v131, 1, v156);
        v137 = (uint64_t)v158;
        if (v136 == 1)
        {
          swift_release();
          sub_100004048((uint64_t)v131, &qword_101115E60);
        }
        else
        {
          v138 = (uint64_t)v131;
          v139 = (uint64_t)v160;
          sub_1000126EC(v138, (uint64_t)v160, type metadata accessor for AccessoryMetadata);
          v140 = sub_10005972C(v139, v137, type metadata accessor for AccessoryMetadata);
          v141 = Logger.logObject.getter(v140);
          v142 = static os_log_type_t.default.getter(v141);
          if (os_log_type_enabled(v141, v142))
          {
            v143 = (uint8_t *)swift_slowAlloc(12, -1);
            v144 = swift_slowAlloc(32, -1);
            v169 = v144;
            *(_DWORD *)v143 = 136315138;
            v145 = sub_100132D48();
            v164 = sub_100016940(v145, v146, &v169);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v164, v165, v143 + 4, v143 + 12);
            swift_bridgeObjectRelease();
            sub_1000126B0(v137, type metadata accessor for AccessoryMetadata);
            _os_log_impl((void *)&_mh_execute_header, v141, v142, "AccessoryMetadata %s", v143, 0xCu);
            swift_arrayDestroy(v144, 1, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v144, -1, -1);
            swift_slowDealloc(v143, -1, -1);
          }
          else
          {
            sub_1000126B0(v137, type metadata accessor for AccessoryMetadata);
          }

          swift_retain();
          v148 = (uint64_t)v160;
          PassthroughSubject.send(_:)(v160);
          swift_release();
          swift_release();
          sub_1000126B0(v148, type metadata accessor for AccessoryMetadata);
        }
        v64 = v163;
        v163[4] = 0;
        *(_OWORD *)v64 = 0u;
        *((_OWORD *)v64 + 1) = 0u;
        goto LABEL_20;
      default:
        if (qword_1010E9AA8 != -1)
          swift_once(&qword_1010E9AA8, sub_100217BB8);
        v74 = type metadata accessor for Logger(0);
        sub_10001A9E8(v74, (uint64_t)qword_1011B6C30);
        sub_1002441DC(v33, v34, v35, v36, (char)v37);
        sub_1002441DC(v33, v34, v35, v36, (char)v37);
        v76 = Logger.logObject.getter(v75);
        v77 = static os_log_type_t.error.getter(v76);
        if (os_log_type_enabled(v76, v77))
        {
          v78 = (uint8_t *)swift_slowAlloc(12, -1);
          v161 = (int *)swift_slowAlloc(32, -1);
          v164 = (unint64_t)v161;
          *(_DWORD *)v78 = 136315138;
          v160 = v78 + 4;
          v169 = v33;
          v170[0] = v34;
          v170[1] = v35;
          v170[2] = v36;
          v171 = (char)v37;
          sub_1002441DC(v33, v34, v35, v36, (char)v37);
          v162 = v30;
          v79 = String.init<A>(describing:)(&v169, &type metadata for AccessoryNonOwnerCommand);
          v169 = sub_100016940(v79, v80, (uint64_t *)&v164);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v169, v170, v160, v78 + 12);
          swift_bridgeObjectRelease();
          sub_1002442EC(v33, v34, v35, v36, (char)v37);
          sub_1002442EC(v33, v34, v35, v36, (char)v37);
          _os_log_impl((void *)&_mh_execute_header, v76, v77, "Unexpected command %s", v78, 0xCu);
          v81 = v161;
          swift_arrayDestroy(v161, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v81, -1, -1);
          swift_slowDealloc(v78, -1, -1);
        }
        else
        {
          sub_1002442EC(v33, v34, v35, v36, (char)v37);
          sub_1002442EC(v33, v34, v35, v36, (char)v37);
        }
        swift_release();

        sub_1002442EC(v33, v34, v35, v36, (char)v37);
        v63 = 9;
        goto LABEL_19;
    }
    v64 = v163;
    *v163 = v147;
    v64[1] = 0;
    v64[2] = 0;
    v64[3] = 0x2000000000000000;
    *((_BYTE *)v64 + 32) = 1;
    goto LABEL_21;
  }
  if (qword_1010E9AA8 != -1)
    swift_once(&qword_1010E9AA8, sub_100217BB8);
  v66 = type metadata accessor for Logger(0);
  sub_10001A9E8(v66, (uint64_t)qword_1011B6C30);
  v67 = sub_100057DB8((uint64_t)v31, (uint64_t)&v169);
  v68 = Logger.logObject.getter(v67);
  v69 = static os_log_type_t.error.getter(v68);
  if (os_log_type_enabled(v68, v69))
  {
    v70 = (uint8_t *)swift_slowAlloc(12, -1);
    v71 = swift_slowAlloc(32, -1);
    v168 = v71;
    *(_DWORD *)v70 = 136315138;
    sub_100057DB8((uint64_t)&v169, (uint64_t)&v164);
    v72 = String.init<A>(describing:)(&v164, v32);
    v164 = sub_100016940(v72, v73, &v168);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v164, v165, v70 + 4, v70 + 12);
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v169);
    _os_log_impl((void *)&_mh_execute_header, v68, v69, "Invalid command from payload %s", v70, 0xCu);
    swift_arrayDestroy(v71, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v71, -1, -1);
    swift_slowDealloc(v70, -1, -1);
    swift_release();
  }
  else
  {
    swift_release();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v169);
  }

  v63 = 13;
LABEL_19:
  v64 = v163;
  *v163 = v63;
  *(_OWORD *)(v64 + 1) = 0u;
  *(_OWORD *)(v64 + 3) = 0u;
LABEL_20:
  *((_BYTE *)v64 + 40) = 11;
  v65 = 1;
LABEL_21:
  *((_BYTE *)v64 + 41) = v65;
}

unint64_t sub_10021F464@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  int *v11;
  uint64_t *v12;
  unint64_t v13;
  int *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t result;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t *v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  int v28;
  char *v29;
  int v30;
  unsigned int v31;
  uint64_t v32;

  v4 = (int *)type metadata accessor for AccessoryMetadata(0);
  v5 = *((_QWORD *)v4 - 1);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = &v8[*(int *)(v6 + 40)];
  *(_QWORD *)v9 = 0;
  *((_QWORD *)v9 + 1) = 0;
  v9[16] = 1;
  v10 = &v8[*(int *)(v6 + 60)];
  *(_QWORD *)v10 = 0;
  *((_QWORD *)v10 + 1) = 0xE000000000000000;
  v11 = (int *)type metadata accessor for AccessoryMetadataManager.MetadataInfo(0);
  v12 = (uint64_t *)(a1 + v11[5]);
  v13 = v12[1];
  if (v13 >> 60 == 15
    || (v14 = v11, v15 = (uint64_t *)(a1 + v11[6]), (v16 = v15[1]) == 0)
    || (v17 = a1 + v11[7], (*(_BYTE *)(v17 + 4) & 1) != 0))
  {
    sub_1000126B0(a1, type metadata accessor for AccessoryMetadataManager.MetadataInfo);
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *))(v5 + 56))(a2, 1, 1, v4);
  }
  else
  {
    v19 = *v12;
    v32 = *v15;
    v20 = *(_DWORD *)v17;
    v30 = HIBYTE(*(_DWORD *)v17);
    v31 = HIWORD(v20);
    v21 = type metadata accessor for UUID(0);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(v8, a1, v21);
    v22 = (uint64_t *)&v8[v4[5]];
    *v22 = v19;
    v22[1] = v13;
    v23 = &v8[v4[8]];
    *(_WORD *)v23 = v20;
    v23[2] = v31;
    v23[3] = v30;
    v24 = &v8[v4[7]];
    *(_QWORD *)v24 = v32;
    *((_QWORD *)v24 + 1) = v16;
    v25 = &v8[v4[6]];
    *(_QWORD *)v25 = 0;
    *((_QWORD *)v25 + 1) = 0;
    sub_10001BD08(v19, v13);
    swift_bridgeObjectRetain(v16);
    result = sub_10072D700(0x302E302E31, 0xE500000000000000);
    if ((result & 0x100000000) != 0)
    {
      __break(1u);
    }
    else
    {
      v26 = &v8[v4[9]];
      *(_DWORD *)v26 = result;
      v26[4] = 0;
      v27 = &v8[v4[11]];
      *(_QWORD *)v27 = 0;
      v27[8] = 1;
      v28 = *(_DWORD *)(a1 + v14[8]);
      sub_1000126B0(a1, type metadata accessor for AccessoryMetadataManager.MetadataInfo);
      v29 = &v8[v4[12]];
      *(_DWORD *)v29 = v28;
      v29[4] = 0;
      v8[v4[13]] = 4;
      v8[v4[14]] = 5;
      sub_10005972C((uint64_t)v8, a2, type metadata accessor for AccessoryMetadata);
      (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v5 + 56))(a2, 0, 1, v4);
      return sub_1000126B0((uint64_t)v8, type metadata accessor for AccessoryMetadata);
    }
  }
  return result;
}

uint64_t sub_10021F6E8(uint64_t a1, unint64_t a2, void *a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  id v22;
  __n128 v23;
  uint64_t v25;

  v4 = v3;
  v8 = *v3;
  v9 = type metadata accessor for DispatchPredicate(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (uint64_t *)((char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = (void *)v4[4];
  *v12 = v13;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v10 + 104))(v12, enum case for DispatchPredicate.onQueue(_:), v9);
  v14 = v13;
  LOBYTE(v13) = _dispatchPreconditionTest(_:)(v12);
  (*(void (**)(_QWORD *, uint64_t))(v10 + 8))(v12, v9);
  if ((v13 & 1) != 0)
  {
    if (qword_1010E9AA8 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_1010E9AA8, sub_100217BB8);
LABEL_3:
  v15 = type metadata accessor for Logger(0);
  sub_10001A9E8(v15, (uint64_t)qword_1011B6C30);
  v16 = sub_10001BBBC(a1, a2);
  v17 = Logger.logObject.getter(v16);
  v18 = static os_log_type_t.info.getter(v17);
  if (os_log_type_enabled(v17, v18))
  {
    *(_DWORD *)swift_slowAlloc(12, -1) = 134349056;
    __asm { BR              X10 }
  }
  sub_10001BC14(a1, a2);

  v19 = swift_allocObject(&unk_101061DC0, 24, 7);
  swift_weakInit(v19 + 16, v4);
  v20 = (_QWORD *)swift_allocObject(&unk_101061E10, 56, 7);
  v20[2] = v19;
  v20[3] = a3;
  v20[4] = a1;
  v20[5] = a2;
  v20[6] = v8;
  v21 = sub_10001A9A8(&qword_1010EEC28);
  swift_allocObject(v21, *(unsigned int *)(v21 + 48), *(unsigned __int16 *)(v21 + 52));
  sub_10001BBBC(a1, a2);
  v22 = a3;
  return Future.init(_:)(sub_1002443D4, v20, v23);
}

uint64_t sub_10021F99C(void (*a1)(_BYTE *), uint64_t a2, uint64_t a3, void *a4, uint64_t a5, unint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t Strong;
  uint64_t v27;
  __n128 v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  char *v32;
  uint64_t *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  __int128 v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  NSObject *v47;
  os_log_type_t v48;
  int v49;
  uint64_t v50;
  uint8_t *v51;
  uint8_t *v52;
  uint64_t v53;
  unint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint8_t *v62;
  uint8_t *v63;
  uint64_t v64;
  char *v65;
  __int16 v66;
  __int16 v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  void (*v72)(char *, uint64_t, __n128);
  uint64_t v73;
  id v74;
  NSObject *v75;
  os_log_type_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  int v93;
  uint64_t (*v94)(char *, uint64_t);
  uint64_t v95;
  char *v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  NSObject *v107;
  os_log_type_t v108;
  uint8_t *v109;
  uint64_t v110;
  NSObject *v111;
  os_log_type_t v112;
  uint8_t *v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  unint64_t v118;
  __int128 v119;
  __int128 v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  double v124;
  uint64_t v126;
  uint8_t *v127;
  uint8_t *v128;
  int v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t *v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  char *v140;
  uint64_t v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  void (*v145)(_BYTE *);
  char v146[24];
  uint64_t v147;
  _BYTE v148[24];
  uint64_t v149;
  unint64_t v150;
  char v151[24];
  _BYTE v152[40];
  unint64_t v153;
  char v154;
  char v155[8];

  v144 = a5;
  v145 = a1;
  v141 = type metadata accessor for BinaryDecodingError(0);
  v138 = *(_QWORD *)(v141 - 8);
  __chkstk_darwin(v141);
  v140 = (char *)&v126 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v135 = type metadata accessor for BinaryDecoder(0);
  v134 = *(_QWORD *)(v135 - 8);
  __chkstk_darwin(v135);
  v136 = (char *)&v126 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10001A9A8(&qword_1010EEC30);
  __chkstk_darwin(v12);
  v14 = (char *)&v126 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v139 = type metadata accessor for Bit(0);
  v15 = *(_QWORD *)(v139 - 8);
  v16 = __chkstk_darwin(v139);
  v137 = (char *)&v126 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v142 = (char *)&v126 - v18;
  v19 = type metadata accessor for MACAddress(0);
  v20 = *(_QWORD *)(v19 - 8);
  v21 = __chkstk_darwin(v19);
  v23 = (char *)&v126 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v25 = (char *)&v126 - v24;
  a3 += 16;
  swift_beginAccess(a3, v155, 0, 0);
  Strong = swift_weakLoadStrong(a3);
  if (!Strong)
  {
    memset(v152, 0, sizeof(v152));
    LOBYTE(v153) = 11;
    v154 = 1;
    v145(v152);
    return sub_100004048((uint64_t)v152, &qword_1010EEC38);
  }
  v133 = a6;
  v27 = Strong;
  sub_100786FB4(v25);
  v28 = swift_beginAccess(v27 + 48, v151, 0, 0);
  v143 = v27;
  v29 = *(_QWORD *)(v27 + 48);
  if (!*(_QWORD *)(v29 + 16))
  {
LABEL_18:
    v72 = *(void (**)(char *, uint64_t, __n128))(v20 + 8);
    v72(v25, v19, v28);
    if (qword_1010E9AA8 != -1)
      swift_once(&qword_1010E9AA8, sub_100217BB8);
    v73 = type metadata accessor for Logger(0);
    sub_10001A9E8(v73, (uint64_t)qword_1011B6C30);
    v74 = a4;
    v75 = Logger.logObject.getter(v74);
    v76 = static os_log_type_t.error.getter(v75);
    if (os_log_type_enabled(v75, v76))
    {
      v77 = swift_slowAlloc(22, -1);
      v144 = a2;
      v78 = v77;
      v142 = (char *)swift_slowAlloc(32, -1);
      *(_QWORD *)v152 = v142;
      *(_DWORD *)v78 = 141558275;
      v147 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v147, v148, v78 + 4, v78 + 12);
      *(_WORD *)(v78 + 12) = 2081;
      v141 = v78 + 14;
      sub_100786FB4(v23);
      v79 = sub_100006204((unint64_t *)&qword_1010FBAE0, (uint64_t (*)(uint64_t))&type metadata accessor for MACAddress, (uint64_t)&protocol conformance descriptor for MACAddress);
      v80 = dispatch thunk of CustomStringConvertible.description.getter(v19, v79);
      v82 = v81;
      ((void (*)(char *, uint64_t))v72)(v23, v19);
      v147 = sub_100016940(v80, v82, (uint64_t *)v152);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v147, v148, v141, v78 + 22);

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v75, v76, "Missing coordinator for %{private,mask.hash}s", (uint8_t *)v78, 0x16u);
      v83 = v142;
      swift_arrayDestroy(v142, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v83, -1, -1);
      swift_slowDealloc(v78, -1, -1);

    }
    else
    {

    }
    *(_QWORD *)v152 = 7;
    memset(&v152[8], 0, 32);
    LOBYTE(v153) = 11;
    v154 = 1;
    v145(v152);
    swift_release();
    return sub_100004048((uint64_t)v152, &qword_1010EEC38);
  }
  swift_bridgeObjectRetain(*(_QWORD *)(v27 + 48));
  v30 = sub_1005193C8((uint64_t)v25);
  if ((v31 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_18;
  }
  v32 = *(char **)(*(_QWORD *)(v29 + 56) + 8 * v30);
  swift_retain();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v20 + 8))(v25, v19);
  v33 = (uint64_t *)&v32[OBJC_IVAR____TtCC12searchpartyd24AccessoryMetadataManagerP33_9E4B9D7C2AC40BB201ED52E047F00DA919MetadataCoordinator_readBuffer];
  v34 = *(_QWORD *)&v32[OBJC_IVAR____TtCC12searchpartyd24AccessoryMetadataManagerP33_9E4B9D7C2AC40BB201ED52E047F00DA919MetadataCoordinator_readBuffer];
  v35 = *(_QWORD *)&v32[OBJC_IVAR____TtCC12searchpartyd24AccessoryMetadataManagerP33_9E4B9D7C2AC40BB201ED52E047F00DA919MetadataCoordinator_readBuffer
                      + 8];
  if (v35 >> 60 == 15)
    v36 = 0;
  else
    v36 = *(_QWORD *)&v32[OBJC_IVAR____TtCC12searchpartyd24AccessoryMetadataManagerP33_9E4B9D7C2AC40BB201ED52E047F00DA919MetadataCoordinator_readBuffer];
  v37 = 0xC000000000000000;
  if (v35 >> 60 != 15)
    v37 = *(_QWORD *)&v32[OBJC_IVAR____TtCC12searchpartyd24AccessoryMetadataManagerP33_9E4B9D7C2AC40BB201ED52E047F00DA919MetadataCoordinator_readBuffer
                        + 8];
  v149 = v36;
  v150 = v37;
  sub_10001BD08(v34, v35);
  v38 = v144;
  v39 = v133;
  sub_10001BBBC(v144, v133);
  sub_100AEF294(1, v38, v39);
  v40 = *(_OWORD *)v152;
  Data.append(_:)(*(_QWORD *)v152, *(_QWORD *)&v152[8]);
  sub_10001BC14(v40, *((unint64_t *)&v40 + 1));
  v41 = v149;
  v42 = v150;
  v43 = *v33;
  v44 = v33[1];
  *v33 = v149;
  v33[1] = v42;
  v132 = v33;
  sub_10001BBBC(v41, v42);
  sub_10001EF3C(v43, v44);
  if (qword_1010E9AA8 != -1)
    swift_once(&qword_1010E9AA8, sub_100217BB8);
  v45 = type metadata accessor for Logger(0);
  v46 = sub_10001A9E8(v45, (uint64_t)qword_1011B6C30);
  v47 = Logger.logObject.getter(v46);
  v48 = static os_log_type_t.info.getter(v47);
  v49 = v48;
  if (os_log_type_enabled(v47, v48))
  {
    v50 = swift_slowAlloc(12, -1);
    v129 = v49;
    v51 = (uint8_t *)v50;
    v130 = swift_slowAlloc(32, -1);
    *(_QWORD *)v152 = v130;
    v131 = v46;
    v128 = v51;
    *(_DWORD *)v51 = 136315138;
    v52 = v51 + 12;
    v127 = v51 + 4;
    swift_beginAccess(&v149, v146, 0, 0);
    v53 = v149;
    v54 = v150;
    sub_10001BBBC(v149, v150);
    v55 = v32;
    v56 = a2;
    v57 = Data.description.getter(v53, v54);
    v59 = v58;
    v60 = v54;
    v39 = v133;
    sub_10001BC14(v53, v60);
    v61 = v57;
    a2 = v56;
    v38 = v144;
    v147 = sub_100016940(v61, v59, (uint64_t *)v152);
    v62 = v52;
    v46 = v131;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v147, v148, v127, v62);
    v32 = v55;
    swift_bridgeObjectRelease();
    v63 = v128;
    _os_log_impl((void *)&_mh_execute_header, v47, (os_log_type_t)v129, "localReadBuffer %s", v128, 0xCu);
    v64 = v130;
    swift_arrayDestroy(v130, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v64, -1, -1);
    swift_slowDealloc(v63, -1, -1);
  }

  v65 = v142;
  sub_10001BBBC(v38, v39);
  sub_1000FC3EC(v38, v39);
  v67 = v66;
  sub_10001BC14(v38, v39);
  if ((v67 & 0x100) != 0)
    goto LABEL_27;
  v152[0] = v67;
  v68 = sub_100059570();
  v69 = FixedWidthInteger.bits()(&type metadata for UInt8, v68);
  if (*(_QWORD *)(v69 + 16))
  {
    v70 = v139;
    (*(void (**)(char *, unint64_t, uint64_t))(v15 + 16))(v14, v69 + ((*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80)), v139);
    v71 = 0;
  }
  else
  {
    v71 = 1;
    v70 = v139;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56))(v14, v71, 1, v70);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v14, 1, v70) == 1)
  {
    sub_100004048((uint64_t)v14, &qword_1010EEC30);
LABEL_27:
    v84 = type metadata accessor for AccessoryMetadataManager.Error(0);
    v85 = sub_100006204(&qword_1010F37D8, type metadata accessor for AccessoryMetadataManager.Error, (uint64_t)&unk_100E2E588);
    v86 = swift_allocError(v84, v85, 0, 0);
    v88 = swift_storeEnumTagMultiPayload(v87, v84, 11);
    swift_willThrow(v88);
    sub_10001BC14(v149, v150);
    v89 = v141;
    goto LABEL_31;
  }
  v131 = v46;
  (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v65, v14, v70);
  v90 = v137;
  (*(void (**)(char *, _QWORD, uint64_t))(v15 + 104))(v137, enum case for Bit.one(_:), v70);
  v91 = sub_100006204((unint64_t *)&qword_1010EDCA0, (uint64_t (*)(uint64_t))&type metadata accessor for Bit, (uint64_t)&protocol conformance descriptor for Bit);
  v92 = v70;
  dispatch thunk of RawRepresentable.rawValue.getter(v152, v70, v91);
  dispatch thunk of RawRepresentable.rawValue.getter(&v147, v70, v91);
  LODWORD(v91) = v152[0];
  v93 = v147;
  v94 = *(uint64_t (**)(char *, uint64_t))(v15 + 8);
  v95 = v94(v90, v92);
  if ((_DWORD)v91 == v93)
  {
    v137 = (char *)v94;
    v96 = v136;
    BinaryDecoder.init()(v95);
    swift_beginAccess(&v149, &v147, 0, 0);
    v97 = v149;
    v98 = v150;
    sub_10001BBBC(v149, v150);
    v99 = sub_1002443E4();
    BinaryDecoder.decode<A>(_:from:)(&type metadata for AccessoryNonOwnerCommand, v97, v98, &type metadata for AccessoryNonOwnerCommand, v99);
    sub_10001BC14(v97, v98);
    v119 = *(_OWORD *)v152;
    v120 = *(_OWORD *)&v152[16];
    LOBYTE(v98) = v152[32];
    v121 = *v132;
    v122 = v132[1];
    *(_OWORD *)v132 = xmmword_100E22B20;
    sub_10001EF3C(v121, v122);
    *(_QWORD *)&v152[24] = &type metadata for AccessoryNonOwnerCommand;
    *(_QWORD *)&v152[32] = v99;
    v153 = sub_10024435C();
    v123 = swift_allocObject(&unk_101061E38, 49, 7);
    *(_QWORD *)v152 = v123;
    *(_OWORD *)(v123 + 16) = v119;
    *(_OWORD *)(v123 + 32) = v120;
    *(_BYTE *)(v123 + 48) = v98;
    v154 = 0;
    v124 = sub_1002441DC(v119, *((unint64_t *)&v119 + 1), v120, *((unint64_t *)&v120 + 1), v98);
    ((void (*)(_BYTE *, double))v145)(v152, v124);
    swift_release();
    swift_release();
    sub_1002442EC(v119, *((unint64_t *)&v119 + 1), v120, *((unint64_t *)&v120 + 1), v98);
    (*(void (**)(char *, uint64_t))(v134 + 8))(v96, v135);
    ((void (*)(char *, uint64_t))v137)(v142, v139);
    sub_100004048((uint64_t)v152, &qword_1010EEC38);
    return sub_10001BC14(v149, v150);
  }
  v100 = sub_100006204((unint64_t *)&qword_1010EC010, (uint64_t (*)(uint64_t))&type metadata accessor for BinaryDecodingError, (uint64_t)&protocol conformance descriptor for BinaryDecodingError);
  v89 = v141;
  v86 = swift_allocError(v141, v100, 0, 0);
  v102 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v138 + 104))(v101, enum case for BinaryDecodingError.insufficientData(_:), v89);
  swift_willThrow(v102);
  v94(v142, v92);
  sub_10001BC14(v149, v150);
LABEL_31:
  *(_QWORD *)v152 = v86;
  swift_errorRetain(v86);
  v103 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
  v104 = v140;
  if (!swift_dynamicCast(v140, v152, v103, v89, 0))
  {
LABEL_36:
    swift_errorRelease(*(_QWORD *)v152);
    sub_10001BBBC(v38, v39);
    v110 = sub_10001BBBC(v38, v39);
    v111 = Logger.logObject.getter(v110);
    v112 = static os_log_type_t.info.getter(v111);
    if (os_log_type_enabled(v111, v112))
    {
      v144 = a2;
      v113 = (uint8_t *)swift_slowAlloc(12, -1);
      v114 = swift_slowAlloc(32, -1);
      *(_QWORD *)v152 = v114;
      v142 = v32;
      *(_DWORD *)v113 = 136315138;
      v115 = Data.hexString.getter(v38, v39);
      v149 = sub_100016940(v115, v116, (uint64_t *)v152);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v149, &v150, v113 + 4, v113 + 12);
      swift_bridgeObjectRelease();
      sub_10001BC14(v38, v39);
      sub_10001BC14(v38, v39);
      _os_log_impl((void *)&_mh_execute_header, v111, v112, "Failed to decode data %s", v113, 0xCu);
      swift_arrayDestroy(v114, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v114, -1, -1);
      swift_slowDealloc(v113, -1, -1);
    }
    else
    {
      sub_10001BC14(v38, v39);
      sub_10001BC14(v38, v39);
    }

    v117 = *v132;
    v118 = v132[1];
    *(_OWORD *)v132 = xmmword_100E22B20;
    sub_10001EF3C(v117, v118);
    *(_QWORD *)v152 = v86;
    LOBYTE(v153) = 10;
    v154 = 1;
    swift_errorRetain(v86);
    v145(v152);
    swift_release();
    swift_release();
    swift_errorRelease(v86);
    return sub_100004048((uint64_t)v152, &qword_1010EEC38);
  }
  v105 = v138;
  if ((*(unsigned int (**)(char *, uint64_t))(v138 + 88))(v104, v89) != enum case for BinaryDecodingError.insufficientData(_:))
  {
    (*(void (**)(char *, uint64_t))(v105 + 8))(v104, v89);
    goto LABEL_36;
  }
  v106 = swift_errorRelease(v86);
  v107 = Logger.logObject.getter(v106);
  v108 = static os_log_type_t.info.getter(v107);
  if (os_log_type_enabled(v107, v108))
  {
    v109 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v109 = 0;
    _os_log_impl((void *)&_mh_execute_header, v107, v108, "insufficientData. Keep reading...", v109, 2u);
    swift_slowDealloc(v109, -1, -1);
    swift_release();
    swift_release();

  }
  else
  {

    swift_release();
    swift_release();
  }
  return swift_errorRelease(*(_QWORD *)v152);
}

uint64_t sub_1002208BC(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  void *v11;
  id v12;
  uint64_t result;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  id v17;
  __n128 v18;
  uint64_t v19;

  v7 = type metadata accessor for DispatchPredicate(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (uint64_t *)((char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = *(void **)(v3 + 32);
  *v10 = v11;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v8 + 104))(v10, enum case for DispatchPredicate.onQueue(_:), v7);
  v12 = v11;
  LOBYTE(v11) = _dispatchPreconditionTest(_:)(v10);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v8 + 8))(v10, v7);
  if ((v11 & 1) != 0)
  {
    v14 = swift_allocObject(&unk_101061DC0, 24, 7);
    swift_weakInit(v14 + 16, v3);
    v15 = (_QWORD *)swift_allocObject(&unk_101061DE8, 80, 7);
    v15[2] = v14;
    v15[3] = a3;
    sub_1002441A0(a1, (uint64_t)(v15 + 4));
    v15[9] = a2;
    v16 = sub_10001A9A8(&qword_1010F38B0);
    swift_allocObject(v16, *(unsigned int *)(v16 + 48), *(unsigned __int16 *)(v16 + 52));
    v17 = a3;
    sub_100244534(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1002441DC);
    swift_retain();
    return Future.init(_:)(sub_10024434C, v15, v18);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100220A1C(void (*a1)(_BYTE *), uint64_t a2, uint64_t a3, void *a4, uint64_t a5, _QWORD *a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t Strong;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  unint64_t v33;
  void (*v34)(char *, uint64_t, __n128);
  uint64_t v35;
  id v36;
  NSObject *v37;
  os_log_type_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  char *v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  void (*v55)(char *, uint64_t);
  uint64_t v56;
  void (*v57)(_BYTE *);
  char *v58;
  uint64_t v59;
  _BYTE v60[24];
  _BYTE v61[40];
  __int16 v62;
  char v63[32];

  v53 = a6;
  v11 = type metadata accessor for BinaryEncoder(0);
  v54 = *(_QWORD *)(v11 - 8);
  v55 = (void (*)(char *, uint64_t))v11;
  __chkstk_darwin(v11);
  v58 = (char *)&v52 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for MACAddress(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = __chkstk_darwin(v13);
  v17 = (char *)&v52 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v19 = (char *)&v52 - v18;
  a3 += 16;
  swift_beginAccess(a3, v63, 0, 0);
  Strong = swift_weakLoadStrong(a3);
  if (Strong)
  {
    v21 = Strong;
    v56 = a2;
    v57 = a1;
    sub_100786FB4(v19);
    v22 = swift_beginAccess(v21 + 48, v60, 0, 0);
    v23 = *(_QWORD *)(v21 + 48);
    if (*(_QWORD *)(v23 + 16))
    {
      swift_bridgeObjectRetain(*(_QWORD *)(v21 + 48));
      v24 = sub_1005193C8((uint64_t)v19);
      if ((v25 & 1) != 0)
      {
        v52 = v21;
        v26 = *(_QWORD *)(*(_QWORD *)(v23 + 56) + 8 * v24);
        swift_retain();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v14 + 8))(v19, v13);
        v27 = (_QWORD *)(v26
                       + OBJC_IVAR____TtCC12searchpartyd24AccessoryMetadataManagerP33_9E4B9D7C2AC40BB201ED52E047F00DA919MetadataCoordinator_writePromise);
        v28 = *(_QWORD *)(v26
                        + OBJC_IVAR____TtCC12searchpartyd24AccessoryMetadataManagerP33_9E4B9D7C2AC40BB201ED52E047F00DA919MetadataCoordinator_writePromise);
        v29 = *(_QWORD *)(v26
                        + OBJC_IVAR____TtCC12searchpartyd24AccessoryMetadataManagerP33_9E4B9D7C2AC40BB201ED52E047F00DA919MetadataCoordinator_writePromise
                        + 8);
        v30 = v56;
        *v27 = v57;
        v27[1] = v30;
        swift_retain();
        v31 = sub_10001D8A8(v28, v29);
        v32 = v58;
        BinaryEncoder.init()(v31);
        sub_1002441A0(a5, (uint64_t)v61);
        v33 = sub_10024435C();
        v46 = BinaryEncoder.encode<A>(_:)(v61, &type metadata for AccessoryNonOwnerCommand, v33);
        v48 = v47;
        v49 = Data.chunked(into:)(255, v46, v47);
        v50 = sub_1000F7B84(v49);
        swift_bridgeObjectRelease();
        swift_beginAccess(v26+ OBJC_IVAR____TtCC12searchpartyd24AccessoryMetadataManagerP33_9E4B9D7C2AC40BB201ED52E047F00DA919MetadataCoordinator_writeQueue, v61, 33, 0);
        sub_10030294C((uint64_t)v50);
        swift_endAccess(v61);
        sub_1002210F8(v53, a5, a4);
        sub_10001BC14(v46, v48);
        swift_release();
        swift_release();
        return (*(uint64_t (**)(char *, _QWORD))(v54 + 8))(v32, v55);
      }
      swift_bridgeObjectRelease();
    }
    v34 = *(void (**)(char *, uint64_t, __n128))(v14 + 8);
    v34(v19, v13, v22);
    if (qword_1010E9AA8 != -1)
      swift_once(&qword_1010E9AA8, sub_100217BB8);
    v35 = type metadata accessor for Logger(0);
    sub_10001A9E8(v35, (uint64_t)qword_1011B6C30);
    v36 = a4;
    v37 = Logger.logObject.getter(v36);
    v38 = static os_log_type_t.error.getter(v37);
    if (os_log_type_enabled(v37, v38))
    {
      v39 = swift_slowAlloc(22, -1);
      v55 = (void (*)(char *, uint64_t))v34;
      v40 = v39;
      v58 = (char *)swift_slowAlloc(32, -1);
      *(_QWORD *)v61 = v58;
      *(_DWORD *)v40 = 141558275;
      v59 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v59, v60, v40 + 4, v40 + 12);
      *(_WORD *)(v40 + 12) = 2081;
      v54 = v40 + 14;
      sub_100786FB4(v17);
      v41 = sub_100006204((unint64_t *)&qword_1010FBAE0, (uint64_t (*)(uint64_t))&type metadata accessor for MACAddress, (uint64_t)&protocol conformance descriptor for MACAddress);
      v42 = dispatch thunk of CustomStringConvertible.description.getter(v13, v41);
      v44 = v43;
      v55(v17, v13);
      v59 = sub_100016940(v42, v44, (uint64_t *)v61);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v59, v60, v54, v40 + 22);

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v37, v38, "Missing coordinator for %{private,mask.hash}s", (uint8_t *)v40, 0x16u);
      v45 = v58;
      swift_arrayDestroy(v58, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v45, -1, -1);
      swift_slowDealloc(v40, -1, -1);

    }
    else
    {

    }
    *(_QWORD *)v61 = 7;
    memset(&v61[8], 0, 32);
    v62 = 267;
    v57(v61);
    swift_release();
  }
  else
  {
    memset(v61, 0, sizeof(v61));
    v62 = 267;
    a1(v61);
  }
  return sub_100004048((uint64_t)v61, &qword_1010F38A8);
}

void sub_1002210F8(_QWORD *a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  void *v20;
  id v21;
  __n128 v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  _BOOL4 v34;
  uint8_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  NSObject *v44;
  os_log_type_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  void (*v53)(uint64_t *);
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  NSObject *v58;
  uint64_t v59;
  NSObject *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  void (*isa)(char *, uint64_t);
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  NSObject *v70;
  os_log_type_t v71;
  uint8_t *v72;
  uint64_t v73;
  NSObject *v74;
  os_log_type_t v75;
  uint8_t *v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  NSObject *v84;
  os_log_type_t v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  char *v96;
  void (*v97)(uint64_t *);
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint8_t *v105;
  _QWORD *v106;
  void *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  char *v112;
  NSObject *v113;
  uint64_t v114;
  _QWORD *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _WORD v119[20];
  uint64_t v120;
  _BYTE v121[40];
  uint64_t v122[5];
  char v123;
  char v124[8];
  char v125[8];
  char v126[8];

  v4 = v3;
  v110 = a2;
  v115 = a1;
  v114 = type metadata accessor for DispatchTime(0);
  v113 = *(NSObject **)(v114 - 8);
  v6 = __chkstk_darwin(v114);
  v111 = (char *)&v104 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v112 = (char *)&v104 - v8;
  v9 = type metadata accessor for MACAddress(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v104 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v104 - v14;
  v16 = type metadata accessor for DispatchPredicate(0);
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v19 = (uint64_t *)((char *)&v104 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  v20 = *(void **)(v4 + 32);
  *v19 = v20;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v17 + 104))(v19, enum case for DispatchPredicate.onQueue(_:), v16);
  v21 = v20;
  LOBYTE(v20) = _dispatchPreconditionTest(_:)(v19);
  (*(void (**)(_QWORD *, uint64_t))(v17 + 8))(v19, v16);
  if ((v20 & 1) == 0)
  {
    __break(1u);
LABEL_35:
    swift_once(&qword_1010E9AA8, sub_100217BB8);
    goto LABEL_11;
  }
  sub_100786FB4(v15);
  v22 = swift_beginAccess(v4 + 48, v126, 0, 0);
  v23 = *(_QWORD *)(v4 + 48);
  if (*(_QWORD *)(v23 + 16))
  {
    swift_bridgeObjectRetain(*(_QWORD *)(v4 + 48));
    v24 = sub_1005193C8((uint64_t)v15);
    if ((v25 & 1) != 0)
    {
      v26 = *(_QWORD *)(*(_QWORD *)(v23 + 56) + 8 * v24);
      swift_retain();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v10 + 8))(v15, v9);
      v109 = v26;
      v27 = (_QWORD *)(v26
                     + OBJC_IVAR____TtCC12searchpartyd24AccessoryMetadataManagerP33_9E4B9D7C2AC40BB201ED52E047F00DA919MetadataCoordinator_writeQueue);
      swift_beginAccess(v26+ OBJC_IVAR____TtCC12searchpartyd24AccessoryMetadataManagerP33_9E4B9D7C2AC40BB201ED52E047F00DA919MetadataCoordinator_writeQueue, v125, 0, 0);
      if (!*(_QWORD *)(*v27 + 16))
      {
        v53 = *(void (**)(uint64_t *))(v109
                                               + OBJC_IVAR____TtCC12searchpartyd24AccessoryMetadataManagerP33_9E4B9D7C2AC40BB201ED52E047F00DA919MetadataCoordinator_writePromise);
        if (v53)
        {
          v54 = *(_QWORD *)(v109
                          + OBJC_IVAR____TtCC12searchpartyd24AccessoryMetadataManagerP33_9E4B9D7C2AC40BB201ED52E047F00DA919MetadataCoordinator_writePromise
                          + 8);
          v55 = v110;
          sub_1002441A0(v110, (uint64_t)v122);
          v123 = 0;
          sub_10001D898((uint64_t)v53, v54);
          sub_100244534(v55, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1002441DC);
          v53(v122);
          sub_10001D8A8((uint64_t)v53, v54);
          swift_release();
          sub_100004048((uint64_t)v122, &qword_1010F38A8);
          return;
        }
        goto LABEL_33;
      }
      swift_beginAccess(v27, v122, 33, 0);
      v28 = *v27;
      if (*(_QWORD *)(*v27 + 16))
      {
        v19 = *(_QWORD **)(v28 + 32);
        v10 = *(_QWORD *)(v28 + 40);
        sub_10001BBBC((uint64_t)v19, v10);
        v106 = v27;
        sub_100779578(0, 1);
        swift_endAccess(v122);
        if (qword_1010E9AA8 == -1)
          goto LABEL_7;
      }
      else
      {
        __break(1u);
      }
      swift_once(&qword_1010E9AA8, sub_100217BB8);
LABEL_7:
      v29 = type metadata accessor for Logger(0);
      v30 = sub_10001A9E8(v29, (uint64_t)qword_1011B6C30);
      sub_10001BBBC((uint64_t)v19, v10);
      v31 = sub_10001BBBC((uint64_t)v19, v10);
      v108 = v30;
      v32 = Logger.logObject.getter(v31);
      v33 = static os_log_type_t.info.getter(v32);
      v34 = os_log_type_enabled(v32, v33);
      v107 = a3;
      if (v34)
      {
        v35 = (uint8_t *)swift_slowAlloc(12, -1);
        v36 = swift_slowAlloc(32, -1);
        v122[0] = v36;
        *(_DWORD *)v35 = 136315138;
        v105 = v35 + 4;
        sub_10001BBBC((uint64_t)v19, v10);
        v37 = (uint64_t)v19;
        v38 = Data.description.getter(v19, v10);
        v40 = v39;
        sub_10001BC14(v37, v10);
        v41 = v38;
        v19 = (_QWORD *)v37;
        v118 = sub_100016940(v41, v40, v122);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v118, v119, v105, v35 + 12);
        swift_bridgeObjectRelease();
        sub_10001BC14(v37, v10);
        sub_10001BC14(v37, v10);
        _os_log_impl((void *)&_mh_execute_header, v32, v33, "processQueuedUpdates: writing %s.", v35, 0xCu);
        swift_arrayDestroy(v36, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v36, -1, -1);
        swift_slowDealloc(v35, -1, -1);
      }
      else
      {
        sub_10001BC14((uint64_t)v19, v10);
        sub_10001BC14((uint64_t)v19, v10);
      }

      v56 = swift_allocObject(&unk_101061D70, 58, 7);
      *(_OWORD *)(v56 + 16) = 0u;
      v57 = v56 + 16;
      *(_OWORD *)(v56 + 32) = 0u;
      *(_QWORD *)(v56 + 48) = 0;
      *(_WORD *)(v56 + 56) = 267;
      v58 = dispatch_group_create();
      dispatch_group_enter(v58);
      v122[0] = sub_1007C5C3C((uint64_t)v19, v10);
      v59 = swift_allocObject(&unk_101061D98, 32, 7);
      *(_QWORD *)(v59 + 16) = v56;
      *(_QWORD *)(v59 + 24) = v58;
      swift_retain();
      v60 = v58;
      v61 = sub_10001A9A8(&qword_1010EEBE8);
      v62 = sub_1000193A4(&qword_1010EEBF0, &qword_1010EEBE8, (const char *)&protocol conformance descriptor for AnyPublisher<A, B>);
      Publisher.oneshot(_:)(sub_100244198, v59, v61, v62);
      swift_release();
      v63 = swift_release();
      v64 = v111;
      static DispatchTime.now()(v63);
      v65 = v112;
      + infix(_:_:)(v64, 30.0);
      isa = (void (*)(char *, uint64_t))v113[1].isa;
      v67 = v114;
      isa(v64, v114);
      v113 = v60;
      v68 = OS_dispatch_group.wait(timeout:)(v65) & 1;
      isa(v65, v67);
      v69 = static DispatchTimeoutResult.== infix(_:_:)(v68, 1);
      if ((v69 & 1) != 0)
      {
        v70 = Logger.logObject.getter(v69);
        v71 = static os_log_type_t.error.getter(v70);
        if (os_log_type_enabled(v70, v71))
        {
          v72 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v72 = 0;
          _os_log_impl((void *)&_mh_execute_header, v70, v71, "Timed out waiting for writeFuture", v72, 2u);
          swift_slowDealloc(v72, -1, -1);
        }

      }
      swift_beginAccess(v57, v124, 0, 0);
      sub_10000F9B8(v57, (uint64_t)v122, &qword_1010EEBF8);
      if ((v123 & 1) != 0)
      {
        sub_100059244((uint64_t)v122, (uint64_t)&v120);
        v73 = sub_100059280(&v120, (uint64_t)&v118);
        v74 = Logger.logObject.getter(v73);
        v75 = static os_log_type_t.error.getter(v74);
        if (os_log_type_enabled(v74, v75))
        {
          v76 = (uint8_t *)swift_slowAlloc(12, -1);
          v77 = swift_slowAlloc(32, -1);
          v115 = v19;
          v78 = v10;
          v79 = v77;
          v117 = v77;
          *(_DWORD *)v76 = 136446210;
          sub_100E01294();
          v116 = sub_100016940(v80, v81, &v117);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v116, &v117, v76 + 4, v76 + 12);
          swift_bridgeObjectRelease();
          sub_1000593D4(&v118);
          _os_log_impl((void *)&_mh_execute_header, v74, v75, "writeFuture error: %{public}s", v76, 0xCu);
          swift_arrayDestroy(v79, 1, (char *)&type metadata for Any + 8);
          v82 = v79;
          v10 = v78;
          v19 = v115;
          swift_slowDealloc(v82, -1, -1);
          swift_slowDealloc(v76, -1, -1);
        }
        else
        {
          sub_1000593D4(&v118);
        }

        v97 = *(void (**)(uint64_t *))(v109
                                               + OBJC_IVAR____TtCC12searchpartyd24AccessoryMetadataManagerP33_9E4B9D7C2AC40BB201ED52E047F00DA919MetadataCoordinator_writePromise);
        if (v97)
        {
          v98 = *(_QWORD *)(v109
                          + OBJC_IVAR____TtCC12searchpartyd24AccessoryMetadataManagerP33_9E4B9D7C2AC40BB201ED52E047F00DA919MetadataCoordinator_writePromise
                          + 8);
          v99 = sub_100059390();
          v100 = swift_allocError(&type metadata for CentralManager.Error, v99, 0, 0);
          sub_100059280(&v120, v101);
          v118 = v100;
          v119[16] = 256;
          swift_retain();
          v97(&v118);
          sub_10001D8A8((uint64_t)v97, v98);

          swift_release();
          sub_10001BC14((uint64_t)v19, v10);
          sub_100004048((uint64_t)&v118, &qword_1010F38A8);
          sub_1000593D4(&v120);
LABEL_33:
          swift_release();
          return;
        }
        sub_1000593D4(&v120);

        v102 = (uint64_t)v19;
        v103 = v10;
      }
      else
      {
        v114 = v10;
        v83 = swift_retain_n(v109, 2);
        v84 = Logger.logObject.getter(v83);
        v85 = static os_log_type_t.info.getter(v84);
        v86 = v85;
        if (os_log_type_enabled(v84, v85))
        {
          v87 = swift_slowAlloc(22, -1);
          LODWORD(v111) = v86;
          v88 = v87;
          v112 = (char *)swift_slowAlloc(32, -1);
          v118 = (uint64_t)v112;
          *(_DWORD *)v88 = 134218242;
          v89 = v106;
          v120 = *(_QWORD *)(*v106 + 16);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v120, v121, v88 + 4, v88 + 12);
          *(_WORD *)(v88 + 12) = 2080;
          v108 = v88 + 14;
          swift_bridgeObjectRetain(*v89);
          v91 = v19;
          v92 = Array.description.getter(v90, &type metadata for Data);
          v94 = v93;
          swift_bridgeObjectRelease();
          v95 = v92;
          v19 = v91;
          v120 = sub_100016940(v95, v94, &v118);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v120, v121, v108, v88 + 22);
          swift_release_n(v109, 2);
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v84, (os_log_type_t)v111, "writeFuture success. writeQueue [%ld] %s", (uint8_t *)v88, 0x16u);
          v96 = v112;
          swift_arrayDestroy(v112, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v96, -1, -1);
          swift_slowDealloc(v88, -1, -1);

        }
        else
        {

          swift_release_n(v109, 2);
        }
        sub_1002210F8(v115, v110, v107);

        v102 = (uint64_t)v19;
        v103 = v114;
      }
      sub_10001BC14(v102, v103);
      swift_release();
      goto LABEL_33;
    }
    swift_bridgeObjectRelease();
  }
  v10 = *(_QWORD *)(v10 + 8);
  ((void (*)(char *, uint64_t, __n128))v10)(v15, v9, v22);
  if (qword_1010E9AA8 != -1)
    goto LABEL_35;
LABEL_11:
  v42 = type metadata accessor for Logger(0);
  sub_10001A9E8(v42, (uint64_t)qword_1011B6C30);
  v43 = a3;
  v44 = Logger.logObject.getter(v43);
  v45 = static os_log_type_t.error.getter(v44);
  if (os_log_type_enabled(v44, v45))
  {
    v46 = swift_slowAlloc(22, -1);
    v115 = (_QWORD *)v10;
    v47 = v46;
    v48 = swift_slowAlloc(32, -1);
    v122[0] = v48;
    *(_DWORD *)v47 = 141558275;
    v118 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v118, v119, v47 + 4, v47 + 12);
    *(_WORD *)(v47 + 12) = 2081;
    v114 = v47 + 14;
    sub_100786FB4(v13);
    v49 = sub_100006204((unint64_t *)&qword_1010FBAE0, (uint64_t (*)(uint64_t))&type metadata accessor for MACAddress, (uint64_t)&protocol conformance descriptor for MACAddress);
    v50 = dispatch thunk of CustomStringConvertible.description.getter(v9, v49);
    v52 = v51;
    ((void (*)(char *, uint64_t))v115)(v13, v9);
    v118 = sub_100016940(v50, v52, v122);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v118, v119, v114, v47 + 22);

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v44, v45, "Missing coordinator for %{private,mask.hash}s", (uint8_t *)v47, 0x16u);
    swift_arrayDestroy(v48, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v48, -1, -1);
    swift_slowDealloc(v47, -1, -1);

  }
  else
  {

  }
}

void sub_100221DFC(uint64_t a1, uint64_t a2, NSObject *a3)
{
  uint64_t v5;
  _BYTE v6[24];

  v5 = a2 + 16;
  swift_beginAccess(a2 + 16, v6, 1, 0);
  sub_10024423C(a1, v5);
  dispatch_group_leave(a3);
}

uint64_t sub_100221E58()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 48));
  return swift_deallocClassInstance(v0, 56, 7);
}

uint64_t type metadata accessor for AccessoryMetadataManager()
{
  return objc_opt_self(_TtC12searchpartyd24AccessoryMetadataManager);
}

uint64_t sub_100221EBC()
{
  return type metadata accessor for AccessoryMetadataManager.MetadataCoordinator(0);
}

uint64_t type metadata accessor for AccessoryMetadataManager.MetadataCoordinator(uint64_t a1)
{
  return sub_10001B630(a1, qword_1010F3610, (uint64_t)&nominal type descriptor for AccessoryMetadataManager.MetadataCoordinator);
}

uint64_t sub_100221ED8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[5];

  v4[0] = (char *)&value witness table for Builtin.NativeObject + 64;
  result = type metadata accessor for AccessoryMetadataManager.MetadataInfo(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    v4[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[3] = &unk_100E2E4E8;
    v4[4] = &unk_100E2E500;
    result = swift_updateClassMetadata2(a1, 256, 5, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t type metadata accessor for AccessoryMetadataManager.MetadataInfo(uint64_t a1)
{
  return sub_10001B630(a1, qword_1010F3788, (uint64_t)&nominal type descriptor for AccessoryMetadataManager.MetadataInfo);
}

uint64_t *sub_100221F88(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  char *v19;
  char *v20;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = *((_QWORD *)v10 + 1);
    if (v11 >> 60 == 15)
    {
      *(_OWORD *)v9 = *(_OWORD *)v10;
    }
    else
    {
      v13 = *(_QWORD *)v10;
      sub_10001BBBC(*(_QWORD *)v10, *((_QWORD *)v10 + 1));
      *(_QWORD *)v9 = v13;
      *((_QWORD *)v9 + 1) = v11;
    }
    v14 = a3[6];
    v15 = a3[7];
    v16 = (uint64_t *)((char *)a1 + v14);
    v17 = (uint64_t *)((char *)a2 + v14);
    v18 = v17[1];
    *v16 = *v17;
    v16[1] = v18;
    v19 = (char *)a1 + v15;
    v20 = (char *)a2 + v15;
    v19[4] = v20[4];
    *(_DWORD *)v19 = *(_DWORD *)v20;
    *(_DWORD *)((char *)a1 + a3[8]) = *(_DWORD *)((char *)a2 + a3[8]);
    swift_bridgeObjectRetain(v18);
  }
  return a1;
}

uint64_t sub_100222084(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;
  unint64_t v6;

  v4 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = (uint64_t *)(a1 + *(int *)(a2 + 20));
  v6 = v5[1];
  if (v6 >> 60 != 15)
    sub_10001BC14(*v5, v6);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1002220EC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = (uint64_t *)(a2 + v7);
  v10 = v9[1];
  if (v10 >> 60 == 15)
  {
    *(_OWORD *)v8 = *(_OWORD *)v9;
  }
  else
  {
    v11 = *v9;
    sub_10001BBBC(*v9, v9[1]);
    *(_QWORD *)v8 = v11;
    *(_QWORD *)(v8 + 8) = v10;
  }
  v12 = a3[6];
  v13 = a3[7];
  v14 = (_QWORD *)(a1 + v12);
  v15 = (_QWORD *)(a2 + v12);
  v16 = v15[1];
  *v14 = *v15;
  v14[1] = v16;
  v17 = a1 + v13;
  v18 = a2 + v13;
  *(_BYTE *)(v17 + 4) = *(_BYTE *)(v18 + 4);
  *(_DWORD *)v17 = *(_DWORD *)v18;
  *(_DWORD *)(a1 + a3[8]) = *(_DWORD *)(a2 + a3[8]);
  swift_bridgeObjectRetain(v16);
  return a1;
}

uint64_t sub_1002221BC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  int v22;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = (uint64_t *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v10 = *(_QWORD *)(a2 + v7 + 8);
  if (*(_QWORD *)(a1 + v7 + 8) >> 60 != 15)
  {
    if (v10 >> 60 != 15)
    {
      v12 = *v9;
      sub_10001BBBC(v12, v10);
      v13 = *v8;
      v14 = v8[1];
      *v8 = v12;
      v8[1] = v10;
      sub_10001BC14(v13, v14);
      goto LABEL_8;
    }
    sub_10015B504((uint64_t)v8);
    goto LABEL_6;
  }
  if (v10 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)v8 = *(_OWORD *)v9;
    goto LABEL_8;
  }
  v11 = *v9;
  sub_10001BBBC(v11, v10);
  *v8 = v11;
  v8[1] = v10;
LABEL_8:
  v15 = a3[6];
  v16 = (_QWORD *)(a1 + v15);
  v17 = (_QWORD *)(a2 + v15);
  *v16 = *v17;
  v18 = v17[1];
  v16[1] = v18;
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRelease();
  v19 = a3[7];
  v20 = a1 + v19;
  v21 = (int *)(a2 + v19);
  v22 = *v21;
  *(_BYTE *)(v20 + 4) = *((_BYTE *)v21 + 4);
  *(_DWORD *)v20 = v22;
  *(_DWORD *)(a1 + a3[8]) = *(_DWORD *)(a2 + a3[8]);
  return a1;
}

uint64_t sub_1002222E8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  v8 = a3[7];
  v9 = a3[8];
  v10 = a1 + v8;
  v11 = a2 + v8;
  *(_DWORD *)v10 = *(_DWORD *)v11;
  *(_BYTE *)(v10 + 4) = *(_BYTE *)(v11 + 4);
  *(_DWORD *)(a1 + v9) = *(_DWORD *)(a2 + v9);
  return a1;
}

uint64_t sub_100222370(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = (uint64_t *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v10 = *(_QWORD *)(a1 + v7 + 8);
  if (v10 >> 60 != 15)
  {
    v11 = v9[1];
    if (v11 >> 60 != 15)
    {
      v12 = *v8;
      *v8 = *v9;
      v8[1] = v11;
      sub_10001BC14(v12, v10);
      goto LABEL_6;
    }
    sub_10015B504((uint64_t)v8);
  }
  *(_OWORD *)v8 = *(_OWORD *)v9;
LABEL_6:
  v13 = a3[6];
  v14 = (_QWORD *)(a1 + v13);
  v15 = (uint64_t *)(a2 + v13);
  v17 = *v15;
  v16 = v15[1];
  *v14 = v17;
  v14[1] = v16;
  swift_bridgeObjectRelease();
  v18 = a3[7];
  v19 = a3[8];
  v20 = a1 + v18;
  v21 = a2 + v18;
  *(_DWORD *)v20 = *(_DWORD *)v21;
  *(_BYTE *)(v20 + 4) = *(_BYTE *)(v21 + 4);
  *(_DWORD *)(a1 + v19) = *(_DWORD *)(a2 + v19);
  return a1;
}

uint64_t sub_100222458(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100222464);
}

uint64_t sub_100222464(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  int v10;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 24) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  v10 = v9 - 1;
  if (v10 < 0)
    v10 = -1;
  return (v10 + 1);
}

uint64_t sub_1002224F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1002224FC);
}

uint64_t sub_1002224FC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 24) + 8) = a2;
  return result;
}

uint64_t sub_100222578(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[5];

  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_100E2E4E8;
    v4[2] = &unk_100E2E500;
    v4[3] = &unk_100E2E528;
    v4[4] = (char *)&value witness table for Builtin.Int32 + 64;
    swift_initStructMetadata(a1, 256, 5, v4, a1 + 16);
    return 0;
  }
  return result;
}

void sub_10022260C(uint64_t a1)
{
  unint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[48];
  _BYTE v12[48];
  id v13[5];
  char v14;

  sub_10000F9B8(a1, (uint64_t)v13, &qword_1011074A0);
  if ((v14 & 1) != 0)
  {
    sub_100059244((uint64_t)v13, (uint64_t)v12);
    v1 = sub_100059390();
    swift_willThrowTypedImpl(v12, &type metadata for CentralManager.Error, v1);
    sub_100059244((uint64_t)v12, (uint64_t)v11);
    v2 = (void *)swift_allocError(&type metadata for CentralManager.Error, v1, 0, 0);
    sub_100059244((uint64_t)v11, v3);
    v13[0] = v2;
    swift_errorRetain(v2);
    v4 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
    v5 = swift_willThrowTypedImpl(v13, v4, &protocol self-conformance witness table for Error);
    v6 = static os_log_type_t.error.getter(v5);
    if (qword_1010EA2F8 != -1)
      swift_once(&qword_1010EA2F8, sub_100B5E19C);
    v7 = qword_1011B7DD8;
    v8 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v9 = swift_allocObject(v8, 72, 7);
    *(_OWORD *)(v9 + 16) = xmmword_100E22B00;
    v10 = _convertErrorToNSError(_:)(v2);
    *(_QWORD *)(v9 + 56) = sub_10000F4A0(0, (unint64_t *)&qword_1010F3060, NSError_ptr);
    *(_QWORD *)(v9 + 64) = sub_10001AC90((unint64_t *)&qword_1010EEFA8, (unint64_t *)&qword_1010F3060, NSError_ptr, (const char *)&protocol conformance descriptor for NSObject);
    *(_QWORD *)(v9 + 32) = v10;
    os_log(_:dso:log:_:_:)(v6, &_mh_execute_header, v7, "Error from cancelConnection: %@", 31, 2, v9);
    swift_bridgeObjectRelease();
    swift_errorRelease(v2);
    swift_errorRelease(v2);
  }
  else
  {

  }
}

uint64_t sub_1002227E0(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __n128 v6;

  v3 = *v1;
  v4 = swift_allocObject(&unk_10105FE08, 40, 7);
  *(_QWORD *)(v4 + 16) = a1;
  *(_BYTE *)(v4 + 24) = 3;
  *(_QWORD *)(v4 + 32) = v3;
  v5 = sub_10001A9A8((uint64_t *)&unk_10111C130);
  swift_allocObject(v5, *(unsigned int *)(v5 + 48), *(unsigned __int16 *)(v5 + 52));
  v6 = swift_bridgeObjectRetain(a1);
  return Future.init(_:)(sub_100243378, v4, v6);
}

uint64_t sub_100222868(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;

  v5 = *v2;
  v6 = swift_allocObject(&unk_10105FEA8, 40, 7);
  *(_QWORD *)(v6 + 16) = a1;
  *(_BYTE *)(v6 + 24) = a2;
  *(_QWORD *)(v6 + 32) = v5;
  v7 = sub_10001A9A8((uint64_t *)&unk_10111C130);
  swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
  v8 = swift_bridgeObjectRetain(a1);
  return Future.init(_:)(sub_100245668, v6, v8);
}

uint64_t sub_1002228F0(void (*a1)(_QWORD), uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  unint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __n128 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  NSObject *v47;
  os_log_type_t v48;
  uint8_t *v49;
  uint64_t v50;
  unint64_t v51;
  uint8_t *v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  uint64_t v57;
  uint64_t v58;
  _QWORD v59[2];
  uint64_t v60;
  void (*v61)(_QWORD);
  int v62;
  char *v63;
  __n128 v64;
  uint64_t *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  void (*v72)(_QWORD);
  __int128 v73;
  uint64_t v74;
  __int128 v75;

  v10 = (uint64_t *)sub_10001A9A8(&qword_1010F37F0);
  __chkstk_darwin(v10);
  v12 = (char *)v59 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for AccessoryMetadata(0);
  v14 = __chkstk_darwin(v13);
  v69 = (char *)v59 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v68 = *(_QWORD *)(a3 + 16);
  if (v68)
  {
    v62 = a4;
    v17 = a3 + ((v15[80] + 32) & ~(unint64_t)v15[80]);
    v18 = *(int *)(v14 + 20);
    v66 = v15;
    v67 = v17;
    v19 = (uint64_t *)(v17 + v18);
    v20 = *v19;
    v21 = v19[1];
    sub_10001BBBC(*v19, v21);
    v22 = sub_100A087AC(v20, v21);
    sub_10001BC14(v20, v21);
    if (v22)
    {
      if (qword_1010E9AA8 != -1)
        swift_once(&qword_1010E9AA8, sub_100217BB8);
      v23 = type metadata accessor for Logger(0);
      v24 = sub_10001A9E8(v23, (uint64_t)qword_1011B6C30);
      v25 = Logger.logObject.getter(v24);
      v26 = static os_log_type_t.default.getter(v25);
      if (os_log_type_enabled(v25, v26))
      {
        v27 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v27 = 0;
        _os_log_impl((void *)&_mh_execute_header, v25, v26, "Skip fetching product info for AirTag", v27, 2u);
        swift_slowDealloc(v27, -1, -1);
      }

      v28 = type metadata accessor for BluetoothCommunicationCoordinator.Error(0);
      v29 = v12;
      v30 = 12;
      goto LABEL_27;
    }
    v37 = swift_allocObject(&unk_10105FE30, 40, 7);
    *(_QWORD *)(v37 + 16) = a3;
    *(_BYTE *)(v37 + 24) = v62;
    *(_QWORD *)(v37 + 32) = a5;
    swift_bridgeObjectRetain(a3);
    v38 = sub_10001A9A8(&qword_1010F3808);
    unsafeFromAsyncTask<A>(_:)(&v72, &unk_1010F3800, v37, v38);
    swift_release(v37);
    if (!v72)
    {
      if (qword_1010E9AA8 != -1)
        swift_once(&qword_1010E9AA8, sub_100217BB8);
      v57 = type metadata accessor for Logger(0);
      v58 = sub_10001A9E8(v57, (uint64_t)qword_1011B6C30);
      v33 = Logger.logObject.getter(v58);
      v34 = static os_log_type_t.error.getter(v33);
      if (!os_log_type_enabled(v33, v34))
        goto LABEL_26;
      v35 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v35 = 0;
      v36 = "retrieveProductInfo: invalid parameters";
      goto LABEL_25;
    }
    v60 = a2;
    v61 = a1;
    v74 = (uint64_t)v72;
    v75 = v73;
    v39 = qword_1010E9AA8;
    v59[1] = a3;
    v40 = swift_bridgeObjectRetain(a3);
    if (v39 != -1)
      swift_once(&qword_1010E9AA8, sub_100217BB8);
    v41 = 0;
    v65 = &v71;
    v10 = qword_1011B6C30;
    v40.n128_u64[0] = 136315138;
    v64 = v40;
    v63 = (char *)&type metadata for Any + 8;
    v12 = v66;
    v42 = (uint64_t)v69;
    while (1)
    {
      v43 = v41 + 1;
      if (__OFADD__(v41, 1))
        break;
      v44 = v67 + *((_QWORD *)v12 + 9) * v41;
      v45 = type metadata accessor for Logger(0);
      sub_10001A9E8(v45, (uint64_t)qword_1011B6C30);
      v46 = sub_10005972C(v44, v42, type metadata accessor for AccessoryMetadata);
      v47 = Logger.logObject.getter(v46);
      v48 = static os_log_type_t.info.getter(v47);
      if (os_log_type_enabled(v47, v48))
      {
        v49 = (uint8_t *)swift_slowAlloc(12, -1);
        a1 = (void (*)(_QWORD))swift_slowAlloc(32, -1);
        v72 = a1;
        *(_DWORD *)v49 = v64.n128_u32[0];
        v50 = sub_100132D48();
        v70 = sub_100016940(v50, v51, (uint64_t *)&v72);
        v12 = v66;
        v42 = (uint64_t)v69;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, v65, v49 + 4, v49 + 12);
        swift_bridgeObjectRelease();
        sub_1000126B0(v42, type metadata accessor for AccessoryMetadata);
        _os_log_impl((void *)&_mh_execute_header, v47, v48, "retrieveProductInfo: %s", v49, 0xCu);
        swift_arrayDestroy(a1, 1, v63);
        swift_slowDealloc(a1, -1, -1);
        v52 = v49;
        v10 = qword_1011B6C30;
        swift_slowDealloc(v52, -1, -1);
      }
      else
      {
        sub_1000126B0(v42, type metadata accessor for AccessoryMetadata);
      }

      ++v41;
      if (v43 == v68)
      {
        swift_bridgeObjectRelease();
        v53 = type metadata accessor for Transaction(0);
        __chkstk_darwin(v53);
        LOBYTE(v59[-4]) = v62;
        v59[-3] = &v74;
        v54 = v60;
        v59[-2] = v61;
        v59[-1] = v54;
        static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd.BluetoothCommunicationCoordinator.retrieveProductInfo", 83, 2, sub_100243420, &v59[-6]);
        v55 = v75;
        swift_bridgeObjectRelease();
        return sub_10001BC14(v55, *((unint64_t *)&v55 + 1));
      }
    }
    __break(1u);
  }
  else if (qword_1010E9AA8 == -1)
  {
    goto LABEL_9;
  }
  swift_once(&qword_1010E9AA8, sub_100217BB8);
LABEL_9:
  v31 = type metadata accessor for Logger(0);
  v32 = sub_10001A9E8(v31, (uint64_t)qword_1011B6C30);
  v33 = Logger.logObject.getter(v32);
  v34 = static os_log_type_t.error.getter(v33);
  if (os_log_type_enabled(v33, v34))
  {
    v35 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v35 = 0;
    v36 = "retrieveProductInfo: No metadata found.";
LABEL_25:
    _os_log_impl((void *)&_mh_execute_header, v33, v34, v36, v35, 2u);
    swift_slowDealloc(v35, -1, -1);
  }
LABEL_26:

  v28 = type metadata accessor for BluetoothCommunicationCoordinator.Error(0);
  v29 = v12;
  v30 = 10;
LABEL_27:
  swift_storeEnumTagMultiPayload(v29, v28, v30);
  swift_storeEnumTagMultiPayload(v12, v10, 1);
  a1(v12);
  return sub_100004048((uint64_t)v12, &qword_1010F37F0);
}

uint64_t sub_100222F34(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;

  *(_BYTE *)(v3 + 64) = a3;
  *(_QWORD *)(v3 + 16) = a1;
  *(_QWORD *)(v3 + 24) = a2;
  return swift_task_switch(sub_100222F50, 0, 0);
}

uint64_t sub_100222F50()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  char *v6;

  v1 = qword_1010E9AB0;
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 24));
  if (v1 != -1)
    swift_once(&qword_1010E9AB0, sub_100217C2C);
  v2 = qword_1011B6C48;
  v3 = unk_10111391C;
  v6 = (char *)&dword_101113918 + dword_101113918;
  swift_retain();
  v4 = (_QWORD *)swift_task_alloc(v3);
  *(_QWORD *)(v0 + 32) = v4;
  *v4 = v0;
  v4[1] = sub_100223004;
  return ((uint64_t (*)(_QWORD, _QWORD, _QWORD, uint64_t))v6)(*(_QWORD *)(v0 + 24), 0, *(unsigned __int8 *)(v0 + 64), v2);
}

uint64_t sub_100223004(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  v4 = *(_QWORD **)v3;
  v5 = *(_QWORD *)(*(_QWORD *)v3 + 32);
  v4[5] = a1;
  v4[6] = a2;
  v4[7] = a3;
  swift_task_dealloc(v5);
  return swift_task_switch(sub_100223064, 0, 0);
}

uint64_t sub_100223064()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 56);
  v2 = *(_QWORD *)(v0 + 16);
  *(_OWORD *)v2 = *(_OWORD *)(v0 + 40);
  *(_QWORD *)(v2 + 16) = v1;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100223080(uint64_t a1, char a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  unsigned int *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v40;

  v10 = sub_10001A9A8((uint64_t *)&unk_1010FBA20);
  __chkstk_darwin(v10);
  v12 = (char *)&v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for AccessoryInfoEndPoint(0);
  v14 = __chkstk_darwin(v13);
  v16 = (char *)&v40 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v14);
  v19 = (char *)&v40 - v18;
  __chkstk_darwin(v17);
  v21 = (char *)&v40 - v20;
  if (a2 == 2)
    v22 = (unsigned int *)&enum case for FMNAccountType.thirdPartyAccessory(_:);
  else
    v22 = (unsigned int *)&enum case for FMNAccountType.accessory(_:);
  v23 = *v22;
  v24 = type metadata accessor for FMNAccountType(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 104))(v19, v23, v24);
  sub_1000126EC((uint64_t)v19, (uint64_t)v21, type metadata accessor for AccessoryInfoEndPoint);
  v25 = type metadata accessor for SearchPartyURLSessionFactory(0);
  swift_allocObject(v25, *(unsigned int *)(v25 + 48), *(unsigned __int16 *)(v25 + 52));
  v26 = type metadata accessor for FMNMockingPreferences(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v12, 1, 1, v26);
  v27 = FMNURLSessionFactory.init(mockSessionCreationBlock:preferences:)(0, 0, v12);
  v28 = type metadata accessor for ServerInteractionController(0);
  v29 = swift_allocObject(v28, *(unsigned int *)(v28 + 48), *(unsigned __int16 *)(v28 + 52));
  sub_10005972C((uint64_t)v21, (uint64_t)v16, type metadata accessor for AccessoryInfoEndPoint);
  v30 = (_QWORD *)sub_10041D768((uint64_t)v16, v27, v29);
  sub_1000126B0((uint64_t)v21, type metadata accessor for AccessoryInfoEndPoint);
  v31 = *a3;
  v32 = a3[1];
  v33 = a3[2];
  swift_bridgeObjectRetain(v31);
  sub_10001BBBC(v32, v33);
  v34 = sub_10034BB10(v31, v32, v33, 0, v30);
  swift_bridgeObjectRelease();
  sub_10001BC14(v32, v33);
  v35 = (_QWORD *)swift_allocObject(&unk_10105FE58, 40, 7);
  v35[2] = a1;
  v35[3] = a4;
  v35[4] = a5;
  swift_retain();
  swift_retain();
  v36 = Future.addFailure(block:)(sub_100243444, v35);
  swift_release(v36);
  swift_release(v35);
  v37 = (_QWORD *)swift_allocObject(&unk_10105FE80, 40, 7);
  v37[2] = a1;
  v37[3] = a4;
  v37[4] = a5;
  swift_retain();
  swift_retain();
  v38 = Future.addSuccess(block:)(sub_100243480, v37);
  swift_release(v30);
  swift_release(v34);
  swift_release(v38);
  return swift_release(v37);
}

uint64_t sub_100223374(uint64_t a1, uint64_t a2, void (*a3)(_QWORD))
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t *v19;
  void (*v20)(_QWORD);
  uint64_t v21;
  uint64_t v22;

  v5 = sub_10001A9A8(&qword_1010F37F0);
  __chkstk_darwin(v5);
  v7 = (uint64_t *)((char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  Transaction.capture()();
  if (qword_1010E9AA8 != -1)
    swift_once(&qword_1010E9AA8, sub_100217BB8);
  v8 = type metadata accessor for Logger(0);
  sub_10001A9E8(v8, (uint64_t)qword_1011B6C30);
  swift_errorRetain(a1);
  v9 = swift_errorRetain(a1);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.error.getter(v10);
  if (os_log_type_enabled(v10, v11))
  {
    v20 = a3;
    v12 = (uint8_t *)swift_slowAlloc(12, -1);
    v19 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v12 = 138543362;
    swift_errorRetain(a1);
    v13 = _swift_stdlib_bridgeErrorToNSError(a1);
    v21 = v13;
    a3 = v20;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22, v12 + 4, v12 + 12);
    v14 = v19;
    *v19 = v13;
    swift_errorRelease(a1);
    swift_errorRelease(a1);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Error in product info request %{public}@", v12, 0xCu);
    v15 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v14, 1, v15);
    swift_slowDealloc(v14, -1, -1);
    swift_slowDealloc(v12, -1, -1);
  }
  else
  {
    swift_errorRelease(a1);
    swift_errorRelease(a1);
  }

  *v7 = a1;
  v16 = type metadata accessor for BluetoothCommunicationCoordinator.Error(0);
  swift_storeEnumTagMultiPayload(v7, v16, 0);
  swift_storeEnumTagMultiPayload(v7, v5, 1);
  swift_errorRetain(a1);
  a3(v7);
  return sub_100004048((uint64_t)v7, &qword_1010F37F0);
}

uint64_t sub_1002235CC(uint64_t a1, uint64_t a2, void (*a3)(uint64_t), uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  uint8_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  NSObject *v45;
  os_log_type_t v46;
  uint64_t v47;
  uint8_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t (*v60)(char *, uint64_t, uint64_t);
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  NSObject *v64;
  os_log_type_t v65;
  uint8_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  void (*v71)(char *, uint64_t);
  void (*v72)(uint64_t);
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  NSObject *v84;
  os_log_type_t v85;
  _BOOL4 v86;
  uint8_t *v87;
  uint64_t v88;
  uint64_t v89;
  Swift::String v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  NSObject *v95;
  os_log_type_t v96;
  uint8_t *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  _QWORD *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  char *v113;
  char *v114;
  uint64_t v115;
  uint8_t *v117;
  uint64_t (*v118)(char *, uint64_t, uint64_t);
  uint64_t v119;
  uint8_t *v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  void (*v127)(uint64_t);
  _QWORD *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint8_t *v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t v138;
  uint64_t v139;

  v7 = sub_10001A9A8((uint64_t *)&unk_10111C0A0);
  __chkstk_darwin(v7);
  v133 = (uint64_t)&v117 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for AccessoryProductInfo(0);
  v132 = *(_QWORD *)(v9 - 8);
  v10 = __chkstk_darwin(v9);
  v135 = (uint8_t *)&v117 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v131 = (uint64_t)&v117 - v12;
  v121 = type metadata accessor for AccessoryInfoResponseContent(0);
  v123 = *(_QWORD *)(v121 - 8);
  v13 = __chkstk_darwin(v121);
  v134 = (uint64_t)&v117 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v16 = (char *)&v117 - v15;
  v17 = sub_10001A9A8(&qword_1010F37F0);
  __chkstk_darwin(v17);
  v128 = (uint8_t **)((char *)&v117 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  v129 = type metadata accessor for FMNServerInteractionController.FMNResponseFields(0);
  v19 = *(_QWORD *)(v129 - 8);
  v20 = __chkstk_darwin(v129);
  v22 = (char *)&v117 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __chkstk_darwin(v20);
  v122 = (char *)&v117 - v24;
  __chkstk_darwin(v23);
  v126 = (char *)&v117 - v25;
  v26 = type metadata accessor for String.Encoding(0);
  __chkstk_darwin(v26);
  v28 = (char *)&v117 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  Transaction.capture()();
  if (FMNServerInteractionController.FMNResponseFields.statusCode.getter() == 200)
  {
    v127 = a3;
    v29 = FMNServerInteractionController.FMNResponseFields.data.getter();
    v31 = v30;
    static String.Encoding.utf8.getter(v29);
    v32 = String.init(data:encoding:)(v29, v31, v28);
    v34 = v33;
    sub_10001BC14(v29, v31);
    v130 = v9;
    v124 = a4;
    v125 = v17;
    if (v34)
    {
      if (qword_1010E9AA8 != -1)
        swift_once(&qword_1010E9AA8, sub_100217BB8);
      v35 = type metadata accessor for Logger(0);
      sub_10001A9E8(v35, (uint64_t)qword_1011B6C30);
      swift_bridgeObjectRetain(v34);
      v37 = Logger.logObject.getter(v36);
      v38 = static os_log_type_t.info.getter(v37);
      if (os_log_type_enabled(v37, v38))
      {
        v39 = (uint8_t *)swift_slowAlloc(12, -1);
        v40 = swift_slowAlloc(32, -1);
        v136 = v40;
        *(_DWORD *)v39 = 136315138;
        v120 = v39 + 4;
        swift_bridgeObjectRetain(v34);
        v138 = sub_100016940(v32, v34, &v136);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v138, &v139, v120, v39 + 12);
        swift_bridgeObjectRelease_n(v34, 3);
        _os_log_impl((void *)&_mh_execute_header, v37, v38, "response data: %s", v39, 0xCu);
        swift_arrayDestroy(v40, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v40, -1, -1);
        swift_slowDealloc(v39, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(v34, 2);
      }
    }
    v57 = v126;
    if (qword_1010E9AA8 != -1)
      swift_once(&qword_1010E9AA8, sub_100217BB8);
    v58 = type metadata accessor for Logger(0);
    v59 = sub_10001A9E8(v58, (uint64_t)qword_1011B6C30);
    v60 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v19 + 16);
    v119 = a1;
    v61 = a1;
    v62 = v129;
    v118 = v60;
    v63 = v60(v57, v61, v129);
    v120 = (uint8_t *)v59;
    v64 = Logger.logObject.getter(v63);
    v65 = static os_log_type_t.default.getter(v64);
    if (os_log_type_enabled(v64, v65))
    {
      v66 = (uint8_t *)swift_slowAlloc(12, -1);
      v67 = swift_slowAlloc(32, -1);
      v136 = v67;
      *(_DWORD *)v66 = 136446210;
      v117 = v66 + 4;
      v68 = sub_100006204((unint64_t *)&qword_1010FBA30, (uint64_t (*)(uint64_t))&type metadata accessor for FMNServerInteractionController.FMNResponseFields, (uint64_t)&protocol conformance descriptor for FMNServerInteractionController.FMNResponseFields);
      v69 = dispatch thunk of CustomStringConvertible.description.getter(v62, v68);
      v138 = sub_100016940(v69, v70, &v136);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v138, &v139, v117, v66 + 12);
      swift_bridgeObjectRelease();
      v71 = *(void (**)(char *, uint64_t))(v19 + 8);
      v71(v57, v62);
      _os_log_impl((void *)&_mh_execute_header, v64, v65, "response: %{public}s", v66, 0xCu);
      swift_arrayDestroy(v67, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v67, -1, -1);
      swift_slowDealloc(v66, -1, -1);
    }
    else
    {
      v71 = *(void (**)(char *, uint64_t))(v19 + 8);
      v71(v57, v62);
    }

    v72 = v127;
    v73 = type metadata accessor for JSONDecoder(0);
    v74 = swift_allocObject(v73, *(unsigned int *)(v73 + 48), *(unsigned __int16 *)(v73 + 52));
    v75 = JSONDecoder.init()(v74);
    v76 = v119;
    v77 = FMNServerInteractionController.FMNResponseFields.data.getter();
    v79 = v78;
    v80 = sub_100243334();
    v126 = (char *)v75;
    dispatch thunk of JSONDecoder.decode<A>(_:from:)(&type metadata for AccessoryInfoResponse, v77, v79, &type metadata for AccessoryInfoResponse, v80);
    sub_10001BC14(v77, v79);
    v81 = v136;
    v82 = *(_QWORD *)(v136 + 16);
    if (v82)
    {
      v83 = swift_bridgeObjectRetain_n(v136, 2);
      v84 = Logger.logObject.getter(v83);
      v85 = static os_log_type_t.info.getter(v84);
      v86 = os_log_type_enabled(v84, v85);
      v129 = v81;
      if (v86)
      {
        v87 = (uint8_t *)swift_slowAlloc(12, -1);
        v88 = swift_slowAlloc(32, -1);
        *(_DWORD *)v87 = 136315138;
        v138 = v88;
        v122 = (char *)(v87 + 4);
        v136 = 0;
        v137 = 0xE000000000000000;
        swift_bridgeObjectRetain(v81);
        _StringGuts.grow(_:)(34);
        swift_bridgeObjectRelease();
        v136 = 0xD000000000000020;
        v137 = 0x8000000100ECBDF0;
        swift_bridgeObjectRetain(v81);
        v90._countAndFlagsBits = Array.description.getter(v89, v121);
        String.append(_:)(v90);
        swift_bridgeObjectRelease_n(v129, 2);
        v81 = v129;
        swift_bridgeObjectRelease();
        v136 = sub_100016940(v136, v137, &v138);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v136, &v137, v122, v87 + 12);
        swift_bridgeObjectRelease_n(v81, 2);
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v84, v85, "decodedResponse: %s", v87, 0xCu);
        swift_arrayDestroy(v88, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v88, -1, -1);
        swift_slowDealloc(v87, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(v81, 2);
      }
      v102 = v130;
      v103 = v81 + ((*(unsigned __int8 *)(v123 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v123 + 80));
      v104 = *(_QWORD *)(v123 + 72);
      swift_bridgeObjectRetain(v81);
      v105 = _swiftEmptyArrayStorage;
      v106 = v132;
      do
      {
        sub_10005972C(v103, (uint64_t)v16, type metadata accessor for AccessoryInfoResponseContent);
        v107 = v134;
        sub_10005972C((uint64_t)v16, v134, type metadata accessor for AccessoryInfoResponseContent);
        v108 = v107;
        v109 = v133;
        sub_100D1536C(v108, v133);
        sub_1000126B0((uint64_t)v16, type metadata accessor for AccessoryInfoResponseContent);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v106 + 48))(v109, 1, v102) == 1)
        {
          sub_100004048(v109, (uint64_t *)&unk_10111C0A0);
        }
        else
        {
          v110 = v131;
          sub_1000126EC(v109, v131, type metadata accessor for AccessoryProductInfo);
          sub_1000126EC(v110, (uint64_t)v135, type metadata accessor for AccessoryProductInfo);
          if ((swift_isUniquelyReferenced_nonNull_native(v105) & 1) == 0)
            v105 = (_QWORD *)sub_1007C8F98(0, v105[2] + 1, 1, (unint64_t)v105);
          v112 = v105[2];
          v111 = v105[3];
          if (v112 >= v111 >> 1)
            v105 = (_QWORD *)sub_1007C8F98(v111 > 1, v112 + 1, 1, (unint64_t)v105);
          v105[2] = v112 + 1;
          v106 = v132;
          sub_1000126EC((uint64_t)v135, (uint64_t)v105+ ((*(unsigned __int8 *)(v106 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v106 + 80))+ *(_QWORD *)(v132 + 72) * v112, type metadata accessor for AccessoryProductInfo);
          v102 = v130;
        }
        v103 += v104;
        --v82;
      }
      while (v82);
      swift_bridgeObjectRelease_n(v129, 2);
      v56 = (uint64_t)v128;
      *v128 = v105;
      swift_storeEnumTagMultiPayload(v56, v125, 0);
      v127(v56);
      v113 = v126;
    }
    else
    {
      swift_bridgeObjectRelease();
      v91 = v122;
      v92 = v76;
      v93 = v129;
      v94 = v118(v122, v92, v129);
      v95 = Logger.logObject.getter(v94);
      v96 = static os_log_type_t.error.getter(v95);
      if (os_log_type_enabled(v95, v96))
      {
        v97 = (uint8_t *)swift_slowAlloc(12, -1);
        v98 = swift_slowAlloc(32, -1);
        *(_DWORD *)v97 = 136446210;
        v135 = v97 + 4;
        v136 = v98;
        v99 = sub_100006204((unint64_t *)&qword_1010FBA30, (uint64_t (*)(uint64_t))&type metadata accessor for FMNServerInteractionController.FMNResponseFields, (uint64_t)&protocol conformance descriptor for FMNServerInteractionController.FMNResponseFields);
        v100 = dispatch thunk of CustomStringConvertible.description.getter(v93, v99);
        v138 = sub_100016940(v100, v101, &v136);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v138, &v139, v135, v97 + 12);
        swift_bridgeObjectRelease();
        v71(v91, v93);
        _os_log_impl((void *)&_mh_execute_header, v95, v96, "invalidResponse: %{public}s", v97, 0xCu);
        swift_arrayDestroy(v98, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v98, -1, -1);
        swift_slowDealloc(v97, -1, -1);
      }
      else
      {
        v71(v91, v93);
      }

      v114 = v126;
      v56 = (uint64_t)v128;
      v115 = type metadata accessor for BluetoothCommunicationCoordinator.Error(0);
      swift_storeEnumTagMultiPayload(v56, v115, 11);
      swift_storeEnumTagMultiPayload(v56, v125, 1);
      v72(v56);
      v113 = v114;
    }
    swift_release(v113);
  }
  else
  {
    if (qword_1010E9AA8 != -1)
      swift_once(&qword_1010E9AA8, sub_100217BB8);
    v41 = type metadata accessor for Logger(0);
    sub_10001A9E8(v41, (uint64_t)qword_1011B6C30);
    v42 = a1;
    v43 = v129;
    v44 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v19 + 16))(v22, v42, v129);
    v45 = Logger.logObject.getter(v44);
    v46 = static os_log_type_t.error.getter(v45);
    if (os_log_type_enabled(v45, v46))
    {
      v47 = swift_slowAlloc(12, -1);
      v124 = a4;
      v48 = (uint8_t *)v47;
      v49 = swift_slowAlloc(32, -1);
      v127 = a3;
      v125 = v17;
      v50 = v49;
      v136 = v49;
      *(_DWORD *)v48 = 136315138;
      v51 = sub_100006204((unint64_t *)&qword_1010FBA30, (uint64_t (*)(uint64_t))&type metadata accessor for FMNServerInteractionController.FMNResponseFields, (uint64_t)&protocol conformance descriptor for FMNServerInteractionController.FMNResponseFields);
      v52 = dispatch thunk of CustomStringConvertible.description.getter(v43, v51);
      v138 = sub_100016940(v52, v53, &v136);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v138, &v139, v48 + 4, v48 + 12);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v19 + 8))(v22, v43);
      _os_log_impl((void *)&_mh_execute_header, v45, v46, "Product info check failed: %s", v48, 0xCu);
      swift_arrayDestroy(v50, 1, (char *)&type metadata for Any + 8);
      v54 = v50;
      v17 = v125;
      a3 = v127;
      swift_slowDealloc(v54, -1, -1);
      swift_slowDealloc(v48, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v19 + 8))(v22, v43);
    }

    v55 = type metadata accessor for BluetoothCommunicationCoordinator.Error(0);
    v56 = (uint64_t)v128;
    swift_storeEnumTagMultiPayload(v128, v55, 11);
    swift_storeEnumTagMultiPayload(v56, v17, 1);
    a3(v56);
  }
  return sub_100004048(v56, &qword_1010F37F0);
}

uint64_t sub_10022447C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_1000234D8(v0, qword_1010F3458);
  v1 = sub_10001A9E8(v0, (uint64_t)qword_1010F3458);
  if (qword_1010E9AA8 != -1)
    swift_once(&qword_1010E9AA8, sub_100217BB8);
  v2 = sub_10001A9E8(v0, (uint64_t)qword_1011B6C30);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_10022450C()
{
  uint64_t v0;

  if (qword_1010E9AB8 != -1)
    swift_once(&qword_1010E9AB8, sub_10022447C);
  v0 = type metadata accessor for Logger(0);
  return sub_10001A9E8(v0, (uint64_t)qword_1010F3458);
}

uint64_t sub_100224554()
{
  uint64_t v0;
  char *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  type metadata accessor for UUID(0);
  __chkstk_darwin();
  v1 = (char *)&v4 - ((v0 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = type metadata accessor for WorkItemQueue(0);
  UUID.init()(v2);
  result = WorkItemQueue.__allocating_init(name:identifier:)(0xD00000000000001DLL, 0x8000000100ECC100, v1);
  qword_1010F3470 = result;
  return result;
}

uint64_t sub_1002245E0(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_BYTE *)(v3 + 176) = a3;
  *(_QWORD *)(v3 + 16) = a1;
  *(_QWORD *)(v3 + 24) = a2;
  v4 = type metadata accessor for CentralManager.State(0);
  *(_QWORD *)(v3 + 32) = v4;
  v5 = *(_QWORD *)(v4 - 8);
  *(_QWORD *)(v3 + 40) = v5;
  *(_QWORD *)(v3 + 48) = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10001A9A8((uint64_t *)&unk_101116060);
  *(_QWORD *)(v3 + 56) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100224668, 0, 0);
}

uint64_t sub_100224668()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = v0[7];
  v0[8] = type metadata accessor for CentralManager(0);
  v2 = type metadata accessor for CentralManager.Options(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
  v3 = (_QWORD *)swift_task_alloc(async function pointer to CentralManager.__allocating_init(options:)[1]);
  v0[9] = v3;
  *v3 = v0;
  v3[1] = sub_1002246F4;
  return CentralManager.__allocating_init(options:)(v0[7]);
}

uint64_t sub_1002246F4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 72);
  *(_QWORD *)(*(_QWORD *)v1 + 80) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100224750, 0, 0);
}

uint64_t sub_100224750()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;

  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0[5] + 104))(v0[6], enum case for CentralManager.State.poweredOn(_:), v0[4]);
  v1 = (_QWORD *)swift_task_alloc(async function pointer to CentralManagerProtocol.await(state:)[1]);
  v0[11] = v1;
  v2 = sub_100006204(&qword_1010EC468, (uint64_t (*)(uint64_t))&type metadata accessor for CentralManager, (uint64_t)&protocol conformance descriptor for CentralManager);
  *v1 = v0;
  v1[1] = sub_1002247E4;
  return CentralManagerProtocol.await(state:)(v0[6], v0[8], v2);
}

uint64_t sub_1002247E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v8;
  uint64_t (*v9)(_QWORD);

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 88);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 40);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 48);
  v5 = *(_QWORD *)(*(_QWORD *)v1 + 32);
  v6 = *(_QWORD **)v1;
  v6[12] = v0;
  swift_task_dealloc(v2);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  if (v0)
    return swift_task_switch(sub_100224BD8, 0, 0);
  v9 = (uint64_t (*)(_QWORD))((char *)&async function pointer to dispatch thunk of CentralManager.retrievePeripheral(macAddress:)
                                      + async function pointer to dispatch thunk of CentralManager.retrievePeripheral(macAddress:));
  v8 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of CentralManager.retrievePeripheral(macAddress:)
                                  + 1));
  v6[13] = v8;
  *v8 = v6;
  v8[1] = sub_1002248BC;
  return v9(v6[3]);
}

uint64_t sub_1002248BC(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 104);
  *(_QWORD *)(v3 + 112) = a1;
  *(_QWORD *)(v3 + 120) = v1;
  swift_task_dealloc(v4);
  if (v1)
    v5 = sub_100224C1C;
  else
    v5 = sub_100224928;
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_100224928()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t, char);

  v1 = *(_QWORD *)(v0 + 112);
  if (v1)
  {
    v12 = (uint64_t (*)(uint64_t, uint64_t, char))((char *)&dword_1010F3818 + dword_1010F3818);
    v2 = (_QWORD *)swift_task_alloc(unk_1010F381C);
    *(_QWORD *)(v0 + 128) = v2;
    *v2 = v0;
    v2[1] = sub_100224A64;
    return v12(*(_QWORD *)(v0 + 16), v1, *(_BYTE *)(v0 + 176));
  }
  else
  {
    v4 = *(_QWORD *)(v0 + 24);
    v5 = type metadata accessor for AccessoryMetadataManager.Error(0);
    v6 = sub_100006204(&qword_1010F37D8, type metadata accessor for AccessoryMetadataManager.Error, (uint64_t)&unk_100E2E588);
    swift_allocError(v5, v6, 0, 0);
    v8 = v7;
    v9 = type metadata accessor for MACAddress(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v8, v4, v9);
    v10 = swift_storeEnumTagMultiPayload(v8, v5, 1);
    swift_willThrow(v10);
    swift_release();
    v11 = *(_QWORD *)(v0 + 48);
    swift_task_dealloc(*(_QWORD *)(v0 + 56));
    swift_task_dealloc(v11);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100224A64()
{
  uint64_t v0;
  uint64_t *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t (*v6)();
  uint64_t (*v8)(void);

  v2 = (_QWORD *)*v1;
  v3 = *(_QWORD *)(*v1 + 128);
  v4 = *v1;
  swift_task_dealloc(v3);
  if (v0)
  {
    v2[19] = v0;
    v8 = (uint64_t (*)(void))((char *)&async function pointer to dispatch thunk of Peripheral.cancelConnection()
                           + async function pointer to dispatch thunk of Peripheral.cancelConnection());
    v5 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of Peripheral.cancelConnection()
                                    + 1));
    v2[20] = v5;
    v6 = sub_100224C60;
  }
  else
  {
    v8 = (uint64_t (*)(void))((char *)&async function pointer to dispatch thunk of Peripheral.cancelConnection()
                           + async function pointer to dispatch thunk of Peripheral.cancelConnection());
    v5 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of Peripheral.cancelConnection()
                                    + 1));
    v2[17] = v5;
    v6 = sub_100224B18;
  }
  *v5 = v4;
  v5[1] = v6;
  return v8();
}

uint64_t sub_100224B18()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 136);
  *(_QWORD *)(*(_QWORD *)v1 + 144) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_100224D28;
  else
    v3 = sub_100224B7C;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_100224B7C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 112);
  v3 = *(_QWORD *)(v0 + 48);
  v2 = *(_QWORD *)(v0 + 56);
  swift_release(*(_QWORD *)(v0 + 80));
  swift_release(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100224BD8()
{
  uint64_t v0;
  uint64_t v1;

  swift_release(*(_QWORD *)(v0 + 80));
  v1 = *(_QWORD *)(v0 + 48);
  swift_task_dealloc(*(_QWORD *)(v0 + 56));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100224C1C()
{
  uint64_t v0;
  uint64_t v1;

  swift_release(*(_QWORD *)(v0 + 80));
  v1 = *(_QWORD *)(v0 + 48);
  swift_task_dealloc(*(_QWORD *)(v0 + 56));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100224C60()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 160);
  *(_QWORD *)(*(_QWORD *)v1 + 168) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_100224D9C;
  else
    v3 = sub_100224CC4;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_100224CC4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(v1 + 112);
  v3 = *(_QWORD *)(v1 + 80);
  swift_willThrow(a1);
  swift_release(v2);
  swift_release(v3);
  v4 = *(_QWORD *)(v1 + 48);
  swift_task_dealloc(*(_QWORD *)(v1 + 56));
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_100224D28()
{
  uint64_t *v0;
  uint64_t **v1;
  uint64_t (*v3)(void);

  sub_1000126B0(v0[2], type metadata accessor for RawAccessoryMetadata);
  v0[19] = v0[18];
  v3 = (uint64_t (*)(void))((char *)&async function pointer to dispatch thunk of Peripheral.cancelConnection()
                         + async function pointer to dispatch thunk of Peripheral.cancelConnection());
  v1 = (uint64_t **)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of Peripheral.cancelConnection()
                                    + 1));
  v0[20] = (uint64_t)v1;
  *v1 = v0;
  v1[1] = (uint64_t *)sub_100224C60;
  return v3();
}

uint64_t sub_100224D9C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 112);
  v2 = *(_QWORD *)(v0 + 80);
  swift_errorRelease(*(_QWORD *)(v0 + 152));
  swift_release(v1);
  swift_release(v2);
  v3 = *(_QWORD *)(v0 + 48);
  swift_task_dealloc(*(_QWORD *)(v0 + 56));
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100224DF8(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  *(_BYTE *)(v3 + 1480) = a3;
  *(_QWORD *)(v3 + 200) = a1;
  *(_QWORD *)(v3 + 208) = a2;
  v4 = type metadata accessor for CentralManager.Error(0);
  *(_QWORD *)(v3 + 216) = v4;
  v5 = *(_QWORD *)(v4 - 8);
  *(_QWORD *)(v3 + 224) = v5;
  *(_QWORD *)(v3 + 232) = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for UUID(0);
  *(_QWORD *)(v3 + 240) = v6;
  v7 = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v3 + 248) = v7;
  *(_QWORD *)(v3 + 256) = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A9A8(&qword_1010EF7C0);
  *(_QWORD *)(v3 + 264) = v8;
  v9 = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(v3 + 272) = v9;
  *(_QWORD *)(v3 + 280) = swift_task_alloc((*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Duration.UnitsFormatStyle.Unit(0);
  *(_QWORD *)(v3 + 288) = v10;
  v11 = *(_QWORD *)(v10 - 8);
  *(_QWORD *)(v3 + 296) = v11;
  *(_QWORD *)(v3 + 304) = swift_task_alloc((*(_QWORD *)(v11 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Logger(0);
  *(_QWORD *)(v3 + 312) = v12;
  v13 = *(_QWORD *)(v12 - 8);
  *(_QWORD *)(v3 + 320) = v13;
  *(_QWORD *)(v3 + 328) = swift_task_alloc((*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_10001A9A8((uint64_t *)&unk_101115F50);
  *(_QWORD *)(v3 + 336) = v14;
  v15 = *(_QWORD *)(v14 - 8);
  *(_QWORD *)(v3 + 344) = v15;
  v16 = (*(_QWORD *)(v15 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v3 + 352) = swift_task_alloc(v16);
  *(_QWORD *)(v3 + 360) = swift_task_alloc(v16);
  *(_QWORD *)(v3 + 368) = swift_task_alloc(v16);
  *(_QWORD *)(v3 + 376) = swift_task_alloc(v16);
  *(_QWORD *)(v3 + 384) = swift_task_alloc(v16);
  *(_QWORD *)(v3 + 392) = swift_task_alloc(v16);
  *(_QWORD *)(v3 + 400) = swift_task_alloc(v16);
  *(_QWORD *)(v3 + 408) = swift_task_alloc(v16);
  *(_QWORD *)(v3 + 416) = swift_task_alloc(v16);
  *(_QWORD *)(v3 + 424) = swift_task_alloc(v16);
  *(_QWORD *)(v3 + 432) = swift_task_alloc(v16);
  v17 = sub_10001A9A8(&qword_1010EC638);
  *(_QWORD *)(v3 + 440) = v17;
  v18 = *(_QWORD *)(v17 - 8);
  *(_QWORD *)(v3 + 448) = v18;
  v19 = (*(_QWORD *)(v18 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v3 + 456) = swift_task_alloc(v19);
  *(_QWORD *)(v3 + 464) = swift_task_alloc(v19);
  *(_QWORD *)(v3 + 472) = swift_task_alloc(v19);
  *(_QWORD *)(v3 + 480) = swift_task_alloc(v19);
  *(_QWORD *)(v3 + 488) = swift_task_alloc(v19);
  *(_QWORD *)(v3 + 496) = swift_task_alloc(v19);
  *(_QWORD *)(v3 + 504) = swift_task_alloc(v19);
  *(_QWORD *)(v3 + 512) = swift_task_alloc(v19);
  *(_QWORD *)(v3 + 520) = swift_task_alloc(v19);
  *(_QWORD *)(v3 + 528) = swift_task_alloc(v19);
  v20 = type metadata accessor for ContinuousClock.Instant(0);
  *(_QWORD *)(v3 + 536) = v20;
  v21 = *(_QWORD *)(v20 - 8);
  *(_QWORD *)(v3 + 544) = v21;
  v22 = (*(_QWORD *)(v21 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v3 + 552) = swift_task_alloc(v22);
  *(_QWORD *)(v3 + 560) = swift_task_alloc(v22);
  *(_QWORD *)(v3 + 568) = swift_task_alloc(v22);
  *(_QWORD *)(v3 + 576) = swift_task_alloc(v22);
  v23 = sub_10001A9A8(&qword_1010EC448);
  *(_QWORD *)(v3 + 584) = v23;
  v24 = *(_QWORD *)(v23 - 8);
  *(_QWORD *)(v3 + 592) = v24;
  *(_QWORD *)(v3 + 600) = swift_task_alloc((*(_QWORD *)(v24 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = type metadata accessor for ContinuousClock(0);
  *(_QWORD *)(v3 + 608) = v25;
  v26 = *(_QWORD *)(v25 - 8);
  *(_QWORD *)(v3 + 616) = v26;
  *(_QWORD *)(v3 + 624) = swift_task_alloc((*(_QWORD *)(v26 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1002250E8, 0, 0);
}

uint64_t sub_1002250E8(uint64_t a1)
{
  uint64_t v1;
  unsigned int v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v2 = *(unsigned __int8 *)(v1 + 1480);
  ContinuousClock.init()(a1);
  if (v2 >= 2)
  {
    v15 = type metadata accessor for Service(0);
    if (v2 == 2)
    {
      v16 = "87290102-3C51-43B1-A1A9-11B9DC38478B";
      v17 = 36;
    }
    else
    {
      v16 = "FD44";
      v17 = 4;
    }
    v18 = Identifier.init(stringLiteral:)(v16, v17, 2, v15);
    v19 = ContinuousClock.now.getter(v18);
    static Task<>.checkCancellation()(v19);
    v20 = type metadata accessor for Peripheral(0);
    *(_QWORD *)(v1 + 632) = v20;
    v21 = sub_100006204(&qword_1010EC4A0, (uint64_t (*)(uint64_t))&type metadata accessor for Peripheral, (uint64_t)&protocol conformance descriptor for Peripheral);
    *(_QWORD *)(v1 + 640) = v21;
    v22 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of PeripheralProtocol.connect()[1]);
    *(_QWORD *)(v1 + 648) = v22;
    *v22 = v1;
    v22[1] = sub_1002254CC;
    return dispatch thunk of PeripheralProtocol.connect()(v20, v21);
  }
  else
  {
    v3 = sub_100059390();
    v46 = swift_allocError(&type metadata for CentralManager.Error, v3, 0, 0);
    *(_QWORD *)v4 = 2;
    *(_OWORD *)(v4 + 8) = 0u;
    *(_OWORD *)(v4 + 24) = 0u;
    *(_BYTE *)(v4 + 40) = 11;
    swift_willThrow(v46);
    v5 = *(_QWORD *)(v1 + 624);
    v6 = *(_QWORD *)(v1 + 600);
    v7 = *(_QWORD *)(v1 + 576);
    v8 = *(_QWORD *)(v1 + 568);
    v9 = *(_QWORD *)(v1 + 560);
    v10 = *(_QWORD *)(v1 + 552);
    v11 = *(_QWORD *)(v1 + 528);
    v12 = *(_QWORD *)(v1 + 520);
    v13 = *(_QWORD *)(v1 + 512);
    v23 = *(_QWORD *)(v1 + 504);
    v24 = *(_QWORD *)(v1 + 496);
    v25 = *(_QWORD *)(v1 + 488);
    v26 = *(_QWORD *)(v1 + 480);
    v27 = *(_QWORD *)(v1 + 472);
    v28 = *(_QWORD *)(v1 + 464);
    v29 = *(_QWORD *)(v1 + 456);
    v30 = *(_QWORD *)(v1 + 432);
    v31 = *(_QWORD *)(v1 + 424);
    v32 = *(_QWORD *)(v1 + 416);
    v33 = *(_QWORD *)(v1 + 408);
    v34 = *(_QWORD *)(v1 + 400);
    v35 = *(_QWORD *)(v1 + 392);
    v36 = *(_QWORD *)(v1 + 384);
    v37 = *(_QWORD *)(v1 + 376);
    v38 = *(_QWORD *)(v1 + 368);
    v39 = *(_QWORD *)(v1 + 360);
    v40 = *(_QWORD *)(v1 + 352);
    v41 = *(_QWORD *)(v1 + 328);
    v42 = *(_QWORD *)(v1 + 280);
    v43 = *(_QWORD *)(v1 + 304);
    v44 = *(_QWORD *)(v1 + 256);
    v45 = *(_QWORD *)(v1 + 232);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v1 + 616) + 8))(v5, *(_QWORD *)(v1 + 608));
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    swift_task_dealloc(v36);
    swift_task_dealloc(v37);
    swift_task_dealloc(v38);
    swift_task_dealloc(v39);
    swift_task_dealloc(v40);
    swift_task_dealloc(v41);
    swift_task_dealloc(v43);
    swift_task_dealloc(v42);
    swift_task_dealloc(v44);
    swift_task_dealloc(v45);
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_1002254CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v5;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 648);
  v3 = *(_QWORD **)v1;
  v3[82] = v0;
  swift_task_dealloc(v2);
  if (v0)
    return swift_task_switch(sub_1002255DC, 0, 0);
  v5 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of PeripheralProtocol.subscript.getter[1]);
  v3[83] = v5;
  *v5 = v3;
  v5[1] = sub_10022556C;
  return dispatch thunk of PeripheralProtocol.subscript.getter(v3[75], v3[79], v3[80]);
}

uint64_t sub_10022556C(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 664);
  *(_QWORD *)(v3 + 672) = a1;
  *(_QWORD *)(v3 + 680) = v1;
  swift_task_dealloc(v4);
  if (v1)
    v5 = sub_100225A34;
  else
    v5 = sub_100225680;
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_1002255DC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  (*(void (**)(_QWORD, _QWORD))(v0[68] + 8))(v0[72], v0[67]);
  v0[182] = v0[82];
  v1 = type metadata accessor for Peripheral(0);
  v2 = sub_100006204(&qword_1010EC4A0, (uint64_t (*)(uint64_t))&type metadata accessor for Peripheral, (uint64_t)&protocol conformance descriptor for Peripheral);
  v3 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of PeripheralProtocol.cancelConnection()[1]);
  v0[183] = v3;
  *v3 = v0;
  v3[1] = sub_10022AE94;
  return dispatch thunk of PeripheralProtocol.cancelConnection()(v1, v2);
}

uint64_t sub_100225680(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v2 = v1[85];
  static Task<>.checkCancellation()(a1);
  if (!v2)
  {
    sub_10009A380(0, 11, 0);
    __asm { BR              X9 }
  }
  (*(void (**)(_QWORD, _QWORD))(v1[68] + 8))(v1[72], v1[67]);
  swift_release();
  v1[182] = v2;
  v3 = type metadata accessor for Peripheral(0);
  v4 = sub_100006204(&qword_1010EC4A0, (uint64_t (*)(uint64_t))&type metadata accessor for Peripheral, (uint64_t)&protocol conformance descriptor for Peripheral);
  v5 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of PeripheralProtocol.cancelConnection()[1]);
  v1[183] = v5;
  *v5 = v1;
  v5[1] = sub_10022AE94;
  return dispatch thunk of PeripheralProtocol.cancelConnection()(v3, v4);
}

uint64_t sub_100225A34()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  (*(void (**)(_QWORD, _QWORD))(v0[68] + 8))(v0[72], v0[67]);
  v0[182] = v0[85];
  v1 = type metadata accessor for Peripheral(0);
  v2 = sub_100006204(&qword_1010EC4A0, (uint64_t (*)(uint64_t))&type metadata accessor for Peripheral, (uint64_t)&protocol conformance descriptor for Peripheral);
  v3 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of PeripheralProtocol.cancelConnection()[1]);
  v0[183] = v3;
  *v3 = v0;
  v3[1] = sub_10022AE94;
  return dispatch thunk of PeripheralProtocol.cancelConnection()(v1, v2);
}

uint64_t sub_100225AD8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 712);
  *(_QWORD *)(*(_QWORD *)v1 + 720) = v0;
  swift_task_dealloc(v2);
  swift_bridgeObjectRelease();
  if (v0)
  {
    v3 = sub_100225C94;
  }
  else
  {
    swift_bridgeObjectRelease();
    v3 = sub_100225B64;
  }
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_100225B64(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v7;
  _QWORD *v8;

  v2 = v1[90];
  static Task<>.checkCancellation()(a1);
  if (v2)
  {
    (*(void (**)(_QWORD, _QWORD))(v1[68] + 8))(v1[72], v1[67]);
    swift_release();
    v1[182] = v2;
    v3 = type metadata accessor for Peripheral(0);
    v4 = sub_100006204(&qword_1010EC4A0, (uint64_t (*)(uint64_t))&type metadata accessor for Peripheral, (uint64_t)&protocol conformance descriptor for Peripheral);
    v5 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of PeripheralProtocol.cancelConnection()[1]);
    v1[183] = v5;
    *v5 = v1;
    v5[1] = sub_10022AE94;
    return dispatch thunk of PeripheralProtocol.cancelConnection()(v3, v4);
  }
  else
  {
    v7 = type metadata accessor for Characteristic(0);
    v1[91] = v7;
    Identifier.init(stringLiteral:)("6AA50001-6352-4D57-A7B4-003A416FBB0B", 36, 2, v7);
    v8 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of ServiceProtocol.subscript.getter[1]);
    v1[92] = v8;
    *v8 = v1;
    v8[1] = sub_100225D48;
    return dispatch thunk of ServiceProtocol.subscript.getter(v1[54], v1[87], v1[88]);
  }
}

uint64_t sub_100225C94()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v1 = v0[72];
  v2 = v0[68];
  v3 = v0[67];
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v0[182] = v0[90];
  v4 = type metadata accessor for Peripheral(0);
  v5 = sub_100006204(&qword_1010EC4A0, (uint64_t (*)(uint64_t))&type metadata accessor for Peripheral, (uint64_t)&protocol conformance descriptor for Peripheral);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of PeripheralProtocol.cancelConnection()[1]);
  v0[183] = v6;
  *v6 = v0;
  v6[1] = sub_10022AE94;
  return dispatch thunk of PeripheralProtocol.cancelConnection()(v4, v5);
}

uint64_t sub_100225D48(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v10;
  _QWORD *v11;

  v4 = *(_QWORD *)(*(_QWORD *)v2 + 736);
  v5 = *(_QWORD **)v2;
  v5[93] = a1;
  v5[94] = v1;
  swift_task_dealloc(v4);
  v6 = v5[54];
  v7 = v5[42];
  v8 = *(void (**)(uint64_t, uint64_t))(v5[43] + 8);
  if (v1)
  {
    v8(v6, v7);
    return swift_task_switch(sub_100225F18, 0, 0);
  }
  else
  {
    v5[95] = v8;
    v8(v6, v7);
    v10 = sub_100006204(&qword_1010EC4C0, (uint64_t (*)(uint64_t))&type metadata accessor for Characteristic, (uint64_t)&protocol conformance descriptor for Characteristic);
    v5[96] = v10;
    v11 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of CharacteristicProtocol.read()[1]);
    v5[97] = v11;
    *v11 = v5;
    v11[1] = sub_100225E38;
    return dispatch thunk of CharacteristicProtocol.read()(v5[66], v5[91], v10);
  }
}

uint64_t sub_100225E38()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v5;
  uint64_t v6;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 776);
  v3 = *(_QWORD **)v1;
  v3[98] = v0;
  swift_task_dealloc(v2);
  swift_release();
  if (v0)
    return swift_task_switch(sub_100226048, 0, 0);
  v5 = (_QWORD *)swift_task_alloc(async function pointer to AsyncSequence.first()[1]);
  v3[99] = v5;
  v6 = sub_1000193A4((unint64_t *)&unk_101116020, &qword_1010EC638, (const char *)&protocol conformance descriptor for AsyncThrowingStream<A, B>);
  v3[100] = v6;
  *v5 = v3;
  v5[1] = sub_100225FCC;
  return AsyncSequence.first()(v3 + 4, v3[55], v6);
}

uint64_t sub_100225F18()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v1 = v0[72];
  v2 = v0[68];
  v3 = v0[67];
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v0[182] = v0[94];
  v4 = type metadata accessor for Peripheral(0);
  v5 = sub_100006204(&qword_1010EC4A0, (uint64_t (*)(uint64_t))&type metadata accessor for Peripheral, (uint64_t)&protocol conformance descriptor for Peripheral);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of PeripheralProtocol.cancelConnection()[1]);
  v0[183] = v6;
  *v6 = v0;
  v6[1] = sub_10022AE94;
  return dispatch thunk of PeripheralProtocol.cancelConnection()(v4, v5);
}

uint64_t sub_100225FCC()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  void *v7;

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 792);
  *(_QWORD *)(*(_QWORD *)v1 + 808) = v0;
  swift_task_dealloc(v3);
  v4 = v2[66];
  v5 = v2[55];
  v6 = *(void (**)(uint64_t, uint64_t))(v2[56] + 8);
  if (v0)
  {
    v6(v4, v5);
    v7 = sub_100226240;
  }
  else
  {
    v2[102] = v6;
    v6(v4, v5);
    v7 = sub_1002260FC;
  }
  return swift_task_switch(v7, 0, 0);
}

uint64_t sub_100226048()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v1 = v0[72];
  v2 = v0[68];
  v3 = v0[67];
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v0[182] = v0[98];
  v4 = type metadata accessor for Peripheral(0);
  v5 = sub_100006204(&qword_1010EC4A0, (uint64_t (*)(uint64_t))&type metadata accessor for Peripheral, (uint64_t)&protocol conformance descriptor for Peripheral);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of PeripheralProtocol.cancelConnection()[1]);
  v0[183] = v6;
  *v6 = v0;
  v6[1] = sub_10022AE94;
  return dispatch thunk of PeripheralProtocol.cancelConnection()(v4, v5);
}

uint64_t sub_1002260FC(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v9;

  v2 = v1[101];
  v4 = v1[4];
  v3 = v1[5];
  v1[103] = v4;
  v1[104] = v3;
  static Task<>.checkCancellation()(a1);
  if (v2)
  {
    (*(void (**)(_QWORD, _QWORD))(v1[68] + 8))(v1[72], v1[67]);
    sub_10001EF3C(v4, v3);
    swift_release();
    v1[182] = v2;
    v5 = type metadata accessor for Peripheral(0);
    v6 = sub_100006204(&qword_1010EC4A0, (uint64_t (*)(uint64_t))&type metadata accessor for Peripheral, (uint64_t)&protocol conformance descriptor for Peripheral);
    v7 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of PeripheralProtocol.cancelConnection()[1]);
    v1[183] = v7;
    *v7 = v1;
    v7[1] = sub_10022AE94;
    return dispatch thunk of PeripheralProtocol.cancelConnection()(v5, v6);
  }
  else
  {
    Identifier.init(stringLiteral:)("6AA50002-6352-4D57-A7B4-003A416FBB0B", 36, 2, v1[91]);
    v9 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of ServiceProtocol.subscript.getter[1]);
    v1[105] = v9;
    *v9 = v1;
    v9[1] = sub_1002262F4;
    return dispatch thunk of ServiceProtocol.subscript.getter(v1[53], v1[87], v1[88]);
  }
}

uint64_t sub_100226240()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v1 = v0[72];
  v2 = v0[68];
  v3 = v0[67];
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v0[182] = v0[101];
  v4 = type metadata accessor for Peripheral(0);
  v5 = sub_100006204(&qword_1010EC4A0, (uint64_t (*)(uint64_t))&type metadata accessor for Peripheral, (uint64_t)&protocol conformance descriptor for Peripheral);
  v6 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of PeripheralProtocol.cancelConnection()[1]);
  v0[183] = v6;
  *v6 = v0;
  v6[1] = sub_10022AE94;
  return dispatch thunk of PeripheralProtocol.cancelConnection()(v4, v5);
}

uint64_t sub_1002262F4(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v7;

  v4 = *(_QWORD *)(*v2 + 840);
  v5 = *v2;
  *(_QWORD *)(v5 + 848) = a1;
  *(_QWORD *)(v5 + 856) = v1;
  swift_task_dealloc(v4);
  (*(void (**)(_QWORD, _QWORD))(v5 + 760))(*(_QWORD *)(v5 + 424), *(_QWORD *)(v5 + 336));
  if (v1)
    return swift_task_switch(sub_100226478, 0, 0);
  v7 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of CharacteristicProtocol.read()[1]);
  *(_QWORD *)(v5 + 864) = v7;
  *v7 = v5;
  v7[1] = sub_1002263B8;
  return dispatch thunk of CharacteristicProtocol.read()(*(_QWORD *)(v5 + 520), *(_QWORD *)(v5 + 728), *(_QWORD *)(v5 + 768));
}

uint64_t sub_1002263B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v5;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 864);
  v3 = *(_QWORD **)v1;
  v3[109] = v0;
  swift_task_dealloc(v2);
  swift_release();
  if (v0)
    return swift_task_switch(sub_1002265BC, 0, 0);
  v5 = (_QWORD *)swift_task_alloc(async function pointer to AsyncSequence.first()[1]);
  v3[110] = v5;
  *v5 = v3;
  v5[1] = sub_100226548;
  return AsyncSequence.first()(v3 + 6, v3[55], v3[100]);
}

uint64_t sub_100226478()
{
  _QWORD *v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v1 = v0[104];
  v2 = v0[103];
  v3 = v0[72];
  v4 = v0[68];
  v5 = v0[67];
  swift_release();
  sub_10001EF3C(v2, v1);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  v0[182] = v0[107];
  v6 = type metadata accessor for Peripheral(0);
  v7 = sub_100006204(&qword_1010EC4A0, (uint64_t (*)(uint64_t))&type metadata accessor for Peripheral, (uint64_t)&protocol conformance descriptor for Peripheral);
  v8 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of PeripheralProtocol.cancelConnection()[1]);
  v0[183] = v8;
  *v8 = v0;
  v8[1] = sub_10022AE94;
  return dispatch thunk of PeripheralProtocol.cancelConnection()(v6, v7);
}

uint64_t sub_100226548()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 880);
  *(_QWORD *)(*v1 + 888) = v0;
  swift_task_dealloc(v3);
  (*(void (**)(_QWORD, _QWORD))(v2 + 816))(*(_QWORD *)(v2 + 520), *(_QWORD *)(v2 + 440));
  if (v0)
    v4 = sub_1002267F0;
  else
    v4 = sub_10022668C;
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_1002265BC()
{
  _QWORD *v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v1 = v0[104];
  v2 = v0[103];
  v3 = v0[72];
  v4 = v0[68];
  v5 = v0[67];
  swift_release();
  sub_10001EF3C(v2, v1);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  v0[182] = v0[109];
  v6 = type metadata accessor for Peripheral(0);
  v7 = sub_100006204(&qword_1010EC4A0, (uint64_t (*)(uint64_t))&type metadata accessor for Peripheral, (uint64_t)&protocol conformance descriptor for Peripheral);
  v8 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of PeripheralProtocol.cancelConnection()[1]);
  v0[183] = v8;
  *v8 = v0;
  v8[1] = sub_10022AE94;
  return dispatch thunk of PeripheralProtocol.cancelConnection()(v6, v7);
}

uint64_t sub_10022668C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v11;

  v2 = v1[111];
  v4 = v1[6];
  v3 = v1[7];
  v1[112] = v4;
  v1[113] = v3;
  static Task<>.checkCancellation()(a1);
  if (v2)
  {
    v5 = v1[104];
    v6 = v1[103];
    (*(void (**)(_QWORD, _QWORD))(v1[68] + 8))(v1[72], v1[67]);
    sub_10001EF3C(v4, v3);
    sub_10001EF3C(v6, v5);
    swift_release();
    v1[182] = v2;
    v7 = type metadata accessor for Peripheral(0);
    v8 = sub_100006204(&qword_1010EC4A0, (uint64_t (*)(uint64_t))&type metadata accessor for Peripheral, (uint64_t)&protocol conformance descriptor for Peripheral);
    v9 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of PeripheralProtocol.cancelConnection()[1]);
    v1[183] = v9;
    *v9 = v1;
    v9[1] = sub_10022AE94;
    return dispatch thunk of PeripheralProtocol.cancelConnection()(v7, v8);
  }
  else
  {
    Identifier.init(stringLiteral:)("6AA50003-6352-4D57-A7B4-003A416FBB0B", 36, 2, v1[91]);
    v11 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of ServiceProtocol.subscript.getter[1]);
    v1[114] = v11;
    *v11 = v1;
    v11[1] = sub_1002268C0;
    return dispatch thunk of ServiceProtocol.subscript.getter(v1[52], v1[87], v1[88]);
  }
}

uint64_t sub_1002267F0()
{
  _QWORD *v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v1 = v0[104];
  v2 = v0[103];
  v3 = v0[72];
  v4 = v0[68];
  v5 = v0[67];
  swift_release();
  sub_10001EF3C(v2, v1);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  v0[182] = v0[111];
  v6 = type metadata accessor for Peripheral(0);
  v7 = sub_100006204(&qword_1010EC4A0, (uint64_t (*)(uint64_t))&type metadata accessor for Peripheral, (uint64_t)&protocol conformance descriptor for Peripheral);
  v8 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of PeripheralProtocol.cancelConnection()[1]);
  v0[183] = v8;
  *v8 = v0;
  v8[1] = sub_10022AE94;
  return dispatch thunk of PeripheralProtocol.cancelConnection()(v6, v7);
}

uint64_t sub_1002268C0(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v7;

  v4 = *(_QWORD *)(*v2 + 912);
  v5 = *v2;
  *(_QWORD *)(v5 + 920) = a1;
  *(_QWORD *)(v5 + 928) = v1;
  swift_task_dealloc(v4);
  (*(void (**)(_QWORD, _QWORD))(v5 + 760))(*(_QWORD *)(v5 + 416), *(_QWORD *)(v5 + 336));
  if (v1)
    return swift_task_switch(sub_100226A44, 0, 0);
  v7 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of CharacteristicProtocol.read()[1]);
  *(_QWORD *)(v5 + 936) = v7;
  *v7 = v5;
  v7[1] = sub_100226984;
  return dispatch thunk of CharacteristicProtocol.read()(*(_QWORD *)(v5 + 512), *(_QWORD *)(v5 + 728), *(_QWORD *)(v5 + 768));
}

uint64_t sub_100226984()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v5;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 936);
  v3 = *(_QWORD **)v1;
  v3[118] = v0;
  swift_task_dealloc(v2);
  swift_release();
  if (v0)
    return swift_task_switch(sub_100226BA4, 0, 0);
  v5 = (_QWORD *)swift_task_alloc(async function pointer to AsyncSequence.first()[1]);
  v3[119] = v5;
  *v5 = v3;
  v5[1] = sub_100226B30;
  return AsyncSequence.first()(v3 + 8, v3[55], v3[100]);
}

uint64_t sub_100226A44()
{
  _QWORD *v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v1 = v0[113];
  v2 = v0[112];
  v3 = v0[104];
  v4 = v0[103];
  v5 = v0[72];
  v6 = v0[68];
  v7 = v0[67];
  swift_release();
  sub_10001EF3C(v4, v3);
  sub_10001EF3C(v2, v1);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  v0[182] = v0[116];
  v8 = type metadata accessor for Peripheral(0);
  v9 = sub_100006204(&qword_1010EC4A0, (uint64_t (*)(uint64_t))&type metadata accessor for Peripheral, (uint64_t)&protocol conformance descriptor for Peripheral);
  v10 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of PeripheralProtocol.cancelConnection()[1]);
  v0[183] = v10;
  *v10 = v0;
  v10[1] = sub_10022AE94;
  return dispatch thunk of PeripheralProtocol.cancelConnection()(v8, v9);
}

uint64_t sub_100226B30()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 952);
  *(_QWORD *)(*v1 + 960) = v0;
  swift_task_dealloc(v3);
  (*(void (**)(_QWORD, _QWORD))(v2 + 816))(*(_QWORD *)(v2 + 512), *(_QWORD *)(v2 + 440));
  if (v0)
    v4 = sub_100226E14;
  else
    v4 = sub_100226C90;
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_100226BA4()
{
  _QWORD *v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v1 = v0[113];
  v2 = v0[112];
  v3 = v0[104];
  v4 = v0[103];
  v5 = v0[72];
  v6 = v0[68];
  v7 = v0[67];
  swift_release();
  sub_10001EF3C(v4, v3);
  sub_10001EF3C(v2, v1);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  v0[182] = v0[118];
  v8 = type metadata accessor for Peripheral(0);
  v9 = sub_100006204(&qword_1010EC4A0, (uint64_t (*)(uint64_t))&type metadata accessor for Peripheral, (uint64_t)&protocol conformance descriptor for Peripheral);
  v10 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of PeripheralProtocol.cancelConnection()[1]);
  v0[183] = v10;
  *v10 = v0;
  v10[1] = sub_10022AE94;
  return dispatch thunk of PeripheralProtocol.cancelConnection()(v8, v9);
}

uint64_t sub_100226C90(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v13;

  v2 = v1[120];
  v4 = v1[8];
  v3 = v1[9];
  v1[121] = v4;
  v1[122] = v3;
  static Task<>.checkCancellation()(a1);
  if (v2)
  {
    v5 = v1[113];
    v6 = v1[112];
    v7 = v1[104];
    v8 = v1[103];
    (*(void (**)(_QWORD, _QWORD))(v1[68] + 8))(v1[72], v1[67]);
    sub_10001EF3C(v4, v3);
    sub_10001EF3C(v6, v5);
    sub_10001EF3C(v8, v7);
    swift_release();
    v1[182] = v2;
    v9 = type metadata accessor for Peripheral(0);
    v10 = sub_100006204(&qword_1010EC4A0, (uint64_t (*)(uint64_t))&type metadata accessor for Peripheral, (uint64_t)&protocol conformance descriptor for Peripheral);
    v11 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of PeripheralProtocol.cancelConnection()[1]);
    v1[183] = v11;
    *v11 = v1;
    v11[1] = sub_10022AE94;
    return dispatch thunk of PeripheralProtocol.cancelConnection()(v9, v10);
  }
  else
  {
    Identifier.init(stringLiteral:)("6AA50004-6352-4D57-A7B4-003A416FBB0B", 36, 2, v1[91]);
    v13 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of ServiceProtocol.subscript.getter[1]);
    v1[123] = v13;
    *v13 = v1;
    v13[1] = sub_100226F00;
    return dispatch thunk of ServiceProtocol.subscript.getter(v1[51], v1[87], v1[88]);
  }
}

uint64_t sub_100226E14()
{
  _QWORD *v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v1 = v0[113];
  v2 = v0[112];
  v3 = v0[104];
  v4 = v0[103];
  v5 = v0[72];
  v6 = v0[68];
  v7 = v0[67];
  swift_release();
  sub_10001EF3C(v4, v3);
  sub_10001EF3C(v2, v1);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  v0[182] = v0[120];
  v8 = type metadata accessor for Peripheral(0);
  v9 = sub_100006204(&qword_1010EC4A0, (uint64_t (*)(uint64_t))&type metadata accessor for Peripheral, (uint64_t)&protocol conformance descriptor for Peripheral);
  v10 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of PeripheralProtocol.cancelConnection()[1]);
  v0[183] = v10;
  *v10 = v0;
  v10[1] = sub_10022AE94;
  return dispatch thunk of PeripheralProtocol.cancelConnection()(v8, v9);
}

uint64_t sub_100226F00(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v7;

  v4 = *(_QWORD *)(*v2 + 984);
  v5 = *v2;
  *(_QWORD *)(v5 + 992) = a1;
  *(_QWORD *)(v5 + 1000) = v1;
  swift_task_dealloc(v4);
  (*(void (**)(_QWORD, _QWORD))(v5 + 760))(*(_QWORD *)(v5 + 408), *(_QWORD *)(v5 + 336));
  if (v1)
    return swift_task_switch(sub_10022707C, 0, 0);
  v7 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of CharacteristicProtocol.read()[1]);
  *(_QWORD *)(v5 + 1008) = v7;
  *v7 = v5;
  v7[1] = sub_100226FC4;
  return dispatch thunk of CharacteristicProtocol.read()(*(_QWORD *)(v5 + 504), *(_QWORD *)(v5 + 728), *(_QWORD *)(v5 + 768));
}

uint64_t sub_100226FC4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v5;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 1008);
  v3 = *(_QWORD **)v1;
  v3[127] = v0;
  swift_task_dealloc(v2);
  if (v0)
    return swift_task_switch(sub_1002273FC, 0, 0);
  swift_release();
  v5 = (_QWORD *)swift_task_alloc(async function pointer to AsyncSequence.first()[1]);
  v3[128] = v5;
  *v5 = v3;
  v5[1] = sub_100227388;
  return AsyncSequence.first()(v3 + 10, v3[55], v3[100]);
}

uint64_t sub_10022707C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;

  v1 = *(_QWORD *)(v0 + 1000);
  *(_QWORD *)(v0 + 184) = v1;
  v2 = *(_QWORD *)(v0 + 232);
  v3 = *(_QWORD *)(v0 + 216);
  swift_errorRetain(v1);
  v4 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
  if ((swift_dynamicCast(v2, v0 + 184, v4, v3, 0) & 1) != 0)
  {
    if ((*(unsigned int (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 224) + 88))(*(_QWORD *)(v0 + 232), *(_QWORD *)(v0 + 216)) == enum case for CentralManager.Error.missingCharacteristic(_:))
    {
      swift_errorRelease(v1);
      v5 = swift_errorRelease(*(_QWORD *)(v0 + 184));
      *(_OWORD *)(v0 + 1040) = xmmword_100E22B20;
      static Task<>.checkCancellation()(v5);
      Identifier.init(stringLiteral:)("6AA50005-6352-4D57-A7B4-003A416FBB0B", 36, 2, *(_QWORD *)(v0 + 728));
      v25 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of ServiceProtocol.subscript.getter[1]);
      *(_QWORD *)(v0 + 1056) = v25;
      *v25 = v0;
      v25[1] = sub_100227BC0;
      return dispatch thunk of ServiceProtocol.subscript.getter(*(_QWORD *)(v0 + 400), *(_QWORD *)(v0 + 696), *(_QWORD *)(v0 + 704));
    }
    v14 = *(_QWORD *)(v0 + 968);
    v15 = *(_QWORD *)(v0 + 904);
    v16 = *(_QWORD *)(v0 + 896);
    v17 = *(_QWORD *)(v0 + 832);
    v18 = *(_QWORD *)(v0 + 824);
    v19 = *(_QWORD *)(v0 + 576);
    v20 = *(_QWORD *)(v0 + 544);
    v21 = *(_QWORD *)(v0 + 536);
    v29 = *(_QWORD *)(v0 + 976);
    v31 = *(_QWORD *)(v0 + 232);
    v27 = *(_QWORD *)(v0 + 224);
    v28 = *(_QWORD *)(v0 + 216);
    swift_release();
    sub_10001EF3C(v18, v17);
    sub_10001EF3C(v16, v15);
    sub_10001EF3C(v14, v29);
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v19, v21);
    (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v31, v28);
  }
  else
  {
    v30 = *(_QWORD *)(v0 + 976);
    v6 = *(_QWORD *)(v0 + 968);
    v7 = *(_QWORD *)(v0 + 904);
    v8 = *(_QWORD *)(v0 + 896);
    v9 = *(_QWORD *)(v0 + 832);
    v10 = *(_QWORD *)(v0 + 824);
    v11 = *(_QWORD *)(v0 + 576);
    v12 = *(_QWORD *)(v0 + 544);
    v13 = *(_QWORD *)(v0 + 536);
    swift_release();
    sub_10001EF3C(v10, v9);
    sub_10001EF3C(v8, v7);
    sub_10001EF3C(v6, v30);
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v13);
  }
  swift_errorRelease(*(_QWORD *)(v0 + 184));
  *(_QWORD *)(v0 + 1456) = v1;
  v22 = type metadata accessor for Peripheral(0);
  v23 = sub_100006204(&qword_1010EC4A0, (uint64_t (*)(uint64_t))&type metadata accessor for Peripheral, (uint64_t)&protocol conformance descriptor for Peripheral);
  v24 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of PeripheralProtocol.cancelConnection()[1]);
  *(_QWORD *)(v0 + 1464) = v24;
  *v24 = v0;
  v24[1] = sub_10022AE94;
  return dispatch thunk of PeripheralProtocol.cancelConnection()(v22, v23);
}

uint64_t sub_100227388()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 1024);
  *(_QWORD *)(*v1 + 1032) = v0;
  swift_task_dealloc(v3);
  (*(void (**)(_QWORD, _QWORD))(v2 + 816))(*(_QWORD *)(v2 + 504), *(_QWORD *)(v2 + 440));
  if (v0)
    v4 = sub_1002278B4;
  else
    v4 = sub_100227710;
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_1002273FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;

  swift_release();
  v1 = *(_QWORD *)(v0 + 1016);
  *(_QWORD *)(v0 + 184) = v1;
  v2 = *(_QWORD *)(v0 + 232);
  v3 = *(_QWORD *)(v0 + 216);
  swift_errorRetain(v1);
  v4 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
  if ((swift_dynamicCast(v2, v0 + 184, v4, v3, 0) & 1) != 0)
  {
    if ((*(unsigned int (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 224) + 88))(*(_QWORD *)(v0 + 232), *(_QWORD *)(v0 + 216)) == enum case for CentralManager.Error.missingCharacteristic(_:))
    {
      swift_errorRelease(v1);
      v5 = swift_errorRelease(*(_QWORD *)(v0 + 184));
      *(_OWORD *)(v0 + 1040) = xmmword_100E22B20;
      static Task<>.checkCancellation()(v5);
      Identifier.init(stringLiteral:)("6AA50005-6352-4D57-A7B4-003A416FBB0B", 36, 2, *(_QWORD *)(v0 + 728));
      v25 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of ServiceProtocol.subscript.getter[1]);
      *(_QWORD *)(v0 + 1056) = v25;
      *v25 = v0;
      v25[1] = sub_100227BC0;
      return dispatch thunk of ServiceProtocol.subscript.getter(*(_QWORD *)(v0 + 400), *(_QWORD *)(v0 + 696), *(_QWORD *)(v0 + 704));
    }
    v14 = *(_QWORD *)(v0 + 968);
    v15 = *(_QWORD *)(v0 + 904);
    v16 = *(_QWORD *)(v0 + 896);
    v17 = *(_QWORD *)(v0 + 832);
    v18 = *(_QWORD *)(v0 + 824);
    v19 = *(_QWORD *)(v0 + 576);
    v20 = *(_QWORD *)(v0 + 544);
    v21 = *(_QWORD *)(v0 + 536);
    v29 = *(_QWORD *)(v0 + 976);
    v31 = *(_QWORD *)(v0 + 232);
    v27 = *(_QWORD *)(v0 + 224);
    v28 = *(_QWORD *)(v0 + 216);
    swift_release();
    sub_10001EF3C(v18, v17);
    sub_10001EF3C(v16, v15);
    sub_10001EF3C(v14, v29);
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v19, v21);
    (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v31, v28);
  }
  else
  {
    v30 = *(_QWORD *)(v0 + 976);
    v6 = *(_QWORD *)(v0 + 968);
    v7 = *(_QWORD *)(v0 + 904);
    v8 = *(_QWORD *)(v0 + 896);
    v9 = *(_QWORD *)(v0 + 832);
    v10 = *(_QWORD *)(v0 + 824);
    v11 = *(_QWORD *)(v0 + 576);
    v12 = *(_QWORD *)(v0 + 544);
    v13 = *(_QWORD *)(v0 + 536);
    swift_release();
    sub_10001EF3C(v10, v9);
    sub_10001EF3C(v8, v7);
    sub_10001EF3C(v6, v30);
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v13);
  }
  swift_errorRelease(*(_QWORD *)(v0 + 184));
  *(_QWORD *)(v0 + 1456) = v1;
  v22 = type metadata accessor for Peripheral(0);
  v23 = sub_100006204(&qword_1010EC4A0, (uint64_t (*)(uint64_t))&type metadata accessor for Peripheral, (uint64_t)&protocol conformance descriptor for Peripheral);
  v24 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of PeripheralProtocol.cancelConnection()[1]);
  *(_QWORD *)(v0 + 1464) = v24;
  *v24 = v0;
  v24[1] = sub_10022AE94;
  return dispatch thunk of PeripheralProtocol.cancelConnection()(v22, v23);
}

uint64_t sub_100227710()
{
  _QWORD *v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v2 = v0[10];
  v1 = v0[11];
  v3 = v0[129];
  v0[131] = v1;
  v0[130] = v2;
  static Task<>.checkCancellation()();
  if (v3)
  {
    v4 = v0[122];
    v5 = v0[121];
    v6 = v0[113];
    v7 = v0[112];
    v8 = v0[104];
    v9 = v0[103];
    v15 = v0[68];
    v16 = v0[67];
    v17 = v0[72];
    swift_release();
    sub_10001EF3C(v9, v8);
    sub_10001EF3C(v7, v6);
    sub_10001EF3C(v5, v4);
    sub_10001EF3C(v2, v1);
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v17, v16);
    v0[182] = v3;
    v10 = type metadata accessor for Peripheral(0);
    v11 = sub_100006204(&qword_1010EC4A0, (uint64_t (*)(uint64_t))&type metadata accessor for Peripheral, (uint64_t)&protocol conformance descriptor for Peripheral);
    v12 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of PeripheralProtocol.cancelConnection()[1]);
    v0[183] = v12;
    *v12 = v0;
    v12[1] = sub_10022AE94;
    return dispatch thunk of PeripheralProtocol.cancelConnection()(v10, v11);
  }
  else
  {
    Identifier.init(stringLiteral:)("6AA50005-6352-4D57-A7B4-003A416FBB0B", 36, 2, v0[91]);
    v14 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of ServiceProtocol.subscript.getter[1]);
    v0[132] = v14;
    *v14 = v0;
    v14[1] = sub_100227BC0;
    return dispatch thunk of ServiceProtocol.subscript.getter(v0[50], v0[87], v0[88]);
  }
}

uint64_t sub_1002278B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;

  v1 = *(_QWORD *)(v0 + 1032);
  *(_QWORD *)(v0 + 184) = v1;
  v2 = *(_QWORD *)(v0 + 232);
  v3 = *(_QWORD *)(v0 + 216);
  swift_errorRetain(v1);
  v4 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
  if ((swift_dynamicCast(v2, v0 + 184, v4, v3, 0) & 1) != 0)
  {
    if ((*(unsigned int (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 224) + 88))(*(_QWORD *)(v0 + 232), *(_QWORD *)(v0 + 216)) == enum case for CentralManager.Error.missingCharacteristic(_:))
    {
      swift_errorRelease(v1);
      v5 = swift_errorRelease(*(_QWORD *)(v0 + 184));
      *(_OWORD *)(v0 + 1040) = xmmword_100E22B20;
      static Task<>.checkCancellation()(v5);
      Identifier.init(stringLiteral:)("6AA50005-6352-4D57-A7B4-003A416FBB0B", 36, 2, *(_QWORD *)(v0 + 728));
      v25 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of ServiceProtocol.subscript.getter[1]);
      *(_QWORD *)(v0 + 1056) = v25;
      *v25 = v0;
      v25[1] = sub_100227BC0;
      return dispatch thunk of ServiceProtocol.subscript.getter(*(_QWORD *)(v0 + 400), *(_QWORD *)(v0 + 696), *(_QWORD *)(v0 + 704));
    }
    v14 = *(_QWORD *)(v0 + 968);
    v15 = *(_QWORD *)(v0 + 904);
    v16 = *(_QWORD *)(v0 + 896);
    v17 = *(_QWORD *)(v0 + 832);
    v18 = *(_QWORD *)(v0 + 824);
    v19 = *(_QWORD *)(v0 + 576);
    v20 = *(_QWORD *)(v0 + 544);
    v21 = *(_QWORD *)(v0 + 536);
    v29 = *(_QWORD *)(v0 + 976);
    v31 = *(_QWORD *)(v0 + 232);
    v27 = *(_QWORD *)(v0 + 224);
    v28 = *(_QWORD *)(v0 + 216);
    swift_release();
    sub_10001EF3C(v18, v17);
    sub_10001EF3C(v16, v15);
    sub_10001EF3C(v14, v29);
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v19, v21);
    (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v31, v28);
  }
  else
  {
    v30 = *(_QWORD *)(v0 + 976);
    v6 = *(_QWORD *)(v0 + 968);
    v7 = *(_QWORD *)(v0 + 904);
    v8 = *(_QWORD *)(v0 + 896);
    v9 = *(_QWORD *)(v0 + 832);
    v10 = *(_QWORD *)(v0 + 824);
    v11 = *(_QWORD *)(v0 + 576);
    v12 = *(_QWORD *)(v0 + 544);
    v13 = *(_QWORD *)(v0 + 536);
    swift_release();
    sub_10001EF3C(v10, v9);
    sub_10001EF3C(v8, v7);
    sub_10001EF3C(v6, v30);
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v13);
  }
  swift_errorRelease(*(_QWORD *)(v0 + 184));
  *(_QWORD *)(v0 + 1456) = v1;
  v22 = type metadata accessor for Peripheral(0);
  v23 = sub_100006204(&qword_1010EC4A0, (uint64_t (*)(uint64_t))&type metadata accessor for Peripheral, (uint64_t)&protocol conformance descriptor for Peripheral);
  v24 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of PeripheralProtocol.cancelConnection()[1]);
  *(_QWORD *)(v0 + 1464) = v24;
  *v24 = v0;
  v24[1] = sub_10022AE94;
  return dispatch thunk of PeripheralProtocol.cancelConnection()(v22, v23);
}

uint64_t sub_100227BC0(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v7;

  v4 = *(_QWORD *)(*v2 + 1056);
  v5 = *v2;
  *(_QWORD *)(v5 + 1064) = a1;
  *(_QWORD *)(v5 + 1072) = v1;
  swift_task_dealloc(v4);
  (*(void (**)(_QWORD, _QWORD))(v5 + 760))(*(_QWORD *)(v5 + 400), *(_QWORD *)(v5 + 336));
  if (v1)
    return swift_task_switch(sub_100227D44, 0, 0);
  v7 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of CharacteristicProtocol.read()[1]);
  *(_QWORD *)(v5 + 1080) = v7;
  *v7 = v5;
  v7[1] = sub_100227C84;
  return dispatch thunk of CharacteristicProtocol.read()(*(_QWORD *)(v5 + 496), *(_QWORD *)(v5 + 728), *(_QWORD *)(v5 + 768));
}

uint64_t sub_100227C84()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v5;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 1080);
  v3 = *(_QWORD **)v1;
  v3[136] = v0;
  swift_task_dealloc(v2);
  swift_release();
  if (v0)
    return swift_task_switch(sub_100227ED4, 0, 0);
  v5 = (_QWORD *)swift_task_alloc(async function pointer to AsyncSequence.first()[1]);
  v3[137] = v5;
  *v5 = v3;
  v5[1] = sub_100227E60;
  return AsyncSequence.first()(v3 + 2, v3[55], v3[100]);
}

uint64_t sub_100227D44()
{
  _QWORD *v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v14;
  unint64_t v15;

  v14 = v0[130];
  v15 = v0[131];
  v1 = v0[122];
  v2 = v0[121];
  v3 = v0[113];
  v4 = v0[112];
  v5 = v0[104];
  v6 = v0[103];
  v7 = v0[72];
  v8 = v0[68];
  v9 = v0[67];
  swift_release();
  sub_10001EF3C(v6, v5);
  sub_10001EF3C(v4, v3);
  sub_10001EF3C(v2, v1);
  sub_10001EF3C(v14, v15);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
  v0[182] = v0[134];
  v10 = type metadata accessor for Peripheral(0);
  v11 = sub_100006204(&qword_1010EC4A0, (uint64_t (*)(uint64_t))&type metadata accessor for Peripheral, (uint64_t)&protocol conformance descriptor for Peripheral);
  v12 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of PeripheralProtocol.cancelConnection()[1]);
  v0[183] = v12;
  *v12 = v0;
  v12[1] = sub_10022AE94;
  return dispatch thunk of PeripheralProtocol.cancelConnection()(v10, v11);
}

uint64_t sub_100227E60()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 1096);
  *(_QWORD *)(*v1 + 1104) = v0;
  swift_task_dealloc(v3);
  (*(void (**)(_QWORD, _QWORD))(v2 + 816))(*(_QWORD *)(v2 + 496), *(_QWORD *)(v2 + 440));
  if (v0)
    v4 = sub_1002281A8;
  else
    v4 = sub_100227FF0;
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_100227ED4()
{
  _QWORD *v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v14;
  unint64_t v15;

  v14 = v0[130];
  v15 = v0[131];
  v1 = v0[122];
  v2 = v0[121];
  v3 = v0[113];
  v4 = v0[112];
  v5 = v0[104];
  v6 = v0[103];
  v7 = v0[72];
  v8 = v0[68];
  v9 = v0[67];
  swift_release();
  sub_10001EF3C(v6, v5);
  sub_10001EF3C(v4, v3);
  sub_10001EF3C(v2, v1);
  sub_10001EF3C(v14, v15);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
  v0[182] = v0[136];
  v10 = type metadata accessor for Peripheral(0);
  v11 = sub_100006204(&qword_1010EC4A0, (uint64_t (*)(uint64_t))&type metadata accessor for Peripheral, (uint64_t)&protocol conformance descriptor for Peripheral);
  v12 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of PeripheralProtocol.cancelConnection()[1]);
  v0[183] = v12;
  *v12 = v0;
  v12[1] = sub_10022AE94;
  return dispatch thunk of PeripheralProtocol.cancelConnection()(v10, v11);
}

uint64_t sub_100227FF0()
{
  _QWORD *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;

  v1 = v0[138];
  v3 = v0[2];
  v2 = v0[3];
  v0[139] = v3;
  v0[140] = v2;
  static Task<>.checkCancellation()();
  if (v1)
  {
    v18 = v0[130];
    v19 = v0[131];
    v4 = v0[122];
    v5 = v0[121];
    v6 = v0[113];
    v7 = v0[112];
    v8 = v0[104];
    v9 = v0[103];
    v15 = v0[68];
    v16 = v0[67];
    v17 = v0[72];
    swift_release();
    sub_10001EF3C(v9, v8);
    sub_10001EF3C(v7, v6);
    sub_10001EF3C(v5, v4);
    sub_10001EF3C(v3, v2);
    sub_10001EF3C(v18, v19);
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v17, v16);
    v0[182] = v1;
    v10 = type metadata accessor for Peripheral(0);
    v11 = sub_100006204(&qword_1010EC4A0, (uint64_t (*)(uint64_t))&type metadata accessor for Peripheral, (uint64_t)&protocol conformance descriptor for Peripheral);
    v12 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of PeripheralProtocol.cancelConnection()[1]);
    v0[183] = v12;
    *v12 = v0;
    v12[1] = sub_10022AE94;
    return dispatch thunk of PeripheralProtocol.cancelConnection()(v10, v11);
  }
  else
  {
    Identifier.init(stringLiteral:)("6AA50006-6352-4D57-A7B4-003A416FBB0B", 36, 2, v0[91]);
    v14 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of ServiceProtocol.subscript.getter[1]);
    v0[141] = v14;
    *v14 = v0;
    v14[1] = sub_1002282C4;
    return dispatch thunk of ServiceProtocol.subscript.getter(v0[49], v0[87], v0[88]);
  }
}

uint64_t sub_1002281A8()
{
  _QWORD *v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v14;
  unint64_t v15;

  v14 = v0[130];
  v15 = v0[131];
  v1 = v0[122];
  v2 = v0[121];
  v3 = v0[113];
  v4 = v0[112];
  v5 = v0[104];
  v6 = v0[103];
  v7 = v0[72];
  v8 = v0[68];
  v9 = v0[67];
  swift_release();
  sub_10001EF3C(v6, v5);
  sub_10001EF3C(v4, v3);
  sub_10001EF3C(v2, v1);
  sub_10001EF3C(v14, v15);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
  v0[182] = v0[138];
  v10 = type metadata accessor for Peripheral(0);
  v11 = sub_100006204(&qword_1010EC4A0, (uint64_t (*)(uint64_t))&type metadata accessor for Peripheral, (uint64_t)&protocol conformance descriptor for Peripheral);
  v12 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of PeripheralProtocol.cancelConnection()[1]);
  v0[183] = v12;
  *v12 = v0;
  v12[1] = sub_10022AE94;
  return dispatch thunk of PeripheralProtocol.cancelConnection()(v10, v11);
}

uint64_t sub_1002282C4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  _QWORD *v10;

  v4 = *(_QWORD *)(*(_QWORD *)v2 + 1128);
  v5 = *(_QWORD **)v2;
  v5[142] = a1;
  swift_task_dealloc(v4);
  v6 = (void (*)(uint64_t, uint64_t))v5[95];
  v7 = v5[49];
  v8 = v5[42];
  if (v1)
  {
    swift_errorRelease(v1);
    v6(v7, v8);
    return swift_task_switch(sub_100228470, 0, 0);
  }
  else
  {
    v6(v5[49], v5[42]);
    v10 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of CharacteristicProtocol.read()[1]);
    v5[143] = v10;
    *v10 = v5;
    v10[1] = sub_1002283AC;
    return dispatch thunk of CharacteristicProtocol.read()(v5[61], v5[91], v5[96]);
  }
}

uint64_t sub_1002283AC()
{
  uint64_t v0;
  uint64_t *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v6;

  v2 = (_QWORD *)*v1;
  v3 = *(_QWORD *)(*v1 + 1144);
  v4 = *v1;
  swift_task_dealloc(v3);
  swift_release();
  if (v0)
  {
    swift_errorRelease(v0);
    return swift_task_switch(sub_100245490, 0, 0);
  }
  else
  {
    v6 = (_QWORD *)swift_task_alloc(async function pointer to AsyncSequence.first()[1]);
    v2[144] = v6;
    *v6 = v4;
    v6[1] = sub_10022863C;
    return AsyncSequence.first()(v2 + 16, v2[55], v2[100]);
  }
}

uint64_t sub_100228470()
{
  uint64_t v0;
  _QWORD *v1;

  *(_OWORD *)(v0 + 1168) = xmmword_100E22B20;
  static Task<>.checkCancellation()();
  Identifier.init(stringLiteral:)("6AA50007-6352-4D57-A7B4-003A416FBB0B", 36, 2, *(_QWORD *)(v0 + 728));
  v1 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of ServiceProtocol.subscript.getter[1]);
  *(_QWORD *)(v0 + 1184) = v1;
  *v1 = v0;
  v1[1] = sub_1002288A0;
  return dispatch thunk of ServiceProtocol.subscript.getter(*(_QWORD *)(v0 + 384), *(_QWORD *)(v0 + 696), *(_QWORD *)(v0 + 704));
}

uint64_t sub_10022863C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)();

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 1152);
  *(_QWORD *)(*(_QWORD *)v1 + 1160) = v0;
  swift_task_dealloc(v3);
  v4 = (void (*)(uint64_t, uint64_t))v2[102];
  v5 = v2[61];
  v6 = v2[55];
  if (v0)
  {
    swift_errorRelease(v0);
    v4(v5, v6);
    v7 = sub_100245490;
  }
  else
  {
    v4(v5, v6);
    v7 = sub_1002286D4;
  }
  return swift_task_switch(v7, 0, 0);
}

uint64_t sub_1002286D4()
{
  _QWORD *v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;

  v2 = v0[16];
  v1 = v0[17];
  v3 = v0[145];
  v0[147] = v1;
  v0[146] = v2;
  static Task<>.checkCancellation()();
  if (v3)
  {
    v15 = v0[139];
    v16 = v0[140];
    v20 = v0[130];
    v21 = v0[131];
    v4 = v0[122];
    v5 = v0[121];
    v6 = v0[113];
    v7 = v0[112];
    v8 = v0[104];
    v9 = v0[103];
    v17 = v0[68];
    v18 = v0[67];
    v19 = v0[72];
    swift_release();
    sub_10001EF3C(v9, v8);
    sub_10001EF3C(v7, v6);
    sub_10001EF3C(v5, v4);
    sub_10001EF3C(v15, v16);
    sub_10001EF3C(v2, v1);
    sub_10001EF3C(v20, v21);
    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v19, v18);
    v0[182] = v3;
    v10 = type metadata accessor for Peripheral(0);
    v11 = sub_100006204(&qword_1010EC4A0, (uint64_t (*)(uint64_t))&type metadata accessor for Peripheral, (uint64_t)&protocol conformance descriptor for Peripheral);
    v12 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of PeripheralProtocol.cancelConnection()[1]);
    v0[183] = v12;
    *v12 = v0;
    v12[1] = sub_10022AE94;
    return dispatch thunk of PeripheralProtocol.cancelConnection()(v10, v11);
  }
  else
  {
    Identifier.init(stringLiteral:)("6AA50007-6352-4D57-A7B4-003A416FBB0B", 36, 2, v0[91]);
    v14 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of ServiceProtocol.subscript.getter[1]);
    v0[148] = v14;
    *v14 = v0;
    v14[1] = sub_1002288A0;
    return dispatch thunk of ServiceProtocol.subscript.getter(v0[48], v0[87], v0[88]);
  }
}

uint64_t sub_1002288A0(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v7;

  v4 = *(_QWORD *)(*v2 + 1184);
  v5 = *v2;
  *(_QWORD *)(v5 + 1192) = a1;
  *(_QWORD *)(v5 + 1200) = v1;
  swift_task_dealloc(v4);
  (*(void (**)(_QWORD, _QWORD))(v5 + 760))(*(_QWORD *)(v5 + 384), *(_QWORD *)(v5 + 336));
  if (v1)
    return swift_task_switch(sub_100228A24, 0, 0);
  v7 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of CharacteristicProtocol.read()[1]);
  *(_QWORD *)(v5 + 1208) = v7;
  *v7 = v5;
  v7[1] = sub_100228964;
  return dispatch thunk of CharacteristicProtocol.read()(*(_QWORD *)(v5 + 480), *(_QWORD *)(v5 + 728), *(_QWORD *)(v5 + 768));
}

uint64_t sub_100228964()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v5;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 1208);
  v3 = *(_QWORD **)v1;
  v3[152] = v0;
  swift_task_dealloc(v2);
  swift_release();
  if (v0)
    return swift_task_switch(sub_100228BE4, 0, 0);
  v5 = (_QWORD *)swift_task_alloc(async function pointer to AsyncSequence.first()[1]);
  v3[153] = v5;
  *v5 = v3;
  v5[1] = sub_100228B70;
  return AsyncSequence.first()(v3 + 18, v3[55], v3[100]);
}

uint64_t sub_100228A24()
{
  _QWORD *v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;

  v1 = v0[140];
  v2 = v0[139];
  v18 = v0[147];
  v19 = v0[131];
  v16 = v0[146];
  v17 = v0[130];
  v3 = v0[122];
  v4 = v0[121];
  v5 = v0[113];
  v6 = v0[112];
  v7 = v0[104];
  v8 = v0[103];
  v9 = v0[68];
  v14 = v0[67];
  v15 = v0[72];
  swift_release();
  sub_10001EF3C(v8, v7);
  sub_10001EF3C(v6, v5);
  sub_10001EF3C(v4, v3);
  sub_10001EF3C(v2, v1);
  sub_10001EF3C(v16, v18);
  sub_10001EF3C(v17, v19);
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v15, v14);
  v0[182] = v0[150];
  v10 = type metadata accessor for Peripheral(0);
  v11 = sub_100006204(&qword_1010EC4A0, (uint64_t (*)(uint64_t))&type metadata accessor for Peripheral, (uint64_t)&protocol conformance descriptor for Peripheral);
  v12 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of PeripheralProtocol.cancelConnection()[1]);
  v0[183] = v12;
  *v12 = v0;
  v12[1] = sub_10022AE94;
  return dispatch thunk of PeripheralProtocol.cancelConnection()(v10, v11);
}

uint64_t sub_100228B70()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 1224);
  *(_QWORD *)(*v1 + 1232) = v0;
  swift_task_dealloc(v3);
  (*(void (**)(_QWORD, _QWORD))(v2 + 816))(*(_QWORD *)(v2 + 480), *(_QWORD *)(v2 + 440));
  if (v0)
    v4 = sub_100228F18;
  else
    v4 = sub_100228D30;
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_100228BE4()
{
  _QWORD *v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;

  v1 = v0[140];
  v2 = v0[139];
  v18 = v0[147];
  v19 = v0[131];
  v16 = v0[146];
  v17 = v0[130];
  v3 = v0[122];
  v4 = v0[121];
  v5 = v0[113];
  v6 = v0[112];
  v7 = v0[104];
  v8 = v0[103];
  v9 = v0[68];
  v14 = v0[67];
  v15 = v0[72];
  swift_release();
  sub_10001EF3C(v8, v7);
  sub_10001EF3C(v6, v5);
  sub_10001EF3C(v4, v3);
  sub_10001EF3C(v2, v1);
  sub_10001EF3C(v16, v18);
  sub_10001EF3C(v17, v19);
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v15, v14);
  v0[182] = v0[152];
  v10 = type metadata accessor for Peripheral(0);
  v11 = sub_100006204(&qword_1010EC4A0, (uint64_t (*)(uint64_t))&type metadata accessor for Peripheral, (uint64_t)&protocol conformance descriptor for Peripheral);
  v12 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of PeripheralProtocol.cancelConnection()[1]);
  v0[183] = v12;
  *v12 = v0;
  v12[1] = sub_10022AE94;
  return dispatch thunk of PeripheralProtocol.cancelConnection()(v10, v11);
}

uint64_t sub_100228D30()
{
  _QWORD *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;

  v1 = v0[154];
  v3 = v0[18];
  v2 = v0[19];
  v0[155] = v3;
  v0[156] = v2;
  static Task<>.checkCancellation()();
  if (v1)
  {
    v19 = v0[147];
    v16 = v0[140];
    v17 = v0[146];
    v15 = v0[139];
    v22 = v0[130];
    v23 = v0[131];
    v4 = v0[122];
    v5 = v0[121];
    v6 = v0[113];
    v7 = v0[112];
    v8 = v0[104];
    v9 = v0[103];
    v18 = v0[68];
    v20 = v0[67];
    v21 = v0[72];
    swift_release();
    sub_10001EF3C(v9, v8);
    sub_10001EF3C(v7, v6);
    sub_10001EF3C(v5, v4);
    sub_10001EF3C(v15, v16);
    sub_10001EF3C(v17, v19);
    sub_10001EF3C(v3, v2);
    sub_10001EF3C(v22, v23);
    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v21, v20);
    v0[182] = v1;
    v10 = type metadata accessor for Peripheral(0);
    v11 = sub_100006204(&qword_1010EC4A0, (uint64_t (*)(uint64_t))&type metadata accessor for Peripheral, (uint64_t)&protocol conformance descriptor for Peripheral);
    v12 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of PeripheralProtocol.cancelConnection()[1]);
    v0[183] = v12;
    *v12 = v0;
    v12[1] = sub_10022AE94;
    return dispatch thunk of PeripheralProtocol.cancelConnection()(v10, v11);
  }
  else
  {
    Identifier.init(stringLiteral:)("6AA50008-6352-4D57-A7B4-003A416FBB0B", 36, 2, v0[91]);
    v14 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of ServiceProtocol.subscript.getter[1]);
    v0[157] = v14;
    *v14 = v0;
    v14[1] = sub_100229064;
    return dispatch thunk of ServiceProtocol.subscript.getter(v0[47], v0[87], v0[88]);
  }
}

uint64_t sub_100228F18()
{
  _QWORD *v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;

  v1 = v0[140];
  v2 = v0[139];
  v18 = v0[147];
  v19 = v0[131];
  v16 = v0[146];
  v17 = v0[130];
  v3 = v0[122];
  v4 = v0[121];
  v5 = v0[113];
  v6 = v0[112];
  v7 = v0[104];
  v8 = v0[103];
  v9 = v0[68];
  v14 = v0[67];
  v15 = v0[72];
  swift_release();
  sub_10001EF3C(v8, v7);
  sub_10001EF3C(v6, v5);
  sub_10001EF3C(v4, v3);
  sub_10001EF3C(v2, v1);
  sub_10001EF3C(v16, v18);
  sub_10001EF3C(v17, v19);
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v15, v14);
  v0[182] = v0[154];
  v10 = type metadata accessor for Peripheral(0);
  v11 = sub_100006204(&qword_1010EC4A0, (uint64_t (*)(uint64_t))&type metadata accessor for Peripheral, (uint64_t)&protocol conformance descriptor for Peripheral);
  v12 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of PeripheralProtocol.cancelConnection()[1]);
  v0[183] = v12;
  *v12 = v0;
  v12[1] = sub_10022AE94;
  return dispatch thunk of PeripheralProtocol.cancelConnection()(v10, v11);
}

uint64_t sub_100229064(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v7;

  v4 = *(_QWORD *)(*v2 + 1256);
  v5 = *v2;
  *(_QWORD *)(v5 + 1264) = a1;
  *(_QWORD *)(v5 + 1272) = v1;
  swift_task_dealloc(v4);
  (*(void (**)(_QWORD, _QWORD))(v5 + 760))(*(_QWORD *)(v5 + 376), *(_QWORD *)(v5 + 336));
  if (v1)
    return swift_task_switch(sub_1002291E8, 0, 0);
  v7 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of CharacteristicProtocol.read()[1]);
  *(_QWORD *)(v5 + 1280) = v7;
  *v7 = v5;
  v7[1] = sub_100229128;
  return dispatch thunk of CharacteristicProtocol.read()(*(_QWORD *)(v5 + 472), *(_QWORD *)(v5 + 728), *(_QWORD *)(v5 + 768));
}

uint64_t sub_100229128()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v5;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 1280);
  v3 = *(_QWORD **)v1;
  v3[161] = v0;
  swift_task_dealloc(v2);
  swift_release();
  if (v0)
    return swift_task_switch(sub_1002293C4, 0, 0);
  v5 = (_QWORD *)swift_task_alloc(async function pointer to AsyncSequence.first()[1]);
  v3[162] = v5;
  *v5 = v3;
  v5[1] = sub_100229350;
  return AsyncSequence.first()(v3 + 20, v3[55], v3[100]);
}

uint64_t sub_1002291E8()
{
  _QWORD *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;

  v1 = v0[146];
  v2 = v0[140];
  v3 = v0[139];
  v20 = v0[131];
  v21 = v0[156];
  v18 = v0[130];
  v19 = v0[155];
  v4 = v0[122];
  v5 = v0[121];
  v6 = v0[113];
  v7 = v0[112];
  v8 = v0[104];
  v9 = v0[103];
  v14 = v0[68];
  v15 = v0[147];
  v16 = v0[67];
  v17 = v0[72];
  swift_release();
  sub_10001EF3C(v9, v8);
  sub_10001EF3C(v7, v6);
  sub_10001EF3C(v5, v4);
  sub_10001EF3C(v3, v2);
  sub_10001EF3C(v1, v15);
  sub_10001EF3C(v19, v21);
  sub_10001EF3C(v18, v20);
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v17, v16);
  v0[182] = v0[159];
  v10 = type metadata accessor for Peripheral(0);
  v11 = sub_100006204(&qword_1010EC4A0, (uint64_t (*)(uint64_t))&type metadata accessor for Peripheral, (uint64_t)&protocol conformance descriptor for Peripheral);
  v12 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of PeripheralProtocol.cancelConnection()[1]);
  v0[183] = v12;
  *v12 = v0;
  v12[1] = sub_10022AE94;
  return dispatch thunk of PeripheralProtocol.cancelConnection()(v10, v11);
}

uint64_t sub_100229350()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 1296);
  *(_QWORD *)(*v1 + 1304) = v0;
  swift_task_dealloc(v3);
  (*(void (**)(_QWORD, _QWORD))(v2 + 816))(*(_QWORD *)(v2 + 472), *(_QWORD *)(v2 + 440));
  if (v0)
    v4 = sub_100229728;
  else
    v4 = sub_10022952C;
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_1002293C4()
{
  _QWORD *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;

  v1 = v0[146];
  v2 = v0[140];
  v3 = v0[139];
  v20 = v0[131];
  v21 = v0[156];
  v18 = v0[130];
  v19 = v0[155];
  v4 = v0[122];
  v5 = v0[121];
  v6 = v0[113];
  v7 = v0[112];
  v8 = v0[104];
  v9 = v0[103];
  v14 = v0[68];
  v15 = v0[147];
  v16 = v0[67];
  v17 = v0[72];
  swift_release();
  sub_10001EF3C(v9, v8);
  sub_10001EF3C(v7, v6);
  sub_10001EF3C(v5, v4);
  sub_10001EF3C(v3, v2);
  sub_10001EF3C(v1, v15);
  sub_10001EF3C(v19, v21);
  sub_10001EF3C(v18, v20);
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v17, v16);
  v0[182] = v0[161];
  v10 = type metadata accessor for Peripheral(0);
  v11 = sub_100006204(&qword_1010EC4A0, (uint64_t (*)(uint64_t))&type metadata accessor for Peripheral, (uint64_t)&protocol conformance descriptor for Peripheral);
  v12 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of PeripheralProtocol.cancelConnection()[1]);
  v0[183] = v12;
  *v12 = v0;
  v12[1] = sub_10022AE94;
  return dispatch thunk of PeripheralProtocol.cancelConnection()(v10, v11);
}

uint64_t sub_10022952C()
{
  _QWORD *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;

  v1 = v0[163];
  v3 = v0[20];
  v2 = v0[21];
  v0[164] = v3;
  v0[165] = v2;
  static Task<>.checkCancellation()();
  if (v1)
  {
    v20 = v0[155];
    v17 = v0[146];
    v18 = v0[147];
    v15 = v0[139];
    v16 = v0[140];
    v25 = v0[131];
    v23 = v0[156];
    v24 = v0[130];
    v4 = v0[122];
    v5 = v0[121];
    v6 = v0[113];
    v7 = v0[112];
    v8 = v0[104];
    v9 = v0[103];
    v19 = v0[68];
    v21 = v0[67];
    v22 = v0[72];
    swift_release();
    sub_10001EF3C(v9, v8);
    sub_10001EF3C(v7, v6);
    sub_10001EF3C(v5, v4);
    sub_10001EF3C(v15, v16);
    sub_10001EF3C(v17, v18);
    sub_10001EF3C(v20, v23);
    sub_10001EF3C(v3, v2);
    sub_10001EF3C(v24, v25);
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v22, v21);
    v0[182] = v1;
    v10 = type metadata accessor for Peripheral(0);
    v11 = sub_100006204(&qword_1010EC4A0, (uint64_t (*)(uint64_t))&type metadata accessor for Peripheral, (uint64_t)&protocol conformance descriptor for Peripheral);
    v12 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of PeripheralProtocol.cancelConnection()[1]);
    v0[183] = v12;
    *v12 = v0;
    v12[1] = sub_10022AE94;
    return dispatch thunk of PeripheralProtocol.cancelConnection()(v10, v11);
  }
  else
  {
    Identifier.init(stringLiteral:)("6AA50009-6352-4D57-A7B4-003A416FBB0B", 36, 2, v0[91]);
    v14 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of ServiceProtocol.subscript.getter[1]);
    v0[166] = v14;
    *v14 = v0;
    v14[1] = sub_100229890;
    return dispatch thunk of ServiceProtocol.subscript.getter(v0[46], v0[87], v0[88]);
  }
}

uint64_t sub_100229728()
{
  _QWORD *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;

  v1 = v0[146];
  v2 = v0[140];
  v3 = v0[139];
  v20 = v0[131];
  v21 = v0[156];
  v18 = v0[130];
  v19 = v0[155];
  v4 = v0[122];
  v5 = v0[121];
  v6 = v0[113];
  v7 = v0[112];
  v8 = v0[104];
  v9 = v0[103];
  v14 = v0[68];
  v15 = v0[147];
  v16 = v0[67];
  v17 = v0[72];
  swift_release();
  sub_10001EF3C(v9, v8);
  sub_10001EF3C(v7, v6);
  sub_10001EF3C(v5, v4);
  sub_10001EF3C(v3, v2);
  sub_10001EF3C(v1, v15);
  sub_10001EF3C(v19, v21);
  sub_10001EF3C(v18, v20);
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v17, v16);
  v0[182] = v0[163];
  v10 = type metadata accessor for Peripheral(0);
  v11 = sub_100006204(&qword_1010EC4A0, (uint64_t (*)(uint64_t))&type metadata accessor for Peripheral, (uint64_t)&protocol conformance descriptor for Peripheral);
  v12 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of PeripheralProtocol.cancelConnection()[1]);
  v0[183] = v12;
  *v12 = v0;
  v12[1] = sub_10022AE94;
  return dispatch thunk of PeripheralProtocol.cancelConnection()(v10, v11);
}

uint64_t sub_100229890(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v7;

  v4 = *(_QWORD *)(*v2 + 1328);
  v5 = *v2;
  *(_QWORD *)(v5 + 1336) = a1;
  *(_QWORD *)(v5 + 1344) = v1;
  swift_task_dealloc(v4);
  (*(void (**)(_QWORD, _QWORD))(v5 + 760))(*(_QWORD *)(v5 + 368), *(_QWORD *)(v5 + 336));
  if (v1)
    return swift_task_switch(sub_100229A14, 0, 0);
  v7 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of CharacteristicProtocol.read()[1]);
  *(_QWORD *)(v5 + 1352) = v7;
  *v7 = v5;
  v7[1] = sub_100229954;
  return dispatch thunk of CharacteristicProtocol.read()(*(_QWORD *)(v5 + 464), *(_QWORD *)(v5 + 728), *(_QWORD *)(v5 + 768));
}

uint64_t sub_100229954()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v5;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 1352);
  v3 = *(_QWORD **)v1;
  v3[170] = v0;
  swift_task_dealloc(v2);
  swift_release();
  if (v0)
    return swift_task_switch(sub_100229C04, 0, 0);
  v5 = (_QWORD *)swift_task_alloc(async function pointer to AsyncSequence.first()[1]);
  v3[171] = v5;
  *v5 = v3;
  v5[1] = sub_100229B90;
  return AsyncSequence.first()(v3 + 14, v3[55], v3[100]);
}

uint64_t sub_100229A14()
{
  _QWORD *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;

  v22 = v0[164];
  v23 = v0[165];
  v14 = v0[147];
  v1 = v0[146];
  v2 = v0[140];
  v3 = v0[139];
  v21 = v0[131];
  v19 = v0[156];
  v20 = v0[130];
  v4 = v0[122];
  v5 = v0[121];
  v6 = v0[113];
  v7 = v0[112];
  v8 = v0[104];
  v9 = v0[103];
  v15 = v0[68];
  v16 = v0[155];
  v17 = v0[67];
  v18 = v0[72];
  swift_release();
  sub_10001EF3C(v9, v8);
  sub_10001EF3C(v7, v6);
  sub_10001EF3C(v5, v4);
  sub_10001EF3C(v3, v2);
  sub_10001EF3C(v1, v14);
  sub_10001EF3C(v16, v19);
  sub_10001EF3C(v22, v23);
  sub_10001EF3C(v20, v21);
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v18, v17);
  v0[182] = v0[168];
  v10 = type metadata accessor for Peripheral(0);
  v11 = sub_100006204(&qword_1010EC4A0, (uint64_t (*)(uint64_t))&type metadata accessor for Peripheral, (uint64_t)&protocol conformance descriptor for Peripheral);
  v12 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of PeripheralProtocol.cancelConnection()[1]);
  v0[183] = v12;
  *v12 = v0;
  v12[1] = sub_10022AE94;
  return dispatch thunk of PeripheralProtocol.cancelConnection()(v10, v11);
}

uint64_t sub_100229B90()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 1368);
  *(_QWORD *)(*v1 + 1376) = v0;
  swift_task_dealloc(v3);
  (*(void (**)(_QWORD, _QWORD))(v2 + 816))(*(_QWORD *)(v2 + 464), *(_QWORD *)(v2 + 440));
  if (v0)
    v4 = sub_100229F98;
  else
    v4 = sub_100229D80;
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_100229C04()
{
  _QWORD *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;

  v22 = v0[164];
  v23 = v0[165];
  v14 = v0[147];
  v1 = v0[146];
  v2 = v0[140];
  v3 = v0[139];
  v21 = v0[131];
  v19 = v0[156];
  v20 = v0[130];
  v4 = v0[122];
  v5 = v0[121];
  v6 = v0[113];
  v7 = v0[112];
  v8 = v0[104];
  v9 = v0[103];
  v15 = v0[68];
  v16 = v0[155];
  v17 = v0[67];
  v18 = v0[72];
  swift_release();
  sub_10001EF3C(v9, v8);
  sub_10001EF3C(v7, v6);
  sub_10001EF3C(v5, v4);
  sub_10001EF3C(v3, v2);
  sub_10001EF3C(v1, v14);
  sub_10001EF3C(v16, v19);
  sub_10001EF3C(v22, v23);
  sub_10001EF3C(v20, v21);
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v18, v17);
  v0[182] = v0[170];
  v10 = type metadata accessor for Peripheral(0);
  v11 = sub_100006204(&qword_1010EC4A0, (uint64_t (*)(uint64_t))&type metadata accessor for Peripheral, (uint64_t)&protocol conformance descriptor for Peripheral);
  v12 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of PeripheralProtocol.cancelConnection()[1]);
  v0[183] = v12;
  *v12 = v0;
  v12[1] = sub_10022AE94;
  return dispatch thunk of PeripheralProtocol.cancelConnection()(v10, v11);
}

uint64_t sub_100229D80()
{
  _QWORD *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;

  v1 = v0[172];
  v3 = v0[14];
  v2 = v0[15];
  v0[173] = v3;
  v0[174] = v2;
  static Task<>.checkCancellation()();
  if (v1)
  {
    v26 = v0[165];
    v24 = v0[164];
    v19 = v0[155];
    v20 = v0[156];
    v17 = v0[146];
    v18 = v0[147];
    v15 = v0[139];
    v16 = v0[140];
    v27 = v0[131];
    v25 = v0[130];
    v4 = v0[122];
    v5 = v0[121];
    v6 = v0[113];
    v7 = v0[112];
    v8 = v0[104];
    v9 = v0[103];
    v21 = v0[68];
    v22 = v0[67];
    v23 = v0[72];
    swift_release();
    sub_10001EF3C(v9, v8);
    sub_10001EF3C(v7, v6);
    sub_10001EF3C(v5, v4);
    sub_10001EF3C(v15, v16);
    sub_10001EF3C(v17, v18);
    sub_10001EF3C(v19, v20);
    sub_10001EF3C(v24, v26);
    sub_10001EF3C(v3, v2);
    sub_10001EF3C(v25, v27);
    (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v23, v22);
    v0[182] = v1;
    v10 = type metadata accessor for Peripheral(0);
    v11 = sub_100006204(&qword_1010EC4A0, (uint64_t (*)(uint64_t))&type metadata accessor for Peripheral, (uint64_t)&protocol conformance descriptor for Peripheral);
    v12 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of PeripheralProtocol.cancelConnection()[1]);
    v0[183] = v12;
    *v12 = v0;
    v12[1] = sub_10022AE94;
    return dispatch thunk of PeripheralProtocol.cancelConnection()(v10, v11);
  }
  else
  {
    Identifier.init(stringLiteral:)("6AA5000A-6352-4D57-A7B4-003A416FBB0B", 36, 2, v0[91]);
    v14 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of ServiceProtocol.subscript.getter[1]);
    v0[175] = v14;
    *v14 = v0;
    v14[1] = sub_10022A114;
    return dispatch thunk of ServiceProtocol.subscript.getter(v0[45], v0[87], v0[88]);
  }
}

uint64_t sub_100229F98()
{
  _QWORD *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;

  v22 = v0[164];
  v23 = v0[165];
  v14 = v0[147];
  v1 = v0[146];
  v2 = v0[140];
  v3 = v0[139];
  v21 = v0[131];
  v19 = v0[156];
  v20 = v0[130];
  v4 = v0[122];
  v5 = v0[121];
  v6 = v0[113];
  v7 = v0[112];
  v8 = v0[104];
  v9 = v0[103];
  v15 = v0[68];
  v16 = v0[155];
  v17 = v0[67];
  v18 = v0[72];
  swift_release();
  sub_10001EF3C(v9, v8);
  sub_10001EF3C(v7, v6);
  sub_10001EF3C(v5, v4);
  sub_10001EF3C(v3, v2);
  sub_10001EF3C(v1, v14);
  sub_10001EF3C(v16, v19);
  sub_10001EF3C(v22, v23);
  sub_10001EF3C(v20, v21);
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v18, v17);
  v0[182] = v0[172];
  v10 = type metadata accessor for Peripheral(0);
  v11 = sub_100006204(&qword_1010EC4A0, (uint64_t (*)(uint64_t))&type metadata accessor for Peripheral, (uint64_t)&protocol conformance descriptor for Peripheral);
  v12 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of PeripheralProtocol.cancelConnection()[1]);
  v0[183] = v12;
  *v12 = v0;
  v12[1] = sub_10022AE94;
  return dispatch thunk of PeripheralProtocol.cancelConnection()(v10, v11);
}

uint64_t sub_10022A114(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v7;

  v4 = *(_QWORD *)(*v2 + 1400);
  v5 = *v2;
  *(_QWORD *)(v5 + 1408) = a1;
  *(_QWORD *)(v5 + 1416) = v1;
  swift_task_dealloc(v4);
  (*(void (**)(_QWORD, _QWORD))(v5 + 760))(*(_QWORD *)(v5 + 360), *(_QWORD *)(v5 + 336));
  if (v1)
    return swift_task_switch(sub_10022A298, 0, 0);
  v7 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of CharacteristicProtocol.read()[1]);
  *(_QWORD *)(v5 + 1424) = v7;
  *v7 = v5;
  v7[1] = sub_10022A1D8;
  return dispatch thunk of CharacteristicProtocol.read()(*(_QWORD *)(v5 + 456), *(_QWORD *)(v5 + 728), *(_QWORD *)(v5 + 768));
}

uint64_t sub_10022A1D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v5;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 1424);
  v3 = *(_QWORD **)v1;
  v3[179] = v0;
  swift_task_dealloc(v2);
  swift_release();
  if (v0)
    return swift_task_switch(sub_10022A4A8, 0, 0);
  v5 = (_QWORD *)swift_task_alloc(async function pointer to AsyncSequence.first()[1]);
  v3[180] = v5;
  *v5 = v3;
  v5[1] = sub_10022A434;
  return AsyncSequence.first()(v3 + 12, v3[55], v3[100]);
}

uint64_t sub_10022A298()
{
  _QWORD *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;

  v25 = v0[174];
  v20 = v0[164];
  v15 = v0[155];
  v16 = v0[156];
  v14 = v0[147];
  v1 = v0[146];
  v2 = v0[140];
  v3 = v0[139];
  v23 = v0[131];
  v24 = v0[173];
  v21 = v0[130];
  v22 = v0[165];
  v4 = v0[122];
  v5 = v0[121];
  v6 = v0[113];
  v7 = v0[112];
  v8 = v0[104];
  v9 = v0[103];
  v17 = v0[68];
  v18 = v0[67];
  v19 = v0[72];
  swift_release();
  sub_10001EF3C(v9, v8);
  sub_10001EF3C(v7, v6);
  sub_10001EF3C(v5, v4);
  sub_10001EF3C(v3, v2);
  sub_10001EF3C(v1, v14);
  sub_10001EF3C(v15, v16);
  sub_10001EF3C(v20, v22);
  sub_10001EF3C(v24, v25);
  sub_10001EF3C(v21, v23);
  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v19, v18);
  v0[182] = v0[177];
  v10 = type metadata accessor for Peripheral(0);
  v11 = sub_100006204(&qword_1010EC4A0, (uint64_t (*)(uint64_t))&type metadata accessor for Peripheral, (uint64_t)&protocol conformance descriptor for Peripheral);
  v12 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of PeripheralProtocol.cancelConnection()[1]);
  v0[183] = v12;
  *v12 = v0;
  v12[1] = sub_10022AE94;
  return dispatch thunk of PeripheralProtocol.cancelConnection()(v10, v11);
}

uint64_t sub_10022A434()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 1440);
  *(_QWORD *)(*v1 + 1448) = v0;
  swift_task_dealloc(v3);
  (*(void (**)(_QWORD, _QWORD))(v2 + 816))(*(_QWORD *)(v2 + 456), *(_QWORD *)(v2 + 440));
  if (v0)
    v4 = sub_10022ACF8;
  else
    v4 = sub_10022A644;
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_10022A4A8()
{
  _QWORD *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;

  v25 = v0[174];
  v20 = v0[164];
  v15 = v0[155];
  v16 = v0[156];
  v14 = v0[147];
  v1 = v0[146];
  v2 = v0[140];
  v3 = v0[139];
  v23 = v0[131];
  v24 = v0[173];
  v21 = v0[130];
  v22 = v0[165];
  v4 = v0[122];
  v5 = v0[121];
  v6 = v0[113];
  v7 = v0[112];
  v8 = v0[104];
  v9 = v0[103];
  v17 = v0[68];
  v18 = v0[67];
  v19 = v0[72];
  swift_release();
  sub_10001EF3C(v9, v8);
  sub_10001EF3C(v7, v6);
  sub_10001EF3C(v5, v4);
  sub_10001EF3C(v3, v2);
  sub_10001EF3C(v1, v14);
  sub_10001EF3C(v15, v16);
  sub_10001EF3C(v20, v22);
  sub_10001EF3C(v24, v25);
  sub_10001EF3C(v21, v23);
  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v19, v18);
  v0[182] = v0[179];
  v10 = type metadata accessor for Peripheral(0);
  v11 = sub_100006204(&qword_1010EC4A0, (uint64_t (*)(uint64_t))&type metadata accessor for Peripheral, (uint64_t)&protocol conformance descriptor for Peripheral);
  v12 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of PeripheralProtocol.cancelConnection()[1]);
  v0[183] = v12;
  *v12 = v0;
  v12[1] = sub_10022AE94;
  return dispatch thunk of PeripheralProtocol.cancelConnection()(v10, v11);
}

uint64_t sub_10022A644(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  void (*v30)(uint64_t, uint64_t);
  void (*v31)(uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int *v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  _QWORD *v46;
  _QWORD *v47;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  void (*v88)(uint64_t, uint64_t);
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  NSObject *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  os_log_type_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;

  v112 = *(_QWORD *)(v1 + 104);
  v113 = *(_QWORD *)(v1 + 96);
  ContinuousClock.now.getter(a1);
  if (qword_1010E9AA8 != -1)
    swift_once(&qword_1010E9AA8, sub_100217BB8);
  v2 = *(_QWORD *)(v1 + 576);
  v3 = *(_QWORD *)(v1 + 568);
  v4 = *(_QWORD *)(v1 + 560);
  v5 = *(_QWORD *)(v1 + 552);
  v6 = *(_QWORD *)(v1 + 544);
  v7 = *(_QWORD *)(v1 + 536);
  v9 = *(_QWORD *)(v1 + 320);
  v8 = *(_QWORD *)(v1 + 328);
  v10 = *(_QWORD *)(v1 + 312);
  v11 = sub_10001A9E8(v10, (uint64_t)qword_1011B6C30);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v8, v11, v10);
  v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  v12(v4, v2, v7);
  v13 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v12)(v5, v3, v7);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.default.getter(v14);
  v16 = os_log_type_enabled(v14, v15);
  v17 = *(_QWORD *)(v1 + 560);
  v18 = *(_QWORD *)(v1 + 552);
  v19 = *(_QWORD *)(v1 + 544);
  v20 = *(_QWORD *)(v1 + 536);
  v22 = *(_QWORD *)(v1 + 320);
  v21 = *(_QWORD *)(v1 + 328);
  v23 = *(_QWORD *)(v1 + 312);
  if (v16)
  {
    v107 = v15;
    v24 = *(_QWORD *)(v1 + 304);
    v96 = *(_QWORD *)(v1 + 296);
    v98 = *(_QWORD *)(v1 + 288);
    v110 = *(_QWORD *)(v1 + 328);
    v103 = v14;
    v25 = (uint8_t *)swift_slowAlloc(12, -1);
    v105 = swift_slowAlloc(32, -1);
    v114 = v105;
    *(_DWORD *)v25 = 136446210;
    static Duration.UnitsFormatStyle.Unit.milliseconds.getter(v105);
    v26 = sub_100006204(&qword_101116030, (uint64_t (*)(uint64_t))&type metadata accessor for ContinuousClock.Instant, (uint64_t)&protocol conformance descriptor for ContinuousClock.Instant);
    v101 = v22;
    v27 = static Duration.description<A>(_:_:units:)(v17, v18, v24, v20, v26);
    v29 = v28;
    (*(void (**)(uint64_t, uint64_t))(v96 + 8))(v24, v98);
    *(_QWORD *)(v1 + 192) = sub_100016940(v27, v29, &v114);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 192, v1 + 200, v25 + 4, v25 + 12);
    swift_bridgeObjectRelease();
    v30 = *(void (**)(uint64_t, uint64_t))(v19 + 8);
    v30(v17, v20);
    v88 = v30;
    v30(v18, v20);
    _os_log_impl((void *)&_mh_execute_header, v103, v107, "Raw metadata read time: %{public}s", v25, 0xCu);
    swift_arrayDestroy(v105, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v105, -1, -1);
    swift_slowDealloc(v25, -1, -1);

    (*(void (**)(uint64_t, uint64_t))(v101 + 8))(v110, v23);
  }
  else
  {
    v31 = *(void (**)(uint64_t, uint64_t))(v19 + 8);
    v31(*(_QWORD *)(v1 + 560), *(_QWORD *)(v1 + 536));
    v88 = v31;
    v31(v18, v20);

    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v21, v23);
  }
  v79 = *(_QWORD *)(v1 + 1384);
  v80 = *(_QWORD *)(v1 + 1392);
  v76 = *(_QWORD *)(v1 + 1320);
  v73 = *(_QWORD *)(v1 + 1248);
  v74 = *(_QWORD *)(v1 + 1312);
  v71 = *(_QWORD *)(v1 + 1176);
  v72 = *(_QWORD *)(v1 + 1240);
  v69 = *(_QWORD *)(v1 + 1120);
  v70 = *(_QWORD *)(v1 + 1168);
  v67 = *(_QWORD *)(v1 + 1048);
  v68 = *(_QWORD *)(v1 + 1112);
  v65 = *(_QWORD *)(v1 + 976);
  v66 = *(_QWORD *)(v1 + 1040);
  v63 = *(_QWORD *)(v1 + 904);
  v64 = *(_QWORD *)(v1 + 968);
  v61 = *(_QWORD *)(v1 + 832);
  v62 = *(_QWORD *)(v1 + 896);
  v59 = *(_QWORD *)(v1 + 624);
  v60 = *(_QWORD *)(v1 + 824);
  v57 = *(_QWORD *)(v1 + 616);
  v58 = *(_QWORD *)(v1 + 608);
  v54 = *(_QWORD *)(v1 + 592);
  v55 = *(_QWORD *)(v1 + 584);
  v56 = *(_QWORD *)(v1 + 600);
  v53 = *(_QWORD *)(v1 + 576);
  v52 = *(_QWORD *)(v1 + 568);
  v75 = *(_QWORD *)(v1 + 560);
  v32 = *(_QWORD *)(v1 + 536);
  v77 = *(_QWORD *)(v1 + 552);
  v78 = *(_QWORD *)(v1 + 528);
  v81 = *(_QWORD *)(v1 + 520);
  v82 = *(_QWORD *)(v1 + 512);
  v83 = *(_QWORD *)(v1 + 504);
  v84 = *(_QWORD *)(v1 + 496);
  v85 = *(_QWORD *)(v1 + 488);
  v86 = *(_QWORD *)(v1 + 480);
  v87 = *(_QWORD *)(v1 + 472);
  v89 = *(_QWORD *)(v1 + 464);
  v90 = *(_QWORD *)(v1 + 456);
  v91 = *(_QWORD *)(v1 + 432);
  v92 = *(_QWORD *)(v1 + 424);
  v93 = *(_QWORD *)(v1 + 416);
  v94 = *(_QWORD *)(v1 + 408);
  v95 = *(_QWORD *)(v1 + 400);
  v97 = *(_QWORD *)(v1 + 392);
  v99 = *(_QWORD *)(v1 + 384);
  v100 = *(_QWORD *)(v1 + 376);
  v102 = *(_QWORD *)(v1 + 368);
  v104 = *(_QWORD *)(v1 + 360);
  v106 = *(_QWORD *)(v1 + 352);
  v108 = *(_QWORD *)(v1 + 328);
  v33 = *(_QWORD *)(v1 + 272);
  v34 = *(_QWORD *)(v1 + 280);
  v35 = *(_QWORD *)(v1 + 256);
  v36 = *(_QWORD *)(v1 + 264);
  v38 = *(_QWORD *)(v1 + 240);
  v37 = *(_QWORD *)(v1 + 248);
  v109 = *(_QWORD *)(v1 + 304);
  v111 = *(_QWORD *)(v1 + 232);
  v39 = *(_QWORD *)(v1 + 200);
  dispatch thunk of PeripheralProtocol.id.getter(*(_QWORD *)(v1 + 632), *(_QWORD *)(v1 + 640));
  Identifier.id.getter(v36);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v34, v36);
  v88(v52, v32);
  v88(v53, v32);
  (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v56, v55);
  (*(void (**)(uint64_t, uint64_t))(v57 + 8))(v59, v58);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v37 + 32))(v39, v35, v38);
  v40 = (int *)type metadata accessor for RawAccessoryMetadata(0);
  v41 = (_QWORD *)(v39 + v40[5]);
  *v41 = v60;
  v41[1] = v61;
  v42 = (_QWORD *)(v39 + v40[6]);
  *v42 = v62;
  v42[1] = v63;
  v43 = (_QWORD *)(v39 + v40[7]);
  *v43 = v64;
  v43[1] = v65;
  v44 = (_QWORD *)(v39 + v40[8]);
  *v44 = v66;
  v44[1] = v67;
  v45 = (_QWORD *)(v39 + v40[9]);
  *v45 = v68;
  v45[1] = v69;
  v46 = (_QWORD *)(v39 + v40[10]);
  *v46 = v70;
  v46[1] = v71;
  v47 = (_QWORD *)(v39 + v40[11]);
  *v47 = v72;
  v47[1] = v73;
  v48 = (_QWORD *)(v39 + v40[12]);
  *v48 = v74;
  v48[1] = v76;
  v49 = (_QWORD *)(v39 + v40[13]);
  *v49 = v79;
  v49[1] = v80;
  v50 = (_QWORD *)(v39 + v40[14]);
  *v50 = v113;
  v50[1] = v112;
  swift_task_dealloc(v59);
  swift_task_dealloc(v56);
  swift_task_dealloc(v53);
  swift_task_dealloc(v52);
  swift_task_dealloc(v75);
  swift_task_dealloc(v77);
  swift_task_dealloc(v78);
  swift_task_dealloc(v81);
  swift_task_dealloc(v82);
  swift_task_dealloc(v83);
  swift_task_dealloc(v84);
  swift_task_dealloc(v85);
  swift_task_dealloc(v86);
  swift_task_dealloc(v87);
  swift_task_dealloc(v89);
  swift_task_dealloc(v90);
  swift_task_dealloc(v91);
  swift_task_dealloc(v92);
  swift_task_dealloc(v93);
  swift_task_dealloc(v94);
  swift_task_dealloc(v95);
  swift_task_dealloc(v97);
  swift_task_dealloc(v99);
  swift_task_dealloc(v100);
  swift_task_dealloc(v102);
  swift_task_dealloc(v104);
  swift_task_dealloc(v106);
  swift_task_dealloc(v108);
  swift_task_dealloc(v109);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v111);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_10022ACF8()
{
  _QWORD *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;

  v25 = v0[174];
  v20 = v0[164];
  v15 = v0[155];
  v16 = v0[156];
  v14 = v0[147];
  v1 = v0[146];
  v2 = v0[140];
  v3 = v0[139];
  v23 = v0[131];
  v24 = v0[173];
  v21 = v0[130];
  v22 = v0[165];
  v4 = v0[122];
  v5 = v0[121];
  v6 = v0[113];
  v7 = v0[112];
  v8 = v0[104];
  v9 = v0[103];
  v17 = v0[68];
  v18 = v0[67];
  v19 = v0[72];
  swift_release();
  sub_10001EF3C(v9, v8);
  sub_10001EF3C(v7, v6);
  sub_10001EF3C(v5, v4);
  sub_10001EF3C(v3, v2);
  sub_10001EF3C(v1, v14);
  sub_10001EF3C(v15, v16);
  sub_10001EF3C(v20, v22);
  sub_10001EF3C(v24, v25);
  sub_10001EF3C(v21, v23);
  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v19, v18);
  v0[182] = v0[181];
  v10 = type metadata accessor for Peripheral(0);
  v11 = sub_100006204(&qword_1010EC4A0, (uint64_t (*)(uint64_t))&type metadata accessor for Peripheral, (uint64_t)&protocol conformance descriptor for Peripheral);
  v12 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of PeripheralProtocol.cancelConnection()[1]);
  v0[183] = v12;
  *v12 = v0;
  v12[1] = sub_10022AE94;
  return dispatch thunk of PeripheralProtocol.cancelConnection()(v10, v11);
}

uint64_t sub_10022AE94()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 1464);
  *(_QWORD *)(*(_QWORD *)v1 + 1472) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_10022B130;
  else
    v3 = sub_10022AEF8;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_10022AEF8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v2 = *(_QWORD *)(v1 + 600);
  v3 = *(_QWORD *)(v1 + 592);
  v4 = *(_QWORD *)(v1 + 584);
  swift_willThrow(a1);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  v5 = *(_QWORD *)(v1 + 624);
  v6 = *(_QWORD *)(v1 + 600);
  v7 = *(_QWORD *)(v1 + 576);
  v8 = *(_QWORD *)(v1 + 568);
  v9 = *(_QWORD *)(v1 + 560);
  v10 = *(_QWORD *)(v1 + 552);
  v11 = *(_QWORD *)(v1 + 528);
  v12 = *(_QWORD *)(v1 + 520);
  v13 = *(_QWORD *)(v1 + 512);
  v15 = *(_QWORD *)(v1 + 504);
  v16 = *(_QWORD *)(v1 + 496);
  v17 = *(_QWORD *)(v1 + 488);
  v18 = *(_QWORD *)(v1 + 480);
  v19 = *(_QWORD *)(v1 + 472);
  v20 = *(_QWORD *)(v1 + 464);
  v21 = *(_QWORD *)(v1 + 456);
  v22 = *(_QWORD *)(v1 + 432);
  v23 = *(_QWORD *)(v1 + 424);
  v24 = *(_QWORD *)(v1 + 416);
  v25 = *(_QWORD *)(v1 + 408);
  v26 = *(_QWORD *)(v1 + 400);
  v27 = *(_QWORD *)(v1 + 392);
  v28 = *(_QWORD *)(v1 + 384);
  v29 = *(_QWORD *)(v1 + 376);
  v30 = *(_QWORD *)(v1 + 368);
  v31 = *(_QWORD *)(v1 + 360);
  v32 = *(_QWORD *)(v1 + 352);
  v33 = *(_QWORD *)(v1 + 304);
  v34 = *(_QWORD *)(v1 + 328);
  v35 = *(_QWORD *)(v1 + 280);
  v36 = *(_QWORD *)(v1 + 256);
  v37 = *(_QWORD *)(v1 + 232);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v1 + 616) + 8))(v5, *(_QWORD *)(v1 + 608));
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v34);
  swift_task_dealloc(v33);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_10022B130()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  BOOL v5;
  uint64_t v6;
  uint8_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  if (qword_1010EA230 != -1)
    swift_once(&qword_1010EA230, sub_100B5D824);
  v1 = *(_QWORD *)(v0 + 1472);
  sub_10001A9E8(*(_QWORD *)(v0 + 312), (uint64_t)qword_1011B7D00);
  v2 = swift_errorRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter(v3);
  v5 = os_log_type_enabled(v3, v4);
  v6 = *(_QWORD *)(v0 + 1472);
  if (v5)
  {
    v7 = (uint8_t *)swift_slowAlloc(12, -1);
    v8 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v7 = 138543362;
    v9 = _convertErrorToNSError(_:)(v6);
    *(_QWORD *)(v0 + 176) = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 176, v0 + 184, v7 + 4, v7 + 12);
    *v8 = v9;
    swift_errorRelease(v6);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "cancelConnection error in readRawAccessoryMetadata() catch block: %{public}@", v7, 0xCu);
    v10 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v8, 1, v10);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v7, -1, -1);

    v11 = swift_errorRelease(v6);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 1472));
    swift_errorRelease(v6);

  }
  v12 = *(_QWORD *)(v0 + 600);
  v13 = *(_QWORD *)(v0 + 592);
  v14 = *(_QWORD *)(v0 + 584);
  swift_willThrow(v11);
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v14);
  v15 = *(_QWORD *)(v0 + 624);
  v16 = *(_QWORD *)(v0 + 600);
  v17 = *(_QWORD *)(v0 + 576);
  v18 = *(_QWORD *)(v0 + 568);
  v19 = *(_QWORD *)(v0 + 560);
  v20 = *(_QWORD *)(v0 + 552);
  v21 = *(_QWORD *)(v0 + 528);
  v22 = *(_QWORD *)(v0 + 520);
  v23 = *(_QWORD *)(v0 + 512);
  v25 = *(_QWORD *)(v0 + 504);
  v26 = *(_QWORD *)(v0 + 496);
  v27 = *(_QWORD *)(v0 + 488);
  v28 = *(_QWORD *)(v0 + 480);
  v29 = *(_QWORD *)(v0 + 472);
  v30 = *(_QWORD *)(v0 + 464);
  v31 = *(_QWORD *)(v0 + 456);
  v32 = *(_QWORD *)(v0 + 432);
  v33 = *(_QWORD *)(v0 + 424);
  v34 = *(_QWORD *)(v0 + 416);
  v35 = *(_QWORD *)(v0 + 408);
  v36 = *(_QWORD *)(v0 + 400);
  v37 = *(_QWORD *)(v0 + 392);
  v38 = *(_QWORD *)(v0 + 384);
  v39 = *(_QWORD *)(v0 + 376);
  v40 = *(_QWORD *)(v0 + 368);
  v41 = *(_QWORD *)(v0 + 360);
  v42 = *(_QWORD *)(v0 + 352);
  v43 = *(_QWORD *)(v0 + 304);
  v44 = *(_QWORD *)(v0 + 328);
  v45 = *(_QWORD *)(v0 + 280);
  v46 = *(_QWORD *)(v0 + 256);
  v47 = *(_QWORD *)(v0 + 232);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 616) + 8))(v15, *(_QWORD *)(v0 + 608));
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  swift_task_dealloc(v40);
  swift_task_dealloc(v41);
  swift_task_dealloc(v42);
  swift_task_dealloc(v44);
  swift_task_dealloc(v43);
  swift_task_dealloc(v45);
  swift_task_dealloc(v46);
  swift_task_dealloc(v47);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10022B4C8(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_BYTE *)(v3 + 192) = a3;
  *(_QWORD *)(v3 + 16) = a1;
  *(_QWORD *)(v3 + 24) = a2;
  v4 = type metadata accessor for RawAccessoryMetadata(0);
  *(_QWORD *)(v3 + 32) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for CentralManager.State(0);
  *(_QWORD *)(v3 + 40) = v5;
  v6 = *(_QWORD *)(v5 - 8);
  *(_QWORD *)(v3 + 48) = v6;
  *(_QWORD *)(v3 + 56) = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10001A9A8((uint64_t *)&unk_101116060);
  *(_QWORD *)(v3 + 64) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10022B570, 0, 0);
}

uint64_t sub_10022B570()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = v0[8];
  v0[9] = type metadata accessor for CentralManager(0);
  v2 = type metadata accessor for CentralManager.Options(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
  v3 = (_QWORD *)swift_task_alloc(async function pointer to CentralManager.__allocating_init(options:)[1]);
  v0[10] = v3;
  *v3 = v0;
  v3[1] = sub_10022B5FC;
  return CentralManager.__allocating_init(options:)(v0[8]);
}

uint64_t sub_10022B5FC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 80);
  *(_QWORD *)(*(_QWORD *)v1 + 88) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10022B658, 0, 0);
}

uint64_t sub_10022B658()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;

  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0[6] + 104))(v0[7], enum case for CentralManager.State.poweredOn(_:), v0[5]);
  v1 = (_QWORD *)swift_task_alloc(async function pointer to CentralManagerProtocol.await(state:)[1]);
  v0[12] = v1;
  v2 = sub_100006204(&qword_1010EC468, (uint64_t (*)(uint64_t))&type metadata accessor for CentralManager, (uint64_t)&protocol conformance descriptor for CentralManager);
  *v1 = v0;
  v1[1] = sub_10022B6EC;
  return CentralManagerProtocol.await(state:)(v0[7], v0[9], v2);
}

uint64_t sub_10022B6EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v8;
  uint64_t (*v9)(_QWORD);

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 96);
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 48);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 56);
  v5 = *(_QWORD *)(*(_QWORD *)v1 + 40);
  v6 = *(_QWORD **)v1;
  v6[13] = v0;
  swift_task_dealloc(v2);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  if (v0)
    return swift_task_switch(sub_10022BBB8, 0, 0);
  v9 = (uint64_t (*)(_QWORD))((char *)&async function pointer to dispatch thunk of CentralManager.retrievePeripheral(macAddress:)
                                      + async function pointer to dispatch thunk of CentralManager.retrievePeripheral(macAddress:));
  v8 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of CentralManager.retrievePeripheral(macAddress:)
                                  + 1));
  v6[14] = v8;
  *v8 = v6;
  v8[1] = sub_10022B7C4;
  return v9(v6[3]);
}

uint64_t sub_10022B7C4(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 112);
  *(_QWORD *)(v3 + 120) = a1;
  *(_QWORD *)(v3 + 128) = v1;
  swift_task_dealloc(v4);
  if (v1)
    v5 = sub_10022BC10;
  else
    v5 = sub_10022B830;
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_10022B830()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t, char);

  v1 = *(_QWORD *)(v0 + 120);
  if (v1)
  {
    v13 = (uint64_t (*)(uint64_t, uint64_t, char))((char *)&dword_1010F3818 + dword_1010F3818);
    v2 = (_QWORD *)swift_task_alloc(unk_1010F381C);
    *(_QWORD *)(v0 + 136) = v2;
    *v2 = v0;
    v2[1] = sub_10022B978;
    return v13(*(_QWORD *)(v0 + 32), v1, *(_BYTE *)(v0 + 192));
  }
  else
  {
    v4 = *(_QWORD *)(v0 + 24);
    v5 = type metadata accessor for AccessoryMetadataManager.Error(0);
    v6 = sub_100006204(&qword_1010F37D8, type metadata accessor for AccessoryMetadataManager.Error, (uint64_t)&unk_100E2E588);
    swift_allocError(v5, v6, 0, 0);
    v8 = v7;
    v9 = type metadata accessor for MACAddress(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v8, v4, v9);
    v10 = swift_storeEnumTagMultiPayload(v8, v5, 1);
    swift_willThrow(v10);
    swift_release();
    v11 = *(_QWORD *)(v0 + 56);
    v12 = *(_QWORD *)(v0 + 32);
    swift_task_dealloc(*(_QWORD *)(v0 + 64));
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_10022B978()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 136);
  *(_QWORD *)(*(_QWORD *)v1 + 144) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_10022BA88;
  else
    v3 = sub_10022B9DC;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_10022B9DC()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t **v2;
  uint64_t (*v3)();
  uint64_t (*v5)(void);

  v1 = v0[18];
  sub_100133E40(v0[4], v0[2]);
  if (v1)
  {
    v0[21] = v1;
    v5 = (uint64_t (*)(void))((char *)&async function pointer to dispatch thunk of Peripheral.cancelConnection()
                           + async function pointer to dispatch thunk of Peripheral.cancelConnection());
    v2 = (uint64_t **)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of Peripheral.cancelConnection()
                                      + 1));
    v0[22] = (uint64_t)v2;
    v3 = sub_10022BC68;
  }
  else
  {
    v5 = (uint64_t (*)(void))((char *)&async function pointer to dispatch thunk of Peripheral.cancelConnection()
                           + async function pointer to dispatch thunk of Peripheral.cancelConnection());
    v2 = (uint64_t **)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of Peripheral.cancelConnection()
                                      + 1));
    v0[19] = (uint64_t)v2;
    v3 = sub_10022BAEC;
  }
  *v2 = v0;
  v2[1] = (uint64_t *)v3;
  return v5();
}

uint64_t sub_10022BA88()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t (*v3)(void);

  v0[21] = v0[18];
  v3 = (uint64_t (*)(void))((char *)&async function pointer to dispatch thunk of Peripheral.cancelConnection()
                         + async function pointer to dispatch thunk of Peripheral.cancelConnection());
  v1 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of Peripheral.cancelConnection()
                                  + 1));
  v0[22] = v1;
  *v1 = v0;
  v1[1] = sub_10022BC68;
  return v3();
}

uint64_t sub_10022BAEC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 152);
  *(_QWORD *)(*(_QWORD *)v1 + 160) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_10022BD3C;
  else
    v3 = sub_10022BB50;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_10022BB50()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 120);
  v3 = *(_QWORD *)(v0 + 56);
  v2 = *(_QWORD *)(v0 + 64);
  v4 = *(_QWORD *)(v0 + 32);
  swift_release(*(_QWORD *)(v0 + 88));
  swift_release(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10022BBB8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_release(*(_QWORD *)(v0 + 88));
  v1 = *(_QWORD *)(v0 + 56);
  v2 = *(_QWORD *)(v0 + 32);
  swift_task_dealloc(*(_QWORD *)(v0 + 64));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10022BC10()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_release(*(_QWORD *)(v0 + 88));
  v1 = *(_QWORD *)(v0 + 56);
  v2 = *(_QWORD *)(v0 + 32);
  swift_task_dealloc(*(_QWORD *)(v0 + 64));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10022BC68()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 176);
  *(_QWORD *)(*(_QWORD *)v1 + 184) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_10022BDB0;
  else
    v3 = sub_10022BCCC;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_10022BCCC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(v1 + 120);
  v3 = *(_QWORD *)(v1 + 88);
  swift_willThrow(a1);
  swift_release(v2);
  swift_release(v3);
  v4 = *(_QWORD *)(v1 + 56);
  v5 = *(_QWORD *)(v1 + 32);
  swift_task_dealloc(*(_QWORD *)(v1 + 64));
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_10022BD3C()
{
  uint64_t *v0;
  uint64_t **v1;
  uint64_t (*v3)(void);

  sub_1000126B0(v0[2], type metadata accessor for AccessoryMetadata);
  v0[21] = v0[20];
  v3 = (uint64_t (*)(void))((char *)&async function pointer to dispatch thunk of Peripheral.cancelConnection()
                         + async function pointer to dispatch thunk of Peripheral.cancelConnection());
  v1 = (uint64_t **)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of Peripheral.cancelConnection()
                                    + 1));
  v0[22] = (uint64_t)v1;
  *v1 = v0;
  v1[1] = (uint64_t *)sub_10022BC68;
  return v3();
}

uint64_t sub_10022BDB0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 120);
  v2 = *(_QWORD *)(v0 + 88);
  swift_errorRelease(*(_QWORD *)(v0 + 168));
  swift_release(v1);
  swift_release(v2);
  v3 = *(_QWORD *)(v0 + 56);
  v4 = *(_QWORD *)(v0 + 32);
  swift_task_dealloc(*(_QWORD *)(v0 + 64));
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10022BE20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v26 = a2;
  v27 = a4;
  v25 = a1;
  v5 = sub_10001A9A8(&qword_1010F3830);
  v6 = *(_QWORD *)(v5 - 8);
  v24 = v5;
  v7 = *(_QWORD *)(v6 + 64);
  __chkstk_darwin(v5);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for MACAddress(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  __chkstk_darwin(v9);
  v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_10001A9A8(&qword_1010F46C0);
  __chkstk_darwin(v13);
  v15 = (char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v15, 1, 1, v16);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a3, v9);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v25, v5);
  v17 = *(unsigned __int8 *)(v10 + 80);
  v18 = (v17 + 40) & ~v17;
  v19 = *(unsigned __int8 *)(v6 + 80);
  v20 = (v11 + v19 + v18) & ~v19;
  v21 = (v7 + v20 + 7) & 0xFFFFFFFFFFFFFFF8;
  v22 = (char *)swift_allocObject(&unk_10105FED0, v21 + 8, v17 | v19 | 7);
  *((_QWORD *)v22 + 2) = 0;
  *((_QWORD *)v22 + 3) = 0;
  *((_QWORD *)v22 + 4) = v26;
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(&v22[v18], v12, v9);
  (*(void (**)(char *, char *, uint64_t))(v6 + 32))(&v22[v20], v8, v24);
  *(_QWORD *)&v22[v21] = v27;
  sub_100691AC0((uint64_t)v15, (uint64_t)&unk_1010F3840, (uint64_t)v22);
  return swift_release();
}

uint64_t sub_10022C000(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;

  v7[3] = a6;
  v7[4] = a7;
  v7[2] = a5;
  v8 = type metadata accessor for UUID(0);
  v7[5] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10001A9A8(&qword_1010F3830);
  v7[6] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v7[7] = v10;
  v11 = *(_QWORD *)(v10 + 64);
  v7[8] = v11;
  v12 = (v11 + 15) & 0xFFFFFFFFFFFFFFF0;
  v7[9] = swift_task_alloc(v12);
  v7[10] = swift_task_alloc(v12);
  v13 = type metadata accessor for MACAddress(0);
  v7[11] = v13;
  v14 = *(_QWORD *)(v13 - 8);
  v7[12] = v14;
  v15 = *(_QWORD *)(v14 + 64);
  v7[13] = v15;
  v16 = (v15 + 15) & 0xFFFFFFFFFFFFFFF0;
  v7[14] = swift_task_alloc(v16);
  v7[15] = swift_task_alloc(v16);
  return swift_task_switch(sub_10022C0D8, 0, 0);
}

uint64_t sub_10022C0D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v23)(uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t, uint64_t, uint64_t);
  uint64_t v27;
  void (*v28)(uint64_t, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  if (qword_1010E9AC0 != -1)
    swift_once(&qword_1010E9AC0, sub_100224554);
  v1 = *(_QWORD *)(v0 + 120);
  v31 = *(_QWORD *)(v0 + 112);
  v3 = *(_QWORD *)(v0 + 96);
  v2 = *(_QWORD *)(v0 + 104);
  v4 = *(_QWORD *)(v0 + 80);
  v5 = *(_QWORD *)(v0 + 88);
  v32 = *(_QWORD *)(v0 + 72);
  v6 = *(_QWORD *)(v0 + 56);
  v25 = *(_QWORD *)(v0 + 64);
  v7 = *(_QWORD *)(v0 + 48);
  v34 = v7;
  v33 = *(_QWORD *)(v0 + 40);
  v8 = *(_QWORD *)(v0 + 24);
  v27 = v8;
  v9 = *(_QWORD *)(v0 + 16);
  v29 = v9;
  v30 = *(_QWORD *)(v0 + 32);
  type metadata accessor for WorkItemQueue.WorkItem(0);
  v28 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v10 = v9;
  v11 = v5;
  v28(v1, v10, v5);
  v26 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  v26(v4, v8, v7);
  v12 = *(unsigned __int8 *)(v3 + 80);
  v13 = (v12 + 16) & ~v12;
  v14 = *(unsigned __int8 *)(v6 + 80);
  v15 = (v2 + v14 + v13) & ~v14;
  v16 = (v25 + v15 + 7) & 0xFFFFFFFFFFFFFFF8;
  v24 = v12 | v14 | 7;
  v17 = swift_allocObject(&unk_10105FEF8, v16 + 8, v24);
  v23 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32);
  v23(v17 + v13, v1, v11);
  v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32);
  v18(v17 + v15, v4, v34);
  *(_QWORD *)(v17 + v16) = v30;
  v28(v31, v29, v11);
  v26(v32, v27, v34);
  v19 = swift_allocObject(&unk_10105FF20, v16 + 8, v24);
  v23(v19 + v13, v31, v11);
  v20 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v18)(v19 + v15, v32, v34);
  *(_QWORD *)(v19 + v16) = v30;
  UUID.init()(v20);
  v21 = WorkItemQueue.WorkItem.__allocating_init(identifier:block:completion:)(v33, &unk_1010F3850, v17, &unk_1010F3860, v19);
  dispatch thunk of WorkItemQueue.enqueue(_:)(v21);
  swift_release();
  swift_task_dealloc(v1);
  swift_task_dealloc(v31);
  swift_task_dealloc(v4);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10022C334(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  v4 = sub_10001A9A8(&qword_1010F3830);
  v3[5] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[6] = v5;
  v6 = *(_QWORD *)(v5 + 64);
  v3[7] = v6;
  v3[8] = swift_task_alloc((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for MACAddress(0);
  v3[9] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v3[10] = v8;
  v9 = *(_QWORD *)(v8 + 64);
  v3[11] = v9;
  v3[12] = swift_task_alloc((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10022C3CC, 0, 0);
}

uint64_t sub_10022C3CC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v2 = v0[11];
  v1 = v0[12];
  v3 = v0[9];
  v4 = v0[10];
  v5 = v0[8];
  v17 = v0[7];
  v18 = v5;
  v6 = v0[5];
  v7 = v0[6];
  v8 = v0[3];
  v19 = v0[4];
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v4 + 16))(v1, v0[2], v3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v5, v8, v6);
  v9 = *(unsigned __int8 *)(v4 + 80);
  v10 = (v9 + 16) & ~v9;
  v11 = *(unsigned __int8 *)(v7 + 80);
  v12 = (v2 + v11 + v10) & ~v11;
  v13 = (v17 + v12 + 7) & 0xFFFFFFFFFFFFFFF8;
  v14 = swift_allocObject(&unk_10105FF48, v13 + 8, v9 | v11 | 7);
  v0[13] = v14;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v14 + v10, v1, v3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(v14 + v12, v18, v6);
  *(_QWORD *)(v14 + v13) = v19;
  v15 = (_QWORD *)swift_task_alloc(async function pointer to withTimeout<A>(_:block:)[1]);
  v0[14] = v15;
  *v15 = v0;
  v15[1] = sub_10022C51C;
  return withTimeout<A>(_:block:)(v15, 0x40AAD21B3B700000, 3, &unk_1010F3870, v14, &type metadata for () + 1);
}

uint64_t sub_10022C51C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 112);
  *(_QWORD *)(*(_QWORD *)v1 + 120) = v0;
  swift_task_dealloc(v2);
  if (v0)
  {
    v3 = sub_10022C5C8;
  }
  else
  {
    swift_release();
    v3 = sub_10022C588;
  }
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_10022C588()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 64);
  swift_task_dealloc(*(_QWORD *)(v0 + 96));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10022C5C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 96);
  v2 = *(_QWORD *)(v0 + 64);
  swift_release(*(_QWORD *)(v0 + 104));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10022C610(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4[15] = a3;
  v4[16] = a4;
  v4[14] = a2;
  v5 = (*(_QWORD *)(*(_QWORD *)(type metadata accessor for AccessoryMetadata(0) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v4[17] = swift_task_alloc(v5);
  v4[18] = swift_task_alloc(v5);
  v6 = type metadata accessor for CentralManager.State(0);
  v4[19] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v4[20] = v7;
  v4[21] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10001A9A8((uint64_t *)&unk_101116060);
  v4[22] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for MACAddress(0);
  v4[23] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v4[24] = v10;
  v4[25] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10022C6F0, 0, 0);
}

uint64_t sub_10022C6F0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  _BOOL4 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  if (qword_1010E9AB8 != -1)
    swift_once(&qword_1010E9AB8, sub_10022447C);
  v1 = v0[14];
  v3 = v0[24];
  v2 = v0[25];
  v4 = v0[23];
  v5 = type metadata accessor for Logger(0);
  v0[26] = sub_10001A9E8(v5, (uint64_t)qword_1010F3458);
  v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v0[27] = v6;
  v7 = v6(v2, v1, v4);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter(v8);
  v10 = os_log_type_enabled(v8, v9);
  v11 = v0[25];
  v12 = v0[23];
  if (v10)
  {
    v21 = v0[24];
    v13 = swift_slowAlloc(22, -1);
    v22 = swift_slowAlloc(64, -1);
    v23 = v22;
    *(_DWORD *)v13 = 136446466;
    v0[12] = sub_100016940(0xD000000000000026, 0x8000000100ECC060, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 12, v0 + 13, v13 + 4, v13 + 12);
    *(_WORD *)(v13 + 12) = 2082;
    v14 = sub_100006204((unint64_t *)&qword_1010FBAE0, (uint64_t (*)(uint64_t))&type metadata accessor for MACAddress, (uint64_t)&protocol conformance descriptor for MACAddress);
    v15 = dispatch thunk of CustomStringConvertible.description.getter(v12, v14);
    v0[13] = sub_100016940(v15, v16, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 13, v0 + 14, v13 + 14, v13 + 22);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v11, v12);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "%{public}s for address %{public}s", (uint8_t *)v13, 0x16u);
    swift_arrayDestroy(v22, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v22, -1, -1);
    swift_slowDealloc(v13, -1, -1);
  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v0[24] + 8))(v0[25], v0[23]);
  }

  v17 = v0[22];
  v0[28] = type metadata accessor for CentralManager(0);
  v18 = type metadata accessor for CentralManager.Options(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v17, 1, 1, v18);
  v19 = (_QWORD *)swift_task_alloc(async function pointer to CentralManager.__allocating_init(options:)[1]);
  v0[29] = v19;
  *v19 = v0;
  v19[1] = sub_10022C994;
  return CentralManager.__allocating_init(options:)(v0[22]);
}

uint64_t sub_10022C994(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 232);
  *(_QWORD *)(*(_QWORD *)v1 + 240) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10022C9F0, 0, 0);
}

uint64_t sub_10022C9F0()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;

  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0[20] + 104))(v0[21], enum case for CentralManager.State.poweredOn(_:), v0[19]);
  v1 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to CentralManagerProtocol.await(state:) + 1));
  v0[31] = v1;
  v2 = sub_100006204(&qword_1010EC468, (uint64_t (*)(uint64_t))&type metadata accessor for CentralManager, (uint64_t)&protocol conformance descriptor for CentralManager);
  *v1 = v0;
  v1[1] = sub_10022CA84;
  return CentralManagerProtocol.await(state:)(v0[21], v0[28], v2);
}

uint64_t sub_10022CA84()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v5;
  uint64_t (*v6)(_QWORD);

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 248);
  v3 = *(_QWORD **)v1;
  v3[32] = v0;
  swift_task_dealloc(v2);
  (*(void (**)(_QWORD, _QWORD))(v3[20] + 8))(v3[21], v3[19]);
  if (v0)
    return swift_task_switch(sub_10022D220, 0, 0);
  v6 = (uint64_t (*)(_QWORD))((char *)&async function pointer to dispatch thunk of CentralManager.retrievePeripheral(macAddress:)
                                      + async function pointer to dispatch thunk of CentralManager.retrievePeripheral(macAddress:));
  v5 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of CentralManager.retrievePeripheral(macAddress:)
                                  + 1));
  v3[33] = v5;
  *v5 = v3;
  v5[1] = sub_10022CB44;
  return v6(v3[14]);
}

uint64_t sub_10022CB44(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)();

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 264);
  *(_QWORD *)(v3 + 272) = a1;
  *(_QWORD *)(v3 + 280) = v1;
  swift_task_dealloc(v4);
  if (v1)
    v5 = sub_10022D294;
  else
    v5 = sub_10022CBB0;
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_10022CBB0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v24;
  uint64_t v25[2];

  v1 = *(_QWORD *)(v0 + 272);
  if (v1)
  {
    v2 = swift_retain_n(*(_QWORD *)(v0 + 272), 2);
    v3 = Logger.logObject.getter(v2);
    v4 = static os_log_type_t.default.getter(v3);
    if (os_log_type_enabled(v3, v4))
    {
      v5 = swift_slowAlloc(22, -1);
      v6 = swift_slowAlloc(64, -1);
      v25[0] = v6;
      *(_DWORD *)v5 = 136446466;
      *(_QWORD *)(v0 + 72) = sub_100016940(0xD000000000000026, 0x8000000100ECC060, v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 72, v0 + 80, v5 + 4, v5 + 12);
      *(_WORD *)(v5 + 12) = 2082;
      *(_QWORD *)(v0 + 80) = v1;
      v7 = type metadata accessor for Peripheral(0);
      v8 = sub_100006204(&qword_1010EC508, (uint64_t (*)(uint64_t))&type metadata accessor for Peripheral, (uint64_t)&protocol conformance descriptor for Peripheral);
      v9 = dispatch thunk of CustomStringConvertible.description.getter(v7, v8);
      *(_QWORD *)(v0 + 88) = sub_100016940(v9, v10, v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 88, v0 + 96, v5 + 14, v5 + 22);
      swift_bridgeObjectRelease();
      swift_release_n(v1, 2);
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "%{public}s Retrieved peripheral: %{public}s", (uint8_t *)v5, 0x16u);
      swift_arrayDestroy(v6, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v6, -1, -1);
      swift_slowDealloc(v5, -1, -1);
    }
    else
    {
      swift_release_n(v1, 2);
    }

    v24 = (_QWORD *)swift_task_alloc(dword_1010F387C);
    *(_QWORD *)(v0 + 288) = v24;
    *v24 = v0;
    v24[1] = sub_10022CE9C;
    return sub_10022D6CC(*(_QWORD *)(v0 + 144), v1);
  }
  else
  {
    v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 216);
    v12 = *(_QWORD *)(v0 + 184);
    v13 = *(_QWORD *)(v0 + 112);
    v14 = type metadata accessor for AccessoryMetadataManager.Error(0);
    v15 = sub_100006204(&qword_1010F37D8, type metadata accessor for AccessoryMetadataManager.Error, (uint64_t)&unk_100E2E588);
    swift_allocError(v14, v15, 0, 0);
    v17 = v16;
    v11(v16, v13, v12);
    v18 = swift_storeEnumTagMultiPayload(v17, v14, 1);
    swift_willThrow(v18);
    swift_release();
    v19 = *(_QWORD *)(v0 + 168);
    v20 = *(_QWORD *)(v0 + 176);
    v22 = *(_QWORD *)(v0 + 136);
    v21 = *(_QWORD *)(v0 + 144);
    swift_task_dealloc(*(_QWORD *)(v0 + 200));
    swift_task_dealloc(v20);
    swift_task_dealloc(v19);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_10022CE9C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t (*v6)(void);

  v2 = *(_QWORD *)(*v1 + 288);
  v3 = *v1;
  *(_QWORD *)(v3 + 296) = v0;
  swift_task_dealloc(v2);
  if (v0)
    return swift_task_switch(sub_10022D308, 0, 0);
  v6 = (uint64_t (*)(void))((char *)&async function pointer to dispatch thunk of Peripheral.cancelConnection()
                         + async function pointer to dispatch thunk of Peripheral.cancelConnection());
  v5 = (_QWORD *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of Peripheral.cancelConnection()
                                  + 1));
  *(_QWORD *)(v3 + 304) = v5;
  *v5 = v3;
  v5[1] = sub_10022CF44;
  return v6();
}

uint64_t sub_10022CF44()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 304);
  *(_QWORD *)(*(_QWORD *)v1 + 312) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_10022D388;
  else
    v3 = sub_10022CFA8;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_10022CFA8()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;

  v1 = swift_retain_n(*(_QWORD *)(v0 + 272), 2);
  v2 = Logger.logObject.getter(v1);
  v3 = static os_log_type_t.default.getter(v2);
  if (os_log_type_enabled(v2, v3))
  {
    v4 = *(_QWORD *)(v0 + 272);
    v5 = swift_slowAlloc(22, -1);
    v6 = swift_slowAlloc(64, -1);
    v19 = v6;
    *(_DWORD *)v5 = 136446466;
    *(_QWORD *)(v0 + 48) = sub_100016940(0xD000000000000026, 0x8000000100ECC060, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56, v5 + 4, v5 + 12);
    *(_WORD *)(v5 + 12) = 2082;
    *(_QWORD *)(v0 + 56) = v4;
    v7 = type metadata accessor for Peripheral(0);
    v8 = sub_100006204(&qword_1010EC508, (uint64_t (*)(uint64_t))&type metadata accessor for Peripheral, (uint64_t)&protocol conformance descriptor for Peripheral);
    v9 = dispatch thunk of CustomStringConvertible.description.getter(v7, v8);
    *(_QWORD *)(v0 + 64) = sub_100016940(v9, v10, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72, v5 + 14, v5 + 22);
    swift_bridgeObjectRelease();
    swift_release_n(v4, 2);
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%{public}s Disconnected from: %{public}s", (uint8_t *)v5, 0x16u);
    swift_arrayDestroy(v6, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);

  }
  else
  {
    v11 = *(_QWORD *)(v0 + 272);

    swift_release_n(v11, 2);
  }
  v12 = *(_QWORD *)(v0 + 200);
  v14 = *(_QWORD *)(v0 + 168);
  v13 = *(_QWORD *)(v0 + 176);
  v16 = *(_QWORD *)(v0 + 136);
  v15 = *(_QWORD *)(v0 + 144);
  sub_10005972C(v15, v16, type metadata accessor for AccessoryMetadata);
  v17 = sub_10001A9A8(&qword_1010F3830);
  CheckedContinuation.resume(returning:)(v16, v17);
  swift_release();
  swift_release();
  sub_1000126B0(v15, type metadata accessor for AccessoryMetadata);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10022D220()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  swift_release(*(_QWORD *)(v0 + 240));
  v2 = *(_QWORD *)(v0 + 168);
  v1 = *(_QWORD *)(v0 + 176);
  v4 = *(_QWORD *)(v0 + 136);
  v3 = *(_QWORD *)(v0 + 144);
  swift_task_dealloc(*(_QWORD *)(v0 + 200));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10022D294()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  swift_release(*(_QWORD *)(v0 + 240));
  v2 = *(_QWORD *)(v0 + 168);
  v1 = *(_QWORD *)(v0 + 176);
  v4 = *(_QWORD *)(v0 + 136);
  v3 = *(_QWORD *)(v0 + 144);
  swift_task_dealloc(*(_QWORD *)(v0 + 200));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10022D308()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 272);
  swift_release(*(_QWORD *)(v0 + 240));
  swift_release(v1);
  v3 = *(_QWORD *)(v0 + 168);
  v2 = *(_QWORD *)(v0 + 176);
  v5 = *(_QWORD *)(v0 + 136);
  v4 = *(_QWORD *)(v0 + 144);
  swift_task_dealloc(*(_QWORD *)(v0 + 200));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10022D388()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;

  v1 = *(_QWORD *)(v0 + 312);
  swift_retain();
  swift_errorRetain(v1);
  swift_retain();
  v2 = swift_errorRetain(v1);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = *(_QWORD *)(v0 + 312);
    v6 = *(_QWORD *)(v0 + 272);
    v7 = swift_slowAlloc(32, -1);
    v8 = (uint64_t *)swift_slowAlloc(8, -1);
    v24 = swift_slowAlloc(64, -1);
    v25 = v24;
    *(_DWORD *)v7 = 136446722;
    *(_QWORD *)(v0 + 16) = sub_100016940(0xD000000000000026, 0x8000000100ECC060, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v7 + 4, v7 + 12);
    *(_WORD *)(v7 + 12) = 2082;
    *(_QWORD *)(v0 + 24) = v6;
    v9 = type metadata accessor for Peripheral(0);
    v10 = sub_100006204(&qword_1010EC508, (uint64_t (*)(uint64_t))&type metadata accessor for Peripheral, (uint64_t)&protocol conformance descriptor for Peripheral);
    v11 = dispatch thunk of CustomStringConvertible.description.getter(v9, v10);
    *(_QWORD *)(v0 + 32) = sub_100016940(v11, v12, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v7 + 14, v7 + 22);
    swift_bridgeObjectRelease();
    swift_release_n(v6, 2);
    *(_WORD *)(v7 + 22) = 2114;
    swift_errorRetain(v5);
    v13 = _swift_stdlib_bridgeErrorToNSError(v5);
    *(_QWORD *)(v0 + 40) = v13;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v7 + 24, v7 + 32);
    *v8 = v13;
    swift_errorRelease(v5);
    swift_errorRelease(v5);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "%{public}s Error disconnecting from: %{public}s %{public}@", (uint8_t *)v7, 0x20u);
    v14 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v8, 1, v14);
    swift_slowDealloc(v8, -1, -1);
    swift_arrayDestroy(v24, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v24, -1, -1);
    swift_slowDealloc(v7, -1, -1);

    swift_errorRelease(v5);
  }
  else
  {
    v15 = *(_QWORD *)(v0 + 312);
    v16 = *(_QWORD *)(v0 + 272);
    swift_errorRelease(v15);
    swift_release_n(v16, 2);
    swift_errorRelease(v15);
    swift_errorRelease(v15);

  }
  v17 = *(_QWORD *)(v0 + 200);
  v19 = *(_QWORD *)(v0 + 168);
  v18 = *(_QWORD *)(v0 + 176);
  v21 = *(_QWORD *)(v0 + 136);
  v20 = *(_QWORD *)(v0 + 144);
  sub_10005972C(v20, v21, type metadata accessor for AccessoryMetadata);
  v22 = sub_10001A9A8(&qword_1010F3830);
  CheckedContinuation.resume(returning:)(v21, v22);
  swift_release();
  swift_release();
  sub_1000126B0(v20, type metadata accessor for AccessoryMetadata);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10022D6CC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;

  v3[214] = v2;
  v3[213] = a2;
  v3[212] = a1;
  v4 = type metadata accessor for UUID(0);
  v3[215] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10001A9A8(&qword_1010EF7C0);
  v3[216] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v3[217] = v6;
  v3[218] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10001A9A8((uint64_t *)&unk_101115F50);
  v3[219] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v3[220] = v8;
  v3[221] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10001A9A8(&qword_1010EC448);
  v3[222] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v3[223] = v10;
  v3[224] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Logger(0);
  v3[225] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v3[226] = v12;
  v13 = (*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[227] = swift_task_alloc(v13);
  v3[228] = swift_task_alloc(v13);
  v3[229] = swift_task_alloc(v13);
  v3[230] = swift_task_alloc(v13);
  v3[231] = swift_task_alloc(v13);
  v3[232] = swift_task_alloc(v13);
  v3[233] = swift_task_alloc(v13);
  v3[234] = swift_task_alloc(v13);
  v3[235] = swift_task_alloc(v13);
  v3[236] = swift_task_alloc(v13);
  v3[237] = swift_task_alloc(v13);
  v3[238] = swift_task_alloc(v13);
  v3[239] = swift_task_alloc(v13);
  v3[240] = swift_task_alloc(v13);
  v3[241] = swift_task_alloc(v13);
  v3[242] = swift_task_alloc(v13);
  v3[243] = swift_task_alloc(v13);
  v3[244] = swift_task_alloc(v13);
  v3[245] = swift_task_alloc(v13);
  v3[246] = swift_task_alloc(v13);
  v3[247] = swift_task_alloc(v13);
  v3[248] = swift_task_alloc(v13);
  v3[249] = swift_task_alloc(v13);
  v3[250] = swift_task_alloc(v13);
  v14 = type metadata accessor for Peripheral(0);
  v3[251] = v14;
  v15 = sub_100006204(&qword_1010EC4A0, (uint64_t (*)(uint64_t))&type metadata accessor for Peripheral, (uint64_t)&protocol conformance descriptor for Peripheral);
  v3[252] = v15;
  v16 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of PeripheralProtocol.connect()[1]);
  v3[253] = v16;
  *v16 = v3;
  v16[1] = sub_10022D950;
  return dispatch thunk of PeripheralProtocol.connect()(v14, v15);
}

uint64_t sub_10022D950()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 2024);
  *(_QWORD *)(*(_QWORD *)v1 + 2032) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_10022DE38;
  else
    v3 = sub_10022D9B4;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_10022D9B4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  os_log_type_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint8_t *v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, uint64_t);
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  os_log_type_t v31;
  NSObject *log;
  uint8_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)();
  uint64_t v37;

  v1 = v0[250];
  v2 = v0[226];
  v3 = v0[225];
  v4 = v0[213];
  v5 = sub_10022450C();
  v0[255] = v5;
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16);
  v0[256] = v6;
  v6(v1, v5, v3);
  v7 = swift_allocObject(&unk_101060330, 32, 7);
  *(_QWORD *)(v7 + 16) = sub_100243954;
  *(_QWORD *)(v7 + 24) = v4;
  v8 = swift_retain();
  log = Logger.logObject.getter(v8);
  LOBYTE(v4) = static os_log_type_t.default.getter(log);
  v9 = swift_allocObject(&unk_101060358, 17, 7);
  *(_BYTE *)(v9 + 16) = 34;
  v10 = swift_allocObject(&unk_101060380, 17, 7);
  *(_BYTE *)(v10 + 16) = 8;
  v11 = swift_allocObject(&unk_1010603A8, 17, 7);
  *(_BYTE *)(v11 + 16) = 34;
  v12 = swift_allocObject(&unk_1010603D0, 17, 7);
  *(_BYTE *)(v12 + 16) = 8;
  v13 = v4;
  v14 = swift_allocObject(&unk_1010603F8, 32, 7);
  *(_QWORD *)(v14 + 16) = sub_100245488;
  *(_QWORD *)(v14 + 24) = v7;
  v15 = swift_allocObject(&unk_101060420, 32, 7);
  *(_QWORD *)(v15 + 16) = sub_10005CBA4;
  *(_QWORD *)(v15 + 24) = v14;
  v16 = sub_10001A9A8(&qword_1010EC538);
  v0[257] = v16;
  v17 = swift_allocObject(v16, 128, 7);
  sub_100882D28(v17, 6);
  *v18 = sub_10005CBC4;
  v18[1] = v9;
  v18[2] = sub_10005CBC4;
  v18[3] = v10;
  v18[4] = sub_100243220;
  v18[5] = 0;
  v18[6] = sub_10005CBC4;
  v18[7] = v11;
  v18[8] = sub_10005CBC4;
  v18[9] = v12;
  v18[10] = sub_10005CBB4;
  v18[11] = v15;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(log, v13))
  {
    v31 = v13;
    v19 = v0[254];
    v20 = (uint8_t *)sub_1006948A0(22);
    v34 = 0;
    v35 = swift_slowAlloc(64, -1);
    v30 = v35;
    *(_WORD *)v20 = 514;
    v33 = v20 + 2;
    v36 = sub_10005CBC4;
    v37 = v9;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v36, (uint64_t)&v33, (uint64_t)&v34, (uint64_t)&v35);
    if (v19)
      return swift_errorRelease(v19);
    swift_release();
    v36 = sub_10005CBC4;
    v37 = v10;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v36, (uint64_t)&v33, (uint64_t)&v34, (uint64_t)&v35);
    swift_release();
    v36 = sub_100243220;
    v37 = 0;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v36, (uint64_t)&v33, (uint64_t)&v34, (uint64_t)&v35);
    v36 = sub_10005CBC4;
    v37 = v11;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v36, (uint64_t)&v33, (uint64_t)&v34, (uint64_t)&v35);
    swift_release();
    v36 = sub_10005CBC4;
    v37 = v12;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v36, (uint64_t)&v33, (uint64_t)&v34, (uint64_t)&v35);
    swift_release();
    v36 = sub_10005CBB4;
    v37 = v15;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v36, (uint64_t)&v33, (uint64_t)&v34, (uint64_t)&v35);
    v27 = v0[250];
    v28 = v0[226];
    v29 = v0[225];
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, log, v31, "%{public}s Connected to: %{public}s", v20, 0x16u);
    swift_arrayDestroy(v30, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v30, -1, -1);
    sub_100694894((uint64_t)v20);

    v25 = *(void (**)(uint64_t, uint64_t))(v28 + 8);
    v25(v27, v29);
  }
  else
  {
    v22 = v0[250];
    v23 = v0[226];
    v24 = v0[225];
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();

    v25 = *(void (**)(uint64_t, uint64_t))(v23 + 8);
    v25(v22, v24);
  }
  v0[258] = v25;
  sub_100AC157C();
  v26 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of PeripheralProtocol.subscript.getter[1]);
  v0[259] = v26;
  *v26 = v0;
  v26[1] = sub_10022E4E0;
  return dispatch thunk of PeripheralProtocol.subscript.getter(v0[224], v0[251], v0[252]);
}

uint64_t sub_10022DE38()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(uint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;
  NSObject *oslog;
  os_log_type_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint8_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t (*v50)();
  uint64_t v51;

  v1 = v0[254];
  v0[303] = v1;
  v2 = v0[238];
  v3 = v0[226];
  v4 = v0[225];
  v5 = v0[213];
  v6 = sub_10022450C();
  v0[304] = v6;
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v0[305] = v7;
  v7(v2, v6, v4);
  v8 = swift_allocObject(&unk_10105FF70, 32, 7);
  *(_QWORD *)(v8 + 16) = sub_100243954;
  *(_QWORD *)(v8 + 24) = v5;
  v45 = swift_allocObject(&unk_10105FF98, 24, 7);
  *(_QWORD *)(v45 + 16) = v1;
  swift_retain();
  v9 = swift_errorRetain(v1);
  oslog = Logger.logObject.getter(v9);
  v43 = static os_log_type_t.error.getter(oslog);
  v10 = swift_allocObject(&unk_10105FFC0, 17, 7);
  *(_BYTE *)(v10 + 16) = 34;
  v11 = swift_allocObject(&unk_10105FFE8, 17, 7);
  *(_BYTE *)(v11 + 16) = 8;
  v12 = swift_allocObject(&unk_101060010, 17, 7);
  *(_BYTE *)(v12 + 16) = 34;
  v13 = swift_allocObject(&unk_101060038, 17, 7);
  *(_BYTE *)(v13 + 16) = 8;
  v14 = swift_allocObject(&unk_101060060, 32, 7);
  *(_QWORD *)(v14 + 16) = sub_100243990;
  *(_QWORD *)(v14 + 24) = v8;
  v15 = swift_allocObject(&unk_101060088, 32, 7);
  *(_QWORD *)(v15 + 16) = sub_10001D850;
  *(_QWORD *)(v15 + 24) = v14;
  v16 = swift_allocObject(&unk_1010600B0, 17, 7);
  *(_BYTE *)(v16 + 16) = 66;
  v17 = swift_allocObject(&unk_1010600D8, 17, 7);
  *(_BYTE *)(v17 + 16) = 8;
  v18 = swift_allocObject(&unk_101060100, 32, 7);
  *(_QWORD *)(v18 + 16) = sub_100245648;
  *(_QWORD *)(v18 + 24) = v45;
  v19 = swift_allocObject(&unk_101060128, 32, 7);
  *(_QWORD *)(v19 + 16) = sub_10005859C;
  *(_QWORD *)(v19 + 24) = v18;
  v20 = swift_allocObject(&unk_101060150, 32, 7);
  *(_QWORD *)(v20 + 16) = sub_10001D850;
  *(_QWORD *)(v20 + 24) = v19;
  v21 = sub_10001A9A8(&qword_1010EC538);
  v0[306] = v21;
  v22 = swift_allocObject(v21, 176, 7);
  sub_100882D28(v22, 9);
  *v23 = sub_100057E50;
  v23[1] = v10;
  v23[2] = sub_10005CBC4;
  v23[3] = v11;
  v23[4] = sub_100243220;
  v23[5] = 0;
  v23[6] = sub_10005CBC4;
  v23[7] = v12;
  v23[8] = sub_10005CBC4;
  v23[9] = v13;
  v23[10] = sub_100057E68;
  v23[11] = v15;
  v23[12] = sub_10005CBC4;
  v23[13] = v16;
  v23[14] = sub_10005CBC4;
  v23[15] = v17;
  v23[16] = sub_1000585A4;
  v23[17] = v20;
  v46 = v10;
  swift_retain();
  swift_retain();
  v24 = v12;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(oslog, v43))
  {
    v25 = v11;
    v26 = v24;
    v40 = v16;
    v41 = v15;
    v27 = (uint8_t *)sub_1006948A0(32);
    v28 = swift_slowAlloc(8, -1);
    v29 = swift_slowAlloc(64, -1);
    v48 = v28;
    v49 = v29;
    *(_WORD *)v27 = 770;
    v47 = v27 + 2;
    v50 = (uint64_t (*)())sub_100057E50;
    v51 = v46;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v50, (uint64_t)&v47, (uint64_t)&v48, (uint64_t)&v49);
    swift_release();
    v50 = sub_10005CBC4;
    v51 = v25;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v50, (uint64_t)&v47, (uint64_t)&v48, (uint64_t)&v49);
    swift_release();
    v50 = sub_100243220;
    v51 = 0;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v50, (uint64_t)&v47, (uint64_t)&v48, (uint64_t)&v49);
    v50 = sub_10005CBC4;
    v51 = v26;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v50, (uint64_t)&v47, (uint64_t)&v48, (uint64_t)&v49);
    swift_release();
    v50 = sub_10005CBC4;
    v51 = v13;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v50, (uint64_t)&v47, (uint64_t)&v48, (uint64_t)&v49);
    swift_release();
    v50 = (uint64_t (*)())sub_100057E68;
    v51 = v41;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v50, (uint64_t)&v47, (uint64_t)&v48, (uint64_t)&v49);
    swift_release();
    v50 = sub_10005CBC4;
    v51 = v40;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v50, (uint64_t)&v47, (uint64_t)&v48, (uint64_t)&v49);
    swift_release();
    v50 = sub_10005CBC4;
    v51 = v17;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v50, (uint64_t)&v47, (uint64_t)&v48, (uint64_t)&v49);
    swift_release();
    v50 = (uint64_t (*)())sub_1000585A4;
    v51 = v20;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v50, (uint64_t)&v47, (uint64_t)&v48, (uint64_t)&v49);
    v34 = v0[238];
    v35 = v0[226];
    v36 = v28;
    v37 = v0[225];
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, oslog, v43, "%{public}s %{public}s Error %{public}@", v27, 0x20u);
    v38 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v36, 1, v38);
    swift_slowDealloc(v36, -1, -1);
    swift_arrayDestroy(v29, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v29, -1, -1);
    sub_100694894((uint64_t)v27);

    v39 = *(void (**)(uint64_t, uint64_t))(v35 + 8);
    v39(v34, v37);
  }
  else
  {
    v44 = v0[238];
    v30 = v0[226];
    v31 = v0[225];
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();

    v39 = *(void (**)(uint64_t, uint64_t))(v30 + 8);
    v39(v44, v31);
  }
  v0[307] = v39;
  v32 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of PeripheralProtocol.cancelConnection()[1]);
  v0[308] = v32;
  *v32 = v0;
  v32[1] = sub_10023ED18;
  return dispatch thunk of PeripheralProtocol.cancelConnection()(v0[251], v0[252]);
}

uint64_t sub_10022E4E0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t (*v5)();

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 2072);
  v3[260] = a1;
  v3[261] = v1;
  swift_task_dealloc(v4);
  (*(void (**)(_QWORD, _QWORD))(v3[223] + 8))(v3[224], v3[222]);
  if (v1)
    v5 = sub_10022E680;
  else
    v5 = sub_10022E564;
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_10022E564()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  sub_100AC15BC();
  v1 = type metadata accessor for Service(0);
  v2 = sub_100006204(&qword_1010EC4A8, (uint64_t (*)(uint64_t))&type metadata accessor for Service, (uint64_t)&protocol conformance descriptor for Service);
  v3 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of ServiceProtocol.subscript.getter[1]);
  *(_QWORD *)(v0 + 2096) = v3;
  *v3 = v0;
  v3[1] = sub_10022E5FC;
  return dispatch thunk of ServiceProtocol.subscript.getter(*(_QWORD *)(v0 + 1768), v1, v2);
}

uint64_t sub_10022E5FC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t (*v5)();

  v3 = *(_QWORD **)v2;
  v4 = *(_QWORD *)(*(_QWORD *)v2 + 2096);
  v3[263] = a1;
  v3[264] = v1;
  swift_task_dealloc(v4);
  (*(void (**)(_QWORD, _QWORD))(v3[220] + 8))(v3[221], v3[219]);
  if (v1)
    v5 = sub_10022EE50;
  else
    v5 = sub_10022ED28;
  return swift_task_switch(v5, 0, 0);
}

uint64_t sub_10022E680()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(uint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;
  NSObject *oslog;
  os_log_type_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint8_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t (*v50)();
  uint64_t v51;

  v1 = v0[261];
  v0[303] = v1;
  v2 = v0[238];
  v3 = v0[226];
  v4 = v0[225];
  v5 = v0[213];
  v6 = sub_10022450C();
  v0[304] = v6;
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v0[305] = v7;
  v7(v2, v6, v4);
  v8 = swift_allocObject(&unk_10105FF70, 32, 7);
  *(_QWORD *)(v8 + 16) = sub_100243954;
  *(_QWORD *)(v8 + 24) = v5;
  v45 = swift_allocObject(&unk_10105FF98, 24, 7);
  *(_QWORD *)(v45 + 16) = v1;
  swift_retain();
  v9 = swift_errorRetain(v1);
  oslog = Logger.logObject.getter(v9);
  v43 = static os_log_type_t.error.getter(oslog);
  v10 = swift_allocObject(&unk_10105FFC0, 17, 7);
  *(_BYTE *)(v10 + 16) = 34;
  v11 = swift_allocObject(&unk_10105FFE8, 17, 7);
  *(_BYTE *)(v11 + 16) = 8;
  v12 = swift_allocObject(&unk_101060010, 17, 7);
  *(_BYTE *)(v12 + 16) = 34;
  v13 = swift_allocObject(&unk_101060038, 17, 7);
  *(_BYTE *)(v13 + 16) = 8;
  v14 = swift_allocObject(&unk_101060060, 32, 7);
  *(_QWORD *)(v14 + 16) = sub_100243990;
  *(_QWORD *)(v14 + 24) = v8;
  v15 = swift_allocObject(&unk_101060088, 32, 7);
  *(_QWORD *)(v15 + 16) = sub_10001D850;
  *(_QWORD *)(v15 + 24) = v14;
  v16 = swift_allocObject(&unk_1010600B0, 17, 7);
  *(_BYTE *)(v16 + 16) = 66;
  v17 = swift_allocObject(&unk_1010600D8, 17, 7);
  *(_BYTE *)(v17 + 16) = 8;
  v18 = swift_allocObject(&unk_101060100, 32, 7);
  *(_QWORD *)(v18 + 16) = sub_100245648;
  *(_QWORD *)(v18 + 24) = v45;
  v19 = swift_allocObject(&unk_101060128, 32, 7);
  *(_QWORD *)(v19 + 16) = sub_10005859C;
  *(_QWORD *)(v19 + 24) = v18;
  v20 = swift_allocObject(&unk_101060150, 32, 7);
  *(_QWORD *)(v20 + 16) = sub_10001D850;
  *(_QWORD *)(v20 + 24) = v19;
  v21 = sub_10001A9A8(&qword_1010EC538);
  v0[306] = v21;
  v22 = swift_allocObject(v21, 176, 7);
  sub_100882D28(v22, 9);
  *v23 = sub_100057E50;
  v23[1] = v10;
  v23[2] = sub_10005CBC4;
  v23[3] = v11;
  v23[4] = sub_100243220;
  v23[5] = 0;
  v23[6] = sub_10005CBC4;
  v23[7] = v12;
  v23[8] = sub_10005CBC4;
  v23[9] = v13;
  v23[10] = sub_100057E68;
  v23[11] = v15;
  v23[12] = sub_10005CBC4;
  v23[13] = v16;
  v23[14] = sub_10005CBC4;
  v23[15] = v17;
  v23[16] = sub_1000585A4;
  v23[17] = v20;
  v46 = v10;
  swift_retain();
  swift_retain();
  v24 = v12;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(oslog, v43))
  {
    v25 = v11;
    v26 = v24;
    v40 = v16;
    v41 = v15;
    v27 = (uint8_t *)sub_1006948A0(32);
    v28 = swift_slowAlloc(8, -1);
    v29 = swift_slowAlloc(64, -1);
    v48 = v28;
    v49 = v29;
    *(_WORD *)v27 = 770;
    v47 = v27 + 2;
    v50 = (uint64_t (*)())sub_100057E50;
    v51 = v46;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v50, (uint64_t)&v47, (uint64_t)&v48, (uint64_t)&v49);
    swift_release();
    v50 = sub_10005CBC4;
    v51 = v25;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v50, (uint64_t)&v47, (uint64_t)&v48, (uint64_t)&v49);
    swift_release();
    v50 = sub_100243220;
    v51 = 0;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v50, (uint64_t)&v47, (uint64_t)&v48, (uint64_t)&v49);
    v50 = sub_10005CBC4;
    v51 = v26;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v50, (uint64_t)&v47, (uint64_t)&v48, (uint64_t)&v49);
    swift_release();
    v50 = sub_10005CBC4;
    v51 = v13;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v50, (uint64_t)&v47, (uint64_t)&v48, (uint64_t)&v49);
    swift_release();
    v50 = (uint64_t (*)())sub_100057E68;
    v51 = v41;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v50, (uint64_t)&v47, (uint64_t)&v48, (uint64_t)&v49);
    swift_release();
    v50 = sub_10005CBC4;
    v51 = v40;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v50, (uint64_t)&v47, (uint64_t)&v48, (uint64_t)&v49);
    swift_release();
    v50 = sub_10005CBC4;
    v51 = v17;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v50, (uint64_t)&v47, (uint64_t)&v48, (uint64_t)&v49);
    swift_release();
    v50 = (uint64_t (*)())sub_1000585A4;
    v51 = v20;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v50, (uint64_t)&v47, (uint64_t)&v48, (uint64_t)&v49);
    v34 = v0[238];
    v35 = v0[226];
    v36 = v28;
    v37 = v0[225];
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, oslog, v43, "%{public}s %{public}s Error %{public}@", v27, 0x20u);
    v38 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v36, 1, v38);
    swift_slowDealloc(v36, -1, -1);
    swift_arrayDestroy(v29, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v29, -1, -1);
    sub_100694894((uint64_t)v27);

    v39 = *(void (**)(uint64_t, uint64_t))(v35 + 8);
    v39(v34, v37);
  }
  else
  {
    v44 = v0[238];
    v30 = v0[226];
    v31 = v0[225];
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();

    v39 = *(void (**)(uint64_t, uint64_t))(v30 + 8);
    v39(v44, v31);
  }
  v0[307] = v39;
  v32 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of PeripheralProtocol.cancelConnection()[1]);
  v0[308] = v32;
  *v32 = v0;
  v32[1] = sub_10023ED18;
  return dispatch thunk of PeripheralProtocol.cancelConnection()(v0[251], v0[252]);
}

uint64_t sub_10022ED28()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  _QWORD *v3;

  *(_QWORD *)(v0 + 88) = &type metadata for PoshAccessoryNonOwnerCommand;
  v1 = sub_100243A9C();
  *(_QWORD *)(v0 + 2120) = v1;
  *(_QWORD *)(v0 + 96) = v1;
  v2 = sub_100243AE0();
  *(_QWORD *)(v0 + 2128) = v2;
  *(_QWORD *)(v0 + 104) = v2;
  *(_QWORD *)(v0 + 72) = 0;
  *(_QWORD *)(v0 + 64) = 0;
  *(_BYTE *)(v0 + 80) = 10;
  v3 = (_QWORD *)swift_task_alloc(dword_1010F3894);
  *(_QWORD *)(v0 + 2136) = v3;
  *v3 = v0;
  v3[1] = sub_10022EDE4;
  return sub_10023FD28(v0 + 16, *(_QWORD *)(v0 + 2104), v0 + 64, (uint64_t)&type metadata for PoshAccessoryNonOwnerCommand, v1, v2, 0);
}

uint64_t sub_10022EDE4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 2136);
  *(_QWORD *)(*v1 + 2144) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_1002302AC;
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v2 + 64));
    v4 = sub_10022F500;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_10022EE50()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(uint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;
  NSObject *oslog;
  os_log_type_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint8_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t (*v50)();
  uint64_t v51;

  swift_release();
  v1 = v0[264];
  v0[303] = v1;
  v2 = v0[238];
  v3 = v0[226];
  v4 = v0[225];
  v5 = v0[213];
  v6 = sub_10022450C();
  v0[304] = v6;
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v0[305] = v7;
  v7(v2, v6, v4);
  v8 = swift_allocObject(&unk_10105FF70, 32, 7);
  *(_QWORD *)(v8 + 16) = sub_100243954;
  *(_QWORD *)(v8 + 24) = v5;
  v45 = swift_allocObject(&unk_10105FF98, 24, 7);
  *(_QWORD *)(v45 + 16) = v1;
  swift_retain();
  v9 = swift_errorRetain(v1);
  oslog = Logger.logObject.getter(v9);
  v43 = static os_log_type_t.error.getter(oslog);
  v10 = swift_allocObject(&unk_10105FFC0, 17, 7);
  *(_BYTE *)(v10 + 16) = 34;
  v11 = swift_allocObject(&unk_10105FFE8, 17, 7);
  *(_BYTE *)(v11 + 16) = 8;
  v12 = swift_allocObject(&unk_101060010, 17, 7);
  *(_BYTE *)(v12 + 16) = 34;
  v13 = swift_allocObject(&unk_101060038, 17, 7);
  *(_BYTE *)(v13 + 16) = 8;
  v14 = swift_allocObject(&unk_101060060, 32, 7);
  *(_QWORD *)(v14 + 16) = sub_100243990;
  *(_QWORD *)(v14 + 24) = v8;
  v15 = swift_allocObject(&unk_101060088, 32, 7);
  *(_QWORD *)(v15 + 16) = sub_10001D850;
  *(_QWORD *)(v15 + 24) = v14;
  v16 = swift_allocObject(&unk_1010600B0, 17, 7);
  *(_BYTE *)(v16 + 16) = 66;
  v17 = swift_allocObject(&unk_1010600D8, 17, 7);
  *(_BYTE *)(v17 + 16) = 8;
  v18 = swift_allocObject(&unk_101060100, 32, 7);
  *(_QWORD *)(v18 + 16) = sub_100245648;
  *(_QWORD *)(v18 + 24) = v45;
  v19 = swift_allocObject(&unk_101060128, 32, 7);
  *(_QWORD *)(v19 + 16) = sub_10005859C;
  *(_QWORD *)(v19 + 24) = v18;
  v20 = swift_allocObject(&unk_101060150, 32, 7);
  *(_QWORD *)(v20 + 16) = sub_10001D850;
  *(_QWORD *)(v20 + 24) = v19;
  v21 = sub_10001A9A8(&qword_1010EC538);
  v0[306] = v21;
  v22 = swift_allocObject(v21, 176, 7);
  sub_100882D28(v22, 9);
  *v23 = sub_100057E50;
  v23[1] = v10;
  v23[2] = sub_10005CBC4;
  v23[3] = v11;
  v23[4] = sub_100243220;
  v23[5] = 0;
  v23[6] = sub_10005CBC4;
  v23[7] = v12;
  v23[8] = sub_10005CBC4;
  v23[9] = v13;
  v23[10] = sub_100057E68;
  v23[11] = v15;
  v23[12] = sub_10005CBC4;
  v23[13] = v16;
  v23[14] = sub_10005CBC4;
  v23[15] = v17;
  v23[16] = sub_1000585A4;
  v23[17] = v20;
  v46 = v10;
  swift_retain();
  swift_retain();
  v24 = v12;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(oslog, v43))
  {
    v25 = v11;
    v26 = v24;
    v40 = v16;
    v41 = v15;
    v27 = (uint8_t *)sub_1006948A0(32);
    v28 = swift_slowAlloc(8, -1);
    v29 = swift_slowAlloc(64, -1);
    v48 = v28;
    v49 = v29;
    *(_WORD *)v27 = 770;
    v47 = v27 + 2;
    v50 = (uint64_t (*)())sub_100057E50;
    v51 = v46;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v50, (uint64_t)&v47, (uint64_t)&v48, (uint64_t)&v49);
    swift_release();
    v50 = sub_10005CBC4;
    v51 = v25;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v50, (uint64_t)&v47, (uint64_t)&v48, (uint64_t)&v49);
    swift_release();
    v50 = sub_100243220;
    v51 = 0;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v50, (uint64_t)&v47, (uint64_t)&v48, (uint64_t)&v49);
    v50 = sub_10005CBC4;
    v51 = v26;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v50, (uint64_t)&v47, (uint64_t)&v48, (uint64_t)&v49);
    swift_release();
    v50 = sub_10005CBC4;
    v51 = v13;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v50, (uint64_t)&v47, (uint64_t)&v48, (uint64_t)&v49);
    swift_release();
    v50 = (uint64_t (*)())sub_100057E68;
    v51 = v41;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v50, (uint64_t)&v47, (uint64_t)&v48, (uint64_t)&v49);
    swift_release();
    v50 = sub_10005CBC4;
    v51 = v40;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v50, (uint64_t)&v47, (uint64_t)&v48, (uint64_t)&v49);
    swift_release();
    v50 = sub_10005CBC4;
    v51 = v17;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v50, (uint64_t)&v47, (uint64_t)&v48, (uint64_t)&v49);
    swift_release();
    v50 = (uint64_t (*)())sub_1000585A4;
    v51 = v20;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v50, (uint64_t)&v47, (uint64_t)&v48, (uint64_t)&v49);
    v34 = v0[238];
    v35 = v0[226];
    v36 = v28;
    v37 = v0[225];
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, oslog, v43, "%{public}s %{public}s Error %{public}@", v27, 0x20u);
    v38 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v36, 1, v38);
    swift_slowDealloc(v36, -1, -1);
    swift_arrayDestroy(v29, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v29, -1, -1);
    sub_100694894((uint64_t)v27);

    v39 = *(void (**)(uint64_t, uint64_t))(v35 + 8);
    v39(v34, v37);
  }
  else
  {
    v44 = v0[238];
    v30 = v0[226];
    v31 = v0[225];
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();

    v39 = *(void (**)(uint64_t, uint64_t))(v30 + 8);
    v39(v44, v31);
  }
  v0[307] = v39;
  v32 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of PeripheralProtocol.cancelConnection()[1]);
  v0[308] = v32;
  *v32 = v0;
  v32[1] = sub_10023ED18;
  return dispatch thunk of PeripheralProtocol.cancelConnection()(v0[251], v0[252]);
}

uint64_t sub_10022F500()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  _QWORD *v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint8_t *v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint8_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(uint64_t, uint64_t);
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  os_log_type_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  uint8_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  void (*v79)(uint64_t, uint64_t);
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  NSObject *oslog;
  os_log_t osloga;
  os_log_type_t v87;
  uint64_t v88;
  NSObject *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  os_log_type_t v93;
  void (*v94)(uint64_t, uint64_t);
  uint8_t *v95;
  uint8_t *v96;
  uint64_t v97;
  uint64_t (*v98)();
  uint64_t v99;

  sub_100057DB8(v0 + 16, v0 + 112);
  v1 = sub_10001A9A8(&qword_1010EC530);
  *(_QWORD *)(v0 + 2152) = v1;
  if (!swift_dynamicCast(v0 + 1648, v0 + 112, v1, &type metadata for PoshAccessoryNonOwnerCommand, 6))
  {
LABEL_4:
    v4 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v0 + 2048))(*(_QWORD *)(v0 + 1816), *(_QWORD *)(v0 + 2040), *(_QWORD *)(v0 + 1800));
    v5 = Logger.logObject.getter(v4);
    v6 = static os_log_type_t.error.getter(v5);
    v7 = sub_100BD13F8(0);
    if (os_log_type_enabled(v5, v6))
    {
      v8 = *(void (**)(uint64_t, uint64_t))(v0 + 2064);
      v9 = *(_QWORD *)(v0 + 1816);
      v10 = *(_QWORD *)(v0 + 1800);
      v11 = (uint8_t *)sub_1006948A0(2);
      v97 = 0;
      v98 = 0;
      *(_WORD *)v11 = 0;
      v96 = v11 + 2;
      sub_100A3DD1C((uint64_t)v7, (uint64_t)&v96, (uint64_t)&v97, (uint64_t)&v98);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Invalid productDataResponse!", v11, 2u);
      sub_100694894((uint64_t)v11);

      v8(v9, v10);
    }
    else
    {
      v12 = *(void (**)(uint64_t, uint64_t))(v0 + 2064);
      v13 = *(_QWORD *)(v0 + 1816);
      v14 = *(_QWORD *)(v0 + 1800);
      swift_bridgeObjectRelease();

      v12(v13, v14);
    }
    v15 = type metadata accessor for AccessoryMetadataManager.Error(0);
    v16 = sub_100006204(&qword_1010F37D8, type metadata accessor for AccessoryMetadataManager.Error, (uint64_t)&unk_100E2E588);
    v17 = swift_allocError(v15, v16, 0, 0);
    v19 = swift_storeEnumTagMultiPayload(v18, v15, 7);
    swift_willThrow(v19);
    swift_release();
    swift_release();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
    *(_QWORD *)(v0 + 2424) = v17;
    v20 = *(_QWORD *)(v0 + 1904);
    v21 = *(_QWORD *)(v0 + 1808);
    v22 = *(_QWORD *)(v0 + 1800);
    v23 = *(_QWORD *)(v0 + 1704);
    v24 = sub_10022450C();
    *(_QWORD *)(v0 + 2432) = v24;
    v25 = *(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 16);
    *(_QWORD *)(v0 + 2440) = v25;
    v25(v20, v24, v22);
    v26 = swift_allocObject(&unk_10105FF70, 32, 7);
    *(_QWORD *)(v26 + 16) = sub_100243954;
    *(_QWORD *)(v26 + 24) = v23;
    v90 = swift_allocObject(&unk_10105FF98, 24, 7);
    *(_QWORD *)(v90 + 16) = v17;
    swift_retain();
    v27 = swift_errorRetain(v17);
    oslog = Logger.logObject.getter(v27);
    v87 = static os_log_type_t.error.getter(oslog);
    v28 = swift_allocObject(&unk_10105FFC0, 17, 7);
    *(_BYTE *)(v28 + 16) = 34;
    v29 = swift_allocObject(&unk_10105FFE8, 17, 7);
    *(_BYTE *)(v29 + 16) = 8;
    v30 = swift_allocObject(&unk_101060010, 17, 7);
    *(_BYTE *)(v30 + 16) = 34;
    v31 = swift_allocObject(&unk_101060038, 17, 7);
    *(_BYTE *)(v31 + 16) = 8;
    v32 = swift_allocObject(&unk_101060060, 32, 7);
    *(_QWORD *)(v32 + 16) = sub_100243990;
    *(_QWORD *)(v32 + 24) = v26;
    v33 = swift_allocObject(&unk_101060088, 32, 7);
    *(_QWORD *)(v33 + 16) = sub_10001D850;
    *(_QWORD *)(v33 + 24) = v32;
    v34 = swift_allocObject(&unk_1010600B0, 17, 7);
    *(_BYTE *)(v34 + 16) = 66;
    v35 = swift_allocObject(&unk_1010600D8, 17, 7);
    *(_BYTE *)(v35 + 16) = 8;
    v36 = swift_allocObject(&unk_101060100, 32, 7);
    *(_QWORD *)(v36 + 16) = sub_100245648;
    *(_QWORD *)(v36 + 24) = v90;
    v37 = swift_allocObject(&unk_101060128, 32, 7);
    *(_QWORD *)(v37 + 16) = sub_10005859C;
    *(_QWORD *)(v37 + 24) = v36;
    v38 = swift_allocObject(&unk_101060150, 32, 7);
    *(_QWORD *)(v38 + 16) = sub_10001D850;
    *(_QWORD *)(v38 + 24) = v37;
    v39 = sub_10001A9A8(&qword_1010EC538);
    *(_QWORD *)(v0 + 2448) = v39;
    v40 = swift_allocObject(v39, 176, 7);
    sub_100882D28(v40, 9);
    *v41 = sub_100057E50;
    v41[1] = v28;
    v41[2] = sub_10005CBC4;
    v41[3] = v29;
    v41[4] = sub_100243220;
    v41[5] = 0;
    v41[6] = sub_10005CBC4;
    v41[7] = v30;
    v41[8] = sub_10005CBC4;
    v41[9] = v31;
    v41[10] = sub_100057E68;
    v41[11] = v33;
    v41[12] = sub_10005CBC4;
    v41[13] = v34;
    v41[14] = sub_10005CBC4;
    v41[15] = v35;
    v41[16] = sub_1000585A4;
    v41[17] = v38;
    v91 = v28;
    v42 = v29;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(oslog, v87))
    {
      v82 = v34;
      v83 = v33;
      v43 = (uint8_t *)sub_1006948A0(32);
      v44 = swift_slowAlloc(8, -1);
      v45 = swift_slowAlloc(64, -1);
      v96 = (uint8_t *)v44;
      v97 = v45;
      *(_WORD *)v43 = 770;
      v95 = v43 + 2;
      v98 = (uint64_t (*)())sub_100057E50;
      v99 = v91;
      sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v98, (uint64_t)&v95, (uint64_t)&v96, (uint64_t)&v97);
      swift_release();
      v98 = sub_10005CBC4;
      v99 = v42;
      sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v98, (uint64_t)&v95, (uint64_t)&v96, (uint64_t)&v97);
      swift_release();
      v98 = sub_100243220;
      v99 = 0;
      sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v98, (uint64_t)&v95, (uint64_t)&v96, (uint64_t)&v97);
      v98 = sub_10005CBC4;
      v99 = v30;
      sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v98, (uint64_t)&v95, (uint64_t)&v96, (uint64_t)&v97);
      swift_release();
      v98 = sub_10005CBC4;
      v99 = v31;
      sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v98, (uint64_t)&v95, (uint64_t)&v96, (uint64_t)&v97);
      swift_release();
      v98 = (uint64_t (*)())sub_100057E68;
      v99 = v83;
      sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v98, (uint64_t)&v95, (uint64_t)&v96, (uint64_t)&v97);
      swift_release();
      v98 = sub_10005CBC4;
      v99 = v82;
      sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v98, (uint64_t)&v95, (uint64_t)&v96, (uint64_t)&v97);
      swift_release();
      v98 = sub_10005CBC4;
      v99 = v35;
      sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v98, (uint64_t)&v95, (uint64_t)&v96, (uint64_t)&v97);
      swift_release();
      v98 = (uint64_t (*)())sub_1000585A4;
      v99 = v38;
      sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v98, (uint64_t)&v95, (uint64_t)&v96, (uint64_t)&v97);
      v46 = *(_QWORD *)(v0 + 1904);
      v47 = *(_QWORD *)(v0 + 1808);
      v48 = v44;
      v49 = *(_QWORD *)(v0 + 1800);
      swift_release();
      _os_log_impl((void *)&_mh_execute_header, oslog, v87, "%{public}s %{public}s Error %{public}@", v43, 0x20u);
      v50 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
      swift_arrayDestroy(v48, 1, v50);
      swift_slowDealloc(v48, -1, -1);
      swift_arrayDestroy(v45, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v45, -1, -1);
      sub_100694894((uint64_t)v43);

      v51 = *(void (**)(uint64_t, uint64_t))(v47 + 8);
      v51(v46, v49);
    }
    else
    {
      v88 = *(_QWORD *)(v0 + 1904);
      v52 = *(_QWORD *)(v0 + 1808);
      v53 = *(_QWORD *)(v0 + 1800);
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();

      v51 = *(void (**)(uint64_t, uint64_t))(v52 + 8);
      v51(v88, v53);
    }
    *(_QWORD *)(v0 + 2456) = v51;
    v54 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of PeripheralProtocol.cancelConnection()[1]);
    *(_QWORD *)(v0 + 2464) = v54;
    *v54 = v0;
    v54[1] = sub_10023ED18;
    return dispatch thunk of PeripheralProtocol.cancelConnection()(*(_QWORD *)(v0 + 2008), *(_QWORD *)(v0 + 2016));
  }
  v2 = *(_QWORD *)(v0 + 1648);
  *(_QWORD *)(v0 + 2160) = v2;
  v3 = *(_QWORD *)(v0 + 1656);
  *(_QWORD *)(v0 + 2168) = v3;
  if (*(_BYTE *)(v0 + 1664))
  {
    sub_100243B24(v2, v3, *(_BYTE *)(v0 + 1664));
    goto LABEL_4;
  }
  v92 = *(_QWORD *)(v0 + 2056);
  v56 = *(_QWORD *)(v0 + 1704);
  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 2048))(*(_QWORD *)(v0 + 1992), *(_QWORD *)(v0 + 2040), *(_QWORD *)(v0 + 1800));
  v57 = swift_allocObject(&unk_101060448, 32, 7);
  *(_QWORD *)(v57 + 16) = sub_100243954;
  *(_QWORD *)(v57 + 24) = v56;
  v58 = swift_allocObject(&unk_101060470, 32, 7);
  *(_QWORD *)(v58 + 16) = v2;
  *(_QWORD *)(v58 + 24) = v3;
  v59 = swift_allocObject(&unk_101060498, 32, 7);
  *(_QWORD *)(v59 + 16) = sub_100243B70;
  *(_QWORD *)(v59 + 24) = v58;
  sub_100243B84(v2, v3, 0);
  swift_retain();
  sub_100243B84(v2, v3, 0);
  v89 = Logger.logObject.getter(v60);
  v61 = static os_log_type_t.default.getter(v89);
  v62 = swift_allocObject(&unk_1010604C0, 17, 7);
  *(_BYTE *)(v62 + 16) = 34;
  v63 = swift_allocObject(&unk_1010604E8, 17, 7);
  *(_BYTE *)(v63 + 16) = 8;
  v64 = swift_allocObject(&unk_101060510, 32, 7);
  *(_QWORD *)(v64 + 16) = sub_100245488;
  *(_QWORD *)(v64 + 24) = v57;
  v65 = swift_allocObject(&unk_101060538, 32, 7);
  *(_QWORD *)(v65 + 16) = sub_10005CBA4;
  *(_QWORD *)(v65 + 24) = v64;
  v66 = swift_allocObject(&unk_101060560, 17, 7);
  *(_BYTE *)(v66 + 16) = 32;
  v67 = swift_allocObject(&unk_101060588, 17, 7);
  *(_BYTE *)(v67 + 16) = 8;
  v68 = swift_allocObject(&unk_1010605B0, 32, 7);
  *(_QWORD *)(v68 + 16) = sub_100243B7C;
  *(_QWORD *)(v68 + 24) = v59;
  v69 = swift_allocObject(&unk_1010605D8, 32, 7);
  *(_QWORD *)(v69 + 16) = sub_10005CBA4;
  *(_QWORD *)(v69 + 24) = v68;
  v70 = swift_allocObject(v92, 128, 7);
  sub_100882D28(v70, 6);
  *v71 = sub_10005CBC4;
  v71[1] = v62;
  v71[2] = sub_10005CBC4;
  v71[3] = v63;
  v71[4] = sub_10005CBB4;
  v71[5] = v65;
  v71[6] = sub_10005CBC4;
  v71[7] = v66;
  v71[8] = sub_10005CBC4;
  v71[9] = v67;
  v71[10] = sub_10005CBB4;
  v71[11] = v69;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRelease();
  v93 = v61;
  if (os_log_type_enabled(v89, v61))
  {
    v84 = v67;
    osloga = (os_log_t)v66;
    v72 = *(_QWORD *)(v0 + 2144);
    v73 = (uint8_t *)sub_1006948A0(22);
    v74 = swift_slowAlloc(64, -1);
    v96 = 0;
    v97 = v74;
    *(_WORD *)v73 = 514;
    v95 = v73 + 2;
    v98 = sub_10005CBC4;
    v99 = v62;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v98, (uint64_t)&v95, (uint64_t)&v96, (uint64_t)&v97);
    if (v72)
      return swift_errorRelease(v72);
    swift_release();
    v98 = sub_10005CBC4;
    v99 = v63;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v98, (uint64_t)&v95, (uint64_t)&v96, (uint64_t)&v97);
    swift_release();
    v98 = sub_10005CBB4;
    v99 = v65;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v98, (uint64_t)&v95, (uint64_t)&v96, (uint64_t)&v97);
    swift_release();
    v98 = sub_10005CBC4;
    v99 = (uint64_t)osloga;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v98, (uint64_t)&v95, (uint64_t)&v96, (uint64_t)&v97);
    swift_release();
    v98 = sub_10005CBC4;
    v99 = v84;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v98, (uint64_t)&v95, (uint64_t)&v96, (uint64_t)&v97);
    swift_release();
    v98 = sub_10005CBB4;
    v99 = v69;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v98, (uint64_t)&v95, (uint64_t)&v96, (uint64_t)&v97);
    v78 = v74;
    v79 = *(void (**)(uint64_t, uint64_t))(v0 + 2064);
    v80 = *(_QWORD *)(v0 + 1992);
    v81 = *(_QWORD *)(v0 + 1800);
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, v89, v93, "%{public}s productData: %s", v73, 0x16u);
    swift_arrayDestroy(v78, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v78, -1, -1);
    sub_100694894((uint64_t)v73);

    v79(v80, v81);
  }
  else
  {
    v94 = *(void (**)(uint64_t, uint64_t))(v0 + 2064);
    v75 = *(_QWORD *)(v0 + 1992);
    v76 = *(_QWORD *)(v0 + 1800);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();

    v94(v75, v76);
  }
  *(_QWORD *)(v0 + 280) = &type metadata for PoshAccessoryNonOwnerCommand;
  *(_OWORD *)(v0 + 288) = *(_OWORD *)(v0 + 2120);
  *(_OWORD *)(v0 + 256) = xmmword_100E2E3B0;
  *(_BYTE *)(v0 + 272) = 10;
  v77 = (_QWORD *)swift_task_alloc(dword_1010F3894);
  *(_QWORD *)(v0 + 2176) = v77;
  *v77 = v0;
  v77[1] = sub_100230974;
  return sub_10023FD28(v0 + 208, *(_QWORD *)(v0 + 2104), v0 + 256, (uint64_t)&type metadata for PoshAccessoryNonOwnerCommand, *(_QWORD *)(v0 + 2120), *(_QWORD *)(v0 + 2128), 0);
}

uint64_t sub_1002302AC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(uint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;
  NSObject *oslog;
  os_log_type_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint8_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t (*v50)();
  uint64_t v51;

  swift_release();
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 8);
  v1 = v0[268];
  v0[303] = v1;
  v2 = v0[238];
  v3 = v0[226];
  v4 = v0[225];
  v5 = v0[213];
  v6 = sub_10022450C();
  v0[304] = v6;
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v0[305] = v7;
  v7(v2, v6, v4);
  v8 = swift_allocObject(&unk_10105FF70, 32, 7);
  *(_QWORD *)(v8 + 16) = sub_100243954;
  *(_QWORD *)(v8 + 24) = v5;
  v45 = swift_allocObject(&unk_10105FF98, 24, 7);
  *(_QWORD *)(v45 + 16) = v1;
  swift_retain();
  v9 = swift_errorRetain(v1);
  oslog = Logger.logObject.getter(v9);
  v43 = static os_log_type_t.error.getter(oslog);
  v10 = swift_allocObject(&unk_10105FFC0, 17, 7);
  *(_BYTE *)(v10 + 16) = 34;
  v11 = swift_allocObject(&unk_10105FFE8, 17, 7);
  *(_BYTE *)(v11 + 16) = 8;
  v12 = swift_allocObject(&unk_101060010, 17, 7);
  *(_BYTE *)(v12 + 16) = 34;
  v13 = swift_allocObject(&unk_101060038, 17, 7);
  *(_BYTE *)(v13 + 16) = 8;
  v14 = swift_allocObject(&unk_101060060, 32, 7);
  *(_QWORD *)(v14 + 16) = sub_100243990;
  *(_QWORD *)(v14 + 24) = v8;
  v15 = swift_allocObject(&unk_101060088, 32, 7);
  *(_QWORD *)(v15 + 16) = sub_10001D850;
  *(_QWORD *)(v15 + 24) = v14;
  v16 = swift_allocObject(&unk_1010600B0, 17, 7);
  *(_BYTE *)(v16 + 16) = 66;
  v17 = swift_allocObject(&unk_1010600D8, 17, 7);
  *(_BYTE *)(v17 + 16) = 8;
  v18 = swift_allocObject(&unk_101060100, 32, 7);
  *(_QWORD *)(v18 + 16) = sub_100245648;
  *(_QWORD *)(v18 + 24) = v45;
  v19 = swift_allocObject(&unk_101060128, 32, 7);
  *(_QWORD *)(v19 + 16) = sub_10005859C;
  *(_QWORD *)(v19 + 24) = v18;
  v20 = swift_allocObject(&unk_101060150, 32, 7);
  *(_QWORD *)(v20 + 16) = sub_10001D850;
  *(_QWORD *)(v20 + 24) = v19;
  v21 = sub_10001A9A8(&qword_1010EC538);
  v0[306] = v21;
  v22 = swift_allocObject(v21, 176, 7);
  sub_100882D28(v22, 9);
  *v23 = sub_100057E50;
  v23[1] = v10;
  v23[2] = sub_10005CBC4;
  v23[3] = v11;
  v23[4] = sub_100243220;
  v23[5] = 0;
  v23[6] = sub_10005CBC4;
  v23[7] = v12;
  v23[8] = sub_10005CBC4;
  v23[9] = v13;
  v23[10] = sub_100057E68;
  v23[11] = v15;
  v23[12] = sub_10005CBC4;
  v23[13] = v16;
  v23[14] = sub_10005CBC4;
  v23[15] = v17;
  v23[16] = sub_1000585A4;
  v23[17] = v20;
  v46 = v10;
  swift_retain();
  swift_retain();
  v24 = v12;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(oslog, v43))
  {
    v25 = v11;
    v26 = v24;
    v40 = v16;
    v41 = v15;
    v27 = (uint8_t *)sub_1006948A0(32);
    v28 = swift_slowAlloc(8, -1);
    v29 = swift_slowAlloc(64, -1);
    v48 = v28;
    v49 = v29;
    *(_WORD *)v27 = 770;
    v47 = v27 + 2;
    v50 = (uint64_t (*)())sub_100057E50;
    v51 = v46;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v50, (uint64_t)&v47, (uint64_t)&v48, (uint64_t)&v49);
    swift_release();
    v50 = sub_10005CBC4;
    v51 = v25;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v50, (uint64_t)&v47, (uint64_t)&v48, (uint64_t)&v49);
    swift_release();
    v50 = sub_100243220;
    v51 = 0;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v50, (uint64_t)&v47, (uint64_t)&v48, (uint64_t)&v49);
    v50 = sub_10005CBC4;
    v51 = v26;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v50, (uint64_t)&v47, (uint64_t)&v48, (uint64_t)&v49);
    swift_release();
    v50 = sub_10005CBC4;
    v51 = v13;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v50, (uint64_t)&v47, (uint64_t)&v48, (uint64_t)&v49);
    swift_release();
    v50 = (uint64_t (*)())sub_100057E68;
    v51 = v41;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v50, (uint64_t)&v47, (uint64_t)&v48, (uint64_t)&v49);
    swift_release();
    v50 = sub_10005CBC4;
    v51 = v40;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v50, (uint64_t)&v47, (uint64_t)&v48, (uint64_t)&v49);
    swift_release();
    v50 = sub_10005CBC4;
    v51 = v17;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v50, (uint64_t)&v47, (uint64_t)&v48, (uint64_t)&v49);
    swift_release();
    v50 = (uint64_t (*)())sub_1000585A4;
    v51 = v20;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v50, (uint64_t)&v47, (uint64_t)&v48, (uint64_t)&v49);
    v34 = v0[238];
    v35 = v0[226];
    v36 = v28;
    v37 = v0[225];
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, oslog, v43, "%{public}s %{public}s Error %{public}@", v27, 0x20u);
    v38 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v36, 1, v38);
    swift_slowDealloc(v36, -1, -1);
    swift_arrayDestroy(v29, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v29, -1, -1);
    sub_100694894((uint64_t)v27);

    v39 = *(void (**)(uint64_t, uint64_t))(v35 + 8);
    v39(v34, v37);
  }
  else
  {
    v44 = v0[238];
    v30 = v0[226];
    v31 = v0[225];
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();

    v39 = *(void (**)(uint64_t, uint64_t))(v30 + 8);
    v39(v44, v31);
  }
  v0[307] = v39;
  v32 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of PeripheralProtocol.cancelConnection()[1]);
  v0[308] = v32;
  *v32 = v0;
  v32[1] = sub_10023ED18;
  return dispatch thunk of PeripheralProtocol.cancelConnection()(v0[251], v0[252]);
}

uint64_t sub_100230974()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 2176);
  *(_QWORD *)(*v1 + 2184) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_100231948;
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v2 + 256));
    v4 = sub_1002309E0;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_1002309E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  os_log_type_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint8_t *v39;
  void (*v40)(uint64_t, uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void (*v59)(uint64_t, uint64_t, uint64_t);
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  uint8_t *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  uint8_t *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void (*v92)(uint8_t *, uint64_t);
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  os_log_t oslog;
  os_log_t osloga;
  NSObject *oslogb;
  uint8_t *bufb;
  os_log_type_t buf;
  os_log_type_t bufa;
  uint8_t *bufc;
  uint8_t *bufd;
  NSObject *v104;
  uint64_t v105;
  uint64_t v106;
  uint8_t *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t (*v110)();
  uint64_t v111;

  v1 = *(_QWORD *)(v0 + 2152);
  sub_100057DB8(v0 + 208, v0 + 304);
  if (swift_dynamicCast(v0 + 1624, v0 + 304, v1, &type metadata for PoshAccessoryNonOwnerCommand, 6))
  {
    v2 = *(_QWORD *)(v0 + 1624);
    *(_QWORD *)(v0 + 2192) = v2;
    v3 = *(_QWORD *)(v0 + 1632);
    *(_QWORD *)(v0 + 2200) = v3;
    v4 = *(unsigned __int8 *)(v0 + 1640);
    if (v4 == 1)
    {
      bufb = *(uint8_t **)(v0 + 2056);
      v5 = *(_QWORD *)(v0 + 1704);
      (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 2048))(*(_QWORD *)(v0 + 1984), *(_QWORD *)(v0 + 2040), *(_QWORD *)(v0 + 1800));
      v6 = swift_allocObject(&unk_1010606C8, 32, 7);
      *(_QWORD *)(v6 + 16) = sub_100243954;
      *(_QWORD *)(v6 + 24) = v5;
      v7 = swift_allocObject(&unk_1010606F0, 32, 7);
      *(_QWORD *)(v7 + 16) = v2;
      *(_QWORD *)(v7 + 24) = v3;
      sub_100243B84(v2, v3, 1);
      swift_retain();
      sub_100243B84(v2, v3, 1);
      v104 = Logger.logObject.getter(v8);
      v9 = static os_log_type_t.default.getter(v104);
      v10 = swift_allocObject(&unk_101060718, 17, 7);
      *(_BYTE *)(v10 + 16) = 34;
      v11 = swift_allocObject(&unk_101060740, 17, 7);
      *(_BYTE *)(v11 + 16) = 8;
      v12 = swift_allocObject(&unk_101060768, 32, 7);
      *(_QWORD *)(v12 + 16) = sub_100245488;
      *(_QWORD *)(v12 + 24) = v6;
      v13 = swift_allocObject(&unk_101060790, 32, 7);
      *(_QWORD *)(v13 + 16) = sub_10005CBA4;
      *(_QWORD *)(v13 + 24) = v12;
      v14 = swift_allocObject(&unk_1010607B8, 17, 7);
      *(_BYTE *)(v14 + 16) = 32;
      v15 = swift_allocObject(&unk_1010607E0, 17, 7);
      *(_BYTE *)(v15 + 16) = 8;
      v16 = swift_allocObject(&unk_101060808, 32, 7);
      *(_QWORD *)(v16 + 16) = sub_100059034;
      *(_QWORD *)(v16 + 24) = v7;
      v17 = swift_allocObject(&unk_101060830, 32, 7);
      *(_QWORD *)(v17 + 16) = sub_10005CBA4;
      *(_QWORD *)(v17 + 24) = v16;
      v18 = swift_allocObject(bufb, 128, 7);
      sub_100882D28(v18, 6);
      *v19 = sub_10005CBC4;
      v19[1] = v10;
      v19[2] = sub_10005CBC4;
      v19[3] = v11;
      v19[4] = sub_10005CBB4;
      v19[5] = v13;
      v19[6] = sub_10005CBC4;
      v19[7] = v14;
      v19[8] = sub_10005CBC4;
      v19[9] = v15;
      v19[10] = sub_10005CBB4;
      v19[11] = v17;
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_bridgeObjectRelease();
      buf = v9;
      if (!os_log_type_enabled(v104, v9))
      {
        bufd = *(uint8_t **)(v0 + 2064);
        v84 = *(_QWORD *)(v0 + 1984);
        v85 = *(_QWORD *)(v0 + 1800);
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();

        ((void (*)(uint64_t, uint64_t))bufd)(v84, v85);
LABEL_24:
        *(_QWORD *)(v0 + 472) = &type metadata for PoshAccessoryNonOwnerCommand;
        *(_OWORD *)(v0 + 480) = *(_OWORD *)(v0 + 2120);
        *(_OWORD *)(v0 + 448) = xmmword_100E2E3C0;
        *(_BYTE *)(v0 + 464) = 10;
        v86 = (_QWORD *)swift_task_alloc(dword_1010F3894);
        *(_QWORD *)(v0 + 2208) = v86;
        *v86 = v0;
        v86[1] = sub_100232044;
        return sub_10023FD28(v0 + 400, *(_QWORD *)(v0 + 2104), v0 + 448, (uint64_t)&type metadata for PoshAccessoryNonOwnerCommand, *(_QWORD *)(v0 + 2120), *(_QWORD *)(v0 + 2128), 0);
      }
      v95 = v15;
      oslog = (os_log_t)v14;
      v20 = *(_QWORD *)(v0 + 2184);
      v21 = (uint8_t *)sub_1006948A0(22);
      v22 = swift_slowAlloc(64, -1);
      v108 = 0;
      v109 = v22;
      *(_WORD *)v21 = 514;
      v107 = v21 + 2;
      v110 = sub_10005CBC4;
      v111 = v10;
      sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v110, (uint64_t)&v107, (uint64_t)&v108, (uint64_t)&v109);
      if (!v20)
      {
        swift_release();
        v110 = sub_10005CBC4;
        v111 = v11;
        sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v110, (uint64_t)&v107, (uint64_t)&v108, (uint64_t)&v109);
        swift_release();
        v110 = sub_10005CBB4;
        v111 = v13;
        sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v110, (uint64_t)&v107, (uint64_t)&v108, (uint64_t)&v109);
        swift_release();
        v110 = sub_10005CBC4;
        v111 = (uint64_t)oslog;
        sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v110, (uint64_t)&v107, (uint64_t)&v108, (uint64_t)&v109);
        swift_release();
        v110 = sub_10005CBC4;
        v111 = v95;
        sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v110, (uint64_t)&v107, (uint64_t)&v108, (uint64_t)&v109);
        swift_release();
        v110 = sub_10005CBB4;
        v111 = v17;
        sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v110, (uint64_t)&v107, (uint64_t)&v108, (uint64_t)&v109);
        v23 = v22;
        v24 = *(void (**)(uint64_t, uint64_t))(v0 + 2064);
        v25 = *(_QWORD *)(v0 + 1984);
        v26 = *(_QWORD *)(v0 + 1800);
        swift_release();
        _os_log_impl((void *)&_mh_execute_header, v104, buf, "%{public}s manufacturerName: %s", v21, 0x16u);
        swift_arrayDestroy(v23, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v23, -1, -1);
        sub_100694894((uint64_t)v21);

        v24(v25, v26);
        goto LABEL_24;
      }
      return swift_errorRelease(v20);
    }
    sub_100243B24(v2, v3, v4);
  }
  v27 = *(_QWORD *)(v0 + 2056);
  v28 = *(_QWORD *)(v0 + 1704);
  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 2048))(*(_QWORD *)(v0 + 1824), *(_QWORD *)(v0 + 2040), *(_QWORD *)(v0 + 1800));
  v29 = swift_allocObject(&unk_101060600, 32, 7);
  *(_QWORD *)(v29 + 16) = sub_100243954;
  *(_QWORD *)(v29 + 24) = v28;
  v30 = swift_retain();
  v31 = Logger.logObject.getter(v30);
  v32 = static os_log_type_t.error.getter(v31);
  v33 = swift_allocObject(&unk_101060628, 17, 7);
  *(_BYTE *)(v33 + 16) = 34;
  v34 = swift_allocObject(&unk_101060650, 17, 7);
  *(_BYTE *)(v34 + 16) = 8;
  v35 = swift_allocObject(&unk_101060678, 32, 7);
  *(_QWORD *)(v35 + 16) = sub_100245488;
  *(_QWORD *)(v35 + 24) = v29;
  v36 = swift_allocObject(&unk_1010606A0, 32, 7);
  *(_QWORD *)(v36 + 16) = sub_10005CBA4;
  *(_QWORD *)(v36 + 24) = v35;
  v37 = swift_allocObject(v27, 80, 7);
  sub_100882D28(v37, 3);
  *v38 = sub_10005CBC4;
  v38[1] = v33;
  v38[2] = sub_10005CBC4;
  v38[3] = v34;
  v38[4] = sub_10005CBB4;
  v38[5] = v36;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v31, v32))
  {
    v20 = *(_QWORD *)(v0 + 2184);
    v39 = (uint8_t *)sub_1006948A0(12);
    v108 = 0;
    v109 = swift_slowAlloc(32, -1);
    osloga = (os_log_t)v109;
    *(_WORD *)v39 = 258;
    v107 = v39 + 2;
    v110 = sub_10005CBC4;
    v111 = v33;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v110, (uint64_t)&v107, (uint64_t)&v108, (uint64_t)&v109);
    if (v20)
      return swift_errorRelease(v20);
    swift_release();
    v110 = sub_10005CBC4;
    v111 = v34;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v110, (uint64_t)&v107, (uint64_t)&v108, (uint64_t)&v109);
    swift_release();
    v110 = sub_10005CBB4;
    v111 = v36;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v110, (uint64_t)&v107, (uint64_t)&v108, (uint64_t)&v109);
    v40 = *(void (**)(uint64_t, uint64_t))(v0 + 2064);
    v41 = *(_QWORD *)(v0 + 1824);
    v42 = *(_QWORD *)(v0 + 1800);
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, v31, v32, "%{public}s Invalid manufacturerNameCommandResponse!", v39, 0xCu);
    swift_arrayDestroy(osloga, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(osloga, -1, -1);
    sub_100694894((uint64_t)v39);

    v43 = v41;
    v44 = v42;
  }
  else
  {
    v40 = *(void (**)(uint64_t, uint64_t))(v0 + 2064);
    v45 = *(_QWORD *)(v0 + 1824);
    v46 = *(_QWORD *)(v0 + 1800);
    swift_release();
    swift_release();
    swift_release();

    v43 = v45;
    v44 = v46;
  }
  v40(v43, v44);
  v47 = *(_QWORD *)(v0 + 2168);
  v48 = *(_QWORD *)(v0 + 2160);
  v49 = type metadata accessor for AccessoryMetadataManager.Error(0);
  v50 = sub_100006204(&qword_1010F37D8, type metadata accessor for AccessoryMetadataManager.Error, (uint64_t)&unk_100E2E588);
  v51 = swift_allocError(v49, v50, 0, 0);
  v53 = swift_storeEnumTagMultiPayload(v52, v49, 7);
  swift_willThrow(v53);
  swift_release();
  swift_release();
  sub_100243B24(v48, v47, 0);
  sub_100243B24(v48, v47, 0);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 208));
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
  *(_QWORD *)(v0 + 2424) = v51;
  v54 = *(_QWORD *)(v0 + 1904);
  v55 = *(_QWORD *)(v0 + 1808);
  v56 = *(_QWORD *)(v0 + 1800);
  v57 = *(_QWORD *)(v0 + 1704);
  v58 = sub_10022450C();
  *(_QWORD *)(v0 + 2432) = v58;
  v59 = *(void (**)(uint64_t, uint64_t, uint64_t))(v55 + 16);
  *(_QWORD *)(v0 + 2440) = v59;
  v59(v54, v58, v56);
  v60 = swift_allocObject(&unk_10105FF70, 32, 7);
  *(_QWORD *)(v60 + 16) = sub_100243954;
  *(_QWORD *)(v60 + 24) = v57;
  v105 = swift_allocObject(&unk_10105FF98, 24, 7);
  *(_QWORD *)(v105 + 16) = v51;
  swift_retain();
  v61 = swift_errorRetain(v51);
  oslogb = Logger.logObject.getter(v61);
  bufa = static os_log_type_t.error.getter(oslogb);
  v62 = swift_allocObject(&unk_10105FFC0, 17, 7);
  *(_BYTE *)(v62 + 16) = 34;
  v63 = swift_allocObject(&unk_10105FFE8, 17, 7);
  *(_BYTE *)(v63 + 16) = 8;
  v64 = swift_allocObject(&unk_101060010, 17, 7);
  *(_BYTE *)(v64 + 16) = 34;
  v65 = swift_allocObject(&unk_101060038, 17, 7);
  *(_BYTE *)(v65 + 16) = 8;
  v66 = swift_allocObject(&unk_101060060, 32, 7);
  *(_QWORD *)(v66 + 16) = sub_100243990;
  *(_QWORD *)(v66 + 24) = v60;
  v67 = swift_allocObject(&unk_101060088, 32, 7);
  *(_QWORD *)(v67 + 16) = sub_10001D850;
  *(_QWORD *)(v67 + 24) = v66;
  v68 = swift_allocObject(&unk_1010600B0, 17, 7);
  *(_BYTE *)(v68 + 16) = 66;
  v69 = swift_allocObject(&unk_1010600D8, 17, 7);
  *(_BYTE *)(v69 + 16) = 8;
  v70 = swift_allocObject(&unk_101060100, 32, 7);
  *(_QWORD *)(v70 + 16) = sub_100245648;
  *(_QWORD *)(v70 + 24) = v105;
  v71 = swift_allocObject(&unk_101060128, 32, 7);
  *(_QWORD *)(v71 + 16) = sub_10005859C;
  *(_QWORD *)(v71 + 24) = v70;
  v72 = swift_allocObject(&unk_101060150, 32, 7);
  *(_QWORD *)(v72 + 16) = sub_10001D850;
  *(_QWORD *)(v72 + 24) = v71;
  v73 = sub_10001A9A8(&qword_1010EC538);
  *(_QWORD *)(v0 + 2448) = v73;
  v74 = swift_allocObject(v73, 176, 7);
  sub_100882D28(v74, 9);
  *v75 = sub_100057E50;
  v75[1] = v62;
  v75[2] = sub_10005CBC4;
  v75[3] = v63;
  v75[4] = sub_100243220;
  v75[5] = 0;
  v75[6] = sub_10005CBC4;
  v75[7] = v64;
  v75[8] = sub_10005CBC4;
  v75[9] = v65;
  v75[10] = sub_100057E68;
  v75[11] = v67;
  v75[12] = sub_10005CBC4;
  v75[13] = v68;
  v75[14] = sub_10005CBC4;
  v75[15] = v69;
  v75[16] = sub_1000585A4;
  v75[17] = v72;
  v106 = v62;
  v76 = v63;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(oslogb, bufa))
  {
    v93 = v68;
    v94 = v67;
    v77 = (uint8_t *)sub_1006948A0(32);
    v78 = swift_slowAlloc(8, -1);
    v79 = swift_slowAlloc(64, -1);
    v108 = v78;
    v109 = v79;
    *(_WORD *)v77 = 770;
    v107 = v77 + 2;
    v110 = (uint64_t (*)())sub_100057E50;
    v111 = v106;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v110, (uint64_t)&v107, (uint64_t)&v108, (uint64_t)&v109);
    swift_release();
    v110 = sub_10005CBC4;
    v111 = v76;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v110, (uint64_t)&v107, (uint64_t)&v108, (uint64_t)&v109);
    swift_release();
    v110 = sub_100243220;
    v111 = 0;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v110, (uint64_t)&v107, (uint64_t)&v108, (uint64_t)&v109);
    v110 = sub_10005CBC4;
    v111 = v64;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v110, (uint64_t)&v107, (uint64_t)&v108, (uint64_t)&v109);
    swift_release();
    v110 = sub_10005CBC4;
    v111 = v65;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v110, (uint64_t)&v107, (uint64_t)&v108, (uint64_t)&v109);
    swift_release();
    v110 = (uint64_t (*)())sub_100057E68;
    v111 = v94;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v110, (uint64_t)&v107, (uint64_t)&v108, (uint64_t)&v109);
    swift_release();
    v110 = sub_10005CBC4;
    v111 = v93;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v110, (uint64_t)&v107, (uint64_t)&v108, (uint64_t)&v109);
    swift_release();
    v110 = sub_10005CBC4;
    v111 = v69;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v110, (uint64_t)&v107, (uint64_t)&v108, (uint64_t)&v109);
    swift_release();
    v110 = (uint64_t (*)())sub_1000585A4;
    v111 = v72;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v110, (uint64_t)&v107, (uint64_t)&v108, (uint64_t)&v109);
    v87 = *(uint8_t **)(v0 + 1904);
    v88 = *(_QWORD *)(v0 + 1808);
    v89 = v78;
    v90 = *(_QWORD *)(v0 + 1800);
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, oslogb, bufa, "%{public}s %{public}s Error %{public}@", v77, 0x20u);
    v91 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v89, 1, v91);
    swift_slowDealloc(v89, -1, -1);
    swift_arrayDestroy(v79, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v79, -1, -1);
    sub_100694894((uint64_t)v77);

    v92 = *(void (**)(uint8_t *, uint64_t))(v88 + 8);
    v92(v87, v90);
  }
  else
  {
    bufc = *(uint8_t **)(v0 + 1904);
    v81 = *(_QWORD *)(v0 + 1808);
    v82 = *(_QWORD *)(v0 + 1800);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();

    v92 = *(void (**)(uint8_t *, uint64_t))(v81 + 8);
    v92(bufc, v82);
  }
  *(_QWORD *)(v0 + 2456) = v92;
  v83 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of PeripheralProtocol.cancelConnection()[1]);
  *(_QWORD *)(v0 + 2464) = v83;
  *v83 = v0;
  v83[1] = sub_10023ED18;
  return dispatch thunk of PeripheralProtocol.cancelConnection()(*(_QWORD *)(v0 + 2008), *(_QWORD *)(v0 + 2016));
}

uint64_t sub_100231948()
{
  _QWORD *v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(uint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;
  NSObject *oslog;
  os_log_type_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint8_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t (*v52)();
  uint64_t v53;

  v1 = v0[271];
  v2 = v0[270];
  swift_release();
  swift_release();
  sub_100243B24(v2, v1, 0);
  sub_100243B24(v2, v1, 0);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 32);
  v3 = v0[273];
  v0[303] = v3;
  v4 = v0[238];
  v5 = v0[226];
  v6 = v0[225];
  v7 = v0[213];
  v8 = sub_10022450C();
  v0[304] = v8;
  v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  v0[305] = v9;
  v9(v4, v8, v6);
  v10 = swift_allocObject(&unk_10105FF70, 32, 7);
  *(_QWORD *)(v10 + 16) = sub_100243954;
  *(_QWORD *)(v10 + 24) = v7;
  v47 = swift_allocObject(&unk_10105FF98, 24, 7);
  *(_QWORD *)(v47 + 16) = v3;
  swift_retain();
  v11 = swift_errorRetain(v3);
  oslog = Logger.logObject.getter(v11);
  v45 = static os_log_type_t.error.getter(oslog);
  v12 = swift_allocObject(&unk_10105FFC0, 17, 7);
  *(_BYTE *)(v12 + 16) = 34;
  v13 = swift_allocObject(&unk_10105FFE8, 17, 7);
  *(_BYTE *)(v13 + 16) = 8;
  v14 = swift_allocObject(&unk_101060010, 17, 7);
  *(_BYTE *)(v14 + 16) = 34;
  v15 = swift_allocObject(&unk_101060038, 17, 7);
  *(_BYTE *)(v15 + 16) = 8;
  v16 = swift_allocObject(&unk_101060060, 32, 7);
  *(_QWORD *)(v16 + 16) = sub_100243990;
  *(_QWORD *)(v16 + 24) = v10;
  v17 = swift_allocObject(&unk_101060088, 32, 7);
  *(_QWORD *)(v17 + 16) = sub_10001D850;
  *(_QWORD *)(v17 + 24) = v16;
  v18 = swift_allocObject(&unk_1010600B0, 17, 7);
  *(_BYTE *)(v18 + 16) = 66;
  v19 = swift_allocObject(&unk_1010600D8, 17, 7);
  *(_BYTE *)(v19 + 16) = 8;
  v20 = swift_allocObject(&unk_101060100, 32, 7);
  *(_QWORD *)(v20 + 16) = sub_100245648;
  *(_QWORD *)(v20 + 24) = v47;
  v21 = swift_allocObject(&unk_101060128, 32, 7);
  *(_QWORD *)(v21 + 16) = sub_10005859C;
  *(_QWORD *)(v21 + 24) = v20;
  v22 = swift_allocObject(&unk_101060150, 32, 7);
  *(_QWORD *)(v22 + 16) = sub_10001D850;
  *(_QWORD *)(v22 + 24) = v21;
  v23 = sub_10001A9A8(&qword_1010EC538);
  v0[306] = v23;
  v24 = swift_allocObject(v23, 176, 7);
  sub_100882D28(v24, 9);
  *v25 = sub_100057E50;
  v25[1] = v12;
  v25[2] = sub_10005CBC4;
  v25[3] = v13;
  v25[4] = sub_100243220;
  v25[5] = 0;
  v25[6] = sub_10005CBC4;
  v25[7] = v14;
  v25[8] = sub_10005CBC4;
  v25[9] = v15;
  v25[10] = sub_100057E68;
  v25[11] = v17;
  v25[12] = sub_10005CBC4;
  v25[13] = v18;
  v25[14] = sub_10005CBC4;
  v25[15] = v19;
  v25[16] = sub_1000585A4;
  v25[17] = v22;
  v48 = v12;
  swift_retain();
  swift_retain();
  v26 = v14;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(oslog, v45))
  {
    v27 = v13;
    v28 = v26;
    v42 = v18;
    v43 = v17;
    v29 = (uint8_t *)sub_1006948A0(32);
    v30 = swift_slowAlloc(8, -1);
    v31 = swift_slowAlloc(64, -1);
    v50 = v30;
    v51 = v31;
    *(_WORD *)v29 = 770;
    v49 = v29 + 2;
    v52 = (uint64_t (*)())sub_100057E50;
    v53 = v48;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v52, (uint64_t)&v49, (uint64_t)&v50, (uint64_t)&v51);
    swift_release();
    v52 = sub_10005CBC4;
    v53 = v27;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v52, (uint64_t)&v49, (uint64_t)&v50, (uint64_t)&v51);
    swift_release();
    v52 = sub_100243220;
    v53 = 0;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v52, (uint64_t)&v49, (uint64_t)&v50, (uint64_t)&v51);
    v52 = sub_10005CBC4;
    v53 = v28;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v52, (uint64_t)&v49, (uint64_t)&v50, (uint64_t)&v51);
    swift_release();
    v52 = sub_10005CBC4;
    v53 = v15;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v52, (uint64_t)&v49, (uint64_t)&v50, (uint64_t)&v51);
    swift_release();
    v52 = (uint64_t (*)())sub_100057E68;
    v53 = v43;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v52, (uint64_t)&v49, (uint64_t)&v50, (uint64_t)&v51);
    swift_release();
    v52 = sub_10005CBC4;
    v53 = v42;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v52, (uint64_t)&v49, (uint64_t)&v50, (uint64_t)&v51);
    swift_release();
    v52 = sub_10005CBC4;
    v53 = v19;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v52, (uint64_t)&v49, (uint64_t)&v50, (uint64_t)&v51);
    swift_release();
    v52 = (uint64_t (*)())sub_1000585A4;
    v53 = v22;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v52, (uint64_t)&v49, (uint64_t)&v50, (uint64_t)&v51);
    v36 = v0[238];
    v37 = v0[226];
    v38 = v30;
    v39 = v0[225];
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, oslog, v45, "%{public}s %{public}s Error %{public}@", v29, 0x20u);
    v40 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v38, 1, v40);
    swift_slowDealloc(v38, -1, -1);
    swift_arrayDestroy(v31, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v31, -1, -1);
    sub_100694894((uint64_t)v29);

    v41 = *(void (**)(uint64_t, uint64_t))(v37 + 8);
    v41(v36, v39);
  }
  else
  {
    v46 = v0[238];
    v32 = v0[226];
    v33 = v0[225];
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();

    v41 = *(void (**)(uint64_t, uint64_t))(v32 + 8);
    v41(v46, v33);
  }
  v0[307] = v41;
  v34 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of PeripheralProtocol.cancelConnection()[1]);
  v0[308] = v34;
  *v34 = v0;
  v34[1] = sub_10023ED18;
  return dispatch thunk of PeripheralProtocol.cancelConnection()(v0[251], v0[252]);
}

uint64_t sub_100232044()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 2208);
  *(_QWORD *)(*(_QWORD *)v1 + 2216) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    sub_100243B24(v2[274], v2[275], 1);
    v4 = sub_100233078;
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v2 + 56);
    v4 = sub_1002320C0;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_1002320C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  os_log_type_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint8_t *v42;
  void (*v43)(uint64_t, uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void (*v64)(uint64_t, uint64_t, uint64_t);
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  uint8_t *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  uint8_t *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  void (*v97)(uint8_t *, uint64_t);
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  os_log_t oslog;
  os_log_t osloga;
  NSObject *oslogb;
  uint8_t *bufc;
  os_log_type_t buf;
  uint8_t *bufa;
  os_log_type_t bufb;
  uint8_t *bufd;
  uint8_t *bufe;
  NSObject *v110;
  _QWORD *v111;
  uint64_t v112;
  uint64_t v113;
  uint8_t *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t (*v117)();
  uint64_t v118;

  v1 = *(_QWORD *)(v0 + 2152);
  sub_100057DB8(v0 + 400, v0 + 496);
  if (swift_dynamicCast(v0 + 1600, v0 + 496, v1, &type metadata for PoshAccessoryNonOwnerCommand, 6))
  {
    v2 = *(_QWORD *)(v0 + 1600);
    *(_QWORD *)(v0 + 2224) = v2;
    v3 = *(_QWORD *)(v0 + 1608);
    *(_QWORD *)(v0 + 2232) = v3;
    v4 = *(unsigned __int8 *)(v0 + 1616);
    if (v4 == 2)
    {
      bufc = *(uint8_t **)(v0 + 2056);
      v5 = *(_QWORD *)(v0 + 1704);
      (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 2048))(*(_QWORD *)(v0 + 1976), *(_QWORD *)(v0 + 2040), *(_QWORD *)(v0 + 1800));
      v6 = swift_allocObject(&unk_101060920, 32, 7);
      *(_QWORD *)(v6 + 16) = sub_100243954;
      *(_QWORD *)(v6 + 24) = v5;
      v7 = swift_allocObject(&unk_101060948, 32, 7);
      *(_QWORD *)(v7 + 16) = v2;
      *(_QWORD *)(v7 + 24) = v3;
      sub_100243B84(v2, v3, 2);
      swift_retain();
      sub_100243B84(v2, v3, 2);
      v110 = Logger.logObject.getter(v8);
      v9 = static os_log_type_t.default.getter(v110);
      v10 = swift_allocObject(&unk_101060970, 17, 7);
      *(_BYTE *)(v10 + 16) = 34;
      v11 = swift_allocObject(&unk_101060998, 17, 7);
      *(_BYTE *)(v11 + 16) = 8;
      v12 = swift_allocObject(&unk_1010609C0, 32, 7);
      *(_QWORD *)(v12 + 16) = sub_100245488;
      *(_QWORD *)(v12 + 24) = v6;
      v13 = swift_allocObject(&unk_1010609E8, 32, 7);
      *(_QWORD *)(v13 + 16) = sub_10005CBA4;
      *(_QWORD *)(v13 + 24) = v12;
      v14 = swift_allocObject(&unk_101060A10, 17, 7);
      *(_BYTE *)(v14 + 16) = 32;
      v15 = swift_allocObject(&unk_101060A38, 17, 7);
      *(_BYTE *)(v15 + 16) = 8;
      v16 = swift_allocObject(&unk_101060A60, 32, 7);
      *(_QWORD *)(v16 + 16) = sub_10024566C;
      *(_QWORD *)(v16 + 24) = v7;
      v17 = swift_allocObject(&unk_101060A88, 32, 7);
      *(_QWORD *)(v17 + 16) = sub_10005CBA4;
      *(_QWORD *)(v17 + 24) = v16;
      v18 = swift_allocObject(bufc, 128, 7);
      sub_100882D28(v18, 6);
      *v19 = sub_10005CBC4;
      v19[1] = v10;
      v19[2] = sub_10005CBC4;
      v19[3] = v11;
      v19[4] = sub_10005CBB4;
      v19[5] = v13;
      v19[6] = sub_10005CBC4;
      v19[7] = v14;
      v19[8] = sub_10005CBC4;
      v19[9] = v15;
      v19[10] = sub_10005CBB4;
      v19[11] = v17;
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_bridgeObjectRelease();
      buf = v9;
      if (!os_log_type_enabled(v110, v9))
      {
        bufe = *(uint8_t **)(v0 + 2064);
        v89 = *(_QWORD *)(v0 + 1976);
        v90 = *(_QWORD *)(v0 + 1800);
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();

        ((void (*)(uint64_t, uint64_t))bufe)(v89, v90);
LABEL_25:
        *(_QWORD *)(v0 + 664) = &type metadata for PoshAccessoryNonOwnerCommand;
        *(_OWORD *)(v0 + 672) = *(_OWORD *)(v0 + 2120);
        *(_OWORD *)(v0 + 640) = xmmword_100E2E3D0;
        *(_BYTE *)(v0 + 656) = 10;
        v91 = (_QWORD *)swift_task_alloc(dword_1010F3894);
        *(_QWORD *)(v0 + 2240) = v91;
        *v91 = v0;
        v91[1] = sub_100233798;
        return sub_10023FD28(v0 + 592, *(_QWORD *)(v0 + 2104), v0 + 640, (uint64_t)&type metadata for PoshAccessoryNonOwnerCommand, *(_QWORD *)(v0 + 2120), *(_QWORD *)(v0 + 2128), 0);
      }
      v100 = v15;
      oslog = (os_log_t)v14;
      v20 = *(_QWORD *)(v0 + 2216);
      v21 = (uint8_t *)sub_1006948A0(22);
      v22 = swift_slowAlloc(64, -1);
      v115 = 0;
      v116 = v22;
      *(_WORD *)v21 = 514;
      v114 = v21 + 2;
      v117 = sub_10005CBC4;
      v118 = v10;
      sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v117, (uint64_t)&v114, (uint64_t)&v115, (uint64_t)&v116);
      if (!v20)
      {
        swift_release();
        v117 = sub_10005CBC4;
        v118 = v11;
        sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v117, (uint64_t)&v114, (uint64_t)&v115, (uint64_t)&v116);
        swift_release();
        v117 = sub_10005CBB4;
        v118 = v13;
        sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v117, (uint64_t)&v114, (uint64_t)&v115, (uint64_t)&v116);
        swift_release();
        v117 = sub_10005CBC4;
        v118 = (uint64_t)oslog;
        sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v117, (uint64_t)&v114, (uint64_t)&v115, (uint64_t)&v116);
        swift_release();
        v117 = sub_10005CBC4;
        v118 = v100;
        sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v117, (uint64_t)&v114, (uint64_t)&v115, (uint64_t)&v116);
        swift_release();
        v117 = sub_10005CBB4;
        v118 = v17;
        sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v117, (uint64_t)&v114, (uint64_t)&v115, (uint64_t)&v116);
        v23 = v22;
        v24 = *(void (**)(uint64_t, uint64_t))(v0 + 2064);
        v25 = *(_QWORD *)(v0 + 1976);
        v26 = *(_QWORD *)(v0 + 1800);
        swift_release();
        _os_log_impl((void *)&_mh_execute_header, v110, buf, "%{public}s modelName: %s", v21, 0x16u);
        swift_arrayDestroy(v23, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v23, -1, -1);
        sub_100694894((uint64_t)v21);

        v24(v25, v26);
        goto LABEL_25;
      }
      return swift_errorRelease(v20);
    }
    v111 = (_QWORD *)(v0 + 400);
    sub_100243B24(*(_QWORD *)(v0 + 2192), *(_QWORD *)(v0 + 2200), 1);
    v28 = v2;
    v27 = v3;
    v29 = v4;
  }
  else
  {
    v111 = (_QWORD *)(v0 + 400);
    v27 = *(_QWORD *)(v0 + 2200);
    v28 = *(_QWORD *)(v0 + 2192);
    v29 = 1;
  }
  sub_100243B24(v28, v27, v29);
  v30 = *(_QWORD *)(v0 + 2056);
  v31 = *(_QWORD *)(v0 + 1704);
  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 2048))(*(_QWORD *)(v0 + 1832), *(_QWORD *)(v0 + 2040), *(_QWORD *)(v0 + 1800));
  v32 = swift_allocObject(&unk_101060858, 32, 7);
  *(_QWORD *)(v32 + 16) = sub_100243954;
  *(_QWORD *)(v32 + 24) = v31;
  v33 = swift_retain();
  v34 = Logger.logObject.getter(v33);
  v35 = static os_log_type_t.error.getter(v34);
  v36 = swift_allocObject(&unk_101060880, 17, 7);
  *(_BYTE *)(v36 + 16) = 34;
  v37 = swift_allocObject(&unk_1010608A8, 17, 7);
  *(_BYTE *)(v37 + 16) = 8;
  v38 = swift_allocObject(&unk_1010608D0, 32, 7);
  *(_QWORD *)(v38 + 16) = sub_100245488;
  *(_QWORD *)(v38 + 24) = v32;
  v39 = swift_allocObject(&unk_1010608F8, 32, 7);
  *(_QWORD *)(v39 + 16) = sub_10005CBA4;
  *(_QWORD *)(v39 + 24) = v38;
  v40 = swift_allocObject(v30, 80, 7);
  sub_100882D28(v40, 3);
  *v41 = sub_10005CBC4;
  v41[1] = v36;
  v41[2] = sub_10005CBC4;
  v41[3] = v37;
  v41[4] = sub_10005CBB4;
  v41[5] = v39;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v34, v35))
  {
    v20 = *(_QWORD *)(v0 + 2216);
    v42 = (uint8_t *)sub_1006948A0(12);
    v115 = 0;
    v116 = swift_slowAlloc(32, -1);
    osloga = (os_log_t)v116;
    bufa = v42;
    *(_WORD *)v42 = 258;
    v114 = v42 + 2;
    v117 = sub_10005CBC4;
    v118 = v36;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v117, (uint64_t)&v114, (uint64_t)&v115, (uint64_t)&v116);
    if (v20)
      return swift_errorRelease(v20);
    swift_release();
    v117 = sub_10005CBC4;
    v118 = v37;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v117, (uint64_t)&v114, (uint64_t)&v115, (uint64_t)&v116);
    swift_release();
    v117 = sub_10005CBB4;
    v118 = v39;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v117, (uint64_t)&v114, (uint64_t)&v115, (uint64_t)&v116);
    v43 = *(void (**)(uint64_t, uint64_t))(v0 + 2064);
    v44 = *(_QWORD *)(v0 + 1832);
    v45 = *(_QWORD *)(v0 + 1800);
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, v34, v35, "%{public}s Invalid modelNameCommandResponse!", bufa, 0xCu);
    swift_arrayDestroy(osloga, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(osloga, -1, -1);
    sub_100694894((uint64_t)bufa);

    v46 = v44;
    v47 = v45;
  }
  else
  {
    v43 = *(void (**)(uint64_t, uint64_t))(v0 + 2064);
    v48 = *(_QWORD *)(v0 + 1832);
    v49 = *(_QWORD *)(v0 + 1800);
    swift_release();
    swift_release();
    swift_release();

    v46 = v48;
    v47 = v49;
  }
  v43(v46, v47);
  v50 = *(_QWORD *)(v0 + 2200);
  v51 = *(_QWORD *)(v0 + 2192);
  v52 = *(_QWORD *)(v0 + 2168);
  v53 = *(_QWORD *)(v0 + 2160);
  v54 = type metadata accessor for AccessoryMetadataManager.Error(0);
  v55 = sub_100006204(&qword_1010F37D8, type metadata accessor for AccessoryMetadataManager.Error, (uint64_t)&unk_100E2E588);
  v56 = swift_allocError(v54, v55, 0, 0);
  v58 = swift_storeEnumTagMultiPayload(v57, v54, 7);
  swift_willThrow(v58);
  swift_release();
  swift_release();
  sub_100243B24(v51, v50, 1);
  sub_100243B24(v53, v52, 0);
  sub_100243B24(v53, v52, 0);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v111);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 208));
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
  *(_QWORD *)(v0 + 2424) = v56;
  v59 = *(_QWORD *)(v0 + 1904);
  v60 = *(_QWORD *)(v0 + 1808);
  v61 = *(_QWORD *)(v0 + 1800);
  v62 = *(_QWORD *)(v0 + 1704);
  v63 = sub_10022450C();
  *(_QWORD *)(v0 + 2432) = v63;
  v64 = *(void (**)(uint64_t, uint64_t, uint64_t))(v60 + 16);
  *(_QWORD *)(v0 + 2440) = v64;
  v64(v59, v63, v61);
  v65 = swift_allocObject(&unk_10105FF70, 32, 7);
  *(_QWORD *)(v65 + 16) = sub_100243954;
  *(_QWORD *)(v65 + 24) = v62;
  v112 = swift_allocObject(&unk_10105FF98, 24, 7);
  *(_QWORD *)(v112 + 16) = v56;
  swift_retain();
  v66 = swift_errorRetain(v56);
  oslogb = Logger.logObject.getter(v66);
  bufb = static os_log_type_t.error.getter(oslogb);
  v67 = swift_allocObject(&unk_10105FFC0, 17, 7);
  *(_BYTE *)(v67 + 16) = 34;
  v68 = swift_allocObject(&unk_10105FFE8, 17, 7);
  *(_BYTE *)(v68 + 16) = 8;
  v69 = swift_allocObject(&unk_101060010, 17, 7);
  *(_BYTE *)(v69 + 16) = 34;
  v70 = swift_allocObject(&unk_101060038, 17, 7);
  *(_BYTE *)(v70 + 16) = 8;
  v71 = swift_allocObject(&unk_101060060, 32, 7);
  *(_QWORD *)(v71 + 16) = sub_100243990;
  *(_QWORD *)(v71 + 24) = v65;
  v72 = swift_allocObject(&unk_101060088, 32, 7);
  *(_QWORD *)(v72 + 16) = sub_10001D850;
  *(_QWORD *)(v72 + 24) = v71;
  v73 = swift_allocObject(&unk_1010600B0, 17, 7);
  *(_BYTE *)(v73 + 16) = 66;
  v74 = swift_allocObject(&unk_1010600D8, 17, 7);
  *(_BYTE *)(v74 + 16) = 8;
  v75 = swift_allocObject(&unk_101060100, 32, 7);
  *(_QWORD *)(v75 + 16) = sub_100245648;
  *(_QWORD *)(v75 + 24) = v112;
  v76 = swift_allocObject(&unk_101060128, 32, 7);
  *(_QWORD *)(v76 + 16) = sub_10005859C;
  *(_QWORD *)(v76 + 24) = v75;
  v77 = swift_allocObject(&unk_101060150, 32, 7);
  *(_QWORD *)(v77 + 16) = sub_10001D850;
  *(_QWORD *)(v77 + 24) = v76;
  v78 = sub_10001A9A8(&qword_1010EC538);
  *(_QWORD *)(v0 + 2448) = v78;
  v79 = swift_allocObject(v78, 176, 7);
  sub_100882D28(v79, 9);
  *v80 = sub_100057E50;
  v80[1] = v67;
  v80[2] = sub_10005CBC4;
  v80[3] = v68;
  v80[4] = sub_100243220;
  v80[5] = 0;
  v80[6] = sub_10005CBC4;
  v80[7] = v69;
  v80[8] = sub_10005CBC4;
  v80[9] = v70;
  v80[10] = sub_100057E68;
  v80[11] = v72;
  v80[12] = sub_10005CBC4;
  v80[13] = v73;
  v80[14] = sub_10005CBC4;
  v80[15] = v74;
  v80[16] = sub_1000585A4;
  v80[17] = v77;
  v113 = v67;
  v81 = v68;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(oslogb, bufb))
  {
    v98 = v73;
    v99 = v72;
    v82 = (uint8_t *)sub_1006948A0(32);
    v83 = swift_slowAlloc(8, -1);
    v84 = swift_slowAlloc(64, -1);
    v115 = v83;
    v116 = v84;
    *(_WORD *)v82 = 770;
    v114 = v82 + 2;
    v117 = (uint64_t (*)())sub_100057E50;
    v118 = v113;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v117, (uint64_t)&v114, (uint64_t)&v115, (uint64_t)&v116);
    swift_release();
    v117 = sub_10005CBC4;
    v118 = v81;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v117, (uint64_t)&v114, (uint64_t)&v115, (uint64_t)&v116);
    swift_release();
    v117 = sub_100243220;
    v118 = 0;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v117, (uint64_t)&v114, (uint64_t)&v115, (uint64_t)&v116);
    v117 = sub_10005CBC4;
    v118 = v69;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v117, (uint64_t)&v114, (uint64_t)&v115, (uint64_t)&v116);
    swift_release();
    v117 = sub_10005CBC4;
    v118 = v70;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v117, (uint64_t)&v114, (uint64_t)&v115, (uint64_t)&v116);
    swift_release();
    v117 = (uint64_t (*)())sub_100057E68;
    v118 = v99;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v117, (uint64_t)&v114, (uint64_t)&v115, (uint64_t)&v116);
    swift_release();
    v117 = sub_10005CBC4;
    v118 = v98;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v117, (uint64_t)&v114, (uint64_t)&v115, (uint64_t)&v116);
    swift_release();
    v117 = sub_10005CBC4;
    v118 = v74;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v117, (uint64_t)&v114, (uint64_t)&v115, (uint64_t)&v116);
    swift_release();
    v117 = (uint64_t (*)())sub_1000585A4;
    v118 = v77;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v117, (uint64_t)&v114, (uint64_t)&v115, (uint64_t)&v116);
    v92 = *(uint8_t **)(v0 + 1904);
    v93 = *(_QWORD *)(v0 + 1808);
    v94 = v83;
    v95 = *(_QWORD *)(v0 + 1800);
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, oslogb, bufb, "%{public}s %{public}s Error %{public}@", v82, 0x20u);
    v96 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v94, 1, v96);
    swift_slowDealloc(v94, -1, -1);
    swift_arrayDestroy(v84, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v84, -1, -1);
    sub_100694894((uint64_t)v82);

    v97 = *(void (**)(uint8_t *, uint64_t))(v93 + 8);
    v97(v92, v95);
  }
  else
  {
    bufd = *(uint8_t **)(v0 + 1904);
    v86 = *(_QWORD *)(v0 + 1808);
    v87 = *(_QWORD *)(v0 + 1800);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();

    v97 = *(void (**)(uint8_t *, uint64_t))(v86 + 8);
    v97(bufd, v87);
  }
  *(_QWORD *)(v0 + 2456) = v97;
  v88 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of PeripheralProtocol.cancelConnection()[1]);
  *(_QWORD *)(v0 + 2464) = v88;
  *v88 = v0;
  v88[1] = sub_10023ED18;
  return dispatch thunk of PeripheralProtocol.cancelConnection()(*(_QWORD *)(v0 + 2008), *(_QWORD *)(v0 + 2016));
}

uint64_t sub_100233078()
{
  _QWORD *v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(uint64_t, uint64_t);
  uint64_t v44;
  uint64_t v45;
  NSObject *oslog;
  os_log_type_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint8_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t (*v54)();
  uint64_t v55;

  v1 = v0[275];
  v2 = v0[274];
  v3 = v0[271];
  v4 = v0[270];
  swift_release();
  swift_release();
  sub_100243B24(v2, v1, 1);
  sub_100243B24(v4, v3, 0);
  sub_100243B24(v4, v3, 0);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 26);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 56);
  v5 = v0[277];
  v0[303] = v5;
  v6 = v0[238];
  v7 = v0[226];
  v8 = v0[225];
  v9 = v0[213];
  v10 = sub_10022450C();
  v0[304] = v10;
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16);
  v0[305] = v11;
  v11(v6, v10, v8);
  v12 = swift_allocObject(&unk_10105FF70, 32, 7);
  *(_QWORD *)(v12 + 16) = sub_100243954;
  *(_QWORD *)(v12 + 24) = v9;
  v49 = swift_allocObject(&unk_10105FF98, 24, 7);
  *(_QWORD *)(v49 + 16) = v5;
  swift_retain();
  v13 = swift_errorRetain(v5);
  oslog = Logger.logObject.getter(v13);
  v47 = static os_log_type_t.error.getter(oslog);
  v14 = swift_allocObject(&unk_10105FFC0, 17, 7);
  *(_BYTE *)(v14 + 16) = 34;
  v15 = swift_allocObject(&unk_10105FFE8, 17, 7);
  *(_BYTE *)(v15 + 16) = 8;
  v16 = swift_allocObject(&unk_101060010, 17, 7);
  *(_BYTE *)(v16 + 16) = 34;
  v17 = swift_allocObject(&unk_101060038, 17, 7);
  *(_BYTE *)(v17 + 16) = 8;
  v18 = swift_allocObject(&unk_101060060, 32, 7);
  *(_QWORD *)(v18 + 16) = sub_100243990;
  *(_QWORD *)(v18 + 24) = v12;
  v19 = swift_allocObject(&unk_101060088, 32, 7);
  *(_QWORD *)(v19 + 16) = sub_10001D850;
  *(_QWORD *)(v19 + 24) = v18;
  v20 = swift_allocObject(&unk_1010600B0, 17, 7);
  *(_BYTE *)(v20 + 16) = 66;
  v21 = swift_allocObject(&unk_1010600D8, 17, 7);
  *(_BYTE *)(v21 + 16) = 8;
  v22 = swift_allocObject(&unk_101060100, 32, 7);
  *(_QWORD *)(v22 + 16) = sub_100245648;
  *(_QWORD *)(v22 + 24) = v49;
  v23 = swift_allocObject(&unk_101060128, 32, 7);
  *(_QWORD *)(v23 + 16) = sub_10005859C;
  *(_QWORD *)(v23 + 24) = v22;
  v24 = swift_allocObject(&unk_101060150, 32, 7);
  *(_QWORD *)(v24 + 16) = sub_10001D850;
  *(_QWORD *)(v24 + 24) = v23;
  v25 = sub_10001A9A8(&qword_1010EC538);
  v0[306] = v25;
  v26 = swift_allocObject(v25, 176, 7);
  sub_100882D28(v26, 9);
  *v27 = sub_100057E50;
  v27[1] = v14;
  v27[2] = sub_10005CBC4;
  v27[3] = v15;
  v27[4] = sub_100243220;
  v27[5] = 0;
  v27[6] = sub_10005CBC4;
  v27[7] = v16;
  v27[8] = sub_10005CBC4;
  v27[9] = v17;
  v27[10] = sub_100057E68;
  v27[11] = v19;
  v27[12] = sub_10005CBC4;
  v27[13] = v20;
  v27[14] = sub_10005CBC4;
  v27[15] = v21;
  v27[16] = sub_1000585A4;
  v27[17] = v24;
  v50 = v14;
  swift_retain();
  swift_retain();
  v28 = v16;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(oslog, v47))
  {
    v29 = v15;
    v30 = v28;
    v44 = v20;
    v45 = v19;
    v31 = (uint8_t *)sub_1006948A0(32);
    v32 = swift_slowAlloc(8, -1);
    v33 = swift_slowAlloc(64, -1);
    v52 = v32;
    v53 = v33;
    *(_WORD *)v31 = 770;
    v51 = v31 + 2;
    v54 = (uint64_t (*)())sub_100057E50;
    v55 = v50;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v54, (uint64_t)&v51, (uint64_t)&v52, (uint64_t)&v53);
    swift_release();
    v54 = sub_10005CBC4;
    v55 = v29;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v54, (uint64_t)&v51, (uint64_t)&v52, (uint64_t)&v53);
    swift_release();
    v54 = sub_100243220;
    v55 = 0;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v54, (uint64_t)&v51, (uint64_t)&v52, (uint64_t)&v53);
    v54 = sub_10005CBC4;
    v55 = v30;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v54, (uint64_t)&v51, (uint64_t)&v52, (uint64_t)&v53);
    swift_release();
    v54 = sub_10005CBC4;
    v55 = v17;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v54, (uint64_t)&v51, (uint64_t)&v52, (uint64_t)&v53);
    swift_release();
    v54 = (uint64_t (*)())sub_100057E68;
    v55 = v45;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v54, (uint64_t)&v51, (uint64_t)&v52, (uint64_t)&v53);
    swift_release();
    v54 = sub_10005CBC4;
    v55 = v44;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v54, (uint64_t)&v51, (uint64_t)&v52, (uint64_t)&v53);
    swift_release();
    v54 = sub_10005CBC4;
    v55 = v21;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v54, (uint64_t)&v51, (uint64_t)&v52, (uint64_t)&v53);
    swift_release();
    v54 = (uint64_t (*)())sub_1000585A4;
    v55 = v24;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v54, (uint64_t)&v51, (uint64_t)&v52, (uint64_t)&v53);
    v38 = v0[238];
    v39 = v0[226];
    v40 = v32;
    v41 = v0[225];
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, oslog, v47, "%{public}s %{public}s Error %{public}@", v31, 0x20u);
    v42 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v40, 1, v42);
    swift_slowDealloc(v40, -1, -1);
    swift_arrayDestroy(v33, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v33, -1, -1);
    sub_100694894((uint64_t)v31);

    v43 = *(void (**)(uint64_t, uint64_t))(v39 + 8);
    v43(v38, v41);
  }
  else
  {
    v48 = v0[238];
    v34 = v0[226];
    v35 = v0[225];
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();

    v43 = *(void (**)(uint64_t, uint64_t))(v34 + 8);
    v43(v48, v35);
  }
  v0[307] = v43;
  v36 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of PeripheralProtocol.cancelConnection()[1]);
  v0[308] = v36;
  *v36 = v0;
  v36[1] = sub_10023ED18;
  return dispatch thunk of PeripheralProtocol.cancelConnection()(v0[251], v0[252]);
}

uint64_t sub_100233798()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 2240);
  *(_QWORD *)(*(_QWORD *)v1 + 2248) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = v2[279];
    v5 = v2[278];
    sub_100243B24(v2[274], v2[275], 1);
    sub_100243B24(v5, v4, 2);
    v6 = sub_100234820;
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v2 + 80);
    v6 = sub_100233834;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_100233834()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  os_log_type_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint8_t *v46;
  void (*v47)(uint64_t, uint64_t);
  uint64_t v48;
  uint64_t v49;
  void (*v50)(uint64_t, uint64_t);
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void (*v68)(uint64_t, uint64_t, uint64_t);
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  uint8_t *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  uint8_t *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  void (*v101)(uint8_t *, uint64_t);
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  os_log_t oslog;
  os_log_t osloga;
  NSObject *oslogb;
  uint8_t *bufc;
  os_log_type_t buf;
  uint8_t *bufa;
  os_log_type_t bufb;
  uint8_t *bufd;
  uint8_t *bufe;
  NSObject *v115;
  _QWORD *v116;
  uint64_t v117;
  uint64_t v118;
  uint8_t *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t (*v122)();
  uint64_t v123;

  v1 = *(_QWORD *)(v0 + 2152);
  sub_100057DB8(v0 + 592, v0 + 688);
  if (swift_dynamicCast(v0 + 1552, v0 + 688, v1, &type metadata for PoshAccessoryNonOwnerCommand, 6))
  {
    v2 = *(_QWORD *)(v0 + 1552);
    *(_QWORD *)(v0 + 2256) = v2;
    v3 = *(unsigned __int8 *)(v0 + 1568);
    if (v3 == 3)
    {
      bufc = *(uint8_t **)(v0 + 2056);
      v4 = *(_QWORD *)(v0 + 1704);
      (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 2048))(*(_QWORD *)(v0 + 1968), *(_QWORD *)(v0 + 2040), *(_QWORD *)(v0 + 1800));
      v5 = swift_allocObject(&unk_101060B78, 32, 7);
      *(_QWORD *)(v5 + 16) = sub_100243954;
      *(_QWORD *)(v5 + 24) = v4;
      v6 = swift_allocObject(&unk_101060BA0, 24, 7);
      *(_QWORD *)(v6 + 16) = v2;
      v7 = swift_retain();
      v115 = Logger.logObject.getter(v7);
      v8 = static os_log_type_t.default.getter(v115);
      v9 = swift_allocObject(&unk_101060BC8, 17, 7);
      *(_BYTE *)(v9 + 16) = 34;
      v10 = swift_allocObject(&unk_101060BF0, 17, 7);
      *(_BYTE *)(v10 + 16) = 8;
      v11 = swift_allocObject(&unk_101060C18, 32, 7);
      *(_QWORD *)(v11 + 16) = sub_100245488;
      *(_QWORD *)(v11 + 24) = v5;
      v12 = swift_allocObject(&unk_101060C40, 32, 7);
      *(_QWORD *)(v12 + 16) = sub_10005CBA4;
      *(_QWORD *)(v12 + 24) = v11;
      v13 = swift_allocObject(&unk_101060C68, 17, 7);
      *(_BYTE *)(v13 + 16) = 0;
      v14 = swift_allocObject(&unk_101060C90, 17, 7);
      *(_BYTE *)(v14 + 16) = 8;
      v15 = swift_allocObject(&unk_101060CB8, 32, 7);
      *(_QWORD *)(v15 + 16) = sub_100243D00;
      *(_QWORD *)(v15 + 24) = v6;
      v16 = swift_allocObject(&unk_101060CE0, 32, 7);
      *(_QWORD *)(v16 + 16) = sub_1000584DC;
      *(_QWORD *)(v16 + 24) = v15;
      v17 = swift_allocObject(bufc, 128, 7);
      sub_100882D28(v17, 6);
      *v18 = sub_10005CBC4;
      v18[1] = v9;
      v18[2] = sub_10005CBC4;
      v18[3] = v10;
      v18[4] = sub_10005CBB4;
      v18[5] = v12;
      v18[6] = sub_10005CBC4;
      v18[7] = v13;
      v18[8] = sub_10005CBC4;
      v18[9] = v14;
      v18[10] = sub_1000584E4;
      v18[11] = v16;
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_bridgeObjectRelease();
      buf = v8;
      if (!os_log_type_enabled(v115, v8))
      {
        bufe = *(uint8_t **)(v0 + 2064);
        v93 = *(_QWORD *)(v0 + 1968);
        v94 = *(_QWORD *)(v0 + 1800);
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();

        ((void (*)(uint64_t, uint64_t))bufe)(v93, v94);
LABEL_25:
        *(_QWORD *)(v0 + 856) = &type metadata for PoshAccessoryNonOwnerCommand;
        *(_OWORD *)(v0 + 864) = *(_OWORD *)(v0 + 2120);
        *(_OWORD *)(v0 + 832) = xmmword_100E2E3E0;
        *(_BYTE *)(v0 + 848) = 10;
        v95 = (_QWORD *)swift_task_alloc(dword_1010F3894);
        *(_QWORD *)(v0 + 2264) = v95;
        *v95 = v0;
        v95[1] = sub_100234F68;
        return sub_10023FD28(v0 + 784, *(_QWORD *)(v0 + 2104), v0 + 832, (uint64_t)&type metadata for PoshAccessoryNonOwnerCommand, *(_QWORD *)(v0 + 2120), *(_QWORD *)(v0 + 2128), 0);
      }
      v105 = v14;
      oslog = (os_log_t)v13;
      v19 = *(_QWORD *)(v0 + 2248);
      v20 = (uint8_t *)sub_1006948A0(22);
      v21 = swift_slowAlloc(32, -1);
      v120 = 0;
      v121 = v21;
      *(_WORD *)v20 = 514;
      v119 = v20 + 2;
      v122 = sub_10005CBC4;
      v123 = v9;
      sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v122, (uint64_t)&v119, (uint64_t)&v120, (uint64_t)&v121);
      if (!v19)
      {
        swift_release();
        v122 = sub_10005CBC4;
        v123 = v10;
        sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v122, (uint64_t)&v119, (uint64_t)&v120, (uint64_t)&v121);
        swift_release();
        v122 = sub_10005CBB4;
        v123 = v12;
        sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v122, (uint64_t)&v119, (uint64_t)&v120, (uint64_t)&v121);
        swift_release();
        v122 = sub_10005CBC4;
        v123 = (uint64_t)oslog;
        sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v122, (uint64_t)&v119, (uint64_t)&v120, (uint64_t)&v121);
        swift_release();
        v122 = sub_10005CBC4;
        v123 = v105;
        sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v122, (uint64_t)&v119, (uint64_t)&v120, (uint64_t)&v121);
        swift_release();
        v122 = (uint64_t (*)())sub_1000584E4;
        v123 = v16;
        sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v122, (uint64_t)&v119, (uint64_t)&v120, (uint64_t)&v121);
        v22 = v21;
        v23 = *(void (**)(uint64_t, uint64_t))(v0 + 2064);
        v24 = *(_QWORD *)(v0 + 1968);
        v25 = *(_QWORD *)(v0 + 1800);
        swift_release();
        _os_log_impl((void *)&_mh_execute_header, v115, buf, "%{public}s category: %llu", v20, 0x16u);
        swift_arrayDestroy(v22, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v22, -1, -1);
        sub_100694894((uint64_t)v20);

        v23(v24, v25);
        goto LABEL_25;
      }
      return swift_errorRelease(v19);
    }
    v116 = (_QWORD *)(v0 + 592);
    v31 = *(_QWORD *)(v0 + 1560);
    v32 = *(_QWORD *)(v0 + 2232);
    v33 = *(_QWORD *)(v0 + 2224);
    sub_100243B24(*(_QWORD *)(v0 + 2192), *(_QWORD *)(v0 + 2200), 1);
    sub_100243B24(v33, v32, 2);
    v28 = v2;
    v29 = v31;
    v30 = v3;
  }
  else
  {
    v116 = (_QWORD *)(v0 + 592);
    v26 = *(_QWORD *)(v0 + 2232);
    v27 = *(_QWORD *)(v0 + 2224);
    sub_100243B24(*(_QWORD *)(v0 + 2192), *(_QWORD *)(v0 + 2200), 1);
    v28 = v27;
    v29 = v26;
    v30 = 2;
  }
  sub_100243B24(v28, v29, v30);
  v34 = *(_QWORD *)(v0 + 2056);
  v35 = *(_QWORD *)(v0 + 1704);
  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 2048))(*(_QWORD *)(v0 + 1840), *(_QWORD *)(v0 + 2040), *(_QWORD *)(v0 + 1800));
  v36 = swift_allocObject(&unk_101060AB0, 32, 7);
  *(_QWORD *)(v36 + 16) = sub_100243954;
  *(_QWORD *)(v36 + 24) = v35;
  v37 = swift_retain();
  v38 = Logger.logObject.getter(v37);
  v39 = static os_log_type_t.error.getter(v38);
  v40 = swift_allocObject(&unk_101060AD8, 17, 7);
  *(_BYTE *)(v40 + 16) = 34;
  v41 = swift_allocObject(&unk_101060B00, 17, 7);
  *(_BYTE *)(v41 + 16) = 8;
  v42 = swift_allocObject(&unk_101060B28, 32, 7);
  *(_QWORD *)(v42 + 16) = sub_100245488;
  *(_QWORD *)(v42 + 24) = v36;
  v43 = swift_allocObject(&unk_101060B50, 32, 7);
  *(_QWORD *)(v43 + 16) = sub_10005CBA4;
  *(_QWORD *)(v43 + 24) = v42;
  v44 = swift_allocObject(v34, 80, 7);
  sub_100882D28(v44, 3);
  *v45 = sub_10005CBC4;
  v45[1] = v40;
  v45[2] = sub_10005CBC4;
  v45[3] = v41;
  v45[4] = sub_10005CBB4;
  v45[5] = v43;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v38, v39))
  {
    v19 = *(_QWORD *)(v0 + 2248);
    v46 = (uint8_t *)sub_1006948A0(12);
    v120 = 0;
    v121 = swift_slowAlloc(32, -1);
    osloga = (os_log_t)v121;
    bufa = v46;
    *(_WORD *)v46 = 258;
    v119 = v46 + 2;
    v122 = sub_10005CBC4;
    v123 = v40;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v122, (uint64_t)&v119, (uint64_t)&v120, (uint64_t)&v121);
    if (v19)
      return swift_errorRelease(v19);
    swift_release();
    v122 = sub_10005CBC4;
    v123 = v41;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v122, (uint64_t)&v119, (uint64_t)&v120, (uint64_t)&v121);
    swift_release();
    v122 = sub_10005CBB4;
    v123 = v43;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v122, (uint64_t)&v119, (uint64_t)&v120, (uint64_t)&v121);
    v47 = *(void (**)(uint64_t, uint64_t))(v0 + 2064);
    v48 = *(_QWORD *)(v0 + 1840);
    v49 = *(_QWORD *)(v0 + 1800);
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, v38, v39, "%{public}s Invalid categoryCommandResponse!", bufa, 0xCu);
    swift_arrayDestroy(osloga, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(osloga, -1, -1);
    sub_100694894((uint64_t)bufa);

    v47(v48, v49);
  }
  else
  {
    v50 = *(void (**)(uint64_t, uint64_t))(v0 + 2064);
    v51 = *(_QWORD *)(v0 + 1840);
    v52 = *(_QWORD *)(v0 + 1800);
    swift_release();
    swift_release();
    swift_release();

    v50(v51, v52);
  }
  v53 = *(_QWORD *)(v0 + 2232);
  v54 = *(_QWORD *)(v0 + 2224);
  v103 = *(_QWORD *)(v0 + 2200);
  v55 = *(_QWORD *)(v0 + 2192);
  v56 = *(_QWORD *)(v0 + 2168);
  v57 = *(_QWORD *)(v0 + 2160);
  v58 = type metadata accessor for AccessoryMetadataManager.Error(0);
  v59 = sub_100006204(&qword_1010F37D8, type metadata accessor for AccessoryMetadataManager.Error, (uint64_t)&unk_100E2E588);
  v60 = swift_allocError(v58, v59, 0, 0);
  v62 = swift_storeEnumTagMultiPayload(v61, v58, 7);
  swift_willThrow(v62);
  swift_release();
  swift_release();
  sub_100243B24(v54, v53, 2);
  sub_100243B24(v55, v103, 1);
  sub_100243B24(v57, v56, 0);
  sub_100243B24(v57, v56, 0);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v116);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 400));
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 208));
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
  *(_QWORD *)(v0 + 2424) = v60;
  v63 = *(_QWORD *)(v0 + 1904);
  v64 = *(_QWORD *)(v0 + 1808);
  v65 = *(_QWORD *)(v0 + 1800);
  v66 = *(_QWORD *)(v0 + 1704);
  v67 = sub_10022450C();
  *(_QWORD *)(v0 + 2432) = v67;
  v68 = *(void (**)(uint64_t, uint64_t, uint64_t))(v64 + 16);
  *(_QWORD *)(v0 + 2440) = v68;
  v68(v63, v67, v65);
  v69 = swift_allocObject(&unk_10105FF70, 32, 7);
  *(_QWORD *)(v69 + 16) = sub_100243954;
  *(_QWORD *)(v69 + 24) = v66;
  v117 = swift_allocObject(&unk_10105FF98, 24, 7);
  *(_QWORD *)(v117 + 16) = v60;
  swift_retain();
  v70 = swift_errorRetain(v60);
  oslogb = Logger.logObject.getter(v70);
  bufb = static os_log_type_t.error.getter(oslogb);
  v71 = swift_allocObject(&unk_10105FFC0, 17, 7);
  *(_BYTE *)(v71 + 16) = 34;
  v72 = swift_allocObject(&unk_10105FFE8, 17, 7);
  *(_BYTE *)(v72 + 16) = 8;
  v73 = swift_allocObject(&unk_101060010, 17, 7);
  *(_BYTE *)(v73 + 16) = 34;
  v74 = swift_allocObject(&unk_101060038, 17, 7);
  *(_BYTE *)(v74 + 16) = 8;
  v75 = swift_allocObject(&unk_101060060, 32, 7);
  *(_QWORD *)(v75 + 16) = sub_100243990;
  *(_QWORD *)(v75 + 24) = v69;
  v76 = swift_allocObject(&unk_101060088, 32, 7);
  *(_QWORD *)(v76 + 16) = sub_10001D850;
  *(_QWORD *)(v76 + 24) = v75;
  v77 = swift_allocObject(&unk_1010600B0, 17, 7);
  *(_BYTE *)(v77 + 16) = 66;
  v78 = swift_allocObject(&unk_1010600D8, 17, 7);
  *(_BYTE *)(v78 + 16) = 8;
  v79 = swift_allocObject(&unk_101060100, 32, 7);
  *(_QWORD *)(v79 + 16) = sub_100245648;
  *(_QWORD *)(v79 + 24) = v117;
  v80 = swift_allocObject(&unk_101060128, 32, 7);
  *(_QWORD *)(v80 + 16) = sub_10005859C;
  *(_QWORD *)(v80 + 24) = v79;
  v81 = swift_allocObject(&unk_101060150, 32, 7);
  *(_QWORD *)(v81 + 16) = sub_10001D850;
  *(_QWORD *)(v81 + 24) = v80;
  v82 = sub_10001A9A8(&qword_1010EC538);
  *(_QWORD *)(v0 + 2448) = v82;
  v83 = swift_allocObject(v82, 176, 7);
  sub_100882D28(v83, 9);
  *v84 = sub_100057E50;
  v84[1] = v71;
  v84[2] = sub_10005CBC4;
  v84[3] = v72;
  v84[4] = sub_100243220;
  v84[5] = 0;
  v84[6] = sub_10005CBC4;
  v84[7] = v73;
  v84[8] = sub_10005CBC4;
  v84[9] = v74;
  v84[10] = sub_100057E68;
  v84[11] = v76;
  v84[12] = sub_10005CBC4;
  v84[13] = v77;
  v84[14] = sub_10005CBC4;
  v84[15] = v78;
  v84[16] = sub_1000585A4;
  v84[17] = v81;
  v118 = v71;
  v85 = v72;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(oslogb, bufb))
  {
    v102 = v77;
    v104 = v76;
    v86 = (uint8_t *)sub_1006948A0(32);
    v87 = swift_slowAlloc(8, -1);
    v88 = swift_slowAlloc(64, -1);
    v120 = v87;
    v121 = v88;
    *(_WORD *)v86 = 770;
    v119 = v86 + 2;
    v122 = (uint64_t (*)())sub_100057E50;
    v123 = v118;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v122, (uint64_t)&v119, (uint64_t)&v120, (uint64_t)&v121);
    swift_release();
    v122 = sub_10005CBC4;
    v123 = v85;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v122, (uint64_t)&v119, (uint64_t)&v120, (uint64_t)&v121);
    swift_release();
    v122 = sub_100243220;
    v123 = 0;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v122, (uint64_t)&v119, (uint64_t)&v120, (uint64_t)&v121);
    v122 = sub_10005CBC4;
    v123 = v73;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v122, (uint64_t)&v119, (uint64_t)&v120, (uint64_t)&v121);
    swift_release();
    v122 = sub_10005CBC4;
    v123 = v74;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v122, (uint64_t)&v119, (uint64_t)&v120, (uint64_t)&v121);
    swift_release();
    v122 = (uint64_t (*)())sub_100057E68;
    v123 = v104;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v122, (uint64_t)&v119, (uint64_t)&v120, (uint64_t)&v121);
    swift_release();
    v122 = sub_10005CBC4;
    v123 = v102;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v122, (uint64_t)&v119, (uint64_t)&v120, (uint64_t)&v121);
    swift_release();
    v122 = sub_10005CBC4;
    v123 = v78;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v122, (uint64_t)&v119, (uint64_t)&v120, (uint64_t)&v121);
    swift_release();
    v122 = (uint64_t (*)())sub_1000585A4;
    v123 = v81;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v122, (uint64_t)&v119, (uint64_t)&v120, (uint64_t)&v121);
    v96 = *(uint8_t **)(v0 + 1904);
    v97 = *(_QWORD *)(v0 + 1808);
    v98 = v87;
    v99 = *(_QWORD *)(v0 + 1800);
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, oslogb, bufb, "%{public}s %{public}s Error %{public}@", v86, 0x20u);
    v100 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v98, 1, v100);
    swift_slowDealloc(v98, -1, -1);
    swift_arrayDestroy(v88, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v88, -1, -1);
    sub_100694894((uint64_t)v86);

    v101 = *(void (**)(uint8_t *, uint64_t))(v97 + 8);
    v101(v96, v99);
  }
  else
  {
    bufd = *(uint8_t **)(v0 + 1904);
    v90 = *(_QWORD *)(v0 + 1808);
    v91 = *(_QWORD *)(v0 + 1800);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();

    v101 = *(void (**)(uint8_t *, uint64_t))(v90 + 8);
    v101(bufd, v91);
  }
  *(_QWORD *)(v0 + 2456) = v101;
  v92 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of PeripheralProtocol.cancelConnection()[1]);
  *(_QWORD *)(v0 + 2464) = v92;
  *v92 = v0;
  v92[1] = sub_10023ED18;
  return dispatch thunk of PeripheralProtocol.cancelConnection()(*(_QWORD *)(v0 + 2008), *(_QWORD *)(v0 + 2016));
}

uint64_t sub_100234820()
{
  _QWORD *v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint8_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(uint64_t, uint64_t);
  uint64_t v46;
  uint64_t v47;
  NSObject *oslog;
  os_log_type_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint8_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t (*v56)();
  uint64_t v57;

  v1 = v0[279];
  v2 = v0[278];
  v3 = v0[275];
  v4 = v0[274];
  v5 = v0[271];
  v6 = v0[270];
  swift_release();
  swift_release();
  sub_100243B24(v2, v1, 2);
  sub_100243B24(v4, v3, 1);
  sub_100243B24(v6, v5, 0);
  sub_100243B24(v6, v5, 0);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 50);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 26);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 80);
  v7 = v0[281];
  v0[303] = v7;
  v8 = v0[238];
  v9 = v0[226];
  v10 = v0[225];
  v11 = v0[213];
  v12 = sub_10022450C();
  v0[304] = v12;
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16);
  v0[305] = v13;
  v13(v8, v12, v10);
  v14 = swift_allocObject(&unk_10105FF70, 32, 7);
  *(_QWORD *)(v14 + 16) = sub_100243954;
  *(_QWORD *)(v14 + 24) = v11;
  v51 = swift_allocObject(&unk_10105FF98, 24, 7);
  *(_QWORD *)(v51 + 16) = v7;
  swift_retain();
  v15 = swift_errorRetain(v7);
  oslog = Logger.logObject.getter(v15);
  v49 = static os_log_type_t.error.getter(oslog);
  v16 = swift_allocObject(&unk_10105FFC0, 17, 7);
  *(_BYTE *)(v16 + 16) = 34;
  v17 = swift_allocObject(&unk_10105FFE8, 17, 7);
  *(_BYTE *)(v17 + 16) = 8;
  v18 = swift_allocObject(&unk_101060010, 17, 7);
  *(_BYTE *)(v18 + 16) = 34;
  v19 = swift_allocObject(&unk_101060038, 17, 7);
  *(_BYTE *)(v19 + 16) = 8;
  v20 = swift_allocObject(&unk_101060060, 32, 7);
  *(_QWORD *)(v20 + 16) = sub_100243990;
  *(_QWORD *)(v20 + 24) = v14;
  v21 = swift_allocObject(&unk_101060088, 32, 7);
  *(_QWORD *)(v21 + 16) = sub_10001D850;
  *(_QWORD *)(v21 + 24) = v20;
  v22 = swift_allocObject(&unk_1010600B0, 17, 7);
  *(_BYTE *)(v22 + 16) = 66;
  v23 = swift_allocObject(&unk_1010600D8, 17, 7);
  *(_BYTE *)(v23 + 16) = 8;
  v24 = swift_allocObject(&unk_101060100, 32, 7);
  *(_QWORD *)(v24 + 16) = sub_100245648;
  *(_QWORD *)(v24 + 24) = v51;
  v25 = swift_allocObject(&unk_101060128, 32, 7);
  *(_QWORD *)(v25 + 16) = sub_10005859C;
  *(_QWORD *)(v25 + 24) = v24;
  v26 = swift_allocObject(&unk_101060150, 32, 7);
  *(_QWORD *)(v26 + 16) = sub_10001D850;
  *(_QWORD *)(v26 + 24) = v25;
  v27 = sub_10001A9A8(&qword_1010EC538);
  v0[306] = v27;
  v28 = swift_allocObject(v27, 176, 7);
  sub_100882D28(v28, 9);
  *v29 = sub_100057E50;
  v29[1] = v16;
  v29[2] = sub_10005CBC4;
  v29[3] = v17;
  v29[4] = sub_100243220;
  v29[5] = 0;
  v29[6] = sub_10005CBC4;
  v29[7] = v18;
  v29[8] = sub_10005CBC4;
  v29[9] = v19;
  v29[10] = sub_100057E68;
  v29[11] = v21;
  v29[12] = sub_10005CBC4;
  v29[13] = v22;
  v29[14] = sub_10005CBC4;
  v29[15] = v23;
  v29[16] = sub_1000585A4;
  v29[17] = v26;
  v52 = v16;
  swift_retain();
  swift_retain();
  v30 = v18;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(oslog, v49))
  {
    v31 = v17;
    v32 = v30;
    v46 = v22;
    v47 = v21;
    v33 = (uint8_t *)sub_1006948A0(32);
    v34 = swift_slowAlloc(8, -1);
    v35 = swift_slowAlloc(64, -1);
    v54 = v34;
    v55 = v35;
    *(_WORD *)v33 = 770;
    v53 = v33 + 2;
    v56 = (uint64_t (*)())sub_100057E50;
    v57 = v52;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v56, (uint64_t)&v53, (uint64_t)&v54, (uint64_t)&v55);
    swift_release();
    v56 = sub_10005CBC4;
    v57 = v31;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v56, (uint64_t)&v53, (uint64_t)&v54, (uint64_t)&v55);
    swift_release();
    v56 = sub_100243220;
    v57 = 0;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v56, (uint64_t)&v53, (uint64_t)&v54, (uint64_t)&v55);
    v56 = sub_10005CBC4;
    v57 = v32;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v56, (uint64_t)&v53, (uint64_t)&v54, (uint64_t)&v55);
    swift_release();
    v56 = sub_10005CBC4;
    v57 = v19;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v56, (uint64_t)&v53, (uint64_t)&v54, (uint64_t)&v55);
    swift_release();
    v56 = (uint64_t (*)())sub_100057E68;
    v57 = v47;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v56, (uint64_t)&v53, (uint64_t)&v54, (uint64_t)&v55);
    swift_release();
    v56 = sub_10005CBC4;
    v57 = v46;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v56, (uint64_t)&v53, (uint64_t)&v54, (uint64_t)&v55);
    swift_release();
    v56 = sub_10005CBC4;
    v57 = v23;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v56, (uint64_t)&v53, (uint64_t)&v54, (uint64_t)&v55);
    swift_release();
    v56 = (uint64_t (*)())sub_1000585A4;
    v57 = v26;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v56, (uint64_t)&v53, (uint64_t)&v54, (uint64_t)&v55);
    v40 = v0[238];
    v41 = v0[226];
    v42 = v34;
    v43 = v0[225];
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, oslog, v49, "%{public}s %{public}s Error %{public}@", v33, 0x20u);
    v44 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v42, 1, v44);
    swift_slowDealloc(v42, -1, -1);
    swift_arrayDestroy(v35, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v35, -1, -1);
    sub_100694894((uint64_t)v33);

    v45 = *(void (**)(uint64_t, uint64_t))(v41 + 8);
    v45(v40, v43);
  }
  else
  {
    v50 = v0[238];
    v36 = v0[226];
    v37 = v0[225];
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();

    v45 = *(void (**)(uint64_t, uint64_t))(v36 + 8);
    v45(v50, v37);
  }
  v0[307] = v45;
  v38 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of PeripheralProtocol.cancelConnection()[1]);
  v0[308] = v38;
  *v38 = v0;
  v38[1] = sub_10023ED18;
  return dispatch thunk of PeripheralProtocol.cancelConnection()(v0[251], v0[252]);
}

uint64_t sub_100234F68()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 2264);
  *(_QWORD *)(*(_QWORD *)v1 + 2272) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = v2[279];
    v5 = v2[278];
    sub_100243B24(v2[274], v2[275], 1);
    sub_100243B24(v5, v4, 2);
    v6 = sub_100236038;
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v2 + 104);
    v6 = sub_100235004;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_100235004()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  os_log_type_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint8_t *v47;
  void (*v48)(uint64_t, uint64_t);
  uint64_t v49;
  uint64_t v50;
  void (*v51)(uint64_t, uint64_t);
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void (*v69)(uint64_t, uint64_t, uint64_t);
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  uint8_t *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  uint8_t *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  void (*v102)(uint8_t *, uint64_t);
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  os_log_t oslog;
  os_log_t osloga;
  NSObject *oslogb;
  NSObject *buf;
  uint8_t *bufa;
  os_log_type_t bufb;
  uint8_t *bufc;
  uint64_t v114;
  os_log_type_t v115;
  _QWORD *v116;
  uint64_t v117;
  uint64_t v118;
  void (*v119)(uint64_t, uint64_t);
  uint8_t *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t (*v123)();
  uint64_t v124;

  v1 = *(_QWORD *)(v0 + 2152);
  sub_100057DB8(v0 + 784, v0 + 880);
  if (swift_dynamicCast(v0 + 1528, v0 + 880, v1, &type metadata for PoshAccessoryNonOwnerCommand, 6))
  {
    v2 = *(_QWORD *)(v0 + 1528);
    *(_QWORD *)(v0 + 2280) = v2;
    v3 = *(unsigned __int8 *)(v0 + 1544);
    if (v3 == 4)
    {
      v114 = *(_QWORD *)(v0 + 2056);
      v4 = *(_QWORD *)(v0 + 1704);
      (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 2048))(*(_QWORD *)(v0 + 1960), *(_QWORD *)(v0 + 2040), *(_QWORD *)(v0 + 1800));
      v5 = swift_allocObject(&unk_101060DD0, 32, 7);
      *(_QWORD *)(v5 + 16) = sub_100243954;
      *(_QWORD *)(v5 + 24) = v4;
      v6 = swift_allocObject(&unk_101060DF8, 20, 7);
      *(_WORD *)(v6 + 16) = v2;
      *(_BYTE *)(v6 + 18) = BYTE2(v2);
      *(_BYTE *)(v6 + 19) = BYTE3(v2);
      v7 = swift_allocObject(&unk_101060E20, 32, 7);
      *(_QWORD *)(v7 + 16) = sub_100243D78;
      *(_QWORD *)(v7 + 24) = v6;
      v8 = swift_retain();
      buf = Logger.logObject.getter(v8);
      v9 = static os_log_type_t.default.getter(buf);
      v10 = swift_allocObject(&unk_101060E48, 17, 7);
      *(_BYTE *)(v10 + 16) = 34;
      v11 = swift_allocObject(&unk_101060E70, 17, 7);
      *(_BYTE *)(v11 + 16) = 8;
      v12 = swift_allocObject(&unk_101060E98, 32, 7);
      *(_QWORD *)(v12 + 16) = sub_100245488;
      *(_QWORD *)(v12 + 24) = v5;
      v13 = swift_allocObject(&unk_101060EC0, 32, 7);
      *(_QWORD *)(v13 + 16) = sub_10005CBA4;
      *(_QWORD *)(v13 + 24) = v12;
      v14 = swift_allocObject(&unk_101060EE8, 17, 7);
      *(_BYTE *)(v14 + 16) = 32;
      v15 = swift_allocObject(&unk_101060F10, 17, 7);
      *(_BYTE *)(v15 + 16) = 8;
      v16 = swift_allocObject(&unk_101060F38, 32, 7);
      *(_QWORD *)(v16 + 16) = sub_100243D84;
      *(_QWORD *)(v16 + 24) = v7;
      v17 = swift_allocObject(&unk_101060F60, 32, 7);
      *(_QWORD *)(v17 + 16) = sub_10005CBA4;
      *(_QWORD *)(v17 + 24) = v16;
      v18 = swift_allocObject(v114, 128, 7);
      sub_100882D28(v18, 6);
      *v19 = sub_10005CBC4;
      v19[1] = v10;
      v19[2] = sub_10005CBC4;
      v19[3] = v11;
      v19[4] = sub_10005CBB4;
      v19[5] = v13;
      v19[6] = sub_10005CBC4;
      v19[7] = v14;
      v19[8] = sub_10005CBC4;
      v19[9] = v15;
      v19[10] = sub_10005CBB4;
      v19[11] = v17;
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_bridgeObjectRelease();
      v115 = v9;
      if (!os_log_type_enabled(buf, v9))
      {
        v119 = *(void (**)(uint64_t, uint64_t))(v0 + 2064);
        v94 = *(_QWORD *)(v0 + 1960);
        v95 = *(_QWORD *)(v0 + 1800);
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();

        v119(v94, v95);
LABEL_25:
        *(_QWORD *)(v0 + 1048) = &type metadata for PoshAccessoryNonOwnerCommand;
        *(_OWORD *)(v0 + 1056) = *(_OWORD *)(v0 + 2120);
        *(_OWORD *)(v0 + 1024) = xmmword_100E2E3F0;
        *(_BYTE *)(v0 + 1040) = 10;
        v96 = (_QWORD *)swift_task_alloc(dword_1010F3894);
        *(_QWORD *)(v0 + 2288) = v96;
        *v96 = v0;
        v96[1] = sub_100236790;
        return sub_10023FD28(v0 + 976, *(_QWORD *)(v0 + 2104), v0 + 1024, (uint64_t)&type metadata for PoshAccessoryNonOwnerCommand, *(_QWORD *)(v0 + 2120), *(_QWORD *)(v0 + 2128), 0);
      }
      v106 = v15;
      oslog = (os_log_t)v14;
      v20 = *(_QWORD *)(v0 + 2272);
      v21 = (uint8_t *)sub_1006948A0(22);
      v22 = swift_slowAlloc(64, -1);
      v121 = 0;
      v122 = v22;
      *(_WORD *)v21 = 514;
      v120 = v21 + 2;
      v123 = sub_10005CBC4;
      v124 = v10;
      sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v123, (uint64_t)&v120, (uint64_t)&v121, (uint64_t)&v122);
      if (!v20)
      {
        swift_release();
        v123 = sub_10005CBC4;
        v124 = v11;
        sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v123, (uint64_t)&v120, (uint64_t)&v121, (uint64_t)&v122);
        swift_release();
        v123 = sub_10005CBB4;
        v124 = v13;
        sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v123, (uint64_t)&v120, (uint64_t)&v121, (uint64_t)&v122);
        swift_release();
        v123 = sub_10005CBC4;
        v124 = (uint64_t)oslog;
        sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v123, (uint64_t)&v120, (uint64_t)&v121, (uint64_t)&v122);
        swift_release();
        v123 = sub_10005CBC4;
        v124 = v106;
        sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v123, (uint64_t)&v120, (uint64_t)&v121, (uint64_t)&v122);
        swift_release();
        v123 = sub_10005CBB4;
        v124 = v17;
        sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v123, (uint64_t)&v120, (uint64_t)&v121, (uint64_t)&v122);
        v23 = v22;
        v24 = *(void (**)(uint64_t, uint64_t))(v0 + 2064);
        v25 = *(_QWORD *)(v0 + 1960);
        v26 = *(_QWORD *)(v0 + 1800);
        swift_release();
        _os_log_impl((void *)&_mh_execute_header, buf, v115, "%{public}s protocolVersion: %s", v21, 0x16u);
        swift_arrayDestroy(v23, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v23, -1, -1);
        sub_100694894((uint64_t)v21);

        v24(v25, v26);
        goto LABEL_25;
      }
      return swift_errorRelease(v20);
    }
    v116 = (_QWORD *)(v0 + 784);
    v32 = *(_QWORD *)(v0 + 1536);
    v33 = *(_QWORD *)(v0 + 2232);
    v34 = *(_QWORD *)(v0 + 2224);
    sub_100243B24(*(_QWORD *)(v0 + 2192), *(_QWORD *)(v0 + 2200), 1);
    sub_100243B24(v34, v33, 2);
    v29 = v2;
    v30 = v32;
    v31 = v3;
  }
  else
  {
    v116 = (_QWORD *)(v0 + 784);
    v27 = *(_QWORD *)(v0 + 2232);
    v28 = *(_QWORD *)(v0 + 2224);
    sub_100243B24(*(_QWORD *)(v0 + 2192), *(_QWORD *)(v0 + 2200), 1);
    v29 = v28;
    v30 = v27;
    v31 = 2;
  }
  sub_100243B24(v29, v30, v31);
  v35 = *(_QWORD *)(v0 + 2056);
  v36 = *(_QWORD *)(v0 + 1704);
  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 2048))(*(_QWORD *)(v0 + 1848), *(_QWORD *)(v0 + 2040), *(_QWORD *)(v0 + 1800));
  v37 = swift_allocObject(&unk_101060D08, 32, 7);
  *(_QWORD *)(v37 + 16) = sub_100243954;
  *(_QWORD *)(v37 + 24) = v36;
  v38 = swift_retain();
  v39 = Logger.logObject.getter(v38);
  v40 = static os_log_type_t.error.getter(v39);
  v41 = swift_allocObject(&unk_101060D30, 17, 7);
  *(_BYTE *)(v41 + 16) = 34;
  v42 = swift_allocObject(&unk_101060D58, 17, 7);
  *(_BYTE *)(v42 + 16) = 8;
  v43 = swift_allocObject(&unk_101060D80, 32, 7);
  *(_QWORD *)(v43 + 16) = sub_100245488;
  *(_QWORD *)(v43 + 24) = v37;
  v44 = swift_allocObject(&unk_101060DA8, 32, 7);
  *(_QWORD *)(v44 + 16) = sub_10005CBA4;
  *(_QWORD *)(v44 + 24) = v43;
  v45 = swift_allocObject(v35, 80, 7);
  sub_100882D28(v45, 3);
  *v46 = sub_10005CBC4;
  v46[1] = v41;
  v46[2] = sub_10005CBC4;
  v46[3] = v42;
  v46[4] = sub_10005CBB4;
  v46[5] = v44;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v39, v40))
  {
    v20 = *(_QWORD *)(v0 + 2272);
    v47 = (uint8_t *)sub_1006948A0(12);
    v121 = 0;
    v122 = swift_slowAlloc(32, -1);
    osloga = (os_log_t)v122;
    bufa = v47;
    *(_WORD *)v47 = 258;
    v120 = v47 + 2;
    v123 = sub_10005CBC4;
    v124 = v41;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v123, (uint64_t)&v120, (uint64_t)&v121, (uint64_t)&v122);
    if (v20)
      return swift_errorRelease(v20);
    swift_release();
    v123 = sub_10005CBC4;
    v124 = v42;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v123, (uint64_t)&v120, (uint64_t)&v121, (uint64_t)&v122);
    swift_release();
    v123 = sub_10005CBB4;
    v124 = v44;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v123, (uint64_t)&v120, (uint64_t)&v121, (uint64_t)&v122);
    v48 = *(void (**)(uint64_t, uint64_t))(v0 + 2064);
    v49 = *(_QWORD *)(v0 + 1848);
    v50 = *(_QWORD *)(v0 + 1800);
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, v39, v40, "%{public}s Invalid protocolVersionCommandResponse!", bufa, 0xCu);
    swift_arrayDestroy(osloga, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(osloga, -1, -1);
    sub_100694894((uint64_t)bufa);

    v48(v49, v50);
  }
  else
  {
    v51 = *(void (**)(uint64_t, uint64_t))(v0 + 2064);
    v52 = *(_QWORD *)(v0 + 1848);
    v53 = *(_QWORD *)(v0 + 1800);
    swift_release();
    swift_release();
    swift_release();

    v51(v52, v53);
  }
  v54 = *(_QWORD *)(v0 + 2232);
  v55 = *(_QWORD *)(v0 + 2224);
  v103 = *(_QWORD *)(v0 + 2200);
  v56 = *(_QWORD *)(v0 + 2192);
  v57 = *(_QWORD *)(v0 + 2168);
  v58 = *(_QWORD *)(v0 + 2160);
  v59 = type metadata accessor for AccessoryMetadataManager.Error(0);
  v60 = sub_100006204(&qword_1010F37D8, type metadata accessor for AccessoryMetadataManager.Error, (uint64_t)&unk_100E2E588);
  v61 = swift_allocError(v59, v60, 0, 0);
  v63 = swift_storeEnumTagMultiPayload(v62, v59, 7);
  swift_willThrow(v63);
  swift_release();
  swift_release();
  sub_100243B24(v55, v54, 2);
  sub_100243B24(v56, v103, 1);
  sub_100243B24(v58, v57, 0);
  sub_100243B24(v58, v57, 0);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v116);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 592));
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 400));
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 208));
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
  *(_QWORD *)(v0 + 2424) = v61;
  v64 = *(_QWORD *)(v0 + 1904);
  v65 = *(_QWORD *)(v0 + 1808);
  v66 = *(_QWORD *)(v0 + 1800);
  v67 = *(_QWORD *)(v0 + 1704);
  v68 = sub_10022450C();
  *(_QWORD *)(v0 + 2432) = v68;
  v69 = *(void (**)(uint64_t, uint64_t, uint64_t))(v65 + 16);
  *(_QWORD *)(v0 + 2440) = v69;
  v69(v64, v68, v66);
  v70 = swift_allocObject(&unk_10105FF70, 32, 7);
  *(_QWORD *)(v70 + 16) = sub_100243954;
  *(_QWORD *)(v70 + 24) = v67;
  v117 = swift_allocObject(&unk_10105FF98, 24, 7);
  *(_QWORD *)(v117 + 16) = v61;
  swift_retain();
  v71 = swift_errorRetain(v61);
  oslogb = Logger.logObject.getter(v71);
  bufb = static os_log_type_t.error.getter(oslogb);
  v72 = swift_allocObject(&unk_10105FFC0, 17, 7);
  *(_BYTE *)(v72 + 16) = 34;
  v73 = swift_allocObject(&unk_10105FFE8, 17, 7);
  *(_BYTE *)(v73 + 16) = 8;
  v74 = swift_allocObject(&unk_101060010, 17, 7);
  *(_BYTE *)(v74 + 16) = 34;
  v75 = swift_allocObject(&unk_101060038, 17, 7);
  *(_BYTE *)(v75 + 16) = 8;
  v76 = swift_allocObject(&unk_101060060, 32, 7);
  *(_QWORD *)(v76 + 16) = sub_100243990;
  *(_QWORD *)(v76 + 24) = v70;
  v77 = swift_allocObject(&unk_101060088, 32, 7);
  *(_QWORD *)(v77 + 16) = sub_10001D850;
  *(_QWORD *)(v77 + 24) = v76;
  v78 = swift_allocObject(&unk_1010600B0, 17, 7);
  *(_BYTE *)(v78 + 16) = 66;
  v79 = swift_allocObject(&unk_1010600D8, 17, 7);
  *(_BYTE *)(v79 + 16) = 8;
  v80 = swift_allocObject(&unk_101060100, 32, 7);
  *(_QWORD *)(v80 + 16) = sub_100245648;
  *(_QWORD *)(v80 + 24) = v117;
  v81 = swift_allocObject(&unk_101060128, 32, 7);
  *(_QWORD *)(v81 + 16) = sub_10005859C;
  *(_QWORD *)(v81 + 24) = v80;
  v82 = swift_allocObject(&unk_101060150, 32, 7);
  *(_QWORD *)(v82 + 16) = sub_10001D850;
  *(_QWORD *)(v82 + 24) = v81;
  v83 = sub_10001A9A8(&qword_1010EC538);
  *(_QWORD *)(v0 + 2448) = v83;
  v84 = swift_allocObject(v83, 176, 7);
  sub_100882D28(v84, 9);
  *v85 = sub_100057E50;
  v85[1] = v72;
  v85[2] = sub_10005CBC4;
  v85[3] = v73;
  v85[4] = sub_100243220;
  v85[5] = 0;
  v85[6] = sub_10005CBC4;
  v85[7] = v74;
  v85[8] = sub_10005CBC4;
  v85[9] = v75;
  v85[10] = sub_100057E68;
  v85[11] = v77;
  v85[12] = sub_10005CBC4;
  v85[13] = v78;
  v85[14] = sub_10005CBC4;
  v85[15] = v79;
  v85[16] = sub_1000585A4;
  v85[17] = v82;
  v118 = v72;
  v86 = v73;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(oslogb, bufb))
  {
    v104 = v78;
    v105 = v77;
    v87 = (uint8_t *)sub_1006948A0(32);
    v88 = swift_slowAlloc(8, -1);
    v89 = swift_slowAlloc(64, -1);
    v121 = v88;
    v122 = v89;
    *(_WORD *)v87 = 770;
    v120 = v87 + 2;
    v123 = (uint64_t (*)())sub_100057E50;
    v124 = v118;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v123, (uint64_t)&v120, (uint64_t)&v121, (uint64_t)&v122);
    swift_release();
    v123 = sub_10005CBC4;
    v124 = v86;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v123, (uint64_t)&v120, (uint64_t)&v121, (uint64_t)&v122);
    swift_release();
    v123 = sub_100243220;
    v124 = 0;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v123, (uint64_t)&v120, (uint64_t)&v121, (uint64_t)&v122);
    v123 = sub_10005CBC4;
    v124 = v74;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v123, (uint64_t)&v120, (uint64_t)&v121, (uint64_t)&v122);
    swift_release();
    v123 = sub_10005CBC4;
    v124 = v75;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v123, (uint64_t)&v120, (uint64_t)&v121, (uint64_t)&v122);
    swift_release();
    v123 = (uint64_t (*)())sub_100057E68;
    v124 = v105;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v123, (uint64_t)&v120, (uint64_t)&v121, (uint64_t)&v122);
    swift_release();
    v123 = sub_10005CBC4;
    v124 = v104;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v123, (uint64_t)&v120, (uint64_t)&v121, (uint64_t)&v122);
    swift_release();
    v123 = sub_10005CBC4;
    v124 = v79;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v123, (uint64_t)&v120, (uint64_t)&v121, (uint64_t)&v122);
    swift_release();
    v123 = (uint64_t (*)())sub_1000585A4;
    v124 = v82;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v123, (uint64_t)&v120, (uint64_t)&v121, (uint64_t)&v122);
    v97 = *(uint8_t **)(v0 + 1904);
    v98 = *(_QWORD *)(v0 + 1808);
    v99 = v88;
    v100 = *(_QWORD *)(v0 + 1800);
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, oslogb, bufb, "%{public}s %{public}s Error %{public}@", v87, 0x20u);
    v101 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v99, 1, v101);
    swift_slowDealloc(v99, -1, -1);
    swift_arrayDestroy(v89, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v89, -1, -1);
    sub_100694894((uint64_t)v87);

    v102 = *(void (**)(uint8_t *, uint64_t))(v98 + 8);
    v102(v97, v100);
  }
  else
  {
    bufc = *(uint8_t **)(v0 + 1904);
    v91 = *(_QWORD *)(v0 + 1808);
    v92 = *(_QWORD *)(v0 + 1800);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();

    v102 = *(void (**)(uint8_t *, uint64_t))(v91 + 8);
    v102(bufc, v92);
  }
  *(_QWORD *)(v0 + 2456) = v102;
  v93 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of PeripheralProtocol.cancelConnection()[1]);
  *(_QWORD *)(v0 + 2464) = v93;
  *v93 = v0;
  v93[1] = sub_10023ED18;
  return dispatch thunk of PeripheralProtocol.cancelConnection()(*(_QWORD *)(v0 + 2008), *(_QWORD *)(v0 + 2016));
}

uint64_t sub_100236038()
{
  _QWORD *v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint8_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(uint64_t, uint64_t);
  uint64_t v46;
  uint64_t v47;
  NSObject *oslog;
  os_log_type_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint8_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t (*v56)();
  uint64_t v57;

  v1 = v0[279];
  v2 = v0[278];
  v3 = v0[275];
  v4 = v0[274];
  v5 = v0[271];
  v6 = v0[270];
  swift_release();
  swift_release();
  sub_100243B24(v2, v1, 2);
  sub_100243B24(v4, v3, 1);
  sub_100243B24(v6, v5, 0);
  sub_100243B24(v6, v5, 0);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 74);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 50);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 26);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 104);
  v7 = v0[284];
  v0[303] = v7;
  v8 = v0[238];
  v9 = v0[226];
  v10 = v0[225];
  v11 = v0[213];
  v12 = sub_10022450C();
  v0[304] = v12;
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16);
  v0[305] = v13;
  v13(v8, v12, v10);
  v14 = swift_allocObject(&unk_10105FF70, 32, 7);
  *(_QWORD *)(v14 + 16) = sub_100243954;
  *(_QWORD *)(v14 + 24) = v11;
  v51 = swift_allocObject(&unk_10105FF98, 24, 7);
  *(_QWORD *)(v51 + 16) = v7;
  swift_retain();
  v15 = swift_errorRetain(v7);
  oslog = Logger.logObject.getter(v15);
  v49 = static os_log_type_t.error.getter(oslog);
  v16 = swift_allocObject(&unk_10105FFC0, 17, 7);
  *(_BYTE *)(v16 + 16) = 34;
  v17 = swift_allocObject(&unk_10105FFE8, 17, 7);
  *(_BYTE *)(v17 + 16) = 8;
  v18 = swift_allocObject(&unk_101060010, 17, 7);
  *(_BYTE *)(v18 + 16) = 34;
  v19 = swift_allocObject(&unk_101060038, 17, 7);
  *(_BYTE *)(v19 + 16) = 8;
  v20 = swift_allocObject(&unk_101060060, 32, 7);
  *(_QWORD *)(v20 + 16) = sub_100243990;
  *(_QWORD *)(v20 + 24) = v14;
  v21 = swift_allocObject(&unk_101060088, 32, 7);
  *(_QWORD *)(v21 + 16) = sub_10001D850;
  *(_QWORD *)(v21 + 24) = v20;
  v22 = swift_allocObject(&unk_1010600B0, 17, 7);
  *(_BYTE *)(v22 + 16) = 66;
  v23 = swift_allocObject(&unk_1010600D8, 17, 7);
  *(_BYTE *)(v23 + 16) = 8;
  v24 = swift_allocObject(&unk_101060100, 32, 7);
  *(_QWORD *)(v24 + 16) = sub_100245648;
  *(_QWORD *)(v24 + 24) = v51;
  v25 = swift_allocObject(&unk_101060128, 32, 7);
  *(_QWORD *)(v25 + 16) = sub_10005859C;
  *(_QWORD *)(v25 + 24) = v24;
  v26 = swift_allocObject(&unk_101060150, 32, 7);
  *(_QWORD *)(v26 + 16) = sub_10001D850;
  *(_QWORD *)(v26 + 24) = v25;
  v27 = sub_10001A9A8(&qword_1010EC538);
  v0[306] = v27;
  v28 = swift_allocObject(v27, 176, 7);
  sub_100882D28(v28, 9);
  *v29 = sub_100057E50;
  v29[1] = v16;
  v29[2] = sub_10005CBC4;
  v29[3] = v17;
  v29[4] = sub_100243220;
  v29[5] = 0;
  v29[6] = sub_10005CBC4;
  v29[7] = v18;
  v29[8] = sub_10005CBC4;
  v29[9] = v19;
  v29[10] = sub_100057E68;
  v29[11] = v21;
  v29[12] = sub_10005CBC4;
  v29[13] = v22;
  v29[14] = sub_10005CBC4;
  v29[15] = v23;
  v29[16] = sub_1000585A4;
  v29[17] = v26;
  v52 = v16;
  swift_retain();
  swift_retain();
  v30 = v18;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(oslog, v49))
  {
    v31 = v17;
    v32 = v30;
    v46 = v22;
    v47 = v21;
    v33 = (uint8_t *)sub_1006948A0(32);
    v34 = swift_slowAlloc(8, -1);
    v35 = swift_slowAlloc(64, -1);
    v54 = v34;
    v55 = v35;
    *(_WORD *)v33 = 770;
    v53 = v33 + 2;
    v56 = (uint64_t (*)())sub_100057E50;
    v57 = v52;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v56, (uint64_t)&v53, (uint64_t)&v54, (uint64_t)&v55);
    swift_release();
    v56 = sub_10005CBC4;
    v57 = v31;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v56, (uint64_t)&v53, (uint64_t)&v54, (uint64_t)&v55);
    swift_release();
    v56 = sub_100243220;
    v57 = 0;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v56, (uint64_t)&v53, (uint64_t)&v54, (uint64_t)&v55);
    v56 = sub_10005CBC4;
    v57 = v32;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v56, (uint64_t)&v53, (uint64_t)&v54, (uint64_t)&v55);
    swift_release();
    v56 = sub_10005CBC4;
    v57 = v19;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v56, (uint64_t)&v53, (uint64_t)&v54, (uint64_t)&v55);
    swift_release();
    v56 = (uint64_t (*)())sub_100057E68;
    v57 = v47;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v56, (uint64_t)&v53, (uint64_t)&v54, (uint64_t)&v55);
    swift_release();
    v56 = sub_10005CBC4;
    v57 = v46;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v56, (uint64_t)&v53, (uint64_t)&v54, (uint64_t)&v55);
    swift_release();
    v56 = sub_10005CBC4;
    v57 = v23;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v56, (uint64_t)&v53, (uint64_t)&v54, (uint64_t)&v55);
    swift_release();
    v56 = (uint64_t (*)())sub_1000585A4;
    v57 = v26;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v56, (uint64_t)&v53, (uint64_t)&v54, (uint64_t)&v55);
    v40 = v0[238];
    v41 = v0[226];
    v42 = v34;
    v43 = v0[225];
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, oslog, v49, "%{public}s %{public}s Error %{public}@", v33, 0x20u);
    v44 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v42, 1, v44);
    swift_slowDealloc(v42, -1, -1);
    swift_arrayDestroy(v35, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v35, -1, -1);
    sub_100694894((uint64_t)v33);

    v45 = *(void (**)(uint64_t, uint64_t))(v41 + 8);
    v45(v40, v43);
  }
  else
  {
    v50 = v0[238];
    v36 = v0[226];
    v37 = v0[225];
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();

    v45 = *(void (**)(uint64_t, uint64_t))(v36 + 8);
    v45(v50, v37);
  }
  v0[307] = v45;
  v38 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of PeripheralProtocol.cancelConnection()[1]);
  v0[308] = v38;
  *v38 = v0;
  v38[1] = sub_10023ED18;
  return dispatch thunk of PeripheralProtocol.cancelConnection()(v0[251], v0[252]);
}

uint64_t sub_100236790()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 2288);
  *(_QWORD *)(*(_QWORD *)v1 + 2296) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = v2[279];
    v5 = v2[278];
    sub_100243B24(v2[274], v2[275], 1);
    sub_100243B24(v5, v4, 2);
    v6 = sub_10023785C;
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v2 + 128);
    v6 = sub_10023682C;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_10023682C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  os_log_type_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint8_t *v47;
  void (*v48)(uint64_t, uint64_t);
  uint64_t v49;
  uint64_t v50;
  void (*v51)(uint64_t, uint64_t);
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void (*v69)(uint64_t, uint64_t, uint64_t);
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  uint8_t *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  uint8_t *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  void (*v102)(uint8_t *, uint64_t);
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  os_log_t oslog;
  os_log_t osloga;
  NSObject *oslogb;
  uint8_t *bufc;
  os_log_type_t buf;
  uint8_t *bufa;
  os_log_type_t bufb;
  uint8_t *bufd;
  uint8_t *bufe;
  NSObject *v116;
  _QWORD *v117;
  uint64_t v118;
  uint64_t v119;
  uint8_t *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t (*v123)();
  uint64_t v124;

  v1 = *(_QWORD *)(v0 + 2152);
  sub_100057DB8(v0 + 976, v0 + 1072);
  if (swift_dynamicCast(v0 + 1504, v0 + 1072, v1, &type metadata for PoshAccessoryNonOwnerCommand, 6))
  {
    v2 = *(_QWORD *)(v0 + 1504);
    *(_QWORD *)(v0 + 2304) = v2;
    v3 = *(unsigned __int8 *)(v0 + 1520);
    if (v3 == 8)
    {
      bufc = *(uint8_t **)(v0 + 2056);
      v4 = *(_QWORD *)(v0 + 1704);
      (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 2048))(*(_QWORD *)(v0 + 1952), *(_QWORD *)(v0 + 2040), *(_QWORD *)(v0 + 1800));
      v5 = swift_allocObject(&unk_101061050, 32, 7);
      *(_QWORD *)(v5 + 16) = sub_100243954;
      *(_QWORD *)(v5 + 24) = v4;
      v6 = swift_allocObject(&unk_101061078, 20, 7);
      *(_DWORD *)(v6 + 16) = v2;
      v7 = swift_allocObject(&unk_1010610A0, 32, 7);
      *(_QWORD *)(v7 + 16) = sub_100243D78;
      *(_QWORD *)(v7 + 24) = v6;
      v8 = swift_retain();
      v116 = Logger.logObject.getter(v8);
      v9 = static os_log_type_t.default.getter(v116);
      v10 = swift_allocObject(&unk_1010610C8, 17, 7);
      *(_BYTE *)(v10 + 16) = 34;
      v11 = swift_allocObject(&unk_1010610F0, 17, 7);
      *(_BYTE *)(v11 + 16) = 8;
      v12 = swift_allocObject(&unk_101061118, 32, 7);
      *(_QWORD *)(v12 + 16) = sub_100245488;
      *(_QWORD *)(v12 + 24) = v5;
      v13 = swift_allocObject(&unk_101061140, 32, 7);
      *(_QWORD *)(v13 + 16) = sub_10005CBA4;
      *(_QWORD *)(v13 + 24) = v12;
      v14 = swift_allocObject(&unk_101061168, 17, 7);
      *(_BYTE *)(v14 + 16) = 32;
      v15 = swift_allocObject(&unk_101061190, 17, 7);
      *(_BYTE *)(v15 + 16) = 8;
      v16 = swift_allocObject(&unk_1010611B8, 32, 7);
      *(_QWORD *)(v16 + 16) = sub_100243DFC;
      *(_QWORD *)(v16 + 24) = v7;
      v17 = swift_allocObject(&unk_1010611E0, 32, 7);
      *(_QWORD *)(v17 + 16) = sub_10005CBA4;
      *(_QWORD *)(v17 + 24) = v16;
      v18 = swift_allocObject(bufc, 128, 7);
      sub_100882D28(v18, 6);
      *v19 = sub_10005CBC4;
      v19[1] = v10;
      v19[2] = sub_10005CBC4;
      v19[3] = v11;
      v19[4] = sub_10005CBB4;
      v19[5] = v13;
      v19[6] = sub_10005CBC4;
      v19[7] = v14;
      v19[8] = sub_10005CBC4;
      v19[9] = v15;
      v19[10] = sub_10005CBB4;
      v19[11] = v17;
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_bridgeObjectRelease();
      buf = v9;
      if (!os_log_type_enabled(v116, v9))
      {
        bufe = *(uint8_t **)(v0 + 2064);
        v94 = *(_QWORD *)(v0 + 1952);
        v95 = *(_QWORD *)(v0 + 1800);
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();

        ((void (*)(uint64_t, uint64_t))bufe)(v94, v95);
LABEL_25:
        *(_QWORD *)(v0 + 1240) = &type metadata for PoshAccessoryNonOwnerCommand;
        *(_OWORD *)(v0 + 1248) = *(_OWORD *)(v0 + 2120);
        *(_OWORD *)(v0 + 1216) = xmmword_100E2E400;
        *(_BYTE *)(v0 + 1232) = 10;
        v96 = (_QWORD *)swift_task_alloc(dword_1010F3894);
        *(_QWORD *)(v0 + 2312) = v96;
        *v96 = v0;
        v96[1] = sub_100237FC0;
        return sub_10023FD28(v0 + 1168, *(_QWORD *)(v0 + 2104), v0 + 1216, (uint64_t)&type metadata for PoshAccessoryNonOwnerCommand, *(_QWORD *)(v0 + 2120), *(_QWORD *)(v0 + 2128), 0);
      }
      v106 = v15;
      oslog = (os_log_t)v14;
      v20 = *(_QWORD *)(v0 + 2296);
      v21 = (uint8_t *)sub_1006948A0(22);
      v22 = swift_slowAlloc(64, -1);
      v121 = 0;
      v122 = v22;
      *(_WORD *)v21 = 514;
      v120 = v21 + 2;
      v123 = sub_10005CBC4;
      v124 = v10;
      sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v123, (uint64_t)&v120, (uint64_t)&v121, (uint64_t)&v122);
      if (!v20)
      {
        swift_release();
        v123 = sub_10005CBC4;
        v124 = v11;
        sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v123, (uint64_t)&v120, (uint64_t)&v121, (uint64_t)&v122);
        swift_release();
        v123 = sub_10005CBB4;
        v124 = v13;
        sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v123, (uint64_t)&v120, (uint64_t)&v121, (uint64_t)&v122);
        swift_release();
        v123 = sub_10005CBC4;
        v124 = (uint64_t)oslog;
        sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v123, (uint64_t)&v120, (uint64_t)&v121, (uint64_t)&v122);
        swift_release();
        v123 = sub_10005CBC4;
        v124 = v106;
        sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v123, (uint64_t)&v120, (uint64_t)&v121, (uint64_t)&v122);
        swift_release();
        v123 = sub_10005CBB4;
        v124 = v17;
        sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v123, (uint64_t)&v120, (uint64_t)&v121, (uint64_t)&v122);
        v23 = v22;
        v24 = *(void (**)(uint64_t, uint64_t))(v0 + 2064);
        v25 = *(_QWORD *)(v0 + 1952);
        v26 = *(_QWORD *)(v0 + 1800);
        swift_release();
        _os_log_impl((void *)&_mh_execute_header, v116, buf, "%{public}s capability: %s", v21, 0x16u);
        swift_arrayDestroy(v23, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v23, -1, -1);
        sub_100694894((uint64_t)v21);

        v24(v25, v26);
        goto LABEL_25;
      }
      return swift_errorRelease(v20);
    }
    v117 = (_QWORD *)(v0 + 976);
    v32 = *(_QWORD *)(v0 + 1512);
    v33 = *(_QWORD *)(v0 + 2232);
    v34 = *(_QWORD *)(v0 + 2224);
    sub_100243B24(*(_QWORD *)(v0 + 2192), *(_QWORD *)(v0 + 2200), 1);
    sub_100243B24(v34, v33, 2);
    v29 = v2;
    v30 = v32;
    v31 = v3;
  }
  else
  {
    v117 = (_QWORD *)(v0 + 976);
    v27 = *(_QWORD *)(v0 + 2232);
    v28 = *(_QWORD *)(v0 + 2224);
    sub_100243B24(*(_QWORD *)(v0 + 2192), *(_QWORD *)(v0 + 2200), 1);
    v29 = v28;
    v30 = v27;
    v31 = 2;
  }
  sub_100243B24(v29, v30, v31);
  v35 = *(_QWORD *)(v0 + 2056);
  v36 = *(_QWORD *)(v0 + 1704);
  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 2048))(*(_QWORD *)(v0 + 1856), *(_QWORD *)(v0 + 2040), *(_QWORD *)(v0 + 1800));
  v37 = swift_allocObject(&unk_101060F88, 32, 7);
  *(_QWORD *)(v37 + 16) = sub_100243954;
  *(_QWORD *)(v37 + 24) = v36;
  v38 = swift_retain();
  v39 = Logger.logObject.getter(v38);
  v40 = static os_log_type_t.error.getter(v39);
  v41 = swift_allocObject(&unk_101060FB0, 17, 7);
  *(_BYTE *)(v41 + 16) = 34;
  v42 = swift_allocObject(&unk_101060FD8, 17, 7);
  *(_BYTE *)(v42 + 16) = 8;
  v43 = swift_allocObject(&unk_101061000, 32, 7);
  *(_QWORD *)(v43 + 16) = sub_100245488;
  *(_QWORD *)(v43 + 24) = v37;
  v44 = swift_allocObject(&unk_101061028, 32, 7);
  *(_QWORD *)(v44 + 16) = sub_10005CBA4;
  *(_QWORD *)(v44 + 24) = v43;
  v45 = swift_allocObject(v35, 80, 7);
  sub_100882D28(v45, 3);
  *v46 = sub_10005CBC4;
  v46[1] = v41;
  v46[2] = sub_10005CBC4;
  v46[3] = v42;
  v46[4] = sub_10005CBB4;
  v46[5] = v44;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v39, v40))
  {
    v20 = *(_QWORD *)(v0 + 2296);
    v47 = (uint8_t *)sub_1006948A0(12);
    v121 = 0;
    v122 = swift_slowAlloc(32, -1);
    osloga = (os_log_t)v122;
    bufa = v47;
    *(_WORD *)v47 = 258;
    v120 = v47 + 2;
    v123 = sub_10005CBC4;
    v124 = v41;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v123, (uint64_t)&v120, (uint64_t)&v121, (uint64_t)&v122);
    if (v20)
      return swift_errorRelease(v20);
    swift_release();
    v123 = sub_10005CBC4;
    v124 = v42;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v123, (uint64_t)&v120, (uint64_t)&v121, (uint64_t)&v122);
    swift_release();
    v123 = sub_10005CBB4;
    v124 = v44;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v123, (uint64_t)&v120, (uint64_t)&v121, (uint64_t)&v122);
    v48 = *(void (**)(uint64_t, uint64_t))(v0 + 2064);
    v49 = *(_QWORD *)(v0 + 1856);
    v50 = *(_QWORD *)(v0 + 1800);
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, v39, v40, "%{public}s Invalid capabilityCommandResponse!", bufa, 0xCu);
    swift_arrayDestroy(osloga, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(osloga, -1, -1);
    sub_100694894((uint64_t)bufa);

    v48(v49, v50);
  }
  else
  {
    v51 = *(void (**)(uint64_t, uint64_t))(v0 + 2064);
    v52 = *(_QWORD *)(v0 + 1856);
    v53 = *(_QWORD *)(v0 + 1800);
    swift_release();
    swift_release();
    swift_release();

    v51(v52, v53);
  }
  v54 = *(_QWORD *)(v0 + 2232);
  v55 = *(_QWORD *)(v0 + 2224);
  v103 = *(_QWORD *)(v0 + 2200);
  v56 = *(_QWORD *)(v0 + 2192);
  v57 = *(_QWORD *)(v0 + 2168);
  v58 = *(_QWORD *)(v0 + 2160);
  v59 = type metadata accessor for AccessoryMetadataManager.Error(0);
  v60 = sub_100006204(&qword_1010F37D8, type metadata accessor for AccessoryMetadataManager.Error, (uint64_t)&unk_100E2E588);
  v61 = swift_allocError(v59, v60, 0, 0);
  v63 = swift_storeEnumTagMultiPayload(v62, v59, 7);
  swift_willThrow(v63);
  swift_release();
  swift_release();
  sub_100243B24(v55, v54, 2);
  sub_100243B24(v56, v103, 1);
  sub_100243B24(v58, v57, 0);
  sub_100243B24(v58, v57, 0);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v117);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 784));
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 592));
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 400));
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 208));
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
  *(_QWORD *)(v0 + 2424) = v61;
  v64 = *(_QWORD *)(v0 + 1904);
  v65 = *(_QWORD *)(v0 + 1808);
  v66 = *(_QWORD *)(v0 + 1800);
  v67 = *(_QWORD *)(v0 + 1704);
  v68 = sub_10022450C();
  *(_QWORD *)(v0 + 2432) = v68;
  v69 = *(void (**)(uint64_t, uint64_t, uint64_t))(v65 + 16);
  *(_QWORD *)(v0 + 2440) = v69;
  v69(v64, v68, v66);
  v70 = swift_allocObject(&unk_10105FF70, 32, 7);
  *(_QWORD *)(v70 + 16) = sub_100243954;
  *(_QWORD *)(v70 + 24) = v67;
  v118 = swift_allocObject(&unk_10105FF98, 24, 7);
  *(_QWORD *)(v118 + 16) = v61;
  swift_retain();
  v71 = swift_errorRetain(v61);
  oslogb = Logger.logObject.getter(v71);
  bufb = static os_log_type_t.error.getter(oslogb);
  v72 = swift_allocObject(&unk_10105FFC0, 17, 7);
  *(_BYTE *)(v72 + 16) = 34;
  v73 = swift_allocObject(&unk_10105FFE8, 17, 7);
  *(_BYTE *)(v73 + 16) = 8;
  v74 = swift_allocObject(&unk_101060010, 17, 7);
  *(_BYTE *)(v74 + 16) = 34;
  v75 = swift_allocObject(&unk_101060038, 17, 7);
  *(_BYTE *)(v75 + 16) = 8;
  v76 = swift_allocObject(&unk_101060060, 32, 7);
  *(_QWORD *)(v76 + 16) = sub_100243990;
  *(_QWORD *)(v76 + 24) = v70;
  v77 = swift_allocObject(&unk_101060088, 32, 7);
  *(_QWORD *)(v77 + 16) = sub_10001D850;
  *(_QWORD *)(v77 + 24) = v76;
  v78 = swift_allocObject(&unk_1010600B0, 17, 7);
  *(_BYTE *)(v78 + 16) = 66;
  v79 = swift_allocObject(&unk_1010600D8, 17, 7);
  *(_BYTE *)(v79 + 16) = 8;
  v80 = swift_allocObject(&unk_101060100, 32, 7);
  *(_QWORD *)(v80 + 16) = sub_100245648;
  *(_QWORD *)(v80 + 24) = v118;
  v81 = swift_allocObject(&unk_101060128, 32, 7);
  *(_QWORD *)(v81 + 16) = sub_10005859C;
  *(_QWORD *)(v81 + 24) = v80;
  v82 = swift_allocObject(&unk_101060150, 32, 7);
  *(_QWORD *)(v82 + 16) = sub_10001D850;
  *(_QWORD *)(v82 + 24) = v81;
  v83 = sub_10001A9A8(&qword_1010EC538);
  *(_QWORD *)(v0 + 2448) = v83;
  v84 = swift_allocObject(v83, 176, 7);
  sub_100882D28(v84, 9);
  *v85 = sub_100057E50;
  v85[1] = v72;
  v85[2] = sub_10005CBC4;
  v85[3] = v73;
  v85[4] = sub_100243220;
  v85[5] = 0;
  v85[6] = sub_10005CBC4;
  v85[7] = v74;
  v85[8] = sub_10005CBC4;
  v85[9] = v75;
  v85[10] = sub_100057E68;
  v85[11] = v77;
  v85[12] = sub_10005CBC4;
  v85[13] = v78;
  v85[14] = sub_10005CBC4;
  v85[15] = v79;
  v85[16] = sub_1000585A4;
  v85[17] = v82;
  v119 = v72;
  v86 = v73;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(oslogb, bufb))
  {
    v104 = v78;
    v105 = v77;
    v87 = (uint8_t *)sub_1006948A0(32);
    v88 = swift_slowAlloc(8, -1);
    v89 = swift_slowAlloc(64, -1);
    v121 = v88;
    v122 = v89;
    *(_WORD *)v87 = 770;
    v120 = v87 + 2;
    v123 = (uint64_t (*)())sub_100057E50;
    v124 = v119;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v123, (uint64_t)&v120, (uint64_t)&v121, (uint64_t)&v122);
    swift_release();
    v123 = sub_10005CBC4;
    v124 = v86;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v123, (uint64_t)&v120, (uint64_t)&v121, (uint64_t)&v122);
    swift_release();
    v123 = sub_100243220;
    v124 = 0;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v123, (uint64_t)&v120, (uint64_t)&v121, (uint64_t)&v122);
    v123 = sub_10005CBC4;
    v124 = v74;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v123, (uint64_t)&v120, (uint64_t)&v121, (uint64_t)&v122);
    swift_release();
    v123 = sub_10005CBC4;
    v124 = v75;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v123, (uint64_t)&v120, (uint64_t)&v121, (uint64_t)&v122);
    swift_release();
    v123 = (uint64_t (*)())sub_100057E68;
    v124 = v105;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v123, (uint64_t)&v120, (uint64_t)&v121, (uint64_t)&v122);
    swift_release();
    v123 = sub_10005CBC4;
    v124 = v104;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v123, (uint64_t)&v120, (uint64_t)&v121, (uint64_t)&v122);
    swift_release();
    v123 = sub_10005CBC4;
    v124 = v79;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v123, (uint64_t)&v120, (uint64_t)&v121, (uint64_t)&v122);
    swift_release();
    v123 = (uint64_t (*)())sub_1000585A4;
    v124 = v82;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v123, (uint64_t)&v120, (uint64_t)&v121, (uint64_t)&v122);
    v97 = *(uint8_t **)(v0 + 1904);
    v98 = *(_QWORD *)(v0 + 1808);
    v99 = v88;
    v100 = *(_QWORD *)(v0 + 1800);
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, oslogb, bufb, "%{public}s %{public}s Error %{public}@", v87, 0x20u);
    v101 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v99, 1, v101);
    swift_slowDealloc(v99, -1, -1);
    swift_arrayDestroy(v89, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v89, -1, -1);
    sub_100694894((uint64_t)v87);

    v102 = *(void (**)(uint8_t *, uint64_t))(v98 + 8);
    v102(v97, v100);
  }
  else
  {
    bufd = *(uint8_t **)(v0 + 1904);
    v91 = *(_QWORD *)(v0 + 1808);
    v92 = *(_QWORD *)(v0 + 1800);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();

    v102 = *(void (**)(uint8_t *, uint64_t))(v91 + 8);
    v102(bufd, v92);
  }
  *(_QWORD *)(v0 + 2456) = v102;
  v93 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of PeripheralProtocol.cancelConnection()[1]);
  *(_QWORD *)(v0 + 2464) = v93;
  *v93 = v0;
  v93[1] = sub_10023ED18;
  return dispatch thunk of PeripheralProtocol.cancelConnection()(*(_QWORD *)(v0 + 2008), *(_QWORD *)(v0 + 2016));
}

uint64_t sub_10023785C()
{
  _QWORD *v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint8_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(uint64_t, uint64_t);
  uint64_t v46;
  uint64_t v47;
  NSObject *oslog;
  os_log_type_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint8_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t (*v56)();
  uint64_t v57;

  v1 = v0[279];
  v2 = v0[278];
  v3 = v0[275];
  v4 = v0[274];
  v5 = v0[271];
  v6 = v0[270];
  swift_release();
  swift_release();
  sub_100243B24(v2, v1, 2);
  sub_100243B24(v4, v3, 1);
  sub_100243B24(v6, v5, 0);
  sub_100243B24(v6, v5, 0);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 98);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 74);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 50);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 26);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 128);
  v7 = v0[287];
  v0[303] = v7;
  v8 = v0[238];
  v9 = v0[226];
  v10 = v0[225];
  v11 = v0[213];
  v12 = sub_10022450C();
  v0[304] = v12;
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16);
  v0[305] = v13;
  v13(v8, v12, v10);
  v14 = swift_allocObject(&unk_10105FF70, 32, 7);
  *(_QWORD *)(v14 + 16) = sub_100243954;
  *(_QWORD *)(v14 + 24) = v11;
  v51 = swift_allocObject(&unk_10105FF98, 24, 7);
  *(_QWORD *)(v51 + 16) = v7;
  swift_retain();
  v15 = swift_errorRetain(v7);
  oslog = Logger.logObject.getter(v15);
  v49 = static os_log_type_t.error.getter(oslog);
  v16 = swift_allocObject(&unk_10105FFC0, 17, 7);
  *(_BYTE *)(v16 + 16) = 34;
  v17 = swift_allocObject(&unk_10105FFE8, 17, 7);
  *(_BYTE *)(v17 + 16) = 8;
  v18 = swift_allocObject(&unk_101060010, 17, 7);
  *(_BYTE *)(v18 + 16) = 34;
  v19 = swift_allocObject(&unk_101060038, 17, 7);
  *(_BYTE *)(v19 + 16) = 8;
  v20 = swift_allocObject(&unk_101060060, 32, 7);
  *(_QWORD *)(v20 + 16) = sub_100243990;
  *(_QWORD *)(v20 + 24) = v14;
  v21 = swift_allocObject(&unk_101060088, 32, 7);
  *(_QWORD *)(v21 + 16) = sub_10001D850;
  *(_QWORD *)(v21 + 24) = v20;
  v22 = swift_allocObject(&unk_1010600B0, 17, 7);
  *(_BYTE *)(v22 + 16) = 66;
  v23 = swift_allocObject(&unk_1010600D8, 17, 7);
  *(_BYTE *)(v23 + 16) = 8;
  v24 = swift_allocObject(&unk_101060100, 32, 7);
  *(_QWORD *)(v24 + 16) = sub_100245648;
  *(_QWORD *)(v24 + 24) = v51;
  v25 = swift_allocObject(&unk_101060128, 32, 7);
  *(_QWORD *)(v25 + 16) = sub_10005859C;
  *(_QWORD *)(v25 + 24) = v24;
  v26 = swift_allocObject(&unk_101060150, 32, 7);
  *(_QWORD *)(v26 + 16) = sub_10001D850;
  *(_QWORD *)(v26 + 24) = v25;
  v27 = sub_10001A9A8(&qword_1010EC538);
  v0[306] = v27;
  v28 = swift_allocObject(v27, 176, 7);
  sub_100882D28(v28, 9);
  *v29 = sub_100057E50;
  v29[1] = v16;
  v29[2] = sub_10005CBC4;
  v29[3] = v17;
  v29[4] = sub_100243220;
  v29[5] = 0;
  v29[6] = sub_10005CBC4;
  v29[7] = v18;
  v29[8] = sub_10005CBC4;
  v29[9] = v19;
  v29[10] = sub_100057E68;
  v29[11] = v21;
  v29[12] = sub_10005CBC4;
  v29[13] = v22;
  v29[14] = sub_10005CBC4;
  v29[15] = v23;
  v29[16] = sub_1000585A4;
  v29[17] = v26;
  v52 = v16;
  swift_retain();
  swift_retain();
  v30 = v18;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(oslog, v49))
  {
    v31 = v17;
    v32 = v30;
    v46 = v22;
    v47 = v21;
    v33 = (uint8_t *)sub_1006948A0(32);
    v34 = swift_slowAlloc(8, -1);
    v35 = swift_slowAlloc(64, -1);
    v54 = v34;
    v55 = v35;
    *(_WORD *)v33 = 770;
    v53 = v33 + 2;
    v56 = (uint64_t (*)())sub_100057E50;
    v57 = v52;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v56, (uint64_t)&v53, (uint64_t)&v54, (uint64_t)&v55);
    swift_release();
    v56 = sub_10005CBC4;
    v57 = v31;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v56, (uint64_t)&v53, (uint64_t)&v54, (uint64_t)&v55);
    swift_release();
    v56 = sub_100243220;
    v57 = 0;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v56, (uint64_t)&v53, (uint64_t)&v54, (uint64_t)&v55);
    v56 = sub_10005CBC4;
    v57 = v32;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v56, (uint64_t)&v53, (uint64_t)&v54, (uint64_t)&v55);
    swift_release();
    v56 = sub_10005CBC4;
    v57 = v19;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v56, (uint64_t)&v53, (uint64_t)&v54, (uint64_t)&v55);
    swift_release();
    v56 = (uint64_t (*)())sub_100057E68;
    v57 = v47;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v56, (uint64_t)&v53, (uint64_t)&v54, (uint64_t)&v55);
    swift_release();
    v56 = sub_10005CBC4;
    v57 = v46;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v56, (uint64_t)&v53, (uint64_t)&v54, (uint64_t)&v55);
    swift_release();
    v56 = sub_10005CBC4;
    v57 = v23;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v56, (uint64_t)&v53, (uint64_t)&v54, (uint64_t)&v55);
    swift_release();
    v56 = (uint64_t (*)())sub_1000585A4;
    v57 = v26;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v56, (uint64_t)&v53, (uint64_t)&v54, (uint64_t)&v55);
    v40 = v0[238];
    v41 = v0[226];
    v42 = v34;
    v43 = v0[225];
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, oslog, v49, "%{public}s %{public}s Error %{public}@", v33, 0x20u);
    v44 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v42, 1, v44);
    swift_slowDealloc(v42, -1, -1);
    swift_arrayDestroy(v35, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v35, -1, -1);
    sub_100694894((uint64_t)v33);

    v45 = *(void (**)(uint64_t, uint64_t))(v41 + 8);
    v45(v40, v43);
  }
  else
  {
    v50 = v0[238];
    v36 = v0[226];
    v37 = v0[225];
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();

    v45 = *(void (**)(uint64_t, uint64_t))(v36 + 8);
    v45(v50, v37);
  }
  v0[307] = v45;
  v38 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of PeripheralProtocol.cancelConnection()[1]);
  v0[308] = v38;
  *v38 = v0;
  v38[1] = sub_10023ED18;
  return dispatch thunk of PeripheralProtocol.cancelConnection()(v0[251], v0[252]);
}

uint64_t sub_100237FC0()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 2312);
  *(_QWORD *)(*(_QWORD *)v1 + 2320) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = v2[279];
    v5 = v2[278];
    sub_100243B24(v2[274], v2[275], 1);
    sub_100243B24(v5, v4, 2);
    v6 = sub_100239074;
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v2 + 152);
    v6 = sub_10023805C;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_10023805C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  os_log_type_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint8_t *v46;
  void (*v47)(uint64_t, uint64_t);
  uint64_t v48;
  uint64_t v49;
  void (*v50)(uint64_t, uint64_t);
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void (*v68)(uint64_t, uint64_t, uint64_t);
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  uint8_t *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  uint8_t *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  void (*v101)(uint8_t *, uint64_t);
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  os_log_t oslog;
  os_log_t osloga;
  NSObject *oslogb;
  uint8_t *bufc;
  os_log_type_t buf;
  uint8_t *bufa;
  os_log_type_t bufb;
  uint8_t *bufd;
  uint8_t *bufe;
  NSObject *v115;
  _QWORD *v116;
  uint64_t v117;
  uint64_t v118;
  uint8_t *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t (*v122)();
  uint64_t v123;

  v1 = *(_QWORD *)(v0 + 2152);
  sub_100057DB8(v0 + 1168, v0 + 1264);
  if (swift_dynamicCast(v0 + 1456, v0 + 1264, v1, &type metadata for PoshAccessoryNonOwnerCommand, 6))
  {
    v2 = *(_QWORD *)(v0 + 1456);
    v3 = *(unsigned __int8 *)(v0 + 1472);
    if (v3 == 5)
    {
      bufc = *(uint8_t **)(v0 + 2056);
      v4 = *(_QWORD *)(v0 + 1704);
      (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 2048))(*(_QWORD *)(v0 + 1944), *(_QWORD *)(v0 + 2040), *(_QWORD *)(v0 + 1800));
      v5 = swift_allocObject(&unk_1010612D0, 32, 7);
      *(_QWORD *)(v5 + 16) = sub_100243954;
      *(_QWORD *)(v5 + 24) = v4;
      v6 = swift_allocObject(&unk_1010612F8, 17, 7);
      *(_BYTE *)(v6 + 16) = v2;
      v7 = swift_retain();
      v115 = Logger.logObject.getter(v7);
      v8 = static os_log_type_t.default.getter(v115);
      v9 = swift_allocObject(&unk_101061320, 17, 7);
      *(_BYTE *)(v9 + 16) = 34;
      v10 = swift_allocObject(&unk_101061348, 17, 7);
      *(_BYTE *)(v10 + 16) = 8;
      v11 = swift_allocObject(&unk_101061370, 32, 7);
      *(_QWORD *)(v11 + 16) = sub_100245488;
      *(_QWORD *)(v11 + 24) = v5;
      v12 = swift_allocObject(&unk_101061398, 32, 7);
      *(_QWORD *)(v12 + 16) = sub_10005CBA4;
      *(_QWORD *)(v12 + 24) = v11;
      v13 = swift_allocObject(&unk_1010613C0, 17, 7);
      *(_BYTE *)(v13 + 16) = 0;
      v14 = swift_allocObject(&unk_1010613E8, 17, 7);
      *(_BYTE *)(v14 + 16) = 1;
      v15 = swift_allocObject(&unk_101061410, 32, 7);
      *(_QWORD *)(v15 + 16) = sub_100243E74;
      *(_QWORD *)(v15 + 24) = v6;
      v16 = swift_allocObject(&unk_101061438, 32, 7);
      *(_QWORD *)(v16 + 16) = sub_100058F50;
      *(_QWORD *)(v16 + 24) = v15;
      v17 = swift_allocObject(bufc, 128, 7);
      sub_100882D28(v17, 6);
      *v18 = sub_10005CBC4;
      v18[1] = v9;
      v18[2] = sub_10005CBC4;
      v18[3] = v10;
      v18[4] = sub_10005CBB4;
      v18[5] = v12;
      v18[6] = sub_10005CBC4;
      v18[7] = v13;
      v18[8] = sub_10005CBC4;
      v18[9] = v14;
      v18[10] = sub_100058F58;
      v18[11] = v16;
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_bridgeObjectRelease();
      buf = v8;
      if (!os_log_type_enabled(v115, v8))
      {
        bufe = *(uint8_t **)(v0 + 2064);
        v93 = *(_QWORD *)(v0 + 1944);
        v94 = *(_QWORD *)(v0 + 1800);
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();

        ((void (*)(uint64_t, uint64_t))bufe)(v93, v94);
LABEL_25:
        *(_QWORD *)(v0 + 1432) = &type metadata for PoshAccessoryNonOwnerCommand;
        *(_OWORD *)(v0 + 1440) = *(_OWORD *)(v0 + 2120);
        *(_OWORD *)(v0 + 1408) = xmmword_100E2E410;
        *(_BYTE *)(v0 + 1424) = 10;
        v95 = (_QWORD *)swift_task_alloc(dword_1010F3894);
        *(_QWORD *)(v0 + 2328) = v95;
        *v95 = v0;
        v95[1] = sub_1002397E8;
        return sub_10023FD28(v0 + 1360, *(_QWORD *)(v0 + 2104), v0 + 1408, (uint64_t)&type metadata for PoshAccessoryNonOwnerCommand, *(_QWORD *)(v0 + 2120), *(_QWORD *)(v0 + 2128), 0);
      }
      v105 = v14;
      oslog = (os_log_t)v13;
      v19 = *(_QWORD *)(v0 + 2320);
      v20 = (uint8_t *)sub_1006948A0(15);
      v21 = swift_slowAlloc(32, -1);
      v120 = 0;
      v121 = v21;
      *(_WORD *)v20 = 514;
      v119 = v20 + 2;
      v122 = sub_10005CBC4;
      v123 = v9;
      sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v122, (uint64_t)&v119, (uint64_t)&v120, (uint64_t)&v121);
      if (!v19)
      {
        swift_release();
        v122 = sub_10005CBC4;
        v123 = v10;
        sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v122, (uint64_t)&v119, (uint64_t)&v120, (uint64_t)&v121);
        swift_release();
        v122 = sub_10005CBB4;
        v123 = v12;
        sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v122, (uint64_t)&v119, (uint64_t)&v120, (uint64_t)&v121);
        swift_release();
        v122 = sub_10005CBC4;
        v123 = (uint64_t)oslog;
        sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v122, (uint64_t)&v119, (uint64_t)&v120, (uint64_t)&v121);
        swift_release();
        v122 = sub_10005CBC4;
        v123 = v105;
        sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v122, (uint64_t)&v119, (uint64_t)&v120, (uint64_t)&v121);
        swift_release();
        v122 = (uint64_t (*)())sub_100058F58;
        v123 = v16;
        sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v122, (uint64_t)&v119, (uint64_t)&v120, (uint64_t)&v121);
        v22 = v21;
        v23 = *(void (**)(uint64_t, uint64_t))(v0 + 2064);
        v24 = *(_QWORD *)(v0 + 1944);
        v25 = *(_QWORD *)(v0 + 1800);
        swift_release();
        _os_log_impl((void *)&_mh_execute_header, v115, buf, "%{public}snetworkID: %hhu", v20, 0xFu);
        swift_arrayDestroy(v22, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v22, -1, -1);
        sub_100694894((uint64_t)v20);

        v23(v24, v25);
        goto LABEL_25;
      }
      return swift_errorRelease(v19);
    }
    v116 = (_QWORD *)(v0 + 1168);
    v31 = *(_QWORD *)(v0 + 1464);
    v32 = *(_QWORD *)(v0 + 2232);
    v33 = *(_QWORD *)(v0 + 2224);
    sub_100243B24(*(_QWORD *)(v0 + 2192), *(_QWORD *)(v0 + 2200), 1);
    sub_100243B24(v33, v32, 2);
    v28 = v2;
    v29 = v31;
    v30 = v3;
  }
  else
  {
    v116 = (_QWORD *)(v0 + 1168);
    v26 = *(_QWORD *)(v0 + 2232);
    v27 = *(_QWORD *)(v0 + 2224);
    sub_100243B24(*(_QWORD *)(v0 + 2192), *(_QWORD *)(v0 + 2200), 1);
    v28 = v27;
    v29 = v26;
    v30 = 2;
  }
  sub_100243B24(v28, v29, v30);
  v34 = *(_QWORD *)(v0 + 2056);
  v35 = *(_QWORD *)(v0 + 1704);
  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 2048))(*(_QWORD *)(v0 + 1864), *(_QWORD *)(v0 + 2040), *(_QWORD *)(v0 + 1800));
  v36 = swift_allocObject(&unk_101061208, 32, 7);
  *(_QWORD *)(v36 + 16) = sub_100243954;
  *(_QWORD *)(v36 + 24) = v35;
  v37 = swift_retain();
  v38 = Logger.logObject.getter(v37);
  v39 = static os_log_type_t.error.getter(v38);
  v40 = swift_allocObject(&unk_101061230, 17, 7);
  *(_BYTE *)(v40 + 16) = 34;
  v41 = swift_allocObject(&unk_101061258, 17, 7);
  *(_BYTE *)(v41 + 16) = 8;
  v42 = swift_allocObject(&unk_101061280, 32, 7);
  *(_QWORD *)(v42 + 16) = sub_100245488;
  *(_QWORD *)(v42 + 24) = v36;
  v43 = swift_allocObject(&unk_1010612A8, 32, 7);
  *(_QWORD *)(v43 + 16) = sub_10005CBA4;
  *(_QWORD *)(v43 + 24) = v42;
  v44 = swift_allocObject(v34, 80, 7);
  sub_100882D28(v44, 3);
  *v45 = sub_10005CBC4;
  v45[1] = v40;
  v45[2] = sub_10005CBC4;
  v45[3] = v41;
  v45[4] = sub_10005CBB4;
  v45[5] = v43;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v38, v39))
  {
    v19 = *(_QWORD *)(v0 + 2320);
    v46 = (uint8_t *)sub_1006948A0(12);
    v120 = 0;
    v121 = swift_slowAlloc(32, -1);
    osloga = (os_log_t)v121;
    bufa = v46;
    *(_WORD *)v46 = 258;
    v119 = v46 + 2;
    v122 = sub_10005CBC4;
    v123 = v40;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v122, (uint64_t)&v119, (uint64_t)&v120, (uint64_t)&v121);
    if (v19)
      return swift_errorRelease(v19);
    swift_release();
    v122 = sub_10005CBC4;
    v123 = v41;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v122, (uint64_t)&v119, (uint64_t)&v120, (uint64_t)&v121);
    swift_release();
    v122 = sub_10005CBB4;
    v123 = v43;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v122, (uint64_t)&v119, (uint64_t)&v120, (uint64_t)&v121);
    v47 = *(void (**)(uint64_t, uint64_t))(v0 + 2064);
    v48 = *(_QWORD *)(v0 + 1864);
    v49 = *(_QWORD *)(v0 + 1800);
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, v38, v39, "%{public}s Invalid networkIDCommandResponse!", bufa, 0xCu);
    swift_arrayDestroy(osloga, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(osloga, -1, -1);
    sub_100694894((uint64_t)bufa);

    v47(v48, v49);
  }
  else
  {
    v50 = *(void (**)(uint64_t, uint64_t))(v0 + 2064);
    v51 = *(_QWORD *)(v0 + 1864);
    v52 = *(_QWORD *)(v0 + 1800);
    swift_release();
    swift_release();
    swift_release();

    v50(v51, v52);
  }
  v53 = *(_QWORD *)(v0 + 2232);
  v54 = *(_QWORD *)(v0 + 2224);
  v102 = *(_QWORD *)(v0 + 2200);
  v55 = *(_QWORD *)(v0 + 2192);
  v56 = *(_QWORD *)(v0 + 2168);
  v57 = *(_QWORD *)(v0 + 2160);
  v58 = type metadata accessor for AccessoryMetadataManager.Error(0);
  v59 = sub_100006204(&qword_1010F37D8, type metadata accessor for AccessoryMetadataManager.Error, (uint64_t)&unk_100E2E588);
  v60 = swift_allocError(v58, v59, 0, 0);
  v62 = swift_storeEnumTagMultiPayload(v61, v58, 7);
  swift_willThrow(v62);
  swift_release();
  swift_release();
  sub_100243B24(v54, v53, 2);
  sub_100243B24(v55, v102, 1);
  sub_100243B24(v57, v56, 0);
  sub_100243B24(v57, v56, 0);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v116);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 976));
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 784));
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 592));
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 400));
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 208));
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
  *(_QWORD *)(v0 + 2424) = v60;
  v63 = *(_QWORD *)(v0 + 1904);
  v64 = *(_QWORD *)(v0 + 1808);
  v65 = *(_QWORD *)(v0 + 1800);
  v66 = *(_QWORD *)(v0 + 1704);
  v67 = sub_10022450C();
  *(_QWORD *)(v0 + 2432) = v67;
  v68 = *(void (**)(uint64_t, uint64_t, uint64_t))(v64 + 16);
  *(_QWORD *)(v0 + 2440) = v68;
  v68(v63, v67, v65);
  v69 = swift_allocObject(&unk_10105FF70, 32, 7);
  *(_QWORD *)(v69 + 16) = sub_100243954;
  *(_QWORD *)(v69 + 24) = v66;
  v117 = swift_allocObject(&unk_10105FF98, 24, 7);
  *(_QWORD *)(v117 + 16) = v60;
  swift_retain();
  v70 = swift_errorRetain(v60);
  oslogb = Logger.logObject.getter(v70);
  bufb = static os_log_type_t.error.getter(oslogb);
  v71 = swift_allocObject(&unk_10105FFC0, 17, 7);
  *(_BYTE *)(v71 + 16) = 34;
  v72 = swift_allocObject(&unk_10105FFE8, 17, 7);
  *(_BYTE *)(v72 + 16) = 8;
  v73 = swift_allocObject(&unk_101060010, 17, 7);
  *(_BYTE *)(v73 + 16) = 34;
  v74 = swift_allocObject(&unk_101060038, 17, 7);
  *(_BYTE *)(v74 + 16) = 8;
  v75 = swift_allocObject(&unk_101060060, 32, 7);
  *(_QWORD *)(v75 + 16) = sub_100243990;
  *(_QWORD *)(v75 + 24) = v69;
  v76 = swift_allocObject(&unk_101060088, 32, 7);
  *(_QWORD *)(v76 + 16) = sub_10001D850;
  *(_QWORD *)(v76 + 24) = v75;
  v77 = swift_allocObject(&unk_1010600B0, 17, 7);
  *(_BYTE *)(v77 + 16) = 66;
  v78 = swift_allocObject(&unk_1010600D8, 17, 7);
  *(_BYTE *)(v78 + 16) = 8;
  v79 = swift_allocObject(&unk_101060100, 32, 7);
  *(_QWORD *)(v79 + 16) = sub_100245648;
  *(_QWORD *)(v79 + 24) = v117;
  v80 = swift_allocObject(&unk_101060128, 32, 7);
  *(_QWORD *)(v80 + 16) = sub_10005859C;
  *(_QWORD *)(v80 + 24) = v79;
  v81 = swift_allocObject(&unk_101060150, 32, 7);
  *(_QWORD *)(v81 + 16) = sub_10001D850;
  *(_QWORD *)(v81 + 24) = v80;
  v82 = sub_10001A9A8(&qword_1010EC538);
  *(_QWORD *)(v0 + 2448) = v82;
  v83 = swift_allocObject(v82, 176, 7);
  sub_100882D28(v83, 9);
  *v84 = sub_100057E50;
  v84[1] = v71;
  v84[2] = sub_10005CBC4;
  v84[3] = v72;
  v84[4] = sub_100243220;
  v84[5] = 0;
  v84[6] = sub_10005CBC4;
  v84[7] = v73;
  v84[8] = sub_10005CBC4;
  v84[9] = v74;
  v84[10] = sub_100057E68;
  v84[11] = v76;
  v84[12] = sub_10005CBC4;
  v84[13] = v77;
  v84[14] = sub_10005CBC4;
  v84[15] = v78;
  v84[16] = sub_1000585A4;
  v84[17] = v81;
  v118 = v71;
  v85 = v72;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(oslogb, bufb))
  {
    v103 = v77;
    v104 = v76;
    v86 = (uint8_t *)sub_1006948A0(32);
    v87 = swift_slowAlloc(8, -1);
    v88 = swift_slowAlloc(64, -1);
    v120 = v87;
    v121 = v88;
    *(_WORD *)v86 = 770;
    v119 = v86 + 2;
    v122 = (uint64_t (*)())sub_100057E50;
    v123 = v118;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v122, (uint64_t)&v119, (uint64_t)&v120, (uint64_t)&v121);
    swift_release();
    v122 = sub_10005CBC4;
    v123 = v85;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v122, (uint64_t)&v119, (uint64_t)&v120, (uint64_t)&v121);
    swift_release();
    v122 = sub_100243220;
    v123 = 0;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v122, (uint64_t)&v119, (uint64_t)&v120, (uint64_t)&v121);
    v122 = sub_10005CBC4;
    v123 = v73;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v122, (uint64_t)&v119, (uint64_t)&v120, (uint64_t)&v121);
    swift_release();
    v122 = sub_10005CBC4;
    v123 = v74;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v122, (uint64_t)&v119, (uint64_t)&v120, (uint64_t)&v121);
    swift_release();
    v122 = (uint64_t (*)())sub_100057E68;
    v123 = v104;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v122, (uint64_t)&v119, (uint64_t)&v120, (uint64_t)&v121);
    swift_release();
    v122 = sub_10005CBC4;
    v123 = v103;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v122, (uint64_t)&v119, (uint64_t)&v120, (uint64_t)&v121);
    swift_release();
    v122 = sub_10005CBC4;
    v123 = v78;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v122, (uint64_t)&v119, (uint64_t)&v120, (uint64_t)&v121);
    swift_release();
    v122 = (uint64_t (*)())sub_1000585A4;
    v123 = v81;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v122, (uint64_t)&v119, (uint64_t)&v120, (uint64_t)&v121);
    v96 = *(uint8_t **)(v0 + 1904);
    v97 = *(_QWORD *)(v0 + 1808);
    v98 = v87;
    v99 = *(_QWORD *)(v0 + 1800);
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, oslogb, bufb, "%{public}s %{public}s Error %{public}@", v86, 0x20u);
    v100 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v98, 1, v100);
    swift_slowDealloc(v98, -1, -1);
    swift_arrayDestroy(v88, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v88, -1, -1);
    sub_100694894((uint64_t)v86);

    v101 = *(void (**)(uint8_t *, uint64_t))(v97 + 8);
    v101(v96, v99);
  }
  else
  {
    bufd = *(uint8_t **)(v0 + 1904);
    v90 = *(_QWORD *)(v0 + 1808);
    v91 = *(_QWORD *)(v0 + 1800);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();

    v101 = *(void (**)(uint8_t *, uint64_t))(v90 + 8);
    v101(bufd, v91);
  }
  *(_QWORD *)(v0 + 2456) = v101;
  v92 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of PeripheralProtocol.cancelConnection()[1]);
  *(_QWORD *)(v0 + 2464) = v92;
  *v92 = v0;
  v92[1] = sub_10023ED18;
  return dispatch thunk of PeripheralProtocol.cancelConnection()(*(_QWORD *)(v0 + 2008), *(_QWORD *)(v0 + 2016));
}

uint64_t sub_100239074()
{
  _QWORD *v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint8_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(uint64_t, uint64_t);
  uint64_t v46;
  uint64_t v47;
  NSObject *oslog;
  os_log_type_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint8_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t (*v56)();
  uint64_t v57;

  v1 = v0[279];
  v2 = v0[278];
  v3 = v0[275];
  v4 = v0[274];
  v5 = v0[271];
  v6 = v0[270];
  swift_release();
  swift_release();
  sub_100243B24(v2, v1, 2);
  sub_100243B24(v4, v3, 1);
  sub_100243B24(v6, v5, 0);
  sub_100243B24(v6, v5, 0);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 122);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 98);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 74);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 50);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 26);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 152);
  v7 = v0[290];
  v0[303] = v7;
  v8 = v0[238];
  v9 = v0[226];
  v10 = v0[225];
  v11 = v0[213];
  v12 = sub_10022450C();
  v0[304] = v12;
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16);
  v0[305] = v13;
  v13(v8, v12, v10);
  v14 = swift_allocObject(&unk_10105FF70, 32, 7);
  *(_QWORD *)(v14 + 16) = sub_100243954;
  *(_QWORD *)(v14 + 24) = v11;
  v51 = swift_allocObject(&unk_10105FF98, 24, 7);
  *(_QWORD *)(v51 + 16) = v7;
  swift_retain();
  v15 = swift_errorRetain(v7);
  oslog = Logger.logObject.getter(v15);
  v49 = static os_log_type_t.error.getter(oslog);
  v16 = swift_allocObject(&unk_10105FFC0, 17, 7);
  *(_BYTE *)(v16 + 16) = 34;
  v17 = swift_allocObject(&unk_10105FFE8, 17, 7);
  *(_BYTE *)(v17 + 16) = 8;
  v18 = swift_allocObject(&unk_101060010, 17, 7);
  *(_BYTE *)(v18 + 16) = 34;
  v19 = swift_allocObject(&unk_101060038, 17, 7);
  *(_BYTE *)(v19 + 16) = 8;
  v20 = swift_allocObject(&unk_101060060, 32, 7);
  *(_QWORD *)(v20 + 16) = sub_100243990;
  *(_QWORD *)(v20 + 24) = v14;
  v21 = swift_allocObject(&unk_101060088, 32, 7);
  *(_QWORD *)(v21 + 16) = sub_10001D850;
  *(_QWORD *)(v21 + 24) = v20;
  v22 = swift_allocObject(&unk_1010600B0, 17, 7);
  *(_BYTE *)(v22 + 16) = 66;
  v23 = swift_allocObject(&unk_1010600D8, 17, 7);
  *(_BYTE *)(v23 + 16) = 8;
  v24 = swift_allocObject(&unk_101060100, 32, 7);
  *(_QWORD *)(v24 + 16) = sub_100245648;
  *(_QWORD *)(v24 + 24) = v51;
  v25 = swift_allocObject(&unk_101060128, 32, 7);
  *(_QWORD *)(v25 + 16) = sub_10005859C;
  *(_QWORD *)(v25 + 24) = v24;
  v26 = swift_allocObject(&unk_101060150, 32, 7);
  *(_QWORD *)(v26 + 16) = sub_10001D850;
  *(_QWORD *)(v26 + 24) = v25;
  v27 = sub_10001A9A8(&qword_1010EC538);
  v0[306] = v27;
  v28 = swift_allocObject(v27, 176, 7);
  sub_100882D28(v28, 9);
  *v29 = sub_100057E50;
  v29[1] = v16;
  v29[2] = sub_10005CBC4;
  v29[3] = v17;
  v29[4] = sub_100243220;
  v29[5] = 0;
  v29[6] = sub_10005CBC4;
  v29[7] = v18;
  v29[8] = sub_10005CBC4;
  v29[9] = v19;
  v29[10] = sub_100057E68;
  v29[11] = v21;
  v29[12] = sub_10005CBC4;
  v29[13] = v22;
  v29[14] = sub_10005CBC4;
  v29[15] = v23;
  v29[16] = sub_1000585A4;
  v29[17] = v26;
  v52 = v16;
  swift_retain();
  swift_retain();
  v30 = v18;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(oslog, v49))
  {
    v31 = v17;
    v32 = v30;
    v46 = v22;
    v47 = v21;
    v33 = (uint8_t *)sub_1006948A0(32);
    v34 = swift_slowAlloc(8, -1);
    v35 = swift_slowAlloc(64, -1);
    v54 = v34;
    v55 = v35;
    *(_WORD *)v33 = 770;
    v53 = v33 + 2;
    v56 = (uint64_t (*)())sub_100057E50;
    v57 = v52;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v56, (uint64_t)&v53, (uint64_t)&v54, (uint64_t)&v55);
    swift_release();
    v56 = sub_10005CBC4;
    v57 = v31;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v56, (uint64_t)&v53, (uint64_t)&v54, (uint64_t)&v55);
    swift_release();
    v56 = sub_100243220;
    v57 = 0;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v56, (uint64_t)&v53, (uint64_t)&v54, (uint64_t)&v55);
    v56 = sub_10005CBC4;
    v57 = v32;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v56, (uint64_t)&v53, (uint64_t)&v54, (uint64_t)&v55);
    swift_release();
    v56 = sub_10005CBC4;
    v57 = v19;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v56, (uint64_t)&v53, (uint64_t)&v54, (uint64_t)&v55);
    swift_release();
    v56 = (uint64_t (*)())sub_100057E68;
    v57 = v47;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v56, (uint64_t)&v53, (uint64_t)&v54, (uint64_t)&v55);
    swift_release();
    v56 = sub_10005CBC4;
    v57 = v46;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v56, (uint64_t)&v53, (uint64_t)&v54, (uint64_t)&v55);
    swift_release();
    v56 = sub_10005CBC4;
    v57 = v23;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v56, (uint64_t)&v53, (uint64_t)&v54, (uint64_t)&v55);
    swift_release();
    v56 = (uint64_t (*)())sub_1000585A4;
    v57 = v26;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v56, (uint64_t)&v53, (uint64_t)&v54, (uint64_t)&v55);
    v40 = v0[238];
    v41 = v0[226];
    v42 = v34;
    v43 = v0[225];
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, oslog, v49, "%{public}s %{public}s Error %{public}@", v33, 0x20u);
    v44 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v42, 1, v44);
    swift_slowDealloc(v42, -1, -1);
    swift_arrayDestroy(v35, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v35, -1, -1);
    sub_100694894((uint64_t)v33);

    v45 = *(void (**)(uint64_t, uint64_t))(v41 + 8);
    v45(v40, v43);
  }
  else
  {
    v50 = v0[238];
    v36 = v0[226];
    v37 = v0[225];
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();

    v45 = *(void (**)(uint64_t, uint64_t))(v36 + 8);
    v45(v50, v37);
  }
  v0[307] = v45;
  v38 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of PeripheralProtocol.cancelConnection()[1]);
  v0[308] = v38;
  *v38 = v0;
  v38[1] = sub_10023ED18;
  return dispatch thunk of PeripheralProtocol.cancelConnection()(v0[251], v0[252]);
}

uint64_t sub_1002397E8()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 2328);
  *(_QWORD *)(*(_QWORD *)v1 + 2336) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = v2[279];
    v5 = v2[278];
    sub_100243B24(v2[274], v2[275], 1);
    sub_100243B24(v5, v4, 2);
    v6 = sub_10023A8E0;
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v2 + 176);
    v6 = sub_100239884;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_100239884()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  os_log_type_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint8_t *v47;
  void (*v48)(uint64_t, uint64_t);
  uint64_t v49;
  uint64_t v50;
  void (*v51)(uint64_t, uint64_t);
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void (*v69)(uint64_t, uint64_t, uint64_t);
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  uint8_t *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  uint8_t *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  void (*v102)(uint8_t *, uint64_t);
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  os_log_t oslog;
  os_log_t osloga;
  NSObject *oslogb;
  NSObject *buf;
  uint8_t *bufa;
  os_log_type_t bufb;
  uint8_t *bufc;
  uint64_t v114;
  os_log_type_t v115;
  _QWORD *v116;
  uint64_t v117;
  uint64_t v118;
  void (*v119)(uint64_t, uint64_t);
  uint8_t *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t (*v123)();
  uint64_t v124;

  v1 = *(_QWORD *)(v0 + 2152);
  sub_100057DB8(v0 + 1360, v0 + 1312);
  if (swift_dynamicCast(v0 + 1480, v0 + 1312, v1, &type metadata for PoshAccessoryNonOwnerCommand, 6))
  {
    v2 = *(_QWORD *)(v0 + 1480);
    *(_QWORD *)(v0 + 2344) = v2;
    v3 = *(unsigned __int8 *)(v0 + 1496);
    if (v3 == 9)
    {
      v114 = *(_QWORD *)(v0 + 2056);
      v4 = *(_QWORD *)(v0 + 1704);
      (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 2048))(*(_QWORD *)(v0 + 1936), *(_QWORD *)(v0 + 2040), *(_QWORD *)(v0 + 1800));
      v5 = swift_allocObject(&unk_101061528, 32, 7);
      *(_QWORD *)(v5 + 16) = sub_100243954;
      *(_QWORD *)(v5 + 24) = v4;
      v6 = swift_allocObject(&unk_101061550, 20, 7);
      *(_WORD *)(v6 + 16) = v2;
      *(_BYTE *)(v6 + 18) = BYTE2(v2);
      *(_BYTE *)(v6 + 19) = BYTE3(v2);
      v7 = swift_allocObject(&unk_101061578, 32, 7);
      *(_QWORD *)(v7 + 16) = sub_10024564C;
      *(_QWORD *)(v7 + 24) = v6;
      v8 = swift_retain();
      buf = Logger.logObject.getter(v8);
      v9 = static os_log_type_t.default.getter(buf);
      v10 = swift_allocObject(&unk_1010615A0, 17, 7);
      *(_BYTE *)(v10 + 16) = 34;
      v11 = swift_allocObject(&unk_1010615C8, 17, 7);
      *(_BYTE *)(v11 + 16) = 8;
      v12 = swift_allocObject(&unk_1010615F0, 32, 7);
      *(_QWORD *)(v12 + 16) = sub_100245488;
      *(_QWORD *)(v12 + 24) = v5;
      v13 = swift_allocObject(&unk_101061618, 32, 7);
      *(_QWORD *)(v13 + 16) = sub_10005CBA4;
      *(_QWORD *)(v13 + 24) = v12;
      v14 = swift_allocObject(&unk_101061640, 17, 7);
      *(_BYTE *)(v14 + 16) = 32;
      v15 = swift_allocObject(&unk_101061668, 17, 7);
      *(_BYTE *)(v15 + 16) = 8;
      v16 = swift_allocObject(&unk_101061690, 32, 7);
      *(_QWORD *)(v16 + 16) = sub_10024548C;
      *(_QWORD *)(v16 + 24) = v7;
      v17 = swift_allocObject(&unk_1010616B8, 32, 7);
      *(_QWORD *)(v17 + 16) = sub_10005CBA4;
      *(_QWORD *)(v17 + 24) = v16;
      v18 = swift_allocObject(v114, 128, 7);
      sub_100882D28(v18, 6);
      *v19 = sub_10005CBC4;
      v19[1] = v10;
      v19[2] = sub_10005CBC4;
      v19[3] = v11;
      v19[4] = sub_10005CBB4;
      v19[5] = v13;
      v19[6] = sub_10005CBC4;
      v19[7] = v14;
      v19[8] = sub_10005CBC4;
      v19[9] = v15;
      v19[10] = sub_10005CBB4;
      v19[11] = v17;
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_bridgeObjectRelease();
      v115 = v9;
      if (!os_log_type_enabled(buf, v9))
      {
        v119 = *(void (**)(uint64_t, uint64_t))(v0 + 2064);
        v94 = *(_QWORD *)(v0 + 1936);
        v95 = *(_QWORD *)(v0 + 1800);
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();

        v119(v94, v95);
LABEL_25:
        *(_QWORD *)(v0 + 952) = &type metadata for PoshAccessoryNonOwnerCommand;
        *(_OWORD *)(v0 + 960) = *(_OWORD *)(v0 + 2120);
        *(_OWORD *)(v0 + 928) = xmmword_100E2E420;
        *(_BYTE *)(v0 + 944) = 10;
        v96 = (_QWORD *)swift_task_alloc(dword_1010F3894);
        *(_QWORD *)(v0 + 2352) = v96;
        *v96 = v0;
        v96[1] = sub_10023B064;
        return sub_10023FD28(v0 + 1120, *(_QWORD *)(v0 + 2104), v0 + 928, (uint64_t)&type metadata for PoshAccessoryNonOwnerCommand, *(_QWORD *)(v0 + 2120), *(_QWORD *)(v0 + 2128), 0);
      }
      v106 = v15;
      oslog = (os_log_t)v14;
      v20 = *(_QWORD *)(v0 + 2336);
      v21 = (uint8_t *)sub_1006948A0(22);
      v22 = swift_slowAlloc(64, -1);
      v121 = 0;
      v122 = v22;
      *(_WORD *)v21 = 514;
      v120 = v21 + 2;
      v123 = sub_10005CBC4;
      v124 = v10;
      sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v123, (uint64_t)&v120, (uint64_t)&v121, (uint64_t)&v122);
      if (!v20)
      {
        swift_release();
        v123 = sub_10005CBC4;
        v124 = v11;
        sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v123, (uint64_t)&v120, (uint64_t)&v121, (uint64_t)&v122);
        swift_release();
        v123 = sub_10005CBB4;
        v124 = v13;
        sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v123, (uint64_t)&v120, (uint64_t)&v121, (uint64_t)&v122);
        swift_release();
        v123 = sub_10005CBC4;
        v124 = (uint64_t)oslog;
        sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v123, (uint64_t)&v120, (uint64_t)&v121, (uint64_t)&v122);
        swift_release();
        v123 = sub_10005CBC4;
        v124 = v106;
        sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v123, (uint64_t)&v120, (uint64_t)&v121, (uint64_t)&v122);
        swift_release();
        v123 = sub_10005CBB4;
        v124 = v17;
        sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v123, (uint64_t)&v120, (uint64_t)&v121, (uint64_t)&v122);
        v23 = v22;
        v24 = *(void (**)(uint64_t, uint64_t))(v0 + 2064);
        v25 = *(_QWORD *)(v0 + 1936);
        v26 = *(_QWORD *)(v0 + 1800);
        swift_release();
        _os_log_impl((void *)&_mh_execute_header, buf, v115, "%{public}s firmwareVersion: %s", v21, 0x16u);
        swift_arrayDestroy(v23, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v23, -1, -1);
        sub_100694894((uint64_t)v21);

        v24(v25, v26);
        goto LABEL_25;
      }
      return swift_errorRelease(v20);
    }
    v116 = (_QWORD *)(v0 + 1360);
    v32 = *(_QWORD *)(v0 + 1488);
    v33 = *(_QWORD *)(v0 + 2232);
    v34 = *(_QWORD *)(v0 + 2224);
    sub_100243B24(*(_QWORD *)(v0 + 2192), *(_QWORD *)(v0 + 2200), 1);
    sub_100243B24(v34, v33, 2);
    v29 = v2;
    v30 = v32;
    v31 = v3;
  }
  else
  {
    v116 = (_QWORD *)(v0 + 1360);
    v27 = *(_QWORD *)(v0 + 2232);
    v28 = *(_QWORD *)(v0 + 2224);
    sub_100243B24(*(_QWORD *)(v0 + 2192), *(_QWORD *)(v0 + 2200), 1);
    v29 = v28;
    v30 = v27;
    v31 = 2;
  }
  sub_100243B24(v29, v30, v31);
  v35 = *(_QWORD *)(v0 + 2056);
  v36 = *(_QWORD *)(v0 + 1704);
  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 2048))(*(_QWORD *)(v0 + 1872), *(_QWORD *)(v0 + 2040), *(_QWORD *)(v0 + 1800));
  v37 = swift_allocObject(&unk_101061460, 32, 7);
  *(_QWORD *)(v37 + 16) = sub_100243954;
  *(_QWORD *)(v37 + 24) = v36;
  v38 = swift_retain();
  v39 = Logger.logObject.getter(v38);
  v40 = static os_log_type_t.error.getter(v39);
  v41 = swift_allocObject(&unk_101061488, 17, 7);
  *(_BYTE *)(v41 + 16) = 34;
  v42 = swift_allocObject(&unk_1010614B0, 17, 7);
  *(_BYTE *)(v42 + 16) = 8;
  v43 = swift_allocObject(&unk_1010614D8, 32, 7);
  *(_QWORD *)(v43 + 16) = sub_100245488;
  *(_QWORD *)(v43 + 24) = v37;
  v44 = swift_allocObject(&unk_101061500, 32, 7);
  *(_QWORD *)(v44 + 16) = sub_10005CBA4;
  *(_QWORD *)(v44 + 24) = v43;
  v45 = swift_allocObject(v35, 80, 7);
  sub_100882D28(v45, 3);
  *v46 = sub_10005CBC4;
  v46[1] = v41;
  v46[2] = sub_10005CBC4;
  v46[3] = v42;
  v46[4] = sub_10005CBB4;
  v46[5] = v44;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v39, v40))
  {
    v20 = *(_QWORD *)(v0 + 2336);
    v47 = (uint8_t *)sub_1006948A0(12);
    v121 = 0;
    v122 = swift_slowAlloc(32, -1);
    osloga = (os_log_t)v122;
    bufa = v47;
    *(_WORD *)v47 = 258;
    v120 = v47 + 2;
    v123 = sub_10005CBC4;
    v124 = v41;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v123, (uint64_t)&v120, (uint64_t)&v121, (uint64_t)&v122);
    if (v20)
      return swift_errorRelease(v20);
    swift_release();
    v123 = sub_10005CBC4;
    v124 = v42;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v123, (uint64_t)&v120, (uint64_t)&v121, (uint64_t)&v122);
    swift_release();
    v123 = sub_10005CBB4;
    v124 = v44;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v123, (uint64_t)&v120, (uint64_t)&v121, (uint64_t)&v122);
    v48 = *(void (**)(uint64_t, uint64_t))(v0 + 2064);
    v49 = *(_QWORD *)(v0 + 1872);
    v50 = *(_QWORD *)(v0 + 1800);
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, v39, v40, "%{public}s Invalid firmwareVersionCommandResponse!", bufa, 0xCu);
    swift_arrayDestroy(osloga, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(osloga, -1, -1);
    sub_100694894((uint64_t)bufa);

    v48(v49, v50);
  }
  else
  {
    v51 = *(void (**)(uint64_t, uint64_t))(v0 + 2064);
    v52 = *(_QWORD *)(v0 + 1872);
    v53 = *(_QWORD *)(v0 + 1800);
    swift_release();
    swift_release();
    swift_release();

    v51(v52, v53);
  }
  v54 = *(_QWORD *)(v0 + 2232);
  v55 = *(_QWORD *)(v0 + 2224);
  v103 = *(_QWORD *)(v0 + 2200);
  v56 = *(_QWORD *)(v0 + 2192);
  v57 = *(_QWORD *)(v0 + 2168);
  v58 = *(_QWORD *)(v0 + 2160);
  v59 = type metadata accessor for AccessoryMetadataManager.Error(0);
  v60 = sub_100006204(&qword_1010F37D8, type metadata accessor for AccessoryMetadataManager.Error, (uint64_t)&unk_100E2E588);
  v61 = swift_allocError(v59, v60, 0, 0);
  v63 = swift_storeEnumTagMultiPayload(v62, v59, 7);
  swift_willThrow(v63);
  swift_release();
  swift_release();
  sub_100243B24(v55, v54, 2);
  sub_100243B24(v56, v103, 1);
  sub_100243B24(v58, v57, 0);
  sub_100243B24(v58, v57, 0);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v116);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 1168));
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 976));
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 784));
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 592));
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 400));
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 208));
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
  *(_QWORD *)(v0 + 2424) = v61;
  v64 = *(_QWORD *)(v0 + 1904);
  v65 = *(_QWORD *)(v0 + 1808);
  v66 = *(_QWORD *)(v0 + 1800);
  v67 = *(_QWORD *)(v0 + 1704);
  v68 = sub_10022450C();
  *(_QWORD *)(v0 + 2432) = v68;
  v69 = *(void (**)(uint64_t, uint64_t, uint64_t))(v65 + 16);
  *(_QWORD *)(v0 + 2440) = v69;
  v69(v64, v68, v66);
  v70 = swift_allocObject(&unk_10105FF70, 32, 7);
  *(_QWORD *)(v70 + 16) = sub_100243954;
  *(_QWORD *)(v70 + 24) = v67;
  v117 = swift_allocObject(&unk_10105FF98, 24, 7);
  *(_QWORD *)(v117 + 16) = v61;
  swift_retain();
  v71 = swift_errorRetain(v61);
  oslogb = Logger.logObject.getter(v71);
  bufb = static os_log_type_t.error.getter(oslogb);
  v72 = swift_allocObject(&unk_10105FFC0, 17, 7);
  *(_BYTE *)(v72 + 16) = 34;
  v73 = swift_allocObject(&unk_10105FFE8, 17, 7);
  *(_BYTE *)(v73 + 16) = 8;
  v74 = swift_allocObject(&unk_101060010, 17, 7);
  *(_BYTE *)(v74 + 16) = 34;
  v75 = swift_allocObject(&unk_101060038, 17, 7);
  *(_BYTE *)(v75 + 16) = 8;
  v76 = swift_allocObject(&unk_101060060, 32, 7);
  *(_QWORD *)(v76 + 16) = sub_100243990;
  *(_QWORD *)(v76 + 24) = v70;
  v77 = swift_allocObject(&unk_101060088, 32, 7);
  *(_QWORD *)(v77 + 16) = sub_10001D850;
  *(_QWORD *)(v77 + 24) = v76;
  v78 = swift_allocObject(&unk_1010600B0, 17, 7);
  *(_BYTE *)(v78 + 16) = 66;
  v79 = swift_allocObject(&unk_1010600D8, 17, 7);
  *(_BYTE *)(v79 + 16) = 8;
  v80 = swift_allocObject(&unk_101060100, 32, 7);
  *(_QWORD *)(v80 + 16) = sub_100245648;
  *(_QWORD *)(v80 + 24) = v117;
  v81 = swift_allocObject(&unk_101060128, 32, 7);
  *(_QWORD *)(v81 + 16) = sub_10005859C;
  *(_QWORD *)(v81 + 24) = v80;
  v82 = swift_allocObject(&unk_101060150, 32, 7);
  *(_QWORD *)(v82 + 16) = sub_10001D850;
  *(_QWORD *)(v82 + 24) = v81;
  v83 = sub_10001A9A8(&qword_1010EC538);
  *(_QWORD *)(v0 + 2448) = v83;
  v84 = swift_allocObject(v83, 176, 7);
  sub_100882D28(v84, 9);
  *v85 = sub_100057E50;
  v85[1] = v72;
  v85[2] = sub_10005CBC4;
  v85[3] = v73;
  v85[4] = sub_100243220;
  v85[5] = 0;
  v85[6] = sub_10005CBC4;
  v85[7] = v74;
  v85[8] = sub_10005CBC4;
  v85[9] = v75;
  v85[10] = sub_100057E68;
  v85[11] = v77;
  v85[12] = sub_10005CBC4;
  v85[13] = v78;
  v85[14] = sub_10005CBC4;
  v85[15] = v79;
  v85[16] = sub_1000585A4;
  v85[17] = v82;
  v118 = v72;
  v86 = v73;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(oslogb, bufb))
  {
    v104 = v78;
    v105 = v77;
    v87 = (uint8_t *)sub_1006948A0(32);
    v88 = swift_slowAlloc(8, -1);
    v89 = swift_slowAlloc(64, -1);
    v121 = v88;
    v122 = v89;
    *(_WORD *)v87 = 770;
    v120 = v87 + 2;
    v123 = (uint64_t (*)())sub_100057E50;
    v124 = v118;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v123, (uint64_t)&v120, (uint64_t)&v121, (uint64_t)&v122);
    swift_release();
    v123 = sub_10005CBC4;
    v124 = v86;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v123, (uint64_t)&v120, (uint64_t)&v121, (uint64_t)&v122);
    swift_release();
    v123 = sub_100243220;
    v124 = 0;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v123, (uint64_t)&v120, (uint64_t)&v121, (uint64_t)&v122);
    v123 = sub_10005CBC4;
    v124 = v74;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v123, (uint64_t)&v120, (uint64_t)&v121, (uint64_t)&v122);
    swift_release();
    v123 = sub_10005CBC4;
    v124 = v75;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v123, (uint64_t)&v120, (uint64_t)&v121, (uint64_t)&v122);
    swift_release();
    v123 = (uint64_t (*)())sub_100057E68;
    v124 = v105;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v123, (uint64_t)&v120, (uint64_t)&v121, (uint64_t)&v122);
    swift_release();
    v123 = sub_10005CBC4;
    v124 = v104;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v123, (uint64_t)&v120, (uint64_t)&v121, (uint64_t)&v122);
    swift_release();
    v123 = sub_10005CBC4;
    v124 = v79;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v123, (uint64_t)&v120, (uint64_t)&v121, (uint64_t)&v122);
    swift_release();
    v123 = (uint64_t (*)())sub_1000585A4;
    v124 = v82;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v123, (uint64_t)&v120, (uint64_t)&v121, (uint64_t)&v122);
    v97 = *(uint8_t **)(v0 + 1904);
    v98 = *(_QWORD *)(v0 + 1808);
    v99 = v88;
    v100 = *(_QWORD *)(v0 + 1800);
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, oslogb, bufb, "%{public}s %{public}s Error %{public}@", v87, 0x20u);
    v101 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v99, 1, v101);
    swift_slowDealloc(v99, -1, -1);
    swift_arrayDestroy(v89, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v89, -1, -1);
    sub_100694894((uint64_t)v87);

    v102 = *(void (**)(uint8_t *, uint64_t))(v98 + 8);
    v102(v97, v100);
  }
  else
  {
    bufc = *(uint8_t **)(v0 + 1904);
    v91 = *(_QWORD *)(v0 + 1808);
    v92 = *(_QWORD *)(v0 + 1800);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();

    v102 = *(void (**)(uint8_t *, uint64_t))(v91 + 8);
    v102(bufc, v92);
  }
  *(_QWORD *)(v0 + 2456) = v102;
  v93 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of PeripheralProtocol.cancelConnection()[1]);
  *(_QWORD *)(v0 + 2464) = v93;
  *v93 = v0;
  v93[1] = sub_10023ED18;
  return dispatch thunk of PeripheralProtocol.cancelConnection()(*(_QWORD *)(v0 + 2008), *(_QWORD *)(v0 + 2016));
}

uint64_t sub_10023A8E0()
{
  _QWORD *v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint8_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(uint64_t, uint64_t);
  uint64_t v46;
  uint64_t v47;
  NSObject *oslog;
  os_log_type_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint8_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t (*v56)();
  uint64_t v57;

  v1 = v0[279];
  v2 = v0[278];
  v3 = v0[275];
  v4 = v0[274];
  v5 = v0[271];
  v6 = v0[270];
  swift_release();
  swift_release();
  sub_100243B24(v2, v1, 2);
  sub_100243B24(v4, v3, 1);
  sub_100243B24(v6, v5, 0);
  sub_100243B24(v6, v5, 0);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 146);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 122);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 98);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 74);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 50);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 26);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 176);
  v7 = v0[292];
  v0[303] = v7;
  v8 = v0[238];
  v9 = v0[226];
  v10 = v0[225];
  v11 = v0[213];
  v12 = sub_10022450C();
  v0[304] = v12;
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16);
  v0[305] = v13;
  v13(v8, v12, v10);
  v14 = swift_allocObject(&unk_10105FF70, 32, 7);
  *(_QWORD *)(v14 + 16) = sub_100243954;
  *(_QWORD *)(v14 + 24) = v11;
  v51 = swift_allocObject(&unk_10105FF98, 24, 7);
  *(_QWORD *)(v51 + 16) = v7;
  swift_retain();
  v15 = swift_errorRetain(v7);
  oslog = Logger.logObject.getter(v15);
  v49 = static os_log_type_t.error.getter(oslog);
  v16 = swift_allocObject(&unk_10105FFC0, 17, 7);
  *(_BYTE *)(v16 + 16) = 34;
  v17 = swift_allocObject(&unk_10105FFE8, 17, 7);
  *(_BYTE *)(v17 + 16) = 8;
  v18 = swift_allocObject(&unk_101060010, 17, 7);
  *(_BYTE *)(v18 + 16) = 34;
  v19 = swift_allocObject(&unk_101060038, 17, 7);
  *(_BYTE *)(v19 + 16) = 8;
  v20 = swift_allocObject(&unk_101060060, 32, 7);
  *(_QWORD *)(v20 + 16) = sub_100243990;
  *(_QWORD *)(v20 + 24) = v14;
  v21 = swift_allocObject(&unk_101060088, 32, 7);
  *(_QWORD *)(v21 + 16) = sub_10001D850;
  *(_QWORD *)(v21 + 24) = v20;
  v22 = swift_allocObject(&unk_1010600B0, 17, 7);
  *(_BYTE *)(v22 + 16) = 66;
  v23 = swift_allocObject(&unk_1010600D8, 17, 7);
  *(_BYTE *)(v23 + 16) = 8;
  v24 = swift_allocObject(&unk_101060100, 32, 7);
  *(_QWORD *)(v24 + 16) = sub_100245648;
  *(_QWORD *)(v24 + 24) = v51;
  v25 = swift_allocObject(&unk_101060128, 32, 7);
  *(_QWORD *)(v25 + 16) = sub_10005859C;
  *(_QWORD *)(v25 + 24) = v24;
  v26 = swift_allocObject(&unk_101060150, 32, 7);
  *(_QWORD *)(v26 + 16) = sub_10001D850;
  *(_QWORD *)(v26 + 24) = v25;
  v27 = sub_10001A9A8(&qword_1010EC538);
  v0[306] = v27;
  v28 = swift_allocObject(v27, 176, 7);
  sub_100882D28(v28, 9);
  *v29 = sub_100057E50;
  v29[1] = v16;
  v29[2] = sub_10005CBC4;
  v29[3] = v17;
  v29[4] = sub_100243220;
  v29[5] = 0;
  v29[6] = sub_10005CBC4;
  v29[7] = v18;
  v29[8] = sub_10005CBC4;
  v29[9] = v19;
  v29[10] = sub_100057E68;
  v29[11] = v21;
  v29[12] = sub_10005CBC4;
  v29[13] = v22;
  v29[14] = sub_10005CBC4;
  v29[15] = v23;
  v29[16] = sub_1000585A4;
  v29[17] = v26;
  v52 = v16;
  swift_retain();
  swift_retain();
  v30 = v18;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(oslog, v49))
  {
    v31 = v17;
    v32 = v30;
    v46 = v22;
    v47 = v21;
    v33 = (uint8_t *)sub_1006948A0(32);
    v34 = swift_slowAlloc(8, -1);
    v35 = swift_slowAlloc(64, -1);
    v54 = v34;
    v55 = v35;
    *(_WORD *)v33 = 770;
    v53 = v33 + 2;
    v56 = (uint64_t (*)())sub_100057E50;
    v57 = v52;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v56, (uint64_t)&v53, (uint64_t)&v54, (uint64_t)&v55);
    swift_release();
    v56 = sub_10005CBC4;
    v57 = v31;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v56, (uint64_t)&v53, (uint64_t)&v54, (uint64_t)&v55);
    swift_release();
    v56 = sub_100243220;
    v57 = 0;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v56, (uint64_t)&v53, (uint64_t)&v54, (uint64_t)&v55);
    v56 = sub_10005CBC4;
    v57 = v32;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v56, (uint64_t)&v53, (uint64_t)&v54, (uint64_t)&v55);
    swift_release();
    v56 = sub_10005CBC4;
    v57 = v19;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v56, (uint64_t)&v53, (uint64_t)&v54, (uint64_t)&v55);
    swift_release();
    v56 = (uint64_t (*)())sub_100057E68;
    v57 = v47;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v56, (uint64_t)&v53, (uint64_t)&v54, (uint64_t)&v55);
    swift_release();
    v56 = sub_10005CBC4;
    v57 = v46;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v56, (uint64_t)&v53, (uint64_t)&v54, (uint64_t)&v55);
    swift_release();
    v56 = sub_10005CBC4;
    v57 = v23;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v56, (uint64_t)&v53, (uint64_t)&v54, (uint64_t)&v55);
    swift_release();
    v56 = (uint64_t (*)())sub_1000585A4;
    v57 = v26;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v56, (uint64_t)&v53, (uint64_t)&v54, (uint64_t)&v55);
    v40 = v0[238];
    v41 = v0[226];
    v42 = v34;
    v43 = v0[225];
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, oslog, v49, "%{public}s %{public}s Error %{public}@", v33, 0x20u);
    v44 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v42, 1, v44);
    swift_slowDealloc(v42, -1, -1);
    swift_arrayDestroy(v35, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v35, -1, -1);
    sub_100694894((uint64_t)v33);

    v45 = *(void (**)(uint64_t, uint64_t))(v41 + 8);
    v45(v40, v43);
  }
  else
  {
    v50 = v0[238];
    v36 = v0[226];
    v37 = v0[225];
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();

    v45 = *(void (**)(uint64_t, uint64_t))(v36 + 8);
    v45(v50, v37);
  }
  v0[307] = v45;
  v38 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of PeripheralProtocol.cancelConnection()[1]);
  v0[308] = v38;
  *v38 = v0;
  v38[1] = sub_10023ED18;
  return dispatch thunk of PeripheralProtocol.cancelConnection()(v0[251], v0[252]);
}

uint64_t sub_10023B064()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 2352);
  *(_QWORD *)(*v1 + 2360) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_10023BEA0;
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v2 + 928));
    v4 = sub_10023B0D0;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_10023B0D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  os_log_type_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint8_t *v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint8_t *v37;
  void (*v38)(uint64_t, uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  os_log_type_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint8_t *v66;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  _QWORD *v74;
  void (*v75)(uint64_t, uint64_t);
  uint64_t v76;
  uint8_t *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unsigned __int8 v84;
  uint64_t v85;
  uint64_t v86;
  uint8_t *bufb;
  os_log_type_t buf;
  uint8_t *bufc;
  os_log_type_t bufa;
  uint8_t *bufd;
  uint8_t *bufe;
  NSObject *v93;
  NSObject *v94;
  uint8_t *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t (*v98)(uint64_t *, uint64_t, uint64_t);
  uint64_t v99;

  v1 = *(_QWORD *)(v0 + 2152);
  sub_100057DB8(v0 + 1120, v0 + 736);
  if (swift_dynamicCast(v0 + 1576, v0 + 736, v1, &type metadata for PoshAccessoryNonOwnerCommand, 6))
  {
    v2 = *(_QWORD *)(v0 + 1576);
    v3 = *(unsigned __int8 *)(v0 + 1592);
    if (v3 == 6)
    {
      bufb = *(uint8_t **)(v0 + 2056);
      v4 = *(_QWORD *)(v0 + 1704);
      (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 2048))(*(_QWORD *)(v0 + 1928), *(_QWORD *)(v0 + 2040), *(_QWORD *)(v0 + 1800));
      v5 = swift_allocObject(&unk_101061960, 32, 7);
      *(_QWORD *)(v5 + 16) = sub_100243954;
      *(_QWORD *)(v5 + 24) = v4;
      v6 = swift_allocObject(&unk_101061988, 17, 7);
      v84 = v2;
      *(_BYTE *)(v6 + 16) = v2;
      v7 = swift_retain();
      v93 = Logger.logObject.getter(v7);
      v8 = static os_log_type_t.default.getter(v93);
      v9 = swift_allocObject(&unk_1010619B0, 17, 7);
      *(_BYTE *)(v9 + 16) = 34;
      v10 = swift_allocObject(&unk_1010619D8, 17, 7);
      *(_BYTE *)(v10 + 16) = 8;
      v11 = swift_allocObject(&unk_101061A00, 32, 7);
      *(_QWORD *)(v11 + 16) = sub_100245488;
      *(_QWORD *)(v11 + 24) = v5;
      v12 = swift_allocObject(&unk_101061A28, 32, 7);
      *(_QWORD *)(v12 + 16) = sub_10005CBA4;
      *(_QWORD *)(v12 + 24) = v11;
      v13 = swift_allocObject(&unk_101061A50, 17, 7);
      *(_BYTE *)(v13 + 16) = 0;
      v14 = swift_allocObject(&unk_101061A78, 17, 7);
      *(_BYTE *)(v14 + 16) = 1;
      v15 = swift_allocObject(&unk_101061AA0, 32, 7);
      *(_QWORD *)(v15 + 16) = sub_100245498;
      *(_QWORD *)(v15 + 24) = v6;
      v16 = swift_allocObject(&unk_101061AC8, 32, 7);
      *(_QWORD *)(v16 + 16) = sub_100245670;
      *(_QWORD *)(v16 + 24) = v15;
      v17 = swift_allocObject(bufb, 128, 7);
      sub_100882D28(v17, 6);
      *v18 = sub_10005CBC4;
      v18[1] = v9;
      v18[2] = sub_10005CBC4;
      v18[3] = v10;
      v18[4] = sub_10005CBB4;
      v18[5] = v12;
      v18[6] = sub_10005CBC4;
      v18[7] = v13;
      v18[8] = sub_10005CBC4;
      v18[9] = v14;
      v18[10] = sub_100245494;
      v18[11] = v16;
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_bridgeObjectRelease();
      buf = v8;
      if (!os_log_type_enabled(v93, v8))
      {
        bufe = *(uint8_t **)(v0 + 2064);
        v71 = *(_QWORD *)(v0 + 1928);
        v72 = *(_QWORD *)(v0 + 1800);
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();
        swift_release();

        ((void (*)(uint64_t, uint64_t))bufe)(v71, v72);
        goto LABEL_17;
      }
      v80 = v14;
      v82 = v13;
      v19 = *(_QWORD *)(v0 + 2360);
      v20 = (uint8_t *)sub_1006948A0(15);
      v21 = swift_slowAlloc(32, -1);
      v96 = 0;
      v97 = v21;
      *(_WORD *)v20 = 514;
      v95 = v20 + 2;
      v98 = (uint64_t (*)(uint64_t *, uint64_t, uint64_t))sub_10005CBC4;
      v99 = v9;
      sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v98, (uint64_t)&v95, (uint64_t)&v96, (uint64_t)&v97);
      if (!v19)
      {
        swift_release();
        v98 = (uint64_t (*)(uint64_t *, uint64_t, uint64_t))sub_10005CBC4;
        v99 = v10;
        sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v98, (uint64_t)&v95, (uint64_t)&v96, (uint64_t)&v97);
        swift_release();
        v98 = (uint64_t (*)(uint64_t *, uint64_t, uint64_t))sub_10005CBB4;
        v99 = v12;
        sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v98, (uint64_t)&v95, (uint64_t)&v96, (uint64_t)&v97);
        swift_release();
        v98 = (uint64_t (*)(uint64_t *, uint64_t, uint64_t))sub_10005CBC4;
        v99 = v82;
        sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v98, (uint64_t)&v95, (uint64_t)&v96, (uint64_t)&v97);
        swift_release();
        v98 = (uint64_t (*)(uint64_t *, uint64_t, uint64_t))sub_10005CBC4;
        v99 = v80;
        sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v98, (uint64_t)&v95, (uint64_t)&v96, (uint64_t)&v97);
        swift_release();
        v98 = sub_100245494;
        v99 = v16;
        sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v98, (uint64_t)&v95, (uint64_t)&v96, (uint64_t)&v97);
        v22 = *(void (**)(uint64_t, uint64_t))(v0 + 2064);
        v23 = *(_QWORD *)(v0 + 1928);
        v24 = *(_QWORD *)(v0 + 1800);
        swift_release();
        _os_log_impl((void *)&_mh_execute_header, v93, buf, "%{public}s batteryType: %hhu", v20, 0xFu);
        swift_arrayDestroy(v21, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v21, -1, -1);
        sub_100694894((uint64_t)v20);

        v22(v23, v24);
LABEL_17:
        v73 = v84;
        if (v84 >= 3u)
          v73 = 3;
        *(_BYTE *)(v0 + 1473) = v73;
        *(_QWORD *)(v0 + 376) = &type metadata for PoshAccessoryNonOwnerCommand;
        *(_OWORD *)(v0 + 384) = *(_OWORD *)(v0 + 2120);
        *(_OWORD *)(v0 + 352) = xmmword_100E2E430;
        *(_BYTE *)(v0 + 368) = 10;
        v74 = (_QWORD *)swift_task_alloc(dword_1010F3894);
        *(_QWORD *)(v0 + 2368) = v74;
        *v74 = v0;
        v74[1] = sub_10023C41C;
        return sub_10023FD28(v0 + 544, *(_QWORD *)(v0 + 2104), v0 + 352, (uint64_t)&type metadata for PoshAccessoryNonOwnerCommand, *(_QWORD *)(v0 + 2120), *(_QWORD *)(v0 + 2128), 0);
      }
      return swift_errorRelease(v19);
    }
    sub_100243B24(*(_QWORD *)(v0 + 1576), *(_QWORD *)(v0 + 1584), v3);
  }
  v25 = *(_QWORD *)(v0 + 2056);
  v26 = *(_QWORD *)(v0 + 1704);
  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 2048))(*(_QWORD *)(v0 + 1880), *(_QWORD *)(v0 + 2040), *(_QWORD *)(v0 + 1800));
  v27 = swift_allocObject(&unk_101061898, 32, 7);
  *(_QWORD *)(v27 + 16) = sub_100243954;
  *(_QWORD *)(v27 + 24) = v26;
  v28 = swift_retain();
  v29 = Logger.logObject.getter(v28);
  v30 = static os_log_type_t.error.getter(v29);
  v31 = swift_allocObject(&unk_1010618C0, 17, 7);
  *(_BYTE *)(v31 + 16) = 34;
  v32 = swift_allocObject(&unk_1010618E8, 17, 7);
  *(_BYTE *)(v32 + 16) = 8;
  v33 = swift_allocObject(&unk_101061910, 32, 7);
  *(_QWORD *)(v33 + 16) = sub_100245488;
  *(_QWORD *)(v33 + 24) = v27;
  v34 = swift_allocObject(&unk_101061938, 32, 7);
  *(_QWORD *)(v34 + 16) = sub_10005CBA4;
  *(_QWORD *)(v34 + 24) = v33;
  v35 = swift_allocObject(v25, 80, 7);
  sub_100882D28(v35, 3);
  *v36 = sub_10005CBC4;
  v36[1] = v31;
  v36[2] = sub_10005CBC4;
  v36[3] = v32;
  v36[4] = sub_10005CBB4;
  v36[5] = v34;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(v29, v30))
  {
    v19 = *(_QWORD *)(v0 + 2360);
    v37 = (uint8_t *)sub_1006948A0(12);
    v96 = 0;
    v97 = swift_slowAlloc(32, -1);
    v85 = v97;
    *(_WORD *)v37 = 258;
    v95 = v37 + 2;
    v98 = (uint64_t (*)(uint64_t *, uint64_t, uint64_t))sub_10005CBC4;
    v99 = v31;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v98, (uint64_t)&v95, (uint64_t)&v96, (uint64_t)&v97);
    if (v19)
      return swift_errorRelease(v19);
    swift_release();
    v98 = (uint64_t (*)(uint64_t *, uint64_t, uint64_t))sub_10005CBC4;
    v99 = v32;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v98, (uint64_t)&v95, (uint64_t)&v96, (uint64_t)&v97);
    swift_release();
    v98 = (uint64_t (*)(uint64_t *, uint64_t, uint64_t))sub_10005CBB4;
    v99 = v34;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v98, (uint64_t)&v95, (uint64_t)&v96, (uint64_t)&v97);
    v38 = *(void (**)(uint64_t, uint64_t))(v0 + 2064);
    v39 = *(_QWORD *)(v0 + 1880);
    v40 = *(_QWORD *)(v0 + 1800);
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, v29, v30, "%{public}s Invalid batteryTypeCommandResponse!", v37, 0xCu);
    swift_arrayDestroy(v85, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v85, -1, -1);
    sub_100694894((uint64_t)v37);

    v41 = v39;
    v42 = v40;
  }
  else
  {
    v38 = *(void (**)(uint64_t, uint64_t))(v0 + 2064);
    v43 = *(_QWORD *)(v0 + 1880);
    v44 = *(_QWORD *)(v0 + 1800);
    swift_release();
    swift_release();
    swift_release();

    v41 = v43;
    v42 = v44;
  }
  v38(v41, v42);
  v45 = type metadata accessor for AccessoryMetadataManager.Error(0);
  v46 = sub_100006204(&qword_1010F37D8, type metadata accessor for AccessoryMetadataManager.Error, (uint64_t)&unk_100E2E588);
  v47 = swift_allocError(v45, v46, 0, 0);
  v49 = swift_storeEnumTagMultiPayload(v48, v45, 7);
  swift_willThrow(v49);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 1120));
  *(_QWORD *)(v0 + 2400) = v47;
  bufc = *(uint8_t **)(v0 + 2056);
  v50 = *(_QWORD *)(v0 + 1704);
  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 2048))(*(_QWORD *)(v0 + 1912), *(_QWORD *)(v0 + 2040), *(_QWORD *)(v0 + 1800));
  v51 = swift_allocObject(&unk_1010616E0, 32, 7);
  *(_QWORD *)(v51 + 16) = sub_100243954;
  *(_QWORD *)(v51 + 24) = v50;
  v52 = swift_allocObject(&unk_101061708, 24, 7);
  *(_QWORD *)(v52 + 16) = v47;
  swift_retain();
  v53 = swift_errorRetain(v47);
  v94 = Logger.logObject.getter(v53);
  v54 = static os_log_type_t.error.getter(v94);
  v55 = swift_allocObject(&unk_101061730, 17, 7);
  *(_BYTE *)(v55 + 16) = 34;
  v56 = swift_allocObject(&unk_101061758, 17, 7);
  *(_BYTE *)(v56 + 16) = 8;
  v57 = swift_allocObject(&unk_101061780, 32, 7);
  *(_QWORD *)(v57 + 16) = sub_100245488;
  *(_QWORD *)(v57 + 24) = v51;
  v58 = swift_allocObject(&unk_1010617A8, 32, 7);
  *(_QWORD *)(v58 + 16) = sub_10005CBA4;
  *(_QWORD *)(v58 + 24) = v57;
  v59 = swift_allocObject(&unk_1010617D0, 17, 7);
  *(_BYTE *)(v59 + 16) = 66;
  v60 = swift_allocObject(&unk_1010617F8, 17, 7);
  *(_BYTE *)(v60 + 16) = 8;
  v61 = swift_allocObject(&unk_101061820, 32, 7);
  *(_QWORD *)(v61 + 16) = sub_1000594F4;
  *(_QWORD *)(v61 + 24) = v52;
  v62 = swift_allocObject(&unk_101061848, 32, 7);
  *(_QWORD *)(v62 + 16) = sub_10005CBB0;
  *(_QWORD *)(v62 + 24) = v61;
  v63 = swift_allocObject(&unk_101061870, 32, 7);
  *(_QWORD *)(v63 + 16) = sub_10005CBA4;
  *(_QWORD *)(v63 + 24) = v62;
  v64 = swift_allocObject(bufc, 128, 7);
  sub_100882D28(v64, 6);
  *v65 = sub_10005CBC4;
  v65[1] = v55;
  v65[2] = sub_10005CBC4;
  v65[3] = v56;
  v65[4] = sub_10005CBB4;
  v65[5] = v58;
  v65[6] = sub_10005CBC4;
  v65[7] = v59;
  v65[8] = sub_10005CBC4;
  v65[9] = v60;
  v65[10] = sub_10005CBBC;
  v65[11] = v63;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRelease();
  bufa = v54;
  if (os_log_type_enabled(v94, v54))
  {
    v86 = v60;
    v66 = (uint8_t *)sub_1006948A0(22);
    v81 = swift_slowAlloc(8, -1);
    v83 = swift_slowAlloc(32, -1);
    v96 = v81;
    v97 = v83;
    *(_WORD *)v66 = 514;
    v95 = v66 + 2;
    v98 = (uint64_t (*)(uint64_t *, uint64_t, uint64_t))sub_10005CBC4;
    v99 = v55;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v98, (uint64_t)&v95, (uint64_t)&v96, (uint64_t)&v97);
    swift_release();
    v98 = (uint64_t (*)(uint64_t *, uint64_t, uint64_t))sub_10005CBC4;
    v99 = v56;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v98, (uint64_t)&v95, (uint64_t)&v96, (uint64_t)&v97);
    swift_release();
    v98 = (uint64_t (*)(uint64_t *, uint64_t, uint64_t))sub_10005CBB4;
    v99 = v58;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v98, (uint64_t)&v95, (uint64_t)&v96, (uint64_t)&v97);
    swift_release();
    v98 = (uint64_t (*)(uint64_t *, uint64_t, uint64_t))sub_10005CBC4;
    v99 = v59;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v98, (uint64_t)&v95, (uint64_t)&v96, (uint64_t)&v97);
    swift_release();
    v98 = (uint64_t (*)(uint64_t *, uint64_t, uint64_t))sub_10005CBC4;
    v99 = v86;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v98, (uint64_t)&v95, (uint64_t)&v96, (uint64_t)&v97);
    swift_release();
    v98 = (uint64_t (*)(uint64_t *, uint64_t, uint64_t))sub_10005CBBC;
    v99 = v63;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v98, (uint64_t)&v95, (uint64_t)&v96, (uint64_t)&v97);
    v75 = *(void (**)(uint64_t, uint64_t))(v0 + 2064);
    v76 = *(_QWORD *)(v0 + 1912);
    v77 = v66;
    v78 = *(_QWORD *)(v0 + 1800);
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, v94, bufa, "%{public}s Error reading BatteryLevel/BatteryType %{public}@", v77, 0x16u);
    v79 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v81, 1, v79);
    swift_slowDealloc(v81, -1, -1);
    swift_arrayDestroy(v83, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v83, -1, -1);
    sub_100694894((uint64_t)v77);

    v75(v76, v78);
  }
  else
  {
    bufd = *(uint8_t **)(v0 + 2064);
    v68 = *(_QWORD *)(v0 + 1912);
    v69 = *(_QWORD *)(v0 + 1800);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();

    ((void (*)(uint64_t, uint64_t))bufd)(v68, v69);
  }
  v70 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of PeripheralProtocol.cancelConnection()[1]);
  *(_QWORD *)(v0 + 2408) = v70;
  *v70 = v0;
  v70[1] = sub_10023E134;
  return dispatch thunk of PeripheralProtocol.cancelConnection()(*(_QWORD *)(v0 + 2008), *(_QWORD *)(v0 + 2016));
}

uint64_t sub_10023BEA0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  void (*v25)(uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  os_log_type_t v34;
  void (*v35)(uint64_t, uint64_t);
  NSObject *v36;
  uint8_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t (*v40)();
  uint64_t v41;

  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 928));
  v1 = *(_QWORD *)(v0 + 2360);
  *(_QWORD *)(v0 + 2400) = v1;
  v33 = *(_QWORD *)(v0 + 2056);
  v2 = *(_QWORD *)(v0 + 1704);
  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 2048))(*(_QWORD *)(v0 + 1912), *(_QWORD *)(v0 + 2040), *(_QWORD *)(v0 + 1800));
  v3 = swift_allocObject(&unk_1010616E0, 32, 7);
  *(_QWORD *)(v3 + 16) = sub_100243954;
  *(_QWORD *)(v3 + 24) = v2;
  v4 = swift_allocObject(&unk_101061708, 24, 7);
  *(_QWORD *)(v4 + 16) = v1;
  swift_retain();
  v5 = swift_errorRetain(v1);
  v36 = Logger.logObject.getter(v5);
  v6 = static os_log_type_t.error.getter(v36);
  v7 = swift_allocObject(&unk_101061730, 17, 7);
  *(_BYTE *)(v7 + 16) = 34;
  v8 = swift_allocObject(&unk_101061758, 17, 7);
  *(_BYTE *)(v8 + 16) = 8;
  v9 = swift_allocObject(&unk_101061780, 32, 7);
  *(_QWORD *)(v9 + 16) = sub_100245488;
  *(_QWORD *)(v9 + 24) = v3;
  LOBYTE(v3) = v6;
  v10 = swift_allocObject(&unk_1010617A8, 32, 7);
  *(_QWORD *)(v10 + 16) = sub_10005CBA4;
  *(_QWORD *)(v10 + 24) = v9;
  v11 = swift_allocObject(&unk_1010617D0, 17, 7);
  *(_BYTE *)(v11 + 16) = 66;
  v12 = swift_allocObject(&unk_1010617F8, 17, 7);
  *(_BYTE *)(v12 + 16) = 8;
  v13 = swift_allocObject(&unk_101061820, 32, 7);
  *(_QWORD *)(v13 + 16) = sub_1000594F4;
  *(_QWORD *)(v13 + 24) = v4;
  v14 = swift_allocObject(&unk_101061848, 32, 7);
  *(_QWORD *)(v14 + 16) = sub_10005CBB0;
  *(_QWORD *)(v14 + 24) = v13;
  v15 = swift_allocObject(&unk_101061870, 32, 7);
  *(_QWORD *)(v15 + 16) = sub_10005CBA4;
  *(_QWORD *)(v15 + 24) = v14;
  v16 = swift_allocObject(v33, 128, 7);
  sub_100882D28(v16, 6);
  *v17 = sub_10005CBC4;
  v17[1] = v7;
  v17[2] = sub_10005CBC4;
  v17[3] = v8;
  v17[4] = sub_10005CBB4;
  v17[5] = v10;
  v17[6] = sub_10005CBC4;
  v17[7] = v11;
  v17[8] = sub_10005CBC4;
  v17[9] = v12;
  v17[10] = sub_10005CBBC;
  v17[11] = v15;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRelease();
  v34 = v3;
  if (os_log_type_enabled(v36, (os_log_type_t)v3))
  {
    v31 = v12;
    v32 = v11;
    v18 = (uint8_t *)sub_1006948A0(22);
    v19 = swift_slowAlloc(8, -1);
    v20 = swift_slowAlloc(32, -1);
    v30 = v19;
    v38 = v19;
    v39 = v20;
    *(_WORD *)v18 = 514;
    v37 = v18 + 2;
    v40 = sub_10005CBC4;
    v41 = v7;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v40, (uint64_t)&v37, (uint64_t)&v38, (uint64_t)&v39);
    swift_release();
    v40 = sub_10005CBC4;
    v41 = v8;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v40, (uint64_t)&v37, (uint64_t)&v38, (uint64_t)&v39);
    swift_release();
    v40 = sub_10005CBB4;
    v41 = v10;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v40, (uint64_t)&v37, (uint64_t)&v38, (uint64_t)&v39);
    swift_release();
    v40 = sub_10005CBC4;
    v41 = v32;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v40, (uint64_t)&v37, (uint64_t)&v38, (uint64_t)&v39);
    swift_release();
    v40 = sub_10005CBC4;
    v41 = v31;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v40, (uint64_t)&v37, (uint64_t)&v38, (uint64_t)&v39);
    swift_release();
    v40 = sub_10005CBBC;
    v41 = v15;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v40, (uint64_t)&v37, (uint64_t)&v38, (uint64_t)&v39);
    v25 = *(void (**)(uint64_t, uint64_t))(v0 + 2064);
    v26 = *(_QWORD *)(v0 + 1912);
    v27 = v20;
    v28 = *(_QWORD *)(v0 + 1800);
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, v36, v34, "%{public}s Error reading BatteryLevel/BatteryType %{public}@", v18, 0x16u);
    v29 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v30, 1, v29);
    swift_slowDealloc(v30, -1, -1);
    swift_arrayDestroy(v27, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v27, -1, -1);
    sub_100694894((uint64_t)v18);

    v25(v26, v28);
  }
  else
  {
    v35 = *(void (**)(uint64_t, uint64_t))(v0 + 2064);
    v21 = *(_QWORD *)(v0 + 1912);
    v22 = *(_QWORD *)(v0 + 1800);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();

    v35(v21, v22);
  }
  v23 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of PeripheralProtocol.cancelConnection()[1]);
  *(_QWORD *)(v0 + 2408) = v23;
  *v23 = v0;
  v23[1] = sub_10023E134;
  return dispatch thunk of PeripheralProtocol.cancelConnection()(*(_QWORD *)(v0 + 2008), *(_QWORD *)(v0 + 2016));
}

uint64_t sub_10023C41C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 2368);
  *(_QWORD *)(*v1 + 2376) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_10023D1EC;
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v2 + 352));
    v4 = sub_10023C488;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_10023C488()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  os_log_type_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint8_t *v38;
  void (*v39)(uint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint8_t *v66;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t (*v71)();
  uint64_t v72;
  uint64_t v73;
  char v74;
  void (*v75)(uint64_t, uint64_t);
  uint64_t v76;
  uint8_t *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char v84;
  uint64_t v85;
  uint64_t v86;
  uint8_t *bufb;
  os_log_type_t buf;
  uint8_t *bufc;
  os_log_type_t bufa;
  uint8_t *bufd;
  uint8_t *bufe;
  NSObject *v93;
  NSObject *v94;
  uint8_t *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t (*v98)(uint64_t *, uint64_t, uint64_t);
  uint64_t v99;

  v1 = *(_QWORD *)(v0 + 2152);
  sub_100057DB8(v0 + 544, v0 + 160);
  if (!swift_dynamicCast(v0 + 1672, v0 + 160, v1, &type metadata for PoshAccessoryNonOwnerCommand, 6))
  {
LABEL_7:
    v26 = *(_QWORD *)(v0 + 2056);
    v27 = *(_QWORD *)(v0 + 1704);
    (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 2048))(*(_QWORD *)(v0 + 1888), *(_QWORD *)(v0 + 2040), *(_QWORD *)(v0 + 1800));
    v28 = swift_allocObject(&unk_101061AF0, 32, 7);
    *(_QWORD *)(v28 + 16) = sub_100243954;
    *(_QWORD *)(v28 + 24) = v27;
    v29 = swift_retain();
    v30 = Logger.logObject.getter(v29);
    v31 = static os_log_type_t.error.getter(v30);
    v32 = swift_allocObject(&unk_101061B18, 17, 7);
    *(_BYTE *)(v32 + 16) = 34;
    v33 = swift_allocObject(&unk_101061B40, 17, 7);
    *(_BYTE *)(v33 + 16) = 8;
    v34 = swift_allocObject(&unk_101061B68, 32, 7);
    *(_QWORD *)(v34 + 16) = sub_100245488;
    *(_QWORD *)(v34 + 24) = v28;
    v35 = swift_allocObject(&unk_101061B90, 32, 7);
    *(_QWORD *)(v35 + 16) = sub_10005CBA4;
    *(_QWORD *)(v35 + 24) = v34;
    v36 = swift_allocObject(v26, 80, 7);
    sub_100882D28(v36, 3);
    *v37 = sub_10005CBC4;
    v37[1] = v32;
    v37[2] = sub_10005CBC4;
    v37[3] = v33;
    v37[4] = sub_10005CBB4;
    v37[5] = v35;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRelease();
    if (os_log_type_enabled(v30, v31))
    {
      v19 = *(_QWORD *)(v0 + 2376);
      v38 = (uint8_t *)sub_1006948A0(12);
      v96 = 0;
      v97 = swift_slowAlloc(32, -1);
      v85 = v97;
      *(_WORD *)v38 = 258;
      v95 = v38 + 2;
      v98 = (uint64_t (*)(uint64_t *, uint64_t, uint64_t))sub_10005CBC4;
      v99 = v32;
      sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v98, (uint64_t)&v95, (uint64_t)&v96, (uint64_t)&v97);
      if (v19)
        return swift_errorRelease(v19);
      swift_release();
      v98 = (uint64_t (*)(uint64_t *, uint64_t, uint64_t))sub_10005CBC4;
      v99 = v33;
      sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v98, (uint64_t)&v95, (uint64_t)&v96, (uint64_t)&v97);
      swift_release();
      v98 = (uint64_t (*)(uint64_t *, uint64_t, uint64_t))sub_10005CBB4;
      v99 = v35;
      sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v98, (uint64_t)&v95, (uint64_t)&v96, (uint64_t)&v97);
      v39 = *(void (**)(uint64_t, uint64_t))(v0 + 2064);
      v40 = *(_QWORD *)(v0 + 1888);
      v41 = *(_QWORD *)(v0 + 1800);
      swift_release();
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "%{public}s Invalid batteryLevelCommandResponse!", v38, 0xCu);
      swift_arrayDestroy(v85, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v85, -1, -1);
      sub_100694894((uint64_t)v38);

      v42 = v40;
      v43 = v41;
    }
    else
    {
      v39 = *(void (**)(uint64_t, uint64_t))(v0 + 2064);
      v44 = *(_QWORD *)(v0 + 1888);
      v45 = *(_QWORD *)(v0 + 1800);
      swift_release();
      swift_release();
      swift_release();

      v42 = v44;
      v43 = v45;
    }
    v39(v42, v43);
    v46 = type metadata accessor for AccessoryMetadataManager.Error(0);
    v47 = sub_100006204(&qword_1010F37D8, type metadata accessor for AccessoryMetadataManager.Error, (uint64_t)&unk_100E2E588);
    v48 = swift_allocError(v46, v47, 0, 0);
    v50 = swift_storeEnumTagMultiPayload(v49, v46, 7);
    swift_willThrow(v50);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 544));
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 1120));
    *(_QWORD *)(v0 + 2400) = v48;
    bufc = *(uint8_t **)(v0 + 2056);
    v51 = *(_QWORD *)(v0 + 1704);
    (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 2048))(*(_QWORD *)(v0 + 1912), *(_QWORD *)(v0 + 2040), *(_QWORD *)(v0 + 1800));
    v52 = swift_allocObject(&unk_1010616E0, 32, 7);
    *(_QWORD *)(v52 + 16) = sub_100243954;
    *(_QWORD *)(v52 + 24) = v51;
    v53 = swift_allocObject(&unk_101061708, 24, 7);
    *(_QWORD *)(v53 + 16) = v48;
    swift_retain();
    v54 = swift_errorRetain(v48);
    v94 = Logger.logObject.getter(v54);
    LOBYTE(v46) = static os_log_type_t.error.getter(v94);
    v55 = swift_allocObject(&unk_101061730, 17, 7);
    *(_BYTE *)(v55 + 16) = 34;
    v56 = swift_allocObject(&unk_101061758, 17, 7);
    *(_BYTE *)(v56 + 16) = 8;
    v57 = swift_allocObject(&unk_101061780, 32, 7);
    *(_QWORD *)(v57 + 16) = sub_100245488;
    *(_QWORD *)(v57 + 24) = v52;
    v58 = swift_allocObject(&unk_1010617A8, 32, 7);
    *(_QWORD *)(v58 + 16) = sub_10005CBA4;
    *(_QWORD *)(v58 + 24) = v57;
    v59 = swift_allocObject(&unk_1010617D0, 17, 7);
    *(_BYTE *)(v59 + 16) = 66;
    v60 = swift_allocObject(&unk_1010617F8, 17, 7);
    *(_BYTE *)(v60 + 16) = 8;
    v61 = swift_allocObject(&unk_101061820, 32, 7);
    *(_QWORD *)(v61 + 16) = sub_1000594F4;
    *(_QWORD *)(v61 + 24) = v53;
    v62 = swift_allocObject(&unk_101061848, 32, 7);
    *(_QWORD *)(v62 + 16) = sub_10005CBB0;
    *(_QWORD *)(v62 + 24) = v61;
    v63 = swift_allocObject(&unk_101061870, 32, 7);
    *(_QWORD *)(v63 + 16) = sub_10005CBA4;
    *(_QWORD *)(v63 + 24) = v62;
    v64 = swift_allocObject(bufc, 128, 7);
    sub_100882D28(v64, 6);
    *v65 = sub_10005CBC4;
    v65[1] = v55;
    v65[2] = sub_10005CBC4;
    v65[3] = v56;
    v65[4] = sub_10005CBB4;
    v65[5] = v58;
    v65[6] = sub_10005CBC4;
    v65[7] = v59;
    v65[8] = sub_10005CBC4;
    v65[9] = v60;
    v65[10] = sub_10005CBBC;
    v65[11] = v63;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRelease();
    bufa = v46;
    if (os_log_type_enabled(v94, (os_log_type_t)v46))
    {
      v86 = v60;
      v66 = (uint8_t *)sub_1006948A0(22);
      v81 = swift_slowAlloc(8, -1);
      v83 = swift_slowAlloc(32, -1);
      v96 = v81;
      v97 = v83;
      *(_WORD *)v66 = 514;
      v95 = v66 + 2;
      v98 = (uint64_t (*)(uint64_t *, uint64_t, uint64_t))sub_10005CBC4;
      v99 = v55;
      sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v98, (uint64_t)&v95, (uint64_t)&v96, (uint64_t)&v97);
      swift_release();
      v98 = (uint64_t (*)(uint64_t *, uint64_t, uint64_t))sub_10005CBC4;
      v99 = v56;
      sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v98, (uint64_t)&v95, (uint64_t)&v96, (uint64_t)&v97);
      swift_release();
      v98 = (uint64_t (*)(uint64_t *, uint64_t, uint64_t))sub_10005CBB4;
      v99 = v58;
      sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v98, (uint64_t)&v95, (uint64_t)&v96, (uint64_t)&v97);
      swift_release();
      v98 = (uint64_t (*)(uint64_t *, uint64_t, uint64_t))sub_10005CBC4;
      v99 = v59;
      sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v98, (uint64_t)&v95, (uint64_t)&v96, (uint64_t)&v97);
      swift_release();
      v98 = (uint64_t (*)(uint64_t *, uint64_t, uint64_t))sub_10005CBC4;
      v99 = v86;
      sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v98, (uint64_t)&v95, (uint64_t)&v96, (uint64_t)&v97);
      swift_release();
      v98 = (uint64_t (*)(uint64_t *, uint64_t, uint64_t))sub_10005CBBC;
      v99 = v63;
      sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v98, (uint64_t)&v95, (uint64_t)&v96, (uint64_t)&v97);
      v75 = *(void (**)(uint64_t, uint64_t))(v0 + 2064);
      v76 = *(_QWORD *)(v0 + 1912);
      v77 = v66;
      v78 = *(_QWORD *)(v0 + 1800);
      swift_release();
      _os_log_impl((void *)&_mh_execute_header, v94, bufa, "%{public}s Error reading BatteryLevel/BatteryType %{public}@", v77, 0x16u);
      v79 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
      swift_arrayDestroy(v81, 1, v79);
      swift_slowDealloc(v81, -1, -1);
      swift_arrayDestroy(v83, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v83, -1, -1);
      sub_100694894((uint64_t)v77);

      v75(v76, v78);
    }
    else
    {
      bufd = *(uint8_t **)(v0 + 2064);
      v68 = *(_QWORD *)(v0 + 1912);
      v69 = *(_QWORD *)(v0 + 1800);
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();

      ((void (*)(uint64_t, uint64_t))bufd)(v68, v69);
    }
    v70 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of PeripheralProtocol.cancelConnection()[1]);
    v71 = sub_10023E134;
    *(_QWORD *)(v0 + 2408) = v70;
    goto LABEL_20;
  }
  v2 = *(_QWORD *)(v0 + 1672);
  v3 = *(unsigned __int8 *)(v0 + 1688);
  if (v3 != 7)
  {
    sub_100243B24(*(_QWORD *)(v0 + 1672), *(_QWORD *)(v0 + 1680), v3);
    goto LABEL_7;
  }
  bufb = *(uint8_t **)(v0 + 2056);
  v4 = *(_QWORD *)(v0 + 1704);
  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 2048))(*(_QWORD *)(v0 + 1920), *(_QWORD *)(v0 + 2040), *(_QWORD *)(v0 + 1800));
  v5 = swift_allocObject(&unk_101061BB8, 32, 7);
  *(_QWORD *)(v5 + 16) = sub_100243954;
  *(_QWORD *)(v5 + 24) = v4;
  v6 = swift_allocObject(&unk_101061BE0, 17, 7);
  v84 = v2;
  *(_BYTE *)(v6 + 16) = v2;
  v7 = swift_retain();
  v93 = Logger.logObject.getter(v7);
  v8 = static os_log_type_t.default.getter(v93);
  v9 = swift_allocObject(&unk_101061C08, 17, 7);
  *(_BYTE *)(v9 + 16) = 34;
  v10 = swift_allocObject(&unk_101061C30, 17, 7);
  *(_BYTE *)(v10 + 16) = 8;
  v11 = swift_allocObject(&unk_101061C58, 32, 7);
  *(_QWORD *)(v11 + 16) = sub_100245488;
  *(_QWORD *)(v11 + 24) = v5;
  v12 = swift_allocObject(&unk_101061C80, 32, 7);
  *(_QWORD *)(v12 + 16) = sub_10005CBA4;
  *(_QWORD *)(v12 + 24) = v11;
  v13 = swift_allocObject(&unk_101061CA8, 17, 7);
  *(_BYTE *)(v13 + 16) = 0;
  v14 = swift_allocObject(&unk_101061CD0, 17, 7);
  *(_BYTE *)(v14 + 16) = 1;
  v15 = swift_allocObject(&unk_101061CF8, 32, 7);
  *(_QWORD *)(v15 + 16) = sub_100245498;
  *(_QWORD *)(v15 + 24) = v6;
  v16 = swift_allocObject(&unk_101061D20, 32, 7);
  *(_QWORD *)(v16 + 16) = sub_100245670;
  *(_QWORD *)(v16 + 24) = v15;
  v17 = swift_allocObject(bufb, 128, 7);
  sub_100882D28(v17, 6);
  *v18 = sub_10005CBC4;
  v18[1] = v9;
  v18[2] = sub_10005CBC4;
  v18[3] = v10;
  v18[4] = sub_10005CBB4;
  v18[5] = v12;
  v18[6] = sub_10005CBC4;
  v18[7] = v13;
  v18[8] = sub_10005CBC4;
  v18[9] = v14;
  v18[10] = sub_100245494;
  v18[11] = v16;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRelease();
  buf = v8;
  if (!os_log_type_enabled(v93, v8))
  {
    bufe = *(uint8_t **)(v0 + 2064);
    v72 = *(_QWORD *)(v0 + 1920);
    v73 = *(_QWORD *)(v0 + 1800);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();

    ((void (*)(uint64_t, uint64_t))bufe)(v72, v73);
    goto LABEL_17;
  }
  v80 = v14;
  v82 = v13;
  v19 = *(_QWORD *)(v0 + 2376);
  v20 = (uint8_t *)sub_1006948A0(15);
  v21 = swift_slowAlloc(32, -1);
  v96 = 0;
  v97 = v21;
  *(_WORD *)v20 = 514;
  v95 = v20 + 2;
  v98 = (uint64_t (*)(uint64_t *, uint64_t, uint64_t))sub_10005CBC4;
  v99 = v9;
  sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v98, (uint64_t)&v95, (uint64_t)&v96, (uint64_t)&v97);
  if (v19)
    return swift_errorRelease(v19);
  swift_release();
  v98 = (uint64_t (*)(uint64_t *, uint64_t, uint64_t))sub_10005CBC4;
  v99 = v10;
  sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v98, (uint64_t)&v95, (uint64_t)&v96, (uint64_t)&v97);
  swift_release();
  v98 = (uint64_t (*)(uint64_t *, uint64_t, uint64_t))sub_10005CBB4;
  v99 = v12;
  sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v98, (uint64_t)&v95, (uint64_t)&v96, (uint64_t)&v97);
  swift_release();
  v98 = (uint64_t (*)(uint64_t *, uint64_t, uint64_t))sub_10005CBC4;
  v99 = v82;
  sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v98, (uint64_t)&v95, (uint64_t)&v96, (uint64_t)&v97);
  swift_release();
  v98 = (uint64_t (*)(uint64_t *, uint64_t, uint64_t))sub_10005CBC4;
  v99 = v80;
  sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v98, (uint64_t)&v95, (uint64_t)&v96, (uint64_t)&v97);
  swift_release();
  v98 = sub_100245494;
  v99 = v16;
  sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v98, (uint64_t)&v95, (uint64_t)&v96, (uint64_t)&v97);
  v22 = v21;
  v23 = *(void (**)(uint64_t, uint64_t))(v0 + 2064);
  v24 = *(_QWORD *)(v0 + 1920);
  v25 = *(_QWORD *)(v0 + 1800);
  swift_release();
  _os_log_impl((void *)&_mh_execute_header, v93, buf, "%{public}s batteryLevel: %hhu", v20, 0xFu);
  swift_arrayDestroy(v22, 1, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v22, -1, -1);
  sub_100694894((uint64_t)v20);

  v23(v24, v25);
LABEL_17:
  v74 = v84;
  if ((v84 & 0xFC) != 0)
    v74 = 4;
  *(_BYTE *)(v0 + 1474) = v74;
  v70 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of PeripheralProtocol.cancelConnection()[1]);
  v71 = sub_10023D774;
  *(_QWORD *)(v0 + 2384) = v70;
LABEL_20:
  *v70 = v0;
  v70[1] = v71;
  return dispatch thunk of PeripheralProtocol.cancelConnection()(*(_QWORD *)(v0 + 2008), *(_QWORD *)(v0 + 2016));
}

uint64_t sub_10023D1EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  void (*v25)(uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  os_log_type_t v34;
  void (*v35)(uint64_t, uint64_t);
  NSObject *v36;
  uint8_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t (*v40)();
  uint64_t v41;

  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 1120));
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 352));
  v1 = *(_QWORD *)(v0 + 2376);
  *(_QWORD *)(v0 + 2400) = v1;
  v33 = *(_QWORD *)(v0 + 2056);
  v2 = *(_QWORD *)(v0 + 1704);
  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 2048))(*(_QWORD *)(v0 + 1912), *(_QWORD *)(v0 + 2040), *(_QWORD *)(v0 + 1800));
  v3 = swift_allocObject(&unk_1010616E0, 32, 7);
  *(_QWORD *)(v3 + 16) = sub_100243954;
  *(_QWORD *)(v3 + 24) = v2;
  v4 = swift_allocObject(&unk_101061708, 24, 7);
  *(_QWORD *)(v4 + 16) = v1;
  swift_retain();
  v5 = swift_errorRetain(v1);
  v36 = Logger.logObject.getter(v5);
  v6 = static os_log_type_t.error.getter(v36);
  v7 = swift_allocObject(&unk_101061730, 17, 7);
  *(_BYTE *)(v7 + 16) = 34;
  v8 = swift_allocObject(&unk_101061758, 17, 7);
  *(_BYTE *)(v8 + 16) = 8;
  v9 = swift_allocObject(&unk_101061780, 32, 7);
  *(_QWORD *)(v9 + 16) = sub_100245488;
  *(_QWORD *)(v9 + 24) = v3;
  LOBYTE(v3) = v6;
  v10 = swift_allocObject(&unk_1010617A8, 32, 7);
  *(_QWORD *)(v10 + 16) = sub_10005CBA4;
  *(_QWORD *)(v10 + 24) = v9;
  v11 = swift_allocObject(&unk_1010617D0, 17, 7);
  *(_BYTE *)(v11 + 16) = 66;
  v12 = swift_allocObject(&unk_1010617F8, 17, 7);
  *(_BYTE *)(v12 + 16) = 8;
  v13 = swift_allocObject(&unk_101061820, 32, 7);
  *(_QWORD *)(v13 + 16) = sub_1000594F4;
  *(_QWORD *)(v13 + 24) = v4;
  v14 = swift_allocObject(&unk_101061848, 32, 7);
  *(_QWORD *)(v14 + 16) = sub_10005CBB0;
  *(_QWORD *)(v14 + 24) = v13;
  v15 = swift_allocObject(&unk_101061870, 32, 7);
  *(_QWORD *)(v15 + 16) = sub_10005CBA4;
  *(_QWORD *)(v15 + 24) = v14;
  v16 = swift_allocObject(v33, 128, 7);
  sub_100882D28(v16, 6);
  *v17 = sub_10005CBC4;
  v17[1] = v7;
  v17[2] = sub_10005CBC4;
  v17[3] = v8;
  v17[4] = sub_10005CBB4;
  v17[5] = v10;
  v17[6] = sub_10005CBC4;
  v17[7] = v11;
  v17[8] = sub_10005CBC4;
  v17[9] = v12;
  v17[10] = sub_10005CBBC;
  v17[11] = v15;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRelease();
  v34 = v3;
  if (os_log_type_enabled(v36, (os_log_type_t)v3))
  {
    v31 = v12;
    v32 = v11;
    v18 = (uint8_t *)sub_1006948A0(22);
    v19 = swift_slowAlloc(8, -1);
    v20 = swift_slowAlloc(32, -1);
    v30 = v19;
    v38 = v19;
    v39 = v20;
    *(_WORD *)v18 = 514;
    v37 = v18 + 2;
    v40 = sub_10005CBC4;
    v41 = v7;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v40, (uint64_t)&v37, (uint64_t)&v38, (uint64_t)&v39);
    swift_release();
    v40 = sub_10005CBC4;
    v41 = v8;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v40, (uint64_t)&v37, (uint64_t)&v38, (uint64_t)&v39);
    swift_release();
    v40 = sub_10005CBB4;
    v41 = v10;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v40, (uint64_t)&v37, (uint64_t)&v38, (uint64_t)&v39);
    swift_release();
    v40 = sub_10005CBC4;
    v41 = v32;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v40, (uint64_t)&v37, (uint64_t)&v38, (uint64_t)&v39);
    swift_release();
    v40 = sub_10005CBC4;
    v41 = v31;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v40, (uint64_t)&v37, (uint64_t)&v38, (uint64_t)&v39);
    swift_release();
    v40 = sub_10005CBBC;
    v41 = v15;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v40, (uint64_t)&v37, (uint64_t)&v38, (uint64_t)&v39);
    v25 = *(void (**)(uint64_t, uint64_t))(v0 + 2064);
    v26 = *(_QWORD *)(v0 + 1912);
    v27 = v20;
    v28 = *(_QWORD *)(v0 + 1800);
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, v36, v34, "%{public}s Error reading BatteryLevel/BatteryType %{public}@", v18, 0x16u);
    v29 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v30, 1, v29);
    swift_slowDealloc(v30, -1, -1);
    swift_arrayDestroy(v27, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v27, -1, -1);
    sub_100694894((uint64_t)v18);

    v25(v26, v28);
  }
  else
  {
    v35 = *(void (**)(uint64_t, uint64_t))(v0 + 2064);
    v21 = *(_QWORD *)(v0 + 1912);
    v22 = *(_QWORD *)(v0 + 1800);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();

    v35(v21, v22);
  }
  v23 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of PeripheralProtocol.cancelConnection()[1]);
  *(_QWORD *)(v0 + 2408) = v23;
  *v23 = v0;
  v23[1] = sub_10023E134;
  return dispatch thunk of PeripheralProtocol.cancelConnection()(*(_QWORD *)(v0 + 2008), *(_QWORD *)(v0 + 2016));
}

uint64_t sub_10023D774()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 2384);
  *(_QWORD *)(*(_QWORD *)v1 + 2392) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_10023DBAC;
  else
    v3 = sub_10023D7D8;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_10023D7D8()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __int16 v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t v48;

  v45 = *(_WORD *)(v0 + 1473);
  v47 = *(_DWORD *)(v0 + 2344);
  v41 = *(unsigned int *)(v0 + 2304);
  v39 = *(unsigned int *)(v0 + 2280);
  v43 = *(_QWORD *)(v0 + 2256);
  v20 = *(_QWORD *)(v0 + 2224);
  v21 = *(_QWORD *)(v0 + 2232);
  v23 = *(_QWORD *)(v0 + 2200);
  v22 = *(_QWORD *)(v0 + 2192);
  v1 = *(_QWORD *)(v0 + 2168);
  v2 = *(_QWORD *)(v0 + 2160);
  v3 = *(_QWORD *)(v0 + 1744);
  v4 = *(_QWORD *)(v0 + 1736);
  v5 = *(_QWORD *)(v0 + 1728);
  v6 = *(_QWORD *)(v0 + 1720);
  v37 = *(_QWORD *)(v0 + 1696);
  dispatch thunk of PeripheralProtocol.id.getter(*(_QWORD *)(v0 + 2008), *(_QWORD *)(v0 + 2016));
  Identifier.id.getter(v5);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  v29 = sub_100132A1C();
  v8 = v7;
  sub_10001BBBC(v2, v1);
  swift_release();
  swift_release();
  sub_100243B24(v20, v21, 2);
  sub_100243B24(v22, v23, 1);
  sub_100243B24(v2, v1, 0);
  sub_100243B24(v2, v1, 0);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 544));
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 1120));
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 1360));
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 1168));
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 976));
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 784));
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 592));
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 400));
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 208));
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
  sub_100132A28(v6, v2, v1, v22, v23, v20, v21, v47, v37, v39, SBYTE4(v39), 0, 0, 1, v43, 0, v19, v41, SBYTE4(v41),
    SHIWORD(v41),
    v45,
    SHIBYTE(v45),
    v29,
    v8);
  v9 = *(_QWORD *)(v0 + 1992);
  v10 = *(_QWORD *)(v0 + 1984);
  v11 = *(_QWORD *)(v0 + 1976);
  v12 = *(_QWORD *)(v0 + 1968);
  v13 = *(_QWORD *)(v0 + 1960);
  v14 = *(_QWORD *)(v0 + 1952);
  v15 = *(_QWORD *)(v0 + 1944);
  v16 = *(_QWORD *)(v0 + 1936);
  v17 = *(_QWORD *)(v0 + 1928);
  v24 = *(_QWORD *)(v0 + 1920);
  v25 = *(_QWORD *)(v0 + 1912);
  v26 = *(_QWORD *)(v0 + 1904);
  v27 = *(_QWORD *)(v0 + 1896);
  v28 = *(_QWORD *)(v0 + 1888);
  v30 = *(_QWORD *)(v0 + 1880);
  v31 = *(_QWORD *)(v0 + 1872);
  v32 = *(_QWORD *)(v0 + 1864);
  v33 = *(_QWORD *)(v0 + 1856);
  v34 = *(_QWORD *)(v0 + 1848);
  v35 = *(_QWORD *)(v0 + 1840);
  v36 = *(_QWORD *)(v0 + 1832);
  v38 = *(_QWORD *)(v0 + 1824);
  v40 = *(_QWORD *)(v0 + 1816);
  v42 = *(_QWORD *)(v0 + 1792);
  v44 = *(_QWORD *)(v0 + 1768);
  v46 = *(_QWORD *)(v0 + 1744);
  v48 = *(_QWORD *)(v0 + 1720);
  swift_task_dealloc(*(_QWORD *)(v0 + 2000));
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v38);
  swift_task_dealloc(v40);
  swift_task_dealloc(v42);
  swift_task_dealloc(v44);
  swift_task_dealloc(v46);
  swift_task_dealloc(v48);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10023DBAC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  void (*v25)(uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  os_log_type_t v34;
  void (*v35)(uint64_t, uint64_t);
  NSObject *v36;
  uint8_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t (*v40)();
  uint64_t v41;

  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 544));
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 1120));
  v1 = *(_QWORD *)(v0 + 2392);
  *(_QWORD *)(v0 + 2400) = v1;
  v33 = *(_QWORD *)(v0 + 2056);
  v2 = *(_QWORD *)(v0 + 1704);
  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 2048))(*(_QWORD *)(v0 + 1912), *(_QWORD *)(v0 + 2040), *(_QWORD *)(v0 + 1800));
  v3 = swift_allocObject(&unk_1010616E0, 32, 7);
  *(_QWORD *)(v3 + 16) = sub_100243954;
  *(_QWORD *)(v3 + 24) = v2;
  v4 = swift_allocObject(&unk_101061708, 24, 7);
  *(_QWORD *)(v4 + 16) = v1;
  swift_retain();
  v5 = swift_errorRetain(v1);
  v36 = Logger.logObject.getter(v5);
  v6 = static os_log_type_t.error.getter(v36);
  v7 = swift_allocObject(&unk_101061730, 17, 7);
  *(_BYTE *)(v7 + 16) = 34;
  v8 = swift_allocObject(&unk_101061758, 17, 7);
  *(_BYTE *)(v8 + 16) = 8;
  v9 = swift_allocObject(&unk_101061780, 32, 7);
  *(_QWORD *)(v9 + 16) = sub_100245488;
  *(_QWORD *)(v9 + 24) = v3;
  LOBYTE(v3) = v6;
  v10 = swift_allocObject(&unk_1010617A8, 32, 7);
  *(_QWORD *)(v10 + 16) = sub_10005CBA4;
  *(_QWORD *)(v10 + 24) = v9;
  v11 = swift_allocObject(&unk_1010617D0, 17, 7);
  *(_BYTE *)(v11 + 16) = 66;
  v12 = swift_allocObject(&unk_1010617F8, 17, 7);
  *(_BYTE *)(v12 + 16) = 8;
  v13 = swift_allocObject(&unk_101061820, 32, 7);
  *(_QWORD *)(v13 + 16) = sub_1000594F4;
  *(_QWORD *)(v13 + 24) = v4;
  v14 = swift_allocObject(&unk_101061848, 32, 7);
  *(_QWORD *)(v14 + 16) = sub_10005CBB0;
  *(_QWORD *)(v14 + 24) = v13;
  v15 = swift_allocObject(&unk_101061870, 32, 7);
  *(_QWORD *)(v15 + 16) = sub_10005CBA4;
  *(_QWORD *)(v15 + 24) = v14;
  v16 = swift_allocObject(v33, 128, 7);
  sub_100882D28(v16, 6);
  *v17 = sub_10005CBC4;
  v17[1] = v7;
  v17[2] = sub_10005CBC4;
  v17[3] = v8;
  v17[4] = sub_10005CBB4;
  v17[5] = v10;
  v17[6] = sub_10005CBC4;
  v17[7] = v11;
  v17[8] = sub_10005CBC4;
  v17[9] = v12;
  v17[10] = sub_10005CBBC;
  v17[11] = v15;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRelease();
  v34 = v3;
  if (os_log_type_enabled(v36, (os_log_type_t)v3))
  {
    v31 = v12;
    v32 = v11;
    v18 = (uint8_t *)sub_1006948A0(22);
    v19 = swift_slowAlloc(8, -1);
    v20 = swift_slowAlloc(32, -1);
    v30 = v19;
    v38 = v19;
    v39 = v20;
    *(_WORD *)v18 = 514;
    v37 = v18 + 2;
    v40 = sub_10005CBC4;
    v41 = v7;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v40, (uint64_t)&v37, (uint64_t)&v38, (uint64_t)&v39);
    swift_release();
    v40 = sub_10005CBC4;
    v41 = v8;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v40, (uint64_t)&v37, (uint64_t)&v38, (uint64_t)&v39);
    swift_release();
    v40 = sub_10005CBB4;
    v41 = v10;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v40, (uint64_t)&v37, (uint64_t)&v38, (uint64_t)&v39);
    swift_release();
    v40 = sub_10005CBC4;
    v41 = v32;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v40, (uint64_t)&v37, (uint64_t)&v38, (uint64_t)&v39);
    swift_release();
    v40 = sub_10005CBC4;
    v41 = v31;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v40, (uint64_t)&v37, (uint64_t)&v38, (uint64_t)&v39);
    swift_release();
    v40 = sub_10005CBBC;
    v41 = v15;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v40, (uint64_t)&v37, (uint64_t)&v38, (uint64_t)&v39);
    v25 = *(void (**)(uint64_t, uint64_t))(v0 + 2064);
    v26 = *(_QWORD *)(v0 + 1912);
    v27 = v20;
    v28 = *(_QWORD *)(v0 + 1800);
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, v36, v34, "%{public}s Error reading BatteryLevel/BatteryType %{public}@", v18, 0x16u);
    v29 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v30, 1, v29);
    swift_slowDealloc(v30, -1, -1);
    swift_arrayDestroy(v27, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v27, -1, -1);
    sub_100694894((uint64_t)v18);

    v25(v26, v28);
  }
  else
  {
    v35 = *(void (**)(uint64_t, uint64_t))(v0 + 2064);
    v21 = *(_QWORD *)(v0 + 1912);
    v22 = *(_QWORD *)(v0 + 1800);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();

    v35(v21, v22);
  }
  v23 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of PeripheralProtocol.cancelConnection()[1]);
  *(_QWORD *)(v0 + 2408) = v23;
  *v23 = v0;
  v23[1] = sub_10023E134;
  return dispatch thunk of PeripheralProtocol.cancelConnection()(*(_QWORD *)(v0 + 2008), *(_QWORD *)(v0 + 2016));
}

uint64_t sub_10023E134()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 2408);
  *(_QWORD *)(*(_QWORD *)v1 + 2416) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = v2[279];
    v5 = v2[278];
    sub_100243B24(v2[274], v2[275], 1);
    sub_100243B24(v5, v4, 2);
    v6 = sub_10023E588;
  }
  else
  {
    v6 = sub_10023E1C8;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_10023E1C8()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t v48;

  v23 = *(_QWORD *)(v0 + 2400);
  v47 = *(_DWORD *)(v0 + 2344);
  v43 = *(unsigned int *)(v0 + 2304);
  v39 = *(unsigned int *)(v0 + 2280);
  v45 = *(_QWORD *)(v0 + 2256);
  v20 = *(_QWORD *)(v0 + 2224);
  v21 = *(_QWORD *)(v0 + 2232);
  v25 = *(_QWORD *)(v0 + 2192);
  v27 = *(_QWORD *)(v0 + 2200);
  v1 = *(_QWORD *)(v0 + 2168);
  v2 = *(_QWORD *)(v0 + 2160);
  v3 = *(_QWORD *)(v0 + 1744);
  v4 = *(_QWORD *)(v0 + 1736);
  v5 = *(_QWORD *)(v0 + 1728);
  v35 = *(_QWORD *)(v0 + 1720);
  v41 = *(_QWORD *)(v0 + 1696);
  dispatch thunk of PeripheralProtocol.id.getter(*(_QWORD *)(v0 + 2008), *(_QWORD *)(v0 + 2016));
  Identifier.id.getter(v5);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  v6 = sub_100132A1C();
  v8 = v7;
  sub_10001BBBC(v2, v1);
  swift_release();
  swift_release();
  swift_errorRelease(v23);
  sub_100243B24(v20, v21, 2);
  sub_100243B24(v25, v27, 1);
  sub_100243B24(v2, v1, 0);
  sub_100243B24(v2, v1, 0);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 1360));
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 1168));
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 976));
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 784));
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 592));
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 400));
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 208));
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
  sub_100132A28(v35, v2, v1, v25, v27, v20, v21, v47, v41, v39, SBYTE4(v39), 0, 0, 1, v45, 0, v19, v43, SBYTE4(v43),
    SHIWORD(v43),
    3,
    4,
    v6,
    v8);
  v9 = *(_QWORD *)(v0 + 1992);
  v10 = *(_QWORD *)(v0 + 1984);
  v11 = *(_QWORD *)(v0 + 1976);
  v12 = *(_QWORD *)(v0 + 1968);
  v13 = *(_QWORD *)(v0 + 1960);
  v14 = *(_QWORD *)(v0 + 1952);
  v15 = *(_QWORD *)(v0 + 1944);
  v16 = *(_QWORD *)(v0 + 1936);
  v17 = *(_QWORD *)(v0 + 1928);
  v22 = *(_QWORD *)(v0 + 1920);
  v24 = *(_QWORD *)(v0 + 1912);
  v26 = *(_QWORD *)(v0 + 1904);
  v28 = *(_QWORD *)(v0 + 1896);
  v29 = *(_QWORD *)(v0 + 1888);
  v30 = *(_QWORD *)(v0 + 1880);
  v31 = *(_QWORD *)(v0 + 1872);
  v32 = *(_QWORD *)(v0 + 1864);
  v33 = *(_QWORD *)(v0 + 1856);
  v34 = *(_QWORD *)(v0 + 1848);
  v36 = *(_QWORD *)(v0 + 1840);
  v37 = *(_QWORD *)(v0 + 1832);
  v38 = *(_QWORD *)(v0 + 1824);
  v40 = *(_QWORD *)(v0 + 1816);
  v42 = *(_QWORD *)(v0 + 1792);
  v44 = *(_QWORD *)(v0 + 1768);
  v46 = *(_QWORD *)(v0 + 1744);
  v48 = *(_QWORD *)(v0 + 1720);
  swift_task_dealloc(*(_QWORD *)(v0 + 2000));
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v22);
  swift_task_dealloc(v24);
  swift_task_dealloc(v26);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v40);
  swift_task_dealloc(v42);
  swift_task_dealloc(v44);
  swift_task_dealloc(v46);
  swift_task_dealloc(v48);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10023E588()
{
  _QWORD *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint8_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;
  NSObject *oslog;
  os_log_type_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint8_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t (*v57)();
  uint64_t v58;

  v1 = v0[300];
  v2 = v0[279];
  v3 = v0[278];
  v4 = v0[275];
  v5 = v0[274];
  v6 = v0[271];
  v7 = v0[270];
  swift_release();
  swift_release();
  swift_errorRelease(v1);
  sub_100243B24(v3, v2, 2);
  sub_100243B24(v5, v4, 1);
  sub_100243B24(v7, v6, 0);
  sub_100243B24(v7, v6, 0);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 170);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 146);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 122);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 98);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 74);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 50);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 26);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2);
  v8 = v0[302];
  v0[303] = v8;
  v9 = v0[238];
  v10 = v0[226];
  v11 = v0[225];
  v12 = v0[213];
  v13 = sub_10022450C();
  v0[304] = v13;
  v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16);
  v0[305] = v14;
  v14(v9, v13, v11);
  v15 = swift_allocObject(&unk_10105FF70, 32, 7);
  *(_QWORD *)(v15 + 16) = sub_100243954;
  *(_QWORD *)(v15 + 24) = v12;
  v52 = swift_allocObject(&unk_10105FF98, 24, 7);
  *(_QWORD *)(v52 + 16) = v8;
  swift_retain();
  v16 = swift_errorRetain(v8);
  oslog = Logger.logObject.getter(v16);
  v50 = static os_log_type_t.error.getter(oslog);
  v17 = swift_allocObject(&unk_10105FFC0, 17, 7);
  *(_BYTE *)(v17 + 16) = 34;
  v18 = swift_allocObject(&unk_10105FFE8, 17, 7);
  *(_BYTE *)(v18 + 16) = 8;
  v19 = swift_allocObject(&unk_101060010, 17, 7);
  *(_BYTE *)(v19 + 16) = 34;
  v20 = swift_allocObject(&unk_101060038, 17, 7);
  *(_BYTE *)(v20 + 16) = 8;
  v21 = swift_allocObject(&unk_101060060, 32, 7);
  *(_QWORD *)(v21 + 16) = sub_100243990;
  *(_QWORD *)(v21 + 24) = v15;
  v22 = swift_allocObject(&unk_101060088, 32, 7);
  *(_QWORD *)(v22 + 16) = sub_10001D850;
  *(_QWORD *)(v22 + 24) = v21;
  v23 = swift_allocObject(&unk_1010600B0, 17, 7);
  *(_BYTE *)(v23 + 16) = 66;
  v24 = swift_allocObject(&unk_1010600D8, 17, 7);
  *(_BYTE *)(v24 + 16) = 8;
  v25 = swift_allocObject(&unk_101060100, 32, 7);
  *(_QWORD *)(v25 + 16) = sub_100245648;
  *(_QWORD *)(v25 + 24) = v52;
  v26 = swift_allocObject(&unk_101060128, 32, 7);
  *(_QWORD *)(v26 + 16) = sub_10005859C;
  *(_QWORD *)(v26 + 24) = v25;
  v27 = swift_allocObject(&unk_101060150, 32, 7);
  *(_QWORD *)(v27 + 16) = sub_10001D850;
  *(_QWORD *)(v27 + 24) = v26;
  v28 = sub_10001A9A8(&qword_1010EC538);
  v0[306] = v28;
  v29 = swift_allocObject(v28, 176, 7);
  sub_100882D28(v29, 9);
  *v30 = sub_100057E50;
  v30[1] = v17;
  v30[2] = sub_10005CBC4;
  v30[3] = v18;
  v30[4] = sub_100243220;
  v30[5] = 0;
  v30[6] = sub_10005CBC4;
  v30[7] = v19;
  v30[8] = sub_10005CBC4;
  v30[9] = v20;
  v30[10] = sub_100057E68;
  v30[11] = v22;
  v30[12] = sub_10005CBC4;
  v30[13] = v23;
  v30[14] = sub_10005CBC4;
  v30[15] = v24;
  v30[16] = sub_1000585A4;
  v30[17] = v27;
  v53 = v17;
  swift_retain();
  swift_retain();
  v31 = v19;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRelease();
  if (os_log_type_enabled(oslog, v50))
  {
    v32 = v18;
    v33 = v31;
    v47 = v23;
    v48 = v22;
    v34 = (uint8_t *)sub_1006948A0(32);
    v35 = swift_slowAlloc(8, -1);
    v36 = swift_slowAlloc(64, -1);
    v55 = v35;
    v56 = v36;
    *(_WORD *)v34 = 770;
    v54 = v34 + 2;
    v57 = (uint64_t (*)())sub_100057E50;
    v58 = v53;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v57, (uint64_t)&v54, (uint64_t)&v55, (uint64_t)&v56);
    swift_release();
    v57 = sub_10005CBC4;
    v58 = v32;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v57, (uint64_t)&v54, (uint64_t)&v55, (uint64_t)&v56);
    swift_release();
    v57 = sub_100243220;
    v58 = 0;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v57, (uint64_t)&v54, (uint64_t)&v55, (uint64_t)&v56);
    v57 = sub_10005CBC4;
    v58 = v33;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v57, (uint64_t)&v54, (uint64_t)&v55, (uint64_t)&v56);
    swift_release();
    v57 = sub_10005CBC4;
    v58 = v20;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v57, (uint64_t)&v54, (uint64_t)&v55, (uint64_t)&v56);
    swift_release();
    v57 = (uint64_t (*)())sub_100057E68;
    v58 = v48;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v57, (uint64_t)&v54, (uint64_t)&v55, (uint64_t)&v56);
    swift_release();
    v57 = sub_10005CBC4;
    v58 = v47;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v57, (uint64_t)&v54, (uint64_t)&v55, (uint64_t)&v56);
    swift_release();
    v57 = sub_10005CBC4;
    v58 = v24;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v57, (uint64_t)&v54, (uint64_t)&v55, (uint64_t)&v56);
    swift_release();
    v57 = (uint64_t (*)())sub_1000585A4;
    v58 = v27;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v57, (uint64_t)&v54, (uint64_t)&v55, (uint64_t)&v56);
    v41 = v0[238];
    v42 = v0[226];
    v43 = v35;
    v44 = v0[225];
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, oslog, v50, "%{public}s %{public}s Error %{public}@", v34, 0x20u);
    v45 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v43, 1, v45);
    swift_slowDealloc(v43, -1, -1);
    swift_arrayDestroy(v36, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v36, -1, -1);
    sub_100694894((uint64_t)v34);

    v46 = *(void (**)(uint64_t, uint64_t))(v42 + 8);
    v46(v41, v44);
  }
  else
  {
    v51 = v0[238];
    v37 = v0[226];
    v38 = v0[225];
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();

    v46 = *(void (**)(uint64_t, uint64_t))(v37 + 8);
    v46(v51, v38);
  }
  v0[307] = v46;
  v39 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of PeripheralProtocol.cancelConnection()[1]);
  v0[308] = v39;
  *v39 = v0;
  v39[1] = sub_10023ED18;
  return dispatch thunk of PeripheralProtocol.cancelConnection()(v0[251], v0[252]);
}

uint64_t sub_10023ED18()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 2464);
  *(_QWORD *)(*(_QWORD *)v1 + 2472) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_10023EF48;
  else
    v3 = sub_10023ED7C;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_10023ED7C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v2 = *(_QWORD *)(v1 + 2000);
  v3 = *(_QWORD *)(v1 + 1992);
  v4 = *(_QWORD *)(v1 + 1984);
  v5 = *(_QWORD *)(v1 + 1976);
  v6 = *(_QWORD *)(v1 + 1968);
  v7 = *(_QWORD *)(v1 + 1960);
  v8 = *(_QWORD *)(v1 + 1952);
  v9 = *(_QWORD *)(v1 + 1944);
  v11 = *(_QWORD *)(v1 + 1936);
  v12 = *(_QWORD *)(v1 + 1928);
  v13 = *(_QWORD *)(v1 + 1920);
  v14 = *(_QWORD *)(v1 + 1912);
  v15 = *(_QWORD *)(v1 + 1904);
  v16 = *(_QWORD *)(v1 + 1896);
  v17 = *(_QWORD *)(v1 + 1888);
  v18 = *(_QWORD *)(v1 + 1880);
  v19 = *(_QWORD *)(v1 + 1872);
  v20 = *(_QWORD *)(v1 + 1864);
  v21 = *(_QWORD *)(v1 + 1856);
  v22 = *(_QWORD *)(v1 + 1848);
  v23 = *(_QWORD *)(v1 + 1840);
  v24 = *(_QWORD *)(v1 + 1832);
  v25 = *(_QWORD *)(v1 + 1824);
  v26 = *(_QWORD *)(v1 + 1816);
  v27 = *(_QWORD *)(v1 + 1792);
  v28 = *(_QWORD *)(v1 + 1768);
  v29 = *(_QWORD *)(v1 + 1744);
  v30 = *(_QWORD *)(v1 + 1720);
  swift_willThrow(a1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_10023EF48()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t (*v34)(uint64_t, uint64_t);
  uint64_t v35;
  uint8_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  os_log_type_t v62;
  uint64_t (*v63)(uint64_t, uint64_t);
  uint64_t v64;
  NSObject *v65;
  uint64_t v66;
  _WORD *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t (*v70)();
  uint64_t v71;

  v1 = *(_QWORD *)(v0 + 2472);
  v61 = *(_QWORD *)(v0 + 2448);
  v2 = *(_QWORD *)(v0 + 1704);
  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 2440))(*(_QWORD *)(v0 + 1896), *(_QWORD *)(v0 + 2432), *(_QWORD *)(v0 + 1800));
  v3 = swift_allocObject(&unk_101060178, 32, 7);
  *(_QWORD *)(v3 + 16) = sub_100243954;
  *(_QWORD *)(v3 + 24) = v2;
  v4 = swift_allocObject(&unk_1010601A0, 24, 7);
  *(_QWORD *)(v4 + 16) = v1;
  swift_retain();
  v5 = swift_errorRetain(v1);
  v65 = Logger.logObject.getter(v5);
  v6 = static os_log_type_t.error.getter(v65);
  v7 = swift_allocObject(&unk_1010601C8, 17, 7);
  *(_BYTE *)(v7 + 16) = 34;
  v8 = swift_allocObject(&unk_1010601F0, 17, 7);
  *(_BYTE *)(v8 + 16) = 8;
  v9 = swift_allocObject(&unk_101060218, 32, 7);
  *(_QWORD *)(v9 + 16) = sub_100245488;
  *(_QWORD *)(v9 + 24) = v3;
  LOBYTE(v3) = v6;
  v10 = swift_allocObject(&unk_101060240, 32, 7);
  *(_QWORD *)(v10 + 16) = sub_10005CBA4;
  *(_QWORD *)(v10 + 24) = v9;
  v11 = swift_allocObject(&unk_101060268, 17, 7);
  *(_BYTE *)(v11 + 16) = 66;
  v12 = swift_allocObject(&unk_101060290, 17, 7);
  *(_BYTE *)(v12 + 16) = 8;
  v13 = swift_allocObject(&unk_1010602B8, 32, 7);
  *(_QWORD *)(v13 + 16) = sub_100245648;
  *(_QWORD *)(v13 + 24) = v4;
  v14 = swift_allocObject(&unk_1010602E0, 32, 7);
  *(_QWORD *)(v14 + 16) = sub_10005CBB0;
  *(_QWORD *)(v14 + 24) = v13;
  v15 = swift_allocObject(&unk_101060308, 32, 7);
  *(_QWORD *)(v15 + 16) = sub_10005CBA4;
  *(_QWORD *)(v15 + 24) = v14;
  v16 = swift_allocObject(v61, 128, 7);
  sub_100882D28(v16, 6);
  *v17 = sub_10005CBC4;
  v17[1] = v7;
  v17[2] = sub_10005CBC4;
  v17[3] = v8;
  v17[4] = sub_10005CBB4;
  v17[5] = v10;
  v17[6] = sub_10005CBC4;
  v17[7] = v11;
  v17[8] = sub_10005CBC4;
  v17[9] = v12;
  v17[10] = sub_10005CBBC;
  v17[11] = v15;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRelease();
  v62 = v3;
  if (os_log_type_enabled(v65, (os_log_type_t)v3))
  {
    v57 = v12;
    v59 = v11;
    v18 = (uint8_t *)sub_1006948A0(22);
    v19 = swift_slowAlloc(8, -1);
    v20 = swift_slowAlloc(32, -1);
    v55 = v19;
    v68 = v19;
    v69 = v20;
    *(_WORD *)v18 = 514;
    v67 = v18 + 2;
    v70 = sub_10005CBC4;
    v71 = v7;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v70, (uint64_t)&v67, (uint64_t)&v68, (uint64_t)&v69);
    swift_release();
    v70 = sub_10005CBC4;
    v71 = v8;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v70, (uint64_t)&v67, (uint64_t)&v68, (uint64_t)&v69);
    swift_release();
    v70 = sub_10005CBB4;
    v71 = v10;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v70, (uint64_t)&v67, (uint64_t)&v68, (uint64_t)&v69);
    swift_release();
    v70 = sub_10005CBC4;
    v71 = v59;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v70, (uint64_t)&v67, (uint64_t)&v68, (uint64_t)&v69);
    swift_release();
    v70 = sub_10005CBC4;
    v71 = v57;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v70, (uint64_t)&v67, (uint64_t)&v68, (uint64_t)&v69);
    swift_release();
    v70 = sub_10005CBBC;
    v71 = v15;
    sub_1006948A8((uint64_t (**)(uint64_t, uint64_t, uint64_t))&v70, (uint64_t)&v67, (uint64_t)&v68, (uint64_t)&v69);
    v32 = v20;
    v33 = *(_QWORD *)(v0 + 2472);
    v34 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 2456);
    v35 = *(_QWORD *)(v0 + 1896);
    v36 = v18;
    v37 = *(_QWORD *)(v0 + 1800);
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, v65, v62, "%{public}s cancelConnection error in readPoshAccessoryMetadata() catch block: %{public}@", v36, 0x16u);
    v38 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v55, 1, v38);
    swift_slowDealloc(v55, -1, -1);
    swift_arrayDestroy(v32, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v32, -1, -1);
    sub_100694894((uint64_t)v36);

    swift_errorRelease(v33);
    v39 = v34(v35, v37);
  }
  else
  {
    v63 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 2456);
    v21 = *(_QWORD *)(v0 + 1896);
    v22 = *(_QWORD *)(v0 + 1800);
    swift_errorRelease(*(_QWORD *)(v0 + 2472));
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();

    v39 = v63(v21, v22);
  }
  v23 = *(_QWORD *)(v0 + 2000);
  v24 = *(_QWORD *)(v0 + 1992);
  v25 = *(_QWORD *)(v0 + 1984);
  v26 = *(_QWORD *)(v0 + 1976);
  v27 = *(_QWORD *)(v0 + 1968);
  v28 = *(_QWORD *)(v0 + 1960);
  v29 = *(_QWORD *)(v0 + 1952);
  v30 = *(_QWORD *)(v0 + 1944);
  v40 = *(_QWORD *)(v0 + 1936);
  v41 = *(_QWORD *)(v0 + 1928);
  v42 = *(_QWORD *)(v0 + 1920);
  v43 = *(_QWORD *)(v0 + 1912);
  v44 = *(_QWORD *)(v0 + 1904);
  v45 = *(_QWORD *)(v0 + 1896);
  v46 = *(_QWORD *)(v0 + 1888);
  v47 = *(_QWORD *)(v0 + 1880);
  v48 = *(_QWORD *)(v0 + 1872);
  v49 = *(_QWORD *)(v0 + 1864);
  v50 = *(_QWORD *)(v0 + 1856);
  v51 = *(_QWORD *)(v0 + 1848);
  v52 = *(_QWORD *)(v0 + 1840);
  v53 = *(_QWORD *)(v0 + 1832);
  v54 = *(_QWORD *)(v0 + 1824);
  v56 = *(_QWORD *)(v0 + 1816);
  v58 = *(_QWORD *)(v0 + 1792);
  v60 = *(_QWORD *)(v0 + 1768);
  v64 = *(_QWORD *)(v0 + 1744);
  v66 = *(_QWORD *)(v0 + 1720);
  swift_willThrow(v39);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v40);
  swift_task_dealloc(v41);
  swift_task_dealloc(v42);
  swift_task_dealloc(v43);
  swift_task_dealloc(v44);
  swift_task_dealloc(v45);
  swift_task_dealloc(v46);
  swift_task_dealloc(v47);
  swift_task_dealloc(v48);
  swift_task_dealloc(v49);
  swift_task_dealloc(v50);
  swift_task_dealloc(v51);
  swift_task_dealloc(v52);
  swift_task_dealloc(v53);
  swift_task_dealloc(v54);
  swift_task_dealloc(v56);
  swift_task_dealloc(v58);
  swift_task_dealloc(v60);
  swift_task_dealloc(v64);
  swift_task_dealloc(v66);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10023F628(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  *(_QWORD *)(v4 + 80) = a3;
  *(_QWORD *)(v4 + 88) = a4;
  *(_BYTE *)(v4 + 128) = a2;
  *(_QWORD *)(v4 + 72) = a1;
  v5 = type metadata accessor for MACAddress(0);
  *(_QWORD *)(v4 + 96) = v5;
  v6 = *(_QWORD *)(v5 - 8);
  *(_QWORD *)(v4 + 104) = v6;
  v7 = (*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v4 + 112) = swift_task_alloc(v7);
  *(_QWORD *)(v4 + 120) = swift_task_alloc(v7);
  return swift_task_switch(sub_10023F6A0, 0, 0);
}

uint64_t sub_10023F6A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  _BOOL4 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  _BOOL4 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  _BOOL4 v42;
  uint64_t v43;
  uint8_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  if ((*(_BYTE *)(v0 + 128) & 1) != 0)
  {
    v17 = *(_QWORD *)(v0 + 72);
    swift_errorRetain(v17);
    if (qword_1010E9AB8 != -1)
      swift_once(&qword_1010E9AB8, sub_10022447C);
    v19 = *(_QWORD *)(v0 + 104);
    v18 = *(_QWORD *)(v0 + 112);
    v20 = *(_QWORD *)(v0 + 96);
    v22 = *(_QWORD *)(v0 + 72);
    v21 = *(_QWORD *)(v0 + 80);
    v23 = type metadata accessor for Logger(0);
    sub_10001A9E8(v23, (uint64_t)qword_1010F3458);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 16))(v18, v21, v20);
    sub_1002437C4(v22, 1);
    v24 = swift_errorRetain(v17);
    v25 = Logger.logObject.getter(v24);
    v26 = static os_log_type_t.error.getter(v25);
    v27 = os_log_type_enabled(v25, v26);
    v29 = *(_QWORD *)(v0 + 104);
    v28 = *(_QWORD *)(v0 + 112);
    v30 = *(_QWORD *)(v0 + 96);
    v31 = *(_QWORD *)(v0 + 72);
    if (v27)
    {
      v48 = v17;
      v32 = swift_slowAlloc(32, -1);
      v49 = (uint64_t *)swift_slowAlloc(8, -1);
      v50 = swift_slowAlloc(64, -1);
      v52 = v50;
      *(_DWORD *)v32 = 136446722;
      *(_QWORD *)(v0 + 32) = sub_100016940(0xD000000000000026, 0x8000000100ECC060, &v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v32 + 4, v32 + 12);
      *(_WORD *)(v32 + 12) = 2082;
      v33 = sub_100006204((unint64_t *)&qword_1010FBAE0, (uint64_t (*)(uint64_t))&type metadata accessor for MACAddress, (uint64_t)&protocol conformance descriptor for MACAddress);
      v34 = dispatch thunk of CustomStringConvertible.description.getter(v30, v33);
      *(_QWORD *)(v0 + 40) = sub_100016940(v34, v35, &v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v32 + 14, v32 + 22);
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v28, v30);
      *(_WORD *)(v32 + 22) = 2114;
      swift_errorRetain(v48);
      v36 = _swift_stdlib_bridgeErrorToNSError(v48);
      *(_QWORD *)(v0 + 48) = v36;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56, v32 + 24, v32 + 32);
      *v49 = v36;
      sub_10010F948(v31, 1);
      sub_10010F948(v31, 1);
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "%{public}s failed for address %{public}s. Error %{public}@", (uint8_t *)v32, 0x20u);
      v37 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
      swift_arrayDestroy(v49, 1, v37);
      swift_slowDealloc(v49, -1, -1);
      swift_arrayDestroy(v50, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v50, -1, -1);
      swift_slowDealloc(v32, -1, -1);

      v17 = v48;
      v38 = static Task<>.isCancelled.getter();
      if ((v38 & 1) == 0)
      {
LABEL_10:
        *(_QWORD *)(v0 + 16) = v17;
        v39 = sub_10001A9A8(&qword_1010F3830);
        CheckedContinuation.resume(throwing:)(v0 + 16, v39);
        goto LABEL_16;
      }
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v28, v30);
      sub_10010F948(v31, 1);
      sub_10010F948(v31, 1);

      v38 = static Task<>.isCancelled.getter();
      if ((v38 & 1) == 0)
        goto LABEL_10;
    }
    v40 = Logger.logObject.getter(v38);
    v41 = static os_log_type_t.error.getter(v40);
    v42 = os_log_type_enabled(v40, v41);
    v43 = *(_QWORD *)(v0 + 72);
    if (v42)
    {
      v44 = (uint8_t *)swift_slowAlloc(12, -1);
      v45 = swift_slowAlloc(32, -1);
      v52 = v45;
      *(_DWORD *)v44 = 136446210;
      *(_QWORD *)(v0 + 24) = sub_100016940(0xD000000000000026, 0x8000000100ECC060, &v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v44 + 4, v44 + 12);
      _os_log_impl((void *)&_mh_execute_header, v40, v41, "%{public}s Not resuming continuation in cancelled task.", v44, 0xCu);
      swift_arrayDestroy(v45, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v45, -1, -1);
      swift_slowDealloc(v44, -1, -1);

      sub_10010F948(v43, 1);
    }
    else
    {
      sub_10010F948(*(_QWORD *)(v0 + 72), 1);

    }
    goto LABEL_16;
  }
  if (qword_1010E9AB8 != -1)
    swift_once(&qword_1010E9AB8, sub_10022447C);
  v1 = *(_QWORD *)(v0 + 120);
  v2 = *(_QWORD *)(v0 + 96);
  v3 = *(_QWORD *)(v0 + 104);
  v4 = *(_QWORD *)(v0 + 80);
  v5 = type metadata accessor for Logger(0);
  sub_10001A9E8(v5, (uint64_t)qword_1010F3458);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v1, v4, v2);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.default.getter(v7);
  v9 = os_log_type_enabled(v7, v8);
  v10 = *(_QWORD *)(v0 + 120);
  v11 = *(_QWORD *)(v0 + 96);
  v12 = *(_QWORD *)(v0 + 104);
  if (v9)
  {
    v13 = swift_slowAlloc(22, -1);
    v51 = swift_slowAlloc(64, -1);
    v52 = v51;
    *(_DWORD *)v13 = 136446466;
    *(_QWORD *)(v0 + 56) = sub_100016940(0xD000000000000026, 0x8000000100ECC060, &v52);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 64, v13 + 4, v13 + 12);
    *(_WORD *)(v13 + 12) = 2082;
    v14 = sub_100006204((unint64_t *)&qword_1010FBAE0, (uint64_t (*)(uint64_t))&type metadata accessor for MACAddress, (uint64_t)&protocol conformance descriptor for MACAddress);
    v15 = dispatch thunk of CustomStringConvertible.description.getter(v11, v14);
    *(_QWORD *)(v0 + 64) = sub_100016940(v15, v16, &v52);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72, v13 + 14, v13 + 22);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v10, v11);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "%{public}s succeeded for address %{public}s", (uint8_t *)v13, 0x16u);
    swift_arrayDestroy(v51, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v51, -1, -1);
    swift_slowDealloc(v13, -1, -1);

  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v12 + 8))(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 96));

  }
LABEL_16:
  v46 = *(_QWORD *)(v0 + 112);
  swift_task_dealloc(*(_QWORD *)(v0 + 120));
  swift_task_dealloc(v46);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10023FD28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)(v8 + 424) = a6;
  *(_QWORD *)(v8 + 432) = v7;
  *(_BYTE *)(v8 + 560) = a7;
  *(_QWORD *)(v8 + 408) = a4;
  *(_QWORD *)(v8 + 416) = a5;
  *(_QWORD *)(v8 + 392) = a2;
  *(_QWORD *)(v8 + 400) = a3;
  *(_QWORD *)(v8 + 384) = a1;
  v9 = type metadata accessor for BinaryDecoder(0);
  *(_QWORD *)(v8 + 440) = v9;
  v10 = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(v8 + 448) = v10;
  *(_QWORD *)(v8 + 456) = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for BinaryEncoder(0);
  *(_QWORD *)(v8 + 464) = v11;
  v12 = *(_QWORD *)(v11 - 8);
  *(_QWORD *)(v8 + 472) = v12;
  *(_QWORD *)(v8 + 480) = swift_task_alloc((*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10023FDC0, 0, 0);
}

uint64_t sub_10023FDC0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33[2];

  v2 = BinaryEncoder.init()(a1);
  BinaryDecoder.init()(v2);
  if (qword_1010E9AB8 != -1)
    swift_once(&qword_1010E9AB8, sub_10022447C);
  v3 = *(_QWORD *)(v1 + 400);
  v4 = type metadata accessor for Logger(0);
  *(_QWORD *)(v1 + 488) = sub_10001A9E8(v4, (uint64_t)qword_1010F3458);
  v5 = sub_100057DB8(v3, v1 + 16);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.default.getter(v6);
  if (os_log_type_enabled(v6, v7))
  {
    v8 = swift_slowAlloc(22, -1);
    v9 = swift_slowAlloc(64, -1);
    v33[0] = v9;
    *(_DWORD *)v8 = 136446466;
    *(_QWORD *)(v1 + 360) = sub_100016940(0xD00000000000003CLL, 0x8000000100ECC090, v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 360, v1 + 368, v8 + 4, v8 + 12);
    *(_WORD *)(v8 + 12) = 2080;
    sub_100057DB8(v1 + 16, v1 + 208);
    v10 = sub_10001A9A8(&qword_1010EC530);
    v11 = String.init<A>(describing:)(v1 + 208, v10);
    *(_QWORD *)(v1 + 376) = sub_100016940(v11, v12, v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 376, v1 + 384, v8 + 14, v8 + 22);
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v1 + 16));
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "%{public}s Sending command: %s", (uint8_t *)v8, 0x16u);
    swift_arrayDestroy(v9, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v1 + 16));
  }

  v13 = *(_QWORD **)(v1 + 400);
  v14 = v13[3];
  v15 = v13[5];
  v16 = sub_10001AA44(v13, v14);
  v17 = BinaryEncoder.encode<A>(_:)(v16, v14, v15);
  *(_QWORD *)(v1 + 496) = v17;
  *(_QWORD *)(v1 + 504) = v18;
  if ((*(_BYTE *)(v1 + 560) & 1) != 0)
  {
    v19 = type metadata accessor for Characteristic(0);
    v20 = sub_100006204(&qword_1010EC4C0, (uint64_t (*)(uint64_t))&type metadata accessor for Characteristic, (uint64_t)&protocol conformance descriptor for Characteristic);
    v21 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of CharacteristicProtocol.mtu.getter[1]);
    *(_QWORD *)(v1 + 512) = v21;
    *v21 = v1;
    v21[1] = sub_1002401C8;
    return dispatch thunk of CharacteristicProtocol.mtu.getter(v19, v20);
  }
  else
  {
    v23 = v17;
    v24 = v18;
    v25 = sub_10001A9A8(&qword_1010F4A30);
    v26 = swift_allocObject(v25, 48, 7);
    *(_OWORD *)(v26 + 16) = xmmword_100E22B00;
    *(_QWORD *)(v26 + 32) = v23;
    *(_QWORD *)(v26 + 40) = v24;
    sub_10001BBBC(v23, v24);
    v27 = *(_QWORD *)(v1 + 432);
    v28 = *(_BYTE *)(v1 + 560);
    v29 = *(_QWORD *)(v1 + 392);
    v30 = swift_allocObject(&unk_101061D48, 48, 7);
    *(_QWORD *)(v1 + 536) = v30;
    *(_BYTE *)(v30 + 16) = v28;
    *(_QWORD *)(v30 + 24) = v29;
    *(_QWORD *)(v30 + 32) = v26;
    *(_QWORD *)(v30 + 40) = v27;
    v31 = async function pointer to withTimeout<A>(_:block:)[1];
    swift_retain();
    v32 = (_QWORD *)swift_task_alloc(v31);
    *(_QWORD *)(v1 + 544) = v32;
    *v32 = v1;
    v32[1] = sub_100240398;
    return withTimeout<A>(_:block:)(v1 + 304, 0x8AC7230489E80000, 0, &unk_1010F38A0, v30, &type metadata for Data);
  }
}

uint64_t sub_1002401C8(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 512);
  *(_QWORD *)(*v2 + 520) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = sub_100240314;
  }
  else
  {
    *(_QWORD *)(v4 + 528) = a1;
    v6 = sub_10024023C;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_10024023C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v1 = fragment(data:mtu:)(*(_QWORD *)(v0 + 496), *(_QWORD *)(v0 + 504), *(_QWORD *)(v0 + 528));
  v2 = *(_QWORD *)(v0 + 432);
  v3 = *(_BYTE *)(v0 + 560);
  v4 = *(_QWORD *)(v0 + 392);
  v5 = swift_allocObject(&unk_101061D48, 48, 7);
  *(_QWORD *)(v0 + 536) = v5;
  *(_BYTE *)(v5 + 16) = v3;
  *(_QWORD *)(v5 + 24) = v4;
  *(_QWORD *)(v5 + 32) = v1;
  *(_QWORD *)(v5 + 40) = v2;
  v6 = async function pointer to withTimeout<A>(_:block:)[1];
  swift_retain();
  v7 = (_QWORD *)swift_task_alloc(v6);
  *(_QWORD *)(v0 + 544) = v7;
  *v7 = v0;
  v7[1] = sub_100240398;
  return withTimeout<A>(_:block:)(v0 + 304, 0x8AC7230489E80000, 0, &unk_1010F38A0, v5, &type metadata for Data);
}

uint64_t sub_100240314()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(v0 + 472);
  v1 = *(_QWORD *)(v0 + 480);
  v4 = *(_QWORD *)(v0 + 456);
  v3 = *(_QWORD *)(v0 + 464);
  v5 = *(_QWORD *)(v0 + 440);
  v6 = *(_QWORD *)(v0 + 448);
  sub_10001BC14(*(_QWORD *)(v0 + 496), *(_QWORD *)(v0 + 504));
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v7 = *(_QWORD *)(v0 + 456);
  swift_task_dealloc(*(_QWORD *)(v0 + 480));
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100240398()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 544);
  *(_QWORD *)(*(_QWORD *)v1 + 552) = v0;
  swift_task_dealloc(v2);
  swift_release();
  if (v0)
    v3 = sub_100240AB4;
  else
    v3 = sub_100240404;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_100240404()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t (*v27)(void);
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  BOOL v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52[2];

  v1 = *(_QWORD *)(v0 + 304);
  v51 = *(_QWORD *)(v0 + 312);
  v2 = sub_100057DB8(*(_QWORD *)(v0 + 400), v0 + 112);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.info.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = swift_slowAlloc(22, -1);
    v6 = swift_slowAlloc(64, -1);
    v52[0] = v6;
    *(_DWORD *)v5 = 136446466;
    *(_QWORD *)(v0 + 336) = sub_100016940(0xD00000000000003CLL, 0x8000000100ECC090, v52);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 336, v0 + 344, v5 + 4, v5 + 12);
    *(_WORD *)(v5 + 12) = 2080;
    sub_100057DB8(v0 + 112, v0 + 64);
    v7 = sub_10001A9A8(&qword_1010EC530);
    v8 = String.init<A>(describing:)(v0 + 64, v7);
    *(_QWORD *)(v0 + 352) = sub_100016940(v8, v9, v52);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 352, v0 + 360, v5 + 14, v5 + 22);
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 112));
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "%{public}s Sent command: %s", (uint8_t *)v5, 0x16u);
    swift_arrayDestroy(v6, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 112));
  }

  sub_10001BBBC(v1, v51);
  v10 = sub_10001BBBC(v1, v51);
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.default.getter(v11);
  if (os_log_type_enabled(v11, v12))
  {
    v13 = (_DWORD *)swift_slowAlloc(22, -1);
    v52[0] = swift_slowAlloc(32, -1);
    *v13 = 134218242;
    __asm { BR              X10 }
  }
  sub_10001BC14(v1, v51);
  sub_10001BC14(v1, v51);

  v14 = *(_QWORD *)(v0 + 552);
  v15 = *(_QWORD *)(v0 + 408);
  v16 = *(_QWORD *)(v0 + 384);
  v49 = *(_OWORD *)(v0 + 416);
  *(_QWORD *)(v16 + 24) = v15;
  *(_OWORD *)(v16 + 32) = v49;
  sub_100018F08((_QWORD *)v16);
  BinaryDecoder.decode<A>(_:from:)(v15, v1, v51, v15, v49);
  if (v14)
  {
    v18 = *(_QWORD *)(v0 + 496);
    v17 = *(_QWORD *)(v0 + 504);
    v19 = *(_QWORD *)(v0 + 472);
    v50 = *(_QWORD *)(v0 + 480);
    v21 = *(_QWORD *)(v0 + 456);
    v20 = *(_QWORD *)(v0 + 464);
    v23 = *(_QWORD *)(v0 + 440);
    v22 = *(_QWORD *)(v0 + 448);
    v24 = v1;
    v25 = *(_QWORD **)(v0 + 384);
    sub_10001BC14(v24, v51);
    sub_10001BC14(v18, v17);
    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v21, v23);
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v50, v20);
    sub_1000583A4(v25);
    v26 = *(_QWORD *)(v0 + 456);
    swift_task_dealloc(*(_QWORD *)(v0 + 480));
    swift_task_dealloc(v26);
    v27 = *(uint64_t (**)(void))(v0 + 8);
  }
  else
  {
    v28 = sub_100057DB8(*(_QWORD *)(v0 + 384), v0 + 160);
    v29 = Logger.logObject.getter(v28);
    v30 = static os_log_type_t.default.getter(v29);
    v31 = os_log_type_enabled(v29, v30);
    v32 = *(_QWORD *)(v0 + 504);
    v34 = *(_QWORD *)(v0 + 472);
    v33 = *(_QWORD *)(v0 + 480);
    v36 = *(_QWORD *)(v0 + 456);
    v35 = *(_QWORD *)(v0 + 464);
    v46 = *(_QWORD *)(v0 + 448);
    v47 = *(_QWORD *)(v0 + 496);
    v48 = *(_QWORD *)(v0 + 440);
    if (v31)
    {
      v45 = *(_QWORD *)(v0 + 472);
      v37 = swift_slowAlloc(22, -1);
      v44 = v32;
      v38 = swift_slowAlloc(64, -1);
      v52[0] = v38;
      *(_DWORD *)v37 = 136446466;
      *(_QWORD *)(v0 + 368) = sub_100016940(0xD00000000000003CLL, 0x8000000100ECC090, v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 368, v0 + 376, v37 + 4, v37 + 12);
      *(_WORD *)(v37 + 12) = 2080;
      sub_100057DB8(v0 + 160, v0 + 256);
      v39 = sub_10001A9A8(&qword_1010EC530);
      v40 = String.init<A>(describing:)(v0 + 256, v39);
      *(_QWORD *)(v0 + 344) = sub_100016940(v40, v41, v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 344, v0 + 352, v37 + 14, v37 + 22);
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 160));
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "%{public}s Received response: %s", (uint8_t *)v37, 0x16u);
      swift_arrayDestroy(v38, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v38, -1, -1);
      swift_slowDealloc(v37, -1, -1);

      sub_10001BC14(v1, v51);
      sub_10001BC14(v47, v44);
      (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v36, v48);
      (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v33, v35);
    }
    else
    {

      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 160));
      sub_10001BC14(v1, v51);
      sub_10001BC14(v47, v32);
      (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v36, v48);
      (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v33, v35);
    }
    v42 = *(_QWORD *)(v0 + 456);
    swift_task_dealloc(*(_QWORD *)(v0 + 480));
    swift_task_dealloc(v42);
    v27 = *(uint64_t (**)(void))(v0 + 8);
  }
  return v27();
}

uint64_t sub_100240AB4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(v0 + 472);
  v1 = *(_QWORD *)(v0 + 480);
  v4 = *(_QWORD *)(v0 + 456);
  v3 = *(_QWORD *)(v0 + 464);
  v5 = *(_QWORD *)(v0 + 440);
  v6 = *(_QWORD *)(v0 + 448);
  sub_10001BC14(*(_QWORD *)(v0 + 496), *(_QWORD *)(v0 + 504));
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v7 = *(_QWORD *)(v0 + 456);
  swift_task_dealloc(*(_QWORD *)(v0 + 480));
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100240B38()
{
  uint64_t v0;
  uint64_t v1;

  v0 = type metadata accessor for Peripheral(0);
  v1 = sub_100006204(&qword_1010EC4A0, (uint64_t (*)(uint64_t))&type metadata accessor for Peripheral, (uint64_t)&protocol conformance descriptor for Peripheral);
  return dispatch thunk of PeripheralProtocol.id.getter(v0, v1);
}

uint64_t sub_100240B98(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;

  v4[5] = a1;
  v7 = sub_10001A9A8(&qword_1010EC638);
  v4[6] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v4[7] = v8;
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v10 = swift_task_alloc(v9);
  v4[8] = v10;
  v11 = swift_task_alloc(v9);
  v4[9] = v11;
  if ((a2 & 1) != 0)
  {
    v12 = v11;
    v13 = type metadata accessor for Characteristic(0);
    v14 = sub_100006204(&qword_1010EC4C0, (uint64_t (*)(uint64_t))&type metadata accessor for Characteristic, (uint64_t)&protocol conformance descriptor for Characteristic);
    v15 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of CharacteristicProtocol.write(data:)[1]);
    v4[10] = v15;
    *v15 = v4;
    v15[1] = sub_100240CEC;
    v16 = v12;
    v17 = a4;
    v18 = v13;
  }
  else
  {
    v19 = type metadata accessor for Characteristic(0);
    v14 = sub_100006204(&qword_1010EC4C0, (uint64_t (*)(uint64_t))&type metadata accessor for Characteristic, (uint64_t)&protocol conformance descriptor for Characteristic);
    v20 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of CharacteristicProtocol.write(data:)[1]);
    v4[12] = v20;
    *v20 = v4;
    v20[1] = sub_100240DB0;
    v16 = v10;
    v17 = a4;
    v18 = v19;
  }
  return dispatch thunk of CharacteristicProtocol.write(data:)(v16, v17, v18, v14);
}

uint64_t sub_100240CEC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v5;
  uint64_t v6;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 80);
  v3 = *(_QWORD **)v1;
  v3[11] = v0;
  swift_task_dealloc(v2);
  if (v0)
    return swift_task_switch(sub_100240F0C, 0, 0);
  v5 = (_QWORD *)swift_task_alloc(async function pointer to AsyncSequence<>.reassemble()[1]);
  v3[14] = v5;
  v6 = sub_1000193A4((unint64_t *)&unk_101116020, &qword_1010EC638, (const char *)&protocol conformance descriptor for AsyncThrowingStream<A, B>);
  *v5 = v3;
  v5[1] = sub_100240E7C;
  return AsyncSequence<>.reassemble()(v3[6], v6);
}

uint64_t sub_100240DB0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v5;
  uint64_t v6;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 96);
  v3 = *(_QWORD **)v1;
  v3[13] = v0;
  swift_task_dealloc(v2);
  if (v0)
    return swift_task_switch(sub_100241044, 0, 0);
  v5 = (_QWORD *)swift_task_alloc(async function pointer to AsyncSequence.first()[1]);
  v3[18] = v5;
  v6 = sub_1000193A4((unint64_t *)&unk_101116020, &qword_1010EC638, (const char *)&protocol conformance descriptor for AsyncThrowingStream<A, B>);
  *v5 = v3;
  v5[1] = sub_100240FD0;
  return AsyncSequence.first()(v3 + 2, v3[6], v6);
}

uint64_t sub_100240E7C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)();

  v6 = *(_QWORD **)v3;
  v7 = *(_QWORD *)(*(_QWORD *)v3 + 112);
  *(_QWORD *)(*(_QWORD *)v3 + 120) = v2;
  swift_task_dealloc(v7);
  v8 = v6[9];
  v9 = v6[6];
  v10 = v6[7];
  if (v2)
  {
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v8, v9);
    v11 = sub_100240F94;
  }
  else
  {
    v6[16] = a2;
    v6[17] = a1;
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v8, v9);
    v11 = sub_100240F48;
  }
  return swift_task_switch(v11, 0, 0);
}

uint64_t sub_100240F0C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 64);
  swift_task_dealloc(*(_QWORD *)(v0 + 72));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100240F48()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 64);
  v1 = *(_QWORD *)(v0 + 72);
  *(int8x16_t *)*(_QWORD *)(v0 + 40) = vextq_s8(*(int8x16_t *)(v0 + 128), *(int8x16_t *)(v0 + 128), 8uLL);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100240F94()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 64);
  swift_task_dealloc(*(_QWORD *)(v0 + 72));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100240FD0()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 144);
  *(_QWORD *)(*(_QWORD *)v1 + 152) = v0;
  swift_task_dealloc(v3);
  (*(void (**)(_QWORD, _QWORD))(v2[7] + 8))(v2[8], v2[6]);
  if (v0)
    v4 = sub_10024129C;
  else
    v4 = sub_100241080;
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_100241044()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 64);
  swift_task_dealloc(*(_QWORD *)(v0 + 72));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100241080()
{
  _QWORD *v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(void);
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v18;

  v1 = v0[3];
  if (v1 >> 60 == 15)
  {
    if (qword_1010E9AB8 != -1)
      swift_once(&qword_1010E9AB8, sub_10022447C);
    v2 = type metadata accessor for Logger(0);
    v3 = sub_10001A9E8(v2, (uint64_t)qword_1010F3458);
    v4 = Logger.logObject.getter(v3);
    v5 = static os_log_type_t.default.getter(v4);
    if (os_log_type_enabled(v4, v5))
    {
      v6 = (uint8_t *)swift_slowAlloc(12, -1);
      v7 = swift_slowAlloc(32, -1);
      v18 = v7;
      *(_DWORD *)v6 = 136446210;
      v0[4] = sub_100016940(0xD00000000000003CLL, 0x8000000100ECC090, &v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 4, v0 + 5, v6 + 4, v6 + 12);
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "%{public}s Invalid response!", v6, 0xCu);
      swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v7, -1, -1);
      swift_slowDealloc(v6, -1, -1);
    }

    v8 = type metadata accessor for AccessoryMetadataManager.Error(0);
    v9 = sub_100006204(&qword_1010F37D8, type metadata accessor for AccessoryMetadataManager.Error, (uint64_t)&unk_100E2E588);
    swift_allocError(v8, v9, 0, 0);
    v11 = swift_storeEnumTagMultiPayload(v10, v8, 8);
    swift_willThrow(v11);
    v12 = v0[8];
    swift_task_dealloc(v0[9]);
    swift_task_dealloc(v12);
    v13 = (uint64_t (*)(void))v0[1];
  }
  else
  {
    v15 = v0[8];
    v14 = v0[9];
    v16 = (_QWORD *)v0[5];
    *v16 = v0[2];
    v16[1] = v1;
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    v13 = (uint64_t (*)(void))v0[1];
  }
  return v13();
}

uint64_t sub_10024129C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 64);
  swift_task_dealloc(*(_QWORD *)(v0 + 72));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1002412D8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(uint64_t, char *, uint64_t);
  char *v46;
  uint64_t v47;
  void (*v48)(char *, uint64_t, uint64_t);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v50 = sub_10001A9A8(&qword_1010F37E0);
  v6 = *(_QWORD *)(v50 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  __chkstk_darwin(v50);
  v8 = sub_10001A9A8((uint64_t *)&unk_1010FBA20);
  __chkstk_darwin(v8);
  v10 = (char *)&v48 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for AccessoryInfoEndPoint(0);
  v12 = __chkstk_darwin(v11);
  v14 = (char *)&v48 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v16 = (char *)&v48 - v15;
  v17 = type metadata accessor for AccessoryMetadata(0);
  if (sub_100A087AC(*(_QWORD *)(a2 + *(int *)(v17 + 20)), *(_QWORD *)(a2 + *(int *)(v17 + 20) + 8)))
  {
    if (qword_1010E9AA8 != -1)
      swift_once(&qword_1010E9AA8, sub_100217BB8);
    v18 = type metadata accessor for Logger(0);
    v19 = sub_10001A9E8(v18, (uint64_t)qword_1011B6C30);
    v20 = Logger.logObject.getter(v19);
    v21 = static os_log_type_t.default.getter(v20);
    if (os_log_type_enabled(v20, v21))
    {
      v22 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v22 = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "Skip fetching product info for AirTag", v22, 2u);
      swift_slowDealloc(v22, -1, -1);
    }

    v23 = type metadata accessor for AccessoryMetadataManager.Error(0);
    v24 = sub_100006204(&qword_1010F37D8, type metadata accessor for AccessoryMetadataManager.Error, (uint64_t)&unk_100E2E588);
    v25 = swift_allocError(v23, v24, 0, 0);
    swift_storeEnumTagMultiPayload(v26, v23, 9);
    v51 = v25;
    return CheckedContinuation.resume(throwing:)(&v51, v50);
  }
  else
  {
    v28 = enum case for FMNAccountType.accessory(_:);
    v29 = type metadata accessor for FMNAccountType(0);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 104))(v16, v28, v29);
    v30 = type metadata accessor for SearchPartyURLSessionFactory(0);
    swift_allocObject(v30, *(unsigned int *)(v30 + 48), *(unsigned __int16 *)(v30 + 52));
    v31 = type metadata accessor for FMNMockingPreferences(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(v10, 1, 1, v31);
    v32 = FMNURLSessionFactory.init(mockSessionCreationBlock:preferences:)(0, 0, v10);
    v33 = type metadata accessor for ServerInteractionController(0);
    v34 = swift_allocObject(v33, *(unsigned int *)(v33 + 48), *(unsigned __int16 *)(v33 + 52));
    sub_10005972C((uint64_t)v16, (uint64_t)v14, type metadata accessor for AccessoryInfoEndPoint);
    v35 = (_QWORD *)sub_10041D768((uint64_t)v14, v32, v34);
    sub_1000126B0((uint64_t)v16, type metadata accessor for AccessoryInfoEndPoint);
    v36 = *a3;
    v37 = a3[1];
    v38 = a3[2];
    swift_bridgeObjectRetain(v36);
    sub_10001BBBC(v37, v38);
    sub_10034BB10(v36, v37, v38, 0, v35);
    swift_bridgeObjectRelease();
    sub_10001BC14(v37, v38);
    v48 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
    v49 = a1;
    v39 = v50;
    v48((char *)&v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v50);
    v40 = *(unsigned __int8 *)(v6 + 80);
    v41 = (v40 + 24) & ~v40;
    v42 = v41 + v7;
    v43 = v40 | 7;
    v44 = swift_allocObject(&unk_10105FDB8, v41 + v7, v40 | 7);
    *(_QWORD *)(v44 + 16) = v35;
    v45 = *(void (**)(uint64_t, char *, uint64_t))(v6 + 32);
    v46 = (char *)&v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
    v45(v44 + v41, v46, v39);
    swift_retain();
    Future.addFailure(block:)(sub_1002432A8, v44);
    swift_release();
    swift_release();
    v48(v46, v49, v39);
    v47 = swift_allocObject(&unk_10105FDE0, v42, v43);
    *(_QWORD *)(v47 + 16) = v35;
    v45(v47 + v41, v46, v39);
    swift_retain();
    Future.addSuccess(block:)(sub_1002432F0, v47);
    swift_release();
    swift_release();
    swift_release();
    return swift_release();
  }
}

uint64_t sub_100241740(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  void *v17;
  void *v18;
  id v19;
  unsigned int v20;
  NSString v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v43 = a3;
  v4 = type metadata accessor for AccessoryInfoResponseContent(0);
  __chkstk_darwin(v4);
  v6 = (char *)&v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_10001A9A8((uint64_t *)&unk_10111C0A0);
  v8 = __chkstk_darwin(v7);
  v10 = (char *)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v43 - v11;
  v13 = type metadata accessor for AccessoryProductInfo(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v43 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1010EA198 != -1)
    swift_once(&qword_1010EA198, sub_100ACDE4C);
  v17 = (void *)qword_1011B7C08;
  v18 = (void *)objc_opt_self(FMSystemInfo);
  v19 = objc_msgSend(v18, "sharedInstance", v43);
  v20 = objc_msgSend(v19, "isInternalBuild");

  if (!v20
    || (v21 = String._bridgeToObjectiveC()(),
        v22 = objc_msgSend(v17, "BOOLForKey:", v21),
        v21,
        !v22))
  {
    if (qword_1010E9AA8 != -1)
      swift_once(&qword_1010E9AA8, sub_100217BB8);
    v28 = type metadata accessor for Logger(0);
    sub_10001A9E8(v28, (uint64_t)qword_1011B6C30);
    swift_errorRetain(a1);
    v29 = swift_errorRetain(a1);
    v30 = Logger.logObject.getter(v29);
    v31 = static os_log_type_t.error.getter(v30);
    if (os_log_type_enabled(v30, v31))
    {
      v32 = (uint8_t *)swift_slowAlloc(12, -1);
      v33 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v32 = 138543362;
      swift_errorRetain(a1);
      v34 = _swift_stdlib_bridgeErrorToNSError(a1);
      v44 = v34;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, &v45, v32 + 4, v32 + 12);
      *v33 = v34;
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "Error in product info request. Error: %{public}@", v32, 0xCu);
      v35 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
      swift_arrayDestroy(v33, 1, v35);
      swift_slowDealloc(v33, -1, -1);
      swift_slowDealloc(v32, -1, -1);
    }
    else
    {
      swift_errorRelease(a1);
      swift_errorRelease(a1);
    }

    goto LABEL_17;
  }
  if (qword_1010E9AA8 != -1)
    swift_once(&qword_1010E9AA8, sub_100217BB8);
  v23 = type metadata accessor for Logger(0);
  v24 = sub_10001A9E8(v23, (uint64_t)qword_1011B6C30);
  v25 = Logger.logObject.getter(v24);
  v26 = static os_log_type_t.default.getter(v25);
  if (os_log_type_enabled(v25, v26))
  {
    v27 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v27 = 0;
    _os_log_impl((void *)&_mh_execute_header, v25, v26, "AccessoryHardcodedPairingEnabled: bypassing product info check failure", v27, 2u);
    swift_slowDealloc(v27, -1, -1);
  }

  sub_1004F705C((uint64_t)v6);
  sub_100D1536C((uint64_t)v6, (uint64_t)v12);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
  {
    sub_100004048((uint64_t)v12, (uint64_t *)&unk_10111C0A0);
LABEL_17:
    v36 = type metadata accessor for AccessoryMetadataManager.Error(0);
    v37 = sub_100006204(&qword_1010F37D8, type metadata accessor for AccessoryMetadataManager.Error, (uint64_t)&unk_100E2E588);
    v38 = swift_allocError(v36, v37, 0, 0);
    *v39 = a1;
    swift_storeEnumTagMultiPayload(v39, v36, 0);
    v44 = v38;
    swift_errorRetain(a1);
    v40 = sub_10001A9A8(&qword_1010F37E0);
    return CheckedContinuation.resume(throwing:)(&v44, v40);
  }
  sub_1000126EC((uint64_t)v12, (uint64_t)v16, type metadata accessor for AccessoryProductInfo);
  sub_10005972C((uint64_t)v16, (uint64_t)v10, type metadata accessor for AccessoryProductInfo);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v10, 0, 1, v13);
  v42 = sub_10001A9A8(&qword_1010F37E0);
  CheckedContinuation.resume(returning:)(v10, v42);
  return sub_1000126B0((uint64_t)v16, type metadata accessor for AccessoryProductInfo);
}

uint64_t sub_100241C30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  NSObject *v55;
  os_log_type_t v56;
  uint8_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  id v63;
  unsigned int v64;
  NSString v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t v68;
  NSObject *v69;
  os_log_type_t v70;
  uint8_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  NSObject *v77;
  os_log_type_t v78;
  uint8_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  NSObject *v94;
  os_log_type_t v95;
  uint64_t v96;
  uint64_t v97;
  uint8_t *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  NSObject *v114;
  os_log_type_t v115;
  _BOOL4 v116;
  uint8_t *v117;
  uint64_t v118;
  Swift::String v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  void *v123;
  id v124;
  unsigned int v125;
  NSString v126;
  unsigned int v127;
  uint64_t v128;
  NSObject *v129;
  os_log_type_t v130;
  uint8_t *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  _QWORD *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  unsigned int (*v150)(uint64_t, uint64_t, uint64_t);
  uint64_t v151;
  unint64_t v152;
  unint64_t v153;
  uint64_t v154;
  void (*v155)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  char *v168;
  uint64_t v169;
  uint64_t v170;
  char *v171;
  uint64_t v172;
  uint64_t v173;
  char *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  char *v184;
  uint64_t v185;
  uint64_t v186;
  unint64_t v187;
  uint64_t v188;
  uint64_t v189;

  v172 = type metadata accessor for AccessoryInfoResponseContent(0);
  v175 = *(_QWORD *)(v172 - 8);
  v5 = __chkstk_darwin(v172);
  v185 = (uint64_t)&v165 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v184 = (char *)&v165 - v7;
  v8 = sub_10001A9A8((uint64_t *)&unk_10111C0A0);
  v9 = __chkstk_darwin(v8);
  v174 = (char *)&v165 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v165 - v12;
  v14 = __chkstk_darwin(v11);
  v169 = (uint64_t)&v165 - v15;
  v16 = __chkstk_darwin(v14);
  v177 = (uint64_t)&v165 - v17;
  v18 = __chkstk_darwin(v16);
  v183 = (uint64_t)&v165 - v19;
  __chkstk_darwin(v18);
  v176 = (uint64_t)&v165 - v20;
  v21 = type metadata accessor for AccessoryProductInfo(0);
  v181 = *(_QWORD *)(v21 - 8);
  v22 = __chkstk_darwin(v21);
  v171 = (char *)&v165 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = __chkstk_darwin(v22);
  v26 = (char *)&v165 - v25;
  v27 = __chkstk_darwin(v24);
  v168 = (char *)&v165 - v28;
  v29 = __chkstk_darwin(v27);
  v182 = (uint64_t)&v165 - v30;
  v31 = __chkstk_darwin(v29);
  v180 = (uint64_t)&v165 - v32;
  __chkstk_darwin(v31);
  v173 = (uint64_t)&v165 - v33;
  v34 = type metadata accessor for FMNServerInteractionController.FMNResponseFields(0);
  v178 = *(_QWORD *)(v34 - 8);
  v35 = __chkstk_darwin(v34);
  v37 = (char *)&v165 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v35);
  v39 = (char *)&v165 - v38;
  v40 = type metadata accessor for String.Encoding(0);
  v41 = __chkstk_darwin(v40);
  v43 = (char *)&v165 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (FMNServerInteractionController.FMNResponseFields.statusCode.getter(v41) != 200)
  {
    v61 = v21;
    if (qword_1010EA198 != -1)
      swift_once(&qword_1010EA198, sub_100ACDE4C);
    v62 = (void *)qword_1011B7C08;
    v63 = objc_msgSend((id)objc_opt_self(FMSystemInfo), "sharedInstance");
    v64 = objc_msgSend(v63, "isInternalBuild");

    if (v64
      && (v65 = String._bridgeToObjectiveC()(),
          v66 = objc_msgSend(v62, "BOOLForKey:", v65),
          v65,
          v66))
    {
      if (qword_1010E9AA8 != -1)
        swift_once(&qword_1010E9AA8, sub_100217BB8);
      v67 = type metadata accessor for Logger(0);
      v68 = sub_10001A9E8(v67, (uint64_t)qword_1011B6C30);
      v69 = Logger.logObject.getter(v68);
      v70 = static os_log_type_t.default.getter(v69);
      if (os_log_type_enabled(v69, v70))
      {
        v71 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v71 = 0;
        _os_log_impl((void *)&_mh_execute_header, v69, v70, "AccessoryHardcodedPairingEnabled: bypassing product info check failure", v71, 2u);
        swift_slowDealloc(v71, -1, -1);
      }

      v72 = v185;
      sub_1004F705C(v185);
      sub_100D1536C(v72, (uint64_t)v13);
      v73 = v181;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v181 + 48))(v13, 1, v61) != 1)
      {
        sub_1000126EC((uint64_t)v13, (uint64_t)v26, type metadata accessor for AccessoryProductInfo);
        v140 = v177;
        sub_10005972C((uint64_t)v26, v177, type metadata accessor for AccessoryProductInfo);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v73 + 56))(v140, 0, 1, v61);
        v141 = sub_10001A9A8(&qword_1010F37E0);
        CheckedContinuation.resume(returning:)(v140, v141);
        goto LABEL_43;
      }
      sub_100004048((uint64_t)v13, (uint64_t *)&unk_10111C0A0);
    }
    else
    {
      if (qword_1010E9AA8 != -1)
        swift_once(&qword_1010E9AA8, sub_100217BB8);
      v74 = type metadata accessor for Logger(0);
      sub_10001A9E8(v74, (uint64_t)qword_1011B6C30);
      v75 = v178;
      v76 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v178 + 16))(v37, a1, v34);
      v77 = Logger.logObject.getter(v76);
      v78 = static os_log_type_t.error.getter(v77);
      if (os_log_type_enabled(v77, v78))
      {
        v79 = (uint8_t *)swift_slowAlloc(12, -1);
        v80 = swift_slowAlloc(32, -1);
        v186 = v80;
        *(_DWORD *)v79 = 136315138;
        v81 = sub_100006204((unint64_t *)&qword_1010FBA30, (uint64_t (*)(uint64_t))&type metadata accessor for FMNServerInteractionController.FMNResponseFields, (uint64_t)&protocol conformance descriptor for FMNServerInteractionController.FMNResponseFields);
        v82 = dispatch thunk of CustomStringConvertible.description.getter(v34, v81);
        v188 = sub_100016940(v82, v83, &v186);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v188, &v189, v79 + 4, v79 + 12);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v178 + 8))(v37, v34);
        _os_log_impl((void *)&_mh_execute_header, v77, v78, "Product info check failed: %s", v79, 0xCu);
        swift_arrayDestroy(v80, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v80, -1, -1);
        swift_slowDealloc(v79, -1, -1);
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v75 + 8))(v37, v34);
      }

    }
    v84 = type metadata accessor for AccessoryMetadataManager.Error(0);
    v85 = sub_100006204(&qword_1010F37D8, type metadata accessor for AccessoryMetadataManager.Error, (uint64_t)&unk_100E2E588);
    v86 = swift_allocError(v84, v85, 0, 0);
    swift_storeEnumTagMultiPayload(v87, v84, 7);
    v186 = v86;
    v88 = sub_10001A9A8(&qword_1010F37E0);
    return CheckedContinuation.resume(throwing:)(&v186, v88);
  }
  v44 = FMNServerInteractionController.FMNResponseFields.data.getter();
  v46 = v45;
  static String.Encoding.utf8.getter(v44);
  v167 = String.init(data:encoding:)(v44, v46, v43);
  v48 = v47;
  sub_10001BC14(v44, v46);
  v179 = v21;
  v49 = a1;
  v50 = a3;
  v51 = v177;
  v52 = v34;
  v170 = v50;
  if (v48)
  {
    if (qword_1010E9AA8 != -1)
      swift_once(&qword_1010E9AA8, sub_100217BB8);
    v53 = type metadata accessor for Logger(0);
    sub_10001A9E8(v53, (uint64_t)qword_1011B6C30);
    swift_bridgeObjectRetain(v48);
    v55 = Logger.logObject.getter(v54);
    v56 = static os_log_type_t.info.getter(v55);
    if (os_log_type_enabled(v55, v56))
    {
      v57 = (uint8_t *)swift_slowAlloc(12, -1);
      v58 = swift_slowAlloc(32, -1);
      v166 = v49;
      v59 = v58;
      v186 = v58;
      *(_DWORD *)v57 = 136315138;
      swift_bridgeObjectRetain(v48);
      v188 = sub_100016940(v167, v48, &v186);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v188, &v189, v57 + 4, v57 + 12);
      swift_bridgeObjectRelease_n(v48, 3);
      _os_log_impl((void *)&_mh_execute_header, v55, v56, "response data: %s", v57, 0xCu);
      swift_arrayDestroy(v59, 1, (char *)&type metadata for Any + 8);
      v60 = v59;
      v52 = v34;
      v49 = v166;
      swift_slowDealloc(v60, -1, -1);
      swift_slowDealloc(v57, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v48, 2);
    }
  }
  if (qword_1010E9AA8 != -1)
    swift_once(&qword_1010E9AA8, sub_100217BB8);
  v90 = type metadata accessor for Logger(0);
  v91 = sub_10001A9E8(v90, (uint64_t)qword_1011B6C30);
  v92 = v178;
  v93 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v178 + 16))(v39, v49, v52);
  v167 = v91;
  v94 = Logger.logObject.getter(v93);
  v95 = static os_log_type_t.info.getter(v94);
  if (os_log_type_enabled(v94, v95))
  {
    v96 = swift_slowAlloc(12, -1);
    v166 = v49;
    v97 = v52;
    v98 = (uint8_t *)v96;
    v99 = swift_slowAlloc(32, -1);
    v186 = v99;
    *(_DWORD *)v98 = 136446210;
    v100 = sub_100006204((unint64_t *)&qword_1010FBA30, (uint64_t (*)(uint64_t))&type metadata accessor for FMNServerInteractionController.FMNResponseFields, (uint64_t)&protocol conformance descriptor for FMNServerInteractionController.FMNResponseFields);
    v101 = dispatch thunk of CustomStringConvertible.description.getter(v97, v100);
    v188 = sub_100016940(v101, v102, &v186);
    v51 = v177;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v188, &v189, v98 + 4, v98 + 12);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v92 + 8))(v39, v97);
    _os_log_impl((void *)&_mh_execute_header, v94, v95, "response: %{public}s", v98, 0xCu);
    swift_arrayDestroy(v99, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v99, -1, -1);
    swift_slowDealloc(v98, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v92 + 8))(v39, v52);
  }

  v103 = type metadata accessor for JSONDecoder(0);
  v104 = swift_allocObject(v103, *(unsigned int *)(v103 + 48), *(unsigned __int16 *)(v103 + 52));
  v105 = JSONDecoder.init()(v104);
  v106 = FMNServerInteractionController.FMNResponseFields.data.getter();
  v108 = v107;
  v109 = sub_100243334();
  dispatch thunk of JSONDecoder.decode<A>(_:from:)(&type metadata for AccessoryInfoResponse, v106, v108, &type metadata for AccessoryInfoResponse, v109);
  sub_10001BC14(v106, v108);
  v110 = v186;
  v111 = *(_QWORD *)(v186 + 16);
  v112 = v179;
  if (!v111)
  {
    swift_bridgeObjectRelease();
    v122 = v181;
    if (qword_1010EA198 != -1)
      swift_once(&qword_1010EA198, sub_100ACDE4C);
    v123 = (void *)qword_1011B7C08;
    v124 = objc_msgSend((id)objc_opt_self(FMSystemInfo), "sharedInstance");
    v125 = objc_msgSend(v124, "isInternalBuild");

    if (!v125)
      goto LABEL_41;
    v126 = String._bridgeToObjectiveC()();
    v127 = objc_msgSend(v123, "BOOLForKey:", v126);

    if (!v127)
      goto LABEL_41;
    v129 = Logger.logObject.getter(v128);
    v130 = static os_log_type_t.default.getter(v129);
    if (os_log_type_enabled(v129, v130))
    {
      v131 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v131 = 0;
      _os_log_impl((void *)&_mh_execute_header, v129, v130, "AccessoryHardcodedPairingEnabled: bypassing product info check failure", v131, 2u);
      swift_slowDealloc(v131, -1, -1);
    }

    v132 = v185;
    sub_1004F705C(v185);
    v133 = v169;
    sub_100D1536C(v132, v169);
    v134 = v179;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v122 + 48))(v133, 1, v179) == 1)
    {
      sub_100004048(v133, (uint64_t *)&unk_10111C0A0);
LABEL_41:
      v135 = type metadata accessor for AccessoryMetadataManager.Error(0);
      v136 = sub_100006204(&qword_1010F37D8, type metadata accessor for AccessoryMetadataManager.Error, (uint64_t)&unk_100E2E588);
      v137 = swift_allocError(v135, v136, 0, 0);
      swift_storeEnumTagMultiPayload(v138, v135, 7);
      v186 = v137;
      v139 = sub_10001A9A8(&qword_1010F37E0);
      CheckedContinuation.resume(throwing:)(&v186, v139);
      return swift_release();
    }
    v26 = v168;
    sub_1000126EC(v133, (uint64_t)v168, type metadata accessor for AccessoryProductInfo);
    sub_10005972C((uint64_t)v26, v51, type metadata accessor for AccessoryProductInfo);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v122 + 56))(v51, 0, 1, v134);
    v164 = sub_10001A9A8(&qword_1010F37E0);
    CheckedContinuation.resume(returning:)(v51, v164);
    swift_release();
LABEL_43:
    v142 = (uint64_t)v26;
    return sub_1000126B0(v142, type metadata accessor for AccessoryProductInfo);
  }
  v113 = swift_bridgeObjectRetain_n(v186, 2);
  v114 = Logger.logObject.getter(v113);
  v115 = static os_log_type_t.info.getter(v114);
  v116 = os_log_type_enabled(v114, v115);
  v178 = v110;
  v166 = v105;
  if (v116)
  {
    v117 = (uint8_t *)swift_slowAlloc(12, -1);
    v118 = swift_slowAlloc(32, -1);
    *(_DWORD *)v117 = 136315138;
    v188 = v118;
    v174 = (char *)(v117 + 4);
    v186 = 0;
    v187 = 0xE000000000000000;
    swift_bridgeObjectRetain(v178);
    _StringGuts.grow(_:)(34);
    swift_bridgeObjectRelease();
    v186 = 0xD000000000000020;
    v187 = 0x8000000100ECBDF0;
    swift_bridgeObjectRetain(v178);
    v119._countAndFlagsBits = Array.description.getter(v178, v172);
    String.append(_:)(v119);
    swift_bridgeObjectRelease_n(v178, 2);
    swift_bridgeObjectRelease();
    v186 = sub_100016940(v186, v187, &v188);
    v120 = v179;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v186, &v187, v174, v117 + 12);
    swift_bridgeObjectRelease_n(v178, 2);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v114, v115, "decodedResponse: %s", v117, 0xCu);
    swift_arrayDestroy(v118, 1, (char *)&type metadata for Any + 8);
    v121 = v118;
    v110 = v178;
    swift_slowDealloc(v121, -1, -1);
    swift_slowDealloc(v117, -1, -1);

  }
  else
  {
    v120 = v112;

    swift_bridgeObjectRelease_n(v110, 2);
  }
  v143 = v181;
  v144 = v110 + ((*(unsigned __int8 *)(v175 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v175 + 80));
  v145 = *(_QWORD *)(v175 + 72);
  swift_bridgeObjectRetain(v110);
  v146 = _swiftEmptyArrayStorage;
  v147 = (uint64_t)v184;
  do
  {
    sub_10005972C(v144, v147, type metadata accessor for AccessoryInfoResponseContent);
    v148 = v185;
    sub_10005972C(v147, v185, type metadata accessor for AccessoryInfoResponseContent);
    v149 = v183;
    sub_100D1536C(v148, v183);
    sub_1000126B0(v147, type metadata accessor for AccessoryInfoResponseContent);
    v150 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v143 + 48);
    if (v150(v149, 1, v120) == 1)
    {
      sub_100004048(v149, (uint64_t *)&unk_10111C0A0);
    }
    else
    {
      v151 = v180;
      sub_1000126EC(v149, v180, type metadata accessor for AccessoryProductInfo);
      sub_1000126EC(v151, v182, type metadata accessor for AccessoryProductInfo);
      if ((swift_isUniquelyReferenced_nonNull_native(v146) & 1) == 0)
        v146 = (_QWORD *)sub_1007C8F98(0, v146[2] + 1, 1, (unint64_t)v146);
      v153 = v146[2];
      v152 = v146[3];
      if (v153 >= v152 >> 1)
        v146 = (_QWORD *)sub_1007C8F98(v152 > 1, v153 + 1, 1, (unint64_t)v146);
      v146[2] = v153 + 1;
      v143 = v181;
      sub_1000126EC(v182, (uint64_t)v146+ ((*(unsigned __int8 *)(v143 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v143 + 80))+ *(_QWORD *)(v181 + 72) * v153, type metadata accessor for AccessoryProductInfo);
      v120 = v179;
    }
    v144 += v145;
    --v111;
  }
  while (v111);
  swift_bridgeObjectRelease_n(v178, 2);
  if (v146[2])
  {
    v154 = v176;
    sub_10005972C((uint64_t)v146 + ((*(unsigned __int8 *)(v143 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v143 + 80)), v176, type metadata accessor for AccessoryProductInfo);
    v155 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v143 + 56);
    v155(v154, 0, 1, v120);
  }
  else
  {
    v155 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v143 + 56);
    v154 = v176;
    v155(v176, 1, 1, v120);
  }
  v156 = v177;
  swift_bridgeObjectRelease();
  if (v150(v154, 1, v120) == 1)
  {
    sub_100004048(v154, (uint64_t *)&unk_10111C0A0);
    v157 = type metadata accessor for AccessoryMetadataManager.Error(0);
    v158 = sub_100006204(&qword_1010F37D8, type metadata accessor for AccessoryMetadataManager.Error, (uint64_t)&unk_100E2E588);
    v159 = swift_allocError(v157, v158, 0, 0);
    swift_storeEnumTagMultiPayload(v160, v157, 7);
    v186 = v159;
    v161 = sub_10001A9A8(&qword_1010F37E0);
    CheckedContinuation.resume(throwing:)(&v186, v161);
    return swift_release();
  }
  v162 = v173;
  sub_1000126EC(v154, v173, type metadata accessor for AccessoryProductInfo);
  sub_10005972C(v162, v156, type metadata accessor for AccessoryProductInfo);
  v155(v156, 0, 1, v120);
  v163 = sub_10001A9A8(&qword_1010F37E0);
  CheckedContinuation.resume(returning:)(v156, v163);
  swift_release();
  v142 = v162;
  return sub_1000126B0(v142, type metadata accessor for AccessoryProductInfo);
}

uint64_t sub_100243224(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  v4 = sub_100016940(0xD000000000000026, 0x8000000100ECC0D0, a3);
  v5 = *a1;
  v6 = *a1 + 8;
  v8 = v4;
  result = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v8, &v9, v5, v6);
  *a1 = v6;
  return result;
}

uint64_t type metadata accessor for AccessoryMetadataManager.Error(uint64_t a1)
{
  return sub_10001B630(a1, qword_1010F3A90, (uint64_t)&nominal type descriptor for AccessoryMetadataManager.Error);
}

uint64_t sub_10024329C(uint64_t a1)
{
  uint64_t v1;

  return sub_1002412D8(a1, *(_QWORD *)(v1 + 16), *(uint64_t **)(v1 + 24));
}

uint64_t sub_1002432A8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(sub_10001A9A8(&qword_1010F37E0) - 8) + 80);
  return sub_100241740(a1, *(_QWORD *)(v1 + 16), v1 + ((v3 + 24) & ~v3));
}

uint64_t sub_1002432F0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(sub_10001A9A8(&qword_1010F37E0) - 8) + 80);
  return sub_100241C30(a1, *(_QWORD *)(v1 + 16), v1 + ((v3 + 24) & ~v3));
}

unint64_t sub_100243334()
{
  unint64_t result;

  result = qword_1010F37E8;
  if (!qword_1010F37E8)
  {
    result = swift_getWitnessTable("ť#", &type metadata for AccessoryInfoResponse);
    atomic_store(result, (unint64_t *)&qword_1010F37E8);
  }
  return result;
}

uint64_t sub_100243378(void (*a1)(_QWORD), uint64_t a2)
{
  uint64_t v2;

  return sub_1002228F0(a1, a2, *(_QWORD *)(v2 + 16), *(unsigned __int8 *)(v2 + 24), *(_QWORD *)(v2 + 32));
}

uint64_t sub_100243388()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1002433AC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  char v5;
  uint64_t v6;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_BYTE *)(v1 + 24);
  v6 = swift_task_alloc(dword_1010F37FC);
  *(_QWORD *)(v2 + 16) = v6;
  *(_QWORD *)v6 = v2;
  *(_QWORD *)(v6 + 8) = sub_100004A74;
  *(_BYTE *)(v6 + 64) = v5;
  *(_QWORD *)(v6 + 16) = a1;
  *(_QWORD *)(v6 + 24) = v4;
  return swift_task_switch(sub_100222F50, 0, 0);
}

uint64_t sub_100243420(uint64_t a1)
{
  uint64_t v1;

  return sub_100223080(a1, *(_BYTE *)(v1 + 16), *(uint64_t **)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40));
}

uint64_t sub_100243444(uint64_t a1)
{
  uint64_t v1;

  return sub_100223374(a1, *(_QWORD *)(v1 + 16), *(void (**)(_QWORD))(v1 + 24));
}

uint64_t sub_100243454()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100243480(uint64_t a1)
{
  uint64_t v1;

  return sub_1002235CC(a1, *(_QWORD *)(v1 + 16), *(void (**)(uint64_t))(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t sub_10024348C(uint64_t a1)
{
  uint64_t *v1;

  return sub_10022BE20(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_100243498()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v1 = type metadata accessor for MACAddress(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = sub_10001A9A8(&qword_1010F3830);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v5 + v8) & ~v8;
  v10 = v3 | v8 | 7;
  v11 = ((*(_QWORD *)(v7 + 64) + v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v9, v6);
  return swift_deallocObject(v0, v11, v10);
}

uint64_t sub_100243564(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;

  v4 = *(_QWORD *)(type metadata accessor for MACAddress(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = v5 + *(_QWORD *)(v4 + 64);
  v7 = *(_QWORD *)(sub_10001A9A8(&qword_1010F3830) - 8);
  v8 = (v6 + *(unsigned __int8 *)(v7 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v9 = v1[2];
  v10 = v1[3];
  v11 = v1[4];
  v12 = (uint64_t)v1 + v5;
  v13 = (uint64_t)v1 + v8;
  v14 = *(_QWORD *)((char *)v1 + ((*(_QWORD *)(v7 + 64) + v8 + 7) & 0xFFFFFFFFFFFFF8));
  v15 = (_QWORD *)swift_task_alloc(dword_1010F383C);
  *(_QWORD *)(v2 + 16) = v15;
  *v15 = v2;
  v15[1] = sub_100004C28;
  return sub_10022C000(a1, v9, v10, v11, v12, v13, v14);
}

uint64_t sub_100243648()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v2 = *(_QWORD *)(type metadata accessor for MACAddress(0) - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = v3 + *(_QWORD *)(v2 + 64);
  v5 = *(_QWORD *)(sub_10001A9A8(&qword_1010F3830) - 8);
  v6 = (v4 + *(unsigned __int8 *)(v5 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = v0 + v3;
  v8 = v0 + v6;
  v9 = *(_QWORD *)(v0 + ((*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFF8));
  v10 = (_QWORD *)swift_task_alloc(dword_1010F384C);
  *(_QWORD *)(v1 + 16) = v10;
  *v10 = v1;
  v10[1] = sub_100004C28;
  return sub_10022C334(v7, v8, v9);
}

uint64_t sub_1002436FC(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  char v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v5 = a2 & 1;
  v6 = *(_QWORD *)(type metadata accessor for MACAddress(0) - 8);
  v7 = (*(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v8 = v7 + *(_QWORD *)(v6 + 64);
  v9 = *(_QWORD *)(sub_10001A9A8(&qword_1010F3830) - 8);
  v10 = v2 + ((v8 + *(unsigned __int8 *)(v9 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
  v11 = (_QWORD *)swift_task_alloc(dword_1010F385C);
  *(_QWORD *)(v3 + 16) = v11;
  *v11 = v3;
  v11[1] = sub_100004A74;
  return sub_10023F628(a1, v5, v2 + v7, v10);
}

uint64_t sub_1002437C4(uint64_t result, char a2)
{
  if ((a2 & 1) != 0)
    return swift_errorRetain(result);
  return result;
}

uint64_t sub_1002437D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v1 = type metadata accessor for MACAddress(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = sub_10001A9A8(&qword_1010F3830);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v5 + v8) & ~v8;
  v10 = v3 | v8 | 7;
  v11 = ((*(_QWORD *)(v7 + 64) + v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v9, v6);
  return swift_deallocObject(v0, v11, v10);
}

uint64_t sub_100243898(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v4 = *(_QWORD *)(type metadata accessor for MACAddress(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = v5 + *(_QWORD *)(v4 + 64);
  v7 = *(_QWORD *)(sub_10001A9A8(&qword_1010F3830) - 8);
  v8 = (v6 + *(unsigned __int8 *)(v7 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v9 = v1 + v5;
  v10 = v1 + v8;
  v11 = *(_QWORD *)(v1 + ((*(_QWORD *)(v7 + 64) + v8 + 7) & 0xFFFFFFFFFFFFF8));
  v12 = (_QWORD *)swift_task_alloc(dword_1010F386C);
  *(_QWORD *)(v2 + 16) = v12;
  *v12 = v2;
  v12[1] = sub_100004A74;
  return sub_10022C610(a1, v9, v10, v11);
}

uint64_t sub_100243954()
{
  return sub_100240B38();
}

uint64_t sub_10024396C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100243990()
{
  uint64_t v0;

  return sub_1000D77E8(*(void (**)(uint64_t))(v0 + 16));
}

uint64_t sub_100243998()
{
  uint64_t v0;

  swift_errorRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1002439BC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1002439CC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1002439DC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1002439EC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1002439FC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100243A0C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100243A1C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100243A2C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100243A3C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100243A4C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100243A5C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100243A6C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100243A7C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100243A8C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

unint64_t sub_100243A9C()
{
  unint64_t result;

  result = qword_1010F3880;
  if (!qword_1010F3880)
  {
    result = swift_getWitnessTable(byte_100E3CA58, &type metadata for PoshAccessoryNonOwnerCommand);
    atomic_store(result, (unint64_t *)&qword_1010F3880);
  }
  return result;
}

unint64_t sub_100243AE0()
{
  unint64_t result;

  result = qword_1010F3888;
  if (!qword_1010F3888)
  {
    result = swift_getWitnessTable(byte_100E3CA30, &type metadata for PoshAccessoryNonOwnerCommand);
    atomic_store(result, &qword_1010F3888);
  }
  return result;
}

uint64_t sub_100243B24(uint64_t result, unint64_t a2, char a3)
{
  if (a3 == 2 || a3 == 1)
    return swift_bridgeObjectRelease();
  if (!a3)
    return sub_10001BC14(result, a2);
  return result;
}

uint64_t sub_100243B4C()
{
  uint64_t v0;

  sub_10001BC14(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100243B70@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v2 = *(_QWORD *)(v1 + 16);
  v3 = *(_QWORD *)(v1 + 24);
  *a1 = v2;
  a1[1] = v3;
  return sub_10001BBBC(v2, v3);
}

uint64_t sub_100243B7C()
{
  uint64_t v0;

  return sub_1000D7758(*(void (**)(uint64_t *__return_ptr))(v0 + 16));
}

double sub_100243B84(uint64_t a1, unint64_t a2, char a3)
{
  double result;

  if (a3 == 2 || a3 == 1)
  {
    *(_QWORD *)&result = swift_bridgeObjectRetain(a2).n128_u64[0];
  }
  else if (!a3)
  {
    sub_10001BBBC(a1, a2);
  }
  return result;
}

uint64_t sub_100243BAC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100243BBC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100243BCC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100243BDC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100243BEC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100243BFC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100243C0C()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100243C30()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100243C40()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100243C50()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100243C60()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100243C70()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100243C80()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100243C90()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100243CA0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100243CB0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100243CC0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100243CD0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100243CE0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100243CF0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100243D00()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t sub_100243D08()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100243D18()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100243D28()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100243D38()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100243D48()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100243D58()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100243D68()
{
  uint64_t v0;

  return swift_deallocObject(v0, 20, 7);
}

void sub_100243D78(_DWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_DWORD *)(v1 + 16);
}

uint64_t sub_100243D84()
{
  uint64_t v0;

  return sub_1000D78AC(*(void (**)(uint64_t *__return_ptr))(v0 + 16));
}

uint64_t sub_100243D8C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100243D9C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100243DAC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100243DBC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100243DCC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100243DDC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100243DEC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 20, 7);
}

uint64_t sub_100243DFC()
{
  uint64_t v0;

  return sub_1000D77B8(*(void (**)(uint64_t *__return_ptr))(v0 + 16));
}

uint64_t sub_100243E04()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100243E14()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100243E24()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100243E34()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100243E44()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100243E54()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100243E64()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100243E74()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 16);
}

uint64_t sub_100243E7C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100243E8C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100243E9C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100243EAC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100243EBC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100243ECC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100243EDC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 20, 7);
}

uint64_t sub_100243EEC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100243EFC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100243F0C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100243F1C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100243F2C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100243F3C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100243F4C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100243F5C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100243F6C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100243F7C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100243F8C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100243F9C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100243FAC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100243FBC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100243FCC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100243FDC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100243FEC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100243FFC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10024400C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10024401C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10024402C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10024403C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10024404C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100244078(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = *(_BYTE *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  v6 = *(_QWORD *)(v1 + 32);
  v7 = (_QWORD *)swift_task_alloc(dword_1010F389C);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_100004A74;
  return sub_100240B98(a1, v4, v5, v6);
}

uint64_t sub_1002440F4()
{
  uint64_t v0;
  id *v1;
  id v2;

  if (*(_BYTE *)(v0 + 57) == 1)
  {
    v1 = (id *)(v0 + 16);
    switch(*(_BYTE *)(v0 + 56))
    {
      case 0:
      case 7:
      case 0xA:
        v2 = *v1;
        goto LABEL_10;
      case 1:
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
        return swift_deallocObject(v0, 58, 7);
      case 2:

        goto LABEL_9;
      case 3:

        return swift_deallocObject(v0, 58, 7);
      case 4:
      case 5:
      case 6:
        swift_release();
        return swift_deallocObject(v0, 58, 7);
      case 8:
        swift_release();
LABEL_9:
        v2 = *(id *)(v0 + 24);
LABEL_10:
        swift_errorRelease(v2);
        break;
      case 9:
        swift_bridgeObjectRelease();
        break;
      default:
        return swift_deallocObject(v0, 58, 7);
    }
  }
  return swift_deallocObject(v0, 58, 7);
}

void sub_100244198(uint64_t a1)
{
  uint64_t v1;

  sub_100221DFC(a1, *(_QWORD *)(v1 + 16), *(NSObject **)(v1 + 24));
}

uint64_t sub_1002441A0(uint64_t a1, uint64_t a2)
{
  initializeWithTake for AccessoryNonOwnerCommand(a2, a1);
  return a2;
}

double sub_1002441DC(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, char a5)
{
  int v5;
  int v6;
  double result;

  if ((a5 & 1) != 0)
    v5 = 4;
  else
    v5 = 0;
  v6 = (a4 >> 60) & 3 | v5;
  if (v6 == 3)
  {
    *(_QWORD *)&result = swift_bridgeObjectRetain(a2).n128_u64[0];
  }
  else
  {
    if (v6 != 2)
    {
      if (v6)
        return result;
      sub_10001BBBC(a1, a2);
      a1 = a3;
      a2 = a4;
    }
    sub_10001BBBC(a1, a2);
  }
  return result;
}

uint64_t sub_10024423C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001A9A8(&qword_1010EEBF8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_100244284()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1002442A8()
{
  uint64_t v0;

  swift_release();

  sub_1002442EC(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_BYTE *)(v0 + 64));
  swift_release();
  return swift_deallocObject(v0, 80, 7);
}

uint64_t sub_1002442EC(uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4, char a5)
{
  int v5;
  int v6;

  if ((a5 & 1) != 0)
    v5 = 4;
  else
    v5 = 0;
  v6 = (a4 >> 60) & 3 | v5;
  if (v6 == 3)
    return swift_bridgeObjectRelease();
  if (v6 != 2)
  {
    if (v6)
      return result;
    sub_10001BC14(result, a2);
    result = a3;
    a2 = a4;
  }
  return sub_10001BC14(result, a2);
}

uint64_t sub_10024434C(void (*a1)(_BYTE *), uint64_t a2)
{
  uint64_t v2;

  return sub_100220A1C(a1, a2, *(_QWORD *)(v2 + 16), *(void **)(v2 + 24), v2 + 32, *(_QWORD **)(v2 + 72));
}

unint64_t sub_10024435C()
{
  unint64_t result;

  result = qword_1010F38B8;
  if (!qword_1010F38B8)
  {
    result = swift_getWitnessTable(byte_100E6181C, &type metadata for AccessoryNonOwnerCommand);
    atomic_store(result, (unint64_t *)&qword_1010F38B8);
  }
  return result;
}

uint64_t sub_1002443A0()
{
  uint64_t v0;

  swift_release();

  sub_10001BC14(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1002443D4(void (*a1)(_BYTE *), uint64_t a2)
{
  uint64_t v2;

  return sub_10021F99C(a1, a2, *(_QWORD *)(v2 + 16), *(void **)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40));
}

unint64_t sub_1002443E4()
{
  unint64_t result;

  result = qword_1010F38C0;
  if (!qword_1010F38C0)
  {
    result = swift_getWitnessTable(byte_100E61844, &type metadata for AccessoryNonOwnerCommand);
    atomic_store(result, (unint64_t *)&qword_1010F38C0);
  }
  return result;
}

uint64_t sub_100244428()
{
  uint64_t v0;

  sub_1002442EC(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_BYTE *)(v0 + 48));
  return swift_deallocObject(v0, 49, 7);
}

unint64_t sub_100244454()
{
  unint64_t result;

  result = qword_1010F38C8;
  if (!qword_1010F38C8)
  {
    result = swift_getWitnessTable(byte_100E428C8, &type metadata for AccessoryGenericPayload);
    atomic_store(result, (unint64_t *)&qword_1010F38C8);
  }
  return result;
}

uint64_t sub_100244498()
{
  uint64_t v0;
  id *v1;
  id v2;

  v1 = (id *)(v0 + 16);
  switch(*(_BYTE *)(v0 + 56))
  {
    case 0:
    case 7:
    case 0xA:
      v2 = *v1;
      goto LABEL_9;
    case 1:
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
      return swift_deallocObject(v0, 57, 7);
    case 2:

      goto LABEL_8;
    case 3:

      return swift_deallocObject(v0, 57, 7);
    case 4:
    case 5:
    case 6:
      swift_release();
      return swift_deallocObject(v0, 57, 7);
    case 8:
      swift_release();
LABEL_8:
      v2 = *(id *)(v0 + 24);
LABEL_9:
      swift_errorRelease(v2);
      break;
    case 9:
      swift_bridgeObjectRelease();
      break;
    default:
      return swift_deallocObject(v0, 57, 7);
  }
  return swift_deallocObject(v0, 57, 7);
}

uint64_t sub_10024452C(void (*a1)(_QWORD *), uint64_t a2)
{
  uint64_t v2;

  return sub_10021DF6C(a1, a2, (_QWORD *)(v2 + 16));
}

uint64_t sub_100244534(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(unsigned __int8 *)(a1 + 32));
  return a1;
}

uint64_t sub_10024456C(uint64_t a1)
{
  uint64_t v1;

  return sub_10021D044(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(void **)(v1 + 32));
}

uint64_t sub_10024458C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = sub_10021F6E8(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(void **)(v2 + 24));
  *a2 = result;
  return result;
}

void sub_1002445C4(char *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  sub_10021DFEC(a1, *(void **)(v2 + 24), a2);
}

uint64_t sub_1002445E8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));

  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10024461C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = sub_10021DC10(a1, *(_QWORD *)(v2 + 24), *(void **)(v2 + 32));
  *a2 = result;
  return result;
}

uint64_t sub_100244650(uint64_t a1)
{
  uint64_t v1;

  return sub_10021D930(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(void **)(v1 + 32));
}

uint64_t sub_10024465C(uint64_t a1)
{
  uint64_t v1;

  return sub_10021C754(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(void **)(v1 + 32));
}

uint64_t sub_10024467C(uint64_t a1)
{
  uint64_t v1;

  return sub_10021CCAC(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(void **)(v1 + 32));
}

uint64_t sub_100244688()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for MACAddress(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v3 | 7;
  v6 = ((*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_release(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v6, v5);
}

uint64_t sub_100244708(void (*a1)(char *), void (*a2)(char *))
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for MACAddress(0) - 8) + 80);
  return sub_100219E5C(a1, a2, *(_QWORD *)(v2 + 16), v2 + ((v5 + 24) & ~v5));
}

uint64_t sub_10024476C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v1 = type metadata accessor for MACAddress(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = (v6 + 23) & 0xFFFFFFFFFFFFFFF8;
  swift_release(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(_QWORD *)(v0 + v6 + 8));

  return swift_deallocObject(v0, v7 + 8, v5);
}

uint64_t sub_100244810()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(type metadata accessor for MACAddress(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_10021AE8C(*(_QWORD *)(v0 + 16), v0 + v2, *(void (**)(uint64_t))(v0 + v3), *(_QWORD *)(v0 + v3 + 8), *(_QWORD *)(v0 + ((v3 + 23) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_100244864()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100244874()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

unint64_t sub_1002448A8(uint64_t a1)
{
  uint64_t v1;

  return sub_10021B7E4(a1, *(_QWORD *)(v1 + 16), *(void **)(v1 + 24), *(void (**)(uint64_t *))(v1 + 32), *(_QWORD *)(v1 + 40));
}

void sub_1002448B8(uint64_t *a1@<X8>)
{
  uint64_t *v1;

  sub_100218380(v1[2], v1[3], v1[4], a1);
}

uint64_t sub_1002448D4(uint64_t a1)
{
  uint64_t v1;

  return sub_1002189B0(a1, *(void **)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_1002448F4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

_QWORD *sub_100244930(uint64_t a1)
{
  uint64_t v1;

  return sub_1002197F0(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(void **)(v1 + 32));
}

_QWORD *sub_100244940(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  int EnumCaseMultiPayload;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v10 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v10 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 2)
    {
      v11 = type metadata accessor for UUID(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(a1, a2, v11);
      v12 = (int *)type metadata accessor for AccessoryMetadata(0);
      v13 = v12[5];
      v14 = (_QWORD *)((char *)a1 + v13);
      v15 = (_QWORD *)((char *)a2 + v13);
      v16 = *v15;
      v17 = v15[1];
      sub_10001BBBC(*v15, v17);
      *v14 = v16;
      v14[1] = v17;
      v18 = v12[6];
      v19 = (_QWORD *)((char *)a1 + v18);
      v20 = (_QWORD *)((char *)a2 + v18);
      v21 = v20[1];
      *v19 = *v20;
      v19[1] = v21;
      v22 = v12[7];
      v23 = (_QWORD *)((char *)a1 + v22);
      v24 = (_QWORD *)((char *)a2 + v22);
      v25 = v24[1];
      *v23 = *v24;
      v23[1] = v25;
      *(_DWORD *)((char *)a1 + v12[8]) = *(_DWORD *)((char *)a2 + v12[8]);
      v26 = v12[9];
      v27 = (char *)a1 + v26;
      v28 = (char *)a2 + v26;
      *(_DWORD *)v27 = *(_DWORD *)v28;
      v27[4] = v28[4];
      v29 = v12[10];
      v30 = (char *)a1 + v29;
      v31 = (char *)a2 + v29;
      *(_OWORD *)v30 = *(_OWORD *)v31;
      v30[16] = v31[16];
      v32 = v12[11];
      v33 = (char *)a1 + v32;
      v34 = (char *)a2 + v32;
      v33[8] = v34[8];
      *(_QWORD *)v33 = *(_QWORD *)v34;
      v35 = v12[12];
      v36 = (char *)a1 + v35;
      v37 = (char *)a2 + v35;
      *(_DWORD *)v36 = *(_DWORD *)v37;
      v36[4] = v37[4];
      *((_BYTE *)a1 + v12[13]) = *((_BYTE *)a2 + v12[13]);
      *((_BYTE *)a1 + v12[14]) = *((_BYTE *)a2 + v12[14]);
      v38 = v12[15];
      v39 = (_QWORD *)((char *)a1 + v38);
      v40 = (_QWORD *)((char *)a2 + v38);
      v41 = v40[1];
      *v39 = *v40;
      v39[1] = v41;
      swift_bridgeObjectRetain(v21);
      swift_bridgeObjectRetain(v25);
      swift_bridgeObjectRetain(v41);
      swift_storeEnumTagMultiPayload(a1, a3, 2);
    }
    else if (EnumCaseMultiPayload == 1)
    {
      v42 = type metadata accessor for MACAddress(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v42 - 8) + 16))(a1, a2, v42);
      swift_storeEnumTagMultiPayload(a1, a3, 1);
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(_QWORD *)(v5 + 64));
    }
    else
    {
      v9 = *a2;
      swift_errorRetain(v9);
      *a1 = v9;
      swift_storeEnumTagMultiPayload(a1, a3, 0);
    }
  }
  return a1;
}

uint64_t sub_100244B78(_QWORD *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  result = swift_getEnumCaseMultiPayload(a1, a2);
  switch((_DWORD)result)
  {
    case 2:
      v4 = type metadata accessor for UUID(0);
      (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
      v5 = type metadata accessor for AccessoryMetadata(0);
      sub_10001BC14(*(_QWORD *)((char *)a1 + *(int *)(v5 + 20)), *(_QWORD *)((char *)a1 + *(int *)(v5 + 20) + 8));
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    case 1:
      v6 = type metadata accessor for MACAddress(0);
      return (*(uint64_t (**)(_QWORD *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a1, v6);
    case 0:
      return swift_errorRelease(*a1);
  }
  return result;
}

_QWORD *sub_100244C50(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  if (EnumCaseMultiPayload == 2)
  {
    v8 = type metadata accessor for UUID(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
    v9 = (int *)type metadata accessor for AccessoryMetadata(0);
    v10 = v9[5];
    v11 = (_QWORD *)((char *)a1 + v10);
    v12 = (_QWORD *)((char *)a2 + v10);
    v13 = *v12;
    v14 = v12[1];
    sub_10001BBBC(*v12, v14);
    *v11 = v13;
    v11[1] = v14;
    v15 = v9[6];
    v16 = (_QWORD *)((char *)a1 + v15);
    v17 = (_QWORD *)((char *)a2 + v15);
    v18 = v17[1];
    *v16 = *v17;
    v16[1] = v18;
    v19 = v9[7];
    v20 = (_QWORD *)((char *)a1 + v19);
    v21 = (_QWORD *)((char *)a2 + v19);
    v22 = v21[1];
    *v20 = *v21;
    v20[1] = v22;
    *(_DWORD *)((char *)a1 + v9[8]) = *(_DWORD *)((char *)a2 + v9[8]);
    v23 = v9[9];
    v24 = (char *)a1 + v23;
    v25 = (char *)a2 + v23;
    *(_DWORD *)v24 = *(_DWORD *)v25;
    v24[4] = v25[4];
    v26 = v9[10];
    v27 = (char *)a1 + v26;
    v28 = (char *)a2 + v26;
    *(_OWORD *)v27 = *(_OWORD *)v28;
    v27[16] = v28[16];
    v29 = v9[11];
    v30 = (char *)a1 + v29;
    v31 = (char *)a2 + v29;
    v30[8] = v31[8];
    *(_QWORD *)v30 = *(_QWORD *)v31;
    v32 = v9[12];
    v33 = (char *)a1 + v32;
    v34 = (char *)a2 + v32;
    *(_DWORD *)v33 = *(_DWORD *)v34;
    v33[4] = v34[4];
    *((_BYTE *)a1 + v9[13]) = *((_BYTE *)a2 + v9[13]);
    *((_BYTE *)a1 + v9[14]) = *((_BYTE *)a2 + v9[14]);
    v35 = v9[15];
    v36 = (_QWORD *)((char *)a1 + v35);
    v37 = (_QWORD *)((char *)a2 + v35);
    v38 = v37[1];
    *v36 = *v37;
    v36[1] = v38;
    swift_bridgeObjectRetain(v18);
    swift_bridgeObjectRetain(v22);
    swift_bridgeObjectRetain(v38);
    swift_storeEnumTagMultiPayload(a1, a3, 2);
  }
  else if (EnumCaseMultiPayload == 1)
  {
    v39 = type metadata accessor for MACAddress(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v39 - 8) + 16))(a1, a2, v39);
    swift_storeEnumTagMultiPayload(a1, a3, 1);
  }
  else if (EnumCaseMultiPayload)
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    v7 = *a2;
    swift_errorRetain(v7);
    *a1 = v7;
    swift_storeEnumTagMultiPayload(a1, a3, 0);
  }
  return a1;
}

_QWORD *sub_100244E60(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  int v26;
  uint64_t v27;
  char *v28;
  char *v29;
  __int128 v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;

  if (a1 != a2)
  {
    sub_1000126B0((uint64_t)a1, type metadata accessor for AccessoryMetadataManager.Error);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 2)
    {
      v8 = type metadata accessor for UUID(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
      v9 = (int *)type metadata accessor for AccessoryMetadata(0);
      v10 = v9[5];
      v11 = (_QWORD *)((char *)a1 + v10);
      v12 = (_QWORD *)((char *)a2 + v10);
      v13 = *v12;
      v14 = v12[1];
      sub_10001BBBC(*v12, v14);
      *v11 = v13;
      v11[1] = v14;
      v15 = v9[6];
      v16 = (_QWORD *)((char *)a1 + v15);
      v17 = (_QWORD *)((char *)a2 + v15);
      *v16 = *v17;
      v18 = v17[1];
      v16[1] = v18;
      v19 = v9[7];
      v20 = (_QWORD *)((char *)a1 + v19);
      v21 = (_QWORD *)((char *)a2 + v19);
      *v20 = *v21;
      v22 = v21[1];
      v20[1] = v22;
      *(_DWORD *)((char *)a1 + v9[8]) = *(_DWORD *)((char *)a2 + v9[8]);
      v23 = v9[9];
      v24 = (char *)a1 + v23;
      v25 = (char *)a2 + v23;
      v26 = *(_DWORD *)v25;
      v24[4] = v25[4];
      *(_DWORD *)v24 = v26;
      v27 = v9[10];
      v28 = (char *)a1 + v27;
      v29 = (char *)a2 + v27;
      v30 = *(_OWORD *)v29;
      v28[16] = v29[16];
      *(_OWORD *)v28 = v30;
      v31 = v9[11];
      v32 = (char *)a1 + v31;
      v33 = (char *)a2 + v31;
      v34 = *(_QWORD *)v33;
      v32[8] = v33[8];
      *(_QWORD *)v32 = v34;
      v35 = v9[12];
      v36 = (char *)a1 + v35;
      v37 = (char *)a2 + v35;
      LODWORD(v34) = *(_DWORD *)v37;
      v36[4] = v37[4];
      *(_DWORD *)v36 = v34;
      *((_BYTE *)a1 + v9[13]) = *((_BYTE *)a2 + v9[13]);
      *((_BYTE *)a1 + v9[14]) = *((_BYTE *)a2 + v9[14]);
      v38 = v9[15];
      v39 = (_QWORD *)((char *)a1 + v38);
      v40 = (_QWORD *)((char *)a2 + v38);
      *v39 = *v40;
      v41 = v40[1];
      v39[1] = v41;
      swift_bridgeObjectRetain(v18);
      swift_bridgeObjectRetain(v22);
      swift_bridgeObjectRetain(v41);
      swift_storeEnumTagMultiPayload(a1, a3, 2);
    }
    else if (EnumCaseMultiPayload == 1)
    {
      v42 = type metadata accessor for MACAddress(0);
      (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v42 - 8) + 16))(a1, a2, v42);
      swift_storeEnumTagMultiPayload(a1, a3, 1);
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
    else
    {
      v7 = *a2;
      swift_errorRetain(v7);
      *a1 = v7;
      swift_storeEnumTagMultiPayload(a1, a3, 0);
    }
  }
  return a1;
}

_BYTE *sub_1002450A0(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  if (EnumCaseMultiPayload == 2)
  {
    v8 = type metadata accessor for UUID(0);
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
    v9 = (int *)type metadata accessor for AccessoryMetadata(0);
    *(_OWORD *)&a1[v9[5]] = *(_OWORD *)&a2[v9[5]];
    *(_OWORD *)&a1[v9[6]] = *(_OWORD *)&a2[v9[6]];
    *(_OWORD *)&a1[v9[7]] = *(_OWORD *)&a2[v9[7]];
    *(_DWORD *)&a1[v9[8]] = *(_DWORD *)&a2[v9[8]];
    v10 = v9[9];
    v11 = &a1[v10];
    v12 = &a2[v10];
    v11[4] = v12[4];
    *(_DWORD *)v11 = *(_DWORD *)v12;
    v13 = v9[10];
    v14 = &a1[v13];
    v15 = &a2[v13];
    v14[16] = v15[16];
    *(_OWORD *)v14 = *(_OWORD *)v15;
    v16 = v9[11];
    v17 = &a1[v16];
    v18 = &a2[v16];
    *(_QWORD *)v17 = *(_QWORD *)v18;
    v17[8] = v18[8];
    v19 = v9[12];
    v20 = &a1[v19];
    v21 = &a2[v19];
    *(_DWORD *)v20 = *(_DWORD *)v21;
    v20[4] = v21[4];
    a1[v9[13]] = a2[v9[13]];
    a1[v9[14]] = a2[v9[14]];
    *(_OWORD *)&a1[v9[15]] = *(_OWORD *)&a2[v9[15]];
    swift_storeEnumTagMultiPayload(a1, a3, 2);
  }
  else if (EnumCaseMultiPayload == 1)
  {
    v7 = type metadata accessor for MACAddress(0);
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload(a1, a3, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

_BYTE *sub_100245234(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;

  if (a1 != a2)
  {
    sub_1000126B0((uint64_t)a1, type metadata accessor for AccessoryMetadataManager.Error);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 2)
    {
      v8 = type metadata accessor for UUID(0);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
      v9 = (int *)type metadata accessor for AccessoryMetadata(0);
      *(_OWORD *)&a1[v9[5]] = *(_OWORD *)&a2[v9[5]];
      *(_OWORD *)&a1[v9[6]] = *(_OWORD *)&a2[v9[6]];
      *(_OWORD *)&a1[v9[7]] = *(_OWORD *)&a2[v9[7]];
      *(_DWORD *)&a1[v9[8]] = *(_DWORD *)&a2[v9[8]];
      v10 = v9[9];
      v11 = &a1[v10];
      v12 = &a2[v10];
      v11[4] = v12[4];
      *(_DWORD *)v11 = *(_DWORD *)v12;
      v13 = v9[10];
      v14 = &a1[v13];
      v15 = &a2[v13];
      v14[16] = v15[16];
      *(_OWORD *)v14 = *(_OWORD *)v15;
      v16 = v9[11];
      v17 = &a1[v16];
      v18 = &a2[v16];
      *(_QWORD *)v17 = *(_QWORD *)v18;
      v17[8] = v18[8];
      v19 = v9[12];
      v20 = &a1[v19];
      v21 = &a2[v19];
      *(_DWORD *)v20 = *(_DWORD *)v21;
      v20[4] = v21[4];
      a1[v9[13]] = a2[v9[13]];
      a1[v9[14]] = a2[v9[14]];
      *(_OWORD *)&a1[v9[15]] = *(_OWORD *)&a2[v9[15]];
      swift_storeEnumTagMultiPayload(a1, a3, 2);
    }
    else if (EnumCaseMultiPayload == 1)
    {
      v7 = type metadata accessor for MACAddress(0);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload(a1, a3, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_1002453E0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[3];

  v5[0] = "\b";
  result = type metadata accessor for MACAddress(319);
  if (v3 <= 0x3F)
  {
    v5[1] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for AccessoryMetadata(319);
    if (v4 <= 0x3F)
    {
      v5[2] = *(_QWORD *)(result - 8) + 64;
      swift_initEnumMetadataMultiPayload(a1, 256, 3, v5);
      return 0;
    }
  }
  return result;
}

uint64_t sub_100245470(uint64_t a1)
{
  return sub_1000FA464(a1) & 1;
}

void sub_100245650(_QWORD *a1@<X8>)
{
  sub_1000FA494(a1);
}

uint64_t sub_1002456A0(void *a1, uint64_t a2, void *a3, uint64_t a4, void *a5, void (*a6)(char *, void *, id))
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  id v15;
  id v16;
  id v17;
  uint64_t v19;

  v11 = type metadata accessor for UUID(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin();
  v14 = (char *)&v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(a4);
  v15 = a3;
  v16 = a1;
  v17 = a5;
  a6(v14, a5, v16);

  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
}

uint64_t sub_100245788(void *a1, uint64_t a2, void *a3, uint64_t a4, void *a5, void (*a6)(char *, void *))
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  id v15;
  id v16;
  id v17;
  uint64_t v19;

  v11 = type metadata accessor for UUID(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin();
  v14 = (char *)&v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(a4);
  v15 = a3;
  v16 = a1;
  v17 = a5;
  a6(v14, a5);

  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
}

void sub_100245C98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  void *v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint64_t v32;
  uint64_t v33;
  uint8_t *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  void (*v39)(char *, uint64_t);
  uint8_t *v40;
  void (*v41)(char *, uint64_t);
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  unint64_t v45;
  char v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  NSObject *v55;
  os_log_type_t v56;
  uint8_t *v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  const char *v62;
  uint64_t *v63;
  __n128 v64;
  uint64_t v65;
  char v66;
  char *v67;
  uint64_t v68;
  NSObject *v69;
  os_log_type_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  void (*v78)(char *, uint64_t);
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  char *v83;
  uint64_t v84;
  NSObject *v85;
  os_log_type_t v86;
  uint8_t *v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  char *v95;
  char *v96;
  char *v97;
  uint64_t (*v98)(char *, uint64_t, uint64_t);
  uint64_t v99;
  uint64_t v100;
  void (*v101)(char *, uint64_t);
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106[3];

  v6 = sub_10001A9A8(&qword_1010EF1D8);
  __chkstk_darwin(v6);
  v101 = (void (*)(char *, uint64_t))((char *)&v92 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v94 = (char *)&v92 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v92 - v13;
  v15 = __chkstk_darwin(v12);
  v96 = (char *)&v92 - v16;
  v17 = __chkstk_darwin(v15);
  v97 = (char *)&v92 - v18;
  __chkstk_darwin(v17);
  v20 = (char *)&v92 - v19;
  v21 = type metadata accessor for DispatchPredicate(0);
  v22 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin(v21);
  v24 = (uint64_t *)((char *)&v92 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  v100 = a3;
  v25 = *(void **)(a3 + OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_commandQueue);
  *v24 = v25;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v22 + 104))(v24, enum case for DispatchPredicate.onQueue(_:), v21);
  v26 = v25;
  LOBYTE(v25) = _dispatchPreconditionTest(_:)(v24);
  (*(void (**)(_QWORD *, uint64_t))(v22 + 8))(v24, v21);
  if ((v25 & 1) != 0)
  {
    if (qword_1010E9D28 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_1010E9D28, sub_1005D439C);
LABEL_3:
  v95 = v14;
  v27 = type metadata accessor for Logger(0);
  v28 = sub_10001A9E8(v27, (uint64_t)qword_1011B71E0);
  v98 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 16);
  v29 = v98(v20, a1, v8);
  v99 = v28;
  v30 = Logger.logObject.getter(v29);
  v31 = static os_log_type_t.default.getter(v30);
  if (os_log_type_enabled(v30, v31))
  {
    v32 = swift_slowAlloc(12, -1);
    v93 = a2;
    v33 = v8;
    v34 = (uint8_t *)v32;
    v35 = swift_slowAlloc(32, -1);
    v106[0] = v35;
    *(_DWORD *)v34 = 136315138;
    v92 = v9;
    v36 = sub_1001D4C18();
    v37 = dispatch thunk of CustomStringConvertible.description.getter(v33, v36);
    v103 = sub_100016940(v37, v38, v106);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v103, &v104, v34 + 4, v34 + 12);
    swift_bridgeObjectRelease();
    v39 = *(void (**)(char *, uint64_t))(v92 + 8);
    v39(v20, v33);
    _os_log_impl((void *)&_mh_execute_header, v30, v31, "didStartPlayingUnauthorizedSoundOnDevice %s", v34, 0xCu);
    swift_arrayDestroy(v35, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v35, -1, -1);
    v40 = v34;
    v8 = v33;
    a2 = v93;
    swift_slowDealloc(v40, -1, -1);
  }
  else
  {
    v39 = *(void (**)(char *, uint64_t))(v9 + 8);
    v39(v20, v8);
  }

  v42 = v100;
  v41 = v101;
  v43 = (uint64_t *)(v100 + OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_coordinators);
  swift_beginAccess(v100 + OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_coordinators, v106, 0, 0);
  v44 = *v43;
  if (!*(_QWORD *)(v44 + 16))
  {
    v52 = type metadata accessor for SoundPlaybackManager.PlaybackCoordinator(0);
    (*(void (**)(void (*)(char *, uint64_t), uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v52 - 8) + 56))(v41, 1, 1, v52);
    goto LABEL_12;
  }
  swift_bridgeObjectRetain(v44);
  v45 = sub_100003FB0(a1);
  if ((v46 & 1) != 0)
  {
    v47 = v45;
    v48 = *(_QWORD *)(v44 + 56);
    v49 = type metadata accessor for SoundPlaybackManager.PlaybackCoordinator(0);
    v50 = *(_QWORD *)(v49 - 8);
    v51 = v48 + *(_QWORD *)(v50 + 72) * v47;
    v41 = v101;
    sub_100246F94(v51, (uint64_t)v101);
    (*(void (**)(void (*)(char *, uint64_t), _QWORD, uint64_t, uint64_t))(v50 + 56))(v41, 0, 1, v49);
  }
  else
  {
    v49 = type metadata accessor for SoundPlaybackManager.PlaybackCoordinator(0);
    (*(void (**)(void (*)(char *, uint64_t), uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 56))(v41, 1, 1, v49);
  }
  swift_bridgeObjectRelease();
  type metadata accessor for SoundPlaybackManager.PlaybackCoordinator(0);
  if ((*(unsigned int (**)(void (*)(char *, uint64_t), uint64_t, uint64_t))(*(_QWORD *)(v49 - 8)
                                                                                              + 48))(v41, 1, v49) == 1)
  {
LABEL_12:
    sub_100004048((uint64_t)v41, &qword_1010EF1D8);
    v53 = v97;
    v54 = v98(v97, a1, v8);
    v55 = Logger.logObject.getter(v54);
    v56 = static os_log_type_t.error.getter(v55);
    if (os_log_type_enabled(v55, v56))
    {
      v57 = (uint8_t *)swift_slowAlloc(12, -1);
      v58 = swift_slowAlloc(32, -1);
      v103 = v58;
      *(_DWORD *)v57 = 136315138;
      v59 = sub_1001D4C18();
      v60 = dispatch thunk of CustomStringConvertible.description.getter(v8, v59);
      v105 = sub_100016940(v60, v61, &v103);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v105, v106, v57 + 4, v57 + 12);
      swift_bridgeObjectRelease();
      v39(v53, v8);
      v62 = "didStartPlayingUnauthorizedSoundOnDevice called with unknown device %s";
LABEL_22:
      _os_log_impl((void *)&_mh_execute_header, v55, v56, v62, v57, 0xCu);
      swift_arrayDestroy(v58, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v58, -1, -1);
      swift_slowDealloc(v57, -1, -1);
LABEL_24:

      return;
    }
    goto LABEL_23;
  }
  sub_100004048((uint64_t)v41, &qword_1010EF1D8);
  v63 = (uint64_t *)(v42 + OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_playSoundSubjects);
  v64 = swift_beginAccess(v42 + OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_playSoundSubjects, &v103, 0, 0);
  v65 = *v63;
  if (!*(_QWORD *)(v65 + 16))
  {
LABEL_20:
    v53 = v96;
    v79 = ((uint64_t (*)(char *, uint64_t, uint64_t, __n128))v98)(v96, a1, v8, v64);
    v55 = Logger.logObject.getter(v79);
    v56 = static os_log_type_t.error.getter(v55);
    if (os_log_type_enabled(v55, v56))
    {
      v57 = (uint8_t *)swift_slowAlloc(12, -1);
      v58 = swift_slowAlloc(32, -1);
      v105 = v58;
      *(_DWORD *)v57 = 136315138;
      v80 = sub_1001D4C18();
      v81 = dispatch thunk of CustomStringConvertible.description.getter(v8, v80);
      v102 = sub_100016940(v81, v82, &v105);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v102, &v103, v57 + 4, v57 + 12);
      swift_bridgeObjectRelease();
      v39(v53, v8);
      v62 = "Missing playSoundSubject for device %s!";
      goto LABEL_22;
    }
LABEL_23:
    v39(v53, v8);
    goto LABEL_24;
  }
  swift_bridgeObjectRetain(v65);
  sub_100003FB0(a1);
  if ((v66 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_20;
  }
  swift_retain();
  swift_bridgeObjectRelease();
  if (a2)
  {
    v67 = v95;
    v98(v95, a1, v8);
    swift_errorRetain(a2);
    swift_errorRetain(a2);
    v68 = swift_errorRetain(a2);
    v69 = Logger.logObject.getter(v68);
    v70 = static os_log_type_t.error.getter(v69);
    if (os_log_type_enabled(v69, v70))
    {
      v71 = swift_slowAlloc(22, -1);
      v101 = (void (*)(char *, uint64_t))swift_slowAlloc(64, -1);
      v105 = (uint64_t)v101;
      *(_DWORD *)v71 = 136315394;
      v72 = sub_1001D4C18();
      v73 = dispatch thunk of CustomStringConvertible.description.getter(v8, v72);
      v102 = sub_100016940(v73, v74, &v105);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v102, &v103, v71 + 4, v71 + 12);
      swift_bridgeObjectRelease();
      v39(v67, v8);
      *(_WORD *)(v71 + 12) = 2080;
      v102 = a2;
      swift_errorRetain(a2);
      v75 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
      v76 = String.init<A>(describing:)(&v102, v75);
      v102 = sub_100016940(v76, v77, &v105);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v102, &v103, v71 + 14, v71 + 22);
      swift_bridgeObjectRelease();
      swift_errorRelease(a2);
      swift_errorRelease(a2);
      _os_log_impl((void *)&_mh_execute_header, v69, v70, "didStartPlayingUnauthorizedSoundOnDevice %s failed due to %s", (uint8_t *)v71, 0x16u);
      v78 = v101;
      swift_arrayDestroy(v101, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v78, -1, -1);
      swift_slowDealloc(v71, -1, -1);
    }
    else
    {
      v39(v67, v8);
      swift_errorRelease(a2);
      swift_errorRelease(a2);
    }

    v105 = a2;
    swift_errorRetain(a2);
    PassthroughSubject.send(completion:)(&v105);
    swift_release();
    swift_errorRelease(a2);
    swift_errorRelease(a2);
  }
  else
  {
    v83 = v94;
    v84 = v98(v94, a1, v8);
    v85 = Logger.logObject.getter(v84);
    v86 = static os_log_type_t.default.getter(v85);
    if (os_log_type_enabled(v85, v86))
    {
      v87 = (uint8_t *)swift_slowAlloc(12, -1);
      v88 = swift_slowAlloc(32, -1);
      v105 = v88;
      v101 = v39;
      *(_DWORD *)v87 = 136315138;
      v89 = sub_1001D4C18();
      v90 = dispatch thunk of CustomStringConvertible.description.getter(v8, v89);
      v102 = sub_100016940(v90, v91, &v105);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v102, &v103, v87 + 4, v87 + 12);
      swift_bridgeObjectRelease();
      v101(v94, v8);
      _os_log_impl((void *)&_mh_execute_header, v85, v86, "didStartPlayingUnauthorizedSoundOnDevice %s succeeded", v87, 0xCu);
      swift_arrayDestroy(v88, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v88, -1, -1);
      swift_slowDealloc(v87, -1, -1);
    }
    else
    {
      v39(v83, v8);
    }

    PassthroughSubject.send(_:)(a1);
    v105 = 4;
    PassthroughSubject.send(completion:)(&v105);
    swift_release();
  }
}

void sub_100246714(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  void *v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint64_t v29;
  uint64_t v30;
  uint8_t *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  void (*v36)(char *, uint64_t);
  uint64_t v37;
  uint8_t *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  NSObject *v52;
  os_log_type_t v53;
  uint8_t *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  const char *v59;
  char *v60;
  uint64_t v61;
  NSObject *v62;
  os_log_type_t v63;
  uint64_t v64;
  void (*v65)(char *, uint64_t);
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  char *v78;
  char *v79;
  char *v80;
  uint64_t (*v81)(char *, uint64_t, uint64_t);
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88[3];

  v85 = a1;
  v5 = sub_10001A9A8(&qword_1010EF1D8);
  __chkstk_darwin(v5);
  v84 = (uint64_t)&v77 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v78 = (char *)&v77 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v9);
  v79 = (char *)&v77 - v12;
  v13 = __chkstk_darwin(v11);
  v80 = (char *)&v77 - v14;
  __chkstk_darwin(v13);
  v16 = (char *)&v77 - v15;
  v17 = type metadata accessor for DispatchPredicate(0);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17);
  v20 = (uint64_t *)((char *)&v77 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  v21 = *(void **)(a3 + OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_commandQueue);
  *v20 = v21;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v18 + 104))(v20, enum case for DispatchPredicate.onQueue(_:), v17);
  v22 = v21;
  LOBYTE(v21) = _dispatchPreconditionTest(_:)(v20);
  (*(void (**)(_QWORD *, uint64_t))(v18 + 8))(v20, v17);
  if ((v21 & 1) != 0)
  {
    v83 = a3;
    if (qword_1010E9D28 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_1010E9D28, sub_1005D439C);
LABEL_3:
  v23 = type metadata accessor for Logger(0);
  v24 = sub_10001A9E8(v23, (uint64_t)qword_1011B71E0);
  v25 = v85;
  v81 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 16);
  v26 = v81(v16, v85, v7);
  v82 = v24;
  v27 = Logger.logObject.getter(v26);
  v28 = static os_log_type_t.default.getter(v27);
  if (os_log_type_enabled(v27, v28))
  {
    v29 = swift_slowAlloc(12, -1);
    v77 = a2;
    v30 = v7;
    v31 = (uint8_t *)v29;
    v32 = swift_slowAlloc(32, -1);
    v88[0] = v32;
    *(_DWORD *)v31 = 136315138;
    v33 = sub_1001D4C18();
    v34 = dispatch thunk of CustomStringConvertible.description.getter(v30, v33);
    v87 = sub_100016940(v34, v35, v88);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v87, v88, v31 + 4, v31 + 12);
    swift_bridgeObjectRelease();
    v36 = *(void (**)(char *, uint64_t))(v8 + 8);
    v36(v16, v30);
    _os_log_impl((void *)&_mh_execute_header, v27, v28, "didCompletePlayingUnauthorizedSoundOnDevice %s", v31, 0xCu);
    swift_arrayDestroy(v32, 1, (char *)&type metadata for Any + 8);
    v37 = v32;
    v25 = v85;
    swift_slowDealloc(v37, -1, -1);
    v38 = v31;
    v7 = v30;
    a2 = v77;
    swift_slowDealloc(v38, -1, -1);
  }
  else
  {
    v36 = *(void (**)(char *, uint64_t))(v8 + 8);
    v36(v16, v7);
  }

  v39 = (uint64_t *)(v83 + OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_coordinators);
  swift_beginAccess(v83 + OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_coordinators, v88, 0, 0);
  v40 = *v39;
  v41 = v84;
  if (!*(_QWORD *)(v40 + 16))
  {
    v49 = type metadata accessor for SoundPlaybackManager.PlaybackCoordinator(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 56))(v41, 1, 1, v49);
    goto LABEL_12;
  }
  swift_bridgeObjectRetain(v40);
  v42 = sub_100003FB0(v25);
  if ((v43 & 1) != 0)
  {
    v44 = v42;
    v45 = *(_QWORD *)(v40 + 56);
    v46 = type metadata accessor for SoundPlaybackManager.PlaybackCoordinator(0);
    v47 = *(_QWORD *)(v46 - 8);
    v48 = v45 + *(_QWORD *)(v47 + 72) * v44;
    v41 = v84;
    sub_100246F94(v48, v84);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v47 + 56))(v41, 0, 1, v46);
  }
  else
  {
    v46 = type metadata accessor for SoundPlaybackManager.PlaybackCoordinator(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 56))(v41, 1, 1, v46);
  }
  swift_bridgeObjectRelease();
  type metadata accessor for SoundPlaybackManager.PlaybackCoordinator(0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 48))(v41, 1, v46) == 1)
  {
LABEL_12:
    sub_100004048(v41, &qword_1010EF1D8);
    v50 = v80;
    v51 = v81(v80, v25, v7);
    v52 = Logger.logObject.getter(v51);
    v53 = static os_log_type_t.error.getter(v52);
    if (os_log_type_enabled(v52, v53))
    {
      v54 = (uint8_t *)swift_slowAlloc(12, -1);
      v55 = swift_slowAlloc(32, -1);
      v87 = v55;
      *(_DWORD *)v54 = 136315138;
      v56 = sub_1001D4C18();
      v57 = dispatch thunk of CustomStringConvertible.description.getter(v7, v56);
      v86 = sub_100016940(v57, v58, &v87);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v86, &v87, v54 + 4, v54 + 12);
      swift_bridgeObjectRelease();
      v36(v50, v7);
      v59 = "didCompletePlayingUnauthorizedSoundOnDevice called with unknown device %s";
LABEL_14:
      _os_log_impl((void *)&_mh_execute_header, v52, v53, v59, v54, 0xCu);
      swift_arrayDestroy(v55, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v55, -1, -1);
      swift_slowDealloc(v54, -1, -1);
LABEL_21:

      return;
    }
    goto LABEL_20;
  }
  sub_100004048(v41, &qword_1010EF1D8);
  sub_1005E2F5C(v25, 0, 0);
  if (!a2)
  {
    v50 = v78;
    v73 = v81(v78, v25, v7);
    v52 = Logger.logObject.getter(v73);
    v53 = static os_log_type_t.default.getter(v52);
    if (os_log_type_enabled(v52, v53))
    {
      v54 = (uint8_t *)swift_slowAlloc(12, -1);
      v55 = swift_slowAlloc(32, -1);
      v87 = v55;
      *(_DWORD *)v54 = 136315138;
      v74 = sub_1001D4C18();
      v75 = dispatch thunk of CustomStringConvertible.description.getter(v7, v74);
      v86 = sub_100016940(v75, v76, &v87);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v86, &v87, v54 + 4, v54 + 12);
      swift_bridgeObjectRelease();
      v36(v50, v7);
      v59 = "didCompletePlayingUnauthorizedSoundOnDevice %s succeeded";
      goto LABEL_14;
    }
LABEL_20:
    v36(v50, v7);
    goto LABEL_21;
  }
  v60 = v79;
  v81(v79, v25, v7);
  swift_errorRetain(a2);
  swift_errorRetain(a2);
  v61 = swift_errorRetain(a2);
  v62 = Logger.logObject.getter(v61);
  v63 = static os_log_type_t.error.getter(v62);
  if (os_log_type_enabled(v62, v63))
  {
    v64 = swift_slowAlloc(22, -1);
    v65 = v36;
    v66 = swift_slowAlloc(64, -1);
    v87 = v66;
    *(_DWORD *)v64 = 136315394;
    v67 = sub_1001D4C18();
    v68 = dispatch thunk of CustomStringConvertible.description.getter(v7, v67);
    v86 = sub_100016940(v68, v69, &v87);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v86, &v87, v64 + 4, v64 + 12);
    swift_bridgeObjectRelease();
    v65(v60, v7);
    *(_WORD *)(v64 + 12) = 2080;
    v86 = a2;
    swift_errorRetain(a2);
    v70 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
    v71 = String.init<A>(describing:)(&v86, v70);
    v86 = sub_100016940(v71, v72, &v87);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v86, &v87, v64 + 14, v64 + 22);
    swift_bridgeObjectRelease();
    swift_errorRelease(a2);
    swift_errorRelease(a2);
    _os_log_impl((void *)&_mh_execute_header, v62, v63, "didCompletePlayingUnauthorizedSoundOnDevice %s failed due to %s", (uint8_t *)v64, 0x16u);
    swift_arrayDestroy(v66, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v66, -1, -1);
    swift_slowDealloc(v64, -1, -1);

    swift_errorRelease(a2);
  }
  else
  {
    swift_errorRelease(a2);
    v36(v60, v7);
    swift_errorRelease(a2);
    swift_errorRelease(a2);

  }
}

uint64_t sub_100246F94(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SoundPlaybackManager.PlaybackCoordinator(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t AllMacBeaconConfigs.normalBattery.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100246FE4(v1, a1);
}

uint64_t sub_100246FE4(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  uint64_t v4;

  v3 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v3;
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a2 + 48) = v4;
  swift_bridgeObjectRetain(v4);
  return a2;
}

uint64_t AllMacBeaconConfigs.lowBattery.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10024702C(v1 + 56, a1);
}

uint64_t sub_10024702C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001A9A8(&qword_1010F3B30);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

BOOL static MacBeaconConfig.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return *(double *)a1 == *(double *)a2
      && *(double *)(a1 + 8) == *(double *)(a2 + 8)
      && *(double *)(a1 + 16) == *(double *)(a2 + 16)
      && *(double *)(a1 + 24) == *(double *)(a2 + 24)
      && *(double *)(a1 + 32) == *(double *)(a2 + 32)
      && *(double *)(a1 + 40) == *(double *)(a2 + 40)
      && sub_100248904(*(_QWORD **)(a1 + 48), *(_QWORD **)(a2 + 48));
}

uint64_t sub_1002470EC()
{
  _BYTE *v0;

  if (*v0)
    return 0x6574746142776F6CLL;
  else
    return 0x61426C616D726F6ELL;
}

uint64_t sub_100247138@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10024A93C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10024715C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10024A86C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100247184(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10024A86C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t AllMacBeaconConfigs.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  __int128 v12;
  unint64_t v13;
  uint64_t v15;
  char v16;
  _OWORD v17[3];
  uint64_t v18;
  _BYTE v19[56];

  v3 = v1;
  v5 = sub_10001A9A8(&qword_1010F3B38);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  v11 = sub_10024A86C();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for AllMacBeaconConfigs.CodingKeys, &type metadata for AllMacBeaconConfigs.CodingKeys, v11, v9, v10);
  v12 = *(_OWORD *)(v3 + 16);
  v17[0] = *(_OWORD *)v3;
  v17[1] = v12;
  v17[2] = *(_OWORD *)(v3 + 32);
  v18 = *(_QWORD *)(v3 + 48);
  v16 = 0;
  v13 = sub_10024A8B0();
  KeyedEncodingContainer.encode<A>(_:forKey:)(v17, &v16, v5, &type metadata for MacBeaconConfig, v13);
  if (!v2)
  {
    sub_10024A8F4(v3 + 56, (uint64_t)v19);
    sub_10024A8F4((uint64_t)v19, (uint64_t)v17);
    v16 = 1;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v17, &v16, v5, &type metadata for MacBeaconConfig, v13);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

__n128 AllMacBeaconConfigs.init(from:)@<Q0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __n128 result;
  __int128 v5;
  __int128 v6;
  _OWORD v7[7];

  sub_10024AA5C(a1, (uint64_t)v7);
  if (!v2)
  {
    v5 = v7[5];
    *(_OWORD *)(a2 + 64) = v7[4];
    *(_OWORD *)(a2 + 80) = v5;
    *(_OWORD *)(a2 + 96) = v7[6];
    v6 = v7[1];
    *(_OWORD *)a2 = v7[0];
    *(_OWORD *)(a2 + 16) = v6;
    result = (__n128)v7[3];
    *(_OWORD *)(a2 + 32) = v7[2];
    *(__n128 *)(a2 + 48) = result;
  }
  return result;
}

uint64_t sub_100247360(_QWORD *a1)
{
  return AllMacBeaconConfigs.encode(to:)(a1);
}

uint64_t sub_1002473A8(_OWORD *a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _OWORD v13[7];
  _OWORD v14[7];

  v2 = a1[5];
  v13[4] = a1[4];
  v13[5] = v2;
  v3 = a1[6];
  v4 = a1[1];
  v13[0] = *a1;
  v13[1] = v4;
  v5 = a1[3];
  v13[2] = a1[2];
  v13[3] = v5;
  v6 = *a2;
  v7 = a2[1];
  v13[6] = v3;
  v14[0] = v6;
  v8 = a2[2];
  v9 = a2[3];
  v10 = a2[6];
  v14[5] = a2[5];
  v14[6] = v10;
  v11 = a2[4];
  v14[3] = v9;
  v14[4] = v11;
  v14[1] = v7;
  v14[2] = v8;
  return _s12searchpartyd19AllMacBeaconConfigsV23__derived_struct_equalsySbAC_ACtFZ_0((uint64_t)v13, (uint64_t)v14) & 1;
}

double MacBeaconConfig.slowRollAdvertisementDuration.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 24);
}

double MacBeaconConfig.slowRollNoAdvertisementDuration.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 32);
}

double MacBeaconConfig.noAdvertisementDurationDecayFactor.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 40);
}

uint64_t MacBeaconConfig.postInitialDayAdvertisementTimes.getter()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + 48));
}

uint64_t sub_10024742C(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_100247468 + 4 * byte_100E2E5D0[a1]))(0xD00000000000001BLL, 0x8000000100EC2E40);
}

unint64_t sub_100247468()
{
  return 0xD000000000000016;
}

uint64_t sub_1002474A0()
{
  uint64_t v0;

  return v0 + 15;
}

uint64_t sub_1002474B0()
{
  uint64_t v0;

  return v0 + 20;
}

void sub_1002474C0()
{
  JUMPOUT(0x1002474CCLL);
}

uint64_t sub_1002474D8(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_100247514 + 4 * byte_100E2E5D7[a1]))(0xD00000000000001BLL, 0x8000000100EC2E40);
}

unint64_t sub_100247514()
{
  return 0xD000000000000016;
}

uint64_t sub_10024754C()
{
  uint64_t v0;

  return v0 + 15;
}

uint64_t sub_10024755C()
{
  uint64_t v0;

  return v0 + 20;
}

void sub_10024756C()
{
  JUMPOUT(0x100247578);
}

void sub_100247584(char *a1)
{
  sub_1005145A8(*a1);
}

void sub_100247590()
{
  char *v0;

  sub_100516D38(0, *v0);
}

void sub_10024759C(uint64_t a1)
{
  char *v1;

  sub_100515D8C(a1, *v1);
}

void sub_1002475A4(uint64_t a1)
{
  char *v1;

  sub_100516D38(a1, *v1);
}

unint64_t sub_1002475AC@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_10024AC74(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1002475D8@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_10024742C(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_100247600()
{
  unsigned __int8 *v0;

  return sub_1002474D8(*v0);
}

unint64_t sub_100247608@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_10024AC74(a1);
  *a2 = result;
  return result;
}

uint64_t sub_10024762C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10024AF38();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100247654(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10024AF38();
  return CodingKey.debugDescription.getter(a1, v2);
}

void __swiftcall MacBeaconConfig.init(initialNoBeaconDuration:fastRollAdvertisementDuration:fastRollAdvertisementInterval:slowRollAdvertisementDuration:slowRollNoAdvertisementDuration:noAdvertisementDurationDecayFactor:postInitialDayAdvertisementTimes:)(searchpartyd::MacBeaconConfig *__return_ptr retstr, Swift::Double initialNoBeaconDuration, Swift::Double fastRollAdvertisementDuration, Swift::Double fastRollAdvertisementInterval, Swift::Double slowRollAdvertisementDuration, Swift::Double slowRollNoAdvertisementDuration, Swift::Double noAdvertisementDurationDecayFactor, Swift::OpaquePointer postInitialDayAdvertisementTimes)
{
  retstr->initialNoBeaconDuration = initialNoBeaconDuration;
  retstr->fastRollAdvertisementDuration = fastRollAdvertisementDuration;
  retstr->fastRollAdvertisementInterval = fastRollAdvertisementInterval;
  retstr->slowRollAdvertisementDuration = slowRollAdvertisementDuration;
  retstr->slowRollNoAdvertisementDuration = slowRollNoAdvertisementDuration;
  retstr->noAdvertisementDurationDecayFactor = noAdvertisementDurationDecayFactor;
  retstr->postInitialDayAdvertisementTimes = postInitialDayAdvertisementTimes;
}

double MacBeaconConfig.init(from:)@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  _OWORD v6[2];
  __int128 v7;
  uint64_t v8;

  sub_10024ACBC(a1, v6);
  if (!v2)
  {
    v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    result = *(double *)&v7;
    *(_OWORD *)(a2 + 32) = v7;
    *(_QWORD *)(a2 + 48) = v8;
  }
  return result;
}

uint64_t MacBeaconConfig.encode(to:)(_QWORD *a1)
{
  double *v1;
  uint64_t v2;
  double *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  char v22;
  uint64_t v23;
  char v24;
  char v25;
  char v26;
  char v27;
  char v28;
  char v29;

  v3 = v1;
  v5 = sub_10001A9A8(&qword_1010F3B50);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  v11 = sub_10024AF38();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for MacBeaconConfig.CodingKeys, &type metadata for MacBeaconConfig.CodingKeys, v11, v9, v10);
  v12 = *v3;
  v29 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(&v29, v5, v12);
  if (!v2)
  {
    v13 = v3[1];
    v28 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(&v28, v5, v13);
    v14 = v3[2];
    v27 = 2;
    KeyedEncodingContainer.encode(_:forKey:)(&v27, v5, v14);
    v15 = v3[3];
    v26 = 3;
    KeyedEncodingContainer.encode(_:forKey:)(&v26, v5, v15);
    v16 = v3[4];
    v25 = 4;
    KeyedEncodingContainer.encode(_:forKey:)(&v25, v5, v16);
    v17 = v3[5];
    v24 = 5;
    KeyedEncodingContainer.encode(_:forKey:)(&v24, v5, v17);
    v23 = *((_QWORD *)v3 + 6);
    v22 = 6;
    v18 = sub_10001A9A8(&qword_1010ED5A0);
    v19 = sub_10024B7D0(&qword_1010F3B60, (uint64_t)&protocol witness table for Int, (const char *)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v23, &v22, v5, v18, v19);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1002478F4(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  char v10;
  uint64_t result;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *i;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;

  v2 = a1[2];
  if (v2 != a2[2])
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  v5 = a1[4];
  v6 = a1[5];
  v7 = a2[4];
  v8 = a2[5];
  v9 = v5 == v7 && v6 == v8;
  if (v9 || (v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v6, v7, v8, 0), result = 0, (v10 & 1) != 0))
  {
    v12 = v2 - 1;
    if (!v12)
      return 1;
    v13 = a2 + 7;
    for (i = a1 + 7; ; i += 2)
    {
      v15 = *(i - 1);
      v16 = *i;
      v17 = *(v13 - 1);
      v18 = *v13;
      v19 = v15 == v17 && v16 == v18;
      if (!v19 && (_stringCompareWithSmolCheck(_:_:expecting:)(v15, v16, v17, v18, 0) & 1) == 0)
        break;
      v13 += 2;
      if (!--v12)
        return 1;
    }
    return 0;
  }
  return result;
}

uint64_t sub_1002479B8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 == *(_QWORD *)(a2 + 16))
  {
    if (!v2 || a1 == a2)
      return 1;
    if (*(unsigned __int8 *)(a1 + 32) == *(unsigned __int8 *)(a2 + 32))
      __asm { BR              X10 }
  }
  return 0;
}

uint64_t sub_1002483C0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (v2 && a1 != a2)
  {
    v3 = 0;
    v19 = a1;
    v20 = a2;
    while (1)
    {
      v4 = a1 + v3;
      v5 = a2 + v3;
      if (*(unsigned __int8 *)(a1 + v3 + 32) != *(unsigned __int8 *)(a2 + v3 + 32))
        break;
      v6 = *(_QWORD *)(v4 + 40);
      v7 = *(_QWORD *)(v4 + 48);
      v8 = *(_QWORD *)(v4 + 56);
      v9 = *(_QWORD *)(v4 + 64);
      v10 = *(_QWORD *)(v4 + 80);
      v11 = *(unsigned __int8 *)(v4 + 88);
      v12 = *(_QWORD *)(v5 + 40);
      v13 = *(_QWORD *)(v5 + 48);
      v14 = *(_QWORD *)(v5 + 56);
      v15 = *(_QWORD *)(v5 + 64);
      v16 = *(_QWORD *)(v5 + 80);
      v21 = *(_QWORD *)(v5 + 72);
      v22 = *(_QWORD *)(v4 + 72);
      v17 = *(unsigned __int8 *)(v5 + 88);
      if ((v6 != v12 || v7 != v13) && (_stringCompareWithSmolCheck(_:_:expecting:)(v6, v7, v12, v13, 0) & 1) == 0)
        break;
      if ((v8 != v14 || v9 != v15) && (_stringCompareWithSmolCheck(_:_:expecting:)(v8, v9, v14, v15, 0) & 1) == 0)
        break;
      if (v10)
      {
        if (!v16
          || (v22 != v21 || v10 != v16)
          && (_stringCompareWithSmolCheck(_:_:expecting:)(v22, v10, v21, v16, 0) & 1) == 0)
        {
          return 0;
        }
      }
      else if (v16)
      {
        return 0;
      }
      if (v11 == 2)
      {
        if (v17 != 2)
          return 0;
      }
      else
      {
        result = 0;
        if (v17 == 2 || ((((v11 & 1) == 0) ^ v17) & 1) == 0)
          return result;
      }
      v3 += 64;
      --v2;
      a1 = v19;
      a2 = v20;
      if (!v2)
        return 1;
    }
    return 0;
  }
  return 1;
}

uint64_t sub_100248530(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double *v7;
  uint64_t v8;
  uint64_t v9;
  double *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  BOOL v17;
  uint64_t v19;

  v4 = type metadata accessor for WildModeTrackingLocation(0);
  v5 = __chkstk_darwin(v4);
  v7 = (double *)((char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v5);
  v10 = (double *)((char *)&v19 - v9);
  v11 = *(_QWORD *)(a1 + 16);
  if (v11 != *(_QWORD *)(a2 + 16))
  {
LABEL_16:
    v15 = 0;
    return v15 & 1;
  }
  if (v11 && a1 != a2)
  {
    v12 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
    v13 = *(_QWORD *)(v8 + 72);
    v14 = v11 - 1;
    while (1)
    {
      sub_10005972C(a1 + v12, (uint64_t)v10, type metadata accessor for WildModeTrackingLocation);
      sub_10005972C(a2 + v12, (uint64_t)v7, type metadata accessor for WildModeTrackingLocation);
      if (*v10 != *v7 || v10[1] != v7[1] || v10[2] != v7[2])
        break;
      v15 = static Date.== infix(_:_:)((char *)v10 + *(int *)(v4 + 28), (char *)v7 + *(int *)(v4 + 28));
      sub_1000126B0((uint64_t)v7, type metadata accessor for WildModeTrackingLocation);
      sub_1000126B0((uint64_t)v10, type metadata accessor for WildModeTrackingLocation);
      v17 = v14-- != 0;
      if ((v15 & 1) != 0)
      {
        v12 += v13;
        if (v17)
          continue;
      }
      return v15 & 1;
    }
    sub_1000126B0((uint64_t)v7, type metadata accessor for WildModeTrackingLocation);
    sub_1000126B0((uint64_t)v10, type metadata accessor for WildModeTrackingLocation);
    goto LABEL_16;
  }
  v15 = 1;
  return v15 & 1;
}

uint64_t sub_1002486C4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  BOOL v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  BOOL v28;
  uint64_t v29;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (v2 && a1 != a2)
  {
    v3 = 0;
    v29 = a1 + 32;
    v4 = a2 + 32;
    while (1)
    {
      v6 = (_QWORD *)(v29 + 32 * v3);
      v7 = (_QWORD *)(v4 + 32 * v3);
      if (*v6 != *v7)
        return 0;
      v8 = v6[1];
      v9 = v6[2];
      v10 = v6[3];
      v11 = v7[1];
      v12 = v7[2];
      v13 = v7[3];
      v14 = v8 == v11 && v9 == v12;
      if (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)(v8, v9, v11, v12, 0) & 1) == 0)
        return 0;
      v15 = *(_QWORD *)(v10 + 16);
      if (v15 != *(_QWORD *)(v13 + 16))
        return 0;
      if (v15)
        v16 = v10 == v13;
      else
        v16 = 1;
      if (!v16)
      {
        v17 = (uint64_t *)(v13 + 64);
        v18 = (uint64_t *)(v10 + 64);
        while (*(v18 - 4) == *(v17 - 4))
        {
          v19 = *(v18 - 3);
          v20 = *(v18 - 2);
          v21 = *(v18 - 1);
          v22 = *v18;
          v23 = *(v17 - 3);
          v24 = *(v17 - 2);
          v25 = *(v17 - 1);
          v26 = *v17;
          v27 = v19 == v23 && v20 == v24;
          if (!v27 && (_stringCompareWithSmolCheck(_:_:expecting:)(v19, v20, v23, v24, 0) & 1) == 0)
            break;
          v28 = v21 == v25 && v22 == v26;
          if (!v28 && (_stringCompareWithSmolCheck(_:_:expecting:)(v21, v22, v25, v26, 0) & 1) == 0)
            break;
          v17 += 5;
          v18 += 5;
          if (!--v15)
            goto LABEL_5;
        }
        return 0;
      }
LABEL_5:
      ++v3;
      result = 1;
      if (v3 == v2)
        return result;
    }
  }
  return 1;
}

uint64_t sub_100248830(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  char v13;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (v2 && a1 != a2)
  {
    v3 = (_QWORD *)(a1 + 32);
    v4 = (uint64_t *)(a2 + 32);
    do
    {
      v5 = *v4;
      v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v3);
      v8 = v7;
      v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
      if (v6 == v9 && v8 == v10)
      {
        swift_bridgeObjectRelease_n(v8, 2);
      }
      else
      {
        v12 = v10;
        v13 = _stringCompareWithSmolCheck(_:_:expecting:)(v6, v8, v9, v10, 0);
        swift_bridgeObjectRelease(v8);
        swift_bridgeObjectRelease(v12);
        if ((v13 & 1) == 0)
          return 0;
      }
      ++v3;
      ++v4;
      --v2;
    }
    while (v2);
  }
  return 1;
}

BOOL sub_100248904(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  _BOOL8 result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = a1[2];
  if (v2 != a2[2])
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  if (a1[4] != a2[4])
    return 0;
  v3 = a1 + 5;
  v4 = a2 + 5;
  v5 = v2 - 1;
  do
  {
    result = v5 == 0;
    if (!v5)
      break;
    v8 = *v3++;
    v7 = v8;
    v9 = *v4++;
    --v5;
  }
  while (v7 == v9);
  return result;
}

uint64_t sub_100248970(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *i;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  BOOL v14;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (v2 && a1 != a2)
  {
    v3 = (uint64_t *)(a2 + 64);
    for (i = (uint64_t *)(a1 + 64); *(i - 4) == *(v3 - 4); i += 5)
    {
      v5 = *(i - 3);
      v6 = *(i - 2);
      v7 = *(i - 1);
      v8 = *i;
      v9 = *(v3 - 3);
      v10 = *(v3 - 2);
      v11 = *(v3 - 1);
      v12 = *v3;
      v13 = v5 == v9 && v6 == v10;
      if (!v13 && (_stringCompareWithSmolCheck(_:_:expecting:)(v5, v6, v9, v10, 0) & 1) == 0)
        break;
      v14 = v7 == v11 && v8 == v12;
      if (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)(v7, v8, v11, v12, 0) & 1) == 0)
        break;
      v3 += 5;
      if (!--v2)
        return 1;
    }
    return 0;
  }
  return 1;
}

uint64_t sub_100248A44(uint64_t a1, uint64_t a2)
{
  return sub_10024A2E0(a1, a2, type metadata accessor for RawSearchResult, (uint64_t (*)(char *, char *))sub_100964A3C);
}

uint64_t sub_100248A58(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 == *(_QWORD *)(a2 + 16))
  {
    if (!v2 || a1 == a2)
      return 1;
    if (*(_QWORD *)(a1 + 32) == *(_QWORD *)(a2 + 32))
      __asm { BR              X10 }
  }
  return 0;
}

uint64_t sub_10024A2CC(uint64_t a1, uint64_t a2)
{
  return sub_10024A2E0(a1, a2, type metadata accessor for DefaultConfigurationLayer, (uint64_t (*)(char *, char *))sub_1006C5A4C);
}

uint64_t sub_10024A2E0(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD), uint64_t (*a4)(char *, char *))
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  BOOL v21;
  uint64_t v23;

  v8 = a3(0);
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v14 = (char *)&v23 - v13;
  v15 = *(_QWORD *)(a1 + 16);
  if (v15 == *(_QWORD *)(a2 + 16))
  {
    if (!v15 || a1 == a2)
    {
      v19 = 1;
    }
    else
    {
      v16 = (*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
      v17 = *(_QWORD *)(v12 + 72);
      v18 = v15 - 1;
      do
      {
        sub_10005972C(a1 + v16, (uint64_t)v14, a3);
        sub_10005972C(a2 + v16, (uint64_t)v11, a3);
        v19 = a4(v14, v11);
        sub_1000126B0((uint64_t)v11, a3);
        sub_1000126B0((uint64_t)v14, a3);
        v21 = v18-- != 0;
        if ((v19 & 1) == 0)
          break;
        v16 += v17;
      }
      while (v21);
    }
  }
  else
  {
    v19 = 0;
  }
  return v19 & 1;
}

uint64_t sub_10024A41C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  void (*v13)(char *, unint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  void (*v19)(char *, uint64_t);
  BOOL v21;
  uint64_t v23;
  uint64_t v24;

  v4 = type metadata accessor for UUID(0);
  v5 = __chkstk_darwin(v4);
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v10 = (char *)&v23 - v9;
  v11 = *(_QWORD *)(a1 + 16);
  if (v11 == *(_QWORD *)(a2 + 16))
  {
    if (!v11 || a1 == a2)
    {
      v18 = 1;
    }
    else
    {
      v12 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
      v23 = *(_QWORD *)(v8 + 72);
      v24 = v8;
      v13 = *(void (**)(char *, unint64_t, uint64_t))(v8 + 16);
      v14 = v11 - 1;
      do
      {
        v15 = a1;
        v13(v10, a1 + v12, v4);
        v16 = a2;
        v13(v7, a2 + v12, v4);
        v17 = sub_10024B788();
        v18 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v7, v4, v17);
        v19 = *(void (**)(char *, uint64_t))(v24 + 8);
        v19(v7, v4);
        v19(v10, v4);
        v21 = v14-- != 0;
        if ((v18 & 1) == 0)
          break;
        v12 += v23;
        a2 = v16;
        a1 = v15;
      }
      while (v21);
    }
  }
  else
  {
    v18 = 0;
  }
  return v18 & 1;
}

id MacBeaconConfig.xpcObject()()
{
  double *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  id v14;
  Class isa;
  id v16;

  v1 = *((_QWORD *)v0 + 6);
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    sub_10024AF7C((uint64_t)v0);
    specialized ContiguousArray.reserveCapacity(_:)(v2);
    v3 = (uint64_t *)(v1 + 32);
    do
    {
      v4 = *v3++;
      v5 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithInteger:", v4);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v5);
      v6 = _swiftEmptyArrayStorage[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v6);
      v7 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v6, v5);
      specialized ContiguousArray._endMutation()(v7);
      --v2;
    }
    while (v2);
    sub_10024AFA4((uint64_t)v0);
  }
  v8 = *v0;
  v9 = v0[1];
  v10 = v0[2];
  v11 = v0[3];
  v12 = v0[4];
  v13 = v0[5];
  v14 = objc_allocWithZone((Class)SPMacBeaconConfig);
  sub_10024AFCC();
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v16 = objc_msgSend(v14, "initWithInitialNoBeaconDuration:fastRollAdvertisementDuration:fastRollAdvertisementInterval:slowRollAdvertisementDuration:slowRollNoAdvertisementDuration:noAdvertisementDurationDecayFactor:postInitialDayAdvertisementTimes:", isa, v8, v9, v10, v11, v12, v13);

  return v16;
}

uint64_t sub_10024A6EC(_QWORD *a1)
{
  return MacBeaconConfig.encode(to:)(a1);
}

BOOL sub_10024A700(uint64_t a1, uint64_t a2)
{
  return (vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_f64(*(float64x2_t *)a1, *(float64x2_t *)a2), (int32x4_t)vceqq_f64(*(float64x2_t *)(a1 + 16), *(float64x2_t *)(a2 + 16)))), 0xFuLL))) & 1) != 0&& *(double *)(a1 + 32) == *(double *)(a2 + 32)&& *(double *)(a1 + 40) == *(double *)(a2 + 40)&& sub_100248904(*(_QWORD **)(a1 + 48), *(_QWORD **)(a2 + 48));
}

uint64_t _s12searchpartyd19AllMacBeaconConfigsV23__derived_struct_equalsySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  _QWORD *v5;
  _QWORD *v6;

  if (*(double *)a1 != *(double *)a2)
    return 0;
  result = 0;
  if ((vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_f64(*(float64x2_t *)(a1 + 8), *(float64x2_t *)(a2 + 8)), (int32x4_t)vceqq_f64(*(float64x2_t *)(a1 + 24), *(float64x2_t *)(a2 + 24)))), 0xFuLL))) & 1) != 0&& *(double *)(a1 + 40) == *(double *)(a2 + 40))
  {
    if (sub_100248904(*(_QWORD **)(a1 + 48), *(_QWORD **)(a2 + 48)))
    {
      v5 = *(_QWORD **)(a1 + 104);
      v6 = *(_QWORD **)(a2 + 104);
      if (v5)
      {
        if (v6
          && (vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_f64(*(float64x2_t *)(a1 + 56), *(float64x2_t *)(a2 + 56)), (int32x4_t)vceqq_f64(*(float64x2_t *)(a1 + 72), *(float64x2_t *)(a2 + 72)))), 0xFuLL))) & 1) != 0&& *(double *)(a1 + 88) == *(double *)(a2 + 88)&& *(double *)(a1 + 96) == *(double *)(a2 + 96)&& sub_100248904(v5, v6))
        {
          return 1;
        }
      }
      else if (!v6)
      {
        return 1;
      }
    }
    return 0;
  }
  return result;
}

unint64_t sub_10024A86C()
{
  unint64_t result;

  result = qword_1010F3B40;
  if (!qword_1010F3B40)
  {
    result = swift_getWitnessTable("q:#", &type metadata for AllMacBeaconConfigs.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F3B40);
  }
  return result;
}

unint64_t sub_10024A8B0()
{
  unint64_t result;

  result = qword_1010F3B48;
  if (!qword_1010F3B48)
  {
    result = swift_getWitnessTable("m<#", &type metadata for MacBeaconConfig);
    atomic_store(result, (unint64_t *)&qword_1010F3B48);
  }
  return result;
}

uint64_t sub_10024A8F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10001A9A8(&qword_1010F3B30);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10024A93C(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 0x61426C616D726F6ELL && a2 == 0xED00007972657474)
  {
    v5 = 0xED00007972657474;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x61426C616D726F6ELL, 0xED00007972657474, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6574746142776F6CLL && a2 == 0xEA00000000007972)
  {
    swift_bridgeObjectRelease(0xEA00000000007972);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6574746142776F6CLL, 0xEA00000000007972, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_10024AA5C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;

  v5 = sub_10001A9A8(&qword_1010F3BA8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  v11 = sub_10024A86C();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for AllMacBeaconConfigs.CodingKeys, &type metadata for AllMacBeaconConfigs.CodingKeys, v11, v9, v10);
  if (v2)
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  v29 = 0;
  v12 = sub_10024B830();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v24, &type metadata for MacBeaconConfig, &v29, v5, &type metadata for MacBeaconConfig, v12);
  v13 = v24;
  v14 = v25;
  v15 = v26;
  v16 = v27;
  v17 = v28;
  v29 = 1;
  swift_bridgeObjectRetain(v28);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&type metadata for MacBeaconConfig, &v29, v5, &type metadata for MacBeaconConfig, v12);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v22 = v25;
  v23 = v24;
  v18 = v26;
  v19 = v27;
  v20 = v28;
  swift_bridgeObjectRetain(v28);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_OWORD *)a2 = v13;
  *(_OWORD *)(a2 + 16) = v14;
  *(_QWORD *)(a2 + 32) = v15;
  *(_QWORD *)(a2 + 40) = v16;
  *(_QWORD *)(a2 + 48) = v17;
  *(_OWORD *)(a2 + 56) = v23;
  *(_OWORD *)(a2 + 72) = v22;
  *(_QWORD *)(a2 + 88) = v18;
  *(_QWORD *)(a2 + 96) = v19;
  *(_QWORD *)(a2 + 104) = v20;
  return result;
}

unint64_t sub_10024AC74(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_101049728, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 7)
    return 7;
  else
    return v3;
}

uint64_t sub_10024ACBC@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t result;
  uint64_t v28;
  uint64_t v29;
  char v30;
  char v31;
  char v32;
  char v33;
  char v34;
  char v35;
  char v36;

  v5 = sub_10001A9A8(&qword_1010F3B98);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  v11 = sub_10024AF38();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for MacBeaconConfig.CodingKeys, &type metadata for MacBeaconConfig.CodingKeys, v11, v9, v10);
  if (v2)
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  v36 = 0;
  KeyedDecodingContainer.decode(_:forKey:)(&v36, v5);
  v13 = v12;
  v35 = 1;
  KeyedDecodingContainer.decode(_:forKey:)(&v35, v5);
  v15 = v14;
  v34 = 2;
  KeyedDecodingContainer.decode(_:forKey:)(&v34, v5);
  v17 = v16;
  v33 = 3;
  KeyedDecodingContainer.decode(_:forKey:)(&v33, v5);
  v19 = v18;
  v32 = 4;
  KeyedDecodingContainer.decode(_:forKey:)(&v32, v5);
  v21 = v20;
  v31 = 5;
  KeyedDecodingContainer.decode(_:forKey:)(&v31, v5);
  v23 = v22;
  v24 = sub_10001A9A8(&qword_1010ED5A0);
  v30 = 6;
  v25 = sub_10024B7D0(&qword_1010F3BA0, (uint64_t)&protocol witness table for Int, (const char *)&protocol conformance descriptor for <A> [A]);
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v29, v24, &v30, v5, v24, v25);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v26 = v29;
  result = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  *a2 = v13;
  a2[1] = v15;
  a2[2] = v17;
  a2[3] = v19;
  a2[4] = v21;
  a2[5] = v23;
  a2[6] = v26;
  return result;
}

unint64_t sub_10024AF38()
{
  unint64_t result;

  result = qword_1010F3B58;
  if (!qword_1010F3B58)
  {
    result = swift_getWitnessTable(byte_100E2E8C8, &type metadata for MacBeaconConfig.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F3B58);
  }
  return result;
}

uint64_t sub_10024AF7C(uint64_t a1)
{
  swift_bridgeObjectRetain(*(_QWORD *)(a1 + 48));
  return a1;
}

uint64_t sub_10024AFA4(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 48));
  return a1;
}

unint64_t sub_10024AFCC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_101103A90;
  if (!qword_101103A90)
  {
    v1 = objc_opt_self(NSNumber);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_101103A90);
  }
  return result;
}

uint64_t destroy for AllMacBeaconConfigs(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 48));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 104));
}

uint64_t initializeWithCopy for AllMacBeaconConfigs(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  v4 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  v5 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 104) = v5;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  return a1;
}

_QWORD *assignWithCopy for AllMacBeaconConfigs(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  a1[5] = a2[5];
  v4 = a2[6];
  v5 = a1[6];
  a1[6] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[7] = a2[7];
  a1[8] = a2[8];
  a1[9] = a2[9];
  a1[10] = a2[10];
  a1[11] = a2[11];
  a1[12] = a2[12];
  v6 = a2[13];
  v7 = a1[13];
  a1[13] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

__n128 initializeWithTake for AllMacBeaconConfigs(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __n128 result;
  __int128 v5;
  __int128 v6;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  result = (__n128)a2[3];
  v5 = a2[4];
  v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(__n128 *)(a1 + 48) = result;
  *(_OWORD *)(a1 + 64) = v5;
  return result;
}

uint64_t assignWithTake for AllMacBeaconConfigs(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  v5 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRelease(v5);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  v6 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  swift_bridgeObjectRelease(v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for AllMacBeaconConfigs(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 112))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 48);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AllMacBeaconConfigs(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 112) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 48) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 112) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AllMacBeaconConfigs()
{
  return &type metadata for AllMacBeaconConfigs;
}

uint64_t destroy for MacBeaconConfig(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 48));
}

uint64_t initializeWithCopy for MacBeaconConfig(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  uint64_t v4;

  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  v4 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 48) = v4;
  swift_bridgeObjectRetain(v4);
  return a1;
}

_QWORD *assignWithCopy for MacBeaconConfig(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  a1[5] = a2[5];
  v3 = a2[6];
  v4 = a1[6];
  a1[6] = v3;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v4);
  return a1;
}

__n128 initializeWithTake for MacBeaconConfig(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for MacBeaconConfig(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  uint64_t v4;

  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  v4 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for MacBeaconConfig(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 56))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 48);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MacBeaconConfig(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 48) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 56) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for MacBeaconConfig()
{
  return &type metadata for MacBeaconConfig;
}

uint64_t storeEnumTagSinglePayload for MacBeaconConfig.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_10024B48C + 4 * byte_100E2E5E3[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_10024B4C0 + 4 * byte_100E2E5DE[v4]))();
}

uint64_t sub_10024B4C0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10024B4C8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10024B4D0);
  return result;
}

uint64_t sub_10024B4DC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10024B4E4);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_10024B4E8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10024B4F0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MacBeaconConfig.CodingKeys()
{
  return &type metadata for MacBeaconConfig.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for AllMacBeaconConfigs.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_10024B558 + 4 * byte_100E2E5ED[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10024B58C + 4 * byte_100E2E5E8[v4]))();
}

uint64_t sub_10024B58C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10024B594(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10024B59CLL);
  return result;
}

uint64_t sub_10024B5A8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10024B5B0);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_10024B5B4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10024B5BC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AllMacBeaconConfigs.CodingKeys()
{
  return &type metadata for AllMacBeaconConfigs.CodingKeys;
}

unint64_t sub_10024B5DC()
{
  unint64_t result;

  result = qword_1010F3B68;
  if (!qword_1010F3B68)
  {
    result = swift_getWitnessTable("a;#", &type metadata for AllMacBeaconConfigs.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F3B68);
  }
  return result;
}

unint64_t sub_10024B624()
{
  unint64_t result;

  result = qword_1010F3B70;
  if (!qword_1010F3B70)
  {
    result = swift_getWitnessTable("q:#", &type metadata for MacBeaconConfig.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F3B70);
  }
  return result;
}

unint64_t sub_10024B66C()
{
  unint64_t result;

  result = qword_1010F3B78;
  if (!qword_1010F3B78)
  {
    result = swift_getWitnessTable("I;#", &type metadata for MacBeaconConfig.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F3B78);
  }
  return result;
}

unint64_t sub_10024B6B4()
{
  unint64_t result;

  result = qword_1010F3B80;
  if (!qword_1010F3B80)
  {
    result = swift_getWitnessTable("1;#", &type metadata for MacBeaconConfig.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F3B80);
  }
  return result;
}

unint64_t sub_10024B6FC()
{
  unint64_t result;

  result = qword_1010F3B88;
  if (!qword_1010F3B88)
  {
    result = swift_getWitnessTable(byte_100E2E720, &type metadata for AllMacBeaconConfigs.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F3B88);
  }
  return result;
}

unint64_t sub_10024B744()
{
  unint64_t result;

  result = qword_1010F3B90;
  if (!qword_1010F3B90)
  {
    result = swift_getWitnessTable(byte_100E2E748, &type metadata for AllMacBeaconConfigs.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F3B90);
  }
  return result;
}

unint64_t sub_10024B788()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1010EE520;
  if (!qword_1010EE520)
  {
    v1 = type metadata accessor for UUID(255);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for UUID, v1);
    atomic_store(result, &qword_1010EE520);
  }
  return result;
}

uint64_t sub_10024B7D0(unint64_t *a1, uint64_t a2, const char *a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v7 = sub_10001F784(&qword_1010ED5A0);
    v8 = a2;
    result = swift_getWitnessTable(a3, v7, &v8);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10024B830()
{
  unint64_t result;

  result = qword_1010F3BB0;
  if (!qword_1010F3BB0)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for MacBeaconConfig, &type metadata for MacBeaconConfig);
    atomic_store(result, (unint64_t *)&qword_1010F3BB0);
  }
  return result;
}

void sub_10024B874()
{
  const void *v0;
  char *v1;
  _BYTE v2[264];
  _BYTE v3[264];
  _BYTE v4[272];

  sub_100057230(v0, v2);
  sub_100057230(v2, v4);
  sub_100057230(v0, v3);
  v1 = (char *)sub_10024B8E0 + 4 * byte_100E2E970[sub_10005784C((uint64_t)v3)];
  __asm { BR              X10 }
}

uint64_t sub_10024B8E0()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  __int128 v9;
  _BYTE v10[528];
  uint64_t v11;
  uint64_t v12;

  v1 = sub_10005A21C((uint64_t)&v11);
  v9 = *(_OWORD *)v1;
  v2 = *(_QWORD *)(v1 + 16);
  v3 = *(_QWORD *)(v1 + 24);
  v0[3] = (uint64_t)&type metadata for AirPodsSendBeaconGroupDataCommandPayload;
  v0[4] = sub_10005A2C0();
  v4 = swift_allocObject(&unk_101062470, 48, 7);
  *v0 = v4;
  *(_OWORD *)(v4 + 16) = v9;
  *(_QWORD *)(v4 + 32) = v2;
  *(_QWORD *)(v4 + 40) = v3;
  sub_100057230(&v12, v10);
  v5 = (uint64_t *)sub_10005A21C((uint64_t)v10);
  v6 = v5[2];
  v7 = v5[3];
  sub_10001BBBC(*v5, v5[1]);
  return sub_10001BBBC(v6, v7);
}

uint64_t sub_10024BCFC()
{
  uint64_t v0;

  sub_10001BC14(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
  sub_10001BC14(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
  sub_10001BC14(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56));
  sub_10001BC14(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72));
  return swift_deallocObject(v0, 80, 7);
}

uint64_t sub_10024BD38()
{
  uint64_t v0;

  sub_10001BC14(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
  sub_10001BC14(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
  sub_10001BC14(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56));
  sub_10001BC14(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72));
  sub_10001BC14(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88));
  sub_10001BC14(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104));
  sub_10001BC14(*(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 120));
  return swift_deallocObject(v0, 128, 7);
}

uint64_t sub_10024BD8C()
{
  uint64_t v0;

  sub_10001BC14(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
  sub_10001BC14(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
  sub_10001BC14(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56));
  sub_10001BC14(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72));
  sub_10001BC14(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88));
  sub_10001BC14(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104));
  sub_10001BC14(*(_QWORD *)(v0 + 112), *(_QWORD *)(v0 + 120));
  sub_10001BC14(*(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 136));
  sub_10001BC14(*(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 152));
  sub_10001BC14(*(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 168));
  sub_10001BC14(*(_QWORD *)(v0 + 176), *(_QWORD *)(v0 + 184));
  sub_10001BC14(*(_QWORD *)(v0 + 192), *(_QWORD *)(v0 + 200));
  sub_10001BC14(*(_QWORD *)(v0 + 208), *(_QWORD *)(v0 + 216));
  sub_10001BC14(*(_QWORD *)(v0 + 232), *(_QWORD *)(v0 + 240));
  sub_10001BC14(*(_QWORD *)(v0 + 248), *(_QWORD *)(v0 + 256));
  sub_10001BC14(*(_QWORD *)(v0 + 264), *(_QWORD *)(v0 + 272));
  return swift_deallocObject(v0, 280, 7);
}

uint64_t sub_10024BE28()
{
  uint64_t v0;

  sub_10001BC14(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
  sub_10001BC14(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
  sub_10001BC14(*(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56));
  sub_10001BC14(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72));
  sub_10001BC14(*(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88));
  return swift_deallocObject(v0, 96, 7);
}

uint64_t sub_10024BE6C()
{
  uint64_t v0;

  sub_10001BC14(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
  sub_10001BC14(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t destroy for AirPodsSWPairingCommand(uint64_t a1)
{
  __int128 v2;
  __int128 v3;

  v2 = *(_OWORD *)(a1 + 224);
  v3 = *(_OWORD *)(a1 + 240);
  return sub_10024BF08(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
           *(_QWORD *)(a1 + 152),
           *(_QWORD *)(a1 + 160),
           *(_QWORD *)(a1 + 168),
           *(_QWORD *)(a1 + 176),
           *(_QWORD *)(a1 + 184),
           *(_QWORD *)(a1 + 192),
           *(_QWORD *)(a1 + 200),
           *(_QWORD *)(a1 + 208),
           *(_QWORD *)(a1 + 216),
           v2,
           *((uint64_t *)&v2 + 1),
           v3,
           *((uint64_t *)&v3 + 1),
           *(_QWORD *)(a1 + 256),
           (void (*)(void))sub_10001BC14);
}

uint64_t sub_10024BF08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,unint64_t a33,void (*a34)(void))
{
  uint64_t (*v40)(void);
  uint64_t result;
  void (*v42)(void);

  v40 = (uint64_t (*)(void))a34;
  switch((a33 >> 59) & 6 | ((a31 & 0x2000000000000000) != 0))
  {
    case 0uLL:
      v42 = a34;
      a34();
      goto LABEL_7;
    case 1uLL:
      v42 = a34;
      a34();
      ((void (*)(uint64_t, uint64_t))a34)(a3, a4);
      ((void (*)(uint64_t, uint64_t))a34)(a5, a6);
      ((void (*)(uint64_t, uint64_t))a34)(a7, a8);
      goto LABEL_7;
    case 2uLL:
      v42 = a34;
      a34();
      ((void (*)(uint64_t, uint64_t))a34)(a3, a4);
      ((void (*)(uint64_t, uint64_t))a34)(a5, a6);
      ((void (*)(uint64_t, uint64_t))a34)(a7, a8);
      ((void (*)(uint64_t, uint64_t))a34)(a9, a10);
      ((void (*)(uint64_t, uint64_t))a34)(a11, a12);
      ((void (*)(uint64_t, uint64_t))a34)(a13, a14);
      ((void (*)(uint64_t, uint64_t))a34)(a15, a16);
      ((void (*)(uint64_t, uint64_t))a34)(a17, a18);
      ((void (*)(uint64_t, uint64_t))a34)(a19, a20);
      ((void (*)(uint64_t, uint64_t))a34)(a21, a22);
      ((void (*)(uint64_t, uint64_t))a34)(a23, a24);
      ((void (*)(uint64_t, uint64_t))a34)(a25, a26);
      ((void (*)(uint64_t, uint64_t))a34)(a28, a29);
      ((void (*)(uint64_t, unint64_t))a34)(a30, a31 & 0xDFFFFFFFFFFFFFFFLL);
      goto LABEL_7;
    case 3uLL:
      v42 = a34;
      a34();
      ((void (*)(uint64_t, uint64_t))a34)(a3, a4);
      ((void (*)(uint64_t, uint64_t))a34)(a5, a6);
      ((void (*)(uint64_t, uint64_t))a34)(a7, a8);
      ((void (*)(uint64_t, uint64_t))a34)(a9, a10);
      ((void (*)(uint64_t, uint64_t))a34)(a11, a12);
      goto LABEL_7;
    case 4uLL:
      v42 = a34;
      a34();
      ((void (*)(uint64_t, uint64_t))a34)(a3, a4);
      ((void (*)(uint64_t, uint64_t))a34)(a5, a6);
LABEL_7:
      v40 = (uint64_t (*)(void))v42;
      goto LABEL_8;
    case 5uLL:
LABEL_8:
      result = v40();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t *initializeWithCopy for AirPodsSWPairingCommand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;

  v3 = a2[6];
  v4 = a2[7];
  v13 = a2[9];
  v14 = a2[10];
  v15 = a2[11];
  v16 = a2[12];
  v17 = a2[13];
  v18 = a2[14];
  v19 = a2[15];
  v20 = a2[16];
  v21 = a2[17];
  v22 = a2[18];
  v23 = a2[19];
  v24 = a2[20];
  v25 = a2[21];
  v26 = a2[22];
  v27 = a2[23];
  v28 = a2[24];
  v29 = a2[25];
  v30 = a2[26];
  v31 = a2[27];
  v32 = a2[28];
  v33 = a2[29];
  v34 = a2[30];
  v35 = a2[31];
  v36 = a2[32];
  v5 = a2[8];
  v7 = a2[1];
  v6 = *a2;
  v9 = a2[3];
  v8 = a2[2];
  v11 = a2[5];
  v10 = a2[4];
  sub_10024BF08(*a2, v7, v8, v9, v10, v11, v3, v4, v5, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22,
    v23,
    v24,
    v25,
    v26,
    v27,
    v28,
    v29,
    v30,
    v31,
    v32,
    v33,
    v34,
    v35,
    v36,
    (void (*)(void))sub_10001BBBC);
  *a1 = v6;
  a1[1] = v7;
  a1[2] = v8;
  a1[3] = v9;
  a1[4] = v10;
  a1[5] = v11;
  a1[6] = v3;
  a1[7] = v4;
  a1[8] = v5;
  a1[9] = v13;
  a1[10] = v14;
  a1[11] = v15;
  a1[12] = v16;
  a1[13] = v17;
  a1[14] = v18;
  a1[15] = v19;
  a1[16] = v20;
  a1[17] = v21;
  a1[18] = v22;
  a1[19] = v23;
  a1[20] = v24;
  a1[21] = v25;
  a1[22] = v26;
  a1[23] = v27;
  a1[24] = v28;
  a1[25] = v29;
  a1[26] = v30;
  a1[27] = v31;
  a1[28] = v32;
  a1[29] = v33;
  a1[30] = v34;
  a1[31] = v35;
  a1[32] = v36;
  return a1;
}

uint64_t assignWithCopy for AirPodsSWPairingCommand(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  unint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v56 = *a2;
  v57 = a2[1];
  v54 = a2[3];
  v55 = a2[2];
  v52 = a2[5];
  v53 = a2[4];
  v34 = a2[9];
  v35 = a2[10];
  v36 = a2[11];
  v37 = a2[12];
  v38 = a2[13];
  v39 = a2[14];
  v40 = a2[15];
  v3 = a2[17];
  v4 = a2[18];
  v5 = a2[19];
  v6 = a2[20];
  v7 = a2[21];
  v8 = a2[22];
  v41 = a2[16];
  v42 = a2[23];
  v43 = a2[24];
  v44 = a2[25];
  v45 = a2[26];
  v46 = a2[27];
  v47 = a2[28];
  v48 = a2[29];
  v49 = a2[30];
  v50 = a2[31];
  v51 = a2[32];
  v9 = a2[8];
  v10 = a2[6];
  v11 = a2[7];
  sub_10024BF08(*a2, v57, v55, v54, v53, v52, v10, v11, v9, v34, v35, v36, v37, v38, v39, v40, v41, v3, v4,
    v5,
    v6,
    v7,
    v8,
    v42,
    v43,
    v44,
    v45,
    v46,
    v47,
    v48,
    v49,
    v50,
    v51,
    (void (*)(void))sub_10001BBBC);
  v12 = *(_QWORD *)a1;
  v13 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v56;
  *(_QWORD *)(a1 + 8) = v57;
  v14 = *(_QWORD *)(a1 + 16);
  v15 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = v55;
  *(_QWORD *)(a1 + 24) = v54;
  v16 = *(_QWORD *)(a1 + 32);
  v17 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = v53;
  v18 = *(_QWORD *)(a1 + 48);
  v19 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 40) = v52;
  *(_QWORD *)(a1 + 48) = v10;
  v20 = *(_OWORD *)(a1 + 64);
  v21 = *(_OWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 56) = v11;
  *(_QWORD *)(a1 + 64) = v9;
  *(_QWORD *)(a1 + 72) = v34;
  *(_QWORD *)(a1 + 80) = v35;
  *(_QWORD *)(a1 + 88) = v36;
  v22 = *(_OWORD *)(a1 + 96);
  v23 = *(_OWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 96) = v37;
  *(_QWORD *)(a1 + 104) = v38;
  *(_QWORD *)(a1 + 112) = v39;
  *(_QWORD *)(a1 + 120) = v40;
  v24 = *(_OWORD *)(a1 + 128);
  v25 = *(_OWORD *)(a1 + 144);
  *(_QWORD *)(a1 + 128) = v41;
  *(_QWORD *)(a1 + 136) = v3;
  *(_QWORD *)(a1 + 144) = v4;
  *(_QWORD *)(a1 + 152) = v5;
  v26 = *(_OWORD *)(a1 + 160);
  v27 = *(_OWORD *)(a1 + 176);
  *(_QWORD *)(a1 + 160) = v6;
  *(_QWORD *)(a1 + 168) = v7;
  *(_QWORD *)(a1 + 176) = v8;
  *(_QWORD *)(a1 + 184) = v42;
  v28 = *(_OWORD *)(a1 + 192);
  v29 = *(_OWORD *)(a1 + 208);
  *(_QWORD *)(a1 + 192) = v43;
  *(_QWORD *)(a1 + 200) = v44;
  *(_QWORD *)(a1 + 208) = v45;
  *(_QWORD *)(a1 + 216) = v46;
  v30 = *(_OWORD *)(a1 + 224);
  v31 = *(_OWORD *)(a1 + 240);
  *(_QWORD *)(a1 + 224) = v47;
  *(_QWORD *)(a1 + 232) = v48;
  *(_QWORD *)(a1 + 240) = v49;
  *(_QWORD *)(a1 + 248) = v50;
  v32 = *(_QWORD *)(a1 + 256);
  *(_QWORD *)(a1 + 256) = v51;
  sub_10024BF08(v12, v13, v14, v15, v16, v17, v18, v19, v20, *((uint64_t *)&v20 + 1), v21, *((uint64_t *)&v21 + 1), v22, *((uint64_t *)&v22 + 1), v23, *((uint64_t *)&v23 + 1), v24, *((uint64_t *)&v24 + 1), v25,
    *((uint64_t *)&v25 + 1),
    v26,
    *((uint64_t *)&v26 + 1),
    v27,
    *((uint64_t *)&v27 + 1),
    v28,
    *((uint64_t *)&v28 + 1),
    v29,
    *((uint64_t *)&v29 + 1),
    v30,
    *((uint64_t *)&v30 + 1),
    v31,
    *((uint64_t *)&v31 + 1),
    v32,
    (void (*)(void))sub_10001BC14);
  return a1;
}

uint64_t assignWithTake for AirPodsSWPairingCommand(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  unint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;

  v4 = *(_QWORD *)(a2 + 256);
  v5 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_QWORD *)(a1 + 32);
  v10 = *(_QWORD *)(a1 + 40);
  v11 = *(_QWORD *)(a1 + 48);
  v12 = *(_QWORD *)(a1 + 56);
  v13 = *(_OWORD *)(a1 + 64);
  v14 = *(_OWORD *)(a1 + 80);
  v15 = *(_OWORD *)(a1 + 96);
  v16 = *(_OWORD *)(a1 + 112);
  v17 = *(_OWORD *)(a1 + 128);
  v18 = *(_OWORD *)(a1 + 144);
  v19 = *(_OWORD *)(a1 + 160);
  v20 = *(_OWORD *)(a1 + 176);
  v21 = *(_OWORD *)(a1 + 192);
  v22 = *(_OWORD *)(a1 + 208);
  v23 = *(_OWORD *)(a1 + 224);
  v24 = *(_OWORD *)(a1 + 240);
  v25 = *(_QWORD *)(a1 + 256);
  v26 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v26;
  v27 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v27;
  v28 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v28;
  v29 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v29;
  v30 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v30;
  v31 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 176) = v31;
  v32 = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 208) = v32;
  v33 = *(_OWORD *)(a2 + 240);
  *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 240) = v33;
  *(_QWORD *)(a1 + 256) = v4;
  sub_10024BF08(v5, v6, v7, v8, v9, v10, v11, v12, v13, *((uint64_t *)&v13 + 1), v14, *((uint64_t *)&v14 + 1), v15, *((uint64_t *)&v15 + 1), v16, *((uint64_t *)&v16 + 1), v17, *((uint64_t *)&v17 + 1), v18,
    *((uint64_t *)&v18 + 1),
    v19,
    *((uint64_t *)&v19 + 1),
    v20,
    *((uint64_t *)&v20 + 1),
    v21,
    *((uint64_t *)&v21 + 1),
    v22,
    *((uint64_t *)&v22 + 1),
    v23,
    *((uint64_t *)&v23 + 1),
    v24,
    *((uint64_t *)&v24 + 1),
    v25,
    (void (*)(void))sub_10001BC14);
  return a1;
}

uint64_t getEnumTagSinglePayload for AirPodsSWPairingCommand(uint64_t a1, int a2)
{
  unsigned int v2;
  int v3;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 264))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = (*(_QWORD *)(a1 + 24) >> 58) & 0xC | (*(_QWORD *)(a1 + 8) >> 60) & 3 | *(_BYTE *)(a1 + 47) & 0x30 | (*(_QWORD *)(a1 + 56) >> 54) & 0xC0 | (*(_QWORD *)(a1 + 72) >> 52) & 0x300 | (*(_QWORD *)(a1 + 88) >> 50) & 0xC00 | *(_WORD *)(a1 + 110) & 0x3000 | (*(_QWORD *)(a1 + 120) >> 46) & 0xC000 | (*(_QWORD *)(a1 + 136) >> 44) & 0x30000 | (*(_QWORD *)(a1 + 152) >> 42) & 0xC0000 | (*(_QWORD *)(a1 + 168) >> 40) & 0x300000 | (*(_QWORD *)(a1 + 184) >> 38) & 0xC00000 | (*(_QWORD *)(a1 + 200) >> 36) & 0x3000000 | (*(_DWORD *)(a1 + 208) >> 8 << 26);
  if (v2 > 0x80000000)
    v3 = ~v2;
  else
    v3 = -1;
  return (v3 + 1);
}

double storeEnumTagSinglePayload for AirPodsSWPairingCommand(uint64_t a1, int a2, int a3)
{
  double result;
  unint64_t v4;

  if (a2 < 0)
  {
    result = 0.0;
    *(_OWORD *)(a1 + 232) = 0u;
    *(_OWORD *)(a1 + 216) = 0u;
    *(_OWORD *)(a1 + 200) = 0u;
    *(_OWORD *)(a1 + 184) = 0u;
    *(_OWORD *)(a1 + 168) = 0u;
    *(_OWORD *)(a1 + 152) = 0u;
    *(_OWORD *)(a1 + 136) = 0u;
    *(_OWORD *)(a1 + 120) = 0u;
    *(_OWORD *)(a1 + 104) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(_OWORD *)(a1 + 248) = 0u;
    *(_QWORD *)a1 = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(a1 + 264) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      v4 = -a2;
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = (unint64_t)(-(char)a2 & 3) << 60;
      *(_QWORD *)(a1 + 16) = 0;
      *(_QWORD *)(a1 + 24) = (v4 << 58) & 0x3000000000000000;
      *(_QWORD *)(a1 + 32) = 0;
      *(_QWORD *)(a1 + 40) = (v4 << 56) & 0x3000000000000000;
      *(_QWORD *)(a1 + 48) = 0;
      *(_QWORD *)(a1 + 56) = (v4 << 54) & 0x3000000000000000;
      *(_QWORD *)(a1 + 64) = 0;
      *(_QWORD *)(a1 + 72) = (v4 << 52) & 0x3000000000000000;
      *(_QWORD *)(a1 + 80) = 0;
      *(_QWORD *)(a1 + 88) = (v4 << 50) & 0x3000000000000000;
      *(_QWORD *)(a1 + 96) = 0;
      *(_QWORD *)(a1 + 104) = (v4 << 48) & 0x3000000000000000;
      *(_QWORD *)(a1 + 112) = 0;
      *(_QWORD *)(a1 + 120) = (v4 << 46) & 0x3000000000000000;
      *(_QWORD *)(a1 + 128) = 0;
      *(_QWORD *)(a1 + 136) = (v4 << 44) & 0x3000000000000000;
      *(_QWORD *)(a1 + 144) = 0;
      *(_QWORD *)(a1 + 152) = (v4 << 42) & 0x3000000000000000;
      *(_QWORD *)(a1 + 160) = 0;
      *(_QWORD *)(a1 + 168) = (v4 << 40) & 0x3000000000000000;
      *(_QWORD *)(a1 + 176) = 0;
      *(_QWORD *)(a1 + 184) = (v4 << 38) & 0x3000000000000000;
      *(_QWORD *)(a1 + 192) = 0;
      *(_QWORD *)(a1 + 200) = (v4 << 36) & 0x3000000000000000;
      *(_QWORD *)(a1 + 208) = (v4 >> 18) & 0x3F00;
      result = 0.0;
      *(_OWORD *)(a1 + 248) = 0u;
      *(_OWORD *)(a1 + 232) = 0u;
      *(_OWORD *)(a1 + 216) = 0u;
      return result;
    }
    *(_BYTE *)(a1 + 264) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

int8x16_t sub_10024C984(uint64_t a1, unsigned int a2)
{
  int8x16_t result;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;

  if (a2 < 6)
  {
    v3 = *(_QWORD *)(a1 + 24) & 0xCFFFFFFFFFFFFFFFLL;
    v4 = *(_QWORD *)(a1 + 40) & 0xCFFFFFFFFFFFFFFFLL;
    v5 = *(_QWORD *)(a1 + 56) & 0xCFFFFFFFFFFFFFFFLL;
    v6 = *(_QWORD *)(a1 + 72) & 0xCFFFFFFFFFFFFFFFLL;
    v7 = *(_QWORD *)(a1 + 88) & 0xCFFFFFFFFFFFFFFFLL;
    v8 = *(_QWORD *)(a1 + 104) & 0xCFFFFFFFFFFFFFFFLL;
    v9 = *(_QWORD *)(a1 + 120) & 0xCFFFFFFFFFFFFFFFLL;
    v10 = *(_QWORD *)(a1 + 136) & 0xCFFFFFFFFFFFFFFFLL;
    v11 = *(_QWORD *)(a1 + 152) & 0xCFFFFFFFFFFFFFFFLL;
    v12 = *(_QWORD *)(a1 + 168) & 0xCFFFFFFFFFFFFFFFLL;
    v13 = *(_QWORD *)(a1 + 184) & 0xCFFFFFFFFFFFFFFFLL;
    v14 = *(_QWORD *)(a1 + 224) & 0xCFFFFFFFFFFFFFFFLL;
    v15 = *(_QWORD *)(a1 + 240) & 0xCFFFFFFFFFFFFFFFLL | ((unint64_t)(a2 & 1) << 61);
    v16 = *(_QWORD *)(a1 + 256) & 0xCFFFFFFFFFFFFFFFLL | ((((unint64_t)a2 >> 1) & 3) << 60);
    *(_QWORD *)(a1 + 8) &= 0xCFFFFFFFFFFFFFFFLL;
    *(_QWORD *)(a1 + 24) = v3;
    *(_QWORD *)(a1 + 40) = v4;
    *(_QWORD *)(a1 + 56) = v5;
    *(_QWORD *)(a1 + 72) = v6;
    *(_QWORD *)(a1 + 88) = v7;
    *(_QWORD *)(a1 + 104) = v8;
    *(_QWORD *)(a1 + 120) = v9;
    *(_QWORD *)(a1 + 136) = v10;
    *(_QWORD *)(a1 + 152) = v11;
    *(_QWORD *)(a1 + 168) = v12;
    *(_QWORD *)(a1 + 184) = v13;
    result = vandq_s8(*(int8x16_t *)(a1 + 200), (int8x16_t)xmmword_100E22B40);
    *(int8x16_t *)(a1 + 200) = result;
    *(_QWORD *)(a1 + 224) = v14;
    *(_QWORD *)(a1 + 240) = v15;
    *(_QWORD *)(a1 + 256) = v16;
  }
  else
  {
    *(_QWORD *)a1 = a2 - 6;
    result.i64[0] = 0;
    *(_OWORD *)(a1 + 8) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_OWORD *)(a1 + 104) = 0u;
    *(_OWORD *)(a1 + 120) = 0u;
    *(_OWORD *)(a1 + 136) = 0u;
    *(_OWORD *)(a1 + 152) = 0u;
    *(_OWORD *)(a1 + 168) = 0u;
    *(_OWORD *)(a1 + 184) = 0u;
    *(_OWORD *)(a1 + 200) = 0u;
    *(_OWORD *)(a1 + 216) = 0u;
    *(_OWORD *)(a1 + 232) = 0u;
    *(_QWORD *)(a1 + 248) = 0;
    *(_QWORD *)(a1 + 256) = 0x3000000000000000;
  }
  return result;
}

ValueMetadata *type metadata accessor for AirPodsSWPairingCommand()
{
  return &type metadata for AirPodsSWPairingCommand;
}

void sub_10024CAC4(char a1)
{
  __asm { BR              X10 }
}

ValueMetadata *sub_10024CAEC()
{
  sub_10005A334();
  return &type metadata for AccessoryGenericPayload;
}

void sub_10024CB7C(_QWORD *a1)
{
  const void *v1;
  const void *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  _QWORD v8[38];
  _BYTE v9[272];

  v2 = v1;
  v4 = type metadata accessor for Endianness(0);
  __chkstk_darwin(v4);
  v5 = a1[3];
  v6 = a1[4];
  sub_10001AA44(a1, v5);
  dispatch thunk of BinaryEncoding.container()(v8, v5, v6);
  sub_100057230(v2, v9);
  v7 = (char *)sub_10024CC3C + 4 * byte_100E2E986[sub_10005784C((uint64_t)v9)];
  __asm { BR              X11 }
}

uint64_t sub_10024CC3C()
{
  uint64_t v0;
  uint64_t v1;
  const void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;

  v6 = sub_10005A21C(v0 + 1216);
  *(_WORD *)(v0 + 344) = 268;
  static Endianness.current.getter(v6);
  v7 = sub_100112060();
  FixedWidthInteger.convert(to:)((_QWORD *)(v0 + 608), v4, &type metadata for UInt16, v7);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v3);
  *(_WORD *)(v0 + 344) = *(_WORD *)(v0 + 608);
  v8 = *(_QWORD *)(v0 + 936);
  v9 = *(_QWORD *)(v0 + 944);
  sub_10009F5D0(v0 + 912, v8);
  dispatch thunk of BinaryEncodingContaining.encode<A>(_:)(v0 + 344, &type metadata for UInt16, v7, v8, v9);
  if (!v1)
  {
    sub_100057230(v2, (void *)(v0 + 952));
    v10 = (char *)&loc_10024CD58 + 4 * word_100E2E98E[sub_10005784C(v0 + 952)];
    __asm { BR              X10 }
  }
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 912));
}

void *sub_10024D3A8@<X0>(_QWORD *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2;
  void *result;
  _BYTE v5[264];

  result = sub_10024DB1C(a1, v5);
  if (!v2)
    return sub_100057230(v5, a2);
  return result;
}

void sub_10024D3F4(_QWORD *a1)
{
  const void *v1;
  _BYTE v3[264];

  sub_100057230(v1, v3);
  sub_10024CB7C(a1);
}

unint64_t sub_10024D440()
{
  unint64_t result;

  result = qword_1010F3BB8;
  if (!qword_1010F3BB8)
  {
    result = swift_getWitnessTable("I;#", &type metadata for AirPodsSWPairingCommand.AccessoryPairingCommandError);
    atomic_store(result, (unint64_t *)&qword_1010F3BB8);
  }
  return result;
}

unint64_t sub_10024D484()
{
  unint64_t result;

  result = qword_1010F3BC0;
  if (!qword_1010F3BC0)
  {
    result = swift_getWitnessTable(byte_100E2F8D8, &type metadata for AirPodsSWPairingCompleteCommandPayload);
    atomic_store(result, (unint64_t *)&qword_1010F3BC0);
  }
  return result;
}

unint64_t sub_10024D4C8()
{
  unint64_t result;

  result = qword_1010F3BC8;
  if (!qword_1010F3BC8)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for AirPodsSWSendPairingStatusCommandPayload, &type metadata for AirPodsSWSendPairingStatusCommandPayload);
    atomic_store(result, (unint64_t *)&qword_1010F3BC8);
  }
  return result;
}

unint64_t sub_10024D50C()
{
  unint64_t result;

  result = qword_1010F3BD0;
  if (!qword_1010F3BD0)
  {
    result = swift_getWitnessTable("aY#", &type metadata for AirPodsSWFinalizePairingCommandPayload);
    atomic_store(result, (unint64_t *)&qword_1010F3BD0);
  }
  return result;
}

unint64_t sub_10024D550()
{
  unint64_t result;

  result = qword_1010F3BD8;
  if (!qword_1010F3BD8)
  {
    result = swift_getWitnessTable(byte_100E31A18, &type metadata for AirPodsSWSendPairingDataCommandPayload);
    atomic_store(result, (unint64_t *)&qword_1010F3BD8);
  }
  return result;
}

unint64_t sub_10024D594()
{
  unint64_t result;

  result = qword_1010F3BE0;
  if (!qword_1010F3BE0)
  {
    result = swift_getWitnessTable(aI_5, &type metadata for AirPodsLEInitiatePairingCommandPayload);
    atomic_store(result, (unint64_t *)&qword_1010F3BE0);
  }
  return result;
}

unint64_t sub_10024D5D8()
{
  unint64_t result;

  result = qword_1010F3BE8;
  if (!qword_1010F3BE8)
  {
    result = swift_getWitnessTable("=a#", &type metadata for AirPodsSendBeaconGroupDataCommandPayload);
    atomic_store(result, (unint64_t *)&qword_1010F3BE8);
  }
  return result;
}

uint64_t sub_10024D61C(unsigned __int16 a1)
{
  int v1;
  uint64_t result;

  v1 = a1;
  result = 1;
  switch(v1)
  {
    case 256:
      result = 2;
      break;
    case 257:
      result = 3;
      break;
    case 258:
      result = 4;
      break;
    case 259:
      result = 5;
      break;
    case 260:
      result = 6;
      break;
    case 261:
    case 262:
    case 263:
    case 264:
    case 265:
    case 266:
      goto LABEL_5;
    case 267:
      result = 0;
      break;
    case 268:
      return result;
    default:
      if (v1 == 516)
        result = 7;
      else
LABEL_5:
        result = 8;
      break;
  }
  return result;
}

void sub_10024D690(char a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t DynamicType;
  _QWORD v8[3];
  uint64_t v9;

  sub_100030784(a2, (uint64_t)v8);
  sub_10024CAC4(a1);
  v4 = v3;
  v5 = v9;
  v6 = sub_10001AA44(v8, v9);
  DynamicType = swift_getDynamicType(v6, v5, 1);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v8);
  if (v4 == DynamicType)
    __asm { BR              X10 }
  __break(1u);
  JUMPOUT(0x10024DAFCLL);
}

void *sub_10024DB1C@<X0>(_QWORD *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  void *v15;
  __int16 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v38;
  void *v39;
  _QWORD *v40;
  _QWORD v41[5];
  _QWORD v42[5];
  _QWORD v43[3];
  uint64_t v44;
  uint64_t v45;
  _WORD v46[144];

  v39 = a2;
  v4 = type metadata accessor for Endianness(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a1[3];
  v9 = a1[4];
  v40 = a1;
  sub_10001AA44(a1, v8);
  dispatch thunk of BinaryDecoding.container()(v43, v8, v9);
  v11 = v44;
  v10 = v45;
  sub_10009F5D0((uint64_t)v43, v44);
  v12 = sub_100112060();
  v13 = dispatch thunk of BinaryDecodingContaining.decode<A>(_:)(v41, &type metadata for UInt16, &type metadata for UInt16, v12, v11, v10);
  if (v2)
  {
    v14 = v40;
  }
  else
  {
    v15 = v39;
    v46[143] = v41[0];
    static Endianness.current.getter(v13);
    FixedWidthInteger.convert(to:)(v42, v7, &type metadata for UInt16, v12);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    v16 = v42[0];
    v17 = sub_10024D61C(v42[0]);
    if (v17 != 8)
    {
      v31 = v17;
      sub_10024CAC4(v17);
      v33 = v32;
      v35 = v34;
      v36 = v40;
      sub_100030784((uint64_t)v40, (uint64_t)v41);
      v42[3] = v33;
      v42[4] = v35;
      sub_100018F08(v42);
      dispatch thunk of BinaryDecodable.init(from:)(v41, v33, *(_QWORD *)(v35 + 8));
      sub_100030784((uint64_t)v42, (uint64_t)v41);
      sub_10024D690(v31, (uint64_t)v41);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v42);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v43);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v36);
      return sub_100057230(v46, v15);
    }
    v18 = static os_log_type_t.error.getter(v17);
    v14 = v40;
    if (qword_1010EA310 != -1)
      swift_once(&qword_1010EA310, sub_100B5E2C8);
    v19 = qword_1011B7DF0;
    v20 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v21 = swift_allocObject(v20, 72, 7);
    *(_OWORD *)(v21 + 16) = xmmword_100E22B00;
    LOWORD(v42[0]) = v16;
    v22 = FixedWidthInteger.data.getter(&type metadata for UInt16, v12);
    v24 = v23;
    v25 = Data.hexString.getter(v22, v23);
    v27 = v26;
    sub_10001BC14(v22, v24);
    *(_QWORD *)(v21 + 56) = &type metadata for String;
    *(_QWORD *)(v21 + 64) = sub_10001AA00();
    *(_QWORD *)(v21 + 32) = v25;
    *(_QWORD *)(v21 + 40) = v27;
    os_log(_:dso:log:_:_:)(v18, &_mh_execute_header, v19, "Invalid opcode: %@", 18, 2, v21);
    swift_bridgeObjectRelease();
    v28 = sub_10024D440();
    v29 = swift_allocError(&type metadata for AirPodsSWPairingCommand.AccessoryPairingCommandError, v28, 0, 0);
    *v30 = 1;
    swift_willThrow(v29);
  }
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v43);
  return (void *)_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v14);
}

double sub_10024DE44(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = 1;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_QWORD *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 256) = 0x3000000000000000;
  return result;
}

int8x16_t sub_10024DE98(uint64_t a1)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int8x16_t result;

  v1 = *(_QWORD *)(a1 + 24) & 0xCFFFFFFFFFFFFFFFLL;
  v2 = *(_QWORD *)(a1 + 40) & 0xCFFFFFFFFFFFFFFFLL;
  v3 = *(_QWORD *)(a1 + 56) & 0xCFFFFFFFFFFFFFFFLL;
  v4 = *(_QWORD *)(a1 + 72) & 0xCFFFFFFFFFFFFFFFLL;
  v5 = *(_QWORD *)(a1 + 88) & 0xCFFFFFFFFFFFFFFFLL;
  v6 = *(_QWORD *)(a1 + 104) & 0xCFFFFFFFFFFFFFFFLL;
  v7 = *(_QWORD *)(a1 + 120) & 0xCFFFFFFFFFFFFFFFLL;
  v8 = *(_QWORD *)(a1 + 136) & 0xCFFFFFFFFFFFFFFFLL;
  v9 = *(_QWORD *)(a1 + 152) & 0xCFFFFFFFFFFFFFFFLL;
  v10 = *(_QWORD *)(a1 + 168) & 0xCFFFFFFFFFFFFFFFLL;
  v11 = *(_QWORD *)(a1 + 184) & 0xCFFFFFFFFFFFFFFFLL;
  v12 = *(_QWORD *)(a1 + 224) & 0xCFFFFFFFFFFFFFFFLL;
  v13 = *(_QWORD *)(a1 + 240) & 0xCFFFFFFFFFFFFFFFLL;
  v14 = *(_QWORD *)(a1 + 256) & 0xCFFFFFFFFFFFFFFFLL | 0x2000000000000000;
  *(_QWORD *)(a1 + 8) &= 0xCFFFFFFFFFFFFFFFLL;
  *(_QWORD *)(a1 + 24) = v1;
  *(_QWORD *)(a1 + 40) = v2;
  *(_QWORD *)(a1 + 56) = v3;
  *(_QWORD *)(a1 + 72) = v4;
  *(_QWORD *)(a1 + 88) = v5;
  *(_QWORD *)(a1 + 104) = v6;
  *(_QWORD *)(a1 + 120) = v7;
  *(_QWORD *)(a1 + 136) = v8;
  *(_QWORD *)(a1 + 152) = v9;
  *(_QWORD *)(a1 + 168) = v10;
  *(_QWORD *)(a1 + 184) = v11;
  result = vandq_s8(*(int8x16_t *)(a1 + 200), (int8x16_t)xmmword_100E22B40);
  *(int8x16_t *)(a1 + 200) = result;
  *(_QWORD *)(a1 + 224) = v12;
  *(_QWORD *)(a1 + 240) = v13;
  *(_QWORD *)(a1 + 256) = v14;
  return result;
}

int8x16_t sub_10024DF68(uint64_t a1)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int8x16_t result;

  v1 = *(_QWORD *)(a1 + 24) & 0xCFFFFFFFFFFFFFFFLL;
  v2 = *(_QWORD *)(a1 + 40) & 0xCFFFFFFFFFFFFFFFLL;
  v3 = *(_QWORD *)(a1 + 56) & 0xCFFFFFFFFFFFFFFFLL;
  v4 = *(_QWORD *)(a1 + 72) & 0xCFFFFFFFFFFFFFFFLL;
  v5 = *(_QWORD *)(a1 + 88) & 0xCFFFFFFFFFFFFFFFLL;
  v6 = *(_QWORD *)(a1 + 104) & 0xCFFFFFFFFFFFFFFFLL;
  v7 = *(_QWORD *)(a1 + 120) & 0xCFFFFFFFFFFFFFFFLL;
  v8 = *(_QWORD *)(a1 + 136) & 0xCFFFFFFFFFFFFFFFLL;
  v9 = *(_QWORD *)(a1 + 152) & 0xCFFFFFFFFFFFFFFFLL;
  v10 = *(_QWORD *)(a1 + 168) & 0xCFFFFFFFFFFFFFFFLL;
  v11 = *(_QWORD *)(a1 + 184) & 0xCFFFFFFFFFFFFFFFLL;
  v12 = *(_QWORD *)(a1 + 224) & 0xCFFFFFFFFFFFFFFFLL;
  v13 = *(_QWORD *)(a1 + 240) & 0xCFFFFFFFFFFFFFFFLL;
  v14 = *(_QWORD *)(a1 + 256) & 0xCFFFFFFFFFFFFFFFLL | 0x1000000000000000;
  *(_QWORD *)(a1 + 8) &= 0xCFFFFFFFFFFFFFFFLL;
  *(_QWORD *)(a1 + 24) = v1;
  *(_QWORD *)(a1 + 40) = v2;
  *(_QWORD *)(a1 + 56) = v3;
  *(_QWORD *)(a1 + 72) = v4;
  *(_QWORD *)(a1 + 88) = v5;
  *(_QWORD *)(a1 + 104) = v6;
  *(_QWORD *)(a1 + 120) = v7;
  *(_QWORD *)(a1 + 136) = v8;
  *(_QWORD *)(a1 + 152) = v9;
  *(_QWORD *)(a1 + 168) = v10;
  *(_QWORD *)(a1 + 184) = v11;
  result = vandq_s8(*(int8x16_t *)(a1 + 200), (int8x16_t)xmmword_100E22B40);
  *(int8x16_t *)(a1 + 200) = result;
  *(_QWORD *)(a1 + 224) = v12;
  *(_QWORD *)(a1 + 240) = v13;
  *(_QWORD *)(a1 + 256) = v14;
  return result;
}

int8x16_t sub_10024E038(uint64_t a1)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int8x16_t result;

  v1 = *(_QWORD *)(a1 + 24) & 0xCFFFFFFFFFFFFFFFLL;
  v2 = *(_QWORD *)(a1 + 40) & 0xCFFFFFFFFFFFFFFFLL;
  v3 = *(_QWORD *)(a1 + 56) & 0xCFFFFFFFFFFFFFFFLL;
  v4 = *(_QWORD *)(a1 + 72) & 0xCFFFFFFFFFFFFFFFLL;
  v5 = *(_QWORD *)(a1 + 88) & 0xCFFFFFFFFFFFFFFFLL;
  v6 = *(_QWORD *)(a1 + 104) & 0xCFFFFFFFFFFFFFFFLL;
  v7 = *(_QWORD *)(a1 + 120) & 0xCFFFFFFFFFFFFFFFLL;
  v8 = *(_QWORD *)(a1 + 136) & 0xCFFFFFFFFFFFFFFFLL;
  v9 = *(_QWORD *)(a1 + 152) & 0xCFFFFFFFFFFFFFFFLL;
  v10 = *(_QWORD *)(a1 + 168) & 0xCFFFFFFFFFFFFFFFLL;
  v11 = *(_QWORD *)(a1 + 184) & 0xCFFFFFFFFFFFFFFFLL;
  v12 = *(_QWORD *)(a1 + 224) & 0xCFFFFFFFFFFFFFFFLL;
  v13 = *(_QWORD *)(a1 + 240) & 0xCFFFFFFFFFFFFFFFLL;
  v14 = *(_QWORD *)(a1 + 256) & 0xCFFFFFFFFFFFFFFFLL;
  *(_QWORD *)(a1 + 8) &= 0xCFFFFFFFFFFFFFFFLL;
  *(_QWORD *)(a1 + 24) = v1;
  *(_QWORD *)(a1 + 40) = v2;
  *(_QWORD *)(a1 + 56) = v3;
  *(_QWORD *)(a1 + 72) = v4;
  *(_QWORD *)(a1 + 88) = v5;
  *(_QWORD *)(a1 + 104) = v6;
  *(_QWORD *)(a1 + 120) = v7;
  *(_QWORD *)(a1 + 136) = v8;
  *(_QWORD *)(a1 + 152) = v9;
  *(_QWORD *)(a1 + 168) = v10;
  *(_QWORD *)(a1 + 184) = v11;
  result = vandq_s8(*(int8x16_t *)(a1 + 200), (int8x16_t)xmmword_100E22B40);
  *(int8x16_t *)(a1 + 200) = result;
  *(_QWORD *)(a1 + 224) = v12;
  *(_QWORD *)(a1 + 240) = v13;
  *(_QWORD *)(a1 + 256) = v14;
  return result;
}

uint64_t storeEnumTagSinglePayload for AirPodsSWPairingCommand.AccessoryPairingCommandError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_10024E150 + 4 * byte_100E2E9B0[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10024E184 + 4 * byte_100E2E9AB[v4]))();
}

uint64_t sub_10024E184(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10024E18C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10024E194);
  return result;
}

uint64_t sub_10024E1A0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10024E1A8);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_10024E1AC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10024E1B4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AirPodsSWPairingCommand.AccessoryPairingCommandError()
{
  return &type metadata for AirPodsSWPairingCommand.AccessoryPairingCommandError;
}

unint64_t sub_10024E1D4()
{
  unint64_t result;

  result = qword_1010F3BF0;
  if (!qword_1010F3BF0)
  {
    result = swift_getWitnessTable("a;#", &type metadata for AirPodsSWPairingCommand.AccessoryPairingCommandError);
    atomic_store(result, (unint64_t *)&qword_1010F3BF0);
  }
  return result;
}

uint64_t sub_10024E218()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = type metadata accessor for Logger(0);
  sub_1000234D8(v0, qword_1010F3BF8);
  v1 = sub_10001A9E8(v0, (uint64_t)qword_1010F3BF8);
  if (qword_1010E9938 != -1)
    swift_once(&qword_1010E9938, sub_1000AFBB0);
  v2 = sub_10001A9E8(v0, (uint64_t)qword_1011B6748);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 - 8) + 16))(v1, v2, v0);
}

uint64_t sub_10024E2A8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v3[9] = a2;
  v3[10] = v2;
  v3[8] = a1;
  v4 = type metadata accessor for UUID(0);
  v3[11] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[12] = v5;
  v6 = (*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[13] = swift_task_alloc(v6);
  v3[14] = swift_task_alloc(v6);
  v7 = type metadata accessor for SharedBeaconRecord(0);
  v3[15] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v3[16] = v8;
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v3[17] = swift_task_alloc(v9);
  v3[18] = swift_task_alloc(v9);
  return swift_task_switch(sub_10024E354, v2, 0);
}

uint64_t sub_10024E354()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, unint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;

  v1 = *(_QWORD *)(v0 + 64);
  v2 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v0 + 152) = v2;
  if (v2)
  {
    v3 = *(_QWORD *)(v0 + 128);
    v4 = *(_QWORD *)(v0 + 80) + 112;
    *(_DWORD *)(v0 + 192) = *(_DWORD *)(v3 + 80);
    swift_bridgeObjectRetain(v1);
    swift_beginAccess(v4, v0 + 16, 0, 0);
    v5 = 0;
    *(_QWORD *)(v0 + 160) = *(_QWORD *)(v3 + 72);
    while (1)
    {
      *(_QWORD *)(v0 + 168) = v5;
      v6 = *(_QWORD *)(v0 + 144);
      v7 = *(_QWORD *)(v0 + 120);
      v8 = *(_QWORD *)(v0 + 80);
      sub_10024F154(*(_QWORD *)(v0 + 64)+ ((*(unsigned __int8 *)(v0 + 192) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 192))+ *(_QWORD *)(v0 + 160) * v5, v6);
      v9 = *(_QWORD *)(v8 + 112);
      v10 = *(int *)(v7 + 20);
      *(_DWORD *)(v0 + 196) = v10;
      if (!*(_QWORD *)(v9 + 16))
        break;
      v11 = v6 + v10;
      v12 = *(_QWORD *)(v0 + 88);
      v13 = *(_QWORD *)(v9 + 40);
      v35 = v9;
      v14 = sub_100006204(&qword_1010F98B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      swift_bridgeObjectRetain(v35);
      v34 = v11;
      v15 = dispatch thunk of Hashable._rawHashValue(seed:)(v13, v12, v14);
      v16 = -1 << *(_BYTE *)(v35 + 32);
      v17 = v15 & ~v16;
      v18 = v35;
      if (((*(_QWORD *)(v35 + 56 + ((v17 >> 3) & 0xFFFFFFFFFFFFF8)) >> v17) & 1) == 0)
      {
LABEL_12:
        swift_bridgeObjectRelease();
        break;
      }
      v19 = ~v16;
      v20 = *(_QWORD *)(v0 + 96);
      v21 = *(_QWORD *)(v20 + 72);
      v22 = *(void (**)(uint64_t, unint64_t, uint64_t))(v20 + 16);
      while (1)
      {
        v23 = *(_QWORD *)(v0 + 112);
        v24 = *(_QWORD *)(v0 + 88);
        v25 = *(_QWORD *)(v0 + 96);
        v22(v23, *(_QWORD *)(v18 + 48) + v17 * v21, v24);
        v26 = sub_100006204(&qword_1010EE520, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v27 = dispatch thunk of static Equatable.== infix(_:_:)(v23, v34, v24, v26);
        (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v23, v24);
        if ((v27 & 1) != 0)
          break;
        v17 = (v17 + 1) & v19;
        v18 = v35;
        if (((*(_QWORD *)(v35 + 56 + ((v17 >> 3) & 0xFFFFFFFFFFFFF8)) >> v17) & 1) == 0)
          goto LABEL_12;
      }
      v28 = *(_QWORD *)(v0 + 144);
      swift_bridgeObjectRelease();
      sub_10024F198(v28);
      v5 = *(_QWORD *)(v0 + 168) + 1;
      if (v5 == *(_QWORD *)(v0 + 152))
      {
        swift_bridgeObjectRelease();
        goto LABEL_11;
      }
    }
    v33 = (_QWORD *)swift_task_alloc(dword_1010F3C44);
    *(_QWORD *)(v0 + 176) = v33;
    *v33 = v0;
    v33[1] = sub_10024E604;
    return sub_10024EE18(*(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 72));
  }
  else
  {
LABEL_11:
    v29 = *(_QWORD *)(v0 + 136);
    v31 = *(_QWORD *)(v0 + 104);
    v30 = *(_QWORD *)(v0 + 112);
    swift_task_dealloc(*(_QWORD *)(v0 + 144));
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_10024E604()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 176);
  *(_QWORD *)(*v1 + 184) = v0;
  swift_task_dealloc(v3);
  if (v0)
    v4 = sub_10024E958;
  else
    v4 = sub_10024E668;
  return swift_task_switch(v4, *(_QWORD *)(v2 + 80), 0);
}

uint64_t sub_10024E668()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(uint64_t, unint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;

  v1 = *(_QWORD *)(v0 + 144);
  v2 = *(char **)(v0 + 104);
  v3 = *(_QWORD *)(v0 + 112);
  v4 = *(_QWORD *)(v0 + 88);
  v5 = *(_QWORD *)(v0 + 96);
  v6 = *(_QWORD *)(v0 + 80) + 112;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v2, v1 + *(int *)(v0 + 196), v4);
  swift_beginAccess(v6, v0 + 40, 33, 0);
  sub_100A09F38(v3, v2);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v4);
  swift_endAccess(v0 + 40);
  sub_10024F198(v1);
  v7 = *(_QWORD *)(v0 + 168) + 1;
  if (v7 == *(_QWORD *)(v0 + 152))
  {
LABEL_2:
    swift_bridgeObjectRelease();
    v8 = *(_QWORD *)(v0 + 136);
    v10 = *(_QWORD *)(v0 + 104);
    v9 = *(_QWORD *)(v0 + 112);
    swift_task_dealloc(*(_QWORD *)(v0 + 144));
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    while (1)
    {
      *(_QWORD *)(v0 + 168) = v7;
      v12 = *(_QWORD *)(v0 + 144);
      v13 = *(_QWORD *)(v0 + 120);
      v14 = *(_QWORD *)(v0 + 80);
      sub_10024F154(*(_QWORD *)(v0 + 64)+ ((*(unsigned __int8 *)(v0 + 192) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 192))+ *(_QWORD *)(v0 + 160) * v7, v12);
      v15 = *(_QWORD *)(v14 + 112);
      v16 = *(int *)(v13 + 20);
      *(_DWORD *)(v0 + 196) = v16;
      if (!*(_QWORD *)(v15 + 16))
        break;
      v17 = v12 + v16;
      v18 = *(_QWORD *)(v0 + 88);
      v19 = *(_QWORD *)(v15 + 40);
      v37 = v15;
      v20 = sub_100006204(&qword_1010F98B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      swift_bridgeObjectRetain(v37);
      v36 = v17;
      v21 = dispatch thunk of Hashable._rawHashValue(seed:)(v19, v18, v20);
      v22 = -1 << *(_BYTE *)(v37 + 32);
      v23 = v21 & ~v22;
      v24 = v37;
      if (((*(_QWORD *)(v37 + 56 + ((v23 >> 3) & 0xFFFFFFFFFFFFF8)) >> v23) & 1) == 0)
      {
LABEL_11:
        swift_bridgeObjectRelease();
        break;
      }
      v25 = ~v22;
      v26 = *(_QWORD *)(v0 + 96);
      v27 = *(_QWORD *)(v26 + 72);
      v28 = *(void (**)(uint64_t, unint64_t, uint64_t))(v26 + 16);
      while (1)
      {
        v29 = *(_QWORD *)(v0 + 112);
        v30 = *(_QWORD *)(v0 + 88);
        v31 = *(_QWORD *)(v0 + 96);
        v28(v29, *(_QWORD *)(v24 + 48) + v23 * v27, v30);
        v32 = sub_100006204(&qword_1010EE520, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v33 = dispatch thunk of static Equatable.== infix(_:_:)(v29, v36, v30, v32);
        (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v29, v30);
        if ((v33 & 1) != 0)
          break;
        v23 = (v23 + 1) & v25;
        v24 = v37;
        if (((*(_QWORD *)(v37 + 56 + ((v23 >> 3) & 0xFFFFFFFFFFFFF8)) >> v23) & 1) == 0)
          goto LABEL_11;
      }
      v34 = *(_QWORD *)(v0 + 144);
      swift_bridgeObjectRelease();
      sub_10024F198(v34);
      v7 = *(_QWORD *)(v0 + 168) + 1;
      if (v7 == *(_QWORD *)(v0 + 152))
        goto LABEL_2;
    }
    v35 = (_QWORD *)swift_task_alloc(dword_1010F3C44);
    *(_QWORD *)(v0 + 176) = v35;
    *v35 = v0;
    v35[1] = sub_10024E604;
    return sub_10024EE18(*(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 72));
  }
}

uint64_t sub_10024E958()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  _BOOL4 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(uint64_t, unint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;

  if (qword_1010E9AC8 != -1)
    swift_once(&qword_1010E9AC8, sub_10024E218);
  v1 = v0[23];
  v3 = v0[17];
  v2 = v0[18];
  v4 = type metadata accessor for Logger(0);
  sub_10001A9E8(v4, (uint64_t)qword_1010F3BF8);
  sub_10024F154(v2, v3);
  swift_errorRetain(v1);
  v5 = swift_errorRetain(v1);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.error.getter(v6);
  v8 = os_log_type_enabled(v6, v7);
  v9 = v0[23];
  v11 = v0[17];
  v10 = v0[18];
  v50 = v0;
  if (v8)
  {
    v12 = v0[11];
    v13 = swift_slowAlloc(32, -1);
    v14 = (uint64_t *)swift_slowAlloc(8, -1);
    v15 = swift_slowAlloc(32, -1);
    v51 = v15;
    *(_DWORD *)v13 = 141558531;
    *(_QWORD *)(v13 + 4) = 1752392040;
    *(_WORD *)(v13 + 12) = 2081;
    v16 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v17 = dispatch thunk of CustomStringConvertible.description.getter(v12, v16);
    *(_QWORD *)(v13 + 14) = sub_100016940(v17, v18, &v51);
    swift_bridgeObjectRelease();
    sub_10024F198(v11);
    *(_WORD *)(v13 + 22) = 2114;
    swift_errorRetain(v9);
    v19 = _swift_stdlib_bridgeErrorToNSError(v9);
    *(_QWORD *)(v13 + 24) = v19;
    *v14 = v19;
    swift_errorRelease(v9);
    swift_errorRelease(v9);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Error hiding beacon %{private,mask.hash}s: %{public}@", (uint8_t *)v13, 0x20u);
    v20 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v14, 1, v20);
    swift_slowDealloc(v14, -1, -1);
    swift_arrayDestroy(v15, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v15, -1, -1);
    swift_slowDealloc(v13, -1, -1);

    swift_errorRelease(v9);
  }
  else
  {

    swift_errorRelease(v9);
    swift_errorRelease(v9);
    sub_10024F198(v11);
    swift_errorRelease(v9);
  }
  sub_10024F198(v10);
  v21 = v0[21] + 1;
  if (v21 == v0[19])
  {
LABEL_7:
    swift_bridgeObjectRelease();
    v22 = v0[17];
    v24 = v0[13];
    v23 = v0[14];
    swift_task_dealloc(v0[18]);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    return ((uint64_t (*)(void))v0[1])();
  }
  else
  {
    while (1)
    {
      v0[21] = v21;
      v26 = v0[18];
      v27 = v0[15];
      v28 = v0[10];
      sub_10024F154(v0[8]+ ((*((unsigned __int8 *)v0 + 192) + 32) & ~(unint64_t)*((unsigned __int8 *)v0 + 192))+ v0[20] * v21, v26);
      v29 = *(_QWORD *)(v28 + 112);
      v30 = *(int *)(v27 + 20);
      *((_DWORD *)v0 + 49) = v30;
      if (!*(_QWORD *)(v29 + 16))
        break;
      v31 = v26 + v30;
      v32 = v0[11];
      v33 = *(_QWORD *)(v29 + 40);
      v34 = sub_100006204(&qword_1010F98B0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      swift_bridgeObjectRetain(v29);
      v49 = v31;
      v35 = dispatch thunk of Hashable._rawHashValue(seed:)(v33, v32, v34);
      v36 = -1 << *(_BYTE *)(v29 + 32);
      v37 = v35 & ~v36;
      if (((*(_QWORD *)(v29 + 56 + ((v37 >> 3) & 0xFFFFFFFFFFFFF8)) >> v37) & 1) == 0)
      {
LABEL_16:
        swift_bridgeObjectRelease();
        v0 = v50;
        break;
      }
      v38 = ~v36;
      v39 = v50[12];
      v40 = *(_QWORD *)(v39 + 72);
      v41 = *(void (**)(uint64_t, unint64_t, uint64_t))(v39 + 16);
      while (1)
      {
        v42 = v50[14];
        v43 = v50[11];
        v44 = v50[12];
        v41(v42, *(_QWORD *)(v29 + 48) + v37 * v40, v43);
        v45 = sub_100006204(&qword_1010EE520, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v46 = dispatch thunk of static Equatable.== infix(_:_:)(v42, v49, v43, v45);
        (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v42, v43);
        if ((v46 & 1) != 0)
          break;
        v37 = (v37 + 1) & v38;
        if (((*(_QWORD *)(v29 + 56 + ((v37 >> 3) & 0xFFFFFFFFFFFFF8)) >> v37) & 1) == 0)
          goto LABEL_16;
      }
      v0 = v50;
      v47 = v50[18];
      swift_bridgeObjectRelease();
      sub_10024F198(v47);
      v21 = v50[21] + 1;
      if (v21 == v50[19])
        goto LABEL_7;
    }
    v48 = (_QWORD *)swift_task_alloc(dword_1010F3C44);
    v0[22] = v48;
    *v48 = v0;
    v48[1] = sub_10024E604;
    return sub_10024EE18(v0[18], v0[9]);
  }
}

uint64_t sub_10024EE18(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v3[8] = a1;
  v3[9] = a2;
  v4 = type metadata accessor for SharedBeaconRecord(0);
  v3[10] = v4;
  v3[11] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v4 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10024EE74, v2, 0);
}

uint64_t sub_10024EE74()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  _BOOL4 v7;
  uint64_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v21;

  if (qword_1010E9AC8 != -1)
    swift_once(&qword_1010E9AC8, sub_10024E218);
  v1 = *(_QWORD *)(v0 + 64);
  v2 = *(_QWORD *)(v0 + 88);
  v3 = type metadata accessor for Logger(0);
  sub_10001A9E8(v3, (uint64_t)qword_1010F3BF8);
  v4 = sub_10024F154(v1, v2);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.default.getter(v5);
  v7 = os_log_type_enabled(v5, v6);
  v8 = *(_QWORD *)(v0 + 88);
  if (v7)
  {
    v9 = (uint8_t *)swift_slowAlloc(12, -1);
    v10 = swift_slowAlloc(32, -1);
    v21 = v10;
    *(_DWORD *)v9 = 136315138;
    v11 = type metadata accessor for UUID(0);
    v12 = sub_100006204((unint64_t *)&qword_1010EDAE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v13 = dispatch thunk of CustomStringConvertible.description.getter(v11, v12);
    *(_QWORD *)(v0 + 56) = sub_100016940(v13, v14, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 64, v9 + 4, v9 + 12);
    swift_bridgeObjectRelease();
    sub_10024F198(v8);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Hiding .automatic_legacy because we have .automatic beacon for %s", v9, 0xCu);
    swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v9, -1, -1);
  }
  else
  {
    sub_10024F198(*(_QWORD *)(v0 + 88));
  }

  v15 = *(_QWORD *)(v0 + 88);
  v16 = *(_QWORD *)(v0 + 64);
  v17 = *(_QWORD *)(v0 + 72);
  *(_QWORD *)(v0 + 40) = *(_QWORD *)(v0 + 80);
  *(_QWORD *)(v0 + 48) = sub_100006204(&qword_1010F4A70, type metadata accessor for SharedBeaconRecord, (uint64_t)&unk_100E6F5CC);
  v18 = sub_100018F08((_QWORD *)(v0 + 16));
  sub_10024F154(v16, (uint64_t)v18);
  type metadata accessor for Transaction(0);
  v19 = (_QWORD *)swift_task_alloc(48);
  v19[2] = v0 + 16;
  v19[3] = v17;
  v19[4] = 0;
  v19[5] = 0;
  static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd.KeyGenerationOperation", 52, 2, sub_10024F1D4, v19, &type metadata for () + 1);
  swift_task_dealloc(v19);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
  swift_task_dealloc(v15);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10024F110()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 112));
  swift_defaultActor_destroy(v0);
  return swift_defaultActor_deallocate(v0);
}

uint64_t _s23HiddenBeaconCoordinatorCMa()
{
  return objc_opt_self(_TtCC12searchpartyd11BeaconStore23HiddenBeaconCoordinator);
}

uint64_t sub_10024F154(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SharedBeaconRecord(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10024F198(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for SharedBeaconRecord(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10024F1D4(uint64_t a1)
{
  uint64_t v1;

  return sub_100DCB37C(a1, *(_QWORD **)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40));
}

uint64_t sub_10024F1F0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  void (*v27)(char *, char *, uint64_t);
  char *v28;
  void (*v29)(_BYTE *, _QWORD);
  Swift::String v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE v35[32];

  v34 = a1;
  v1 = sub_10001A9A8(&qword_1010F2C10);
  __chkstk_darwin(v1);
  v3 = (char *)&v31 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = type metadata accessor for URLComponents(0);
  v4 = *(_QWORD *)(v33 - 8);
  __chkstk_darwin(v33);
  v32 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for FMNAccountType(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10001A9A8(&qword_1010FBA40);
  __chkstk_darwin(v10);
  v12 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for URL(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for FMNAuthenticationProvider(0);
  (*(void (**)(char *, _QWORD, uint64_t))(v7 + 104))(v9, enum case for FMNAccountType.secureLocations(_:), v6);
  static FMNAuthenticationProvider.configurationURL(accountType:)(v9);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
  {
    v17 = &qword_1010FBA40;
    v18 = (uint64_t)v12;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v16, v12, v13);
    URLComponents.init(url:resolvingAgainstBaseURL:)(v16, 0);
    v19 = v33;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v3, 1, v33) != 1)
    {
      v27 = *(void (**)(char *, char *, uint64_t))(v4 + 32);
      v28 = v32;
      v27(v32, v3, v19);
      v29 = (void (*)(_BYTE *, _QWORD))URLComponents.path.modify(v35);
      v30._countAndFlagsBits = 0x74696D627573;
      v30._object = (void *)0xE600000000000000;
      String.append(_:)(v30);
      v29(v35, 0);
      (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
      return ((uint64_t (*)(uint64_t, char *, uint64_t))v27)(v34, v28, v19);
    }
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
    v17 = &qword_1010F2C10;
    v18 = (uint64_t)v3;
  }
  sub_100004048(v18, v17);
  if (qword_1010EA098 != -1)
    swift_once(&qword_1010EA098, sub_10098F7D8);
  v20 = type metadata accessor for Logger(0);
  v21 = sub_10001A9E8(v20, (uint64_t)qword_1011B7A18);
  v22 = Logger.logObject.getter(v21);
  v23 = static os_log_type_t.default.getter(v22);
  if (os_log_type_enabled(v22, v23))
  {
    v24 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v24 = 0;
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "No url found in account bag.", v24, 2u);
    swift_slowDealloc(v24, -1, -1);
  }

  URLComponents.init()(v25);
  URLComponents.scheme.setter(0x7370747468, 0xE500000000000000);
  URLComponents.path.setter();
  return URLComponents.host.setter();
}

uint64_t sub_10024F5A4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  id v29;
  id v30;
  unsigned int v31;
  NSString v32;
  id v33;
  uint64_t v34;
  void *v35;
  void *v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  uint8_t *v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(char *, uint64_t, uint64_t);
  char *v44;
  void (*v45)(uint64_t *, _QWORD);
  Swift::String v46;
  Swift::String v48;
  Swift::String v49;
  uint64_t v50;
  char *v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55[4];
  uint64_t v56;
  uint64_t v57;

  v54 = a1;
  v1 = sub_10001A9A8(&qword_1010F2C10);
  __chkstk_darwin(v1);
  v52 = (char *)&v50 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for URLComponents(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v53 = (char *)&v50 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  v51 = (char *)&v50 - v7;
  v8 = type metadata accessor for FMNAccountType(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v50 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10001A9A8(&qword_1010FBA40);
  __chkstk_darwin(v12);
  v14 = (char *)&v50 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for URL(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (char *)&v50 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for FMNAuthenticationProvider(0);
  (*(void (**)(char *, _QWORD, uint64_t))(v9 + 104))(v11, enum case for FMNAccountType.ownedDeviceLocations(_:), v8);
  static FMNAuthenticationProvider.configurationURL(accountType:)(v11);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15) == 1)
  {
    sub_100004048((uint64_t)v14, &qword_1010FBA40);
    v19 = v3;
    v20 = v4;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v18, v14, v15);
    v21 = (uint64_t)v52;
    URLComponents.init(url:resolvingAgainstBaseURL:)(v18, 0);
    v19 = v3;
    v20 = v4;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v21, 1, v3) != 1)
    {
      v43 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 32);
      v44 = v51;
      v43(v51, v21, v3);
      v45 = (void (*)(uint64_t *, _QWORD))URLComponents.path.modify(v55);
      v46._countAndFlagsBits = 0x696D6275732F3276;
      v46._object = (void *)0xE900000000000074;
      String.append(_:)(v46);
      v45(v55, 0);
      (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
      return ((uint64_t (*)(uint64_t, char *, uint64_t))v43)(v54, v44, v3);
    }
    (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
    sub_100004048(v21, &qword_1010F2C10);
  }
  v22 = v53;
  if (qword_1010EA098 != -1)
    swift_once(&qword_1010EA098, sub_10098F7D8);
  v23 = type metadata accessor for Logger(0);
  v24 = sub_10001A9E8(v23, (uint64_t)qword_1011B7A18);
  v25 = Logger.logObject.getter(v24);
  v26 = static os_log_type_t.default.getter(v25);
  if (os_log_type_enabled(v25, v26))
  {
    v27 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v27 = 0;
    _os_log_impl((void *)&_mh_execute_header, v25, v26, "No url found in account bag.", v27, 2u);
    swift_slowDealloc(v27, -1, -1);
  }

  URLComponents.init()(v28);
  URLComponents.scheme.setter(0x7370747468, 0xE500000000000000);
  v29 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v30 = objc_msgSend((id)objc_opt_self(FMSystemInfo), "sharedInstance");
  v31 = objc_msgSend(v30, "isInternalBuild");

  if (v31
    && (v32 = String._bridgeToObjectiveC()(),
        v33 = objc_msgSend(v29, "stringForKey:", v32),
        v32,
        v33))
  {
    v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(v33);
    v36 = v35;

    swift_bridgeObjectRetain_n(v36, 2);
    v38 = Logger.logObject.getter(v37);
    v39 = static os_log_type_t.default.getter(v38);
    if (os_log_type_enabled(v38, v39))
    {
      v40 = (uint8_t *)swift_slowAlloc(12, -1);
      v41 = swift_slowAlloc(32, -1);
      v55[0] = v41;
      *(_DWORD *)v40 = 136315138;
      swift_bridgeObjectRetain(v36);
      v56 = sub_100016940(v34, (unint64_t)v36, v55);
      v22 = v53;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v56, &v57, v40 + 4, v40 + 12);
      swift_bridgeObjectRelease_n(v36, 3);
      _os_log_impl((void *)&_mh_execute_header, v38, v39, "Override url found in user defaults %s. ", v40, 0xCu);
      swift_arrayDestroy(v41, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v41, -1, -1);
      swift_slowDealloc(v40, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v36, 2);
    }
    v42 = v54;
    v55[0] = 47;
    v55[1] = 0xE100000000000000;
    v48._countAndFlagsBits = v34;
    v48._object = v36;
    String.append(_:)(v48);
    swift_bridgeObjectRelease();
    v49._countAndFlagsBits = 0x6D6275732F32762FLL;
    v49._object = (void *)0xEA00000000007469;
    String.append(_:)(v49);
    URLComponents.path.setter();
  }
  else
  {

    URLComponents.path.setter();
    v42 = v54;
  }
  URLComponents.host.setter();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v20 + 32))(v42, v22, v19);
}

uint64_t sub_10024FC00@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for FMNAccountType(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t sub_10024FC38@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 20);
  v5 = type metadata accessor for URLComponents(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t sub_10024FC78(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  __int128 v12;
  __int128 v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v18;
  char v19;
  _OWORD v20[5];

  v3 = v1;
  v5 = sub_10001A9A8(&qword_1010F3E20);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  v11 = sub_100251534();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for SecureLocationsSubmitRequestBody.CodingKeys, &type metadata for SecureLocationsSubmitRequestBody.CodingKeys, v11, v9, v10);
  v12 = *(_OWORD *)(v3 + 48);
  v20[2] = *(_OWORD *)(v3 + 32);
  v20[3] = v12;
  v20[4] = *(_OWORD *)(v3 + 64);
  v13 = *(_OWORD *)(v3 + 16);
  v20[0] = *(_OWORD *)v3;
  v20[1] = v13;
  v19 = 0;
  v14 = sub_100251578();
  KeyedEncodingContainer.encode<A>(_:forKey:)(v20, &v19, v5, &type metadata for SecureLocationsPublishClientContext, v14);
  if (!v2)
  {
    *(_QWORD *)&v20[0] = *(_QWORD *)(v3 + 80);
    v19 = 1;
    v15 = sub_10001A9A8(&qword_1010F3E38);
    v16 = sub_1002515BC();
    KeyedEncodingContainer.encode<A>(_:forKey:)(v20, &v19, v5, v15, v16);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10024FDD8()
{
  _BYTE *v0;

  if (*v0)
    return 0x74696D627573;
  else
    return 0x6F43746E65696C63;
}

uint64_t sub_10024FE1C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1002519C0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10024FE40(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100251534();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10024FE68(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100251534();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10024FE90(_QWORD *a1)
{
  return sub_10024FC78(a1);
}

uint64_t sub_10024FEA4()
{
  return 0x65566769666E6F63;
}

uint64_t sub_10024FEC8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v6;
  uint64_t result;
  char v8;

  if (a1 == 0x65566769666E6F63 && a2 == 0xED00006E6F697372)
  {
    result = swift_bridgeObjectRelease(0xED00006E6F697372);
    v8 = 0;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x65566769666E6F63, 0xED00006E6F697372, a1, a2, 0);
    result = swift_bridgeObjectRelease(a2);
    v8 = v6 ^ 1;
  }
  *a3 = v8 & 1;
  return result;
}

uint64_t sub_10024FF80(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100251664();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10024FFA8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100251664();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10024FFD0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t result;
  uint64_t v17;

  v5 = sub_10001A9A8(&qword_1010F3E50);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10001AA44(a1, v9);
  v11 = sub_100251664();
  v12 = dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for SecureLocationsSubmitResponseBody.CodingKeys, &type metadata for SecureLocationsSubmitResponseBody.CodingKeys, v11, v9, v10);
  if (v2)
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  v13 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v12, v5);
  v15 = v14;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  result = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  *(_QWORD *)a2 = v13;
  *(_BYTE *)(a2 + 8) = v15 & 1;
  return result;
}

uint64_t sub_1002500FC(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)(v3 + 160) = a1;
  *(_QWORD *)(v3 + 168) = a2;
  v4 = *a2;
  *(_QWORD *)(v3 + 176) = a3;
  *(_QWORD *)(v3 + 184) = v4;
  *(_OWORD *)(v3 + 192) = *(_OWORD *)(a2 + 1);
  *(_QWORD *)(v3 + 208) = a2[3];
  *(_OWORD *)(v3 + 216) = *((_OWORD *)a2 + 2);
  *(_BYTE *)(v3 + 408) = *((_BYTE *)a2 + 48);
  *(_QWORD *)(v3 + 232) = a2[7];
  *(_OWORD *)(v3 + 240) = *((_OWORD *)a2 + 4);
  v5 = type metadata accessor for HashAlgorithm(0);
  *(_QWORD *)(v3 + 256) = v5;
  v6 = *(_QWORD *)(v5 - 8);
  *(_QWORD *)(v3 + 264) = v6;
  *(_QWORD *)(v3 + 272) = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Date(0);
  *(_QWORD *)(v3 + 280) = v7;
  v8 = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v3 + 288) = v8;
  *(_QWORD *)(v3 + 296) = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1002501BC, 0, 0);
}

id sub_1002501BC()
{
  uint64_t v0;
  unint64_t *v1;
  unint64_t v2;
  id result;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  __n128 v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  char v36;
  uint64_t v37;
  uint64_t (__cdecl *v38)();

  if (*(_QWORD *)(*(_QWORD *)(v0 + 160) + 16))
  {
    v1 = (unint64_t *)(v0 + 104);
    v2 = sub_1006B8DC4((uint64_t)_swiftEmptyArrayStorage);
    *(_QWORD *)(v0 + 104) = v2;
    result = objc_msgSend((id)objc_opt_self(AKDevice), "currentDevice");
    if (result)
    {
      v4 = result;
      v5 = objc_msgSend(result, "serverFriendlyDescription");

      if (v5)
      {
        v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
        v8 = v7;

        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v2);
        *v1 = 0x8000000000000000;
        sub_100109D28(v6, v8, 0xD000000000000011, 0x8000000100ECA2C0, isUniquelyReferenced_nonNull_native);
        swift_bridgeObjectRelease();
      }
      else
      {
        sub_100102BE0(0xD000000000000011, 0x8000000100ECA2C0);
        swift_bridgeObjectRelease();
        v2 = *v1;
      }
      v11 = *(_QWORD *)(v0 + 288);
      v12 = *(_QWORD *)(v0 + 296);
      v13 = *(_QWORD *)(v0 + 280);
      v14 = *(_QWORD *)(v0 + 224);
      v37 = *(_QWORD *)(v0 + 232);
      v36 = *(_BYTE *)(v0 + 408);
      v15 = *(_QWORD *)(v0 + 216);
      v33 = *(_OWORD *)(v0 + 184);
      v34 = *(_OWORD *)(v0 + 200);
      v16 = *(_QWORD *)(v0 + 160);
      v35 = *(_OWORD *)(v0 + 240);
      v17 = swift_isUniquelyReferenced_nonNull_native(v2);
      sub_100109D28(49, 0xE100000000000000, 0x562D747065636341, 0xEE006E6F69737265, v17);
      swift_bridgeObjectRelease();
      v18 = swift_isUniquelyReferenced_nonNull_native(v2);
      sub_100109D28(0xD000000000000010, 0x8000000100ECC390, 0x2D746E65746E6F43, 0xEC00000065707954, v18);
      v19 = v2;
      v20 = swift_bridgeObjectRelease();
      v21 = Date.init()(v20);
      v22 = Date.epoch.getter(v21);
      (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v12, v13);
      *(_QWORD *)(v0 + 144) = v22;
      v23 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int64, &protocol witness table for Int64);
      v25 = v24;
      v26 = swift_isUniquelyReferenced_nonNull_native(v19);
      *(_QWORD *)(v0 + 104) = 0x8000000000000000;
      sub_100109D28(v23, v25, 0xD000000000000015, 0x8000000100ECC3B0, v26);
      *(_QWORD *)(v0 + 104) = v19;
      swift_bridgeObjectRelease();
      v27 = type metadata accessor for JSONEncoder(0);
      swift_allocObject(v27, *(unsigned int *)(v27 + 48), *(unsigned __int16 *)(v27 + 52));
      *(_QWORD *)(v0 + 304) = JSONEncoder.init()(v28);
      *(_OWORD *)(v0 + 16) = v33;
      *(_OWORD *)(v0 + 32) = v34;
      *(_QWORD *)(v0 + 48) = v15;
      *(_QWORD *)(v0 + 56) = v14;
      *(_BYTE *)(v0 + 64) = v36;
      *(_QWORD *)(v0 + 72) = v37;
      *(_OWORD *)(v0 + 80) = v35;
      *(_QWORD *)(v0 + 96) = v16;
      v29 = sub_100250C0C();
      *(_QWORD *)(v0 + 312) = dispatch thunk of JSONEncoder.encode<A>(_:)(v0 + 16, &type metadata for SecureLocationsSubmitRequestBody, v29);
      *(_QWORD *)(v0 + 320) = v30;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v38 = (uint64_t (__cdecl *)())((char *)&dword_101115300 + dword_101115300);
      v32 = (_QWORD *)swift_task_alloc(unk_101115304);
      *(_QWORD *)(v0 + 328) = v32;
      *v32 = v0;
      v32[1] = sub_1002506DC;
      return (id)v38();
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    v10 = *(_QWORD **)(v0 + 168);
    swift_release();
    swift_bridgeObjectRelease();
    sub_100250C50(v10);
    v31 = *(_QWORD *)(v0 + 272);
    swift_task_dealloc(*(_QWORD *)(v0 + 296));
    swift_task_dealloc(v31);
    return (id)(*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v0 + 8))(0, 0, 0);
  }
  return result;
}

uint64_t sub_1002506DC(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 328);
  *(_QWORD *)(v3 + 336) = a1;
  *(_QWORD *)(v3 + 344) = a2;
  swift_task_dealloc(v4);
  return swift_task_switch(sub_100250738, 0, 0);
}

uint64_t sub_100250738()
{
  _QWORD *v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  char *v15;

  v2 = v0[42];
  v1 = v0[43];
  v4 = v0[39];
  v3 = v0[40];
  v6 = v0[33];
  v5 = v0[34];
  v7 = v0[32];
  v0[16] = v2;
  v0[17] = v1;
  sub_10001BBBC(v2, v1);
  sub_10001BBBC(v4, v3);
  sub_10078E27C(v4, v3);
  sub_10001BC14(v4, v3);
  sub_10001BC14(v2, v1);
  v8 = v0[16];
  v9 = v0[17];
  v0[44] = v8;
  v0[45] = v9;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v6 + 104))(v5, enum case for HashAlgorithm.sha256(_:), v7);
  v10 = Data.hash(algorithm:)(v5, v8, v9);
  v12 = v11;
  v0[46] = v10;
  v0[47] = v11;
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  v15 = (char *)&dword_1011152F8 + dword_1011152F8;
  v13 = (_QWORD *)swift_task_alloc(unk_1011152FC);
  v0[48] = v13;
  *v13 = v0;
  v13[1] = sub_100250864;
  return ((uint64_t (*)(uint64_t, uint64_t, _QWORD))v15)(v10, v12, v0[22]);
}

uint64_t sub_100250864(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t v7;
  unint64_t v8;

  v4 = *(_QWORD **)v2;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 384);
  *(_QWORD *)(*(_QWORD *)v2 + 392) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = sub_1002509D4;
  }
  else
  {
    v7 = v4[46];
    v8 = v4[47];
    v4[50] = a1;
    sub_10001BC14(v7, v8);
    v6 = sub_1002508E0;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_1002508E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = *(_QWORD *)(v0 + 104);
  v3 = *(_QWORD *)(v0 + 392);
  v2 = *(_QWORD *)(v0 + 400);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v1);
  v12 = v1;
  *(_QWORD *)(v0 + 104) = 0x8000000000000000;
  sub_1001664D0(v2, (uint64_t)sub_100B27BE4, 0, isUniquelyReferenced_nonNull_native, &v12);
  if (v3)
    return swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(v0 + 352);
  v7 = *(_QWORD *)(v0 + 360);
  *(_QWORD *)(v0 + 104) = v12;
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  sub_10001BC14(v6, v7);
  v8 = *(_QWORD *)(v0 + 104);
  v10 = *(_QWORD *)(v0 + 312);
  v9 = *(_QWORD *)(v0 + 320);
  v11 = *(_QWORD *)(v0 + 272);
  swift_task_dealloc(*(_QWORD *)(v0 + 296));
  swift_task_dealloc(v11);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 8))(v8, v10, v9);
}

uint64_t sub_1002509D4()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  BOOL v8;
  uint64_t v9;
  uint8_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v1 = *(_QWORD *)(v0 + 352);
  v2 = *(_QWORD *)(v0 + 360);
  sub_10001BC14(*(_QWORD *)(v0 + 368), *(_QWORD *)(v0 + 376));
  sub_10001BC14(v1, v2);
  if (qword_1010EA030 != -1)
    swift_once(&qword_1010EA030, sub_1008F4BD0);
  v3 = *(_QWORD *)(v0 + 392);
  v4 = type metadata accessor for Logger(0);
  sub_10001A9E8(v4, (uint64_t)qword_1011B78E0);
  swift_errorRetain(v3);
  v5 = swift_errorRetain(v3);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.error.getter(v6);
  v8 = os_log_type_enabled(v6, v7);
  v9 = *(_QWORD *)(v0 + 392);
  if (v8)
  {
    v10 = (uint8_t *)swift_slowAlloc(12, -1);
    v11 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v10 = 138543362;
    swift_errorRetain(v9);
    v12 = _swift_stdlib_bridgeErrorToNSError(v9);
    *(_QWORD *)(v0 + 152) = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 152, v0 + 160, v10 + 4, v10 + 12);
    *v11 = v12;
    swift_errorRelease(v9);
    swift_errorRelease(v9);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Failed to generate attestation header: %{public}@.", v10, 0xCu);
    v13 = sub_10001A9A8((uint64_t *)&unk_1010EB900);
    swift_arrayDestroy(v11, 1, v13);
    swift_slowDealloc(v11, -1, -1);
    swift_slowDealloc(v10, -1, -1);
    swift_release();
    swift_release();

    swift_errorRelease(v9);
  }
  else
  {
    swift_release();
    swift_errorRelease(v9);
    swift_errorRelease(v9);
    swift_errorRelease(v9);
    swift_release();

  }
  v14 = *(_QWORD *)(v0 + 104);
  v16 = *(_QWORD *)(v0 + 312);
  v15 = *(_QWORD *)(v0 + 320);
  v17 = *(_QWORD *)(v0 + 272);
  swift_task_dealloc(*(_QWORD *)(v0 + 296));
  swift_task_dealloc(v17);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 8))(v14, v16, v15);
}

unint64_t sub_100250C0C()
{
  unint64_t result;

  result = qword_1010F3CF8;
  if (!qword_1010F3CF8)
  {
    result = swift_getWitnessTable("i<#", &type metadata for SecureLocationsSubmitRequestBody);
    atomic_store(result, (unint64_t *)&qword_1010F3CF8);
  }
  return result;
}

_QWORD *sub_100250C50(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = a1[1];
  v3 = a1[3];
  v4 = a1[5];
  v5 = a1[8];
  swift_bridgeObjectRelease(a1[9]);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v2);
  return a1;
}

uint64_t sub_100250CCC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100250CD8);
}

uint64_t sub_100250CDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100250CE8);
}

uint64_t type metadata accessor for OwnedDeviceSubmitEndpoint(uint64_t a1)
{
  return sub_10001B630(a1, qword_1010F3D58, (uint64_t)&nominal type descriptor for OwnedDeviceSubmitEndpoint);
}

uint64_t initializeBufferWithCopyOfBuffer for OwnedBeaconGroup.Version(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for OwnedBeaconGroup.Version(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for SecureLocationsSubmitResponseBody(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 9) = v3;
  return result;
}

ValueMetadata *type metadata accessor for SecureLocationsSubmitResponseBody()
{
  return &type metadata for SecureLocationsSubmitResponseBody;
}

uint64_t destroy for SecureLocationsSubmitRequestBody(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[5]);
  swift_bridgeObjectRelease(a1[8]);
  swift_bridgeObjectRelease(a1[9]);
  return swift_bridgeObjectRelease(a1[10]);
}

uint64_t initializeWithCopy for SecureLocationsSubmitRequestBody(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v6 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v6;
  v7 = *(_QWORD *)(a2 + 72);
  v8 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = v7;
  *(_QWORD *)(a1 + 80) = v8;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  return a1;
}

uint64_t assignWithCopy for SecureLocationsSubmitRequestBody(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  v10 = *(_QWORD *)(a2 + 64);
  v11 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  v12 = *(_QWORD *)(a2 + 72);
  v13 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  v14 = *(_QWORD *)(a2 + 80);
  v15 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  return a1;
}

__n128 initializeWithTake for SecureLocationsSubmitRequestBody(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t assignWithTake for SecureLocationsSubmitRequestBody(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v8;
  swift_bridgeObjectRelease(v9);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 64));
  v10 = *(_QWORD *)(a1 + 72);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  swift_bridgeObjectRelease(v10);
  v11 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRelease(v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for SecureLocationsSubmitRequestBody(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 88))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SecureLocationsSubmitRequestBody(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 88) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 88) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SecureLocationsSubmitRequestBody()
{
  return &type metadata for SecureLocationsSubmitRequestBody;
}

ValueMetadata *type metadata accessor for SecureLocationsSubmitRequest()
{
  return &type metadata for SecureLocationsSubmitRequest;
}

uint64_t *sub_100251098(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v12);
  }
  else
  {
    v7 = type metadata accessor for FMNAccountType(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for URLComponents(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
  }
  return a1;
}

uint64_t sub_100251140(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = type metadata accessor for FMNAccountType(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + *(int *)(a2 + 20);
  v6 = type metadata accessor for URLComponents(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
}

uint64_t sub_10025119C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = type metadata accessor for FMNAccountType(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for URLComponents(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  return a1;
}

uint64_t sub_100251218(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = type metadata accessor for FMNAccountType(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for URLComponents(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  return a1;
}

uint64_t sub_100251294(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = type metadata accessor for FMNAccountType(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for URLComponents(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  return a1;
}

uint64_t sub_100251310(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = type metadata accessor for FMNAccountType(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for URLComponents(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t sub_10025138C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100251398);
}

uint64_t sub_10025139C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  v6 = type metadata accessor for FMNAccountType(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v8 = type metadata accessor for URLComponents(0);
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t sub_100251410(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10025141C);
}

uint64_t sub_100251420(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v8 = type metadata accessor for FMNAccountType(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v10 = type metadata accessor for URLComponents(0);
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t type metadata accessor for SecureLocationsSubmitEndpoint(uint64_t a1)
{
  return sub_10001B630(a1, qword_1010F3DE8, (uint64_t)&nominal type descriptor for SecureLocationsSubmitEndpoint);
}

uint64_t sub_1002514B0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[2];

  result = type metadata accessor for FMNAccountType(319);
  if (v3 <= 0x3F)
  {
    v5[0] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for URLComponents(319);
    if (v4 <= 0x3F)
    {
      v5[1] = *(_QWORD *)(result - 8) + 64;
      swift_initStructMetadata(a1, 256, 2, v5, a1 + 16);
      return 0;
    }
  }
  return result;
}

unint64_t sub_100251534()
{
  unint64_t result;

  result = qword_1010F3E28;
  if (!qword_1010F3E28)
  {
    result = swift_getWitnessTable(byte_100E2EF14, &type metadata for SecureLocationsSubmitRequestBody.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F3E28);
  }
  return result;
}

unint64_t sub_100251578()
{
  unint64_t result;

  result = qword_1010F3E30;
  if (!qword_1010F3E30)
  {
    result = swift_getWitnessTable("-Y#", &type metadata for SecureLocationsPublishClientContext);
    atomic_store(result, (unint64_t *)&qword_1010F3E30);
  }
  return result;
}

unint64_t sub_1002515BC()
{
  unint64_t result;
  uint64_t v1;
  unint64_t v2;

  result = qword_1010F3E40;
  if (!qword_1010F3E40)
  {
    v1 = sub_10001F784(&qword_1010F3E38);
    v2 = sub_100251620();
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <A> [A], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_1010F3E40);
  }
  return result;
}

unint64_t sub_100251620()
{
  unint64_t result;

  result = qword_1010F3E48;
  if (!qword_1010F3E48)
  {
    result = swift_getWitnessTable(asc_100E3E320, &type metadata for SecureLocationsEncodedPayload);
    atomic_store(result, (unint64_t *)&qword_1010F3E48);
  }
  return result;
}

unint64_t sub_100251664()
{
  unint64_t result;

  result = qword_1010F3E58;
  if (!qword_1010F3E58)
  {
    result = swift_getWitnessTable(byte_100E2EEC4, &type metadata for SecureLocationsSubmitResponseBody.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F3E58);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for SecureLocationsSubmitResponseBody.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1002516E8 + 4 * byte_100E2EB50[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_100251708 + 4 * byte_100E2EB55[v4]))();
}

_BYTE *sub_1002516E8(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_100251708(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100251710(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100251718(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100251720(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100251728(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for SecureLocationsSubmitResponseBody.CodingKeys()
{
  return &type metadata for SecureLocationsSubmitResponseBody.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for SecureLocationsSubmitRequestBody.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_100251790 + 4 * byte_100E2EB5F[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1002517C4 + 4 * byte_100E2EB5A[v4]))();
}

uint64_t sub_1002517C4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1002517CC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1002517D4);
  return result;
}

uint64_t sub_1002517E0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1002517E8);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1002517EC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1002517F4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SecureLocationsSubmitRequestBody.CodingKeys()
{
  return &type metadata for SecureLocationsSubmitRequestBody.CodingKeys;
}

unint64_t sub_100251814()
{
  unint64_t result;

  result = qword_1010F3E60;
  if (!qword_1010F3E60)
  {
    result = swift_getWitnessTable(byte_100E2EDE4, &type metadata for SecureLocationsSubmitRequestBody.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F3E60);
  }
  return result;
}

unint64_t sub_10025185C()
{
  unint64_t result;

  result = qword_1010F3E68;
  if (!qword_1010F3E68)
  {
    result = swift_getWitnessTable("-;#", &type metadata for SecureLocationsSubmitResponseBody.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F3E68);
  }
  return result;
}

unint64_t sub_1002518A4()
{
  unint64_t result;

  result = qword_1010F3E70;
  if (!qword_1010F3E70)
  {
    result = swift_getWitnessTable("u;#", &type metadata for SecureLocationsSubmitResponseBody.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F3E70);
  }
  return result;
}

unint64_t sub_1002518EC()
{
  unint64_t result;

  result = qword_1010F3E78;
  if (!qword_1010F3E78)
  {
    result = swift_getWitnessTable("];#", &type metadata for SecureLocationsSubmitResponseBody.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F3E78);
  }
  return result;
}

unint64_t sub_100251934()
{
  unint64_t result;

  result = qword_1010F3E80;
  if (!qword_1010F3E80)
  {
    result = swift_getWitnessTable("-<#", &type metadata for SecureLocationsSubmitRequestBody.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F3E80);
  }
  return result;
}

unint64_t sub_10025197C()
{
  unint64_t result;

  result = qword_1010F3E88;
  if (!qword_1010F3E88)
  {
    result = swift_getWitnessTable(byte_100E2ED7C, &type metadata for SecureLocationsSubmitRequestBody.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F3E88);
  }
  return result;
}

uint64_t sub_1002519C0(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 0x6F43746E65696C63 && a2 == 0xED0000747865746ELL)
  {
    v5 = 0xED0000747865746ELL;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6F43746E65696C63, 0xED0000747865746ELL, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x74696D627573 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease(0xE600000000000000);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x74696D627573, 0xE600000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

_OWORD *sub_100251ACC(_OWORD *a1, uint64_t a2, uint64_t a3)
{
  _OWORD *v4;
  int v5;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  const void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v8 = *(_QWORD *)a2;
    *(_QWORD *)v4 = *(_QWORD *)a2;
    v4 = (_OWORD *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = *(_QWORD *)(a2 + 8);
    if (v7 >> 60 == 15)
    {
      *a1 = *(_OWORD *)a2;
    }
    else
    {
      v9 = *(_QWORD *)a2;
      sub_10001BBBC(*(_QWORD *)a2, *(_QWORD *)(a2 + 8));
      *(_QWORD *)v4 = v9;
      *((_QWORD *)v4 + 1) = v7;
    }
    v10 = (uint64_t *)(a2 + 16);
    v11 = *(_QWORD *)(a2 + 24);
    if (v11 >> 60 == 15)
    {
      v4[1] = *(_OWORD *)v10;
    }
    else
    {
      v12 = *v10;
      sub_10001BBBC(*v10, *(_QWORD *)(a2 + 24));
      *((_QWORD *)v4 + 2) = v12;
      *((_QWORD *)v4 + 3) = v11;
    }
    v13 = (uint64_t *)(a2 + 32);
    v14 = *(_QWORD *)(a2 + 40);
    if (v14 >> 60 == 15)
    {
      v4[2] = *(_OWORD *)v13;
    }
    else
    {
      v15 = *v13;
      sub_10001BBBC(*v13, *(_QWORD *)(a2 + 40));
      *((_QWORD *)v4 + 4) = v15;
      *((_QWORD *)v4 + 5) = v14;
    }
    v16 = *(int *)(a3 + 28);
    v17 = (char *)v4 + v16;
    v18 = (const void *)(a2 + v16);
    v19 = type metadata accessor for UUID(0);
    v20 = *(_QWORD *)(v19 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
    {
      v21 = sub_10001A9A8(&qword_1010ED860);
      memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, const void *, uint64_t))(v20 + 16))(v17, v18, v19);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
    }
  }
  return v4;
}

uint64_t sub_100251C54(uint64_t *a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  v4 = a1[1];
  if (v4 >> 60 != 15)
    sub_10001BC14(*a1, v4);
  v5 = a1[3];
  if (v5 >> 60 != 15)
    sub_10001BC14(a1[2], v5);
  v6 = a1[5];
  if (v6 >> 60 != 15)
    sub_10001BC14(a1[4], v6);
  v7 = (char *)a1 + *(int *)(a2 + 28);
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v7, v8);
  return result;
}

uint64_t sub_100251D10(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v6 = a2[1];
  if (v6 >> 60 == 15)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    v7 = *a2;
    sub_10001BBBC(*a2, a2[1]);
    *(_QWORD *)a1 = v7;
    *(_QWORD *)(a1 + 8) = v6;
  }
  v8 = a2 + 2;
  v9 = a2[3];
  if (v9 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 16) = *(_OWORD *)v8;
  }
  else
  {
    v10 = *v8;
    sub_10001BBBC(*v8, a2[3]);
    *(_QWORD *)(a1 + 16) = v10;
    *(_QWORD *)(a1 + 24) = v9;
  }
  v11 = a2 + 4;
  v12 = a2[5];
  if (v12 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 32) = *(_OWORD *)v11;
  }
  else
  {
    v13 = *v11;
    sub_10001BBBC(*v11, a2[5]);
    *(_QWORD *)(a1 + 32) = v13;
    *(_QWORD *)(a1 + 40) = v12;
  }
  v14 = *(int *)(a3 + 28);
  v15 = (void *)(a1 + v14);
  v16 = (char *)a2 + v14;
  v17 = type metadata accessor for UUID(0);
  v18 = *(_QWORD *)(v17 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
  {
    v19 = sub_10001A9A8(&qword_1010ED860);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(v18 + 16))(v15, v16, v17);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
  }
  return a1;
}

uint64_t *sub_100251E6C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(char *, uint64_t, uint64_t);
  int v29;
  int v30;
  uint64_t v31;

  v6 = *(_QWORD *)(a2 + 8);
  if ((unint64_t)a1[1] >> 60 == 15)
  {
    if (v6 >> 60 != 15)
    {
      v7 = *(_QWORD *)a2;
      sub_10001BBBC(*(_QWORD *)a2, *(_QWORD *)(a2 + 8));
      *a1 = v7;
      a1[1] = v6;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v6 >> 60 == 15)
  {
    sub_1000DC964((uint64_t)a1);
LABEL_6:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_8;
  }
  v8 = *(_QWORD *)a2;
  sub_10001BBBC(*(_QWORD *)a2, *(_QWORD *)(a2 + 8));
  v9 = *a1;
  v10 = a1[1];
  *a1 = v8;
  a1[1] = v6;
  sub_10001BC14(v9, v10);
LABEL_8:
  v11 = (uint64_t *)(a2 + 16);
  v12 = *(_QWORD *)(a2 + 24);
  if ((unint64_t)a1[3] >> 60 == 15)
  {
    if (v12 >> 60 != 15)
    {
      v13 = *v11;
      sub_10001BBBC(*v11, *(_QWORD *)(a2 + 24));
      a1[2] = v13;
      a1[3] = v12;
      goto LABEL_15;
    }
    goto LABEL_13;
  }
  if (v12 >> 60 == 15)
  {
    sub_1000DC964((uint64_t)(a1 + 2));
LABEL_13:
    *((_OWORD *)a1 + 1) = *(_OWORD *)v11;
    goto LABEL_15;
  }
  v14 = *v11;
  sub_10001BBBC(*v11, *(_QWORD *)(a2 + 24));
  v15 = a1[2];
  v16 = a1[3];
  a1[2] = v14;
  a1[3] = v12;
  sub_10001BC14(v15, v16);
LABEL_15:
  v17 = (uint64_t *)(a2 + 32);
  v18 = *(_QWORD *)(a2 + 40);
  if ((unint64_t)a1[5] >> 60 == 15)
  {
    if (v18 >> 60 != 15)
    {
      v19 = *v17;
      sub_10001BBBC(*v17, *(_QWORD *)(a2 + 40));
      a1[4] = v19;
      a1[5] = v18;
      goto LABEL_22;
    }
    goto LABEL_20;
  }
  if (v18 >> 60 == 15)
  {
    sub_1000DC964((uint64_t)(a1 + 4));
LABEL_20:
    *((_OWORD *)a1 + 2) = *(_OWORD *)v17;
    goto LABEL_22;
  }
  v20 = *v17;
  sub_10001BBBC(*v17, *(_QWORD *)(a2 + 40));
  v21 = a1[4];
  v22 = a1[5];
  a1[4] = v20;
  a1[5] = v18;
  sub_10001BC14(v21, v22);
LABEL_22:
  v23 = *(int *)(a3 + 28);
  v24 = (char *)a1 + v23;
  v25 = (char *)(a2 + v23);
  v26 = type metadata accessor for UUID(0);
  v27 = *(_QWORD *)(v26 - 8);
  v28 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v27 + 48);
  v29 = v28(v24, 1, v26);
  v30 = v28(v25, 1, v26);
  if (!v29)
  {
    if (!v30)
    {
      (*(void (**)(char *, char *, uint64_t))(v27 + 24))(v24, v25, v26);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v27 + 8))(v24, v26);
    goto LABEL_27;
  }
  if (v30)
  {
LABEL_27:
    v31 = sub_10001A9A8(&qword_1010ED860);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v27 + 16))(v24, v25, v26);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
  return a1;
}

_OWORD *sub_1002520E0(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  a1[2] = a2[2];
  v5 = *(int *)(a3 + 28);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8))
  {
    v10 = sub_10001A9A8(&qword_1010ED860);
    memcpy(v6, v7, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v6, v7, v8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v6, 0, 1, v8);
  }
  return a1;
}

uint64_t sub_1002521A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(void *, uint64_t, uint64_t);
  int v23;
  int v24;
  uint64_t v25;

  v6 = *(_QWORD *)(a1 + 8);
  if (v6 >> 60 == 15)
    goto LABEL_4;
  v7 = *(_QWORD *)(a2 + 8);
  if (v7 >> 60 == 15)
  {
    sub_1000DC964(a1);
LABEL_4:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_6;
  }
  v8 = *(_QWORD *)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v7;
  sub_10001BC14(v8, v6);
LABEL_6:
  v9 = (_OWORD *)(a2 + 16);
  v10 = *(_QWORD *)(a1 + 24);
  if (v10 >> 60 == 15)
  {
LABEL_9:
    *(_OWORD *)(a1 + 16) = *v9;
    goto LABEL_11;
  }
  v11 = *(_QWORD *)(a2 + 24);
  if (v11 >> 60 == 15)
  {
    sub_1000DC964(a1 + 16);
    goto LABEL_9;
  }
  v12 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)v9;
  *(_QWORD *)(a1 + 24) = v11;
  sub_10001BC14(v12, v10);
LABEL_11:
  v13 = (_OWORD *)(a2 + 32);
  v14 = *(_QWORD *)(a1 + 40);
  if (v14 >> 60 == 15)
  {
LABEL_14:
    *(_OWORD *)(a1 + 32) = *v13;
    goto LABEL_16;
  }
  v15 = *(_QWORD *)(a2 + 40);
  if (v15 >> 60 == 15)
  {
    sub_1000DC964(a1 + 32);
    goto LABEL_14;
  }
  v16 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)v13;
  *(_QWORD *)(a1 + 40) = v15;
  sub_10001BC14(v16, v14);
LABEL_16:
  v17 = *(int *)(a3 + 28);
  v18 = (void *)(a1 + v17);
  v19 = (void *)(a2 + v17);
  v20 = type metadata accessor for UUID(0);
  v21 = *(_QWORD *)(v20 - 8);
  v22 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v21 + 48);
  v23 = v22(v18, 1, v20);
  v24 = v22(v19, 1, v20);
  if (!v23)
  {
    if (!v24)
    {
      (*(void (**)(void *, void *, uint64_t))(v21 + 40))(v18, v19, v20);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v21 + 8))(v18, v20);
    goto LABEL_21;
  }
  if (v24)
  {
LABEL_21:
    v25 = sub_10001A9A8(&qword_1010ED860);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v21 + 32))(v18, v19, v20);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
  return a1;
}

uint64_t sub_100252388(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100252394);
}

uint64_t sub_100252394(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  BOOL v5;
  unsigned int v6;
  uint64_t v10;

  if ((_DWORD)a2 == 11)
  {
    v4 = *(_QWORD *)(a1 + 8) >> 60;
    v5 = ((4 * (_DWORD)v4) & 0xC) == 0;
    v6 = ((4 * v4) & 0xC | (v4 >> 2)) ^ 0xF;
    if (v5)
      return 0;
    else
      return v6;
  }
  else
  {
    v10 = sub_10001A9A8(&qword_1010ED860);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(a1 + *(int *)(a3 + 28), a2, v10);
  }
}

uint64_t sub_100252418(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100252424);
}

char *sub_100252424(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 11)
  {
    *(_QWORD *)result = 0;
    *((_QWORD *)result + 1) = (unint64_t)((~(_DWORD)a2 >> 2) & 3 | (4 * ~(_DWORD)a2)) << 60;
  }
  else
  {
    v7 = sub_10001A9A8(&qword_1010ED860);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 28)], a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for AirPodsLEPairingLockAckResponse(uint64_t a1)
{
  uint64_t result;

  result = qword_1010F3EE8;
  if (!qword_1010F3EE8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AirPodsLEPairingLockAckResponse);
  return result;
}

void sub_1002524E0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[4];

  v4[0] = &unk_100E2EFA0;
  v4[1] = &unk_100E2EFA0;
  v4[2] = &unk_100E2EFA0;
  sub_100252558(319);
  if (v3 <= 0x3F)
  {
    v4[3] = *(_QWORD *)(v2 - 8) + 64;
    swift_initStructMetadata(a1, 256, 4, v4, a1 + 16);
  }
}

void sub_100252558(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_101107400)
  {
    v2 = type metadata accessor for UUID(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_101107400);
  }
}

uint64_t sub_1002525AC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  _QWORD *v29;
  __int128 v30;
  char v31;

  v26 = a2;
  v3 = sub_10001A9A8(&qword_1010ED860);
  __chkstk_darwin(v3);
  v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = sub_10001A9A8(&qword_1010F3F28);
  v6 = *(_QWORD *)(v28 - 8);
  __chkstk_darwin(v28);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for AirPodsLEPairingLockAckResponse(0);
  __chkstk_darwin(v9);
  v11 = (_OWORD *)((char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = a1[3];
  v13 = a1[4];
  sub_10001AA44(a1, v12);
  v14 = sub_1002529C4();
  v27 = v8;
  v15 = v29;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for AirPodsLEPairingLockAckResponse.CodingKeys, &type metadata for AirPodsLEPairingLockAckResponse.CodingKeys, v14, v12, v13);
  if (v15)
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  v29 = a1;
  v16 = v6;
  v25 = v5;
  v31 = 0;
  v17 = sub_100036994();
  v18 = v27;
  v19 = v28;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&type metadata for Data, &v31, v28, &type metadata for Data, v17);
  *v11 = v30;
  v31 = 1;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&type metadata for Data, &v31, v19, &type metadata for Data, v17);
  v11[1] = v30;
  v31 = 2;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&type metadata for Data, &v31, v19, &type metadata for Data, v17);
  v11[2] = v30;
  v20 = type metadata accessor for UUID(0);
  LOBYTE(v30) = 3;
  v21 = sub_100252A08();
  v22 = (uint64_t)v25;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v20, &v30, v19, v20, v21);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v19);
  sub_1001C0884(v22, (uint64_t)v11 + *(int *)(v9 + 28));
  sub_100252A50((uint64_t)v11, v26);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v29);
  return sub_100252A94((uint64_t)v11);
}

uint64_t sub_1002528CC()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1002528F4 + 4 * byte_100E2EF70[*v0]))(1684628325, 0xE400000000000000);
}

uint64_t sub_1002528F4()
{
  return 0x644970696863;
}

uint64_t sub_100252908()
{
  return 0x754E6C6169726573;
}

uint64_t sub_100252928()
{
  return 0x6449616E6D66;
}

uint64_t sub_10025293C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100252C74(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100252960(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1002529C4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100252988(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1002529C4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1002529B0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1002525AC(a1, a2);
}

unint64_t sub_1002529C4()
{
  unint64_t result;

  result = qword_1010F3F30;
  if (!qword_1010F3F30)
  {
    result = swift_getWitnessTable("e:#", &type metadata for AirPodsLEPairingLockAckResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F3F30);
  }
  return result;
}

unint64_t sub_100252A08()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1010EDA90;
  if (!qword_1010EDA90)
  {
    v1 = type metadata accessor for UUID(255);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for UUID, v1);
    atomic_store(result, (unint64_t *)&qword_1010EDA90);
  }
  return result;
}

uint64_t sub_100252A50(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AirPodsLEPairingLockAckResponse(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100252A94(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for AirPodsLEPairingLockAckResponse(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t storeEnumTagSinglePayload for AirPodsLEPairingLockAckResponse.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_100252B1C + 4 * byte_100E2EF79[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_100252B50 + 4 * byte_100E2EF74[v4]))();
}

uint64_t sub_100252B50(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100252B58(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100252B60);
  return result;
}

uint64_t sub_100252B6C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100252B74);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_100252B78(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100252B80(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AirPodsLEPairingLockAckResponse.CodingKeys()
{
  return &type metadata for AirPodsLEPairingLockAckResponse.CodingKeys;
}

unint64_t sub_100252BA0()
{
  unint64_t result;

  result = qword_1010F3F38;
  if (!qword_1010F3F38)
  {
    result = swift_getWitnessTable("}:#", &type metadata for AirPodsLEPairingLockAckResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F3F38);
  }
  return result;
}

unint64_t sub_100252BE8()
{
  unint64_t result;

  result = qword_1010F3F40;
  if (!qword_1010F3F40)
  {
    result = swift_getWitnessTable(byte_100E2EFEC, &type metadata for AirPodsLEPairingLockAckResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F3F40);
  }
  return result;
}

unint64_t sub_100252C30()
{
  unint64_t result;

  result = qword_1010F3F48;
  if (!qword_1010F3F48)
  {
    result = swift_getWitnessTable(byte_100E2F014, &type metadata for AirPodsLEPairingLockAckResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1010F3F48);
  }
  return result;
}

uint64_t sub_100252C74(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  char v9;

  if (a1 == 1684628325 && a2 == 0xE400000000000000)
  {
    v5 = 0xE400000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1684628325, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x644970696863 && a2 == 0xE600000000000000)
  {
    v7 = 0xE600000000000000;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x644970696863, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x754E6C6169726573 && a2 == 0xEC0000007265626DLL)
  {
    v8 = 0xEC0000007265626DLL;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x754E6C6169726573, 0xEC0000007265626DLL, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0x6449616E6D66 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease(0xE600000000000000);
    return 3;
  }
  else
  {
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6449616E6D66, 0xE600000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v9 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t sub_100252E24(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2[7] = a1;
  v2[8] = a2;
  v3 = type metadata accessor for AccessoryUnpairData(0);
  v2[9] = v3;
  v2[10] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for HashAlgorithm(0);
  v2[11] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v2[12] = v5;
  v2[13] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Date(0);
  v2[14] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v2[15] = v7;
  v2[16] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100252ED0, 0, 0);
}

void sub_100252ED0()
{
  _QWORD *v0;
  unint64_t v1;
  char isUniquelyReferenced_nonNull_native;
  id v3;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  unint64_t v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  __n128 v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  void (__cdecl *v38)();

  v1 = sub_1006B8DC4((uint64_t)_swiftEmptyArrayStorage);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v1);
  sub_100109D28(1702195828, 0xE400000000000000, 0xD00000000000001BLL, 0x8000000100ECA2A0, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease();
  v3 = objc_msgSend((id)objc_opt_self(AKDevice), "currentDevice");
  if (v3)
  {
    v4 = v3;
    v5 = objc_msgSend(v3, "serverFriendlyDescription");

    if (v5)
    {
      v6 = v0[15];
      v7 = v0[16];
      v8 = v0[14];
      v36 = v0[7];
      v37 = v0[9];
      v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
      v11 = v10;

      v12 = swift_isUniquelyReferenced_nonNull_native(v1);
      sub_100109D28(v9, v11, 0xD000000000000011, 0x8000000100ECA2C0, v12);
      v13 = v1;
      v14 = swift_bridgeObjectRelease();
      v15 = Date.init()(v14);
      v16 = Date.epoch.getter(v15);
      (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v7, v8);
      v0[4] = v16;
      v17 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int64, &protocol witness table for Int64);
      v19 = v18;
      v20 = swift_isUniquelyReferenced_nonNull_native(v13);
      sub_100109D28(v17, v19, 0xD000000000000015, 0x8000000100ECA2E0, v20);
      swift_bridgeObjectRelease();
      v0[5] = 1;
      v21 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
      v23 = v22;
      v24 = swift_isUniquelyReferenced_nonNull_native(v13);
      sub_100109D28(v21, v23, 0xD000000000000013, 0x8000000100ECA300, v24);
      v25 = v13;
      swift_bridgeObjectRelease();
      v26 = sub_100AC2EB8();
      v28 = v27;
      v29 = swift_isUniquelyReferenced_nonNull_native(v25);
      sub_100109D28((uint64_t)v26, v28, 0x6567412D72657355, 0xEA0000000000746ELL, v29);
      v0[17] = v25;
      swift_bridgeObjectRelease();
      v30 = type metadata accessor for JSONEncoder(0);
      swift_allocObject(v30, *(unsigned int *)(v30 + 48), *(unsigned __int16 *)(v30 + 52));
      v0[18] = JSONEncoder.init()(v31);
      v32 = sub_100253DCC();
      v33 = dispatch thunk of JSONEncoder.encode<A>(_:)(v36, v37, v32);
      v0[19] = v33;
      v0[20] = v34;
      sub_10001BBBC(v33, v34);
      v38 = (void (__cdecl *)())((char *)&dword_101115340 + dword_101115340);
      v35 = (_QWORD *)swift_task_alloc(unk_101115344);
      v0[21] = v35;
      *v35 = v0;
      v35[1] = sub_10025332C;
      v38();
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

uint64_t sub_10025332C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *v2;
  v4 = *(_QWORD *)(*v2 + 168);
  *(_QWORD *)(v3 + 176) = a1;
  *(_QWORD *)(v3 + 184) = a2;
  swift_task_dealloc(v4);
  return swift_task_switch(sub_100253388, 0, 0);
}

uint64_t sub_100253388()
{
  _QWORD *v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  char *v15;

  v2 = v0[22];
  v1 = v0[23];
  v4 = v0[19];
  v3 = v0[20];
  v6 = v0[12];
  v5 = v0[13];
  v7 = v0[11];
  v0[2] = v2;
  v0[3] = v1;
  sub_10001BBBC(v4, v3);
  sub_10001BBBC(v2, v1);
  sub_10078E27C(v4, v3);
  sub_10001BC14(v4, v3);
  sub_10001BC14(v2, v1);
  v8 = v0[2];
  v9 = v0[3];
  v0[24] = v8;
  v0[25] = v9;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v6 + 104))(v5, enum case for HashAlgorithm.sha256(_:), v7);
  v10 = Data.hash(algorithm:)(v5, v8, v9);
  v12 = v11;
  v0[26] = v10;
  v0[27] = v11;
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  v15 = (char *)&dword_101115338 + dword_101115338;
  v13 = (_QWORD *)swift_task_alloc(unk_10111533C);
  v0[28] = v13;
  *v13 = v0;
  v13[1] = sub_1002534B4;
  return ((uint64_t (*)(uint64_t, uint64_t, _QWORD))v15)(v10, v12, v0[8]);
}

uint64_t sub_1002534B4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t (*v6)();
  uint64_t v7;
  unint64_t v8;

  v4 = *(_QWORD **)v2;
  v5 = *(_QWORD *)(*(_QWORD *)v2 + 224);
  *(_QWORD *)(*(_QWORD *)v2 + 232) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = sub_10025394C;
  }
  else
  {
    v7 = v4[26];
    v8 = v4[27];
    v4[30] = a1;
    sub_10001BC14(v7, v8);
    v6 = sub_100253530;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_100253530()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  int64_t v29;
  unint64_t v30;
  int64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  char *v48;
  int64_t v49;
  uint64_t v50;
  unint64_t v51;
  _BYTE *v52;
  _BYTE *v53;

  v2 = v0[29];
  v1 = v0[30];
  v3 = (_BYTE *)v0[17];
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v3);
  v53 = v3;
  sub_1001664D0(v1, (uint64_t)sub_100B27BE4, 0, isUniquelyReferenced_nonNull_native, &v53);
  if (v2)
    return swift_bridgeObjectRelease();
  v7 = v0[24];
  v6 = v0[25];
  v47 = v0;
  v8 = v53;
  swift_bridgeObjectRelease();
  v9 = sub_10001BC14(v7, v6);
  v10 = static os_log_type_t.debug.getter(v9);
  if (qword_1010EA310 != -1)
LABEL_27:
    swift_once(&qword_1010EA310, sub_100B5E2C8);
  os_log(_:dso:log:_:_:)(v10, &_mh_execute_header, qword_1011B7DF0, "Unpair header:", 14, 2, _swiftEmptyArrayStorage);
  v48 = v8 + 64;
  v11 = -1;
  v12 = -1 << v8[32];
  if (-v12 < 64)
    v11 = ~(-1 << -(char)v12);
  v13 = v11 & *((_QWORD *)v8 + 8);
  v49 = (unint64_t)(63 - v12) >> 6;
  v52 = v8;
  swift_bridgeObjectRetain(v8);
  v14 = 0;
  v8 = &type metadata for String;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v14 << 6);
      goto LABEL_8;
    }
    v29 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
      __break(1u);
LABEL_26:
      __break(1u);
      goto LABEL_27;
    }
    if (v29 >= v49)
      goto LABEL_24;
    v30 = *(_QWORD *)&v48[8 * v29];
    ++v14;
    if (!v30)
    {
      v14 = v29 + 1;
      if (v29 + 1 >= v49)
        goto LABEL_24;
      v30 = *(_QWORD *)&v48[8 * v14];
      if (!v30)
      {
        v14 = v29 + 2;
        if (v29 + 2 >= v49)
          goto LABEL_24;
        v30 = *(_QWORD *)&v48[8 * v14];
        if (!v30)
          break;
      }
    }
LABEL_23:
    v13 = (v30 - 1) & v30;
    v16 = __clz(__rbit64(v30)) + (v14 << 6);
LABEL_8:
    v17 = 16 * v16;
    v18 = (uint64_t *)(*((_QWORD *)v52 + 6) + v17);
    v10 = *v18;
    v19 = v18[1];
    v20 = (uint64_t *)(*((_QWORD *)v52 + 7) + v17);
    v21 = *v20;
    v22 = v20[1];
    swift_bridgeObjectRetain(v19);
    swift_bridgeObjectRetain(v22);
    v24 = static os_log_type_t.debug.getter(v23);
    v25 = qword_1011B7DF0;
    v26 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v27 = swift_allocObject(v26, 112, 7);
    *(_OWORD *)(v27 + 16) = xmmword_100E22B10;
    *(_QWORD *)(v27 + 56) = &type metadata for String;
    v28 = sub_10001AA00();
    *(_QWORD *)(v27 + 32) = v10;
    *(_QWORD *)(v27 + 40) = v19;
    *(_QWORD *)(v27 + 96) = &type metadata for String;
    *(_QWORD *)(v27 + 104) = v28;
    *(_QWORD *)(v27 + 64) = v28;
    *(_QWORD *)(v27 + 72) = v21;
    *(_QWORD *)(v27 + 80) = v22;
    os_log(_:dso:log:_:_:)(v24, &_mh_execute_header, v25, "%@: %@", 6, 2, v27);
    swift_bridgeObjectRelease();
  }
  v31 = v29 + 3;
  if (v31 < v49)
  {
    v30 = *(_QWORD *)&v48[8 * v31];
    if (!v30)
    {
      while (1)
      {
        v14 = v31 + 1;
        if (__OFADD__(v31, 1))
          goto LABEL_26;
        if (v14 >= v49)
          goto LABEL_24;
        v30 = *(_QWORD *)&v48[8 * v14];
        ++v31;
        if (v30)
          goto LABEL_23;
      }
    }
    v14 = v31;
    goto LABEL_23;
  }
LABEL_24:
  v50 = v47[19];
  v51 = v47[20];
  v33 = v47[9];
  v32 = v47[10];
  v34 = v47[7];
  v35 = swift_release();
  v36 = static os_log_type_t.debug.getter(v35);
  v37 = qword_1011B7DF0;
  v38 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v39 = swift_allocObject(v38, 72, 7);
  *(_OWORD *)(v39 + 16) = xmmword_100E22B00;
  sub_100253E14(v34, v32);
  v40 = String.init<A>(describing:)(v32, v33);
  v42 = v41;
  *(_QWORD *)(v39 + 56) = &type metadata for String;
  *(_QWORD *)(v39 + 64) = sub_10001AA00();
  *(_QWORD *)(v39 + 32) = v40;
  *(_QWORD *)(v39 + 40) = v42;
  os_log(_:dso:log:_:_:)(v36, &_mh_execute_header, v37, "Unpair body %@", 14, 2, v39);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  sub_10001BC14(v50, v51);
  sub_100253E94(v34);
  v44 = v47[19];
  v43 = v47[20];
  v45 = v47[13];
  v46 = v47[10];
  swift_task_dealloc(v47[16]);
  swift_task_dealloc(v45);
  swift_task_dealloc(v46);
  return ((uint64_t (*)(_BYTE *, uint64_t, uint64_t))v47[1])(v52, v44, v43);
}

uint64_t sub_10025394C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  unint64_t v35;
  int64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v52;
  _QWORD *v53;
  uint64_t v54;
  int64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;

  v1 = v0[29];
  v2 = v0[24];
  v3 = v0[25];
  sub_10001BC14(v0[26], v0[27]);
  v4 = sub_10001BC14(v2, v3);
  v5 = static os_log_type_t.error.getter(v4);
  v6 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v7 = swift_allocObject(v6, 72, 7);
  v52 = xmmword_100E22B00;
  *(_OWORD *)(v7 + 16) = xmmword_100E22B00;
  v53 = v0;
  v0[6] = v1;
  swift_errorRetain(v1);
  v8 = sub_10001A9A8((uint64_t *)&unk_1010EE2F0);
  v9 = String.init<A>(describing:)(v0 + 6, v8);
  v11 = v10;
  *(_QWORD *)(v7 + 56) = &type metadata for String;
  v12 = sub_10001AA00();
  *(_QWORD *)(v7 + 64) = v12;
  *(_QWORD *)(v7 + 32) = v9;
  *(_QWORD *)(v7 + 40) = v11;
  v13 = sub_100253E58();
  v14 = (void *)static OS_os_log.default.getter(v13);
  os_log(_:dso:log:_:_:)(v5, &_mh_execute_header, v14, "Failed to generate attestation header %@.", 41, 2, v7);

  swift_bridgeObjectRelease();
  v15 = swift_errorRelease(v1);
  v16 = v0[17];
  v17 = static os_log_type_t.debug.getter(v15);
  if (qword_1010EA310 != -1)
LABEL_25:
    swift_once(&qword_1010EA310, sub_100B5E2C8);
  os_log(_:dso:log:_:_:)(v17, &_mh_execute_header, qword_1011B7DF0, "Unpair header:", 14, 2, _swiftEmptyArrayStorage, v52);
  v54 = v16 + 64;
  v18 = -1;
  v19 = -1 << *(_BYTE *)(v16 + 32);
  if (-v19 < 64)
    v18 = ~(-1 << -(char)v19);
  v17 = v18 & *(_QWORD *)(v16 + 64);
  v55 = (unint64_t)(63 - v19) >> 6;
  v58 = v16;
  swift_bridgeObjectRetain(v16);
  v20 = 0;
  while (1)
  {
    if (v17)
    {
      v21 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      v22 = v21 | (v20 << 6);
      goto LABEL_6;
    }
    v34 = v20 + 1;
    if (__OFADD__(v20, 1))
    {
      __break(1u);
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    if (v34 >= v55)
      goto LABEL_22;
    v35 = *(_QWORD *)(v54 + 8 * v34);
    ++v20;
    if (!v35)
    {
      v20 = v34 + 1;
      if (v34 + 1 >= v55)
        goto LABEL_22;
      v35 = *(_QWORD *)(v54 + 8 * v20);
      if (!v35)
      {
        v20 = v34 + 2;
        if (v34 + 2 >= v55)
          goto LABEL_22;
        v35 = *(_QWORD *)(v54 + 8 * v20);
        if (!v35)
          break;
      }
    }
LABEL_21:
    v17 = (v35 - 1) & v35;
    v22 = __clz(__rbit64(v35)) + (v20 << 6);
LABEL_6:
    v23 = 16 * v22;
    v24 = (uint64_t *)(*(_QWORD *)(v58 + 48) + v23);
    v25 = *v24;
    v26 = v24[1];
    v27 = (uint64_t *)(*(_QWORD *)(v58 + 56) + v23);
    v16 = *v27;
    v28 = v27[1];
    swift_bridgeObjectRetain(v26);
    swift_bridgeObjectRetain(v28);
    v30 = static os_log_type_t.debug.getter(v29);
    v31 = qword_1011B7DF0;
    v32 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
    v33 = swift_allocObject(v32, 112, 7);
    *(_OWORD *)(v33 + 16) = xmmword_100E22B10;
    *(_QWORD *)(v33 + 56) = &type metadata for String;
    *(_QWORD *)(v33 + 64) = v12;
    *(_QWORD *)(v33 + 32) = v25;
    *(_QWORD *)(v33 + 40) = v26;
    *(_QWORD *)(v33 + 96) = &type metadata for String;
    *(_QWORD *)(v33 + 104) = v12;
    *(_QWORD *)(v33 + 72) = v16;
    *(_QWORD *)(v33 + 80) = v28;
    os_log(_:dso:log:_:_:)(v30, &_mh_execute_header, v31, "%@: %@", 6, 2, v33);
    swift_bridgeObjectRelease();
  }
  v36 = v34 + 3;
  if (v36 < v55)
  {
    v35 = *(_QWORD *)(v54 + 8 * v36);
    if (!v35)
    {
      while (1)
      {
        v20 = v36 + 1;
        if (__OFADD__(v36, 1))
          goto LABEL_24;
        if (v20 >= v55)
          goto LABEL_22;
        v35 = *(_QWORD *)(v54 + 8 * v20);
        ++v36;
        if (v35)
          goto LABEL_21;
      }
    }
    v20 = v36;
    goto LABEL_21;
  }
LABEL_22:
  v56 = v53[19];
  v57 = v53[20];
  v38 = v53[9];
  v37 = v53[10];
  v39 = v53[7];
  v40 = swift_release();
  v41 = static os_log_type_t.debug.getter(v40);
  v42 = qword_1011B7DF0;
  v43 = sub_10001A9A8((uint64_t *)&unk_1010ED710);
  v44 = swift_allocObject(v43, 72, 7);
  *(_OWORD *)(v44 + 16) = v52;
  sub_100253E14(v39, v37);
  v45 = String.init<A>(describing:)(v37, v38);
  *(_QWORD *)(v44 + 56) = &type metadata for String;
  *(_QWORD *)(v44 + 64) = v12;
  *(_QWORD *)(v44 + 32) = v45;
  *(_QWORD *)(v44 + 40) = v46;
  os_log(_:dso:log:_:_:)(v41, &_mh_execute_header, v42, "Unpair body %@", 14, 2, v44);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  sub_10001BC14(v56, v57);
  sub_100253E94(v39);
  v48 = v53[19];
  v47 = v53[20];
  v49 = v53[13];
  v50 = v53[10];
  swift_task_dealloc(v53[16]);
  swift_task_dealloc(v49);
  swift_task_dealloc(v50);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v53[1])(v58, v48, v47);
}

unint64_t sub_100253DCC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1010F3F58;
  if (!qword_1010F3F58)
  {
    v1 = type metadata accessor for AccessoryUnpairData(255);
    result = swift_getWitnessTable("YW#", v1);
    atomic_store(result, (unint64_t *)&qword_1010F3F58);
  }
  return result;
}

uint64_t sub_100253E14(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for AccessoryUnpairData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_100253E58()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1010ED8F0;
  if (!qword_1010ED8F0)
  {
    v1 = objc_opt_self(OS_os_log);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1010ED8F0);
  }
  return result;
}

uint64_t sub_100253E94(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for AccessoryUnpairData(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

ValueMetadata *type metadata accessor for AccessoryUnpairRequest()
{
  return &type metadata for AccessoryUnpairRequest;
}

uint64_t destroy for FamilyMember(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[6]);
  swift_bridgeObjectRelease(a1[8]);
  return swift_bridgeObjectRelease(a1[10]);
}

uint64_t initializeWithCopy for FamilyMember(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v5;
  v6 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v6;
  v7 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v7;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  return a1;
}

uint64_t assignWithCopy for FamilyMember(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v8 = *(_QWORD *)(a2 + 48);
  v9 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  v10 = *(_QWORD *)(a2 + 64);
  v11 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  v12 = *(_QWORD *)(a2 + 80);
  v13 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  return a1;
}

uint64_t assignWithTake for FamilyMember(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 48);
  v9 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v8;
  swift_bridgeObjectRelease(v9);
  v10 = *(_QWORD *)(a2 + 64);
  v11 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v10;
  swift_bridgeObjectRelease(v11);
  v12 = *(_QWORD *)(a2 + 80);
  v13 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v12;
  swift_bridgeObjectRelease(v13);
  return a1;
}

ValueMetadata *type metadata accessor for FamilyMember()
{
  return &type metadata for FamilyMember;
}

unint64_t sub_100254104()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  Swift::String v3;
  Swift::String v4;
  uint64_t v5;
  void *v6;
  Swift::String v7;
  Swift::String v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  Swift::String v12;

  _StringGuts.grow(_:)(47);
  swift_bridgeObjectRelease(0xE000000000000000);
  v1 = *(_QWORD *)v0;
  v2 = *(void **)(v0 + 8);
  swift_bridgeObjectRetain(v2);
  v3._countAndFlagsBits = v1;
  v3._object = v2;
  String.append(_:)(v3);
  swift_bridgeObjectRelease(v2);
  v4._countAndFlagsBits = 0x4449656C70706120;
  v4._object = (void *)0xEA0000000000203ALL;
  String.append(_:)(v4);
  v5 = *(_QWORD *)(v0 + 16);
  v6 = *(void **)(v0 + 24);
  swift_bridgeObjectRetain(v6);
  v7._countAndFlagsBits = v5;
  v7._object = v6;
  String.append(_:)(v7);
  swift_bridgeObjectRelease(v6);
  v8._countAndFlagsBits = 0x203A654D736920;
  v8._object = (void *)0xE700000000000000;
  String.append(_:)(v8);
  if ((*(_BYTE *)(v0 + 32) & 1) != 0)
    v9 = 1702195828;
  else
    v9 = 0x65736C6166;
  if ((*(_BYTE *)(v0 + 32) & 1) != 0)
    v10 = 0xE400000000000000;
  else
    v10 = 0xE500000000000000;
  v11 = v10;
  String.append(_:)(*(Swift::String *)&v9);
  swift_bridgeObjectRelease(v10);
  v12._countAndFlagsBits = 62;
  v12._object = (void *)0xE100000000000000;
  String.append(_:)(v12);
  return 0xD000000000000017;
}

Swift::Int sub_100254240()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[9];

  v1 = *v0;
  v2 = v0[1];
  Hasher.init(_seed:)(v4);
  String.hash(into:)(v4, v1, v2);
  return Hasher._finalize()();
}

uint64_t sub_100254288(uint64_t a1)
{
  _QWORD *v1;

  return String.hash(into:)(a1, *v1, v1[1]);
}

Swift::Int sub_100254290()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[9];

  v1 = *v0;
  v2 = v0[1];
  Hasher.init(_seed:)(v4);
  String.hash(into:)(v4, v1, v2);
  return Hasher._finalize()();
}

uint64_t sub_1002542D8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[5];
  uint64_t v8;
  _OWORD v9[5];
  uint64_t v10;

  v2 = *(_OWORD *)(a1 + 48);
  v7[2] = *(_OWORD *)(a1 + 32);
  v7[3] = v2;
  v7[4] = *(_OWORD *)(a1 + 64);
  v8 = *(_QWORD *)(a1 + 80);
  v3 = *(_OWORD *)(a1 + 16);
  v7[0] = *(_OWORD *)a1;
  v7[1] = v3;
  v4 = *(_OWORD *)(a2 + 48);
  v9[2] = *(_OWORD *)(a2 + 32);
  v9[3] = v4;
  v9[4] = *(_OWORD *)(a2 + 64);
  v10 = *(_QWORD *)(a2 + 80);
  v5 = *(_OWORD *)(a2 + 16);
  v9[0] = *(_OWORD *)a2;
  v9[1] = v5;
  return sub_100254388((uint64_t *)v7, (uint64_t)v9) & 1;
}

unint64_t sub_100254344()
{
  unint64_t result;

  result = qword_1010F3F60;
  if (!qword_1010F3F60)
  {
    result = swift_getWitnessTable(");#", &type metadata for FamilyMember);
    atomic_store(result, (unint64_t *)&qword_1010F3F60);
  }
  return result;
}

uint64_t sub_100254388(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v4 = *a1;
  v5 = a1[1];
  v6 = *(_QWORD *)(a2 + 8);
  if (v4 != *(_QWORD *)a2 || v5 != v6)
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, *(_QWORD *)a2, v6, 0);
    result = 0;
    if ((v8 & 1) == 0)
      return result;
  }
  v10 = a1[2];
  v11 = a1[3];
  v12 = *(_QWORD *)(a2 + 16);
  v13 = *(_QWORD *)(a2 + 24);
  if (v10 != v12 || v11 != v13)
  {
    v15 = _stringCompareWithSmolCheck(_:_:expecting:)(v10, v11, v12, v13, 0);
    result = 0;
    if ((v15 & 1) == 0)
      return result;
  }
  if (((*((unsigned __int8 *)a1 + 32) ^ *(unsigned __int8 *)(a2 + 32)) & 1) != 0)
    return 0;
  v16 = a1[6];
  v17 = *(_QWORD *)(a2 + 48);
  if (v16)
  {
    if (!v17)
      return 0;
    v18 = a1[5];
    v19 = *(_QWORD *)(a2 + 40);
    if (v18 != v19 || v16 != v17)
    {
      v20 = _stringCompareWithSmolCheck(_:_:expecting:)(v18, v16, v19, v17, 0);
      result = 0;
      if ((v20 & 1) == 0)
        return result;
    }
  }
  else if (v17)
  {
    return 0;
  }
  v21 = a1[8];
  v22 = *(_QWORD *)(a2 + 64);
  if (!v21)
  {
    if (v22)
      return 0;
    goto LABEL_28;
  }
  if (!v22)
    return 0;
  v23 = a1[7];
  v24 = *(_QWORD *)(a2 + 56);
  if (v23 == v24 && v21 == v22
    || (v25 = _stringCompareWithSmolCheck(_:_:expecting:)(v23, v21, v24, v22, 0), result = 0, (v25 & 1) != 0))
  {
LABEL_28:
    v26 = a1[10];
    v27 = *(_QWORD *)(a2 + 80);
    if (v26)
    {
      if (!v27)
        return 0;
      v28 = a1[9];
      v29 = *(_QWORD *)(a2 + 72);
      if ((v28 != v29 || v26 != v27) && (_stringCompareWithSmolCheck(_:_:expecting:)(v28, v26, v29, v27, 0) & 1) == 0)
        return 0;
    }
    else if (v27)
    {
      return 0;
    }
    return 1;
  }
  return result;
}

uint64_t sub_1002544DC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  char v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v14[24];

  swift_beginAccess(v2 + 16, v14, 32, 0);
  v5 = *(_QWORD *)(v2 + 16);
  if (*(_QWORD *)(v5 + 16) && (v6 = sub_100003FB0(a1), (v7 & 1) != 0))
  {
    v8 = v6;
    v9 = *(_QWORD *)(v5 + 56);
    v10 = type metadata accessor for UUID(0);
    v11 = *(_QWORD *)(v10 - 8);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v11 + 16))(a2, v9 + *(_QWORD *)(v11 + 72) * v8, v10);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v11 + 56))(a2, 0, 1, v10);
  }
  else
  {
    v12 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(a2, 1, 1, v12);
  }
  return swift_endAccess(v14);
}

uint64_t sub_1002545B4()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocClassInstance(v0, 32, 7);
}

uint64_t _s22SharedBeaconUUIDMapperCMa()
{
  return objc_opt_self(_TtCC12searchpartyd11BeaconStore22SharedBeaconUUIDMapper);
}

uint64_t sub_100254600(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  *(_QWORD *)(v1 + 136) = a1;
  v2 = (_QWORD *)swift_task_alloc(dword_1010F4024);
  *(_QWORD *)(v1 + 144) = v2;
  *v2 = v1;
  v2[1] = sub_10025465C;
  return swift_task_switch(sub_1001BE9AC, 0, 0);
}

uint64_t sub_10025465C(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(*v2 + 144);
  v4 = *v2;
  *(_QWORD *)(v4 + 152) = a1;
  swift_task_dealloc(v3);
  if (v1)
    return (*(uint64_t (**)(void))(v4 + 8))();
  else
    return swift_task_switch(sub_1002546D0, 0, 0);
}

uint64_t sub_1002546D0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v1 = v0[19];
  v2 = type metadata accessor for SharingCircleKeyManager();
  v3 = swift_allocObject(v2, 128, 15);
  v0[20] = v3;
  swift_retain();
  swift_defaultActor_initialize(v3);
  v4 = type metadata accessor for KeyDropInterface();
  v0[21] = v4;
  v5 = swift_allocObject(v4, 128, 15);
  swift_defaultActor_initialize(v5);
  *(_QWORD *)(v5 + 112) = 0;
  *(_QWORD *)(v5 + 120) = 0;
  *(_QWORD *)(v3 + 112) = v5;
  *(_QWORD *)(v3 + 120) = v1;
  v6 = (_QWORD *)swift_task_alloc(dword_1010F402C);
  v0[22] = v6;
  *v6 = v0;
  v6[1] = sub_100254788;
  return swift_task_switch(sub_100257B0C, 0, 0);
}

uint64_t sub_100254788(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 176);
  *(_QWORD *)(*v2 + 184) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = sub_1002548E8;
  }
  else
  {
    *(_QWORD *)(v4 + 192) = a1;
    v6 = sub_1002547FC;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_1002547FC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = v0[24];
  v2 = type metadata accessor for IDSTransportService_ItemSharingCrossAccount();
  v0[25] = v2;
  v0[5] = v2;
  v0[6] = &off_10109EA18;
  v0[2] = v1;
  v3 = (_QWORD *)swift_task_alloc(dword_1010F4034);
  v0[26] = v3;
  *v3 = v0;
  v3[1] = sub_100254874;
  return swift_task_switch(sub_1001BECD8, 0, 0);
}

uint64_t sub_100254874(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 208);
  *(_QWORD *)(*v2 + 216) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = sub_100254AB4;
  }
  else
  {
    *(_QWORD *)(v4 + 224) = a1;
    v6 = sub_100254924;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_1002548E8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 160);
  swift_release(*(_QWORD *)(v0 + 152));
  swift_release(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100254924()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  _QWORD *v10;

  v1 = v0[28];
  v2 = v0[25];
  v3 = v0[20];
  v4 = v0[19];
  v5 = swift_allocObject(v0[21], 128, 15);
  swift_defaultActor_initialize(v5);
  *(_QWORD *)(v5 + 112) = 0;
  *(_QWORD *)(v5 + 120) = 0;
  v6 = sub_10009F5D0((uint64_t)(v0 + 2), v2);
  v7 = *(_QWORD *)(v2 - 8);
  v8 = (uint64_t *)swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v7 + 16))(v8, v6, v2);
  v9 = *v8;
  swift_retain();
  swift_retain();
  v0[29] = sub_10025690C(v4, v9, v1, v5, v3);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2);
  swift_task_dealloc(v8);
  v10 = (_QWORD *)swift_task_alloc(dword_1010F402C);
  v0[30] = v10;
  *v10 = v0;
  v10[1] = sub_100254A40;
  return swift_task_switch(sub_100257B0C, 0, 0);
}

uint64_t sub_100254A40(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 240);
  *(_QWORD *)(*v2 + 248) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = sub_100254BE0;
  }
  else
  {
    *(_QWORD *)(v4 + 256) = a1;
    v6 = sub_100254AFC;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_100254AB4()
{
  uint64_t v0;

  swift_release();
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 16));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100254AFC()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = v0[32];
  v0[10] = v0[25];
  v0[11] = &off_10109EA18;
  v0[7] = v1;
  v2 = (_QWORD *)swift_task_alloc(dword_1010F4034);
  v0[33] = v2;
  *v2 = v0;
  v2[1] = sub_100254B6C;
  return swift_task_switch(sub_1001BECD8, 0, 0);
}

uint64_t sub_100254B6C(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 264);
  *(_QWORD *)(*v2 + 272) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = sub_100254E14;
  }
  else
  {
    *(_QWORD *)(v4 + 280) = a1;
    v6 = sub_100254C28;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_100254BE0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 232);
  v2 = *(_QWORD *)(v0 + 160);
  swift_release(*(_QWORD *)(v0 + 152));
  swift_release(v2);
  swift_release(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100254C28()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t (*v14)(void *, uint64_t);

  v1 = *(_QWORD *)(v0 + 280);
  v2 = *(_QWORD *)(v0 + 80);
  v3 = sub_10009F5D0(v0 + 56, v2);
  v4 = *(_QWORD *)(v2 - 8);
  v5 = (uint64_t *)swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v4 + 16))(v5, v3, v2);
  v6 = *v5;
  v7 = swift_retain();
  v8 = sub_100256BD8(v7, v6, v1);
  *(_QWORD *)(v0 + 288) = v8;
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 56));
  swift_task_dealloc(v5);
  if (qword_1010E9AD0 != -1)
    swift_once(&qword_1010E9AD0, sub_100254F28);
  v9 = *(_QWORD *)(v0 + 232);
  sub_100030784(*(_QWORD *)(v0 + 136), v0 + 96);
  v10 = swift_allocObject(&unk_101062E80, 72, 7);
  *(_QWORD *)(v0 + 296) = v10;
  *(_QWORD *)(v10 + 16) = v9;
  sub_10000F9FC((__int128 *)(v0 + 96), v10 + 24);
  *(_QWORD *)(v10 + 64) = v8;
  v11 = *((unsigned int *)&async function pointer to dispatch thunk of WorkItemQueue.enqueueAndAwaitResult(_:) + 1);
  v14 = (uint64_t (*)(void *, uint64_t))((char *)&async function pointer to dispatch thunk of WorkItemQueue.enqueueAndAwaitResult(_:)
                                                + async function pointer to dispatch thunk of WorkItemQueue.enqueueAndAwaitResult(_:));
  swift_retain();
  swift_retain();
  v12 = (_QWORD *)swift_task_alloc(v11);
  *(_QWORD *)(v0 + 304) = v12;
  *v12 = v0;
  v12[1] = sub_100254DA8;
  return v14(&unk_1010F4160, v10);
}

uint64_t sub_100254DA8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 304);
  *(_QWORD *)(*(_QWORD *)v1 + 312) = v0;
  swift_task_dealloc(v2);
  swift_release();
  if (v0)
    v3 = sub_100254ECC;
  else
    v3 = sub_100254E70;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_100254E14()
{
  uint64_t v0;

  swift_release();
  swift_release();
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((_QWORD *)(v0 + 56));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100254E70()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 232);
  v3 = *(_QWORD *)(v0 + 152);
  v2 = *(_QWORD *)(v0 + 160);
  swift_release(*(_QWORD *)(v0 + 288));
  swift_release(v1);
  swift_release(v2);
  swift_release(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100254ECC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 288);
  v2 = *(_QWORD *)(v0 + 232);
  v3 = *(_QWORD *)(v0 + 160);
  swift_release(*(_QWORD *)(v0 + 152));
  swift_release(v3);
  swift_release(v2);
  swift_release(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100254F28()
{
  uint64_t v0;
  char *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  type metadata accessor for UUID(0);
  __chkstk_darwin();
  v1 = (char *)&v4 - ((v0 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = type metadata accessor for WorkItemQueue(0);
  UUID.init()(v2);
  result = WorkItemQueue.__allocating_init(name:identifier:)(0xD000000000000016, 0x8000000100ECC590, v1);
  qword_1010F4010 = result;
  return result;
}

uint64_t sub_100254FB4(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4;
  _QWORD *v8;

  v8 = (_QWORD *)swift_task_alloc(dword_1011163C4);
  *(_QWORD *)(v4 + 16) = v8;
  *v8 = v4;
  v8[1] = sub_100004A74;
  return sub_100B68548(a2, a3, a4);
}

uint64_t sub_100255020(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4;
  _QWORD *v8;

  v8 = (_QWORD *)swift_task_alloc(dword_1011204EC);
  *(_QWORD *)(v4 + 16) = v8;
  *v8 = v4;
  v8[1] = sub_100004A74;
  return sub_100DB20A8(a2, a3, a4);
}

uint64_t sub_10025508C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  v7[7] = a6;
  v7[8] = a7;
  v7[5] = a4;
  v7[6] = a5;
  v7[3] = a2;
  v7[4] = a3;
  v7[2] = a1;
  v8 = sub_10001A9A8(&qword_1010EE1E0);
  v7[9] = v8;
  v7[10] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10001A9A8(&qword_1010EE1E8);
  v7[11] = v9;
  v7[12] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100255120, 0, 0);
}

uint64_t sub_100255120()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);
  void (*v15)(uint64_t, uint64_t, uint64_t);
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  char v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  v1 = *(int **)(v0 + 88);
  v2 = *(_QWORD *)(v0 + 96);
  v4 = *(int **)(v0 + 72);
  v3 = *(_QWORD *)(v0 + 80);
  v5 = *(_QWORD *)(v0 + 24);
  v6 = *(_QWORD *)(v0 + 32);
  v60 = v1[12];
  v7 = v1[16];
  v8 = v2 + v7;
  v9 = v1[20];
  v56 = (uint64_t *)(v2 + v9);
  v50 = v1[24];
  v10 = v1[28];
  v51 = (uint64_t *)(v2 + v10);
  v11 = v5 + v7;
  v58 = (uint64_t *)(v5 + v9);
  v49 = (uint64_t *)(v5 + v10);
  v12 = type metadata accessor for UUID(0);
  *(_QWORD *)(v0 + 104) = v12;
  v13 = *(_QWORD *)(v12 - 8);
  *(_QWORD *)(v0 + 112) = v13;
  v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16);
  v14(v2, v5, v12);
  v15 = v14;
  v55 = *(_BYTE *)(v5 + v60);
  *(_BYTE *)(v2 + v60) = v55;
  v54 = *(_QWORD *)(v11 + 8);
  v61 = *(_QWORD *)(v11 + 16);
  v16 = *(_BYTE *)v11;
  v53 = *(_BYTE *)v11;
  *(_QWORD *)(v0 + 120) = v61;
  *(_BYTE *)v8 = v16;
  *(_QWORD *)(v8 + 8) = v54;
  *(_QWORD *)(v8 + 16) = v61;
  v52 = *v58;
  v59 = v58[1];
  *(_QWORD *)(v0 + 128) = v59;
  *v56 = v52;
  v56[1] = v59;
  v57 = *(_QWORD *)(v5 + v50);
  *(_QWORD *)(v0 + 136) = v57;
  *(_QWORD *)(v2 + v50) = v57;
  v17 = *v49;
  *(_QWORD *)(v0 + 144) = *v49;
  v47 = v49[1];
  v48 = v17;
  *(_QWORD *)(v0 + 152) = v47;
  *v51 = v17;
  v51[1] = v47;
  v18 = v4[12];
  *(_DWORD *)(v0 + 200) = v18;
  v19 = v3 + v18;
  v20 = v4[16];
  v21 = (_QWORD *)(v3 + v20);
  v22 = v4[20];
  v46 = (_QWORD *)(v3 + v22);
  v23 = v4[24];
  v45 = (_QWORD *)(v3 + v23);
  v43 = v4[32];
  v44 = v4[28];
  v24 = v4[40];
  v25 = v6 + v18;
  v41 = v4[36];
  v42 = (_QWORD *)(v3 + v24);
  v26 = (uint64_t *)(v6 + v20);
  v27 = (uint64_t *)(v6 + v22);
  v28 = (uint64_t *)(v6 + v23);
  v40 = (uint64_t *)(v6 + v24);
  v15(v3, v6, v12);
  sub_10000F9B8(v25, v19, &qword_1010ED860);
  v30 = v26[1];
  v29 = *v26;
  *(_QWORD *)(v0 + 160) = v30;
  *v21 = v29;
  v21[1] = v30;
  v32 = v27[1];
  v31 = *v27;
  *(_QWORD *)(v0 + 168) = v32;
  *v46 = v31;
  v46[1] = v32;
  v34 = v28[1];
  v33 = *v28;
  *(_QWORD *)(v0 + 176) = v34;
  *v45 = v33;
  v45[1] = v34;
  *(_DWORD *)(v3 + v44) = *(_DWORD *)(v6 + v44);
  *(_DWORD *)(v3 + v43) = *(_DWORD *)(v6 + v43);
  *(_QWORD *)(v3 + v41) = *(_QWORD *)(v6 + v41);
  v36 = *v40;
  v35 = v40[1];
  *(_QWORD *)(v0 + 184) = v35;
  *v42 = v36;
  v42[1] = v35;
  swift_bridgeObjectRetain(v61);
  swift_bridgeObjectRetain(v59);
  swift_bridgeObjectRetain(v57);
  sub_10001BBBC(v48, v47);
  v37 = dword_1011163D4;
  swift_bridgeObjectRetain(v30);
  swift_bridgeObjectRetain(v32);
  swift_bridgeObjectRetain(v34);
  swift_bridgeObjectRetain(v35);
  v38 = (_QWORD *)swift_task_alloc(v37);
  *(_QWORD *)(v0 + 192) = v38;
  *v38 = v0;
  v38[1] = sub_100255468;
  return sub_100B70330(*(_QWORD *)(v0 + 96), v55, v53, v54, v61, v52, v59, v57);
}

